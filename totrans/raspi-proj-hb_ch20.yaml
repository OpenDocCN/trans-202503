- en: '**20'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Wi-Fi Remote-Controlled Robot**
  prefs: []
  type: TYPE_NORMAL
- en: In this project you’re going to build a two-wheel, battery-powered robot with
    a Raspberry Pi Zero W and the MotoZero add-on. You can control it over Wi-Fi using
    a web app you’ll make with Node-RED.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0248-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi Zero W (or other 40 GPIO Raspberry Pi)
  prefs: []
  type: TYPE_NORMAL
- en: Smart robot car chassis kit
  prefs: []
  type: TYPE_NORMAL
- en: MotoZero add-on board (or other motor controller add-on)
  prefs: []
  type: TYPE_NORMAL
- en: Four AA batteries
  prefs: []
  type: TYPE_NORMAL
- en: Portable charger
  prefs: []
  type: TYPE_NORMAL
- en: Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: '**SOFTWARE REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Node-RED dashboard
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT OUTLINE**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Rather than going straight into the project, we’ll highlight the most important
    parts of the robot to give you an idea of how it will all work.
  prefs: []
  type: TYPE_NORMAL
- en: '**Wi-Fi**'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll control the robot with a Node-RED application, so your Raspberry Pi needs
    to have Wi-Fi. Raspberry Pi models 3 and Zero W have built-in Wi-Fi, but if your
    board doesn’t, you can use a Wi-Fi dongle compatible with the Pi.
  prefs: []
  type: TYPE_NORMAL
- en: '**Raspberry Pi Board**'
  prefs: []
  type: TYPE_NORMAL
- en: We’re using the Raspberry Pi Zero W because its small size makes it perfect
    for the small robot chassis. But any Raspberry Pi version with 40 GPIOs is compatible
    with this project as long as it has Wi-Fi.
  prefs: []
  type: TYPE_NORMAL
- en: '**Robot Chassis Kit**'
  prefs: []
  type: TYPE_NORMAL
- en: We’re using a robot chassis kit that comes with everything you need to build
    the robot, including wheels, motors, and screws. You can find the kit in online
    marketplaces like Amazon or eBay by searching for *Smart Car Robot Chassis Kit*.
    You need the kit with two DC motors.
  prefs: []
  type: TYPE_NORMAL
- en: '**MotoZero Add-on**'
  prefs: []
  type: TYPE_NORMAL
- en: The DC motors will make the robot move, and you’ll control them using an add-on
    board called MotoZero. One place to find the board is online at The Pi Hut (*[https://thepihut.com/motozero/](https://thepihut.com/motozero/)*).
    You can also use any other Raspberry Pi–compatible motor driver add-on for this
    project or build a circuit with the LC293D IC chip. We won’t cover how to build
    that circuit here, but there are plenty of tutorials online if you want to make
    your own.
  prefs: []
  type: TYPE_NORMAL
- en: '**Power**'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t want to connect the Pi robot to a wall socket, because we want it to
    be portable, so we need to power the robot with a portable charger, or *power
    bank*. The power bank must be capable of outputting 5 V and 2 A. We tested this
    project with a power bank that has 2,200 mAh capacity and it worked fine; incorporating
    a power bank with more capacity will make the robot run for longer.
  prefs: []
  type: TYPE_NORMAL
- en: The DC motors need to be powered independently from the Pi, meaning you need
    two independent power sources. To power up the motors, we’re using the battery
    holder that comes with the chassis kit along with four AA batteries, not included
    in the kit.
  prefs: []
  type: TYPE_NORMAL
- en: '**Node-RED Application**'
  prefs: []
  type: TYPE_NORMAL
- en: The Node-RED application you’ll use to control your robot should be able to
    make the robot go forward and backward, move right and left, and stop. Since you’re
    not running the Pi as a desktop computer, the Pi needs to automatically start
    Node-RED when it boots. You’ll also add an off button to the application so you
    can turn the Raspberry Pi off remotely.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 20-1](ch20.xhtml#ch20fig1) shows a high-level overview of how your
    robot will work.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0250-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 20-1:** The robot structure'
  prefs: []
  type: TYPE_NORMAL
- en: '**PREPARING THE RASPBERRY PI**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’re using the Raspberry Pi Zero W board, shown in [Figure 20-2](ch20.xhtml#ch20fig2),
    which is a variant of Raspberry Pi Zero that has built-in wireless LAN and Bluetooth,
    but remember that you can use another Wi-Fi compatible board or a Wi-Fi dongle.
    The Raspberry Pi Zero W measures only 2.56 inches × 1.18 inches × 0.20 inches
    (65 mm × 30 mm × 5 mm) and costs around $10.
  prefs: []
  type: TYPE_NORMAL
- en: The Pi Zero has 40 GPIO pins with the same pinout as the Pi 3\. As you can see
    in [Figure 20-2](ch20.xhtml#ch20fig2), it features a mini HDMI connector and two
    micro USB connectors, one of which is used exclusively for power. To use the Pi
    Zero as a desktop computer, you need a few extra accessories like a USB hub, a
    USB-to-micro-USB adapter, and an HDMI-to-mini-HDMI adapter to connect the peripherals.
    To save you some money, we’ll prepare everything on our regular Raspberry Pi 3
    and then switch the micro SD card to the Pi Zero W.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0251-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 20-2:** Raspberry Pi Zero W'
  prefs: []
  type: TYPE_NORMAL
- en: We recommend using a new micro SD card for this project. Refer to [“Uploading
    the Operating System”](ch00.xhtml#lev10) on [page 10](ch00.xhtml#page_10) to see
    how to install the latest Raspbian release on your new micro SD card.
  prefs: []
  type: TYPE_NORMAL
- en: After installing the operating system, insert the micro SD card on your regular
    Pi. Power up the Pi and wait a few seconds for the system to start. Then configure
    the Wi-Fi from the desktop’s top-right corner by clicking **Wi-Fi**. Next, enter
    your Wi-Fi password, and wait a few seconds for the Wi-Fi connection to successfully
    establish.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Node-RED software is preinstalled on the Pi’s operating system, but you
    still need to install the Node-RED dashboard. For that, first update the library
    repositories, and then install npm (Node Package Management) by entering the following
    at your command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When prompted, type Y and press ENTER. The installation may take a few minutes.
    Then enter the following commands to upgrade npm to the latest 3.x version, which
    is the version recommended for use with Node-RED:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, enter the following to install the Node-RED dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Again, Node-RED needs to start automatically when the Pi boots. For that, enter
    the following command in the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: With that done, shut down your Pi and switch the micro SD card to the Raspberry
    Pi Zero W.
  prefs: []
  type: TYPE_NORMAL
- en: '**WIRING THE CIRCUIT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To build the robot structure you need a chassis for the robot, two DC motors
    with corresponding wheels, the MotoZero add-on, jumper wires, and your Pi (with
    Wi-Fi). Use [Figure 20-1](ch20.xhtml#ch20fig1) as a reference. We’ll start by
    mounting the MotoZero at the top of the Raspberry Pi and then wire the motors
    to MotoZero.
  prefs: []
  type: TYPE_NORMAL
- en: '**Wiring the DC Motors to MotoZero**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: MotoZero allows you to control four motors independently, but you need to control
    just two DC motors. The MotoZero will come unassembled, so you need to solder
    its parts. The Pi Hut provides an assembly manual on the product’s page, so go
    to *[https://thepihut.com/motozero/](https://thepihut.com/motozero/)* and follow
    the instructions there before continuing. Your MotoZero should look like [Figure
    20-3](ch20.xhtml#ch20fig3) after assembly.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0252-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 20-3:** Assembled MotoZero add-on'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 20-3](ch20.xhtml#ch20fig3) shows the connections you can make to MotoZero:
    positive (+) and negative (–) connections for four DC motors, and a positive (+)
    and negative (–) connection for the power supply. You need an external power source
    for driving the motors. The motors require a big jump in current to move, so using
    a separate power source prevents the Pi from suddenly losing power when this jump
    occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: Follow these instructions and refer to [Figure 20-1](ch20.xhtml#ch20fig1) to
    wire the motors and battery holder.
  prefs: []
  type: TYPE_NORMAL
- en: Connect the right DC motor’s red wire to the Motor 1 positive (+) pin on the
    MotoZero, and its black wire to the Motor 1 negative (–) pin. You’ll need to loosen
    the screws, place the wires in the pin slot, and then tighten the screws again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the previous instruction for the left motor, connecting the power wires
    to the MotoZero Motor 2 connections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Without inserting the batteries, connect the battery holder’s red wire to the
    positive (+) pin on the MotoZero power connector and its black wire to the negative
    (–) pin, shown at the bottom of the board in [Figure 20-3](ch20.xhtml#ch20fig3).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you find the robot’s wheels are spinning in the opposite direction of what
    you intended, you may have to switch the DC motors’ red wires with the black wires
    on the positive (+) and negative (–) Motor 1 or Motor 2 terminals. You’ll know
    if you need to do this when you test the application at the end of the project.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Controlling the Motors with MotoZero**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Each DC motor has three GPIO pins associated with it. One pin, known as the
    *enable* pin, enables the motor and is like an on and off switch. The other two
    pins control the power to the positive and negative motor wires. Applying power
    to one wire and GND to the other makes the motor turn in one direction, while
    applying power and GND to the opposite motor wires moves the motor in the opposite
    direction.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*For information about the Motor 3 and Motor 4 GPIOs, you can check the MotoZero
    manual at The Pi Hut’s product page* ([https://thepihut.com/motozero/](https://thepihut.com/motozero/)).'
  prefs: []
  type: TYPE_NORMAL
- en: We’re just using the Motor 1 and Motor 2 terminals, which are controlled by
    the GPIOs shown in the following table, when you mount the MotoZero on the top
    of the Pi.
  prefs: []
  type: TYPE_NORMAL
- en: '| **MOTOR 1** | **MOTOR 2** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| enable: GPIO 5 | enable: GPIO 6 |'
  prefs: []
  type: TYPE_TB
- en: '| Motor 1 (+): GPIO 27 | Motor 2 (+): GPIO 22 |'
  prefs: []
  type: TYPE_TB
- en: '| Motor 1 (–): GPIO 24 | Motor 2 (–): GPIO 17 |'
  prefs: []
  type: TYPE_TB
- en: 'To make a motor spin, the enable pin must be HIGH to turn the motor on, and
    one—and only one—of the positive or negative pins should be HIGH. For example,
    if you want Motor 1 to spin in one direction, use the following setup:'
  prefs: []
  type: TYPE_NORMAL
- en: 'GPIO 5: HIGH'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GPIO 27: HIGH'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GPIO 24: LOW'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To make the same motor spin in the opposite direction, use this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'GPIO 5: HIGH'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GPIO 27: LOW'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GPIO 24: HIGH'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To turn off the motor, you’d send a LOW signal to all the GPIOs. The same logic
    applies to the other motors.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE APPLICATION**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you’ve built your hardware, it’s time to create the Node-RED application.
    As your Pi is already in your robot chassis, the most practical way to create
    the robot Node-RED application is to use your regular desktop or laptop computer
    and control it from there.
  prefs: []
  type: TYPE_NORMAL
- en: First you’ll need to find your Raspberry Pi Zero W IP address; you’ll use it
    to access the Pi’s Node-RED application dashboard, where you can create a robot
    application.
  prefs: []
  type: TYPE_NORMAL
- en: You need to make sure the Raspberry Pi is turned on and that your computer and
    Pi are connected to the same network before continuing.
  prefs: []
  type: TYPE_NORMAL
- en: '**Finding the Raspberry Pi IP Address**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**WARNING**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The Raspberry Pi Zero W has two mini USB ports, and one of them, labeled*
    PWR IN, *is designated for powering up the Pi.*'
  prefs: []
  type: TYPE_NORMAL
- en: Power up the Raspberry Pi by connecting the 5 V power adapter to a wall socket.
    You’ll only use this power source while creating the Node-RED application; once
    it’s ready, you should change to the portable power source.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll find the Pi’s IP address using Angry IP Scanner software. Download it
    onto your regular desktop or laptop computer for free from *[http://angryip.org/download/](http://angryip.org/download/)*,
    and then follow the prompts to install it.
  prefs: []
  type: TYPE_NORMAL
- en: Once the installation is complete, open Angry IP Scanner and click the **Start**
    button. Wait a few seconds until it shows the available IP addresses. Your Pi
    IP address should have *raspberrypi.lan* as a hostname, so jot down the corresponding
    IP address. [Figure 20-4](ch20.xhtml#ch20fig4) highlights our Raspberry Pi IP
    address, which is 192.168.1.122.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0254-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 20-4:** Finding the Raspberry Pi IP address with the Angry IP Scanner
    software'
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating the Node-RED Flow**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*For an introduction to Node-RED, see [Project 17](ch17.xhtml#ch17).*'
  prefs: []
  type: TYPE_NORMAL
- en: On your regular computer, making sure it’s on the same network as your Pi, open
    a web browser tab and go to *http://<Pi IP address>:1880*, replacing *<Pi IP address>*
    with the Raspberry Pi IP address you noted earlier. In our case, we navigated
    to *http://192.168.1.122:1880*. Your Raspberry Pi Node-RED web server should open.
  prefs: []
  type: TYPE_NORMAL
- en: In the top-right corner of the window, select the **dashboard** tab and, inside
    the **Layout** tab, create a tab called **Robot**. Next, create two groups inside
    that Robot tab, called **Main** and **Poweroff**. The Main group is where you’ll
    organize the buttons that control the robot, and the Poweroff group is where you’ll
    add the button to remotely turn off your Raspberry Pi. Once you’ve completed these
    tabs and groups, your layout should look like [Figure 20-5](ch20.xhtml#ch20fig5).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0255-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 20-5:** Node-RED application dashboard layout'
  prefs: []
  type: TYPE_NORMAL
- en: Add five buttons, a function, six rpi gpio output nodes, and an exec node to
    the flow. Wire the nodes and edit their names to match the ones in [Figure 20-6](ch20.xhtml#ch20fig6).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0255-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 20-6:** Node-RED application nodes'
  prefs: []
  type: TYPE_NORMAL
- en: Edit the function’s properties so that it has six outputs, assigning all of
    the nodes’ properties as shown in [Table 20-1](ch20.xhtml#ch20tab1).
  prefs: []
  type: TYPE_NORMAL
- en: '**TABLE 20-1:** Properties assigned to each node'
  prefs: []
  type: TYPE_NORMAL
- en: '| **NODE** | **PROPERTIES** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Forward | Group: Main [Robot] Size: auto'
  prefs: []
  type: TYPE_NORMAL
- en: 'Icon: fa-arrow-up'
  prefs: []
  type: TYPE_NORMAL
- en: 'Label: Forward'
  prefs: []
  type: TYPE_NORMAL
- en: 'Payload: forward |'
  prefs: []
  type: TYPE_NORMAL
- en: '| Left | Group: Main [Robot] Size: auto'
  prefs: []
  type: TYPE_NORMAL
- en: 'Icon: fa-arrow-left'
  prefs: []
  type: TYPE_NORMAL
- en: 'Label: Left'
  prefs: []
  type: TYPE_NORMAL
- en: 'Payload: left |'
  prefs: []
  type: TYPE_NORMAL
- en: '| Right | Group: Main [Robot] Size: auto'
  prefs: []
  type: TYPE_NORMAL
- en: 'Icon: fa-arrow-right'
  prefs: []
  type: TYPE_NORMAL
- en: 'Label: Right'
  prefs: []
  type: TYPE_NORMAL
- en: 'Payload: right |'
  prefs: []
  type: TYPE_NORMAL
- en: '| Reverse | Group: Main [Robot] Size: auto'
  prefs: []
  type: TYPE_NORMAL
- en: 'Icon: fa-arrow-down'
  prefs: []
  type: TYPE_NORMAL
- en: 'Label: Reverse'
  prefs: []
  type: TYPE_NORMAL
- en: 'Payload: reverse |'
  prefs: []
  type: TYPE_NORMAL
- en: '| Stop | Group: Main [Robot] Size: auto'
  prefs: []
  type: TYPE_NORMAL
- en: 'Icon: fa-hand-paper-o'
  prefs: []
  type: TYPE_NORMAL
- en: 'Label: Stop'
  prefs: []
  type: TYPE_NORMAL
- en: 'Payload: stop |'
  prefs: []
  type: TYPE_NORMAL
- en: '| f | Function: enter the code in [Listing 20-1](ch20.xhtml#ch20list1) Outputs:
    6 |'
  prefs: []
  type: TYPE_TB
- en: '| Enable M1 | GPIO: GPIO5 – 29 Type: Digital output |'
  prefs: []
  type: TYPE_TB
- en: '| + M1 | GPIO: GPIO27 – 13 Type: Digital output |'
  prefs: []
  type: TYPE_TB
- en: '| – M1 | GPIO: 18 – GPIO24 Type: Digital output |'
  prefs: []
  type: TYPE_TB
- en: '| Enable M2 | GPIO: GPIO17 – 11 Type: Digital output |'
  prefs: []
  type: TYPE_TB
- en: '| + M2 | GPIO: GPIO6 – 31 Type: Digital output |'
  prefs: []
  type: TYPE_TB
- en: '| – M2 | GPIO: GPIO22 – 15 Type: Digital output |'
  prefs: []
  type: TYPE_TB
- en: '| Poweroff | Group: Poweroff [Robot] Size: auto'
  prefs: []
  type: TYPE_NORMAL
- en: 'Icon: fa-power-off'
  prefs: []
  type: TYPE_NORMAL
- en: 'Label: Poweroff'
  prefs: []
  type: TYPE_NORMAL
- en: 'Background: red |'
  prefs: []
  type: TYPE_NORMAL
- en: '| exec | Command: `/usr/bin/sudo` + Append: not checked'
  prefs: []
  type: TYPE_NORMAL
- en: poweroff
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: Poweroff |'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 20-7](ch20.xhtml#ch20fig7) shows how the exec node is set up.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0257-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 20-7:** exec node properties'
  prefs: []
  type: TYPE_NORMAL
- en: All nodes should be in the Main group, except the Poweroff button, which should
    be part of the Poweroff group.
  prefs: []
  type: TYPE_NORMAL
- en: '**Entering the Script**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Insert the JavaScript code in [Listing 20-1](ch20.xhtml#ch20list1) (also available
    for download from *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*)
    into the function node:'
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 20-1:** The remote-controlled robot script'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This function sends messages to the connected rpi gpio output nodes in the order
    they’re connected to the function node. This means that `msg1` is sent to the
    Enable M1 node, `msg2` to + M1, `msg3` to – M1, and so on (see [Figure 20-6](ch20.xhtml#ch20fig6)).
  prefs: []
  type: TYPE_NORMAL
- en: First you initialize all the payload message variable values to `0` ➊. Then
    the series of `if` and `else if` statements checks which button was pressed ➋,
    depending on the payload received by the function, and sets the message values
    according to the action the robot should take. For example, if you press the Forward
    button, the payload received by the function node is `forward`, so the condition
    at ➋ is met and the code changes the `msg1`, `msg2`, `msg4`, and `msg5` payload
    values to `1`, while `msg3` and `msg6` remain `0`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, the function node sends the `msg.payload` values to the corresponding
    nodes ➌. For the robot to go forward, the payloads would need to be:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable M1: `1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '+ M1: `1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '– M2: `0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Enable M2: `1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '+ M2: `1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '– M2: `0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here, both motors are enabled and moving in the same direction—forward. The
    following table shows the messages the function should send to each node for each
    action.
  prefs: []
  type: TYPE_NORMAL
- en: '| **ACTION** | **ENABLE M1** | **+ M1** | **– M1** | **ENABLE M2** | **+ M2**
    | **– M2** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Forward | 1 | 1 | 0 | 1 | 1 | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| Left | 1 | 1 | 0 | 0 | 0 | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| Right | 0 | 0 | 0 | 1 | 1 | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| Reverse | 1 | 0 | 1 | 1 | 0 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| Stop | 0 | 0 | 0 | 0 | 0 | 0 |'
  prefs: []
  type: TYPE_TB
- en: When the Stop button is clicked, none of the conditions set in the code is met,
    and the function sends the values initialized at the start ➊.
  prefs: []
  type: TYPE_NORMAL
- en: Outside the function node, when the Poweroff button is clicked, the exec node
    executes the `poweroff` command to turn off the Pi. Remember that you’ve filled
    the `exec` command property with */usr/bin/sudo/poweroff*—see [Table 20-1](ch20.xhtml#ch20tab1).
  prefs: []
  type: TYPE_NORMAL
- en: Once everything is in place, click the **Deploy** button at the top-right corner
    to save the changes and run the flow.
  prefs: []
  type: TYPE_NORMAL
- en: '**Running the Application**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now your Node-RED application is ready. Go to *http://<Pi IP address>:1880/ui*
    (replacing *<Pi IP address>* with your own) to see your application dashboard.
    It should look something like [Figure 20-8](ch20.xhtml#ch20fig8).
  prefs: []
  type: TYPE_NORMAL
- en: Test the controls to see if the wheels are moving in the right direction, and
    don’t forget that you need to insert the four AA batteries into the battery holder
    in order to power the motors.
  prefs: []
  type: TYPE_NORMAL
- en: If one or both motors are spinning in the wrong direction, switch the black
    and red wires on the MotoZero for that motor terminal, or change the payload messages
    to match the required directions.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0260-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 20-8:** Node-RED application to remotely control the robot'
  prefs: []
  type: TYPE_NORMAL
- en: '**POWERING UP THE ROBOT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that the application is ready, click the **Poweroff** button to shut down
    the Pi. Then wait a few seconds for it to shut down.
  prefs: []
  type: TYPE_NORMAL
- en: Change the Pi’s power source from the wall socket to the power bank. Wait a
    few minutes for the Pi to power up and autostart Node-RED. On a smartphone or
    other device that’s on the same network as your Pi, open a new browser tab and
    go to *http://<Pi IP address>:1880/ui*. Then click on the buttons to remotely
    control your robot.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations—you now have a Wi-Fi-controlled robot!
  prefs: []
  type: TYPE_NORMAL
- en: '**TAKING IT FURTHER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There’s a lot of room for upgrades on your robot. Here are some ideas for upgrades
    that will need both hardware and software changes. You’ll need to experiment a
    bit with Node-RED to get these working:'
  prefs: []
  type: TYPE_NORMAL
- en: Get a robot chassis with four wheels and control four motors instead of two.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add LEDs and buzzers to the robot to make it more interactive.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add sensors, like an ultrasonic sensor, so the robot can avoid obstacles by
    itself.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
