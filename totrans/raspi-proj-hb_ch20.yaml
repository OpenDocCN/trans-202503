- en: '**20'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Wi-Fi Remote-Controlled Robot**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In this project you’re going to build a two-wheel, battery-powered robot with
    a Raspberry Pi Zero W and the MotoZero add-on. You can control it over Wi-Fi using
    a web app you’ll make with Node-RED.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0248-01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi Zero W (or other 40 GPIO Raspberry Pi)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Smart robot car chassis kit
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: MotoZero add-on board (or other motor controller add-on)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Four AA batteries
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Portable charger
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Jumper wires
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '**SOFTWARE REQUIRED**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Node-RED dashboard
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT OUTLINE**'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Rather than going straight into the project, we’ll highlight the most important
    parts of the robot to give you an idea of how it will all work.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '**Wi-Fi**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: You’ll control the robot with a Node-RED application, so your Raspberry Pi needs
    to have Wi-Fi. Raspberry Pi models 3 and Zero W have built-in Wi-Fi, but if your
    board doesn’t, you can use a Wi-Fi dongle compatible with the Pi.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '**Raspberry Pi Board**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: We’re using the Raspberry Pi Zero W because its small size makes it perfect
    for the small robot chassis. But any Raspberry Pi version with 40 GPIOs is compatible
    with this project as long as it has Wi-Fi.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '**Robot Chassis Kit**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: We’re using a robot chassis kit that comes with everything you need to build
    the robot, including wheels, motors, and screws. You can find the kit in online
    marketplaces like Amazon or eBay by searching for *Smart Car Robot Chassis Kit*.
    You need the kit with two DC motors.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '**MotoZero Add-on**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: The DC motors will make the robot move, and you’ll control them using an add-on
    board called MotoZero. One place to find the board is online at The Pi Hut (*[https://thepihut.com/motozero/](https://thepihut.com/motozero/)*).
    You can also use any other Raspberry Pi–compatible motor driver add-on for this
    project or build a circuit with the LC293D IC chip. We won’t cover how to build
    that circuit here, but there are plenty of tutorials online if you want to make
    your own.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '**Power**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: We don’t want to connect the Pi robot to a wall socket, because we want it to
    be portable, so we need to power the robot with a portable charger, or *power
    bank*. The power bank must be capable of outputting 5 V and 2 A. We tested this
    project with a power bank that has 2,200 mAh capacity and it worked fine; incorporating
    a power bank with more capacity will make the robot run for longer.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: The DC motors need to be powered independently from the Pi, meaning you need
    two independent power sources. To power up the motors, we’re using the battery
    holder that comes with the chassis kit along with four AA batteries, not included
    in the kit.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '**Node-RED Application**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: The Node-RED application you’ll use to control your robot should be able to
    make the robot go forward and backward, move right and left, and stop. Since you’re
    not running the Pi as a desktop computer, the Pi needs to automatically start
    Node-RED when it boots. You’ll also add an off button to the application so you
    can turn the Raspberry Pi off remotely.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 20-1](ch20.xhtml#ch20fig1) shows a high-level overview of how your
    robot will work.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 20-1](ch20.xhtml#ch20fig1) 展示了您的机器人如何工作的概览。'
- en: '![image](../images/f0250-01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0250-01.jpg)'
- en: '**FIGURE 20-1:** The robot structure'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 20-1：** 机器人结构'
- en: '**PREPARING THE RASPBERRY PI**'
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**准备 Raspberry Pi**'
- en: We’re using the Raspberry Pi Zero W board, shown in [Figure 20-2](ch20.xhtml#ch20fig2),
    which is a variant of Raspberry Pi Zero that has built-in wireless LAN and Bluetooth,
    but remember that you can use another Wi-Fi compatible board or a Wi-Fi dongle.
    The Raspberry Pi Zero W measures only 2.56 inches × 1.18 inches × 0.20 inches
    (65 mm × 30 mm × 5 mm) and costs around $10.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的是 Raspberry Pi Zero W 开发板，如[图 20-2](ch20.xhtml#ch20fig2)所示，它是 Raspberry
    Pi Zero 的一种变体，内置了无线 LAN 和蓝牙，但请记住，您也可以使用其他支持 Wi-Fi 的开发板或 Wi-Fi 加密狗。Raspberry Pi
    Zero W 的尺寸仅为 2.56 英寸 × 1.18 英寸 × 0.20 英寸（65 毫米 × 30 毫米 × 5 毫米），价格约为 10 美元。
- en: The Pi Zero has 40 GPIO pins with the same pinout as the Pi 3\. As you can see
    in [Figure 20-2](ch20.xhtml#ch20fig2), it features a mini HDMI connector and two
    micro USB connectors, one of which is used exclusively for power. To use the Pi
    Zero as a desktop computer, you need a few extra accessories like a USB hub, a
    USB-to-micro-USB adapter, and an HDMI-to-mini-HDMI adapter to connect the peripherals.
    To save you some money, we’ll prepare everything on our regular Raspberry Pi 3
    and then switch the micro SD card to the Pi Zero W.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Pi Zero 具有 40 个 GPIO 引脚，排针与 Pi 3 相同。如[图 20-2](ch20.xhtml#ch20fig2)所示，它配有一个迷你
    HDMI 接口和两个 micro USB 接口，其中一个专门用于供电。要将 Pi Zero 用作桌面计算机，您需要一些额外的配件，比如 USB 集线器、USB
    转 micro-USB 适配器和 HDMI 转 mini-HDMI 适配器来连接外设。为了节省一些费用，我们将在常规的 Raspberry Pi 3 上准备好一切，然后将
    micro SD 卡切换到 Pi Zero W 上。
- en: '![image](../images/f0251-01.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0251-01.jpg)'
- en: '**FIGURE 20-2:** Raspberry Pi Zero W'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 20-2：** Raspberry Pi Zero W'
- en: We recommend using a new micro SD card for this project. Refer to [“Uploading
    the Operating System”](ch00.xhtml#lev10) on [page 10](ch00.xhtml#page_10) to see
    how to install the latest Raspbian release on your new micro SD card.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议为这个项目使用一张新的 micro SD 卡。请参阅[“上传操作系统”](ch00.xhtml#lev10)在[第 10 页](ch00.xhtml#page_10)查看如何在新的
    micro SD 卡上安装最新的 Raspbian 版本。
- en: After installing the operating system, insert the micro SD card on your regular
    Pi. Power up the Pi and wait a few seconds for the system to start. Then configure
    the Wi-Fi from the desktop’s top-right corner by clicking **Wi-Fi**. Next, enter
    your Wi-Fi password, and wait a few seconds for the Wi-Fi connection to successfully
    establish.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 安装操作系统后，将 micro SD 卡插入常规的 Pi 中。打开 Pi 并等待几秒钟以便系统启动。然后通过点击桌面右上角的**Wi-Fi**来配置 Wi-Fi。接着，输入您的
    Wi-Fi 密码，并等待几秒钟直到 Wi-Fi 连接成功建立。
- en: 'The Node-RED software is preinstalled on the Pi’s operating system, but you
    still need to install the Node-RED dashboard. For that, first update the library
    repositories, and then install npm (Node Package Management) by entering the following
    at your command line:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED 软件已经预装在 Pi 的操作系统中，但您仍然需要安装 Node-RED 仪表盘。为此，首先更新库仓库，然后通过在命令行中输入以下内容来安装
    npm（Node 包管理）：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When prompted, type Y and press ENTER. The installation may take a few minutes.
    Then enter the following commands to upgrade npm to the latest 3.x version, which
    is the version recommended for use with Node-RED:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当提示时，键入 Y 并按 ENTER。安装可能需要几分钟。然后输入以下命令，将 npm 升级到推荐与 Node-RED 配合使用的最新 3.x 版本：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, enter the following to install the Node-RED dashboard:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，输入以下命令来安装 Node-RED 仪表盘：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Again, Node-RED needs to start automatically when the Pi boots. For that, enter
    the following command in the terminal.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，Node-RED 需要在 Pi 启动时自动启动。为此，在终端中输入以下命令。
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: With that done, shut down your Pi and switch the micro SD card to the Raspberry
    Pi Zero W.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，关闭 Pi 并将 micro SD 卡切换到 Raspberry Pi Zero W 上。
- en: '**WIRING THE CIRCUIT**'
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**接线电路**'
- en: To build the robot structure you need a chassis for the robot, two DC motors
    with corresponding wheels, the MotoZero add-on, jumper wires, and your Pi (with
    Wi-Fi). Use [Figure 20-1](ch20.xhtml#ch20fig1) as a reference. We’ll start by
    mounting the MotoZero at the top of the Raspberry Pi and then wire the motors
    to MotoZero.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建机器人结构，您需要一个机器人的底盘、两个带有相应车轮的直流电动机、MotoZero 附加板、跳线和您的 Pi（带 Wi-Fi）。使用[图 20-1](ch20.xhtml#ch20fig1)作为参考。我们将首先将
    MotoZero 安装在 Raspberry Pi 顶部，然后将电动机连接到 MotoZero。
- en: '**Wiring the DC Motors to MotoZero**'
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将直流电动机接入 MotoZero**'
- en: MotoZero allows you to control four motors independently, but you need to control
    just two DC motors. The MotoZero will come unassembled, so you need to solder
    its parts. The Pi Hut provides an assembly manual on the product’s page, so go
    to *[https://thepihut.com/motozero/](https://thepihut.com/motozero/)* and follow
    the instructions there before continuing. Your MotoZero should look like [Figure
    20-3](ch20.xhtml#ch20fig3) after assembly.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: MotoZero 允许您独立控制四个电机，但您只需要控制两个直流电机。MotoZero 会是一个未组装的状态，因此您需要进行焊接。Pi Hut 在产品页面提供了组装手册，请访问
    *[https://thepihut.com/motozero/](https://thepihut.com/motozero/)* 并按照上面的说明进行操作，组装完成后，您的
    MotoZero 应该看起来像 [图 20-3](ch20.xhtml#ch20fig3) 中所示。
- en: '![image](../images/f0252-01.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0252-01.jpg)'
- en: '**FIGURE 20-3:** Assembled MotoZero add-on'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 20-3：** 组装好的 MotoZero 附加模块'
- en: '[Figure 20-3](ch20.xhtml#ch20fig3) shows the connections you can make to MotoZero:
    positive (+) and negative (–) connections for four DC motors, and a positive (+)
    and negative (–) connection for the power supply. You need an external power source
    for driving the motors. The motors require a big jump in current to move, so using
    a separate power source prevents the Pi from suddenly losing power when this jump
    occurs.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 20-3](ch20.xhtml#ch20fig3) 展示了您可以连接到 MotoZero 的接口：四个直流电机的正极 (+) 和负极 (–)
    连接，以及电源的正极 (+) 和负极 (–) 连接。驱动电机需要外部电源。电机需要较大的电流变化来启动，因此使用单独的电源可以防止 Pi 在电流变化时突然断电。'
- en: Follow these instructions and refer to [Figure 20-1](ch20.xhtml#ch20fig1) to
    wire the motors and battery holder.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照这些说明操作，并参考 [图 20-1](ch20.xhtml#ch20fig1) 连接电机和电池座。
- en: Connect the right DC motor’s red wire to the Motor 1 positive (+) pin on the
    MotoZero, and its black wire to the Motor 1 negative (–) pin. You’ll need to loosen
    the screws, place the wires in the pin slot, and then tighten the screws again.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将右侧直流电机的红线连接到 MotoZero 上电机 1 的正极 (+) 引脚，黑线连接到电机 1 的负极 (–) 引脚。您需要松开螺丝，将电线插入引脚插槽，然后重新拧紧螺丝。
- en: Repeat the previous instruction for the left motor, connecting the power wires
    to the MotoZero Motor 2 connections.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对左侧电机重复前面的操作，将电源线连接到 MotoZero 电机 2 的接口。
- en: Without inserting the batteries, connect the battery holder’s red wire to the
    positive (+) pin on the MotoZero power connector and its black wire to the negative
    (–) pin, shown at the bottom of the board in [Figure 20-3](ch20.xhtml#ch20fig3).
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在未插入电池的情况下，将电池座的红色线连接到 MotoZero 电源连接器的正极 (+) 引脚，黑色线连接到负极 (–) 引脚，如 [图 20-3](ch20.xhtml#ch20fig3)
    所示的电路板底部。
- en: '**NOTE**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you find the robot’s wheels are spinning in the opposite direction of what
    you intended, you may have to switch the DC motors’ red wires with the black wires
    on the positive (+) and negative (–) Motor 1 or Motor 2 terminals. You’ll know
    if you need to do this when you test the application at the end of the project.*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果您发现机器人的车轮旋转方向与预期相反，您可能需要交换直流电机红线与黑线的位置，分别连接到电机 1 或电机 2 的正极 (+) 和负极 (–) 端子。您可以在项目结束时测试应用程序，看看是否需要这样操作。*'
- en: '**Controlling the Motors with MotoZero**'
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**使用 MotoZero 控制电机**'
- en: Each DC motor has three GPIO pins associated with it. One pin, known as the
    *enable* pin, enables the motor and is like an on and off switch. The other two
    pins control the power to the positive and negative motor wires. Applying power
    to one wire and GND to the other makes the motor turn in one direction, while
    applying power and GND to the opposite motor wires moves the motor in the opposite
    direction.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 每个直流电机都有三个与之相关的 GPIO 引脚。其中一个引脚，称为 *启用* 引脚，用于启用电机，就像一个开关。另两个引脚控制电机正负极线的电源。给一根线提供电源并将另一根线接地，电机就会朝一个方向转动；而将电源和接地反向接到电机线的另一端，则使电机朝相反方向转动。
- en: '**NOTE**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*For information about the Motor 3 and Motor 4 GPIOs, you can check the MotoZero
    manual at The Pi Hut’s product page* ([https://thepihut.com/motozero/](https://thepihut.com/motozero/)).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*关于电机 3 和电机 4 的 GPIO 信息，您可以查看 Pi Hut 产品页面上的 MotoZero 手册* ([https://thepihut.com/motozero/](https://thepihut.com/motozero/))。'
- en: We’re just using the Motor 1 and Motor 2 terminals, which are controlled by
    the GPIOs shown in the following table, when you mount the MotoZero on the top
    of the Pi.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只使用电机 1 和电机 2 的端子，这些端子由下表中显示的 GPIO 控制，当您将 MotoZero 安装到 Pi 顶部时。
- en: '| **MOTOR 1** | **MOTOR 2** |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| **电机 1** | **电机 2** |'
- en: '| --- | --- |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| enable: GPIO 5 | enable: GPIO 6 |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 启用：GPIO 5 | 启用：GPIO 6 |'
- en: '| Motor 1 (+): GPIO 27 | Motor 2 (+): GPIO 22 |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 电机 1 (+)：GPIO 27 | 电机 2 (+)：GPIO 22 |'
- en: '| Motor 1 (–): GPIO 24 | Motor 2 (–): GPIO 17 |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 电机 1 (–)：GPIO 24 | 电机 2 (–)：GPIO 17 |'
- en: 'To make a motor spin, the enable pin must be HIGH to turn the motor on, and
    one—and only one—of the positive or negative pins should be HIGH. For example,
    if you want Motor 1 to spin in one direction, use the following setup:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要让电动机旋转，启用引脚必须为高电平才能开启电动机，并且正负引脚中必须有一个且仅有一个为高电平。例如，如果你希望电动机 1 以某个方向旋转，可以使用以下设置：
- en: 'GPIO 5: HIGH'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'GPIO 5: 高'
- en: 'GPIO 27: HIGH'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'GPIO 27: 高'
- en: 'GPIO 24: LOW'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'GPIO 24: 低'
- en: 'To make the same motor spin in the opposite direction, use this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要让同一个电动机旋转到相反的方向，可以使用以下设置：
- en: 'GPIO 5: HIGH'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'GPIO 5: 高'
- en: 'GPIO 27: LOW'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'GPIO 27: 低'
- en: 'GPIO 24: HIGH'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'GPIO 24: 高'
- en: To turn off the motor, you’d send a LOW signal to all the GPIOs. The same logic
    applies to the other motors.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要关闭电动机，你需要向所有 GPIO 发送低电平信号。其他电动机也遵循相同的逻辑。
- en: '**WRITING THE APPLICATION**'
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写应用程序**'
- en: Once you’ve built your hardware, it’s time to create the Node-RED application.
    As your Pi is already in your robot chassis, the most practical way to create
    the robot Node-RED application is to use your regular desktop or laptop computer
    and control it from there.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦硬件搭建完成，就可以开始创建 Node-RED 应用程序。由于你的 Pi 已经安装在机器人底盘上，最实际的做法是使用常规的桌面或笔记本电脑，并从那里控制它来创建机器人
    Node-RED 应用程序。
- en: First you’ll need to find your Raspberry Pi Zero W IP address; you’ll use it
    to access the Pi’s Node-RED application dashboard, where you can create a robot
    application.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要找到 Raspberry Pi Zero W 的 IP 地址；你将使用它来访问 Pi 的 Node-RED 应用程序仪表盘，在那里你可以创建机器人应用程序。
- en: You need to make sure the Raspberry Pi is turned on and that your computer and
    Pi are connected to the same network before continuing.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，你需要确保 Raspberry Pi 已经开机，并且你的计算机和 Pi 连接到同一网络。
- en: '**Finding the Raspberry Pi IP Address**'
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**查找 Raspberry Pi IP 地址**'
- en: '**WARNING**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*The Raspberry Pi Zero W has two mini USB ports, and one of them, labeled*
    PWR IN, *is designated for powering up the Pi.*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*Raspberry Pi Zero W 有两个迷你 USB 端口，其中一个标有 PWR IN，专用于为 Pi 提供电源。*'
- en: Power up the Raspberry Pi by connecting the 5 V power adapter to a wall socket.
    You’ll only use this power source while creating the Node-RED application; once
    it’s ready, you should change to the portable power source.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 5V 电源适配器连接到墙面插座来启动 Raspberry Pi。在创建 Node-RED 应用程序时，你只需使用此电源；一旦完成，应该切换为便携电源。
- en: You’ll find the Pi’s IP address using Angry IP Scanner software. Download it
    onto your regular desktop or laptop computer for free from *[http://angryip.org/download/](http://angryip.org/download/)*,
    and then follow the prompts to install it.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Angry IP Scanner 软件找到 Pi 的 IP 地址。免费下载并安装到你的常规桌面或笔记本电脑上，网址为 *[http://angryip.org/download/](http://angryip.org/download/)*，然后按照提示完成安装。
- en: Once the installation is complete, open Angry IP Scanner and click the **Start**
    button. Wait a few seconds until it shows the available IP addresses. Your Pi
    IP address should have *raspberrypi.lan* as a hostname, so jot down the corresponding
    IP address. [Figure 20-4](ch20.xhtml#ch20fig4) highlights our Raspberry Pi IP
    address, which is 192.168.1.122.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，打开 Angry IP Scanner 并点击 **开始** 按钮。等待几秒钟，直到显示可用的 IP 地址。你的 Pi IP 地址的主机名应该是
    *raspberrypi.lan*，所以记下对应的 IP 地址。[图 20-4](ch20.xhtml#ch20fig4) 标出了我们的 Raspberry
    Pi IP 地址，即 192.168.1.122。
- en: '![image](../images/f0254-01.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0254-01.jpg)'
- en: '**FIGURE 20-4:** Finding the Raspberry Pi IP address with the Angry IP Scanner
    software'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 20-4：** 使用 Angry IP Scanner 软件查找 Raspberry Pi 的 IP 地址'
- en: '**Creating the Node-RED Flow**'
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建 Node-RED 流程**'
- en: '**NOTE**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*For an introduction to Node-RED, see [Project 17](ch17.xhtml#ch17).*'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*关于 Node-RED 的介绍，请参见 [第 17 项目](ch17.xhtml#ch17)。*'
- en: On your regular computer, making sure it’s on the same network as your Pi, open
    a web browser tab and go to *http://<Pi IP address>:1880*, replacing *<Pi IP address>*
    with the Raspberry Pi IP address you noted earlier. In our case, we navigated
    to *http://192.168.1.122:1880*. Your Raspberry Pi Node-RED web server should open.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的常规计算机上，确保它与 Pi 处于同一网络，打开一个网页浏览器标签，访问 *http://<Pi IP 地址>:1880*，将 *<Pi IP 地址>*
    替换为你之前记下的 Raspberry Pi IP 地址。在我们的例子中，我们访问了 *http://192.168.1.122:1880*。你的 Raspberry
    Pi Node-RED Web 服务器应该会打开。
- en: In the top-right corner of the window, select the **dashboard** tab and, inside
    the **Layout** tab, create a tab called **Robot**. Next, create two groups inside
    that Robot tab, called **Main** and **Poweroff**. The Main group is where you’ll
    organize the buttons that control the robot, and the Poweroff group is where you’ll
    add the button to remotely turn off your Raspberry Pi. Once you’ve completed these
    tabs and groups, your layout should look like [Figure 20-5](ch20.xhtml#ch20fig5).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0255-01.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 20-5:** Node-RED application dashboard layout'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Add five buttons, a function, six rpi gpio output nodes, and an exec node to
    the flow. Wire the nodes and edit their names to match the ones in [Figure 20-6](ch20.xhtml#ch20fig6).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0255-02.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 20-6:** Node-RED application nodes'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Edit the function’s properties so that it has six outputs, assigning all of
    the nodes’ properties as shown in [Table 20-1](ch20.xhtml#ch20tab1).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '**TABLE 20-1:** Properties assigned to each node'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '| **NODE** | **PROPERTIES** |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
- en: '| Forward | Group: Main [Robot] Size: auto'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'Icon: fa-arrow-up'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'Label: Forward'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'Payload: forward |'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '| Left | Group: Main [Robot] Size: auto'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'Icon: fa-arrow-left'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'Label: Left'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 'Payload: left |'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '| Right | Group: Main [Robot] Size: auto'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 'Icon: fa-arrow-right'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'Label: Right'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'Payload: right |'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '| Reverse | Group: Main [Robot] Size: auto'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'Icon: fa-arrow-down'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: 'Label: Reverse'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'Payload: reverse |'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '| Stop | Group: Main [Robot] Size: auto'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'Icon: fa-hand-paper-o'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: 'Label: Stop'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'Payload: stop |'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '| f | Function: enter the code in [Listing 20-1](ch20.xhtml#ch20list1) Outputs:
    6 |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
- en: '| Enable M1 | GPIO: GPIO5 – 29 Type: Digital output |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
- en: '| + M1 | GPIO: GPIO27 – 13 Type: Digital output |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
- en: '| – M1 | GPIO: 18 – GPIO24 Type: Digital output |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
- en: '| Enable M2 | GPIO: GPIO17 – 11 Type: Digital output |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
- en: '| + M2 | GPIO: GPIO6 – 31 Type: Digital output |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
- en: '| – M2 | GPIO: GPIO22 – 15 Type: Digital output |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
- en: '| Poweroff | Group: Poweroff [Robot] Size: auto'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'Icon: fa-power-off'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'Label: Poweroff'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'Background: red |'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '| exec | Command: `/usr/bin/sudo` + Append: not checked'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: poweroff
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: Poweroff |'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 20-7](ch20.xhtml#ch20fig7) shows how the exec node is set up.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0257-01.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 20-7:** exec node properties'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: All nodes should be in the Main group, except the Poweroff button, which should
    be part of the Poweroff group.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '**Entering the Script**'
  id: totrans-143
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Insert the JavaScript code in [Listing 20-1](ch20.xhtml#ch20list1) (also available
    for download from *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*)
    into the function node:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 20-1:** The remote-controlled robot script'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This function sends messages to the connected rpi gpio output nodes in the order
    they’re connected to the function node. This means that `msg1` is sent to the
    Enable M1 node, `msg2` to + M1, `msg3` to – M1, and so on (see [Figure 20-6](ch20.xhtml#ch20fig6)).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: First you initialize all the payload message variable values to `0` ➊. Then
    the series of `if` and `else if` statements checks which button was pressed ➋,
    depending on the payload received by the function, and sets the message values
    according to the action the robot should take. For example, if you press the Forward
    button, the payload received by the function node is `forward`, so the condition
    at ➋ is met and the code changes the `msg1`, `msg2`, `msg4`, and `msg5` payload
    values to `1`, while `msg3` and `msg6` remain `0`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, the function node sends the `msg.payload` values to the corresponding
    nodes ➌. For the robot to go forward, the payloads would need to be:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable M1: `1`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '+ M1: `1`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '– M2: `0`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Enable M2: `1`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '+ M2: `1`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '– M2: `0`'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here, both motors are enabled and moving in the same direction—forward. The
    following table shows the messages the function should send to each node for each
    action.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '| **ACTION** | **ENABLE M1** | **+ M1** | **– M1** | **ENABLE M2** | **+ M2**
    | **– M2** |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
- en: '| Forward | 1 | 1 | 0 | 1 | 1 | 0 |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
- en: '| Left | 1 | 1 | 0 | 0 | 0 | 0 |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
- en: '| Right | 0 | 0 | 0 | 1 | 1 | 0 |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
- en: '| Reverse | 1 | 0 | 1 | 1 | 0 | 1 |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
- en: '| Stop | 0 | 0 | 0 | 0 | 0 | 0 |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
- en: When the Stop button is clicked, none of the conditions set in the code is met,
    and the function sends the values initialized at the start ➊.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Outside the function node, when the Poweroff button is clicked, the exec node
    executes the `poweroff` command to turn off the Pi. Remember that you’ve filled
    the `exec` command property with */usr/bin/sudo/poweroff*—see [Table 20-1](ch20.xhtml#ch20tab1).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Once everything is in place, click the **Deploy** button at the top-right corner
    to save the changes and run the flow.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '**Running the Application**'
  id: totrans-167
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now your Node-RED application is ready. Go to *http://<Pi IP address>:1880/ui*
    (replacing *<Pi IP address>* with your own) to see your application dashboard.
    It should look something like [Figure 20-8](ch20.xhtml#ch20fig8).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Test the controls to see if the wheels are moving in the right direction, and
    don’t forget that you need to insert the four AA batteries into the battery holder
    in order to power the motors.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: If one or both motors are spinning in the wrong direction, switch the black
    and red wires on the MotoZero for that motor terminal, or change the payload messages
    to match the required directions.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0260-01.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 20-8:** Node-RED application to remotely control the robot'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '**POWERING UP THE ROBOT**'
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that the application is ready, click the **Poweroff** button to shut down
    the Pi. Then wait a few seconds for it to shut down.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Change the Pi’s power source from the wall socket to the power bank. Wait a
    few minutes for the Pi to power up and autostart Node-RED. On a smartphone or
    other device that’s on the same network as your Pi, open a new browser tab and
    go to *http://<Pi IP address>:1880/ui*. Then click on the buttons to remotely
    control your robot.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations—you now have a Wi-Fi-controlled robot!
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你——你现在拥有了一台 Wi-Fi 控制的机器人！
- en: '**TAKING IT FURTHER**'
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步拓展**'
- en: 'There’s a lot of room for upgrades on your robot. Here are some ideas for upgrades
    that will need both hardware and software changes. You’ll need to experiment a
    bit with Node-RED to get these working:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 你的机器人还有很多升级的空间。以下是一些需要硬件和软件更改的升级想法。你需要稍微实验一下 Node-RED 来使这些功能正常工作：
- en: Get a robot chassis with four wheels and control four motors instead of two.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取一个四轮机器人底盘，控制四个电机而不是两个。
- en: Add LEDs and buzzers to the robot to make it more interactive.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为机器人添加 LED 灯和蜂鸣器，使其更加互动。
- en: Add sensors, like an ultrasonic sensor, so the robot can avoid obstacles by
    itself.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加传感器，如超声波传感器，让机器人能够自动避开障碍物。
