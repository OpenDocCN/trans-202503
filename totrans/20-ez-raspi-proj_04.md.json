["```\n➊ from sense_hat import SenseHat\n  #from sense_emu import SenseHat\n\n  from time import sleep\n\n  #create an object called sense\n➋ sense = SenseHat()\n\n  while True:\n   ➌ temperature = sense.temperature\n   ➍ temperature = str(round(temperature, 2))\n   ➎ print('Temperature: ' + temperature + '*C\\n')\n     humidity = sense.humidity\n     humidity = str(round(humidity, 2))\n     print ('Humidity: ' + humidity + '%\\n')\n\n     pressure = sense.pressure\n     pressure = str(round(pressure, 2))\n     print('Pressure: ' + pressure + 'hPa\\n')\n\n     sleep(1)\n```", "```\n  #import necessary libraries\n➊ from tkinter import *\n  from tkinter import ttk\n  import time\n  from sense_hat import SenseHat\n  #from sense_emu import SenseHat\n\n  #create an object called sense\n  sense = SenseHat()\n\n  #create window\n➋ window = Tk()\n  window.title('Local Weather Station')\n  window.geometry('200x480')\n\n  #create humidity label for title and value\n➌ humidity_label = Label(window, text = 'Humidity', font =\n  ('Helvetica', 18), pady = 3)\n  humidity_label.pack()\n\n➍ humidity = StringVar()\n\n➎ humidity_value=Label(window, textvariable = humidity,font =\n  ('Courier', 20), fg = 'blue', anchor = N, width = 200)\n  humidity_value.pack()\n\n  #create humidity canvas\n➏ humidity_canvas = Canvas(window, width = 200, height = 200)\n  humidity_canvas.pack()\n\n  #create humidity progress bar\n➐ humidity_bar = DoubleVar()\n\n➑ progressbar_humidity = ttk.Progressbar(humidity_canvas, variable =\n  humidity_bar, orient = VERTICAL, length = 200, maximum = 100)\n  progressbar_humidity.pack(fill=X, expand=1)\n\n  #create temperature label for title and value\n  temperature_label = Label(window, text = 'Temperature', font =\n  ('Helvetica', 18),anchor = S, width = 200, height = 2)\n  temperature_label.pack()\n\n  temperature = StringVar()\n\n  temperature_value = Label(window, textvariable = temperature, font =\n  ('Courier', 20),fg = 'red', anchor = N, width = 200)\n  temperature_value.pack()\n\n  #create pressure label for title and value\n  pressure_label = Label(window, text = 'Pressure', font =\n  ('Helvetica', 18), anchor = S, width = 200, height = 2)\n  pressure_label.pack()\n\n  pressure = StringVar()\n\n  pressure_value = Label(window, textvariable = pressure, font =\n  ('Courier', 20), fg = 'green', anchor = N, width = 200)\n  pressure_value.pack()\n\n➒ def update_readings():\n      humidity.set(str(round(sense.humidity, 2)) + '%')\n      humidity_bar.set(sense.humidity)\n      temperature.set(str(round(sense.temperature, 2)) + '°C')\n      #temperature.set(str(round(sense.temperature*(9/5)+32, 2))\n  + '*F')\n      pressure.set(str(round(sense.pressure)) + 'hPa')\n      window.update_idletasks()\n      window.after(3000, update_readings)\n\n➓ update_readings()\n  window.mainloop()\n```", "```\ntemperature.set(str(round(sense.temperature, 2)) + '*C')\n```", "```\n#temperature.set(str(round(sense.temperature, 2)) + '*C')\ntemperature.set(str(round(sense.temperature*(9/5)+32, 2)) + '*F')\n```", "```\n➊ import smtplib\n  from email.mime.text import MIMEText\n\n  #replace the next three lines with your credentials\n➋ from_email_addr = '*YOUR_EMAIL@gmail.com*'\n  from_email_password = '*YOUR_EMAIL_PASSWORD*'\n  to_email_addr = '*TO_YOUR_OTHER_EMAIL@gmail.com*'\n\n  #set your email message\n➌ body = 'Motion was detected in your room.'\n  msg = MIMEText(body)\n\n  #set sender and recipient\n  msg['From'] = from_email_addr\n  msg['To'] = to_email_addr\n\n  #set your email subject\n  msg['Subject'] = 'INTRUDER ALERT'\n\n  #connecting to server and sending email\n  #edit the following line with your provider's SMTP server details\n➍ server = smtplib.SMTP('*smtp.gmail.com*', *587*)\n  #comment out the next line if your email provider doesn't use TLS\n  server.starttls()\n➎ server.login(from_email_addr, from_email_password)\n  server.sendmail(from_email_addr, to_email_addr, msg.as_string())\n  server.quit()\n  print('Email sent')\n```", "```\n  #import necessary libraries\n➊ from gpiozero import LED, Button, MotionSensor\n  import smtplib\n  from email.mime.text import MIMEText\n  from signal import pause\n\n  #create objects to refer to each LED, the button, and the PIR sensor\n➋ led_status = LED(17)\n  led_triggered = LED(18)\n  button = Button(2)\n  pir = MotionSensor(4)\n\n  #control variables\n➌ motion_sensor_status = False\n  email_sent = False\n\n  #arm or disarm the PIR sensor\n➍ def arm_motion_sensor():\n      global email_sent\n      global motion_sensor_status\n      if motion_sensor_status == True:\n          motion_sensor_status = False\n          led_status.off()\n          led_triggered.off()\n      else:\n          motion_sensor_status = True\n          email_sent = False\n          led_status.on()\n\n  #send email when motion is detected and the PIR sensor is armed\n➎ def send_email():\n      global email_sent\n      global motion_sensor_status\n      if(motion_sensor_status == True and email_sent == False):\n\n          #replace the next three lines with your credentials\n          from_email_addr = '*YOUR_EMAIL@gmail.com*'\n          from_email_password = '*YOUR_EMAIL_PASSWORD*'\n          to_email_addr = '*TO_YOUR_OTHER_EMAIL@gmail.com*'\n\n         #set your email message\n          body = 'Motion was detected in your room.'\n          msg = MIMEText(body)\n\n          #set sender and recipient\n          msg['From'] = from_email_addr\n          msg['To'] = to_email_addr\n\n          #set your email subject\n          msg['Subject'] = 'INTRUDER ALERT'\n\n          #connect to server and send email\n          #edit this line with your provider's SMTP server details\n          server = smtplib.SMTP('*smtp.gmail.com*', *587*)\n          #comment out this line if your provider doesn't use TLS\n          server.starttls()\n          server.login(from_email_addr, from_email_password)\n          server.sendmail(from_email_addr, to_email_addr,\n  msg.as_string())\n          server.quit()\n          email_sent = True\n          led_triggered.on()\n          print('Email sent')\n\n  #assign a function that runs when the button is pressed\n➏ button.when_pressed = arm_motion_sensor\n  #assign a function that runs when motion is detected\n➐ pir.when_motion = send_email\n\n➑ pause()\n```", "```\n  #import necessary libraries\n➊ from gpiozero import LED, Button, Buzzer, MCP3008\n  from time import sleep\n\n➋ led = LED(17)\n  button = Button(2)\n  buzzer = Buzzer(27)\n  gas_sensor = MCP3008(0)\n\n➌ gas_sensor_status = False\n\n➍ threshold = 0.1\n\n➎ def arm_gas_sensor():\n      global gas_sensor_status\n      if gas_sensor_status == True:\n          gas_sensor_status = False\n          led.off()\n      else:\n          gas_sensor_status = True\n          led.on()\n➏ button.when_pressed = arm_gas_sensor\n\n➐ while True:\n➑     #print(gas_sensor.value)\n      #check if the gas sensor is armed and\n      #reached the threshold value\n      if(gas_sensor_status == True and gas_sensor.value > threshold):\n          buzzer.beep()\n      else:\n          buzzer.off()\n      sleep(2)\n```", "```\npi@raspberrypi:~ $ sudo apt update\npi@raspberrypi:~ $ sudo apt install build-essential python-dev\n```", "```\npi@raspberrypi:~ $ cd ~/Desktop\npi@raspberrypi:~/Desktop $ mkdir Libraries\npi@raspberrypi:~/Desktop $ cd Libraries\npi@raspberrypi:~/Desktop/Libraries $\n```", "```\npi@raspberrypi:~/Desktop/Libraries $ git clone https://github.com/\nadafruit/Adafruit_Python_DHT.git\n```", "```\npi@raspberrypi:~/Desktop/Libraries $ cd Adafruit_Python_DHT\npi@raspberrypi:~/Desktop/Libraries/Adafruit_Python_DHT $ sudo python\nsetup.py install\n```", "```\n  #import necessary libraries\n➊ import Adafruit_DHT\n  import time\n\n  #comment and uncomment the lines below depending on your sensor\n  #sensor = Adafruit_DHT.DHT11\n➋ sensor = Adafruit_DHT.DHT22\n  #sensor = Adafruit_DHT.AM2302\n\n  #DHT pin connects to GPIO 4\n  sensor_pin = 4\n\n  #create a variable to control the while loop\n  running = True\n\n  #new .txt file created with header\n➌ file = open('sensor_readings.txt', 'w')\n➍ file.write('time and date, temperature, humidity\\n')\n\n  #loop forever\n  while running:\n      try:\n          #read the humidity and temperature\n       ➎ humidity, temperature = Adafruit_DHT.read_retry(sensor,\n  sensor_pin)\n\n          #uncomment the line below to convert to Fahrenheit\n       ➏ #temperature = temperature * 9/5.0 + 32\n\n          #sometimes you won't get a reading and\n          #the results will be null\n          #the next statement guarantees that\n          #it only saves valid readings\n       ➐ if humidity is not None and temperature is not None:\n              #print temperature and humidity\n              print('Temperature = ' + str(temperature) +\n  ', Humidity = ' + str(humidity))\n              #save time, date, temperature and humidity in .txt file\n           ➑ file.write(time.strftime('%H:%M:%S %d/%m/%Y') + ', ' +\n                  str(temperature) + ', ' + str(humidity) + '\\n')\n          else:\n              print('Failed to get reading. Try again!')\n          #wait 10s between each sensor reading\n       ➒ time.sleep(10)\n      #if KeyboardInterrupt triggered, stop loop and close .txt file\n      except KeyboardInterrupt:\n          print ('Program stopped')\n          running = False\n       ➓ file.close()\n```"]