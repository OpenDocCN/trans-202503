- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Sending TCP Data
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 发送 TCP 数据
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: Now that you know how to properly establish and gracefully terminate TCP connections
    in Go, it’s time to put that knowledge to use by transmitting data. This chapter
    covers various techniques for sending and receiving data over a network using
    TCP.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了如何在 Go 中正确建立和优雅地终止 TCP 连接，是时候将这些知识应用到数据传输中。本章介绍了使用 TCP 进行数据发送和接收的各种技术。
- en: We’ll talk about the most common methods of reading data from network connections.
    You’ll create a simple messaging protocol that allows you to transmit dynamically
    sized payloads between nodes. You’ll then explore the networking possibilities
    afforded by the `net.Conn` interface. The chapter concludes with a deeper dive
    into the `TCPConn` object and insidious TCP networking problems that Go developers
    may experience.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论从网络连接读取数据的最常见方法。你将创建一个简单的消息协议，允许你在节点之间传输动态大小的有效负载。接下来，你将探索 `net.Conn` 接口提供的网络可能性。本章最后将深入探讨
    `TCPConn` 对象及 Go 开发者可能遇到的一些隐蔽的 TCP 网络问题。
- en: Using the net.Conn Interface
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `net.Conn` 接口
- en: Most of the network code in this book uses Go’s `net.Conn` interface whenever
    possible, because it provides the functionality we need for most cases. You can
    write powerful network code using the `net.Conn` interface without having to assert
    its underlying type, ensuring your code is compatible across operating systems
    and allowing you to write more robust tests. (You will learn how to access `net.Conn`’s
    underlying type to use its more advanced methods later in this chapter.) The methods
    available on `net.Conn` cover most use cases.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的大多数网络代码都尽可能使用 Go 的 `net.Conn` 接口，因为它为大多数情况提供了所需的功能。你可以使用 `net.Conn` 接口编写强大的网络代码，而无需断言其底层类型，从而确保你的代码在不同操作系统间兼容，并且可以编写更为健壮的测试。（你将在本章稍后学习如何访问
    `net.Conn` 的底层类型，以便使用其更高级的方法。）`net.Conn` 上可用的方法涵盖了大多数使用场景。
- en: The two most useful `net.Conn` methods are `Read` and `Write`. These methods
    implement the `io.Reader` and `io.Writer` interfaces, respectively, which are
    ubiquitous in the Go standard library and ecosystem. As a result, you can leverage
    the vast amounts of code written for those interfaces to create incredibly powerful
    network applications.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`net.Conn` 最有用的两个方法是 `Read` 和 `Write`。这两个方法分别实现了 `io.Reader` 和 `io.Writer`
    接口，这些接口在 Go 标准库和生态系统中广泛使用。因此，你可以利用为这些接口编写的大量代码，创建功能强大的网络应用程序。'
- en: You use `net.Conn`’s `Close` method to close the network connection. This method
    will return `nil` if the connection successfully closed or an error otherwise.
    The `SetReadDeadline` and `SetWriteDeadline` methods, which accept a `time.Time`
    object, set the absolute time after which reads and writes on the network connection
    will return an error. The `SetDeadline` method sets both the read and write deadlines
    at the same time. As discussed in “Implementing Deadlines” on page 62, deadlines
    allow you to control how long a network connection may remain idle and allow for
    timely detection of network connectivity problems.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `net.Conn` 的 `Close` 方法来关闭网络连接。如果连接成功关闭，该方法将返回 `nil`，否则返回错误。`SetReadDeadline`
    和 `SetWriteDeadline` 方法接受一个 `time.Time` 对象，设置读取和写入网络连接时的绝对时间，超时后将返回错误。`SetDeadline`
    方法则同时设置读取和写入的截止时间。如在第 62 页的“实现截止时间”部分所述，截止时间可以帮助你控制网络连接空闲的最长时间，并及时发现网络连接问题。
- en: Sending and Receiving Data
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发送和接收数据
- en: Reading data from a network connection and writing data to it is no different
    from reading and writing to a file object, since `net.Conn` implements the `io.ReadWriteCloser`
    interface used to read and write to files. In this section, you’ll first learn
    how to read data into a fixed-size buffer. Next, you’ll learn how to use `bufio.Scanner`
    to read data from a network connection until it encounters a specific delimiter.
    You’ll then explore TLV, an encoding method that enables you to define a basic
    protocol to dynamically allocate buffers for varying payload sizes. Finally, you’ll
    see how to handle errors when reading from and writing to network connections.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 从网络连接读取数据和写入数据与读写文件对象没有区别，因为 `net.Conn` 实现了 `io.ReadWriteCloser` 接口，后者用于文件的读写。在这一节中，你将首先学习如何将数据读入固定大小的缓冲区。接下来，你将学习如何使用
    `bufio.Scanner` 从网络连接中读取数据，直到遇到特定的分隔符。然后，你将探索 TLV（标签-长度-值）编码方法，它使你能够定义一种基本协议来动态分配适应不同有效负载大小的缓冲区。最后，你将了解如何在从网络连接读取和写入数据时处理错误。
- en: Reading Data into a Fixed Buffer
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将数据读取到固定缓冲区
- en: TCP connections in Go implement the `io.Reader` interface, which allows you
    to read data from the network connection. To read data from a network connection,
    you need to provide a buffer for the network connection’s `Read` method to fill.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Go中的TCP连接实现了`io.Reader`接口，这允许你从网络连接中读取数据。要从网络连接中读取数据，你需要提供一个缓冲区供网络连接的`Read`方法填充。
- en: The `Read` method will populate the buffer to its capacity if there is enough
    data in the connection’s receive buffer. If there are fewer bytes in the receive
    buffer than the capacity of the buffer you provide, `Read` will populate the given
    buffer with the data and return instead of waiting for more data to arrive. In
    other words, `Read` is not guaranteed to fill your buffer to capacity before it
    returns. [Listing 4-1](#listing4-1) demonstrates the process of reading data from
    a network connection into a byte slice.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果连接的接收缓冲区中有足够的数据，`Read`方法会填充缓冲区至其容量。如果接收缓冲区中的字节少于你提供的缓冲区的容量，`Read`会用数据填充给定的缓冲区并返回，而不是等待更多数据到达。换句话说，`Read`并不保证在返回之前填充缓冲区至其容量。[示例
    4-1](#listing4-1)演示了从网络连接读取数据到字节切片的过程。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 4-1: Receiving data over a network connection (*read_test.go*)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4-1：通过网络连接接收数据（*read_test.go*）
- en: You need something for the client to read, so you create a 16MB payload of random
    data 1—more data than the client can read in its chosen buffer size of 512KB 3
    so that it will make at least a few iterations around its `for` loop. It’s perfectly
    acceptable to use a larger buffer or a smaller payload and read the entirety of
    the payload in a single call to `Read`. Go correctly processes the data regardless
    of the payload and receive buffer sizes.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要给客户端提供一些可以读取的内容，所以你创建了一个16MB的随机数据负载——比客户端可以在其选择的512KB缓冲区大小中读取的数据要多，这样它至少会在`for`循环中执行几次。使用更大的缓冲区或更小的负载并一次性通过`Read`调用读取完整负载是完全可以接受的。Go会正确处理数据，无论负载和接收缓冲区的大小如何。
- en: You then spin up the listener and create a goroutine to listen for incoming
    connections. Once accepted, the server writes the entire payload to the network
    connection 2. The client then reads up to the first 512KB from the connection
    4 before continuing around the loop. The client continues to read up to 512KB
    at a time until either an error occurs or the client reads the entire 16MB payload.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你启动监听器并创建一个goroutine来监听传入连接。一旦接受到连接，服务器将把整个负载写入网络连接。客户端随后从连接中读取最多512KB的数据，然后继续执行循环。客户端继续每次读取最多512KB，直到发生错误或客户端读取完整个16MB的负载。
- en: Delimited Reading by Using a Scanner
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用扫描器进行分隔读取
- en: Reading data from a network connection by using the method I just showed means
    your code needs to make sense of the data it receives. Since TCP is a stream-oriented
    protocol, a client can receive a stream of bytes across many packets. Unlike sentences,
    binary data doesn’t include inherent punctuation that tells you where one message
    starts and stops.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我刚才展示的方法从网络连接中读取数据意味着你的代码需要理解它接收到的数据。由于TCP是面向流的协议，客户端可以通过多个数据包接收一个字节流。与句子不同，二进制数据不包含固有的标点符号来告诉你一条消息的开始和结束。
- en: If, for example, your code is reading a series of email messages from a server,
    your code will have to inspect each byte for delimiters indicating the boundaries
    of each message in the stream of bytes. Alternatively, your client may have an
    established protocol with the server whereby the server sends a fixed number of
    bytes to indicate the payload size the server will send next. Your code can then
    use this size to create an appropriate buffer for the payload. You’ll see an example
    of this technique a little later in this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你的代码正在从服务器读取一系列电子邮件消息，那么你的代码将需要检查每个字节，以查找分隔符，这些分隔符表示消息在字节流中的边界。或者，你的客户端与服务器之间可能有一个既定协议，服务器发送固定数量的字节来指示服务器接下来将发送的负载大小。你的代码可以使用这个大小来创建一个合适的负载缓冲区。你将在本章稍后看到这种技术的示例。
- en: However, if you choose to use a delimiter to indicate the end of one message
    and the beginning of another, writing code to handle edge cases isn’t so simple.
    For example, you may read 1KB of data from a single `Read` on the network connection
    and find that it contains two delimiters. This indicates that you have two complete
    messages, but you don’t have enough information about the chunk of data following
    the second delimiter to know whether it is also a complete message. If you read
    another 1KB of data and find no delimiters, you can conclude that this entire
    block of data is a continuation of the last message in the previous 1KB you read.
    But what if you read 1KB of nothing but delimiters?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你选择使用分隔符来指示一条消息的结束和另一条消息的开始，那么编写代码来处理边界情况就不那么简单了。例如，你可能从网络连接的一个`Read`中读取了1KB的数据，并发现其中包含了两个分隔符。这意味着你有两条完整的消息，但你没有足够的信息来判断第二个分隔符后面的数据块是否也是一条完整的消息。如果你再读取1KB的数据并且没有发现分隔符，你可以得出结论，整个数据块是上一条1KB消息的延续。但是，如果你读取了1KB的数据，而这些数据全是分隔符呢？
- en: If this is starting to sound a bit complex, it’s because you must account for
    data across multiple `Read` calls and handle any errors along the way. Anytime
    you’re tempted to roll your own solution to such a problem, check the standard
    library to see if a tried-and-true implementation already exists. In this case,
    `bufio.Scanner` does what you need.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这开始听起来有点复杂，那是因为你必须考虑跨多个`Read`调用的数据，并在过程中处理任何错误。每当你想自己动手解决这样的问题时，检查标准库，看看是否已经有经过验证的实现。在这种情况下，`bufio.Scanner`做到了你需要的功能。
- en: The `bufio.Scanner` is a convenient bit of code in Go’s standard library that
    allows you to read delimited data. The `Scanner` accepts an `io.Reader` as its
    input. Since `net.Conn` has a `Read` method that implements the `io.Reader` interface,
    you can use the `Scanner` to easily read delimited data from a network connection.
    [Listing 4-2](#listing4-2) sets up a listener to serve up delimited data for later
    parsing by `bufio.Scanner`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`bufio.Scanner`是Go标准库中一个方便的代码，它允许你读取带分隔符的数据。`Scanner`接受一个`io.Reader`作为输入。由于`net.Conn`有一个实现了`io.Reader`接口的`Read`方法，你可以使用`Scanner`轻松地从网络连接中读取带分隔符的数据。[Listing
    4-2](#listing4-2)设置了一个监听器，以提供带分隔符的数据，供以后由`bufio.Scanner`解析。'
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 4-2: Creating a test to serve up a constant payload (*scanner_test.go*)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 4-2：创建一个测试来提供一个常量有效负载（*scanner_test.go*）
- en: This listener should look familiar by now. All it’s meant to do is serve up
    the payload 1. [Listing 4-3](#listing4-3) uses `bufio.Scanner` to read a string
    from the network, splitting each chunk by whitespace.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个监听器现在应该让你感到熟悉。它的目的就是提供有效负载。[Listing 4-3](#listing4-3)使用`bufio.Scanner`从网络中读取字符串，并通过空格拆分每个数据块。
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 4-3: Using `bufio.Scanner` to read whitespace-delimited text from the
    network (*scanner_test.go*)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 4-3：使用`bufio.Scanner`从网络中读取以空格分隔的文本（*scanner_test.go*）
- en: Since you know you’re reading a string from the server, you start by creating
    a `bufio.Scanner` that reads from the network connection 1. By default, the scanner
    will split data read from the network connection when it encounters a newline
    character (`\n`) in the stream of data. Instead, you elect to have the scanner
    delimit the input at the end of each word by using `bufio.ScanWords`, which will
    split the data when it encounters a word border, such as whitespace or sentence-terminating
    punctuation.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你知道自己正在从服务器读取字符串，你可以通过创建一个从网络连接中读取数据的`bufio.Scanner`来开始。默认情况下，当扫描器在数据流中遇到换行符（`\n`）时，它会将读取的数据拆分。相反，你选择使用`bufio.ScanWords`来让扫描器在每个单词的结尾处拆分输入数据，这样它会在遇到单词边界时拆分数据，例如空格或句子结束符号。
- en: You keep reading data from the scanner as long as it tells you it’s read data
    from the connection 2. Every call to `Scan` can result in multiple calls to the
    network connection’s `Read` method until the scanner finds its delimiter or reads
    an error from the connection. It hides the complexity of searching for a delimiter
    across one or more reads from the network connection and returning the resulting
    messages.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你会继续从扫描器中读取数据，只要它告诉你它已经从连接中读取了数据。每次调用`Scan`时，可能会多次调用网络连接的`Read`方法，直到扫描器找到分隔符或从连接中读取到错误。它隐藏了跨一次或多次读取网络连接来寻找分隔符并返回结果消息的复杂性。
- en: The call to the scanner’s `Text` method returns the chunk of data as a string—a
    single word and adjacent punctuation, in this case—that it just read from the
    network connection 3. The code continues to iterate around the `for` loop until
    the scanner receives an `io.EOF` or other error from the network connection. If
    it’s the latter, the scanner’s `Err` method will return a non-`nil` error. You
    can view the scanned words 4 by adding the `-v` flag to the `go test` command.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 调用扫描器的`Text`方法会返回刚从网络连接中读取的那块数据作为字符串——在这个例子中是一个单词和相邻的标点符号。代码继续在`for`循环中迭代，直到扫描器从网络连接接收到`io.EOF`或其他错误。如果是后者，扫描器的`Err`方法将返回一个非`nil`的错误。你可以通过在`go
    test`命令中添加`-v`标志来查看扫描到的单词。
- en: Dynamically Allocating the Buffer Size
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动态分配缓冲区大小
- en: 'You can read data of variable length from a network connection, provided that
    both the sender and receiver have agreed on a protocol for doing so. The *type-length-value**(TLV)*
    encoding scheme is a good option. TLV encoding uses a fixed number of bytes to
    represent the type of data, a fixed number of bytes to represent the value size,
    and a variable number of bytes to represent the value itself. Our implementation
    uses a 5-byte header: 1 byte for the type and 4 bytes for the length. The TLV
    encoding scheme allows you to send a type as a series of bytes to a remote node
    and constitute the same type on the remote node from the series of bytes.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从网络连接中读取变长数据，前提是发送方和接收方都已达成协议。*类型-长度-值*（TLV）编码方案是一个不错的选择。TLV 编码使用固定字节数表示数据的类型，使用固定字节数表示值的大小，并使用可变字节数表示值本身。我们的实现使用一个
    5 字节的头部：1 字节表示类型，4 字节表示长度。TLV 编码方案允许你将类型作为字节序列发送到远程节点，并根据这些字节序列在远程节点上重构相同的类型。
- en: '[Listing 4-4](#listing4-4) defines the types that our TLV encoding protocol
    will accept.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 4-4](#listing4-4) 定义了我们的 TLV 编码协议将接受的类型。'
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 4-4: The message struct implements a simple protocol (*types.go*).'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4-4：消息结构体实现了一个简单的协议（*types.go*）。
- en: You start by creating constants to represent each type you will define. In this
    example, you will create a `BinaryType`1 and a `StringType`2. After digesting
    the implementation details of each type, you should be able to create types that
    fit your needs. For security purposes that we’ll discuss in just a moment, you
    must define a maximum payload size 3.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你从创建常量开始，表示你将定义的每个类型。在这个例子中，你将创建一个`BinaryType`和一个`StringType`。在消化每种类型的实现细节后，你应该能够创建适合你需求的类型。出于安全考虑，我们稍后会讨论，你必须定义一个最大有效负载大小。
- en: 'You also define an interface named `Payload`4 that describes the methods each
    type must implement. Each type must have the following methods: `Bytes`, `String`,
    `ReadFrom`, and `WriteTo`. The `io.ReaderFrom` and `io.WriterTo` interfaces allow
    your types to read from readers and write to writers, respectively. You have some
    flexibility in this regard. You could just as easily make the ``Payload implement
    the `encoding.BinaryMarshaler` interface to marshal itself to a byte slice and
    the `encoding.BinaryUnmarshaler` interface to unmarshal itself from a byte slice.
    But the byte slice is one level removed from the network connection, so you’ll
    keep the `Payload` interface as is. Besides, you’ll use the binary encoding interfaces
    in the next chapter.``'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你还定义了一个名为`Payload`的接口，描述了每个类型必须实现的方法。每个类型必须具有以下方法：`Bytes`、`String`、`ReadFrom`
    和 `WriteTo`。`io.ReaderFrom` 和 `io.WriterTo` 接口分别允许你的类型从读取器读取数据并写入到写入器。你在这方面有一些灵活性。你也可以让`Payload`实现`encoding.BinaryMarshaler`接口，将其自己编码为字节切片，并实现`encoding.BinaryUnmarshaler`接口，从字节切片解码。但字节切片是从网络连接中剥离的一个层次，所以你将保持现有的`Payload`接口。此外，你将在下一章中使用二进制编码接口。
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
