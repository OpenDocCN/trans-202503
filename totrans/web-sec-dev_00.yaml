- en: '**INTRODUCTION**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![image](Images/common01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The web is a wild place. It’s easy to get the impression that the internet was
    designed very deliberately by experts and that everything works as it does for
    a good reason. In fact, the evolution of the internet has been rapid and haphazard,
    and the things we do on the network today go well beyond what the original inventors
    imagined.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, securing your website can seem like a daunting proposition. Websites
    are a unique type of software that is available to millions of users immediately
    upon release, including an active and motivated community of hackers. Big companies
    routinely suffer security failures, and new data breaches are announced every
    week. How is a lone web developer supposed to protect themselves in the face of
    this?
  prefs: []
  type: TYPE_NORMAL
- en: '**About This Book**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The big secret of web security is that the number of web vulnerabilities is
    actually rather small—coincidentally, about the size to fit in a single book—and
    these vulnerabilities don’t change much from year to year. This book you will
    teach you *every* key threat you need to know about, and I will break down the
    practical steps you should take to defend your website.
  prefs: []
  type: TYPE_NORMAL
- en: '**Who Should Read This Book**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are a web developer who is just starting out in their career, this book
    is an ideal hitchhiker’s guide to security on the internet. Whether you have just
    finished a computer science qualification, are fresh out of bootcamp, or are self-taught,
    I recommend you read this book cover to cover. Everything in this book is essential
    knowledge, and it is explained in the most straightforward manner with clear examples.
    Preparing fully now for the threats you will face will save you a lot of trouble
    down the line.
  prefs: []
  type: TYPE_NORMAL
- en: If you are a more experienced programmer, this book will prove useful too. You
    can always benefit from brushing up on your security knowledge, so use this book
    to fill in any gaps you may have. Treat it like a reference book and dip into
    the chapters that seem interesting. You don’t always know what you don’t know!
    Seasoned programmers like yourself have a responsibility to lead their team by
    example, and for web developers, that means following security best practices.
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that this book isn’t specific to any particular programming
    language (though I make various security recommendations for the major languages
    as needed). A sound understanding of web security will benefit you, no matter
    which language you choose to program in. Many programmers will use a variety of
    languages across the course of their careers, so it’s better to learn the principles
    of web security than to focus too much on individual libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '**A Brief History of the Internet**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before I lay out the contents of the book, it will be useful to recap how the
    internet arrived at its current state. A lot of clever engineers contributed to
    the explosive growth of the internet, but as with most software projects, security
    considerations often took a back seat while features were added. Understanding
    how security vulnerabilities crept in will give you the context you’ll need when
    learning how to fix them.
  prefs: []
  type: TYPE_NORMAL
- en: The World Wide Web was invented by Tim Berners-Lee while working at the European
    Organization for Nuclear Research (CERN). The research conducted at CERN consists
    of smashing subatomic particles together in the hope they will split into smaller
    subatomic particles, thus revealing the essential fabric of the universe, with
    the understanding that such research has the potential to create black holes right
    here on Earth.
  prefs: []
  type: TYPE_NORMAL
- en: Berners-Lee, apparently less interested than his peers in bringing about an
    end to the universe, spent his time at CERN inventing the internet as we know
    it today, as a means of sharing data between universities about their findings.
    He created the first web browser and the first web server, and invented HyperText
    Markup Language (HTML) and the HyperText Transfer Protocol (HTTP). The world’s
    first website went online in 1993.
  prefs: []
  type: TYPE_NORMAL
- en: Early web pages were text-only. The first browser capable of displaying inline
    images was Mosaic, created at the National Center for Supercomputing Applications.
    The creators of Mosaic eventually went on to join Netscape Communications, where
    they helped to create Netscape Navigator, the first widely used web browser. In
    the early web, most pages were static, and traffic was transmitted without encryption.
    A simpler time!
  prefs: []
  type: TYPE_NORMAL
- en: '***Scripting in the Browser***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Fast-forward to 1995, and a recent hire of Netscape Communications named Brendan
    Eich took 10 days to invent JavaScript, the first language capable of being embedded
    in web pages. During development, the language was called Mocha, then renamed
    LiveScript, then renamed again to JavaScript, before being eventually formalized
    as ECMAScript. Nobody liked the name ECMAScript, least of all Eich, who claimed
    it sounded like a skin disease; so everyone continued to call it JavaScript except
    in the most formal settings.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript’s original incarnation combined the clumsy naming conventions of
    the (otherwise unrelated) Java programming language, the structured programming
    syntax of C, the obscure prototype-based inheritance of Self, and a nightmarish
    type-conversion logic of Eich’s own devising. For better or worse, JavaScript
    became the de facto language of web browsers. Suddenly, web pages were interactive
    things, and a whole class of security vulnerabilities emerged. Hackers found ways
    to inject JavaScript code into pages by using cross-site scripting attacks, and
    the internet became a much more dangerous place.
  prefs: []
  type: TYPE_NORMAL
- en: '***A New Challenger Enters the Arena***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The first real competitor to Netscape Navigator was Microsoft’s Internet Explorer.
    Internet Explorer had a couple of competitive advantages—it was free and came
    preinstalled on Microsoft Windows. Explorer rapidly became the world’s most popular
    browser, and the Explorer icon became “the internet button” for a generation of
    users learning how to navigate the web.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft’s attempts to “own” the web led it to introduce proprietary technology
    like ActiveX into the browser. Unfortunately, this led to an uptick in *malware*—malicious
    software that infects users’ machines. Windows was (and remains) the primary target
    for computer viruses, and the internet proved an effective delivery mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: Internet Explorer’s dominance wouldn’t be challenged for many years, until the
    launch of Mozilla’s Firefox, and then by Chrome, a snazzy new browser created
    by the plucky young search startup Google. These newer browsers accelerated the
    growth and innovation in internet standards. However, by now, hacking was becoming
    a profitable business, and any security flaws were being exploited as soon as
    they were discovered. Securing their browsers became a huge priority for vendors,
    and website owners had to keep on top of the latest security news if they wanted
    to protect their users.
  prefs: []
  type: TYPE_NORMAL
- en: '***Machines for Writing HTML***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Web servers evolved at the same rapid clip as browser technology. In the first
    days of the internet, hosting websites was a niche hobby practiced by academics.
    Most universities ran the open source operating system Linux. In 1993, the Linux
    community implemented the *Common Gateway Interface (CGI)*, which allowed *webmasters*
    to easily create websites consisting of interlinked, static HTML pages.
  prefs: []
  type: TYPE_NORMAL
- en: More interestingly, CGI allowed HTML to be generated by scripting languages
    like Perl or PHP—so a site owner could dynamically create pages from content stored
    in a database. PHP originally stood for Personal Home Page, back when the dream
    was that everyone would run their own web server, rather than uploading all their
    personal information to a social media behemoth with a questionable data-privacy
    policy.
  prefs: []
  type: TYPE_NORMAL
- en: 'PHP popularized the notion of the *template* file: HTML with embedded processing
    tags, which could be fed through the PHP runtime engine. Dynamic PHP websites
    (like the earliest incarnations of Facebook) flourished across the internet. However,
    dynamic server code introduced a whole new category of security vulnerabilities.
    Hackers found novel ways to run their own malicious code on the server by using
    injection attacks, or to explore the server’s filesystem by using directory traversal.'
  prefs: []
  type: TYPE_NORMAL
- en: '***A Series of Tubes***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The constant reinvention of web technology means that much of today’s internet
    is powered by what we would consider “old” technology. Software tends to reach
    a point where it works enough to be useful, then falls into “maintenance” mode,
    where changes are made only if absolutely necessary. This is particularly true
    of web servers, which need to be online 24/7\. Hackers scan the web for vulnerable
    sites running on older technology, since they frequently exhibit security holes.
    We are still fixing security issues first discovered a decade ago, which is why
    in this book I describe every major security flaw that can affect websites.
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, the internet continues to grow faster than ever! The trend
    for internet-enabling everyday devices like cars, doorbells, refrigerators, light
    bulbs, and cat-litter trays has opened a new vector for attacks. The simpler the
    appliance connecting to the Internet of Things, the less likely it is to have
    auto-updating security features. This has introduced huge numbers of unsecured
    internet nodes that provide a rich hosting environment for *botnets*, malicious
    software agents that can be installed and controlled remotely by hackers. This
    gives an attacker a lot of potential firepower if they target your site.
  prefs: []
  type: TYPE_NORMAL
- en: '***What to Worry About First***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A web developer can easily be discouraged by the difficulties involved with
    properly securing a website. You should have hope, though: an army of security
    researchers are out there bravely discovering, documenting, and fixing security
    flaws. The tools you need to secure your site are freely available and generally
    easy to use.'
  prefs: []
  type: TYPE_NORMAL
- en: Learning about the most common security vulnerabilities, and knowing how to
    plug them, will protect your systems against 99 percent of attacks. There will
    always be ways for a very technical adversary to compromise your system, but unless
    you are running an Iranian nuclear reactor or a US political campaign, this thought
    shouldn’t keep you up at night.
  prefs: []
  type: TYPE_NORMAL
- en: '**What’s in This Book**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The book is divided into two parts. [Part I](part01.xhtml#part01) covers the
    nuts and bolts of how the internet works. [Part II](part02.xhtml#part02) delves
    into specific vulnerabilities you need to protect against. The content is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 1: Let’s Hack a Website](ch01.xhtml#ch01)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this introductory chapter, you will learn how easy it is to hack a website.
    Hint: it’s really easy, so you did well to buy this book.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 2: How the Internet Works](ch02.xhtml#ch02)**'
  prefs: []
  type: TYPE_NORMAL
- en: The “tubes” of the internet run on the Internet Protocol, a series of network
    technologies that allow computers across the world to communicate seamlessly.
    You will review TCP, IP addresses, domain names, and HTTP, and see how data can
    be passed securely on the network.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 3: How Browsers Work](ch03.xhtml#ch03)**'
  prefs: []
  type: TYPE_NORMAL
- en: Users interact with your website via the browser, and many security vulnerabilities
    manifest there. You will learn how a browser renders a web page, and how JavaScript
    code is executed in the browser security model.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 4: How Web Servers Work](ch04.xhtml#ch04)**'
  prefs: []
  type: TYPE_NORMAL
- en: Most of the code you will write for your website will run in a web server environment.
    Web servers are a primary target for hackers. This chapter describes how they
    serve static content, and how they use dynamic content like templates to incorporate
    data from databases and other systems. You will also dip into some of the major
    programming languages used for web programming, and review the security considerations
    of each.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 5: How Programmers Work](ch05.xhtml#ch05)**'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter explains how you should go about the process of writing website
    code, and the good habits you can develop to reduce the risk of bugs and security
    vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 6: Injection Attacks](ch06.xhtml#ch06)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will begin our survey of website vulnerabilities by looking at one of the
    nastiest threats you will encounter: a hacker injecting code and executing it
    on your server. This often happens when your code interfaces with a SQL database
    or the operating system; or the attack might consist of remote code injected into
    the web server process itself. You will also see how file upload functions can
    allow a hacker to inject malicious scripts.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 7: Cross-Site Scripting Attacks](ch07.xhtml#ch07)**'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter reviews attacks used to smuggle malicious JavaScript code into
    the browser environment, and how to protect against them. There are three distinct
    methods of cross-site scripting (stored, reflected, and DOM-based), and you will
    learn how to protect against each.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 8: Cross-Site Request Forgery Attacks](ch08.xhtml#ch08)**'
  prefs: []
  type: TYPE_NORMAL
- en: You will see how hackers use forgery attacks to trick your users into performing
    undesirable actions. This is a common nuisance on the internet, and you need to
    protect your users accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 9: Compromising Authentication](ch09.xhtml#ch09)**'
  prefs: []
  type: TYPE_NORMAL
- en: If users sign up to your website, it’s essential that you treat their accounts
    securely. You will review various methods used by hackers to circumvent the login
    screen, from brute-force guessing of passwords to user enumeration. You will also
    review how to securely store user credentials in your database.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 10: Session Hijacking](ch10.xhtml#ch10)**'
  prefs: []
  type: TYPE_NORMAL
- en: You will see how your users can have their accounts hijacked *after* they have
    logged in. You will learn how to build your website and treat your cookies securely
    to mitigate this risk.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 11: Permissions](ch11.xhtml#ch11)**'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how you can prevent malicious actors from using privilege escalation to
    access forbidden areas of your site. In particular, if you reference files in
    your URLs, hackers will try to use directory traversal to explore your filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 12: Information Leaks](ch12.xhtml#ch12)**'
  prefs: []
  type: TYPE_NORMAL
- en: You might well be advertising vulnerabilities in your website by leaking information.
    This chapter tells you how to stop that immediately.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 13: Encryption](ch13.xhtml#ch13)**'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter shows how to properly use encryption and explains why it is important
    on the internet. Be prepared for some light mathematics.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 14: Third-Party Code](ch14.xhtml#ch14)**'
  prefs: []
  type: TYPE_NORMAL
- en: You will learn how to manage vulnerabilities in other people’s code. Most of
    the code you run will be written by someone else, and you should know how to secure
    it!
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 15: XML Attacks](ch15.xhtml#ch15)**'
  prefs: []
  type: TYPE_NORMAL
- en: Your web server probably parses XML, and could be vulnerable to the attacks
    described in this chapter. XML attacks have been a consistently popular attack
    vector among hackers for the past couple of decades, so beware!
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 16: Don’t Be an Accessory](ch16.xhtml#ch16)**'
  prefs: []
  type: TYPE_NORMAL
- en: You might unwittingly be acting as an accessory to hacking attempts on others,
    as you will see in this chapter. Be a good internet citizen by making sure you
    close these security loopholes.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 17: Denial-of-Service Attacks](ch17.xhtml#ch17)**'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I will show you how massive amounts of network traffic can
    take your website offline as part of a denial-of-service attack.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 18: Summing Up](ch18.xhtml#ch18)**'
  prefs: []
  type: TYPE_NORMAL
- en: The last chapter is a cheat sheet that reviews the key elements of security
    you learned throughout the book, and recaps the high-level principles you should
    apply when being security-minded. Learn it by heart and recite the lessons before
    you go to sleep each night.
  prefs: []
  type: TYPE_NORMAL
