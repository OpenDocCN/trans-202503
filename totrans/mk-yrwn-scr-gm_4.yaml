- en: '![Image](Images/f101-01.jpg)'
  id: totrans-0
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f101-01.jpg)'
- en: '4'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '4'
- en: Designing Levels
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 设计关卡
- en: 'In this chapter, we’ll continue with the *Hatlight* game to talk about *level
    design*, or the design of the different areas in your game. You can use level
    design to tell stories or let a player know what’s important. Level design helps
    you develop those ideas and mix them up to create the unexpected. In addition,
    level design can surprise the player or make them experience different feelings:
    smart, excited, scared, frustrated, or curious.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续使用*Hatlight*游戏，讨论*关卡设计*，即游戏中不同区域的设计。你可以通过关卡设计讲述故事或让玩家知道什么是重要的。关卡设计帮助你发展这些想法，并将它们混合起来创造出意想不到的效果。此外，关卡设计还可以让玩家感到惊讶或让他们体验不同的情感：聪明、兴奋、害怕、沮丧或好奇。
- en: 'As a level designer, you need to consider several different concepts at the
    same time:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个关卡设计师，你需要同时考虑多个不同的概念：
- en: '**A level is a series of challenges or obstacles:** How does the player get
    from one place to another? Do they learn about the game while they figure out
    how to do so?'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**一个关卡是一系列的挑战或障碍：** 玩家如何从一个地方到达另一个地方？他们在解决这个问题的过程中能否了解游戏？'
- en: '**A level is a virtual space:** How does the level make the player feel? If
    the level was a real place, would it feel open or cramped? tidy or messy?'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**一个关卡是一个虚拟空间：** 这个关卡让玩家感觉如何？如果这个关卡是一个真实的地方，它会显得开阔还是狭小？整洁还是凌乱？'
- en: '**A level is an image:** The player sees each level as an image on their screen.
    What does it look like? Is it mostly sharp lines or curves? What part of a level
    do your eyes notice first?'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**一个关卡是一个图像：** 玩家将每个关卡视为屏幕上的一幅图像。它看起来像什么？它是由尖锐的线条还是曲线组成的？你第一眼注意到关卡的哪个部分？'
- en: Considering these elements enables you to tell engaging stories using your levels.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这些元素可以帮助你通过关卡讲述引人入胜的故事。
- en: Let’s Make Some Levels!
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一起来制作一些关卡吧！
- en: If you skipped programming the game in earlier chapters or just don’t want to
    worry about it, you can find a version of the game with the platform engine code
    at *[http://tinyurl.com/hatlightempty/](http://tinyurl.com/hatlightempty/)*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你跳过了前面章节中的游戏编程部分，或者只是不想为此担忧，你可以在*[http://tinyurl.com/hatlightempty/](http://tinyurl.com/hatlightempty/)*找到一个带有平台引擎代码的游戏版本。
- en: '![Image](Images/f102-01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f102-01.jpg)'
- en: '*Project page*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*项目页面*'
- en: Just click **See inside** and then click the **File ▸ Save to your computer**
    to save a copy of the code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 只需点击**查看内部**，然后点击**文件 ▸ 保存到你的计算机**以保存代码的副本。
- en: '![Image](Images/f103-01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f103-01.jpg)'
- en: '*The platform engine code*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*平台引擎代码*'
- en: Now you’re ready to make your own levels!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经准备好制作你自己的关卡了！
- en: '**NOTE:** Because this version shows the platform engine code, it doesn’t have
    the darkness and flashlight features. If you want them, try tweaking the finished
    *Hatlight* game instead. You can download it at *[https://nostarch.com/scratchgames/](https://nostarch.com/scratchgames/)*!'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 因为这个版本展示了平台引擎代码，所以它没有黑暗和手电筒功能。如果你需要这些功能，可以尝试调整完成后的*Hatlight*游戏。你可以在*[https://nostarch.com/scratchgames/](https://nostarch.com/scratchgames/)*下载！'
- en: Drawing Levels
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 绘制关卡
- en: You can design levels for your game by drawing costumes for the `Walls` sprite.
    Each costume should match a room in the grid, as you saw in [Chapter 3](ch03.xhtml#ch03).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过为`墙壁`精灵绘制服装来设计你的游戏关卡。每个服装应与网格中的一个房间相匹配，正如你在[第三章](ch03.xhtml#ch03)中看到的那样。
- en: '| 1 | 2 | 3 | 4 |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 2 | 3 | 4 |'
- en: '| 5 | 6 | 7 | 8 |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 6 | 7 | 8 |'
- en: '| 9 | 10 | 11 | 12 |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 9 | 10 | 11 | 12 |'
- en: '| 13 | 14 | 15 | 16 |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 13 | 14 | 15 | 16 |'
- en: If you want your game to have light and darkness, create a second, lighter backdrop
    that you can use when you’re working on levels.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望游戏中有光线和黑暗效果，可以创建一个第二个较亮的背景，当你在制作关卡时使用它。
- en: Drawing a Cave
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 绘制一个洞穴
- en: You can use several drawing tools to make different kinds of terrain for your
    platform. For example, the Brush tool is best for making wiggly, bumpy, and curvy
    ground, like you would find inside a cave.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用多个绘图工具为你的平台制作不同类型的地形。例如，刷子工具最适合制作弯曲、颠簸和曲折的地面，就像你在洞穴中看到的那样。
- en: '![Image](Images/f104-01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f104-01.jpg)'
- en: '*Drawing a cave level*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*绘制一个洞穴关卡*'
- en: Irregular terrain looks more *natural*, like the hills and ground that you would
    find in the real world. Things in nature are rarely flat or straight. To make
    a cool cave or a hill that looks real, try using the Brush tool and your mouse
    to draw it. (Designers call this *freehand drawing*.) The Line and Rectangle tools
    make straight lines and are great for drawing objects that look man-made.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 不规则的地形看起来更加*自然*，就像现实世界中的山丘和地面一样。自然界中的事物很少是平坦或笔直的。要制作一个看起来真实的洞穴或山丘，试试使用画笔工具和鼠标绘制。
    （设计师称之为*自由手绘*。）线条工具和矩形工具可以绘制直线，非常适合绘制看起来是人造的物体。
- en: '![Image](Images/f105-01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f105-01.jpg)'
- en: '*Drawing a building*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*绘制建筑物*'
- en: When we build our homes, we usually build them with straight walls and flat
    floors. In a platform game like *Hatlight*, if the player moves from a bumpy,
    hilly area into a place full of straight lines, the player will think, “I’m inside
    a building now.”
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们建造房屋时，通常会建造直墙和平地。在像 *Hatlight* 这样的平面游戏中，如果玩家从一个崎岖的山区进入一个充满直线的地方，玩家会想：“我现在在建筑物里了。”
- en: Note that you can hold down the shift key while drawing a line to make sure
    it’s totally straight. You can also copy and paste parts of a screen using the
    Select tool to make identical parts.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在绘制直线时，你可以按住 Shift 键来确保它完全是直的。你还可以使用选择工具复制和粘贴屏幕上的部分内容，从而制作相同的部分。
- en: Saving Details for Later
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 保存细节以备后用
- en: 'When you’re first drawing levels, try to keep them simple. Don’t spend too
    much time making them look good: start by putting all the platforms in the places
    you want them. You can come back and add details later.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在刚开始绘制关卡时，尽量保持简单。不要花太多时间让它们看起来好看：先把所有的平台放在你想要的位置。稍后你可以回来添加细节。
- en: '![Image](Images/f105-02.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f105-02.jpg)'
- en: '*Rough first draft*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*粗略的初稿*'
- en: '![Image](Images/f106-01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f106-01.jpg)'
- en: '*Final draft after adding details*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*加入细节后的最终草稿*'
- en: Play your levels as you’re sketching them. After you make sure they work, only
    *then* go back and make them look nicer.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在绘制关卡时可以进行试玩。确认它们有效后，再回过头去让它们看起来更漂亮。
- en: 'Here are some tricks for adding detail to your levels:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些为你的关卡增添细节的小技巧：
- en: '![Image](Images/f106-02.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f106-02.jpg)'
- en: '**Adjust the pen size for finer detail:** Use a smaller brush to add branches
    to a tree.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**调整笔刷大小以获得更精细的细节：** 使用更小的画笔给树木添加树枝。'
- en: '![Image](Images/f106-03.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f106-03.jpg)'
- en: '**Use the mouse to draw dots:** Instead of clicking and dragging, try just
    clicking to place a single dot. These dots could be pebbles or fallen rubble.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用鼠标绘制点：** 与其点击并拖动，不如尝试直接点击以放置一个单独的点。这些点可以是小石子或掉落的碎石。'
- en: '![Image](Images/f106-04.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f106-04.jpg)'
- en: '**Draw with the Eraser tool:** Use the eraser to draw cracks and holes, and
    other details.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用橡皮擦工具绘制：** 使用橡皮擦绘制裂缝和洞口等细节。'
- en: Now that you’ve explored ways to add authentic and fun details to your platforms,
    let’s keep going.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经探索了为你的平台增添真实有趣细节的方法，让我们继续前进。
- en: '![Image](Images/f106-05.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f106-05.jpg)'
- en: Things to Keep in Mind
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 需要记住的事项
- en: Keep in mind that the game considers everything you draw in the `Walls` sprite
    as a solid object. So, if you’re not careful, you can create places the player
    can stand on that they shouldn’t be able to.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，游戏会将你在 `Walls` 精灵中绘制的所有内容视为实心物体。所以，如果不小心，你可能会创造出一些玩家本不应该站上的地方。
- en: '![Image](Images/f107-01.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f107-01.jpg)'
- en: '*The player shouldn’t be able to stand on a wall like this!*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*玩家不应该站在这样的墙上！*'
- en: One way around this problem is to make walls slope away from the player. Another
    is to use the Line ![Image](Images/line.jpg) or Rectangle ![Image](Images/box.jpg)
    tools to make sure your walls are straight. Try making a straight wall and then
    adding some tiny pockmarks using the Eraser tool ![Image](Images/eraser.jpg).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的一种方法是让墙壁向玩家方向倾斜。另一种方法是使用线条 ![Image](Images/line.jpg) 或矩形 ![Image](Images/box.jpg)
    工具来确保墙壁是直的。尝试制作一面直墙，然后使用橡皮擦工具 ![Image](Images/eraser.jpg) 添加一些小凹痕。
- en: '![Image](Images/f107-02.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f107-02.jpg)'
- en: '*Sloped wall*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*倾斜的墙壁*'
- en: Also, check bumpy floors and sloped surfaces to make sure the player can walk
    across them! The player should be able to climb bumps or slopes 3 pixels tall
    but will get stuck if a bump is any taller.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，要检查不平的地面和倾斜的表面，确保玩家能够走过它们！玩家应该能够攀爬高度为 3 像素的凸起或坡度，但如果凸起更高，玩家会卡住。
- en: '![Image](Images/f107-03.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f107-03.jpg)'
- en: '*A stuck player!*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*卡住的玩家！*'
- en: Make sure the floors and platforms line up between screens, or else the player
    can end up suspended in midair or stuck in the floor when moving from screen to
    screen. The easiest way to avoid this is to use the Select tool ![Image](Images/tool.jpg)
    to highlight the edge of one screen, and then copy and paste it to the adjacent
    screen, like this.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 确保屏幕之间的地面和平台对齐，否则玩家在从一个屏幕移动到另一个屏幕时，可能会悬浮在空中或卡在地面里。避免这种情况的最简单方法是使用选择工具 ![Image](Images/tool.jpg)高亮显示一个屏幕的边缘，然后将其复制并粘贴到相邻屏幕，就像这样。
- en: '![Image](Images/f108-01.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f108-01.jpg)'
- en: '*Copying and pasting one edge of the screen to the next*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*复制并粘贴屏幕的一个边缘到下一个屏幕*'
- en: As mentioned earlier, anything you draw in a costume for the `Walls` sprite
    will be solid, even if you try to remove it by drawing over it with the color
    white. All that white you draw will still be treated as solid ground. (But if
    you want solid white ground, this is no big deal.)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，任何你在`Walls`精灵服装中绘制的东西都会是实心的，即使你试图用白色覆盖它。你绘制的所有白色仍然会被视为实心地面。（但如果你想要实心的白色地面，这也没什么大不了的。）
- en: To get rid of something, you need to use the Eraser tool ![Image](Images/eraser.jpg).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要移除某个物品，你需要使用橡皮擦工具 ![Image](Images/eraser.jpg)。
- en: '![Image](Images/f108-02.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f108-02.jpg)'
- en: '*Player on solid white ground*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*玩家在实心的白色地面上*'
- en: Scratch considers even a single speck of color in the `Walls` sprite a solid
    object.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Scratch认为`Walls`精灵中的每一个小斑点都是一个实心物体。
- en: '![Image](Images/f109-01.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f109-01.jpg)'
- en: '*Even specks count as solid ground.*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*即使是小斑点也算作实心地面。*'
- en: If the player gets stuck somewhere or seems to float in midair, use the Zoom
    tool ![Image](Images/zoom.jpg) to check for tiny specks left over from erasing.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果玩家卡在某个地方或似乎漂浮在空中，使用缩放工具 ![Image](Images/zoom.jpg)检查是否有擦除时留下的小斑点。
- en: Adding Background Scenery
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加背景景物
- en: What if we want to add objects to our levels that aren’t solid, like a tree
    in the background or a small dog? No problem!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在关卡中添加一些不实心的物体，比如背景中的一棵树或一只小狗，怎么办？没问题！
- en: '![Image](Images/f109-02.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f109-02.jpg)'
- en: '*Background scenery*'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*背景景物*'
- en: Let’s add a `Scenery` sprite to add details to the background. Like the `Walls`
    sprite, this sprite will have a costume for each room. But unlike the `Walls`
    sprite, the items we draw in the `Scenery` costume won’t be solid. Instead, they’ll
    be in the background, so the player can walk in front of them.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个`Scenery`精灵来为背景添加细节。像`Walls`精灵一样，这个精灵也会为每个房间准备一个服装。但与`Walls`精灵不同的是，我们在`Scenery`服装中绘制的物品不会是实心的，而是处于背景中，这样玩家可以走在它们前面。
- en: If you’ve uploaded the complete game from the book’s site, you should already
    have a `Scenery` sprite. Just draw background objects onto the costume that matches
    the screen you want them to appear on.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经从书籍网站上传了完整的游戏，你应该已经有了一个`Scenery`精灵。只需将背景物体绘制到与目标屏幕匹配的服装上即可。
- en: '**NOTE:** The costumes have numbers on them to help you keep track of which
    screen is which. Feel free to erase them when you draw your own backgrounds!'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 服装上有数字，帮助你追踪不同屏幕。绘制自己的背景时，尽管擦除它们！'
- en: Otherwise, you’ll need to program a `Scenery` sprite, like this.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，你需要编写一个`Scenery`精灵，如下所示。
- en: '![Image](Images/f110-01.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f110-01.jpg)'
- en: '*Scenery code*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*景物代码*'
- en: Similar to the `new screen` event we added to the player that broadcasts whenever
    the screen changes, the `new screen` message changes its costume to match the
    screen we’re on after the `Scenery` sprite receives the message. Be sure to give
    the `Scenery` sprite 16 costumes in total!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于我们为玩家添加的`new screen`事件，每当屏幕变化时广播该事件，`new screen`消息会改变其服装以匹配我们所处的屏幕，在`Scenery`精灵接收到消息后。确保给`Scenery`精灵准备16个服装！
- en: You want the `Scenery` sprite to be in front of the `Flashlight` sprite so the
    light from the flashlight won’t cover it up. You can adjust the depth of sprites
    using the `go to front layer` and `go backward X layers` blocks in the Looks tab.
    Remember that you can double-click a code block to execute it immediately, even
    when the game isn’t running. When you double-click the `go backward –1 layers`
    block, it brings a sprite forward a single layer.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望`Scenery`精灵位于`Flashlight`精灵前面，这样手电筒的光线就不会把它遮住。你可以使用“前往最前层”和“向后移动X层”代码块在外观标签中调整精灵的深度。记住，你可以双击一个代码块，即使游戏没有运行时，它也会立即执行。当你双击`go
    backward –1 layers`块时，它会将精灵向前移动一层。
- en: '![Image](Images/f110-02.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f110-02.jpg)'
- en: '*The go backwards –1 layers block*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*向后移动 -1 层的代码块*'
- en: When you’re drawing background scenery, make sure the `Walls` sprite is set
    to the costume that matches the `Scenery` sprite. That way you can tell whether
    the background scenery you’re drawing lines up with walls and platforms.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当你绘制背景景物时，确保`Walls`精灵的服装设置与`Scenery`精灵匹配。这样你就能确认你绘制的背景景物是否与墙壁和平台对齐。
- en: Teaching the Player How to Play
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 教导玩家如何玩
- en: Because *Hatlight* is an exploration game, the player chooses the parts of the
    game they see in the order they want. But before we give the player any big choices,
    let’s make sure they understand the basics.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 因为*头灯*是一个探索游戏，所以玩家可以按自己喜欢的顺序选择游戏中的内容。但是在让玩家做出重大选择之前，我们需要确保他们理解基本的游戏规则。
- en: 'We’ll start the game with two screens that introduce them to the most important
    ideas they need to know, such as how they’ll move around, how high they can jump,
    and whether they can see the entire level they’re in at once. (Hint: no, they
    can’t.)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过两个画面开始游戏，向玩家介绍他们需要知道的最重要的概念，比如如何移动、能跳多高，以及是否能够一次性看到整个关卡的全部内容。（提示：不，他们做不到。）
- en: First, we want the player to understand how light and darkness work. So the
    game starts with an opening screen where the player begins outside the cave in
    full daylight, and then enters the cave where it’s dark.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们希望玩家理解光与暗的作用。因此，游戏开始时，玩家位于洞外的白天，接着进入洞内，那里是黑暗的。
- en: '![Image](Images/f111-01.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f111-01.jpg)'
- en: '*Screen 1: the cave entrance*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*画面1：洞口*'
- en: We use the `Scenery` sprite to provide the daylight. When the player steps out
    of the daylight into the darkness, the hatlight appears. This transition makes
    sure the player *notices* when the hatlight comes on.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`Scenery`精灵提供白天的光线。当玩家从光线中走入黑暗时，头灯就会出现。这种过渡确保玩家*注意到*头灯的亮起。
- en: As the player climbs down the screen into the cave, a spooky skull appears in
    the corner. That’s just my way of showing the player they can use their light
    to discover things!
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家爬下屏幕进入洞穴时，一个吓人的骷髅出现在角落里。这只是我用来告诉玩家，他们可以利用自己的光线来发现新事物的方式！
- en: '![Image](Images/f112-01.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f112-01.jpg)'
- en: '*Screen 1: inside the cave*'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*画面1：洞穴内部*'
- en: 'On the second screen, we introduce the next most important idea: the player
    sees their first battery and understands that it’s an object to collect.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个画面上，我们介绍下一个最重要的概念：玩家看到第一个电池，并明白它是一个可收集的物品。
- en: '![Image](Images/f112-02.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f112-02.jpg)'
- en: '*Screen 2 shows a battery somewhere nearby*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*画面2：附近有一个电池*'
- en: The player enters this screen at the bottom and sees the battery at the top.
    This is why it’s important that the batteries are visible in the darkness. The
    player can see where it is but can’t see how to get to it without exploring their
    environment. Batteries give them a reason to explore.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家从画面底部进入，看到电池位于顶部。这就是为什么在黑暗中电池必须可见的重要原因。玩家能够看到电池所在的位置，但无法知道如何到达那里，除非他们探索周围的环境。电池给了他们一个探索的理由。
- en: In the first screen, the player learns some valuable information about the game.
    Players learn there are batteries to find and what the batteries look like. Batteries
    are always visible but sometimes hard to reach. If your players try to reach a
    battery and touch it at this point, they’ll learn they can collect them. (If they
    skip this step, there are more opportunities to learn this lesson later.)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个画面中，玩家了解到一些关于游戏的重要信息。玩家知道有电池可以寻找，并且了解电池的外观。电池始终可见，但有时很难够到。如果玩家此时试图触摸电池，他们会发现自己可以收集它们。（如果跳过这一步骤，稍后还有机会学习这一课。）
- en: The simplest areas in a game can teach you a lot of information about the game.
    When you play other games, pay attention to what the game is sneakily teaching
    you.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏中最简单的区域也能教会你很多关于游戏的信息。当你玩其他游戏时，留意游戏偷偷教给你的东西。
- en: Let’s talk about some of the ways level design teaches game play.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来谈谈关卡设计是如何教导玩家游戏玩法的。
- en: Showing Objects Players Can’t Reach
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 显示玩家无法到达的物体
- en: On screen 2, the player sees a battery and, if they explore, eventually figures
    out a way to reach it. That all happens on a single screen. But because our game
    lets the player move from screen to screen in different directions, we can create
    even more mysteries for the player to investigate across multiple screens.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在画面2中，玩家看到一个电池，如果他们进行探索，最终会找到到达它的方法。这一切都发生在同一个画面上。但因为我们的游戏允许玩家在不同方向上从一个画面移动到另一个画面，我们可以为玩家创造更多的谜题，让他们在多个画面中进行探索。
- en: After the first two screens, the player enters a big shaft that runs from the
    top of the map to the bottom, connecting lots of different areas. In the middle
    of the shaft, they might discover this battery.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两个屏幕后，玩家进入一个从地图顶部到底部的大矿井，连接了许多不同的区域。在矿井的中间，他们可能会发现这个电池。
- en: It’s so close yet so far! The way to it is blocked by a cave-in. There’s no
    obvious way to get to it on this screen. To get to it, the player needs to approach
    it from a different direction.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 它如此接近，却又如此遥远！前往它的路被坍塌挡住了。在这个屏幕上没有明显的办法到达它。要到达它，玩家需要从不同的方向接近。
- en: '![Image](Images/f113-01.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f113-01.jpg)'
- en: '*A cave-in blocks the path to a battery.*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*坍塌挡住了通往电池的路。*'
- en: They need to first go up and around through another screen, and then drop into
    a pit. If they can land on the ledge below, they can reach the battery. Learning
    the ledge is there, of course, requires either careful exploration or an accidental
    tumble into the pit.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 它们需要首先向上绕过另一个屏幕，然后掉进一个坑里。如果他们能降落在下面的窗台上，就可以到达电池。学习窗台的位置，当然，需要仔细的探索或偶然跌入坑中。
- en: '![Image](Images/f114-01.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f114-01.jpg)'
- en: '*Reaching the battery requires finding a way around.*'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*到达电池需要找到绕过的方法。*'
- en: 'When you show players something they can’t reach, you’re giving them a problem
    to solve. Figuring out how to get to this battery makes the player think about
    how different screens relate to each other, forcing the player to explore and
    put that information together to solve the problem. When they finally collect
    the battery, it feels satisfying: “I figured it out! Take *that*, game.”'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当你展示给玩家一些他们无法到达的东西时，你就是在给他们一个需要解决的问题。弄清楚如何到达这个电池让玩家思考不同屏幕之间的关系，迫使玩家探索并将这些信息组合起来解决问题。当他们最终收集到电池时，会有一种满足感：“我搞定了！*看这一招*，游戏。”
- en: Creating Interesting Landmarks
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建有趣的地标
- en: A good way to make your levels intriguing and help the player remember where
    objects are is to create distinct areas. For example, you can turn two screens
    into a cool crystal zone.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让你的关卡引人入胜，并帮助玩家记住物品的位置的一个好方法是创建独特的区域。例如，你可以将两个屏幕转变为一个酷炫的水晶区。
- en: '![Image](Images/f115-01.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f115-01.jpg)'
- en: '*Crystal zone*'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*水晶区*'
- en: Here, we use straight lines and sharp angles to create screens that look and
    feel very different from the rest of the game. Keep in mind that a level is not
    only a place and a series of challenges and puzzles, but it’s also a picture.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用直线和锐角来创建看起来和感觉上都与游戏的其他部分非常不同的屏幕。记住，关卡不仅仅是一个地方和一系列的挑战和难题，它还是一幅画。
- en: These screens look cool, but they should look like they belong together as well,
    which will link them in the player’s brain. When the player is trying to remember
    what the map looks like, it’s easier to remember where a big area made up of two
    screens is than a single smaller screen. For example, it’s easier to find your
    way to a neighborhood than to a single house.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这些屏幕看起来很酷，但它们也应该看起来像是相互联系的，这样可以在玩家的脑海中将它们联系起来。当玩家试图记住地图的样子时，记住由两个屏幕组成的一个大区域比记住一个小屏幕要容易。例如，找到一个邻里比找到一栋单独的房子要容易。
- en: Also, notice how the passage leading into the crystal zone from the central
    mine shaft has a few crystals in it, like a signpost pointing the way. “This way
    to the crystal zone!”
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，注意到从中央矿井区通往水晶区的通道里有几个水晶，就像一个路标指引方向。“往水晶区走！”
- en: '![Image](Images/f116-01.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f116-01.jpg)'
- en: '*Entrance to the crystal zone*'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*水晶区的入口*'
- en: Some other distinct areas in this game are the castle zone and the big mine
    shaft. The mine shaft is sometimes called a “hub” area. Think of it as the center
    of a bicycle wheel, where all the different spokes connect to. If the player gets
    lost anywhere in the cave, they’ll eventually find their way back to the mine
    shaft.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏中的一些其他独特区域是城堡区和大矿井区。矿井有时被称为“中心”区域。可以把它想象成自行车轮的中心，所有的辐条都连接到这里。如果玩家在洞穴中迷路了，他们最终会找到回到矿井的路。
- en: Creating Animation
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建动画
- en: It would be a waste to build a beautiful world and leave the player looking
    like a running, jumping red box. Let’s create and animate a player character.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 建造一个美丽的世界却让玩家看起来像一个奔跑、跳跃的红色方框，那将是浪费。让我们创建并动画化一个玩家角色。
- en: '**NOTE:** If you’ve uploaded the complete game from the book’s site, you should
    see an animated player sprite. Feel free to edit, change, or redraw any of the
    animations.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 如果你已经从书本网站上传了完整的游戏，你应该能看到一个动画玩家精灵。随意编辑、修改或重绘任何动画。'
- en: The `Hitbox` sprite does the moving, jumping, and bumping into walls. All of
    the movement code is in that sprite. In this section, we’ll create a *second*
    sprite to handle all the animation and attach it to the same `Hitbox`. When we
    make the `Hitbox` invisible, the player should only see our cool animations.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`Hitbox`精灵负责移动、跳跃和碰撞。所有的移动代码都在这个精灵里。在这一部分，我们将创建一个*第二个*精灵来处理所有动画，并将其附加到同一个`Hitbox`上。当我们让`Hitbox`不可见时，玩家应该只看到我们炫酷的动画。'
- en: Create a new sprite called `Explorer`, which will be the animation sprite. Its
    costumes will hold the character’s animation, and we’ll write code to tell it
    when to show each animation.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的精灵，命名为`Explorer`，它将作为动画精灵。它的服装将保存角色的动画，我们会编写代码告诉它何时显示每个动画。
- en: Animating the Player’s Movements
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 动画化玩家的动作
- en: 'Animation communicates how the character is moving. In *Hatlight*, the player
    performs the following movements:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 动画表现了角色的动作。在*Hatlight*中，玩家执行以下动作：
- en: Standing still
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静止站立
- en: Walking
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行走
- en: Jumping
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳跃
- en: Falling
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下落
- en: Although standing still isn’t really a movement, we need to communicate when
    the player is *not* moving, too. If the player looked the same walking as they
    did standing still, you wouldn’t be able to tell the difference between the two.
    So we want it to have its own appearance.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然静止站立实际上不是一种运动，我们也需要表现玩家在*不*移动时的状态。如果玩家在行走时和站立时看起来一样，你就无法区分这两者。所以我们希望它有自己的外观。
- en: '![Image](Images/f117-01.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f117-01.jpg)'
- en: Standing Still
  id: totrans-136
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 静止站立
- en: The first costume is the standing still pose. It should be centered on the `+`
    and be about the same size as the `Hitbox`. A good idea is to copy the `Hitbox`
    costume and paste it into this costume to use as a guide. When you’re done drawing,
    you can delete any remaining parts of the original `Hitbox` costume.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个服装是静止站立的姿势。它应该以`+`为中心，并且大小大致和`Hitbox`一样。一个好的做法是复制`Hitbox`服装并粘贴到这个服装中，作为绘制的参考。当你完成绘制后，可以删除原`Hitbox`服装中剩余的部分。
- en: '![Image](Images/f118-01.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f118-01.jpg)'
- en: '*Standing costume*'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '*站立服装*'
- en: Mine faces toward the right. For now, let’s draw all the costumes so they face
    toward the right. Later, we’ll use the **Select** tool to flip them around and
    make left-facing versions.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我的角色面朝右方。现在，让我们把所有的服装都画成面朝右方。以后，我们可以使用**选择**工具将它们翻转，做出面朝左方的版本。
- en: Walking
  id: totrans-141
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 行走
- en: Right-click your standing still costume and select **duplicate**. Using your
    standing pose as a starting point, change the new costume so it looks like your
    character is in midstride.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 右键点击你的静止站立服装，选择**复制**。以你的站立姿势为起点，改变新的服装，使其看起来像角色正在迈步。
- en: '![Image](Images/f118-02.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f118-02.jpg)'
- en: '*Walking animation*'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '*行走动画*'
- en: This is the simplest kind of walking animation. In one frame, the character’s
    legs are together, and in the next, they’re apart. When we alternate between the
    two costumes, it’ll look like the character is walking. In real life, walking
    is much more complicated, but for our game, this is fine.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最简单的行走动画。在一个帧中，角色的双腿是并拢的，而在下一个帧中，双腿是分开的。当我们在这两种服装之间交替时，它看起来就像角色在行走。现实生活中，行走要复杂得多，但对于我们的游戏来说，这样就足够了。
- en: '**NOTE:** Try looking up a slow-motion video of someone walking sometime!'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**试着找一个慢动作的行走视频看看！'
- en: When you look closely at the grid lines in the walking animation frames, you’ll
    see that the head in the frame on the right is a bit lower. This adds a little
    *bobble* that makes the walking motion more believable. As the player walks, their
    head bobbles up and down with the rhythm of walking.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当你仔细观察行走动画帧中的网格线时，你会发现右边的帧中的头部稍微低了一点。这增加了一点*上下晃动*，使行走的动作更加逼真。当玩家行走时，头部会随着行走的节奏上下晃动。
- en: Jumping
  id: totrans-148
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 跳跃
- en: For jumping, duplicate your standing costume again as a starting point.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 对于跳跃，从你的站立服装复制一份作为起点。
- en: '![Image](Images/f119-01.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f119-01.jpg)'
- en: '*Jumping costume*'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '*跳跃服装*'
- en: Jumping is supposed to communicate upward motion (also known as *upness*), so
    here we raise the head even higher and make the character’s eyes face upward.
    We also tilt their feet like they’re springing off the ground to emphasize the
    vertical movement of jumping.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 跳跃应该表现向上的动作（也叫做*向上感*），因此在这里我们将头部抬得更高，让角色的眼睛朝上看。我们还会倾斜他们的脚，好像他们正在从地面上弹起，强调跳跃的垂直运动。
- en: Falling
  id: totrans-153
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 下落
- en: For falling, we move the head lower and position the head super low too.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下落，我们把头部位置降低，并让头部低得更明显。
- en: '![Image](Images/f120-01.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f120-01.jpg)'
- en: '*Falling costume*'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '*下落服装*'
- en: When the player reaches the peak of a jump, we’ll switch from the jumping costume
    to the falling costume, so everything about the falling pose should communicate
    downward motion (also known as *downness*). The legs and feet are bracing for
    a landing.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家到达跳跃的最高点时，我们将从跳跃服装切换到下落服装，因此下落姿势的所有元素应当传达下落的动作（也叫做*向下*）。腿和脚正在为着陆做准备。
- en: Or You Can Just Draw a Blob!
  id: totrans-158
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 或者你也可以直接画一个“Blob”！
- en: Your character can be whatever you like. If animating the human form is too
    tricky, try making something else. For example, a blob is super easy to animate.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 你的角色可以是任何你喜欢的样子。如果制作人形动画太复杂，试着制作其他东西。例如，“Blob”非常容易制作动画。
- en: '![Image](Images/f120-02.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f120-02.jpg)'
- en: '*Blob animation*'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '*Blob动画*'
- en: 'Draw a normal-looking blob, and then make two more costumes: a taller, thinner
    blob and a shorter, wider blob. If you alternate between normal, tall, normal,
    wide, normal, tall, and so on, your blob will appear to squish around as it moves.
    You can use the Select tool to change your blob’s height and width more easily.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 画一个正常的“Blob”，然后再制作两个服装：一个更高更瘦的“Blob”和一个更矮更宽的“Blob”。如果你按照正常、高、正常、宽、正常、高的顺序交替切换，动画中的“Blob”就会在移动时看起来像是被挤压变形。你可以使用选择工具更方便地调整“Blob”的高度和宽度。
- en: You can even make your character look like a snake (snakes are just the letter
    S) or a weird bug. If you make your bug move slightly up and down between costumes,
    it’ll look like it’s scuttling along the ground. Draw whatever you would like!
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以让你的角色看起来像一条蛇（蛇就像字母S）或者一个奇怪的虫子。如果你让你的虫子在服装之间略微上下移动，它看起来就像是在地面上爬行。画任何你想画的东西吧！
- en: Creating a Mirror Image of a Costume
  id: totrans-164
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建服装的镜像
- en: So far, you’ve made a bunch of right-facing animations. Now let’s flip them
    around to create the left-facing versions. That way, your character can face the
    direction it’s walking or jumping in.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经制作了许多右面朝向的动画。现在让我们将它们翻转过来，制作左面朝向的版本。这样，你的角色就可以朝着它行走或跳跃的方向面对。
- en: '![Image](Images/f121-01.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f121-01.jpg)'
- en: '*Using the Select tool to mirror*'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用选择工具进行镜像*'
- en: Making left-facing costumes is easy. Duplicate a costume, and then draw a box
    around it using the **Select** tool. In the upper right of the drawing window,
    click the **Flip Horizontal** button next to the Flip Vertical button to flip
    the costume. Then make sure it’s centered on the `+` again.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 制作左面朝向的服装很简单。复制一个服装，然后使用**选择**工具在它周围画一个框。在绘图窗口的右上角，点击**水平翻转**按钮（在**垂直翻转**按钮旁边），翻转服装。然后确保它重新对准`+`。
- en: Make a left- and right-facing version of each of your costumes.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个服装制作一个左面朝向和右面朝向的版本。
- en: Coding the Animations
  id: totrans-170
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写动画代码
- en: Animation can be a bit intimidating to code, but it’s very simple.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 动画编码可能会让人有些胆怯，但其实非常简单。
- en: '![Image](Images/f122-01.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f122-01.jpg)'
- en: '*Animation code*'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '*动画代码*'
- en: The first stack of code makes sure the `Explorer` sprite is always at the same
    place as the `Hitbox` sprite. As the `Hitbox` moves around the screen, so will
    our animations. The second code stack chooses the appropriate costume.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 第一段代码确保`Explorer`角色始终与`Hitbox`角色在同一位置。随着`Hitbox`在屏幕上移动，动画也会随之移动。第二段代码选择了合适的服装。
- en: The last thing to do is make sure the `Hitbox` is invisible now that we have
    an animated character to display. We can use the `ghost` effect for that.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 最后需要做的是确保`Hitbox`现在是不可见的，因为我们已经有了一个动画角色来显示。我们可以使用`ghost`效果来实现这一点。
- en: '![Image](Images/f123-01.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f123-01.jpg)'
- en: '*Set ghost effect to 100*'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '*将幽灵效果设置为100*'
- en: This block sets the `ghost` effect to `100`, which means 100 percent invisible.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码块将`ghost`效果设置为`100`，意味着完全透明。
- en: '![Image](Images/f123-02.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f123-02.jpg)'
- en: '*Now the player character is animated!*'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '*现在玩家角色已经有动画了！*'
- en: You should now see just the character, not the red rectangle that handles all
    the numbers.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该只看到角色，而不是处理所有数字的红色矩形。
- en: Additional Challenges
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 附加挑战
- en: 'Here are some additional touches that can make your game more complete:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些可以让你的游戏更加完整的额外细节：
- en: '**Intro:** When the game starts, the player sees the game title before their
    character appears. Can you make a title screen for your game? You’ll need to hide
    all the game sprites until the title screen ends.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '**开头：** 当游戏开始时，玩家会看到游戏标题，直到角色出现之前。你能为你的游戏制作一个标题画面吗？你需要在标题画面结束之前隐藏所有游戏精灵。'
- en: '**Ending:** What happens when the player collects all the batteries? How does
    the story end? Create an ending to the game.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**结尾：** 当玩家收集到所有电池时会发生什么？故事是如何结束的？为游戏创作一个结局。'
- en: '**Sound effects:** You might want to include some sound effects for important
    actions, like jumping or collecting a battery. You can use Scratch’s built-in
    sound library, or you can make your own sounds. You’ll learn more about sound
    effects in the next chapter!'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**音效：** 你可能希望为一些重要的动作添加音效，例如跳跃或收集电池。你可以使用Scratch的内置音效库，或者自己制作音效。在下一章中，你将学到更多关于音效的知识！'
- en: What You Learned
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你学到的知识
- en: In this chapter, you learned about level design and what you can do with it.
    Level design is about storytelling, and a good storyteller thinks of each level
    as a set of challenges, an imaginary place, and a picture on a screen all at the
    same time. You also learned how to animate your character, using motion to communicate
    important things about a character, like where they’re going and how they’re getting
    there.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你了解了关卡设计以及你可以如何利用它。关卡设计关乎讲故事，而一个好的讲故事者会将每个关卡看作是一个挑战的集合、一个虚拟的地方，以及屏幕上的一幅画面。这一章你还学会了如何为你的角色制作动画，通过动作传达角色的重要信息，比如他们要去哪里，以及如何到达那里。
- en: In [Chapter 5](ch05.xhtml#ch05), we’ll talk about how to add sound and music
    to your games. It’ll be a lot of fun!
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](ch05.xhtml#ch05)中，我们将讨论如何为你的游戏添加音效和音乐。这将会非常有趣！
