["```\nsomefunction(pos1, pos2; keyword1=keyword1, keyword2=keyword2)\n```", "```\nsomefunction(pos1, pos2; keyword1, struct.keyword2)\n```", "```\n   julia> function addthree(a, b, c)\n              return a + b + c\n          end;\n\n   julia> addthree(1, 2, 3)\n   6\n\n   julia> v3 = [1, 2, 3];\n\n   julia> addthree(v3)\n➊ ERROR: MethodError: no method matching addthree(::Vector{Int64})\n```", "```\njulia> addthree(v3...)\n6\n```", "```\n   julia> function addthreeWithCoefficients(a, b, c; f1=1, f2=1, f3=1)\n              return f1 * a + f2 * b + f3 * c\n          end;\n\n   julia> coeffs = (f1=100, f2=10)\n   (f1 = 100, f2 = 10)\n\n➊ julia> addthreeWithCoefficients(1, 2, 3; coeffs...)\n   123\n```", "```\njulia> csd = Dict(:f1=>100, :f2=>10);\n\njulia> addthreeWithCoefficients(1, 2, 3; csd...)\n123\n```", "```\njulia> function addonlythreeWithNote(a, b, c, more...)\n           if length(more) > 0\n               println(\"Ignoring $(length(more)) additional arguments.\")\n           end\n           return a + b + c\n       end;\n\njulia> addonlythreeWithNote(1, 2, 3, 99, 100, 101)\nIgnoring 3 additional arguments.\n6\n```", "```\njulia> function examine_string(s; checks...)\n           if :palindrome in keys(checks)\n               if s == reverse(s)\n                   println(\"\\\"$s\\\" is a palindrome.\")\n               end\n           end\n           if :onlyascii in keys(checks)\n               if isascii(s)\n                   println(\"\\\"$s\\\" contains only ASCII characters.\")\n               else\n                   println(\"\\\"$s\\\" contains non-ASCII characters.\")\n               end\n           end\n       end;\n\n➊ julia> examine_string(\"step on no pets\"; kw1=17, palindrome=1, onlyascii=1)\n\"step on no pets\" is a palindrome.\n\"step on no pets\" contains only ASCII characters.\n\njulia> examine_string(\"step on no pets\"; palindrome=1)\n\"step on no pets\" is a palindrome.\n```", "```\njulia> kws = Dict(:palindrome => 1, :anyOtherKeyword => 17)\njulia> examine_string(\"step on no pets\"; kws...)\n\"step on no pets\" is a palindrome.\n```", "```\njulia> x, y = (3, 4);\n\njulia> x\n3\n\njulia> y\n4\n```", "```\njulia> (; url, title) = google\nWebsite(\"https://google.com\", \"google\")\n\njulia> url\n\"https://google.com\"\n\njulia> title\n\"google\"\n```", "```\njulia> url, title = google.url, google.title\n```", "```\n   julia> struct Fco\n              f1\n              f2\n              f3\n          end\n\n   julia> someco = Fco(100, 10, 1)\n   Fco(100, 10, 1)\n\n➊ julia> function addthreeWithCoefficients(a, b, c, (; f1, f2, f3))\n              return f1 * a + f2 * b + f3 * c\n          end;\n\n   julia> addthreeWithCoefficients(1, 2, 3, someco)\n   123\n```", "```\njulia> +(1, 2, 3)\n6\n\njulia> *(8, 2)\n16\n```", "```\njulia> function ⊟(a, b)\n           return sqrt((b[1] - a[1])^2 +\n                       (b[2] - a[2])^2)\n       end;\n```", "```\njulia> v1 = [0, 1];\n\njulia> v2 = [1, 0];\n\njulia> v1 ⊟ v2\n1.4142135623730951\n```", "```\njulia> 3 .* v1 ⊟ 4 .* v2\n5.0\n```", "```\njulia> v1a = [v1, v1, v1]\n3-element Vector{Vector{Int64}}:\n [0, 1]\n [0, 1]\n [0, 1]\n\njulia> v2a = [v1, v2, [0, 0]]\n3-element Vector{Vector{Int64}}:\n [0, 1]\n [1, 0]\n [0, 0]\n\njulia> v2a .⊟ v1a\n3-element Vector{Float64}:\n 0.0\n 1.4142135623730951\n 1.0\n```", "```\njulia> double(x) = 2x\ndouble (generic function with 1 method)\n\njulia> map(double, [2 3; 4 5])\n2×2 Matrix{Int64}:\n 4   6\n 8  10\n```", "```\njulia> map(+, [2 3], [4 5], [6 7])\n1×2 Matrix{Int64}:\n 12  15\n```", "```\njulia> map(+, 20:10:40, [2 3; 4 5])\n3-element Vector{Int64}:\n 22\n 34\n 43\n\njulia> map(+, 20:10:90, [2 3; 4 5])\n4-element Vector{Int64}:\n 22\n 34\n 43\n 55\n```", "```\njulia> double.([2 3; 4 5])\n2×2 Matrix{Int64}:\n 4   6\n 8  10\n```", "```\njulia> [20 30] .+ [2 3; 4 5]\n2×2 Matrix{Int64}:\n 22  33\n 24  35\n```", "```\njulia> [20, 30] .+ [2 3; 4 5]\n2×2 Matrix{Int64}:\n 22  23\n 34  35\n```", "```\njulia> map(+, [20, 30], [2 3; 4 5])\n2-element Vector{Int64}:\n 22\n 34\n```", "```\njulia> filter(x -> x % 17 == 0, 1:100)\n5-element Vector{Int64}:\n 17\n 34\n 51\n 68\n 85\n```", "```\njulia> filter(isascii, \"François\")\n\"Franois\"\n```", "```\njulia> q(a, b) = a/b\nq (generic function with 1 method)\n\njulia> reduce(q, 1:3)\n0.16666666666666666\n\njulia> (1/2)/3\n0.16666666666666666\n```", "```\njulia> foldl(q, 1:3)\n0.16666666666666666\n\njulia> foldr(q, 1:3)\n1.5\n```", "```\njulia> reduce(+, [1 2; 10 20]; dims=2)\n2×1 Matrix{Int64}:\n  3\n 30\n\njulia> reduce(+, [1 2; 10 20]; dims=1)\n1×2 Matrix{Int64}:\n 11  22\n```", "```\njulia> reduce(+, []; init=0)\n0\n```", "```\njulia> prod(1:7)\n5040\n\njulia> factorial(7)\n5040\n```", "```\njulia> maximum(sin.(1:.01:2π))\n0.9999996829318346\n\njulia> minimum(sin.(1:.01:2π))\n-0.999997146387718\n```", "```\njulia> any(iseven, 3:2:11)\nfalse\n\njulia> all(isodd, 3:2:11)\ntrue\n```", "```\njulia> mapreduce(x -> x^2, +, 1:100)\n338350\n\njulia> reduce(+, map(x -> x^2, 1:100))\n338350\n```", "```\njulia> foldl(q, 3:-1:0)\nInf\n\njulia> foldl(3:-1:0) do x, y\n           if y == 0\n               return x\n           else\n               return x/y\n           end\n       end\n1.5\n```", "```\njulia> ex = quote\n           a = 3\n           a + 2\n       end;\n\njulia> typeof(ex)\nExpr\n\njulia> a\nERROR: UndefVarError: a not defined\n\njulia> eval(ex)\n5\n\njulia> a\n3\n```", "```\njulia> w = 3\n3\n\njulia> ex = :(w * 5)\n:(w * 5)\n\njulia> ey = :($w * 5)\n:(3 * 5)\n```", "```\njulia> eval(ex)\n15\n\njulia> eval(ey)\n15\n\njulia> w = 4\n4\n\njulia> eval(ex)\n20\n\njulia> eval(ey)\n15\n```", "```\nmkvar(s, v) = eval(:($(Symbol(s)) = $v))\n```", "```\njulia> mkvar(\"Arthur\", 42);\n\njulia> Arthur\n42\n```", "```\n   julia> macro mkvarmacro(s, v)\n              ss = Symbol(s)\n           ➊ return esc(:($ss = $v))\n          end\n   @mkvarmacro (macro with 1 method)\n\n➋ julia> @mkvarmacro \"color\" 17\n   17\n\n   julia> color\n   17\n```", "```\nmacro during(condition, body)\n    return quote\n        while $condition\n         ➊ $(esc(body))\n        end\n    end\nend\n```", "```\njulia> i = 0\n0\n\njulia> @during i < 10 (println(i^2); i+=1)\n0\n1\n4\n9\n16\n25\n36\n49\n64\n81\n\njulia> i\n10\n```", "```\nmacro until(condition, body)\n    return quote\n        while !$condition\n            $(esc(body))\n        end\n    end\nend\n```", "```\njulia> i = 0\n0\n\njulia> @until i == 11 (println(i^3); i+=1)\n0\n1\n8\n27\n64\n125\n216\n343\n512\n729\n1000\n```", "```\njulia> r = 1:10\n\njulia> [r (@. exp(r) > r^4) (exp.(r) .> r.^4)]\n10×2 BitMatrix:\n  1  1  1\n  2  0  0\n  3  0  0\n  4  0  0\n  5  0  0\n  6  0  0\n  7  0  0\n  8  0  0\n  9  1  1\n 10  1  1\n```", "```\njulia> sum((1:10).^2)\n385\n```", "```\njulia> @. $sum((1:10)^2)\n385\n```", "```\njulia> \"hello\" |> uppercase |> reverse\n\"OLLEH\"\n```", "```\njulia> @chain \"hello\" begin\n           uppercase\n           reverse\n        ➊ occursin(\"OL\", _)\n       end\ntrue\n```", "```\njulia> @time sum((1:1e8).^2)\n  0.661141 seconds (2 allocations: 762.940 MiB, 1.01% gc time)\n3.333333383333333e23\n```", "```\nx = (1:1e6).^2; s = 0\n@inbounds for i in 1:2:1000\n    s += x[i]\nend\n```", "```\njulia> const d = 1.0045338347428372e6\n1.0045338347428372e6\n\njulia> @time sum(i/d for i in 1:1e9)\n  5.248617 seconds\n4.9774331456739935e11\n\njulia> @time @fastmath sum(i/d for i in 1:1e9)\n  3.856526 seconds\n4.977433145673994e11\n```", "```\njulia> using Printf\n\njulia> @printf \"10! is about %.2e and √2 is approximately %.4f\" factorial(10) √2\n10! is about 3.63e+06 and √2 is approximately 1.4142\n```", "```\njulia> 1 + \"1\"\nERROR: MethodError: no method matching +(::Int64, ::String)\n\njulia> [1, 2, 3][4]\nERROR: BoundsError:\n  attempt to access 3-element Vector{Int64} at index [4]\n\njulia> notdefined\nERROR: UndefVarError: notdefined not defined\n\njulia> 'abc'\nERROR: syntax: character literal contains multiple characters\n\njulia> [1 2] * [3 4 5] ➊\nERROR: DimensionMismatch:\n  matrix A has dimensions (1,2), matrix B has dimensions (1,3)\n\njulia> log(-1)\nERROR: DomainError with -1.0:\nlog will only return a complex result if called with a complex argument.\nTry log(Complex(x)).\n\njulia> 1 ÷ 0 ➋\nERROR: DivideError: integer division error\n\njulia> Int(2.1) ➌\nERROR: InexactError: Int64(2.1)\n\njulia> Dict([\"a\" => 1, \"b\" => 2])[\"c\"]\nERROR: KeyError: key \"c\" not found\n\njulia> factorial(55)\nERROR: OverflowError: 55 is too large to look up in the table;\nconsider using `factorial(big(55))` instead ➍\n\njulia> \"François\"[6]\nERROR: StringIndexError: invalid index [6], valid nearby indices [5]=>'ç', [7]=>'o'\n```", "```\nfunction a(n)\n    b(n)\nend\n\nfunction b(n)\n    n -= 1\n    c(n)\nend\n\nfunction c(n)\n    n -= 1\n    d(n)\nend\n\nfunction d(n)\n    n -= 1\n    e(n)\nend\n\nfunction e(n)\n    return log(n)\nend\n```", "```\njulia> a(5)\n0.6931471805599453\n\njulia> a(2)\nERROR: DomainError with -1.0:\nlog will only return a complex result if called with a\ncomplex argument. Try log(Complex(x)).\nStacktrace:\n  [1] throw_complex_domainerror(f::Symbol, x::Float64)\n    @ Base.Math ./math.jl:33\n  [2] _log(x::Float64, base::Val{:e}, func::Symbol)\n    @ Base.Math ./special/log.jl:292\n  [3] log\n    @ ./special/log.jl:257 [inlined]\n  [4] log\n    @ ./math.jl:1350 [inlined]\n  [5] e\n    @ ./REPL[215]:2 [inlined]\n  [6] d\n    @ ./REPL[214]:3 [inlined]\n  [7] c\n    @ ./REPL[213]:3 [inlined]\n  [8] b\n    @ ./REPL[212]:3 [inlined]\n  [9] a(n::Int64)\n    @ Main ./REPL[211]:2\n [10] top-level scope\n    @ REPL[217]:1\n```", "```\nfunction friendly_log(n)\n    try\n        return log(n)\n    catch oops\n        if oops isa DomainError\n            @warn \"you may have supplied a negative number: $n\"\n         ➊ @info \"Trying with $(-n).\"\n            log(-n)\n        elseif oops isa MethodError\n         ➋ @error \"please supply a positive number.\"\n        end\n    end\nend\n```", "```\njulia> function call_fl(n)\n           friendly_log(n)\n       end\n\njulia> call_fl(-3)\n Warning: you may have supplied a negative number: -3\n @ Main REPL[222]:6\n[ Info: Trying with 3.\n1.0986122886681098\n```", "```\nfunction finite_log(n)\n    if n == 0\n        throw(DomainError(n, \"please supply a positive argument; log(0) = -Inf.\"))\n    end\n    return log(n)\nend\n```", "```\njulia> finite_log(2)\n0.6931471805599453\n\njulia> finite_log(0)\nERROR: DomainError with 0:\nplease supply a positive argument; log(0) = -Inf.\nStacktrace:\n [1] finite_log(n::Int64)\n   @ Main ./REPL[230]:3\n [2] top-level scope\n   @ REPL[234]:1\n\njulia> log(0)\n-Inf\n```", "```\nhelp?> DomainError\nsearch: DomainError\n\n  DomainError(val)\n  DomainError(val, msg)\n\n  The argument val to a function or constructor is outside the valid domain.\n```", "```\nfunction a(n)\n    try\n        b(n)\n    catch oops\n        if oops[1] == 0\n            @warn \"$(oops[2]) Attempted to call log(0) = Inf.\"\n        else\n            @error \"$(oops[2]) Attempted to call log($(oops[1])).\"\n        end\n    end\nend\n\nfunction b(n)\n    n -= 1\n    c(n)\nend\n\nfunction c(n)\n    n -= 1\n    d(n)\nend\n\nfunction d(n)\n    n -= 1\n    e(n)\nend\n\nfunction e(n)\n    if n < 0\n     ➊ throw((n, \"Got a negative number.\"))\n    elseif n == 0\n        throw((0, \"Got 0.\"))\n    end\n    return log(n)\nend\n```", "```\njulia> a(5)\n0.6931471805599453\n\njulia> a(3)\n Warning: Got 0\\. Attempted to call log(0) = Inf.\n @ Main REPL[1]:6\n\njulia> a(2)\n Error: Got a negative number. Attempted to call log(-1).\n @ Main REPL[1]:8\n```", "```\nfunction a(n)\n    try\n        b(n)\n    catch oops\n        if oops[1] == 0\n            @warn \"$(oops[2]) Attempted to call log(0) = Inf.\"\n        else\n            @error \"$(oops[2]) Attempted to call log($(oops[1])).\"\n        end\n    finally\n        @info \"Calculation completed with input n = $n.\"\n    end\nend\n```", "```\njulia> a(5)\n[ Info: Calculation completed with input n = 5.\n0.6931471805599453\n\njulia> a(2)\n Error: Got a negative number. Attempted to call log(-1).\n @ Main REPL[11]:8\n[ Info: Calculation completed with input n = 2.\n```"]