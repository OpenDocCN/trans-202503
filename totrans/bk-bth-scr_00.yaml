- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: INTRODUCTION
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/chapter.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A book about bat files? Why? Didn’t the Aztecs use Batch? Isn’t it the Betamax
    of scripting languages? You should be writing a book about a newer, sexier coding
    language instead of a Model T repair manual.
  prefs: []
  type: TYPE_NORMAL
- en: I wish that I could dismiss out of hand such protestations as simply the negativism
    of nattering nabobs, but this is a sentiment I feel compelled to address. Batch
    isn’t new, and the lack of some functionality is mystifying by today’s standards,
    but it’s still an immensely useful language that isn’t going away anytime soon,
    especially since it’s being packaged with the operating system installed on every
    Windows computer. While Batch is one scripting language among many, there are
    still many lines of Batch code being supported by large and small companies, and
    some tasks truly lend themselves to bat files more than any other language. And
    as for that lacking functionality—booleans, arrays, hash tables, stacks, even
    object-oriented design, and more—I’ll show you how to build it yourselves by the
    end of this book.
  prefs: []
  type: TYPE_NORMAL
- en: But the most immediate reason for me personally to write a book about Batch
    scripting is that after two decades of writing bat files for personal and professional
    use, I believe that I’ve gotten to a place where I’ve learned enough about the
    topic to share my experiences and insights with a larger community. For many moons,
    I coded at a company that ran large-scale processes on Windows servers, all of
    them driven by bat files. Others might have gone with a more modern scripting
    language, but a coder who preceded me had mastered the art of bat files to such
    an extent that an alternative to Batch was never seriously considered. I played
    the understudy role of Robin until his retirement, when I was unofficially elevated
    to Batman.
  prefs: []
  type: TYPE_NORMAL
- en: Writing Batch code is still an important skill for any coder and even noncoders,
    but much of the existing documentation is sparse, scattered, and sometimes inaccurate.
    More so than in other languages, a great deal of experience and experimentation
    is required to gain proficiency, and I have a unique perspective to share. That’s
    why I wrote this book.
  prefs: []
  type: TYPE_NORMAL
- en: This Book’s Audience
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book is not for beginners, nor is it for experts; it’s for *both*. I actually
    hope to reach three groups of people. The first is coders who write, maintain,
    or otherwise work with bat files on a near daily basis. The second is all other
    coders who work on a Windows machine, and the third is noncoders who also work
    on a Windows computer.
  prefs: []
  type: TYPE_NORMAL
- en: The first group, those working closely with Batch, are on the list for obvious
    reasons. This book is the culmination of two decades of my intense and immersive
    work in Batch scripting. By the end of this book, you’ll have explored several
    complex concepts, such as creating commands, data structures, operators, and even
    a coding paradigm that weren’t envisioned by the language’s creators. I’ll work
    steadily up to that complexity, but I hope that in these pages you’ll find everything
    you need to master the language and the tools to further explore what little isn’t
    here.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re in the second group, you likely don’t maintain thousands of lines
    of Batch code, but on a Windows computer you write code in other languages, and
    you should be at least moderately versed in Batch. This skill allows you to perform
    some common and repetitive tasks by running a simple (or maybe not so simple)
    bat file. Animating code written in other languages has its challenges, one of
    which is that your machine’s environment is different from the eventual production
    environment where the program will execute. To this end, I’ll show you how to
    mimic or simulate another computer’s environment with a few lines of Batch code.
    By the end of this book, I’m sure that you’ll find that a bat file is a solution
    for many issues.
  prefs: []
  type: TYPE_NORMAL
- en: Even noncoders, the final group, can benefit from some Batch code to minimize
    repetitive tasks such as moving files, merging reports, or connecting to network
    drives to make Windows Explorer easier to use. Since coding isn’t in your job
    description, your employer is unlikely to load the infrastructure for other coding
    languages onto your computer so that you can perform relatively simple coding
    tasks, but everything you need to write and execute a bat file is already on your
    workstation. The skill set needed to write a bat file is the ability to create
    a text file, rename it, and type a few lines into it. And if you can double-click
    a file, you can run a bat file. That’s all you’ll need (other than this book).
  prefs: []
  type: TYPE_NORMAL
- en: How to Read This Book
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every author, regardless of the genre, envisions their readers sitting by a
    fire, sipping sherry (or for me a good barleywine, not too sweet), hanging on
    every word, reading, processing, and reading some more until the book is complete.
    Well ... this is a technical book, so a significant subset of my readers will
    be coders sitting in front of a computer trying to figure out why their damn bat
    file isn’t doing what they want it to do. I’ve been there and fully appreciate
    the dilemma, and to aid you, I’ve organized this book with headings, subheadings,
    a detailed table of contents, and an index. You can find the section and page
    that will answer your question, and you can jump right to it, but that isn’t the
    ideal way to read this or any book.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve structured this book into short and concise chapters. Even if you’re trying
    to solve a particular problem, I recommend reading the pertinent chapter in its
    entirety, because each one is a bit like a lesson plan. (My day job is coding,
    but I am trained as a mathematician and have spent more than two decades teaching
    various math classes at Manchester Community College in Connecticut.)
  prefs: []
  type: TYPE_NORMAL
- en: A typical lesson starts with the basic concept, followed by some simple examples.
    Then I delve into the complexity of the topic, show uses for the concept, and
    even explain typical stumbling blocks to avoid. Not every lesson (or chapter)
    follows that arc, but many do. If you have a question about, say, how to copy
    a file, I recommend reading [Chapter 7](chapter7.xhtml) from beginning to end.
    Skipping to the middle of the chapter is analogous to coming into class 20 minutes
    late.
  prefs: []
  type: TYPE_NORMAL
- en: I also recommend executing on your own some of the coding examples that I present.
    Most of the code snippets are quite short and easy to type in, and you can grab
    the longer ones from the online version of this book. Better yet, modify the code,
    explore the results, and make it your own.
  prefs: []
  type: TYPE_NORMAL
- en: How This Book Is Structured
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Batch is unique in that one single command, the for command, predominates all
    others to a massive extent, and I’ve organized this book into three parts, centered
    around that all-important command. [Part I](part1.xhtml) is titled “The Essentials,”
    and it deals with the topics you’ll need leading up to the discussion of the for
    command. The first part includes these chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 1](chapter1.xhtml): Batch**    This chapter introduces you to the
    Batch scripting language as you build what may be your first-ever bat file. I
    include editing tips, and since Batch is an interpreted language, I discuss the
    role and importance of the interpreter.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 2](chapter2.xhtml): Variables and Values**    This chapter is about
    defining variables and interrogating their values either for display to the console
    or for any other use.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 3](chapter3.xhtml): Scope and Delayed Expansion**    After you learn
    how to define where variables can be accessed in a bat file, I’ll introduce one
    of the most intriguing features of Batch, delayed expansion, which impacts how
    you resolve variables.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 4](chapter4.xhtml): Conditional Execution**    The if...else construct
    is a basic feature of most languages, and Batch is no different. You’ll learn
    how to execute or not execute certain bits of code based on various conditional
    clauses.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 5](chapter5.xhtml): String and Boolean Data Types**    This chapter
    tackles the tasks of building and concatenating strings, extracting a substring
    from a larger string, and replacing certain text in a string. I also introduce
    the first of many tools not intrinsic to Batch that we’ll build, namely, booleans
    or variables that evaluate to either true or false.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 6](chapter6.xhtml): Integer and Float Data Types**    You’ll learn
    all the intricacies of adding, subtracting, multiplying, and dividing integers.
    This chapter also details modulo division as well as octal and hexadecimal arithmetic.
    I then delve into another data type not intrinsic to Batch: floating-point numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 7](chapter7.xhtml): Working with Files**    This chapter handles
    many of the tasks concerning files, such as copying, moving, deleting, and renaming
    them, and even creating an empty file.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 8](chapter8.xhtml): Executing Compiled Programs**    This chapter
    explores how to call a program with and without a defined path and, in particular,
    how the interpreter finds your program when you don’t provide a path.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 9](chapter9.xhtml): Labels and Nonsequential Execution**    This
    chapter introduces labels and the role they play in allowing you to direct the
    code’s execution to prior or later commands in a bat file, sometimes even initiating
    a loop.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 10](chapter10.xhtml): Calling Routines and Bat Files**    Expanding
    on the previous chapter, you’ll learn all that’s involved in creating callable
    routines within a bat file and how to invoke one bat file from another.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 11](chapter11.xhtml): Parameters and Arguments**    Invoking other
    code is often of little use if you can’t pass arguments to the called code and
    it can’t pass parameters back to you. This chapter delves into all the intricacies
    of the process, even unearthing the hidden parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 12](chapter12.xhtml): Outputs, Redirection, and Piping**    After
    differentiating between outputs created by the coder and the interpreter, I discuss
    how to redirect both to either the console or a file, which leads nicely to the
    technique of piping the output of one command into another and its uses.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 13](chapter13.xhtml): Working with Directories**    This chapter
    details how to create and delete directories and how to retrieve a great deal
    of information about a directory and its contents. I also demonstrate techniques
    for mapping local and network directories to drive letters.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 14](chapter14.xhtml): Escaping**    If you want to use a certain
    character in a string, you’ll run into issues if it’s a special character having
    some defined function in Batch. This chapter details the sometimes surprisingly
    involved solutions to that problem.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 15](chapter15.xhtml): Interactive Batch**    In this chapter you’ll
    build a fully functional Batch user interface that accepts freeform text from
    the console and allows the user to select one item from a list, among other features.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 16](chapter16.xhtml): Code Blocks**    Code blocks are more than
    just blocks of code. This chapter explores how and why variables in a code block
    can possess two distinct values. I’ll even introduce the naked code block and
    explain its significance.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Part II](part2.xhtml) is simply titled “The for Command,” and as its name
    more than suggests, it explores the aforementioned for command, which opens up
    a large batch (pun intended) of functionality. You’ll find these topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 17](chapter17.xhtml): Fundamentals of the for Command**    This
    chapter details the functionality of the for command without introducing any of
    its options, which is still highly impressive. It creates loops processing any
    number of input files or text strings, and with the use of modifiers, you’ll be
    able to determine almost everything about a file, other than its contents.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 18](chapter18.xhtml): Directories, Recursion, and Iterative Loops**    This
    chapter explores some options of the for command that allow for even more functionality.
    With one option, the command enumerates through a list of directories instead
    of filenames. With another, you can recursively process through directories and
    subdirectories, for instance, searching a folder and all of its subfolders for
    a file fitting a mask. Another option turns the command into an iterative loop,
    incrementing or decrementing an index with every pass.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 19](chapter19.xhtml): Reading Files and Other Inputs**    One last
    option turbocharges the for command, allowing you to read files. This chapter
    spares no details about how to parse or reformat each record of a file as you
    read it. In addition to a traditional file, the command can also read and process
    ordinary text, either hardcoded or from a variable, and it can even take the output
    of another command and read it as if it were a file.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 20](chapter20.xhtml): Advanced for Techniques**    This chapter
    delves into some impressive applications of the for command, such as embedding
    commands of another language (for example, PowerShell and Python) into your Batch
    script. I also discuss some techniques for working around limitations of the command.'
  prefs: []
  type: TYPE_NORMAL
- en: '“Advanced Topics” is the title of [Part III](part3.xhtml), which discusses
    various and varied topics, particularly everything that I couldn’t address before
    having the for command in my toolkit. Here’s the breakdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 21](chapter21.xhtml): Pseudo-Environment Variables**    This chapter
    details pseudo-environment variables, or special variables not always under your
    control. For instance, Batch has specific variables that hold the date, the time,
    and the return code of both Batch commands and called programs. I also explain
    how to safely set some of these variables and share the difference between bat
    and cmd files.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 22](chapter22.xhtml): Writing Reports**    This chapter explains
    how to format rudimentary text file reports with Batch, complete with header,
    detail, and trailer records.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 23](chapter23.xhtml): Recursion**    Some problems lend themselves
    nicely to the technique of recursion, which is the methodology where code invokes
    itself. This chapter demonstrates how to do this in Batch with detailed and interesting
    examples.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 24](chapter24.xhtml): Text String Searches**    This chapter explores
    many permutations of text string searches. Search files, variables, or hardcoded
    text for one or more words or literal strings. You’ll even find a couple of examples
    that use regular expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 25](chapter25.xhtml): Bat Files Building Bat Files**    This chapter
    details the intricacies involved in one bat file building a second fully functional
    bat file with dynamic and static code, while also contemplating what Archimedes
    would have done with Batch.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 26](chapter26.xhtml): Automatic Restarts and Multithreading**    After
    discussing how to automatically restart a failed process, this chapter uses a
    bat-file-building bat file to automatically kill and restart a hung process. I
    also discuss executing multiple threads or concurrencies at once under the direction
    of a single bat file.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 27](chapter27.xhtml): and/or Operators**    It might sound like
    a basic topic, but Batch possesses neither the and nor the or operator. This chapter
    builds techniques that mimic these operators for various situations.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 28](chapter28.xhtml): Compact Conditional Execution**    This chapter
    details a compact and funky construct that looks and acts a lot like the if...else
    construct. I discuss when best to use each after examining the subtle yet significant
    differences between the two.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 29](chapter29.xhtml): Arrays and Hash Tables**    These data structures
    aren’t intrinsic to Batch, but you’ll learn how to populate and retrieve data
    from both arrays and hash tables.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 30](chapter30.xhtml): Odds and Ends**    This chapter covers a few
    disparate topics: file attributes, bit manipulation, querying the Windows Registry,
    and sorting the contents of a file.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 31](chapter31.xhtml): Troubleshooting Tips and Testing Techniques**    I
    share many tips and techniques for developing and testing bat files that I’ve
    picked up over the years.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 32](chapter32.xhtml): Object-Oriented Design**    As crazy as it
    might sound, this chapter delivers the capstone of user-built bat file functionality.
    I explain the four pillars of object-oriented design before walking through a
    model that implements them as completely as possible. I hope that seasoned coders
    find this chapter informative and entertaining.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 33](chapter33.xhtml): Stacks, Queues, and Real-World Objects**    This
    chapter applies the just-learned principles of object-oriented design to build
    objects implementing the stack and queue data structures.'
  prefs: []
  type: TYPE_NORMAL
- en: For each chapter in the first and third parts, I set out to discuss a narrow
    topic or how to perform a specific task; I don’t set out to discuss a specific
    command, but I’ll often introduce one or more commands in a chapter. For each
    command, I’ll explain its function, show you its syntax, and detail its features
    that I find most useful.
  prefs: []
  type: TYPE_NORMAL
- en: It’s my goal that if you’re a noncoder, you’ll find at least the first two parts
    readable and informative. Read much further and you might just become a coder.
  prefs: []
  type: TYPE_NORMAL
- en: Other Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you’re looking for comprehensive and straightforward explanations of individual
    Batch commands, go no further than *[https://<wbr>ss64<wbr>.com<wbr>/nt<wbr>/](https://ss64.com/nt/)*.
    It’s a great and well-organized resource, and I referenced it extensively while
    writing this book. This book isn’t a list of commands; it’s a discussion about
    how to solve problems with those commands. I usually present the options of a
    command that I find to be the most useful, but you’ll find the full list at this
    site.
  prefs: []
  type: TYPE_NORMAL
- en: In the (hopefully) rare event that you can’t find a solution in these pages,
    the next best alternative is to tap into the online nerd community. Searching
    the web for your issue and “bat file” (in quotes) should produce several results.
    Of the many online forums, I’ve consistently found the best ideas and suggestions
    at *[https://<wbr>stackoverflow<wbr>.com](https://stackoverflow.com)*.
  prefs: []
  type: TYPE_NORMAL
- en: Notes on Style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most technical books and manuals are dry reads, and I’ve made every effort to
    buck that trend. First and foremost, I haven’t lost sight of the fact that my
    primary mission is to explain the technical material that I’m trying to impart.
    But, for instance, when discussing the sort command, I don’t want to sort the
    likes of Apples and Bananas; it’s much more fun to sort the captains of the starship
    *Enterprise* from *Star Trek*, or at least I think it is. I use a Mad Libs game
    when discussing parameters, passing different parts of speech as arguments. The
    chapter on interactive Batch shares bat (or maybe bad) jokes with the user.
  prefs: []
  type: TYPE_NORMAL
- en: Not every chapter lends itself to entertaining examples or a humorous anecdote,
    but I’ve made every effort to avoid files containing Record 1 as the first record
    or a string of pipe-delimited fields defined as field 1| field 2|field 3.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, I hope to elicit an audible chuckle; I’d be thrilled with a smirk and
    a nod; and I’d even be happy with an eyeroll and a groan. Boring be damned. I
    live by the mantra “It’s better to be uniquely bad than average.” (I wish that
    I could take credit for this quote, but many years ago our guide on a tour of
    Benziger Winery in Sonoma County, California, used it to describe the winery’s
    philosophy.)
  prefs: []
  type: TYPE_NORMAL
- en: Batveats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In my experience, Batch has many significant caveats in comparison to other
    languages. In the pages ahead, I’ll often follow seemingly definitive statements
    about syntax or usage with the word *except*. (For instance, “The ampersand character
    terminates a command, *except* when followed by a second ampersand or ...”) The
    English language is unique in that much of its syntax has caveats that just don’t
    exist in other languages—think “*i* before *e* except after *c*.” Maybe this makes
    Batch the quintessentially patriotic American language (or maybe British).
  prefs: []
  type: TYPE_NORMAL
- en: These *batch caveats* are so prevalent that I’ve taken to calling each one a
    *batveat* (pronounced bat-vē-ät, trademark pending). They can be very frustrating
    for unguided new users, but as these chapters unfold, I’ll point out the various
    batveats that have bitten me in the past so that you can ideally avoid the pain.
  prefs: []
  type: TYPE_NORMAL
- en: Woody Guthrie
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The epigraph that I chose for this book is a relatively well-known quote from
    the legendary artist Woody Guthrie, but I was hesitant to use it for fear of how
    it might be interpreted. The intent of the quote isn’t egotistical, it’s aspirational.
    Woody traveled the United States espousing economic justice while also preaching
    about the evils of racism and sexism. He didn’t do this with dry, boring speeches,
    but with a guitar and perceptive lyrics that still resonate long after his early
    death.
  prefs: []
  type: TYPE_NORMAL
- en: Woody Guthrie was trying to bend the arc of history in the direction of social
    justice, while I’m trying to make an esoteric programming language a little more
    attainable with prose that is informative, readable, and entertaining. It is my
    hope that I can contribute to the understanding of a complex topic, and I can
    only aspire to Woody’s sublime example.
  prefs: []
  type: TYPE_NORMAL
- en: For the Love of Batch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Never, never invite more than one Batch coder to a party. One is fine. If we’re
    there without a compatriot, we’ll talk about sports, politics, books, movies,
    and travel like anyone else. But when you put at least two of us together anywhere,
    you’ll hear things like “I recently found a new way to code an or operator in
    the conditional clause of an if command. Would you like me to share it with you?”
    We will kill your party.
  prefs: []
  type: TYPE_NORMAL
- en: The optimist will say that Batch is *esoteric*, while the pessimist will say
    it is *cryptic*. The truth is probably somewhere in between, and you’ll find both
    of these words often in this book. The syntax is distinct from most languages,
    and the lack of certain functionality makes for imaginative solutions to problems
    that would be uninteresting in other languages. The upshot is a couple of people
    sucking the oxygen out of your Super Bowl party with a discussion about different
    ways to construct a hash table.
  prefs: []
  type: TYPE_NORMAL
- en: I find these puzzles invigorating, and that’s a major reason why I enjoy scripting
    in Batch, while others may find it a chore. Sometimes I really enjoy coding in
    a language that makes the implementation of a stack a significant accomplishment.
    To briefly demonstrate just one challenge, the character for the at symbol (@)
    can be a variable name, and extracting the second-to-last character from its value
    requires the syntax %@:~-2,1%. That might look more like a curse word in a comic
    strip than code, and admittedly it does look esoteric, maybe even cryptic, but
    please don’t put this book down out of fear; I promise that it will make perfect
    sense after just a few chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Being a Batch expert in a room full of coders only moderately versed in the
    discipline can feel like being a Sumerian priest—one out of a select group of
    people who can interpret a script and impart its meaning and wisdom to others.
    But I hold my position not due to a random birthright, and I do not guard the
    ability to decipher this cuneiform from others out of self-interest. With this
    book I hope to make high priests and priestesses out of all who want to learn
    this not-so-ancient script. In the pages to follow, I’ll be more than honest concerning
    issues and frustrations that I’ve found with the language, but I do love coding
    bat files, and by the time you’ve finished reading this book, I hope that I’ve
    made a convert out of you.
  prefs: []
  type: TYPE_NORMAL
