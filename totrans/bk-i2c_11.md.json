["```\n#include <Wire.h>\n```", "```\nWire.requestFrom( `address`, `size` )\nWire.requestFrom( `address`, `size`, `stopCond` )\n```", "```\nwhile( Wire.available() )\n{ \n    char c = Wire.read(); // Read byte from buffer\n\n    // Do something with the byte just read.\n}\n```", "```\nWire.beginTransmission(address)\n```", "```\nWire.write( `value` ) \nWire.write( `string` ) \nWire.write( `data`, `length` )\n```", "```\nWire.endTransmission()\nWire.endTransmission( stopCond )\n```", "```\nWire.onReceive( inHandler )\nWire.onRequest( outHandler )\n```", "```\n// Listing8-1.ino\n//\n// A simple program that demonstrates I2C\n// programming on the Arduino platform.\n\n#include <Wire.h>\n\n// I2C address of the SparkFun MCP4725 I2C-based\n// digital-to-analog converter.\n\n#define MCP4725_ADDR 0x60\n\nvoid setup( void )\n{\n    Serial.begin( 9600 );\n    delay( 1000 );\n    Serial.println( \"Test writing MCP4725 DAC\" );\n    Wire.begin(); // Initialize I2C library\n}\n\nvoid loop( void )\n{\n    // Send the rising edge of a triangle wave:\n\n    for( int16_t dacOut = 0; dacOut < 0xfff; ++dacOut )\n    {\n        // Transmit the address byte (and a zero R/W bit):\n\n      ❶ Wire.beginTransmission( MCP4725_ADDR );\n\n        // Transmit the 12-bit DAC value (HO 4 bits\n        // first, LO 8 bits second) along with a 4-bit\n        // Fast Mode Write command (00 in the HO 2 bits\n        // of the first byte):\n\n      ❷ Wire.write( (dacOut >> 8) & 0xf );\n        Wire.write( dacOut & 0xff );\n\n        // Send the stop condition onto the I2C bus:\n\n      ❸ Wire.endTransmission( true );\n\n        // Uncomment this delay to slow things down\n        // so it can be observed on a multimeter:\n        // delay( 5 );\n    }\n\n    // Send the falling edge of the triangle wave:\n\n    for( int16_t dacOut = 0xffe; dacOut > 0; --dacOut )\n    {\n        // See comments in previous loop.\n\n        Wire.beginTransmission( MCP4725_ADDR );   \n        Wire.write( (dacOut >> 8) & 0xf );\n        Wire.write( dacOut & 0xff );      \n        Wire.endTransmission( true );     \n\n        // Uncomment this delay to slow things down\n        // so it can be observed on a multimeter:\n        // delay( 5 );\n    }\n}\n```", "```\n// Listing8-2.ino\n//\n// This is a simple program that demonstrates \n// I2C programming on the Arduino platform.\n//\n// This program reads the last written DAC value\n// and EEPROM settings from the MDP4725\\. It was\n// written and tested on a Teensy 3.2, and it also\n// runs on an Arduino Uno.\n\n#include <Wire.h>\n\n// I2C address of the SparkFun MCP4725 I2C-based\n// digital-to-analog converter.\n\n#define MCP4725_ADDR 0x60\n\n#define bytesToRead (5)\nvoid setup( void )\n{\n    int     i = 0;\n    int     DACvalue;\n    int     EEPROMvalue;\n    byte    input[bytesToRead];\n\n    Serial.begin( 9600 );\n    delay( 1000 );\n    Serial.println( \"Test reading MCP4725 DAC\" );\n Wire.begin();  // Initialize I2C library\n\n    Wire.requestFrom( MCP4725_ADDR, bytesToRead );\n    while( Wire.available() )\n    {\n        if( i < bytesToRead )\n        {\n            input[ i++ ] = Wire.read();\n        }\n    }\n\n    // Status byte is the first one received:\n\n    Serial.print( \"Status: \" );\n    Serial.println( input[0], 16 );\n\n    // The previously written DAC value is in the\n    // HO 12 bits of the next two bytes:\n\n    DACvalue = (input[1] << 4) | ((input[2] & 0xff)  4);\n    Serial.print( \"Previous DAC value: \" );\n    Serial.println( DACvalue, 16 );\n\n    // The last two bytes contain EEPROM data:\n\n    EEPROMvalue = (input[3] << 8) | input[4];\n    Serial.print( \"EEPROM value: \" );\n    Serial.println( EEPROMvalue, 16 );\n\n    while( 1 ); // Stop\n}\n\nvoid loop( void )\n{\n    // Never executes.\n}\n```", "```\nTest reading MCP4725 DAC\nStatus: C0\nPrevious DAC value: 9B\nEEPROM value: 800\n```", "```\n// Listing8-3.ino\n//\n// This program demonstrates using an\n// Arduino as an I2C peripheral.\n//\n// This code runs on a Teensy 3.2\n// module. A14 on the Teensy 3.2 is\n// a true 12-bit, 3.3-V DAC. This program\n// turns the Teensy 3.2 into a simple\n// version of the MCP4725 DAC. It reads\n// inputs from the I2C line (corresponding\n// to an MCP4725 fast write operation)\n// and writes the 12-bit data to the\n// Teensy 3.2's hardware DAC on pin A14.\n\n#include <Wire.h>\n\n// I2C address of the SparkFun MCP4725 I2C-based\n// digital-to-analog converter.\n\n#define MCP4725_ADDR 0x60\n\n// Interrupt handler that the system\n// automatically calls when data arrives\n// on the I2C lines.\n\nvoid rcvISR( int numBytes )\n{\n    byte LObyte;\n    byte HObyte;\n    word DACvalue;\n\n // Expecting 2 bytes to come\n    // from the controller device.\n\n    if( numBytes == 2 && Wire.available() )\n    {\n        HObyte = Wire.read();\n        if( Wire.available() )\n        {\n            LObyte = Wire.read();\n\n            DACvalue = ((HObyte << 8) | LObyte) & 0xfff;\n            analogWrite( A14, DACvalue );\n        }\n    }\n}\n\n// Usual Arduino initialization function:\n\nvoid setup( void )\n{\n    Serial.begin( 9600 );\n    delay( 1000 );\n    Serial.println( \"I2C peripheral test\" );\n\n    // Initialize the Wire library to treat this\n    // code as an I2C peripheral at address 0x60\n    // (the SparkFun MCP4725 breakout board):\n\n    Wire.begin( MCP4725_ADDR );\n\n    // Set up the Teensy 3.2 DAC to have\n    // 12-bit resolution:\n\n    analogWriteResolution(12);\n\n    // Define the I2C interrupt handler\n    // for dealing with incoming I2C\n    // packets:\n\n    Wire.onReceive( rcvISR );\n}\n\nvoid loop( void )\n{\n   Serial.println( \"MCP4725 emulator, waiting for data\" );\n   delay( 10000 ); // Delay 10 seconds\n}\n```", "```\nWire1.beginTransmission( 0x60 );   \nWire1.write( (dacOut << 8) & 0xf );\nWire1.write( dacOut & 0xff );      \nWire1.endTransmission( true ); \n```"]