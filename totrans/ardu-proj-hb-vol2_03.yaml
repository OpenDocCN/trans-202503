- en: '**Sound**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**8'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Arduino Piano**
  prefs: []
  type: TYPE_NORMAL
- en: In this project we’ll use some momentary pushbuttons and a piezo sounder to
    create a simple piano.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/p0068-01.jpg)![Image](../images/p0069-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Arduino board**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Breadboard**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jumper wires**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piezo sounder**'
  prefs: []
  type: TYPE_NORMAL
- en: '**8 momentary tactile pushbuttons**'
  prefs: []
  type: TYPE_NORMAL
- en: '**8 1k-ohm resistors**'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each pushbutton in our project (see [Figure 8-1](ch08.xhtml#ch8fig1)) is connected
    to an Arduino pin, and when the pushbutton is pressed, the piezo sounder will
    emit one of eight notes.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 8-1:** A momentary pushbutton and its circuit'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f8-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When pressed, a pushbutton completes a circuit, turning it on. As soon as the
    button is released, the connection will spring back and break that circuit, turning
    it off. The pushbutton switch is also known as a *momentary* or *normally open
    switch*, and is used in, for example, computer keyboards. This is in contrast
    to a *toggle switch*, which stays either on or off until you toggle it to the
    other position, like a light switch.
  prefs: []
  type: TYPE_NORMAL
- en: This type of pushbutton has four pins, but you generally use only two at a time
    for connection. We’re using the top pins in this project so it’s easier to reach
    the button and play a tune, although the two unused pins at the bottom would do
    the same job. As [Figure 8-2](ch08.xhtml#ch8fig2) shows, the pins work in a circuit.
    Pins A and C are always connected, as are pins B and D. When the button is pressed,
    the circuit is complete.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 8-2:** A pushbutton’s incomplete circuit'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f8-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Arduino piano uses a piezo sounder, shown in [Figure 8-3](ch08.xhtml#ch8fig3),
    to create frequencies that resemble recognizable notes. Piezo sounders, or just
    piezos for short, are inexpensive buzzers often used in small toys. A piezo element
    without its plastic housing looks like a gold metallic disc with connected positive
    (typically red) and negative (typically black) wires. A piezo is capable only
    of making a clicking sound, which we create by applying voltage.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 8-3:** A piezo sounder'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f8-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can make recognizable notes by getting the piezo to click hundreds of times
    a second at a particular frequency, so first we need to know the frequency of
    the different tones we want. [Table 8-1](ch08.xhtml#ch8tab1) shows the notes and
    their corresponding frequencies. *Period* is the duration of the cycle, in microseconds,
    at which the frequency is created. For example, to get a C note (261 Hz), we need
    the piezo to cycle at a period of 3,830 microseconds. We halve the period to get
    the `timeHigh` value, which is used in the code to create the note. (The tone
    is caused by the piezo being turned on and off very quickly, so the time that
    the piezo is on, or `HIGH`, is half the period.)
  prefs: []
  type: TYPE_NORMAL
- en: '**TABLE 8-1:** The Musical Notes and Frequencies Used in the Code'
  prefs: []
  type: TYPE_NORMAL
- en: '| **NOTE** | **FREQUENCY** | **PERIOD** | **TIMEHIGH** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `c` | 261 Hz | 3,830 | `1915` |'
  prefs: []
  type: TYPE_TB
- en: '| `d` | 294 Hz | 3,400 | `1700` |'
  prefs: []
  type: TYPE_TB
- en: '| `e` | 329 Hz | 3,038 | `1519` |'
  prefs: []
  type: TYPE_TB
- en: '| `f` | 349 Hz | 2,864 | `1432` |'
  prefs: []
  type: TYPE_TB
- en: '| `g` | 392 Hz | 2,550 | `1275` |'
  prefs: []
  type: TYPE_TB
- en: '| `a` | 440 Hz | 2,272 | `1136` |'
  prefs: []
  type: TYPE_TB
- en: '| `b` | 493 Hz | 2,028 | `1014` |'
  prefs: []
  type: TYPE_TB
- en: '| `C` | 523 Hz | 1,912 | `956` |'
  prefs: []
  type: TYPE_TB
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Insert the momentary pushbuttons into the breadboard with the pins straddling
    the center break of the breadboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Looking at the breadboard face on, number the pushbuttons 1–8 from left to right.
    Connect the top-left pin (A) of pushbutton 1 to Arduino pin 2 using a jumper wire.
    Connect the top-left pins of the other pushbuttons to the Arduino as shown here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **PUSHBUTTON** | **NOTE** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 1 | `c` | 2 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 2 | `d` | 3 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 3 | `e` | 4 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 4 | `f` | 5 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 5 | `g` | 6 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 6 | `a` | 7 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 7 | `b` | 8 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 8 | `C` | 9 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Insert a 1k-ohm resistor into the breadboard in line with the first pushbutton’s
    top-left pin, as shown in [Figure 8-4](ch08.xhtml#ch8fig4), and connect the other
    side of the resistor to the GND rail of the breadboard. Repeat this for the other
    pushbuttons. The resistor pulls the switch to GND when the button is not pressed
    to tell the Arduino that it’s not in a positive state; when the button is pressed,
    the positive power sounds the corresponding note.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 8-4:** A 1k-ohm resistor connects the pushbutton pin to GND.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f8-04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Connect the top-right pin (B) of each of the pushbuttons to the positive breadboard
    power rail using jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the piezo’s red wire to Arduino pin 13 and its black wire to the GND
    rail of the breadboard, then connect the power rails to GND and +5V on the Arduino.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that your setup matches the circuit diagram in [Figure 8-5](ch08.xhtml#ch8fig5),
    and then upload the code in “[The Sketch](ch08.xhtml#ch00lev1sec33)” on [page
    74](ch08.xhtml#page_74).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 8-5:** The circuit diagram for the Arduino piano'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f8-05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sketch first defines the pin that the piezo sounder is connected to and
    the pins for the pushbuttons. A value is defined for each pushbutton, and a tone
    is assigned to correspond with that value. The pushbuttons are set as inputs and
    the piezo sounder as an output. The loop cycle checks each button, playing the
    corresponding tone for as long as the button is held down. Only one note can be
    played at a time because each note requires the loop to begin again, so when the
    button is released, the piezo sounder stops playing the tone and the loop starts
    over.
  prefs: []
  type: TYPE_NORMAL
- en: int speakerPin = 13; // Piezo defined as pin 13
  prefs: []
  type: TYPE_NORMAL
- en: int key_c = 2; // Define Arduino pins for the keys
  prefs: []
  type: TYPE_NORMAL
- en: int key_d = 3;
  prefs: []
  type: TYPE_NORMAL
- en: int key_e = 4;
  prefs: []
  type: TYPE_NORMAL
- en: int key_f = 5;
  prefs: []
  type: TYPE_NORMAL
- en: int key_g = 6;
  prefs: []
  type: TYPE_NORMAL
- en: int key_a = 7;
  prefs: []
  type: TYPE_NORMAL
- en: int key_b = 8;
  prefs: []
  type: TYPE_NORMAL
- en: int key_C = 9;
  prefs: []
  type: TYPE_NORMAL
- en: // Value for each key press
  prefs: []
  type: TYPE_NORMAL
- en: int keypress_c = 0; int keypress_d = 0; int keypress_e = 0;
  prefs: []
  type: TYPE_NORMAL
- en: int keypress_f = 0; int keypress_g = 0; int keypress_a = 0;
  prefs: []
  type: TYPE_NORMAL
- en: int keypress_b = 0; int keypress_C = 0;
  prefs: []
  type: TYPE_NORMAL
- en: // Define the frequency of each note
  prefs: []
  type: TYPE_NORMAL
- en: int tones[] = { 1915, 1700, 1519, 1432, 1275, 1136, 1014, 956 };
  prefs: []
  type: TYPE_NORMAL
- en: //               'c',  'd',  'e',  'f',  'g',  'a',  'b', 'C'
  prefs: []
  type: TYPE_NORMAL
- en: int keytone = 0; // Give a value for keytone
  prefs: []
  type: TYPE_NORMAL
- en: void setup() {
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(key_c, INPUT); // Set up key pins as inputs
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(key_d, INPUT);
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(key_e, INPUT);
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(key_f, INPUT);
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(key_g, INPUT);
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(key_a, INPUT);
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(key_b, INPUT);
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(key_C, INPUT);
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(speakerPin, OUTPUT); // Set up piezo pin as an output
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // Start a loop to read the press of each key
  prefs: []
  type: TYPE_NORMAL
- en: void loop() {
  prefs: []
  type: TYPE_NORMAL
- en: keypress_c = digitalRead(key_c); keypress_d = digitalRead(key_d);
  prefs: []
  type: TYPE_NORMAL
- en: keypress_e = digitalRead(key_e); keypress_f = digitalRead(key_f);
  prefs: []
  type: TYPE_NORMAL
- en: keypress_g = digitalRead(key_g); keypress_a = digitalRead(key_a);
  prefs: []
  type: TYPE_NORMAL
- en: keypress_b = digitalRead(key_b); keypress_C = digitalRead(key_C);
  prefs: []
  type: TYPE_NORMAL
- en: // And if the key press is HIGH, play the corresponding tone
  prefs: []
  type: TYPE_NORMAL
- en: if ((keypress_c == HIGH) || (keypress_e == HIGH) ||
  prefs: []
  type: TYPE_NORMAL
- en: (keypress_g == HIGH) || (keypress_d == HIGH) ||
  prefs: []
  type: TYPE_NORMAL
- en: (keypress_f == HIGH) || (keypress_a == HIGH) ||
  prefs: []
  type: TYPE_NORMAL
- en: (keypress_b == HIGH) || (keypress_C == HIGH))
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: if (keypress_c == HIGH) {
  prefs: []
  type: TYPE_NORMAL
- en: keytone = tones[0];
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: if (keypress_d == HIGH) {
  prefs: []
  type: TYPE_NORMAL
- en: keytone = tones[1];
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: if (keypress_e == HIGH) {
  prefs: []
  type: TYPE_NORMAL
- en: keytone = tones[2];
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: if (keypress_f == HIGH) {
  prefs: []
  type: TYPE_NORMAL
- en: keytone = tones[3];
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: if (keypress_g == HIGH) {
  prefs: []
  type: TYPE_NORMAL
- en: keytone = tones[4];
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: if (keypress_a == HIGH) {
  prefs: []
  type: TYPE_NORMAL
- en: keytone = tones[5];
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: if (keypress_b == HIGH) {
  prefs: []
  type: TYPE_NORMAL
- en: keytone = tones[6];
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: if (keypress_C == HIGH) {
  prefs: []
  type: TYPE_NORMAL
- en: keytone = tones[7];
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(speakerPin, HIGH); // Turn on piezo to play tone
  prefs: []
  type: TYPE_NORMAL
- en: delayMicroseconds(keytone);
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(speakerPin, LOW);  // Turn off after a short delay
  prefs: []
  type: TYPE_NORMAL
- en: delayMicroseconds(keytone);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: else { // If no key is pressed, piezo remains silent
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(speakerPin, LOW);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '**TROUBLESHOOTING**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Q.** *The code compiles, but some or all of the buttons do not produce a
    tone.*'
  prefs: []
  type: TYPE_NORMAL
- en: • If the piezo sounder makes no noise at all, check that the piezo’s red wire
    is connected to pin 13 and its black wire to GND on the breadboard. Make sure
    you have connected GND on the Arduino to the correct breadboard power rail and
    that the Arduino has power connected.
  prefs: []
  type: TYPE_NORMAL
- en: • If only some buttons make a sound, recheck the wiring for the pushbuttons
    that are silent. It’s easy to misalign the jumper wires in the breadboard so they
    don’t actually line up in the row with the pushbutton pins.
  prefs: []
  type: TYPE_NORMAL
- en: • If you still have an issue, try swapping the offending pushbutton for one
    you know works; if this resolves your problem, then your original pushbutton may
    have been faulty.
  prefs: []
  type: TYPE_NORMAL
- en: '**9'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Audio LED Visualizer**
  prefs: []
  type: TYPE_NORMAL
- en: In this project we’ll use a sound sensor that will light a series of LEDs depending
    on the beat and volume of the sound it detects.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/p0077-01.jpg)![Image](../images/p0078-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Arduino board**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Breadboard**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solid-core wires with ends stripped**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jumper wires**'
  prefs: []
  type: TYPE_NORMAL
- en: '**2 red LEDs**'
  prefs: []
  type: TYPE_NORMAL
- en: '**2 yellow LEDs**'
  prefs: []
  type: TYPE_NORMAL
- en: '**5 green LEDs**'
  prefs: []
  type: TYPE_NORMAL
- en: '**9 220-ohm resistors**'
  prefs: []
  type: TYPE_NORMAL
- en: '**3.5 mm female headphone jack**'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Project 2 we created an LED night-light that was controlled by a light sensor.
    This project is similar, but the LEDs will be controlled by sound. We’ll connect
    a headphone jack to the Arduino, hook the jack up to an MP3 player, and watch
    the lights “dance” to the music. The signal from the MP3 player is picked up by
    the headphone jack and received as pulses by the Arduino A0 pin. The pattern of
    the pulses depends on the beat and volume of the music. The Arduino then sends
    power to the LEDs in direct response to the pattern of the music. As an alternative
    to using the MP3 player, you could add a microphone and have your own voice visualized
    in colored lights.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Place the LEDs into the breadboard with the short, negative legs in the GND
    rail. Connect the GND rail on the breadboard to Arduino GND.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert a 220-ohm resistor for each LED, making sure the resistors straddle the
    center break, and connect one leg to each positive LED leg (see [Figure 9-1](ch09.xhtml#ch9fig1)).
    Connect the other leg of each resistor to Arduino digital pins 2 through 10 with
    jumper wires, as shown in the following table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **LED** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Positive leg | Digital pins 2–10 (via resistor) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Negative leg | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**FIGURE 9-1:** A resistor is required between the LEDs and power.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f9-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*This headphone jack was reclaimed from a radio bought in a dollar store, but
    if you can find one to purchase, that will work too.* *On the headphone jack,
    the pins are GND, right channel, and left channel.*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connect the ground pin of the headphone jack directly to GND, and the left channel
    of the jack to Arduino pin A0, as outlined in the following table. You could use
    jumper wire for this, but I’ve used solid-core wire and stripped the ends for
    connections. Stranded wire is too thin and won’t connect easily to the Arduino
    pins. (See [Figure 9-2](ch09.xhtml#ch9fig2) for the positions of the jack pins.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **HEADPHONE JACK** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Ground | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Left channel | A0 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**FIGURE 9-2:** 3.5 mm headphone jack with MP3 player jack plugged in'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f9-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Check your setup against the circuit diagram in [Figure 9-3](ch09.xhtml#ch9fig3),
    and then upload the code in “[The Sketch](ch09.xhtml#ch00lev1sec37)” on [page
    81](ch09.xhtml#page_81).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 9-3:** The circuit diagram for the audio LED visualizer'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f9-03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Plug your MP3 player into the headphone jack for audio input. The LEDs will
    dance to the beat and volume of your music!
  prefs: []
  type: TYPE_NORMAL
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sketch first sets the Arduino pins connected to the LEDs, pins 2–10, as
    outputs. The input in this sketch is the signal from the MP3 player, received
    through the headphone jack, which is read by analog pin A0\. The music sent by
    the player is picked up as a series of pulses by A0, and the volume and beat of
    the music determine how the LEDs light up. The louder the music, the more LEDs
    will light; and the faster the music’s beat, the faster the LEDs will flash.
  prefs: []
  type: TYPE_NORMAL
- en: // Used with kind permission from James Newbould
  prefs: []
  type: TYPE_NORMAL
- en: int led[9] = {2, 3, 4, 5, 6, 7, 8, 9, 10}; // Pins connected to LEDs
  prefs: []
  type: TYPE_NORMAL
- en: int leftChannel = A0; // Pin connected to headphone jack
  prefs: []
  type: TYPE_NORMAL
- en: int left, i; // Create a variable for left and i
  prefs: []
  type: TYPE_NORMAL
- en: void setup() {
  prefs: []
  type: TYPE_NORMAL
- en: for (i = 0; i < 9; i++)
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(led[i], OUTPUT); // Set LEDs as output
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: void loop() { // Light LEDs from left to right and back again
  prefs: []
  type: TYPE_NORMAL
- en: // depending on the value from A0
  prefs: []
  type: TYPE_NORMAL
- en: left = analogRead(leftChannel);  // Read left value
  prefs: []
  type: TYPE_NORMAL
- en: left = left / 10;  // Set level of sensitivity between 1 and 50
  prefs: []
  type: TYPE_NORMAL
- en: if (left == 0) {
  prefs: []
  type: TYPE_NORMAL
- en: for (i = 0; i < 9; i++) { // If value is low, turn off LED
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(led[i], LOW);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: else { // Or else turn on LEDs in sequence
  prefs: []
  type: TYPE_NORMAL
- en: for (i = 0; i < left; i++) {
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(led[i], HIGH);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: for (i = i; i < 9; i++) {
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(led[i], LOW);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '**TROUBLESHOOTING**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Q.** *The code compiles, but some or all of the LEDs do not light up as expected.*'
  prefs: []
  type: TYPE_NORMAL
- en: • If none of the LEDs light, make sure you’ve connected the GND wire from the
    Arduino to the correct breadboard power rail and that the Arduino has power connected.
  prefs: []
  type: TYPE_NORMAL
- en: • If only some LEDs light, check that the LEDs are inserted the correct way,
    with the longer leg connected to the positive power and the short leg to GND.
    LEDs have polarity, so they must be connected correctly. Check that each resistor
    is inserted fully and lines up in the same row as the corresponding LED leg.
  prefs: []
  type: TYPE_NORMAL
- en: • Make sure the LEDs are connected to the Arduino pins defined in the sketch
    and match the circuit diagram in [Figure 9-3](ch09.xhtml#ch9fig3); the first part
    of the sketch defines pins 2–10 as outputs, so these should be used.
  prefs: []
  type: TYPE_NORMAL
- en: • If an LED still fails to light, it may be burned out or faulty. An easy way
    to check is to swap the LED with another in the sequence and see if that solves
    the issue. If you find that the LED works in another position, it means the resistor
    is either faulty or not inserted fully. Depending on the outcome, replace the
    LED or resistor with a functioning component.
  prefs: []
  type: TYPE_NORMAL
