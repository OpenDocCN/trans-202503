- en: '**Motors**'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**电机**'
- en: '**10'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**10'
- en: Old-School Analog Dial**
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 老式模拟表盘**
- en: Old-fashioned analog displays have a certain charm. In this project I’ll demonstrate
    how to make your own.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 老式模拟显示器具有一定的魅力。在这个项目中，我将展示如何制作你自己的模拟显示器。
- en: '![Image](../images/p0084-01.jpg)![Image](../images/p0085-01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/p0084-01.jpg)![Image](../images/p0085-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需零件**'
- en: '**Arduino board**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**Arduino板**'
- en: '**Breadboard**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**面包板**'
- en: '**Jumper wires**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**跳线**'
- en: '**Tower Pro SG90 9g servomotor**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**Tower Pro SG90 9g伺服电机**'
- en: '**Photoresistor**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**光敏电阻**'
- en: '**10k-ohm resistor**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**10k欧姆电阻**'
- en: '**LIBRARY REQUIRED**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需库**'
- en: '**Servo**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**伺服电机**'
- en: '**HOW IT WORKS**'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**工作原理**'
- en: Today, visual representations of measurements are usually displayed digitally
    on an LCD screen or with LED digits, but not that long ago analog dials were always
    used to show pressure, speed, and even time! The Arduino can detect a voltage
    input from a sensor, and we’ll use that capability here to create a dial that
    the Arduino moves in response to the input received. We can use this dial in lots
    of ways to show measurements for different projects.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，测量结果通常通过LCD屏幕或LED数字显示器以数字方式呈现，但在不久前，模拟指针表盘一直用于显示压力、速度，甚至是时间！Arduino能够检测来自传感器的电压输入，我们将在这里利用这一能力，创建一个旋转表盘，Arduino将根据接收到的输入来调整表盘的指针。我们可以在许多项目中使用这个表盘来显示不同的测量值。
- en: In this project, we’ll use a photoresistor to measure light input, but you could
    easily swap in a water sensor to make a rain detector, or a gas sensor for a warning
    meter. A *photoresistor*, also referred to as a *light-dependent resistor*, produces
    a variable resistance depending on the amount of light the sensor detects, as
    discussed in Project 2.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将使用光敏电阻来测量光照输入，但你也可以轻松更换成水传感器制作雨水探测器，或者使用气体传感器制作预警仪。*光敏电阻*，也称为*光依赖电阻*，根据传感器检测到的光量产生可变电阻，如第2个项目中所讨论的那样。
- en: 'The principles for adding an analog sensor are the same for whichever sensor
    you choose. Most sensors have three connections: ground, +5V, and a signal connection
    that connects to the analog A0 pin on the Arduino—this makes it easy to swap in
    a different sensor. The photoresistor is slightly different because it has only
    two connections, so one will go to power and one to A0.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 添加模拟传感器的原理对任何选择的传感器都是相同的。大多数传感器有三根连接：接地、+5V和连接到Arduino的模拟A0引脚的信号连接——这使得更换不同的传感器变得简单。光敏电阻略有不同，因为它只有两个连接，其中一个连接到电源，另一个连接到A0引脚。
- en: We’ll use the sensor to measure light levels, and the Arduino will use that
    measurement to move the arm of a small servomotor (or “servo” for short) to the
    corresponding angle. The angle of the motor arm indicates the strength of the
    light input.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用传感器来测量光照强度，Arduino会根据该测量值来控制一个小型伺服电机（简称“伺服”）的臂部运动到相应的角度。电机臂的角度表示光输入的强度。
- en: 'A *servo*, shown in [Figure 10-1](ch10.xhtml#ch10fig1), is a small, cheap,
    mass-produced motor used for small robotics and a variety of electronics tasks.
    The servo is controlled by three wires: ground (black or brown), power (red),
    and signal or control (typically orange, yellow, or white). Pulses are sent from
    the Arduino over the control wire via pulse width modulation (PWM; discussed in
    Project 5), and the input received by the photoresistor determines the angle of
    the servo’s actuator arm. The servo expects a pulse every 20 milliseconds in order
    to retrieve the correct information about the angle.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*伺服电机*，如[图10-1](ch10.xhtml#ch10fig1)所示，是一种小型、廉价的大规模生产电机，广泛用于小型机器人和各种电子任务中。伺服电机通过三根电线控制：接地（黑色或棕色）、电源（红色）和信号或控制（通常是橙色、黄色或白色）。通过控制电线发送脉冲，使用脉宽调制（PWM；在第5个项目中讨论），光敏电阻接收到的输入决定了伺服电机执行臂的角度。伺服电机每20毫秒需要接收一个脉冲，以获取关于角度的正确信息。'
- en: The pulse width dictates the range of the servo’s angular motion. Typically,
    a servo pulse width of 1.5 milliseconds sets the servo to its “neutral” position
    of 45 degrees, a pulse width of 1.25 milliseconds sets the angle to 0 degrees,
    and a pulse width of 1.75 milliseconds sets the angle to 90 degrees.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 脉冲宽度决定了伺服电机的角度运动范围。通常，1.5毫秒的伺服脉冲宽度将伺服电机设置到其“中立”位置，即45度，1.25毫秒的脉冲宽度将角度设置为0度，1.75毫秒的脉冲宽度将角度设置为90度。
- en: '**FIGURE 10-1:** A servomotor'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**图10-1：** 伺服电机'
- en: '![Image](../images/f10-01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f10-01.jpg)'
- en: The physical limits of the arm angle and the timing of the servo hardware vary
    across brands and models, but in general a servo’s angular motion travels in the
    range of 90 to 180 degrees and the neutral position is almost always at 1.5 milliseconds.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 伺服电机臂的角度和伺服硬件的时序因品牌和型号不同而有所不同，但一般来说，伺服电机的角度运动范围为 90 到 180 度，中立位置几乎总是在 1.5 毫秒时。
- en: '**THE BUILD**'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建步骤**'
- en: Connect the servo’s red (power) wire directly to +5V on the Arduino, the brown
    (ground) wire to Arduino GND, and the yellow (signal) wire to Arduino pin 9, as
    shown in the following table.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将伺服电机的红色（电源）线直接连接到 Arduino 的 +5V，棕色（接地）线连接到 Arduino 的 GND，黄色（信号）线连接到 Arduino
    的引脚 9，如下表所示。
- en: '| **SERVO** | **ARDUINO** |'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **伺服电机** | **ARDUINO** |'
- en: '| --- | --- |'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Red (power) wire | +5V |'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 红色（电源）线 | +5V |'
- en: '| Brown (ground) wire | GND |'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 棕色（接地）线 | GND |'
- en: '| Yellow signal (control) wire | Pin 9 |'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 黄色信号（控制）线 | 引脚 9 |'
- en: Place the photoresistor in the breadboard and connect one leg to +5V on the
    Arduino. Connect the photoresistor’s other leg to a 10k-ohm resistor, as shown
    in the circuit diagram in [Figure 10-2](ch10.xhtml#ch10fig2), and use a jumper
    wire to connect this resistor leg to Arduino pin A0 (see the following table).
    Connect the other leg of the 10k-ohm resistor to GND.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将光敏电阻放入面包板，并将一端连接到 Arduino 的 +5V。将光敏电阻的另一端连接到一个 10k 欧姆电阻，如[图 10-2](ch10.xhtml#ch10fig2)中的电路图所示，并用跳线将该电阻的另一端连接到
    Arduino 的引脚 A0（见下表）。将 10k 欧姆电阻的另一端连接到 GND。
- en: '| **PHOTORESISTOR** | **ARDUINO** |'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **光敏电阻** | **ARDUINO** |'
- en: '| --- | --- |'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Leg 1 | +5V |'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 引脚 1 | +5V |'
- en: '| Leg 2 | Pin A0 via 10k-ohm resistor |'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 引脚 2 | 通过 10k 欧姆电阻连接到引脚 A0 |'
- en: '**FIGURE 10-2:** The photoresistor is connected to Arduino pin A0 and measures
    the amount of light. The servo is connected to pin 9 and moves according to the
    amount of light.'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 10-2：** 光敏电阻连接到 Arduino 的 A0 引脚并测量光照强度。伺服电机连接到引脚 9，并根据光照强度进行移动。'
- en: '![Image](../images/f10-02.jpg)'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](../images/f10-02.jpg)'
- en: Upload the code in “[The Sketch](ch10.xhtml#ch00lev1sec41)” on [page 89](ch10.xhtml#page_89).
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传 “[The Sketch](ch10.xhtml#ch00lev1sec41)” 中的代码，见 [第 89 页](ch10.xhtml#page_89)。
- en: Make a faceplate for your dial, like the one in [Figure 10-3](ch10.xhtml#ch10fig3),
    and attach it to the servo. Be sure the servo arm can move over the measurements
    of the dial like a pointer. Cover the photoresistor completely when you add power
    to the Arduino, and then mark this position as 0 on the faceplate. Shine a bright
    flashlight at the light resistor to get the maximum value, and then mark that
    position on the faceplate as well. Add equally spaced marks between 0 and the
    max value to give you a scale.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 制作一个像[图 10-3](ch10.xhtml#ch10fig3)中那样的刻度盘面板，并将其附加到伺服电机上。确保伺服臂可以像指针一样在刻度盘的测量值上移动。当你为
    Arduino 加电时，完全覆盖光敏电阻，然后在面板上标记这个位置为 0。用强光手电照射光敏电阻，得到最大值，并在面板上标记这个位置。然后在 0 和最大值之间等距添加标记，以便你得到一个刻度。
- en: '**FIGURE 10-3:** An example faceplate'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 10-3：** 一个示例面板'
- en: '![Image](../images/f10-03.jpg)'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](../images/f10-03.jpg)'
- en: The servo’s actuator arm will move up the scale as it detects light, depending
    on the brightness. For example, on the left of [Figure 10-4](ch10.xhtml#ch10fig4),
    the servo arm is shown at position 0\. On the right, the servo arm displays the
    brightness measurement when light—in this case, a laser—is applied to the photoresistor.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 伺服电机的执行臂将根据光照强度沿比例尺移动。例如，在[图 10-4](ch10.xhtml#ch10fig4)的左侧，伺服臂处于 0 位置。在右侧，当光源（在这种情况下是激光）照射到光敏电阻时，伺服臂会显示光照强度的测量值。
- en: '**FIGURE 10-4:** When light shines on the photoresistor, the servo arm moves.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 10-4：** 当光照射到光敏电阻上时，伺服臂会移动。'
- en: '![Image](../images/f10-04.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f10-04.jpg)'
- en: '**THE SKETCH**'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**草图**'
- en: The sketch first calls the Servo library, which is already built into the Arduino
    IDE (so there’s no need to download and install this library). We give the servo
    position a starting value of `0`, and set the photoresistor pin as A0\. We assign
    Arduino pin 9 to control the servo and then read the value from the analog pin.
    Pin A0 is capable of reading an analog value from the photoresistor and converting
    it to a digital value in the range 0–1,023, so we scale this down to 0–179 (180
    possible values) to fit the servo arm’s 180-degree range of movement. If no light
    is applied to the photoresistor, the value will be `0` and the servo position
    will be 0\. As you add light, the servo arm will move, up to a maximum of 180
    degrees. The angle depends on the brightness.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图首先调用伺服库，该库已经内置于Arduino IDE中（因此无需下载和安装该库）。我们为伺服电机的位置设置了初始值`0`，并将光敏电阻引脚设为A0。我们将Arduino的9号引脚分配给伺服电机，并从模拟引脚读取值。引脚A0能够读取光敏电阻的模拟值并将其转换为范围在0到1,023之间的数字值，因此我们将其缩放到0到179（180个可能值），以适应伺服臂180度的运动范围。如果没有光照射到光敏电阻，值将为`0`，伺服电机位置将为0。随着光照的增加，伺服电机的臂会移动，最多可达180度。角度取决于亮度。
- en: /* Created by David Cuartielles modified 30 Aug 2011 by Tom Igoe
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: /* 由David Cuartielles创建，Tom Igoe于2011年8月30日修改
- en: This example code is in the public domain [http://arduino.cc/en/Tutorial/AnalogInput](http://arduino.cc/en/Tutorial/AnalogInput)
    */
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例代码属于公共领域 [http://arduino.cc/en/Tutorial/AnalogInput](http://arduino.cc/en/Tutorial/AnalogInput)
    */
- en: '#include <Servo.h> // Call the Servo library (built into the IDE)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '#include <Servo.h> // 引用伺服库（内置于IDE中）'
- en: Servo myservo;
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Servo myservo;
- en: int pos = 0; // Give the position a value
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: int pos = 0; // 给位置赋值
- en: int lightPin = A0; // Pin connected to the photoresistor
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: int lightPin = A0; // 连接到光敏电阻的引脚
- en: void setup() {
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: void setup() {
- en: myservo.attach(9); // Pin connected to the servo
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: myservo.attach(9); // 连接到伺服电机的引脚
- en: '}'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: void loop() {
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: void loop() {
- en: // Read voltage from photoresistor, can read 1024 possible values
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: // 从光敏电阻读取电压，最多可以读取1024个可能的值
- en: int lightLevel = analogRead(lightPin);
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: int lightLevel = analogRead(lightPin);
- en: // Scale 1024 values to 180
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: // 将1024值缩放到180
- en: lightLevel = map(lightLevel, 0, 1023, 0, 179);
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: lightLevel = map(lightLevel, 0, 1023, 0, 179);
- en: // Scale of 0-179 (180 values)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: // 缩放0-179（180个值）
- en: pos = constrain(lightLevel, 0, 179);
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: pos = constrain(lightLevel, 0, 179);
- en: myservo.write(pos); // Set the servo angle
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: myservo.write(pos); // 设置伺服电机的角度
- en: delay(100);
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: delay(100);
- en: '}'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '**TROUBLESHOOTING**'
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**故障排除**'
- en: '**Q.** *The code compiles, but the servo does not move when light is applied
    to the photoresistor.*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** *代码可以编译，但光照射到光敏电阻时，伺服电机没有移动。*'
- en: • If the servo does not move at all, make sure that your wiring matches the
    diagram in [Figure 10-2](ch10.xhtml#ch10fig2) and that there’s power going to
    the Arduino.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: • 如果伺服电机完全没有移动，请确保电线连接与[图10-2](ch10.xhtml#ch10fig2)中的电路图一致，并且Arduino有电。
- en: • Connect the Arduino to your PC and open the Serial Monitor to check that there’s
    a reading from the photoresistor. If no reading is registered, check that the
    photoresistor is securely inserted into the breadboard. If you still get no reading,
    your photoresistor may be faulty, so replace it with another one.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: • 将Arduino连接到PC，并打开串口监视器以检查是否有来自光敏电阻的读数。如果没有读数，请检查光敏电阻是否牢固插入面包板。如果仍然没有读数，可能是光敏电阻故障，换一个试试。
- en: '**11'
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**11'
- en: Stepper Motor**
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 步进电机**
- en: In this project I’ll introduce you to a stepper motor (or step motor), set it
    up, and discuss how it works.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我将介绍步进电机（或步进马达），设置它，并讨论它的工作原理。
- en: '![Image](../images/p0091-01.jpg)![Image](../images/p0092-01.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/p0091-01.jpg)![Image](../images/p0092-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需部件**'
- en: '**Arduino board**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**Arduino板**'
- en: '**Breadboard**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**面包板**'
- en: '**Jumper wires**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**跳线**'
- en: '**28BYJ-48 stepper motor with ULN2003 driver module**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**28BYJ-48步进电机与ULN2003驱动模块**'
- en: '**50k-ohm potentiometer**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**50k欧姆电位器**'
- en: '**LIBRARY REQUIRED**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需库**'
- en: '**Stepper**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**步进电机**'
- en: '**HOW IT WORKS**'
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**工作原理**'
- en: A *stepper motor*, like the one shown in [Figure 11-1](ch11.xhtml#ch11fig1),
    is a direct current (DC) electric motor that divides a full rotation of the arm
    into a number of equal steps. Unlike the servomotor used in Project 10, this stepper
    motor turns 360 degrees and has the advantage of being able to position itself
    with great accuracy or rotate continuously.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*步进电机*，如[图11-1](ch11.xhtml#ch11fig1)所示，是一种直流电动机，将完整的旋转分成若干个相等的步骤。与项目10中使用的伺服电机不同，这种步进电机可以旋转360度，且具有高精度定位或持续旋转的优点。'
- en: '**FIGURE 11-1:** A 28BYJ-48 stepper motor'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**图11-1：** 28BYJ-48步进电机'
- en: '![Image](../images/f11-01.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f11-01.jpg)'
- en: The stepper motor’s data sheet will state the number of steps it performs per
    revolution; a *step* is just one movement within one revolution. A motor with
    200 steps per revolution will turn through 360 degrees in 200 steps, or 1.8 degrees
    per step. Within a stepper motor there are two interlocked discs, similar to gears,
    with teeth of opposing magnetism that alternate and connect to the center shaft
    or rotor. The motor moves in steps when power is sent to its *windings*—a series
    of wire coils that become electromagnets when voltage is applied. When powered,
    these electromagnets attract or oppose the gear-shaped discs and rotate the shaft.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 步进电机的数据表将说明其每转一圈执行的步数；*步进*只是一次旋转中的一个运动。一个每转200步的电机将通过200步旋转360度，每步为1.8度。步进电机内有两个互锁的盘片，类似于齿轮，齿部具有相反的磁性，交替连接到中心轴或转子上。当电流送入电机的*线圈*时——这些线圈是当施加电压时成为电磁铁的一系列电线——电磁铁吸引或排斥齿轮状的盘片，从而旋转轴。
- en: You can control the motor’s position and speed by commanding it to move to and
    hold at one of these steps. Since we know the angle each step represents, we can
    get accurate and precise turning angles and distance measurements. Stepper motors
    are commonly used in CD and DVD players and in 3D printers, where movements need
    to be very accurate.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过命令电机移动到并保持在这些步进中的一个位置，来控制电机的位置和速度。由于我们知道每一步代表的角度，因此可以获得准确的转动角度和距离测量。步进电机常用于CD和DVD播放器以及3D打印机中，这些设备需要非常精确的运动。
- en: When you’re looking to buy a stepper motor, there are a few things to consider.
    The first is whether or not it has a gearbox. A gearbox will improve the *torque*
    (moving power) but reduce the *revolutions per minute* (RPM, or speed).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当你准备购买步进电机时，有几个因素需要考虑。第一个是它是否有齿轮箱。齿轮箱可以提高*扭矩*（移动力），但会降低*每分钟转速*（RPM，即速度）。
- en: 'The next consideration is whether the stepper motor is bipolar or unipolar.
    *Bipolar* motors switch polarity of the coils. Polarity is the direction the current
    flows; so if, for example, we reversed the 5V and GND connections, the motor would
    turn in the opposite direction. Bipolar motors have simpler windings but require
    more complicated drivers as they reverse the polarity for us. *Unipolar* motors
    essentially have a winding per polarity, but they can use simpler drivers. You
    can check whether your motor is bipolar or unipolar by looking at the connections:
    a bipolar motor has four connections, and a unipolar motor has five to eight connections.
    In this project we’re using a unipolar motor, the 28BYJ-48 stepper motor with
    the ULN2003 driver test module—a board that makes it easy to control the motor
    with the Arduino, like the module board for the LED matrix in Project 4\. Some
    driver boards will have a slightly different setup, so I’d recommend getting the
    model of motor listed here for the project so you can follow the instructions
    closely.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的考虑是步进电机是双极性还是单极性。*双极性*电机会改变线圈的极性。极性是电流流动的方向；例如，如果我们反转5V和GND连接，电机将朝相反的方向转动。双极性电机的线圈较简单，但需要更复杂的驱动器，因为它们为我们反转极性。*单极性*电机基本上是为每个极性配备一个线圈，但可以使用更简单的驱动器。你可以通过查看连接方式来检查电机是双极性还是单极性：双极性电机有四个连接，而单极性电机有五到八个连接。在这个项目中，我们使用的是单极性电机——28BYJ-48步进电机配合ULN2003驱动器测试模块——这是一个使得通过Arduino控制电机变得简单的板，就像项目4中的LED矩阵模块板一样。一些驱动板的设置可能会有所不同，因此我建议在这个项目中使用此处列出的电机型号，以便能够紧密按照说明进行操作。
- en: Turning the potentiometer alters the angle of the stepper motor arm, so as you
    move the potentiometer to the left or right, the stepper motor arm will follow
    your input. (A *potentiometer* is a variable resistor with a knob.) The resistance
    of the potentiometer changes as you turn the knob. They are commonly used in electrical
    devices such as volume controls on audio equipment.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 转动电位器改变步进电机臂的角度，因此当你将电位器向左或向右移动时，步进电机臂将跟随你的输入。（*电位器*是一个带旋钮的可变电阻器。）当你转动旋钮时，电位器的电阻值发生变化。它们通常用于电器设备中，如音频设备的音量控制。
- en: '**THE BUILD**'
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建**'
- en: 'Connect the stepper motor to the driver board, as shown in [Figure 11-2](ch11.xhtml#ch11fig2).
    From the outermost pin to the innermost pin in the middle of the board, connect
    the wires from the motor in the following order: blue, pink, yellow, orange, red.
    The connector can only be inserted in this way.'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将步进电机连接到驱动板，如[图11-2](ch11.xhtml#ch11fig2)所示。从板外侧的最外层引脚到板中央的最内层引脚，按照以下顺序连接电机的线缆：蓝色、粉色、黄色、橙色、红色。连接器只能以这种方式插入。
- en: '**FIGURE 11-2:** Connecting the stepper to the driver board'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 11-2：** 将步进电机连接到驱动板'
- en: '![Image](../images/f11-02.jpg)'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Image](../images/f11-02.jpg)'
- en: Connect the driver board pins 1, 2, 3, and 4 at the other end of the board directly
    to Arduino pins 8, 9, 10, and 11, respectively.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将驱动板的引脚 1、2、3 和 4 直接连接到 Arduino 的引脚 8、9、10 和 11。
- en: '| **STEPPER DRIVER BOARD** | **ARDUINO** |'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **步进电机驱动板** | **Arduino** |'
- en: '| --- | --- |'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| IN1 | Pin 8 |'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| IN1 | 引脚 8 |'
- en: '| IN2 | Pin 9 |'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| IN2 | 引脚 9 |'
- en: '| IN3 | Pin 10 |'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| IN3 | 引脚 10 |'
- en: '| IN4 | Pin 11 |'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| IN4 | 引脚 11 |'
- en: '| GND | GND |'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| GND | GND |'
- en: '| +5V | +5V |'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| +5V | +5V |'
- en: Insert a potentiometer into the breadboard, connecting its center pin to Arduino
    A0 and its outer two pins to Arduino +5V and GND in any order.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在面包板上插入一个电位器，将其中间引脚连接到 Arduino A0，引脚两端连接到 Arduino +5V 和 GND，顺序可以任意。
- en: '| **POTENTIOMETER** | **ARDUINO** |'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **电位器** | **Arduino** |'
- en: '| --- | --- |'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Left pin | GND |'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 左侧引脚 | GND |'
- en: '| Center pin | A0 |'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 中间引脚 | A0 |'
- en: '| Right pin | +5V |'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 右侧引脚 | +5V |'
- en: Connect the driver board GND and +5V to the breadboard GND and +5V, and connect
    the breadboard rails to the Arduino. Don’t forget to attach the power rails of
    the breadboard to GND and +5V too.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将驱动板的 GND 和 +5V 分别连接到面包板的 GND 和 +5V，并将面包板的轨道连接到 Arduino。别忘了也要将面包板的电源轨连接到 GND
    和 +5V。
- en: Make sure that your setup matches the final configuration shown in [Figure 11-3](ch11.xhtml#ch11fig3),
    and upload the code in “[The Sketch](ch11.xhtml#ch00lev1sec45)” below.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的设置与[图 11-3](ch11.xhtml#ch11fig3)中显示的最终配置相匹配，并上传下面的代码“[程序代码](ch11.xhtml#ch00lev1sec45)”。
- en: '**FIGURE 11-3:** The circuit diagram for the stepper motor'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 11-3：** 步进电机的电路图'
- en: '![Image](../images/f11-03.jpg)'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Image](../images/f11-03.jpg)'
- en: '**THE SKETCH**'
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**程序代码**'
- en: This code comes with the Arduino IDE and can be found at File ▸ Examples ▸ Stepper
    ▸ MotorKnob. I’ve reproduced it here as you’ll see it in the IDE. It uses the
    built-in stepper library, `<Stepper.h>`. The potentiometer is connected to the
    Arduino A0 pin and gives a variable voltage depending on the turn of the potentiometer,
    which then controls the position of the stepper motor.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码是 Arduino IDE 自带的，可以在“文件 ▸ 示例 ▸ 步进电机 ▸ MotorKnob”中找到。我在这里复制了它，你在 IDE 中会看到这段代码。它使用了内置的步进电机库
    `<Stepper.h>`。电位器连接到 Arduino A0 引脚，并根据电位器的旋转提供一个可变电压，进而控制步进电机的位置。
- en: /* MotorKnob
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: /* MotorKnob
- en: '* [http://www.arduino.cc/en/Reference/Stepper](http://www.arduino.cc/en/Reference/Stepper)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '* [http://www.arduino.cc/en/Reference/Stepper](http://www.arduino.cc/en/Reference/Stepper)'
- en: '* This example code is in the public domain.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '* 此示例代码属于公有领域。'
- en: '*/'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: '#include <Stepper.h>'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '#include <Stepper.h>'
- en: // Change this to the number of steps on your motor
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: // 将此值更改为你电机的步数
- en: '#define STEPS 100'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '#define STEPS 100'
- en: // Create an instance of the stepper class, specifying the number of
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建步进电机类的实例，并指定
- en: // steps of the motor and the pins it's attached to
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: // 电机的步数和它所连接的引脚
- en: Stepper stepper(STEPS, 8, 10, 9, 11);
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Stepper stepper(STEPS, 8, 10, 9, 11);
- en: // The previous reading from the analog input
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: // 来自模拟输入的前一个读数
- en: int previous = 0;
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: int previous = 0;
- en: void setup() {
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: void setup() {
- en: // Set the speed of the motor to 700 RPM
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: // 设置电机的速度为 700 RPM
- en: stepper.setSpeed(30);
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: stepper.setSpeed(30);
- en: '}'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: void loop() {
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: void loop() {
- en: // Get the sensor value
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: // 获取传感器值
- en: int val = analogRead(0);
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: int val = analogRead(0);
- en: // Move a number of steps equal to change in the sensor reading
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: // 移动的步数等于传感器读数的变化值
- en: stepper.step(val - previous);
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: stepper.step(val - previous);
- en: // Remember the previous value of the sensor
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: // 记住传感器的前一个值
- en: previous = val;
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: previous = val;
- en: '}'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '**TROUBLESHOOTING**'
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**故障排除**'
- en: '**Q.** *The code compiles, but the stepper motor does not move.*'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**问：** *代码编译成功，但步进电机不转动。*'
- en: • When you power the motor, lights should blink on the driver motor board. If
    they don’t, there’s an issue with power, so check that your setup matches the
    circuit diagram in [Figure 11-3](ch11.xhtml#ch11fig3). Make sure the stepper motor
    connection is firmly inserted into the driver motor board—it can only go in one
    way.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: • 当你为电机供电时，驱动电机板上的指示灯应该会闪烁。如果没有闪烁，说明电源有问题，请检查你的设置是否与[图 11-3](ch11.xhtml#ch11fig3)中的电路图匹配。确保步进电机的连接牢固插入到驱动电机板中，它只能以一种方式插入。
- en: • If the driver board lights but the motor does not move, check that the connections
    to the potentiometer are secure and match the tables shown earlier.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: • 如果驱动板的灯亮起但电机不动，请检查电位器的连接是否牢固，并确保与前面的表格匹配。
- en: '**12'
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**12'
- en: Temperature-Controlled Fan**
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 温控风扇**
- en: In this project, we’ll use an LM35 temperature sensor to turn a fan on automatically
    when the temperature is too high.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将使用 LM35 温度传感器，当温度过高时自动开启风扇。
- en: '![Image](../images/p0098-01.jpg)![Image](../images/p0099-01.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/p0098-01.jpg)![Image](../images/p0099-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需部件**'
- en: '**Arduino board**'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**Arduino 主板**'
- en: '**Breadboard**'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**面包板**'
- en: '**Jumper wires**'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**跳线**'
- en: '**LM35 temperature sensor**'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**LM35 温度传感器**'
- en: '**5V single-channel relay module**'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**5V 单通道继电器模块**'
- en: '**12V mini computer cooling fan**'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**12V 小型计算机散热风扇**'
- en: '**9V battery snap and battery**'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**9V 电池夹和电池**'
- en: '**HOW IT WORKS**'
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**工作原理**'
- en: The LM35 temperature sensor (shown in [Figure 12-1](ch12.xhtml#ch12fig1)) senses
    the temperature and sends that measurement to the Arduino in voltage. The Arduino
    converts this voltage value to temperature in degrees Celsius and then converts
    this value to degrees Fahrenheit. When the temperature reading is above 71 degrees
    Fahrenheit, the Arduino sends power to the relay, which turns on the computer
    fan.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: LM35 温度传感器（如[图 12-1](ch12.xhtml#ch12fig1)所示）能够感测温度，并将该测量值以电压形式发送到 Arduino。Arduino
    将该电压值转换为摄氏温度，再将该值转换为华氏温度。当温度高于 71 华氏度时，Arduino 向继电器发送电源，继电器开启计算机风扇。
- en: '**FIGURE 12-1:** The LM35 temperature sensor: the left pin is +5V, center is
    data out, and right is GND.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 12-1：** LM35 温度传感器：左引脚为 +5V，中间为数据输出，右引脚为 GND。'
- en: '![Image](../images/f12-01.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f12-01.jpg)'
- en: 'The computer fan requires more power than the Arduino can provide, so we need
    to give it its own power supply: a 9V battery. This circuit is controlled by an
    *electronic relay*—an electronically operated switch that in this case uses an
    electromagnet to mechanically open or close the circuit (shown in [Figure 12-2](ch12.xhtml#ch12fig2)).
    A relay is generally used when a low-power device is required to switch on or
    off a much higher-voltage device. Our relay is powered by 5 volts to operate the
    mechanical switch. In this project the circuit is only 9 volts, but the relay
    could control a circuit up to 240 volts. Adding higher-voltage circuits can be
    very dangerous, however, so do this only if you are comfortable working with electricity
    or can seek professional advice.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机风扇所需的功率超过了 Arduino 能提供的功率，因此我们需要为其提供独立的电源：一个 9V 电池。这个电路由*电子继电器*控制——一种电子操作的开关，在本例中使用电磁铁机械性地打开或关闭电路（如[图
    12-2](ch12.xhtml#ch12fig2)所示）。继电器通常在需要用低功率设备开关高电压设备时使用。我们的继电器通过 5 伏电源供电，用于操作机械开关。在这个项目中，电路的电压为
    9 伏，但该继电器可以控制高达 240 伏的电路。然而，增加高电压电路可能非常危险，因此只有在你熟悉电气工作或能寻求专业建议时，才应进行此操作。
- en: '**FIGURE 12-2:** A 5V single-channel relay'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 12-2：** 一个 5V 单通道继电器'
- en: '![Image](../images/f12-02.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f12-02.jpg)'
- en: '**THE BUILD**'
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建步骤**'
- en: Insert the LM35 sensor into the breadboard with the front of the sensor (the
    flat surface with text on it) facing you. Connect the left pin to the +5V rail
    on the breadboard, the center pin to Arduino A0, and the right pin to the GND
    rail, as shown in the following table.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 LM35 传感器插入面包板，传感器的前面（印有文字的平面）朝向你。将左引脚连接到面包板上的 +5V 导轨，中间引脚连接到 Arduino 的 A0
    引脚，右引脚连接到 GND 导轨，具体连接方式见下表。
- en: '| **LM35 SENSOR** | **ARDUINO** |'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **LM35 传感器** | **Arduino** |'
- en: '| --- | --- |'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Left pin | +5V |'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 左引脚 | +5V |'
- en: '| Center pin | A0 |'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 中间引脚 | A0 |'
- en: '| Right pin | GND |'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 右引脚 | GND |'
- en: There are a number of connections on the relay, as shown in [Figure 12-3](ch12.xhtml#ch12fig3).
    If your relay module has a different layout, adapt the wiring accordingly (using
    the data sheet or the pin markings on the module). Our relay has an LED marked
    PWR to indicate when it’s receiving power, and another LED to show when the electromagnetic
    switch is on (you can usually hear this, too, as it makes a satisfying clicking
    noise). The relay can be set to be `HIGH` or `LOW` when triggered, as indicated
    by a small jumper switch or pins. For our project, make sure the jumper is set
    to `HIGH` so the relay will send power when it is triggered.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继电器上有多个连接，如[图 12-3](ch12.xhtml#ch12fig3)所示。如果你的继电器模块布局不同，请根据数据表或模块上的引脚标记调整接线。我们的继电器有一个标记为
    PWR 的 LED，表示它正在接收电源，还有另一个 LED 显示电磁开关是否开启（你通常也能听到它发出令人满意的“咔嗒”声）。继电器可以在触发时设置为`HIGH`或`LOW`，这可以通过小跳线开关或引脚进行设置。对于我们的项目，确保跳线设置为`HIGH`，这样当继电器被触发时，它就会发送电源。
- en: '**FIGURE 12-3:** Relay connections (your relay pins may differ, so follow the
    data sheet provided)'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 12-3：** 继电器连接（你的继电器引脚可能不同，因此请遵循提供的数据表）'
- en: '![Image](../images/f12-03.jpg)'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Image](../images/f12-03.jpg)'
- en: As [Figure 12-3](ch12.xhtml#ch12fig3) shows, the pins on the right side of the
    relay module are Signal, GND, and +5V. Attach the relay’s Signal pin to Arduino
    pin 5, GND to Arduino GND, and +5V to the Arduino power via the breadboard rails.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如[图 12-3](ch12.xhtml#ch12fig3)所示，继电器模块右侧的引脚分别是信号、GND 和 +5V。将继电器的信号引脚连接到 Arduino
    引脚 5，GND 连接到 Arduino 的 GND，引脚 +5V 通过面包板的电源轨连接到 Arduino 的电源。
- en: '| **5V RELAY** | **ARDUINO** |'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **5V 继电器** | **Arduino** |'
- en: '| --- | --- |'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Signal | Pin 5 |'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 信号 | 引脚 5 |'
- en: '| GND | GND |'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| GND | GND |'
- en: '| +5V | +5V |'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| +5V | +5V |'
- en: On the left side of the relay module are the connections for the electromagnetic
    switch ([Figure 12-3](ch12.xhtml#ch12fig3)). The center pin is the common connection;
    the left pin is marked NO for *normally open*, meaning the circuit is broken and
    the default state is off; and the right pin is marked NC for *normally closed*,
    meaning the default state is on. If the relay is not switched, the common pin
    is connected to the NC pin. If the relay is switched, the common pin is connected
    to the NO pin. Because we want the circuit to be off until we use the switch,
    we will use the NO pin.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继电器模块的左侧是电磁开关的连接（[图 12-3](ch12.xhtml#ch12fig3)）。中间引脚是公共连接；左侧引脚标有 NO，表示*常开*，意味着电路是断开的，默认状态是关闭的；右侧引脚标有
    NC，表示*常闭*，默认状态是开启的。如果继电器没有切换，公共引脚将连接到 NC 引脚。如果继电器切换，公共引脚将连接到 NO 引脚。由于我们希望电路在使用开关之前保持关闭状态，所以我们将使用
    NO 引脚。
- en: Next, connect the black GND wire of the fan to the GND wire of the 9V battery.
    Then, as shown in the following table, attach the red positive wire of the fan
    to the common pin on the relay, and connect the positive wire of the 9V battery
    to NO on the relay.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将风扇的黑色 GND 线连接到 9V 电池的 GND 线。然后，按照下表所示，将风扇的红色正极线连接到继电器的公共引脚，并将 9V 电池的正极线连接到继电器的
    NO 引脚。
- en: '| **5V RELAY** | **FAN/9V BATTERY** |'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **5V 继电器** | **风扇/9V 电池** |'
- en: '| --- | --- |'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| NO (normally open) | 9V battery’s positive wire |'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| NO（常开） | 9V 电池的正极 |'
- en: '| Common | Fan’s positive wire |'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 公共 | 风扇正极线 |'
- en: '| NC (normally closed) | Not connected |'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| NC（常闭） | 未连接 |'
- en: Connect the breadboard power rails to each other and to the Arduino GND and
    +5V pins.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将面包板的电源轨连接到彼此，并连接到 Arduino 的 GND 和 +5V 引脚。
- en: Make sure your setup matches the circuit diagram in [Figure 12-4](ch12.xhtml#ch12fig4),
    and then upload the code in “[The Sketch](ch12.xhtml#ch00lev1sec49)” on [page
    103](ch12.xhtml#page_103).
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的设置与[图 12-4](ch12.xhtml#ch12fig4)中的电路图一致，然后上传[第 103 页](ch12.xhtml#page_103)中的“[The
    Sketch](ch12.xhtml#ch00lev1sec49)”代码。
- en: '**FIGURE 12-4:** The circuit diagram for the temperature-controlled fan'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 12-4：** 温控风扇的电路图'
- en: '![Image](../images/f12-04.jpg)'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Image](../images/f12-04.jpg)'
- en: '**THE SKETCH**'
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**The Sketch**'
- en: In this sketch we first set the sensor pin for the LM35 as A0 on the Arduino,
    define the fan as pin 5, and create a variable to read the value from the LM35\.
    We then create a variable to store the temperature and set the fan pin as an output.
    A small calculation turns the voltage reading from the sensor into a temperature
    value in degrees Fahrenheit. We then start the Serial Monitor so you can see the
    LM35 reading value when the Arduino is connected to your PC, which is handy for
    making sure the sensor is working correctly. A loop reads the sensor every second,
    and if the temperature reaches 71 degrees Fahrenheit, power is sent to the fan
    pin, which triggers the relay and switches on the fan. If the temperature falls
    below 71, the relay switches the fan off.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在此草图中，我们首先将 LM35 的传感器引脚设置为 Arduino 的 A0，将风扇定义为引脚 5，并创建一个变量来读取 LM35 的值。然后，我们创建一个变量来存储温度，并将风扇引脚设置为输出。一个小的计算将传感器的电压读数转换为华氏度的温度值。接着，我们启动串口监视器，这样你就可以看到
    Arduino 连接到 PC 时的 LM35 读数值，这对于确保传感器正常工作非常有用。一个循环每秒读取传感器，如果温度达到 71 华氏度，电源会传送到风扇引脚，继电器触发并打开风扇。如果温度降到
    71 以下，继电器会关闭风扇。
- en: '#define SENS_PIN A0 // Defines A0 pin as "sensor"'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '#define SENS_PIN A0 // 将 A0 引脚定义为“传感器”'
- en: '#define FAN_PIN 5'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '#define FAN_PIN 5'
- en: int Vin; // Reads value from Arduino pin
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: int Vin; // 从 Arduino 引脚读取值
- en: float Temperature; // Receives converted voltage value to temp
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: float Temperature; // 接收转换后的电压值并转换为温度
- en: float TF; // Receives converted value in °F
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: float TF; // 接收转换后的 °F 值
- en: void setup() {
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: void setup() {
- en: pinMode(FAN_PIN, OUTPUT); // Fan pin as an output
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: pinMode(FAN_PIN, OUTPUT); // 将风扇引脚设置为输出
- en: Serial.begin(9600); // Start Serial Monitor
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Serial.begin(9600); // 启动串口监视器
- en: '}'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: void loop() {
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: void loop() {
- en: // Tells Arduino to read pin and stores value in Vin
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: // 告诉 Arduino 读取引脚并将值存储在 Vin 中
- en: Vin = analogRead(SENS_PIN);
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: Vin = analogRead(SENS_PIN);
- en: // Converts voltage value into temperature and
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: // 将电压值转换为温度并
- en: // stores value in Temperature (as °F)
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: // 将值存储在温度（°F）中
- en: Temperature = (500 * Vin) / 1023 * (1.8) + 32;
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 温度 = (500 * Vin) / 1023 * (1.8) + 32;
- en: TF = Temperature;
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: TF = 温度;
- en: 'Serial.print("Temperature: "); // Sends text to display screen'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 'Serial.print("Temperature: "); // 向显示屏发送文本'
- en: Serial.print(TF); // Shows value of temperature in Serial Monitor
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Serial.print(TF); // 在串口监视器中显示温度值
- en: Serial.println(" F"); // Writes F to indicate it is in Fahrenheit
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Serial.println(" F"); // 写入F，表示温度单位为华氏度
- en: if (TF > 71) { // If temperature is more than 71
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: if (TF > 71) { // 如果温度超过71度
- en: digitalWrite(FAN_PIN, HIGH); // Turn fan on
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: digitalWrite(FAN_PIN, HIGH); // 打开风扇
- en: '}'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else if (TF < 71) {
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: else if (TF < 71) {
- en: digitalWrite(FAN_PIN, LOW); // Or keep fan off
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: digitalWrite(FAN_PIN, LOW); // 或者保持风扇关闭
- en: '}'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: delay(1000); // Waits for a second to read the pin again
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: delay(1000); // 等待一秒钟以再次读取引脚
- en: '}'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '**TROUBLESHOOTING**'
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**故障排除**'
- en: '**Q.** *The fan does not turn on when expected.*'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '**问：** *风扇在预期的时间没有开启。*'
- en: • Make sure the connections to the LM35 match the tables in this chapter and
    the circuit diagram in [Figure 12-4](ch12.xhtml#ch12fig4). Connect the Arduino
    to your computer and open the IDE Serial Monitor to check whether the Arduino
    is reading the sensor correctly. If the reading is incorrect, recheck your wiring
    or change the sensor to another.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: • 确保LM35的连接与本章中的表格以及[图12-4](ch12.xhtml#ch12fig4)中的电路图匹配。将Arduino连接到计算机，并打开IDE串口监视器检查Arduino是否正确读取传感器。如果读取结果不正确，请重新检查接线或更换传感器。
- en: • Remember, your relay may not match the one used here, so the connections may
    be in a slightly different order; alter the wiring according to your relay and
    data sheet.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: • 请记住，您的继电器可能与这里使用的继电器不同，因此连接顺序可能会有所不同；根据您的继电器和数据表调整接线。
- en: • The fan used here takes between 9 and 12 volts, so a 9V battery has enough
    power to run it. If you used a fan that requires more voltage, you will need to
    match its voltage input accordingly with a more powerful battery.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: • 这里使用的风扇需要9到12伏特的电压，因此9V电池有足够的电力来驱动它。如果使用的是需要更高电压的风扇，则需要根据风扇的电压要求，使用更强大的电池来匹配其电压输入。
