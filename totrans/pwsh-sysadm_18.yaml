- en: '15'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PROVISIONING A VIRTUAL ENVIRONMENT
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: '*PowerLab* is a final, massive project using all the concepts you’ve learned
    and more. It’s a project that automates the provisioning of Hyper-V virtual machines
    (VMs) all the way up to installing and configuring services including SQL and
    IIS. Imagine being able to run a single command such as `New-PowerLabSqlServer`,
    `New-PowerLabIISServer`, or even `New-PowerLab`, wait a few minutes, and have
    a fully configured machine (or machines) pop out. That’s what you’re going to
    get if you stick with me throughout the rest of the book.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of the PowerLab project is to remove all the repetitive, time-consuming
    tasks required to bring up a test environment or a lab. When you’re done, you
    should have just a handful of commands to build an entire Active Directory forest
    from nothing but a Hyper-V host and a few ISO files.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: I’ve purposefully not covered *everything* that’s going into PowerLab in Parts
    I and II. Instead, I challenge you to notice these areas and come up with unique
    solutions on your own. After all, in programming there are always lots of ways
    to accomplish the same task. If you get stuck, please feel free to reach out to
    me on Twitter at @adbertram.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: By building a project of this scale, you will not only cover hundreds of PowerShell
    topics, but also see just how powerful a scripting language can be and come away
    with a substantial time-saving utility.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll get PowerLab started by creating the bare-bones `PowerLab`
    module. Then you’ll add the ability to automate the creation of a virtual switch,
    VM, and virtual hard disk (VHD).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: PowerLab Module Prerequisites
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To follow along with all the code examples you’ll work with in [Part III](part3.xhtml#part3),
    you need to meet a few prerequisites. Each chapter in this part has a “Prerequisites”
    section. This is to ensure that you always know what to expect.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'For the project in this chapter, you need a Hyper-V host with the following
    configuration:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: A network adapter
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IP: 10.0.0.5 (optional, but to follow along exactly, you need this IP)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subnet mask: 255.255.255.0'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A workgroup
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At least 100GB of available storage
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Server 2016 with a full GUI
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To create a Hyper-V server, you need to install the Hyper-V role on the Windows
    server you intend to use. You can expedite the setup process by downloading and
    running the Hyper-V *Setup.ps1* script in the book’s resources at *[https://github.com/adbertram/PowerShellForSysadmins/](https://github.com/adbertram/PowerShellForSysadmins/)*.
    This will set up Hyper-V and create a few necessary folders.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '*If you’re planning on following along word for word, please run the associated
    chapter’s Pester prerequisite script* (Prerequisites.Tests.ps1) *to confirm that
    your Hyper-V server is set up as expected. These tests will confirm that your
    lab environment is set up exactly as mine is. Run* Invoke-Pester*, passing it
    the prerequisite script, as in [Listing 15-1](ch15.xhtml#ch15list1). For the rest
    of the book, all code will be executed on the Hyper-V host itself.*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 15-1: Running Pester prerequisite checks for Hyper-V work*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: If you have successfully set up your environment, the output should confirm
    five passes. Once you’ve confirmed that your environment is all set up and ready
    go, you can get started on the project!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Module
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Because you know that you’ll need to automate a potentially large number of
    tasks that all relate to one another, you should create a PowerShell module. As
    you learned in [Chapter 7](ch07.xhtml#ch7), a PowerShell module is a great way
    to combine lots of like-functions into one unit; that way, you can easily manage
    all the code necessary to perform the tasks surrounding a specific purpose. PowerLab
    is no different. There’s no reason to think about everything at once, so start
    small—add functionality, test, and repeat.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Blank Module
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: First, you need to create a blank module. To do that, remote-desktop to your
    soon-to-be Hyper-V host and log in as the local administrator—or any account in
    the local administrators group. You’ll build this module directly on the Hyper-V
    host to ease VM creation and administration. This means you’ll use an RDP session
    to connect to your Hyper-V host’s console session. Then you’ll create the module
    folder, the module itself (the *.psm1* file), and the optional manifest (the *.psd1*
    file).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Since you’re logged in via the local administrator account and may one day allow
    others to use your PowerLab module, create the module in *C:\ProgramFiles\WindowsPowerShell\Modules*.
    This will allow you to access the module when logged in as any administrative
    user on the host.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open a PowerShell console and choose **Run as Administrator**. Then,
    create a PowerLab module folder by using the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, create a blank text file called *PowerLab.psm1*. Use the `New-Item` command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Creating a Module Manifest
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Now, create a module manifest. To create a module manifest, use the handy `New-ModuleManifest`
    command. This command creates a template manifest, which you can then open in
    a text editor and tweak after the initial file is built, if necessary. Here are
    the parameters I used to build the template manifest:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Feel free to modify the parameter values to suit your needs.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Using Built-In Prefixes for Function Names
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A function doesn’t necessarily need a specific name. However, when you’re building
    a module that is typically a group of related functions, it’s always a good idea
    to preface the noun part of the function with the same label. For example, your
    project is called *PowerLab*. In this project, you’ll build functions that all
    relate to that common theme. To differentiate the functions in PowerLab from the
    functions in other modules you may have loaded, you can add the name of the module
    before the actual noun portion of the name. This means that most functions’ nouns
    will start with the term *PowerLab*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: However, not all functions will start with the name of the module. Examples
    include helper functions that only assist other functions and will never be called
    by a user.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'When you’re sure you want all function nouns to use the same prefix without
    having to explicitly define it in the function name, the module manifest has an
    option called `DefaultCommandPrefix`. This option will force PowerShell to preface
    the noun with a particular string. For example, if you define the `DefaultCommandPrefix`
    key in a manifest and create a function inside the module called `New-Switch`,
    when the module is imported, the function won’t be available for use as `New-Switch`
    but as `New-PowerLabSwitch`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: I prefer *not* to go with this approach because it forcefully prefaces *all*
    function name nouns inside the module with that string.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Importing the New Module
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve built the manifest, you’re ready to see whether it imports successfully.
    Since you haven’t written any functions yet, the module won’t be able to do anything,
    but it’s important to see whether PowerShell can see the module. If you see the
    following result, you’re good to go.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If the PowerLab module doesn’t appear at the bottom of the output, return to
    the previous steps. In addition, check to ensure that you have the PowerLab folder
    created under *C:\Program Files\WindowsPowerShell\Modules* with *PowerLab.psm1*
    and *PowerLab.psd1* files inside.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Automating Virtual Environment Provisioning
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you have built the module’s structure, you can begin to add functionality
    to it. Since the task of creating a server, such as SQL or IIS, has various steps
    that depend on one another, you’ll first work on automating the creation of a
    virtual switch, virtual machine, and virtual disk. Then you’ll automate deploying
    the operating system to these VMs, and finally, you’ll install SQL Server and
    IIS on these VMs.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Virtual Switches
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Before you can begin automating the creation of VMs, you need to ensure that
    a virtual switch is set up on the Hyper-V host. *Virtual switches* allow VMs to
    communicate with client machines and other VMs built on a host.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Virtual Switch Manually
  id: totrans-50
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Your virtual switch will be an *external* switch, called `PowerLab`. Chances
    are, a switch with this name isn’t already on the Hyper-V host, but just to be
    sure, list all the virtual switches on the host. You’ll never regret checking
    first.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: 'To see all of the switches set up on your Hyper-V host, use the Get-VmSwitch
    command. Once you confirm that the PowerLab switch doesn’t exist, create a new
    virtual switch with the `New-VmSwitch` command, specifying the name (`PowerLab`)
    and the type of switch:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看在 Hyper-V 主机上设置的所有交换机，使用 Get-VmSwitch 命令。确认 PowerLab 交换机不存在后，使用 `New-VmSwitch`
    命令创建一个新的虚拟交换机，指定名称（`PowerLab`）和交换机类型：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Since you need your VMs to be able to communicate with hosts outside Hyper-V,
    you pass the value `External` to the `SwitchType` parameter. Whoever you share
    this project with will also need to create an external switch.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你需要让虚拟机能够与 Hyper-V 外部的主机通信，因此你将值 `External` 传递给 `SwitchType` 参数。无论你与谁分享这个项目，他们也需要创建一个外部交换机。
- en: With your switch created, it’s now time to create the PowerLab module’s first
    function.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 交换机创建完成后，现在是时候创建 PowerLab 模块的第一个函数了。
- en: Automating VM Switch Creation
  id: totrans-56
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 自动化虚拟机交换机创建
- en: 'The first PowerLab function, called `New-PowerLabSwitch`, creates the Hyper-V
    switch. This function isn’t too complicated. In fact, without it, you would simply
    need to execute a single command at the prompt—that is, `New-VmSwitch`. But if
    you wrap that Hyper-V command inside a custom function, you will have the ability
    to perform other work: adding any kind of default configuration to the switch,
    for example.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 PowerLab 功能，称为 `New-PowerLabSwitch`，用于创建 Hyper-V 交换机。这个功能并不复杂。事实上，如果没有它，你只需要在命令行中执行一个简单的命令——也就是
    `New-VmSwitch`。但是，如果你将这个 Hyper-V 命令包装成一个自定义函数，你将能够执行其他工作：例如，为交换机添加任何类型的默认配置。
- en: I am a big fan of *idempotency*, which is a fancy word that means “regardless
    of the state in which the command executes, it performs the same task every time.”
    In this example, if the task of creating the switch were not idempotent, then
    running `New-VmSwitch` would result in an error if the switch already existed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我是 *幂等性* 的忠实粉丝，这个词的意思是“无论命令执行的状态如何，它每次都会执行相同的任务。”在这个例子中，如果创建交换机的任务不是幂等的，那么如果交换机已存在，运行
    `New-VmSwitch` 就会导致错误。
- en: To remove the requirement to manually check whether the switch is created before
    attempting to create a switch, you can use the `Get-VmSwitch` command. This command
    checks whether the switch has been created. Then, if—and only if—the switch doesn’t
    exist will you attempt to create a new switch. This allows you to run `New-PowerLabSwitch`
    in any environment and know that it will always create the virtual switch without
    returning an error—regardless of the state of the Hyper-V host.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了去除手动检查交换机是否创建的要求，你可以使用 `Get-VmSwitch` 命令。这个命令会检查交换机是否已创建。然后，只有当交换机不存在时，你才会尝试创建新的交换机。这使得你可以在任何环境中运行
    `New-PowerLabSwitch`，并且知道它将始终创建虚拟交换机，而不会返回错误——无论 Hyper-V 主机的状态如何。
- en: Open the *C:\Program Files\WindowsPowerShell\Modules\PowerLab\PowerLab.psm1*
    file and create the `New-PowerLabSwitch` function, as shown in [Listing 15-2](ch15.xhtml#ch15list2).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 *C:\Program Files\WindowsPowerShell\Modules\PowerLab\PowerLab.psm1* 文件并创建
    `New-PowerLabSwitch` 函数，如 [Listing 15-2](ch15.xhtml#ch15list2) 所示。
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 15-2: `New-PowerLabSwitch` function in the `PowerLab` module*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 15-2: `New-PowerLabSwitch` 函数在 `PowerLab` 模块中的实现*'
- en: This function first checks to see whether the switch is already created ❶. If
    it isn’t, the function creates it ❷. If the switch is already created, the function
    will simply return a verbose message to the console ❸.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数首先检查交换机是否已经创建 ❶。如果没有，函数会创建它 ❷。如果交换机已经创建，函数会向控制台返回一条详细信息 ❸。
- en: Save the module and then force it to import again by using Import-Module -Name
    PowerLab -Force.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 保存模块，然后通过使用 Import-Module -Name PowerLab -Force 命令强制重新导入。
- en: When you add new functions to the module, you must import the module again.
    If a module is already imported, you must use the `Force` parameter with `Import-Module`
    to force PowerShell to import it again. Otherwise, PowerShell will see that the
    module has already been imported and skip it.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当你向模块添加新功能时，必须重新导入模块。如果模块已经导入，你必须使用 `Force` 参数与 `Import-Module` 一起强制 PowerShell
    重新导入它。否则，PowerShell 会看到模块已经被导入，并跳过它。
- en: 'Once you’ve imported the module again, the `New-PowerLabSwitch` function should
    be available to you. Run this command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你重新导入该模块，`New-PowerLabSwitch` 函数应该就可以使用了。运行以下命令：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Notice that you don’t receive an error, but instead, a useful verbose message
    saying the switch has already been created. This is because you passed the optional
    `Verbose` parameter to the function. Defaults were chosen for the `SwitchName`
    and `SwitchType` parameters, since these will usually be the same.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Creating Virtual Machines
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve set up a virtual switch, it’s time to create a VM. For this
    demo, you’ll create a generation 2 VM, called LABDC, with 2GB attached to the
    virtual switch you just built in the *C:\PowerLab\VMs* folder on the Hyper-V host.
    I’ve chosen *LABDC* as the name because this will eventually be our Active Directory
    domain controller. This VM will eventually be the domain controller you’ll use
    for your fully built lab.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'First, take a look at all the existing VMs and ensure that one doesn’t already
    exist with the same name. Since you already know the name of the VM you want to
    create, pass that value to the `Name` parameter of `Get-Vm`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `Get-Vm` command returns an error when it can’t find the VM with the specified
    name. Because you’re just checking whether it exists, and it doesn’t necessarily
    matter to us whether it does or doesn’t at this point, use the `ErrorAction` parameter
    with the `SilentlyContinue` value to ensure that the command returns nothing if
    the VM doesn’t exist in your automation script later. You’re not using a `try/catch`
    here for simplicity’s sake.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: This technique works only if the command returns a nonterminating error. If
    the command returns a terminating error, you’ll have to either look into returning
    all the objects and filtering them with `Where-Object` or enclosing the command
    in a `try/catch` block.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Creating a VM Manually
  id: totrans-75
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The VM doesn’t exist, which means you need to create it. To create a VM, you
    need to run the `Get-Vm` command and pass it the values that you defined at the
    start of this section.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You should now have a VM, but confirm this by running Get-Vm again.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Automating VM Creation
  id: totrans-79
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'To automate creating a simple VM, you again need to add another function. This
    function will follow the same pattern as that used to create a new virtual switch:
    make an idempotent function that performs a task regardless of the state of the
    Hyper-V host.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Enter the `New-PowerLabVm` function, as shown in [Listing 15-3](ch15.xhtml#ch15list3),
    into your *PowerLab.psm1* module.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 15-3: `New-PowerLabVm` function in the `PowerLab` module*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: This function checks whether the VM already exists ❶. If it doesn’t, the function
    will create one ❷. If it does, the function will display a verbose message to
    the console ❸.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'Save *PowerLab.psm1* and execute your new function at the prompt:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Again, when you run this command, you can create a VM with the specified parameter
    values—whether that VM already exists (after you force the module to be imported
    again) or not.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Virtual Hard Disks
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You now have a VM attached to a switch, but a VM isn’t any good without storage
    attached to it. To take care of that, you need to create a local virtual hard
    disk (VHD) and connect it to a VM.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '*In [Chapter 16](ch16.xhtml#ch16), you’ll use a community script that converts
    an ISO file into a VHD. Therefore, you don’t need to create a VHD. But if you
    aren’t planning on automating the operating system deployment, or if you need
    to automate the VHD creation as part of another script, I still recommend that
    you complete this section.*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Creating a VHD Manually
  id: totrans-92
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'To create a VHD file, you need only a single command: `New-Vhd`. In this section,
    you’ll create a VHD that’s capable of growing to 50GB in size; and to save space,
    you’ll set the VHD to dynamically size.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: You first need to create a folder on the Hyper-V host at *C:\PowerLab\VHDs*
    to place the VHD. Be sure to name your VHD with the same name as the VM you intend
    to attach it to in order to keep things simple.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the VHD with `New-Vhd`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You pass `New-Vhd` the path ❶ and the VHD size ❷, and, finally, indicate that
    you want it to dynamically size ❸.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'Confirm that you successfully created the VHD on your Hyper-V host with the
    `Test-Path` command. If `Test-Path` returns `True`, you were successful:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now you need to attach the VHD to the VM you created earlier. To do this, you
    use the `Add-VMHardDiskDrive` command. But because you’re *not* going to be attaching
    a VHD to LABDC—the OS deployment automation, in [Chapter 16](ch16.xhtml#ch16),
    will do that—create another VM, called MYVM, to attach to the VHD:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `Add-VMHardDiskDrive` command accepts the object type that the `Get-VM`
    command returns for its pipeline input so you can pass the VM directly from `Get-VM`
    to `Add-VMHardDiskDrive`—specifying the path to the VHD on the Hyper-V host ❶.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Immediately after, use `Get-VMHardDiskDrive` to confirm that the VHDX was added
    successfully ❷.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Automating VHD Creation
  id: totrans-104
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: You can add another function to your module to automate the process of creating
    a VHD and attaching it to a VM. When you create scripts or functions, accounting
    for various configurations is important.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 15-4](ch15.xhtml#ch15list4) defines the `New-PowerLabVhd` function,
    which creates a VHD and attaches a VM to it.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '*Listing 15-4: `New-PowerLabVhd` function in the `PowerLab` module*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'This function supports both dynamic and fixed sizing ❷, and it accounts for
    four individual states:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: The VHD already exists ❶.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The VM to attach the VHD to doesn’t exist ❸.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The VM to attach the VHD to exists, but the VHD hasn’t been connected yet ❹.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The VM to attach the VHD to exists, and the VHD has already been attached ❺.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Function design is a whole other matter entirely. It takes years of coding and
    practice to be able to create a script or function that’s resilient across many
    scenarios. It’s an art that has never truly been perfected, but if you’re able
    to think through as many different ways a problem may occur and account for those
    up front, your function will be that much better off. However, don’t go *too*
    overboard and spend hours on a function or script making sure *every* detail is
    covered! This is just code. You can change it later.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 函数设计是一个完全不同的领域。要能够创建一个在多种场景下都能正常运行的脚本或函数，需要多年的编码和实践。这是一门艺术，至今尚未完全完善，但如果你能预想到问题可能出现的多种方式，并在一开始就考虑到这些情况，你的函数就会更好。然而，不要*过度*投入，花费几个小时在一个函数或脚本上，确保*每个*细节都被覆盖！这只是代码，你可以在以后进行修改。
- en: Executing the New-PowerLabVhd Function
  id: totrans-115
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 执行了New-PowerLabVhd函数
- en: 'You can execute this code in various states and account for each state. Let’s
    test multiple states to ensure that this automation script works in each situation:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在不同的状态下执行这段代码，并考虑每种状态。让我们测试多种状态，确保这个自动化脚本在每种情况下都能正常工作：
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, you’re not quite testing in the formal sense. Instead, you’re putting
    your new function through its paces by forcing it to run through each of the code
    paths you defined.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你并不是以正式的方式进行测试。相反，你通过强制让你的新函数运行你定义的每条代码路径，来测试它的表现。
- en: Testing the New Functions with Pester
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Pester测试新函数
- en: You should now be able to automate the creation of a Hyper-V VM, but you should
    always build Pester tests for everything you create in order to make sure everything
    works as you expect, as well as monitor your automation over time. You’ll build
    Pester tests for all the work you do in the rest of the book. You can find the
    Pester tests in this book’s resources at [*https://github.com/adbertram/PowerShellForSysadmins/*](https://github.com/adbertram/PowerShellForSysadmins/).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能够自动化创建Hyper-V虚拟机了，但你应该始终为你创建的每个功能编写Pester测试，以确保一切按预期工作，并且随着时间的推移监控你的自动化。在本书的其余部分，你将为所有工作编写Pester测试。你可以在本书的资源中找到这些Pester测试，网址是[*https://github.com/adbertram/PowerShellForSysadmins/*](https://github.com/adbertram/PowerShellForSysadmins/)。
- en: 'In this chapter, you accomplished four things:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你完成了四个任务：
- en: Created a virtual switch
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了一个虚拟交换机
- en: Created a VM
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了一个虚拟机
- en: Created a VHDX
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了一个VHDX
- en: Attached the VHDX to the VM
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将VHDX附加到虚拟机
- en: I broke the Pester tests for this chapter into sections that correspond to the
    four accomplishments. Breaking tests into stages like this helps keep your tests
    organized.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我把这一章的Pester测试分成了几个部分，每部分对应四个成果。像这样将测试分阶段有助于保持测试的条理性。
- en: Let’s run the test against the code you wrote in this chapter. To run the test
    script, make sure you downloaded the *Automating-Hyper-V.Tests.ps1* script from
    the book’s resources. In the following code, the test script is located in the
    root of *C:\*, but your path may be different depending on where you downloaded
    the resource files.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行这个测试，验证你在这一章编写的代码。要运行测试脚本，确保你已经从本书的资源中下载了*Automating-Hyper-V.Tests.ps1*脚本。在以下代码中，测试脚本位于*C:\*的根目录，但你的路径可能不同，具体取决于你下载资源文件的位置。
- en: '[PRE18]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: All four tests pass, so you’re good to move on to the next chapter.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 所有四个测试都通过了，所以你可以继续进行下一章了。
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: You created the foundation for your first real-world PowerShell automation project!
    I hope you’re already seeing just how much time you can save by automating with
    PowerShell! By using a freely available PowerShell module from Microsoft, you
    were able to run just a few commands to quickly create a virtual switch, VM, and
    disk drive. Microsoft gave you the commands, but it was up to you to build the
    logic around them to make everything flow seamlessly.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经为第一个真正的PowerShell自动化项目奠定了基础！希望你已经看到，通过PowerShell自动化可以节省多少时间！通过使用微软提供的免费PowerShell模块，你能够快速运行几个命令，轻松创建虚拟交换机、虚拟机和磁盘驱动器。微软给你了命令，但最终还是你自己搭建了周围的逻辑，使一切无缝衔接。
- en: You might now see that it’s possible to build scripts on the fly that work,
    but by thinking ahead and adding conditional logic, your scripts can account for
    more situations.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能已经意识到，可以即时编写有效的脚本，但通过提前思考并添加条件逻辑，你的脚本可以应对更多情况。
- en: In the next chapter, you’ll take the VM you just created and automate deploying
    an operating system to it with little more than an ISO file.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将使用刚刚创建的虚拟机，自动化部署操作系统，几乎只需要一个ISO文件。
