- en: '**5'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**5'
- en: Rainbow Light Strip**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 彩虹灯带**
- en: In this project you’ll create a rainbow light effect using an addressable RGB
    LED strip. You’ll use a pushbutton to start and stop the rainbow effect, and you’ll
    control the rainbow’s speed and brightness using two potentiometers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用可寻址 RGB LED 灯带创建彩虹灯效。你将使用一个按键来启动和停止彩虹效果，并通过两个电位器来控制彩虹的速度和亮度。
- en: '![image](../images/f0071-01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0071-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需零件**'
- en: Raspberry Pi
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi
- en: Breadboard
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 面包板
- en: WS2812B addressable RGB LED strip
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: WS2812B 可寻址 RGB LED 灯带
- en: Logic level conver ter module BSS 138
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑电平转换器模块 BSS 138
- en: Two 10 kΩ potentiometers
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 10 kΩ 电位器
- en: MCP 3 008 chip
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: MCP 3008 芯片
- en: Pushbutton
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 按键
- en: Three header pins
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 三个头针
- en: Jumper wires
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线
- en: '**SOFTWARE REQUIRED**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需软件**'
- en: WS2 81X library
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: WS2 81X 库
- en: '**INTRODUCING THE WS2812B ADDRESSABLE RGB LED STRIP**'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍 WS2812B 可寻址 RGB LED 灯带**'
- en: For the rainbow light effect, you’ll use the WS2812B RGB LED strip, which is
    available in many different sizes. The strip comes in a reel, as shown in [Figure
    5-1](ch05.xhtml#ch05fig1), and you can cut off as long a section as you need.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于彩虹灯效，你将使用 WS2812B RGB LED 灯带，这种灯带有多种不同的尺寸可供选择。灯带以卷轴形式出现，如 [图 5-1](ch05.xhtml#ch05fig1)
    所示，你可以根据需要剪下所需长度的部分。
- en: '![image](../images/f0072-01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0072-01.jpg)'
- en: '**FIGURE 5-1:** WS2812B addressable RGB LED strip on a reel'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-1：** 卷轴上的 WS2812B 可寻址 RGB LED 灯带'
- en: The strip shown in [Figure 5-1](ch05.xhtml#ch05fig1) is 5 meters long with 300
    addressable WS2812B RGB LEDs wired in series, and later you’ll cut a section of
    14 LEDs to use in this project. There are cutting marks, shown in [Figure 5-2](ch05.xhtml#ch05fig2),
    along the entire length of the strip.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [图 5-1](ch05.xhtml#ch05fig1) 所示，灯带长 5 米，包含 300 个串联的可寻址 WS2812B RGB LED，稍后你将剪下一段
    14 个 LED 的部分用于本项目。灯带的整个长度上都有切割标记，如 [图 5-2](ch05.xhtml#ch05fig2) 所示。
- en: '![image](../images/f0072-02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0072-02.jpg)'
- en: '**FIGURE 5-2:** WS2812B addressable RGB LED strip pins'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-2：** WS2812B 可寻址 RGB LED 灯带引脚'
- en: The color and brightness of each LED can be controlled individually, allowing
    you to produce amazing effects easily. Each LED has an integrated circuit (IC)
    built right in, which means you can control the whole strip using just one GPIO
    pin, connected to the middle pin—the Data pin—at the end of the strip (see [Figure
    5-2](ch05.xhtml#ch05fig2)).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 LED 的颜色和亮度可以单独控制，从而轻松实现惊人的效果。每个 LED 都内置了集成电路（IC），这意味着你只需通过一个 GPIO 引脚，连接到灯带末端的中间引脚——数据引脚，就能控制整个灯带（参见
    [图 5-2](ch05.xhtml#ch05fig2)）。
- en: 'Prepare the LED strip for this project as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤为这个项目准备 LED 灯带：
- en: Cut a strip of 14 LEDs along the cutting marks shown on the strip.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照灯带上的切割标记剪下一段包含 14 个 LED 的灯带。
- en: Solder header pins to the 5 V, Data, and GND pins as shown in [Figure 5-2](ch05.xhtml#ch05fig2).
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如 [图 5-2](ch05.xhtml#ch05fig2) 所示，将头针焊接到 5V、数据和 GND 引脚。
- en: '**NOTE**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ve found that a Raspberry Pi 5 V pin (such as pin 2 or pin 4) is capable
    of powering a strip of 20 LEDs or fewer, but in projects where you’re using a
    longer strip, you’ll need to use an external 5 V power supply to provide enough
    current.*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们发现，Raspberry Pi 的 5V 引脚（例如引脚 2 或引脚 4）能够为 20 个 LED 或更少的灯带供电，但在使用较长灯带的项目中，你需要使用外部
    5V 电源来提供足够的电流。*'
- en: Now you need to figure out your power supply. The LED strip requires a 5 V power
    source. You can determine the amps you need from the amount of power each LED
    requires. An individual LED draws up to 60 mA at full brightness (which produces
    white light), but since you’ll rarely need all LEDs at their maximum value for
    any length of time, you can safely estimate 20 mA per LED. So if your strip is
    14 LEDs long, you’ll need a 5 V power source with approximately 20 × 14 = 280
    mA.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你需要确定你的电源。LED 灯带需要一个 5V 电源。你可以通过每个 LED 所需的功率来确定所需的电流。每个 LED 在全亮时会消耗最多 60 毫安（这时产生白光），但由于你很少需要所有
    LED 长时间以最大亮度运行，你可以安全地估算每个 LED 需要 20 毫安。因此，如果你的灯带有 14 个 LED，你将需要一个大约为 20 × 14 =
    280 毫安的 5V 电源。
- en: The Data pin that controls the strip needs a 5 V signal, but the Pi GPIOs operate
    at 3.3 V. To get the 5 V you need, you’ll use a component called a logic level
    converter.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 控制灯带的数据引脚需要一个 5V 信号，但 Raspberry Pi 的 GPIO 引脚工作在 3.3V。为了获得所需的 5V，你将使用一个名为逻辑电平转换器的组件。
- en: '**INTRODUCING THE LOGIC LEVEL CONVERTER**'
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍逻辑电平转换器**'
- en: A *logic level converter* allows you to convert 3.3 V signals to 5 V signals.
    There are many types of logic level converter, but in this project you’ll use
    the two-channel logic level converter bidirectional module shown in [Figure 5-3](ch05.xhtml#ch05fig3).
    (To find the same logic level converter module we’re using, search online for
    *logic level converter module bss138*.)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*逻辑电平转换器* 允许你将 3.3 V 信号转换为 5 V 信号。虽然有许多种逻辑电平转换器，但在本项目中，你将使用如图 [5-3](ch05.xhtml#ch05fig3)
    所示的双通道逻辑电平转换器双向模块。（要找到我们使用的相同逻辑电平转换器模块，可以在网上搜索 *logic level converter module bss138*。）'
- en: The bidirectionality of this module allows you to convert data in both ways—from
    3.3 V to 5 V and from 5 V to 3.3 V. You won’t need to convert 5 V to 3.3 V in
    this project, but having this more flexible model in your toolkit (versus a unidirectional
    model) can come in handy for future projects. This logic level converter also
    has two channels, channel 1 and channel 2\. In this project you’ll use only one
    of the channels to control the LED strip’s Data pin.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块的双向特性使你可以双向转换数据——从 3.3 V 到 5 V，以及从 5 V 到 3.3 V。尽管在本项目中你不需要将 5 V 转换为 3.3 V，但在你的工具包中拥有这种更灵活的模块（相对于单向模块）对未来的项目可能会有所帮助。这个逻辑电平转换器还有两个通道，通道
    1 和通道 2。在本项目中，你只会使用其中一个通道来控制 LED 条的数据引脚。
- en: '![image](../images/f0073-01.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0073-01.jpg)'
- en: '**FIGURE 5-3:** Two-channel logic level converter bidirectional module'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-3：** 双通道逻辑电平转换器双向模块'
- en: More likely than not, your module will come with the header pins separate, so
    you’ll need to solder the pins to it to make it breadboard-friendly. Break off
    two rows of six header pins, and solder one pin to each tiny hole.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能你的模块会单独提供插针，因此你需要将插针焊接到模块上以便适合面包板使用。断开两排六个插针，然后将每个插针焊接到一个小孔上。
- en: The module has a low-voltage side (left side of [Figure 5-3](ch05.xhtml#ch05fig3)),
    to which you attach everything that’s at 3.3 V, and a high-voltage side (right
    side), where you attach everything at 5 V. For this project, you need to use one
    of the pins highlighted in red, as you want to send 3.3 V data and convert it
    to 5 V.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块有一个低电压端（图 [5-3](ch05.xhtml#ch05fig3) 的左侧），你需要将 3.3 V 的部分连接到此端，另一个高电压端（右侧），你需要将
    5 V 的部分连接到此端。对于本项目，你需要使用红色标记的其中一个引脚，因为你需要发送 3.3 V 数据并将其转换为 5 V。
- en: To use the logic level converter, connect GND on both sides, 3.3 V on the low-voltage
    side, and 5 V on the high-voltage side. Then, connect data from the Pi on one
    of the TX1 pins—you can use either channel 1 or channel 2—and get the 5 V data
    on the corresponding TX0 pin.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用逻辑电平转换器，首先将两侧的 GND 连接，低电压端连接 3.3 V，高电压端连接 5 V。然后，从 Pi 的一个 TX1 引脚连接数据——你可以使用通道
    1 或通道 2——并在相应的 TX0 引脚上获取 5 V 数据。
- en: '**WIRING THE CIRCUIT**'
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**接线电路**'
- en: At this point, you should have cut your strip to size (14 LEDs) and soldered
    header pins both to the end of the strip and to the logic level converter. Now
    you’re ready to wire the circuit. To do so, you’ll connect together a pushbutton,
    two potentiometers via the MCP3008 chip, and the addressable RGB LED strip using
    the logic level converter module, as shown in [Figure 5-4](ch05.xhtml#ch05fig4).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你应该已经将 LED 条剪裁为合适的长度（14 个 LED），并将插针焊接到 LED 条的一端和逻辑电平转换器上。现在你可以开始接线了。你需要将一个按键、两个电位器通过
    MCP3008 芯片连接起来，并使用逻辑电平转换器模块连接可寻址 RGB LED 条，如图 [5-4](ch05.xhtml#ch05fig4) 所示。
- en: '![image](../images/f0074-01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0074-01.jpg)'
- en: '**FIGURE 5-4:** Circuit for controlling the RGB LED strip'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-4：** 控制 RGB LED 条的电路'
- en: '**WARNING**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*Remember that you can’t connect 5 V to the Pi GPIOs, as that can permanently
    damage your board.*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*请记住，不能将 5 V 直接连接到 Pi 的 GPIO 引脚，否则会永久损坏你的板子。*'
- en: '**NOTE**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*To identify the MCP3008 pins, orient the chip so it’s facing you with the
    half-circle cutout at the top. The first pin is the top left and the last pin
    is the top right. See [“Analog-to-Digital Converters”](ch03.xhtml#lev41) on [page
    55](ch03.xhtml#page_55) for a full MCP3008 pinout description.*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*要识别 MCP3008 的引脚，将芯片朝向自己，顶部有一个半圆形切口。第一个引脚在左上角，最后一个引脚在右上角。有关 MCP3008 引脚的完整描述，请参见
    [“模拟到数字转换器”](ch03.xhtml#lev41) 中的 [第 55 页](ch03.xhtml#page_55)。*'
- en: Connect the GND and 3.3 V pins to the breadboard rails.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 GND 和 3.3 V 引脚连接到面包板的电源轨。
- en: Insert the MCP3008 chip in the middle of the breadboard with the two sides straddling
    the center divide.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 MCP3008 芯片插入面包板的中间位置，确保两侧跨越中间分隔。
- en: Insert two potentiometers in the breadboard, wiring one’s outer lead to GND
    and the other’s outer lead to 3.3 V.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个电位器插入面包板，将其中一个电位器的外侧引脚连接到 GND，另一个的外侧引脚连接到 3.3 V。
- en: Connect the MCP3008 chip as shown in the following table. It doesn’t matter
    which potentiometer you connect to which pins; they will work the same way.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照下表连接 MCP3008 芯片。连接哪个电位器到哪个引脚并不重要，它们的工作方式是一样的。
- en: '| **MCP3008** | **CONNECT TO** |'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **MCP3008** | **连接到** |'
- en: '| --- | --- |'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 1 | One potentiometer’s middle lead |'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 1 | 一个电位器的中间引脚 |'
- en: '| 2 | Other potentiometer’s middle lead |'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 2 | 另一个电位器的中间引脚 |'
- en: '| 9 | GND |'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 9 | GND |'
- en: '| 10 | GPIO 8 |'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 10 | GPIO 8 |'
- en: '| 11 | GPIO 10 |'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 11 | GPIO 10 |'
- en: '| 12 | GPIO 9 |'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 12 | GPIO 9 |'
- en: '| 13 | GPIO 11 |'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 13 | GPIO 11 |'
- en: '| 14 | GND |'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 14 | GND |'
- en: '| 15 | 3.3 V |'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 15 | 3.3 V |'
- en: '| 16 | 3.3 V |'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 16 | 3.3 V |'
- en: Insert a pushbutton into the breadboard, straddling the center divide. On one
    side of the center divide, connect one pin to GND and the other pin to GPIO 2.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮插入面包板，跨越中心分隔线。将一侧的引脚连接到 GND，另一侧的引脚连接到 GPIO 2。
- en: Insert the RGB LED strip pins into the breadboard.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 RGB LED 灯带的引脚插入面包板中。
- en: Insert the logic level converter into the breadboard. Connect the low-voltage
    side as directed.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将逻辑电平转换器插入面包板中。按照指示连接低电压侧。
- en: '| **LOGIC LEVEL CONVERTER** | **RASPBERRY PI** |'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **逻辑电平转换器** | **树莓派** |'
- en: '| --- | --- |'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| TX1 (channel 2) | GPIO 18 |'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| TX1 (通道 2) | GPIO 18 |'
- en: '| LV | 3.3 V |'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| LV | 3.3 V |'
- en: '| GND | GND |'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| GND | GND |'
- en: Connect the high-voltage side as directed.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照指示连接高电压侧。
- en: '| **LOGIC LEVEL CONVERTER** | **CONNECT TO** |'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **逻辑电平转换器** | **连接到** |'
- en: '| --- | --- |'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| TX0 (channel 2) | RGB LED strip’s Data pin (middle pin) |'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| TX0 (通道 2) | RGB LED 灯带的数据引脚（中间引脚） |'
- en: '| HV | 5 V |'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| HV | 5 V |'
- en: '| GND | GND |'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| GND | GND |'
- en: With the logic level converter connected, connect the RGB LED strip as directed.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接好逻辑电平转换器后，按照指示连接 RGB LED 灯带。
- en: '| **RGB LED STRIP** | **CONNECT TO** |'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **RGB LED 灯带** | **连接到** |'
- en: '| --- | --- |'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 5 V | 5 V |'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 5 V | 5 V |'
- en: '| Din | Logic level converter TX0 pin |'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Din | 逻辑电平转换器 TX0 引脚 |'
- en: '| GND | GND |'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| GND | GND |'
- en: '**NOTE**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you choose to do this project with a strip of more than 20 LEDs, you’ll
    need to connect your 5 V power source to the strip’s 5 V pin and the GND power
    source to the GND rail.*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你选择使用超过 20 个 LED 的灯带做这个项目，你需要将 5 V 电源连接到灯带的 5 V 引脚，并将 GND 电源连接到 GND 排。*'
- en: '**WRITING THE SCRIPT**'
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写脚本**'
- en: This script relies on the WS281X library to control the individual LEDs, so
    you need to install that library and then enable the Serial Peripheral Interface
    (SPI) communication the strip needs to communicate with the Pi.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本依赖于 WS281X 库来控制单独的 LED，因此你需要安装该库，并启用串行外设接口（SPI）通信，以便条形灯带能够与树莓派进行通信。
- en: '**Installing the WS281X Library**'
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**安装 WS281X 库**'
- en: There are a few steps to installing the WS281X library, as it requires you to
    set up the libraries it depends on first.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 WS281X 库有几个步骤，因为它要求你先设置它所依赖的库。
- en: 'Open a terminal window and install the scons, python3-dev, and swig libraries:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端窗口并安装 scons、python3-dev 和 swig 库：
- en: '[PRE0]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Still in the terminal, navigate to the desktop, create a folder called *Libraries*,
    and then navigate to the newly created folder:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在终端中，导航到桌面，创建一个名为 *Libraries* 的文件夹，然后进入新创建的文件夹：
- en: '[PRE1]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Clone the library to download it.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆该库以进行下载。
- en: '[PRE2]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Move to the *rpi_ws281x* library folder and run the `scons` command:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入 *rpi_ws281x* 库文件夹并运行 `scons` 命令：
- en: '[PRE3]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Navigate to the *python* folder and install the WS281X library on your Pi:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 *python* 文件夹并在你的树莓派上安装 WS281X 库：
- en: '[PRE4]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now you’re ready to use the WS281X library in your code.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以在代码中使用 WS281X 库了。
- en: '**Enabling SPI Communication**'
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**启用 SPI 通信**'
- en: To communicate with the MCP3008 chip, you need to enable SPI communication.
    Go to the taskbar main menu and select **Preferences** ▸ **Raspberry Pi Configuration**.
    In the Interfaces tab, click **Enabled** in the SPI row, as shown in [Figure 5-5](ch05.xhtml#ch05fig5),
    and then click **OK**.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要与 MCP3008 芯片进行通信，你需要启用 SPI 通信。进入任务栏主菜单，选择 **首选项** ▸ **树莓派配置**。在“接口”标签页中，点击
    SPI 行中的 **启用**，如 [图 5-5](ch05.xhtml#ch05fig5) 所示，然后点击 **确定**。
- en: '![image](../images/f0077-01.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0077-01.jpg)'
- en: '**FIGURE 5-5:** Enabling SPI communication'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-5：** 启用 SPI 通信'
- en: '**ENTERING THE SCRIPT**'
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**进入脚本**'
- en: 'Let’s recap how the circuit works to help you better understand the script
    before entering it:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下电路如何工作，以帮助你在输入脚本之前更好地理解它：
- en: Your RGB LED strip displays a moving rainbow.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的 RGB LED 灯带显示一个移动的彩虹。
- en: One potentiometer controls the rainbow speed.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个电位器控制彩虹的速度。
- en: Another potentiometer controls the rainbow brightness.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个电位器控制彩虹的亮度。
- en: The pushbutton starts and stops the rainbow animation.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮用于启动和停止彩虹动画。
- en: '**TROUBLESHOOTING CRAZY PIXELS**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**排除疯狂像素问题**'
- en: 'At the time of this writing, there is an issue with the strip pixels on newer
    versions of Raspbian. The pin used to control the strip is shared with analog
    audio output, so the pixels can go crazy and not work properly. If this happens
    when you load the code, you need to add two lines to the *config.txt* file. Go
    to the terminal and enter the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Raspbian的较新版本存在一个关于条形像素的问题。控制条形灯带的引脚与模拟音频输出共享，因此像素可能会出现混乱并无法正常工作。如果在加载代码时发生这种情况，你需要在*config.txt*文件中添加两行代码。进入终端并输入以下内容：
- en: '[PRE5]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the file that opens, add the following two lines (anywhere should be fine):'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在打开的文件中，添加以下两行（可以放在任何位置）：
- en: '[PRE6]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Press CTRL-X to save the file and then, when prompted, type **Y** and press
    ENTER. Reboot your Pi for the changes to take effect, and then proceed to the
    library installation.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 按CTRL-X保存文件，然后当提示时，输入**Y**并按ENTER键。重启你的Pi以使更改生效，然后继续进行库的安装。
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Copy the code in [Listing 5-1](ch05.xhtml#ch05list1) to the Python Editor
    and save the script as *rainbow_effect.py* inside the *LEDs* folder (remember
    that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 打开**Python 3（IDLE）**，点击**文件** ▸ **新建文件**来创建一个新脚本。将[Listing 5-1](ch05.xhtml#ch05list1)中的代码复制到Python编辑器中，并将脚本保存为*rainbow_effect.py*，存放在*LEDs*文件夹内（记得你可以下载所有脚本，网址是*[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*）：
- en: '**LISTING 5-1:** The Rainbow Strip *rainbow_effect.py* code'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 5-1:** 彩虹条*rainbow_effect.py*代码'
- en: '[PRE7]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: First, you import the libraries you’ll use to control the project ➊. You need
    the neopixel library to control the LED strip, the time library to import the
    `sleep()` function for controlling the delay time, and from gpiozero you import
    the `Button()` and `MCP3008()` interfaces to read the pushbutton and potentiometer
    values, respectively.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你导入控制项目所需的库 ➊。你需要neopixel库来控制LED灯带，time库来导入`sleep()`函数以控制延迟时间，并从gpiozero库中导入`Button()`和`MCP3008()`接口，分别用于读取按钮和电位器的值。
- en: '**Setting the Strip Parameters**'
  id: totrans-120
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**设置灯带参数**'
- en: At ➋, you create variables for configuring the RGB LED strip, including the
    number of LEDs and the GPIO pin used. Then, at ➌, you create objects to refer
    to the two potentiometers, with the brightness on MCP3008 channel 0 (pin 1) and
    the speed on MCP3008 channel 1 (pin 2), and an object for the button on GPIO 2\.
    You also create a variable for starting and stopping the animation called `running_animation`,
    which takes a Boolean and is `False` (off ) by default.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➋ 处，你为配置RGB LED灯带创建了变量，包括LED数量和所用的GPIO引脚。然后，在 ➌ 处，你创建了两个电位器的对象，一个用于控制MCP3008通道0（引脚1）的亮度，另一个用于控制MCP3008通道1（引脚2）的速度，并创建了一个GPIO
    2上的按钮对象。你还创建了一个名为`running_animation`的变量，用于启动和停止动画，它是布尔类型，默认值为`False`（关闭）。
- en: '**Creating the Rainbow Effect Functions**'
  id: totrans-122
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**创建彩虹效果函数**'
- en: At ➍ and ➎, you create the functions that produce the moving rainbow effect.
    These functions are the same as the ones used in the *strandtest.py* example that
    comes with the neopixel library. In simple terms, the `wheel()` function generates
    the color spectrum by varying each color parameter between 0 and 255\. Each color
    is composed of red, green, and blue (RGB) parameters, and varying each parameter
    between 0 and 255 produces different colors, resulting in a rainbow effect. The
    `rainbowCycle()` function distributes the rainbow across the number of LEDs on
    your strip.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➍ 和 ➎ 处，你创建了产生移动彩虹效果的函数。这些函数与neopixel库附带的*strandtest.py*示例中使用的函数相同。简单来说，`wheel()`函数通过在0到255之间变化每个颜色参数来生成色谱。每个颜色由红色、绿色和蓝色（RGB）参数组成，变化每个参数在0到255之间产生不同的颜色，从而产生彩虹效果。`rainbowCycle()`函数将彩虹分布到你条形灯带上的LED数量上。
- en: The line at ➏ sets the delay time for the `sleep()` function. To calculate the
    delay time, you multiply the value read from one of the potentiometers (which
    is between 0 and 1) by 40 and then divide that result by 1,000\. Multiplying the
    potentiometer value by 40 produces a noticeable delay time; otherwise, the delay
    would be so short that the rainbow effect would happen too fast for you to detect
    the movement of the lights. Dividing by 1,000 gives you a delay time in milliseconds.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: ➏行设置了`sleep()`函数的延时时间。为了计算延时时间，你需要将从其中一个电位器读取的值（该值在0和1之间）乘以40，然后将结果除以1,000。将电位器值乘以40会产生一个显著的延时；否则，延时太短，彩虹效果会发生得太快，你甚至无法察觉灯光的移动。除以1,000可以得到以毫秒为单位的延时时间。
- en: '**Controlling the Pushbutton**'
  id: totrans-125
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**控制按键**'
- en: 'Using the gpiozero library, you assign a particular action to a pushbutton
    press as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 使用gpiozero库，你可以将特定的动作分配给按键按下事件，具体如下：
- en: '[PRE8]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The function_name function refers to a generic function that will be called
    when the button is pressed; that function must be defined before it is called.
    In this case, that function is `start_animation` ➑, defined at ➐. Notice that
    function_name doesn’t have parentheses. This happens because we’re just assigning
    a function to another function instead of running the function. In our case, we’re
    telling the code to run the `start_animation` function when the `button_start.when_pressed`
    function is triggered.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`function_name`函数指的是一个通用函数，当按键被按下时会被调用；该函数必须在被调用之前定义。在这种情况下，该函数是`start_animation`
    ➑，在➐行定义。注意，`function_name`没有括号。这是因为我们只是将一个函数赋值给另一个函数，而不是执行该函数。在我们的案例中，我们告诉代码在`button_start.when_pressed`函数被触发时运行`start_animation`函数。'
- en: When the button is pressed, the `running_animation` value changes. When the
    `running_animation` variable is `False` and the button is pressed, it changes
    to `True`, and vice versa. This allows you to start and stop the rainbow effect.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当按键被按下时，`running_animation`的值会发生变化。当`running_animation`变量为`False`且按键被按下时，它会变为`True`，反之亦然。这使得你可以启动和停止彩虹效果。
- en: '**Controlling the Animation with the while Loop**'
  id: totrans-130
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**使用while循环控制动画**'
- en: At ➒, you create an `Adafruit_Neopixel` object called `strip` that takes in
    the strip parameters you defined earlier at ➋. To control the strip’s LED brightness,
    you use `int(pot_brightness.value*255)`. The brightness changes according to the
    value read from one of the potentiometers (between 0 and 1). You multiply that
    value by 255 because the strip’s LED brightness has a range of 0 to 255\. Using
    the `int()` function rounds the number to an integer. This way, you can adjust
    the LED brightness by rotating the potentiometer.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在➒行，你创建了一个名为`strip`的`Adafruit_Neopixel`对象，接受你在➋行之前定义的条带参数。为了控制条带LED的亮度，你使用`int(pot_brightness.value*255)`。亮度根据从其中一个电位器读取的值（在0和1之间）进行变化。你将该值乘以255，因为条带LED的亮度范围是0到255。使用`int()`函数将数值四舍五入为整数。这样，你就可以通过旋转电位器来调整LED的亮度。
- en: Then, you use `strip.begin()`, which you need to call before making other calls
    on the `Adafruit_Neopixel` object.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你使用`strip.begin()`，在对`Adafruit_Neopixel`对象进行其他调用之前，你需要先调用它。
- en: The `while` loop ➓ keeps the program running. Then, you set the strip brightness
    before starting the animation. If the `running_animation` variable is equal to
    `True`, the `rainbowCycle()` function will run, starting the animation. If you
    press the pushbutton, the `running_animation` variable changes to `False`, and
    the animation stops.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`循环 ➓ 会使程序持续运行。然后，你在启动动画之前设置了条带的亮度。如果`running_animation`变量为`True`，`rainbowCycle()`函数将运行，启动动画。如果按下按键，`running_animation`变量会变为`False`，动画停止。'
- en: '**Running the Script**'
  id: totrans-134
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**运行脚本**'
- en: To run this script, you need to use the terminal window. Running it from the
    Python 3 IDLE editor will give you a permissions error.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行此脚本，你需要使用终端窗口。从Python 3 IDLE编辑器运行会导致权限错误。
- en: 'Save the script as *rainbow_effect.py* inside the *LEDs* folder within the
    *Projects* directory, and open the terminal. Then, navigate to the *LEDs* folder
    and run the script:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 将脚本保存为*rainbow_effect.py*，放在*Projects*目录下的*LEDs*文件夹中，然后打开终端。接着，导航到*LEDs*文件夹并运行脚本：
- en: '[PRE9]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now you can control the speed and brightness by rotating their respective potentiometers
    and stop and start the animation by pressing the pushbutton.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以通过旋转各自的电位器来控制速度和亮度，并通过按下按键来启动或停止动画。
- en: Congratulations! You have an awesome decoration for your home!
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你为你的家增添了一个很棒的装饰！
- en: '**TAKING IT FURTHER**'
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步探索**'
- en: 'Here are some simple ideas you can try if you want to increase your level of
    control over the strip:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些简单的想法，如果你想增加对灯带的控制力度，可以尝试：
- en: Light up a specific LED in the middle of the strip.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点亮条形灯带中间的特定LED。
- en: Light all the LEDs in just one color.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让所有LED仅显示一种颜色。
- en: Add a pushbutton to change between preset effects.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个按钮，用于在预设效果之间切换。
- en: Blink the LEDs like Christmas lights.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让LED像圣诞灯一样闪烁。
- en: Invent your own effects.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发明你自己的效果。
