- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Accepting User Input with Touchscreens
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter you will
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to connect a resistive touchscreen to your Arduino
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discover the values that can be returned from the touchscreen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a simple on/off touch switch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to use the `map()` function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an on/off touch switch with a dimmer-style control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We see touchscreens everywhere today: on smartphones, tablets, and even portable
    video game systems. So why not use a touchscreen to accept input from an Arduino
    user?'
  prefs: []
  type: TYPE_NORMAL
- en: Touchscreens
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Touchscreens can be quite expensive, but we’ll use an inexpensive model available
    from Adafruit (part numbers 333 and 3575), originally designed for the Nintendo
    DS game console.
  prefs: []
  type: TYPE_NORMAL
- en: This touchscreen, which measures about 2.45 by 3 inches, is shown in [Figure
    12-1](#figure12-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![f12001](image_fi/500587c12/f12001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-1: A touchscreen mounted on a solderless breadboard'
  prefs: []
  type: TYPE_NORMAL
- en: Notice the horizontal ribbon cable connected to the small circuit board on the
    right. This *breakout board* is used to attach the Arduino and the breadboard
    to the touchscreen. The header pins included with the breakout board will need
    to be soldered before use. [Figure 12-2](#figure12-2) shows a close-up of the
    breakout board.
  prefs: []
  type: TYPE_NORMAL
- en: '![f12002](image_fi/500587c12/f12002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-2: The touchscreen breakout board'
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the Touchscreen
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Connect the touchscreen breakout board to an Arduino as shown in [Table 12-1](#table12-1).
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 12-1: Touchscreen Breakout Board Connections'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Breakout board pin** | **Arduino pin** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| X− | A3 |'
  prefs: []
  type: TYPE_TB
- en: '| Y+ | A2 |'
  prefs: []
  type: TYPE_TB
- en: '| X+ | A1 |'
  prefs: []
  type: TYPE_TB
- en: '| Y− | A0 |'
  prefs: []
  type: TYPE_TB
- en: 'Project #33: Addressing Areas on the Touchscreen'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The touchscreen has two layers of resistive coating between the top layer of
    plastic film and the bottom layer of glass. One coating acts as the x-axis, and
    the other is the y-axis. As current passes through each coating, the resistance
    of the coating varies depending on where it has been touched; when the current
    is measured, the x and y positions of the touched area can be determined.
  prefs: []
  type: TYPE_NORMAL
- en: In this project, we’ll use the Arduino to record touched locations on the screen.
    We’ll also have it convert information from the touches into integers that represent
    areas of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The Hardware
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following hardware is required:'
  prefs: []
  type: TYPE_NORMAL
- en: One Adafruit touchscreen, part 333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One Adafruit breakout board, part 3575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Male-to-male jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One solderless breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arduino and USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect the touchscreen as described in [Table 12-1](#table12-1) and connect
    the Arduino to the PC via the USB cable.
  prefs: []
  type: TYPE_NORMAL
- en: The Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Enter and upload the following sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The functions `readX()` and `readY()` at 1 and 2 read the current from the touchscreen’s
    resistive layers, measure it using `analogRead()`, and return the read values.
    The sketch rapidly runs these two functions to provide the real-time position
    of the screen area being touched and displays this information in the Serial Monitor
    at 3 and 4. (The `delay(5)` in each function is required to allow the input/output
    pins time to change their states.)
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To test the sketch, watch the Serial Monitor window while you touch the screen
    and notice how the x and y values change as you move your finger around the screen.
    Also take note of the values displayed when the screen is not being touched, as
    shown in [Figure 12-3](#figure12-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![f12003](image_fi/500587c12/f12003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-3: Values that appear when the touchscreen is not touched'
  prefs: []
  type: TYPE_NORMAL
- en: You can use the values that display when you’re not touching the screen in your
    sketch to detect when the screen is not being touched. Also, displays may vary
    slightly, so it is important to map out your own unit so you have an understanding
    of its display boundaries.
  prefs: []
  type: TYPE_NORMAL
- en: Mapping the Touchscreen
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can plot the coordinates for each corner of your touchscreen by touching
    the corners of the screen and recording the values returned, as shown in [Figure
    12-4](#figure12-4).
  prefs: []
  type: TYPE_NORMAL
- en: '![f12004](image_fi/500587c12/f12004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-4: A touchscreen map'
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve created your touchscreen map, you can mathematically divide it
    into smaller regions, which you can then use with `if` statements to cause specific
    actions to occur depending on where the screen is touched. We’ll do that in Project
    34.
  prefs: []
  type: TYPE_NORMAL
- en: 'Project #34: Creating a Two-Zone On/Off Touch Switch'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this project, we’ll use our touchscreen map to create an on/off switch. Start
    by dividing the touchscreen in half vertically, as shown in [Figure 12-5](#figure12-5).
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino will determine which zone of the screen was touched by comparing
    the recorded coordinates of the touch to the boundaries of each half of the screen.
    When the zone has been determined, the code responds by returning `on` or `off`
    (though it could also send an on or off signal to a device).
  prefs: []
  type: TYPE_NORMAL
- en: '![f12005](image_fi/500587c12/f12005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-5: On/off switch map'
  prefs: []
  type: TYPE_NORMAL
- en: The Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Enter and upload the following sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Understanding the Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The two `if` statements used in `void loop()` check for a touch on the left
    or right side of the screen. If the left side is touched, the touch is detected
    as an “on” press at 1. If the right side is touched (an “off” press), the touch
    is detected at 2.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The output of this sketch is shown in [Figure 12-6](#figure12-6). The status
    of the switch and the coordinates are shown after each screen touch.
  prefs: []
  type: TYPE_NORMAL
- en: '![f12006](image_fi/500587c12/f12006.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-6: Output from Project 34'
  prefs: []
  type: TYPE_NORMAL
- en: Using the map() Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There may come a time when you need to convert an integer that falls within
    one range into a value that falls into another range. For example, the x values
    of your touchscreen might run from 100 to 900, but you might have to translate
    that to a range of 0 to 255 to control an 8-bit output.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this we use the `map()` function, which is laid out as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, to translate 450 on the touchscreen to the range 0–255, you would
    use this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This would give `x` a value of 95\. You’ll use the `map()` function in Project
    35.
  prefs: []
  type: TYPE_NORMAL
- en: 'Project #35: Creating a Three-Zone Touch Switch'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this project, we’ll create a three-zone touch switch for an LED on digital
    pin 3 that turns the LED on or off and adjusts the brightness from 0 to 255 using
    PWM (as explained in Chapter 3).
  prefs: []
  type: TYPE_NORMAL
- en: The Touchscreen Map
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our touchscreen map is shown in [Figure 12-7](#figure12-7).
  prefs: []
  type: TYPE_NORMAL
- en: '![f12007](image_fi/500587c12/f12007.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-7: Touchscreen map for a three-zone touch switch'
  prefs: []
  type: TYPE_NORMAL
- en: The touchscreen map is divided into off and on zones and a brightness control
    zone. We measure the values returned by the touchscreen to determine which part
    has been touched, then react accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: The Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Enter and upload the following sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Understanding the Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like the sketch for the two-zone map, this sketch will check for touches in
    the on and off zones (which are now smaller, because half the screen is reserved
    for the brightness zone) at 2 and 3 and for any touches above the horizontal divider,
    which we’ll use to determine brightness, at 4. If the screen is touched in the
    brightness area, the position on the x-axis is converted to a relative value for
    PWM using the `map()` function at 1, and the LED is adjusted accordingly using
    the function `setBrightness()`*.*
  prefs: []
  type: TYPE_NORMAL
- en: You can use these same functions to create any number of switches or sliders
    with this simple and inexpensive touchscreen. Furthermore, you could create your
    own library to easily return X and Y values and control the brightness in any
    sketch you write in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Looking Ahead
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter introduced you to the touchscreen, another way of accepting user
    data and controlling your Arduino. In the next chapter, we’ll focus on the Arduino
    board itself, learn about some of the different versions available, and create
    our own version on a solderless breadboard.
  prefs: []
  type: TYPE_NORMAL
