- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: The Minimum Viable Product Approach to Security Software Development
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 最小可行产品方法在安全软件开发中的应用
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: Going beyond your current proof-of-concept code means planning how other users
    will interact with your program. Mapping out the user’s path through the application
    from start to finish will allow you to decide the best ways to deliver the application,
    which in turn will enable your users to quickly and intuitively begin using your
    software. The considerations in this chapter apply to most types of applications
    equally well, as they deal with the process of delivering and using the application,
    rather than with the problem directly.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 超越当前的概念验证代码意味着需要规划其他用户如何与程序互动。通过从开始到结束绘制用户在应用程序中的路径，你可以决定最适合的交付方式，这将使得用户能够快速直观地开始使用你的软件。本章中的考虑适用于大多数类型的应用程序，因为它们涉及的是交付和使用应用程序的过程，而不是直接解决问题。
- en: 'In the previous chapter we identified a few use cases that led us to define
    several features that the application would have to support. In this chapter,
    we’re going to implement the still-open features: developing a graphical user
    interface (GUI) and saving projects. We’ll begin by mapping the user’s interactions
    with the program, using them to build the GUI. Then we’ll discuss state managers
    and how to use process parallelism to split up the workload, optimizing our solutions
    for complex floor plans. Finally, we’ll build the GUI and implement the save feature.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们确定了一些用例，并据此定义了应用程序需要支持的几个功能。在本章中，我们将实现仍然开放的功能：开发图形用户界面（GUI）和保存项目。我们将首先映射用户与程序的交互，利用这些交互来构建GUI。接下来，我们将讨论状态管理器以及如何利用进程并行性来分配工作负载，优化我们对复杂平面图的解决方案。最后，我们将构建GUI并实现保存功能。
- en: Mapping the User’s Interactions
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 映射用户的交互
- en: Most good software projects begin the development phase with a set of user interaction
    plans that describe the actual steps a user will follow in the application to
    achieve each use case. These plans can be rough sketches or extremely detailed
    wireframe mock-ups of the final application, but they all need to answer the question,
    “How will the user use the system to achieve the goal?” My preferred method for
    plotting use cases is using application state machines for the structure and Unified
    Modeling Language (UML) for the process. I recommend using an application like
    Dia or LucidChart to produce a visual layout. [Figure 12-1](#figure12-1) shows
    the workflow diagram I developed in LucidChart for the use case where a user wants
    to save their project across multiple sessions.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数优秀的软件项目在开发阶段都会有一套用户交互计划，描述用户在应用程序中实现每个用例时的实际步骤。这些计划可以是粗略的草图，也可以是非常详细的最终应用程序线框图，但它们都需要回答一个问题：“用户如何使用系统来实现目标？”我偏好的用例绘制方法是使用应用程序状态机作为结构，并使用统一建模语言（UML）来表示过程。我建议使用像Dia或LucidChart这样的应用程序来制作可视化布局。[图12-1](#figure12-1)展示了我在LucidChart中为一个用户希望跨多个会话保存其项目的用例所开发的工作流程图。
- en: '![](image_fi/502567c12/f12001.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502567c12/f12001.png)'
- en: 'Figure 12-1: A multiple-session workflow diagram'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图12-1：多会话工作流程图
- en: 'I chose this particular use case because it encompasses the entire application
    flow: we create multiple floors, draw the polygon representation, save and reload
    project data, as well as create the final solution visualization. At the top left
    of [Figure 12-1](#figure12-1), you see the oval shape, which is used to represent
    the use case entry point. In this scenario, a user who wants to work across multiple
    sessions begins by initializing their project. Right now that simply means they
    open the program for the first time, but we’ll add more to the initialization
    in later sections.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择这个特定的用例，因为它涵盖了整个应用程序流程：我们创建多个楼层，绘制多边形表示，保存和重新加载项目数据，以及创建最终的解决方案可视化。在[图12-1](#figure12-1)的左上角，你可以看到一个椭圆形状，它表示用例的入口点。在这个场景中，想要跨多个会话工作的用户首先初始化他们的项目。现在这仅仅意味着他们第一次打开程序，但我们将在后续章节中对初始化过程进行更多的扩展。
- en: 'The rounded squares represent high-level states of the application. These states
    are similar to the ones we examined in [Chapter 6](c06.xhtml) when we discussed
    finite state machines: they represent the options available at each state to transition
    to another state. When a user initializes their project, they’re moved into the
    *Start* state, where they’re expected to create one or more `Floor` objects that
    contain a background PNG file. Once the `Floor` class representing the floor plan
    is created, it’s passed to the next state the user enters, the *Started* state.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 圆角矩形表示应用程序的高级状态。这些状态类似于我们在[第六章](c06.xhtml)中讨论有限状态机时所考察的状态：它们表示每个状态下可用的选项，以便转换到另一个状态。当用户初始化项目时，他们会进入*Start*状态，在此状态下，他们需要创建一个或多个包含背景PNG文件的`Floor`对象。一旦表示楼层平面图的`Floor`类被创建，它就会传递到用户进入的下一个状态，即*Started*状态。
- en: In the Started state, the user has the option to draw the shape data for the
    floor plan. To do so, they click their mouse to create a series of points representing
    the hull of the floor plan along with points within the hull to define holes (represented
    by the `Obstacle` class in the application primitives). Once a user adds a point
    to start drawing a shape, they must either finish drawing or back out using an
    `undo` function. After the user draws the shapes they want, the Shapely data is
    sent to the state manager, the heart of the whole application. We’ll cover the
    state manager in more detail momentarily, but for now just understand that the
    state manager’s job is to track what the user’s doing in the application and expose
    the proper actions and impose the proper constraints (such as finishing a shape
    before saving).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在*Started*状态下，用户可以选择绘制楼层平面图的形状数据。为此，他们点击鼠标创建一系列表示平面图外壳的点，并在外壳内添加点来定义孔洞（这些孔洞由应用程序原语中的`Obstacle`类表示）。一旦用户添加了一个点以开始绘制形状，他们必须完成绘制或使用`undo`功能撤销操作。用户绘制完他们需要的形状后，Shapely数据会被发送到状态管理器，这是整个应用程序的核心。稍后我们会更详细地讨论状态管理器，但现在只需要理解状态管理器的工作是跟踪用户在应用程序中的操作，并暴露适当的操作和施加适当的约束（例如，在保存之前必须完成绘制形状）。
- en: Once the user has drawn as much as they want for the session, they move into
    the *Drawn* state, where they’ll save the information for the next session. To
    tell the state manager to record the various files and objects, the user enters
    the key combination ctrl-S. From this state, the user can either return to drawing—allowing
    incremental progress saves within a single session—or end the program and return
    later. When the user does return for subsequent sessions, they enter the application
    at the *Saved* state, which allows them to ask the session manager to load a previously
    saved project using the key combination ctrl-O. After loading completes, the user
    can add new floors (the Start state) or continue to draw on previously created
    floors (the Started state). Once all the necessary shapes are recorded, the user
    can solve the floor with the key combination ctrl-P. The result will be an image
    file that includes the lowest-count deployment overlaid on the background image
    for the floor plan.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户绘制完他们希望在会话中完成的内容，他们将进入*Drawn*状态，在这个状态下，他们会保存信息以供下次会话使用。为了告诉状态管理器记录各种文件和对象，用户按下键盘组合键ctrl-S。在这个状态下，用户可以选择返回继续绘制——这允许在单个会话中进行增量保存——或结束程序并稍后再回来。当用户返回继续后续会话时，他们会进入*Saved*状态，在该状态下，他们可以使用键盘组合键ctrl-O要求会话管理器加载之前保存的项目。加载完成后，用户可以添加新的楼层（*Start*状态），或者继续在先前创建的楼层上绘制（*Started*状态）。一旦所有必要的形状都被记录下来，用户可以通过键盘组合键ctrl-P解决楼层问题。结果将是一个图像文件，其中包含最低计数的部署并覆盖在楼层平面图的背景图像上。
- en: Overall, this implementation is still somewhat basic in its feature set; this
    is intentional to allow you to expand the program to meet your vision for the
    project. Part of the art in application development lies in how you choose to
    organize the feature work, so I won’t go into any more detail about which pieces
    I think should go where. As long as you lay out the features to match the use
    cases in a way that makes sense to you, they’ll serve as a map to guide the rest
    of your project development.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，这个实现的功能集仍然相对基础；这是故意设计的，目的是让你能够扩展程序以实现你对项目的设想。应用程序开发中的一部分艺术就在于你如何选择组织功能模块，因此我不会再详细说明我认为哪些部分应该放在哪。只要你以符合自己理解的方式安排功能，满足用例需求，它们就会成为指导项目开发的地图。
- en: Planning Application States
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计划应用程序状态
- en: Once you’ve created the rest of your application state flowcharts, you can begin
    to pick apart the code needed to support each application state. This process
    is about identifying the pieces of the application that impact the most features
    and developing the code necessary to support those functions that cover it. Following
    this application-mapping process helps you reduce unnecessary code by identifying
    the shared pieces of an application so you can develop them with reusable classes
    or functions. Because it allows you to track which interactions touch which sections
    of the code, this process also helps you gauge the relative importance of each
    piece to the application’s performance. For example, by examining the diagram
    in [Figure 12-1](#figure12-1), we can tell that we’ll need a state manager class
    to track what’s happening in the application, a floor class to represent the floor
    plan, and some way to support keyboard input (like the hotkey commands ctrl-S
    and ctrl-O). We know the state manager will need to be able to take in shape data
    and output files that store the important details. It will also need to be able
    to read in those same files and rebuild the last saved state from them.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建了其余的应用状态流程图，你就可以开始拆解支持每个应用状态所需的代码。这个过程是关于识别对最多功能产生影响的应用部分，并开发必要的代码来支持这些功能的。遵循这个应用映射过程有助于通过识别应用程序中共享的部分来减少不必要的代码，这样你就可以使用可重用的类或函数来开发它们。因为它允许你追踪哪些交互触及了哪些代码部分，这个过程还帮助你评估每个部分对应用程序性能的相对重要性。例如，通过查看[图12-1](#figure12-1)中的图示，我们可以知道我们需要一个状态管理器类来跟踪应用程序中的操作，一个楼层类来表示楼层平面图，以及某种支持键盘输入的方式（比如热键命令ctrl-S和ctrl-O）。我们知道状态管理器需要能够接收形状数据，并输出存储重要细节的文件。它还需要能够读取这些文件，并从中重建最后保存的状态。
- en: Creating an application map also helps you organize the libraries and modules
    you’ll need to support these requirements. We already know we’ll need the Triangle
    and NetworkX libraries from the previous chapter. Because we’ll need graphic displays,
    keyboard shortcuts, and mouse interactions, the PyGame library is a good choice
    for developing the user interface—it supports all three needs at once. Since we’re
    using a background PNG file, we’ll need something that knows how to work with
    this file type. We could use a specific PNG library (creatively named png) that
    works well with PyGame’s functions, or we could use imutils or another similar
    library. Allow your application diagram to guide your selection of libraries and
    read the documentation for different options. Look for libraries like PyGame that
    can solve multiple requirements. Where two options appear equally suited to a
    task, I often choose the one that allows me to reduce the overall requirement
    size. That means choosing the one that’s already included in the requirements
    library or selecting the smaller of the two packages in terms of file size.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 创建应用程序地图也有助于你组织支持这些需求所需的库和模块。我们已经知道需要从上一章中引入Triangle和NetworkX库。由于我们需要图形显示、键盘快捷键和鼠标交互，PyGame库是开发用户界面的一个不错选择——它能够同时支持这三项需求。由于我们使用的是背景PNG文件，我们需要一个能够处理这种文件类型的工具。我们可以使用一个名为png的特定PNG库，它与PyGame的功能配合得很好，或者使用imutils或其他类似的库。让你的应用程序图示引导你选择库，并阅读不同选项的文档。寻找像PyGame这样的库，它能够解决多个需求。当两个选项看起来同样适合一个任务时，我通常选择能减少整体需求大小的那个。这意味着选择已经包含在需求库中的库，或者选择文件大小较小的那个包。
- en: In practical development, the number of use cases you include and the order
    in which you approach them will largely be dictated by external forces (such as
    business needs and budgets), so it’s impossible for anyone to give you a generic
    development process to follow. Still, at a high level, developing use case diagrams
    and application flow diagrams will almost always help you stay on target.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际开发中，你包含的用例数量以及你处理它们的顺序将很大程度上受到外部因素（如业务需求和预算）的制约，因此没有人能给你一个通用的开发流程来遵循。尽管如此，从高层次来看，开发用例图和应用程序流程图几乎总是能帮助你保持目标明确。
- en: 'Next, let’s discuss an often-overlooked topic when it comes to proof-of-concept
    development: documenting our projects for the good of humanity.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们来讨论一个在概念验证开发中常常被忽视的话题：为了人类的福祉，记录我们的项目。
- en: Documenting the Application
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 记录应用程序
- en: 'An absolute must for any important project is good documentation. We’ve already
    got a start on our documentation with the application state diagram. When it’s
    time to deliver this software, we can include this diagram along with other project
    documentation to show users our application’s basic functionality. In addition
    to the project artifacts, we should also be documenting our source code. The code
    for this project uses a method known as *docstrings* to document the code both
    for ourselves and for future developers. Docstrings are comments added directly
    to your script files in a human-readable syntax. This topic is covered in great
    detail online ([https://peps.python.org/pep-0257](https://peps.python.org/pep-0257)),
    so I won’t go into it much here, but I do think it is helpful to show an example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何重要项目来说，良好的文档都是绝对必不可少的。我们已经通过应用程序状态图开始了文档工作。当该软件交付时，我们可以将这个图表与其他项目文档一起提供给用户，展示我们应用程序的基本功能。除了项目文档外，我们还应该对源代码进行文档记录。这个项目的代码采用了一种叫做*docstrings*的方法，旨在为我们自己和未来的开发者记录代码。Docstrings
    是直接添加到脚本文件中的注释，使用易于人类阅读的语法。这个话题在网上有大量详细的讨论（[https://peps.python.org/pep-0257](https://peps.python.org/pep-0257)），所以我在这里不会展开讨论，但我认为展示一个例子会更有帮助：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The docstring for the function is the string literal enclosed in triple quotes
    (`'''`) directly after the function definition. The comments cover the input and
    output of functions (in the example under the `Parameters` and `Returns` headers,
    respectively), document the intended use of class objects, and record any important
    notes or facts for anyone who might want to make future changes—for example, including
    a link to the source material for a particular algorithm the function uses. We
    can access the documentation for any function with a docstring using the built-in
    `.__doc__` attribute. The docstring syntax also allows automated programs to detect
    the comments and format them into prettier API documentation for general distribution.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的 docstring 是紧接在函数定义后面，使用三引号（`'''`）括起来的字符串字面量。注释涵盖了函数的输入和输出（在示例中的`Parameters`和`Returns`部分），记录了类对象的预期用途，并为可能想要进行未来修改的人记录任何重要的说明或事实——例如，包含一个指向函数所使用的特定算法源材料的链接。我们可以通过内置的`.__doc__`属性访问任何函数的文档。Docstring
    语法还允许自动化程序检测这些注释，并将它们格式化为更美观的 API 文档供大众使用。
- en: Having good documentation allows you to quickly bring in new developers. If
    you were developing this application for a business, you could easily train the
    other developers on your team and enable them to develop extensions and improvements.
    Likewise, if you’re building for the open source community, good documentation
    encourages good contributions. Even if you’re building only for yourself, strong
    documentation practices can help refresh your memory when you pick up a project
    after a long time away from it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有良好的文档能够帮助你迅速引入新的开发人员。如果你是为一个企业开发这个应用程序，你可以轻松地培训团队中的其他开发人员，并使他们能够开发扩展功能和改进。同样地，如果你是为开源社区开发，良好的文档会鼓励贡献优秀的代码。即使你只是为自己开发，强大的文档实践也能帮助你在长时间不接触项目后，迅速找回记忆。
- en: 'Now that we’ve discussed all the planning essentials to keep our code efficient
    and promote adoption by other developers, we can begin the fun part of the project:
    developing the core of the application, the state manager.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了保持代码高效并促进其他开发者采用的所有规划要点，我们可以开始项目的有趣部分：开发应用程序的核心——状态管理器。
- en: Developing the State Manager
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发状态管理器
- en: 'Extremely common in modern software, *state managers* manage all the different
    possible interactions in a program. For example, your web browser has to keep
    track of where you click and what you type, as well as everything else happening
    in the browser. The state of the browser will determine what those clicks and
    keypresses do: pressing ctrl-S on the Google home page attempts to save the page
    as an HTML file, while the same shortcut on the Google Docs web page saves the
    project to your cloud storage. This can happen only because there’s a class responsible
    for orchestrating all the pieces: the state manager. State managers are *event
    driven*: when certain actions—like a pressed key or right-click—happen, they get
    notified and decide how to respond.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代软件中，*状态管理器* 极为常见，管理程序中所有可能的交互。例如，你的网页浏览器需要跟踪你点击的地方、你输入的内容，以及浏览器中发生的所有其他事情。浏览器的状态将决定这些点击和按键操作的结果：在
    Google 首页按下 ctrl-S 尝试将页面保存为 HTML 文件，而在 Google Docs 网页中使用相同的快捷键则会将项目保存到你的云存储中。只有因为有一个负责协调所有部分的类：状态管理器，才能实现这一切。状态管理器是
    *事件驱动的*：当某些动作（如按下某个键或右击）发生时，它们会收到通知并决定如何响应。
- en: Let’s take a look at some events. [Listing 12-1](#listing12-1) shows an example
    of how PyGame uses the `pygame.event` class to send events to your program.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些事件。[清单 12-1](#listing12-1) 展示了 PyGame 如何使用 `pygame.event` 类将事件发送到你的程序。
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 12-1: Handling PyGame events'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 12-1：处理 PyGame 事件
- en: The `pygame.event` class contains a queue of all the events that happen between
    successive `get` requests. The result of the `get` call is a list of event objects
    to process that we’ll loop through ❶. The order of the events will (usually) be
    the order in which the user performed them. For example, a user entering the ctrl-S
    keyboard shortcut to save a project would set off a series of events in the queue
    representing the user pressing ctrl, pressing the S key, then releasing the S
    key, and finally releasing the ctrl key.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`pygame.event` 类包含一个事件队列，记录所有在连续的 `get` 请求之间发生的事件。`get` 调用的结果是一个事件对象列表，我们将遍历这些对象
    ❶。事件的顺序通常（但不总是）是用户执行它们的顺序。例如，用户按下 ctrl-S 键盘快捷键保存项目时，会在队列中触发一系列事件，表示用户按下了 ctrl
    键、按下了 S 键、释放了 S 键，最后释放了 ctrl 键。'
- en: 'Each event object has a type field to help you understand what occurred. There
    are five major event types we’re concerned with. `pygame.QUIT` ❷ is a special
    event that should trigger your application’s shutdown code and finally conclude
    the program by exiting the application cleanly (without leaving unused files on
    disk or resources opened). The other types also have fairly intuitive names: the
    `pygame.KEYDOWN` and `pygame.KEYUP` events occur when the user presses or releases
    a keyboard key, respectively. Similarly, the `pygame.MOUSEBUTTONDOWN` event indicates
    a user clicked one of the mouse buttons ❸. The state manager uses these events
    to decide when and how to transition between application states.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 每个事件对象都有一个类型字段，帮助你了解发生了什么。我们关心的有五种主要事件类型。`pygame.QUIT` ❷ 是一个特殊事件，应该触发应用程序的关闭代码，并最终通过干净地退出应用程序（不留下未使用的文件或打开的资源）来结束程序。其他类型的事件名称也非常直观：`pygame.KEYDOWN`
    和 `pygame.KEYUP` 事件分别在用户按下或释放键盘按键时触发。类似地，`pygame.MOUSEBUTTONDOWN` 事件表示用户点击了鼠标按钮
    ❸。状态管理器使用这些事件来决定何时以及如何在应用程序状态之间进行切换。
- en: There are a lot of events in the PyGame event queue. The `pygame.MOUSEMOTION`
    event, for example, is triggered multiple times as the user moves the mouse pointer
    around the screen. You can filter undesirable events by checking that the event
    type is not equal (`!=`) to an undesired event’s type ❹. During development, printing
    events out to the console can help you identify events that you might want to
    develop code for, such as additional keyboard shortcuts. This is an excellent
    time to use type filtering to reduce the number of output messages, as shown in
    [Listing 12-1](#listing12-1).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: PyGame 事件队列中有很多事件。例如，`pygame.MOUSEMOTION` 事件在用户移动鼠标指针时会多次触发。你可以通过检查事件类型是否不等于（`!=`）不需要的事件类型
    ❹ 来过滤掉不需要的事件。在开发过程中，将事件打印到控制台可以帮助你识别你可能想要编写代码的事件，例如额外的键盘快捷键。这时使用类型过滤非常有用，可以减少输出消息的数量，如
    [清单 12-1](#listing12-1) 所示。
- en: Modern applications like web browsers and operating systems can have hundreds
    of states or more. Furthermore, each of these states can have *substates*, different
    options that exist within a single state, such as a red or black background screen
    in the drawing state. The more complex the application becomes, the more important
    it is to refer back to your workflow diagrams from time to time. Development is
    an iterative process, and it’s important to make sure you’re capturing all the
    major states as the project progresses. Rather than detailing all the code in
    the state manager, I’ll cover examples of the key elements that drive the interactions.
    For example, rather than showing you the logic for handling every keystroke, I’ll
    show you how to handle the two types of keyboard input (`KEYUP` and `KEYDOWN`)
    generically. You can then dive into the specifics for each function using the
    documentation provided in the file *AGP_solver_API.pdf* in the project’s resources
    folder.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: The code in [Listing 12-2](#listing12-2) shows the framework for the `handle_keydown`
    function.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 12-2: Handling `KEYDOWN` events in the state manager'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: The function takes in the `pygame.event` object as its only parameter. It needs
    the object so it can determine what key was pressed and respond accordingly. There
    are a few ways to check the value of an event. First, by checking to see if the
    `event.key` attribute is in a list of values ❶, you can apply the same code block
    to multiple input values. These values are numeric identifiers for every key on
    the keyboard, also called the key’s *scan code*. In this case, the two values
    `303` and `304` correspond to the left and right shift keys, respectively. If
    either is pressed, it will trigger the code that sets the `shifted` variable to
    `True` ❷. If you care about only one key from a pair, you can compare the `event.key`
    parameter to a single scan code ❸. In this case, `306` corresponds to the left
    ctrl key. Pressing the right ctrl key won’t trigger the code block that sets the
    `controlled` variable to `True`. Note that the `shifted` and `controlled` variables
    are both global variables, which means their value will persist in the application
    even after the function returns. This is what enables us to know if the user has
    entered a two-key combination like ctrl-S, which takes two calls to `handle_keydown`
    to achieve. PyGame also has another built-in function called `pygame.key.get_mods`
    for determining whether modifier keys like ctrl or shift were pressed in a key
    combination; you should explore it to improve the code from [Listing 12-2](#listing12-2).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Determining if a specific key was pressed is sometimes easier to read in the
    code if you compare the `event.unicode` attribute against the string literal of
    the key instead of using the key’s scan code. In the example, we compare the attribute
    to the string `"z"` ❹; if the value matches, we call the `undo` function ❺.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: The `handle_keyup` function in [Listing 12-3](#listing12-3) is shorter because
    there are usually fewer keys whose release timing we care about.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 12-3](#listing12-3) 中的 `handle_keyup` 函数较短，因为通常我们关心的键的释放时机较少。'
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 12-3: Handling `KEYUP` events in the state manager'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 12-3：在状态管理器中处理 `KEYUP` 事件
- en: The code for this function is the inverse of that in [Listing 12-2](#listing12-2).
    We check the `event.key` parameter to see if either shift key was released by
    the user and, if so, set the `shifted` key to `False`. Otherwise, we check if
    the left ctrl key was released, in which case we set the controlled variable to
    `False`. The Z key fires off a one-time event, which means you don’t need to worry
    about whether the user released it or not.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数的代码与[清单 12-2](#listing12-2)中的代码相反。我们检查 `event.key` 参数，看看用户是否释放了任意一个 Shift
    键，如果是，就将 `shifted` 键设为 `False`。否则，我们检查左 Ctrl 键是否被释放，如果是，则将控制变量设为 `False`。Z 键触发一次性事件，这意味着你不需要担心用户是否释放了它。
- en: The state manager has a similar function named `handle_click` that handles mouse-click
    events, as shown in [Listing 12-4](#listing12-4).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 状态管理器有一个类似的函数，名为 `handle_click`，用于处理鼠标点击事件，如[清单 12-4](#listing12-4)所示。
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 12-4: Handling `MOUSEBUTTONDOWN` events in the state manager'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 12-4：在状态管理器中处理 `MOUSEBUTTONDOWN` 事件
- en: The concept here is the same as in the previous listings, but the logic has
    to be longer to handle determining what button was clicked, where the pointer
    was when the click happened, and what other objects were in the same area as the
    pointer when the button was clicked. The `check_clicked_existing_vertex` function
    ❶ compares the position of the mouse (stored in the `event.pos` parameter of mouse
    events) against a list of all vertices in the project. It’s hard for a user to
    click exactly where a vertex is, so we give them a bit of room for error, called
    ε (epsilon). The current value for epsilon is 3 pixels. If the pointer was within
    epsilon (3 pixels) of a vertex, the vertex’s data is returned. The `EPSILON` constant
    is defined on line 35 of the *state_manager.py* file in the chapter’s supplemental
    materials, and the code for the `check_clicked_existing_vertex` is in the same
    file starting at line 634.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的概念与之前的清单相同，但逻辑需要更长，以处理判断点击了哪个按钮，点击发生时指针的位置，以及按钮点击时指针所在区域内是否有其他对象。`check_clicked_existing_vertex`
    函数 ❶ 将鼠标的位置（存储在鼠标事件的 `event.pos` 参数中）与项目中所有顶点的列表进行比较。用户很难准确点击一个顶点的位置，所以我们给他们留有一定的误差空间，称为
    ε（epsilon）。当前的 ε 值为 3 像素。如果指针距离顶点的距离在 ε（3 像素）范围内，返回该顶点的数据。`EPSILON` 常量在章节的附加材料中
    *state_manager.py* 文件的第 35 行定义，而 `check_clicked_existing_vertex` 函数的代码从第 634 行开始。
- en: Similarly, the `check_clicked_within_room` function ❷ checks to see if the pointer
    was inside any of the polygon shapes. The event and the information regarding
    the clicked objects (if any are present) are then passed to the appropriate function
    based on what button was clicked. Some mice have different button configurations,
    and the scan codes will depend on the manufacturer and driver your computer uses
    to some degree. You can use `print(event)` while clicking different buttons to
    have PyGame identify their scan codes for you. For production applications, you
    should use PyGame’s built-in key literals like `pygame.key.K_a` instead of scan
    codes for portability.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，`check_clicked_within_room` 函数 ❷ 用来检查指针是否位于任何多边形形状内。事件及与点击对象相关的信息（如果有的话）会根据点击了哪个按钮，传递给相应的函数。某些鼠标有不同的按钮配置，扫描码会根据你的电脑使用的制造商和驱动程序有所不同。你可以在点击不同按钮时使用
    `print(event)`，让 PyGame 为你识别它们的扫描码。对于生产环境中的应用，你应该使用 PyGame 内置的键盘字面量，例如 `pygame.key.K_a`，而不是扫描码，这样可以提高移植性。
- en: In [Listing 12-4](#listing12-4), if `event.button` is `1` ❸, it corresponds
    to the user clicking the left mouse button, so we call the function `left_click`
    ❹. If `event.button` is `3`, it corresponds to the user clicking the right mouse
    button, in which case we call the `right_click` function ❺. Both of these functions
    take in the `event` object, the `clicked` vertex, and `room` (if any exist). Each
    function uses these details to determine how to update the internal state using
    a lot of specific logical checks. For example, implementing a special delete response
    for a shift-left-click on a vertex requires the `left_click` function to first
    check if the `shifted` global variable is set to `True`. If so, the state manager
    removes the vertex that was passed to it for the list of vertices, thus updating
    the internal state. If the `shifted` variable is `False`, the state manager will
    follow a different branch of logic depending on whether a room, vertex, or neither
    was clicked. As you can imagine, the logic for these functions can quickly become
    quite long and complex.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在[列表12-4](#listing12-4)中，如果`event.button`是`1` ❸，它表示用户点击了左键，因此我们调用`left_click`函数
    ❹。如果`event.button`是`3`，则表示用户点击了右键，在这种情况下，我们调用`right_click`函数 ❺。这两个函数都接受`event`对象、`clicked`顶点和`room`（如果存在）。每个函数都使用这些细节来确定如何通过大量特定的逻辑检查来更新内部状态。例如，实施在顶点上进行Shift
    + 左键点击时的特殊删除响应，需要`left_click`函数首先检查`shifted`全局变量是否设置为`True`。如果是，状态管理器将从顶点列表中删除传递给它的顶点，从而更新内部状态。如果`shifted`变量是`False`，状态管理器将根据是否点击了房间、顶点或两者都没有，遵循不同的逻辑分支。正如你所想，这些函数的逻辑很容易变得非常长且复杂。
- en: Handling events and managing state as we’ve done in the last three listings
    is the central concept behind the state manager code. As you expand your implementation,
    you’ll continue to add logic to the `handle_keydown`, `handle_keyup`, and `handle_click`
    functions to implement all the different possible user interactions, such as drawing
    the rooms and adding obstructions to them (covered in the “[Adding a Graphical
    User Interface](#h1-502567c12-0004)” section shortly).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 像我们在过去三个列表中所做的那样，处理事件和管理状态是状态管理器代码背后的核心概念。当你扩展你的实现时，你将继续向`handle_keydown`、`handle_keyup`和`handle_click`函数中添加逻辑，以实现所有不同的用户交互，例如绘制房间并向其添加障碍物（将在稍后的“[添加图形用户界面](#h1-502567c12-0004)”部分中讨论）。
- en: Accelerating Security with Parallel Processing
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过并行处理加速安全性
- en: '*Process parallelism* is a large topic with many nuances, but simply put, it
    means spreading the work that needs to be accomplished across multiple workers.
    How you accomplish this is called the *division of labor* and is a matter of some
    contention. For example, suppose you’re a teacher and you have to grade 100 student
    papers, each with 20 questions. Luckily, you have four teaching assistants to
    help you, for a total of five workers grading papers, so you could each grade
    20 papers. The benefit would be that you have five papers being graded at the
    same time instead of just one.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*过程并行性*是一个包含许多细节的大话题，但简单来说，它意味着将需要完成的工作分配给多个工作人员。如何实现这一点被称为*分工合作*，这也是一个争议的话题。例如，假设你是一个教师，需要批改100份学生试卷，每份试卷有20道问题。幸运的是，你有四个助教来帮助你，总共有五个工作人员在批改试卷，因此你们每个人可以批改20份试卷。其好处是你们可以同时批改五份试卷，而不仅仅是一份。'
- en: Another option would be for each of you to select four questions to grade. You
    take the first paper, grade your four questions, then pass it along to the next
    person for them to grade their four questions, and so on. In this scenario, every
    worker touches every paper at least once, but for a reduced amount of time. The
    benefit of a division of labor like this is it allows each worker to focus on
    the work they’re best suited for. Imagine a scenario where one of the assistants
    is a specialist in mechanical engineering and another specializes in chemistry.
    By allowing each specialist to work on their area of expertise, you maximize the
    speed of the process by leveraging their individual capabilities.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是让你们每个人选择四个问题进行评分。你们先拿到第一份试卷，评分你们的四个问题，然后把试卷传给下一个人，让他们评分他们的四个问题，以此类推。在这种情况下，每个工作人员至少接触到每份试卷一次，但每次的时间较短。这种分工的好处是它使每个工作人员能够集中精力处理他们最擅长的工作。想象一下，如果其中一位助教是机械工程的专家，另一位则专攻化学。通过让每位专家处理他们擅长的领域，你可以通过利用他们各自的能力来最大化过程的速度。
- en: Threading Parallelism
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 线程并行性
- en: 'More formally speaking, Python has two main approaches for parallelism: threading
    parallelism and processor parallelism. *Threading parallelism* occurs when a main
    application opens up a child application that shares its resources, like memory
    space ([https://docs.python.org/3/library/threading.html](https://docs.python.org/3/library/threading.html)).
    This would be similar to having a single answer key for the test that all the
    people grading papers can look at (imagine it’s taped to a wall in the room).
    Each grader represents a thread and the answer key is a shared resource they all
    have access to. With most flavors of Python, threading isn’t technically parallelism
    because only one thread can be executing a command at a time (controlled by the
    Python interpreter). This is equivalent to letting only one person grade an answer
    at any given time. For practical purposes, though, switching threads happens so
    fast that it’s nearly simultaneous, so most developers (myself included) still
    count it.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Threads can be created in a few different ways, but one of the most popular
    is to create multiple threads of a single class, as shown in [Listing 12-5](#listing12-5).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 12-5: Threaded parallelism for displaying concurrent images'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: The code defines a class named `DisplayAGP` that allows the application to display
    multiple images at the same time, while still allowing the main application to
    do other work in the background. All classes that are intended to be used in a
    threaded fashion need to extend the `threading.Thread` class ❶ and contain a `run`
    method ❸, which contains the logic to be executed within the context of the thread—in
    this case, opening a particular image file and displaying it with `im.show` ❹.
    You can add further class methods, like the `set_file` method ❷, as a means of
    configuring each thread prior to running it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: To display all the image files in a list creatively named `image_files` concurrently,
    you can use the code in [Listing 12-6](#listing12-6).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 12-6: Displaying images concurrently with the `DisplayAGP` class'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: We start by looping over the list of file locations. For each one, we create
    a new instance of the `DisplayAGP` class. Then we call the `set_file` method with
    the location of the image so each thread knows what it should display. Setting
    the `t.daemon` property to `True` tells the program not to wait for the result
    of the thread once it is started with the `start` method. Calling ``t.start actually
    triggers the code in the `DisplayAGP.run` method. Once all the threads have been
    started, your main thread is free to move on to handle other work.``
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
