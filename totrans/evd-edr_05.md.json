["```\nNTSTATUS DriverEntry(PDRIVER_OBJECT pDriverObj, PUNICODE_STRING pRegPath)\n{\n    NTSTATUS status = STATUS_SUCCESS;\n    `--snip--`\n\n    status = PsSetLoadImageNotifyRoutine(ImageLoadNotificationCallback);\n\n    `--snip--`\n}\n\nvoid ImageLoadNotificationCallback(\n    PUNICODE_STRING FullImageName,\n    HANDLE ProcessId,\n    PIMAGE_INFO ImageInfo)\n{\n    `--snip--`\n}\n```", "```\n1: kd> **dx ((void**[0x40])&nt!PspLoadImageNotifyRoutine)**\n**.Where(a => a != 0)**\n**.Select(a => @$getsym(@$getCallbackRoutine(a).Function))** [0]        : WdFilter+0x467b0 (fffff803`4ade67b0)\n    [1]        : ahcache!CitmpLoadImageCallback (fffff803`4c95eb20)\n```", "```\ntypedef struct _IMAGE_INFO {\n  union {\n    ULONG Properties;\n    struct {\n      ULONG ImageAddressingMode : 8;\n      ULONG SystemModeImage : 1;\n      ULONG ImageMappedToAllPids : 1;\n      ULONG ExtendedInfoPresent : 1;\n      ULONG MachineTypeMismatch : 1;\n      ULONG ImageSignatureLevel : 4;\n      ULONG ImageSignatureType : 3;\n      ULONG ImagePartialMap : 1;\n      ULONG Reserved : 12;\n    };\n  };\n  PVOID ImageBase;\n  ULONG ImageSelector;\n  SIZE_T ImageSize;\n  ULONG ImageSectionNumber;\n} IMAGE_INFO, *PIMAGE_INFO;\n```", "```\n#define SE_SIGNING_LEVEL_UNCHECKED        0x00000000\n#define SE_SIGNING_LEVEL_UNSIGNED         0x00000001\n#define SE_SIGNING_LEVEL_ENTERPRISE       0x00000002\n#define SE_SIGNING_LEVEL_CUSTOM_1         0x00000003\n#define SE_SIGNING_LEVEL_DEVELOPER        SE_SIGNING_LEVEL_CUSTOM_1\n#define SE_SIGNING_LEVEL_AUTHENTICODE     0x00000004\n#define SE_SIGNING_LEVEL_CUSTOM_2         0x00000005\n#define SE_SIGNING_LEVEL_STORE            0x00000006\n#define SE_SIGNING_LEVEL_CUSTOM_3         0x00000007\n#define SE_SIGNING_LEVEL_ANTIMALWARE      SE_SIGNING_LEVEL_CUSTOM_3\n#define SE_SIGNING_LEVEL_MICROSOFT        0x00000008\n#define SE_SIGNING_LEVEL_CUSTOM_4         0x00000009\n#define SE_SIGNING_LEVEL_CUSTOM_5         0x0000000A\n#define SE_SIGNING_LEVEL_DYNAMIC_CODEGEN  0x0000000B\n#define SE_SIGNING_LEVEL_WINDOWS          0x0000000C\n#define SE_SIGNING_LEVEL_CUSTOM_7         0x0000000D\n#define SE_SIGNING_LEVEL_WINDOWS_TCB      0x0000000E\n#define SE_SIGNING_LEVEL_CUSTOM_6         0x0000000F\n```", "```\ntypedef enum _SE_IMAGE_SIGNATURE_TYPE\n{\n    SeImageSignatureNone = 0,\n    SeImageSignatureEmbedded,\n    SeImageSignatureCache,\n    SeImageSignatureCatalogCached,\n    SeImageSignatureCatalogNotCached,\n    SeImageSignatureCatalogHint,\n    SeImageSignaturePackageCatalog,\n} SE_IMAGE_SIGNATURE_TYPE, *PSE_IMAGE_SIGNATURE_TYPE;\n```", "```\n0: kd> **bp nt!PsCallImageNotifyRoutines**\n0: kd> **g**\nBreakpoint 0 hit\nnt!PsCallImageNotifyRoutines:\nfffff803`49402bc0 488bc4          mov    rax,rsp\n0: kd> **dt _UNICODE_STRING @rcx**\nntdll!_UNICODE_STRING\n  \"\\SystemRoot\\System32\\ntdll.dll\"\n    +0x000 Length           : 0x3c\n    +0x002 MaximumLengthN   : 0x3e\n    +0x008 Buffer           : 0xfffff803`49789b98 ❶ \"\\SystemRoot\\System32\\ntdll.dll\"\n```", "```\n0: kd> **!vad**\nVAD           Level Commit\n`--snip--`\nffff9b8f9952fd80 0     0 Mapped READONLY Pagefile section, shared commit 0x1\nffff9b8f9952eca0 2     0 Mapped READONLY Pagefile section, shared commit 0x23\nffff9b8f9952d260 1     1 Mapped NO_ACCESS Pagefile section, shared commit 0xe0e\nffff9b8f9952c5e0 2     4 Mapped Exe EXECUTE_WRITECOPY \\Windows\\System32\\notepad.exe\nffff9b8f9952db20 3     16 Mapped Exe EXECUTE_WRITECOPY \\Windows\\System32\\ntdll.dll\n```", "```\nNTSTATUS\nLdrLoadDll(IN PWSTR SearchPath OPTIONAL,\n           IN PULONG DllCharacteristics OPTIONAL,\n           IN PUNICODE_STRING DllName,\n           OUT PVOID *BaseAddress)\n```", "```\ntypedef struct _INJECTION_CTX\n{\n    UNICODE_STRING Dll;\n    WCHAR Buffer[MAX_PATH];\n} INJECTION_CTX, *PINJECTION_CTX\n\nvoid Injector()\n{\n    NTSTATUS status = STATUS_SUCCESS;\n    PINJECTION_CTX ctx = NULL;\n    const UNICODE_STRING DllName = RTL_CONSTANT_STRING(L\"hooks.dll\");\n\n    `--snip--` ❶ status = ZwAllocateVirtualMemory(\n        ZwCurrentProcess(),\n        (PVOID *)&ctx,\n        0,\n        sizeof(INJECTION_CTX),\n        MEM_COMMIT | MEM_RESERVE,\n        PAGE_READWRITE\n    );\n\n    `--snip--`\n\n      RtlInitEmptyUnicodeString(\n        &ctx->Dll,\n        ctx->Buffer,\n        sizeof(ctx->Buffer)\n      );\n\n  ❷ RtlUnicodeStringCopyString(\n      &ctx->Dll,\n      DllName\n    );\n\n    `--snip--`\n\n}\n```", "```\nPKAPC pKapc = (PKAPC)ExAllocatePoolWithTag(\n    NonPagedPool,\n    sizeof(KAPC),\n    'CPAK'\n);\n```", "```\nVOID KeInitializeApc(\n  PKAPC Apc,\n  PETHREAD Thread,\n  KAPC_ENVIRONMENT Environment,\n  PKKERNEL_ROUTINE KernelRoutine,\n  PKRUNDOWN_ROUTINE RundownRoutine,\n  PKNORMAL_ROUTINE NormalRoutine,\n  KPROCESSOR_MODE ApcMode,\n  PVOID NormalContext\n);\n```", "```\nKeInitializeApc(\n  pKapc,\n  KeGetCurrentThread(),\n  OriginalApcEnvironment,\n  (PKKERNEL_ROUTINE)OurKernelRoutine,\n  NULL,\n  (PKNORMAL_ROUTINE)pfnLdrLoadDll,\n  UserMode,\n  NULL\n);\n```", "```\nBOOL KeInsertQueueApc(\n  PRKAPC Apc,\n  PVOID SystemArgument1,\n  PVOID SystemArgument2,\n  KPRIORITY Increment\n);\n```", "```\nNTSTATUS CmRegisterCallbackEx(\n  PEX_CALLBACK_FUNCTION  Function,\n  PCUNICODE_STRING       Altitude,\n  PVOID                  Driver,\n  PVOID                  Context,\n  PLARGE_INTEGER         Cookie,\n  PVOID                  Reserved\n);\n```", "```\nNTSTATUS ExCallbackFunction(\n  PVOID CallbackContext,\n  PVOID Argument1,\n  PVOID Argument2\n)\n```", "```\nNTSTATUS RegistryNotificationCallback(\n    PVOID pCallbackContext,\n    PVOID pRegNotifyClass,\n    PVOID pInfo)\n{\n    NTSTATUS status = STATUS_SUCCESS;\n\n ❶ switch (((REG_NOTIFY_CLASS)(ULONG_PTR)pRegNotifyClass))\n    {\n        case RegNtPostCreateKey:\n        {\n        ❷ PREG_POST_OPERATION_INFORMATION pPostInfo =\n              (PREG_POST_OPERATION_INFORMATION)pInfo;\n            `--snip--`\n            break;\n        }\n        case RegNtPostSetValueKey:\n        {\n            `--snip--`\n            break;\n        }\n        default:\n            break;\n    }\n\n    return status;\n}\n```", "```\nswitch(RegNotifyClass) {\ncase RegNtDeleteKey:\n    pObject = *RegOperationInfo;\n    local_a0 = pObject;\n  ❶ CmSetCallbackObjectContext(pObject, &g_RegistryCookie), NewContext, 0);\ndefault:\n    goto LAB_18000a2c2;\ncase RegNtDeleteValueKey:\n    pObject = *RegOperationInfo;\n    local_a0 = pObject;\n  ❷ NewContext = (undefined8 *)InternalGetNameFromRegistryObject(pObject);\n    CmSetCallbackObjectContext(pObject, &g_RegistryCookie, NewContext, 0);\n    goto LAB_18000a2c2;\ncase RegNtPreEnumerateKey:\n    iVar9 = *(int *)(RegOperationInfo + 2);\n    pObject = RegOperationInfo[1];\n    iVar8 = 1;\n    local_b0 = 1;\n    local_b4 = iVar9;\n    local_a0 = pObject;\n    break;\n`--snip--`\n```", "```\n`--snip--`\ncase RegNtPostSetValueKey:\n  ❶ RegOperationStatus = RegOperationInfo->Status;\n  ❷ pObject = RegOperationInfo->Object;\n     iVar7 = 1;\n     local_b0 = 1;\n     pBuffer = puVar5;\n     p = puVar5;\n     local_b4 = RegOperationStatus;\n     local_a0 = pObject;\n}\nif ((RegOperationStatus < 0 || (pObject == (PVOID)0x0)) { ❸\nLAB_18000a252:\n    if (pBuffer != (undefined8 *)0x0) {\n      ❹ ExFreePoolWithTag(pBuffer, 0);\n        NewContext = (undefined8 *)0x0;\n      }\n}\nelse {\n     if ((pBuffer != (undefined8 *)0x0 ||\n   ❺ (pBuffer = (undefined8 *)InternalGetNameFromRegistryObject((longlong)pObject),\n      NewContext = pBuffer, pBuffer != (undefined8 *)0x0) {\n        uBufferSize = &local_98;\n        if (local_98 == 0) {\n            uBufferSize = (ushort *)0x0;\n        }\n        local_80 = (undefined8 *)FUN_1800099e0(iVar7, (ushort *)pBuffer, uBufferSize);\n        if (local_80 != (undefined8 *)0x0) {\n            FUN_1800a3f0(local_80, (undefined8 *)0x0);\n            local_b8 = 1;\n        }\n        goto LAB_18000a252;\n    }\n}\n```", "```\nvoid * InternalGetNameFromRegistryObject(longlong RegObject)\n{\n    NTSTATUS status;\n    NTSTATUS status2;\n    POBJECT_NAME_INFORMATION pBuffer;\n    PVOID null;\n    PVOID pObjectName;\n    ulong pulReturnLength;\n    ulong ulLength;\n\n    null = (PVOID)0x0;\n    pulReturnLength = 0;\n ❶ if (RegObject != 0) {\n        status = ObQueryNameString(RegObject, 0, 0, &pulReturnLength);\n        ulLength = pulReturnLength;\n        pObjectName = null;\n        if ((status = -0x3ffffffc) &&\n          (pBuffer = (POBJECT_NAME_INFORMATION)ExAllocatePoolWithTag(\n                       PagedPool, (ulonglong)pReturnLength, 0x6F616D6C),\n          pBuffer != (POBJECT_NAME_INFORMATION)0x0)) {\n            memset(pBuffer, 0, (ulonglong)ulLength);\n          ❷ status2 = ObQueryNameString(RegObject, pBuffer, ulLength, &pulReturnLength);\n            pObjectName = pBuffer;\n            if (status2 < 0) {\n                ExFreePoolWithTag(pBuffer, 0);\n                pObjectName = null;\n            }\n        }\n        return pObjectName;\n    }\n    return (void *)0x0;\n}\n```", "```\nmimikatz # **version**\nWindows NT 10.0 build 19042 (arch x64)\nmsvc 150030729 207\n\nmimikatz # **!+**\n[*] 'mimidrv' service not present\n[*] 'mimidrv' service successfully registered\n[*] 'mimidrv' service ACL to everyone\n[*] 'mimidrv' service started\n\nmimikatz # **!notifProcess**\n[00] 0xFFFFF80614B1C7A0 [ntoskrnl.exe + 0x31c7a0]\n[00] 0xFFFFF806169F6C70 [cng.sys + 0x6c70]\n[00] 0xFFFFF80611CB4550 [WdFilter.sys + 0x44550]\n[00] 0xFFFFF8061683B9A0 [ksecdd.sys + 0x1b9a0]\n[00] 0xFFFFF80617C245E0 [tcpip.sys + 0x45e0] [00] 0xFFFFF806182CD930 [iorate.sys + 0xd930]\n[00] 0xFFFFF806183AE050 [appid.sys + 0x1e050]\n[00] 0xFFFFF80616979C30 [CI.dll + 0x79c30]\n[00] 0xFFFFF80618ABD140 [dxgkrnl.sys + 0xd140]\n[00] 0xFFFFF80619048D50 [vm3dmp.sys + 0x8d50]\n[00] 0xFFFFF80611843CE0 [peauth.sys + 0x43ce0]\n```"]