["```\nThe Terminator,1984\nPredator,1987\nCommando,1985\nThe Running Man,1987\nTrue Lies,1994\nLast Action Hero,1993\nTotal Recall,1990\nConan the Barbarian,1982\nConan the Destroyer,1984\nHercules in New York,1969\n```", "```\nlet lines = **seq {** use r = new System.IO.StreamReader(\"ArnoldMovies.txt\")\n                  while not r.EndOfStream **do yield** r.ReadLine() **}**\n```", "```\n> **lines |> printfn \"%A\";;**\nseq [\"The Terminator,1984\"; \"Predator,1987\"; \"Commando,1985\"; \"The Running Man,1987\"; ...]\nval it : unit = ()\n```", "```\nseq { 0..10 }\n```", "```\nseq { 0.0..10.0 }\n```", "```\nseq { 'a'..'z' }\n```", "```\nseq { 0..10..100 }\n```", "```\nseq { 'a'..2..'z' }\n```", "```\nseq { 99..-1..0 }\n```", "```\n> **let emptySequence = Seq.empty<string>;;**\n\nval emptySequence : seq<string>\n```", "```\n> **let emptySequence = Seq.empty;;**\n\nval emptySequence : seq<'a>\n```", "```\n> **let rand = System.Random();;**\n\nval rand : System.Random\n\n> **Seq.init 10 (fun _ -> rand.Next(100));;**\nval it : seq<int> = seq [22; 34; 73; 42; ...]\n```", "```\nseq { 0..99 } |> Seq.length\n```", "```\nseq { for i in 1..10 do\n      printfn \"Evaluating %i\" i\n      yield i }\n|> Seq.length = 0\n```", "```\nEvaluating 1\nEvaluating 2\nEvaluating 3\n-- *snip* --\nEvaluating 10\nval it : bool = false\n```", "```\nseq { for i in 1..10 do\n      printfn \"Evaluating %i\" i\n      yield i }\n|> Seq.isEmpty\n```", "```\nEvaluating 1\nval it : bool = false\n```", "```\n> **seq { 0..99 } |> Seq.iter (printfn \"%i\");;**\n0\n1\n2\n-- *snip* --\n97\n98\n99\nval it : unit = ()\n```", "```\n> **seq { 0..99 } |> Seq.map (fun i -> i * i);;**\nval it : seq<int> = seq [0; 1; 4; 9; ...]\n```", "```\n> **let rand = System.Random();;**\n\nval rand : System.Random\n\n> **Seq.init 10 (fun _ -> rand.Next 100) |> Seq.sort;;**\nval it : seq<int> = seq [0; 11; 16; 19; ...]\n```", "```\nlet movies =\n  seq { use r = new System.IO.StreamReader(\"ArnoldMovies.txt\")\n        while not r.EndOfStream do\n          let l = r.ReadLine().Split(',')\n          yield ① l.[0], int l.[1] }\n```", "```\n> **movies |> Seq.sortBy snd;;**\nval it : seq<string * int> =\n  seq\n    [(\"Hercules in New York\", 1969); (\"Conan the Barbarian\", 1982);\n     (\"The Terminator\", 1984); (\"Conan the Destroyer\", 1984); ...]\n```", "```\n> seq { use r = new System.IO.StreamReader(fileName)\n      while not r.EndOfStream do\n        let l = r.ReadLine().Split(',')\n        yield l.[0], int l.[1] }\n|> **Seq.sortBy fst**;;\nval it : seq<string * int> =\n  seq\n    [(\"Commando\", 1985); (\"Conan the Barbarian\", 1982);\n     (\"Conan the Destroyer\", 1984); (\"Hercules in New York\", 1969); ...]\n```", "```\n> **movies |> Seq.filter (fun (_, year) -> year < 1985);;**\nval it : seq<string * int> =\n  seq\n    [(\"The Terminator\", 1984); (\"Conan the Barbarian\", 1982);\n     (\"Conan the Destroyer\", 1984); (\"Hercules in New York\", 1969)]\n```", "```\n> **seq { 1 .. 10 } |> Seq.fold** ① **(fun s c -> s + c)** ② **0;;**\nval it : int = 55\n```", "```\n> **seq { 1..10 } |> Seq.fold (+) 0;;**\nval it : int = 55\n```", "```\n> **seq { 1 .. 10 } |> Seq.reduce (+);;**\nval it : int = 55\n```", "```\n> seq { 1..10 } |> **Seq.sum;;**\nval it : int = 55\n```", "```\n> seq { 1.0..10.0 } |> **Seq.average;;**\nval it : float = 5.5\n```", "```\n> seq { 1..10 } |> Seq.average;;\n\n  seq { 1..10 } |> Seq.average;;\n  -----------------^^^^^^^^^^^\n\nstdin(2,18): error FS0001: The type 'int' does not support the operator 'DivideByInt'\n```", "```\n> **let names = [| \"Rose\"; \"Martha\"; \"Donna\"; \"Amy\"; \"Clara\" |];;**\n\nval names : string [] = [|\"Rose\"; \"Martha\"; \"Donna\"; \"Amy\"; \"Clara\"|]\n```", "```\n> **let lines = [| use r = new System.IO.StreamReader(\"ArnoldMovies.txt\")**\n                  **while not r.EndOfStream do yield r.ReadLine() |];;**\n\nval lines : string [] =\n  [|\"The Terminator,1984\"; \"Predator,1987\"; \"Commando,1985\";\n    \"The Running Man,1987\"; \"True Lies,1994\"; \"Last Action Hero,1993\";\n    \"Total Recall,1990\"; \"Conan the Barbarian,1982\";\n    \"Conan the Destroyer,1984\"; \"Hercules in New York,1969\"|]\n```", "```\nlet emptyArray = [| |]\n```", "```\nlet emptyArray : int array = [| |];;\n```", "```\nArray.empty<string>\n```", "```\n> **let stringArray = Array.zeroCreate<string> 5;;**\n\nval stringArray : string [] = [|null; null; null; null; null|]\n```", "```\n> **let stringArray = Array.init 5 (fun _ -> \"\");;**\n\nval stringArray : string [] = [|\"\"; \"\"; \"\"; \"\"; \"\"|]\n```", "```\n> **lines.[3];;**\nval it : string = \"The Running Man,1987\"\n```", "```\nlines.[5] <- \"Batman & Robin,1997\"\n```", "```\n> **let movies = [| \"The Terminator\"; \"Predator\"; \"Commando\" |];;**\n\nval movies : string [] = [|\"The Terminator\"; \"Predator\"; \"Commando\"|]\n\n> **Array.set movies 1 \"Batman & Robin\"**\n**Array.get movies 1 |> printfn \"%s\";;**\nBatman & Robin\n\nval it : unit = ()\n```", "```\n> **lines.[1..3];;**\nval it : string [] =\n  [|\"Predator,1987\"; \"Commando,1985\"; \"The Running Man,1987\"|]\n```", "```\n[| 1..10 |] |> Array.copy\n```", "```\n> **let r = System.Random()**\n**let ints = Array.init 5 (fun _ -> r.Next(-100, 100));;**\n\nval r : System.Random\nval ints : int [] = [|-94; 20; 13; -99; 0|]\n\n> **ints |> Array.sortInPlace;;**\nval it : unit = ()\n> **ints;;**\nval it : int [] = [|-99; -94; 0; 13; 20|]\n```", "```\nlet movies = [| (\"The Terminator\", \"1984\")\n                (\"Predator\", \"1987\")\n                (\"Commando\", \"1985\")\n                (\"Total Recall\", \"1990\")\n                (\"Conan the Destroyer\", \"1984\") |]\n```", "```\n> **movies |> Array.sortInPlaceBy (fun (_, y) -> y)**\n**movies;;**\n\nval it : (string * string) [] =\n  [|(\"The Terminator\", \"1984\"); (\"Conan the Destroyer\", \"1984\");\n    (\"Commando\", \"1985\"); (\"Predator\", \"1987\"); (\"Total Recall\", \"1990\")|]\n```", "```\n> **movies |> Array.sortInPlaceWith (fun (_, y1) (_, y2) -> if y1 < y2 then -1**\n                                                        **elif y1 > y2 then 1**\n                                                        **else 0)**\n**movies;;**\n\nval it : (string * string) [] =\n  [|(\"The Terminator\", \"1984\"); (\"Conan the Destroyer\", \"1984\");\n    (\"Commando\", \"1985\"); (\"Predator\", \"1987\"); (\"Total Recall\", \"1990\")|]\n```", "```\nlet movies = array2D [| [| \"The Terminator\"; \"1984\" |]\n                        [| \"Predator\"; \"1987\" |]\n                        [| \"Commando\"; \"1985\" |]\n                        [| \"The Running Man\"; \"1987\" |]\n                        [| \"True Lies\"; \"1994\" |]\n                        [| \"Last Action Hero\"; \"1993\" |]\n                        [| \"Total Recall\"; \"1990\" |]\n                        [| \"Conan the Barbarian\"; \"1982\" |]\n                        [| \"Conan the Destroyer\"; \"1984\" |]\n                        [| \"Hercules in New York\"; \"1969\" |] |]\n```", "```\n> **movies.[0..,0..0];;**\nval it : string [,] = [[\"The Terminator\"]\n                       [\"Predator\"]\n                       [\"Commando\"]\n                       [\"The Running Man\"]\n                       -- *snip* --]\n\n> **movies.[0..,1..1];;**\nval it : string [,] = [[\"1984\"]\n                       [\"1987\"]\n                       [\"1985\"]\n                       [\"1987\"]\n                       -- *snip* --]\n```", "```\n> **movies.[1..3,0..];;**\nval it : string [,] = [[\"Predator\"; \"1987\"]\n                       [\"Commando\"; \"1985\"]\n                       [\"The Running Man\"; \"1987\"]]\n```", "```\n> **let movies = array2D [| [| \"The Terminator\"; \"1984\"; \"James Cameron\" |]**\n                        **[| \"Predator\"; \"1987\"; \"John McTiernan\" |]**\n                        **[| \"Commando\"; \"1985\" |] |];;**\nSystem.ArgumentException: The arrays have different lengths.\nParameter name: vals\n-- *snip* --\nStopped due to error\n```", "```\n> **let movies = [| [| \"The Terminator\"; \"1984\"; \"James Cameron\" |]**\n                **[| \"Predator\"; \"1987\"; \"John McTiernan\" |]**\n                **[| \"Commando\"; \"1985\" |] |];;**\n\nval movies : string [] [] =\n  [|[|\"The Terminator\"; \"1984\"; \"James Cameron\"|];\n    [|\"Predator\"; \"1987\"; \"John McTiernan\"|]; [|\"Commando\"; \"1985\"|]|]\n```", "```\n> **movies.[1].[2];;**\nval it : string = \"John McTiernan\"\n```", "```\n> **let names = [ \"Rose\"; \"Martha\"; \"Donna\"; \"Amy\"; \"Clara\" ];;**\n\nval names : string list = [\"Rose\"; \"Martha\"; \"Donna\"; \"Amy\"; \"Clara\"]\n\n> **let numbers = [ 1..11 ];;**\n\nval numbers : int list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11]\n```", "```\n> **List.nth [ 'A'..'Z' ] 3;;**\nval it : char = 'D'\n```", "```\n> **let names = [ \"Rose\"; \"Martha\"; \"Donna\"; \"Amy\"; \"Clara\" ];;**\n\nval names : string list = [\"Rose\"; \"Martha\"; \"Donna\"; \"Amy\"; \"Clara\"]\n\n> **List.head names;;**\nval it : string = \"Rose\"\n> **List.tail names;;**\nval it : string list = [\"Martha\"; \"Donna\"; \"Amy\"; \"Clara\"]\n```", "```\nlet rec contains fn l =\n  if l = [] then false\n  else fn(List.head l) || contains fn (List.tail l)\n```", "```\n> **[] |> contains (fun n -> n = \"Rose\");;**\nval it : bool = false\n```", "```\n> **let names = [ \"Rose\"; \"Martha\"; \"Donna\"; \"Amy\"; \"Clara\" ];;**\n\nval names : string list = [\"Rose\"; \"Martha\"; \"Donna\"; \"Amy\"; \"Clara\"]\n\n> **names |> contains (fun n -> n = \"Amy\");;**\nval it : bool = true\n> **names |> contains (fun n -> n = \"Rory\");;**\nval it : bool = false\n```", "```\n> **let names = [ \"Rose\"; \"Martha\"; \"Donna\"; \"Amy\"; \"Clara\" ]**\n**let newNames = \"Ace\" :: names;;**\n\nval names : string list = [\"Rose\"; \"Martha\"; \"Donna\"; \"Amy\"; \"Clara\"]\nval newNames : string list =\n  [\"Ace\"; \"Rose\"; \"Martha\"; \"Donna\"; \"Amy\"; \"Clara\"]\n```", "```\n> **let classicNames = [ \"Susan\"; \"Barbara\"; \"Sarah Jane\" ]**\n**let modernNames = [ \"Rose\"; \"Martha\"; \"Donna\"; \"Amy\"; \"Clara\" ];;**\n\nval classicNames : string list = [\"Susan\"; \"Barbara\"; \"Sarah Jane\"]\nval modernNames : string list = [\"Rose\"; \"Martha\"; \"Donna\"; \"Amy\"; \"Clara\"]\n\n> **classicNames @ modernNames;;**\nval it : string list =\n  [\"Susan\"; \"Barbara\"; \"Sarah Jane\"; \"Rose\"; \"Martha\"; \"Donna\"; \"Amy\"; \"Clara\"]\n> **List.append classicNames modernNames;;**\nval it : string list =\n  [\"Susan\"; \"Barbara\"; \"Sarah Jane\"; \"Rose\"; \"Martha\"; \"Donna\"; \"Amy\"; \"Clara\"]\n```", "```\n> **List.concat [[ \"Susan\"; \"Sarah Jane\" ]**\n             **[ \"Rose\"; \"Martha\" ]**\n             **[\"Donna\"; \"Amy\"; \"Clara\"]];;**\nval it : string list =\n  [\"Susan\"; \"Sarah Jane\"; \"Rose\"; \"Martha\"; \"Donna\"; \"Amy\"; \"Clara\"]\n```", "```\n> **let alphabet = [ 'A'..'Z' ] |> Set.ofList;;**\n\nval alphabet : Set<char> =\n  set ['A'; 'B'; 'C'; 'D'; 'E'; 'F'; 'G'; 'H'; 'I'; ...]\n```", "```\n> **let vowels = Set.empty.Add('A').Add('E').Add('I').Add('O').Add('U');;**\n\nval vowels : Set<char> = set ['A'; 'E'; 'I'; 'O'; 'U']\n```", "```\n> **let set1 = [ 1..5 ] |> Set.ofList**\n**let set2 = [ 3..7 ] |> Set.ofList**\n**Set.union set1 set2;;**\n\nval set1 : Set<int> = set [1; 2; 3; 4; 5]\nval set2 : Set<int> = set [3; 4; 5; 6; 7]\nval it : Set<int> = set [1; 2; 3; 4; 5; 6; 7]\n```", "```\n> **set1 + set2;;**\nval it : Set<int> = set [1; 2; 3; 4; 5; 6; 7]\n```", "```\n> **let set1 = [ 1..5 ] |> Set.ofList**\n**let set2 = [ 3..7 ] |> Set.ofList**\n**Set.intersect set1 set2;;**\n\nval set1 : Set<int> = set [1; 2; 3; 4; 5]\nval set2 : Set<int> = set [3; 4; 5; 6; 7]\nval it : Set<int> = set [3; 4; 5]\n```", "```\n> **let set1 = [ 1..5 ] |> Set.ofList**\n**let set2 = [ 3..7 ] |> Set.ofList**\n**Set.difference set1 set2;;**\n\nval set1 : Set<int> = set [1; 2; 3; 4; 5]\nval set2 : Set<int> = set [3; 4; 5; 6; 7]\nval it : Set<int> = set [1; 2]\n```", "```\n> **set1 - set2;;**\nval it : Set<int> = set [1; 2]\n```", "```\n> **let set1 = [ 1..5 ] |> Set.ofList**\n**let set2 = [ 1..5 ] |> Set.ofList;;**\n\nval set1 : Set<int> = set [1; 2; 3; 4; 5]\nval set2 : Set<int> = set [1; 2; 3; 4; 5]\n```", "```\n> **Set.isSuperset set1 set2;;**\nval it : bool = true\n> **Set.isProperSuperset set1 set2;;**\nval it : bool = false\n> **Set.isSubset set2 set1;;**\nval it : bool = true\n> **Set.isProperSubset set2 set1;;**\nval it : bool = false\n```", "```\n> **let set1 = [ 0..5 ] |> Set.ofList;;**\n\nval set1 : Set<int> = set [0; 1; 2; 3; 4; 5]\n```", "```\n> **Set.isSuperset set1 set2;;**\nval it : bool = true\n> **Set.isProperSuperset set1 set2;;**\nval it : bool = true\n> **Set.isSubset set2 set1;;**\nval it : bool = true\n> **Set.isProperSubset set2 set1;;**\nval it : bool = true\n```", "```\n> **let stateCapitals =**\n  **Map [(\"Indiana\", \"Indianapolis\")**\n       **(\"Michigan\", \"Lansing\")**\n       **(\"Ohio\", \"Columbus\")**\n       **(\"Kentucky\", \"Frankfort\")**\n       **(\"Illinois\", \"Springfield\")];;**\n\nval stateCapitals : Map<string, string> =\n  map\n    [(\"Illinois\", \"Springfield\"); (\"Indiana\", \"Indianapolis\");\n     (\"Kentucky\", \"Frankfort\"); (\"Michigan\", \"Lansing\"); (\"Ohio\", \"Columbus\")]\n```", "```\n> **stateCapitals.[\"Indiana\"];;**\nval it : string = \"Indianapolis\"\n```", "```\n> **stateCapitals |> Map.find \"Indiana\";;**\nval it : string = \"Indianapolis\"\n```", "```\n> **stateCapitals |> Map.containsKey \"Washington\";;**\nval it : bool = false\n```", "```\n> **stateCapitals |> Map.tryFind \"Washington\";;**\nval it : string option = None\n> **stateCapitals |> Map.tryFind \"Indiana\";;**\nval it : string option = Some \"Indianapolis\"\n```", "```\n> **stateCapitals |> Map.tryFindKey (fun k v -> v = \"Indianapolis\");;**\nval it : string option = Some \"Indiana\"\n> **stateCapitals |> Map.tryFindKey (fun k v -> v = \"Olympia\");;**\nval it : string option = None\n```", "```\n> **seq { 1..10 } |> Seq.toArray;;**\nval it : int [] = [|1; 2; 3; 4; 5; 6; 7; 8; 9; 10|]\n> **seq { 1..10 } |> Array.ofSeq;;**\nval it : int [] = [|1; 2; 3; 4; 5; 6; 7; 8; 9; 10|]\n```", "```\n> **let l = [ 1..10 ]**\n**obj.ReferenceEquals(l, Seq.ofList l);;**\n\nval l : int list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\nval it : bool = ① true\n\n> **let a = [| 1..10 |]**\n**obj.ReferenceEquals(a, List.ofArray a);;**\n\nval a : int [] = [|1; 2; 3; 4; 5; 6; 7; 8; 9; 10|]\nval it : bool = ② false\n```"]