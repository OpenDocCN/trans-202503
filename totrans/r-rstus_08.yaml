- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: 6 R MARKDOWN REPORTS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/chapter.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Imagine that you’ve collected surveys about customer satisfaction with your
    new product. Now you’re ready to analyze the data and write up your results. First,
    you download your data from Google Sheets and import it into a statistical analysis
    tool like SPSS. Next, you use SPSS to clean and analyze your data, export summaries
    of your data as Excel spreadsheets, and then use Excel to make some charts. Finally,
    you write your report in Word, pasting in your charts from Excel along the way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sound familiar? If so, you’re not alone. Many people use this workflow for
    data analysis. But what happens when, the next month, new surveys roll in, and
    you have to redo your report? Yup, back through steps one through five. This multi-tool
    process might work for a one-time project, but let’s be honest: few projects are
    really one-time. For example, you might catch a mistake or realize you forgot
    to include a couple of surveys in your original analysis.'
  prefs: []
  type: TYPE_NORMAL
- en: R Markdown combines data analysis, data visualization, and other R code with
    narrative text to create a document that can be exported to many formats, including
    Word, PDF, and HTML, to share with non-R users. When you use a single tool, your
    workflow becomes much more efficient. If you need to re-create that January customer
    satisfaction report in February, you can rerun your code to produce a new document
    with the newest data, and to fix an error in your analysis, you can simply adjust
    your code.
  prefs: []
  type: TYPE_NORMAL
- en: The ability to easily update reports at any time is known as *reproducibility*,
    and it’s central to the value of R Markdown. This chapter breaks down the pieces
    of an R Markdown document, then describes some potential pitfalls and best practices.
    You’ll learn how to work with YAML metadata, R code chunks, and Markdown-formatted
    text; create inline R code that can change the report’s text dynamically; and
    run the document’s code in various ways.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an R Markdown Document
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To create an R Markdown document in RStudio, go to **File****New File****R
    Markdown**. Choose a title, author, and date, as well as your default output format
    (HTML, PDF, or Word). These values can be changed later. Click **OK**, and RStudio
    will create an R Markdown document with some placeholder content, as shown in
    [Figure 6-1](chapter6.xhtml#fig6-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig6-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6-1: The placeholder content in a new R Markdown document'
  prefs: []
  type: TYPE_NORMAL
- en: The Knit menu at the top of RStudio converts an R Markdown document to the format
    you selected when creating it. In this example, the output format is set to be
    Word, so RStudio will create a Word document when you knit.
  prefs: []
  type: TYPE_NORMAL
- en: Delete the document’s placeholder content. In the next section, you’ll replace
    it with your own.
  prefs: []
  type: TYPE_NORMAL
- en: Document Structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To explore the structure of an R Markdown document, you’ll create a report about
    penguins using data from the palmerpenguins package introduced in [Chapter 3](chapter3.xhtml).
    I’ve separated the data by year, and you’ll use just the 2007 data. [Figure 6-2](chapter6.xhtml#fig6-2)
    shows the complete R Markdown document, with boxes surrounding each section.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig6-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6-2: Components of an R Markdown document'
  prefs: []
  type: TYPE_NORMAL
- en: 'All R Markdown documents have three main parts: one YAML section, multiple
    R code chunks, and sections of Markdown text.'
  prefs: []
  type: TYPE_NORMAL
- en: The YAML Metadata
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The YAML section is the very beginning of an R Markdown document. The name
    YAML comes from the recursive acronym *YAML ain’t markup language*, whose meaning
    isn’t important for our purposes. Three dashes indicate its beginning and end,
    and the text inside of it contains metadata about the R Markdown document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the YAML provides the title, author, date, and output format.
    All elements of the YAML are given in key: value syntax, where each key is a label
    for a piece of metadata (for example, the title) followed by the value.'
  prefs: []
  type: TYPE_NORMAL
- en: The R Code Chunks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'R Markdown documents have a different structure from the R script files you
    might be familiar with (those with the *.R* extension). R script files treat all
    content as code unless you comment out a line by putting a hash mark (#) in front
    of it. In the following listing, the first line is a comment, and the second line
    is code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In R Markdown, the situation is reversed. Everything after the YAML is treated
    as text unless you specify otherwise by creating *code chunks.* These start with
    three backticks ([PRE2]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: —— Attaching core tidyverse packages ————— tidyverse 1.x.x——
  prefs: []
  type: TYPE_NORMAL
- en:  dplyr     1.x.x       readr    2.x.x
  prefs: []
  type: TYPE_NORMAL
- en:  forcats   0.x.x       stringr  1.x.x
  prefs: []
  type: TYPE_NORMAL
- en:  ggplot2   3.x.x       tibble   3.x.x
  prefs: []
  type: TYPE_NORMAL
- en:  lubridate 1.x.x       tidyr    1.x.x
  prefs: []
  type: TYPE_NORMAL
- en:  purrr     1.x.x
  prefs: []
  type: TYPE_NORMAL
- en: —— Conflicts————— tidyverse_conflicts() ——
  prefs: []
  type: TYPE_NORMAL
- en: ｘ dplyr::filter() masks stats::filter()
  prefs: []
  type: TYPE_NORMAL
- en: ｘ dplyr::lag()    masks stats::lag()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '- Adelie'
  prefs: []
  type: TYPE_NORMAL
- en: '- Gentoo'
  prefs: []
  type: TYPE_NORMAL
- en: '- Chinstrap'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 1\. Adelie
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Gentoo
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Chinstrap
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The average bill length is `r average_bill_length` millimeters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: penguins <- read_csv("https://data.rfortherestofus.com/penguins-2008.csv")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '---'
  prefs: []
  type: TYPE_NORMAL
- en: 'title: Penguins Report'
  prefs: []
  type: TYPE_NORMAL
- en: 'author: David Keyes'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-01-12'
  prefs: []
  type: TYPE_NORMAL
- en: 'output: word_document'
  prefs: []
  type: TYPE_NORMAL
- en: '---'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: This error happens because you are attempting to use tidyverse functions like
    read_csv(), as well as various ggplot functions, before you load the tidyverse
    package.
  prefs: []
  type: TYPE_NORMAL
- en: Alison Hill, a research scientist and one of the most prolific R Markdown educators,
    tells her students to knit early and often. This practice makes it easier to isolate
    issues that make knitting fail. Hill describes her typical R Markdown workflow
    as spending 75 percent of her time working on a new document and 25 percent of
    her time knitting to check that the R Markdown document works.
  prefs: []
  type: TYPE_NORMAL
- en: Quarto
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In 2022, Posit released a publishing tool similar to R Markdown. Known as Quarto,
    this tool takes what R Markdown has done for R and extends it to other languages,
    including Python, Julia, and Observable JS. As I write this book, Quarto is gaining
    traction. Luckily, the concepts you’ve learned in this chapter apply to Quarto
    as well. Quarto documents have a YAML section, code chunks, and Markdown text.
    You can export Quarto documents to HTML, PDF, and Word. However, R Markdown and
    Quarto documents have some syntactic differences, which are explored further in
    [Chapter 10](chapter10.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You started this chapter by considering the scenario of a report that needs
    to be regenerated monthly. You learned how you can use R Markdown to reproduce
    this report every month without changing your code. Even if you lost the final
    Word document, you could quickly re-create it.
  prefs: []
  type: TYPE_NORMAL
- en: Best of all, working with R Markdown makes it possible to do in seconds what
    would have previously taken hours. When making a single report requires three
    tools and five steps, you may not want to work on it. But, as Alison Hill has
    pointed out, with R Markdown you can even work on reports before you receive all
    of the data. You could simply write code that works with partial data and rerun
    it with the final data at any time.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter has just scratched the surface of what R Markdown can do. The next
    chapter will show you how to use it to instantly generate hundreds of reports.
    Magic indeed!
  prefs: []
  type: TYPE_NORMAL
- en: Additional Resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Yihui Xie, J. J. Allaire, and Garrett Grolemund, *R Markdown: The Definitive
    Guide* (Boca Raton, FL: CRC Press, 2019), *[https://bookdown.org/yihui/rmarkdown/](https://bookdown.org/yihui/rmarkdown/)*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Yihui Xie, Christophe Dervieux, and Emily Riederer, *R Markdown Cookbook* (Boca
    Raton, FL: CRC Press, 2021), *[https://bookdown.org/yihui/rmarkdown-cookbook/](https://bookdown.org/yihui/rmarkdown-cookbook/)*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
