["```\n   $ git clean -xfd\n   --snip--\n➊ $ rm bootstrap.sh Makefile.in src/Makefile.in\n➋ $ echo \"SUBDIRS = src\" > Makefile.am\n➌ $ echo \"bin_PROGRAMS = jupiter\n   > jupiter_SOURCES = main.c\" > src/Makefile.am\n➍ $ touch NEWS README AUTHORS ChangeLog\n   $ ls -1\n   AUTHORS\n   ChangeLog\n   configure.ac\n   Makefile.am\n   NEWS\n   README\n   src\n   $\n```", "```\n#                                               -*- Autoconf -*-\n# Process this file with autoconf to produce a configure script.\nAC_PREREQ([2.69])\nAC_INIT([Jupiter], [1.0], [jupiter-bugs@example.org])\nAM_INIT_AUTOMAKE\nAC_CONFIG_SRCDIR([src/main.c])\n--snip--\n```", "```\n$ autoreconf -i\nconfigure.ac:11: installing './compile'\nconfigure.ac:6: installing './install-sh'\nconfigure.ac:6: installing './missing'\nMakefile.am: installing './INSTALL'\nMakefile.am: installing './COPYING' using GNU General Public License v3 file\nMakefile.am:     Consider adding the COPYING file to the version control system\nMakefile.am:     for your code, to avoid questions about which license your\nproject uses src/Makefile.am: installing './depcomp'\n$\n$ ls -1p\naclocal.m4\nAUTHORS\nautom4te.cache/\nChangeLog\ncompile\nconfig.h.in\nconfigure\nconfigure.ac\nCOPYING\ndepcomp\nINSTALL\ninstall-sh\nMakefile.am\nMakefile.in\nmissing\nNEWS\nREADME\nsrc/\n$\n```", "```\n$ autoreconf\n$ ./configure\n--snip--\n$ make\nmake  all-recursive\nmake[1]: Entering directory '/.../jupiter'\nMaking all in src\nmake[2]: Entering directory '/.../jupiter/src'\ngcc -DHAVE_CONFIG_H -I. -I..         -g -O2 -MT main.o -MD -MP -MF .deps/main.Tpo -c -o main.o main.c\nmv -f .deps/main.Tpo .deps/main.Po\ngcc  -g -O2   -o jupiter main.o  -lpthread\nmake[2]: Leaving directory '/.../jupiter/src'\nmake[2]: Entering directory '/.../jupiter'\nmake[2]: Leaving directory '/.../jupiter'\nmake[1]: Leaving directory '/.../jupiter'\n$\n```", "```\n   $ mkdir temp\n   $ touch temp/Makefile.am\n➊ $ echo \"SUBDIRS = src temp\" > Makefile.am\n   $ vi configure.ac\n   --snip--\n   AC_CONFIG_FILES([Makefile\n                    src/Makefile\n                 ➋ temp/Makefile])\n   --snip--\n   $ autoreconf\n   $ ./configure\n   --snip--\n   $ ls -1sh temp\n   total 24K\n➌ 12K Makefile\n   0 Makefile.am\n➍ 12K Makefile.in\n   $\n```", "```\nSUBDIRS = src\n```", "```\nSUBDIRS = . src\n```", "```\nbin_PROGRAMS = jupiter\njupiter_SOURCES = main.c\n```", "```\n[modifier-list]prefix_PRIMARY = product1 product2 ... productN\n```", "```\nxmldir = $(datadir)/xml\nxml_DATA = file1.xml file2.xml file3.xml ...\n```", "```\nAC_INIT(...)\n--snip--\noptional_programs=\nAC_SUBST([optional_programs])\n--snip--\nif test \"x$(build_opt_prog)\" = xyes; then\n➊ optional_programs=$(optional_programs) optprog\nfi\n--snip--\n```", "```\n➋ EXTRA_PROGRAMS = optprog\n➌ bin_PROGRAMS = myprog $(optional_programs)\n```", "```\n[modifier-list]product_SOURCES = file1 file2 ... fileN\n```", "```\n➊ lib_LIBRARIES = libc++.a\n➋ libc___a_SOURCES = ...\n```", "```\nmodifier-list = modifier_[modifier-list]\n```", "```\ndist_myprog_SOURCES = file1.c file2.c\nnodist_myprog_SOURCES = file3.c file4.c\n```", "```\nnobase_pkginclude_HEADERS = mylib.h sys/constants.h\n```", "```\nEXTRA_jupiter_SOURCES = possibly.c\n```", "```\n--snip--\ncheck: all\n        ./jupiter | grep \"Hello from .*jupiter!\"\n        @echo \"*** ALL TESTS PASSED ***\"\n--snip--\n```", "```\n   bin_PROGRAMS = jupiter\n   jupiter_SOURCES = main.c\n\n➊ check_SCRIPTS = greptest.sh\n➋ TESTS = $(check_SCRIPTS)\n\n   greptest.sh:\n\n echo './jupiter | grep \"Hello from .*jupiter!\"' > greptest.sh\n         chmod +x greptest.sh\n\n➌ CLEANFILES = greptest.sh\n```", "```\n$ make check\nMaking check in src\nmake[1]: Entering directory '/.../jupiter/src'\n cd .. && /bin/bash /.../jupiter/missing automake-1.15 --gnu src/Makefile\nparallel-tests: error: required file './test-driver' not found\nparallel-tests:   'automake --add-missing' can install 'test-driver'\nMakefile:255: recipe for target 'Makefile.in' failed\nmake[1]: *** [Makefile.in] Error 1\nmake[1]: Leaving directory '/.../jupiter/src'\nMakefile:352: recipe for target 'check-recursive' failed\nmake: *** [check-recursive] Error 1\n$\n```", "```\n$ autoreconf -i\nparallel-tests: installing './test-driver'\n$\n$ make check\n/bin/bash ./config.status --recheck\nrunning CONFIG_SHELL=/bin/bash /bin/bash ./configure --no-create --no-recursion\nchecking for a BSD-compatible install... /usr/bin/install -c\nchecking whether build environment is sane... yes\nchecking for a thread-safe mkdir -p... /bin/mkdir -p\n--snip--\nMaking check in src\nmake[1]: Entering directory '/.../jupiter/src'\nmake  greptest.sh\nmake[2]: Entering directory '/.../jupiter/src'\necho './jupiter | grep \"Hello from .*jupiter!\"' > greptest.sh\nchmod +x greptest.sh\nmake[2]: Leaving directory '/.../jupiter/src'\nmake  check-TESTS\nmake[2]: Entering directory '/.../jupiter/src'\nmake[3]: Entering directory '/.../jupiter/src'\nPASS: greptest.sh\n============================================================================\nTestsuite summary for Jupiter 1.0\n============================================================================\n# TOTAL: 1\n# PASS:  1\n# SKIP:  0\n# XFAIL: 0\n# FAIL:  0\n# XPASS: 0\n# ERROR: 0\n============================================================================\nmake[3]: Leaving directory '/.../jupiter/src'\nmake[2]: Leaving directory '/.../jupiter/src'\nmake[1]: Leaving directory '/.../jupiter/src'\nmake[1]: Entering directory '/.../jupiter'\nmake[1]: Leaving directory '/.../jupiter'\n$\n```", "```\n$ mkdir common\n$ touch common/jupcommon.h\n$ cp src/main.c common/print.c\n$ touch common/Makefile.am\n$\n```", "```\nint print_routine(const char * name);\n```", "```\n#include \"config.h\"\n\n#include \"jupcommon.h\"\n\n#include <stdio.h>\n#include <stdlib.h>\n\n#if HAVE_PTHREAD_H\n# include <pthread.h>\n#endif\n\nstatic void * print_it(void * data)\n{\n    printf(\"Hello from %s!\\n\", (const char *)data);\n    return 0;\n}\n\nint print_routine(const char * name)\n{\n#if ASYNC_EXEC\n    pthread_t tid;\n    pthread_create(&tid, 0, print_it, (void*)name);\n    pthread_join(tid, 0);\n#else\n    print_it(name);\n#endif\n    return 0;\n}\n```", "```\n#include \"config.h\"\n\n#include \"jupcommon.h\"\n\nint main(int argc, char * argv[])\n{\n    return print_routine(argv[0]);\n}\n```", "```\nnoinst_LIBRARIES = libjupcommon.a\nlibjupcommon_a_SOURCES = jupcommon.h print.c\n```", "```\n   bin_PROGRAMS = jupiter\n   jupiter_SOURCES = main.c\n➊ jupiter_CPPFLAGS = -I$(top_srcdir)/common\n➋ jupiter_LDADD = ../common/libjupcommon.a\n   --snip--\n```", "```\n   AM_CFLAGS = ... some flags ...\n   --snip--\n➊ prog1_CFLAGS = $(AM_CFLAGS) ... more flags ...\n   --snip--\n```", "```\nSUBDIRS = common src\n```", "```\n--snip--\nAC_CONFIG_FILES([Makefile\n                 common/Makefile\n                 src/Makefile])\n--snip--\n```", "```\n   $ make distclean\n   --snip--\n   $ autoreconf -i\n   configure.ac:11: installing './compile'\n   configure.ac:6: installing './install-sh'\n   configure.ac:6: installing './missing'\n   Makefile.am: installing './INSTALL'\n   Makefile.am: installing './COPYING' using GNU General Public License v3 file\n   Makefile.am:     Consider adding the COPYING file to the version control\n   system\n   Makefile.am:     for your code, to avoid questions about which license your\n   project uses\n➊ common/Makefile.am:1: error: library used but 'RANLIB' is undefined\n   common/Makefile.am:1:  The usual way to define 'RANLIB' is to add 'AC_PROG_\n   RANLIB'\n   common/Makefile.am:1:  to 'configure.ac' and run 'autoconf' again.\n   common/Makefile.am: installing './depcomp'\n   parallel-tests: installing './test-driver'\n   autoreconf: automake failed with exit status: 1\n   $\n```", "```\n--snip--\n# Checks for programs.\nAC_PROG_CC\nAC_PROG_INSTALL\nAC_PROG_RANLIB\n--snip--\n```", "```\n$ autoreconf -i\n$\n```", "```\nEXTRA_DIST = windows\n```", "```\n$ make clean\n--snip--\n$ configure --enable-silent-rules\n--snip--\n$ make\nmake  all-recursive\nmake[1]: Entering directory '/.../jupiter'\nMaking all in common\nmake[2]: Entering directory '/.../jupiter/common'\n  CC       print.o\n  AR       libjupcommon.a\nar: `u' modifier ignored since `D' is the default (see `U')\nmake[2]: Leaving directory '/.../jupiter/common'\nMaking all in src\nmake[2]: Entering directory '/.../jupiter/src'\n  CC       jupiter-main.o\n  CCLD     jupiter\nmake[2]: Leaving directory '/.../jupiter/src'\nmake[2]: Entering directory '/.../jupiter'\nmake[2]: Leaving directory '/.../jupiter'\nmake[1]: Leaving directory '/.../jupiter'\n$\n```", "```\n$ make >/dev/null\nar: `u' modifier ignored since `D' is the default (see `U')\n$\n```", "```\nnoinst_LIBRARIES = common/libjupcommon.a\ncommon_libjupcommon_a_SOURCES = common/jupcommon.h common/print.c\n\nbin_PROGRAMS = src/jupiter\nsrc_jupiter_SOURCES = src/main.c\nsrc_jupiter_CPPFLAGS = -I$(top_srcdir)/common\nsrc_jupiter_LDADD = common/libjupcommon.a\n\ncheck_SCRIPTS = src/greptest.sh\nTESTS = $(check_SCRIPTS)\n\nsrc/greptest.sh:\n        echo './src/jupiter | grep \"Hello from .*jupiter!\"' > src/greptest.sh\n        chmod +x src/greptest.sh\n\nCLEANFILES = src/greptest.sh\n```", "```\n#                                               -*- Autoconf -*-\n# Process this file with autoconf to produce a configure script.\n\nAC_PREREQ([2.69])\nAC_INIT([Jupiter], [1.0], [jupiter-bugs@example.org])\nAM_INIT_AUTOMAKE([subdir-objects])\nAC_CONFIG_SRCDIR([src/main.c])\nAC_CONFIG_HEADERS([config.h])\n--snip--\n# Checks for library functions.\n\nAC_CONFIG_FILES([Makefile])\nAC_OUTPUT\n\ncat << EOF\n--snip--\n```", "```\n$ rm common/Makefile.am src/Makefile.am\n$\n```"]