- en: '[9](nsp-boxall502581-0008.xhtml#rch09)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[9](nsp-boxall502581-0008.xhtml#rch09)'
- en: Using the Internal EEPROM
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用内部 EEPROM
- en: '![](images/nsp-boxall502581-ct.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-boxall502581-ct.jpg)'
- en: When you define and use a variable in your AVR code, the stored data only lasts
    until the hardware is reset or the power is turned off. But what if you need to
    keep some values for future use? That’s where we turn to the microcontroller’s
    *electrically erasable programmable read-only memory (EEPROM)* , a special type
    of memory that holds information even when power is disconnected.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 AVR 代码中定义并使用一个变量时，存储的数据只会持续到硬件重置或断电。但是如果你需要保存一些值以备将来使用怎么办？这时我们转向微控制器的 *电可擦可编程只读存储器（EEPROM）*，它是一种特殊类型的存储器，即使断电也能保持信息。
- en: 'In this chapter, you will:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将：
- en: • Learn how to store byte, word, and floating-point variables in the microcontroller’s
    EEPROM, and retrieve them.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 学习如何将字节、字和浮动点变量存储到微控制器的 EEPROM 中，并从中检索它们。
- en: • Build an ATtiny85 EEPROM storage and retrieval unit and a simple EEPROM datalogger
    with an ATmega328P-PU.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 构建一个 ATtiny85 EEPROM 存储和检索单元，以及一个使用 ATmega328P-PU 的简单 EEPROM 数据记录器。
- en: • Create a program to log temperatures to the ATmega328P-PU EEPROM for later
    retrieval.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 创建一个程序，将温度记录到 ATmega328P-PU 的 EEPROM 中，以供后续检索。
- en: '[Storing Bytes in EEPROM](nsp-boxall502581-0008.xhtml#rah1101)'
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[将字节存储到 EEPROM](nsp-boxall502581-0008.xhtml#rah1101)'
- en: An EEPROM is a microcontroller component that doesn’t need electricity to retain
    the contents of its memory. The concept originates from read-only memory (ROM)
    ICs, such as those found in gaming console cartridges, where the game code stays
    in the IC even when it’s not connected to the console. Taking this concept further,
    an EEPROM lets the host controller write over old information with new information,
    which the EEPROM can still remember when the power is disconnected—that’s what
    “electrically erasable” signifies.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: EEPROM 是一种微控制器组件，无需电力即可保持其内存内容。这一概念源自只读存储器（ROM）IC，例如在游戏机卡带中找到的那些，它们的游戏代码即使在没有连接到主机时仍会保留。在这个概念的基础上，EEPROM
    允许主控制器用新信息覆盖旧信息，而当电源断开时，EEPROM 仍能记住这些信息——这就是“电可擦”所指的含义。
- en: Different AVR microcontrollers have EEPROMs of various sizes. For example, our
    ATtiny85 can store 512 bytes of data, while the ATmega328P-PU can store 1,024
    bytes. In this chapter I’ll show you how to store and retrieve data in both microcontrollers’
    EEPROMs so you can do so for your own projects. There are several different methods
    of storing data in the EEPROM, depending on the type of data. We’ll begin by discussing
    how to store bytes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的 AVR 微控制器具有不同大小的 EEPROM。例如，我们的 ATtiny85 可以存储 512 字节的数据，而 ATmega328P-PU 可以存储
    1,024 字节。在本章中，我将向你展示如何在这两种微控制器的 EEPROM 中存储和检索数据，这样你就可以将其用于你自己的项目。根据数据的类型，有几种不同的方法可以将数据存储到
    EEPROM 中。我们将首先讨论如何存储字节。
- en: Before we go any further, however, there are two things you’ll need to keep
    in mind. First, the EEPROM has a lifespan of around 100,000 read/write cycles.
    Tests have shown that they may last longer, but be aware of the approximate lifespan
    when building your own projects. Second, remember that when you upload new code
    to your AVR, the data in the EEPROM is erased.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在继续之前，你需要记住两点。首先，EEPROM 的使用寿命约为 100,000 次读写周期。测试表明它们可能会更持久，但在构建自己的项目时要注意大致的使用寿命。其次，请记住，当你上传新的代码到
    AVR 时，EEPROM 中的数据会被清除。
- en: 'To use the EEPROM in our code for either microcontroller, we first include
    the EEPROM library:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的代码中使用 EEPROM，无论是哪个微控制器，我们首先需要包含 EEPROM 库：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, to write a byte of data (for example, a number between 0 and 255), we
    use the following function:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了写入一个字节数据（例如，0 到 255 之间的数字），我们使用以下函数：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: where `a` is the location inside the EEPROM—between 0 and 511 for the ATtiny85,
    and between 0 and 1023 for the ATmega328P-PU—and `b` is the byte of data to store,
    between 0 and 255\. We prefix the location variable `a` with `(uint8_t*)` as the
    EEPROM functions require the parameter to be an 8-bit integer.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `a` 是 EEPROM 中的位置——对于 ATtiny85，范围是 0 到 511；对于 ATmega328P-PU，范围是 0 到 1023——`b`
    是要存储的字节数据，范围是 0 到 255。我们将位置变量 `a` 前缀加上 `(uint8_t*)`，因为 EEPROM 函数要求该参数为 8 位整数。
- en: 'You can also *update* an EEPROM location to change the value stored in it,
    as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以 *更新* EEPROM 的位置，以更改其中存储的值，如下所示：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: where again `a` is the location inside the EEPROM—between 0 and 511 for the
    ATtiny85, and between 0 and 1023 for the ATmega328P-PU—and `b` is the byte of
    data to store, between 0 and 255\. Before writing a byte of data to a location,
    an update command first checks the value currently at that location. If the value
    to be written is the same as the current value, no write occurs. Though this check
    adds processing time, it saves unnecessarily writing to the EEPROM, thus extending
    its lifespan.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `a` 仍然是 EEPROM 中的位置——对于 ATtiny85 来说在 0 和 511 之间，对于 ATmega328P-PU 来说在 0 和
    1023 之间——而 `b` 是要存储的数据字节，范围是 0 到 255。在将一个数据字节写入位置之前，更新命令首先会检查该位置当前的值。如果要写入的值与当前值相同，则不进行写入。虽然这个检查会增加处理时间，但它避免了不必要的写入
    EEPROM，从而延长其寿命。
- en: 'To retrieve the byte of data stored in a location, use the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索存储在位置中的字节数据，可以使用以下方法：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This allocates the value stored in EEPROM location `a` to the variable `i` .
    You’ll test a few of these functions out in the [next project](nsp-boxall502581-0019.xhtml#pro38)
    .
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把存储在 EEPROM 位置 `a` 中的值分配给变量 `i`。你将在[下一个项目](nsp-boxall502581-0019.xhtml#pro38)中测试一些这些函数。
- en: '[Project 38: Experimenting with the ATtiny85’s EEPROM](nsp-boxall502581-0008.xhtml#rpro38)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目 38：实验 ATtiny85 的 EEPROM](nsp-boxall502581-0008.xhtml#rpro38)'
- en: This project will demonstrate writing and retrieving bytes of data from the
    ATtiny85’s EEPROM. It uses four LEDs as a quick way to display the numbers 0 to
    15 in binary form, with diode D1 being the least significant bit (for 0) and diode
    D4 being the most significant bit (for 15).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目将演示如何从 ATtiny85 的 EEPROM 中写入和检索字节数据。它使用四个 LED 作为快速显示 0 到 15 二进制形式的数字的方式，其中二极管
    D1 表示最低有效位（表示 0），而二极管 D4 表示最高有效位（表示 15）。
- en: 'You will need the following hardware:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下硬件：
- en: • USBasp programmer
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • USBasp 编程器
- en: • Solderless breadboard
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 无焊面包板
- en: • ATtiny85–20PU microcontroller
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • ATtiny85–20PU 微控制器
- en: • Four LEDs
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 四个 LED
- en: • Four 560 Ω resistors
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 四个 560 Ω 电阻
- en: • Jumper wires
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 跳线
- en: Assemble the circuit as shown in [Figure 9-1](nsp-boxall502581-0019.xhtml#f09001)
    .
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图 9-1](nsp-boxall502581-0019.xhtml#f09001)所示组装电路。
- en: '![Schematic diagram for Project 38](images/nsp-boxall502581-f09001.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![项目 38 的电路图](images/nsp-boxall502581-f09001.jpg)'
- en: 'Figure 9-1: Schematic for [Project 38](nsp-boxall502581-0019.xhtml#pro38)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9-1： [项目 38](nsp-boxall502581-0019.xhtml#pro38) 的电路图
- en: Open a terminal window, navigate to the *Project 38* subfolder of this book’s
    *Chapter 9* folder, and enter the command `make flash` . After a moment, the LEDs
    should display the numbers 0 to 15 in binary and then repeat.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个终端窗口，导航到本书 *第 9 章* 文件夹下的 *项目 38* 子文件夹，并输入命令 `make flash`。片刻后，LED 应该会显示 0
    到 15 的二进制数字，然后重复。
- en: To see how this works, take a look at the *main.c* file for [Project 38](nsp-boxall502581-0019.xhtml#pro38)
    .
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看它是如何工作的，可以查看[项目 38](nsp-boxall502581-0019.xhtml#pro38)中的 *main.c* 文件。
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As mentioned earlier, we need to include the EEPROM library ❶ to take advantage
    of the functions to update and read bytes in the EEPROM. The first `for` loop
    repeats 16 times, updating the values in EEPROM locations 0 . . . 15 to 0 . . .
    15 ❷. The second loop retrieves the data from EEPROM locations 0 . . . 15 and
    sets the PORTB register to the number retrieved from the EEPROM ❸. This activates
    the LEDs connected to the matching pins of PORTB, thus displaying each value in
    binary.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们需要包含 EEPROM 库 ❶，以便利用其功能来更新和读取 EEPROM 中的字节。第一个 `for` 循环重复执行 16 次，更新 EEPROM
    中位置 0 . . . 15 的值为 0 . . . 15 ❷。第二个循环从 EEPROM 位置 0 . . . 15 中获取数据，并将 PORTB 寄存器设置为从
    EEPROM 中获取的数字 ❸。这会激活连接到 PORTB 相应引脚的 LED，从而以二进制形式显示每个值。
- en: Now that you know how to store small numbers in the microcontroller’s EEPROM,
    I’ll show you how to store larger numbers using words of data.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何将小数字存储到微控制器的 EEPROM 中，我将向你展示如何使用数据字存储更大的数字。
- en: '[Storing Words](nsp-boxall502581-0008.xhtml#rah1102)'
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[存储数据字](nsp-boxall502581-0008.xhtml#rah1102)'
- en: 'A *word* of data uses 16 bits, or 2 bytes, to represent 16-bit signed or unsigned
    integers. As you learned in [Chapter 2](nsp-boxall502581-0012.xhtml#ch02) , these
    can be in the range of −32,768 to 32,767 for signed integers or 0 to 65,535 for
    unsigned integers. For example, a word could represent 12,345 or −23,567\. To
    write words, we again use functions from the EEPROM library, which we include
    as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 *数据字* 使用 16 位，或 2 个字节，来表示 16 位带符号或无符号整数。正如你在[第 2 章](nsp-boxall502581-0012.xhtml#ch02)中学到的，这些数字的范围是带符号整数的
    −32,768 到 32,767，或者无符号整数的 0 到 65,535。例如，一个数据字可以表示 12,345 或 −23,567。要写入数据字，我们再次使用来自
    EEPROM 库的函数，像这样包含：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To write a word of data, we use the following function:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要写入一个数据字，我们使用以下函数：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: where `a` is the location inside the EEPROM and `b` is the word of data to store.
    While a word of data is 2 bytes in size, an EEPROM location is 1 byte in size.
    This means that when you write a word of data it will fill two EEPROM locations.
    Consequently, if you want to write two words of data at the start of the EEPROM,
    you’ll need to write the first word to location 0 and the second word to location
    2.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，`a`是 EEPROM 内的位置，`b`是要存储的数据字。数据字的大小是 2 字节，而 EEPROM 位置的大小是 1 字节。这意味着，当你写入一个数据字时，它将填充两个
    EEPROM 位置。因此，如果你想在 EEPROM 开头写入两个数据字，你需要将第一个数据字写入位置 0，将第二个数据字写入位置 2。
- en: 'As with bytes, you can also update words. You do this with the following function:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 和字节一样，你也可以更新数据字。你可以使用以下函数来做到这一点：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To retrieve the word of data stored in a location, use one of the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索存储在某个位置的数据字，请使用以下之一：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This allocates the value stored in EEPROM location `a` to the variable `i` .
    Note that `a` should be the first of the two locations where the word is stored, not
    the second (so, 0 or 2 in our previous example). You’ll test these functions out
    in the [next project](nsp-boxall502581-0019.xhtml#pro39) .
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把存储在 EEPROM 位置`a`中的值分配给变量`i`。请注意，`a`应为存储数据字的两个位置中的第一个，而不是第二个（因此，在我们之前的示例中是
    0 或 2）。你将在[下一个项目](nsp-boxall502581-0019.xhtml#pro39)中测试这些功能。
- en: '[Project 39: A Simple EEPROM Datalogger](nsp-boxall502581-0008.xhtml#rpro39)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目 39：一个简单的 EEPROM 数据记录器](nsp-boxall502581-0008.xhtml#rpro39)'
- en: In this project, you’ll create a basic data-logging device. It not only demonstrates
    writing words of data to and reading them from the ATmega328P-PU’s EEPROM but
    also incorporates the USART and custom functions. Instead of writing arbitrary
    numbers to the EEPROM, this project repeatedly reads the status of digital input
    pin PORTB0, writing a 0 or 1 to the specified EEPROM location (for low or high,
    respectively). We’ll use the USART to create a basic text-based interface control
    system to log, retrieve, and erase EEPROM data.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将创建一个基本的数据记录设备。它不仅展示了如何将数据字写入并从 ATmega328P-PU 的 EEPROM 中读取数据，还结合了 USART
    和自定义功能。此项目不是写入任意数字到 EEPROM，而是重复读取数字输入引脚 PORTB0 的状态，将 0 或 1 写入指定的 EEPROM 位置（分别表示低电平或高电平）。我们将使用
    USART 创建一个基本的基于文本的界面控制系统，用于记录、检索和擦除 EEPROM 数据。
- en: '[The Hardware](nsp-boxall502581-0008.xhtml#rbh1101)'
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[硬件](nsp-boxall502581-0008.xhtml#rbh1101)'
- en: 'You will need the following hardware:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下硬件：
- en: • USBasp programmer
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • USBasp 编程器
- en: • Solderless breadboard
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 无焊面包板
- en: • ATmega328P-PU microcontroller
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • ATmega328P-PU 微控制器
- en: • USB-to-serial converter
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • USB 到串行转换器
- en: • Jumper wires
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 跳线
- en: Assemble the circuit as shown in [Figure 9-2](nsp-boxall502581-0019.xhtml#f09002)
    .
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图 9-2](nsp-boxall502581-0019.xhtml#f09002)中的示意图组装电路。
- en: '![Schematic diagram for Project 39](images/nsp-boxall502581-f09002.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![项目 39 的电路图](images/nsp-boxall502581-f09002.jpg)'
- en: 'Figure 9-2: Schematic for [Project 39](nsp-boxall502581-0019.xhtml#pro39)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9-2： [项目 39](nsp-boxall502581-0019.xhtml#pro39)的电路图
- en: Don’t forget to connect the USB-to-serial converter as demonstrated in [Chapter
    4](nsp-boxall502581-0014.xhtml#ch04) . The positive and negative points shown
    in the schematic are used to log the low and high signals. To experiment, you
    could run tests connecting only the positive to 5 V or GND (the negative must
    always go to GND).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了连接 USB 到串行转换器，如[第 4 章](nsp-boxall502581-0014.xhtml#ch04)所示。示意图中显示的正负点用于记录低高信号。你可以尝试连接正极到
    5V 或 GND（负极必须始终连接到 GND）进行实验。
- en: '[The Code](nsp-boxall502581-0008.xhtml#rbh1102)'
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[代码](nsp-boxall502581-0008.xhtml#rbh1102)'
- en: Open a terminal window, navigate to the *Project 39* subfolder of this book’s
    *Chapter 9* folder, and enter the command `make flash` . Then open the terminal
    software you installed in [Chapter 4](nsp-boxall502581-0014.xhtml#ch04) . After
    a moment you will be prompted to “Enter 1 to start, 2 to dump, 3 to erase.” Press
    **1** on your computer’s keyboard to run the data-logging function, **2** for
    the microcontroller to read the EEPROM and send the data back to the terminal
    window, or **3** to erase the data by writing all the EEPROM locations back to
    0.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端窗口，进入本书*第 9 章*文件夹中的*项目 39*子文件夹，并输入命令`make flash`。然后打开你在[第 4 章](nsp-boxall502581-0014.xhtml#ch04)中安装的终端软件。片刻后，你将被提示输入“Enter
    1 to start, 2 to dump, 3 to erase.”按**1**键启动数据记录功能，按**2**键让微控制器读取 EEPROM 并将数据发送回终端窗口，或按**3**键通过将所有
    EEPROM 位置写回 0 来擦除数据。
- en: '[Figure 9-3](nsp-boxall502581-0019.xhtml#f09003) shows an example of this sequence.
    (In the interest of saving space, I’ve altered the code that produced this figure
    to use only the first 10 EEPROM locations. When you run the code, your sequences
    will be much longer.)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 9-3](nsp-boxall502581-0019.xhtml#f09003) 显示了这一序列的示例。（为了节省空间，我已修改了生成此图的代码，只使用了前
    10 个 EEPROM 位置。当你运行代码时，你的序列将会长得多。）'
- en: '![A screenshot of the terminal software showing Project 39 in operation (capture
    and playback of logged data)](images/nsp-boxall502581-f09003.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![终端软件截图，显示项目 39 正在运行（捕获并回放日志数据）](images/nsp-boxall502581-f09003.jpg)'
- en: 'Figure 9-3: Example output for [Project 39](nsp-boxall502581-0019.xhtml#pro39)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9-3：[项目 39](nsp-boxall502581-0019.xhtml#pro39)的示例输出
- en: 'Let’s see how this works:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它是如何工作的：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: First we import all the required libraries and set the data speed for the USART,
    as usual. We also set `logDelay` to 1,000 ❶, specifying the delay in milliseconds
    between each logging event (you can change this value to suit your own needs).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们像往常一样导入所有必要的库，并设置 USART 的数据速度。我们还将 `logDelay` 设置为 1,000 ❶，指定每个日志事件之间的延迟时间（你可以根据自己的需要更改这个值）。
- en: Next, we declare the functions required to initialize the USART ❷, send bytes
    from the USART to the computer ❸ and receive bytes coming in the other direction
    ❹, and send strings to the terminal emulator ❺. When needed, the user can call
    the data-logging function `logData()` ❻. This function reads the value of PORTB0
    and writes a 1 for high or 0 for low to the EEPROM locations from 0 to 1,022 in
    turn. The function skips writing to every second location, as we need two locations
    per byte. If you want to increase the time between logging events, you can adjust
    the speed, as mentioned earlier, by altering the value of `logDelay` ❶.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们声明初始化 USART ❷、从 USART 向计算机发送字节 ❸、接收来自另一方向的字节 ❹ 以及向终端仿真器发送字符串 ❺ 所需的函数。当需要时，用户可以调用数据记录函数
    `logData()` ❻。该函数读取 PORTB0 的值，并按顺序将 1（高电平）或 0（低电平）写入从 0 到 1,022 的 EEPROM 位置。由于每个字节需要两个位置，函数会跳过每个第二个位置。如果你想增加日志事件之间的时间，你可以通过调整
    `logDelay` ❶ 的值来改变速度。
- en: The function `dumpData()` ❼ sends the value of each EEPROM location to the USART
    and thus the PC for viewing. As with the `logData()` function, it skips every
    second location, since we use two locations per word. Before running this function,
    you can set the terminal software to capture output for further analysis with
    a spreadsheet, as demonstrated in [Project 19](nsp-boxall502581-0014.xhtml#pro19)
    in [Chapter 4](nsp-boxall502581-0014.xhtml#ch04) .
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`dumpData()` 函数 ❼ 将每个 EEPROM 位置的值发送到 USART，从而发送到 PC 进行查看。与 `logData()` 函数一样，它跳过每个第二个位置，因为我们每个字需要两个位置。在运行此函数之前，你可以设置终端软件以捕获输出，便于使用电子表格进行进一步分析，正如在
    [第 4 章](nsp-boxall502581-0014.xhtml#ch04) 的 [项目 19](nsp-boxall502581-0014.xhtml#pro19)
    中所演示的那样。'
- en: The `eraseData()` function ❽ writes a 0 in every EEPROM location, thus writing
    over any previously stored data. While not really necessary here, this function
    might be useful in your own future projects that require erasing data in the EEPROM.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`eraseData()` 函数 ❽ 在每个 EEPROM 位置写入 0，从而覆盖任何先前存储的数据。虽然在这里并非必需，但这个函数在你将来需要擦除
    EEPROM 数据的项目中可能会很有用。'
- en: The main code loop provides a user interface of sorts, by prompting the user
    for their selection ❾ and then calling the required function using the `switch...case`
    statement, following the displayed menu options.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 主代码循环提供了一种类似用户界面的方式，通过提示用户选择 ❾，然后使用 `switch...case` 语句根据显示的菜单选项调用所需的函数。
- en: 'Now that you can store and retrieve bytes and words of data in the EEPROM,
    we’ll move on to our final type of data: floating-point variables.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以在 EEPROM 中存储和检索字节和单词数据，我们将继续讨论最后一种数据类型：浮动点变量。
- en: '[Storing Floating-Point Variables](nsp-boxall502581-0008.xhtml#rah1103)'
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[存储浮动点变量](nsp-boxall502581-0008.xhtml#rah1103)'
- en: 'A *floating-point variable* represents a floating-point number (as described
    in [Chapter 3](nsp-boxall502581-0013.xhtml#ch03) ) that falls in the range of
    −3.39 × 10 ^(38) to 3.39 × 10 ^(38) . These variables require 32 bits of storage,
    or 4 bytes. To write a floating-point (float) variable, we again need to include
    the EEPROM library:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 *浮动点变量* 表示一个浮动点数字（如 [第 3 章](nsp-boxall502581-0013.xhtml#ch03) 中所述），它的值范围从
    −3.39 × 10 ^(38) 到 3.39 × 10 ^(38)。这些变量需要 32 位存储，或 4 字节。要写入浮动点（float）变量，我们再次需要包含
    EEPROM 库：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We then use the following function to write a word of data (for example, a
    number between 0 and 65,535):'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用以下函数写入一个数据字（例如，0 到 65,535 之间的数字）：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: where `a` is the location inside the EEPROM and `b` is the float of data to
    store.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，`a`是EEPROM内部位置，`b`是要存储的浮动数据。
- en: 'To update a float stored in the EEPROM, we use this function:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新存储在EEPROM中的浮动数据，我们使用这个函数：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As a float takes up 4 bytes and an EEPROM location can contain only 1 byte,
    you’ll need to allocate four EEPROM locations when storing a float. For example,
    if you were writing two floats of data at the start of the EEPROM, you’d write
    the first one to location 0 and the second to location 4.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 由于浮动数据占用4个字节，而EEPROM位置只能容纳1个字节，因此存储浮动数据时你需要分配四个EEPROM位置。例如，如果你在EEPROM的开始部分写入两个浮动数据，你会将第一个写入位置0，第二个写入位置4。
- en: 'To retrieve a float stored in a given location, use the following function:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索存储在给定位置的浮动数据，使用以下函数：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This allocates the value stored in EEPROM location `a` to the variable `i` .
    Remember that you always need to use the first location when using words. In the
    [next project](nsp-boxall502581-0019.xhtml#pro40) , you’ll put the ability to
    store floats in EEPROM to use.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将EEPROM位置`a`中存储的值分配给变量`i`。请记住，在使用字时，始终需要使用第一个位置。在[下一个项目](nsp-boxall502581-0019.xhtml#pro40)中，你将使用EEPROM存储浮动数据的能力。
- en: '[Project 40: Temperature Logger with EEPROM](nsp-boxall502581-0008.xhtml#rpro40)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目40：带EEPROM的温度记录仪](nsp-boxall502581-0008.xhtml#rpro40)'
- en: This project combines your knowledge of capturing data with a TMP36 temperature
    sensor (introduced in [Chapter 3](nsp-boxall502581-0013.xhtml#ch03) ) and writing
    floating-point variable data to and reading it from the EEPROM, again using the
    USART and custom functions. The project code samples and stores the temperature
    in the EEPROM 256 times, so you can retrieve and view the readings with your terminal
    software or capture the data for spreadsheet analysis.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目结合了你在[第3章](nsp-boxall502581-0013.xhtml#ch03)中学到的使用TMP36温度传感器捕获数据的知识，并通过USART和自定义函数将浮动变量数据写入EEPROM并读取。项目代码会将温度数据存储到EEPROM
    256次，因此你可以使用终端软件检索并查看读取的温度，或者将数据捕获下来进行电子表格分析。
- en: '[The Hardware](nsp-boxall502581-0008.xhtml#rbh1103)'
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[硬件](nsp-boxall502581-0008.xhtml#rbh1103)'
- en: 'You will need the following hardware:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下硬件：
- en: • USBasp programmer
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • USBasp 编程器
- en: • Solderless breadboard
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 无焊面包板
- en: • 5 V breadboard power supply
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 5V面包板电源
- en: • ATmega328P-PU microcontroller
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • ATmega328P-PU 微控制器
- en: • One TMP36 temperature sensor
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 一个TMP36温度传感器
- en: • 0.1 μF ceramic capacitor
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 0.1 μF 陶瓷电容
- en: • Jumper wires
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 跳线
- en: • USB-to-serial converter
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • USB到串行转换器
- en: Assemble your circuit as shown in [Figure 9-4](nsp-boxall502581-0019.xhtml#f09004)
    , using the external power supply and wiring up the USB-to-serial converter.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图9-4](nsp-boxall502581-0019.xhtml#f09004)所示组装电路，使用外部电源并连接USB到串行转换器。
- en: '![Schematic diagram for Project 40](images/nsp-boxall502581-f09004.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![项目40的原理图](images/nsp-boxall502581-f09004.jpg)'
- en: 'Figure 9-4: Schematic for [Project 40](nsp-boxall502581-0019.xhtml#pro40)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-4：[项目40](nsp-boxall502581-0019.xhtml#pro40)的原理图
- en: Open a terminal window, navigate to the *Project 40* subfolder of this book’s
    *Chapter 9* folder, and enter the command `make flash` . Next, open the terminal
    application, just as you did for the [previous project](nsp-boxall502581-0019.xhtml#pro39)
    . After a moment you should be presented with the option to enter 1 to start,
    2 to dump, or 3 to erase. Pressing 1 on your computer’s keyboard should run the
    temperature data logging function; pressing 2 tells the microcontroller to read
    the EEPROM and send the temperature data back to the terminal software for display,
    and pressing 3 should erase the data by writing all the EEPROM locations back
    to 0.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个终端窗口，导航到本书[第9章](nsp-boxall502581-0013.xhtml#ch03)子文件夹中的*项目40*文件夹，并输入命令`make
    flash`。接下来，像上一个[项目](nsp-boxall502581-0019.xhtml#pro39)一样打开终端应用程序。片刻后，你应该会看到提示输入1开始、2转储或3擦除。按下计算机键盘上的1将启动温度数据记录功能；按下2将告诉微控制器读取EEPROM并将温度数据发送回终端软件进行显示，按下3将擦除数据，将所有EEPROM位置恢复为0。
- en: '[Figure 9-5](nsp-boxall502581-0019.xhtml#f09005) shows an example of this sequence.
    (Again, to save space, I’ve altered the code to use only the first six EEPROM
    locations.)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[图9-5](nsp-boxall502581-0019.xhtml#f09005)显示了这个过程的一个示例。（为了节省空间，我已将代码更改为仅使用前六个EEPROM位置。）'
- en: '![A screenshot of the terminal software showing Project 40 in operation (capture
    and playback of logged temperatures)](images/nsp-boxall502581-f09005.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![终端软件的截图，显示项目40正在运行（捕获并播放记录的温度数据）](images/nsp-boxall502581-f09005.jpg)'
- en: 'Figure 9-5: Example output for [Project 40](nsp-boxall502581-0019.xhtml#pro40)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-5：[项目40](nsp-boxall502581-0019.xhtml#pro40)的示例输出
- en: 'Let’s look at the code to see how this works:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下代码，了解它是如何工作的：
- en: '[PRE14]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This project again pulls together knowledge from previous chapters to bring
    a new idea to life. First we import all the required libraries and set the data
    speed for the USART, as usual. I’ve again set the delay in milliseconds between
    each logging event to 1,000, but you can adjust the speed by altering the `logDelay`
    value ❶. Next, we provide the functions required to initialize and operate the
    ADC ❷ and the USART ❸, as in the [previous project](nsp-boxall502581-0019.xhtml#pro39)
    .
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目再次整合了之前章节中的知识，将一个新思路付诸实践。首先，我们像往常一样导入所有必需的库，并设置 USART 的数据传输速率。我再次将每个日志记录事件之间的延迟设置为
    1,000 毫秒，但你可以通过调整 `logDelay` 值 ❶ 来改变速度。接下来，我们提供初始化和操作 ADC ❷ 和 USART ❸ 所需的函数，和[前一个项目](nsp-boxall502581-0019.xhtml#pro39)一样。
- en: The `readTemperature()` function ❹ takes the temperature readings from the TMP36;
    we’ll call this from the `logData()` function ❺, which stores these readings in
    the EEPROM locations from 0 to 1020 in turn, skipping three each time as we need
    four locations per float variable.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`readTemperature()` 函数 ❹ 从 TMP36 读取温度数据；我们将从 `logData()` 函数 ❺ 调用它，后者将这些读数依次存储到
    EEPROM 从 0 到 1020 的位置，每次跳过三个位置，因为我们需要为每个浮动变量保留四个位置。'
- en: The `dumpData()` function ❻ sends the value of each EEPROM location to the USART
    and thus to the PC for viewing. Like `logData()` , this function skips to every
    fourth EEPROM location so that we have space to store our float variables. Before
    running this function, you can set the terminal software to capture the output
    in a text file, which you can open in a spreadsheet; see [Project 19](nsp-boxall502581-0014.xhtml#pro19)
    in [Chapter 4](nsp-boxall502581-0014.xhtml#ch04) if you need a refresher on this.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`dumpData()` 函数 ❻ 将每个 EEPROM 位置的值发送到 USART，然后传输到 PC 供查看。与 `logData()` 类似，该函数会跳过每个第四个
    EEPROM 位置，以便我们有空间存储浮动变量。在运行此函数之前，你可以设置终端软件将输出捕捉到一个文本文件中，然后在电子表格中打开；如果你需要回顾，请参见[项目
    19](nsp-boxall502581-0014.xhtml#pro19)中的[第 4 章](nsp-boxall502581-0014.xhtml#ch04)。'
- en: The `eraseData()` function ❼ writes a 0 in every EEPROM location, thus erasing
    any previously stored data. As mentioned in [Project 39](nsp-boxall502581-0019.xhtml#pro39)
    , you may find it useful in your own projects.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`eraseData()` 函数 ❼ 在每个 EEPROM 位置写入 0，从而擦除之前存储的数据。如[项目 39](nsp-boxall502581-0019.xhtml#pro39)所述，你可能会在自己的项目中用到这个功能。'
- en: The main code loop provides a user interface of sorts, prompting the user to
    choose whether to log, dump, or erase the data ❽ and then calling the required
    function using the `switch...case` statement, following the displayed menu options.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的代码循环提供了一种用户界面，提示用户选择是记录、转储还是擦除数据 ❽，然后使用 `switch...case` 语句调用所需的函数，按照显示的菜单选项进行操作。
- en: Along with learning these EEPROM functions, in this chapter you’ve taken one
    step further toward developing complex projects that could inspire your own projects
    later in your microcontroller journey. In the [next chapter](nsp-boxall502581-0020.xhtml#ch10)
    , you’ll learn how to make your own libraries to save time and write more useful
    code.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 随着学习这些 EEPROM 功能，在本章中你已经迈出了进一步的步伐，向着开发复杂项目的目标靠近，这些项目可能会在你后续的单片机旅程中激发你自己的项目灵感。在[下一章](nsp-boxall502581-0020.xhtml#ch10)，你将学习如何创建自己的库，以节省时间并编写更有用的代码。
