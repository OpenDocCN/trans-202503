- en: '7'
  prefs: []
  type: TYPE_NORMAL
- en: AUTOMATING OPENVAS
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this chapter, I introduce you to OpenVAS and the OpenVAS Management Protocol
    (OMP), a free and open source vulnerability management system forked from the
    last open source release of Nessus. In [Chapters 5](index_split_010.html#filepos420379)
    and [6](index_split_011.html#filepos455112), we covered automating the proprietary
    vulnerability scanners Nessus and Nexpose, respectively. While OpenVAS has similar
    functionality, it’s another great tool to have in your arsenal.
  prefs: []
  type: TYPE_NORMAL
- en: I show you how to drive OpenVAS to scan for and report on vulnerabilities for
    hosts on your network using the core C# libraries and some custom classes. By
    the time you’ve finished reading this chapter, you should be able to assess any
    network-connected hosts for vulnerabilities with OpenVAS and C#.
  prefs: []
  type: TYPE_NORMAL
- en: Installing OpenVAS
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to install OpenVAS is to download the prebuilt OpenVAS Demo
    Virtual Appliance from [http://www.openvas.org/](http://www.openvas.org/). The
    file you’ll download is an .ova file (open virtualization archive) that should
    run in a virtualization tool like VirtualBox or VMware. Install VirtualBox or
    VMware on your system and then open the downloaded .ova file to run it in your
    virtualization tool of choice. (Give the OVA appliance at least 4GB of RAM to
    improve its performance.) The root password for the virtual appliance should be
    root. You should use the root user when updating the appliance with the latest
    vulnerability data.
  prefs: []
  type: TYPE_NORMAL
- en: Once you are logged in, update OpenVAS with the latest vulnerability information
    by entering the commands shown in [Listing 7-1](#filepos511613).
  prefs: []
  type: TYPE_NORMAL
- en: openvas-nvt-sync
  prefs:
  - PREF_BQ
  - PREF_H1
  type: TYPE_NORMAL
- en: openvas-scapdata-sync
  prefs:
  - PREF_BQ
  - PREF_H1
  type: TYPE_NORMAL
- en: openvas-certdata-sync
  prefs:
  - PREF_BQ
  - PREF_H1
  type: TYPE_NORMAL
- en: 'openvasmd --update  Listing 7-1: Commands used to update OpenVAS'
  prefs:
  - PREF_BQ
  - PREF_H1
  type: TYPE_NORMAL
- en: Depending on your internet connection, the updates may take a good while to
    complete. Once they are finished, try to connect to the openvasmd process on port
    9390 and then run a test command as shown in [Listing 7-2](#filepos512426).
  prefs: []
  type: TYPE_NORMAL
- en: $ openssl s_client <ip address>:9390
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[...SSL NEGOTIATION...]'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <get_version />
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '<get_version_response status="200" status_text="OK"><version>6.0</version></get_version_response>
    Listing 7-2: Connecting to  openvasmd'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If everything is working, you should see OK in the status message at the end
    of the output.
  prefs: []
  type: TYPE_NORMAL
- en: Building the Classes
  prefs: []
  type: TYPE_NORMAL
- en: Like the Nexpose API, OpenVAS transfers data to the server in XML. To automate
    OpenVAS scans, we’ll use a combination of the Session and Manager classes discussed
    in earlier chapters. The OpenVASSession class will take care of how we communicate
    with OpenVAS, as well as authentication. The OpenVASManager class will wrap common
    functionality in the API to make using the API easy for a programmer.
  prefs: []
  type: TYPE_NORMAL
- en: The OpenVASSession Class
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use the OpenVASSession class to communicate with OpenVAS. [Listing 7-3](#filepos515080)
    shows the constructor and properties that begin the OpenVASSession class.
  prefs: []
  type: TYPE_NORMAL
- en: 'public class OpenVASSession : IDisposable'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: private SslStream _stream = null;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public OpenVASSession(string user, string pass, string host, int port = ➊9390)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: this.ServerIPAddress = ➋IPAddress.Parse(host);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: this.ServerPort = port;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: this.Authenticate(username, password);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public string Username { get; set; }
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public string Password { get; set; }
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public IPAddress ServerIPAddress { get; set; }
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public int ServerPort { get; set; }
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public SslStream Stream
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ➌get
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: if (_stream == null)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: GetStream();
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return _stream;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ➍set { _stream = value; }
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Listing 7-3: The constructor and properties for the  OpenVASSession  class'
  prefs: []
  type: TYPE_NORMAL
- en: 'The OpenVASSession constructor takes up to four arguments: a username and password
    to authenticate with OpenVAS (which is admin:admin by default in the virtual appliance);
    the host to connect to; and optionally the port to connect to on the host, with
    a default of 9390 ➊.'
  prefs: []
  type: TYPE_NORMAL
- en: We pass the host argument to IPAddress.Parse() ➋ and assign the result to the
    ServerIPAddress property. Next, we assign the value of the port variable to the
    ServerPort property and pass the username and password to the Authenticate() method
    if authentication succeeds (as discussed in the next section). The ServerIPAddress
    and ServerPort properties are assigned in the constructor and are used throughout
    the class.
  prefs: []
  type: TYPE_NORMAL
- en: The Stream property uses get ➌ to see whether the private _stream member variable
    is null. If so, it calls GetStream(), which sets ➍ _stream with a connection to
    the OpenVAS server and then returns the _stream variable.
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating with the OpenVAS Server
  prefs: []
  type: TYPE_NORMAL
- en: To attempt to authenticate with the OpenVAS server, we send an XML document
    with the username and password to OpenVAS and then read the response, as shown
    in [Listing 7-4](#filepos518272). If authentication succeeds, we should be able
    to call higher-privilege commands to designate a target to scan, retrieve a report,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: public XDocument ➊Authenticate(string username, string password)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: XDocument authXML = new XDocument(
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: new XElement("authenticate",
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: new XElement("credentials",
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: new XElement("username", ➋username),
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: new XElement("password", ➌password))));
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: XDocument response = this.➍ExecuteCommand(authXML);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: if (response.Root.Attribute(➎"status").Value != "200")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: throw new Exception("Authentication failed");
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: this.Username = username;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: this.Password = password;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return response;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Listing 7-4: The  OpenVASSession  constructor’s  Authenticate()  method'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Authenticate() method ➊ starts by accepting two arguments: the username
    and the password to authenticate with OpenVAS. We create a new authenticate XML
    command and use the username ➋ and password ➌ supplied for the credentials; then
    we send the authentication request with ExecuteCommand() ➍ and store the response
    so we can ensure authentication was successful and retrieve the authentication
    token.'
  prefs: []
  type: TYPE_NORMAL
- en: If the status attribute ➎ of the root XML element returned by the server is
    200, authentication was successful. We assign the Username properties, Password
    properties, and any arguments to the method, and then return the authentication
    response.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Method to Execute OpenVAS Commands
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 7-5](#filepos520384) shows the ExecuteCommand() method, which takes
    an arbitrary OpenVAS command, sends it to OpenVAS, and then returns the result.'
  prefs: []
  type: TYPE_NORMAL
- en: public XDocument ExecuteCommand(XDocument doc)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ASCIIEncoding enc = new ASCIIEncoding();
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: string xml = doc.ToString();
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: this.Stream.➊Write(enc.GetBytes(xml), 0, xml.Length);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return ReadMessage(this.Stream);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Listing 7-5: The  ExecuteCommand()  method for OpenVAS'
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute commands with the OpenVAS Management Protocol, we use a TCP socket
    to send XML to the server and receive XML in response. The ExecuteCommand() method
    takes only one argument: the XML document to send. We call ToString() on the XML
    document, save the result, and then use the Stream property’s Write() method ➊
    to write the XML to the stream.'
  prefs: []
  type: TYPE_NORMAL
- en: Reading the Server Message
  prefs: []
  type: TYPE_NORMAL
- en: We use the ReadMessage() method shown in [Listing 7-6](#filepos522759) to read
    the message returned by the server.
  prefs: []
  type: TYPE_NORMAL
- en: private XDocument ReadMessage(SslStream ➊sslStream)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: using (var stream = new ➋MemoryStream())
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: int bytesRead = 0;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ➌do
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: byte[] buffer = new byte[2048];
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: bytesRead = sslStream.➍Read(buffer, 0, buffer.Length);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: stream.Write(buffer, 0, bytesRead);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: if (bytesRead < buffer.Length)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ➎try
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: string xml = System.Text.Encoding.ASCII.GetString(stream.ToArray());
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return XDocument.Parse(xml);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: catch
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ➏continue;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: while (bytesRead > 0);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return null;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Listing 7-6: The  ReadMessage()  method for OpenVAS'
  prefs: []
  type: TYPE_NORMAL
- en: This method reads an XML document from the TCP stream in chunks and returns
    the document (or null) to the caller. After passing an sslStream ➊ to the method,
    we declare a MemoryStream ➋, which allows us to dynamically store the data we
    receive from the server. We then declare an integer to store the number of bytes
    read and use a do/while loop ➌ to create a 2048-byte buffer to read the data into.
    Next, we call Read() ➍ on the SslStream to fill the buffer with the number of
    bytes read from the stream, and then we copy the data coming from OpenVAS to the
    MemoryStream using Write() so we can parse the data into XML later.
  prefs: []
  type: TYPE_NORMAL
- en: If the server returns less data than the buffer can contain, we need to check
    whether we have read a valid XML document from the server. To do so, we use GetString()
    within a try/catch block ➎ to convert the bytes stored in the MemoryStream into
    a parseable string and attempt to parse the XML, since parsing will throw an exception
    if the XML isn’t valid. If no exception is thrown, we return the XML document.
    If an exception is thrown, we know that we haven’t finished reading the stream,
    so we call continue ➏ to read more data. If we finish reading bytes from the stream
    and have yet to return a valid XML document, we return null. This is a bit of
    defense, in case communication with OpenVAS is lost in the middle and we aren’t
    able to read the entire API response. Returning null allows us to check whether
    the response from OpenVAS is valid later since null will only be returned if we
    couldn’t read the full XML response.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up the TCP Stream to Send and Receive Commands
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 7-7](#filepos526238) shows the GetStream() method that first appears
    in [Listing 7-3](#filepos515080). It makes the actual TCP connection to the OpenVAS
    server that we’ll use to send and receive commands.'
  prefs: []
  type: TYPE_NORMAL
- en: private void GetStream()
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: if (_stream == null || !_stream.CanRead)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: TcpClient client = new ➊TcpClient(this.ServerIPAddress.ToString(), this.ServerPort);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: _stream = new ➋SslStream(client.GetStream(), false,
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: new RemoteCertificateValidationCallback (ValidateServerCertificate),
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (sender, targetHost, localCertificates, remoteCertificate, acceptableIssuers)
    => null);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: _stream.➌AuthenticateAsClient("OpenVAS", null, SslProtocols.Tls, false);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Listing 7-7: The  OpenVASSession  constructor’s  GetStream()  method'
  prefs: []
  type: TYPE_NORMAL
- en: The GetStream() sets up the TCP stream for use in the rest of the class when
    communicating with OpenVAS. To do this, we instantiate a new TcpClient ➊ with
    the server by passing the ServerIPAddress and ServerPort properties to TcpClient
    if the stream is invalid. We wrap the stream in an SslStream ➋ that will not verify
    SSL certificates since the SSL certificates are self-signed and will throw an
    error; then we perform the SSL handshake by calling AuthenticateAsClient() ➌.
    The TCP stream to the OpenVAS server can now be used by the rest of the methods
    when we begin sending commands and receiving responses.
  prefs: []
  type: TYPE_NORMAL
- en: Certificate Validation and Garbage Collection
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 7-8](#filepos528378) shows the methods used to validate SSL certificates
    (since the SSL certificates OpenVAS uses by default are self-signed) and clean
    up our session once we’ve finished with it.'
  prefs: []
  type: TYPE_NORMAL
- en: private bool ValidateServerCertificate(object sender, X509Certificate certificate,
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: X509Chain chain, SslPolicyErrors sslPolicyErrors)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return ➊true;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public void Dispose()
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: if (_stream != null)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ➋_stream.Dispose();
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Listing 7-8: The  ValidateServerCertificate()  and  Dispose()  methods'
  prefs: []
  type: TYPE_NORMAL
- en: Returning true ➊ is generally poor practice, but since in our case OpenVAS is
    using a self-signed SSL certificate that would not otherwise validate, we must
    allow all certs. As with earlier examples, we create the Dispose() method so we
    can clean up after dealing with network or file streams. If the stream in the
    OpenVASSession class isn’t null, we dispose of the internal stream ➋ used to communicate
    with OpenVAS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the OpenVAS Version
  prefs: []
  type: TYPE_NORMAL
- en: We can now drive OpenVAS to send commands and retrieve responses, as shown in
    [Listing 7-9](#filepos530481). For instance, we can run commands such as the get_version
    command, which returns version information for the OpenVAS instance. We’ll wrap
    similar functionality later in the OpenVASManager class.
  prefs: []
  type: TYPE_NORMAL
- en: class MainClass
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public static void Main(string[] args)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: using (OpenVASSession session = new ➊OpenVASSession("admin", "admin", "192.168.1.19"))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: XDocument doc = session.➋ExecuteCommand(
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: XDocument.Parse("<get_version />"));
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Console.WriteLine(doc.ToString());
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Listing 7-9: The  Main()  method driving OpenVAS to retrieve the current version'
  prefs: []
  type: TYPE_NORMAL
- en: We create a new OpenVASSession ➊ by passing in a username, password, and host.
    Next, we pass ExecuteCommand() ➋ an XDocument requesting the OpenVAS version,
    store the result in a new XDocument, and then write it to the screen. The output
    from [Listing 7-9](#filepos530481) should look like [Listing 7-10](#filepos531469).
  prefs: []
  type: TYPE_NORMAL
- en: <get_version_response status="200" status_text="OK">
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <version>6.0</version>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '</get_version_response> Listing 7-10: The OpenVAS response to  <get_version
    />'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The OpenVASManager Class
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use the OpenVASManager class (shown in [Listing 7-11](#filepos533004))
    to wrap the API calls to start a scan, monitor the scan, and get the scan results.
  prefs: []
  type: TYPE_NORMAL
- en: 'public class OpenVASManager : IDisposable'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: private OpenVASSession _session;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public OpenVASManager(OpenVASSession ➊session)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: if (session != null)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: _session = session;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: else
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: throw new ArgumentNullException("session");
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public XDocument ➋GetVersion()
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return _session.ExecuteCommand(XDocument.Parse("<get_version />"));
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: private void Dispose()
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: _session.Dispose();
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Listing 7-11: The  OpenVASManager  constructor and  GetVersion()  method'
  prefs: []
  type: TYPE_NORMAL
- en: The OpenVASManager class constructor takes one argument, an OpenVASSession ➊.
    If the session passed as the argument is null, we throw an exception because we
    can’t communicate with OpenVAS without a valid session. Otherwise, we assign the
    session to a local class variable that we can use from the methods in the class,
    such as GetVersion(). We then implement GetVersion() ➋ to get the version of OpenVAS
    (as in [Listing 7-9](#filepos530481)) and the Dispose() method.
  prefs: []
  type: TYPE_NORMAL
- en: We can now replace the code calling ExecuteCommand() in our Main() method with
    the OpenVASManager to retrieve the OpenVAS version, as shown in [Listing 7-12](#filepos534946).
  prefs: []
  type: TYPE_NORMAL
- en: public static void Main(string[] args)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: using (OpenVASSession session = new OpenVASSession("admin", "admin", "192.168.1.19"))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: using (OpenVASManager manager = new OpenVASManager(session))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: XDocument version = manager.GetVersion();
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Console.WriteLine(version);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Listing 7-12: The  Main()  method retrieving the OpenVAS version with the  OpenVASManager  class'
  prefs: []
  type: TYPE_NORMAL
- en: The programmer no longer needs to remember the XML required to get the version
    information because it is abstracted away behind a convenient method call. We
    can follow this same pattern for the rest of the API commands we will be calling
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Scan Configurations and Creating Targets
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 7-13](#filepos536788) shows how we’ll add the commands to run in OpenVASManager
    to create a new target and retrieve scan configurations.'
  prefs: []
  type: TYPE_NORMAL
- en: public XDocument GetScanConfigurations()
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return _session.ExecuteCommand(XDocument.Parse(➊"<get_configs />"));
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public XDocument CreateSimpleTarget(string cidrRange, string targetName)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: XDocument createTargetXML = new XDocument(
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: new XElement(➋"create_target",
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: new XElement("name", targetName),
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: new XElement("hosts", cidrRange)));
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return _session.ExecuteCommand(createTargetXML);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Listing 7-13: The OpenVAS  GetScanConfigurations()  and  CreateSimpleTarget()  methods'
  prefs: []
  type: TYPE_NORMAL
- en: The GetScanConfigurations() method passes the <get_configs /> command ➊ to OpenVAS
    and returns the response. The CreateSimpleTarget() method accepts arguments for
    the IP address or CIDR range (192.168.1.0/24, for instance) and a target name,
    which we use to build an XML document using XDocument and XElement. The first
    XElement creates a root XML node of create_target ➋. The remaining two contain
    the name of the target and its hosts. [Listing 7-14](#filepos538158) shows the
    resulting XML document.
  prefs: []
  type: TYPE_NORMAL
- en: <create_target>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <name>Home Network</name>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <hosts>192.168.1.0/24</hosts>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '</create_target> Listing 7-14: The OpenVAS  create_target  command XML'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Listing 7-15](#filepos539584) shows how we create the target and scan it for
    the Discovery scan configuration, which performs a basic port scan and other basic
    network tests.'
  prefs: []
  type: TYPE_NORMAL
- en: XDocument target = manager.➊CreateSimpleTarget("192.168.1.31", Guid.NewGuid().ToString());
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: string targetID = target.Root.Attribute("id").➋Value;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: XDocument configs = manager.GetScanConfigurations();
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: string discoveryConfigID = string.Empty;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: foreach (XElement node in configs.Descendants("name"))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: if (node.Value == ➌"Discovery")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: discoveryConfigID = node.Parent.Attribute ("id").Value;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: break;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Console.➍WriteLine("Creating scan of target " + targetID + " with scan config
    " +
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'discoveryConfigID); Listing 7-15: Creating an OpenVAS target and retrieving
    the scan config ID'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: First, we create the target to scan with CreateSimpleTarget() ➊ by passing in
    an IP address to scan and a new Guid as the name of the target. For purposes of
    automation, we don’t need a human-readable name for the target, so we just generate
    a Guid for the name.
  prefs: []
  type: TYPE_NORMAL
- en: NOTE
  prefs: []
  type: TYPE_NORMAL
- en: In the future, you might want to name a target Databases or Workstations to
    separate specific machines on your network for scanning. You could specify readable
    names like these instead, but names must be unique for each target.)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here’s what a response to successful target creation should look like: <create_target_response
    status="201" status_text="OK, resource created"'
  prefs: []
  type: TYPE_NORMAL
- en: id="254cd3ef-bbe1-4d58-859d-21b8d0c046c6"/> After creating the target, we grab
    the value of the id attribute ➋ from the XML response and store it for later use
    when we need to get the scan status. We then call GetScanConfigurations() to retrieve
    all available scan configurations, store them, and loop through them to find the
    one with the name of Discovery ➌. Finally, we print a message to the screen with
    WriteLine() ➍, telling the user which target and scan configuration ID will be
    used for the scan.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and Starting Tasks
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 7-16](#filepos542916) shows how we create and start a scan with the
    OpenVASManager class.'
  prefs: []
  type: TYPE_NORMAL
- en: public XDocument ➊CreateSimpleTask(string name, string comment, Guid configID,
    Guid targetID)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: XDocument createTaskXML = new XDocument(
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: new XElement(➋"create_task",
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: new XElement("name", name),
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: new XElement("comment", comment),
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: new XElement("config",
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: new XAttribute(➌"id", configID.ToString())),
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: new XElement("target",
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: new XAttribute("id", targetID.ToString()))));
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return _session.ExecuteCommand(createTaskXML);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public XDocument ➍StartTask(Guid taskID)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: XDocument startTaskXML = new XDocument(
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: new XElement(➎"start_task",
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: new XAttribute("task_id", taskID.ToString())));
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return _session.ExecuteCommand(startTaskXML);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Listing 7-16: The OpenVAS methods to create and start a task'
  prefs: []
  type: TYPE_NORMAL
- en: The CreateSimpleTask() method ➊ creates a new task with a few basic pieces of
    information. It is possible to create very complex task configurations. For purposes
    of a basic vulnerability scan, we build a simple XML document with a root create_task
    element ➋ and some child elements to store configuration information. The first
    two child elements are the name and comment (or description) of the task. Next
    are the scan config and target elements, with values stored as id attributes ➌.
    After setting up our XML, we send the create_task command to OpenVAS and return
    the response.
  prefs: []
  type: TYPE_NORMAL
- en: 'The StartTask() method ➍ accepts a single argument: the task ID to be started.
    We first create an XML element called start_task ➎ with the attribute task_id.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 7-17](#filepos544694) shows how we add these two methods to Main().'
  prefs: []
  type: TYPE_NORMAL
- en: XDocument task = manager.CreateSimpleTask(Guid.NewGuid().ToString(),
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: string.Empty, new Guid(discoveryConfigID), new Guid(targetID));
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Guid taskID = new Guid(task.Root.➊Attribute("id").Value);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'manager.➋StartTask(taskID); Listing 7-17: Creating and starting an OpenVAS
    task'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To call CreateSimpleTask(), we pass a new Guid as the name of the task, an empty
    string for the comment, and the scan config ID and the target ID as the argument.
    We pull the id attribute ➊ from the root node of the XML document returned, which
    is the task ID; then we pass it to StartTask() ➋ to start the OpenVAS scan.
  prefs: []
  type: TYPE_NORMAL
- en: Watching a Scan and Getting Scan Results
  prefs: []
  type: TYPE_NORMAL
- en: In order to watch the scan, we implement GetTasks() and GetTaskResults(), as
    shown in [Listing 7-18](#filepos546926). The GetTasks() method (which is implemented
    first) returns a list of tasks and their status so we can monitor our scan until
    completion. The GetTaskResults() method returns the scan results of a given task
    so that we can see any vulnerabilities OpenVAS finds.
  prefs: []
  type: TYPE_NORMAL
- en: public XDocument GetTasks(Guid? taskID = ➊null)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: if (taskID != null)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return _session.ExecuteCommand(new XDocument(
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: new XElement("get_tasks",
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: new ➋XAttribute("task_id", taskID.ToString()))));
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return _session.ExecuteCommand(➌XDocument.Parse("<get_tasks />"));
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public XDocument GetTaskResults(Guid taskID)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: XDocument getTaskResultsXML = new XDocument(
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: new ➍XElement("get_results",
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: new XAttribute("task_id", taskID.ToString())));
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return _session.ExecuteCommand(getTaskResultsXML);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Listing 7-18: The  OpenVASManager  methods to get a list of current tasks and
    retrieve the results of a given task'
  prefs: []
  type: TYPE_NORMAL
- en: The GetTasks() method has a single, optional argument that is null ➊ by default.
    The GetTasks() method will return either all of the current tasks or just a single
    task, depending on whether the taskID argument passed in is null. If the task
    ID passed in is not null, we create a new XML element called get_tasks with a
    task_id attribute ➋ of the task ID passed in; then we send the get_tasks command
    to OpenVAS and return the response. If the ID is null, we use the XDocument.Parse()
    method ➌ to create a new get_tasks element without a specific ID to get; then
    we execute the command and return the result.
  prefs: []
  type: TYPE_NORMAL
- en: The GetTaskResults() method works like GetTasks() except that its single argument
    is not optional. Using the ID passed in as the argument, we create a get_results
    XML node ➍ with a task_id attribute. After passing this XML node to ExecuteCommand(),
    we return the response.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping Up the Automation
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 7-19](#filepos549838) shows how we can monitor the scan and retrieve
    its results with the methods we just implemented. In our Main() method driving
    the Session/Manager classes, we can add the following code to round out our automation.'
  prefs: []
  type: TYPE_NORMAL
- en: XDocument status = manager.➊GetTasks(taskID);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: while (status.➋Descendants("status").First().Value != "Done")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Thread.Sleep(5000);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Console.Clear();
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: string percentComplete = status.➌Descendants("progress").First().Nodes()
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: .OfType<XText>().First().Value;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Console.WriteLine("The scan is " + percentComplete + "% done.");
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: status = manager.➍GetTasks(taskID);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: XDocument results = manager.➎GetTaskResults(taskID);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Console.WriteLine(results.ToString()); Listing 7-19: Watching an OpenVAS scan
    until finished and then retrieving the scan results and printing them'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We call GetTasks() ➊ by passing in the task ID saved earlier and then save the
    results in the status variable. Then, we use the LINQ to XML method Descendants()
    ➋ to see whether the status node in the XML document is equal to Done, meaning
    the scan is finished. If the scan is not done, we Sleep() for five seconds and
    then clear the console screen. We then get the completion percentage of the scan
    by using Descendants() ➌ to retrieve the progress node, print the percentage,
    ask OpenVAS again for the current status with GetTasks() ➍, and so on until the
    scan reports it is done.
  prefs: []
  type: TYPE_NORMAL
- en: Once the scan finishes, we call GetTaskResults() ➎ by passing in the task ID;
    then we save and print the XML document containing the scan results to the console
    screen. This document includes a range of useful information, including detected
    hosts and open ports, known active services across the scanned hosts, and known
    vulnerabilities such as old versions of software.
  prefs: []
  type: TYPE_NORMAL
- en: Running the Automation
  prefs: []
  type: TYPE_NORMAL
- en: Scans may take a while, depending on the machine running OpenVAS and the speed
    of your network. While running, our automation will display a friendly message
    to let the user know the status of the current scan. Successful output should
    look similar to the heavily trimmed sample report shown in [Listing 7-20](#filepos552801).
  prefs: []
  type: TYPE_NORMAL
- en: The scan is 1% done.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The scan is 8% done.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The scan is 8% done.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The scan is 46% done.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The scan is 50% done.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The scan is 58% done.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The scan is 72% done.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The scan is 84% done.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The scan is 94% done.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The scan is 98% done.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <get_results_response status="200" status_text="OK">
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <result id="57e9d1fa-7ad9-4649-914d-4591321d061a">
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <owner>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <name>admin</name>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: </owner>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: --snip--
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: </result>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '</get_results_response> Listing 7-20: Sample output of the OpenVAS automation'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Conclusion
  prefs: []
  type: TYPE_NORMAL
- en: This chapter has shown you how to use the built-in networking classes in C#
    to automate OpenVAS. You learned how to create an SSL connection with OpenVAS
    and how to communicate using the XML-based OMP. You learned how to create a target
    to scan, retrieve available scan configurations, and start a particular scan on
    a target. You also learned how to monitor the progress of a scan and retrieve
    its results in an XML report.
  prefs: []
  type: TYPE_NORMAL
- en: With these basic blocks, we can begin remediating vulnerabilities on the network
    and then run new scans to ensure the vulnerabilities are no longer reported. The
    OpenVAS scanner is a very powerful tool, and we have only scratched the surface.
    OpenVAS constantly has updated vulnerability feeds and can be used as an effective
    vulnerability management solution.
  prefs: []
  type: TYPE_NORMAL
- en: As a next step, you might want to look into managing credentials for authenticated
    vulnerability scans over SSH or creating custom scan configurations to check for
    specific policy configurations. All of this is possible, and more, through OpenVAS.
  prefs: []
  type: TYPE_NORMAL
