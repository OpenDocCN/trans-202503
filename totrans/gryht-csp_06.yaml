- en: '7'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '7'
- en: AUTOMATING OPENVAS
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化 OpenVAS
- en: '![](images/00010.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00010.jpg)'
- en: In this chapter, I introduce you to OpenVAS and the OpenVAS Management Protocol
    (OMP), a free and open source vulnerability management system forked from the
    last open source release of Nessus. In [Chapters 5](index_split_010.html#filepos420379)
    and [6](index_split_011.html#filepos455112), we covered automating the proprietary
    vulnerability scanners Nessus and Nexpose, respectively. While OpenVAS has similar
    functionality, it’s another great tool to have in your arsenal.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将向你介绍 OpenVAS 和 OpenVAS 管理协议（OMP），这是一种免费的开源漏洞管理系统，源自 Nessus 最后的开源版本。[第
    5 章](index_split_010.html#filepos420379) 和 [第 6 章](index_split_011.html#filepos455112)
    中，我们分别讨论了自动化专有漏洞扫描器 Nessus 和 Nexpose。虽然 OpenVAS 功能类似，但它是你武器库中的另一款强大工具。
- en: I show you how to drive OpenVAS to scan for and report on vulnerabilities for
    hosts on your network using the core C# libraries and some custom classes. By
    the time you’ve finished reading this chapter, you should be able to assess any
    network-connected hosts for vulnerabilities with OpenVAS and C#.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我将向你展示如何通过核心的 C# 库和一些自定义类来驱动 OpenVAS 扫描并报告你网络中主机的漏洞。在你读完本章后，你应该能够使用 OpenVAS
    和 C# 来评估任何网络连接主机的漏洞。
- en: Installing OpenVAS
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 OpenVAS
- en: The easiest way to install OpenVAS is to download the prebuilt OpenVAS Demo
    Virtual Appliance from [http://www.openvas.org/](http://www.openvas.org/). The
    file you’ll download is an .ova file (open virtualization archive) that should
    run in a virtualization tool like VirtualBox or VMware. Install VirtualBox or
    VMware on your system and then open the downloaded .ova file to run it in your
    virtualization tool of choice. (Give the OVA appliance at least 4GB of RAM to
    improve its performance.) The root password for the virtual appliance should be
    root. You should use the root user when updating the appliance with the latest
    vulnerability data.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 OpenVAS 的最简单方法是从 [http://www.openvas.org/](http://www.openvas.org/) 下载预构建的
    OpenVAS 演示虚拟设备。你下载的文件是一个 .ova 文件（开放虚拟化档案），可以在虚拟化工具如 VirtualBox 或 VMware 中运行。先在你的系统上安装
    VirtualBox 或 VMware，然后打开下载的 .ova 文件并在你选择的虚拟化工具中运行它。（为了提升性能，建议给 OVA 设备分配至少 4GB
    的内存。）虚拟设备的 root 密码是 root。你在用最新漏洞数据更新设备时应使用 root 用户。
- en: Once you are logged in, update OpenVAS with the latest vulnerability information
    by entering the commands shown in [Listing 7-1](#filepos511613).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，使用 [示例 7-1](#filepos511613) 中显示的命令更新 OpenVAS，以获取最新的漏洞信息。
- en: openvas-nvt-sync
  id: totrans-8
  prefs:
  - PREF_BQ
  - PREF_H1
  type: TYPE_NORMAL
  zh: openvas-nvt-sync
- en: openvas-scapdata-sync
  id: totrans-9
  prefs:
  - PREF_BQ
  - PREF_H1
  type: TYPE_NORMAL
  zh: openvas-scapdata-sync
- en: openvas-certdata-sync
  id: totrans-10
  prefs:
  - PREF_BQ
  - PREF_H1
  type: TYPE_NORMAL
  zh: openvas-certdata-sync
- en: 'openvasmd --update  Listing 7-1: Commands used to update OpenVAS'
  id: totrans-11
  prefs:
  - PREF_BQ
  - PREF_H1
  type: TYPE_NORMAL
  zh: openvasmd --update  示例 7-1：用于更新 OpenVAS 的命令
- en: Depending on your internet connection, the updates may take a good while to
    complete. Once they are finished, try to connect to the openvasmd process on port
    9390 and then run a test command as shown in [Listing 7-2](#filepos512426).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的网络连接，更新可能需要一段时间才能完成。一旦完成，尝试连接到端口 9390 上的 openvasmd 进程，然后运行如[示例 7-2](#filepos512426)所示的测试命令。
- en: $ openssl s_client <ip address>:9390
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $ openssl s_client <ip 地址>:9390
- en: '[...SSL NEGOTIATION...]'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[...SSL 协商...]'
- en: <get_version />
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <get_version />
- en: '<get_version_response status="200" status_text="OK"><version>6.0</version></get_version_response>
    Listing 7-2: Connecting to  openvasmd'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <get_version_response status="200" status_text="OK"><version>6.0</version></get_version_response>
    示例 7-2：连接到 openvasmd
- en: If everything is working, you should see OK in the status message at the end
    of the output.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，你应该能在输出的末尾看到状态消息中的 OK。
- en: Building the Classes
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 构建类
- en: Like the Nexpose API, OpenVAS transfers data to the server in XML. To automate
    OpenVAS scans, we’ll use a combination of the Session and Manager classes discussed
    in earlier chapters. The OpenVASSession class will take care of how we communicate
    with OpenVAS, as well as authentication. The OpenVASManager class will wrap common
    functionality in the API to make using the API easy for a programmer.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Nexpose API 类似，OpenVAS 通过 XML 格式将数据传输到服务器。为了自动化 OpenVAS 扫描，我们将使用前面章节中讨论的 Session
    类和 Manager 类的组合。OpenVASSession 类将负责我们如何与 OpenVAS 通信，并处理认证问题。OpenVASManager 类将封装
    API 中的常见功能，使得程序员使用该 API 更加简单。
- en: The OpenVASSession Class
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVASSession 类
- en: We’ll use the OpenVASSession class to communicate with OpenVAS. [Listing 7-3](#filepos515080)
    shows the constructor and properties that begin the OpenVASSession class.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 OpenVASSession 类与 OpenVAS 进行通信。[示例 7-3](#filepos515080)展示了构造函数和属性，标志着
    OpenVASSession 类的开始。
- en: 'public class OpenVASSession : IDisposable'
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'public class OpenVASSession : IDisposable'
- en: '{'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: private SslStream _stream = null;
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: private SslStream _stream = null;
- en: ''
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public OpenVASSession(string user, string pass, string host, int port = ➊9390)
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public OpenVASSession(string user, string pass, string host, int port = ➊9390)
- en: '{'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: this.ServerIPAddress = ➋IPAddress.Parse(host);
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: this.ServerIPAddress = ➋IPAddress.Parse(host);
- en: this.ServerPort = port;
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: this.ServerPort = port;
- en: this.Authenticate(username, password);
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: this.Authenticate(username, password);
- en: '}'
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: ''
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public string Username { get; set; }
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public string Username { get; set; }
- en: public string Password { get; set; }
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public string Password { get; set; }
- en: public IPAddress ServerIPAddress { get; set; }
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public IPAddress ServerIPAddress { get; set; }
- en: public int ServerPort { get; set; }
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public int ServerPort { get; set; }
- en: ''
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public SslStream Stream
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public SslStream Stream
- en: '{'
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: ➌get
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ➌get
- en: '{'
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: if (_stream == null)
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 (_stream == null)
- en: GetStream();
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: GetStream();
- en: ''
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return _stream;
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: return _stream;
- en: '}'
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: ''
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ➍set { _stream = value; }
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ➍set { _stream = value; }
- en: '}'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 7-3: The constructor and properties for the  OpenVASSession  class'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 7-3：OpenVASSession 类的构造函数和属性
- en: 'The OpenVASSession constructor takes up to four arguments: a username and password
    to authenticate with OpenVAS (which is admin:admin by default in the virtual appliance);
    the host to connect to; and optionally the port to connect to on the host, with
    a default of 9390 ➊.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVASSession 构造函数最多接受四个参数：用于与 OpenVAS 进行身份验证的用户名和密码（在虚拟设备中默认是 admin:admin）；要连接的主机；以及可选的连接主机时使用的端口，默认值为
    9390 ➊。
- en: We pass the host argument to IPAddress.Parse() ➋ and assign the result to the
    ServerIPAddress property. Next, we assign the value of the port variable to the
    ServerPort property and pass the username and password to the Authenticate() method
    if authentication succeeds (as discussed in the next section). The ServerIPAddress
    and ServerPort properties are assigned in the constructor and are used throughout
    the class.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将主机参数传递给 IPAddress.Parse() ➋，并将结果赋值给 ServerIPAddress 属性。接下来，我们将端口变量的值赋给 ServerPort
    属性，并在身份验证成功时将用户名和密码传递给 Authenticate() 方法（如下一节所讨论）。ServerIPAddress 和 ServerPort
    属性在构造函数中被赋值，并在类中使用。
- en: The Stream property uses get ➌ to see whether the private _stream member variable
    is null. If so, it calls GetStream(), which sets ➍ _stream with a connection to
    the OpenVAS server and then returns the _stream variable.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Stream 属性使用 get ➌ 检查私有的 _stream 成员变量是否为 null。如果是，它调用 GetStream()，该方法将 _stream
    设置为与 OpenVAS 服务器的连接，然后返回 _stream 变量。
- en: Authenticating with the OpenVAS Server
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 与 OpenVAS 服务器进行身份验证
- en: To attempt to authenticate with the OpenVAS server, we send an XML document
    with the username and password to OpenVAS and then read the response, as shown
    in [Listing 7-4](#filepos518272). If authentication succeeds, we should be able
    to call higher-privilege commands to designate a target to scan, retrieve a report,
    and so on.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了尝试与 OpenVAS 服务器进行身份验证，我们发送一个包含用户名和密码的 XML 文档到 OpenVAS，然后读取响应，如 [列表 7-4](#filepos518272)
    所示。如果身份验证成功，我们应该能够调用更高权限的命令来指定扫描目标、获取报告等。
- en: public XDocument ➊Authenticate(string username, string password)
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public XDocument ➊Authenticate(string username, string password)
- en: '{'
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: XDocument authXML = new XDocument(
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument authXML = new XDocument(
- en: new XElement("authenticate",
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement("authenticate",
- en: new XElement("credentials",
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement("credentials",
- en: new XElement("username", ➋username),
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement("username", ➋username),
- en: new XElement("password", ➌password))));
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement("password", ➌password))));
- en: ''
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: XDocument response = this.➍ExecuteCommand(authXML);
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument response = this.➍ExecuteCommand(authXML);
- en: ''
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: if (response.Root.Attribute(➎"status").Value != "200")
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 response.Root.Attribute(➎"status").Value != "200"
- en: throw new Exception("Authentication failed");
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: throw new Exception("身份验证失败");
- en: ''
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: this.Username = username;
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: this.Username = username;
- en: this.Password = password;
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: this.Password = password;
- en: ''
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return response;
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: return response;
- en: '}'
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 7-4: The  OpenVASSession  constructor’s  Authenticate()  method'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 7-4：OpenVASSession 构造函数的 Authenticate() 方法
- en: 'The Authenticate() method ➊ starts by accepting two arguments: the username
    and the password to authenticate with OpenVAS. We create a new authenticate XML
    command and use the username ➋ and password ➌ supplied for the credentials; then
    we send the authentication request with ExecuteCommand() ➍ and store the response
    so we can ensure authentication was successful and retrieve the authentication
    token.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Authenticate() 方法 ➊ 首先接受两个参数：用于与 OpenVAS 进行身份验证的用户名和密码。我们创建一个新的身份验证 XML 命令，使用提供的用户名
    ➋ 和密码 ➌ 作为凭据；然后我们通过 ExecuteCommand() ➍ 发送身份验证请求，并存储响应，以确保身份验证成功并获取身份验证令牌。
- en: If the status attribute ➎ of the root XML element returned by the server is
    200, authentication was successful. We assign the Username properties, Password
    properties, and any arguments to the method, and then return the authentication
    response.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器返回的根 XML 元素的状态属性 ➎ 为 200，则说明身份验证成功。我们将分配用户名属性、密码属性以及方法的任何参数，然后返回身份验证响应。
- en: Creating a Method to Execute OpenVAS Commands
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个执行 OpenVAS 命令的方法
- en: '[Listing 7-5](#filepos520384) shows the ExecuteCommand() method, which takes
    an arbitrary OpenVAS command, sends it to OpenVAS, and then returns the result.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 7-5](#filepos520384) 显示了 ExecuteCommand() 方法，它接受一个任意的 OpenVAS 命令，发送到
    OpenVAS 并返回结果。'
- en: public XDocument ExecuteCommand(XDocument doc)
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public XDocument ExecuteCommand(XDocument doc)
- en: '{'
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: ASCIIEncoding enc = new ASCIIEncoding();
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ASCIIEncoding enc = new ASCIIEncoding();
- en: ''
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: string xml = doc.ToString();
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: string xml = doc.ToString();
- en: this.Stream.➊Write(enc.GetBytes(xml), 0, xml.Length);
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: this.Stream.➊Write(enc.GetBytes(xml), 0, xml.Length);
- en: ''
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return ReadMessage(this.Stream);
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: return ReadMessage(this.Stream);
- en: '}'
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 7-5: The  ExecuteCommand()  method for OpenVAS'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 'Listing 7-5: ExecuteCommand() 方法用于 OpenVAS'
- en: 'To execute commands with the OpenVAS Management Protocol, we use a TCP socket
    to send XML to the server and receive XML in response. The ExecuteCommand() method
    takes only one argument: the XML document to send. We call ToString() on the XML
    document, save the result, and then use the Stream property’s Write() method ➊
    to write the XML to the stream.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 OpenVAS 管理协议执行命令，我们通过 TCP 套接字发送 XML 到服务器并接收 XML 响应。ExecuteCommand() 方法只接受一个参数：要发送的
    XML 文档。我们在 XML 文档上调用 ToString()，保存结果，然后使用 Stream 属性的 Write() 方法 ➊ 将 XML 写入流中。
- en: Reading the Server Message
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 读取服务器消息
- en: We use the ReadMessage() method shown in [Listing 7-6](#filepos522759) to read
    the message returned by the server.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 [Listing 7-6](#filepos522759) 中显示的 ReadMessage() 方法来读取服务器返回的消息。
- en: private XDocument ReadMessage(SslStream ➊sslStream)
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: private XDocument ReadMessage(SslStream ➊sslStream)
- en: '{'
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: using (var stream = new ➋MemoryStream())
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: using (var stream = new ➋MemoryStream())
- en: '{'
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: int bytesRead = 0;
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: int bytesRead = 0;
- en: ➌do
  id: totrans-97
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ➌do
- en: '{'
  id: totrans-98
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: byte[] buffer = new byte[2048];
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: byte[] buffer = new byte[2048];
- en: bytesRead = sslStream.➍Read(buffer, 0, buffer.Length);
  id: totrans-100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: bytesRead = sslStream.➍Read(buffer, 0, buffer.Length);
- en: stream.Write(buffer, 0, bytesRead);
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: stream.Write(buffer, 0, bytesRead);
- en: if (bytesRead < buffer.Length)
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: if (bytesRead < buffer.Length)
- en: '{'
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: ➎try
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ➎try
- en: '{'
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: string xml = System.Text.Encoding.ASCII.GetString(stream.ToArray());
  id: totrans-106
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: string xml = System.Text.Encoding.ASCII.GetString(stream.ToArray());
- en: return XDocument.Parse(xml);
  id: totrans-107
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: return XDocument.Parse(xml);
- en: '}'
  id: totrans-108
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: catch
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: catch
- en: '{'
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: ➏continue;
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ➏continue;
- en: '}'
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: while (bytesRead > 0);
  id: totrans-115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: while (bytesRead > 0);
- en: '}'
  id: totrans-116
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: return null;
  id: totrans-117
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: return null;
- en: '}'
  id: totrans-118
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 7-6: The  ReadMessage()  method for OpenVAS'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 'Listing 7-6: ReadMessage() 方法用于 OpenVAS'
- en: This method reads an XML document from the TCP stream in chunks and returns
    the document (or null) to the caller. After passing an sslStream ➊ to the method,
    we declare a MemoryStream ➋, which allows us to dynamically store the data we
    receive from the server. We then declare an integer to store the number of bytes
    read and use a do/while loop ➌ to create a 2048-byte buffer to read the data into.
    Next, we call Read() ➍ on the SslStream to fill the buffer with the number of
    bytes read from the stream, and then we copy the data coming from OpenVAS to the
    MemoryStream using Write() so we can parse the data into XML later.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法从 TCP 流中分块读取 XML 文档，并将文档（或 null）返回给调用者。在将 sslStream ➊ 传递给方法后，我们声明一个 MemoryStream
    ➋，它允许我们动态存储从服务器接收的数据。接着，我们声明一个整数来存储读取的字节数，并使用 do/while 循环 ➌ 来创建一个 2048 字节的缓冲区以读取数据。然后，我们在
    SslStream 上调用 Read() ➍ 方法，将缓冲区填充从流中读取的字节数，之后我们使用 Write() 方法将来自 OpenVAS 的数据复制到
    MemoryStream 中，以便后续解析成 XML。
- en: If the server returns less data than the buffer can contain, we need to check
    whether we have read a valid XML document from the server. To do so, we use GetString()
    within a try/catch block ➎ to convert the bytes stored in the MemoryStream into
    a parseable string and attempt to parse the XML, since parsing will throw an exception
    if the XML isn’t valid. If no exception is thrown, we return the XML document.
    If an exception is thrown, we know that we haven’t finished reading the stream,
    so we call continue ➏ to read more data. If we finish reading bytes from the stream
    and have yet to return a valid XML document, we return null. This is a bit of
    defense, in case communication with OpenVAS is lost in the middle and we aren’t
    able to read the entire API response. Returning null allows us to check whether
    the response from OpenVAS is valid later since null will only be returned if we
    couldn’t read the full XML response.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器返回的数据少于缓冲区能够容纳的内容，我们需要检查是否从服务器读取了有效的 XML 文档。为此，我们在 try/catch 块 ➎ 中使用 GetString()
    将存储在 MemoryStream 中的字节转换为可解析的字符串，并尝试解析 XML，因为如果 XML 无效，解析将抛出异常。如果没有抛出异常，我们返回 XML
    文档。如果抛出异常，我们知道我们还没有读取完流的数据，因此调用 continue ➏ 以读取更多数据。如果我们已经完成了从流中读取字节，但仍未返回有效的 XML
    文档，我们返回 null。这是一种防御性措施，以防与 OpenVAS 的通信中断，并且无法读取完整的 API 响应。返回 null 允许我们稍后检查来自 OpenVAS
    的响应是否有效，因为只有在无法读取完整的 XML 响应时，才会返回 null。
- en: Setting Up the TCP Stream to Send and Receive Commands
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 TCP 流以发送和接收命令
- en: '[Listing 7-7](#filepos526238) shows the GetStream() method that first appears
    in [Listing 7-3](#filepos515080). It makes the actual TCP connection to the OpenVAS
    server that we’ll use to send and receive commands.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 7-7](#filepos526238) 显示了首先出现在 [清单 7-3](#filepos515080) 中的 GetStream() 方法。它建立了与
    OpenVAS 服务器的实际 TCP 连接，我们将使用该连接来发送和接收命令。'
- en: private void GetStream()
  id: totrans-124
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: private void GetStream()
- en: '{'
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: if (_stream == null || !_stream.CanRead)
  id: totrans-126
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: if (_stream == null || !_stream.CanRead)
- en: '{'
  id: totrans-127
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: TcpClient client = new ➊TcpClient(this.ServerIPAddress.ToString(), this.ServerPort);
  id: totrans-128
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: TcpClient client = new ➊TcpClient(this.ServerIPAddress.ToString(), this.ServerPort);
- en: ''
  id: totrans-129
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: _stream = new ➋SslStream(client.GetStream(), false,
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: _stream = new ➋SslStream(client.GetStream(), false,
- en: new RemoteCertificateValidationCallback (ValidateServerCertificate),
  id: totrans-131
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new RemoteCertificateValidationCallback (ValidateServerCertificate),
- en: (sender, targetHost, localCertificates, remoteCertificate, acceptableIssuers)
    => null);
  id: totrans-132
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: (sender, targetHost, localCertificates, remoteCertificate, acceptableIssuers)
    => null);
- en: ''
  id: totrans-133
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: _stream.➌AuthenticateAsClient("OpenVAS", null, SslProtocols.Tls, false);
  id: totrans-134
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: _stream.➌AuthenticateAsClient("OpenVAS", null, SslProtocols.Tls, false);
- en: '}'
  id: totrans-135
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-136
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 7-7: The  OpenVASSession  constructor’s  GetStream()  method'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 7-7：OpenVASSession 构造函数的 GetStream() 方法
- en: The GetStream() sets up the TCP stream for use in the rest of the class when
    communicating with OpenVAS. To do this, we instantiate a new TcpClient ➊ with
    the server by passing the ServerIPAddress and ServerPort properties to TcpClient
    if the stream is invalid. We wrap the stream in an SslStream ➋ that will not verify
    SSL certificates since the SSL certificates are self-signed and will throw an
    error; then we perform the SSL handshake by calling AuthenticateAsClient() ➌.
    The TCP stream to the OpenVAS server can now be used by the rest of the methods
    when we begin sending commands and receiving responses.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: GetStream() 方法为与 OpenVAS 通信时其余类中的其他方法设置了 TCP 流。为此，我们通过将 ServerIPAddress 和 ServerPort
    属性传递给 TcpClient 来实例化一个新的 TcpClient ➊，如果流无效。然后我们将流包装在一个不验证 SSL 证书的 SslStream ➋
    中，因为 OpenVAS 使用的 SSL 证书是自签名的，会抛出错误；接着，我们通过调用 AuthenticateAsClient() ➌ 执行 SSL 握手。现在，OpenVAS
    服务器的 TCP 流可以被其余方法使用，当我们开始发送命令和接收响应时。
- en: Certificate Validation and Garbage Collection
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 证书验证和垃圾回收
- en: '[Listing 7-8](#filepos528378) shows the methods used to validate SSL certificates
    (since the SSL certificates OpenVAS uses by default are self-signed) and clean
    up our session once we’ve finished with it.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 7-8](#filepos528378) 显示了用于验证 SSL 证书的方法（由于 OpenVAS 默认使用的是自签名的 SSL 证书）并且在完成后清理我们的会话。'
- en: private bool ValidateServerCertificate(object sender, X509Certificate certificate,
  id: totrans-141
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: private bool ValidateServerCertificate(object sender, X509Certificate certificate,
- en: X509Chain chain, SslPolicyErrors sslPolicyErrors)
  id: totrans-142
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: X509Chain chain, SslPolicyErrors sslPolicyErrors)
- en: '{'
  id: totrans-143
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: return ➊true;
  id: totrans-144
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: return ➊true;
- en: '}'
  id: totrans-145
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: ''
  id: totrans-146
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public void Dispose()
  id: totrans-147
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public void Dispose()
- en: '{'
  id: totrans-148
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: if (_stream != null)
  id: totrans-149
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: if (_stream != null)
- en: ➋_stream.Dispose();
  id: totrans-150
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ➋_stream.Dispose();
- en: '}'
  id: totrans-151
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 7-8: The  ValidateServerCertificate()  and  Dispose()  methods'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 7-8：ValidateServerCertificate() 和 Dispose() 方法
- en: Returning true ➊ is generally poor practice, but since in our case OpenVAS is
    using a self-signed SSL certificate that would not otherwise validate, we must
    allow all certs. As with earlier examples, we create the Dispose() method so we
    can clean up after dealing with network or file streams. If the stream in the
    OpenVASSession class isn’t null, we dispose of the internal stream ➋ used to communicate
    with OpenVAS.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 true ➊ 通常不是一个好的实践，但由于在我们的例子中，OpenVAS 使用的是自签名 SSL 证书，否则该证书无法验证，因此我们必须允许所有证书。与之前的示例一样，我们创建
    Dispose() 方法，以便在处理网络或文件流后清理资源。如果 OpenVASSession 类中的流不为 null，我们将释放用于与 OpenVAS 通信的内部流
    ➋。
- en: Getting the OpenVAS Version
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 获取 OpenVAS 版本
- en: We can now drive OpenVAS to send commands and retrieve responses, as shown in
    [Listing 7-9](#filepos530481). For instance, we can run commands such as the get_version
    command, which returns version information for the OpenVAS instance. We’ll wrap
    similar functionality later in the OpenVASManager class.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以通过 OpenVAS 启动命令并获取响应，如 [Listing 7-9](#filepos530481) 所示。例如，我们可以运行类似 get_version
    的命令，该命令返回 OpenVAS 实例的版本信息。我们稍后会在 OpenVASManager 类中封装类似的功能。
- en: class MainClass
  id: totrans-156
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: class MainClass
- en: '{'
  id: totrans-157
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: public static void Main(string[] args)
  id: totrans-158
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public static void Main(string[] args)
- en: '{'
  id: totrans-159
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: using (OpenVASSession session = new ➊OpenVASSession("admin", "admin", "192.168.1.19"))
  id: totrans-160
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: using (OpenVASSession session = new ➊OpenVASSession("admin", "admin", "192.168.1.19"))
- en: '{'
  id: totrans-161
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: XDocument doc = session.➋ExecuteCommand(
  id: totrans-162
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument doc = session.➋ExecuteCommand(
- en: XDocument.Parse("<get_version />"));
  id: totrans-163
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument.Parse("<get_version />"));
- en: ''
  id: totrans-164
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Console.WriteLine(doc.ToString());
  id: totrans-165
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Console.WriteLine(doc.ToString());
- en: '}'
  id: totrans-166
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-167
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-168
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 7-9: The  Main()  method driving OpenVAS to retrieve the current version'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 'Listing 7-9: Main() 方法驱动 OpenVAS 获取当前版本'
- en: We create a new OpenVASSession ➊ by passing in a username, password, and host.
    Next, we pass ExecuteCommand() ➋ an XDocument requesting the OpenVAS version,
    store the result in a new XDocument, and then write it to the screen. The output
    from [Listing 7-9](#filepos530481) should look like [Listing 7-10](#filepos531469).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过传入用户名、密码和主机来创建一个新的 OpenVASSession ➊。接下来，我们将一个请求 OpenVAS 版本的 XDocument 传递给
    ExecuteCommand() ➋，将结果存储在一个新的 XDocument 中，然后将其输出到屏幕上。[Listing 7-9](#filepos530481)
    的输出应类似于 [Listing 7-10](#filepos531469)。
- en: <get_version_response status="200" status_text="OK">
  id: totrans-171
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <get_version_response status="200" status_text="OK">
- en: <version>6.0</version>
  id: totrans-172
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <version>6.0</version>
- en: '</get_version_response> Listing 7-10: The OpenVAS response to  <get_version
    />'
  id: totrans-173
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '</get_version_response> Listing 7-10: OpenVAS 对 <get_version /> 的响应'
- en: The OpenVASManager Class
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVASManager 类
- en: We’ll use the OpenVASManager class (shown in [Listing 7-11](#filepos533004))
    to wrap the API calls to start a scan, monitor the scan, and get the scan results.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 OpenVASManager 类（如 [Listing 7-11](#filepos533004) 中所示）来封装 API 调用，以启动扫描、监控扫描并获取扫描结果。
- en: 'public class OpenVASManager : IDisposable'
  id: totrans-176
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'public class OpenVASManager : IDisposable'
- en: '{'
  id: totrans-177
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: private OpenVASSession _session;
  id: totrans-178
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: private OpenVASSession _session;
- en: public OpenVASManager(OpenVASSession ➊session)
  id: totrans-179
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public OpenVASManager(OpenVASSession ➊session)
- en: '{'
  id: totrans-180
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: if (session != null)
  id: totrans-181
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: if (session != null)
- en: _session = session;
  id: totrans-182
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: _session = session;
- en: else
  id: totrans-183
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: else
- en: throw new ArgumentNullException("session");
  id: totrans-184
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: throw new ArgumentNullException("session");
- en: '}'
  id: totrans-185
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: ''
  id: totrans-186
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public XDocument ➋GetVersion()
  id: totrans-187
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public XDocument ➋GetVersion()
- en: '{'
  id: totrans-188
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: return _session.ExecuteCommand(XDocument.Parse("<get_version />"));
  id: totrans-189
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: return _session.ExecuteCommand(XDocument.Parse("<get_version />"));
- en: '}'
  id: totrans-190
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: ''
  id: totrans-191
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: private void Dispose()
  id: totrans-192
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: private void Dispose()
- en: '{'
  id: totrans-193
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: _session.Dispose();
  id: totrans-194
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: _session.Dispose();
- en: '}'
  id: totrans-195
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-196
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 7-11: The  OpenVASManager  constructor and  GetVersion()  method'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 'Listing 7-11: OpenVASManager 构造函数和 GetVersion() 方法'
- en: The OpenVASManager class constructor takes one argument, an OpenVASSession ➊.
    If the session passed as the argument is null, we throw an exception because we
    can’t communicate with OpenVAS without a valid session. Otherwise, we assign the
    session to a local class variable that we can use from the methods in the class,
    such as GetVersion(). We then implement GetVersion() ➋ to get the version of OpenVAS
    (as in [Listing 7-9](#filepos530481)) and the Dispose() method.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVASManager 类的构造函数接受一个参数，即 OpenVASSession ➊。如果传入的 session 参数为 null，我们会抛出异常，因为没有有效的
    session 我们无法与 OpenVAS 通信。否则，我们将该 session 分配给一个本地类变量，以便在类中的方法中使用，如 GetVersion()。然后，我们实现
    GetVersion() ➋ 方法来获取 OpenVAS 的版本（如 [Listing 7-9](#filepos530481) 中所示）以及 Dispose()
    方法。
- en: We can now replace the code calling ExecuteCommand() in our Main() method with
    the OpenVASManager to retrieve the OpenVAS version, as shown in [Listing 7-12](#filepos534946).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以用 OpenVASManager 替换 Main() 方法中调用 ExecuteCommand() 的代码，以获取 OpenVAS 版本，如
    [Listing 7-12](#filepos534946) 所示。
- en: public static void Main(string[] args)
  id: totrans-200
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public static void Main(string[] args)
- en: '{'
  id: totrans-201
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: using (OpenVASSession session = new OpenVASSession("admin", "admin", "192.168.1.19"))
  id: totrans-202
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: using (OpenVASSession session = new OpenVASSession("admin", "admin", "192.168.1.19"))
- en: '{'
  id: totrans-203
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: using (OpenVASManager manager = new OpenVASManager(session))
  id: totrans-204
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: using (OpenVASManager manager = new OpenVASManager(session))
- en: '{'
  id: totrans-205
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: XDocument version = manager.GetVersion();
  id: totrans-206
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument version = manager.GetVersion();
- en: Console.WriteLine(version);
  id: totrans-207
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Console.WriteLine(version);
- en: '}'
  id: totrans-208
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-209
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-210
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 7-12: The  Main()  method retrieving the OpenVAS version with the  OpenVASManager  class'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 7-12：Main() 方法通过 OpenVASManager 类获取 OpenVAS 版本
- en: The programmer no longer needs to remember the XML required to get the version
    information because it is abstracted away behind a convenient method call. We
    can follow this same pattern for the rest of the API commands we will be calling
    as well.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员不再需要记住获取版本信息所需的 XML，因为它已经通过一个方便的方法调用进行了抽象。我们可以遵循这个模式来调用 API 中的其他命令。
- en: Getting Scan Configurations and Creating Targets
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 获取扫描配置和创建目标
- en: '[Listing 7-13](#filepos536788) shows how we’ll add the commands to run in OpenVASManager
    to create a new target and retrieve scan configurations.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 7-13](#filepos536788)展示了我们如何在 OpenVASManager 中添加命令，创建新目标并获取扫描配置。'
- en: public XDocument GetScanConfigurations()
  id: totrans-215
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public XDocument GetScanConfigurations()
- en: '{'
  id: totrans-216
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: return _session.ExecuteCommand(XDocument.Parse(➊"<get_configs />"));
  id: totrans-217
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: return _session.ExecuteCommand(XDocument.Parse(➊"<get_configs />"));
- en: '}'
  id: totrans-218
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: ''
  id: totrans-219
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public XDocument CreateSimpleTarget(string cidrRange, string targetName)
  id: totrans-220
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public XDocument CreateSimpleTarget(string cidrRange, string targetName)
- en: '{'
  id: totrans-221
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: XDocument createTargetXML = new XDocument(
  id: totrans-222
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument createTargetXML = new XDocument(
- en: new XElement(➋"create_target",
  id: totrans-223
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement(➋"create_target",
- en: new XElement("name", targetName),
  id: totrans-224
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement("name", targetName),
- en: new XElement("hosts", cidrRange)));
  id: totrans-225
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement("hosts", cidrRange)));
- en: return _session.ExecuteCommand(createTargetXML);
  id: totrans-226
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: return _session.ExecuteCommand(createTargetXML);
- en: '}'
  id: totrans-227
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 7-13: The OpenVAS  GetScanConfigurations()  and  CreateSimpleTarget()  methods'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 7-13：OpenVAS GetScanConfigurations() 和 CreateSimpleTarget() 方法
- en: The GetScanConfigurations() method passes the <get_configs /> command ➊ to OpenVAS
    and returns the response. The CreateSimpleTarget() method accepts arguments for
    the IP address or CIDR range (192.168.1.0/24, for instance) and a target name,
    which we use to build an XML document using XDocument and XElement. The first
    XElement creates a root XML node of create_target ➋. The remaining two contain
    the name of the target and its hosts. [Listing 7-14](#filepos538158) shows the
    resulting XML document.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: GetScanConfigurations() 方法将 <get_configs /> 命令 ➊ 传递给 OpenVAS 并返回响应。CreateSimpleTarget()
    方法接受 IP 地址或 CIDR 范围（例如 192.168.1.0/24）和目标名称作为参数，我们使用这些信息通过 XDocument 和 XElement
    构建一个 XML 文档。第一个 XElement 创建一个名为 create_target 的根 XML 节点 ➋。其余的两个包含目标的名称和主机信息。[清单
    7-14](#filepos538158)展示了生成的 XML 文档。
- en: <create_target>
  id: totrans-230
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <create_target>
- en: <name>Home Network</name>
  id: totrans-231
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <name>家庭网络</name>
- en: <hosts>192.168.1.0/24</hosts>
  id: totrans-232
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <hosts>192.168.1.0/24</hosts>
- en: '</create_target> Listing 7-14: The OpenVAS  create_target  command XML'
  id: totrans-233
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: </create_target> 清单 7-14：OpenVAS create_target 命令 XML
- en: '[Listing 7-15](#filepos539584) shows how we create the target and scan it for
    the Discovery scan configuration, which performs a basic port scan and other basic
    network tests.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 7-15](#filepos539584)展示了我们如何创建目标并对其进行扫描，以获取Discovery扫描配置，该配置执行基本的端口扫描和其他基本的网络测试。'
- en: XDocument target = manager.➊CreateSimpleTarget("192.168.1.31", Guid.NewGuid().ToString());
  id: totrans-235
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument target = manager.➊CreateSimpleTarget("192.168.1.31", Guid.NewGuid().ToString());
- en: string targetID = target.Root.Attribute("id").➋Value;
  id: totrans-236
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: string targetID = target.Root.Attribute("id").➋Value;
- en: XDocument configs = manager.GetScanConfigurations();
  id: totrans-237
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument configs = manager.GetScanConfigurations();
- en: string discoveryConfigID = string.Empty;
  id: totrans-238
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: string discoveryConfigID = string.Empty;
- en: ''
  id: totrans-239
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: foreach (XElement node in configs.Descendants("name"))
  id: totrans-240
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: foreach (XElement node in configs.Descendants("name"))
- en: '{'
  id: totrans-241
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: if (node.Value == ➌"Discovery")
  id: totrans-242
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: if (node.Value == ➌"Discovery")
- en: '{'
  id: totrans-243
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: discoveryConfigID = node.Parent.Attribute ("id").Value;
  id: totrans-244
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: discoveryConfigID = node.Parent.Attribute("id").Value;
- en: break;
  id: totrans-245
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: break;
- en: '}'
  id: totrans-246
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-247
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: ''
  id: totrans-248
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Console.➍WriteLine("Creating scan of target " + targetID + " with scan config
    " +
  id: totrans-249
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Console.➍WriteLine("正在创建目标 " + targetID + " 的扫描，使用的扫描配置是 " +
- en: 'discoveryConfigID); Listing 7-15: Creating an OpenVAS target and retrieving
    the scan config ID'
  id: totrans-250
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: discoveryConfigID); 清单 7-15：创建 OpenVAS 目标并获取扫描配置 ID
- en: First, we create the target to scan with CreateSimpleTarget() ➊ by passing in
    an IP address to scan and a new Guid as the name of the target. For purposes of
    automation, we don’t need a human-readable name for the target, so we just generate
    a Guid for the name.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们通过调用 CreateSimpleTarget() ➊ 来创建一个要扫描的目标，传入要扫描的 IP 地址和一个新的 Guid 作为目标名称。为了自动化，我们不需要目标的可读名称，因此我们只生成一个
    Guid 作为名称。
- en: NOTE
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In the future, you might want to name a target Databases or Workstations to
    separate specific machines on your network for scanning. You could specify readable
    names like these instead, but names must be unique for each target.)
  id: totrans-253
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将来，你可能想将目标命名为 Databases 或 Workstations，以便区分网络上的特定机器进行扫描。你也可以指定像这样的可读名称，但每个目标的名称必须是唯一的。)
- en: 'Here’s what a response to successful target creation should look like: <create_target_response
    status="201" status_text="OK, resource created"'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是成功创建目标时响应的样子：<create_target_response status="201" status_text="OK, resource
    created"
- en: id="254cd3ef-bbe1-4d58-859d-21b8d0c046c6"/> After creating the target, we grab
    the value of the id attribute ➋ from the XML response and store it for later use
    when we need to get the scan status. We then call GetScanConfigurations() to retrieve
    all available scan configurations, store them, and loop through them to find the
    one with the name of Discovery ➌. Finally, we print a message to the screen with
    WriteLine() ➍, telling the user which target and scan configuration ID will be
    used for the scan.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: id="254cd3ef-bbe1-4d58-859d-21b8d0c046c6"/> 创建目标后，我们从 XML 响应中获取 id 属性的值 ➋，并将其存储，以便在需要获取扫描状态时使用。接着，我们调用
    GetScanConfigurations() 获取所有可用的扫描配置，将它们存储并遍历，找到名称为 Discovery ➌ 的配置。最后，我们使用 WriteLine()
    ➍ 将一条消息打印到屏幕，告诉用户将使用哪个目标和扫描配置 ID 进行扫描。
- en: Creating and Starting Tasks
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 创建并启动任务
- en: '[Listing 7-16](#filepos542916) shows how we create and start a scan with the
    OpenVASManager class.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 7-16](#filepos542916) 展示了如何使用 OpenVASManager 类创建并启动扫描。'
- en: public XDocument ➊CreateSimpleTask(string name, string comment, Guid configID,
    Guid targetID)
  id: totrans-258
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public XDocument ➊CreateSimpleTask(string name, string comment, Guid configID,
    Guid targetID)
- en: '{'
  id: totrans-259
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: XDocument createTaskXML = new XDocument(
  id: totrans-260
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument createTaskXML = new XDocument(
- en: new XElement(➋"create_task",
  id: totrans-261
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement(➋"create_task",
- en: new XElement("name", name),
  id: totrans-262
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement("name", name),
- en: new XElement("comment", comment),
  id: totrans-263
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement("comment", comment),
- en: new XElement("config",
  id: totrans-264
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement("config",
- en: new XAttribute(➌"id", configID.ToString())),
  id: totrans-265
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute(➌"id", configID.ToString())),
- en: new XElement("target",
  id: totrans-266
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement("target",
- en: new XAttribute("id", targetID.ToString()))));
  id: totrans-267
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute("id", targetID.ToString()))));
- en: ''
  id: totrans-268
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return _session.ExecuteCommand(createTaskXML);
  id: totrans-269
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: return _session.ExecuteCommand(createTaskXML);
- en: '}'
  id: totrans-270
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: public XDocument ➍StartTask(Guid taskID)
  id: totrans-271
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public XDocument ➍StartTask(Guid taskID)
- en: '{'
  id: totrans-272
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: XDocument startTaskXML = new XDocument(
  id: totrans-273
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument startTaskXML = new XDocument(
- en: new XElement(➎"start_task",
  id: totrans-274
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement(➎"start_task",
- en: new XAttribute("task_id", taskID.ToString())));
  id: totrans-275
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute("task_id", taskID.ToString())));
- en: ''
  id: totrans-276
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return _session.ExecuteCommand(startTaskXML);
  id: totrans-277
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: return _session.ExecuteCommand(startTaskXML);
- en: '}'
  id: totrans-278
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 7-16: The OpenVAS methods to create and start a task'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 7-16：OpenVAS 方法，用于创建并启动任务
- en: The CreateSimpleTask() method ➊ creates a new task with a few basic pieces of
    information. It is possible to create very complex task configurations. For purposes
    of a basic vulnerability scan, we build a simple XML document with a root create_task
    element ➋ and some child elements to store configuration information. The first
    two child elements are the name and comment (or description) of the task. Next
    are the scan config and target elements, with values stored as id attributes ➌.
    After setting up our XML, we send the create_task command to OpenVAS and return
    the response.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: CreateSimpleTask() 方法 ➊ 创建一个带有少量基本信息的新任务。可以创建非常复杂的任务配置。为了进行基本的漏洞扫描，我们构建了一个简单的
    XML 文档，根元素是 create_task ➋，并包含一些子元素用于存储配置的相关信息。前两个子元素是任务的名称和注释（或描述）。接下来是扫描配置和目标元素，值作为
    id 属性 ➌ 存储。在设置好 XML 后，我们将 create_task 命令发送给 OpenVAS，并返回响应。
- en: 'The StartTask() method ➍ accepts a single argument: the task ID to be started.
    We first create an XML element called start_task ➎ with the attribute task_id.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: StartTask() 方法 ➍ 接受一个参数：要启动的任务 ID。我们首先创建一个名为 start_task ➎ 的 XML 元素，并为其添加 task_id
    属性。
- en: '[Listing 7-17](#filepos544694) shows how we add these two methods to Main().'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 7-17](#filepos544694) 展示了如何将这两个方法添加到 Main() 中。'
- en: XDocument task = manager.CreateSimpleTask(Guid.NewGuid().ToString(),
  id: totrans-283
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument task = manager.CreateSimpleTask(Guid.NewGuid().ToString(),
- en: string.Empty, new Guid(discoveryConfigID), new Guid(targetID));
  id: totrans-284
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: string.Empty, new Guid(discoveryConfigID), new Guid(targetID));
- en: ''
  id: totrans-285
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Guid taskID = new Guid(task.Root.➊Attribute("id").Value);
  id: totrans-286
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Guid taskID = new Guid(task.Root.➊Attribute("id").Value);
- en: ''
  id: totrans-287
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'manager.➋StartTask(taskID); Listing 7-17: Creating and starting an OpenVAS
    task'
  id: totrans-288
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: manager.➋StartTask(taskID); Listing 7-17：创建并启动一个 OpenVAS 任务
- en: To call CreateSimpleTask(), we pass a new Guid as the name of the task, an empty
    string for the comment, and the scan config ID and the target ID as the argument.
    We pull the id attribute ➊ from the root node of the XML document returned, which
    is the task ID; then we pass it to StartTask() ➋ to start the OpenVAS scan.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 要调用 CreateSimpleTask()，我们传入一个新的 Guid 作为任务名称，一个空字符串作为评论，以及扫描配置 ID 和目标 ID 作为参数。我们从返回的
    XML 文档的根节点提取 id 属性 ➊，这是任务 ID；然后我们将其传递给 StartTask() ➋ 来启动 OpenVAS 扫描。
- en: Watching a Scan and Getting Scan Results
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 监控扫描并获取扫描结果
- en: In order to watch the scan, we implement GetTasks() and GetTaskResults(), as
    shown in [Listing 7-18](#filepos546926). The GetTasks() method (which is implemented
    first) returns a list of tasks and their status so we can monitor our scan until
    completion. The GetTaskResults() method returns the scan results of a given task
    so that we can see any vulnerabilities OpenVAS finds.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 为了监控扫描，我们实现了 GetTasks() 和 GetTaskResults() 方法，如 [列表 7-18](#filepos546926) 所示。GetTasks()
    方法（先实现）返回一个任务及其状态的列表，这样我们就可以监控扫描直到完成。GetTaskResults() 方法返回给定任务的扫描结果，这样我们就能看到 OpenVAS
    找到的任何漏洞。
- en: public XDocument GetTasks(Guid? taskID = ➊null)
  id: totrans-292
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public XDocument GetTasks(Guid? taskID = ➊null)
- en: '{'
  id: totrans-293
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: if (taskID != null)
  id: totrans-294
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: if (taskID != null)
- en: return _session.ExecuteCommand(new XDocument(
  id: totrans-295
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: return _session.ExecuteCommand(new XDocument(
- en: new XElement("get_tasks",
  id: totrans-296
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XElement("get_tasks",
- en: new ➋XAttribute("task_id", taskID.ToString()))));
  id: totrans-297
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new ➋XAttribute("task_id", taskID.ToString()))));
- en: ''
  id: totrans-298
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return _session.ExecuteCommand(➌XDocument.Parse("<get_tasks />"));
  id: totrans-299
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: return _session.ExecuteCommand(➌XDocument.Parse("<get_tasks />"));
- en: '}'
  id: totrans-300
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: ''
  id: totrans-301
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: public XDocument GetTaskResults(Guid taskID)
  id: totrans-302
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: public XDocument GetTaskResults(Guid taskID)
- en: '{'
  id: totrans-303
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: XDocument getTaskResultsXML = new XDocument(
  id: totrans-304
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument getTaskResultsXML = new XDocument(
- en: new ➍XElement("get_results",
  id: totrans-305
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new ➍XElement("get_results",
- en: new XAttribute("task_id", taskID.ToString())));
  id: totrans-306
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: new XAttribute("task_id", taskID.ToString())));
- en: ''
  id: totrans-307
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return _session.ExecuteCommand(getTaskResultsXML);
  id: totrans-308
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: return _session.ExecuteCommand(getTaskResultsXML);
- en: '}'
  id: totrans-309
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: 'Listing 7-18: The  OpenVASManager  methods to get a list of current tasks and
    retrieve the results of a given task'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 7-18：OpenVASManager 方法，用于获取当前任务列表并检索给定任务的结果
- en: The GetTasks() method has a single, optional argument that is null ➊ by default.
    The GetTasks() method will return either all of the current tasks or just a single
    task, depending on whether the taskID argument passed in is null. If the task
    ID passed in is not null, we create a new XML element called get_tasks with a
    task_id attribute ➋ of the task ID passed in; then we send the get_tasks command
    to OpenVAS and return the response. If the ID is null, we use the XDocument.Parse()
    method ➌ to create a new get_tasks element without a specific ID to get; then
    we execute the command and return the result.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: GetTasks() 方法有一个单一的可选参数，默认为 null ➊。GetTasks() 方法将返回所有当前任务，或者仅返回单个任务，具体取决于传入的
    taskID 参数是否为 null。如果传入的任务 ID 不为 null，我们会创建一个名为 get_tasks 的新的 XML 元素，并为其添加一个 task_id
    属性 ➋，该属性为传入的任务 ID；然后我们将 get_tasks 命令发送给 OpenVAS 并返回响应。如果 ID 为 null，我们会使用 XDocument.Parse()
    方法 ➌ 创建一个没有特定 ID 的新的 get_tasks 元素，以便获取任务；然后我们执行命令并返回结果。
- en: The GetTaskResults() method works like GetTasks() except that its single argument
    is not optional. Using the ID passed in as the argument, we create a get_results
    XML node ➍ with a task_id attribute. After passing this XML node to ExecuteCommand(),
    we return the response.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: GetTaskResults() 方法的工作方式与 GetTasks() 类似，不同之处在于它的唯一参数不是可选的。我们使用传入的 ID 作为参数，创建一个带有
    task_id 属性的 get_results XML 节点 ➍。将此 XML 节点传递给 ExecuteCommand() 后，我们返回响应。
- en: Wrapping Up the Automation
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 完成自动化
- en: '[Listing 7-19](#filepos549838) shows how we can monitor the scan and retrieve
    its results with the methods we just implemented. In our Main() method driving
    the Session/Manager classes, we can add the following code to round out our automation.'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 7-19](#filepos549838) 显示了我们如何监控扫描并通过我们刚刚实现的方法获取其结果。在驱动 Session/Manager
    类的 Main() 方法中，我们可以添加以下代码来完善我们的自动化。'
- en: XDocument status = manager.➊GetTasks(taskID);
  id: totrans-315
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument status = manager.➊GetTasks(taskID);
- en: ''
  id: totrans-316
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: while (status.➋Descendants("status").First().Value != "Done")
  id: totrans-317
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: while (status.➋Descendants("status").First().Value != "Done")
- en: '{'
  id: totrans-318
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{'
- en: Thread.Sleep(5000);
  id: totrans-319
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Thread.Sleep(5000);
- en: Console.Clear();
  id: totrans-320
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Console.Clear();
- en: string percentComplete = status.➌Descendants("progress").First().Nodes()
  id: totrans-321
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: string percentComplete = status.➌Descendants("progress").First().Nodes()
- en: .OfType<XText>().First().Value;
  id: totrans-322
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: .OfType<XText>().First().Value;
- en: Console.WriteLine("The scan is " + percentComplete + "% done.");
  id: totrans-323
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Console.WriteLine("扫描已完成 " + percentComplete + "%。");
- en: status = manager.➍GetTasks(taskID);
  id: totrans-324
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: status = manager.➍GetTasks(taskID);
- en: '}'
  id: totrans-325
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}'
- en: XDocument results = manager.➎GetTaskResults(taskID);
  id: totrans-326
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XDocument results = manager.➎GetTaskResults(taskID);
- en: 'Console.WriteLine(results.ToString()); Listing 7-19: Watching an OpenVAS scan
    until finished and then retrieving the scan results and printing them'
  id: totrans-327
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Console.WriteLine(results.ToString()); 示例 7-19：监视OpenVAS扫描直到完成，然后获取扫描结果并打印
- en: We call GetTasks() ➊ by passing in the task ID saved earlier and then save the
    results in the status variable. Then, we use the LINQ to XML method Descendants()
    ➋ to see whether the status node in the XML document is equal to Done, meaning
    the scan is finished. If the scan is not done, we Sleep() for five seconds and
    then clear the console screen. We then get the completion percentage of the scan
    by using Descendants() ➌ to retrieve the progress node, print the percentage,
    ask OpenVAS again for the current status with GetTasks() ➍, and so on until the
    scan reports it is done.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过传入之前保存的任务ID调用GetTasks() ➊，然后将结果保存在status变量中。接着，我们使用LINQ to XML方法Descendants()
    ➋来查看XML文档中的状态节点是否等于Done，这意味着扫描已经完成。如果扫描没有完成，我们调用Sleep()等待五秒钟，然后清空控制台屏幕。然后，我们使用Descendants()
    ➌获取进度节点来获取扫描的完成百分比，打印出该百分比，再次通过GetTasks() ➍请求OpenVAS的当前状态，直到扫描报告完成。
- en: Once the scan finishes, we call GetTaskResults() ➎ by passing in the task ID;
    then we save and print the XML document containing the scan results to the console
    screen. This document includes a range of useful information, including detected
    hosts and open ports, known active services across the scanned hosts, and known
    vulnerabilities such as old versions of software.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦扫描完成，我们通过传入任务ID调用GetTaskResults() ➎，然后保存并打印包含扫描结果的XML文档到控制台屏幕。该文档包括一系列有用信息，包括检测到的主机和开放端口、扫描主机上已知的活动服务，以及已知的漏洞，如软件的旧版本。
- en: Running the Automation
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 运行自动化
- en: Scans may take a while, depending on the machine running OpenVAS and the speed
    of your network. While running, our automation will display a friendly message
    to let the user know the status of the current scan. Successful output should
    look similar to the heavily trimmed sample report shown in [Listing 7-20](#filepos552801).
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描可能需要一段时间，这取决于运行OpenVAS的机器和网络速度。在扫描过程中，我们的自动化将显示一条友好的消息，让用户了解当前扫描的状态。成功的输出应该类似于[示例
    7-20](#filepos552801)中展示的简化报告。
- en: The scan is 1% done.
  id: totrans-332
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 扫描已完成1%。
- en: The scan is 8% done.
  id: totrans-333
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 扫描已完成8%。
- en: The scan is 8% done.
  id: totrans-334
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 扫描已完成8%。
- en: The scan is 46% done.
  id: totrans-335
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 扫描已完成46%。
- en: The scan is 50% done.
  id: totrans-336
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 扫描已完成50%。
- en: The scan is 58% done.
  id: totrans-337
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 扫描已完成58%。
- en: The scan is 72% done.
  id: totrans-338
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 扫描已完成72%。
- en: The scan is 84% done.
  id: totrans-339
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 扫描已完成84%。
- en: The scan is 94% done.
  id: totrans-340
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 扫描已完成94%。
- en: The scan is 98% done.
  id: totrans-341
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 扫描已完成98%。
- en: <get_results_response status="200" status_text="OK">
  id: totrans-342
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <get_results_response status="200" status_text="OK">
- en: <result id="57e9d1fa-7ad9-4649-914d-4591321d061a">
  id: totrans-343
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <result id="57e9d1fa-7ad9-4649-914d-4591321d061a">
- en: <owner>
  id: totrans-344
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <owner>
- en: <name>admin</name>
  id: totrans-345
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <name>admin</name>
- en: </owner>
  id: totrans-346
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: </owner>
- en: --snip--
  id: totrans-347
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: --省略--
- en: </result>
  id: totrans-348
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: </result>
- en: '</get_results_response> Listing 7-20: Sample output of the OpenVAS automation'
  id: totrans-349
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: </get_results_response> 示例 7-20：OpenVAS自动化的示例输出
- en: Conclusion
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 结论
- en: This chapter has shown you how to use the built-in networking classes in C#
    to automate OpenVAS. You learned how to create an SSL connection with OpenVAS
    and how to communicate using the XML-based OMP. You learned how to create a target
    to scan, retrieve available scan configurations, and start a particular scan on
    a target. You also learned how to monitor the progress of a scan and retrieve
    its results in an XML report.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 本章展示了如何使用C#内置的网络类来自动化OpenVAS。你学会了如何与OpenVAS建立SSL连接以及如何使用基于XML的OMP进行通信。你学会了如何创建扫描目标，检索可用的扫描配置，并启动针对目标的特定扫描。你还学会了如何监视扫描进度并以XML报告的形式检索扫描结果。
- en: With these basic blocks, we can begin remediating vulnerabilities on the network
    and then run new scans to ensure the vulnerabilities are no longer reported. The
    OpenVAS scanner is a very powerful tool, and we have only scratched the surface.
    OpenVAS constantly has updated vulnerability feeds and can be used as an effective
    vulnerability management solution.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些基本模块，我们可以开始修复网络中的漏洞，然后运行新的扫描以确保漏洞不再被报告。OpenVAS扫描器是一个非常强大的工具，我们仅仅是初步了解它。OpenVAS不断更新漏洞数据，并且可以作为一个有效的漏洞管理解决方案。
- en: As a next step, you might want to look into managing credentials for authenticated
    vulnerability scans over SSH or creating custom scan configurations to check for
    specific policy configurations. All of this is possible, and more, through OpenVAS.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步，你可能需要考虑管理通过SSH进行认证的漏洞扫描凭据，或创建自定义扫描配置以检查特定的策略配置。通过OpenVAS，这一切都可以实现，甚至更多。
