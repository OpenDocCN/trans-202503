- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: Most developers associate object-oriented programming with languages that are
    typically taught in school, like C++ and Java, which base object-oriented programming
    around classes. Before you can do anything in these languages, you need to create
    a class, even if you’re just writing a simple command-line program.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发者将面向对象编程与那些通常在学校教授的语言联系在一起，比如 C++ 和 Java，它们将面向对象编程建立在类的基础上。在这些语言中，在做任何事情之前，你需要创建一个类，即使你只是在编写一个简单的命令行程序。
- en: Common design patterns in the industry reinforce class-based concepts as well.
    But JavaScript doesn’t use classes, and this is part of the reason people get
    confused when they try learning it after C++ or Java.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 行业中的常见设计模式也强调了基于类的概念。但 JavaScript 不使用类，这也是人们在学习 JavaScript 时，从 C++ 或 Java 转过来时常常感到困惑的部分原因。
- en: 'Object-oriented languages have several characteristics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象的语言具有几个特性：
- en: '****Encapsulation****. Data can be grouped together with functionality that
    operates on that data. This, quite simply, is the definition of an object.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '****封装****。数据可以与操作这些数据的功能一起进行组合。这简单来说，就是对象的定义。'
- en: '****Aggregation****. One object can reference another object.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '****聚合****。一个对象可以引用另一个对象。'
- en: '****Inheritance****. A newly created object has the same characteristics as
    another object without explicitly duplicating its functionality.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '****继承****。一个新创建的对象拥有与另一个对象相同的特性，而无需明确地复制其功能。'
- en: '****Polymorphism****. One interface may be implemented by multiple objects.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '****多态****。一个接口可以由多个对象实现。'
- en: JavaScript has all these characteristics, though because the language has no
    concept of classes, some aren’t implemented in quite the way you might expect.
    At first glance, a JavaScript program might even look like a procedural program
    you would write in C. If you can write a function and pass it some variables,
    you have a working script that seemingly has no objects. A closer look at the
    language, however, reveals the existence of objects through the use of dot notation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 具有所有这些特性，尽管由于语言没有类的概念，有些特性并不是以你预期的方式实现的。乍一看，一个 JavaScript 程序甚至可能看起来像你在
    C 中编写的过程式程序。如果你能编写一个函数并传递一些变量，那么你就有了一个看似没有对象的工作脚本。然而，更深入地了解这门语言，你会发现通过使用点符号可以访问对象。
- en: Many object-oriented languages use dot notation to access properties and methods
    on objects, and JavaScript is syntactically the same. But in JavaScript, you never
    need to write a class definition, import a package, or include a header file.
    You just start coding with the data types that you want, and you can group those
    together in any number of ways. You could certainly write JavaScript in a procedural
    way, but its true power emerges when you take advantage of its object-oriented
    nature. That’s what this book is about.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 许多面向对象的语言使用点符号来访问对象的属性和方法，而 JavaScript 在语法上是相同的。但是在 JavaScript 中，你从不需要编写类定义、导入包或包含头文件。你只需开始编写你想要的数据类型，然后可以以任意方式将它们组合在一起。当然，你可以按照过程式的方式编写
    JavaScript，但它的真正强大之处在于你可以充分利用其面向对象的特性。这正是本书要讲解的内容。
- en: 'Make no mistake: A lot of the concepts you may have learned in more traditional
    object-oriented programming languages don’t necessarily apply to JavaScript. While
    that often confuses beginners, as you read, you’ll quickly find that JavaScript’s
    weakly typed nature allows you to write less code to accomplish the same tasks
    as other languages. You can just start coding without planning the classes that
    you need ahead of time. Need an object with specific fields? Just create an ad
    hoc object wherever you want. Did you forget to add a method to that object? No
    problem—just add it later.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 不要误解：你在更传统的面向对象编程语言中学到的许多概念并不一定适用于 JavaScript。虽然这通常会让初学者感到困惑，但当你阅读时，你会很快发现，JavaScript
    的弱类型特性使你能够编写更少的代码，完成与其他语言相同的任务。你可以在不事先规划所需类的情况下直接开始编写代码。需要一个具有特定字段的对象？只需在任何你想要的地方创建一个临时对象。忘记给这个对象添加方法了？没问题——稍后再加。
- en: Inside these pages, you’ll learn the unique way that JavaScript approaches object-oriented
    programming. Leave behind the notions of classes and class-based inheritance and
    learn about prototype-based inheritance and constructor functions that behave
    similarly. You’ll learn how to create objects, define your own types, use inheritance,
    and otherwise manipulate objects to get the most out of them. In short, you’ll
    learn everything you need to know to understand and write JavaScript professionally.
    Enjoy!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些页面中，你将学习 JavaScript 处理面向对象编程的独特方式。抛开类和基于类的继承的概念，了解基于原型的继承和表现相似的构造函数。你将学会如何创建对象、定义自己的类型、使用继承，并以其他方式操作对象，以便充分利用它们。简而言之，你将学到理解和编写
    JavaScript 所需的所有知识。祝你学习愉快！
- en: Who This Book Is For
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本书适合谁阅读
- en: 'This book is intended as a guide for those who already understand object-oriented
    programming but want to know exactly how the concept works in JavaScript. Familiarity
    with Java, C#, or object-oriented programming in other languages is a strong indicator
    that this book is for you. In particular, this book is aimed at three groups of
    readers:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在为那些已经理解面向对象编程，但希望深入了解 JavaScript 中如何实现这一概念的读者提供指南。熟悉 Java、C# 或其他语言中的面向对象编程是本书适合你的一个重要标志。特别是，本书面向以下三类读者：
- en: Developers who are familiar with object-oriented programming concepts and want
    to apply them to JavaScript
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉面向对象编程概念，并希望将其应用到 JavaScript 中的开发者
- en: Web application and Node.js developers trying to structure their code more effectively
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正在尝试更有效地组织代码的 Web 应用程序和 Node.js 开发者
- en: Novice JavaScript developers trying to gain a deeper understanding of the language
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 希望更深入了解 JavaScript 语言的初学者开发者
- en: This book is not for beginners who have never written JavaScript. You will need
    a good understanding of how to write and execute JavaScript code to follow along.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本书不适合从未编写过 JavaScript 的初学者。你需要对如何编写和执行 JavaScript 代码有一定的了解，才能跟得上本书的内容。
- en: Overview
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: '**[Chapter 1](ch01.html "Chapter 1. Primitive and Reference Types")** introduces
    the two different value types in JavaScript: primitive and reference. You’ll learn
    what distinguishes them from each other and how understanding their differences
    is important to an overall understanding of JavaScript.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第1章](ch01.html "第1章. 原始类型和引用类型")** 介绍了 JavaScript 中的两种不同的值类型：原始类型和引用类型。你将了解它们之间的区别，以及理解这些差异对全面理解
    JavaScript 重要性。'
- en: '**[Chapter 2](ch02.html "Chapter 2. Functions")** explains the ins and outs
    of functions in JavaScript. First-class functions are what makes JavaScript such
    an interesting language.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第2章](ch02.html "第2章. 函数")** 详细解释了 JavaScript 中函数的方方面面。第一类函数是 JavaScript
    成为如此有趣语言的原因。'
- en: '**[Chapter 3](ch03.html "Chapter 3. Understanding Objects")** details the makeup
    of objects in JavaScript. JavaScript objects behave differently than objects in
    other languages, so a deep understanding of how objects work is vital to mastering
    the language.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第3章](ch03.html "第3章. 理解对象")** 详细介绍了 JavaScript 中对象的构成。JavaScript 中的对象与其他语言中的对象行为不同，因此深入理解对象的工作原理对精通这门语言至关重要。'
- en: '**[Chapter 4](ch04.html "Chapter 4. Constructors and Prototypes")** expands
    on the previous discussion of functions by looking more specifically at constructors.
    All constructors are functions, but they are used a little bit differently. This
    chapter explores the differences while also talking about creating your own custom
    types.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第4章](ch04.html "第4章. 构造函数和原型")** 在前述函数的基础上，进一步具体探讨了构造函数。所有构造函数都是函数，但它们的使用方式略有不同。本章将探讨这些差异，同时讨论如何创建你自己的自定义类型。'
- en: '**[Chapter 5](ch05.html "Chapter 5. Inheritance")** explains how inheritance
    is accomplished in JavaScript. Though there are no classes in JavaScript, that
    doesn’t mean inheritance isn’t possible. In this chapter, you’ll learn about prototypal
    inheritance and how it differs from class-based inheritance.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第5章](ch05.html "第5章. 继承")** 解释了如何在 JavaScript 中实现继承。虽然 JavaScript 中没有类，但这并不意味着继承不可能。在本章中，你将学习原型继承以及它与基于类的继承的区别。'
- en: '**[Chapter 6](ch06.html "Chapter 6. Object Patterns")** walks through common
    object patterns. There are many different ways to build and compose objects in
    JavaScript, and this chapter introduces you to the most popular patterns for doing
    so.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第6章](ch06.html "第6章. 对象模式")** 讲解了常见的对象模式。在 JavaScript 中有很多种构建和组合对象的方法，本章将向你介绍最流行的模式。'
- en: Help and Support
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 帮助与支持
- en: If you have questions, comments, or other feedback about this book, please visit
    the mailing list at *[http://groups.google.com/group/zakasbooks](http://groups.google.com/group/zakasbooks)*.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有关于本书的问题、评论或其他反馈，请访问邮件列表 *[http://groups.google.com/group/zakasbooks](http://groups.google.com/group/zakasbooks)*。
