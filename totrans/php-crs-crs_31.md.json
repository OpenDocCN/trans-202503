["```\n<?php\nnamespace Mattsmithdev;\n\nabstract class Animal\n{\n    protected string $sound = \"meow\";\n    public int $numLegs = 4;\n\n ❶ public function getSound(): string\n    {\n        return $this->sound;\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nabstract class SoundMaker\n{\n    abstract public function getSound(): string;\n}\n```", "```\nPHP Fatal error:  Class Mattsmithdev\\Car contains 1 abstract method and must\ntherefore be declared abstract or implement the remaining methods\n```", "```\n<?php\nnamespace Mattsmithdev;\n\ninterface SoundMaker\n{\n    public function getSound(): string;\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass PipeOrgan implements SoundMaker\n{\n    public function getSound(): string\n    {\n        return 'dum, dum, dum-dum';\n    }\n}\n```", "```\nPHP Fatal error:  Class Mattsmithdev\\PipeOrgan contains 1 abstract method and\nmust therefore be declared abstract or implement the remaining methods\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass PipeOrgan implements SoundMaker, Maintainable\n{\n public function getSound(): string\n {\n return 'dum, dum, dum-dum';\n }\n\n    public function nextService(): \\DateTime\n    {\n        return new \\DateTime('2030-01-01');\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass CacheStatic\n{\n  ❶ private static array $dataItems = [];\n\n  ❷ public static function set(string $key, string $value): void\n    {\n        self::$dataItems[$key] = $value;\n    }\n\n  ❸ public static function get(string $key): ?string\n    {\n        if (self::has($key)) {\n            return self::$dataItems[$key];\n        }\n\n        return NULL;\n    }\n\n  ❹ public static function has(string $key): bool\n    {\n        return array_key_exists($key, self::$dataItems);\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass Application\n{\n    public function run()\n    {\n        $action = filter_input(INPUT_GET, 'action');\n      ❶ $id = filter_input(INPUT_GET, 'id');\n        if (empty($id)) {\n            $id = \"(no id provided)\";\n        }\n\n        // Cache ID from URL\n      ❷ CacheStatic::set('id', $id);\n\n        $mainController = new MainController();\n      ❸ switch ($action) {\n            case 'about':\n                $mainController->aboutUs();\n                break;\n\n            default:\n                $mainController->homepage();\n        }\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass MainController\n{\n    public function homepage()\n    {\n        require_once __DIR__ . '/../templates/homepage.php';\n    }\n\n    public function aboutUs()\n    {\n      ❶ $id = CacheStatic::get('id');\n        require_once __DIR__ . '/../templates/aboutUs.php';\n    }\n}\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>home page</title>\n</head>\n<body>\n<?php\n❶ require_once '_nav.php'\n?>\n\n<h1>home page</h1>\n<p>\n    welcome to home page\n</p>\n</body>\n</html>\n```", "```\n<ul>\n    <li>\n        <a href=\"/\">\n            Home\n        </a>\n    </li>\n    <li>\n        <a href=\"/?action=about\">\n            About Us\n        </a>\n    </li>\n    <li>\n      ❶ <a href=\"/?action=about&id=<?= rand(1,99) ?>\">\n            about (with ID in URL)\n        </a>\n    </li>\n</ul>\n<hr>\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>about page</title>\n</head>\n<body>\n<?php\nrequire_once '_nav.php'\n?>\n\n<h1>about page</h1>\n<p>\n    welcome to about page\n\n    <br>\n  ❶ your ID = <?= $id ?>\n</p>\n</body>\n</html>\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass CacheJson\n{\n    private const CACHE_PATH = __DIR__ . '/../var/cache.json';\n\n  ❶ public function set(string $key, string $value): void\n    {\n        $dataItems = $this->readJson();\n        $dataItems[$key] = $value;\n        $this->writeJson($dataItems);\n    }\n\n  ❷ public function get(string $key): ?string\n    {\n        $dataItems = $this->readJson();\n if ($this->has($key)) {\n            return $dataItems[$key];\n        }\n\n        return NULL;\n    }\n\n  ❸ public function has(string $key): bool\n    {\n        $dataItems = $this->readJson();\n        return array_key_exists($key, $dataItems);\n    }\n\n    private function readJson(): array\n    {\n        $jsonString = file_get_contents(self::CACHE_PATH);\n        if (!$jsonString) {\n            return [];\n        }\n\n        $dataItems = json_decode($jsonString, true);\n        return $dataItems;\n    }\n\n    private function writeJson(array $dataItems): bool\n    {\n        $jsonString = json_encode($dataItems);\n        return file_put_contents(self::CACHE_PATH, $jsonString);\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass Application\n{\n    public function run()\n    {\n        $action = filter_input(INPUT_GET, 'action');\n        $id = filter_input(INPUT_GET, 'id');\n if (empty($id)) {\n            $id = \"(no id provided)\";\n        }\n\n$cache = new CacheJson();\n        $cache->set('id', $id);\n\n --snip--\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass MainController\n{\n public function homepage()\n {\n require_once __DIR__ . '/../templates/homepage.php';\n }\n\n public function aboutUs()\n {\n      ❶$cache = new CacheJson();\n $id = $cache->get('id');\n require_once __DIR__ . '/../templates/aboutUs.php';\n }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\ninterface Cacheable\n{\n    public function reset(): void;\n    public function set(string $key, string $value): void;\n    public function get(string $key): ?string;\n    public function has(string $key): bool;\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass Application\n{\n  ❶ private Cacheable $cache;\n\n  ❷ public function __construct(Cacheable $cache)\n    {\n        $this->cache = $cache;\n        $this->cache->reset();\n    }\n\n  ❸ public function getCache(): Cacheable\n    {\n        return $this->cache;\n    }\n\n public function run()\n {\n $action = filter_input(INPUT_GET, 'action');\n $id = filter_input(INPUT_GET, 'id');\n if (empty($id)) {\n $id = \"(no id provided)\";\n }\n\n      ❹ $this->cache->set('id', $id);\n\n      ❺ $mainController = new MainController($this);\n switch ($action) {\n case 'about':\n $mainController->aboutUs();\n break;\n\n default:\n $mainController->homepage();\n }\n }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass MainController\n{\n  ❶ private Application $application;\n\n  ❷ public function __construct(Application $application)\n    {\n        $this->application = $application;\n    }\n\n public function homepage()\n {\n require_once __DIR__ . '/../templates/homepage.php';\n }\n\n public function aboutUs()\n {\n      ❸ $cache = $this->application->getCache();\n $id = $cache->get('id');\n require_once __DIR__ . '/../templates/aboutUs.php';\n }\n}\n```", "```\n<?php\nrequire_once __DIR__ . '/../vendor/autoload.php';\n\nuse Mattsmithdev\\Application;\nuse Mattsmithdev\\CacheJson;\nuse Mattsmithdev\\CacheStatic;\n\n$cache1 = new CacheJson();\n$cache2 = new CacheStatic();\n\napp = new Application($cache2);\n$app->run();\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass CacheStatic implements Cacheable\n{\n private static array $dataItems = [];\n\n  ❶ public function reset(): void\n    {\n        self::$dataItems = [];\n    }\n\n    public function set(string $key, string $value): void\n {\n self::$dataItems[$key] = $value;\n }\n\n    public function get(string $key): ?string\n {\n if (self::has($key)) {\n return self::$dataItems[$key];\n }\n\n return NULL;\n }\n\n    public function has(string $key): bool\n {\n return array_key_exists($key, self::$dataItems);\n }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass CacheJson implements Cacheable\n{\n private const CACHE_PATH = __DIR__ . '/../var/cache.json';\n\n  ❶ public function reset(): void\n    {\n        $directory = dirname(self::CACHE_PATH);\n        $this->makeDirIfNotExists($directory);\n        $this->makeEmptyFile(self::CACHE_PATH);\n    }\n\n    private function makeDirIfNotExists(string $directory): bool\n    {\n        return is_dir($directory) || mkdir($directory);\n    }\n\n    private function makeEmptyFile(string $path): bool\n    {\n        return file_put_contents($path, '');\n    }\n\n public function set(string $key, string $value): void\n--snip--\n```", "```\n<?php\nnamespace Mattsmithdev;\n\ntrait FileSystemTrait\n{\n private function makeDirIfNotExists(string $directory): bool\n {\n return is_dir($directory) || mkdir($directory);\n }\n\n private function makeEmptyFile(string $path): bool\n {\n return file_put_contents($path, '');\n }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\ntrait JsonFileTrait\n{\n private function readJson(string $path): array\n {\n $jsonString = file_get_contents($path);\n if (!$jsonString) {\n return [];\n }\n\n $dataItems = json_decode($jsonString, true);\n return $dataItems;\n }\n\n private function writeJson(string $path, array $dataItems): bool\n {\n $jsonString = json_encode($dataItems);\n return file_put_contents($path, $jsonString);\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass CacheJson implements Cacheable\n{\n  ❶ use FileSystemTrait, JsonFileTrait;\n\n private const CACHE_PATH = __DIR__ . '/../var/cache.json';\n\n  ❷ public function reset(): void\n {\n $directory = dirname(self::CACHE_PATH);\n $this->makeDirIfNotExists($directory);\n $this->makeEmptyFile(self::CACHE_PATH);\n }\n\n public function set(string $key, string $value): void\n {\n $dataItems = $this->readJson(self::CACHE_PATH);\n $dataItems[$key] = $value;\n $this->writeJson(self::CACHE_PATH, $dataItems);\n }\n\n public function get(string $key): ?string\n {\n $dataItems = $this->readJson(self::CACHE_PATH);\n if($this->has($key)){\n return $dataItems[$key];\n }\n\n return NULL;\n }\n\n public function has(string $key): bool\n {\n $dataItems = $this->readJson(self::CACHE_PATH);\n return array_key_exists($key, $dataItems);\n }\n}\n```", "```\nuse TraitA, TraitB {\n    TraitA::printHello insteadof TraitB;\n```", "```\nBook \"Life of Pi\"\n  price (excl. tax) = $20.00\n  price (incl. tax) = $21.00\n```", "```\nBook \"Life of Pi\"\n  price (excl. tax) = $20.00\n  price (incl. tax) = $21.00\n\nDonut \"strawberry icing\"\n  price (excl. tax) = $10.00\n  price (incl. tax) = $10.70\n```"]