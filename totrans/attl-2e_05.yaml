- en: '5'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'MORE FUN WITH AUTOCONF: CONFIGURING USER OPTIONS'
  prefs: []
  type: TYPE_NORMAL
- en: '*Hope is not the conviction that something will turn out well, but the certainty
    that something makes sense, regardless of how it turns out.'
  prefs: []
  type: TYPE_NORMAL
- en: —Václav Havel*, Disturbing the Peace
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In [Chapter 4](ch04.xhtml), we discussed the essentials of Autoconf—how to bootstrap
    a new or existing project and how to understand some of the basic aspects of *configure.ac*
    files. In this chapter, we cover some of the more complex Autoconf macros. We’ll
    begin by discussing how to substitute our own variables into template files (for
    example, *Makefile.in*) and how to define our own preprocessor definitions from
    within the configuration script. Throughout this chapter, we’ll continue to develop
    functionality in the Jupiter project by adding important checks and tests. We’ll
    cover the all-important `AC_OUTPUT` macro, and we’ll conclude by discussing the
    application of user-defined project configuration options as specified in the
    *configure.ac* file.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to all this, I’ll present an analysis technique you can use to decipher
    the inner workings of macros. Using the somewhat complex `AC_CHECK``_PROG` macro
    as an example, I’ll show you some ways to find out what’s going on under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: Substitutions and Definitions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We’ll begin this chapter by discussing three of the most important macros in
    the Autoconf suite: `AC_SUBST` and `AC_DEFINE`, along with the latter’s twin brother,
    `AC_DEFINE_UNQUOTED`.'
  prefs: []
  type: TYPE_NORMAL
- en: These macros provide the primary mechanisms for communication between the configuration
    process and the build and execution processes. Values that are *substituted* into
    generated files provide configuration information to the build process, while
    values defined in preprocessor variables provide configuration information at
    build time to the compiler and at runtime to the built programs and libraries.
    As a result, it’s well worth becoming thoroughly familiar with `AC_SUBST` and
    `AC_DEFINE`.
  prefs: []
  type: TYPE_NORMAL
- en: '*AC_SUBST*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can use `AC_SUBST` to extend the variable substitution functionality that’s
    such an integral part of Autoconf. Every Autoconf macro that has anything to do
    with substitution variables ultimately calls this macro to create the substitution
    variables from existing shell variables. Sometimes the shell variables are inherited
    from the environment; other times, higher-level macros set the shell variables
    as part of their functionality before calling `AC_SUBST`. The signature of this
    macro is rather trivial (note that the square brackets in this prototype represent
    optional arguments, not Autoconf quotes):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you choose to omit any trailing optional parameters when invoking M4 macros,
    you may also omit the trailing commas.^([1](footnote.xhtml#ch05fn1)) However,
    if you omit any arguments from the middle of the list, you must provide the commas
    as placeholders for the missing arguments.*'
  prefs: []
  type: TYPE_NORMAL
- en: The first argument, *`shell_var`*, represents a shell variable whose value you
    wish to substitute into all files generated by `config.status` from templates.
    The optional second parameter is the value assigned to the variable. If it isn’t
    specified, the shell variable’s current value will be used, whether it’s inherited
    or set by some previous shell code.
  prefs: []
  type: TYPE_NORMAL
- en: The substitution variable will have the same name as the shell variable, except
    that it will be bracketed with at signs (`@`) in the template files. Thus, a shell
    variable named `my_var` would become the substitution variable reference `@my_var@`,
    and you could use it in any template file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Calls to `AC_SUBST` in *configure.ac* should not be made conditionally; that
    is, they should not be called within conditional shell statements like `if`-`then`-`else`
    constructs. The reason becomes clear when you carefully consider the purpose of
    `AC_SUBST`: you’ve already hardcoded substitution variable references into your
    template files, so you’d better use `AC_SUBST` for each variable unconditionally,
    or else your output files will retain the variable references rather than the
    values that should have been substituted.'
  prefs: []
  type: TYPE_NORMAL
- en: '*AC_DEFINE*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `AC_DEFINE` and `AC_DEFINE_UNQUOTED` macros define C-preprocessor macros,
    which can be simple or function-like macros. These are either defined in the *config.h.in*
    template (if you use `AC_CONFIG_HEADERS`) or passed on the compiler command line
    (via the `@DEFS@` substitution variable) in *Makefile.in* templates. Recall that
    if you don’t write *config.h.in* yourself, `autoheader` will write it based on
    calls to these macros in your *configure.ac* file.
  prefs: []
  type: TYPE_NORMAL
- en: 'These two macro names actually represent four different Autoconf macros. Here
    are their prototypes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The difference between the normal and the `UNQUOTED` versions of these macros
    is that the normal versions use, verbatim, the specified value as the value of
    the preprocessor macro. The `UNQUOTED` versions perform shell expansion on the
    *`value`* argument, and they use the result as the value of the preprocessor macro.
    Thus, you should use `AC_DEFINE_UNQUOTED` if the value contains shell variables
    that you want `configure` to expand. (Setting a C-preprocessor macro in a header
    file to an unexpanded shell variable makes no sense, because neither the C compiler
    nor the preprocessor will know what to do with it when the source code is compiled.)
  prefs: []
  type: TYPE_NORMAL
- en: The difference between the single- and multi-argument versions lies in the way
    the preprocessor macros are defined. The single-argument versions simply guarantee
    that the macro is *defined* in the preprocessor namespace, while the multi-argument
    versions ensure that the macro is defined with a specific value.
  prefs: []
  type: TYPE_NORMAL
- en: The optional third parameter, *`description`*, tells `autoheader` to add a comment
    for this macro to the *config.h.in* template. (If you don’t use `autoheader`,
    it makes no sense to pass a description here—hence, its optional status.) If you
    wish to define a preprocessor macro without a value and provide a *`description`*,
    you should use the multi-argument versions of these macros but leave the `value`
    argument empty. Another option is to use `AH_TEMPLATE`—an `autoheader`-specific
    macro—which does the same thing as `AC_DEFINE` when a *`description`* is given
    but no *`value`* is required.
  prefs: []
  type: TYPE_NORMAL
- en: Checking for Compilers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `AC_PROG_CC` macro ensures that the user’s system has a working C-language
    compiler. Here’s the prototype for this macro:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If your code requires a particular flavor or brand of C compiler, you can pass
    a whitespace-separated list of program names in this argument. For example, if
    you use `AC_PROG_CC([cc cl gcc]`), the macro expands into shell code that searches
    for `cc`, `cl`, and `gcc`, in that order. Usually, the optional argument is omitted,
    allowing the macro to find the best compiler option available on the user’s system.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll recall from “An Even Quicker Start with `autoscan`” on [page 95](ch04.xhtml#page_95)
    that when `autoscan` noticed C source files in the directory tree, it inserted
    a no-argument call to this macro into Jupiter’s *configure.scan* file. [Listing
    5-1](ch05.xhtml#ch05ex1) reproduces the relevant portion of the generated *configure.scan*
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-1:* configure.scan: *Checking for compilers and other programs*'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If the source files in Jupiter’s directory tree had been suffixed with* .cc,
    .cxx, *or* .C *(all common extensions for C++ source files), *`autoscan`* would
    have instead inserted a call to *`AC_PROG_CXX`*.*'
  prefs: []
  type: TYPE_NORMAL
- en: The `AC_PROG_CC` macro looks for `gcc` and then `cc` in the system search path.
    If it doesn’t find either, it looks for other C compilers. When it finds a compatible
    compiler, the macro sets a well-known variable, `CC`, to the full path of the
    program, with options for portability as needed, unless the user has already set
    `CC` in the environment or on the `configure` command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `AC_PROG_CC` macro also defines the following Autoconf substitution variables,
    some of which you may recognize as *user variables* (listed in [Table 3-2](ch03.xhtml#ch03tab2)
    on [page 71](ch03.xhtml#page_71)):'
  prefs: []
  type: TYPE_NORMAL
- en: '`@CC@` (full path of compiler)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@CFLAGS@` (for example, `-g -O2` for `gcc`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@CPPFLAGS@` (empty by default)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@EXEEXT@` (for example, *.exe*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@OBJEXT@` (for example, *o*)^([2](footnote.xhtml#ch05fn2))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AC_PROG_CC` configures these substitution variables, but unless you use them
    in your *Makefile.in* templates, you’re just wasting time running `./configure`.
    Conveniently, we’re already using them in our *Makefile.in* templates, because
    earlier in the Jupiter project, we added them to our compiler command line and
    then added a default value for `CFLAGS` that the user could override on the `make`
    command line.'
  prefs: []
  type: TYPE_NORMAL
- en: The only thing left to do is ensure that `config.status` substitutes values
    for these variable references. [Listing 5-2](ch05.xhtml#ch05ex2) shows the relevant
    portions of the *src* directory *Makefile.in* template and the changes necessary
    to make this happen.
  prefs: []
  type: TYPE_NORMAL
- en: Git tag 5.0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-2:* src/Makefile.in: *Using Autoconf compiler and flag substitution
    variables*'
  prefs: []
  type: TYPE_NORMAL
- en: Checking for Other Programs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Immediately following the call to `AC_PROG_CC` (refer to [Listing 5-1](ch05.xhtml#ch05ex1))
    is a call to `AC_PROG_INSTALL`. All of the `AC_PROG_*` macros set (and then substitute,
    using `AC_SUBST`) various environment variables that point to the located utilities.
    `AC_PROG_INSTALL` does the same thing for the `install` utility. To use this check,
    you need to use the associated Autoconf substitution variables in your *Makefile.in*
    templates, just as we did earlier with `@CC@`, `@CFLAGS@`, and `@CPPFLAGS@`. [Listing
    5-3](ch05.xhtml#ch05ex3) illustrates these changes.
  prefs: []
  type: TYPE_NORMAL
- en: Git tag 5.1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-3:* src/Makefile.in: *Substituting the `install` utility in your
    Makefile.in templates*'
  prefs: []
  type: TYPE_NORMAL
- en: The value of `@INSTALL@` is obviously the path of the located installation program.
    The value of `@INSTALL_DATA@` is `${INSTALL} -m 0644`. Based on this, you might
    think that the values of `@INSTALL_PROGRAM@` and `@INSTALL_SCRIPT@` would be something
    like `${INSTALL} -m 0755`, but they’re not. These values are set simply to `${INSTALL}`.^([3](footnote.xhtml#ch05fn3))
  prefs: []
  type: TYPE_NORMAL
- en: You might also need to test for other important utility programs, including
    `lex`, `yacc`, `sed`, and `awk`. If your program requires one or more of these
    tools, you can add invocations of `AC_PROG_LEX`, `AC_PROG_YACC`, `AC_PROG_SED`,
    or `AC_PROG_AWK`. If it detects files in your project’s directory tree with *.yy*
    or *.ll* extensions, `autoscan` will add invocations of `AC_PROG_YACC` and `AC_PROG_LEX`
    to *configure.scan*.
  prefs: []
  type: TYPE_NORMAL
- en: You can check for about a dozen different programs using these more specialized
    macros. If a program check fails, the resulting `configure` script will fail with
    a message indicating that the required utility could not be found and that the
    build cannot continue until it has been properly installed.
  prefs: []
  type: TYPE_NORMAL
- en: The program and compiler checks cause `autoconf` to substitute specially named
    variables into template files. You can find the names of the variables for each
    macro in the *GNU Autoconf Manual*. You should use these `make` variables in commands
    within your *Makefile.in* templates to invoke the tools they represent. The Autoconf
    macros will set the values of these variables according to the tools they find
    installed on the user’s system, *if the user has not already set them in the environment*.
  prefs: []
  type: TYPE_NORMAL
- en: This is a key aspect of Autoconf-generated `configure` scripts—the user can
    *always* override anything `configure` will do to the environment by exporting
    or setting an appropriate variable before executing `configure`.^([4](footnote.xhtml#ch05fn4))
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if the user chooses to build with a specific version of `bison`
    installed in the home directory, they could enter the following command in order
    to ensure that `$(YACC)` refers to the correct version of `bison` and that the
    shell code `AC_PROG_YACC` generates does little more than substitute the existing
    value of `YACC` for `@YACC@` in your *Makefile.in* templates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Passing the variable setting to *`configure`* as a parameter is functionally
    similar to setting the variable for the *`configure`* process on the command line
    in the shell environment (for example, *`YACC="$HOME/bin/bison -y" ./configure`*).
    The advantage of using the syntax given in this example is that *`config.status
    --recheck`* can then track the value and properly re-execute *`configure`* from
    the makefile with the options that were originally given to it. Thus, you should
    always use the parameter syntax, rather than the shell environment syntax, to
    set variables for *`configure`*. For ways to enforce the use of this syntax, see
    the documentation for *`AC_ARG_VAR`* in the Autoconf manual.*'
  prefs: []
  type: TYPE_NORMAL
- en: To check for the existence of a program not covered by these more specialized
    macros, you can use the generic `AC_CHECK_PROG` macro or write your own special-purpose
    macro (see [Chapter 16](ch16.xhtml)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The key points to take away here are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AC_PROG_*` macros check for the existence of programs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If they find a program, a substitution variable is created.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should use these substitution variables in your *Makefile.in* templates
    to execute associated utilities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Common Problem with Autoconf
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We should take this opportunity to address a particular problem developers
    new to the Autotools consistently encounter. Here’s the formal definition of `AC_CHECK_PROG`,
    as you will find it in the *GNU Autoconf Manual*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Check whether program `prog-to-check-for` exists in *`path`*. If it is found,
    set *`variable`* to *`value-if-found`*, otherwise to *`value-if-not-found`*, if
    given. Always pass over *`reject`* (an absolute filename) even if it is the first
    found in the search path; in that case, set *`variable`* using the absolute filename
    of the *`prog-to-check-for`* found that is not *`reject`*. If *`variable`* was
    already set, do nothing. Calls *`AC_SUBST`* for *`variable`*. The result of this
    test can be overridden by setting the *`variable`* variable or the cache variable
    *`ac_cv_prog_variable`*.^([5](footnote.xhtml#ch05fn5))
  prefs: []
  type: TYPE_NORMAL
- en: 'This is pretty dense language, but after a careful reading, you can extract
    the following from this description:'
  prefs: []
  type: TYPE_NORMAL
- en: If *`prog-to-check-for`* is found in the system search path, then *`variable`*
    is set to *`value-if-found`*; otherwise, it’s set to *`value-if-not-found`*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If *`reject`* is specified (as a full path), and it’s the same as the program
    found in the system search path in the previous step, then skip it and continue
    to the next matching program in the system search path.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If *`reject`* is found first in *`path`* and then another match (other than
    *`reject`*) is found, set *`variable`* to the absolute path name of the second
    (non-*`reject`*) match.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the user has already set *`variable`* in the environment, then *`variable`*
    is left untouched (thereby allowing the user to override the check by setting
    *`variable`* before running `configure`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AC_SUBST` is called on *`variable`* to make it an Autoconf substitution variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Upon first reading this description, there appears to be a conflict: we see
    in the first item that *`variable`* will be set to one of two specified values,
    based on whether or not *`prog-to-check-for`* is found in the system search path.
    But then we see in the third item that *`variable`* will be set to the full path
    of some program if *`reject`* is found first and skipped.'
  prefs: []
  type: TYPE_NORMAL
- en: Discovering the real functionality of `AC_CHECK_PROG` is as easy as reading
    a little shell script. While you could refer to the definition of `AC_CHECK_PROG`
    in Autoconf’s *programs.m4* macro file, you’ll be one level removed from the actual
    shell code that performs the check. Wouldn’t it be better to just look at the
    shell script that `AC_CHECK_PROG` generates? We’ll use Jupiter’s *configure.ac*
    file to play with this concept. Temporarily modify your *configure.ac* file according
    to the changes highlighted in [Listing 5-4](ch05.xhtml#ch05ex4).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-4: A first attempt at using `AC_CHECK_PROG`*'
  prefs: []
  type: TYPE_NORMAL
- en: Now execute `autoconf`, open the resulting `configure` script, and search for
    `_DEBUG_START_`.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The *`_DEBUG_START_`* and *`_DEBUG_END_`* strings are known as picket fences.
    I added these to* configure.ac *for the sole purpose of helping me find the beginning
    and end of the shell code generated by the *`AC_CHECK_PROG`* macro. I chose these
    names in particular because you’re not likely to find them anywhere else in the
    generated *`configure`* script.^([6](footnote.xhtml#ch05fn6))*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 5-5](ch05.xhtml#ch05ex5) shows the portion of `configure` this macro
    generates.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-5: A portion of `configure` generated by `AC_CHECK_PROG`*'
  prefs: []
  type: TYPE_NORMAL
- en: The opening comment at ➊ in this shell script is a clue that `AC_CHECK_PROG`
    has some undocumented functionality. Apparently, you may pass in arguments along
    with the program name in the *`prog-to-check-for`* parameter. Shortly, we’ll look
    at a situation in which you might want to do that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Farther down in the script at ➋, you can see that the *`reject`* parameter
    was added into the mix in order to allow `configure` to search for a particular
    version of a tool. From the code at ➌, we can see that our `bash_var` variable
    can have three different values: either empty if the requested program is not
    found in the search path, the program specified if it’s found, or the full path
    of the program specified if *`reject`* is found first.'
  prefs: []
  type: TYPE_NORMAL
- en: Where do you use *`reject`*? Well, for instance, on Solaris systems with proprietary
    Sun tools installed, the default C compiler is often the Solaris C compiler. But
    some software may require the use of the GNU C compiler instead. As maintainers,
    we don’t know which compiler will be found first in a user’s search path. `AC_CHECK_PROG`
    allows us to ensure that `gcc` is used with a full path if another C compiler
    is found first in the search path.
  prefs: []
  type: TYPE_NORMAL
- en: As I mentioned earlier, M4 macros are aware of the fact that arguments are given,
    empty, or missing, and they do different things based on these conditions. Many
    of the standard Autoconf macros are written to take full advantage of empty or
    unspecified optional arguments and generate entirely different shell code in each
    of these conditions. Autoconf macros may also optimize the generated shell code
    for these different conditions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given what we now know, we probably should have called `AC_CHECK_PROG` in this
    manner instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You can see in this example that the manual is technically accurate. If *`reject`*
    isn’t specified and `bash` is found in the system path, then `bash_shell` will
    be set to `bash -x`. If `bash` is *not* found in the system path, then `bash_shell`
    will be set to the empty string. If, on the other hand, *`reject`* *is* specified
    and the undesired version of `bash` is found *first* in the path, then `bash_shell`
    will be set to the full path of the *next* version found in the path, along with
    the originally specified argument (`-x`). The reason the macro uses the full path
    in this case is to make sure that `configure` will avoid executing the version
    that was found first in the path—*`reject`*. The rest of the configuration script
    can now use the `bash_shell` variable to run the desired Bash shell, as long as
    it doesn’t test out empty.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you’re following along in your own code, don’t forget to remove the temporary
    code from [Listing 5-4](ch05.xhtml#ch05ex4) from your* configure.ac *file*.'
  prefs: []
  type: TYPE_NORMAL
- en: Checks for Libraries and Header Files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The decision of whether or not to use an external library in a project is a
    tough one. On one hand, you want to reuse existing code to provide required functionality
    instead of writing it yourself. Reuse is one of the hallmarks of the open source
    software world. On the other hand, you don’t want to depend on functionality that
    may not exist on all target platforms or that may require significant porting
    in order to make the libraries you need available where you need them.
  prefs: []
  type: TYPE_NORMAL
- en: Occasionally, library-based functionality can differ in minor ways between platforms.
    Although the functionality may be essentially equivalent, the libraries may have
    different package names or different API signatures. The POSIX threads (*pthread*)
    library, for example, is similar in functionality to many native threading libraries,
    but the libraries’ APIs are usually different in minor ways, and their package
    and library names are almost always different. Consider what would happen if we
    tried to build a multithreaded project on a system that didn’t support *pthread*;
    in a case like this, you might want to use the *libthreads* library on Solaris
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: Autoconf library selection macros allow generated configuration scripts to intelligently
    select the libraries that provide the necessary functionality, even if those libraries
    are named differently between platforms. To illustrate the use of the Autoconf
    library selection macros, we’ll add some trivial (and fairly contrived) multithreading
    capabilities to the Jupiter project that will allow `jupiter` to print its message
    using a background thread. We’ll use the *pthread* API as our base threading model.
    In order to accomplish this with our Autoconf-based configuration script, we need
    to add the *pthread* library to our project build system.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The proper use of multithreading requires the definition of additional substitution
    variables containing appropriate flags, libraries, and definitions. The *`AX_PTHREAD`*
    macro does all of this for you. You can find the documentation for *`AX_PTHREAD`*
    at the Autoconf Macro Archive website.^([7](footnote.xhtml#ch05fn7)) See “Doing
    Threads the Right Way” on [page 384](ch14.xhtml#page_384) for examples of using
    *`AX_PTHREAD`*.*'
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s tackle the changes to the source code. We’ll modify *main.c* so
    that the message is printed by a secondary thread, as shown in [Listing 5-6](ch05.xhtml#ch05ex6).
  prefs: []
  type: TYPE_NORMAL
- en: Git tag 5.2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-6:* src/main.c: *Adding multithreading to the Jupiter project source
    code*'
  prefs: []
  type: TYPE_NORMAL
- en: This is clearly a ridiculous use of a thread; nevertheless, it *is* the prototypical
    form of thread usage. Consider a hypothetical situation in which the background
    thread performs some long calculation and `main` is doing other things while `print_it`
    is working. On a multiprocessor machine, using a thread in this manner could literally
    double a program’s throughput.
  prefs: []
  type: TYPE_NORMAL
- en: Now all we need is a way to determine which libraries should be added to the
    compiler (linker) command line. If we weren’t using Autoconf, we’d just add the
    library to our linker command line in the makefile, as shown in [Listing 5-7](ch05.xhtml#ch05ex7).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-7: Manually adding the* pthread *library to the compiler command
    line*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, we’ll use the Autoconf-provided `AC_SEARCH_LIBS` macro, an enhanced
    version of the basic `AC_CHECK_LIB` macro. The `AC_SEARCH_LIBS` macro allows us
    to test for required functionality within a list of libraries. If the functionality
    exists in one of the specified libraries, an appropriate command line option is
    added to the `@LIBS@` substitution variable, which we would then use in a *Makefile.in*
    template on the compiler (linker) command line. Here is the formal definition
    of `AC_SEARCH_LIBS` from the *GNU Autoconf Manual*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Search for a library defining *`function`* if it’s not already available. This
    equates to calling `AC_LINK_IFELSE([AC_LANG_CALL([],` `[`*`function`*`])])` first
    with no libraries, then for each library listed in *`search-libs`*.
  prefs: []
  type: TYPE_NORMAL
- en: Add `-l`*`library`* to `LIBS` for the first library found to contain *`function`*,
    and run *`action-if-found`*. If *`function`* is not found, run *`action-if-not-found`*.
  prefs: []
  type: TYPE_NORMAL
- en: 'If linking with *`library`* results in unresolved symbols that would be resolved
    by linking with additional libraries, give those libraries as the *`other-libraries`*
    argument, separated by spaces: for example, `-lXt -lX11`. Otherwise, this macro
    fails to detect that *`function`* is present, because linking the test program
    always fails with unresolved symbols.'
  prefs: []
  type: TYPE_NORMAL
- en: The result of this test is cached in the `ac_cv_search` *`function`* variable
    as `none required` if *`function`* is already available, as `no` if no library
    containing *`function`* was found, otherwise as the `-l`*`library`* option that
    needs to be prepended to `LIBS`.^([8](footnote.xhtml#ch05fn8))
  prefs: []
  type: TYPE_NORMAL
- en: Can you see why the generated configuration script is so large? When you pass
    a particular function in a call to `AC_SEARCH_LIBS`, linker command line arguments
    are added to a substitution variable called `@LIBS@`. These arguments ensure that
    you will link with a library that contains the function passed in. If multiple
    libraries are listed in the second parameter, separated by whitespace, `configure`
    will determine which of these libraries are available on your user’s system and
    use the most appropriate one.
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 5-8](ch05.xhtml#ch05ex8) shows how to use `AC_SEARCH_LIBS` in Jupiter’s
    *configure.ac* file to find the library that contains the `pthread_create` function.
    `AC_SEARCH_LIBS` won’t add anything to the `@LIBS@` variable if it doesn’t find
    `pthread_create` in the *pthread* library.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-8:* configure.ac: *Using `AC_SEARCH_LIBS` to check for the* pthread
    *library on the system*'
  prefs: []
  type: TYPE_NORMAL
- en: As we’ll discuss in detail in [Chapter 7](ch07.xhtml), naming patterns for libraries
    differ among systems. For example, some systems name libraries *lib*basename*.so*,
    while others use *lib*basename*.sa* or *lib*basename*.a*. Cigwin-based systems
    generate libraries named *cig*basename*.dll*. `AC_SEARCH_LIBS` addresses this
    situation (quite elegantly) by using the compiler to calculate the actual name
    of the library from its *basename*; it does this by attempting to link a small
    test program with the requested function from the test library. Only `-l`*`basename`*
    is passed on the compiler command line—a near-universal convention among Unix
    compilers.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll have to modify *src/Makefile.in* again in order to properly use the now-populated
    `@LIBS@` variable, as shown in [Listing 5-9](ch05.xhtml#ch05ex9).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-9:* src/Makefile.in: *Using the `@LIBS@` substitution variable*'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*I added *`$(LIBS)`* after the source files on the compiler command line because
    the linker cares about object file order—it searches files for required functions
    in the order they are specified on the command line.*'
  prefs: []
  type: TYPE_NORMAL
- en: I want *main.c* to be the primary source of object code for `jupiter`, so I’ll
    continue to add additional objects, including libraries, to the command line after
    this file.
  prefs: []
  type: TYPE_NORMAL
- en: '*Is It Right or Just Good Enough?*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: At this point, we’ve ensured that our build system will properly use *pthread*
    on most systems.^([9](footnote.xhtml#ch05fn9)) If our system needs a particular
    library, that library’s name will be added to the `@LIBS@` variable and then subsequently
    used on the compiler command line. But we’re not done yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'This system *usually* works fine, but it still fails in corner cases. Because
    we want to provide an excellent user experience, we’ll take Jupiter’s build system
    to the next level. In doing this, we need to make a design decision: in case `configure`
    fails to locate a *pthread* library on a user’s system, should we fail the build
    process or build a `jupiter` program without multithreading?'
  prefs: []
  type: TYPE_NORMAL
- en: If we choose to fail the build, the user will notice, because the build will
    stop with an error message (though it may not be a very friendly one—either the
    compile or link process will fail with a cryptic error message about a missing
    header file or an undefined symbol). On the other hand, if we choose to build
    a single-threaded version of `jupiter`, we’ll need to display some clear message
    that the program is being built without multithreading functionality and explain
    why.
  prefs: []
  type: TYPE_NORMAL
- en: One potential problem is that some users’ systems may have a *pthread* shared
    library installed but not the *pthread.h* header file—most likely because the
    *pthread* executable (shared-library) package was installed but the developer
    package wasn’t. Shared libraries are often packaged independently of static libraries
    and header files, and while executables are installed as part of a dependency
    chain for higher-level applications, developer packages are typically installed
    directly by a user.^([10](footnote.xhtml#ch05fn10)) For this reason, Autoconf
    provides macros to test for the existence of both libraries and header files.
    We can use the `AC_CHECK_HEADERS` macro to ensure the existence of a particular
    header file.
  prefs: []
  type: TYPE_NORMAL
- en: Autoconf checks are very thorough. They usually ensure not only that a file
    exists but also that the file is the correct one, because they allow you to specify
    assertions about the file that the macro then verifies. The `AC_CHECK_HEADERS`
    macro doesn’t just scan the filesystem for the requested header. Like `AC_SEARCH_LIBS`,
    the `AC_CHECK_HEADERS` macro builds a short test program in the appropriate language
    and then compiles it to ensure that the compiler can both find and use the file.
    In essence, Autoconf macros try to test not just for the existence of specific
    features but for the functionality required from those features.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `AC_CHECK_HEADERS` macro is defined in the *GNU Autoconf Manual* as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: For each given system header file *`header-file`* in the blank-separated argument
    list that exists, define `HAVE_`*`header-file`* (in all capitals). If *`action-if-found`*
    is given, it is additional shell code to execute when one of the header files
    is found. You can give it a value of `break` to break out of the loop on the first
    match. If *`action-if-not-found`* is given, it is executed when one of the header
    files is not found.
  prefs: []
  type: TYPE_NORMAL
- en: '*`includes`* is interpreted as in `AC_CHECK_HEADER`, in order to choose the
    set of preprocessor directives supplied before the header under test.^([11](footnote.xhtml#ch05fn11))'
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `AC_CHECK_HEADERS` is called only with a list of desired header files
    in the first argument. The remaining arguments are optional and are not often
    used because the macro works pretty well without them.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll add a check for the *pthread.h* header file to *configure.ac* using `AC_CHECK_HEADERS`.
    As you may have noticed, *configure.ac* already calls `AC_CHECK_HEADERS` looking
    for *stdlib.h*. `AC_CHECK_HEADERS` accepts a list of filenames, so we’ll just
    add *pthread.h* to the list, using a space to separate the filenames, as shown
    in [Listing 5-10](ch05.xhtml#ch05ex10).
  prefs: []
  type: TYPE_NORMAL
- en: Git tag 5.3
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-10:* configure.ac: *Adding* pthread.h *to the `AC_CHECK_HEADERS`
    macro*'
  prefs: []
  type: TYPE_NORMAL
- en: In order to make this package available to as many people as possible, we’ll
    use the dual-mode build approach, which will allow us to provide at least *some*
    form of the `jupiter` program to users without a *pthread* library. In order to
    accomplish this, we need to add some conditional preprocessor statements to *src/main.c*,
    as shown in [Listing 5-11](ch05.xhtml#ch05ex11).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-11:* src/main.c: *Adding conditional code, based on the existence
    of* pthread.h'
  prefs: []
  type: TYPE_NORMAL
- en: In this version of *main.c*, we’ve added a conditional check for the header
    file. If the shell script generated by `AC_CHECK_HEADERS` locates the *pthread.h*
    header file, the `HAVE_PTHREAD_H` macro will be defined with the value `1` in
    the user’s *config.h* file. If the shell script doesn’t find the header file,
    the original `#undef` statement will be left commented out in *config.h*. Because
    we rely on these definitions, we also need to include *config.h* at the top of
    *main.c*.
  prefs: []
  type: TYPE_NORMAL
- en: If you choose not to use the `AC_CONFIG_HEADERS` macro in *configure.ac*, then
    `@DEFS@` will contain all the definitions generated by all the macros that call
    `AC_DEFINE`. In this example, we’ve used `AC_CONFIG_HEADERS`, so *config.h.in*
    will contain most of these definitions, and `@DEFS@` will only contain `HAVE_CONFIG_H`,
    which we don’t actually use.^([12](footnote.xhtml#ch05fn12)) The *config.h.in*
    template method significantly shortens the compiler command line (and also makes
    it simple to take a snapshot of the template and modify it by hand for non-Autotools
    platforms). [Listing 5-12](ch05.xhtml#ch05ex12) shows the required changes to
    the *src/Makefile.in* template.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-12:* src/Makefile.in: *Adding the use of `@DEFS@` to the src-level
    makefile*'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*I’ve added *`$(DEFS)`* before *`$(CPPFLAGS)`*, giving the end user the option
    to override any of my policy decisions on the command line*.'
  prefs: []
  type: TYPE_NORMAL
- en: We now have everything we need to conditionally build the `jupiter` program.
    If the user’s system has *pthread* functionality installed, the user will automatically
    build a version of `jupiter` that uses multiple threads of execution; otherwise,
    they’ll have to settle for serialized execution. The only thing left to do is
    to add some code to *configure.ac* such that if `configure` can’t find the *pthread*
    library, it will display a message indicating that it will build a program that
    uses serialized execution.
  prefs: []
  type: TYPE_NORMAL
- en: Now, consider the unlikely scenario of a user who has the header file installed
    but doesn’t have the library. For example, if the user executes `./configure`
    with `CPPFLAGS=-I/usr/local/include` but neglects to add `LDFLAGS=-L/usr/local/lib`,
    it will seem to `configure` that the header is available but the library is missing.
    This condition is easily remedied by simply skipping the header file check entirely
    if `configure` can’t find the library. [Listing 5-13](ch05.xhtml#ch05ex13) shows
    the required changes to *configure.ac*.
  prefs: []
  type: TYPE_NORMAL
- en: Git tag 5.4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-13:* configure.ac: *Adding code to indicate that multithreading
    is not available during configuration*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, when we run `./bootstrap.sh` and `./configure`, we’ll see some additional
    output (highlighted here):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If a user’s system is missing the *pthread.h* header file, for instance, they’d
    see different output. To emulate this for testing purposes, we can use a trick
    involving Autoconf cache variables. By presetting the cache variable that represents
    the presence of the *pthread.h* header to `no`, we can trick `configure` into
    not even looking for *pthread.h* because it assumes the search has already been
    done if the cache variable is already set. Let’s try it out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Had we chosen to fail the build if the *pthread.h* header file or the *pthread*
    libraries were not found, then the source code would have been simpler; there
    would have been no need for conditional compilation. In that case, we could change
    *configure.ac* to look like [Listing 5-14](ch05.xhtml#ch05ex14).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-14: Failing the build if no* pthread *library is found*'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Autoconf macros generate shell code that checks for the existence of system
    features and sets variables based on these tests. However, it’s up to you as maintainer
    to add shell code to* configure.ac *that makes functional decisions based on the
    contents of the resulting variables*.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Printing Messages*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the preceding examples, we used a few Autoconf macros to display messages
    to the user during configuration: `AC_MSG_WARN` and `AC_MSG_ERROR`. Here are the
    prototypes for the various `AC_MSG_*` macros provided by Autoconf:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `AC_MSG_CHECKING` and `AC_MSG_RESULT` macros are designed to be used together.
    The `AC_MSG_CHECKING` macro prints a line indicating that it’s checking for a
    particular feature, but it doesn’t print a carriage return at the end of this
    line. Once the feature has been found (or not found) on the user’s machine, the
    `AC_MSG_RESULT` macro prints the result at the end of the line, followed by a
    carriage return that completes the line started by `AC_MSG_CHECKING`. The *`result-description`*
    text should make sense in the context of the *`feature-description`* message.
    For instance, the message `Looking for a C compiler...` might be terminated either
    with the name of the compiler found or with the text `not found`.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*You as the* configure.ac *author should strive to not allow additional text
    to be displayed between these two macro invocations, as it becomes difficult for
    the user to follow if there is unrelated text between the two sets of output*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `AC_MSG_NOTICE` and `AC_MSG_WARN` macros simply print a string to the screen.
    The leading text for `AC_MSG_WARN` is `configure: WARNING:`, whereas that of `AC_MSG_NOTICE`
    is simply `configure:`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `AC_MSG_ERROR` and `AC_MSG_FAILURE` macros generate an error message, stop
    the configuration process, and return an error code to the shell. The leading
    text for `AC_MSG_ERROR` is `configure: error:`. The `AC_MSG_FAILURE` macro prints
    a notice indicating the directory in which the error occurred, the user-specified
    message, and then the text `See ''config.log'' for more details`. The optional
    second parameter (*`exit-status`*) in these macros allows the maintainer to specify
    a particular status code to be returned to the shell. The default value is `1`.'
  prefs: []
  type: TYPE_NORMAL
- en: The text messages output by these macros are displayed to `stdout` and sent
    to the *config.log* file, so it’s important to use these macros instead of simply
    using shell `echo` or `printf` statements.
  prefs: []
  type: TYPE_NORMAL
- en: Supplying multiple lines of text in the first argument of these macros is especially
    important in the case of warning messages that merely indicate that the build
    is continuing with limitations. On a fast build machine in a large configuration
    process, a single-line warning message could zip right past without even being
    noticed by the user. This is less of a problem in cases where `configure` terminates
    with an error, because the user will easily discover the issue at the end of the
    output.^([13](footnote.xhtml#ch05fn13))
  prefs: []
  type: TYPE_NORMAL
- en: Supporting Optional Features and Packages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ve discussed the different ways to handle situations when a *pthread* library
    exists and when it doesn’t. But what if a user wants to build a single-threaded
    version of `jupiter` when the *pthread* library *is* installed? We certainly don’t
    want to add a note to Jupiter’s *README* file telling the user to rename their
    *pthread* libraries! Neither do we want the user to have to use our Autoconf cache
    variable trick.
  prefs: []
  type: TYPE_NORMAL
- en: 'Autoconf provides two macros for working with optional features and external
    software packages: `AC_ARG_ENABLE` and `AC_ARG_WITH`. Their prototypes are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'As with many Autoconf macros, these two are used simply to set some environment
    variables:'
  prefs: []
  type: TYPE_NORMAL
- en: AC_ARG_WITH `${withval}` and `${with_`package`}`
  prefs: []
  type: TYPE_NORMAL
- en: AC_ARG_ENABLE `${enableval}` and `${enable_`feature`}`
  prefs: []
  type: TYPE_NORMAL
- en: The macros can also be used in a more complex form, where the environment variables
    are used by shell script in the macros’ optional arguments. In either case, the
    resulting variable must be used in *configure.ac*, or it will be pointless to
    perform the check.
  prefs: []
  type: TYPE_NORMAL
- en: The macros are designed to add the options `--enable-feature[=yes|no]` (or `--disable-feature`)
    and `--with-package[=arg]` (or `--without-package`) to the generated configuration
    script’s command line interface, along with appropriate help text to the output
    generated when the user enters `./configure --help`. If the user gives these options,
    the macros set the preceding environment variables within the script. (The values
    of these variables may be used later in the script to set or clear various preprocessor
    definitions or substitution variables.)
  prefs: []
  type: TYPE_NORMAL
- en: '`AC_ARG_WITH` controls your project’s use of optional external software packages,
    while `AC_ARG_ENABLE` controls the inclusion or exclusion of optional software
    features. The choice to use one or the other is often a matter of perspective
    on the software you’re considering, and sometimes it’s simply a matter of preference,
    as these macros provide somewhat overlapping sets of functionality.'
  prefs: []
  type: TYPE_NORMAL
- en: For instance, in the Jupiter project, it could be justifiably argued that Jupiter’s
    use of *pthread* constitutes the use of an external software package, so you’d
    use `AC_ARG_WITH`. However, it could also be said that *asynchronous processing*
    is a software feature that might be enabled via `AC_ARG_ENABLE`. In fact, both
    of these statements are true, and which option you use should be dictated by a
    high-level architectural perspective on the feature or package to which you’re
    providing optional access. The *pthread* library supplies more than just thread
    creation functions—it also provides mutexes and condition variables, both of which
    may be used by a library package that doesn’t create threads. If a project provides
    a library that needs to act in a thread-safe manner within a multithreaded process,
    it will probably use mutex objects from the *pthread* library, but it may never
    create a thread. Thus, a user may choose to disable asynchronous execution as
    a feature at configuration time, but the project will still need to link to the
    *pthread* library in order to access the mutex functionality. In such cases, it
    makes more sense to specify `--enable-async-exec` than `--with-pthreads`.
  prefs: []
  type: TYPE_NORMAL
- en: In general, you should use `AC_ARG_WITH` when the user needs to choose between
    implementations of a feature provided by different packages or internally within
    the project. For instance, if `jupiter` had some reason to encrypt a file, it
    might be written to use either an internal encryption algorithm or an external
    encryption library. The default configuration might use an internal algorithm,
    but the package might allow the user to override the default with the command
    line option `--with-libcrypto`. When it comes to security, the use of a widely
    understood library can really help your package gain community trust.
  prefs: []
  type: TYPE_NORMAL
- en: '*Coding Up the Feature Option*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Having decided to use `AC_ARG_ENABLE`, how do we enable or disable the `async-exec`
    feature by default? The difference in how these two cases are encoded in *configure.ac*
    is limited to the help text and the shell script passed in the *`action-if-not-given`*
    argument. The help text describes the available options and the default value,
    and the shell script indicates what we want to happen if the option is *not* specified.
    (Of course, if it is specified, we don’t need to assume anything.)
  prefs: []
  type: TYPE_NORMAL
- en: Say we decide that asynchronous execution is a risky or experimental feature
    that we want to disable by default. In this situation, we could add the code shown
    in [Listing 5-15](ch05.xhtml#ch05ex15) to *configure.ac*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-15: Feature disabled by default*'
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, if we decide that asynchronous execution is fundamental to
    Jupiter, we should probably enable it by default, as in [Listing 5-16](ch05.xhtml#ch05ex16).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-16: Feature enabled by default*'
  prefs: []
  type: TYPE_NORMAL
- en: Now, the question is, do we check for the library and header file regardless
    of the user’s desire for this feature, or do we only check for them if the `async-exec`
    feature is enabled? In this case, it’s a matter of preference, because we’re using
    the *pthread* library only for this feature. (If we were also using it for non-feature-specific
    reasons, we’d have to check for it in either case.)
  prefs: []
  type: TYPE_NORMAL
- en: In cases where we need the library even if the feature is disabled, we would
    add `AC_ARG_ENABLE`, as in the preceding example, and an additional invocation
    of `AC_DEFINE` to create a *config.h* definition specifically for this feature.
    Since we don’t really want to enable the feature if the library or header file
    is missing—even if the user specifically requested it—we’ll also add some shell
    code to turn the feature off if either is missing, as shown in [Listing 5-17](ch05.xhtml#ch05ex17).
  prefs: []
  type: TYPE_NORMAL
- en: Git tag 5.5
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-17:* configure.ac: *Properly managing an optional feature during
    configuration*'
  prefs: []
  type: TYPE_NORMAL
- en: We’re replacing our original library check with a new check for command line
    arguments, which has the added benefit of checking for the library for the default
    case that occurs when the user doesn’t specify a preference. As you can see, much
    of the existing code is the same, with some additional script around it to account
    for user command line choices.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*There are places in [Listing 5-17](ch05.xhtml#ch05ex17) that appear to have
    gratuitous whitespace or arbitrary indentation. This is intentional, as it causes
    output to be formatted properly when *`configure`* is being run. We’ll fix some
    of this later as we add additional macros to our toolbox*.'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that at ➊, I’ve also added an additional test for a `yes` value in the
    `async_exec` variable, because this text really belongs to the feature test, not
    to the *pthread* library test. Remember, we’re trying to create a logical separation
    between testing for *pthread* functionality and testing for the requirements of
    the `async-exec` feature itself.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, now we also have to modify *src/main.c* to use the new definition,
    as shown in [Listing 5-18](ch05.xhtml#ch05ex18).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-18:* src/main.c: *Changing the conditional around `async-exec`-specific
    code*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we’ve left the `HAVE_PTHREAD_H` check around the inclusion of the
    header file in order to facilitate the use of *pthread.h* in ways besides those
    required by this feature.
  prefs: []
  type: TYPE_NORMAL
- en: In order to check for the library and header file only if the feature is enabled,
    we wrap the original check code in a test of `async_exec`, as shown in [Listing
    5-19](ch05.xhtml#ch05ex19).
  prefs: []
  type: TYPE_NORMAL
- en: Git tag 5.6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-19:* configure.ac: *Checking for the library and header file only
    if a feature is enabled*'
  prefs: []
  type: TYPE_NORMAL
- en: This time, we’ve moved the test for `async_exec` from being just around the
    message statement to being around the entire set of header and library checks,
    which means we won’t even look for *pthread* header and libraries if the user
    has disabled the `async_exec` feature.
  prefs: []
  type: TYPE_NORMAL
- en: '*Formatting Help Strings*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We’ll make one final change to our use of `AC_ARG_ENABLE` in [Listing 5-17](ch05.xhtml#ch05ex17).
    Notice that in the second argument, there are exactly two spaces between the open
    square bracket and the start of the argument text. You’ll also notice that the
    number of spaces between the argument and the description depends on the length
    of the argument text, because the description text is supposed to be presented
    to the user aligned with a particular column. There are four spaces between `--disable-async-exec`
    and the description in [Listings 5-16](ch05.xhtml#ch05ex16) and [5-17](ch05.xhtml#ch05ex17),
    but there are five spaces after `--enable-async-exec` in [Listing 5-15](ch05.xhtml#ch05ex15)
    because the word *enable* is one character shorter than the word *disable*.
  prefs: []
  type: TYPE_NORMAL
- en: But what if the Autoconf project maintainers decide to change the format of
    the help text for configuration scripts? Or what if you modify your option name
    but forget to adjust the indentation on your help text?
  prefs: []
  type: TYPE_NORMAL
- en: 'To solve these potential problems, we’ll turn to an Autoconf helper macro called
    `AS_HELP_STRING`, whose prototype is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This macro’s sole purpose is to abstract away knowledge about the number of
    spaces that should be embedded in the help text at various places. To use it,
    replace the second argument in `AC_ARG_ENABLE` with a call to `AS_HELP_STRING`,
    as shown in [Listing 5-20](ch05.xhtml#ch05ex20).
  prefs: []
  type: TYPE_NORMAL
- en: Git tag 5.7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-20:* configure.ac: *Using `AS_HELP_STRING`*'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*For details on the funky character sequences around *`default: no`* in [Listing
    5-20](ch05.xhtml#ch05ex20), see “Quadrigraphs” on [page 143](ch05.xhtml#page_143).*'
  prefs: []
  type: TYPE_NORMAL
- en: Checks for Type and Structure Definitions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now let’s consider how we might test for system- or compiler-provided type and
    structure definitions. When writing cross-platform networking software, one quickly
    learns that the data sent between machines needs to be formatted in a way that
    doesn’t depend on a particular CPU or operating system architecture. Some systems’
    native integer sizes are 32 bits, while others’ are 64 bits. Some systems store
    integer values in memory and on disk from least-significant byte to most-significant
    byte, while others do the reverse.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s consider an example. When using C-language structures to format network
    messages, one of the first roadblocks you’ll encounter is the lack of basic C-language
    types that have the same size from one platform to another. A CPU with a 32-bit
    machine word size would likely have a C compiler with 32-bit `int` and `unsigned`
    types. The sizes of the basic integer types in the C language are implementation
    defined. This is by design, in order to allow implementations to use sizes for
    `char`, `short`, `int`, and `long` that are optimal for each platform.
  prefs: []
  type: TYPE_NORMAL
- en: While this language feature is great for optimizing software designed to run
    on one platform, it’s not very helpful when choosing types to move data *between*
    platforms. In order to address this problem, engineers have tried everything from
    sending network data as strings (think XML and JSON) to inventing their own sized
    types.
  prefs: []
  type: TYPE_NORMAL
- en: In an attempt to remedy this shortcoming in the language, the C99 standard provides
    the sized types `int`*`N`*`_t` and `uint`*`N`*`_t`, where *`N`* may be `8`, `16`,
    `32`, or `64`. Unfortunately, not all of today’s compilers provide these types.
    (Not surprisingly, GNU C has been at the forefront for some time now, providing
    C99-sized types with the inclusion of the *stdint.h* header file.)
  prefs: []
  type: TYPE_NORMAL
- en: To alleviate the pain to some extent, Autoconf provides macros for determining
    whether C99-specific standardized types exist on a user’s platform and then defining
    them if they don’t exist. For example, you can add a call to `AC_TYPE_UINT16_T`
    to *configure.ac* in order to ensure that `uint16_t` exists on your users’ platforms,
    either as a system definition in *stdint.h* or the non-standard but more prolific
    *inttypes.h*, or as an Autoconf definition in *config.h*.
  prefs: []
  type: TYPE_NORMAL
- en: The compiler tests for such integer-based types are typically written by a configuration
    script as a bit of C code that looks like the code shown in [Listing 5-21](ch05.xhtml#ch05ex21).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-21: A compiler check for a proper implementation of `uint16_t`*'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll notice that the important line in [Listing 5-21](ch05.xhtml#ch05ex21)
    is at ➊, which is where `test_array` is declared. Autoconf is relying on the fact
    that all C compilers will generate an error if you attempt to define an array
    with a negative size. If `uint16_t` isn’t exactly 16 bits of unsigned data on
    this platform, the array size will be negative.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice, too, that the bracketed expression in the listing is a compile-time
    expression.^([14](footnote.xhtml#ch05fn14)) Whether this could have been done
    with simpler syntax is anyone’s guess, but this code does the trick on all the
    compilers Autoconf supports. The array is defined with a nonnegative size only
    if the following three conditions are met:'
  prefs: []
  type: TYPE_NORMAL
- en: '`uint16_t` is defined in one of the included header files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The size of `uint16_t` is exactly 16 bits.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uint16_t` is unsigned on this platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Follow the pattern shown in [Listing 5-22](ch05.xhtml#ch05ex22) to use the definitions
    provided by this macro. Even on systems where *stdint.h* or *inttypes.h* is not
    available, Autoconf will add code to *config.h* that defines `uint16_t` if the
    system header files don’t provide it, so you can use the type in your source code
    without additional tests.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-22: Source code that properly uses Autoconf’s `uint16_t` definitions*'
  prefs: []
  type: TYPE_NORMAL
- en: Autoconf offers a few dozen type checks like `AC_TYPE_UINT16_T`, as detailed
    in Section 5.9 of the *GNU Autoconf Manual*. In addition, a generic type check
    macro, `AC_CHECK_TYPES`, allows you to specify a comma-separated list of questionable
    types that your project needs.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*This list is comma separated because some definitions (like *`struct fooble`*)
    may have embedded spaces. Since they are comma delimited, you must use Autoconf’s
    square-bracket quotes around this parameter if you list more than one type.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the formal declaration of `AC_CHECK_TYPES`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: If you don’t specify a list of header files in the last parameter, the default
    headers will be used in the compiler test by way of the macro `AC_INCLUDES_DEFAULT`,
    which expands to the text shown in [Listing 5-23](ch05.xhtml#ch05ex23).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-23: The definition of `AC_INCLUDES_DEFAULT`, as of Autoconf version
    2.69*'
  prefs: []
  type: TYPE_NORMAL
- en: If you know that your type is not defined in one of these header files, you
    should specify one or more header files to be included in the test, as shown in
    [Listing 5-24](ch05.xhtml#ch05ex24). This listing includes the default header
    files first, followed by the additional header files (which will often need some
    of the defaults anyway).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-24: Using a nondefault set of `include`s in the check for `struct
    doodah`*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice at ➊ in [Listing 5-24](ch05.xhtml#ch05ex24) that I’ve wrapped the last
    parameter of the macro over three lines in *configure.ac*, without indentation.
    The text of this argument is included verbatim in the test source file, so you’ll
    want to be sure that whatever you put into this argument is actually valid code
    in the language you’re using.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Test-related problems are often the sorts of things that developers complain
    about with regard to Autoconf. When you have problems with such syntax, check
    the* config.log *file for the complete source code for all failed tests, including
    the compiler output generated during compilation of the test. This information
    often provides the solution to your problem*.'
  prefs: []
  type: TYPE_NORMAL
- en: The AC_OUTPUT Macro
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, we come to the `AC_OUTPUT` macro, which expands, within `configure`,
    into shell code that generates the `config.status` script based on the data specified
    in the previous macro expansions. All other macros must be used before `AC_OUTPUT`
    is expanded, or they will be of little value to your generated `configure` script.
    (Additional shell script may be placed in *configure.ac* after `AC_OUTPUT`, but
    it will not affect the configuration or file generation performed by `config.status`.)
  prefs: []
  type: TYPE_NORMAL
- en: Consider adding shell `echo` or `printf` statements after `AC_OUTPUT` to tell
    the user how the build system is configured based on the specified command line
    options. You can also use these statements to tell the user about additional useful
    targets for `make`. For example, we might add code to Jupiter’s *configure.ac*
    file *after* `AC_OUTPUT`, as shown in [Listing 5-25](ch05.xhtml#ch05ex25).
  prefs: []
  type: TYPE_NORMAL
- en: Git tag 5.8
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 5-25:* configure.ac: *Adding configuration summary text to the output
    of `configure`*'
  prefs: []
  type: TYPE_NORMAL
- en: Adding such output to the end of *configure.ac* is a handy project feature,
    because it tells the user, at a glance, exactly what happened during configuration.
    Since variables such as `async_exec` are set to `yes` or `no` based on configuration,
    the user can see whether the requested configuration actually took place.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Version 2.62 (and later) of Autoconf does a much better job of deciphering
    the user’s intent with respect to the use of square brackets than earlier versions
    do. In the past, you might have needed to use a quadrigraph to force Autoconf
    to display a square bracket, but now you can use the character itself. Most of
    the problems that occur are a result of not properly quoting arguments. This enhanced
    functionality comes primarily from enhancements to Autoconf library macros that
    might accept square bracket characters in arguments. To ensure that square brackets
    are not misinterpreted in your own* configure.ac *code, you should read up on
    M4 double quotation in “Quoting Rules” on [page 438](ch16.xhtml#page_438)*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**QUADRIGRAPHS**'
  prefs: []
  type: TYPE_NORMAL
- en: Those funny character sequences around the word `<target>` in [Listing 5-25](ch05.xhtml#ch05ex25)
    are called *quadrigraph sequences* or simply *quadrigraphs*. They serve the same
    purpose as escape sequences, but quadrigraphs are a little more reliable than
    escaped characters or escape sequences because they’re never subject to ambiguity.
  prefs: []
  type: TYPE_NORMAL
- en: The sequence `@<:@` is the quadrigraph sequence for the open square bracket
    character, while `@:>@` is the quadrigraph for the closed square bracket character.
    These quadrigraphs will *always* be output by `autom4te` as literal square bracket
    characters. This happens after M4 is finished with the file, so it has no opportunity
    to misinterpret them as Autoconf quote characters.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re interested in studying quadrigraphs in more detail, check out Section
    8 of the *GNU Autoconf Manual*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, we covered some of the more advanced constructs found in the
    *configure.ac* files for many projects. We started with the macros required to
    generate substitution variables. I refer to these as “advanced” macros because
    many of the higher-level Autoconf macros use `AC_SUBST` and `AC_DEFINE` internally,
    making them somewhat transparent to you. However, knowing about them helps you
    to understand how Autoconf works and provides some of the background information
    necessary for you to learn to write your own macros.
  prefs: []
  type: TYPE_NORMAL
- en: We covered checks for compilers and other tools, as well as checks for less
    common data types and structures on your users’ systems. The examples in this
    chapter were designed to help you to understand the proper use of the Autoconf
    type- and structure-definition check macros, as well as others.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also examined a technique for debugging the use of complex Autoconf macros:
    using picket fences around a macro invocation in *configure.ac* in order to quickly
    locate the associated generated text in `configure`. We looked at checks for libraries
    and header files, and we examined some of the details involved in the proper use
    of these Autoconf macros. We went into great detail about building a robust and
    user-friendly configuration process, including the addition of project-specific
    command line options to Autoconf-generated `configure` scripts.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we discussed the proper placement of the `AC_OUTPUT` macro in *configure.ac*,
    as well as the addition of some summary-generation shell code designed to help
    your users understand what happened during the configuration of your project on
    their system.
  prefs: []
  type: TYPE_NORMAL
- en: 'An important Autconf concept to take away from [Chapters 4](ch04.xhtml) and
    [5](ch05.xhtml) was stated at the very start of [Chapter 4](ch04.xhtml): Autoconf
    generates shell scripts from the shell source code you write into *configure.ac*.
    That means you have *complete* control over what ends up in your configuration
    script, as long as you understand the proper use of the macros you’re invoking.
    In fact, you can do anything you want in *configure.ac*. Autoconf macros are there
    simply to make what you choose to do more consistent and simpler for you to write.
    The less you rely on Autoconf macros to perform configuration tasks, the less
    consistent your users’ configuration experiences will be relative to other open
    source projects they download and build.'
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter takes us away from Autoconf for a while, as we turn our attention
    to GNU Automake, an Autotools toolchain add-on that abstracts many of the details
    of creating very functional makefiles for software projects.
  prefs: []
  type: TYPE_NORMAL
