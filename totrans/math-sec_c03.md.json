["```\n❶ import networkx as nx\nfrom matplotlib import pyplot as plt\n\n❷ G = nx.Graph()  # Create the default Graph object\n❸ G.add_node('f') # Adds a node manually\nG.add_node('g') # Adds another node manually\n❹ G.add_edge('a', 'b', weight=0.6) # Will add missing nodes\nG.add_edge('a', 'c', weight=0.2) # and connecting edges\nG.add_edge('c', 'd', weight=0.1) # Weight is one type of edge attribute\nG.add_edge('c', 'e', weight=0.7)\nG.add_edge('g', 'c', weight=0.8) \nG.add_edge('f', 'a', weight=0.5) \n❺ pos = nx.layout.spring_layout(G, seed=42) # Try to optimize layout \nnx.draw(G, pos, with_labels=True, font_color='w')\nplt.show()\n```", "```\nb_scores = nx.betweenness_centrality(G, normalized=True)\nnx.set_node_attributes(G, name='between', values=b_scores)\nprint(G.nodes[\"c\"][\"between\"])\n```", "```\n**d_scores = nx.degree_centrality(G)**\nnx.set_node_attributes(G, name=**'degree'**, values=**d_scores**)\n**print(G.nodes[\"c\"][\"degree\"])**\n```", "```\n❶ **G = nx.DiGraph() # Create the default Graph object**\nG.add_edge('a', 'b', weight=0.6)\nG.add_edge('a', 'c', weight=0.2)\nG.add_edge('c', 'd', weight=0.1)\nG.add_edge('c', 'e', weight=0.7)\nG.add_edge('g', 'c', weight=0.8) \nG.add_edge('f', 'a', weight=0.5) \n❷ i_scores = nx.in_degree_centrality(G)\n❸ o_scores = nx.out_degree_centrality(G)\nnx.set_node_attributes(G, name='in-degree', values=i_scores)\nnx.set_node_attributes(G, name='out-degree', values=o_scores)\nprint(G.nodes[\"c\"][\"in-degree\"], G.nodes[\"c\"][\"out-degree\"])\n```", "```\nclique_graph = nx.Graph()\nclique_graph.add_edges_from(\n    [\n        (\"Tom\", \"Jerry\"),(\"Butch\", \"Jerry\"),(\"Spike\", \"Jerry\"),\n        (\"Spike\", \"Tom\"),(\"Tom\", \"Squeek\"),(\"Tom\", \"Butch\"),\n        (\"Squeek\", \"Butch\")\n    ]\n)\nclq = nx.algorithms.number_of_cliques(clique_graph)\ntot = nx.algorithms.graph_number_of_cliques(clique_graph)\nfor m in clq:\n    print(m, (clq[m]/tot))\n```", "```\n{'Tom': 1.0, 'Jerry': 0.66, 'Butch': 0.66, 'Spike': 0.33, 'Squeek': 0.33}\n```", "```\ncliques = list(nx.find_cliques(clique_graph))\nprint(cliques)\n```"]