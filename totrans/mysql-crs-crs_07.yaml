- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Joining Database Tables
  prefs: []
  type: TYPE_NORMAL
- en: A SQL query walks into a bar, approaches two tables, and asks, “May I join you?”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —The worst database joke in history
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that you’ve learned how to use SQL to select and filter data from a table,
    you’ll see how to join database tables. *Joining* tables means selecting data
    from more than one table and combining it in a single result set. MySQL provides
    syntax to do different types of joins, like inner joins and outer joins. In this
    chapter, you’ll look at how to use each type.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting Data from Multiple Tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The data you want to retrieve from a database often will be stored in more than
    one table, and you need to return it as one dataset in order to view all of it
    at once.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at an example. This table, called `subway_system`, contains data
    for every subway in the world:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The first two columns, `subway_system` and `city`, contain the name of the subway
    and the city where it’s located. The third column, `country_code`, stores the
    two-character ISO country code. `AR` stands for Argentina, `CN` stands for China,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second table, called `country`, has two columns, `country_code` and `country`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Say you want to get a list of subway systems and their full city and country
    names. That data is spread across the two tables, so you’ll need to join them
    to get the result set you want. Each table has the same `country_code` column,
    so you’ll use that as a link to write a SQL query that joins the tables (see [Listing
    5-1](#listing5-1)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-1: Joining the `subway_system` and `country` tables'
  prefs: []
  type: TYPE_NORMAL
- en: In the `country` table, the `country_code` column is the primary key. In the
    `subway_system` table, the `country_code` column is a foreign key. Recall that
    a primary key uniquely identifies rows in a table, and a foreign key is used to
    join with the primary key of another table. You use the `=` (equal) symbol to
    specify that you want to join all equal values from the `subway_system` and `country`
    tables’ `country_code` columns.
  prefs: []
  type: TYPE_NORMAL
- en: Since you’re selecting from two tables in this query, it’s a good idea to specify
    which table the column is in every time you reference it, especially because the
    same column appears in both tables. There are two reasons for this. First, it
    will make the SQL easier to maintain because it will be immediately apparent in
    the SQL query which columns come from which tables. Second, because both tables
    have a column named `country_code`, if you don’t specify the table name, MySQL
    won’t know which column you want to use and will give an error message. To avoid
    this, in your `select` statement, type the table name, a period, and then the
    column name. For example, in [Listing 5-1](#listing5-1), `subway_system.city`
    refers to the `city` column in the `subway_system` table.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run this query, it returns all of the subway systems with the country
    names retrieved from the `country` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `country_code` column does not appear in the resulting join. This
    is because you selected only the `subway_system`, `city`, and `country` columns
    in the query.
  prefs: []
  type: TYPE_NORMAL
- en: Table Aliasing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To save time when writing SQL, you can declare aliases for your table names.
    A *table alias* is a short, temporary name for a table. The following query returns
    the same result set as [Listing 5-1](#listing5-1):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You declare `s` as the alias for the `subway_system` table and `c` for the `country`
    table. Then you can type `s` or `c` instead of the full table name when referencing
    the column names elsewhere in the query. Keep in mind that table aliases are only
    in effect for the current query.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the word `as` to define table aliases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The query returns the same results with or without `as`, but you’ll cut down
    on typing by not using it.
  prefs: []
  type: TYPE_NORMAL
- en: Types of Joins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MySQL has several different types of joins, each of which has its own syntax,
    as summarized in [Table 5-1](#table5-1).
  prefs: []
  type: TYPE_NORMAL
- en: '**[Table 5-1](#tableanchor5-1):** MySQL Join Types'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Join type** | **Description** | **Syntax** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Inner join | Returns rows where both tables have a matching value. | `inner
    join` `join` |'
  prefs: []
  type: TYPE_TB
- en: '| Outer join | Returns all rows from one table and the matching rows from a
    second table. Left joins return all rows from the table on the left. Right joins
    return all rows from the table on the right. | `left outer join` `left join`'
  prefs: []
  type: TYPE_NORMAL
- en: '`right outer join`'
  prefs: []
  type: TYPE_NORMAL
- en: '`right join` |'
  prefs: []
  type: TYPE_NORMAL
- en: '| Natural join | Returns rows based on column names that are the same in both
    tables. | `natural join` |'
  prefs: []
  type: TYPE_TB
- en: '| Cross join | Matches all rows in one table to all rows in another table and
    returns a Cartesian product. | `cross join` |'
  prefs: []
  type: TYPE_TB
- en: Let’s look at each type of join in more depth.
  prefs: []
  type: TYPE_NORMAL
- en: Inner Joins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Inner joins are the most commonly used type of join. In an inner join, there
    must be a match in both tables for data to be retrieved.
  prefs: []
  type: TYPE_NORMAL
- en: You performed an inner join on the `subway_system` and `country` tables in [Listing
    5-1](#listing5-1). The returned list had no rows for Bangladesh and Belgium. These
    countries are not in the `subway_system` table, as they don’t have subways; thus,
    there was not a match in both tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that when you specify `inner join` in a query, the word `inner` is optional
    because this is the default join type. The following query performs an inner join
    and produces the same results as [Listing 5-1](#listing5-1):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You’ll come across MySQL queries that use `inner join` and others that use `join`.
    If you have an existing codebase or written standards, it’s best to follow the
    practices outlined there. If not, I recommend including the word `inner` for clarity.
  prefs: []
  type: TYPE_NORMAL
- en: Outer Joins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An outer join displays all rows from one table and any matching rows in a second
    table. In [Listing 5-2](#listing5-2), you select all countries and display subway
    systems for the countries if there are any.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-2: Performing a right outer join'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this query, the `subway_system` table is considered the left table because
    it is to the left of the `outer join` syntax, while the `country` table is the
    right table. Because this is a *right* outer join, this query returns all the
    rows from the `country` table even if there is no match in the `subway_system`
    table. Therefore, all the countries appear in the result set, whether or not they
    have subway systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: For countries without matching rows in the `subway_system` table, the `city`
    and `subway_system` columns display null values.
  prefs: []
  type: TYPE_NORMAL
- en: As with inner joins, the word `outer` is optional; using `left join` and `right
    join` will produce the same results as their longer equivalents.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following outer join returns the same results as [Listing 5-2](#listing5-2),
    but uses the `left outer join` syntax instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this query, the order of the tables is switched from [Listing 5-2](#listing5-2).
    The `subway_system` table is now listed last, making it the right table. The syntax
    `country c left outer join subway_system s` is equivalent to `subway_system s
    right outer join country c` in [Listing 5-2](#listing5-2). It doesn’t matter which
    join you use as long as you list the tables in the correct order.
  prefs: []
  type: TYPE_NORMAL
- en: Natural Joins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A natural join in MySQL automatically joins tables when they have a column
    with the same name. Here is the syntax to automatically join two tables based
    on a column that is found in both:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'With natural joins, you avoid a lot of the extra syntax required for an inner
    join. In [Listing 5-2](#listing5-2), you had to include `on s.country_code = c.country_code`
    to join the tables based on their common `country_code` column, but with a natural
    join, you get that for free. The results of this query are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Notice that you selected all columns from the tables using the `select *` wildcard.
    Also, although both tables have a `country_code` column, MySQL’s natural join
    was smart enough to display that column just once in the result set.
  prefs: []
  type: TYPE_NORMAL
- en: Cross Joins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: MySQL’s cross join syntax can be used to get the Cartesian product of two tables.
    A *Cartesian product* is a listing of every row in one table matched with every
    row in a second table. For example, say a restaurant has two database tables called
    `main_dish` and `side_dish`. Each table has three rows and one column.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `main_dish` table is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And the `side_dish` table looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'A Cartesian product of these tables would be a list of all the possible combinations
    of main dishes and side dishes, and is retrieved using the `cross join` syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This query, unlike the others you’ve seen, doesn’t join tables based on columns.
    There are no primary keys or foreign keys being used. Here are the results of
    this query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Since there are three rows in the `main_dish` table and three rows in the `side_dish`
    table, the total number of possible combinations is nine.
  prefs: []
  type: TYPE_NORMAL
- en: Self Joins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes, it can be beneficial to join a table to itself, which is known as
    a self join. Rather than using special syntax as you did in the previous joins,
    you perform a self join by listing the same table name twice and using two different
    table aliases.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following table, called `music_preference`, lists music fans
    and their favorite genre of music:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: To pair music fans who like the same genre, you join the `music_preference`
    table to itself, as shown in [Listing 5-3](#listing5-3).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-3: Self join of the `music_preference` table'
  prefs: []
  type: TYPE_NORMAL
- en: The `music_preference` table is listed twice in the query, aliased once as table
    `a` and once as table `b`. MySQL will then join tables `a` and `b` as if they
    are different tables.
  prefs: []
  type: TYPE_NORMAL
- en: In this query, you use the `!=` (not equal) syntax in the `where` clause to
    ensure that the value of the `music_fan` column from table `a` is not the same
    as the value of the `music_fan` column in table `b`. (Remember from [Chapter 3](c03.xhtml)
    that you can use a `where` clause in your `select` statements to filter your results
    by applying certain conditions.) This way, music fans won’t be paired up with
    themselves.
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 5-3](#listing5-3) produces the following result set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: A music fan can now find other fans of their favorite genre in the right column
    next to their name.
  prefs: []
  type: TYPE_NORMAL
- en: Variations on Join Syntax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MySQL allows you to write SQL queries that accomplish the same results in different
    ways. It’s a good idea to get comfortable with different syntaxes, as you may
    have to modify code created by someone who doesn’t write SQL queries in quite
    the same way that you do.
  prefs: []
  type: TYPE_NORMAL
- en: Parentheses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can choose to use parentheses when joining on columns or leave them off.
    This query, which does not use parentheses
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'is the same as this query, which does:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Both queries return the same result.
  prefs: []
  type: TYPE_NORMAL
- en: Old-School Inner Joins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This query, written in an older style of SQL, is equivalent to [Listing 5-1](#listing5-1):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This code doesn’t include the word `join`; instead, it lists the table names
    separated by a comma in the `from` statement.
  prefs: []
  type: TYPE_NORMAL
- en: When writing queries, use the newer syntax shown in [Listing 5-1](#listing5-1),
    but keep in mind that this older style is still supported by MySQL and you might
    see it used in some legacy code today.
  prefs: []
  type: TYPE_NORMAL
- en: Column Aliasing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You read earlier in the chapter about table aliasing; now you’ll create aliases
    for columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'In some parts of the world, like France, subway systems are referred to as
    *metros*. Let’s select the subway systems for cities in France from the `subway_system`
    table and use column aliasing to display the heading `metro` instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'As with table aliases, you can use the word `as` in your SQL query or you can
    leave it out. Either way, the results of the query are as follows, now with the
    `subway_system` column heading changed to `metro`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: When creating tables, try to give your column headings descriptive names so
    that the results of your queries will be meaningful at a glance. In cases where
    the column names could be clearer, you can use a column alias.
  prefs: []
  type: TYPE_NORMAL
- en: Joining Tables in Different Databases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes there are tables with the same name in multiple databases, so you
    need to tell MySQL which database to use. There are a couple of different ways
    to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this query, the `use` command (introduced in [Chapter 2](c02.xhtml)) tells
    MySQL to use the specified database for the SQL statements that follow it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: On the first line, the `use` command sets the current database to `subway`.
    Then, when you select all the rows from the `subway_system` table on the next
    line, MySQL knows to pull data from the `subway_system` table in the `subway`
    database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a second way to specify the database name in your `select` statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In this syntax, the table name is preceded by the database name and a period.
    The `subway.subway_system` syntax tells MySQL that you want to select from the
    `subway_system` table in the `subway` database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Both options produce the same result set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Specifying the database and table name allows you to join tables that are in
    different databases on the same MySQL server, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This query joins the `country` table in the `location` database with the `subway_system`
    table in the `subway` database.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you learned how to select data from two tables and display
    that data in a single result set using various joins offered by MySQL. In [Chapter
    6](c06.xhtml), you’ll build on this knowledge by performing even more complex
    joins involving multiple tables.
  prefs: []
  type: TYPE_NORMAL
