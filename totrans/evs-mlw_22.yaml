- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">A</samp> <samp class="SANS_Dogma_OT_Bold_B_11">BUILDING
    AN ANTI-EVASION ANALYSIS LAB</samp>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">A</samp> <samp class="SANS_Dogma_OT_Bold_B_11">建立一个反规避分析实验室</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: Building an analysis lab is a critical part of malware analysis, and this is
    doubly true when it comes to highly evasive and context-aware malware. A well-tuned
    analysis environment makes the tricky task of analyzing and reversing this type
    of malware a bit easier. In this chapter, I’ll walk you through creating a basic
    malware analysis lab environment, provide some configuration tips for concealing
    your hypervisor and virtual machines from malware, and share a few tricks you
    can use during the analysis process.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 建立一个分析实验室是恶意软件分析的关键部分，对于高度规避和上下文感知的恶意软件尤其如此。一个调试良好的分析环境使得分析和逆向这类恶意软件的困难任务变得稍微容易一些。在本章中，我将带你创建一个基本的恶意软件分析实验室环境，提供一些隐藏你的虚拟机管理程序和虚拟机免受恶意软件攻击的配置建议，并分享一些你在分析过程中可以使用的小技巧。
- en: '## <samp class="SANS_Futura_Std_Bold_B_11">Lab Architecture</samp>'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '## <samp class="SANS_Futura_Std_Bold_B_11">实验室架构</samp>'
- en: Malware analysis lab environments contain various virtual machines, software,
    and other tools that support the analysis process. Lab environments will likely
    include some or all of the components illustrated in [Figure A-1](#figA-1).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件分析实验室环境包含支持分析过程的各种虚拟机、软件和其他工具。实验室环境很可能包括[图 A-1](#figA-1)中展示的所有或部分组件。
- en: '![](../images/figA-1.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figA-1.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-1: A typical malware
    analysis lab environment</samp>'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 A-1：一个典型的恶意软件分析实验室环境</samp>
- en: Let’s go through each in turn.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们依次介绍每个部分。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">The Host Machine</samp>
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">主机</samp>
- en: 'Your *host machine* consists of one or more computers that contain and run
    your malware analysis VMs. It’s generally smart to select an operating system
    for your host that differs from the operating system of the malware you’ll primarily
    be analyzing. For example, in this book, I’ve focused on Windows malware, so I’d
    choose Linux or macOS as my host operating system. The reason for this is simple:
    if the malware you’re analyzing were to escape the Windows VM environment (unlikely,
    but still a risk), having a different operating system on your host would mean
    that the malware likely wouldn’t be able to infect it.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你的*主机*由一个或多个计算机组成，这些计算机包含并运行你的恶意软件分析虚拟机。通常最好选择与恶意软件操作系统不同的主机操作系统。例如，在本书中，我主要关注的是Windows恶意软件，因此我会选择Linux或macOS作为我的主机操作系统。原因很简单：如果你分析的恶意软件逃脱了Windows虚拟机环境（虽然不太可能，但仍然有风险），那么主机上的不同操作系统意味着恶意软件很可能无法感染它。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">The Hypervisor</samp>
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">虚拟机管理程序</samp>
- en: The second most important component of a malware analysis lab is the *hypervisor*.
    Essentially, a hypervisor allocates the host computer’s resources (processing
    power, memory, storage, and so on) to a virtual operating system and its applications
    (the VM). Hypervisors can run multiple VMs at a time while ensuring that they
    don’t interfere with one another.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件分析实验室的第二个最重要的组件是*虚拟机管理程序*。本质上，虚拟机管理程序将主机计算机的资源（处理能力、内存、存储等）分配给虚拟操作系统及其应用程序（虚拟机）。虚拟机管理程序可以同时运行多个虚拟机，并确保它们彼此不会干扰。
- en: Most hypervisors can take a *snapshot*, which is an image of a VM in a particular
    state and is an important part of malware analysis. After you configure your VMs,
    remember to take a “clean,” preinfection snapshot; this will be your starting
    point before detonating the malware. You can even take snapshots during malware
    execution at key points in the analysis process. For example, you may wish to
    take snapshots of your VM while debugging a malware executable. If the debugger
    crashes or the malware is using anti-debugging techniques, you can simply revert
    to a previous snapshot as necessary. Snapshots can also be reverted to their original
    state after you’ve finished your analysis. We’ll revisit snapshots later in this
    chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数虚拟化管理程序都可以进行*快照*，即虚拟机在某一特定状态下的镜像，这是恶意软件分析中的重要组成部分。在配置好虚拟机后，记得先拍摄一个“干净的”预感染快照；这将成为你启动恶意软件前的起始点。在恶意软件执行的关键节点，你甚至可以在分析过程中拍摄快照。例如，你可能希望在调试恶意软件可执行文件时拍摄虚拟机的快照。如果调试器崩溃或者恶意软件使用了反调试技术，你可以根据需要轻松恢复到先前的快照。分析完成后，快照也可以恢复到原始状态。我们将在本章后面再次讨论快照。
- en: Two of the most popular hypervisors for both Windows and Linux are VirtualBox
    and VMware Workstation. We’ll return to them in a moment.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 两个最受欢迎的虚拟化管理程序分别是 VirtualBox 和 VMware Workstation，适用于 Windows 和 Linux 系统。稍后我们会再次讨论它们。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Victim Windows VMs</samp>
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">受害者 Windows 虚拟机</samp>
- en: When working with malware that targets Windows, you should dedicate one or more
    Windows VMs as the “victim” hosts where you’ll execute malware and monitor its
    behaviors. (For malware that targets Linux or macOS, you’d need the equivalent.)
    Because some malware targets specific versions of Windows, it’s wise to keep different
    configurations of VMs. For example, I use both Windows 7 and Windows 10 VMs, and
    I keep various versions of software (such as Microsoft Office) installed on them.
    Note that you should not primarily rely on Windows 7 for malware analysis; as
    it is now quite dated, it may be missing files and libraries that modern malware
    depends on!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理针对 Windows 的恶意软件时，你应当专门配置一个或多个 Windows 虚拟机作为“受害者”主机，在这些主机上执行恶意软件并监控其行为。（对于针对
    Linux 或 macOS 的恶意软件，你需要相应的配置。）由于一些恶意软件专门针对特定版本的 Windows，保持不同配置的虚拟机是明智的选择。例如，我同时使用
    Windows 7 和 Windows 10 虚拟机，并且在它们上安装了不同版本的软件（如 Microsoft Office）。请注意，你不应主要依赖 Windows
    7 来进行恶意软件分析；由于它现在已经相当过时，可能缺少现代恶意软件所依赖的文件和库！
- en: The malware analysis and research community has very generously provided many
    handy, free, and open source tools for setting up your victim machines.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件分析和研究社区慷慨地提供了许多便捷的、免费的开源工具，用于配置你的受害者机器。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Services Windows VMs</samp>
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">服务 Windows 虚拟机</samp>
- en: As its name suggests, the “services” Windows VM hosts services that may be used
    to support your malware analysis processes. Examples include Active Directory
    services (to simulate an AD domain), Server Message Block (SMB) and file-sharing
    services, chat services (such as IRC), and database servers. If the malware sample
    you’re analyzing is attempting to communicate with other services on the network,
    it won’t hurt to install these services to see how the malware interacts with
    them. This component of the lab isn’t a strict requirement, however, and you may
    be able to get by without it; it all depends on the capabilities of the malware
    and what you’re trying to achieve in your analysis. You can even simulate some
    of these services using a network simulation tool such as INetSim, FakeDNS, or
    FakeNet, as we’ll briefly discuss later.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名称所示，“服务”Windows 虚拟机托管着可能用于支持恶意软件分析过程的服务。举例来说，包括活动目录服务（用于模拟 AD 域）、服务器消息块（SMB）和文件共享服务、聊天服务（如
    IRC）以及数据库服务器。如果你正在分析的恶意软件样本尝试与网络中的其他服务通信，安装这些服务并观察恶意软件如何与它们交互是没坏处的。然而，这个实验室组件并不是严格的要求，你可能能够在没有它的情况下进行分析；这完全取决于恶意软件的能力以及你在分析中要达成的目标。你甚至可以使用网络模拟工具（如
    INetSim、FakeDNS 或 FakeNet）模拟其中一些服务，稍后我们会简要讨论这些工具。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Linux VMs</samp>
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Linux 虚拟机</samp>
- en: Even when you’re dealing with malware that targets Windows, it’s a good idea
    to have a Linux VM handy. Linux has many command line tools that can save you
    a lot of time and effort. It can also serve as a network gateway for the Windows
    victim VMs by monitoring and faking network services. There are even a few prebuilt
    Linux malware analysis environments. Remnux ([*https://<wbr>remnux<wbr>.org*](https://remnux.org))
    includes nearly all of the tools you’ll ever need for malware analysis on Linux.
    Alternatives to Remnux include SANS SIFT Workstation ([*https://<wbr>www<wbr>.sans<wbr>.org<wbr>/tools<wbr>/sift<wbr>-workstation<wbr>/*](https://www.sans.org/tools/sift-workstation/))
    and Tsurugi Linux ([*https://<wbr>tsurugi<wbr>-linux<wbr>.org*](https://tsurugi-linux.org)),
    but note that these also focus on general forensics and incident response tasks.
    Finally, Security Onion ([*https://<wbr>securityonionsolutions<wbr>.com<wbr>/software*](https://securityonionsolutions.com/software))
    is a preconfigured VM image specializing in network traffic analysis and monitoring.
    It can also be a great addition to your malware analysis toolbox.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你处理的是针对 Windows 的恶意软件，手边有一台 Linux 虚拟机也是个好主意。Linux 有许多命令行工具，可以为你节省大量时间和精力。它还可以作为
    Windows 受害者虚拟机的网络网关，通过监控和伪造网络服务来提供支持。甚至还有一些预构建的 Linux 恶意软件分析环境。Remnux ([*https://<wbr>remnux<wbr>.org*](https://remnux.org))
    包含了你在 Linux 上进行恶意软件分析所需的几乎所有工具。Remnux 的替代方案包括 SANS SIFT Workstation ([*https://<wbr>www<wbr>.sans<wbr>.org<wbr>/tools<wbr>/sift<wbr>-workstation<wbr>/*](https://www.sans.org/tools/sift-workstation/))
    和 Tsurugi Linux ([*https://<wbr>tsurugi<wbr>-linux<wbr>.org*](https://tsurugi-linux.org))，但请注意，这些工具也主要专注于通用的取证和事件响应任务。最后，Security
    Onion ([*https://<wbr>securityonionsolutions<wbr>.com<wbr>/software*](https://securityonionsolutions.com/software))
    是一个专注于网络流量分析和监控的预配置虚拟机镜像。它也可以成为你恶意软件分析工具箱中的一项有力补充。
- en: Now that you have a basic understanding of what makes up an analysis lab, it’s
    time to build your own!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经基本了解了分析实验室的组成，是时候自己搭建一个了！
- en: <samp class="SANS_Futura_Std_Bold_B_11">Building Your Lab</samp>
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">搭建你的实验室</samp>
- en: This section walks you through setting up a basic malware analysis lab consisting
    of a host machine with a hypervisor, a Windows victim VM, and a Linux VM. There
    are simply too many variations of host OS and hypervisor for me to cover them
    all, so this lab assumes your host operating system is a variant of Linux, such
    as Ubuntu, and your hypervisor is either VMware Workstation or Oracle VirtualBox.
    The following steps should also work for a Windows or macOS host, but keep in
    mind that there may be slight differences you’ll need to adjust for.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将引导你搭建一个基本的恶意软件分析实验室，该实验室由一个安装了虚拟机管理程序的主机、一台 Windows 受害者虚拟机和一台 Linux 虚拟机组成。由于主机操作系统和虚拟机管理程序的组合种类繁多，我无法涵盖所有情况，因此本实验假设你的主机操作系统是
    Linux 的某个版本，如 Ubuntu，并且你的虚拟机管理程序是 VMware Workstation 或 Oracle VirtualBox。以下步骤也适用于
    Windows 或 macOS 主机，但请注意，可能需要对一些细节进行调整。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Choosing a Hypervisor</samp>
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">选择虚拟机管理程序</samp>
- en: 'Your choice of hypervisor will largely depend on the operating system of your
    host machine and the resources available to you. Here are some of the most popular
    hypervisors:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你选择的虚拟机管理程序将主要取决于你主机的操作系统和可用资源。以下是一些最受欢迎的虚拟机管理程序：
- en: '**Oracle VirtualBox**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**Oracle VirtualBox**'
- en: VirtualBox ([*https://<wbr>www<wbr>.virtualbox<wbr>.org*](https://www.virtualbox.org))
    is a feature-rich hypervisor that is free for noncommercial use. It includes most
    of the features that more costly hypervisors have, and it is supported on Windows,
    Linux, and macOS environments.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: VirtualBox ([*https://<wbr>www<wbr>.virtualbox<wbr>.org*](https://www.virtualbox.org))
    是一款功能丰富的虚拟机管理程序，供非商业用途免费使用。它包括了大多数收费虚拟机管理程序的功能，并且支持 Windows、Linux 和 macOS 环境。
- en: '**VMware Workstation**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**VMware Workstation**'
- en: VMware Workstation ([*https://<wbr>www<wbr>.vmware<wbr>.com<wbr>/products<wbr>/workstation<wbr>-pro<wbr>.html*](https://www.vmware.com/products/workstation-pro.html))
    has a large set of features and can be installed in a Windows or Linux host environment.
    It requires you to purchase a license, but VMware provides a free 30-day trial.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: VMware Workstation ([*https://<wbr>www<wbr>.vmware<wbr>.com<wbr>/products<wbr>/workstation<wbr>-pro<wbr>.html*](https://www.vmware.com/products/workstation-pro.html))
    拥有一套丰富的功能，可以安装在 Windows 或 Linux 主机环境中。它需要购买许可证，但 VMware 提供了一个免费的 30 天试用期。
- en: '**VMware Fusion**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**VMware Fusion**'
- en: VMware Fusion ([*https://<wbr>www<wbr>.vmware<wbr>.com<wbr>/products<wbr>/fusion<wbr>.html*](https://www.vmware.com/products/fusion.html))
    is the dedicated VMware hypervisor for macOS. It is very similar to VMware Workstation
    and also requires a license.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: VMware Fusion ([*https://<wbr>www<wbr>.vmware<wbr>.com<wbr>/products<wbr>/fusion<wbr>.html*](https://www.vmware.com/products/fusion.html))
    是适用于 macOS 的专用 VMware 虚拟化管理程序。它与 VMware Workstation 非常相似，也需要许可证。
- en: '**Microsoft Hyper-V**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**Microsoft Hyper-V**'
- en: Hyper-V ([*https://<wbr>learn<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/virtualization<wbr>/hyper<wbr>-v<wbr>-on<wbr>-windows<wbr>/about<wbr>/*](https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/about/))
    is a good, free hypervisor for Windows hosts. It can run Windows VMs as well as
    some Linux-based VMs.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Hyper-V ([*https://<wbr>learn<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/virtualization<wbr>/hyper<wbr>-v<wbr>-on<wbr>-windows<wbr>/about<wbr>/*](https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/about/))
    是适用于 Windows 主机的一个优秀且免费的虚拟化管理程序。它可以运行 Windows 虚拟机以及一些基于 Linux 的虚拟机。
- en: '**KVM (Kernel-based Virtual Machine)**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**KVM（基于内核的虚拟机）**'
- en: KVM ([*https://<wbr>linux<wbr>-kvm<wbr>.org*](https://linux-kvm.org)) is an
    open source hypervisor for Linux host environments.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: KVM ([*https://<wbr>linux<wbr>-kvm<wbr>.org*](https://linux-kvm.org)) 是适用于 Linux
    主机环境的开源虚拟化管理程序。
- en: As paid products, VMware Workstation and VMware Fusion have a few additional
    features that free or open source hypervisors may not have. However, in my experience,
    VirtualBox is completely suitable for malware analysis, and I don’t find myself
    missing any features while using it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 作为付费产品，VMware Workstation 和 VMware Fusion 拥有一些免费的或开源虚拟化管理程序所没有的附加功能。不过，根据我的经验，VirtualBox
    完全适合恶意软件分析，在使用过程中我并没有感觉缺少任何功能。
- en: After you’ve selected your hypervisor, you’ll need to download and install it.
    For VirtualBox, you can find the latest build of the hypervisor for your operating
    system, as well as further installation instructions, at [*https://<wbr>www<wbr>.virtualbox<wbr>.org<wbr>/wiki<wbr>/Downloads*](https://www.virtualbox.org/wiki/Downloads).
    To download a trial version of VMware Workstation, go to [*https://<wbr>www<wbr>.vmware<wbr>.com<wbr>/products<wbr>/workstation<wbr>-pro<wbr>/workstation<wbr>-pro<wbr>-evaluation<wbr>.html*](https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 选择虚拟化管理程序后，您需要下载并安装它。对于 VirtualBox，您可以在 [*https://<wbr>www<wbr>.virtualbox<wbr>.org<wbr>/wiki<wbr>/Downloads*](https://www.virtualbox.org/wiki/Downloads)
    找到适用于您的操作系统的最新版本虚拟化管理程序，并获取更多安装说明。要下载 VMware Workstation 的试用版，请访问 [*https://<wbr>www<wbr>.vmware<wbr>.com<wbr>/products<wbr>/workstation<wbr>-pro<wbr>/workstation<wbr>-pro<wbr>-evaluation<wbr>.html*](https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html)。
- en: After installing the hypervisor on your host operating system, you’ll need to
    verify a few settings.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 安装虚拟化管理程序后，您需要验证一些设置。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Verifying Hypervisor
    Network Settings</samp>
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">验证虚拟化管理程序的网络设置</samp>
- en: To implement networking in your VMs later, you need to inspect the VirtualBox
    hypervisor network settings first. In VirtualBox, navigate to **File****Host
    Network Manager**.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要在稍后为虚拟机实现网络功能，首先需要检查 VirtualBox 虚拟机管理程序的网络设置。在 VirtualBox 中，导航到**文件****主机网络管理器**。
- en: If no networks are listed here, click **Create** to make one. You can simply
    use the default settings (set the IPv4 Address to 192.168.56.1, the network mask
    to 255.255.255.0, and so on), but in the DHCP Server tab, make sure **Enable Server**
    is checked.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此处没有列出任何网络，请点击**创建**来创建一个。您可以简单地使用默认设置（将 IPv4 地址设置为 192.168.56.1，子网掩码设置为 255.255.255.0
    等等），但在 DHCP 服务器选项卡中，请确保选中**启用服务器**。
- en: 'If you don’t see a network listed in the VirtualBox Host Network Manager and
    you get an error such as “Error: VBoxNetAdpCtl: Error while adding new interface:
    failed to open /dev/vboxnetctl: No such file or directory” when you try to create
    one, try exiting VirtualBox, executing the following command in a terminal, and
    then restarting VirtualBox:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在 VirtualBox 主机网络管理器中没有看到任何网络，且在尝试创建网络时遇到“错误：VBoxNetAdpCtl：添加新接口时出错：无法打开 /dev/vboxnetctl：没有此类文件或目录”等错误，尝试退出
    VirtualBox，在终端执行以下命令，然后重新启动 VirtualBox：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you’re using the VMware Workstation hypervisor, nothing special is required
    in terms of network settings, and you can move on to the next step: downloading
    and installing Windows on your VM.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是 VMware Workstation 虚拟化管理程序，网络设置上没有特别要求，您可以继续进行下一步：在虚拟机上下载并安装 Windows。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Obtaining a Windows
    Image</samp>
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">获取 Windows 镜像</samp>
- en: To build the Windows victim VM, you’ll need a copy of Windows 7, 10, or 11,
    but I’ll use Windows 10 as an example going forward since it’s my first choice
    for malware analysis. You may already have a copy and license for Windows lying
    around. If not, you can get an ISO image file of Windows 10 from [*https://<wbr>www<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/software<wbr>-download<wbr>/windows10ISO*](https://www.microsoft.com/en-us/software-download/windows10ISO).
    Simply select the version of Windows you want to download, such as Windows 10
    (Multi-edition ISO), and select **Confirm**.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 Windows 受害者虚拟机，你需要一份 Windows 7、10 或 11 的拷贝，但我将以 Windows 10 作为示例，因为它是我进行恶意软件分析时的首选操作系统。你可能已经有一份
    Windows 的拷贝和许可。如果没有，你可以从 [*https://<wbr>www<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/software<wbr>-download<wbr>/windows10ISO*](https://www.microsoft.com/en-us/software-download/windows10ISO)
    获取 Windows 10 的 ISO 镜像文件。只需选择你想下载的 Windows 版本，例如 Windows 10（多版本 ISO），然后点击 **确认**。
- en: Next, you’ll select the language of the Windows installation file you want to
    download, as well as the architecture (either 64-bit or 32-bit). You’ll want the
    64-bit version unless you’ll explicitly be investigating 32-bit malware, which
    is unlikely. Set the Windows ISO file aside; you’ll need it later.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要选择要下载的 Windows 安装文件的语言以及架构（64 位或 32 位）。除非你明确要分析 32 位恶意软件，否则你应选择 64 位版本，这种情况比较少见。将
    Windows ISO 文件放到一旁，稍后你会用到它。
- en: '### <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Creating the
    Windows Victim VM</samp>'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '### <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">创建 Windows 受害者虚拟机</samp>'
- en: Now you’ll create your Windows VM inside your chosen hypervisor. I’ll start
    with VirtualBox. Later, I’ll discuss the same sequence of steps for VMware Workstation.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将开始在选择的虚拟机管理程序中创建 Windows 虚拟机。我将以 VirtualBox 为例，稍后我会讨论 VMware Workstation
    中相同的步骤。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: ''
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*The following instructions include a sequence of menus in the hypervisor.
    The steps will likely change slightly depending on the version of the hypervisor
    you’re using. If you’re missing a certain configuration window or your window
    appears different from what’s described here, the specific configuration will
    likely show up in another window later in the VM creation process.*'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*以下说明包含虚拟机管理程序中的一系列菜单。步骤可能会根据你使用的虚拟机管理程序版本有所变化。如果缺少某个配置窗口，或者你的窗口与此处描述的不同，具体的配置可能会在虚拟机创建过程中稍后显示在另一个窗口中。*'
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Creating a VM in VirtualBox</samp>
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">在 VirtualBox 中创建虚拟机</samp>
- en: If you’ve selected VirtualBox as your hypervisor, start the program and select
    **Machine****New**, then specify the name of the VM and the location where it
    will be stored on disk. Also specify the Type and Version of the operating system
    you’re installing. For our purposes, it should be **Microsoft Windows** and **Windows
    10 (64-bit)**, respectively. Click **Next**.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择了 VirtualBox 作为你的虚拟机管理程序，启动程序并选择 **机器****新建**，然后指定虚拟机的名称以及存储位置。同时指定你安装操作系统的类型和版本。对于我们的用途，类型应选择
    **Microsoft Windows**，版本选择 **Windows 10（64 位）**。点击 **下一步**。
- en: Next, you’ll need to configure some basic settings of the VM. Set the Memory
    Size to 4,096MB (which equates to 4GB) or higher. Evasive malware often uses memory
    size detection as an anti-VM technique, so it’s important to set this value as
    high as you can (4GB is typically plenty). This also will boost the VM performance.
    Then, select **Create a Virtual Hard Disk Now** under the Hard Disk settings and
    click **Next**.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要配置虚拟机的一些基本设置。将内存大小设置为 4,096MB（即 4GB）或更高。逃避检测的恶意软件通常会使用内存大小检测作为反虚拟机技巧，因此将此值设置得尽可能高是很重要的（4GB
    通常就足够）。这也会提升虚拟机的性能。然后，在硬盘设置中选择 **现在创建虚拟硬盘** 并点击 **下一步**。
- en: To configure the VM disk image, set a File Size of at least 80GB. Ensure that
    **VDI** is selected under Hard Disk File Type and that **Dynamically Allocated**
    is selected under Storage on Physical Hard Disk. Click **Create**.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置虚拟机的磁盘镜像，设置文件大小为至少 80GB。确保在硬盘文件类型中选择 **VDI**，并在物理硬盘存储中选择 **动态分配**。点击 **创建**。
- en: You should be able to see and select your new VM in the Oracle VM VirtualBox
    Manager screen, as shown in [Figure A-2](#figA-2).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够在 Oracle VM VirtualBox 管理器屏幕中看到并选择你创建的虚拟机，如 [图 A-2](#figA-2) 所示。
- en: '![](../images/figA-2.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figA-2.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-2: Your new VirtualBox
    VM in the Oracle VM VirtualBox Manager</samp>'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 A-2：在 Oracle VM VirtualBox
    管理器中创建的新虚拟机</samp>
- en: Now we’ll cover these same steps in VMware Workstation.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在 VMware Workstation 中介绍这些相同的步骤。
- en: '#### <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Creating a VM in VMware
    Workstation</samp>'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '#### <samp class="SANS_Futura_Std_Bold_Condensed_B_11">在 VMware Workstation
    中创建虚拟机</samp>'
- en: To create a new VM in VMware Workstation, navigate to **File****New Virtual
    Machine**. You should see the New Virtual Machine Wizard dialog. Under Virtual
    Machine Configuration, select **Typical (Recommended)** and then click **Next**.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 VMware Workstation 中创建新的虚拟机，请导航至**文件****新建虚拟机**。您应该会看到新虚拟机向导对话框。在虚拟机配置下，选择**典型（推荐）**，然后点击**下一步**。
- en: VMware Workstation should prompt you to select how to install the operating
    system. Choose **Use ISO Image** and browse for the Windows 10 ISO you previously
    downloaded. Then, click **Next**.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: VMware Workstation 应该会提示您选择安装操作系统的方式。选择**使用 ISO 镜像**，然后浏览到您之前下载的 Windows 10
    ISO 文件。接着，点击**下一步**。
- en: Now you’ll need to configure some basic Windows installation settings. Leave
    the Windows Product Key field empty (unless you have a product key to enter).
    For Version of Windows to Install, select the appropriate Windows version (for
    this example, **Windows 10 Pro**). In the Personalize Windows field, enter your
    username (and optionally a password) for your new Windows installation. Then,
    click **Next**.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您需要配置一些基本的 Windows 安装设置。将 Windows 产品密钥字段留空（除非您有产品密钥要输入）。在“安装 Windows 的版本”中，选择合适的
    Windows 版本（在本例中，**Windows 10 专业版**）。在个性化 Windows 字段中，输入您的用户名（并可选择设置密码）以用于新的 Windows
    安装。然后，点击**下一步**。
- en: Next, you’ll need to specify the name of your new VM as well as the location
    where it and all of its files should be stored. After configuring these settings,
    click **Next**.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要指定新虚拟机的名称以及它和所有文件应存储的位置。配置完这些设置后，点击**下一步**。
- en: To configure the VM disk, set the disk size to at least 80GB and then select
    either **Store Virtual Disk as Single File** or **Split Virtual Disk into Multiple
    Files**. This choice is strictly based on personal preference. I prefer the latter
    option because it’s easier to transfer smaller VM files to another hard disk or
    USB drive than it is to transfer one massive file. Once you’ve made your selection,
    click **Next**.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置虚拟机磁盘，请将磁盘大小设置为至少 80GB，然后选择**将虚拟磁盘存储为单个文件**或**将虚拟磁盘分割成多个文件**。这一选择完全基于个人喜好。我个人更倾向于后者，因为将较小的虚拟机文件转移到另一个硬盘或
    USB 驱动器上比转移一个庞大的文件要容易得多。一旦做出选择，点击**下一步**。
- en: Finally, you should see a screen showing an overview of the settings for the
    new VM. In a bit, we’ll customize this VM. For now, be sure to *deselect* **Automatically
    Power on This Virtual Machine After Creation** and then click **Finish** to create
    the VM.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您应该看到一个显示新虚拟机设置概述的屏幕。稍后，我们将自定义此虚拟机。现在，请确保取消选择**创建后自动启动此虚拟机**，然后点击**完成**以创建虚拟机。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Installing Windows in Your
    VM</samp>
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">在虚拟机中安装 Windows</samp>
- en: Now that you’ve created your VM in your chosen hypervisor, you’re ready to install
    Windows. To start this installation process, first you’ll need to point the VM
    to the Windows installer image (the ISO file you downloaded previously).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已在选择的虚拟化平台中创建了虚拟机，准备好安装 Windows。要开始安装过程，首先需要将虚拟机指向 Windows 安装镜像（即您之前下载的
    ISO 文件）。
- en: If you’re using VMware Workstation and you followed along with the previous
    instructions, the ISO is already loaded into the VM and ready to go! For VirtualBox,
    you’ll need to right-click your VM and select **Settings** and then **Storage**.
    Next, select the CD icon both under Storage Devices and in the Optical Drive drop-down
    menu under Attributes (see [Figure A-3](#figA-3)), navigate to the Windows ISO
    file on your disk, and click **OK** to save the configuration.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用 VMware Workstation 并且已经按照之前的指示操作，ISO 文件已经加载到虚拟机中并准备好使用！对于 VirtualBox，您需要右键点击虚拟机并选择**设置**，然后点击**存储**。接下来，选择存储设备下的
    CD 图标以及属性中的光驱下拉菜单（见[图 A-3](#figA-3)），导航到您磁盘上的 Windows ISO 文件，并点击**确定**保存配置。
- en: '![](../images/figA-3.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figA-3.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-3: Adding the Windows
    installer ISO to the VirtualBox VM</samp>'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 A-3：将 Windows 安装程序 ISO 添加到
    VirtualBox 虚拟机</samp>
- en: To begin the Windows installation sequence, boot up the VM. To do this in VirtualBox,
    right-click your VM, mouse over **Start**, and then select **Normal Start**. In
    VMware Workstation, right-click your VM, mouse over **Power**, and click **Start
    Up Guest**. The ISO file should load and kick off the Windows installation process.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始Windows安装过程，启动虚拟机。在VirtualBox中，右键点击虚拟机，鼠标悬停在**启动**上，然后选择**正常启动**。在VMware
    Workstation中，右键点击虚拟机，鼠标悬停在**电源**上，然后点击**启动来宾操作系统**。ISO文件应该会加载并启动Windows安装过程。
- en: The Windows installation process takes roughly 20–40 minutes. If you need help
    completing the Windows 10 installation steps, there are many resources online,
    such as at [*https://<wbr>answers<wbr>.microsoft<wbr>.com*](https://answers.microsoft.com).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Windows安装过程大约需要20到40分钟。如果您需要帮助完成Windows 10的安装步骤，可以参考在线资源，例如在[*https://<wbr>answers<wbr>.microsoft<wbr>.com*](https://answers.microsoft.com)。
- en: 'Once you’ve completed the installation, shut down your VM and remove the Windows
    ISO from it. (Some versions of VirtualBox and VMware Workstation remove it automatically.)
    For VirtualBox, you can remove the ISO image much like you added it: in the VM’s
    Storage settings, right-click the ISO image and select **Remove Disk from Virtual
    Drive**. For VMware Workstation, simply make sure **Connect at Power On** is unchecked
    in the VM’s CD/DVD settings.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 完成安装后，关闭虚拟机并移除Windows ISO文件。（某些版本的VirtualBox和VMware Workstation会自动移除它。）对于VirtualBox，您可以像添加ISO一样移除它：在虚拟机的存储设置中，右键点击ISO文件并选择**从虚拟驱动器中移除磁盘**。对于VMware
    Workstation，只需确保在虚拟机的CD/DVD设置中取消勾选**开机时连接**。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Tuning VM Settings
    for Concealment and Isolation</samp>
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">调整虚拟机设置以实现隐蔽性和隔离性</samp>
- en: Next, you’ll do some basic configuration and tuning to help limit the VM’s footprint,
    making it more difficult for evasive malware to detect that it is running inside
    a VM. Isolating the VM from the host operating system is also a safety measure
    to better protect the host during malware analysis. These settings are typically
    very easy to implement and quite effective, so don’t disregard them.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将进行一些基本配置和调优，以帮助限制虚拟机的足迹，使得难以被规避的恶意软件检测到它正在虚拟机中运行。将虚拟机与主机操作系统隔离也是一种安全措施，可以在恶意软件分析过程中更好地保护主机。这些设置通常非常容易实施，而且效果显著，因此不要忽视它们。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Memory and Processors</samp>
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">内存和处理器</samp>
- en: To address malware trying to detect a VM through CPU and memory enumeration,
    set your VM memory as high as possible (4GB at minimum) and use at least two processors.
    This may trick the malware into thinking it’s executing in a non-VM environment.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止恶意软件通过CPU和内存枚举来检测虚拟机，请将虚拟机的内存设置为尽可能高（至少4GB），并使用至少两个处理器。这可能会让恶意软件误以为它正在非虚拟机环境中执行。
- en: In VirtualBox, to modify the memory, go to **Settings****System** **Motherboard**.
    To modify the CPU settings, navigate to **Settings****System** **Processor**.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在VirtualBox中，要修改内存设置，请进入**设置****系统****主板**。要修改CPU设置，请进入**设置****系统****处理器**。
- en: To access the memory settings in VMware, go to **Settings****Memory**. For
    the CPU settings, go to **Settings****Processors**.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在VMware中，要访问内存设置，请进入**设置****内存**。要设置CPU，请进入**设置****处理器**。
- en: Another benefit of assigning more CPU power and memory to your analysis VMs
    is performance. The “beefier” your analysis VMs, the better they perform during
    malware analysis, especially given that some malware analysis tools use a lot
    of system resources. Keep in mind that evasive malware uses several techniques
    to interfere with analysis sandboxes and VMs based on system performance and resources,
    such as API hammering (covered in [Chapter 8](chapter8.xhtml)).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为分析虚拟机分配更多CPU和内存的另一个好处是性能提升。虚拟机越强大，在恶意软件分析过程中表现得越好，特别是一些恶意软件分析工具需要大量系统资源。请记住，规避性的恶意软件使用多种技术来干扰基于系统性能和资源的分析沙盒和虚拟机，例如API攻击（在[第8章](chapter8.xhtml)中详细介绍）。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Hard Disk Size</samp>
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">硬盘大小</samp>
- en: Checking the hard disk size is one of the oldest, simplest, and most common
    techniques malware uses to detect a VM. VMs are notorious for having small hard
    drives, so assign your virtual disk drive at least 60GB of space. Typically, I
    assign 80GB or more. If you followed the VirtualBox and VMware Workstation VM
    creation instructions earlier in this chapter, you’ve already done this step.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 检查硬盘大小是恶意软件用来检测虚拟机的最古老、最简单、最常见的技术之一。虚拟机通常有较小的硬盘，因此请为你的虚拟磁盘驱动器分配至少 60GB 的空间。通常，我会分配
    80GB 或更多。如果你按照本章前面提到的 VirtualBox 和 VMware Workstation 虚拟机创建说明操作过，那么你已经完成了这一步骤。
- en: To check your virtual disk drive storage space in VirtualBox, go to **Settings****Storage**.
    In VMware, go to **Settings****Hard Disk**.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查 VirtualBox 中虚拟磁盘驱动器的存储空间，进入**设置****存储**。在 VMware 中，进入**设置****硬盘**。
- en: You can extend the hard disk size of a VM retroactively, but it’s generally
    best to configure hard disk size when you create the VM.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以事后扩展虚拟机的硬盘大小，但通常最好在创建虚拟机时就配置硬盘大小。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Display Settings and Acceleration</samp>
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">显示设置和加速</samp>
- en: Features supporting *3D acceleration* add performance enhancements to a VM,
    but they may expose the hypervisor to certain malware. To protect against detection,
    disable these options. In VirtualBox, navigate to **Settings****Display** and
    on the Screen tab, make sure **Enable 3D Acceleration** isn’t selected.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 支持*3D 加速*的功能能提升虚拟机的性能，但也可能使虚拟化程序暴露于某些恶意软件之下。为了防止被检测到，应禁用这些选项。在 VirtualBox 中，进入**设置****显示**，然后在屏幕选项卡中确保没有选择**启用
    3D 加速**。
- en: In VMware, navigate to **Settings****Display** and deselect **Accelerate 3D
    Graphics**.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 VMware 中，进入**设置****显示**，然后取消选择**加速 3D 图形**。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">USB Controller Settings</samp>
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">USB 控制器设置</samp>
- en: Some malware attempts to enumerate the USB controller on the system. If the
    system is using outdated USB drivers (such as version 1.0 or 2.0, as opposed to
    the newer 3.0 drivers), the malware might assume it’s running in an analysis machine.
    To configure this setting, in VirtualBox go to **Settings****USB**, and in VMware
    Workstation go to **Settings****USB Controller**.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一些恶意软件试图枚举系统上的 USB 控制器。如果系统使用的是过时的 USB 驱动程序（如 1.0 或 2.0 版本，而不是更新的 3.0 驱动程序），恶意软件可能会认为它正在分析机上运行。要配置此设置，在
    VirtualBox 中进入**设置****USB**，在 VMware Workstation 中进入**设置****USB 控制器**。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Network Adapter Configurations</samp>
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">网络适配器配置</samp>
- en: 'A critical part of malware analysis in a VM is understanding and properly utilizing
    the right VM network configuration for the task at hand. There are different types
    of network configurations you can assign to your analysis lab VMs, but these are
    some of the most important modes:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟机中的恶意软件分析中，一个关键部分是理解并正确利用适合当前任务的虚拟机网络配置。你可以为分析实验室的虚拟机分配不同类型的网络配置，以下是一些最重要的模式：
- en: '**Not Attached**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**未连接**'
- en: The Not Attached mode in VirtualBox (for VMware Workstation, this setting is
    a checkbox labeled Connect at Power On, which must be unchecked) essentially switches
    off networking for the VM. The VM will be completely isolated from any networks,
    unable to communicate with other VMs, the local host’s network, or the internet.
    This is the safest option for analyzing malware. However, modern evasive malware
    expects some sort of network connection, so it may not execute fully (or at all)
    while the VM is in this mode. For this reason, I won’t discuss this mode further
    in this chapter.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: VirtualBox 中的“未连接”模式（在 VMware Workstation 中，该设置是一个名为“开机时连接”的复选框，必须取消选中）本质上是关闭虚拟机的网络功能。虚拟机将完全与任何网络隔离，无法与其他虚拟机、本地主机的网络或互联网通信。这是分析恶意软件时最安全的选项。然而，现代的规避型恶意软件通常期望某种网络连接，因此在虚拟机处于此模式时，它可能无法完全执行（或根本无法执行）。出于这个原因，我在本章中不会进一步讨论此模式。
- en: '**Host-Only**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**仅主机**'
- en: The Host-Only connection is a private network that is shared with the host operating
    system. In this configuration, the VM won’t have access to the internet. It will,
    however, have network access to the host and other VMs running on the host. This
    option is a good middle ground between safety and effectiveness, especially when
    you’re using another VM configured as a network gateway, as we’ll explore later
    in this chapter.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 主机仅连接是一种与主机操作系统共享的私人网络。在这种配置下，虚拟机无法访问互联网，但可以访问主机及其他运行在主机上的虚拟机。这个选项在安全性和效果之间提供了一个很好的折衷，尤其是当你使用另一台虚拟机作为网络网关时，正如我们稍后会在本章中探讨的那样。
- en: '**Bridged and NAT**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**桥接和NAT**'
- en: In both Bridged and Network Address Translation (NAT) modes, the VM is connected
    to the host’s local network, allowing it to access the internet and other network
    resources. In Bridged mode, the VM has its own IP address separate from the host.
    In NAT mode, the VM shares the host’s IP address and can’t be reached directly
    from the local network. The most important point here is that the VM (and any
    running malware!) is able to reach out to the internet. NAT mode provides a bit
    of extra security, so I use this mode if I need my VM to have internet access.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在桥接模式和网络地址转换（NAT）模式下，虚拟机连接到主机的本地网络，允许它访问互联网和其他网络资源。在桥接模式下，虚拟机有一个与主机不同的IP地址。在NAT模式下，虚拟机共享主机的IP地址，不能直接从本地网络访问。这里最重要的一点是，虚拟机（以及任何正在运行的恶意软件！）能够访问互联网。NAT模式提供了一些额外的安全性，因此如果我需要虚拟机访问互联网，我会选择这个模式。
- en: As a rule of thumb, I nearly always keep my analysis VMs in Host-Only mode.
    I use a Linux VM as a network gateway for the Windows victim VM to fake an internet
    connection, which we’ll talk about more later. However, as described in [Chapter
    6](chapter6.xhtml), an increasingly common anti-VM and anti-sandbox technique
    is for malware to attempt to contact a remote server to determine whether the
    VM is connected to the internet. Some malware might also download modules or payloads
    from an attacker-controlled server, and you can miss this activity if the analysis
    environment is isolated. In these special cases, it makes sense to put your VM
    in NAT or Bridged mode. Just be cognizant of the risks of connecting live malware
    to the internet. For example, the malware may be able to steal data from your
    VM (such as from your clipboard or any virtual shared drives) or even add your
    VM to a botnet, in which case your VM may be used without your permission to commit
    crime.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，我几乎总是将我的分析虚拟机设置为主机仅模式（Host-Only）。我使用一台Linux虚拟机作为网络网关，让Windows受害者虚拟机伪造互联网连接，我们稍后会详细讨论这个方法。然而，如[第6章](chapter6.xhtml)所述，一种越来越常见的反虚拟机和反沙盒技术是恶意软件尝试联系远程服务器，以确定虚拟机是否已连接到互联网。一些恶意软件还可能从攻击者控制的服务器下载模块或有效载荷，如果分析环境被隔离，你可能会错过这类活动。在这些特殊情况下，将虚拟机设置为NAT模式或桥接模式是有意义的。只需意识到将恶意软件连接到互联网的风险。例如，恶意软件可能会从你的虚拟机窃取数据（例如剪贴板内容或任何虚拟共享驱动器中的数据），甚至将你的虚拟机添加到僵尸网络中，在这种情况下，你的虚拟机可能会在未经过你同意的情况下被用于犯罪活动。
- en: To configure your VM’s network adapter in VirtualBox, navigate to **Settings****Network**,
    and on the Adapter 1 tab, make sure **Enable Network Adapter** is checked. Then,
    in the **Attached To** drop-down menu, change the VM network adapter to **Host-only
    Adapter**, **NAT**, or **Bridged**, depending on your needs (see [Figure A-4](#figA-4)).
    For now, select **NAT** or **Bridged** mode, as you’ll need access to the internet
    in a moment.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要在VirtualBox中配置虚拟机的网络适配器，请导航至**设置****网络**，在适配器1标签页中，确保勾选了**启用网络适配器**。然后，在**附加到**下拉菜单中，根据需要将虚拟机网络适配器更改为**主机仅适配器**、**NAT**或**桥接**（参见[图A-4](#figA-4)）。现在，选择**NAT**模式或**桥接**模式，因为稍后你将需要访问互联网。
- en: '![](../images/figA-4.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figA-4.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-4: Configuring your
    VM’s network adapter in VirtualBox</samp>'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图A-4：在VirtualBox中配置虚拟机的网络适配器</samp>
- en: If you’re unable to set the network adapter to NAT, you may need to first configure
    a NAT network in VirtualBox. To do this, navigate to **File****Preferences****Network**
    and click **+**.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你无法将网络适配器设置为NAT模式，你可能需要先在VirtualBox中配置一个NAT网络。要做到这一点，请导航至**文件****首选项****网络**，然后点击**+**。
- en: To configure the network adapter in VMware Workstation, navigate to **VM Settings****Hardware****Network
    Adapter** and select the network connection type you require (see [Figure A-5](#figA-5)).
    For now, select **NAT** or **Bridged** mode.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要在VMware Workstation中配置网络适配器，请导航至**虚拟机设置****硬件****网络适配器**，然后选择所需的网络连接类型（参见[图A-5](#figA-5)）。现在，选择**NAT**模式或**桥接**模式。
- en: '![](../images/figA-5.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figA-5.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-5: Configuring your
    VM’s network adapter in VMware Workstation</samp>'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 A-5：在 VMware Workstation 中配置虚拟机的网络适配器</samp>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">MAC Addresses</samp>
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">MAC 地址</samp>
- en: Also listed under the network configuration options are MAC address settings.
    Hypervisors often use standard MAC address ranges for their virtual network adapters.
    For example, VirtualBox may use the MAC address prefixes 00:00:7D, 00:01:5D, 00:0F:4B,
    00:10:E0, 00:14:4F, 00:21:28, 00:21:F6, 08:00:27, or 52:54:00\. VMware may use
    the prefixes 00:05:69, 00:0C:29, 00:1C:14, or 00:50:56.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 网络配置选项中还列出了 MAC 地址设置。虚拟化管理程序通常为其虚拟网络适配器使用标准的 MAC 地址范围。例如，VirtualBox 可能使用 MAC
    地址前缀 00:00:7D、00:01:5D、00:0F:4B、00:10:E0、00:14:4F、00:21:28、00:21:F6、08:00:27 或
    52:54:00。VMware 可能使用前缀 00:05:69、00:0C:29、00:1C:14 或 00:50:56。
- en: To circumvent MAC address–based VM detection, simply change the default MAC
    address of your VM to a different prefix.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为了绕过基于 MAC 地址的虚拟机检测，只需将虚拟机的默认 MAC 地址更改为不同的前缀。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*For a fairly complete list of MAC address prefixes you can use, see* [https://gist.github.com/aallan/b4bb86db86079509e6159810ae9bd3e4](https://gist.github.com/aallan/b4bb86db86079509e6159810ae9bd3e4).
    *Ideally, select a MAC address that corresponds to a well-known network adapter
    manufacturer.*'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '*要查看完整的 MAC 地址前缀列表，请访问* [https://gist.github.com/aallan/b4bb86db86079509e6159810ae9bd3e4](https://gist.github.com/aallan/b4bb86db86079509e6159810ae9bd3e4)。*理想情况下，选择与知名网络适配器制造商相对应的
    MAC 地址。*'
- en: To change your MAC address in VirtualBox, navigate to **Settings****Network**.
    On the Adapter 1 tab, click the arrow next to Advanced and then enter the new
    address in the MAC Address field (see [Figure A-6](#figA-6)).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 VirtualBox 中更改 MAC 地址，导航到 **设置****网络**。在“适配器 1”选项卡中，点击“高级”旁边的箭头，然后在 MAC
    地址字段中输入新地址（参见[图 A-6](#figA-6)）。
- en: '![](../images/figA-6.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figA-6.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-6: Network adapter
    settings in VirtualBox</samp>'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 A-6：VirtualBox 中的网络适配器设置</samp>
- en: For VMware, navigate to **Settings****Network Adapter****Advanced** and enter
    the new address in the MAC Address field ([Figure A-7](#figA-7)).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 VMware，导航到 **设置****网络适配器****高级**，并在 MAC 地址字段中输入新地址（参见[图 A-7](#figA-7)）。
- en: '![](../images/figA-7.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figA-7.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-7: Network adapter
    settings in VMware</samp>'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 A-7：VMware 中的网络适配器设置</samp>
- en: In both VirtualBox and VMware, you can generate a random MAC address simply
    by clicking the refresh symbol (VirtualBox) or **Generate** (VMware), next to
    the MAC Address field. The generated random addresses are still within the normal
    hypervisor address range, however, so it’s best to set this manually with a new
    prefix in order to avoid detection.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在 VirtualBox 和 VMware 中，你可以通过点击 MAC 地址字段旁边的刷新符号（VirtualBox）或 **生成**（VMware）来生成随机的
    MAC 地址。然而，生成的随机地址仍然在正常的虚拟化管理程序地址范围内，因此最好手动设置一个新的前缀，以避免被检测到。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Clipboard and Drag-and-Drop
    Settings</samp>
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">剪贴板和拖放设置</samp>
- en: Some hypervisors (including VMware Workstation and VirtualBox) allow clipboard
    sharing between host and guest systems. This means you can copy data from your
    host machine and paste it into your guest VM, and vice versa. This feature may
    be convenient, but it carries some risk. When clipboard sharing is enabled, any
    data in your host system’s clipboard is theoretically available to your guest
    VM. If you copy sensitive data (such as a password) into your clipboard on your
    host machine, malware running in the guest VM may be able to access it. Likewise,
    the malware could use the clipboard to write data to the host system or exploit
    potential vulnerabilities in the hypervisor. This scenario is unlikely but still
    possible.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一些虚拟化管理程序（包括 VMware Workstation 和 VirtualBox）允许主机与客户系统之间共享剪贴板。这意味着你可以从主机机器复制数据并粘贴到客户虚拟机中，反之亦然。此功能可能很方便，但也带来一定风险。当启用剪贴板共享时，主机系统剪贴板中的任何数据理论上都可以被客户虚拟机访问。如果你将敏感数据（如密码）复制到主机的剪贴板中，运行在客户虚拟机中的恶意软件可能会访问这些数据。同样，恶意软件也可能利用剪贴板向主机系统写入数据，或利用虚拟化管理程序中的潜在漏洞。虽然这种情况不太可能发生，但仍有可能。
- en: Drag-and-drop features allow you to drag (copy) files from your host machine
    to your guest VM, and vice versa. Much like clipboard sharing, this could expose
    your host machine to more risk than necessary, depending on the nature of the
    malware you’re analyzing. Enable these features only if absolutely required.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 拖放功能允许你将文件从主机机器拖（复制）到来宾虚拟机，反之亦然。就像剪贴板共享一样，这可能会将主机机器暴露于比必要的更多风险，具体取决于你正在分析的恶意软件的性质。仅在绝对需要时才启用这些功能。
- en: To turn off clipboard and file drag-and-drop settings in VirtualBox, navigate
    to **Settings****General****Advanced** and select **Disabled** in the **Shared
    Clipboard** and **Drag’n’Drop** drop-down menus (see [Figure A-8](#figA-8)).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要关闭 VirtualBox 中的剪贴板和文件拖放设置，请前往 **设置****常规****高级**，并在 **共享剪贴板** 和 **拖放** 下拉菜单中选择
    **禁用**（见 [图 A-8](#figA-8)）。
- en: '![](../images/figA-8.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figA-8.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-8: The clipboard and
    drag-and-drop settings in VirtualBox</samp>'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 A-8：VirtualBox 中的剪贴板和拖放设置</samp>
- en: In VMware, navigate to **Settings****Options****Guest Isolation**, as shown
    in [Figure A-9](#figA-9).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在 VMware 中，前往 **设置****选项****来宾隔离**，如 [图 A-9](#figA-9) 所示。
- en: '![](../images/figA-9.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figA-9.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-9: The clipboard and
    drag-and-drop settings in VMware</samp>'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 A-9：VMware 中的剪贴板和拖放设置</samp>
- en: In this menu, disable drag-and-drop and clipboard sharing by deselecting the
    **Enable drag and drop** and **Enable copy and paste** options.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在此菜单中，通过取消选择 **启用拖放** 和 **启用复制粘贴** 选项来禁用拖放和剪贴板共享。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Shared Folders</samp>
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">共享文件夹</samp>
- en: Shared folders allow easy sharing of files from guest to host operating system.
    Keep in mind, however, that malware will also have access to whatever is in your
    shared folder. (I learned this the hard way.) Enable shared folders only if necessary;
    if you must use them, set them to “read only” as a minimum precaution.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 共享文件夹允许从来宾操作系统到主机操作系统轻松共享文件。但请记住，恶意软件也会访问你共享文件夹中的任何内容。（我是在吃了大亏后才学到这一点。）只有在必要时才启用共享文件夹；如果必须使用它们，至少将其设置为“只读”作为最基本的预防措施。
- en: You can find shared folder settings in VirtualBox (see [Figure A-10](#figA-10))
    by going to **Settings****Shared Folders**.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 VirtualBox 中找到共享文件夹设置（见 [图 A-10](#figA-10)），方法是前往 **设置****共享文件夹**。
- en: '![](../images/figA-10.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figA-10.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-10: Shared folder
    settings in VirtualBox</samp>'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 A-10：VirtualBox 中的共享文件夹设置</samp>
- en: To add a shared folder in VirtualBox, click the icon of a folder with the plus
    sign (+) on the right side of the menu. You can also edit a shared folder configuration
    by double-clicking the shared folder under Machine Folders. To remove a shared
    folder, click the icon of a folder with the (X**)** sign.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 VirtualBox 中添加共享文件夹，点击菜单右侧带有加号 (+) 的文件夹图标。你也可以通过双击“机器文件夹”下的共享文件夹来编辑共享文件夹配置。要删除共享文件夹，点击带有（X**）**
    标志的文件夹图标。
- en: In VMware, shared folder settings are also under Settings  Shared Folders (see
    [Figure A-11](#figA-11)).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在 VMware 中，共享文件夹设置也在 设置  共享文件夹（见 [图 A-11](#figA-11)）。
- en: '![](../images/figA-11.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figA-11.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-11: Shared folder
    settings in VMware</samp>'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 A-11：VMware 中的共享文件夹设置</samp>
- en: You can add and edit shared folders from this menu. To disable shared folders,
    select **Disabled** under **Folder Sharing**.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从此菜单中添加和编辑共享文件夹。要禁用共享文件夹，请在 **文件夹共享** 下选择 **禁用**。
- en: '> <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '> <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>'
- en: '*Clipboard sharing, drag-and-drop settings, and shared folders are functional
    only if you have the optional VirtualBox Guest Additions or VMware Tools installed
    in your VM. We’ll discuss these tools later in this chapter.*'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '*剪贴板共享、拖放设置和共享文件夹仅在你的虚拟机中安装了可选的 VirtualBox 客户端附加工具或 VMware 工具时有效。我们将在本章稍后讨论这些工具。*'
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Installing Windows
    Malware Analysis Tools</samp>
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">安装 Windows 恶意软件分析工具</samp>
- en: You should now have a functioning Windows VM that is already tuned to be quite
    resistant to many basic VM detection and evasion techniques. This alone isn’t
    sufficient for your malware analysis journey, however; you’ll also need analysis
    tools. I recommend downloading and installing FLARE-VM ([*https://<wbr>www<wbr>.mandiant<wbr>.com<wbr>/resources<wbr>/blog<wbr>/flare<wbr>-vm<wbr>-the<wbr>-windows<wbr>-malware*](https://www.mandiant.com/resources/blog/flare-vm-the-windows-malware)),
    a fully configured malware analysis environment from Mandiant. It includes a series
    of scripts that prepares Windows for malware analysis tasks by downloading and
    installing many useful tools. It’s not a requirement to install FLARE-VM, but
    it can save you a lot of time. To download and install FLARE-VM, boot up your
    Windows VM and carefully follow the installation steps from the *README* at [*https://<wbr>github<wbr>.com<wbr>/mandiant<wbr>/flare<wbr>-vm*](https://github.com/mandiant/flare-vm).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 'If you choose not to install FLARE-VM, you should at least take the following
    measures to prepare your malware analysis environment:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: 1.  **Disable Windows updates.** Typically you won’t want your malware analysis
    environment to receive regular Windows updates, so it’s a good idea to disable
    them. For instructions, see [*https://<wbr>www<wbr>.windowscentral<wbr>.com<wbr>/how<wbr>-stop<wbr>-updates<wbr>-installing<wbr>-automatically<wbr>-windows<wbr>-10*](https://www.windowscentral.com/how-stop-updates-installing-automatically-windows-10).
    Keep in mind, however, that if you disable Windows updates, you might miss any
    attempts by malware to exploit versions of the operating system or application
    software you do not have installed.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 2.  **Disable Windows tamper protection.** Disabling Windows tamper protection
    is a necessary step before you can disable Microsoft Defender (described next).
    You can disable tamper protection in the **Windows Security****Virus and Threat
    Protection** settings. For more information on disabling tamper protection, see
    [*https://<wbr>support<wbr>.microsoft<wbr>.com<wbr>/en<wbr>-us<wbr>/windows<wbr>/prevent<wbr>-changes<wbr>-to<wbr>-security<wbr>-settings<wbr>-with<wbr>-tamper<wbr>-protection<wbr>-31d51aaa<wbr>-645d<wbr>-408e<wbr>-6ce7<wbr>-8d7f8e593f87*](https://support.microsoft.com/en-us/windows/prevent-changes-to-security-settings-with-tamper-protection-31d51aaa-645d-408e-6ce7-8d7f8e593f87).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: 3.  **Disable Microsoft Defender.** Disabling Defender prevents anti-malware
    software from interfering with your malware analysis environment. Learn how to
    disable it at [*https://<wbr>www<wbr>.windowscentral<wbr>.com<wbr>/how<wbr>-permanently<wbr>-disable<wbr>-windows<wbr>-defender<wbr>-windows<wbr>-10*](https://www.windowscentral.com/how-permanently-disable-windows-defender-windows-10).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: If you chose not to install FLARE-VM, you’ll need to manually install your tools.
    [Table A-1](#tabA-1) summarizes the tools I use in my environment, many of which
    I’ve mentioned throughout this book, and what they do.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择不安装FLARE-VM，你需要手动安装这些工具。[表A-1](#tabA-1)总结了我在环境中使用的工具，其中许多工具我在本书中提到过，以及它们的功能。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table A-1:</samp> <samp class="SANS_Futura_Std_Book_11">Windows-Based
    Malware Analysis Tools</samp>
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表A-1：</samp> <samp class="SANS_Futura_Std_Book_11">基于Windows的恶意软件分析工具</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Tool type</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Purpose</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Example(s)</samp> |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">工具类型</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">用途</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">示例</samp> |'
- en: '| --- | --- | --- |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Advanced task manager</samp> | <samp
    class="SANS_Futura_Std_Book_11">Interact with running processes and malware</samp>
    | <samp class="SANS_Futura_Std_Book_11">Process Hacker</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://processhacker.sourceforge.io</samp>](https://processhacker.sourceforge.io)
    |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">高级任务管理器</samp> | <samp class="SANS_Futura_Std_Book_11">与运行中的进程和恶意软件交互</samp>
    | <samp class="SANS_Futura_Std_Book_11">Process Hacker</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://processhacker.sourceforge.io</samp>](https://processhacker.sourceforge.io)
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Debugger</samp> | <samp class="SANS_Futura_Std_Book_11">Dynamically
    analyze malicious code</samp> | <samp class="SANS_Futura_Std_Book_11">x64dbg</samp>
    [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/x64dbg/x64dbg</samp>](https://github.com/x64dbg/x64dbg)
    |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">调试器</samp> | <samp class="SANS_Futura_Std_Book_11">动态分析恶意代码</samp>
    | <samp class="SANS_Futura_Std_Book_11">x64dbg</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/x64dbg/x64dbg</samp>](https://github.com/x64dbg/x64dbg)
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Disassembler</samp> | <samp class="SANS_Futura_Std_Book_11">Reverse
    engineer malware</samp> | <samp class="SANS_Futura_Std_Book_11">IDA Pro</samp>
    [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://hex-rays.com/ida-free/</samp>](https://hex-rays.com/ida-free/)<samp
    class="SANS_Futura_Std_Book_11">Ghidra</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/NationalSecurityAgency/ghidra</samp>](https://github.com/NationalSecurityAgency/ghidra)
    |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">反汇编器</samp> | <samp class="SANS_Futura_Std_Book_11">逆向工程恶意软件</samp>
    | <samp class="SANS_Futura_Std_Book_11">IDA Pro</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://hex-rays.com/ida-free/</samp>](https://hex-rays.com/ida-free/)<samp
    class="SANS_Futura_Std_Book_11">Ghidra</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/NationalSecurityAgency/ghidra</samp>](https://github.com/NationalSecurityAgency/ghidra)
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">File detector</samp> | <samp class="SANS_Futura_Std_Book_11">Detect
    various file types, identify packers and obfuscators, and more</samp> | <samp
    class="SANS_Futura_Std_Book_11">Detect It Easy</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/horsicq/DIE-engine/releases</samp>](https://github.com/horsicq/DIE-engine/releases)
    |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">文件检测器</samp> | <samp class="SANS_Futura_Std_Book_11">检测各种文件类型，识别打包器和混淆器等</samp>
    | <samp class="SANS_Futura_Std_Book_11">Detect It Easy</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/horsicq/DIE-engine/releases</samp>](https://github.com/horsicq/DIE-engine/releases)
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Hex editor</samp> | <samp class="SANS_Futura_Std_Book_11">View
    and modify binary data</samp> | <samp class="SANS_Futura_Std_Book_11">HxD</samp>
    [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://mh-nexus.de/en/hxd/</samp>](https://mh-nexus.de/en/hxd/)
    |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">十六进制编辑器</samp> | <samp class="SANS_Futura_Std_Book_11">查看和修改二进制数据</samp>
    | <samp class="SANS_Futura_Std_Book_11">HxD</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://mh-nexus.de/en/hxd/</samp>](https://mh-nexus.de/en/hxd/)
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Network monitoring tool</samp> | <samp
    class="SANS_Futura_Std_Book_11">Monitor and inspect the network interactions of
    a malware sample</samp> | <samp class="SANS_Futura_Std_Book_11">Wireshark</samp>
    [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://www.wireshark.org</samp>](https://www.wireshark.org)
    |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">网络监控工具</samp> | <samp class="SANS_Futura_Std_Book_11">监控和检查恶意软件样本的网络交互</samp>
    | <samp class="SANS_Futura_Std_Book_11">Wireshark</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://www.wireshark.org</samp>](https://www.wireshark.org)
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">PE analyzer</samp> | <samp class="SANS_Futura_Std_Book_11">Get
    an overview of PE-based malware</samp> | <samp class="SANS_Futura_Std_Book_11">PEStudio</samp>
    [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://www.winitor.com/download</samp>](https://www.winitor.com/download)
    |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">PE 分析器</samp> | <samp class="SANS_Futura_Std_Book_11">概览基于
    PE 的恶意软件</samp> | <samp class="SANS_Futura_Std_Book_11">PEStudio</samp> [<samp
    class="SANS_Futura_Std_Book_Oblique_I_11">https://www.winitor.com/download</samp>](https://www.winitor.com/download)
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Process monitor</samp> | <samp class="SANS_Futura_Std_Book_11">Monitor
    malware processes and their interactions with the operating system</samp> | <samp
    class="SANS_Futura_Std_Book_11">Procmon</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://learn.microsoft.com/en-us/sysinternals/</samp><samp
    class="SANS_Futura_Std_Book_Oblique_I_11">downloads/procmon</samp>](https://learn.microsoft.com/en-us/sysinternals/downloads/procmon)
    |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">进程监视器</samp> | <samp class="SANS_Futura_Std_Book_11">监视恶意软件进程及其与操作系统的交互</samp>
    | <samp class="SANS_Futura_Std_Book_11">Procmon</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://learn.microsoft.com/en-us/sysinternals/</samp><samp
    class="SANS_Futura_Std_Book_Oblique_I_11">downloads/procmon</samp>](https://learn.microsoft.com/en-us/sysinternals/downloads/procmon)
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Registry and baseline comparison utility</samp>
    | <samp class="SANS_Futura_Std_Book_11">Compare a system state to a baseline state
    after detonating malware</samp> | <samp class="SANS_Futura_Std_Book_11">Regshot</samp>
    [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://sourceforge.net/projects/regshot/</samp>](https://sourceforge.net/projects/regshot/)
    |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">注册表与基线对比工具</samp> | <samp class="SANS_Futura_Std_Book_11">在引爆恶意软件后，将系统状态与基线状态进行对比</samp>
    | <samp class="SANS_Futura_Std_Book_11">Regshot</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://sourceforge.net/projects/regshot/</samp>](https://sourceforge.net/projects/regshot/)
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Web proxy</samp> | <samp class="SANS_Futura_Std_Book_11">Intercept
    and monitor web requests initiated by the malware</samp> | <samp class="SANS_Futura_Std_Book_11">Fiddler</samp>
    [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://www.telerik.com/fiddler</samp>](https://www.telerik.com/fiddler)
    |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">Web 代理</samp> | <samp class="SANS_Futura_Std_Book_11">拦截并监视恶意软件发起的网页请求</samp>
    | <samp class="SANS_Futura_Std_Book_11">Fiddler</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://www.telerik.com/fiddler</samp>](https://www.telerik.com/fiddler)
    |'
- en: Depending on what kind of malware you’re analyzing, you may need other tools
    and software. For example, if you’re dealing with Excel and Word files, you’ll
    have to install Microsoft Office; to analyze the behaviors of malicious PDFs,
    you’ll probably need Adobe Acrobat; and if you’re investigating .NET executables,
    you’ll need the .NET framework and its associated libraries. Be sure to identify,
    install, and configure the software required for detonating the files you’ll be
    investigating. Note that FLARE-VM may not contain all of the tools you’ll need,
    so you’ll have to manually install them.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你分析的恶意软件类型，你可能需要其他工具和软件。例如，如果你处理的是 Excel 和 Word 文件，你需要安装 Microsoft Office；要分析恶意
    PDF 文件的行为，可能需要 Adobe Acrobat；如果你在调查 .NET 可执行文件，你需要 .NET 框架及其相关库。确保识别、安装并配置好你在分析文件时需要的所有软件。请注意，FLARE-VM
    可能不包含你所需要的所有工具，因此你可能需要手动安装它们。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Installing VM Tools</samp>
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">安装 VM 工具</samp>
- en: '*VM tools* is a generic term for hypervisor software that can be installed
    inside a guest VM. In VirtualBox, this tool set is called Guest Additions; in
    VMware Workstation, it’s VMware Tools. This software increases the usability and
    performance of the VM, and it also adds helpful features such as shared folders
    and clipboard sharing. Unfortunately, these tools also introduce anomalies, such
    as processes and driver files, that malware can use to detect the hypervisor.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '*VM 工具* 是一个通用术语，指可以安装在来宾虚拟机中的虚拟化软件。在 VirtualBox 中，这个工具集被称为“来宾附加组件”；在 VMware
    Workstation 中，它被称为 VMware 工具。这些软件可以提高虚拟机的可用性和性能，还提供了共享文件夹、剪贴板共享等实用功能。不幸的是，这些工具也会引入一些异常，比如进程和驱动程序文件，恶意软件可以利用这些异常来检测虚拟化环境。'
- en: 'Even with the risks, these tools add convenient functionality and extra performance
    for the analysis VM. I take a twofold approach: I have one Windows VM without
    the VM tools installed and one VM with them installed. I use my VM with the tools
    installed as my primary analysis environment. If the malware I’m investigating
    is particularly problematic in its evasion and VM detection capabilities, I switch
    to the toolless VM. This works well for me, and it likely will for you also.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 即使存在一定的风险，这些工具为分析虚拟机增加了便捷的功能和额外的性能。我采取双重方法：我有一台未安装 VM 工具的 Windows 虚拟机和一台已安装的虚拟机。我将已安装工具的虚拟机作为我的主要分析环境。如果我正在调查的恶意软件特别擅长逃避和检测虚拟机，我就切换到没有安装工具的虚拟机。这对我来说效果很好，也可能对你同样有效。
- en: Another option is to uninstall the VM tools using the Windows software uninstaller
    prior to detonating problematic malware. And finally, there are two tools, VBoxCloak
    and VMwareCloak, that have an option to clean up some of the files and *cruft*
    (unwanted processes and artifacts) left from installing VM tools. We’ll look at
    them later in the chapter.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是在引爆有问题的恶意软件之前，使用 Windows 软件卸载程序卸载 VM 工具。最后，还有两个工具，VBoxCloak 和 VMwareCloak，它们提供了清理安装
    VM 工具后遗留的某些文件和 *杂物*（不需要的进程和遗留物）的选项。我们将在本章后面讨论它们。
- en: To install Guest Additions in a VirtualBox VM, start the VM and, once Windows
    has booted, go to **Devices****Insert Guest Additions CD Image**.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 VirtualBox 虚拟机中安装 Guest Additions，启动虚拟机并在 Windows 启动后，进入 **设备****插入 Guest
    Additions CD 镜像**。
- en: The Guest Additions installer files are now accessible in the virtual CD drive
    of your VM. In my case, this is the *D:* drive. Double-click the **VBoxWindowsAdditions.exe**
    executable to start the Guest Additions installer (see [Figure A-12](#figA-12)).
    Don’t forget to reboot the VM after installing.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Guest Additions 安装程序文件现在可以在虚拟机的虚拟光驱中访问。在我的情况下，这是 *D:* 驱动器。双击 **VBoxWindowsAdditions.exe**
    可执行文件以启动 Guest Additions 安装程序（见[图 A-12](#figA-12)）。安装后不要忘记重新启动虚拟机。
- en: '![](../images/figA-12.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figA-12.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-12: Installing Guest
    Additions</samp>'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 A-12：安装 Guest Additions</samp>
- en: For more information or help with the installation process, see the VirtualBox
    Guest Additions documentation at [*https://<wbr>www<wbr>.virtualbox<wbr>.org<wbr>/manual<wbr>/ch04<wbr>.html*](https://www.virtualbox.org/manual/ch04.html).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 若需要更多信息或帮助，请参见 VirtualBox Guest Additions 文档：[*https://<wbr>www<wbr>.virtualbox<wbr>.org<wbr>/manual<wbr>/ch04<wbr>.html*](https://www.virtualbox.org/manual/ch04.html)。
- en: For newer versions of VMware Workstation, VMware Tools is often installed automatically.
    If you need to install it manually, the process is nearly identical to that for
    VirtualBox. In the VMware Workstation VM, navigate to **VM****Install VMware
    Tools**. (This option appears as **Reinstall VMware Tools** in my case, since
    I already have the tools installed, as shown in [Figure A-13](#figA-13).) As with
    VirtualBox Guest Additions, you’ll need to reboot the VM after installation.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 VMware Workstation 的较新版本，VMware Tools 通常会自动安装。如果需要手动安装，过程与 VirtualBox 的几乎完全相同。在
    VMware Workstation 的虚拟机中，导航至 **VM****安装 VMware Tools**。（在我的情况下，此选项显示为 **重新安装
    VMware Tools**，因为我已经安装了工具，如[图 A-13](#figA-13)所示。）与 VirtualBox Guest Additions
    相同，安装后你需要重新启动虚拟机。
- en: '![](../images/figA-13.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figA-13.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-13: Installing VMware
    Tools</samp>'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 A-13：安装 VMware Tools</samp>
- en: Now we’ll take a short break from our Windows VM to discuss how to set up a
    Linux VM.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们稍作休息，暂时离开 Windows 虚拟机，讨论如何设置 Linux 虚拟机。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Installing and Configuring
    a Linux VM</samp>
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">安装和配置 Linux 虚拟机</samp>
- en: 'One of the primary benefits of having a Linux VM in your lab is that it can
    act as a lightweight gateway for the Windows VM. As you detonate malware in your
    Windows VM, your Linux VM can intercept network traffic for later analysis, and
    it can even fake network and internet services, as you’ll see later. I use Remnux
    in my lab, so that’s what I’ll cover in this guide. Remnux, as mentioned earlier
    in this chapter, is a prepackaged, fully capable Linux malware analysis environment.
    It has most of the tools you’ll ever need for static analysis of malicious files
    and code, as well as some options for dynamic analysis (such as code emulation
    tools). You can download Remnux at [*https://<wbr>docs<wbr>.remnux<wbr>.org<wbr>/install<wbr>-distro<wbr>/get<wbr>-virtual<wbr>-appliance*](https://docs.remnux.org/install-distro/get-virtual-appliance).
    Simply select the appliance you need (either VirtualBox or VMware) and download
    and configure the VM according to the instructions provided. When you’re finished,
    you should have a working Remnux VM. Don’t forget to update Remnux using the following
    commands:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的实验室中拥有一个 Linux 虚拟机的主要好处之一是，它可以充当 Windows 虚拟机的轻量级网关。当你在 Windows 虚拟机中引爆恶意软件时，Linux
    虚拟机可以拦截网络流量以供后续分析，甚至可以伪造网络和互联网服务，稍后你将看到这一点。我在我的实验室中使用 Remnux，所以本指南将介绍这个工具。正如本章前面提到的，Remnux
    是一个预打包的、功能完备的 Linux 恶意软件分析环境。它包含了你进行恶意文件和代码静态分析时所需的大多数工具，还提供了一些动态分析选项（如代码仿真工具）。你可以在
    [*https://<wbr>docs<wbr>.remnux<wbr>.org<wbr>/install<wbr>-distro<wbr>/get<wbr>-virtual<wbr>-appliance*](https://docs.remnux.org/install-distro/get-virtual-appliance)
    下载 Remnux。只需选择所需的虚拟机（VirtualBox 或 VMware），然后按照提供的说明下载并配置虚拟机。完成后，你应该拥有一个正常运行的 Remnux
    虚拟机。别忘了使用以下命令更新 Remnux：
- en: '[PRE1]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-181
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*Before updating Remnux to its latest version, you’ll need to give Remnux internet
    access, so be sure to set its network adapter to NAT or Bridged mode before using
    it. You can set it back to Host-Only after the updates are completed.*'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '*在更新 Remnux 到最新版本之前，你需要为 Remnux 提供互联网访问权限，因此在使用之前，务必将其网络适配器设置为 NAT 或桥接模式。更新完成后，你可以将其恢复为仅主机模式。*'
- en: '### <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Manually Installing
    Linux VM Tools</samp>'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '### <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">手动安装 Linux 虚拟机工具</samp>'
- en: Using Remnux is optional, and you may choose to configure your own Linux VM
    from scratch instead. If you do, you’ll need to install your malware analysis
    tools yourself. [Table A-2](#tabA-2) lists some Linux tools I consider essential
    for malware analysis. These tools are all preinstalled and configured in Remnux.
    Note that some of these tools are also included in FLARE-VM for Windows.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Remnux 是可选的，你也可以选择从头开始配置自己的 Linux 虚拟机。如果你选择这样做，你需要自行安装恶意软件分析工具。[表 A-2](#tabA-2)
    列出了我认为在恶意软件分析中必不可少的一些 Linux 工具。这些工具在 Remnux 中已预安装并配置好。需要注意的是，一些工具也包含在 Windows
    版的 FLARE-VM 中。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table A-2:</samp> <samp class="SANS_Futura_Std_Book_11">Linux
    Malware Analysis Tools</samp>
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 A-2：</samp> <samp class="SANS_Futura_Std_Book_11">Linux
    恶意软件分析工具</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Tool</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Purpose</samp>
    |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">工具</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">用途</samp>
    |'
- en: '| --- | --- |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Base64dump</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/DidierStevens/DidierStevensSuite/blob/master/base64dump.py</samp>](https://github.com/DidierStevens/DidierStevensSuite/blob/master/base64dump.py)
    | <samp class="SANS_Futura_Std_Book_11">Identifies and extracts Base64-encoded
    data from a file</samp> |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">Base64dump</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/DidierStevens/DidierStevensSuite/blob/master/base64dump.py</samp>](https://github.com/DidierStevens/DidierStevensSuite/blob/master/base64dump.py)
    | <samp class="SANS_Futura_Std_Book_11">识别并提取文件中的 Base64 编码数据</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Binwalk</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/ReFirmLabs/binwalk</samp>](https://github.com/ReFirmLabs/binwalk)
    | <samp class="SANS_Futura_Std_Book_11">Analyzes binary images and extracts embedded
    files (such as malware that uses steganography techniques)</samp> |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">Binwalk</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/ReFirmLabs/binwalk</samp>](https://github.com/ReFirmLabs/binwalk)
    | <samp class="SANS_Futura_Std_Book_11">分析二进制镜像并提取嵌入的文件（例如使用隐写术技术的恶意软件）</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">CAPA</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/mandiant/capa</samp>](https://github.com/mandiant/capa)
    | <samp class="SANS_Futura_Std_Book_11">Scans for and detects suspicious signatures
    in executable files, such as potential evasion and obfuscation techniques</samp>
    |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">CAPA</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/mandiant/capa</samp>](https://github.com/mandiant/capa)
    | <samp class="SANS_Futura_Std_Book_11">扫描并检测可执行文件中的可疑签名，例如潜在的规避和混淆技术</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">ExifTool</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://exiftool.org</samp>](https://exiftool.org)
    | <samp class="SANS_Futura_Std_Book_11">Identifies file types and allows you to
    view and edit their metadata</samp> |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">ExifTool</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://exiftool.org</samp>](https://exiftool.org)
    | <samp class="SANS_Futura_Std_Book_11">识别文件类型并允许查看和编辑其元数据</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">FakeDNS</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/SocialExploits/fakedns/blob/main/fakedns.py</samp>](https://github.com/SocialExploits/fakedns/blob/main/fakedns.py)
    | <samp class="SANS_Futura_Std_Book_11">Responds to DNS queries and simulates
    a DNS service</samp> |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">FakeDNS</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/SocialExploits/fakedns/blob/main/fakedns.py</samp>](https://github.com/SocialExploits/fakedns/blob/main/fakedns.py)
    | <samp class="SANS_Futura_Std_Book_11">响应 DNS 查询并模拟 DNS 服务</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">FLOSS</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/mandiant/flare-floss</samp>](https://github.com/mandiant/flare-floss)
    | <samp class="SANS_Futura_Std_Book_11">Extracts encoded and obfuscated strings
    from a PE file</samp> |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">FLOSS</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/mandiant/flare-floss</samp>](https://github.com/mandiant/flare-floss)
    | <samp class="SANS_Futura_Std_Book_11">从 PE 文件中提取编码和混淆的字符串</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">INetSim (Internet Services Simulation
    Suite)</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://www.INetSim.org</samp>](https://www.INetSim.org)
    | <samp class="SANS_Futura_Std_Book_11">Simulates different network services (such
    as DNS, FTP, and HTTP)</samp> |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">INetSim (互联网服务模拟套件)</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://www.INetSim.org</samp>](https://www.INetSim.org)
    | <samp class="SANS_Futura_Std_Book_11">模拟不同的网络服务（如 DNS、FTP 和 HTTP）</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Speakeasy</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/mandiant/speakeasy</samp>](https://github.com/mandiant/speakeasy)
    | <samp class="SANS_Futura_Std_Book_11">Emulates executable code and shellcode</samp>
    |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">Speakeasy</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/mandiant/speakeasy</samp>](https://github.com/mandiant/speakeasy)
    | <samp class="SANS_Futura_Std_Book_11">模拟可执行代码和 shellcode</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">XORSearch</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://blog.didierstevens.com/programs/xorsearch/</samp>](https://blog.didierstevens.com/programs/xorsearch/)
    | <samp class="SANS_Futura_Std_Book_11">Scans a file for strings encoded and obfuscated
    in various formats (such as XOR or ROL)</samp> |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">XORSearch</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://blog.didierstevens.com/programs/xorsearch/</samp>](https://blog.didierstevens.com/programs/xorsearch/)
    | <samp class="SANS_Futura_Std_Book_11">扫描文件，查找以各种格式（如 XOR 或 ROL）编码和混淆的字符串</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Yara</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/Yara-Rules/rules</samp>](https://github.com/Yara-Rules/rules)
    | <samp class="SANS_Futura_Std_Book_11">Identifies and classifies malware</samp>
    |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">Yara</samp> [<samp class="SANS_Futura_Std_Book_Oblique_I_11">https://github.com/Yara-Rules/rules</samp>](https://github.com/Yara-Rules/rules)
    | <samp class="SANS_Futura_Std_Book_11">识别并分类恶意软件</samp> |'
- en: This section has only scratched the surface of the useful tools available on
    Remnux and for Linux-based analysis environments; there are also malicious document
    analysis tools, emulation tools, and memory forensics tools, but a full discussion
    of them is beyond the scope of this book.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分只是粗略介绍了 Remnux 和基于 Linux 的分析环境中可用的有用工具；还有恶意文档分析工具、模拟工具和内存取证工具，但对它们的全面讨论超出了本书的范围。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Configuring and Verifying
    Network Settings</samp>
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">配置和验证网络设置</samp>
- en: You’ve nearly completed the setup of your malware analysis lab, but there are
    a few more steps. Before proceeding, make sure the network adapters for *both*
    your Windows VM and Remnux VM are set to **Host-Only**. This is very important
    for the next steps you’ll take to finalize the lab setup.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 你几乎完成了恶意软件分析实验室的设置，但还有几个步骤。在继续之前，请确保你的 Windows 虚拟机和 Remnux 虚拟机的网络适配器都设置为 **仅主机**。这对于你接下来完成实验室设置的步骤非常重要。
- en: Next, you’ll need to get some network adapter information from the Remnux VM.
    Execute the <samp class="SANS_TheSansMonoCd_W7Bold_B_11">ifconfig</samp> command
    in a terminal in Remnux. [Figure A-14](#figA-14) shows some example output.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要从 Remnux 虚拟机中获取一些网络适配器信息。在 Remnux 的终端中执行 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">ifconfig</samp>
    命令。[图 A-14](#figA-14) 显示了一些示例输出。
- en: '![](../images/figA-14.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figA-14.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-14: Obtaining the
    Remnux operating system network configuration</samp>'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 A-14：获取 Remnux 操作系统网络配置</samp>
- en: The first entry listed in this output is what we care about. The <samp class="SANS_TheSansMonoCd_W5Regular_11">inet</samp>
    (IP) address of this VM is <samp class="SANS_TheSansMonoCd_W5Regular_11">192.168.56.101</samp>,
    and the <samp class="SANS_TheSansMonoCd_W5Regular_11">netmask</samp> is <samp
    class="SANS_TheSansMonoCd_W5Regular_11">255.255.255.0</samp>. Your results may
    be different depending on your specific Remnux configuration and whether you’re
    using VirtualBox or VMware. Jot down these values, as you’ll need them in a minute.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 输出中列出的第一个条目是我们关心的内容。该虚拟机的 <samp class="SANS_TheSansMonoCd_W5Regular_11">inet</samp>（IP）地址是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">192.168.56.101</samp>，子网掩码是 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">255.255.255.0</samp>。你的结果可能会有所不同，具体取决于你的
    Remnux 配置以及你是否使用 VirtualBox 或 VMware。记下这些值，因为你稍后会用到它们。
- en: Return to your Windows VM and navigate to the Windows network settings from
    the Start menu. Set the IP address of your Windows VM to the same subnet as your
    Remnux VM. (For example, if your Remnux VM IP address is <samp class="SANS_TheSansMonoCd_W5Regular_11">192.168.56.101</samp>,
    you might set your Windows VM IP address to <samp class="SANS_TheSansMonoCd_W5Regular_11">192.168.56.</samp><samp
    class="SANS_TheSansMonoCd_W7Bold_B_11">102</samp>.) If the netmask of your Remnux
    VM is <samp class="SANS_TheSansMonoCd_W5Regular_11">255.255.255.0</samp> (the
    default), enter <samp class="SANS_TheSansMonoCd_W7Bold_B_11">24</samp> in the
    Subnet Prefix Length field. For the Gateway address, enter the Remnux VM’s IP
    address (since Remnux will be acting as the gateway for the Windows VM), and enter
    it again for the Preferred DNS address. [Figure A-15](#figA-15) shows how this
    configuration looks in Windows 10.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到你的 Windows 虚拟机，并从开始菜单进入 Windows 网络设置。将 Windows 虚拟机的 IP 地址设置为与 Remnux 虚拟机相同的子网。（例如，如果你的
    Remnux 虚拟机 IP 地址是 <samp class="SANS_TheSansMonoCd_W5Regular_11">192.168.56.101</samp>，你可以将
    Windows 虚拟机的 IP 地址设置为 <samp class="SANS_TheSansMonoCd_W5Regular_11">192.168.56.</samp><samp
    class="SANS_TheSansMonoCd_W7Bold_B_11">102</samp>。）如果 Remnux 虚拟机的子网掩码是 <samp class="SANS_TheSansMonoCd_W5Regular_11">255.255.255.0</samp>（默认值），在子网前缀长度字段中输入
    <samp class="SANS_TheSansMonoCd_W7Bold_B_11">24</samp>。对于网关地址，输入 Remnux 虚拟机的 IP
    地址（因为 Remnux 将充当 Windows 虚拟机的网关），并在首选 DNS 地址中再次输入该地址。[图 A-15](#figA-15) 显示了此配置在
    Windows 10 中的样子。
- en: '![](../images/figA-15.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figA-15.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-15: Configuring Windows
    VM IP settings</samp>'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 A-15：配置 Windows 虚拟机 IP 设置</samp>
- en: Click **Save** to set the configuration. You may need to reboot your Windows
    VM.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **保存** 来设置配置。你可能需要重启你的 Windows 虚拟机。
- en: Now you’ll test the connection between the Remnux VM and Windows VM. Make sure
    both VMs are powered on, and execute a <samp class="SANS_TheSansMonoCd_W7Bold_B_11">ping</samp>
    command to the Remnux IP in your Windows VM, as shown in [Figure A-16](#figA-16).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将测试 Remnux 虚拟机与 Windows 虚拟机之间的连接。确保两个虚拟机都已开机，并在 Windows 虚拟机中执行对 Remnux IP
    的 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">ping</samp> 命令，如 [图 A-16](#figA-16)
    所示。
- en: '![](../images/figA-16.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figA-16.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-16: Testing the lab
    network configuration</samp>'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 A-16：测试实验室网络配置</samp>
- en: This command should return a <samp class="SANS_TheSansMonoCd_W5Regular_11">Reply</samp>,
    similar to the output shown here. If not, you’ll have a bit of troubleshooting
    to do. For starters, confirm that the Remnux VM is powered on, that the Windows
    and Remnux network adapters are set to Host-Only in your hypervisor, and that
    your Windows IP address configuration is correct.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令应返回一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Reply</samp>，类似于这里显示的输出。如果没有返回，你可能需要进行一些故障排除。首先，确认
    Remnux 虚拟机已开机，且 Windows 和 Remnux 的网络适配器在你的虚拟化管理程序中设置为“仅主机”（Host-Only），同时确保 Windows
    的 IP 地址配置正确。
- en: 'There is one last step to finalize your new lab environment: take snapshots
    of the VMs.  ### <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Taking
    and Restoring VM Snapshots</samp>'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '最后一步是完成你新的实验室环境：对虚拟机进行快照。  ### <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">创建和恢复虚拟机快照</samp>'
- en: As mentioned earlier in this chapter, snapshots allow you to save a VM in a
    certain state; in this case, that will be the pristine, clean state before the
    Windows VM is infected with any malware. First, shut down your Windows and Remnux
    VMs by initiating a normal shutdown within the operating system.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章前面提到的，快照允许你将虚拟机保存为某种状态；在这种情况下，就是在 Windows 虚拟机被恶意软件感染之前的原始干净状态。首先，通过操作系统内的正常关机来关闭你的
    Windows 和 Remnux 虚拟机。
- en: To take a snapshot in VirtualBox, select your Windows VM and go to **Snapshot****Take**.
    Be sure to name the snapshot something that makes sense to you (such as “Windows
    Malware Analysis – Clean”). Repeat this process for your Remnux VM.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 VirtualBox 中创建快照，请选择你的 Windows 虚拟机并前往 **Snapshot****Take**。确保为快照命名一个对你有意义的名称（例如“Windows
    恶意软件分析 - 干净”）。对于 Remnux 虚拟机也重复此过程。
- en: To take snapshots in VMware Workstation, right-click the Windows VM and select
    **Snapshot****Take Snapshot**. Again, name the snapshot something intuitive,
    and repeat these steps for Remnux.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 VMware Workstation 中创建快照，右键点击 Windows 虚拟机并选择 **Snapshot****Take Snapshot**。同样，为快照命名一个直观的名称，并对
    Remnux 重复这些步骤。
- en: To revert to a snapshot (for example, after you detonate and analyze a malware
    sample), you’ll need to access the hypervisor’s snapshot manager. In VirtualBox,
    you can access this by selecting a virtual machine and then navigating to **Machine****Tools****Snapshots**.
    The snapshots are listed in the right window pane, under Name. [Figure A-17](#figA-17)
    shows a list of snapshots for my VM. (I called the first snapshot in the list
    “BASE – 08 Aug 23 – Pristine Windows 10,” but you should name your snapshots whatever
    makes sense to you.) To restore a previous snapshot, right-click it and select
    **Restore**.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 要恢复到某个快照（例如，在你引爆并分析一个恶意软件样本之后），你需要访问虚拟化管理程序的快照管理器。在 VirtualBox 中，你可以通过选择虚拟机并导航到
    **Machine****Tools****Snapshots** 来访问它。快照会显示在右侧窗格中的 Name 下。[图 A-17](#figA-17)
    显示了我的虚拟机的快照列表。（我将列表中的第一个快照命名为“BASE – 08 Aug 23 – 原始 Windows 10”，但你可以根据自己的需要命名快照。）要恢复之前的快照，右键点击它并选择
    **Restore**。
- en: '![](../images/figA-17.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figA-17.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-17: The VirtualBox
    Snapshot Manager</samp>'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 A-17：VirtualBox 快照管理器</samp>
- en: In VMware Workstation, the Snapshot Manager is a bit more hidden away. To access
    it, right-click your VM and select **Snapshots****Snapshot Manager**. You’ll
    see a tree graph view of all your snapshots, as shown in [Figure A-18](#figA-18).
    Simply right-click a snapshot and select **Restore**.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在 VMware Workstation 中，快照管理器的位置稍微有点隐蔽。要访问它，右键点击你的虚拟机并选择 **Snapshots****Snapshot
    Manager**。你将看到一个树状图，显示所有快照，如 [图 A-18](#figA-18) 所示。只需右键点击某个快照并选择 **Restore**。
- en: '![](../images/figA-18.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figA-18.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-18: The VMware Snapshot
    Manager</samp>'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 A-18：VMware 快照管理器</samp>
- en: Snapshots are powerful tools not only for restoring a VM to a pristine state
    but also for preventing analysis headaches. For example, one of my strategies
    is taking snapshots of the VM at certain phases of debugging. Sometimes a debugger
    will crash during analysis, or the malware may execute code covertly to “escape”
    the debugger. Reverting to a previous debugging snapshot lets me avoid having
    to start all over again.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 快照是非常强大的工具，不仅可以将虚拟机恢复到原始状态，还能防止分析中的麻烦。例如，我的一种策略是在调试的某些阶段创建快照。有时调试器会在分析过程中崩溃，或者恶意软件可能会偷偷执行代码以“逃脱”调试器。恢复到之前的调试快照可以让我避免从头开始。
- en: If you followed the previous steps, you should have a working malware analysis
    lab. You have a Windows victim VM where malware can be safely detonated and a
    Linux VM for simulating network services and capturing network traffic. You’ve
    also configured your Windows VM virtual hardware for robustness against malware
    trying to detect it. Now let’s turn to how you can configure your operating system
    to further conceal the Windows VM.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你按照前面的步骤操作，你应该已经拥有一个正常工作的恶意软件分析实验室。你有一台Windows受害者虚拟机，可以安全地引爆恶意软件，还有一台Linux虚拟机，用于模拟网络服务和捕获网络流量。你还已经为Windows虚拟机配置了虚拟硬件，以抵御恶意软件的检测。现在，让我们来看一下如何配置操作系统以进一步隐蔽Windows虚拟机。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Windows Configurations for Concealment</samp>
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">Windows配置以实现隐蔽</samp>
- en: There are several optional Windows settings and tips that you can apply to your
    Windows VM to help hide it from context-aware malware. Most of these aren’t exactly
    advanced, and some might even seem a bit absurd, but incorporating them can make
    your analysis system more resilient and discreet.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个可选的Windows设置和技巧，可以应用于你的Windows虚拟机，帮助它躲避情境感知的恶意软件。大多数这些设置并不算高级，有些甚至看起来有些荒谬，但将它们纳入使用可以让你的分析系统更具韧性和隐蔽性。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Registry Data</samp>
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">注册表数据</samp>
- en: 'As you learned in [Chapter 4](chapter4.xhtml), the Windows registry contains
    a wealth of information related to the operating system and hardware that the
    malware could query to detect a hypervisor. Fortunately, you can modify many of
    these registry keys, values, and data to circumvent detection. You can do this
    directly in the Windows Registry Editor (RegEdit) or by using PowerShell. For
    example, run the following PowerShell command to modify a registry key’s value:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在[第4章](chapter4.xhtml)中所学，Windows注册表包含大量与操作系统和硬件相关的信息，恶意软件可能会查询这些信息以检测虚拟机监控程序。幸运的是，你可以修改许多这些注册表键值和数据，以规避检测。你可以直接在Windows注册表编辑器（RegEdit）中进行修改，或者使用PowerShell。例如，运行以下PowerShell命令来修改注册表键值：
- en: '[PRE2]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To rename the value inside <samp class="SANS_TheSansMonoCd_W5Regular_11">BIOSProductName</samp>
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">Fake BIOS</samp>, execute the
    following command:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 <samp class="SANS_TheSansMonoCd_W5Regular_11">BIOSProductName</samp> 的值重命名为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Fake BIOS</samp>，请执行以下命令：
- en: '[PRE3]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Many registry keys that could be of interest to malware are updated within different
    iterations of Windows and hypervisor versions and patches, so it’s not feasible
    to list them all here. Instead, I’ve created a simple script in PowerShell that
    scrubs the registry to hide some of these indicators and also accomplishes a number
    of other VM concealment tasks that I’ll discuss throughout this section. You can
    find the VirtualBox version of the script, VBoxCloak, at [*https://<wbr>github<wbr>.com<wbr>/d4rksystem<wbr>/VBoxCloak*](https://github.com/d4rksystem/VBoxCloak),
    and the VMware version, VMwareCloak, at [*https://<wbr>github<wbr>.com<wbr>/d4rksystem<wbr>/VMwareCloak*](https://github.com/d4rksystem/VMwareCloak).
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 许多可能对恶意软件感兴趣的注册表键值会在不同版本的Windows、虚拟机监控程序和补丁中更新，因此在这里列出所有这些键值并不可行。相反，我创建了一个简单的PowerShell脚本，能够清理注册表，隐藏其中的一些指示符，并完成其他一些虚拟机隐匿任务，我将在本节中讨论这些任务。你可以在
    [*https://<wbr>github<wbr>.com<wbr>/d4rksystem<wbr>/VBoxCloak*](https://github.com/d4rksystem/VBoxCloak)
    找到VirtualBox版本的脚本VBoxCloak，在 [*https://<wbr>github<wbr>.com<wbr>/d4rksystem<wbr>/VMwareCloak*](https://github.com/d4rksystem/VMwareCloak)
    找到VMware版本的脚本VMwareCloak。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Hostname and Domain
    Name</samp>
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">主机名和域名</samp>
- en: Since some advanced malware enumerates the analysis environment’s hostname,
    domain name, and user account information to determine if it’s running in a VM,
    it’s wise to set these values to something innocuous. The malware might look for
    strings such as <samp class="SANS_TheSansMonoCd_W5Regular_11">sandbox</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">virus</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">malware</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">VMware</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">virtualbox</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">test</samp>, or <samp class="SANS_TheSansMonoCd_W5Regular_11">cuckoo</samp>,
    for example. Ideally, you should set your system hostname and primary user account
    name when you install and configure the system, but you can also change these
    before detonating the malware.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 由于一些高级恶意软件会枚举分析环境的主机名、域名和用户账户信息，以确定它是否在虚拟机中运行，因此将这些值设置为无害的名称是明智的。恶意软件可能会寻找如
    <samp class="SANS_TheSansMonoCd_W5Regular_11">sandbox</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">virus</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">malware</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">VMware</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">virtualbox</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">test</samp>
    或 <samp class="SANS_TheSansMonoCd_W5Regular_11">cuckoo</samp> 等字符串。例如，最好在安装和配置系统时设置系统的主机名和主用户账户名，但你也可以在触发恶意软件之前更改这些设置。
- en: 'To change the system hostname using PowerShell, use the following command:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PowerShell 更改系统主机名，请使用以下命令：
- en: '[PRE4]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To change the local user account name, use this command:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改本地用户账户名，请使用以下命令：
- en: '[PRE5]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You’ll need to reboot the VM for these changes to take effect. Additionally,
    some malware (like certain variants of infostealers and ransomware) tests to see
    if a system is part of a corporate domain (or, in the case of more targeted malware,
    a *specific* corporate domain) before infecting it. Adding a fake domain name
    to your system can help you avoid detection in these cases. You can do this by
    creating an actual domain (using a domain controller) or, more simply, by issuing
    the following PowerShell command, which will “add” the system to the domain *corp.com*:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要重启虚拟机才能使这些更改生效。此外，一些恶意软件（如某些变种的窃取信息软件和勒索软件）会在感染系统之前，测试该系统是否属于企业域（或者，在更具针对性的恶意软件情况下，测试是否属于*特定的*企业域）。在这种情况下，向你的系统添加一个虚假的域名可以帮助你避免被检测到。你可以通过创建一个实际的域（使用域控制器）来实现，或者更简单地，通过执行以下
    PowerShell 命令，将系统“添加”到域 *corp.com*：
- en: '[PRE6]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Keep in mind that this registry change doesn’t add the Windows system to a real
    domain; it simply changes one configuration setting that malware may query. I’ve
    created a short script that automatically changes the system’s hostname and local
    user account name and then adds the VM to a fake domain using this registry trick.
    You can find this script at [*https://<wbr>github<wbr>.com<wbr>/d4rksystem<wbr>/hostname<wbr>-changer*](https://github.com/d4rksystem/hostname-changer).
    However, to fully simulate a domain environment, a better approach is to set up
    a real domain controller in your lab.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这个注册表更改并不会将 Windows 系统添加到真实的域中；它只是更改了恶意软件可能查询的一个配置设置。我创建了一个简短的脚本，自动更改系统的主机名和本地用户账户名，然后通过这个注册表技巧将虚拟机添加到一个虚假的域中。你可以在
    [*https://<wbr>github<wbr>.com<wbr>/d4rksystem<wbr>/hostname<wbr>-changer*](https://github.com/d4rksystem/hostname-changer)
    找到这个脚本。然而，要完全模拟一个域环境，最好的方法是在实验室中设置一个真实的域控制器。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Additional Tips and
    Tricks</samp>
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">额外的技巧和窍门</samp>
- en: 'Here are some additional configuration tips and tricks that may prove valuable
    in certain circumstances:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些额外的配置技巧和窍门，在某些情况下可能会非常有用：
- en: '**Renaming analysis tools and installing them in nonstandard locations**'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '**重命名分析工具并将其安装在非标准位置**'
- en: Some crafty malware looks for running analysis tools such as Wireshark or Procmon.
    Simply renaming the tool’s executable files (for example, from *wireshark.exe*
    to *krahseriw.exe*) before launching them can thwart this detection technique.
    (Note that renaming an executable in this way may break the tool’s functionality.)
    It can also be useful to install your tools in nondefault locations.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 一些狡猾的恶意软件会寻找正在运行的分析工具，如 Wireshark 或 Procmon。仅仅通过在启动之前重命名工具的可执行文件（例如，将 *wireshark.exe*
    改为 *krahseriw.exe*）就能阻止这种检测技术。（请注意，这种方式重命名可执行文件可能会破坏工具的功能。）将工具安装在非默认位置也可能会有用。
- en: '**Adding decoy files**'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '**添加诱饵文件**'
- en: Malware may inspect the victim system’s *Desktop* or *Documents* directories
    and infect the system only if there are files and documents there. It never hurts
    to add a few fake documents (*invoice.doc*, *passwords.txt*, and the like) to
    these directories to simulate a normal Windows user.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件可能会检查受害者系统的*桌面*或*文档*目录，只有在这些目录中有文件和文档时才会感染系统。向这些目录添加一些虚假的文档（例如 *invoice.doc*、*passwords.txt*
    等）来模拟正常的 Windows 用户是没有坏处的。
- en: '**Activating the mouse**'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '**激活鼠标**'
- en: Context-aware malware might sleep until the mouse moves or a certain mouse button
    is pressed. Moving the mouse manually and clicking can help circumvent these simple
    mouse detection techniques. You can even automate mouse activities inside your
    VMs and sandboxes using a Python library like PyAutoGUI ([*https://<wbr>pyautogui<wbr>.readthedocs<wbr>.io<wbr>/en<wbr>/latest<wbr>/*](https://pyautogui.readthedocs.io/en/latest/)).
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文感知的恶意软件可能会在鼠标移动或按下某个鼠标按钮时才会激活。手动移动鼠标和点击可以帮助绕过这些简单的鼠标检测技术。你甚至可以通过使用像 PyAutoGUI
    这样的 Python 库，在你的虚拟机（VM）和沙箱中自动化鼠标活动（[*https://<wbr>pyautogui<wbr>.readthedocs<wbr>.io<wbr>/en<wbr>/latest<wbr>/*](https://pyautogui.readthedocs.io/en/latest/)）。
- en: '**Changing the malware filename and path**'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '**更改恶意软件的文件名和路径**'
- en: Malware sometimes checks its running location to see its filename and path.
    Some malware sandboxes automatically name a malware file by its MD5 or SHA-1 hash,
    which can be a dead giveaway. To conceal your VM, it’s best to name the malware
    file something random and not include words like *malware*, *virus*, and *lab*
    in the filename or run path. Some malware also checks its run path to ensure it’s
    running from a directory the author intended and not from *Documents*, *Desktop*,
    and so on. Sometimes the malware may even verify it still has its original filename.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件有时会检查其运行位置，以查看其文件名和路径。一些恶意软件沙箱会自动使用恶意文件的 MD5 或 SHA-1 哈希命名文件，这可能会暴露其身份。为了隐藏你的虚拟机，最好将恶意软件文件命名为随机名称，并避免在文件名或路径中包含如
    *malware*（恶意软件）、*virus*（病毒）、*lab*（实验室）等词。一些恶意软件还会检查其运行路径，以确保它是从作者预期的目录中运行，而不是从
    *Documents*（文档）、*Desktop*（桌面）等目录中。有时，恶意软件甚至会验证它是否仍然保持着原始文件名。
- en: 'The tool exiftool (which I briefly mentioned earlier in this chapter), as well
    as many other PEStudio-type tools, allows you to view the Original File Name field
    of an executable file, which may be a hint into what the malicious file was originally
    named. In the following code, you can see the output of exiftool and an executable
    file’s original name:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 工具 exiftool（我在本章中稍微提到过）以及许多其他 PEStudio 类工具，可以让你查看可执行文件的“原始文件名”字段，这可能是恶意文件最初名称的线索。在下面的代码中，你可以看到
    exiftool 的输出和可执行文件的原始名称：
- en: '[PRE7]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can even often find clues in the strings of the malware file that indicate
    its original filename, as in this example (*epmntdrv.sys*):'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至常常可以在恶意软件文件的字符串中找到指示其原始文件名的线索，如这个例子（*epmntdrv.sys*）所示：
- en: '[PRE8]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Adding system uptime**'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '**增加系统启动时间**'
- en: Malware may check how long the system has been booted before fully executing,
    or it may not run if the system has an insufficient system uptime. Waiting a few
    minutes after booting your analysis VM before detonating the malware may trick
    it into executing. Better yet, prior to infecting the VM, let it run for 20 minutes
    and then take a snapshot of the system. You can later revert to this snapshot
    and the VM will already be in a state that has been running, ready for malware
    detonation.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件可能会检查系统启动了多长时间才完全执行，或者如果系统的启动时间不足，它可能不会运行。在启动分析虚拟机后等待几分钟再激活恶意软件，可能会欺骗它执行。更好的做法是在感染虚拟机之前，让虚拟机运行
    20 分钟，然后拍摄系统快照。之后你可以恢复到这个快照，虚拟机已经处于一个正在运行的状态，准备好进行恶意软件激活。
- en: '**Mimicking your organization or the malware target**'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '**模拟你的组织或恶意软件目标**'
- en: Before detonating a targeted malware sample, you can configure the environment
    to match the malware’s target as closely as possible. For example, adding the
    machine to a fake but realistic domain may help extract behaviors from the malware
    that you’d otherwise not see.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在激活目标恶意软件样本之前，你可以配置环境使其尽可能接近恶意软件的目标。例如，将机器加入到一个虚假的但看似真实的域中，可能有助于提取恶意软件的行为，否则你可能无法看到这些行为。
- en: '[Part II](part2.xhtml) discussed VM artifacts and detection in detail, so refer
    to those chapters for more information to help you conceal your analysis VMs.'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '[第二部分](part2.xhtml)详细讨论了虚拟机的痕迹和检测，因此请参考这些章节以获取更多信息，帮助你隐藏分析用的虚拟机。'
- en: <samp class="SANS_Futura_Std_Bold_B_11">Advanced VM and Hypervisor Hardening</samp>
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">高级虚拟机和虚拟化程序加固</samp>
- en: In addition to VM hardware and guest operating system configurations, you can
    apply so-called hardening techniques to your VMs and hypervisor. *Hardening* involves
    configuring the more advanced settings of the VM or hypervisor or even patching
    the hypervisor directly. This section discusses some of these tools and techniques
    for VMware Workstation and VirtualBox.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 除了虚拟机硬件和客户操作系统配置外，您还可以将所谓的加固技术应用于虚拟机和虚拟化管理程序。*加固* 涉及配置虚拟机或虚拟化管理程序的更高级设置，甚至直接修补虚拟化管理程序。本节将讨论
    VMware Workstation 和 VirtualBox 的一些工具和技术。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-263
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*These techniques are included in the book for completeness. Depending on your
    host operating system, guest operating system, and hypervisor version, they may
    be ineffective or even cause stability or performance issues in your VMs, so use
    them at your own risk.*'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '*这些技术包括在书中是为了完整性。根据您的主机操作系统、客户操作系统和虚拟化管理程序版本，它们可能无效，甚至可能导致虚拟机的稳定性或性能问题，因此请自行承担风险。*'
- en: '### <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Hardening VMware</samp>'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '### <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">加固 VMware</samp>'
- en: 'Each VMware VM has a VMX (*.vmx*) file that contains the machine’s configurations.
    You can modify this file to configure some of the more advanced options for your
    VM. The VMX file resides in the VM’s home directory. (For example, on my Linux
    host, it’s located at */home/<user>/VMware/<vm_name>/<vm_name>.vmx*.) VMware VMs
    have notable system manufacturer and model strings that can raise flags for malware.
    A default Windows VM running in VMware looks like this:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 VMware 虚拟机都有一个 VMX (*.vmx*) 文件，包含机器的配置。您可以修改此文件来配置虚拟机的一些更高级的选项。VMX 文件位于虚拟机的主目录中。（例如，在我的
    Linux 主机上，它位于 */home/<user>/VMware/<vm_name>/<vm_name>.vmx*。）VMware 虚拟机具有显著的系统制造商和型号字符串，可能会引起恶意软件的警觉。默认情况下，运行在
    VMware 上的 Windows 虚拟机看起来是这样的：
- en: '[PRE9]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Adding this simple line to the VMX file may help conceal your VM by mirroring
    the host’s system information in the guest VM:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 向 VMX 文件中添加这一简单的行，可能有助于通过镜像主机的系统信息来隐藏您的虚拟机：
- en: '[PRE10]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Malware may also attempt to detect the disk drive model of your VMware VM,
    which will be quite generic if the hardware is virtualized. To circumvent this,
    add these lines to your VMX file (you can replace “Samsung” with anything you’d
    like):'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件还可能尝试检测您的 VMware 虚拟机的硬盘驱动器型号，如果硬件是虚拟化的，它将非常通用。为了规避这一点，请将这些行添加到您的 VMX 文件中（您可以将“Samsung”替换为任何您喜欢的内容）：
- en: '[PRE11]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To fend off some <samp class="SANS_TheSansMonoCd_W5Regular_11">cpuid</samp>-
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">rdtsc</samp>-based VM detection
    techniques, add these lines to your VMX file:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 为了抵御一些基于 <samp class="SANS_TheSansMonoCd_W5Regular_11">cpuid</samp> 和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">rdtsc</samp> 的虚拟机检测技术，请在您的 VMX 文件中添加以下行：
- en: '[PRE12]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-274
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*As [Chapter 7](chapter7.xhtml) discussed, <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">cpuid</samp>
    can be used to detect whether a machine’s processor is virtualized, and <samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">rdtsc</samp> can be used to perform
    processor timing analysis.*'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '*正如[第七章](chapter7.xhtml)所讨论的，<samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">cpuid</samp>
    可以用来检测机器的处理器是否被虚拟化，而 <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">rdtsc</samp>
    可以用来执行处理器时序分析。*'
- en: These are simple changes, but as previously mentioned, your mileage may vary
    depending on your operating systems and versions. For example, I was unable to
    reflect my host system information to my VM using the <samp class="SANS_TheSansMonoCd_W5Regular_11">SMBIOS.reflectHost</samp>
    trick with a host system running Linux Ubuntu 20 and a Windows 10 guest VM. However,
    it worked on a Windows 10 host with a Windows 10 guest.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是简单的更改，但如前所述，根据您的操作系统和版本，效果可能不同。例如，我在使用运行 Linux Ubuntu 20 的主机和 Windows 10
    客户虚拟机时，无法通过 <samp class="SANS_TheSansMonoCd_W5Regular_11">SMBIOS.reflectHost</samp>
    技巧将主机系统信息反射到虚拟机中。然而，它在 Windows 10 主机和 Windows 10 客户虚拟机上是有效的。
- en: 'Here are some other known VMX configurations you can add to your VMs:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是您可以添加到虚拟机中的其他已知 VMX 配置：
- en: '[PRE13]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The first group in this configuration may help hide the VM by reflecting host
    information to the guest, rather than using the default VMware strings. The second
    group pertains to how binary code is emulated in the guest VM, how the VM interacts
    with the physical processor, and other functions. It may help circumvent malware
    that uses these settings to detect a VM. Many of these configurations are undocumented
    by VMware, but a few notable projects seek to identify and elaborate on them.
    For example, check out the research from Tom Liston and Ed Skoudis in their presentation
    “On the Cutting Edge: Thwarting Virtual Machine Detection,” at [*https://<wbr>handlers<wbr>.sans<wbr>.org<wbr>/tliston<wbr>/ThwartingVMDetection<wbr>_Liston<wbr>_Skoudis<wbr>.pdf*](https://handlers.sans.org/tliston/ThwartingVMDetection_Liston_Skoudis.pdf),
    and read about <samp class="SANS_TheSansMonoCd_W5Regular_11">monitor control</samp>
    in the list of advanced parameters at [*http://<wbr>sanbarrow<wbr>.com<wbr>/vmx<wbr>/vmx<wbr>-advanced<wbr>.html*](http://sanbarrow.com/vmx/vmx-advanced.html).
    There is also an older tool called VmwareHardenedLoader ([*https://<wbr>github<wbr>.com<wbr>/hzqst<wbr>/VmwareHardenedLoader*](https://github.com/hzqst/VmwareHardenedLoader)),
    which is a set of scripts and configurations that performs many of the aforementioned
    changes, plus some others.'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '此配置中的第一组可能有助于通过将主机信息反射到来宾操作系统来隐藏虚拟机，而不是使用默认的 VMware 字符串。第二组与二进制代码在来宾虚拟机中如何模拟、虚拟机如何与物理处理器交互以及其他功能相关。这些设置有助于绕过利用这些设置来检测虚拟机的恶意软件。这些配置大多数没有
    VMware 的文档记录，但一些重要的项目试图识别并详细说明它们。例如，查看 Tom Liston 和 Ed Skoudis 在他们的报告《On the Cutting
    Edge: Thwarting Virtual Machine Detection》中所做的研究，地址是 [*https://<wbr>handlers<wbr>.sans<wbr>.org<wbr>/tliston<wbr>/ThwartingVMDetection<wbr>_Liston<wbr>_Skoudis<wbr>.pdf*](https://handlers.sans.org/tliston/ThwartingVMDetection_Liston_Skoudis.pdf)，并在
    [*http://<wbr>sanbarrow<wbr>.com<wbr>/vmx<wbr>/vmx<wbr>-advanced<wbr>.html*](http://sanbarrow.com/vmx/vmx-advanced.html)
    上阅读有关 <samp class="SANS_TheSansMonoCd_W5Regular_11">监控控制</samp> 的高级参数列表。还有一个较旧的工具叫做
    VmwareHardenedLoader ([*https://<wbr>github<wbr>.com<wbr>/hzqst<wbr>/VmwareHardenedLoader*](https://github.com/hzqst/VmwareHardenedLoader))，它是一组脚本和配置，执行许多上述更改，并包含其他一些功能。'
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Hardening VirtualBox</samp>
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">加固 VirtualBox</samp>
- en: 'VirtualBox is a bit trickier to tune; it doesn’t have the equivalent of a VMX
    file. Instead, you’re forced to use VBoxManage, an application for Windows and
    Linux that’s specifically designed for making configuration changes to VirtualBox
    VMs. For example, to prevent some <samp class="SANS_TheSansMonoCd_W5Regular_11">rdtsc</samp>
    VM detection techniques, you can configure your VM by running the following commands
    in the command line:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 调整 VirtualBox 稍微棘手一些；它没有类似于 VMX 文件的配置文件。相反，你必须使用 VBoxManage，这是一个专门为 Windows
    和 Linux 设计的应用程序，用于对 VirtualBox 虚拟机进行配置更改。例如，为了防止一些 <samp class="SANS_TheSansMonoCd_W5Regular_11">rdtsc</samp>
    虚拟机检测技术，你可以通过在命令行中运行以下命令来配置你的虚拟机：
- en: '[PRE14]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Some configurations in VirtualBox are complicated in comparison to VMware and
    (at the time of this writing) are surprisingly difficult to find information on.
    Fortunately, since VirtualBox is open source, some members of the community have
    written hardeners for VirtualBox and its VMs. Much like for VMware, there is also
    VBoxHardenedLoader ([*https://<wbr>github<wbr>.com<wbr>/hfiref0x<wbr>/VboxHardenedLoader*](https://github.com/hfiref0x/VboxHardenedLoader)),
    which you may want to look into.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 相比 VMware，VirtualBox 中的一些配置比较复杂，并且（在撰写本文时）很难找到相关信息。幸运的是，由于 VirtualBox 是开源的，一些社区成员编写了针对
    VirtualBox 及其虚拟机的加固工具。就像 VMware 一样，也有 VBoxHardenedLoader ([*https://<wbr>github<wbr>.com<wbr>/hfiref0x<wbr>/VboxHardenedLoader*](https://github.com/hfiref0x/VboxHardenedLoader))，你可能想要了解一下。
- en: The main problem with some of these hardeners is that they can break with different
    iterations of the hypervisor, so they must be modified for each new version of
    VirtualBox. As with any tool or configuration mentioned in this chapter, your
    success depends on your specific lab environment.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 一些加固工具的主要问题是它们可能会在不同版本的虚拟化程序下失效，因此必须为每个新的 VirtualBox 版本进行修改。与本章中提到的任何工具或配置一样，你的成功取决于你具体的实验室环境。
- en: '## <samp class="SANS_Futura_Std_Bold_B_11">Stress-Testing Your VM</samp>'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '## <samp class="SANS_Futura_Std_Bold_B_11">压力测试您的虚拟机</samp>'
- en: Prior to detonating malware, particularly potentially evasive malware, it can
    be helpful to stress-test your Windows analysis VM against detection techniques
    by using a tool such as Pafish ([*https://<wbr>github<wbr>.com<wbr>/a0rtega<wbr>/Pafish*](https://github.com/a0rtega/Pafish)),
    as shown in [Figure A-19](#figA-19).
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在引爆恶意软件之前，尤其是潜在的规避恶意软件，使用像 Pafish（[*https://<wbr>github<wbr>.com<wbr>/a0rtega<wbr>/Pafish*](https://github.com/a0rtega/Pafish)）这样的工具来对你的
    Windows 分析虚拟机进行压力测试，以测试其对检测技术的应对能力，这在 [图 A-19](#figA-19) 中有所展示，会很有帮助。
- en: '![](../images/figA-19.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figA-19.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-19: Pafish running
    in a VirtualBox VM</samp>'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 A-19：Pafish 在 VirtualBox 虚拟机中的运行</samp>
- en: You can see here that Pafish detected my VM using several different indicators
    (denoted by the “traced!” message), such as CPU timing counters, lack of free
    disk space, and operating system uptime. Two tools similar to Pafish are Al-Khaser
    ([*https://<wbr>github<wbr>.com<wbr>/LordNoteworthy<wbr>/al<wbr>-khaser*](https://github.com/LordNoteworthy/al-khaser))
    and InviZzzible ([*https://<wbr>github<wbr>.com<wbr>/CheckPointSW<wbr>/InviZzzible*](https://github.com/CheckPointSW/InviZzzible)).
    Running multiple assessment tools inside your analysis VMs, both before and after
    you follow the guidance in this chapter, will give you an idea of how detectable
    the VMs are.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，Pafish 使用多个不同的指标（通过“traced!”信息表示）检测到我的虚拟机，例如 CPU 定时计数器、缺乏空闲磁盘空间和操作系统的正常运行时间。与
    Pafish 类似的两个工具是 Al-Khaser（[*https://<wbr>github<wbr>.com<wbr>/LordNoteworthy<wbr>/al<wbr>-khaser*](https://github.com/LordNoteworthy/al-khaser)）和
    InviZzzible（[*https://<wbr>github<wbr>.com<wbr>/CheckPointSW<wbr>/InviZzzible*](https://github.com/CheckPointSW/InviZzzible)）。在分析虚拟机中运行多个评估工具，无论是在你按照本章指导操作之前还是之后，都能帮助你了解虚拟机的可检测性。
- en: It’s very difficult to completely conceal a VM from all the techniques that
    stress-testing software like Pafish and Al-Khaser use. After all, these tools
    were designed specifically for VM detection. Keep in mind that the goal of malware
    analysis isn’t passing a stress test, and it’s very unlikely that a malware sample
    in the wild would use all of these techniques.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 完全隐藏虚拟机免受像 Pafish 和 Al-Khaser 等压力测试软件使用的所有技术是非常困难的。毕竟，这些工具专门为虚拟机检测而设计。请记住，恶意软件分析的目标不是通过压力测试，而且在野外，恶意软件样本使用所有这些技术的可能性也非常小。
- en: That said, you can score higher on a stress test (and, of course, thwart malware)
    by using a bare-metal analysis system or instrumentation tools, both of which
    we’ll touch on briefly at the end of this chapter.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，你可以通过使用裸机分析系统或仪器工具在压力测试中获得更高的分数（当然，也能阻止恶意软件），我们将在本章末尾简要介绍这两者。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Tips for Operational Security and Effectiveness</samp>
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">操作安全与效率的建议</samp>
- en: '*Operational security (OPSEC)* is critical for malware analysis. Proper OPSEC
    includes safely handling both the malware and the investigation tools to protect
    yourself and others, including your organization if you analyze malware professionally.'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '*操作安全（OPSEC）* 对于恶意软件分析至关重要。适当的操作安全包括安全地处理恶意软件和调查工具，以保护自己和他人，包括当你专业分析恶意软件时，保护你的组织。'
- en: Analyzing malware in any capacity is inherently risky. You could expose credentials
    or sensitive files from your host machine, especially if folder- and clipboard-sharing
    functionalities are enabled in your VM. You may unintentionally leak your home
    IP address to threat actors when investigating malicious infrastructure. Or, by
    allowing a malware sample to connect to a C2 server from your VM, you may tip
    off a threat actor to your investigation, which could have negative consequences.
    To mitigate these risks, this section contains some general tips for analyzing
    malware in your lab both safely and effectively.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 以任何方式分析恶意软件本质上都是有风险的。你可能会暴露主机机器的凭证或敏感文件，尤其是当虚拟机启用了文件夹和剪贴板共享功能时。你可能在调查恶意基础设施时无意间泄露自己的家庭
    IP 地址给威胁行为者。或者，通过允许恶意软件样本从你的虚拟机连接到 C2 服务器，你可能会向威胁行为者透露你的调查，可能会带来负面后果。为了减轻这些风险，本节提供了一些分析恶意软件时既安全又有效的常见建议。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Simulating Network
    Services</samp>
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">模拟网络服务</samp>
- en: Detonating malware in a VM connected to the internet or even a local network
    carries risk, so a safer alternative is to simulate network services. Using tools
    such as INetSim and FakeDNS, you can trick the malware into believing it’s operating
    in a networked or internet-accessible environment. INetSim can simulate many types
    of network services, such as FTP and HTTP, and FakeDNS specializes in simulating
    DNS services.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接到互联网或甚至本地网络的虚拟机中引爆恶意软件是有风险的，因此一个更安全的替代方案是模拟网络服务。使用INetSim和FakeDNS等工具，你可以欺骗恶意软件，让它相信自己在一个联网或可访问互联网的环境中运行。INetSim可以模拟多种类型的网络服务，如FTP和HTTP，而FakeDNS专门用于模拟DNS服务。
- en: 'Network simulation is a simple process using the Remnux VM you set up earlier.
    First, make sure that both the Remnux and Windows VM network adapters are in Host-Only
    mode and that the Remnux VM is powered on. Issue the following command in a terminal
    in Remnux:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 网络模拟是使用之前设置的Remnux虚拟机（VM）进行的一个简单过程。首先，确保Remnux和Windows虚拟机的网络适配器处于主机仅模式，并且Remnux虚拟机已经开启。在Remnux的终端中输入以下命令：
- en: '[PRE15]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The *accept-all-ips* script configures the gateway (Remnux, in this case) to
    accept all IPv4 and IPv6 addresses and redirect them to the corresponding local
    port. Simply put, this enables Remnux to intercept, monitor, or manipulate network
    traffic destined to a certain IP address from the Windows VM.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '*accept-all-ips*脚本将网关（此处为Remnux）配置为接受所有IPv4和IPv6地址，并将其重定向到相应的本地端口。简而言之，这使得Remnux能够拦截、监控或操控从Windows虚拟机发送到特定IP地址的网络流量。'
- en: 'Next, issue this command to start the INetSim service:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，输入此命令以启动INetSim服务：
- en: '[PRE16]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You should see output similar to that shown here:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似下面的输出：
- en: '[PRE17]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then issue the <samp class="SANS_TheSansMonoCd_W5Regular_11">fakedns</samp>
    command, like so:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 然后输入<samp class="SANS_TheSansMonoCd_W5Regular_11">fakedns</samp>命令，如下所示：
- en: '[PRE18]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This should generate output similar to the code shown here (you may not have
    as much output if your Windows VM is not yet powered on and communicating with
    the Remnux VM):'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会生成类似下面代码的输出（如果你的Windows虚拟机尚未开启并与Remnux虚拟机通信，你可能不会看到这么多输出）：
- en: '[PRE19]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Next, power up your Windows VM. After Windows is booted, test out FakeDNS and
    INetSim by navigating to your favorite website in a browser. If you’ve configured
    everything correctly, you should see something like the page shown in [Figure
    A-20](#figA-20).
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，启动你的Windows虚拟机。Windows启动后，通过浏览器访问你喜欢的网站来测试FakeDNS和INetSim。如果你正确配置了一切，你应该会看到类似[图A-20](#figA-20)所示的页面。
- en: '![](../images/figA-20.jpg)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figA-20.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure A-20: INetSim and FakeDNS
    working correctly</samp>'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图A-20：INetSim和FakeDNS正常工作</samp>
- en: INetSim and FakeDNS are successfully intercepting your web requests. Now, when
    you detonate malware in your Windows VM, the network connections will also be
    captured and can be analyzed later. When capturing and analyzing network traffic
    originating from your infected Windows VM, remember that Windows is quite noisy.
    Much of this traffic will be benign, so it’s your job to filter out what’s really
    of interest.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: INetSim和FakeDNS成功拦截了你的网页请求。现在，当你在Windows虚拟机中引爆恶意软件时，网络连接也将被捕获，并可以稍后进行分析。在捕获和分析来自受感染的Windows虚拟机的网络流量时，记住Windows的流量非常嘈杂。许多流量是无害的，因此你的任务是过滤出真正有意义的部分。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-312
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*INetSim stores detailed logs of network connections in* /var/log/inetsim*,
    and its configuration is stored in* /etc/inetsim/inetsim.conf*. Configuring INetSim
    is outside the scope of this chapter, but you can read more about it at* [https://www.inetsim.org/documentation.html](https://www.inetsim.org/documentation.html).'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '*INetSim将网络连接的详细日志存储在* /var/log/inetsim*，其配置文件存储在* /etc/inetsim/inetsim.conf*。配置INetSim超出了本章的范围，但你可以在*
    [https://www.inetsim.org/documentation.html](https://www.inetsim.org/documentation.html)上阅读更多相关信息。'
- en: '*In addition to INetSim and FakeDNS, Wireshark and FakeNet are tools at your
    disposal for monitoring network traffic and capturing malicious activity safely.*'
  id: totrans-314
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*除了INetSim和FakeDNS，Wireshark和FakeNet也是你可以用来安全地监控网络流量和捕捉恶意活动的工具。*'
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Concealing Your IP</samp>
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">隐藏你的IP</samp>
- en: If you decide to connect your VM to the internet (by configuring the VM’s network
    adapter in NAT or Bridged mode), you should always route your traffic through
    a VPN or similar technology to protect yourself. An additional benefit of using
    a VPN is that, depending on the VPN service provider, you may be able to choose
    your *exit node* (the point at which traffic exits the network). Some malware
    (for example, the SocGholish family) is targeted to a specific region or country,
    so if you’re using an internet-connected VM for analysis, configuring the VPN
    exit node to a country that the malware is targeting can be a good analysis tactic.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定将虚拟机连接到互联网（通过配置虚拟机的网络适配器为 NAT 或桥接模式），你应该始终通过 VPN 或类似技术来保护自己。使用 VPN 的额外好处是，取决于
    VPN 服务提供商，你可能能够选择你的*出口节点*（即流量离开网络的点）。一些恶意软件（例如 SocGholish 家族）是针对特定地区或国家的，因此，如果你使用联网的虚拟机进行分析，将
    VPN 出口节点配置为恶意软件目标所在的国家可能是一个不错的分析策略。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Shared Folders and
    File Transferring</samp>
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">共享文件夹和文件传输</samp>
- en: Given the risks of using clipboard sharing and shared folders, ideally these
    functions should be switched off unless you explicitly require them. Shared folders
    in particular are quite convenient for transferring malware files and other files
    between your host system and your VMs. If you choose to keep shared folders disabled
    (or if you didn’t install any VM tools), you can copy files to and from your host
    by configuring FTP software such as FileZilla ([*https://<wbr>filezilla<wbr>-project<wbr>.org*](https://filezilla-project.org)).
    Simply configure an FTP server on your Linux VM and an FTP client on your Windows
    VM, for example, and then transfer files between them.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到使用剪贴板共享和共享文件夹的风险，理想情况下，除非你明确需要它们，否则应该关闭这些功能。特别是共享文件夹对于在宿主系统和虚拟机之间传输恶意软件文件及其他文件非常方便。如果你选择保持禁用共享文件夹（或如果你没有安装任何虚拟机工具），你可以通过配置
    FTP 软件（如 FileZilla）来复制文件。只需在你的 Linux 虚拟机上配置 FTP 服务器，在 Windows 虚拟机上配置 FTP 客户端，然后在它们之间传输文件即可。[(*https://<wbr>filezilla<wbr>-project<wbr>.org*)](https://filezilla-project.org)
- en: '### <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Updating Software</samp>'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '### <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">更新软件</samp>'
- en: Keep your hypervisor software up to date. Hypervisor software is a prime target
    for malware authors, and it’s not uncommon for vulnerabilities to be discovered
    and reported for software like VMware Workstation and VirtualBox. For reference,
    at the time of this writing, a quick search on the vulnerability database site
    CVEdetails.com showed 171 known vulnerabilities for VMware Workstation and 326
    known vulnerabilities for VirtualBox! These vulnerabilities are not all critical,
    of course, but they’re a risk to keep in mind. They could be used to attack your
    host operating system if not properly patched. You should also keep your VM guest
    software, such as VMware Tools and VirtualBox Guest Additions, updated to the
    latest version.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 保持你的虚拟化软件更新。虚拟化软件是恶意软件作者的主要攻击目标，像 VMware Workstation 和 VirtualBox 这样的软件经常会被发现并报告出漏洞。参考一下，在撰写本文时，通过快速搜索
    CVEdetails.com 的漏洞数据库网站，显示 VMware Workstation 存在 171 个已知漏洞，VirtualBox 存在 326 个已知漏洞！当然，这些漏洞并非都非常严重，但它们是一个必须牢记的风险。如果没有得到适当的修补，这些漏洞可能会被用来攻击你的宿主操作系统。你还应保持虚拟机来宾软件的更新，比如
    VMware Tools 和 VirtualBox Guest Additions，确保它们是最新版本。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Bare-Metal Analysis</samp>
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">裸机分析</samp>
- en: It’s very difficult, if not impossible, to make a VM appear identical to a real,
    physical machine when you’re dealing with advanced malware. You might be able
    to fool checks like querying the registry or enumerating running processes, but
    advanced malware will likely use more sophisticated tactics, such as CPU timing
    checks, or perhaps even currently unknown techniques. You may be able to circumvent
    these types of checks using techniques such as manually patching problematic areas
    of code (which can be very time-consuming) or using binary instrumentation techniques
    (discussed in the next section), but sometimes the best and most efficient solution
    is bare-metal analysis.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理高级恶意软件时，要让虚拟机（VM）看起来与真实的物理机器完全相同是非常困难的，甚至可以说是不可能的。你或许能够通过查询注册表或列举正在运行的进程来欺骗一些检测手段，但高级恶意软件可能会使用更复杂的策略，比如
    CPU 定时检查，或者甚至是目前尚未公开的技术。你可能能够通过手动修补代码中的问题区域（这可能非常耗时）或使用二进制插装技术（将在下一节中讨论）来绕过这些检查，但有时最好的和最有效的解决方案是裸机分析。
- en: The term *bare metal* refers to an operating system running directly on the
    underlying hardware rather than virtualized in a hypervisor. This could be as
    simple as a spare laptop you’ve got lying around or as complex as a server rack
    full of physical devices with freshly installed operating systems. Detonating
    and analyzing malware on a bare-metal system is as close as you can get to how
    malware will actually behave on a real victim host. The hypervisor artifacts mentioned
    in this chapter and in [Part II](part2.xhtml) should be nonexistent, and more
    advanced VM detection techniques (such as CPU timing analysis) won’t be effective.
    Bare-metal systems are even more powerful with some basic malware analysis tools
    installed. Just as in a VM, you might want to install tools such as a disassembler,
    a debugger, and process and network monitors, for example. In fact, I install
    many of the same tools in my bare-metal analysis system as in my analysis VMs.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '*裸机*这个术语指的是操作系统直接运行在底层硬件上，而不是在虚拟化的管理程序中运行。这可以是你闲置的备用笔记本电脑，也可以是一个充满了物理设备、刚安装了操作系统的服务器机架。在裸机系统上引爆和分析恶意软件是最接近恶意软件在真实受害主机上实际行为的方式。本章以及[第二部分](part2.xhtml)中提到的管理程序伪装痕迹应该是不存在的，且更先进的虚拟机检测技术（例如CPU时序分析）将无效。如果安装了一些基本的恶意软件分析工具，裸机系统将变得更强大。就像在虚拟机中一样，你可能需要安装一些工具，如反汇编器、调试器，以及进程和网络监视器等。事实上，我在我的裸机分析系统中安装了许多与分析虚拟机相同的工具。'
- en: While the positives of bare-metal analysis usually outweigh the negatives, there
    are a few things to be aware of. First and foremost, its effectiveness depends
    on your objectives. Second, since there’s no underlying hypervisor, like VirtualBox
    or VMware, you can’t take snapshots of a clean system. In VirtualBox, for example,
    after detonating a malware sample, you can simply revert the VM to a pristine
    state, which is not so easy with a bare-metal analysis setup. There are also special
    tools, such as Deep Freeze, Microsoft Deployment Toolkit (MDT), FOG Project, Clonezilla,
    and Rollback Rx. These tools allow snapshot-like capabilities, but they introduce
    some amount of overhead, and this type of malware analysis environment doesn’t
    scale very well. Additionally, while bare-metal systems won’t have the hypervisor-related
    artifacts that malware can detect (such as registry keys and driver files on the
    disk), they might have other analysis tools installed that give you away.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管裸机分析的优点通常超过缺点，但也有一些需要注意的事项。首先，它的有效性取决于你的目标。其次，由于没有底层的管理程序（如VirtualBox或VMware），你无法像在虚拟机中那样拍摄干净系统的快照。例如，在VirtualBox中，经过恶意软件样本引爆后，你可以简单地将虚拟机恢复到初始状态，但在裸机分析设置中，这并非易事。也有一些专门的工具，比如Deep
    Freeze、Microsoft Deployment Toolkit (MDT)、FOG Project、Clonezilla和Rollback Rx。这些工具提供类似快照的功能，但会引入一些额外的开销，且这种类型的恶意软件分析环境的可扩展性不太好。此外，虽然裸机系统不会有恶意软件可以检测到的管理程序相关的伪装痕迹（如磁盘上的注册表键和驱动程序文件），但它们可能安装了其他分析工具，可能会暴露你的身份。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Binary Instrumentation and Emulation</samp>
  id: totrans-325
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">二进制插桩和仿真</samp>
- en: 'There are two more tools you might want to add to your malware analysis toolbox:
    binary instrumentation and emulation. *Binary instrumentation* is a method of
    modifying, or instrumenting, binary data and code to achieve some end result.
    In the context of malware analysis, binary instrumentation can be used to modify
    code to streamline the analysis process; this in turn will allow you to circumvent
    anti-analysis techniques. There are two primary forms of binary instrumentation:
    *dynamic binary instrumentation (DBI)* and *static binary instrumentation (SBI)*.
    DBI patches a program’s instructions during runtime, and SBI makes changes to
    code prior to execution.'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还想将两个工具添加到你的恶意软件分析工具箱中：二进制插桩和仿真。*二进制插桩*是一种修改或插入二进制数据和代码的方法，以实现某种最终结果。在恶意软件分析的背景下，二进制插桩可以用来修改代码，以简化分析过程；这反过来可以让你绕过反分析技术。二进制插桩有两种主要形式：*动态二进制插桩
    (DBI)* 和 *静态二进制插桩 (SBI)*。DBI在程序运行时修补程序的指令，而SBI则在执行之前对代码进行更改。
- en: Binary instrumentation, specifically DBI, can complement other analysis tools,
    like debuggers. Using DBI, a reverse engineer can dynamically modify assembly
    instructions, which can be especially useful for analyzing context-aware malware.
    For example, problematic VM detection instructions such as <samp class="SANS_TheSansMonoCd_W5Regular_11">cpuid</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">rdtsc</samp> can be modified
    or removed on the fly while the malware is running. Additionally, DBI is useful
    for monitoring and modifying Windows API calls and automating certain malware
    analysis tasks.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制插桩，特别是DBI（动态二进制插桩），可以与其他分析工具（如调试器）互补。使用DBI，逆向工程师可以动态修改汇编指令，这对于分析具有上下文感知的恶意软件特别有用。例如，像<samp
    class="SANS_TheSansMonoCd_W5Regular_11">cpuid</samp>和<samp class="SANS_TheSansMonoCd_W5Regular_11">rdtsc</samp>这类有问题的虚拟机检测指令可以在恶意软件运行时即时修改或删除。此外，DBI还可以用来监视和修改Windows
    API调用，并自动化某些恶意软件分析任务。
- en: Binary instrumentation is not a silver bullet, however. DBI can introduce a
    lot of performance overhead, which can be problematic during the analysis process;
    it can also introduce time delays that malware might detect.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，二进制插桩并不是万能的。DBI可能会引入较大的性能开销，这在分析过程中可能成为问题；它还可能引入时间延迟，恶意软件可能会检测到这些延迟。
- en: 'Binary instrumentation is a complex topic, so we won’t go into more depth here,
    but some of the available binary instrumentation frameworks are summarized here:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制插桩是一个复杂的话题，因此我们不会在这里深入探讨，但这里总结了一些可用的二进制插桩框架：
- en: '**DynamoRIO**'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '**DynamoRIO**'
- en: A tool for manipulating and transforming code at runtime, while the target malware
    is executing. See [*https://<wbr>dynamorio<wbr>.org*](https://dynamorio.org).
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 一个用于在目标恶意软件执行期间动态操作和转换代码的工具。请参阅[*https://<wbr>dynamorio<wbr>.org*](https://dynamorio.org)。
- en: '**FRIDA**'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '**FRIDA**'
- en: A dynamic instrumentation toolkit based on Python and JavaScript. See [*https://<wbr>frida<wbr>.re*](https://frida.re)
    and also the post “Malware Analysis with Dynamic Binary Instrumentation Frameworks”
    from the BlackBerry Research & Intelligence Team at [*https://<wbr>blogs<wbr>.blackberry<wbr>.com<wbr>/en<wbr>/2021<wbr>/04<wbr>/malware<wbr>-analysis<wbr>-with<wbr>-dynamic<wbr>-binary<wbr>-instrumentation<wbr>-frameworks*](https://blogs.blackberry.com/en/2021/04/malware-analysis-with-dynamic-binary-instrumentation-frameworks).
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Python和JavaScript的动态插桩工具包。请参阅[*https://<wbr>frida<wbr>.re*](https://frida.re)，以及BlackBerry研究与情报团队发布的文章“使用动态二进制插桩框架进行恶意软件分析”，可通过[*https://<wbr>blogs<wbr>.blackberry<wbr>.com<wbr>/en<wbr>/2021<wbr>/04<wbr>/malware<wbr>-analysis<wbr>-with<wbr>-dynamic<wbr>-binary<wbr>-instrumentation<wbr>-frameworks*](https://blogs.blackberry.com/en/2021/04/malware-analysis-with-dynamic-binary-instrumentation-frameworks)查看。
- en: '**Intel Pin**'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '**Intel Pin**'
- en: A popular dynamic binary instrumentation framework that is used as the base
    framework for many other instrumentation projects. See “Pin—A Dynamic Binary Instrumentation
    Tool” in Intel’s developer resources at [*https://<wbr>www<wbr>.intel<wbr>.com<wbr>/content<wbr>/www<wbr>/us<wbr>/en<wbr>/developer<wbr>/articles<wbr>/tool<wbr>/pin<wbr>-a<wbr>-dynamic<wbr>-binary<wbr>-instrumentation<wbr>-tool<wbr>.html*](https://www.intel.com/content/www/us/en/developer/articles/tool/pin-a-dynamic-binary-instrumentation-tool.html).
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 一个流行的动态二进制插桩框架，是许多其他插桩项目的基础框架。请参阅英特尔开发者资源中的“Pin—动态二进制插桩工具”，网址为[*https://<wbr>www<wbr>.intel<wbr>.com<wbr>/content<wbr>/www<wbr>/us<wbr>/en<wbr>/developer<wbr>/articles<wbr>/tool<wbr>/pin<wbr>-a<wbr>-dynamic<wbr>-binary<wbr>-instrumentation<wbr>-tool<wbr>.html*](https://www.intel.com/content/www/us/en/developer/articles/tool/pin-a-dynamic-binary-instrumentation-tool.html)。
- en: Two instrumentation tools built on Intel PIN are tiny_tracer and BluePill. The
    tiny_tracer project ([*https://<wbr>github<wbr>.com<wbr>/hasherezade<wbr>/tiny<wbr>_tracer*](https://github.com/hasherezade/tiny_tracer))
    is a tool that allows for dynamic logging (tracing) and manipulation of malware’s
    code. It has built-in capabilities to bypass problematic anti-analysis features
    in malware. BluePill ([*https://<wbr>github<wbr>.com<wbr>/season<wbr>-lab<wbr>/bluepill*](https://github.com/season-lab/bluepill))
    is an older prototype tool designed with anti-analysis circumvention in mind.
    These are good examples of what can be done with dynamic instrumentation.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Intel PIN构建的两个插桩工具是tiny_tracer和BluePill。tiny_tracer项目（[*https://<wbr>github<wbr>.com<wbr>/hasherezade<wbr>/tiny<wbr>_tracer*](https://github.com/hasherezade/tiny_tracer)）是一个允许动态日志记录（追踪）和操作恶意软件代码的工具。它内置有绕过恶意软件中问题反分析特性的功能。BluePill（[*https://<wbr>github<wbr>.com<wbr>/season<wbr>-lab<wbr>/bluepill*](https://github.com/season-lab/bluepill)）是一个较旧的原型工具，设计时考虑到了反分析绕过。这些是动态插桩能够完成的良好示例。
- en: 'As opposed to binary instrumentation, *emulation* runs malicious code in a
    virtual, or emulated, environment. Emulation was discussed in the context of anti-malware
    software in [Chapter 13](chapter13.xhtml), and it works in much the same way for
    malware analysis. It’s also not as resource intensive as a complete sandbox environment
    or VM. Emulation allows for great control over malware and, similar to binary
    instrumentation, enables you to automate many analysis tasks. Here are some emulation
    frameworks you may want to explore:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 与二进制仪器化不同，*模拟*是在虚拟或模拟环境中运行恶意代码。模拟技术在反恶意软件软件的上下文中已经在[第十三章](chapter13.xhtml)讨论过，它在恶意软件分析中也以类似的方式工作。它的资源消耗也不如完整的沙箱环境或虚拟机那么大。模拟可以很好地控制恶意软件，类似于二进制仪器化，它使你能够自动化许多分析任务。以下是一些你可能想要探索的模拟框架：
- en: '**Qiling Framework**'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '**Qiling 框架**'
- en: A lightweight, cross-platform emulator that supports multiple software architectures.
    It also has support for many operating systems, including Windows, macOS, and
    Linux. See [*https://<wbr>qiling<wbr>.io*](https://qiling.io).
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 一个轻量级的跨平台模拟器，支持多种软件架构。它还支持多个操作系统，包括 Windows、macOS 和 Linux。详情请见 [*https://<wbr>qiling<wbr>.io*](https://qiling.io)。
- en: '**Speakeasy**'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '**Speakeasy**'
- en: A modular emulator designed with malware in mind. It can emulate both user and
    kernel-mode malware. See [*https://<wbr>github<wbr>.com<wbr>/mandiant<wbr>/speakeasy*](https://github.com/mandiant/speakeasy).
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 为恶意软件设计的模块化模拟器。它可以模拟用户态和内核态的恶意软件。详情请见 [*https://<wbr>github<wbr>.com<wbr>/mandiant<wbr>/speakeasy*](https://github.com/mandiant/speakeasy)。
- en: '**Unicorn**'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '**Unicorn**'
- en: A lightweight, multiplatform emulator framework. Qiling and Speakeasy are based
    on Unicorn. See [*https://<wbr>www<wbr>.unicorn<wbr>-engine<wbr>.org*](https://www.unicorn-engine.org).
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 一个轻量级的多平台模拟器框架。Qiling 和 Speakeasy 基于 Unicorn 引擎。详情请见 [*https://<wbr>www<wbr>.unicorn<wbr>-engine<wbr>.org*](https://www.unicorn-engine.org)。
- en: Because of their ability to supplement and automate parts of the malware analysis
    process, binary instrumentation tools and emulators can be formidable additions
    to your analysis toolbox. If you want to delve deeper into these topics, *Practical
    Binary Analysis* by Dennis Andriesse (No Starch Press, 2018) contains a lot more
    information.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它们能够补充和自动化恶意软件分析过程中的部分工作，二进制仪器化工具和模拟器可以成为你分析工具箱中强大的补充。如果你想深入了解这些主题，Dennis
    Andriesse 的《Practical Binary Analysis》（No Starch Press，2018）提供了更多的信息。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  id: totrans-345
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">摘要</samp>
- en: 'This appendix discussed some fundamental concepts of arguably the most important
    part of malware analysis: the lab environment. You learned about the basic setup
    of an analysis lab environment, important safety principles, and some tools and
    techniques for concealing your malware analysis VMs and lab components from malware.'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录讨论了恶意软件分析中最重要部分之一：实验室环境的一些基本概念。你将了解分析实验室环境的基本设置、重要的安全原则，以及一些用来隐藏你的恶意软件分析虚拟机和实验室组件的工具和技术。
- en: 'Concealing and hardening your analysis VMs can be a very effective, time-saving
    technique that helps circumvent many of the common anti-analysis and VM detection
    tactics malware uses. However, there’s one big downside to using these concealment
    techniques: you may be forgoing key intelligence about the malware’s capabilities.
    If your goal is to truly understand a malware sample, concealing your VM can be
    counterproductive, as you could miss some of its most interesting evasion and
    detection behaviors.'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏和加固你的分析虚拟机是一种非常有效的节省时间的技术，能够帮助你规避许多恶意软件使用的常见反分析和虚拟机检测策略。然而，使用这些隐藏技术也有一个很大的缺点：你可能会错过关于恶意软件功能的关键信息。如果你的目标是深入了解一个恶意软件样本，隐藏虚拟机可能会适得其反，因为你可能会错过它最有趣的逃逸和检测行为。
