- en: '**9**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**9**'
- en: '**What Next?**'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**接下来做什么？**'
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/common.jpg)'
- en: Congratulations on making it through eight chapters of Scratch-assisted math
    and math-assisted Scratch! Hopefully, what you’ve read here has inspired you to
    keep experimenting and learning more. This chapter offers some ideas about where
    to look next, whether you want to try out another programming language or you’re
    looking for new math problems and hacks to solve them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 祝贺你通过了以Scratch辅助数学和以数学辅助Scratch的八章！希望你在这里读到的内容能激励你继续尝试和学习更多。本章提供了一些关于下一步去哪里的想法，无论你是想尝试另一种编程语言，还是寻找新的数学问题和解决方法。
- en: Learning Other Languages
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 学习其他语言
- en: I learned to program in FORTRAN and COBOL back in the early 1970s, writing my
    code on punched cards between the magical job control cards and waiting at the
    computer center for the printed output. At a meeting of the Mathematical Association
    of America (MAA) at Dartmouth College in 1972, I was amazed when I had the chance
    to try out John Kemeny’s BASIC on a time-sharing printing terminal. I could never
    have imagined that one day there would be a language like Scratch that was accessible
    to everyone, with a drag-and-drop interface, integrated sound and graphics, and
    the ability to perform complex calculations in the blink of an eye.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我是在上世纪70年代初学习编程的，当时用穿孔卡编写FORTRAN和COBOL代码，站在神奇的作业控制卡和等待计算机中心打印输出之间。在1972年达特茅斯学院的数学协会（MAA）会议上，我有机会尝试约翰·克门尼的BASIC，使用分时共享打印终端让我感到惊讶。我从未想过会有像Scratch这样的语言，它对每个人都是可接触的，具有拖放界面、集成声音和图形以及能够在眨眼间进行复杂计算的能力。
- en: The resources that the internet makes available on demand have reshaped the
    world. And yet, the first program I wrote in FORTRAN in 1970 (after “Hello, world!”
    of course) was a basis-conversion utility like the ones in [Chapter 1](ch01.xhtml#ch01)
    for converting between binary and decimal. The toolbox of computing has changed
    dramatically over the years, in terms of the resources available, capabilities,
    and ease of use, but the mathematical ideas to be explored still have the same
    foundations.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网提供的按需资源已经改变了世界。然而，1970年我用FORTRAN写的第一个程序（当然是“Hello, world!”之后）是一个基于章节1中的基数转换实用程序，用于二进制和十进制之间的转换。计算工具箱多年来发生了巨大变化，资源的可用性、功能和易用性都有了显著提升，但探索的数学理念仍然具有相同的基础。
- en: These days, I wouldn’t recommend learning FORTRAN or COBOL, but there are other
    programming languages you may want to explore. In [Chapter 1](ch01.xhtml#ch01),
    we discussed how the floating-point representation of numbers in Scratch limits
    the range of numbers that can be studied. Other languages are designed without
    these limitations, or they have standard extensions available to overcome them.
    Two of these languages, Python and Mathematica, are readily available and likely
    to be of interest for people with Scratch experience. Both are bundled with the
    Raspberry Pi computer, along with Scratch. Mathematica is a commercial product
    that runs on Linux, Windows, or macOS, while Python is freely available for download
    from *[https://www.python.org](https://www.python.org)* for many operating systems.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，我不建议学习FORTRAN或COBOL，但你可能想要探索其他编程语言。在章节1中，我们讨论了Scratch中数字的浮点表示限制了可以研究的数字范围。其他语言设计时没有这些限制，或者它们有标准扩展可用以克服这些限制。其中两种语言，Python和Mathematica，与树莓派计算机捆绑在一起，以及Scratch。Mathematica是一款商业产品，可在Linux、Windows或macOS上运行，而Python可以在*[https://www.python.org](https://www.python.org)*免费下载，适用于多种操作系统。
- en: These two languages are especially useful for exploring applications of number
    theory because they natively support arbitrary-precision integer arithmetic—there’s
    no overflow and no rounding. For example, [Figure 9-1](ch09.xhtml#ch9fig1) shows
    Mathematica’s calculation for 2^(106) (flintmax squared), the same large value
    we wrote a Scratch program to calculate in [Chapter 1](ch01.xhtml#ch01).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种语言特别适合探索数字理论的应用，因为它们本地支持任意精度整数运算——没有溢出和四舍五入。例如，[图 9-1](ch09.xhtml#ch9fig1)展示了Mathematica计算2^(106)（flintmax的平方），这与我们在章节1中编写的Scratch程序计算的大值相同。
- en: '![Image](../images/pg186_Image_235.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/pg186_Image_235.jpg)'
- en: '*Figure 9-1: Calculating 2^(106) in Mathematica*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-1：在Mathematica中计算2^(106)*'
- en: '[Figure 9-2](ch09.xhtml#ch9fig2) shows the same calculation in Python.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 9-2](ch09.xhtml#ch9fig2)展示了Python中相同的计算。'
- en: '![Image](../images/pg186_Image_236.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/pg186_Image_236.jpg)'
- en: '*Figure 9-2: Calculating 2^(106) in Python*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Not only is the calculation done with all digits reported and the answer given
    as a number rather than as a string, but the languages have native power operators
    (`**` or `^`) that make exponential expressions easy to write without coding a
    loop.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Finding More Problems
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want more math problems to explore beyond the ones in this book, the
    first place to look is in the world around you. You might see a list of numbers
    and wonder “What if . . .?” or notice a pattern and think “That’s neat!” With
    Scratch, you can investigate to see what happens next. Does the pattern continue?
    If it does, it might be time to look for a reason. If the pattern breaks down,
    maybe there’s a little extra side condition you can add to fix it and save the
    day.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also lots of problems that have been posed by other people that you
    might want to investigate. A problem posed by someone else is guaranteed to be
    interesting to at least one other person (the one who proposed it), and it’s likely
    to be a Goldilocks problem: not so easy that nobody cares, and not so hard that
    nobody can solve it.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: My all-time favorite website for problems that use computers to support mathematics
    is Project Euler (*[https://projecteuler.net](https://projecteuler.net)*). It
    offers a collection of over 800 problems to solve, with more added all the time,
    providing a treasure trove of computational challenges of varying types and levels
    of difficulty. You can track your progress and earn awards for solving certain
    problems, and there’s a forum where you can chat with fellow solvers who share
    their insights and their code.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'As the Project Euler site says, each problem has been designed according to
    a “one-minute rule.” This means that although it may take several hours of thinking
    and coding to design a successful algorithm for solving a problem, an efficient
    program will allow even a modestly powered computer to produce the answer in less
    than a minute. For example, here’s the first problem on the site:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: If we list all the natural numbers below 10 that are multiples of 3 or 5, we
    get 3, 5, 6, and 9\. The sum of these multiples is 23.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Find the sum of all the multiples of 3 or 5 below 1,000.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a Scratch approach to it!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'Project 33: Hacking Project Euler Problem 1'
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Figure 9-3](ch09.xhtml#ch9fig3) shows some code that sums all the multiples
    of 3 or 5 up to a given limit.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg188_Image_237.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-3: The code for Project Euler Problem 1*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: It’s a `repeat` loop that tests each number from 1 up to one less than the specified
    upper bound (the problem description says “below 1,000,” so we don’t include the
    upper bound itself in the loop ❶). We use the `mod` block to check for divisibility
    by 3 or 5 ➋ and increase the `sum` if either divisibility condition holds.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: The Results
  id: totrans-28
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Let’s see what Scratch Cat has to say about the problem. [Figure 9-4](ch09.xhtml#ch9fig4)
    shows a solution for the upper bound of 1,000.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg188_Image_238.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-4: The answer to Project Euler Problem 1*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: It certainly takes Scratch less than a minute to generate the answer!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Hacking the Code
  id: totrans-33
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The Project Euler problem asked us to find the sum of all multiples of 3 and
    5 below 1,000, and Scratch Cat reported an answer of 233,168\. The problem description
    also gave 10 as an example and reported a sum of 23\. What if we try other powers
    of 10? [Table 9-1](ch09.xhtml#ch9tab1) shows some results.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 9-1:** Sums of Multiples of 3 and 5'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '| **Upper bound** | **Sum** |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
- en: '| 10 | 23 |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
- en: '| 100 | 2,318 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
- en: '| 1,000 | 233,168 |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
- en: '| 10,000 | 23,331,668 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
- en: '| 100,000 | 2,333,316,668 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
- en: '| 1,000,000 | 233,333,166,668 |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
- en: '| 10,000,000 | 23,333,331,666,668 |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
- en: It looks like a pattern is emerging (look at all those repeated 3s and 6s!),
    but when we get to higher powers of 10 the code bogs down. The problem is that
    the program screens each number, so it has to count all the way up to the ending
    value. It takes 1 million times as long to count to 1 billion as it does to count
    to 1,000\. That means even if your computer can count to 1,000 in 1 second, it
    will take 1 million seconds, or over 11 days, to count to 1 billion. Depending
    on how patient you are, this may be too long to wait for an answer.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, there would be a way to add up all the multiples of 3 or 5 without
    counting them all one at a time. The key is to see that the multiples of 3 added
    together are 3 + 6 + 9 + . . . = 3(1 + 2 + 3 + . . .) and to then recognize that
    1 + 2 + 3 + . . . is a sequence of triangular numbers, like the ones we discussed
    in [Chapter 4](ch04.xhtml#ch04). Likewise, the multiples of 5 added together are
    5 + 10 + 15 + . . . = 5(1 + 2 + 3 + . . .).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'We have a formula from [Chapter 4](ch04.xhtml#ch04) for calculating the *n*th
    triangular number, which was derived from [Figure 4-13](ch04.xhtml#ch4fig13):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg189_Image_239.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: We can use this formula to streamline the counting process, as shown in [Figure
    9-5](ch09.xhtml#ch9fig5).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg190_Image_240.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-5: A triangular number approach for Project Euler Problem 1*'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: First, we make a custom block to calculate the *n*th triangular number ❶. We
    then use this block three times in our main program. The first time, we pass in
    `floor of range/3`, then multiply the result by `3`. This gives us the sum of
    all the multiples of 3 up to `range`. The second time, we pass in `floor of range/5`
    and multiply the result by `5`, which gives us the sum of all multiples of 5 up
    to `range`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding these two numbers together gets us close to the answer, but there’s
    a problem: any multiples of 15 have been counted twice, as multiples of 3 and
    multiples of 5\. So we use the `Triangular` block one more time, passing in `floor
    of range/15` and multiplying the result by `15`. This gives us the sum of all
    the multiples of 15 up to `range`, which we subtract from `sum` to get the final
    result ➋. This hack is a general trick called the *principle of inclusion–exclusion*;
    you can use it anytime you want to keep track of how often multiple overlapping
    conditions are satisfied without counting the overlaps twice.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Sure enough, this code gives output matching the first version of the program,
    with the advantage that it gives the answer quickly all the way up to flintmax.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg26_Image_12.jpg) Programming Challenges'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '**9.1**Change the code in [Figure 9-3](ch09.xhtml#ch9fig3) to allow a different
    pair of multiples than 3 and 5\. Have Scratch Cat ask what multiples to use and
    build them into your program.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '**9.2**Make the code in [Figure 9-5](ch09.xhtml#ch9fig5) work for different
    pairs of multiples, too. Be careful here: you need to make sure your solution
    works even if the numbers aren’t relatively prime.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '**9.3**Figure out how to program the inclusion–exclusion hack when there are
    three relatively prime multiples to screen rather than two.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Beyond Project Euler
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you’ve burned through Project Euler and you’re ready for more, here are
    some search terms you can try out in your favorite search engine that might lead
    you to some other interesting problems:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '**Math challenge problems** This will probably turn up problems with lots of
    different difficulty levels; choose the ones that are right for you.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '**Scratch challenges** A lot of these focus on graphics and games, but you’ll
    find some math challenges, too.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '**Scratch math games** This is more likely to turn up math-focused exercises
    and ideas.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '**MAA *Convergence*** This will lead you to a journal of the Mathematical Association
    of America, *Convergence*, that has a nice list of open access problems organized
    chronologically, geographically, or by subject. The emphasis isn’t usually on
    programming, but sometimes a little bit of experimentation is a good way to understand
    what’s going on.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: There’s always a chance that searches like these will turn up problems that
    are too easy or too hard. But even if a problem bores you or baffles you, it might
    be a gateway to an interesting variation that’s just right.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: More Scratch Projects to Explore
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to find more math projects specifically for Scratch, a great place
    to look is the Scratch website, *[https://scratch.mit.edu](https://scratch.mit.edu)*.
    There’s a search box at the top (see [Figure 9-6](ch09.xhtml#ch9fig6)) that you
    can use to find all kinds of projects that members of the community have posted.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg191_Image_241.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-6: Where to look for more math in Scratch*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: The Scratch philosophy is that code is to be shared, and anything that’s been
    posted on the site is available to copy and extend, as long as you give credit
    to the original poster. There are lots of programs that are first efforts and
    good for easy play, as well as some very elaborate work.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some search terms for the Scratch website that will lead you to interesting
    projects related to the programs we’ve built in this book:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 1: What Computers Think About Numbers](ch01.xhtml#ch01)'
  id: totrans-72
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)binary clock'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)ternary'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)octal'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)decimal fraction'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)binary search'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)math parser'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)floating point'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 2: Exploring Divisibility and Primes](ch02.xhtml#ch02)'
  id: totrans-80
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)modular times table'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)twin prime'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)Eratosthenes'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)grid sequence'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)fraction adder'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)Egyptian fraction'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)divisibility test'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 3: Splitting Numbers with Prime Factorization](ch03.xhtml#ch03)'
  id: totrans-88
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)trial division'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)factorization'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)Mersenne prime'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)sum of divisors'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)Fermat prime'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)semiprime (another word for *biprime*)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![Image](../images/pg18_Image_5.jpg)Lucas–Lehmer'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)Spirograph'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)repunit (a number like 1111 that contains
    only the digit 1)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '[Chapter 4: Finding Patterns in Sequences](ch04.xhtml#ch04)'
  id: totrans-98
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)Fibonacci'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)Padovan'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)triangular number'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)Zeckendorf'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)pentagonal number'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)geometric art'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)number pattern'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 5: From Sequences to Arrays](ch05.xhtml#ch05)'
  id: totrans-106
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)Pascal’s triangle'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)binomial coefficient'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)magic square'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)histogram'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)distribution'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)modular arithmetic'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 6: Making Codes, and Cracking Them Too](ch06.xhtml#ch06)'
  id: totrans-113
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)secret code'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)Caesar cipher'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)steganography'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)modular inverse'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)one-time pad'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)frequency analysis'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)public key'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)公钥'
- en: '[Chapter 7: Experiments in Counting](ch07.xhtml#ch07)'
  id: totrans-121
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '[第 7 章：计数实验](ch07.xhtml#ch07)'
- en: '![Image](../images/pg18_Image_5.jpg)combinatorics'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)组合学'
- en: '![Image](../images/pg18_Image_5.jpg)8 queens'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)8 皇后'
- en: '![Image](../images/pg18_Image_5.jpg)handshake problem'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)握手问题'
- en: '![Image](../images/pg18_Image_5.jpg)recursion'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)递归'
- en: '![Image](../images/pg18_Image_5.jpg)Sierpiński'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)谢尔宾斯基'
- en: '[Chapter 8: Three Helpings of Pi](ch08.xhtml#ch08)'
  id: totrans-127
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '[第 8 章：三次π的帮助](ch08.xhtml#ch08)'
- en: '![Image](../images/pg18_Image_5.jpg)Buffon'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)布丰'
- en: '![Image](../images/pg18_Image_5.jpg)spigot'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)水龙头'
- en: '![Image](../images/pg18_Image_5.jpg)tau (not the number of divisors function,
    but a quantity related to *π*!)'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_IMG
  zh: '![Image](../images/pg18_Image_5.jpg)τ（不是约数函数的数量，而是与 *π* 相关的一个量！）'
- en: '![Image](../images/pg18_Image_5.jpg)pi calculator'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)π 计算器'
- en: Conclusion
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: Scratch is like a mental amplifier, letting you see more deeply into patterns
    than you could on your own. We’ve used Scratch in this book to explore arithmetic,
    number theory, geometry, cryptography, sequences, and arrays—and that’s just the
    beginning of what it can do.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Scratch 就像是一个思维放大器，让你能比自己独立思考时更加深入地看到模式。在本书中，我们使用 Scratch 探索了算术、数论、几何学、密码学、序列和数组——这只是它能做的一部分。
- en: Whether you stick with Scratch or go on to other programming languages, the
    algorithms and the way of seeing the world with computer-aided vision that Scratch
    provides can help you be a more creative thinker. I hope to see you someday at
    my Scratch studio (*[https://scratch.mit.edu/studios/29153814](https://scratch.mit.edu/studios/29153814)*),
    and I’d love to see any variations or extensions of this book’s programs you decide
    to share. Until then, keep on coding!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是坚持使用 Scratch 还是转向其他编程语言，Scratch 提供的算法和通过计算机辅助视觉看待世界的方式都能帮助你成为一个更具创意思维的人。我希望有一天能在我的
    Scratch 工作室见到你 (*[https://scratch.mit.edu/studios/29153814](https://scratch.mit.edu/studios/29153814)*)，也很期待看到你决定分享的本书程序的任何变体或扩展。在那之前，继续编程吧！
