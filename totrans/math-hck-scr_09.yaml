- en: '**9**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**9**'
- en: '**What Next?**'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**接下来做什么？**'
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/common.jpg)'
- en: Congratulations on making it through eight chapters of Scratch-assisted math
    and math-assisted Scratch! Hopefully, what you’ve read here has inspired you to
    keep experimenting and learning more. This chapter offers some ideas about where
    to look next, whether you want to try out another programming language or you’re
    looking for new math problems and hacks to solve them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 祝贺你通过了以Scratch辅助数学和以数学辅助Scratch的八章！希望你在这里读到的内容能激励你继续尝试和学习更多。本章提供了一些关于下一步去哪里的想法，无论你是想尝试另一种编程语言，还是寻找新的数学问题和解决方法。
- en: Learning Other Languages
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 学习其他语言
- en: I learned to program in FORTRAN and COBOL back in the early 1970s, writing my
    code on punched cards between the magical job control cards and waiting at the
    computer center for the printed output. At a meeting of the Mathematical Association
    of America (MAA) at Dartmouth College in 1972, I was amazed when I had the chance
    to try out John Kemeny’s BASIC on a time-sharing printing terminal. I could never
    have imagined that one day there would be a language like Scratch that was accessible
    to everyone, with a drag-and-drop interface, integrated sound and graphics, and
    the ability to perform complex calculations in the blink of an eye.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我是在上世纪70年代初学习编程的，当时用穿孔卡编写FORTRAN和COBOL代码，站在神奇的作业控制卡和等待计算机中心打印输出之间。在1972年达特茅斯学院的数学协会（MAA）会议上，我有机会尝试约翰·克门尼的BASIC，使用分时共享打印终端让我感到惊讶。我从未想过会有像Scratch这样的语言，它对每个人都是可接触的，具有拖放界面、集成声音和图形以及能够在眨眼间进行复杂计算的能力。
- en: The resources that the internet makes available on demand have reshaped the
    world. And yet, the first program I wrote in FORTRAN in 1970 (after “Hello, world!”
    of course) was a basis-conversion utility like the ones in [Chapter 1](ch01.xhtml#ch01)
    for converting between binary and decimal. The toolbox of computing has changed
    dramatically over the years, in terms of the resources available, capabilities,
    and ease of use, but the mathematical ideas to be explored still have the same
    foundations.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网提供的按需资源已经改变了世界。然而，1970年我用FORTRAN写的第一个程序（当然是“Hello, world!”之后）是一个基于章节1中的基数转换实用程序，用于二进制和十进制之间的转换。计算工具箱多年来发生了巨大变化，资源的可用性、功能和易用性都有了显著提升，但探索的数学理念仍然具有相同的基础。
- en: These days, I wouldn’t recommend learning FORTRAN or COBOL, but there are other
    programming languages you may want to explore. In [Chapter 1](ch01.xhtml#ch01),
    we discussed how the floating-point representation of numbers in Scratch limits
    the range of numbers that can be studied. Other languages are designed without
    these limitations, or they have standard extensions available to overcome them.
    Two of these languages, Python and Mathematica, are readily available and likely
    to be of interest for people with Scratch experience. Both are bundled with the
    Raspberry Pi computer, along with Scratch. Mathematica is a commercial product
    that runs on Linux, Windows, or macOS, while Python is freely available for download
    from *[https://www.python.org](https://www.python.org)* for many operating systems.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，我不建议学习FORTRAN或COBOL，但你可能想要探索其他编程语言。在章节1中，我们讨论了Scratch中数字的浮点表示限制了可以研究的数字范围。其他语言设计时没有这些限制，或者它们有标准扩展可用以克服这些限制。其中两种语言，Python和Mathematica，与树莓派计算机捆绑在一起，以及Scratch。Mathematica是一款商业产品，可在Linux、Windows或macOS上运行，而Python可以在*[https://www.python.org](https://www.python.org)*免费下载，适用于多种操作系统。
- en: These two languages are especially useful for exploring applications of number
    theory because they natively support arbitrary-precision integer arithmetic—there’s
    no overflow and no rounding. For example, [Figure 9-1](ch09.xhtml#ch9fig1) shows
    Mathematica’s calculation for 2^(106) (flintmax squared), the same large value
    we wrote a Scratch program to calculate in [Chapter 1](ch01.xhtml#ch01).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种语言特别适合探索数字理论的应用，因为它们本地支持任意精度整数运算——没有溢出和四舍五入。例如，[图 9-1](ch09.xhtml#ch9fig1)展示了Mathematica计算2^(106)（flintmax的平方），这与我们在章节1中编写的Scratch程序计算的大值相同。
- en: '![Image](../images/pg186_Image_235.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/pg186_Image_235.jpg)'
- en: '*Figure 9-1: Calculating 2^(106) in Mathematica*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-1：在Mathematica中计算2^(106)*'
- en: '[Figure 9-2](ch09.xhtml#ch9fig2) shows the same calculation in Python.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 9-2](ch09.xhtml#ch9fig2)展示了Python中相同的计算。'
- en: '![Image](../images/pg186_Image_236.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/pg186_Image_236.jpg)'
- en: '*Figure 9-2: Calculating 2^(106) in Python*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-2：在Python中计算2^(106)*'
- en: Not only is the calculation done with all digits reported and the answer given
    as a number rather than as a string, but the languages have native power operators
    (`**` or `^`) that make exponential expressions easy to write without coding a
    loop.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅计算结果是用所有数字显示，并且答案是以数字形式给出的，而不是字符串形式，而且语言本身有原生的幂运算符（`**`或`^`），使得指数表达式的编写变得非常简单，无需编写循环代码。
- en: Finding More Problems
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找更多问题
- en: If you want more math problems to explore beyond the ones in this book, the
    first place to look is in the world around you. You might see a list of numbers
    and wonder “What if . . .?” or notice a pattern and think “That’s neat!” With
    Scratch, you can investigate to see what happens next. Does the pattern continue?
    If it does, it might be time to look for a reason. If the pattern breaks down,
    maybe there’s a little extra side condition you can add to fix it and save the
    day.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想探索更多的数学问题，可以从你周围的世界开始。你可能会看到一串数字，心里想“如果……呢？”或者发现一个模式，觉得“这个有意思！”通过Scratch，你可以探索看看接下来会发生什么。这个模式会继续吗？如果会，可能是时候寻找原因了。如果模式中断了，或许你可以加上一些额外的条件来修复它，拯救局面。
- en: 'There are also lots of problems that have been posed by other people that you
    might want to investigate. A problem posed by someone else is guaranteed to be
    interesting to at least one other person (the one who proposed it), and it’s likely
    to be a Goldilocks problem: not so easy that nobody cares, and not so hard that
    nobody can solve it.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 还有很多其他人提出的问题，你可能会想要探索。别人提出的问题保证至少会对另一个人感兴趣（即提出问题的人），而且它很可能是一个“金发姑娘问题”：既不太容易到没有人关心，也不太难到没有人能解决。
- en: My all-time favorite website for problems that use computers to support mathematics
    is Project Euler (*[https://projecteuler.net](https://projecteuler.net)*). It
    offers a collection of over 800 problems to solve, with more added all the time,
    providing a treasure trove of computational challenges of varying types and levels
    of difficulty. You can track your progress and earn awards for solving certain
    problems, and there’s a forum where you can chat with fellow solvers who share
    their insights and their code.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我最喜欢的、利用计算机来支持数学问题的网站是Project Euler (*[https://projecteuler.net](https://projecteuler.net)*)。它提供了超过800个问题，随着时间的推移还会不断增加，提供了各种类型和难度等级的计算挑战。你可以追踪自己的进度，并通过解决某些问题获得奖励，还可以在论坛中与其他解题者交流，分享他们的见解和代码。
- en: 'As the Project Euler site says, each problem has been designed according to
    a “one-minute rule.” This means that although it may take several hours of thinking
    and coding to design a successful algorithm for solving a problem, an efficient
    program will allow even a modestly powered computer to produce the answer in less
    than a minute. For example, here’s the first problem on the site:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 正如Project Euler网站所说，每个问题都是根据“1分钟规则”设计的。这意味着，尽管设计一个成功的算法可能需要数小时的思考和编码，但一个高效的程序将允许即使是性能较低的计算机也能在不到一分钟的时间内给出答案。例如，网站上的第一个问题如下：
- en: If we list all the natural numbers below 10 that are multiples of 3 or 5, we
    get 3, 5, 6, and 9\. The sum of these multiples is 23.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们列出所有小于10的自然数中是3或5的倍数的数，我们得到3、5、6和9。它们的和是23。
- en: Find the sum of all the multiples of 3 or 5 below 1,000.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 求所有小于1,000的3或5的倍数之和。
- en: Let’s take a Scratch approach to it!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用Scratch的方式来解决它！
- en: 'Project 33: Hacking Project Euler Problem 1'
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 'Project 33: 破解Project Euler问题1'
- en: '[Figure 9-3](ch09.xhtml#ch9fig3) shows some code that sums all the multiples
    of 3 or 5 up to a given limit.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[图9-3](ch09.xhtml#ch9fig3)展示了一些代码，用于计算所有小于给定限制的3或5的倍数的和。'
- en: '![Image](../images/pg188_Image_237.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg188_Image_237.jpg)'
- en: '*Figure 9-3: The code for Project Euler Problem 1*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-3：Project Euler问题1的代码*'
- en: It’s a `repeat` loop that tests each number from 1 up to one less than the specified
    upper bound (the problem description says “below 1,000,” so we don’t include the
    upper bound itself in the loop ❶). We use the `mod` block to check for divisibility
    by 3 or 5 ➋ and increase the `sum` if either divisibility condition holds.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个`repeat`循环，测试每个从1到指定上限减一的数字（问题描述中说“低于1,000”，所以我们在循环中不包括上限本身 ❶）。我们使用`mod`块来检查是否是3或5的倍数
    ➋，如果符合其中任何一个可整除条件，则增加`sum`。
- en: The Results
  id: totrans-28
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 结果
- en: Let’s see what Scratch Cat has to say about the problem. [Figure 9-4](ch09.xhtml#ch9fig4)
    shows a solution for the upper bound of 1,000.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Scratch Cat对这个问题的看法。[图9-4](ch09.xhtml#ch9fig4)展示了一个解决方案，适用于上限为1,000的情况。
- en: '![Image](../images/pg188_Image_238.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/pg188_Image_238.jpg)'
- en: '*Figure 9-4: The answer to Project Euler Problem 1*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-4：项目欧拉问题1的答案*'
- en: It certainly takes Scratch less than a minute to generate the answer!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Scratch生成答案的时间不到一分钟！
- en: Hacking the Code
  id: totrans-33
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 破解代码
- en: The Project Euler problem asked us to find the sum of all multiples of 3 and
    5 below 1,000, and Scratch Cat reported an answer of 233,168\. The problem description
    also gave 10 as an example and reported a sum of 23\. What if we try other powers
    of 10? [Table 9-1](ch09.xhtml#ch9tab1) shows some results.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 项目欧拉问题要求我们找出所有小于1,000的3和5的倍数的和，Scratch Cat给出的答案是233,168。问题描述中还给出了10作为示例，并给出了和为23。那么，如果我们尝试其他10的幂呢？[表9-1](ch09.xhtml#ch9tab1)显示了一些结果。
- en: '**Table 9-1:** Sums of Multiples of 3 and 5'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**表9-1：** 3和5的倍数之和'
- en: '| **Upper bound** | **Sum** |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| **上界** | **和** |'
- en: '| --- | --- |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 10 | 23 |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 10 | 23 |'
- en: '| 100 | 2,318 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 100 | 2,318 |'
- en: '| 1,000 | 233,168 |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 1,000 | 233,168 |'
- en: '| 10,000 | 23,331,668 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 10,000 | 23,331,668 |'
- en: '| 100,000 | 2,333,316,668 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 100,000 | 2,333,316,668 |'
- en: '| 1,000,000 | 233,333,166,668 |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 1,000,000 | 233,333,166,668 |'
- en: '| 10,000,000 | 23,333,331,666,668 |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 10,000,000 | 23,333,331,666,668 |'
- en: It looks like a pattern is emerging (look at all those repeated 3s and 6s!),
    but when we get to higher powers of 10 the code bogs down. The problem is that
    the program screens each number, so it has to count all the way up to the ending
    value. It takes 1 million times as long to count to 1 billion as it does to count
    to 1,000\. That means even if your computer can count to 1,000 in 1 second, it
    will take 1 million seconds, or over 11 days, to count to 1 billion. Depending
    on how patient you are, this may be too long to wait for an answer.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来好像有一个模式在出现（看看那些重复的3和6！），但是当我们处理更高的10的幂时，代码会变得很慢。问题是程序逐一检查每个数字，因此必须数到结束值。数到10亿所需的时间是数到1,000的1百万倍。也就是说，即使你的计算机能在1秒钟内数到1,000，它也需要1百万秒，或者超过11天，才能数到10亿。根据你的耐心，这可能是等待答案的时间太长。
- en: Ideally, there would be a way to add up all the multiples of 3 or 5 without
    counting them all one at a time. The key is to see that the multiples of 3 added
    together are 3 + 6 + 9 + . . . = 3(1 + 2 + 3 + . . .) and to then recognize that
    1 + 2 + 3 + . . . is a sequence of triangular numbers, like the ones we discussed
    in [Chapter 4](ch04.xhtml#ch04). Likewise, the multiples of 5 added together are
    5 + 10 + 15 + . . . = 5(1 + 2 + 3 + . . .).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，应该有一种方法能够在不逐一计算的情况下将所有3和5的倍数加起来。关键是看到3的倍数加起来是3 + 6 + 9 + . . . = 3(1 +
    2 + 3 + . . .)，然后认识到1 + 2 + 3 + . . . 是一个三角形数列，就像我们在[第4章](ch04.xhtml#ch04)讨论的那样。同样，5的倍数加起来是5
    + 10 + 15 + . . . = 5(1 + 2 + 3 + . . .)。
- en: 'We have a formula from [Chapter 4](ch04.xhtml#ch04) for calculating the *n*th
    triangular number, which was derived from [Figure 4-13](ch04.xhtml#ch4fig13):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个来自[第4章](ch04.xhtml#ch04)的公式来计算*n*的三角形数，该公式来源于[图4-13](ch04.xhtml#ch4fig13)：
- en: '![Image](../images/pg189_Image_239.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/pg189_Image_239.jpg)'
- en: We can use this formula to streamline the counting process, as shown in [Figure
    9-5](ch09.xhtml#ch9fig5).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这个公式来简化计数过程，如[图9-5](ch09.xhtml#ch9fig5)所示。
- en: '![Image](../images/pg190_Image_240.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/pg190_Image_240.jpg)'
- en: '*Figure 9-5: A triangular number approach for Project Euler Problem 1*'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9-5：项目欧拉问题1的三角形数方法*'
- en: First, we make a custom block to calculate the *n*th triangular number ❶. We
    then use this block three times in our main program. The first time, we pass in
    `floor of range/3`, then multiply the result by `3`. This gives us the sum of
    all the multiples of 3 up to `range`. The second time, we pass in `floor of range/5`
    and multiply the result by `5`, which gives us the sum of all multiples of 5 up
    to `range`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个自定义块来计算*n*的三角形数❶。然后，我们在主程序中使用这个块三次。第一次，我们传入`range/3的下限`，然后将结果乘以`3`。这给我们的是所有小于`range`的3的倍数的和。第二次，我们传入`range/5的下限`并将结果乘以`5`，这给我们的是所有小于`range`的5的倍数的和。
- en: 'Adding these two numbers together gets us close to the answer, but there’s
    a problem: any multiples of 15 have been counted twice, as multiples of 3 and
    multiples of 5\. So we use the `Triangular` block one more time, passing in `floor
    of range/15` and multiplying the result by `15`. This gives us the sum of all
    the multiples of 15 up to `range`, which we subtract from `sum` to get the final
    result ➋. This hack is a general trick called the *principle of inclusion–exclusion*;
    you can use it anytime you want to keep track of how often multiple overlapping
    conditions are satisfied without counting the overlaps twice.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 将这两个数字相加能让我们接近答案，但存在一个问题：任何 15 的倍数被计算了两次，作为 3 的倍数和 5 的倍数。所以我们再使用一次 `Triangular`
    块，传入 `range/15` 的地板值，并将结果乘以 `15`。这会给我们所有小于或等于 `range` 的 15 的倍数之和，我们将其从 `sum` 中减去，得到最终结果
    ➋。这个技巧是一个通用方法，叫做 *包含–排除原理*；你可以在任何时候使用它来跟踪多个重叠条件满足的次数，而不重复计算重叠部分。
- en: Sure enough, this code gives output matching the first version of the program,
    with the advantage that it gives the answer quickly all the way up to flintmax.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 果然，这段代码的输出与程序的第一个版本匹配，且优点是它能够快速给出答案，一直到 flintmax。
- en: '![Image](../images/pg26_Image_12.jpg) Programming Challenges'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](../images/pg26_Image_12.jpg) 编程挑战'
- en: '**9.1**Change the code in [Figure 9-3](ch09.xhtml#ch9fig3) to allow a different
    pair of multiples than 3 and 5\. Have Scratch Cat ask what multiples to use and
    build them into your program.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**9.1**更改[图 9-3](ch09.xhtml#ch9fig3)中的代码，以允许使用与 3 和 5 不同的倍数。让 Scratch 猫询问使用哪些倍数，并将其添加到程序中。'
- en: '**9.2**Make the code in [Figure 9-5](ch09.xhtml#ch9fig5) work for different
    pairs of multiples, too. Be careful here: you need to make sure your solution
    works even if the numbers aren’t relatively prime.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**9.2**使[图 9-5](ch09.xhtml#ch9fig5)中的代码也能适用于不同的倍数组合。这里要小心：你需要确保即使这些数字不是互质的，解决方案仍然有效。'
- en: '**9.3**Figure out how to program the inclusion–exclusion hack when there are
    three relatively prime multiples to screen rather than two.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**9.3**弄清楚如何在有三个互质的倍数需要筛选而不是两个时，编程实现包含–排除技巧。'
- en: Beyond Project Euler
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 超越 Project Euler
- en: 'If you’ve burned through Project Euler and you’re ready for more, here are
    some search terms you can try out in your favorite search engine that might lead
    you to some other interesting problems:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经完成了 Project Euler，并准备继续挑战更多内容，以下是一些你可以在你喜欢的搜索引擎中尝试的搜索词，可能会引导你找到其他有趣的问题：
- en: '**Math challenge problems** This will probably turn up problems with lots of
    different difficulty levels; choose the ones that are right for you.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**数学挑战问题** 这可能会出现不同难度级别的问题；选择适合你的那些。'
- en: '**Scratch challenges** A lot of these focus on graphics and games, but you’ll
    find some math challenges, too.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**Scratch 挑战** 这些问题大多集中在图形和游戏方面，但你也会发现一些数学挑战。'
- en: '**Scratch math games** This is more likely to turn up math-focused exercises
    and ideas.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**Scratch 数学游戏** 这更可能出现以数学为重点的练习和想法。'
- en: '**MAA *Convergence*** This will lead you to a journal of the Mathematical Association
    of America, *Convergence*, that has a nice list of open access problems organized
    chronologically, geographically, or by subject. The emphasis isn’t usually on
    programming, but sometimes a little bit of experimentation is a good way to understand
    what’s going on.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**MAA *Convergence*** 这将引导你到美国数学会的期刊《*Convergence*》，该期刊有一个按时间顺序、地理位置或主题整理的开放访问问题列表。重点通常不在于编程，但有时进行一些实验是一种了解事物发生原理的好方法。'
- en: There’s always a chance that searches like these will turn up problems that
    are too easy or too hard. But even if a problem bores you or baffles you, it might
    be a gateway to an interesting variation that’s just right.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这些搜索结果有可能出现太简单或太困难的问题。但即便一个问题让你感到无聊或困惑，它也可能是一个通往合适变体的入口。
- en: More Scratch Projects to Explore
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多 Scratch 项目供你探索
- en: If you want to find more math projects specifically for Scratch, a great place
    to look is the Scratch website, *[https://scratch.mit.edu](https://scratch.mit.edu)*.
    There’s a search box at the top (see [Figure 9-6](ch09.xhtml#ch9fig6)) that you
    can use to find all kinds of projects that members of the community have posted.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想找到更多专门为 Scratch 设计的数学项目，一个很好的地方是 Scratch 网站，* [https://scratch.mit.edu](https://scratch.mit.edu)*。在顶部有一个搜索框（见[图
    9-6](ch09.xhtml#ch9fig6)），你可以用它来查找社区成员发布的各种项目。
- en: '![Image](../images/pg191_Image_241.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg191_Image_241.jpg)'
- en: '*Figure 9-6: Where to look for more math in Scratch*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 9-6：在 Scratch 中寻找更多数学内容的地方*'
- en: The Scratch philosophy is that code is to be shared, and anything that’s been
    posted on the site is available to copy and extend, as long as you give credit
    to the original poster. There are lots of programs that are first efforts and
    good for easy play, as well as some very elaborate work.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Scratch哲学认为代码应该被共享，任何已发布到网站上的内容都可以复制和扩展，只要你给原作者适当的信用。网站上有许多程序，它们是初学者的作品，适合轻松玩耍，还有一些非常精巧的作品。
- en: 'Here are some search terms for the Scratch website that will lead you to interesting
    projects related to the programs we’ve built in this book:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些用于Scratch网站的搜索词，将引导你找到与本书中构建的程序相关的有趣项目：
- en: '[Chapter 1: What Computers Think About Numbers](ch01.xhtml#ch01)'
  id: totrans-72
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '[第1章：计算机如何看待数字](ch01.xhtml#ch01)'
- en: '![Image](../images/pg18_Image_5.jpg)binary clock'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)二进制时钟'
- en: '![Image](../images/pg18_Image_5.jpg)ternary'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)三进制'
- en: '![Image](../images/pg18_Image_5.jpg)octal'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)八进制'
- en: '![Image](../images/pg18_Image_5.jpg)decimal fraction'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)小数分数'
- en: '![Image](../images/pg18_Image_5.jpg)binary search'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)二分查找'
- en: '![Image](../images/pg18_Image_5.jpg)math parser'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)数学解析器'
- en: '![Image](../images/pg18_Image_5.jpg)floating point'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)浮动点数'
- en: '[Chapter 2: Exploring Divisibility and Primes](ch02.xhtml#ch02)'
  id: totrans-80
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '[第2章：探索可除性和素数](ch02.xhtml#ch02)'
- en: '![Image](../images/pg18_Image_5.jpg)modular times table'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)模乘法表'
- en: '![Image](../images/pg18_Image_5.jpg)twin prime'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)孪生素数'
- en: '![Image](../images/pg18_Image_5.jpg)Eratosthenes'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)厄拉托斯特尼'
- en: '![Image](../images/pg18_Image_5.jpg)grid sequence'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)网格序列'
- en: '![Image](../images/pg18_Image_5.jpg)fraction adder'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)分数加法器'
- en: '![Image](../images/pg18_Image_5.jpg)Egyptian fraction'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)埃及分数'
- en: '![Image](../images/pg18_Image_5.jpg)divisibility test'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)可除性测试'
- en: '[Chapter 3: Splitting Numbers with Prime Factorization](ch03.xhtml#ch03)'
  id: totrans-88
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '[第3章：用素因数分解拆解数字](ch03.xhtml#ch03)'
- en: '![Image](../images/pg18_Image_5.jpg)trial division'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)试除法'
- en: '![Image](../images/pg18_Image_5.jpg)factorization'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)因式分解'
- en: '![Image](../images/pg18_Image_5.jpg)Mersenne prime'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)梅森素数'
- en: '![Image](../images/pg18_Image_5.jpg)sum of divisors'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)约数和'
- en: '![Image](../images/pg18_Image_5.jpg)Fermat prime'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)费马素数'
- en: '![Image](../images/pg18_Image_5.jpg)semiprime (another word for *biprime*)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_IMG
  zh: '![Image](../images/pg18_Image_5.jpg)半素数（*另一种说法是*双素数）'
- en: '![Image](../images/pg18_Image_5.jpg)Lucas–Lehmer'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)卢卡斯–莱默'
- en: '![Image](../images/pg18_Image_5.jpg)Spirograph'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)螺旋图'
- en: '![Image](../images/pg18_Image_5.jpg)repunit (a number like 1111 that contains
    only the digit 1)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_IMG
  zh: '![Image](../images/pg18_Image_5.jpg)重复数（像1111这样的数字，只包含数字1）'
- en: '[Chapter 4: Finding Patterns in Sequences](ch04.xhtml#ch04)'
  id: totrans-98
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '[第4章：在序列中寻找模式](ch04.xhtml#ch04)'
- en: '![Image](../images/pg18_Image_5.jpg)Fibonacci'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)斐波那契数列'
- en: '![Image](../images/pg18_Image_5.jpg)Padovan'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)帕多万数列'
- en: '![Image](../images/pg18_Image_5.jpg)triangular number'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)三角形数'
- en: '![Image](../images/pg18_Image_5.jpg)Zeckendorf'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)泽肯多夫'
- en: '![Image](../images/pg18_Image_5.jpg)pentagonal number'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)五边形数'
- en: '![Image](../images/pg18_Image_5.jpg)geometric art'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)几何艺术'
- en: '![Image](../images/pg18_Image_5.jpg)number pattern'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)数字模式'
- en: '[Chapter 5: From Sequences to Arrays](ch05.xhtml#ch05)'
  id: totrans-106
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '[第5章：从序列到数组](ch05.xhtml#ch05)'
- en: '![Image](../images/pg18_Image_5.jpg)Pascal’s triangle'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)帕斯卡三角形'
- en: '![Image](../images/pg18_Image_5.jpg)binomial coefficient'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)二项式系数'
- en: '![Image](../images/pg18_Image_5.jpg)magic square'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)魔方阵'
- en: '![Image](../images/pg18_Image_5.jpg)histogram'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)直方图'
- en: '![Image](../images/pg18_Image_5.jpg)distribution'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)分布'
- en: '![Image](../images/pg18_Image_5.jpg)modular arithmetic'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)模算术'
- en: '[Chapter 6: Making Codes, and Cracking Them Too](ch06.xhtml#ch06)'
  id: totrans-113
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '[第6章：制作代码，也破解它们](ch06.xhtml#ch06)'
- en: '![Image](../images/pg18_Image_5.jpg)secret code'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)秘密代码'
- en: '![Image](../images/pg18_Image_5.jpg)Caesar cipher'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)凯撒密码'
- en: '![Image](../images/pg18_Image_5.jpg)steganography'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)隐写术'
- en: '![Image](../images/pg18_Image_5.jpg)modular inverse'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)模逆'
- en: '![Image](../images/pg18_Image_5.jpg)one-time pad'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)一次性密钥'
- en: '![Image](../images/pg18_Image_5.jpg)frequency analysis'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)频率分析'
- en: '![Image](../images/pg18_Image_5.jpg)public key'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)公钥'
- en: '[Chapter 7: Experiments in Counting](ch07.xhtml#ch07)'
  id: totrans-121
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '[第 7 章：计数实验](ch07.xhtml#ch07)'
- en: '![Image](../images/pg18_Image_5.jpg)combinatorics'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)组合学'
- en: '![Image](../images/pg18_Image_5.jpg)8 queens'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)8 皇后'
- en: '![Image](../images/pg18_Image_5.jpg)handshake problem'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)握手问题'
- en: '![Image](../images/pg18_Image_5.jpg)recursion'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)递归'
- en: '![Image](../images/pg18_Image_5.jpg)Sierpiński'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)谢尔宾斯基'
- en: '[Chapter 8: Three Helpings of Pi](ch08.xhtml#ch08)'
  id: totrans-127
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '[第 8 章：三次π的帮助](ch08.xhtml#ch08)'
- en: '![Image](../images/pg18_Image_5.jpg)Buffon'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)布丰'
- en: '![Image](../images/pg18_Image_5.jpg)spigot'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)水龙头'
- en: '![Image](../images/pg18_Image_5.jpg)tau (not the number of divisors function,
    but a quantity related to *π*!)'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_IMG
  zh: '![Image](../images/pg18_Image_5.jpg)τ（不是约数函数的数量，而是与 *π* 相关的一个量！）'
- en: '![Image](../images/pg18_Image_5.jpg)pi calculator'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Image](../images/pg18_Image_5.jpg)π 计算器'
- en: Conclusion
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: Scratch is like a mental amplifier, letting you see more deeply into patterns
    than you could on your own. We’ve used Scratch in this book to explore arithmetic,
    number theory, geometry, cryptography, sequences, and arrays—and that’s just the
    beginning of what it can do.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Scratch 就像是一个思维放大器，让你能比自己独立思考时更加深入地看到模式。在本书中，我们使用 Scratch 探索了算术、数论、几何学、密码学、序列和数组——这只是它能做的一部分。
- en: Whether you stick with Scratch or go on to other programming languages, the
    algorithms and the way of seeing the world with computer-aided vision that Scratch
    provides can help you be a more creative thinker. I hope to see you someday at
    my Scratch studio (*[https://scratch.mit.edu/studios/29153814](https://scratch.mit.edu/studios/29153814)*),
    and I’d love to see any variations or extensions of this book’s programs you decide
    to share. Until then, keep on coding!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是坚持使用 Scratch 还是转向其他编程语言，Scratch 提供的算法和通过计算机辅助视觉看待世界的方式都能帮助你成为一个更具创意思维的人。我希望有一天能在我的
    Scratch 工作室见到你 (*[https://scratch.mit.edu/studios/29153814](https://scratch.mit.edu/studios/29153814)*)，也很期待看到你决定分享的本书程序的任何变体或扩展。在那之前，继续编程吧！
