- en: '**9**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**What Next?**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations on making it through eight chapters of Scratch-assisted math
    and math-assisted Scratch! Hopefully, what you’ve read here has inspired you to
    keep experimenting and learning more. This chapter offers some ideas about where
    to look next, whether you want to try out another programming language or you’re
    looking for new math problems and hacks to solve them.
  prefs: []
  type: TYPE_NORMAL
- en: Learning Other Languages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I learned to program in FORTRAN and COBOL back in the early 1970s, writing my
    code on punched cards between the magical job control cards and waiting at the
    computer center for the printed output. At a meeting of the Mathematical Association
    of America (MAA) at Dartmouth College in 1972, I was amazed when I had the chance
    to try out John Kemeny’s BASIC on a time-sharing printing terminal. I could never
    have imagined that one day there would be a language like Scratch that was accessible
    to everyone, with a drag-and-drop interface, integrated sound and graphics, and
    the ability to perform complex calculations in the blink of an eye.
  prefs: []
  type: TYPE_NORMAL
- en: The resources that the internet makes available on demand have reshaped the
    world. And yet, the first program I wrote in FORTRAN in 1970 (after “Hello, world!”
    of course) was a basis-conversion utility like the ones in [Chapter 1](ch01.xhtml#ch01)
    for converting between binary and decimal. The toolbox of computing has changed
    dramatically over the years, in terms of the resources available, capabilities,
    and ease of use, but the mathematical ideas to be explored still have the same
    foundations.
  prefs: []
  type: TYPE_NORMAL
- en: These days, I wouldn’t recommend learning FORTRAN or COBOL, but there are other
    programming languages you may want to explore. In [Chapter 1](ch01.xhtml#ch01),
    we discussed how the floating-point representation of numbers in Scratch limits
    the range of numbers that can be studied. Other languages are designed without
    these limitations, or they have standard extensions available to overcome them.
    Two of these languages, Python and Mathematica, are readily available and likely
    to be of interest for people with Scratch experience. Both are bundled with the
    Raspberry Pi computer, along with Scratch. Mathematica is a commercial product
    that runs on Linux, Windows, or macOS, while Python is freely available for download
    from *[https://www.python.org](https://www.python.org)* for many operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: These two languages are especially useful for exploring applications of number
    theory because they natively support arbitrary-precision integer arithmetic—there’s
    no overflow and no rounding. For example, [Figure 9-1](ch09.xhtml#ch9fig1) shows
    Mathematica’s calculation for 2^(106) (flintmax squared), the same large value
    we wrote a Scratch program to calculate in [Chapter 1](ch01.xhtml#ch01).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg186_Image_235.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-1: Calculating 2^(106) in Mathematica*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 9-2](ch09.xhtml#ch9fig2) shows the same calculation in Python.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg186_Image_236.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-2: Calculating 2^(106) in Python*'
  prefs: []
  type: TYPE_NORMAL
- en: Not only is the calculation done with all digits reported and the answer given
    as a number rather than as a string, but the languages have native power operators
    (`**` or `^`) that make exponential expressions easy to write without coding a
    loop.
  prefs: []
  type: TYPE_NORMAL
- en: Finding More Problems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want more math problems to explore beyond the ones in this book, the
    first place to look is in the world around you. You might see a list of numbers
    and wonder “What if . . .?” or notice a pattern and think “That’s neat!” With
    Scratch, you can investigate to see what happens next. Does the pattern continue?
    If it does, it might be time to look for a reason. If the pattern breaks down,
    maybe there’s a little extra side condition you can add to fix it and save the
    day.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also lots of problems that have been posed by other people that you
    might want to investigate. A problem posed by someone else is guaranteed to be
    interesting to at least one other person (the one who proposed it), and it’s likely
    to be a Goldilocks problem: not so easy that nobody cares, and not so hard that
    nobody can solve it.'
  prefs: []
  type: TYPE_NORMAL
- en: My all-time favorite website for problems that use computers to support mathematics
    is Project Euler (*[https://projecteuler.net](https://projecteuler.net)*). It
    offers a collection of over 800 problems to solve, with more added all the time,
    providing a treasure trove of computational challenges of varying types and levels
    of difficulty. You can track your progress and earn awards for solving certain
    problems, and there’s a forum where you can chat with fellow solvers who share
    their insights and their code.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the Project Euler site says, each problem has been designed according to
    a “one-minute rule.” This means that although it may take several hours of thinking
    and coding to design a successful algorithm for solving a problem, an efficient
    program will allow even a modestly powered computer to produce the answer in less
    than a minute. For example, here’s the first problem on the site:'
  prefs: []
  type: TYPE_NORMAL
- en: If we list all the natural numbers below 10 that are multiples of 3 or 5, we
    get 3, 5, 6, and 9\. The sum of these multiples is 23.
  prefs: []
  type: TYPE_NORMAL
- en: Find the sum of all the multiples of 3 or 5 below 1,000.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a Scratch approach to it!
  prefs: []
  type: TYPE_NORMAL
- en: 'Project 33: Hacking Project Euler Problem 1'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Figure 9-3](ch09.xhtml#ch9fig3) shows some code that sums all the multiples
    of 3 or 5 up to a given limit.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg188_Image_237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-3: The code for Project Euler Problem 1*'
  prefs: []
  type: TYPE_NORMAL
- en: It’s a `repeat` loop that tests each number from 1 up to one less than the specified
    upper bound (the problem description says “below 1,000,” so we don’t include the
    upper bound itself in the loop ❶). We use the `mod` block to check for divisibility
    by 3 or 5 ➋ and increase the `sum` if either divisibility condition holds.
  prefs: []
  type: TYPE_NORMAL
- en: The Results
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Let’s see what Scratch Cat has to say about the problem. [Figure 9-4](ch09.xhtml#ch9fig4)
    shows a solution for the upper bound of 1,000.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg188_Image_238.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-4: The answer to Project Euler Problem 1*'
  prefs: []
  type: TYPE_NORMAL
- en: It certainly takes Scratch less than a minute to generate the answer!
  prefs: []
  type: TYPE_NORMAL
- en: Hacking the Code
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The Project Euler problem asked us to find the sum of all multiples of 3 and
    5 below 1,000, and Scratch Cat reported an answer of 233,168\. The problem description
    also gave 10 as an example and reported a sum of 23\. What if we try other powers
    of 10? [Table 9-1](ch09.xhtml#ch9tab1) shows some results.
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 9-1:** Sums of Multiples of 3 and 5'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Upper bound** | **Sum** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | 23 |'
  prefs: []
  type: TYPE_TB
- en: '| 100 | 2,318 |'
  prefs: []
  type: TYPE_TB
- en: '| 1,000 | 233,168 |'
  prefs: []
  type: TYPE_TB
- en: '| 10,000 | 23,331,668 |'
  prefs: []
  type: TYPE_TB
- en: '| 100,000 | 2,333,316,668 |'
  prefs: []
  type: TYPE_TB
- en: '| 1,000,000 | 233,333,166,668 |'
  prefs: []
  type: TYPE_TB
- en: '| 10,000,000 | 23,333,331,666,668 |'
  prefs: []
  type: TYPE_TB
- en: It looks like a pattern is emerging (look at all those repeated 3s and 6s!),
    but when we get to higher powers of 10 the code bogs down. The problem is that
    the program screens each number, so it has to count all the way up to the ending
    value. It takes 1 million times as long to count to 1 billion as it does to count
    to 1,000\. That means even if your computer can count to 1,000 in 1 second, it
    will take 1 million seconds, or over 11 days, to count to 1 billion. Depending
    on how patient you are, this may be too long to wait for an answer.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, there would be a way to add up all the multiples of 3 or 5 without
    counting them all one at a time. The key is to see that the multiples of 3 added
    together are 3 + 6 + 9 + . . . = 3(1 + 2 + 3 + . . .) and to then recognize that
    1 + 2 + 3 + . . . is a sequence of triangular numbers, like the ones we discussed
    in [Chapter 4](ch04.xhtml#ch04). Likewise, the multiples of 5 added together are
    5 + 10 + 15 + . . . = 5(1 + 2 + 3 + . . .).
  prefs: []
  type: TYPE_NORMAL
- en: 'We have a formula from [Chapter 4](ch04.xhtml#ch04) for calculating the *n*th
    triangular number, which was derived from [Figure 4-13](ch04.xhtml#ch4fig13):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg189_Image_239.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can use this formula to streamline the counting process, as shown in [Figure
    9-5](ch09.xhtml#ch9fig5).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg190_Image_240.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-5: A triangular number approach for Project Euler Problem 1*'
  prefs: []
  type: TYPE_NORMAL
- en: First, we make a custom block to calculate the *n*th triangular number ❶. We
    then use this block three times in our main program. The first time, we pass in
    `floor of range/3`, then multiply the result by `3`. This gives us the sum of
    all the multiples of 3 up to `range`. The second time, we pass in `floor of range/5`
    and multiply the result by `5`, which gives us the sum of all multiples of 5 up
    to `range`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding these two numbers together gets us close to the answer, but there’s
    a problem: any multiples of 15 have been counted twice, as multiples of 3 and
    multiples of 5\. So we use the `Triangular` block one more time, passing in `floor
    of range/15` and multiplying the result by `15`. This gives us the sum of all
    the multiples of 15 up to `range`, which we subtract from `sum` to get the final
    result ➋. This hack is a general trick called the *principle of inclusion–exclusion*;
    you can use it anytime you want to keep track of how often multiple overlapping
    conditions are satisfied without counting the overlaps twice.'
  prefs: []
  type: TYPE_NORMAL
- en: Sure enough, this code gives output matching the first version of the program,
    with the advantage that it gives the answer quickly all the way up to flintmax.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg26_Image_12.jpg) Programming Challenges'
  prefs: []
  type: TYPE_NORMAL
- en: '**9.1**Change the code in [Figure 9-3](ch09.xhtml#ch9fig3) to allow a different
    pair of multiples than 3 and 5\. Have Scratch Cat ask what multiples to use and
    build them into your program.'
  prefs: []
  type: TYPE_NORMAL
- en: '**9.2**Make the code in [Figure 9-5](ch09.xhtml#ch9fig5) work for different
    pairs of multiples, too. Be careful here: you need to make sure your solution
    works even if the numbers aren’t relatively prime.'
  prefs: []
  type: TYPE_NORMAL
- en: '**9.3**Figure out how to program the inclusion–exclusion hack when there are
    three relatively prime multiples to screen rather than two.'
  prefs: []
  type: TYPE_NORMAL
- en: Beyond Project Euler
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you’ve burned through Project Euler and you’re ready for more, here are
    some search terms you can try out in your favorite search engine that might lead
    you to some other interesting problems:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Math challenge problems** This will probably turn up problems with lots of
    different difficulty levels; choose the ones that are right for you.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scratch challenges** A lot of these focus on graphics and games, but you’ll
    find some math challenges, too.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scratch math games** This is more likely to turn up math-focused exercises
    and ideas.'
  prefs: []
  type: TYPE_NORMAL
- en: '**MAA *Convergence*** This will lead you to a journal of the Mathematical Association
    of America, *Convergence*, that has a nice list of open access problems organized
    chronologically, geographically, or by subject. The emphasis isn’t usually on
    programming, but sometimes a little bit of experimentation is a good way to understand
    what’s going on.'
  prefs: []
  type: TYPE_NORMAL
- en: There’s always a chance that searches like these will turn up problems that
    are too easy or too hard. But even if a problem bores you or baffles you, it might
    be a gateway to an interesting variation that’s just right.
  prefs: []
  type: TYPE_NORMAL
- en: More Scratch Projects to Explore
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to find more math projects specifically for Scratch, a great place
    to look is the Scratch website, *[https://scratch.mit.edu](https://scratch.mit.edu)*.
    There’s a search box at the top (see [Figure 9-6](ch09.xhtml#ch9fig6)) that you
    can use to find all kinds of projects that members of the community have posted.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg191_Image_241.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-6: Where to look for more math in Scratch*'
  prefs: []
  type: TYPE_NORMAL
- en: The Scratch philosophy is that code is to be shared, and anything that’s been
    posted on the site is available to copy and extend, as long as you give credit
    to the original poster. There are lots of programs that are first efforts and
    good for easy play, as well as some very elaborate work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some search terms for the Scratch website that will lead you to interesting
    projects related to the programs we’ve built in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 1: What Computers Think About Numbers](ch01.xhtml#ch01)'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)binary clock'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)ternary'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)octal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)decimal fraction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)binary search'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)math parser'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)floating point'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 2: Exploring Divisibility and Primes](ch02.xhtml#ch02)'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)modular times table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)twin prime'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)Eratosthenes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)grid sequence'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)fraction adder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)Egyptian fraction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)divisibility test'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 3: Splitting Numbers with Prime Factorization](ch03.xhtml#ch03)'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)trial division'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)factorization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)Mersenne prime'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)sum of divisors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)Fermat prime'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)semiprime (another word for *biprime*)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![Image](../images/pg18_Image_5.jpg)Lucas–Lehmer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)Spirograph'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)repunit (a number like 1111 that contains
    only the digit 1)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '[Chapter 4: Finding Patterns in Sequences](ch04.xhtml#ch04)'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)Fibonacci'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)Padovan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)triangular number'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)Zeckendorf'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)pentagonal number'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)geometric art'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)number pattern'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 5: From Sequences to Arrays](ch05.xhtml#ch05)'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)Pascal’s triangle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)binomial coefficient'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)magic square'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)histogram'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)distribution'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)modular arithmetic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 6: Making Codes, and Cracking Them Too](ch06.xhtml#ch06)'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)secret code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)Caesar cipher'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)steganography'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)modular inverse'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)one-time pad'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)frequency analysis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)public key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 7: Experiments in Counting](ch07.xhtml#ch07)'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)combinatorics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)8 queens'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)handshake problem'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)recursion'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)Sierpiński'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 8: Three Helpings of Pi](ch08.xhtml#ch08)'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)Buffon'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)spigot'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Image](../images/pg18_Image_5.jpg)tau (not the number of divisors function,
    but a quantity related to *π*!)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![Image](../images/pg18_Image_5.jpg)pi calculator'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Scratch is like a mental amplifier, letting you see more deeply into patterns
    than you could on your own. We’ve used Scratch in this book to explore arithmetic,
    number theory, geometry, cryptography, sequences, and arrays—and that’s just the
    beginning of what it can do.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you stick with Scratch or go on to other programming languages, the
    algorithms and the way of seeing the world with computer-aided vision that Scratch
    provides can help you be a more creative thinker. I hope to see you someday at
    my Scratch studio (*[https://scratch.mit.edu/studios/29153814](https://scratch.mit.edu/studios/29153814)*),
    and I’d love to see any variations or extensions of this book’s programs you decide
    to share. Until then, keep on coding!
  prefs: []
  type: TYPE_NORMAL
