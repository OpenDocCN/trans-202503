- en: '17'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DEPLOYING ACTIVE DIRECTORY
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this chapter, you’ll take what you’ve learned over the last few chapters
    of [Part II](part2.xhtml#part2) and begin deploying services on top of your virtual
    machines. Because so many other services depend on Active Directory, you must
    first deploy an Active Directory forest and domain. The AD forest and domain will
    support your authentication and authorization needs for the remaining chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming that you already read through and provisioned the LABDC VM in the preceding
    chapter, you’ll be using that to fully automate provisioning an Active Directory
    forest, and populating it with some test users and groups.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You’ll use what you made in [Chapter 16](ch16.xhtml#ch16), so I’m assuming
    that you have a LABDC VM set up, built using the unattended XML, and booted up
    running Windows Server 2016\. If so, you’re good to go! If not, you can still
    mine this chapter for examples of how to automate Active Directory, but fair warning:
    you won’t be able to completely follow along.'
  prefs: []
  type: TYPE_NORMAL
- en: As always, run the associated prerequisite Pester test to ensure that you meet
    all the prerequisites for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Active Directory Forest
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The good news is that, all things considered, creating an AD forest with PowerShell
    is pretty easy. When it comes down to it, you’re essentially running just two
    commands: `Install-WindowsFeature` and `Install-ADDSForest`. With these two commands,
    you can build a single forest, build a domain, and provision a Windows server
    as a domain controller.'
  prefs: []
  type: TYPE_NORMAL
- en: Because you’ll use this forest in a lab environment, you’ll also be creating
    some organizational units, users, and groups. Being in a lab environment means
    you don’t have any production objects to work with. Without going through the
    hassle of attempting to sync production AD objects with your lab, you can, instead,
    create many objects that mimic production and give you some objects to work with.
  prefs: []
  type: TYPE_NORMAL
- en: Building the Forest
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first thing you need to do when creating a new AD forest is to promote a
    *domain controller*, the lowest common denominator in Active Directory. To have
    a functioning AD environment, you must have at least one domain controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since this is a lab environment, you’ll use a single domain controller. In
    a real-world situation, you’d want at least two domain controllers for redundancy.
    However, because you have no data in your lab environment and the ability to quickly
    re-create it from scratch, you’ll use only one here. Before doing anything, you
    need to install the `AD-Domain-Services` Windows feature on your LABDC server.
    The command to install a Windows feature is `Install-WindowsFeature`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: PS> 'P@$$w0rd12' | ConvertTo-SecureString -Force -AsPlainText
  prefs: []
  type: TYPE_NORMAL
- en: '| Export-Clixml -Path C:\PowerLab\SafeModeAdministratorPassword.xml'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: PS> $safeModePw = Import-CliXml -Path C:\PowerLab\
  prefs: []
  type: TYPE_NORMAL
- en: SafeModeAdministratorPassword.xml
  prefs: []
  type: TYPE_NORMAL
- en: PS> $cred = Import-CliXml -Path C:\PowerLab\VMCredential.xml
  prefs: []
  type: TYPE_NORMAL
- en: PS> $forestParams = @{
  prefs: []
  type: TYPE_NORMAL
- en: '>>> DomainName                    = ''powerlab.local'' ❶'
  prefs: []
  type: TYPE_NORMAL
- en: '>>> DomainMode                    = ''WinThreshold'' ❷'
  prefs: []
  type: TYPE_NORMAL
- en: '>>> ForestMode                    = ''WinThreshold'''
  prefs: []
  type: TYPE_NORMAL
- en: '>>> Confirm                       = $false ❸'
  prefs: []
  type: TYPE_NORMAL
- en: '>>> SafeModeAdministratorPassword = $safeModePw ❹'
  prefs: []
  type: TYPE_NORMAL
- en: '>>> WarningAction                 = ''Ignore ❺'
  prefs: []
  type: TYPE_NORMAL
- en: '>>>}'
  prefs: []
  type: TYPE_NORMAL
- en: PS> Invoke-Command -VMName 'LABDC' -Credential $cred -ScriptBlock { $null =
  prefs: []
  type: TYPE_NORMAL
- en: Install-ADDSForest @using:forestParams }
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: function New-PowerLabActiveDirectoryForest {
  prefs: []
  type: TYPE_NORMAL
- en: param(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Parameter(Mandatory)]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[pscredential]$Credential,'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Parameter(Mandatory)]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[string]$SafeModePassword,'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Parameter()]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[string]$VMName = ''LABDC'','
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Parameter()]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[string]$DomainName = ''powerlab.local'','
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Parameter()]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[string]$DomainMode = ''WinThreshold'','
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Parameter()]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[string]$ForestMode = ''WinThreshold'''
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Invoke-Command -VMName $VMName -Credential $Credential -ScriptBlock {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Install-windowsfeature -Name AD-Domain-Services
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: $forestParams = @{
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: DomainName                    = $using:DomainName
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: DomainMode                    = $using:DomainMode
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ForestMode                    = $using:ForestMode
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Confirm                       = $false
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: SafeModeAdministratorPassword = (ConvertTo-SecureString
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '-AsPlainText -String $using:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: SafeModePassword -Force)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: WarningAction                 = 'Ignore'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: $null = Install-ADDSForest @forestParams
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: PS> $safeModePw = Import-CliXml -Path C:\PowerLab\SafeModeAdministratorPassword.xml
  prefs: []
  type: TYPE_NORMAL
- en: PS> $cred = Import-CliXml -Path C:\PowerLab\VMCredential.xml
  prefs: []
  type: TYPE_NORMAL
- en: PS> New-PowerLabActiveDirectoryForest -Credential $cred -SafeModePassword $safeModePw
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: PS> Get-Credential | Export-CliXml -Path C:\PowerLab\DomainCredential.xml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: function Test-PowerLabActiveDirectoryForest {
  prefs: []
  type: TYPE_NORMAL
- en: param(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Parameter(Mandatory)]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[pscredential]$Credential,'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Parameter()]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[string]$VMName = ''LABDC'''
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Invoke-Command -Credential $Credential -ScriptBlock {Get-AdUser -Filter * }
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: PS> Import-Excel -Path 'C:\Program Files\WindowsPowerShell\Modules\PowerLab\
  prefs: []
  type: TYPE_NORMAL
- en: ActiveDirectoryObjects.xlsx' -WorksheetName Users | Format-Table -AutoSize
  prefs: []
  type: TYPE_NORMAL
- en: OUName         UserName   FirstName LastName  MemberOf
  prefs: []
  type: TYPE_NORMAL
- en: '------         --------   --------- --------  --------'
  prefs: []
  type: TYPE_NORMAL
- en: PowerLab Users jjones     Joe       Jones     Accounting
  prefs: []
  type: TYPE_NORMAL
- en: PowerLab Users abertram   Adam      Bertram   Accounting
  prefs: []
  type: TYPE_NORMAL
- en: PowerLab Users jhicks     Jeff      Hicks     Accounting
  prefs: []
  type: TYPE_NORMAL
- en: PowerLab Users dtrump     Donald    Trump     Human Resources
  prefs: []
  type: TYPE_NORMAL
- en: PowerLab Users alincoln   Abraham   Lincoln   Human Resources
  prefs: []
  type: TYPE_NORMAL
- en: PowerLab Users bobama     Barack    Obama     Human Resources
  prefs: []
  type: TYPE_NORMAL
- en: PowerLab Users tjefferson Thomas    Jefferson IT
  prefs: []
  type: TYPE_NORMAL
- en: PowerLab Users bclinton   Bill      Clinton   IT
  prefs: []
  type: TYPE_NORMAL
- en: PowerLab Users gbush      George    Bush      IT
  prefs: []
  type: TYPE_NORMAL
- en: PowerLab Users rreagan    Ronald    Reagan    IT
  prefs: []
  type: TYPE_NORMAL
- en: PS> Import-Excel -Path 'C:\Program Files\WindowsPowerShell\Modules\PowerLab\
  prefs: []
  type: TYPE_NORMAL
- en: ActiveDirectoryObjects.xlsx' -WorksheetName Groups | Format-Table -AutoSize
  prefs: []
  type: TYPE_NORMAL
- en: OUName          GroupName       Type
  prefs: []
  type: TYPE_NORMAL
- en: '------          ---------       ----'
  prefs: []
  type: TYPE_NORMAL
- en: PowerLab Groups Accounting      DomainLocal
  prefs: []
  type: TYPE_NORMAL
- en: PowerLab Groups Human Resources DomainLocal
  prefs: []
  type: TYPE_NORMAL
- en: PowerLab Groups IT              DomainLocal
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Get-ADOrganizationalUnit -Filter "Name -eq 'OUName'" ❶
  prefs: []
  type: TYPE_NORMAL
- en: New-ADOrganizationalUnit -Name OUName ❷
  prefs: []
  type: TYPE_NORMAL
- en: Get-ADGroup -Filter "Name -eq 'GroupName'" ❸
  prefs: []
  type: TYPE_NORMAL
- en: New-ADGroup -Name $group.GroupName -GroupScope GroupScope -Path "OU=$group.OUName,DC=powerlab,DC=local"
    ❹
  prefs: []
  type: TYPE_NORMAL
- en: Get-ADUser -Filter "Name -eq 'UserName'" ❺
  prefs: []
  type: TYPE_NORMAL
- en: New-ADUser -Name $user.UserName -Path "OU=$($user.OUName),DC=powerlab,DC=local"
    ❻
  prefs: []
  type: TYPE_NORMAL
- en: UserName -in (Get-ADGroupMember -Identity GroupName).Name ❼
  prefs: []
  type: TYPE_NORMAL
- en: Add-ADGroupMember -Identity GroupName -Members UserName ❽
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: if (-not (Get-ADOrganizationalUnit -Filter "Name -eq 'OUName'")) {
  prefs: []
  type: TYPE_NORMAL
- en: New-ADOrganizationalUnit -Name OUName
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: if (-not (Get-ADGroup -Filter "Name -eq 'GroupName'")) {
  prefs: []
  type: TYPE_NORMAL
- en: New-ADGroup -Name GroupName -GroupScope GroupScope -Path "OU=OUName,DC=powerlab,DC=local"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: if (-not (Get-ADUser -Filter "Name -eq 'UserName'")) {
  prefs: []
  type: TYPE_NORMAL
- en: New-ADUser -Name $user.UserName -Path "OU=OUName,DC=powerlab,DC=local"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: if (UserName -notin (Get-AdGroupMember -Identity GroupName).Name) {
  prefs: []
  type: TYPE_NORMAL
- en: Add-ADGroupMember -Identity GroupName -Members UserName
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: $users = Import-Excel -Path 'C:\Program Files\WindowsPowerShell\Modules\
  prefs: []
  type: TYPE_NORMAL
- en: PowerLab\ActiveDirectoryObjects.xlsx' -WorksheetName Users
  prefs: []
  type: TYPE_NORMAL
- en: $groups = Import-Excel -Path 'C:\Program Files\WindowsPowerShell\Modules\
  prefs: []
  type: TYPE_NORMAL
- en: PowerLab\ActiveDirectoryObjects.xlsx' -WorksheetName Groups
  prefs: []
  type: TYPE_NORMAL
- en: foreach ($group in $groups) {
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: foreach ($user in $users) {
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: $users = Import-Excel -Path 'C:\Program Files\WindowsPowerShell\Modules\PowerLab\
  prefs: []
  type: TYPE_NORMAL
- en: ActiveDirectoryObjects.xlsx' -WorksheetName Users
  prefs: []
  type: TYPE_NORMAL
- en: $groups = Import-Excel -Path 'C:\Program Files\WindowsPowerShell\Modules\PowerLab\
  prefs: []
  type: TYPE_NORMAL
- en: ActiveDirectoryObjects.xlsx' -WorksheetName Groups
  prefs: []
  type: TYPE_NORMAL
- en: foreach ($group in $groups) {
  prefs: []
  type: TYPE_NORMAL
- en: if (-not (Get-ADOrganizationalUnit -Filter "Name -eq '$($group.OUName)'")) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New-ADOrganizationalUnit -Name $group.OUName
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (-not (Get-ADGroup -Filter "Name -eq '$($group.GroupName)'")) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New-ADGroup -Name $group.GroupName -GroupScope $group.Type
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: -Path "OU=$($group.OUName),DC=powerlab,DC=local"
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: foreach ($user in $users) {
  prefs: []
  type: TYPE_NORMAL
- en: if (-not (Get-ADOrganizationalUnit -Filter "Name -eq '$($user.OUName)'")) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New-ADOrganizationalUnit -Name $user.OUName
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (-not (Get-ADUser -Filter "Name -eq '$($user.UserName)'")) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New-ADUser -Name $user.UserName -Path "OU=$($user.OUName),DC=powerlab,DC=local"
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if ($user.UserName -notin (Get-ADGroupMember -Identity $user.MemberOf).Name)
    {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add-ADGroupMember -Identity $user.MemberOf -Members $user.UserName
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: context 'Domain' {
  prefs: []
  type: TYPE_NORMAL
- en: ❶ $domain = Invoke-Command -Session $session -ScriptBlock { Get-AdDomain }
  prefs: []
  type: TYPE_NORMAL
- en: $forest = Invoke-Command -Session $session -ScriptBlock { Get-AdForest }
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ❷ it "the domain mode should be Windows2016Domain" {
  prefs: []
  type: TYPE_NORMAL
- en: $domain.DomainMode | should be 'Windows2016Domain'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: it "the forest mode should be WinThreshold" {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $forest.ForestMode | should be 'Windows2016Forest'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: it "the domain name should be powerlab.local" {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $domain.Name | should be 'powerlab'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Describing Active Directory Forest
  prefs: []
  type: TYPE_NORMAL
- en: Context Domain
  prefs: []
  type: TYPE_NORMAL
- en: '[+] the domain mode should be Windows2016Domain 933ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the forest mode should be WinThreshold 25ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the domain name should be powerlab.local 41ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Context Organizational Units
  prefs: []
  type: TYPE_NORMAL
- en: '[+] the OU [PowerLab Users] should exist 85ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the OU [PowerLab Groups] should exist 37ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Context Users
  prefs: []
  type: TYPE_NORMAL
- en: '[+] the user [jjones] should exist 74ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [jjones] should be in the [PowerLab Users] OU 35ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [jjones] should be in the [Accounting] group 121ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [abertram] should exist 39ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [abertram] should be in the [PowerLab Users] OU 30ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [abertram] should be in the [Accounting] group 80ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [jhicks] should exist 39ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [jhicks] should be in the [PowerLab Users] OU 32ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [jhicks] should be in the [Accounting] group 81ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [dtrump] should exist 45ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [dtrump] should be in the [PowerLab Users] OU 40ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [dtrump] should be in the [Human Resources] group 84ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [alincoln] should exist 41ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [alincoln] should be in the [PowerLab Users] OU 40ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [alincoln] should be in the [Human Resources] group 125ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [bobama] should exist 44ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [bobama] should be in the [PowerLab Users] OU 27ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [bobama] should be in the [Human Resources] group 92ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [tjefferson] should exist 58ms'
  prefs: []
  type: TYPE_NORMAL
- en: '[+] the user [tjefferson] should be in the [PowerLab Users] OU 33ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [tjefferson] should be in the [IT] group 73ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [bclinton] should exist 47ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [bclinton] should be in the [PowerLab Users] OU 29ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [bclinton] should be in the [IT] group 84ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [gbush] should exist 50ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [gbush] should be in the [PowerLab Users] OU 33ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [gbush] should be in the [IT] group 78ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [rreagan] should exist 56ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [rreagan] should be in the [PowerLab Users] OU 30ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the user [rreagan] should be in the [IT] group 78ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Context Groups
  prefs: []
  type: TYPE_NORMAL
- en: '[+] the group [Accounting] should exist 71ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the group [Accounting] should be in the [PowerLab Groups] OU 42ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the group [Human Resources] should exist 48ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the group [Human Resources] should be in the [PowerLab Groups] OU 29ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the group [IT] should exist 51ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[+] the group [IT] should be in the [PowerLab Groups] OU 31ms'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you took the next step in the creation of your PowerLab and
    added an Active Directory forest before populating it with several objects. You
    did this both manually and automatically, and in the process, reviewed some of
    what you had learned about Active Directory in previous chapters. Lastly, you
    dived a little deeper into Pester testing, taking a closer look at how to build
    custom tests that suit your needs. In the next chapter, you’ll continue with the
    PowerLab project and learn how to automate installing and configuring a SQL server.
  prefs: []
  type: TYPE_NORMAL
