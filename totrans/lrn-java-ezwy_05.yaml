- en: '**5**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**5**'
- en: POLISHING YOUR APP BY ADDING MENUS AND PREFERENCES
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 精细化你的应用，加入菜单和设置
- en: '![Image](../images/circle.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/circle.jpg)'
- en: You’ve written a fun Android app, but it’s still missing a few things. You haven’t
    learned how to build a settings or options menu in Android or how to save high
    scores, game stats, and other information. In this chapter, we’ll add an options
    menu to our Hi-Lo guessing game app and the capability to store information.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经写了一个有趣的 Android 应用，但它仍然缺少一些东西。你还没有学习如何在 Android 中构建设置或选项菜单，或者如何保存高分、游戏统计信息和其他数据。在本章中，我们将为我们的
    Hi-Lo 猜数字游戏应用添加一个选项菜单，并添加存储信息的功能。
- en: Adding an Options Menu in Android
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Android 中添加选项菜单
- en: Most apps and games have options or settings that the user can access through
    a menu. For the Hi-Lo guessing game, we might want to allow the user to change
    the game’s difficulty level, start over, see their game stats, or view an About
    screen, so we’ll create a menu that can perform all of these actions.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用和游戏都有用户可以通过菜单访问的选项或设置。对于 Hi-Lo 猜数字游戏，我们可能希望允许用户更改游戏的难度级别、重新开始、查看游戏统计信息或查看关于屏幕，所以我们将创建一个可以执行所有这些操作的菜单。
- en: 'There are four general steps to adding an options menu in Android:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 中添加选项菜单的步骤有四个：
- en: 1\. Edit the app’s default XML menu file to create items that will serve as
    the options the user can select.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 编辑应用的默认 XML 菜单文件，创建用户可以选择的选项项。
- en: 2\. Modify the app’s activity file to display the menu and options that we created
    in the previous step.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 修改应用的活动文件，显示我们在上一步创建的菜单和选项。
- en: 3\. Create an event handler to determine when the user selects an option.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 创建一个事件处理程序，以确定用户何时选择一个选项。
- en: 4\. Write the code to execute for each option when the user selects it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 编写代码以便用户选择每个选项时执行。
- en: Adding the options menu not only will make our app look and feel more professional
    but will also give the user greater control over their gaming experience. My sons
    loved being able to change the range of the guessing game from 1 to 10, then 1
    to 100, then 1 to 1,000, but when we added the Game Stats option that displays
    the number of games won, I almost couldn’t get my device back from them—they wanted
    to keep running the number higher and higher! I hope you’ll find these extra features
    as fun (and maybe as addictive) as they did.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 添加选项菜单不仅能让我们的应用看起来更专业，也能让用户对他们的游戏体验拥有更大的控制权。我的儿子们喜欢能够将猜数字游戏的范围从1到10改成1到100，再到1到1000，但当我们添加了显示游戏胜利次数的“游戏统计”选项时，我几乎无法把设备从他们手中拿回来——他们想不断地将数字增大！我希望你们能像他们一样觉得这些额外的功能既有趣（也许还有点上瘾）。
- en: '*Adding Items to the Menu’s XML File*'
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*向菜单的 XML 文件添加项*'
- en: Open your Hi-Lo guessing game project in Android Studio and, in the Project
    Explorer pane, change the view at the top left to **Android**. Then, open the
    default menu file by expanding **app** ▸ **res** ▸ **menu** and double-clicking
    *menu_main.xml*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中打开你的 Hi-Lo 猜数字游戏项目，在项目资源管理器窗格中，将左上角的视图更改为 **Android**。然后，通过展开
    **app** ▸ **res** ▸ **menu**，并双击 *menu_main.xml* 打开默认菜单文件。
- en: 'Change the XML code in your *menu_main.xml* file to match the following listing:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 修改 *menu_main.xml* 文件中的 XML 代码，使其与以下内容相符：
- en: <menu xmlns:android="http://schemas.android.com/apk/res/android">
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: <menu xmlns:android="http://schemas.android.com/apk/res/android">
- en: <item
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <item
- en: android:id="@+id/action_settings"
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: android:id="@+id/action_settings"
- en: android:title="Settings" />
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: android:title="设置" />
- en: <item
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <item
- en: android:id="@+id/action_newgame"
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: android:id="@+id/action_newgame"
- en: android:title="New Game" />
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: android:title="新游戏" />
- en: <item
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <item
- en: android:id="@+id/action_gamestats"
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: android:id="@+id/action_gamestats"
- en: android:title="Game Stats" />
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: android:title="游戏统计" />
- en: <item
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: <item
- en: android:id="@+id/action_about"
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: android:id="@+id/action_about"
- en: android:title="About" />
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: android:title="关于" />
- en: </menu>
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: </menu>
- en: The `<menu>` tag creates a menu resource using the XML namespace for Android
    XML documents, identified by the uniform resource identifier (URI) *http://schemas.android.com/apk/res/android*.
    We can use XML to store or display everything from web pages to databases by connecting
    XML tags to those elements. The `xmlns` (XML namespace) attribute in this code
    selects the main Android namespace so that the tags in this XML file will refer
    to common elements in an Android application. So, the `<menu>` tag refers to an
    Android menu, and each `<item>` tag describes an item or entry in that menu with
    attributes. This menu will have the four options Settings, New Game, Game Stats,
    and About, so we add four `<item>` tags. We assign those names to each item’s
    `title` attribute, which determines the text displayed for each option when the
    user opens the menu. We’ll use the `id` attribute later in our code to determine
    which option the user has selected.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`<menu>` 标签通过 Android XML 文档的 XML 命名空间创建一个菜单资源，该命名空间由统一资源标识符（URI） *http://schemas.android.com/apk/res/android*
    标识。我们可以通过将 XML 标签与元素连接，使用 XML 存储或显示从网页到数据库的所有内容。此代码中的 `xmlns`（XML 命名空间）属性选择了主要的
    Android 命名空间，以便该 XML 文件中的标签会引用 Android 应用中的通用元素。因此，`<menu>` 标签表示一个 Android 菜单，而每个
    `<item>` 标签描述该菜单中的一个项或条目及其属性。这个菜单将包含四个选项：设置、新游戏、游戏统计和关于，因此我们添加了四个 `<item>` 标签。我们将这些名称分配给每个项的
    `title` 属性，它决定了用户打开菜单时显示的文本。稍后我们将在代码中使用 `id` 属性来确定用户选择了哪个选项。'
- en: Save the *menu_main.xml* file. Now it’s time to display our options menu in
    the Hi-Lo guessing game app.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 保存 *menu_main.xml* 文件。现在是时候在 Hi-Lo 猜数字游戏应用中显示我们的选项菜单了。
- en: '*Displaying the Options Menu*'
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*显示选项菜单*'
- en: We’ve set up the menu, but in order to display it, we need to add some Java
    code to our app’s *MainActivity.java* file. Open *MainActivity.java* in the Project
    Explorer pane under **app** ▸ **java** ▸ **com.*****yourdomain*****.GuessingGame**.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经设置好了菜单，但为了显示它，我们需要在应用的 *MainActivity.java* 文件中添加一些 Java 代码。在 **app** ▸ **java**
    ▸ **com.*****yourdomain*****.GuessingGame** 下的项目资源管理器中打开 *MainActivity.java* 文件。
- en: Near the middle or bottom of the `MainActivity` class, you should find a method
    called `onCreateOptionsMenu()`. Modify it to match the code snippet below. (If
    your code doesn’t have the `onCreateOptionsMenu()` method, add the following code
    after the closing brace of `onCreate()` but before the final closing brace for
    `MainActivity`.)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `MainActivity` 类的中部或底部，你应该能找到一个名为 `onCreateOptionsMenu()` 的方法。将它修改为以下代码片段。（如果你的代码中没有
    `onCreateOptionsMenu()` 方法，在 `onCreate()` 的结束括号后但在 `MainActivity` 的最终结束括号前添加以下代码。）
- en: public boolean onCreateOptionsMenu(Menu menu) {
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: public boolean onCreateOptionsMenu(Menu menu) {
- en: MenuInflater inflater = getMenuInflater();
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: MenuInflater inflater = getMenuInflater();
- en: inflater.inflate(R.menu.menu_main, menu);
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: inflater.inflate(R.menu.menu_main, menu);
- en: return true;
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: return true;
- en: '}'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '} // Final closing brace of the MainActivity.java file'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '} // MainActivity.java 文件的最终结束括号'
- en: The `onCreateOptionsMenu()` method does exactly what its name implies—it tells
    Android what to do when creating the options menu for our app. In this case, we
    tell Android we want to expand the *menu_main.xml* file to serve as our options
    menu. The *menu_main.xml* file isn’t a menu yet, so we need to convert it into
    a menu using a class called a `MenuInflator`. We’ll create a `MenuInflator` instance,
    which we call `inflater`, by using the `getMenuInflator()` method. Once we have
    `inflater`, we call the `inflate()` method and pass it the XML file (`R.menu.menu_main`)
    and the menu we want the XML file’s items to inflate into (`menu`). You may need
    to press ALT-ENTER (on macOS, OPTION-ENTER) to correct any missing `import` statements
    as you add the code to your file.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`onCreateOptionsMenu()` 方法正如其名称所示，它告诉 Android 在为我们的应用创建选项菜单时该做什么。在本例中，我们告诉
    Android 我们希望扩展 *menu_main.xml* 文件，作为我们的选项菜单。*menu_main.xml* 文件尚未成为一个菜单，因此我们需要使用一个名为
    `MenuInflater` 的类将其转换为菜单。我们将通过 `getMenuInflater()` 方法创建一个 `MenuInflater` 实例，命名为
    `inflater`。得到 `inflater` 后，我们调用 `inflate()` 方法，并传入 XML 文件（`R.menu.menu_main`）和我们希望
    XML 文件中的项填充到的菜单（`menu`）。在你将代码添加到文件时，可能需要按 ALT-ENTER（在 macOS 上是 OPTION-ENTER）来修复缺失的
    `import` 语句。'
- en: After making this change, save and run the app. Android lets you know there’s
    an options menu available by displaying the three dots in the action bar of your
    app (see [Figure 5-1](ch5.xhtml#ch5fig1), top). Clicking the dots will display
    the options menu (see [Figure 5-1](ch5.xhtml#ch5fig1), bottom).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 做完这个更改后，保存并运行应用。Android 通过在应用的操作栏中显示三个点来告诉你有可用的选项菜单（见[图 5-1](ch5.xhtml#ch5fig1)，顶部）。点击这些点会显示选项菜单（见[图
    5-1](ch5.xhtml#ch5fig1)，底部）。
- en: '![Images](../images/f0112-01.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0112-01.jpg)'
- en: '*Figure 5-1: The options menu shows up as three dots in the app’s action bar
    (top). Clicking the three dots will expand the options menu (bottom).*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-1：选项菜单在应用的操作栏（顶部）显示为三个点。点击三个点将展开选项菜单（底部）。*'
- en: You’ll notice that clicking the options doesn’t do anything yet because we haven’t
    added the code to respond to user selections. We’ll do that next.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，点击选项目前并没有任何反应，因为我们还没有添加代码来响应用户的选择。接下来，我们将添加这个代码。
- en: '*Responding to User Selections*'
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*响应用户选择*'
- en: When the user chooses an option from the menu, we want our app to perform the
    requested action. In order for our app to do that, we need to add an event handler
    that keeps track of which option was selected. We’ll use the `id` attribute associated
    with each item to tell selections apart.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户从菜单中选择一个选项时，我们希望我们的应用执行所请求的操作。为了让应用做到这一点，我们需要添加一个事件处理方法来跟踪选择了哪个选项。我们将使用与每个项关联的`id`属性来区分不同的选择。
- en: In the *MainActivity.java* file, find and modify the `onOptionsItemSelected()`
    event handler method. Alternatively, you can add it right below the method `onCreateOptionsMenu()`
    that we modified in the previous section, but before the closing brace on the
    final line of the file.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在*MainActivity.java*文件中，找到并修改`onOptionsItemSelected()`事件处理方法。或者，你也可以将其添加到我们在上一节中修改的`onCreateOptionsMenu()`方法下方，但要放在文件最后一行的闭括号之前。
- en: public boolean onCreateOptionsMenu(Menu menu) {
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: public boolean onCreateOptionsMenu(Menu menu) {
- en: MenuInflater inflater = getMenuInflater();
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: MenuInflater inflater = getMenuInflater();
- en: inflater.inflate(R.menu.menu_main, menu);
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: inflater.inflate(R.menu.menu_main, menu);
- en: return true;
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: return true;
- en: '}'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public boolean onOptionsItemSelected(MenuItem item) {
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: public boolean onOptionsItemSelected(MenuItem item) {
- en: switch (item.getItemId()) {
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: switch (item.getItemId()) {
- en: 'case R.id.action_settings:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 'case R.id.action_settings:'
- en: return true;
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: return true;
- en: 'case R.id.action_newgame:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 'case R.id.action_newgame:'
- en: newGame();
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: newGame();
- en: return true;
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: return true;
- en: 'case R.id.action_gamestats:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 'case R.id.action_gamestats:'
- en: return true;
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: return true;
- en: 'case R.id.action_about:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 'case R.id.action_about:'
- en: return true;
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: return true;
- en: 'default:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 'default:'
- en: return super.onOptionsItemSelected(item);
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: return super.onOptionsItemSelected(item);
- en: '}'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: In this code, we use a `switch` statement to determine which of the options
    the user selected on the menu. A `switch` statement is another way of testing
    multiple conditions, similar to a long chain of `if-else` statements. Rather than
    chaining four `if-else` statements to test for each possible menu item selection,
    though, we can use a single `switch` statement, with the variable we’re testing
    inside parentheses after the `switch` keyword. In this example, we’re checking
    the `id` of the menu item the user selected, so we use `switch (item.getItemId())`.
    Then, inside the braces for the `switch` statement, we list the values we want
    to test as `case` statements (e.g., `case R.id.action_settings`), each of which
    is followed by a colon (`:`), the code to run for that selection, and either a
    `break` or `return` statement. This event handler returns a Boolean value, so
    we’ve used `return` statements instead of `break` statements in each `case` block.
    If we didn’t have `return` statements here, we would need to use a `break` command
    as the final statement of each case.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们使用`switch`语句来判断用户在菜单中选择了哪个选项。`switch`语句是测试多个条件的另一种方式，类似于一连串的`if-else`语句。不过，我们可以使用单一的`switch`语句，而不是通过四个`if-else`语句来测试每个可能的菜单项选择。我们将要测试的变量放在`switch`关键字后面的括号内。例如，我们正在检查用户选择的菜单项的`id`，因此我们使用`switch
    (item.getItemId())`。然后，在`switch`语句的括号内，我们列出我们要测试的值作为`case`语句（例如，`case R.id.action_settings`），每个`case`语句后跟一个冒号（`:`），执行该选择的代码，并跟着`break`或`return`语句。由于这个事件处理方法返回一个布尔值，所以我们在每个`case`块中使用`return`语句，而不是`break`语句。如果没有`return`语句，我们需要在每个`case`的最后使用`break`命令。
- en: Each `case` statement in this code tests for one of the `id` values of the items
    we entered in the *menu_main.xml* file, and the code for each value will execute
    in response to the user’s selection. Right now, we have code only for the `action_newgame`
    case, which starts a new game using the `newGame()` method. The other cases require
    writing a bit more code, so we’ll define those one at a time.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码中的每个`case`语句测试的是我们在*menu_main.xml*文件中输入的项的一个`id`值，每个值的代码将在用户选择时执行。目前，我们只有`action_newgame`这个`case`的代码，它会使用`newGame()`方法开始一个新游戏。其他的`case`需要编写更多代码，所以我们会逐一定义它们。
- en: '*Creating an Alert Dialog Pop-up for the About Screen*'
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*为关于页面创建一个警告对话框弹出框*'
- en: 'For the About menu option, we’ll pop up a dialog window similar to other applications
    you’ve likely seen. To do this, we’ll use an *alert dialog*, a flexible pop-up
    used to inform the user about something or to prompt them for a response. This
    kind of pop-up is more adaptable than the Toast pop-up we used in [Chapter 4](ch4.xhtml#ch4)
    (Programming Challenge #1 on [page 106](ch4.xhtml#page_106)), because the `AlertDialog`
    class allows us to customize the properties of our dialog through the `Builder`
    subclass. In this case, we’ll use an alert dialog to respond to the user selecting
    the About option with a message telling them who created the awesome Hi-Lo guessing
    game they’ve been playing.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“关于”菜单选项，我们将弹出一个对话框，类似于你可能见过的其他应用程序中的对话框。为此，我们将使用*警告对话框*，这是一种灵活的弹出窗口，用于通知用户某些信息或提示他们做出回应。这种弹出窗口比我们在[第
    4 章](ch4.xhtml#ch4)（第106页上的编程挑战#1）中使用的Toast弹出窗口更具适应性，因为`AlertDialog`类允许我们通过`Builder`子类自定义对话框的属性。在这种情况下，我们将使用警告对话框来响应用户选择“关于”选项，弹出一条消息告诉他们是谁创建了他们正在玩的精彩的Hi-Lo猜数字游戏。
- en: 'Add the following code to the `case` statement for the `action_about` item
    selection:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到`action_about`项选择的`case`语句中：
- en: 'case R.id.action_about:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 'case R.id.action_about:'
- en: ➊ AlertDialog aboutDialog = new AlertDialog.Builder(MainActivity.this).create();
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ AlertDialog aboutDialog = new AlertDialog.Builder(MainActivity.this).create();
- en: ➋ aboutDialog.setTitle("About Guessing Game");
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: ➋ aboutDialog.setTitle("关于猜数字游戏");
- en: ➌ aboutDialog.setMessage("(c)2018 Your Name.");
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: ➌ aboutDialog.setMessage("(c)2018 你的名字。");
- en: ➍ aboutDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "OK",
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: ➍ aboutDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "OK",
- en: new DialogInterface.OnClickListener() {
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: new DialogInterface.OnClickListener() {
- en: public void onClick(DialogInterface dialog, int which) {
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: public void onClick(DialogInterface dialog, int which) {
- en: ➎ dialog.dismiss();
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: ➎ dialog.dismiss();
- en: '}'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '});'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: ➏ aboutDialog.show();     return true;
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: ➏ aboutDialog.show();     return true;
- en: We use the `AlertDialog.Builder` class ➊ to create a customized popup window.
    The code at ➋ sets the title of the pop-up window to `"About Guessing Game"`,
    and the line at ➌ displays a simple message with copyright information and your
    name (though you can write any text you’d like here). The `setButton()` method
    ➍ adds a button to the pop-up with the text `"OK"`, and the subsequent `onClick()`
    event listener closes the pop-up whenever the user clicks the OK button by calling
    the `dismiss()` method ➎. Finally, the customized pop-up is shown with the `show()`
    command ➏.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`AlertDialog.Builder`类 ➊ 来创建一个自定义的弹出窗口。➋ 处的代码将弹出窗口的标题设置为“关于猜数字游戏”，而 ➌ 处的代码显示一个简单的消息，包含版权信息和你的名字（当然你也可以在这里写任何你想写的文字）。`setButton()`方法
    ➍ 向弹出窗口添加一个文本为“OK”的按钮，接下来的`onClick()`事件监听器会在用户点击“OK”按钮时调用`dismiss()`方法 ➎ 来关闭弹出窗口。最后，通过`show()`命令
    ➏ 显示自定义的弹出窗口。
- en: Use ALT-ENTER (or OPTION-ENTER) to import the `AlertDialog` class. Then save
    your updated code and run the new version of the app. When you click the options
    menu and select the About option, you should see a pop-up window like the one
    in [Figure 5-2](ch5.xhtml#ch5fig2).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ALT-ENTER（或 OPTION-ENTER）来导入`AlertDialog`类。然后保存更新后的代码并运行应用的新版本。当你点击选项菜单并选择“关于”选项时，应该会看到一个像[图
    5-2](ch5.xhtml#ch5fig2)那样的弹出窗口。
- en: '![Images](../images/f0114-01.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0114-01.jpg)'
- en: '*Figure 5-2: A custom alert dialog pop-up*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-2：一个自定义的警告对话框弹出框*'
- en: The Hi-Lo guessing game app is beginning to feel even more like a professional
    Android app! Now let’s knock it out of the park by allowing the user to choose
    the difficulty level of the game and to keep track of how many games they’ve won.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Hi-Lo猜数字游戏应用程序现在开始感觉更像是一个专业的安卓应用程序了！现在，让我们进一步完善它，让用户可以选择游戏的难度级别，并跟踪他们赢得了多少场游戏。
- en: Changing the Guessing Range
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改猜测范围
- en: Letting the user choose the guessing range—say, from 1 to 10, 1 to 100, or 1
    to 1,000—would be a huge enhancement. Now that you understand option menus and
    alert dialogs, let’s map out how we might upgrade the game to allow the user to
    change the range setting.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让用户选择猜测范围——比如从 1 到 10，从 1 到 100，或者从 1 到 1000——将是一个巨大的增强功能。既然你已经了解了选项菜单和警告对话框，接下来我们来规划一下如何升级游戏，让用户可以更改猜测范围设置。
- en: 'First, we’ll need to add a variable for the range so that instead of using
    a hardcoded value of `100`, we’ll use the user’s chosen range. Second, we’ll need
    to modify the app’s behavior in a couple of ways. We’ll change the `newGame()`
    method to use the new range variable. We’ll also make the `TextView` that currently
    reads, `"Enter a number between 1 and 100:"` display a different prompt depending
    on the range selected. Finally, we’ll need to give the user a method of choosing
    the range. We’ll do this by building another custom alert dialog with the three
    range selections: 1 to 10, 1 to 100, and 1 to 1,000.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要为范围添加一个变量，这样我们就不再使用硬编码的`100`，而是使用用户选择的范围。其次，我们需要以几种方式修改应用程序的行为。我们将更改`newGame()`方法来使用新的范围变量。我们还将使当前显示“`Enter
    a number between 1 and 100:`”的`TextView`根据选择的范围显示不同的提示。最后，我们需要让用户选择范围。我们将通过构建另一个自定义警告对话框来实现，提供三种范围选择：1到10、1到100和1到1,000。
- en: '*Adding a Variable for the Range*'
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*为范围添加一个变量*'
- en: 'First, we’ll replace the hardcoded value of `100` we use in the random number
    calculation with a variable. At the top of the `MainActivity` class, add a variable
    for the `range` and set it to a default value of `100`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将用一个变量替换计算随机数时使用的硬编码值`100`。在`MainActivity`类的顶部，添加一个`range`变量并将其设置为默认值`100`：
- en: public class MainActivity extends AppCompatActivity {
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: public class MainActivity extends AppCompatActivity {
- en: private EditText txtGuess;
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: private EditText txtGuess;
- en: private Button btnGuess;
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: private Button btnGuess;
- en: private TextView lblOutput;
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: private TextView lblOutput;
- en: private int theNumber;
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: private int theNumber;
- en: private int range = 100;
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: private int range = 100;
- en: 'While we’re adding variables, let’s also add a second `TextView` for the label
    that reads, `"Enter a number between 1 and 100:"`. When the user selects a range
    other than 1 to 100, this label will no longer be correct, so we need a variable
    to store the appropriate text to display. We’ll create the variable called `lblRange`
    to do this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们添加变量的同时，我们还将为显示“`Enter a number between 1 and 100:`”的标签添加第二个`TextView`。当用户选择的范围不是1到100时，这个标签就不再正确，因此我们需要一个变量来存储要显示的适当文本。我们将创建一个名为`lblRange`的变量来实现这一点：
- en: private int range = 100;
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: private int range = 100;
- en: private TextView lblRange;
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: private TextView lblRange;
- en: To wire up the GUI to the `lblRange` variable, add the following line of code
    to the
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将GUI与`lblRange`变量连接起来，向代码中添加以下行：
- en: '`onCreate()` method:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`onCreate()`方法：'
- en: protected void onCreate(Bundle savedInstanceState) {
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: protected void onCreate(Bundle savedInstanceState) {
- en: super.onCreate(savedInstanceState);
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: super.onCreate(savedInstanceState);
- en: setContentView(R.layout.activity_main);
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: setContentView(R.layout.activity_main);
- en: txtGuess = (EditText) findViewById(R.id.txtGuess);
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: txtGuess = (EditText) findViewById(R.id.txtGuess);
- en: btnGuess = (Button) findViewById(R.id.btnGuess);
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: btnGuess = (Button) findViewById(R.id.btnGuess);
- en: lblOutput = (TextView) findViewById(R.id.lblOutput);
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: lblOutput = (TextView) findViewById(R.id.lblOutput);
- en: lblRange = (TextView) findViewById(R.id.textView2);
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: lblRange = (TextView) findViewById(R.id.textView2);
- en: 'If you get an error, check the name of your prompt’s `TextView` in the design
    view: open **app** ▸ **res** ▸ **layout** ▸ ***content_main.xml*** and click the
    label reading `"Enter a number between 1 and 100:"`. Change the label’s `id` property
    to `textView2`.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到错误，请检查设计视图中提示框的`TextView`名称：打开**app** ▸ **res** ▸ **layout** ▸ ***content_main.xml***，然后点击显示“`Enter
    a number between 1 and 100:`”的标签。将标签的`id`属性更改为`textView2`。
- en: With the `range` and `lblRange` variables set up, it’s time to modify the behavior
    of the app to use these variables instead of hardcoded values.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好`range`和`lblRange`变量后，接下来我们需要修改应用程序的行为，使其使用这些变量而不是硬编码值。
- en: '*Using the range Variable*'
  id: totrans-115
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*使用范围变量*'
- en: 'First, let’s modify the `newGame()` method to use the `range` variable. Let’s
    also add the code needed to change the prompt to let the user know the correct
    range to guess from:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们修改`newGame()`方法，使用`range`变量。我们还需要添加代码来更改提示信息，让用户知道正确的猜测范围：
- en: public void newGame() {
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: public void newGame() {
- en: theNumber = (int)(Math.random() * range + 1);
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: theNumber = (int)(Math.random() * range + 1);
- en: lblRange.setText("Enter a number between 1 and " + range + ".");
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: lblRange.setText("Enter a number between 1 and " + range + ".");
- en: txtGuess.setText("" + range/2);
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: txtGuess.setText("" + range/2);
- en: txtGuess.requestFocus();
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: txtGuess.requestFocus();
- en: txtGuess.selectAll();
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: txtGuess.selectAll();
- en: '}'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: In addition to using `range` to set the random number correctly, we’ve changed
    the `lblRange` prompt to use the `range` variable as well. The last three lines
    are a finishing touch—I’ve taken the liberty of entering a default starting value
    in the `txtGuess` text box, one half of the `range`. So, if the user is guessing
    between 1 and 10, the guessing text field will show 5 as a default first guess;
    if the range is 1,000, the text field will recommend 500 for the first guess.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用`range`正确设置随机数外，我们还更改了`lblRange`提示，以便使用`range`变量。最后三行是一个小小的修饰——我已经自作主张在`txtGuess`文本框中输入了一个默认的起始值，即`range`的一半。因此，如果用户的猜测范围是1到10，猜测文本框将显示5作为默认的第一次猜测；如果范围是1,000，文本框将推荐500作为第一次猜测。
- en: 'One last range-related change is found in the `checkGuess()` method. We added
    a `try-catch` statement to handle bad user input, and in the `catch` statement,
    we tell the user to enter a valid whole number in the range from 1 to 100\. Let’s
    change just the `catch` statement to reflect the user’s selected range:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个与范围相关的变化出现在`checkGuess()`方法中。我们添加了一个`try-catch`语句来处理无效的用户输入，在`catch`语句中，我们告诉用户输入一个有效的整数，范围为1到100。现在让我们仅更改`catch`语句以反映用户选择的范围：
- en: public void checkGuess() {
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: public void checkGuess() {
- en: --snip--
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '}'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '} catch (Exception e) {'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '} catch (Exception e) {'
- en: message = "Enter a whole number between 1 and " + range + ".";
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: message = "请输入一个介于1和" + range + "之间的整数。";
- en: '} finally {'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '} finally {'
- en: --snip--
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: '}'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: Now both `TextView` labels will display the user’s selected range correctly.
    It’s time to build the alert dialog to allow the user to select the difficulty
    level of their game.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，两个`TextView`标签将正确显示用户选择的范围。接下来是构建警告对话框，让用户选择他们游戏的难度级别。
- en: '*Building the Dialog to Allow the User to Select the Range*'
  id: totrans-136
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*构建对话框以允许用户选择范围*'
- en: The range settings dialog should display all the range options (1 to 10, 1 to
    100, and 1 to 1,000) to the user whenever they select the Settings option in the
    menu. To display the list of options, we’ll build another customized alert dialog,
    but this one will display a list view of the three range options.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 范围设置对话框应在用户选择菜单中的设置选项时，显示所有范围选项（1到10，1到100，1到1,000）。为了显示这些选项，我们将构建另一个自定义的警告对话框，但这个对话框会显示一个包含三个范围选项的列表视图。
- en: 'First, scroll back down to your `onOptionsItemSelected()` method and add the
    following code inside the `case` statement for `action_settings`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，滚动回到你的`onOptionsItemSelected()`方法，并在`action_settings`的`case`语句内添加以下代码：
- en: public boolean onOptionsItemSelected(MenuItem item) {
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: public boolean onOptionsItemSelected(MenuItem item) {
- en: switch (item.getItemId()) {
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: switch (item.getItemId()) {
- en: 'case R.id.action_settings:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 'case R.id.action_settings:'
- en: final CharSequence[] items = {"1 to 10", "1 to 100", "1 to 1000"};
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: final CharSequence[] items = {"1 到 10", "1 到 100", "1 到 1000"};
- en: AlertDialog.Builder builder = new AlertDialog.Builder(this);
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: AlertDialog.Builder builder = new AlertDialog.Builder(this);
- en: builder.setTitle("Select the Range:");
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: builder.setTitle("选择范围：");
- en: builder.setItems(items, null);
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: builder.setItems(items, null);
- en: AlertDialog alert = builder.create();
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: AlertDialog alert = builder.create();
- en: alert.show();
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: alert.show();
- en: return true;
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: return true;
- en: These six lines of code will display an alert dialog with a list view of the
    three options for the guessing range, but we need to add just a bit more code
    to handle the user’s selection. The `builder.setItems()` method will accept both
    a list of items and an event listener to handle the user’s choice from the list.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这六行代码将显示一个带有三个猜测范围选项的警告对话框，但我们需要再添加一点代码来处理用户的选择。`builder.setItems()`方法将接受一个项目列表和一个事件监听器，以处理用户从列表中选择的选项。
- en: 'If the user selects the first option, we need to change the value of the `range`
    variable to `10`, and likewise for the second and third options to `100` and `1000`,
    respectively. The code for the event listener goes inside the `builder.setItems()`
    statement:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户选择第一个选项，我们需要将`range`变量的值更改为`10`，对于第二个和第三个选项，分别更改为`100`和`1000`。事件监听器的代码将放入`builder.setItems()`语句中：
- en: 'case R.id.action_settings:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 'case R.id.action_settings:'
- en: final CharSequence[] items = {"1 to 10", "1 to 100", "1 to 1000"};
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: final CharSequence[] items = {"1 到 10", "1 到 100", "1 到 1000"};
- en: AlertDialog.Builder builder = new AlertDialog.Builder(this);
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: AlertDialog.Builder builder = new AlertDialog.Builder(this);
- en: builder.setTitle("Select the Range:");
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: builder.setTitle("选择范围：");
- en: builder.setItems(items, new DialogInterface.OnClickListener() {
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: builder.setItems(items, new DialogInterface.OnClickListener() {
- en: public void onClick(DialogInterface dialog, int item) {
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: public void onClick(DialogInterface dialog, int item) {
- en: switch(item) {
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: switch(item) {
- en: 'case 0:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 'case 0:'
- en: range = 10;
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: range = 10;
- en: newGame();
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: newGame();
- en: break;
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: break;
- en: 'case 1:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 'case 1:'
- en: range = 100;
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: range = 100;
- en: newGame();
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: newGame();
- en: break;
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: break;
- en: 'case 2:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 'case 2:'
- en: range = 1000;
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: range = 1000;
- en: newGame();
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: newGame();
- en: break;
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: break;
- en: '}'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: dialog.dismiss();
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: dialog.dismiss();
- en: '}'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '});'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: AlertDialog alert = builder.create();
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: AlertDialog alert = builder.create();
- en: alert.show();
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: alert.show();
- en: return true;
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: return true;
- en: Notice that after we set the new range for each item selection, we call `newGame()`
    to create a new random number in that range and to change the prompt on the user’s
    screen to reflect the new range.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在我们为每个选项设置新范围后，我们调用`newGame()`来生成该范围内的一个新的随机数，并将屏幕上的提示更改为反映新的范围。
- en: Save the file after making these changes and run the game to test the new options.
    Change the range from 1 to 10 and guess a few rounds, then go back to 1 to 100,
    and if you’re brave, go for 1 to 1,000.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并进行这些更改后，运行游戏以测试新的选项。从 1 到 10 改变范围并猜几轮，然后再回到 1 到 100，如果您敢的话，再试试 1 到 1000。
- en: Close the app and open it again, however, and you’ll notice that the game doesn’t
    remember your preferred range when it’s run a second time. The app also doesn’t
    remember how awesome you are at guessing the correct number. If only there were
    a way to have the app remember your preferred range and the number of games you’ve
    won. . . .
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭应用并重新打开，您会注意到游戏在第二次运行时没有记住您首选的范围。应用也没有记住您在猜数字方面的超凡能力。如果应用能记住您的首选范围和赢得的游戏次数就好了......
- en: Storing User Preferences and Game Stats
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 存储用户偏好和游戏统计数据
- en: The key to remembering user preferences and game statistics from one session
    to another is the ability to save *persistent information* to your Android device.
    Persistent information is any data that remains on the device after the app is
    closed. In the Hi-Lo guessing game, we want to store the user’s preferred difficulty
    level and the number of games they’ve won as persistent information.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 记住用户偏好和游戏统计数据的关键是能够将*持久信息*保存到您的 Android 设备上。持久信息是指应用关闭后仍然保留在设备上的任何数据。在 Hi-Lo
    猜数字游戏中，我们想要将用户的首选难度级别和他们赢得的游戏数量作为持久信息进行存储。
- en: 'There are three ways to save persistent data to your Android device: storing
    shared preferences, saving files, and saving data in a database. *Shared preferences*
    are a type of object that stores a relatively short list of settings that your
    app needs to save for the next time you use the app. They’re called *shared* preferences
    because you can share the settings across several activities or screens in your
    app, such as an options menu and the main game screen in the guessing game. Saving
    a file to the device is useful when you need to store a large amount of data,
    such as a text document, and databases are necessary for apps such as an address
    book or contacts list. But for the guessing game, we just need to store a few
    numbers, so we’ll use shared preferences.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种方法可以将持久数据保存到您的 Android 设备上：存储共享偏好、保存文件和将数据保存到数据库中。*共享偏好*是一种对象类型，用于存储您的应用程序需要在下次使用时保存的相对较短的设置列表。它们被称为*共享*偏好，因为您可以在应用中的多个活动或屏幕之间共享这些设置，例如猜数字游戏中的选项菜单和主游戏屏幕。将文件保存到设备上对于需要存储大量数据的情况很有用，例如文本文件，而数据库对于像通讯录或联系人列表这样的应用是必需的。但对于猜数字游戏，我们只需要存储几个数字，因此我们将使用共享偏好。
- en: '*Storing and Retrieving the User’s Preferred Range*'
  id: totrans-183
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*存储和检索用户首选的范围*'
- en: Shared preferences are stored as sets of *key/value pairs* where each value
    has an associated key that is used to retrieve it. For example, you could have
    a pair like `"range"` and `"100"`, where `"range"` is the *key* and `"100"` is
    the *value* we’re storing under that key. Let’s write a method to store the user’s
    preferred range to shared preferences.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 共享偏好以*键/值对*的形式存储，其中每个值都有一个关联的键，用于检索它。例如，您可以有一对像`"range"`和`"100"`，其中`"range"`是*键*，`"100"`是我们在该键下存储的*值*。让我们编写一个方法来将用户首选的范围存储到共享偏好中。
- en: 'Near the bottom of your *MainActivity.java* file, add the following method
    after the `onOptionsItemSelected()` method and just before the closing brace:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的*MainActivity.java*文件的底部，添加以下方法，它位于`onOptionsItemSelected()`方法之后，并紧接着关闭大括号之前：
- en: 'default:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 'default:'
- en: return super.onOptionsItemSelected(item);
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: return super.onOptionsItemSelected(item);
- en: '}'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public void storeRange(int newRange) {
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: public void storeRange(int newRange) {
- en: SharedPreferences preferences =
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: SharedPreferences preferences =
- en: PreferenceManager.getDefaultSharedPreferences(this);
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: PreferenceManager.getDefaultSharedPreferences(this);
- en: SharedPreferences.Editor editor = preferences.edit();
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: SharedPreferences.Editor editor = preferences.edit();
- en: editor.putInt("range", newRange);
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: editor.putInt("range", newRange);
- en: editor.apply();
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: editor.apply();
- en: '}'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: There is already a default shared preferences object for every app you make,
    which you can access by creating a `SharedPreferences` object to connect to it.
    To do this, access the default object by calling `getDefaultSharedPreferences()`
    on the `PreferenceManager` object that creates and maintains lists of shared preferences.
    Remember to import as you go, or press ALT-ENTER (or OPTION-ENTER).
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 每个应用程序都已经有一个默认的共享首选项对象，你可以通过创建一个`SharedPreferences`对象来连接它。为此，访问默认对象可以通过调用`PreferenceManager`对象上的`getDefaultSharedPreferences()`来实现，`PreferenceManager`对象创建并维护共享首选项的列表。记得在使用时导入相关包，或者按ALT-ENTER（或OPTION-ENTER）。
- en: To write to shared preferences, we must use an `Editor` object, which allows
    us to edit individual shared preference values. To store a specific key/value
    pair, we use a `put` method, such as `putString` to store a string value, `putInt`
    to store an integer, `putFloat` to store a floating-point decimal value, `putBoolean`
    to store a true/false value, and so on. Every time the user selects a new range,
    we’ll pass the `range` variable to the `storeRange()` method as `newRange`. In
    order to store `newRange` under the `"range"` key, we use editor .putInt("range",
    newRange); to store the user’s new range value (10, 100, or 1,000) under the shared
    preferences key name `"range"`. The `apply()` method tells Android you’re finished
    modifying the shared preferences values, and it can apply the changes.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 要写入共享首选项，我们必须使用`Editor`对象，它允许我们编辑单独的共享首选项值。为了存储特定的键/值对，我们使用`put`方法，例如`putString`用于存储字符串值，`putInt`用于存储整数，`putFloat`用于存储浮动的十进制值，`putBoolean`用于存储真/假值，等等。每次用户选择一个新的范围时，我们将把`range`变量作为`newRange`传递给`storeRange()`方法。为了在`"range"`键下存储`newRange`，我们使用editor.putInt("range",
    newRange);将用户的新范围值（10、100或1000）存储在共享首选项的键名`"range"`下。`apply()`方法告诉Android你已经完成修改共享首选项的值，并且可以应用这些更改。
- en: 'Now that we can store the range to shared preferences, we need to add the `storeRange()`
    function to each `case` the user can select in the event listener in the `onOptionsItemSelected()`
    method:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将范围存储到共享首选项中，需要在`onOptionsItemSelected()`方法的事件监听器中为用户可以选择的每个`case`添加`storeRange()`函数：
- en: public boolean onOptionsItemSelected(MenuItem item) {
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: public boolean onOptionsItemSelected(MenuItem item) {
- en: switch (item.getItemId()) {
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: switch (item.getItemId()) {
- en: 'case R.id.action_settings:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 'case R.id.action_settings:'
- en: final CharSequence[] items = {"1 to 10", "1 to 100", "1 to 1000"};
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: final CharSequence[] items = {"1到10", "1到100", "1到1000"};
- en: AlertDialog.Builder builder = new AlertDialog.Builder(this);
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: AlertDialog.Builder builder = new AlertDialog.Builder(this);
- en: builder.setTitle("Select the Range:");
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: builder.setTitle("选择范围：");
- en: builder.setItems(items, new DialogInterface.OnClickListener() {
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: builder.setItems(items, new DialogInterface.OnClickListener() {
- en: public void onClick(DialogInterface dialog, int item) {
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: public void onClick(DialogInterface dialog, int item) {
- en: switch(item) {
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: switch(item) {
- en: 'case 0:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 'case 0:'
- en: range = 10;
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: range = 10;
- en: storeRange(10);
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: storeRange(10);
- en: newGame();
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: newGame();
- en: break;
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: break;
- en: 'case 1:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 'case 1:'
- en: range = 100;
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: range = 100;
- en: storeRange(100);
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: storeRange(100);
- en: newGame();
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: newGame();
- en: break;
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: break;
- en: 'case 2:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 'case 2:'
- en: range = 1000;
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: range = 1000;
- en: storeRange(1000);
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: storeRange(1000);
- en: newGame();
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: newGame();
- en: break;
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: break;
- en: '}'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: dialog.dismiss();
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: dialog.dismiss();
- en: '}'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '});'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: AlertDialog alert = builder.create();
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: AlertDialog alert = builder.create();
- en: alert.show();
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: alert.show();
- en: return true;
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: return true;
- en: 'Finally, we need to retrieve the range when the game loads so that the user’s
    last selected range will be the range the game uses the next time it runs. Scroll
    up to the `onCreate()` method and add the following two lines to retrieve the
    range from shared preferences:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要在游戏加载时检索范围，以便用户上次选择的范围将成为下次运行游戏时使用的范围。向上滚动到`onCreate()`方法，并添加以下两行代码来从共享首选项中检索范围：
- en: protected void onCreate(Bundle savedInstanceState) {
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: protected void onCreate(Bundle savedInstanceState) {
- en: super.onCreate(savedInstanceState);
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: super.onCreate(savedInstanceState);
- en: setContentView(R.layout.activity_main);
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: setContentView(R.layout.activity_main);
- en: txtGuess = (EditText) findViewById(R.id.txtGuess);
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: txtGuess = (EditText) findViewById(R.id.txtGuess);
- en: btnGuess = (Button) findViewById(R.id.btnGuess);
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: btnGuess = (Button) findViewById(R.id.btnGuess);
- en: lblOutput = (TextView) findViewById(R.id.lblOutput);
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: lblOutput = (TextView) findViewById(R.id.lblOutput);
- en: lblRange = (TextView) findViewById(R.id.textView2);
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: lblRange = (TextView) findViewById(R.id.textView2);
- en: SharedPreferences preferences =
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: SharedPreferences preferences =
- en: PreferenceManager.getDefaultSharedPreferences(this);
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: PreferenceManager.getDefaultSharedPreferences(this);
- en: range = preferences.getInt("range", 100);
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: range = preferences.getInt("range", 100);
- en: newGame();
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: newGame();
- en: Notice that we’ve retrieved the shared preferences *before* we call the `newGame()`
    method to ensure that the user gets the range they last used whenever the app
    starts over. The `getInt()` method looks for the value stored in the key `"range"`,
    but if it doesn’t find a value, the second parameter tells it to default to `100`.
    We do this so that `range` has a value the first time the user runs the app.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: Save the file, build, and run it. This time, choose a different range and then
    close the app entirely. The same range will be waiting for you the next time you
    start the app!
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '*Storing the Number of Games Won*'
  id: totrans-246
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: High scores, leaderboards, winning streaks—anything that records our accomplishments
    tends to make us want to try harder, play longer, and beat the record. One finishing
    touch we’ll add to the game is the ability to track the number of games won. Once
    again, we can easily store these stats as shared preferences.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: 'When the user wins a round of the game by guessing the correct number, we can
    use a shared preference to retrieve the number of games they’ve won, add 1 to
    it, and store the new value. Add this code to your `checkGuess()` method, putting
    it inside the `else` statement for a winning guess:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: public void checkGuess() {
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: String guessText = txtGuess.getText().toString();
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: String message = "";
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: try {
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: int guess = Integer.parseInt(guessText);
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: if (guess < theNumber)
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: message = guess + " is too low. Try again.";
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: else if (guess > theNumber)
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: message = guess + " is too high. Try again.";
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: else {
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: message = guess +
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '" is correct. You win! Let''s play again!";'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: ➊ SharedPreferences preferences =
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: PreferenceManager.getDefaultSharedPreferences(this);
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: ➋ int gamesWon = preferences.getInt("gamesWon", 0) + 1;
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: ➌ SharedPreferences.Editor editor = preferences.edit();
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: ➍ editor.putInt("gamesWon", gamesWon);
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: ➎ editor.apply();
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: newGame();
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: Here, we’ve accessed the default `SharedPreferences` at ➊, and at ➋, we’ve retrieved
    the value stored under the key name `"gamesWon"` (with a default of `0` if this
    is the first time the user has won) and added `1` to account for this win. At
    ➌, we create an editor to write a new value to shared preferences. At ➍, we put
    the integer value `gamesWon` into shared preferences under the corresponding key
    name for later use, and at ➎, we tell Android to write the changes to the device.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: 'That takes care of storing the number of games won, but how about displaying
    those stats to the user? To do that, we’ll need to add code for the `action_gamestats
    case` in the `onOptionsItemSelected()` method, as follows:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: 'case R.id.action_gamestats:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: ➊ SharedPreferences preferences =
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: PreferenceManager.getDefaultSharedPreferences(this);
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: ➋ int gamesWon = preferences.getInt("gamesWon", 0);
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: ➌ AlertDialog statDialog = new AlertDialog.Builder(MainActivity.this).create();
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: statDialog.setTitle("Guessing Game Stats");
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: ➍ statDialog.setMessage("You have won "+gamesWon+" games. Way to go!");
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: statDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "OK",
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: new DialogInterface.OnClickListener() {
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: public void onClick(DialogInterface dialog, int which) {
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: dialog.dismiss();
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: statDialog.show();
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: return true;
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: At ➊, we connect to the app’s default shared preferences, and at ➋, we retrieve
    the number of games won (which we give a default value of `0` in case this is
    the first run of the program). At ➌, we build an alert dialog to show the user
    the number of games they’ve won, and at ➍, we display the number along with an
    encouraging message.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: Save that final change and then build and run your app. Your last challenge
    may be trying to stop playing! [Figure 5-3](ch5.xhtml#ch5fig3) shows how the Game
    Stats screen may look if you have a couple of math whizzes playing your game.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/f0121-01.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-3: The Game Stats screen keeps track of the number of times you (or
    your friends) have guessed the correct number.*'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: Adding options menus, saving game stats and user preferences, displaying alert
    dialogs—these are the kinds of finishing touches that can make your game or any
    other app really stand on its own as a professional-looking, fully functional
    mobile application. Keep making improvements to your app as you think of new features,
    and you’ll have an app worth sharing with friends—or with the world. Happy coding!
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: What You Learned
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You’ve built a professional-quality Android mobile game by adding several finishing
    touches to the Hi-Lo guessing game app, including:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: • Adding an options menu to an Android app
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: • Designing the options menu by editing the menu’s XML file
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: • Displaying the options menu using a `MenuInflater`
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: • Responding to user selections in a menu
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: • Using a `switch` statement with multiple `case` statements to replace long
    `if-else` chains
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: • Creating customized pop-ups in Android with the `AlertDialog` class
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: • Storing shared preferences and app statistics using the `SharedPreferences`
    class
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: • Retrieving the user’s shared preferences when an app starts
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: Programming Challenges
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Try these programming challenge exercises to review and practice what you’ve
    learned and to expand your programming skills. Visit the book’s website at *[https://www.nostarch.com/learnjava/](https://www.nostarch.com/learnjava/)*
    to download sample solutions.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: '*#1: You Win Some, You Lose Some*'
  id: totrans-303
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Programming Challenge #1 in [Chapter 4](ch4.xhtml#ch4) ([page 106](ch4.xhtml#page_106))
    asked you to give the user seven tries to guess a number between 1 and 100\. Now
    that you’ve added the ability to change the range, you need to change the number
    of tries to match.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: You learned in [Chapter 4](ch4.xhtml#ch4) that we could guess a number between
    1 and 100 using a binary search strategy (guessing in the middle of the remaining
    possible values each time) because 2⁷, or two to the seventh power, is equal to
    128\. This means that we should be able to guess a number between 1 and 128 in
    seven guesses every time using the binary search method. But how many guesses
    do we need to get a number between 1 and 10, or 1 and 1,000?
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: To figure out the number of tries needed, we need to know the lowest exponent
    we can raise 2 to that will give us a number greater than the range. For example,
    for a number between 1 and 10, 2⁴ = 16, and 16 > 10, so we need up to four guesses
    for that range; for a range from 1 to 1,000, 2^(10) = 1,024, so we need 10 guesses.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: To find the exponent to which you need to raise a number to be equal to another
    number, you can use *logarithms*. A logarithm takes a number and a base to find
    the exponent the base should be raised to in order to result in the given number.
    Java has a `Math.log()` method that will take a number and find the exponent for
    base 10\. When you divide the logarithm of one number by the logarithm of another
    number in base 10, the result is the same as taking the logarithm of the first
    number with the second number as a base. This means that dividing `Math.log(range)`
    by `Math.log(2)` will tell you what power of 2 will give you `range`. Because
    exponents can be decimals and you don’t want the user to have a noninteger number
    of guesses, like `7.25`, you’ll need to also round up and cast the result into
    an `int`. To find the exponent for the number of guesses needed for each range,
    you can use the expression `(int)(Math.log(range)/Math.log(2)+1)`.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: Modify the Hi-Lo guessing game to adapt the maximum number of guesses to suit
    the range the user selects, both when the game starts and whenever the user selects
    a new range in the options menu. For example, you could create a variable called
    `maxTries` to use in place of the hardcoded number `7` when testing whether your
    user has run out of tries.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '*#2: Ratio of Wins to Losses*'
  id: totrans-309
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'After completing Programming Challenge #1, modify the Hi-Lo guessing game app
    to store both the number of games won *and* lost. Modify the game stats menu code
    to retrieve both numbers and show the number of games won, the total number of
    games played, and the winning percentage (games won divided by total games played,
    multiplied by 100). [Figure 5-4](ch5.xhtml#ch5fig4) shows an example.'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/f0123-01.jpg)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-4: The Game Stats screen showing the percentage of games won*'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
