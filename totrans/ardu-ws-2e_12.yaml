- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Meet the Arduino Family
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter you will
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to build your own Arduino circuit on a solderless breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explore the features and benefits of a wide range of Arduino-compatible boards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about open source hardware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll break down the Arduino design into a group of parts, and then you’ll build
    your own Arduino circuit on a solderless breadboard. Building your own circuit
    can save you money, especially when you’re working with changing projects and
    prototypes. You’ll also learn about some new components and circuitry. Then we’ll
    explore ways to upload sketches to your homemade Arduino that don’t require extra
    hardware. Finally, we’ll examine the more common alternatives to the Arduino Uno
    and explore their differences.
  prefs: []
  type: TYPE_NORMAL
- en: 'Project #36: Creating Your Own Breadboard Arduino'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As your projects and experiments increase in complexity or number, the cost
    of purchasing Arduino boards for each task can easily get out of hand, especially
    if you like to work on more than one project at a time. At this point, it’s cheaper
    and easier to integrate the circuitry of an Arduino board into your project by
    building an Arduino circuit on a solderless breadboard that you can then expand
    for your specific project. It should cost less than $10 in parts to reproduce
    the basic Arduino circuitry on a breadboard (which itself is usually reusable
    if you’re not too hard on it). It’s easier to make your own if your project has
    a lot of external circuitry, because it saves you running lots of wires from an
    Arduino back to the breadboard.
  prefs: []
  type: TYPE_NORMAL
- en: The Hardware
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To build a minimalist Arduino, you’ll need the following hardware:'
  prefs: []
  type: TYPE_NORMAL
- en: One breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various connecting wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 7805 linear voltage regulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 16 MHz crystal oscillator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One ATmega328P-PU microcontroller with Arduino bootloader
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 1 µF, 25 V electrolytic capacitor (C1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 100 µF, 25 V electrolytic capacitor (C2)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two 22 pF, 50 V ceramic capacitors (C3 and C4)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 100 nF, 50 V ceramic capacitor (C5)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two 560 Ω resistors (R1 and R2)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 10 kΩ resistor (R3)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two LEDs of your choice (LED1 and LED2)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One push button (S1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One six-way header pin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One PP3-type battery snap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One 9 V PP3-type battery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of these parts might be new to you. In the following sections, I’ll explain
    each part and show you an example and a schematic of each.
  prefs: []
  type: TYPE_NORMAL
- en: 7805 Linear Voltage Regulator
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A *linear voltage regulator* contains a simple circuit that converts one voltage
    to another. The regulator included in the parts list is the 7805 type, which can
    convert a voltage between 7 and 30 V to a fixed 5 V, with a current up to 1 A—perfect
    for running our breadboard Arduino. [Figure 13-1](#figure13-1) shows an example
    of a 7805 in a TO-220 package next to a ruler for scale.
  prefs: []
  type: TYPE_NORMAL
- en: '![f13001](image_fi/500587c13/f13001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-1: A 7805 linear voltage regulator with a ruler marked in millimeters'
  prefs: []
  type: TYPE_NORMAL
- en: '![f13002](image_fi/500587c13/f13002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-2: 7805 schematic symbol'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 13-2](#figure13-2) shows the schematic symbol for the 7805\. When you’re
    looking at the labeled side of the 7805, the pin on the left (underneath the letter
    J) is for input voltage, the center pin connects to GND, and the right-hand pin
    (underneath the letter G) is the 5 V output connection. The metal tab at the top
    is drilled to allow it to connect to a larger piece of metal known as a *heat
    sink*.We use a heat sink when the circuit draws up to the maximum of 1 A of current,
    because the 7805 will become quite warm, like a hot coffee, at that level of use.
    The metal tab is also connected to GND. We will need one 7805 regulator for our
    example.'
  prefs: []
  type: TYPE_NORMAL
- en: 16 MHz Crystal Oscillator
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: More commonly known as simply a *crystal*, the crystal oscillator creates an
    electrical signal with a very accurate frequency. In this case, the frequency
    is 16 MHz. The crystal we’ll use is shown in [Figure 13-3](#figure13-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![f13003](image_fi/500587c13/f13003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-3: A crystal oscillator with a ruler marked in millimeters'
  prefs: []
  type: TYPE_NORMAL
- en: Compare this image to the crystal on your Arduino board. They should be identical
    in shape and size.
  prefs: []
  type: TYPE_NORMAL
- en: '![f13004](image_fi/500587c13/f13004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-4: Crystal oscillator schematic symbol'
  prefs: []
  type: TYPE_NORMAL
- en: Crystals are not polarized. Their schematic symbol is shown in [Figure 13-4](#figure13-4).
  prefs: []
  type: TYPE_NORMAL
- en: The crystal determines the microcontroller’s speed of operation. For example,
    the microcontroller circuit we’ll be assembling runs at 16 MHz, which means it
    can execute 16 million processor instructions per second. That doesn’t mean it
    can execute a line of a sketch or a function that rapidly, however, since it takes
    many processor instructions to interpret a single line of code.
  prefs: []
  type: TYPE_NORMAL
- en: Atmel ATmega328P-PU Microcontroller IC
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As noted in Chapter 2, a microcontroller is a tiny computer that is the brains
    of our breadboard Arduino. It contains a processor that executes instructions,
    various types of memory to hold data and instructions from our sketch, and various
    ways to send and receive data. An example of the ATmega328P-PU is shown in [Figure
    13-5](#figure13-5). When looking at the IC in the photo, notice that pin number
    1 is at the bottom left of the IC and is marked by a small dot.
  prefs: []
  type: TYPE_NORMAL
- en: '![f13005](image_fi/500587c13/f13005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-5: An ATmega328P-PU'
  prefs: []
  type: TYPE_NORMAL
- en: The schematic symbol for the microcontroller is shown in [Figure 13-6](#figure13-6).
  prefs: []
  type: TYPE_NORMAL
- en: '![f13006](image_fi/500587c13/f13006.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-6: Microcontroller schematic symbol'
  prefs: []
  type: TYPE_NORMAL
- en: Not all microcontrollers contain the Arduino *bootloader*, the software that
    allows it to wait for the Arduino IDE to send it a new sketch to run. When choosing
    a microcontroller to include in a homemade Arduino, be sure to select one that
    already includes the bootloader. These are generally available from the same retailers
    that sell Arduino boards, such as Adafruit, PMD Way, and SparkFun.
  prefs: []
  type: TYPE_NORMAL
- en: The Schematic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Figure 13-7](#figure13-7) shows the circuit schematic.'
  prefs: []
  type: TYPE_NORMAL
- en: '![f13007](image_fi/500587c13/f13007.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-7: Schematic for Project 36'
  prefs: []
  type: TYPE_NORMAL
- en: The schematic contains two sections. The first, on the left, is the power supply,
    which reduces the voltage to a smooth 5 V. You’ll see an LED that is lit when
    the power is on. The second section, on the right, consists of the microcontroller,
    the reset button, the programming pins, and another LED. This LED is wired to
    the ATmega328P-PU pin that is used as Arduino pin 13.
  prefs: []
  type: TYPE_NORMAL
- en: Use the schematic to wire up your Arduino. Don’t forget to run the wires to
    the six-way pin header (shown in [Figure 13-8](#figure13-8)), represented by the
    six circles at the bottom of the schematic. We’ll use this connection later in
    the chapter to upload a sketch to our homemade Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: The circuit will be powered using a 9 V battery and matching snap connector,
    as shown in [Figure 13-9](#figure13-9). Connect the red lead of the battery snap
    connector to the positive (+) point and the black lead to the negative (–) point
    on the left side of the circuit.
  prefs: []
  type: TYPE_NORMAL
- en: '![f13008](image_fi/500587c13/f13008.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-8: The six-way pin header'
  prefs: []
  type: TYPE_NORMAL
- en: '![f13009](image_fi/500587c13/f13009.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-9: A 9 V battery and snap connector'
  prefs: []
  type: TYPE_NORMAL
- en: Identifying the Arduino Pins
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Where are all the Arduino pins on our homemade Arduino? All the analog, digital,
    and other pins available on the normal Arduino board are also available in our
    breadboard version; you simply connect directly to the microcontroller.
  prefs: []
  type: TYPE_NORMAL
- en: In our breadboard Arduino, the R2 and LED2 are on digital pin 13\. [Table 13-1](#table13-1)
    lists the Arduino pins on the left and the matching ATmega328P-PU pins on the
    right.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 13-1: Pins for ATmega328P-PU'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Arduino pin name** | **ATmega328P-PU pin** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| RST | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| RX/D0 | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| TX/D1 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| D2 | 4 |'
  prefs: []
  type: TYPE_TB
- en: '| D3 | 5 |'
  prefs: []
  type: TYPE_TB
- en: '| D4 | 6 |'
  prefs: []
  type: TYPE_TB
- en: '| (5 V only) | 7 |'
  prefs: []
  type: TYPE_TB
- en: '| GND | 8 |'
  prefs: []
  type: TYPE_TB
- en: '| D5 | 11 |'
  prefs: []
  type: TYPE_TB
- en: '| D6 | 12 |'
  prefs: []
  type: TYPE_TB
- en: '| D7 | 13 |'
  prefs: []
  type: TYPE_TB
- en: '| D8 | 14 |'
  prefs: []
  type: TYPE_TB
- en: '| D9 | 15 |'
  prefs: []
  type: TYPE_TB
- en: '| D10 | 16 |'
  prefs: []
  type: TYPE_TB
- en: '| D11 | 17 |'
  prefs: []
  type: TYPE_TB
- en: '| D12 | 18 |'
  prefs: []
  type: TYPE_TB
- en: '| D13 | 19 |'
  prefs: []
  type: TYPE_TB
- en: '| (5 V only) | 20 |'
  prefs: []
  type: TYPE_TB
- en: '| AREF | 21 |'
  prefs: []
  type: TYPE_TB
- en: '| GND | 22 |'
  prefs: []
  type: TYPE_TB
- en: '| A0 | 23 |'
  prefs: []
  type: TYPE_TB
- en: '| A1 | 24 |'
  prefs: []
  type: TYPE_TB
- en: '| A2 | 25 |'
  prefs: []
  type: TYPE_TB
- en: '| A3 | 26 |'
  prefs: []
  type: TYPE_TB
- en: '| A4 | 27 |'
  prefs: []
  type: TYPE_TB
- en: '| A5 | 28 |'
  prefs: []
  type: TYPE_TB
- en: To avoid confusion, retailers such as Adafruit and Freetronics sell adhesive
    labels to place over the microcontroller, like those shown in [Figure 13-10](#figure13-10)
    (order at [https://www.freetronics.com.au/collections/arduino/products/microcontroller-labels-arduino-pinout/](https://www.freetronics.com.au/collections/arduino/products/microcontroller-labels-arduino-pinout/)).
  prefs: []
  type: TYPE_NORMAL
- en: '![f13010](image_fi/500587c13/f13010.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-10: Pin labels'
  prefs: []
  type: TYPE_NORMAL
- en: Running the Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now it’s time to upload a sketch. We’ll start by uploading a simple sketch
    to blink the LED:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can upload the sketch in one of three ways.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Microcontroller Swap Method
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The most inexpensive way to upload a sketch is to remove the microcontroller
    from an existing Arduino, insert the microcontroller from your homemade Arduino,
    upload the sketch, and then swap the microcontrollers again.
  prefs: []
  type: TYPE_NORMAL
- en: To remove a microcontroller from the Arduino safely, use an IC extractor, as
    shown in [Figure 13-11](#figure13-11).
  prefs: []
  type: TYPE_NORMAL
- en: '![f13011](image_fi/500587c13/f13011.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-11: Using an IC extractor to remove a microcontroller'
  prefs: []
  type: TYPE_NORMAL
- en: '![f13012](image_fi/500587c13/f13012.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-12: Bending the microcontroller pins'
  prefs: []
  type: TYPE_NORMAL
- en: When removing the microcontroller, be sure to pull both ends out evenly and
    slowly *at the same time*—and take your time! Removing the component might be
    difficult, but eventually the microcontroller will come out.
  prefs: []
  type: TYPE_NORMAL
- en: '![f13013](image_fi/500587c13/f13013.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-13: Correct orientation of the microcontroller in an Arduino'
  prefs: []
  type: TYPE_NORMAL
- en: When inserting a microcontroller into the breadboard or your Arduino, you may
    have to bend the pins a little to make them perpendicular to the body of the microcontroller
    so that they can slide in easily. To do this, place one side of the component
    against a flat surface and gently push down; then repeat on the other side, as
    shown in [Figure 13-12](#figure13-12).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, when you return the original microcontroller to your Arduino board,
    remember that the end with the notch should be on the right side, as shown in
    [Figure 13-13](#figure13-13).
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to an Existing Arduino Board
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can also use the USB interface of an Arduino Uno to upload sketches to the
    microcontroller in your breadboard Arduino. Using this method reduces wear on
    the Arduino board’s socket and saves you money, because you won’t need to buy
    a separate USB programming cable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how to upload a sketch to the microcontroller using the USB interface:'
  prefs: []
  type: TYPE_NORMAL
- en: Remove the microcontroller from your Arduino Uno and unplug the USB cable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the power (if connected) from the breadboard Arduino circuit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect a wire from Arduino digital pin 0 to pin 2 of the breadboard’s ATmega328P-PU;
    connect another wire from Arduino digital pin 1 to pin 3 of the ATmega328P-PU.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the 5 V and GND from the Uno to the matching areas on the breadboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect a wire from Arduino RST to pin 1 of the ATmega328P-PU.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plug the USB cable into the Arduino Uno board.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, the computer should behave as if it were an ordinary Arduino
    Uno, so you should be able to upload sketches to the breadboard circuit’s microcontroller
    normally and use the Serial Monitor if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Using an FTDI Programming Cable
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The final method is the easiest, but it requires the purchase of a USB programming
    cable, known as an *FTDI cable* (simply because the USB interface circuitry inside
    is made by a company called FTDI). When purchasing an FTDI cable, make sure it’s
    the 5 V model, because the 3.3 V model will not work properly. This cable (shown
    in [Figure 13-14](#figure13-14)) has a USB plug on one end and a socket with six
    wires on the other. The USB end of this cable contains circuitry equivalent to
    the USB interface on an Arduino Uno board. The six-wire socket connects to the
    header pins shown in Figures 13-7 and 13-8.
  prefs: []
  type: TYPE_NORMAL
- en: '![f13014](image_fi/500587c13/f13014.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-14: An FTDI cable'
  prefs: []
  type: TYPE_NORMAL
- en: When you’re connecting the cable, be sure that the side of the socket with the
    black wire connects to the GND pin on the breadboard’s header pins. Once the cable
    is connected, it also supplies power to the circuit, just as a normal Arduino
    board would do.
  prefs: []
  type: TYPE_NORMAL
- en: Before uploading your sketch or using the serial monitor, change the board type
    to Arduino Duemilanove or Diecimila by choosing **Tools**▶**Board** and then selecting
    the correct microcontroller ([Figure 13-15](#figure13-15)).
  prefs: []
  type: TYPE_NORMAL
- en: '![f13015](image_fi/500587c13/f13015.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-15: Changing the board type in the IDE'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have selected a method of uploading, test it by uploading the Project
    36 sketch. Now you should be able to design more complex circuits using only a
    breadboard, which will let you create more projects for less money. You can even
    build more permanent projects from scratch if you learn to make your own printed
    circuit boards.
  prefs: []
  type: TYPE_NORMAL
- en: The Many Arduino and Alternative Boards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we have been working exclusively with the Arduino Uno board throughout
    the book, you can choose from many alternative boards. These will vary in physical
    size, the number of input and output pins, memory space for sketches, and price.
  prefs: []
  type: TYPE_NORMAL
- en: One of the crucial differences between boards is the microcontroller used. Current
    boards generally use the ATmega328 or the ATmega2560 microcontroller, and the
    Due uses another, more powerful version called the SAM3X8E. The main differences
    among these (including both versions of the ATmega328) are summarized in [Table
    13-2](#table13-2).
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 13-2: Microcontroller Comparison Chart'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **ATmega328P-PU** | **ATmega328P SMD** | **ATmega2560** | **SAM3X8E**
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|  | ![i13001](image_fi/500587c13/i13001.png) | ![i13002](image_fi/500587c13/i13002.png)
    | ![i13003](image_fi/500587c13/i13003.png) | ![i13004](image_fi/500587c13/i13004.png)
    |'
  prefs: []
  type: TYPE_TB
- en: '| User-replaceable? | Yes | No | No | No |'
  prefs: []
  type: TYPE_TB
- en: '| Processing speed | 16 MHz | 16 MHz | 16 MHz | 84 MHz |'
  prefs: []
  type: TYPE_TB
- en: '| Operating voltage | 5 V | 5 V | 5 V | 3.3 V |'
  prefs: []
  type: TYPE_TB
- en: '| Number of digital pins | 14 (6 PWM capable) | 14 (6 PWM capable) | 54 (14
    PWM capable) | 54 (12 PWM capable) |'
  prefs: []
  type: TYPE_TB
- en: '| Number of analog input pins | 6 | 8 | 16 | 12 |'
  prefs: []
  type: TYPE_TB
- en: '| DC current per I/O pin | 40 mA | 40 mA | 40 mA | 3–15 mA |'
  prefs: []
  type: TYPE_TB
- en: '| Available flash memory | 31.5KB | 31.5KB | 248KB | 512KB |'
  prefs: []
  type: TYPE_TB
- en: '| EEPROM size | 1KB | 1KB | 4KB | No EEPROM |'
  prefs: []
  type: TYPE_TB
- en: '| SRAM size | 2KB | 2KB | 8KB | 96KB |'
  prefs: []
  type: TYPE_TB
- en: 'The main parameters used to compare various Arduino-compatible boards are the
    types of memory they contain and the amount of each type. Following are the three
    types of memory:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Flash memory* is the space available to store a sketch after it has been compiled
    and uploaded by the IDE.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*EEPROM (electrically erasable programmable read-only memory)* is a small space
    that can store byte variables, as you’ll learn in Chapter 19.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*SRAM* is the space available to store variables from your programs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s explore the range of available boards.
  prefs: []
  type: TYPE_NORMAL
- en: Arduino Uno
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Uno is currently considered the standard Arduino board. All Arduino shields
    ever made should be compatible with the Uno. The Uno is considered the easiest-to-use
    Arduino board due to its built-in USB interface and removable microcontroller.
  prefs: []
  type: TYPE_NORMAL
- en: Freetronics Eleven
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many boards on the market emulate the function of the Arduino Uno, and some
    have even improved on the standard design. One of these is the Freetronics Eleven,
    shown in [Figure 13-16](#figure13-16).
  prefs: []
  type: TYPE_NORMAL
- en: '![f13016](image_fi/500587c13/f13016.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-16: A Freetronics Eleven'
  prefs: []
  type: TYPE_NORMAL
- en: Although the Eleven is completely compatible with the Arduino Uno, it offers
    several improvements that make it a worthwhile product. The first is the large
    prototyping area just below the digital I/O pins. This area allows you to construct
    your own circuit directly on the main board, which can save you space and money
    since you won’t need to purchase a separate prototyping shield.
  prefs: []
  type: TYPE_NORMAL
- en: Second, the transmitter/receiver (TX/RX), power, and D13 LEDs are positioned
    on the far right of the board; this placement allows them to be visible even when
    a shield is attached. Finally, the Eleven uses a micro-USB socket, which is much
    smaller than the standard USB socket used on the Uno. This makes designing your
    own shield simpler, since you don’t have to worry about your connections bumping
    into the USB socket. The Eleven is available from [http://www.freetronics.com.au/products/eleven/](http://www.freetronics.com.au/products/eleven/).
  prefs: []
  type: TYPE_NORMAL
- en: The Adafruit Pro Trinket
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Adafruit Pro Trinket ([Figure 13-17](#figure13-17)) is a miniaturized version
    of the Arduino Uno designed for working with solderless breadboards, wearable
    electronics, or any situation in which you need a much smaller board.
  prefs: []
  type: TYPE_NORMAL
- en: '![f13017](image_fi/500587c13/f13017.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-17: An Adafruit Pro Trinket'
  prefs: []
  type: TYPE_NORMAL
- en: There are some slight differences from the Arduino Uno (for example, no serial
    output unless you use an external FTDI cable); however, for the price this board
    is a great value. The Pro Trinket is available from [http://www.adafruit.com/trinket/](http://www.adafruit.com/trinket/).
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino Nano
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you need a compact, assembled Arduino-compatible board, the Nano should
    fit the bill. Also designed to work in a solderless breadboard, the Nano ([Figure
    13-18](#figure13-18)) is a tiny but powerful Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: '![f13018](image_fi/500587c13/f13018.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-18: An Arduino Nano'
  prefs: []
  type: TYPE_NORMAL
- en: The Nano measures only 0.7 inches by 1.77 inches (17.8 mm by 44.9 mm), yet it
    offers all the functionality of the classic Arduino Duemilanove. Furthermore,
    it uses the SMD version of the ATmega328P, so it has two extra analog input pins
    (A6 and A7). The Nano is available from [https://store.arduino.cc/usa/arduino-nano/](https://store.arduino.cc/usa/arduino-nano/).
  prefs: []
  type: TYPE_NORMAL
- en: The LilyPad
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The LilyPad is designed to be integrated into creative projects, such as wearable
    electronics. In fact, you can actually wash a LilyPad with water and a mild detergent,
    so it’s ideal to use for lighting up a sweatshirt, for example. The board design
    is unique, as shown in [Figure 13-19](#figure13-19).
  prefs: []
  type: TYPE_NORMAL
- en: '![f13019](image_fi/500587c13/f13019.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-19: An Arduino LilyPad'
  prefs: []
  type: TYPE_NORMAL
- en: The I/O pins on the LilyPad require that wires be soldered to the board, so
    the LilyPad is more suited for use with permanent projects. As part of its minimalist
    design, it has no voltage regulation circuitry, so it’s up to the user to provide
    their own supply between 2.7 and 5.5 V. The LilyPad also lacks a USB interface,
    so a 5 V FTDI cable is required to upload sketches. You can get Arduino LilyPad
    or compatible boards from almost any Arduino retailer.
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino Mega 2560
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you run out of I/O pins on your Arduino Uno or you need space for much
    larger sketches, consider a Mega 2560, shown in [Figure 13-20](#figure13-20).
    It is physically a much larger board than the Uno, measuring 4.3 inches by 2.1
    inches (109.2 mm by 53.4 mm).
  prefs: []
  type: TYPE_NORMAL
- en: '![f13020](image_fi/500587c13/f13020.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-20: An Arduino Mega 2560'
  prefs: []
  type: TYPE_NORMAL
- en: Although the Mega 2560 board is much larger than the Uno, you can still use
    most Arduino shields with it, and Mega-sized prototyping shields are available
    for larger projects that the Uno can’t accommodate. Since the Mega uses the ATmega2560
    microcontroller, its memory space and I/O capabilities (as described in [Table
    13-2](#table13-2)) are much greater than those of the Uno. Additionally, four
    separate serial communication lines increase its data transmission capabilities.
    You can get Mega 2560 boards from almost any Arduino retailer.
  prefs: []
  type: TYPE_NORMAL
- en: The Freetronics EtherMega
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you need an Arduino Mega 2560, a microSD card shield, and an Ethernet shield
    to connect to the internet, your best option is an EtherMega ([Figure 13-21](#figure13-21)),
    because it has all these functions on a single board and is less expensive than
    purchasing each component separately. The EtherMega is available from [http://www.freetronics.com/em/](http://www.freetronics.com/em/).
  prefs: []
  type: TYPE_NORMAL
- en: '![f13021](image_fi/500587c13/f13021.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-21: A Freetronics EtherMega'
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino Due
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With an 84 MHz processor that can run your sketches much faster, this is the
    most powerful Arduino board ever released. As you can see in [Figure 13-22](#figure13-22),
    the board is quite like the Arduino Mega 2560, but there is an extra USB port
    for external devices and different pin labels.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the Due has just over 16 times the memory of an Uno board, so you
    can create really complex and detailed sketches. However, the Due operates only
    on 3.3 V—so any circuits, shields, or other devices connected to the analog or
    digital pins cannot have a voltage greater than 3.3 V. While you need to be aware
    of these limitations, generally the benefits of using the Due outweigh the changes
    in the hardware.
  prefs: []
  type: TYPE_NORMAL
- en: '![f13022](image_fi/500587c13/f13022.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-22: An Arduino Due'
  prefs: []
  type: TYPE_NORMAL
- en: Looking Ahead
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter has given you a broader picture of the types of hardware available
    and introduces the idea of a breadboard Arduino that you build yourself. You’ve
    seen the parts that make up the Arduino design, and you’ve seen how to build your
    own Arduino using a solderless breadboard. You now know how to make more than
    one Arduino-based prototype without having to purchase more boards. You also know
    about the variety of Arduino boards on the market, and you should be able to select
    the board that best meets your needs. Finally, you’ve gained an understanding
    of the open source movement and Arduino’s participation in it.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll learn to use a variety of motors and begin working
    on your own Arduino-controlled motorized robot!
  prefs: []
  type: TYPE_NORMAL
