- en: '17'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Filters
  prefs: []
  type: TYPE_NORMAL
- en: 'Inkscape filters are a way to apply complex bitmap processing algorithms to
    the objects in your drawing. True to the vector spirit, filters are nondestructive:
    you can always change the parameters of any filter, and the original vector object
    remains fully editable. Examples of what filters can do include blurring, sharpening,
    color adjustments, adding texture, various distortions, 3D-like effects such as
    bevels, and many others. Moreover, you can combine filters into arbitrarily complex
    *filter stacks*.'
  prefs: []
  type: TYPE_NORMAL
- en: SVG filters (as defined by the SVG standard and implemented by Inkscape) are
    extremely powerful; a whole book could be written on their uses and capabilities.
    Unfortunately, they can also be quite technical, especially if you're trying to
    compose your own filter stacks. In this chapter, I start by looking at some simple
    ways to use filters, such as blurring ([17.1](#section17.1)) and blend modes ([17.2](#section17.2)).
    Then I describe in more general terms how to manage filters on objects ([17.3](#section17.3))
    and give an overview of the library of preset filters that come with Inkscape
    ([17.4](#section17.4)). Finally, for those who want more power and are not afraid
    to get more technical, I describe the Filter Editor dialog ([17.5](#section17.5)),
    where you can create your own filter stacks from standard filter primitives.
  prefs: []
  type: TYPE_NORMAL
- en: 17.1 Blur
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Properly called *Gaussian blur* (named after Carl Friedrich Gauss, a German
    mathematician), this effect smoothly dissolves an object, as if you were viewing
    it through an out-of-focus lens. It is just one of the 14 filter primitives that
    Inkscape supports, but of all these primitives, Blur is the most easily accessible.
    For any selected object, you can apply blurring with a slider at the bottom of
    the Fill and Stroke dialog, as shown in [Figure 17-1](#fig17-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-blurslider.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-1: The Blur slider in the Fill and Stroke dialog'
  prefs: []
  type: TYPE_NORMAL
- en: The same paired opacity and blur sliders are available in the Layers dialog
    ([4.9.4](c04.xhtml#section4.9.4)), where they apply to the selected layer as a
    whole.
  prefs: []
  type: TYPE_NORMAL
- en: Easy blurring expands Inkscape's capabilities enormously. Blur is everywhere
    in the physical world—non-crisp shadows, glows and halos, or anything viewed out
    of focus or in motion—so it is essential whenever you're drawing anything realistic.
    It is also not something you can easily imitate with regular vector shapes or
    gradients. Inkscape therefore treats blur as a fundamental property of an object,
    similar to opacity and the blend modes ([17.2](#section17.2)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The Blur slider controls the *amount* of blur in a range from 0 to 100 percent;
    1 percent barely changes the appearance of an object, and 100 percent turns any
    object into a shapeless puff. Technically, 100 percent blur makes the blur radius
    equal to half the size of the object, but the scale is not uniform: going from
    0 to 10 percent increases the blur radius much less than from 90 to 100 percent
    because you need more precise control at the lower end of the scale.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting blur as a percentage ensures that it works the same for objects of
    any size: a large object blurred by 10 percent has a larger *absolute* amount
    of blur (larger blur radius), but it looks proportional to a small object that
    is also blurred by 10 percent. If you want to get the same blur radius in objects
    of different sizes, you would need to use different blur percentages, as [Figure 17-2](#fig17-2)
    demonstrates.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-blurscale.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-2: Blur amount (same in A and B) and blur radius (same in A and C)'
  prefs: []
  type: TYPE_NORMAL
- en: Blurring an object expands its bounding box but only if the visual bounding
    box type is used (which is the default, [4.3](c04.xhtml#section4.3)). For example,
    if you want to export a blurred object without cropping the blur, you cannot use
    the object's geometric bounding box as the export area ([18.6](c18.xhtml#section18.6)).
  prefs: []
  type: TYPE_NORMAL
- en: You can think of each blurred object as residing in its own fully transparent
    layer, so it never "smears" any adjacent nonblurred objects. Since that per-object
    layer is transparent, the edges of a blurred object become partially translucent.
    However, you can blur a group, and in that case, members of the group are blurred
    together, as if placed on a single layer blurred as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: In[Figure 17-3](#fig17-3), on the left are two adjacent rectangles with no gap
    between them and no blur. In the middle, each rectangle is blurred by 20 percent
    separately; as you can see, the striped background shows through the blurry gap
    between the objects. On the right, however, the same rectangles are grouped, and
    then the group is blurred by 20 percent; now there is no gap—blurring only adds
    transparency at the edges, but it cannot reveal what was fully covered in the
    center of the opaque group.
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-blurgap.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-3: Blurring separate objects vs. blurring a group'
  prefs: []
  type: TYPE_NORMAL
- en: Grouping also allows you to apply several layers of blurring to the same object.
    For example, you can blur the object itself, then group it (possibly even with
    itself, to produce a group of one object) and blur the group. Naturally, by blurring
    a group, you can make objects look *more* blurred than before, but not*less*.
    (Similarly, as you saw in [16.3](c16.xhtml#section16.3), you can make a clone
    more blurred than its original object, but not less.)
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-blurfeather.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-4: Blurring vs. feathering'
  prefs: []
  type: TYPE_NORMAL
- en: 17.1.1 Blur and Transformations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What happens when you transform a blurred object?
  prefs: []
  type: TYPE_NORMAL
- en: Moving a blurred object moves it as a whole, without affecting the blur in any
    way. Proportional (uniform) scaling also scales the object as a whole, including
    the blur radius, so that the blur percentage (in the Fill and Stroke dialog) does
    not change.
  prefs: []
  type: TYPE_NORMAL
- en: Nonuniform scaling is more interesting. For example, if you squeeze a blurred
    object vertically, its blur will squeeze with it and become *nonuniform*—now the
    object is more blurred horizontally than vertically. Such nonuniform blur can
    approximate real-world*motion blur*—the way the object would look in a photo if
    captured in fast motion (in this case, horizontal). So, if you want to apply nonuniform
    blur to a nonsqueezed object, start by stretching it in the opposite direction,
    blur it, and then squeeze it back into shape (this only works for paths and bitmaps),
    as shown in [Figure 17-5](#fig17-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-motionblur.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-5: Motion blur, step-by-step'
  prefs: []
  type: TYPE_NORMAL
- en: You can also create nonuniform motion blur by setting different horizontal and
    vertical blur values in the Filters ▶ Blurs ▶ Blur... adjustable filter dialog,
    but the stretch/squeeze method described here is usually easier.
  prefs: []
  type: TYPE_NORMAL
- en: To create motion blur on a group or text object (that is, not a path or bitmap),
    use this trick. Stretch the object, then group it with itself (Ctrl-G, [4.8](c04.xhtml#section4.8)),
    apply a blur to the group, and squeeze it back. The grouping step ensures that
    in the end, you get an object with the correct proportions but also with the squeezing
    `transform` attribute affecting the blur.
  prefs: []
  type: TYPE_NORMAL
- en: Similar remarks apply to the way many other filters behave when transformed.
    For example, squeezing and/or rotating objects allows you to create perspective-distorted
    variants of texture filters ([17.4](#section17.4)) for applying to walls and floors
    in 3D scenes ([Chapter 22](c22.xhtml)). Of course, transforming filters by stretching
    and squeezing objects is not as convenient as dragging handles on canvas would
    be—but it works.
  prefs: []
  type: TYPE_NORMAL
- en: 17.1.2 Tweaking for Blur
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Blur mode of the Tweak tool blurs the selected objects under the brush more
    (by default) or less (with Shift pressed). The amount of blur added or removed
    depends on Force, pen pressure (if you're using a tablet pen), the closeness of
    the object to the center of brush, and how long you apply the brush.
  prefs: []
  type: TYPE_NORMAL
- en: 17.2 Blend Modes [1.1]
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Choosing a blend mode affects how the colors of an object *blend* (mix) with
    those of the background objects beneath it. Like blur, blend modes are easily
    accessible in the Layers and Fill and Stroke dialogs—where you can change them
    for layers and for individual objects, correspondingly.
  prefs: []
  type: TYPE_NORMAL
- en: There are 16 blend modes, including the Normal mode that all objects have by
    default. Each blend mode is basically a formula that calculates the visible color
    in every point where two or more objects are stacked on top of each other. In
    the default Normal mode, the color of the background object is taken into account
    only if the foreground object has less than 100 percent opacity. In all other
    modes, however, even if the foreground is fully opaque, the background may still
    show through in some way (depending on the mode and the color of the top object).
  prefs: []
  type: TYPE_NORMAL
- en: You may be familiar with how blending modes work from bitmap graphic editors,
    such as GIMP or Adobe Photoshop, that let you change how each layer of a drawing
    blends into the layers below it. In Inkscape, blend modes are also often used
    for tweaking the look of imported bitmaps with colored "lenses" using various
    modes, and in this way, they are indispensable—you cannot achieve quite the same
    effects with Normal-mode colored transparencies. You can adjust the colors of
    a bitmap using an external bitmap editor (Inkscape will even re-read a linked
    image that was changed by an external program, [18.2.1](c18.xhtml#section18.2.1)),
    or you can use a predefined composite filter, such as Sepia. In most cases, however,
    an easier and more flexible approach is to place a flat-color or gradient overlay
    on top of an image, change the blend mode of that overlay object, and adjust its
    opacity for the force of the effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'I will not overwhelm you with details and formulae of all the modes; instead,
    I will try to meaningfully group and contrast various modes and give some practical
    tips on how to achieve common useful effects. Refer to [Figure 15 in the color
    insert](c15b.xhtml#ill-fig15) that demonstrates applying four colored overlays
    (blue, orange, black, and white) to *Mona Lisa*. The top row shows the original
    bitmap and two Normal-mode overlays: one with 100 percent opacity (not transparent
    at all) and another with 50 percent opacity. All other blend modes below are shown
    at 100 percent foreground opacity; if you lower it, each mode''s effect will be
    reduced in a way you would expect.'
  prefs: []
  type: TYPE_NORMAL
- en: Color Dodge, Color Burn, Hard Light, and Soft Light form two contrasting pairs,
    with Color Dodge somewhat similar to Hard Light, and Color Burn to Soft Light.
    In this group, the two modes on the left (Color Dodge and Hard Light) either lighten
    the background colors or render the foreground opaque; the Color Burn either darkens
    the background or renders foreground opaque. Finally, Soft Light does something
    meaningful for all four sample foreground colors; of all the modes, it is the
    most similar to the partially opaque Normal mode, but it is in fact more useful.
    Where Normal mixes colors by fading out the background, Soft Light tints the background
    without dulling its saturation and contrast.
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiply, Screen, Darken, and Lighten is another group of four modes that fall
    into two contrasting pairs: Multiply is quite similar to Darken, and Screen is
    similar to Lighten. Here, the two modes on the left (Multiply and Darken) make
    the background darker if the foreground is dark, all the way to rendering it black;
    those on the right (Screen and Lighten) make the background lighter, all the way
    to white. This means a white foreground has no effect in Multiply and Darken,
    and a black foreground is invisible in Screen and Lighten. The Darken and Lighten
    modes just choose whichever of the background and foreground colors is darker
    or lighter, whereasMultiply and Screen actually combine the two colors.'
  prefs: []
  type: TYPE_NORMAL
- en: Overlay is my favorite mode; I often use it with a scattering of elliptic-gradient
    lenses to deepen highlights (with white) and shadows (with black) in a photo as
    well as to make it sunnier or gloomier overall. It also works very well for tinting,
    mixing in the foreground color without fading out the background (similar to Soft
    Light) but at the same time emphasizing the lights or shades in an image (depending
    on whether the foreground color is light or dark).
  prefs: []
  type: TYPE_NORMAL
- en: Difference and Exclusion are two modes that, instead of adding, *subtract* the
    foreground from the background (using slightly different formulae). Thus, a black
    foreground has no effect (because black is "zero color" in RGB), whereas a white
    foreground *inverts* the background. Other colors produce various "tinted inversion"
    effects, more dramatic for light colors than for dark ones.
  prefs: []
  type: TYPE_NORMAL
- en: The four modes in the last group, Hue, Saturation, Color, and Luminosity, are
    different from all the other modes in that they act not on the RGB channels of
    the background and foreground colors, but convert them to the HSL model ([8.4.3](c08.xhtml#section8.4.3))
    and combine the HSL channels in various ways.
  prefs: []
  type: TYPE_NORMAL
- en: The Hue mode combines the foreground hue and the saturation and lightness of
    the background. Unlike all other approaches to tinting, this one does not use
    the background's own hue at all; for a flat-color overlay, it creates a purely
    monochromatic image out of a de-hued version of the background and the foreground
    hue.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Saturation mode applies the foreground saturation to the hue and lightness
    of the background. This is a natural way to vary saturation of an image, from
    full desaturation (if the foreground has zero saturation, such as white or black)
    to psychedelically oversaturated colors if the foreground has fully saturated
    color (such as bright orange).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Color mode takes the hue and saturation from the foreground and combines
    them with the background lightness. Think of it as a combination of Hue (tints
    the background) and Saturation (adjusts background saturation) modes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, the Luminosity mode takes the luminosity (lightness) of the foreground
    and combines it with the hue and saturation of the background. If your foreground
    is a flat color and the background is an image, as in [Figure 15 in the color
    insert](c15b.xhtml#ill-fig15), Luminosity renders the image in its own colors
    but equalizes all of them to the same level of lightness. The result is rarely
    useful—or even discernible—because it's the relative lightness of pixels, not
    their hue or saturation, that carries most of the visual information in an image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 17.3 Filter Management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A filter applied to an object is part of its style. As such, one object's filter
    can be copied to another object by copying and then pasting style ([Chapter 8](c08.xhtml#ch8)).
    The name of a filter for a selected object is reported in the status bar, for
    example:Group of 1 object; *filtered (Specular Light)*.
  prefs: []
  type: TYPE_NORMAL
- en: In SVG, an object can have only a single filter applied. However, most filters
    consist of several filter primitives stacked on top of one another, and you can
    always combine two or more individual filters by putting one filter's stack of
    primitives on top of another's. When you apply a preset filter ([17.4](#section17.4))
    to an object that already has a filter, Inkscape is smart enough to combine their
    primitives for you so that you get the desired combined effect of both filters
    (for example, a texture overlay and a drop shadow).
  prefs: []
  type: TYPE_NORMAL
- en: If, for some reason, automatic combining of filters does not work for you, use
    the following trick. Apply one filter, then group the object with itself (Ctrl-G)
    and apply the second filter to the group. By repeating this operation, you can
    process your object with any number of filters in any order. You can even double
    down on a filter by applying it to your object twice (although in most cases,
    if a filter appears too weak, it is better to go into the Filter Editor, [17.5](#section17.5),
    and try to figure out which parameters of which primitives to adjust to crank
    it up).
  prefs: []
  type: TYPE_NORMAL
- en: 'If the scale of the applied filter is not what you need (for example, if the
    bubbles or feathered edges are too large or too small for your object) and the
    filter does not allow you to adjust that with a dialog, you can use this simple
    trick: scale your object up (or down)—for example, by pressing Ctrl-< or Ctrl->
    a few times—then apply the filter and scale the result back down (or up) by the
    same multiplier.'
  prefs: []
  type: TYPE_NORMAL
- en: To remove any filters applied to any of the selected objects, use the **Filters ▶ Remove
    Filters** command.
  prefs: []
  type: TYPE_NORMAL
- en: 17.3.1 Editing the Filter Area [1.1]
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you've already seen in the section on blurring ([17.1](#section17.1)), applying
    a filter may expand an object's visual bounding box. This is true for other filters
    besides blur that need to paint, scatter, or shift the image beyond the original
    bounding box. In SVG, any filtered object has an associated *filter area*—the
    virtual canvas on which the filter is allowed to draw. It is the size of the filter
    area that Inkscape treats as the new visual bounding box of the filtered object.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, you don't need to worry about this. Inkscape sets the filter area size
    automatically when you blur an object or choose one of the preset filters ([17.4](#section17.4)),
    based on the nature of each filter (for example, extending the pre-filter bounding
    box by the blur radius). Most of the time this works perfectly—but sometimes,
    especially when you're combining filters or copy-pasting a filter to a different
    object, this automatic filter area may cause clipping of the filter's outer fringes
    so you need to manually fix it.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to edit the filter area is to switch to the Node tool ([12.5](c12.xhtml#section12.5))
    or any of the shape tools ([Chapter 11](c11.xhtml#ch11)) and drag any of the two
    small diamond-shaped handles in the top-left and bottom-right corners of the visual
    bounding box, as shown in [Figure 17-6](#fig17-6). Usually you extend the filter
    area to prevent clipping, but you can also use this approach to clip your filtered
    object if that's what you need (in that case, however, watch for any other objects
    that, due to duplication or style pasting, use the same filter—they may end up
    clipped too).
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-editarea.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-6: Editing the filter area via handles in the Node tool'
  prefs: []
  type: TYPE_NORMAL
- en: Interactive editing of the filter area does not work for clones and symbols.
    You can also edit the area of any filter numerically in the Filter Editor dialog
    ([17.5.4](#section17.5.4)).
  prefs: []
  type: TYPE_NORMAL
- en: 17.4 Preset Filters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SVG defines a limited number of filter primitives out of which you can build
    arbitrarily complex composite filters. Before going that way, however, let's look
    at an impressive collection of preset composite filters that come with Inkscape.
  prefs: []
  type: TYPE_NORMAL
- en: To apply a preset filter to a selected object or objects, simply choose a command
    from the submenus of the **Filters** menu. To get a brief description of an individual
    preset filter (or of any menu command, for that matter), just hover the mouse
    over its command in the menu and read the status bar, as shown in [Figure 17-7](#fig17-7).
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-presets.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-7: Preset filter effects'
  prefs: []
  type: TYPE_NORMAL
- en: Most filters will apply immediately. Others—those with an "..." at the end of
    their names in the menu—will display a dialog where you can adjust their parameters.
    Such a dialog always has the Live preview checkbox that you can turn on to view
    the result on canvas updated live for any changes of parameters (however, this
    checkbox locks the canvas so you can't select a different object, nor can you
    even scroll or zoom). Clicking Apply creates the filter with the current parameters
    but does not close the dialog (so you can select another object to apply it to);
    Close cancels the dialog and the preview (no need to undo).
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 17-8](#fig17-8) shows an example of a pretty complex adjustable effect
    whose dialog contains several numeric parameters and a color chooser.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-preset-dialog.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-8: Dialog of an adjustable preset filter'
  prefs: []
  type: TYPE_NORMAL
- en: I don't describe all preset filters here—there are just too many of them (and
    more are added with each Inkscape version). However, I do describe each of the
    submenus of the Filters menu and give brief notes and illustrations of the most
    notable filters in each submenu (usually the adjustable ones).
  prefs: []
  type: TYPE_NORMAL
- en: 17.4.1 The Bevels Submenu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Bevels submenu presents many variations on the theme of bevels (pseudo-3D
    raised edges), as shown in [Figure 17-9](#fig17-9). Here you will find opaque
    and translucent materials, glossy and matte finishes, bevels lit by multiple sources
    of light, with and without shadows, with depressions in the middle and with raised
    borders, and so on. Most of these filters preserve the original color of the object,
    though they may make it lighter or darker in places for the 3D effect.
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-filters-bevels.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-9: Filters from the Bevels submenu'
  prefs: []
  type: TYPE_NORMAL
- en: Most of the adjustable filters in this group let you specify how raised the
    bevel is (Smoothness), the coordinates of the light source (Elevation and Azimuth),
    as well as the Brightness and color of the highlight. If the filter you've chosen
    is not adjustable, you can still move the light source if you apply it, open the
    Filter Editor, select the Specular Light or Diffuse Light primitive in the filter
    stack applied to the object, and play with the Elevation and Azimuth parameters
    there.
  prefs: []
  type: TYPE_NORMAL
- en: 17.4.2 The Blurs Submenu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Blurs submenu ([Figure 17-10](#fig17-10)) includes the basic adjustable
    Blur where you can set horizontal and vertical blur amounts separately. If you
    want a non-horizontal and non-vertical motion blur, rotate your object to make
    its motion direction horizontal, blur it with horizontal blur, and then rotate
    back.
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-filters-blurs.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-10: Filters from the Blurs submenu'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Blur content only checkbox in Blur blurs only the inside of an object (for
    example, the image on a bitmap) but leaves its edges (where its opacity drops
    to zero) unaffected. The Feather effect does the opposite: it blurs the transparency
    mask of an object but does not affect its content.'
  prefs: []
  type: TYPE_NORMAL
- en: Apparition and Evanescent overlay a faded-out blurred copy of an object over
    a normal copy to make it look softer and a little unreal without blurring it to
    unrecognizability; of these, Apparition works on the object's edge (like Feather),
    while Evanescent works on its content. Finally,Out of Focus attempts to model
    the real-world myopic view of an object's content a little better than a plain
    blur would.
  prefs: []
  type: TYPE_NORMAL
- en: 17.4.3 The Bumps Submenu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Bumps submenu ([Figure 17-11](#fig17-11)) has filters that add various pseudo-3D
    textures that emphasize the features in an image. They are similar to the "embossing"
    effect you may have seen in other software.
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-filters-bumps.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-11: Filters from the Bumps submenu'
  prefs: []
  type: TYPE_NORMAL
- en: 17.4.4 The Color Submenu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Color submenu collects various ways to adjust or transform an object's colors.
    They are most useful for imported bitmaps, but you can also use them on vector
    designs, especially complex ones that you can group and filter as a whole without
    having to repaint each object separately.
  prefs: []
  type: TYPE_NORMAL
- en: 'Personally, I prefer to use semitransparent overlays with blend modes ([17.2](#section17.2)),
    because with them, I have full control over which parts of an image to affect,
    but there are cases where blend modes just don''t cut it. Still, this submenu
    includes Simple Blend that emulates any of the blend modes as an effect. You can
    also:'
  prefs: []
  type: TYPE_NORMAL
- en: Adjust Lightness-Contrast.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invert per-channel.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convert to Grayscale controlling how much each of the RGB channels contributes
    to the result.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Color Shift to rotate hues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emulate various types of Color Blindness.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Render an image in two (Duochrome) or three (Trichrome) colors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjustably Colorize an image with a chosen color.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make colors Fluorescent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extract Channel to get one of the RGB or CMY channels, or Nudge them relative
    to one another for that "misaligned print" antique look.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 17.4.5 The Distort Submenu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Distort submenu's filters apply random distortions to an object's content,
    transparency mask, or both ([Figure 17-12](#fig17-12)). This includes the versatile
    adjustable Roughen where you can set the frequency and amplitude of a random ripple,
    as well as a number of preset variations on this theme.
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-filters-distorts.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-12: Filters from the Distort submenu'
  prefs: []
  type: TYPE_NORMAL
- en: 17.4.6 The Fill and Transparency Submenu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Fill and Transparency submenu contains several essential filters:'
  prefs: []
  type: TYPE_NORMAL
- en: Channel Transparency (adjustable) makes parts of an object transparent depending
    on RGB channel values (for example, to make holes in areas where Red is above
    a certain threshold).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fast Crop does not change the look of the object in any way but adds a rectangular
    crop frame with X-shaped handles in the top-left and bottom-right corners. Drag
    the handles to nondestructively crop the object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Light Eraser renders white or light-colored areas of an object transparent (with
    the Invert checkbox, it renders everything except light-colored areas transparent).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fill Background fills the transparent parts of an object's bounding box (plus
    extensions, [17.3.1](#section17.3.1)) with an opaque color (this filter is not
    adjustable, use the Filter Editor to change the color); Flatten Transparency does
    the same with white.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Opacity (adjustable) thresholds an object's opacity, making all blurred or transparency-gradient
    edges crisp.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Silhouette (adjustable) replaces all colors in an object by black or another
    color of your choice.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 17.4.7 The Image Effects Submenu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Image Effects submenu contains a few classic bitmap processing algorithms,
    including Edge Detect (renders a black-and-white version of the image showing
    the color boundaries in the original) and Sharpen (emphasizes color boundaries
    by increasing their contrast).
  prefs: []
  type: TYPE_NORMAL
- en: 17.4.8 The Image Paint and Draw Submenu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Image Paint and Draw submenu collects filters that emulate various painting
    and drawing techniques and materials ([Figure 17-13](#fig17-13)). Not all of these
    emulations are convincing, but many can be inspiring.
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-filters-imagepaint.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-13: Filters from the Image Paint and Draw submenu'
  prefs: []
  type: TYPE_NORMAL
- en: 17.4.9 The Materials Submenu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Materials submenu's filters imitate various materials, tinted by the object's
    color and clipped by its opacity mask ([Figure 17-14](#fig17-14)). Those with
    "3D" in the name also add a bevel at the edge.
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-filters-materials.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-14: Filters from the Materials submenu'
  prefs: []
  type: TYPE_NORMAL
- en: 17.4.10 The Morphology Submenu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Morphology is Greek for "studying forms"; these filters imitate inset/outset
    ([12.4](c12.xhtml#section12.4)) and various kinds of filling and stroking, as
    shown in [Figure 17-15](#fig17-15).
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-filters-morpho.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-15: Filters from the Morphology submenu'
  prefs: []
  type: TYPE_NORMAL
- en: 17.4.11 The Non-Realistic 3D Shaders Submenu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Non-Realistic 3D Shaders, used on flat-colored shapes, are similar to bevels
    but are thicker, go further in from the edge, and have a much higher contrast
    between light and shade (hence "non-realistic"), as [Figure 17-16](#fig17-16)
    demonstrates.
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-filters-nonreal.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-16: Filters from the Non-Realistic 3D Shaders submenu'
  prefs: []
  type: TYPE_NORMAL
- en: 17.4.12 The Overlays Submenu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Overlays do not change the object itself but treat it as a pad for displaying
    some kind of texture, adding it as an overlay on the object's original color (and
    sometimes fully obscuring it), as shown in [Figure 17-17](#fig17-17). This group
    includes the generic adjustable Noise Fill.
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-filters-overlays.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-17: Filters from the Overlays submenu'
  prefs: []
  type: TYPE_NORMAL
- en: 17.4.13 The Pixel Tools Submenu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pixel Tools has a single filter, Pixelize, which suppresses pixel-level anti-aliasing
    (see [Figure 1-1](c01.xhtml#fig1-1)). It does not rasterize vector shapes—but
    with this filter, at any level of zoom, they have perfectly crisp (and usually
    visibly jagged) edges.
  prefs: []
  type: TYPE_NORMAL
- en: 17.4.14 The Protrusions and Ridges Submenus
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Protrusions are fun filters that add various extensions to your shapes, such
    as dripping liquid or fire. The Ridges submenu filters turn an object into a narrow
    ridge along the edge and treat this ridge in various ways ([Figure 17-18](#fig17-18)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-filters-protrusions-ridges.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-18: Filters from the Protrusions and Ridges submenus'
  prefs: []
  type: TYPE_NORMAL
- en: 17.4.15 The Scatter and Shadows and Glows Submenus
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Scatter submenu filters explode an object into variously shaped fragments—tree
    leaves, cubes (looking more like squares), random spray splotches—and scatter
    those fragments randomly around.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Shadows and Glows submenu is the place to go for your trusty all-purpose
    Drop Shadow: the adjustable filter lets you select the color and opacity of the
    shadow (or glow), its displacement relative to the object, and the blur radius
    ([Figure 17-19](#fig17-19)). This group also includes a few other filters implementing
    inner and outer shadows and glows and their combinations.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-filters-scatter-shadows.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-19: Filters from the Scatter and Shadows and Glows submenus'
  prefs: []
  type: TYPE_NORMAL
- en: 17.4.16 The Textures Submenu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Textures submenu contains various naturalistic textures: crumpled plastic,
    jam spread, bark, horizontally striped carpet, and so on ([Figure 17-20](#fig17-20)).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-filters-textures.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-20: Filters from the Textures submenu'
  prefs: []
  type: TYPE_NORMAL
- en: 17.5 The Filter Editor Dialog
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The preset filters that come with Inkscape are useful not only by themselves
    but also as starting points for your own derivative filters. Choosing one of the
    preset filters—closest to what you want to get—and working from it is usually
    easier than starting from scratch. Let's look at the Filter Editor dialog (Filters ▶ Filter
    Editor... from the menu) shown in [Figure 17-21](#fig17-21).
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-dialog.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-21: Major areas of the Filter Editor dialog'
  prefs: []
  type: TYPE_NORMAL
- en: 17.5.1 The Filters List
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The top left pane of the dialog lists all filters defined in your document;
    select any of them and edit its structure and parameters in the rest of the dialog.
    If the currently selected object has a filter applied, that filter will show a
    check mark in the list—by setting or removing the check mark, you can apply or
    unapply any filter to any object.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click a filter and choose **Select** to select all objects in the document
    that use this filter. Filters not currently used by any object remain in the list;
    to remove unused filters from the document, use the **File ▶ Clean Up Document**
    command.
  prefs: []
  type: TYPE_NORMAL
- en: Under the list, the New button adds a new filter. If you open this dialog in
    an empty document, the list of filters is also empty. Click**New** to create a
    new empty filter—usually called `filter1` (to rename it, just click its name in
    the list twice and edit the name in place). You can also duplicate or delete a
    filter in the list by right-clicking it and using the corresponding pop-up menu
    commands.
  prefs: []
  type: TYPE_NORMAL
- en: Now, create or select some object in the document and check the checkbox for
    your new filter. Nothing changes—an empty filter does not affect the rendering
    of an object. For the filter to actually do something, you need to add some primitives
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: 17.5.2 The Stack of Primitives
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The area to the right of the filter list is the main filter construction board,
    where you list, arrange, and connect the stack of*primitives* that constitute
    a filter. This will be empty until you add primitives to a filter.
  prefs: []
  type: TYPE_NORMAL
- en: The 16 primitives supported by Inkscape are listed in a drop-down list next
    to the Add Effect button. When you choose a primitive in the list, it displays
    a brief description and illustration below—read those descriptions to get a rough
    idea of what each primitive does. A detailed explanation of all primitives is
    beyond the scope of this book; refer to the SVG specification ([http://w3.org/TR/SVG11/](http://w3.org/TR/SVG11/))
    for complete details.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, let's look at the step-by-step process of creating a fairly complex
    filter that uses several different primitives. My filter is called Sandy Blur;
    I designed it for the background coloring of the rose image (see [Figure 25-5](c25.xhtml#fig25-5)).
    This filter aims to imitate blurry watercolor strokes on rough paper.
  prefs: []
  type: TYPE_NORMAL
- en: 'Plain Gaussian blur would not work for me: it is too smooth, too obviously
    computer-generated, too boring. For an acceptable watercolor imitation, I needed
    to model both the small-scale roughness of the paper texture and the larger-scale
    "blotches" resulting from the watercolor paint flowing and sticking differently
    in different spots. For both those sources of unevenness, I used the Turbulence
    primitive that creates random fractal noise at a given scale ([Figure 17-22](#fig17-22)).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-turbsinstack.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-22: The two Turbulence primitives'
  prefs: []
  type: TYPE_NORMAL
- en: The two Turbulence primitives are the first two components of the filter—the
    two topmost boxes in the stack. Each filter primitive has one or more *inputs*
    and one *output*; in the list, inputs are depicted by lines coming into the primitive
    box horizontally from the right, and the output is the line going from the box
    vertically downward. You can wire the connections by dragging, starting from an
    input triangle at the right-hand edge of a primitive's box.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the outputs of some primitives are inputs for others. Generally,
    information flows top to bottom in the stack of primitives, and the output of
    the bottommost primitive is what you see rendered in the document window. You
    can rearrange the primitives by dragging; a right-click menu allows you to duplicate
    or delete a primitive.
  prefs: []
  type: TYPE_NORMAL
- en: What are the vertically stacked boxes on the right? These are the predefined
    sources that any primitive can use as input. The most useful of these are Source
    Graphic and Source Alpha. Source Graphic, as the name implies, supplies the rendered
    image of the object being filtered, at the current zoom's resolution. The Source
    Alpha provides a grayscale representation of the original object's opacity (alpha)
    mask; points that are fully opaque (regardless of color) in theSource Graphic
    will be opaque black on the Source Alpha image, and points that are transparent
    will be transparent black.
  prefs: []
  type: TYPE_NORMAL
- en: 17.5.3 Parameters of a Primitive
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's look again at the two Turbulence primitives at the top of the stack. They
    both take Source Alpha as input and pass their result—random noise—down to other
    primitives. What's different is the parameters of these filters.
  prefs: []
  type: TYPE_NORMAL
- en: When you select a filter primitive in the stack, its parameters are displayed
    in the bottom pane of the dialog. [Figure 17-23](#fig17-23) shows the parameters
    of the two Turbulence primitives.
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-turbsparams.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-23: The parameters of the two Turbulence primitives'
  prefs: []
  type: TYPE_NORMAL
- en: 'These two primitives have the same Type (Fractal Noise, which looks better
    in this case than the other option, Turbulence), but they differ inBase Frequency
    and Octaves. The Base Frequency parameter sets the scale of the turbulence; higher
    frequency results in smaller, sand-like texture, while lower frequency produces
    larger clouds. The number of Octaves specifies how deep the recursion is in the
    algorithm: increasingOctaves produces sharper unevenness with more small details;
    decreasing this value gives a smoother, more nebulous image.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, to combine the two turbulence outputs, I used another primitive named Composite,
    as shown in [Figure 17-24](#fig17-24).
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-composite.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-24: The Composite primitive'
  prefs: []
  type: TYPE_NORMAL
- en: It has two inputs and combines them, pixel by pixel, using one of a number of
    methods. Here, I used the Arithmetic method; with the numeric values of the four
    coefficients (K1 to K4) as shown, it results in the large-scale wave and small-scale
    ripples being combined into a composite with somewhat increased contrast, as [Figure 17-25](#fig17-25)
    demonstrates.
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-twoturbs.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-25: The result of compositing two turbulences'
  prefs: []
  type: TYPE_NORMAL
- en: So far, I didn't use the image of the object itself to which the filter will
    apply—that is, I didn't use the Source Graphic. Supposedly, that object would
    be some kind of a broad brush-like path, likely created with the Calligraphic
    pen tool ([14.2](c14.xhtml#section14.2)). Of course, the first thing to do to
    a flat-color, crisp-edged path to make it more like a watercolor stroke is to
    blur it, as shown in [Figure 17-26](#fig17-26).
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-blur.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-26: The Gaussian Blur primitive'
  prefs: []
  type: TYPE_NORMAL
- en: The Standard Deviation parameter of Gaussian Blur is similar to the blur amount
    you would adjust in the Fill and Stroke dialog ([Figure 17-1](#fig17-1)), except
    that here it is measured in absolute `px` units ([A.6](b01.xhtml#sectionA.6)),
    not as a percentage of the object's size.
  prefs: []
  type: TYPE_NORMAL
- en: How to combine the blurred stroke with the turbulence? Composite won't work
    here. Any of its modes will result in a smooth blur being *overlaid* with the
    turbulent ripples, the underlying smoothness not going anywhere (try it). It won't
    look like watercolor on a rough paper—more like computer-produced blur viewed
    through a spotted glass.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider what happens when you paint with a real brush on a real paper. The
    blurriness of your stroke results from the softness of the brush—you apply more
    pressure in the middle than on the edges of the brush. When a brush meets a dimple
    in the paper, that pressure is changed: if this area of the paper is higher, it
    will get more paint, as if it were closer to the maximum-pressure point of the
    brush; if it is a depression, it will get less paint. In other words, the roughness
    of the paper jitters the blurred stroke *in the plane of the drawing*, as if randomly
    displacing parts of the stroke sideways. How do you achieve this with filters?'
  prefs: []
  type: TYPE_NORMAL
- en: The Displacement Map primitive is a perfect match for the job. It takes its
    first input and moves its pixels around according to its second input. You can
    choose which of the channels (Red, Green, Blue, or Alpha) of the second input
    will move the first one in each of the two axis directions (X and Y), as well
    as the scale of this displacement. In this case, the first input was the blurred
    object, and the second input was the composite turbulence field, of which I took
    the Alpha channel for both axes ([Figure 17-27](#fig17-27)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-displacement.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-27: The Displacement Map primitive'
  prefs: []
  type: TYPE_NORMAL
- en: As an added bonus, the result looks rougher in some areas and smoother in others.
    This is because in the smooth areas, the displacement map hits the almost-flat
    inner parts of the blurred stroke—where the high-frequency jitter just moves around
    pixels of almost the same color, which barely disturbs the smoothness. On the
    edges of the stroke, however, different-colored pixels are mixed and jittered,
    producing visible roughness. All this is additionally modulated by the low-frequency
    noise, producing a convincing watercolor simulation.
  prefs: []
  type: TYPE_NORMAL
- en: However, if you apply this filter to a light-colored stroke (and not black,
    as in[Figure 17-27](#fig17-27)), the result is still not perfect. When you're
    looking at a real rough paper with watercolor strokes on it, what you see is not
    just the spatial distribution of paint; you also see the roughness itself, which
    looks like a pattern of shades. Without this shading, light-colored strokes with
    this filter still look too unnaturally flat. Fortunately, that was easy to fix;
    I already had the high-frequency turbulence source, which worked nicely as shading
    once I composed it with the displacement-mapped blur ([Figure 17-28](#fig17-28)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-final.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-28: The final filter and the parameters of the lastComposite primitive
    that overlays the shading'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, the filter looked pretty decent. I could keep improving on it,
    adding various smears, water leaks, diffusion, and so on; however, since my demo
    image used this filter only for the background, it was good enough for the purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 17.5.4 The Filter Area
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The second tab in the filter parameter area in the Filter Editor dialog is calledFilter
    General Settings. It contains parameters that apply to the entire filter stack,
    not any single primitive. Currently, the only thing you can change here is the*filter
    area*—the area that the filter will render into, measured in the units of the
    bounding box of the object to which the filter is applied. You can edit this area
    interactively on canvas ([17.3.1](#section17.3.1)), but the Filter Editor allows
    you to set it numerically.
  prefs: []
  type: TYPE_NORMAL
- en: The Coordinates widgets specify the top-left corner of the area, and theDimensions
    specify the bottom-right corner. All values are measured in the units of the pre-filter
    bounding box size.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you set theCoordinates to 0/0 in and the Dimensions to 1/1,
    the area will be equal to the pre-filter bounding box. This will work if your
    filter does not reach beyond the object—for example, if it's just a color change
    with a Color Matrix primitive. However, for anything like blur that paints outside
    the bounding box, you need to provide sufficient margins for this to prevent cropping.
    When you apply blur via the Fill and Stroke dialog or use one of the preset filters,
    these margins are set for you automatically; however, when creating a new filter
    stack from scratch, you must take care of it yourself. The default is 0.1/0.1
    for Coordinates and 1.2/1.2 forDimensions, which results in 10 percent margins
    on all sides of the object, as shown in [Figure 17-29](#fig17-29).
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-area.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-29: Specifying the filter area'
  prefs: []
  type: TYPE_NORMAL
- en: If Inkscape uses the visual bounding box (which is the default, [4.3](c04.xhtml#section4.3)),
    the bounding box of a filtered object—the frame you see when you select it in
    the Selector—is the enlarged filter area. Among other things, this means that,
    when exporting a selected object to bitmap ([18.6](c18.xhtml#section18.6)), Inkscape
    will make sure the bitmap contains the blurred edges without cropping.
  prefs: []
  type: TYPE_NORMAL
- en: 17.6 Filter Rendering Options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The rendering speed of Inkscape filters has been greatly improved over the years.
    Still, with complex or large-area filters it may still be an issue. That's why
    Inkscape has a number of preference options to tweak the performance of filters
    (and rendering in general).
  prefs: []
  type: TYPE_NORMAL
- en: First, you can always switch to Outline mode ([3.14](c03.xhtml#section3.14))
    to speed up rendering while working on a document. There is also the No Filters
    mode, which is the same as normal mode except that filters aren't rendered; this
    is perhaps the easiest workaround if filters are the main source of slowness for
    you.
  prefs: []
  type: TYPE_NORMAL
- en: '[1.1]'
  prefs: []
  type: TYPE_NORMAL
- en: Options that affect rendering speed are collected on the Rendering page of the
    Preferences dialog ([Figure 17-30](#fig17-30)). You can set the Number of threads
    (simultaneously executing rendering pipelines), four by default; it is often recommended
    to set this equal to the number of logical processors your CPU has (in my case
    it is eight). You can also increase the Rendering cache (64MB by default) and
    enlarge the Rendering tile multiplier (16 by default). If you have modern enough
    hardware and plentiful RAM, it is worth increasing these values to see how much
    of an improvement you can get. Also, if you notice slowdowns when the screen is
    updated during editing (for example, when you're dragging nodes), try switching
    Redraw while editing from the default Responsive to Conservative.
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-prefs.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-30: The Rendering page of the Preferences dialog'
  prefs: []
  type: TYPE_NORMAL
- en: 'Options that apply specifically to filters include the two groups of radio
    buttons: Gaussian blur quality for display and Filter effects quality for display—this
    is where you search for the speed/quality tradeoff that works best for you. The
    first group affects only blur; the default,Average quality, looks *almost* perfect
    and renders reasonably fast. At lower quality settings, visible defects appear,
    but rendering becomes even faster; the higher settings bring little quality improvement
    but are significantly slower.'
  prefs: []
  type: TYPE_NORMAL
- en: The second set of radio buttons applies to all filters (including blur). It
    also offers to trade an improvement in rendering speed for worse rendering quality,
    but its speed advantage is less significant, so here the Better quality option
    is probably optimal.
  prefs: []
  type: TYPE_NORMAL
- en: 17.7 Exporting Filters to PS and PDF
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PostScript and PDF formats, while being vector, do not support anything like
    SVG's filters. By default, during export, Inkscape offers to rasterize (convert
    into a bitmap) any object with a filter applied. This fully preserves the appearance
    the filter had in Inkscape, but it may increase the file size significantly. In
    the export options dialog, you can specify the resolution of the bitmaps, as well
    as turn rasterization off, in which case objects remain vectors but lose any filtering
    ([Figure 17-31](#fig17-31)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](19/fi-export.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-31: Specifying the treatment of filters when saving a document as
    PDF'
  prefs: []
  type: TYPE_NORMAL
- en: When exporting via the command line ([C.4](b03.xhtml#sectionC.4)), the corresponding
    options are`--export-dpi` to specify the resolution and`--export-ignore-filters`
    to turn off rasterization.
  prefs: []
  type: TYPE_NORMAL
