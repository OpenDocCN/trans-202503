["```\n// Listing 15-1\n#include <SoftwareSerial.h>\n// GPS TX to D2, RX to D3\nSoftwareSerial Serial2(2, 3);\nbyte gpsData;\nvoid setup() \n{\n// Open the Arduino Serial Monitor Serial.begin(9600);\n// Open the GPS1   Serial2.begin(9600);\n}\nvoid loop() \n{2   while (Serial2.available() > 0) { // get the byte data from the GPS gpsData = Serial2.read();3     Serial.write(gpsData); }\n}\n```", "```\n// Project 43 - Creating a Simple GPS Receiver1 #include <LiquidCrystal.h>\nLiquidCrystal lcd(8, 9, 4, 5, 6, 7);\n#include <TinyGPS.h>\n#include <SoftwareSerial.h>\n// GPS TX to D2, RX to D3\nSoftwareSerial Serial2(2, 3);\nTinyGPS gps;\nvoid getgps(TinyGPS &gps);\nbyte gpsData;2 void getgps(TinyGPS &gps)\n// The getgps function will display the required data on the LCD\n{ float latitude, longitude; // decode and display position data3   gps.f_get_position(&latitude, &longitude); lcd.setCursor(0, 0); lcd.print(\"Lat:\"); lcd.print(latitude, 5); lcd.print(\" \"); lcd.setCursor(0, 1); lcd.print(\"Long:\"); lcd.print(longitude, 5); lcd.print(\" \"); delay(3000); // wait for 3 seconds lcd.clear();\n}\nvoid setup(){ Serial2.begin(9600);\n}\nvoid loop()\n{ while (Serial2.available() > 0) { // get the byte data from the GPS gpsData = Serial2.read(); if (gps.encode(gpsData)) {4       getgps(gps); } }\n}\n```", "```\n// Project 44 - Creating an Accurate GPS-Based Clock\n#include <LiquidCrystal.h>\n#include <TinyGPS.h>\n#include <SoftwareSerial.h>\nLiquidCrystal lcd(8, 9, 4, 5, 6, 7);\n// GPS RX to D3, GPS TX to D2\nSoftwareSerial Serial2(2, 3);\nTinyGPS gps;\nvoid getgps(TinyGPS &gps);\nbyte gpsData;\nvoid getgps(TinyGPS &gps){ byte month, day, hour, minute, second, hundredths;1   gps.crack_datetime(&year,&month,&day,&hour,&minute,&second,&hundredths);2   hour=hour+10; // change the offset so it is correct for your time zone if (hour>23) { hour=hour-24; } lcd.setCursor(0,0); // print the date and time3   lcd.print(\"Current time: \"); lcd.setCursor(4,1); if (hour<10) { lcd.print(\"0\"); } lcd.print(hour, DEC); lcd.print(\":\"); if (minute<10) { lcd.print(\"0\"); } lcd.print(minute, DEC); lcd.print(\":\"); if (second<10) { lcd.print(\"0\"); } lcd.print(second, DEC);\n}\nvoid setup()\n{ Serial2.begin(9600);\n}\nvoid loop()\n{ while (Serial2.available() > 0) { // get the byte data from the GPS gpsData = Serial2.read(); if (gps.encode(gpsData)) { getgps(gps); } }\n}\n```", "```\n// Project 45 - Recording the Position of a Moving Object over Time\n#include <TinyGPS.h>\n#include <SoftwareSerial.h>\n#include <SD.h>\n// GPS TX to D2, RX to D3\nSoftwareSerial Serial2(2, 3);\nTinyGPS gps;void getgps(TinyGPS &gps);\nbyte gpsData;\nvoid getgps(TinyGPS &gps)\n{ float latitude, longitude; int year; byte month, day, hour, minute, second, hundredths; // create/open the file for writing File dataFile = SD.open(\"DATA.TXT\", FILE_WRITE); // if the file is ready, write to it:1   if (dataFile) {2     gps.f_get_position(&latitude, &longitude); dataFile.print(\"Lat: \"); dataFile.print(latitude, 5); dataFile.print(\" \"); dataFile.print(\"Long: \"); dataFile.print(longitude, 5); dataFile.print(\" \"); // decode and display time data gps.crack_datetime(&year, &month, &day, &hour, &minute, &second, &hundredths); // correct for your time zone as in Project 44 hour = hour + 10; if (hour > 23) { hour = hour - 24; } if (hour < 10) { dataFile.print(\"0\"); } dataFile.print(hour, DEC); dataFile.print(\":\"); if (minute < 10) { dataFile.print(\"0\"); } dataFile.print(minute, DEC); dataFile.print(\":\"); if (second < 10) { dataFile.print(\"0\"); } dataFile.print(second, DEC); dataFile.print(\" \"); dataFile.print(gps.f_speed_kmph());3     dataFile.println(\"km/h\"); dataFile.close();4     delay(15000); // record a measurement around every 15 seconds } // if the file isn't ready, show an error: else { Serial.println(\"error opening DATA.TXT\"); }\n}\nvoid setup()\n{ Serial.begin(9600); Serial2.begin(9600); Serial.println(\"Initializing SD card...\"); pinMode(10, OUTPUT); // check that the memory card exists and is usable if (!SD.begin(10)) { Serial.println(\"Card failed, or not present\"); // stop sketch return; } Serial.println(\"memory card is ready\");\n}\nvoid loop()\n{ while (Serial2.available() > 0) { // get the byte data from the GPS gpsData = Serial2.read(); if (gps.encode(gpsData)) {5       getgps(gps); } }\n}\n```"]