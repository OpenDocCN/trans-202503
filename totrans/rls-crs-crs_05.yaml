- en: Chapter 4. Controllers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章. 控制器
- en: Rails *controllers* connect your application’s models and views. Any web requests
    that your application receives are routed to the appropriate controller. The controller
    gets data from the model and then renders the appropriate view or redirects to
    a different location.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Rails的*控制器*连接应用程序的模型和视图。应用程序接收到的任何网页请求都会被路由到相应的控制器。控制器从模型获取数据，然后呈现适当的视图或重定向到其他位置。
- en: In this chapter, we continue working on our blog. Along the way, you’ll learn
    about controllers in detail. I’ll cover resource representation with REST, routing
    resources, and the types of actions a controller can take.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续开发我们的博客。在这个过程中，你将详细了解控制器。我将介绍使用REST进行资源表示、资源路由以及控制器可以执行的操作类型。
- en: Representational State Transfer
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表现层状态转移
- en: '*Representational State Transfer*, or *REST*, is a client-server software architecture
    introduced in 2000 by Dr. Roy Fielding, one of the authors of the HTTP specification.
    REST deals with the representation of resources, and in Rails, resources correspond
    to models. In RESTful architectures, clients initiate requests to servers. Servers
    process those requests and return responses to the clients. In a Rails application,
    the server that processes requests and returns responses is the controller. The
    controller interacts with the client through a collection of common URLs and HTTP
    verbs.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*表现层状态转移*，或称*REST*，是一种由HTTP规范的作者之一罗伊·菲尔丁博士于2000年提出的客户端-服务器软件架构。REST处理资源的表示，在Rails中，资源对应于模型。在RESTful架构中，客户端发起请求到服务器，服务器处理请求并将响应返回给客户端。在Rails应用中，处理请求并返回响应的服务器是控制器。控制器通过一组常见的URL和HTTP动词与客户端交互。'
- en: You’re probably already familiar with at least two of these HTTP verbs. A request
    for a web page is sometimes called a *GET* request. A GET request doesn’t change
    the state of the application; it simply returns data. When you submit form data
    on a web page, the result is usually a *POST* request. In an application using
    REST, a POST request is used to create a record on the server.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经至少熟悉这两种HTTP动词。请求一个网页有时被称为*GET*请求。GET请求不会改变应用程序的状态；它仅仅返回数据。当你在网页上提交表单数据时，结果通常是一个*POST*请求。在使用REST的应用程序中，POST请求用于在服务器上创建记录。
- en: During our discussion of models in the last chapter, you learned about CRUD
    (create, read, update, and delete). REST uses the four HTTP verbs in [Table 4-1](ch04.html#mapping_database_actions_to_http_verbs
    "Table 4-1. Mapping Database Actions to HTTP Verbs"), which correspond to each
    of those actions.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们上一章讨论模型时，你了解了CRUD（创建、读取、更新和删除）。REST使用[表4-1](ch04.html#mapping_database_actions_to_http_verbs
    "表4-1. 数据库操作与HTTP动词的映射")中列出的四个HTTP动词，分别对应这些操作。
- en: Table 4-1. Mapping Database Actions to HTTP Verbs
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 表4-1. 数据库操作与HTTP动词的映射
- en: '| Database Action | HTTP Verb |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| 数据库操作 | HTTP动词 |'
- en: '| --- | --- |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Create` | POST |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `创建` | POST |'
- en: '| `Read` | GET |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `读取` | GET |'
- en: '| `Update` | PATCH |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `更新` | PATCH |'
- en: '| `Delete` | DELETE |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `删除` | DELETE |'
- en: Your application determines how to handle a request based on the HTTP verb used.
    A GET request for a resource returns the data from the corresponding model; a
    PATCH request updates the model with new information; and a DELETE request destroys
    the model. All three of these actions use the same URL. Only the HTTP verb is
    different.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用程序会根据所使用的HTTP动词来决定如何处理请求。对于一个资源的GET请求，它会返回对应模型的数据；PATCH请求会用新信息更新模型；DELETE请求则销毁模型。所有这三种操作都使用相同的URL，只有HTTP动词不同。
- en: Rails applications add three more actions in addition to the four CRUD actions
    in [Table 4-1](ch04.html#mapping_database_actions_to_http_verbs "Table 4-1. Mapping
    Database Actions to HTTP Verbs"). The `index` action displays a list of all resources;
    the `new` action displays a form for creating a new resource; and the `edit` action
    displays a form for editing an existing resource.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Rails应用程序在[表4-1](ch04.html#mapping_database_actions_to_http_verbs "表4-1. 数据库操作与HTTP动词的映射")中列出的四个CRUD操作之外，还增加了三种操作。`index`操作显示所有资源的列表；`new`操作显示用于创建新资源的表单；`edit`操作显示用于编辑现有资源的表单。
- en: Each of these actions has a corresponding method in a Rails controller. These
    seven methods are summarized in [Table 4-2](ch04.html#default_restful_actions
    "Table 4-2. Default RESTful Actions").
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 每个操作在Rails控制器中都有一个对应的方法。这七个方法在[表4-2](ch04.html#default_restful_actions "表4-2.
    默认的RESTful操作")中进行了总结。
- en: Table 4-2. Default RESTful Actions
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 表4-2. 默认的RESTful操作
- en: '| Action | Description | HTTP Verb |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | 描述 | HTTP动词 |'
- en: '| --- | --- | --- |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `index` | List all records | GET |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `index` | 列出所有记录 | GET |'
- en: '| `show` | Show one record | GET |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `show` | 显示一条记录 | GET |'
- en: '| `new` | Show form to create a record | GET |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `new` | 显示创建记录的表单 | GET |'
- en: '| `edit` | Show form to edit a record | GET |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `edit` | 显示编辑记录的表单 | GET |'
- en: '| `create` | Create a new record | POST |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `create` | 创建一条新记录 | POST |'
- en: '| `update` | Update an existing record | PATCH |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `update` | 更新现有记录 | PATCH |'
- en: '| `destroy` | Delete a record | DELETE |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `destroy` | 删除记录 | DELETE |'
- en: We’ll cover each of these actions in this chapter, but first let’s see how URLs
    are generated.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中涵盖这些操作，但首先让我们看看URL是如何生成的。
- en: Routing
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由
- en: Setting up all of these URLs and mapping actions to verbs might sound pretty
    complicated, but luckily, Rails routing handles all of this for you. *Routes*
    connect URLs to the code that comprises an application. First, let’s look at the
    most common type of route, the resource route.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 设置所有这些URL并将动作映射到动词听起来可能有点复杂，但幸运的是，Rails路由会为你处理这一切。*路由*将URL连接到组成应用程序的代码。首先，让我们看看最常见的路由类型——资源路由。
- en: Resources
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源
- en: Your application’s routes are stored in the file *config/routes.rb*. Open that
    file in your text editor.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的路由存储在*config/routes.rb*文件中。请在文本编辑器中打开该文件。
- en: 'Ignore all of the comments. Your file should only have three lines right now:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 忽略所有注释。现在，你的文件应该只有三行：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Rails applications use REST by default. The blog application currently has
    only one resource (blog posts), and the single line `resources :posts` builds
    a set of routes for your application. Use the `rake` command to display your application’s
    routes:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Rails应用程序默认使用REST。博客应用目前只有一个资源（博客文章），单行的`resources :posts`为应用程序构建了一组路由。使用`rake`命令来显示应用程序的路由：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This command outputs the route helper prefix, HTTP verb, URL pattern, and controller
    action for each of the seven default RESTful actions.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令输出每个七个默认RESTful操作的路由帮助器前缀、HTTP动词、URL模式和控制器操作。
- en: For example, a GET request to */posts* calls the `PostsController#index` method.
    As you make changes to the routes file, run this command again to see how your
    application’s routes also change.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对*/posts*的GET请求会调用`PostsController#index`方法。当你修改路由文件时，再次运行此命令以查看应用程序的路由如何变化。
- en: Nested Resources
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 嵌套资源
- en: 'When one resource belongs to another resource, you can add it as a *nested
    resource*. In the blog, comments belong to posts. Here’s how you represent that
    in *config/routes.rb*:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个资源属于另一个资源时，可以将其作为*嵌套资源*添加。在博客中，评论属于文章。以下是在*config/routes.rb*中表示这种关系的方式：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Add a block after `resources :posts` with a `do`, `end` pair. Then add `resources
    :comments` inside that block. This tells Rails that comments are only available
    inside of posts.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在`resources :posts`后添加一个`do`、`end`块。然后在该块中添加`resources :comments`。这告诉Rails，评论仅在文章内可用。
- en: Restricted Resources
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 限制资源
- en: 'Adding `resources :comments` as you just saw creates routes for each of the
    seven default RESTful actions for comments. For now, let’s only worry about creating
    new comments. You can restrict the set of routes generated for a resource by adding
    an `only` clause to that resource in *config/routes.rb*:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 像你刚才看到的那样，添加`resources :comments`会为评论创建七个默认RESTful操作的路由。现在，我们只关心创建新的评论。你可以通过在*config/routes.rb*中为该资源添加`only`子句来限制生成的路由集：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, only the comment `create` action is mapped to a URL. You should only provide
    routes to actions that you plan to implement.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只有评论的`create`操作被映射到一个URL。你应该只为计划实现的操作提供路由。
- en: Custom Routes
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义路由
- en: Some actions in your application may not correspond to any of the seven default
    actions. For example, your application may include a `search` action that returns
    a list of posts containing a specific term. In cases such as this, Rails lets
    you manually configure *custom routes*.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用程序中的某些操作可能与七个默认操作不对应。例如，应用程序可能包含一个`search`操作，返回包含特定术语的博客文章列表。在这种情况下，Rails允许你手动配置*自定义路由*。
- en: Custom routes are also useful for mapping old URLs to a new Rails application
    or simplifying URLs for complex actions. For example, imagine your application
    allows users to log in by creating a new session and log out by destroying their
    session. Adding `resources :user_session` creates paths like *user_session/new*.
    If you would rather use different paths, you can create custom routes for *login*
    and *logout.*
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义路由对于将旧的 URL 映射到新的 Rails 应用程序，或简化复杂操作的 URL 也非常有用。例如，假设你的应用程序允许用户通过创建一个新的会话来登录，通过销毁会话来注销。添加
    `resources :user_session` 会创建类似 *user_session/new* 的路径。如果你更愿意使用不同的路径，可以为 *login*
    和 *logout* 创建自定义路由。
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now your application’s login page should be at the path */login*. When a user
    visits the login page, his or her browser sends a GET request for this path. The
    controller displays the login form in response to that GET request. When the user
    submits the form, the browser sends a POST request to the same path with the contents
    of the form. The controller then creates a new session for the user in response
    to the POST request. When the user clicks the log out button, a DELETE request
    to the path */logout* destroys the user’s session.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的应用程序的登录页面应该位于路径 */login*。当用户访问登录页面时，浏览器会发送一个 GET 请求到这个路径。控制器会响应该 GET 请求并显示登录表单。当用户提交表单时，浏览器会向相同的路径发送一个
    POST 请求，并包含表单内容。然后，控制器会响应该 POST 请求并为用户创建一个新的会话。当用户点击注销按钮时，浏览器会向路径 */logout* 发送一个
    DELETE 请求，销毁用户的会话。
- en: We aren’t adding authentication to the blog application, but you can still add
    these routes to *config/routes.rb* if you want to see the routes created. Remove
    them before moving on because accessing a path that doesn’t correspond to a controller
    action results in an error.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有为博客应用程序添加身份验证，但如果你想查看创建的路由，仍然可以将这些路由添加到 *config/routes.rb* 中。如果你不想继续，删除它们，因为访问与控制器动作不对应的路径会导致错误。
- en: The Root Route
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 根路由
- en: 'Finally, let’s create a *root route* so we don’t have to add */posts* to the
    browser’s address bar every time. The root route sets the home page for your application.
    Add `root ''posts#index''` near the end of *config/routes.rb*:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们创建一个 *根路由*，这样我们就不需要每次都在浏览器地址栏中输入 */posts* 了。根路由为你的应用程序设置了首页。在 *config/routes.rb*
    的末尾添加 `root 'posts#index'`：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, accessing your server without a path should display the posts index page.
    You should always include a root route for your application.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在没有路径的情况下访问服务器应该显示文章索引页面。你应该始终为你的应用程序包含一个根路由。
- en: Paths and URLs
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路径和 URL
- en: Adding a route also automatically creates helpers for your controllers and views.
    You can use these helpers, shown in [Table 4-3](ch04.html#rails_path_and_url_helpers
    "Table 4-3. Rails Path and URL Helpers"), instead of manually typing URLs in your
    application. That way, if you decide to change your application’s URLs in the
    future, you won’t have to search for and update all of the old URLs in your code.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 添加路由还会自动为你的控制器和视图创建助手。你可以使用这些助手，参见 [表 4-3](ch04.html#rails_path_and_url_helpers
    "表 4-3. Rails 路径和 URL 助手")，而无需在应用程序中手动输入 URL。这样，如果你将来决定更改应用程序的 URL，就不必在代码中查找并更新所有旧的
    URL。
- en: Table 4-3. Rails Path and URL Helpers
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4-3. Rails 路径和 URL 助手
- en: '| Path Helpers | URL Helpers |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 路径助手 | URL 助手 |'
- en: '| --- | --- |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `posts_path` | `posts_url` |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `posts_path` | `posts_url` |'
- en: '| `new_post_path` | `new_post_url` |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `new_post_path` | `new_post_url` |'
- en: '| `edit_post_path(id)` | `edit_post_url(id)` |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `edit_post_path(id)` | `edit_post_url(id)` |'
- en: '| `post_path(id)` | `post_url(id)` |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `post_path(id)` | `post_url(id)` |'
- en: The *path helpers* include only the path, whereas the *URL helpers* also include
    the protocol, server, and port (if not standard). Rails applications generally
    use path helpers. The URL helpers are useful for situations in which the full
    URL is needed, such as to generate URLs for inclusion in emails.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*路径助手* 仅包含路径，而 *URL 助手* 还包括协议、服务器和端口（如果不是标准的）。Rails 应用程序通常使用路径助手。URL 助手在需要完整
    URL 的情况下非常有用，例如生成用于电子邮件中的 URL。'
- en: The first part of each method name matches the prefix displayed by the `bin/rake
    routes` command.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 每个方法名称的第一部分与 `bin/rake routes` 命令显示的前缀匹配。
- en: 'You can test these helpers in the Rails console like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Rails 控制台中测试这些助手，方法如下：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Testing these helpers is a useful sanity check when working with Rails routes.
    If you forget which helper to use to create a path, you can type it in the console
    to see the result.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Rails 路由时，测试这些助手是一个有用的检查方法。如果你忘记使用哪个助手来创建路径，可以在控制台中输入它以查看结果。
- en: Controller Actions
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器动作
- en: 'The convention in Rails is to have a controller corresponding to each resource.
    That controller includes methods for each action. (Remember the principle from
    [Chapter 2](ch02.html "Chapter 2. Rails Fundamentals"): convention over configuration.)
    The Rails scaffold generator created a controller for posts. Open the file *app/controllers/posts_controller.rb*
    to see the Ruby code behind these methods. I recommend running the Rails server
    as you work your way through the rest of this chapter:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Rails 中的约定是每个资源对应一个控制器。该控制器包含每个动作的方法。（记住[第 2 章](ch02.html "第 2 章。Rails 基础")中的原则：约定优于配置。）Rails
    脚手架生成器为帖子创建了一个控制器。打开文件 *app/controllers/posts_controller.rb*，查看这些方法背后的 Ruby 代码。建议在继续阅读本章的过程中运行
    Rails 服务器：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, let’s look at each controller method in turn, starting with `index` and
    working our way down to `destroy`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们逐个查看每个控制器方法，从 `index` 开始，依次查看 `destroy`。
- en: 'The `index` action retrieves all posts from the database:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`index` 动作从数据库中检索所有帖子：'
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You see the familiar `@post = Post.all` in that method. You may be surprised
    that this is the *only* line of code in the `index` method. By default, Rails
    renders a view file matching the action name, in this case *app/views/posts/index.html.erb*.
    (We’ll discuss views in the next chapter.)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在该方法中看到熟悉的 `@post = Post.all`。你可能会惊讶地发现，这就是 `index` 方法中的*唯一*一行代码。默认情况下，Rails
    会渲染与动作名称匹配的视图文件，在本例中是 *app/views/posts/index.html.erb*。（我们将在下一章讨论视图。）
- en: Go to *http://localhost:3000/posts* in your browser to see the results of the
    `index` action.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中访问 *http://localhost:3000/posts*，查看 `index` 动作的结果。
- en: 'The `show` action retrieves a single post from the database, but the `show`
    method contains no code at all:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`show` 动作从数据库中检索单个帖子，但 `show` 方法本身没有任何代码：'
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This method relies on a Rails `before_action`, which you should see on line
    two of the controller:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法依赖于一个 Rails `before_action`，你应该能在控制器的第二行看到它：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `before_action` is a class method that automatically calls the `set_post`
    method, shown next, before the methods `show`, `edit`, `update`, and `destroy`.
    This eliminates duplicate code in these methods. (Remember DRY: Don’t repeat yourself.)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`before_action` 是一个类方法，它会在 `show`、`edit`、`update` 和 `destroy` 方法之前自动调用 `set_post`
    方法，避免在这些方法中重复代码。（记住 DRY：不要重复自己。）'
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `set_post` method is defined near the bottom of the controller under the
    keyword `private`. It calls the `Post.find` method to retrieve the post with an
    `id` corresponding to a parameter passed to the controller. Parameters are covered
    in more detail in the next section, so for now, let’s continue examining these
    controller methods.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`set_post` 方法在控制器的底部附近定义，并使用 `private` 关键字。它调用 `Post.find` 方法，检索与传递给控制器的参数
    `id` 相对应的帖子。参数将在下一节中更详细地讨论，所以现在我们继续查看这些控制器方法。'
- en: 'The `new` action displays a form for adding a new post:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`new` 动作显示一个表单，用于添加新帖子：'
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The form uses data from a newly created post. Click the *New Post* link at the
    bottom of the post index page to see this form.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 表单使用新创建的帖子的数据。在帖子索引页面底部点击 *新建帖子* 链接，查看此表单。
- en: 'The `edit` action displays a form for editing an existing post. Like the `show`
    method, this method contains no code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`edit` 动作显示一个表单，用于编辑现有的帖子。像 `show` 方法一样，这个方法不包含任何代码：'
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This form uses data retrieved by the `set_post` method discussed previously.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此表单使用之前讨论过的 `set_post` 方法检索的数据。
- en: A Brief Detour from Actions
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动作的简要偏离
- en: Before discussing `create`, `update`, and `destroy`, let’s talk about a few
    key Rails topics that you need to know to understand those methods. In this section,
    we’ll explore parameters, render/redirect, response formats, and the flash.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论 `create`、`update` 和 `destroy` 之前，让我们先了解一些关键的 Rails 主题，这些是理解这些方法所必需的。在本节中，我们将探讨参数、渲染/重定向、响应格式和
    flash。
- en: Parameters
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: '*Parameters* generally represent part of the URL used to request a page or
    values from a form, and they’re accessible in the controller as a hash named `params`.
    For example, the `set_post` method you saw earlier retrieved the `id` of the requested
    post from the `params` hash, like this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*参数* 通常表示用于请求页面或表单值的 URL 部分，它们可以在控制器中作为名为 `params` 的哈希访问。例如，你之前看到的 `set_post`
    方法从 `params` 哈希中检索请求的帖子的 `id`，如下所示：'
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can see the parameters passed with each request in the output from the
    `rails server` command in your terminal. For example, go to *http://localhost:3000/posts/1*
    and then look at the Rails server output in your terminal:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在终端中通过`rails server`命令的输出看到每个请求传递的参数。例如，访问*http://localhost:3000/posts/1*，然后查看终端中Rails服务器的输出：
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this case, the `1` in the URL represents the `id` of the requested post ➊.
    Because we requested a single post, the `show` method is called, and this `id`
    is used to find the post in `set_post`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，URL中的`1`表示请求帖子➊的`id`。因为我们请求的是单个帖子，所以调用`show`方法，并且这个`id`用于在`set_post`中查找帖子。
- en: 'Form data is represented by a nested hash with values. For example, editing
    this post results in a `params` hash more like this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 表单数据由一个嵌套哈希表示，哈希包含值。例如，编辑这个帖子会生成一个更像这样的`params`哈希：
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You still access `params[:id]` ➋ to find the correct post, and you can also
    access `params[:post]` ➊ to see the new values submitted by the user. Because
    these are user-submitted values, you should ensure that your application only
    accepts data for the appropriate attributes. Malicious users could send requests
    with invalid parameters in an attempt to attack your application.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你仍然可以访问`params[:id]` ➋来查找正确的帖子，也可以访问`params[:post]` ➊来查看用户提交的新值。因为这些是用户提交的值，你应确保应用程序仅接受适当属性的数据。恶意用户可能会发送带有无效参数的请求，试图攻击你的应用程序。
- en: 'For blog posts, you only want users to be able to edit the `title` and `body`
    attributes. Rails includes a feature called *Strong Parameters*, which makes specifying
    which attributes your application accepts easy. You can see the feature in action
    in the `post_params` method:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于博客帖子，你只希望用户能够编辑`title`和`body`属性。Rails包括一个名为*强参数*（Strong Parameters）的功能，使得指定应用程序接受哪些属性变得很容易。你可以在`post_params`方法中看到这个功能的实际应用：
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This method first requires the `params` hash to contain a nested hash with
    the key `:post`. It then returns only the permitted values (`:title` and `:body`)
    from this nested hash. Using the earlier example `params` hash, `post_params`
    returns a hash like this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法首先要求`params`哈希包含一个嵌套哈希，键为`:post`。然后，它只返回该嵌套哈希中允许的值（`:title`和`:body`）。使用前面的`params`哈希示例，`post_params`返回一个类似这样的哈希：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Other values in the `params[:post]` hash are silently ignored. Remember, always
    use the `post_params` method when accessing the parameters for a newly created
    or updated post.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`params[:post]`哈希中的其他值会被默默忽略。记住，访问新创建或更新的帖子参数时，始终使用`post_params`方法。'
- en: Render or Redirect
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 渲染或重定向
- en: Every action must either *render* a view or *redirect* to another action. By
    default, an action renders a file matching the action name. For example, the `show`
    method in the posts controller looks for a file named *app/views/posts/show.html.erb*
    and uses that file to build the HTML response that is sent back to the user.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 每个动作必须*渲染*一个视图或*重定向*到另一个动作。默认情况下，动作会渲染与动作名称匹配的文件。例如，帖子控制器中的`show`方法会查找一个名为*app/views/posts/show.html.erb*的文件，并使用该文件构建返回给用户的HTML响应。
- en: 'You can tell Rails to render the response for a different action with the `render`
    method like this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过`render`方法告诉Rails渲染不同动作的响应，方式如下：
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The ability to specify actions is helpful if you need to render a different
    view based on user input. This example is from the `update` method. If the post
    could not be updated with the data provided by the user, this method renders the
    `edit` view again, giving the user a chance to correct the data.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 指定动作的能力在需要根据用户输入呈现不同视图时非常有用。这个例子来自`update`方法。如果帖子无法使用用户提供的数据更新，该方法会重新渲染`edit`视图，给用户一个机会来修正数据。
- en: 'Sometimes you need to send the user to a page other than the one he or she
    requested. Use the `redirect_to` method to take care of this. For example, if
    the user enters valid data while creating or updating a post, the controller action
    redirects the user to that post:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你需要将用户重定向到他或她请求之外的页面。使用`redirect_to`方法来处理这种情况。例如，如果用户在创建或更新帖子时输入了有效数据，控制器动作会将用户重定向到该帖子：
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: When you call `redirect_to`, the address in the user’s browser changes to reflect
    the new page, and another request is made. You can see this by watching the address
    bar as you submit form data and by looking at the output from `rails server` in
    your terminal.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调用`redirect_to`时，用户浏览器中的地址会更改，以反映新页面，并且会发出另一个请求。你可以通过提交表单数据时观察地址栏并查看终端中`rails
    server`的输出来看到这一点。
- en: To see this in action, first go to *http://localhost:3000/posts/new* in your
    browser. This is the new post form. Enter a title for the new post, and then click
    the *Create Post* button. Watch the address bar closely after clicking the button.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看此功能，首先在浏览器中访问*http://localhost:3000/posts/new*。这是新建文章的表单。输入新文章的标题，然后点击*创建文章*按钮。点击按钮后请密切关注地址栏。
- en: The form makes a POST request to *http://localhost:3000/posts*. This request
    is routed to the `create` method. After creating the post, you are redirected
    to *http://localhost:3000/posts/3*, assuming that your new post has an `id` of
    3\. The address is changed automatically by the `redirect_to` method.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 表单向*http://localhost:3000/posts*发起POST请求。该请求会被路由到`create`方法。创建完文章后，你会被重定向到*http://localhost:3000/posts/3*，假设你的新文章的`id`是3。地址会通过`redirect_to`方法自动更改。
- en: Response Formats
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 响应格式
- en: Rails can generate responses in several formats, though all I’ve discussed so
    far is HTML. Scaffold-generated controllers can also include JavaScript Object
    Notation (JSON) responses, which are useful for creating application programming
    interfaces (APIs). Other formats include XML and even PDF.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Rails可以生成多种格式的响应，尽管到目前为止我们讨论的都是HTML格式。通过脚手架生成的控制器也可以包含JavaScript对象表示法（JSON）响应，这对于创建应用程序编程接口（API）非常有用。其他格式包括XML甚至PDF。
- en: 'You can try another response type in your web browser by visiting this URL:
    *http://localhost:3000/posts.json*. This URL is the same as the posts index URL
    used earlier, except it has *.json* added to the end. Rails recognizes this as
    a JSON request and renders the collection of posts as JSON, as in [Figure 4-1](ch04.html#posts_in_json_format
    "Figure 4-1. Posts in JSON format").'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过访问这个网址来尝试另一种响应类型：*http://localhost:3000/posts.json*。这个网址与之前使用的文章索引网址相同，只不过末尾加了*.json*。Rails会识别这是一个JSON请求，并将文章集合以JSON格式呈现，如[图4-1](ch04.html#posts_in_json_format
    "图4-1. 文章以JSON格式呈现")所示。
- en: '![Posts in JSON format](httpatomoreillycomsourcenostarchimages2169064.png.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![以JSON格式呈现的文章](httpatomoreillycomsourcenostarchimages2169064.png.jpg)'
- en: Figure 4-1. Posts in JSON format
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-1. 文章以JSON格式呈现
- en: 'You specify the formats an action accepts and the responses to each format
    with a call to the `respond_to` method. This method accepts a block with a single
    parameter representing the requested format. Here is an example from the `destroy`
    method:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过调用`respond_to`方法指定一个操作接受的格式以及每种格式的响应。这个方法接受一个块，块中有一个表示请求格式的单一参数。以下是`destroy`方法中的示例：
- en: '[PRE21]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This method is called right after a post is destroyed. If the client requests
    HTML data, this block redirects to `posts_url`, the index page. If the client
    requests JSON data, by adding *.json* to the end of the URL, this block responds
    with an empty header to indicate the post no longer exists.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法在文章被销毁后立即调用。如果客户端请求HTML数据，这个代码块会重定向到`posts_url`，即索引页面。如果客户端请求JSON数据，添加*.json*到URL末尾，这个代码块会返回一个空的头部，表示该文章已不存在。
- en: The Flash
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 闪存
- en: '*Flash messages* are alerts to the user that are only valid for a single request.
    Flash messages are stored in the user’s session, typically in a cookie. They are
    usually styled differently to stand out. For example, the stylesheet included
    with Rails scaffolding uses green text for flash messages.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*闪存消息*是向用户发送的提示信息，仅在单次请求中有效。闪存消息通常存储在用户的会话中，通常是一个cookie。它们通常使用不同的样式以便突出显示。例如，Rails脚手架附带的样式表使用绿色文字来显示闪存消息。'
- en: 'Flash messages are helpful for sending error messages or other notifications
    to the user. They are generally set on a redirect. Here’s an example from the
    `create` method in the posts controller:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 闪存消息对于向用户发送错误信息或其他通知非常有用。它们通常在重定向时设置。以下是来自文章控制器`create`方法的示例：
- en: '[PRE22]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: When a post is successfully created, the user is redirected to the new post
    and a flash message like the one in [Figure 4-2](ch04.html#flash_message "Figure 4-2. A
    flash message") is shown.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当文章创建成功后，用户会被重定向到新文章页面，并显示类似[图4-2](ch04.html#flash_message "图4-2. 一条闪存消息")中的闪存消息。
- en: '![A flash message](httpatomoreillycomsourcenostarchimages2169066.png.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![一条闪存消息](httpatomoreillycomsourcenostarchimages2169066.png.jpg)'
- en: Figure 4-2. A flash message
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-2. 一条闪存消息
- en: The `create` flash message is the green text, and it matches the message added
    earlier.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`create`闪存消息是绿色文字，且与之前添加的消息相匹配。'
- en: Back to Controller Actions
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 返回控制器操作
- en: Now you should know everything you need to understand the `create`, `update`,
    and `destroy` actions. The methods written by the scaffold generator respond to
    requests for both HTML and JSON data with messages indicating success or errors,
    but let’s focus on the HTML responses for now. I’ll cover JSON responses in depth
    when I talk about building your own APIs.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该了解了足够的信息，能够理解 `create`、`update` 和 `destroy` 动作。由 scaffolding 生成的这些方法响应
    HTML 和 JSON 数据的请求，并返回指示成功或错误的消息，但现在我们先专注于 HTML 响应。关于 JSON 响应的内容，我将在讲解如何构建你自己的
    API 时详细讨论。
- en: Note
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*The formatting in each method has been adjusted slightly to better fit this
    page.*'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '*每个方法中的格式已稍作调整，以更好地适应此页面。*'
- en: 'The `create` method is responsible for creating a post using the `params` from
    the new post form:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`create` 方法负责使用新帖子表单中的 `params` 来创建一个帖子：'
- en: '[PRE23]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The first line of the method `@post = Post.new(post_params)` uses Strong Parameters
    to ensure only the accepted parameters are allowed into the call to `new`. Inside
    the `respond_to` block, the return value of `@post.save` is checked. If it’s `true`,
    then the user is redirected to the newly created post. If it is `false`, then
    the `new` action is rendered again so the user can correct any errors.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 方法的第一行 `@post = Post.new(post_params)` 使用强参数来确保只有允许的参数能够传递给 `new`。在 `respond_to`
    块内部，检查 `@post.save` 的返回值。如果返回 `true`，则用户将被重定向到新创建的帖子；如果返回 `false`，则重新渲染 `new`
    动作，用户可以修正任何错误。
- en: The `update` method is similar to the `create` method. The main difference is
    that the code checks the return value of `@post.update` instead of `@post.save`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`update` 方法与 `create` 方法类似，主要区别在于代码检查的是 `@post.update` 的返回值，而不是 `@post.save`。'
- en: '[PRE24]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If `@post.update` returns `true`, the code redirects the user to the updated
    post; otherwise, it renders the edit form so the user can correct the errors.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `@post.update` 返回 `true`，代码将重定向用户到更新后的帖子；否则，它将重新渲染编辑表单，以便用户修正错误。
- en: The `destroy` method is simpler than the `create` and `update` methods because
    it doesn’t check the return value of `@post.destroy`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`destroy` 方法比 `create` 和 `update` 方法更简单，因为它不检查 `@post.destroy` 的返回值。'
- en: '[PRE25]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: After the post is destroyed, the code redirects the user back to the index page,
    `posts_url`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在帖子被销毁后，代码会将用户重定向回索引页面 `posts_url`。
- en: Adding Comments
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加评论
- en: You added a route to the `create` comment action earlier, so now let’s add a
    simple controller for that action. You’ll add the form for entering new comments
    in the next chapter.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 你之前已经为 `create` 评论动作添加了一个路由，现在让我们为这个动作添加一个简单的控制器。你将在下一章中添加用于输入新评论的表单。
- en: 'Generate a new controller for comments using the Rails generator:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Rails 生成器生成一个新的评论控制器：
- en: '[PRE26]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Note that I specified only a controller, not scaffolding. This code generates
    an empty controller ➊ and an empty *views* directory ➋, as well as files for helpers,
    tests, and assets. We’ll have to fill in the details ourselves. Start by opening
    the file *app/controllers/comments_controller.rb* in your editor:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我只指定了控制器，而不是 scaffolding。这段代码会生成一个空的控制器 ➊ 和一个空的 *views* 目录 ➋，同时还会生成 helpers、tests
    和 assets 的文件。我们需要自己填充细节。首先打开编辑器中的文件 *app/controllers/comments_controller.rb*：
- en: '[PRE27]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Because you’re implementing the `create` action, the first thing you need is
    a `create` method. You can model it after the `create` method in the posts controller.
    Assume that users won’t be adding comments via an API, so it isn’t necessary to
    generate JSON responses.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你正在实现 `create` 动作，首先需要一个 `create` 方法。你可以将其模仿为帖子控制器中的 `create` 方法。假设用户不会通过
    API 添加评论，因此不需要生成 JSON 响应。
- en: '[PRE28]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This code first finds the correct post ➊ using the `post_id` in the `params`
    hash. It then uses the `comments` association to create a new comment ➋ and redirects
    back to the post ➌. Each call to `redirect_to` sets a flash message to indicate
    success or failure.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码首先使用 `params` 哈希中的 `post_id` 查找正确的帖子 ➊。然后，利用 `comments` 关联来创建一个新的评论 ➋，并重定向回该帖子
    ➌。每次调用 `redirect_to` 都会设置一个闪存消息以指示成功或失败。
- en: Because you’re using Strong Parameters in your application, you also need to
    add the `comment_params` method to specify the parameters you want to accept.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你在应用程序中使用了强参数，你还需要添加 `comment_params` 方法以指定你希望接受的参数。
- en: '[PRE29]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In the case of comments, you only accept an `author` and a `body`. Any other
    parameters are ignored. In the next chapter, you’ll update the post `show` view
    to display existing comments and include a form for creating new comments.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 对于评论，你只接受 `author` 和 `body`。其他参数会被忽略。在下一章，你将更新帖子 `show` 视图以显示现有评论，并包括一个用于创建新评论的表单。
- en: Summary
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter introduced many important Rails concepts—REST, routing, and controllers.
    I also discussed parameters, render versus redirect, response formats, and the
    flash.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了许多重要的Rails概念——REST、路由和控制器。我还讨论了参数、渲染与重定向、响应格式以及闪存。
- en: 'We started at the database in the last chapter and worked our way forward in
    this chapter. In the next chapter, we’ll get all the way to the user and cover
    the last piece of the MVC puzzle: views.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章从数据库开始，在本章逐步向前推进。在下一章，我们将深入到用户部分，覆盖MVC的最后一块拼图：视图。
- en: Exercises
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: '| Q: | 1\. Good error messages are important for any application. If something
    goes wrong, your users need to know what the problem is and how to correct it.
    Currently, if a comment can’t be created, users see the message “Error creating
    comment.” Update the `CommentsController create` method to also show a list of
    error messages in the alert. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| 问题： | 1\. 良好的错误信息对于任何应用程序都至关重要。如果出现问题，用户需要知道问题所在以及如何修正。目前，如果评论无法创建，用户会看到“创建评论时出错”这一消息。请更新`CommentsController
    create`方法，确保在警告框中也能显示错误消息列表。 |'
- en: '| Q: | 2\. In Exercise 1 at the end of [Chapter 3](ch03.html "Chapter 3. Models"),
    you added an `email` field to the `Comment` model. Update the `comment_params`
    method in `CommentsController` to also accept this field. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| 问题： | 2\. 在[第3章](ch03.html "第3章. 模型")的练习1中，你向`Comment`模型添加了一个`email`字段。请更新`CommentsController`中的`comment_params`方法，使其也能够接收这个字段。
    |'
