- en: Chapter 4. Controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rails *controllers* connect your application’s models and views. Any web requests
    that your application receives are routed to the appropriate controller. The controller
    gets data from the model and then renders the appropriate view or redirects to
    a different location.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we continue working on our blog. Along the way, you’ll learn
    about controllers in detail. I’ll cover resource representation with REST, routing
    resources, and the types of actions a controller can take.
  prefs: []
  type: TYPE_NORMAL
- en: Representational State Transfer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Representational State Transfer*, or *REST*, is a client-server software architecture
    introduced in 2000 by Dr. Roy Fielding, one of the authors of the HTTP specification.
    REST deals with the representation of resources, and in Rails, resources correspond
    to models. In RESTful architectures, clients initiate requests to servers. Servers
    process those requests and return responses to the clients. In a Rails application,
    the server that processes requests and returns responses is the controller. The
    controller interacts with the client through a collection of common URLs and HTTP
    verbs.'
  prefs: []
  type: TYPE_NORMAL
- en: You’re probably already familiar with at least two of these HTTP verbs. A request
    for a web page is sometimes called a *GET* request. A GET request doesn’t change
    the state of the application; it simply returns data. When you submit form data
    on a web page, the result is usually a *POST* request. In an application using
    REST, a POST request is used to create a record on the server.
  prefs: []
  type: TYPE_NORMAL
- en: During our discussion of models in the last chapter, you learned about CRUD
    (create, read, update, and delete). REST uses the four HTTP verbs in [Table 4-1](ch04.html#mapping_database_actions_to_http_verbs
    "Table 4-1. Mapping Database Actions to HTTP Verbs"), which correspond to each
    of those actions.
  prefs: []
  type: TYPE_NORMAL
- en: Table 4-1. Mapping Database Actions to HTTP Verbs
  prefs: []
  type: TYPE_NORMAL
- en: '| Database Action | HTTP Verb |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Create` | POST |'
  prefs: []
  type: TYPE_TB
- en: '| `Read` | GET |'
  prefs: []
  type: TYPE_TB
- en: '| `Update` | PATCH |'
  prefs: []
  type: TYPE_TB
- en: '| `Delete` | DELETE |'
  prefs: []
  type: TYPE_TB
- en: Your application determines how to handle a request based on the HTTP verb used.
    A GET request for a resource returns the data from the corresponding model; a
    PATCH request updates the model with new information; and a DELETE request destroys
    the model. All three of these actions use the same URL. Only the HTTP verb is
    different.
  prefs: []
  type: TYPE_NORMAL
- en: Rails applications add three more actions in addition to the four CRUD actions
    in [Table 4-1](ch04.html#mapping_database_actions_to_http_verbs "Table 4-1. Mapping
    Database Actions to HTTP Verbs"). The `index` action displays a list of all resources;
    the `new` action displays a form for creating a new resource; and the `edit` action
    displays a form for editing an existing resource.
  prefs: []
  type: TYPE_NORMAL
- en: Each of these actions has a corresponding method in a Rails controller. These
    seven methods are summarized in [Table 4-2](ch04.html#default_restful_actions
    "Table 4-2. Default RESTful Actions").
  prefs: []
  type: TYPE_NORMAL
- en: Table 4-2. Default RESTful Actions
  prefs: []
  type: TYPE_NORMAL
- en: '| Action | Description | HTTP Verb |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `index` | List all records | GET |'
  prefs: []
  type: TYPE_TB
- en: '| `show` | Show one record | GET |'
  prefs: []
  type: TYPE_TB
- en: '| `new` | Show form to create a record | GET |'
  prefs: []
  type: TYPE_TB
- en: '| `edit` | Show form to edit a record | GET |'
  prefs: []
  type: TYPE_TB
- en: '| `create` | Create a new record | POST |'
  prefs: []
  type: TYPE_TB
- en: '| `update` | Update an existing record | PATCH |'
  prefs: []
  type: TYPE_TB
- en: '| `destroy` | Delete a record | DELETE |'
  prefs: []
  type: TYPE_TB
- en: We’ll cover each of these actions in this chapter, but first let’s see how URLs
    are generated.
  prefs: []
  type: TYPE_NORMAL
- en: Routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting up all of these URLs and mapping actions to verbs might sound pretty
    complicated, but luckily, Rails routing handles all of this for you. *Routes*
    connect URLs to the code that comprises an application. First, let’s look at the
    most common type of route, the resource route.
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your application’s routes are stored in the file *config/routes.rb*. Open that
    file in your text editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ignore all of the comments. Your file should only have three lines right now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Rails applications use REST by default. The blog application currently has
    only one resource (blog posts), and the single line `resources :posts` builds
    a set of routes for your application. Use the `rake` command to display your application’s
    routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This command outputs the route helper prefix, HTTP verb, URL pattern, and controller
    action for each of the seven default RESTful actions.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a GET request to */posts* calls the `PostsController#index` method.
    As you make changes to the routes file, run this command again to see how your
    application’s routes also change.
  prefs: []
  type: TYPE_NORMAL
- en: Nested Resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When one resource belongs to another resource, you can add it as a *nested
    resource*. In the blog, comments belong to posts. Here’s how you represent that
    in *config/routes.rb*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Add a block after `resources :posts` with a `do`, `end` pair. Then add `resources
    :comments` inside that block. This tells Rails that comments are only available
    inside of posts.
  prefs: []
  type: TYPE_NORMAL
- en: Restricted Resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Adding `resources :comments` as you just saw creates routes for each of the
    seven default RESTful actions for comments. For now, let’s only worry about creating
    new comments. You can restrict the set of routes generated for a resource by adding
    an `only` clause to that resource in *config/routes.rb*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, only the comment `create` action is mapped to a URL. You should only provide
    routes to actions that you plan to implement.
  prefs: []
  type: TYPE_NORMAL
- en: Custom Routes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some actions in your application may not correspond to any of the seven default
    actions. For example, your application may include a `search` action that returns
    a list of posts containing a specific term. In cases such as this, Rails lets
    you manually configure *custom routes*.
  prefs: []
  type: TYPE_NORMAL
- en: Custom routes are also useful for mapping old URLs to a new Rails application
    or simplifying URLs for complex actions. For example, imagine your application
    allows users to log in by creating a new session and log out by destroying their
    session. Adding `resources :user_session` creates paths like *user_session/new*.
    If you would rather use different paths, you can create custom routes for *login*
    and *logout.*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now your application’s login page should be at the path */login*. When a user
    visits the login page, his or her browser sends a GET request for this path. The
    controller displays the login form in response to that GET request. When the user
    submits the form, the browser sends a POST request to the same path with the contents
    of the form. The controller then creates a new session for the user in response
    to the POST request. When the user clicks the log out button, a DELETE request
    to the path */logout* destroys the user’s session.
  prefs: []
  type: TYPE_NORMAL
- en: We aren’t adding authentication to the blog application, but you can still add
    these routes to *config/routes.rb* if you want to see the routes created. Remove
    them before moving on because accessing a path that doesn’t correspond to a controller
    action results in an error.
  prefs: []
  type: TYPE_NORMAL
- en: The Root Route
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, let’s create a *root route* so we don’t have to add */posts* to the
    browser’s address bar every time. The root route sets the home page for your application.
    Add `root ''posts#index''` near the end of *config/routes.rb*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now, accessing your server without a path should display the posts index page.
    You should always include a root route for your application.
  prefs: []
  type: TYPE_NORMAL
- en: Paths and URLs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding a route also automatically creates helpers for your controllers and views.
    You can use these helpers, shown in [Table 4-3](ch04.html#rails_path_and_url_helpers
    "Table 4-3. Rails Path and URL Helpers"), instead of manually typing URLs in your
    application. That way, if you decide to change your application’s URLs in the
    future, you won’t have to search for and update all of the old URLs in your code.
  prefs: []
  type: TYPE_NORMAL
- en: Table 4-3. Rails Path and URL Helpers
  prefs: []
  type: TYPE_NORMAL
- en: '| Path Helpers | URL Helpers |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `posts_path` | `posts_url` |'
  prefs: []
  type: TYPE_TB
- en: '| `new_post_path` | `new_post_url` |'
  prefs: []
  type: TYPE_TB
- en: '| `edit_post_path(id)` | `edit_post_url(id)` |'
  prefs: []
  type: TYPE_TB
- en: '| `post_path(id)` | `post_url(id)` |'
  prefs: []
  type: TYPE_TB
- en: The *path helpers* include only the path, whereas the *URL helpers* also include
    the protocol, server, and port (if not standard). Rails applications generally
    use path helpers. The URL helpers are useful for situations in which the full
    URL is needed, such as to generate URLs for inclusion in emails.
  prefs: []
  type: TYPE_NORMAL
- en: The first part of each method name matches the prefix displayed by the `bin/rake
    routes` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can test these helpers in the Rails console like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Testing these helpers is a useful sanity check when working with Rails routes.
    If you forget which helper to use to create a path, you can type it in the console
    to see the result.
  prefs: []
  type: TYPE_NORMAL
- en: Controller Actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The convention in Rails is to have a controller corresponding to each resource.
    That controller includes methods for each action. (Remember the principle from
    [Chapter 2](ch02.html "Chapter 2. Rails Fundamentals"): convention over configuration.)
    The Rails scaffold generator created a controller for posts. Open the file *app/controllers/posts_controller.rb*
    to see the Ruby code behind these methods. I recommend running the Rails server
    as you work your way through the rest of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now, let’s look at each controller method in turn, starting with `index` and
    working our way down to `destroy`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `index` action retrieves all posts from the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You see the familiar `@post = Post.all` in that method. You may be surprised
    that this is the *only* line of code in the `index` method. By default, Rails
    renders a view file matching the action name, in this case *app/views/posts/index.html.erb*.
    (We’ll discuss views in the next chapter.)
  prefs: []
  type: TYPE_NORMAL
- en: Go to *http://localhost:3000/posts* in your browser to see the results of the
    `index` action.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `show` action retrieves a single post from the database, but the `show`
    method contains no code at all:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This method relies on a Rails `before_action`, which you should see on line
    two of the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `before_action` is a class method that automatically calls the `set_post`
    method, shown next, before the methods `show`, `edit`, `update`, and `destroy`.
    This eliminates duplicate code in these methods. (Remember DRY: Don’t repeat yourself.)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `set_post` method is defined near the bottom of the controller under the
    keyword `private`. It calls the `Post.find` method to retrieve the post with an
    `id` corresponding to a parameter passed to the controller. Parameters are covered
    in more detail in the next section, so for now, let’s continue examining these
    controller methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `new` action displays a form for adding a new post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The form uses data from a newly created post. Click the *New Post* link at the
    bottom of the post index page to see this form.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `edit` action displays a form for editing an existing post. Like the `show`
    method, this method contains no code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This form uses data retrieved by the `set_post` method discussed previously.
  prefs: []
  type: TYPE_NORMAL
- en: A Brief Detour from Actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before discussing `create`, `update`, and `destroy`, let’s talk about a few
    key Rails topics that you need to know to understand those methods. In this section,
    we’ll explore parameters, render/redirect, response formats, and the flash.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Parameters* generally represent part of the URL used to request a page or
    values from a form, and they’re accessible in the controller as a hash named `params`.
    For example, the `set_post` method you saw earlier retrieved the `id` of the requested
    post from the `params` hash, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the parameters passed with each request in the output from the
    `rails server` command in your terminal. For example, go to *http://localhost:3000/posts/1*
    and then look at the Rails server output in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the `1` in the URL represents the `id` of the requested post ➊.
    Because we requested a single post, the `show` method is called, and this `id`
    is used to find the post in `set_post`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Form data is represented by a nested hash with values. For example, editing
    this post results in a `params` hash more like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You still access `params[:id]` ➋ to find the correct post, and you can also
    access `params[:post]` ➊ to see the new values submitted by the user. Because
    these are user-submitted values, you should ensure that your application only
    accepts data for the appropriate attributes. Malicious users could send requests
    with invalid parameters in an attempt to attack your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'For blog posts, you only want users to be able to edit the `title` and `body`
    attributes. Rails includes a feature called *Strong Parameters*, which makes specifying
    which attributes your application accepts easy. You can see the feature in action
    in the `post_params` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This method first requires the `params` hash to contain a nested hash with
    the key `:post`. It then returns only the permitted values (`:title` and `:body`)
    from this nested hash. Using the earlier example `params` hash, `post_params`
    returns a hash like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Other values in the `params[:post]` hash are silently ignored. Remember, always
    use the `post_params` method when accessing the parameters for a newly created
    or updated post.
  prefs: []
  type: TYPE_NORMAL
- en: Render or Redirect
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Every action must either *render* a view or *redirect* to another action. By
    default, an action renders a file matching the action name. For example, the `show`
    method in the posts controller looks for a file named *app/views/posts/show.html.erb*
    and uses that file to build the HTML response that is sent back to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can tell Rails to render the response for a different action with the `render`
    method like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The ability to specify actions is helpful if you need to render a different
    view based on user input. This example is from the `update` method. If the post
    could not be updated with the data provided by the user, this method renders the
    `edit` view again, giving the user a chance to correct the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes you need to send the user to a page other than the one he or she
    requested. Use the `redirect_to` method to take care of this. For example, if
    the user enters valid data while creating or updating a post, the controller action
    redirects the user to that post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: When you call `redirect_to`, the address in the user’s browser changes to reflect
    the new page, and another request is made. You can see this by watching the address
    bar as you submit form data and by looking at the output from `rails server` in
    your terminal.
  prefs: []
  type: TYPE_NORMAL
- en: To see this in action, first go to *http://localhost:3000/posts/new* in your
    browser. This is the new post form. Enter a title for the new post, and then click
    the *Create Post* button. Watch the address bar closely after clicking the button.
  prefs: []
  type: TYPE_NORMAL
- en: The form makes a POST request to *http://localhost:3000/posts*. This request
    is routed to the `create` method. After creating the post, you are redirected
    to *http://localhost:3000/posts/3*, assuming that your new post has an `id` of
    3\. The address is changed automatically by the `redirect_to` method.
  prefs: []
  type: TYPE_NORMAL
- en: Response Formats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Rails can generate responses in several formats, though all I’ve discussed so
    far is HTML. Scaffold-generated controllers can also include JavaScript Object
    Notation (JSON) responses, which are useful for creating application programming
    interfaces (APIs). Other formats include XML and even PDF.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can try another response type in your web browser by visiting this URL:
    *http://localhost:3000/posts.json*. This URL is the same as the posts index URL
    used earlier, except it has *.json* added to the end. Rails recognizes this as
    a JSON request and renders the collection of posts as JSON, as in [Figure 4-1](ch04.html#posts_in_json_format
    "Figure 4-1. Posts in JSON format").'
  prefs: []
  type: TYPE_NORMAL
- en: '![Posts in JSON format](httpatomoreillycomsourcenostarchimages2169064.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-1. Posts in JSON format
  prefs: []
  type: TYPE_NORMAL
- en: 'You specify the formats an action accepts and the responses to each format
    with a call to the `respond_to` method. This method accepts a block with a single
    parameter representing the requested format. Here is an example from the `destroy`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This method is called right after a post is destroyed. If the client requests
    HTML data, this block redirects to `posts_url`, the index page. If the client
    requests JSON data, by adding *.json* to the end of the URL, this block responds
    with an empty header to indicate the post no longer exists.
  prefs: []
  type: TYPE_NORMAL
- en: The Flash
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Flash messages* are alerts to the user that are only valid for a single request.
    Flash messages are stored in the user’s session, typically in a cookie. They are
    usually styled differently to stand out. For example, the stylesheet included
    with Rails scaffolding uses green text for flash messages.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Flash messages are helpful for sending error messages or other notifications
    to the user. They are generally set on a redirect. Here’s an example from the
    `create` method in the posts controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: When a post is successfully created, the user is redirected to the new post
    and a flash message like the one in [Figure 4-2](ch04.html#flash_message "Figure 4-2. A
    flash message") is shown.
  prefs: []
  type: TYPE_NORMAL
- en: '![A flash message](httpatomoreillycomsourcenostarchimages2169066.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-2. A flash message
  prefs: []
  type: TYPE_NORMAL
- en: The `create` flash message is the green text, and it matches the message added
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Back to Controller Actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now you should know everything you need to understand the `create`, `update`,
    and `destroy` actions. The methods written by the scaffold generator respond to
    requests for both HTML and JSON data with messages indicating success or errors,
    but let’s focus on the HTML responses for now. I’ll cover JSON responses in depth
    when I talk about building your own APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*The formatting in each method has been adjusted slightly to better fit this
    page.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `create` method is responsible for creating a post using the `params` from
    the new post form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The first line of the method `@post = Post.new(post_params)` uses Strong Parameters
    to ensure only the accepted parameters are allowed into the call to `new`. Inside
    the `respond_to` block, the return value of `@post.save` is checked. If it’s `true`,
    then the user is redirected to the newly created post. If it is `false`, then
    the `new` action is rendered again so the user can correct any errors.
  prefs: []
  type: TYPE_NORMAL
- en: The `update` method is similar to the `create` method. The main difference is
    that the code checks the return value of `@post.update` instead of `@post.save`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: If `@post.update` returns `true`, the code redirects the user to the updated
    post; otherwise, it renders the edit form so the user can correct the errors.
  prefs: []
  type: TYPE_NORMAL
- en: The `destroy` method is simpler than the `create` and `update` methods because
    it doesn’t check the return value of `@post.destroy`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: After the post is destroyed, the code redirects the user back to the index page,
    `posts_url`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You added a route to the `create` comment action earlier, so now let’s add a
    simple controller for that action. You’ll add the form for entering new comments
    in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate a new controller for comments using the Rails generator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that I specified only a controller, not scaffolding. This code generates
    an empty controller ➊ and an empty *views* directory ➋, as well as files for helpers,
    tests, and assets. We’ll have to fill in the details ourselves. Start by opening
    the file *app/controllers/comments_controller.rb* in your editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Because you’re implementing the `create` action, the first thing you need is
    a `create` method. You can model it after the `create` method in the posts controller.
    Assume that users won’t be adding comments via an API, so it isn’t necessary to
    generate JSON responses.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This code first finds the correct post ➊ using the `post_id` in the `params`
    hash. It then uses the `comments` association to create a new comment ➋ and redirects
    back to the post ➌. Each call to `redirect_to` sets a flash message to indicate
    success or failure.
  prefs: []
  type: TYPE_NORMAL
- en: Because you’re using Strong Parameters in your application, you also need to
    add the `comment_params` method to specify the parameters you want to accept.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: In the case of comments, you only accept an `author` and a `body`. Any other
    parameters are ignored. In the next chapter, you’ll update the post `show` view
    to display existing comments and include a form for creating new comments.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduced many important Rails concepts—REST, routing, and controllers.
    I also discussed parameters, render versus redirect, response formats, and the
    flash.
  prefs: []
  type: TYPE_NORMAL
- en: 'We started at the database in the last chapter and worked our way forward in
    this chapter. In the next chapter, we’ll get all the way to the user and cover
    the last piece of the MVC puzzle: views.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| Q: | 1\. Good error messages are important for any application. If something
    goes wrong, your users need to know what the problem is and how to correct it.
    Currently, if a comment can’t be created, users see the message “Error creating
    comment.” Update the `CommentsController create` method to also show a list of
    error messages in the alert. |'
  prefs: []
  type: TYPE_TB
- en: '| Q: | 2\. In Exercise 1 at the end of [Chapter 3](ch03.html "Chapter 3. Models"),
    you added an `email` field to the `Comment` model. Update the `comment_params`
    method in `CommentsController` to also accept this field. |'
  prefs: []
  type: TYPE_TB
