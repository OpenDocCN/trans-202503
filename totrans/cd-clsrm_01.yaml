- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Making Sense of the Computer Science Standards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, we’ll explore fun and engaging ways of teaching computer
    science to K–12 students. Although having fun is key to engaging students with
    the content, we need to make sure we’re teaching students the core concepts that
    will prepare them for college and the professional world so they can thrive in
    the Information Age.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter reviews and summarizes the different computer science standards
    adopted in the United States and by international educational organizations, such
    as the Computer Science Teachers Association (CSTA). To make sense of the many
    computer science standards, the concepts are grouped into four easy-to-remember
    domains. Use these guidelines to craft lessons for your students that blend existing
    subject matter with computer science concepts to enrich each student’s learning
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that debate continues over the value of teaching computer science
    standards in public schools. In fact, numerous headlines in the media question
    whether coding is the new literacy. In response, Jeff Attwood, co-founder of Stack
    Overflow, a forum for finding solutions to almost any programming problem, argues
    that computer science shouldn’t be taught in schools because it’s not so much
    an intellectual discipline as it is a vocational skill, like being an auto mechanic.
  prefs: []
  type: TYPE_NORMAL
- en: We can see this purely utilitarian view of computer science reflected in previous
    attempts to bring information technologies into schools. For example, technology
    purchases, like computer labs, are based on the productivity enhancements the
    technology is believed to provide, such as training software and spreadsheets,
    rather than understanding the technology and its implications. Fortunately, recent
    developments in computer science education are making computer science a broad,
    culturally rich discipline that extends far beyond writing code.
  prefs: []
  type: TYPE_NORMAL
- en: Computer Science Standards in K–12 Schools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Computer science infuses every aspect of our lives in the Information Age, but
    progress bringing it into our classrooms has been slow. Unfortunately, many students
    aren’t getting the exposure they need to computer science concepts that can help
    them succeed in the modern professional world.
  prefs: []
  type: TYPE_NORMAL
- en: 'In 2010, the Association for Computing Machinery (ACM) released an exhaustive
    report, *Running on Empty: The Failure to Teach K-12 Computer Science in the Digital
    Age,* on how US states were incorporating computer science standards in the classroom.
    It was disheartening. Only nine states allowed computer science courses to count
    toward graduation credit, and only 14 states had adopted computer science instruction
    to a significant degree.'
  prefs: []
  type: TYPE_NORMAL
- en: In addition, computer science curricula focused primarily on computing skills
    rather than foundational concepts. In other words, schools were relegating computer
    science to a vocational skill instead of a broader discipline that teaches valuable
    concepts, such as computational thinking, information systems, and digital citizenship.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, an April 2013 joint report by Informatics Europe and the ACM Europe
    Working Group on Informatics*Education,* *Informatics education: Europe cannot
    afford to miss the boat,* stressed the need for European citizens to be educated
    in *digital literacy*, fluency with computers and the internet, and *informatics*,
    the science of information technology (similar to computer science but more focused
    on information than digital computation). Failure to clearly define an informatics
    curriculum, provide teacher training, and offer students obligatory classes in
    the subject, the report argued, harmed students by failing to prepare them for
    the modern workforce. It also put the European economy at risk of falling behind
    more competitive countries.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, institutions are creating standards to more meaningfully integrate
    computer science into the curriculum. In the following subsections, we’ll look
    at some example standards educators can learn from: the K–12 Computer Science
    Framework ([*https://k12cs.org/*](https://k12cs.org/)), the CSTA K–12 Computer
    Science Standards ([*https://www.csteachers.org /page/standards*](https://www.csteachers.org/page/standards)*/*),
    and the International Society for Technology in Education’s (ISTE) role-based
    standards ([*https://www.iste.org/standards*](https://www.iste.org/standards)*/*).
    Additionally, we’ll look at the Nevada ([*http://www.doe.nv.gov/Nevada_Academic_Standards/Computer_Science*](http://www.doe.nv.gov/Nevada_Academic_Standards/Computer_Science)*/*)
    and Virginia Department of Education (NDOE and VDOE) standards ([*http://www.doe.virginia.gov/testing/sol/standards_docs/computer-science/*](http://www.doe.virginia.gov/testing/sol/standards_docs/computer-science/)),
    which cross-reference computer science facets with other subjects, such as mathematics,
    social studies, and the sciences.'
  prefs: []
  type: TYPE_NORMAL
- en: K–12 Computer Science Framework and K–12 Computer Science Standards
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In 2016, a collaboration of computer science educational organizations and US
    states developed the *K–12 Computer Science Framework*, which provides a vision
    and detailed explanation of what computer science education should encompass.
    In 2017, the CSTA released an update to its *K–12 Computer Science Standards*
    that builds on the K–12 Computer Science Framework. The update provides a streamlined
    set of standards outlining what students should know at each stage in their schooling.
    Educators who want to know what to teach their students at each grade level should
    consult the CSTA Standards. Those looking for a more detailed understanding of
    each subject in computer science should read the Framework.
  prefs: []
  type: TYPE_NORMAL
- en: International Society for Technology in Education Standards
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another noteworthy set of standards comes from the ISTE. Composed of six sets
    of standards, the guidelines are high-level enough to fit on both sides of one
    printed page, and they align well with the K–12 Computer Science Framework. Notably,
    the ISTE standards are role based: each one targets the role of a person in the
    educational system. Whether that person is an administrator, computer science
    educator, educator in another subject, technology coach, education leader, or
    student, the ISTE standards explain what each role should learn, teach, and lead
    in an organization.'
  prefs: []
  type: TYPE_NORMAL
- en: Virginia Department of Education Standards
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In November 2017 and June 2018, the VDOE and the NDOE, respectively, released
    their computer science standards. Like the standards set in other US states, these
    standards are informed by the K–12 Computer Science Framework and the CSTA’s standards.
    But the Virginia and Nevada standards are exceptional in that they directly tie
    as many of the computer science standards as possible to existing literacy, mathematics,
    history, and science standards.
  prefs: []
  type: TYPE_NORMAL
- en: For example, third-grade teachers can connect a math lesson on repeating patterns
    to also cover algorithms incorporating loops. Algorithm analysis ties into mathematical
    problem-solving and English comprehension. Basic set theory can correlate to a
    science lesson on classifying objects. Using computers to get data, draw conclusions,
    and make predictions supports history and social studies requirements for students
    to use evidence to provide answers to questions.
  prefs: []
  type: TYPE_NORMAL
- en: When you’re considering which standards to adopt in your classroom, start with
    your own state’s computer science standards. If your state hasn’t officially adopted
    standards or if its existing standards are lacking, follow the CSTA’s standards.
    If you need more depth, explore the K–12 Computer Science Framework. If you need
    direction to implement computer science at your educational institution, use the
    ISTE standards as your guide.
  prefs: []
  type: TYPE_NORMAL
- en: Conceptually, the many sources for educational standards can be overwhelming
    and difficult to keep track of. In the next section, we’ll review how to compartmentalize
    these topics within four primary themes that are easy to remember and implement.
  prefs: []
  type: TYPE_NORMAL
- en: Four Categories of Computer Science Standards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Whichever set of standards best fits your needs, you’ll find a huge range of
    concepts to cover. To help keep track of every topic you need to cover in computer
    science, you can think about the standards using four main categories: digital
    citizenship, computer systems, computational thinking, and computational artifacts,
    as shown in Table 1-1\.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 1-1:** *Computer Science Concepts*'
  prefs: []
  type: TYPE_NORMAL
- en: '| Digital citizenship | Computer systems | Computational thinking | Computational
    artifacts |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| InclusivenessCollaborationAttributionImpacts of technologyEquityLaws & regulationEthicsSafety
    | CybersecurityDevicesHardware & softwareStorageNetworkingInternetTroubleshooting
    | AbstractionDecompositionAlgorithmsVariablesControlModularityInferenceModeling
    | Program developmentIterative developmentAutomationDebuggingLicensingProject
    managementFeedbackDocumentation |'
  prefs: []
  type: TYPE_TB
- en: As we explore each of these broad areas, keep in mind that they’re not silos.
    Just as computer science integrates with math, English, science, history, and
    social studies, these subsets of computer science are deeply interwoven with one
    another.
  prefs: []
  type: TYPE_NORMAL
- en: Digital Citizenship
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So much of our students’ lives is now digital. They inhabit many diverse online
    communities. Just as we prepare students to succeed as citizens in the physical
    world, we must educate students about the opportunities, ethics, and dangers of
    the online world. We must raise them to be digital citizens.
  prefs: []
  type: TYPE_NORMAL
- en: Becoming a digital citizen means collaborating with people all over the world.
    It involves the interpersonal skills they need to work on projects together and
    to recognize the importance of human capital that makes all modern conveniences
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: Students should learn how local and international law governs their digital
    lives in respect to information freedom, copyright restrictions, online privacy,
    and other dimensions. It’s important to learn about the ethical use of computers
    and how some behaviors can be legal but unethical. For example, some forms of
    online harassment and bullying carry profound personal consequences for those
    involved. Students who are good digital citizens will recognize the societal impacts
    of technology and potential impacts of new technologies.
  prefs: []
  type: TYPE_NORMAL
- en: Learning about digital citizenship can also open your students’ eyes to global
    inequities as they relate to information systems. What does it mean for some to
    lack access to computers connected to the internet? Why is it essential that information
    systems be accessible to blind and deaf users? It’s important to recognize and
    appreciate how good so many of us have it so we’re motivated to protect what we
    have and expand it to others.
  prefs: []
  type: TYPE_NORMAL
- en: Computer Systems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Computer systems include cybersecurity, software, hardware, networking, and
    other aspects specific to information technologies, which are responsible for
    most computing tasks we perform. Familiarity with these technologies is what lets
    us navigate familiar menu systems, manipulate the mouse or touch pad, and read
    onscreen content. It’s also the area with the potential to frustrate us when we
    encounter unfamiliar user interfaces, cryptic error messages, or system failures.
    Every aspect of computer systems was once a frustration point for each of us and
    will be for our students as they hunt and peck letters on the keyboard, wrestle
    for fine motor mouse control, or fumble through reading the pop-up boxes confronting
    them. For students to work through these frustrations to develop fluency with
    computers, knowledge of computer systems should be a critical component in computer
    science education.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, proficiency with peripherals, software interfaces, operating systems,
    hardware, cybersecurity, and networking are marketable skills that every job in
    the knowledge industry fields requires of applicants. Making sure all students
    graduate with these practical foundational skills is a moral responsibility for
    educators.
  prefs: []
  type: TYPE_NORMAL
- en: Computational Thinking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In her landmark 2006 article, Jeannette M. Wing, head of the Computer Science
    Department at Carnegie Mellon at the time, argued that there should be a course
    called “Ways to Think Like a Computer Scientist” available to non–computer science
    majors. This course would teach *computational thinking*, or the art of expressing
    problems and their solutions in ways a computer could execute. Teaching computational
    thinking simply reframes activities we’re already doing in our daily lives into
    the context of computer science concepts.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, each routine in a child’s daily life, such as getting to the bus,
    paying attention in class, taking quizzes, choosing lunch, taking bathroom breaks,
    and doing homework, is an *algorithm*. An algorithm is a set of steps or rules
    that defines a process the student follows. They execute some algorithms in loops
    that iterate each weekday of the school year. Student lives are filled with algorithms:
    they execute tasks, such as answering a list of questions in a quiz, maximizing
    the number of rides down the slide during recess, or flipping through pages while
    reading a book. They execute all these operations at set times, like how a computer
    executes regularly scheduled tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: Students also manage collections of items and information in their personal
    lives, just like computers manage in data structures called *sets* and *arrays*.
    For example, they manage sets of textbooks, homework, or facts for their next
    exam. They maintain arrays of friends on social networks, digital media collections,
    and online conversations, executing the same fundamental operations of set theory
    that a database administrator uses to run reports.
  prefs: []
  type: TYPE_NORMAL
- en: As students grow older, their computational thinking skills must grow to match
    life's increasingly complex challenges. For example, we form models based on data
    to reconstruct famous historical events or predict the outcomes of complex systems,
    like the weather. We execute sophisticated algorithms at four-way stop signs,
    when baking a cake, or while threading a cross-stitch needle. There’s a reason
    concepts like “building code,” “civil code,” “criminal code,” and “code of laws”
    all use the word *code*. In any board game, you’ll find modeling of subject matter,
    algorithms in the rules, variables, abstraction, controls, modularity, decomposition,
    inference, data representations, and debugging required to properly play them.
  prefs: []
  type: TYPE_NORMAL
- en: Not only does computational thinking allow for new insights and clear cognition,
    but it also helps us interact with our computers. Learning to communicate effectively
    in ways a computer can understand makes it easier to program a thermostat to save
    energy, schedule recurring events on a digital calendar, or successfully interact
    with an artificial intelligence assistant like Google, Siri, Alexa, or Cortana.
    In a world where computers are completely integrated in our daily lives, the ability
    to communicate with these obtuse, highly literal intellects is requisite.
  prefs: []
  type: TYPE_NORMAL
- en: Computational Artifacts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *computational artifact* is a computer program or other computational project
    that involves sustained inquiry, peer review, and iterative development but doesn’t
    always include computer programming.
  prefs: []
  type: TYPE_NORMAL
- en: When developing artifacts, students learn about the project life cycle and start
    producing output. They learn to document and comment their code to communicate
    with computer and human collaborators. They also learn to test for quality assurance
    and debug their software when the program goes awry. As they code, they begin
    to appreciate how the three previous concepts they’ve learned so far come together.
  prefs: []
  type: TYPE_NORMAL
- en: For example, as digital citizens, students should be able to collaborate with
    peers and know when to properly attribute other people’s contributions when they
    build upon ­others’ code. They should consider how accessible their software is
    for users with disabilities or clients running it in older environments, and incorporate
    feedback from their users to iteratively improve their projects.
  prefs: []
  type: TYPE_NORMAL
- en: As proficient computer systems users, students start to understand the architecture
    and operating system in which their code executes. When using online applications,
    they demonstrate an understanding of how their software runs on the network and
    is received by clients on the web. We can also teach them to consider their application’s
    security and develop software ethically and responsibly.
  prefs: []
  type: TYPE_NORMAL
- en: Students can use their computational thinking tools to craft algorithms with
    variables, functions, loops, and conditionals, like if-then statements. They can
    go on to experiment and apply more advanced concepts, such as recursion and data
    types. They should be able to model problems and test their models when the code
    executes.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we’ve covered sources for computer science standards and given an overview
    of the different categories in which they fall. In addition to familiarity with
    the standards, educators must also advocate for implementing the standards at
    their organization.
  prefs: []
  type: TYPE_NORMAL
- en: The Importance of Stakeholder Buy-In for Implementing Standards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every information technology project has *stakeholders*, individuals who have
    a personal interest in the project, align with its goals, and want to see it succeed.
    When implementing computer science standards at your school, your stakeholders
    are your students, parents, and administrators. You’ll need all of them to take
    a vested interest in your program to see it grow and benefit your students.
  prefs: []
  type: TYPE_NORMAL
- en: The failure of the now notorious Common Core state standards illustrates the
    importance of partnering with parents, students, and administrators to clarify
    why students are learning what they’re learning and how it will benefit student
    stakeholders. In 2008, governors and education commissioners in the United States
    launched an effort to standardize education across the country. This was a matter
    of equity. A student shouldn’t be denied the best possible education just because
    their parents live in a state that spends less money on schooling than other states.
  prefs: []
  type: TYPE_NORMAL
- en: But when implemented, the Common Core standards introduced many new and unfamiliar
    exercises, especially in teaching mathematics, that appeared unnecessarily complex
    to parents who had grown up with more straightforward and utilitarian algorithms
    for problem-solving. Social media feeds became inundated with parents complaining
    about the standards. Figure 1-4 illustrates the number line, a common pain point
    of Common Core.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/CitC01_04_numberline.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-4: The number line, villain of the Common Core'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parents who had learned to treat this example as a simple equation 8 ÷ 2 =
    4 were now asked to help their children step through this lengthier algorithm.
    This angst about Common Core math was even alluded to in the Disney film *Incredibles
    2*: in the film, a 1960s superhero dad struggles to help his son with his homework
    but doesn’t understand the New Math technique being used. It mirrors the extent
    to which parents became frustrated by the Common Core’s novel approaches.'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1-4 shows a number line, one of many innovative methods for teaching
    mathematics. In fact, it’s used in countries like Singapore, whose students consistently
    top global rankings in math and science performance. The Common Core standards
    adopted concepts like the number line to challenge students to think about mathematics
    in different ways. Rather than teaching children specific algorithms for solving
    math problems, the Common Core teaches children how to think like mathematicians
    and empowers them to be more adaptable to a rapidly changing world.
  prefs: []
  type: TYPE_NORMAL
- en: It’s the kind of flexible and adaptive thinking most everyone would ideally
    support in the educational system. But for parents, their idealism is challenged
    when they’re confronted with unfamiliar concepts they don’t understand. The angst
    in reaction to change turned into a backlash against these new educational innovations
    and prompted a political response.
  prefs: []
  type: TYPE_NORMAL
- en: School districts began removing the words “Common Core” from state standards
    to avoid triggering outrage among parents and politicians. A few states officially
    pulled out of the Common Core standards or rejected them. But the inside joke
    among educators was that the standards these states did adopt were almost the
    same.
  prefs: []
  type: TYPE_NORMAL
- en: The genuine frustration many parents felt and continue to feel while helping
    their children with their homework isn’t a joke. Parents are a crucial support
    mechanism for students, and we need their buy-in when coaching their children
    through challenging lessons at home. Parents need to understand why their children
    are learning concepts they didn’t learn in school and why the standards are relevant.
    This is especially true when introducing entire new fields of study like computer
    science. It’s crucial to get stakeholders to buy into the importance of teaching
    computer science standards to successfully implement them.
  prefs: []
  type: TYPE_NORMAL
- en: In Chapters 8 and 10, we’ll cover projects that can bring parents into the learning
    process and services your computer science program can provide to make it invaluable
    to your school administration and your students’ future professional lives. With
    community building and outreach projects, you can provide visibility for your
    computer science program.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we reviewed the many different sets of computer science standards,
    from those professional institutions have developed to standards that cross-reference
    other subjects, such as those implemented by the VDOE and NDOE. As educators,
    you can refer to your own state or country’s standards for the specifics you need
    to cover in the classroom and reference the CSTA’s standards when the local standards
    are still in development or don’t exist. Additionally, you can refer to the K–12
    Computer Science Framework for a deeper dive into the standards and turn to the
    ISTE standards for role-based strategies for implementing standards at your institution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The four broad categories of computer science standards should make them easy
    to follow and discuss with other educators. Digital citizenship covers the socially
    conscious skills and subjects that today’s students need as they step into a future
    of accelerating change. Computer systems refer to understanding the hardware and
    software that students must adopt and master for success in the professional world.
    Computational thinking involves the cognitive and metacognitive skills necessary
    for interfacing with computers and adapting to a world of rapid, technology-driven
    change. Computational artifacts are the end product of applying all the skills
    learned in the other three categories: they allow students to create art, software,
    or other tangible products users can interact with.'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter also touched on the importance of stakeholder buy-in and the difficult
    lesson of the Common Core state standards. If parents see their children become
    frustrated with lessons that even the parents don’t understand, they won’t be
    able to provide the support their children need at home. Students, parents, and
    other stakeholders need to know why students are learning what they’re learning
    and its relevance.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll learn the many practical, cognitive, and educational
    benefits of studying computer science so you can better motivate your students
    and guide them to understand how computer science education can help them.
  prefs: []
  type: TYPE_NORMAL
