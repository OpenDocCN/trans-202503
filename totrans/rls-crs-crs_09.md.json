["```\n   class Person\n➊    attr_accessor :name\n\n➋    def initialize(name)\n       @name = name\n     end\n   end\n```", "```\nmodule Distractable\n  def distract\n    puts \"Ooh, kittens!\"\n  end\nend\n```", "```\nirb(main):001:0> **class Person**\nirb(main):002:1> **include Distractable**\nirb(main):003:1> **end**\n => Person\nirb(main):004:0> **p = Person.new(\"Tony\")**\n => #<Person:0x007fceb1163de8 @name=\"Tony\">\nirb(main):005:0> **p.distract**\nOoh, kittens!\n=> nil\n```", "```\nirb(main):006:0> **Math::PI**\n => 3.141592653589793\n```", "```\nirb(main):007:0> **Math.sin(0)**\n => 0.0\n```", "```\n   class Person\n➊    include Comparable\n\n➋    def <=>(other)\n       name <=> other.name\n     end\n   end\n```", "```\nirb(main):008:0> **p1 = Person.new(\"Tony\")**\n => #<Person:0x007f91b40140a8 @name=\"Tony\">\nirb(main):009:0> **p2 = Person.new(\"Matt\")**\n => #<Person:0x007f91b285fea8 @name=\"Matt\">\nirb(main):010:0> **p3 = Person.new(\"Wyatt\")**\n => #<Person:0x007f91b401fb88 @name=\"Wyatt\">\nirb(main):011:0> **p1 > p2**\n => true\n```", "```\nirb(main):012:0> **p1.between? p2, p3**\n => true\n```", "```\n  class Fibonacci\n    def calc(n)\n      return n if n < 2\n➊     return calc(n - 1) + calc(n - 2)\n    end\n  end\n```", "```\nirb(main):013:0> **f = Fibonacci.new**\n => #<Fibonacci:0x007fd8d3269518>\nirb(main):014:0> **f.calc 10**\n => 55\nirb(main):015:0> **f.calc 30**\n => 832040\n```", "```\n   module Memoize\n     def calc(n)\n➊      @@memo ||= {}\n➋      @@memo[n] ||= super\n     end\n   end\n```", "```\n{\n  0 => 0,\n  1 => 1,\n  2 => 1,\n  3 => 2\n}\n```", "```\nirb(main):016:0> **class Fibonacci**\nirb(main):017:1> **prepend Memoize**\nirb(main):018:1> **end**\n => Fibonacci\nirb(main):019:0> **f.calc 40**\n => 102334155\n```", "```\nclass Library\n  def initialize(books)\n    @books = books\n  end\nend\n```", "```\n1 require 'forwardable'\n  class Library\n2   extend Forwardable\n3   def_delegators :@books, :size, :push\n\n    def initialize(books)\n      @books = books\n    end\n  end\n```", "```\nirb(main):020:0> **lib = Library.new [\"Neuromancer\", \"Snow Crash\"]**\n => #<Library:0x007fe6c91854e0 @books=[\"Neuromancer\", \"Snow Crash\"]>\nirb(main):021:0> **lib.size**\n => 2\nirb(main):022:0> **lib.push \"The Hobbit\"**\n => [\"Neuromancer\", \"Snow Crash\", \"The Hobbit\"]\nirb(main):023:0> **lib.size**\n => 3\n```", "```\nirb(main):024:0> **Person.ancestors**\n => [Person, Distractable, Comparable, Object, Kernel, BasicObject]\n```", "```\nirb(main):025:0> **Person.methods**\n => [:allocate, :new, :superclass, :freeze, :===, :==, ... ]\nirb(main):026:0> **Person.methods(false)**\n => []\nirb(main):027:0> **Person.instance_methods(false)**\n => [:name, :name=, :<=>]\n```", "```\nirb(main):028:0> **Person.class**\n => Class\n```", "```\nirb(main):029:0> **Class.ancestors**\n => [Class, Module, Object, Kernel, BasicObject]\n```", "```\nirb(main):030:0> **p = Person.new(\"Tony\")**\n => #<Person:0x007fc0ca1a6278 @name=\"Tony\">\nirb(main):031:0> **p.is_a? Person**\n => true\n```", "```\nirb(main):032:0> **p.is_a? Object**\n => true\n```", "```\nirb(main):033:0> **p.instance_of? Person**\n => true\nirb(main):034:0> **p.instance_of? Object**\n => false\n```", "```\ndef write_with_time(file, info)\n  file.puts \"#{Time.now} - #{info}\"\nend\n```", "```\n➊ irb(main):001:0> **f = File.open(\"temp.txt\", \"w\")**\n   => #<File:temp.txt>\n➋ irb(main):002:0> **write_with_time(f, \"Hello, World!\")**\n   => nil\n➌ irb(main):003:0> **f.close**\n   => nil\n```", "```\n2014-05-21 16:52:07 -0500 - Hello, World!\n```", "```\n  def write_with_time(file, info)\n➊  if file.instance_of? File\n      file.puts \"#{Time.now} - #{info}\"\n    else\n      raise ArgumentError\n    end\n  end\n```", "```\n  def write_with_time(file, info)\n➊   if file.respond_to?(:puts)\n      file.puts \"#{Time.now} - #{info}\"\n    else\n      raise ArgumentError\n    end\n  end\n```", "```\n  class User\n➊   FEATURES = ['create', 'update', 'delete']\n\n    FEATURES.each do |f|\n➋     define_method \"can_#{f}!\" do\n        @features[f] = true\n      end\n\n➌     define_method \"can_#{f}?\" do\n➍        !!@features[f]\n       end\n     end\n     def initialize\n       @features = {}\n     end\n   end\n```", "```\nirb(main):001:0> **user = User.new**\n => #<User:0x007fc01b95abe0 @features={}>\nirb(main):002:0> **user.can_create!**\n => true\nirb(main):003:0> **user.can_create?**\n => true\nirb(main):004:0> **user.can_update?**\n => false\nirb(main):005:0> **user.can_delete?**\n => false\n```", "```\n➊ class Accessor\n➋   def self.accessor(attr)\n      class_eval \"\n➌       def #{attr}\n          @#{attr}\n          end\n\n➍         def #{attr}=(val)\n            @#{attr} = val\n          end\n         \"\n       end\n     end\n```", "```\n➊ class Element < Accessor\n➋   accessor :name\n\n    def initialize(name)\n      @name = name\n    end\n  end\n```", "```\n➊ def name\n    @name\n  end\n\n➋ def name=(val)\n    @name = val\n  end\n```", "```\n➊ irb(main):001:0> **e = Element.new \"lead\"**\n   => #<Element:0x007fc01b840110 @name=\"lead\">\n➋ irb(main):002:0> **e.name = \"gold\"**\n   => \"gold\"\n➌ irb(main):003:0> **puts e.name**\n  gold\n   => nil\n```", "```\nclass Echo\n  def method_missing(name, *args, &block)\n    word = name\n    puts \"#{word}, #{word}, #{word}\"\n  end\nend\n```", "```\nirb(main):001:0> **echo = Echo.new**\n => #<Echo:0x007fa8131c9590>\nirb(main):002:0> **echo.hello**\n => hello, hello, hello\n```", "```\n  class Post < ActiveRecord::Base\n    validates :title, :presence => true\n    has_many :comments\n\n➊   **def self.method_missing(name, *args, &block)**\n➋     **if name =~ /\\Aquery_by_(.+)\\z/**\n➌       **where($1 => args[0]).first**\n      **else**\n➍       **super**\n      **end**\n    **end**\n end\n```", "```\nirb(main):001:0> **Post.query_by_title \"First Post\"**\n => #<Post id: 1, ...>\n```", "```\nirb(main):002:0> **Post.respond_to? :query_by_title**\n => false\n```", "```\n   class Post < ActiveRecord::Base\n     --*snip*--\n\n     **def self.respond_to_missing?(name, include_all=false)**\n➊      **name.to_s.start_with?(\"query_by_\") || super**\n    **end**\n  end\n```", "```\nirb(main):001:0> **Post.respond_to? :query_by_title**\n => true\n```"]