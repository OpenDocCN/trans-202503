["```\nswitch (a) {\n\n/** NOTE: case bodies omitted for brevity **/\n\n    case 1:  /*...*/ break;\n\n    case 2:  /*...*/ break;\n\n    case 3:  /*...*/ break;\n\n    case 4:  /*...*/ break;\n\n    case 5:  /*...*/ break;\n\n    case 6:  /*...*/ break;\n\n    case 7:  /*...*/ break;\n\n    case 8:  /*...*/ break;\n\n    case 9:  /*...*/ break;\n\n    case 10: /*...*/ break;\n\n    case 11: /*...*/ break;\n\n    case 12: /*...*/ break;\n\n}\n```", "```\nnum_entries = max_case_value – min_case_value + 1\n```", "```\ndensity = num_cases / num_entries\n```", "```\ntable_size = num_entries * sizeof(void*)\n```", "```\nswitch (a) {\n\n/** NOTE: case bodies omitted for brevity **/\n\n    case 1:     /*...*/ break;\n\n    case 211:   /*...*/ break;\n\n    case 295:   /*...*/ break;\n\n    case 462:   /*...*/ break;\n\n    case 528:   /*...*/ break;\n\n    case 719:   /*...*/ break;\n\n    case 995:   /*...*/ break;\n\n    case 1024:  /*...*/ break;\n\n    case 8000:  /*...*/ break;\n\n    case 13531: /*...*/ break;\n\n    case 13532: /*...*/ break;\n\n    case 15027: /*...*/ break;\n\n}\n```", "```\nif (value < median) {\n\n    // value is in [0-50) percentile\n\n    if (value < lower_half_median) {\n\n        // value is in [0-25) percentile\n\n        // ... continue successive halving until value is resolved\n\n    } else {\n\n        // value is in [25-50) percentile\n\n        // ... continue successive halving until value is resolved\n\n   }\n\n} else {\n\n    // value is in [50-100) percentile\n\n    if (value < upper_half_median) {\n\n        // value is in [50-75) percentile\n\n // ... continue successive halving until value is resolved\n\n    } else {\n\n        // value is in [75-100) percentile\n\n        // ... continue successive halving until value is resolved\n\n    }\n\n}\n```", "```\nlabel_set = [1, 2, 3, 4, 5, 6, 7, 8, 50, 80, 200, 500, 1000, 5000, 10000]\n```", "```\n0001075a  CMP➊  dword ptr [EBP + value],12\n\n0001075e  JA     switchD_00010771::caseD_0➋\n\n00010764  MOV    EAX,dword ptr [EBP + a]\n\n00010767  SHL    EAX,0x2\n\n0001076a  ADD    EAX,switchD_00010771::switchdataD_00010ee0       = 00010805\n\n0001076f  MOV    EAX,dword ptr [EAX]=>->switchD_00010771::caseD_0 = 00010805\n\n        switchD_00010771::switchD\n\n00010771  JMP    EAX\n\n        switchD_00010771::caseD_1➌             XREF[2]:      00010771(j), 00010ee4(*)\n\n 00010773  MOV    EDX,dword ptr [EBP + a]\n\n00010776  MOV    EAX,dword ptr [EBP + b]\n\n00010779  ADD    EAX,EDX\n\n0001077b  MOV    dword ptr [EBP + result],EAX\n\n0001077e  JMP    switchD_00010771::caseD_0\n\n;--content omitted for remaining cases--\n\n       switchD_00010771::switchdataD_00010ee0➋  XREF[2]: switch_version_1:0001076a(*),\n\n                                                          switch_version_1:0001076f(R)\n\n00010ee0  addr    switchD_00010771::caseD_0➎\n\n00010ee4  addr    switchD_00010771::caseD_1\n\n00010ee8  addr    switchD_00010771::caseD_2\n\n00010eec  addr    switchD_00010771::caseD_3\n\n00010ef0  addr    switchD_00010771::caseD_4\n\n00010ef4  addr    switchD_00010771::caseD_5\n\n00010ef8  addr    switchD_00010771::caseD_6\n\n00010efc  addr    switchD_00010771::caseD_7\n\n00010f00  addr    switchD_00010771::caseD_8\n\n00010f04  addr    switchD_00010771::caseD_9\n\n00010f08  addr    switchD_00010771::caseD_a\n\n00010f0c  addr    switchD_00010771::caseD_b\n\n00010f10  addr    switchD_00010771::caseD_c\n```", "```\n00411e88  MOV    ECX,dword ptr [EBP + local_d4]\n\n00411e8e  SUB➊  ECX,0x1\n\n00411e91  MOV    dword ptr [EBP + local_d4],ECX\n\n00411e97  CMP➋  dword ptr [EBP + local_d4],11\n\n00411e9e  JA     switchD_00411eaa::caseD_c\n\n00411ea4  MOV    EDX,dword ptr [EBP + local_d4]\n\n        switchD_00411eaa::switchD\n\n00411eaa  JMP    dword ptr [EDX*0x4 + ->switchD_00411eaa::caseD      = 00411eb1\n\n        switchD_00411eaa::caseD_1                XREF[2]: 00411eaa(j), 00411f4c(*)\n\n00411eb1  MOV    EAX,dword ptr [EBP + param_1]\n\n00411eb4  ADD    EAX,dword ptr [EBP + param_2]\n\n 00411eb7  MOV    dword ptr [EBP + local_c],EAX\n\n00411eba  JMP    switchD_00411eaa::caseD_c\n\n;--content omitted for remaining cases--\n\n        switchD_00411eaa::switchdataD_00411f4c   XREF[1]: switch_version_1:00411eaa(R)\n\n00411f4c  addr   switchD_00411eaa::caseD_1➌\n\n00411f50  addr   switchD_00411eaa::caseD_2\n\n00411f54  addr   switchD_00411eaa::caseD_3\n\n00411f58  addr   switchD_00411eaa::caseD_4\n\n00411f5c  addr   switchD_00411eaa::caseD_5\n\n00411f60  addr   switchD_00411eaa::caseD_6\n\n00411f64  addr   switchD_00411eaa::caseD_7\n\n00411f68  addr   switchD_00411eaa::caseD_8\n\n00411f6c  addr   switchD_00411eaa::caseD_9\n\n00411f70  addr   switchD_00411eaa::caseD_a\n\n00411f74  addr   switchD_00411eaa::caseD_b\n\n00411f78  addr   switchD_00411eaa::caseD_c\n```", "```\nint main(int argc, char **argv) {\n\n    int x;\n\n    printf(\"Enter an integer: \");\n\n    scanf(\"%d\", &x);\n\n    printf(\"%d %% 10 = %d\\n\", x, x % 10);\n\n}\n```", "```\n1400119c6 MOV    EAX,dword ptr [RBP + local_f4]\n\n1400119c9 CDQ\n\n1400119ca MOV    ECX,0xa\n\n1400119cf IDIV➊ ECX\n\n1400119d1 MOV    EAX,EDX\n\n1400119d3 MOV➋  R8D,EAX\n\n1400119d6 MOV    EDX,dword ptr [RBP + local_f4]\n\n1400119d9 LEA    RCX,[s_%d_%%_10_=_%d_140019d60]\n\n1400119e0 CALL   printf\n```", "```\n140001136 MOV    ECX,dword ptr [RSP + local_18]\n\n14000113a MOV    EAX,0x66666667\n\n14000113f IMUL➊ ECX\n\n140001141 MOV    R8D,ECX\n\n140001144 SAR    EDX,0x2\n\n140001147 MOV    EAX,EDX\n\n140001149 SHR    EAX,0x1f\n\n14000114c ADD    EDX,EAX\n\n14000114e LEA    EAX,[RDX + RDX*0x4]\n\n140001151 MOV    EDX,ECX\n\n140001153 ADD    EAX,EAX\n\n140001155 LEA    RCX,[s_%d_%%_10_=_%d_140002238]\n\n14000115c SUB➋  R8D,EAX\n\n14000115f CALL➌ printf\n```", "```\n00100708  MOV    ECX,dword ptr [RBP + x]\n\n0010070b  MOV    EDX,0x66666667\n\n00100710  MOV    EAX,ECX\n\n00100712  IMUL➊ EDX\n\n00100714  SAR    EDX,0x2\n\n00100717  MOV    EAX,ECX\n\n00100719  SAR    EAX,0x1f\n\n0010071c  SUB    EDX,EAX\n\n0010071e  MOV    EAX,EDX\n\n00100720  SHL    EAX,0x2\n\n00100723  ADD    EAX,EDX\n\n00100725  ADD    EAX,EAX\n\n00100727  SUB    ECX,EAX\n\n00100729  MOV➋  EDX,ECX\n```", "```\nint main() {\n\n    volatile int x = 3;\n\n    volatile int y = x * 13;\n\n  ➊ volatile int z = y == 30 ? 0 : -1;\n\n}\n```", "```\n    if (y == 30) {\n\n        z = 0;\n\n    } else {\n\n        z = -1;\n\n    }\n```", "```\n00100616  MOV    EAX,dword ptr [RBP + y]\n\n00100619  CMP➊  EAX,0x1e\n\n0010061c  JNZ    LAB_00100625\n\n0010061e  MOV    EAX,0x0\n\n00100623  JMP    LAB_0010062a\n\n        LAB_00100625\n\n00100625  MOV    EAX,0xffffffff\n\n        LAB_0010062a\n\n0010062a  MOV➋  dword ptr [RBP + z],EAX\n```", "```\n140001013 MOV    EAX,dword ptr [RSP + local_res8]\n\n140001017 SUB➊  EAX,0x1e\n\n14000101a NEG➋  EAX\n\n14000101c SBB➌  EAX,EAX\n\n14000101e MOV    dword ptr [RSP + local_res8],EAX\n```", "```\n00100506  MOV    EAX,dword ptr [RSP + y]\n\n0010050a  CMP    EAX,0x1e\n\n0010050d  SETNZ➊AL\n\n00100510  MOVZX  EAX,AL\n\n00100513  NEG➋  EAX\n\n00100515  MOV➌  dword ptr [RSP + z],EAX\n```", "```\nint maybe_inline() {\n\n    return 0x12abcdef;\n\n}\n\nint main() {\n\n    int v = maybe_inline();\n\n    printf(\"after maybe_inline: v = %08x\\n\", v);return 0;\n\n}\n```", "```\n00010775  PUSH   EBP\n\n00010776  MOV    EBP,ESP\n\n00010778  PUSH   ECX\n\n00010779  SUB    ESP,0x14\n\n0001077c  CALL➊ maybe_inline\n\n00010781  MOV    dword ptr [EBP + local_14],EAX\n\n00010784  SUB    ESP,0x8\n\n00010787  PUSH   dword ptr [EBP + local_14]\n\n0001078a  PUSH   s_after_maybe_inline:_v_=_%08x_000108e2\n\n0001078f  CALL   printf\n```", "```\n0001058a  PUSH   EBP\n\n0001058b  MOV    EBP,ESP\n\n0001058d  PUSH   ECX\n\n0001058e  SUB    ESP,0x8\n\n00010591  PUSH➊ 0x12abcdef\n\n00010596  PUSH   s_after_maybe_inline:_v_=_%08x_000108c2\n\n0001059b  PUSH   0x1\n\n0001059d  CALL   __printf_chk\n```", "```\n    BaseClass *bc_ptr_2;\n\n    srand(time(0));\n\n    if (rand() % 2) {\n\n        bc_ptr_2 = dynamic_cast<SubClass*>(new SubClass());\n\n    }\n\n    else {\n\n        bc_ptr_2 = dynamic_cast<SubClass*>(new SubSubClass());\n\n    }\n```", "```\n        s_8SubClass_00101818               XREF[1]:   00301d20(*)\n\n00101818  ds \"8SubClass\"\n```", "```\n           PTR___gxx_personality_v0_00301d18  XREF[2]: FUN_00101241:00101316(*)➊,\n\n                                                       00301d10(*)➋\n\n➌ 00301d18  addr   __gxx_personality_v0      = ??\n\n➍ 00301d20  addr   s_8SubClass_00101818      = \"8SubClass\"\n\n   00301d28  addr   PTR_time_00301d30         = 00303028\n```", "```\n➊ 00301c60       ??      18h                 ?➋ -> 00301d18\n\n  00301c61       ??      1Dh\n\n  00301c62       ??      30h                 0\n\n  00301c63       ??      00h\n\n  00301c64       ??      00h\n\n  00301c65       ??      00h\n\n  00301c66       ??      00h\n\n  00301c67       ??      00h\n\n          PTR_FUN_00301c68                 XREF[2]: FUN_00101098:001010b0(*),\n\n                                                    FUN_00101098:001010bb(*)\n\n➌ 00301c68  addr   FUN_001010ea\n\n  00301c70  addr   FUN_00100ff0\n\n  00301c78  addr   FUN_00101122\n\n  00301c80  addr   FUN_00101060\n\n  00301c88  addr   FUN_0010115a\n```", "```\n     _start\n\n004003b0  XOR    EBP,EBP\n\n004003b2  MOV    R9,RDX\n\n004003b5  POP    RSI\n\n004003b6  MOV    RDX,RSP\n\n004003b9  AND    RSP,-0x10\n\n004003bd  PUSH   RAX\n\n004003be  PUSH   RSP=>local_10\n\n004003bf  MOV    R8=>__libc_csu_fini,__libc_csu_fini\n\n004003c6  MOV    RCX=>__libc_csu_init,__libc_csu_init\n\n004003cd  MOV    RDI=>main,main➊\n\n004003d4  CALL➋ qword ptr [->__libc_start_main]\n```", "```\n004003bf  MOV    R8=>FUN_004008a0,FUN_004008a0\n\n004003c6  MOV    RCX=>FUN_00400830,FUN_00400830\n\n004003cd  MOV    RDI=>FUN_0040080a,FUN_0040080a➊\n\n004003d4  CALL   qword ptr [->__libc_start_main]\n```", "```\n    //~40 lines of code omitted for brevity\n\n    atexit((__func *)cleanup);\n\n    handle_static_init(argc,ap,env);\n\n    argc = main((ulong)pcVar2 & 0xffffffff,ap,env);\n\n                    /* WARNING: Subroutine does not return */\n\n    exit(argc);\n\n}\n```", "```\n    // 40 lines of code omitted for brevity\n\n    atexit(param_2);\n\n    FUN_00201120(uVar2 & 0xffffffff,ppcVar5,puVar4);\n\n    __status = FUN_00201a80(uVar2 & 0xffffffff,ppcVar5,puVar4)➊;\n\n                    /* WARNING: Subroutine does not return */\n\n    exit(__status);\n\n}\n```", "```\n    FUN_0021cc70();\n\n    FUN_0021c120(uVar2 & 0xffffffff,ppcVar13,puVar11);\n\n    uVar7 = FUN_0021caa0(uVar2 & 0xffffffff,ppcVar13,puVar11);\n\n                    /* WARNING: Subroutine does not return */\n\n    FUN_00266d30((ulong)uVar7);\n\n}\n```", "```\n140001272 CALL   _amsg_exit➊\n\n140001277 MOV    R8,qword ptr [DAT_14000d310]\n\n14000127e MOV    qword ptr [DAT_14000d318],R8\n\n140001285 MOV    RDX,qword ptr [DAT_14000d300]\n\n14000128c MOV    ECX,dword ptr [DAT_14000d2fc]\n\n140001292 CALL➋ FUN_140001060\n\n140001297 MOV    EDI,EAX\n\n140001299 MOV    dword ptr [RSP + Stack[-0x18]],EAX\n\n14000129d TEST   EBX,EBX\n\n14000129f JNZ    LAB_1400012a8\n\n1400012a1 MOV    ECX,EAX\n\n1400012a3 CALL➌ FUN_140002b30\n```"]