- en: Chapter 21. Scripts and Plug-ins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GIMP is not a monolithic program. Much of it is made up of plug-ins, components
    that are not part of the core of the system. In fact, most of the tools found
    in the **Image: Filters** menu are plug-ins, as are many of the tools in the **Image:
    Colors** menu. Besides these built-in plug-ins, many third-party plug-ins are
    available; some of these are quite large, like the GIMP Animation Package (GAP;
    discussed in [Chapter 18](ch18.html "Chapter 18. Animation Tools")). Other, much
    smaller ones, are used for simple tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Scripts and plug-ins are very similar. One difference is that they are stored
    in different places. When you open the FOLDER entry in the **Image: Edit > Preferences**
    dialog, you’ll see the `Plug-Ins` and `Scripts` folders.'
  prefs: []
  type: TYPE_NORMAL
- en: 21.1 About Scripts and Plug-ins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explain the concepts underlying GIMP scripts and plug-ins
    and show you how to find and install new ones. Then we briefly describe some important
    plug-ins that are worth installing. Finally, we show examples of plug-ins written
    in Python and C, as well as a script written in Scheme.
  prefs: []
  type: TYPE_NORMAL
- en: Another difference between a script and a plug-in is the programming language
    in which the components are written. Scripts are written in Scheme (called Script-Fu
    in GIMP) and stored in the `Scripts` folder. Plug-ins are written in Python or
    C and stored in the `Plug-Ins` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Scheme, Python, and C
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Scheme* is a very simple and rather old language, directly interpreted without
    any translation needed. GIMP includes an interpreter for a subset of Scheme, so
    Scheme scripts are always operational. In fact, many of the predefined plug-ins
    you’ve used so far (for example in [Chapter 12](ch12.html "Chapter 12. Color")
    or in [Chapter 17](ch17.html "Chapter 17. Filters")) are in fact scripts programmed
    in Scheme. Scheme is a functional language that uses only parentheses and whitespace
    for syntactic punctuation.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Python*, also directly interpreted, is more powerful than Scheme. It has become
    popular in the last few years and is probably progressively replacing another
    scripting language, Perl, because of its much more pleasant syntax and its wider
    range of capabilities. Python’s interpreter is not part of GIMP and needs to be
    installed separately on Windows. (It comes packaged with Linux and Mac operating
    systems.)'
  prefs: []
  type: TYPE_NORMAL
- en: '*C* is the language in which the core of GIMP is programmed, as well as most
    of the GNU/Linux operating system. An old language, C is extremely well supported
    because it allows programs to use all the capabilities of the computer efficiently.
    Programs written in C cannot be directly executed but must first be translated
    into machine language and then loaded. You do this with a *compiler*. In order
    to write a C plug-in, you must have a C compiler and development environment on
    your computer. A compiler is easy to set up on GNU/Linux and Mac OS but a bit
    trickier on Windows.'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Plug-in Browser, List view](httpatomoreillycomsourcenostarchimages1457332.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-1. The Plug-in Browser, List view
  prefs: []
  type: TYPE_NORMAL
- en: '![Looking for specific plug-ins](httpatomoreillycomsourcenostarchimages1457334.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-2. Looking for specific plug-ins
  prefs: []
  type: TYPE_NORMAL
- en: GIMP plug-ins can be written in other programming languages, especially if the
    language is compiled. Perl used to be the language of choice for writing GIMP
    plug-ins but is used less frequently today. For this reason, we consider only
    Scheme, Python, and C. To write your own plug-in, you need some knowledge of at
    least one of these languages; a complete introduction to programming in each language
    is beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Installed Plug-ins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To find out which plug-ins are already a part of your GIMP installation, use
    the Plug-in Browser (**Image: Help > Plug-in Browser**), as shown in [Figure 21-1](ch21s01.html#plug-in_browsercomma_list_view
    "Figure 21-1. The Plug-in Browser, List view"). As you can see, this installation
    has 345 plug-ins. The first tab on the left lists them alphabetically.'
  prefs: []
  type: TYPE_NORMAL
- en: When you begin typing in the SEARCH field at the top left of the Plug-in Browser,
    the plug-ins list is automatically filtered to the names that contain this substring,
    as shown in [Figure 21-2](ch21s01.html#looking_for_specific_plug-ins "Figure 21-2. Looking
    for specific plug-ins"). Click the broom at the top right to clear the filter.
  prefs: []
  type: TYPE_NORMAL
- en: The second tab offers a tree view of all plugins, which can be useful for searching
    plug-ins by category. In [Figure 21-3](ch21s01.html#plug-in_browsercomma_tree_view
    "Figure 21-3. The Plug-in Browser, Tree view"), we’ve enlarged this view by clicking
    and dragging its right boundary. As you can see, this view shows the image types
    accepted by each plug-in, as well as the installation date. In the image types,
    the letter *A* means that there is an Alpha channel, and the star is a wildcard.
    For example, *RGB** means that the Alpha channel may or may not be present.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Plug-in Browser, Tree view](httpatomoreillycomsourcenostarchimages1457336.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-3. The Plug-in Browser, Tree view
  prefs: []
  type: TYPE_NORMAL
- en: '![The Plug-in Browser, plug-in description](httpatomoreillycomsourcenostarchimages1457338.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-4. The Plug-in Browser, plug-in description
  prefs: []
  type: TYPE_NORMAL
- en: 'The right part of the dialog describes the plug-in selected at the left. For
    example, in [Figure 21-4](ch21s01.html#plug-in_browsercomma_plug-in_description
    "Figure 21-4. The Plug-in Browser, plug-in description"), you see the description
    of the Antialias tool, which is found in **Image: Filters > Enhance**.'
  prefs: []
  type: TYPE_NORMAL
- en: Finding New Plug-ins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main source of existing GIMP plug-ins is the GIMP Plugin Registry at *[http://registry.gimp.org/](http://registry.gimp.org/)*.
    Here you’ll find plug-in descriptions, links to the plug-in itself or to its home
    page, and tags that help in searching. Click a tag for a list of all matching
    plug-ins.
  prefs: []
  type: TYPE_NORMAL
- en: '![The beginning of the tag cloud](httpatomoreillycomsourcenostarchimages1457340.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-5. The beginning of the tag cloud
  prefs: []
  type: TYPE_NORMAL
- en: One convenient way to browse the registry is the *Content by tags view* (also
    called *tag cloud view*), which shows a list of all the tags with a font size
    proportional to their frequency, as shown in [Figure 21-5](ch21s01.html#beginning_of_the_tag_cloud
    "Figure 21-5. The beginning of the tag cloud"). The tags are clickable, so browsing
    all the plug-ins related to a given tag is easy.
  prefs: []
  type: TYPE_NORMAL
- en: Most plug-ins have a very detailed and complete home page, explaining how they
    work and how to install them.
  prefs: []
  type: TYPE_NORMAL
- en: 21.2 Noteworthy Plug-ins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following sections describe some interesting plug-ins available on the GIMP
    Plugin Registry. This selection is obviously subjective, and we’ve excluded a
    couple of plug-ins that we’ve already discussed, like GAP, presented in [Chapter 18](ch18.html
    "Chapter 18. Animation Tools"), and UFRaw, presented in [Handling Raw Photographs](ch19s03.html#handling_raw_photographs
    "Handling Raw Photographs").
  prefs: []
  type: TYPE_NORMAL
- en: '![The initial image (left); after applying the Wrap Effect tool (middle); after
    applying the ev_crayon_full preset](httpatomoreillycomsourcenostarchimages1457342.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-6. The initial image (left); after applying the Wrap Effect tool (middle);
    after applying the ev_crayon_full preset
  prefs: []
  type: TYPE_NORMAL
- en: Photo Effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Photo Effects is a set of plug-ins that you can use to add artistic effects
    to photos. You can find it by searching for `photo effects` at *[http://registry.gimp.org/](http://registry.gimp.org/)*.
    Once it’s installed, you’ll see a menu called PHOTO EFFECTS in the **Image: Filters
    > Decor** menu. Let’s use [Figure 21-6](ch21s02.html#initial_image_left_parenthesisleftright
    "Figure 21-6. The initial image (left); after applying the Wrap Effect tool (middle);
    after applying the ev_crayon_full preset") (left) as an example. When we apply
    the Wrap Effect tool, found in **Image: Filters > Decor > Photo effects > Artist**,
    we get the result shown in [Figure 21-6](ch21s02.html#initial_image_left_parenthesisleftright
    "Figure 21-6. The initial image (left); after applying the Wrap Effect tool (middle);
    after applying the ev_crayon_full preset") (middle).'
  prefs: []
  type: TYPE_NORMAL
- en: Photo Effects also comes with 22 predefined presets for the GIMPressionist filter
    (see [GIMPressionist](ch17s10.html#gimpressionist "GIMPressionist")). [Figure 21-6](ch21s02.html#initial_image_left_parenthesisleftright
    "Figure 21-6. The initial image (left); after applying the Wrap Effect tool (middle);
    after applying the ev_crayon_full preset") (right) shows the result of applying
    the `ev_crayon_full` preset.
  prefs: []
  type: TYPE_NORMAL
- en: G’MIC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'G’MIC (*[http://gmic.sourceforge.net/gimp.shtml](http://gmic.sourceforge.net/gimp.shtml)*)
    is a huge collection of filters (229 as this book goes to press) and effects.
    It operates as a single entry in the **Image: Filters** menu, which opens the
    dialog shown in [Figure 21-7](ch21s02.html#gapostrophemic_dialog "Figure 21-7. The
    G’MIC dialog").'
  prefs: []
  type: TYPE_NORMAL
- en: The G’MIC’s preview is updated as soon as you select a filter. When you click
    the APPLY button, the filter is immediately applied to the image, allowing you
    to transform it using several filters in sequence. Because we can’t demonstrate
    all these filters, we’ve chosen a random sample here and will demonstrate them
    using the default settings.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 21-8](ch21s02.html#after_applying_the_local_normalization_f "Figure 21-8. After
    applying the Local normalization filter (left), the B & W pencil filter (middle),
    and the Anisotropic smoothing filter (right)") (left) shows the result of applying
    the Local normalization filter found in the Colors submenu to our sample image.
    [Figure 21-8](ch21s02.html#after_applying_the_local_normalization_f "Figure 21-8. After
    applying the Local normalization filter (left), the B & W pencil filter (middle),
    and the Anisotropic smoothing filter (right)") (middle) shows the result of applying
    the B & W pencil filter found in the Artistic submenu. [Figure 21-8](ch21s02.html#after_applying_the_local_normalization_f
    "Figure 21-8. After applying the Local normalization filter (left), the B & W
    pencil filter (middle), and the Anisotropic smoothing filter (right)") (right)
    shows the same photograph after applying the Anisotropic smoothing filter, which
    is found in the Enhancement submenu.'
  prefs: []
  type: TYPE_NORMAL
- en: G’MIC is a complex plug-in, and these examples give only a taste of its capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Liquid Rescale
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Liquid Rescale (*[http://liquidrescale.wikidot.com/](http://liquidrescale.wikidot.com/)*)
    is a powerful tool that allows you to stretch or squeeze an image without changing
    the shape of objects. You’ll find the tool in the **Image: Layer** menu. In [Figure 21-9](ch21s02.html#liquid_rescale_dialog
    "Figure 21-9. The Liquid Rescale dialog"), a 2000 × 1333 photograph is shown in
    the preview window. We’ll make it more panoramic by stretching it horizontally.'
  prefs: []
  type: TYPE_NORMAL
- en: '![The G’MIC dialog](httpatomoreillycomsourcenostarchimages1457344.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-7. The G’MIC dialog
  prefs: []
  type: TYPE_NORMAL
- en: '![After applying the Local normalization filter (left), the B & W pencil filter
    (middle), and the Anisotropic smoothing filter (right)](httpatomoreillycomsourcenostarchimages1457346.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-8. After applying the Local normalization filter (left), the B & W
    pencil filter (middle), and the Anisotropic smoothing filter (right)
  prefs: []
  type: TYPE_NORMAL
- en: If we simply change the canvas width to 3000 pixels using Liquid Rescale, the
    result (shown in [Figure 21-10](ch21s02.html#result_of_resizing_without_preservation
    "Figure 21-10. The result of resizing without preservation")) is unsatisfactory
    because the person’s head is misshapen. To fix this, check the NEW button at the
    right of the tool dialog, in the FEATURE PRESERVATION MASK section, to activate
    the PRESERVE FEATURES button. Doing so creates a new layer with 50% opacity and
    temporarily changes the foreground color to a vivid green. Now we can paint the
    man and, as you can see in [Figure 21-11](ch21s02.html#defining_the_preservation_mask
    "Figure 21-11. Defining the preservation mask"), we don’t need to be very precise.
  prefs: []
  type: TYPE_NORMAL
- en: After painting the subject, return the width to 3000 pixels to get the result
    shown in [Figure 21-12](ch21s02.html#result_of_resizing_with_preservation "Figure 21-12. The
    result of resizing with preservation"). Admittedly, the ship is a bit too stretched,
    but we could have preserved its aspect ratio if we’d painted it as well.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use Liquid Rescale to discard certain features in an image. For
    example, suppose that in [Figure 21-13](ch21s02.html#initial_image-id00200 "Figure 21-13. Initial
    image") we want to discard the potted plants on both sides of the peacock. To
    do this, we click the NEW button in the FEATURE DISCARD MASK tool dialog. The
    DISCARD FEATURES button is automatically checked, a new layer is created, and
    the foreground color changes to a vivid red.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Liquid Rescale dialog](httpatomoreillycomsourcenostarchimages1457348.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-9. The Liquid Rescale dialog
  prefs: []
  type: TYPE_NORMAL
- en: '![The result of resizing without preservation](httpatomoreillycomsourcenostarchimages1457350.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-10. The result of resizing without preservation
  prefs: []
  type: TYPE_NORMAL
- en: Next, we paint the mask shown in [Figure 21-14](ch21s02.html#defining_the_discard_mask
    "Figure 21-14. Defining the discard mask"), which is a bit more challenging than
    before because the peacock tail is very close to the left pot. Then, we click
    the WIDTH button to the right of AUTO SIZE to get a width of 1103 pixels. The
    final result, shown in [Figure 21-15](ch21s02.html#resizing_with_the_discard_feature
    "Figure 21-15. Resizing with the Discard feature"), needs some retouching, but
    you should get the idea.
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining the preservation mask](httpatomoreillycomsourcenostarchimages1457352.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-11. Defining the preservation mask
  prefs: []
  type: TYPE_NORMAL
- en: '![The result of resizing with preservation](httpatomoreillycomsourcenostarchimages1457354.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-12. The result of resizing with preservation
  prefs: []
  type: TYPE_NORMAL
- en: As described on its home page, the Liquid Rescale tool offers many other possibilities,
    including an interactive mode, the ability to output a seam map (which shows how
    the image was resized), and so on. For example, [Figure 21-16](ch21s02.html#seam_maps_when_shrinking_a_portrait
    "Figure 21-16. The seam maps when shrinking a portrait") shows the seam maps when
    we make a portrait narrower (80% original width) and [Figure 21-17](ch21s02.html#seam_maps_when_enlarging_a_portrait
    "Figure 21-17. The seam maps when enlarging a portrait") shows the seam maps when
    we make it wider (120% original width). On the Output tab, we checked OUTPUT ON
    A NEW LAYER, OUTPUT THE SEAMS, and SCALE BACK TO THE ORIGINAL SIZE. In both cases,
    the rescaling left the eyes and most of the mouth intact but changed the rest
    of the face in an unnatural and unpleasant way.
  prefs: []
  type: TYPE_NORMAL
- en: '![Initial image](httpatomoreillycomsourcenostarchimages1457356.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-13. Initial image
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining the discard mask](httpatomoreillycomsourcenostarchimages1457358.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-14. Defining the discard mask
  prefs: []
  type: TYPE_NORMAL
- en: '![Resizing with the Discard feature](httpatomoreillycomsourcenostarchimages1457360.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-15. Resizing with the Discard feature
  prefs: []
  type: TYPE_NORMAL
- en: '![The seam maps when shrinking a portrait](httpatomoreillycomsourcenostarchimages1457362.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-16. The seam maps when shrinking a portrait
  prefs: []
  type: TYPE_NORMAL
- en: '![The seam maps when enlarging a portrait](httpatomoreillycomsourcenostarchimages1457364.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-17. The seam maps when enlarging a portrait
  prefs: []
  type: TYPE_NORMAL
- en: Elsamuko Scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Elsamuko collection of scripts offers a wide variety of ways to transform
    or improve pictures. The collection can be found at *[http://sites.google.com/site/elsamuko/gimp/](http://sites.google.com/site/elsamuko/gimp/)*
    and is part of the `gimp-plugin-registry` Debian package (usable on Debian and
    Ubuntu). This site also contains many other plug-ins and scripts.
  prefs: []
  type: TYPE_NORMAL
- en: '![After applying the National Geographic filter (left), the Obama Hope filter
    (middle), and the Lomo filter (right)](httpatomoreillycomsourcenostarchimages1457366.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-18. After applying the National Geographic filter (left), the Obama
    Hope filter (middle), and the Lomo filter (right)
  prefs: []
  type: TYPE_NORMAL
- en: We’ll demonstrate only three of the Elsamuko scripts, using the same photograph
    as before. These scripts generally require lots of computing power, and most build
    an image with numerous layers and layer masks.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 21-18](ch21s02.html#after_applying_the_national_geographic_f "Figure 21-18. After
    applying the National Geographic filter (left), the Obama Hope filter (middle),
    and the Lomo filter (right)") (left) shows the result of applying the **Image:
    Filters > Generic > National Geographic** filter, designed to generate high-quality
    portraits like those found in the celebrated magazine.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 21-18](ch21s02.html#after_applying_the_national_geographic_f "Figure 21-18. After
    applying the National Geographic filter (left), the Obama Hope filter (middle),
    and the Lomo filter (right)") (middle) shows the result of applying the **Image:
    Filters > Artistic > Obama Hope** filter, inspired by the famous Obama “HOPE”
    poster.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 21-18](ch21s02.html#after_applying_the_national_geographic_f "Figure 21-18. After
    applying the National Geographic filter (left), the Obama Hope filter (middle),
    and the Lomo filter (right)") (right) shows the result of applying the **Image:
    Filters > Light and Shadow > Lomo** filter, designed to simulate the results of
    using a Lomo camera, an inexpensive Russian model from the early 1990s.'
  prefs: []
  type: TYPE_NORMAL
- en: 21.3 Writing Plug-ins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using predefined plug-ins is convenient, but you won’t always find exactly
    what you need, and if you have a little programming experience, writing your own
    plug-ins can be more fun anyway. After you have written the first three or four,
    you’ll find writing them easy. In this section, we present plug-ins written in
    the three main programming languages: Scheme, Python, and C.'
  prefs: []
  type: TYPE_NORMAL
- en: Scheme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Scripts written in Scheme are called Script-Fu. Take, for example, the script
    for **Image: Colors > Map > Colormap**. This script includes the function `script-fu-makecmap-array`,
    which returns an array containing the colors for a specified palette. This function
    can be used in other scripts that need color palette information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The function is written in Scheme, and the code is shown in [Figure 21-19](ch21s03.html#script-fu_example_the_cmap_array_functio
    "Figure 21-19. A Script-Fu example: the cmap array function from the Set Colormap
    script"). Scheme is written as a sequence of embedded expressions in parentheses.
    Briefly, a Scheme function definition takes the form of `(define (name parameters)
    (expr) (expr) ...)`. This snippet of code defines the function `name` whose value
    is that of the last expression. An expression calls a function, whose name or
    symbol appears as the first element in the expression, along with any arguments
    that follow the function. An argument itself can be an expression that calls functions.'
  prefs: []
  type: TYPE_NORMAL
- en: '![A Script-Fu example: the cmap array function from the Set Colormap script](httpatomoreillycomsourcenostarchimages1457368.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21-19. A Script-Fu example: the cmap array function from the Set Colormap
    script'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, on line 29 in [Figure 21-19](ch21s03.html#script-fu_example_the_cmap_array_functio
    "Figure 21-19. A Script-Fu example: the cmap array function from the Set Colormap
    script"), the function `*` (multiplication) is called with two arguments. The
    first argument is an expression that calls the function `car`, and the second
    argument is the number `3`. The call to function `*` is actually the second argument
    to the call to `gimp-image-set-colormap` that appears on the previous line. The
    first argument is the first function parameter, and the third argument is the
    result of the `script-fu-make-cmap-array` function with the third function parameter
    as an argument.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Image: Help > Procedure Browser** to learn about a function’s arguments
    and their purpose. For example, in [Figure 21-20](ch21s03.html#procedure_browser_dialog
    "Figure 21-20. The Procedure Browser dialog"), we enter `colormap` in the Search
    field and then select a function from the list. At the right of the dialog, we
    see the type and meaning of the parameters for the chosen function, as well as
    a detailed comment.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Lines 9 to 14 of [Figure 21-19](ch21s03.html#script-fu_example_the_cmap_array_functio
    "Figure 21-19. A Script-Fu example: the cmap array function from the Set Colormap
    script") contain the declaration and initialization of the local variables of
    function `script-fu-make-cmap-array`. We can use these variables in the function
    body.'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Procedure Browser dialog](httpatomoreillycomsourcenostarchimages1457370.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-20. The Procedure Browser dialog
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the most important parts of any Script-Fu is the script registration,
    as shown in lines 34 to 44 of [Figure 21-19](ch21s03.html#script-fu_example_the_cmap_array_functio
    "Figure 21-19. A Script-Fu example: the cmap array function from the Set Colormap
    script"). The script registration gives GIMP all the information it needs to integrate
    the script into GIMP. The various parameters of `script-fu-register` provide this
    information in the following order.'
  prefs: []
  type: TYPE_NORMAL
- en: Entry in the menu, with an underscore (`_`) before the character used as an
    abbreviation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contents of the tool tip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Author name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copyright notice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copyright date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type of image to be handled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description of the type, name, and initial value parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, calling `script-fu-menu-register` places the Script-Fu in the GIMP
    menus.
  prefs: []
  type: TYPE_NORMAL
- en: 'Testing Script-Fu is easy, thanks to **Image: Filters > Script-Fu > Console**,
    which opens the dialog shown in [Figure 21-21](ch21s03.html#script-fu_console
    "Figure 21-21. The Script-Fu console"). All you need to do is enter the Scheme
    expressions in the bottom field and press ![](httpatomoreillycomsourcenostarchimages1453866.png.jpg).
    The expressions are evaluated immediately, with the result shown in the main dialog
    window.'
  prefs: []
  type: TYPE_NORMAL
- en: The BROWSE button opens the Procedure Browser dialog. When you choose a specific
    procedure and click APPLY, a call to this procedure is inserted in the Script-Fu
    console field, and then you simply need to enter your parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Script-Fu console](httpatomoreillycomsourcenostarchimages1457372.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-21. The Script-Fu console
  prefs: []
  type: TYPE_NORMAL
- en: You’ll find many Script-Fus on the Web. Some are well advertised on the GIMP
    Plugin Registry, whereas others are available on independent websites and blogs.
    See, for example, *[http://gimpfx-foundry.sourceforge.net/](http://gimpfx-foundry.sourceforge.net/)*
    or *[http://gimpscripts.com/](http://gimpscripts.com/)*.
  prefs: []
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like the name *Script-Fu* coined for Scheme scripts, *Python-Fu* is what Python
    plug-ins are called. [Figure 21-22](ch21s03.html#python-fu_example_a_fog-rendering_filter
    "Figure 21-22. A Python-Fu example: a fog-rendering filter") shows a sample Python
    program, the **Image: Filters > Render > Clouds > Fog** filter. In lines 4 to
    6, the contents of the `gimpfu` module are imported, the `time` module is imported,
    and the `gettext` function is used to internationalize all the text in the program.'
  prefs: []
  type: TYPE_NORMAL
- en: '![A Python-Fu example: a fog-rendering filter](httpatomoreillycomsourcenostarchimages1457374.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21-22. A Python-Fu example: a fog-rendering filter'
  prefs: []
  type: TYPE_NORMAL
- en: The Python-Fu body of the Render Clouds plug-in, shown from lines 8 to 36, is
    a good example of a Python program. Statements end when the line ends, except
    when they are within parentheses, as in line 17\. Embedding is denoted by indentation,
    as shown in lines 13 through 17\. Some Python syntax is inspired by the C language,
    with `=` used for assignment and `==` for comparison. The workings of this particular
    function are easy to follow once you know the meaning of GIMP’s predefined functions.
  prefs: []
  type: TYPE_NORMAL
- en: Python-Fu is registered in GIMP in the same way as Script-Fu (lines 38 to 59),
    except for some slight differences in the arguments of the `register` function,
    especially in the description of the Python-Fu arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Selecting **Image: Filters > Python-Fu > Console** opens a dialog similar to
    the Script-Fu Console. You can use this dialog to enter Python statements directly
    and test their effect. The Procedure Browser is used in a similar way, allowing
    you to insert typed code into the proper function call.'
  prefs: []
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By nature, a C program is longer than its equivalent in Scheme or in Python
    because it is programmed in a lower-level language. You’ll find a good three-part
    tutorial about building a C plugin for GIMP at *[http://developer.gimp.org/plug-ins.html](http://developer.gimp.org/plug-ins.html)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The shortest C plug-in is the Semi-Flatten plug-in, found in the **Image: Filters
    > Web** menu. We removed as many blank lines as possible but still had to cut
    it into two parts ([Figure 21-23](ch21s03.html#c_plug-in_example_semi-flatten_left_pare
    "Figure 21-23. A C plug-in example: Semi-Flatten (part 1)") and [Figure 21-24](ch21s03.html#c_plug-in_example_semi-flatten_l-id00201
    "Figure 21-24. A C plug-in example: Semi-Flatten (part 2)")) to display the full
    program. The file’s heading is shown in lines 1 to 20, along with its declaration
    of three visible functions, some static variables, and one constant.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This C plug-in contains four function definitions. Because none of these functions
    returns a result, their type is always `static void`. The `query` function (lines
    23 to 48) has no parameter and is called the first time the plug-in is used. It
    calls `gimp_install_procedure` to register the plug-in (in a similar way to a
    Python plug-in). Note that the `semiflatten` plug-in is installed both in the
    **Image: Filters > Web** and in the **Image: Layer > Transparency** menus.'
  prefs: []
  type: TYPE_NORMAL
- en: The `semiflatten_func` function (lines 50 to 60) is a simple auxiliary function
    called indirectly by `semiflatten` (lines 61 to 69), itself an auxiliary function.
    The `run` function (lines 71 to 111) is called when we call the plug-in and makes
    the actual changes. Note that Semi-Flatten does not open a dialog.
  prefs: []
  type: TYPE_NORMAL
- en: The most crucial point in the plug-in definition is the `GimpPlugInInfo PLUG_IN_INFO`
    structure, declared in the heading. This definition declares the `query` and `run`
    functions. The call to `MAIN()` shown on line 21 is a C macro that initializes
    the arguments and calls `PLUG_IN_INFO`. These sorts of definitions are required
    for all C plug-ins.
  prefs: []
  type: TYPE_NORMAL
- en: Although a casual programmer with a good knowledge of GIMP should be able to
    program a short Script-Fu or Python-Fu plug-in, using the Procedure Browser to
    search in the GIMP procedural database, most likely only a serious C programmer
    will be able to build even a simple C plug-in.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, installing a C plug-in is nontrivial and requires a C compiling environment.
    The `libgimp` headers must be installed on the computer to provide all needed
    declarations, and a tool called `gimptool` is also needed to compile and install
    the plug-in (see *[http://developer.gimp.org/plug-ins.html](http://developer.gimp.org/plug-ins.html)*
    for more information).
  prefs: []
  type: TYPE_NORMAL
- en: '![A C plug-in example: Semi-Flatten (part 1)](httpatomoreillycomsourcenostarchimages1457376.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21-23. A C plug-in example: Semi-Flatten (part 1)'
  prefs: []
  type: TYPE_NORMAL
- en: '![A C plug-in example: Semi-Flatten (part 2)](httpatomoreillycomsourcenostarchimages1457378.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21-24. A C plug-in example: Semi-Flatten (part 2)'
  prefs: []
  type: TYPE_NORMAL
