- en: '**6'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AN LCD Reminder**
  prefs: []
  type: TYPE_NORMAL
- en: In this project, you’ll connect a character LCD to your Raspberry Pi to display
    a scrolling reminder message. You’ll start by displaying static text for short
    messages and then learn how to display scrolling text ideal for longer messages.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0085-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: 16×2 Hi tachi HD44780-compatible LCD
  prefs: []
  type: TYPE_NORMAL
- en: 10 kΩ potent iometer
  prefs: []
  type: TYPE_NORMAL
- en: Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: '**SOFTWARE REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Adafruit_CharLCD library
  prefs: []
  type: TYPE_NORMAL
- en: '**INTRODUCING THE LIQUID CRYSTAL DISPLAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The simplest and cheapest display screen around is the *liquid crystal display
    (LCD)*. LCDs are found in everyday electronics devices like vending machines,
    calculators (see [Figure 6-1](ch06.xhtml#ch06fig1)), parking meters, and printers,
    and are ideal for displaying text or small icons.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0086-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 6-1:** Calculator with an LCD'
  prefs: []
  type: TYPE_NORMAL
- en: LCDs are measured according to the number of rows and columns of characters
    that fit on the screen. A 16×2 LCD can display 2 rows of 16 characters each. You’ll
    find sizes ranging from 8×1 to 40×4.
  prefs: []
  type: TYPE_NORMAL
- en: LCDs also vary in background color. You can find a wide variety of background
    colors, including RGB background lights that let you create any color.
  prefs: []
  type: TYPE_NORMAL
- en: The most common LCD modules use the Hitachi HD44780 chip, which allows you to
    use custom characters. [Figure 6-2](ch06.xhtml#ch06fig2) shows a standard 16×2
    Hitachi HD44780–compatible LCD; we recommend using this type for this project.
    Most 16×2 screens will be compatible, but before you buy one, check the part’s
    data sheet just to be safe. You can also use 20×4 LCDs as long as they are Hitachi
    HD44780–compatible.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0086-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 6-2:** A standard 16×2 Hitachi HD44780–compatible LCD'
  prefs: []
  type: TYPE_NORMAL
- en: If you look closely at [Figure 6-2](ch06.xhtml#ch06fig2), you’ll see 32 rectangles
    made of 5×8 pixels. The combination of on and off pixels is what makes up the
    character shapes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Soldering the Headers**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: More likely than not, your LCD module will come with the header pins separate,
    as shown in [Figure 6-3](ch06.xhtml#ch06fig3). You’ll need to solder the pins
    to your module to make it breadboard-friendly. Put the pins in the available holes—there
    should be 16 pins for 16 holes—with the long end pointing down and solder them
    in place.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0087-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 6-3:** LCD with separate header pins'
  prefs: []
  type: TYPE_NORMAL
- en: '**The LCD Module Pinout**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The LCD module pins are numbered from 1 to 16, from left to right when the
    pins are above the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **PIN** | **SYMBOL** | **DESCRIPTION** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | VSS | Ground |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | VDD | Power supply |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | V0 | Contrast adjustment |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | RS | Register selection |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | R/W | Read/Write selection |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | E | Enable |'
  prefs: []
  type: TYPE_TB
- en: '| 7–14 | DB0–DB7 | Data pins |'
  prefs: []
  type: TYPE_TB
- en: '| 15 | LEDA | Backlight anode (5V) |'
  prefs: []
  type: TYPE_TB
- en: '| 16 | LEDK | Backlight cathode (–) |'
  prefs: []
  type: TYPE_TB
- en: '**WARNING**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The Raspberry Pi GPIOs are designed for 3.3 V, but most LCDs are 5 V. This
    isn’t a problem as long as you’re only sending data out of the Pi and not reading
    data from the screen to the Pi. With a 5 V screen,* do not connect the R/W pin
    of the display to the Pi. *This pin sends data at 5 V, and it will very likely
    fry your Pi!*'
  prefs: []
  type: TYPE_NORMAL
- en: VSS is a ground pin and should be connected to GND. VDD is a power pin and should
    be given 5 V or 3.3 V depending on the type of LCD you are working with; most
    require 5 V.
  prefs: []
  type: TYPE_NORMAL
- en: V0 allows you to adjust the contrast between the characters and the backlight
    when the LCD is connected to a potentiometer.
  prefs: []
  type: TYPE_NORMAL
- en: RS, R/W, and E are control pins. When using the screen to display text only,
    as in this project, you should permanently connect R/W directly to ground; in
    other words, you’ll only be writing to the LCD and not reading from it.
  prefs: []
  type: TYPE_NORMAL
- en: Pins 7 to 14 are data pins, used to send information. Pins 15 and 16 are the
    anode and cathode for the backlight.
  prefs: []
  type: TYPE_NORMAL
- en: 'Though the LCD module has 16 pins, you need only 6 of them to communicate with
    your Raspberry Pi: 4, 6, 11, 12, 13, and 14.'
  prefs: []
  type: TYPE_NORMAL
- en: '**WIRING YOUR CIRCUIT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that your LCD is ready to use, you can start building this project’s circuit.
    Follow these steps to wire the LCD and Pi, using the circuit diagram in [Figure
    6-4](ch06.xhtml#ch06fig4) for reference.
  prefs: []
  type: TYPE_NORMAL
- en: Connect the breadboard power rails to 5 V and GND.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To power the LCD, connect 5 V from the power rails to LCD pin 2 (VDD) and to
    LCD pin 15 (LEDA). Connect LCD pin 1 (VSS), pin 5 (R/W), and pin 16 (LEDK) to
    the GND rail on the breadboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a potentiometer to adjust the contrast: connect one of the outer leads
    to the GND and the other outer lead to 5 V, and then connect the middle lead to
    LCD pin 3 (V0).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the Pi’s GPIO pins as shown in the following table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **LCD** | **RASPBERRY PI** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 4 (RS) | GPIO 27 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 (E) | GPIO 22 |'
  prefs: []
  type: TYPE_TB
- en: '| 11 (DB4) | GPIO 25 |'
  prefs: []
  type: TYPE_TB
- en: '| 12 (DB5) | GPIO 24 |'
  prefs: []
  type: TYPE_TB
- en: '| 13 (DB6) | GPIO 23 |'
  prefs: []
  type: TYPE_TB
- en: '| 14 (DB7) | GPIO 18 |'
  prefs: []
  type: TYPE_TB
- en: '![image](../images/f0089-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 6-4:** LCD wired to the Raspberry Pi'
  prefs: []
  type: TYPE_NORMAL
- en: When you’re finished wiring, try adjusting the LCD contrast by rotating the
    potentiometer; you should see the backlighting change. If the contrast doesn’t
    change, double-check the wiring before moving on.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE SCRIPT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before you can write the script to display messages on the LCD, you need to
    install the Python library for a character LCD, Adafruit_CharLCD. This library
    features a lot of functions that make it easy to control the LCD.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing the Python Library for a Character LCD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Go to the Raspberry Pi desktop taskbar and open the terminal. Before installing
    the Adafruit_CharLCD library, you need to install the following dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When prompted, type y and press ENTER.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the desktop, create a folder called *Libraries*, and change directory
    to the newly created folder with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Download the installation files by entering the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate to the *Adafruit_Python_CharLCD* directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, execute the following command to install the Adafruit_CharLCD library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations! You successfully installed the Python library for a character
    LCD. We encourage you to navigate through the *Examples* folder and take a look.
  prefs: []
  type: TYPE_NORMAL
- en: '**Displaying a Character Message**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Go to your *Projects* folder and create a new folder called *Displays*. Open
    **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new script.
    Then, enter the following code into the Python Editor and save the script as *character_lcd.py*
    (remember that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You start by importing the previously installed character LCD library at ➊.
    Then, at ➋ you configure your Pi pins. At ➌, you define your LCD size. If you’re
    using a 20×4 LCD, you need to change those two lines of code accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: After that, the LCD is initialized ➍, and you write your message inside the
    function `lcd.message('`string`')` between the single quotes ➎. The `\n` escape
    character tells the LCD to display the text that follows on the next line. Feel
    free to change this message to anything you like!
  prefs: []
  type: TYPE_NORMAL
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script, and your LCD
    should display the text, as in [Figure 6-5](ch06.xhtml#ch06fig5).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0091-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 6-5:** Your circuit displaying a static message'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding Other Functionality**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It’s worth knowing a few other useful functions you can use for more than just
    displaying text; you may want to set the cursor to a certain position or clear
    the display in preparation for new messages, for example. The library you’ve installed
    provides the following functions for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '`lcd.message(`string`)` displays the message written between brackets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lcd.clear()` clears the display.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lcd.show_cursor(`boolean`)` shows the cursor after the message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lcd.blink(`boolean`)` shows a blinking cursor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lcd.move_right()` moves the displayed message one character to the right.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lcd.move_left()` moves the displayed message one character to the left.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lcd.home()` sets the cursor to the first column and first row (0,0).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lcd.set_cursor(int, int)` sets the cursor to the specified column and row.
    For example, `lcd.set_cursor(2, 1)` sets the cursor to the third column and second
    row.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data types shown in italic tell you what kind of value you need to enter
    as an argument; for example, in place of boolean you’d enter `True` or `False`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scrolling a Reminder Message**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This LCD screen is pretty small, so you’ll get stuck if you try to display messages
    longer than 32 characters. So, now we’ll show you how to write a script to display
    a longer message that scrolls across the screen, like a reminder for a doctor
    appointment you can’t miss. In the first row, you’ll have a title for your message,
    like “Reminder” or “Don’t forget,” and in the second row your reminder message
    will scroll by.
  prefs: []
  type: TYPE_NORMAL
- en: 'Displaying a scrolling message is not as straightforward as showing a static
    message, so let’s think about what we want to happen before we write our code:'
  prefs: []
  type: TYPE_NORMAL
- en: The first row displays a static title.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second row displays a scrolling message.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The scrolling message moves from right to left.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The characters should appear from the rightmost column.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The characters should disappear at the leftmost column.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The message scrolls forever until stopped. Inside the *Displays* folder, create
    a new script with **Python 3 (IDLE)** called *scrolling_text.py* and enter the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You’re already familiar with importing the Adafruit_CharLCD library, configuring
    the Raspberry Pi pins, defining the screen size, and initializing the LCD.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, you also need to import the time library ➊ to use functions
    related to time. At ➋ and ➌, you assign the text that will be displayed as the
    title and reminder messages, respectively. The `delay` ➍ will be the time a character
    stays in one place before moving one character to the left. In this case, you
    set the delay to `0.3` seconds; the lower the delay, the faster the text will
    scroll.
  prefs: []
  type: TYPE_NORMAL
- en: 'At ➎, you create a function called `scroll_message(``*string*, *float*)` that
    accepts two parameters: a string that will be your `reminder` and a float that
    will be the `delay`. Inside the function you start by creating a `padding` variable
    that consists of a blank character multiplied by the number of columns your LCD
    has. This will fill all your character slots initially with a blank square variable,
    creating the illusion that characters are appearing gradually. Then you create
    a new variable called `reminder_message` that is the concatenation of the `padding`,
    the `reminder`, and one blank space. You need to add this extra blank space to
    create the disappearing effect of the `reminder_message`.'
  prefs: []
  type: TYPE_NORMAL
- en: The function goes through a `for` ➏ loop from `0` to the length of the `reminder_message`.
    The function `len(`object`)` returns the length of an object—in this case, the
    number of characters in the `reminder_message` string, which tells us how many
    times to loop.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Python uses* zero-based indexing, *which means that indexes start counting
    at zero. For instance, the first character of a string has index `0`.*'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the loop, the code starts by setting the cursor to the first column,
    second row, where you want to start displaying your reminder. In the next line,
    `reminder_message[i:(i+lcd_columns)]` truncates your `reminder_message`, returning
    the characters from index `i` to index number `i+lcd_columns` exclusively.
  prefs: []
  type: TYPE_NORMAL
- en: Each time the loop runs, you will display a different part of your message;
    this is what actually creates the scrolling effect (see [Figure 6-6](ch06.xhtml#ch06fig6)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0094-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 6-6:** Truncating a string to make a scrolling effect'
  prefs: []
  type: TYPE_NORMAL
- en: After displaying the full message, the code waits the number of seconds assigned
    in the `delay` variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➐, you clear the screen and display the `title` message from the first column,
    in the first row.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, at ➑, you create a `while` loop that is always `True`. This is a little
    trick to make something run forever and ever. Inside that loop you call the function
    `scroll_message(``*string*, *float*)` with your own arguments: `reminder` and
    `delay`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Running the Script**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. Unfortunately,
    we can’t show the text moving in a book, but you get the idea!
  prefs: []
  type: TYPE_NORMAL
- en: '**TAKING IT FURTHER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We recommend that you modify the sample script we’ve given you with the coding
    tricks you’ve learned here and earlier, and experiment with the functions shown
    in [“Adding Other Functionality”](ch06.xhtml#lev71) on [page 91](ch06.xhtml#page_91)
    to get familiar with the LCD. When you’re done, here are some projects to try:'
  prefs: []
  type: TYPE_NORMAL
- en: Build a weather forecaster using the LCD display—take a look at [Project 7](ch07.xhtml#ch07),
    in which we show how to get weather data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display messages based on weather conditions, like “Don’t forget your umbrella.”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display sensor data on the LCD—check out [Projects 9](ch09.xhtml#ch09)–[12](ch12.xhtml#ch12)
    to learn how to read data from a sensor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
