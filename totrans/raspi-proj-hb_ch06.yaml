- en: '**6'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**6**'
- en: AN LCD Reminder**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**LCD提醒**'
- en: In this project, you’ll connect a character LCD to your Raspberry Pi to display
    a scrolling reminder message. You’ll start by displaying static text for short
    messages and then learn how to display scrolling text ideal for longer messages.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将把字符LCD连接到树莓派上，显示一个滚动的提醒信息。你将首先显示静态文本，适用于短信息，然后学习如何显示滚动文本，更适合长信息。
- en: '![image](../images/f0085-01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0085-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需零件**'
- en: Raspberry Pi
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派
- en: Breadboard
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 面包板
- en: 16×2 Hi tachi HD44780-compatible LCD
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 16×2 Hitachi HD44780兼容LCD
- en: 10 kΩ potent iometer
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 10 kΩ 电位计
- en: Jumper wires
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线
- en: '**SOFTWARE REQUIRED**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需软件**'
- en: Adafruit_CharLCD library
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Adafruit_CharLCD库
- en: '**INTRODUCING THE LIQUID CRYSTAL DISPLAY**'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍液晶显示器**'
- en: The simplest and cheapest display screen around is the *liquid crystal display
    (LCD)*. LCDs are found in everyday electronics devices like vending machines,
    calculators (see [Figure 6-1](ch06.xhtml#ch06fig1)), parking meters, and printers,
    and are ideal for displaying text or small icons.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 市面上最简单且最便宜的显示屏是*液晶显示器（LCD）*。LCD常见于日常电子设备，如自动售货机、计算器（见[图6-1](ch06.xhtml#ch06fig1)）、停车计时器和打印机，非常适合显示文本或小图标。
- en: '![image](../images/f0086-01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0086-01.jpg)'
- en: '**FIGURE 6-1:** Calculator with an LCD'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-1：** 带LCD的计算器'
- en: LCDs are measured according to the number of rows and columns of characters
    that fit on the screen. A 16×2 LCD can display 2 rows of 16 characters each. You’ll
    find sizes ranging from 8×1 to 40×4.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: LCD的尺寸是根据屏幕上能显示的字符的行数和列数来测量的。16×2的LCD可以显示2行，每行16个字符。你会看到尺寸范围从8×1到40×4。
- en: LCDs also vary in background color. You can find a wide variety of background
    colors, including RGB background lights that let you create any color.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: LCD的背景颜色也有所不同。你可以找到各种背景颜色，包括RGB背光灯，允许你创建任意颜色。
- en: The most common LCD modules use the Hitachi HD44780 chip, which allows you to
    use custom characters. [Figure 6-2](ch06.xhtml#ch06fig2) shows a standard 16×2
    Hitachi HD44780–compatible LCD; we recommend using this type for this project.
    Most 16×2 screens will be compatible, but before you buy one, check the part’s
    data sheet just to be safe. You can also use 20×4 LCDs as long as they are Hitachi
    HD44780–compatible.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的LCD模块使用Hitachi HD44780芯片，允许你使用自定义字符。[图6-2](ch06.xhtml#ch06fig2)显示了一个标准的16×2
    Hitachi HD44780兼容LCD；我们推荐在这个项目中使用这种类型。大多数16×2屏幕是兼容的，但在购买之前，请查阅零件的资料表以确保兼容。你也可以使用20×4的LCD，只要它们是Hitachi
    HD44780兼容的。
- en: '![image](../images/f0086-02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0086-02.jpg)'
- en: '**FIGURE 6-2:** A standard 16×2 Hitachi HD44780–compatible LCD'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-2：** 标准16×2 Hitachi HD44780兼容LCD'
- en: If you look closely at [Figure 6-2](ch06.xhtml#ch06fig2), you’ll see 32 rectangles
    made of 5×8 pixels. The combination of on and off pixels is what makes up the
    character shapes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细观察[图6-2](ch06.xhtml#ch06fig2)，你会看到32个矩形，每个矩形由5×8像素组成。开关像素的组合构成了字符的形状。
- en: '**Soldering the Headers**'
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**焊接头引脚**'
- en: More likely than not, your LCD module will come with the header pins separate,
    as shown in [Figure 6-3](ch06.xhtml#ch06fig3). You’ll need to solder the pins
    to your module to make it breadboard-friendly. Put the pins in the available holes—there
    should be 16 pins for 16 holes—with the long end pointing down and solder them
    in place.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能你的LCD模块会配有分离的头引脚，如[图6-3](ch06.xhtml#ch06fig3)所示。你需要将引脚焊接到模块上，使其适合面包板。将引脚插入可用的孔中——应该有16个引脚对应16个孔——并确保长端朝下，然后将其焊接固定。
- en: '![image](../images/f0087-01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0087-01.jpg)'
- en: '**FIGURE 6-3:** LCD with separate header pins'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-3：** 带有分离头引脚的LCD'
- en: '**The LCD Module Pinout**'
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**LCD模块引脚图**'
- en: 'The LCD module pins are numbered from 1 to 16, from left to right when the
    pins are above the screen:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当引脚位于屏幕上方时，LCD模块的引脚编号从1到16，从左到右排列：
- en: '| **PIN** | **SYMBOL** | **DESCRIPTION** |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| **引脚** | **符号** | **描述** |'
- en: '| --- | --- | --- |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 1 | VSS | Ground |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 1 | VSS | 地面 |'
- en: '| 2 | VDD | Power supply |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 2 | VDD | 电源 |'
- en: '| 3 | V0 | Contrast adjustment |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 3 | V0 | 对比度调节 |'
- en: '| 4 | RS | Register selection |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 4 | RS | 寄存器选择 |'
- en: '| 5 | R/W | Read/Write selection |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 5 | R/W | 读/写选择 |'
- en: '| 6 | E | Enable |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 6 | E | 启用 |'
- en: '| 7–14 | DB0–DB7 | Data pins |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 7–14 | DB0–DB7 | 数据引脚 |'
- en: '| 15 | LEDA | Backlight anode (5V) |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 15 | LEDA | 背光阳极（5V） |'
- en: '| 16 | LEDK | Backlight cathode (–) |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 16 | LEDK | 背光阴极（–） |'
- en: '**WARNING**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*The Raspberry Pi GPIOs are designed for 3.3 V, but most LCDs are 5 V. This
    isn’t a problem as long as you’re only sending data out of the Pi and not reading
    data from the screen to the Pi. With a 5 V screen,* do not connect the R/W pin
    of the display to the Pi. *This pin sends data at 5 V, and it will very likely
    fry your Pi!*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*树莓派的GPIO引脚设计为3.3 V，但大多数LCD显示器为5 V。只要你只是从树莓派发送数据，而不是从屏幕读取数据，这不会成为问题。使用5 V屏幕时，*不要将显示器的R/W引脚连接到树莓派。*这个引脚传输5
    V的数据，很可能会烧坏你的树莓派！*'
- en: VSS is a ground pin and should be connected to GND. VDD is a power pin and should
    be given 5 V or 3.3 V depending on the type of LCD you are working with; most
    require 5 V.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: VSS是地引脚，应连接到GND。VDD是电源引脚，根据你使用的LCD类型，应该提供5 V或3.3 V；大多数LCD需要5 V。
- en: V0 allows you to adjust the contrast between the characters and the backlight
    when the LCD is connected to a potentiometer.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: V0允许你在LCD连接到电位器时调整字符与背光之间的对比度。
- en: RS, R/W, and E are control pins. When using the screen to display text only,
    as in this project, you should permanently connect R/W directly to ground; in
    other words, you’ll only be writing to the LCD and not reading from it.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: RS、R/W和E是控制引脚。当只使用屏幕显示文本时，像本项目那样，你应该将R/W引脚永久连接到地面；换句话说，你只会写入数据到LCD，而不是从它读取数据。
- en: Pins 7 to 14 are data pins, used to send information. Pins 15 and 16 are the
    anode and cathode for the backlight.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 引脚7到14是数据引脚，用于传输信息。引脚15和16是背光的阳极和阴极。
- en: 'Though the LCD module has 16 pins, you need only 6 of them to communicate with
    your Raspberry Pi: 4, 6, 11, 12, 13, and 14.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然LCD模块有16个引脚，但你只需要其中6个来与树莓派进行通信：4、6、11、12、13和14。
- en: '**WIRING YOUR CIRCUIT**'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**连接电路**'
- en: Now that your LCD is ready to use, you can start building this project’s circuit.
    Follow these steps to wire the LCD and Pi, using the circuit diagram in [Figure
    6-4](ch06.xhtml#ch06fig4) for reference.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在LCD已经准备好使用，你可以开始搭建项目电路。按照以下步骤连接LCD和树莓派，参考[图6-4](ch06.xhtml#ch06fig4)中的电路图。
- en: Connect the breadboard power rails to 5 V and GND.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将面包板的电源轨连接到5 V和GND。
- en: To power the LCD, connect 5 V from the power rails to LCD pin 2 (VDD) and to
    LCD pin 15 (LEDA). Connect LCD pin 1 (VSS), pin 5 (R/W), and pin 16 (LEDK) to
    the GND rail on the breadboard.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了给LCD供电，将电源轨的5 V连接到LCD引脚2（VDD）和LCD引脚15（LEDA）。将LCD引脚1（VSS）、引脚5（R/W）和引脚16（LEDK）连接到面包板上的GND轨。
- en: 'Add a potentiometer to adjust the contrast: connect one of the outer leads
    to the GND and the other outer lead to 5 V, and then connect the middle lead to
    LCD pin 3 (V0).'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个电位器来调整对比度：将一个外部引脚连接到GND，另一个外部引脚连接到5 V，然后将中间引脚连接到LCD引脚3（V0）。
- en: Connect the Pi’s GPIO pins as shown in the following table.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照下表连接树莓派的GPIO引脚。
- en: '| **LCD** | **RASPBERRY PI** |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| **LCD** | **树莓派** |'
- en: '| --- | --- |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 4 (RS) | GPIO 27 |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 4 (RS) | GPIO 27 |'
- en: '| 6 (E) | GPIO 22 |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 6 (E) | GPIO 22 |'
- en: '| 11 (DB4) | GPIO 25 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 11 (DB4) | GPIO 25 |'
- en: '| 12 (DB5) | GPIO 24 |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 12 (DB5) | GPIO 24 |'
- en: '| 13 (DB6) | GPIO 23 |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 13 (DB6) | GPIO 23 |'
- en: '| 14 (DB7) | GPIO 18 |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 14 (DB7) | GPIO 18 |'
- en: '![image](../images/f0089-01.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0089-01.jpg)'
- en: '**FIGURE 6-4:** LCD wired to the Raspberry Pi'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-4：** LCD与树莓派的连接示意图'
- en: When you’re finished wiring, try adjusting the LCD contrast by rotating the
    potentiometer; you should see the backlighting change. If the contrast doesn’t
    change, double-check the wiring before moving on.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 完成连接后，尝试旋转电位器调整LCD对比度；你应该看到背光发生变化。如果对比度没有变化，请在继续之前仔细检查接线。
- en: '**WRITING THE SCRIPT**'
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写脚本**'
- en: Before you can write the script to display messages on the LCD, you need to
    install the Python library for a character LCD, Adafruit_CharLCD. This library
    features a lot of functions that make it easy to control the LCD.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在你可以编写脚本在LCD上显示信息之前，需要安装用于字符LCD的Python库Adafruit_CharLCD。这个库提供了很多功能，方便你控制LCD。
- en: '**Installing the Python Library for a Character LCD**'
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**安装字符LCD的Python库**'
- en: 'Go to the Raspberry Pi desktop taskbar and open the terminal. Before installing
    the Adafruit_CharLCD library, you need to install the following dependencies:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 打开树莓派桌面的任务栏，打开终端。在安装Adafruit_CharLCD库之前，你需要安装以下依赖项：
- en: '[PRE0]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When prompted, type y and press ENTER.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当出现提示时，输入y并按下ENTER键。
- en: 'Navigate to the desktop, create a folder called *Libraries*, and change directory
    to the newly created folder with the following commands:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 前往桌面，创建一个名为*Libraries*的文件夹，并通过以下命令切换到新创建的文件夹：
- en: '[PRE1]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Download the installation files by entering the following command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 输入以下命令下载安装文件：
- en: '[PRE2]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Navigate to the *Adafruit_Python_CharLCD* directory:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, execute the following command to install the Adafruit_CharLCD library:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Congratulations! You successfully installed the Python library for a character
    LCD. We encourage you to navigate through the *Examples* folder and take a look.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '**Displaying a Character Message**'
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Go to your *Projects* folder and create a new folder called *Displays*. Open
    **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new script.
    Then, enter the following code into the Python Editor and save the script as *character_lcd.py*
    (remember that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You start by importing the previously installed character LCD library at ➊.
    Then, at ➋ you configure your Pi pins. At ➌, you define your LCD size. If you’re
    using a 20×4 LCD, you need to change those two lines of code accordingly.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: After that, the LCD is initialized ➍, and you write your message inside the
    function `lcd.message('`string`')` between the single quotes ➎. The `\n` escape
    character tells the LCD to display the text that follows on the next line. Feel
    free to change this message to anything you like!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script, and your LCD
    should display the text, as in [Figure 6-5](ch06.xhtml#ch06fig5).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0091-01.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 6-5:** Your circuit displaying a static message'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding Other Functionality**'
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It’s worth knowing a few other useful functions you can use for more than just
    displaying text; you may want to set the cursor to a certain position or clear
    the display in preparation for new messages, for example. The library you’ve installed
    provides the following functions for you:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '`lcd.message(`string`)` displays the message written between brackets.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lcd.clear()` clears the display.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lcd.show_cursor(`boolean`)` shows the cursor after the message.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lcd.blink(`boolean`)` shows a blinking cursor.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lcd.move_right()` moves the displayed message one character to the right.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lcd.move_left()` moves the displayed message one character to the left.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lcd.home()` sets the cursor to the first column and first row (0,0).'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lcd.set_cursor(int, int)` sets the cursor to the specified column and row.
    For example, `lcd.set_cursor(2, 1)` sets the cursor to the third column and second
    row.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data types shown in italic tell you what kind of value you need to enter
    as an argument; for example, in place of boolean you’d enter `True` or `False`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '**Scrolling a Reminder Message**'
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This LCD screen is pretty small, so you’ll get stuck if you try to display messages
    longer than 32 characters. So, now we’ll show you how to write a script to display
    a longer message that scrolls across the screen, like a reminder for a doctor
    appointment you can’t miss. In the first row, you’ll have a title for your message,
    like “Reminder” or “Don’t forget,” and in the second row your reminder message
    will scroll by.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这个LCD屏幕相当小，因此如果尝试显示超过32个字符的消息，屏幕会显示不全。所以，现在我们将向你展示如何编写一个脚本，显示一条更长的消息，并让它在屏幕上滚动，就像一个你不能错过的医生预约提醒。在第一行，你会显示消息的标题，比如“Reminder”或“Don’t
    forget”，在第二行，你的提醒消息将滚动显示。
- en: 'Displaying a scrolling message is not as straightforward as showing a static
    message, so let’s think about what we want to happen before we write our code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 显示滚动消息不像显示静态消息那么简单，所以在编写代码之前，我们需要思考一下我们希望发生什么：
- en: The first row displays a static title.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一行显示一个静态标题。
- en: The second row displays a scrolling message.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二行显示一个滚动消息。
- en: The scrolling message moves from right to left.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滚动消息应该从右向左移动。
- en: The characters should appear from the rightmost column.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符应从最右侧列出现。
- en: The characters should disappear at the leftmost column.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符应该从最左侧消失。
- en: 'The message scrolls forever until stopped. Inside the *Displays* folder, create
    a new script with **Python 3 (IDLE)** called *scrolling_text.py* and enter the
    following code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 消息会一直滚动，直到停止。在*Displays*文件夹中，创建一个新的脚本，使用**Python 3 (IDLE)**，命名为*scrolling_text.py*，然后输入以下代码：
- en: '[PRE6]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You’re already familiar with importing the Adafruit_CharLCD library, configuring
    the Raspberry Pi pins, defining the screen size, and initializing the LCD.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经熟悉如何导入Adafruit_CharLCD库，配置Raspberry Pi的引脚，定义屏幕大小，以及初始化LCD。
- en: For this example, you also need to import the time library ➊ to use functions
    related to time. At ➋ and ➌, you assign the text that will be displayed as the
    title and reminder messages, respectively. The `delay` ➍ will be the time a character
    stays in one place before moving one character to the left. In this case, you
    set the delay to `0.3` seconds; the lower the delay, the faster the text will
    scroll.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，你还需要导入时间库➊，以便使用与时间相关的函数。在➋和➌处，分别为标题和提醒消息分配要显示的文本。`delay` ➍是字符停留在一个位置的时间，之后向左移动一个字符。在这个例子中，`delay`被设置为`0.3`秒；延迟时间越短，文本滚动得越快。
- en: 'At ➎, you create a function called `scroll_message(``*string*, *float*)` that
    accepts two parameters: a string that will be your `reminder` and a float that
    will be the `delay`. Inside the function you start by creating a `padding` variable
    that consists of a blank character multiplied by the number of columns your LCD
    has. This will fill all your character slots initially with a blank square variable,
    creating the illusion that characters are appearing gradually. Then you create
    a new variable called `reminder_message` that is the concatenation of the `padding`,
    the `reminder`, and one blank space. You need to add this extra blank space to
    create the disappearing effect of the `reminder_message`.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在➎处，你创建了一个名为`scroll_message(``*string*, *float*)`的函数，它接受两个参数：一个字符串作为`reminder`，一个浮动值作为`delay`。在函数内部，你首先创建一个`padding`变量，它是一个空格字符，重复LCD屏幕列数的次数。这个操作会初始填充所有的字符槽，用空白方块变量，创造字符逐渐出现的错觉。然后你创建一个新的变量`reminder_message`，它是`padding`、`reminder`和一个空格连接在一起的结果。你需要添加这个额外的空格来创建`reminder_message`消失的效果。
- en: The function goes through a `for` ➏ loop from `0` to the length of the `reminder_message`.
    The function `len(`object`)` returns the length of an object—in this case, the
    number of characters in the `reminder_message` string, which tells us how many
    times to loop.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数通过一个`for` ➏ 循环从`0`到`reminder_message`的长度进行迭代。`len(`object`)`函数返回一个对象的长度——在这里是`reminder_message`字符串中的字符数，这告诉我们循环的次数。
- en: '**NOTE**'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Python uses* zero-based indexing, *which means that indexes start counting
    at zero. For instance, the first character of a string has index `0`.*'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*Python使用*从零开始的索引，*这意味着索引是从零开始计算的。例如，字符串的第一个字符的索引是`0`。*'
- en: Inside the loop, the code starts by setting the cursor to the first column,
    second row, where you want to start displaying your reminder. In the next line,
    `reminder_message[i:(i+lcd_columns)]` truncates your `reminder_message`, returning
    the characters from index `i` to index number `i+lcd_columns` exclusively.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环内部，代码首先将光标设置为第二行的第一列，您希望从那里开始显示提醒信息。接下来一行，`reminder_message[i:(i+lcd_columns)]`截断了您的`reminder_message`，返回从索引`i`到索引`i+lcd_columns`（不包括`i+lcd_columns`）的字符。
- en: Each time the loop runs, you will display a different part of your message;
    this is what actually creates the scrolling effect (see [Figure 6-6](ch06.xhtml#ch06fig6)).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 每次循环运行时，您都会显示消息的不同部分；这就是实际创建滚动效果的方式（参见[图6-6](ch06.xhtml#ch06fig6)）。
- en: '![image](../images/f0094-01.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0094-01.jpg)'
- en: '**FIGURE 6-6:** Truncating a string to make a scrolling effect'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6-6：** 截断字符串以制作滚动效果'
- en: After displaying the full message, the code waits the number of seconds assigned
    in the `delay` variable.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在显示完整消息后，代码会等待`delay`变量中指定的秒数。
- en: At ➐, you clear the screen and display the `title` message from the first column,
    in the first row.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在➐处，您清除屏幕并在第一行的第一列显示`title`消息。
- en: 'Finally, at ➑, you create a `while` loop that is always `True`. This is a little
    trick to make something run forever and ever. Inside that loop you call the function
    `scroll_message(``*string*, *float*)` with your own arguments: `reminder` and
    `delay`.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在➑处，您创建一个永远为`True`的`while`循环。这是一个小技巧，可以让某个任务一直运行下去。在该循环内，您调用函数`scroll_message(``*string*,
    *float*)`并传入您自己的参数：`reminder`和`delay`。
- en: '**Running the Script**'
  id: totrans-120
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**运行脚本**'
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. Unfortunately,
    we can’t show the text moving in a book, but you get the idea!
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 按**F5**或转到**运行** ▸ **运行模块**来运行脚本。不幸的是，我们无法在书中展示文本滚动的效果，但您应该能明白其中的原理！
- en: '**TAKING IT FURTHER**'
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步探索**'
- en: 'We recommend that you modify the sample script we’ve given you with the coding
    tricks you’ve learned here and earlier, and experiment with the functions shown
    in [“Adding Other Functionality”](ch06.xhtml#lev71) on [page 91](ch06.xhtml#page_91)
    to get familiar with the LCD. When you’re done, here are some projects to try:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议您使用这里和之前学到的编码技巧修改我们提供的示例脚本，并尝试在[“添加其他功能”](ch06.xhtml#lev71)一节中展示的功能，以及在[第91页](ch06.xhtml#page_91)上的内容，来熟悉LCD显示屏。当您完成后，以下是一些可以尝试的项目：
- en: Build a weather forecaster using the LCD display—take a look at [Project 7](ch07.xhtml#ch07),
    in which we show how to get weather data.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用LCD显示屏构建一个天气预报器——查看[项目7](ch07.xhtml#ch07)，我们展示了如何获取天气数据。
- en: Display messages based on weather conditions, like “Don’t forget your umbrella.”
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据天气情况显示消息，比如“别忘了带伞”。
- en: Display sensor data on the LCD—check out [Projects 9](ch09.xhtml#ch09)–[12](ch12.xhtml#ch12)
    to learn how to read data from a sensor.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在LCD上显示传感器数据——查看[项目9](ch09.xhtml#ch09)–[12](ch12.xhtml#ch12)，学习如何从传感器读取数据。
