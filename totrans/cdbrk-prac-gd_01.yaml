- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How can I break an encrypted message? And other introductory questions
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c01/g01001.png)'
  prefs: []
  type: TYPE_IMG
- en: The postcard in [Figure 1-1](#figure1-1) (provided to us by Karsten Hansky)
    was sent in 1904.^([1](b06.xhtml#c01-endnote-1)) As can be easily seen, the message
    written on it is encrypted.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c01/f01001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-1: Apparently, the sender of this postcard didn’t want the letter
    carrier or the family of the recipient to read it. So, they chose to encrypt the
    message.'
  prefs: []
  type: TYPE_NORMAL
- en: Decades- or even centuries-old encrypted messages are far from unusual. Countless
    encrypted diaries, letters, notebooks, radio messages, newspaper ads, and telegrams
    are known to exist—not to mention numerous encrypted postcards, such as the one
    in [Figure 1-1](#figure1-1). Encrypted documents can also be found in archives,
    private collections, and flea markets, as well as on internet auction portals,
    websites, and mailing lists. Many more encrypted messages are printed in books,
    newspapers, and magazines, both old and new.
  prefs: []
  type: TYPE_NORMAL
- en: Before computers became popular, encryption was mainly performed by hand, usually
    with pencil and paper (hence the term *pencil-and-paper encryption*). Sometimes,
    cryptographers also employed simple equipment such as leather strips or wooden
    and metallic implements, like disks or slides. Starting in the late 1920s, mechanical
    and electrical encryption machines came into use, the most famous of which was
    the German Enigma machine (see [Chapter 15](c15.xhtml)). As encryption machines
    were expensive, they saw widespread use primarily in the military, intelligence
    organizations, and diplomatic services. Those with fewer financial resources tended
    to continue using pencil-and-paper systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the advent of modern digital technology around 1970, commercial and military
    encryption began using computer hardware and software. Nevertheless, pencil-and-paper
    encryption endured and is still relevant today. It is used by a wide cross section
    of the population: criminals protecting illegal activities, friends and lovers
    exchanging secret messages, and others who use it in various recreational activities.
    For example, geocachers, escape room aficionados, and those involved with other
    kinds of high-tech scavenger hunts might use cryptography to hide latitude and
    longitude coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: What is this book about?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will show you historical examples of real messages, such as postcards, diaries,
    letters, and telegrams, that were encrypted with pencil and paper or other manual
    methods. We will also teach you methods for breaking them. Although manual encryption
    and decryption have lost much of their importance due to the widespread use of
    computer technology, many people are still interested in deciphering encrypted
    messages for several reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Families may want to read encrypted postcards, letters, or diaries they have
    inherited from their ancestors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Historians endeavor to decipher encrypted documents they have encountered during
    their research in order to gain insight into previous eras.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Police officers may want to break enciphered messages written by criminals.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geocachers want to solve puzzle caches.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decryption enthusiasts take delight in deciphering encrypted documents that
    were created decades or even centuries ago; many of these enthusiasts regard solving
    an unsolved cipher to be as exciting a task as climbing Mount Everest or making
    a new archaeological discovery.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Students try to solve challenges from their cryptography classes. Most classes
    focus on computer-based encryption, but they usually include the study of pencil-and-paper
    methods as well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While some solvers are mainly interested in historical encrypted messages, others
    enjoy encryption puzzles created as recreation, like those found in Elonka’s book
    *The Mammoth Book of Secret Codes and Cryptograms*^([2](b06.xhtml#c01-endnote-2))
    or in the regular publications of the American Cryptogram Association. This book
    mainly deals with historical encryption. The postcard from 1904 shown at the beginning
    of this chapter is the first example we provide. In [Chapter 5](c05.xhtml), we
    will explain how it can be deciphered.
  prefs: []
  type: TYPE_NORMAL
- en: Which technical terms do I need to know?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A text that is to be encrypted is termed a *plaintext*. The result of an encryption
    is the *ciphertext*. Sometimes, the ciphertext may be embedded in other readable
    text, which is called the *cleartext* to distinguish it from the ciphertext that
    appears within it.
  prefs: []
  type: TYPE_NORMAL
- en: Many encryption methods are based on some secret information that may only be
    known to the sender and the receiver—the *key*. A typical example of a key is
    a *substitution table* that replaces every letter of the alphabet for another
    one. Sometimes, the key is represented by a word, the *keyword*.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two kinds of encryption methods: ciphers and codes. The easiest way
    to describe the difference is that a *cipher* (sometimes spelled “cypher”) generally
    works on letters, while a *code* works on words or phrases. The problem with using
    a code is that you often need to first think of nearly every word you want to
    use and then generate a codebook that has an equivalent for each one. Since a
    language can have thousands of words, such codebooks could be quite large! But
    a cipher, which operates only on letters, can be a much more compact system. Pretty
    much anything can be encrypted with a cipher, as long as both the sender and receiver
    know the system; no hefty codebook is required. Most of the encryption methods
    covered in this book are ciphers. Codes will be addressed in [Chapter 7](c07.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, these terms can be confusing because many other meanings of
    the term *code* are in general use. For instance, a ZIP code or a code of conduct
    has nothing to do with encryption. Even if we restrict ourselves to the field
    of encryption technology, the use of the word *code* is ambiguous, as it sometimes
    refers to encryption in general (for example, in the expression *codebreaking*).
    Even professional cryptographers, when speaking casually, may use the terms *code*
    and *cipher* interchangeably. In this book, we will use the term *code* only in
    the way we defined it in the previous paragraph (i.e., as a method of encrypting
    messages at the level of words and phrases). There is only one exception: when
    we say *codebreaking*, we refer to all kinds of encryption, not only codes.'
  prefs: []
  type: TYPE_NORMAL
- en: If we have the key, we can *decrypt* a ciphertext to obtain the plaintext. If
    we try to derive a plaintext from a ciphertext without knowing the key, we usually
    speak of *breaking* the encryption. An encrypted message we want to break we refer
    to as a *cryptogram*.
  prefs: []
  type: TYPE_NORMAL
- en: While the art and craft of encryption is referred to as *cryptography*, the
    breaking of cryptograms is called *cryptanalysis*. *Codebreaking* is another word
    for cryptanalysis. Also, the term *cryptology* often means cryptography and cryptanalysis
    but can also mean the study of everything encryption related, including people,
    machines, systems, and history. The term *crypto* can be used as a catchall term
    to apply to many items on this list.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, *cryptology* refers to messages that are encrypted, but sometimes,
    *steganography*, the hiding of information (see [Chapter 15](c15.xhtml)), is included
    in cryptology as well.
  prefs: []
  type: TYPE_NORMAL
- en: When breaking a cryptogram, it is usually helpful to know or to guess a word
    or phrase that appears in the plaintext. Such a word or phrase is called a *crib*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, several characters are frequently referenced in the literature
    on cryptography (though they don’t play a major role in this book): *Alice* and
    *Bob* are often used as placeholder names when it comes to explaining encryption
    methods. Usually, the sender of an encrypted message is referred to as Alice and
    the receiver is referred to as Bob. Sometimes, additional characters appear, such
    as *Carol* (another crypto user), *Eve* (an eavesdropper), and *Mallory* (a malicious
    person). These characters do not necessarily stand for humans; they might also
    refer to computer programs or hardware components.'
  prefs: []
  type: TYPE_NORMAL
- en: See the glossary in Appendix C for definitions of these and other terms.
  prefs: []
  type: TYPE_NORMAL
- en: How can I break an encrypted text?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve come to the right place! The purpose of our book is exactly to help you
    with this question, especially in regard to classical ciphers. We introduce the
    main pencil-and-paper encryption techniques encountered in practice and then describe
    how to solve them.
  prefs: []
  type: TYPE_NORMAL
- en: 'For impatient readers, we provide our first codebreaking example in the following
    cryptogram: an encrypted advertisement published in the London newspaper *The
    Times* on August 1, 1873\. This and some other encrypted newspaper ads we will
    be referring to later are from Jean Palmer’s 2005 book *The Agony* *Column Codes
    & Ciphers*. (Jean Palmer is a pen name of London-based codebreaking expert Tony
    Gaffney.)^([3](b06.xhtml#c01-endnote-3))'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c01/g01002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here’s the ciphertext written in a more readable way:'
  prefs: []
  type: TYPE_NORMAL
- en: '`HFOBWDS wtbsfdoesksjd ji ijs mjiae (dai ditwy). Afods ks rofed dpficqp licqp.
    Toeqfwus yic lsrd vspojt uwjjid qsd ibsf. Aoll sjtswbicf di edwy apsfs yic lsrd
    ce doll O pswf rfik yic, qobs yicf wtbous. Yicf cjpwhhy aors jid asll.`'
  prefs: []
  type: TYPE_NORMAL
- en: 'A good first step in codebreaking is to count the letters in the message. This
    technique, called *frequency analysis*, lets us make educated guesses about what
    each letter represents, based on how often it appears in the text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c01/g01003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As can be seen, the ciphertext letter `s` is the most frequent. It probably
    stands for the plaintext letter `e`, which is the most frequent letter in virtually
    every English text. After `e`, the letters `t`, `a`, and `o` are the next most
    frequent ones in the English language, although it is difficult to identify these
    based on their frequencies alone. However, there is another letter we can easily
    guess by looking at the ciphertext: the word `O` must stand for `I`, as there
    is no other word in the English language that consists of only one capitalized
    letter (unless it is at the beginning of a sentence, in which case, the letter
    `A` would fit).'
  prefs: []
  type: TYPE_NORMAL
- en: Further analysis shows that the ciphertext contains the word `yic` three times
    and the word `yicf` twice. The plaintext words `the` and `them` would be good
    guesses, but we’ve already determined that `s` (not `c`) stands for `e`. So, `you`
    and `your` make sense.
  prefs: []
  type: TYPE_NORMAL
- en: 'Knowing the ciphertext equivalents of the six plaintext letters `e`, `i`, `y`,
    `o`, `u`, and `r` makes it easy to guess more words. For instance, `ijs` decrypts
    to `o*e` (with the asterisk standing for an unknown letter), which likely means
    `one`. In the end, we receive the following plaintext:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PRIVATE advertisement no one knows (two today). Write me first through lough.
    Disgrace you left behind cannot get over. Will endeavour to stay where you left
    us till I hear from you, give your advice. Your unhappy wife not well.`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we have access to a computer and a program such as CrypTool 2 (free open
    source software available at [https://cryptool.org](https://cryptool.org)), we
    can use an even more efficient method to break the encrypted advertisement in
    *The Times*: we look for a word in the ciphertext that has a distinctive letter
    pattern. The best candidate we can find is `wtbsfdoesksjd`—it contains the same
    letter (`s`) at the fourth, ninth, and eleventh position, and the sixth and the
    last letter (`d`) are the same, too. All other letters in this word are different.
    CrypTool 2 provides a tool that searches for words with a given repetition pattern
    in a large database. For `wtbsfdoesksjd`, we receive only one hit: `advertisement`.
    This is certainly a common word in a newspaper ad.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c01/g01004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Assuming that `advertisement` is correct, we can determine the meaning of the
    following letters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Plaintext:` `a d e i m n r s t v`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Ciphertext: w t s o k j f e d b`'
  prefs: []
  type: TYPE_NORMAL
- en: This information enables us to identify or guess more words. For instance, the
    first word, `HFOBWDS`, represents `*R*VATE`, which can be solved as `PRIVATE`.
    Now we know that the ciphertext letters `H` and `O` stand for `P` and `I`. The
    ciphertext `wtbous` decrypts to `advi*e`, which should be `advice`. (It can’t
    be `advise`, as the `s` is already attributed to another letter.) This also shows
    that ciphertext `u` corresponds to plaintext `c`. We have identified enough letters
    now that we should be able to decipher more words. In the end, we get the plaintext
    given above.
  prefs: []
  type: TYPE_NORMAL
- en: This advertisement appears to be a message from a woman to her husband, who
    has left her. We will probably never learn who created it and why—after all, this
    ad was published 150 years ago. However, from a codebreaker’s point of view, the
    mystery is solved.
  prefs: []
  type: TYPE_NORMAL
- en: That was not very difficult, was it? In the course of this book, you will get
    to know more complicated encryption methods, along with more sophisticated techniques
    for breaking them.
  prefs: []
  type: TYPE_NORMAL
- en: How do I know what kind of encryption I am dealing with?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Breaking a ciphertext usually requires knowing what kind of encryption method
    has been used. In addition to cipher-breaking methods, we therefore introduce
    in this book several cipher-detecting techniques. Identifying the cipher in use
    can be quite simple or very difficult. It is helpful to know that most messages
    encountered in practice have been encrypted with one of about a dozen methods
    that can usually be distinguished from each other with some analysis.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to identify a particular cipher without reading the whole book,
    the following paragraphs will give you some guidance.
  prefs: []
  type: TYPE_NORMAL
- en: If the encrypted text you want to solve looks like this^([4](b06.xhtml#c01-endnote-4))
    . . .
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c01/g01005.png)'
  prefs: []
  type: TYPE_IMG
- en: . . . or like this^([5](b06.xhtml#c01-endnote-5)) . . .
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c01/g01006.png)'
  prefs: []
  type: TYPE_IMG
- en: . . . or like this . . .
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c01/g01007.png)'
  prefs: []
  type: TYPE_IMG
- en: . . . or like this . . .
  prefs: []
  type: TYPE_NORMAL
- en: '`SIAA ZQ LKBA. VA ZOA RFPBLUAOAR!`'
  prefs: []
  type: TYPE_NORMAL
- en: . . . the cipher is likely substitution, and you should read Chapters [3](c03.xhtml),
    [4](c04.xhtml), and [5](c05.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: If the cryptogram you want to solve looks like this^([6](b06.xhtml#c01-endnote-6))
    . . .
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c01/g01008.png)'
  prefs: []
  type: TYPE_IMG
- en: . . . check out [Chapter 7](c07.xhtml) (on codes and nomenclators).
  prefs: []
  type: TYPE_NORMAL
- en: If your ciphertext looks like this^([7](b06.xhtml#c01-endnote-7)) . . .
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c01/g01009.png)'
  prefs: []
  type: TYPE_IMG
- en: . . . it is likely a turning grille encryption, which is covered in [Chapter
    11](c11.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: If the encrypted text you want to solve looks like this^([8](b06.xhtml#c01-endnote-8))
    . . .
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c01/g01010.png)'
  prefs: []
  type: TYPE_IMG
- en: . . . or like this . . .
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c01/g01011.png)'
  prefs: []
  type: TYPE_IMG
- en: . . . check [Chapter 13](c13.xhtml) (abbreviation ciphers).
  prefs: []
  type: TYPE_NORMAL
- en: If the encrypted text you want to solve looks like this . . .
  prefs: []
  type: TYPE_NORMAL
- en: '`218.57 106.11 8.93 17.61 223.64 146.7 244.53 224.21 20 192.5 160.19 99.39
    No. 8 251.70 1 223.64 58.89 151.79 226.69 8.93 40.12 149.9 248.101 167.12 252.35
    12.31 135.100 149.9 145.76 225.53 212.25 20 241.6 222.22 78.45 12.31 66.28 252.33
    158.33 6.65 20 2 11.50 142.37 223.87 12.31 142.37 105.33 142.37 157.20 58.62 133.89
    250.86.`'
  prefs: []
  type: TYPE_NORMAL
- en: . . . read [Chapter 14](c14.xhtml) (on dictionary codes and book ciphers).
  prefs: []
  type: TYPE_NORMAL
- en: If you are dealing with five-letter groups . . .
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c01/g01012.png)'
  prefs: []
  type: TYPE_IMG
- en: . . . there are several possibilities, the most likely being a code ([Chapter
    7](c07.xhtml)), a transposition cipher (Chapters [9](c09.xhtml) and [10](c10.xhtml)),
    a digraph substitution ([Chapter 12](c12.xhtml)), or a machine cipher ([Chapter
    15](c15.xhtml)).
  prefs: []
  type: TYPE_NORMAL
- en: If your cryptogram doesn’t look like any of these, or if you are not sure which
    category fits best, we’re afraid you may need to read one chapter after another
    until you find what you are looking for.
  prefs: []
  type: TYPE_NORMAL
- en: I have found an encrypted text in the attic; can you decipher it for me?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maybe! Did you find an encrypted postcard from your great-grandfather? Did you
    purchase an encrypted notebook at a flea market? Do you still own a cipher message
    your best friend sent you back in your childhood days? If so, you can try to break
    the message with one of the techniques described in this book.
  prefs: []
  type: TYPE_NORMAL
- en: If you are not successful, or if you simply do not want to invest the time to
    solve a cryptogram yourself, feel free to send it to us. (Our email addresses
    are in the “I have a comment” section at the end of this chapter.) Of course,
    we can’t investigate every crypto mystery we receive, but in many cases, we can
    help. We are particularly interested in historical examples, less so in systems
    someone has invented in the modern day. Klaus is always searching for interesting
    encrypted texts he can write about, and Elonka has a website for famous unsolved
    codes. We don’t guarantee anything, let alone that your mystery will be solved,
    but we will at least look at it.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you send us a cryptogram you have found, please provide the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: Tell us what you know about the cryptogram’s background. Where did you find
    it? Who created it? Do you have any other information, such as the time period
    when it was created? Was it sent to or from someone you know? Which languages
    did this person speak? Information of this kind can be extremely helpful for a
    codebreaker.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tell us if we may publish this cryptogram (such as on the internet or in a book
    like this) or if you want to keep it confidential. Of course, we won’t publish
    anything without the consent of the sender.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In case you allow us to publish a cryptogram, tell us if you would like credit
    for it and/or if we may mention your name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I have encrypted a text myself; can you break it?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While we are always very interested in genuine historical and classical ciphers,
    we generally cannot help with newer items. This is in large part because of the
    quantity of mail that we get; plus, it is far too easy for someone to compile
    a bunch of random text and proclaim, “Break my code!”
  prefs: []
  type: TYPE_NORMAL
- en: We make exceptions when a particular cipher has been drawing a great deal of
    public interest. For instance, if an encrypted message is presented in an artwork,
    as an inscription on a building, on a gravestone, or in some other unusual way,
    it might be intriguing to a larger audience. In addition, offering a cash reward
    or some other prize for solving a crypto puzzle is a good way to make a new puzzle
    more attractive. We might also take interest in crypto challenges published by
    the NSA or another organization with a relationship to codebreaking.
  prefs: []
  type: TYPE_NORMAL
- en: If you like to design encryption challenges, we recommend joining the American
    Cryptogram Association, which is always looking for people to craft puzzles for
    their regular newsletter. You may also wish to visit the crypto puzzle platform
    MysteryTwister ([https://mysterytwister.org](https://mysterytwister.org)) and
    submit a challenge.
  prefs: []
  type: TYPE_NORMAL
- en: I have invented a new encryption method; can you take a look at it?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like everyone who has a certain level of prominence on the crypto scene, we
    often receive communications from people who have invented their own encryption
    method and want us to review or crack it. To be honest, we have never been sent
    such a system that was solid or seemed a good use of our time, so in all seriousness,
    it is probably not a good idea to do this.
  prefs: []
  type: TYPE_NORMAL
- en: If you have created a method that is related to one of the many manual ciphers
    we cover in this book, it is likely very crackable, as there are many methods,
    especially with modern computers, to take these apart. New ciphers must compete
    with state-of-the-art crypto algorithms such as AES, Diffie-Hellman, and RSA (which
    are not within the scope of this book). Designing an encryption algorithm that
    can play in the big leagues is a difficult task, and even highly trained experts
    usually need several years of effort to create a good encryption algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: So, if you are new to the field of encryption technology and really want to
    design a new system, we recommend first getting a good cryptography book and studying
    encryption algorithms that already exist. For example, *CryptoSchool* (2015) by
    Joachim von zur Gathen^([9](b06.xhtml#c01-endnote-9)) is a comprehensive introduction,
    while *Serious Cryptography* (2017), written by Jean-Philippe Aumasson,^([10](b06.xhtml#c01-endnote-10))
    is a shorter alternative. If you can read German, you should try Klaus’s book
    *Kryptografie—Verfahren, Protokolle, Infrastrukturen* (2016).^([11](b06.xhtml#c01-endnote-11))
  prefs: []
  type: TYPE_NORMAL
- en: For a related opinion on this phenomenon of crypto experts continually receiving
    examples of crackable systems, we strongly recommend Bruce Schneier’s 1998 essay
    “Memo to the Amateur Cipher Designer.”^([12](b06.xhtml#c01-endnote-12)) It’s over
    two decades old but still relevant. In a nutshell, Schneier says (and we agree)
    that to attempt to create a new cipher system, it is first essential to have substantial
    experience in breaking existing systems.
  prefs: []
  type: TYPE_NORMAL
- en: I have solved a famous unsolved cryptogram; what should I do?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this book, we introduce dozens of unsolved cryptograms. Some of them, such
    as the Voynich manuscript, are quite famous, while others, such as the cigarette
    case cryptogram, have not received much attention yet. (Both of these cryptograms
    can be seen in [Chapter 5](c05.xhtml).) A list of famous cryptograms is available
    on Elonka’s website,^([13](b06.xhtml#c01-endnote-13)) and Klaus has published
    his top-fifty unsolved cryptograms on his own blog.^([14](b06.xhtml#c01-endnote-14))
  prefs: []
  type: TYPE_NORMAL
- en: Virtually every popular unsolved ciphertext has received numerous dubious solutions.
    The more famous a cryptogram is, the more people claim to have solved it. At least
    sixty “solutions” to the Voynich manuscript have been published. Other favorites
    include the two remaining Zodiac Killer cryptograms, the Dorabella cryptogram,
    and the fourth *Kryptos* message. (We will come back to these mysteries later.)
    The internet is littered with doubtful solutions to famous cryptograms.
  prefs: []
  type: TYPE_NORMAL
- en: If you are a serious codebreaker and believe you have found the solution to
    an unsolved cryptogram, the first thing to do is challenge your own solution.
    Could you describe the method simply enough that a third party could use it and
    generate the same result? Ask yourself if the decryption process you have discovered
    is straightforward and does not involve too many tweaks and exceptions. Check
    if the resulting plaintext is meaningful without requiring dozens of alterations
    and interpretations. Finally, read Ryan Garlick’s 2014 essay “How to Know That
    You Haven’t Solved the Zodiac-340 Cipher.”^([15](b06.xhtml#c01-endnote-15)) (It’s
    about alleged solutions to the second Zodiac cryptogram, but most of the content
    can be generalized to other cipher mysteries.)
  prefs: []
  type: TYPE_NORMAL
- en: If your solution does make sense, we are, of course, extremely interested in
    learning about it. If you have solved a cryptogram that is mentioned on Elonka’s
    list, you can even expect to become a famous codebreaker.
  prefs: []
  type: TYPE_NORMAL
- en: Before you tackle one of the “Mount Everests” of codebreaking, we recommend,
    dear reader, that you start with cryptograms that have already been solved, of
    which you will find many in this book. Then, perhaps, proceed to the lesser-known
    unsolved ones. Some of these have not yet received much attention in the research
    community, so your chances of success are improved. The codebreaking methods you
    will learn about in this book might help you succeed. And who knows? One day,
    you might even master one of the world’s most famous unsolved cipher challenges!
  prefs: []
  type: TYPE_NORMAL
- en: What tools do I need for codebreaking?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This book focuses on breaking pencil-and-paper ciphers, not on modern computer-based
    encryption. However, this doesn’t mean that we don’t use computers for our codebreaking
    work. Here are the three most important computer utilities we use in this book
    (all of which are available for free):'
  prefs: []
  type: TYPE_NORMAL
- en: CrypTool 2 ([https://cryptool.org](https://cryptool.org)) is a crypto learning
    program developed by an international team headed by Bernhard Esslinger. Among
    other things, it supports many helpful codebreaking tools. The CrypTool project
    also offers e-learning programs for cryptography and cryptanalysis, such as CrypTool
    1, JCrypTool, and CrypTool-Online.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The website dCode ([https://dcode.fr/en](https://dcode.fr/en)), operated by
    an anonymous group of crypto-enthusiasts, provides numerous helpful codebreaking
    and statistics tools.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cipher Tools ([https://rumkin.com/tools/cipher/](https://rumkin.com/tools/cipher/))
    is a large collection of classical cryptanalysis tools maintained by Tyler Akins.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking for more utilities? Check our codebreaking tools list in [Chapter 17](c17.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: How can I encrypt my files and email?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please note that the encryption techniques covered in this book should not be
    used to encrypt valuable secrets. This book deals with pencil-and-paper (i.e.,
    manual) encryption. While studying manual encryption is interesting and important
    for several reasons, using this kind of encryption for sensitive data is completely
    outdated. If you need a tool to encrypt your computer files, look for a good encryption
    program such as the open source VeraCrypt or Philip Zimmermann’s well-known PGP.
    Programs of this kind use modern encryption algorithms, including AES, Diffie-Hellman,
    and RSA, which can’t be broken with today’s technology.
  prefs: []
  type: TYPE_NORMAL
- en: I have a comment on this book; what should I do?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you like this book, don’t like it, have found a mistake, or just have a comment,
    please send us an email at [codebreaking.guide@gmail.com](http://mailto:codebreaking.guide@gmail.com).
    You may also wish to check the errata page at [https://codebreaking-guide.com/errata](https://codebreaking-guide.com/errata)
    to see if a mistake has already been reported. Feedback is extremely important
    for us.
  prefs: []
  type: TYPE_NORMAL
- en: Who contributed to this book?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want to express special thanks to Tyler Akins, Michelle Barette, Kent D.
    Boklan, Bill Briere, Magnus Ekhall, Zachary Epstein, Thomas Ernst, Bernhard Esslinger,
    Dan Fretwell, Lawrence McElhiney, Dave Oranchak, Tobias Schrödel, Dale Sibborn,
    Gerhard Strasser, Erica Swearingen, and Satoshi Tomokiyo for their enthusiastic
    and comprehensive proofreading.
  prefs: []
  type: TYPE_NORMAL
- en: We would also like to thank John Allman; Christiane Angermayr; Lucia Angermayr
    (RIP); Nicolay Anitchkin; Eugen Antal; Philip Aston; Guy Atkins; Leopold Auer;
    Marc Baldwin; Paul Barron; Max Bärtl; Craig Bauer; Christian Baumann; Richard
    Bean; Stefan Beck; Arianna Benini; Neal Bennett; Yudhijit Bhattacharjee; Norbert
    Biermann; Peter Bisno; Sam Blake; Bob Bogart; Paolo Bonavoglia; Raymond Borges;
    Thomas Bosbach; Gert Brantner; Dan Brown (yes, *the* Dan Brown!); Ralf Bülow;
    Chris Christensen; Frank Corr; Nicolas Courtois; Carola Dahlke; Jason Davidson;
    Melissa Davis; Deb Desch; Whitfield Diffie; Jörg Drobick; Stanley Dunin; Ralph
    Erskine (RIP); Jarl Van Eycke; Jason Fagone; Cheri Farnsworth; Nick Fawcett; Gérard
    Fetter; Heathyr Fields; Frank Förster; Andrew Furlong; Tom (Monty) Fusco; Tony
    Gaffney; Jim Gandy; Joachim von zur Gathen; Declan Gilligan; Jim Gillogly; Dan
    Girard; Nicole Glücklich; Frank Gnegel; Marek Grajek; Joel Greenberg; Jackie Griffith;
    Marc Gutgesell; Sandi Hackney; Karsten Hansky; Louie Helm; Lonnie Henderson; Jürgen
    Hermes; Jan Henrik Holst; Michael Hörenberg; Günter Hütter; A.J. Jacobs; Ralf
    Jäger; JannaK; David Kahn; Bryan Kesselman; Manfred Kienzle; Michael Kirk; Gary
    Klivans; Oliver Knörzer; Stuart Kohlhagen; Daniel Kolb; Anatoly Kolker; Klaus
    Kopacz; Nils Kopal; Armin Krauß; Teresa Kuhl; Oliver Kuhlemann; Benedek Láng;
    Jew-Lee Lann-Briere; George Lasry; Karl de Leeuw (RIP); Jon, Beth, Peter, and
    Amber Leonard; Peter Lichtenberger; Greg Lloyd; Joe Loera; Krista van Loon; Tom
    Mahon; Denny McDaniels (RIP); Glenn McIntosh; John McVey; Hans van der Meer; Beáta
    Megyesi; Glen Miranker; Didier Müller; Wolfgang Müller; Walter C. Newman; Jim
    Oram; Olaf Ostwald; Nick Pelling; Klaus Pommerening; Beryl Pratt; Duncan Proudfoot;
    Katja Rasch; Jim Reeds; Paul Reuvers; Dirk Rijmenants; Sara Rivers-Cofield; Richard
    SantaColoma; D.P.J.A. Scheers; Volker Schmeh; Wolfgang Schmidt; Leon Schulman;
    Dale Sibborn; Linda Silverman; Marc Simons; Ralph Simpson; Rob Simpson; Dale Speirs;
    Rene Stein; Moritz Stocker; Christoph Tenzer; Satoshi Tomokiyo; Dermot Turing;
    Alexander Uliyanenkov; Ilona Sofia Vine; TJ Dunin Vine; Arno Wacker; Rich Wales;
    Frode Weierud; Meg Welch; Bart Wenmeckers; Bart Wessel; David Allen Wilson; Richard
    van de Wouw; Ruth Wüst; YefimShifrin; Gordon Young; DeEva Zabylivich; René Zandbergen;
    and Philip Zimmermann for their contributions, either to the book or to relevant
    discussions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, we appreciate the support of the Aargau Cantonal Library in Switzerland;
    the American Cryptogram Association; the Beale’s Beer restaurant; the British
    Library; the dCode group; the Deutsches Museum (Munich, Germany); the Franz Steiner
    Verlag; the George C. Marshall Foundation (Lexington, VA); the Heinz Nixdorf MuseumsForum
    (Paderborn, Germany); the John F. Kennedy Presidential Library and Museum; the
    Kryptologikum (Karlsruhe, Germany); the Lehrsammlung für Nachrichten-, Fernmelde-
    und Informationstechnik der Bundeswehr (Feldafing, Germany); the Louis Round Wilson
    Special Collections Library at the University of North Carolina, Chapel Hill;
    the Museum für Kommunikation (Frankfurt, Germany); the Museum of Freemasonry,
    London; the National Cryptologic Museum (Fort Meade, MD); the New York Chancellor
    Robert R. Livingston Masonic Library and Museum; the New York State Archives;
    the New York State Military Museum; the Niedersächsisches Landesarchiv Abteilung
    Wolfenbüttel; the Royal Collection, The Netherlands; the Schreibmaschinenmuseum
    Beck (Pfäffikon, Switzerland); Touchstone Films; and Walt Disney Pictures; along
    with all of our internet friends: blog readers, friends, and participants from
    Facebook, Reddit, the Kryptos Group, and others around the World Wide Web.'
  prefs: []
  type: TYPE_NORMAL
