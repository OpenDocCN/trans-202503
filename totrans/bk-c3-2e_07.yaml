- en: '**7**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**MULTIPLE COLUMNS**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](graphics/common-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Although desktop and laptop screens have gotten wider in recent years, studies
    still show that people have difficulty reading long lines of text. (Roughly 65
    to 75 characters per line is generally considered a comfortable length to read.)
    This convention has led to restricted layouts and websites that don’t take advantage
    of the opportunities presented by wider screens.
  prefs: []
  type: TYPE_NORMAL
- en: For years, magazines and newspapers have used multiple columns to flow content—addressing
    both the issue of long text lines and how to pack a lot of copy into limited spaces.
    Now, with the advent of the Multi-column Layout Module in CSS3 (*[http://www.w3.org/TR/css3-multicol/](http://www.w3.org/TR/css3-multicol/)*),
    websites can take advantage of multiple columns, too.
  prefs: []
  type: TYPE_NORMAL
- en: The Multi-column Layout Module currently has Candidate Recommendation status,
    meaning the module is considered mostly complete and is well implemented in IE10+
    and other modern browsers (albeit with some minor caveats), so you have plenty
    of opportunities to experiment with multiple columns.
  prefs: []
  type: TYPE_NORMAL
- en: '**Column Layout Methods**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can divide your content into columns using two methods: either prescriptively,
    by setting a specific number of columns, or dynamically, by specifying the width
    of columns and allowing the browser to calculate how many columns will fit into
    the width of the parent element.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that, although Chrome, Firefox, Safari, and IE10+ all support the properties
    in this chapter at the time of writing, the latter browser is the only one to
    do so without a vendor prefix. The different browsers also have a few implementation
    quirks, which I’ll point out as I go along.
  prefs: []
  type: TYPE_NORMAL
- en: '***Prescriptive Columns: column-count***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The simplest way to divide your content into equally distributed columns is
    to use the `column-count` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The element `*E*` is the parent of the content you want to divide, and the
    `*columns*` value is an integer that sets the number of columns. For example,
    to flow content inside a `div` element into two columns, you would use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s move on to a real-world example. I’ll demonstrate a few paragraphs of
    copy displayed twice, the first distributed over two columns and the second over
    three columns. Here’s the code I’ll use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*I’ve used the Arbitrary Substring Attribute Value Selector in these examples,
    which* *I introduced in [Chapter 3](ch03.html#ch03).*'
  prefs: []
  type: TYPE_NORMAL
- en: You can see the results of this code in [Figure 7-1](ch07.html#ch07fig1).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](graphics/f07-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-1: Text broken over two and then three columns*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the markup I used for the example shown in [Figure 7-1](ch07.html#ch07fig1)
    (edited for brevity):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The syntax is extremely simple, and the browser takes care of distributing the
    content equally.
  prefs: []
  type: TYPE_NORMAL
- en: '***Dynamic Columns: column-width***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The second method for dividing content into columns is perhaps a better choice
    for flexible layouts. Instead of specifying the number of columns, you use the
    `column-width` property to specify the width of each column, and the browser fills
    the parent element with as many columns as can fit along its width. The syntax
    is just as easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As with `column-count`, `*E*` is the parent element of the content you want
    to divide into columns. But `column-width` differs in that it requires a `*length*`
    value: either a unit of length (such as px or em) or a percentage. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This code divides the child elements of the `div` into columns that are 150px
    wide and repeats the columns along the width of the `div`. Let’s see how this
    works, using the following style rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, I have an element with a class name of `columns`, which is 710px wide;
    the content inside it will be distributed into 150px-width columns. You can see
    how this renders in [Figure 7-2](ch07.html#ch07fig2).
  prefs: []
  type: TYPE_NORMAL
- en: With the `column-width` set to 150px, the browser has created four columns to
    fill the parent element. But all is not as it seems. Remember, the parent element
    is 710px wide, and even with a 12px-gap between each column (we’ll talk about
    that shortly), the total width comes to only 636px, so where is the extra white
    space?
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](graphics/f07-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-2: Text broken across dynamically created, equally spaced columns*'
  prefs: []
  type: TYPE_NORMAL
- en: The algorithm that creates the columns is actually quite intelligent and resizes
    the columns automatically so they better fit the parent. It uses the 150px as
    a *minimum* value, making each column wider until the total width matches that
    of its parent—in this case, each column is resized to 168.5px.
  prefs: []
  type: TYPE_NORMAL
- en: '***Varying Distribution of Content Across Columns***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: By default, content that’s flowed into multiple columns will be balanced as
    equally as possible across the columns, so no one column is longer than any of
    the others. If the browser can’t arrange the content so there are an equal number
    of lines in each column, the last column will be made shorter. This is probably
    easier to show than to explain, so [Figure 7-3](ch07.html#ch07fig3) shows text
    distributed over three columns using the default layout method.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](graphics/f07-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-3: Text dynamically distributed over three columns*'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see that all three columns have the same number of lines. If you want
    to change this default behavior, you can do so with the `column-fill` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This property has two possible keyword values: the default is `balance`, which
    tries to make all the columns equal length, as in [Figure 7-3](ch07.html#ch07fig3);
    and the alternative is `auto`, which fills columns sequentially.'
  prefs: []
  type: TYPE_NORMAL
- en: The `auto` value takes effect only when the parent element has a fixed height.
    The content is flowed into the first column to fill the height and then into the
    next column until that one is filled, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '**WARNING**'
  prefs: []
  type: TYPE_NORMAL
- en: '*When using the* `*auto*` *value, it may appear that you have fewer columns
    than are specified in the* `*column-count*` *property, but that won’t be the case;
    it’s just that some columns would be empty.*'
  prefs: []
  type: TYPE_NORMAL
- en: You can see an example of the `auto` value for `column-fill` in [Figure 7-4](ch07.html#ch07fig4);
    the first two columns have an equal number of lines and the third has three fewer,
    as the text is simply flowed into the columns without the browser trying to balance
    them.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](graphics/f07-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-4: Content flowed into columns with the* `*auto*` *value for the*
    `*column-fill*` *property*'
  prefs: []
  type: TYPE_NORMAL
- en: Firefox and IE10+ are the only browsers to implement this property currently,
    although Chrome and Safari automatically act as if the `auto` value were applied
    when a height is fixed on the parent.
  prefs: []
  type: TYPE_NORMAL
- en: '***Combining column-count and column-width***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can set both `column-count` and `column-width` properties on an element,
    though, at first, you might think doing so would create a conflict. This possibility
    has been taken into consideration, however: If both properties are applied to
    the same element, the `column-count` value acts as a maximum. To illustrate, let’s
    refer to [Figure 7-2](ch07.html#ch07fig2) but change the CSS to also include the
    `column-count` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the logic behind this: divide the text into columns of 150px each,
    unless that would create three or more columns, in which case make three columns
    with a minimum width of 150px.'
  prefs: []
  type: TYPE_NORMAL
- en: If you refer back to the example shown in [Figure 7-2](ch07.html#ch07fig2),
    you’ll remember that, given the parent element’s width of 710px, the `column-width`
    property rendered four columns. As you’re applying both properties on the same
    element, however, the `column-count` property takes precedence and only three
    columns are distributed, with their widths dynamically altered to best fit the
    parent element. You can see the result in [Figure 7-5](ch07.html#ch07fig5).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](graphics/f07-05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-5: When combining column properties,* `*column-count*` *acts as a
    maximum.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to use these two properties together, a shorthand property is available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'So if you were to use the values from [Figure 7-5](ch07.html#ch07fig5) with
    this shorthand property, it would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Column Gaps and Rules**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When using a prescriptive multi-column layout, the browser should place a default
    1em gap between each column. You can, however, alter that default and specify
    your own distances by using two new properties: `column-gap` and `column-rule`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first property, `column-gap`, sets the space between columns, and its syntax
    is simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `*length*` value is any number with a standard CSS length unit. Here’s
    an example that puts a 2em gap between each of your generated columns (though
    not on the outside of either the first or last column):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The second property, `column-rule`, draws a line, similar to a border, equidistantly
    between columns. The syntax for `column-rule` is actually shorthand for three
    subproperties: `column-rule-width`, `column-rule-style`, and `column-rule-color`.
    These subproperties take values in exactly the same way as their equivalent `border-*`
    properties from CSS2\. Here’s the syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If you added real values, you would have something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then use the `column-rule` shorthand to set all three subproperties
    at once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s see the `column-gap` and `column-rule` properties in action. The following
    example combines them with `column-count`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This example splits the element’s children into three columns, each with a gap
    of 2em between the columns, and a 0.3em rule. The thickness of the rule has no
    effect on layout—no matter how thick you make the rule, the gap will always stay
    the same width. You can see the result of this example in [Figure 7-6](ch07.html#ch07fig6).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](graphics/f07-06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-6: Inter-column gaps and rules*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Containing Elements Within Columns**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So far in these examples I’ve only used blocks of text, which flow neatly into
    columns. But what happens with larger elements, like images, that could have a
    width greater than the column that contains them? Let’s see what happens when
    I add an image that’s wider than a single column inside a column layout, using
    the `img` element. The result is displayed in [Figure 7-7](ch07.html#ch07fig7).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](graphics/f07-07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-7: An* `*img*` *element wider than a column^([1](footnote.html#footnote1))*'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the image is displayed in the second column, but the overflow
    is clipped at a point halfway inside the `column-gap`. The only browser that differs
    from this behavior (at the time of writing) is Firefox, which (unfortunately)
    keeps the width of the image but flows the content of subsequent columns over
    it, as shown in [Figure 7-8](ch07.html#ch07fig8).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](graphics/f07-08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-8: Firefox differs from all other browsers in the way it displays
    wide elements in columns.*'
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, this issue will be fixed in a future release (perhaps even by the
    time you read this).
  prefs: []
  type: TYPE_NORMAL
- en: To work around the problem entirely, I could set a value of `100%` on the `max-width`
    property of the image, as the width is calculated from that of its containing
    column, rather than the parent element.
  prefs: []
  type: TYPE_NORMAL
- en: '**Elements Spanning Multiple Columns**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On occasion, you may want certain elements to span multiple columns—for example,
    a subheading that will be used to break up sections of a story. To deal with these
    elements, the module introduces the `column-span` element. Here’s the syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, `*value*` can be only one of two possibilities: `all` or `none`.
    The default is `none`, which keeps the element in the column flow. The alternative
    value, `all`, provides a break in the flow—all content before the element will
    be distributed into columns, and all content after the element will be distributed
    into columns, but the element itself—known as the *spanning element*—will not.'
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, the `h2` element has a `column-span` value of `all`,
    so it spans multiple columns, causing a break in the text flow. You can see the
    result in [Figure 7-9](ch07.html#ch07fig9).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![Image](graphics/f07-09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-9: An* `*h2*` *element spans two columns*'
  prefs: []
  type: TYPE_NORMAL
- en: Firefox is the only browser not to support this property at the time of writing.
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Although CSS3 makes flowing your content into columns easy, the challenges
    it presents are not so much technical as they are practical: What happens if you
    want to use images that are wider than a column or if you want to use long headlines
    in narrow columns?'
  prefs: []
  type: TYPE_NORMAL
- en: Although using multiple columns is definitely appropriate in certain situations,
    think twice about whether your content is suitable. Make sure you have full control
    over your content before using these properties, and don’t design websites that
    rely on multiple columns if your client doesn’t have a dedicated and conscientious
    web content team.
  prefs: []
  type: TYPE_NORMAL
- en: Also, bear in mind that screen resolutions can vary dramatically, and content
    that looks readable to you may not be readable to the visitors of your website.
    If they have to scroll up and down too frequently, which can cause lots of confusion,
    they may be put off from visiting your site altogether. But with all that said,
    clever use of columns can make your content much more readable.
  prefs: []
  type: TYPE_NORMAL
- en: In the last three chapters, I’ve described how CSS3 provides methods to format
    and present your text copy, giving you better control over your typography and
    layout. Next, I introduce ways you can improve the overall visual presentation
    of your websites, starting with new background and border effects.
  prefs: []
  type: TYPE_NORMAL
- en: '**Multiple Columns: Browser Support**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
  prefs: []
  type: TYPE_TB
- en: '| `column-count` | Yes^([*](ch07.html#footnote26a)) | Yes[*](ch07.html#footnote26a)
    | Yes[*](ch07.html#footnote26a) | IE10 |'
  prefs: []
  type: TYPE_TB
- en: '| `column-width` | Yes[*](ch07.html#footnote26a) | Yes[*](ch07.html#footnote26a)
    | Yes[*](ch07.html#footnote26a) | IE10 |'
  prefs: []
  type: TYPE_TB
- en: '| `columns` | Yes[*](ch07.html#footnote26a) | Yes[*](ch07.html#footnote26a)
    | Yes[*](ch07.html#footnote26a) | IE10 |'
  prefs: []
  type: TYPE_TB
- en: '| `column-fill` | No | Yes[*](ch07.html#footnote26a) | No | IE10 |'
  prefs: []
  type: TYPE_TB
- en: '| `column-gap` | Yes[*](ch07.html#footnote26a) | Yes[*](ch07.html#footnote26a)
    | Yes[*](ch07.html#footnote26a) | IE10 |'
  prefs: []
  type: TYPE_TB
- en: '| `column-rule` | Yes[*](ch07.html#footnote26a) | Yes[*](ch07.html#footnote26a)
    | Yes[*](ch07.html#footnote26a) | IE10 |'
  prefs: []
  type: TYPE_TB
- en: '| `column-span` | Yes[*](ch07.html#footnote26a) | No | Yes[*](ch07.html#footnote26a)
    | IE10 |'
  prefs: []
  type: TYPE_TB
- en: '[*](ch07.html#footnote_26a) With vendor prefix'
  prefs: []
  type: TYPE_NORMAL
