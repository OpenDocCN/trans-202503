- en: '**7**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**7**'
- en: '**MULTIPLE COLUMNS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**多列**'
- en: '![Image](graphics/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/common-01.jpg)'
- en: Although desktop and laptop screens have gotten wider in recent years, studies
    still show that people have difficulty reading long lines of text. (Roughly 65
    to 75 characters per line is generally considered a comfortable length to read.)
    This convention has led to restricted layouts and websites that don’t take advantage
    of the opportunities presented by wider screens.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管近年来桌面和笔记本电脑屏幕变得更宽，但研究仍然表明人们在阅读长行文本时感到困难。（通常认为每行大约 65 到 75 个字符是比较舒适的阅读长度。）这种惯例导致了限制性的布局和未能充分利用更宽屏幕所带来的机会的网站。
- en: For years, magazines and newspapers have used multiple columns to flow content—addressing
    both the issue of long text lines and how to pack a lot of copy into limited spaces.
    Now, with the advent of the Multi-column Layout Module in CSS3 (*[http://www.w3.org/TR/css3-multicol/](http://www.w3.org/TR/css3-multicol/)*),
    websites can take advantage of multiple columns, too.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，杂志和报纸一直使用多列布局来流式化内容——解决了长文本行的问题，以及如何在有限的空间内容纳大量文案的问题。现在，随着 CSS3 中多列布局模块的出现（*
    [http://www.w3.org/TR/css3-multicol/](http://www.w3.org/TR/css3-multicol/)*），网站也能利用多列布局了。
- en: The Multi-column Layout Module currently has Candidate Recommendation status,
    meaning the module is considered mostly complete and is well implemented in IE10+
    and other modern browsers (albeit with some minor caveats), so you have plenty
    of opportunities to experiment with multiple columns.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 多列布局模块目前已达到候选推荐状态，这意味着该模块被认为基本完成，并且在 IE10+ 和其他现代浏览器中得到了良好的实现（尽管有一些小的限制），因此你有充足的机会来尝试使用多列布局。
- en: '**Column Layout Methods**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**列布局方法**'
- en: 'You can divide your content into columns using two methods: either prescriptively,
    by setting a specific number of columns, or dynamically, by specifying the width
    of columns and allowing the browser to calculate how many columns will fit into
    the width of the parent element.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用两种方法将内容分成列：一种是预设列数，另一种是动态设置列宽，让浏览器自动计算适合父元素宽度的列数。
- en: Note that, although Chrome, Firefox, Safari, and IE10+ all support the properties
    in this chapter at the time of writing, the latter browser is the only one to
    do so without a vendor prefix. The different browsers also have a few implementation
    quirks, which I’ll point out as I go along.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，尽管在撰写本文时，Chrome、Firefox、Safari 和 IE10+ 都支持本章中的属性，但后者是唯一一个不需要厂商前缀即可实现的浏览器。不同的浏览器在实现上也有一些小差异，我会在接下来的内容中指出这些问题。
- en: '***Prescriptive Columns: column-count***'
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***预设列：column-count***'
- en: 'The simplest way to divide your content into equally distributed columns is
    to use the `column-count` property:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将内容均匀分配到多个列中的最简单方法是使用 `column-count` 属性：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The element `*E*` is the parent of the content you want to divide, and the
    `*columns*` value is an integer that sets the number of columns. For example,
    to flow content inside a `div` element into two columns, you would use:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 元素 `*E*` 是你想要分列的内容的父元素，`*columns*` 值是一个整数，用来设置列数。例如，要将内容流式化到 `div` 元素的两列中，你可以使用：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let’s move on to a real-world example. I’ll demonstrate a few paragraphs of
    copy displayed twice, the first distributed over two columns and the second over
    three columns. Here’s the code I’ll use:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个实际的例子。我将演示几段文本，第一次展示为两列，第二次展示为三列。这里是我将使用的代码：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**NOTE**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*I’ve used the Arbitrary Substring Attribute Value Selector in these examples,
    which* *I introduced in [Chapter 3](ch03.html#ch03).*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*在这些例子中，我使用了任意子字符串属性值选择器，* *这是我在[第 3 章](ch03.html#ch03)中介绍的。*'
- en: You can see the results of this code in [Figure 7-1](ch07.html#ch07fig1).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图 7-1](ch07.html#ch07fig1)中看到此代码的效果。
- en: '![Image](graphics/f07-01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f07-01.jpg)'
- en: '*Figure 7-1: Text broken over two and then three columns*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-1：文本分成两列，再分成三列*'
- en: 'Here’s the markup I used for the example shown in [Figure 7-1](ch07.html#ch07fig1)
    (edited for brevity):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我为示例 [图 7-1](ch07.html#ch07fig1) 所使用的标记（已编辑以简化内容）：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The syntax is extremely simple, and the browser takes care of distributing the
    content equally.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 语法非常简单，浏览器会负责均匀分配内容。
- en: '***Dynamic Columns: column-width***'
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***动态列：column-width***'
- en: 'The second method for dividing content into columns is perhaps a better choice
    for flexible layouts. Instead of specifying the number of columns, you use the
    `column-width` property to specify the width of each column, and the browser fills
    the parent element with as many columns as can fit along its width. The syntax
    is just as easy:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 划分内容为列的第二种方法可能更适合灵活的布局。它不是指定列数，而是使用`column-width`属性指定每列的宽度，浏览器会根据父元素的宽度填充尽可能多的列。语法也非常简单：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As with `column-count`, `*E*` is the parent element of the content you want
    to divide into columns. But `column-width` differs in that it requires a `*length*`
    value: either a unit of length (such as px or em) or a percentage. Here’s an example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 与`column-count`一样，`*E*`是你想要划分为列的内容的父元素。但`column-width`的不同之处在于，它需要一个`*length*`值：可以是一个长度单位（例如px或em）或一个百分比。以下是一个例子：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This code divides the child elements of the `div` into columns that are 150px
    wide and repeats the columns along the width of the `div`. Let’s see how this
    works, using the following style rules:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将`div`的子元素分成宽度为150px的列，并沿`div`的宽度重复这些列。我们来看一下它是如何工作的，使用以下样式规则：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, I have an element with a class name of `columns`, which is 710px wide;
    the content inside it will be distributed into 150px-width columns. You can see
    how this renders in [Figure 7-2](ch07.html#ch07fig2).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我有一个名为`columns`的元素，宽度为710px；其中的内容将被分布到宽度为150px的列中。你可以在[图 7-2](ch07.html#ch07fig2)中看到它的渲染效果。
- en: With the `column-width` set to 150px, the browser has created four columns to
    fill the parent element. But all is not as it seems. Remember, the parent element
    is 710px wide, and even with a 12px-gap between each column (we’ll talk about
    that shortly), the total width comes to only 636px, so where is the extra white
    space?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 将`column-width`设置为150px时，浏览器已创建四列来填充父元素。但情况并非看起来的那样。记住，父元素的宽度是710px，即使每列之间有12px的间隙（稍后会讲到），总宽度也只有636px，那多出来的空白空间去哪了呢？
- en: '![Image](graphics/f07-02.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f07-02.jpg)'
- en: '*Figure 7-2: Text broken across dynamically created, equally spaced columns*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-2：文本跨越动态创建的、间距相等的列*'
- en: The algorithm that creates the columns is actually quite intelligent and resizes
    the columns automatically so they better fit the parent. It uses the 150px as
    a *minimum* value, making each column wider until the total width matches that
    of its parent—in this case, each column is resized to 168.5px.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 创建列的算法其实非常智能，它会自动调整列的大小，使它们更好地适应父元素。它使用150px作为*最小*值，直到每列的宽度足够，直到总宽度与父元素相匹配——在这个例子中，每列的宽度被调整为168.5px。
- en: '***Varying Distribution of Content Across Columns***'
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***内容在列中的不同分布***'
- en: By default, content that’s flowed into multiple columns will be balanced as
    equally as possible across the columns, so no one column is longer than any of
    the others. If the browser can’t arrange the content so there are an equal number
    of lines in each column, the last column will be made shorter. This is probably
    easier to show than to explain, so [Figure 7-3](ch07.html#ch07fig3) shows text
    distributed over three columns using the default layout method.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，流入多列的内容会尽可能均衡地分布在列中，以使每列的长度相同。如果浏览器无法均匀安排内容，最后一列会被缩短。这可能比解释更容易理解，因此[图
    7-3](ch07.html#ch07fig3)展示了使用默认布局方法将文本分布在三列上的效果。
- en: '![Image](graphics/f07-03.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f07-03.jpg)'
- en: '*Figure 7-3: Text dynamically distributed over three columns*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-3：文本动态分布在三列上*'
- en: 'You can see that all three columns have the same number of lines. If you want
    to change this default behavior, you can do so with the `column-fill` property:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到所有三列的行数相同。如果你想更改这个默认行为，可以使用`column-fill`属性来实现：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This property has two possible keyword values: the default is `balance`, which
    tries to make all the columns equal length, as in [Figure 7-3](ch07.html#ch07fig3);
    and the alternative is `auto`, which fills columns sequentially.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性有两个可能的关键字值：默认值是`balance`，它试图使所有列的长度相等，如[图 7-3](ch07.html#ch07fig3)所示；另一种选择是`auto`，它按顺序填充列。
- en: The `auto` value takes effect only when the parent element has a fixed height.
    The content is flowed into the first column to fill the height and then into the
    next column until that one is filled, and so on.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`auto`值仅在父元素具有固定高度时生效。内容首先流入第一列以填充高度，然后流入下一列，直到该列填满，以此类推。'
- en: '**WARNING**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*When using the* `*auto*` *value, it may appear that you have fewer columns
    than are specified in the* `*column-count*` *property, but that won’t be the case;
    it’s just that some columns would be empty.*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*当使用`*auto*`值时，可能看起来你有比`*column-count*`属性指定的列数少，但实际情况并非如此；只是有些列会是空的。*'
- en: You can see an example of the `auto` value for `column-fill` in [Figure 7-4](ch07.html#ch07fig4);
    the first two columns have an equal number of lines and the third has three fewer,
    as the text is simply flowed into the columns without the browser trying to balance
    them.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图7-4](ch07.html#ch07fig4)中看到`column-fill`的`auto`值示例；前两列有相等数量的行，第三列少了三行，因为文本仅仅流入列中，浏览器并没有尝试平衡它们。
- en: '![Image](graphics/f07-04.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f07-04.jpg)'
- en: '*Figure 7-4: Content flowed into columns with the* `*auto*` *value for the*
    `*column-fill*` *property*'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-4：使用`*auto*`值将内容流入列中，作为`*column-fill*`属性的值*'
- en: Firefox and IE10+ are the only browsers to implement this property currently,
    although Chrome and Safari automatically act as if the `auto` value were applied
    when a height is fixed on the parent.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，只有Firefox和IE10+浏览器实现了这个属性，尽管Chrome和Safari在父元素设置固定高度时，自动表现得像应用了`auto`值一样。
- en: '***Combining column-count and column-width***'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结合column-count和column-width***'
- en: 'You can set both `column-count` and `column-width` properties on an element,
    though, at first, you might think doing so would create a conflict. This possibility
    has been taken into consideration, however: If both properties are applied to
    the same element, the `column-count` value acts as a maximum. To illustrate, let’s
    refer to [Figure 7-2](ch07.html#ch07fig2) but change the CSS to also include the
    `column-count` property:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在一个元素上同时设置`column-count`和`column-width`属性，尽管一开始你可能认为这样做会产生冲突。然而，这种可能性已经被考虑在内：如果两个属性都应用于同一元素，`column-count`的值作为最大值。为了说明这一点，让我们参考[图7-2](ch07.html#ch07fig2)，但将CSS更改为同时包括`column-count`属性：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here is the logic behind this: divide the text into columns of 150px each,
    unless that would create three or more columns, in which case make three columns
    with a minimum width of 150px.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是其背后的逻辑：将文本分成每列150px，除非这样会创建三列或更多列，在这种情况下，创建三列，最小宽度为150px。
- en: If you refer back to the example shown in [Figure 7-2](ch07.html#ch07fig2),
    you’ll remember that, given the parent element’s width of 710px, the `column-width`
    property rendered four columns. As you’re applying both properties on the same
    element, however, the `column-count` property takes precedence and only three
    columns are distributed, with their widths dynamically altered to best fit the
    parent element. You can see the result in [Figure 7-5](ch07.html#ch07fig5).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回顾一下[图7-2](ch07.html#ch07fig2)中显示的示例，你会记得，考虑到父元素的宽度为710px，`column-width`属性生成了四列。然而，当你在同一元素上应用这两个属性时，`column-count`属性优先，结果只会分配三列，它们的宽度会动态调整以最好地适应父元素。你可以在[图7-5](ch07.html#ch07fig5)中看到结果。
- en: '![Image](graphics/f07-05.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f07-05.jpg)'
- en: '*Figure 7-5: When combining column properties,* `*column-count*` *acts as a
    maximum.*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-5：当结合列属性时，* `*column-count*` *作为最大值。*'
- en: 'If you want to use these two properties together, a shorthand property is available:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望一起使用这两个属性，提供了一个简写属性：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'So if you were to use the values from [Figure 7-5](ch07.html#ch07fig5) with
    this shorthand property, it would look like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你使用[图7-5](ch07.html#ch07fig5)中的值与这个简写属性，它看起来会是这样：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Column Gaps and Rules**'
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**列间距和规则**'
- en: 'When using a prescriptive multi-column layout, the browser should place a default
    1em gap between each column. You can, however, alter that default and specify
    your own distances by using two new properties: `column-gap` and `column-rule`.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用规定的多列布局时，浏览器应在每列之间设置默认的1em间距。然而，你可以通过使用两个新属性：`column-gap` 和 `column-rule`，来更改默认值并指定自己的间距。
- en: 'The first property, `column-gap`, sets the space between columns, and its syntax
    is simple:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个属性，`column-gap`，设置列与列之间的间距，它的语法很简单：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `*length*` value is any number with a standard CSS length unit. Here’s
    an example that puts a 2em gap between each of your generated columns (though
    not on the outside of either the first or last column):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`*length*`值是任何带有标准CSS长度单位的数字。以下是一个示例，在生成的每列之间设置2em的间距（不过不会在第一列或最后一列的外侧添加间距）：'
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The second property, `column-rule`, draws a line, similar to a border, equidistantly
    between columns. The syntax for `column-rule` is actually shorthand for three
    subproperties: `column-rule-width`, `column-rule-style`, and `column-rule-color`.
    These subproperties take values in exactly the same way as their equivalent `border-*`
    properties from CSS2\. Here’s the syntax:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个属性，`column-rule`，画一条线，类似于边框，等距离地分隔列。`column-rule`的语法实际上是三个子属性的简写：`column-rule-width`、`column-rule-style`和`column-rule-color`。这些子属性的值与它们在CSS2中的等效`border-*`属性完全相同。以下是语法：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If you added real values, you would have something like this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你添加了实际值，结果会是这样的：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can then use the `column-rule` shorthand to set all three subproperties
    at once:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以使用`column-rule`简写一次性设置所有三个子属性：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let’s see the `column-gap` and `column-rule` properties in action. The following
    example combines them with `column-count`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`column-gap`和`column-rule`属性的实际效果。以下示例将它们与`column-count`结合使用：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This example splits the element’s children into three columns, each with a gap
    of 2em between the columns, and a 0.3em rule. The thickness of the rule has no
    effect on layout—no matter how thick you make the rule, the gap will always stay
    the same width. You can see the result of this example in [Figure 7-6](ch07.html#ch07fig6).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将元素的子元素分成三列，每列之间有2em的间隙，并且有一个0.3em的分隔线。分隔线的厚度对布局没有影响——无论你把分隔线做得多厚，间隙的宽度始终保持不变。你可以在[图
    7-6](ch07.html#ch07fig6)中看到这个示例的结果。
- en: '![Image](graphics/f07-06.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f07-06.jpg)'
- en: '*Figure 7-6: Inter-column gaps and rules*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-6：列间间隙和规则*'
- en: '**Containing Elements Within Columns**'
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**列内包含元素**'
- en: So far in these examples I’ve only used blocks of text, which flow neatly into
    columns. But what happens with larger elements, like images, that could have a
    width greater than the column that contains them? Let’s see what happens when
    I add an image that’s wider than a single column inside a column layout, using
    the `img` element. The result is displayed in [Figure 7-7](ch07.html#ch07fig7).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在这些示例中我只使用了文本块，这些文本块整齐地流入列中。但对于像图像这样可能宽于所包含列的较大元素，会发生什么呢？让我们看看当我在列布局中添加一个比单列更宽的图像时会发生什么，使用`img`元素。结果显示在[图
    7-7](ch07.html#ch07fig7)中。
- en: '![Image](graphics/f07-07.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f07-07.jpg)'
- en: '*Figure 7-7: An* `*img*` *element wider than a column^([1](footnote.html#footnote1))*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-7：一个比列宽的`*img*`元素^([1](footnote.html#footnote1))*'
- en: As you can see, the image is displayed in the second column, but the overflow
    is clipped at a point halfway inside the `column-gap`. The only browser that differs
    from this behavior (at the time of writing) is Firefox, which (unfortunately)
    keeps the width of the image but flows the content of subsequent columns over
    it, as shown in [Figure 7-8](ch07.html#ch07fig8).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，图像显示在第二列中，但溢出部分在`column-gap`的中间位置被剪切。到目前为止，唯一与此行为不同的浏览器是Firefox，它（不幸的是）保持图像的宽度，但将后续列的内容流过它，如[图
    7-8](ch07.html#ch07fig8)所示。
- en: '![Image](graphics/f07-08.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f07-08.jpg)'
- en: '*Figure 7-8: Firefox differs from all other browsers in the way it displays
    wide elements in columns.*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-8：Firefox在显示宽元素时与其他所有浏览器不同。*'
- en: Hopefully, this issue will be fixed in a future release (perhaps even by the
    time you read this).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这个问题将在未来的版本中修复（也许在你读到这篇文档时就已经修复了）。
- en: To work around the problem entirely, I could set a value of `100%` on the `max-width`
    property of the image, as the width is calculated from that of its containing
    column, rather than the parent element.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完全解决这个问题，我可以将图像的`max-width`属性设置为`100%`，因为宽度是根据包含列的宽度计算的，而不是父元素的宽度。
- en: '**Elements Spanning Multiple Columns**'
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**跨越多列的元素**'
- en: 'On occasion, you may want certain elements to span multiple columns—for example,
    a subheading that will be used to break up sections of a story. To deal with these
    elements, the module introduces the `column-span` element. Here’s the syntax:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能希望某些元素跨越多个列——例如，一个子标题，用来分隔故事的各个部分。为了处理这些元素，该模块引入了`column-span`元素。以下是语法：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In this case, `*value*` can be only one of two possibilities: `all` or `none`.
    The default is `none`, which keeps the element in the column flow. The alternative
    value, `all`, provides a break in the flow—all content before the element will
    be distributed into columns, and all content after the element will be distributed
    into columns, but the element itself—known as the *spanning element*—will not.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`*value*`只能是两种可能值之一：`all` 或 `none`。默认值是 `none`，这将使元素保持在列流中。另一种可能的值是 `all`，这会打断列流——元素之前的所有内容会分配到各列中，元素之后的所有内容也会分配到各列中，但元素本身——被称为
    *跨越元素*——则不会。
- en: In the following example, the `h2` element has a `column-span` value of `all`,
    so it spans multiple columns, causing a break in the text flow. You can see the
    result in [Figure 7-9](ch07.html#ch07fig9).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，`h2` 元素的 `column-span` 值为 `all`，因此它跨越了多个列，导致文本流断开。你可以在[图7-9](ch07.html#ch07fig9)中看到效果。
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![Image](graphics/f07-09.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f07-09.jpg)'
- en: '*Figure 7-9: An* `*h2*` *element spans two columns*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-9：一个* `*h2*` *元素跨越了两列*'
- en: Firefox is the only browser not to support this property at the time of writing.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，Firefox是唯一不支持此属性的浏览器。
- en: '**Summary**'
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: 'Although CSS3 makes flowing your content into columns easy, the challenges
    it presents are not so much technical as they are practical: What happens if you
    want to use images that are wider than a column or if you want to use long headlines
    in narrow columns?'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管CSS3让你的内容流入列中变得很容易，但它所带来的挑战不在于技术性问题，而在于实际应用问题：如果你想使用比列宽更宽的图片，或者你想在狭窄的列中使用长标题，怎么办？
- en: Although using multiple columns is definitely appropriate in certain situations,
    think twice about whether your content is suitable. Make sure you have full control
    over your content before using these properties, and don’t design websites that
    rely on multiple columns if your client doesn’t have a dedicated and conscientious
    web content team.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在某些情况下使用多列布局肯定是合适的，但在使用之前请三思是否适合你的内容。确保在使用这些属性之前，你完全掌控了你的内容，并且如果你的客户没有专门且认真负责的网络内容团队，最好不要设计依赖多列布局的网站。
- en: Also, bear in mind that screen resolutions can vary dramatically, and content
    that looks readable to you may not be readable to the visitors of your website.
    If they have to scroll up and down too frequently, which can cause lots of confusion,
    they may be put off from visiting your site altogether. But with all that said,
    clever use of columns can make your content much more readable.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，请记住，屏幕分辨率可能会有很大差异，对你而言看起来可读的内容可能对网站访客来说并不可读。如果他们必须频繁地上下滚动，这可能会引起很多困惑，甚至可能导致他们完全不再访问你的网站。不过，话虽如此，巧妙地使用多列布局可以让你的内容更具可读性。
- en: In the last three chapters, I’ve described how CSS3 provides methods to format
    and present your text copy, giving you better control over your typography and
    layout. Next, I introduce ways you can improve the overall visual presentation
    of your websites, starting with new background and border effects.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后三章中，我描述了CSS3如何提供格式化和呈现文本副本的方法，帮助你更好地控制排版和布局。接下来，我将介绍如何改善网站的整体视觉效果，首先从新的背景和边框效果开始。
- en: '**Multiple Columns: Browser Support**'
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**多列布局：浏览器支持**'
- en: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
- en: '| `column-count` | Yes^([*](ch07.html#footnote26a)) | Yes[*](ch07.html#footnote26a)
    | Yes[*](ch07.html#footnote26a) | IE10 |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `column-count` | 是^([*](ch07.html#footnote26a)) | 是[*](ch07.html#footnote26a)
    | 是[*](ch07.html#footnote26a) | IE10 |'
- en: '| `column-width` | Yes[*](ch07.html#footnote26a) | Yes[*](ch07.html#footnote26a)
    | Yes[*](ch07.html#footnote26a) | IE10 |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `column-width` | 是[*](ch07.html#footnote26a) | 是[*](ch07.html#footnote26a)
    | 是[*](ch07.html#footnote26a) | IE10 |'
- en: '| `columns` | Yes[*](ch07.html#footnote26a) | Yes[*](ch07.html#footnote26a)
    | Yes[*](ch07.html#footnote26a) | IE10 |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `columns` | 是[*](ch07.html#footnote26a) | 是[*](ch07.html#footnote26a) | 是[*](ch07.html#footnote26a)
    | IE10 |'
- en: '| `column-fill` | No | Yes[*](ch07.html#footnote26a) | No | IE10 |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `column-fill` | 否 | 是[*](ch07.html#footnote26a) | 否 | IE10 |'
- en: '| `column-gap` | Yes[*](ch07.html#footnote26a) | Yes[*](ch07.html#footnote26a)
    | Yes[*](ch07.html#footnote26a) | IE10 |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `column-gap` | 是[*](ch07.html#footnote26a) | 是[*](ch07.html#footnote26a)
    | 是[*](ch07.html#footnote26a) | IE10 |'
- en: '| `column-rule` | Yes[*](ch07.html#footnote26a) | Yes[*](ch07.html#footnote26a)
    | Yes[*](ch07.html#footnote26a) | IE10 |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `column-rule` | 是[*](ch07.html#footnote26a) | 是[*](ch07.html#footnote26a)
    | 是[*](ch07.html#footnote26a) | IE10 |'
- en: '| `column-span` | Yes[*](ch07.html#footnote26a) | No | Yes[*](ch07.html#footnote26a)
    | IE10 |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `column-span` | 是[*](ch07.html#footnote26a) | 否 | 是[*](ch07.html#footnote26a)
    | IE10 |'
- en: '[*](ch07.html#footnote_26a) With vendor prefix'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[*](ch07.html#footnote_26a) 使用厂商前缀'
