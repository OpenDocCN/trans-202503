- en: '![](Images/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Avoiding the Monster
  prefs: []
  type: TYPE_NORMAL
- en: '![Alphabet-A](Images/Alphabet-A.png)I and ML have exciting potential for the
    future of computer games, such as computer game characters that learn to understand
    your words and actions. There are already games where characters behave like the
    chatbots you learned about in the last chapter. However, the opportunity for truly
    intelligent games that adapt as they are played is enormous.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll look at the reverse situation: not how AI can contribute
    to game development, but how games have been used in AI development.'
  prefs: []
  type: TYPE_NORMAL
- en: Games provide a simulation environment with a well-defined goal, a way to collect
    training examples, and a way to measure effectiveness, which makes them a great
    platform for the research and development of computer systems that can learn.
  prefs: []
  type: TYPE_NORMAL
- en: '*Pac-Man* (and *Ms. Pac-Man*) is an example of a classic computer game that
    has regularly been used in AI research. The *Ms. Pac-Man AI competition**, where
    academics submit ML systems that compete to see which is best at playing the game,
    has been held multiple times since 2007 and is still used as a task for AI students
    and researchers today.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*In this chapter, you’ll try training an ML system to play a simplified version
    of *Pac-Man*, where the objective is to navigate a character through a maze while
    avoiding a monster (see [Figure 12-1](#figure12-1)).'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: '![f12001](Images/f12001.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 12-1:](#figureanchor12-1) A simple video game we can train an ML system
    to play'
  prefs: []
  type: TYPE_NORMAL
- en: Build Your Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we start, try the game for yourself so you understand what we’ll be training
    the computer to do. First, go to [https://machinelearningforkids.co.uk/scratch3/](https://machinelearningforkids.co.uk/scratch3/)
    and click **Project templates** in the top menu bar, as shown in [Figure 12-2](#figure12-2).
  prefs: []
  type: TYPE_NORMAL
- en: '![f12002](Images/f12002.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 12-2:](#figureanchor12-2) Access the game from the **Project templates**
    menu.'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Avoid the monster** game as shown in [Figure 12-3](#figure12-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![f12003](Images/f12003.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 12-3:](#figureanchor12-3) Click **Avoid the monster** in the list of
    project templates.'
  prefs: []
  type: TYPE_NORMAL
- en: In this game, you play as the character *nano*, which starts off in the bottom-left
    corner of the Stage. Your objective is to avoid the monster, which starts off
    in the top-right corner of the Stage, for as long as you can.
  prefs: []
  type: TYPE_NORMAL
- en: You control nano using the arrow keys to change direction. Nano can only follow
    the grid, so you can only move up, down, left, and right. You can’t move diagonally.
  prefs: []
  type: TYPE_NORMAL
- en: When you’re not pressing an arrow key, nano will just continue in whatever direction
    you last pressed.
  prefs: []
  type: TYPE_NORMAL
- en: Nano can’t move faster than the monster. The game’s code uses a timer so that
    both nano and the monster can make only one move per second.
  prefs: []
  type: TYPE_NORMAL
- en: There are two walls in the way. Neither nano nor the monster is allowed to go
    through the walls.
  prefs: []
  type: TYPE_NORMAL
- en: Give the game a try. Click the full-screen icon in the controls at the top right
    and then click the Green Flag.
  prefs: []
  type: TYPE_NORMAL
- en: How long can you avoid the monster?
  prefs: []
  type: TYPE_NORMAL
- en: Describe the State of the Game
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The game board can be represented as a graph, as shown in [Figure 12-4](#figure12-4).
  prefs: []
  type: TYPE_NORMAL
- en: '![f12004](Images/f12004.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 12-4:](#figureanchor12-4) Think of the game board as a graph with x-
    and y-axes.'
  prefs: []
  type: TYPE_NORMAL
- en: Using this graph, you can describe the locations of nano and the monster as
    a pair of coordinates. For example, in [Figure 12-4](#figure12-4) the monster
    is at *x* = 7 and *y* = 3.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use this representation of the game to describe it to the computer.
  prefs: []
  type: TYPE_NORMAL
- en: We want to give the computer four numbers so that it can decide to move nano
    up, down, left, or right to avoid the monster.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we input the coordinates shown in [Figure 12-5](#figure12-5),
    the computer could decide to move nano up.
  prefs: []
  type: TYPE_NORMAL
- en: '![f12005](Images/f12005.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 12-5:](#figureanchor12-5) Nano is at *x* = 5, *y* = 5, and the monster
    is at *x* = 7, *y* = 3\.'
  prefs: []
  type: TYPE_NORMAL
- en: Your objective for this project is to train an ML model to decide on the best
    direction to avoid the monster.
  prefs: []
  type: TYPE_NORMAL
- en: Train Your Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To train the computer to play the game, you need to collect examples of the
    game being played. The best way to do this is to play the game yourself and use
    your playing to train the computer.
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to prepare the training buckets where you’ll store examples
    of the moves you make.
  prefs: []
  type: TYPE_NORMAL
- en: Go to *[https://machinelearningforkids.co.uk/](https://machinelearningforkids.co.uk/)*.
    Create a new ML project, name it `Avoid the monster`, and set it to learn to recognize
    numbers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Add a value**, type `nano x` for the value name, and set **Type of value**
    to **number**. Click **Add another value** and then add three more values named
    `nano y`, `monster x`, and `monster y`, as shown in [Figure 12-6](#figure12-6).
    Once you’ve added all four values, click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These values will store the coordinates of the two characters on the graph.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f12006](Images/f12006.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 12-6:](#figureanchor12-6) Prepare the values for the Avoid the monster
    project.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Train**, as shown in [Figure 12-7](#figure12-7).![f12007](Images/f12007.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 12-7:](#figureanchor12-7) Click **Train** to prepare your training
    buckets.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Add new label**, as shown in [Figure 12-8](#figure12-8), and create
    four training buckets for the four directions nano can move. Call them `go left`,
    `go right`, `go up`, and `go down`. (The underscores will be added automatically.)![f12008](Images/f12008.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 12-8:](#figureanchor12-8) Prepare four training buckets for the four
    directions nano can move.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For example, imagine nano is at coordinates *x* = 2, *y* = 3 and the monster
    is at the coordinates *x* = 6, *y* = 7 while you’re playing the game. If you pressed
    the right arrow to move nano to the right, that set of numbers would be added
    to the go_right training bucket, as shown in [Figure 12-9](#figure12-9).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f12009](Images/f12009.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 12-9:](#figureanchor12-9) Moves that you make while playing the game
    will be added to the training buckets.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The next step is to collect lots and lots of examples that we can use to train
    an ML model. We’ll collect training examples by playing the game.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Back to project** and then click **Make**, as shown in [Figure 12-10](#figure12-10).![f12010](Images/f12010.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 12-10:](#figureanchor12-10) Click **Make** to use your project in Scratch.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Scratch 3**, as shown in [Figure 12-11](#figure12-11).![f12011](Images/f12011.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 12-11:](#figureanchor12-11) Click **Scratch 3** to go back to Scratch.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **straight into Scratch**, as shown in [Figure 12-12](#figure12-12).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Project templates** in the top menu bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Avoid the monster** to open the template again, this time with blocks
    from your ML project.![f12012](Images/f12012.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 12-12:](#figureanchor12-12) Click **straight into Scratch** even though
    you don’t have an ML model yet.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Stage** backdrop at the bottom right of the screen. In the Code
    Area, find the first `When Green Flag clicked` script, as shown in [Figure 12-13](#figure12-13).![f12013](Images/f12013.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 12-13:](#figureanchor12-13) Find the first, shorter green flag script
    in the Code Area.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the Toolbox, click **Avoid the monster** and drag the blocks with the names
    of your training buckets into the script as shown in [Figure 12-14](#figure12-14).
    Make sure the directions match; for example, drag `go_left` into the `set left
    to` block.![f12014](Images/f12014.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 12-14:](#figureanchor12-14) Add your project labels to the script.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Scroll down in the Code Area to find the `define nano-decision` script, as shown
    in [Figure 12-15](#figure12-15).![f12015](Images/f12015.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 12-15:](#figureanchor12-15) Find the `define nano-decision` script.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the **Avoid the monster** group in the Toolbox, drag a new `add training
    data` block to the script, as shown in [Figure 12-16](#figure12-16). This block
    will add every move that you make while playing the game to your training examples.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Variables** in the Toolbox and drag the blocks shown in [Figure 12-16](#figure12-16)
    into the `add training data` block. For each move, the coordinates for your character
    and the monster will be added, together with the decision you made, to your training
    examples.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f12016](Images/f12016.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 12-16:](#figureanchor12-16) Update the `define nano-decision` script.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now you need to save your project so that you can return to it later. First,
    in the **Scratch Project** text box in the top menu bar, type `Avoid the monster
    TRAINING` as shown in [Figure 12-17](#figure12-17). This tells you that this version
    of the project is where you play the game to train your ML model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then click **File**▶**Save to your computer**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f12017](Images/f12017.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 12-17:](#figureanchor12-17) Update the project name before saving this
    version.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Play the game!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the controls at the top right of the screen, click the full-screen icon and
    then click the Green Flag to start the game. Use the arrow keys to control the
    nano character like you did before.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Do your best to avoid the monster for as long as possible. The better you play,
    the better the ML model can learn.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you think you’ve played for long enough, click the red Stop Sign.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can see the moves that you’ve made if you go back to the Train phase, as
    shown in [Figure 12-18](#figure12-18). You may need to refresh the page to see
    the latest examples.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f12018](Images/f12018.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 12-18:](#figureanchor12-18) Moves that you made while playing should
    be displayed in your training buckets.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Play a few more games until you think you’ve collected examples of all the situations
    nano could get into.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It’s time to train an ML model using the examples you’ve collected. Click **Back
    to project** and then click **Learn & Test**, as shown in [Figure 12-19](#figure12-19).![f12019](Images/f12019.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 12-19:](#figureanchor12-19) Click **Learn & Test** to train a model
    using the moves you’ve collected.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Train new machine learning model**, as shown in [Figure 12-20](#figure12-20).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![f12020](Images/f12020.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 12-20:](#figureanchor12-20) Train a new ML model using your playing
    moves.'
  prefs: []
  type: TYPE_NORMAL
- en: Test Your Game
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You’ve trained an ML model to play the game! The best way to test your model
    is to let the ML model take control of the nano character and see how long it
    can avoid the monster for.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll need to modify our Scratch project so that it can be controlled by the
    ML model, not the arrow keys.
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the `when arrow key pressed` scripts in the Code Area. There are four
    of them, as shown in [Figure 12-21](#figure12-21): `when left arrow key pressed`,
    `when right arrow key pressed`, `when up arrow key pressed`, and `when down arrow
    key pressed`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the scripts either by clicking each block and pressing the delete key
    or by right-clicking each block and choosing **Delete Block**. Be sure to delete
    every block in all four scripts so that you can’t take control of the character
    with any arrow key.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f12021](Images/f12021.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 12-21:](#figureanchor12-21) Delete the four `when arrow key pressed`
    scripts so you can no longer control nano.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Find the `define nano-decision` block that you updated before. Using blocks
    from the **Variables** and **Avoid the monster** groups in the Toolbox, update
    the script again so that it looks like [Figure 12-22](#figure12-22).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Instead of learning from your arrow keys, now you want the computer to make
    decisions using your ML model.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f12022](Images/f12022.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 12-22:](#figureanchor12-22) Update the `define nano-decision` script
    so that your ML model is controlling the game.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Find the longer `when Green Flag clicked` script and remove the `wait 1 second`
    block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will make the game run a little quicker so that you don’t have to wait
    for each move. The updated script will look like [Figure 12-23](#figure12-23).
    (The arrow shows where the block was before I removed it.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f12023](Images/f12023.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 12-23:](#figureanchor12-23) Remove the `wait 1 second` block.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now you need to save your project again so that you can return to it later.
    This time, enter the name `Avoid the monster``TESTING` in the text box so you’ll
    know that this version of the project is where you let the ML model play. Then,
    click **File**▶**Save to your computer**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the full-screen icon and then click the Green Flag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Watch your ML model try to keep nano safe from the monster ([Figure 12-24](#figure12-24))!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f12024](Images/f12024.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 12-24:](#figureanchor12-24) Your ML project in action'
  prefs: []
  type: TYPE_NORMAL
- en: Review and Improve Your Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How did your ML model do?
  prefs: []
  type: TYPE_NORMAL
- en: The longer it managed to avoid the monster, the better it did. If you’ve done
    really well, it’ll be able to avoid the monster forever. Because the monster moves
    at the same speed as nano, as long as your ML model doesn’t make any mistakes,
    it’s possible for nano to always stay ahead of the monster.
  prefs: []
  type: TYPE_NORMAL
- en: What difference does the amount of training make?
  prefs: []
  type: TYPE_NORMAL
- en: Try opening your *training* version of the Scratch project and add more training
    examples by playing the game for a little longer. Then, go back to the Learn &
    Test phase and train a new ML model using your extra training examples. Finally,
    open your *testing* version of the Scratch project and watch the new ML model
    play the game.
  prefs: []
  type: TYPE_NORMAL
- en: Did the extra training help?
  prefs: []
  type: TYPE_NORMAL
- en: Try doing this a few times to see how the amount of training affects how well
    your ML model plays.
  prefs: []
  type: TYPE_NORMAL
- en: The type of ML model you’ve trained in this project is called a *decision tree
    classifier**, because the way the model makes decisions about its next moves can
    be drawn as a sort of tree, as shown in [Figure 12-25](#figure12-25). To see a
    diagram of your ML model, in the Learn & Test phase, click **Describe your model!**
    next to the Test button.*
  prefs: []
  type: TYPE_NORMAL
- en: '*![f12025](Images/f12025.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 12-25:](#figureanchor12-25) A decision tree'
  prefs: []
  type: TYPE_NORMAL
- en: The decision tree diagram can help you understand how your ML model is making
    *predictions* about the outcome of each move.
  prefs: []
  type: TYPE_NORMAL
- en: Each box on the tree describes a test; for example, monster x < 3 means “is
    the x-coordinate of the monster less than 3?” If the test is true, the tree follows
    the left-hand arrow. If the test is not true, the tree follows the right-hand
    arrow.
  prefs: []
  type: TYPE_NORMAL
- en: The ML model starts at the top of the tree and follows the arrows identified
    by the tests until it reaches the bottom of the tree.
  prefs: []
  type: TYPE_NORMAL
- en: To see an example of the decision process, enter some coordinates for nano and
    the monster into the boxes to the right of your decision tree, and click **Test**.
    The diagram will highlight the way your ML model made a prediction for those coordinates.
    When there are no more arrows to follow and it reaches the bottom of the tree,
    you’ll find the final prediction, as shown in [Figure 12-26](#figure12-26).
  prefs: []
  type: TYPE_NORMAL
- en: '![f12026](Images/f12026.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 12-26:](#figureanchor12-26) Highlighting the coordinates used to make
    a prediction about the outcome of a move'
  prefs: []
  type: TYPE_NORMAL
- en: Test your model with a few different sets of coordinates to understand how it
    has learned to make predictions.
  prefs: []
  type: TYPE_NORMAL
- en: What You Learned
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you learned that ML models can be trained to recognize patterns
    in sets of numbers. You used a decision tree classifier to train a model to play
    a simplified version of the game *Pac-Man*, using sets of x- and y-coordinates
    to make decisions about its next moves based on their predicted outcome.
  prefs: []
  type: TYPE_NORMAL
- en: A decision tree is not the only way to train an ML model to make predictions
    based on numbers, but it’s a popular choice because it’s very quick to train and
    one of the easiest techniques to understand. In previous chapters, you’ve been
    using neural networks, which can be more powerful but are more complicated and
    harder to understand.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve seen that, as with other ML models you’ve trained before, the model’s
    performance improves as you collect more training examples. In the next chapter,
    you’ll learn more about the difference the amount of training data makes on ML
    projects.**
  prefs: []
  type: TYPE_NORMAL
