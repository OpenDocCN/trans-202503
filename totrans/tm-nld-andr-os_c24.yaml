- en: '24'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developer Tools
  prefs: []
  type: TYPE_NORMAL
- en: Developers, developers, developers, developers, developers, developers, developers,
    developers, developers, developers, developers, developers, developers, developers.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Steve Ballmer, Microsoft^([1](#c24-footnote-1))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: One of the reasons behind Android’s growth is the developer ecosystem that was
    created along the way, enabling thousands (now millions) of applications for people
    to find, download, and use.
  prefs: []
  type: TYPE_NORMAL
- en: But this kind of ecosystem doesn’t just happen automatically, especially for
    a new platform with no market share. In order to lower the barrier to entry for
    application developers, to make it easier for them to write and publish their
    applications, Android needed to provide tools for developers.
  prefs: []
  type: TYPE_NORMAL
- en: A determined developer could write code and use some obscure commands in a terminal
    to compile that code into an application. If that developer just wanted to write
    a “Hello, World!”^([2](#c24-footnote-2)) app, that’s probably all they’d need.
  prefs: []
  type: TYPE_NORMAL
- en: But any real application involves a large amount of code and other materials,
    including multiple files, resources for images, text strings, and so on. That
    level of complexity is overwhelming if you’re coding it all by hand in a text
    editor with just a command-line compiler for a friend.
  prefs: []
  type: TYPE_NORMAL
- en: That’s why Xavier Ducrohet was brought onto the team, in April of 2007.
  prefs: []
  type: TYPE_NORMAL
- en: Xavier Ducrohet and the SDK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Xavier (who goes by “Xav”) had been working on tools for years. Most recently,
    he was building drawing tools at Beatware. It wasn’t the most stable of jobs:
    “We were not always quite paid.” But Xav’s green card, which allowed him to stay
    and work in the US, was still being processed, and leaving a company can put that
    process in jeopardy. Also, he felt some responsibility for not causing a crisis
    for the small company. “If I left, the company would go under.”'
  prefs: []
  type: TYPE_NORMAL
- en: Beatware was eventually acquired by Hyperion Software in late 2006\. Xav decided
    to stick it out a bit longer because of the stock he was still vesting. But in
    March of 2007, Oracle acquired Hyperion, and that was it; Xav didn’t want to join
    Oracle. He called his old friend Mathias Agopian at Google.
  prefs: []
  type: TYPE_NORMAL
- en: Xav already had a good idea of what Android was about, even though the project
    was secret. Beatware had been in conversations with Android early on about providing
    some graphics technology. Beatware offered a vector-based image editing tool,
    which Android could have used for UI graphics. Vector images offer the advantage
    that they look better when scaled than pure bitmap images, which become blocky
    or distorted when they are scaled. But Android eventually developed its own kind
    of image for that purpose, called a *NinePatch*.^([3](#c24-footnote-3))
  prefs: []
  type: TYPE_NORMAL
- en: Xav had known Mathias for years, from the Be community. Xav had played around
    with BeOS back when he was in college in France. He’d gotten to know the Be community
    in Paris at the time, which included Mathias as well as future Android engineer
    Jean-Baptiste Quéru. So when Xav wanted a new job, he reached out to Mathias.
    He had already interviewed with the team earlier when he was at Beatware, so his
    interview this time just consisted of having lunch with Steve Horowitz. He started
    three weeks later, in April of 2007.
  prefs: []
  type: TYPE_NORMAL
- en: On his first day, Xav sat down with Steve and Mike Cleron, who suggested he
    work on tools. To begin with, Xav dove into DDMS.^([4](#c24-footnote-4)) DDMS
    was a tool running on a developer’s desktop system that was a container for many
    different tools. For example, DDMS provided a list of the current applications
    running on an Android device connected to the host computer. Selecting one of
    these would cause that application to connect to port 8700 on the host computer,
    at which point you could debug that application by connecting to that port from
    a debugging tool.
  prefs: []
  type: TYPE_NORMAL
- en: Xav’s starter project^([5](#c24-footnote-5)) was to enable DDMS to visualize
    native memory. This isn’t a particularly critical need for most Android developers,
    but it was very important at the time for the Android platform team itself. After
    that project, he refactored the monolithic DDMS tool into separate pieces consisting
    of the core functionality, the user interface layer, and the glue that tied the
    other two together into a standalone tool.
  prefs: []
  type: TYPE_NORMAL
- en: By refactoring DDMS, Xav was able to connect the pieces with an existing open
    source development IDE called Eclipse. By June, he was able to demonstrate, to
    the larger Android team, the entire workflow of opening up an application project
    within this IDE, compiling it, deploying it to the emulator, running it on the
    emulator, stopping at a breakpoint^([6](#c24-footnote-6)) in the code, and then
    stepping through the code, instruction by instruction.
  prefs: []
  type: TYPE_NORMAL
- en: This project was a good example of what things were like on Android. Someone
    identified a problem and would then just go hammer out a solution. Quickly. Xav
    joined in late April. By June, two months after he started, he demoed the entire,
    new, functional tools flow to the team. That set of tools shipped to external
    developers when the SDK launched a few months later and served as the basis for
    Android’s developer toolchain for many years. He went from joining the company
    and team, knowing nothing about Android, to offering a tool that would form foundational
    support for all Android developers (platform and application, internal and external)
    in just a couple of months.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502680c24/f24001.png)'
  prefs: []
  type: TYPE_IMG
- en: Xav on November 12, 2007—launch day for the first SDK (picture courtesy Brian
    Swetland)
  prefs: []
  type: TYPE_NORMAL
- en: Once Xav finished that IDE project, he created the SDK for Android. The SDK
    was an installable bundle of tools and other pieces for application developers
    that included the Android Eclipse plugin (and all the sub-tools like DDMS, ADB,
    and Traceview) and Android itself. The Android bits included the library of code
    that developers wrote their programs against, the system image of Android that
    ran in the emulator, and documentation so that developers could figure out what
    it was they were supposed to be doing. Again, Xav identified the need and put
    things together. And it’s a good thing he did. This work was coming together around
    August of 2007\. Meanwhile, the SDK for Android was set to ship that November,
    so it’s nice that they had something to ship.
  prefs: []
  type: TYPE_NORMAL
- en: David Turner and the Emulator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the critical tools that developers need early on in a platform’s development
    is a device to run that platform on; if you can’t run your application, how can
    you verify that it does what it’s supposed to?
  prefs: []
  type: TYPE_NORMAL
- en: 'But when Android was first being developed, devices that ran the platform were
    effectively unavailable,^([7](#c24-footnote-7)) so the team brought in someone
    to write a virtual device: David Turner (known to the team as “digit”).'
  prefs: []
  type: TYPE_NORMAL
- en: Before he wrote the original Android emulator, David was famous in programming
    circles as the original author of FreeType, a font-rendering library. One of the
    fascinating things about Google is that there are so many people at the company
    that are famous for doing a particular thing . . . which is completely unrelated
    to what they end up doing at Google. I’ve known famous classic game developers,
    inventors of fundamental graphics algorithms, and 3D graphics experts, none of
    whom worked on software at Google remotely related to the software achievements
    that made them famous.
  prefs: []
  type: TYPE_NORMAL
- en: Other companies hire people for what they’ve done, then ask them to do more
    of it. Google hires people for who they are and asks them to do whatever needs
    to be done. What these people have done in the past is a great example of what
    they can do, but does not limit them, in Google’s eyes, to what they are capable
    of. That’s how Google found itself with one of the world’s great font rendering
    experts, working on the Android emulator.
  prefs: []
  type: TYPE_NORMAL
- en: David learned about coding for performance when he was a kid, programming in
    BASIC and assembly language on an Apple II+, and learning the importance of performance
    coding along the way. “The machines were so underpowered that every detail counted
    to get anything satisfying from them.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Years later, he was using a computer running OS/2, but disliked the fonts it
    used, so he posed himself a challenge: he wrote a renderer for TrueType^([8](#c24-footnote-8))
    fonts directly from the specification, using as little memory and code as possible.
    The result was the FreeType renderer. He released it as open source. It caught
    on, and was used widely in limited, embedded systems from TVs to cameras to .
    . . Android. FreeType was (and is) the font renderer for Skia, Android’s graphics
    engine.'
  prefs: []
  type: TYPE_NORMAL
- en: In 2006, an engineer on the Android team (which was always looking for embedded
    programmers) saw David’s name in the source code for FreeType and reached out.
    “Of course, nobody told me why I was contacted by Google, so I prepared my interviews
    by reading a ton of stuff on HTML, SQL, web servers, and databases. To my surprise,
    all interview questions were about fundamental data structures, algorithms, and
    embedded systems, so they went a lot better than I initially expected.”
  prefs: []
  type: TYPE_NORMAL
- en: David started on the Android team in September of 2006.
  prefs: []
  type: TYPE_NORMAL
- en: David’s first project was getting a utility library up and running for C programming.^([9](#c24-footnote-9))
    Android was using a very small and basic C library at the time, but it lacked
    some necessary features and had a more restrictive license than was desired for
    the eventual open sourcing of the platform. David assembled Android’s “Bionic”
    library from various license-compatible BSD^([10](#c24-footnote-10)) Unix libraries,
    combined with new code to integrate with the Linux kernel and to support Linux
    or Android-specific features not present in the BSD codebase.
  prefs: []
  type: TYPE_NORMAL
- en: After this library work was done, David moved on to the emulator.
  prefs: []
  type: TYPE_NORMAL
- en: Initially, Android had a *simulator*, a program that ran on the developer’s
    desktop computer that imitated the behavior of an Android device. But simulators
    fake many of the details; they mimic the behavior of the system on the outside
    but ignore many of the details on the inside, which means that the behavior of
    the overall system is not true to the actual device (and thus cannot be relied
    on for real testing).
  prefs: []
  type: TYPE_NORMAL
- en: 'Fadden wrote the original simulator but was getting tired of maintaining it
    when Android was in constant flux. David remembered, “It was maintained by one
    sole engineer who was fed up with fixing it every time we had an advanced feature.
    The plan was: the simulator is essentially dead, and we need a good emulator.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'Android had the beginnings of an emulator already, based on an open source
    project called QEMU, which was created by Fabrice Bellard, a friend of David’s.
    David overhauled this implementation: “We were using a very old version of the
    QEMU upstream at the time that had been modified pretty aggressively. Nobody understood
    exactly what was going on.” David started by pulling in a more recent version
    of QEMU, which had problems of its own. “QEMU development at the time (around
    2006 to 2010) was pretty bad. No unit tests at all, global variables^([11](#c24-footnote-11))
    everywhere.”'
  prefs: []
  type: TYPE_NORMAL
- en: He eventually got things working better, but still had a lot of work to do,
    like making the Linux-based QEMU project work on Windows and Mac, and separating
    the Android-specific portions of the emulator to enable better testing.
  prefs: []
  type: TYPE_NORMAL
- en: The emulator was hugely important at the time. Hardware devices were very difficult
    to come by. Having an emulator that mimicked a real device made it possible (for
    developers on the Android team and eventually external developers) to write and
    test their Android code.
  prefs: []
  type: TYPE_NORMAL
- en: The emulator was like a real device because it emulated everything that happened
    on a real device. Not only did it look like an Android phone (in a window on your
    desktop computer), but the bits running inside of it, down to the chip level,
    were exactly the same as those that ran on an actual hardware device.
  prefs: []
  type: TYPE_NORMAL
- en: Another advantage of the emulator was speed, compared to actual hardware devices
    (for the developers that had them). Communicating to an emulator on the host machine
    was much faster than communicating through a USB cable to a real device. Pushing
    applications, or the entire Android platform, across a USB cable could take minutes.
    Pushing code to the emulator, which was running on the same desktop computer where
    the code was being pushed from, was much faster, so an engineer could be more
    productive with a virtual device instead of a real one.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, the emulator has always been criticized for being incredibly
    slow. In particular, it took a long time to boot. Starting up an emulator mimicked
    booting a phone, since it emulated exactly what a phone would go through. You
    could leave the emulator running in most situations, especially for pure application
    development. But startup and runtime performance of the emulator continued to
    be a common source of complaint until more recent releases.^([12](#c24-footnote-12))
  prefs: []
  type: TYPE_NORMAL
- en: The emulator project was also a great demonstration of the, er, *scrappiness*
    of Android in those early days. It’s not that the team was small . . . there wasn’t
    even a team. There was just one person responsible for this monumental effort,
    and the emulator was just one of several projects that he worked on.
  prefs: []
  type: TYPE_NORMAL
- en: David continued developing and maintaining the emulator on his own, as just
    one of his jobs, for many years.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dirk Dougherty’s Docs: RTFM^([13](#c24-footnote-13))'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All the tools in the world won’t help developers write code if they can’t figure
    out what they’re supposed to write. At some point, the developers need to learn
    about the system and how to put things together in order to create applications.
    They need documentation.
  prefs: []
  type: TYPE_NORMAL
- en: “Reference documentation” for Android (as for many other platforms) tends to
    be written by the engineers that write the APIs and underlying functionality.
    That is, if an engineer adds a class called Thingie, then they will (or should^([14](#c24-footnote-14)))
    write some kind of overview docs for Thingie that describe what the class is for
    and why developers should care. The functions inside of the Thingie class will
    (or should) also have docs describing when and how to call those functions.
  prefs: []
  type: TYPE_NORMAL
- en: But reference docs get you only so far. It’s great to be able to go to the docs
    for, say, the Activity class and learn how to use it. But how did you learn enough
    to even know to look for Activity? What developers really need, especially for
    a new platform like Android, is some higher-level documentation, giving an overview
    and teaching the fundamentals. What is this platform? How do we write apps for
    it? Where is sample code that we can look at to see how it is done?
  prefs: []
  type: TYPE_NORMAL
- en: The Android SDK was going to launch in November of 2007\. Three months before
    that, the team decided that they needed a tech writer and brought in Dirk Dougherty.
  prefs: []
  type: TYPE_NORMAL
- en: Dirk had been working at Openwave, a company that made a browser for mobile
    phones. A former colleague forwarded his resume to the Android team. Dirk interviewed
    and started a few weeks later.
  prefs: []
  type: TYPE_NORMAL
- en: “I came by building 44\. I found my desk. It was in a conference room by the
    lobby, the one that later would become the arcade.^([15](#c24-footnote-15)) There
    were a bunch of tables stashed in there that were all empty. I didn’t know what
    was going on, or if I was in the right place. Eventually, in came Jason, Dan,
    Dick, David, and Quang, who were starting up what would become the DevRel^([16](#c24-footnote-16))
    team. We all moved in there and started learning about the platform. Someone drew
    a countdown calendar on our whiteboard with the number of days until the SDK launch,
    and right from then we started pushing toward the launch.”
  prefs: []
  type: TYPE_NORMAL
- en: Dirk and the DevRel team pulled together the pieces that the SDK needed. “The
    first year was just constantly sprinting to get the website up, to get the basic
    documentation in place. It was mostly reference docs and tooling, combined with
    a few guides and API tutorials. We had ongoing preview releases and SDK updates
    as the platform stabilized. With the Developer Challenge and the intense developer
    interest, we needed to expand the docs. I got help from an external writer I’d
    worked with,^([17](#c24-footnote-17)) who partnered with me to write the Android
    fundamentals docs, explaining how all this stuff worked. A few months later, we
    got more reinforcements as another internal writer joined the effort, Scott Main.
    We spent all of our time creating the fundamentals to go around the reference
    docs, and then bringing up the website. The engineering team gave us tons of support
    along the way. Getting things off the ground was a total team effort.”^([18](#c24-footnote-18))
  prefs: []
  type: TYPE_NORMAL
