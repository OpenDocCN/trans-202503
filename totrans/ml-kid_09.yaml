- en: '![](Images/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chatbots
  prefs: []
  type: TYPE_NORMAL
- en: '![Alphabet-I](Images/Alphabet-I.png)n the last chapter, we talked about *intent
    classification**: building ML systems that can recognize the meaning (the intention)
    of text. We talked about one common use of intent classification, which is to
    build smart assistants that can understand what we’re telling them and carry out
    our commands.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*In this chapter, we’ll look at how ML models that understand the meaning of
    text can be used to build *question answering (QA)* **systems*. QA systems recognize
    and respond to our questions, discovering the answers automatically from a set
    of documents.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Unlike search engines, which return a list of web pages, QA systems return
    a specific answer to a specific question. This is more challenging, as it requires
    a deep understanding of both the question and the meaning of the web pages or
    documents that may contain the answers. For example, the correct answer to a question
    like “Who was President Cleveland’s wife?” is “Frances Folsom,” not a list of
    documents that include biographies of US presidents.'
  prefs: []
  type: TYPE_NORMAL
- en: QA has been a goal and active area of AI research for many years. For example,
    the US National Institute of Standards and Technology (NIST) has run a QA competition
    every year since 1999, where universities and companies compete to see which of
    their computer systems can answer the most questions correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps better known is the IBM QA computer system Watson, which, as mentioned
    in Chapter 1, competed on the US television quiz show *Jeopardy!* and beat two
    champions. *Jeopardy!* is known for asking complex and sometimes tricky questions
    on a huge variety of topics, and therefore is a particularly challenging test
    for a computer.
  prefs: []
  type: TYPE_NORMAL
- en: '*Chatbots**, programs that imitate human conversation, are a simpler task for
    computers than QA systems, for many reasons. First, a chatbot is generally created
    to answer questions about a single fairly small and specific topic, whereas QA
    systems attempt to answer questions on any topic.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*In addition, chatbot responses are often prepared in advance. Simple chatbots
    usually aren’t expected to be able to find the answer for themselves. Complex
    chatbots may have more detailed scripts that allow for follow-up or clarifying
    questions, but the general principle is the same.'
  prefs: []
  type: TYPE_NORMAL
- en: Chatbots are becoming very common. They’re often used for customer service,
    where companies need to answer questions from the public about their products
    and services. Frequently asked questions can be quickly and efficiently answered,
    with more complex questions quickly redirected to human customer service representatives.
  prefs: []
  type: TYPE_NORMAL
- en: You can find chatbots and virtual assistants on many websites and phone apps—taking
    your pizza order, recommending clothing and fashion accessories, answering questions
    about the weather, managing your bank account, arranging meetings and appointments,
    finding a restaurant and booking a table, offering advice to help you manage a
    medical condition, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this project, you’ll create your own chatbot and train it to answer questions
    on a topic of your choice (as shown in [Figure 11-1](#figure11-1)). We’ll follow
    this process:'
  prefs: []
  type: TYPE_NORMAL
- en: Predict questions that users might ask.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Collect examples of how to ask each of those questions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use those examples to train an ML model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prepare the answer the computer should give when it recognizes each question.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![f11001](Images/f11001.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 11-1:](#figureanchor11-1) Chatbots use ML to answer our questions.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: Build Your Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Decide what you’d like your chatbot to answer questions about. This can be
    any topic you like, but here are a few suggestions to help if you can’t think
    of one:'
  prefs: []
  type: TYPE_NORMAL
- en: Your favorite book
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your favorite TV show
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your favorite sports team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your favorite actor, author, or music artist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Space, planets, and the solar system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dinosaurs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A period of history, such as ancient Rome or the Viking Age
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the screenshots in this chapter, I made a chatbot that answers questions
    about the moon.
  prefs: []
  type: TYPE_NORMAL
- en: Prepare Your Character
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to Scratch at [https://machinelearningforkids.co.uk/scratch3/](https://machinelearningforkids.co.uk/scratch3/)
    and add a backdrop and a character for your QA chatbot.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure the scene you create matches your topic. For example, if you’re making
    a chatbot to answer questions about the Roman Empire, you could draw a Roman centurion
    in a battlefield.
  prefs: []
  type: TYPE_NORMAL
- en: For my chatbot about the moon, I drew a space-themed backdrop, as shown in [Figure
    11-2](#figure11-2).
  prefs: []
  type: TYPE_NORMAL
- en: '![f11002](Images/f11002.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 11-2:](#figureanchor11-2) Create a custom backdrop for your chatbot
    character.'
  prefs: []
  type: TYPE_NORMAL
- en: For my chatbot character, I made a moon sprite and added cartoon eyes and a
    mouth, as shown in [Figure 11-3](#figure11-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![f11003](Images/f11003.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 11-3:](#figureanchor11-3) Create a custom sprite for your chatbot character.'
  prefs: []
  type: TYPE_NORMAL
- en: If you’d prefer not to draw, you can click Choose a Backdrop or Choose a Sprite
    to select a premade option. Or, you can click Upload a Sprite or Upload a Backdrop
    to use pictures you’ve saved from the internet. For example, if you’re making
    a chatbot about your favorite band, you could use a photo of them. If you’re making
    a chatbot about a school or company, you could use its logo.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve created your chatbot scene, make sure you save your Scratch project,
    as you’ll need it later. If you’re not sure how to do that, read the section “Saving
    Your Work” on page xxiv in the introduction.
  prefs: []
  type: TYPE_NORMAL
- en: Train Your Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new ML project, name it `Chatbot`, and set it to learn to recognize
    text in your preferred language.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Train**, as shown in [Figure 11-4](#figure11-4).![f11004](Images/f11004.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 11-4:](#figureanchor11-4) Train is the first phase of an ML project.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Think of the most common question people might ask about your chosen topic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For my topic, the moon, I’m guessing that people will ask how big the moon is.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you’ve chosen your first question, click **Add new label**, as shown in
    [Figure 11-5](#figure11-5), and type in a word or two that represents that question.
    For example, I used size for my training bucket label.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f11005](Images/f11005.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 11-5:](#figureanchor11-5) Create a bucket to represent examples of
    your first question.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Add example** **and enter a way to ask that question, as shown in [Figure
    11-6](#figure11-6).![f11006](Images/f11006.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 11-6:](#figureanchor11-6) Add examples of different ways to ask the
    first question.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Think of how different people might phrase the question when they ask it. You
    don’t need to worry about the answer for now.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Type in as many ways of asking this question as you can think of, making sure
    you have at least five examples. These examples will be used to train an ML model
    to recognize when someone is asking this question.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If your chatbot looks like the topic you’re asking questions about (like my
    cartoon moon answering questions about the moon), then you could include some
    example questions directed to the character, such as “How big are you?”.**
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '***   Think of more types of questions about your topic. Click **Add new label**
    again to create a training bucket for each type of question, and **Add example**
    to add examples of how to ask that question. As before, you need at least five
    examples for each type of question.'
  prefs: []
  type: TYPE_NORMAL
- en: For my project, I started with four types of questions, with five examples for
    each (see [Figure 11-7](#figure11-7)). Your project will vary depending on your
    topic and the number of questions you can think of for it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f11007](Images/f11007.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[Figure 11-7:](#figureanchor11-7) Write examples of the different types of
    questions someone could ask.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For your topic, you’re guessing what the most common questions are and imagining
    the different ways that people might ask them. Real-world ML projects often collect
    these examples from actual customers or users so that the computer can learn what
    questions are really being asked, and how. For example, a shop training a virtual
    assistant to answer questions about setting up televisions will keep a record
    of questions that customers have called to ask in the past. Or a bank training
    a virtual assistant to answer questions about savings accounts will keep a record
    of questions customers have typed into chat windows on the bank’s website. Both
    businesses can use these examples of real questions phrased by real people to
    train their ML models.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We saw in Chapter 3 that ML models give better answers when trained with data
    that is similar to what the project will need to do. You learned that if you want
    an ML model to recognize photos of different animals, you should train it with
    photos, and if you want it to recognize cartoons, you should train it with cartoons.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Text ML models work in a similar way. When we train them with questions phrased
    in the way that real people ask questions, they’ll give better answers. The best
    way to do this for real-world ML projects is to find existing examples rather
    than making them up like we’re doing for this project. *   Click **Back to project**
    in the top-left corner of the screen.*   Click **Learn & Test**, as shown in [Figure
    11-8](#figure11-8).![f11008_new](Images/f11008_new.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Figure 11-8:](#figureanchor11-8) Learn & Test is the second phase of an ML
    project.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Train new machine learning model**, as shown in [Figure 11-9](#figure11-9).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The computer will use the examples you’ve written to learn how to recognize
    questions that people ask about your topic. This process might take a minute or
    so. The computer is using this time to learn what the questions in each training
    bucket have in common, such as the words you used, the way you phrased the questions,
    how short or long the questions are, and much more.**
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**![f11009](Images/f11009.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 11-9:](#figureanchor11-9) Train an ML model using the examples that
    you’ve written.'
  prefs: []
  type: TYPE_NORMAL
- en: Prepare Your Project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you have a character and an ML model, it’s time to combine them to
    create your chatbot.
  prefs: []
  type: TYPE_NORMAL
- en: Click **Back to project** in the top-left corner of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Make**, as shown in [Figure 11-10](#figure11-10).![f11010](Images/f11010.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 11-10:](#figureanchor11-10) Make is the third phase of an ML project.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Scratch 3**, and then click **Open in Scratch 3**. Scratch will open
    with a new set of blocks for your Chatbot ML project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **File**▶ **Load from your computer**,as shown in [Figure 11-11](#figure11-11),
    to open the project you saved earlier with your chatbot scene.![f11011](Images/f11011.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 11-11:](#figureanchor11-11) Open the project with the scene you created
    before.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Copy the script shown in [Figure 11-12](#figure11-12).![f11012](Images/f11012.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 11-12:](#figureanchor11-12) Sample script to create a simple chatbot'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This script will ask you to type in a question and then use the ML model you’ve
    trained to recognize what you asked.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Your script should differ from mine, as mine has the questions about the moon
    that I trained my ML model with. Be sure to use your question types instead.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You’ll also need to put the answers to the questions on your topic here. If
    you don’t know them, now’s the time to do some research to find the answers your
    chatbot should give!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **File**▶**Save to your computer** to save your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test Your Project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Click the Green Flag and try asking your chatbot a question. Does it give you
    the right answer?
  prefs: []
  type: TYPE_NORMAL
- en: Review and Improve Your Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve created a simple chatbot that can recognize and answer the most common
    questions about a topic of your choice. Well done!
  prefs: []
  type: TYPE_NORMAL
- en: What could you do to improve your chatbot?
  prefs: []
  type: TYPE_NORMAL
- en: Responding and Recording When Users Report Mistakes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: AI systems cannot correctly understand everything, so you could improve your
    ML project by training it to handle mistakes. A good way to handle mistakes is
    to train your ML model to recognize when someone complains about the results it
    gives.
  prefs: []
  type: TYPE_NORMAL
- en: Go back to the Train phase and add a new training bucket called `mistake`. Fill
    it with examples of how someone might complain that the ML model got something
    wrong, as shown in [Figure 11-13](#figure11-13).
  prefs: []
  type: TYPE_NORMAL
- en: For example, you might add `That's not what I meant` to the mistake bucket.
  prefs: []
  type: TYPE_NORMAL
- en: '![f11013](Images/f11013.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 11-13:](#figureanchor11-13) Collect examples of how a user might complain
    about a mistake the model makes.'
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve added at least five examples, you’ll need to return to the Learn
    & Test phase to train a new ML model.
  prefs: []
  type: TYPE_NORMAL
- en: When your chatbot recognizes that someone complains, the simplest response it
    can give is to apologize to them. Update your script as shown in [Figure 11-14](#figure11-14).
  prefs: []
  type: TYPE_NORMAL
- en: '![f11014_new](Images/f11014_new.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 11-14:](#figureanchor11-14) Update your script so that it apologizes
    if the user complains.'
  prefs: []
  type: TYPE_NORMAL
- en: You can make your project even better by keeping a record of the mistakes. For
    example, I created a new list called mistakes (to do this, click **Variables**
    in the Toolbox, click **Make a List**, and enter the name `mistakes`) and updated
    the script as shown in [Figure 11-15](#figure11-15) so that if someone complains
    about the answer they get, their question is added to the list.
  prefs: []
  type: TYPE_NORMAL
- en: '![f11015](Images/f11015.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 11-15:](#figureanchor11-15) Keep a record of questions that the chatbot
    gets wrong.'
  prefs: []
  type: TYPE_NORMAL
- en: When I asked, “Who was the first man on the moon?” my model told me how far
    the moon is from the Earth. Then, when I replied with, “No, that isn’t what I
    asked for,” my question about the first man on the moon was added to the mistakes
    list.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking mistakes is a common technique used to improve real-world ML projects.
    The list of mistakes is used as a collection of examples to train the next version
    of the ML model.
  prefs: []
  type: TYPE_NORMAL
- en: What else could you do to improve your chatbot?
  prefs: []
  type: TYPE_NORMAL
- en: Recognizing When a User Isn’t Happy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your chatbot users might not always tell you when your ML system gets something
    wrong. So are there other ways that you can tell when it makes mistakes?
  prefs: []
  type: TYPE_NORMAL
- en: In Chapter 7, you learned about training an ML model to recognize tone and emotion
    in writing. You could combine that technique with this project to make your chatbot
    recognize when users are getting angry or annoyed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Train two ML models: one to recognize the meaning of questions (as you’ve just
    done) and the other to recognize emotion (such as “annoyed” and “not annoyed,”
    similar to your project in Chapter 7). If the second ML model has a high degree
    of confidence that the user sounds annoyed, your chatbot should apologize instead
    of trying to answer the question again.'
  prefs: []
  type: TYPE_NORMAL
- en: Detecting the user’s tone, and apologizing when necessary, is a common technique
    used for chatbots that communicate with members of the public, such as for customer
    service. People can get annoyed if some technology consistently misunderstands
    them. If systems can recognize when things are going badly and apologize, the
    customer may be happier. In such cases, these systems will also commonly call
    for a human customer service representative or manager to join the conversation
    and help.
  prefs: []
  type: TYPE_NORMAL
- en: Is there anything else you could do to improve your project?
  prefs: []
  type: TYPE_NORMAL
- en: Answering Only When the ML Model Is Confident
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Recognizing when the user is annoyed is a good thing. But it’s often better
    to avoid annoying the user in the first place! You can use the confidence score
    to prevent your chatbot from giving wrong answers.
  prefs: []
  type: TYPE_NORMAL
- en: You learned in Chapter 7 that the confidence score is a percentage returned
    by an ML model that shows how confident the model is that it has correctly recognized
    whatever it’s been trained on.
  prefs: []
  type: TYPE_NORMAL
- en: In this project, if the confidence score is low, it means the ML model isn’t
    sure that it understood the question. You could modify your chatbot code as shown
    in [Figure 11-16](#figure11-16) so that if the model doesn’t understand the question,
    the chatbot apologizes rather than simply guessing the answer, and the question
    gets added to the list of examples to train the model with in the future.
  prefs: []
  type: TYPE_NORMAL
- en: '![f11016](Images/f11016.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 11-16:](#figureanchor11-16) Handle low confidence scores by recording
    the questions to use in future training.'
  prefs: []
  type: TYPE_NORMAL
- en: ML and Ethics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These suggestions for improving your project are based on common real-world
    approaches to ML projects. As you’ve seen, collecting training data takes a lot
    of time and effort. To save time, some companies using ML collect just enough
    training examples to make an ML model basically work, and then allow their customers
    to start using it (sometimes describing it as a*beta* to explain why it still
    gets some things wrong). Then they collect poor experiences their customers have
    with their ML model so that they can improve their training data. This might mean
    collecting examples of customer questions that the ML model had a low confidence
    score in, or where the customer reported that the answer was unhelpful. The company
    then reviews these customer questions and sorts them into the right training buckets.
  prefs: []
  type: TYPE_NORMAL
- en: Companies say they do this because it means their ML model will do a better
    job of answering questions in the future. The more representative they make the
    training examples they use, the better answers their system can give. But sometimes
    this surprises people who don’t realize that questions they ask their smart devices
    can be recorded by the device’s manufacturer. Try searching the web for news stories
    about the maker of your favorite smart device listening to what people ask the
    device. How many articles can you find? What do you think of these reactions?
  prefs: []
  type: TYPE_NORMAL
- en: What do you think this means for the responsibilities of the people who create
    ML systems? Do you think it’s ethical for ML developers to collect training examples
    from their customers or users? Do you think they should tell users that this is
    happening? And how would you explain it to users who might not realize what training
    examples are, or why they’re so important for training ML systems?
  prefs: []
  type: TYPE_NORMAL
- en: What You Learned
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you learned that ML models can be trained to understand and
    respond to questions people ask. You learned the differences between question
    answering (QA) systems and their simpler counterpart, chatbots. You then designed
    a custom chatbot and trained an ML model to recognize the most common questions
    about a topic of your choosing. You saw a few different ways you could extend
    your chatbot to improve its performance and accuracy, such as by tracking mistakes,
    responding appropriately to customers’ feedback and tone, and using the confidence
    score to decide when a question should be directed to a person (for example, in
    a customer service setting). Finally, you learned about some of the ethical questions
    to consider when training ML models with feedback from real people.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll switch gears and train an ML model for the first
    time to recognize numbers in a simplified version of the video game *Pac-Man*.*****
  prefs: []
  type: TYPE_NORMAL
