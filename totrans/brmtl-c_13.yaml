- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: The Preprocessor
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理器
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: The basic C compiler has a number of powerful features, but there are some things
    it just can’t do. To get around its limitations, a preprocessor was added to the
    language. The preprocessor is primarily a *macro processor*, a program that replaces
    text with other text, but it can also include and exclude text and perform other
    actions based on certain conditions. The idea is to have one program (the preprocessor)
    do a small, simple text editing job and then feed that into the compiler proper.
    Since those two steps (and a few others) are hidden behind the `gcc` command,
    you hardly think about them, but they are there.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的C编译器具有许多强大的功能，但有些事情它就是做不到。为了克服这些限制，语言中增加了一个预处理器。预处理器主要是一个*宏处理器*，它是一个用其他文本替换文本的程序，但它也可以根据某些条件包含或排除文本并执行其他操作。这个概念是让一个程序（预处理器）完成一个小而简单的文本编辑任务，然后将其输入到真正的编译器中。由于这两个步骤（以及其他几个步骤）是隐藏在`gcc`命令后面的，你几乎不会去考虑它们，但它们的确存在。
- en: 'For example, let’s look at the following code:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们看看以下代码：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When `SIZE` is defined to mean `20`, the preprocessor essentially does a global
    search and replace of `SIZE` with `20`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当`SIZE`被定义为`20`时，预处理器实际上会对`SIZE`进行全局搜索并替换为`20`。
- en: The HAL library we’re using with our STM microprocessor makes extensive use
    of the preprocessor in a couple of ways. First, the headers contain a `#define`
    for every gettable and settable bit in the processor, and there are quite a few
    of them. Second, STMicroelectronics doesn’t make only one chip; it makes a wide
    variety. Rather than have 20 different header files with information on 20 chips,
    it uses a process called *conditional compilation* to compile only the parts of
    the header file that are needed.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们与STM微处理器一起使用的HAL库在几个方面广泛使用了预处理器。首先，头文件包含每个可读取和可设置的处理器位的`#define`，而且这些位相当多。其次，STMicroelectronics并不只生产一种芯片；它生产各种各样的芯片。与其拥有20个不同的头文件来包含20个芯片的信息，不如使用一种叫做*条件编译*的过程，只编译需要的头文件部分。
- en: Simple Macros
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单宏
- en: 'Let’s start with the simple macros. A *macro* is basically a pattern (in this
    case, `SIZE`) that is replaced by something else (in this case, `20`). The `#define`
    preprocessor directive is used to define the pattern and replacement:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从简单的宏开始。一个*宏*基本上是一个模式（在此例中是`SIZE`），它被替换成其他内容（在此例中是`20`）。`#define`预处理指令用来定义这个模式和替换内容：
- en: '**size.c**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**size.c**'
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is not a C program. The preprocessor works on anything, including just
    English text. Let’s run it through the preprocessor using the `-E` flag, which
    tells `gcc` to run the program through the preprocessor only and stop:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个C程序。预处理器可以处理任何内容，包括纯英文文本。让我们使用`-E`标志将其传递给预处理器，这个标志告诉`gcc`仅通过预处理器处理程序并停止：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here are the preprocessed results:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是预处理后的结果：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The lines beginning with a hash mark (`#`) are called *line markers*. They consist
    of a hash mark, a line number, and the name of the file (and some other junk).
    Since the preprocessor may add or remove lines, it would be impossible for the
    compiler to know where it was in the original input file without them.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以井号（`#`）开头的行叫做*行标记*。它们由一个井号、行号和文件名（以及一些其他信息）组成。由于预处理器可能会添加或删除行，没有它们，编译器无法知道它在原始输入文件中的位置。
- en: A lot happens before the first line is processed, but finally we get to the
    second occurrence of it 1, and the output 2 shows that `SIZE` has been replaced
    with the defined value.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 很多事情发生在第一行处理之前，但最终我们会到达第二次出现的位置1，并且输出2显示`SIZE`已经被替换为定义的值。
- en: 'The preprocessor takes things literally, which can get you into trouble, as
    shown here:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理器按字面意思处理事物，这可能会让你陷入麻烦，正如这里所示：
- en: '**square.c**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**square.c**'
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This example finds the area of a square. It includes a little margin so the
    side of the square is defined 1. To get the area, we multiply the sides together
    and print the result 2. However, this program contains a bug: `SIZE` is not `12`;
    it is `10 + 2`. The preprocessor is a dumb text editor. It does not understand
    C syntax or arithmetic.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子计算一个正方形的面积。它包含了一些边距，因此正方形的边长定义为1。为了计算面积，我们将边长相乘并打印结果2。然而，这个程序包含一个bug：`SIZE`不是`12`，而是`10
    + 2`。预处理器只是一个简单的文本编辑器，它不理解C语法或算术。
- en: 'After passing the program through the preprocessor, we can see where we made
    our mistake:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将程序传递给预处理器，我们可以看到我们在哪里犯了错误：
- en: '**square.i**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**square.i**'
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As mentioned previously, the preprocessor doesn’t understand C. When we use
    the following statement, it defines `SIZE` as literally `10 + 2` rather than `12`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，预处理器并不理解C语言。当我们使用以下语句时，它会将`SIZE`定义为字面意义上的`10 + 2`，而不是`12`：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: And as you can see, `12 * 12` is a different number from `10 + 2 * 10 + 2`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`12 * 12`与`10 + 2 * 10 + 2`是不同的数字。
- en: 'When using `#define` to define constants more complex than a simple number,
    we put parentheses around the entire expression, as shown here:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`#define`来定义比简单数字更复杂的常量时，我们将整个表达式用括号括起来，如下所示：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Following this style rule prevents incorrect results from an unexpected order
    of operations after substitution.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循这种风格规则可以避免在替换后因操作顺序不确定而导致的错误结果。
- en: 'To avoid the issue of incorrect macro evaluation entirely when the purpose
    of a `#define` is to set or calculate a value in one place and then use it throughout
    the program, use `const`, which is preferred over `#define` wherever possible.
    Here’s an example:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免在`#define`的目的是在一个地方设置或计算一个值并在程序中使用时出现宏计算错误，建议使用`const`，在可能的情况下，`const`应优于`#define`。这里是一个例子：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The main reason for this rule is that the `const` modifier is part of the C
    language, and the compiler will evaluate the expression assigned to a `const`
    variable, so `SIDE` is actually `12`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个规则的主要原因是`const`修饰符是C语言的一部分，编译器会计算分配给`const`变量的表达式，所以`SIDE`实际上是`12`。
- en: When C was first designed, it had no `const` modifier, so everyone had to use
    the `#define` statement, which is why `#define` is so widely used, even though
    the more modern `const` has been available for some time.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当C语言最初设计时，并没有`const`修饰符，因此每个人都必须使用`#define`语句，这也是为什么即使`const`已经使用了一段时间，`#define`依然如此广泛使用的原因。
- en: Parameterized Macros
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 带参数的宏
- en: '*Parameterized* *macros* allow us to give arguments to macros. Here’s an example:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*带参数的* *宏* 允许我们为宏提供参数。这里是一个例子：'
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In this case, we don’t need to put the parentheses around the argument in the
    expansion. We could write the macro as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们不需要在展开时将括号括起来。我们可以按如下方式编写宏：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Why is this bad? Consider what happens when we use this macro with an expression:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这样不好呢？想想看当我们使用这个宏与一个表达式时会发生什么：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The style rule is to include parentheses around the arguments to parameterized
    macros. Without the parentheses, `DOUBLE(1+2)` expands to the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 风格规则是为带参数的宏的参数加上括号。如果没有括号，`DOUBLE(1+2)`将展开成如下内容：
- en: '[PRE12]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With the parentheses, we get this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用括号后，我们得到如下结果：
- en: '[PRE13]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We already have a rule that states to not use `++` or `--` except on lines
    by themselves. Let’s see what happens when we break that rule using a parameterized
    macro:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有一个规则，规定除了独立的一行外不要使用`++`或`--`。让我们看看当我们违反这个规则，使用带参数的宏时会发生什么：
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: What’s the value of `x` after this is executed? It’s `8` instead of `6`, as
    expected. Worse, the value of `y` can be anything, because C’s order of execution
    rules are ambiguous when it comes to mixing multiply (`*`) and increment (`++`)
    operations.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 执行完这段代码后，`x`的值是多少？是`8`而不是预期的`6`。更糟的是，`y`的值可以是任何值，因为在C语言中，当混合使用乘法（`*`）和递增（`++`）操作时，执行顺序规则是不明确的。
- en: 'If you’re going to write code like this, consider `inline` functions, which
    replace the function call with the body of the function:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你要编写这样的代码，考虑使用`inline`函数，它会用函数体替代函数调用：
- en: '[PRE15]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'It works even if you use the following statement:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 即使使用以下语句，它也能正常工作：
- en: '[PRE16]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'But again, you shouldn’t write code like this. Instead, write code like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，再次强调，你不应该编写这样的代码。相反，应该像这样编写代码：
- en: '[PRE17]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Use `inline` functions instead of parameterized macros whenever possible. Because
    `inline` functions are part of the C language, the compiler can make sure they’re
    being used correctly (unlike the preprocessor, which just replaces text blindly).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 尽可能使用`inline`函数代替带参数的宏。因为`inline`函数是C语言的一部分，编译器可以确保它们被正确使用（与预处理器不同，预处理器只是盲目地替换文本）。
- en: Code Macros
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码宏
- en: 'So far, we’ve been writing macros to define constants and simple expressions.
    We can use `#define` to define code. Here’s an example:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在编写宏来定义常量和简单表达式。我们也可以使用`#define`来定义代码。这里是一个例子：
- en: '[PRE18]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: However, this code has some problems. First, it’s not obvious where the variable
    `i` comes from. We’ve also obscured what’s incrementing it, which is why this
    sort of macro is rarely seen.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这段代码存在一些问题。首先，变量`i`的来源不明确。我们还隐去了递增它的部分，这也是这种宏很少见的原因。
- en: 'A more common macro is one that emulates a short function. Let’s define a macro
    called `DIE` that writes out a message and then kills the program:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更常见的宏是模拟短函数的宏。让我们定义一个叫`DIE`的宏，它输出一条消息，然后终止程序：
- en: '[PRE19]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We use the backslash (`\`) to extend the macro over multiple lines. We can
    use this macro as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用反斜杠（`\`）来将宏扩展到多行。我们可以像这样使用这个宏：
- en: '[PRE20]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In this case, it works, which is due more to luck than design. The problem
    is that `DIE` looks like a function, so we can treat it as a function. Let’s put
    it inside an `if` statement:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，它有效，这更多是运气而非设计的结果。问题是`DIE`看起来像一个函数，因此我们可以将其视为函数。让我们把它放入`if`语句中：
- en: '[PRE21]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To understand why this is a problem, let’s look at the expansion of this code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解为什么这是个问题，让我们看看这段代码的展开结果：
- en: '[PRE22]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here it is properly indented:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是正确缩进后的代码：
- en: '[PRE23]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In other words, it will always exit, even if the index is good.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，它总是会退出，即使索引是正确的。
- en: 'Let’s see if we can fix this issue by putting curly brackets (`{}`) around
    our statements:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看是否可以通过在语句周围加上花括号（`{}`）来解决这个问题：
- en: '[PRE24]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This now works in the following case:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在以下情况下它能正常工作：
- en: '[PRE25]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'However, it does not work in this case:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这种情况下它不起作用：
- en: '[PRE26]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This code generates an error message: `else without previous if`. However,
    we have an `if` right there. Let’s look at the expansion:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码会产生一个错误信息：`else without previous if`。然而，我们这里确实有一个`if`。让我们看看展开后的结果：
- en: '[PRE27]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The problem here is that before the `else`, C wants a statement ending with
    a semicolon (`;`) *or* a set of statements enclosed in curly brackets (`{}`).
    It doesn’t know what to do with a set of statements enclosed in curly brackets
    that ends in a semicolon.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题是，在`else`之前，C语言要求一个以分号（`;`）结尾的语句，*或者* 一组被花括号（`{}`）包围的语句。它不知道如何处理一组以分号结尾、且被花括号包围的语句。
- en: 'The solution to this problem is to use an obscure C statement called the `do`/`while`.
    It looks like this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的方法是使用一个叫做`do`/`while`的C语言语句。它的样子是这样的：
- en: '[PRE28]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The statements in the block after `do` always execute once, and then again as
    long the `condition` is true. Although it is part of the C language standard,
    I’ve seen it used only twice in the wild, and one of those times was as a punch
    line to a joke.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`do`后面的语句总是执行一次，然后只要`condition`为真，就会继续执行。虽然它是C语言标准的一部分，但我只在实际应用中见过两次，而且其中一次还是作为笑话的结尾。'
- en: 'However, it is used for code macros:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它用于代码宏的场景：
- en: '[PRE29]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'It works because we can put a semicolon after it:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 它能正常工作，因为我们可以在后面加一个分号：
- en: '[PRE30]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This code expands to the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码展开后的结果是：
- en: '[PRE31]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Syntactically, `do`/`while` is a single statement, and we can include a semicolon
    after it without trouble. The code within the curly brackets (`printf` and `exit`)
    is safely encapsulated inside the `do`/`while`. The code outside the curly brackets
    is one statement, and that’s what we want. Now the compiler will accept the code
    macro.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 从语法上讲，`do`/`while`是一个单一语句，我们可以在它后面加一个分号而不会有问题。花括号（`printf`和`exit`）中的代码被安全地封装在`do`/`while`内部。花括号外的代码是一条语句，这正是我们想要的。现在编译器会接受这个代码宏。
- en: Conditional Compilation
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条件编译
- en: Conditional compilation allows us to change what’s in our code at compile time.
    The classic use for this feature is to have a debug version and a production version
    of a program.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 条件编译使我们能够在编译时改变代码内容。这个功能的经典用途是拥有一个调试版本和一个生产版本的程序。
- en: 'The `#ifdef`/`#endif` directive pair will compile the code between the two
    directives if a symbol is defined. Here’s an example:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`#ifdef`/`#endif`指令对会在定义了某个符号的情况下编译两个指令之间的代码。这里是一个例子：'
- en: '[PRE32]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Strictly speaking, the `// DEBUG` comment is not required, but be sure to include
    it because matching `#ifdef`/`#endif` pairs is hard enough.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 严格来说，`// DEBUG`注释并不是必需的，但请确保包含它，因为匹配`#ifdef`/`#endif`对非常困难。
- en: 'If your program looks like:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的程序看起来像这样：
- en: '[PRE33]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'then the preprocessed result will be the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，预处理后的结果将是如下：
- en: '[PRE34]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'On the other hand, if your program looks like:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果你的程序看起来像这样：
- en: '[PRE35]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'then the preprocessed result will be the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，预处理后的结果将是如下：
- en: '[PRE36]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Because `DEBUG` is not defined, no code is generated.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`DEBUG`没有定义，代码没有生成。
- en: 'One problem is that all the `#ifdef` statements tend to make the program look
    ugly. Consider the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一个问题是，所有的`#ifdef`语句会使得程序看起来很杂乱。考虑下面的代码：
- en: '[PRE37]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We can do the same thing with a lot less code:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用更少的代码做同样的事情：
- en: '[PRE38]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Notice that we used the `#else` directive to tell the preprocessor to reverse
    the sense of the `#if`. If `DEBUG` is defined, calls to `debug` will be replaced
    with calls to `printf`; otherwise, they’ll be replaced by blank space. In this
    case, we don’t need the `do`/`while` trick because the code macro contains a single
    function call (with no semicolon).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们使用了`#else`指令来告诉预处理器反转`#if`的判断逻辑。如果定义了`DEBUG`，则调用`debug`会被替换为调用`printf`；否则，它们将被替换为空白空间。在这种情况下，我们不需要`do`/`while`技巧，因为代码宏包含的是一个单独的函数调用（没有分号）。
- en: Another directive, `#ifndef`, is true if a symbol is not defined and otherwise
    is used the same way as the `#ifdef` directive.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个指令`#ifndef`在符号未定义时为真，其他情况下与`#ifdef`指令的用法相同。
- en: Where Symbols Get Defined
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 符号的定义位置
- en: 'We can define symbols in three ways:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过三种方式定义符号：
- en: Inside the program with a `#define`
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在程序内部通过`#define`
- en: From the command line
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从命令行
- en: Predefined inside the preprocessor
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预定义在预处理器内部
- en: We’ve already described symbols defined inside a program, so let’s look at the
    other two options.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经描述了在程序内部定义的符号，接下来我们来看看另外两种选项。
- en: Command Line Symbols
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命令行符号
- en: 'To define a symbol on the command line, use the `-D` option:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要在命令行中定义符号，请使用`-D`选项：
- en: '[PRE39]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The `-DDEBUG` argument defines the `DEBUG` symbol so the preprocessor can use
    it. In this example, it does a `#define DEBUG 1` before the program starts. We
    used this symbol in the previous code to control whether `debug` statements were
    compiled in.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`-DDEBUG`参数定义了`DEBUG`符号，以便预处理器可以使用它。在这个例子中，它会在程序开始之前执行`#define DEBUG 1`。我们在前面的代码中使用了这个符号来控制是否编译`debug`语句。'
- en: 'In addition to symbols, we add to the compilation command manually, and the
    STM32 Workbench generates a makefile to compile a program that defines a number
    of symbols on the command line. The most significant is defined by the `-DSTM32F030x8`
    option. The *CMSIS/device/stm32f0xx.h* file uses the `STM32F030x8` symbol to include
    board-specific files:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 除了符号之外，我们还需要手动添加到编译命令中，STM32工作台会生成一个makefile来编译一个在命令行上定义了多个符号的程序。最重要的是通过`-DSTM32F030x8`选项定义的。*CMSIS/device/stm32f0xx.h*文件使用`STM32F030x8`符号来包含特定于板卡的文件：
- en: '[PRE40]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The STM firmware supports a number of boards, only one of which is the NUCLEO-F030R8\.
    Each chip has a different set of I/O devices located at different places. You
    don’t need to worry about where they are, as the firmware will find the right
    place using the preceding code. This file says, “If I’m an STM32F030x6, include
    the header file for that board; if I’m an STM32F030x8, include the header file
    for that board,” and so on.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: STM固件支持多种板卡，其中之一是NUCLEO-F030R8。每个芯片的I/O设备位置不同。你不需要担心它们的位置，因为固件会使用前面的代码找到正确的位置。此文件的意思是：“如果我是一块STM32F030x6板卡，包含该板卡的头文件；如果我是一块STM32F030x8板卡，包含该板卡的头文件”，以此类推。
- en: The directives used are `#if` and `#elif`. The `#if` tests to see whether the
    expression that follows is true (in this case, whether `STM32F030x6` is defined).
    If it is, the code following it will be compiled. The `#elif` is a combination
    of `#else` and `#if`, which says if the expression is not true, then test another
    expression. The other directive, `defined`, is true if the symbol is defined.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的指令是`#if`和`#elif`。`#if`用于测试后面的表达式是否为真（在这种情况下，测试`STM32F030x6`是否已定义）。如果为真，紧随其后的代码将被编译。`#elif`是`#else`和`#if`的组合，表示如果表达式不为真，则测试另一个表达式。另一个指令`defined`在符号已定义时为真。
- en: Predefined Symbols
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 预定义符号
- en: 'Finally, the preprocessor itself defines a number of symbols, such as `__VERSION__`
    (to specify the compiler version) and `__linux` (on Linux systems). To see what’s
    predefined on your system, use the following command:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，预处理器本身定义了多个符号，如`__VERSION__`（指定编译器版本）和`__linux`（在Linux系统中）。要查看系统中预定义的符号，可以使用以下命令：
- en: '[PRE41]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The `__cplusplus` symbol is defined only if you are compiling a C++ program.
    Frequently, you’ll see something like this in files:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`__cplusplus`符号仅在你编译C++程序时定义。通常，你会在文件中看到类似如下的内容：'
- en: '[PRE42]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: It’s part of a song and dance needed by C++ so it can use C programs. You can
    just ignore it for now.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这是C++所需的一部分舞步，以便它可以使用C程序。现在可以忽略它。
- en: Include Files
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包含文件
- en: 'The `#include` directive tells the preprocessor to bring in an entire file
    as if it were part of the original file. There are two forms of this directive:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`#include`指令告诉预处理器将整个文件引入，仿佛它是原始文件的一部分。该指令有两种形式：'
- en: '[PRE43]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The first form brings in system header files (files that come with the compiler
    or system libraries you are using). The second brings in files you create.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种形式引入系统头文件（即你使用的编译器或系统库附带的文件）。第二种形式引入你自己创建的文件。
- en: 'One problem with header files is that they can be included twice. If that happens,
    you get a lot of duplicate defined symbols and other problems. The solution to
    this problem is to add a *sentinel* by using the following design pattern:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 头文件的一个问题是它们可能会被包含两次。如果发生这种情况，你会遇到很多重复定义的符号和其他问题。解决这个问题的方法是通过使用以下设计模式添加一个*哨兵*：
- en: '[PRE44]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The first time through, the `__FILE_NAME_H__` symbol (the sentinel) is not defined,
    so the entire header file is included. This is good, because we wanted it included—*once*.
    The next time through, `__FILE_NAME_H__` is defined, and the `#ifndef` prevents
    the code below it from being included until the `#endif` is reached at the end
    of the file. Thus, although the header file is included twice, the contents of
    the file appear only once.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次执行时，`__FILE_NAME_H__`符号（哨兵）没有被定义，因此整个头文件会被包含。这是好的，因为我们想要它被包含——*一次*。下次执行时，`__FILE_NAME_H__`已经定义，`#ifndef`会阻止其下方的代码被包含，直到文件末尾的`#endif`被执行。因此，尽管头文件被包含了两次，但文件的内容只会出现一次。
- en: Other Preprocessor Directives
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他预处理器指令
- en: A few minor preprocessor directives are also useful, such as `#warning`, `#error`,
    and `#pragma`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一些小的预处理器指令也很有用，比如`#warning`、`#error`和`#pragma`。
- en: 'The `#warning` directive displays a compiler warning if seen:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`#warning`指令会在出现时显示编译器警告：'
- en: '[PRE45]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The related `#error` directive issues an error and stops your program from
    compiling:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 相关的`#error`指令会发出错误，并停止程序的编译：
- en: '[PRE46]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The `#pragma` directive defines compiler-dependent controls. Here’s an example:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`#pragma`指令定义了与编译器相关的控制。这里是一个例子：'
- en: '[PRE47]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This GCC-specific `#pragma` turns off warnings about missing prototypes, includes
    a buggy include file, and turns warnings back on.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这个GCC特定的`#pragma`会关闭缺失原型的警告，包含一个有问题的头文件，并重新打开警告。
- en: Preprocessor Tricks
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预处理器技巧
- en: The preprocessor is a dumb macro processor, and as a result, we’ve had to adopt
    a number of style rules, described previously, to keep us out of trouble. The
    power of the preprocessor also allows us to perform some interesting tricks to
    make our lives easier. One of them is the `enum` trick, which we discussed in
    Chapter 8. In this section, we’ll look at commenting out code.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理器是一个愚蠢的宏处理器，因此我们必须采用前面描述的一些样式规则，以避免出现问题。预处理器的强大功能还使我们能够执行一些有趣的技巧，来让我们的工作更加轻松。其中一个技巧是`enum`技巧，我们在第8章中讨论过。在这一节中，我们将讨论如何注释掉代码。
- en: Sometimes, we need to disable some code for testing. One way to do that is to
    comment out the code. For example, suppose the auditing process is buggy; we can
    disable it until the audit group gets its act together.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们需要禁用某些代码以进行测试。一种方法是注释掉代码。例如，假设审计过程有问题；我们可以禁用它，直到审计组修复问题为止。
- en: 'Here’s the original code:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这是原始代码：
- en: '[PRE48]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'And here’s the code with the audit removed:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是移除审计后的代码：
- en: '[PRE49]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Every line that we wanted removed now begins with the comment (`//`) marker.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望移除的每一行现在都以注释（`//`）标记开始。
- en: 'Commenting out every line is labor-intensive, however. Instead, we can use
    conditional compilation to remove the code. All we need to do is surround it with
    `#ifdef UNDEF` and `#endif // UNDEF` statements, like this:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，注释掉每一行是非常繁琐的。相反，我们可以使用条件编译来移除代码。我们所需要做的就是用`#ifdef UNDEF`和`#endif // UNDEF`语句将代码包围起来，像这样：
- en: '[PRE50]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The code inside the `#ifdef`/`#endif` block will be compiled only if `UNDEF`
    is defined, and no sane programmer would do that. Using `#if 0` / `#endif` does
    the same thing without depending on the sanity of other programmers.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`#ifdef`/`#endif`块中的代码只有在定义了`UNDEF`时才会被编译，而没有理智的程序员会这么做。使用`#if 0` / `#endif`做同样的事情，而不依赖其他程序员的理智。'
- en: Summary
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: The C preprocessor is a simple yet powerful automatic text editor. Used properly,
    it can make programming tremendously easier. It allows you to define simple numeric
    macros as well as small code macros. (Actually, you can define large code macros,
    but you really don’t want to do that.)
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: C预处理器是一个简单而强大的自动化文本编辑器。如果使用得当，它可以大大简化编程。它允许你定义简单的数值宏以及小的代码宏。（实际上，你也可以定义大的代码宏，但你真的不想那样做。）
- en: One of its biggest features is the `#include` directive, which facilitates the
    sharing of interfaces between modules. Also, the `#ifdef` capabilities allow you
    to write one program that has multiple personalities through the use of conditional
    compilation.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 它的一个主要特性是`#include`指令，它方便了模块之间接口的共享。此外，`#ifdef`功能使你能够通过条件编译编写一个具有多种功能的程序。
- en: However, you must remember that the preprocessor does not understand C syntax.
    As a result, you must remember several style rules and programming patterns to
    use the system effectively.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你必须记住，预处理器并不理解 C 语法。因此，你必须记住一些样式规则和编程模式，才能有效地使用该系统。
- en: For all of its limitations and quirks, the preprocessor can be a powerful tool
    when it comes to creating C programs.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有很多限制和怪癖，预处理器在创建 C 程序时仍然是一个强大的工具。
- en: Programming Problems
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程问题
- en: Write a macro to swap two integers.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个宏来交换两个整数。
- en: 'Advanced: Write a macro to swap two integers of any type. (Read the documentation
    for GCC’s `typeof` keyword before doing this.)'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 高级：编写一个宏来交换任意类型的两个整数。（在做这件事之前，先阅读 GCC 的`typeof`关键字文档。）
- en: Create a macro called `islower(x)` that returns true if `x` is a lowercase letter.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`islower(x)`的宏，如果`x`是小写字母，则返回 true。
- en: 'Crazy advanced: Figure out how the program *zsmall.c* works ([https://www.cise.ufl.edu/~manuel/obfuscate/zsmall.hint](https://www.cise.ufl.edu/~manuel/obfuscate/zsmall.hint)).
    This program is a winner of the obfuscated C contest (it won an award for “Best
    Abuse of the Preprocessor”). All it does is print a list of primes, but all the
    calculations and loops are done using the preprocessor.'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 疯狂高级：弄清楚程序*zsmall.c*是如何工作的（[https://www.cise.ufl.edu/~manuel/obfuscate/zsmall.hint](https://www.cise.ufl.edu/~manuel/obfuscate/zsmall.hint)）。这个程序是模糊
    C 竞赛的获奖作品（它获得了“最佳滥用预处理器”奖）。它所做的仅仅是打印一个素数列表，但所有的计算和循环都是通过预处理器完成的。
