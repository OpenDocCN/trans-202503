- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Beginning Data Exploration with SELECT
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: For me, the best part of digging into data isn’t the prerequisites of gathering,
    loading, or cleaning the data, but when I actually get to *interview* the data.
    Those are the moments when I discover whether the data is clean or dirty, whether
    it’s complete, and, most of all, what story the data can tell. Think of interviewing
    data as a process akin to interviewing a person applying for a job. You want to
    ask questions that reveal whether the reality of their expertise matches their
    résumé.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'Interviewing the data is exciting because you discover truths. For example,
    you might find that half the respondents forgot to fill out the email field in
    the questionnaire, or the mayor hasn’t paid property taxes for the past five years.
    Or you might learn that your data is dirty: names are spelled inconsistently,
    dates are incorrect, or numbers don’t jibe with your expectations. Your findings
    become part of the data’s story.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: In SQL, interviewing data starts with the `SELECT` keyword, which retrieves
    rows and columns from one or more of the tables in a database. A `SELECT` statement
    can be simple, retrieving everything in a single table, or it can be complex enough
    to link dozens of tables while handling multiple calculations and filtering by
    exact criteria.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: We’ll start with simple `SELECT` statements and then look into the more powerful
    things `SELECT` can do.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Basic SELECT Syntax
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here’s a `SELECT` statement that fetches every row and column in a table called
    `my_table`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This single line of code shows the most basic form of a SQL query. The asterisk
    following the `SELECT` keyword is a *wildcard*, which is like a stand-in for a
    value: it doesn’t represent anything in particular and instead represents everything
    that value could possibly be. Here, it’s shorthand for “select all columns.” If
    you had given a column name instead of the wildcard, this command would select
    the values in that column. The `FROM` keyword indicates you want the query to
    return data from a particular table. The semicolon after the table name tells
    PostgreSQL it’s the end of the query statement.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Let’s use this `SELECT` statement with the asterisk wildcard on the `teachers`
    table you created in Chapter 2. Once again, open pgAdmin, select the `analysis`
    database, and open the Query Tool. Then execute the statement shown in [Listing
    3-1](#listing3-1). Remember, as an alternative to typing these statements into
    the Query Tool, you can also run the code by clicking **Open File** and navigating
    to the place where you saved the code you downloaded from GitHub. Always do this
    if you see the code is truncated with `--snip--`. For this chapter, you should
    open *Chapter_03.sql* and highlight each statement before clicking the **Execute/Refresh**
    icon.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 3-1: Querying all rows and columns from the `teachers` table'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Once you execute the query, the result set in the Query Tool’s output pane contains
    all the rows and columns you inserted into the `teachers` table in Chapter 2.
    The rows may not always appear in this order, but that’s okay.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that the `id` column (of type `bigserial`) is automatically filled with
    sequential integers, even though you didn’t explicitly insert them. Very handy.
    This auto-incrementing integer acts as a unique identifier, or key, that not only
    ensures each row in the table is unique, but also later gives us a way to connect
    this table to other tables in the database.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we move on, note that you have two other ways to view all rows in a
    table. Using pgAdmin, you can right-click the `teachers` table in the object tree
    and choose **View/Edit Data**▶**All Rows**. Or you can use a little-known bit
    of standard SQL:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Both provide the same result as the code in [Listing 3-1](#listing3-1). Now,
    let’s refine this query to make it more specific.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Querying a Subset of Columns
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Often, it’s more practical to limit the columns the query retrieves, especially
    with large databases, so you don’t have to wade through excess information. You
    can do this by naming columns, separated by commas, right after the `SELECT` keyword.
    Here’s an example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: With that syntax, the query will retrieve all rows from just those three columns.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s apply this to the `teachers` table. Perhaps in your analysis you want
    to focus on teachers’ names and salaries. In that case, you would select just
    the relevant columns, as shown in [Listing 3-2](#listing3-2). Notice that the
    order of the columns in the query is different than the order in the table: you’re
    able to retrieve columns in any order you’d like.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 3-2: Querying a subset of columns'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in the result set, you’ve limited the columns to three:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Although these examples are basic, they illustrate a good strategy for beginning
    your interview of a dataset. Generally, it’s wise to start your analysis by checking
    whether your data is present and in the format you expect, which is a task well
    suited to `SELECT`. Are dates in a proper format complete with month, date, and
    year, or are they entered (as I once ruefully observed) as text with the month
    and year only? Does every row have values in all the columns? Are there mysteriously
    no last names starting with letters beyond *M*? All these issues indicate potential
    hazards ranging from missing data to shoddy record keeping somewhere in the workflow.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: We’re only working with a table of six rows, but when you’re facing a table
    of thousands or even millions of rows, it’s essential to get a quick read on your
    data quality and the range of values it contains. To do this, let’s dig deeper
    and add several SQL keywords.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Sorting Data with ORDER BY
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Data can make more sense, and may reveal patterns more readily, when it’s arranged
    in order rather than jumbled randomly.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: In SQL, we order the results of a query using a clause containing the keywords
    `ORDER BY` followed by the name of the column or columns to sort. Applying this
    clause doesn’t change the original table, only the result of the query. [Listing
    3-3](#listing3-3) shows an example using the `teachers` table.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQL 中，我们使用包含关键字`ORDER BY`的子句对查询结果进行排序，后面跟上要排序的列名。应用这个子句不会改变原始表格，只会改变查询的结果。[列表
    3-3](#listing3-3)展示了一个使用`teachers`表的示例。
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Listing 3-3: Sorting a column with `ORDER BY`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 3-3：使用`ORDER BY`对一列进行排序
- en: 'By default, `ORDER BY` sorts values in ascending order, but here I sort in
    descending order by adding the `DESC` keyword. (The optional `ASC` keyword specifies
    sorting in ascending order.) Now, by ordering the `salary` column from highest
    to lowest, I can determine which teachers earn the most:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`ORDER BY`按升序排列值，但在这里我通过添加`DESC`关键字进行降序排序。（可选的`ASC`关键字指定升序排序。）现在，通过按从高到低的顺序排列`salary`列，我可以确定哪些教师收入最高：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `ORDER BY` clause also accepts numbers instead of column names, with the
    number identifying the sort column according to its position in the `SELECT` clause.
    Thus, you could rewrite [Listing 3-3](#listing3-3) this way, using `3` to refer
    to the third column in the `SELECT` clause, `salary`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`ORDER BY`子句也接受数字而非列名，数字根据其在`SELECT`子句中的位置来确定排序的列。因此，你可以这样重写[列表 3-3](#listing3-3)，使用`3`来引用`SELECT`子句中的第三列`salary`：'
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The ability to sort in our queries gives us great flexibility in how we view
    and present data. For example, we’re not limited to sorting on just one column.
    Enter the statement in [Listing 3-4](#listing3-4).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在查询中排序的能力为我们提供了极大的灵活性，帮助我们以不同方式查看和展示数据。例如，我们不必局限于仅对一列进行排序。输入[列表 3-4](#listing3-4)中的语句。
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Listing 3-4: Sorting multiple columns with `ORDER BY`'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 3-4：使用`ORDER BY`对多个列进行排序
- en: 'In this case, we’re retrieving the last names of teachers, their school, and
    the date they were hired. By sorting the `school` column in ascending order and
    `hire_date` in descending order 1, we create a listing of teachers grouped by
    school with the most recently hired teachers listed first. This shows us who the
    newest teachers are at each school. The result set should look like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们检索教师的姓氏、学校和聘用日期。通过按升序排序`school`列和按降序排序`hire_date`，我们创建了一个按学校分组的教师列表，其中最新聘用的教师排在前面。这可以让我们看到每所学校的最新教师。结果集应该如下所示：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can use `ORDER BY` on more than two columns, but you’ll soon reach a point
    of diminishing returns where the effect will be hardly noticeable. Imagine if
    you added columns about teachers’ highest college degree attained, the grade level
    taught, and birthdate to the `ORDER BY` clause. It would be difficult to understand
    the various sort directions in the output all at once, much less communicate that
    to others. Digesting data happens most easily when the result focuses on answering
    a specific question; therefore, a better strategy is to limit the number of columns
    in your query to only the most important and then run several queries to answer
    each question you have.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在两个以上的列上使用`ORDER BY`，但很快你会发现效果开始递减，几乎难以察觉。如果你在`ORDER BY`子句中加入关于教师最高学历、所教年级和出生日期的列，那么在输出中一次性理解各种排序方向将变得非常困难，更不用说将其传达给他人了。数据的消化最容易发生在结果专注于回答特定问题时；因此，更好的策略是将查询中的列数限制为最重要的列，并进行多个查询来回答每个问题。
- en: Using DISTINCT to Find Unique Values
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 DISTINCT 查找唯一值
- en: In a table, it’s not unusual for a column to contain rows with duplicate values.
    In the `teachers` table, for example, the `school` column lists the same school
    names multiple times because each school employs many teachers.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在表格中，某一列包含重复值的行并不罕见。例如，在`teachers`表中，`school`列多次列出了相同的学校名称，因为每所学校有很多教师。
- en: To understand the range of values in a column, we can use the `DISTINCT` keyword
    as part of a query that eliminates duplicates and shows only unique values. Use
    `DISTINCT` immediately after `SELECT`, as shown in [Listing 3-5](#listing3-5).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解列中的值的范围，我们可以使用`DISTINCT`关键字，它是查询的一部分，能够消除重复项并仅显示唯一值。如[列表 3-5](#listing3-5)所示，`DISTINCT`应紧跟在`SELECT`之后使用。
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Listing 3-5: Querying distinct values in the `school` column'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 3-5：查询`school`列中的唯一值
- en: 'The result is as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Even though six rows are in the table, the output shows just the two unique
    school names in the `school` column. This is a helpful first step toward assessing
    data quality. For example, if a school name is spelled more than one way, those
    spelling variations will be easy to spot and correct, especially if you sort the
    output.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'When you’re working with dates or numbers, `DISTINCT` will help highlight inconsistent
    or broken formatting. For example, you might inherit a dataset in which dates
    were entered in a column formatted with a `text` data type. That practice (which
    you should avoid) allows malformed dates to exist:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `DISTINCT` keyword also works on more than one column at a time. If we add
    a column, the query returns each unique pair of values. Run the code in [Listing
    3-6](#listing3-6).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Listing 3-6: Querying distinct pairs of values in the `school` and `salary`
    columns'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'Now the query returns each unique (or distinct) salary earned at each school.
    Because two teachers at Myers Middle School earn $43,500, that pair is listed
    in just one row, and the query returns five rows rather than all six in the table:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This technique gives us the ability to ask, “For each *x* in the table, what
    are all the *y* values?” For each factory, what are all the chemicals it produces?
    For each election district, who are all the candidates running for office? For
    each concert hall, who are the artists playing this month?
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: SQL offers more sophisticated techniques with aggregate functions that let us
    count, sum, and find minimum and maximum values. I’ll cover those in detail in
    Chapter 6 and Chapter 9.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Filtering Rows with WHERE
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, you’ll want to limit the rows a query returns to only those in which
    one or more columns meet certain criteria. Using `teachers` as an example, you
    might want to find all teachers hired before a particular year or all teachers
    making more than $75,000 at elementary schools. For these tasks, we use the `WHERE`
    clause.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: The `WHERE` clause allows you to find rows that match a specific value, a range
    of values, or multiple values based on criteria supplied via an *operator*—a keyword
    that lets us perform math, comparison, and logical operations. You also can use
    criteria to exclude rows.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 3-7](#listing3-7) shows a basic example. Note that in standard SQL
    syntax, the `WHERE` clause follows the `FROM` keyword and the name of the table
    or tables being queried.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Listing 3-7: Filtering rows using `WHERE`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 'The result set shows just the teachers assigned to Myers Middle School:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, I’m using the equals comparison operator to find rows that exactly match
    a value, but of course you can use other operators with `WHERE` to customize your
    filter criteria. [Table 3-1](#table3-1) summarizes the most commonly used comparison
    operators. Depending on your database system, many more might be available.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 3-1: Comparison and Matching Operators in PostgreSQL'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '| **Operator** | **Function** | **Example** |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
- en: '| `=` | Equal to | `WHERE school = ''Baker Middle''` |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
- en: '| `<>` or `!=` | Not equal to^* | `WHERE school <> ''Baker Middle''` |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
- en: '| `>` | Greater than | `WHERE salary > 20000` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
- en: '| `<` | Less than | `WHERE salary < 60500` |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
- en: '| `>=` | Greater than or equal to | `WHERE salary >= 20000` |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
- en: '| `<=` | Less than or equal to | `WHERE salary <= 60500` |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
- en: '| `BETWEEN` | Within a range | `WHERE salary BETWEEN 20000 AND 40000` |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
- en: '| `IN` | Match one of a set of values | `WHERE last_name IN (''Bush'', ''Roush'')`
    |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
- en: '| `LIKE` | Match a pattern (case sensitive) | `WHERE first_name LIKE ''Sam%''`
    |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
- en: '| `ILIKE` | Match a pattern (case insensitive) | `WHERE first_name ILIKE ''sam%''`
    |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
- en: '| `NOT` | Negates a condition | `WHERE first_name NOT ILIKE ''sam%''` |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
- en: 'The following examples show comparison operators in action. First, we use the
    equal operator to find teachers whose first name is Janet:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, we list all school names in the table but exclude F.D. Roosevelt HS using
    the not-equal operator:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here we use the less-than operator to list teachers hired before January 1,
    2000 (using the date format `YYYY-MM-DD`):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then we find teachers who earn $43,500 or more using the `>=` operator:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The next query uses the `BETWEEN` operator to find teachers who earn from $40,000
    to $65,000\. Note that `BETWEEN` is *inclusive*, meaning the result will include
    values matching the start and end ranges specified.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Use caution with `BETWEEN`, because its inclusive nature can lead to inadvertent
    double-counting of values. For example, if you filter for values with `BETWEEN
    10 AND 20` and run a second query using `BETWEEN 20 AND 30`, a row with the value
    of 20 will appear in both query results. You can avoid this by using the more
    explicit greater-than and less-than operators to define ranges. For example, this
    query returns the same result as the previous one but more obviously specifies
    the range:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We’ll return to these operators throughout the book, because they’ll play a
    key role in helping us ferret out the data and answers we want to find.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Using LIKE and ILIKE with WHERE
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Comparison operators are fairly straightforward, but the matching operators
    `LIKE` and `ILIKE` deserve additional explanation. Both let you find a variety
    of values that include characters matching a specified pattern, which is handy
    if you don’t know exactly what you’re searching for or if you’re rooting out misspelled
    words. To use `LIKE` and `ILIKE`, you specify a pattern to match using one or
    both of these symbols:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Percent sign (%) A wildcard matching one or more characters
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Underscore (_) A wildcard matching just one character
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For example, if you’re trying to find the word `baker`, the following `LIKE`
    patterns will match it:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The difference? The `LIKE` operator, which is part of the ANSI SQL standard,
    is case sensitive. The `ILIKE` operator, which is a PostgreSQL-only implementation,
    is case insensitive. [Listing 3-8](#listing3-8) shows how the two keywords give
    you different results. The first `WHERE` clause uses `LIKE` 1 to find names that
    start with the characters `sam`, and because it’s case sensitive, it will return
    zero results. The second, using the case-insensitive `ILIKE` 2, will return `Samuel`
    and `Samantha` from the table.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 区别是什么？`LIKE`运算符是ANSI SQL标准的一部分，区分大小写。`ILIKE`运算符是PostgreSQL特有的实现，不区分大小写。[清单 3-8](#listing3-8)展示了这两个关键字如何返回不同的结果。第一个`WHERE`子句使用`LIKE`
    1来查找以`sam`开头的名称，由于它区分大小写，所以不会返回任何结果。第二个使用不区分大小写的`ILIKE` 2会从表中返回`Samuel`和`Samantha`。
- en: '[PRE26]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Listing 3-8: Filtering with `LIKE` and `ILIKE`'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '清单 3-8: 使用`LIKE`和`ILIKE`进行筛选'
- en: Over the years, I’ve gravitated toward using `ILIKE` and wildcard operators
    to make sure I’m not inadvertently excluding results from searches, particularly
    when vetting data. I don’t assume that whoever typed the names of people, places,
    products, or other proper nouns always remembered to capitalize them. And if one
    of the goals of interviewing data is to understand its quality, using a case-insensitive
    search will help you find variations.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，我倾向于使用`ILIKE`和通配符运算符，以确保在搜索时不会无意间排除结果，特别是在审查数据时。我不假设输入人名、地名、产品名或其他专有名词的人总是记得正确地大写它们。如果面试数据的目标之一是了解其质量，那么使用不区分大小写的搜索将帮助你发现不同的变体。
- en: Because `LIKE` and `ILIKE` search for patterns, performance on large databases
    can be slow. We can improve performance using indexes, which I’ll cover in “Speeding
    Up Queries with Indexes” in Chapter 8.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`LIKE`和`ILIKE`是模式搜索，在大数据库中性能可能较慢。我们可以通过使用索引来提高性能，关于这一点我将在第8章的“通过索引加速查询”中详细介绍。
- en: Combining Operators with AND and OR
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结合`AND`和`OR`运算符
- en: Comparison operators become even more useful when we combine them. To do this,
    we connect them using the logical operators `AND` and `OR` along with, if needed,
    parentheses.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将比较运算符结合使用时，它们变得更加有用。为此，我们使用逻辑运算符`AND`和`OR`将它们连接起来，必要时还可以使用括号。
- en: The statements in [Listing 3-9](#listing3-9) show three examples that combine
    operators this way.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 3-9](#listing3-9)中的语句展示了三种以这种方式结合运算符的示例。'
- en: '[PRE27]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Listing 3-9: Combining operators using `AND` and `OR`'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '清单 3-9: 使用`AND`和`OR`结合运算符'
- en: The first query uses `AND` in the `WHERE` clause 1 to find teachers who work
    at Myers Middle School and have a salary less than $40,000\. Because we connect
    the two conditions using `AND`, both must be true for a row to meet the criteria
    in the `WHERE` clause and be returned in the query results.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个查询在`WHERE`子句1中使用`AND`来查找在迈尔斯中学工作且薪水低于40,000美元的教师。因为我们使用`AND`连接这两个条件，所以这两个条件必须同时成立，行才会满足`WHERE`子句中的条件并返回查询结果。
- en: The second example uses `OR` 2 to search for any teacher whose last name matches
    Cole or Bush. When we connect conditions using `OR`, only one of the conditions
    must be true for a row to meet the criteria of the `WHERE` clause.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个示例使用`OR` 2来搜索姓氏匹配Cole或Bush的任何教师。当我们使用`OR`连接条件时，只需要其中一个条件为真，行就会满足`WHERE`子句的条件。
- en: The final example looks for teachers at Roosevelt whose salaries are either
    less than $38,000 or greater than $40,000 3. When we place statements inside parentheses,
    those are evaluated as a group before being combined with other criteria. In this
    case, the school name must be exactly `F.D. Roosevelt HS`, and the salary must
    be either less or higher than specified for a row to meet the criteria of the
    `WHERE` clause.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的示例搜索罗斯福学校的教师，他们的薪水要么低于38,000美元，要么高于40,000美元。当我们将语句放入括号中时，这些语句会作为一组先进行评估，然后再与其他条件结合。在这种情况下，学校名称必须是`F.D.
    Roosevelt HS`，薪水必须低于或高于指定的值，才能使该行满足`WHERE`子句的条件。
- en: If we use both `AND` with `OR` in a clause but don’t use any parentheses, the
    database will evaluate the `AND` condition first and then the `OR` condition.
    In the final example, that means we’d see a different result if we omitted parentheses—the
    database would look for rows where the school name is `F.D. Roosevelt HS` and
    the salary is less than $38,000 or rows for any school where the salary is more
    than $40,000\. Give it a try in the Query Tool to see.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在子句中同时使用`AND`和`OR`，但没有使用括号，数据库将首先评估`AND`条件，然后评估`OR`条件。在最后一个示例中，这意味着如果我们省略括号，结果会不同——数据库会寻找学校名称为`F.D.
    Roosevelt HS`且薪水低于38,000美元的行，或者寻找任何薪水高于40,000美元的学校行。在查询工具中试试看。
- en: Putting It All Together
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 综合应用
- en: You can begin to see how even the previous simple queries allow us to delve
    into our data with flexibility and precision to find what we’re looking for. You
    can combine comparison operator statements using the `AND` and `OR` keywords to
    provide multiple criteria for filtering, and you can include an `ORDER BY` clause
    to rank the results.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以开始看到，即使是之前的简单查询，也能让我们灵活而精确地深入数据，找到我们所寻找的信息。你可以使用 `AND` 和 `OR` 关键字组合比较操作符语句，以提供多个筛选标准，并且可以包括
    `ORDER BY` 子句对结果进行排序。
- en: With the preceding information in mind, let’s combine the concepts in this chapter
    into one statement to show how they fit together. SQL is particular about the
    order of keywords, so follow this convention.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到前面的信息，让我们将本章的概念结合成一个语句，展示它们如何结合在一起。SQL 对关键词的顺序非常讲究，因此请遵循这一惯例。
- en: '[PRE28]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[Listing 3-10](#listing3-10) shows a query against the `teachers` table that
    includes all the aforementioned pieces.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 3-10](#listing3-10) 展示了一个针对 `teachers` 表的查询，包含了所有上述内容。'
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Listing 3-10: A `SELECT` statement including `WHERE` and `ORDER BY`'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 3-10：一个包含 `WHERE` 和 `ORDER BY` 的 `SELECT` 语句
- en: 'This listing returns teachers at Roosevelt High School, ordered from newest
    hire to earliest. We can see some connection between a teacher’s hire date at
    the school and their current salary level:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表返回的是罗斯福高中教师的数据，按从最新雇佣到最早雇佣的顺序排列。我们可以看到教师的入职日期与其当前薪资水平之间的一些联系：
- en: '[PRE30]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Wrapping Up
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Now that you’ve learned the basic structure of a few different SQL queries,
    you’ve acquired the foundation for many of the additional skills I’ll cover in
    later chapters. Sorting, filtering, and choosing only the most important columns
    from a table can yield a surprising amount of information from your data and help
    you find the story it tells.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学会了几种不同 SQL 查询的基本结构，你已经为后续章节中我将介绍的许多附加技能奠定了基础。排序、筛选和从表中选择最重要的列，能够从数据中获得令人惊讶的信息，并帮助你找到数据背后的故事。
- en: 'In the next chapter, you’ll learn about another foundational aspect of SQL:
    data types.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将学习 SQL 的另一个基础方面：数据类型。
