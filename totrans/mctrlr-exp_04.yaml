- en: '**4 LPC1343 Call Stack**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**4 LPC1343 调用栈**'
- en: The LPC800, LPC1100, LPC1200, LPC1300, LPC1500, LPC-1700, and LPC1800 series
    of ARM microcontrollers from NXP are vulnerable to bootloader memory corruption.
    This was first described in Herrewegen et al. (2020) for the LPC1343, a Cortex
    M3 with 32kB of flash and 8kB of RAM. In this chapter, we’ll explore the bootloader’s
    protocol and the vulnerability, then walk through the steps of writing our own
    exploit.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: NXP 的 LPC800、LPC1100、LPC1200、LPC1300、LPC1500、LPC-1700 和 LPC1800 系列 ARM 微控制器容易受到引导加载程序内存损坏的影响。此问题首先在
    Herrewegen 等人（2020）中描述，针对的是 LPC1343，这是一款具有 32KB 闪存和 8KB RAM 的 Cortex M3 处理器。在本章中，我们将探讨引导加载程序的协议和漏洞，然后逐步编写自己的攻击代码。
- en: LPC microcontrollers have five Code Read Protection (CRP) levels, each of which
    provides further restrictions on the ISP (bootloader) and SWD (debugger) access.
    Level 0 (NOCRP) is unprotected, allowing memory to be freely read and written
    through the bootloader or an SWD debugger. CRP 1 disables SWD debugging entirely,
    while ISP reads are prevented and ISP writes are restricted, in order to allow
    in-the-field updates of some memory while protecting the rest. In CRP 2, most
    commands are disabled. CRP 3 is the most secure, disabling all functionality.
    A fifth mode, NOISP, disables the ISP interface while leaving SWD enabled, so
    that memory is still exposed.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: LPC 微控制器有五个代码读取保护（CRP）级别，每个级别都对 ISP（引导加载程序）和 SWD（调试器）访问施加了进一步的限制。级别 0（NOCRP）是未保护的，允许通过引导加载程序或
    SWD 调试器自由读取和写入内存。CRP 1 完全禁用 SWD 调试，同时禁止 ISP 读取，并限制 ISP 写入，以便在保护其余部分的同时进行现场内存更新。在
    CRP 2 中，大多数命令被禁用。CRP 3 是最安全的，禁用所有功能。第五种模式 NOISP 禁用 ISP 接口，同时保留 SWD 启用，从而使内存仍然暴露。
- en: The bootloader presents itself as both a UART serial port and a USB mass storage
    disk, in which a single file of the disk represents the chip’s firmware. Herrewegen’s
    attack is specific to the UART interface in CRP Level 1, but the authors note
    that the mass storage interface is likely a good target for further bug hunting.
    See [Chapter 15](ch15.xhtml#ch15) for a glitching attack that works reliably against
    these chips in higher protection modes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 引导加载程序同时作为 UART 串口和 USB 大容量存储磁盘呈现，其中磁盘的一个文件代表芯片的固件。Herrewegen 的攻击特定于 CRP 级别
    1 中的 UART 接口，但作者指出，大容量存储接口可能是进一步寻找漏洞的一个好目标。有关在更高保护模式下对这些芯片有效的故障攻击，请参见[第15章](ch15.xhtml#ch15)。
- en: '![Image](../images/f0042-01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0042-01.jpg)'
- en: 'Figure 4.1: LPC1343'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1：LPC1343
- en: '**Getting Started**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**入门**'
- en: The mask ROM bootloader is 16kB at `0x1fff0000`. 32kB of flash memory begin
    at address `0x00000000`, and 8kB of SRAM are mapped at `0x10000000`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 掩码 ROM 引导加载程序位于 `0x1fff0000`，大小为 16KB。32KB 的闪存从地址 `0x00000000` 开始，8KB 的 SRAM
    映射在 `0x10000000`。
- en: The bootloader does not allow ROM to be read directly, so I first dumped the
    ROM using an SWD debugger and OpenOCD. I also wanted a copy of SRAM, in order
    to have global variable and stack values while debugging, so I first zeroed SRAM
    with the debugger and then booted into the bootloader. Reading a RAM dump through
    the bootloader gave me the state from within the Read RAM function of the bootloader,
    with all uninitialized bytes left as `0x00`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 引导加载程序不允许直接读取 ROM，因此我首先使用 SWD 调试器和 OpenOCD 转储了 ROM。我还需要一份 SRAM 的副本，以便在调试时查看全局变量和栈值，因此我首先使用调试器将
    SRAM 清零，然后进入引导加载程序。通过引导加载程序读取 RAM 转储，可以让我获得引导加载程序的读取 RAM 函数中的状态，所有未初始化的字节都保持为
    `0x00`。
- en: The protection level is configured by a 32-bit word written to `0x02fc` in flash
    memory. CRP 1 is `0x12345678`, CRP 2 is `0x87654321`, and CRP 3 is `0x43218765`.
    All other values leave the chip unprotected, which makes it a good target for
    the glitching attack in [Chapter 15](ch15.xhtml#ch15).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 保护级别通过写入闪存内存地址 `0x02fc` 的 32 位字来配置。CRP 1 的值是 `0x12345678`，CRP 2 是 `0x87654321`，CRP
    3 是 `0x43218765`。所有其他值都使芯片处于未保护状态，这使得它成为[第15章](ch15.xhtml#ch15)中故障攻击的好目标。
- en: RAM begins at `0x10000000` with a protected region for the bootloader to use
    as working memory. The bootloader will deny writes to this region. According to
    the documentation, the first 768 bytes up to `0x10000300` ought to be protected,
    but in practice, only the first 512 bytes up to `0x10000200` are protected. A
    few global variables exist in the range that is not (but ought to be) protected,
    but none of these globals are known to be exploitable. [Figure 4.3](ch04.xhtml#ch4fig3)
    shows this layout.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: The designers seem to have protected their `.data` section, while forgetting
    that the call stack is an even juicier target for attackers. The bootloader’s
    call stack grows downward from `0x10001fdc`, entirely outside of the write-protected
    region! Herrewegen’s exploit works by repeatedly altering this stack with the
    Write RAM function to trigger a return into the otherwise unreachable Read Memory
    function, dumping some bytes of flash before repeating the process all over again.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '**UART Protocol in Brief**'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The UART protocol is documented in [Chapter 21](ch21.xhtml#ch21) of NXP (2012).
    It’s an ASCII protocol that automatically syncs to your baud rate, and you can
    slowly type most of the protocol by hand in a terminal emulator if that’s your
    fancy.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: The bootloader is enabled by pulling the `BLD_E` pin high, and the UART mode
    is selected on models with USB by pulling `P0_3` low. After starting the bootloader,
    you transmit a question mark at 57,600 baud. The chip sends you the word `Synchronized`,
    and you send it back to confirm that things are working.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Each command is sent as a line of text, which is echoed back. Parameters that
    are numeric are *always* in base 10; there’s no support for parsing hexadecimal.
    Reads and writes are armored in lines of the `uuencode` format, with a checksum
    every twenty lines. (With 45 decoded bytes per line, that’s every 900 bytes.)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: As I couldn’t find an open source bootloader client to patch, I wrote a new
    bootloader client in Golang with the `go-serial` library.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0045-01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.2: LPC1343 Memory Map'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0045-02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.3: LPC1343 Bootloader SRAM'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0046-01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.4: LPC1343 Bootloader Commands'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0046-02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.5: Code Protection Literals'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '**Reverse Engineering the Bootloader**'
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next step is to reverse engineer the bootloader. I did this in Ghidra, loading
    the ROM dump at `0x1fff0000` and an SRAM dump at `0x10000000`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: On my first try, I loaded an SRAM dump from a chip that hadn’t been zeroed.
    SRAM loses its state when not powered, so this filled the mostly unused memory
    with gobbledygook that frustrated reverse engineering. Zeroing SRAM before running
    the bootloader, then dumping it through the bootloader gave me an image with all
    global variables initialized and with a live call stack to help me get my bearings.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: These dumps were taken from an unlocked chip, of course. Except when unlocked
    chips are unavailable, such as for smart cards that are only available under an
    NDA, it’s best to develop exploits first against unlocked chips and only later
    to use them against a locked target.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些转储当然是从一个解锁的芯片上获取的。除非解锁芯片不可用，例如智能卡只能在保密协议下使用，否则最好先在解锁芯片上开发漏洞，并在以后再将其用于锁定目标。
- en: After loading both the firmware and the SRAM dump, I spent an afternoon looking
    for functions and naming them. Good clues to a function’s purpose can come from
    the I/O addresses that it accesses and whether it reads or writes them.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 加载了固件和SRAM转储后，我花了一个下午的时间寻找并命名函数。有关函数用途的好线索来自于它访问的I/O地址以及是否读取或写入这些地址。
- en: The first nybble of an address tells me what type it is, just by checking the
    memory map in [Figure 4.2](ch04.xhtml#ch4fig2). Those that begin with a `1` are
    SRAM on this chip, while those that begin with `0` are flash memory and effectively
    constant. If it begins with a `4`, it’s an I/O peripheral and I can look up the
    peripheral’s name in the chip’s datasheet or header files.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 地址的第一个字节（nybble）通过查看[图4.2](ch04.xhtml#ch4fig2)中的内存映射告诉我它是什么类型。以`1`开头的是该芯片上的SRAM，而以`0`开头的是闪存存储，并且是有效的常量。如果以`4`开头，则是I/O外设，我可以在芯片的数据手册或头文件中查找外设的名称。
- en: Large `switch` statements are also handy, such as the loop that interprets the
    commands in [Figure 4.4](ch04.xhtml#ch4fig4). Note that two of those commands,
    `T` and `U`, are absent from NXP’s documentation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 大型`switch`语句也很有用，例如[图4.4](ch04.xhtml#ch4fig4)中解释命令的循环。请注意，这些命令中的`T`和`U`在NXP的文档中是缺失的。
- en: I skipped over the mass storage implementation, as I already knew which bug
    I would be exploiting from reading the details in Herrewegen et al. (2020). When
    hunting an original bug, rather than re-implementing prior art, it’s a good idea
    to explore all of the code that is reachable while the chip is locked. Pay special
    attention to parser code, and consider fuzz testing the firmware in emulation
    if you don’t find an exploitable bug manually.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我跳过了大容量存储的实现，因为我已经知道从Herrewegen等人（2020年）的详细信息中将利用的漏洞。当寻找原始漏洞时，而不是重新实现已有技术，最好探索所有在芯片锁定时可以访问的代码。如果没有手动发现可利用的漏洞，可以特别关注解析器代码，并考虑在仿真中进行模糊测试固件。
- en: '**Controlling the Program Counter**'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**控制程序计数器**'
- en: After implementing the basic bootloader commands, we can read and write the
    SRAM of a locked chip above `0x10000200`, so controlling the program counter is
    as simple as finding a return pointer on the stack above that address. If we overwrite
    that address and then return, the chip will branch to our new address rather than
    the legitimate caller function.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 实现基本的引导加载程序命令后，我们可以读取和写入一个锁定芯片上`0x10000200`以上的SRAM，所以控制程序计数器就像在该地址以上的堆栈中找到返回指针一样简单。如果我们覆盖该地址然后返回，芯片将跳转到我们的新地址，而不是合法的调用函数。
- en: In my Ghidra project, I looked at the interrupt table of the bootloader at `0x1fff0000`.
    The very first word, `0x10000ffc`, is the initial top of the stack, and the return
    pointer that I want to clobber should come somewhere below that in memory.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的Ghidra项目中，我查看了位于`0x1fff0000`的引导加载程序的中断表。第一个字，`0x10000ffc`，是堆栈的初始顶部，而我想覆盖的返回指针应该位于该位置以下的内存中。
- en: My second clue to a good injection location was that when I halted the bootloader
    to zero it, the program counter was `0x10001f88`. Depth will vary by the function
    being called, but this shows that I’m in the right region.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我的第二个线索是，当我将引导加载程序停止并将其归零时，程序计数器是`0x10001f88`。深度会根据调用的函数有所变化，但这表明我处于正确的区域。
- en: A third clue came again from Ghidra, where I could explore this region for valid
    code pointers. The offset will vary a bit, because I’m viewing the stack of the
    Read command and my exploit will be corrupting the stack of the Write command,
    but the alignments are often similar.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个线索同样来自Ghidra，我可以在这个区域中探索有效的代码指针。偏移量会略有变化，因为我正在查看Read命令的堆栈，而我的利用将会破坏Write命令的堆栈，但对齐通常是相似的。
- en: Eventually I came up with `0x10001f94` as a working return pointer that is restored
    to the program counter after the Read command sends its acknowledgment. It’s here
    that I write the address of my shellcode to trigger its execution.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我得到了`0x10001f94`作为有效的返回指针，它会在Read命令发送确认后恢复到程序计数器。在这里，我写入我的shellcode地址以触发其执行。
- en: '![Image](../images/f0049-01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0049-01.jpg)'
- en: '**Shellcode for Privilege Escalation**'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**特权提升的Shellcode**'
- en: Herrewegen’s exploit rewrote more than just the return pointer. Instead, he
    patched the stack to turn a Write into a Read, dumping text back to his client.
    I’m lazy, so I took the more direct route of running C shellcode from RAM rather
    than repurposing existing code from ROM.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Getting the shellcode as bytes that would run from SRAM required only a minimal
    linker script, and for simplicity’s sake I used the `ENTRY(main)` directive to
    make my `main()` method the entrypoint, and I placed `.text` and `.data` next
    to each other in RAM. The first byte is the entry point, and any global variables
    are loaded directly with the image rather than copied from code memory.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: From the Herrewegen paper, I knew that there is a global variable in SRAM that
    caches the CRP lock word. The permanent location in flash is at `0x000002fc`,
    and a little bit of searching in Ghidra revealed that the cached version is at
    `0x10000184`. So the first thing my shellcode must do is overwrite this with a
    higher privilege value, such as zero.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'I also needed to make sure that the stack had been restored, so that the interpreter
    loop of the bootloader wouldn’t crash. This could be done by luck, or by crafting
    the right bytes on the stack, but because I wanted my shellcode to work on the
    very first try, I took a simpler solution: it simply calls the main loop of the
    command interpreter, which expects to be called by the bootloader after privileges
    have been cached. It’s an infinite `while()` loop that never returns, and there’s
    plenty of stack depth to spare. This gives a clean continuation without any hard
    work.^([1](footnotes.xhtml#ch4fn1))'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: This is my symbol file. It defines only the global variable that contains the
    protection level and the bootloader’s command interpreter loop.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0050-01.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
- en: This is my shellcode, written in C rather than assembly. It simply disables
    the protections and jumps right back into the command loop.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0050-02.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: Tying all of that together, this is the Go method that unlocks the chip, before
    cleanly continuing into any of the standard boot-loader commands without the pesky
    readout protection getting in the way.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0051-01.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
