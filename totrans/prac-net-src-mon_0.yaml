- en: '**Yes, skip network configuration!** , as shown in Figure 3-16\.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3-16: Skipping network configuration*'
  prefs: []
  type: TYPE_NORMAL
- en: To simplify setup for this first example, choose the Quick Setup option,
  prefs: []
  type: TYPE_NORMAL
- en: as shown in Figure 3-17\. This will have the server running SO as a stand-
  prefs: []
  type: TYPE_NORMAL
- en: alone system with minimum configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3-17: Choosing Quick Setup*'
  prefs: []
  type: TYPE_NORMAL
- en: You will need to tell SO the interface for some of its components to
  prefs: []
  type: TYPE_NORMAL
- en: mon itor. As shown in Figure 3-18, I tell SO that I want Snort to sniff traffic
  prefs: []
  type: TYPE_NORMAL
- en: on eth1\. (As part of Quick Setup, SO chooses to use the Snort network IDS
  prefs: []
  type: TYPE_NORMAL
- en: to generate alert data.)
  prefs: []
  type: TYPE_NORMAL
- en: Now provide a username for accessing the NSM software component
  prefs: []
  type: TYPE_NORMAL
- en: Sguil (covered in Chapter 8), as shown in Figure 3-19\. SO will use this
  prefs: []
  type: TYPE_NORMAL
- en: username for several other NSM tools.
  prefs: []
  type: TYPE_NORMAL
- en: '**68** Chapter 3'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 38](index-103_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 39](index-103_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 40](index-103_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 41](index-103_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-18: Tel ing SO where Snort*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3-19: Entering a Sguil username*'
  prefs: []
  type: TYPE_NORMAL
- en: '*should sniff*'
  prefs: []
  type: TYPE_NORMAL
- en: At the next screen, enter an email address for SO to use for logging
  prefs: []
  type: TYPE_NORMAL
- en: into the Snorby NSM console and authenticating users. (SO will not use
  prefs: []
  type: TYPE_NORMAL
- en: this email address to send spam to you! In fact, the SO project does not
  prefs: []
  type: TYPE_NORMAL
- en: track users in any way.) Snorby (also covered in Chapter 8) is a tool for pre-
  prefs: []
  type: TYPE_NORMAL
- en: senting NSM data to analysts, and it uses a separate authentication mecha-
  prefs: []
  type: TYPE_NORMAL
- en: nism based on email addresses.
  prefs: []
  type: TYPE_NORMAL
- en: Now you’ll choose an alphanumeric password for use in authenticat-
  prefs: []
  type: TYPE_NORMAL
- en: ing to NSM software installed with SO, as shown in Figure 3-20\. (You can
  prefs: []
  type: TYPE_NORMAL
- en: change this password later through the Sguil and Snorby interfaces.)
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3-20: Entering a password for SO NSM applications*'
  prefs: []
  type: TYPE_NORMAL
- en: After you create credentials for SO NSM applications, the configu-
  prefs: []
  type: TYPE_NORMAL
- en: ration script asks if you want to install the Enterprise Log Search and
  prefs: []
  type: TYPE_NORMAL
- en: Archive (ELSA) software, as shown in Figure 3-21\. Choose **Yes, enable**
  prefs: []
  type: TYPE_NORMAL
- en: '**ELSA!** unless you are working with very constrained hardware. ELSA'
  prefs: []
  type: TYPE_NORMAL
- en: provides a search engine interface to NSM log data.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3-21: Choosing to enable ELSA*'
  prefs: []
  type: TYPE_NORMAL
- en: Stand-alone NSM Deployment and Installation **69**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 42](index-104_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 43](index-104_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 44](index-104_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: SO should now summarize the changes it is about to make. If you like
  prefs: []
  type: TYPE_NORMAL
- en: the results, select **Yes, proceed with the changes!** , as shown in Figure
    3-22\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3-22: SO is ready to proceed with changes.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, SO configures the system’s time zone to use UTC, and then sets
  prefs: []
  type: TYPE_NORMAL
- en: up all the NSM applications packaged with it. When finished, it should
  prefs: []
  type: TYPE_NORMAL
- en: report some helpful information about your system. You can check the sta-
  prefs: []
  type: TYPE_NORMAL
- en: tus of the setup in the */var/log/nsm/sosetup.log* file, as shown in Figure
    3-23\.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you’ll see information on IDS rule management, as shown in
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3-24\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3-23: SO setup is now complete.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3-24: Notes concerning IDS rule*'
  prefs: []
  type: TYPE_NORMAL
- en: '*management*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Checking Your Instal ation***'
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve finished installing your stand-alone system, you should take
  prefs: []
  type: TYPE_NORMAL
- en: some steps to make sure that it’s functioning as expected.
  prefs: []
  type: TYPE_NORMAL
- en: '**70** Chapter 3'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: First, open a terminal and run the following command to see if all the NSM agents
    are live. Remember that you run a terminal by executing the
  prefs: []
  type: TYPE_NORMAL
- en: Terminal application on the desktop.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo service nsm status**
  prefs: []
  type: TYPE_NORMAL
- en: '[sudo] password for sademo:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: securityonion'
  prefs: []
  type: TYPE_NORMAL
- en: '* sguil server [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: HIDS'
  prefs: []
  type: TYPE_NORMAL
- en: '* ossec_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: Bro'
  prefs: []
  type: TYPE_NORMAL
- en: Name Type Host Status Pid Peers Started
  prefs: []
  type: TYPE_NORMAL
- en: bro standalone localhost running 5813 0 10 Feb 11:10:32
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: sademo-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* netsniff-ng (full packet data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* pcap_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* snort_agent-1 (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* snort-1 (alert data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* barnyard2-1 (spooler, unified2 format) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* prads (sessions/assets) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* sancp_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* pads_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* argus [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* http_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: Now, in the same window, run the following command to generate
  prefs: []
  type: TYPE_NORMAL
- en: activity that will trigger a Snort alert. I’m assuming that your sensor can
    see
  prefs: []
  type: TYPE_NORMAL
- en: traffic to and from the stand-alone system’s management port. If not, run
  prefs: []
  type: TYPE_NORMAL
- en: this command from a system monitored by the new sensor, or visit the URL
  prefs: []
  type: TYPE_NORMAL
- en: with a web browser on a system monitored by the new sensor.
  prefs: []
  type: TYPE_NORMAL
- en: '**$ curl www.testmyids.com**'
  prefs: []
  type: TYPE_NORMAL
- en: uid=0(root) gid=0(root) groups=0(root)
  prefs: []
  type: TYPE_NORMAL
- en: To determine if at least part of your NSM setup is working, visit the
  prefs: []
  type: TYPE_NORMAL
- en: Snorby NSM application using a web browser. Point your web browser to
  prefs: []
  type: TYPE_NORMAL
- en: the IP address of your stand-alone sensor that you assigned earlier. You will
  prefs: []
  type: TYPE_NORMAL
- en: receive an error saying the certificate for HTTPS is not trusted because
  prefs: []
  type: TYPE_NORMAL
- en: it is not signed, as shown in Figure 3-25\. Unless you suspect that an inter-
  prefs: []
  type: TYPE_NORMAL
- en: nal user is conducting a man-in-the-middle attack against you, it is safe to
  prefs: []
  type: TYPE_NORMAL
- en: choose **Proceed Anyway** or the equivalent. (If you later choose to deploy
    a
  prefs: []
  type: TYPE_NORMAL
- en: certificate trusted by the browser, you will not see these warnings.)
  prefs: []
  type: TYPE_NORMAL
- en: You will now see the SO welcome page, as shown in Figure 3-26, with
  prefs: []
  type: TYPE_NORMAL
- en: links to SO applications accessible via the web servers running on the SO
  prefs: []
  type: TYPE_NORMAL
- en: system. Click the link for Snorby to determine if it captured data triggered
  prefs: []
  type: TYPE_NORMAL
- en: by visiting *http://www.testmyids.com/*.
  prefs: []
  type: TYPE_NORMAL
- en: Stand-alone NSM Deployment and Installation **71**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 45](index-106_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 46](index-106_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-25: Certificate warning*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3-26: SO welcome page*'
  prefs: []
  type: TYPE_NORMAL
- en: Clicking the Snorby link should open a new tab or window to your SO
  prefs: []
  type: TYPE_NORMAL
- en: IP address and port 444\. Snorby should ask for the email address and pass-
  prefs: []
  type: TYPE_NORMAL
- en: word you chose during setup, as shown in Figure 3-27\. Enter them and click
  prefs: []
  type: TYPE_NORMAL
- en: '**Welcome, Sign In**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**72** Chapter 3'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 47](index-107_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 48](index-107_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-27: Snorby login screen*'
  prefs: []
  type: TYPE_NORMAL
- en: Depending on where you deployed your sensor and the amount of
  prefs: []
  type: TYPE_NORMAL
- en: traffic active on the network, you will see different amounts of infor-
  prefs: []
  type: TYPE_NORMAL
- en: mation on the initial dashboard. We’re interested in seeing two specific
  prefs: []
  type: TYPE_NORMAL
- en: 'alerts at the right side of the screen: either ET Policy curl User-Agent or
    GPL'
  prefs: []
  type: TYPE_NORMAL
- en: ATTACK_RESPONSE id ch. If you see either or both (as shown in Figure 3-28),
  prefs: []
  type: TYPE_NORMAL
- en: your sensor is seeing traffic and at least one NSM application (in this case,
  prefs: []
  type: TYPE_NORMAL
- en: Snort) observed and reported it correctly.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3-28: Snorby dashboard confirms stand-alone sensor operation.*'
  prefs: []
  type: TYPE_NORMAL
- en: Stand-alone NSM Deployment and Installation **73**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**conclusion**'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we created a stand-alone SO platform. We booted the SO
  prefs: []
  type: TYPE_NORMAL
- en: '*.iso* file and installed the Xubuntu Linux distribution to a hard drive. Next,
    we updated the operating system and began the process of installing the'
  prefs: []
  type: TYPE_NORMAL
- en: SO software. We began by configuring the network interfaces, choosing
  prefs: []
  type: TYPE_NORMAL
- en: one for system management and the other for data collection or sniffing.
  prefs: []
  type: TYPE_NORMAL
- en: With the network interfaces prepared, we turned to configuring a variety
  prefs: []
  type: TYPE_NORMAL
- en: of SO tools via a helpful wizard process. Once all the software was installed
  prefs: []
  type: TYPE_NORMAL
- en: and configured, we viewed the Snorby console to ensure it could see at least
  prefs: []
  type: TYPE_NORMAL
- en: some data derived from the network.
  prefs: []
  type: TYPE_NORMAL
- en: In Chapter 4, we’ll advance from the world of the stand-alone platform
  prefs: []
  type: TYPE_NORMAL
- en: into one where distributed systems rule. Stand-alone platforms work well
  prefs: []
  type: TYPE_NORMAL
- en: for isolated deployments, but some of the power of the NSM model is appar-
  prefs: []
  type: TYPE_NORMAL
- en: ent only when analysts can interact with data from multiple vantage points.
  prefs: []
  type: TYPE_NORMAL
- en: Stand-alone platforms can sometimes watch more than one network seg-
  prefs: []
  type: TYPE_NORMAL
- en: ment if those segments are physically nearby. When monitored segments
  prefs: []
  type: TYPE_NORMAL
- en: are geographically dispersed, a distributed deployment works best to unify
  prefs: []
  type: TYPE_NORMAL
- en: collection and presentation of NSM data. Chapter 4 will show how to make
  prefs: []
  type: TYPE_NORMAL
- en: that a reality.
  prefs: []
  type: TYPE_NORMAL
- en: '**74** Chapter 3'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**4**'
  prefs: []
  type: TYPE_NORMAL
- en: '**D i S T r i B u T e D D e P l oy M e N T**'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 3 discussed NSM platforms built
  prefs: []
  type: TYPE_NORMAL
- en: on the open source SO project, focusing on
  prefs: []
  type: TYPE_NORMAL
- en: how to install SO as a stand-alone platform.
  prefs: []
  type: TYPE_NORMAL
- en: Single-system solutions are a great starting point
  prefs: []
  type: TYPE_NORMAL
- en: for newcomers to the NSM world, but most organi-
  prefs: []
  type: TYPE_NORMAL
- en: zations have more than one network to manage and
  prefs: []
  type: TYPE_NORMAL
- en: monitor. Based on what you learned in Chapters 2 and 3, you may recognize
  prefs: []
  type: TYPE_NORMAL
- en: locations in your environment where you need multiple sensors cooperat-
  prefs: []
  type: TYPE_NORMAL
- en: ing to provide multisite visibility. Thankfully, as described in the previous
  prefs: []
  type: TYPE_NORMAL
- en: chapter, SO supports distributed deployment models (server-plus-sensor
  prefs: []
  type: TYPE_NORMAL
- en: platforms) to accommodate these requirements.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to covering distributed SO deployments, this chapter also
  prefs: []
  type: TYPE_NORMAL
- en: explains how to use SO Personal Package Archives (PPA) to build SO plat-
  prefs: []
  type: TYPE_NORMAL
- en: forms without using the SO *.iso* image. Installing SO using the project’s official
    *.iso* file is probably the easiest way to get started, but some organizations
    prefer to begin with their own version of Ubuntu Linux. The SO project’s
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: PPAs allow administrators to install SO packages on Ubuntu Linux-derived systems.
    You can install your own version of Ubuntu Linux, add SO PPAs,
  prefs: []
  type: TYPE_NORMAL
- en: and then enjoy full SO functionality.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll begin by building a distributed SO setup.
  prefs: []
  type: TYPE_NORMAL
- en: '**installing an So Server using the So .iso image**'
  prefs: []
  type: TYPE_NORMAL
- en: If you followed the instructions in Chapter 3, you now have a stand-alone
  prefs: []
  type: TYPE_NORMAL
- en: SO platform collecting and interpreting network traffic. More challenging
  prefs: []
  type: TYPE_NORMAL
- en: situations require a server-plus-sensors deployment.
  prefs: []
  type: TYPE_NORMAL
- en: As explained in Chapter 3, in a server-plus-sensors configuration, one
  prefs: []
  type: TYPE_NORMAL
- en: or more sensors collect NSM data, and a server acts as the central “brain”
  prefs: []
  type: TYPE_NORMAL
- en: for the operation, as well as an aggregation and storage point for certain
  prefs: []
  type: TYPE_NORMAL
- en: types of NSM data. This section describes how to install an SO server. After
  prefs: []
  type: TYPE_NORMAL
- en: setting up the server, we’ll install a sensor that will cooperate with the server
  prefs: []
  type: TYPE_NORMAL
- en: to collect and present NSM data.
  prefs: []
  type: TYPE_NORMAL
- en: '***SO Server Considerations***'
  prefs: []
  type: TYPE_NORMAL
- en: When considering an SO server, remember that the server will be the cen-
  prefs: []
  type: TYPE_NORMAL
- en: tral collection and storage point for certain types of NSM data. Keep the
  prefs: []
  type: TYPE_NORMAL
- en: 'following in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: • An *SO server* operates a central MySQL database to which all SO sensors
  prefs: []
  type: TYPE_NORMAL
- en: transmit session data. The aggregate session data is a key factor when
  prefs: []
  type: TYPE_NORMAL
- en: considering RAM and hard drive requirements for the SO server.
  prefs: []
  type: TYPE_NORMAL
- en: • An *SO sensor* stores network traffic as pcap files. The SO sensor stores
  prefs: []
  type: TYPE_NORMAL
- en: this data locally until it’s copied to the SO server. This locally stored
  prefs: []
  type: TYPE_NORMAL
- en: data is a key factor when considering hard drive requirements for the
  prefs: []
  type: TYPE_NORMAL
- en: SO sensor.
  prefs: []
  type: TYPE_NORMAL
- en: You also need to understand what data resides where and know how
  prefs: []
  type: TYPE_NORMAL
- en: many sensors will likely contribute data to the server. You will need the
  prefs: []
  type: TYPE_NORMAL
- en: 'following:'
  prefs: []
  type: TYPE_NORMAL
- en: • A lot of hard drive space in a RAID configuration that you’ll use to
  prefs: []
  type: TYPE_NORMAL
- en: store session and associated NSM data
  prefs: []
  type: TYPE_NORMAL
- en: • At least 4GB of RAM, with more RAM available to satisfy MySQL’s needs
  prefs: []
  type: TYPE_NORMAL
- en: • A multicore CPU
  prefs: []
  type: TYPE_NORMAL
- en: • At least one network interface for management purposes
  prefs: []
  type: TYPE_NORMAL
- en: Because the server is not connected to network taps or SPAN ports, you
  prefs: []
  type: TYPE_NORMAL
- en: can think of it more as a traditional server system. Clients, like SO sensors
  prefs: []
  type: TYPE_NORMAL
- en: or CIRT analysts, will connect to the SO server to access data. The number
  prefs: []
  type: TYPE_NORMAL
- en: of clients accessing the server and the amount of centralized data you want
  prefs: []
  type: TYPE_NORMAL
- en: available to them are the primary factors to consider when designing an SO
  prefs: []
  type: TYPE_NORMAL
- en: server.
  prefs: []
  type: TYPE_NORMAL
- en: '**76** Chapter 4'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 49](index-111_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**N o T e**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Some CIRTs choose to separate functions on their central servers. For example,
    they* *run separate database systems that cooperate with the central server. SO
    does not* *support this sort of configuration out-of-the-box. Therefore, we leave
    that sort of* *configuration out of this discussion. The configuration described
    here works well in* *production for many CIRTs.*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Building Your SO Server***'
  prefs: []
  type: TYPE_NORMAL
- en: To build your server, boot the SO *.iso* image, choose **Live**, and wait until
    you see the SO desktop. Begin the installation process by clicking the Install
  prefs: []
  type: TYPE_NORMAL
- en: Security Onion 12.04 icon. Follow the configuration process explained in
  prefs: []
  type: TYPE_NORMAL
- en: '[“Installing SO to a Hard Drive” on page 62\.](index_split_001.html#p94) In
    summary, you will perform the following steps, as in the previous chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Validate space, connectivity, updates, and third-party software.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Choose to erase the disk to install SO.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Choose a username, computer name, and password.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Complete installation and reboot the system.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Update installed software using **sudo apt-get update && sudo apt-get**
  prefs: []
  type: TYPE_NORMAL
- en: '**dist-upgrade**.'
  prefs: []
  type: TYPE_NORMAL
- en: After completing this process, the SO software should be installed on
  prefs: []
  type: TYPE_NORMAL
- en: the server, but nothing is configured for NSM duties. This is the point at
  prefs: []
  type: TYPE_NORMAL
- en: which we turn the system into a live SO server.
  prefs: []
  type: TYPE_NORMAL
- en: The first task is to manually assign a static IP address to the system. To
  prefs: []
  type: TYPE_NORMAL
- en: 'do so, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Click the blue-and-white mouse icon at the upper-left side of the screen,
  prefs: []
  type: TYPE_NORMAL
- en: select **Settings**, and then choose **Network Connections**, as shown in
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4-1\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4-1: Selecting to view set ings for Network Connections*'
  prefs: []
  type: TYPE_NORMAL
- en: Distributed Deployment **77**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 50](index-112_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 2\. Highlight **Wired connection 1**, and then click **Edit**. Click the **IPv4**
  prefs: []
  type: TYPE_NORMAL
- en: '**Settings** tab, and then change the Method to **Manual**. Enter values'
  prefs: []
  type: TYPE_NORMAL
- en: appropriate for your server by clicking **Add** and then entering the
  prefs: []
  type: TYPE_NORMAL
- en: information required, as shown in Figure 4-2\. (These values represent
  prefs: []
  type: TYPE_NORMAL
- en: choices appropriate for my sample network; be sure to use values that
  prefs: []
  type: TYPE_NORMAL
- en: match your environment.)
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4-2: Configuring Wired connection 1 with*'
  prefs: []
  type: TYPE_NORMAL
- en: '*static IP addressing*'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. When you’re finished, click **Save**. The dialog will turn gray while the
  prefs: []
  type: TYPE_NORMAL
- en: system reconfigures networking.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Click **Close** to complete the process.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Reboot the system.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, the server is running the correct operating system, with
  prefs: []
  type: TYPE_NORMAL
- en: updated components, and is reachable via a static management IP address.
  prefs: []
  type: TYPE_NORMAL
- en: '***Configuring Your SO Server***'
  prefs: []
  type: TYPE_NORMAL
- en: Now we can begin configuring the system as an SO server. To do so, follow
  prefs: []
  type: TYPE_NORMAL
- en: 'these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Click the **Setup** icon and enter your password to perform administra-
  prefs: []
  type: TYPE_NORMAL
- en: tive tasks. Select **Yes, Continue!** when prompted.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. When asked if you want to configure interfaces, choose **No, not right now**.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. When prompted, choose **Advanced Setup**.
  prefs: []
  type: TYPE_NORMAL
- en: '**78** Chapter 4'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 51](index-113_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 52](index-113_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 4\. The next screen asks what sort of system you want to build. Select **Server**,
    as shown in Figure 4-3, and then click **OK**.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4-3: Choosing to build a server*'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Now choose between running the Snort or Suricata IDS engine. Select
  prefs: []
  type: TYPE_NORMAL
- en: the IDS engine you plan to run on your sensors, and then click **OK**.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. When asked to choose an IDS ruleset, choose **Emerging Threats GPL**,
  prefs: []
  type: TYPE_NORMAL
- en: as shown in Figure 4-4\. (The Emerging Threats ruleset is free and per-
  prefs: []
  type: TYPE_NORMAL
- en: fect for our purposes.)
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4-4: Choosing the Emerging Threats GPL ruleset*'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. The setup wizard asks for a Sguil username, Snorby email address, and
  prefs: []
  type: TYPE_NORMAL
- en: password. Enter the responses appropriate for your environment. When
  prefs: []
  type: TYPE_NORMAL
- en: asked if you want to enable ELSA, choose **Yes, enable ELSA!** . The setup
  prefs: []
  type: TYPE_NORMAL
- en: wizard summarizes your choices and asks if you’re ready to proceed, as
  prefs: []
  type: TYPE_NORMAL
- en: shown in Figure 4-5\.
  prefs: []
  type: TYPE_NORMAL
- en: Distributed Deployment **79**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 53](index-114_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-5: Setup summary before proceeding with SO server changes*'
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Click **Yes, proceed with the changes!** , and the setup wizard will com-
  prefs: []
  type: TYPE_NORMAL
- en: plete the SO server installation. The script should report that the setup
  prefs: []
  type: TYPE_NORMAL
- en: is complete.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. To confirm that installation succeeded, visit the web page hosted on the
  prefs: []
  type: TYPE_NORMAL
- en: server, and then access a web-enabled NSM application, such as Snorby.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you have only an SO server active. It is not running any
  prefs: []
  type: TYPE_NORMAL
- en: tools that collect and interpret NSM data. The Snorby console will be empty
  prefs: []
  type: TYPE_NORMAL
- en: until you build an SO sensor, as described next.
  prefs: []
  type: TYPE_NORMAL
- en: '**installing an So Sensor using the So .iso image**'
  prefs: []
  type: TYPE_NORMAL
- en: Our SO server won’t do us much good without one or more sensors to col-
  prefs: []
  type: TYPE_NORMAL
- en: lect and interpret NSM data. In this section, we’ll build an SO sensor using
  prefs: []
  type: TYPE_NORMAL
- en: the SO *.iso* file. For hardware, choose the same sort of equipment you used
  prefs: []
  type: TYPE_NORMAL
- en: in the stand-alone scenario.
  prefs: []
  type: TYPE_NORMAL
- en: To build your sensor, boot the *.iso* image, choose **Live**, and wait until
    you see the SO desktop. Begin the installation process by clicking the
  prefs: []
  type: TYPE_NORMAL
- en: Install Security Onion 12.04 icon, and then follow the configuration pro-
  prefs: []
  type: TYPE_NORMAL
- en: cess explained i[n “Installing SO to a Hard Drive” on page 62](index_split_001.html#p94).
  prefs: []
  type: TYPE_NORMAL
- en: 'In summary, you will perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Validate space, connectivity, updates, and third-party software.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Choose to erase the disk to install SO.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Choose a username, computer name, and password.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Complete installation and reboot the system.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Update installed software using **sudo apt-get update && sudo apt-get**
  prefs: []
  type: TYPE_NORMAL
- en: '**dist-upgrade**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**80** Chapter 4'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 54](index-115_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After completing this process, the SO software should be installed on
  prefs: []
  type: TYPE_NORMAL
- en: the sensor, but nothing is configured for NSM duties. In the next section,
  prefs: []
  type: TYPE_NORMAL
- en: we will choose a static IP address within the SO setup wizard, since that is
  prefs: []
  type: TYPE_NORMAL
- en: part of a larger network configuration process required for SO sensors. We
  prefs: []
  type: TYPE_NORMAL
- en: are ready to turn the system into a live SO sensor, and tell it to cooperate
  prefs: []
  type: TYPE_NORMAL
- en: with the SO server we just created.
  prefs: []
  type: TYPE_NORMAL
- en: '***Configuring the SO Sensor***'
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure the system as an SO sensor, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Click the Setup icon and enter your password to perform administra-
  prefs: []
  type: TYPE_NORMAL
- en: tive tasks. Select **Yes, Continue!** when prompted.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. When prompted, select **eth0** for the management interface (or whatever
  prefs: []
  type: TYPE_NORMAL
- en: interface you choose for management), configure a static IP address,
  prefs: []
  type: TYPE_NORMAL
- en: and choose **eth1** for sniffing (or whatever interface(s) you want to use
  prefs: []
  type: TYPE_NORMAL
- en: to collect and interpret traffic).
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Accept your selections by choosing **Yes, make changes and reboot!** .
  prefs: []
  type: TYPE_NORMAL
- en: When the system reboots, it will be ready to be configured as an SO
  prefs: []
  type: TYPE_NORMAL
- en: 'sensor. To configure the sensor, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Click the Setup icon and enter your password to perform administra-
  prefs: []
  type: TYPE_NORMAL
- en: tive tasks. Select **Yes, Continue!** when prompted.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The setup script should notice that you’ve already configured network
  prefs: []
  type: TYPE_NORMAL
- en: interfaces, so choose **Yes, skip network configuration!** .
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Select **Sensor**, as shown in Figure 4-6\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4-6: Choosing to build a sensor*'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. As an SO sensor, this system will cooperate with our SO server. Accord-
  prefs: []
  type: TYPE_NORMAL
- en: ingly, the setup wizard should prompt you to enter the hostname or IP
  prefs: []
  type: TYPE_NORMAL
- en: address of the SO server, as shown in Figure 4-7\. As you can see, I enter
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.2.129, which I statically assigned to the SO server earlier. Enter
  prefs: []
  type: TYPE_NORMAL
- en: the IP address for your SO server.
  prefs: []
  type: TYPE_NORMAL
- en: Distributed Deployment **81**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 55](index-116_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 56](index-116_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 57](index-116_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-7: Providing the SO sensor setup wzard program with the IP address*'
  prefs: []
  type: TYPE_NORMAL
- en: '*of the SO server*'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. The setup wizard will ask for a username for the SO sensor processes
  prefs: []
  type: TYPE_NORMAL
- en: to use to connect via OpenSSH. SO uses OpenSSH for communica-
  prefs: []
  type: TYPE_NORMAL
- en: tion between the server and one or more sensors. The username you
  prefs: []
  type: TYPE_NORMAL
- en: selected when building the SO server will suffice for demo purposes, but
  prefs: []
  type: TYPE_NORMAL
- en: in production environments, you should create a new user on the server
  prefs: []
  type: TYPE_NORMAL
- en: for each sensor that you expect to report. Separate users will limit your
  prefs: []
  type: TYPE_NORMAL
- en: system’s exposure if any single sensor is compromised. I enter **svrdemiso**
    for
  prefs: []
  type: TYPE_NORMAL
- en: the user account, as shown in Figure 4-8\. Use a value appropriate for
  prefs: []
  type: TYPE_NORMAL
- en: your setup.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4-8: Configuring the username to connect to the SO server*'
  prefs: []
  type: TYPE_NORMAL
- en: 6\. The setup wizard asks for the interface(s) to be monitored, as in the
  prefs: []
  type: TYPE_NORMAL
- en: stand-alone setup. I choose **eth1**, and then I choose to enable **ELSA** and
  prefs: []
  type: TYPE_NORMAL
- en: automatically update the ELSA server (which helps the ELSA server on
  prefs: []
  type: TYPE_NORMAL
- en: the SO server know that a new node is checking in with data), as shown
  prefs: []
  type: TYPE_NORMAL
- en: in Figure 4-9\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4-9: Tel ing the setup script to update the ELSA server*'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. It’s time to commit these changes. The setup script summarizes the
  prefs: []
  type: TYPE_NORMAL
- en: results. If you’re satisfied with the output, click **Yes, proceed with the**
  prefs: []
  type: TYPE_NORMAL
- en: '**changes!** , as shown in Figure 4-10\.'
  prefs: []
  type: TYPE_NORMAL
- en: '**82** Chapter 4'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 58](index-117_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 59](index-117_2.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-10: SO summary before proceeding with SO sensor*'
  prefs: []
  type: TYPE_NORMAL
- en: '*changes*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Completing Setup***'
  prefs: []
  type: TYPE_NORMAL
- en: As noted earlier, distributed SO deployments rely on OpenSSH for commu-
  prefs: []
  type: TYPE_NORMAL
- en: nication. During setup, the OpenSSH client will likely report that it can’t
  prefs: []
  type: TYPE_NORMAL
- en: verify the authenticity of the SO server. It will probably show the ECDSA key
  prefs: []
  type: TYPE_NORMAL
- en: fingerprint of the SO server and ask if you want to continue connecting.
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the SO server locally and run the following commands to
  prefs: []
  type: TYPE_NORMAL
- en: obtain a fingerprint of the ECDSA key. (Your key will differ from the output
  prefs: []
  type: TYPE_NORMAL
- en: in Listing 4-1.)
  prefs: []
  type: TYPE_NORMAL
- en: $ **ls /etc/ssh/*key***
  prefs: []
  type: TYPE_NORMAL
- en: /etc/ssh/ssh_host_dsa_key /etc/ssh/ssh_host_ecdsa_key.pub
  prefs: []
  type: TYPE_NORMAL
- en: /etc/ssh/ssh_host_dsa_key.pub /etc/ssh/ssh_host_rsa_key
  prefs: []
  type: TYPE_NORMAL
- en: /etc/ssh/ssh_host_ecdsa_key /etc/ssh/ssh_host_rsa_key.pub
  prefs: []
  type: TYPE_NORMAL
- en: $ **ssh-keygen -lf /etc/ssh/ssh_host_ecdsa_key.pub**
  prefs: []
  type: TYPE_NORMAL
- en: 256 33:6c:38:9a:48:ce:fc:b2:c2:26:57:c3:81:a7:9d:b9 root@svrdemiso (ECDSA)
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 4-1: Examining SSH keys*'
  prefs: []
  type: TYPE_NORMAL
- en: Verify that the key fingerprint you see matches the key on your SO
  prefs: []
  type: TYPE_NORMAL
- en: server, and then type **yes** and press enter, as shown in Figure 4-11\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4-11: Validating the OpenSSH ECDSA key fingerprint*'
  prefs: []
  type: TYPE_NORMAL
- en: A few more configuration messages will pass by, and another termi-
  prefs: []
  type: TYPE_NORMAL
- en: nal will appear, prompting you to enter your password to log in to the SO
  prefs: []
  type: TYPE_NORMAL
- en: server. Once you’ve entered your password correctly, the setup wizard will
  prefs: []
  type: TYPE_NORMAL
- en: report that it is complete.
  prefs: []
  type: TYPE_NORMAL
- en: Distributed Deployment **83**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***Verifying that the Sensors Are Working***'
  prefs: []
  type: TYPE_NORMAL
- en: Now verify that the sensors are running with the **sudo service nsm status**
  prefs: []
  type: TYPE_NORMAL
- en: command. If you see output like that in Listing 4-2, everything is probably
  prefs: []
  type: TYPE_NORMAL
- en: 'working fine:'
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo service nsm status**
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: HIDS'
  prefs: []
  type: TYPE_NORMAL
- en: '* ossec_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: Bro'
  prefs: []
  type: TYPE_NORMAL
- en: Name Type Host Status Pid Peers Started
  prefs: []
  type: TYPE_NORMAL
- en: manager manager 192.168.2.130 running 2501 2 10 Feb 17:17:26
  prefs: []
  type: TYPE_NORMAL
- en: proxy proxy 192.168.2.130 running 2659 2 10 Feb 17:17:28
  prefs: []
  type: TYPE_NORMAL
- en: sendemiso-eth1-1 worker 192.168.2.130 running 3275 2 10 Feb 17:17:31
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: sendemiso-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* netsniff-ng (full packet data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* pcap_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* snort_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* suricata (alert data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* barnyard2 (spooler, unified2 format) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* prads (sessions/assets) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* sancp_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* pads_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* argus [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* http_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 4-2: Checking NSM service status*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Verifying that the Autossh Tunnel Is Working***'
  prefs: []
  type: TYPE_NORMAL
- en: If you notice that one or more NSM components aren’t working, try running
  prefs: []
  type: TYPE_NORMAL
- en: the **sudo service nsm restart** command to stop and start each application.
    If
  prefs: []
  type: TYPE_NORMAL
- en: that doesn’t result in each component working as expected, you may have a
  prefs: []
  type: TYPE_NORMAL
- en: more serious problem. You might need to restart your setup, or consult the
  prefs: []
  type: TYPE_NORMAL
- en: online SO mailing list for assistance. You should also verify that the autossh
  prefs: []
  type: TYPE_NORMAL
- en: tunnel that connects the sensor to the server is operational. Use the follow-
  prefs: []
  type: TYPE_NORMAL
- en: ing command as shown in Listing 4-3\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **ps aux | grep autoss[h]**
  prefs: []
  type: TYPE_NORMAL
- en: root 9775 0.0 0.0 4308 324 ? Ss 17:01 0:00 /usr/lib/
  prefs: []
  type: TYPE_NORMAL
- en: autossh/autossh -M 0 -q -N -o ServerAliveInterval 60 -o ServerAliveCountMax
  prefs: []
  type: TYPE_NORMAL
- en: 3 -i /root/.ssh/securityonion -L 3306:127.0.0.1:3306 -R 50000:localhost:50000
  prefs: []
  type: TYPE_NORMAL
- en: -R 50001:localhost:9306 svrdemiso@192.168.2.129
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 4-3: Looking for autossh processes*'
  prefs: []
  type: TYPE_NORMAL
- en: You can get similar results with **pgrep -lf autossh**. If the output is blank,
    you do not have an autossh tunnel established. Try rerunning the SO setup script.
  prefs: []
  type: TYPE_NORMAL
- en: You can run a test by visiting *http://www.testmyids.com/*. If you see results
  prefs: []
  type: TYPE_NORMAL
- en: in the Snorby application, your SO sensor is communicating events to your
  prefs: []
  type: TYPE_NORMAL
- en: SO server. Congratulations—you have built a distributed NSM system!
  prefs: []
  type: TYPE_NORMAL
- en: '**84** Chapter 4'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**building an So Server using PPas**'
  prefs: []
  type: TYPE_NORMAL
- en: The previous installations used the SO *.iso* file provided by the SO project,
  prefs: []
  type: TYPE_NORMAL
- en: but that’s not the only installation option. You can also build SO function-
  prefs: []
  type: TYPE_NORMAL
- en: ality on a locally installed Ubuntu Linux-based operating system using
  prefs: []
  type: TYPE_NORMAL
- en: the SO project’s PPAs, available at *https://launchpad.net/~securityonion/*.
  prefs: []
  type: TYPE_NORMAL
- en: Some organizations prefer to avoid using Linux distributions built by other
  prefs: []
  type: TYPE_NORMAL
- en: teams. If your organization follows this model and uses its own Ubuntu
  prefs: []
  type: TYPE_NORMAL
- en: Linux-derived base installation, you can use SO PPAs to deploy SO on your
  prefs: []
  type: TYPE_NORMAL
- en: platforms.
  prefs: []
  type: TYPE_NORMAL
- en: The SO project builds stable, test, and development PPAs. You should
  prefs: []
  type: TYPE_NORMAL
- en: use stable in production environments. If you want to help keep SO mov-
  prefs: []
  type: TYPE_NORMAL
- en: ing forward, run the test PPA. The development PPA is best suited to SO
  prefs: []
  type: TYPE_NORMAL
- en: developers.
  prefs: []
  type: TYPE_NORMAL
- en: In the remainder of this chapter, we’ll build an entirely new server-plus-
  prefs: []
  type: TYPE_NORMAL
- en: sensor deployment solely for the purpose of demonstrating an alternative
  prefs: []
  type: TYPE_NORMAL
- en: setup option. Instead of using an *.iso* image from the SO project, we’ll use
  prefs: []
  type: TYPE_NORMAL
- en: the 64-bit, Long Term Support (LTS) version of Ubuntu Server 12.04 as the
  prefs: []
  type: TYPE_NORMAL
- en: base operating system for an SO server and sensor.
  prefs: []
  type: TYPE_NORMAL
- en: You can download the *.iso* file for this distribution from the Ubuntu
  prefs: []
  type: TYPE_NORMAL
- en: project website at *http://www.ubuntu.com/download/server/*. When visiting
  prefs: []
  type: TYPE_NORMAL
- en: that page, you’ll see a Get Ubuntu 12.04 LTS option, which will be avail-
  prefs: []
  type: TYPE_NORMAL
- en: able through April 2017\. I chose this distribution because the SO project
  prefs: []
  type: TYPE_NORMAL
- en: tests against the LTS and cannot guarantee support for other variants.
  prefs: []
  type: TYPE_NORMAL
- en: This is a popular option that your organization may use itself, thanks to
  prefs: []
  type: TYPE_NORMAL
- en: the extended availability of the release.
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Building your own system using PPAs requires knowledge of Linux that exceeds
    that* *required for using the SO* .iso *installation method. For example, you
    need to know* *how to forward X sessions. (I show how to accomplish that task,
    and other Linux*'
  prefs: []
  type: TYPE_NORMAL
- en: '*steps, later in the chapter.) If you are not comfortable with this process,
    or don’t understand what it means, ask a Linux-experienced friend or install SO
    from the* .iso *files* *as previously described.*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Instal ing Ubuntu Server as the SO Server Operating System***'
  prefs: []
  type: TYPE_NORMAL
- en: Begin the Ubuntu server installation process by booting the Ubuntu Server
  prefs: []
  type: TYPE_NORMAL
- en: LTS *.iso* image on the hardware chosen to run the SO server. The installation
  prefs: []
  type: TYPE_NORMAL
- en: wizard will prompt you to make a number of choices. Make the following
  prefs: []
  type: TYPE_NORMAL
- en: selections, adjusted as appropriate for your environment.
  prefs: []
  type: TYPE_NORMAL
- en: '1\. Language: **English**'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. **Install Ubuntu Server**
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Select a language: **English**'
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Select your location: **United States**'
  prefs: []
  type: TYPE_NORMAL
- en: Distributed Deployment **85**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Configure the keyboard:'
  prefs: []
  type: TYPE_NORMAL
- en: • Detect keyboard layout? **No**
  prefs: []
  type: TYPE_NORMAL
- en: • **English (US)**
  prefs: []
  type: TYPE_NORMAL
- en: '• Keyboard layout: **English (US)**'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Hostname: **serverdemo**'
  prefs: []
  type: TYPE_NORMAL
- en: '7\. Set up users and passwords:'
  prefs: []
  type: TYPE_NORMAL
- en: '• Full name for the new user: **serverdemo**'
  prefs: []
  type: TYPE_NORMAL
- en: '• Username for your account: **serverdemo**'
  prefs: []
  type: TYPE_NORMAL
- en: '• Choose a password for the new user: **<enter password>**'
  prefs: []
  type: TYPE_NORMAL
- en: '• Reenter password to verify: **<enter password>**'
  prefs: []
  type: TYPE_NORMAL
- en: • Encrypt your home directory? **No**
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Configure the clock. Is this time zone correct? **Yes**
  prefs: []
  type: TYPE_NORMAL
- en: '9\. Partition disks:'
  prefs: []
  type: TYPE_NORMAL
- en: '• Partitioning method: **Guided – use entire disk and set up LVM**'
  prefs: []
  type: TYPE_NORMAL
- en: '• Select disk to partition: **<choose your disk>**'
  prefs: []
  type: TYPE_NORMAL
- en: • Write the changes to disks and configure LVM? **Yes**
  prefs: []
  type: TYPE_NORMAL
- en: '• Amount of volume group to use for guided partitioning: **<accept**'
  prefs: []
  type: TYPE_NORMAL
- en: '**default>, Continue**'
  prefs: []
  type: TYPE_NORMAL
- en: • Write the changes to disks? **Yes**
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Configure the package manager. HTTP proxy information (blank for
  prefs: []
  type: TYPE_NORMAL
- en: 'none): **<blank>, Continue**'
  prefs: []
  type: TYPE_NORMAL
- en: 11\. Configure tasksel. How do you want to manage upgrades on this system?
  prefs: []
  type: TYPE_NORMAL
- en: '**No automatic updates.**'
  prefs: []
  type: TYPE_NORMAL
- en: '12\. Software selection. Choose software to install: **<click spacebar on**'
  prefs: []
  type: TYPE_NORMAL
- en: '**OpenSSH server>, Continue**'
  prefs: []
  type: TYPE_NORMAL
- en: 13\. Install the GRUB boot loader on a hard disk. Install the GRUB boot
  prefs: []
  type: TYPE_NORMAL
- en: loader to the master boot record? **Yes**
  prefs: []
  type: TYPE_NORMAL
- en: 14\. Finish the installation. **Continue**
  prefs: []
  type: TYPE_NORMAL
- en: When installation is complete, the system will reboot. When you log in,
  prefs: []
  type: TYPE_NORMAL
- en: you should see the IP address assigned via DHCP, as well as messages about
  prefs: []
  type: TYPE_NORMAL
- en: the number of updates that can be applied, as shown in Figure 4-12\.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, Ubuntu may not show you an IP address or other system
  prefs: []
  type: TYPE_NORMAL
- en: information. In these cases, the login script determined that the system is
  prefs: []
  type: TYPE_NORMAL
- en: under load, and it will report that condition. This is normal for systems that
  prefs: []
  type: TYPE_NORMAL
- en: start a significant number of input/output (I/O) sensitive operations after
  prefs: []
  type: TYPE_NORMAL
- en: booting.
  prefs: []
  type: TYPE_NORMAL
- en: '**86** Chapter 4'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 60](index-121_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-12: Ubuntu server is instal ed.*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Choosing a Static IP Address***'
  prefs: []
  type: TYPE_NORMAL
- en: We installed the operating system and allowed a dynamic IP address,
  prefs: []
  type: TYPE_NORMAL
- en: but now we want to transition from DHCP to static IP addressing. In this
  prefs: []
  type: TYPE_NORMAL
- en: example, we’ll edit a specific configuration file, which is one of the ways
    to
  prefs: []
  type: TYPE_NORMAL
- en: set a static IP address. (Earlier I showed you how to set a static IP address
  prefs: []
  type: TYPE_NORMAL
- en: 'using a GUI menu.) First open the */etc/network/interfaces* file to edit it
    with the vi editor like this (enter your password when prompted):'
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo vi /etc/network/interfaces**
  prefs: []
  type: TYPE_NORMAL
- en: The file should contain entries like those in Listing 4-4\.
  prefs: []
  type: TYPE_NORMAL
- en: This file describes the network interfaces available on your system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: and how to activate them. For more information, see interfaces(5).
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The loopback network interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: auto lo
  prefs: []
  type: TYPE_NORMAL
- en: iface lo inet loopback
  prefs: []
  type: TYPE_NORMAL
- en: The primary network interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: auto eth0
  prefs: []
  type: TYPE_NORMAL
- en: iface eth0 inet dhcp
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 4-4: Default contents of* /etc/network/interfaces'
  prefs: []
  type: TYPE_NORMAL
- en: Distributed Deployment **87**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: Comment out the entries in the eth0 section with hashmarks (#) and
  prefs: []
  type: TYPE_NORMAL
- en: add entries like the ones shown in Listing 4-5 in bold to match your setup.
  prefs: []
  type: TYPE_NORMAL
- en: (Ask your administrators for the settings most compatible with your net-
  prefs: []
  type: TYPE_NORMAL
- en: work, if necessary.)
  prefs: []
  type: TYPE_NORMAL
- en: The primary network interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**#** auto eth0'
  prefs: []
  type: TYPE_NORMAL
- en: '**#** iface eth0 inet dhcp'
  prefs: []
  type: TYPE_NORMAL
- en: auto eth0
  prefs: []
  type: TYPE_NORMAL
- en: iface eth0 inet static
  prefs: []
  type: TYPE_NORMAL
- en: '**address 192.168.2.128**'
  prefs: []
  type: TYPE_NORMAL
- en: '**netmask 255.255.255.0**'
  prefs: []
  type: TYPE_NORMAL
- en: '**network 192.168.2.0**'
  prefs: []
  type: TYPE_NORMAL
- en: '**broadcast 192.168.2.255**'
  prefs: []
  type: TYPE_NORMAL
- en: '**gateway 192.168.2.1**'
  prefs: []
  type: TYPE_NORMAL
- en: '**dns-search taosecurity.com**'
  prefs: []
  type: TYPE_NORMAL
- en: '**dns-nameservers 172.16.2.1**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 4-5: Edited contents of* /etc/network/interfaces'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, restart the networking services to enable the static IP address
  prefs: []
  type: TYPE_NORMAL
- en: with the command shown in Listing 4-6\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo /etc/init.d/networking restart**
  prefs: []
  type: TYPE_NORMAL
- en: '* Running /etc/init.d/networking restart is deprecated because it may not'
  prefs: []
  type: TYPE_NORMAL
- en: enable again some interfaces
  prefs: []
  type: TYPE_NORMAL
- en: '* Reconfiguring network interfaces...'
  prefs: []
  type: TYPE_NORMAL
- en: ssh stop/waiting
  prefs: []
  type: TYPE_NORMAL
- en: ssh start/running, process 16814 [ OK ]
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 4-6: Restarting network services to use a static IP address*'
  prefs: []
  type: TYPE_NORMAL
- en: Now reboot the system to kill the virtual dhclient process, which assigns
  prefs: []
  type: TYPE_NORMAL
- en: IP addresses via DHCP. After rebooting, your system should have a static IP
  prefs: []
  type: TYPE_NORMAL
- en: address.
  prefs: []
  type: TYPE_NORMAL
- en: To confirm that your static IP address is configured as expected, connect
  prefs: []
  type: TYPE_NORMAL
- en: via OpenSSH to the IP address of the server to continue with the next tasks.
  prefs: []
  type: TYPE_NORMAL
- en: From a different workstation, open a terminal and execute **ssh *username*****@
    *server***
  prefs: []
  type: TYPE_NORMAL
- en: '***IP***, where ***username*** is the username you configured, and ***server
    IP*** is the static management IP address you applied to the server.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Updating the Software***'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, update the software running on your server. Run these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo apt-get update && sudo apt-get dist-upgrade**
  prefs: []
  type: TYPE_NORMAL
- en: When asked if you want to continue, type **Y** and press enter. The
  prefs: []
  type: TYPE_NORMAL
- en: server will download and install any updates. Once it’s finished, enter
  prefs: []
  type: TYPE_NORMAL
- en: '**sudo reboot** to complete the process and reboot the server.'
  prefs: []
  type: TYPE_NORMAL
- en: '**88** Chapter 4'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***Beginning MySQL and PPA Setup on the SO Server***'
  prefs: []
  type: TYPE_NORMAL
- en: After rebooting, log in. Now we’ll start configuring our system as an SO
  prefs: []
  type: TYPE_NORMAL
- en: server. First, issue the following command to tell MySQL not to prompt for
  prefs: []
  type: TYPE_NORMAL
- en: a root password during installation.
  prefs: []
  type: TYPE_NORMAL
- en: $ **echo "debconf debconf/frontend select noninteractive" | sudo debconf-set-selections**
    Now install the python-software-properties package.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo apt-get -y install python-software-properties**
  prefs: []
  type: TYPE_NORMAL
- en: Next, add the securityonion/stable PPA to the list of repositories recog-
  prefs: []
  type: TYPE_NORMAL
- en: nized by this Ubuntu server, as shown in Listing 4-7\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo add-apt-repository -y ppa:securityonion/stable**
  prefs: []
  type: TYPE_NORMAL
- en: 'gpg: keyring `/tmp/tmpnOilj5/secring.gpg'' created'
  prefs: []
  type: TYPE_NORMAL
- en: 'gpg: keyring `/tmp/tmpnOilj5/pubring.gpg'' created'
  prefs: []
  type: TYPE_NORMAL
- en: 'gpg: requesting key 23F386C7 from hkp server keyserver.ubuntu.com'
  prefs: []
  type: TYPE_NORMAL
- en: 'gpg: /tmp/tmpnOilj5/trustdb.gpg: trustdb created'
  prefs: []
  type: TYPE_NORMAL
- en: 'gpg: key 23F386C7: public key "Launchpad PPA for Security Onion" imported'
  prefs: []
  type: TYPE_NORMAL
- en: 'gpg: Total number processed: 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'gpg: imported: 1 (RSA: 1)'
  prefs: []
  type: TYPE_NORMAL
- en: OK
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 4-7: Adding the securityonion/stable PPA to the list of repositories*'
  prefs: []
  type: TYPE_NORMAL
- en: Update the package listing with the following command.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo apt-get update**
  prefs: []
  type: TYPE_NORMAL
- en: Now install the securityonion-server package.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo apt-get install securityonion-server**
  prefs: []
  type: TYPE_NORMAL
- en: Notice in Listing 4-8 that in addition to many dependencies, the system
  prefs: []
  type: TYPE_NORMAL
- en: plans to install a lot of SO-specific packages. This is normal during software
  prefs: []
  type: TYPE_NORMAL
- en: installation.
  prefs: []
  type: TYPE_NORMAL
- en: '*-- snip --*'
  prefs: []
  type: TYPE_NORMAL
- en: securityonion-capme securityonion-daq securityonion-et-rules
  prefs: []
  type: TYPE_NORMAL
- en: securityonion-limits securityonion-login-screen
  prefs: []
  type: TYPE_NORMAL
- en: securityonion-nsmnow-admin-scripts securityonion-ossec-rules
  prefs: []
  type: TYPE_NORMAL
- en: securityonion-passenger securityonion-passenger-conf
  prefs: []
  type: TYPE_NORMAL
- en: securityonion-pfring-daq securityonion-pfring-ld securityonion-pfring-module
  prefs: []
  type: TYPE_NORMAL
- en: securityonion-pfring-userland securityonion-pulledpork
  prefs: []
  type: TYPE_NORMAL
- en: securityonion-rule-update securityonion-server securityonion-setup
  prefs: []
  type: TYPE_NORMAL
- en: securityonion-sguil-agent-ossec securityonion-sguil-db-purge
  prefs: []
  type: TYPE_NORMAL
- en: securityonion-sguil-server securityonion-sguild-add-user
  prefs: []
  type: TYPE_NORMAL
- en: securityonion-snorby securityonion-snort securityonion-sostat
  prefs: []
  type: TYPE_NORMAL
- en: Distributed Deployment **89**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: securityonion-squert securityonion-squert-cron securityonion-web-page securityonion-wkhtmltopdf
    shared-mime-info sound-theme-freedesktop sox
  prefs: []
  type: TYPE_NORMAL
- en: sqlite3 ssl-cert tcl-tls tcl8.5 tcllib tclx8.4 tcpflow tcpflow-no-tags
  prefs: []
  type: TYPE_NORMAL
- en: tshark ttf-dejavu-core ttf-liberation wireshark-common x11-common xplico
  prefs: []
  type: TYPE_NORMAL
- en: zenity zenity-common
  prefs: []
  type: TYPE_NORMAL
- en: 0 upgraded, 288 newly installed, 0 to remove and 0 not upgraded.
  prefs: []
  type: TYPE_NORMAL
- en: Need to get 287 MB of archives.
  prefs: []
  type: TYPE_NORMAL
- en: After this operation, 643 MB of additional disk space will be used.
  prefs: []
  type: TYPE_NORMAL
- en: Do you want to continue [Y/n]?
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 4-8: Instal ing the securityonion-server package*'
  prefs: []
  type: TYPE_NORMAL
- en: Type **Y** and press enter to continue. You will probably need to wait sev-
  prefs: []
  type: TYPE_NORMAL
- en: eral minutes while the server downloads and installs the required software.
  prefs: []
  type: TYPE_NORMAL
- en: Once it’s finished, install the securityonion-elsa and securityonion-elsa-extras
  prefs: []
  type: TYPE_NORMAL
- en: packages.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo apt-get install securityonion-elsa securityonion-elsa-extras**
  prefs: []
  type: TYPE_NORMAL
- en: '***Configuring Your SO Server via PPA***'
  prefs: []
  type: TYPE_NORMAL
- en: Now set up this server using sosetup. Connect via SSH from a Linux system
  prefs: []
  type: TYPE_NORMAL
- en: to take advantage of X forwarding. Here, I’m connecting from a separate
  prefs: []
  type: TYPE_NORMAL
- en: Linux system named ubuntu. Notice the use of the capital -X switch to enable
  prefs: []
  type: TYPE_NORMAL
- en: X forwarding. X is a protocol for displaying graphical user interfaces. For-
  prefs: []
  type: TYPE_NORMAL
- en: warding means sending a GUI window someplace other than the computer
  prefs: []
  type: TYPE_NORMAL
- en: on which it is run. The -X switch tells the remote server to display client
    win-
  prefs: []
  type: TYPE_NORMAL
- en: dows through the SSH connection so that they appear on the local desktop,
  prefs: []
  type: TYPE_NORMAL
- en: not the remote system. This allows you to interact with those client windows
  prefs: []
  type: TYPE_NORMAL
- en: and configure software as necessary. Listing 4-9 explains the details.
  prefs: []
  type: TYPE_NORMAL
- en: richard@ubuntu:~$ **ssh -X serverdemo@192.168.2.128**
  prefs: []
  type: TYPE_NORMAL
- en: The authenticity of host '192.168.2.128 (192.168.2.128)' can't be established.
  prefs: []
  type: TYPE_NORMAL
- en: ECDSA key fingerprint is 7f:a5:75:69:66:07:d9:1a:90:e5:42:1a:91:5a:ab:65\.
  prefs: []
  type: TYPE_NORMAL
- en: Are you sure you want to continue connecting (yes/no)? **yes**
  prefs: []
  type: TYPE_NORMAL
- en: 'Warning: Permanently added ''192.168.2.128'' (ECDSA) to the list of known hosts.'
  prefs: []
  type: TYPE_NORMAL
- en: 'serverdemo@192.168.2.128''s password: **********'
  prefs: []
  type: TYPE_NORMAL
- en: Welcome to Ubuntu 12.04.2 LTS (GNU/Linux 3.2.0-37-generic x86_64)
  prefs: []
  type: TYPE_NORMAL
- en: '* Documentation: https://help.ubuntu.com/'
  prefs: []
  type: TYPE_NORMAL
- en: System information as of Sun Feb 10 10:02:59 EST 2014
  prefs: []
  type: TYPE_NORMAL
- en: 'System load: 0.0 Processes: 94'
  prefs: []
  type: TYPE_NORMAL
- en: 'Usage of /: 7.2% of 35.20GB Users logged in: 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'Memory usage: 7% IP address for eth0: 192.168.2.128'
  prefs: []
  type: TYPE_NORMAL
- en: 'Swap usage: 0%'
  prefs: []
  type: TYPE_NORMAL
- en: Graph this data and manage this system at https://landscape.canonical.com/
  prefs: []
  type: TYPE_NORMAL
- en: '**90** Chapter 4'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 61](index-125_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 62](index-125_2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Last login: Sun Feb 10 09:59:57 2014'
  prefs: []
  type: TYPE_NORMAL
- en: '/usr/bin/xauth: file /home/serverdemo/.Xauthority does not exist'
  prefs: []
  type: TYPE_NORMAL
- en: serverdemo@serverdemo:~$ **sudo sosetup**
  prefs: []
  type: TYPE_NORMAL
- en: '[sudo] password for serverdemo: ***********'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 4-9: Connecting to the SO server and configuring X forwarding*'
  prefs: []
  type: TYPE_NORMAL
- en: When you run **sudo sosetup**, you will see a screen appear on your local
  prefs: []
  type: TYPE_NORMAL
- en: workstation, like the one shown in Figure 4-13\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4-13: Preparing to run SO Setup*'
  prefs: []
  type: TYPE_NORMAL
- en: Now configure this SO server in the same manner as when configur-
  prefs: []
  type: TYPE_NORMAL
- en: ing the SO server built on the *.iso* file earlier in this chapter, i[n “Configuring](#p112)
  prefs: []
  type: TYPE_NORMAL
- en: '[Your SO Server” on page 78](#p112). Once you’ve made your choices, the setup
    wizard will summarize them and ask whether you want to proceed with'
  prefs: []
  type: TYPE_NORMAL
- en: the changes, as shown in Figure 4-14\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4-14: SO summary before proceeding with SO server changes*'
  prefs: []
  type: TYPE_NORMAL
- en: After you click **Yes, proceed with the changes!** , the setup wizard will
  prefs: []
  type: TYPE_NORMAL
- en: complete installation.
  prefs: []
  type: TYPE_NORMAL
- en: As discussed i[n “Configuring Your SO Server” on page 78, t](#p112)o confirm
    the installation was successful, visit the web page hosted on the server and
  prefs: []
  type: TYPE_NORMAL
- en: access a web-enabled NSM application like Snorby.
  prefs: []
  type: TYPE_NORMAL
- en: With your server active, it’s time to build a sensor.
  prefs: []
  type: TYPE_NORMAL
- en: Distributed Deployment **91**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 63](index-126_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '**building an So Sensor using PPas**'
  prefs: []
  type: TYPE_NORMAL
- en: With the server running, we can turn to building an SO sensor using PPAs.
  prefs: []
  type: TYPE_NORMAL
- en: This sensor will cooperate with the server we just built. We’ll continue the
  prefs: []
  type: TYPE_NORMAL
- en: theme of using an Ubuntu server distribution as our operating system, and
  prefs: []
  type: TYPE_NORMAL
- en: add SO components using PPAs.
  prefs: []
  type: TYPE_NORMAL
- en: '***Instal ing Ubuntu Server as the SO Sensor Operating System***'
  prefs: []
  type: TYPE_NORMAL
- en: Begin the Ubuntu server installation process by booting the Ubuntu Server
  prefs: []
  type: TYPE_NORMAL
- en: LTS *.iso* file on the hardware chosen to run the SO sensor. The installation
  prefs: []
  type: TYPE_NORMAL
- en: wizard will prompt you to make a number of choices. Make the following
  prefs: []
  type: TYPE_NORMAL
- en: 'selections, adjusted as appropriate for your environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '1\. Language: **English**'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. **Install Ubuntu Server**
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Select a language: **English**'
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Select your location: **United States**'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Configure the keyboard:'
  prefs: []
  type: TYPE_NORMAL
- en: • Detect keyboard layout? **No**
  prefs: []
  type: TYPE_NORMAL
- en: • **English (US)**
  prefs: []
  type: TYPE_NORMAL
- en: '• Keyboard layout: **English (US)**'
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Configure the network. Hostname: **sensordemo**'
  prefs: []
  type: TYPE_NORMAL
- en: When prompted to choose a primary network interface (as in Fig-
  prefs: []
  type: TYPE_NORMAL
- en: ure 4-15), you must tell the setup wizard which NIC to use for management.
  prefs: []
  type: TYPE_NORMAL
- en: In Figure 4-15, I select eth0 for management as the primary network inter-
  prefs: []
  type: TYPE_NORMAL
- en: face. The setup wizard should automatically look for an IP address from a
  prefs: []
  type: TYPE_NORMAL
- en: DHCP server for eth0\. (We’ll set a static IP when we run the SO setup script.)
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4-15: Selecting the primary network interface*'
  prefs: []
  type: TYPE_NORMAL
- en: Now follow these steps to continue installing the operating system.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve entered values like usernames and passwords for demonstration only.
  prefs: []
  type: TYPE_NORMAL
- en: Choose values that meet your needs in production.
  prefs: []
  type: TYPE_NORMAL
- en: '**92** Chapter 4'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 64](index-127_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '1\. Set up users and passwords:'
  prefs: []
  type: TYPE_NORMAL
- en: '• Full name for the new user: **sensordemo**'
  prefs: []
  type: TYPE_NORMAL
- en: '• Username for your account: **sensordemo**'
  prefs: []
  type: TYPE_NORMAL
- en: '• Choose a password for the new user: **<enter password>**'
  prefs: []
  type: TYPE_NORMAL
- en: '• Reenter password to verify: **<enter password>**'
  prefs: []
  type: TYPE_NORMAL
- en: • Encrypt your home directory? **No**
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Configure the clock. Is this time zone correct? **Yes**
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Partition disks:'
  prefs: []
  type: TYPE_NORMAL
- en: '• Partitioning method: **Guided – use entire disk and set up LVM**'
  prefs: []
  type: TYPE_NORMAL
- en: '• Select disk to partition: **<choose your disk>**'
  prefs: []
  type: TYPE_NORMAL
- en: • Write the changes to disks and configure LVM? **Yes**
  prefs: []
  type: TYPE_NORMAL
- en: '• Amount of volume group to use for guided partitioning: **<accept**'
  prefs: []
  type: TYPE_NORMAL
- en: '**default>, Continue**'
  prefs: []
  type: TYPE_NORMAL
- en: • Write the changes to disks? **Yes**
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Configure the package manager. HTTP proxy information (blank for
  prefs: []
  type: TYPE_NORMAL
- en: 'none): **<blank>, Continue**'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Configure tasksel. How do you want to manage upgrades on this sys-
  prefs: []
  type: TYPE_NORMAL
- en: tem? **No automatic updates.**
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Software select ion. Choose software to install: **<click spacebar on**'
  prefs: []
  type: TYPE_NORMAL
- en: '**OpenSSH server>, Continue**'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Install the GRUB boot loader on a hard disk. Install the GRUB boot
  prefs: []
  type: TYPE_NORMAL
- en: loader to the master boot record? **Yes**
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Finish the installation. **Continue**
  prefs: []
  type: TYPE_NORMAL
- en: When the installation is complete, the system will reboot.
  prefs: []
  type: TYPE_NORMAL
- en: Upon log in, you may see the IP address assigned via DHCP, along with
  prefs: []
  type: TYPE_NORMAL
- en: various messages. Note the IP address if it’s displayed. If the system is under
  prefs: []
  type: TYPE_NORMAL
- en: load, you may not see the system information screen that reports an IP
  prefs: []
  type: TYPE_NORMAL
- en: address. To get the IP address of the management NIC, run **ifconfig eth0**
  prefs: []
  type: TYPE_NORMAL
- en: at the command prompt, as shown in Figure 4-16\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4-16: Running ifconfig eth0 to learn the management IP address*'
  prefs: []
  type: TYPE_NORMAL
- en: Distributed Deployment **93**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now it’s time to update the sensor software. Connect to the server with OpenSSH
    and enter this command:'
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo apt-get update && sudo apt-get dist-upgrade**
  prefs: []
  type: TYPE_NORMAL
- en: Type **Y** to continue when prompted, and then press enter. The sensor
  prefs: []
  type: TYPE_NORMAL
- en: should download and install updates. When it’s finished, enter the **sudo**
  prefs: []
  type: TYPE_NORMAL
- en: '**reboot** command to restart the server and complete the process.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Configuring the System as a Sensor***'
  prefs: []
  type: TYPE_NORMAL
- en: Our next task is to configure the SO sensor. First, enter the following com-
  prefs: []
  type: TYPE_NORMAL
- en: mand to tell MySQL not to prompt for a root password during installation.
  prefs: []
  type: TYPE_NORMAL
- en: $ **echo "debconf debconf/frontend select noninteractive" | sudo debconf-set-selections**
    Now install the python-software-properties package.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo apt-get -y install python-software-properties**
  prefs: []
  type: TYPE_NORMAL
- en: Next, add the securityonion/stable PPA to the list of repositories recog-
  prefs: []
  type: TYPE_NORMAL
- en: nized by this Ubuntu system, as shown in Listing 4-10\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo add-apt-repository -y ppa:securityonion/stable**
  prefs: []
  type: TYPE_NORMAL
- en: 'gpg: keyring `/tmp/tmpBByK4H/secring.gpg'' created'
  prefs: []
  type: TYPE_NORMAL
- en: 'gpg: keyring `/tmp/tmpBByK4H/pubring.gpg'' created'
  prefs: []
  type: TYPE_NORMAL
- en: 'gpg: requesting key 23F386C7 from hkp server keyserver.ubuntu.com'
  prefs: []
  type: TYPE_NORMAL
- en: 'gpg: /tmp/tmpBByK4H/trustdb.gpg: trustdb created'
  prefs: []
  type: TYPE_NORMAL
- en: 'gpg: key 23F386C7: public key "Launchpad PPA for Security Onion" imported'
  prefs: []
  type: TYPE_NORMAL
- en: 'gpg: Total number processed: 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'gpg: imported: 1 (RSA: 1)'
  prefs: []
  type: TYPE_NORMAL
- en: OK
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 4-10: Adding the securityonion/stable PPA to the list of repositories*'
  prefs: []
  type: TYPE_NORMAL
- en: Update the package listing with the following command.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo apt-get update**
  prefs: []
  type: TYPE_NORMAL
- en: Install the following packages.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo apt-get install securityonion-sensor securityonion-elsa securityonion-elsa-extras**
    When asked whether you want to continue, answer **Y** and press enter.
  prefs: []
  type: TYPE_NORMAL
- en: '**94** Chapter 4'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 65](index-129_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '***Running the Setup Wizard***'
  prefs: []
  type: TYPE_NORMAL
- en: In order to run the setup wizard we need to use OpenSSH and X forward-
  prefs: []
  type: TYPE_NORMAL
- en: ing. Do the following, but use the username and IP address appropriate for
  prefs: []
  type: TYPE_NORMAL
- en: your environment. In Listing 4-11, I chose sensordemo as the username, and
  prefs: []
  type: TYPE_NORMAL
- en: the IP address assigned via DHCP was 192.168.2.147\.
  prefs: []
  type: TYPE_NORMAL
- en: richard@ubuntu:~$ **ssh -X sensordemo@192.168.2.147**
  prefs: []
  type: TYPE_NORMAL
- en: The authenticity of host '192.168.2.147 (192.168.2.147)' can't be established.
  prefs: []
  type: TYPE_NORMAL
- en: ECDSA key fingerprint is a5:a9:08:16:b5:d2:3c:ce:59:f7:08:91:a0:04:0b:47\.
  prefs: []
  type: TYPE_NORMAL
- en: Are you sure you want to continue connecting (yes/no)? **yes**
  prefs: []
  type: TYPE_NORMAL
- en: 'Warning: Permanently added ''192.168.2.147'' (ECDSA) to the list of known hosts.'
  prefs: []
  type: TYPE_NORMAL
- en: 'sensordemo@192.168.2.147''s password: ***********'
  prefs: []
  type: TYPE_NORMAL
- en: Welcome to Ubuntu 12.04.2 LTS (GNU/Linux 3.2.0-37-generic x86_64)
  prefs: []
  type: TYPE_NORMAL
- en: '* Documentation: https://help.ubuntu.com/'
  prefs: []
  type: TYPE_NORMAL
- en: System information as of Sun Feb 10 13:06:46 EST 2013
  prefs: []
  type: TYPE_NORMAL
- en: 'System load: 0.11 Processes: 82'
  prefs: []
  type: TYPE_NORMAL
- en: 'Usage of /: 5.3% of 35.20GB Users logged in: 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'Memory usage: 1% IP address for eth0: 192.168.2.147'
  prefs: []
  type: TYPE_NORMAL
- en: 'Swap usage: 0%'
  prefs: []
  type: TYPE_NORMAL
- en: Graph this data and manage this system at https://landscape.canonical.com/
  prefs: []
  type: TYPE_NORMAL
- en: 'Last login: Sun Feb 10 13:03:59 2013'
  prefs: []
  type: TYPE_NORMAL
- en: '/usr/bin/xauth: file /home/sensordemo/.Xauthority does not exist'
  prefs: []
  type: TYPE_NORMAL
- en: sensordemo@sensordemo:~$ **sudo sosetup**
  prefs: []
  type: TYPE_NORMAL
- en: '[sudo] password for sensordemo: **********'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 4-11: Connecting to the SO sensor and configuring X forwarding*'
  prefs: []
  type: TYPE_NORMAL
- en: When you run this command, you will see a screen like the one shown
  prefs: []
  type: TYPE_NORMAL
- en: in Figure 4-17\. You will need to configure network interfaces because this
  prefs: []
  type: TYPE_NORMAL
- en: platform is a sensor.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4-17: Prompt to configure network interfaces*'
  prefs: []
  type: TYPE_NORMAL
- en: Distributed Deployment **95**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 66](index-130_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 67](index-130_2.png)'
  prefs: []
  type: TYPE_IMG
- en: Remember to use the IP address, username, and password of the SO
  prefs: []
  type: TYPE_NORMAL
- en: server from the PPAs. The setup wizard will summarize your configuration
  prefs: []
  type: TYPE_NORMAL
- en: choices and ask whether you wish to proceed with the changes, as shown in
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4-18\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4-18: SO summary before proceeding with changes to the network interface*'
  prefs: []
  type: TYPE_NORMAL
- en: After the system reboots, connect to the SO sensor again via
  prefs: []
  type: TYPE_NORMAL
- en: OpenSSH and enable X forwarding. Rerun the setup wizard, and then
  prefs: []
  type: TYPE_NORMAL
- en: choose **Advanced Setup**4**Sensor**. Enter the IP or hostname of the SO
  prefs: []
  type: TYPE_NORMAL
- en: server, followed by the username that can connect via OpenSSH and run
  prefs: []
  type: TYPE_NORMAL
- en: sudo. Choose the appropriate NIC to monitor, enable ELSA, update the
  prefs: []
  type: TYPE_NORMAL
- en: ELSA server, and then review the summarization of changes, which will
  prefs: []
  type: TYPE_NORMAL
- en: look similar to Figure 4-19\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4-19: SO summary before proceeding with sensor changes*'
  prefs: []
  type: TYPE_NORMAL
- en: '**96** Chapter 4'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: You will be prompted to continue connecting via OpenSSH when the
  prefs: []
  type: TYPE_NORMAL
- en: authenticity of the SO server’s ECDSA key cannot be verified. You will also
  prefs: []
  type: TYPE_NORMAL
- en: need to log in to the SO server, and then enter the sudo password. Once
  prefs: []
  type: TYPE_NORMAL
- en: you’ve finished, the setup wizard will report that it is complete. After the
  prefs: []
  type: TYPE_NORMAL
- en: GUI disappears, run the status script to see if the NSM applications are
  prefs: []
  type: TYPE_NORMAL
- en: running, as shown in Listing 4-12\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo service nsm status**
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: HIDS'
  prefs: []
  type: TYPE_NORMAL
- en: '* ossec_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: Bro'
  prefs: []
  type: TYPE_NORMAL
- en: Name Type Host Status Pid Peers Started
  prefs: []
  type: TYPE_NORMAL
- en: manager manager 192.168.2.131 running 3173 2 10 Feb 18:18:27
  prefs: []
  type: TYPE_NORMAL
- en: proxy proxy 192.168.2.131 running 3228 2 10 Feb 18:18:29
  prefs: []
  type: TYPE_NORMAL
- en: sensordemo-eth1-1 worker 192.168.2.131 running 3275 2 10 Feb 18:18:32
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: sensordemo-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* netsniff-ng (full packet data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* pcap_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* snort_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* suricata (alert data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* barnyard2 (spooler, unified2 format) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* prads (sessions/assets) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* sancp_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* pads_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* argus [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* http_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 4-12: Checking NSM service status*'
  prefs: []
  type: TYPE_NORMAL
- en: Also check for the establishment of the autossh tunnel as shown in
  prefs: []
  type: TYPE_NORMAL
- en: Listing 4-13\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **ps aux | grep autoss[h]**
  prefs: []
  type: TYPE_NORMAL
- en: root 3046 0.0 0.0 4308 320 ? Ss 18:18 0:00 /usr/lib/
  prefs: []
  type: TYPE_NORMAL
- en: autossh/autossh -M 0 -q -N -o ServerAliveInterval 60 -o ServerAliveCountMax
  prefs: []
  type: TYPE_NORMAL
- en: 3 -i /root/.ssh/securityonion -L 3306:127.0.0.1:3306 -R 50000:localhost:50000
  prefs: []
  type: TYPE_NORMAL
- en: -R 50001:localhost:9306 serverdemo@192.168.2.128
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 4-13: Looking for autossh processes*'
  prefs: []
  type: TYPE_NORMAL
- en: These results (with OK in every field) are all good signs. If you get differ-
  prefs: []
  type: TYPE_NORMAL
- en: ent results, try rerunning the setup wizard.
  prefs: []
  type: TYPE_NORMAL
- en: To verify that everything is working as expected, access the web server
  prefs: []
  type: TYPE_NORMAL
- en: running on your new SO server, and then run Snorby and look for events
  prefs: []
  type: TYPE_NORMAL
- en: captured by the Suricata IDS engine. If you see events, congratulations—
  prefs: []
  type: TYPE_NORMAL
- en: you’ve built a distributed NSM system using Ubuntu Linux PPAs!
  prefs: []
  type: TYPE_NORMAL
- en: Distributed Deployment **97**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**conclusion**'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you took a step beyond the normal stand-alone SO model
  prefs: []
  type: TYPE_NORMAL
- en: and entered the world of distributed NSM operations. We looked at two
  prefs: []
  type: TYPE_NORMAL
- en: 'possible ways to deploy server-plus-sensor systems:'
  prefs: []
  type: TYPE_NORMAL
- en: • Using the *.iso* images provided by the SO project to build an SO server,
  prefs: []
  type: TYPE_NORMAL
- en: and then using the same *.iso* file to build an SO sensor.
  prefs: []
  type: TYPE_NORMAL
- en: • Using a standard *.iso* image from the Ubuntu Server distribution to
  prefs: []
  type: TYPE_NORMAL
- en: replace the SO project *.iso* file. We used SO project PPAs to build an
  prefs: []
  type: TYPE_NORMAL
- en: SO server and an SO sensor.
  prefs: []
  type: TYPE_NORMAL
- en: Using each approach—an *.iso* file from the SO project or a “stock” *.iso*
  prefs: []
  type: TYPE_NORMAL
- en: from the Ubuntu developers—we built a distributed NSM setup.
  prefs: []
  type: TYPE_NORMAL
- en: In Chapter 5, we’ll take a brief look at a variety of SO housekeeping
  prefs: []
  type: TYPE_NORMAL
- en: issues, such as keeping platforms up-to-date, limiting network access for
  prefs: []
  type: TYPE_NORMAL
- en: security purposes, and managing platform storage.
  prefs: []
  type: TYPE_NORMAL
- en: '**98** Chapter 4'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**5**'
  prefs: []
  type: TYPE_NORMAL
- en: '**S o P l aT f o r M h o u S e k e e P i N g**'
  prefs: []
  type: TYPE_NORMAL
- en: In Chapters 3 and 4, we built stand-alone,
  prefs: []
  type: TYPE_NORMAL
- en: server, and sensor SO platforms. All of
  prefs: []
  type: TYPE_NORMAL
- en: these platforms are Linux systems that
  prefs: []
  type: TYPE_NORMAL
- en: require a certain amount of care and house-
  prefs: []
  type: TYPE_NORMAL
- en: keeping. This chapter explains key tasks common to
  prefs: []
  type: TYPE_NORMAL
- en: all three systems. These administrative duties include
  prefs: []
  type: TYPE_NORMAL
- en: keeping software up-to-date, limiting network access to promote security,
  prefs: []
  type: TYPE_NORMAL
- en: and managing system storage. By following the recommendations in this
  prefs: []
  type: TYPE_NORMAL
- en: chapter, you’ll keep your SO platforms running smoothly while providing
  prefs: []
  type: TYPE_NORMAL
- en: vital data to NSM analysts.
  prefs: []
  type: TYPE_NORMAL
- en: '**keeping So up-to-date**'
  prefs: []
  type: TYPE_NORMAL
- en: All NSM platforms run code that may need to be updated periodically,
  prefs: []
  type: TYPE_NORMAL
- en: and SO is no different. If you don’t periodically update the operating sys-
  prefs: []
  type: TYPE_NORMAL
- en: tem and various applications, you could find yourself running code with
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 68](index-134_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 69](index-134_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: vulnerabilities. Thankfully, SO is not difficult to update. The easiest path
    is
  prefs: []
  type: TYPE_NORMAL
- en: to use the GUI, but the SO team recommends updating from the command
  prefs: []
  type: TYPE_NORMAL
- en: line because that approach provides a little more control over the update
  prefs: []
  type: TYPE_NORMAL
- en: process. We’ll start with the simplest method, and then look at using the
  prefs: []
  type: TYPE_NORMAL
- en: recommended one.
  prefs: []
  type: TYPE_NORMAL
- en: '***Updating via the GUI***'
  prefs: []
  type: TYPE_NORMAL
- en: To update via the GUI, log in to the SO console. You may see a notice like
  prefs: []
  type: TYPE_NORMAL
- en: the one shown in Figure 5-1, informing you that updates are available.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 5-1: SO informs you when updates are available.*'
  prefs: []
  type: TYPE_NORMAL
- en: Click the exclamation point icon to open a menu with update options,
  prefs: []
  type: TYPE_NORMAL
- en: and select **Show Updates**. You will likely see both important and recom-
  prefs: []
  type: TYPE_NORMAL
- en: mended updates, as shown in Figure 5-2\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 5-2: Important security updates and recommended updates are available.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**100** Chapter 5'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: I suggest installing all updates. The exception is if the SO project has encountered
    problems with certain updates, in which case it may suggest
  prefs: []
  type: TYPE_NORMAL
- en: additional procedures to follow or certain updates to avoid. If there are warn-
  prefs: []
  type: TYPE_NORMAL
- en: ings, they will be posted on the SO website at *http://securityonion.blogspot.com/*.
  prefs: []
  type: TYPE_NORMAL
- en: To continue, click **Install Updates**. When finished, the Update Manager
  prefs: []
  type: TYPE_NORMAL
- en: will report that the software is up-to-date, and it may require a system reboot.
  prefs: []
  type: TYPE_NORMAL
- en: Follow any additional instructions.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, updates via the GUI are easy. However, you can find
  prefs: []
  type: TYPE_NORMAL
- en: yourself accepting updates that might not be compatible with the recom-
  prefs: []
  type: TYPE_NORMAL
- en: mendations of the SO project. For example, MySQL database updates can
  prefs: []
  type: TYPE_NORMAL
- en: 'be tricky. For this reason, I suggest following the SO project’s suggestion:'
  prefs: []
  type: TYPE_NORMAL
- en: update via the command line.
  prefs: []
  type: TYPE_NORMAL
- en: '***Updating via the Command Line***'
  prefs: []
  type: TYPE_NORMAL
- en: The SO project blog posts usually tell users to conduct updates via the com-
  prefs: []
  type: TYPE_NORMAL
- en: mand line, and provide specific syntax. To perform a generic update, open
  prefs: []
  type: TYPE_NORMAL
- en: 'a terminal on the desktop and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo apt-get update**
  prefs: []
  type: TYPE_NORMAL
- en: Now check for outdated software with the command shown in Listing 5-1\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo apt-get upgrade**
  prefs: []
  type: TYPE_NORMAL
- en: Reading package lists... Done
  prefs: []
  type: TYPE_NORMAL
- en: Building dependency tree
  prefs: []
  type: TYPE_NORMAL
- en: Reading state information... Done
  prefs: []
  type: TYPE_NORMAL
- en: 'The following packages will be upgraded:'
  prefs: []
  type: TYPE_NORMAL
- en: ecryptfs-utils fonts-opensymbol gstreamer0.10-plugins-good
  prefs: []
  type: TYPE_NORMAL
- en: gstreamer0.10-pulseaudio language-selector-common language-selector-gnome
  prefs: []
  type: TYPE_NORMAL
- en: libecryptfs0 libpciaccess0 libpq5
  prefs: []
  type: TYPE_NORMAL
- en: 9 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
  prefs: []
  type: TYPE_NORMAL
- en: Need to get 2,861 kB of archives.
  prefs: []
  type: TYPE_NORMAL
- en: After this operation, 114 kB disk space will be freed.
  prefs: []
  type: TYPE_NORMAL
- en: Do you want to continue [Y/n]?
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 5-1: Running sudo apt-get upgrade*'
  prefs: []
  type: TYPE_NORMAL
- en: Remembering to heed any warnings about updates from the SO team,
  prefs: []
  type: TYPE_NORMAL
- en: decide if you want to continue, and respond with yes or no. If you answer **Y**,
  prefs: []
  type: TYPE_NORMAL
- en: Apt will download and install updates.
  prefs: []
  type: TYPE_NORMAL
- en: Reboot to make sure that your SO applications are working correctly.
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  prefs: []
  type: TYPE_NORMAL
- en: '*See the appendix for more guidance on updating SO.*'
  prefs: []
  type: TYPE_NORMAL
- en: SO Platform Housekeeping **101**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**limiting access to So**'
  prefs: []
  type: TYPE_NORMAL
- en: By default, SO ships with the Linux iptables firewall enabled. A local fire-
  prefs: []
  type: TYPE_NORMAL
- en: wall like iptables helps enforce a network security policy appropriate for a
  prefs: []
  type: TYPE_NORMAL
- en: server. To see the default access control settings, run the Uncomplicated
  prefs: []
  type: TYPE_NORMAL
- en: Firewall (UFW) configuration program with **sudo ufw status**. (I added the
  prefs: []
  type: TYPE_NORMAL
- en: rightmost column to Listing 5-2 manually to show the services associated
  prefs: []
  type: TYPE_NORMAL
- en: with each open port.)
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo ufw status**
  prefs: []
  type: TYPE_NORMAL
- en: '[sudo] password for sademo: **********'
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: active'
  prefs: []
  type: TYPE_NORMAL
- en: To Action From
  prefs: []
  type: TYPE_NORMAL
- en: -- ------ ----
  prefs: []
  type: TYPE_NORMAL
- en: 22/tcp ALLOW Anywhere OpenSSH
  prefs: []
  type: TYPE_NORMAL
- en: 514 ALLOW Anywhere Syslog
  prefs: []
  type: TYPE_NORMAL
- en: 1514/udp ALLOW Anywhere OSSEC
  prefs: []
  type: TYPE_NORMAL
- en: 443/tcp ALLOW Anywhere Apache
  prefs: []
  type: TYPE_NORMAL
- en: 444/tcp ALLOW Anywhere Snorby
  prefs: []
  type: TYPE_NORMAL
- en: 7734/tcp ALLOW Anywhere Sguil client to server
  prefs: []
  type: TYPE_NORMAL
- en: 7736/tcp ALLOW Anywhere Sguil agents to server
  prefs: []
  type: TYPE_NORMAL
- en: 3154/tcp ALLOW Anywhere ELSA
  prefs: []
  type: TYPE_NORMAL
- en: 22/tcp ALLOW Anywhere (v6) OpenSSH
  prefs: []
  type: TYPE_NORMAL
- en: 514 ALLOW Anywhere (v6) Syslog
  prefs: []
  type: TYPE_NORMAL
- en: 1514/udp ALLOW Anywhere (v6) OSSEC
  prefs: []
  type: TYPE_NORMAL
- en: 443/tcp ALLOW Anywhere (v6) Apache
  prefs: []
  type: TYPE_NORMAL
- en: 444/tcp ALLOW Anywhere (v6) Snorby
  prefs: []
  type: TYPE_NORMAL
- en: 7734/tcp ALLOW Anywhere (v6) Sguil client to server
  prefs: []
  type: TYPE_NORMAL
- en: 7736/tcp ALLOW Anywhere (v6) Sguil agents to server
  prefs: []
  type: TYPE_NORMAL
- en: 3154/tcp ALLOW Anywhere (v6) ELSA
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 5-2: Firewal policy*'
  prefs: []
  type: TYPE_NORMAL
- en: The firewall policy listed by this command shows all of the ALLOW state-
  prefs: []
  type: TYPE_NORMAL
- en: ments permitting network traffic to designated ports. The firewall policy
  prefs: []
  type: TYPE_NORMAL
- en: implicitly denies inbound access to any other ports. That means that if, for
  prefs: []
  type: TYPE_NORMAL
- en: example, you need to modify the configuration to start your Apache web
  prefs: []
  type: TYPE_NORMAL
- en: server on another port, you will need to change the iptables firewall access
  prefs: []
  type: TYPE_NORMAL
- en: control lists accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: In the default configuration, Apache listens on port 443 TCP, and
  prefs: []
  type: TYPE_NORMAL
- en: remote systems are allowed to connect to port 443 TCP per the firewall
  prefs: []
  type: TYPE_NORMAL
- en: policy. Apache listening on port 4443, however, would be unreachable
  prefs: []
  type: TYPE_NORMAL
- en: unless an administrator changed the firewall policy.
  prefs: []
  type: TYPE_NORMAL
- en: Rather than expose more ports to remote access, some administrators
  prefs: []
  type: TYPE_NORMAL
- en: choose to limit the number of services that listen on public interfaces. Instead
  prefs: []
  type: TYPE_NORMAL
- en: of letting applications listen on the public network interface, administrators
  prefs: []
  type: TYPE_NORMAL
- en: “bind” them to nonpublic interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: One way to use nonpublic interfaces for tighter security is to configure
  prefs: []
  type: TYPE_NORMAL
- en: an application to listen only on localhost (127.0.0.1). When an application
  prefs: []
  type: TYPE_NORMAL
- en: '**102** Chapter 5'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: is listening only on localhost, it can’t be reached remotely; it can be reached
    only via the local system (hence the localhost, nonpublic IP address).
  prefs: []
  type: TYPE_NORMAL
- en: However, you can “simulate” local access by cleverly configuring OpenSSH.
  prefs: []
  type: TYPE_NORMAL
- en: You can set up an SSH proxy from an authorized remote client to the sen-
  prefs: []
  type: TYPE_NORMAL
- en: sor running the application listening on localhost.
  prefs: []
  type: TYPE_NORMAL
- en: '***Connecting via a SOCKS Proxy***'
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate accessing an application listening only on localhost, we’ll
  prefs: []
  type: TYPE_NORMAL
- en: work with the Xplico application. You may remember seeing a warning
  prefs: []
  type: TYPE_NORMAL
- en: on the SO welcome page that says port 9876 TCP for Xplico isn’t available
  prefs: []
  type: TYPE_NORMAL
- en: remotely. By default, if you try to connect from a remote computer to port
  prefs: []
  type: TYPE_NORMAL
- en: 9876 TCP on an SO system, iptables will deny the connection. Port 9876 TCP
  prefs: []
  type: TYPE_NORMAL
- en: is available locally. If you open a web browser on the SO platform itself and
  prefs: []
  type: TYPE_NORMAL
- en: point it to port 9876 TCP, Xplico is listening.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to access Xplico from your desktop, though, you need
  prefs: []
  type: TYPE_NORMAL
- en: to simulate local access. You can connect to that port if you use SSH as a
  prefs: []
  type: TYPE_NORMAL
- en: SOCKS proxy (a protocol designed to allow this sort of “tunnel” that simu-
  prefs: []
  type: TYPE_NORMAL
- en: lates local access).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a SOCKS proxy using SSH will allow you to remotely access
  prefs: []
  type: TYPE_NORMAL
- en: an application listening only on localhost. You can achieve this goal using
  prefs: []
  type: TYPE_NORMAL
- en: either a Microsoft Windows desktop or a Linux desktop.
  prefs: []
  type: TYPE_NORMAL
- en: If your remote client runs Microsoft Windows, you can use the free PuTTY
  prefs: []
  type: TYPE_NORMAL
- en: ( *http://www.chiark.greenend.org.uk/~sgtatham/putty/*) SSH client. PuTTY is
  prefs: []
  type: TYPE_NORMAL
- en: 'available as a single *.exe* binary that doesn’t require any sort of installation
    procedure. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Run the *putty.exe* program and navigate to **Connection**4**SSH**4**Tunnels**.
  prefs: []
  type: TYPE_NORMAL
- en: In the Source port field, enter a TCP port that will listen on your local
  prefs: []
  type: TYPE_NORMAL
- en: system. (In this example, I use 8080 TCP).
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Select the **Dynamic** and **Auto** radio buttons, and then click **Add**.
    Your setup should look like Figure 5-3\.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Return to PuTTY’s Session section and enter the hostname or IP address
  prefs: []
  type: TYPE_NORMAL
- en: and port of your remote SO stand-alone system, and then click **Open**.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Log in to the SO system with the username and password you chose
  prefs: []
  type: TYPE_NORMAL
- en: during setup.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Open your web browser and choose the option for configuring network
  prefs: []
  type: TYPE_NORMAL
- en: settings. For example, if you’re using Firefox, choose **Options**4**Network**4
  prefs: []
  type: TYPE_NORMAL
- en: '**Settings**, and then configure the connection settings for Manual Proxy'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration with SOCKS Host set to 127.0.0.1 and Port set to the port
  prefs: []
  type: TYPE_NORMAL
- en: you configured in PuTTY. Figure 5-4 shows my settings. Click **OK** to
  prefs: []
  type: TYPE_NORMAL
- en: continue.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Point Firefox to *https://127.0.0.1:9876*. Your browser should redirect
    to
  prefs: []
  type: TYPE_NORMAL
- en: '*https://127.0.0.1:9876/users/login* and warn that Xplico is not running.'
  prefs: []
  type: TYPE_NORMAL
- en: This is okay; you’ve accessed the web server at port 9876 TCP, which
  prefs: []
  type: TYPE_NORMAL
- en: was previously not reachable remotely.
  prefs: []
  type: TYPE_NORMAL
- en: SO Platform Housekeeping **103**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 70](index-138_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 71](index-138_2.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-3: Configuring PuTTY for SSH port forwarding*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 5-4: Configuring proxy set ings in Firefox*'
  prefs: []
  type: TYPE_NORMAL
- en: '**104** Chapter 5'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: If your remote client is a Linux system, you can achieve the same goal using
    the integrated SSH client. On your Linux desktop, run the following
  prefs: []
  type: TYPE_NORMAL
- en: 'command:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ssh -L 9876:localhost:9876 *username*****@ *SO server IP***'
  prefs: []
  type: TYPE_NORMAL
- en: With your tunnel established, follow steps 4 and 5 in the preceding pro-
  prefs: []
  type: TYPE_NORMAL
- en: cedure for configuring the Firefox web browser for a Windows remote client
  prefs: []
  type: TYPE_NORMAL
- en: and accessing the web server.
  prefs: []
  type: TYPE_NORMAL
- en: '***Changing the Firewall Policy***'
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t want to tunnel traffic to bypass the firewall, you could modify
  prefs: []
  type: TYPE_NORMAL
- en: the firewall rules. For example, the following command changes the ruleset
  prefs: []
  type: TYPE_NORMAL
- en: to permit remote access to port 9876 TCP.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo ufw allow 9876/tcp**
  prefs: []
  type: TYPE_NORMAL
- en: Rule added
  prefs: []
  type: TYPE_NORMAL
- en: Rule added (v6)
  prefs: []
  type: TYPE_NORMAL
- en: 'To disallow that port again, enter this:'
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo ufw deny 9876/tcp**
  prefs: []
  type: TYPE_NORMAL
- en: Rule updated
  prefs: []
  type: TYPE_NORMAL
- en: Rule updated (v6)
  prefs: []
  type: TYPE_NORMAL
- en: See the SO wiki for more information about configuring the firewall
  prefs: []
  type: TYPE_NORMAL
- en: ( *https://code.google.com/p/security-onion/wiki/Firewall*).
  prefs: []
  type: TYPE_NORMAL
- en: '**Managing So data Storage**'
  prefs: []
  type: TYPE_NORMAL
- en: As soon as you install and configure SO and cable its sniffing interface to
    a
  prefs: []
  type: TYPE_NORMAL
- en: live network, the NSM software begins collecting and interpreting traffic.
  prefs: []
  type: TYPE_NORMAL
- en: The SO sensors store a variety of NSM datatypes, but two directories are of
  prefs: []
  type: TYPE_NORMAL
- en: 'particular interest:'
  prefs: []
  type: TYPE_NORMAL
- en: • The */nsm* directory stores logs and full content data.
  prefs: []
  type: TYPE_NORMAL
- en: • The */var/lib/mysql* directory holds SO’s databases.
  prefs: []
  type: TYPE_NORMAL
- en: The */nsm* directory typically uses more drive space than */var/lib/mysql*.
  prefs: []
  type: TYPE_NORMAL
- en: SO saves full content data in the */nsm/sensor_data/<sensorname-interface>/*
  prefs: []
  type: TYPE_NORMAL
- en: '*dailylogs/YYYY-MM-DD* directories with filenames in *snort.log.<Unix timestamp>*
    format. Although the filenames have *snort* in the title, the content is in the
    familiar pcap format. Listing 5-3 shows full content data stored on a standalone
    demo SO platform in two directories.'
  prefs: []
  type: TYPE_NORMAL
- en: SO Platform Housekeeping **105**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: sademo@sademo:/nsm/sensor_data/sademo-eth1/dailylogs$ **ls -alR**
  prefs: []
  type: TYPE_NORMAL
- en: '.:'
  prefs: []
  type: TYPE_NORMAL
- en: total 16
  prefs: []
  type: TYPE_NORMAL
- en: drwxrwxr-x 4 sguil sguil 4096 Feb 16 12:28 .
  prefs: []
  type: TYPE_NORMAL
- en: drwxrwxr-x 7 sguil sguil 4096 Feb 10 11:12 ..
  prefs: []
  type: TYPE_NORMAL
- en: drwxrwxr-x 2 sguil sguil 4096 Feb 10 13:09 2014-02-10
  prefs: []
  type: TYPE_NORMAL
- en: drwxrwxr-x 2 sguil sguil 4096 Feb 16 20:15 2014-02-16
  prefs: []
  type: TYPE_NORMAL
- en: './2013-02-10:'
  prefs: []
  type: TYPE_NORMAL
- en: total 118060
  prefs: []
  type: TYPE_NORMAL
- en: drwxrwxr-x 2 sguil sguil 4096 Feb 10 13:09 .
  prefs: []
  type: TYPE_NORMAL
- en: drwxrwxr-x 4 sguil sguil 4096 Feb 16 12:28 ..
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 108390541 Feb 10 11:31 snort.log.1360494635
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 12485022 Feb 10 13:17 snort.log.1360501765
  prefs: []
  type: TYPE_NORMAL
- en: './2014-02-16:'
  prefs: []
  type: TYPE_NORMAL
- en: total 645312
  prefs: []
  type: TYPE_NORMAL
- en: drwxrwxr-x 2 sguil sguil 4096 Feb 16 20:15 .
  prefs: []
  type: TYPE_NORMAL
- en: drwxrwxr-x 4 sguil sguil 4096 Feb 16 12:28 ..
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 10637153 Feb 16 12:41 snort.log.1361017706
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 122264262 Feb 16 14:29 snort.log.1361019690
  prefs: []
  type: TYPE_NORMAL
- en: '*-- snip --*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 5-3: Directory contents for* /nsm/sensor_data/sademo-eth1/dailylogs'
  prefs: []
  type: TYPE_NORMAL
- en: The date on the directory listing is the time the file was last modified.
  prefs: []
  type: TYPE_NORMAL
- en: The date in the *snort.log<Unix timestamp>* filename is the time the file was
    created, in Unix timestamp format. This format is expressed as the number
  prefs: []
  type: TYPE_NORMAL
- en: of seconds elapsed since January 1, 1970\.
  prefs: []
  type: TYPE_NORMAL
- en: You can translate the Unix timestamp into more familiar terms with the
  prefs: []
  type: TYPE_NORMAL
- en: date command. For example, running date against the file *snort.log.1360494635*,
    we learn that the trace was created about 21 minutes before the system stopped
  prefs: []
  type: TYPE_NORMAL
- en: writing to it. We know this because the timestamp on the file is Feb 10 11:31,
  prefs: []
  type: TYPE_NORMAL
- en: and the “translated” date from the filename is Feb 10 11:10:35\. We can see
  prefs: []
  type: TYPE_NORMAL
- en: that the file was opened at roughly 11:10, and it was last written to 21 minutes
  prefs: []
  type: TYPE_NORMAL
- en: later, at 11:31\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **date --date='@1360494635'**
  prefs: []
  type: TYPE_NORMAL
- en: Sun Feb 10 11:10:35 UTC 2013
  prefs: []
  type: TYPE_NORMAL
- en: '***Managing Sensor Storage***'
  prefs: []
  type: TYPE_NORMAL
- en: To manage sensor storage, SO scripts check the amount of available hard
  prefs: []
  type: TYPE_NORMAL
- en: drive space regularly. As the used space hits the 90 percent threshold, the
  prefs: []
  type: TYPE_NORMAL
- en: scripts remove old full content (pcap) files from the */nsm/ sensor_data/*
  prefs: []
  type: TYPE_NORMAL
- en: '*<sensorname-interface>/dailylogs* directories, old Bro logs from */nsm/bro/logs*,
    old Argus session data from */nsm/sensor_data/<sensorname-interface>/*'
  prefs: []
  type: TYPE_NORMAL
- en: '*dailylogs/argus*, and old Snort Unified2 alert files from */nsm/sensor_data/*'
  prefs: []
  type: TYPE_NORMAL
- en: '*<sensorname-interface>/snort-<instancenumber>* . Part III of this book covers
    these and other SO tools. For now, it’s important to know that these logs'
  prefs: []
  type: TYPE_NORMAL
- en: exist and how the system manages them.
  prefs: []
  type: TYPE_NORMAL
- en: '**106** Chapter 5'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: The system works by having the Linux cron command run the */usr/*
  prefs: []
  type: TYPE_NORMAL
- en: '*sbin/nsm_sensor_clean* script hourly, which calls the sensor_cleandisk() func-'
  prefs: []
  type: TYPE_NORMAL
- en: tion found in */usr/lib/nsmnow/lib-nsm-sensor-utils*. The sensor_cleandisk()
  prefs: []
  type: TYPE_NORMAL
- en: function in *lib-nsm-sensor-utils* contains the 90 percent value that triggers
  prefs: []
  type: TYPE_NORMAL
- en: deleting old logs. Although this daily check at 90 percent works well for
  prefs: []
  type: TYPE_NORMAL
- en: most users, you can change it to suit your needs if necessary. If you want
  prefs: []
  type: TYPE_NORMAL
- en: to change the 90 percent figure, edit it in the *lib-nsm-sensor-utils* file.
  prefs: []
  type: TYPE_NORMAL
- en: '***Checking Database Drive Usage***'
  prefs: []
  type: TYPE_NORMAL
- en: To check the size of SO’s databases in */var/lib/mysql*, use MySQL command
  prefs: []
  type: TYPE_NORMAL
- en: shown in Listing 5-4\. (Thanks to RolandoMySQLdba for posting this at
  prefs: []
  type: TYPE_NORMAL
- en: '*http://pastebin.com/YFqNaVi3/*.)'
  prefs: []
  type: TYPE_NORMAL
- en: $ **mysql -u root**
  prefs: []
  type: TYPE_NORMAL
- en: Welcome to the MySQL monitor. Commands end with ; or \g.
  prefs: []
  type: TYPE_NORMAL
- en: Your MySQL connection id is 386507
  prefs: []
  type: TYPE_NORMAL
- en: 'Server version: 5.5.29-0ubuntu0.12.04.1 (Ubuntu)'
  prefs: []
  type: TYPE_NORMAL
- en: Copyright (c) 2000, 2012, Oracle and/or its affiliates. All rights reserved.
  prefs: []
  type: TYPE_NORMAL
- en: Oracle is a registered trademark of Oracle Corporation and/or its
  prefs: []
  type: TYPE_NORMAL
- en: affiliates. Other names may be trademarks of their respective owners.
  prefs: []
  type: TYPE_NORMAL
- en: Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
  prefs: []
  type: TYPE_NORMAL
- en: mysql> **SELECT DBName,CONCAT(LPAD(FORMAT(SDSize/POWER(1024,pw),3),17,' '),'
    ',**
  prefs: []
  type: TYPE_NORMAL
- en: '**-> SUBSTR('' KMGTP'',pw+1,1),''B'') "Data Size",CONCAT(LPAD(**'
  prefs: []
  type: TYPE_NORMAL
- en: '**-> FORMAT(SXSize/POWER(1024,pw),3),17,'' ''),'' '',SUBSTR('' KMGTP'',pw+1,1),''B'')
    "Index Size",**'
  prefs: []
  type: TYPE_NORMAL
- en: '**-> CONCAT(LPAD(FORMAT(STSize/POWER(1024,pw),3),17,'' ''),'' '',**'
  prefs: []
  type: TYPE_NORMAL
- en: '**-> SUBSTR('' KMGTP'',pw+1,1),''B'') "Total Size" FROM**'
  prefs: []
  type: TYPE_NORMAL
- en: '**-> (SELECT IFNULL(DB,''All Databases'') DBName,SUM(DSize) SDSize,SUM(XSize)
    SXSize,**'
  prefs: []
  type: TYPE_NORMAL
- en: '**-> SUM(TSize) STSize FROM (SELECT table_schema DB,data_length DSize,**'
  prefs: []
  type: TYPE_NORMAL
- en: '**-> index_length XSize,data_length+index_length TSize FROM information_schema.tables**'
  prefs: []
  type: TYPE_NORMAL
- en: '**-> WHERE table_schema NOT IN (''mysql'',''information_schema'',''performance_schema''))
    AAA**'
  prefs: []
  type: TYPE_NORMAL
- en: '**-> GROUP BY DB WITH ROLLUP) AA,(SELECT 3 pw) BB ORDER BY (SDSize+SXSize);**'
  prefs: []
  type: TYPE_NORMAL
- en: +------------------+----------------------+----------------------+----------------------+
  prefs: []
  type: TYPE_NORMAL
- en: '| DBName | Data Size | Index Size | Total Size |'
  prefs: []
  type: TYPE_TB
- en: +------------------+----------------------+----------------------+----------------------+
  prefs: []
  type: TYPE_NORMAL
- en: '| elsa_web | 0.000 GB | 0.000 GB | 0.000 GB |'
  prefs: []
  type: TYPE_TB
- en: '| syslog | 0.014 GB | 0.007 GB | 0.021 GB |'
  prefs: []
  type: TYPE_TB
- en: '| snorby | 0.059 GB | 0.020 GB | 0.079 GB |'
  prefs: []
  type: TYPE_TB
- en: '| syslog_data | 1.625 GB | 0.050 GB | 1.675 GB |'
  prefs: []
  type: TYPE_TB
- en: '| securityonion_db | 3.384 GB | 0.377 GB | 3.761 GB |'
  prefs: []
  type: TYPE_TB
- en: '| All Databases | 5.082 GB | 0.454 GB | 5.536 GB |'
  prefs: []
  type: TYPE_TB
- en: +------------------+----------------------+----------------------+----------------------+
  prefs: []
  type: TYPE_NORMAL
- en: 6 rows in set (2.20 sec)
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 5-4: Displaying storage used by database tables*'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the databases in use occupy a total of 5.536GB.
  prefs: []
  type: TYPE_NORMAL
- en: The securityonion_db database used by Sguil and its components occupies
  prefs: []
  type: TYPE_NORMAL
- en: 3.761GB, and the syslog_data database used by ELSA occupies 1.675GB.
  prefs: []
  type: TYPE_NORMAL
- en: SO Platform Housekeeping **107**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***Managing the Sguil Database***'
  prefs: []
  type: TYPE_NORMAL
- en: SO also ships with a sguil-db-purge script to manage the Sguil database
  prefs: []
  type: TYPE_NORMAL
- en: securityonion_db. The configuration file */etc/nsm/securityonion.conf* contains
    a DAYSTOKEEP variable, as shown in Listing 5-5\.
  prefs: []
  type: TYPE_NORMAL
- en: ENGINE=snort
  prefs: []
  type: TYPE_NORMAL
- en: DAYSTOKEEP=365
  prefs: []
  type: TYPE_NORMAL
- en: ELSA=YES
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 5-5: DAYSTOKEEP variable in* /etc/nsm/securityonion .conf'
  prefs: []
  type: TYPE_NORMAL
- en: When SO runs sguil-db-purge, it removes data older than the default
  prefs: []
  type: TYPE_NORMAL
- en: 365 days from the securityonion_db database. You can edit the DAYSTOKEEP
  prefs: []
  type: TYPE_NORMAL
- en: variable if you begin to run out of hard drive space.
  prefs: []
  type: TYPE_NORMAL
- en: To manage the syslog_data database, ELSA offers a configuration vari-
  prefs: []
  type: TYPE_NORMAL
- en: able that controls how much disk space it will use. The file */etc/elsa_node.conf*
  prefs: []
  type: TYPE_NORMAL
- en: contains the entry shown in Listing 5-6\.
  prefs: []
  type: TYPE_NORMAL
- en: Size limit for logs + index size. Set this to be 90-95% of your total data disk
    space.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"log_size_limit" : 200000000000,'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 5-6: Size limit entry in* /etc/elsa_node .conf'
  prefs: []
  type: TYPE_NORMAL
- en: The log_size_limit variable is set according to a number of bytes, so the
  prefs: []
  type: TYPE_NORMAL
- en: default translates to roughly 187GB. Raise or lower this value to manage
  prefs: []
  type: TYPE_NORMAL
- en: ELSA database storage as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: '***Tracking Disk Usage***'
  prefs: []
  type: TYPE_NORMAL
- en: Although SO offers automatic ways to manage hard disk space, it isn’t a
  prefs: []
  type: TYPE_NORMAL
- en: completely deploy-and-forget appliance. Keep an eye on disk usage using
  prefs: []
  type: TYPE_NORMAL
- en: the df -h command and the more granular du -csh commands shown in
  prefs: []
  type: TYPE_NORMAL
- en: Listing 5-7\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo df -h**
  prefs: []
  type: TYPE_NORMAL
- en: Filesystem Size Used Avail Use% Mounted on
  prefs: []
  type: TYPE_NORMAL
- en: /dev/sda1 456G 96G 337G 23% /
  prefs: []
  type: TYPE_NORMAL
- en: udev 1.5G 4.0K 1.5G 1% /dev
  prefs: []
  type: TYPE_NORMAL
- en: tmpfs 603M 876K 602M 1% /run
  prefs: []
  type: TYPE_NORMAL
- en: none 5.0M 0 5.0M 0% /run/lock
  prefs: []
  type: TYPE_NORMAL
- en: none 1.5G 216K 1.5G 1% /run/shm
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo du -csh /nsm**
  prefs: []
  type: TYPE_NORMAL
- en: 86G /nsm
  prefs: []
  type: TYPE_NORMAL
- en: 86G total
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 5-7: Disk usage commands*'
  prefs: []
  type: TYPE_NORMAL
- en: '**108** Chapter 5'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, this sensor has plenty of space available on the hard disk (
    */dev/sda1*), with only 23 percent in use. The */nsm* directory occupies 86GB
  prefs: []
  type: TYPE_NORMAL
- en: of the 96GB taken up by the whole partition. The example of a database
  prefs: []
  type: TYPE_NORMAL
- en: size check earlier in this chapter showed that all of the databases occupied
  prefs: []
  type: TYPE_NORMAL
- en: 5.536GB. Windows users might be more familiar with graphical representa-
  prefs: []
  type: TYPE_NORMAL
- en: tions of hard disk usage. On Linux, it’s useful to become acquainted with
  prefs: []
  type: TYPE_NORMAL
- en: the sorts of percentages and listings produced by commands like df.
  prefs: []
  type: TYPE_NORMAL
- en: '**conclusion**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter explained a few core administrative chores: keeping software'
  prefs: []
  type: TYPE_NORMAL
- en: up-to-date, limiting network access to promote security, and managing
  prefs: []
  type: TYPE_NORMAL
- en: system storage. These are by no means the only skills required for system
  prefs: []
  type: TYPE_NORMAL
- en: administration, but thankfully, the SO project has made caring for NSM
  prefs: []
  type: TYPE_NORMAL
- en: platforms easy. With these fundamental skills, you can keep your SO sys-
  prefs: []
  type: TYPE_NORMAL
- en: tems running smartly with a minimum of effort.
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapters, we’ll look at the software and data you can
  prefs: []
  type: TYPE_NORMAL
- en: use to collect and interpret network data.
  prefs: []
  type: TYPE_NORMAL
- en: SO Platform Housekeeping **109**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part III**'
  prefs: []
  type: TYPE_NORMAL
- en: '**T o o l S**'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**6**'
  prefs: []
  type: TYPE_NORMAL
- en: '**c o M M a N D l i N e Pa c k e T**'
  prefs: []
  type: TYPE_NORMAL
- en: '**a N a ly S i S T o o l S**'
  prefs: []
  type: TYPE_NORMAL
- en: In Chapters 3 and 4 we installed the SO
  prefs: []
  type: TYPE_NORMAL
- en: software in several configurations, and
  prefs: []
  type: TYPE_NORMAL
- en: we discussed housekeeping functions in
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 5\. Now that you have this powerful
  prefs: []
  type: TYPE_NORMAL
- en: NSM platform collecting data, in this chapter I’ll
  prefs: []
  type: TYPE_NORMAL
- en: introduce the first set of command line tools used to
  prefs: []
  type: TYPE_NORMAL
- en: present information to analysts. Some of these tools will be running all
  prefs: []
  type: TYPE_NORMAL
- en: the time, while others will be invoked on demand. Each has its particular
  prefs: []
  type: TYPE_NORMAL
- en: strengths and weaknesses. I’ll discuss how I use key features, though I won’t
  prefs: []
  type: TYPE_NORMAL
- en: cover all tools in exhaustive detail here.
  prefs: []
  type: TYPE_NORMAL
- en: Because I’ve written this book for new analysts, my discussion of SO
  prefs: []
  type: TYPE_NORMAL
- en: tools in this part will concentrate on data presentation. In this chapter I
  prefs: []
  type: TYPE_NORMAL
- en: will look at data presentation tools that use a command line interface. In
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7 I’ll address data presentation tools that use a graphical inter-
  prefs: []
  type: TYPE_NORMAL
- en: face, and in Chapter 8 I’ll examine specialized forms of data presentation
  prefs: []
  type: TYPE_NORMAL
- en: tools—the NSM consoles. For now, let’s step back and understand how all
  prefs: []
  type: TYPE_NORMAL
- en: the NSM tools packaged with SO relate to one another.
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**So Tool categories**'
  prefs: []
  type: TYPE_NORMAL
- en: SO ships with a variety of tools, as listed on the SO wiki ( *http://code.google*
  prefs: []
  type: TYPE_NORMAL
- en: '*.com/p/security-onion/wiki/Tools*). Some tools present data to analysts, some'
  prefs: []
  type: TYPE_NORMAL
- en: collect data directly from the network or via messages from other comput-
  prefs: []
  type: TYPE_NORMAL
- en: ers, and a third category sits between the others as middleware, delivering
  prefs: []
  type: TYPE_NORMAL
- en: data or providing other essential capabilities. Let’s take a brief look at each
  prefs: []
  type: TYPE_NORMAL
- en: 'category of tools: data presentation, data collection, and data delivery.'
  prefs: []
  type: TYPE_NORMAL
- en: '***SO Data Presentation Tools***'
  prefs: []
  type: TYPE_NORMAL
- en: '*Data presentation tools* expose NSM information to analysts. Two sorts of'
  prefs: []
  type: TYPE_NORMAL
- en: data presentation tools for packet analysis are available in SO. One relies
    on
  prefs: []
  type: TYPE_NORMAL
- en: a command line interface, and the other offers analysts a graphical inter-
  prefs: []
  type: TYPE_NORMAL
- en: face. SO also provides NSM consoles for data presentation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Packet analysis tools**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Packet analysis tools* read network traffic from a live interface, or from
    a file containing traffic saved in pcap format. Analysts use packet analysis tools
    to'
  prefs: []
  type: TYPE_NORMAL
- en: better interpret network traffic, but not necessarily to implement an NSM-
  prefs: []
  type: TYPE_NORMAL
- en: specific investigation or workflow. Some of these tools help analysts better
  prefs: []
  type: TYPE_NORMAL
- en: understand individual packets, others group packets into sessions, and still
  prefs: []
  type: TYPE_NORMAL
- en: others examine application data. The authors of these tools generally did
  prefs: []
  type: TYPE_NORMAL
- en: not build them with NSM in mind, but nevertheless, they are key to under-
  prefs: []
  type: TYPE_NORMAL
- en: standing network traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Two sorts of data presentation tools for packet analysis are available with
  prefs: []
  type: TYPE_NORMAL
- en: SO. One relies on a command line interface. These tools include Tcpdump,
  prefs: []
  type: TYPE_NORMAL
- en: Tshark, and the Argus Ra client, all examined in this chapter. Because
  prefs: []
  type: TYPE_NORMAL
- en: certain uses of Tshark depend on a related data collection tool, Dumpcap,
  prefs: []
  type: TYPE_NORMAL
- en: I’ll present it along with Tshark. The second sort of tool for packet analysis
  prefs: []
  type: TYPE_NORMAL
- en: offers analysts a graphical interface. Wireshark, Xplico, and NetworkMiner
  prefs: []
  type: TYPE_NORMAL
- en: are examples of this sort of software, and I discuss them in Chapter 7\.
  prefs: []
  type: TYPE_NORMAL
- en: '**NSM Consoles**'
  prefs: []
  type: TYPE_NORMAL
- en: '*NSM consoles* were built with NSM-specific investigation and workflows in'
  prefs: []
  type: TYPE_NORMAL
- en: mind. The console authors began with the core NSM principles and imple-
  prefs: []
  type: TYPE_NORMAL
- en: mented them in software. These tools also function as data presentation
  prefs: []
  type: TYPE_NORMAL
- en: applications, but they act more as gateways to NSM data. Software in this
  prefs: []
  type: TYPE_NORMAL
- en: category includes Sguil, Squert, Snorby, and ELSA. I’ll explain how to use
  prefs: []
  type: TYPE_NORMAL
- en: these NSM consoles in Chapter 8\.
  prefs: []
  type: TYPE_NORMAL
- en: '**114** Chapter 6'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***SO Data Col ection Tools***'
  prefs: []
  type: TYPE_NORMAL
- en: Once NSM analysts become comfortable with the data presentation tools,
  prefs: []
  type: TYPE_NORMAL
- en: they turn to *data collection tools*. Software in this category includes the
    Argus server, Netsniff-ng, Passive Real-Time Asset Detection System (PRADS),
  prefs: []
  type: TYPE_NORMAL
- en: Snort, Suricata, and Bro. (Dumpcap belongs in this category as well, but SO
  prefs: []
  type: TYPE_NORMAL
- en: does not enable it by default.) These applications collect and generate the
  prefs: []
  type: TYPE_NORMAL
- en: NSM data available to the presentation tools.
  prefs: []
  type: TYPE_NORMAL
- en: The Argus server and PRADS create and store their own forms of session
  prefs: []
  type: TYPE_NORMAL
- en: data. Argus data is stored in a proprietary binary format suited for rapid
  prefs: []
  type: TYPE_NORMAL
- en: command line mining, whereas PRADS data is best read through an NSM
  prefs: []
  type: TYPE_NORMAL
- en: console. Analysts can choose which form of data suits them best.
  prefs: []
  type: TYPE_NORMAL
- en: Netsniff-ng simply writes full content data to disk in pcap format. Snort
  prefs: []
  type: TYPE_NORMAL
- en: and Suricata are network intrusion detection systems, inspecting traffic and
  prefs: []
  type: TYPE_NORMAL
- en: writing alerts according to the signatures deployed with each tool. Bro
  prefs: []
  type: TYPE_NORMAL
- en: observes and interprets traffic that has been generated and logged as a
  prefs: []
  type: TYPE_NORMAL
- en: variety of NSM datatypes.
  prefs: []
  type: TYPE_NORMAL
- en: In the default configuration enabled by the SO platform, all of these
  prefs: []
  type: TYPE_NORMAL
- en: applications provide a wealth of NSM data to the presentation tools dis-
  prefs: []
  type: TYPE_NORMAL
- en: cussed in this chapter and the next two.
  prefs: []
  type: TYPE_NORMAL
- en: '***SO Data Delivery Tools***'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, between the data presentation and data collection tools sits a suite
  prefs: []
  type: TYPE_NORMAL
- en: of *data delivery applications*. Broadly speaking, this middleware enables the
  prefs: []
  type: TYPE_NORMAL
- en: functionality of the other categories of software on the SO platform. Tools
  prefs: []
  type: TYPE_NORMAL
- en: like PulledPork, Barnyard2, and CapMe manage IDS rules, alert process-
  prefs: []
  type: TYPE_NORMAL
- en: ing, and pcap access, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: A suite of “agents” associated with Sguil—such as pcap_agent, snort_agent,
  prefs: []
  type: TYPE_NORMAL
- en: and the like—shuttle data from the collection tools to the presentation soft-
  prefs: []
  type: TYPE_NORMAL
- en: ware. This includes the Apache web server, the MySQL database, and the
  prefs: []
  type: TYPE_NORMAL
- en: Sphinx index application, which may already be familiar to you.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, SO includes tools for integrating certain host-centric analysis
  prefs: []
  type: TYPE_NORMAL
- en: features. These include the OSSEC host IDS and Syslog-ng for transport
  prefs: []
  type: TYPE_NORMAL
- en: and aggregation of log messages. Because this book concentrates on
  prefs: []
  type: TYPE_NORMAL
- en: network-centric data, we won’t examine data from OSSEC and Syslog-ng,
  prefs: []
  type: TYPE_NORMAL
- en: but you should know that those components are running on SO platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6-1 shows the core SO tools in relation to one another. This
  prefs: []
  type: TYPE_NORMAL
- en: chapter covers the tools Tcpdump, Tshark, Dumpcap, and the Argus Ra
  prefs: []
  type: TYPE_NORMAL
- en: client. Chapter 7 covers Wireshark, Xplico, and NetworkMiner. Chapter 8
  prefs: []
  type: TYPE_NORMAL
- en: discusses the NSM consoles Sguil, Snorby, Squert, and ELSA. We’ll begin
  prefs: []
  type: TYPE_NORMAL
- en: our look at data presentation tools with Tcpdump.
  prefs: []
  type: TYPE_NORMAL
- en: Command Line Packet Analysis Tools **115**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: NetworkMiner
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark,
  prefs: []
  type: TYPE_NORMAL
- en: Sguil
  prefs: []
  type: TYPE_NORMAL
- en: Snorby or
  prefs: []
  type: TYPE_NORMAL
- en: ELSA
  prefs: []
  type: TYPE_NORMAL
- en: Interface for full
  prefs: []
  type: TYPE_NORMAL
- en: Interface for Bro
  prefs: []
  type: TYPE_NORMAL
- en: and Xplico
  prefs: []
  type: TYPE_NORMAL
- en: Tshark, and
  prefs: []
  type: TYPE_NORMAL
- en: Squert
  prefs: []
  type: TYPE_NORMAL
- en: Data
  prefs: []
  type: TYPE_NORMAL
- en: content data, alert
  prefs: []
  type: TYPE_NORMAL
- en: and alert data
  prefs: []
  type: TYPE_NORMAL
- en: Interface for full
  prefs: []
  type: TYPE_NORMAL
- en: Tcpdump
  prefs: []
  type: TYPE_NORMAL
- en: Interface for
  prefs: []
  type: TYPE_NORMAL
- en: presentation content data, alert
  prefs: []
  type: TYPE_NORMAL
- en: Protocol analyzers
  prefs: []
  type: TYPE_NORMAL
- en: data, session data,
  prefs: []
  type: TYPE_NORMAL
- en: alert data and
  prefs: []
  type: TYPE_NORMAL
- en: and some metadata
  prefs: []
  type: TYPE_NORMAL
- en: Argus Ra
  prefs: []
  type: TYPE_NORMAL
- en: data, session data,
  prefs: []
  type: TYPE_NORMAL
- en: for full content data
  prefs: []
  type: TYPE_NORMAL
- en: some metadata
  prefs: []
  type: TYPE_NORMAL
- en: and some metadata
  prefs: []
  type: TYPE_NORMAL
- en: Client for
  prefs: []
  type: TYPE_NORMAL
- en: session data
  prefs: []
  type: TYPE_NORMAL
- en: PulledPork
  prefs: []
  type: TYPE_NORMAL
- en: pcap_agent
  prefs: []
  type: TYPE_NORMAL
- en: Apache
  prefs: []
  type: TYPE_NORMAL
- en: OSSEC
  prefs: []
  type: TYPE_NORMAL
- en: Sphinx
  prefs: []
  type: TYPE_NORMAL
- en: Alert data
  prefs: []
  type: TYPE_NORMAL
- en: snort_agent
  prefs: []
  type: TYPE_NORMAL
- en: Web server
  prefs: []
  type: TYPE_NORMAL
- en: Host log alerting
  prefs: []
  type: TYPE_NORMAL
- en: ELSA log search
  prefs: []
  type: TYPE_NORMAL
- en: rule updates
  prefs: []
  type: TYPE_NORMAL
- en: Data
  prefs: []
  type: TYPE_NORMAL
- en: sancp_agent
  prefs: []
  type: TYPE_NORMAL
- en: and analysis
  prefs: []
  type: TYPE_NORMAL
- en: CapMe
  prefs: []
  type: TYPE_NORMAL
- en: MySQL
  prefs: []
  type: TYPE_NORMAL
- en: delivery
  prefs: []
  type: TYPE_NORMAL
- en: Barnyard2
  prefs: []
  type: TYPE_NORMAL
- en: pads_agent
  prefs: []
  type: TYPE_NORMAL
- en: Full content and
  prefs: []
  type: TYPE_NORMAL
- en: Syslog-ng
  prefs: []
  type: TYPE_NORMAL
- en: Database
  prefs: []
  type: TYPE_NORMAL
- en: Alert data spool
  prefs: []
  type: TYPE_NORMAL
- en: http_agent
  prefs: []
  type: TYPE_NORMAL
- en: transcript
  prefs: []
  type: TYPE_NORMAL
- en: Log collection
  prefs: []
  type: TYPE_NORMAL
- en: processing
  prefs: []
  type: TYPE_NORMAL
- en: Sensor to server
  prefs: []
  type: TYPE_NORMAL
- en: delivery
  prefs: []
  type: TYPE_NORMAL
- en: data delivery
  prefs: []
  type: TYPE_NORMAL
- en: Argus server
  prefs: []
  type: TYPE_NORMAL
- en: Dumpcap
  prefs: []
  type: TYPE_NORMAL
- en: PRADS
  prefs: []
  type: TYPE_NORMAL
- en: Snort or
  prefs: []
  type: TYPE_NORMAL
- en: Bro
  prefs: []
  type: TYPE_NORMAL
- en: Session data
  prefs: []
  type: TYPE_NORMAL
- en: Full content data
  prefs: []
  type: TYPE_NORMAL
- en: Session data
  prefs: []
  type: TYPE_NORMAL
- en: Suricata
  prefs: []
  type: TYPE_NORMAL
- en: Extracted content
  prefs: []
  type: TYPE_NORMAL
- en: (not running by
  prefs: []
  type: TYPE_NORMAL
- en: and metadata
  prefs: []
  type: TYPE_NORMAL
- en: Data
  prefs: []
  type: TYPE_NORMAL
- en: Alert data
  prefs: []
  type: TYPE_NORMAL
- en: data, session
  prefs: []
  type: TYPE_NORMAL
- en: collection
  prefs: []
  type: TYPE_NORMAL
- en: default)
  prefs: []
  type: TYPE_NORMAL
- en: data, transaction
  prefs: []
  type: TYPE_NORMAL
- en: data, statistical
  prefs: []
  type: TYPE_NORMAL
- en: Netsniff-ng
  prefs: []
  type: TYPE_NORMAL
- en: data, metadata,
  prefs: []
  type: TYPE_NORMAL
- en: Full content data
  prefs: []
  type: TYPE_NORMAL
- en: and alert data
  prefs: []
  type: TYPE_NORMAL
- en: Monitored interface(s), e.g., eth1
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 6-1: Core SO tools*'
  prefs: []
  type: TYPE_NORMAL
- en: '**running Tcpdump**'
  prefs: []
  type: TYPE_NORMAL
- en: Tcpdump ( *http://www.tcpdump.org/*) is a command line network traffic
  prefs: []
  type: TYPE_NORMAL
- en: analyzer. Tcpdump is available on SO, but it is not running by default.
  prefs: []
  type: TYPE_NORMAL
- en: Analysts can invoke it on demand, most often to view data stored in
  prefs: []
  type: TYPE_NORMAL
- en: '*/nsm/sensor_data/<sensorname>/dailylogs*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Bill Fenner, David Young, Fulvio Risso, Guy Harris, Hannes Gredler, and Michael*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Richardson are the current Tcpdump maintainers, and they code under a three-clause*
    *BSD license. (See the Tcpdump* CREDITS *file at* http://svnweb.freebsd.org/base/'
  prefs: []
  type: TYPE_NORMAL
- en: vendor/tcpdump/4.3.0/CREDITS?revision=241212&view=markup *for all*
  prefs: []
  type: TYPE_NORMAL
- en: '*contributors.) They also develop the libpcap traffic capture library under
    the same* *license. Van Jacobson, Craig Leres, and Steven McCanne wrote the original
    version in* *1987 while working at the Lawrence Berkeley Laboratory Network Research
    Group.*'
  prefs: []
  type: TYPE_NORMAL
- en: Tcpdump works against a live network interface or a saved trace file. It
  prefs: []
  type: TYPE_NORMAL
- en: can display results in real time or write output to a file.
  prefs: []
  type: TYPE_NORMAL
- en: Tcpdump is a *protocol analyzer* because it can depict multiple layers of
  prefs: []
  type: TYPE_NORMAL
- en: detail for any traffic it understands. As a protocol analyzer, its rendition
    of
  prefs: []
  type: TYPE_NORMAL
- en: network traffic depends on its ability to decode the data it sees. Without
  prefs: []
  type: TYPE_NORMAL
- en: knowledge of the underlying protocols, Tcpdump could produce only a
  prefs: []
  type: TYPE_NORMAL
- en: byte stream that analysts would need to decode manually.
  prefs: []
  type: TYPE_NORMAL
- en: '**116** Chapter 6'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***Displaying, Writing, and Reading Traffic with Tcpdump***'
  prefs: []
  type: TYPE_NORMAL
- en: Tcpdump runs in a command terminal. To display live traffic in real time,
  prefs: []
  type: TYPE_NORMAL
- en: 'run it with these options:'
  prefs: []
  type: TYPE_NORMAL
- en: $ **tcpdump -n -i <interface> -s <snaplen> -c <count>**
  prefs: []
  type: TYPE_NORMAL
- en: The -n switch tells Tcpdump to not resolve IP addresses to hostnames
  prefs: []
  type: TYPE_NORMAL
- en: via DNS queries. I always run Tcpdump with the -n switch to avoid waiting
  prefs: []
  type: TYPE_NORMAL
- en: while the tool resolves IP addresses to hostnames via DNS. The -i switch
  prefs: []
  type: TYPE_NORMAL
- en: tells it which interface to monitor. The -s switch tells it how many bytes
  prefs: []
  type: TYPE_NORMAL
- en: to capture from each packet. By default Tcpdump captures 68 bytes for
  prefs: []
  type: TYPE_NORMAL
- en: IPv4 packets and 96 bytes for IPv6 packets. (Use -s 0 to capture the entire
  prefs: []
  type: TYPE_NORMAL
- en: packet, or specify a value appropriate for the medium from which you are
  prefs: []
  type: TYPE_NORMAL
- en: capturing.) Finally, -c tells Tcpdump how many packets to capture. (If you
  prefs: []
  type: TYPE_NORMAL
- en: forget this switch, Tcpdump will run until you stop it with ctrl-C.)
  prefs: []
  type: TYPE_NORMAL
- en: Listing 6-1 shows some example output. Tcpdump requires elevated
  prefs: []
  type: TYPE_NORMAL
- en: privileges to sniff traffic in promiscuous mode, so preface the command
  prefs: []
  type: TYPE_NORMAL
- en: with sudo.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo tcpdump -n -i eth1 -c 5**
  prefs: []
  type: TYPE_NORMAL
- en: 'tcpdump: WARNING: eth1: no IPv4 address assigned'
  prefs: []
  type: TYPE_NORMAL
- en: 'tcpdump: verbose output suppressed, use -v or -vv for full protocol decode'
  prefs: []
  type: TYPE_NORMAL
- en: listening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes
  prefs: []
  type: TYPE_NORMAL
- en: 'u19:48:51.723139 IP 192.168.2.120.55060 > 205.233.0.226.443:'
  prefs: []
  type: TYPE_NORMAL
- en: UDP, length 461
  prefs: []
  type: TYPE_NORMAL
- en: 'v19:48:51.886312 IP 69.171.246.17.443 > 192.168.2.104.49608:'
  prefs: []
  type: TYPE_NORMAL
- en: Flags [P.], seq 928328861:928329246, ack 1080949825, win 39, length 385
  prefs: []
  type: TYPE_NORMAL
- en: 'w19:48:51.898576 IP 192.168.2.104.49608 > 69.171.246.17.443:'
  prefs: []
  type: TYPE_NORMAL
- en: Flags [P.], seq 1:978, ack 385, win 4220, length 977
  prefs: []
  type: TYPE_NORMAL
- en: 'x19:48:51.914324 IP 69.171.246.17.443 > 192.168.2.104.49608:'
  prefs: []
  type: TYPE_NORMAL
- en: Flags [.], ack 978, win 45, length 0
  prefs: []
  type: TYPE_NORMAL
- en: 'y19:48:51.915284 IP 69.171.246.17.443 > 192.168.2.104.49608:'
  prefs: []
  type: TYPE_NORMAL
- en: Flags [P.], seq 385:823, ack 978, win 45, length 438
  prefs: []
  type: TYPE_NORMAL
- en: 5 packets captured
  prefs: []
  type: TYPE_NORMAL
- en: 5 packets received by filter
  prefs: []
  type: TYPE_NORMAL
- en: 0 packets dropped by kernel
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-1: Capturing five packets with Tcpdump*'
  prefs: []
  type: TYPE_NORMAL
- en: This traffic includes one User Datagram Protocol (UDP) packet u,
  prefs: []
  type: TYPE_NORMAL
- en: followed by four Transmission Control Protocol (TCP) packets (v, w, x,
  prefs: []
  type: TYPE_NORMAL
- en: 'and y). The UDP traffic has the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: timestamp / layer 3 protocol / source IP address.source port > destination IP
  prefs: []
  type: TYPE_NORMAL
- en: 'address.destination port: layer 4 protocol / data length'
  prefs: []
  type: TYPE_NORMAL
- en: Command Line Packet Analysis Tools **117**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The format for the TCP traffic is similar:'
  prefs: []
  type: TYPE_NORMAL
- en: timestamp / layer 3 protocol / source IP address.source port > destination IP
  prefs: []
  type: TYPE_NORMAL
- en: 'address.destination port: layer 4 protocol / TCP flags, TCP sequence numbers,'
  prefs: []
  type: TYPE_NORMAL
- en: TCP acknowledgement numbers, TCP window size, data length
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The time in this trace is UTC. When you configure SO, it sets the local clock
    to use* *UTC, so expect to see UTC timestamps in network evidence. In files saved
    in libpcap* *format, time is stored as the number of seconds and microseconds
    since the Unix*'
  prefs: []
  type: TYPE_NORMAL
- en: '*“epoch time” of January 1, 1970\. The local system then translates this value
    into* *the time displayed by a network tool.*'
  prefs: []
  type: TYPE_NORMAL
- en: To save traffic to disk while watching a live interface, add the -w switch
  prefs: []
  type: TYPE_NORMAL
- en: followed by the target filename. Listing 6-2 shows how to accomplish this task.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo tcpdump -n -i eth1 -c 5 -w demo1.pcap**
  prefs: []
  type: TYPE_NORMAL
- en: 'tcpdump: WARNING: eth1: no IPv4 address assigned'
  prefs: []
  type: TYPE_NORMAL
- en: 'tcpdump: listening on eth1, link-type EN10MB (Ethernet), capture size 65535
    bytes'
  prefs: []
  type: TYPE_NORMAL
- en: 5 packets captured
  prefs: []
  type: TYPE_NORMAL
- en: 5 packets received by filter
  prefs: []
  type: TYPE_NORMAL
- en: 0 packets dropped by kernel
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-2: Capturing and storing five packets with Tcpdump*'
  prefs: []
  type: TYPE_NORMAL
- en: To read the traffic, use the -r switch. (The sudo command isn’t needed
  prefs: []
  type: TYPE_NORMAL
- en: because you’re reading from a trace, not eth1.) Listing 6-3 shows the results
  prefs: []
  type: TYPE_NORMAL
- en: of reading five captured packets.
  prefs: []
  type: TYPE_NORMAL
- en: $ **tcpdump -n -r demo1.pcap**
  prefs: []
  type: TYPE_NORMAL
- en: reading from file demo1.pcap, link-type EN10MB (Ethernet)
  prefs: []
  type: TYPE_NORMAL
- en: '20:23:44.858470 IP 74.125.228.54.443 > 192.168.2.104.49945:'
  prefs: []
  type: TYPE_NORMAL
- en: Flags [P.], seq 1145489012:1145489069, ack 1920080636, win 4132, length 57
  prefs: []
  type: TYPE_NORMAL
- en: '20:23:44.859134 IP 74.125.228.54.443 > 192.168.2.104.49945:'
  prefs: []
  type: TYPE_NORMAL
- en: Flags [P.], seq 57:1407, ack 1, win 4132, length 1350
  prefs: []
  type: TYPE_NORMAL
- en: '20:23:44.859154 IP 74.125.228.54.443 > 192.168.2.104.49945:'
  prefs: []
  type: TYPE_NORMAL
- en: Flags [P.], seq 1407:2757, ack 1, win 4132, length 1350
  prefs: []
  type: TYPE_NORMAL
- en: '20:23:44.859505 IP 74.125.228.54.443 > 192.168.2.104.49945:'
  prefs: []
  type: TYPE_NORMAL
- en: Flags [P.], seq 2757:4107, ack 1, win 4132, length 1350
  prefs: []
  type: TYPE_NORMAL
- en: '20:23:44.860006 IP 74.125.228.54.443 > 192.168.2.104.49945:'
  prefs: []
  type: TYPE_NORMAL
- en: Flags [P.], seq 4107:4261, ack 1, win 4132, length 154
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-3: Reading five packets with Tcpdump*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Using Filters with Tcpdump***'
  prefs: []
  type: TYPE_NORMAL
- en: Along with displaying, writing, and reading traffic, the other core usage
  prefs: []
  type: TYPE_NORMAL
- en: for Tcpdump involves applying filters. *Filters* are a mechanism to limit the
  prefs: []
  type: TYPE_NORMAL
- en: traffic shown or captured by Tcpdump and other tools. The popular term
  prefs: []
  type: TYPE_NORMAL
- en: '**118** Chapter 6'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: for filters is *BPF*, a nod to the Berkeley Packet Filter virtual machine, which
    translates the human-readable filter syntax into a code syntax suitable for
  prefs: []
  type: TYPE_NORMAL
- en: machine consumption.
  prefs: []
  type: TYPE_NORMAL
- en: '**applying Filters**'
  prefs: []
  type: TYPE_NORMAL
- en: You apply a BPF by appending it to the Tcpdump command line. For
  prefs: []
  type: TYPE_NORMAL
- en: example, to capture only ICMP traffic, add icmp to the syntax, as shown
  prefs: []
  type: TYPE_NORMAL
- en: in Listing 6-4 (u).
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo tcpdump -n -i eth1 -c 10 -w icmp.pcap icmp**u
  prefs: []
  type: TYPE_NORMAL
- en: 'tcpdump: WARNING: eth1: no IPv4 address assigned'
  prefs: []
  type: TYPE_NORMAL
- en: 'tcpdump: listening on eth1, link-type EN10MB (Ethernet), capture size 65535
    bytes'
  prefs: []
  type: TYPE_NORMAL
- en: 10 packets captured
  prefs: []
  type: TYPE_NORMAL
- en: 10 packets received by filter
  prefs: []
  type: TYPE_NORMAL
- en: 0 packets dropped by kernel
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-4: Capturing 10 ICMP packets with Tcpdump*'
  prefs: []
  type: TYPE_NORMAL
- en: To read the trace, use Tcpdump again, as shown in Listing 6-5\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **tcpdump -n -r icmp.pcap**
  prefs: []
  type: TYPE_NORMAL
- en: reading from file icmp.pcap, link-type EN10MB (Ethernet)
  prefs: []
  type: TYPE_NORMAL
- en: '20:30:28.203723 IP 172.16.2.1 > 172.16.2.2: ICMP echo request, id 20822, seq
    44313, length 44'
  prefs: []
  type: TYPE_NORMAL
- en: '20:30:28.204282 IP 172.16.2.2 > 172.16.2.1: ICMP echo reply, id 20822, seq
    44313, length 44'
  prefs: []
  type: TYPE_NORMAL
- en: '20:30:28.844237 IP 192.168.2.108 > 173.194.75.104: ICMP echo request, id 1,
    seq 5, length 40'
  prefs: []
  type: TYPE_NORMAL
- en: '20:30:28.871534 IP 173.194.75.104 > 192.168.2.108: ICMP echo reply, id 1, seq
    5, length 40'
  prefs: []
  type: TYPE_NORMAL
- en: '20:30:29.213917 IP 172.16.2.1 > 172.16.2.2: ICMP echo request, id 20822, seq
    44569, length 44'
  prefs: []
  type: TYPE_NORMAL
- en: '20:30:29.214475 IP 172.16.2.2 > 172.16.2.1: ICMP echo reply, id 20822, seq
    44569, length 44'
  prefs: []
  type: TYPE_NORMAL
- en: '20:30:29.850913 IP 192.168.2.108 > 173.194.75.104: ICMP echo request, id 1,
    seq 6, length 40'
  prefs: []
  type: TYPE_NORMAL
- en: '20:30:29.875103 IP 173.194.75.104 > 192.168.2.108: ICMP echo reply, id 1, seq
    6, length 40'
  prefs: []
  type: TYPE_NORMAL
- en: '20:30:29.987013 IP 192.168.2.127 > 173.194.75.99: ICMP echo request, id 47441,
    seq 1, length 64'
  prefs: []
  type: TYPE_NORMAL
- en: '20:30:30.013728 IP 173.194.75.99 > 192.168.2.127: ICMP echo reply, id 47441,
    seq 1, length 64'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-5: Reading ICMP packets with Tcpdump*'
  prefs: []
  type: TYPE_NORMAL
- en: Instead of using icmp, you can capture other specific traffic by using
  prefs: []
  type: TYPE_NORMAL
- en: options like tcp, udp, and so on. For example, you can collect traffic for a
  prefs: []
  type: TYPE_NORMAL
- en: specified TCP or UDP port, like port 53, as shown in Listing 6-6\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo tcpdump -n -i eth1 -s 0 port 53**
  prefs: []
  type: TYPE_NORMAL
- en: 'tcpdump: WARNING: eth1: no IPv4 address assigned'
  prefs: []
  type: TYPE_NORMAL
- en: 'tcpdump: verbose output suppressed, use -v or -vv for full protocol decode'
  prefs: []
  type: TYPE_NORMAL
- en: listening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes
  prefs: []
  type: TYPE_NORMAL
- en: '20:53:42.685078 IP 192.168.2.106.33348 > 172.16.2.1.53: 55862+ A? daisy.ubuntu.com.
    (34) 20:53:42.701421 IP 172.16.2.1.53 > 192.168.2.106.33348: 55862 2/0/0 A 91.189.95.54,
    A 91.189.95.55 (66)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-6: Capturing port 53 packets with Tcpdump*'
  prefs: []
  type: TYPE_NORMAL
- en: Command Line Packet Analysis Tools **119**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: Listing 6-6 captures UDP or TCP traffic on port 53\. To capture port 53
  prefs: []
  type: TYPE_NORMAL
- en: and TCP traffic only, modify the filter as shown in Listing 6-7\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo tcpdump -n -i eth1 -s 0 port 53 and tcp**
  prefs: []
  type: TYPE_NORMAL
- en: 'tcpdump: WARNING: eth1: no IPv4 address assigned'
  prefs: []
  type: TYPE_NORMAL
- en: 'tcpdump: verbose output suppressed, use -v or -vv for full protocol decode'
  prefs: []
  type: TYPE_NORMAL
- en: listening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes
  prefs: []
  type: TYPE_NORMAL
- en: '21:02:06.430169 IP 192.168.2.126.44334 > 8.8.8.8.53: Flags [S], seq 1330246822,
    win 42340, options [mss 1460,sackOK,TS val 157066547 ecr 0,nop,wscale 11], length
    0'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-7: Capturing port 53 TCP packets with Tcpdump*'
  prefs: []
  type: TYPE_NORMAL
- en: The manual page for pcap-filter included with SO shows all available
  prefs: []
  type: TYPE_NORMAL
- en: options. View it by entering **man pcap-filter** at a command terminal.
  prefs: []
  type: TYPE_NORMAL
- en: '**Some Common Filters**'
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s look at some of the more common filters for showing traffic to or
  prefs: []
  type: TYPE_NORMAL
- en: from particular hosts and even networks.
  prefs: []
  type: TYPE_NORMAL
- en: To show traffic to or from a specific computer, use the host BPF, as shown
  prefs: []
  type: TYPE_NORMAL
- en: in Listing 6-8\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **tcpdump -n -r icmp.pcap host 192.168.2.127**
  prefs: []
  type: TYPE_NORMAL
- en: reading from file icmp.pcap, link-type EN10MB (Ethernet)
  prefs: []
  type: TYPE_NORMAL
- en: '20:30:29.987013 IP 192.168.2.127 > 173.194.75.99: ICMP echo request, id 47441,
    seq 1, length 64'
  prefs: []
  type: TYPE_NORMAL
- en: '20:30:30.013728 IP 173.194.75.99 > 192.168.2.127: ICMP echo reply, id 47441,
    seq 1, length 64'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-8: Capturing traffic involving a host via BPF with Tcpdump*'
  prefs: []
  type: TYPE_NORMAL
- en: To show traffic from a certain source computer, use the src host BPF, as
  prefs: []
  type: TYPE_NORMAL
- en: shown in Listing 6-9\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **tcpdump -n -r icmp.pcap src host 192.168.2.127**
  prefs: []
  type: TYPE_NORMAL
- en: reading from file icmp.pcap, link-type EN10MB (Ethernet)
  prefs: []
  type: TYPE_NORMAL
- en: '20:30:29.987013 IP 192.168.2.127 > 173.194.75.99: ICMP echo request, id 47441,
    seq 1, length 64'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-9: Capturing traffic from a host via BPF with Tcpdump*'
  prefs: []
  type: TYPE_NORMAL
- en: The dst host BPF works the same way as the src host version, as shown
  prefs: []
  type: TYPE_NORMAL
- en: in Listing 6-10\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **tcpdump -n -r icmp.pcap dst host 192.168.2.127**
  prefs: []
  type: TYPE_NORMAL
- en: reading from file icmp.pcap, link-type EN10MB (Ethernet)
  prefs: []
  type: TYPE_NORMAL
- en: '20:30:30.013728 IP 173.194.75.99 > 192.168.2.127: ICMP echo reply, id 47441,
    seq 1, length 64'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 6-10: Capturing traffic to a host via BPF with Tcpdump*'
  prefs: []
  type: TYPE_NORMAL
- en: '**120** Chapter 6'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: You can specify networks instead of hosts with the net BPF, as shown in Listing
    6-11\.
  prefs: []
  type: TYPE_NORMAL
