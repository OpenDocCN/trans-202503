["```\nnoodleSoup = [\"water\", \"soy sauce\", \"spring onions\", \"pepper\", \"noodles\",\n\"beef\", \"vegetables\"]\n\nfor ingredient in noodleSoup:\n    print(ingredient)\n```", "```\nwater\nsoy sauce\nspring onions\npepper\nnoodles\nbeef\nvegetables\n```", "```\n   from mcpi.minecraft import Minecraft\n   mc = Minecraft.create()\n\n   import time\n\n   time.sleep(60)\n\n➊ hits = mc.events.pollBlockHits()\n   block = 103\n\n➋ for\n➌ x, y, z = hit.pos.x, hit.pos.y, hit.pos.z\n➍ # Set melon blocks at the coordinates\n```", "```\nfor hit in hits:\n```", "```\naRange = range(0, 5)\n```", "```\naRange = [0, 1, 2, 3, 4]\n```", "```\nfor item in range(1, 16):\n    print(item)\n```", "```\nfor item in range(1, 16):\n    print(item * 2)\n```", "```\ncount = 1\nwhile count < 16:\n    print(count)\n    count += 1\n```", "```\nfrom mcpi.minecraft import Minecraft\nmc = Minecraft.create()\n\npos = mc.player.getTilePos()\nx, y, z = pos.x, pos.y, pos.z\n\nstairBlock = 53\n\nstep = 0\nwhile step < 10:\n    mc.setblock(x + step, y + step, z, stairBlock)\n    step += 1\n```", "```\n>>> aRange = range(5)\n>>> list(aRange)\n[0, 1, 2, 3, 4]\n```", "```\n>>> aRange = range(2, 5)\n>>> list(aRange)\n[2, 3, 4]\n```", "```\n>>> aRange = range(3, 10, 2)\n>>> list(aRange)\n[3, 5, 7, 9]\n```", "```\n>>> newRange = range(100, 0, -2)\n>>> list(newRange)\n[100, 98, 96, 94, 92, 90, 88, 86, 84, 82, 80, 78, 76, 74, 72, 70, 68, 66, 64,\n62, 60, 58, 56, 54, 52, 50, 48, 46, 44, 42, 40, 38, 36, 34, 32, 30, 28, 26,\n24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2]\n```", "```\n>>> backwardsList = reversed(aRange)\n>>> list(backwardsList)\n[9, 7, 5, 3]\n```", "```\ncountDown = range(1, 101)\ncountDown = reversed(countDown)\nfor item in countDown:\n    print(item)\n```", "```\n100\n99\n98\n97\n96\n--snip--\n3\n2\n1\n```", "```\nfor item in reversed(range(0, 101)):\n    print(item)\n```", "```\n   from mcpi.minecraft import Minecraft\n   mc = Minecraft.create()\n\n   def setPillar(x, y, z, height):\n       \"\"\" Creates a pillar. Args set position and height of pillar \"\"\"\n       stairBlock = 156\n       block = 155\n\n       # Pillar top\n       mc.setBlocks(x - 1, y + height, z - 1, x + 1, y + height, z + 1, block, 1)\n       mc.setBlock(x - 1, y + height - 1, z, stairBlock, 12)\n       mc.setBlock(x + 1, y + height - 1, z, stairBlock, 13)\n       mc.setBlock(x, y + height - 1, z + 1, stairBlock, 15)\n       mc.setBlock(x, y + height - 1, z - 1, stairBlock, 14)\n\n       # Pillar base\n       mc.setBlocks(x - 1, y, z - 1, x + 1, y, z + 1, block, 1)\n       mc.setBlock(x - 1, y + 1, z, stairBlock, 0)\n       mc.setBlock(x + 1, y + 1, z, stairBlock, 1)\n       mc.setBlock(x, y + 1, z + 1, stairBlock, 3)\n       mc.setBlock(x, y + 1, z - 1, stairBlock, 2)\n\n       # Pillar column\n       mc.setBlocks(x, y, z, x, y + height, z, block, 2)\n\n   pos = mc.player.getTilePos()\n   x, y, z = pos.x + 2, pos.y, pos.z\n\n➊ # Add the for loop here\n➋ # Call the function here\n```", "```\n   from mcpi.minecraft import Minecraft\n   mc = Minecraft.create()\n\n   block = 24  # sandstone\n➊ height = 10\n➋ levels = range(height)\n\n   pos = mc.player.getTilePos()\n➌ x, y, z = pos.x + height, pos.y, pos.z\n\n➍ for level in levels:\n➎     mc.setBlocks(x - level, y, z - level, x + level, y, z + level, block)\n       y += 1\n```", "```\ninventory = {'gems': 5, 'potions': 2, 'boxes': 1}\n\nfor key in inventory:\n    print(key)\n```", "```\ngems\npotions\nboxes\n```", "```\ninventory = {'gems': 5, 'potions': 2, 'boxes': 1}\n\nfor key in inventory:\n    print(key + \" \" + str(inventory[key]))\n```", "```\ngems 5\npotions 2\nboxes 1\n```", "```\nsandwich = [\"Bread\", \"Butter\", \"Tuna\", \"Lettuce\", \"Mayonnaise\", \"Bread\"]\n\nfor ingredient in sandwich:\n    print(ingredient)\nelse:\n    print(\"This is the end of the sandwich.\")\n```", "```\nBread\nButter\nTuna\nLettuce\nMayonnaise\nBread\nThis is the end of the sandwich.\n```", "```\nfor ingredient in sandwich:\n    print(ingredient)\nprint(\"This is the end of the sandwich.\")\n```", "```\nsandwich = [\"Bread\", \"Butter\", \"Tuna\", \"Lettuce\", \"Mayonnaise\", \"Bread\"]\n\nfor ingredient in sandwich:\n    if ingredient == \"Mayonnaise\":\n        print(\"I don't like mayonnaise on my sandwich.\")\n        break\n    else:\n        print(ingredient)\nelse:\n    print(\"This is the end of the sandwich.\")\n```", "```\noneDimensionalRainbowList = [0,\n                             1,\n                             2,\n                             3,\n                             4,\n                             5]\n```", "```\n   from mcpi.minecraft import Minecraft\n   mc = Minecraft.create()\n\n➊ oneDimensionalRainbowList = [0, 1, 2, 3, 4, 5]\n\n   pos = mc.player.getTilePos()\n   x = pos.x\n   y = pos.y\n   z = pos.z\n\n➋ for color in oneDimensionalRainbowList:\n       mc.setBlock(x, y, z, 35, color)\n       y += 1\n```", "```\n➊ twoDimensionalRainbowList = [[0, 0, 0],\n➋                              [1, 1, 1],\n➌                              [2, 2, 2],\n                               [3, 3, 3],\n                               [4, 4, 4],\n➍                              [5, 5, 5]]\n```", "```\n   from mcpi.minecraft import Minecraft\n   mc = Minecraft.create()\n\n   twoDimensionalRainbowList = [[0, 0, 0],\n                                [1, 1, 1],\n                                [2, 2, 2],\n                                [3, 3, 3],\n                                [4, 4, 4],\n                                [5, 5, 5]]\n\n   pos = mc.player.getTilePos()\n   x = pos.x\n   y = pos.y\n   z = pos.z\n\n➊ startingX = x\n\n➋ for row in twoDimensionalRainbowList:\n➌     for color in row:\n➍         mc.setBlock(x, y, z, 35, color)\n➎         x += 1\n➏     y += 1\n➐     x = startingX\n```", "```\nscores = [1, 5, 6, 1]\nscores[2] = 7\n```", "```\ntwoDimensionalRainbowList = [[0, 0, 0],\n                             [1, 1, 1},\n                             [2, 2, 2],\n                             [3, 3, 3],\n                             [4, 4, 4],\n                             [5, 5, 5]]\n```", "```\ntwoDimensionalRainbowList[0][1] = 7\n```", "```\nprint(twoDimensionalRainbowList[5][0])\n```", "```\n   from mcpi.minecraft import Minecraft\n   mc = Minecraft.create()\n\n   pos = mc.player.getTilePos()\n   x, y, z = pos.x, pos.y, pos.z\n\n➊ blocks = [[35, 35, 35, 35, 35, 35, 35, 35],\n             [35, 35, 35, 35, 35, 35, 35, 35],\n             [35, 35, 35, 35, 35, 35, 35, 35],\n             [35, 35, 35, 35, 35, 35, 35, 35]]\n\n➋ for row in reversed(blocks):\n       for block in row:\n           mc.setBlock(x, y, z, block)\n           x += 1\n       y += 1\n       x = pos.x\n```", "```\nblocks = [[35, 35, 22, 22, 22, 22, 35, 35],\n```", "```\n   import random\n➊ randomNumbers = []\n   for outer in range(10):\n➋     randomNumbers.append([])\n       for inner in range(10):\n➌         number = random.randint(1, 4)\n           randomNumbers[outer].append(number)\n   print(randomNumbers)\n```", "```\n[[3, 1, 4, 1, 4, 1, 2, 3, 2, 2],\n [1, 3, 4, 2, 4, 3, 4, 1, 3, 2],\n [4, 2, 4, 1, 4, 3, 2, 3, 4, 4],\n [1, 4, 3, 4, 3, 4, 3, 3, 4, 4],\n [3, 1, 4, 2, 3, 3, 3, 1, 4, 2],\n [4, 1, 4, 2, 3, 2, 4, 3, 3, 1],\n [2, 4, 2, 1, 2, 1, 4, 2, 4, 3],\n [3, 1, 3, 4, 1, 4, 2, 2, 4, 1],\n [4, 3, 1, 2, 4, 2, 2, 3, 1, 2],\n [3, 1, 3, 3, 1, 3, 1, 4, 1, 2]]\n```", "```\n   from mcpi.minecraft import Minecraft\n   mc = Minecraft.create()\n\n   import random\n\n➊ def brokenBlock():\n       brokenBlocks = [48, 67, 4, 4, 4, 4]\n       block = random.choice(brokenBlocks)\n       return block\n\n   pos = mc.player.getTilePos()\n   x, y, z = pos.x, pos.y, pos.z\n\n   brokenWall = []\n   height, width = 5, 10\n\n   # Create the list of broken blocks\n\n   # Set the blocks\n```", "```\ncube = [[[57, 57, 57, 57],\n         [57, 0, 0, 57],\n         [57, 0, 0, 57],\n         [57, 57, 57, 57]],\n         #\n        [[57, 0, 0, 57],\n         [0, 0, 0, 0],\n         [0, 0, 0, 0],\n         [57, 0, 0, 57]],\n        #\n        [[57, 0, 0, 57],\n         [0, 0, 0, 0],\n         [0, 0, 0, 0],\n         [57, 0, 0, 57]],\n        #\n        [[57, 57, 57, 57],\n         [57, 0, 0, 57],\n         [57, 0, 0, 57],\n         [57, 57, 57, 57]]]\n```", "```\n   from mcpi.minecraft import Minecraft\n   mc = Minecraft.create()\n\n   pos = mc.player.getTilePos()\n   x = pos.x\n   y = pos.y\n   z = pos.z\n   cube = [[[57, 57, 57, 57], [57, 0, 0, 57], [57, 0, 0, 57], [57, 57, 57, 57]],\n           [[57, 0, 0, 57], [0, 0, 0, 0], [0, 0, 0, 0], [57, 0, 0, 57]],\n           [[57, 0, 0, 57], [0, 0, 0, 0], [0, 0, 0, 0], [57, 0, 0, 57]],\n           [[57, 57, 57, 57], [57, 0, 0, 57], [57, 0, 0, 57], [57, 57, 57, 57]]]\n\n   startingX = x\n➊ startingY = y\n➋ for depth in cube:\n       for height in reversed(depth):\n           for block in height:\n               mc.setBlock(x, y, z, block)\n               x += 1\n           y += 1\n           x = startingX\n➌     z += 1\n➍     y = startingY\n```", "```\n[[57, 57, 57, 57],\n [57, 0, 0, 57],\n [57, 0, 0, 57],\n [57, 57, 57, 57]]\n```", "```\n[[57, 0, 0, 57],\n [0, 0, 0, 0],\n [0, 0, 0, 0],\n [57, 0, 0, 57]]\n```", "```\n[[57, 0, 0, 57],\n [0, 0, 0, 0],\n [0, 0, 0, 0],\n [57, 0, 0, 57]]\n```", "```\n[[57, 57, 57, 57],\n [57, 0, 0, 57],\n [57, 0, 0, 57],\n [57, 57, 57, 57]]\n```", "```\ncube = [[[57, 57, 57, 57],\n         [57, 0, 0, 57],\n         [57, 0, 0, 57],\n         [57, 57, 57, 57]],\n         #\n        [[57, 0, 0, 57],\n         [0, 0, 0, 0],\n         [0, 0, 0, 0],\n         [57, 0, 0, 57]],\n         #\n        [[57, 0, 0, 57],\n         [0, 0, 0, 0],\n         [0, 0, 0, 0],\n         [57, 0, 0, 57]],\n         #\n        [[57, 57, 57, 57],\n         [57, 0, 0, 57],\n         [57, 0, 0, 57],\n         [57, 57, 57, 57]]]\n```", "```\ncube[0]\n```", "```\n[[57, 57, 57, 57],\n [57, 0, 0, 57],\n [57, 0, 0, 57],\n [57, 57, 57, 57]]\n```", "```\ncube[0][3]\n```", "```\n[57, 57, 57, 57]\n```", "```\ncube[0][3][3] = 41\n```", "```\n   from mcpi.minecraft import Minecraft\n   mc = Minecraft.create()\n\n➊ def sortPair(val1, val2):\n       if val1 > val2:\n           return val2, val1\n       else:\n           return val1, val2\n\n➋ def copyStructure(x1, y1, z1, x2, y2, z2):\n       # Sort the highest and lowest x, y, and z values\n       x1, x2 = sortPair(x1, x2)\n       y1, y2 = sortPair(y1, y2)\n       z1, z2 = sortPair(z1, z2)\n\n       width = x2 - x1\n       height = y2 - y1\n       length = z2 - z1\n\n       structure = []\n\n       print(\"Please wait...\")\n\n➌     # Copy the structure\n\n       return structure\n\n➍ def buildStructure(x, y, z, structure):\n       xStart = x\n       yStart = y\n\n➎     # Build the structure\n\n   # Get the position of the first corner\n➏ input(\"Move to the first corner and press enter in this window\")\n   pos = mc.player.getTilePos()\n   x1, y1, z1 = pos.x, pos.y, pos.z\n\n   # Get the position of the second corner\n➐ input(\"Move to the opposite corner and press enter in this window\")\n   pos = mc.player.getTilePos()\n   x2, y2, z2 = pos.x, pos.y, pos.z\n\n   # Copy the building\n➑ structure = copyStructure(x1, y1, z1, x2, y2, z2)\n\n   # Set the position for the copy\n➒ input(\"Move to the position you want to create the structure and press ENTER \n          in this window\")\n   pos = mc.player.getTilePos()\n   x, y, z = pos.x, pos.y, pos.z\n   buildStructure(x, y, z, structure)\n```"]