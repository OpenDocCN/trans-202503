["```\nPS> Get-Command –CommandType Function\n```", "```\nPS> function Install-Software { Write-Host 'I installed some software, Yippee!' }\nPS> Install-Software\nI installed some software, Yippee!\n```", "```\nPS> function Install-Software { Write-Host 'You installed some software, Yay!' }\nPS> Install-Software\nYou installed some software, Yay!\n```", "```\nfunction Install-Software {\n    [CmdletBinding()]\n    param()\n\n    Write-Host 'I installed software version 2\\. Yippee!' \n}\n```", "```\nfunction Install-Software {\n     [CmdletBinding()]\n     param(\t\n    ❶ [Parameter()]\n    ❷ [string] $Version\n    )\n\n ❸ Write-Host \"I installed software version $Version. Yippee!\" \n}\n```", "```\nPS> Install-Software -Version 2\nI installed software version 2\\. Yippee!\n```", "```\nfunction Install-Software {\n    [CmdletBinding()]\n    param(\n        [Parameter(Mandatory)]\n        [string]$Version\n    )\n\n    Write-Host \"I installed software version $Version. Yippee!\"\n}\nInstall-Software\n```", "```\ncmdlet Install-Software at command pipeline position 1\nSupply values for the following parameters:\nVersion:\n```", "```\nfunction Install-Software {\n    [CmdletBinding()]\n    param(\n        [Parameter()]\n        [string]$Version = 2\n    )\n\n    Write-Host \"I installed software version $Version. Yippee!\"\n}\nInstall-Software\n```", "```\nfunction Install-Software {\n    param(\n        [Parameter(Mandatory)]\n        [string]$Version\n    )\n    Get-ChildItem -Path \\\\SRV1\\Installers\\SoftwareV$Version\n}\n\nInstall-Software -Version 3\n```", "```\nGet-ChildItem : Cannot find path '\\\\SRV1\\Installers\\SoftwareV3' because it does not exist.\nAt line:7 char:5\n+     Get-ChildItem -Path \\\\SRV1\\Installers\\SoftwareV3\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : ObjectNotFound: (\\\\SRV1\\Installers\\SoftwareV3:String)\n                              [Get-ChildItem], ItemNotFoundException\n    + FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand\n```", "```\nfunction Install-Software {\n    param(\n        [Parameter(Mandatory)]\n        [ValidateSet('1','2')]\n        [string]$Version\n    )\n    Get-ChildItem -Path \\\\SRV1\\Installers\\SoftwareV$Version\n}\n\nInstall-Software -Version 3\n```", "```\nInstall-Software : Cannot validate argument on parameter 'Version'. The argument \"3\" does not\nbelong to the set \"1,2\" specified by the ValidateSet attribute.\nSupply an argument that is in the set and then try the command again.\nAt line:1 char:25\n+ Install-Software -Version 3\n+                         ~~~~\n+ CategoryInfo          : InvalidData: (:) [Install-Software],ParameterBindingValidationException\n    + FullyQualifiedErrorId : ParameterArgumentValidationError,Install-Software\n```", "```\nfunction Install-Software {\n    param(\n        [Parameter(Mandatory)]\n        [ValidateSet('1','2')],\n        [string]$Version\n\n        [Parameter(Mandatory)]\n        [string]$ComputerName\n    )\n    Write-Host \"I installed software version $Version on $ComputerName. Yippee!\"\n\n}\n\nInstall-Software -Version 2 -ComputerName \"SRV1\"\n```", "```\n$computers = @(\"SRV1\", \"SRV2\", \"SRV3\")\nforeach ($pc in $computers) {\n    Install-Software -Version 2 -ComputerName $pc\n}\n```", "```\nfunction Install-Software {\n    param(\n        [Parameter(Mandatory)]\n        [string]$Version\n        [ValidateSet('1','2')],\n        [Parameter(Mandatory, ValueFromPipeline)]\n        [string]$ComputerName\n    )\n    Write-Host \"I installed software version $Version on $ComputerName. Yippee!\"\n}\n\n$computers = @(\"SRV1\", \"SRV2\", \"SRV3\")\n$computers | Install-Software -Version 2\n```", "```\nI installed software version 2 on SRV3\\. Yippee!\n```", "```\nfunction Install-Software {\n    param(\n        [Parameter(Mandatory)]\n        [string]$Version\n        [ValidateSet('1','2')],\n        [Parameter(Mandatory, ValueFromPipeline)]\n        [string]$ComputerName\n    )\n process {\n        Write-Host \"I installed software version $Version on $ComputerName. Yippee!\"\n    }\n}\n\n$computers = @(\"SRV1\", \"SRV2\", \"SRV3\")\n$computers | Install-Software -Version 2\n```", "```\nI installed software version 2 on SRV1\\. Yippee!\nI installed software version 2 on SRV2\\. Yippee!\nI installed software version 2 on SRV3\\. Yippee!\n```"]