["```\n  `var` person1 `=` {\n      name: `\"Nicholas\"`\n  };\n\n  `var` person2 `=` `new` `Object`();\n  person2.name `=` `\"Nicholas\"`;\n\n❶ person1.age `=` `\"Redacted\"`;\n  person2.age `=` `\"Redacted\"`;\n\n❷ person1.name `=` `\"Greg\"`;\n  person2.name = `\"Michael\"`;\n```", "```\n`// unreliable`\n`if` (person1.age) {\n    `// do something with age`\n}\n```", "```\nconsole.log(`\"name\"` `in` person1);     `// true`\nconsole.log(`\"age\"` `in` person1);      `// true`\nconsole.log(`\"title\"` `in` person1);    `// false`\n```", "```\n`var` person1 `=` {\n    name: `\"Nicholas\"`,\n    sayName: `function`() {\n        console.log(`this`.name);\n    }\n};\n\nconsole.log(`\"sayName\"` `in` person1);   `// true`\n```", "```\n  `var` person1 `=` {\n      name: `\"Nicholas\"`,\n      sayName: `function`() {\n          console.log(`this`.name);\n      }\n  };\n\n  console.log(`\"name\"` `in` person1);                     `// true`\n  console.log(person1.hasOwnProperty(`\"name\"`));        `// true`\n\n  console.log(`\"toString\"` `in` person1);                 `// true`\n❶ console.log(person1.hasOwnProperty(`\"toString\"`));    `// false`\n```", "```\n  `var` person1 `=` {\n      name: `\"Nicholas\"`\n  };\n\n  console.log(`\"name\"` `in` person1);    `// true`\n\n  `delete` person1.name;               `// true - not output`\n  console.log(`\"name\"` `in` person1);    `// false`\n❶ console.log(person1.name);         `// undefined`\n```", "```\n`var` property;\n\n`for` (property in object) {\n    console.log(`\"Name: \"` `+` property);\n    console.log(`\"Value: \"` `+` object[property]);\n}\n```", "```\n❶ `var` properties `=` `Object`.keys(object);\n\n  `// if you want to mimic for-in behavior`\n  `var` i, len;\n\n  `for` (i`=``0`, len=properties.length; i `<` len; i`++`){\n      console.log(`\"Name: \"` `+` properties[i]);\n      console.log(`\"Value: \"` `+` object[properties[i]]);\n  }\n```", "```\n  `var` person1 `=` {\n      name: `\"Nicholas\"`\n  };\n\n  console.log(`\"name\"` `in` person1);                          `// true`\n❶ console.log(person1.propertyIsEnumerable(`\"name\"`));       `// true`\n\n  `var` properties `=` `Object`.keys(person1);\n\n  console.log(`\"length\"` `in` properties);                     `// true`\n❷ console.log(properties.propertyIsEnumerable(`\"length\"`));  `// false`\n```", "```\n  `var` person1 `=` {\n❶     _name: `\"Nicholas\"`,\n\n❷     get name() {\n          console.log(`\"Reading name\"`);\n          `return` `this`._name;\n      },\n\n❸     set name(value) {\n          console.log(`\"Setting name to %s\"`, value);\n          `this`._name `=` value;\n      }\n  };\n\n  console.log(person1.name);    `// \"Reading name\" then \"Nicholas\"`\n\n  person1.name = `\"Greg\"`;\n  console.log(person1.name);    `// \"Setting name to Greg\" then \"Greg\"`\n```", "```\n  `var` person1 `=` {\n❶     name: `\"Nicholas\"`\n  };\n\n  `Object`.defineProperty(person1, `\"name\"`, {\n❷     enumerable: `false`\n  });\n\n  console.log(`\"name\"` `in` person1);                      `// true`\n❸ console.log(person1.propertyIsEnumerable(`\"name\"`));   `// false`\n\n  `var` properties `=` `Object`.keys(person1);\n  console.log(properties.length);                      `// 0`\n\n  `Object`.defineProperty(person1, `\"name\"`, {\n❹     configurable: `false`\n  });\n\n  `// try to delete the Property`\n  `delete` person1.name;\n❺ console.log(`\"name\"` `in` person1);                      `// true`\n  console.log(person1.name);                           `// \"Nicholas\"`\n\n❻ `Object`.defineProperty(person1, `\"name\"`, {             `// error!!!`\n      configurable: `true`\n  });\n```", "```\n`var` person1 `=` {\n    name: `\"Nicholas\"`\n};\n```", "```\n`var` person1 `=` {};\n\n`Object`.defineProperty(person1, `\"name\"`, {\n    value: `\"Nicholas\"`,\n    enumerable: `true`,\n    configurable: `true`,\n    writable: `true`\n});\n```", "```\n`var` person1 `=` {};\n\n`Object`.defineProperty(person1, `\"name\"`, {\n    value: `\"Nicholas\"`\n});\n\nconsole.log(`\"name\"` `in` person1);                      `// true`\nconsole.log(person1.propertyIsEnumerable(`\"name\"`));   `// false`\n\n`delete` person1.name;\nconsole.log(`\"name\"` `in` person1);                      `// true`\n\nperson1.name `=` `\"Greg\"`;\nconsole.log(person1.name);                           `// \"Nicholas\"`\n```", "```\n`var` person1 `=` {\n    _name: `\"Nicholas\"`,\n\n    get name() {\n        console.log(`\"Reading name\"`);\n        `return` `this`._name;\n    },\n\n    set name(value) {\n        console.log(`\"Setting name to %s\"``,` `valu`e);\n        `this`._name `=` value;\n    }\n};\n```", "```\n`var` person1 = {\n    _name: `\"Nicholas\"`\n};\n\n`Object`.defineProperty(person1, `\"name\"`, {\n    get: `function`() {\n        console.log(`\"Reading name\"`);\n        `return` `this`._name;\n    },\n    set: `function`(value) {\n        console.log(`\"Setting name to %s\"`, value);\n        `this`._name `=` value;\n    },\n    enumerable: `true`,\n    configurable: `true`\n});\n```", "```\n  `var` person1 `=` {\n      _name: `\"Nicholas\"`\n  };\n  `Object`.defineProperty(person1, `\"name\"`, {\n      get: `function`() {\n          console.log(`\"Reading name\"`);\n❶         `return` `this`._name;\n      }\n  });\n\n  console.log(`\"name\"` `in` person1);                      `// true`\n  console.log(person1.propertyIsEnumerable(\"name\"));   `// false`\n  `delete` person1.name;\n  console.log(`\"name\"` `in` person1);                      `// true`\n\n  person1.name `=` `\"Greg\"`;\n  console.log(person1.name);                           `// \"Nicholas\"`\n```", "```\n  `var` person1 `=` {};\n\n  `Object`.defineProperties(person1, {\n\n❶     `// data property to store data`\n      _name: {\n          value: `\"Nicholas\"`,\n          enumerable: `true`,\n          configurable: `true`,\n          writable: `true`\n      },\n❷     `// accessor property`\n      name: {\n          get: `function`() {\n              console.log(`\"Reading name\"`);\n              `return` `this`._name;\n          },\n          set: `function`(value) {\n              console.log(`\"Setting name to %s\"`, value);\n              `this`._name `=` value;\n          },\n          enumerable: `true`,\n          configurable: `true`\n      }\n  });\n```", "```\n`var` person1 `=` {\n    name: `\"Nicholas\"`\n};\n\n`var` descriptor `=` `Object`.getOwnPropertyDescriptor(person1, `\"name\"`);\n\nconsole.log(descriptor.enumerable);     `// true`\nconsole.log(descriptor.configurable);   `// true`\nconsole.log(descriptor.writable);       `// true`\nconsole.log(descriptor.value);          `// \"Nicholas\"`\n```", "```\n  `var` person1 `=` {\n      name: `\"Nicholas\"`\n  };\n\n❶ console.log(`Object`.isExtensible(person1));     `// true`\n\n❷ `Object`.preventExtensions(person1);\n  console.log(`Object`.isExtensible(person1));     `// false`\n\n❸ person1.sayName `=` `function`() {\n      console.log(`this`.name);\n  };\n\n  console.log(`\"sayName\"` `in` person1);             `// false`\n```", "```\n  `var` person1 `=` {\n      name: `\"Nicholas\"`\n  };\n\n  console.log(`Object`.isExtensible(person1));      `// true`\n  console.log(`Object`.isSealed(person1));          `// false`\n\n❶ `Object`.seal(person1);\n❷ console.log(`Object`.isExtensible(person1));      `// false`\n  console.log(`Object`.isSealed(person1));          `// true`\n\n❸ person1.sayName `=` `function`() {\n      console.log(`this`.name);\n  };\n\n  console.log(`\"sayName\"` `in` person1);              `// false`\n\n❹ person1.name `=` `\"Greg\"`;\n  console.log(person1.name);                      `// \"Greg\"`\n\n❺ `delete` person1.name;\n  console.log(`\"name\"`      `in` person1);            `// true`\n  console.log(person1.name);                      `// \"Greg\"`\n\n  `var` descriptor `=` `Object`.getOwnPropertyDescriptor(person1, `\"name\"`);\n  console.log(descriptor.configurable);           `// false`\n```", "```\n  `var` person1 `=` {\n      name: `\"Nicholas\"`\n  };\n\n  console.log(`Object`.isExtensible(person1));     `// true`\n  console.log(`Object`.isSealed(person1));         `// false`\n  console.log(`Object`.isFrozen(person1));         `// false`\n\n❶ `Object`.freeze(person1);\n❷ console.log(`Object`.isExtensible(person1));     `// false`\n❸ console.log(`Object`.isSealed(person1));         `// true`\n  console.log(`Object`.isFrozen(person1));         `// true`\n\n  person1.sayName `=` `function`() {\n      console.log(`this`.name);\n  };\n\n  console.log(`\"sayName\"` `in` person1);             `// false`\n\n❹ person1.name `=` `\"Greg\"`;\n  console.log(person1.name);                     `// \"Nicholas\"`\n\n  `delete` person1.name;\n  console.log(`\"name\"` `in` person1);                `// true`\n  console.log(person1.name);                     `// \"Nicholas\"`\n\n  `var` descriptor = `Object`.getOwnPropertyDescriptor(person1, `\"name\"`);\n  console.log(descriptor.configurable);           `// false`\n  console.log(descriptor.writable);               `// false`\n```"]