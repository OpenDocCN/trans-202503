["```\nif (`<boolean expression>`) {\n  // code that is executed only when the boolean expression is true\n}\n```", "```\nnum_rows = 10;\nnum_col = 6;\n\nbuilding_width = num_col * 5;\nbuilding_height = num_rows * 6;\n\ndifference() {\n  cube([building_width, 10, building_height]);\n\n  for (1 z = [1:1:num_rows]) {\n    for  (x = [0:1:num_col-1]) {\n    2 if (z == 1) {\n      3 translate([x*5+1, -1, -1]) cube([3, 3, 8]); // door\n      }\n      4 if (z > 1) {\n      5 translate([x*5+1, -1, z*5]) cube([3, 3, 4]);  // window\n      }\n    }\n  }\n}\n```", "```\nif (x > 10 && y <= 20) {\n  translate([x, y, 0]) cube([3, 4, 3]);\n}\n```", "```\nif (x > 10 || y <= 20) {\n  translate([x, y, 0]) cube([3, 4, 3]);\n}\n```", "```\nif (`<boolean expression>`) {\n  // code that is executed only when the boolean expression is true\n}\nelse {\n  // code that is executed only when the boolean expression is false\n}\n```", "```\nnum_rows = 10;\nnum_col = 6;\n\nbuilding_width = num_col * 5;\nbuilding_height = num_rows * 6;\n\ndifference() {\n  cube([building_width, 10, building_height]);\n\n  for (z = [1:1:num_rows]) {\n    for (x = [0:1:num_col-1]) {\n      if (z == 11) {\n       2 translate([x*5+1, -1, -1]) cube([3, 3, 8]); // door\n      }\n      else {\n       3 translate([x*5+1, -1, z*5]) cube([3, 3, 4]);  // window\n      }\n    }\n  }\n}\n```", "```\nif (`<boolean expression>`) {\n  // code that is executed only when the boolean expression is true\n}\nelse if (`<boolean expression>`) {\n  // code that is executed only when the first boolean expression is false\n  // and the second boolean expression is true\n}\nelse {\n  // optional default scenario\n  // code that is executed only when both boolean expressions are false\n}\n```", "```\nruler(5);\n\nmodule ruler(inches) {\n1 gap_size = 1; // 1 unit per quarter inch\n  total_marks = 4 * inches; // inch, half inch, quarter inch\n\n  width = gap_size * total_marks;\n  length = 4 * gap_size;\n  height = 0.5 * gap_size;\n\n  mark_width = 0.25 * gap_size; \n  mark_height = 1.5 * height;\n\n  // main ruler body\n  difference() {\n    cube([width, length, height]);\n    translate([width-gap_size, length-gap_size, -0.5]) \n      cylinder(h=height+1, r=0.15*length, $fn=20);\n  }\n\n  // tick marks\n  2 for(t = [1:1:total_marks-1]) {\n    mark_x = gap_size * t - 0.5 * mark_width;\n\n  3 if (t%4 == 0) { // inch marks and number labels\n      translate([gap_size * t, 0.65 * length, 0])\n        linear_extrude(mark_height)\n          text(str(t/4), size=gap_size, halign=\"center\");\n      translate([mark_x, 0, 0])\n        cube([mark_width, 0.5 * length, mark_height]);\n    }\n    4 else if (t%2 == 0) { // half-inch marks\n      translate([mark_x, 0, 0])\n        cube([0.75 * mark_width, 0.25 * length, mark_height]);\n    }\n    5 else { // quarter-inch marks\n      translate([mark_x, 0, 0])\n        cube([0.5 * mark_width, 0.125 * length, mark_height]);\n    }\n  }\n}\n```", "```\nif (x < 8 && y == 10) {\n  // code that is executed only when both boolean expressions are true\n}\n```", "```\nif (x < 8) {\n  if (y == 10) {\n    // code that is executed only when both boolean expressions are true\n  }\n}\n```", "```\nif (x < 8) {\n  if (y == 10) {\n    // code that is executed only when both x < 8 and y == 10\n  }\n  else if (y < 10) {\n    // code that is executed only when both x < 8 and y < 10\n  }\n  else {\n    // code that is executed only when both x < 8 and y > 10\n  }\n} else {\n  if (y == 10) {\n    // code that is executed only when both x >= 8 and y ==10\n  }\n  else {\n    // code that is executed only when both x >= 8 and y !=10\n  }\n}\n```", "```\n$fn = 100;\nmode = \"print\"; // or \"design\"\n\ncube([200, 60, 10], center=true);\n\nfor (x = [-60:60:60]) {\n  translate([x, 0, 5]) cylinder(h=70, r=4);\n}\n\n1 if (mode == \"design\") {\n  for (d = [2:1:7]) {\n    translate([-60, 0, 10 + (7-d)*10]) disc(d*4, 5);\n  }\n}\n2 else if (mode == \"print\") {\n  for (d = [2:1:7]) {\n    if (d > 4) {\n      translate([60*d - 350, 60, 0]) disc(d*4, 5);\n    }\n    else {\n      translate([60*d - 200, 100, 0]) disc(d*4, 5);\n    }\n  }\n}\n\nmodule disc(disc_radius, hole_radius) {\n  difference() {\n cylinder(h=10, r=disc_radius, center=true);\n    cylinder(h=11, r=hole_radius, center=true);\n  }\n}\n```", "```\nnumber_list = rands(0, 1, 2);\n```", "```\nnumber_list = rands(10, 20, 3);\n\necho(number_list[0]);\necho(number_list[1]);\necho(number_list[2]);\n```", "```\nnumber_list = rands(9.5, 20.49, 3);\n\necho(round(number_list[0]));\necho(round(number_list[1]));\necho(round(number_list[2]));\n```", "```\nnum_rows = 10;\nnum_col = 6;\n\nbuilding_width = num_col * 5;\nbuilding_height = num_rows * 6;\n\ndifference() {\n  cube([building_width, 10, building_height]);\n\n  for (z = [1:1:num_rows]) {\n    for (x = [0:1:num_col-1]) {\n      if (z == 1) {\n        translate([x*5 + 1, -1, -1]) cube([3, 3, 8]);\n      }\n      else {\n        translate([x*5 + 1, -1, z*5]) cube([3, 3, 4]);\n      }\n    }\n  }\n}\n\n1 draw_tower = rands(0, 1, 1);\n\n2 if (draw_tower[0] < 0.5) {\n   translate([building_width/6, 5, building_height])\n     watertower(building_width/4);\n}\n\nmodule watertower(width) {\n  $fn = 20;\n  cylinder(h=5, r=width/2);\n  translate([0, 0, 5]) cylinder(h=5, r1=width/2, r2=0);\n}\n```", "```\n1 use <skyscraper.scad>\n\nnum_buildings = 5;\n\n2 width_list = rands(10, 30, num_buildings); \nlength_list = rands(20, 30, num_buildings);\nheight_list = rands(20, 100, num_buildings);\n\nwindow_row_list = rands(2.5, 10.49, num_buildings);\nwindow_col_list = rands(2.5, 10.49, num_buildings);\n\nwatertower_list = rands(0, 1, num_buildings);\n\nfor (n=[0:1:num_buildings-1]) {\n3 width = width_list[n]; \n  length = length_list[n];\n  height = height_list[n];\n\n4 window_rows = round(window_row_list[n]);\n  window_cols = round(window_col_list[n]);\n\n  watertower = round(watertower_list[n]);\n\n  translate([0, n*30, 0]) {\n  5 skyscraper(width, length, height, window_rows, window_cols, watertower);\n  }\n}\n```"]