- en: 10. biology and bioinformatics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I once came across a beautiful diagram in *Science*[*](footnote.xhtml#fn29)
    showing the metabolic pathways of one of the smallest bacteria, *Mycoplasma pneumoniae*.
    It reminded me of staring at an Apple II schematic when I was less than a decade
    old. Back then, I knew that the Apple II schematic’s fascinatingly complex mass
    of lines was a map to the computer in front of me, though I didn’t know quite
    enough to do anything with that map. But the point was that a map existed, so
    despite its imposing appearance, it gave me hope that I could unravel such complexities.
    Biological “schematics” like the one on the next page give me the same hope.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0326-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Mycoplasma pneumoniae*’s metabolic pathway*
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0326-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The Apple II schematic from my wall*'
  prefs: []
  type: TYPE_NORMAL
- en: The *M. pneumoniae* diagram isn’t quite as precise as the Apple II schematic,
    but from 10,000 feet, they feel similar in complexity and detail. The metabolic
    diagram is detailed enough for me to trace a path from glucose to ethanol, and
    the Apple II schematic is detailed enough for me to trace a path from the CPU
    to the speaker. And just as a biologist wouldn’t make much of a box with 74LS74
    attached to it, an electrical engineer wouldn’t make much of a box with ADH inside
    it. (A 74LS74 contains two instances of a synchronous electronic storage device,
    and ADH is alcohol dehydrogenase, an enzyme coded by gene *MPN564* that can turn
    acetaldehyde into ethanol.)
  prefs: []
  type: TYPE_NORMAL
- en: Furthering the computer analogy, though, the *Science* article’s authors also
    included a list that read like a BOM for *M. pneumoniae* in their supplemental
    material. The pentagonal boxes in the diagram are *enzymes*, proteins that catalyze
    specific chemical reactions. Each enzyme is listed with a functional description
    along with its gene sequence, which is equivalent to source code.
  prefs: []
  type: TYPE_NORMAL
- en: At the very end of that list, I saw a table of uncharacterized genes. If you’ve
    done a bit of reverse engineering, you’ve probably made similar tables for parts
    or function calls in an electronic system. They’re the first place I go for fresh
    clues when I get stuck. I find it heartening to see biologists and hackers applying
    similar techniques to reverse engineering complex systems.
  prefs: []
  type: TYPE_NORMAL
- en: '**COMPARING H1N1 TO A COMPUTER VIRUS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The comparison of biological systems to computer systems doesn’t stop at the
    metabolic level. I once read a fascinating article in *Nature*[*](footnote.xhtml#fn30)
    that compared the pathogenic components of the *novel H1N1 virus* (better known
    as *swine flu*) to those of other flu strains, and that article got me thinking
    about how digital and organic viruses compare. For example, how big is an organic
    virus relative to a digital one? To put the question another way, how many bits
    does it take to kill a human, or at least make one quite sick? In exploring this
    idea, I found it helpful to draw a few analogies between the digital and organic
    worlds.
  prefs: []
  type: TYPE_NORMAL
- en: '**DNA and RNA as Bits**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the H1N1 pandemic broke out in 2009, the virus was comprehensively sequenced
    and logged in the National Center for Biotechnology Information’s (NCBI) Influenza
    Virus Resource database, and the data collected there is amazing. I love the specificity
    of the records. For example, the entire sequence of an instance of influenza known
    as A/Italy/49/2009(H1N1) isolated from the nose of a 26-year-old female *Homo
    sapiens* returning from the United States to Italy is on the NCBI website. Here
    are the first 120 bits of the DNA sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'With 120 bits total, each symbol (A, T, G, or C) represents 2 bits of information.
    In genes, this can be alternatively represented as an amino acid sequence, where
    every three DNA symbols are a *codon* corresponding to one amino acid. Long chains
    of *amino acids* fold into complex structures called *proteins* that give structure
    and function to a cell, and chains of amino acids too short to be a complete protein
    are often called *peptides*. Using a translation lookup table that biologists
    call the standard genetic code, I converted the previous sequence into the following
    peptide: `MKAILVVLLYTFATANADTL`.'
  prefs: []
  type: TYPE_NORMAL
- en: In this sequence, each symbol represents an amino acid, which is the equivalent
    of six bits or three DNA bases per amino acid. There are 20 amino acids in the
    canonical codon table, and each letter corresponds to a different amino acid.
    M is methionine, K is lysine, A is alanine, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Now, consider RNA, which passes information from DNA on how to synthesize proteins
    to the rest of the cell. As with DNA, each base in RNA specifies one of four possible
    symbols (in this case, A, U, G, or C), so a single base corresponds to two bits
    of information. DNA and RNA are information-equivalent on a one-to-one mapping.
    Think of DNA as a program stored on disk and RNA as the same program loaded into
    RAM. When DNA is loaded, protein synthesis instructions are transcribed into RNA,
    but all T bases are replaced with U bases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Proteins, then, are the output of running an RNA program. Proteins are synthesized
    according to the instructions in RNA on a three-to-one mapping. You can think
    of proteins like pixels in a frame buffer, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: • A complete protein is like an image on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: • Each amino acid on a protein is like a pixel.
  prefs: []
  type: TYPE_NORMAL
- en: • Each pixel has a depth of six bits, due to the three-to-one mapping of a medium
    that stores two bits per base.
  prefs: []
  type: TYPE_NORMAL
- en: • Finally, each pixel goes through a color palette (the codon translation table)
    to transform the raw data into a final rendered color. Unlike a computer frame
    buffer, however, different biological proteins vary in amino acid count (analogous
    to a pixel count).
  prefs: []
  type: TYPE_NORMAL
- en: To ground this in a specific example, imagine that six bits stored as ATG on
    your hard drive (DNA) are loaded into RAM (RNA) as AUG because T is transcribed
    as U when going from DNA to RNA. When the RNA program in RAM is executed, AUG
    is translated to a pixel (amino acid) of color M, or methionine, which is the
    biological “start” codon—that is, the first instruction in every valid RNA program.
  prefs: []
  type: TYPE_NORMAL
- en: As a shorthand, since DNA and RNA are one-to-one equivalent, bioinformaticists
    represent gene sequences in DNA format, even if the biological mechanism is in
    RNA format. The influenza virus has an RNA architecture, rather than DNA, and
    the 120 bits of DNA I showed earlier correspond to an RNA subroutine in influenza.
    That subroutine codes for the HA gene, which produces an H1 variety of the hemagglutinin
    protein. This is the *H1* in the H1N1 designation of swine flu.
  prefs: []
  type: TYPE_NORMAL
- en: '**Organisms Have Unique Access Ports**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Given that background information, if you think of organisms as computers with
    IP addresses, each functional group of cells in the organism listens to the environment
    through its own active port. As port 25 maps specifically to SMTP services on
    a computer, port H1 maps specifically to the windpipe region on a human. Interestingly,
    the same port H1 maps to the intestinal tract on a bird. Thus, the same H1N1 virus
    will attack the respiratory system of a human and the gut of a bird. In contrast,
    H5—the variety of hemagglutinin protein found in H5N1, the deadly avian flu—specifies
    the port for your inner lungs. As a result, H5N1 is much deadlier than H1N1 because
    it attacks your inner lung tissue, causing severe pneumonia. H1N1 is less deadly
    because it attacks a more benign port that just makes you blow your nose a lot
    and cough up loogies.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Researchers are still discovering more about the H5 port. The* Nature *article
    I read indicated that perhaps certain human mutants have lungs that don’t listen
    on the H5 port. People whose lungs ignore the H5 port would have a better chance
    of surviving an avian flu infection, while those that open port H5 on the lungs
    have no chance to survive (make your time ... all your base pairs are belong to
    H5N1).[*](footnote.xhtml#fn31)*'
  prefs: []
  type: TYPE_NORMAL
- en: Knowing a virus is deadly, you can figure out how many bits it takes to kill
    a human (or at least make one quite sick) by calculating the number of bits in
    the viral genome. The question, then, is how many bits are in this instance of
    H1N1? The raw number of bits, by my count, is 26,022; the number of actual coding
    bits is approximately 25,054\. I say “approximately” because in some places, the
    virus does the equivalent of self-modifying code to create two proteins out of
    a single gene. It’s hard to say what counts as code and what counts as an incidental,
    nonexecuting NOP sled required for the self-modified code.
  prefs: []
  type: TYPE_NORMAL
- en: That means it takes about 25Kb or 3.2KB of data to code for a virus that has
    a nontrivial chance of killing a human. This is more efficient than a computer
    virus like MyDoom, which comes in around 22KB. Knowing that I could be killed
    by 3.2KB of genetic data is humbling. Then again, with roughly 800MB of data in
    my genome, there’s bound to be an exploit or two.
  prefs: []
  type: TYPE_NORMAL
- en: '**Hacking Swine Flu**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One interesting consequence of reading this *Nature* article and having access
    to the virus sequence is that in theory, I now know how to modify the virus sequence
    to make it deadlier. For instance, the *Nature* article notes that variants of
    the PB2 influenza gene with glutamic acid at position 627 in the sequence have
    a *low pathogenicity*, meaning they aren’t very deadly. However, PB2 variants
    with lysine at the same position increase the likelihood of mortality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see the sequence of PB2 for H1N1\. Going back to the NCBI database, I
    found the following amino acid sequences around position 627:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The numbers to the left indicate the position of the first symbol in each line
    of the sequence; I’ll follow that convention for the rest of this discussion.
    Check the line labeled 621, and note the E in position 627\. E is the symbol for
    glutamic acid. Thankfully, H1N1 seems to be a less-deadly version of influenza;
    perhaps this is why fewer people died from contracting H1N1 than the media might
    have led you to believe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s reverse this back to the DNA code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice the GAA codes for E. To modify this genome to be deadlier, you’d simply
    need to replace GAA with one of the codes for lysine (K). Lysine can have a code
    of either AAA or AAG. Thus, a deadlier variant of H1N1 would have a coding sequence
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: So, a single base-pair change—simply flipping two bits— might be all you’d need
    to turn the H1N1 swine flu virus into a deadlier variant. Theoretically, I could
    apply a series of well-known biological procedures to synthesize this strain and
    actually implement the hack. As a first step, I could go to a DNA synthesis website
    and order the modified sequence to get my deadly little project going for just
    over $1,000\. Some of those companies have screening procedures to protect against
    DNA sequences that could be used to implement biohazardous products, but even
    if they happened to screen for HA variants, there are well-known protocols for
    site-directed mutagenesis that could possibly be used to modify a single base
    of RNA from material extracted from normal H1N1.
  prefs: []
  type: TYPE_NORMAL
- en: '**Adaptable Influenza**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Of course, I have to give influenza some credit. It packs a deadly punch in
    3.2KB, and despite scientists’ best efforts, we haven’t eradicated it. Could influenza
    do hacks like the one I just described on its own already?
  prefs: []
  type: TYPE_NORMAL
- en: The short answer is yes.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, the influenza virus evolved to allow for these adaptations. Normally,
    when DNA is copied, an error-checking protein runs over the copied genome to verify
    that no mistakes were made. This keeps the error rate quite low. But remember,
    the influenza virus uses an RNA architecture. It therefore needs a different mechanism
    from DNA for copying.
  prefs: []
  type: TYPE_NORMAL
- en: Inside its protein capsule, the influenza virus packs code for a protein complex
    called *RNA-dependent RNA polymerase*, which is a tiny machine for copying RNA
    off of RNA templates. Normally, RNA is only generated by transcribing DNA, not
    by copying an existing piece of RNA, so this mechanism is essential for the replication
    of RNA-based influenza. Significantly, RNA-dependent RNA polymerase omits an error-checking
    protein that would prevent mutations. The result is that influenza makes about
    one error per 10,000 base pairs that get copied. The influenza genome is about
    13,000 base pairs long, so on average, every copy of an influenza virus has one
    random mutation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of these mutations make no difference; others render the virus harmless;
    and quite possibly, some render the virus much more dangerous. Since viruses are
    replicated and distributed in astronomical quantities, the chance that this little
    hack could end up occurring naturally is in fact quite high. I think this is part
    of the reason health officials were so worried about H1N1: people had no resistance
    to it, and even though it wasn’t as deadly as it could have been, the strain was
    probably just a couple of mutations away from being a much bigger health problem.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one other important subtlety to the RNA architecture of the influenza
    virus, aside from its high mutation rate: the virus’s genetic information is stored
    as eight separate, relatively short, snippets of RNA. In many other viruses and
    simple organisms, genetic information is instead stored as a single unbroken strand.'
  prefs: []
  type: TYPE_NORMAL
- en: To understand why that’s important, consider what happens when a host is infected
    by two types of the influenza virus at the same time. If the genes were stored
    as a single piece of DNA or RNA, there would be little opportunity for the genes
    between the two types to shuffle. But because influenza stores its genes as eight
    separate snippets, those genes mix freely inside the infected cell and are randomly
    shuffled into virus packets as they emerge. If you’re unlucky enough to get two
    types of flu at once, the result is a potentially novel strain of flu, as RNA
    strands are copied, mixed, picked out of the metaphorical hat, and then packed
    into virus particles. This process is elegant in that the same mechanism allows
    for mixing of an arbitrary number of strains in a single host. If you can infect
    a cell with three or four types of influenza at once, the result is an even wilder
    variation of flu particles.
  prefs: []
  type: TYPE_NORMAL
- en: This mechanism is part of the reason novel H1N1 is called a *triple-reassortant*
    virus. Through a series of dual infections or perhaps a single calamitous infection
    of multiple flu varieties, novel H1N1 acquired a mix of RNA snippets that gave
    it high transmission rates and made it something humans weren’t innately immune
    to. That’s the perfect storm for a pandemic.
  prefs: []
  type: TYPE_NORMAL
- en: If there were a computer analogy to this RNA-shuffling model, it would be a
    virus that distributes itself in the form of unlinked object code files plus a
    small helper program that, upon infecting a host, relinks its files in a random
    order before copying and redistributing itself. It would also search for similar
    viruses that may already be infecting that computer and on occasion link in object
    code with matching function templates from the other viruses. This rearrangement
    and novel relinking of the code itself would foil classes of antivirus software
    that search for virus signatures based on fixed code patterns. It would also proliferate
    a diverse set of viruses in the wild, with less predictable properties.
  prefs: []
  type: TYPE_NORMAL
- en: The influenza virus’s multilevel adaptation mechanism is remarkable. The virus
    has both a slowly evolving point mutation mechanism and a mechanism for drastically
    altering its properties in a single generation through gene-level mixing with
    other viruses. It doesn’t work quite like sex, but the result is probably just
    as good, if not better. It’s also remarkable that these two important properties
    of the virus arise as a consequence of using RNA instead of DNA as the genetic
    storage medium.
  prefs: []
  type: TYPE_NORMAL
- en: '**A Silver Lining**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since there are so many variants of flu, no vaccine can target all types of
    the virus, but the H1N1 story does have a silver lining. Apparently, a patient
    who contracted swine flu during the pandemic created a novel antibody with the
    remarkable ability to confer immunity to all 16 subtypes of influenza A. A group
    of researchers sifted through the patient’s white blood cells and managed to isolate
    four B cells that contained the code to produce this antibody. They cloned the
    cells and produced antibodies, facilitating further research into a potential
    vaccine that could confer broad protection against the flu.
  prefs: []
  type: TYPE_NORMAL
- en: I found this really interesting at a gut level because it gives me hope that
    if a killer virus did wipe out most of humanity, maybe a small group of people
    would survive it.
  prefs: []
  type: TYPE_NORMAL
- en: '**REVERSE ENGINEERING SUPERBUGS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In 2011, a “superbug” strain of *E. coli* (a species of bacteria with subtypes
    that can cause food poisoning) called EHEC O104:H4 broke out in Europe. When I
    found out that scientists at BGI, located in Shenzhen, had released the entire
    sequence of O104:H4 freely online for anyone to examine, I got very curious about
    the situation. I couldn’t help but wonder exactly what tools bioinformaticists
    use to analyze DNA sequences. Manually inspecting the relatively simple sequences
    of the influenza virus is one thing, but there must be computational tools to
    help make sense of more complicated organisms like *E. coli*.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, my perlfriend (`s/perl/girl/`) is also a noted bioinformaticist.
    She took some time out of her busy schedule to show me some tools of the trade.
    It turns out most of the tools for analyzing DNA are freely available online.
    Since DNA is just sequences of A’s, T’s, G’s, and C’s, the standard data interchange
    format is plain old ASCII text, which means you can do a lot of analysis using
    command-line tools like `grep`, `sed`, and `awk`.
  prefs: []
  type: TYPE_NORMAL
- en: '**The O104:H4 DNA Sequence**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The raw sequence data BGI provided was a set of oversampled subsequences that
    we needed to assemble by matching up overlapping regions. Stitching subsequences
    together is a bit like composing a large picture from small photos taken at random.
    With enough sampling, you’ll eventually create a mostly complete picture, but
    the image will still have ambiguities, particularly in areas with regular patterns.
  prefs: []
  type: TYPE_NORMAL
- en: 'The genome of O104:H4 was provided as a list of over 500,000 short DNA samples.
    The assembly process stitched the short DNA samples together into 513 contiguous
    fragments of DNA (known as *contigs*), with a total genome length of 5.3 million
    base pairs. An organism like *E. coli* has just one big loop of DNA, so there
    were 513 spots where limitations in the sequencing technology (or just bad luck)
    missed an unknown number of base pairs, preventing us from knowing the entire,
    unbroken sequence. Notably, a typical, non-superbug strain of *E. coli* has around
    4.6 million base pairs, so O104:H4 is probably at least 15 percent longer. Likewise,
    this strain would take more time to replicate than a non-drug-resistant strain.
    Take a look at contig 34 of the assembly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: I could have picked any contig, and it probably would have made about as much
    sense to you as this block of letters. Aside from making gratuitous pop culture
    references (the word *GATTACA* occurs 252 times in the genome of O104:H4), the
    raw DNA sequence isn’t very insightful. It’s a bit like staring at binary machine
    code. To analyze the data, you need to “decompile” the “methods” contained within
    the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we were searching for DNA sequences that code for *proteins.*
    As I mentioned earlier, proteins are complex, often interwoven chains of molecules
    consisting of small building blocks known as amino acids. Cells get things done
    using proteins: some proteins turn sugar into energy, others use that energy to
    move around or change the cell’s shape, and still others are responsible for copying
    and repairing the cell.'
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, protein sequences are highly conserved in DNA. Nature tends to
    reuse protein structures, with few modifications, between organisms. Thus, a function
    that has been determined through a biological experiment, even on another species,
    can often be correlated with a sequence of DNA. For instance, one common experiment
    for determining the function of a sequence is to cut a piece of DNA out of a cell
    and observe what happens to the cell; the loss of function resulting from the
    missing DNA is often indicative of the protein’s role in the cell.
  prefs: []
  type: TYPE_NORMAL
- en: Biologists have amassed decades of research on what certain proteins do into
    huge databases. Thus, to figure out what a chunk of DNA means, you can do a fuzzy
    pattern match between your DNA of interest and the database of known proteins.
  prefs: []
  type: TYPE_NORMAL
- en: '**Reversing Tools for Biology**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'I needed two tools to reverse engineer DNA: a protein database and a piece
    of software called BLASTX. Both are free to download online.'
  prefs: []
  type: TYPE_NORMAL
- en: THE UNIPROT DATABASE
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: I downloaded a list of known proteins from the Universal Protein Resource, or
    UniProt (*[http://www.uniprot.org/](http://www.uniprot.org/)*). In 2011, a search
    of the database for “drug resistance” restricted to *E. coli* organisms yielded
    a list of 1,378 proteins that scientists have identified over the years as parts
    of the *E. coli* bacteria’s drug-resistance machinery. Every year, new discoveries
    are added to the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a snippet from the database that describes a protein that gives O104:H4
    resistance to a drug you may recognize:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: PBP2_ECOLI[*](footnote.xhtml#fn32) is linked to penicillin resistance and is
    a mutated gene that determines the shape of the bacteria. It seems this resistant
    variant adapted to operate despite the presence of penicillin; bacteria with nonresistant
    forms of the gene are unable to form properly shaped cell walls in the presence
    of penicillin, and are killed by the drug. Other genes might cause more active
    countermeasures, like pumping an antibiotic out of the cell or modifying the antibiotic
    to be less toxic to the cell. Browsing the UniProt database gives you a feel for
    the huge variety of genes available in nature that can make bacteria resistant
    to drugs.
  prefs: []
  type: TYPE_NORMAL
- en: THE DECOMPILER
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Next, I needed the actual decompiler. That’s where BLASTX (eventually updated
    to BLAST+) came in. BLASTX is a variant of BLAST, which stands for *Basic Local
    Alignment Search Tool*. First, I had this analysis program compute all possible
    translations of the *E. coli* DNA to protein sequences. Translating DNA results
    in six possible protein sequences: DNA can be read forward and backward (known
    as 5′→3′ and 3′→5′), and each direction has three possible frame positions. Then,
    I had the program check for patterns among the resulting amino acid sequences
    that matched the database of sequences known to provide drug resistance. (I could
    have also checked for other types of patterns, by typing something different into
    the database query.) The result was a sorted list of each known drug resistance
    protein, along with the region of the *E. coli* genome that best matches the protein.'
  prefs: []
  type: TYPE_NORMAL
- en: The following is the BLASTX output for the penicillin example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The Fields line describes what each column in the table shows. In the % identity
    column, you can see that the gene for PBP2_ECOLI has a 100 percent match inside
    the genome of O104:H4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Answering Biological Questions with UNIX Shell Scripts**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'With this list, I could answer some interesting questions, like “How many of
    the known drug resistance genes are inside O104:H4?” Here’s the one-liner program
    that my perlfriend wrote to answer that particular question:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The output from that script told us that 1,138 genes in O104:H4 were a 100 percent
    match against the database of 1,378 genes that can confer drug resistance. When
    we loosened the criteria to also list 99 percent matches, allowing for one or
    two mutations per gene, the list expanded to 1,224 out of 1,378\. The “superbug”
    O104:H4 earned its title, having acquired roughly 90 percent of the known resistance
    genes!
  prefs: []
  type: TYPE_NORMAL
- en: 'I also wanted to answer the inverse question: which drug-resistance genes are
    most definitely not in O104:H4? By looking at the resistance genes missing from
    a superbug, we might be able to gather clues as to which treatments could be effective
    against the bug.'
  prefs: []
  type: TYPE_NORMAL
- en: To rule out a drug-resistance gene, we crafted another search that would reveal
    which resistance genes in the database had less than a 70 percent match against
    the sequence of O104:H4\. The 70 percent threshold was just an arbitrary number
    I picked; there’s probably a rigorous standard that scientists and clinicians
    use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the list, as it appeared in my terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can plug any of these protein codes into the UniProt database and find
    out more about them. For example, BLR is beta-lactamase, an enzyme that causes
    resistance to beta-lactam antibiotics. UniProt describes it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Has an effect on the susceptibility to a number of antibiotics involved in peptidoglycan
    biosynthesis. Acts with beta lactams, D-cycloserine and bacitracin. Has no effect
    on the susceptibility to tetracycline, chloramphenicol, gentamicin, fosfomycin,
    vacomycin or quinolones. Might enhance drug exit by being part of multisubunit
    efflux pump. Might also be involved in cell wall biosynthesis.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, a cursory inspection revealed that most functions that O104:H4
    lacked were just small, poorly understood fragments of machines involved in drug
    resistance. As a result, there was no clear candidate for a superbug killer in
    its genome.
  prefs: []
  type: TYPE_NORMAL
- en: '**More Questions Than Answers**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The good news is that anyone can access the tools to analyze genomes, and some
    tools, such as grep, awk, and sed, are already familiar to computer engineers.
    The bad news is that while we can ask questions about the genome with these tools,
    we’re still left with more questions than answers. For example, antibiotic resistance
    sounds like a good thing for the survival of bacteria, so why don’t all bacteria
    have it? And how do bacteria go about acquiring (or losing) such genes?
  prefs: []
  type: TYPE_NORMAL
- en: The rise of antibiotic-resistant superbugs is a product of our love of antibiotics.
    As DNA in *E. coli* copies at a rate of about a dozen base pairs per second, shedding
    even a single unused gene can lend a meaningful advantage in an exponential growth
    race; after all, an *E. coli* population can double every 20 minutes in optimal
    conditions. As a result, there is selective pressure to shed genes that aren’t
    necessary for survival. The genome of O104:H4 is 15 percent longer than that of
    a typical *E. coli* strain, which means that after seven generations, a typical
    *E. coli* strain would have twice the population of O104:H4\. Within half a day
    under optimal, antibiotic-free growth conditions, a strain of *E. coli* unburdened
    with antibiotic resistance genes would have over 20 times the population of O104:H4\.
    Thus, a bacterium that hangs on to its antibiotic resistance genes is like a sprinter
    wearing a bulletproof vest to a race. Likewise, one of the greatest natural threats
    to superbugs is a lean, fast-replicating common bug that can edge out the superbug
    by sheer numbers alone.
  prefs: []
  type: TYPE_NORMAL
- en: However, bacteriocidal and bacteriostatic antibiotics kill off or prohibit growth
    of nonresistant bugs, respectively, leaving only the resistant bugs to grow unhindered.
    Over time and with exposure to several types of antibiotics, it stands to reason
    that the resistant bug population would continue to selectively breed for multiple
    resistance genes, creating a superbug.
  prefs: []
  type: TYPE_NORMAL
- en: Still, I find it astonishing that resistant bugs seem to develop resistance
    genes so quickly. We’re taught that evolution is a slow process, so it seems remarkable
    that bacteria can serendipitously evolve a suite of antibiotic resistance genes
    totaling hundreds of thousands of base pairs. New genes do in fact take a very
    long time to spontaneously arise (there are very few clearly documented cases
    of this, such as the Long-Term Evolution Experiment by Richard Lenski). Instead,
    most resistance genes are acquired from the environment through *horizontal gene
    transfer*.
  prefs: []
  type: TYPE_NORMAL
- en: Our environment is teeming with DNA fragments. The GitHub of biology is all
    around us, from the dirt to the sea to the air we breathe. Some DNA fragments
    code for useful traits; some are just junk. When a bacterium is under stress (like
    it is when exposed to antibiotics), it may start to take up random DNA fragments
    from the environment and manufacture proteins based off the code. If it’s going
    to die anyway, it might as well, right? Most of the time, the incorporated DNA
    fragments are not helpful, but if one lucky bacterium picks up the necessary resistance
    gene from the environment, it can rapidly outcompete others in an antibiotic-laden
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, while nonresistant strains of a bug will rapidly outnumber antibiotic-resistant
    strains, the tiny remaining population of resistant bugs (or perhaps even their
    lifeless bodies floating about in the environment) form a reservoir of genetic
    material that can be drafted in times of stress. And since the genetic code is
    interoperable across all species, resistance genes can even be acquired from unrelated
    organisms.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering that the functions O104:H4 lacked were poorly understood was an
    interesting lesson in itself. Fiction popularizes the notion that knowing a DNA
    sequence is the same as knowing what diseases or traits an organism may have.
    But even though we know the sequences and general properties of many proteins,
    it’s much harder to link proteins to a specific disease or trait. At some point,
    someone has to get their hands dirty and do biological experiments involving actual
    organisms to assign biological significance to a given protein family.
  prefs: []
  type: TYPE_NORMAL
- en: Pop culture references to DNA analysis are glibly unaware of this missing link
    in the process, which leads to overinflated expectations for genetic analysis,
    particularly in its utility for diagnosing and curing human disease and applications
    in eugenics. Let’s take a closer look at some of those myths.
  prefs: []
  type: TYPE_NORMAL
- en: '**MYTHBUSTING PERSONALIZED GENOMICS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’re definitely living in The Future in a lot of ways. For instance, we have
    electric cars! But Hollywood reels from the ’60s and ’70s also predicted that
    I’d be using a flying car to get around town by now, not just an electric car
    on the ground. Of course, automotive technology isn’t the only victim of Hollywood
    hype.
  prefs: []
  type: TYPE_NORMAL
- en: The potential impact of personalized genomics is greatly overstated in movies
    like *GATTACA*, which create a myth that your genome is like a crystal ball, and
    somehow your fate is predestined by your genetic programming. The perlfriend I
    mentioned earlier coauthored a paper in *Nature*[*](footnote.xhtml#fn33) examining
    23andMe’s direct-to-consumer (DTC) personal genomics offerings. Let’s have a look
    at her paper, and let the mythbusting begin!
  prefs: []
  type: TYPE_NORMAL
- en: '**Myth: Having Your Genome Read Is Like Hex-Dumping the ROM of Your Computer**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: An inexpensive technique to look at parts of the genome is called *genotyping*.
    Here, a selective diff is done between your genome and a reference human genome;
    in other words, your genome is simply sampled in potentially interesting spots
    for single-point mutations called *single nucleotide polymorphisms* (SNPs, pronounced
    “snips”). The concept of genotyping naturally leads to two questions. First, how
    do you decide which SNPs are interesting enough to sample? And second, how do
    you know the reference genome is an accurate comparison point? This sets up two
    more busted myths.
  prefs: []
  type: TYPE_NORMAL
- en: '**Myth: We Know Which Mutations Predict Disease**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Some mutations in the human genome simply correlate with disease; they are not
    proven to be predictive or causal. In truth, we really don’t understand why many
    genetic diseases happen. For poorly understood diseases, all we can say is that
    people who have a particular disease tend to have a certain pattern of SNPs. It’s
    important not to confuse causality with correlation.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, while scientists can make predictions about diseases based on SNPs, most
    of those predictions are correlative, not causative (and weakly correlative, at
    that). As a result, a genotype should not be considered a crystal ball for predicting
    your disease future. Rather, it’s closer to a Rorschach blot that you have to
    squint and stare at for a while before you can say what it means. For instance,
    in the paper my perlfriend wrote, she found that companies often didn’t match
    up on their predictions for disease risk because they interpreted mutation meanings
    differently.
  prefs: []
  type: TYPE_NORMAL
- en: '**Myth: The Reference Genome Is an Accurate Reference**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The word *reference* in *reference genome* should tip you off on a problem:
    it implies there are “reference people.” Ultimately, just a handful of individuals
    were sequenced to create today’s reference genome, and most of them are of European
    ancestry. As time goes on and more full-sequence genetic data is collected, the
    reference genome will be merged and massaged to present a more accurate picture
    of the overall human race, but for now, it’s important to remember that a genotype
    study is a diff against a source repository of questionable universal validity.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, some SNPs have different frequencies in different populations.
    The base A might dominate in a European population, but at that same position
    in an African population, the base G could dominate. It’s also important to remember
    that the reference genome has an aggregate error rate of about 1 error in 10,000
    base pairs, although to be fair, the process of discovering a disease variant
    usually cleans up any errors in the reference genome for the relevant sequence
    regions.
  prefs: []
  type: TYPE_NORMAL
- en: 'It will be decades before we have a full understanding of what all the sequences
    in the human genome mean, and even then, they may not be truly predictive of disease
    risk or anything else about our health. Here lies perhaps the most important message,
    and a point I can’t stress enough: in most situations, environment has more to
    do with who you are, what you will become, and what diseases you will have than
    your genes do. Any upside to personal genomics won’t be due to crystal-ball predictions,
    but rather to the fact that knowing about their own genetic predispositions may
    encourage more people to make lifestyle changes that will help them stay healthy.
    If there’s one thing I’ve learned from dating a preeminent bioinformaticist, it’s
    that no matter your genetic makeup, most common diseases can be prevented or delayed
    with proper diet and exercise.'
  prefs: []
  type: TYPE_NORMAL
- en: '**PATCHING A GENOME**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'So far in this chapter, I’ve given examples of sequencing and analyzing genomes.
    That’s more or less the equivalent of being able to dump a program executable
    and analyze it in IDA. Oftentimes, after you analyze an executable, you’ll want
    to patch it to do something new. Patching software is relatively straightforward
    and reliable: just fire up a hex editor and change the file. In the worst case,
    you might have to use a focused ion beam (FIB) to modify the individual wires
    of a mask ROM inside a chip.'
  prefs: []
  type: TYPE_NORMAL
- en: 'But historically, the ability to patch a genome has been severely limited.
    Information in cells is stored at the molecular level, and changing a specific
    portion of a gene can be a painstaking process. Just as vacuum tubes and transistors
    came before the integrated circuit, zinc finger nucleases (ZFNs) and transcription
    activator-like effector nucleases (TALENs) enabled gene editing, but with significant
    caveats in efficiency, performance, and ultimately, cost. In 2012, the integrated
    circuit of gene editing was introduced: the CRISPR/Cas[*](footnote.xhtml#fn34)
    system.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CRISPRs in Bacteria**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CRISPR, short for *clustered regularly interspaced short palindromic repeat*,
    describes a particular RNA structure, while Cas are proteins that associate with
    CRISPRs. CRISPRs are, as far as biologists know, common only in bacteria and archaea
    (for example, fungi), and they’re part of a devilishly clever system for immunity
    in simple organisms. Like humans, bacteria have immune systems that can be programmed
    through exposure to pathogens. When bacteria encounter a viral invader, they have
    proteins that can snip out short sequences of the viral DNA and archive the sequences
    as spacers in a CRISPR.
  prefs: []
  type: TYPE_NORMAL
- en: Labs that failed for months to edit a gene using TALENs switched to CRISPR/Cas
    and succeeded on the first try. They succeeded so quickly because the process
    just involves designing a short snippet of RNA that’s inserted into a CRISPR,
    a simple exercise that can be done entirely on a computer or, I daresay, by hand.
    The RNA snippet itself can be fabricated in about a week for less than $50 using
    one of several service providers, replacing a significant amount of wet lab complexity
    with an informatics exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Each CRISPR region is tagged by a leader sequence, immediately followed by the
    CRISPR proper. A CRISPR itself consists of a guide RNA (gRNA) or “spacer” sequence
    delimited by a well-defined DNA *direct repeat* sequence that is palindromic.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The term* spacer *is used when discussing an immune system, while* guide RNA
    *is used when discussing genome editing. Calling a region of interest a spacer
    is confusing, but misnomers can happen with reverse engineering. I can’t blame
    scientists for first noticing a pattern of repeating delimiters and calling the
    stuff between the delimiters “spacers.” After all, physicists got the current
    flow convention backward and stuck with it. Who are we to judge?*'
  prefs: []
  type: TYPE_NORMAL
- en: Palindromic typically means that a string is equivalent when simply reversed,
    like the word *racecar*. When biologists say a sequence is “palindromic,” they
    mean the sequence is equivalent when first complemented (A→T, T→A, G→C, C→G) and
    then reversed. For instance, GAATTC is considered biologically palindromic, even
    though it is not lexically palindromic.
  prefs: []
  type: TYPE_NORMAL
- en: The CRISPR/Cas system was described shortly after the demise of Chumby, and
    at the time, I was interning at Dr. Swaine Chen’s infectious diseases laboratory
    at the Genome Institute of Singapore. Among other things, I studied various strains
    of *E. coli* that induce urinary tract infection, under the guidance of Lu Ting
    Liow. While assisting an investigation into portions of phage virus DNA that found
    its way into *E. coli*, I was asked to write a script to identify palindromic
    and repeating sequences of DNA in the *E. coli* genome. My script showed that
    the genome was littered with the sequences; I figured the code had a bug and didn’t
    think much of the result. But perhaps some of the direct repeats I saw were portions
    of a CRISPR.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at a CRISPR from a strain of *E. coli* now. This is the CRISPR direct
    repeat sequence for *E. coli* O104:H4:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The bolded base pairs are the palindromic regions. When this DNA sequence is
    translated into RNA (so that T→U), the palindromic region can pair with itself,
    forming a hairpin or stem loop, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0349-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*A stem loop*'
  prefs: []
  type: TYPE_NORMAL
- en: 'This shape hints at the significance of the repeated palindromic structures
    in a CRISPR: when translated into RNA, the sequence can fold onto itself, forming
    a *secondary structure*. It’s important to remember that genes are not just lines
    of code; they are physical molecules whose overall shape significantly impacts
    their function. Biologists use a four-tier system for describing the physical
    structure that molecules like DNA, RNA, and proteins can take based on their source
    code. Primary structure is simply the sequence of monomers (bases or amino acids).
    *Secondary structure* refers to physical shapes that arise from the localized
    interactions of monomers, due to physical properties such as the spacing and number
    of hydrogen bonds between molecules, or the affinity of certain monomers for water.
    In RNA and DNA, that means structures like hairpin loops; in proteins, it means
    structures like spirals and sheets. Tertiary structure refers to the complex 3D
    shape of a molecule that arises from long-distance interactions between potentially
    remote portions of the primary sequence. Tertiary structure is particularly applicable
    to proteins, as some amino acids, such as cysteine, can cross-link with each other
    over longer distances. Quaternary structure refers to structures formed from the
    interaction of multiple molecules. A Cas9/RNA complex is an example of a quaternary
    structure. The final, chemically active and targeted molecule arises only when
    a Cas9 protein is merged with a gRNA, and the stem loop secondary structure of
    the gRNA is necessary for Cas9 to recognize it.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Determining Where to Cut a Gene**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'RNA derived from a CRISPR region through transcription is incorporated into
    a protein complex with other Cas proteins. Specific Cas proteins (such as Cas9)
    use the RNA as a search-and-destroy template: the Cas9/RNA complexes float around
    the cell, and when they find a DNA sequence that matches the RNA template, they
    selectively cut the DNA at the template site, effectively neutralizing the intruding
    virus. But you may have noticed a recursion problem: the Cas9/RNA complex should
    also cut up the CRISPR region in the host organism’s genome, as that region also
    has the target pattern. This would effectively destroy the CRISPR region for future
    use.'
  prefs: []
  type: TYPE_NORMAL
- en: To avoid destroying the CRISPR region, the Cas9/RNA complex targets the template
    DNA plus a short, defined three-to-five base pair sequence called a *proto-space
    adjacent motif* (PAM). For example, the PAM for a popular Cas9 protein from *S.
    pyogenes* is [AGTC]GG when written in regular expression format; biologists use
    a different convention, NGG, to say the same thing. As long as the CRISPR archive
    doesn’t include the PAM sequence, it won’t be cut up by the complex.
  prefs: []
  type: TYPE_NORMAL
- en: The PAM requirement means there are some limitations on where you can cut a
    gene. It’s a bit like targeting only hex strings that end in 0xC3 or searching
    for return-oriented programming (ROP) gadgets. Just as hackers searching for ROP
    gadgets look for short sequences of instructions that end in a RET opcode, bioinformaticists
    have to search for short sequences of DNA to edit that end in a PAM.
  prefs: []
  type: TYPE_NORMAL
- en: Despite these limitations, CRISPR/Cas has proven to be a versatile and reliable
    gene-editing tool. It has been adapted to both cut genes and paste in new sequences.
    Making a precise cut at an arbitrary location in DNA is the hardest step of inserting
    new DNA. But in conjunction with well-studied techniques like non-homologous end
    joining (NHEJ) or homology-directed repair (HDR), CRISPR/Cas can be used to insert
    modifications into a gene.
  prefs: []
  type: TYPE_NORMAL
- en: '**Implications for Engineering Humans**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Even though CRISPR/Cas is a naturally occurring system found in bacteria and
    fungi, the universal genetic code means the system is binary-compatible with all
    species, including humans. Before this system was discovered, genes were largely
    read-only, especially in living organisms. CRISPR/Cas gives us a much more reliable
    and efficient tool to patch and repair genes, without necessarily disrupting the
    viability of the host organism. Biologists have managed to pack the necessary
    DNA for a CRISPR/Cas exploit into viruses, enabling them to sneak these gene-editing
    tools through the cell walls of live, complex organisms like mice, plants, and
    humans. The structure of a CRISPR also allows scientists to perform multiple edits
    in a single experiment, expanding the experimental and therapeutic versatility
    of the technique.
  prefs: []
  type: TYPE_NORMAL
- en: This technology has already been validated on human cells, even human embryos,
    and the implications are simply mind-boggling. Regardless of ethical standards
    set by the scientific and legal communities in your country of residence, I think
    the promise of custom-designed children, free of genetic diseases that once plagued
    parents, is too strong a temptation. Even if most countries banned such a practice,
    I feel it’s inevitable that someone, somewhere, perhaps funded by a wealthy billionaire
    unable to have viable children of their own, will start tinkering with custom-engineered
    humans. If the results are positive, it will likely change the course of humanity
    more profoundly than Moore’s law. And that’s if a mechanism called *gene drive*
    doesn’t get there first.
  prefs: []
  type: TYPE_NORMAL
- en: '**Hacking Evolution with Gene Drive**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Gene drive rewrites the rules of sexual reproduction and, consequently, evolution
    in a way previously unseen in nature. You might know that you have two copies
    of every gene: one from your mother and one from your father. Each copy is an
    *allele*. If the alleles match, you’re said to be *homozygous* for that gene.
    If the alleles are different, you’re *heterozygous* for it. Normally, which allele
    a child gets from each parent is a coin toss, and the fitness of a child in a
    given environment is the primary deciding factor for passing a set of alleles
    on to a new generation.'
  prefs: []
  type: TYPE_NORMAL
- en: Gene drive eliminates this coin toss. Environmental selection is short-circuited,
    allowing genes with potentially negative side effects to propagate rapidly in
    a population. This exploit is made possible by outfitting the desired allele with
    a CRISPR/Cas-assisted gene-editing mechanism that targets and converts a heterozygous
    allele into a homozygous allele. For example, if a mother has a gene outfitted
    with a CRISPR/Cas-assisted gene drive mechanism, it doesn’t matter what the father’s
    genes are. Inside the child, the mother’s copy will express the CRISPR/Cas editing
    mechanisms, seeking out the father’s copy and editing it to be the same as the
    mother’s.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of disruptive power, if CRISPR/Cas is the rm command, then gene drive
    is like calling `rm -r *` instead.
  prefs: []
  type: TYPE_NORMAL
- en: This has a profound effect on natural selection. Forget survival of the fittest;
    changes no longer have to strictly benefit an organism’s fitness to spread through
    the population. Furthermore, gene-driven changes can sweep through a natural population
    at an exponential rate (much faster than typical mutations) because they don’t
    rely on coin tosses and natural selection to amplify a mutation.
  prefs: []
  type: TYPE_NORMAL
- en: On the upside, gene drive could be used to force good changes into the world,
    like malaria-free mosquitoes. On the downside, this new mechanism, previously
    unseen in nature, could wreck havoc on evolution and the ecosystem. Although our
    changes could be well engineered and well intentioned, nature likes to shake things
    up through mutations, spontaneous rearrangements, and horizontal gene transfer.
    If a gene-driven organism were to pick up extra genes in the payload region, the
    outcome could be unpredictable.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, malaria-free mosquitoes would benefit humans, but mosquitoes also
    play a large role in the Earth’s ecosystem as a food source for fish and birds.
    If modified mosquitoes failed to thrive and occupy their ecological niche, there
    could be a domino effect that hurts other species. This could all happen on a
    timescale so short that we may not be able to reverse it if we tried. Furthermore,
    organisms like mosquitoes don’t recognize geopolitical boundaries. Thus, banning
    gene drive in most of the world doesn’t make anyone safe from its potential consequences.
    If just one well-engineered organism makes it into the wild, everyone has to deal
    with it.
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps it’s no mistake that CRISPR/Cas has been found only in bacteria and
    archaea—organisms that are known to reproduce asexually. Perhaps the ability to
    short-circuit the fitness requirement in sexual reproduction rapidly degrades
    the overall fitness of any germ line carrying a CRISPR/Cas mutation so that the
    line goes extinct before it can take over a population. After all, any accidental
    genes or spontaneous mutation that finds its way into a CRISPR/Cas payload would
    also sweep through the population as quickly as the initial drive.
  prefs: []
  type: TYPE_NORMAL
- en: The question, then, is how long does it take for this degradation and extinction
    to happen? The example of eradicating malaria vectors would have a very different
    outcome if the modified mosquitoes went extinct within a few years versus several
    millennia.
  prefs: []
  type: TYPE_NORMAL
- en: '**CLOSING THOUGHTS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Clearly, there are a lot of unanswered questions on the frontier of biological
    engineering, and it’s all happening right now. Whether good or bad, the outcome
    of today’s experiments will probably affect humanity as profoundly as Moore’s
    law and the internet. Electronic technology reshaped the way we think and communicate,
    and biotech will reshape our bodies and our environment. The big difference is
    that in biotech, we haven’t developed the ability to do backups, but we are developing
    technology with the potential power of the `rm -r *` command.
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I’m optimistic; I think these technologies can and will be used
    to improve our lives. But for that to happen, we need society to understand the
    issues at stake and have a vigorous and open debate. Even if these biological
    techniques have scary implications for our health and safety, failing to disclose
    and discuss vulnerabilities just invites zero-days. And who wants to wake up one
    morning infected with crippling malware and no viable patch?
  prefs: []
  type: TYPE_NORMAL
- en: Hardware breakthroughs have changed our lives as we know it, but Moore’s law
    is slowing down, and DNA sequencing has outpaced it. Who knows what new world
    will be created by advancements in biotech? And just as society benefits from
    the responsible disclosure and sharing of vulnerabilities and exploits, engaging
    in scientific discourse is more constructive than attempting to censor it. Perhaps
    the experience and perspectives gained in maturing the hardware industry over
    the past 50 years from pocket calculators into pocket supercomputers can help
    guide biotech to a similarly positive outcome.
  prefs: []
  type: TYPE_NORMAL
