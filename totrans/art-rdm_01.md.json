["```\n> sudo apt-get install ent\n```", "```\n> ent ent_test.bin\nEntropy = 7.999996 bits per byte.\n\nOptimum compression would reduce the size\nof this 40000000 byte file by 0 percent.\n\nChi square distribution for 40000000 samples is 241.36, and randomly\nwould exceed this value 72.09 percent of the times.\n\nArithmetic mean value of data bytes is 127.5064 (127.5 = random).\nMonte Carlo value for Pi is 3.141776714 (error 0.01 percent).\nSerial correlation coefficient is -0.000234 (totally uncorrelated = 0.0).\n```", "```\nentropy: 7.999996\nchi2   : 72.09\nmean   : 127.5064\npi     : 3.141776714 (0.01)\ncorr   : -0.000234\n```", "```\n> sudo apt-get install audacity\n```", "```\nimport sys\nimport numpy as np\nfrom scipy.io.wavfile import read as wavread\n```", "```\ns, d = wavread(sys.argv[1])\nprint(\"sampling rate: %d\" % s)\nn = len(d)//2\na = MakeBytes(d[:n])\nb = MakeBytes(d[n:])\nif (len(a) < len(b)):\n    c = a[::-1] ^ b[:len(a)]\nelse:\n    c = a[:len(b)] ^ b[::-1]\nc.tofile(sys.argv[2])\n```", "```\ndef MakeBytes(A):\n ➊ t = A - A.mean()\n ➋ thresh = (t.max()-t.min())/100.0\n    w = []\n    for i in range(len(t)):\n        if (np.abs(t[i]) < thresh):\n            continue\n        w.append(1 if t[i] > 0 else 0)\n ➌ b = []\n    k = 0\n    while (k < len(w)-1):\n        if (w[k] != w[k+1]):\n            b.append(w[k])\n        k += 2\n ➍ n = len(b)//8\n    c = np.array(b[:8*n]).reshape((n,8))\n    z = []\n    for i in range(n):\n        t = (c[i] * np.array([128,64,32,16,8,4,2,1])).sum()\n        z.append(t)\n    return np.array(z).astype(\"uint8\")\n```", "```\n> python3 -W ignore silence.py silence.wav silence.bin\n```", "```\nentropy: 7.999867\nchi2   : 0.01 \nmean   : 127.4948\npi     : 3.136872354 (0.15)\ncorr   : 0.000610\n```", "```\n> cat *.bin >random_bytes\n```", "```\nentropy: 7.999999\nchi2   : 98.32\nmean   : 127.4880\npi     : 3.142011833 (0.01)\ncorr   : -0.000015\n```", "```\nentropy: 8.000000\nchi2   : 40.68\nmean   : 127.5023\npi     : 3.141375348 (0.01)\ncorr   : 0.000021\n```", "```\nentropy: 7.995518\nchi2   : 0.01\nmean   : 127.5484\npi     : 3.150733867 (0.29)\ncorr   : -0.001136\n```", "```\nentropy: 7.999935\nchi2   : 18.90\nmean   : 127.5246\npi     : 3.144891758 (0.11)\ncorr   : 0.000100\n```", "```\nentropy: 7.999998\nchi2   : 75.99\nmean   : 127.5058\npi     : 3.141177006 (0.01)\ncorr   : -0.000144\n```", "```\n> python3\n>>> b = open(\"/dev/urandom\", \"rb\").read(60000000)\n>>> open(\"ttt.bin\", \"wb\").write(b)\n60000000\n```", "```\nentropy: 7.999997\nchi2   : 23.16\nmean   : 127.4981\npi     : 3.141671600 (0.00)\ncorr   : 0.000024\n```", "```\n> cat /proc/sys/kernel/random/entropy_avail\n3693\n```", "```\n> pip install rdrand\n> python3\n>>> from rdrand import RdRandom\n>>> RdRandom().random()\n0.2047133384122450\n>>> b = rdrand.rdrand_get_bytes(60000000)\n>>> open(\"ttt.bin\", \"wb\").write(b)\n60000000\n```", "```\nentropy: 7.999997\nchi2   : 54.51\nmean   : 127.5036\npi     : 3.141309600 (0.01)\ncorr   : -0.000159\n```", "```\ndef NumPyGen(self, N):\n    return self.g.random(N)\n\ndef MINSTD(self, N):\n    v = np.zeros(N)\n    for i in range(N):\n        self.seed = (48271 * self.seed) % 2147483647\n        v[i] = self.seed * 4.656612875245797e-10\n    return v\n```", "```\ndef RDRAND(self, N): \n    v = np.zeros(N)\n    rng = rdrand.RdRandom()\n    for i in range(N):\n        v[i] = rng.random()\n    return v\n```", "```\ndef Urandom(self, N):\n    with open(\"/dev/urandom\", \"rb\") as f:\n        b = bytearray(f.read(4*N))\n    return np.frombuffer(b, dtype=\"uint32\") / (1<<32)\n```", "```\ndef Quasirandom(self, N):\n    v = []\n    while (len(v) < N):\n        v.append(Halton(self.qnum, self.base))\n        self.qnum += 1\n    return np.array(v)\n```", "```\ndef random(self, N=1):\n    if (not self.disk):\n        v = self.generators[self.kind](N)\n        if (self.mode == \"float\"):\n            v = (self.high - self.low)*v + self.low\n        elif (self.mode == \"int\"):\n            v = ((self.high - self.low)*v).astype(\"int64\") + self.low\n        elif (self.mode == \"byte\"):\n            v = np.floor(256*v + 0.5).astype(\"uint8\")\n        else:\n            v = np.floor(v + 0.5).astype(\"uint8\")\n    else:\n        v = self.Fetch(N)\n    return v[0] if (N == 1) else v\n```", "```\ndef Fetch(self, N=1):\n    if (self.mode == \"byte\"):\n        nbytes = N\n    else:\n        nbytes = 4*N\n\n    b = []\n    n = nbytes\n    while (len(b) < nbytes):\n        t = self.file.read(n)\n        if (len(t) < n):\n            n = n - len(t)\n            self.file.close()\n            self.file = open(self.kind, \"rb\")\n        b += t\n\n    if (self.mode == \"byte\"):\n        v = np.array(b, dtype=\"uint8\")\n    else:\n        v = np.frombuffer(bytearray(b), dtype=\"uint32\")\n        v = v / (1 << 32)\n        if (self.mode == \"float\"):\n            v = (self.high - self.low)*v + self.low\n        elif (self.mode == \"int\"):\n            v = ((self.high - self.low)*v).astype(\"int64\") + self.low\n        elif (self.mode == \"byte\"):\n            v = np.floor(256*v + 0.5).astype(\"uint8\")\n        else:\n            v = np.floor(v + 0.5).astype(\"uint8\")\n    return v\n```", "```\ndef __init__(self, mode=\"float\", kind=\"pcg64\", seed=None, low=0, high=1, base=2):\n    self.generators = {\n        \"pcg64\"  : self.NumPyGen,\n        \"mt19937\": self.NumPyGen,\n        \"minstd\" : self.MINSTD, \n        \"quasi\"  : self.Quasirandom,\n        \"urandom\": self.Urandom,\n        \"rdrand\" : self.RDRAND,\n    }\n\n    self.mode = mode  \n    self.kind = kind  \n    self.seed = seed  \n    self.low  = low   \n    self.high = high  \n    self.base = base  \n    self.disk = False\n```", "```\nif (self.kind == \"pcg64\"):\n    self.g = np.random.Generator(np.random.PCG64(seed))\nelif (self.kind == \"mt19937\"):\n    self.g = np.random.Generator(np.random.MT19937(seed))\nelif (self.kind == \"minstd\"):\n    if (seed == None):\n        self.seed = np.random.randint(1,93123544)\nelif (self.kind == \"quasi\"):\n    if (seed == None):\n        self.qnum = 0\n    elif (seed < 0):\n        self.qnum = np.random.randint(0,10000)\n    else:\n        self.qnum = seed\nelif (self.kind == \"urandom\") or (self.kind == \"rdrand\"):\n    pass\nelse:\n    self.disk = True\n    self.file = open(self.kind, \"rb\")\n```", "```\n>>> from RE import * \n>>> g = RE()\n>>> g.random(5)\narray([0.44018704, 0.98320526, 0.61820454, 0.3124574 , 0.32110503])\n>>> g.random(5)\narray([0.47792361, 0.67769858, 0.50001674, 0.35449271, 0.92454641])\n```", "```\n>>> RE(kind='mt19937', low=-3, high=5).random(5)\narray([ 4.51484908,  2.31892577,  0.98488816, -1.36846592,  1.70944267])\n```", "```\n>>> RE(kind='urandom', low=-3, high=5, mode='int').random(5)\narray([2, 2, 4, 3, 2])\n>>> RE(kind='rdrand', mode='byte').random(9)\narray([ 67, 173, 207, 230,  10, 127, 241,  21, 213], dtype=uint8)\n```", "```\n>>> RE(kind='minstd', seed=5, mode='bit').random(9)\narray([0, 0, 0, 0, 1, 1, 1, 1, 0], dtype=uint8)\n>>> RE(kind='minstd', seed=5, mode='bit').random(9)\narray([0, 0, 0, 0, 1, 1, 1, 1, 0], dtype=uint8)\n```", "```\n>>> RE(kind='quasi', base=2).random(6)\narray([0\\.   , 0.5  , 0.25 , 0.75 , 0.125, 0.625])\n>>> RE(kind='quasi', base=2).random(6)\narray([0\\.   , 0.5  , 0.25 , 0.75 , 0.125, 0.625])\n>>> RE(kind='quasi', base=2, seed=-1).random(6)\narray([0.3458252, 0.8458252, 0.2208252, 0.7208252, 0.4708252, 0.9708252])\n>>> RE(kind='quasi', base=2, seed=-1).random(6)\narray([0.74029541, 0.49029541, 0.99029541, 0.01373291, 0.51373291,\n       0.26373291])\n```", "```\n>>> RE(kind='hotbits.bin').random(5)\narray([0.58051941, 0.79079893, 0.91321132, 0.26857162, 0.49829243])\n```"]