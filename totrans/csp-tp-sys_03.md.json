["```\npublic readonly struct Coordinate\n{\n    public int X {get; init;}\n    public int Y {get; init;}\n}\nvar position = new Coordinate {X = 10, Y = 20};\n```", "```\npublic Coordinate Difference(Coordinate start, Coordinate end)\n{\n    `--snip--`\n}\nvar position = new Coordinate {X = 10, Y = 20};\n**var distance** **=** **Difference(position, position);**\n```", "```\nstring name = \"Alfred\";\n```", "```\npublic class Command\n{\n    public Command(DataStore store)\n        => Connection = store;\n    **public DataStore Connection {get;}**\n}\n public class DataStore\n{\n    public enum ConnectionState {Closed, Open}\n    **public Command CreateCommand()**\n        **=>** **new Command(this);**\n    public void Open() => State = ConnectionState.Open;\n    public void Close() => State = ConnectionState.Closed;\n    public ConnectionState State {get; private set;}\n}\n```", "```\nvar store `=` new DataStore(…);\nCommand command = store.CreateCommand();\n// Open the connection.\n**command.Connection.Open();**\nAssert.That(store.State, Is.EqualTo(ConnectionState.Open));\n```", "```\npublic void AutoAppend(**string name**, string extension)\n{\n    if(!name.EndsWith(extension))\n        **name** **+=** **extension;**\n}\nvar saveName = \"Alfred\";\nAutoAppend(saveName, \".docx\");\nAssert.That(saveName, Is.EqualTo(\"Alfred.docx\"));\n```", "```\npublic void AutoAppend(**ref string name**, string extension)\n{\n    if(!name.EndsWith(extension))\n        name += extension;\n}\nvar saveName = \"Alfred\";\nAutoAppend(**ref saveName**, \".docx\");\nAssert.That(saveName, Is.EqualTo(\"Alfred.docx\"));\n```", "```\npublic struct Speed\n{\n    public double InMetersPerSecond {get; set;}\n}\npublic void Increment(ref Speed initial, double amount)\n    **=>** **initial.InMetersPerSecond** **+=** **amount;**\n```", "```\nvar speed = new Speed {InMetersPerSecond = 50.0};\n**Increment(ref speed, 20);**\nAssert.That(speed.InMetersPerSecond, Is.EqualTo(70.0));\n```", "```\nstring logTime = `--snip--`\nif(DateTime.TryParse(logTime, out DateTime timeStamp))\n{\n    var elapsed = DateTime.Now - timeStamp;\n    `--snip--`\n```", "```\npublic bool TryRemote(string address, out DataStore connection)\n{\n    if(string.IsNullOrEmpty(address))\n        **return false;**\n    `--snip--`\n```", "```\n[CS0177] The out parameter 'connection' must be assigned to before control\nleaves the current method\n```", "```\nList<Record> results = TryRemote(remoteName, **out DataStore connection**)\n    ? connection.LoadData()\n    : LoadFromCache();\n```", "```\npublic readonly struct Velocity\n{\n    public Speed Speed {get;}\n    public Angle Direction {get;}\n}\npublic void Increment(ref Speed initial, double amount)\n    => initial.InMetersPerSecond += amount;\nvar start = new Velocity (`--snip--)`;\nIncrement(**ref start.Speed**, 25);\n```", "```\n[CS0206] A property or indexer may not be passed as an out or ref parameter\n```", "```\npublic Speed Increment(**Speed initial**, double amount)\n    => new Speed {InMetersPerSecond = initial.InMetersPerSecond + amount};\npublic void Increment(**ref Speed initial**, double amount)\n    => initial.InMetersPerSecond += amount;\n```", "```\npublic void Increment(**ref Speed initial**, double amount)\n    => initial.InMetersPerSecond += amount;\npublic void Increment(**out Speed initial**, double amount)\n    => initial = new Speed {InMetersPerSecond = amount};\n```", "```\npublic class Reminder\n{\n    public Reminder(ref DateTime start)\n        => time = start;\n    private readonly ref DateTime time;\n}\n```", "```\npublic static Reminder\nNextAppointment(**ref DateTime time**, IEnumerable<Reminder> items)\n{\n    var results = items.Where(**item** **=>** **item.Date** **==** **time.Date**);\n    return results.FirstOrDefault();\n}\n```", "```\n[CS1628] Cannot use ref, out, or in parameter 'time' inside an anonymous method, lambda\nexpression, query expression, or local function\n```", "```\npublic static IEnumerable<Reminder>\nAppointmentsForDay(**ref DateTime time**, IEnumerable<Reminder> items)\n{\n    foreach (var item in items)\n    {\n        if(item.Time.Date == time.Date)\n            **yield return item;**\n    }\n}\n```", "```\n[CS1623] Iterators cannot have ref, in or out parameters\n```", "```\npublic static async Task<bool> TryGetResponse(**out string response**)\n{\n    response = **await Task.Run(()** **=>** **GetUserInput())**;\n    return !string.IsNullOrEmpty(response);\n}\n```", "```\n[CS1988] Async methods cannot have ref, in or out parameters\n```", "```\npublic static void\nFormatConnection(**out this string connString**, string host, string source)\n{\n    connString = $\"Server={host};Database={source};Trusted_Connection=True;\";\n}\n```", "```\n[CS8328] The parameter modifier 'this' cannot be used with 'out'\n```", "```\nstring connection;  // uninitialized variable\nconnection.FormatConnection(host, source);\n```", "```\npublic static void Nullify(ref this string val)\n    => val = null;\n```", "```\n[CS8337] The first parameter of a 'ref' extension method 'Nullify' must be a value type or a\ngeneric type constrained to struct.\n```", "```\nif(TryRemote(remoteName, out var connection))\n{\n    // Perform activities using connection\n}\n```", "```\npublic Speed Incremented(Speed initial, double amount)\n    => Speed.FromMetersPerSecond(initial.InMetersPerSecond + amount);\n```", "```\nvar speed = Speed.FromMetersPerSecond(50.0);\nvar newSpeed = Incremented(speed, 20);\nAssert.That(speed.InMetersPerSecond, Is.EqualTo(50));\nAssert.That(newSpeed.InMetersPerSecond, Is.EqualTo(70));\n```", "```\npublic readonly struct Velocity\n{\n    public Speed Speed {get; init;}\n    public Angle Direction {get; init;}\n}\n var velocity = new Velocity\n    {\n        Speed = Speed.FromMetersPerSecond(10),\n        Direction = Angle.FromRadians(.88)\n    };\n**var copy** **=** **velocity with {Direction** **=** **Angle.FromRadians(.99)};**\n```", "```\npublic double DistanceInKm(**in Speed speed**, **in TimeSpan time**)\n    => speed.InKmh * time.TotalHours;\n```", "```\nvar time = TimeSpan.FromHours(2.5);\nvar speed = Speed.FromKmh(20);\nvar distance = **DistanceInKm(speed, time)**;\nAssert.That(distance, Is.EqualTo(50.0));\n```", "```\nvoid ModifyByCallback(in int value, Action callback)\n{\n  ❶ var temp = value;\n  ❷ callback();\n    Assert.That(value, Is.Not.EqualTo(temp));\n}\nint input = 100;\n❸ ModifyByCallback(value: input, callback: () => input = 200);\n```", "```\npublic readonly struct Address\n{\n    public Address(string street, string city, string state, string zip)\n        => (Street, City, State, Zip) = (street, city, state, zip);\n    public string Street {get;}\n    public string City   {get;}\n    public string State  {get;}\n    public string Zip    {get;}\n}\n```", "```\npublic sealed class Mail\n{\n    public Mail(string name, Address address)\n        => (Addressee, destination) = (name, address);\n    public string Addressee {get;}\n    **public ref Address Destination** **=>** **ref destination;**\n    private Address destination;\n}\n```", "```\nvar address = new Address (\"62 West Wallaby Street\",\n                           \"Wigan\", \"Lancashire\", \"WG7 7FU\");\nvar letter = new Mail(\"G Lad Esq.\", address);\n**ref var local** **=** **ref letter.Destination;**\n```", "```\nvar letter = new Mail(\"G Lad Esq.\",\n    new (\"62 West Wallaby Street\", \"Wigan\", \"Lancashire\", \"WG7 7FU\"));\n**ref var address** **=** **ref letter.Destination;**\nAssert.That(address.Street, Is.EqualTo(\"62 West Wallaby Street\"));\naddress = new Address(\"1619 Pine Street\", \"Boulder\", \"CO\", \"80302\");\n**Assert.That(letter.Destination.Street,**\n    **Is.EqualTo(\"1619 Pine Street\"));**\n```", "```\npublic sealed class Mail\n{\n    `--snip--`\n    public ref readonly Address Destination => ref destination;\n    private readonly Address destination;\n}\nvar address = new Address (\"62 West Wallaby Street\", \"Wigan\", \"Lancashire\", \"WG7 7FU\");\nvar letter = new Mail(\"G Lad Esq.\", address);\nref readonly var local = ref letter.Destination;\n```", "```\n[CS8160] A readonly field cannot be returned by writable reference\n```", "```\npublic ref Address Get()\n{\n    var val = new Address();\n    **return ref val;**\n}\n```", "```\n[CS8168] Cannot return local 'val' by reference because it is not a ref local\n```", "```\npublic readonly struct Color\n{\n    --`snip--`\n    public ref readonly uint Rgb => ref rgbValue;\n    private readonly uint rgbValue;\n}\n```", "```\n[CS8170] Struct members cannot return 'this' or other instance members by reference\n```", "```\npublic ref readonly uint DefaultRgb()\n{\n    var source = new Color();\n    ref readonly var rgb = ref source.Rgb;\n    return ref rgb;\n}\n```", "```\npublic ref readonly Address GetAddress()\n{\n    var local = new Mail(\"G Lad Esq.\",\n        new (\"62 West Wallaby Street\", \"Wigan\", \"Lancashire\", \"WG7 7FU\"));\n    **ref readonly var address** **=** **ref local.Destination;**\n    **return ref address;**\n}\n```", "```\npublic ref Color RemoveRed(ref Color color)\n{\n    color = new Color(0, color.Green, color.Blue);\n    return ref color;\n}\nvar hasRed = new Color(0x77, 0xFF, 0x11);\nref var noRed = ref RemoveRed(ref hasRed);\nAssert.That(noRed.Red, Is.EqualTo(0));\nAssert.That(hasRed.Red, Is.EqualTo(0));\n```", "```\npublic ref Color CreateColor(out Color result)\n{\n    result = new Color();\n    return ref result;\n}\nref var created = ref CreateColor(out Color color);\nAssert.That(created.Red, Is.EqualTo(0));\nAssert.That(color.Red, Is.EqualTo(0));\n```", "```\n[CS8333] Cannot return variable 'in Color' by writable reference because it is a readonly\nvariable\n```", "```\npublic class Brush\n{\n    public Brush(Color c) => color = c;\n    **public ref Color Color** **=>** **ref color;**\n    private Color color;\n}\nvar brush = new Brush(new Color(0x77, 0x33, 0xFF));\n**brush.Color** **=** **new Color();**\nAssert.That(brush.Color.Red, Is.EqualTo(0));\n```", "```\nvar point = (X: 30, Y: 50);\nAssert.That(point.X, Is.EqualTo(30));\nAssert.That(point.Y, Is.EqualTo(50));\n```", "```\n**var (horizontal, vertical)** **=** **point;**\nAssert.That(horizontal, Is.EqualTo(30));\nAssert.That(vertical, Is.EqualTo(50));\n```", "```\npublic readonly struct Coordinate\n{\n    public Coordinate(int x, int y) => (X, Y) = (x, y);\n int X {get; init;}\n    int Y {get; init;}\n    **public void Deconstruct(out int x, out int y)**\n    **{**\n        **x** **=** **X;**\n        **y** **=** **Y;**\n    **}**\n}\n```", "```\nvar point = new Coordinate(30, 50);\nvar (horizontal, vertical) = point;\n```"]