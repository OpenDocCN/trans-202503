- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Complete columnar transposition ciphers
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c09/g09001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In 1935, somebody sent the anonymous message shown in [Figure 9-1](#figure9-1)
    to President Franklin D. Roosevelt.^([1](b06.xhtml#c09-endnote-1))^, ^([2](b06.xhtml#c09-endnote-2))
    While the second line, `OR ELSE YOU DIE`, is readable, the first is obviously
    encrypted. We can recover the plaintext by writing the message in lines of two
    letters each:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ND`'
  prefs: []
  type: TYPE_NORMAL
- en: '`OI`'
  prefs: []
  type: TYPE_NORMAL
- en: '`MD`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EY`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`AU`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TV`'
  prefs: []
  type: TYPE_NORMAL
- en: '`IE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`BR`'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c09/f09001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-1: An anonymous encrypted message sent to President Franklin D. Roosevelt
    in 1935'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that, from top to bottom, the second column reads, `DIDYOUEVER`. The
    first column, from the bottom up, reads, `BITEALEMON`. These produce the intended
    plaintext, `DID YOU EVER BITE A LEMON?`
  prefs: []
  type: TYPE_NORMAL
- en: Roosevelt suffered from polio (or a similar disease that, at the time, could
    not be distinguished from it). According to a since-refuted theory, lemon juice
    can cure polio. It seems the sender of this message wanted to recommend the lemon
    juice therapy to Roosevelt in this unconventional way.
  prefs: []
  type: TYPE_NORMAL
- en: One special thing about the encryption method used here is that no letter or
    word of the plaintext has been substituted. Instead, only the order of the letters
    has been changed. A cipher with this property is referred to as a *transposition
    cipher*.
  prefs: []
  type: TYPE_NORMAL
- en: How complete columnar transposition ciphers work
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are as many different transposition ciphers as there are ways to change
    the order of the letters in a message. The Roosevelt plaintext consists of twenty
    letters, which means that there are 2,432,902,008,176,640,000 (over two quintillion)
    ways to reorder it! In general, a message with *n* letters can be transposed in
    *n*-factorial (*n*! = 1 × 2 × 3 × 4 × 5 × . . . × *n*) ways and not necessarily
    distinct. However, using a random transposition method for encryption is not practical.
    Instead, a convenient transposition rule needs to be defined.
  prefs: []
  type: TYPE_NORMAL
- en: The postcard in [Figure 9-2](#figure9-2) was written with a transposition rule
    that is certainly convenient, but not very secure.^([3](b06.xhtml#c09-endnote-3))
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c09/f09002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-2: This encrypted postcard is not very hard to decipher.'
  prefs: []
  type: TYPE_NORMAL
- en: As will become obvious after you look at it for a moment, the message on the
    postcard is written backward. Writing in this way is an especially simple variant
    of a transposition cipher. Another approach is to write every word of a plaintext
    backward. The author of the following newspaper ad, published in the *Morning
    Pos**t* on April 4, 1888, used this method:^([4](b06.xhtml#c09-endnote-4))
  prefs: []
  type: TYPE_NORMAL
- en: '`Ma gniyrt ym tseb ot esaelp uoy.`'
  prefs: []
  type: TYPE_NORMAL
- en: 'It should be clear that, to be of practical value in terms of concealing a
    message from an unwanted recipient, a transposition rule needs to be more complex.
    In addition, it should be possible to vary the transposition based on a key. For
    instance, we could divide a message into blocks of five letters and rearrange
    each block according to a defined scheme. Using such a scheme, the plaintext `SWISS
    CHEESECAKE` can be encrypted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c09/g09002.png)'
  prefs: []
  type: TYPE_IMG
- en: This explains how the sign in [Figure 9-3](#figure9-3), which we encountered
    at a party, was encrypted. It used the key `1` = `5`, `2` = `1`, `3` = `2`, `4`
    = `4`, `5` = `3`, or simply `5`, `1`, `2`, `4`, `3`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c09/f09003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-3: The name of this cake is encrypted in a transposition cipher.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This method is equivalent to the following, which uses the keyword `TABLE`.
    First, we write the message in lines below the keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TABLE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`-----`'
  prefs: []
  type: TYPE_NORMAL
- en: '`SWISS`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CHEES`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ECAKE`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we sort the columns such that the letters of the keyword are in alphabetical
    order:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ABELT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`-----`'
  prefs: []
  type: TYPE_NORMAL
- en: '`WISSS`'
  prefs: []
  type: TYPE_NORMAL
- en: '`HESEC`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CAEKE`'
  prefs: []
  type: TYPE_NORMAL
- en: This produces the ciphertext `WISSS HESEC CAEKE` that we saw on the sign.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could expand on this line-based transposition by transcribing the letters
    column-wise, which results in the following encrypted message: `WHC IEA SSE SEK
    SCE`. We could also transcribe the message from the bottom up, from right to left,
    or in some other way.'
  prefs: []
  type: TYPE_NORMAL
- en: The strength of transposition ciphers was long underestimated. Many cipher designers
    thought that rearranging letters was less secure than replacing them. Only in
    the twentieth century did it become known that transposition ciphers can be quite
    secure.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will limit ourselves to cases in which the plaintext is
    written in lines of equal length, transposed column-wise, and transcribed in an
    arbitrary direction. In addition, we will assume that the last line is filled
    completely, containing no blank spaces. Transpositions of this kind are called
    “complete columnar transpositions.” The Roosevelt cryptogram shown earlier in
    this chapter is a complete columnar transposition, with a line length of two.
    So is the backward-written postcard (where the line length is equal to the message
    length). The newspaper ad that spells every word backward is definitely a transposition
    but not a complete columnar transposition, because it is not based on lines of
    constant length.
  prefs: []
  type: TYPE_NORMAL
- en: How to detect a complete columnar transposition cipher
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From a codebreaker’s perspective, the nice thing about a transposition cipher
    (of any kind) is that the message’s letter frequencies do not change as a result
    of encryption. Therefore, frequency analysis helps us detect a cipher of this
    type. For instance, look at the following encrypted ad from the *Evening Standard*
    published on June 16, 1882:^([5](b06.xhtml#c09-endnote-5))
  prefs: []
  type: TYPE_NORMAL
- en: '`ECALAP Ardnaxela eht ta sekal elpirt eht no strecnoc ocserf la eh tot og syadrutasdna
    syadsruht syadseut no.`'
  prefs: []
  type: TYPE_NORMAL
- en: If we perform a frequency analysis . . .
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c09/g09003.png)'
  prefs: []
  type: TYPE_IMG
- en: . . . we see that `A`, `E`, and `T` are especially frequent, while `B`, `Q`,
    `J`, `M`, `V`, `W`, and `Z` don’t appear at all. This is consistent with a short
    text written in English (in a longer text, we would expect `E` to be more frequent
    than `A`). The only common kind of encryption algorithm that produces a ciphertext
    with these letter frequencies is a transposition cipher.
  prefs: []
  type: TYPE_NORMAL
- en: Just like the letter frequencies, the index of coincidence doesn’t change when
    a transposition cipher is applied. Using CrypTool 2 or [http://dcode.fr/en](http://dcode.fr/en),
    we can compute the index of coincidence of the 1882 newspaper ad as 7.0%, which
    is very close to the index of coincidence of the English language, 6.7%.
  prefs: []
  type: TYPE_NORMAL
- en: How to break a complete columnar transposition cipher
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are multiple ways to decrypt line-based transpositions with constant line
    lengths (i.e., complete columnar transposition ciphers). In each technique, detecting
    the length of the lines plays a key role.
  prefs: []
  type: TYPE_NORMAL
- en: The arrange-and-read method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s take another look at the encrypted note sent to President Roosevelt:
    `NDOIMDEYLOAUEETVIEBR`. This message consists of twenty letters. Assuming that
    we are dealing with a complete columnar transposition, there are only a few possible
    line lengths, namely, the divisors of twenty: two, four, five, and ten.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a first attempt, let’s write the message in lines of ten characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`NDOIMDEYLO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`AUEETVIEBR`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s try reading this two-line text in all four directions: from left
    to right, backward, from top to bottom, and bottom-up. However, no matter which
    way we read it, it makes no sense. So next, let’s try five-letter lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '`NDOIM`'
  prefs: []
  type: TYPE_NORMAL
- en: '`DEYLO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`AUEET`'
  prefs: []
  type: TYPE_NORMAL
- en: '`VIEBR`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Still nothing. Here is the message written in four-letter lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '`NDOI`'
  prefs: []
  type: TYPE_NORMAL
- en: '`MDEY`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LOAU`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EETV`'
  prefs: []
  type: TYPE_NORMAL
- en: '`IEBR`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, we read these lines in the four different ways; nothing stands out.
    Let’s move on to two-letter lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ND`'
  prefs: []
  type: TYPE_NORMAL
- en: '`OI`'
  prefs: []
  type: TYPE_NORMAL
- en: '`MD`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EY`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`AU`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TV`'
  prefs: []
  type: TYPE_NORMAL
- en: '`IE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`BR`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now the first column, read from the bottom-up, says `BITE A LEMON`. Or perhaps
    it’s easier to first see the second column, read downward: `DID YOU EVER`. The
    cryptogram is solved. Sometimes, breaking a complete columnar transposition cipher
    is as simple as that!'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at another example of this kind. The cryptogram in [Figure 9-4](#figure9-4)
    is a challenge ciphertext published by the British intelligence agency GCHQ in
    2013.^([6](b06.xhtml#c09-endnote-6))
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c09/F09004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-4: A challenge cryptogram published by the British intelligence agency
    GCHQ'
  prefs: []
  type: TYPE_NORMAL
- en: Frequency analysis reveals that the letter frequencies match the English language
    quite well, except for the many `Q`s. We can therefore assume that this ciphertext
    was created with a transposition cipher and that `Q` stands for the space character.
  prefs: []
  type: TYPE_NORMAL
- en: 'The cryptogram consists of 143 letters. There are only two factors of 143,
    both of which are prime numbers: 11 and 13\. Assuming that we are dealing with
    a complete columnar transposition, we should check line lengths of eleven and
    thirteen. Let’s start with eleven:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AWVLIQIQVTQ`'
  prefs: []
  type: TYPE_NORMAL
- en: '`OSQOELGCVII`'
  prefs: []
  type: TYPE_NORMAL
- en: '`QWDLCUQEEOE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`NNWWOAOLTDN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`UQTGAWTSMDO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`QTLAOQSDCHP`'
  prefs: []
  type: TYPE_NORMAL
- en: '`QQIQDQQTQOO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TUDBNIQHBHH`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TDUTEETFDUE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`AUMORESQEQE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`MLTMETIRECL`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ICAIQATUNQR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ALTENEINRKG`'
  prefs: []
  type: TYPE_NORMAL
- en: 'No matter how we read this paragraph—left to right, backward, from top to bottom,
    or bottom-up—it does not look like real language. Next, let’s check the thirteen-letter
    line variant:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AWVLIQIQVTQOS`'
  prefs: []
  type: TYPE_NORMAL
- en: '`QOELGCVIIQWDL`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CUQEEOENNWWOA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`OLTDNUQTGAWTS`'
  prefs: []
  type: TYPE_NORMAL
- en: '`MDOQTLAOQSDCH`'
  prefs: []
  type: TYPE_NORMAL
- en: '`PQQIQDQQTQOOT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`UDBNIQHBHHTDU`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TEETFDUEAUMOR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ESQEQEMLTMETI`'
  prefs: []
  type: TYPE_NORMAL
- en: '`RECLICAIQATUN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`QRALTENEINRKG`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we read the first column from top to bottom, we get `AQCOMPUTERQ`. Remembering
    that `Q` stands for a blank space, this message makes sense. Reading it column-wise
    with the `Q`s replaced by spaces, the paragraph becomes this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`A COMPUTER WOULD DESERVE TO BE CALLED INTELLIGENT IF IT COULD DECEIVE A HUMAN
    INTO BELIEVING THAT IT WAS HUMAN WWW DOT METRO DOT CO DOT UK SLASH TURING`'
  prefs: []
  type: TYPE_NORMAL
- en: The plaintext is a summary of what is commonly known as the “Turing Test,” named
    after the brilliant mathematician Alan Turing (1912–1954).
  prefs: []
  type: TYPE_NORMAL
- en: Vowel frequencies and multiple anagramming
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The arrange-and-read method we just covered only works if the second step of
    the transposition, permutation of the columns, is omitted. If this is not the
    case, we need more sophisticated codebreaking methods. To proceed, it will be
    helpful to know that the ratio of vowels to consonants in the English language
    is roughly forty to sixty. More than three vowels or consonants occurring in a
    row are possible, but they are rarely seen in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at the following cryptogram taken from *Military Cryptanalysis IV*
    by William Friedman (1959):^([7](b06.xhtml#c09-endnote-7))
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c09/g09004.png)'
  prefs: []
  type: TYPE_IMG
- en: Frequency analysis reveals a distribution very similar to that of the English
    language, suggesting that this ciphertext was probably created with a transposition
    cipher. We start by assuming that it is a complete columnar transposition.
  prefs: []
  type: TYPE_NORMAL
- en: As the message consists of 126 letters, the possible line lengths are two, three,
    six, seven, nine, fourteen, eighteen, twenty-one, forty-two, and sixty-three.
    Lines of two, three, and six are insecure, because there is little to transpose;
    and twenty-one, forty-two, and sixty-three are impractical because the lines are
    too long. Therefore, these line lengths are rarely used. Thus, we start by examining
    the line lengths of seven, nine, fourteen, and eighteen.
  prefs: []
  type: TYPE_NORMAL
- en: If we write the ciphertext in lines of seven letters, we get the following table.
    (Since we assume that the ciphertext was read out column-wise, we are writing
    the text in columns instead of rows.)
  prefs: []
  type: TYPE_NORMAL
- en: '`1 IONTTUM`'
  prefs: []
  type: TYPE_NORMAL
- en: '`2 LONRCPA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`3 HEVRUOS`'
  prefs: []
  type: TYPE_NORMAL
- en: '`4 HEUIVLA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`5 DETIRRF`'
  prefs: []
  type: TYPE_NORMAL
- en: '`6 TELAASA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`7 IIBRUOT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`8 EOFIOMY`'
  prefs: []
  type: TYPE_NORMAL
- en: '`9 OEAVOTE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`10 EFENONC`'
  prefs: []
  type: TYPE_NORMAL
- en: '`11 UTDLFFF`'
  prefs: []
  type: TYPE_NORMAL
- en: '`12 DRFRDRX`'
  prefs: []
  type: TYPE_NORMAL
- en: '`13 HRONAAR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`14 THYRONT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`15 SNCWNFG`'
  prefs: []
  type: TYPE_NORMAL
- en: '`16 OEAEAME`'
  prefs: []
  type: TYPE_NORMAL
- en: '`17 NAPTJNT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`18 STDUIDA`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Lines 12 and 15 consist of consonants only. As seven consonants in a row are
    almost impossible in an English text, we conclude that we are on the wrong track.
    Let’s now try nine-letter lines, again written in columns from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '`1 ISTBRTATF`'
  prefs: []
  type: TYPE_NORMAL
- en: '`2 LORFIUONA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`3 HNRAITNFT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`4 HSHEACARY`'
  prefs: []
  type: TYPE_NORMAL
- en: '`5 DONDRUJAE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`6 TOEFIVINC`'
  prefs: []
  type: TYPE_NORMAL
- en: '`7 IEAOVRUFF`'
  prefs: []
  type: TYPE_NORMAL
- en: '`8 EETYNAPMX`'
  prefs: []
  type: TYPE_NORMAL
- en: '`9 OENCLUONR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`10 EENAROLDT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`11 UIVPNORMG`'
  prefs: []
  type: TYPE_NORMAL
- en: '`12 DOUDROSAE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`13 HETTWFOST`'
  prefs: []
  type: TYPE_NORMAL
- en: '`14 TFLREDMAA`'
  prefs: []
  type: TYPE_NORMAL
- en: This looks better. The number of vowels in each line is plausible. We’ll keep
    the nine-letter variant in mind as a promising candidate.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next candidate is the fourteen-letter version:'
  prefs: []
  type: TYPE_NORMAL
- en: '`1 IFOFNETNTOUNMC`'
  prefs: []
  type: TYPE_NORMAL
- en: '`2 LUOTNDRLCFPFAF`'
  prefs: []
  type: TYPE_NORMAL
- en: '`3 HDERVFRRUDORSX`'
  prefs: []
  type: TYPE_NORMAL
- en: '`4 HHERUOINVALAAR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`5 DTEHTYIRRORNFT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`6 TSENLCAWANSFAG`'
  prefs: []
  type: TYPE_NORMAL
- en: '`7 IOIEBAREUAOMTE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`8 ENOAFPITOJMNYT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`9 OSETADVUOITDEA`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The ten vowels in line 7, while not impossible, are pretty improbable. So,
    this guess is not a good first choice. Here’s the last candidate, with eighteen
    letters per line:'
  prefs: []
  type: TYPE_NORMAL
- en: '`1 IESETTBYRNTAAPTMFX`'
  prefs: []
  type: TYPE_NORMAL
- en: '`2 LOOERNFCILUUOONNAR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`3 HENERNAAIRTONLFDTT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`4 HUSIHVEPANCOARRMYO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`5 DDOONUDDRRUOJSAAEE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`6 THOEETFTIWVFIONSCT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`7 OTEFALORVERDUMFAFA`'
  prefs: []
  type: TYPE_NORMAL
- en: This looks good, too.
  prefs: []
  type: TYPE_NORMAL
- en: We now have two good candidates (lines of nine and eighteen letters), one unlikely
    one (lines of fourteen letters), and one that is extremely unlikely (lines of
    seven letters). We will proceed with the two good candidates by applying a technique
    called *multiple anagramming*. This method consists of rearranging the columns
    of a block until a meaningful word appears in one of the lines. Then we check
    if the other rearranged lines look like they might have been taken from an English
    text, too. If this is the case, we are probably on the right track; if not, we’ll
    try another word.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s first look for words that can be spelled by permuting the lines of the
    eighteen-letter-line candidates, checking for lines that may contain anagrammed
    words of interest. In line 4, we see the letters we need to spell `ARMY`—a likely
    word in a military message. Let’s use it for our first multiple-anagramming try.
    As there are two `A`s and two `R`s in the fourth line, we can construct this word
    in four possible ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '`9 14 16 17 13 14 16 17 9 15 16 17 13 15 16 17`'
  prefs: []
  type: TYPE_NORMAL
- en: '`R P M F A P M F R T M F A T M F`'
  prefs: []
  type: TYPE_NORMAL
- en: '`I O N A O O N A I N N A O N N A`'
  prefs: []
  type: TYPE_NORMAL
- en: '`I L D T N L D T I F D T N F D T`'
  prefs: []
  type: TYPE_NORMAL
- en: '`A R M Y A R M Y A R M Y A R M Y`'
  prefs: []
  type: TYPE_NORMAL
- en: '`R S A E J S A E R A A E J A A E`'
  prefs: []
  type: TYPE_NORMAL
- en: '`I O S C I O S C I N S C I N S C`'
  prefs: []
  type: TYPE_NORMAL
- en: '`V M A F U M A F V F A F U F A F`'
  prefs: []
  type: TYPE_NORMAL
- en: The first possibility is very unlikely, as the patterns `RPMF` in the first
    line and `VMAF` in the last line are not common English tetragraphs. The second
    block is not much better—look at `APMF` in the first line and `JSAE` in the fifth.
    For similar reasons, the third and the fourth combinations don’t make sense either.
    We have reached a dead end.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look for another word we can spell. We easily find a few, some of which
    can be formed in different ways. For instance, the letters `T`, `T`, `T`, `T`,
    `O`, `O`, and `W` in line 6 might spell `TWO` (numbers are common in military
    messages). The following are eight ways to assemble this word:'
  prefs: []
  type: TYPE_NORMAL
- en: '`1 10 3 6 10 3 8 10 3 18 10 3`'
  prefs: []
  type: TYPE_NORMAL
- en: '`I  N  S T  N  S Y  N  S  X N  S`'
  prefs: []
  type: TYPE_NORMAL
- en: '`L  L  O N  L  O C  L  O  R L  O`'
  prefs: []
  type: TYPE_NORMAL
- en: '`H  R  N N  R  N A  R  N  T R  N`'
  prefs: []
  type: TYPE_NORMAL
- en: '`H  N  S V  N  S P  N  S  O N  S`'
  prefs: []
  type: TYPE_NORMAL
- en: '`D  R  O U  R  O D  R  O  E R  O`'
  prefs: []
  type: TYPE_NORMAL
- en: '`T  W  O T  W  O T  W  O  T W  O`'
  prefs: []
  type: TYPE_NORMAL
- en: '`I  E  E L  E  E R  E  E  A E  E`'
  prefs: []
  type: TYPE_NORMAL
- en: '`1 10 14 6 10 14 8 10 14 18 10 14`'
  prefs: []
  type: TYPE_NORMAL
- en: '`I  N P  T  N P  Y  N P X N P`'
  prefs: []
  type: TYPE_NORMAL
- en: '`L  L O  N  L O  C  L O R L O`'
  prefs: []
  type: TYPE_NORMAL
- en: '`H  R N  N  R N  A  R N T R N`'
  prefs: []
  type: TYPE_NORMAL
- en: '`D  R S  U  R S  D  R S E R S`'
  prefs: []
  type: TYPE_NORMAL
- en: '`T  W O  T  W O  T  W O T W O`'
  prefs: []
  type: TYPE_NORMAL
- en: '`I  E M  L  E M  R  E M A E M`'
  prefs: []
  type: TYPE_NORMAL
- en: Each of these eight guesses leads to letter combinations in other lines that
    don’t appear very often in English texts, such as `HNR`, `VNR`, and `XNP`. We
    seem to be on the wrong track again.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we could try `AIR FORCE`, which might appear in line 2\. As there are
    four `O`s and two `R`s in this row, there are eight ways to spell it. Other possibilities
    include `BY TRAIN` in line 1, `THOSE` in line 6, and `OVER` in line 7\. However,
    all of these lead to implausible letter combinations in other lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'Reluctantly, we conclude that the eighteen-character-long-line candidate is
    probably not correct, so we turn to the nine-letter-long block:'
  prefs: []
  type: TYPE_NORMAL
- en: '`1 ISTBRTATF`'
  prefs: []
  type: TYPE_NORMAL
- en: '`2 LORFIUONA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`3 HNRAITNFT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`4 HSHEACARY`'
  prefs: []
  type: TYPE_NORMAL
- en: '`5 DONDRUJAE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`6 TOEFIVINC`'
  prefs: []
  type: TYPE_NORMAL
- en: '`7 IEAOVRUFF`'
  prefs: []
  type: TYPE_NORMAL
- en: '`8 EETYNAPMX`'
  prefs: []
  type: TYPE_NORMAL
- en: '`9 OENCLUONR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`10 EENAROLDT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`11 UIVPNORMG`'
  prefs: []
  type: TYPE_NORMAL
- en: '`12 DOUDROSAE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`13 HETTWFOST`'
  prefs: []
  type: TYPE_NORMAL
- en: '`14 TFLREDMAA`'
  prefs: []
  type: TYPE_NORMAL
- en: 'While looking for likely candidates, we find a few words related to numbers.
    The first line provides the letters we might need to form the word `FIRST`. Both
    lines 6 and 7 contain the letters of the word `FIVE`. Because `V` is a relatively
    uncommon letter, let’s take `FIVE` in line 6 as our first guess. The line contains
    two `I`s, so there are two ways to spell the word:'
  prefs: []
  type: TYPE_NORMAL
- en: '`4 5 6 3 4 7 6 3`'
  prefs: []
  type: TYPE_NORMAL
- en: '`B R T T B A T T`'
  prefs: []
  type: TYPE_NORMAL
- en: '`F I U R F O U R`'
  prefs: []
  type: TYPE_NORMAL
- en: '`A I T R A N T R`'
  prefs: []
  type: TYPE_NORMAL
- en: '`E A C H E A C H`'
  prefs: []
  type: TYPE_NORMAL
- en: '`D R U N D J U N`'
  prefs: []
  type: TYPE_NORMAL
- en: '`F I V E F I V E`'
  prefs: []
  type: TYPE_NORMAL
- en: '`O V R A O U R A`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Y N A T Y P A T`'
  prefs: []
  type: TYPE_NORMAL
- en: '`C L U N C O U N`'
  prefs: []
  type: TYPE_NORMAL
- en: '`A R O N A L O N`'
  prefs: []
  type: TYPE_NORMAL
- en: '`P N O V P R O V`'
  prefs: []
  type: TYPE_NORMAL
- en: '`D R O U D S O U`'
  prefs: []
  type: TYPE_NORMAL
- en: '`T W F T T O F T`'
  prefs: []
  type: TYPE_NORMAL
- en: '`R E D L R M D L`'
  prefs: []
  type: TYPE_NORMAL
- en: It should be immediately clear that the second block looks very promising. In
    addition to FIVE, it produces the English words FOUR and EACH, along with promising
    word fragments such as BATT, OURA, COUN, ALON, and PROV. Only the last line, RMDL,
    doesn’t look like English, but this might be due to an abbreviation. Let’s assume
    that this guess is correct.
  prefs: []
  type: TYPE_NORMAL
- en: 'How can we proceed? Since we think we know columns 4, 7, 6, and 3, it’s best
    to check which of the five remaining columns (1, 2, 5, 8, and 9) makes the most
    sense if put in front of the block we have chosen. There are five options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`1 4 7 6 3 2 4 7 6 3 5 4 7 6 3 8 4 7 6 3 9 4 7 6 3`'
  prefs: []
  type: TYPE_NORMAL
- en: '`I B A T T S B A T T R B A T T T B A T T F B A T T`'
  prefs: []
  type: TYPE_NORMAL
- en: '`L F O U R O F O U R I F O U R N F O U R A F O U R`'
  prefs: []
  type: TYPE_NORMAL
- en: '`H A N T R N A N T R I A N T R F A N T R T A N T R`'
  prefs: []
  type: TYPE_NORMAL
- en: '`H E A C H S E A C H A E A C H R E A C H Y E A C H`'
  prefs: []
  type: TYPE_NORMAL
- en: '`D D J U N O D J U N R D J U N A D J U N E D J U N`'
  prefs: []
  type: TYPE_NORMAL
- en: '`T` `F I V E` `O` `F I V E` `I` `F I V E` `N` `F I V E` `C` `F I V E`'
  prefs: []
  type: TYPE_NORMAL
- en: '`I O U R A E O U R A V O U R A F O U R A F O U R A`'
  prefs: []
  type: TYPE_NORMAL
- en: '`E Y P A T E Y P A T N Y P A T M Y P A T X Y P A T`'
  prefs: []
  type: TYPE_NORMAL
- en: '`O C O U N E C O U N L C O U N N C O U N R C O U N`'
  prefs: []
  type: TYPE_NORMAL
- en: '`E A L O N E A L O N R A L O N D A L O N T A L O N`'
  prefs: []
  type: TYPE_NORMAL
- en: '`U P R O V I P R O V N P R O V M P R O V G P R O V`'
  prefs: []
  type: TYPE_NORMAL
- en: '`D D S O U O D S O U R D S O U A D S O U E D S O U`'
  prefs: []
  type: TYPE_NORMAL
- en: '`H T O F T E T O F T W T O F T S T O F T T T O F T`'
  prefs: []
  type: TYPE_NORMAL
- en: '`T R M D L F R M D L E R M D L A R M D L A R M D L`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The fourth option, 84763, produces the best results: REACH, NFOUR, and MYPAT.
    Most of the other five-letter groups can easily be imagined as having been taken
    from an English text. The remaining columns (1, 2, 5, and 9) can now easily be
    added in a similar way. We check the placement of each one before or after our
    existing block to see what makes the most sense. In the end, we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FIRSTBATT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ALIONFOUR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`THINFANTR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`YHASREACH`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EDROADJUN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CTIONFIVE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`FIVEFOURA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`XENEMYPAT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ROLENCOUN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TEREDALON`'
  prefs: []
  type: TYPE_NORMAL
- en: '`GUNIMPROV`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EDROADSOU`'
  prefs: []
  type: TYPE_NORMAL
- en: '`THWESTOFT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ATEFARMDL`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This plaintext can be read line-wise. X is used as a period:'
  prefs: []
  type: TYPE_NORMAL
- en: FIRST BATTALION FOURTH INFANTRY HAS REACHED ROAD JUNCTION FIVE FIVE FOUR A.
    ENEMY PATROL ENCOUNTERED ALONG UNIMPROVED ROAD SOUTHWEST OF TATE FARM DL
  prefs: []
  type: TYPE_NORMAL
- en: Half of that tetragraph of consonants we saw above, RMDL, is the end of the
    word FARM. We are not certain what the remaining letters, DL, might mean. Perhaps
    a signature or filler letters to reach a certain message length?
  prefs: []
  type: TYPE_NORMAL
- en: 'As should have become clear, multiple anagramming is a *nondeterministic* method,
    meaning that it is possible to come up with multiple solution candidates. Thus,
    it must be done with care, creativity, and trial and error. There are, however,
    some tricks that might simplify the codebreaking process:'
  prefs: []
  type: TYPE_NORMAL
- en: The letter *Q* is very helpful for multiple anagramming, as it is usually followed
    by a *U*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The letters *J*, *V*, and *Z* are almost always followed by a vowel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The letters *A*, *O*, and *U* are usually followed by a consonant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The letter *H* is usually preceded by a consonant and followed by a vowel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to learn more about multiple anagramming, we recommend Helen Fouché
    Gaines’s classic 1939 book *Cryptanalysis*.^([8](b06.xhtml#c09-endnote-8))
  prefs: []
  type: TYPE_NORMAL
- en: Success stories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Donald Hill’s diary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Donald Hill (ca. 1915–1995) was a British military pilot in World War II. Stationed
    in Hong Kong, he was captured by the Japanese and sent to a prisoner-of-war camp.
    After four years of incarceration, he was released. Even before his years in captivity,
    Hill had kept a diary. But because British soldiers were not allowed to keep private
    notes, he used numbers instead of letters and camouflaged the diary as a collection
    of multiplication tables, titling his booklet *Russel’s Mathematical Tables*.
    This did not look suspicious, as multiplication tables were quite common before
    pocket calculators were invented. While in captivity, Hill continued to write
    his journal.
  prefs: []
  type: TYPE_NORMAL
- en: After his return to England, Hill married his fiancée and never again talked
    about his diary or its contents. Only after Hill’s death in 1995 did his wife
    investigate the strange number sequences in the booklet he left behind. She asked
    mathematics professor Philip Aston from the University of Surrey to analyze them.
    He was able to deduce their meaning and published a paper about his deciphering
    of the diary.^([9](b06.xhtml#c09-endnote-9)) The story of Donald Hill is also
    told in Andro Linklater’s 2001 book *The Code of Love*.^([10](b06.xhtml#c09-endnote-10))
  prefs: []
  type: TYPE_NORMAL
- en: When Aston first examined Hill’s alleged mathematical tables, he saw that most
    of the pages were filled with groups of four digits (see [Figure 9-5](#figure9-5)).
    These numbers were purportedly multiplication results, but the results didn’t
    fit with the multiplications. Aston concluded that the real purpose of these numbers
    was to encode a text.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c09/f09005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-5: Prisoner-of-war Donald Hill disguised his diary as a collection
    of mathematical tables. In addition, he used a transposition cipher.'
  prefs: []
  type: TYPE_NORMAL
- en: The most obvious way to interpret the numbers was that each four-digit group
    encoded two letters. (In other words, each digit pair encoded a letter.) When
    Aston saw that almost all digit pairs represented numbers between ten and thirty-five,
    he determined that the most obvious encoding was `A` = `10`, `B` = `11`, `C` =
    `12`, `D` = `13`, etc. Aston performed a frequency analysis based on this encoding
    and saw that the letter frequencies almost exactly matched the ones of the English
    language. However, the letter sequences he received didn’t make sense. So, he
    assumed that Hill had used a transposition cipher in addition to the substitution.
  prefs: []
  type: TYPE_NORMAL
- en: Taking a closer look at the numbers in the diary, Aston noticed that occasionally,
    a group consisting of four zeros (`0000`) appeared. This didn’t fit with the encoding.
    Aston’s guess was that these zero-blocks were separators. As it turned out, there
    were exactly 561 four-digit groups (1,122 letters) between each two separators.
    This made it likely that Hill had applied a transposition cipher on units of 1,122
    letters.
  prefs: []
  type: TYPE_NORMAL
- en: 'One can arrange 1,122 letters in a rectangle very easily because the number
    1,122 has many factors. This suggested that Hill had applied a complete columnar
    transposition cipher using a rectangle size such as 66 × 17, 11 × 102, or 33 ×
    34\. Aston didn’t have to search very long for the best guess, however, as on
    the first diary page were written a right-hand arrow next to the number `340`
    and a down arrow next to the number `330`. Aston assumed that the zeros in these
    numbers were there to confuse the reader, and then he arranged one of the 1,122-letter
    units in a table containing thirty-three columns and thirty-four lines. Writing
    the text line-wise in such a table quickly produced meaningful words in the columns.
    To our regret, Aston’s paper doesn’t describe what exactly he saw, but the 33
    × 34 table may have looked like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DMSTIINSKDSEATALDSGMTOOARNRRBUENDE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`IBABLAWTBAARMRLEETHEOENPTIEESTAOOF`'
  prefs: []
  type: TYPE_NORMAL
- en: '`WEFLMMESYMBSEALTTWTIASEPWSTTANRTAT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`AREAADDTTALCRTWEHEENSUPEEIAHMOAUNR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`KSTZCIAHHGAOTEELEARDHPLANMREOCNNYE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EEYIHSSEEEZMCDVYBRSIETARTMYINAOSTP`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TSANITHBFBEEAFEBLESALNNHYIRRGSMCHR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`HCNGNUDOTOAONIGUATWNTSEEMNILSUIAIA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EODAEROMGTNVCRORZOOTEMIATENETANRNY`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ORBNSBWBHHOELETNELORRONDNNGWTLORGI`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TTYDAENETWTRIIWETDPOTKTIUTSIATUEEN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`HEASROTREAHAPNHDSTDONEANTHUSEISDXG`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EDMIEEOSRLEGPTIWTHOPTACGEEPGRERWCT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`RBINBAFPSRRAEOCTOAWSHNTOSLTUUSOEEH`'
  prefs: []
  type: TYPE_NORMAL
- en: '`OYRKURLATUBIROHTOTNGEDWUOLONITAHPA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`FOAFRLISHSANIUIHFWOETITRFTSTNOROTT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`FVCINYGSEADBNRSTIENTRHAWCHAHSPOPTT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`IELNTAHOBRLOTPPWEAUPEETAOEYEOEFEOH`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CREAOSTVEEYMHLRORRSAXTTYNRTRNRPAME`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ETNLUTSEEGDBEAERCEANCWETCEHEESLNAB`'
  prefs: []
  type: TYPE_NORMAL
- en: '`RHOLTHJRSOATANCEEANITOMHEGATAOADNO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`SIOYIEUHTNMWFETDATDCTWPENOTSINNWOM`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ORNTNCSEEEAGTSOHNWPKEATRTEWARNEEUB`'
  prefs: []
  type: TYPE_NORMAL
- en: '`VTEHCOTAWOGTEWUODAOYMLTERSAMCESTRS`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EYIELLLDINERHRSTSRUAEROSAMRARLANDW`'
  prefs: []
  type: TYPE_NORMAL
- en: '`RFSYUONBTEDENGLHHWNNNUPNTYWDAENSEO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`BIHMDNTUHBLDOTIEETADTSUOESTRFIDPFN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`RGIATIITBEEOOVTATICRTATTDITUTGNEET`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EHTKNAMTOEACNETVSHOUHROTAEHSLHICNE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ATAEGLEHMSVKBTLYCJNSEEUMTEJHETNTCX`'
  prefs: []
  type: TYPE_NORMAL
- en: '`KEFOTSTEBTISOHEBOACHYLTETPAFFCETEP`'
  prefs: []
  type: TYPE_NORMAL
- en: '`FRTFHEOFSENAMESOMPETFETTAAPOTIBHPL`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ASEFECHIGIGABMOMPANNIFHOCNARBVOEOO`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first column, beginning from the top, contains the message `I WAKE THE
    OTHER OFFICERS`. The second column, `MBERSESCORTEDBYOVE`, does not appear to directly
    follow the first column but certainly looks like a fragment of English. It was
    clear that the order of the columns had to be changed. Had Donald Hill used a
    keyword for this transposition? Again, Aston didn’t have to search very long for
    a solution. On the front page of the diary, he found the full names of Hill and
    his fiancée, consisting of thirty-four letters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DONALD SAMUEL HILL PAMELA SEELY KIRRAGE`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sorted alphabetically, these thirty-four letters read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AAAAADDEEEEEGHIIKLLLLLLMMNOPRRSSUY`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To decrypt the diary, Aston wrote these letters in the first line of the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AAAAADDEEEEEGHIIKLLLLLLMMNOPRRSSUY`'
  prefs: []
  type: TYPE_NORMAL
- en: '`----------------------------------`'
  prefs: []
  type: TYPE_NORMAL
- en: '`DMSTIINSKDSEATALDSGMTOOARNRRBUENDE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`IBABLAWTBAARMRLEETHEOENPTIEESTAOOF`'
  prefs: []
  type: TYPE_NORMAL
- en: '`. . .`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then he rearranged the columns such that the keyword appeared again:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DONALDSAMUELHILLPAMELASEELYKIRRAGE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`----------------------------------`'
  prefs: []
  type: TYPE_NORMAL
- en: '`IRNDSNEMADSGTAMTRSRKOTNDSOEDLBUIAE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`AETITWABPOTHRLEOEATBEBOAANFEESTLMR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`MTSWWEREPASTALIATFWYSLTMBEITTANMES`'
  prefs: []
  type: TYPE_NORMAL
- en: '`DATAEDARENTETWNSHEETUAUALPRHEMOARC`'
  prefs: []
  type: TYPE_NORMAL
- en: '`IRMKAANSAYHREEDHETNHPZNGALEELOCCIO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`SYMERSOERTESDVIETYTEIISEZAPBYNAHCM`'
  prefs: []
  type: TYPE_NORMAL
- en: '`TRITEHMSHHBSFEALRAYFNNCBENRLBGSIAE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`UINHTDICEIOWIGNTLNMISGAOAEAAUSUNNO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`RNEEOONOANMOROTEEDIGMARTNIYZRTAECV`'
  prefs: []
  type: TYPE_NORMAL
- en: '`BGNOLWORDGBOETRRWBNHONRHONIENTLSLE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ESTTDNUTIEEPIWOIIYUTKDEWTTNIEHTAIR`'
  prefs: []
  type: TYPE_NORMAL
- en: '`DUHHTTSENXRDNHONSATEESDAHAGSDEIRPA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EPEBHORDGCSOTIPTGMERAIWLECTTWREEPG`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ATLRAFOBOEPWOCSHUISSNNERRTHOIUSBEA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ROLOTLAYUPANOHGENROTDKHUBWAOTITURI`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LSTFWIRORTSOUIEITAFHTFOSAETFHNORIN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`YAHFEGOVWTSNRSTRHCCEHIPADATITSPNNB`'
  prefs: []
  type: TYPE_NORMAL
- en: '`AYETAHFEAOOUPPPEELOBENERLTHEWOETTO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`STRCRTPRYMVSLRAXRENETAAEYTERONROHM`'
  prefs: []
  type: TYPE_NORMAL
- en: '`THEEESLTTAEAAENCENCEWLNGDEBCRESUEB`'
  prefs: []
  type: TYPE_NORMAL
- en: '`HAGRAJAHHNRNNCIIIOESOLDOAMOEEAOTAI`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ETOSTUNIEOHDEICTSONTWYWNMPMADINIFN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CWEOWSERRUEPSOKEANTEATEEATBNHRNNTG`'
  prefs: []
  type: TYPE_NORMAL
- en: '`OASVATSTERAOWUYMMERWLHIOGTSDOCECET`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LRMERIAYSDDUESAEAIAIRENNEOWSTRLLRH`'
  prefs: []
  type: TYPE_NORMAL
- en: '`OWYRWNNFNEBRGLNNDSTTUYSEDPOHHAEUNE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`NISBITDIOFUAITDTRHEHSMPBLUNEEFIDOD`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ITLRTINGTETCVTRTUIDBAAEEETTIATGIOO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`AHEEHMIHINTOETUHSTAORKCEAOESVLHNNC`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LJEAJENTMCHNTLSEHATMEETSVUXCYETGBK`'
  prefs: []
  type: TYPE_NORMAL
- en: '`SAPKATEHEEECEEHYFFTBLOTTITPOBFCTOS`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EPAFPOBRTPFEESIFOTASEFHENTLMOTIHMA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CANAAHOSOOINMONTRECGFFEIGHOPMBVEBN`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the deciphering was complete. Read column-wise, here is the plaintext,
    a diary entry written on December 8, 1941:'
  prefs: []
  type: TYPE_NORMAL
- en: '`I am disturbed early as the Colonial Secretary rings up to say that war with
    Japan is imminent. Hell there goes my sleep and I wake the other officers. Over
    breakfast we are told that we are at war with Japan. We dash down to flights just
    in time to hear an ominous roar of planes and nine bombers escorted by over thirty
    fighters appear heading our way. There''s no time to do anything except to man
    our defense posts. The bombers pass overhead but the fighters swoop down on us
    and pour a concentrated fire into our planes. We give them all we''ve got which
    is precious little. Some Indian troops get panicky and rush into a shelter, in
    their excitement they fire their Lewis gun. There is a mad rush for safety and
    by a miracle no one is hit. After twenty minutes of concentrated attack by the
    fighters the Beeste with bombs goes up in smoke and the two Walrus are left blazing
    and sink. Finally they make off, not unscarred we hope, and we inspect the damage.
    Both Walrus are gone, one Beeste is ablaze, another badly damaged, leaving one
    plane intact. We attempt to put out the fire praying that the bombs won''t explode.
    The blaze is too fierce and she is completely burned with two red hot heavy bombs
    amongst the ruins. One aircraft left but no casualties to personnel. Eight civil
    machines are burnt out including the American clipper. In the afternoon, bombers
    come over again bombing the docks an . . .`'
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the diary can be read in Aston’s 1997 paper and in the 2001 book
    *The Code of Love* by Andro Linklater.
  prefs: []
  type: TYPE_NORMAL
- en: The Pablo Waberski spy case
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In his 1931 book *The American Black Chamber*, which caused a scandal because
    of its discussion of America’s secret cryptographic abilities, American codebreaker
    Herbert Yardley (1889–1958) describes a German transposition cipher.^([11](b06.xhtml#c09-endnote-11))
    According to Yardley, on February 10, 1918, during World War I, American agents
    arrested a man on the Mexican border who called himself Pablo Waberski. The investigators
    suspected that the detainee was actually a German secret agent named Lothar Witzke.^([12](b06.xhtml#c09-endnote-12))^,
    ^([13](b06.xhtml#c09-endnote-13)) Sewn into the left sleeve of the suspect’s coat,
    they found the following encrypted note:^([14](b06.xhtml#c09-endnote-14))
  prefs: []
  type: TYPE_NORMAL
- en: '`SEOFNATUPK ASIHEIHBBN UERSDAUSNN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`LRSEGGIESN NKLEZNSIMN EHNESHMPPB`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ASUEASRIHT HTEURMVNSM EAINCOUASI`'
  prefs: []
  type: TYPE_NORMAL
- en: '`INSNRNVEGD ESNBTNNRCN DTDRZBEMUK`'
  prefs: []
  type: TYPE_NORMAL
- en: '`KOLSELZDNN AUEBFKBPSA TASECISDGT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`IHUKTNAEIE TIEBAEUERA THNOIEAEEN`'
  prefs: []
  type: TYPE_NORMAL
- en: '`HSDAEAIAKN ETHNNNEECD CKDKONESDU`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ESZADEHPEA BBILSESOOE ETNOUZKDML`'
  prefs: []
  type: TYPE_NORMAL
- en: '`NEUIIURMRN ZWHNEEGVCR EODHICSIAC`'
  prefs: []
  type: TYPE_NORMAL
- en: '`NIUSNRDNSO DRGSURRIEC EGRCSUASSP`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EATGRSHEHO ETRUSEELCA UMTPAATLEE`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CICXRNPRGA AWSUTEMAIR NASNUTEDEA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ERRREOHEIM EAHKTMUHDT COKDTGCEIO`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EEFIGHIHRE LITFIUEUNL EELSERUNMA`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ZNAI`'
  prefs: []
  type: TYPE_NORMAL
- en: Herbert Yardley was commissioned to crack this encryption. He and his team performed
    a frequency analysis and a few other statistical tests. These revealed that `E`
    was the most frequent letter, followed by `N`, while `Q`, `X`, and `Y` were completely
    absent. These features are typical of the German language (see Appendix B), suggesting
    the author had used a transposition cipher.
  prefs: []
  type: TYPE_NORMAL
- en: 'Yardley knew how to break such an encryption with the help of common digraphs
    (pairs of letters). In German, the letter `C` is particularly helpful, because
    it usually precedes `H`, occasionally precedes `K`, and is rarely found in front
    of any other letter. Yardley therefore tagged all `C`s in the text and then looked
    for `H`s. Then he determined the distances between each `C` and `H`. As it turned
    out, a distance of 108 letters appeared conspicuously often. When Yardley transcribed
    the message in lines of length 108, he received the following letter sequences:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SEOFNATUPK ASIHEIHBBN UERSDAUSNN LRSEGGIESN NKLEZNSIMN . . .`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CNDTDRZBEM UKKOLSELZD NNAUEBFKBP SATASECISD GTIHUKTNAE . . .`'
  prefs: []
  type: TYPE_NORMAL
- en: '`HPEABBILSE SOOEETNOUZ KDMLNEUIIU RMRNZWHNEE GVCREODHIC . . .`'
  prefs: []
  type: TYPE_NORMAL
- en: '`AATLEECICX RNPRGAAWSU TEMAIRNASN UTEDEAERRR EOHEIMEAHK . . .`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Read from top to bottom, virtually every column produced a four-letter sequence
    typical of the German language: column 1 is `SCHA`, column 10 is `KMEX`, and column
    20 contains `NDZU`. Next, Yardley and his team organized the columns in a meaningful
    order, which turned out to be fairly straightforward. For instance, `KMEX`, followed
    by `IKOP`, produced the word `MEXIKO` (German for `MEXICO`). In the end, Yardley
    was able to read the following plaintext:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AN DIE KAISERLICHEN KONSULARBEHOERDEN IN DER REPUBLIK MEXIKO PUNKT STRENG
    GEHEIM AUSRUFUNGSZEICHEN DER INHABER DIESES IST EIN REICHSANGEHOERIGER DER UNTER
    DEM NAMEN PABLO WABERSKI ALS RUSSE REIST PUNKT ER IST DEUTSCHER GEHEIMAGENT PUNKT
    ABSATZ ICH BITTE IHM AUF ANSUCHEN SCHUTZ UND BEISTAND ZU GEWAEHREN KOMMA IHM AUCH
    AUF VERLANGEN BIS ZU EINTAUSEND PESOS ORO NACIONAL VORZUSCHIESSEN UND SEINE CODETELEGRAMME
    AN DIESE GESANDTSCHAFT ALS KONSULARAMTLICHE DEPESCHEN ABZUSENDEN PUNKT`'
  prefs: []
  type: TYPE_NORMAL
- en: '`VON ECKHARDT`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a translation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`To the Imperial consular authorities in the Republic of Mexico. Top secret!
    The owner of this [paper] is a member of the Reich, who travels under the name
    Pablo Waberski as a Russian. He is a German secret agent. I kindly ask you to
    grant him protection and support on request, to pay him up to 1000 Pesos Oro National
    on request, and to send his encrypted telegram``s to this consulate as diplomatic
    correspondence.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Von Eckhardt`'
  prefs: []
  type: TYPE_NORMAL
- en: This letter proved that the suspect, Pablo Waberski, was in fact a German spy.
    He was sentenced to death in 1918\. After the war, when relations between Germany
    and the US improved, he was pardoned, and his charges were eventually dismissed
    in 1923.
  prefs: []
  type: TYPE_NORMAL
- en: Challenges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Lampedusa message
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The 1980 book *Love in Code* by Donald McCormick is a nice overview of the
    use of encryption by lovers.^([15](b06.xhtml#c09-endnote-15)) It covers hundreds
    of years of encrypted love letters, diaries, newspaper advertisements, and other
    cryptograms created by romantic couples seeking to keep their communications private.
    In one of the chapters, titled “Love at War,” McCormick reports on a woman who
    lived on the tiny Italian island of Lampedusa in the Mediterranean Sea when the
    US Army bombarded it in 1943.^([16](b06.xhtml#c09-endnote-16)) This woman painted
    the following message in bold letters on a white cloth and put it on the beach
    for the intruders to see:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TSURT EM, SYOB. I NEEUQ FO ASUDEPMAL`'
  prefs: []
  type: TYPE_NORMAL
- en: It is a lot easier to decipher this cryptogram than to understand its meaning.
    The woman was never identified, and the purpose of this message is not known.
  prefs: []
  type: TYPE_NORMAL
- en: The Friedmans’ love messages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: William and Elizebeth Friedman (1891–1962 and 1892–1980, respectively) were
    a codebreaking dream team. Both had long careers as cryptanalysts working for
    the military, the police, and other institutions. In 2017, US author Jason Fagone
    wrote a fascinating book about Elizebeth Friedman that covers not only the couple’s
    codebreaking work, but also their courtship and marriage.^([17](b06.xhtml#c09-endnote-17))
    (Many other biographical books about Elizebeth have appeared recently; see [Chapter
    17](c17.xhtml).^([18](b06.xhtml#c09-endnote-18))^, ^([19](b06.xhtml#c09-endnote-19)))
  prefs: []
  type: TYPE_NORMAL
- en: William and Elizebeth were allegedly so enthusiastic about crypto that they
    even used encryption in their private life. [Figure 9-6](#figure9-6) shows a love
    message William wrote to Elizebeth around 1917, as well as another one Elizebeth
    sent back to him. Both messages are encrypted in a simple transposition cipher.
    While William’s plaintext is in English, Elizebeth’s is in French. Can you solve
    these two cryptograms?
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c09/f09006.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-6: A message sent from William Friedman (signed “Biwy”) to his wife
    Elizebeth around 1917 and another sent back to him (signed “Elsbeth”). Both are
    encrypted in a simple transposition.'
  prefs: []
  type: TYPE_NORMAL
- en: An encrypted “agony” ad
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ve already mentioned *The Agony Column Codes & Ciphers*, Jean Palmer’s 2005
    book that lists over a thousand encrypted newspaper ads. Some (but not very many)
    of these ads are encrypted in transposition ciphers. The following were published
    in the British *Evening Standard* in 1882:^([20](b06.xhtml#c09-endnote-20))
  prefs: []
  type: TYPE_NORMAL
- en: '`CEM.—I e g c n e h d n h a o a s s b i s e r c g d h l i h u s a c c b k h
    e i e .` Monday, July 31, 1882'
  prefs: []
  type: TYPE_NORMAL
- en: '`CEM.—Key 11\. – L k e o i s v s t e s o e e m l d y o d b v e n s e d t p
    l i a a n a e g l m s l y h b r m n e b e m r s e a o u t f W e y r w o i h o
    a e u v n l e y e.` Saturday, August 5, 1882'
  prefs: []
  type: TYPE_NORMAL
- en: The first message is in German and the second is in English. Can you solve them?
  prefs: []
  type: TYPE_NORMAL
- en: Yardley’s eleventh ciphergram
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Chapter 11 of Herbert Yardley’s 1932 book *Ciphergrams*^([21](b06.xhtml#c09-endnote-21))
    describes an encrypted message sent from a radio station in Mexico to a German
    spy in the United States during World War I. This story, including the message,
    is fictional, but breaking the encryption (a complete columnar transposition cipher)
    is still entertaining:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TSKGL AATYI LTLPA SAHLM DPLGI ENEAI WTUEN N`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Count!'
  prefs: []
  type: TYPE_NORMAL
- en: Edgar Allan Poe’s first challenge
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In 1841, Edgar Allan Poe published two cryptograms allegedly created by a W.B.
    Tyler. The second of these cryptograms, along with the background story, is covered
    in [Chapter 6](c06.xhtml). The first message was broken in 1991 by Poe expert
    Terence Whalen of the University of Illinois at Chicago, though his dissertation
    was not published until 1994\. In the meantime, it was also solved independently
    by John Hodgson in 1993.^([22](b06.xhtml#c09-endnote-22)) The cipher turned out
    to be a simple substitution cipher without spaces, combined with a transposition.
  prefs: []
  type: TYPE_NORMAL
- en: Tyler’s first cryptogram is depicted in [Figure 9-7](#figure9-7).
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c09/f09007.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-7: This reproduction of a cryptogram published by Edgar Allan Poe
    in 1841 was solved 150 years later.'
  prefs: []
  type: TYPE_NORMAL
- en: As can be seen, Tyler used a nonstandard alphabet. Some cryptanalysts believed
    this to be a simple substitution cipher without spaces (a Patristocrat), but that
    assumption didn’t lead anywhere. When Whalen studied the correspondence between
    Tyler and Poe, he found a hint stating that the letters of each word in the message
    were reversed. Further analysis showed that the trigraph `,†§` was especially
    frequent. Whalen guessed that it stood for `EHT`, the reversed version of `THE`,
    which is the most frequent trigraph in the English language.
  prefs: []
  type: TYPE_NORMAL
- en: Whalen’s guess proved correct. Knowing three letters and the cipher method,
    he could decipher the message. Can you do it, too?
  prefs: []
  type: TYPE_NORMAL
- en: An IRA message
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Courtesy of master codebreaker Jim Gillogly, here is a message sent by an IRA
    member in the 1920s and encrypted in a complete columnar transposition system:^([23](b06.xhtml#c09-endnote-23))
  prefs: []
  type: TYPE_NORMAL
- en: '`TTSEW UDSEE OOEHS BERTN TCEUG EHYNT CLCER TNMEF KCUFE HDPDE SIDRN EESDT TREDM
    EIHUS WHRTB DLETI IEERE TAIRF FLABI FOPWV EEROI RTLAC OWNOT ATLAE`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Count the letters. Can you find any good factors?'
  prefs: []
  type: TYPE_NORMAL
