- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Complete columnar transposition ciphers
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的列交换密码
- en: '![](image_fi/502727c09/g09001.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c09/g09001.png)'
- en: 'In 1935, somebody sent the anonymous message shown in [Figure 9-1](#figure9-1)
    to President Franklin D. Roosevelt.^([1](b06.xhtml#c09-endnote-1))^, ^([2](b06.xhtml#c09-endnote-2))
    While the second line, `OR ELSE YOU DIE`, is readable, the first is obviously
    encrypted. We can recover the plaintext by writing the message in lines of two
    letters each:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 1935年，某人将[图9-1](#figure9-1)中展示的匿名信息发送给富兰克林·D·罗斯福总统。^([1](b06.xhtml#c09-endnote-1))^,
    ^([2](b06.xhtml#c09-endnote-2)) 尽管第二行`OR ELSE YOU DIE`是可读的，但第一行显然是加密的。我们可以通过将消息按每行两个字母的方式写下来，恢复明文：
- en: '`ND`'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`ND`'
- en: '`OI`'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`OI`'
- en: '`MD`'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`MD`'
- en: '`EY`'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`EY`'
- en: '`LO`'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`LO`'
- en: '`AU`'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`AU`'
- en: '`EE`'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`EE`'
- en: '`TV`'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`TV`'
- en: '`IE`'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`IE`'
- en: '`BR`'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`BR`'
- en: '![](image_fi/502727c09/f09001.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c09/f09001.png)'
- en: 'Figure 9-1: An anonymous encrypted message sent to President Franklin D. Roosevelt
    in 1935'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-1：1935年发送给富兰克林·D·罗斯福总统的匿名加密信息
- en: Notice that, from top to bottom, the second column reads, `DIDYOUEVER`. The
    first column, from the bottom up, reads, `BITEALEMON`. These produce the intended
    plaintext, `DID YOU EVER BITE A LEMON?`
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，从上到下，第二列是`DIDYOUEVER`。第一列从下往上读是`BITEALEMON`。这两列组合成了预期的明文信息，`DID YOU EVER
    BITE A LEMON?`
- en: Roosevelt suffered from polio (or a similar disease that, at the time, could
    not be distinguished from it). According to a since-refuted theory, lemon juice
    can cure polio. It seems the sender of this message wanted to recommend the lemon
    juice therapy to Roosevelt in this unconventional way.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 罗斯福患有小儿麻痹症（或当时无法与其他类似疾病区分开来）。根据一个已被驳斥的理论，柠檬汁能够治愈小儿麻痹症。看起来，这条信息的发送者想通过这种不寻常的方式向罗斯福推荐柠檬汁疗法。
- en: One special thing about the encryption method used here is that no letter or
    word of the plaintext has been substituted. Instead, only the order of the letters
    has been changed. A cipher with this property is referred to as a *transposition
    cipher*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这种加密方法的一个特别之处在于，没有对明文中的字母或单词进行替换。相反，只是改变了字母的顺序。具有这一特性的密码被称为*交换密码*。
- en: How complete columnar transposition ciphers work
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完整的列交换密码是如何工作的
- en: There are as many different transposition ciphers as there are ways to change
    the order of the letters in a message. The Roosevelt plaintext consists of twenty
    letters, which means that there are 2,432,902,008,176,640,000 (over two quintillion)
    ways to reorder it! In general, a message with *n* letters can be transposed in
    *n*-factorial (*n*! = 1 × 2 × 3 × 4 × 5 × . . . × *n*) ways and not necessarily
    distinct. However, using a random transposition method for encryption is not practical.
    Instead, a convenient transposition rule needs to be defined.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 交换密码有很多种，几乎每种改变信息中字母顺序的方式都能形成一种新的交换密码。罗斯福的明文由二十个字母组成，这意味着它可以有2,432,902,008,176,640,000（超过两千五百亿）种重新排列的方式！一般来说，一个包含*n*个字母的消息可以通过*n*的阶乘（*n*!
    = 1 × 2 × 3 × 4 × 5 × . . . × *n*）种方式进行交换，且不一定是独特的。然而，使用随机交换方法进行加密并不实用。相反，需要定义一个方便的交换规则。
- en: The postcard in [Figure 9-2](#figure9-2) was written with a transposition rule
    that is certainly convenient, but not very secure.^([3](b06.xhtml#c09-endnote-3))
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[图9-2](#figure9-2)中的明信片是使用了一种交换规则编写的，这种规则确实方便，但安全性不高。^([3](b06.xhtml#c09-endnote-3))'
- en: '![](image_fi/502727c09/f09002.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c09/f09002.png)'
- en: 'Figure 9-2: This encrypted postcard is not very hard to decipher.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-2：这张加密明信片并不难解密。
- en: As will become obvious after you look at it for a moment, the message on the
    postcard is written backward. Writing in this way is an especially simple variant
    of a transposition cipher. Another approach is to write every word of a plaintext
    backward. The author of the following newspaper ad, published in the *Morning
    Pos**t* on April 4, 1888, used this method:^([4](b06.xhtml#c09-endnote-4))
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你稍微看一会儿就会发现，明信片上的信息是倒着写的。这种写法是交换密码的一种特别简单的变体。另一种方法是将明文中的每个单词倒着写。以下这则报纸广告发表于1888年4月4日的*Morning
    Pos**t*，采用了这种方法：^([4](b06.xhtml#c09-endnote-4))
- en: '`Ma gniyrt ym tseb ot esaelp uoy.`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ma gniyrt ym tseb ot esaelp uoy.`'
- en: 'It should be clear that, to be of practical value in terms of concealing a
    message from an unwanted recipient, a transposition rule needs to be more complex.
    In addition, it should be possible to vary the transposition based on a key. For
    instance, we could divide a message into blocks of five letters and rearrange
    each block according to a defined scheme. Using such a scheme, the plaintext `SWISS
    CHEESECAKE` can be encrypted as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 应该很清楚，从实际隐匿信息的角度来看，为了避免信息被不希望的接收者窃取，转置规则需要更加复杂。此外，基于密钥，转置应当能够变化。例如，我们可以将消息分为五个字母的块，并根据定义的方案重新排列每个块。使用这种方案，明文
    `SWISS CHEESECAKE` 可以加密如下：
- en: '![](image_fi/502727c09/g09002.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c09/g09002.png)'
- en: This explains how the sign in [Figure 9-3](#figure9-3), which we encountered
    at a party, was encrypted. It used the key `1` = `5`, `2` = `1`, `3` = `2`, `4`
    = `4`, `5` = `3`, or simply `5`, `1`, `2`, `4`, `3`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这解释了在[图9-3](#figure9-3)中我们在聚会中遇到的标志是如何加密的。它使用了密钥 `1` = `5`，`2` = `1`，`3` = `2`，`4`
    = `4`，`5` = `3`，或者简单地表示为 `5`，`1`，`2`，`4`，`3`。
- en: '![](image_fi/502727c09/f09003.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c09/f09003.png)'
- en: 'Figure 9-3: The name of this cake is encrypted in a transposition cipher.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-3：这款蛋糕的名字通过转置密码进行了加密。
- en: 'This method is equivalent to the following, which uses the keyword `TABLE`.
    First, we write the message in lines below the keyword:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法相当于以下方法，使用了关键词 `TABLE`。首先，我们将消息写成如下形式，放在关键词下方：
- en: '`TABLE`'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`TABLE`'
- en: '`-----`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`-----`'
- en: '`SWISS`'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`SWISS`'
- en: '`CHEES`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`CHEES`'
- en: '`ECAKE`'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`ECAKE`'
- en: 'Then, we sort the columns such that the letters of the keyword are in alphabetical
    order:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们对列进行排序，使得关键词的字母按字母顺序排列：
- en: '`ABELT`'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`ABELT`'
- en: '`-----`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`-----`'
- en: '`WISSS`'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`WISSS`'
- en: '`HESEC`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`HESEC`'
- en: '`CAEKE`'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`CAEKE`'
- en: This produces the ciphertext `WISSS HESEC CAEKE` that we saw on the sign.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了我们在标志上看到的密文 `WISSS HESEC CAEKE`。
- en: 'We could expand on this line-based transposition by transcribing the letters
    column-wise, which results in the following encrypted message: `WHC IEA SSE SEK
    SCE`. We could also transcribe the message from the bottom up, from right to left,
    or in some other way.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过按列转录字母来扩展这种基于行的转置，从而得到以下加密消息：`WHC IEA SSE SEK SCE`。我们还可以从底部向上、从右向左或以其他方式转录消息。
- en: The strength of transposition ciphers was long underestimated. Many cipher designers
    thought that rearranging letters was less secure than replacing them. Only in
    the twentieth century did it become known that transposition ciphers can be quite
    secure.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 长期以来，人们低估了转置密码的强度。许多密码设计师认为，重新排列字母比替换字母不安全。直到20世纪，人们才知道转置密码实际上可以非常安全。
- en: In this chapter, we will limit ourselves to cases in which the plaintext is
    written in lines of equal length, transposed column-wise, and transcribed in an
    arbitrary direction. In addition, we will assume that the last line is filled
    completely, containing no blank spaces. Transpositions of this kind are called
    “complete columnar transpositions.” The Roosevelt cryptogram shown earlier in
    this chapter is a complete columnar transposition, with a line length of two.
    So is the backward-written postcard (where the line length is equal to the message
    length). The newspaper ad that spells every word backward is definitely a transposition
    but not a complete columnar transposition, because it is not based on lines of
    constant length.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将仅限于处理明文以相等长度的行编写，按列转置并以任意方向进行转录的情况。此外，我们假设最后一行完全填充，不包含空格。这种转置称为“完全列转置”。本章早些时候展示的罗斯福密码就是一种完全列转置，行长度为二。反向书写的明信片（行长度等于消息长度）也是如此。将每个单词倒写的报纸广告肯定是一种转置，但不是完全列转置，因为它不是基于恒定长度的行。
- en: How to detect a complete columnar transposition cipher
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何检测完全列转置密码
- en: From a codebreaker’s perspective, the nice thing about a transposition cipher
    (of any kind) is that the message’s letter frequencies do not change as a result
    of encryption. Therefore, frequency analysis helps us detect a cipher of this
    type. For instance, look at the following encrypted ad from the *Evening Standard*
    published on June 16, 1882:^([5](b06.xhtml#c09-endnote-5))
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从破解者的角度来看，转置密码（无论哪种类型）的优点是加密后消息的字母频率不会发生变化。因此，频率分析有助于我们检测这种类型的密码。例如，看看1882年6月16日《晚间标准报》上刊登的加密广告：^([5](b06.xhtml#c09-endnote-5))
- en: '`ECALAP Ardnaxela eht ta sekal elpirt eht no strecnoc ocserf la eh tot og syadrutasdna
    syadsruht syadseut no.`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`ECALAP Ardnaxela eht ta sekal elpirt eht no strecnoc ocserf la eh tot og syadrutasnda
    syadsruht syadseut no.`'
- en: If we perform a frequency analysis . . .
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们进行频率分析 . . .
- en: '![](image_fi/502727c09/g09003.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c09/g09003.png)'
- en: . . . we see that `A`, `E`, and `T` are especially frequent, while `B`, `Q`,
    `J`, `M`, `V`, `W`, and `Z` don’t appear at all. This is consistent with a short
    text written in English (in a longer text, we would expect `E` to be more frequent
    than `A`). The only common kind of encryption algorithm that produces a ciphertext
    with these letter frequencies is a transposition cipher.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: . . . 我们看到`A`、`E`和`T`的出现频率特别高，而`B`、`Q`、`J`、`M`、`V`、`W`和`Z`完全没有出现。这与一段英文的短文本一致（在较长的文本中，我们预计`E`会比`A`更频繁）。唯一一种常见的加密算法，它能生成这种字母频率的密文，就是换位密码。
- en: Just like the letter frequencies, the index of coincidence doesn’t change when
    a transposition cipher is applied. Using CrypTool 2 or [http://dcode.fr/en](http://dcode.fr/en),
    we can compute the index of coincidence of the 1882 newspaper ad as 7.0%, which
    is very close to the index of coincidence of the English language, 6.7%.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 就像字母频率一样，偶然指数在应用换位密码时不会改变。使用CrypTool 2或[http://dcode.fr/en](http://dcode.fr/en)，我们可以计算1882年报纸广告的偶然指数为7.0%，这与英语的偶然指数6.7%非常接近。
- en: How to break a complete columnar transposition cipher
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何破解完整的列换位密码
- en: There are multiple ways to decrypt line-based transpositions with constant line
    lengths (i.e., complete columnar transposition ciphers). In each technique, detecting
    the length of the lines plays a key role.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于行的换位密码（即完整的列换位密码），有多种解密方法。在每种方法中，确定行的长度起着关键作用。
- en: The arrange-and-read method
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 排列和读取法
- en: 'Let’s take another look at the encrypted note sent to President Roosevelt:
    `NDOIMDEYLOAUEETVIEBR`. This message consists of twenty letters. Assuming that
    we are dealing with a complete columnar transposition, there are only a few possible
    line lengths, namely, the divisors of twenty: two, four, five, and ten.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再来看一下发给罗斯福总统的加密便条：`NDOIMDEYLOAUEETVIEBR`。这条信息由二十个字母组成。假设我们面对的是完整的列换位密码，那么只有少数几种可能的行长度，即二十的约数：二、四、五和十。
- en: 'As a first attempt, let’s write the message in lines of ten characters:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一次尝试，我们将信息写成十个字符一行：
- en: '`NDOIMDEYLO`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`NDOIMDEYLO`'
- en: '`AUEETVIEBR`'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`AUEETVIEBR`'
- en: 'Now, let’s try reading this two-line text in all four directions: from left
    to right, backward, from top to bottom, and bottom-up. However, no matter which
    way we read it, it makes no sense. So next, let’s try five-letter lines:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试以四个方向读取这两行文本：从左到右，反向，从上到下，和从下到上。然而，无论我们如何读取，它都没有意义。所以接下来，我们尝试五字母行：
- en: '`NDOIM`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`NDOIM`'
- en: '`DEYLO`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`DEYLO`'
- en: '`AUEET`'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`AUEET`'
- en: '`VIEBR`'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`VIEBR`'
- en: 'Still nothing. Here is the message written in four-letter lines:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然没有发现规律。这里是四字母一行的消息：
- en: '`NDOI`'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`NDOI`'
- en: '`MDEY`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`MDEY`'
- en: '`LOAU`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`LOAU`'
- en: '`EETV`'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`EETV`'
- en: '`IEBR`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`IEBR`'
- en: 'Again, we read these lines in the four different ways; nothing stands out.
    Let’s move on to two-letter lines:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们以四种不同的方式读取这些行；没有什么特别的。接下来，我们尝试两字母的行：
- en: '`ND`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`ND`'
- en: '`OI`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`OI`'
- en: '`MD`'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`MD`'
- en: '`EY`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`EY`'
- en: '`LO`'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`LO`'
- en: '`AU`'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`AU`'
- en: '`EE`'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`EE`'
- en: '`TV`'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`TV`'
- en: '`IE`'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`IE`'
- en: '`BR`'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`BR`'
- en: 'Now the first column, read from the bottom-up, says `BITE A LEMON`. Or perhaps
    it’s easier to first see the second column, read downward: `DID YOU EVER`. The
    cryptogram is solved. Sometimes, breaking a complete columnar transposition cipher
    is as simple as that!'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从下到上读取的第一列是`BITE A LEMON`。或者，也许更容易先看到第二列，从上到下读取是`DID YOU EVER`。密码被破解了。有时，破解一个完整的列换位密码就这么简单！
- en: Let’s look at another example of this kind. The cryptogram in [Figure 9-4](#figure9-4)
    is a challenge ciphertext published by the British intelligence agency GCHQ in
    2013.^([6](b06.xhtml#c09-endnote-6))
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个类似的例子。图9-4中的密码谜题是英国情报机构GCHQ在2013年发布的一段挑战性密文。^([6](b06.xhtml#c09-endnote-6))
- en: '![](image_fi/502727c09/F09004.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c09/F09004.png)'
- en: 'Figure 9-4: A challenge cryptogram published by the British intelligence agency
    GCHQ'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-4：英国情报机构GCHQ发布的挑战性密码谜题
- en: Frequency analysis reveals that the letter frequencies match the English language
    quite well, except for the many `Q`s. We can therefore assume that this ciphertext
    was created with a transposition cipher and that `Q` stands for the space character.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 频率分析揭示字母频率与英文语言非常匹配，除了大量的`Q`之外。因此，我们可以假设这段密文是通过换位密码生成的，而`Q`代表空格字符。
- en: 'The cryptogram consists of 143 letters. There are only two factors of 143,
    both of which are prime numbers: 11 and 13\. Assuming that we are dealing with
    a complete columnar transposition, we should check line lengths of eleven and
    thirteen. Let’s start with eleven:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这段密码文本包含143个字母。143只有两个因数，它们都是质数：11和13。假设我们处理的是完全的列置换密码，我们应该检查11和13的行长度。我们先从11开始：
- en: '`AWVLIQIQVTQ`'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`AWVLIQIQVTQ`'
- en: '`OSQOELGCVII`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`OSQOELGCVII`'
- en: '`QWDLCUQEEOE`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`QWDLCUQEEOE`'
- en: '`NNWWOAOLTDN`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`NNWWOAOLTDN`'
- en: '`UQTGAWTSMDO`'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`UQTGAWTSMDO`'
- en: '`QTLAOQSDCHP`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`QTLAOQSDCHP`'
- en: '`QQIQDQQTQOO`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`QQIQDQQTQOO`'
- en: '`TUDBNIQHBHH`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`TUDBNIQHBHH`'
- en: '`TDUTEETFDUE`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`TDUTEETFDUE`'
- en: '`AUMORESQEQE`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`AUMORESQEQE`'
- en: '`MLTMETIRECL`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`MLTMETIRECL`'
- en: '`ICAIQATUNQR`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`ICAIQATUNQR`'
- en: '`ALTENEINRKG`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`ALTENEINRKG`'
- en: 'No matter how we read this paragraph—left to right, backward, from top to bottom,
    or bottom-up—it does not look like real language. Next, let’s check the thirteen-letter
    line variant:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们如何阅读这一段文字——从左到右、倒着读、从上到下，还是从下到上——它看起来都不像真实的语言。接下来，让我们检查一下十三个字母的变体：
- en: '`AWVLIQIQVTQOS`'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`AWVLIQIQVTQOS`'
- en: '`QOELGCVIIQWDL`'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`QOELGCVIIQWDL`'
- en: '`CUQEEOENNWWOA`'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`CUQEEOENNWWOA`'
- en: '`OLTDNUQTGAWTS`'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`OLTDNUQTGAWTS`'
- en: '`MDOQTLAOQSDCH`'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`MDOQTLAOQSDCH`'
- en: '`PQQIQDQQTQOOT`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`PQQIQDQQTQOOT`'
- en: '`UDBNIQHBHHTDU`'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`UDBNIQHBHHTDU`'
- en: '`TEETFDUEAUMOR`'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`TEETFDUEAUMOR`'
- en: '`ESQEQEMLTMETI`'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`ESQEQEMLTMETI`'
- en: '`RECLICAIQATUN`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`RECLICAIQATUN`'
- en: '`QRALTENEINRKG`'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`QRALTENEINRKG`'
- en: 'If we read the first column from top to bottom, we get `AQCOMPUTERQ`. Remembering
    that `Q` stands for a blank space, this message makes sense. Reading it column-wise
    with the `Q`s replaced by spaces, the paragraph becomes this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从上到下读取第一列，我们得到`AQCOMPUTERQ`。记住，`Q`代表空格，这条消息就变得有意义了。用`Q`替换为空格后，从列出发读，这段文字变成了这样：
- en: '`A COMPUTER WOULD DESERVE TO BE CALLED INTELLIGENT IF IT COULD DECEIVE A HUMAN
    INTO BELIEVING THAT IT WAS HUMAN WWW DOT METRO DOT CO DOT UK SLASH TURING`'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`一个计算机如果能够欺骗一个人让他相信它是人类，那它就值得被称为智能的。WWW点METRO点CO点UK斜杠TURING`'
- en: The plaintext is a summary of what is commonly known as the “Turing Test,” named
    after the brilliant mathematician Alan Turing (1912–1954).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 明文是对“图灵测试”常见定义的总结，图灵测试是以杰出的数学家艾伦·图灵（1912-1954）命名的。
- en: Vowel frequencies and multiple anagramming
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 元音频率和多次重排
- en: The arrange-and-read method we just covered only works if the second step of
    the transposition, permutation of the columns, is omitted. If this is not the
    case, we need more sophisticated codebreaking methods. To proceed, it will be
    helpful to know that the ratio of vowels to consonants in the English language
    is roughly forty to sixty. More than three vowels or consonants occurring in a
    row are possible, but they are rarely seen in practice.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚才介绍的排列和读取方法只适用于如果置换的第二步，即列的排列被省略的情况。如果不是这种情况，我们需要更复杂的破译方法。为了继续，我们需要知道英语中元音和辅音的比例大约是40：60。连续三个以上的元音或辅音是可能的，但在实际中很少见。
- en: Let’s look at the following cryptogram taken from *Military Cryptanalysis IV*
    by William Friedman (1959):^([7](b06.xhtml#c09-endnote-7))
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下从《军事密码分析IV》一书中摘取的密码本（作者：William Friedman，1959年）：^([7](b06.xhtml#c09-endnote-7))
- en: '![](image_fi/502727c09/g09004.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c09/g09004.png)'
- en: Frequency analysis reveals a distribution very similar to that of the English
    language, suggesting that this ciphertext was probably created with a transposition
    cipher. We start by assuming that it is a complete columnar transposition.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 频率分析揭示了与英语语言非常相似的分布，表明这个密文可能是用列置换密码生成的。我们先假设它是一个完全的列置换密码。
- en: As the message consists of 126 letters, the possible line lengths are two, three,
    six, seven, nine, fourteen, eighteen, twenty-one, forty-two, and sixty-three.
    Lines of two, three, and six are insecure, because there is little to transpose;
    and twenty-one, forty-two, and sixty-three are impractical because the lines are
    too long. Therefore, these line lengths are rarely used. Thus, we start by examining
    the line lengths of seven, nine, fourteen, and eighteen.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 由于消息由126个字母组成，因此可能的行长有：2、3、6、7、9、14、18、21、42和63。2、3和6的行长不安全，因为可以转置的内容很少；而21、42和63的行长不切实际，因为行太长了。因此，这些行长很少被使用。所以我们从检查7、9、14和18的行长开始。
- en: If we write the ciphertext in lines of seven letters, we get the following table.
    (Since we assume that the ciphertext was read out column-wise, we are writing
    the text in columns instead of rows.)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们以7个字母为一行来写密文，我们得到如下表格。（因为我们假设密文是按列读取的，所以我们以列而非行的方式写文本。）
- en: '`1 IONTTUM`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`1 IONTTUM`'
- en: '`2 LONRCPA`'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`2 LONRCPA`'
- en: '`3 HEVRUOS`'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`3 HEVRUOS`'
- en: '`4 HEUIVLA`'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`4 HEUIVLA`'
- en: '`5 DETIRRF`'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`5 DETIRRF`'
- en: '`6 TELAASA`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`6 TELAASA`'
- en: '`7 IIBRUOT`'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`7 IIBRUOT`'
- en: '`8 EOFIOMY`'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`8 EOFIOMY`'
- en: '`9 OEAVOTE`'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`9 OEAVOTE`'
- en: '`10 EFENONC`'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`10 EFENONC`'
- en: '`11 UTDLFFF`'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`11 UTDLFFF`'
- en: '`12 DRFRDRX`'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`12 DRFRDRX`'
- en: '`13 HRONAAR`'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`13 HRONAAR`'
- en: '`14 THYRONT`'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`14 THYRONT`'
- en: '`15 SNCWNFG`'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`15 SNCWNFG`'
- en: '`16 OEAEAME`'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`16 OEAEAME`'
- en: '`17 NAPTJNT`'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`17 NAPTJNT`'
- en: '`18 STDUIDA`'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`18 STDUIDA`'
- en: 'Lines 12 and 15 consist of consonants only. As seven consonants in a row are
    almost impossible in an English text, we conclude that we are on the wrong track.
    Let’s now try nine-letter lines, again written in columns from top to bottom:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 第12行和第15行仅由辅音组成。由于英语文本中几乎不可能连续有七个辅音字母，我们得出结论，当前的方向可能是错的。现在，我们尝试九个字母的行，再次从上到下按列排列：
- en: '`1 ISTBRTATF`'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`1 ISTBRTATF`'
- en: '`2 LORFIUONA`'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`2 LORFIUONA`'
- en: '`3 HNRAITNFT`'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`3 HNRAITNFT`'
- en: '`4 HSHEACARY`'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`4 HSHEACARY`'
- en: '`5 DONDRUJAE`'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`5 DONDRUJAE`'
- en: '`6 TOEFIVINC`'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`6 TOEFIVINC`'
- en: '`7 IEAOVRUFF`'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`7 IEAOVRUFF`'
- en: '`8 EETYNAPMX`'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`8 EETYNAPMX`'
- en: '`9 OENCLUONR`'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`9 OENCLUONR`'
- en: '`10 EENAROLDT`'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`10 EENAROLDT`'
- en: '`11 UIVPNORMG`'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`11 UIVPNORMG`'
- en: '`12 DOUDROSAE`'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`12 DOUDROSAE`'
- en: '`13 HETTWFOST`'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`13 HETTWFOST`'
- en: '`14 TFLREDMAA`'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`14 TFLREDMAA`'
- en: This looks better. The number of vowels in each line is plausible. We’ll keep
    the nine-letter variant in mind as a promising candidate.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来更好一些。每行的元音数是合理的。我们会把九个字母的变体作为一个有前景的候选保持在心里。
- en: 'The next candidate is the fourteen-letter version:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个候选是十四个字母版本：
- en: '`1 IFOFNETNTOUNMC`'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`1 IFOFNETNTOUNMC`'
- en: '`2 LUOTNDRLCFPFAF`'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`2 LUOTNDRLCFPFAF`'
- en: '`3 HDERVFRRUDORSX`'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`3 HDERVFRRUDORSX`'
- en: '`4 HHERUOINVALAAR`'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`4 HHERUOINVALAAR`'
- en: '`5 DTEHTYIRRORNFT`'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`5 DTEHTYIRRORNFT`'
- en: '`6 TSENLCAWANSFAG`'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`6 TSENLCAWANSFAG`'
- en: '`7 IOIEBAREUAOMTE`'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`7 IOIEBAREUAOMTE`'
- en: '`8 ENOAFPITOJMNYT`'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`8 ENOAFPITOJMNYT`'
- en: '`9 OSETADVUOITDEA`'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`9 OSETADVUOITDEA`'
- en: 'The ten vowels in line 7, while not impossible, are pretty improbable. So,
    this guess is not a good first choice. Here’s the last candidate, with eighteen
    letters per line:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 第7行中的十个元音虽然不不可能，但还是相当不太可能。所以，这个猜测并不是一个好的初步选择。以下是最后一个候选，十八个字母每行：
- en: '`1 IESETTBYRNTAAPTMFX`'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`1 IESETTBYRNTAAPTMFX`'
- en: '`2 LOOERNFCILUUOONNAR`'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`2 LOOERNFCILUUOONNAR`'
- en: '`3 HENERNAAIRTONLFDTT`'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`3 HENERNAAIRTONLFDTT`'
- en: '`4 HUSIHVEPANCOARRMYO`'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`4 HUSIHVEPANCOARRMYO`'
- en: '`5 DDOONUDDRRUOJSAAEE`'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`5 DDOONUDDRRUOJSAAEE`'
- en: '`6 THOEETFTIWVFIONSCT`'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`6 THOEETFTIWVFIONSCT`'
- en: '`7 OTEFALORVERDUMFAFA`'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`7 OTEFALORVERDUMFAFA`'
- en: This looks good, too.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这个也看起来不错。
- en: We now have two good candidates (lines of nine and eighteen letters), one unlikely
    one (lines of fourteen letters), and one that is extremely unlikely (lines of
    seven letters). We will proceed with the two good candidates by applying a technique
    called *multiple anagramming*. This method consists of rearranging the columns
    of a block until a meaningful word appears in one of the lines. Then we check
    if the other rearranged lines look like they might have been taken from an English
    text, too. If this is the case, we are probably on the right track; if not, we’ll
    try another word.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有两个不错的候选（九个和十八个字母的行），一个不太可能的候选（十四个字母的行），以及一个极不可能的候选（七个字母的行）。我们将继续尝试这两个较好的候选，通过应用一种叫做*多重重排法*的技术。这种方法的步骤是：通过重排一个块的列，直到某一行出现一个有意义的单词。然后，我们检查其他重新排列的行，看看它们是否看起来像从英文文本中提取的。如果是这种情况，我们可能在正确的轨道上；如果不是，我们就尝试另一个单词。
- en: 'Let’s first look for words that can be spelled by permuting the lines of the
    eighteen-letter-line candidates, checking for lines that may contain anagrammed
    words of interest. In line 4, we see the letters we need to spell `ARMY`—a likely
    word in a military message. Let’s use it for our first multiple-anagramming try.
    As there are two `A`s and two `R`s in the fourth line, we can construct this word
    in four possible ways:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们看一下是否可以通过重新排列十八字母候选行中的字母，拼出有意义的单词。第四行中，我们看到需要的字母来拼出`ARMY`——这是军事信息中可能出现的一个单词。我们以此为第一步的多重重排尝试。由于第四行中有两个`A`和两个`R`，我们可以用四种方式来构造这个单词：
- en: '`9 14 16 17 13 14 16 17 9 15 16 17 13 15 16 17`'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`9 14 16 17 13 14 16 17 9 15 16 17 13 15 16 17`'
- en: '`R P M F A P M F R T M F A T M F`'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`R P M F A P M F R T M F A T M F`'
- en: '`I O N A O O N A I N N A O N N A`'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`I O N A O O N A I N N A O N N A`'
- en: '`I L D T N L D T I F D T N F D T`'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`I L D T N L D T I F D T N F D T`'
- en: '`A R M Y A R M Y A R M Y A R M Y`'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`A R M Y A R M Y A R M Y A R M Y`'
- en: '`R S A E J S A E R A A E J A A E`'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`R S A E J S A E R A A E J A A E`'
- en: '`I O S C I O S C I N S C I N S C`'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`I O S C I O S C I N S C I N S C`'
- en: '`V M A F U M A F V F A F U F A F`'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`V M A F U M A F V F A F U F A F`'
- en: The first possibility is very unlikely, as the patterns `RPMF` in the first
    line and `VMAF` in the last line are not common English tetragraphs. The second
    block is not much better—look at `APMF` in the first line and `JSAE` in the fifth.
    For similar reasons, the third and the fourth combinations don’t make sense either.
    We have reached a dead end.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个可能性非常不太可能，因为第一行中的`RPMF`和最后一行中的`VMAF`并不是常见的英语四字组合。第二个块也不太好——看看第一行中的`APMF`和第五行中的`JSAE`。出于类似的原因，第三个和第四个组合也不成立。我们已经走到了死胡同。
- en: 'Let’s look for another word we can spell. We easily find a few, some of which
    can be formed in different ways. For instance, the letters `T`, `T`, `T`, `T`,
    `O`, `O`, and `W` in line 6 might spell `TWO` (numbers are common in military
    messages). The following are eight ways to assemble this word:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来找找能拼出来的其他单词。我们很容易找到几个单词，其中一些可以通过不同的方式拼成。例如，第六行的字母`T`、`T`、`T`、`T`、`O`、`O`和`W`可能拼成`TWO`（数字在军事信息中很常见）。以下是拼写这个单词的八种方式：
- en: '`1 10 3 6 10 3 8 10 3 18 10 3`'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`1 10 3 6 10 3 8 10 3 18 10 3`'
- en: '`I  N  S T  N  S Y  N  S  X N  S`'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`I  N  S T  N  S Y  N  S  X N  S`'
- en: '`L  L  O N  L  O C  L  O  R L  O`'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`L  L  O N  L  O C  L  O  R L  O`'
- en: '`H  R  N N  R  N A  R  N  T R  N`'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`H  R  N N  R  N A  R  N  T R  N`'
- en: '`H  N  S V  N  S P  N  S  O N  S`'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`H  N  S V  N  S P  N  S  O N  S`'
- en: '`D  R  O U  R  O D  R  O  E R  O`'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`D  R  O U  R  O D  R  O  E R  O`'
- en: '`T  W  O T  W  O T  W  O  T W  O`'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`T  W  O T  W  O T  W  O  T W  O`'
- en: '`I  E  E L  E  E R  E  E  A E  E`'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`I  E  E L  E  E R  E  E  A E  E`'
- en: '`1 10 14 6 10 14 8 10 14 18 10 14`'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`1 10 14 6 10 14 8 10 14 18 10 14`'
- en: '`I  N P  T  N P  Y  N P X N P`'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`I  N P  T  N P  Y  N P X N P`'
- en: '`L  L O  N  L O  C  L O R L O`'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`L  L O  N  L O  C  L O R L O`'
- en: '`H  R N  N  R N  A  R N T R N`'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`H  R N  N  R N  A  R N T R N`'
- en: '`D  R S  U  R S  D  R S E R S`'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`D  R S  U  R S  D  R S E R S`'
- en: '`T  W O  T  W O  T  W O T W O`'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`T  W O  T  W O  T  W O T W O`'
- en: '`I  E M  L  E M  R  E M A E M`'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`I  E M  L  E M  R  E M A E M`'
- en: Each of these eight guesses leads to letter combinations in other lines that
    don’t appear very often in English texts, such as `HNR`, `VNR`, and `XNP`. We
    seem to be on the wrong track again.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这些八个猜测导致的其他行字母组合在英语文本中并不常见，如`HNR`、`VNR`和`XNP`。看来我们又走错了方向。
- en: Next, we could try `AIR FORCE`, which might appear in line 2\. As there are
    four `O`s and two `R`s in this row, there are eight ways to spell it. Other possibilities
    include `BY TRAIN` in line 1, `THOSE` in line 6, and `OVER` in line 7\. However,
    all of these lead to implausible letter combinations in other lines.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以尝试`AIR FORCE`，它可能出现在第二行。由于这一行有四个`O`和两个`R`，所以有八种拼写方式。其他可能性包括第一行的`BY TRAIN`，第六行的`THOSE`，以及第七行的`OVER`。然而，这些组合在其他行中都导致了不太可能的字母组合。
- en: 'Reluctantly, we conclude that the eighteen-character-long-line candidate is
    probably not correct, so we turn to the nine-letter-long block:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 不情愿地，我们得出结论，十八个字符长的候选行可能不正确，因此我们转向九个字母长的块：
- en: '`1 ISTBRTATF`'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`1 ISTBRTATF`'
- en: '`2 LORFIUONA`'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`2 LORFIUONA`'
- en: '`3 HNRAITNFT`'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`3 HNRAITNFT`'
- en: '`4 HSHEACARY`'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`4 HSHEACARY`'
- en: '`5 DONDRUJAE`'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`5 DONDRUJAE`'
- en: '`6 TOEFIVINC`'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`6 TOEFIVINC`'
- en: '`7 IEAOVRUFF`'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`7 IEAOVRUFF`'
- en: '`8 EETYNAPMX`'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`8 EETYNAPMX`'
- en: '`9 OENCLUONR`'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`9 OENCLUONR`'
- en: '`10 EENAROLDT`'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`10 EENAROLDT`'
- en: '`11 UIVPNORMG`'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`11 UIVPNORMG`'
- en: '`12 DOUDROSAE`'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`12 DOUDROSAE`'
- en: '`13 HETTWFOST`'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`13 HETTWFOST`'
- en: '`14 TFLREDMAA`'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`14 TFLREDMAA`'
- en: 'While looking for likely candidates, we find a few words related to numbers.
    The first line provides the letters we might need to form the word `FIRST`. Both
    lines 6 and 7 contain the letters of the word `FIVE`. Because `V` is a relatively
    uncommon letter, let’s take `FIVE` in line 6 as our first guess. The line contains
    two `I`s, so there are two ways to spell the word:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在寻找可能的候选词时，我们找到了一些与数字相关的单词。第一行提供了我们可能需要的字母来拼成单词`FIRST`。第六行和第七行包含了单词`FIVE`的字母。因为字母`V`是相对不常见的字母，让我们把第六行的`FIVE`作为第一个猜测。这一行有两个`I`，所以有两种拼法：
- en: '`4 5 6 3 4 7 6 3`'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`4 5 6 3 4 7 6 3`'
- en: '`B R T T B A T T`'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`B R T T B A T T`'
- en: '`F I U R F O U R`'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`F I U R F O U R`'
- en: '`A I T R A N T R`'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`A I T R A N T R`'
- en: '`E A C H E A C H`'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`E A C H E A C H`'
- en: '`D R U N D J U N`'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`D R U N D J U N`'
- en: '`F I V E F I V E`'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`F I V E F I V E`'
- en: '`O V R A O U R A`'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`O V R A O U R A`'
- en: '`Y N A T Y P A T`'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`Y N A T Y P A T`'
- en: '`C L U N C O U N`'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`C L U N C O U N`'
- en: '`A R O N A L O N`'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`A R O N A L O N`'
- en: '`P N O V P R O V`'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`P N O V P R O V`'
- en: '`D R O U D S O U`'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`D R O U D S O U`'
- en: '`T W F T T O F T`'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`T W F T T O F T`'
- en: '`R E D L R M D L`'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`R E D L R M D L`'
- en: It should be immediately clear that the second block looks very promising. In
    addition to FIVE, it produces the English words FOUR and EACH, along with promising
    word fragments such as BATT, OURA, COUN, ALON, and PROV. Only the last line, RMDL,
    doesn’t look like English, but this might be due to an abbreviation. Let’s assume
    that this guess is correct.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，第二块看起来非常有希望。除了“FIVE”之外，它还能产生英语单词“FOUR”和“EACH”，并且有一些有前途的单词片段，如“BATT”，“OURA”，“COUN”，“ALON”和“PROV”。只有最后一行“RMDL”不像英语单词，但这可能是因为它是一个缩写。让我们假设这个猜测是正确的。
- en: 'How can we proceed? Since we think we know columns 4, 7, 6, and 3, it’s best
    to check which of the five remaining columns (1, 2, 5, 8, and 9) makes the most
    sense if put in front of the block we have chosen. There are five options:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们该如何继续？因为我们认为我们已经知道了第4、7、6和3列，所以最好检查其余五列（1、2、5、8和9）中的哪一列在我们选择的块前放置最合适。共有五种选择：
- en: '`1 4 7 6 3 2 4 7 6 3 5 4 7 6 3 8 4 7 6 3 9 4 7 6 3`'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`1 4 7 6 3 2 4 7 6 3 5 4 7 6 3 8 4 7 6 3 9 4 7 6 3`'
- en: '`I B A T T S B A T T R B A T T T B A T T F B A T T`'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`I B A T T S B A T T R B A T T T B A T T`'
- en: '`L F O U R O F O U R I F O U R N F O U R A F O U R`'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`L F O U R O F O U R I F O U R N F O U R A F O U R`'
- en: '`H A N T R N A N T R I A N T R F A N T R T A N T R`'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`H A N T R N A N T R I A N T R F A N T R T A N T R`'
- en: '`H E A C H S E A C H A E A C H R E A C H Y E A C H`'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`H E A C H S E A C H A E A C H R E A C H Y E A C H`'
- en: '`D D J U N O D J U N R D J U N A D J U N E D J U N`'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`D D J U N O D J U N R D J U N A D J U N E D J U N`'
- en: '`T` `F I V E` `O` `F I V E` `I` `F I V E` `N` `F I V E` `C` `F I V E`'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`T` `F I V E` `O` `F I V E` `I` `F I V E` `N` `F I V E` `C` `F I V E`'
- en: '`I O U R A E O U R A V O U R A F O U R A F O U R A`'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`I O U R A E O U R A V O U R A F O U R A F O U R A`'
- en: '`E Y P A T E Y P A T N Y P A T M Y P A T X Y P A T`'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`E Y P A T E Y P A T N Y P A T M Y P A T X Y P A T`'
- en: '`O C O U N E C O U N L C O U N N C O U N R C O U N`'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`O C O U N E C O U N L C O U N N C O U N R C O U N`'
- en: '`E A L O N E A L O N R A L O N D A L O N T A L O N`'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`E A L O N E A L O N R A L O N D A L O N T A L O N`'
- en: '`U P R O V I P R O V N P R O V M P R O V G P R O V`'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`U P R O V I P R O V N P R O V M P R O V G P R O V`'
- en: '`D D S O U O D S O U R D S O U A D S O U E D S O U`'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`D D S O U O D S O U R D S O U A D S O U E D S O U`'
- en: '`H T O F T E T O F T W T O F T S T O F T T T O F T`'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`H T O F T E T O F T W T O F T S T O F T T T O F T`'
- en: '`T R M D L F R M D L E R M D L A R M D L A R M D L`'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`T R M D L F R M D L E R M D L A R M D L A R M D L`'
- en: 'The fourth option, 84763, produces the best results: REACH, NFOUR, and MYPAT.
    Most of the other five-letter groups can easily be imagined as having been taken
    from an English text. The remaining columns (1, 2, 5, and 9) can now easily be
    added in a similar way. We check the placement of each one before or after our
    existing block to see what makes the most sense. In the end, we get the following:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 第四个选项，84763，产生了最佳结果：REACH，NFOUR 和 MYPAT。其他大部分五个字母的组合可以轻松地想象为来源于英语文本。其余的列（1，2，5
    和 9）现在也可以以类似的方式轻松添加。我们会在现有的块之前或之后检查每一项的放置，以确定最合理的排列方式。最后，我们得到如下结果：
- en: '`FIRSTBATT`'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`FIRSTBATT`'
- en: '`ALIONFOUR`'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`ALIONFOUR`'
- en: '`THINFANTR`'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`THINFANTR`'
- en: '`YHASREACH`'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`YHASREACH`'
- en: '`EDROADJUN`'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`EDROADJUN`'
- en: '`CTIONFIVE`'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`CTIONFIVE`'
- en: '`FIVEFOURA`'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`FIVEFOURA`'
- en: '`XENEMYPAT`'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`XENEMYPAT`'
- en: '`ROLENCOUN`'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`ROLENCOUN`'
- en: '`TEREDALON`'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`TEREDALON`'
- en: '`GUNIMPROV`'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`GUNIMPROV`'
- en: '`EDROADSOU`'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`EDROADSOU`'
- en: '`THWESTOFT`'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`THWESTOFT`'
- en: '`ATEFARMDL`'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`ATEFARMDL`'
- en: 'This plaintext can be read line-wise. X is used as a period:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这个明文可以按行读取。X 被用作句号：
- en: FIRST BATTALION FOURTH INFANTRY HAS REACHED ROAD JUNCTION FIVE FIVE FOUR A.
    ENEMY PATROL ENCOUNTERED ALONG UNIMPROVED ROAD SOUTHWEST OF TATE FARM DL
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 第一营第四步兵已经到达路口五五四 A。敌军巡逻队在塔特农场西南的未改良道路上遭遇。
- en: Half of that tetragraph of consonants we saw above, RMDL, is the end of the
    word FARM. We are not certain what the remaining letters, DL, might mean. Perhaps
    a signature or filler letters to reach a certain message length?
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前看到的那个辅音四字组合 RMDL，正是单词 FARM 的结尾。我们不确定剩下的字母 DL 可能代表什么，也许是一个签名或填充字母，用来达到特定的消息长度？
- en: 'As should have become clear, multiple anagramming is a *nondeterministic* method,
    meaning that it is possible to come up with multiple solution candidates. Thus,
    it must be done with care, creativity, and trial and error. There are, however,
    some tricks that might simplify the codebreaking process:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 如今变得越来越明显，多重变位是一种*非确定性*方法，这意味着可以得出多个解答候选。因此，必须小心、富有创造力并通过试错法来完成。然而，有一些技巧可以简化破译过程：
- en: The letter *Q* is very helpful for multiple anagramming, as it is usually followed
    by a *U*.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字母 *Q* 对于多个变位（anagramming）非常有用，因为它通常后面跟着一个 *U*。
- en: The letters *J*, *V*, and *Z* are almost always followed by a vowel.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字母 *J*、*V* 和 *Z* 几乎总是后面跟着元音。
- en: The letters *A*, *O*, and *U* are usually followed by a consonant.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字母 *A*、*O* 和 *U* 通常后面跟着辅音。
- en: The letter *H* is usually preceded by a consonant and followed by a vowel.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字母 *H* 通常前面是辅音，后面跟着元音。
- en: If you want to learn more about multiple anagramming, we recommend Helen Fouché
    Gaines’s classic 1939 book *Cryptanalysis*.^([8](b06.xhtml#c09-endnote-8))
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于多重变位的内容，我们推荐海伦·富歇·盖恩斯的经典1939年著作《密码分析》*Cryptanalysis*。^([8](b06.xhtml#c09-endnote-8))
- en: Success stories
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成功故事
- en: Donald Hill’s diary
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 唐纳德·希尔的日记
- en: Donald Hill (ca. 1915–1995) was a British military pilot in World War II. Stationed
    in Hong Kong, he was captured by the Japanese and sent to a prisoner-of-war camp.
    After four years of incarceration, he was released. Even before his years in captivity,
    Hill had kept a diary. But because British soldiers were not allowed to keep private
    notes, he used numbers instead of letters and camouflaged the diary as a collection
    of multiplication tables, titling his booklet *Russel’s Mathematical Tables*.
    This did not look suspicious, as multiplication tables were quite common before
    pocket calculators were invented. While in captivity, Hill continued to write
    his journal.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 唐纳德·希尔（约1915–1995）是二战期间的英国军事飞行员。他驻扎在香港，被日本军队俘虏并送往战俘营。在囚禁四年后，他被释放。即使在囚禁之前，希尔也一直保留着日记。但由于英国士兵不允许保留私人笔记，他用数字代替字母，并将日记伪装成一本乘法表，标题为*拉塞尔的数学表*。这看起来并不令人怀疑，因为在口袋计算器发明之前，乘法表是非常常见的。希尔在囚禁期间继续写他的日记。
- en: After his return to England, Hill married his fiancée and never again talked
    about his diary or its contents. Only after Hill’s death in 1995 did his wife
    investigate the strange number sequences in the booklet he left behind. She asked
    mathematics professor Philip Aston from the University of Surrey to analyze them.
    He was able to deduce their meaning and published a paper about his deciphering
    of the diary.^([9](b06.xhtml#c09-endnote-9)) The story of Donald Hill is also
    told in Andro Linklater’s 2001 book *The Code of Love*.^([10](b06.xhtml#c09-endnote-10))
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 返回英国后，希尔与未婚妻结婚，并再也没有谈论过他的日记或其中的内容。直到1995年希尔去世，他的妻子才开始调查他留下的这本小册子中的奇怪数字序列。她请来萨里大学的数学教授菲利普·阿斯顿分析这些数字。阿斯顿成功地推测出了这些数字的含义，并发表了一篇关于解密日记的论文。^([9](b06.xhtml#c09-endnote-9))
    唐纳德·希尔的故事也在安德罗·林克拉特的2001年著作《爱的密码》中讲述。^([10](b06.xhtml#c09-endnote-10))
- en: When Aston first examined Hill’s alleged mathematical tables, he saw that most
    of the pages were filled with groups of four digits (see [Figure 9-5](#figure9-5)).
    These numbers were purportedly multiplication results, but the results didn’t
    fit with the multiplications. Aston concluded that the real purpose of these numbers
    was to encode a text.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 当阿斯顿第一次检查希尔所谓的数学表时，他看到大多数页面上填满了四位数字的组合（见[图9-5](#figure9-5)）。这些数字据称是乘法结果，但结果与实际的乘法运算不符。阿斯顿得出结论，这些数字的真正用途是用来编码一段文本。
- en: '![](image_fi/502727c09/f09005.png)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c09/f09005.png)'
- en: 'Figure 9-5: Prisoner-of-war Donald Hill disguised his diary as a collection
    of mathematical tables. In addition, he used a transposition cipher.'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-5：战俘唐纳德·希尔将他的日记伪装成一本数学表。此外，他还使用了置换密码。
- en: The most obvious way to interpret the numbers was that each four-digit group
    encoded two letters. (In other words, each digit pair encoded a letter.) When
    Aston saw that almost all digit pairs represented numbers between ten and thirty-five,
    he determined that the most obvious encoding was `A` = `10`, `B` = `11`, `C` =
    `12`, `D` = `13`, etc. Aston performed a frequency analysis based on this encoding
    and saw that the letter frequencies almost exactly matched the ones of the English
    language. However, the letter sequences he received didn’t make sense. So, he
    assumed that Hill had used a transposition cipher in addition to the substitution.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 解读这些数字的最明显方法是，每四位数字组编码了两个字母。（换句话说，每一对数字代表一个字母。）当阿斯顿看到几乎所有的数字对都代表介于十到三十五之间的数字时，他确定最明显的编码方式是`A`
    = `10`，`B` = `11`，`C` = `12`，`D` = `13`，等等。阿斯顿根据这种编码进行了频率分析，发现字母频率几乎完全符合英语语言的字母频率。然而，他得到的字母序列并没有意义。因此，他假设希尔除了使用替换密码外，还使用了置换密码。
- en: Taking a closer look at the numbers in the diary, Aston noticed that occasionally,
    a group consisting of four zeros (`0000`) appeared. This didn’t fit with the encoding.
    Aston’s guess was that these zero-blocks were separators. As it turned out, there
    were exactly 561 four-digit groups (1,122 letters) between each two separators.
    This made it likely that Hill had applied a transposition cipher on units of 1,122
    letters.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 更仔细地观察日记中的数字时，阿斯顿注意到偶尔会出现一个由四个零（`0000`）组成的组合。这与编码不符。阿斯顿猜测这些零块是分隔符。事实证明，每两个分隔符之间恰好有561个四位数字组（1,122个字母）。这使得希尔可能对每1,122个字母应用了置换密码。
- en: 'One can arrange 1,122 letters in a rectangle very easily because the number
    1,122 has many factors. This suggested that Hill had applied a complete columnar
    transposition cipher using a rectangle size such as 66 × 17, 11 × 102, or 33 ×
    34\. Aston didn’t have to search very long for the best guess, however, as on
    the first diary page were written a right-hand arrow next to the number `340`
    and a down arrow next to the number `330`. Aston assumed that the zeros in these
    numbers were there to confuse the reader, and then he arranged one of the 1,122-letter
    units in a table containing thirty-three columns and thirty-four lines. Writing
    the text line-wise in such a table quickly produced meaningful words in the columns.
    To our regret, Aston’s paper doesn’t describe what exactly he saw, but the 33
    × 34 table may have looked like this:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 通过排列1,122个字母成一个矩形是非常容易的，因为数字1,122有很多因子。这表明Hill可能使用了一个完整的列转置密码，矩形的大小可能是66 × 17、11
    × 102 或 33 × 34。尽管如此，Aston并不需要很长时间就能找到最合适的猜测，因为在日记的第一页上写着一个右箭头，旁边是数字`340`，还有一个下箭头，旁边是数字`330`。Aston认为这些数字中的零是为了迷惑读者，然后他将其中一个1,122字母的单位排列成一个包含33列34行的表格。将文本按行写入表格中，快速生成了列中的有意义单词。遗憾的是，Aston的论文中没有描述他到底看到了什么，但这个33
    × 34的表格可能是这样的：
- en: '`DMSTIINSKDSEATALDSGMTOOARNRRBUENDE`'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`DMSTIINSKDSEATALDSGMTOOARNRRBUENDE`'
- en: '`IBABLAWTBAARMRLEETHEOENPTIEESTAOOF`'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`IBABLAWTBAARMRLEETHEOENPTIEESTAOOF`'
- en: '`WEFLMMESYMBSEALTTWTIASEPWSTTANRTAT`'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`WEFLMMESYMBSEALTTWTIASEPWSTTANRTAT`'
- en: '`AREAADDTTALCRTWEHEENSUPEEIAHMOAUNR`'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`AREAADDTTALCRTWEHEENSUPEEIAHMOAUNR`'
- en: '`KSTZCIAHHGAOTEELEARDHPLANMREOCNNYE`'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`KSTZCIAHHGAOTEELEARDHPLANMREOCNNYE`'
- en: '`EEYIHSSEEEZMCDVYBRSIETARTMYINAOSTP`'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`EEYIHSSEEEZMCDVYBRSIETARTMYINAOSTP`'
- en: '`TSANITHBFBEEAFEBLESALNNHYIRRGSMCHR`'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`TSANITHBFBEEAFEBLESALNNHYIRRGSMCHR`'
- en: '`HCNGNUDOTOAONIGUATWNTSEEMNILSUIAIA`'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`HCNGNUDOTOAONIGUATWNTSEEMNILSUIAIA`'
- en: '`EODAEROMGTNVCRORZOOTEMIATENETANRNY`'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`EODAEROMGTNVCRORZOOTEMIATENETANRNY`'
- en: '`ORBNSBWBHHOELETNELORRONDNNGWTLORGI`'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`ORBNSBWBHHOELETNELORRONDNNGWTLORGI`'
- en: '`TTYDAENETWTRIIWETDPOTKTIUTSIATUEEN`'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`TTYDAENETWTRIIWETDPOTKTIUTSIATUEEN`'
- en: '`HEASROTREAHAPNHDSTDONEANTHUSEISDXG`'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`HEASROTREAHAPNHDSTDONEANTHUSEISDXG`'
- en: '`EDMIEEOSRLEGPTIWTHOPTACGEEPGRERWCT`'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`EDMIEEOSRLEGPTIWTHOPTACGEEPGRERWCT`'
- en: '`RBINBAFPSRRAEOCTOAWSHNTOSLTUUSOEEH`'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`RBINBAFPSRRAEOCTOAWSHNTOSLTUUSOEEH`'
- en: '`OYRKURLATUBIROHTOTNGEDWUOLONITAHPA`'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`OYRKURLATUBIROHTOTNGEDWUOLONITAHPA`'
- en: '`FOAFRLISHSANIUIHFWOETITRFTSTNOROTT`'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`FOAFRLISHSANIUIHFWOETITRFTSTNOROTT`'
- en: '`FVCINYGSEADBNRSTIENTRHAWCHAHSPOPTT`'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`FVCINYGSEADBNRSTIENTRHAWCHAHSPOPTT`'
- en: '`IELNTAHOBRLOTPPWEAUPEETAOEYEOEFEOH`'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`IELNTAHOBRLOTPPWEAUPEETAOEYEOEFEOH`'
- en: '`CREAOSTVEEYMHLRORRSAXTTYNRTRNRPAME`'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`CREAOSTVEEYMHLRORRSAXTTYNRTRNRPAME`'
- en: '`ETNLUTSEEGDBEAERCEANCWETCEHEESLNAB`'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`ETNLUTSEEGDBEAERCEANCWETCEHEESLNAB`'
- en: '`RHOLTHJRSOATANCEEANITOMHEGATAOADNO`'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`RHOLTHJRSOATANCEEANITOMHEGATAOADNO`'
- en: '`SIOYIEUHTNMWFETDATDCTWPENOTSINNWOM`'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`SIOYIEUHTNMWFETDATDCTWPENOTSINNWOM`'
- en: '`ORNTNCSEEEAGTSOHNWPKEATRTEWARNEEUB`'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '`ORNTNCSEEEAGTSOHNWPKEATRTEWARNEEUB`'
- en: '`VTEHCOTAWOGTEWUODAOYMLTERSAMCESTRS`'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`VTEHCOTAWOGTEWUODAOYMLTERSAMCESTRS`'
- en: '`EYIELLLDINERHRSTSRUAEROSAMRARLANDW`'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '`EYIELLLDINERHRSTSRUAEROSAMRARLANDW`'
- en: '`RFSYUONBTEDENGLHHWNNNUPNTYWDAENSEO`'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`RFSYUONBTEDENGLHHWNNNUPNTYWDAENSEO`'
- en: '`BIHMDNTUHBLDOTIEETADTSUOESTRFIDPFN`'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`BIHMDNTUHBLDOTIEETADTSUOESTRFIDPFN`'
- en: '`RGIATIITBEEOOVTATICRTATTDITUTGNEET`'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`RGIATIITBEEOOVTATICRTATTDITUTGNEET`'
- en: '`EHTKNAMTOEACNETVSHOUHROTAEHSLHICNE`'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`EHTKNAMTOEACNETVSHOUHROTAEHSLHICNE`'
- en: '`ATAEGLEHMSVKBTLYCJNSEEUMTEJHETNTCX`'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`ATAEGLEHMSVKBTLYCJNSEEUMTEJHETNTCX`'
- en: '`KEFOTSTEBTISOHEBOACHYLTETPAFFCETEP`'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`KEFOTSTEBTISOHEBOACHYLTETPAFFCETEP`'
- en: '`FRTFHEOFSENAMESOMPETFETTAAPOTIBHPL`'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`FRTFHEOFSENAMESOMPETFETTAAPOTIBHPL`'
- en: '`ASEFECHIGIGABMOMPANNIFHOCNARBVOEOO`'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`ASEFECHIGIGABMOMPANNIFHOCNARBVOEOO`'
- en: 'The first column, beginning from the top, contains the message `I WAKE THE
    OTHER OFFICERS`. The second column, `MBERSESCORTEDBYOVE`, does not appear to directly
    follow the first column but certainly looks like a fragment of English. It was
    clear that the order of the columns had to be changed. Had Donald Hill used a
    keyword for this transposition? Again, Aston didn’t have to search very long for
    a solution. On the front page of the diary, he found the full names of Hill and
    his fiancée, consisting of thirty-four letters:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 第一列从上到下包含了信息 `I WAKE THE OTHER OFFICERS`。第二列 `MBERSESCORTEDBYOVE` 看起来并不直接跟随第一列，但显然它是英文的一个片段。很明显，列的顺序需要改变。Donald
    Hill 是否用了一个关键词进行这种转置呢？同样，Aston并不需要很长时间就找到了答案。在日记的封面上，他发现了Hill和他的未婚妻的全名，这些名字一共包含了34个字母：
- en: '`DONALD SAMUEL HILL PAMELA SEELY KIRRAGE`'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`DONALD SAMUEL HILL PAMELA SEELY KIRRAGE`'
- en: 'Sorted alphabetically, these thirty-four letters read as follows:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 按字母顺序排列，这34个字母读作：
- en: '`AAAAADDEEEEEGHIIKLLLLLLMMNOPRRSSUY`'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`AAAAADDEEEEEGHIIKLLLLLLMMNOPRRSSUY`'
- en: 'To decrypt the diary, Aston wrote these letters in the first line of the table:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解密日记，Aston 在表格的第一行写下了这些字母：
- en: '`AAAAADDEEEEEGHIIKLLLLLLMMNOPRRSSUY`'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`AAAAADDEEEEEGHIIKLLLLLLMMNOPRRSSUY`'
- en: '`----------------------------------`'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '`----------------------------------`'
- en: '`DMSTIINSKDSEATALDSGMTOOARNRRBUENDE`'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`DMSTIINSKDSEATALDSGMTOOARNRRBUENDE`'
- en: '`IBABLAWTBAARMRLEETHEOENPTIEESTAOOF`'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`IBABLAWTBAARMRLEETHEOENPTIEESTAOOF`'
- en: '`. . .`'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`. . .`'
- en: 'Then he rearranged the columns such that the keyword appeared again:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '`DONALDSAMUELHILLPAMELASEELYKIRRAGE`'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '`----------------------------------`'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '`IRNDSNEMADSGTAMTRSRKOTNDSOEDLBUIAE`'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: '`AETITWABPOTHRLEOEATBEBOAANFEESTLMR`'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '`MTSWWEREPASTALIATFWYSLTMBEITTANMES`'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '`DATAEDARENTETWNSHEETUAUALPRHEMOARC`'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '`IRMKAANSAYHREEDHETNHPZNGALEELOCCIO`'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '`SYMERSOERTESDVIETYTEIISEZAPBYNAHCM`'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '`TRITEHMSHHBSFEALRAYFNNCBENRLBGSIAE`'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: '`UINHTDICEIOWIGNTLNMISGAOAEAAUSUNNO`'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: '`RNEEOONOANMOROTEEDIGMARTNIYZRTAECV`'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '`BGNOLWORDGBOETRRWBNHONRHONIENTLSLE`'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '`ESTTDNUTIEEPIWOIIYUTKDEWTTNIEHTAIR`'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: '`DUHHTTSENXRDNHONSATEESDAHAGSDEIRPA`'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: '`EPEBHORDGCSOTIPTGMERAIWLECTTWREEPG`'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '`ATLRAFOBOEPWOCSHUISSNNERRTHOIUSBEA`'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: '`ROLOTLAYUPANOHGENROTDKHUBWAOTITURI`'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: '`LSTFWIRORTSOUIEITAFHTFOSAETFHNORIN`'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '`YAHFEGOVWTSNRSTRHCCEHIPADATITSPNNB`'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: '`AYETAHFEAOOUPPPEELOBENERLTHEWOETTO`'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: '`STRCRTPRYMVSLRAXRENETAAEYTERONROHM`'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '`THEEESLTTAEAAENCENCEWLNGDEBCRESUEB`'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '`HAGRAJAHHNRNNCIIIOESOLDOAMOEEAOTAI`'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: '`ETOSTUNIEOHDEICTSONTWYWNMPMADINIFN`'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: '`CWEOWSERRUEPSOKEANTEATEEATBNHRNNTG`'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '`OASVATSTERAOWUYMMERWLHIOGTSDOCECET`'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: '`LRMERIAYSDDUESAEAIAIRENNEOWSTRLLRH`'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: '`OWYRWNNFNEBRGLNNDSTTUYSEDPOHHAEUNE`'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '`NISBITDIOFUAITDTRHEHSMPBLUNEEFIDOD`'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: '`ITLRTINGTETCVTRTUIDBAAEEETTIATGIOO`'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: '`AHEEHMIHINTOETUHSTAORKCEAOESVLHNNC`'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: '`LJEAJENTMCHNTLSEHATMEETSVUXCYETGBK`'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: '`SAPKATEHEEECEEHYFFTBLOTTITPOBFCTOS`'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: '`EPAFPOBRTPFEESIFOTASEFHENTLMOTIHMA`'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: '`CANAAHOSOOINMONTRECGFFEIGHOPMBVEBN`'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the deciphering was complete. Read column-wise, here is the plaintext,
    a diary entry written on December 8, 1941:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: '`I am disturbed early as the Colonial Secretary rings up to say that war with
    Japan is imminent. Hell there goes my sleep and I wake the other officers. Over
    breakfast we are told that we are at war with Japan. We dash down to flights just
    in time to hear an ominous roar of planes and nine bombers escorted by over thirty
    fighters appear heading our way. There''s no time to do anything except to man
    our defense posts. The bombers pass overhead but the fighters swoop down on us
    and pour a concentrated fire into our planes. We give them all we''ve got which
    is precious little. Some Indian troops get panicky and rush into a shelter, in
    their excitement they fire their Lewis gun. There is a mad rush for safety and
    by a miracle no one is hit. After twenty minutes of concentrated attack by the
    fighters the Beeste with bombs goes up in smoke and the two Walrus are left blazing
    and sink. Finally they make off, not unscarred we hope, and we inspect the damage.
    Both Walrus are gone, one Beeste is ablaze, another badly damaged, leaving one
    plane intact. We attempt to put out the fire praying that the bombs won''t explode.
    The blaze is too fierce and she is completely burned with two red hot heavy bombs
    amongst the ruins. One aircraft left but no casualties to personnel. Eight civil
    machines are burnt out including the American clipper. In the afternoon, bombers
    come over again bombing the docks an . . .`'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the diary can be read in Aston’s 1997 paper and in the 2001 book
    *The Code of Love* by Andro Linklater.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: The Pablo Waberski spy case
  id: totrans-370
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In his 1931 book *The American Black Chamber*, which caused a scandal because
    of its discussion of America’s secret cryptographic abilities, American codebreaker
    Herbert Yardley (1889–1958) describes a German transposition cipher.^([11](b06.xhtml#c09-endnote-11))
    According to Yardley, on February 10, 1918, during World War I, American agents
    arrested a man on the Mexican border who called himself Pablo Waberski. The investigators
    suspected that the detainee was actually a German secret agent named Lothar Witzke.^([12](b06.xhtml#c09-endnote-12))^,
    ^([13](b06.xhtml#c09-endnote-13)) Sewn into the left sleeve of the suspect’s coat,
    they found the following encrypted note:^([14](b06.xhtml#c09-endnote-14))
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: '`SEOFNATUPK ASIHEIHBBN UERSDAUSNN`'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: '`LRSEGGIESN NKLEZNSIMN EHNESHMPPB`'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: '`ASUEASRIHT HTEURMVNSM EAINCOUASI`'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: '`INSNRNVEGD ESNBTNNRCN DTDRZBEMUK`'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: '`KOLSELZDNN AUEBFKBPSA TASECISDGT`'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: '`IHUKTNAEIE TIEBAEUERA THNOIEAEEN`'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: '`HSDAEAIAKN ETHNNNEECD CKDKONESDU`'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: '`ESZADEHPEA BBILSESOOE ETNOUZKDML`'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: '`NEUIIURMRN ZWHNEEGVCR EODHICSIAC`'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: '`NIUSNRDNSO DRGSURRIEC EGRCSUASSP`'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: '`EATGRSHEHO ETRUSEELCA UMTPAATLEE`'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: '`CICXRNPRGA AWSUTEMAIR NASNUTEDEA`'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: '`ERRREOHEIM EAHKTMUHDT COKDTGCEIO`'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: '`EEFIGHIHRE LITFIUEUNL EELSERUNMA`'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: '`ZNAI`'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: Herbert Yardley was commissioned to crack this encryption. He and his team performed
    a frequency analysis and a few other statistical tests. These revealed that `E`
    was the most frequent letter, followed by `N`, while `Q`, `X`, and `Y` were completely
    absent. These features are typical of the German language (see Appendix B), suggesting
    the author had used a transposition cipher.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: 'Yardley knew how to break such an encryption with the help of common digraphs
    (pairs of letters). In German, the letter `C` is particularly helpful, because
    it usually precedes `H`, occasionally precedes `K`, and is rarely found in front
    of any other letter. Yardley therefore tagged all `C`s in the text and then looked
    for `H`s. Then he determined the distances between each `C` and `H`. As it turned
    out, a distance of 108 letters appeared conspicuously often. When Yardley transcribed
    the message in lines of length 108, he received the following letter sequences:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: '`SEOFNATUPK ASIHEIHBBN UERSDAUSNN LRSEGGIESN NKLEZNSIMN . . .`'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: '`CNDTDRZBEM UKKOLSELZD NNAUEBFKBP SATASECISD GTIHUKTNAE . . .`'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: '`HPEABBILSE SOOEETNOUZ KDMLNEUIIU RMRNZWHNEE GVCREODHIC . . .`'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: '`AATLEECICX RNPRGAAWSU TEMAIRNASN UTEDEAERRR EOHEIMEAHK . . .`'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: 'Read from top to bottom, virtually every column produced a four-letter sequence
    typical of the German language: column 1 is `SCHA`, column 10 is `KMEX`, and column
    20 contains `NDZU`. Next, Yardley and his team organized the columns in a meaningful
    order, which turned out to be fairly straightforward. For instance, `KMEX`, followed
    by `IKOP`, produced the word `MEXIKO` (German for `MEXICO`). In the end, Yardley
    was able to read the following plaintext:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 从上到下阅读，几乎每一列都产生了一个典型的德语四字序列：第一列是`SCHA`，第十列是`KMEX`，第二十列包含`NDZU`。接下来，雅德利和他的团队将这些列按有意义的顺序组织起来，结果相当简单。例如，`KMEX`后跟`IKOP`组成了单词`MEXIKO`（德语中的`MEXICO`）。最终，雅德利成功地读取到了以下明文：
- en: '`AN DIE KAISERLICHEN KONSULARBEHOERDEN IN DER REPUBLIK MEXIKO PUNKT STRENG
    GEHEIM AUSRUFUNGSZEICHEN DER INHABER DIESES IST EIN REICHSANGEHOERIGER DER UNTER
    DEM NAMEN PABLO WABERSKI ALS RUSSE REIST PUNKT ER IST DEUTSCHER GEHEIMAGENT PUNKT
    ABSATZ ICH BITTE IHM AUF ANSUCHEN SCHUTZ UND BEISTAND ZU GEWAEHREN KOMMA IHM AUCH
    AUF VERLANGEN BIS ZU EINTAUSEND PESOS ORO NACIONAL VORZUSCHIESSEN UND SEINE CODETELEGRAMME
    AN DIESE GESANDTSCHAFT ALS KONSULARAMTLICHE DEPESCHEN ABZUSENDEN PUNKT`'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '`AN DIE KAISERLICHEN KONSULARBEHOERDEN IN DER REPUBLIK MEXIKO PUNKT STRENG
    GEHEIM AUSRUFUNGSZEICHEN DER INHABER DIESES IST EIN REICHSANGEHOERIGER DER UNTER
    DEM NAMEN PABLO WABERSKI ALS RUSSE REIST PUNKT ER IST DEUTSCHER GEHEIMAGENT PUNKT
    ABSATZ ICH BITTE IHM AUF ANSUCHEN SCHUTZ UND BEISTAND ZU GEWAEHREN KOMMA IHM AUCH
    AUF VERLANGEN BIS ZU EINTAUSEND PESOS ORO NACIONAL VORZUSCHIESSEN UND SEINE CODETELEGRAMME
    AN DIESE GESANDTSCHAFT ALS KONSULARAMTLICHE DEPESCHEN ABZUSENDEN PUNKT`'
- en: '`VON ECKHARDT`'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`VON ECKHARDT`'
- en: 'Here’s a translation:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 这是翻译：
- en: '`To the Imperial consular authorities in the Republic of Mexico. Top secret!
    The owner of this [paper] is a member of the Reich, who travels under the name
    Pablo Waberski as a Russian. He is a German secret agent. I kindly ask you to
    grant him protection and support on request, to pay him up to 1000 Pesos Oro National
    on request, and to send his encrypted telegram``s to this consulate as diplomatic
    correspondence.`'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '`致墨西哥共和国的帝国领事当局。最高机密！此[纸张]的所有者是德国帝国成员，他以俄罗斯人帕布洛·瓦贝尔斯基的名字旅行。他是德国的秘密特工。我恳请您根据要求为他提供保护和支持，按要求提供最高1000比索的Oro
    Nacional，并将他的加密电报作为外交函件送往此领事馆。`'
- en: '`Von Eckhardt`'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '`Von Eckhardt`'
- en: This letter proved that the suspect, Pablo Waberski, was in fact a German spy.
    He was sentenced to death in 1918\. After the war, when relations between Germany
    and the US improved, he was pardoned, and his charges were eventually dismissed
    in 1923.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 这封信证明了嫌疑人帕布洛·瓦贝尔斯基实际上是德国间谍。他在1918年被判死刑。战争结束后，当德美关系改善时，他被特赦，并且他的指控最终在1923年被撤销。
- en: Challenges
  id: totrans-400
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 挑战
- en: The Lampedusa message
  id: totrans-401
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 兰佩杜萨的信息
- en: 'The 1980 book *Love in Code* by Donald McCormick is a nice overview of the
    use of encryption by lovers.^([15](b06.xhtml#c09-endnote-15)) It covers hundreds
    of years of encrypted love letters, diaries, newspaper advertisements, and other
    cryptograms created by romantic couples seeking to keep their communications private.
    In one of the chapters, titled “Love at War,” McCormick reports on a woman who
    lived on the tiny Italian island of Lampedusa in the Mediterranean Sea when the
    US Army bombarded it in 1943.^([16](b06.xhtml#c09-endnote-16)) This woman painted
    the following message in bold letters on a white cloth and put it on the beach
    for the intruders to see:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 唐纳德·麦考马克在1980年出版的书《加密中的爱》是一本关于恋人使用加密技术的精彩概述。^([15](b06.xhtml#c09-endnote-15))
    它涵盖了数百年的加密情书、日记、报纸广告以及其他由浪漫情侣创造的密码文本，旨在保持他们的通讯私密。在其中一章《战争中的爱》中，麦考马克报道了一个居住在地中海小岛兰佩杜萨的女性，在1943年美国军队轰炸该岛时的故事。^([16](b06.xhtml#c09-endnote-16))
    这位女性在一块白布上用粗体字画下了以下信息，并将其放在海滩上让入侵者看到：
- en: '`TSURT EM, SYOB. I NEEUQ FO ASUDEPMAL`'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`TSURT EM, SYOB. I NEEUQ FO ASUDEPMAL`'
- en: It is a lot easier to decipher this cryptogram than to understand its meaning.
    The woman was never identified, and the purpose of this message is not known.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 解读这个密码比理解它的意义要容易得多。那位女性从未被确认身份，且此信息的目的尚不明确。
- en: The Friedmans’ love messages
  id: totrans-405
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 弗里德曼夫妇的情书
- en: William and Elizebeth Friedman (1891–1962 and 1892–1980, respectively) were
    a codebreaking dream team. Both had long careers as cryptanalysts working for
    the military, the police, and other institutions. In 2017, US author Jason Fagone
    wrote a fascinating book about Elizebeth Friedman that covers not only the couple’s
    codebreaking work, but also their courtship and marriage.^([17](b06.xhtml#c09-endnote-17))
    (Many other biographical books about Elizebeth have appeared recently; see [Chapter
    17](c17.xhtml).^([18](b06.xhtml#c09-endnote-18))^, ^([19](b06.xhtml#c09-endnote-19)))
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 威廉和伊丽莎白·弗里德曼（分别于 1891–1962 和 1892–1980 去世）是破解密码的黄金搭档。两人都曾在军事、警察以及其他机构担任密码分析师，拥有长时间的职业生涯。2017
    年，美国作家杰森·法贡写了一本关于伊丽莎白·弗里德曼的迷人书籍，内容不仅涵盖了这对夫妇的密码破解工作，还讲述了他们的追求与婚姻。^([17](b06.xhtml#c09-endnote-17))（近年来，关于伊丽莎白的传记书籍层出不穷；见
    [第 17 章](c17.xhtml)。^([18](b06.xhtml#c09-endnote-18))^, ^([19](b06.xhtml#c09-endnote-19)))
- en: William and Elizebeth were allegedly so enthusiastic about crypto that they
    even used encryption in their private life. [Figure 9-6](#figure9-6) shows a love
    message William wrote to Elizebeth around 1917, as well as another one Elizebeth
    sent back to him. Both messages are encrypted in a simple transposition cipher.
    While William’s plaintext is in English, Elizebeth’s is in French. Can you solve
    these two cryptograms?
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 威廉和伊丽莎白据称对密码学如此热衷，以至于他们甚至在私人生活中使用加密技术。[图 9-6](#figure9-6)展示了威廉大约在 1917 年写给伊丽莎白的一封情书，以及伊丽莎白回寄给他的另一封信。这两封信都使用了简单的换位密码加密。威廉的明文是英语，而伊丽莎白的则是法语。你能解开这两组密码吗？
- en: '![](image_fi/502727c09/f09006.png)'
  id: totrans-408
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c09/f09006.png)'
- en: 'Figure 9-6: A message sent from William Friedman (signed “Biwy”) to his wife
    Elizebeth around 1917 and another sent back to him (signed “Elsbeth”). Both are
    encrypted in a simple transposition.'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9-6：威廉·弗里德曼（签名“Biwy”）大约在 1917 年发给妻子伊丽莎白的消息，以及伊丽莎白回寄给他的另一条消息（签名“Elsbeth”）。两者都使用了简单的换位加密。
- en: An encrypted “agony” ad
  id: totrans-410
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一则加密的“痛苦”广告
- en: We’ve already mentioned *The Agony Column Codes & Ciphers*, Jean Palmer’s 2005
    book that lists over a thousand encrypted newspaper ads. Some (but not very many)
    of these ads are encrypted in transposition ciphers. The following were published
    in the British *Evening Standard* in 1882:^([20](b06.xhtml#c09-endnote-20))
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经提到过 *《痛苦专栏的密码与密码学》*，这是让·帕尔默 2005 年出版的一本书，书中列出了超过一千个加密的报纸广告。这些广告中有一些（但并不很多）是用换位密码加密的。以下广告曾于
    1882 年发布在英国的《晚间标准报》上：^([20](b06.xhtml#c09-endnote-20))
- en: '`CEM.—I e g c n e h d n h a o a s s b i s e r c g d h l i h u s a c c b k h
    e i e .` Monday, July 31, 1882'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '`CEM.—我 e g c n e h d n h a o a s s b i s e r c g d h l i h u s a c c b k h
    e i e 。` 1882 年 7 月 31 日，星期一'
- en: '`CEM.—Key 11\. – L k e o i s v s t e s o e e m l d y o d b v e n s e d t p
    l i a a n a e g l m s l y h b r m n e b e m r s e a o u t f W e y r w o i h o
    a e u v n l e y e.` Saturday, August 5, 1882'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '`CEM.—钥匙 11. – L k e o i s v s t e s o e e m l d y o d b v e n s e d t p l
    i a a n a e g l m s l y h b r m n e b e m r s e a o u t f W e y r w o i h o a
    e u v n l e y e.` 1882 年 8 月 5 日，星期六'
- en: The first message is in German and the second is in English. Can you solve them?
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条信息是德语，第二条是英语。你能解开它们吗？
- en: Yardley’s eleventh ciphergram
  id: totrans-415
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 雅德利的第十一组密码
- en: 'Chapter 11 of Herbert Yardley’s 1932 book *Ciphergrams*^([21](b06.xhtml#c09-endnote-21))
    describes an encrypted message sent from a radio station in Mexico to a German
    spy in the United States during World War I. This story, including the message,
    is fictional, but breaking the encryption (a complete columnar transposition cipher)
    is still entertaining:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 赫伯特·雅德利 1932 年的《*密码学*》第十一章^([21](b06.xhtml#c09-endnote-21))描述了一条加密信息，信息是通过墨西哥的一个无线电台发送给一名德国间谍，在第一次世界大战期间传送到美国。这个故事，包括信息内容，属于虚构，但破解加密（完全列换位密码）仍然很有趣：
- en: '`TSKGL AATYI LTLPA SAHLM DPLGI ENEAI WTUEN N`'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '`TSKGL AATYI LTLPA SAHLM DPLGI ENEAI WTUEN N`'
- en: 'Hint: Count!'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：数一数！
- en: Edgar Allan Poe’s first challenge
  id: totrans-419
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 埃德加·爱伦·坡的第一次挑战
- en: In 1841, Edgar Allan Poe published two cryptograms allegedly created by a W.B.
    Tyler. The second of these cryptograms, along with the background story, is covered
    in [Chapter 6](c06.xhtml). The first message was broken in 1991 by Poe expert
    Terence Whalen of the University of Illinois at Chicago, though his dissertation
    was not published until 1994\. In the meantime, it was also solved independently
    by John Hodgson in 1993.^([22](b06.xhtml#c09-endnote-22)) The cipher turned out
    to be a simple substitution cipher without spaces, combined with a transposition.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 1841年，埃德加·爱伦·坡发布了两个据称由W·B·泰勒创建的密码图。第二个密码图及其背景故事详见[第6章](c06.xhtml)。第一个消息在1991年被伊利诺伊大学芝加哥分校的坡专家特伦斯·韦伦解开，尽管他的论文直到1994年才出版。与此同时，约翰·霍奇森也于1993年独立解密了这个密码。密码原来是一个没有空格的简单替代密码，结合了置换方法。
- en: Tyler’s first cryptogram is depicted in [Figure 9-7](#figure9-7).
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 泰勒的第一个密码图解见[图9-7](#figure9-7)。
- en: '![](image_fi/502727c09/f09007.png)'
  id: totrans-422
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c09/f09007.png)'
- en: 'Figure 9-7: This reproduction of a cryptogram published by Edgar Allan Poe
    in 1841 was solved 150 years later.'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 图9-7：这是埃德加·爱伦·坡1841年发布的密码图之一，150年后才被解开。
- en: As can be seen, Tyler used a nonstandard alphabet. Some cryptanalysts believed
    this to be a simple substitution cipher without spaces (a Patristocrat), but that
    assumption didn’t lead anywhere. When Whalen studied the correspondence between
    Tyler and Poe, he found a hint stating that the letters of each word in the message
    were reversed. Further analysis showed that the trigraph `,†§` was especially
    frequent. Whalen guessed that it stood for `EHT`, the reversed version of `THE`,
    which is the most frequent trigraph in the English language.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 可以看出，泰勒使用了非标准字母表。一些密码分析专家认为这是一个没有空格的简单替代密码（Patristocrat），但这一假设并没有产生任何进展。当韦伦研究了泰勒与坡之间的通信时，他发现了一个提示，表明消息中每个单词的字母都被反转了。进一步分析显示，三字母组`,†§`特别频繁。韦伦猜测它代表`EHT`，即`THE`的反转版本，这是英语中最常见的三字母组。
- en: Whalen’s guess proved correct. Knowing three letters and the cipher method,
    he could decipher the message. Can you do it, too?
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 韦伦的猜测被证明是正确的。知道三个字母和密码方法，他能解密消息。你也能做到吗？
- en: An IRA message
  id: totrans-426
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一条爱尔兰共和军的信息
- en: Courtesy of master codebreaker Jim Gillogly, here is a message sent by an IRA
    member in the 1920s and encrypted in a complete columnar transposition system:^([23](b06.xhtml#c09-endnote-23))
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 由于顶尖的密码破译者吉姆·吉洛格利的帮助，这里是一条20世纪20年代爱尔兰共和军成员发送的信息，使用了完整的列置换系统加密：
- en: '`TTSEW UDSEE OOEHS BERTN TCEUG EHYNT CLCER TNMEF KCUFE HDPDE SIDRN EESDT TREDM
    EIHUS WHRTB DLETI IEERE TAIRF FLABI FOPWV EEROI RTLAC OWNOT ATLAE`'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '`TTSEW UDSEE OOEHS BERTN TCEUG EHYNT CLCER TNMEF KCUFE HDPDE SIDRN EESDT TREDM
    EIHUS WHRTB DLETI IEERE TAIRF FLABI FOPWV EEROI RTLAC OWNOT ATLAE`'
- en: 'Hint: Count the letters. Can you find any good factors?'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：计算字母数量。你能找到任何好的因子吗？
