["```\n  B    4    9    1\n\n1011 0100 1001 0001  ->  0b1011010010010001\n```", "```\n1111011001  ->  11 1101 1001  ->  0011 1101 1001\n\n                                  ^ padding\n\n0011 1101 1001\n\n  3    D    9  ->  0x3D9\n```", "```\n00001101  (decimal 13)\n```", "```\n11110010\n```", "```\n 100000000  (256)\n\n- 00001101   (13)\n```", "```\n 011111111  (255)  + 00000001  (1)\n\n- 00001101   (13)\n```", "```\n    0b1011 =                      -8 + 0 + 2 + 1 = -5\n\n   0b11011 =                 -16 + 8 + 0 + 2 + 1 = -5\n\n  0b111011 =            -32 + 16 + 8 + 0 + 2 + 1 = -5\n\n 0b1111011 =       -64 + 32 + 16 + 8 + 0 + 2 + 1 = -5\n\n0b11111011 = -128 + 64 + 32 + 16 + 8 + 0 + 2 + 1 = -5\n```", "```\n  0101       0101       0101\n\nx 0011  =  x    1  +  x   10  =  101 + 1010  =  1111 (15)\n```", "```\n    ____\n\n11 |1011\n\n    00__   11 (3) doesn't fit into 1 (1) or 10 (2),\n\n11 |1011   so the first two digits of the result are 00.\n\n    001_   11 (3) fits into 101 (5) once.\n\n11 |1011\n\n    101    101 (5) - 11 (3) leaves 10 (2).\n\n  -  11\n\n     10\n\n    0011\n\n11 |1011   11 (3) fits into 101 (5) once again.\n\n     101\n```", "```\n        011010\n\n    AND 110110  Only digits 1 and 4 are 1's in BOTH inputs, so\n\nResult: 010010  those are the only digits set to 1 in the output.\n```", "```\nint x = 26;\n\nint y = 54;\n\nprintf(\"Result: %d\\n\", x & y);  // Prints 18\n```", "```\n        011010\n\n     OR 110110     Only digit 0 contains a 0 in both inputs, so it's\n\nResult: 111110     the only digit not set to 1 in the result.\n```", "```\nint x = 26;\n\nint y = 54;\n\nprintf(\"Result: %d\\n\", x | y);  // Prints 62\n```", "```\n        011010\n\n    XOR 110110     Digits 2, 3, and 6 contain a 1 in exactly one of\n\nResult: 101100     the two inputs.\n```", "```\nint x = 26;\n\nint y = 54;\n\nprintf(\"Result: %d\\n\", x ^ y);  // Prints 44\n```", "```\n    NOT 011010\n\nResult: 100101\n```", "```\nint x = 26;\n\nprintf(\"Result: %d\\n\", ~x); // Prints -27\n```", "```\nint x = 13;  // 13 is 0b00001101\n\nprintf(\"Result: %d\\n\", x << 3);  // Prints 104 (0b01101000)\n```", "```\n#include <stdio.h>\n\nint main(int argc, char **argv) {\n\n    // Initialize a four-byte integer with easily distinguishable byte values\n\n int value = 0xAABBCCDD;\n\n    // Initialize a character pointer to the address of the integer.\n\n    char *p = (char *) &value;\n\n    // For each byte in the integer, print its memory address and value.\n\n    int i;\n\n    for (i = 0; i < sizeof(value); i++) {\n\n        printf(\"Address: %p, Value: %02hhX\\n\", p, *p);\n\n        p += 1;\n\n    }\n\n    return 0;\n\n}\n```", "```\n$ ./a.out\n\nAddress: 0x7ffc0a234928, Value: DD\n\nAddress: 0x7ffc0a234929, Value: CC\n\nAddress: 0x7ffc0a23492a, Value: BB\n\nAddress: 0x7ffc0a23492b, Value: AA\n```"]