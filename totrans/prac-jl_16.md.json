["```\n$ file cfpo1.wav\ncfpo1.wav: RIFF (little-endian) data, WAVE audio, Microsoft PCM, 8 bit, mono 8000 Hz\n```", "```\njulia> using SignalAnalysis, SignalAnalysis.Units, Plots\n\njulia> cfpo = signal(\"cfpo1.wav\");\n\njulia> plot(cfpo)\n```", "```\njulia> framerate(cfpo)\n8000.0f0\n\njulia> nframes(cfpo)\n100558\n\njulia> duration(cfpo)\n12.56975f0\n```", "```\njulia> one_chirp = plot(cfpo[2.05:2.25s]);\n\njulia> chirp_zoomed = plot(cfpo[2.1:2.11s]);\n\njulia> plot(one_chirp, chirp_zoomed; layout=(2, 1))\n```", "```\njulia> psd(cfpo; xticks=0:100:4000, xrot=90, lw=2)\n```", "```\njulia> specgram(cfpo; c=:grayC)\n```", "```\nlpf = fir(127, 0, 2kHz; fs=8kHz);\n```", "```\njulia> plotfreqresp(lpf; fs=8000)\n```", "```\nlpf_255 = fir(255, 0, 2kHz; fs=8kHz);\nlpf_1027 = fir(1027, 0, 2kHz; fs=8kHz);\n```", "```\njulia> cfpo_lp = sfilt(lpf, cfpo);\n```", "```\njulia> using Plots.PlotMeasures\n\njulia> psd(cfpo_lp; lw=2, label=\"Filtered signal\", legend=true)\n\njulia> psd!(cfpo; ls=:dot, ticks=0:200:4000, xrot=90, label=\"Original signal\",\n            legend=true, margin=5mm)\n```", "```\njulia> sin1000_2050 = signal(sin.((0.0:1.0/8000:1.0)*2π*1000)  .+\n                             0.5 .*  sin.((0.0:1.0/8000:1.0)*2π*2050), 8000);\n```", "```\njulia> psd(sin1000_2050; xrange=(500, 2500), xticks=600:100:2500,\n           xminorticks=2, yticks=-61:3:-02, xrot=45, margin=5mm)\n```", "```\njulia> plotfreqresp(lpf; fs=8000, xrange=(1800, 2100), yrange=(-50, 1),\n                    yticks=0:-4:-50, xticks=1800:50:2100, right_margin=5mm)\n```", "```\njulia> psd!(sfilt(lpf, sin1000_2050), xrange=(500, 2500), xticks=600:100:2500,\n            xminorticks=2, yticks=-61:3:-02, xrot=45, margin=5mm)\n```", "```\njulia> using WAV\njulia> wavwrite(cfpo_lp, \"cfpo_lp.wav\"; compression=WAVE_FORMAT_PCM, nbits=8)\n```", "```\njulia> scaled = sin1000_2050 ./ maximum(sin1000_2050)\n```", "```\njulia> using Images\n\njulia> frog_blood = load(\"frogBloodoriginal.jpg\");\n```", "```\njulia> eltype(frog_blood)\nRGB{N0f8}\n```", "```\njulia> frog_blood[1, 1]\nRGB{N0f8}(0.361,0.008,0.384)\n```", "```\nfrog_blood[1, 1] = RGB{N0f8}(0.0, 1.0, 0.0)\n```", "```\nfrog_blood_gs = Gray.(frog_blood);\nsave(\"frog_blood_gs.jpg\", frog_blood_gs)\nsave(\"frog_blood_gs.png\", frog_blood_gs)\n```", "```\njulia> imshow(mosaicview(red.(frog_blood), green.(frog_blood),\n              blue.(frog_blood), frog_blood_gs; ncol=2, npad=6))\n```", "```\njulia> using ImageBinarization\n\njulia> frog_blood_blue = blue.(frog_blood);\n\njulia> frog_blood_b1 = binarize(frog_blood_blue, Intermodes())\n```", "```\njulia> nuclei = Gray.([(green(e) < 0.1) & (red(e) > 0.2) ? e :\n                RGB{N0f8}(1.0, 1.0, 1.0) for e in frog_blood]);\n```", "```\njulia> edges = canny(nuclei, (0.15, 0.0))\n```", "```\njulia> dx, dy = imgradients(edges, KernelFactors.ando5);\n\njulia> phases = phase(dx, dy);\n```", "```\njulia> centers, radii = hough_circle_gradient(edges, phases, 1:5; min_dist=20);\n```", "```\njulia> using ImageDraw\n\njulia> for p in centers\n           draw!(frog_blood, CirclePointRadius(p, 15; thickness=8, fill=false))\n       end\n```", "```\n   julia> rgi = rand(Float64, (10, 10)) .* 0.2 .+ 0.4;\n\n   julia> checkers = @view rgi[1:2:end, 1:2:end];\n\n   julia> size(checkers)\n   (5, 5)\n\n➊ julia> checkers .= 0.0;\n\n   julia> black_squares = heatmap(rgi; c=:grays, clim=(0.0, 1.0), colorbar=false);\n\n   julia> checkers .= 1.0;\n\n   julia> white_squares = heatmap(rgi; c=:grays, clim=(0.0, 1.0), colorbar=false);\n\n   julia> plot(black_squares, white_squares)\n```", "```\nfunction odd_even_difference(a::AbstractArray)\n    return sum(a[begin:2:end]) - sum(a[begin+1:2:end])\nend\n\nfunction odd_even_difference2(a::AbstractArray)\n ➊ return @views sum(a[begin:2:end]) - sum(a[begin+1:2:end])\nend\n\njulia> using BenchmarkTools\n\njulia> @btime odd_even_difference(rand(Int(1e7)));\n  96.716 ms (6 allocations: 152.59 MiB)\n\njulia> @btime odd_even_difference2(rand(Int(1e7)));\n  62.116 ms (2 allocations: 76.29 MiB)\n```", "```\njulia> using AxisArrays\n\njulia> ae = AxisArray(reshape(1:100, 10, 10); row='a':'j', col='A':'J')\n2-dimensional AxisArray{Int64,2,...} with axes:\n    :row, 'a':1:'j'\n    :col, 'A':1:'J'\nAnd data, a 10×10 reshape(::UnitRange{Int64}, 10, 10) with eltype Int64:\n  1  11  21  31  41  51  61  71  81   91\n  2  12  22  32  42  52  62  72  82   92\n  3  13  23  33  43  53  63  73  83   93\n  4  14  24  34  44  54  64  74  84   94\n  5  15  25  35  45  55  65  75  85   95\n  6  16  26  36  46  56  66  76  86   96\n  7  17  27  37  47  57  67  77  87   97\n  8  18  28  38  48  58  68  78  88   98\n  9  19  29  39  49  59  69  79  89   99\n 10  20  30  40  50  60  70  80  90  100\n```", "```\n   julia> ae['a', 'B']\n   11\n\n   julia> ae[1, 2] == ae['a', 2] == ae[1, 'B']\n   true\n\n➊ julia> ae['a':'c', 'B':'D']\n   2-dimensional AxisArray{Int64,2,...} with axes:\n       :row, ['a', 'b', 'c']\n       :col, ['B', 'C', 'D']\n   And data, a 3×3 Matrix{Int64}:\n    11  21  31\n    12  22  32\n    13  23  33\n\n➋ julia> ae[col=2, row=1]\n   11\n```", "```\njulia> using Unitful\n\njulia> mm = u\"mm\";\n\njulia> cm = u\"cm\";\n\njulia> rgin = AxisArray(rand(Float64, (10, 10)) .* 0.2 .+ 0.4,\n                 Axis{:y}(0mm:1mm:9mm), Axis{:x}(0cm:1cm:9cm));\n\njulia> rgin[x=3, y=2] == rgin[1mm, 2cm] == rgin[2, 3] == rgin[x=2cm, y=1mm] ==\n       rgin[2, 2cm]\ntrue\n```", "```\njulia> rgin[1mm .. 2mm, 1cm .. 3cm] == rgin[1mm .. 2.3mm, 10mm .. 30mm]\ntrue\n```", "```\njulia> rgin[2mm .. 7.2mm, 3cm .. 4.9cm] .= 1.0;\n\njulia> heatmap(rgin; c=:grays, clim=(0.0, 1.0), colorbar=false, ratio=1,\n        xticks=(1:10, [\"$(i)mm\" for i in 0:9]),\n        yticks=(1:10, [\"$(i)cm\" for i in 0:9]),\n        xrange=(0, 11))\n```", "```\nfor i = 1:length(A) # Do not do this.\n    # ...expressions with A[i]...\n```", "```\njulia> using OffsetArrays, Random\n\njulia> rgen = MersenneTwister(7654);\n\njulia> rgi = rand(rgen, Float64, (10, 10)) .* 0.2 .+ 0.4;\n\njulia> rgi_offset = OffsetArray(rgi, -3, 2);\n\njulia> rgi[1, 1]\n0.5447560977385423\n\njulia> rgi_offset[-2, 3]\n0.5447560977385423\n```", "```\njulia> rgi_offset[-2, 3] = 0.0\n0.0\n\njulia> rgi[1, 1]\n0.0\n```", "```\njulia> rgi_offset_copy = copy(OffsetArray(rgi, -3, 2));\n\njulia> rgi_offset_copy[-2, 3] = 1.0\n1.0\n\njulia> rgi[1, 1]\n0.0\n```", "```\njulia> rgi_offset[0:5, 8:11] .= 1.0;\n```", "```\njulia> passage = Float64.(Gray.(load(\"titanPassage.jpg\")));\n\njulia> passage = reverse(passage; dims=1);\n\njulia> middle_passage = OffsetArray(passage[300:600, 400:700], 300:600, 400:700); ➊\n\njulia> passage[300:600, 400:700] .= 0.0;\n\njulia> passage[350:550, 450:650] = middle_passage[350:550, 450:650]; ➋\n```", "```\n   julia> passage = Float64.(Gray.(load(\"titanPassage.jpg\")));\n\n➊ julia> OffsetArrays.center(passage)\n   (375, 500)\n\n   julia> passage[375, 500]\n   0.25098039215686274\n\n➋ julia> passage_centered = OffsetArrays.centered(passage);\n\n   julia> passage_centered[0, 0]\n   0.25098039215686274\n```", "```\njulia> dmax = minimum(size(passage_centered))/2\n\njulia> for j in eachindex(passage_centered[1, :]),\n           i in eachindex(passage_centered[:, 1])\n           passage_centered[i, j] *= max(0.0, 1.0 - sqrt(i^2 + j^2)/dmax)\n       end\n```", "```\njulia> ci = CartesianIndex(1, 1)\nCartesianIndex(1, 1)\n\njulia> collect(5ci:8ci)\n4×4 Matrix{CartesianIndex{2}}:\n CartesianIndex(5, 5)  CartesianIndex(5, 6)  CartesianIndex(5, 7)  CartesianIndex(5, 8)\n CartesianIndex(6, 5)  CartesianIndex(6, 6)  CartesianIndex(6, 7)  CartesianIndex(6, 8)\n CartesianIndex(7, 5)  CartesianIndex(7, 6)  CartesianIndex(7, 7)  CartesianIndex(7, 8)\n CartesianIndex(8, 5)  CartesianIndex(8, 6)  CartesianIndex(8, 7)  CartesianIndex(8, 8)\n```", "```\njulia> collect(CartesianIndex(1, 1, 1):CartesianIndex(3, 3, 3))\n3×3×3 Array{CartesianIndex{3}, 3}:\n[:, :, 1] =\n CartesianIndex(1, 1, 1)  CartesianIndex(1, 2, 1)  CartesianIndex(1, 3, 1)\n CartesianIndex(2, 1, 1)  CartesianIndex(2, 2, 1)  CartesianIndex(2, 3, 1)\n CartesianIndex(3, 1, 1)  CartesianIndex(3, 2, 1)  CartesianIndex(3, 3, 1)\n\n[:, :, 2] =\n CartesianIndex(1, 1, 2)  CartesianIndex(1, 2, 2)  CartesianIndex(1, 3, 2)\n CartesianIndex(2, 1, 2)  CartesianIndex(2, 2, 2)  CartesianIndex(2, 3, 2)\n CartesianIndex(3, 1, 2)  CartesianIndex(3, 2, 2)  CartesianIndex(3, 3, 2)\n\n[:, :, 3] =\n CartesianIndex(1, 1, 3)  CartesianIndex(1, 2, 3)  CartesianIndex(1, 3, 3)\n CartesianIndex(2, 1, 3)  CartesianIndex(2, 2, 3)  CartesianIndex(2, 3, 3)\n CartesianIndex(3, 1, 3)  CartesianIndex(3, 2, 3)  CartesianIndex(3, 3, 3)\n```", "```\njulia> collect(CartesianIndex(1, 1):CartesianIndex(2, 2):CartesianIndex(5, 5))\n3×3 Matrix{CartesianIndex{2}}:\n CartesianIndex(1, 1)  CartesianIndex(1, 3)  CartesianIndex(1, 5)\n CartesianIndex(3, 1)  CartesianIndex(3, 3)  CartesianIndex(3, 5)\n CartesianIndex(5, 1)  CartesianIndex(5, 3)  CartesianIndex(5, 5)\n```", "```\njulia> by2 = CartesianIndex(1, 1):CartesianIndex(2, 2):CartesianIndex(5, 5)\nCartesianIndices((1:2:5, 1:2:5))\n\njulia> reshape(1:100, 10, 10)[by2]\n3×3 Matrix{Int64}:\n 1  21  41\n 3  23  43\n 5  25  45\n```", "```\njulia> CartesianIndices((1:3, 1:3, 1:3)) ==\n       CartesianIndex(1, 1, 1):CartesianIndex(3, 3, 3)\ntrue\n```", "```\njulia> rgi = rand(rgen, Float64, (100, 100)) .* 0.2 .+ 0.4;\n\njulia> rgi[5ci:20ci] .= 0.0;\n```", "```\n   julia> monk = Float64.(load(\"monk-mintons-1947.jpg\"));\n\n➊ julia> average_monk = similar(monk);\n\n   julia> cim = CartesianIndices(monk);\n\n   julia> ws = 1; # Window size\n\n➋ julia> c1 = CartesianIndex(ws, ws);\n\n   julia> for i in cim\n              n = s = 0.0\n              for j in max(first(cim), i - c1):min(last(cim), i + c1)\n                  n += 1\n                  s += monk[j]\n              end\n          average_monk[i] = s/n\n          end\n```", "```\njulia> max(CartesianIndex(3, 4), CartesianIndex(-2, 9))\nCartesianIndex(3, 9)\n\njulia> min(CartesianIndex(3, 4), CartesianIndex(-2, 9))\nCartesianIndex(-2, 4)\n```", "```\njulia> max((3, 4), (-2, 9))\n(3, 4)\n```", "```\njulia> smaller_monk = zeros(size(monk) .÷ 2);\njulia> cism = CartesianIndices(smaller_monk);\njulia> c1 = CartesianIndex(1, 1)\njulia> for i in cism\n           n = s = 0.0\n        ➊ for j in max(first(cim), 2i - c1):min(last(cim), 2i + c1)\n               n += 1\n               s += monk[j]\n           end\n       smaller_monk[i] = s/n\n       end\n```"]