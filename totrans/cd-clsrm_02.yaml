- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: The Many Benefits of Computer Science Education
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算机科学教育的众多益处
- en: In this chapter we’ll explore the cognitive, academic, and professional benefits
    of computer science education that can enhance your students’ grades, personal
    development, and careers. Because you’re reading this book, most likely you already
    value a computer science education. But as an educator, you’ll encounter students,
    parents, and administrators who need convincing. The benefits covered in this
    chapter include talking points you can use to motivate students to succeed, encourage
    parents to support their children academically, and garner support from school
    administrators for your computer science program.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨计算机科学教育的认知、学术和职业益处，这些益处可以提高学生的成绩、个人发展和职业生涯。因为你正在阅读这本书，所以很可能你已经重视计算机科学教育。但作为一名教育者，你会遇到需要说服的学生、家长和管理员。本章讨论的益处包括你可以用来激励学生成功的谈资，鼓励家长在学术上支持孩子，并为你的计算机科学项目争取学校管理层的支持。
- en: These benefits build upon one another. The cognitive benefits can make students
    sharper and improve some areas of academic performance. The academic benefits
    can improve academic outcomes and lead to more successful professional lives for
    students.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些益处是相互依赖的。认知益处可以让学生更加敏锐，并改善一些学术表现领域。学术上的益处可以改善学术成绩，并为学生的职业生涯带来更多成功。
- en: Cognitive Benefits
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认知益处
- en: The exercise of coding can provide cognitive benefits, such as enhancing problem
    solving, verbal acuity, working memory, and tenacity. Although programming is
    associated with improved cognitive performance on a variety of tests, there are
    caveats. To take advantage of these benefits, they must be explicitly written
    into lesson plans. For example, in Chapter 4, we’ll explore the concept of *algorithms*,
    a set of rules specifying how to solve a problem, and how students are already
    processing many algorithms in their heads daily when they follow various instructions.
    Educators who want their students to transfer their computer science understanding
    of algorithms to troubleshooting algorithms in their daily lives must construct
    lesson plans intentionally to address this concept.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 编程练习可以提供认知益处，例如增强问题解决能力、语言敏锐性、工作记忆和毅力。尽管编程与多项测试中认知表现的提高有关，但仍然有一些注意事项。为了利用这些益处，它们必须明确写入课程计划中。例如，在第4章中，我们将探讨*算法*的概念，算法是一组规定如何解决问题的规则，而学生们在日常遵循各种指令时，已经在他们的大脑中处理了许多算法。希望学生能将计算机科学中关于算法的理解转移到日常生活中故障排除算法的教育者，必须有意地构建课程计划来解决这一概念。
- en: Problem-Solving
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题解决
- en: Navigating code requires thinking abstractly and formally. Many problem-solving
    skills and techniques that we learn crafting code are transferable to other problem
    domains. For instance, working on an electronics project with some students for
    the first time, I was floored to discover how my software development background
    empowered me to mentor in this novel domain. The code logic and wiring logic were
    analogous to one another, and I was able to apply the same problem-solving skills
    I use to write and debug code to wire and troubleshoot the electronics.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 导航代码需要抽象和正式的思维。我们在编写代码时学到的许多问题解决技能和技术可以转移到其他问题领域。例如，在第一次与一些学生一起做电子项目时，我惊讶地发现，我的软件开发背景使我能够在这个新领域中担任导师。代码逻辑和接线逻辑彼此相似，我能够将我用来编写和调试代码的相同问题解决技能应用于接线和故障排除电子设备。
- en: For example, when programming, it’s useful to *decompose* larger problems into
    smaller components that are easier to comprehend and solve. When applying decomposition
    to coding, we practice *coding a bit and testing a bit (CABTAB)*, making sure
    each piece of code works before moving on to the next piece. I applied this convention
    to test every light as the students and I wired it up and to retest the lights
    we had wired prior. When components stopped working, I used the *wolf fence* debugging
    technique, which is to find a point in the middle of the code or wiring and see
    whether the problem occurs before or after it. The technique is similar to a farmer
    building a fence down the middle of their farm to narrow down in which half of
    the land the wolf is still eating their sheep. The coding logic and electronics
    logic were *isomorphs* of one another, different representations of the same problem.
    Educators should explicitly highlight and reinforce the similarities in problem-solving
    strategies between domains to help students understand. Because so much of computer
    science emphasizes modeling problems from the real world into formal, symbolic
    logic, educators can use this opportunity to teach students how to apply formal
    reasoning to real-world problems.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在编程时，将较大的问题*分解*成更易于理解和解决的小部分是很有用的。在编码中应用分解时，我们实践的是*逐步编程，逐步测试（CABTAB）*，确保每一段代码都能正常工作后，再继续编写下一段。我将这一惯例应用到测试每一盏灯上，当学生和我接线时，我还要重新测试之前已接好的灯。当某个组件停止工作时，我使用了*狼栅栏*调试技术，这种技术是在代码或线路的中间找一个点，看看问题发生在它之前还是之后。这种技术类似于农民在他们的农场中间修建围栏，以缩小狼仍在吃羊的区域。编程逻辑和电子逻辑是彼此的*同构*，它们是同一问题的不同表现。教育者应该明确强调并强化不同领域之间解决问题策略的相似性，帮助学生理解。因为计算机科学强调将现实世界的问题建模为形式化的符号逻辑，教育者可以利用这个机会教导学生如何将正式推理应用到现实世界的问题中。
- en: Research on the transference of problem-solving skills involved in programming
    to other domains shows mixed results. In 1990, David Palumbo, Assistant Professor
    of Instructional Technology at the University of Houston—Clear Lake, analyzed
    the research on programming language instruction and the transference of problem-solving
    skills to other domains. He found that students’ ability to apply the skills they
    learned in programming to other areas often depended on how similar the problem
    domains were, the age-appropriateness and cognitive prerequisites of the instruction,
    how the language was taught to students, which language was taught, the degree
    to which the teacher mediated student learning, and what level of expertise a
    student could obtain within the instruction’s time frame.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 关于编程中解决问题技能向其他领域转移的研究结果不一。1990年，休斯顿大学-克莱尔湖分校的教学技术助理教授David Palumbo分析了编程语言教学与解决问题技能转移的研究。他发现，学生将编程中学到的技能应用到其他领域的能力，往往取决于问题领域的相似性、教学的年龄适宜性和认知前提、语言的教学方式、所教学的语言、教师对学生学习的引导程度，以及学生在教学时间框架内能够达到的专业水平。
- en: The more closely a domain resembles a programming environment, the better the
    skill transference. For example, one study found that learning the now-defunct
    BASIC programming language enhanced performance on specific algebra word problems.
    Additionally, the way programming is taught can impact the transference of problem-solving
    skills to other domains. Another study found that a mediated learning approach
    that specifically focused on problem-solving skills led to significant improvement
    in students’ abilities to break down problems into smaller components, make analogies,
    engage in systematic trial and error, and make logical inferences from data. How
    coding is taught has a huge impact on the non-coding skills students might take
    away from the lessons.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个领域与编程环境的相似度越高，技能转移效果就越好。例如，一项研究发现，学习已废弃的BASIC编程语言能提升解决特定代数应用题的表现。此外，编程教学的方式也会影响解决问题技能向其他领域的转移。另一项研究发现，一种专门聚焦于解决问题技能的媒介化学习方法能显著提高学生将问题拆解成更小的部分、做类比、进行系统的试错并从数据中做出逻辑推理的能力。编程的教学方式对学生可能从课程中学到的非编程技能有巨大影响。
- en: Programming Is Communication
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编程就是沟通
- en: 'Coding is an exercise in communication. In a 2007 study, 95 percent of 780
    surveyed programmers considered understanding existing code a significant part
    of their job. When we code, we’re composing a story in such a way that our collaborators
    can follow it. Those collaborators can also include our future selves: we might
    one day return to maintain the code and be reading it as if for the first time.
    Other collaborators can be quite obtuse, such as the computer, which reads our
    code literally, doing exactly what we ask it to even though it’s not what we intended.
    When writing code, we must keep our audience in mind, making it literal for the
    computer and expressive enough for our peers.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 编程是一次沟通练习。在2007年的一项研究中，95%的780名受访程序员认为理解现有代码是他们工作的重要部分。当我们编写代码时，我们是在编织一个故事，使得我们的合作者能够跟随其脚步。这些合作者也可能包括我们的未来自己：我们可能有一天会回到这些代码并重新维护它，好像是第一次阅读它。其他合作者可能非常难以理解，例如计算机，它按字面意思理解我们的代码，准确地执行我们要求它做的事情，尽管那并非我们原本的意图。编写代码时，我们必须时刻牢记受众，使其对计算机来说是字面意思，而对我们的同行来说则足够表达性。
- en: With increasing market demands for technical professionals, some administrators
    are suggesting schools award students foreign language credit for taking computer
    programming classes. But this is misguided. Learning a foreign language gives
    us deeper insights into our own language and builds bridges to other cultures
    to better understand our own. At the same time, programming languages share many
    characteristics with natural languages that might allow the two subjects to complement
    and reinforce one another. Programming languages, like natural languages, have
    syntax, grammar, and semantics. It’s possible to write lines of code that are
    syntactically correct but are semantically incorrect, just as Noam Chomsky’s “Colorless
    green ideas sleep furiously” is grammatically correct but semantical nonsense.
    Like natural languages, programming languages branch out and relate to one another.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 随着市场对技术专业人员的需求不断增加，一些管理人员建议学校为学生开设计算机编程课程授予外语学分。但这是误导性的。学习外语能够让我们更深入地理解自己的语言，并建立与其他文化之间的桥梁，从而更好地理解我们自己。与此同时，编程语言与自然语言有许多相似之处，可能使两者相互补充和强化。编程语言和自然语言一样，都有语法、语法规则和语义。写出符合语法规则但语义错误的代码是可能的，就像诺姆·乔姆斯基的“无色的绿色思想狂怒地睡觉”在语法上是正确的，但语义上是胡说八道。就像自然语言一样，编程语言也有分支并彼此关联。
- en: Bilingualism is linked to numerous cognitive benefits, such as improved metalinguistic
    awareness, creativity, and problem-solving. To determine whether programmers experienced
    these bilingual benefits, Hannah Wright, a child development master’s student
    at the University of London, did a study. She worked with 10 professional computer
    programmers (aged 22–25), 10 adolescent computer programmers (aged 14–17), and
    an equal number of controls for a total of 40 monolingual, English-speaking young
    adults and adolescents to see how they performed on cognitive tests where bilinguals
    had an advantage. The two groups of programmers performed significantly better
    on the Attention Network Task, which measured their ability to achieve and maintain
    an alert state, select information from sensory input, and monitor and resolve
    conflicts.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 双语能力与许多认知益处相关，例如提高元语言意识、创造力和解决问题的能力。为了确定程序员是否经历了这些双语带来的好处，伦敦大学的儿童发展硕士研究生汉娜·赖特进行了一项研究。她与10名专业程序员（年龄22-25岁）、10名青少年程序员（年龄14-17岁）以及同样数量的对照组成员合作，组成了总共40名单语英语年轻成年人和青少年的研究小组，观察他们在双语者占优势的认知测试中的表现。这两组程序员在注意力网络任务测试中表现显著更好，该测试衡量了他们保持警觉状态、从感官输入中选择信息以及监控和解决冲突的能力。
- en: In addition to communicating with their fellow programmers, the literal-thinking
    computer, and their future selves, programmers must also communicate all their
    ideas in the formal and foreign language of code. Computer programming is a complex,
    challenging, and rewarding medium to converse in.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 除了与同行程序员、具有字面思维的计算机和未来的自己沟通，程序员还必须以代码这一正式且外语的语言表达所有想法。计算机编程是一种复杂、富有挑战性并且回报丰厚的交流媒介。
- en: Coding Exercises Working Memory
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编程练习工作记忆
- en: Students immersed in code exercise their *working memory* and focus. Working
    memory is the ability of individuals to remember and process information in their
    immediate consciousness—normally 10 to 15 seconds. How much information a person
    can hold in working memory and for how long varies depending on the task and from
    person to person. Psychologists often use n-back tasks, such as reciting increasingly
    long strings of numbers, to measure working memory. Writing code is a working
    memory–intensive task. It requires the coder to hold many variables and algorithms
    in focus to understand and work with the code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 沉浸在代码中的学生锻炼他们的*工作记忆*和专注力。工作记忆是指个体在短期内记住和处理信息的能力——通常为10到15秒。一个人能在工作记忆中保持多少信息以及能保持多久，取决于任务的不同以及个体差异。心理学家常用n-back任务来衡量工作记忆，例如背诵逐渐增长的数字串。编写代码是一个工作记忆密集型的任务，它要求编码者保持多个变量和算法的聚焦，以理解和操作代码。
- en: 'Every software developer is familiar with this scenario: you’re tracking down
    an especially irksome bug in the software. Maybe it’s a bit of data that is getting
    corrupted. You’ve traced the value from the database table where it’s stored,
    through the view sending it to the business layer, past the object model, watching
    function after function handle it. You track it coming out to the user interface
    where more functions interact with it and the user can manipulate it. Next, it
    gets sent back to form handlers, persistence functions, and then your phone vibrates
    and the whole mental construct comes crashing down.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每个软件开发人员都熟悉这样的场景：你正在追踪一个特别让人烦恼的程序错误。也许是某些数据被损坏了。你已经追踪了数据从数据库表格到视图发送到业务层，再到对象模型，一遍又一遍地跟踪着每个函数的处理。你继续追踪它到用户界面，那里更多的函数与其交互，用户可以操控它。接着，它被送回表单处理程序、持久化函数，然后你的手机震动了，整个思维框架瞬间崩塌。
- en: Students who come into programming with a strong working memory are more successful
    at learning how to code. In 1991, Valerie Shute, at the Air Force Human Resources
    Laboratory, tested 260 people. They took a seven-day Pascal programming class
    from an automated tutoring system to assess their working memory, problem-solving
    skills, and learning styles. Using a wide variety of tests to measure different
    dimensions of the students’ working memory, including quantitative, verbal, and
    spatial skills, she found a strong correlation between students having a strong
    working memory and the ability to successfully learn programming.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有强大工作记忆的学生更容易成功学习编程。1991年，Valerie Shute在空军人力资源实验室对260人进行了测试。参与者通过自动化辅导系统参加为期七天的Pascal编程课程，以评估他们的工作记忆、问题解决能力和学习风格。通过使用多种测试来衡量学生工作记忆的不同维度，包括定量、语言和空间技能，她发现学生具有强大工作记忆与成功学习编程之间存在很强的相关性。
- en: Although this study found that students with better working memories are better
    programmers, it doesn’t mean students with weaker working memories can’t learn
    programming. It simply means that students with weaker working memories need to
    break down programs and problems into smaller components with fewer variables
    to keep in mind. Computer science education encourages students to practice this
    programming technique by decomposing larger problems into smaller problems that
    are easier to solve.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这项研究发现，拥有更强工作记忆的学生是更优秀的程序员，但这并不意味着工作记忆较弱的学生就无法学习编程。它只是意味着工作记忆较弱的学生需要将程序和问题拆解成更小的组成部分，并减少需要记住的变量。计算机科学教育鼓励学生通过将较大的问题分解成更容易解决的小问题，来练习这种编程技巧。
- en: Also, these students might only need to break down problems when they first
    start to learn programming. Multiple research studies have found that working
    memory responds to exercise, just like our muscles or other components of our
    brain, due to its plasticity. In one study, researchers found that subjects could
    expand their working memory from one item to four in just 10 hours of practice
    spread across five days.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这些学生可能只需要在刚开始学习编程时才需要分解问题。多项研究发现，工作记忆会像我们的肌肉或大脑的其他部分一样通过锻炼来得到改善，因为它具有可塑性。在一项研究中，研究人员发现，受试者通过在五天内分散的10小时练习，可以将其工作记忆从一个项目扩展到四个项目。
- en: Coding Exercises Tenacity
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编程练习毅力
- en: Coding demands students work through problems. Often, those problems require
    long-term engagement. When students decompose a complex coding problem into a
    bunch of smaller problems, they feel rewarded more often for each little problem
    they solve. For especially challenging problems, those in which they must research
    for hours or days gathering bits of evidence, they will ideally begin to grow
    eager to know what they’ll eventually uncover. Coding is a self-reinforcing task
    that rewards students for tackling big projects.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 编程要求学生解决问题。这些问题通常需要长期的参与。当学生将一个复杂的编程问题分解成多个小问题时，他们每解决一个小问题都会获得更多的奖励。对于特别具有挑战性的问题，学生可能需要花费数小时或数天时间进行研究，收集证据，在这个过程中，他们理想的状态是开始渴望知道他们最终会发现什么。编程是一项自我强化的任务，它奖励学生解决大项目的努力。
- en: In recent years, researchers have identified tenacity—or motivation, effort,
    perseverance, or “grit”—as a crucial “non-cognitive” skill in academic performance.
    The Common Core state standard “Make sense of problems and persevere in solving
    them” recognizes the importance of stick-to-itiveness in academic achievement.
    Coding projects provide an excellent opportunity for students to exercise their
    tenacity.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，研究人员已确定坚韧——或动机、努力、毅力或“勇气”——是学业表现中的关键“非认知”技能。《共同核心州标准》“理解问题并坚持解决”认可了坚持不懈在学术成就中的重要性。编程项目为学生提供了锻炼坚韧性的绝佳机会。
- en: As the educator and coach, you must assure your students that *there is a solution
    to every problem*. Finding that solution might involve some part of the code they
    never thought to investigate. It might involve having the student explain the
    problem to a peer, because articulating the problem in a way someone else can
    understand often helps to uncover deeper insights into it. The solution might
    come to student at three in the morning and leave them staring at the ceiling
    for several hours waiting to go to school. Coaching your students to stick with
    their coding problems encourages them to flex their tenacity muscles and develop
    coping strategies for seeing their way through difficult problems.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 作为教育者和教练，你必须向你的学生保证，*每个问题都有解决方案*。找到解决方案可能需要涉及他们从未考虑过的代码部分。它可能需要让学生向同伴解释问题，因为以别人能理解的方式阐明问题，往往有助于揭示更深层次的见解。解决方案可能会在凌晨三点突然出现在学生脑海中，迫使他们盯着天花板几个小时，等待去学校的时间。指导学生坚持解决他们的编程问题，鼓励他们锻炼自己的坚韧性，发展应对困难问题的策略。
- en: Educational Benefits
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 教育益处
- en: When we write code, we’re working toward an outcome, a goal. Every application
    we write requires inquiry, deep thinking, self-direction, presentation, peer review,
    revision, and iteration. Each application we craft is a project, which is what
    makes it complement academia so well.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们编写代码时，我们是在朝着一个目标努力。每一个我们编写的应用程序都需要探索、深思、独立指导、展示、同行评审、修订和迭代。我们所制作的每一个应用程序都是一个项目，这也是它与学术界如此契合的原因。
- en: '*Project-based learning (PBL)* is a teaching method in which students engage
    in deep sustained inquiry into a complex problem or question and produce a research-based
    artifact to present to their peers. The PBL approach takes advantage of a student’s
    natural curiosity, challenging them with a problem and sending them off to find
    the answer on their own with minimal teacher guidance. While addressing the main
    project, students will encounter many related subproblems they must solve, just
    like solving larger real-world problems.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*基于项目的学习（PBL）*是一种教学方法，学生通过对复杂问题或问题进行深入的持续探索，并制作基于研究的成果展示给同伴。PBL方法利用学生的天生好奇心，挑战他们解决问题，并让他们在最少的教师指导下自己去寻找答案。在处理主要项目的同时，学生将遇到许多相关的子问题，他们必须解决这些问题，就像解决现实世界中的大问题一样。'
- en: PBL is associated with positive educational outcomes. In one study, students
    in a school using PBL significantly outperformed those in a traditional school
    in mathematics and conceptual and applied knowledge, and three times as many students
    passed the British national exam. Additionally, PBL aligns well with the intentions
    of the Common Core state standards, such as “Research to Build and Present Knowledge,”
    “Comprehension and Collaboration,” and “Presentation of Knowledge and Ideas.”
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: PBL与积极的教育成果相关联。在一项研究中，使用PBL的学校的学生在数学和概念性及应用知识方面显著超过了传统学校的学生，并且通过英国国家考试的学生数量是传统学校的三倍。此外，PBL与《共同核心州标准》的意图高度一致，例如“研究以建立和展示知识”，“理解与协作”，以及“展示知识和想法”。
- en: PBL is a highly rewarding way of learning. Producing artifacts deeply immerses
    students in the subject matter, making demands of their critical thinking and
    problem-solving skills. Through sustained inquiry, each question leads to more
    questions and each reference to more references. They share their product with
    their peers, who will offer critiques and enhancements. At the end of all their
    efforts, the product will be an artifact of which they’re deeply proud.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: PBL是一种非常有成效的学习方式。通过制作作品，学生能够深入融入学科内容，锻炼批判性思维和解决问题的能力。通过持续的探究，每个问题都会引出更多的问题，每个参考资料也会带来更多的参考资料。他们将自己的成果与同伴分享，后者会提供批评和改进建议。在所有努力的最终，成果将成为他们深感自豪的作品。
- en: 'Coding projects are ideal for PBL because they require deep reading, experimentation,
    research, collaboration, peer review, and an end product they can showcase in
    a portfolio with other academic achievements. John McManus and Philip Costello
    at Randolph-Macon College published their positive experience applying PBL to
    coding projects in their classrooms in the paper *Project Based Learning in Computer
    Science: A Student and Research Advisor’s Perspective*. The projects consisted
    of students programming autonomous drones to collect scientific data. Although
    their personal experience was anecdotal, they found students were driven to perform
    well due to the sense of project ownership. They also felt that the PBL approach
    allowed students to practice what they had previously learned while acquiring
    new hands-on skills that are difficult to teach in a classroom environment. These
    hands-on skills were seen as fostering discipline and professional growth that
    would benefit students beyond an academic setting. Chapter 8 covers in detail
    how to facilitate PBL projects in your classroom and how to align the project
    development process with software development practices.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '编程项目是PBL的理想选择，因为它们需要深入阅读、实验、研究、协作、同行评审，以及最终可以在作品集里展示的成果。约翰·麦克马努斯和菲利普·科斯特洛在兰道夫-梅肯学院的研究中，分享了他们在课堂中应用PBL于编程项目的积极经验，论文题为*Project
    Based Learning in Computer Science: A Student and Research Advisor’s Perspective*。这些项目包括学生编程自动无人机来收集科学数据。尽管他们的个人经验是轶事性的，但他们发现，学生因项目所有权的感觉而被激励去表现得更好。他们还认为，PBL方法让学生在掌握之前学到的知识的同时，获得了在课堂环境中难以教授的实践技能。这些实践技能被视为培养纪律性和专业成长，对学生在学术环境之外的未来发展有益。第8章详细介绍了如何在课堂上推动PBL项目，并如何将项目开发过程与软件开发实践对接。'
- en: Code Is a Complex Text Requiring Close Reading
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码是一种复杂的文本，需细致阅读
- en: Close reading is an exercise that has students develop a deep, critical understanding
    of a text. A close reading of a complex text might have students first read the
    text for key ideas, then reread key passages to understand the style and structure,
    and then reread the text again to draw inferences and conclusions that the text
    supports. The Common Core standards recommend close reading by telling students,
    “Read closely to determine what the text says explicitly and to make logical inferences
    from it; cite specific textual evidence when writing or speaking to support conclusions
    drawn from the text.”
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 细致阅读是一项帮助学生深入理解文本的练习。对于复杂文本的细致阅读可能要求学生首先浏览文本以了解主要思想，然后重新阅读关键段落，以理解风格和结构，接着再阅读一次文本，得出该文本所支持的推论和结论。核心标准建议学生进行细致阅读，并告诫他们：“仔细阅读以确定文本明确表达的内容，并从中做出合乎逻辑的推论；在写作或演讲时引用具体的文本证据来支持从文本中得出的结论。”
- en: Reading unfamiliar code requires close reading. From 1983 to 1984, Nancy Pennington
    studied 80 professional programmers to learn how they comprehend code and form
    mental representations of it in their minds (*Stimulus Structures and Mental Representations
    in Expert Comprehension of Computer Programs*). She found that when programmers
    read unfamiliar code, they break up that code into generalized chunks that describe
    what is going on in sections of the software solution without getting into the
    minutiae.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读不熟悉的代码也需要细致阅读。从1983年到1984年，南希·彭宁顿研究了80名专业程序员，了解他们是如何理解代码，并在脑中形成代码的心智表征的（*Stimulus
    Structures and Mental Representations in Expert Comprehension of Computer Programs*）。她发现，当程序员阅读不熟悉的代码时，他们会将代码拆解为描述软件解决方案各部分的通用块，而不会过于纠结细节。
- en: Programmers closely read the lines of code to construct a narrative they can
    later recall as a story. Just as in close reading, the programmer revisits functions
    or code blocks the same way a critic returns to key passages in a text. They scrutinize
    naming conventions, semantics, and code structure with a critical eye to see whether
    there are ways to make it clearer and more legible, which improves its maintainability.
    The critical analysis of code is very much like the critical analysis of a complex
    text and exercises a student’s ability to engage in deep, sustained focus.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员仔细阅读代码行，以构建他们日后可以回忆起的故事。就像在细读中一样，程序员会像评论家回到文本中的关键段落那样，反复检查函数或代码块。他们会批判性地审视命名规范、语义和代码结构，看看是否有方法使其更加清晰和易读，这有助于提高代码的可维护性。代码的批判性分析就像对复杂文本的批判性分析一样，锻炼了学生进行深入、持续专注的能力。
- en: Coding Requires Research and Collaboration
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编程需要研究与合作
- en: Software developers spend much of their time asking questions. What’s the best
    way to verify that user input is numeric? How do I filter out spaces in a string?
    How can my program upload a file or send an email? Writing a literary essay means
    starting from the reading and developing hypotheses from it, whereas writing software
    begins with defining an end goal and then researching your way to achieving it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发者花费大量时间在提问。验证用户输入是否为数字的最佳方法是什么？如何在字符串中过滤空格？我的程序如何上传文件或发送电子邮件？写一篇文学论文意味着从阅读中开始并发展假设，而写软件则是从定义一个目标开始，然后通过研究找到实现目标的方法。
- en: In the early 2000s, programmers kept thick books on their desks, one for each
    language they used in their day-to-day operations. Each book was approximately
    1,000 pages long, listing every function the language encapsulated in alphabetical
    order. Programmers would spend hours of their day flipping through these texts,
    looking up functions, what arguments to send them, and what outputs they would
    return. It was a very intensive and solitary process.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在2000年代初，程序员的桌子上总是摆着厚厚的书，每本书都与他们日常工作中使用的编程语言对应。每本书大约有1000页，按字母顺序列出了该语言的所有函数。程序员们会花费数小时翻阅这些书籍，查找函数、传递给它们的参数以及它们会返回的输出。这是一个非常密集且孤独的过程。
- en: 'The barriers to coding are much lower today than in previous decades. Coders
    now spend much of their time searching the web for answers. If they don’t find
    what they need on the search engines, they can post a question to a forum where
    participants score reputation points for providing the best, most accurate answers.
    Online research becomes a *dialogue* among experts and novices. Today, kids have
    it much easier when it comes to research, and everyone should be happy and excited
    for them because it’s a good thing: this ecosystem of experts openly debating
    every detail of the programming craft is why software advances so rapidly.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，编程的门槛比以往几十年要低得多。程序员现在大部分时间都在网上寻找答案。如果他们在搜索引擎上没有找到所需的内容，他们可以将问题发布到一个论坛，参与者在提供最佳、最准确答案时可以获得声誉积分。在线研究成为了专家和新手之间的*对话*。今天，孩子们在进行研究时轻松多了，每个人都应该为他们感到高兴和兴奋，因为这是好事：这个专家们公开讨论编程细节的生态系统，正是软件快速发展的原因。
- en: After writing code based on their research, students can then share what they’ve
    written with others in the classroom and learn from one another. One concern with
    student-to-student peer review is that it creates a situation in which novices
    guide novices. Students peer-reviewing text often express opinions without supporting
    them. But the formality of code tends to force students to defend why they think
    the code should be refactored.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在根据他们的研究编写代码后，学生们可以将他们写的内容与班级中的其他人分享，并相互学习。学生间的同行评审存在一个问题，那就是它可能导致新手指导新手的情况。学生们在同行评审文本时，往往表达没有支持的意见。但代码的正式性通常迫使学生辩解为什么他们认为代码应该被重构。
- en: Because the code produces a verifiable output, the first criteria for evaluating
    a peer’s comments is to see whether the code still works with their change request.
    Another criterion is to ask whether the change makes the code easier to comprehend
    and maintain. For example, a student might recommend moving a block of code into
    its own function. To justify this move, they might argue, “This block of code
    validates an email address. If you encapsulate it in a function, you can abstract
    away many lines of code into a single verifyEmail(), which you can call anywhere
    else you need to validate an email address. Then, if you ever need to change the
    verification logic, you need only do it in one place.”
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因为代码会产生可验证的输出，评估同伴评论的第一个标准是查看代码在他们的修改请求后是否仍然有效。另一个标准是询问这个修改是否使代码更易理解和维护。例如，一位学生可能会建议将一段代码移动到一个单独的函数中。为了证明这个改动合理，他们可能会说：“这段代码用于验证电子邮件地址。如果将它封装成一个函数，你可以将很多行代码抽象成一个verifyEmail()函数，在任何需要验证电子邮件地址的地方调用。然后，如果你需要更改验证逻辑，只需在一个地方进行更改即可。”
- en: But students can learn even from their peers’ misunderstandings. Just as with
    critiquing a text, students peer-reviewing one another’s code will ask questions
    that should prompt the coder to evaluate whether they’re presenting their ideas
    clearly. If a peer is confused by a variable named searchResult and the function
    it serves in a contact list, the coder might rewrite it as searchContacts to indicate
    what search result is being returned. Ideally, students should practice presenting
    their ideas more clearly in their code with an eye to making their code clearer
    for their collaborators.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 但学生也可以从同伴的误解中学习。就像批评一篇文章一样，学生在对彼此的代码进行同行评审时，会提出一些问题，促使编码者评估他们是否清楚地表达了自己的想法。如果某个同伴对名为searchResult的变量以及它在联系人列表中的功能感到困惑，编码者可能会将其重写为searchContacts，以表明返回的是什么搜索结果。理想情况下，学生应当练习在代码中更清晰地表达自己的想法，目的是让代码对他们的合作者更加清晰。
- en: Code Provides Playgrounds for Experimentation
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码为实验提供了游乐场
- en: 'Today’s classrooms are increasingly taking advantage of *manipulatives*: toys
    or objects that each teach a single skill or concept. For example, a teacher might
    use binary coins with printed values of 1, 2, 4, 8, 16, 32, 64, and so on, and
    have students use them as pretend currency to explore the base-2 number system.
    Manipulatives provide students with the opportunity to engage in self-directed
    learning through playful exploration and experimentation.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当今的课堂越来越多地利用*操作工具*：一些玩具或物品，每个都教授一个单独的技能或概念。例如，一位教师可能会使用带有1、2、4、8、16、32、64等值的二进制硬币，让学生将它们当作假币来探索二进制数字系统。操作工具为学生提供了通过有趣的探索和实验进行自我导向学习的机会。
- en: The act of coding requires perpetual experimentation and exploration. People
    who don’t code often envision a very formal software writing process. They imagine
    project planners, engineers, and architects scoping and designing every detail
    of the system before a developer commits a single line of code. In practice, the
    process is much different. A significant portion of coding time is spent on *experimentation*.
    Often, code can become so complex that even the coder doesn’t know exactly how
    it works. So they play with it. They change the order of operations, tweak variables,
    or tell the computer to recite variables at different points to see whether they’re
    transforming as intended. They might flip a value from “true” to “false” to see
    what happens. Or they might ask the application for a million apples. What about
    “tqewfsdfve” apples? Code is itself a manipulative.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 编程的过程需要不断的实验和探索。不编程的人通常会想象一个非常正式的软件写作过程。他们设想项目规划者、工程师和架构师在开发者写下任何一行代码之前，已经详细规划和设计了系统的每一个细节。实际上，过程要不同得多。编程时间的大部分都花在了*实验*上。通常，代码会变得非常复杂，以至于即使是编码者自己也不完全知道它是如何工作的。所以他们会去玩它。他们改变操作顺序，调整变量，或者让计算机在不同的地方输出变量，以查看它们是否按预期变化。他们可能会将某个值从“true”改为“false”来看会发生什么。或者他们可能会让应用程序请求一百万个苹果。那么“tqewfsdfve”个苹果呢？代码本身就是一种操作工具。
- en: Computers allow children to create their own learning environments through programming.
    Kids teach the computer how to think and behave, and they engage in metacognition
    in the process. Computers offer students access to an infinite number of manipulatives.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机让孩子们能够通过编程创造自己的学习环境。孩子们教计算机如何思考和行为，在这个过程中他们也进行着元认知。计算机为学生提供了无尽的操作工具。
- en: Professional Benefits
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 专业好处
- en: It’s difficult to think of anyone in today’s workforce who doesn’t work with
    information and doesn’t augment their job performance with information systems.
    In the 21st century, many professions are tightly coupled to computational tools
    and information systems, and can therefore benefit from computer science education.
    In this section, we will learn a few of the many ways a computer science education
    will benefit your students’ future selves when they enter the professional world.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 很难想象在今天的职场中，有人不与信息打交道，也不通过信息系统来提高工作表现。在21世纪，许多职业与计算工具和信息系统紧密结合，因此可以从计算机科学教育中受益。在本节中，我们将学习计算机科学教育如何通过多种方式帮助学生在进入职业生涯时受益。
- en: Computer Science Makes You More Employable
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计算机科学让你更具就业竞争力
- en: Software developers are in high demand and will remain so into the foreseeable
    future. In 2016, the average software developer’s salary was $100,080, and the
    employment of software developers is projected to grow 22 percent from 2012 to
    2022\. In 2013, software engineers had a 3.6 percent unemployment rate, which
    was half the overall unemployment rate of 7.3 percent at that time.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发人员的需求量很大，并且在可预见的未来将继续保持这一趋势。2016年，软件开发人员的平均薪资为100,080美元，预计软件开发人员的就业增长将在2012年到2022年间增长22%。在2013年，软件工程师的失业率为3.6%，这是当时总体失业率7.3%的二分之一。
- en: But it’s not just computer programmers who can improve their job security through
    computer science education. Everyone in an office building, from the managers
    to the financial overseers to the building supervisors, uses information systems
    to optimize their workflows. Outside of the office, construction workers must
    navigate an ocean of local, state, and federal building codes hosted in numerous
    online applications to properly do their jobs. Fast-food workers must rapidly
    monitor and manipulate data to ensure quality food gets to customers quickly.
    Freelance drivers must work with service provider apps and maximize their use
    of navigation applications to get customers to their destinations quickly. Nearly
    everyone works with software in today’s economy, and those who understand what
    software can do will be more proficient than those learning on the job.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 但不仅仅是计算机程序员可以通过计算机科学教育提高自己的工作安全性。办公楼中的每个人，从经理到财务监管人员再到大楼主管，都使用信息系统来优化工作流程。在办公室之外，建筑工人必须在许多在线应用程序中浏览本地、州和联邦的建筑规范，以便正确地完成工作。快餐店员工必须快速监控和处理数据，以确保质量的食物能够快速送到顾客手中。自由职业司机必须使用服务提供商应用程序，并最大化导航应用程序的使用，以便快速将顾客送达目的地。几乎每个人在今天的经济中都在使用软件，而那些了解软件功能的人将比那些在工作中学习的人更为高效。
- en: Along with this growing use of software comes new digital citizenship challenges
    for many professions. For example, as information technology grows more prevalent
    in hospitals, doctors and nurses will need to know how networked information systems
    comply with patient privacy laws. Marketers taking their messages to social media
    will need to be mindful of how those platforms are tracking the activities of
    their audience and monetizing that data. Writers, graphics designers, and editors
    working in Content Management Systems (CMS) will need to carefully ensure they
    don’t violate local and global intellectual property and privacy laws.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 随着软件使用的日益增长，许多行业面临新的数字公民挑战。例如，随着信息技术在医院的普及，医生和护士需要了解如何确保网络化信息系统符合患者隐私法的要求。将信息传递到社交媒体上的营销人员需要关注这些平台如何追踪受众的活动并将这些数据货币化。在内容管理系统（CMS）中工作的作家、平面设计师和编辑需要仔细确保他们不会违反本地和全球的知识产权及隐私法律。
- en: As data grows more valuable and more sensitive as users entrust it to organizations,
    professionals must also be vigilant in protecting that data. A professional working
    in the organization’s payroll department must be aware of the dangers of phishing
    attacks. They must proactively ask their organization’s engineers about the software
    measures guarding their servers. They must be educated as to how having the organization’s
    data compromised would be disastrous for their co-workers, and be familiar with
    cybersecurity concepts that secure that data.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 随着数据变得越来越有价值且更为敏感，用户将其交给组织时，专业人员也必须保持警惕，保护这些数据。负责组织薪资部门的专业人员必须意识到钓鱼攻击的危险。他们必须主动向组织的工程师询问关于保护其服务器的安全措施。他们必须了解组织数据被泄露对同事造成的灾难性后果，并熟悉保护数据的网络安全概念。
- en: Coding Makes You a Star
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编程让你成为明星
- en: Imagine you’re at a meeting with a project manager, IT director, graphics designer,
    copy editor, marketing manager, sales manager, and various subject-matter experts
    discussing an online application. Each role has its own area of expertise to contribute.
    But the only person technically capable of translating these visions into the
    code needed to bring it to life is the programmer.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你正在和项目经理、IT总监、图形设计师、文案编辑、市场经理、销售经理以及各种领域的专家开会，讨论一个在线应用程序。每个角色都有自己擅长的领域。但唯一能够将这些愿景转化为实现它所需的代码的人，就是程序员。
- en: In many organizations, the software developer is the person who brings a project
    together. That new marketing write-up? The programmer is the one who knows how
    to typeset it online. The new banner image? The programmer is the one who knows
    how to upload it to the server and reference it in the code. A designer wants
    to animate a menu? You’ll need someone code-literate to create that interactivity.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多组织中，软件开发人员是将项目整合起来的人。那篇新的营销文案？是程序员知道如何在线排版。那张新的横幅图片？是程序员知道如何将其上传到服务器并在代码中引用它。设计师想要给菜单添加动画效果？你需要一个懂代码的人来创建这种互动性。
- en: Programmers must learn how entire organizations operate. This is especially
    true when you’re coding business logic. For example, when I coded for the Coast
    Guard, the pilots, mechanics, and officers shared everything they knew about aviation
    logistics with me. While coding for food safety laboratories, I learned about
    pathogens, chemistry, and quality testing from PhDs. Working at an educational
    organization, I learned the ins and outs of social networking, marketing, and
    publishing.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员必须学习整个组织是如何运作的。尤其是在编写业务逻辑时，这一点尤其重要。例如，当我为海岸警卫队编写代码时，飞行员、机械师和军官们与我分享了他们所有关于航空后勤的知识。当我为食品安全实验室编写代码时，我向博士们学习了病原体、化学学科和质量测试。当我在教育机构工作时，我学到了社交网络、营销和出版的各种内幕。
- en: Over time, organizations grow more dependent on a coder’s wisdom as other employees
    leave, and co-workers must reach out to the software developer to understand how
    their jobs were performed. Having such a deep understanding of an organization’s
    business processes provides the software developer with a high degree of job stability.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，组织对程序员的依赖性增加，因为其他员工离职，同事们必须联系软件开发人员，了解他们是如何完成工作的。对组织的业务流程有如此深入的了解，使得软件开发人员拥有较高的工作稳定性。
- en: Coding and Computational Thinking Make You Efficient
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编程和计算思维让你更高效
- en: It’s not just the employees with the “software developer” job title who can
    benefit from knowing programming. Being capable of computational thinking and
    knowing some ­programming can open professionals to opportunities to improve efficiency
    and automate tasks.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 不是只有拥有“软件开发人员”职位的人才能从掌握编程中受益。具备计算思维能力并懂得一些编程知识，可以为专业人士提供改善效率和自动化任务的机会。
- en: For example, an office assistant managing a corporate website might need to
    reformat the contacts page from listing first name, last name, phone, and email
    to instead displaying last name, first name, email, and phone. The most straightforward
    way to do this is to copy and paste to rearrange the fields, but this would be
    time-consuming and prone to errors. An assistant who knows about string manipulation
    functions could simply paste the list into a spreadsheet and apply a string concatenation
    function to output the fields in the new format.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，一个办公室助理管理企业网站，可能需要将联系人页面从按名字、姓氏、电话和电子邮件排列，改为显示姓氏、名字、电子邮件和电话。最直接的方法是复制粘贴来重新排列字段，但这会非常耗时且容易出错。一个懂得字符串处理函数的助理可以将列表粘贴到电子表格中，然后应用字符串拼接函数，以新的格式输出这些字段。
- en: By doing so, this professional improves their efficiency and accuracy. They’ve
    automated a repetitive task. The act of automating this process was more technically
    challenging than the repetitive task, but the time saved was the reward for tackling
    that complexity. Automation lets us work *smarter*, not *harder*. Figure 2-2 illustrates
    how this works in practice.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做，专业人员提高了效率和准确性。他们已经自动化了一个重复的任务。自动化这个过程比重复的任务更具技术挑战性，但节省的时间就是解决复杂性后的奖励。自动化让我们能*更聪明*地工作，而不是*更辛苦*地工作。图2-2展示了这一点在实践中的运作方式。
- en: '![](image/02_02.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](image/02_02.png)'
- en: 'Figure 2-2: Effort over time with and without automation'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-2：有无自动化的时间投入对比
- en: The figure shows how the level of effort changes over time when we automate
    tasks. Without automation, the level of effort for a repetitive task remains the
    same forever. But when we decide to automate a task, we may initially be challenged
    with the complexity of how to automate it. There will be a learning curve and
    the increased stress that comes with problem-solving. Once the problem is solved,
    the effort and stress of performing the task drop to a minimum or even vanish.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图示显示了当我们自动化任务时，工作努力程度随时间变化的情况。没有自动化的情况下，重复性任务的工作努力始终保持不变。但当我们决定自动化任务时，最初可能会遇到如何自动化的复杂性挑战。将面临学习曲线和解决问题带来的额外压力。一旦问题解决，执行任务所需的努力和压力会降到最低，甚至消失。
- en: Consider the simple example of scheduling a meeting for the fourth Tuesday of
    each month. The meeting organizer can look at each month of the calendar year
    and schedule 12 meetings. Alternatively, because they understand computer systems
    and can think computationally, they can use the extra effort to figure out how
    to schedule a recurring meeting one time and never think about it again.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以安排每月第四个星期二的会议为例。会议组织者可以查看每个月的日历，并安排12次会议。或者，由于他们了解计算机系统并能够进行计算思维，他们可以利用额外的精力弄清楚如何一次性安排一个定期会议，从此再也不用担心。
- en: Professionals who can automate their repetitive tasks and streamline their workflows
    using IT save time and maximize their efficiency. This increases their value to
    their organizations and enhances their professional lives.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 能够自动化重复任务并利用IT简化工作流程的专业人士节省时间并最大化效率。这提高了他们在组织中的价值，也提升了他们的职业生活。
- en: Summary
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored the many ways learning computer science will benefit
    your students. Cognitively, students who learn computer science will develop a
    toolkit of problem-solving skills they can transfer to other knowledge domains.
    When writing code, students practice communicating in the very precise and literal
    way computers demand while also making their code understandable to peers and
    their future selves. Writing code also exercises their working memory as they
    hold stacks of variables and logic in their brains to debug and enhance their
    programs. The act of coding exercises the student’s grit or stick-to-itiveness
    to see their projects through to that moment of satisfaction when it finally executes
    successfully.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了学习计算机科学如何造福学生。认知方面，学习计算机科学的学生将培养一套问题解决技能，这些技能可以转移到其他知识领域。当编写代码时，学生们练习以计算机所要求的非常精确和字面化的方式进行沟通，同时还要确保代码对同龄人和未来的自己都能理解。编写代码也锻炼了学生的工作记忆，因为他们需要在大脑中存储大量的变量和逻辑，以调试和增强程序。编程的过程锻炼了学生的毅力或坚持不懈的精神，直到他们的项目成功执行的那一刻，感受到满足。
- en: Because producing computational artifacts is PBL, computer science instruction
    can enhance a students’ academic success as they engage in close reading, sustained
    inquiry, collaboration, peer review, and iterative development. Through online
    forums and in-class code reviews, students engage in dialogue with peers to collaborate
    on problem-solving and best practices. When tinkering with their code, students
    engage in exploration through experimentation and experience the joy of flow and
    discovery.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 因为制作计算性成果物是项目式学习（PBL），计算机科学教学能够提高学生的学业成功，帮助他们进行深入阅读、持续探究、协作、同行评审和迭代开发。通过在线论坛和课堂代码评审，学生们与同龄人展开对话，协作解决问题并分享最佳实践。在修改代码的过程中，学生通过实验进行探索，并体验到“心流”和发现的乐趣。
- en: Professionally, computer science education makes your students more employable
    and higher salary earners. Knowing how to automate business logic makes them valuable
    to their employers, and their professional lives easier. As the solutions provider
    for their organization, they’ll gain a deep understanding of the organization’s
    business processes, making them indispensable to their employer.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 从职业角度来看，计算机科学教育使学生更具就业竞争力，并能获得更高的薪水。了解如何自动化业务逻辑使他们对雇主更具价值，也让他们的职业生活变得更轻松。作为其组织的解决方案提供者，他们将深入理解组织的业务流程，从而使自己成为雇主不可或缺的一部分。
- en: Making students aware of computer science education’s cognitive benefits encourages
    metacognition, awareness of the educational benefits makes them engaged partners
    in their schooling, and awareness of the subject’s professional benefits provides
    them with incentives to succeed. Parents and administrators who are aware of these
    many benefits will have incentive to provide the support structures crucial to
    students’ success in their projects.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让学生意识到计算机科学教育的认知益处可以促进元认知，意识到教育的益处使他们成为自己学习过程中的积极参与者，而意识到该学科的职业益处则为他们提供了成功的动力。了解这些诸多益处的家长和管理者，将更有动力提供对学生项目成功至关重要的支持结构。
- en: Although all of these reasons for computer science education are pragmatic and
    rational, it’s also important to stress the subject’s humanistic side. In the
    next chapter, we’ll take a deep dive through the history of computer science,
    starting with the icons on your desktop and descending through the code. We’ll
    form a connection between technologies and people by learning about the individuals
    behind these innovations.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些关于计算机科学教育的理由都是务实且理性的，但同样重要的是强调该学科的人文学科一面。在下一章中，我们将深入探索计算机科学的历史，从你桌面上的图标开始，逐步深入代码。通过了解这些创新背后的人物，我们将建立起技术与人之间的联系。
