- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: The Many Benefits of Computer Science Education
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算机科学教育的众多益处
- en: In this chapter we’ll explore the cognitive, academic, and professional benefits
    of computer science education that can enhance your students’ grades, personal
    development, and careers. Because you’re reading this book, most likely you already
    value a computer science education. But as an educator, you’ll encounter students,
    parents, and administrators who need convincing. The benefits covered in this
    chapter include talking points you can use to motivate students to succeed, encourage
    parents to support their children academically, and garner support from school
    administrators for your computer science program.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨计算机科学教育的认知、学术和职业益处，这些益处可以提高学生的成绩、个人发展和职业生涯。因为你正在阅读这本书，所以很可能你已经重视计算机科学教育。但作为一名教育者，你会遇到需要说服的学生、家长和管理员。本章讨论的益处包括你可以用来激励学生成功的谈资，鼓励家长在学术上支持孩子，并为你的计算机科学项目争取学校管理层的支持。
- en: These benefits build upon one another. The cognitive benefits can make students
    sharper and improve some areas of academic performance. The academic benefits
    can improve academic outcomes and lead to more successful professional lives for
    students.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些益处是相互依赖的。认知益处可以让学生更加敏锐，并改善一些学术表现领域。学术上的益处可以改善学术成绩，并为学生的职业生涯带来更多成功。
- en: Cognitive Benefits
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认知益处
- en: The exercise of coding can provide cognitive benefits, such as enhancing problem
    solving, verbal acuity, working memory, and tenacity. Although programming is
    associated with improved cognitive performance on a variety of tests, there are
    caveats. To take advantage of these benefits, they must be explicitly written
    into lesson plans. For example, in Chapter 4, we’ll explore the concept of *algorithms*,
    a set of rules specifying how to solve a problem, and how students are already
    processing many algorithms in their heads daily when they follow various instructions.
    Educators who want their students to transfer their computer science understanding
    of algorithms to troubleshooting algorithms in their daily lives must construct
    lesson plans intentionally to address this concept.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 编程练习可以提供认知益处，例如增强问题解决能力、语言敏锐性、工作记忆和毅力。尽管编程与多项测试中认知表现的提高有关，但仍然有一些注意事项。为了利用这些益处，它们必须明确写入课程计划中。例如，在第4章中，我们将探讨*算法*的概念，算法是一组规定如何解决问题的规则，而学生们在日常遵循各种指令时，已经在他们的大脑中处理了许多算法。希望学生能将计算机科学中关于算法的理解转移到日常生活中故障排除算法的教育者，必须有意地构建课程计划来解决这一概念。
- en: Problem-Solving
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题解决
- en: Navigating code requires thinking abstractly and formally. Many problem-solving
    skills and techniques that we learn crafting code are transferable to other problem
    domains. For instance, working on an electronics project with some students for
    the first time, I was floored to discover how my software development background
    empowered me to mentor in this novel domain. The code logic and wiring logic were
    analogous to one another, and I was able to apply the same problem-solving skills
    I use to write and debug code to wire and troubleshoot the electronics.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 导航代码需要抽象和正式的思维。我们在编写代码时学到的许多问题解决技能和技术可以转移到其他问题领域。例如，在第一次与一些学生一起做电子项目时，我惊讶地发现，我的软件开发背景使我能够在这个新领域中担任导师。代码逻辑和接线逻辑彼此相似，我能够将我用来编写和调试代码的相同问题解决技能应用于接线和故障排除电子设备。
- en: For example, when programming, it’s useful to *decompose* larger problems into
    smaller components that are easier to comprehend and solve. When applying decomposition
    to coding, we practice *coding a bit and testing a bit (CABTAB)*, making sure
    each piece of code works before moving on to the next piece. I applied this convention
    to test every light as the students and I wired it up and to retest the lights
    we had wired prior. When components stopped working, I used the *wolf fence* debugging
    technique, which is to find a point in the middle of the code or wiring and see
    whether the problem occurs before or after it. The technique is similar to a farmer
    building a fence down the middle of their farm to narrow down in which half of
    the land the wolf is still eating their sheep. The coding logic and electronics
    logic were *isomorphs* of one another, different representations of the same problem.
    Educators should explicitly highlight and reinforce the similarities in problem-solving
    strategies between domains to help students understand. Because so much of computer
    science emphasizes modeling problems from the real world into formal, symbolic
    logic, educators can use this opportunity to teach students how to apply formal
    reasoning to real-world problems.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在编程时，将较大的问题*分解*成更易于理解和解决的小部分是很有用的。在编码中应用分解时，我们实践的是*逐步编程，逐步测试（CABTAB）*，确保每一段代码都能正常工作后，再继续编写下一段。我将这一惯例应用到测试每一盏灯上，当学生和我接线时，我还要重新测试之前已接好的灯。当某个组件停止工作时，我使用了*狼栅栏*调试技术，这种技术是在代码或线路的中间找一个点，看看问题发生在它之前还是之后。这种技术类似于农民在他们的农场中间修建围栏，以缩小狼仍在吃羊的区域。编程逻辑和电子逻辑是彼此的*同构*，它们是同一问题的不同表现。教育者应该明确强调并强化不同领域之间解决问题策略的相似性，帮助学生理解。因为计算机科学强调将现实世界的问题建模为形式化的符号逻辑，教育者可以利用这个机会教导学生如何将正式推理应用到现实世界的问题中。
- en: Research on the transference of problem-solving skills involved in programming
    to other domains shows mixed results. In 1990, David Palumbo, Assistant Professor
    of Instructional Technology at the University of Houston—Clear Lake, analyzed
    the research on programming language instruction and the transference of problem-solving
    skills to other domains. He found that students’ ability to apply the skills they
    learned in programming to other areas often depended on how similar the problem
    domains were, the age-appropriateness and cognitive prerequisites of the instruction,
    how the language was taught to students, which language was taught, the degree
    to which the teacher mediated student learning, and what level of expertise a
    student could obtain within the instruction’s time frame.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 关于编程中解决问题技能向其他领域转移的研究结果不一。1990年，休斯顿大学-克莱尔湖分校的教学技术助理教授David Palumbo分析了编程语言教学与解决问题技能转移的研究。他发现，学生将编程中学到的技能应用到其他领域的能力，往往取决于问题领域的相似性、教学的年龄适宜性和认知前提、语言的教学方式、所教学的语言、教师对学生学习的引导程度，以及学生在教学时间框架内能够达到的专业水平。
- en: The more closely a domain resembles a programming environment, the better the
    skill transference. For example, one study found that learning the now-defunct
    BASIC programming language enhanced performance on specific algebra word problems.
    Additionally, the way programming is taught can impact the transference of problem-solving
    skills to other domains. Another study found that a mediated learning approach
    that specifically focused on problem-solving skills led to significant improvement
    in students’ abilities to break down problems into smaller components, make analogies,
    engage in systematic trial and error, and make logical inferences from data. How
    coding is taught has a huge impact on the non-coding skills students might take
    away from the lessons.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个领域与编程环境的相似度越高，技能转移效果就越好。例如，一项研究发现，学习已废弃的BASIC编程语言能提升解决特定代数应用题的表现。此外，编程教学的方式也会影响解决问题技能向其他领域的转移。另一项研究发现，一种专门聚焦于解决问题技能的媒介化学习方法能显著提高学生将问题拆解成更小的部分、做类比、进行系统的试错并从数据中做出逻辑推理的能力。编程的教学方式对学生可能从课程中学到的非编程技能有巨大影响。
- en: Programming Is Communication
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编程就是沟通
- en: 'Coding is an exercise in communication. In a 2007 study, 95 percent of 780
    surveyed programmers considered understanding existing code a significant part
    of their job. When we code, we’re composing a story in such a way that our collaborators
    can follow it. Those collaborators can also include our future selves: we might
    one day return to maintain the code and be reading it as if for the first time.
    Other collaborators can be quite obtuse, such as the computer, which reads our
    code literally, doing exactly what we ask it to even though it’s not what we intended.
    When writing code, we must keep our audience in mind, making it literal for the
    computer and expressive enough for our peers.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 编程是一次沟通练习。在2007年的一项研究中，95%的780名受访程序员认为理解现有代码是他们工作的重要部分。当我们编写代码时，我们是在编织一个故事，使得我们的合作者能够跟随其脚步。这些合作者也可能包括我们的未来自己：我们可能有一天会回到这些代码并重新维护它，好像是第一次阅读它。其他合作者可能非常难以理解，例如计算机，它按字面意思理解我们的代码，准确地执行我们要求它做的事情，尽管那并非我们原本的意图。编写代码时，我们必须时刻牢记受众，使其对计算机来说是字面意思，而对我们的同行来说则足够表达性。
- en: With increasing market demands for technical professionals, some administrators
    are suggesting schools award students foreign language credit for taking computer
    programming classes. But this is misguided. Learning a foreign language gives
    us deeper insights into our own language and builds bridges to other cultures
    to better understand our own. At the same time, programming languages share many
    characteristics with natural languages that might allow the two subjects to complement
    and reinforce one another. Programming languages, like natural languages, have
    syntax, grammar, and semantics. It’s possible to write lines of code that are
    syntactically correct but are semantically incorrect, just as Noam Chomsky’s “Colorless
    green ideas sleep furiously” is grammatically correct but semantical nonsense.
    Like natural languages, programming languages branch out and relate to one another.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 随着市场对技术专业人员的需求不断增加，一些管理人员建议学校为学生开设计算机编程课程授予外语学分。但这是误导性的。学习外语能够让我们更深入地理解自己的语言，并建立与其他文化之间的桥梁，从而更好地理解我们自己。与此同时，编程语言与自然语言有许多相似之处，可能使两者相互补充和强化。编程语言和自然语言一样，都有语法、语法规则和语义。写出符合语法规则但语义错误的代码是可能的，就像诺姆·乔姆斯基的“无色的绿色思想狂怒地睡觉”在语法上是正确的，但语义上是胡说八道。就像自然语言一样，编程语言也有分支并彼此关联。
- en: Bilingualism is linked to numerous cognitive benefits, such as improved metalinguistic
    awareness, creativity, and problem-solving. To determine whether programmers experienced
    these bilingual benefits, Hannah Wright, a child development master’s student
    at the University of London, did a study. She worked with 10 professional computer
    programmers (aged 22–25), 10 adolescent computer programmers (aged 14–17), and
    an equal number of controls for a total of 40 monolingual, English-speaking young
    adults and adolescents to see how they performed on cognitive tests where bilinguals
    had an advantage. The two groups of programmers performed significantly better
    on the Attention Network Task, which measured their ability to achieve and maintain
    an alert state, select information from sensory input, and monitor and resolve
    conflicts.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 双语能力与许多认知益处相关，例如提高元语言意识、创造力和解决问题的能力。为了确定程序员是否经历了这些双语带来的好处，伦敦大学的儿童发展硕士研究生汉娜·赖特进行了一项研究。她与10名专业程序员（年龄22-25岁）、10名青少年程序员（年龄14-17岁）以及同样数量的对照组成员合作，组成了总共40名单语英语年轻成年人和青少年的研究小组，观察他们在双语者占优势的认知测试中的表现。这两组程序员在注意力网络任务测试中表现显著更好，该测试衡量了他们保持警觉状态、从感官输入中选择信息以及监控和解决冲突的能力。
- en: In addition to communicating with their fellow programmers, the literal-thinking
    computer, and their future selves, programmers must also communicate all their
    ideas in the formal and foreign language of code. Computer programming is a complex,
    challenging, and rewarding medium to converse in.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 除了与同行程序员、具有字面思维的计算机和未来的自己沟通，程序员还必须以代码这一正式且外语的语言表达所有想法。计算机编程是一种复杂、富有挑战性并且回报丰厚的交流媒介。
- en: Coding Exercises Working Memory
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编程练习工作记忆
- en: Students immersed in code exercise their *working memory* and focus. Working
    memory is the ability of individuals to remember and process information in their
    immediate consciousness—normally 10 to 15 seconds. How much information a person
    can hold in working memory and for how long varies depending on the task and from
    person to person. Psychologists often use n-back tasks, such as reciting increasingly
    long strings of numbers, to measure working memory. Writing code is a working
    memory–intensive task. It requires the coder to hold many variables and algorithms
    in focus to understand and work with the code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 沉浸在代码中的学生锻炼他们的*工作记忆*和专注力。工作记忆是指个体在短期内记住和处理信息的能力——通常为10到15秒。一个人能在工作记忆中保持多少信息以及能保持多久，取决于任务的不同以及个体差异。心理学家常用n-back任务来衡量工作记忆，例如背诵逐渐增长的数字串。编写代码是一个工作记忆密集型的任务，它要求编码者保持多个变量和算法的聚焦，以理解和操作代码。
- en: 'Every software developer is familiar with this scenario: you’re tracking down
    an especially irksome bug in the software. Maybe it’s a bit of data that is getting
    corrupted. You’ve traced the value from the database table where it’s stored,
    through the view sending it to the business layer, past the object model, watching
    function after function handle it. You track it coming out to the user interface
    where more functions interact with it and the user can manipulate it. Next, it
    gets sent back to form handlers, persistence functions, and then your phone vibrates
    and the whole mental construct comes crashing down.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每个软件开发人员都熟悉这样的场景：你正在追踪一个特别让人烦恼的程序错误。也许是某些数据被损坏了。你已经追踪了数据从数据库表格到视图发送到业务层，再到对象模型，一遍又一遍地跟踪着每个函数的处理。你继续追踪它到用户界面，那里更多的函数与其交互，用户可以操控它。接着，它被送回表单处理程序、持久化函数，然后你的手机震动了，整个思维框架瞬间崩塌。
- en: Students who come into programming with a strong working memory are more successful
    at learning how to code. In 1991, Valerie Shute, at the Air Force Human Resources
    Laboratory, tested 260 people. They took a seven-day Pascal programming class
    from an automated tutoring system to assess their working memory, problem-solving
    skills, and learning styles. Using a wide variety of tests to measure different
    dimensions of the students’ working memory, including quantitative, verbal, and
    spatial skills, she found a strong correlation between students having a strong
    working memory and the ability to successfully learn programming.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有强大工作记忆的学生更容易成功学习编程。1991年，Valerie Shute在空军人力资源实验室对260人进行了测试。参与者通过自动化辅导系统参加为期七天的Pascal编程课程，以评估他们的工作记忆、问题解决能力和学习风格。通过使用多种测试来衡量学生工作记忆的不同维度，包括定量、语言和空间技能，她发现学生具有强大工作记忆与成功学习编程之间存在很强的相关性。
- en: Although this study found that students with better working memories are better
    programmers, it doesn’t mean students with weaker working memories can’t learn
    programming. It simply means that students with weaker working memories need to
    break down programs and problems into smaller components with fewer variables
    to keep in mind. Computer science education encourages students to practice this
    programming technique by decomposing larger problems into smaller problems that
    are easier to solve.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这项研究发现，拥有更强工作记忆的学生是更优秀的程序员，但这并不意味着工作记忆较弱的学生就无法学习编程。它只是意味着工作记忆较弱的学生需要将程序和问题拆解成更小的组成部分，并减少需要记住的变量。计算机科学教育鼓励学生通过将较大的问题分解成更容易解决的小问题，来练习这种编程技巧。
- en: Also, these students might only need to break down problems when they first
    start to learn programming. Multiple research studies have found that working
    memory responds to exercise, just like our muscles or other components of our
    brain, due to its plasticity. In one study, researchers found that subjects could
    expand their working memory from one item to four in just 10 hours of practice
    spread across five days.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这些学生可能只需要在刚开始学习编程时才需要分解问题。多项研究发现，工作记忆会像我们的肌肉或大脑的其他部分一样通过锻炼来得到改善，因为它具有可塑性。在一项研究中，研究人员发现，受试者通过在五天内分散的10小时练习，可以将其工作记忆从一个项目扩展到四个项目。
- en: Coding Exercises Tenacity
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编程练习毅力
- en: Coding demands students work through problems. Often, those problems require
    long-term engagement. When students decompose a complex coding problem into a
    bunch of smaller problems, they feel rewarded more often for each little problem
    they solve. For especially challenging problems, those in which they must research
    for hours or days gathering bits of evidence, they will ideally begin to grow
    eager to know what they’ll eventually uncover. Coding is a self-reinforcing task
    that rewards students for tackling big projects.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: In recent years, researchers have identified tenacity—or motivation, effort,
    perseverance, or “grit”—as a crucial “non-cognitive” skill in academic performance.
    The Common Core state standard “Make sense of problems and persevere in solving
    them” recognizes the importance of stick-to-itiveness in academic achievement.
    Coding projects provide an excellent opportunity for students to exercise their
    tenacity.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: As the educator and coach, you must assure your students that *there is a solution
    to every problem*. Finding that solution might involve some part of the code they
    never thought to investigate. It might involve having the student explain the
    problem to a peer, because articulating the problem in a way someone else can
    understand often helps to uncover deeper insights into it. The solution might
    come to student at three in the morning and leave them staring at the ceiling
    for several hours waiting to go to school. Coaching your students to stick with
    their coding problems encourages them to flex their tenacity muscles and develop
    coping strategies for seeing their way through difficult problems.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Educational Benefits
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we write code, we’re working toward an outcome, a goal. Every application
    we write requires inquiry, deep thinking, self-direction, presentation, peer review,
    revision, and iteration. Each application we craft is a project, which is what
    makes it complement academia so well.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '*Project-based learning (PBL)* is a teaching method in which students engage
    in deep sustained inquiry into a complex problem or question and produce a research-based
    artifact to present to their peers. The PBL approach takes advantage of a student’s
    natural curiosity, challenging them with a problem and sending them off to find
    the answer on their own with minimal teacher guidance. While addressing the main
    project, students will encounter many related subproblems they must solve, just
    like solving larger real-world problems.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: PBL is associated with positive educational outcomes. In one study, students
    in a school using PBL significantly outperformed those in a traditional school
    in mathematics and conceptual and applied knowledge, and three times as many students
    passed the British national exam. Additionally, PBL aligns well with the intentions
    of the Common Core state standards, such as “Research to Build and Present Knowledge,”
    “Comprehension and Collaboration,” and “Presentation of Knowledge and Ideas.”
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: PBL is a highly rewarding way of learning. Producing artifacts deeply immerses
    students in the subject matter, making demands of their critical thinking and
    problem-solving skills. Through sustained inquiry, each question leads to more
    questions and each reference to more references. They share their product with
    their peers, who will offer critiques and enhancements. At the end of all their
    efforts, the product will be an artifact of which they’re deeply proud.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'Coding projects are ideal for PBL because they require deep reading, experimentation,
    research, collaboration, peer review, and an end product they can showcase in
    a portfolio with other academic achievements. John McManus and Philip Costello
    at Randolph-Macon College published their positive experience applying PBL to
    coding projects in their classrooms in the paper *Project Based Learning in Computer
    Science: A Student and Research Advisor’s Perspective*. The projects consisted
    of students programming autonomous drones to collect scientific data. Although
    their personal experience was anecdotal, they found students were driven to perform
    well due to the sense of project ownership. They also felt that the PBL approach
    allowed students to practice what they had previously learned while acquiring
    new hands-on skills that are difficult to teach in a classroom environment. These
    hands-on skills were seen as fostering discipline and professional growth that
    would benefit students beyond an academic setting. Chapter 8 covers in detail
    how to facilitate PBL projects in your classroom and how to align the project
    development process with software development practices.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Code Is a Complex Text Requiring Close Reading
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Close reading is an exercise that has students develop a deep, critical understanding
    of a text. A close reading of a complex text might have students first read the
    text for key ideas, then reread key passages to understand the style and structure,
    and then reread the text again to draw inferences and conclusions that the text
    supports. The Common Core standards recommend close reading by telling students,
    “Read closely to determine what the text says explicitly and to make logical inferences
    from it; cite specific textual evidence when writing or speaking to support conclusions
    drawn from the text.”
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Reading unfamiliar code requires close reading. From 1983 to 1984, Nancy Pennington
    studied 80 professional programmers to learn how they comprehend code and form
    mental representations of it in their minds (*Stimulus Structures and Mental Representations
    in Expert Comprehension of Computer Programs*). She found that when programmers
    read unfamiliar code, they break up that code into generalized chunks that describe
    what is going on in sections of the software solution without getting into the
    minutiae.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Programmers closely read the lines of code to construct a narrative they can
    later recall as a story. Just as in close reading, the programmer revisits functions
    or code blocks the same way a critic returns to key passages in a text. They scrutinize
    naming conventions, semantics, and code structure with a critical eye to see whether
    there are ways to make it clearer and more legible, which improves its maintainability.
    The critical analysis of code is very much like the critical analysis of a complex
    text and exercises a student’s ability to engage in deep, sustained focus.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Coding Requires Research and Collaboration
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Software developers spend much of their time asking questions. What’s the best
    way to verify that user input is numeric? How do I filter out spaces in a string?
    How can my program upload a file or send an email? Writing a literary essay means
    starting from the reading and developing hypotheses from it, whereas writing software
    begins with defining an end goal and then researching your way to achieving it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: In the early 2000s, programmers kept thick books on their desks, one for each
    language they used in their day-to-day operations. Each book was approximately
    1,000 pages long, listing every function the language encapsulated in alphabetical
    order. Programmers would spend hours of their day flipping through these texts,
    looking up functions, what arguments to send them, and what outputs they would
    return. It was a very intensive and solitary process.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'The barriers to coding are much lower today than in previous decades. Coders
    now spend much of their time searching the web for answers. If they don’t find
    what they need on the search engines, they can post a question to a forum where
    participants score reputation points for providing the best, most accurate answers.
    Online research becomes a *dialogue* among experts and novices. Today, kids have
    it much easier when it comes to research, and everyone should be happy and excited
    for them because it’s a good thing: this ecosystem of experts openly debating
    every detail of the programming craft is why software advances so rapidly.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: After writing code based on their research, students can then share what they’ve
    written with others in the classroom and learn from one another. One concern with
    student-to-student peer review is that it creates a situation in which novices
    guide novices. Students peer-reviewing text often express opinions without supporting
    them. But the formality of code tends to force students to defend why they think
    the code should be refactored.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Because the code produces a verifiable output, the first criteria for evaluating
    a peer’s comments is to see whether the code still works with their change request.
    Another criterion is to ask whether the change makes the code easier to comprehend
    and maintain. For example, a student might recommend moving a block of code into
    its own function. To justify this move, they might argue, “This block of code
    validates an email address. If you encapsulate it in a function, you can abstract
    away many lines of code into a single verifyEmail(), which you can call anywhere
    else you need to validate an email address. Then, if you ever need to change the
    verification logic, you need only do it in one place.”
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: But students can learn even from their peers’ misunderstandings. Just as with
    critiquing a text, students peer-reviewing one another’s code will ask questions
    that should prompt the coder to evaluate whether they’re presenting their ideas
    clearly. If a peer is confused by a variable named searchResult and the function
    it serves in a contact list, the coder might rewrite it as searchContacts to indicate
    what search result is being returned. Ideally, students should practice presenting
    their ideas more clearly in their code with an eye to making their code clearer
    for their collaborators.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Code Provides Playgrounds for Experimentation
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Today’s classrooms are increasingly taking advantage of *manipulatives*: toys
    or objects that each teach a single skill or concept. For example, a teacher might
    use binary coins with printed values of 1, 2, 4, 8, 16, 32, 64, and so on, and
    have students use them as pretend currency to explore the base-2 number system.
    Manipulatives provide students with the opportunity to engage in self-directed
    learning through playful exploration and experimentation.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: The act of coding requires perpetual experimentation and exploration. People
    who don’t code often envision a very formal software writing process. They imagine
    project planners, engineers, and architects scoping and designing every detail
    of the system before a developer commits a single line of code. In practice, the
    process is much different. A significant portion of coding time is spent on *experimentation*.
    Often, code can become so complex that even the coder doesn’t know exactly how
    it works. So they play with it. They change the order of operations, tweak variables,
    or tell the computer to recite variables at different points to see whether they’re
    transforming as intended. They might flip a value from “true” to “false” to see
    what happens. Or they might ask the application for a million apples. What about
    “tqewfsdfve” apples? Code is itself a manipulative.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Computers allow children to create their own learning environments through programming.
    Kids teach the computer how to think and behave, and they engage in metacognition
    in the process. Computers offer students access to an infinite number of manipulatives.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Professional Benefits
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It’s difficult to think of anyone in today’s workforce who doesn’t work with
    information and doesn’t augment their job performance with information systems.
    In the 21st century, many professions are tightly coupled to computational tools
    and information systems, and can therefore benefit from computer science education.
    In this section, we will learn a few of the many ways a computer science education
    will benefit your students’ future selves when they enter the professional world.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Computer Science Makes You More Employable
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Software developers are in high demand and will remain so into the foreseeable
    future. In 2016, the average software developer’s salary was $100,080, and the
    employment of software developers is projected to grow 22 percent from 2012 to
    2022\. In 2013, software engineers had a 3.6 percent unemployment rate, which
    was half the overall unemployment rate of 7.3 percent at that time.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: But it’s not just computer programmers who can improve their job security through
    computer science education. Everyone in an office building, from the managers
    to the financial overseers to the building supervisors, uses information systems
    to optimize their workflows. Outside of the office, construction workers must
    navigate an ocean of local, state, and federal building codes hosted in numerous
    online applications to properly do their jobs. Fast-food workers must rapidly
    monitor and manipulate data to ensure quality food gets to customers quickly.
    Freelance drivers must work with service provider apps and maximize their use
    of navigation applications to get customers to their destinations quickly. Nearly
    everyone works with software in today’s economy, and those who understand what
    software can do will be more proficient than those learning on the job.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Along with this growing use of software comes new digital citizenship challenges
    for many professions. For example, as information technology grows more prevalent
    in hospitals, doctors and nurses will need to know how networked information systems
    comply with patient privacy laws. Marketers taking their messages to social media
    will need to be mindful of how those platforms are tracking the activities of
    their audience and monetizing that data. Writers, graphics designers, and editors
    working in Content Management Systems (CMS) will need to carefully ensure they
    don’t violate local and global intellectual property and privacy laws.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: As data grows more valuable and more sensitive as users entrust it to organizations,
    professionals must also be vigilant in protecting that data. A professional working
    in the organization’s payroll department must be aware of the dangers of phishing
    attacks. They must proactively ask their organization’s engineers about the software
    measures guarding their servers. They must be educated as to how having the organization’s
    data compromised would be disastrous for their co-workers, and be familiar with
    cybersecurity concepts that secure that data.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Coding Makes You a Star
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Imagine you’re at a meeting with a project manager, IT director, graphics designer,
    copy editor, marketing manager, sales manager, and various subject-matter experts
    discussing an online application. Each role has its own area of expertise to contribute.
    But the only person technically capable of translating these visions into the
    code needed to bring it to life is the programmer.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: In many organizations, the software developer is the person who brings a project
    together. That new marketing write-up? The programmer is the one who knows how
    to typeset it online. The new banner image? The programmer is the one who knows
    how to upload it to the server and reference it in the code. A designer wants
    to animate a menu? You’ll need someone code-literate to create that interactivity.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Programmers must learn how entire organizations operate. This is especially
    true when you’re coding business logic. For example, when I coded for the Coast
    Guard, the pilots, mechanics, and officers shared everything they knew about aviation
    logistics with me. While coding for food safety laboratories, I learned about
    pathogens, chemistry, and quality testing from PhDs. Working at an educational
    organization, I learned the ins and outs of social networking, marketing, and
    publishing.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Over time, organizations grow more dependent on a coder’s wisdom as other employees
    leave, and co-workers must reach out to the software developer to understand how
    their jobs were performed. Having such a deep understanding of an organization’s
    business processes provides the software developer with a high degree of job stability.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Coding and Computational Thinking Make You Efficient
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It’s not just the employees with the “software developer” job title who can
    benefit from knowing programming. Being capable of computational thinking and
    knowing some ­programming can open professionals to opportunities to improve efficiency
    and automate tasks.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: For example, an office assistant managing a corporate website might need to
    reformat the contacts page from listing first name, last name, phone, and email
    to instead displaying last name, first name, email, and phone. The most straightforward
    way to do this is to copy and paste to rearrange the fields, but this would be
    time-consuming and prone to errors. An assistant who knows about string manipulation
    functions could simply paste the list into a spreadsheet and apply a string concatenation
    function to output the fields in the new format.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: By doing so, this professional improves their efficiency and accuracy. They’ve
    automated a repetitive task. The act of automating this process was more technically
    challenging than the repetitive task, but the time saved was the reward for tackling
    that complexity. Automation lets us work *smarter*, not *harder*. Figure 2-2 illustrates
    how this works in practice.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/02_02.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-2: Effort over time with and without automation'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: The figure shows how the level of effort changes over time when we automate
    tasks. Without automation, the level of effort for a repetitive task remains the
    same forever. But when we decide to automate a task, we may initially be challenged
    with the complexity of how to automate it. There will be a learning curve and
    the increased stress that comes with problem-solving. Once the problem is solved,
    the effort and stress of performing the task drop to a minimum or even vanish.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Consider the simple example of scheduling a meeting for the fourth Tuesday of
    each month. The meeting organizer can look at each month of the calendar year
    and schedule 12 meetings. Alternatively, because they understand computer systems
    and can think computationally, they can use the extra effort to figure out how
    to schedule a recurring meeting one time and never think about it again.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Professionals who can automate their repetitive tasks and streamline their workflows
    using IT save time and maximize their efficiency. This increases their value to
    their organizations and enhances their professional lives.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we explored the many ways learning computer science will benefit
    your students. Cognitively, students who learn computer science will develop a
    toolkit of problem-solving skills they can transfer to other knowledge domains.
    When writing code, students practice communicating in the very precise and literal
    way computers demand while also making their code understandable to peers and
    their future selves. Writing code also exercises their working memory as they
    hold stacks of variables and logic in their brains to debug and enhance their
    programs. The act of coding exercises the student’s grit or stick-to-itiveness
    to see their projects through to that moment of satisfaction when it finally executes
    successfully.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Because producing computational artifacts is PBL, computer science instruction
    can enhance a students’ academic success as they engage in close reading, sustained
    inquiry, collaboration, peer review, and iterative development. Through online
    forums and in-class code reviews, students engage in dialogue with peers to collaborate
    on problem-solving and best practices. When tinkering with their code, students
    engage in exploration through experimentation and experience the joy of flow and
    discovery.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Professionally, computer science education makes your students more employable
    and higher salary earners. Knowing how to automate business logic makes them valuable
    to their employers, and their professional lives easier. As the solutions provider
    for their organization, they’ll gain a deep understanding of the organization’s
    business processes, making them indispensable to their employer.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Making students aware of computer science education’s cognitive benefits encourages
    metacognition, awareness of the educational benefits makes them engaged partners
    in their schooling, and awareness of the subject’s professional benefits provides
    them with incentives to succeed. Parents and administrators who are aware of these
    many benefits will have incentive to provide the support structures crucial to
    students’ success in their projects.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Although all of these reasons for computer science education are pragmatic and
    rational, it’s also important to stress the subject’s humanistic side. In the
    next chapter, we’ll take a deep dive through the history of computer science,
    starting with the icons on your desktop and descending through the code. We’ll
    form a connection between technologies and people by learning about the individuals
    behind these innovations.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
