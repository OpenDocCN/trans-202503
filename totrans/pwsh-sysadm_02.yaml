- en: '1'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GETTING STARTED
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: The name *PowerShell* refers to two things. One is a command line shell, installed
    by default on all recent versions of Windows (starting with Windows 7) and most
    recently available on Linux and macOS operating systems via PowerShell Core. The
    other is a scripting language. Together they refer to one framework that can be
    used to automate everything from rebooting 100 servers at once to building a complete
    automation system that controls your entire data center.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: In the first chapters of this book, you’ll use the PowerShell console to become
    familiar with the basics of PowerShell. Once you’ve covered the basics, you’ll
    graduate to more advanced topics including writing scripts, functions, and custom
    modules.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the basics: some fundamental commands, and how to find
    and read help pages.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Opening the PowerShell Console
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The examples in this book use PowerShell v5.1, the version that comes with Windows
    10\. Newer versions of PowerShell have more features and bug fixes, but the basic
    syntax and core functionality of PowerShell hasn’t changed dramatically since
    version 2.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: To open PowerShell in Windows 10, enter **PowerShell** in the Start menu. You
    should immediately see a Windows PowerShell option front and center. Clicking
    that option should bring up a blue console and a flashing cursor, as in [Figure
    1-1](ch01.xhtml#ch1fig1).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/01fig01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-1: A PowerShell console*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: The flashing cursor indicates that PowerShell is ready for your input. Note
    that your *prompt*—the line beginning with `PS>`—will probably look different
    from mine; the file path in the prompt indicates your current location in the
    system. As you can see in my console’s title, I’ve right-clicked the PowerShell
    icon and run it as administrator. This gives me full rights, and starts me in
    the *C:\Windows\system32\WindowsPowerShell\v1.0* directory.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Using DOS Commands
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once PowerShell is open, you can start exploring. If you’ve previously used
    the Windows command line, *cmd.exe*, you’ll be glad to know that all the commands
    you’re used to (for example, `cd`, `dir`, and `cls`) also work in PowerShell.
    Under the covers, these DOS “commands” aren’t really commands, but command *aliases*,
    or pseudonyms, that translate from commands you know to commands PowerShell knows.
    But for now, you don’t need to understand the difference—just consider them your
    familiar DOS friends!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try some of these commands. If you’re sitting at the `PS>` prompt and
    want to check out a specific directory’s contents, first navigate to that directory
    with `cd`, short for *change directory*. Here you’ll go to the *Windows* directory:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: USING TAB COMPLETION
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that I specified the *Windows* directory with a dot and backslashes
    on either side: `.\Windows\`. In fact, you don’t have to type all this out because
    the PowerShell console has a great tab completion feature that lets you hit TAB
    repeatedly to cycle through the commands that can be used, given what you’ve already
    typed.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you type GET- followed by a TAB, you can begin scrolling through
    all the commands that start with GET-. Keep hitting TAB to move forward through
    the commands; SHIFT-TAB will move you backward. You can also use tab completion
    on parameters, which I’ll cover in “Exploring PowerShell Commands” on [page 6](ch01.xhtml#page_6),
    as you can see by typing `Get-Content -` followed by TAB. This time, instead of
    cycling through commands, PowerShell begins cycling through the available parameters
    for the `Get-Content` command. When in doubt, press TAB!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Once in the *C:\Windows* folder, you can use the `dir` command to list the contents
    of your current directory, as shown in [Listing 1-1](ch01.xhtml#ch1list1).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 1-1: Displaying the content of the current directory with the dir
    command*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'Entering `cls` will clear your screen and give you a fresh console again. If
    you’re familiar with *cmd.exe*, try some of the other *cmd.exe* commands you know
    to see if they work. Note that although the majority do, not all will. If you’re
    curious about which *cmd.exe* commands exist in PowerShell, once you have the
    PowerShell console up, you can enter `Get-Alias` in the PowerShell console to
    return many of the old-school *cmd.exe* commands you’re used to, like so:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will allow you to see all the built-in aliases and which PowerShell commands
    they map to.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Exploring PowerShell Commands
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like nearly all languages, PowerShell has *commands*, the generic term for named
    executable expressions. A command can be just about anything—from the legacy *ping.exe*
    tool to the `Get-Alias` command I referred to earlier. You can even build your
    own commands. However, if you try to use a nonexistent command, you’ll get the
    infamous red error text, as shown in [Listing 1-2](ch01.xhtml#ch1list2).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 1-2: An error is displayed when an unrecognized command is entered.*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'You can execute `Get-Command` to see a list of every command PowerShell is
    aware of by default. You might notice a common pattern. Most commands’ names follow
    the same scheme: *Verb*-*Noun*. This is a unique trait of PowerShell. To keep
    the language as intuitive as possible, Microsoft has set guidelines for command
    names. Although following this naming convention is optional, it is highly recommended
    for creating your own commands.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'PowerShell commands come in a few flavors: cmdlets, functions, aliases, and
    sometimes external scripts. Most of the built-in commands from Microsoft are *cmdlets*,
    which are typically commands written in other languages like C#. By running the
    `Get-Command` command, as in [Listing 1-3](ch01.xhtml#ch1list3), you’ll see a
    `CommandType` field.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 1-3: Displaying the Get-Alias command’s type*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '*Functions*, on the other hand, are commands written in PowerShell. You write
    functions to get things done; you can leave the cmdlets to the software developers.
    Cmdlets and functions are the most common command types you’ll be working with
    in PowerShell.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: You’ll use the `Get-Command` command to explore the plethora of cmdlets and
    functions available in PowerShell. But as you may have just seen, entering `Get-Command`
    with no parameters will leave you tapping your finger for a few seconds as your
    console scrolls through all the commands available.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: A lot of commands in PowerShell have *parameters*, which are values you give
    (or *pass*) to a command to customize its behavior. For instance, `Get-Command`
    has various parameters that allow you to return only specific commands instead
    of all of them. Looking through `Get-Command`, you may have noticed common verbs
    such as `Get`, `Set`, `Update`, and `Remove`. If you guessed that all of the `Get`
    commands *get* information and the others modify information, you’d be right.
    In PowerShell, what you see is what you get. Commands are named intuitively and
    generally do what you’d expect.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'Since you’re just starting out, you don’t want to change anything on your system.
    You do want to retrieve information from various sources. Using the `Verb` parameter
    on `Get-Command`, you can limit that huge list of commands to only those that
    use the `Get` verb, for example. To do this, enter the following command at the
    prompt:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You’ll probably agree that a few too many commands are still displayed, so you
    can limit the results even further by adding the `Noun` parameter to specify the
    `Content` noun, as in [Listing 1-4](ch01.xhtml#ch1list4).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 1-4: Displaying only commands that contain the verb* Get *and the
    noun* Content'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: If these results are too narrow for you, you also can use `Noun` without the
    `Verb` parameter, as shown in [Listing 1-5](ch01.xhtml#ch1list5).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 1-5: Displaying only commands that contain the noun* Content'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: You can see that `Get-Command` allows you to separate out the verb and noun.
    If you’d rather define the entire command as one unit, you can use the `Name`
    parameter instead and specify the entire command name, as shown in [Listing 1-6](ch01.xhtml#ch1list6).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 1-6: Finding the Get-Content cmdlet by command name*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: As I said previously, lots of commands in PowerShell have parameters that customize
    their behavior. You can learn a command’s parameters by using the robust PowerShell
    help system.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Getting Help
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PowerShell’s documentation isn’t unique by any means, but the way the documentation
    and help content is integrated into the language is truly a work of art. In this
    section, you’ll learn how to display command help pages in the prompt window,
    get more general information on the language via About topics, and update your
    documentation with `Update-Help`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the Docs
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Similar to the `man` command in Linux, PowerShell has the `help` command and
    the `Get-Help` cmdlet. If you’re interested in seeing what one of those `Content`
    cmdlets does, you can pass that command name to the `Get-Help` command to retrieve
    the standard `SYNOPSIS`, `SYNTAX`, `DESCRIPTION`, `RELATED LINKS`, and `REMARKS`
    help sections. These sections provide a breakdown of what the command does, where
    you can find more information about the command, and even some related commands.
    [Listing 1-7](ch01.xhtml#ch1list7) displays the documentation for the `Add-Content`
    command.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 1-7: The Add-Content command’s help page*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Providing just the command name to `Get-Help` is useful, but the most helpful
    part of this content is the `Examples` parameter. This parameter shows examples
    of real-world uses of the command in a variety of scenarios. Try `Get-Help` CommmandName
    `-Examples` on any command and notice that nearly all built-in commands have examples
    to help you understand what they do. For example, you can run the command on the
    `Add-Content` cmdlet, as in [Listing 1-8](ch01.xhtml#ch1list8).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 1-8: Getting sample usages of the Add-Content command*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: If you want more information, the `Get-Help` cmdlet also has the `Detailed`
    and `Full` parameters, which give you a complete rundown on what that command
    does.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Learning About General Topics
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In addition to help content for individual commands, the PowerShell help system
    provides *About topics*, which are help snippets for broader subjects and specific
    commands. For example, in this chapter you’re learning about some of PowerShell’s
    core commands. Microsoft has created an About topic that gives an overall explanation
    of these commands. To see it, you run Get-Help about_Core_Commands, as shown in
    [Listing 1-9](ch01.xhtml#ch1list9).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 1-9: About topic for PowerShell’s core commands*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: To get a complete list of all the About topics available, use a wildcard for
    the `Name` parameter. In PowerShell, the *wildcard* character, an asterisk (`*`),
    can be used as a placeholder for zero or more characters. You can use a wildcard
    with the `Get-Help` command’s `Name` parameter, as in [Listing 1-10](ch01.xhtml#ch1list10).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 1-10: Using a wildcard on the Get-Help command’s Name parameter*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: By appending the wildcard to `About`, you’re asking PowerShell to search for
    all possible topics that start with *About*. If there are multiple matches, PowerShell
    will display a list, with brief information about each. To get the full information
    about one of the matches, you’ll have to pass it into `Get-Help` directly, as
    shown previously in [Listing 1-9](ch01.xhtml#ch1list9).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Although the `Get-Help` command has a `Name` parameter, you can pass the parameter
    argument directly to it by entering `-Name`, as shown in [Listing 1-10](ch01.xhtml#ch1list10).
    This is known as using a *positional* *parameter*, which determines the value
    you’re passing in based on its (you guessed it) position in the command. Positional
    parameters are a shortcut that many PowerShell commands have, allowing you to
    reduce the number of keystrokes.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `Get-Help` 命令有一个 `Name` 参数，但你可以直接通过输入 `-Name` 来传递该参数的值，如 [列表 1-10](ch01.xhtml#ch1list10)
    所示。这被称为使用 *位置* *参数*，它根据参数在命令中的位置（你猜对了）来确定你传递的值。位置参数是许多 PowerShell 命令提供的快捷方式，可以减少输入的按键次数。
- en: Updating the Docs
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新文档
- en: 'The help system in PowerShell is a great asset for anyone who wants to learn
    more about the language, but one key feature makes this help system much better:
    it’s dynamic! Documentation tends to get stale after a while. A product ships
    with documentation, bugs creep in, new features get released, but the documentation
    on the system stays the same. PowerShell addresses this problem with *updatable
    help*, which allows the built-in PowerShell cmdlets and any other cmdlets—or functions
    built by others—to point to an internet URI in order to host up-to-date documentation.
    Simply enter `Update-Help`, and PowerShell will begin reading the help on your
    system and checking it against the various online locations.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 中的帮助系统是任何想要深入了解语言的人的宝贵财富，但有一个关键特点使这个帮助系统更为出色：它是动态的！文档往往随着时间的推移而变得陈旧。一款产品发布时有文档，之后出现
    bug，发布新特性，但系统中的文档却保持不变。PowerShell 通过 *可更新帮助* 来解决这个问题，它允许内置的 PowerShell cmdlet
    以及其他由他人构建的 cmdlet 或函数，通过指向一个互联网 URI 来托管最新的文档。只需输入 `Update-Help`，PowerShell 就会开始读取系统上的帮助文件并与各种在线位置进行比对。
- en: Note that although updatable help is included with all built-in PowerShell cmdlets,
    it isn’t required for any third-party commands. Also, documentation is only as
    recent as the developer makes it. PowerShell provides the tools for developers
    to write better help content, but they still have to keep the repository containing
    their help files current. Finally, you may occasionally receive an error when
    running `Update-Help` if the location where the help is stored is not available
    anymore. In short, don’t expect `Update-Help` to *always* show the latest help
    content for every command in PowerShell.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，虽然所有内置 PowerShell cmdlet 都包含可更新的帮助，但对于任何第三方命令来说，这并不是必需的。另外，文档的更新频率取决于开发者的维护。PowerShell
    提供了让开发者编写更好帮助内容的工具，但他们仍然需要保持帮助文件库的最新状态。最后，如果帮助文件存储的位置不再可用，你在运行 `Update-Help` 时可能会遇到错误。简而言之，不要指望
    `Update-Help` *始终* 显示 PowerShell 中每个命令的最新帮助内容。
- en: RUNNING POWERSHELL AS ADMINISTRATOR
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以管理员身份运行 PowerShell
- en: At times it’s necessary to run the PowerShell console *as Administrator*. This
    typically happens when you need to modify files, the registry, or anything else
    that’s outside your user profile. For example, the `Update-Help` command mentioned
    previously needs to modify system-level files and cannot be run properly by a
    non-Administrator user.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有时需要以 *管理员身份* 运行 PowerShell 控制台。这通常发生在你需要修改文件、注册表或任何其他超出你用户个人资料的内容时。例如，前面提到的
    `Update-Help` 命令需要修改系统级别的文件，普通用户无法正常运行该命令。
- en: You can run PowerShell as an Administrator by right-clicking in Windows PowerShell
    and then clicking **Run as Administrator**, as shown in [Figure 1-2](ch01.xhtml#ch1fig2).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过右键点击 Windows PowerShell，然后点击 **以管理员身份运行** 来以管理员身份运行 PowerShell，如 [图 1-2](ch01.xhtml#ch1fig2)
    所示。
- en: '![Image](../images/01fig02.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/01fig02.jpg)'
- en: '*Figure 1-2: Running PowerShell as Administrator*'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-2：以管理员身份运行 PowerShell*'
- en: Summary
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned a few commands that will help you get started.
    When starting anything new, you’re not going to know what you don’t know. You
    just need a seed of knowledge that enables you to explore more by yourself. By
    understanding the basics of PowerShell commands and how to use `Get-Command` and
    `Get-Help`, you now have the tools you need to begin learning PowerShell. A big,
    exciting journey lies ahead of you!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学到了一些有助于入门的命令。开始任何新事物时，你并不知道自己不知道什么。你只需要一些基本的知识，这些知识能够让你自主探索更多内容。通过理解
    PowerShell 命令的基础以及如何使用 `Get-Command` 和 `Get-Help`，你现在拥有了开始学习 PowerShell 所需的工具。一个充满激动人心旅程的开始就在前方！
