- en: '1'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '1'
- en: GETTING STARTED
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 入门
- en: '![Images](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/common.jpg)'
- en: The name *PowerShell* refers to two things. One is a command line shell, installed
    by default on all recent versions of Windows (starting with Windows 7) and most
    recently available on Linux and macOS operating systems via PowerShell Core. The
    other is a scripting language. Together they refer to one framework that can be
    used to automate everything from rebooting 100 servers at once to building a complete
    automation system that controls your entire data center.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*PowerShell* 这个名称指代两件事。其一是命令行外壳，默认安装在所有最新版本的 Windows 上（从 Windows 7 开始），并且最近通过
    PowerShell Core 可在 Linux 和 macOS 操作系统上使用。其二是脚本语言。二者合起来指的是一个框架，可以用来自动化一切任务，从一次重启
    100 台服务器，到构建一个完整的自动化系统，控制你整个数据中心的运作。'
- en: In the first chapters of this book, you’ll use the PowerShell console to become
    familiar with the basics of PowerShell. Once you’ve covered the basics, you’ll
    graduate to more advanced topics including writing scripts, functions, and custom
    modules.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的前几章中，你将使用 PowerShell 控制台来熟悉 PowerShell 的基础知识。一旦掌握了基础，你将进入更高级的主题，包括编写脚本、函数和自定义模块。
- en: 'This chapter covers the basics: some fundamental commands, and how to find
    and read help pages.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍基础内容：一些基本命令，以及如何查找和阅读帮助页面。
- en: Opening the PowerShell Console
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打开 PowerShell 控制台
- en: The examples in this book use PowerShell v5.1, the version that comes with Windows
    10\. Newer versions of PowerShell have more features and bug fixes, but the basic
    syntax and core functionality of PowerShell hasn’t changed dramatically since
    version 2.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的示例使用的是 PowerShell v5.1，这是 Windows 10 自带的版本。较新的 PowerShell 版本拥有更多功能和 bug
    修复，但自版本 2 起，PowerShell 的基本语法和核心功能并未发生剧烈变化。
- en: To open PowerShell in Windows 10, enter **PowerShell** in the Start menu. You
    should immediately see a Windows PowerShell option front and center. Clicking
    that option should bring up a blue console and a flashing cursor, as in [Figure
    1-1](ch01.xhtml#ch1fig1).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 10 中打开 PowerShell，输入**PowerShell**在开始菜单中搜索。你应该会看到 Windows PowerShell
    选项出现在中间，点击该选项即可打开一个蓝色控制台和闪烁的光标，如[图 1-1](ch01.xhtml#ch1fig1)所示。
- en: '![Image](../images/01fig01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/01fig01.jpg)'
- en: '*Figure 1-1: A PowerShell console*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-1：PowerShell 控制台*'
- en: The flashing cursor indicates that PowerShell is ready for your input. Note
    that your *prompt*—the line beginning with `PS>`—will probably look different
    from mine; the file path in the prompt indicates your current location in the
    system. As you can see in my console’s title, I’ve right-clicked the PowerShell
    icon and run it as administrator. This gives me full rights, and starts me in
    the *C:\Windows\system32\WindowsPowerShell\v1.0* directory.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 闪烁的光标表示 PowerShell 已准备好接受你的输入。请注意，你的*提示符*——以`PS>`开头的那一行——可能与我的不同；提示符中的文件路径表示你在系统中的当前位置。如你在我控制台的标题中所见，我右键点击了
    PowerShell 图标，并以管理员身份运行它。这为我提供了完全的权限，并将我启动在*C:\Windows\system32\WindowsPowerShell\v1.0*目录中。
- en: Using DOS Commands
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 DOS 命令
- en: Once PowerShell is open, you can start exploring. If you’ve previously used
    the Windows command line, *cmd.exe*, you’ll be glad to know that all the commands
    you’re used to (for example, `cd`, `dir`, and `cls`) also work in PowerShell.
    Under the covers, these DOS “commands” aren’t really commands, but command *aliases*,
    or pseudonyms, that translate from commands you know to commands PowerShell knows.
    But for now, you don’t need to understand the difference—just consider them your
    familiar DOS friends!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦打开 PowerShell，你就可以开始探索了。如果你以前使用过 Windows 命令行工具 *cmd.exe*，你会很高兴地知道，所有你熟悉的命令（例如
    `cd`、`dir` 和 `cls`）在 PowerShell 中也可以使用。在后台，这些 DOS “命令”实际上并不是真正的命令，而是命令*别名*，或者说是伪名，它们将你熟悉的命令转换为
    PowerShell 识别的命令。但目前，你不需要了解这些差异——只需将它们视为你熟悉的 DOS 好朋友！
- en: 'Let’s try some of these commands. If you’re sitting at the `PS>` prompt and
    want to check out a specific directory’s contents, first navigate to that directory
    with `cd`, short for *change directory*. Here you’ll go to the *Windows* directory:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一些命令。如果你在`PS>`提示符下，并且想查看某个特定目录的内容，首先使用`cd`命令进入该目录，`cd`是*更改目录*（change directory）的缩写。这里你将进入*Windows*目录：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: USING TAB COMPLETION
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 TAB 完成
- en: 'Notice that I specified the *Windows* directory with a dot and backslashes
    on either side: `.\Windows\`. In fact, you don’t have to type all this out because
    the PowerShell console has a great tab completion feature that lets you hit TAB
    repeatedly to cycle through the commands that can be used, given what you’ve already
    typed.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我用点和反斜杠指定了 *Windows* 目录：`.\Windows\`。事实上，你无需手动输入这些内容，因为 PowerShell 控制台具有很棒的
    Tab 补全功能，允许你重复按 TAB 键来浏览你已经输入的内容所能使用的命令。
- en: For example, if you type GET- followed by a TAB, you can begin scrolling through
    all the commands that start with GET-. Keep hitting TAB to move forward through
    the commands; SHIFT-TAB will move you backward. You can also use tab completion
    on parameters, which I’ll cover in “Exploring PowerShell Commands” on [page 6](ch01.xhtml#page_6),
    as you can see by typing `Get-Content -` followed by TAB. This time, instead of
    cycling through commands, PowerShell begins cycling through the available parameters
    for the `Get-Content` command. When in doubt, press TAB!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你输入 GET- 后按 TAB 键，你可以开始滚动所有以 GET- 开头的命令。继续按 TAB 键可以向前浏览命令；按 SHIFT-TAB 键则可以向后浏览。你还可以对参数使用
    Tab 补全，我将在“探索 PowerShell 命令”部分中讲解，正如你在 [第 6 页](ch01.xhtml#page_6) 中看到的，输入 `Get-Content
    -` 然后按 TAB 键。此次，PowerShell 不再循环浏览命令，而是开始循环浏览 `Get-Content` 命令的可用参数。当你不确定时，按 TAB
    键！
- en: Once in the *C:\Windows* folder, you can use the `dir` command to list the contents
    of your current directory, as shown in [Listing 1-1](ch01.xhtml#ch1list1).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 进入 *C:\Windows* 文件夹后，你可以使用 `dir` 命令列出当前目录的内容，如 [Listing 1-1](ch01.xhtml#ch1list1)
    中所示。
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 1-1: Displaying the content of the current directory with the dir
    command*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 1-1：使用 dir 命令显示当前目录的内容*'
- en: 'Entering `cls` will clear your screen and give you a fresh console again. If
    you’re familiar with *cmd.exe*, try some of the other *cmd.exe* commands you know
    to see if they work. Note that although the majority do, not all will. If you’re
    curious about which *cmd.exe* commands exist in PowerShell, once you have the
    PowerShell console up, you can enter `Get-Alias` in the PowerShell console to
    return many of the old-school *cmd.exe* commands you’re used to, like so:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 输入 `cls` 将清除屏幕并重新启动一个干净的控制台。如果你熟悉 *cmd.exe*，可以尝试一些你知道的其他 *cmd.exe* 命令，看看它们是否有效。请注意，虽然大多数命令有效，但并非所有命令都有效。如果你想知道哪些
    *cmd.exe* 命令在 PowerShell 中存在，你可以在 PowerShell 控制台中输入 `Get-Alias`，它将返回许多你熟悉的老式 *cmd.exe*
    命令，如下所示：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will allow you to see all the built-in aliases and which PowerShell commands
    they map to.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许你查看所有内置的别名以及它们映射到的 PowerShell 命令。
- en: Exploring PowerShell Commands
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探索 PowerShell 命令
- en: Like nearly all languages, PowerShell has *commands*, the generic term for named
    executable expressions. A command can be just about anything—from the legacy *ping.exe*
    tool to the `Get-Alias` command I referred to earlier. You can even build your
    own commands. However, if you try to use a nonexistent command, you’ll get the
    infamous red error text, as shown in [Listing 1-2](ch01.xhtml#ch1list2).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 像几乎所有语言一样，PowerShell 有 *命令*，这是指命名的可执行表达式的通用术语。一个命令几乎可以是任何东西——从传统的 *ping.exe*
    工具到我之前提到的 `Get-Alias` 命令。你甚至可以创建自己的命令。然而，如果你尝试使用一个不存在的命令，你将看到著名的红色错误文本，正如在 [Listing
    1-2](ch01.xhtml#ch1list2) 中所示。
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 1-2: An error is displayed when an unrecognized command is entered.*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 1-2：输入未识别命令时显示错误信息。*'
- en: 'You can execute `Get-Command` to see a list of every command PowerShell is
    aware of by default. You might notice a common pattern. Most commands’ names follow
    the same scheme: *Verb*-*Noun*. This is a unique trait of PowerShell. To keep
    the language as intuitive as possible, Microsoft has set guidelines for command
    names. Although following this naming convention is optional, it is highly recommended
    for creating your own commands.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以执行 `Get-Command` 来查看 PowerShell 默认识别的所有命令列表。你可能会注意到一个常见的模式。大多数命令的名称遵循相同的模式：*动词*-*名词*。这是
    PowerShell 的独特特点。为了保持语言尽可能直观，微软已经为命令名称设置了规范。虽然遵循这种命名约定是可选的，但强烈推荐在创建自己的命令时使用它。
- en: 'PowerShell commands come in a few flavors: cmdlets, functions, aliases, and
    sometimes external scripts. Most of the built-in commands from Microsoft are *cmdlets*,
    which are typically commands written in other languages like C#. By running the
    `Get-Command` command, as in [Listing 1-3](ch01.xhtml#ch1list3), you’ll see a
    `CommandType` field.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 命令有几种类型：cmdlet、函数、别名，有时还有外部脚本。微软提供的大多数内置命令是 *cmdlet*，通常是用其他语言（如 C#）编写的命令。通过运行
    `Get-Command` 命令，如 [Listing 1-3](ch01.xhtml#ch1list3) 中所示，你将看到一个 `CommandType`
    字段。
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 1-3: Displaying the Get-Alias command’s type*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 1-3：显示 Get-Alias 命令的类型*'
- en: '*Functions*, on the other hand, are commands written in PowerShell. You write
    functions to get things done; you can leave the cmdlets to the software developers.
    Cmdlets and functions are the most common command types you’ll be working with
    in PowerShell.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*函数* 是用 PowerShell 编写的命令。你编写函数来完成任务；而 cmdlet 则交给软件开发人员处理。Cmdlet 和函数是你在 PowerShell
    中最常用的命令类型。'
- en: You’ll use the `Get-Command` command to explore the plethora of cmdlets and
    functions available in PowerShell. But as you may have just seen, entering `Get-Command`
    with no parameters will leave you tapping your finger for a few seconds as your
    console scrolls through all the commands available.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用 `Get-Command` 命令来浏览 PowerShell 中可用的众多 cmdlet 和函数。但是正如你刚刚看到的，输入没有参数的 `Get-Command`
    会让你等几秒钟，因为控制台正在滚动显示所有可用的命令。
- en: A lot of commands in PowerShell have *parameters*, which are values you give
    (or *pass*) to a command to customize its behavior. For instance, `Get-Command`
    has various parameters that allow you to return only specific commands instead
    of all of them. Looking through `Get-Command`, you may have noticed common verbs
    such as `Get`, `Set`, `Update`, and `Remove`. If you guessed that all of the `Get`
    commands *get* information and the others modify information, you’d be right.
    In PowerShell, what you see is what you get. Commands are named intuitively and
    generally do what you’d expect.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 中有许多命令具有*参数*，这些参数是你传递给命令的值，用以定制其行为。例如，`Get-Command` 有多个参数，允许你只返回特定的命令，而不是所有命令。在查看
    `Get-Command` 时，你可能会注意到一些常见的动词，如 `Get`、`Set`、`Update` 和 `Remove`。如果你猜测所有的 `Get`
    命令都是用来*获取*信息的，而其他命令则修改信息，你猜对了。在 PowerShell 中，所见即所得。命令的命名直观，并且通常按预期执行。
- en: 'Since you’re just starting out, you don’t want to change anything on your system.
    You do want to retrieve information from various sources. Using the `Verb` parameter
    on `Get-Command`, you can limit that huge list of commands to only those that
    use the `Get` verb, for example. To do this, enter the following command at the
    prompt:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你刚刚开始，你不想改变系统中的任何内容。你确实想从不同来源获取信息。例如，使用 `Get-Command` 的 `Verb` 参数，你可以将庞大的命令列表限制为仅包含使用
    `Get` 动词的命令。要做到这一点，请在提示符下输入以下命令：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You’ll probably agree that a few too many commands are still displayed, so you
    can limit the results even further by adding the `Noun` parameter to specify the
    `Content` noun, as in [Listing 1-4](ch01.xhtml#ch1list4).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会同意，显示的命令太多了，因此你可以通过添加 `Noun` 参数来进一步限制结果，指定 `Content` 名词，如 [列表 1-4](ch01.xhtml#ch1list4)
    所示。
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 1-4: Displaying only commands that contain the verb* Get *and the
    noun* Content'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 1-4：仅显示包含动词* Get *和名词* Content *的命令*'
- en: If these results are too narrow for you, you also can use `Noun` without the
    `Verb` parameter, as shown in [Listing 1-5](ch01.xhtml#ch1list5).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些结果对你来说过于狭窄，你也可以使用 `Noun` 参数而不指定 `Verb` 参数，如 [列表 1-5](ch01.xhtml#ch1list5)
    所示。
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 1-5: Displaying only commands that contain the noun* Content'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 1-5：仅显示包含名词* Content *的命令*'
- en: You can see that `Get-Command` allows you to separate out the verb and noun.
    If you’d rather define the entire command as one unit, you can use the `Name`
    parameter instead and specify the entire command name, as shown in [Listing 1-6](ch01.xhtml#ch1list6).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到 `Get-Command` 允许你将动词和名词分开。如果你更愿意将整个命令定义为一个单元，你可以改用 `Name` 参数，指定整个命令名称，如
    [列表 1-6](ch01.xhtml#ch1list6) 所示。
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 1-6: Finding the Get-Content cmdlet by command name*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 1-6：按命令名称查找 Get-Content cmdlet*'
- en: As I said previously, lots of commands in PowerShell have parameters that customize
    their behavior. You can learn a command’s parameters by using the robust PowerShell
    help system.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前所说，PowerShell 中有许多命令带有可以定制其行为的参数。你可以通过使用强大的 PowerShell 帮助系统来学习命令的参数。
- en: Getting Help
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取帮助
- en: PowerShell’s documentation isn’t unique by any means, but the way the documentation
    and help content is integrated into the language is truly a work of art. In this
    section, you’ll learn how to display command help pages in the prompt window,
    get more general information on the language via About topics, and update your
    documentation with `Update-Help`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 的文档并不独特，但其文档和帮助内容与语言的集成方式堪称艺术。在本节中，你将学习如何在提示窗口中显示命令帮助页面，如何通过 About
    主题获取有关语言的更多一般信息，以及如何使用 `Update-Help` 更新文档。
- en: Displaying the Docs
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 显示文档
- en: Similar to the `man` command in Linux, PowerShell has the `help` command and
    the `Get-Help` cmdlet. If you’re interested in seeing what one of those `Content`
    cmdlets does, you can pass that command name to the `Get-Help` command to retrieve
    the standard `SYNOPSIS`, `SYNTAX`, `DESCRIPTION`, `RELATED LINKS`, and `REMARKS`
    help sections. These sections provide a breakdown of what the command does, where
    you can find more information about the command, and even some related commands.
    [Listing 1-7](ch01.xhtml#ch1list7) displays the documentation for the `Add-Content`
    command.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 Linux 中的 `man` 命令，PowerShell 有 `help` 命令和 `Get-Help` cmdlet。如果您有兴趣查看某个 `Content`
    cmdlet 的作用，您可以将该命令名称传递给 `Get-Help` 命令，以检索标准的 `SYNOPSIS`、`SYNTAX`、`DESCRIPTION`、`RELATED
    LINKS` 和 `REMARKS` 帮助部分。这些部分提供了命令的作用、在哪里可以找到该命令的更多信息，甚至一些相关命令。[清单 1-7](ch01.xhtml#ch1list7)
    显示了 `Add-Content` 命令的文档。
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 1-7: The Add-Content command’s help page*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 1-7：Add-Content 命令的帮助页面*'
- en: Providing just the command name to `Get-Help` is useful, but the most helpful
    part of this content is the `Examples` parameter. This parameter shows examples
    of real-world uses of the command in a variety of scenarios. Try `Get-Help` CommmandName
    `-Examples` on any command and notice that nearly all built-in commands have examples
    to help you understand what they do. For example, you can run the command on the
    `Add-Content` cmdlet, as in [Listing 1-8](ch01.xhtml#ch1list8).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 只向 `Get-Help` 提供命令名称是有用的，但此内容中最有帮助的部分是 `Examples` 参数。该参数显示了在各种场景下使用该命令的实际示例。尝试在任何命令上运行
    `Get-Help` 命令名称 `-Examples`，您会注意到几乎所有内置命令都有示例，帮助您理解它们的作用。例如，您可以在 `Add-Content`
    cmdlet 上运行该命令，如[清单 1-8](ch01.xhtml#ch1list8)所示。
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 1-8: Getting sample usages of the Add-Content command*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 1-8：获取 Add-Content 命令的示例用法*'
- en: If you want more information, the `Get-Help` cmdlet also has the `Detailed`
    and `Full` parameters, which give you a complete rundown on what that command
    does.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要更多信息，`Get-Help` cmdlet 还具有 `Detailed` 和 `Full` 参数，它们会提供关于该命令的完整介绍。
- en: Learning About General Topics
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 了解一般主题
- en: In addition to help content for individual commands, the PowerShell help system
    provides *About topics*, which are help snippets for broader subjects and specific
    commands. For example, in this chapter you’re learning about some of PowerShell’s
    core commands. Microsoft has created an About topic that gives an overall explanation
    of these commands. To see it, you run Get-Help about_Core_Commands, as shown in
    [Listing 1-9](ch01.xhtml#ch1list9).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 除了单个命令的帮助内容，PowerShell 帮助系统还提供了*关于主题*，这些是针对更广泛主题和特定命令的帮助片段。例如，在本章中，您将学习 PowerShell
    核心命令的一些内容。微软已经创建了一个关于主题，给出了这些命令的总体解释。要查看它，您可以运行 `Get-Help about_Core_Commands`，如[清单
    1-9](ch01.xhtml#ch1list9)所示。
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 1-9: About topic for PowerShell’s core commands*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 1-9：PowerShell 核心命令的相关主题*'
- en: To get a complete list of all the About topics available, use a wildcard for
    the `Name` parameter. In PowerShell, the *wildcard* character, an asterisk (`*`),
    can be used as a placeholder for zero or more characters. You can use a wildcard
    with the `Get-Help` command’s `Name` parameter, as in [Listing 1-10](ch01.xhtml#ch1list10).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取所有可用的关于主题的完整列表，可以对 `Name` 参数使用通配符。在 PowerShell 中，*通配符*字符星号（`*`）可以作为零个或多个字符的占位符。您可以在
    `Get-Help` 命令的 `Name` 参数中使用通配符，如[清单 1-10](ch01.xhtml#ch1list10)所示。
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 1-10: Using a wildcard on the Get-Help command’s Name parameter*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 1-10：在 Get-Help 命令的 Name 参数上使用通配符*'
- en: By appending the wildcard to `About`, you’re asking PowerShell to search for
    all possible topics that start with *About*. If there are multiple matches, PowerShell
    will display a list, with brief information about each. To get the full information
    about one of the matches, you’ll have to pass it into `Get-Help` directly, as
    shown previously in [Listing 1-9](ch01.xhtml#ch1list9).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将通配符附加到 `About`，您要求 PowerShell 搜索所有以 *About* 开头的主题。如果有多个匹配项，PowerShell 将显示一个列表，并简要介绍每个主题的信息。要获取有关某个匹配项的完整信息，您必须将其直接传递给
    `Get-Help`，如前面在[清单 1-9](ch01.xhtml#ch1list9)中所示。
- en: Although the `Get-Help` command has a `Name` parameter, you can pass the parameter
    argument directly to it by entering `-Name`, as shown in [Listing 1-10](ch01.xhtml#ch1list10).
    This is known as using a *positional* *parameter*, which determines the value
    you’re passing in based on its (you guessed it) position in the command. Positional
    parameters are a shortcut that many PowerShell commands have, allowing you to
    reduce the number of keystrokes.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `Get-Help` 命令有一个 `Name` 参数，但你可以直接通过输入 `-Name` 来传递该参数的值，如 [列表 1-10](ch01.xhtml#ch1list10)
    所示。这被称为使用 *位置* *参数*，它根据参数在命令中的位置（你猜对了）来确定你传递的值。位置参数是许多 PowerShell 命令提供的快捷方式，可以减少输入的按键次数。
- en: Updating the Docs
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新文档
- en: 'The help system in PowerShell is a great asset for anyone who wants to learn
    more about the language, but one key feature makes this help system much better:
    it’s dynamic! Documentation tends to get stale after a while. A product ships
    with documentation, bugs creep in, new features get released, but the documentation
    on the system stays the same. PowerShell addresses this problem with *updatable
    help*, which allows the built-in PowerShell cmdlets and any other cmdlets—or functions
    built by others—to point to an internet URI in order to host up-to-date documentation.
    Simply enter `Update-Help`, and PowerShell will begin reading the help on your
    system and checking it against the various online locations.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 中的帮助系统是任何想要深入了解语言的人的宝贵财富，但有一个关键特点使这个帮助系统更为出色：它是动态的！文档往往随着时间的推移而变得陈旧。一款产品发布时有文档，之后出现
    bug，发布新特性，但系统中的文档却保持不变。PowerShell 通过 *可更新帮助* 来解决这个问题，它允许内置的 PowerShell cmdlet
    以及其他由他人构建的 cmdlet 或函数，通过指向一个互联网 URI 来托管最新的文档。只需输入 `Update-Help`，PowerShell 就会开始读取系统上的帮助文件并与各种在线位置进行比对。
- en: Note that although updatable help is included with all built-in PowerShell cmdlets,
    it isn’t required for any third-party commands. Also, documentation is only as
    recent as the developer makes it. PowerShell provides the tools for developers
    to write better help content, but they still have to keep the repository containing
    their help files current. Finally, you may occasionally receive an error when
    running `Update-Help` if the location where the help is stored is not available
    anymore. In short, don’t expect `Update-Help` to *always* show the latest help
    content for every command in PowerShell.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，虽然所有内置 PowerShell cmdlet 都包含可更新的帮助，但对于任何第三方命令来说，这并不是必需的。另外，文档的更新频率取决于开发者的维护。PowerShell
    提供了让开发者编写更好帮助内容的工具，但他们仍然需要保持帮助文件库的最新状态。最后，如果帮助文件存储的位置不再可用，你在运行 `Update-Help` 时可能会遇到错误。简而言之，不要指望
    `Update-Help` *始终* 显示 PowerShell 中每个命令的最新帮助内容。
- en: RUNNING POWERSHELL AS ADMINISTRATOR
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以管理员身份运行 PowerShell
- en: At times it’s necessary to run the PowerShell console *as Administrator*. This
    typically happens when you need to modify files, the registry, or anything else
    that’s outside your user profile. For example, the `Update-Help` command mentioned
    previously needs to modify system-level files and cannot be run properly by a
    non-Administrator user.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有时需要以 *管理员身份* 运行 PowerShell 控制台。这通常发生在你需要修改文件、注册表或任何其他超出你用户个人资料的内容时。例如，前面提到的
    `Update-Help` 命令需要修改系统级别的文件，普通用户无法正常运行该命令。
- en: You can run PowerShell as an Administrator by right-clicking in Windows PowerShell
    and then clicking **Run as Administrator**, as shown in [Figure 1-2](ch01.xhtml#ch1fig2).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过右键点击 Windows PowerShell，然后点击 **以管理员身份运行** 来以管理员身份运行 PowerShell，如 [图 1-2](ch01.xhtml#ch1fig2)
    所示。
- en: '![Image](../images/01fig02.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/01fig02.jpg)'
- en: '*Figure 1-2: Running PowerShell as Administrator*'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-2：以管理员身份运行 PowerShell*'
- en: Summary
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned a few commands that will help you get started.
    When starting anything new, you’re not going to know what you don’t know. You
    just need a seed of knowledge that enables you to explore more by yourself. By
    understanding the basics of PowerShell commands and how to use `Get-Command` and
    `Get-Help`, you now have the tools you need to begin learning PowerShell. A big,
    exciting journey lies ahead of you!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学到了一些有助于入门的命令。开始任何新事物时，你并不知道自己不知道什么。你只需要一些基本的知识，这些知识能够让你自主探索更多内容。通过理解
    PowerShell 命令的基础以及如何使用 `Get-Command` 和 `Get-Help`，你现在拥有了开始学习 PowerShell 所需的工具。一个充满激动人心旅程的开始就在前方！
