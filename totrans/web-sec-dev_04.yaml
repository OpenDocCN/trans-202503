- en: '**3**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**3**'
- en: '**HOW BROWSERS WORK**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**浏览器是如何工作的**'
- en: '![image](Images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common01.jpg)'
- en: Most internet users interact with websites through a browser. To build secure
    websites, you need to understand how browsers transform the HyperText Markup Language
    (HTML) used to describe web pages into the interactive, visual representations
    you see onscreen. This chapter covers how a modern browser renders a web page,
    highlighting the security measures it puts in place to protect the user—the *browser
    security model*. We’ll also look at the various ways hackers try to overcome these
    security measures.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数互联网用户通过浏览器与网站进行互动。要构建安全的网站，你需要理解浏览器如何将用来描述网页的超文本标记语言（HTML）转换为你在屏幕上看到的互动式视觉表现。本章将介绍现代浏览器如何渲染网页，并重点讲解它为保护用户所采取的安全措施——*浏览器安全模型*。我们还将探讨黑客试图突破这些安全措施的各种方式。
- en: '**Web Page Rendering**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**网页渲染**'
- en: The software component within a web browser that’s responsible for transforming
    a web page’s HTML into the visual representation you see onscreen is called the
    *rendering pipeline*. The rendering pipeline is responsible for parsing the page’s
    HTML, understanding the structure and content of the document, and converting
    it to a series of drawing operations that the operating system can understand.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器内负责将网页HTML转换为你在屏幕上看到的视觉表示的组件被称为*渲染管道*。渲染管道负责解析页面的HTML，理解文档的结构和内容，并将其转换为操作系统可以理解的一系列绘制操作。
- en: For websites in the early days of the internet, this process was relatively
    simple. Web page HTML contained very little styling information (such as color,
    font, and font size), so rendering was mostly a matter of loading text and images
    and drawing them onscreen in the order they appeared in the HTML document. HTML
    was envisioned as a *markup language*, meaning it described the web page by breaking
    it into semantic elements and annotating how the information was structured. The
    early web looked pretty crude, but was very efficient for relaying textual content.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网早期，网站的这一过程相对简单。网页的HTML包含的样式信息很少（如颜色、字体和字体大小），因此渲染大多是加载文本和图片，并按HTML文档中的顺序将它们绘制到屏幕上。HTML被视为一种*标记语言*，意味着它通过将网页分解为语义元素并注释信息结构的方式来描述网页。早期的网络看起来比较粗糙，但对于传递文本内容来说非常高效。
- en: Nowadays, web design is more elaborate and visually appealing. Web developers
    encode styling information into separate *Cascading Style Sheets (CSS)* files,
    which instruct the browser precisely how each page element is to be displayed.
    A modern, hyperoptimized browser like Google Chrome contains several million lines
    of code to correctly interpret and render HTML and deal with conflicting styling
    rules in a fast, uniform manner. Understanding the various stages that make up
    the rendering pipeline will help you appreciate this complexity.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，网页设计更为精致，视觉效果也更具吸引力。网页开发者将样式信息编码到单独的*Cascading Style Sheets (CSS)* 文件中，指示浏览器如何精确地显示每个页面元素。像谷歌Chrome这样的现代化超优化浏览器，包含数百万行代码，能够以快速、统一的方式正确解析和渲染HTML，并处理冲突的样式规则。了解渲染管道的各个阶段将有助于你理解这一复杂性。
- en: '***The Rendering Pipeline: An Overview***'
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***渲染管道概览***'
- en: We’ll get into the details of each stage of the rendering pipeline in a moment,
    but first let’s look at the high-level process.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会详细介绍渲染管道的每个阶段，但首先让我们来看一下高层次的过程。
- en: 'When the browser receives an HTTP response, it parses the HTML in the body
    of the response into a *Document Object Model (DOM)*: an in-memory data structure
    that represents the browser’s understanding of the way the page is structured.
    Generating the DOM is an interim step between parsing the HTML and drawing it
    onscreen. In modern HTML, the layout of the page can’t be determined until the
    whole of the HTML is parsed, because the order of the tags in the HTML doesn’t
    necessarily determine the location of their content.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器收到HTTP响应时，它会将响应体中的HTML解析为*文档对象模型（DOM）*：一种内存中的数据结构，表示浏览器对页面结构的理解。在解析HTML和将其绘制到屏幕上之间，生成DOM是一个过渡步骤。在现代HTML中，页面的布局无法确定，直到整个HTML被解析完毕，因为HTML标签的顺序并不一定决定其内容的位置。
- en: Once the browser generates the DOM, but before anything can be drawn onscreen,
    styling rules must be applied to each DOM element. These styling rules declare
    how each page element is to be drawn—the foreground and background color, the
    font style and size, the position and alignment, and so on. Last, after the browser
    finalizes the structure of the page and breaks down how to apply styling information,
    it draws the web page onscreen. All of this happens in a fraction of a second,
    and repeats on a loop as the user interacts with the page.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦浏览器生成了 DOM，但在任何内容显示到屏幕上之前，必须先对每个 DOM 元素应用样式规则。这些样式规则声明了每个页面元素的显示方式——前景色和背景色、字体样式和大小、位置和对齐方式等。最后，在浏览器完成页面结构并确定如何应用样式信息后，它会将网页绘制到屏幕上。所有这些都发生在一瞬间，并且随着用户与页面的交互不断重复。
- en: The browser also loads and executes any JavaScript it comes across as it constructs
    the DOM. JavaScript code can dynamically make changes to the DOM and styling rules,
    either before the page is rendered or in response to user actions.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器在构建 DOM 时还会加载并执行它遇到的任何 JavaScript 代码。JavaScript 代码可以动态地修改 DOM 和样式规则，无论是在页面渲染之前还是响应用户的操作。
- en: Now let’s look at each step in more detail.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们更详细地看一下每个步骤。
- en: '***The Document Object Model***'
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***文档对象模型***'
- en: When a browser first receives an HTTP response containing HTML, it parses the
    HTML document into a DOM, a data structure describing the HTML document as a series
    of nested elements called *DOM nodes*. Some nodes in the DOM correspond to elements
    to be rendered onscreen, such as input boxes and paragraphs of text; other nodes,
    such as script and styling elements, control the page’s behavior and layout.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器首次接收到包含 HTML 的 HTTP 响应时，它会将 HTML 文档解析成 DOM，一个描述 HTML 文档为一系列嵌套元素的数据结构，这些元素被称为*DOM
    节点*。DOM 中的某些节点对应于需要在屏幕上渲染的元素，如输入框和段落文本；其他节点，如脚本和样式元素，控制页面的行为和布局。
- en: Each DOM node is roughly equivalent to a tag in the original HTML document.
    DOM nodes can contain text content, or contain other DOM nodes, similar to the
    way HTML tags can be nested within each other. Because each node can contain other
    nodes in a branching fashion, web developers talk about the *DOM tree*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 DOM 节点大致相当于原始 HTML 文档中的一个标签。DOM 节点可以包含文本内容，或者包含其他 DOM 节点，类似于 HTML 标签可以嵌套在一起的方式。由于每个节点可以以分支的方式包含其他节点，网页开发者称之为*DOM
    树*。
- en: Some HTML tags, like the `<script>`, `<style>`, `<image>`, `<font>`, and `<video>`
    tags, can reference an external URL in an attribute. When they’re parsed into
    the DOM, these tags cause the browser to import the external resources, meaning
    that the browser must initiate a further HTTP request. Modern browsers perform
    these requests in parallel to the page rendering, in order to speed up the page-load
    time.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 HTML 标签，如 `<script>`、`<style>`、`<image>`、`<font>` 和 `<video>` 标签，可以在属性中引用外部
    URL。当这些标签被解析到 DOM 中时，它们会导致浏览器导入外部资源，这意味着浏览器必须发起进一步的 HTTP 请求。现代浏览器会并行执行这些请求与页面渲染，以加快页面加载时间。
- en: The construction of the DOM from HTML is designed to be as robust as possible.
    Browsers are forgiving about malformed HTML; they close unclosed tags, insert
    missing tags, and ignore corrupted tags as needed. Browser vendors don’t punish
    the web user for the website’s errors.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 从 HTML 构建 DOM 的设计目标是尽可能强大。浏览器对于格式错误的 HTML 是宽容的；它们会自动关闭未闭合的标签，插入缺失的标签，并根据需要忽略损坏的标签。浏览器厂商不会因为网站的错误而惩罚网页用户。
- en: '***Styling Information***'
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***样式信息***'
- en: Once the browser has constructed the DOM tree, it needs to determine which DOM
    nodes correspond to onscreen elements, how to lay out those elements relative
    to each other, and what styling information to apply to them. Though these styling
    rules can be defined inline in the HTML document, web developers prefer to encode
    styling information in separate CSS files. Separating the styling information
    from the HTML content makes restyling existing content easier and keeps HTML content
    as clean and semantic as possible. It also makes HTML easier to parse for alternative
    browsing technologies such as screen readers.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦浏览器构建了 DOM 树，它需要确定哪些 DOM 节点对应于屏幕上的元素，如何布局这些元素以及应该应用哪些样式信息。虽然这些样式规则可以在 HTML
    文档中内联定义，但网页开发者更喜欢将样式信息编码到单独的 CSS 文件中。将样式信息与 HTML 内容分离使得重新样式化现有内容更加容易，并且保持 HTML
    内容尽可能干净和语义化。它还使得 HTML 对于屏幕阅读器等替代浏览技术更容易解析。
- en: 'When using CSS, a web developer will create one or more *stylesheets* to declare
    how elements on the page should be rendered. The HTML document will import these
    stylesheets by using a `<style>` tag referencing the external URL that hosts the
    stylesheet. Each stylesheet contains *selectors* that pick out tags in the HTML
    document and assign styling information, such as font size, colors, and position,
    to each. Selectors may be simple: they might state, for example, that heading
    text in an `<h1>` tag should be rendered in blue. For more complex web pages,
    selectors get more convoluted: a selector may describe how quickly a hyperlink
    changes color when the user moves their mouse over it.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用CSS时，网页开发者会创建一个或多个*样式表*来声明页面元素的渲染方式。HTML文档会通过使用`<style>`标签来导入这些样式表，该标签引用了托管样式表的外部URL。每个样式表包含*选择器*，它们会挑选出HTML文档中的标签，并为每个标签分配样式信息，如字体大小、颜色和位置等。选择器可能很简单：例如，它可能会说明`<h1>`标签中的标题文本应以蓝色显示。对于更复杂的网页，选择器会变得更加复杂：一个选择器可能会描述当用户将鼠标移到超链接上时，超链接的颜色变化速度。
- en: The rendering pipeline implements a lot of logic to decipher final styling,
    because strict rules of precedence need to be followed about how styles are applied.
    Each selector can apply to multiple page elements, and each page element will
    often have styling information supplied by several selectors. One of the growing
    pains of the early internet was figuring out how to create a website that looked
    the same when rendered by different types of browsers. Modern browsers are generally
    consistent in the way they render a web page, but they still vary. The industry’s
    benchmark for compliance to web standards is the Acid3 test, as shown in [Figure
    3-1](ch03.xhtml#ch3fig1). Only a few browsers score 100\. You can visit *[http://acid3.acidtests.org/](http://acid3.acidtests.org/)*
    to try out the Acid3 test.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染管道实施了很多逻辑来解读最终的样式，因为关于如何应用样式需要遵循严格的优先级规则。每个选择器可以应用于多个页面元素，而且每个页面元素通常会有多个选择器提供的样式信息。早期互联网的一大难题是如何创建一个在不同类型的浏览器中渲染时看起来相同的网站。现代浏览器通常在渲染网页时保持一致性，但它们之间仍然存在差异。行业对网页标准合规性的基准是Acid3测试，如[图3-1](ch03.xhtml#ch3fig1)所示。只有少数浏览器能获得100分。你可以访问*[http://acid3.acidtests.org/](http://acid3.acidtests.org/)*来体验Acid3测试。
- en: '![image](Images/03fig01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/03fig01.jpg)'
- en: '*Figure 3-1: Acid3, making sure browsers can render colored rectangles correctly
    since 2008*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3-1：Acid3，自2008年以来确保浏览器能够正确渲染彩色矩形*'
- en: The construction of the DOM tree and the application of styling rules occur
    in parallel to the processing of any JavaScript code contained in the web page.
    This JavaScript code can change the structure and layout of the page even before
    it’s rendered, so let’s take a quick look at how the execution of JavaScript dovetails
    with the rendering pipeline.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: DOM树的构建和样式规则的应用与网页中包含的JavaScript代码的处理是并行进行的。这个JavaScript代码可以在页面渲染之前改变页面的结构和布局，所以让我们快速了解一下JavaScript执行是如何与渲染管道交织在一起的。
- en: '**JavaScript**'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**JavaScript**'
- en: Modern web pages use JavaScript to respond to user actions. *JavaScript* is
    a fully fledged programming language that is executed by the browser’s JavaScript
    engine when web pages are rendered. JavaScript can be incorporated into an HTML
    document by using a `<script>` tag; the code may be included inline within the
    HTML document, or, more typically, the `<script>` tag will reference a JavaScript
    file that is to be loaded from an external URL.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现代网页使用JavaScript来响应用户的操作。*JavaScript*是一种完整的编程语言，当网页渲染时，它会由浏览器的JavaScript引擎执行。JavaScript可以通过使用`<script>`标签嵌入到HTML文档中；代码可以直接嵌入到HTML文档内，或者更常见的是，`<script>`标签引用一个从外部URL加载的JavaScript文件。
- en: By default, any JavaScript code is executed by the browser as soon as the relevant
    `<script>` tag is parsed into a DOM node. For JavaScript code loaded from an external
    URL, this means the code is executed as soon as it is loaded.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，任何JavaScript代码都会在相关的`<script>`标签解析为DOM节点后立即由浏览器执行。对于从外部URL加载的JavaScript代码，这意味着代码一旦加载就会立即执行。
- en: This default behavior causes problems if the rendering pipeline hasn’t finished
    parsing the HTML document; the JavaScript code will attempt to interact with page
    elements that may not yet exist in the DOM. To allow for this, `<script>` tags
    are often marked with a `defer` attribute. This causes the JavaScript to execute
    only when the entire DOM has been constructed.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果渲染管道尚未完成解析 HTML 文档，这种默认行为会引发问题；JavaScript 代码将尝试与可能尚未存在于 DOM 中的页面元素进行交互。为了避免这种情况，`<script>`
    标签通常会标记 `defer` 属性。这会导致 JavaScript 仅在整个 DOM 构建完成后才执行。
- en: 'As you would imagine, the fact that browsers eagerly execute any JavaScript
    code they come across has security implications. A hacker’s end goal is often
    the remote execution of code on another user’s machine, and the internet makes
    this goal much easier, as it’s rare to find a computer that isn’t connected to
    the network in some way. For this reason, modern browsers heavily restrict JavaScript
    with the *browser security model*. This dictates that JavaScript code must be
    executed within a *sandbox*, where it’s *not* permitted to perform any of the
    following actions:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所想象的那样，浏览器会急切地执行它遇到的任何 JavaScript 代码，这带来了安全隐患。黑客的最终目标通常是在另一台用户的机器上远程执行代码，而互联网使这一目标变得更容易，因为很少有计算机不是以某种方式连接到网络。因此，现代浏览器通过*浏览器安全模型*严格限制
    JavaScript。这一模型规定，JavaScript 代码必须在一个*沙箱*中执行，在这里，它*不能*执行以下任何操作：
- en: Start new processes or access other existing processes.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动新进程或访问其他现有进程。
- en: Read arbitrary chunks of system memory. As a *managed memory language*, JavaScript
    can’t read memory outside its sandbox.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取任意的系统内存块。作为一个*托管内存语言*，JavaScript 无法读取其沙箱之外的内存。
- en: Access the local disk. Modern browsers allow websites to store small amounts
    of data locally, but this storage is abstracted from the filesystem itself.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问本地磁盘。现代浏览器允许网站在本地存储少量数据，但这种存储被从文件系统本身进行了抽象。
- en: Access the operating system’s network layer.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问操作系统的网络层。
- en: Call operating system functions.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用操作系统功能。
- en: 'JavaScript executing in the browser sandbox *is* permitted to do the following
    actions:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器沙箱中执行的 JavaScript *被允许*执行以下操作：
- en: Read and manipulate the DOM of the current web page.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取和操作当前网页的 DOM。
- en: Listen to and respond to user actions on the current page by registering event
    listeners.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过注册事件监听器，监听并响应当前页面上用户的操作。
- en: Make HTTP calls on behalf of the user.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代表用户发起 HTTP 请求。
- en: Open new web pages or refresh the URL of the current page, but only in response
    to a user action.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开新的网页或刷新当前页面的 URL，但仅能响应用户的操作。
- en: Write new entries to the browser history and go backward and forward in history.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向浏览器历史记录中写入新条目，并在历史记录中向前和向后导航。
- en: Ask for the user’s location. For example, “Google Maps would like to use your
    location.”
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求用户的位置信息。例如，“Google Maps 想要使用您的位置。”
- en: Ask permission to send desktop notifications.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求发送桌面通知的权限。
- en: Even with these restrictions, an attacker who can inject malicious JavaScript
    into your web page can still do a lot of harm by using cross-site scripting to
    read credit card details or credentials as a user enters them. Even tiny amounts
    of injected JavaScript pose a threat, because injected code can add `<script>`
    tags in the DOM to load a malicious payload. We’ll look at how to protect against
    this type of cross-site scripting attack in [Chapter 7](ch07.xhtml#ch07).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有这些限制，攻击者仍然可以通过将恶意 JavaScript 注入到你的网页中，利用跨站脚本攻击来读取用户输入的信用卡信息或凭证。即使是少量注入的 JavaScript
    代码也构成威胁，因为注入的代码可以在 DOM 中添加 `<script>` 标签来加载恶意有效载荷。我们将在[第 7 章](ch07.xhtml#ch07)中讨论如何防范这种类型的跨站脚本攻击。
- en: '**Before and After Rendering: Everything Else the Browser Does**'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**渲染前后：浏览器所做的一切**'
- en: 'A browser is much more than a rendering pipeline and a JavaScript engine. In
    addition to rendering HTML and executing JavaScript, modern browsers contain logic
    for many other responsibilities. Browsers connect with the operating system to
    resolve and cache DNS addresses, interpret and verify security certificates, encode
    requests in HTTPS if needed, and store and transmit cookies according to the web
    server’s instructions. To understand how these responsibilities fit together,
    let’s take a behind-the-scenes look at a user logging into Amazon:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器不仅仅是一个渲染管线和JavaScript引擎。除了渲染HTML和执行JavaScript，现代浏览器还包含了处理其他多项任务的逻辑。浏览器与操作系统连接以解析和缓存DNS地址，解释和验证安全证书，如果需要，使用HTTPS编码请求，并根据Web服务器的指示存储和传输cookie。为了理解这些责任是如何协调工作的，我们来看看用户登录Amazon的幕后过程：
- en: The user visits *[www.amazon.com](http://www.amazon.com)* in their favorite
    browser.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户在他们喜欢的浏览器中访问*[www.amazon.com](http://www.amazon.com)*。
- en: The browser attempts to resolve the domain (*[amazon.com](http://amazon.com)*)
    to an IP address. First, the browser consults the operating system’s DNS cache.
    If it finds no results, it asks the internet service provider to look in the provider’s
    DNS cache. In the unlikely event that nobody on the ISP has visited the Amazon
    website before, the ISP will resolve the domain at an authoritative DNS server.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器尝试将域名(*[amazon.com](http://amazon.com)*)解析为IP地址。首先，浏览器查询操作系统的DNS缓存。如果没有结果，它会请求互联网服务提供商（ISP）查看提供商的DNS缓存。如果ISP中的任何人之前没有访问过Amazon网站，ISP将通过权威DNS服务器来解析该域名。
- en: Now that it has resolved the IP address, the browser attempts to initiate a
    TCP handshake with the server corresponding to the IP address in order to establish
    a secure connection.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在浏览器已经解析了IP地址，尝试与对应IP地址的服务器发起TCP握手，以建立安全连接。
- en: Once the TCP session has been established, the browser constructs an HTTP `GET`
    request to *[www.amazon.com](http://www.amazon.com)*. TCP splits the HTTP request
    into packets and sends them to the server to be reassembled.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦TCP会话建立，浏览器会构建一个HTTP `GET`请求发送到*[www.amazon.com](http://www.amazon.com)*。TCP将HTTP请求拆分为数据包并将其发送到服务器进行重组。
- en: At this point, the HTTP conversation upgrades to HTTPS to ensure secure communication.
    The browser and server undertake a TLS handshake, agree on an encryption cypher,
    and exchange encryption keys.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此时，HTTP会话升级为HTTPS以确保安全通信。浏览器和服务器进行TLS握手，商定加密算法，并交换加密密钥。
- en: The server uses the secure channel to send back an HTTP response containing
    HTML of the Amazon front page. The browser parses and displays the page, typically
    triggering many other HTTP `GET` requests.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器通过安全通道返回包含Amazon首页HTML的HTTP响应。浏览器解析并显示该页面，通常会触发多个其他HTTP `GET`请求。
- en: The user navigates to the login page, enters their login credentials, and submits
    the login form, which generates a `POST` request to the server.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户进入登录页面，输入登录凭证并提交登录表单，生成一个`POST`请求发送到服务器。
- en: The server validates the login credentials and establishes a session by returning
    a `Set-Cookie` header in the response. The browser stores the cookie for the prescribed
    time, and sends it back with subsequent requests to Amazon.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器验证登录凭证并通过返回`Set-Cookie`头部信息来建立会话。浏览器将这个cookie存储在规定的时间内，并在后续请求中发送给Amazon。
- en: After all of this happens, the user can access their Amazon account.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些完成后，用户可以访问他们的Amazon账户。
- en: '**Summary**'
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: This chapter reviewed how browsers transform the HTML used to describe web pages
    into the interactive, visual representations you see onscreen. The browser’s rendering
    pipeline parses HTML documents into a Document Object Model (DOM), applies styling
    information from Cascading Style Sheets (CSS) files, and then lays out the DOM
    nodes onscreen.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 本章回顾了浏览器如何将用来描述网页的HTML转换为你在屏幕上看到的互动、视觉化展示。浏览器的渲染管线将HTML文档解析为文档对象模型（DOM），应用来自层叠样式表（CSS）文件的样式信息，然后在屏幕上布局DOM节点。
- en: 'You also learned about the browser security model. The browser executes JavaScript
    included in `<script>` tags under strict security rules. You also reviewed a simple
    HTTP conversation illustrating the browser’s many other responsibilities beyond
    rendering pages: reconstructing HTTP from TCP packets, verifying security certificates
    and securing communication using HTTPS, and storing and transmitting cookies.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你还了解了浏览器安全模型。浏览器在严格的安全规则下执行`<script>`标签中的JavaScript。你还回顾了一个简单的HTTP对话，展示了浏览器在呈现页面之外的许多其他职责：从TCP数据包重建HTTP、验证安全证书并使用HTTPS确保通信安全，以及存储和传输Cookies。
- en: 'In the next chapter, you’ll look at the other end of the HTTP conversation:
    the web server.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将了解HTTP对话的另一端：Web服务器。
