["```\nPrelude> 3 > 4\nFalse\n```", "```\nstepFunction :: Double -> Double\nstepFunction x = if x <= 0\n                 then 0\n                 else 1\n```", "```\nPrelude> not False\nTrue\n```", "```\nPrelude> not True\nFalse\n```", "```\nPrelude> :t not\nnot :: Bool -> Bool\n```", "```\nPrelude> True || False && True\nTrue\n```", "```\nticTacToeMarker :: Char\nticTacToeMarker = 'X'\n\nnewLine :: Char\nnewLine = '\\n'\n```", "```\nhello :: String\nhello = \"Hello, world!\"\n\nerrorMessage :: String\nerrorMessage = \"Can't take the square root of a Boolean!\"\n```", "```\nPrelude> 10^18 :: Int\n1000000000000000000\nPrelude> 10^18 :: Integer\n1000000000000000000\nPrelude> 10^19 :: Int\n-8446744073709551616\nPrelude> 10^19 :: Integer\n10000000000000000000\n```", "```\nisX :: Char -> Bool\nisX c = c == 'X'\n```", "```\nisX c = (c == 'X')\n```", "```\nPrelude> :l FunctionType.hs\n[1 of 1] Compiling Main            ( FunctionType.hs, interpreted )\nOk, one module loaded.\n```", "```\n*Main> :t isX\nisX :: Char -> Bool\n```", "```\n*Main> :t isX 't'\nisX 't' :: Bool\n```", "```\n*Main> isX 't'\nFalse\n```", "```\nbagFeeMessage :: Bool -> String\nbagFeeMessage checkingBags = if checkingBags\n                             then \"There is a $100 fee.\"\n                             else \"There is no fee.\"\n```", "```\nbagFeeMessage2 :: Bool -> String\nbagFeeMessage2 checkingBags = case checkingBags of\n                                False -> \"There is no fee.\"\n                                True  -> \"There is a $100 fee.\"\n```", "```\nbagFeeMessage3 :: Bool -> String\nbagFeeMessage3 False = \"There is no fee.\"\nbagFeeMessage3 True  = \"There is a $100 fee.\"\n```", "```\nisXorY :: Char -> Bool\n```", "```\nbagFee :: Bool -> Int\n```", "```\ngreaterThan50 :: Integer -> Bool\n```", "```\namazingCurve :: Int -> Int\n```", "```\ncircleRadius = 3.5\n\ncot x = 1 / tan x\n\nfe epsilon = epsilon * tan (epsilon * pi / 2)\n\nfo epsilon = -epsilon * cot (epsilon * pi / 2)\n\ng nu epsilon = sqrt (nu**2 - epsilon**2)\n```"]