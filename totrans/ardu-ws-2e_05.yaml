- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Numbers, Variables, and Arithmetic
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数字、变量与算术
- en: In this chapter you will
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章你将学习：
- en: Generate random numbers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成随机数
- en: Create electronic dice
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建电子骰子
- en: Learn about binary numbers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习二进制数字
- en: Use shift-register integrated circuits (ICs) to get more digital output pins
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用移位寄存器集成电路（IC）获取更多的数字输出引脚
- en: Test your knowledge of binary numbers with a quiz
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过测验测试你对二进制数字的了解
- en: Learn about arrays of variables
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习变量数组
- en: Display numbers on seven-segment LED modules
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在七段 LED 模块上显示数字
- en: Learn how to use the modulo math function
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用取模数学函数
- en: Create a digital thermometer
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个数字温度计
- en: You will learn a wide variety of useful new functions that will create more
    project options, including random number generation, new kinds of math functions,
    and variable storage in ordered lists called *arrays*. Furthermore, you will learn
    how to use LED display modules in numeric form to display data and simple images.
    Finally, we’ll combine these tools to create a game, a digital thermometer, and
    more.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学习到许多有用的新函数，这些函数将创造更多项目选项，包括随机数生成、新类型的数学函数和变量存储在称为 *数组* 的有序列表中。此外，你还将学习如何使用
    LED 显示模块以数字形式显示数据和简单的图像。最后，我们将结合这些工具来创建一个游戏，一个数字温度计等等。
- en: Generating Random Numbers
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成随机数
- en: A program’s ability to generate random numbers can be very useful in games and
    effects. For example, you can use random numbers to play a dice or lottery game,
    create lighting effects with LEDs, or create visual or auditory effects for a
    quiz game with the Arduino. Unfortunately, the Arduino can’t choose a purely random
    number by itself. You have to help it by providing a *seed*, an arbitrary starting
    number used in the calculations to generate a random number.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 程序生成随机数的能力在游戏和效果中非常有用。例如，你可以使用随机数来玩骰子或彩票游戏，创建 LED 灯光效果，或为 Arduino 的测验游戏创建视觉或听觉效果。不幸的是，Arduino
    本身不能选择纯随机的数字。你需要通过提供一个 *种子* 来帮助它，这个种子是用于计算生成随机数的任意起始数字。
- en: Using Ambient Current to Generate a Random Number
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用环境电流生成随机数
- en: 'The easiest way to generate a random number with the Arduino is to write a
    program that reads the voltage from a free (disconnected) analog pin (for example,
    analog pin 0) with this line in `void setup()`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Arduino 生成随机数的最简单方法是编写一个程序，读取来自空闲（断开连接的）模拟引脚的电压（例如，模拟引脚 0），在 `void setup()`
    中加入以下这一行：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Even when nothing is wired to an analog input on the Arduino, static electricity
    in the environment creates a tiny, measurable voltage. The amount of this voltage
    is quite random. We can use this measure of ambient voltage as our seed to generate
    a random number and then allocate it to an integer variable using the `random(``lower,
    upper``)` function. Furthermore, we can use the parameters `lower` and `upper`
    to set the lower and upper limits of the range for the random number. For example,
    to generate a random number between 100 and 1,000, you would use the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在 Arduino 的模拟输入上没有任何接线，环境中的静电也会产生微小的、可测量的电压。这个电压的量是相当随机的。我们可以利用这种环境电压作为随机数生成的种子，然后通过
    `random(``lower, upper``)` 函数将其分配给一个整数变量。此外，我们可以使用参数 `lower` 和 `upper` 来设置随机数范围的下限和上限。例如，要生成一个介于
    100 和 1,000 之间的随机数，你可以使用以下代码：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We’ve used the number 1,001 rather than 1,000 because the upper limit is *exclusive*,
    meaning it’s not included in the range.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用数字 1,001 而不是 1,000，因为上限是 *不包括* 在内的，即它不在范围内。
- en: 'To generate a random number between 0 and some number, you can just enter the
    upper limit. Here’s how you would generate a random number between 0 and 6:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成一个介于 0 和某个数字之间的随机数，你只需要输入上限。以下是如何生成一个介于 0 和 6 之间的随机数：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The example sketch in [Listing 6-1](#listing6-1) would generate a random number
    between 0 and 1,000 and another random number between 10 and 50.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 6-1](#listing6-1) 中的示例草图将生成一个介于 0 和 1,000 之间的随机数，和另一个介于 10 和 50 之间的随机数。'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 6-1: A random number generator'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 6-1：一个随机数生成器
- en: '[Figure 6-1](#figure6-1) shows the result of [Listing 6-1](#listing6-1) in
    the Serial Monitor.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 6-1](#figure6-1) 显示了 [列表 6-1](#listing6-1) 在串行监视器中的结果。'
- en: '![f06001](image_fi/500587c06/f06001.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![f06001](image_fi/500587c06/f06001.png)'
- en: 'Figure 6-1: Output from [Listing 6-1](#listing6-1)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6-1：来自 [列表 6-1](#listing6-1) 的输出
- en: Now that you know how to generate random numbers, let’s put that knowledge to
    good use by creating an electronic die.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何生成随机数，让我们通过创建电子骰子来好好利用这项知识。
- en: 'Project #15: Creating an Electronic Die'
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #15：创建一个电子骰子'
- en: Our goal is to light one of six LEDs randomly to mimic the throw of a die. We’ll
    choose a random number between 1 and 6, then turn on the corresponding LED to
    indicate the result. We’ll create a function to select one of six LEDs on the
    Arduino randomly and to keep the LED on for a certain period of time. When the
    Arduino running the sketch is turned on or reset, it should show random LEDs rapidly
    for a specified period of time and then gradually slow the flashing until the
    final LED is lit. The LED matching the resulting randomly chosen number will stay
    on until the Arduino is reset or turned off.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是随机点亮六个 LED 中的一个，模拟投掷骰子的过程。我们将选择一个介于 1 和 6 之间的随机数字，然后点亮相应的 LED 来表示结果。我们将创建一个函数，随机选择
    Arduino 上的六个 LED 中的一个，并让该 LED 保持亮起一段时间。当运行草图的 Arduino 打开或重置时，它应该快速显示随机的 LED 一段指定的时间，然后逐渐减慢闪烁，直到最终
    LED 被点亮。与结果匹配的随机选择的 LED 将保持亮起，直到 Arduino 被重置或关闭。
- en: The Hardware
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: 'To build the die, we’ll need the following hardware:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建这个骰子，我们需要以下硬件：
- en: Six LEDs of any color (LED1 to LED6)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 六个任意颜色的 LED（LED1 到 LED6）
- en: One 560 Ω resistor (R1)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 560 Ω 电阻（R1）
- en: Various connecting wires
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种连接线
- en: One medium-sized breadboard
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个中型面包板
- en: Arduino and USB cable
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino 和 USB 电缆
- en: The Schematic
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原理图
- en: Because only one LED will be lit at a time, a single current-limiting resistor
    can go between the cathodes of the LEDs and GND. [Figure 6-2](#figure6-2) shows
    the schematic for our die.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于一次只有一个 LED 会亮起，所以可以在 LED 的阴极和 GND 之间放置一个限流电阻。[图 6-2](#figure6-2) 显示了我们的骰子原理图。
- en: '![f06002](image_fi/500587c06/f06002.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![f06002](image_fi/500587c06/f06002.png)'
- en: 'Figure 6-2: Schematic for Project 15'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6-2：项目 15 的原理图
- en: The Sketch
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'Here’s the sketch for our die:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们骰子的草图：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here we use a loop in `void setup()` to activate the digital output pins. The
    function `randomLED()` receives an integer that is used in the `delay()` function
    at 1 to keep the LED turned on for the selected time. If the value of the delay
    received at 2 is `0`, then the function keeps the LED turned on indefinitely,
    because we use
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在 `void setup()` 中使用循环来激活数字输出引脚。`randomLED()` 函数接收一个整数，该整数用于 `delay()`
    函数中的延迟 1，确保 LED 在选定的时间内保持亮起。如果在延迟 2 中接收到的值是 `0`，则该函数将使 LED 永远保持亮起，因为我们使用的是
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: at 3, which loops forever, because 1 is always 1.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 3 行，它会无限循环，因为 1 始终为 1。
- en: 'To “roll the die,” we reset the Arduino to restart the sketch. To gradually
    slow the change in the LEDs before the final value is displayed, we first display
    a random LED 100 times for 50 milliseconds each time. Then, at 4 we slow down
    the flashing by increasing the delay between LED flashes from 100 to 1,000 milliseconds,
    with each flash lasting 100 milliseconds. The purpose of this is to simulate the
    “slowing down” of a die before it finally settles on a value. With the last line,
    the Arduino displays the outcome of the roll by keeping one LED lit:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要“投掷骰子”，我们重置 Arduino 来重新启动草图。为了在最终值显示之前逐渐减慢 LED 的变化，我们首先以每次 50 毫秒的间隔随机显示一个 LED
    100 次。然后，在第 4 行，我们通过将 LED 闪烁之间的延迟从 100 毫秒增加到 1,000 毫秒来减慢闪烁，每次闪烁持续 100 毫秒。这样做的目的是模拟骰子“减速”的过程，直到它最终停留在某个值上。最后一行，Arduino
    通过保持一个 LED 点亮来显示投掷结果：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Modifying the Sketch
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改草图
- en: We can tinker with this project in many ways. For example, we could add another
    six LEDs to roll two dice at once. Or display the result using only the built-in
    LED, by blinking it a number of times to indicate the result of the roll. Or use
    a button to roll the dice again. Use your imagination and new skills to have some
    fun!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以以多种方式修改这个项目。例如，我们可以再增加六个 LED 来同时投掷两个骰子，或者仅用内置 LED 显示结果，通过闪烁若干次来表示投掷的结果。或者使用按钮重新投掷骰子。发挥你的想象力和新技能，来玩得开心吧！
- en: A Quick Course in Binary
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 二进制快速入门
- en: Most children learn to count using thebase-10system, but computers (including
    the Arduino) count using the binarynumber system.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数孩子使用十进制系统来学习计数，但计算机（包括 Arduino）使用二进制数字系统来计数。
- en: Binary Numbers
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 二进制数字
- en: '*Binary numbers* consist of only 1s and 0s—for example, 10101010\. In binary,
    each digit from right to left represents 2 to the power of the column number in
    which it appears (which increases from right to left). The products in each column
    are then added to determine the value of the number.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*二进制数字* 仅由 1 和 0 组成——例如，10101010。在二进制中，从右到左的每个数字代表该列数字的 2 的幂（从右到左依次增加）。每一列的积相加后，得到数字的值。'
- en: 'For example, consider the binary number 10101010, as shown in [Table 6-1](#table6-1).
    To convert the number 10101010 in binary to base 10, we add the totals in each
    column as listed in the bottom row of the table:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑二进制数 10101010，如 [表 6-1](#table6-1) 所示。要将二进制数 10101010 转换为十进制，我们将表格底行中列出的每一列的总和相加：
- en: 128 + 0 + 32 + 0 + 8 + 0 + 2 + 0
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 128 + 0 + 32 + 0 + 8 + 0 + 2 + 0
- en: The sum is 170, and therefore the binary number 10101010 equals 170 in base
    10\. A binary number with eight columns (or *bits*) holds 1 *byte* of data; 1
    byte of data can have a numerical value between 0 and 255\. The leftmost bit is
    referred to as the *most significant bit (MSB)*, and the rightmost is the *least
    significant bit (LSB)*.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 总和为 170，因此二进制数 10101010 在十进制中等于 170。一个有八列（或 *位*）的二进制数包含 1 个 *字节* 的数据；1 字节的数据可以有从
    0 到 255 的数值。最左边的位被称为 *最重要位（MSB）*，最右边的是 *最不重要位（LSB）*。
- en: 'Table 6-1: Binary to Base-10 Number Conversion Example'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6-1：二进制到十进制数字转换示例
- en: '| **2⁷** | **2⁶** | **2⁵** | **2⁴** | **2³** | **2²** | **2¹** | **2⁰** |  |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| **2⁷** | **2⁶** | **2⁵** | **2⁴** | **2³** | **2²** | **2¹** | **2⁰** |  |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| 1 | 0 | 1 | 0 | 1 | 0 | 1 | 0 | Binary |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 0 | 1 | 0 | 1 | 0 | 1 | 0 | 二进制 |'
- en: '| 128 | 64 | 32 | 16 | 8 | 4 | 2 | 1 | Base 10 |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 128 | 64 | 32 | 16 | 8 | 4 | 2 | 1 | 十进制 |'
- en: Binary numbers are great for storing certain types of data, such as on/off patterns
    for LEDs, true/false settings, and the statuses of digital outputs. Binary numbers
    are the building blocks of all types of data in computers.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制数非常适合存储某些类型的数据，例如 LED 的开/关模式、真/假设置以及数字输出的状态。二进制数是计算机中所有类型数据的构建块。
- en: Byte Variables
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字节变量
- en: 'One way we can store binary numbers is by using a *byte variable*. For example,
    we can create the byte variable `outputs` using the following code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 存储二进制数的一种方法是使用 *字节变量*。例如，我们可以使用以下代码创建字节变量 `outputs`：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `B` in front of the number tells Arduino to read the number as a binary
    number (in this case, 11111111) instead of its base-10 equivalent of 255\. [Listing
    6-2](#listing6-2) demonstrates this further.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`B` 前缀告诉 Arduino 将数字作为二进制数读取（在此情况下为 11111111），而不是其十进制等价物 255。 [列表 6-2](#listing6-2)
    进一步演示了这一点。'
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Listing 6-2: Binary number demonstration'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 6-2：二进制数演示
- en: We display byte variables as base-10 numbers using `DEC` 1 or as binary numbers
    using `BIN` 2 as part of the `Serial.print()` function. After uploading the sketch,
    you should see output in the Serial Monitor similar to that shown in [Figure 6-3](#figure6-3).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过 `DEC` 1 以十进制数显示字节变量，或者通过 `BIN` 2 以二进制数显示字节变量，作为 `Serial.print()` 函数的一部分。上传代码后，您应该能在串口监视器中看到类似于
    [图 6-3](#figure6-3) 所示的输出。
- en: '![f06003](image_fi/500587c06/f06003.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![f06003](image_fi/500587c06/f06003.png)'
- en: 'Figure 6-3: Output from [Listing 6-2](#listing6-2)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6-3：[列表 6-2](#listing6-2) 输出
- en: Increasing Digital Outputs with Shift Registers
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用移位寄存器增加数字输出
- en: The Arduino board has 13 digital pins that we can use as outputs—but sometimes
    13 just isn’t enough. To add outputs, we can use a *shift register* and still
    have plenty of room left on the Arduino for outputs. A shift register is an integrated
    circuit (IC) with eight digital output pins that can be controlled by sending
    a byte of data to the IC. For our projects, we will be using the 74HC595 shift
    register shown in [Figure 6-4](#figure6-4).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino 板有 13 个数字引脚可以用作输出——但有时候 13 个不够用。为了增加输出，我们可以使用 *移位寄存器*，并且仍然可以在 Arduino
    上留下大量空余空间用于输出。移位寄存器是一个集成电路（IC），它具有八个数字输出引脚，可以通过向 IC 发送一字节的数据来控制它。在我们的项目中，我们将使用
    [图 6-4](#figure6-4) 中显示的 74HC595 移位寄存器。
- en: '![f06004](image_fi/500587c06/f06004.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![f06004](image_fi/500587c06/f06004.png)'
- en: 'Figure 6-4: The 74HC595 shift register IC'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6-4：74HC595 移位寄存器 IC
- en: The 74HC595 shift register has eight digital outputs that can operate like the
    Arduino digital output pins. The shift register itself takes up three Arduino
    digital output pins, so the net gain is five output pins.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 74HC595 移位寄存器具有八个数字输出，可以像 Arduino 数字输出引脚一样操作。移位寄存器本身占用了三个 Arduino 数字输出引脚，因此净增的是五个输出引脚。
- en: 'The principle behind the shift register is simple: we send 1 byte of data (8
    bits) to the shift register, and it turns on or off the matching eight outputs
    based on the 1 byte of data. The bits representing the byte of data match the
    output pins in order from highest to lowest, so the leftmost bit of the data represents
    output pin 7 of the shift register, and the rightmost bit of the data represents
    output pin 0\. For example, if we send `B10000110` to the shift register, then
    it will turn on outputs 1, 2, and 7 and will turn off outputs 0 and 3 to 6 until
    the next byte of data is received or the power is turned off.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 移位寄存器的原理很简单：我们向移位寄存器发送1字节数据（8位），它根据该1字节数据的值打开或关闭相应的八个输出。数据的位与输出引脚按从高到低的顺序匹配，因此数据的最左边位表示移位寄存器的输出引脚7，最右边的位表示输出引脚0。例如，如果我们将`B10000110`发送到移位寄存器，它将打开输出1、2和7，并关闭输出0和3到6，直到接收到下一个字节数据或电源被关闭。
- en: More than one shift register can be connected together to provide an extra eight
    digital output pins for every shift register attached to the same three Arduino
    pins; this makes shift registers very convenient when you want to control lots
    of LEDs. Let’s do that now by creating a binary number display.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将多个移位寄存器连接在一起，为每个连接到相同三个Arduino引脚的移位寄存器提供额外的八个数字输出引脚；当你需要控制大量LED时，移位寄存器非常方便。现在让我们通过创建一个二进制数字显示来实现这一点。
- en: 'Project #16: Creating an LED Binary Number Display'
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目#16：创建一个LED二进制数字显示器
- en: In this project, we’ll use eight LEDs to display binary numbers from 0 to 255\.
    Our sketch will use a `for` loop to count from 0 to 255 and will send each value
    to the shift register, which will use LEDs to display the binary equivalent of
    each number.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将使用八个LED来显示从0到255的二进制数字。我们的草图将使用一个`for`循环从0到255计数，并将每个值发送到移位寄存器，移位寄存器将使用LED显示每个数字的二进制等效值。
- en: The Hardware
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: 'The following hardware is required:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 需要以下硬件：
- en: One 74HC595 shift register IC
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个74HC595移位寄存器IC
- en: Eight LEDs (LED1 to LED8)
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 八个LED（LED1至LED8）
- en: Eight 560 Ω resistors (R1 to R8)
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 八个560Ω电阻（R1至R8）
- en: One breadboard
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个面包板
- en: Various connecting wires
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种连接线
- en: Arduino and USB cable
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino和USB连接线
- en: The Schematic
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 电路图
- en: '[Figure 6-5](#figure6-5) shows the schematic symbol for the 74HC595.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[图6-5](#figure6-5)展示了74HC595的电路符号。'
- en: '![f06005](image_fi/500587c06/f06005.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![f06005](image_fi/500587c06/f06005.png)'
- en: 'Figure 6-5: 74HC595 schematic symbol'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图6-5：74HC595电路符号
- en: 'There are 16 pins on our shift register:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的移位寄存器有16个引脚：
- en: Pins 15 and 1 to 7 are the eight output pins that we control (labeled *Q0* to
    *Q7*, respectively).
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引脚15和1到7是我们控制的八个输出引脚（分别标记为*Q0*到*Q7*）。
- en: Q7 outputs the first bit sent to the shift register and Q0 outputs the last.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Q7输出发送到移位寄存器的第一个位，Q0输出最后一个位。
- en: Pin 8 connects to GND.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引脚8连接到GND。
- en: Pin 9 is called *data out* and is used to send data to another shift register
    if one is present.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引脚9称为*数据输出*，用于将数据发送到另一个移位寄存器（如果存在的话）。
- en: Pin 10 is always connected to 5 V (for example, the 5 V connector on the Arduino).
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引脚10始终连接到5V（例如，Arduino上的5V连接器）。
- en: Pins 11 and 12 are called *clock* and *latch*.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引脚11和12分别称为*时钟*和*锁存*。
- en: Pin 13 is called *output enable* and is usually connected to GND.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引脚13称为*输出使能*，通常连接到GND。
- en: Pin 14 is for incoming bit data sent from the Arduino.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引脚14用于接收来自Arduino的输入位数据。
- en: 'Pin 16 is used for power: 5 V from the Arduino.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引脚16用于电源：来自Arduino的5V电压。
- en: To give you a sense of the way the pins are oriented, the semicircular notch
    on the left end of the body of the shift register IC shown in [Figure 6-4](#figure6-4)
    lies between pins 1 and 16.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你了解引脚的布局，移位寄存器IC左端的半圆形凹槽位于引脚1和16之间，正如[图6-4](#figure6-4)所示。
- en: The pins are numbered sequentially around the body in a counterclockwise direction,
    as shown in [Figure 6-6](#figure6-6), the schematic for our LED binary number
    display.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 引脚按顺时针方向依次编号，正如在[图6-6](#figure6-6)所示，这张图展示了我们的LED二进制数字显示电路图。
- en: '![f06006](image_fi/500587c06/f06006.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![f06006](image_fi/500587c06/f06006.png)'
- en: 'Figure 6-6: Schematic for Project 16'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图6-6：项目16的电路图
- en: The Sketch
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 程序草图
- en: 'And now for the sketch:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是草图：
- en: '[PRE9]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In this sketch, we set the three pins connected to the shift register as outputs
    in `void setup()` and then add a loop in `void loop()` that counts from 0 to 255
    and repeats. The magic lies inside the loop. When we send a byte of data (for
    example, 240, or `B11110000`) to the shift register in the `for` loop, three things
    happen:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个草图中，我们在`void setup()`中将连接到移位寄存器的三个引脚设置为输出，然后在`void loop()`中添加一个从 0 到 255
    的循环并重复。当我们在`for`循环中将一个数据字节（例如，240，或`B11110000`）发送到移位寄存器时，发生了三件事：
- en: The latch pin 12 is set to `LOW` (that is, a low signal is applied to it from
    the Arduino digital output pin 8). This is preparation for setting output pin
    12 to `HIGH`, which latches the data to the output pins after `shiftOut()` has
    completed its task.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锁存引脚 12 设置为`LOW`（即，从 Arduino 数字输出引脚 8 提供一个低电平信号）。这是为将输出引脚 12 设置为`HIGH`做准备，当`shiftOut()`完成其任务后，数据将被锁存到输出引脚。
- en: We send the byte of data (for example, `B11110000`) from Arduino digital pin
    6 to the shift register and tell the `shiftOut()` function from which direction
    to interpret the byte of data. For example, if we selected `LSBFIRST`, then LEDs
    1 to 4 would turn on and the others would turn off. If we used `MSBFIRST`, then
    LEDs 5 to 8 would turn on and the others would turn off.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将数据字节（例如，`B11110000`）从 Arduino 数字引脚 6 发送到移位寄存器，并告诉`shiftOut()`函数从哪个方向解释该数据字节。例如，如果我们选择了`LSBFIRST`，那么
    LED 1 到 4 会亮起，其它的会熄灭。如果我们使用`MSBFIRST`，那么 LED 5 到 8 会亮起，其它的会熄灭。
- en: Finally, the latch pin 12 is set to `HIGH` (5 V is applied to it). This tells
    the shift register that all the bits are shifted in and ready. At this point,
    the shift register alters its output to match the data received.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，锁存引脚 12 设置为`HIGH`（为其提供 5 V 电压）。这告诉移位寄存器所有的位已经移入并且准备好了。在此时，移位寄存器会调整其输出，以匹配接收到的数据。
- en: 'Project #17: Making a Binary Quiz Game'
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #17：制作二进制问答游戏'
- en: In this project, we’ll use random numbers, the Serial Monitor, and the circuit
    created in Project 16 to create a binary quiz game. The Arduino will display a
    random binary number using the LEDs, and then you will enter the decimal version
    of the binary number using the Serial Monitor. The Serial Monitor will tell you
    whether your answer is correct, and the game will continue with a new number.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将使用随机数、串口监视器以及项目 16 中创建的电路来制作一个二进制问答游戏。Arduino 将通过 LED 显示一个随机的二进制数，然后你将使用串口监视器输入该二进制数的十进制版本。串口监视器将告诉你答案是否正确，游戏将继续进行并显示一个新的数字。
- en: The Algorithm
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 算法
- en: The algorithm can be divided into three functions. The `displayNumber()` function
    will display a binary number using the LEDs. The `getAnswer()` function will receive
    a number from the Serial Monitor and display it to the user. Finally, the `checkAnswer()`
    function will compare the user’s number to the random number generated and display
    the correct/incorrect status, as well as the correct answer if the guess was incorrect.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法可以分为三个函数。`displayNumber()`函数将使用 LED 显示一个二进制数。`getAnswer()`函数将从串口监视器接收一个数字并显示给用户。最后，`checkAnswer()`函数将用户输入的数字与生成的随机数进行比较，并显示正确/错误状态，如果猜测错误，还会显示正确答案。
- en: The Sketch
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'The sketch generates a random number between 0 and 255, displays it in binary
    using the LEDs, asks the user for their answer, and then displays the result in
    the Serial Monitor. You’ve already seen all the functions used in the sketch,
    so although there’s a lot of code here, it should look familiar. We’ll dissect
    it with comments within the sketch and some commentary following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图会生成一个介于 0 和 255 之间的随机数，使用 LED 以二进制形式显示它，要求用户给出答案，然后在串口监视器中显示结果。你已经见过草图中使用的所有函数，虽然这里有很多代码，但它应该看起来很熟悉。我们将在草图中通过注释和以下的解释来分析它：
- en: '[PRE10]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Let’s review how the sketch works. At 1, `void setup()` configures the digital
    output pins to use the shift register, starts the Serial Monitor, and seeds the
    random number generator. At 2, the custom function `displayNumber()` accepts a
    byte of data and sends it to the shift register, which uses LEDs to display the
    byte in binary form via the attached LEDs (as in Project 16). At 3, the custom
    function `getAnswer()` accepts a number from the user via the Serial Monitor (as
    in Project 14 in Chapter 5) and displays it, as shown in [Figure 6-7](#figure6-7).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下这个草图是如何工作的。在1，`void setup()`配置了数字输出引脚以使用移位寄存器，启动了串行监视器，并为随机数生成器提供了种子。在2，定制函数`displayNumber()`接受一个字节的数据并将其发送到移位寄存器，后者通过连接的LED以二进制形式显示该字节（如在项目16中）。在3，定制函数`getAnswer()`通过串行监视器接受用户输入的数字（如第5章项目14中所示），并显示出来，如[图6-7](#figure6-7)所示。
- en: The function `checkAnswer()` at 4 compares the number entered by the player
    in `getAnswer()` against the random number generated by the sketch in `void loop()`.
    The player is then advised of a correct or incorrect answer with corresponding
    binary and decimal values. Finally, in the main `void loop()` at 5 from which
    the program runs, the Arduino generates the random binary number for the quiz,
    calls the matching functions to display it with hardware, and then receives and
    checks the player’s answer.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在4，函数`checkAnswer()`将玩家在`getAnswer()`中输入的数字与草图在`void loop()`中生成的随机数字进行比较。然后，程序会根据二进制和十进制值提示玩家是否答对。最后，在程序运行的主`void
    loop()`中，Arduino生成用于测验的随机二进制数，调用匹配的函数通过硬件显示出来，然后接收并检查玩家的答案。
- en: '[Figure 6-7](#figure6-7) shows the game in play in the Serial Monitor.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[图6-7](#figure6-7)展示了串行监视器中的游戏画面。'
- en: '![f06007](image_fi/500587c06/f06007.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![f06007](image_fi/500587c06/f06007.png)'
- en: 'Figure 6-7: Project 17 in play'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图6-7：项目17进行中
- en: Arrays
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组
- en: An *array* is a set of variables or values grouped together so that they can
    be referenced as a whole. When dealing with lots of related data, you’ll find
    it a good idea to use arrays to keep your data organized.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '*数组*是一组变量或值，它们被分组在一起，以便可以作为一个整体来引用。当处理大量相关数据时，使用数组来保持数据的组织是一个不错的主意。'
- en: Defining an Array
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义一个数组
- en: 'Each item in an array is called an *element*. For example, suppose six `float`
    variables contain temperatures taken over the last six hours; instead of giving
    them all separate names, we can define an array called `temperatures` with six
    elements like this:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 数组中的每一项称为*元素*。例如，假设有六个`float`变量，存储过去六小时内的温度数据；与其为每个变量命名，我们可以定义一个名为`temperatures`的数组，包含六个元素，代码如下：
- en: '[PRE11]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can also insert values when defining the array. When we do that, we don’t
    need to define the array size. Here’s an example:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在定义数组时插入值。这样做时，我们不需要定义数组的大小。以下是一个例子：
- en: '[PRE12]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Notice that this time, we didn’t explicitly define the size of the array within
    the square brackets (`[]`); instead, its size is deduced based on the number of
    elements set by the values inside the curly brackets (`{}`). Note that arrays
    of any size can only contain one type of variable.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这次我们没有在方括号（`[]`）内显式定义数组的大小；相反，它的大小是根据花括号（`{}`）内设置的元素数量来推断的。请注意，任何大小的数组只能包含一种类型的变量。
- en: Referring to Values in an Array
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引用数组中的值
- en: 'We count the elements in an array beginning from the left and starting from
    0; the `temperatures[]` array has elements numbered 0 to 5\. We can refer to individual
    values within an array by inserting the number of the element in the square brackets.
    For example, to change the first element in `temperatures[]` (currently `11.1`)
    to `12.34`, we would use this:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从左开始，以0为起点来计数数组中的元素；`temperatures[]`数组的元素编号从0到5。我们可以通过在方括号中插入元素的编号来引用数组中的单个值。例如，要将`temperatures[]`中的第一个元素（当前值为`11.1`）更改为`12.34`，我们可以使用以下代码：
- en: '[PRE13]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Writing to and Reading from Arrays
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向数组写入和从数组读取
- en: In [Listing 6-3](#listing6-3), we demonstrate writing values to and reading
    values from an array of five elements. The first `for` loop in the sketch writes
    a random number into each of the array’s elements, and the second `for` loop retrieves
    the elements and displays them in the Serial Monitor.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在[列表6-3](#listing6-3)中，我们演示了向一个包含五个元素的数组写入和读取值。草图中的第一个`for`循环将一个随机数写入数组的每个元素，第二个`for`循环检索这些元素并在串行监视器中显示它们。
- en: '[PRE14]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Listing 6-3: Array read/write demonstration'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 列表6-3：数组读写演示
- en: '[Figure 6-8](#figure6-8) shows the output of this sketch in the Serial Monitor.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[图6-8](#figure6-8)展示了该草图在串行监视器中的输出。'
- en: '![f06008](image_fi/500587c06/f06008.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![f06008](image_fi/500587c06/f06008.png)'
- en: 'Figure 6-8: [Listing 6-3](#listing6-3) in action'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6-8：[清单 6-3](#listing6-3) 运行示例
- en: Now that you know how to use with binary numbers, shift registers, and arrays,
    it’s time to put that knowledge to use. In our next project, we’ll wire up some
    digital number displays.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了如何使用二进制数、移位寄存器和数组，是时候将这些知识付诸实践了。在我们的下一个项目中，我们将连接一些数字显示器。
- en: Seven-Segment LED Displays
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 七段 LED 显示器
- en: LEDs are fun, but there are limits to the kinds of data that can be displayed
    with individual lights. In this section, we’ll begin working with numeric digits
    in the form of seven-segment LED displays, as shown in [Figure 6-9](#figure6-9).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: LED 很有趣，但显示单一灯光的数据种类是有限的。在这一部分中，我们将开始使用七段 LED 显示器显示数字，如[图 6-9](#figure6-9)所示。
- en: '![f06009](image_fi/500587c06/f06009.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![f06009](image_fi/500587c06/f06009.png)'
- en: 'Figure 6-9: Seven-segment display modules'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6-9：七段显示模块
- en: These displays are perfect for displaying numbers, and that’s why you’ll find
    them used in digital alarm clocks, speedometers, and the like. Each module in
    a seven-segment LED display consists of eight LEDs. The modules are also available
    in different colors. To reduce the number of pins used by the display, all of
    the anodes or cathodes of the LEDs are connected together—these are called *common-anode*
    or *common-cathode* modules, respectively. Our projects will use common-cathode
    modules.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这些显示器非常适合显示数字，这就是为什么你会在数字闹钟、速度计等设备中看到它们的原因。每个七段 LED 显示模块由八个 LED 组成，模块也有不同的颜色。为了减少显示器使用的引脚数量，所有
    LED 的正极或负极都连接在一起——这些模块分别称为*共阳极*或*共阴极*模块。我们的项目将使用共阴极模块。
- en: The display’s LEDs are labeled *A* to *G* and *DP* (for the decimal point).
    There is an anode pin for each LED segment, and the cathodes are connected to
    one common cathode pin. The layout of seven-segment LED displays is always described
    as shown in [Figure 6-10](#figure6-10), with LED segment A at the top, B to its
    right, and so on. So, for example, if you wanted to display the number 7, then
    you would apply current to segments A, B, and C.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 显示器的 LED 被标记为*A* 到 *G* 和 *DP*（表示小数点）。每个 LED 段都有一个正极引脚，而负极连接到一个公共负极引脚。七段 LED
    显示的布局始终按照[图 6-10](#figure6-10)中所示的方式描述，LED 段 A 在顶部，B 在其右侧，以此类推。因此，例如，如果你想显示数字
    7，则需要给 A、B 和 C 段供电。
- en: The pins on each LED display module can vary, depending on the manufacturer,
    but they always follow the basic pattern shown in [Figure 6-10](#figure6-10).
    When you use one of these modules, always get the data sheet for the module from
    the retailer to help save you time determining which pins are which.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 LED 显示模块的引脚可能会有所不同，具体取决于制造商，但它们总是遵循[图 6-10](#figure6-10)中显示的基本模式。当你使用这些模块时，务必从零售商那里获取模块的数据手册，以帮助你节省确定哪些引脚是哪个的时间。
- en: We’ll use the schematic symbol shown in [Figure 6-11](#figure6-11) for our seven-segment
    LED display modules.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用[图 6-11](#figure6-11)中显示的原理图符号来表示我们的七段 LED 显示模块。
- en: '![f06010](image_fi/500587c06/f06010.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![f06010](image_fi/500587c06/f06010.png)'
- en: 'Figure 6-10: LED map for a typical seven-segment display module'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6-10：典型七段显示模块的 LED 图
- en: '![f06011](image_fi/500587c06/f06011.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![f06011](image_fi/500587c06/f06011.png)'
- en: 'Figure 6-11: Schematic symbol for a seven-segment display module'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6-11：七段显示模块的原理图符号
- en: Controlling the LED
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制 LED
- en: We’ll control the LED display using the method discussed in Project 17, by connecting
    pins A through DP to the shift register outputs Q0 to Q7\. Use the matrix shown
    in [Table 6-2](#table6-2) as a guide to help determine which segments to turn
    on and off to display a particular number or letter.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在项目 17 中讨论的方法，通过将引脚 A 到 DP 连接到移位寄存器输出 Q0 到 Q7 来控制 LED 显示。使用[表 6-2](#table6-2)中显示的矩阵作为指南，帮助确定哪些段需要打开或关闭，以显示特定的数字或字母。
- en: The top row in the matrix is the shift register output pin that controls the
    segments on the second row. Each row below this shows the digit that can be displayed
    with the corresponding binary and decimal value to send to the shift register.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵的第一行是控制第二行段的移位寄存器输出引脚。下面的每一行显示的是可以显示的数字，并包含发送到移位寄存器的相应二进制和十进制值。
- en: 'Table 6-2: Display Segment Matrix'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6-2：显示段矩阵
- en: '| **SR** | **Q0** | **Q1** | **Q2** | **Q3** | **Q4** | **Q5** | **Q6** | **Q7**
    |  |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| **SR** | **Q0** | **Q1** | **Q2** | **Q3** | **Q4** | **Q5** | **Q6** | **Q7**
    |  |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| **Segment** | **A** | **B** | **C** | **D** | **E** | **F** | **G** | **DP**
    | **Decimal** |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| **段** | **A** | **B** | **C** | **D** | **E** | **F** | **G** | **DP** |
    **小数点** |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| **0** | 1 | 1 | 1 | 1 | 1 | 1 | 0 | 0 | 252 |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| **0** | 1 | 1 | 1 | 1 | 1 | 1 | 0 | 0 | 252 |'
- en: '| **1** | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 96 |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| **1** | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 96 |'
- en: '| **2** | 1 | 1 | 0 | 1 | 1 | 0 | 1 | 0 | 218 |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| **2** | 1 | 1 | 0 | 1 | 1 | 0 | 1 | 0 | 218 |'
- en: '| **3** | 1 | 1 | 1 | 1 | 0 | 0 | 1 | 0 | 242 |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| **3** | 1 | 1 | 1 | 1 | 0 | 0 | 1 | 0 | 242 |'
- en: '| **4** | 0 | 1 | 1 | 0 | 0 | 1 | 1 | 0 | 102 |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| **4** | 0 | 1 | 1 | 0 | 0 | 1 | 1 | 0 | 102 |'
- en: '| **5** | 1 | 0 | 1 | 1 | 0 | 1 | 1 | 0 | 182 |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| **5** | 1 | 0 | 1 | 1 | 0 | 1 | 1 | 0 | 182 |'
- en: '| **6** | 1 | 0 | 1 | 1 | 1 | 1 | 1 | 0 | 190 |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| **6** | 1 | 0 | 1 | 1 | 1 | 1 | 1 | 0 | 190 |'
- en: '| **7** | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 224 |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| **7** | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 224 |'
- en: '| **8** | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 0 | 254 |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| **8** | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 0 | 254 |'
- en: '| **9** | 1 | 1 | 1 | 1 | 0 | 1 | 1 | 0 | 246 |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| **9** | 1 | 1 | 1 | 1 | 0 | 1 | 1 | 0 | 246 |'
- en: '| **A** | 1 | 1 | 1 | 0 | 1 | 1 | 1 | 0 | 238 |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| **A** | 1 | 1 | 1 | 0 | 1 | 1 | 1 | 0 | 238 |'
- en: '| **B** | 0 | 0 | 1 | 1 | 1 | 1 | 1 | 0 | 62 |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| **B** | 0 | 0 | 1 | 1 | 1 | 1 | 1 | 0 | 62 |'
- en: '| **C** | 1 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 156 |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| **C** | 1 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 156 |'
- en: '| **D** | 0 | 1 | 1 | 1 | 1 | 0 | 1 | 0 | 122 |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| **D** | 0 | 1 | 1 | 1 | 1 | 0 | 1 | 0 | 122 |'
- en: '| **E** | 1 | 0 | 0 | 1 | 1 | 1 | 1 | 0 | 158 |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| **E** | 1 | 0 | 0 | 1 | 1 | 1 | 1 | 0 | 158 |'
- en: '| **F** | 1 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 142 |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| **F** | 1 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 142 |'
- en: For example, to display the digit 7, as shown in [Figure 6-12](#figure6-12),
    we need to turn on LED segments A, B, and C, which correspond to the shift register
    outputs Q0, Q1, and Q2\. Therefore, we will send the byte `B1110000` into the
    shift register (with `shiftOut()` set to `LSBFIRST`) to turn on the first three
    outputs that match the desired LEDs on the module.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要显示数字 7，如 [图 6-12](#figure6-12) 所示，我们需要点亮 LED 段 A、B 和 C，它们分别对应移位寄存器的输出 Q0、Q1
    和 Q2。因此，我们将字节 `B1110000` 发送到移位寄存器（`shiftOut()` 设置为 `LSBFIRST`），以点亮与所需的 LED 相匹配的前
    3 个输出。
- en: '![f06012](image_fi/500587c06/f06012.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![f06012](image_fi/500587c06/f06012.png)'
- en: 'Figure 6-12: Displaying the digit 7'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6-12：显示数字 7
- en: In our next project, we’ll create a circuit that displays, in turn, the digits
    0 through 9 and then the letters A through F. The cycle repeats with the decimal-point
    LED turned on.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一个项目中，我们将创建一个电路，依次显示数字 0 到 9，然后显示字母 A 到 F。循环会重复，并且小数点 LED 会亮起。
- en: 'Project #18: Creating a Single-Digit Display'
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #18：创建一个单数字显示器'
- en: In this project we’ll assemble a circuit to use a single-digit display.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将组装一个电路来使用单数字显示器。
- en: The Hardware
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: 'The following hardware is required:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下硬件是必需的：
- en: One 74HC595 shift register IC
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 74HC595 移位寄存器 IC
- en: One common-cathode seven-segment LED display
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个共阴极七段 LED 显示器
- en: One 560 Ω resistor (R1)
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 560 Ω 电阻（R1）
- en: One large breadboard
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个大号面包板
- en: Various connecting wires
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种连接电线
- en: Arduino and USB cable
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino 和 USB 电缆
- en: The Schematic
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原理图
- en: The schematic is shown in [Figure 6-13](#figure6-13).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 原理图如 [图 6-13](#figure6-13) 所示。
- en: '![f06013](image_fi/500587c06/f06013.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![f06013](image_fi/500587c06/f06013.png)'
- en: 'Figure 6-13: Schematic for Project 18'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6-13：项目 18 的原理图
- en: When you’re wiring the LED module to the shift register, LED pins A through
    G connect to pins Q0 through Q6, respectively, and DP connects to Q7.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将 LED 模块接线到移位寄存器时，LED 引脚 A 到 G 分别连接到 Q0 到 Q6 引脚，而 DP 连接到 Q7。
- en: The Sketch
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'In the sketch for Project 18, we store the decimal values (see [Table 6-2](#table6-2))
    in the `int digits[]` array. In the `void loop()`, we send these values to the
    shift register in sequential order at 1 and then repeat the process with the decimal
    point on by adding 1 to the value sent to the shift register at 2:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目 18 的草图中，我们将十进制值（见 [表 6-2](#table6-2)）存储在 `int digits[]` 数组中。在 `void loop()`
    中，我们按顺序将这些值发送到移位寄存器，首先是 1，然后通过在发送到移位寄存器的值上加 1 来重复该过程并开启小数点：
- en: '[PRE15]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Seven-segment LED displays are bright and easy to read. For example, [Figure
    6-14](#figure6-14) shows the result when this sketch is asked to display the digit
    9 with the decimal point.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 七段 LED 显示器亮度高，易于阅读。例如，[图 6-14](#figure6-14) 显示了此草图在请求显示数字 9 时的结果，带有小数点。
- en: '![f06014](image_fi/500587c06/f06014.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![f06014](image_fi/500587c06/f06014.png)'
- en: 'Figure 6-14: Digit displayed by Project 18'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6-14：项目 18 显示的数字
- en: 'Modifying the Sketch: Displaying Double Digits'
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改草图：显示双位数字
- en: 'To use more than one shift register to control additional digital outputs,
    connect pin 9 of the 74HC595 (which receives data from the Arduino) to pin 14
    of the second shift register. Once you’ve made this connection, two bytes of data
    will be sent: the first to control the second shift register and the second to
    control the first shift register. Here’s an example:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用多个移位寄存器来控制额外的数字输出，请将74HC595的9号引脚（接收来自Arduino的数据）连接到第二个移位寄存器的14号引脚。一旦完成此连接，两个字节的数据将被发送：第一个字节控制第二个移位寄存器，第二个字节控制第一个移位寄存器。以下是一个示例：
- en: '[PRE16]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Project #19: Controlling Two Seven-Segment LED Display Modules'
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目#19：控制两个七段LED显示模块
- en: This project will show you how to control two seven-segment LED display modules
    so that you can display two-digit numbers.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目将向您展示如何控制两个七段LED显示模块，从而能够显示两位数字。
- en: The Hardware
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: 'The following hardware is required:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 以下硬件是必需的：
- en: Two 74HC595 shift register ICs
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个74HC595移位寄存器IC
- en: Two common-cathode seven-segment LED displays
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个共阴极七段LED显示器
- en: Two 560 Ω resistors (R1 to R2)
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个560Ω电阻（R1到R2）
- en: One large breadboard or two smaller units
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个大型面包板或两个较小的单元
- en: Various connecting wires
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种连接线
- en: Arduino and USB cable
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino和USB电缆
- en: The Schematic
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原理图
- en: '[Figure 6-15](#figure6-15) shows the schematic for two display modules.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '[图6-15](#figure6-15)显示了两个显示模块的原理图。'
- en: Note that the shift registers’ data and clock pins are connected to each other
    and then to the Arduino. The data line from Arduino digital pin 6 runs to shift
    register 1, and then a link from pin 9 of shift register 1 runs to pin 14 of shift
    register 2.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，移位寄存器的数据和时钟引脚相互连接，然后连接到Arduino。来自Arduino数字引脚6的数据线连接到移位寄存器1，然后从移位寄存器1的9号引脚连接到移位寄存器2的14号引脚。
- en: To display a number between 0 and 99, we’ll need a more complicated sketch.
    If a number is less than 10, we can just send the number followed by a 0, as the
    right digit will display the number and the left digit will display 0\. However,
    if the number is greater than 10, then we need to determine each of the number’s
    two digits and send each to the shift registers separately. To make this process
    easier, we’ll use the math function modulo.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示0到99之间的数字，我们需要一个更复杂的草图。如果数字小于10，我们只需发送该数字后跟一个0，因为右侧的数字将显示该数字，而左侧的数字将显示0。然而，如果数字大于10，那么我们需要确定该数字的两位数字，并将它们分别发送到移位寄存器。为了简化这一过程，我们将使用数学函数模运算。
- en: '![f06015](image_fi/500587c06/f06015.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![f06015](image_fi/500587c06/f06015.png)'
- en: 'Figure 6-15: Schematic for Project 19'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图6-15：项目19的原理图
- en: Modulo
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模运算
- en: '*Modulo* is a function that returns the remainder of a division operation.
    For example, 10 modulo (or *mod*) 7 equals 3—in other words, the remainder of
    10 divided by 7 equals 3\. We use the percent sign (`%`) to represent modulo.
    The following example uses modulo in a sketch:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '*模运算*是一个返回除法操作余数的函数。例如，10模（或*mod*）7等于3——换句话说，10除以7的余数是3。我们使用百分号（`%`）表示模运算。以下示例在草图中使用了模运算：'
- en: '[PRE17]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this example, the value of `c` will be `2`. So, to determine a two-digit
    number’s right-hand digit, we use the modulo function*,* which returns the remainder
    when dividing the two numbers.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`c`的值将是`2`。因此，要确定两位数字的右侧数字，我们使用模运算函数*，*它返回除以两个数字后的余数。
- en: 'To automate displaying a single- or double-digit number, we’ll create the function
    `displayNumber()` for our sketch. We use modulo as part of this function to separate
    the digits of a two-digit number. For example, to display the number 23, we first
    isolate the left-hand digit by dividing 23 by 10, yielding 2 (and a fraction that
    we can ignore). To isolate the right-hand digit, we perform 23 modulo 10, which
    equals 3:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 为了自动化显示单个或双位数字，我们将为我们的草图创建函数`displayNumber()`。我们在该函数中使用模运算来分离两位数字的每一位。例如，若要显示数字23，我们首先通过将23除以10来提取左侧数字，结果是2（我们可以忽略的小数部分）。为了提取右侧数字，我们执行23模10运算，结果是3：
- en: '[PRE18]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: At 1, the function checks whether the number to be displayed is less than 10\.
    If so, it sends the data for the number and a blank digit to the shift registers.
    However, if the number is greater than 10, the function uses modulo and division
    at 2 to separate the digits and then sends them to the shift registers separately.
    Finally, in `void loop()` at 3, we set up and call the function to display the
    numbers from 0 to 99.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在1处，函数检查要显示的数字是否小于10。如果是，它将数字数据和一个空白数字发送到移位寄存器。但是，如果数字大于10，函数将在2处使用模运算和除法来分离数字，然后将它们分别发送到移位寄存器。最后，在`void
    loop()`的3处，我们设置并调用函数来显示从0到99的数字。
- en: 'Project #20: Creating a Digital Thermometer'
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #20：制作数字温度计'
- en: 'In this project, we’ll add the TMP36 temperature sensor we created in Project
    8 in Chapter 4 to the double-digit circuit constructed for Project 19 to create
    a digital thermometer that displays values for 0 degrees and above. The algorithm
    is simple: we read the voltage returned from the TMP36 (using the method from
    Project 12 in Chapter 5) and convert the reading to degrees Celsius.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将把第四章项目 8 中创建的 TMP36 温度传感器，添加到项目 19 中构建的双数字电路上，制作一个能够显示 0 度及以上温度的数字温度计。算法非常简单：我们读取
    TMP36 返回的电压（使用第五章项目 12 中的方法），并将读取值转换为摄氏度。
- en: The Hardware
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件
- en: 'The following hardware is required:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 以下硬件是必需的：
- en: The double-digit circuit from Project 19
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目 19 中的双数字电路
- en: One TMP36 temperature sensor
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 TMP36 温度传感器
- en: Connect the center output lead of the TMP36 to analog pin 5, the left lead to
    5 V, and the right lead to GND, and you’re ready to measure.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 将 TMP36 的中心输出引脚连接到模拟引脚 5，左侧引脚连接到 5V，右侧引脚连接到 GND，这样你就可以开始测量了。
- en: The Sketch
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'Here is the sketch:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这是草图：
- en: '[PRE19]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As indicated, the sketch borrows code from previous projects: `displayNumber()`
    from Project 19 and the temperature calculations from Project 12\. The `delay(500)`
    function in the second-to-last line of the sketch keeps the display from changing
    too quickly when the temperature fluctuates.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，这个草图借用了之前项目的代码：来自项目 19 的 `displayNumber()` 和来自项目 12 的温度计算。草图倒数第二行的 `delay(500)`
    函数使得温度波动时，显示不会变化得太快。
- en: Looking Ahead
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展望未来
- en: In this chapter, you have learned a lot of fundamental skills that you’ll use
    over and over in your own projects. LED displays are relatively hardy, so enjoy
    experimenting with them. However, there is a limit to the display effects they
    can be used for, so in the next chapter, we make use of much more detailed display
    methods for text and graphics.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章节中，你已经学习了很多基本技能，这些技能你将在自己的项目中反复使用。LED 显示屏相对耐用，因此可以尽情地进行实验。然而，它们能用来展示的效果是有限的，所以在下一章节中，我们将使用更为详细的文本和图形显示方法。
