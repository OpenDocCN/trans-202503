- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Framework
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 框架
- en: '![](image_fi/502680c13/f13001.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502680c13/f13001.png)'
- en: Whenever Dan Sandler visited the Mountain View offices, he’d usually leave behind
    some whiteboard art in his wake. This one showed up in the framework area on one
    of those trips.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 每当 Dan Sandler 访问 Mountain View 办公室时，他通常会在白板上留下些艺术作品。这次，他在其中一次出访时留下了这幅画，出现在框架区。
- en: 'F*ramework*^([1](#c13-footnote-1)) is the term that the Android team applies
    to a large chunk of the core platform that encompasses the internal operating
    system level stuff (the bits of software that underlie almost everything else
    on the system except the kernel), along with the APIs that applications use to
    access those features. Examples of framework functionality include:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: F*ramework*^([1](#c13-footnote-1))是 Android 团队用来描述核心平台中大部分内容的术语，涵盖了内部操作系统级别的内容（几乎支撑整个系统的除内核外的所有软件部分），以及应用程序用来访问这些功能的
    API。框架功能的示例包括：
- en: The package manager, responsible for installing and managing applications on
    the device.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包管理器，负责在设备上安装和管理应用程序。
- en: Power management, controlling, for example, the brightness settings of the screen
    (the screen being the heaviest user of power on any device).
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电源管理，例如控制屏幕的亮度设置（屏幕是任何设备上最耗电的部分）。
- en: Window management, displaying applications on the screen and animating them
    in and out as they open and close.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 窗口管理，在屏幕上显示应用程序，并在打开和关闭时进行动画效果。
- en: Input, receiving information from the touchscreen hardware and turning it into
    input events that are routed to applications.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入，接收来自触摸屏硬件的信息，并将其转化为输入事件，路由到应用程序中。
- en: Activity manager, handling the multitasking system on Android, deciding things
    like which applications to kill when memory is getting low on the device.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Activity 管理器，处理 Android 的多任务系统，决定在设备内存不足时应该关闭哪些应用。
- en: When the framework engineers started arriving onto Android in late 2005, none
    of this existed, so the people who started on the Android team back then had to
    build the framework, piece by piece.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当框架工程师在 2005 年底开始加入 Android 时，框架的所有内容都不存在，因此当时加入 Android 团队的人们必须一点一点地构建框架。
- en: Dianne Hackborn and the Android Framework
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Dianne Hackborn 与 Android 框架
- en: The person whose work defines most the shape [of the Android platform] is clearly
    Dianne. I’m sure she would probably downplay her influence here. But she’s wrong.
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 那位最能定义[Android平台]形态的人显然是 Dianne。我敢肯定她可能会低调自己在这里的影响力，但她错了。
- en: ''
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Ficus Kirkpatrick
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —Ficus Kirkpatrick
- en: By the end of 2005, some of the pieces of what would become the framework were
    started, but there was still a long way to go, including APIs for applications
    to use and all of the other capabilities that the system required. Then Dianne
    Hackborn joined the team.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 到 2005 年底，部分将成为框架的组件已开始构建，但仍有很长的路要走，包括供应用程序使用的 API 和系统所需的所有其他功能。然后，Dianne Hackborn
    加入了团队。
- en: Dianne (also known to the team as “hackbod”^([2](#c13-footnote-2))) is, as most
    people on the team would agree, the person who best understands the entire breadth
    of the Android framework and the overall platform. For one thing, she has a comprehensive
    understanding of how all of the pieces in the platform fit together, along with
    an extensive knowledge of operating systems and APIs in general.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Dianne（团队中也称她为“hackbod”^([2](#c13-footnote-2)))是大多数团队成员公认的，最了解整个 Android 框架和整体平台的人。首先，她对平台中所有部分如何协同工作有全面的了解，同时也对操作系统和
    API 有着广泛的知识。
- en: Also, she wrote most of the framework code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，她写了大部分的框架代码。
- en: Dianne came from computer royalty. Her father started the printer division at
    Hewlett-Packard and was under consideration for CEO at some point. At an age when
    other kids were experiencing computers through playing video games, she was into
    system design. “I would look into the way the system works, and the ways that
    it worked with applications and threading.”
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Dianne 来自计算机界的名门望族。她的父亲曾在惠普创立了打印机部门，并曾一度被考虑担任 CEO。在其他孩子通过玩电子游戏接触电脑的年龄段，她却已经涉足系统设计。“我会研究系统是如何工作的，以及它与应用程序和线程的协同方式。”
- en: After college, she worked at Lucent Technologies, while playing with BeOS in
    her spare time (“writing frameworks, some applications. UI layout frameworks .
    . . that kind of stuff”). Eventually, she wanted that work to be more than a side
    interest, and moved to the Bay Area to work for Be.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 大学毕业后，她在Lucent Technologies工作，并在闲暇时间玩BeOS（“编写框架，一些应用程序，UI布局框架……类似的东西”）。最终，她希望这项工作能成为她的主业，因此她搬到了湾区，开始在Be公司工作。
- en: “That was at the time of the dot-com boom. You’re working at a company that
    isn’t making any money, not sure how you’re going to make money, but everybody
    wants to work on operating systems. That’s why they’re there. It’s not about making
    money.”^([3](#c13-footnote-3))
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: “那时正值互联网泡沫时期。你在一家没有盈利、也不知道如何赚钱的公司工作，但每个人都希望能参与操作系统的开发。那就是他们来这里的原因。这里不是为了赚钱。”^([3](#c13-footnote-3))
- en: Dianne started at Be in late 1999, joining a group of people there that she
    would work with later at PalmSource, and then again when she joined Android. She
    worked on the framework at Be and then again at PalmSource.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Dianne在1999年底加入Be，成为那里一群人中的一员，她之后又在PalmSource与这些人合作，随后在加入Android时再次与他们共事。她在Be负责框架工作，之后又在PalmSource继续从事相同的工作。
- en: At Be, Dianne worked on the next version of BeOS, but that was the end of the
    line for that operating system. “They were trying to compete with Microsoft. You
    can’t compete with the entrenched platform. Unless they shoot themselves in the
    foot, it is impossible because their ecosystem has so much momentum that anything
    you do better than them, they have years to react to you for it to matter.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在Be公司，Dianne参与了BeOS下一个版本的开发，但这也标志着该操作系统的终结。“他们试图与微软竞争。你无法与一个根深蒂固的平台竞争。除非他们自作自受，否则这是不可能的，因为他们的生态系统已经有了如此强大的势头，你做得比他们更好，他们有几年时间来对你做出反应，直到这变得有意义。”
- en: “And it’s chicken and egg. You have to get users to get app developers interested
    in you, and you have to get developers to get users interested in you. You can
    get some users, but anywhere you try to gain momentum, the dominant platform can
    go address that particular market and kill you. It’s just impossible.”
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: “这就像是一个‘鸡与蛋’的难题。你需要吸引用户来让应用开发者对你感兴趣，而你也需要吸引开发者，才能让用户对你感兴趣。你可以吸引一些用户，但每当你尝试积累势头时，主导平台总能找到方法去解决特定市场的问题并击败你。这个过程几乎是不可能的。”
- en: Eventually, Palm acquired Be, because Palm had plans to build a more robust
    OS for their devices and needed engineers with the right expertise to make it
    happen. It was Dianne’s introduction to mobile computing. “I had never thought
    about mobile at the time. But once I started looking at Palm, that’s when I got
    really interested. That seemed like the way you compete with Microsoft. It’s a
    new kind of device, so if you can be the platform on that device, then you have
    a bigger ecosystem than Windows and you have a chance. You could see the writing
    on the wall. The hardware was getting more powerful, and the market was already
    bigger than PCs.”
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，Palm收购了Be，因为Palm计划为其设备打造一个更强大的操作系统，并需要具备相关专业知识的工程师来实现这一目标。这也是Dianne第一次接触到移动计算。“当时我从未考虑过移动领域。但一旦我开始了解Palm，我就变得非常感兴趣。这似乎是与微软竞争的方式。它是一种新型的设备，如果你能成为该设备上的平台，那么你将拥有比Windows更大的生态系统，你就有机会。你能看到未来的趋势。硬件正在变得越来越强大，而市场已经比PC更大。”
- en: But PalmSource was struggling. The original idea with their spinout from Palm
    was that they would provide the OS that Palm (and other companies) would use.
    But by the time PalmSource came up with Palm OS 6,^([4](#c13-footnote-4)) Palm
    had decided to just continue using the OS they began with when Palm and PalmSource
    split. Then a deal fell through when the team was nearly done with a product-quality
    OS on a potential Samsung device. After that, there were no other buyers in sight
    for the OS, so the company started shopping itself around to be acquired.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，PalmSource却陷入了困境。Palm与PalmSource分开时，最初的构想是，PalmSource会提供Palm（以及其他公司）所使用的操作系统。但到了PalmSource发布Palm
    OS 6的时候，Palm决定继续使用他们在Palm和PalmSource分裂时开始使用的操作系统。接着，当团队几乎完成为三星设备打造的高质量操作系统时，协议破裂。之后，再也没有其他买家对该操作系统产生兴趣，因此公司开始寻求被收购的机会。
- en: There’s an interesting dynamic of mobile OSes that Dianne and the team were
    forced to deal with at the time, which would resurface (more successfully) later
    on Android. “It was really hard to get phone manufacturers interested in someone
    else’s platform. They did their own software and they were terrified of phones
    becoming the same as PCs, where there’s one software vendor that owns the platform
    that commoditizes the hardware.”
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当时，Dianne和她的团队不得不应对一个有趣的移动操作系统动态，这个问题后来在Android上以更成功的方式浮现。“要让手机制造商对其他人的平台感兴趣真的很难。他们做自己的软件，而且他们害怕手机变得和PC一样，成了由一个软件供应商控制的平台，最终让硬件商品化。”
- en: That model of hardware companies creating their own OS worked when software
    was simpler. Handling phone calls and contact information for a flip phone was
    well within the capabilities of all of those companies. But when the required
    capabilities and feature sets kept increasing, especially after the iPhone launched,
    it was difficult for those companies to keep up. The companies that needed an
    OS in the wake of the iPhone launch were looking for something far more complex
    than they could create on their own, and were therefore more willing to work with
    Android.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当硬件公司自行开发操作系统的模式在软件较为简单时是行得通的。对于一部翻盖手机来说，处理电话和联系人信息完全在这些公司能力范围之内。但随着所需功能和特性的不断增加，尤其是在iPhone推出之后，这些公司很难跟上。iPhone发布后，急需操作系统的公司寻找的东西远比他们自己能做的要复杂，因此他们更愿意与Android合作。
- en: “The software becomes more valuable than the hardware. Most of your investment
    is now in the software. And if that’s the case, then whoever can invest the most
    in the software is going to be the most compelling, and that’s probably someone
    dedicated to a platform that works across different hardware.”
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: “软件变得比硬件更有价值。你大部分的投资现在都在软件上。如果是这样的话，那么谁能在软件上投入最多，谁就会最具吸引力，而这可能是一个致力于跨不同硬件平台的软件的人。”
- en: Part of Palm OS 6 was a powerful UI framework. Motorola, a potential suitor
    of PalmSource, was interested in that framework and in Palm OS 6 in general for
    its own devices. But Motorola’s acquisition attempt failed, and PalmSource was
    acquired by ACCESS Co., Ltd. “It would have been really interesting to get acquired
    by Motorola. We were all hoping for that. They wanted to take what we were doing
    and use it.” ACCESS, on the other hand, was not on board with the current direction.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Palm OS 6的一部分是一个强大的UI框架。摩托罗拉，一家有意收购PalmSource的潜在公司，对这个框架以及Palm OS 6本身都非常感兴趣，想将其用于自己的设备。但摩托罗拉的收购尝试失败了，而PalmSource则被ACCESS公司收购了。“被摩托罗拉收购本来会很有趣。我们都在希望那样。他们想拿我们做的事情并利用它。”然而，ACCESS对于当前的方向并不认同。
- en: 'After the acquisition, ACCESS changed the team’s OS strategy. Dianne and her
    team were done. “PalmSource was over. Handset manufacturers didn’t want to touch
    someone else’s platform, because they didn’t want to be an enabler. I was seeing
    my team out the door (I was managing the framework team there). Mathias and Joe
    were leaving. They came to me and said ‘you should come over to Google—there’s
    really cool stuff going on here.’ They gave me hints: ‘It’s a platform . . . it’s
    open source . . . .’ Work at Google doing an open source mobile platform where
    you don’t have to worry about money? How can you say no to that? It’s, like, perfect.”'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 收购后，ACCESS改变了团队的操作系统战略。Dianne和她的团队结束了他们的工作。“PalmSource完了。手机制造商不想接触别人的平台，因为他们不想成为一个推动者。我看到我的团队一个个离开（我当时负责框架团队）。Mathias和Joe要离开了，他们来找我说‘你应该来Google—这里有很多酷的事情。’他们给了我一些暗示：‘这是一个平台…它是开源的…’在Google做开源的移动平台工作，你不必担心钱？怎么能拒绝呢？简直太完美了。”
- en: Dianne joined Google and started on the Android team in January of 2006.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Dianne于2006年1月加入Google，并开始加入Android团队。
- en: 'She was introduced to Google’s take on the Android strategy early on. “When
    I joined, the way Larry and Sergey were talking about it, and the way Andy was
    presenting it, they didn’t want just a product. It was grander than that: the
    future survival of Google. They didn’t want a company with a closed proprietary
    platform to own and control the space, like Microsoft owns the PC platform. It
    wasn’t about needing to make money.”^([5](#c13-footnote-5))'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 她早早就接触到了Google关于Android战略的看法。“当我加入时，Larry和Sergey的谈话方式，以及Andy的展示方式，他们不仅仅想要一款产品。那比那更宏大：是Google未来生存的问题。他们不希望有一个拥有封闭专有平台的公司主导这个领域，就像微软拥有PC平台一样。这并不是为了赚钱。”^([5](#c13-footnote-5))
- en: Activities
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动
- en: It’s hard to out-code Dianne when she’s on fire. She had a vision of what she
    wanted, and she just sat down and typed it out.
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当 Dianne 狂热工作时，很难超越她的编程能力。她有一个明确的愿景，便直接坐下来敲代码实现它。
- en: ''
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Jeff Hamilton
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: — Jeff Hamilton
- en: After she joined Android, Dianne started working on many of the fundamental
    pieces of what’s now called the framework. One of those pieces was Activities,
    which she took over from some initial work by Joe Onorato.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在她加入 Android 后，Dianne 开始参与许多现在被称为框架的基础模块工作。其中一个模块是 Activities，它是从 Joe Onorato
    的一些初步工作中接手过来的。
- en: Activities, which evolved from longer-term ideas that the team was thinking
    about earlier when they were at PalmSource, are a uniquely Android way of managing
    applications. On a more traditional OS, an application starts, calls its `main()`
    method, and then just starts doing things in a loop (drawing, polling for input,
    doing any necessary calculations, and so on). On Android, an application is broken
    down into one or more “activity” pieces, each of which has its own window. Activities
    (and applications) have no `main()` method, but instead are called by the OS in
    response to events, like activity creation/destruction and user input.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Activities，起源于团队在 PalmSource 时更长远的构想，是一种独特的 Android 应用管理方式。在传统操作系统中，应用程序启动时会调用
    `main()` 方法，然后进入一个循环（绘制、轮询输入、执行必要的计算等）。而在 Android 中，应用程序被拆解成一个或多个“活动”模块，每个模块都有自己的窗口。Activities（和应用程序）没有
    `main()` 方法，而是由操作系统响应事件（如活动的创建/销毁、用户输入等）进行调用。
- en: Another important element of Activities is that they define specific entry points
    that can be called from other applications, like notifications or shortcuts in
    the system UI that can take the user to a place inside of the application.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Activities 的另一个重要特点是它们定义了可以从其他应用程序调用的特定入口点，比如系统 UI 中的通知或快捷方式，可以将用户带到应用程序内部的某个位置。
- en: 'Dianne said, “Palm had a really good understanding of mobile devices. One of
    the things we learned there was that mobile apps are fundamentally different from
    desktop apps: the user can only be in one at a time, and they tend to be small
    and focused on a particular task. Out of this grew a need to easily have apps
    work together. Palm OS had this hack called ‘sublaunching’ that allowed one app
    to effectively call in to another app, to do something like show a UI for the
    user to add a contact. We viewed this as an important feature for mobile apps,
    but needed to formalize it into a well-defined concept so it would be more robust
    and work in a complex multi-process protected memory (and app-sandboxed) environment.
    Thus Activities, which define the ways apps can expose parts of themselves for
    other apps (and the system) to launch as needed.”'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Dianne 说：“Palm 对移动设备有很深的理解。在那里我们学到的一件事是，移动应用与桌面应用有根本的不同：用户一次只能使用一个应用，并且这些应用通常较小，专注于某个特定任务。从这一点出发，我们需要让应用能够轻松协同工作。Palm
    OS 有一个叫做‘子启动’的技巧，允许一个应用有效地调用另一个应用，做一些诸如显示 UI 以便用户添加联系人之类的操作。我们认为这是移动应用中一个重要的特性，但我们需要将其规范化，形成一个定义明确的概念，以便它在复杂的多进程保护内存（和应用沙箱）环境中更为健壮并且有效。因此就有了
    Activities，定义了应用可以如何暴露部分功能，供其他应用（和系统）按需启动。”
- en: Activities were a powerful concept for Android. They were also at the heart
    of one of the first big disagreements on the engineering team. There was certainly
    more complexity associated with Activities than the more traditional approach
    that some people preferred. In particular, Android’s application lifecycle (handling
    activity creation/destruction/etc.) continues to be difficult to understand, and
    dealing with its complexities tends to be a hard and error-prone chore for many
    Android developers.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Activities 对于 Android 来说是一个强大的概念。它们也是工程团队第一次大规模意见分歧的核心问题之一。与一些人偏好的传统方法相比，Activities
    确实更为复杂。特别是，Android 的应用生命周期（处理活动创建/销毁等）仍然是难以理解的，而处理其复杂性往往是许多 Android 开发者的一项艰难且容易出错的任务。
- en: As Jeff Hamilton (a framework engineer that we’ll read about soon) told it,
    “In the early days of Android, there were two competing visions of what the OS
    should look like. One was around the fuzzy nature of Activities, and one where
    there’s a `main()` that gets called. Dianne and Joe were pushing on the notion
    of the more modular app setup with Activities.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如 Jeff Hamilton（我们很快就会了解的框架工程师）所说的，“在 Android 的早期，有两个关于操作系统应该是什么样子的竞争性愿景。一个是围绕
    Activities 的模糊特性，另一个是有一个被调用的 `main()` 方法。Dianne 和 Joe 推动的是更加模块化的应用程序设置方式，其中包含
    Activities。”
- en: “There were a bunch of other people, like Mike Fleming,^([6](#c13-footnote-6))
    in the other camp that were pushing more for a simple model. There was a big conflict
    there for a while.”
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: “还有一些其他人，比如 Mike Fleming^([6](#c13-footnote-6))，他们倾向于推动更简单的模型。那里曾经有一段时间的激烈冲突。”
- en: 'Mike Fleming said, “I was a skeptic of the application lifecycle. I was concerned
    that it was too complicated.” Wei Huang^([7](#c13-footnote-7)) agreed: “There
    are certain points where I think the activity lifecycle is overly complicated.
    It grew a little bit out of control.”'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Mike Fleming 说：“我曾对应用生命周期持怀疑态度。我担心它太复杂了。” Wei Huang^([7](#c13-footnote-7)) 同意：“在某些方面，我认为活动生命周期过于复杂了，它变得有些失控。”
- en: 'But the team decided to go with the Activities approach. Jeff explained how
    that happened: “Dianne had a vision of what she wanted, and she just sat down
    and typed it out. That’s the way it worked, because she was productive and got
    things done.”'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 但团队决定采用活动方式。Jeff 解释了事情是如何发生的：“Dianne 对她想要的有一个清晰的愿景，她只是坐下来把它打出来。这就是方法，因为她很有生产力，事情也都完成了。”
- en: This model of decision making happened elsewhere as well, such as the initial
    View system that Joe implemented. The team didn’t have a lot of time for meetings
    and committees and debates on how things should work, so eventually someone would
    simply bang out a solution and things would move on from there. As Dianne said,
    “There were so few people that if you do it, you just do it. There was lots of
    discussion between people, but it was instigated by the person working on the
    thing.” Romain Guy (who joined later to work on the UI toolkit) added, “What was
    most respected [at Android] was someone just making something happen.” And often,
    that someone was Dianne.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这种决策模式在其他地方也有体现，比如 Joe 实现的初始视图系统。团队没有太多时间开会、组成委员会或辩论事情该如何进行，所以最终总是有人直接敲定一个解决方案，然后事情就从那里继续发展。正如
    Dianne 所说：“当时人很少，如果你做了，就直接做了。人们之间有很多讨论，但都是由正在做事情的人发起的。” Romain Guy（后来加入工作在UI工具包的开发）补充道：“在
    Android 上，最受尊敬的是有人能够真正把事情做成。” 而且，通常这个人就是 Dianne。
- en: Resources
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源
- en: Dianne also worked on the resource system,^([8](#c13-footnote-8)) which is another
    very Android concept. On Android, application developers are able to define different
    versions of text, images, sizes, and other elements of their apps, in what are
    called *resource files*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Dianne 还参与了资源系统的开发^([8](#c13-footnote-8))，这是另一个非常 Android 特有的概念。在 Android 上，应用程序开发者可以在所谓的
    *资源文件* 中定义文本、图像、尺寸及其他元素的不同版本。
- en: For example, you might have a button in your application that should say *Click*
    so that the user knows to click that button. But the word *Click* only makes sense
    if the user speaks English. What if they speak Russian instead? Or French? Or
    . . . any other non-English language? Developers use resource files to store different
    versions of that string for different languages. When the button is populated
    with a string, the resource system chooses the version that is appropriate for
    the language that the user has selected on their phone.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，你的应用程序中可能有一个按钮，上面应该写 *Click*，这样用户就知道点击这个按钮。但是，单词 *Click* 只有在用户讲英语时才有意义。如果他们讲俄语呢？或者法语？或者……任何其他非英语语言呢？开发者使用资源文件来存储不同语言版本的字符串。当按钮填充字符串时，资源系统会根据用户在手机上选择的语言，选择合适的版本。
- en: Similarly, developers can define what the UI looks like for screen configurations,
    and can use different image sizes based on different screen densities. Again,
    the resource system loads the appropriate variation when the application launches,
    depending on the user’s device.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，开发者可以定义屏幕配置的UI样式，并根据不同的屏幕密度使用不同的图像尺寸。资源系统会根据用户设备在应用启动时加载适当的变体。
- en: Resources, and the way that they are used to solve the variable-density problem
    in particular, are a great example of how Android was developed as a software
    platform, not just as a single phone product, even in those early days before
    1.0\. If the team was just targeting a particular device, with a predefined screen
    size (as most manufacturers did at that time), none of this would have been necessary.
    But then applications would have been written with those initial assumptions firmly
    in place. When different sized screens came along later, those apps wouldn’t look
    right.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 资源，以及它们如何解决特别是变量密度问题的方式，是Android作为一个软件平台（而不仅仅是作为一款手机产品）发展的一个很好的例子，即使在1.0之前的那些早期阶段。如果团队当时只是针对某个特定设备，并有一个预定义的屏幕尺寸（正如当时大多数厂商所做的那样），那么这些问题就不需要解决。但这样一来，应用就会在最初的假设基础上编写。当不同尺寸的屏幕出现时，应用就会显示不正确。
- en: 'Dianne: “These devices were different from the desktop because the device has
    much more impact on applications than on desktop. On desktop you can have a bigger
    screen, but it doesn’t really matter for apps, you may just be able to resize
    the windows. But on these devices, if the screen gets bigger, then the apps need
    to draw correctly on that bigger screen.”'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Dianne：“这些设备与桌面不同，因为设备对应用的影响比桌面更大。在桌面上，你可以有更大的屏幕，但这对应用并没有太大影响，你可能只是能调整窗口的大小。但在这些设备上，如果屏幕变大，应用需要能够在更大的屏幕上正确绘制。”
- en: 'Another factor was screen density.^([9](#c13-footnote-9)) “On the desktop,
    the density never changes. But we knew that the density [for mobile devices] would
    change. We saw this happen at Palm. We needed to design something that would let
    us evolve the platform over the long term, because we had seen what happened with
    Palm OS and its more minimalist approach. Getting it to support different screen
    densities was a disaster. We’ve always [for the Android platform] approached this
    as: ‘We’re building this for mobile devices, but we want this thing to scale and
    address other use cases in the long term.’”'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个因素是屏幕密度。^([9](#c13-footnote-9))“在桌面上，屏幕密度永远不会变化。但我们知道，移动设备的密度会发生变化。我们在Palm公司看到过这种情况。我们需要设计一些东西，让平台能够在长期内不断发展，因为我们看到了Palm
    OS及其更简化方法的问题。让它支持不同的屏幕密度时，完全是一场灾难。我们一直都[对于Android平台]抱着这样的想法：‘我们在为移动设备构建这个，但我们希望它能够扩展，长期应对其他使用场景。’”
- en: In contrast, iOS and the iPhone didn’t take density into consideration in the
    beginning. “Apple didn’t think about this stuff. Apple is one of the few hardware
    companies that can also do high quality software development. Most hardware companies
    are focused on the hardware product, and the software is just something needed
    for the hardware. Apple is able to approach the software as something that they
    invest in long-term, separately from a particular hardware product. But you still
    see stuff where they are hardware-oriented, like ‘We want to change the size of
    the screen . . . we didn’t think about that.’”
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，iOS和iPhone最初并没有考虑屏幕密度。“苹果没有考虑这些问题。苹果是为数不多的既能做高质量软件开发，又专注硬件的公司之一。大多数硬件公司只关注硬件产品，软件只是硬件所需的一部分。而苹果能够将软件作为一个长期投资的方向，独立于某个特定硬件产品。不过你仍然会看到他们在硬件方面的思维，比如‘我们想改变屏幕尺寸……我们没有考虑到这一点。’”
- en: WindowManager
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WindowManager
- en: Dianne says, “I’m gonna make a window manager,” and typity-type-type, there’s
    a window manager.
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Dianne说：“我要做一个窗口管理器，”然后嘀嘀嘀嘀，窗口管理器就出来了。
- en: ''
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Mike Cleron
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —Mike Cleron
- en: Dianne also, long before 1.0 shipped, wrote the WindowManager, which handles
    windows opening, closing, animating in, and animating out. It’s notable because
    of both the complexity of the problems it had to solve and the fact that Dianne
    wrote it all as just one of the many things she was doing.^([10](#c13-footnote-10))
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Dianne早在1.0发布之前，就编写了WindowManager，它处理窗口的打开、关闭、动画进场和动画出场。这个工作很有意义，因为它不仅解决了复杂的问题，还因为Dianne在做这件事时，只是她众多工作中的一项。^([10](#c13-footnote-10))
- en: Soft Keyboard
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软键盘
- en: After 1.0 shipped, there was still plenty of work to do. One of the things that
    Dianne worked on at that time, along with Amith Yamasani on the framework team,
    was support for the *soft* *keyboard*, or the on-screen keyboard that touch-only
    devices needed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.0发布后，仍然有很多工作要做。Dianne当时与框架团队的Amith Yamasani一起工作的一项任务就是支持*软键盘*，即触摸设备所需的屏幕键盘。
- en: The original G1 had a hardware keyboard. Entering text into an application required
    flipping that keyboard out. This mechanism worked fine (and in fact many smartphone
    users continued to prefer hardware keyboards for years after that, especially
    BlackBerry fans). But the demand for larger screens and smaller devices meant
    that support for an all-touch device, with an on-screen keyboard, was critical.
    In fact, the device that was going to launch with the upcoming Cupcake release
    would have no hardware keyboard.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 原版 G1 配备了硬件键盘。进入应用程序时需要将键盘滑出。这个机制工作得很好（事实上，很多智能手机用户在几年后仍然偏爱硬件键盘，特别是黑莓的粉丝）。但对更大屏幕和更小设备的需求意味着支持全触摸设备和屏幕上的虚拟键盘变得至关重要。事实上，随着即将发布的
    Cupcake 版本，设备将不再配备硬件键盘。
- en: In typical Android development fashion, the soft keyboard wasn’t just hacked
    into the framework. Android was known for making trade-offs to get performance
    or to hit ship dates, but the team always prioritized creating general platform
    capabilities instead of hacks for specific product features, which was the case
    for their keyboard solution. The team created a system to provide extensible and
    flexible support for generalized input. For example, the keyboard support wasn’t
    just called *keyboard*, but rather Input Method Editor (IME). It wasn’t sufficient
    to simply provide support for typing on a regular keyboard, but rather the system
    needed to accept input from any kind of input mechanism, including speech.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 按照典型的 Android 开发方式，软键盘并不是直接硬加到框架中的。Android 因为要在性能和发布时间之间做取舍而闻名，但团队始终优先考虑创建通用平台能力，而不是针对特定产品特性的黑客解决方案，这也是他们键盘解决方案的做法。团队创建了一个系统，提供可扩展且灵活的通用输入支持。例如，键盘支持不仅仅被称为*键盘*，而是输入法编辑器（IME）。仅仅提供常规键盘的支持是不够的，系统需要能够接受来自任何输入机制的输入，包括语音输入。
- en: At the same time, input support was built not just as an internal mechanism
    for the framework to use, but also as an extensible feature that developers could
    take advantage of. Android supplied the Input Method Framework (IMF) that would
    accept input from any user-supplied IME, not just the keyboard that shipped with
    the Android system. That is, Android didn’t just supply a soft keyboard for users;
    they also provided APIs for developers to create their own keyboard apps that
    users could use instead. The short-term need was for an input system that was
    good enough for most use cases. But the team recognized that there might be other
    experiences out there, or other capabilities, that users wanted and developers
    could help out with, so they built the system to allow it. Even when there were
    only a couple of Android devices out on the market, the team was playing the long
    game, anticipating a potentially large and diverse ecosystem of devices and users.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，输入支持不仅仅是作为框架内部的机制，而是作为一个可扩展的特性，开发者可以利用这一点。Android 提供了输入法框架（IMF），它接受任何用户提供的
    IME 输入，而不仅仅是随 Android 系统一起发布的键盘。也就是说，Android 不仅仅为用户提供了软键盘；他们还为开发者提供了 API，让他们创建自己的键盘应用，供用户选择使用。短期需求是提供一个足够好的输入系统，满足大多数使用场景。但团队意识到，可能还会有其他用户想要的体验，或是其他开发者可以提供的功能，因此他们构建了一个允许实现这些功能的系统。即便市场上只有少数几款
    Android 设备，团队仍在进行长期布局，预见到可能会有一个庞大且多样化的设备和用户生态系统。
- en: Dianne said, “I don’t recall it ever being much of a consideration to go down
    the path of hard-coding it into the platform. From a practical matter of being
    able to address the needs of different languages, we thought this should be a
    user-selectable component.”
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 戴安娜说：“我不记得曾经考虑过将其硬编码到平台中的路径。从能够满足不同语言需求的实际考虑出发，我们认为这应该是一个用户可选择的组件。”
- en: IME support is a great example of what attracted many developers (and users)
    to Android early on. The early devices like the G1 weren’t the most beautiful
    smartphones available, but the power and flexibility of the open ecosystem was
    attractive to many users and developers. The iPhone eventually offered the ability
    to have keyboard apps besides the one that came bundled with iOS, but that was
    much later, long after Android developers could offer those apps.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: IME 支持是吸引许多开发者（和用户）早期加入 Android 的一个重要例子。早期的设备，如 G1，可能并不是最美观的智能手机，但开放生态系统的力量和灵活性吸引了许多用户和开发者。尽管
    iPhone 最终提供了除了 iOS 自带的键盘外，还可以安装其他键盘应用的功能，但这发生在很晚之后，远远晚于 Android 开发者提供这些应用的时间。
- en: In 2009, Shumin Zhai was working in research at IBM. He was investigating alternative
    input mechanisms, using an app he built called ShapeWriter.^([11](#c13-footnote-11))
    Rather than typing in each letter, his app allowed a user to slide their finger
    around the keyboard, tracing out a shape as they navigated between the letters
    of each word. His keyboard interpreted these shapes as words, using probabilities
    and heuristics to determine the words the user was tracing out.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 2009年，Shumin Zhai在IBM从事研究工作。他在研究替代输入机制，使用他自己开发的一款应用ShapeWriter^([11](#c13-footnote-11))。这款应用不需要逐个输入字母，而是允许用户在键盘上滑动手指，在字母之间画出形状，从而输入单词。这个键盘通过使用概率和启发式算法，解读这些形状为单词，来确定用户正在输入的词。
- en: Shumin built the ShapeWriter with Per Ola Kristensson in 2004, releasing it
    originally on the Windows Tablet PC. They later released ShapeWriter for the iPhone
    in 2008, but it would only work with a note-taking app that they also supplied,
    because the iPhone had no equivalent of Android’s IMF at the time, so it could
    not take the place of the system keyboard. When Android released support for the
    IMF, in the Cupcake release in mid-2009, Shumin switched ShapeWriter’s focus to
    Android, releasing the app on Android Market later that year.^([12](#c13-footnote-12))
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Shumin在2004年与Per Ola Kristensson一起开发了ShapeWriter，并最初在Windows Tablet PC上发布。2008年，他们将ShapeWriter发布到iPhone，但它只能与他们提供的记事本应用一起使用，因为当时iPhone没有类似Android
    IMF的功能，所以无法替代系统键盘。当Android在2009年中期的Cupcake版本中发布了对IMF的支持后，Shumin将ShapeWriter的重点转向了Android，并于当年晚些时候在Android
    Market发布了这款应用。^([12](#c13-footnote-12))
- en: He particularly liked developing for Android^([13](#c13-footnote-13)) because
    it gave him the ability to experiment, to swap out the system keyboard for his
    own so that he could provide this new capability. Shumin was a researcher, which
    might not seem like a huge target market to go after. But around the same time,
    a company released a popular app on Android called Swype, which had similar gesture-typing
    capabilities.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 他特别喜欢为Android开发^([13](#c13-footnote-13))，因为这让他能够进行实验，能够将系统键盘换成自己的键盘，从而提供这种新功能。Shumin是一位研究员，虽然这看起来似乎不是一个庞大的目标市场，但就在同一时期，一家公司在Android平台上发布了一款名为Swype的流行应用，拥有类似的手势输入功能。
- en: Shumin eventually joined the Android team and led the team that implemented
    Gesture Typing for Android’s standard IME. Now that capability of tracing out
    words is built into Android’s keyboard by default. But Android still allows developers
    to supply their own keyboard apps for customizations and capabilities that developers
    want to create.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Shumin最终加入了Android团队，并领导了实现Android标准IME手势输入的团队。如今，Android的键盘默认内置了这种绘制单词的功能。但Android仍然允许开发者提供自己的键盘应用，以进行自定义和开发者希望创建的功能。
- en: Jeff Hamilton Works His Way Up the Stack
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Jeff Hamilton逐步在技术栈中晋升
- en: Despite Dianne’s legendary productivity, there was still much more that needed
    to be done to make the entire framework come into being than she could handle
    on her own. A few other people were also writing copious amounts of framework
    code. One of those people was Jeff Hamilton (known to the team as “jham”).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Dianne的生产力令人传奇，但要让整个框架真正成型，还有很多工作超出了她一个人能够完成的范围。还有一些其他人也在编写大量的框架代码，其中之一就是Jeff
    Hamilton（团队内称他为“jham”）。
- en: Jeff started at Google on the same day as Dianne. They had worked together on
    framework code at Be and PalmSource, and were about to do so again on Android.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Jeff和Dianne在同一天加入了Google。他们曾在Be和PalmSource一起合作过框架代码，现如今准备在Android上再次合作。
- en: Jeff’s work on platforms began when he landed at Be for an internship during
    college. He actually failed his interview, because of his answer about how interrupt
    handlers^([14](#c13-footnote-14)) worked on BeOS, which was different from how
    they worked on Linux. He went home to research the difference and sent in an explanation,
    along with the correct answer, and the team changed their mind. They hired him
    for the summer, and for the next year while he was at college . . . and eventually
    for a full-time job when he finished college.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Jeff的工作生涯始于大学时期，在Be公司实习时开始了他的平台开发工作。他在面试时实际上失败了，因为他关于BeOS中中断处理程序的工作原理的回答有误，BeOS与Linux的处理方式不同。他回家后研究了这个差异，重新提交了解释，并给出了正确答案，团队改变了主意，决定聘用他在夏天实习，并在他大学期间继续工作...最终在他大学毕业后，聘用了他成为全职员工。
- en: 'At Be, Jeff was on the kernel team, working on drivers for hardware like the
    touchscreen display and USB. He also got a good introduction to getting started
    at a scrappy Silicon Valley company: “First day, they showed me to my cube and
    it had a case and keyboard. They said, ‘There’s a motherboard over there, go ask
    George for a CPU.’ They didn’t have any RAM, I had to buy some at Fry’s.”^([15](#c13-footnote-15))'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在Be，Jeff在内核团队工作，负责硬件驱动开发，如触摸屏显示器和USB。他还很好地了解了如何在一个充满活力的硅谷公司开始工作：“第一天，他们把我带到我的工作区，那里有一个机箱和键盘。他们说，‘那边有主板，去找George要个CPU。’他们没有内存条，我得去Fry's买。”^([15](#c13-footnote-15))
- en: After college, Jeff joined Be full time, and eventually joined PalmSource after
    that acquisition in 2001\. But like other members of the team, including Joe,
    Dianne, and Mathias, Jeff eventually tired of PalmSource. “By August 2005, it
    seemed pretty clear that they had no customers.” He had moved to Austin, Texas,
    so he looked for jobs in that area and found an opportunity at Motorola that looked
    perfect. “It’d be a local job. They wanted to build a new, modern smartphone OS,
    ship on all the phones instead of a one-off. The group I was joining had signed
    a deal to acquire PalmSource;^([16](#c13-footnote-16)) they said I’d fit right
    in. It all sounded really good, so I quit PalmSource, joined Motorola in August
    of 2005.”
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 大学毕业后，Jeff全职加入了Be，后来在2001年Be被收购后加入了PalmSource。但和团队里的其他成员一样，包括Joe、Dianne和Mathias，Jeff最终也厌倦了PalmSource。“到2005年8月，情况已经很明显，他们没有客户了。”他搬到了德克萨斯州奥斯汀，因此开始在那个地区找工作，发现摩托罗拉有一个非常合适的机会。“那是一个本地的工作。他们想要建立一个新的现代智能手机操作系统，能够在所有手机上发布，而不是只做一个一次性的产品。我加入的团队已经签署了一项收购PalmSource的协议^([16](#c13-footnote-16))，他们说我非常合适。听起来一切都很不错，所以我在2005年8月辞去了PalmSource的工作，加入了摩托罗拉。”
- en: 'But before the PalmSource deal closed, ACCESS swooped in and offered more money,
    and PalmSource took the higher bid. With the smartphone OS possibility at Motorola
    shut down, Jeff wasn’t very inspired to stick around. Fortunately, his colleagues
    from Be/PalmSource were in the process of interviewing with and joining the Android
    team at Google. Jeff heard about the opportunity from his friend Joe. “I said
    I didn’t know anything about search or the web, and I don’t want to start a new
    job remotely, not knowing anybody on the team. Joe said ‘Don’t worry about the
    first one, and you already know over half the team. Just come interview.’” Joe
    repaid Jeff’s favor of getting Joe in the door at Be years earlier by getting
    him hired even though he was remote: “He convinced Andy to hire me when I was
    in Austin and working from home.”'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 但在PalmSource交易关闭之前，ACCESS突然出价更高，PalmSource选择了更高的报价。由于摩托罗拉的智能手机操作系统计划被叫停，Jeff没有太大的动力留下来。幸运的是，他在Be/PalmSource的同事们正在面试并加入谷歌的Android团队。Jeff从他的朋友Joe那里听说了这个机会。“我说我对搜索和网络一无所知，我不想远程开始新工作，而且我不认识团队里的任何人。Joe说，‘别担心第一个问题，你已经认识团队的一半人了。来面试吧。’”Joe通过把Jeff引进Be的机会，回报了他多年前的帮助：“他说服Andy在我还在奥斯汀、在家工作的情况下雇佣我。”
- en: When Jeff started on the team, Android wasn’t so much a *platform* as a collection
    of random pieces of code, prototypes, and technology demos. “Joe had a demo of
    the window manager drawing a square—basic shapes on the screen. There was a guy^([17](#c13-footnote-17))
    working on telephony. Mathias was working on graphics. But nothing was functional.
    There wasn’t really an operating system.”
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当Jeff加入团队时，Android还不是一个*平台*，而只是一些随机的代码片段、原型和技术演示。“Joe有一个窗口管理器的演示，画了一个正方形——屏幕上的基本形状。还有一个人^([17](#c13-footnote-17))在做电话功能。Mathias在做图形工作。但当时没有任何功能。根本没有真正的操作系统。”
- en: One of Jeff’s first tasks came from Brian Swetland, building a protocol^([18](#c13-footnote-18))
    for debugging Android applications running on a device. Rather than implement
    his own system from scratch, Jeff got gdb (a standard debugging tool) up and running.
    This meant getting a bunch of other things working on the OS that gdb needed,
    like threading and support for debugging symbols.^([19](#c13-footnote-19))
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Jeff的第一个任务之一来自Brian Swetland，任务是为在设备上运行的Android应用程序构建一个调试协议^([18](#c13-footnote-18))。Jeff没有从头开始实现自己的系统，而是让gdb（一个标准的调试工具）运行起来。这意味着要在操作系统上让其他gdb需要的东西运行起来，比如线程和调试符号的支持^([19](#c13-footnote-19))。
- en: Once debugging was working, Jeff started work on Binder.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦调试工作完成，Jeff开始了Binder的开发。
- en: Binder
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Binder
- en: Binder was a concept that the engineers from PalmSource were familiar with from
    that previous company and OS.^([20](#c13-footnote-20)) Binder is an IPC^([21](#c13-footnote-21))
    mechanism. Whenever something happens on an operating system that needs to involve
    more than one process, IPC is a system for sending these messages between those
    different processes. For example, when the user types onto a keyboard on a PC,
    the system process sends a message with that information to the foreground application
    process to deal with that key event. An IPC system (Binder, in the case of Android)
    defines that communication mechanism.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Binder 是 PalmSource 工程师在之前的公司和操作系统中熟悉的概念^([20](#c13-footnote-20))。Binder 是一个进程间通信（IPC）^([21](#c13-footnote-21))
    机制。每当操作系统中发生需要多个进程参与的事件时，IPC 是用于在这些不同进程之间发送消息的系统。例如，当用户在 PC 上输入时，系统进程会将包含该信息的消息发送给前台应用程序进程，以处理该按键事件。IPC
    系统（在 Android 中是 Binder）定义了这种通信机制。
- en: On an Android device, many processes are running at all times, handling different
    parts of the system. There’s the system process, handling process management,
    application launching, window management, and other lower-level operating system
    features. There’s the telephony process, keeping the phone connection alive. There’s
    the foreground application that the user is actually interacting with. There’s
    the system UI, which handles the navigation buttons, the status bar, and notifications.
    And so on—there are many, many processes, and they all need to communicate with
    other processes at some point.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 设备上，许多进程始终在运行，处理系统的不同部分。系统进程处理进程管理、应用程序启动、窗口管理以及其他底层操作系统功能。电话进程保持电话连接活跃。前台应用程序是用户实际交互的应用。系统
    UI 负责导航按钮、状态栏和通知等等——有很多进程，它们都需要在某个时刻与其他进程进行通信。
- en: IPC mechanisms are typically simple and low-level, which was something that
    the former Danger engineers wanted. As Wei Huang put it, “Danger liked to do things
    fast. Simple and fast. But mostly simple.” But the team from Be, including Jeff,
    Joe, and Dianne, preferred the more full-featured (and complex) mechanism of the
    Binder approach that they had implemented at PalmSource. And since Binder was
    open sourced, it was available to use for this new platform.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: IPC 机制通常简单且底层，这正是前 Danger 工程师所希望的。正如 Wei Huang 所说：“Danger 喜欢做事快速。简单且快速。但主要是简单。”然而，包括
    Jeff、Joe 和 Dianne 在内的 Be 团队更倾向于采用 Binder 方法，这种方法在 PalmSource 中已经实现，功能更全（且更复杂）。而且，由于
    Binder 是开源的，因此可以用于这个新平台。
- en: 'This disagreement caused a problem between the teams. Mike Fleming was on the
    Danger side of the fence: “I was a Binder skeptic. I didn’t think it had been
    very well thought through. It’s true that they had done it at Palm. It was also
    true that they had never shipped it in a product.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这种分歧导致了团队之间的问题。Mike Fleming 站在 Danger 一方：“我是一个 Binder 怀疑者。我认为它并没有经过充分的考虑。确实，他们在
    Palm 做过，但同样也没有在产品中推出过。”
- en: “I was particularly upset with the fact that you had to make a blocking call^([22](#c13-footnote-22))
    to the Binder that would then make a blocking invocation on the other side. I
    felt that caused a lot of unnecessary threading, and it didn’t provide any value
    for my use case. Also, the original Binder Linux kernel driver was not fully robust.
    It took a lot of work to get it fully bullet-proof.”^([23](#c13-footnote-23))
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: “我特别生气的是，你必须进行一个阻塞调用^([22](#c13-footnote-22))，这个调用会在另一方进行一个阻塞调用。我觉得这会导致不必要的线程操作，而且对我的使用案例没有任何价值。而且，原始的
    Binder Linux 内核驱动并不完全健壮。要让它真正可靠，需要做大量的工作。”^([23](#c13-footnote-23))
- en: 'The Binder skeptics didn’t win that battle: Jeff and team forged ahead and
    implemented Binder, which became a fundamental part of the Android framework architecture.
    In the meantime, Mike ignored Binder for his telephony work: “I opened a Unix
    domain socket^([24](#c13-footnote-24)) between the Java process and the native
    interface layer process.”'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Binder 怀疑者没有赢得那场战斗：Jeff 和团队继续推进并实现了 Binder，Binder 成为 Android 框架架构的基础部分。与此同时，Mike
    在他的电话工作中忽略了 Binder：“我在 Java 进程和本地接口层进程之间打开了一个 Unix 域套接字^([24](#c13-footnote-24))。”
- en: Database
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库
- en: After Jeff got the initial Binder module working, he moved on to databases.
    Applications generally need to store information. If that data is anything non-trivial,
    they need something robust and full-featured; they need a database. At PalmSource,
    Jeff had worked with databases, but that company had wanted to create something
    new. Android wasn’t trying to invent anything; they just needed a solution. “I
    had looked at SQLite^([25](#c13-footnote-25)) and thought, if we’re trying to
    build our own phone and get it out the door ASAP, we probably shouldn’t build
    our own database system from scratch. SQLite is there—it works.” So Jeff ported
    the library to make it work on Android, creating APIs for app developers to be
    able to access it, and then moved onto the next project.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在Jeff让初始Binder模块工作后，他转向了数据库。应用通常需要存储信息。如果数据较为复杂，他们需要一个强大且功能齐全的解决方案；他们需要一个数据库。在PalmSource，Jeff曾与数据库打交道，但那家公司希望创造一些新的东西。Android并没有试图发明任何新东西；他们只需要一个解决方案。“我看过SQLite^([25](#c13-footnote-25))，我想，如果我们想要建立我们自己的手机并尽快推出，可能不应该从零开始构建自己的数据库系统。SQLite已经存在——它能用。”于是，Jeff将SQLite库移植到Android上，创建了供应用开发者访问的API，之后他继续转向下一个项目。
- en: Contacts and Other Apps
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 联系人和其他应用
- en: Because he was already dealing with application data, Jeff got pulled into a
    project to define how applications would share data. The data in someone’s contacts
    needed to be available to other applications on the device (to be able to, say,
    call or message a friend). This resulted in the ContentProvider APIs, which Jeff
    then used as he started working on the Contacts application. “Obviously, we should
    have an address book and a call log, so I started building the Contacts ContentProvider
    to have an address book so you could dial the phone.” Once that worked, he continued
    moving up the software stack to work on the UI of the Contacts application itself.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 因为他已经在处理应用数据，Jeff被拉入了一个项目，定义应用如何共享数据。某人的联系人数据需要对设备上的其他应用可用（例如，可以拨打电话或发信息给朋友）。这促成了ContentProvider
    APIs的出现，Jeff随后在开始开发Contacts应用时使用了这些API。“显然，我们应该有一个通讯录和通话记录，于是我开始构建Contacts ContentProvider，拥有一个通讯录，这样你就可以拨打电话了。”一旦这一功能实现，他继续往上移动软件栈，开始着手开发Contacts应用的UI。
- en: After Contacts, Jeff moved on to various other parts of the platform and the
    core applications. He helped out with the SMS app at one point, which was primarily
    being developed by Wei Huang. He also helped out on the telephony software that
    Mike Fleming was writing, and then assisted with the dialer app for the phone.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在Contacts之后，Jeff继续参与了平台的其他部分和核心应用。他曾在某个阶段帮助开发短信应用，那个应用主要由Wei Huang开发。他还帮助编写了Mike
    Fleming负责的电话软件，之后又协助了电话拨号应用的开发。
- en: Dialer and Contacts, at that time, were both part of the same application. Jeff
    wanted to make some operations easier in the Dialer, so he created a controversial
    UI feature he called “Strequent.” “In the dialer, there was one tab for your dialer,
    one tab for your call log, and one tab for your contacts. I created this other
    tab called Strequent. It was your starred contacts, followed by your frequently
    called people. Everyone thought it was really weird. I remember Steve Horowitz^([26](#c13-footnote-26))
    didn’t like it at all, but Rich Miner liked it.” Rich convinced Steve to take
    it.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当时，Dialer和Contacts是同一个应用的一部分。Jeff想要在Dialer中简化一些操作，于是他创建了一个有争议的UI功能，叫做“Strequent”。“在拨号器中，有一个标签是拨号器，一个标签是通话记录，还有一个标签是联系人。我创建了另一个标签叫Strequent。它是你的星标联系人，接着是你常拨打的联系人。大家觉得这真的很奇怪。我记得Steve
    Horowitz^([26](#c13-footnote-26))一点也不喜欢它，但Rich Miner却喜欢。”Rich说服Steve接受了这个功能。
- en: 'Jeff eventually worked on most of the core applications and ended up managing
    the apps team. He remembered a particular user issue with Calendar: “Sergey [Google’s
    co-founder] came by. The Calendar app was crashing. His wife was sharing her calendar
    to him from Outlook. It turned out that Outlook had recurring events with exceptions
    that we had never seen before. Our event parser was crashing.”'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Jeff最终参与了大多数核心应用的开发，并最终负责管理应用团队。他记得有一个特别的日历用户问题：“Sergey[Google的联合创始人]来了。Calendar应用崩溃了。他的妻子从Outlook向他共享了日历。结果发现Outlook中有一些带有例外的重复事件，这是我们之前从未见过的。我们的事件解析器崩溃了。”
- en: 'Jeff went to Sergey and explained the problem. “‘We figured out the problem:
    your calendar has some data in it that we’ve never seen before and didn’t expect,
    and it’s causing our app to crash.’ He said, ‘My data isn’t causing your app to
    crash! Your app is crashing on my data!’” Jeff remembered the situation clearly,
    many years later. It’s hard to forget a Google founder and executive arguing with
    you.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Jeff 去找 Sergey 解释问题。“‘我们找出了问题：你的日历里有一些我们以前从未见过的数据，我们没有预料到这些数据，导致我们的应用崩溃了。’他说，‘我的数据不会导致你们的应用崩溃！是你们的应用在我的数据上崩溃！’”Jeff
    记得多年后这个情况依然清晰。这种与谷歌创始人和高管争论的经历很难忘记。
- en: The process that Jeff went through, starting at the lowest level of the system
    to get a native debugger working, then working on core framework internals and
    APIs, then data functionality and APIs, and ending up writing applications using
    some of the lower-level stuff he’d built,^([27](#c13-footnote-27)) is a good example
    of what people on the team did. Nothing, essentially, existed before Jeff got
    there, so he helped create the pieces one by one, building each one on top of
    the previous ones as more functionality came online. In a similar way, everyone
    on the team was building things up from the very basics and moving up to higher-level
    functionality as they were able to, eventually writing the applications that defined
    the user experience of Android.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Jeff 所经历的过程，从系统的最低层开始让本地调试器工作，然后处理核心框架内部和 API，再到数据功能和 API，最后编写使用他构建的某些底层功能的应用程序，^([27](#c13-footnote-27))
    是团队成员所做工作的一个很好的例子。基本上，在 Jeff 到来之前什么都不存在，所以他帮助逐步创建这些模块，将每个新模块建立在前一个模块的基础上，随着更多功能的上线。以类似的方式，团队中的每个人都从最基础的部分开始构建，并随着能力的提升逐步实现更高层次的功能，最终编写出定义
    Android 用户体验的应用程序。
- en: Jason Parks Broke It
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Jason Parks 搞砸了
- en: Another Be/PalmSource alumnus who came to help out on Dianne’s framework team
    was Jason Parks, who joined the Android team at Google in the Spring of 2006.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个来帮助 Dianne 框架团队的 Be/PalmSource 校友是 Jason Parks，他于 2006 年春季加入了 Google 的 Android
    团队。
- en: 'Jason Parks (known to the team as “jparks”) had a catch phrase growing up:
    “I didn’t break it, but I know how to fix it!” This slogan and concept stuck with
    him, eventually resulting in error codes in OSes he worked on with the label `JPARKS_BROKE_IT`.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Jason Parks（团队称他为“jparks”）在成长过程中有一个口号：“我没有搞砸，但我知道如何修复！”这个口号和概念一直陪伴着他，最终他在自己工作的操作系统中使用了
    `JPARKS_BROKE_IT` 作为错误代码标签。
- en: Jason started programming early, learning BASIC in sixth grade. He continued
    programming through childhood and in college, but didn’t graduate. “I wasn’t really
    good with the words; I never finished the English courses. I had twenty-two credits
    to finish, but I applied to a job by accident.” Jason had been playing with BeOS
    on his own, so when he saw a job posting for Be, he applied.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Jason 很早就开始编程，从六年级时就学习 BASIC。儿童时期和大学期间他一直在编程，但并没有毕业。“我不是很擅长语言类课程，我从来没完成过英语课。我还差二十二个学分才能毕业，但我却意外地申请了一份工作。”Jason
    一直在自学 BeOS，因此当他看到 Be 的招聘广告时，他就申请了。
- en: “But I applied for the wrong job; I applied for a manager/architect position.
    In their system, you could only apply for one position at a time. I thought, ‘There
    goes that, I’ll have to let it go until they reset it.’ I got an email back for
    a phone interview for a job I was definitely not qualified for.” He ended up getting
    an interview and a job offer, but for a different position. He asked why they
    called him back when he’d clearly applied for the wrong job; he was told that
    his application caught their attention because he was so unqualified for the role.^([28](#c13-footnote-28))
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: “但我申请了错误的职位；我申请的是一个经理/架构师职位。在他们的系统中，你一次只能申请一个职位。我当时想，‘那就算了，得等他们重置了才能再申请。’结果我收到了一个电话面试的邮件，面试的是我显然不符合资格的职位。”最后他确实获得了面试机会和工作邀请，但职位不同。他问为什么他们会回邀他，明明他申请的是错误的职位，得到的回答是，他们之所以注意到他的申请，是因为他显然不符合该职位的要求。^([28](#c13-footnote-28))
- en: Jason worked with the other future Android people at Be, like Dianne, Jeff,
    and Joe, moved with them to Palm, and eventually left PalmSource to join the Android
    team.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Jason 曾与其他未来的 Android 人员一起在 Be 工作，比如 Dianne、Jeff 和 Joe，之后跟随他们转到 Palm，最终离开 PalmSource
    加入 Android 团队。
- en: Like Jeff and Joe, Jason also worked on many different areas of the platform.
    His first week, he worked on software to deal with time zones. Then he got telephony
    data working during his second week. He then moved on to various bits of the framework
    and apps over time.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 和 Jeff、Joe 一样，Jason 也参与了平台的多个不同领域。他的第一周，他在做处理时区的软件。然后在第二周，他让电话数据正常工作。接着随着时间的推移，他转向了框架和应用的其他部分。
- en: Jason also played an important role in the overall organization—getting people
    to do stuff. One of the ways this happened was as a moderator between different
    groups. When people had disagreements (such as the various Danger-vs.-PalmSource-factions
    conflicts), Jason would try to mitigate those problems. “When the telephony guy
    was upset around APIs, he’d come to me and ask me to go talk to them [the framework
    team]. Same with Swetland. Horowitz would send me to talk to Swetland to calm
    him down. Between Mike [Cleron] and me and Dianne, we had a good working relationship.
    I’d explain to others the way things should be done.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Jason 在整个组织中也扮演了重要角色——让人们去做事。这样的一种方式是作为不同小组之间的调解人。当人们有分歧时（比如各种 Danger 与 PalmSource
    派系之间的冲突），Jason 会尽力化解这些问题。“当通讯团队的成员对 API 感到不满时，他会来找我，让我去和他们[框架团队]沟通。Swetland 也是如此。Horowitz
    会派我去找 Swetland 跟他谈一谈，平息他的情绪。我和 Mike [Cleron] 以及 Dianne 之间有很好的合作关系。我会向其他人解释事情应该怎么做。”
- en: “There were a lot of hotheads, a lot of conflict. Not only did you have the
    PalmSource/Danger thing, you had Googlers coming in saying ‘This is the way you
    must do it.’ But I think that conflict helped us.”
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: “这里有很多急性子的人，很多冲突。不仅有 PalmSource/Danger 的问题，还有一些 Google 员工进来说‘你们必须这样做’。但我认为这些冲突对我们有帮助。”
- en: Jason would also be tasked by Steve Horowitz to make sure that certain things
    happened. “Some people on the team called me the bulldog, because I was Steve’s
    attack dog. When he needed something done, he would send me in.”
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Jason 还会被 Steve Horowitz 指派确保某些事情的发生。“团队中的一些人称我为斗牛犬，因为我是 Steve 的攻击犬。当他需要完成某件事时，他会派我去做。”
- en: Frameworking
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 框架开发
- en: The list of projects happening on the framework team goes on and on, because
    it really is the heart and soul of the Android platform. So much of the rest of
    the system is reliant upon the fundamentals that were created on this team by
    Dianne, Jeff, Jason, and others. And it was all built from scratch, starting when
    these people began joining the team in late 2005\. Meanwhile, the other pieces
    and apps of the platform were being built on top of the framework, like building
    the plane while it’s flying with a cabin full of passengers, all hoping it reaches
    the destination before it reaches the ground.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 框架团队上进行的项目清单长得让人难以置信，因为它真的就是 Android 平台的核心。系统的许多其他部分都依赖于 Dianne、Jeff、Jason 和其他人在这个团队中创建的基础工作。而这一切都是从零开始构建的，始于这些人于
    2005 年底加入团队时。与此同时，平台的其他部分和应用也在框架之上构建，就像是在飞机飞行中还要建造飞机，而机舱里挤满了乘客，大家都希望飞机在坠落之前能够抵达目的地。
