- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Framework
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502680c13/f13001.png)'
  prefs: []
  type: TYPE_IMG
- en: Whenever Dan Sandler visited the Mountain View offices, he’d usually leave behind
    some whiteboard art in his wake. This one showed up in the framework area on one
    of those trips.
  prefs: []
  type: TYPE_NORMAL
- en: 'F*ramework*^([1](#c13-footnote-1)) is the term that the Android team applies
    to a large chunk of the core platform that encompasses the internal operating
    system level stuff (the bits of software that underlie almost everything else
    on the system except the kernel), along with the APIs that applications use to
    access those features. Examples of framework functionality include:'
  prefs: []
  type: TYPE_NORMAL
- en: The package manager, responsible for installing and managing applications on
    the device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Power management, controlling, for example, the brightness settings of the screen
    (the screen being the heaviest user of power on any device).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Window management, displaying applications on the screen and animating them
    in and out as they open and close.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input, receiving information from the touchscreen hardware and turning it into
    input events that are routed to applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activity manager, handling the multitasking system on Android, deciding things
    like which applications to kill when memory is getting low on the device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the framework engineers started arriving onto Android in late 2005, none
    of this existed, so the people who started on the Android team back then had to
    build the framework, piece by piece.
  prefs: []
  type: TYPE_NORMAL
- en: Dianne Hackborn and the Android Framework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The person whose work defines most the shape [of the Android platform] is clearly
    Dianne. I’m sure she would probably downplay her influence here. But she’s wrong.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Ficus Kirkpatrick
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: By the end of 2005, some of the pieces of what would become the framework were
    started, but there was still a long way to go, including APIs for applications
    to use and all of the other capabilities that the system required. Then Dianne
    Hackborn joined the team.
  prefs: []
  type: TYPE_NORMAL
- en: Dianne (also known to the team as “hackbod”^([2](#c13-footnote-2))) is, as most
    people on the team would agree, the person who best understands the entire breadth
    of the Android framework and the overall platform. For one thing, she has a comprehensive
    understanding of how all of the pieces in the platform fit together, along with
    an extensive knowledge of operating systems and APIs in general.
  prefs: []
  type: TYPE_NORMAL
- en: Also, she wrote most of the framework code.
  prefs: []
  type: TYPE_NORMAL
- en: Dianne came from computer royalty. Her father started the printer division at
    Hewlett-Packard and was under consideration for CEO at some point. At an age when
    other kids were experiencing computers through playing video games, she was into
    system design. “I would look into the way the system works, and the ways that
    it worked with applications and threading.”
  prefs: []
  type: TYPE_NORMAL
- en: After college, she worked at Lucent Technologies, while playing with BeOS in
    her spare time (“writing frameworks, some applications. UI layout frameworks .
    . . that kind of stuff”). Eventually, she wanted that work to be more than a side
    interest, and moved to the Bay Area to work for Be.
  prefs: []
  type: TYPE_NORMAL
- en: “That was at the time of the dot-com boom. You’re working at a company that
    isn’t making any money, not sure how you’re going to make money, but everybody
    wants to work on operating systems. That’s why they’re there. It’s not about making
    money.”^([3](#c13-footnote-3))
  prefs: []
  type: TYPE_NORMAL
- en: Dianne started at Be in late 1999, joining a group of people there that she
    would work with later at PalmSource, and then again when she joined Android. She
    worked on the framework at Be and then again at PalmSource.
  prefs: []
  type: TYPE_NORMAL
- en: At Be, Dianne worked on the next version of BeOS, but that was the end of the
    line for that operating system. “They were trying to compete with Microsoft. You
    can’t compete with the entrenched platform. Unless they shoot themselves in the
    foot, it is impossible because their ecosystem has so much momentum that anything
    you do better than them, they have years to react to you for it to matter.
  prefs: []
  type: TYPE_NORMAL
- en: “And it’s chicken and egg. You have to get users to get app developers interested
    in you, and you have to get developers to get users interested in you. You can
    get some users, but anywhere you try to gain momentum, the dominant platform can
    go address that particular market and kill you. It’s just impossible.”
  prefs: []
  type: TYPE_NORMAL
- en: Eventually, Palm acquired Be, because Palm had plans to build a more robust
    OS for their devices and needed engineers with the right expertise to make it
    happen. It was Dianne’s introduction to mobile computing. “I had never thought
    about mobile at the time. But once I started looking at Palm, that’s when I got
    really interested. That seemed like the way you compete with Microsoft. It’s a
    new kind of device, so if you can be the platform on that device, then you have
    a bigger ecosystem than Windows and you have a chance. You could see the writing
    on the wall. The hardware was getting more powerful, and the market was already
    bigger than PCs.”
  prefs: []
  type: TYPE_NORMAL
- en: But PalmSource was struggling. The original idea with their spinout from Palm
    was that they would provide the OS that Palm (and other companies) would use.
    But by the time PalmSource came up with Palm OS 6,^([4](#c13-footnote-4)) Palm
    had decided to just continue using the OS they began with when Palm and PalmSource
    split. Then a deal fell through when the team was nearly done with a product-quality
    OS on a potential Samsung device. After that, there were no other buyers in sight
    for the OS, so the company started shopping itself around to be acquired.
  prefs: []
  type: TYPE_NORMAL
- en: There’s an interesting dynamic of mobile OSes that Dianne and the team were
    forced to deal with at the time, which would resurface (more successfully) later
    on Android. “It was really hard to get phone manufacturers interested in someone
    else’s platform. They did their own software and they were terrified of phones
    becoming the same as PCs, where there’s one software vendor that owns the platform
    that commoditizes the hardware.”
  prefs: []
  type: TYPE_NORMAL
- en: That model of hardware companies creating their own OS worked when software
    was simpler. Handling phone calls and contact information for a flip phone was
    well within the capabilities of all of those companies. But when the required
    capabilities and feature sets kept increasing, especially after the iPhone launched,
    it was difficult for those companies to keep up. The companies that needed an
    OS in the wake of the iPhone launch were looking for something far more complex
    than they could create on their own, and were therefore more willing to work with
    Android.
  prefs: []
  type: TYPE_NORMAL
- en: “The software becomes more valuable than the hardware. Most of your investment
    is now in the software. And if that’s the case, then whoever can invest the most
    in the software is going to be the most compelling, and that’s probably someone
    dedicated to a platform that works across different hardware.”
  prefs: []
  type: TYPE_NORMAL
- en: Part of Palm OS 6 was a powerful UI framework. Motorola, a potential suitor
    of PalmSource, was interested in that framework and in Palm OS 6 in general for
    its own devices. But Motorola’s acquisition attempt failed, and PalmSource was
    acquired by ACCESS Co., Ltd. “It would have been really interesting to get acquired
    by Motorola. We were all hoping for that. They wanted to take what we were doing
    and use it.” ACCESS, on the other hand, was not on board with the current direction.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the acquisition, ACCESS changed the team’s OS strategy. Dianne and her
    team were done. “PalmSource was over. Handset manufacturers didn’t want to touch
    someone else’s platform, because they didn’t want to be an enabler. I was seeing
    my team out the door (I was managing the framework team there). Mathias and Joe
    were leaving. They came to me and said ‘you should come over to Google—there’s
    really cool stuff going on here.’ They gave me hints: ‘It’s a platform . . . it’s
    open source . . . .’ Work at Google doing an open source mobile platform where
    you don’t have to worry about money? How can you say no to that? It’s, like, perfect.”'
  prefs: []
  type: TYPE_NORMAL
- en: Dianne joined Google and started on the Android team in January of 2006.
  prefs: []
  type: TYPE_NORMAL
- en: 'She was introduced to Google’s take on the Android strategy early on. “When
    I joined, the way Larry and Sergey were talking about it, and the way Andy was
    presenting it, they didn’t want just a product. It was grander than that: the
    future survival of Google. They didn’t want a company with a closed proprietary
    platform to own and control the space, like Microsoft owns the PC platform. It
    wasn’t about needing to make money.”^([5](#c13-footnote-5))'
  prefs: []
  type: TYPE_NORMAL
- en: Activities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It’s hard to out-code Dianne when she’s on fire. She had a vision of what she
    wanted, and she just sat down and typed it out.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Jeff Hamilton
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: After she joined Android, Dianne started working on many of the fundamental
    pieces of what’s now called the framework. One of those pieces was Activities,
    which she took over from some initial work by Joe Onorato.
  prefs: []
  type: TYPE_NORMAL
- en: Activities, which evolved from longer-term ideas that the team was thinking
    about earlier when they were at PalmSource, are a uniquely Android way of managing
    applications. On a more traditional OS, an application starts, calls its `main()`
    method, and then just starts doing things in a loop (drawing, polling for input,
    doing any necessary calculations, and so on). On Android, an application is broken
    down into one or more “activity” pieces, each of which has its own window. Activities
    (and applications) have no `main()` method, but instead are called by the OS in
    response to events, like activity creation/destruction and user input.
  prefs: []
  type: TYPE_NORMAL
- en: Another important element of Activities is that they define specific entry points
    that can be called from other applications, like notifications or shortcuts in
    the system UI that can take the user to a place inside of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dianne said, “Palm had a really good understanding of mobile devices. One of
    the things we learned there was that mobile apps are fundamentally different from
    desktop apps: the user can only be in one at a time, and they tend to be small
    and focused on a particular task. Out of this grew a need to easily have apps
    work together. Palm OS had this hack called ‘sublaunching’ that allowed one app
    to effectively call in to another app, to do something like show a UI for the
    user to add a contact. We viewed this as an important feature for mobile apps,
    but needed to formalize it into a well-defined concept so it would be more robust
    and work in a complex multi-process protected memory (and app-sandboxed) environment.
    Thus Activities, which define the ways apps can expose parts of themselves for
    other apps (and the system) to launch as needed.”'
  prefs: []
  type: TYPE_NORMAL
- en: Activities were a powerful concept for Android. They were also at the heart
    of one of the first big disagreements on the engineering team. There was certainly
    more complexity associated with Activities than the more traditional approach
    that some people preferred. In particular, Android’s application lifecycle (handling
    activity creation/destruction/etc.) continues to be difficult to understand, and
    dealing with its complexities tends to be a hard and error-prone chore for many
    Android developers.
  prefs: []
  type: TYPE_NORMAL
- en: As Jeff Hamilton (a framework engineer that we’ll read about soon) told it,
    “In the early days of Android, there were two competing visions of what the OS
    should look like. One was around the fuzzy nature of Activities, and one where
    there’s a `main()` that gets called. Dianne and Joe were pushing on the notion
    of the more modular app setup with Activities.
  prefs: []
  type: TYPE_NORMAL
- en: “There were a bunch of other people, like Mike Fleming,^([6](#c13-footnote-6))
    in the other camp that were pushing more for a simple model. There was a big conflict
    there for a while.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Mike Fleming said, “I was a skeptic of the application lifecycle. I was concerned
    that it was too complicated.” Wei Huang^([7](#c13-footnote-7)) agreed: “There
    are certain points where I think the activity lifecycle is overly complicated.
    It grew a little bit out of control.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'But the team decided to go with the Activities approach. Jeff explained how
    that happened: “Dianne had a vision of what she wanted, and she just sat down
    and typed it out. That’s the way it worked, because she was productive and got
    things done.”'
  prefs: []
  type: TYPE_NORMAL
- en: This model of decision making happened elsewhere as well, such as the initial
    View system that Joe implemented. The team didn’t have a lot of time for meetings
    and committees and debates on how things should work, so eventually someone would
    simply bang out a solution and things would move on from there. As Dianne said,
    “There were so few people that if you do it, you just do it. There was lots of
    discussion between people, but it was instigated by the person working on the
    thing.” Romain Guy (who joined later to work on the UI toolkit) added, “What was
    most respected [at Android] was someone just making something happen.” And often,
    that someone was Dianne.
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dianne also worked on the resource system,^([8](#c13-footnote-8)) which is another
    very Android concept. On Android, application developers are able to define different
    versions of text, images, sizes, and other elements of their apps, in what are
    called *resource files*.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you might have a button in your application that should say *Click*
    so that the user knows to click that button. But the word *Click* only makes sense
    if the user speaks English. What if they speak Russian instead? Or French? Or
    . . . any other non-English language? Developers use resource files to store different
    versions of that string for different languages. When the button is populated
    with a string, the resource system chooses the version that is appropriate for
    the language that the user has selected on their phone.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, developers can define what the UI looks like for screen configurations,
    and can use different image sizes based on different screen densities. Again,
    the resource system loads the appropriate variation when the application launches,
    depending on the user’s device.
  prefs: []
  type: TYPE_NORMAL
- en: Resources, and the way that they are used to solve the variable-density problem
    in particular, are a great example of how Android was developed as a software
    platform, not just as a single phone product, even in those early days before
    1.0\. If the team was just targeting a particular device, with a predefined screen
    size (as most manufacturers did at that time), none of this would have been necessary.
    But then applications would have been written with those initial assumptions firmly
    in place. When different sized screens came along later, those apps wouldn’t look
    right.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dianne: “These devices were different from the desktop because the device has
    much more impact on applications than on desktop. On desktop you can have a bigger
    screen, but it doesn’t really matter for apps, you may just be able to resize
    the windows. But on these devices, if the screen gets bigger, then the apps need
    to draw correctly on that bigger screen.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another factor was screen density.^([9](#c13-footnote-9)) “On the desktop,
    the density never changes. But we knew that the density [for mobile devices] would
    change. We saw this happen at Palm. We needed to design something that would let
    us evolve the platform over the long term, because we had seen what happened with
    Palm OS and its more minimalist approach. Getting it to support different screen
    densities was a disaster. We’ve always [for the Android platform] approached this
    as: ‘We’re building this for mobile devices, but we want this thing to scale and
    address other use cases in the long term.’”'
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, iOS and the iPhone didn’t take density into consideration in the
    beginning. “Apple didn’t think about this stuff. Apple is one of the few hardware
    companies that can also do high quality software development. Most hardware companies
    are focused on the hardware product, and the software is just something needed
    for the hardware. Apple is able to approach the software as something that they
    invest in long-term, separately from a particular hardware product. But you still
    see stuff where they are hardware-oriented, like ‘We want to change the size of
    the screen . . . we didn’t think about that.’”
  prefs: []
  type: TYPE_NORMAL
- en: WindowManager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dianne says, “I’m gonna make a window manager,” and typity-type-type, there’s
    a window manager.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Mike Cleron
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Dianne also, long before 1.0 shipped, wrote the WindowManager, which handles
    windows opening, closing, animating in, and animating out. It’s notable because
    of both the complexity of the problems it had to solve and the fact that Dianne
    wrote it all as just one of the many things she was doing.^([10](#c13-footnote-10))
  prefs: []
  type: TYPE_NORMAL
- en: Soft Keyboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After 1.0 shipped, there was still plenty of work to do. One of the things that
    Dianne worked on at that time, along with Amith Yamasani on the framework team,
    was support for the *soft* *keyboard*, or the on-screen keyboard that touch-only
    devices needed.
  prefs: []
  type: TYPE_NORMAL
- en: The original G1 had a hardware keyboard. Entering text into an application required
    flipping that keyboard out. This mechanism worked fine (and in fact many smartphone
    users continued to prefer hardware keyboards for years after that, especially
    BlackBerry fans). But the demand for larger screens and smaller devices meant
    that support for an all-touch device, with an on-screen keyboard, was critical.
    In fact, the device that was going to launch with the upcoming Cupcake release
    would have no hardware keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: In typical Android development fashion, the soft keyboard wasn’t just hacked
    into the framework. Android was known for making trade-offs to get performance
    or to hit ship dates, but the team always prioritized creating general platform
    capabilities instead of hacks for specific product features, which was the case
    for their keyboard solution. The team created a system to provide extensible and
    flexible support for generalized input. For example, the keyboard support wasn’t
    just called *keyboard*, but rather Input Method Editor (IME). It wasn’t sufficient
    to simply provide support for typing on a regular keyboard, but rather the system
    needed to accept input from any kind of input mechanism, including speech.
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, input support was built not just as an internal mechanism
    for the framework to use, but also as an extensible feature that developers could
    take advantage of. Android supplied the Input Method Framework (IMF) that would
    accept input from any user-supplied IME, not just the keyboard that shipped with
    the Android system. That is, Android didn’t just supply a soft keyboard for users;
    they also provided APIs for developers to create their own keyboard apps that
    users could use instead. The short-term need was for an input system that was
    good enough for most use cases. But the team recognized that there might be other
    experiences out there, or other capabilities, that users wanted and developers
    could help out with, so they built the system to allow it. Even when there were
    only a couple of Android devices out on the market, the team was playing the long
    game, anticipating a potentially large and diverse ecosystem of devices and users.
  prefs: []
  type: TYPE_NORMAL
- en: Dianne said, “I don’t recall it ever being much of a consideration to go down
    the path of hard-coding it into the platform. From a practical matter of being
    able to address the needs of different languages, we thought this should be a
    user-selectable component.”
  prefs: []
  type: TYPE_NORMAL
- en: IME support is a great example of what attracted many developers (and users)
    to Android early on. The early devices like the G1 weren’t the most beautiful
    smartphones available, but the power and flexibility of the open ecosystem was
    attractive to many users and developers. The iPhone eventually offered the ability
    to have keyboard apps besides the one that came bundled with iOS, but that was
    much later, long after Android developers could offer those apps.
  prefs: []
  type: TYPE_NORMAL
- en: In 2009, Shumin Zhai was working in research at IBM. He was investigating alternative
    input mechanisms, using an app he built called ShapeWriter.^([11](#c13-footnote-11))
    Rather than typing in each letter, his app allowed a user to slide their finger
    around the keyboard, tracing out a shape as they navigated between the letters
    of each word. His keyboard interpreted these shapes as words, using probabilities
    and heuristics to determine the words the user was tracing out.
  prefs: []
  type: TYPE_NORMAL
- en: Shumin built the ShapeWriter with Per Ola Kristensson in 2004, releasing it
    originally on the Windows Tablet PC. They later released ShapeWriter for the iPhone
    in 2008, but it would only work with a note-taking app that they also supplied,
    because the iPhone had no equivalent of Android’s IMF at the time, so it could
    not take the place of the system keyboard. When Android released support for the
    IMF, in the Cupcake release in mid-2009, Shumin switched ShapeWriter’s focus to
    Android, releasing the app on Android Market later that year.^([12](#c13-footnote-12))
  prefs: []
  type: TYPE_NORMAL
- en: He particularly liked developing for Android^([13](#c13-footnote-13)) because
    it gave him the ability to experiment, to swap out the system keyboard for his
    own so that he could provide this new capability. Shumin was a researcher, which
    might not seem like a huge target market to go after. But around the same time,
    a company released a popular app on Android called Swype, which had similar gesture-typing
    capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Shumin eventually joined the Android team and led the team that implemented
    Gesture Typing for Android’s standard IME. Now that capability of tracing out
    words is built into Android’s keyboard by default. But Android still allows developers
    to supply their own keyboard apps for customizations and capabilities that developers
    want to create.
  prefs: []
  type: TYPE_NORMAL
- en: Jeff Hamilton Works His Way Up the Stack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Despite Dianne’s legendary productivity, there was still much more that needed
    to be done to make the entire framework come into being than she could handle
    on her own. A few other people were also writing copious amounts of framework
    code. One of those people was Jeff Hamilton (known to the team as “jham”).
  prefs: []
  type: TYPE_NORMAL
- en: Jeff started at Google on the same day as Dianne. They had worked together on
    framework code at Be and PalmSource, and were about to do so again on Android.
  prefs: []
  type: TYPE_NORMAL
- en: Jeff’s work on platforms began when he landed at Be for an internship during
    college. He actually failed his interview, because of his answer about how interrupt
    handlers^([14](#c13-footnote-14)) worked on BeOS, which was different from how
    they worked on Linux. He went home to research the difference and sent in an explanation,
    along with the correct answer, and the team changed their mind. They hired him
    for the summer, and for the next year while he was at college . . . and eventually
    for a full-time job when he finished college.
  prefs: []
  type: TYPE_NORMAL
- en: 'At Be, Jeff was on the kernel team, working on drivers for hardware like the
    touchscreen display and USB. He also got a good introduction to getting started
    at a scrappy Silicon Valley company: “First day, they showed me to my cube and
    it had a case and keyboard. They said, ‘There’s a motherboard over there, go ask
    George for a CPU.’ They didn’t have any RAM, I had to buy some at Fry’s.”^([15](#c13-footnote-15))'
  prefs: []
  type: TYPE_NORMAL
- en: After college, Jeff joined Be full time, and eventually joined PalmSource after
    that acquisition in 2001\. But like other members of the team, including Joe,
    Dianne, and Mathias, Jeff eventually tired of PalmSource. “By August 2005, it
    seemed pretty clear that they had no customers.” He had moved to Austin, Texas,
    so he looked for jobs in that area and found an opportunity at Motorola that looked
    perfect. “It’d be a local job. They wanted to build a new, modern smartphone OS,
    ship on all the phones instead of a one-off. The group I was joining had signed
    a deal to acquire PalmSource;^([16](#c13-footnote-16)) they said I’d fit right
    in. It all sounded really good, so I quit PalmSource, joined Motorola in August
    of 2005.”
  prefs: []
  type: TYPE_NORMAL
- en: 'But before the PalmSource deal closed, ACCESS swooped in and offered more money,
    and PalmSource took the higher bid. With the smartphone OS possibility at Motorola
    shut down, Jeff wasn’t very inspired to stick around. Fortunately, his colleagues
    from Be/PalmSource were in the process of interviewing with and joining the Android
    team at Google. Jeff heard about the opportunity from his friend Joe. “I said
    I didn’t know anything about search or the web, and I don’t want to start a new
    job remotely, not knowing anybody on the team. Joe said ‘Don’t worry about the
    first one, and you already know over half the team. Just come interview.’” Joe
    repaid Jeff’s favor of getting Joe in the door at Be years earlier by getting
    him hired even though he was remote: “He convinced Andy to hire me when I was
    in Austin and working from home.”'
  prefs: []
  type: TYPE_NORMAL
- en: When Jeff started on the team, Android wasn’t so much a *platform* as a collection
    of random pieces of code, prototypes, and technology demos. “Joe had a demo of
    the window manager drawing a square—basic shapes on the screen. There was a guy^([17](#c13-footnote-17))
    working on telephony. Mathias was working on graphics. But nothing was functional.
    There wasn’t really an operating system.”
  prefs: []
  type: TYPE_NORMAL
- en: One of Jeff’s first tasks came from Brian Swetland, building a protocol^([18](#c13-footnote-18))
    for debugging Android applications running on a device. Rather than implement
    his own system from scratch, Jeff got gdb (a standard debugging tool) up and running.
    This meant getting a bunch of other things working on the OS that gdb needed,
    like threading and support for debugging symbols.^([19](#c13-footnote-19))
  prefs: []
  type: TYPE_NORMAL
- en: Once debugging was working, Jeff started work on Binder.
  prefs: []
  type: TYPE_NORMAL
- en: Binder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Binder was a concept that the engineers from PalmSource were familiar with from
    that previous company and OS.^([20](#c13-footnote-20)) Binder is an IPC^([21](#c13-footnote-21))
    mechanism. Whenever something happens on an operating system that needs to involve
    more than one process, IPC is a system for sending these messages between those
    different processes. For example, when the user types onto a keyboard on a PC,
    the system process sends a message with that information to the foreground application
    process to deal with that key event. An IPC system (Binder, in the case of Android)
    defines that communication mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: On an Android device, many processes are running at all times, handling different
    parts of the system. There’s the system process, handling process management,
    application launching, window management, and other lower-level operating system
    features. There’s the telephony process, keeping the phone connection alive. There’s
    the foreground application that the user is actually interacting with. There’s
    the system UI, which handles the navigation buttons, the status bar, and notifications.
    And so on—there are many, many processes, and they all need to communicate with
    other processes at some point.
  prefs: []
  type: TYPE_NORMAL
- en: IPC mechanisms are typically simple and low-level, which was something that
    the former Danger engineers wanted. As Wei Huang put it, “Danger liked to do things
    fast. Simple and fast. But mostly simple.” But the team from Be, including Jeff,
    Joe, and Dianne, preferred the more full-featured (and complex) mechanism of the
    Binder approach that they had implemented at PalmSource. And since Binder was
    open sourced, it was available to use for this new platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'This disagreement caused a problem between the teams. Mike Fleming was on the
    Danger side of the fence: “I was a Binder skeptic. I didn’t think it had been
    very well thought through. It’s true that they had done it at Palm. It was also
    true that they had never shipped it in a product.'
  prefs: []
  type: TYPE_NORMAL
- en: “I was particularly upset with the fact that you had to make a blocking call^([22](#c13-footnote-22))
    to the Binder that would then make a blocking invocation on the other side. I
    felt that caused a lot of unnecessary threading, and it didn’t provide any value
    for my use case. Also, the original Binder Linux kernel driver was not fully robust.
    It took a lot of work to get it fully bullet-proof.”^([23](#c13-footnote-23))
  prefs: []
  type: TYPE_NORMAL
- en: 'The Binder skeptics didn’t win that battle: Jeff and team forged ahead and
    implemented Binder, which became a fundamental part of the Android framework architecture.
    In the meantime, Mike ignored Binder for his telephony work: “I opened a Unix
    domain socket^([24](#c13-footnote-24)) between the Java process and the native
    interface layer process.”'
  prefs: []
  type: TYPE_NORMAL
- en: Database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After Jeff got the initial Binder module working, he moved on to databases.
    Applications generally need to store information. If that data is anything non-trivial,
    they need something robust and full-featured; they need a database. At PalmSource,
    Jeff had worked with databases, but that company had wanted to create something
    new. Android wasn’t trying to invent anything; they just needed a solution. “I
    had looked at SQLite^([25](#c13-footnote-25)) and thought, if we’re trying to
    build our own phone and get it out the door ASAP, we probably shouldn’t build
    our own database system from scratch. SQLite is there—it works.” So Jeff ported
    the library to make it work on Android, creating APIs for app developers to be
    able to access it, and then moved onto the next project.
  prefs: []
  type: TYPE_NORMAL
- en: Contacts and Other Apps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because he was already dealing with application data, Jeff got pulled into a
    project to define how applications would share data. The data in someone’s contacts
    needed to be available to other applications on the device (to be able to, say,
    call or message a friend). This resulted in the ContentProvider APIs, which Jeff
    then used as he started working on the Contacts application. “Obviously, we should
    have an address book and a call log, so I started building the Contacts ContentProvider
    to have an address book so you could dial the phone.” Once that worked, he continued
    moving up the software stack to work on the UI of the Contacts application itself.
  prefs: []
  type: TYPE_NORMAL
- en: After Contacts, Jeff moved on to various other parts of the platform and the
    core applications. He helped out with the SMS app at one point, which was primarily
    being developed by Wei Huang. He also helped out on the telephony software that
    Mike Fleming was writing, and then assisted with the dialer app for the phone.
  prefs: []
  type: TYPE_NORMAL
- en: Dialer and Contacts, at that time, were both part of the same application. Jeff
    wanted to make some operations easier in the Dialer, so he created a controversial
    UI feature he called “Strequent.” “In the dialer, there was one tab for your dialer,
    one tab for your call log, and one tab for your contacts. I created this other
    tab called Strequent. It was your starred contacts, followed by your frequently
    called people. Everyone thought it was really weird. I remember Steve Horowitz^([26](#c13-footnote-26))
    didn’t like it at all, but Rich Miner liked it.” Rich convinced Steve to take
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jeff eventually worked on most of the core applications and ended up managing
    the apps team. He remembered a particular user issue with Calendar: “Sergey [Google’s
    co-founder] came by. The Calendar app was crashing. His wife was sharing her calendar
    to him from Outlook. It turned out that Outlook had recurring events with exceptions
    that we had never seen before. Our event parser was crashing.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'Jeff went to Sergey and explained the problem. “‘We figured out the problem:
    your calendar has some data in it that we’ve never seen before and didn’t expect,
    and it’s causing our app to crash.’ He said, ‘My data isn’t causing your app to
    crash! Your app is crashing on my data!’” Jeff remembered the situation clearly,
    many years later. It’s hard to forget a Google founder and executive arguing with
    you.'
  prefs: []
  type: TYPE_NORMAL
- en: The process that Jeff went through, starting at the lowest level of the system
    to get a native debugger working, then working on core framework internals and
    APIs, then data functionality and APIs, and ending up writing applications using
    some of the lower-level stuff he’d built,^([27](#c13-footnote-27)) is a good example
    of what people on the team did. Nothing, essentially, existed before Jeff got
    there, so he helped create the pieces one by one, building each one on top of
    the previous ones as more functionality came online. In a similar way, everyone
    on the team was building things up from the very basics and moving up to higher-level
    functionality as they were able to, eventually writing the applications that defined
    the user experience of Android.
  prefs: []
  type: TYPE_NORMAL
- en: Jason Parks Broke It
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another Be/PalmSource alumnus who came to help out on Dianne’s framework team
    was Jason Parks, who joined the Android team at Google in the Spring of 2006.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jason Parks (known to the team as “jparks”) had a catch phrase growing up:
    “I didn’t break it, but I know how to fix it!” This slogan and concept stuck with
    him, eventually resulting in error codes in OSes he worked on with the label `JPARKS_BROKE_IT`.'
  prefs: []
  type: TYPE_NORMAL
- en: Jason started programming early, learning BASIC in sixth grade. He continued
    programming through childhood and in college, but didn’t graduate. “I wasn’t really
    good with the words; I never finished the English courses. I had twenty-two credits
    to finish, but I applied to a job by accident.” Jason had been playing with BeOS
    on his own, so when he saw a job posting for Be, he applied.
  prefs: []
  type: TYPE_NORMAL
- en: “But I applied for the wrong job; I applied for a manager/architect position.
    In their system, you could only apply for one position at a time. I thought, ‘There
    goes that, I’ll have to let it go until they reset it.’ I got an email back for
    a phone interview for a job I was definitely not qualified for.” He ended up getting
    an interview and a job offer, but for a different position. He asked why they
    called him back when he’d clearly applied for the wrong job; he was told that
    his application caught their attention because he was so unqualified for the role.^([28](#c13-footnote-28))
  prefs: []
  type: TYPE_NORMAL
- en: Jason worked with the other future Android people at Be, like Dianne, Jeff,
    and Joe, moved with them to Palm, and eventually left PalmSource to join the Android
    team.
  prefs: []
  type: TYPE_NORMAL
- en: Like Jeff and Joe, Jason also worked on many different areas of the platform.
    His first week, he worked on software to deal with time zones. Then he got telephony
    data working during his second week. He then moved on to various bits of the framework
    and apps over time.
  prefs: []
  type: TYPE_NORMAL
- en: Jason also played an important role in the overall organization—getting people
    to do stuff. One of the ways this happened was as a moderator between different
    groups. When people had disagreements (such as the various Danger-vs.-PalmSource-factions
    conflicts), Jason would try to mitigate those problems. “When the telephony guy
    was upset around APIs, he’d come to me and ask me to go talk to them [the framework
    team]. Same with Swetland. Horowitz would send me to talk to Swetland to calm
    him down. Between Mike [Cleron] and me and Dianne, we had a good working relationship.
    I’d explain to others the way things should be done.
  prefs: []
  type: TYPE_NORMAL
- en: “There were a lot of hotheads, a lot of conflict. Not only did you have the
    PalmSource/Danger thing, you had Googlers coming in saying ‘This is the way you
    must do it.’ But I think that conflict helped us.”
  prefs: []
  type: TYPE_NORMAL
- en: Jason would also be tasked by Steve Horowitz to make sure that certain things
    happened. “Some people on the team called me the bulldog, because I was Steve’s
    attack dog. When he needed something done, he would send me in.”
  prefs: []
  type: TYPE_NORMAL
- en: Frameworking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The list of projects happening on the framework team goes on and on, because
    it really is the heart and soul of the Android platform. So much of the rest of
    the system is reliant upon the fundamentals that were created on this team by
    Dianne, Jeff, Jason, and others. And it was all built from scratch, starting when
    these people began joining the team in late 2005\. Meanwhile, the other pieces
    and apps of the platform were being built on top of the framework, like building
    the plane while it’s flying with a cabin full of passengers, all hoping it reaches
    the destination before it reaches the ground.
  prefs: []
  type: TYPE_NORMAL
