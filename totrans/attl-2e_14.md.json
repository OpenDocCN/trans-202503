["```\n$ tree -d --charset=ascii FLAIM\nFLAIM\n|-- flaim\n|   |-- debian\n|   |-- docs\n|   |-- sample\n|   |-- src\n|   `-- util\n|-- ftk\n|   |-- debian\n|   |-- src\n|   `-- util\n|-- sql\n|   `-- src\n--snip--\n`-- xflaim\n    |-- csharp\n    --snip--\n    |-- java\n    --snip--\n    |-- sample\n    --snip--\n    |-- src\n    `-- util\n--snip--\n```", "```\n$ tree -d --charset=ascii FLAIM\nFLAIM                           configure.ac (flaim-projects)\n|-- flaim                       configure.ac (flaim)\n|   |-- debian\n|   |-- docs\n|   |-- sample\n|   |-- src\n|   `-- util\n|-- ftk                         configure.ac (ftk)\n|   |-- debian\n|   |-- src\n|   `-- util\n|-- sql                         configure.ac (flaimsql)\n|   `-- src\n--snip--\n`-- xflaim                      configure.ac (xflaim)\n    |-- csharp\n    --snip--\n    |-- java\n    --snip--\n    |-- sample\n    --snip--\n    |-- src\n    `-- util\n--snip--\n```", "```\n   #                                               -*- Autoconf -*-\n   # Process this file with autoconf to produce a configure script.\n\n   AC_PREREQ([2.69])\n➊ AC_INIT([flaim-projects], [1.0])\n➋ AM_INIT_AUTOMAKE([-Wall -Werror foreign])\n➌ AM_PROG_AR\n➍ LT_PREREQ([2.4])\n   LT_INIT([dlopen])\n\n➎ AC_CONFIG_MACRO_DIRS([m4])\n➏ AC_CONFIG_SUBDIRS([ftk flaim sql xflaim])\n   AC_CONFIG_FILES([Makefile])\n   AC_OUTPUT\n```", "```\nAC_CONFIG_SUBDIRS(dir1[ dir2 ... dirN])\n```", "```\nAC_CONFIG_MACRO_DIRS(macro-dir)\n```", "```\n➊ ACLOCAL_AMFLAGS = -I m4\n\n➋ EXTRA_DIST = README.W32 tools win32\n\n➌ SUBDIRS = ftk flaim sql xflaim\n\n➍ rpms srcrpm:\n          for dir in $(SUBDIRS); do \\\n            (cd $$dir && $(MAKE) $(AM_MAKEFLAGS) $@) || exit 1; \\\n          done\n  .PHONY: rpms srcrpm\n```", "```\nACLOCAL_M4 = $(top_srcdir)/aclocal.m4\nACLOCAL=${SHELL} .../flaim-ch8-10/missing --run aclocal-1.10\nACLOCAL_AMFLAGS = -I m4\n$(ACLOCAL_M4): $(am__aclocal_m4_deps)\n        cd $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)\n```", "```\n--snip--\nAC_PREREQ([2.69])\nAC_INIT(FULL-PACKAGE-NAME, VERSION, BUG-REPORT-ADDRESS)\nAC_CONFIG_SRCDIR([src/ftktext.cpp])\nAC_CONFIG_HEADERS([config.h])\n\n# Checks for programs.\nAC_PROG_CXX\nAC_PROG_CC\nAC_PROG_INSTALL\n\n# Checks for libraries.\n# FIXME: Replace `main' with a function in `-lc':\nAC_CHECK_LIB([c], [main])\n# FIXME: Replace `main' with a function in...\nAC_CHECK_LIB([crypto], [main])\n--snip--\nAC_CONFIG_FILES([Makefile])\nAC_OUTPUT\n```", "```\n   #                                               -*- Autoconf -*-\n   # Process this file with autoconf to produce a configure script.\n   AC_PREREQ([2.69])\n➊ AC_INIT([FLAIMTK],[1.2],[flaim-users@lists.sourceforge.net])\n➋ AM_INIT_AUTOMAKE([-Wall -Werror])\n   AM_PROG_AR\n   LT_PREREQ([2.4])\n   LT_INIT([dlopen])\n\n➌ AC_LANG([C++])\n\n➍ AC_CONFIG_MACRO_DIRS([m4])\n➎ AC_CONFIG_SRCDIR([src/flaimtk.h])\n   AC_CONFIG_HEADERS([config.h])\n\n   # Checks for programs.\n   AC_PROG_CXX\n   AC_PROG_INSTALL\n\n   # Checks for optional programs.\n➏ FLM_PROG_TRY_DOXYGEN\n\n   # Configure options: --enable-debug[=no].\n➐ AC_ARG_ENABLE([debug],\n     [AS_HELP_STRING([--enable-debug],\n       [enable debug code (default is no)])],\n     [debug=\"$withval\"], [debug=no])\n\n   # Configure option: --enable-openssl[=no].\n   AC_ARG_ENABLE([openssl],\n     [AS_HELP_STRING([--enable-openssl],\n       [enable the use of openssl (default is no)])],\n     [openssl=\"$withval\"], [openssl=no])\n\n   # Create Automake conditional based on the DOXYGEN variable\n➑ AM_CONDITIONAL([HAVE_DOXYGEN], [test -n \"$DOXYGEN\"])\n   #AM_COND_IF([HAVE_DOXYGEN], [AC_CONFIG_FILES([docs/doxyfile])])\n➒ AS_IF([test -n \"$DOXYGEN\"], [AC_CONFIG_FILES([docs/doxyfile])])\n--snip--\n```", "```\nFLM_PROG_TRY_DOXYGEN([quiet])\n```", "```\nAM_CONDITIONAL(variable, condition)\n```", "```\nif condition; then...\n```", "```\nAM_COND_IF(conditional-variable, [if-true], [if-false])\n```", "```\n--snip--\nAM_CONDITIONAL([HAVE_DOXYGEN], [test -n \"$DOXYGEN\"])\nAM_COND_IF([HAVE_DOXYGEN], [AC_CONFIG_FILES([docs/doxyfile])])\n#AS_IF([test -n \"$DOXYGEN\"], [AC_CONFIG_FILES([docs/doxyfile])])\n--snip--\n```", "```\nAS_IF(test1, [run-if-true], ..., [run-if-false])\n```", "```\n   --snip--\n   # Configure for large files, even in 32-bit environments\n➊ AC_SYS_LARGEFILE\n   # Check for pthreads\n➋ AX_PTHREAD(\n     [AC_DEFINE([HAVE_PTHREAD], [1],\n       [Define if you have POSIX threads libraries and header files.])\n     LIBS=\"$PTHREAD_LIBS $LIBS\"\n     CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n     CXXFLAGS=\"$CXXFLAGS $PTHREAD_CXXFLAGS\"])\n\n➌ # Checks for libraries.\n   AC_SEARCH_LIBS([initscr], [ncurses])\n   AC_CHECK_HEADER([curses.h],,[echo \"*** Error: curses.h not found - install\n   curses devel package.\"; exit 1])\n   AC_CHECK_LIB([rt], [aio_suspend])\n   AS_IF([test \"x$openssl\" = xyes],\n   ➍ [AC_DEFINE([FLM_OPENSSL], [1], [Define to use openssl])\n      AC_CHECK_LIB([ssl], [SSL_new])\n      AC_CHECK_LIB([crypto], [CRYPTO_add])\n      AC_CHECK_LIB([dl], [dlopen])\n      AC_CHECK_LIB([z], [gzopen])])\n\n➎ # Checks for header files.\n   AC_HEADER_RESOLV\n   AC_CHECK_HEADERS([arpa/inet.h fcntl.h limits.h malloc.h netdb.h netinet/in.h\n   stddef.h stdlib.h string.h strings.h sys/mount.h sys/param.h sys/socket.h sys/\n   statfs.h sys/statvfs.h sys/time.h sys/vfs.h unistd.h utime.h])\n\n   # Checks for typedefs, structures, and compiler characteristics.\n   AC_CHECK_HEADER_STDBOOL\n   AC_C_INLINE\n   AC_TYPE_INT32_T\n   AC_TYPE_MODE_T\n   AC_TYPE_PID_T\n   AC_TYPE_SIZE_T\n   AC_CHECK_MEMBERS([struct stat.st_blksize])\n   AC_TYPE_UINT16_T\n   AC_TYPE_UINT32_T\n   AC_TYPE_UINT8_T\n\n   # Checks for library functions.\n   AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK\n   AC_FUNC_MALLOC\n   AC_FUNC_MKTIME\n   AC_CHECK_FUNCS([atexit fdatasync ftruncate getcwd gethostbyaddr gethostbyname\n   gethostname gethrtime gettimeofday inet_ntoa localtime_r memmove memset mkdir\n   pstat_getdynamic realpath rmdir select socket strchr strrchr strstr])\n\n   # Configure DEBUG source code, if requested.\n➏ AS_IF([test \"x$debug\" = xyes],\n     [AC_DEFINE([FLM_DEBUG], [1], [Define to enable FLAIM debug features])])\n\n➐ --snip--\n\n➑ AC_CONFIG_FILES([Makefile\n                      docs/Makefile\n                      obs/Makefile\n obs/flaimtk.spec\n                      src/Makefile\n                      util/Makefile\n                      src/libflaimtk.pc])\n\n   AC_OUTPUT\n\n   # Fix broken libtool\n   sed 's/link_all_deplibs=no/link_all_deplibs=yes/' libtool >libtool.tmp && \\\n     mv libtool.tmp libtool\n\n➒ cat <<EOF\n\n     FLAIM toolkit ($PACKAGE_NAME) version $PACKAGE_VERSION\n     Prefix.........: $prefix\n     Debug Build....: $debug\n     Using OpenSSL..: $openssl\n     C++ Compiler...: $CXX $CXXFLAGS $CPPFLAGS\n     Linker.........: $LD $LDFLAGS $LIBS\n     Doxygen........: ${DOXYGEN:-NONE}\n\n   EOF\n```", "```\nAX_PTHREAD(action-if-found[, action-if-not-found])\n```", "```\n   ACLOCAL_AMFLAGS = -I m4\n\n   EXTRA_DIST = GNUMakefile README.W32 debian netware win32\n\n➊ if HAVE_DOXYGEN\n     DOXYDIR = docs\n   endif\n\n   SUBDIRS = src util obs $(DOXYDIR)\n\n➋ doc_DATA = AUTHORS ChangeLog COPYING INSTALL NEWS README\n\n   RPM = rpm\n\n➌ rpms srcrpm: dist\n          (cd obs && $(MAKE) $(AM_MAKEFLAGS) $@) || exit 1\n           rpmarch=`$(RPM) --showrc | \\\n             grep \"^build arch\" | sed 's/\\(.*: \\)\\(.*\\)/\\2/'`; \\\n           test -z \"obs/$$rpmarch\" || \\\n             ( mv obs/$$rpmarch/* . && rm -rf obs/$$rpmarch )\n           rm -rf obs/$(distdir)\n\n➍ #dist-hook:\n   #        rm -rf `find $(distdir) -name .svn`\n\n   .PHONY: srcrpm rpms\n```", "```\n--snip--\ndistdir: $(DISTFILES)\n        ... # copy files into distdir\n        $(MAKE) $(AM_MAKEFLAGS) top_distdir=\"$(top_distdir)\" \\\n            distdir=\"$(distdir)\" dist-hook\n        ... # change attributes of files in distdir\n--snip--\ndist dist-all: distdir\n        tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c \\\n          >$(distdir).tar.gz\n        $(am__remove_distdir)\n--snip--\n.PHONY: ... dist-hook ...\n--snip--\ndist-hook:\n        rm -rf `find $(distdir) -name .svn`\n--snip--\n```", "```\nEXTRA_DIST = ...\n\nlib_LTLIBRARIES = ...\ninclude_HEADERS = ...\n\nxxxxx_la_SOURCES = ...\nxxxxx_la_LDFLAGS = -version-info x:y:z\n```", "```\n➊ EXTRA_DIST = ftknlm.h\n\n➋ lib_LTLIBRARIES = libflaimtk.la\n➌ include_HEADERS = flaimtk.h\n\n➍ pkgconfigdir = $(libdir)/pkgconfig\n   pkgconfig_DATA = libflaimtk.pc\n\n➎ libflaimtk_la_SOURCES = \\\n   ftkarg.cpp \\\n   ftkbtree.cpp \\\n   ftkcmem.cpp \\\n   ftkcoll.cpp \\\n   --snip--\n   ftksys.h \\\n   ftkunix.cpp \\\n   ftkwin.cpp \\\n   ftkxml.cpp\n\n➏ libflaimtk_la_LDFLAGS = -version-info 0:0:0\n```", "```\n$ printf '%s \\\\\\n' *.cpp >> Makefile.am\n```", "```\nFTK_INCLUDE = -I$(top_srcdir)/src\nFTK_LTLIB = ../src/libflaimtk.la\n\ncheck_PROGRAMS = ftktest\nftktest_SOURCES = ftktest.cpp\nftktest_CPPFLAGS = $(FTK_INCLUDE)\nftktest_LDADD = $(FTK_LTLIB)\n\nTESTS = ftktest\n```", "```\n   --snip--\n➊ # Checks for optional programs.\n   FLM_PROG_TRY_CSC\n   FLM_PROG_TRY_CSVM\n   FLM_PROG_TRY_JNI\n   FLM_PROG_TRY_JAVADOC\n   FLM_PROG_TRY_DOXYGEN\n\n➋ # Configure variables: FTKLIB and FTKINC.\n   AC_ARG_VAR([FTKLIB], [The PATH wherein libflaimtk.la can be found.])\n   AC_ARG_VAR([FTKINC], [The PATH wherein flaimtk.h can be found.])\n   --snip--\n➌ # Ensure that both or neither is specified.\n   if (test -n \"$FTKLIB\" && test -z \"$FTKINC\") || \\\n      (test -n \"$FTKINC\" && test -z \"$FTKLIB\"); then\n     AC_MSG_ERROR([Specify both FTK library and include paths, or neither.])\n   fi\n\n   # Not specified? Check for FTK in standard places.\n   if test -z \"$FTKLIB\"; then\n   ➍ # Check for FLAIM toolkit as a sub-project.\n      if test -d \"$srcdir/ftk\"; then\n        AC_CONFIG_SUBDIRS([ftk])\n        FTKINC='$(top_srcdir)/ftk/src'\n        FTKLIB='$(top_builddir)/ftk/src'\n      else\n   ➎ # Check for FLAIM toolkit as a superproject.\n        if test -d \"$srcdir/../ftk\"; then\n          FTKINC='$(top_srcdir)/../ftk/src'\n          FTKLIB='$(top_builddir)/../ftk/src'\n        fi\n      fi\n    fi\n\n➏ # Still empty? Check for *installed* FLAIM toolkit.\n   if test -z \"$FTKLIB\"; then\n     AC_CHECK_LIB([flaimtk], [ftkFastChecksum],\n       [AC_CHECK_HEADERS([flaimtk.h])\n          LIBS=\"-lflaimtk $LIBS\"],\n       [AC_MSG_ERROR([No FLAIM toolkit found. Terminating.])])\n   fi\n\n➐ # AC_SUBST command line variables from FTKLIB and FTKINC.\n   if test -n \"$FTKLIB\"; then\n     AC_SUBST([FTK_LTLIB], [\"$FTKLIB/libflaimtk.la\"])\n     AC_SUBST([FTK_INCLUDE], [\"-I$FTKINC\"])\n   fi\n\n➑ # Automake conditionals\n   AM_CONDITIONAL([HAVE_JAVA], [test \"x$flm_prog_have_jni\" = xyes])\n   AM_CONDITIONAL([HAVE_CSHARP], [test -n \"$CSC\"])\n   AM_CONDITIONAL([HAVE_DOXYGEN], [test -n \"$DOXYGEN\"])\n   #AM_COND_IF([HAVE_DOXYGEN], [AC_CONFIG_FILES([docs/doxygen/doxyfile])])\n   AS_IF([test -n \"$DOXYGEN\"], [AC_CONFIG_FILES([docs/doxygen/doxyfile])])\n   --snip--\n   AC_OUTPUT\n   # Fix broken libtool\n   sed 's/link_all_deplibs=no/link_all_deplibs=yes/' libtool >libtool.tmp && \\\n     mv libtool.tmp libtool\n\n   cat <<EOF\n\n     ($PACKAGE_NAME) version $PACKAGE_VERSION\n     Prefix.........: $prefix\n     Debug Build....: $debug\n     C++ Compiler...: $CXX $CXXFLAGS $CPPFLAGS\n     Linker.........: $LD $LDFLAGS $LIBS\n     FTK Library....: ${FTKLIB:-INSTALLED}\n     FTK Include....: ${FTKINC:-INSTALLED}\n     CSharp Compiler: ${CSC:-NONE} $CSCFLAGS\n     CSharp VM......: ${CSVM:-NONE}\n     Java Compiler..: ${JAVAC:-NONE} $JAVACFLAGS\n     JavaH Utility..: ${JAVAH:-NONE} $JAVAHFLAGS\n     Jar Utility....: ${JAR:-NONE} $JARFLAGS\n     Javadoc Utility: ${JAVADOC:-NONE}\n     Doxygen........: ${DOXYGEN:-NONE}\n\n   EOF\n```", "```\n$ ./configure FTKINC=\"$HOME/dev/ftk/include\" ...\n```", "```\nif HAVE_JAVA\n  JAVADIR = java\n  JNI_LIBADD = java/libxfjni.la\nendif\n\nif HAVE_CSHARP\n  CSDIR = cs\n  CSI_LIBADD = cs/libxfcsi.la\nendif\n\nSUBDIRS = $(JAVADIR) $(CSDIR)\n\npkgconfigdir = $(libdir)/pkgconfig\npkgconfig_DATA = libxflaim.pc\n\nlib_LTLIBRARIES = libxflaim.la\ninclude_HEADERS = xflaim.h\n\nlibxflaim_la_SOURCES = \\\n btreeinfo.cpp \\\n  f_btpool.cpp \\\n  f_btpool.h \\\n  --snip--\n  rfl.h \\\n  scache.cpp \\\n  translog.cpp\n\nlibxflaim_la_CPPFLAGS = $(FTK_INCLUDE)\nlibxflaim_la_LIBADD = $(JNI_LIBADD) $(CSI_LIBADD) $(FTK_LTLIB)\nlibxflaim_la_LDFLAGS = -version-info 3:2:0\n```", "```\n   EXTRA_DIST = dbdiff.cpp dbdiff.h domedit.cpp diffbackups.cpp xmlfiles\n\n   XFLAIM_INCLUDE = -I$(top_srcdir)/src\n   XFLAIM_LDADD = ../src/libxflaim.la\n\n➊ AM_CPPFLAGS = $(XFLAIM_INCLUDE) $(FTK_INCLUDE)\n   LDADD = libutil.la $(XFLAIM_LDADD)\n\n ## Utility Convenience Library\n\n   noinst_LTLIBRARIES = libutil.la\n\n   libutil_la_SOURCES = \\\n    flm_dlst.cpp \\\n    flm_dlst.h \\\n    flm_lutl.cpp \\\n    flm_lutl.h \\\n    sharutil.cpp \\\n    sharutil.h\n\n   ## Utility Programs\n\n   bin_PROGRAMS = xflmcheckdb xflmrebuild xflmview xflmdbshell\n\n   xflmcheckdb_SOURCES = checkdb.cpp\n   xflmrebuild_SOURCES = rebuild.cpp\n\n   xflmview_SOURCES = \\\n    viewblk.cpp \\\n    view.cpp \\\n    --snip--\n    viewmenu.cpp \\\n    viewsrch.cpp\n\n   xflmdbshell_SOURCES = \\\n    domedit.h \\\n    fdomedt.cpp \\\n    fshell.cpp \\\n    fshell.h \\\n    xshell.cpp\n\n   ## Check Programs\n\n   check_PROGRAMS = \\\n    ut_basictest \\\n    ut_binarytest \\\n    --snip--\n    ut_xpathtest \\\n    ut_xpathtest2\n\n➋ check_DATA = copy-xml-files.stamp\n   check_HEADERS = flmunittest.h\n\n   ut_basictest_SOURCES = flmunittest.cpp basictestsrv.cpp\n➌ --snip--\n   ut_xpathtest2_SOURCES = flmunittest.cpp xpathtest2srv.cpp\n\n   ## Unit Tests\n\n   TESTS = \\\n    ut_basictest \\\n    --snip--\n    ut_xpathtest2\n\n   ## Miscellaneous rules required by Check Programs\n\n➍ copy-xml-files.stamp:\n           cp $(srcdir)/xmlfiles/*.xml .\n           echo Timestamp > $@\n\n➎ clean-local:\n           rm -rf ix2.*\n           rm -rf bld.*\n           rm -rf tst.bak\n           rm -f *.xml\n           rm -f copy-xml-files.stamp\n```", "```\n--snip--\n# Libraries that this one depends upon.\ndependency_libs=' .../flaim/build/ftk/src/libflaimtk.la -lrt -lncurses'\n--snip--\n```", "```\n   --snip--\n   clean: clean-am\n➊ clean-am: clean-binPROGRAMS clean-checkPROGRAMS \\\n     clean-generic clean-libtool clean-local \\\n     clean-noinstLTLIBRARIES mostlyclean-am\n   --snip--\n➋ .PHONY: ... clean-local...\n   --snip--\n   clean-local:\n           rm -rf ix2.*\n           rm -rf bld.*\n           rm -rf tst.bak\n           rm -f *.xml\n           rm -f copy-xml-files.stamp\n   --snip--\n```"]