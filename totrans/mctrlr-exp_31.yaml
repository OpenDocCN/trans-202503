- en: '**F  More Test Modes**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**F 更多测试模式**'
- en: '**F.1 8051 External Memory**'
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**F.1 8051 外部存储器**'
- en: McCormac (1996) and other Nineties sources describe a vulnerability for dumping
    Intel’s 8051\. This chip has an !EA pin that maps external memory into the boot
    region.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: McCormac (1996) 和其他九十年代的资料描述了一个用于转储英特尔 8051 的漏洞。这个芯片有一个 !EA 引脚，它将外部存储器映射到启动区域。
- en: The pin is not *latched* by sampling it only at reset; you can flip it back
    and forth as the software is running! The chip’s memory can be dumped by booting
    to an external EEPROM that jumps from the boot region to the EEPROM region and
    then re-enables the ROM to be read as data.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 该引脚通过仅在复位时采样而*未锁存*；你可以在软件运行时来回切换它！通过启动到外部 EEPROM，芯片的内存可以被转储，跳转从启动区域到 EEPROM
    区域，然后重新启用 ROM 以将其作为数据读取。
- en: Some 8051 derivatives such as the Signetics SCN8051H remain vulnerable. Others
    latch the !EA pin at reset to prevent the attack.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 8051 衍生品，如 Signetics SCN8051H，仍然存在漏洞。其他芯片则在复位时锁存 !EA 引脚，以防止这种攻击。
- en: Blair (2020) is a standalone dumper for 8051 chips with this unlatched pin,
    including both a PCB design and an EEPROM image to perform the attack. His exploit
    runs within the target 8051, so the PCB does not require an additional microcontroller.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Blair (2020) 是一个独立的 8051 芯片转储工具，适用于这个没有锁存引脚的芯片，包括一个 PCB 设计和一个 EEPROM 镜像来执行攻击。他的漏洞利用程序在目标
    8051 内部运行，因此 PCB 不需要额外的微控制器。
- en: '**F.2 TMS320C15, BSMT2000 !MP Pin**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**F.2 TMS320C15，BSMT2000 !MP 引脚**'
- en: Like many chips from the Eighties, the TMS320 series can operate either as a
    microcontroller executing code from an internal ROM or as a microprocessor executing
    code from external memory. Surply (2015) is primarily concerned with the Sega
    Whitestar pinball machine and programmable array logic (PAL) reverse engineering,
    but it contains a nifty abuse of the !MP pin that switches between these modes.
    This is orchestrated by an FPGA, presenting a small memory filled with shellcode
    while switching the victim chip between microprocessor and microcontroller modes.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 像许多八十年代的芯片一样，TMS320 系列可以作为微控制器从内部 ROM 执行代码，或作为微处理器从外部存储器执行代码。Surply (2015) 主要关注的是
    Sega Whitestar 弹球机和可编程阵列逻辑（PAL）的逆向工程，但它包含了对 !MP 引脚的巧妙利用，该引脚在这两种模式之间切换。这是由 FPGA
    协调的，提供一个小型存储器，填充了 shellcode，同时在微处理器和微控制器模式之间切换受害者芯片。
- en: '![Image](../images/f0362-01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0362-01.jpg)'
- en: 'Figure F.1: TMS320C15 Dump Waveform from Surply (2015)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图 F.1：来自 Surply (2015) 的 TMS320C15 转储波形
- en: '![Image](../images/f0363-01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0363-01.jpg)'
- en: 'Figure F.2: External Shellcode from Surply (2015)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图 F.2：来自 Surply (2015) 的外部 Shellcode
- en: '![Image](../images/f0363-02.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0363-02.jpg)'
- en: 'Figure F.3: BSMT2000 / TMS320C15'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图 F.3：BSMT2000 / TMS320C15
- en: The !MP pin is not latched at reset, so you can freely change it within an instruction
    to cause the instruction to be fetched from external memory while the first data
    argument is fetched from internal memory.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '!MP 引脚在复位时没有被锁存，因此你可以在指令执行过程中自由改变它，从而使指令从外部存储器中获取，同时第一个数据参数从内部存储器中获取。'
- en: Once you know that the !MP pin is not latched, it is clear that this can be
    exploited by toggling it while having an FPGA emulate an external memory. Toggling
    causes the chip to stop executing the internal ROM and switch over to executing
    the FPGA’s memory. The pin can be low to fetch most instructions from the external
    memory, jumping high only for the brief fetch from the internal ROM.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你知道 !MP 引脚没有被锁存，就可以通过切换该引脚并让 FPGA 模拟外部存储器来利用这一点。切换会导致芯片停止执行内部 ROM，并切换到执行 FPGA
    的存储器。该引脚可以保持低电平以从外部存储器获取大部分指令，只有在短暂地从内部 ROM 获取指令时才会跳高。
- en: His shellcode in [Figure F.2](app06.xhtml#chFfig2) is quite simple. After initializing
    variables, an infinite `while()` loop at address 5 keeps dumping the accumulator’s
    value and the program memory value at the accumulator’s address to the first two
    I/O ports. There’s nothing within the code to switch between internal and external
    memories; that logic is handled by an FPGA that presents this memory to the TMS320.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 他在 [图 F.2](app06.xhtml#chFfig2) 中的 shellcode 相当简单。初始化变量后，一个在地址 5 的无限 `while()`
    循环不断将累加器的值和累加器地址的程序内存值转储到前两个 I/O 端口。代码中没有切换内部和外部存储器的逻辑；这一逻辑由 FPGA 处理，它将这些存储器提供给
    TMS320。
- en: Surply’s timing diagram in [Figure F.1](app06.xhtml#chFfig1) shows that the
    !MP pin should jump high after the `TBLR 0` instruction is fetched from address
    5\. The pin drops low before the following instruction is fetched from address
    6\. He notes that this timing is very tight, and that violations of it will cause
    the exploit to fail.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Surply在图[Figure F.1](app06.xhtml#chFfig1)中的时序图显示，!MP引脚应该在从地址5读取`TBLR 0`指令后跳高。该引脚在从地址6读取下一个指令之前掉低。他指出，这个时序非常紧凑，任何违反它的行为都会导致漏洞失败。
- en: '**F.3 6500/1 Ten Volts**'
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**F.3 6500/1 十伏**'
- en: Shortly after Commodore acquired MOS Technology for its 6502 technology, they
    released the 6500/1 chip, a mask-programmed variant of the 6502\. The 6500/1 includes
    two kilobytes of ROM, 64 bytes of RAM, and some handy peripherals. It also has
    a test mode, an exploit for which is available in Brain (2014).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在Commodore收购MOS Technology以获得其6502技术后不久，他们发布了6500/1芯片，这是6502的掩模编程变种。6500/1包含2KB的ROM、64字节的RAM和一些便捷的外设。它还具有测试模式，Brain（2014）中提供了该模式的利用方式。
- en: 'Looking at the datasheet, Commodore (1986) describes the test mode like so:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 查阅数据手册，Commodore（1986）将测试模式描述如下：
- en: Special test logic provides a method for thoroughly testing the 6500/1\. Applying
    a +10V signal to the !RES line places the 6500/1 in the test mode. While in this
    mode, all memory fetches are made from Port PC. External test equipment can use
    this feature to test internal CPU logic and I/O. A program can be loaded into
    RAM, allowing the contents of the instruction ROM to be dumped to any port for
    external verification.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 特殊测试逻辑提供了一种彻底测试6500/1的方法。将+10V信号施加到!RES线，可以将6500/1置于测试模式。在此模式下，所有内存读取操作都从PC端口进行。外部测试设备可以利用此功能测试内部CPU逻辑和I/O。程序可以加载到RAM中，允许指令ROM的内容转储到任何端口，以便进行外部验证。
- en: Brain’s source code contains two exploits for dumping the ROM. His first method,
    built upon suggestions by Gerrit Heitsch and Greg King, pulls data directly from
    the ROM without forcing it to execute shellcode. He observes the instruction fetches
    until he knows which phase of the clock is the opcode fetch, then instructs the
    CPU to load a memory location into the accumulator register. He finally drops
    out of the test mode during the cycle when the load from ROM would occur so the
    fetch occurs from the real ROM and not from port `PC`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Brain的源代码包含了两个用于转储ROM的漏洞。他的第一个方法基于Gerrit Heitsch和Greg King的建议，从ROM中直接提取数据，而不强制执行shellcode。他观察指令读取，直到知道时钟的哪个阶段是操作码读取，然后指示CPU将内存位置加载到累加器寄存器中。最后，在ROM加载发生的周期中退出测试模式，以便从真实的ROM而不是端口`PC`读取。
- en: His second exploit is closer to the intent of the datasheet, loading this shellcode
    into SRAM at `0x0000` and then executing it outside of test mode to dump the contents
    of ROM to `PA` at `0x80` while strobing `PC` at `0x82` to indicate that data is
    ready.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 他的第二个漏洞更接近数据手册的意图，将这个shellcode加载到`0x0000`的SRAM中，然后在非测试模式下执行它，将ROM的内容转储到`PA`（`0x80`），同时在`0x82`处对`PC`进行触发，指示数据已准备好。
- en: '![Image](../images/f0366-01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0366-01.jpg)'
- en: 'Figure F.4: 6500/1 Dumper from Brain (2014)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '图F.4: 来自Brain（2014）的6500/1转储器'
- en: '![Image](../images/f0367-01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0367-01.jpg)'
- en: 'Figure F.5: Commodore 6500/1'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '图F.5: Commodore 6500/1'
- en: '![Image](../images/f0367-02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0367-02.jpg)'
- en: 'Figure F.6: 6500/1 ROM Bits'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '图F.6: 6500/1 ROM位'
- en: '![Image](../images/f0368-01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0368-01.jpg)'
- en: In both cases, an AVR reads each sampled byte and forwards it out the serial
    port for a waiting desktop to receive. This successfully extracted the firmware
    and fonts of the Commodore 1520 plotter.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，AVR读取每个采样的字节，并通过串行端口将其转发到等待的桌面进行接收。这成功地提取了Commodore 1520绘图仪的固件和字体。
- en: In addition to the test modes, the ROM of this chip is easily photographed.
    The sample bits in [Figure F.6](app06.xhtml#chFfig6) were seen after decapsulation
    with HNO[3] and delayering with dilute HF.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 除了测试模式外，该芯片的ROM也很容易被拍摄。图[Figure F.6](app06.xhtml#chFfig6)中的示例位是通过使用HNO[3]进行解封装并使用稀释的HF进行去层后看到的。
- en: '**F.4 TMP90 External Memory**'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**F.4 TMP90 外部内存**'
- en: Galiano (2023) is a fully functional exploit for the TLCS-90 series of Z80 microcontrollers
    from Toshiba. Examples include the TMP90C840AN and TMP90CM40AN, as well as chips
    such as the TMP91C640N from the related TLCS-900 series. The exploit depends upon
    a non-maskable interrupt (NMI) pin, so it is not compatible with the entire series;
    the TMP90C844AN, TMP91-C642AN and TMP90CH44N are not vulnerable.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Galiano (2023) 是一个完全功能的漏洞利用，适用于来自东芝的 TLCS-90 系列 Z80 微控制器。示例包括 TMP90C840AN 和
    TMP90CM40AN，以及来自相关的 TLCS-900 系列的 TMP91C640N 等芯片。该漏洞利用依赖于不可屏蔽中断（NMI）引脚，因此并不适用于整个系列；TMP90C844AN、TMP91-C642AN
    和 TMP90CH44N 并不易受攻击。
- en: Galiano begins with the EA pin, which controls whether the chip boots from internal
    ROM or from external memory. It’s not quite as easy as booting externally and
    dumping the ROM, however. The EA pin is only sampled at reset and it disables
    internal ROM at the same time it selects booting from external memory.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Galiano 从 EA 引脚开始，EA 引脚控制芯片是从内部 ROM 启动还是从外部内存启动。然而，启动外部内存并转储 ROM 并不像看起来那么简单。EA
    引脚只在复位时采样，它在选择从外部内存启动的同时禁用内部 ROM。
- en: His exploit boots from an external EEPROM. He then uses a trick in how Z80 chips
    set up the call stack to execute from this EEPROM again while internal ROM is
    still enabled and the default boot target.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 他的漏洞利用从外部 EEPROM 启动。然后，他利用 Z80 芯片在设置调用堆栈时的一个技巧，再次从这个 EEPROM 执行，同时内部 ROM 仍然启用并作为默认启动目标。
- en: Z80 chips such as the TLCS-90 series do not reset their stack pointers in hardware
    at reset. Rather, the first instruction usually sets the stack pointer. By triggering
    an NMI before that instruction begins to execute, Galiano redirects execution
    to the NMI interrupt handler *before* the stack pointer is valid!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 像 TLCS-90 系列的 Z80 芯片在复位时不会硬件重置堆栈指针。相反，通常第一条指令会设置堆栈指针。通过在该指令执行之前触发 NMI，Galiano
    在堆栈指针有效之前将执行重定向到 NMI 中断处理程序！
- en: When the stack pointer was previously set to EEPROM rather than SRAM, the target
    chip will save the `AF` and `PC` registers to the poorly located stack. `AF`’s
    value doesn’t matter and `PC` will probably be `0x9000` at this moment. Neither
    value is written to the EEPROM, because EEPROMs don’t accept random writes, so
    on return from the interrupt handler the program counter is forced to the value
    in the read-only stack.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当堆栈指针先前设置为 EEPROM 而不是 SRAM 时，目标芯片将把 `AF` 和 `PC` 寄存器保存到位置不佳的堆栈中。`AF` 的值无关紧要，而此时
    `PC` 可能为 `0x9000`。这两个值都不会写入 EEPROM，因为 EEPROM 不接受随机写入，所以在从中断处理程序返回时，程序计数器将强制恢复为只读堆栈中的值。
- en: That code can then initialize the stack pointer to an address in SRAM and proceed
    to freely read all internal ROM or PROM, dumping it out a serial port or copying
    it to a new memory chip.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，代码可以初始化堆栈指针为 SRAM 中的一个地址，并继续自由读取所有内部 ROM 或 PROM，将其转储到串口，或复制到新的内存芯片中。
- en: '**F.5 Mostek 3870 (Fairchild F8)**'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**F.5 Mostek 3870 (Fairchild F8)**'
- en: Boris Diplomat, Chess Traveler, and a number of other chess computers from the
    late Seventies use a variant of Fairchild’s F8 architecture called the Mostek
    MK3870\. Riddle (2013) and Rock (2013) describe electrical dumps using a test
    mode of this chip.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Boris Diplomat、Chess Traveler 以及其他一些70年代末期的国际象棋计算机使用了 Fairchild F8 架构的变种，称为
    Mostek MK3870。Riddle (2013) 和 Rock (2013) 描述了使用该芯片测试模式的电气转储。
- en: '![Image](../images/f0370-01.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0370-01.jpg)'
- en: 'Figure F.7: Mostek MK3870'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '图 F.7: Mostek MK3870'
- en: '[Page 16](ch02.xhtml#ch2fig1) of Mostek (1978) describes the behavior of the
    TEST pin, which activates different testing modes depending upon the voltage:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[第16页](ch02.xhtml#ch2fig1)的 Mostek (1978) 描述了 TEST 引脚的行为，该引脚根据电压激活不同的测试模式：'
- en: In normal operation the TEST pin is unconnected or is connected to GND. When
    TEST is placed at TTL level (2.0V to 2.6V) port 4 becomes an output of the internal
    data bus and port 5 becomes a wired-OR input to the internal data bus. The data
    appearing on the port 4 pins is logically true whereas input data forced on port
    5 must be logically false.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常操作中，TEST 引脚未连接或连接到 GND。当 TEST 设置为 TTL 电平（2.0V 到 2.6V）时，端口 4 变为内部数据总线的输出，而端口
    5 成为内部数据总线的有线 OR 输入。端口 4 引脚上的数据是逻辑上的真，而强制输入到端口 5 的数据必须是逻辑上的假。
- en: When TEST is placed at a high level (6.0V to 7.OV), the ports act as above and
    additionally the 2K *×* 8 program ROM is prevented from driving the data bus.
    In this mode operands and instructions may be forced externally through port 5
    instead of being accessed from the program ROM. When TEST is in either the TTL
    state or the high state, STROBE ceases its normal function and becomes a machine
    cycle clock (identical to the F8 multi-chip system WRITE clock except inverted).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当 TEST 引脚置于高电平（6.0V 到 7.0V）时，端口按上述方式工作，另外 2K *×* 8 程序 ROM 被禁止驱动数据总线。在此模式下，操作数和指令可以通过端口
    5 强制外部输入，而不是从程序 ROM 中访问。当 TEST 引脚处于 TTL 状态或高状态时，STROBE 停止其正常功能，变成机器周期时钟（与 F8 多芯片系统的写入时钟相同，但相位反转）。
- en: 'In shorter terms, the TEST pin can put the chip into three possible states:
    1) normal execution when the TEST pin floats, 2) ROM enabled when the TEST pin
    is at 3.5V (TTL voltage) and 3) ROM disabled when the TEST pin is at 7V (high
    voltage). These latter two modes are both for testing, and the difference is in
    whether the internal ROM is or is not allowed to drive the data bus.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，TEST 引脚可以将芯片置于三种可能的状态：1）当 TEST 引脚悬空时为正常执行，2）当 TEST 引脚为 3.5V（TTL 电压）时为启用
    ROM，3）当 TEST 引脚为 7V（高电压）时为禁用 ROM。后两种模式均用于测试，区别在于是否允许内部 ROM 驱动数据总线。
- en: To dump the ROM, Riddle first moved the pin to high voltage, disabling the ROM
    so he can inject a load instruction. As the instruction executes, he then drops
    the pin to TTL voltage, re-enabling the ROM so the load instruction receives its
    data.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了转储 ROM，Riddle 首先将引脚移至高电压，禁用 ROM，从而可以注入加载指令。当指令执行时，他将引脚降至 TTL 电压，重新启用 ROM，使加载指令能接收到数据。
- en: While Riddle’s original exploit used a PIC 18F4620 for voltage compatibility,
    Rock preferred a Raspberry Pi Pico and level translators.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Riddle 的原始利用方案使用了 PIC 18F4620 以兼容电压，但 Rock 更倾向于使用 Raspberry Pi Pico 和电平转换器。
- en: A direct port of Riddle’s exploit from PIC BASIC Pro was not functional, so
    significant structural changes were made to more generically inject code and read
    back the results. Between that and a little error correction, it successfully
    dumped the firmware from an HP82143 printer with no damage.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 从 PIC BASIC Pro 直接移植 Riddle 的利用方案并不可行，因此进行了重大的结构性修改，以更通用地注入代码并回读结果。通过这一点以及少量的错误修正，成功地从
    HP82143 打印机中转储了固件而没有损坏。
- en: '**F.6 MC6801 Test Mode**'
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**F.6 MC6801 测试模式**'
- en: The MC6801 microcontroller is capable of running from either internal or external
    ROM. Lind (2019) is an open source project for electrically dumping ROMs from
    Motorola MC6801.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: MC6801 微控制器可以从内部或外部 ROM 运行。Lind（2019）是一个开源项目，用于从摩托罗拉 MC6801 电气转储 ROM。
- en: 'Motorola (1984) describes Test Mode Zero, whose memory map is shown in [Figure
    F.8](app06.xhtml#chFfig8). From Section 2.3, the mode selection is a little tricky
    but taken care of by pins at reset:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 摩托罗拉（1984）描述了测试模式零，其内存映射如[图 F.8](app06.xhtml#chFfig8)所示。从第 2.3 节来看，模式选择有点棘手，但通过复位时的引脚来处理：
- en: The MC6801 operating mode is controlled by the levels present at pins 8, 9,
    and 10 during the rising edge of RESET. These same three pins, however, also function
    as the least three significant bits of Port 2\. The operating mode is latched
    into the MCU Program Control Register on the rising edge of RESET after which
    time the levels can be removed and the·pins used for other purposes. The operating
    mode can be read from the Port 2 data register where the values PCO (Pin 8), PC1
    (Pin 9), and PC2 (Pin 10) appear as data bits D5 through D7, respectively.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: MC6801 的工作模式由 RESET 上升沿时引脚 8、9 和 10 的电平控制。然而，这三个引脚也作为端口 2 的最低三位有效位。这些工作模式在 RESET
    上升沿被锁存到 MCU 程序控制寄存器中，此后可以移除电平，且引脚可用于其他目的。工作模式可以从端口 2 数据寄存器读取，其中 PCO（引脚 8）、PC1（引脚
    9）和 PC2（引脚 10）作为数据位 D5 到 D7 分别出现。
- en: By selecting Test Mode 0, Lind’s exploit forces the reset vector to be read
    from the external EEPROM rather than from the internal ROM. At this point, code
    is executing from external memory and capable of freely reading internal memory.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择测试模式 0，Lind 的利用方案强制重置向量从外部 EEPROM 读取，而不是从内部 ROM 读取。此时，代码从外部内存执行，并能够自由读取内部内存。
- en: '![Image](../images/f0373-01.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0373-01.jpg)'
- en: 'Figure F.8: Test Mode Memory Map from Motorola (1984)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 F.8：来自摩托罗拉（1984）的测试模式内存映射
- en: Lind’s shellcode is a fork of Daniel Tufvesson’s MC3 monitor in a normal EEPROM,
    with a GAL16V8 PLD to manage the reset sequencing and memory bus. After the victim
    chip boots the monitor, standard monitor commands can be sent to dump the contents
    of internal ROM over the chip’s serial port.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Lind的shellcode是Daniel Tufvesson的MC3监控程序的一个分支，存储在普通的EEPROM中，并使用GAL16V8可编程逻辑器件（PLD）来管理复位序列和内存总线。在受害者芯片启动监控程序后，可以发送标准监控命令，通过芯片的串行端口转储内部ROM的内容。
- en: '**F.7 NEC uCOM4 Test Mode**'
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**F.7 NEC uCOM4 测试模式**'
- en: NEC’s uCOM4 series consists of 4-bit microcontrollers with mask ROM, such as
    the D552 and D553\. Kevin Horton and Sean Riddle investigated these as a way to
    recover ROMs from antique checkers and chess games.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: NEC的uCOM4系列包括具有掩模ROM的4位微控制器，例如D552和D553。Kevin Horton和Sean Riddle将这些微控制器作为从古董跳棋和国际象棋游戏中恢复ROM的一种方法进行研究。
- en: Riddle’s extraction technique involves mask ROM photography, which is very portable
    but can be labor intensive in the decoding. His decoder is shown in [Figure F.9](app06.xhtml#chFfig9),
    revealing that sixteen pages exist in each of the 128 rows, with each pair of
    pages being in the opposite order. Riddle (2023) shows the ROM after delayering.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Riddle的提取技术涉及掩模ROM摄影，这种方法非常便携，但解码可能会很费力。他的解码器如[图F.9](app06.xhtml#chFfig9)所示，揭示了每128行中有16个页面，每一对页面的顺序相反。Riddle（2023）展示了去层后的ROM。
- en: A non-destructive method in Horton (2023) is electrical rather than photographic.
    The chip has a test pin that causes it to stop the CPU and dump bits to the GPIO
    pins, but it only does this within a 256-byte page of memory. It does this in
    a loop, so you do get all the bytes, but you don’t necessarily know how they are
    aligned.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Horton（2023）提出的非破坏性方法是电气方法，而不是摄影方法。芯片有一个测试引脚，能够使其停止CPU并将位数据转储到GPIO引脚，但它仅在256字节的内存页面内执行此操作。它在一个循环中执行，所以你会得到所有字节，但你不一定知道它们是如何对齐的。
- en: To electrically extract other pages, you must single-step the CPU until it performs
    a jump into another memory page, then use the test pin to dump that page. Within
    that page it will begin dumping at the program counter value, so the bytes of
    the page will have some offset that must be corrected. By identifying jump points
    within known pages and arranging for jumps to be taken, any page with reachable
    code can be dumped.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要电气提取其他页面，您必须单步执行CPU，直到它跳转到另一个内存页面，然后使用测试引脚转储该页面。在该页面内，它将从程序计数器的值开始转储，因此页面的字节将有一些偏移，需要进行修正。通过识别已知页面中的跳转点并安排跳转，可以转储任何包含可达代码的页面。
- en: '![Image](../images/f0375-01.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0375-01.jpg)'
- en: 'Figure F.9: Fabulous Fred Decoder by Sean Riddle'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 F.9：Sean Riddle的Fabulous Fred解码器
- en: '![Image](../images/f0376-01.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0376-01.jpg)'
- en: 'Figure F.10: Fabulous Fred uCOM4 ROM'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 F.10：Fabulous Fred uCOM4 ROM
- en: '![Image](../images/f0377-01.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0377-01.jpg)'
- en: 'Figure F.11: EMZ1001E Diffusion ROM'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 F.11：EMZ1001E 扩散 ROM
- en: '**F.8 AMI S2000 and Iskra EMZ1001**'
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**F.8 AMI S2000 和 Iskra EMZ1001**'
- en: Yugoslavia’s only microcontroller, the Iskra EMZ1001, is a variant of AMI’s
    S2000 series, right down to an AMI logo on the die. Unlike the Soviet clones,
    this one seems to have been licensed by AMI as a cooperative venture. Zoltan Pekic
    implemented an EMZ1001 clone in VHDL as Pekic (2022), and he graciously pointed
    me to a test mode in the documentation.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 南斯拉夫唯一的微控制器——Iskra EMZ1001，是AMI S2000系列的一个变种，甚至在芯片上也有AMI的标志。与苏联克隆芯片不同，这款似乎是由AMI授权并作为合作项目开发的。Zoltan
    Pekic在VHDL中实现了一个EMZ1001的克隆，见Pekic（2022），并且他慷慨地指引我查阅文档中的测试模式。
- en: 'The trick, found on page 4.9 of AMI (1979), is in the interaction of the ROMS
    and SYNC pins. The explanation is short, and easy to skip over if you aren’t looking
    so closely as to clone the chip. The ROMS pin is described like so:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个技巧，见于AMI（1979）的第4.9页，涉及ROMS和SYNC引脚的交互。解释很简短，如果你没有认真查看以便克隆芯片，容易忽略。ROMS引脚的描述如下：
- en: ROM source control. Tied to a logic 1 or 0 to indicate internal ROM only, or
    internal plus external. Tied to SYNC to override Bank 0 with an external program,
    and to inverted SYNC to verify internal ROM contents.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: ROM源控制。连接到逻辑1或0，以指示仅内部ROM，或内部ROM加外部ROM。连接到SYNC以通过外部程序覆盖Bank 0，连接到反转的SYNC以验证内部ROM内容。
- en: So by inverting the SYNC signal into ROMS, we can force the chip into verification
    mode. The instruction decoder will be fed dummy instructions while the program
    counter counts forward and the data pins output the internal ROM contents.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通过反转SYNC信号到ROMS，我们可以将芯片强制进入验证模式。在程序计数器向前计数时，指令解码器将接收虚拟指令，而数据引脚输出内部ROM内容。
- en: If you are impatient, the ROM bits are also visible. [Figure F.11](app06.xhtml#chFfig11)
    shows the bits of an EMZ1001E microcontroller after delayering with HF.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不耐烦，ROM 位也可见。[图 F.11](app06.xhtml#chFfig11) 显示了经过 HF 去层后的 EMZ1001E 微控制器的位。
- en: '**F.9 TMS1000 Test Mode**'
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**F.9 TMS1000 测试模式**'
- en: It’s often hard to know for sure that a given patent matches a given chip, and
    this isn’t made any easier when multiple patents likely refer to the same chip.
    Caudel and Raymond (1974) is the patent for Texas Instruments’ TMS1000 chip, describing
    many of its internal signals and a test mode for dumping the internal ROM contents.
    This test mode does not appear in the datasheet, programmer’s reference manual,
    or other official documentation.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 很难确定给定的专利是否匹配给定的芯片，尤其是在多个专利可能指的是同一芯片的情况下。Caudel 和 Raymond (1974) 是德州仪器 TMS1000
    芯片的专利，描述了许多内部信号和用于转储内部 ROM 内容的测试模式。该测试模式未出现在数据手册、程序员参考手册或其他官方文档中。
- en: Another filing, Boone and Cochran (1977) is frequently cited as the TMS1000
    patent. Both chips have 28 pins. Both chips are intended for ROM-programmed calculators.
    The TMS1000 clearly has a ROM width of eight bits. Boone and Cochran’s chip, however,
    has 11-bit instructions like the TMS0801\. See Ilmer (2024) for an excellent tutorial
    on dumping that chip’s ROM, including detailed notes on determining the ROM bit
    ordering.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个专利，Boone 和 Cochran (1977)，常被引用为 TMS1000 专利。两款芯片都具有 28 个引脚。两款芯片都用于 ROM 编程计算器。TMS1000
    显然具有八位的 ROM 宽度。然而，Boone 和 Cochran 的芯片具有像 TMS0801 一样的 11 位指令。有关如何转储该芯片的 ROM 的优秀教程，请参见
    Ilmer (2024)，其中包括关于确定 ROM 位顺序的详细说明。
- en: Caudel and Raymond’s patent also has a black and white die photograph that is
    quite close to the TMS1000, along with a set of opcodes that match. Column 28
    of their patent describes four test mode operations.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Caudel 和 Raymond 的专利中还有一张黑白芯片照片，与 TMS1000 非常相似，并且有一组匹配的操作码。他们专利的第 28 列描述了四个测试模式操作。
- en: 'Operation 1: The ROM word address is loaded into the program counter serially
    from keyboard pin K1 under the control keyboard pin KC. Setting KC to Vss causes
    the bit to be sampled on *ϕ*1 time, when the program counter is not otherwise
    in use. (The chip’s clock is divided into five signals, of which *ϕ*1 is the first.
    See Figure 24 in the patent for details.)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 操作 1：ROM 字地址通过键盘引脚 K1 在控制键盘引脚 KC 的作用下串行加载到程序计数器中。将 KC 设置为 Vss 会导致在*ϕ*1时采样该位，此时程序计数器不被使用。（芯片的时钟被划分为五个信号，其中*ϕ*1是第一个。有关详细信息，请参见专利中的图
    24。）
- en: Now, if you are following along with the patent and datasheet, you might note
    that there is no KC pin on the datasheet. This can be explained by documentation
    change between the patent and the datasheet. The patent groups KC along with four
    keyboard input pins as signal 75 on the die photograph in [Figure F.12](app06.xhtml#chFfig12),
    while the datasheet places an INIT pin at that same location.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你正在跟随专利和数据手册，你可能会注意到数据手册中没有 KC 引脚。这可以通过专利和数据手册之间的文档更改来解释。专利中将 KC 与四个键盘输入引脚一起归类为芯片照片中信号
    75，如[图 F.12](app06.xhtml#chFfig12)所示，而数据手册则将 INIT 引脚放置在该位置。
- en: '![Image](../images/f0380-01.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0380-01.jpg)'
- en: 'Figure F.12: Prototype from Caudel and Raymond (1974)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '图 F.12: Caudel 和 Raymond (1974) 的原型'
- en: '![Image](../images/f0380-02.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0380-02.jpg)'
- en: 'Figure F.13: TMS1000'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '图 F.13: TMS1000'
- en: '![Image](../images/f0381-01.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0381-01.jpg)'
- en: 'Figure F.14: TMS1000 Pinouts'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '图 F.14: TMS1000 引脚分配'
- en: Input and output pins also have different labels, so expect a little confusion
    as you go along.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 输入和输出引脚也有不同的标签，因此在进行操作时可能会有一些混淆。
- en: 'Operation 2: The ROM page address is loaded in parallel on the K1, K2, K4,
    and K8 keyboard pins. If the KC pin is at -Vdd on clock phase *ϕ*2, four bits
    will be sampled. Note that this parallel load of the page address happens at a
    different clock phase than the word address; the patent suggests a speed hack
    here of quickly iterating the page address while rarely adjusting the word address.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 操作 2：ROM 页地址在 K1、K2、K4 和 K8 键盘引脚上并行加载。如果 KC 引脚在时钟相位*ϕ*2时为 -Vdd，则四个位将被采样。请注意，这个页地址的并行加载发生在与字地址不同的时钟相位；专利在此建议了一种加速方法，即快速迭代页地址，同时很少调整字地址。
- en: 'Operation 3: The eight-bit word at the chosen ROM address can be loaded into
    the program counter by the internal !BRNCAL signal, which is produced by a combination
    of the KC and K2 pins.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 操作 3：通过内部 !BRNCAL 信号，可以将所选 ROM 地址的八位字加载到程序计数器中，该信号是 KC 和 K2 引脚的组合产生的。
- en: 'Operation 4: The result of the fetch from the third operation can be read serially
    out of an output pin under the control of the KC pin. Helpfully, this serial transfer
    can happen at the same time but one phase ahead of loading a new address with
    the first operation.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '操作 4: 从第三个操作中获取的结果可以通过输出引脚串行读取，并由 KC 引脚控制。幸运的是，这种串行传输可以在加载新地址的第一操作之前，且与其同步进行。'
- en: My description sadly lacks a few details, and I doubt I’ll ever really understand
    this test mode before using it to dump a chip. If you implement it before I do,
    kindly send along an email with a copy of your paper and a list of any errata
    that I ought to correct in this appendix entry.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我的描述遗憾地缺少一些细节，我怀疑在使用该模式转储芯片之前，我永远也不会完全理解这个测试模式。如果你在我之前实现了它，请发封邮件给我，并附上你的论文副本以及任何我需要在此附录条目中纠正的勘误表。
- en: '**F.10 Z8 Test ROM**'
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**F.10 Z8 测试 ROM**'
- en: I can’t cite any modern use of this test mode, but many of the Zilog Z8 chips
    such as the Z8601 and Z8611 hold a test ROM in addition to the main program ROM.
    This is explained in Zilog (1982), where the purpose of the test ROM is to test
    those few features which cannot be directly exercised from the external EEPROM
    code that performs the majority of testing.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我无法引用任何现代使用这种测试模式的实例，但许多 Zilog Z8 芯片，如 Z8601 和 Z8611，除了主程序 ROM 之外，还包含一个测试 ROM。这个功能在
    Zilog (1982) 中有解释，其中测试 ROM 的目的是测试那些无法通过执行主要测试的外部 EEPROM 代码直接操作的少数功能。
- en: The first clue comes from die photography, where the ROM is larger than expected.
    The internal ROM of the Z0860008PSC, for example, contains 256 columns by 66 rows,
    rather than the expected 64 rows. This is 64 bytes more than the two kilobytes
    advertised in the datasheet.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个线索来自于芯片的图像，其中 ROM 的大小比预期的要大。例如，Z0860008PSC 的内部 ROM 包含 256 列和 66 行，而不是预期的
    64 行。这比数据表中广告的两千字节多了 64 字节。
- en: From Zilog (1982), we find that these bytes contain something like the test
    ROM in [Figure F.16](app06.xhtml#chFfig16). The test ROM replaces the application
    ROM if the !RST pin is held 2.5 volts higher than VCC for at least eight clock
    cycles, after which it can be relaxed to the normal voltage. That’s 7.5 volts
    for a 5-volt chip.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Zilog (1982) 中，我们可以发现这些字节包含类似于 [图 F.16](app06.xhtml#chFfig16) 中的测试 ROM。测试
    ROM 在 !RST 引脚被拉高 2.5 伏高于 VCC 并保持至少八个时钟周期后，会替代应用程序 ROM，然后可以放松到正常电压。对于 5 伏芯片来说，就是
    7.5 伏。
- en: The test ROM is too small to test very much, so it first maps external memory
    through the IO ports and calls into that external memory. It then branches to
    `0x0812` (or `0x1012`) in the external memory, where the EEPROM example disables
    interrupts and runs a testing loop, often calling back into the test ROM. Callbacks
    seem to be used to test the I/O ports that are used for external memory access;
    they aren’t used for convenient like a PC BIOS call.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 测试 ROM 太小，无法进行大量测试，因此它首先通过 IO 端口映射外部存储器，并调用该外部存储器。接着，它跳转到外部存储器中的 `0x0812`（或
    `0x1012`）位置，在那里 EEPROM 示例禁用中断并运行测试循环，通常会回调测试 ROM。回调似乎用于测试用于外部存储器访问的 I/O 端口；它们并不像
    PC BIOS 调用那样方便。
- en: '![Image](../images/f0383-01.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0383-01.jpg)'
- en: 'Figure F.15: Zilog Z8611'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '图 F.15: Zilog Z8611'
- en: '![Image](../images/f0384-01.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0384-01.jpg)'
- en: 'Figure F.16: Z8601 Test ROM'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '图 F.16: Z8601 测试 ROM'
- en: '![Image](../images/f0384-02.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0384-02.jpg)'
- en: 'Figure F.17: Entry to a Z8601 Test EEPROM'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '图 F.17: 进入 Z8601 测试 EEPROM'
- en: When running in the test mode, the `lde` instruction can fetch bytes from the
    test ROM while the `ldc` instruction fetches words from the application ROM. That
    and a simple loop ought to be enough to dump the ROM, without bothering to call
    back into the test ROM.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试模式下运行时，`lde` 指令可以从测试 ROM 获取字节，而 `ldc` 指令则从应用程序 ROM 获取字。这样，一个简单的循环应该足以转储 ROM，而无需调用回测试
    ROM。
- en: The ROM variants of these chips can also be dumped photographically. They use
    a diffusion ROM whose bits become visible after delayering with HF.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这些芯片的 ROM 变种也可以通过照片方式转储。它们使用扩散 ROM，其位在用 HF 去层化后变得可见。
