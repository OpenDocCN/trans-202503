- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 23 RECURSION
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 23 递归
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: 'This chapter covers one of my favorite topics: recursion, or code that calls
    itself. I’ll start with a much more detailed definition, but the only way to truly
    understand this concept is through examples, so we’ll step through multiple instances
    of Batch recursion. One will be the calculation of a factorial, a truly classic
    example, with another being the conversion of a decimal to a hexadecimal. The
    last example will be something that’s quintessentially Batch: a recursive search
    through directories and their subdirectories. Then you’ll learn an important limitation
    to be aware of before you write code that calls itself.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍我最喜欢的主题之一：递归，或者说调用自身的代码。我将从一个更详细的定义开始，但理解这个概念的唯一真正方法是通过例子，所以我们将逐步讲解多个批处理递归的实例。其中一个将是阶乘的计算，这是一个真正经典的例子，另一个将是十进制转换为十六进制。最后一个例子将是批处理的典型应用：在目录及其子目录中进行递归搜索。然后，你将了解在编写调用自身的代码之前需要注意的一个重要限制。
- en: Defining Recursion
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义递归
- en: '*Recursion* is the technique where a bit of code invokes or calls itself. You
    can do this in the vast majority of coding languages. In a more object-oriented
    language, a command inside a method calls that particular method. Even in a procedural
    language like COBOL, a command inside a program calls that particular program.
    Batch is no different. In recursive Batch, a routine typically contains a call
    command that calls that particular routine. Less frequently, a bat file contains
    a call command that calls that particular bat file.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*递归*是一种技术，代码调用或自我调用。你可以在绝大多数编程语言中做到这一点。在面向对象语言中，一个方法内部的命令调用该方法。即使在像 COBOL 这样的过程语言中，程序内部的命令也会调用该程序。批处理语言也不例外。在递归批处理中，常规包含一个调用命令来调用该常规。较少情况下，一个批处理文件会包含一个调用命令来调用该批处理文件。'
- en: 'There’s a simple logical beauty to recursion that can best be summed up with
    one word: *elegance*. I was trained as a mathematician before becoming a coder,
    and in both disciplines elegance is the greatest praise, and *functional* is a
    back-handed compliment at best, whether it be in reference to a proof in the former
    discipline or a program in the latter. There are many words and phrases of compliment
    for a piece of code—well-constructed, slick, nifty, smart, well-thought-out—but
    elegant stands alone as the best adjective a coder can hear. But when someone
    calls your code functional, the conceit is “It’ll work, but it’s supremely ugly,
    even logically offensive, and I could’ve done far better.” In the Venn diagram
    of descriptive terms for code and supermodels, the intersection set is a set of
    one: elegant.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 递归有一种简单的逻辑美感，可以用一个词来概括：*优雅*。在成为程序员之前，我接受过数学训练，在这两种学科中，“优雅”是最大的赞美，而“*实用*”充其量不过是间接的恭维，无论是在前者的证明中还是在后者的程序中都是如此。赞美代码的词语和短语有很多——结构良好、流畅、巧妙、聪明、深思熟虑——但“优雅”独树一帜，是程序员能听到的最佳形容词。但当有人称你的代码为“实用”时，隐含的意思是：“它会工作，但极其丑陋，甚至在逻辑上令人反感，我本可以做得更好。”在描述代码和超级模特的词汇的文氏图中，交集只有一个词：优雅。
- en: If your first instinct is that recursion sounds like the makings of an endless
    loop, your caution is prudent. If the call is done unconditionally, yes, the result
    will be an endless loop (or a crash when the call stack blows up). Recursion must
    have some sort of conditional logic, usually an if command, that’ll execute code
    for either the recursive case or the base case.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的第一反应是递归听起来像是一个无限循环的开始，那么你的谨慎是明智的。如果调用是无条件执行的，确实，结果将是一个无限循环（或者当调用堆栈溢出时，程序崩溃）。递归必须有某种条件逻辑，通常是一个
    if 命令，它会根据递归情况或基准情况来执行代码。
- en: The *recursive case* performs the recursive call, and the *base case* does not.
    A properly designed recursive call will get you one step closer to the base case.
    Several executions of the recursive case usually lead to a call that executes
    the base case, starting the process of backing out of the recursive calls. The
    best way to understand this is through examples (to come), stepping through each
    recursive call and keeping track of the state of each variable for each call,
    often with pencil and paper.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*递归情况*会执行递归调用，而*基准情况*则不会。一个设计得当的递归调用会使你更接近基准情况。几次递归情况的执行通常会导致执行基准情况的调用，从而开始撤回递归调用的过程。理解这一点的最好方法是通过例子（接下来会讲解），逐步跟踪每一次递归调用，并记录每次调用中每个变量的状态，通常会用纸和笔记录。'
- en: Recursion is quite different from the while and do...while commands introduced
    in [Chapter 9](chapter9.xhtml). The goto command branched backward in the code
    to re-execute some code that just executed, but nothing was being called; there
    was no intent of control being returned. Instead, the technique of recursion calls
    or invokes the code of which it’s a part.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Recursion is the coding equivalent of the Ouroboros, the mythological serpent
    or dragon eating its own tail (see [Figure 23-1](#fig23-1)). The beast has convergent
    roots dating back to ancient China, Egypt, and Greece. It often symbolizes “eternal
    cyclic renewal,” infinity, eternity, and even alchemy. I’ve long viewed it as
    an excellent metaphor for code invoking itself, even before knowing it by name.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig23-1.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
- en: 'Figure 23-1: A representation of the Ouroboros'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Salvador Dali expressed his typically atypical interpretation of the creature
    in his work *The Ouroboros*. It’s certainly presumptuous, but when I’m done coding
    a bit of recursive logic, I feel a very small affinity to an artist such as Dali,
    imagining the pride he must’ve felt in sharing his works with the world. A great
    painter rightly wants to showcase his works for others to view as a preeminent
    chef surely looks forward to diners sampling her plat du jour. Instead of a gallery
    showing or a restaurant opening, I anticipate the date of the next code review
    with my peers. I’m embellishing to a degree (and not comfortable admitting to
    what degree), but I do take pride in a fine bit of recursion, and I hope that
    you do or will as well.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Factorials
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The classic example of recursion in any math or programming text is the factorial,
    and I see no reason to counter tradition. The factorial of *n*, represented by
    *n*!, is *n* × (*n* – 1) × (*n* – 2) ... 2 × 1, or more informally, the product
    of the successive multiplication of the integer and all the integers less than
    it down to 1.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: NOTE
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*When asking a mathematician how old he was turning, I received the reply,
    “my last factorial birthday.” He was nearing 24 and didn’t expect to make it to
    120 or 5!. I was once guilty of decorating a 30th birthday cake with 6! / 4!.
    Factorials can be fun as well as useful, but I digress.*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: The factorial of 4 is the product of 4 and the factorial of 3, which is the
    product of 3 and the factorial of 2, which is the product of 2 and the factorial
    of 1, which is simply 1\. The pattern begs for recursion. A routine that accepts
    a number as input and returns its factorial can multiply that number by the factorial
    of the number one less than it. And, the best way to find that second factorial
    is for the routine to call itself. When finding the factorial of an integer greater
    than 1, we invoke the recursive case, and when finding the factorial of 1, we
    have satisfied the base case and elegantly return the number 1\. That’s recursion!
    Now we must turn this into code.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'The :Factorial routine accepts a numerical input parameter and passes back
    the number’s factorial as the variable name we pass in the second parameter. Before
    getting to the routine itself, the following call to it populates factorial with
    the factorial of 4:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You might be expecting a more complex routine, but here it is in its simplicity.
    Take note of the call command recursively invoking the :Factorial routine:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If the input parameter, %~1, equals 1, the if command asserts that the base
    case is satisfied and we set the second parameter, %~2, to 1, because the factorial
    of 1 is 1, and we are done.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'If the integer is greater than 1, control goes to the code block under the
    else keyword, where the logic for the recursive case executes. We next find the
    number one less than our input value: nbrLessOne. To determine the factorial of
    nbrLessOne, we recursively call the same exact routine that we are currently in
    and retrieve the result as the lessOneFact variable. Finally, we multiply the
    routine’s input value by the factorial returned from the recursive call, assign
    the result to the second parameter, %~2, which we return to the calling code,
    and we are done.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: This top-down reading of the routine is helpful and a great first step, but
    it glosses over what happens in the successive recursive calls. To really understand
    what’s happening, let’s explore the logic again by stepping through a sample execution
    with the input parameter of 4.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Because 4 is greater than 1, we immediately jump down to the else code block,
    find the prior number of 3, and do the recursive call. Let’s put a breadcrumb
    down and come back to it later.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: The second time through the routine, the input parameter is 3, so we call recursively
    again to find the factorial of 2. Place a second breadcrumb at the call command.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: The third time through the routine, the input is 2, so we perform yet another
    recursive call, this time to find the factorial of the number 1. Place a third
    breadcrumb.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the if command is true, the base case is satisfied, and we return the
    value 1 as the second parameter, %~2.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Now we can pick up the breadcrumbs in reverse order as we find our way back
    to the original call. At the third breadcrumb we get back the factorial of 1 in
    the lessOneFact variable, and we multiply it by that call’s input parameter, %~1,
    which is 2. We assign the product of 2 to the return parameter and pass it back.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: We now find ourselves back at the second breadcrumb where we multiply that call’s
    input parameter of 3 by lessOneFact, which holds the just returned value of 2.
    The routine passes back the result of 6, or the factorial of 3, to the site of
    the first breadcrumb.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'The logic multiplies the original input parameter of 4 by lessOneFact, which
    now holds 6. We return the result of 24 to the original call. That last point
    is subtle and critical: we aren’t passing the result back to one of the recursive
    calls in the routine; we’re finally passing the result back to the original call.
    And we are done.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑上，原始输入参数4会乘以现在包含6的`lessOneFact`。我们将结果24返回给最初的调用。这个最后的细节很微妙也非常关键：我们不是将结果传回递归调用中的某一项，而是最终将结果传回最初的调用。这样，任务就完成了。
- en: The concept may be a bit confusing at first, and there is no shame in rereading
    the last few lines more than once. Curiously, the variables seem to have multiple
    states at one time. The nbrLessOne and lessOneFact variables contain three different
    values each, the input parameter took on four values, and we assigned the output
    parameter four times. Batch accomplishes this with the *call stack*. Before performing
    a recursive call, it stores pertinent data on the call stack, and it can do this
    for multiple calls.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念一开始可能有些让人困惑，反复阅读最后几行是完全没有问题的。令人好奇的是，变量似乎在同一时间拥有多个状态。`nbrLessOne`和`lessOneFact`变量各自包含三个不同的值，输入参数有四个值，而我们将输出参数赋值了四次。批处理通过*调用堆栈*来完成这一过程。在执行递归调用之前，它会将相关数据存储在调用堆栈上，并且可以为多个调用执行此操作。
- en: The interpreter places all active variables on the call stack before it does
    the first recursive call. During that call, the variables may take on new values
    that it again places atop the call stack before the next recursive call. When
    control returns from each call, the interpreter simply restores the corresponding
    values from the top of the call stack and continues processing.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 解释器会在执行第一次递归调用之前，将所有活跃的变量放置在调用堆栈上。在那次调用中，变量可能会赋予新的值，并再次将这些新值放在调用堆栈的顶部，然后再进行下一次递归调用。每次调用结束时，控制会从调用中返回，解释器会从调用堆栈顶部恢复相应的值，并继续处理。
- en: By the way, there are means to calculate factorials without recursion, but they
    are uninspired and far less enjoyable.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便提一下，也可以通过非递归的方法来计算阶乘，但这些方法没有创意，远不如递归有趣。
- en: Decimal to Hexadecimal
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 十进制转十六进制
- en: Before converting a decimal number (base 10) to a hexadecimal number (base 16)
    with recursive Batch code, let’s consider how to do it mathematically. For decimal
    numbers less than 256, start by dividing the number by 16, leaving a quotient
    and a remainder. These two numbers will be the two digits of the hexadecimal number,
    with one catch. Either number is in the range from 0 to 15, but we want a single
    character. The numbers 0 through 9 are fine, but if the value is a two-digit decimal
    number, we must map it to a hexadecimal digit. That is, 10 maps to A, 11 maps
    to B, and so on, up to 15 mapping to F.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用递归批处理代码将十进制数字（基数10）转换为十六进制数字（基数16）之前，我们先来看看如何通过数学方法来做这件事。对于小于256的十进制数字，首先将数字除以16，得到商和余数。这两个数字将成为十六进制数的两个数字，但有一个注意事项。每个数字的范围是从0到15，但我们希望得到一个单一字符。数字0到9没问题，但如果值是两位数的十进制数，我们必须将其映射为十六进制数字。也就是说，10映射为A，11映射为B，依此类推，直到15映射为F。
- en: If the decimal number is between 256 and 4,095, it maps to a three-digit hexadecimal
    number. This requires two rounds of division. The remainder of the first division
    provides the rightmost hexadecimal digit, and we divide the quotient again by
    16\. The remainder becomes the second rightmost hexadecimal digit, and the new
    quotient is the leading hexadecimal digit. As the numbers get larger, the same
    pattern holds; for instance, a six-digit hexadecimal number requires five divisions.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果十进制数字介于256和4,095之间，它映射为一个三位的十六进制数。这需要两轮除法运算。第一次除法的余数就是最右边的十六进制数字，然后我们再将商除以16。余数就是第二个最右边的十六进制数字，新的商则是最前面的十六进制数字。随着数字增大，类似的模式依旧适用；例如，一个六位的十六进制数字需要五次除法。
- en: 'This is exactly the type of pattern that also screams out for recursion. The
    following Batch routine converts a decimal number into a hexadecimal number. Similar
    to the factorials example there are two parameters: the first is the decimal input,
    and the second is the variable containing the hexadecimal output. Here’s the code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是适合递归的模式。以下的批处理程序将十进制数字转换为十六进制数字。与阶乘例子类似，这里有两个参数：第一个是十进制输入，第二个是包含十六进制输出的变量。以下是代码：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: I’m storing the 16 hexadecimal characters in hexChars for later use. The routine
    divides the decimal number by 16, giving us quotient, while modulo division by
    16 gives us remainder. If the quotient is 0, the result is a single character.
    This is the base case. We substring the appropriate character out of hexChars,
    using remainder as the offset. Notice that 0 maps to 0, 1 maps to 1, and so on,
    until 9 maps to 9. Then 10 maps to A, 11 maps to B, and, ultimately, 15 maps to
    F. We return this single digit as the value of the second parameter to complete
    the base case.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: The recursive case occurs when quotient is greater than 0. The quotient variable
    needs to be converted further, so we perform a recursive call of :GetHex and get
    back its hexadecimal value in the recur variable, which can be one to many characters.
    We assign the return parameter a concatenation of this value and the same mapping
    of the remainder to a hexadecimal digit that we just witnessed.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '(By the way, notice the two concatenated values. We resolve the recur variable
    with exclamation marks because it’s assigned in the code block as part of the
    call command. The rightmost byte is resolved from this text: !hexChars:~%remainder%,1!.
    This time I’m employing delayed expansion with the exclamation marks after first
    resolving the offset, or remainder, with percent signs.)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'To really understand this logic, let’s step through it to convert 700 to a
    hexadecimal number. First, let’s do it mathematically: 700 / 16 = 43 with a remainder
    of 12\. The 12 maps to the hexadecimal digit C, which will be the rightmost byte
    of the final result. Next, 43 / 16 = 2 with a remainder of 11, which maps to the
    next byte from the right in the final result, B. The quotient of 2 is a one-digit
    number, so it represents itself. The result is the hexadecimal number, 2BC.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'The following call command returns the value 2BC as the hexVal variable:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Taking this step by step, since the input parameter is 700, the quotient variable
    is 43, and the remainder variable is 12. Because quotient isn’t 0, the recursive
    case logic executes. The interpreter puts the remainder of 12 on the stack for
    now and passes 43 as the first parameter of a recursive call.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: In this pass, quotient is 2, and remainder is 11. Again, the recursive case
    logic executes, and 11 finds its way onto the stack as we pass 2 in another recursive
    call.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: In what’ll be the final pass, quotient is 0, and remainder is 2. Since quotient
    equals 0, the base case logic finally executes. The decimal digit 2 maps to the
    hexadecimal digit 2, and we pass it back as the output parameter.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s reverse direction and step back through the calls that we just made.
    The interpreter restores remainder to its value of 11 before the set command concatenates
    two values. The first is the just returned value of 2, and the second is B, which
    we mapped to from the 11. Hence, the routine passes back 2B as the output parameter.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Back in the initial pass, the interpreter restores the remainder variable of
    12 from the call stack. We concatenate two values, the just returned 2B and C,
    which is the hexadecimal value corresponding to the 12. Finally, the routine passes
    back 2BC as the output parameter to the original call command.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始遍历中，解释器从调用栈中恢复了余数变量12。我们将两个值连接在一起，刚刚返回的2B和C，这对应于12的十六进制值。最后，例程将2BC作为输出参数返回给原始调用命令。
- en: With each call, the recursive logic is determining another hexadecimal digit,
    ultimately returning a multibyte hexadecimal value. At first glance, these few
    lines of code might not look like much, but under close inspection the routine
    turns out to be quite involved and interesting.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 每次调用时，递归逻辑都会确定另一个十六进制数字，最终返回一个多字节的十六进制值。乍一看，这几行代码似乎不算多，但仔细查看后，这段程序实际上相当复杂且有趣。
- en: Recursive Directory Searches
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 递归目录搜索
- en: The last two examples offer great demonstrations of recursion, allowing us to
    step through the recursive calls, but for my last example I want something that
    has Batch in its DNA, something not easily done in other languages. We’ll recursively
    search a directory and all of its subdirectories to produce a report detailing
    the total number of bytes and files in each folder.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的两个例子很好地展示了递归，允许我们逐步跟踪递归调用，但在我的最后一个例子中，我想要一些带有Batch基因的东西，是其他语言中难以做到的。我们将递归地搜索一个目录及其所有子目录，以生成报告，详细列出每个文件夹中的字节数和文件数。
- en: If that sounds familiar, you learned about the for command with the /D (directory)
    and /R (recursion) options in [Chapter 18](chapter18.xhtml). This command easily
    created a simple list of all the subdirectories, but it handled the recursive
    call for you and didn’t leave much room for modifications. True recursion provides
    much more flexibility and power over the output, and that’s what we’ll do here.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这听起来很熟悉，你可能在[第18章](chapter18.xhtml)中学习过带有/D（目录）和/R（递归）选项的for命令。这个命令轻松创建了所有子目录的简单列表，但它为你处理了递归调用，并且没有留下太多修改的空间。真正的递归提供了更大的灵活性和更强大的输出控制，这正是我们在这里要做的。
- en: Before coding the recursive routine, we need a plan and some analysis. To produce
    the detail records, we’ll use a dir command targeting a directory and use it as
    the input to a for /F command. The routine will write the totals for the directory
    to the report and recursively call itself, passing each subdirectory. Then it
    will process each subdirectory, making recursive calls for any subdirectories
    of subdirectories.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写递归例程之前，我们需要一个计划和一些分析。为了生成详细记录，我们将使用一个dir命令，针对一个目录，并将其作为for /F命令的输入。这个例程会将目录的总数写入报告，并递归地调用自己，传递每个子目录。然后，它会处理每个子目录，对任何子目录的子目录进行递归调用。
- en: 'The only way to write code like that is to see the output of the embedded command,
    in this case a dir command. Depending on the contents of the directory, the dir
    C:\Batch\* command might produce the following output:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 编写这样的代码唯一的方法是查看嵌入命令的输出，在这个例子中是一个dir命令。根据目录的内容，dir C:\Batch\*命令可能会产生以下输出：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We’ll need to skip seven lines, the five header records plus the two entries
    showing directories of one or two periods. Of the remaining records, if the second
    token equals File(s), we’ve found the entry with the total number of files (token
    1) and total bytes of those files (token 3). If the fourth token equals <DIR>,
    we’ve found a folder name for a subdirectory (token 5). We don’t know much about
    the subdirectory yet, but a recursive call will bring up the same type of information
    about it. We can ignore the other records detailing each file and the final trailer
    record.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要跳过七行，五个标题记录加上两条显示一个或两个句点的目录项。在剩余的记录中，如果第二个标记等于File(s)，我们找到了包含文件总数（标记1）和这些文件的总字节数（标记3）的条目。如果第四个标记等于<DIR>，我们找到了子目录的文件夹名称（标记5）。我们还不知道子目录的详细信息，但递归调用会提供关于它的相同类型的信息。我们可以忽略其他记录，这些记录详细描述了每个文件和最后的尾部记录。
- en: 'We could write the data to the console, but let’s use our report writing skills
    from [Chapter 22](chapter22.xhtml). The first section of code creates the header
    data and makes the initial call to the recursive :GetFldrSz routine that gets
    the folder information starting with the contents of *C:\Batch\*:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将数据写入控制台，但让我们使用[第22章](chapter22.xhtml)中的报告编写技巧。第一部分代码创建了标题数据，并首次调用递归的:GetFldrSz例程，从*C:\Batch\*的内容开始获取文件夹信息：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Focusing on the :GetFldrSz routine, the for /F command uses a dir command as
    its input, and that command uses the routine’s sole parameter, a directory, appended
    with a wildcard as its argument. The for /F command uses five tokens (tokens=1-5)
    and skips the unwanted header records (skip=7).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 集中在 :GetFldrSz 例程上，for /F 命令将 dir 命令作为输入，而该命令使用例程的唯一参数——一个目录，并在其后附加通配符作为参数。for
    /F 命令使用五个标记（tokens=1-5），并跳过不需要的标题记录（skip=7）。
- en: 'If the fourth token, %%d, equals <DIR>, we’ve found the recursive case; the
    recursive call passing as its argument the input directory appended with the name
    of the subfolder from the fifth token: %~1\%%e. Otherwise, the base case looks
    for the second token, %%b, to match the text File(s). If so, we store the total
    number of files and bytes in the folder in variables padded with leading spaces.
    Using those recently learned formatting techniques, we write a record to the report
    detailing the three pieces of information.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果第四个标记 %%d 等于 <DIR>，我们就找到了递归情况；递归调用将输入目录与第五个标记中的子文件夹名称拼接：%~1\%%e。否则，基本情况会查找第二个标记
    %%b 是否匹配文本 File(s)。如果是，我们将文件夹中的文件总数和字节数存储到带有前导空格的变量中。使用那些新学到的格式化技巧，我们将记录写入报告，详细说明这三项信息。
- en: 'If the directory structure isn’t very complex, this code might write the following
    recursively generated report:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果目录结构不是很复杂，这段代码可能会递归生成以下报告：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The last line contains the information from the dir command we executed to get
    a feel for the expected output, and it also shows the root directory argument
    from the initial call command. The other four detail lines are products of the
    recursive calls.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行包含我们执行 dir 命令以了解预期输出时得到的信息，同时也显示了初始调用命令中的根目录参数。其他四行详细信息是递归调用的结果。
- en: The beauty of this design is that the code makes a call for each subfolder,
    regardless of how many exist, if any at all. This routine is a framework, and
    there are countless auxiliary processes possible with minor modifications. Perhaps
    only directories in excess of a certain number of files or bytes should make the
    report. Shifting attention to files, perhaps you want to flag recently modified
    files to be part of an entirely different report, or maybe archive them. Perhaps
    you want to delete old or excessively large files, or maybe files fitting a certain
    mask or having a certain attribute. The list goes on.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个设计的美妙之处在于，无论子文件夹存在多少个，代码都会对每个子文件夹进行调用。如果没有子文件夹，代码也能正常运行。这个例程是一个框架，通过小的修改可以实现无数的辅助流程。或许只有文件数或字节数超过某个数量的目录才应当生成报告。转向文件，或许你想将最近修改过的文件标记出来，作为完全不同报告的一部分，或者将它们归档。也许你想删除旧的或过大的文件，或者删除符合某个掩码或具有某些属性的文件。可以做的事情不胜枚举。
- en: There are a couple of caveats, however. The previous code doesn’t work on a
    root directory such as *C:\* because we are skipping the first two detail records
    produced by the dir command (the <DIR> records with one or two dots for the directory).
    Remember from [Chapter 13](chapter13.xhtml) that this command doesn’t display
    those two records when the argument is just a drive letter. With some modifications,
    we can account for that issue, but the other caveat is more of a batveat, and
    it applies more generally to recursion. It’s the possibility of a stack overflow.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，也有几个警告。之前的代码在根目录（如 *C:\*）上不起作用，因为我们跳过了 dir 命令生成的前两个详细记录（<DIR> 记录，目录后面跟着一个或两个点）。记得在[第13章](chapter13.xhtml)中提到过，当参数仅是驱动器字母时，这个命令不会显示这两条记录。经过一些修改后，我们可以解决这个问题，但另一个警告更像是一个递归的陷阱，适用于递归的更一般情况，那就是栈溢出的可能性。
- en: Recursion Stack Overflow
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 递归栈溢出
- en: 'The primary batveat concerning recursion is important, yet very avoidable.
    With each successive recursive call, the interpreter places data onto the call
    stack, allowing you to use a variable that may have scores of values, one for
    each invocation. But memory is finite, and the interpreter doesn’t allocate much
    of it for the call stack. When it reaches 90 percent of its allocation, the interpreter
    aborts with a message such as this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 关于递归的一个主要警告很重要，但完全可以避免。随着每次递归调用，解释器会将数据放到调用栈中，使你可以使用一个可能有多个值的变量，每个调用一个值。但内存是有限的，且解释器为调用栈分配的内存不多。当调用栈的内存占用达到其分配的
    90% 时，解释器会终止并显示类似以下的消息：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Setting aside all justified critiques of Batch’s seemingly random use of capitalization
    and space-delimited lettering, this failed after 507 recursive calls, but 506
    isn’t the limit. I’ve used recursion quite a bit and have never seen it blow up
    with 300 or fewer recursive calls, but it varies greatly from machine to machine
    and from situation to situation. Every language has a limitation on recursion,
    but most usually allow far more levels. This is manageable, but you must take
    this limitation into consideration when coding a solution.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 除去对Batch似乎随意使用大写和空格分隔字母的所有合理批评外，这在507次递归调用后失败了，但506次并不是极限。我使用递归已经有一段时间了，从未见过在300次或更少的递归调用中出现崩溃，但这因机器和情况而异。每种语言都有递归的限制，但大多数通常允许更多的层级。这是可以管理的，但在编写解决方案时，你必须考虑到这一限制。
- en: If the code is part of a larger process in an environment where an abort might
    result in a substantial financial loss with the possibility of you and others
    being woken up in the middle of the night to address the fallout, then you should
    limit recursive calls to situations where the call stack will max out well below
    the threshold of a possible overflow. But please don’t let this scare you off
    from such a wonderful technique. Well-designed recursion will easily stay inside
    these guardrails.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代码是一个更大过程的一部分，且在某种环境中中止可能会导致重大经济损失，甚至可能在半夜被叫醒来处理后果，那么你应该将递归调用限制在调用栈远低于可能溢出的阈值的情况。但请不要让这吓到你，避免使用这么棒的技术。设计良好的递归可以轻松保持在这些安全范围内。
- en: For instance, the conversion of an integer to a hexadecimal number requires
    10 or fewer recursive calls for numbers less than nine trillion. Even the recursive
    code traversing a directory structure isn’t in danger of overflowing the call
    stack. Some directories might hold hundreds of subdirectories, but a close reading
    of the code in the previous section shows that sibling folders are never on the
    call stack at the same time. The interpreter continually adds and removes items
    from the call stack so that it’s never deeper than the level of the deepest folder
    from the root, rarely more than a dozen. You can safely code these solutions in
    any language, including Batch.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，将整数转换为十六进制数字对于小于九万亿的数字只需要10次或更少的递归调用。即使是遍历目录结构的递归代码也不容易造成调用栈溢出。某些目录可能包含数百个子目录，但前一节中代码的仔细阅读表明，同级文件夹永远不会同时出现在调用栈上。解释器不断地从调用栈中添加和移除项目，因此它的深度永远不会超过从根目录到最深文件夹的层级，通常不会超过十几层。你可以在任何语言中安全地编写这些解决方案，包括Batch。
- en: Summary
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: I hope that you enjoyed this chapter as much as I did. You’ve learned how recursion
    works from a coder’s perspective and the interpreter’s perspective—that is, I
    demonstrated how to execute recursion and also discussed how the interpreter is
    using the call stack behind the scenes.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你和我一样喜欢这一章。你已经从程序员的角度和解释器的角度学习了递归是如何工作的——也就是说，我展示了如何执行递归，并且还讨论了解释器如何在幕后使用调用栈。
- en: I also demonstrated the usefulness of stepping through the code, recursive call
    by recursive call, with detailed examples. You must be careful of overflowing
    the recursion stack, but recursion is a wonderfully elegant tool when used wisely.
    Be on the lookout for problems in need of a recursive solution. For any process
    that iterates through a finite number of repetitive steps, a loop is usually the
    first solution that comes to mind, but look for the recursive case and the base
    case. If you see them, you can write some recursive logic. (For more on this topic,
    see [Chapter 23](chapter23.xhtml).)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我还展示了逐步调试代码的有用性，每次递归调用都有详细的示例。你必须小心避免递归栈溢出，但当明智地使用时，递归是一种优雅的工具。要留意需要递归解决的问提。对于任何需要迭代有限次重复步骤的过程，循环通常是第一个想到的解决方案，但要寻找递归案例和基本案例。如果你发现它们，你就能编写递归逻辑。（有关这个主题的更多内容，请参阅[第23章](chapter23.xhtml)。）
- en: Recursion is great for searching directories. In the next chapter, I’ll also
    discuss searches, but with a far more narrowed focus. Instead of searching every
    directory on your computer, you’ll learn how to search for a string inside a larger
    string, a file, or even multiple files.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 递归非常适合搜索目录。在下一章中，我还将讨论搜索，但焦点会更加狭窄。你将学习如何在更大的字符串、文件，甚至多个文件中搜索一个子字符串，而不是搜索你电脑上的每个目录。
