["```\nPS> **$token = Get-NtToken** \n```", "```\nPS> **$token = Get-NtToken -ProcessId** **`<PID>`** \n```", "```\nPS> **$token.User**\nName                  Attributes\n----                  ----------\nGRAPHITE\\user         None \n```", "```\nPS> **Format-NtToken $token -All**\nUSER INFORMATION\n----------------\nName                  Attributes\n--------------\nGRAPHITE\\userNone\n\nGROUP SID INFORMATION\n---------------------\nName                  Attributes\n--------------\nGRAPHITE\\NoneMandatory, EnabledByDefault\nEveryoneMandatory, EnabledByDefault\n`--snip--` \n```", "```\nPS> **$token = Get-NtToken**\nPS> **Invoke-NtToken $token {**\n    **Get-NtDirectory -Path \"\\\"**\n**} -ImpersonationLevel Impersonation**\nName NtTypeName\n---- ----------\n     Directory\n\nPS> **Invoke-NtToken $token {**\n    **Get-NtDirectory -Path \"\\\"**\n**} -ImpersonationLevel Identification**\nGet-NtDirectory : (0xC00000A5) - A specified impersonation level is invalid.\n`--snip--` \n```", "```\nPS> **$imp_token = Copy-NtToken -Token $token -ImpersonationLevel Delegation**\nPS> **$imp_token.ImpersonationLevel**\nDelegation\n\nPS> **$imp_token.TokenType**\nImpersonation \n```", "```\nPS> **$pri_token = Copy-NtToken -Token $imp_token -Primary**\nPS> **$pri_token.TokenType**\nPrimary\n\nPS> **$pri_token.ImpersonationLevel**\nDelegation \n```", "```\nPS> **$imp_token = Copy-NtToken -Token $token -ImpersonationLevel Identification**\nPS> **$pri_token = Copy-NtToken -Token $imp_token -Primary**\nException: \"(0xC00000A5) - A specified impersonation level is invalid.\" \n```", "```\nPS> **Invoke-NtToken -Anonymous {Get-NtToken -Pseudo -Primary | Get-NtTokenSid}**\nName                         Sid\n----                         ---\nGRAPHITE\\user                S-1-4-21-2318445812-3516008893-216915059-1002 ❶\n\nPS> **Invoke-NtToken -Anonymous {Get-NtToken -Pseudo -Impersonation | Get-NtTokenSid}**\nName                         Sid\n----                         ---\nNT AUTHORITY\\ANONYMOUS LOGON S-1-4-7 ❷\n\nPS> **Invoke-NtToken -Anonymous {Get-NtToken -Pseudo -Effective | Get-NtTokenSid}**\nName                         Sid\n----                         ---\nNT AUTHORITY\\ANONYMOUS LOGON S-1-4-7 ❸\n\nPS> **Invoke-NtToken -Anonymous {Get-NtToken -Pseudo -Effective} | Get-NtTokenSid**\nName                         Sid\n----                         ---\nGRAPHITE\\user                S-1-4-21-2318445812-3516008893-216915059-1002 ❹ \n```", "```\nPS> **Get-NtTokenGroup $token**\nName                                     Attributes\n----                                     ----------\nGRAPHITE\\None                            Mandatory, EnabledByDefault, Enabled\nEveryone                                 Mandatory, EnabledByDefault, Enabled\nBUILTIN\\Users                            Mandatory, EnabledByDefault, Enabled\nBUILTIN\\Performance Log Users            Mandatory, EnabledByDefault, Enabled\nNT AUTHORITY\\INTERACTIVE                 Mandatory, EnabledByDefault, Enabled\n`--snip--` \n```", "```\nPS> **Get-NtTokenSid $token -Owner**\nName          Sid\n----          ---\nGRAPHITE\\user S-1-4-21-818064984-378290696-2985406761-1002\n\nPS> **Set-NtTokenSid -Owner -Sid \"S-1-2-3-4\"**\nException setting \"Owner\": \"(0xC000005A) - Indicates a particular\nSecurity ID may not be assigned as the owner of an object.\" \n```", "```\nPS> **Get-NtTokenSid $token -Integrity**\nName                                   Sid\n----                                   ---\nMandatory Label\\Medium Mandatory Level S-1-16-8192 \n```", "```\nPS> **Set-NtTokenIntegrityLevel Low -Token $token**\nPS> **Get-NtTokenSid $token -Integrity**\nName                                   Sid\n----                                   ---\nMandatory Label\\Low Mandatory Level    S-1-16-4096 \n```", "```\nPS> **Get-NtTokenGroup -Device -Token $token**\nName                                 Attributes\n----                                 ----------\nBUILTIN\\Users                        Mandatory, EnabledByDefault, Enabled\nAD\\CLIENT1$                          Mandatory, EnabledByDefault, Enabled\nAD\\Domain Computers                  Mandatory, EnabledByDefault, Enabled\nNT AUTHORITY\\Claims Value            Mandatory, EnabledByDefault, Enabled\n`--snip--` \n```", "```\nPS> **Get-NtTokenPrivilege $token**\nName                           Luid                 Enabled\n----                           ----                 -------\nSeShutdownPrivilege            00000000-00000013    False\nSeChangeNotifyPrivilege        00000000-00000017    True\nSeUndockPrivilege              00000000-00000019    False\nSeIncreaseWorkingSetPrivilege  00000000-00000021    False\nSeTimeZonePrivilege            00000000-00000022    False \n```", "```\nPS> **Get-NtTokenPrivilege $token -Privileges SeChangeNotifyPrivilege | Format-List**\nName        : SeChangeNotifyPrivilege\nLuid        : 00000000-00000017\nAttributes  : EnabledByDefault, Enabled\nEnabled     : True\nDisplayName : Bypass traverse checking \n```", "```\nPS> **Enable-NtTokenPrivilege SeTimeZonePrivilege -Token $token -PassThru**\nName                           Luid                 Enabled\n----                           ----                 -------\nSeTimeZonePrivilege            00000000-00000022    True\n\nPS> **Disable-NtTokenPrivilege SeTimeZonePrivilege -Token $token -PassThru**\nName                           Luid                 Enabled\n----                           ----                 -------\nSeTimeZonePrivilege            00000000-00000022    False \n```", "```\nPS> **Get-NtTokenPrivilege $token -Privileges SeTimeZonePrivilege**\nName                           Luid                 Enabled\n----                           ----                 -------\nSeTimeZonePrivilege            00000000-00000022    False\n\nPS> **Remove-NtTokenPrivilege SeTimeZonePrivilege -Token $token**\nPS> **Get-NtTokenPrivilege $token -Privileges SeTimeZonePrivilege**\nWARNING: Couldn't get privilege SeTimeZonePrivilege \n```", "```\nPS> **Enable-NtTokenPrivilege SeChangeNotifyPrivilege**\nPS> **Disable-NtTokenPrivilege SeTimeZonePrivilege**\nPS> **Test-NtTokenPrivilege SeChangeNotifyPrivilege**\nTrue\n\nPS> **Test-NtTokenPrivilege SeTimeZonePrivilege, SeChangeNotifyPrivilege -All**\nFalse\n\nPS> **Test-NtTokenPrivilege SeTimeZonePrivilege, SeChangeNotifyPrivilege**\n**-All -PassResult**\nEnabledPrivileges           AllPrivilegesHeld\n-----------------           -----------------\n{SeChangeNotifyPrivilege}   False \n```", "```\nPS> **$token = Get-NtToken -Filtered -RestrictedSids RC -SidsToDisable WD**\n**-Flags DisableMaxPrivileges**\nPS> **Get-NtTokenGroup $token -Attributes UseForDenyOnly**\nName                           Attributes\n----                           ----------\nEveryone                       UseForDenyOnly\n\nPS> **Get-NtTokenGroup $token -Restricted**\nName                           Attributes\n----                           ----------\nNT AUTHORITY\\RESTRICTED        Mandatory, EnabledByDefault, Enabled\n\nPS> **Get-NtTokenPrivilege $token**\nName                           Luid                 Enabled\n----                           ----                 -------\nSeChangeNotifyPrivilege        00000000-00000017    True\n\nPS> **$token.Restricted**\nTrue \n```", "```\nPS> **$token = Get-NtToken -Filtered -RestrictedSids WR -Flags WriteRestricted**\nPS> **Get-NtTokenGroup $token -Restricted**\nName                           Attributes\n----                           ----------\nNT AUTHORITY\\WRITE RESTRICTED  Mandatory, EnabledByDefault, Enabled\n\nPS> **$token.Restricted**\nTrue\n\nPS> **$token.WriteRestricted**\nTrue \n```", "```\nPS> **Get-NtSid -PackageName 'my_package' -ToSddl**\n❶ S-1-15-2-4047469452-4024960472-3786564613-914846661-3775852572-3870680127\n-2256146868\n\n❷ PS> **Get-NtSid -PackageName 'my_package' -RestrictedPackageName \"CHILD\" -ToSddl**\nS-1-15-2-4047469452-4024960472-3786564613-914846661-3775852572-3870680127 -2256146868-951732652-158068026-753518596-3921317197\n\n❸ PS> **Get-NtSid -KnownSid CapabilityInternetClient -ToSddl**\nS-1-15-3-1\n\n❹ PS> **Get-NtSid -CapabilityName registryRead -ToSddl**\nS-1-15-3-1024-1065365936-1281604716-3511738428-1654721687-432734479 -3232135806-4053264122-3456934681\n\n❺ PS> **Get-NtSid -CapabilityName registryRead -CapabilityGroup  -ToSddl**\nS-1-5-32-1065365936-1281604716-3511738428-1654721687-432734479-3232135806 -4053264122-3456934681 \n```", "```\n❶ PS> **$token = Get-NtToken -LowBox -PackageSid 'my_package'**\n**-CapabilitySid \"registryRead\", \"S-1-15-3-1\"**\n❷ PS> **Get-NtTokenGroup $token -Capabilities | Select-Object Name**\nName\n----\nNAMED CAPABILITIES\\Registry Read\nAPPLICATION PACKAGE AUTHORITY\\Your Internet connection\n\n❸ PS> **$package_sid = Get-NtTokenSid $token -Package -ToSddl**\nPS> **$package_sid**\nS-1-15-2-4047469452-4024960472-3786564613-914846661-3775852572-3870680127 -2256146868\n\nPS> **Get-NtTokenIntegrityLevel $token**\n❹ Low\n\nPS> **$token.Close()** \n```", "```\nPS> **$token = Get-NtToken**\nPS> **$token.Elevated**\nFalse \n```", "```\nPS> **ls C:\\Windows\\System32\\*.exe | Get-Win32ModuleManifest**\nName                           UiAccess   AutoElevate     ExecutionLevel\n----                           --------   -----------     --------------\naitstatic.exe                  False      False           asInvoker\nalg.exe                        False      False           asInvoker\nappidcertstorecheck.exe        False      False           asInvoker\nappidpolicyconverter.exe       False      False           asInvoker\nApplicationFrameHost.exe       False      False           asInvoker\nappverif.exe                   False      False           highestAvailable\n`--snip--` \n```", "```\nPS> **Start-Process notepad -Verb runas** \n```", "```\n❶ PS> **Use-NtObject($token = Get-NtToken -Linked) {**\n    **Format-NtToken $token -Group -Privilege -Integrity -Information**\n**}**\nGROUP SID INFORMATION\n-----------------\nName                          Attributes\n----                          ----------\n❷ BUILTIN\\Administrators        Mandatory, EnabledByDefault, Enabled, Owner\n`--snip--`\n\nPRIVILEGE INFORMATION\n---------------------\nName                          Luid              Enabled\n----                          ----              -------\nSeIncreaseQuotaPrivilege      00000000-00000005 False\n❸ SeSecurityPrivilege           00000000-00000008 False\nSeTakeOwnershipPrivilege      00000000-00000009 False\n`--snip--`\n\nINTEGRITY LEVEL\n---------------\n❹ High\n\nTOKEN INFORMATION\n-----------------\n❺ Type          : Impersonation\nImp Level     : Identification\nAuth ID       : 00000000-0009361F\n❻ Elevated      : True\n❼ Elevation Type: Full\nFlags        : NotLow \n```", "```\n❶ PS> **Use-NtObject($token = Get-NtToken) {**\n **Format-NtToken $token -Group -Privilege -Integrity -Information**\n**}**\nGROUP SID INFORMATION\n-----------------\nName                          Attributes\n----                          ----------\n❷ BUILTIN\\Administrators        UseForDenyOnly\n`--snip--`\n\nPRIVILEGE INFORMATION\n---------------------\nName                          Luid              Enabled\n----                          ----              -------\n❸ SeShutdownPrivilege           00000000-00000013 False\nSeChangeNotifyPrivilege       00000000-00000017 True\nSeUndockPrivilege             00000000-00000019 False\nSeIncreaseWorkingSetPrivilege 00000000-00000021 False\nSeTimeZonePrivilege           00000000-00000022 False\n\nINTEGRITY LEVEL\n---------------\n❹ Medium\n\nTOKEN INFORMATION\n-----------------\nType          : Primary\nAuth ID       : 00000000-0009369B\n❺ Elevated      : False\n❻ Elevation Type: Limited\n❼ Flags         : VirtualizeAllowed, IsFiltered, NotLow \n```", "```\nPS> **Use-NtObject($token = Get-NtToken -Anonymous) {$token.ElevationType}**\nDefault \n```", "```\nPS> **$process = Start-Process \"osk.exe\" -PassThru**\nPS> **$token = Get-NtToken -ProcessId $process.Id**\nPS> **$token.UIAccess**\nTrue \n```", "```\n❶ PS> **$file = New-NtFile -Win32Path C:\\Windows\\hello.txt -Access GenericWrite**\nNew-NtFile : (0xC0000022) - {Access Denied}\nA process has requested access to an object, but has not been granted those access rights.\n\nPS> **$token = Get-NtToken**\n❷ PS> **$token.VirtualizationEnabled = $true**\n❸ PS> **$file = New-NtFile -Win32Path C:\\Windows\\hello.txt -Access GenericWrite**\n❹ PS> **$file.Win32PathName**\nC:\\Users\\user\\AppData\\Local\\VirtualStore\\Windows\\hello.txt \n```", "```\nPS> **Show-NtTokenEffective -SecurityAttributes**\nSECURITY ATTRIBUTES\n-------------------\nName             Flags                  ValueType Values\n----             -----                  --------- ------\nTSA://ProcUnique NonInheritable, Unique UInt64    {133, 1592482} \n```", "```\nPS> **Enable-NtTokenPrivilege SeDebugPrivilege**\n❶ PS> **$imp = Use-NtObject($p = Get-NtProcess -Name lsass.exe) {**\n **Get-NtToken -Process $p -Duplicate**\n**}**\n❷ PS> **Enable-NtTokenPrivilege SeCreateTokenPrivilege -Token $imp**\n❸ PS> **$token = Invoke-NtToken $imp {**\n **New-NtToken -User \"S-1-0-0\" -Group \"S-1-1-0\"**\n**}**\nPS> **Format-NtToken $token -User -Group**\nUSER INFORMATION\n----------------\nName     Sid\n----     ---\n❹ NULL SID S-1-0-0\n\nGROUP SID INFORMATION\n-----------------\nName                                   Attributes\n----                                   ----------\n❺ Everyone                               Mandatory, EnabledByDefault, Enabled\nMandatory Label\\System Mandatory Level Integrity, IntegrityEnabled \n```", "```\nPS> **$token = Get-NtToken -Filtered -Flags DisableMaxPrivileges**\n❶ PS> **Use-NtObject($proc = New-Win32Process notepad -Token $token) {**\n    **$proc | Out-Host**\n**}**\nProcess            : notepad.exe\nThread             : thread:11236 - process:9572\nPid                : 9572\nTid                : 11236\nTerminateOnDispose : False\nExitStatus         : 259\nExitNtStatus       : STATUS_PENDING\n\n❷ PS> **$token = Get-NtToken -Filtered -Flags DisableMaxPrivileges -Token $token**\nPS> **$proc = New-Win32Process notepad -Token $token**\n❸ Exception calling \"CreateProcess\" with \"1\" argument(s): \"A required privilege\nis not held by the client\" \n```", "```\nPS> **$proc = Get-NtProcess -Current**\nPS> **$token = Get-NtToken -Duplicate -TokenType Primary**\nPS> **Set-NtToken -Process $proc -Token $token**\nSet-NtToken : (0xC00000BB) - The request is not supported. \n```", "```\nPS> **$token = Get-NtToken -Duplicate**\nPS> **Test-NtTokenImpersonation $token**\nTrue\n\nPS> **Set-NtTokenIntegrityLevel -IntegrityLevel Low**\nPS> **Test-NtTokenImpersonation $token**\nFalse\n\nPS> **Test-NtTokenImpersonation $token -ImpersonationLevel Identification**\nTrue \n```", "```\nPS> **$ps = Get-NtProcess -Access QueryLimitedInformation -FilterScript {**\n    **Use-NtObject($token = Get-NtToken -Process $_ -Access Query) {**\n **$token.UIAccess**\n **}**\n**}**\nPS> **$ps**\nHandle Name       NtTypeName Inherit ProtectFromClose\n------ ----       ---------- ------- ----------------\n3120   ctfmon.exe Process    False   False\n3740   TabTip.exe Process    False   False\n\nPS> **$ps.Close()** \n```", "```\nPS> **function Get-ImpersonationTokens {**\n❶ **$hs = Get-NtHandle -ObjectType Token**\n **foreach($h in $hs) {**\n **try {**\n❷ **Use-NtObject($token = Copy-NtObject -Handle $h) {**\n❸ **if (Test-NtTokenImpersonation -Token $token) {**\n **Copy-NtObject -Object $token**\n **}**\n **}**\n **} catch {**\n **}**\n **}**\n**}**\n❹ PS> **$tokens = Get-ImpersonationTokens**\n❺ PS> **$tokens | Where-Object Elevated** \n```", "```\nPS> **$token = Get-NtToken -Filtered -Flags LuaToken**\nPS> **Set-NtTokenIntegrityLevel Medium -Token $token**\nPS> **$token.Elevated**\nFalse\n\nPS> **\"Admin\" > \"$env:windir\\admin.txt\"**\nPS> **Invoke-NtToken $token {\"User\" > \"$env:windir\\user.txt\"}**\nout-file : Access to the path 'C:\\WINDOWS\\user.txt' is denied.\n\nPS> **$token.Close()** \n```"]