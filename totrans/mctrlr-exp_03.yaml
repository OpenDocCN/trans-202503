- en: '**3 MD380 Null Pointer, DFU**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**3 MD380空指针，DFU**'
- en: While it’s brutally effective to exploit a chip vendor’s bootloader in ROM,
    many device vendors add a second bootloader in flash memory. This is the story,
    first told in Goodspeed (2016b), of how I dumped a two-way radio’s firmware through
    a null pointer read vulnerability. It is also the story of how the firmware update
    cryptography was broken, from Rütten and Goodspeed (2016).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管利用芯片厂商的ROM引导加载程序是非常有效的，但许多设备厂商会在闪存中添加第二个引导加载程序。这个故事最早在Goodspeed（2016b）中讲述，讲述了我如何通过空指针读取漏洞dump了一款双向无线电的固件。它也是如何破解固件更新加密的故事，来自Rütten和Goodspeed（2016）。
- en: The Tytera MD380 is a handheld radio transceiver that uses either analog FM
    or Digital Mobile Radio (DMR). DMR provides some of the features of GSM, such
    as text messaging and timesharing of the repeater tower, without the hassles of
    SIM cards. Many people purchased the MD380 for use in amateur radio; it was just
    too tempting to rip out its firmware and patch in new features for the ham radio
    community.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Tytera MD380是一款手持无线电收发器，支持模拟FM或数字移动无线电（DMR）。DMR提供了GSM的一些功能，如短信和中继塔的时分复用，而无需SIM卡的麻烦。许多人购买MD380用于业余无线电；它实在太诱人了，无法不拆掉固件并为业余无线电社区打补丁，增加新功能。
- en: The CPU of this radio is an STM32F405 in the LQFP100 package, with a megabyte
    of flash and 192kB of RAM.^([1](footnotes.xhtml#ch3fn1)) The STM32 has both JTAG
    and a ROM bootloader, but these are protected by the readout device protection
    (RDP) feature in its most secured setting, where JTAG connections are entirely
    disallowed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这款无线电的CPU是STM32F405，采用LQFP100封装，配备一兆字节的闪存和192KB的RAM。^([1](footnotes.xhtml#ch3fn1))
    STM32具有JTAG和ROM引导加载程序，但这些在最安全设置下被读取设备保护（RDP）功能保护，JTAG连接完全禁止。
- en: '**Reading a Null Pointer**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**读取空指针**'
- en: Instead of jumping in with the STM32 vulnerability presented in [Chapter 2](ch02.xhtml#ch02),
    I began by writing some of my own USB drivers for the radio. As we’ll soon see,
    this was not a waste of time.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我并没有直接从[第二章](ch02.xhtml#ch02)介绍的STM32漏洞入手，而是先为无线电编写了一些自己的USB驱动程序。正如我们很快会看到的，这并不是浪费时间。
- en: '![Image](../images/f0026-01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0026-01.jpg)'
- en: 'Figure 3.1: Tytera MD380 Radio'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1：Tytera MD380无线电
- en: '![Image](../images/f0027-01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0027-01.jpg)'
- en: 'Figure 3.2: STM32F405'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2：STM32F405
- en: 'The MD380 has *three* separate implementations of the USB device firmware update
    (DFU) protocol: one in ROM, a second at the beginning of flash that is used for
    firmware updates and recovery, and a third in the main radio application. The
    second and third speak largely the same protocol, and we can exploit either of
    them in roughly the same way.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: MD380有*三*个独立的USB设备固件更新（DFU）协议实现：一个在ROM中，一个在闪存的开头用于固件更新和恢复，另一个在主无线电应用程序中。第二个和第三个协议大致相同，我们可以用差不多的方式利用它们。
- en: I reverse engineered the protocol by running the vendor’s Windows application
    under VMWare, then patching the `.vmx` file with the lines in [Figure 3.4](ch03.xhtml#ch3fig4)
    to write USB traffic to a log file. These days, I’d probably use `usbmon` on a
    Linux host while running Windows in a Qemu VM.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我通过在VMWare中运行厂商的Windows应用程序，逆向工程了协议，然后通过在[图3.4](ch03.xhtml#ch3fig4)中的代码行修补`.vmx`文件，将USB流量写入日志文件。现在，我可能会在Linux主机上使用`usbmon`，同时在Qemu虚拟机中运行Windows。
- en: The logs showed that the MD380’s variant of DFU included non-standard commands.
    In particular, the LCD screen would say “PC Program USB Mode” for the official
    client applications, but not for any third-party application. Before I could do
    a proper read, I had to find the commands that would enter this programming mode.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 日志显示，MD380的DFU变体包括非标准命令。特别是，LCD屏幕在官方客户端应用程序中会显示“PC Program USB Mode”，但在任何第三方应用程序中则不会。在我能够进行适当读取之前，我需要找到能够进入此编程模式的命令。
- en: DFU implementations often hide extra commands in the `UPLOAD` and `DNLOAD` commands,
    when the block address is less than two. To erase a block, a DFU host downloads
    `0x41` followed by a little endian address to block zero. To mass erase all of
    memory, the host sends just `0x41` with no extra bytes to block zero. To set the
    address pointer, the host sends `0x21` followed by a little endian address. See
    [Figure 2.4](ch02.xhtml#ch2fig4) for a list of the STM32’s standard extensions
    that are called in this manner.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: DFU实现通常会在`UPLOAD`和`DNLOAD`命令中隐藏额外的命令，当块地址小于2时。要擦除一个块，DFU主机会下载`0x41`，后跟一个小端地址到块零。要批量擦除所有内存，主机只需发送`0x41`，不带任何额外字节到块零。要设置地址指针，主机发送`0x21`，后跟一个小端地址。有关以这种方式调用的STM32标准扩展的列表，请参见[图2.4](ch02.xhtml#ch2fig4)。
- en: In addition to those documented commands, the MD380 also uses a number of two-byte
    (rather than five-byte) `DNLOAD` transactions, none of which exist in the standard
    DFU protocol. I observed the commands in [Figure 3.5](ch03.xhtml#ch3fig5), many
    of which I still only partly understand.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 除了那些已记录的命令，MD380 还使用了若干个两字节（而非五字节）的 `DNLOAD` 事务，这些命令在标准 DFU 协议中都不存在。我在 [图 3.5](ch03.xhtml#ch3fig5)
    中观察到了这些命令，其中许多我至今仍然只理解了一部分。
- en: It wasn’t hard to patch the open source DFU client from Michael Ossmann’s Ubertooth
    project to read and write the radio’s configuration. This configuration, called
    a “codeplug” by radio users, is held in SPI flash and does not include any firmware.
    Instead, it holds radio channel settings and frequencies.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 修改 Michael Ossmann 的 Ubertooth 项目中的开源 DFU 客户端，以便读取和写入无线电配置并不难。这个配置被无线电用户称为“代码插头”，存储在
    SPI 闪存中，并不包含任何固件。相反，它保存了无线电频道设置和频率。
- en: '![Image](../images/f0029-01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0029-01.jpg)'
- en: 'Figure 3.3: Simplified STM32F405 Memory Map'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3：简化的 STM32F405 内存映射
- en: '![Image](../images/f0029-02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0029-02.jpg)'
- en: 'Figure 3.4: USB Sniffing with VMWare'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4：在 VMWare 上进行 USB sniffing
- en: '![Image](../images/f0029-02a.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0029-02a.jpg)'
- en: 'Figure 3.5: DNLOAD Extensions for the MD380'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5：MD380 的 DNLOAD 扩展
- en: '![Image](../images/f0030-01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0030-01.jpg)'
- en: 'Figure 3.6: Dumping Flash Memory'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6：闪存内存转储
- en: '![Image](../images/f0031-01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0031-01.jpg)'
- en: 'Figure 3.7: Interrupt Table from the MD380'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7：MD380 的中断表
- en: If none of the extended commands from [Figure 3.5](ch03.xhtml#ch3fig5) are sent
    before a read, a very interesting pattern would be read out, shown in [Figure
    3.7](ch03.xhtml#ch3fig7). You can think of this as simply not selecting a memory
    source.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在读取之前没有发送任何来自 [图 3.5](ch03.xhtml#ch3fig5) 的扩展命令，读取出的将是一个非常有趣的模式，如 [图 3.7](ch03.xhtml#ch3fig7)
    所示。你可以认为这只是没有选择内存源。
- en: Interpreted as little-endian, this begins with the words `0x2000-1a30`, `0x08005615`,
    `0x08005429`, and a bunch of other odd pointers to addresses in the STM32’s flash
    memory. This is the interrupt table at the beginning of flash memory, and I was
    seeing the first kilobyte of the flash bootloader at `0x08000000`!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以小端模式解读，开始出现的字是 `0x2000-1a30`、`0x08005615`、`0x08005429`，以及一堆指向 STM32 闪存地址的奇怪指针。这是闪存开头的中断表，而我看到的是从
    `0x08000000` 开始的闪存引导加载程序的前一千字节！
- en: What was happening internally? Well, each DFU transaction would attempt to read
    a block from memory, but because the custom commands hadn’t been sent to choose
    a source, the non-existent buffer was never populated. And what does a nonexistent
    buffer at an uninitialized location happen to contain on an STM32F4? Well, `0x00000000`
    helpfully mirrors whichever memory the chip was booted from, so reading a kilobyte
    from there instead gives a kilobyte from `0x08000000`, and that’s why we get the
    first kilobyte of the bootloader.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 内部发生了什么？嗯，每个 DFU 事务都会尝试从内存中读取一个块，但因为没有发送自定义命令来选择内存源，未初始化的缓冲区从未被填充。那么在 STM32F4
    上，未初始化位置的缓冲区到底包含了什么呢？嗯，`0x00000000` 会巧妙地映射到芯片启动时所在的内存，因此从那里读取一千字节，实际上就得到了来自 `0x08000000`
    的一千字节，这就是为什么我们会看到引导加载程序的前一千字节。
- en: Reading past the first block, we find that every block has the same kilobyte.
    This is because DFU is addressed in terms of block numbers, but the buffer remains
    uninitialized, so that all block addresses get rerouted to the very beginning
    of flash. Though it’s useless to change the block index, we can grab more than
    a kilobyte by increasing the block size with the `--transfer-size` option of `dfu-util`.
    The maximum transfer size varies by operating system and USB controller, but my
    iMac was able to pull out `0xC000` bytes, the full length of the recovery bootloader!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读第一个块之后，我们发现每个块都包含相同的一千字节。这是因为 DFU 是按块号寻址的，但缓冲区仍未初始化，因此所有块地址都会被重定向到闪存的起始位置。尽管改变块索引没什么用，但我们可以通过
    `dfu-util` 的 `--transfer-size` 选项增加块大小，获取超过一千字节的数据。最大传输大小取决于操作系统和 USB 控制器，但我的
    iMac 能够拉出 `0xC000` 字节，即恢复引导加载程序的完整长度！
- en: '**Patching Out Protections**'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**破解保护**'
- en: So now we have the recovery bootloader, but we don’t have the application that
    follows it in memory at `0x0800C000`. We’ll get that code by patching the recovery
    bootloader to disable the readout protection, and then use the STM32’s ROM bootloader
    to dump all memory over USB.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在我们有了恢复引导加载程序，但在 `0x0800C000` 的内存中还没有随之而来的应用程序。我们可以通过修改恢复引导加载程序来禁用读取保护，然后使用
    STM32 的 ROM 引导加载程序通过 USB 转储所有内存来获得这段代码。
- en: To load the image into a reverse engineering tool, such as IDA Pro or Ghidra,
    simply set an instruction set of ARM/Cortex and a base address of `0x08000000`.
    It sometimes helps the decompiler to mark the image as having no write permissions,
    so that it knows that the code will not be self-modifying. It’s also important
    to mark the I/O region at `0x40000000` as volatile, to prevent the decompiler
    from optimizing away the majority of your interrupt handler code.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要将图像加载到逆向工程工具中，如 IDA Pro 或 Ghidra，只需设置 ARM/Cortex 指令集和 `0x08000000` 的基地址。有时将图像标记为没有写权限有助于反编译器，它会知道代码不会自我修改。还需要将
    `0x40000000` 的 I/O 区域标记为易失性，以防止反编译器优化掉大部分中断处理程序代码。
- en: Searching for the IO address `OPTCR_BYTE1_ADDRESS` (`0x4002-3C15`), we quickly
    find that `FLASH_OB_RDPConfig()` from the STM32 examples is included at `0x08001fb0`.
    It is called from `main()` with a parameter of `0x55` in the instruction at `0x0800-44A8`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过搜索 IO 地址 `OPTCR_BYTE1_ADDRESS`（`0x4002-3C15`），我们迅速发现 STM32 示例中的 `FLASH_OB_RDPConfig()`
    被包含在 `0x08001fb0`。它从 `main()` 中被调用，并在 `0x0800-44A8` 的指令中传递了 `0x55` 的参数。
- en: '![Image](../images/f0033-01.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0033-01.jpg)'
- en: 'Figure 3.8: This function sets the RDP protection level.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8：此函数设置 RDP 保护级别。
- en: '![Image](../images/f0034-01.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0034-01.jpg)'
- en: 'Figure 3.9: Tapping the BOOT0 Pin'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9：按下 BOOT0 引脚
- en: We can then patch a single byte so that instead of writing `0x55` for RDP Level
    1 with Read Protection, the bootloader will write `0xAA` for RDP Level 0 with
    No Protection.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以修补一个字节，使其不再写入 `0x55`（用于 RDP 级别 1 读保护），而是写入 `0xAA`（用于 RDP 级别 0 无保护）。
- en: '![Image](../images/f0035-01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0035-01.jpg)'
- en: So now we have a bootloader that will not lock the chip, but it is still necessary
    to install it. We do this by holding the CPU’s `BOOT0` pin high during a reboot,
    with the hardware modified as shown in [Figure 3.9](ch03.xhtml#ch3fig9), to start
    the ROM bootloader. At this point we are still in RDP Level 1 (Read Protection),
    but we can drop to Level 0 by sending the Mass Erase command, wiping everything
    in flash memory and leaving the radio without firmware.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个不会锁定芯片的引导加载程序，但仍然需要安装它。我们通过在重启期间将 CPU 的 `BOOT0` 引脚拉高，按照 [图 3.9](ch03.xhtml#ch3fig9)
    中的硬件修改，启动 ROM 引导加载程序。此时，我们仍处于 RDP 级别 1（读保护），但我们可以通过发送批量擦除命令降级到级别 0，擦除闪存中的所有内容并让无线电没有固件。
- en: We then write our patched bootloader into flash memory, and reboot the radio
    while holding the top and bottom buttons on the right side of the radio to start
    it. The LED will begin blinking red and green. At this stage, the device is ready
    to accept an update, but as yet has no application image, so we use the vendor’s
    Windows application to install an encrypted firmware update. This gives us a working
    radio!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将修补后的引导加载程序写入闪存，并在重启无线电时按住无线电右侧的上下按钮来启动它。LED 灯将开始红绿交替闪烁。此时，设备已准备好接受更新，但仍没有应用程序镜像，因此我们使用厂商的
    Windows 应用程序安装加密的固件更新。这为我们提供了一个正常工作的无线电！
- en: We reboot again into the ROM bootloader from [Chapter 2](ch02.xhtml#ch02) by
    holding the `BOOT0` pin high on a reset. This time, we are in RDP Level 0 (No
    Protection), and we can freely dump all flash memory, where the radio firmware
    begins at `0x0800C000`. Because the device remains unlocked, we can also patch
    the application image and write that back into the radio.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次通过在重启时将 `BOOT0` 引脚拉高，进入 [第 2 章](ch02.xhtml#ch02)中的 ROM 引导加载程序。这次，我们处于 RDP
    级别 0（无保护），可以自由地转储所有闪存，其中无线电固件从 `0x0800C000` 开始。由于设备保持解锁，我们还可以修补应用程序镜像并将其写回到无线电中。
- en: '![Image](../images/f0036-01.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0036-01.jpg)'
- en: 'Figure 3.10: Decompiled Decryption Function'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10：反编译后的解密函数
- en: '**Cracking the Update Cryptography**'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**破解更新加密**'
- en: By this point, we have cleartext dumps of both the recovery bootloader and the
    application, as well as an encrypted firmware update of the application. All that’s
    left to do is to break the encryption, and that’s exactly the trick that my good
    friend Christiane Rütten contributed in Rütten and Goodspeed (2016).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经获得了恢复引导加载程序和应用程序的明文转储，以及应用程序的加密固件更新。剩下的就是破解加密，这正是我的好朋友 Christiane Rütten
    在 Rütten 和 Goodspeed（2016）中贡献的技巧。
- en: Different forms of cryptography require different techniques, of course. If
    the vendor had been signing updates with public-key crypto, we might be out of
    luck. If a standard symmetric crypto algorithm such as AES were used, we might
    have luck searching for constant tables, then tracing references back until we
    found the code that decrypted the firmware.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 不同形式的密码学当然需要不同的技术。如果供应商使用公钥加密签名更新，我们可能就无能为力了。如果使用像 AES 这样的标准对称加密算法，我们或许能通过搜索常量表来找到线索，然后追踪引用直到找到解密固件的代码。
- en: Instead, Rütten noticed that there were repeating sequences within the encrypted
    firmware update, something that oughtn’t happen if the encryption were done right.
    She then took the encrypted firmware update and XORed it with the cleartext application
    that I had dumped from memory.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，Rütten 发现加密固件更新中有重复的序列，如果加密做得正确，这种情况是不应该发生的。她随后将加密的固件更新与我从内存中提取的明文应用程序做了异或（XOR）操作。
- en: Lo and behold, XORing the cleartext with the update file produced a repeating
    pattern of 1,024 bytes! See [page 38](ch03.xhtml#page_38) for Python code that
    uses these bytes to wrap a firmware blob into an encrypted update, compatible
    with the manufacturer’s own tools.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 果然，用明文与更新文件做异或操作，产生了一个 1,024 字节的重复模式！请参阅 [第38页](ch03.xhtml#page_38) 了解使用这些字节将固件块包装成加密更新的
    Python 代码，它与制造商自己的工具兼容。
- en: The firmware function that performs this XOR is shown in [Figure 3.10](ch03.xhtml#ch3fig10).
    Note that 1,024 bytes are XORed with bytes of `firmwarekey` regardless of the
    block size being written, but that the amount being copied is taken as a parameter.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 执行这个异或操作的固件函数如 [图 3.10](ch03.xhtml#ch3fig10) 所示。请注意，无论写入的块大小如何，1,024 字节都会与 `firmwarekey`
    的字节进行异或，但复制的数量是作为参数传递的。
- en: These exploits made possible the MD380Tools project, an open source collection
    of patches against the MD380 firmware that added promiscuous mode, a phone book
    of all registered amateur DMR operators, and raw packet capture.^([2](footnotes.xhtml#ch3fn2))
    It also made possible Goodspeed (2016a), in which I re-linked the firmware into
    an ARM/Linux executable for freely encoding and decoding DMR’s AMBE+2 audio codec
    on a desktop or server.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这些漏洞使得 MD380Tools 项目成为可能，这是一个开源补丁集合，用于破解 MD380 固件，添加了混杂模式、所有注册的业余 DMR 操作员的电话簿，以及原始数据包捕获。^([2](footnotes.xhtml#ch3fn2))
    它也使得 Goodspeed（2016a）成为可能，在该项目中，我将固件重新链接成 ARM/Linux 可执行文件，用于在桌面或服务器上自由地编码和解码 DMR
    的 AMBE+2 音频编解码器。
- en: '![Image](../images/f0038-01.jpg)![Image](../images/f0039-01.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0038-01.jpg)![Image](../images/f0039-01.jpg)'
