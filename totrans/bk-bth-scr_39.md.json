["```\n:: ****** Array Object ****** \n:: Parm 1 – Name of Array\n:: Parm 2 - Name of Method: \n::       AddElemAt - Insert One Element at an Index\n::               Parm 3 - Index of Element being Added\n::               Parm 4 - Value of Element being Added\n::       AddElem - Add One Element to the Array \n::               Parm 3 - Element being Added\n::       GetElem - Get the Element at an Index\n::               Parm 3 - Index of Element\n::               Parm 4 - Returned Variable Name\n::       GetFirst - Get the First Element in the Array\n::               Parm 3 - Returned Variable Name\n::       GetNext - Get the Next Element in the Array; call after\n::                      :GetElem or :GetFirst or gets first element\n::               Parm 3 - Returned Variable Name\n::       GetSize - Get the Number of Elements in the Array\n::               Parm 3 - Returned Variable Name\n::       RemoveElemAt - Remove One Element from the Array\n::               Parm 3 - Index of Element being Removed\n::       Clear - Empty the Array of all its Elements\n::       IndexOf - Get the Index of a Specific Value\n::                      or return -1 if Not Found\n::               Parm 3 - Value of Search Element\n::               Parm 4 - Returned Variable Name\n::       Contains - Get a Boolean Indicating if a Value is \n::                        Anywhere in the Array\n::               Parm 3 - Value of Search Element\n::               Parm 4 - Returned Boolean Name\n::       Clone - Create a Copy of the Array\n::               Parm 3 - Name of New Array\n:: Global Variables:\n::   <arrayName>Size = Size or Length of the Array\n::   <arrayName>Index = Index or Pointer to the Next Element\n::   <arrayName>[n] = Nth Element of the Array\n\n  cmd /C exit 0\n  call :%~2 \"%~1\" \"%~3\" \"%~4\" || (\n     > C:\\Batch\\Log.txt echo ** ERROR - Invalid Method Name \"%~2\"\n     exit\n  )\n  goto :eof\n\n :AddElemAt\n  call :GetSize %~1 size\n  if %~2 gtr %size% (\n     echo ** Invalid Index \"%~2\" greater than Array Size \"%size%\"\n     goto :eof\n  )\n  set /A startIndex = !%size! - 1\n  for /L %%i in (%startIndex%, -1, %~2) do (\n     set /A nextIndex = %%i + 1\n     for /F %%n in (\"!nextIndex!\") do (\n       set %~1[%%n]=!%~1[%%i]!\n  )  )\n  set %~1[%~2]=%~3\n  set /A %~1Size += 1\n  goto :eof\n\n :AddElem\n  call :GetSize \"%~1\" size\n  set %~1[!size!]=%~2\n  set /A %~1Size += 1\n  goto :eof\n\n :GetElem\n  set %~3=!%~1[%~2]!\n  set /A %~1Index = %~2 + 1\n  goto :eof\n\n :GetFirst\n  set %~2=!%~1[0]!\n  set %~1Index=1\n  goto :eof\n\n :GetNext\n  if not defined %~1Index  set %~1Index=0\n  call :GetSize \"%~1\" size\n  set targIndex=!%~1Index!\n  if %targIndex% geq %size% (\n      set %~2=No More Elements\n  ) else (\n      set %~2=!%~1[%targIndex%]!\n      set /A %~1Index += 1\n  )\n  goto :eof\n\n :GetSize\n  if not defined %~1Size  set %~1Size=0\n  set %~2=!%~1Size!\n  goto :eof\n\n :RemoveElemAt\n  call :GetSize \"%~1\" size\n  if %~2 geq %size% (\n     echo ** Nothing to do, Index \"%~2\" greater than Array Size \"%size%\"\n     goto :eof\n  )\n  set /A %~1Size -= 1\n  for /L %%i in (%~2, 1, !%~1Size!) do (\n      set /A nextIndex = %%i + 1\n      for /F %%n in (\"!nextIndex!\") do (\n        set %~1[%%i]=!%~1[%%n]!\n  )  )\n  set %~1[!nextIndex!]=&\n  goto :eof\n\n :Clear\n  for /F \"usebackq delims==\" %%a in (`set %~1`) do (\n      set %%a=&rem\n  )\n  set %~1Size=0\n  goto :eof\n\n :IndexOf\n  set %~3=-1\n  set /A sizeLess1 = %~1Size - 1\n  for /L %%i in (0, 1, %sizeLess1%) do (\n      if \"%~2\" equ \"!%~1[%%i]!\" (\n         set %~3=%%i\n  )  )\n  goto :eof\n\n :Contains\n  call :IndexOf \"%~1\" \"%~2\" indexOf\n  if %indexOf% equ -1 (\n     set %~3=false==x\n  ) else (\n     set %~3=true==true\n  )\n  goto :eof\n\n :Clone\n  call :Clear \"%~2\"\n  for /F \"usebackq tokens=1,2 delims==\" %%p in (`set %~1`) do (\n     set oldArrayItem=%%p\n     set !oldArrayItem:%~1=%~2!=%%q\n  )\n  goto :eof \n```", "```\ncall C:\\Batch\\oArray.bat friends AddElem Walter\ncall C:\\Batch\\oArray.bat friends AddElem Donny\ncall C:\\Batch\\oArray.bat friends AddElemAt 1 Maude\ncall C:\\Batch\\oArray.bat friends RemoveElemAt 0\ncall C:\\Batch\\oArray.bat friends GetFirst oneFriend\ncall C:\\Batch\\oArray.bat friends GetNext anotherFriend \n```", "```\n:: ****** Hash Table Object ****** \n:: Parm 1 – Name of Hash Table\n:: Parm 2 - Name of Method: \n::       Clear - Empty the Hash Table of all its Keys and Values\n::       Put - Put One Key-Value Pair into the Hash Table\n::               Parm 3 - Key being Added\n::               Parm 4 - Value being Added\n::       Get - Get a Value Given a Key\n::               Parm 3 - Search Key\n::               Parm 4 - Returned Variable Name\n::       GetSize - Get the Number of Key-Value Pairs in the Hash Table\n::               Parm 3 - Returned Variable Name\n::       Remove - Remove One Key and its Value from the Hash Table\n::               Parm 3 - Key being Removed\n::       ContainsKey - Get a Boolean Indicating if a Key is \n::                       Anywhere in the Hash Table\n::               Parm 3 - Search Key\n::               Parm 4 - Returned Boolean Name\n::       ContainsValue - Get a Boolean Indicating if a Value is \n::                       Anywhere in the Hash Table\n::               Parm 3 - Search Key\n::               Parm 4 - Returned Boolean Name\n::       Clone - Create a Copy of the Hash Table\n::               Parm 3 - Name of New Hash Table\n:: Global Variable:\n::    <hashTable>Size = Size or Length of the Hash Table\n\n cmd /C exit 0\n  call :%~2 \"%~1\" \"%~3\" \"%~4\" || (\n     > C:\\Batch\\Log.txt echo ** ERROR - Invalid Method Name \"%~2\"\n     exit\n  )\n  goto :eof\n\n :Clear\n  for /F \"usebackq delims==\" %%a in (`set %~1`) do (\n      set %%a=&rem\n  )\n  set %~1Size=0\n  goto :eof\n\n :Put\n  call :ContainsKey \"%~1\" \"%~2\" bool\n  set %~1{%~2}=%~3\n  if not %bool% (\n     set /A %~1Size += 1\n  )\n  goto :eof\n\n :Get\n  call :ContainsKey \"%~1\" \"%~2\" bool\n  if %bool% (\n     set %~3=!%~1{%~2}!\n  ) else (\n     set %~3=Key Does Not Exist\n  )\n  goto :eof\n\n :GetSize\n  if not defined %~1Size  set %~1Size=0\n  set %~2=!%~1Size!\n  goto :eof\n\n :Remove\n  call :ContainsKey \"%~1\" \"%~2\" bool\n  if %bool% (\n     set /A %~1Size -= 1\n  )\n  set %~1{%~2}=&\n  goto :eof\n\n :ContainsKey\n  if defined %~1{%~2} (\n     set %~3=true==true\n  ) else (\n     set %~3=false==x\n  )\n  goto :eof\n\n :ContainsValue\n  set %~3=false==x\n  for /F \"usebackq tokens=2 delims==\" %%v in (`set %~1{`) do (\n     if \"%%v\" equ \"%~2\" (\n        set %~3=true==true\n  )  )\n  goto :eof\n\n :Clone\n  call :Clear \"%~2\"\n  for /F \"usebackq tokens=1,2 delims==\" %%p in (`set %~1`) do (\n     set oldHashTblItem=%%p\n     set !oldHashTblItem:%~1=%~2!=%%q\n  )\n  goto :eof \n```", "```\ncall C:\\Batch\\oHashTable.bat jobs Put Lincoln President\ncall C:\\Batch\\oHashTable.bat jobs Put Poe Poet\ncall C:\\Batch\\oHashTable.bat jobs Put Darwin Naturalist\ncall C:\\Batch\\oHashTable.bat jobs Get Poe aJob \n```"]