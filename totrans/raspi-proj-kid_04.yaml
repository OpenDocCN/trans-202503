- en: '4'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '4'
- en: 'THE PI CAMERA: SELFIE SNAPPER'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Pi 摄像头：自拍快照**'
- en: PHOTOGRAPHS HAVE BECOME A STAPLE OF OUR DAILY LIVES, THANKS TO THE WIDESPREAD
    INTRODUCTION OF CAMERAS INTO EVERYDAY MOBILE PHONES. IN 2016, THE NUMBER OF PHOTOS
    TAKEN EXCEEDED THE TOTAL NUMBER EVER TAKEN SINCE THE INVENTION OF THE CAMERA.
    IN THIS CHAPTER, YOU’LL LEARN HOW TO TAKE PHOTOS WITH THE RASPBERRY PI CAMERA
    MODULE MADE EXCLUSIVELY FOR THE RASPBERRY PI HARDWARE.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 照片已经成为我们日常生活的必需品，这要归功于摄像头被广泛应用于每部手机。2016年，拍摄的照片数量超过了自相机发明以来拍摄的所有照片总和。在本章中，你将学习如何使用专为树莓派硬件设计的
    Raspberry Pi 摄像头模块拍照。
- en: You’ll set up and configure the Pi Camera to take photos. Next, you’ll move
    on to some of the more advanced features, such as adding filters, customizing
    photo quality, and adding a trigger button. Then you’ll learn how to use the Pi
    Camera to record video. As a final project, you’ll create a time-lapse video that
    you can use to capture a sunrise or sunset, a plant growing, a candle burning,
    or whatever you fancy.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你将设置和配置 Pi 摄像头以拍摄照片。接下来，你将学习一些更高级的功能，比如添加滤镜、定制照片质量以及添加触发按钮。然后你将学习如何使用 Pi 摄像头录制视频。最后，你将创建一个延时视频，用来捕捉日出或日落、植物生长、蜡烛燃烧，或者任何你喜欢的场景。
- en: WHAT YOU’LL NEED
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你需要的物品
- en: 'Here are the items you’ll need for this simple introduction to the Pi Camera:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你在这次简单的 Pi 摄像头入门中需要的物品：
- en: Raspberry Pi
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派
- en: Pi Camera
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pi 摄像头
- en: Pi Camera ribbon
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pi 摄像头排线
- en: 2 male-to-female jumper wires
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2 根母对公跳线
- en: A push button (optional)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个按钮（可选）
- en: Alligator clips or soldering iron and solder (to attach wires to the buttons)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鳄鱼夹或烙铁和焊锡（用于将线连接到按钮）
- en: VERSIONS AND SPECIFICATIONS
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 版本与规格
- en: A few models of the Pi Camera are available, including one designed specifically
    for night vision. All versions of the Raspberry Pi support the Pi Camera hardware
    as well as the camera ribbon used to connect your Pi to the camera. The ribbon
    is available in a variety of lengths so you can position the camera exactly where
    you need it to get the photos or video you want. This table contains the Pi Camera
    specifications.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种型号的 Pi 摄像头可供选择，包括专门设计用于夜视的版本。所有版本的树莓派都支持 Pi 摄像头硬件以及用于将树莓派连接到摄像头的摄像头排线。排线有多种长度可选，这样你可以将摄像头放置在准确的位置，拍摄所需的照片或视频。以下表格包含了
    Pi 摄像头的规格。
- en: '| **VERSION** | **IMAGE RESOLUTION** | **SENSOR RESOLUTION** |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| **版本** | **图像分辨率** | **传感器分辨率** |'
- en: '| --- | --- | --- |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Camera Module v1 | 5 megapixels | 2592 × 1944 pixels |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 摄像头模块 v1 | 500 万像素 | 2592 × 1944 像素 |'
- en: '| Camera Module v2 | 8 megapixels | 3280 × 2464 pixels |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 摄像头模块 v2 | 800 万像素 | 3280 × 2464 像素 |'
- en: '| Pi NoIR Camera Module v2 | Used for nighttime photography |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| Pi NoIR 摄像头模块 v2 | 用于夜间摄影 |'
- en: The official Pi Zero case comes with a smaller ribbon and a camera housing built
    into the top of the case’s lid, providing you with a neat, small, and portable
    camera.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的 Pi Zero 外壳配有较短的排线和内置在外壳盖子顶部的摄像头外壳，提供一个简洁、小巧、便于携带的摄像头。
- en: For this project, you’ll need either the regular Camera Module v1 or v2.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，你需要使用常规的摄像头模块 v1 或 v2。
- en: PHOTOGRAPHY WITH THE PI CAMERA
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Pi 摄像头拍照
- en: You’ll first put the camera together, and then you’ll learn to take and store
    photos. Next, I’ll show you how to customize your photography by altering the
    resolution, resizing images, using filters, and adding text. Then you’ll make
    the camera more user-friendly by adding a button to take the shot.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先将组装摄像头，然后你将学习如何拍照和存储照片。接下来，我将展示如何通过调整分辨率、调整图像大小、使用滤镜以及添加文本来定制你的摄影。然后，你将通过添加按钮来使摄像头更易于使用，以便拍摄照片。
- en: Setting Up the Hardware and Software
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 硬件和软件的设置
- en: 'Let’s begin by attaching and enabling the Pi Camera hardware and then writing
    a small test program to check that it works correctly. Before you begin, *ensure
    that no power is connected to your Pi* and that your Pi is unplugged. Then follow
    these steps:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从连接并启用 Pi 摄像头硬件开始，然后写一个小的测试程序来检查它是否正常工作。在开始之前，*确保没有电源连接到你的 Pi*，并且你的 Pi 已经断开电源。接着按照以下步骤操作：
- en: '**Attach the camera:** Connect the ribbon cable to the Pi Camera ([Figure 4-1](ch04.xhtml#ch04fig01)).
    Depending on where you purchased your Pi Camera, this might already be done for
    you. If not, gently pull the small plastic clasp on the back of the camera downward
    and slide the ribbon in with the blue strip facing you. Gently push the clasp
    up, securing the ribbon.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**连接相机：** 将带状电缆连接到 Pi Camera（[图 4-1](ch04.xhtml#ch04fig01)）。根据您购买 Pi Camera
    的地方，可能已经为您完成了此步骤。如果没有，轻轻拉下相机背面的塑料卡扣，并将带状电缆插入，确保蓝色带子朝向您。轻轻推上卡扣以固定电缆。'
- en: Find the Pi Camera socket on the Pi, which is located between the HDMI socket
    and the audio jack. Notice that it also has a clasp similar to the clasp on the
    Pi Camera. Gently pull up this clasp to open it. Take the other end of the ribbon
    and place it into the socket, with the blue strip facing toward the audio jack
    and away from the HDMI socket. Gently push the clasp back down to secure the ribbon
    in place. Be very gentle when you’re handling the camera ribbon.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 找到 Pi 上的 Pi Camera 插槽，位置位于 HDMI 插槽和音频插孔之间。注意，它也有一个类似于 Pi Camera 上的卡扣。轻轻拉起卡扣将其打开。将带状电缆的另一端插入插槽，确保蓝色带子朝向音频插孔，并远离
    HDMI 插槽。轻轻按下卡扣以固定带状电缆。在操作相机电缆时要非常小心。
- en: '![Image](../images/04fig01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig01.jpg)'
- en: '**FIGURE 4-1** Attaching the Pi Camera to the Raspberry Pi'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 4-1** 将 Pi Camera 安装到 Raspberry Pi 上'
- en: '**Install the Pi Camera software:** Boot up your Pi, open the terminal window,
    and enter the following command:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装 Pi Camera 软件：** 启动您的 Pi，打开终端窗口并输入以下命令：'
- en: '[PRE0]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once that command has run, enter this command:'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦该命令运行完成，输入以下命令：
- en: '[PRE1]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The Pi Camera software comes preinstalled with the operating system image and
    includes a Python package that interfaces with the camera. In the future, you
    might need to reinstall or update the package when newer versions are released,
    which you can do using the following commands:'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Pi Camera 软件随操作系统镜像预安装，并包括一个与相机接口的 Python 包。在将来，您可能需要在发布新版本时重新安装或更新该包，您可以使用以下命令进行更新：
- en: '[PRE2]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Enable the Pi Camera:** By default, the camera is set to *off*. You can’t
    use it until you configure it to turn on. To do this, return to the terminal window
    and enter the following command to open the Configuration tool ([Figure 4-2](ch04.xhtml#ch04fig02)):'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**启用 Pi Camera：** 默认情况下，相机是设置为*关闭*的。在配置开启之前，您无法使用它。要启用相机，请返回终端窗口并输入以下命令以打开配置工具（[图
    4-2](ch04.xhtml#ch04fig02)）：'
- en: '[PRE3]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Image](../images/04fig02.jpg)'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Image](../images/04fig02.jpg)'
- en: '**FIGURE 4-2** Enabling the Pi Camera'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 4-2** 启用 Pi Camera'
- en: In the Configuration tool, select **Interfacing Options**. Then select the option
    to enable the connection to the Pi Camera ([Figure 4-3](ch04.xhtml#ch04fig03)).
    Use the arrow keys to select **Exit** and press ENTER. You’ll be prompted to restart
    the Raspberry Pi before the Pi Camera is enabled. Select **Yes** to restart. Now
    you can test that the camera is connected and working correctly.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在配置工具中，选择 **接口选项**。然后选择启用连接到 Pi Camera 的选项（[图 4-3](ch04.xhtml#ch04fig03)）。使用箭头键选择
    **退出** 并按 ENTER。系统会提示您在启用 Pi Camera 之前重新启动 Raspberry Pi。选择 **是** 以重新启动。现在，您可以测试相机是否已正确连接并正常工作。
- en: '![Image](../images/04fig03.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig03.jpg)'
- en: '**FIGURE 4-3** Selecting the Pi Camera option'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 4-3** 选择 Pi Camera 选项'
- en: Testing the Pi Camera
  id: totrans-42
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 测试 Pi Camera
- en: To test the camera, you’ll run the preview feature. Open a new Python file and
    enter the program in [Listing 4-1](ch04.xhtml#ch04ex01). This simple code triggers
    the camera to display on your monitor for 10 seconds whatever the camera captures.
    By using this code, you’ll test that the camera is working correctly.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试相机，您将运行预览功能。打开一个新的 Python 文件并输入 [Listing 4-1](ch04.xhtml#ch04ex01) 中的程序。此简单代码将触发相机在您的显示器上显示相机捕获的图像
    10 秒钟。通过使用这段代码，您可以测试相机是否正常工作。
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**LISTING 4-1** Testing the camera'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 4-1** 测试相机'
- en: First, you import the `PiCamera` class from the `picamera` library ❶. This provides
    code that lets you control the camera. Next, you import the `sleep``(``)` function
    ❷ so you can add the 10-second delay to make the image display on your screen
    for 10 seconds.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要从 `picamera` 库中导入 `PiCamera` 类 ❶。这为您提供了控制相机的代码。接着，您需要导入 `sleep``(``)`
    函数 ❷，以便您可以添加 10 秒的延迟，使得图像在屏幕上显示 10 秒钟。
- en: Then you create a variable called `camera` to store the `PiCamera``(``)` instruction
    ❸. This lets you call the Pi Camera and control it without having to write out
    `PiCamera``(``)` each time. *Variables* are placeholders representing a location
    in the Raspberry Pi’s memory that stores content. For example, if you make a `name`
    variable such as `name = "Dan` `Aldred``"`, whenever you use `name` in your code,
    Python will use the content of `name` and insert `Dan` `Aldred` into the program
    instead of `name`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你创建一个名为`camera`的变量，用来存储`PiCamera``(``)`指令❸。这样你就可以调用Pi Camera并控制它，而无需每次都写出`PiCamera``(``)`。*变量*是代表树莓派内存中某个位置的占位符，存储着内容。例如，如果你创建一个`name`变量，如`name
    = "Dan` `Aldred"`，每当你在代码中使用`name`时，Python会用`name`的内容替换，并插入`Dan` `Aldred`，而不是`name`。
- en: Next, you trigger the preview by telling the camera to start ❹ and add the 10-second
    delay ❺. The last step stops the preview ❻, turning off the camera.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你通过告诉相机启动预览❹并添加10秒延时❺来触发预览。最后一步会停止预览❻，关闭相机。
- en: To run the program, press **F5** on your keyboard; you’ll be asked to save the
    file. Name and save your program; then it will execute.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行程序，按下键盘上的**F5**；系统会提示你保存文件。为程序命名并保存，然后它会开始执行。
- en: 'If you can see the preview on your screen, your hardware and software are working.
    If you don’t see the preview, the camera doesn’t work: check that the cable is
    attached to the camera correctly and connected to your Raspberry Pi. Then check
    that the camera is enabled in the Configuration tool.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能在屏幕上看到预览，说明你的硬件和软件都正常工作。如果看不到预览，说明相机无法正常工作：检查连接到相机的电缆是否正确连接，并确保它连接到了你的树莓派。然后检查相机在配置工具中是否启用。
- en: The program will stop after 10 seconds. But if you want to end the program sooner,
    close the Python window by clicking the **X** at the top right of the window.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 程序将在10秒后停止。但如果你想提前结束程序，可以通过点击窗口右上角的**X**关闭Python窗口。
- en: Taking a Selfie
  id: totrans-52
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 拍摄自拍照
- en: Once your camera is working, you can create a program to take your first picture,
    a selfie ([Figure 4-4](ch04.xhtml#ch04fig04)).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的相机开始工作，你可以创建一个程序拍摄第一张照片，一张自拍照（[图 4-4](ch04.xhtml#ch04fig04)）。
- en: '![Image](../images/04fig04.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig04.jpg)'
- en: '**FIGURE 4-4** Take that selfie!'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 4-4** 拍摄自拍照！'
- en: Open a new text editor window, save the file as *selfie.py*, and then enter
    the program in [Listing 4-2](ch04.xhtml#ch04ex02). This program starts a preview
    for 5 seconds, allowing you time to get in front of the camera, fix your hair,
    and practice your pose before the camera automatically takes the picture.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新的文本编辑器窗口，将文件保存为*selfie.py*，然后输入[清单 4-2](ch04.xhtml#ch04ex02)中的程序。这个程序会启动一个5秒钟的预览，给你时间站到相机前，整理发型，并练习姿势，然后相机会自动拍摄照片。
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**LISTING 4-2** Taking a selfie'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 4-2** 拍摄自拍照'
- en: Again, you import the `P``i``C``amera` class and `sleep``(``)` function, and
    then you use the `camera` variable to store the `PiCamera``()` command. Then you
    start a preview and add a 5-second delay (or longer if you like). You trigger
    the camera to capture the image ❶ and save it to the desktop so it’s easy to locate.
    The file is saved and named *selfie.jpg*.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，你导入`PiCamera`类和`sleep``(``)`函数，然后使用`camera`变量存储`PiCamera``()`命令。接着，你启动预览并添加一个5秒钟的延时（如果你喜欢，可以设置更长的时间）。你触发相机拍摄图像❶并将其保存到桌面，方便查找。文件被保存并命名为*selfie.jpg*。
- en: The preview stops, and the program ends. Save and run the program, snap a selfie,
    and then return to your desktop and open the image to check out your photo.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 预览停止，程序结束。保存并运行程序，拍摄一张自拍照，然后返回桌面并打开图片，查看你的照片。
- en: Changing the File Location Where the Image Is Saved
  id: totrans-61
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 更改图片保存的位置
- en: If you take several selfies at once, they’ll soon clutter your desktop space.
    To keep your selfies organized, it’s best to create a new folder to neatly store
    and save all your images.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一次拍摄了多个自拍，它们很快会把你的桌面占得满满的。为了保持自拍照的整洁，最好创建一个新文件夹，方便存储和管理所有的图片。
- en: 'To create a new folder, open the terminal and enter this command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新文件夹，打开终端并输入以下命令：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The command `mkdir`, which is short for *make a directory*, creates a new folder
    in your home directory called *my_photos*. Now go back to your *selfie.py* file
    and edit the line `camera.capture(''/home/pi/`Desktop`/selfie.jpg'')` ❶, replacing
    the word *Desktop* with the name of your new folder. Unless you’ve used a different
    folder name, the new line should read as follows: `camera.capture``(``''/home/pi/``my_photos``/selfie.jpg'')`.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`mkdir` 命令是 *创建目录*（make a directory）的缩写，它会在你的主目录中创建一个名为 *my_photos* 的新文件夹。现在，返回到你的
    *selfie.py* 文件，并编辑第 `camera.capture(''/home/pi/`Desktop`/selfie.jpg'')` ❶ 行，将
    *Desktop* 替换为你新文件夹的名称。除非你使用了不同的文件夹名称，否则新行应如下所示：`camera.capture``(``''/home/pi/``my_photos``/selfie.jpg'')`。'
- en: Saving Each Image as a New File
  id: totrans-66
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 将每张图像保存为新文件
- en: Notice that each time you take a new photo and save the image, the program overwrites
    the previous image file. This isn’t a very useful feature if you want to keep
    all your photos. This happens because your program saves each image by using the
    same filename. You can solve this problem by adding a date stamp to the image
    filename.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每次你拍摄新照片并保存图像时，程序会覆盖之前的图像文件。如果你想保留所有照片，这个功能就不是很实用。之所以会这样，是因为你的程序在保存每张图像时使用了相同的文件名。你可以通过在图像文件名中添加日期戳来解决这个问题。
- en: '*Date stamps* contain the date and time information indicating when the image
    was taken. The information is retrieved from the Raspberry Pi’s clock and, because
    time always moves forward, each filename is always unique. Alter the *selfie.py*
    file to match the program in [Listing 4-3](ch04.xhtml#ch04ex03).'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*日期戳* 包含表示图像拍摄时间的日期和时间信息。该信息是从树莓派的时钟中提取的，因为时间是不断前进的，所以每个文件名都是唯一的。修改 *selfie.py*
    文件以匹配 [Listing 4-3](ch04.xhtml#ch04ex03) 中的程序。'
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**LISTING 4-3** Saving all the images'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 4-3** 保存所有图像'
- en: Most of this code is similar to the previous selfie program in [Listing 4-2](ch04.xhtml#ch04ex02).
    The code you need to change is at ❶, ❷, and ❸.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码大部分与 [Listing 4-2](ch04.xhtml#ch04ex02) 中的自拍程序相似。你需要修改的代码在 ❶、❷ 和 ❸ 处。
- en: You import the `datetime` module ❶ to pull the current date and time from the
    clock. You create a loop that makes the Pi Camera take a photo every 10 seconds.
    This will give you enough time to check the preview and then pose for your next
    photo. Then you create a variable called `current_time` ❷ and use `datetime.datetime.now``(``)`
    to grab the current date and time and store the result in the variable.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你导入 `datetime` 模块 ❶ 以从时钟中获取当前的日期和时间。你创建一个循环，使 Pi 摄像头每 10 秒拍摄一张照片。这样你就有足够的时间查看预览，然后为下一张照片摆好姿势。然后你创建一个名为
    `current_time` 的变量 ❷，并使用 `datetime.datetime.now``(``)` 来获取当前日期和时间，并将结果存储在该变量中。
- en: The final part of the code applies the date stamp value as the image’s filename
    ❸. You use the `camera.capture` code from [Listing 4-2](ch04.xhtml#ch04ex02) followed
    by the file location to store the image. But this time, you add the value stored
    in the `current_time` variable. Because the date stamp is numerical, you need
    to convert it to a string before using it as a filename. This code will now save
    all image names with a unique date stamp!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的最后一部分将日期戳值作为图像的文件名 ❸。你使用 [Listing 4-2](ch04.xhtml#ch04ex02) 中的 `camera.capture`
    代码，并跟上文件位置来存储图像。但这次，你添加了存储在 `current_time` 变量中的值。由于日期戳是数字格式，你需要将其转换为字符串，然后才能用作文件名。现在这段代码将以唯一的日期戳保存所有图像名称！
- en: Customizing Your Images
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 自定义你的图像
- en: Now that you’ve set up the Pi Camera’s hardware and software, you’re ready to
    learn about customizing your images. Let’s start by reviewing some image terminology.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经设置好了 Pi 摄像头的硬件和软件，准备好了解如何自定义图像了。让我们先来复习一些图像术语。
- en: 'Images are made up of picture elements more commonly referred to as *pixels*.
    These tiny dots are turned on or off in a pattern that creates the overall image.
    The *image quality* is determined by the number of pixels the image contains compared
    to its size: consider the difference between 1000 pixels on a small 1 × 1–inch
    square and 1000 pixels on a large sheet of ledger paper. The quality of the image
    on the ledger sheet would be lower, even though the pixel number is the same.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图像由称为 *像素* 的图像元素组成。这些小点会按一定的模式开关，从而形成整体图像。*图像质量* 由图像包含的像素数量与其大小的关系决定：例如，考虑在一个
    1 × 1 英寸的小方块上有 1000 个像素和在一张大号账单纸上有 1000 个像素之间的区别。即使像素数量相同，账单纸上的图像质量也会较低。
- en: An image’s size and number of pixels is referred to as its *resolution*. For
    example, an image with a resolution of 100 × 100 contains 100 rows, each containing
    100 pixels, for a total of 10,000 pixels. A standard, true HD TV resolution is
    1080 × 1080, meaning the screen contains 1,166,400 pixels. If you were watching
    a program that contained only a million pixels on this set, the picture would
    be 166,400 pixels short of the full potential of the TV screen, and the image
    quality would decrease. But if you were watching the same program on a tablet
    device, you wouldn’t notice a decrease in image quality because the tablet is
    smaller and the pixels would be less spread out.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图像的大小和像素数量被称为其*分辨率*。例如，分辨率为100 × 100的图像包含100行，每行包含100个像素，总共有10,000个像素。标准的真正高清电视分辨率是1080
    × 1080，这意味着屏幕包含1,166,400个像素。如果你在这个电视上观看的节目仅包含一百万个像素，那么图像就比电视屏幕的最大潜力少了166,400个像素，图像质量会下降。但如果你在平板设备上观看同样的节目，你不会注意到图像质量的下降，因为平板更小，像素的分布不那么密集。
- en: Next, you’ll learn how to control the quality of your pictures by changing the
    resolution. Later in this section, you’ll further customize your images by resizing,
    using filters, and adding text.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将学习如何通过更改分辨率来控制照片的质量。在本节稍后，你将进一步通过调整图像大小、使用滤镜和添加文本来定制图像。
- en: Changing the Resolution
  id: totrans-79
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 更改分辨率
- en: You can alter the resolution of the Pi Camera by using the code `camera.resolution
    = (500 x 500)`, which sets the image to a height and width of 500 pixels. This
    is useful because the Pi Camera v2 has a resolution of 3280 × 2464 pixels, meaning
    that every image you take contains 8,081,920 pixels. The adjusted image of 500
    × 500 will now contain only 250,000 pixels, so the file will be smaller and consume
    less storage space.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用代码`camera.resolution = (500 x 500)`来调整Pi Camera的分辨率，该代码将图像设置为500像素的高度和宽度。这很有用，因为Pi
    Camera v2的分辨率为3280 × 2464像素，这意味着你拍摄的每一张图像包含8,081,920个像素。调整后的500 × 500图像将仅包含250,000个像素，因此文件将更小，消耗的存储空间也更少。
- en: Remember that different resolutions are more suitable for different screen sizes.
    Adjusting the resolution ensures that you save storage space on your Raspberry
    Pi. You might not always need an image that contains 8,081,920 pixels!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，不同的分辨率适用于不同的屏幕尺寸。调整分辨率可以确保你在Raspberry Pi上节省存储空间。你不一定总是需要包含8,081,920个像素的图像！
- en: Open your *selfie.py* file and edit it to look like the program in [Listing
    4-4](ch04.xhtml#ch04ex04) to try out different camera resolutions and find one
    suitable for your screen.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的*selfie.py*文件，并将其编辑成像[Listing 4-4](ch04.xhtml#ch04ex04)中的程序，尝试不同的相机分辨率，并找到适合你屏幕的分辨率。
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**LISTING 4-4** Changing the resolution of the image'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 4-4** 更改图像分辨率'
- en: The program sets the camera resolution to 1024 × 768 ❶, takes a single photo,
    and then names and saves the file as the current date and time when the photo
    was taken. This size is the standard resolution setting for a 17-inch screen;
    each image will contain only 786,432 pixels, compared to the maximum resolution
    of 8,081,920 pixels. This image has approximately nine times fewer pixels than
    the full capability of the Pi Camera v2\. Try different resolution settings by
    adjusting the values on line ❶.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 程序将相机分辨率设置为1024 × 768 ❶，拍摄一张照片，然后将文件命名并保存为拍照时的当前日期和时间。此分辨率是17英寸屏幕的标准分辨率设置；每张图像将仅包含786,432个像素，相比最大分辨率8,081,920个像素，这张图像的像素数量约为Pi
    Camera v2的九分之一。通过调整❶行的数值，你可以尝试不同的分辨率设置。
- en: Resizing an Image
  id: totrans-86
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 调整图像大小
- en: Resizing an image is optional, but it’s a good skill to learn. If you size the
    image inappropriately for the number of pixels it contains, the pixels will start
    to crowd each other out and overlap, distorting the image. A lower resolution
    is useful for small screens, and a higher resolution is suitable for large screens.
    4K screens require 8,294,400 pixels to fill the screen and look clear. If you
    had half these pixels, the pixels would space out and lower the image quality.
    In order to keep a similar image quality, you would need to reduce the size of
    the image and display it on a smaller screen.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 调整图像大小是可选的，但这是一项很好的技能。如果你不适当地调整图像的大小，使其包含的像素数量过多，像素将开始相互拥挤并重叠，从而扭曲图像。较低的分辨率适用于小屏幕，较高的分辨率适用于大屏幕。4K屏幕需要8,294,400个像素才能填满屏幕并保持清晰。如果你只有这些像素的一半，像素会分散，图像质量会降低。为了保持相似的图像质量，你需要减小图像大小并在较小的屏幕上显示。
- en: One workaround is to resize the image after you take the photograph. Adjusting
    resolution and resizing images are particularly useful skills for projects for
    which you’re capturing images over a long period of time, like the nature box
    project in [Chapter 11](ch11.xhtml#ch11).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一种变通方法是在拍照后调整图像大小。调整分辨率和图像大小是非常有用的技能，特别是对于需要长时间拍摄图像的项目，如[第 11 章](ch11.xhtml#ch11)中的自然盒子项目。
- en: Open your program from [Listing 4-4](ch04.xhtml#ch04ex04) and alter it to look
    like [Listing 4-5](ch04.xhtml#ch04ex05). This program resizes the image to be
    more appropriate for the resolution.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的程序代码，来自[清单 4-4](ch04.xhtml#ch04ex04)，并修改它使其看起来像[清单 4-5](ch04.xhtml#ch04ex05)。该程序将图像大小调整到适合分辨率。
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**LISTING 4-5** Changing the size of the image'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 4-5** 改变图像大小'
- en: 'You make the line `camera.resolution` at ❶ into a comment, which stops the
    line of coding from running. After you capture the image, you add the code to
    resize the image: `resize=(600, 600)`.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你将`camera.resolution`这一行在❶处变成注释，这样该行代码就不会执行。捕获图像后，你需要添加代码来调整图像的大小：`resize=(600,
    600)`。
- en: Try altering the values within the parentheses to suit your screen size. Generally,
    the smaller the screen is, the lower the resize values are; the larger the screen
    is, the larger the values are. Experiment with the values to find a balance between
    the quality of the image and the amount of storage (memory) required to save each
    image. Remember that the higher the image quality is, the more space is required
    to store it; the lower the quality is, the less space is required to store it.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试调整括号内的值以适应你的屏幕大小。通常，屏幕越小，调整的值越低；屏幕越大，值越大。尝试不同的值，找到图像质量和存储（内存）要求之间的平衡。记住，图像质量越高，存储所需的空间越大；质量越低，所需的空间越少。
- en: Using Filters
  id: totrans-94
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用滤镜
- en: '*Filters* instantly change a picture’s style. Most likely, you’ve used filters
    like the classic sepia, beauty shot, and retro filters on camera apps. The Pi
    Camera also boasts a range of easy-to-use filters ([Figure 4-5](ch04.xhtml#ch04fig05)).
    To apply a filter, you use the code `camera.image_effect` and then add the name
    of the filter.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*滤镜*可以瞬间改变图片的风格。你可能已经在相机应用程序中使用过经典的褐色、美女拍摄和复古滤镜。Pi Camera 也有一系列易于使用的滤镜（[图 4-5](ch04.xhtml#ch04fig05)）。要应用滤镜，你需要使用代码`camera.image_effect`，然后添加滤镜名称。'
- en: '![Image](../images/04fig05.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig05.jpg)'
- en: '**FIGURE 4-5** Applying filters: emboss, watercolor, and negative'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 4-5** 应用滤镜：浮雕、水彩和负片'
- en: Let’s start with the *emboss* filter, which makes the image appear raised, similar
    to the design you find on coins. Open your program code from [Listing 4-5](ch04.xhtml#ch04ex05),
    and add the line at ❶ in [Listing 4-6](ch04.xhtml#ch04ex06).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从*浮雕*滤镜开始，它可以让图像看起来像是被凸起的，类似于硬币上的设计。打开[清单 4-5](ch04.xhtml#ch04ex05)中的程序代码，并在[清单
    4-6](ch04.xhtml#ch04ex06)的❶位置添加这一行。
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**LISTING 4-6** Adding a filter'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 4-6** 添加滤镜'
- en: This program saves each file as *photo.jpg*, so each time you run it, the previous
    image file will be overwritten with the new one. If you want to keep each copy
    of your filtered image, change the filename that you use to save the image at
    ❷.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序将每个文件保存为*photo.jpg*，因此每次运行时，之前的图像文件将被新的图像覆盖。如果你想保留每个过滤后的图像副本，可以更改保存图像时使用的文件名，见❷。
- en: 'You also could use other filters. Try each of the following filters by replacing
    `''``emboss``''` at ❶ with a keyword listed here:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用其他滤镜。通过将❶处的`'``emboss``'`替换为下面列出的关键字来尝试每一个滤镜：
- en: '`''``watercolor''`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''``watercolor''`'
- en: '`''``cartoon''`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''``cartoon''`'
- en: '`''``negative''`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''``negative''`'
- en: '`''``sketch''`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''``sketch''`'
- en: '`''``denoise``''`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''``denoise``''`'
- en: '`''``oilpaint``''`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''``oilpaint``''`'
- en: '`''``hatch''`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''``hatch''`'
- en: '`''``pastel''`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''``pastel''`'
- en: '`''``film''`'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''``film''`'
- en: '`''``blur''`'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''``blur''`'
- en: '`''``colorswap``''`'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''``colorswap``''`'
- en: '`''``washedout``''`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''``washedout``''`'
- en: '`''``posterise``''`'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''``posterise``''`'
- en: Adding Text to an Image
  id: totrans-116
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 向图像添加文本
- en: Let’s look at how to overlay text on your images to add a message, a title,
    or just a reminder. You can also combine this feature with the date stamp so the
    date and time the photo was taken are included in the final image.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看如何在图像上叠加文本，以添加消息、标题或仅仅是提醒。你还可以将此功能与日期戳结合使用，这样拍摄照片的日期和时间就会包含在最终图像中。
- en: Return to your code from [Listing 4-5](ch04.xhtml#ch04ex05) and add the line
    in bold in [Listing 4-7](ch04.xhtml#ch04ex07).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 返回[清单 4-5](ch04.xhtml#ch04ex05)中的代码，并在[清单 4-7](ch04.xhtml#ch04ex07)中添加加粗的那一行。
- en: '[PRE11]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**LISTING 4-7** Adding a text overlay'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 4-7** 添加文本叠加'
- en: The line of code to add text is `camera.annotate_text`; you just need to replace
    THIS IS A TEXT OVERLAY at ❶ with your own message, and then save and run the program
    ([Figure 4-6](ch04.xhtml#ch04fig06)).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 用于添加文本的代码行是`camera.annotate_text`；你只需将❶处的THIS IS A TEXT OVERLAY替换为你自己的信息，然后保存并运行程序（[图
    4-6](ch04.xhtml#ch04fig06)）。
- en: '![Image](../images/04fig06.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/04fig06.jpg)'
- en: '**FIGURE 4-6** Adding a text overlay to an image'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 4-6** 向图像添加文字覆盖'
- en: Triggering the Camera with a Button
  id: totrans-124
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用按钮触发相机
- en: You’ve written a program to take photos, but you need to run the program each
    time you want to take a photo. If you want to take 100 photos, you’ll need to
    run the program 100 times. Let’s make the camera more camera-like by hooking up
    a simple button that, when pressed, triggers the camera to take a photo.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经写了一个程序来拍照，但每次想拍照时都需要运行该程序。如果你想拍100张照片，就需要运行程序100次。让我们通过连接一个简单的按钮来使相机更像相机，当按钮被按下时，它会触发相机拍照。
- en: Wiring the Button
  id: totrans-126
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 连接按钮
- en: 'You’ll use a push button and the two jumper wires to connect it. You can wire
    the button in various ways depending on what type of button you have:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用一个按键和两根跳线将其连接。你可以根据按钮的类型以不同方式连接按钮：
- en: Use wires with alligator clips and attach the clips to the button’s legs.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用带鳄鱼夹的电线，并将夹子连接到按钮的引脚上。
- en: Tape the wire and legs together, making sure they’re touching.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用胶带将电线和引脚固定在一起，确保它们接触。
- en: Slide wires onto the legs of the button.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将电线滑到按钮的引脚上。
- en: Solder the wires to the legs of the button.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将电线焊接到按钮的引脚上。
- en: Soldering is a more permanent but trickier option. This technique requires you
    to superheat *solder* (typically, a metal alloy made of lead and tin) until it
    turns to liquid. You then use the liquid to join the wire and the arm. When you
    remove the heat, the solder hardens again, fusing the wires together. You need
    special equipment to solder, including a soldering iron and a safe surface to
    solder on. If you’ve never soldered before, check out the Raspberry Pi Foundation’s
    excellent guide at *[https://projects.raspberrypi.org/en/projects/getting-started-with-soldering](https://projects.raspberrypi.org/en/projects/getting-started-with-soldering)*/.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 焊接是一种更为持久但更复杂的选项。这种技术要求你将*焊锡*（通常是由铅和锡组成的金属合金）加热到液态。然后使用液态焊锡将电线与按钮脚连接。当你去除热源时，焊锡再次硬化，将电线固定在一起。焊接需要特别的设备，包括电烙铁和一个安全的焊接表面。如果你以前没有焊接过，查看树莓派基金会提供的优秀指南：*[https://projects.raspberrypi.org/en/projects/getting-started-with-soldering](https://projects.raspberrypi.org/en/projects/getting-started-with-soldering)*。
- en: If you choose the soldering method, carefully solder each male end of the jumper
    wire onto one of the arms. Once the solder has cooled down and set, attach the
    female end of one of the wires to GPIO pin 2\. Attach the female end of the other
    wire to one of the ground pins ([Figure 4-7](ch04.xhtml#ch04fig07)). It doesn’t
    matter which wire attaches to pin 2.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择焊接方法，仔细将跳线的每个公端焊接到按钮的一根脚上。一旦焊锡冷却并固化，将一根线的母端连接到GPIO引脚2，另一根线的母端连接到一个接地引脚（[图
    4-7](ch04.xhtml#ch04fig07)）。连接到引脚2的电线不重要。
- en: '![Image](../images/04fig07.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/04fig07.jpg)'
- en: '**FIGURE 4-7** Wiring the button'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 4-7** 连接按钮'
- en: '**NOTE**'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you don’t have a button, you can still create a trigger by attaching one
    end of the wires to the required GPIO pins and then touching the other end of
    the two wires together. This makes a circuit that acts like a button press and
    triggers the Pi Camera to take a photo.*'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你没有按钮，你仍然可以通过将一根电线的一端连接到所需的GPIO引脚，并将另一端的两根电线接触在一起，来创建一个触发器。这会形成一个像按钮按下那样的电路，触发树莓派相机拍照。*'
- en: Coding the Button
  id: totrans-138
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 按钮编程
- en: 'To code the button, return to your Python editor and create a new file. Then
    enter the program in [Listing 4-8](ch04.xhtml#ch04ex08) and save this file as
    *selfie_snapper.py*. This program uses `gpiozero` to set up the button and trigger
    the Pi Camera to take a photo each time the button is pressed (or the wires touch
    each other). This is a library of code that makes it easy to interact with your
    Raspberry Pi hardware and the GPIO pins. You can read more about it here: *[https://gpiozero.readthedocs.io/en/stable/index.html](https://gpiozero.readthedocs.io/en/stable/index.html)*.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要编程按钮，返回到你的Python编辑器并创建一个新文件。然后输入[清单 4-8](ch04.xhtml#ch04ex08)中的程序，并将此文件保存为*selfie_snapper.py*。该程序使用`gpiozero`设置按钮，并在每次按下按钮（或电线接触时）时触发树莓派相机拍照。这是一个可以轻松与树莓派硬件和GPIO引脚交互的代码库。你可以在这里了解更多信息：*[https://gpiozero.readthedocs.io/en/stable/index.html](https://gpiozero.readthedocs.io/en/stable/index.html)*。
- en: '[PRE12]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**LISTING 4-8** Coding the trigger'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 4-8** 编写触发器'
- en: You import the `Button` class from the `gpiozero` library ❶, which provides
    commands to control the button. You then import the usual `P``i``C``amera` class
    and `datetime` module that you use to take photos and create unique filenames.
    The code at ❷ is used to keep the program looping and checking for the button
    being pressed.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你从`gpiozero`库中导入`Button`类❶，该库提供了控制按钮的命令。然后，你导入通常使用的`P``i``C``amera`类和`datetime`模块，用于拍照并创建唯一的文件名。❷处的代码用于保持程序循环，并检查按钮是否被按下。
- en: Next, you tell the program which GPIO pin the button is connected to ❸, which
    is GPIO pin 2.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你告诉程序按钮连接到哪个GPIO引脚❸，即GPIO引脚2。
- en: Then you start the main part of the program, which begins with the `capture``(``)`
    function. Here, you’re making your own function! You create a new custom function
    when a function that does what you want isn’t available. The `capture``(``)` function
    will capture, name, and save the image ❹.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你开始程序的主要部分，这一部分从`capture``(``)`函数开始。在这里，你正在创建自己的函数！当没有现成的函数能够完成你想要的操作时，你需要创建一个新的自定义函数。`capture``(``)`函数将负责拍摄、命名和保存图像❹。
- en: To create a function, you use the `def` command, which means *define*, and then
    name the function. In this case, you call the function `capture`. You then need
    to add parentheses and a colon. *Don’t forget the colon*; it tells Python that
    the next few indented lines are part of the function, and the function won’t work
    without it.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个函数，你使用`def`命令，它表示*定义*，然后给函数命名。在这种情况下，你将函数命名为`capture`。然后，你需要添加括号和冒号。*不要忘记冒号*；它告诉Python接下来的几行缩进代码是函数的一部分，缺少冒号，函数将无法工作。
- en: On the next few lines, you list the function’s instructions. You need to indent
    these instructions by four spaces so Python knows they belong to the function.
    In this example, the instructions take a current date and time reading, save this
    data, capture the image, and save it to your folder. Because this reading returns
    the date and time, you can take photos the next day without overwriting the previous
    day’s photos. The filename will be combined with the date–time data to make sure
    it’s unique each time you take an image.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几行中，你列出了函数的指令。你需要将这些指令缩进四个空格，以便Python知道它们属于该函数。在这个例子中，指令获取当前的日期和时间，保存这些数据，拍照并将其保存到你的文件夹中。由于这个读取返回日期和时间，你可以在第二天拍照而不会覆盖前一天的照片。文件名将与日期和时间数据结合，确保每次拍摄的图片都是唯一的。
- en: But you must convert the data to a string to use it with the filename, because
    date data has a value and can’t be combined with the *.jpg* extension. To do this,
    you use the code `/%s.jpg" %` `current_time`. The `%` symbol holds the `current_time`
    value, and the `s` converts the data to a string.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 但你必须将数据转换为字符串，以便与文件名一起使用，因为日期数据有一个值，不能与*.jpg*扩展名结合。为此，你使用代码`/%s.jpg" %` `current_time`。`%`符号包含`current_time`的值，`s`将数据转换为字符串。
- en: The final part of the function prints a short message to let you know when a
    photo has been taken. Because that’s the last instruction in the `capture(``)`
    function, you don’t indent the following line so Python knows it isn’t part of
    `capture()`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的最后一部分打印一条简短的消息，告诉你何时拍摄了照片。因为这是`capture(``)`函数中的最后一条指令，所以你不需要缩进下一行，这样Python就知道它不是`capture()`的一部分。
- en: You’ve built the function, but to take a photo, you need to *call* the function
    in your code. You use the simple code `button.when_pressed = capture` ❺ from the
    `gpiozero` library to assign the function to the button so the button takes the
    photo.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经创建了函数，但要拍照，你需要在代码中*调用*该函数。你使用来自`gpiozero`库的简单代码`button.when_pressed = capture`❺将函数分配给按钮，这样按钮就能拍照了。
- en: Finally, you use the `pause(``)` command to ensure that the program runs again
    ❻, and you can take another picture.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你使用`pause(``)`命令，确保程序能够再次运行❻，并且你可以拍摄另一张照片。
- en: Save your program and press **F5** to run it. Now, each time you press the button,
    it will take a new photo and save the image with a unique filename. Well done!
    You’ve built your own camera.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 保存你的程序并按**F5**运行。现在，每次你按下按钮，它都会拍摄一张新照片，并使用唯一的文件名保存图像。做得好！你已经建好了自己的相机。
- en: VIDEOS WITH THE PI CAMERA
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Pi相机拍摄视频
- en: The code for taking videos using the Pi Camera is similar to the code for taking
    photos, and you can apply the same filters and settings that you learned previously.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Pi相机拍摄视频的代码与拍照的代码类似，你可以应用之前学到的相同的过滤器和设置。
- en: Making a Video
  id: totrans-154
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建视频
- en: To create a video, open a new Python file, name it *video.py*, and save it to
    your *my_photos* folder. Enter the program in [Listing 4-9](ch04.xhtml#ch04ex09)
    to record a short clip.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建视频，打开一个新的 Python 文件，命名为 *video.py*，并将其保存到你的 *my_photos* 文件夹中。输入[Listing 4-9](ch04.xhtml#ch04ex09)中的程序来录制一个短视频。
- en: '[PRE13]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**LISTING 4-9** The video-recording code'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 4-9** 视频录制代码'
- en: You import all of the modules of the `picamera` library ❶ and assign the Pi
    Camera to the `camera` variable ❷.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 `picamera` 库的所有模块 ❶，并将 Pi Camera 分配给 `camera` 变量 ❷。
- en: Optionally, you can then set the resolution of the video ❸. Remember that a
    high resolution increases the overall quality of the video but also creates a
    larger file that demands more storage space.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，你可以设置视频的分辨率 ❸。请记住，高分辨率可以提高视频的整体质量，但也会生成更大的文件，要求更多的存储空间。
- en: Then you add the code to start the video recording ❹ and provide the folder
    location you want to save the video file to. You need to include a filename (in
    this case *video_test*) and the file format for saving the video; the format I’ve
    used here is `.h264`, which is a good format for high-definition video.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你需要添加代码以开始视频录制 ❹，并提供你想要保存视频文件的文件夹位置。你需要包括文件名（此处为*video_test*）和保存视频的文件格式；我这里使用的格式是
    `.h264`，这是一个适合高清晰度视频的格式。
- en: Next, you add the length of time you want the video to record ❺. Recording time
    is measured in seconds, so to record for 1 minute, you change 10 to 60; to record
    for 5 minutes, change the value to 300 seconds.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要添加你希望视频录制的时长 ❺。录制时间以秒为单位，因此要录制 1 分钟，你需要将 10 改为 60；要录制 5 分钟，则将值改为 300
    秒。
- en: At ❻, you stop the video recording, which stops the camera and saves the video
    file.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ❻，你停止视频录制，这会停止相机并保存视频文件。
- en: Run the program and take some video! Start with a short time to test the program,
    and then adjust the number of seconds on line ❺ to change the recording length.
    Press **F5** to save your recorded video.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序并录制一些视频！从短时间开始测试程序，然后调整 ❺ 行中的秒数来更改录制时长。按 **F5** 保存你录制的视频。
- en: Playing the Video
  id: totrans-164
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 播放视频
- en: 'Once you have a recording, navigate to the folder where you saved your video
    by opening the terminal and entering the following command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你录制了视频，打开终端并输入以下命令导航到保存视频的文件夹：
- en: '[PRE14]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Press ENTER to go to the folder. Once you’re inside the media folder, you can
    see all the files in that folder by entering this command:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 按下 ENTER 进入文件夹。进入媒体文件夹后，你可以通过输入以下命令查看该文件夹中的所有文件：
- en: '[PRE15]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You should see your *video_test* file. To play the video, enter the following
    command:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到你的 *video_test* 文件。要播放视频，输入以下命令：
- en: '[PRE16]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This command opens the OMXPlayer and displays your video. The OMXPlayer uses
    the hardware of the Raspberry Pi to play back many popular audio and video file
    formats. Remember that size and quality will depend on the resolution that you
    set and recorded at.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令打开 OMXPlayer 并显示你的视频。OMXPlayer 利用树莓派的硬件播放许多流行的音频和视频文件格式。请记住，视频的大小和质量取决于你设置和录制时的分辨率。
- en: Playing the Video on a Computer or Other Device
  id: totrans-172
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在计算机或其他设备上播放视频
- en: 'You might want to share your video masterpiece with your friends and family
    or even upload it to a social media account. But in its current format, the video
    file won’t play on other devices (which won’t have OMXPlayer installed) unless
    they have a specific video *codec*, a program that reads a wide range of video
    file formats. So, you’ll convert the video file into the more common *.mp4* format,
    which will play on most tablets, phones, and smart TVs. Return to the terminal
    window and enter this command to install the converter:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想与朋友和家人分享你的精彩视频，甚至上传到社交媒体账户。但是，以当前格式，视频文件无法在其他设备上播放（这些设备可能没有安装 OMXPlayer），除非它们具备特定的视频
    *编解码器*，这是一种能够读取多种视频文件格式的程序。因此，你将把视频文件转换为更常见的 *.mp4* 格式，这种格式可以在大多数平板电脑、手机和智能电视上播放。返回终端窗口并输入以下命令来安装转换器：
- en: '[PRE17]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then enter this command to convert the video file to the *.mp4* format:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 然后输入此命令将视频文件转换为 *.mp4* 格式：
- en: '[PRE18]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Once the conversion has completed, copy the file onto a memory stick, and you’re
    ready to play, edit, and share your video!
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦转换完成，将文件复制到内存棒上，你就可以播放、编辑并分享你的视频了！
- en: '**NOTE**'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*VLC media player is a free video player that works across most devices and
    operating systems. On your Raspberry Pi, you can find VLC media player under Start*
    ▶ *Sound and Video. If you’re viewing your video on another device, you can download
    and access VLC media player from* [https://www.videolan.org/](https://www.videolan.org/)
    and play the video without having to convert it.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '*VLC 媒体播放器是一个免费的播放器，适用于大多数设备和操作系统。在你的 Raspberry Pi 上，你可以在 Start* ▶ *Sound and
    Video 下找到 VLC 媒体播放器。如果你在其他设备上查看视频，可以从* [https://www.videolan.org/](https://www.videolan.org/)
    下载并访问 VLC 媒体播放器，无需转换即可播放视频。'
- en: Creating a Time-Lapse Video
  id: totrans-180
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建延时摄影视频
- en: A *time-lapse video* is crafted from several hundred individual photos that,
    when combined, create a kind of animation effect. For example, you could take
    a time-lapse video of a candle burning over several hours by taking a photo every
    few minutes, and the video would show the burning process in just a few seconds.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '*延时摄影视频* 是由几百张单独的照片制作而成，当它们合成在一起时，便产生了一种动画效果。例如，你可以拍摄蜡烛燃烧的延时摄影视频，通过每隔几分钟拍一张照片，视频就能在几秒钟内展示蜡烛燃烧的过程。'
- en: The more photos you take, the smoother the video will appear. But if you take
    too many images, you’ll lose the overall impact of the video.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 拍得越多，视频看起来越流畅。但如果拍得太多，你会失去视频的整体效果。
- en: 'This project has two main phases: taking the photos and piecing together the
    time-lapse video. Let’s work through the steps to set up the project.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目有两个主要阶段：拍摄照片和拼接延时摄影视频。让我们一步步进行设置。
- en: 'When you run the time-lapse program, it will potentially capture several hundred
    photos. So, before you write the program, you need to create a new folder for
    storing the images, to make sure they’re in one place and don’t get mixed up with
    other images from previous shoots. Return to the terminal and enter this command
    to return to the *home* folder:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行延时摄影程序时，它可能会捕获几百张照片。因此，在编写程序之前，你需要创建一个新的文件夹来存储这些图像，以确保它们放在同一个地方，不会和之前拍摄的其他照片混在一起。返回终端并输入以下命令返回
    *home* 文件夹：
- en: '[PRE19]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then create a folder called *my_timelapse* by using this command:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用此命令创建一个名为 *my_timelapse* 的文件夹：
- en: '[PRE20]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you rename this folder, remember to change the file location and replace
    it with your folder name.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你重命名了这个文件夹，记得更改文件位置并替换为你的文件夹名称。
- en: Coding the Time-Lapse Video Taker
  id: totrans-189
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 编写延时摄影视频捕捉代码
- en: The `picamera` library provides all the code you need to easily capture a time-lapse
    video. When you execute the program, it will run continuously until you stop it.
    You’ll tell the program how often to take a photo, and it will keep taking pictures.
    Open a new Python file, save it as *time_lapse.py*, and add the program in [Listing
    4-10](ch04.xhtml#ch04ex10).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`picamera` 库提供了捕获延时摄影视频所需的所有代码。当你执行程序时，它将持续运行，直到你停止它。你需要告诉程序多长时间拍一张照片，程序就会一直拍照。打开一个新的
    Python 文件，将其保存为 *time_lapse.py*，并将程序添加到 [Listing 4-10](ch04.xhtml#ch04ex10) 中。'
- en: '[PRE21]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**LISTING 4-10** The time-lapse code'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 4-10** 延时摄影代码'
- en: By now, you should be familiar with the first three lines of the code, which
    import the code you need to use and save the `PiCamera``(``)` command.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你应该已经熟悉了前三行代码，这些代码导入了你需要使用的库，并保存了 `PiCamera``(``)` 命令。
- en: Then, you add a small delay ❶ to allow the camera to prepare before it starts
    taking pictures.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你添加了一个小的延时 ❶ 以便相机在开始拍照前准备好。
- en: Next, you use a `for` *loop* ❷ to take a picture, rename it, print a message,
    and then wait 10 seconds. This loop spares you from having to write the same code
    over and over; without it, you’d have to add the same lines of code 1000 times
    to capture 1000 images. Recall that a loop doesn’t stop until either you stop
    the program or the program meets a specific condition or point.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你使用 `for` *循环* ❷ 来拍照、重命名、打印信息，然后等待 10 秒。这个循环让你避免重复编写相同的代码；如果没有它，你需要为拍摄 1000
    张照片重复添加相同的代码 1000 次。请记住，循环直到你停止程序或程序满足某个特定条件或点时才会停止。
- en: After the loop, you use the standard `camera.capture``(``)` code to take photos
    ❷. But this time you also add `_continuous`, which ensures that the camera keeps
    taking photos forever or until you stop the program.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环之后，你使用标准的 `camera.capture``(``)` 代码来拍照 ❷。但这次你还添加了 `_continuous`，确保相机会一直拍照，直到你停止程序。
- en: The next part of that line, `/home/pi/my_timelapse/`, tells the Pi where to
    store the photos. Then it gives instructions on how to name the files so they’re
    not overwritten. Let’s break down how this code works.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 该行的下一部分，`/home/pi/my_timelapse/`，告诉Pi存储照片的位置。然后，它提供了如何命名文件的指令，以避免文件被覆盖。让我们逐步分析这段代码是如何工作的。
- en: First, you add the filename, which is *img*. Then you use the `counter(``)`
    function to count from 0 upward. Each time a photo is taken, the counter value
    is added to the filename *img*. The counter is set to a maximum number of digits;
    in this program, it’s set to `04d`, which means a maximum of four digits.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你添加文件名，即*img*。然后，你使用`counter(``)`函数从0开始计数。每拍一张照片，计数器的值就会加到文件名*img*上。计数器的最大位数已设置；在此程序中，设置为`04d`，即最多四位数字。
- en: When the program executes, the first photo taken is saved as *img0000*, the
    next photo is saved as *img0001*, then *img0002*, and so on. Because you can use
    up to four digits, you can take 9999 images before they start overwriting each
    other. This number should be plenty! Depending on what you’re capturing, you might
    want to take fewer (or more) images. If so, all you have to do is adjust the `04d`
    value to `03d` for three digits, `02d` for two digits, and so on.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序执行时，拍摄的第一张照片会被保存为*img0000*，下一张保存为*img0001*，然后是*img0002*，依此类推。由于你最多可以使用四位数字，因此在它们开始互相覆盖之前，你最多可以拍摄9999张照片。这个数字应该足够了！根据你拍摄的内容，你可能希望拍摄更少（或更多）照片。如果是这样，你只需将`04d`的值调整为`03d`（三位数字）、`02d`（两位数字）等。
- en: Once the program has saved the image file, it prints the filename ❸ to your
    screen so you can check that the program is saving the files correctly. You can
    also see at a glance how many pictures the program has taken.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦程序保存了图像文件，它会将文件名❸打印到屏幕上，这样你就可以检查程序是否正确保存了文件。你还可以一目了然地看到程序已拍摄了多少张照片。
- en: The final line of the program sets the time delay between each photo taken.
    A delay of 10 seconds ❹ allows you to test that the program is working correctly
    before deploying a longer time lapse. The camera will take a photo every 10 seconds
    until you terminate the program. In your real time-lapse video, you’ll want to
    use a longer delay time.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的最后一行设置了每张照片之间的时间延迟。延迟10秒❹可以让你在部署更长的延时之前测试程序是否正常工作。相机将每隔10秒拍摄一张照片，直到你终止程序。在你的实际延时视频中，你可能需要使用更长的延迟时间。
- en: 'Let’s run a test version of the program and create a time-lapse video. Save
    the program and press **F5** to run it. After about a minute or so, stop the program:
    remember, this is just to test it and create a time-lapse sequence ([Figure 4-8](ch04.xhtml#ch04fig08)).'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行程序的测试版本并创建一个延时视频。保存程序并按**F5**运行它。大约一分钟后，停止程序：记住，这只是为了测试并创建一个延时序列（[图4-8](ch04.xhtml#ch04fig08)）。
- en: '![Image](../images/04fig08.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/04fig08.jpg)'
- en: '**FIGURE 4-8** Running the program and collecting the images'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '**图4-8** 运行程序并收集图像'
- en: Figuring Out the Delay Time
  id: totrans-205
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 确定延迟时间
- en: The time delay you set should depend on what you’re filming. For example, consider
    that a candle takes three hours to burn. You could take a photo every minute by
    setting a delay of 60 seconds, which would result in 180 images. You could even
    set the delay to 30 seconds and take 360 images. Both settings would produce a
    good time-lapse video, depending on how long and how smooth you want it to be.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 你设置的时间延迟应该根据你拍摄的内容来决定。例如，考虑到蜡烛需要三个小时才能烧完。你可以设置延迟为60秒，这样每分钟拍一张照片，最终会得到180张照片。你甚至可以将延迟设置为30秒，拍摄360张照片。根据你希望视频的长度和流畅程度，两种设置都能产生很好的延时视频效果。
- en: Now, let’s consider filming a flower growing. This might take five days or more.
    Using the same settings would result in 14,400 images, which, at a rate of 30
    frames per second, would produce an 8-minute video clip. This is too long. Setting
    a delay of 1200 seconds would be more suitable and would take a photo every 20
    minutes. Your video would total 360 images and last for 12 seconds.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们考虑拍摄一朵花的生长过程。这可能需要五天或更长时间。使用相同的设置将得到14,400张照片，以每秒30帧的速度，最终会生成一段8分钟的视频片段。这太长了。设置1200秒的延迟会更合适，这样每20分钟拍一张照片。你的最终视频将包含360张照片，视频时长为12秒。
- en: Whenever you set up your camera to take time-lapse images, make sure you consider
    the number of images and choose a suitable delay.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你设置相机拍摄延时图像时，确保考虑图像的数量并选择一个合适的延迟。
- en: Putting Together the Video
  id: totrans-209
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 合成视频
- en: 'To make the time-lapse video, you need to stitch the photos together so they
    create the illusion of time passing. You’ll use the Libav software, which will
    convert, manipulate, and stream a wide range of multimedia formats for you. Here
    are the steps:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 要制作延时摄影视频，你需要将照片拼接在一起，从而创造出时间流逝的假象。你将使用Libav软件，它可以为你转换、处理和流式传输各种多媒体格式。以下是步骤：
- en: '**Install Libav:** Open the terminal and enter the following command to download
    all the Libav tools you’ll need:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装Libav：** 打开终端，输入以下命令来下载所需的Libav工具：'
- en: '[PRE22]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Navigate to the time-lapse folder:** Once the program has been installed,
    navigate to the *my_timelapse* folder that holds all your images by entering this
    command:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**导航到延时摄影文件夹：** 程序安装完成后，进入存储所有图像的*my_timelapse*文件夹，可以通过输入以下命令：'
- en: '[PRE23]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**Create the time lapse:** Enter this code in the terminal to run the Libav
    software and create the video (be sure to enter this line exactly as it appears):'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建延时摄影：** 在终端中输入此代码来运行Libav软件并创建视频（确保准确输入以下命令）：'
- en: '[PRE24]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The process locates each *.h264* image in the designated folder and then uses
    a codec to join it with the previous *.h264* file. Libav then converts the completed
    file to *.mp4* format and saves it as a file named *timelapse.mp4*. The conversion
    might take a while if you have hundreds of images. This is another reason for
    testing the setup before you deploy it on a five-day shoot!
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个过程会定位每个*.h264*图像并将其与前一个*.h264*文件合并，然后Libav将完成的文件转换为*.mp4*格式并保存为名为*timelapse.mp4*的文件。如果你有几百张图像，转换可能会需要一些时间。这也是为什么在进行五天拍摄之前进行测试的另一个原因！
- en: '**Play the time lapse:** Now that your time-lapse test video is in *.mp4* format,
    you can copy it onto a memory stick or transfer it onto a laptop or other device
    and play it like any video file! Notice the speed at which the images are shown
    and how smooth it seems. You can use this test to decide how long you want the
    delay to be in the future.'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**播放延时摄影：** 现在你的延时摄影测试视频已经是*.mp4*格式，你可以将其复制到U盘上，或者传输到笔记本电脑或其他设备上，就像播放任何视频文件一样！注意图像显示的速度以及它的流畅度。你可以使用这个测试来决定未来希望延迟的时间。'
- en: Making Your Own Time-Lapse Movie
  id: totrans-219
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 制作你自己的延时摄影影片
- en: Now you’re ready to set up your time-lapse camera. Calculate the number of images
    you need to take as well as the time period—whether it’s an hour, a day, or a
    week. Set the Pi Camera into position, and then start running the program. In
    my experience, it’s also worth leaving a note to let others know what your Pi
    is doing so they’re not tempted to turn it off. After the required time period,
    stop the program, move to the image folder, stitch the images together, and enjoy
    your video. Don’t forget to share your time-lapse creations so others can admire
    them.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经准备好设置你的延时摄影相机了。计算你需要拍摄的照片数量和时间段——无论是一小时、一整天还是一周。将树莓派相机放置好位置后，启动程序。根据我的经验，值得在旁边留下一个提示，让其他人知道树莓派在执行任务，这样他们就不会随便关掉它。完成所需的时间后，停止程序，进入图像文件夹，将图像拼接起来，享受你的视频。别忘了分享你的延时摄影作品，让别人也能欣赏。
- en: WRAPPING UP
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter covered some of the basics of using the Pi Camera, such as adding
    filters, changing settings, and taking photos, videos, and a time-lapse video.
    You can use the Pi Camera for many projects. How about making a stop-motion animation
    or setting up the camera to keep an eye on your pet and see what it gets up to
    while you are out? In [Chapter 11](ch11.xhtml#ch11), you’ll combine the Pi Camera
    with a motion sensor to remotely capture images of wildlife and upload them to
    Dropbox.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了使用树莓派相机的一些基础知识，比如添加滤镜、更改设置以及拍照、录像和制作延时摄影视频。你可以将树莓派相机应用到许多项目中。比如制作定格动画，或者设置相机观察你的宠物，看它在你外出时做了什么？在[第11章](ch11.xhtml#ch11)中，你将把树莓派相机与运动传感器结合，远程拍摄野生动物的照片，并将其上传到Dropbox。
