- en: '**9**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**WEB AND INTERNET ADMINISTRATION**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you’re running a web server or are responsible for a website, whether simple
    or complex, you likely find yourself performing certain tasks with great frequency,
    notably identifying broken internal and external site links. Using shell scripts,
    you can automate many of these tasks, as well as some common client/server tasks
    such as managing access information on a password-protected website directory.
  prefs: []
  type: TYPE_NORMAL
- en: '**#69 Identifying Broken Internal Links**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A few of the scripts in [Chapter 7](ch07.xhtml#ch07) highlighted the capabilities
    of the `lynx` text-only web browser, but there’s even more power hidden within
    this tremendous software application. One capability that’s particularly useful
    for a web administrator is the `traverse` function (enabled using `-traversal`),
    which causes `lynx` to try to step through all links on a site to see if any are
    broken. This feature can be harnessed in a short script, as [Listing 9-1](ch09.xhtml#ch9ex1)
    details.
  prefs: []
  type: TYPE_NORMAL
- en: '***The Code***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 9-1: The* `*checklinks*` *script*'
  prefs: []
  type: TYPE_NORMAL
- en: '***How It Works***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The vast majority of the work in this script is done by `lynx` ➊; the script
    just fiddles with the resulting `lynx` output files to summarize and display the
    data attractively. The `lynx` output file *reject.dat* contains a list of links
    pointing to external URLs (see [Script #70](ch09.xhtml#ch09lev1sec02) on [page
    220](ch09.xhtml#page_220) for how to exploit this data), *traverse.errors* contains
    a list of invalid links (the gist of this script), *traverse.dat* contains a list
    of all pages checked, and *traverse2.dat* is identical to *traverse.dat* except
    that it also includes the title of every page visited.'
  prefs: []
  type: TYPE_NORMAL
- en: The `lynx` command can take a lot of different arguments, and in this case we
    need to use `-accept_all_cookies` ➋ so that the program doesn’t stall out asking
    whether we want to accept or reject a cookie from a page. We also use `-realm`
    to ensure that the script only checks pages from that point on the site or “lower”
    in the tree, not every single link it encounters. Without `-realm`, it can dig
    up thousands and thousands of pages as it traverses like a madman. When we ran
    `-traversal` on *[http://www.intuitive.com/wicked/](http://www.intuitive.com/wicked/)*
    without `-realm`, it found over 6,500 pages after chugging along for over two
    hours. With the `-realm` flag, it identified 146 pages to examine in just a few
    minutes.
  prefs: []
  type: TYPE_NORMAL
- en: '***Running the Script***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To run this script, simply specify a URL on the command line. You can traverse
    and check *any* website you want, but beware: checking something like Google or
    Yahoo! will take forever and eat up all of your disk space in the process.'
  prefs: []
  type: TYPE_NORMAL
- en: '***The Results***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s check a tiny website that has no errors ([Listing 9-2](ch09.xhtml#ch9ex2)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 9-2: Running* `*checklinks*` *on a website with no errors*'
  prefs: []
  type: TYPE_NORMAL
- en: Sure enough, all is well. How about a slightly larger site? [Listing 9-3](ch09.xhtml#ch9ex3)
    shows what `checklinks` might print for a site with potentially broken links.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 9-3: Running* `*checklinks*` *on a larger website with broken links*'
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that the file *BeingEarnest.shtml* contains a link to */index/*
    that cannot be resolved: the file */index/* does not exist. There are also four
    weird link errors in the *ArtofWriting.html* file.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in [Listing 9-4](ch09.xhtml#ch9ex4), let’s check Dave’s film review
    blog to see what link errors might be lurking.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 9-4: Running the* `*checklinks*` *script with the* `*time*` *utility
    to understand how long it took*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that adding a call to `time` before a long command is a smart way to
    see how long running the script takes. Here you can see that checking all 982
    pages on *[http://www.daveonfilm.com/](http://www.daveonfilm.com/)* took 50 minutes
    of real time, representing 42 seconds of actual processing time. That’s a lot!
  prefs: []
  type: TYPE_NORMAL
- en: '***Hacking the Script***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The data file *traverse.dat* contains a list of all URLs encountered, while
    *reject.dat* is a list of all URLs encountered but not checked, typically because
    they’re external links. We’ll address those in the next script. The actual errors
    are found in the *traverse.errors* file at ➌ in [Listing 9-1](ch09.xhtml#ch9ex1).
  prefs: []
  type: TYPE_NORMAL
- en: To have this script report on image reference errors instead, use `grep` to
    dig through the *traverse.errors* file for *.gif*, *.jpeg*, or *.png* filename
    suffixes before feeding the result to the `sed` statement (which just cleans up
    the output to make it attractive).
  prefs: []
  type: TYPE_NORMAL
- en: '**#70 Reporting Broken External Links**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This partner script ([Listing 9-5](ch09.xhtml#ch9ex5)) to [Script #69](ch09.xhtml#ch09lev1sec01)
    builds on the output of that script to identify all external links from a site
    or site subdirectory analyzed, testing each to ensure that there are no “404 Not
    Found” errors. To make things easy, it assumes that the previous script has just
    been run so it can tap into the **.rejects* file for the URL list.'
  prefs: []
  type: TYPE_NORMAL
- en: '***The Code***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 9-5: The* `*checkexternal*` *script*'
  prefs: []
  type: TYPE_NORMAL
- en: '***How It Works***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is not the most elegant script in this book. It’s more of a brute-force
    method of checking external links. For each external link found, the `curl` command
    tests the validity of the link by trying to grab the contents of its URL and then
    discarding them as soon as they’ve arrived, done in the block of code at ➊.
  prefs: []
  type: TYPE_NORMAL
- en: 'The notation `2>&1` is worth mentioning here: it causes output device #2 to
    be redirected to whatever output device #1 is set to. With a shell, output #2
    is `stderr` (for error messages) and output #1 is `stdout` (regular output). Used
    alone, `2>&1` will cause `stderr` to go to `stdout`. In this instance, however,
    notice that prior to this redirection, `stdout` is already redirected to */dev/null*.
    This is a virtual device that can be fed an infinite amount of data without ever
    getting any bigger. Think of it as a black hole, and you’ll be on the right track.
    Therefore, this notation ensures that `stderr` is also redirected to */dev/null*.
    We’re throwing this information away because all we’re really interested in is
    whether `curl` returns a zero or nonzero return code from this command. Zero indicates
    success; nonzero indicates an error.'
  prefs: []
  type: TYPE_NORMAL
- en: The number of internal pages traversed is just the line count of the file *traverse.dat*,
    and the number of external links can be found by looking at *reject.dat*. If the
    `-a` flag is specified, the output lists all external links, whether they’re reachable
    or not. Otherwise, only failed URLs are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '***Running the Script***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To run this script, simply specify the URL of a site to check as an argument
    to the script.
  prefs: []
  type: TYPE_NORMAL
- en: '***The Results***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s check *[http://intuitive.com/](http://intuitive.com/)* for bad links in
    [Listing 9-6](ch09.xhtml#ch9ex6).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 9-6: Running the* `*checkexternal*` *script on* [http://intuitive.com/](http://intuitive.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: Looks like it’s time to do some cleanup!
  prefs: []
  type: TYPE_NORMAL
- en: '**#71 Managing Apache Passwords**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One terrific feature of the Apache web server is that it offers built-in support
    for password-protected directories, even on a shared public server. It’s a great
    way to have private, secure, and limited-access information on your website, whether
    you’re running a paid subscription service or you just want to ensure that family
    pictures are viewed only by family.
  prefs: []
  type: TYPE_NORMAL
- en: Standard configurations require that in the password-protected directory you
    manage a data file called *.htaccess*. This file specifies the security “zone”
    name, and more importantly, it points to a separate data file that contains the
    account name and password pairs that are used to validate access to the directory.
    Managing this file is not a problem, except that the only tool included with Apache
    for doing so is the primitive `htpasswd` program, which is run on the command
    line. As another option, this script, `apm`, one of the most complex and sophisticated
    scripts in this book, offers a password management tool that runs in your browser
    as a CGI script and lets you easily add new accounts, change the passwords on
    existing accounts, and delete accounts from the access list.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, you will need a properly formatted *.htaccess* file to control
    access to the directory it’s located within. For demonstration purposes, this
    file might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'A separate file, *.htpasswd*, contains all the account and password pairs.
    If this file doesn’t yet exist, you’ll need to create it. A blank one is fine:
    run `touch .htpasswd` and ensure that it’s writable by the user ID that runs Apache
    itself (probably user `nobody`). Then you’re ready for the script in [Listing
    9-7](ch09.xhtml#ch9ex7). This does also require, however, the CGI environment
    set up in “[Running the Scripts in This Chapter](ch08.xhtml#ch08lev1sec01)” on
    [page 201](ch08.xhtml#page_201). Make sure this shell script is saved to your
    *cgi-bin* directory.'
  prefs: []
  type: TYPE_NORMAL
- en: '***The Code***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 9-7: The* `*apm*` *script*'
  prefs: []
  type: TYPE_NORMAL
- en: '***How It Works***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There’s a lot working together for this script to function. Not only do you
    need to have your Apache web server configuration (or equivalent) correct, but
    you need to have the correct entries in the *.htaccess* file, and you need an
    *.htpasswd* file with at least an entry for the `admin` user.
  prefs: []
  type: TYPE_NORMAL
- en: The script itself extracts the `htpasswd` filename from the *.htaccess* file
    and does a variety of tests to sidestep common `htpasswd` error situations, including
    if the script is unable to write to the file. All of this occurs before the main
    block of the script, the `case` statement.
  prefs: []
  type: TYPE_NORMAL
- en: '**Processing Changes to .htpasswd**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The `case` statement ➊ decides which of three possible actions is requested—
    `A` to add a user, `U` to update a user record, and `D` to delete a user—and invokes
    the correct segment of code accordingly. The action and the user account on which
    to perform the action are specified in the `QUERY_STRING` variable. This variable
    is sent by the web browser to the server in the URL as `a=*X*&u=*Y*`, where `*X*`
    is the action letter code and `*Y*` is the specified username. When a password
    is being changed or a user is being added, a third argument, `p`, is needed to
    specify the password value.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let’s say we’re adding a new user `joe` with the password `knife`.
    This action results in the following `QUERY_STRING` being sent to the script from
    the web server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The script unwraps this, setting the `action` variable to the value `A`, `user`
    to `joe`, and `pass` to `knife`. Then it uses the test at ➋ to ensure that the
    password contains only valid alphabetic characters.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, if all is well, it invokes the `htpasswd` program to encrypt the password
    and add it to the *.htpasswd* file at ➌. In addition to processing changes to
    the *.htpasswd* file, this script also produces an HTML table that lists each
    user in the *.htpasswd* file, along with a `[delete]` link.
  prefs: []
  type: TYPE_NORMAL
- en: After producing three lines of HTML output for the heading of the table, the
    script continues at ➍. This `while` loop reads the name and password pairs from
    the *.htpasswd* file by using the trick of changing the *input field separator*
    (*IFS*) to a colon and changing the IFS back when it’s done.
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding a Footer of Actions to Take**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The script also relies on the presence of an HTML file called *apm-footer.html*
    containing occurrences of the strings `--myname--` and `--options--` ➏, which
    are replaced by the current name of the CGI script and the list of users, respectively,
    as the file is output to `stdout`.
  prefs: []
  type: TYPE_NORMAL
- en: The `$myname` variable is processed by the CGI engine, which replaces the variable
    with the actual name of the script. The script itself builds the `$optionstring`
    variable from the account name and password pairs in the *.htpasswd* file at ➎.
  prefs: []
  type: TYPE_NORMAL
- en: The HTML footer file in [Listing 9-8](ch09.xhtml#ch9ex8) provides the ability
    to add a user, update a user’s password, and delete a user.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 9-8: The* apm-footer.html *file used to add a section for creating
    new users*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Running the Script***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll most likely want to save this script in the same directory you want to
    protect with passwords, although you can also put it in your *cgi-bin* directory
    as we have done. Either way, make sure you tweak the `htpasswd` and directory
    values at the beginning of the script as appropriate. You’ll also need an *.htaccess*
    file that defines access permissions and an *.htpasswd* file that exists and is
    writable by the user who runs the Apache web server on your system.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*When you use* `*apm*`*, make sure that the first account you create is* `*admin*`
    *so you can use the script upon subsequent invocations! There’s a special test
    in the code that allows you to create the* `*admin*` *account if* .htpasswd *is
    empty.*'
  prefs: []
  type: TYPE_NORMAL
- en: '***The Results***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The result of running the `apm` script is shown in [Figure 9-1](ch09.xhtml#ch9fig1).
    Notice that it not only lists each account with a delete link but also offers
    options for adding another account, changing the password of an existing account,
    deleting an account, or listing all the accounts.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f09-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 9-1: A shell script–based Apache password management system*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Hacking the Script***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The Apache `htpasswd` program offers a nice command line interface for appending
    the new account and encrypted password information to the account database. But
    only one of the two commonly distributed versions of `htpasswd` supports batch
    use for scripts—that is, feeding the script both an account and password from
    the command line. It’s easy to tell whether your version does: if `htpasswd` doesn’t
    complain when you try to use the `-b` flag, you’ve got the better, more recent
    version. Chances are you will be good, though.'
  prefs: []
  type: TYPE_NORMAL
- en: Be warned that if this script is incorrectly installed, anyone who gains knowledge
    of the URL can then add themselves to the access file and delete everyone else.
    That’s not good. One solution is to only allow this script to be run if the user
    is already signed in as `admin` (as the commented code in the top of the script
    mentions). Another way to secure the script is to place it in a directory that
    itself is password protected.
  prefs: []
  type: TYPE_NORMAL
- en: '**#72 Syncing Files with SFTP**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Though the `ftp` program is still available on most systems, it’s being replaced
    more and more by new file transfer protocols such as `rsync` and `ssh` (secure
    shell). There are a few reasons for this. Since the first edition of this book,
    FTP has begun to show some weaknesses with scaling and securing data in this new
    world of “big data,” and more efficient protocols for transferring data have become
    more mainstream. By default, FTP also transmits data in plaintext, which is generally
    fine for home or corporate networking on trusted networks, but not if you’re doing
    an FTP transfer from an open network at, for example, the library or Starbucks,
    where a lot of people are sharing the same network as you.
  prefs: []
  type: TYPE_NORMAL
- en: All modern servers should support the considerably more secure `ssh` package
    supporting end-to-end encryption. The file transfer element of the encrypted transfer
    is `sftp`, and while it’s even more primitive than `ftp`, we can still work with
    it. [Listing 9-9](ch09.xhtml#ch9ex9) shows how we can utilize `sftp` to securely
    sync our files.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you don’t have* `*ssh*` *on your system, complain to your vendor and administrative
    team. There’s no excuse. If you have access rights, you can also obtain the package
    at* [http://www.openssh.com/](http://www.openssh.com/) *and install it yourself.*'
  prefs: []
  type: TYPE_NORMAL
- en: '***The Code***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 9-9: The* `*sftpsync*` *script*'
  prefs: []
  type: TYPE_NORMAL
- en: '***How It Works***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `sftp` program allows a series of commands to be fed into it as a pipe
    or input redirect. This feature makes this script rather simple: it focuses almost
    entirely on building up a sequence of commands to upload any changed files. At
    the end, these commands are fed to the `sftp` program for execution.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have a version of `sftp` that doesn’t properly return a nonzero failure
    code to the shell when a transfer fails, simply remove the conditional block at
    the end of the script ➊ and replace it with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Because `sftp` requires the account to be specified as `user@host`, it’s actually
    a bit simpler than an equivalent FTP script. Also notice the `-P` flag added to
    the `put` commands: it causes FTP to retain local permissions, as well as creation
    and modification times, for all files transferred.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Running the Script***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Move into the local source directory, ensure that the target directory exists,
    and invoke the script with your username, server name, and remote directory. For
    simple situations, we have an alias called `ssync` (source sync) that moves into
    the directory we need to keep in sync and invokes `sftpsync` automatically.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '***The Results***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Running `sftpsync` with a user, host, and the directory to sync as arguments
    should allow you to sync your directories, as [Listing 9-10](ch09.xhtml#ch9ex10)
    shows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 9-10: Running the* `*sftpsync*` *script*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Hacking the Script***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The wrapper script that we use to invoke `sftpsync` is a tremendously useful
    script, and we’ve used it throughout the development of this book to ensure that
    the copies of the scripts in the web archive at *[http://www.intuitive.com/wicked/](http://www.intuitive.com/wicked/)*
    are exactly in sync with those on our own servers, all the while sidestepping
    the insecurities of the FTP protocol.
  prefs: []
  type: TYPE_NORMAL
- en: This wrapper in [Listing 9-11](ch09.xhtml#ch9ex11), `ssync`, contains all the
    necessary logic for moving to the correct local directory (see the variable `localsource`)
    and creating a file archive that has the latest versions of all the files in a
    so-called *tarball* (named for `tar`, the command that’s used to build it).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 9-11: The* `*ssync*` *wrapper hack script*'
  prefs: []
  type: TYPE_NORMAL
- en: If necessary, a new archive file is created, and all files (including the new
    archive, of course) are uploaded to the server as needed, as shown in [Listing
    9-12](ch09.xhtml#ch9ex12).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 9-12: Running the* `*ssync*` *script*'
  prefs: []
  type: TYPE_NORMAL
- en: One further tweak would be to have `ssync` be invoked from a `cron` job every
    few hours during the workday so that the files on a remote backup server are invisibly
    synchronized to your local files without any human intervention.
  prefs: []
  type: TYPE_NORMAL
