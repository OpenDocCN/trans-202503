- en: '13'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '13'
- en: WORKING WITH AWS
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 与AWS合作
- en: '![Images](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/common.jpg)'
- en: In the preceding chapter, you learned about using Microsoft Azure with PowerShell.
    Now let’s see what we can do with Amazon Web Services (AWS). In this chapter,
    you’ll go deep into using PowerShell with AWS. Once you’ve learned how to authenticate
    to AWS with PowerShell, you’ll learn how to create an EC2 instance from scratch,
    deploy an Elastic Beanstalk (EBS) application, and create an Amazon Relational
    Database Service (Amazon RDS) Microsoft SQL Server database.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，你学习了如何使用PowerShell与Microsoft Azure进行操作。现在让我们看看如何使用Amazon Web Services（AWS）。在本章中，你将深入学习如何使用PowerShell与AWS交互。首先，你将学习如何通过PowerShell认证AWS，然后你将学习如何从零开始创建一个EC2实例，部署Elastic
    Beanstalk（EBS）应用程序，并创建一个Amazon Relational Database Service（Amazon RDS）Microsoft
    SQL Server数据库。
- en: 'Like Azure, AWS is a juggernaut in the cloud world. Chances are high that if
    you’re in IT, you’ll be working with AWS in some way in your career. And as with
    Azure, there’s a handy PowerShell module for working with AWS: `AWSPowerShell`.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 像Azure一样，AWS是云计算领域的巨头。如果你从事IT工作，你很可能会在职业生涯中以某种方式与AWS打交道。和Azure一样，AWS也有一个方便的PowerShell模块：`AWSPowerShell`。
- en: You can install `AWSPowerShell` from the PowerShell Gallery the same way you
    installed the `Az` module, by calling Install-Module AWSPowerShell. Once this
    module is downloaded and installed, you’re ready to go.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像安装`Az`模块一样，从PowerShell Gallery安装`AWSPowerShell`，只需调用Install-Module AWSPowerShell。一旦该模块下载并安装完毕，你就可以开始使用了。
- en: Prerequisites
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 先决条件
- en: I’m assuming you already have an AWS account and that you have access to the
    root user. You can sign up for an AWS free tier account at *[https://aws.amazon.com/free/](https://aws.amazon.com/free/)*.
    You won’t need to do everything as root, but you will need it to create your first
    *identity and access management* *(IAM)* user. You’ll also need to have the `AWSPowerShell`
    module downloaded and installed, as noted earlier.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设你已经有了一个AWS账户，并且可以访问根用户。你可以在* [https://aws.amazon.com/free/](https://aws.amazon.com/free/)*
    注册一个AWS免费套餐账户。你不需要始终使用根用户，但你需要根用户来创建你的第一个*身份和访问管理*（*IAM*）用户。你还需要下载并安装`AWSPowerShell`模块，正如之前所提到的。
- en: AWS Authentication
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AWS认证
- en: In AWS, authentication is done using the IAM service, which handles authentication,
    authorization, accounting, and auditing in AWS. To authenticate to AWS, you must
    have an IAM user created under your subscription, and that user has to have access
    to the appropriate resources. The first step to working with AWS is creating an
    IAM user.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS中，认证是通过IAM服务完成的，IAM处理AWS中的认证、授权、计费和审计。要认证到AWS，你必须在你的订阅下创建一个IAM用户，并且该用户必须能够访问相关资源。与AWS合作的第一步就是创建一个IAM用户。
- en: When an AWS account is created, a root user is automatically created, so you’ll
    use the root user to create your IAM user. *Technically*, you could use the root
    user to do anything in AWS, but that is highly discouraged.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建AWS账户时，会自动创建一个根用户，所以你将使用根用户来创建IAM用户。*从技术上讲*，你可以使用根用户在AWS中做任何事，但这强烈不推荐。
- en: Authenticating with the Root User
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用根用户进行认证
- en: Let’s create the IAM user you’ll use throughout the rest of the chapter. First,
    however, you need to somehow authenticate it. Without another IAM user, the only
    way to do that is with the root user. Sadly, this means you have to abandon PowerShell
    for a moment. You’ll have to use the AWS Management Console’s GUI to get the root
    user’s access and secret keys.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个你将在本章余下部分使用的IAM用户。然而，首先你需要以某种方式进行认证。如果没有其他IAM用户，唯一的方法就是使用根用户。遗憾的是，这意味着你暂时需要放弃PowerShell。你需要使用AWS管理控制台的GUI来获取根用户的访问密钥和秘密密钥。
- en: Your first move is to log into your AWS account. Navigate to the right-hand
    corner of the screen and click the account drop-down menu, shown in [Figure 13-1](ch13.xhtml#ch13fig1).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你的第一步是登录到AWS账户。导航到屏幕的右上角，点击账户下拉菜单，如[图13-1](ch13.xhtml#ch13fig1)所示。
- en: '![Image](../images/13fig01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/13fig01.jpg)'
- en: '*Figure 13-1: My Security Credentials option*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*图13-1：我的安全凭证选项*'
- en: Click the **My Security Credentials** option. A screen will pop up, warning
    that messing with your security credentials isn’t a good idea; see [Figure 13-2](ch13.xhtml#ch13fig2).
    But you need to do it here to create an IAM user.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**我的安全凭证**选项。屏幕会弹出警告，提醒你修改安全凭证不是好主意；参见[图13-2](ch13.xhtml#ch13fig2)。但是你需要在这里进行操作，以便创建一个IAM用户。
- en: '![Image](../images/13fig02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/13fig02.jpg)'
- en: '*Figure 13-2: Authentication warning*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*图13-2：认证警告*'
- en: Click **Continue to Security Credentials**, then click **Access Keys**. Clicking
    **Create New Access Key** should present a way to view your account’s access key
    ID and secret key. It should also give you an option to download a key file containing
    both. If you haven’t already, download the file and put it in a safe spot. For
    now, though, you need to copy the access key and secret key from this page and
    add them to your default profile in your PowerShell session.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**继续到安全凭证**，然后点击**访问密钥**。点击**创建新访问密钥**应该会显示查看帐户访问密钥ID和密钥的方式。它还会提供下载一个包含这两者的密钥文件的选项。如果你还没有下载，下载该文件并将其保存在安全位置。现在，你需要从此页面复制访问密钥和秘密密钥，并将它们添加到PowerShell会话中的默认配置文件中。
- en: Pass both of these keys to the `Set-AWSCredential` command, which saves them
    so they can be reused by the commands that’ll create an IAM user. Check out [Listing
    13-1](ch13.xhtml#ch13list1) for the full command.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 将这两个密钥传递给`Set-AWSCredential`命令，它会保存这些密钥，以便在后续创建IAM用户的命令中重用。查看[列出13-1](ch13.xhtml#ch13list1)以查看完整的命令。
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 13-1: Setting AWS access keys*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*列出13-1：设置AWS访问密钥*'
- en: With that done, you’re ready to create an IAM user.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，你已经准备好创建IAM用户。
- en: Creating an IAM User and Role
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建IAM用户和角色
- en: Now that you’re authenticated as the root user, you can create an IAM user.
    Use the `New-IAMUser` command, specifying the name of the IAM user you’d like
    to use (in this example, `Automator`). When you create the user, you should see
    output like that in [Listing 13-2](ch13.xhtml#ch13list2).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已使用根用户身份验证，可以创建IAM用户。使用`New-IAMUser`命令，指定你想要使用的IAM用户名（在这个示例中是`Automator`）。当你创建用户时，你应该会看到类似[列出13-2](ch13.xhtml#ch13list2)的输出。
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 13-2: Creating an IAM user*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*列出13-2：创建IAM用户*'
- en: Notice the `Arn` property in Listing 13-2\. You'll need this value coming up
    when you create the IAM role.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在列出13-2中的`Arn`属性。在你创建IAM角色时，你需要使用这个值。
- en: The next step is to give the user the appropriate permission. You do that by
    assigning this user a role that’s assigned a policy. AWS groups certain permissions
    in units called *roles*, which allow the administrator to more easily delegate
    permissions (a strategy known as *role-based access control*, or *RBAC*). The
    *policy* then determines what permissions a role has access to.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是赋予用户适当的权限。你可以通过为该用户分配一个角色来完成此操作，角色已经分配了一个策略。AWS将某些权限分组为称为*角色*的单位，这使得管理员可以更轻松地委派权限（这是一种称为*基于角色的访问控制*，或*RBAC*的策略）。*策略*则决定了角色可以访问哪些权限。
- en: 'You can create a role by using the `New-IAMRole` command, but first you need
    to create what AWS calls a *trust relationship policy document*: a string of text
    in JSON that defines the services that this user can access and the level at which
    they can access them.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用`New-IAMRole`命令来创建一个角色，但首先你需要创建AWS所称的*信任关系策略文档*：一个JSON格式的文本字符串，定义了此用户可以访问的服务及其访问级别。
- en: '[Listing 13-3](ch13.xhtml#ch13list3) is an example of a trust relationship
    policy document. Important: Notice the XXXXXX on the Principal line. Be sure to
    replace the ARN of the IAM user you just created there.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[列出13-3](ch13.xhtml#ch13list3)是一个信任关系策略文档的示例。重要提示：注意Principal行中的XXXXXX。请确保将你刚创建的IAM用户的ARN替换到这里。'
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 13-3: Example trust policy document*'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*列出13-3：示例信任策略文档*'
- en: This JSON changes the role itself (modifying its trust policy) to allow your
    `Automator` user to use it. It is giving the `AssumeRole` permission to your user.
    This is required to create the role. For more information about how to create
    a trust relationship policy document, refer to [*https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_manage_modify.html*](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_manage_modify.html).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个JSON会更改角色本身（修改其信任策略），以允许你的`Automator`用户使用它。它是将`AssumeRole`权限赋予你的用户。这是创建角色所必需的。如需了解如何创建信任关系策略文档的更多信息，请参阅[*https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_manage_modify.html*](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_manage_modify.html)。
- en: Assign this JSON string to a `$json` variable and then pass it as the value
    of the `AssumeRolePolicyDocument` parameter in `New-IamRole`, as shown in [Listing
    13-4](ch13.xhtml#ch13list4).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 将此JSON字符串赋值给`$json`变量，然后将其作为`AssumeRolePolicyDocument`参数的值传递给`New-IamRole`，如[列出13-4](ch13.xhtml#ch13list4)所示。
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 13-4: Creating a new IAM role*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*列出13-4：创建新IAM角色*'
- en: Now that the IAM role is created, you need to give it permission to access the
    various resources you’ll be working with. Rather than spend the next 12 dozen
    pages detailing AWS IAM roles and security, let’s do something simple and give
    the `Automator` full access to everything (effectively making it a root user).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 IAM 角色已经创建，你需要赋予它访问你将使用的各种资源的权限。与其花费接下来的几十页篇幅详细讲解 AWS IAM 角色和安全性，不如做一件简单的事，给`Automator`授予对所有内容的完全访问权限（实际上将其变成根用户）。
- en: Note that in practice, you should *not* do this. It’s always best to limit access
    to only those necessary. Check out the AWS IAM Best Practices guide (*[https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html)*)
    for more information. But for now, let’s assign this user the `AdministratorAccess`
    managed policy by using the `Register-IAMUserPolicy` command. You’ll need the
    Amazon Resource Name (ARN) of the policy. To do that, you can use the `Get-IAMPolicies`
    command and filter by policy name, storing that name in a variable, and passing
    the variable into `Register-IAMUserPolicy` (all of which you can see in [Listing
    13-5](ch13.xhtml#ch13list5)).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在实际操作中，你*不*应该这样做。最佳实践是尽量限制访问权限，仅授权必要的权限。有关更多信息，请参考 AWS IAM 最佳实践指南（* [https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html)
    *）。但现在，让我们通过使用`Register-IAMUserPolicy`命令为此用户分配`AdministratorAccess`托管策略。你需要该策略的
    Amazon 资源名称（ARN）。为此，你可以使用`Get-IAMPolicies`命令，通过策略名称进行筛选，将名称存储在变量中，然后将该变量传递到`Register-IAMUserPolicy`（所有操作可以参考[示例
    13-5](ch13.xhtml#ch13list5)）。
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 13-5: Attaching a policy to the user*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 13-5：将策略附加到用户*'
- en: The last thing you need to do is generate an access key that will let you authenticate
    your user. Do this with the `New-IAMAcessKey` command, as shown in [Listing 13-6](ch13.xhtml#ch13list6).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要做的最后一件事是生成一个访问密钥，用以验证你的用户。你可以使用`New-IAMAcessKey`命令来完成这项工作，正如[示例 13-6](ch13.xhtml#ch13list6)所示。
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 13-6: Creating an IAM access key*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 13-6：创建 IAM 访问密钥*'
- en: Your new IAM user is all set up. Now let’s authenticate it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你的新 IAM 用户已经设置好了。现在让我们对其进行身份验证。
- en: Authenticating Your IAM User
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 身份验证你的 IAM 用户
- en: In an earlier section, you authenticated with the root user—this was a temporary
    measure. You need to authenticate your IAM user so you can actually get some work
    done! You need to authenticate your IAM user before you can do just about anything
    in AWS. You’ll again use the `Set-AWSCredential` command to update your profile
    with your new access and secret keys. Change the command a bit, though, by using
    the `StoreAs` parameter, as shown in [Listing 13-7](ch13.xhtml#ch13list7). Because
    you’ll be using this IAM user throughout the rest of the session, you’ll store
    the access and secret key in the AWS default profile so you don’t have to run
    this command again for every session.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，你已经使用了根用户进行身份验证——这只是一个临时措施。你需要验证你的 IAM 用户，以便实际开始工作！在 AWS 中，几乎所有操作都需要先验证
    IAM 用户。在这里，你将再次使用`Set-AWSCredential`命令，通过新访问密钥和秘密密钥更新你的配置文件。然而，这次需要稍微修改命令，使用`StoreAs`参数，正如[示例
    13-7](ch13.xhtml#ch13list7)所示。由于你将在剩下的会话中使用该 IAM 用户，因此你将把访问密钥和秘密密钥存储在 AWS 默认配置文件中，这样每次会话就不需要再次运行此命令了。
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 13-7: Setting default AWS access keys*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 13-7：设置默认 AWS 访问密钥*'
- en: The final command to run is Initialize-AWSDefaultConfiguration -Region 'your
    region here', which prevents having to specify the region every time you call
    a command. This is a one-time step. You can find all regions by running `Get-AWSRegion`
    to find the closest region to you.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个命令是`Initialize-AWSDefaultConfiguration -Region 'your region here'`，它可以避免每次调用命令时都必须指定区域。这是一次性步骤。你可以通过运行`Get-AWSRegion`命令来查找所有区域，并找出离你最近的区域。
- en: 'That’s it! You now have an authenticated session in AWS and can move on to
    working with AWS services. To confirm, run `Get-AWSCredentials` with the `ListProfileDetail`
    parameter to look for all saved credentials. If all is well, you will see the
    default profile show up:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！你现在已经在 AWS 中完成了身份验证，可以开始使用 AWS 服务了。为了确认，可以运行`Get-AWSCredentials`命令并使用`ListProfileDetail`参数查看所有已保存的凭证。如果一切正常，你将看到默认配置文件显示出来：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Creating an AWS EC2 Instance
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 AWS EC2 实例
- en: 'In [Chapter 12](ch12.xhtml#ch12), you created an Azure virtual machine. Here,
    you’ll do something similar by creating an *AWS EC2 instance*. An AWS EC2 instance
    offers the same learning opportunity that an Azure virtual machine does; creating
    VMs is an extremely common occurrence, whether you’re using Azure or AWS. However,
    to create a VM in AWS, you need to approach provisioning in a different way than
    with Azure. Here, the underlying APIs are different, meaning the commands you
    run will be different, but in a nutshell, you’ll be performing essentially the
    same task: creating a virtual machine. It doesn’t help that AWS has its own lingo!
    I’ve tried to mirror the steps we took to create the VM in the preceding chapter,
    but of course, because of the architectural and syntactic differences between
    Azure and AWS, you will see some noticeable differences.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 12 章](ch12.xhtml#ch12)中，你创建了一个 Azure 虚拟机。在这里，你将做类似的事情，通过创建*AWS EC2 实例*。AWS
    EC2 实例提供与 Azure 虚拟机相同的学习机会；无论是在 Azure 还是 AWS 中，创建虚拟机是极其常见的事情。然而，在 AWS 中创建虚拟机时，你需要以不同于
    Azure 的方式来进行资源配置。在这里，底层 API 不同，这意味着你运行的命令会有所不同，但简而言之，你将执行基本相同的任务：创建一个虚拟机。AWS 还有自己的术语，这也让人有些困惑！我尽量让步骤尽可能地与前一章中创建虚拟机的步骤相似，但由于
    Azure 和 AWS 在架构和语法上的差异，你会看到一些明显的不同。
- en: 'Luckily, just as with Azure, you have a module called `AWSPowerShell` that
    makes it easier to write everything from scratch. Just as you did in the preceding
    chapter, you’ll build from the ground up: setting up all the dependencies you
    need and then creating the EC2 instance.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，和 Azure 一样，你有一个名为`AWSPowerShell`的模块，它可以让你更轻松地从零开始编写所有内容。就像在前一章中做的那样，你将从头开始：设置所有所需的依赖项，然后创建
    EC2 实例。
- en: The Virtual Private Cloud
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 虚拟私有云
- en: The first dependency you need is a network. You can use an existing network
    or build your own. Because this book is hands-on, you’ll build your own network
    from scratch. In Azure, you did this with a vNet, but in AWS, you’ll work with
    *virtual private clouds (VPCs)*, which are a network fabric that allows the virtual
    machine to connect with the rest of the cloud. To replicate the same settings
    an Azure vNet might have, you’ll simply create a VPC with a single subnet set
    to its most basic level. Because there is such a wide range of configuration options
    to choose from, I decided it’s best to mirror our Azure network configuration
    as closely as possible.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个依赖是网络。你可以使用现有的网络或自己构建一个。因为本书是实践型的，你将从零开始构建自己的网络。在 Azure 中，你使用的是 vNet，但在 AWS
    中，你将使用*虚拟私有云（VPCs）*，它是一种网络架构，使虚拟机能够连接到云的其他部分。为了复制 Azure vNet 可能具有的相同设置，你只需创建一个具有单个子网的
    VPC，并将其设置为最基础的级别。由于有许多配置选项可以选择，我决定最好尽可能地模拟我们的 Azure 网络配置。
- en: Before you get started, you need to know the subnet you’d like to create. Let’s
    use 10.10.0.0/24 as our example network. You’ll store that information and a variable,
    and use the `New-EC2Vpc` command, as shown in [Listing 13-8](ch13.xhtml#ch13list8).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，你需要知道要创建的子网。让我们以 10.10.0.0/24 作为我们的示例网络。你将存储该信息和一个变量，并使用`New-EC2Vpc`命令，如[清单
    13-8](ch13.xhtml#ch13list8)所示。
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 13-8: Creating an AWS VPC*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 13-8：创建 AWS VPC*'
- en: Once you create the VPC, you have to manually enable DNS support (Azure did
    this for you automatically). Manually enabling DNS support should point the servers
    attached to this VPC to an internal Amazon DNS server. Likewise, you need to manually
    give a public hostname (another thing Azure took care of for you). To do this,
    you need to enable DNS hostnames. Do both of these by using the code in [Listing
    13-9](ch13.xhtml#ch13list9).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 VPC 后，你必须手动启用 DNS 支持（Azure 会自动为你完成此操作）。手动启用 DNS 支持应该将连接到该 VPC 的服务器指向一个内部的
    Amazon DNS 服务器。同样，你需要手动提供一个公共主机名（这是 Azure 为你完成的另一项任务）。要做到这一点，你需要启用 DNS 主机名。通过使用[清单
    13-9](ch13.xhtml#ch13list9)中的代码来完成这两项操作。
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 13-9: Enabling VPC DNS support and hostnames*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 13-9：启用 VPC DNS 支持和主机名*'
- en: Notice that you use the `Edit-EC2VpcAttribute` command for both. As its name
    suggests, this command lets you edit several of your EC2 VPC’s attributes.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你在两者中都使用了`Edit-EC2VpcAttribute`命令。顾名思义，该命令让你编辑 EC2 VPC 的多个属性。
- en: The Internet Gateway
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Internet 网关
- en: The next step is creating an internet gateway. This allows your EC2 instance
    to route traffic to and from the internet. Again, you need to do this manually,
    here using the `New-EC2InternetGateway` command ([Listing 13-10](ch13.xhtml#ch13list10)).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个互联网网关。这将允许你的EC2实例将流量路由到互联网并从互联网接收流量。你需要手动执行此操作，这里使用的是`New-EC2InternetGateway`命令（[列表
    13-10](ch13.xhtml#ch13list10)）。
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 13-10: Creating an internet gateway*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13-10：创建互联网网关*'
- en: Once the gateway is created, you have to attach it to your VPC by using the
    `Add-EC2InternetGateway` command, as shown in [Listing 13-11](ch13.xhtml#ch13list11).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了网关后，你必须使用`Add-EC2InternetGateway`命令将其附加到VPC中，正如[列表 13-11](ch13.xhtml#ch13list11)所示。
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 13-11: Attaching a VPC to an internet gateway*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13-11：将VPC附加到互联网网关*'
- en: With the VPC out of the way, let’s take the next step and add a route to your
    network.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在VPC处理完后，让我们进入下一步，为你的网络添加路由。
- en: Routes
  id: totrans-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 路由
- en: With the gateway created, you now need to create a route table and a route so
    that the EC2 instances on your VPC can access the internet. A *route* is a path
    that network traffic takes to find the destination. A *route table* is a, well,
    table of routes. Your route needs to go in a table, so you’ll create the route
    table first. Use the `New-EC2RouteTable` command, passing in your VPC ID ([Listing
    13-12](ch13.xhtml#ch13list12)).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建了网关之后，你现在需要创建一个路由表和一个路由，以便VPC上的EC2实例可以访问互联网。*路由*是网络流量到达目的地所经过的路径。*路由表*是一个，嗯，路由的表格。你的路由需要放在一个表格里，所以你会先创建路由表。使用`New-EC2RouteTable`命令，传入你的VPC
    ID（[列表 13-12](ch13.xhtml#ch13list12)）。
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 13-12: Creating a route table*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13-12：创建路由表*'
- en: Inside the route table, you create a route that points to the gateway you just
    created. You’re creating a *default route*, or *default gateway*, meaning a route
    that outgoing network traffic will take if a more specific route isn’t defined.
    You’ll route all traffic (0.0.0.0/0) through your internet gateway. Use the `New-EC2Route`
    command, which will return `True` if successful, as shown in [Listing 13-13](ch13.xhtml#ch13list13).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在路由表内，你创建一个指向刚刚创建的网关的路由。你正在创建一个*默认路由*，或者叫*默认网关*，意味着如果没有定义更具体的路由，外发的网络流量将通过该路由。你将所有流量（0.0.0.0/0）都通过你的互联网网关进行路由。使用`New-EC2Route`命令，如果成功返回`True`，正如[列表
    13-13](ch13.xhtml#ch13list13)所示。
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 13-13: Creating a route*'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13-13：创建路由*'
- en: As you can see, your route should be successfully created!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，路由应该已成功创建！
- en: Subnet
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 子网
- en: Next, you have to create a subnet inside your larger VPC and associate it with
    your route table. Remember that a subnet defines the logical network that your
    EC2 instance’s network adapter will be a part of. To create one, you use the `New-EC2Subnet`
    command, and then use the `Register-EC2RouteTable` command to register the subnet
    to the route table you built earlier. First, though, you need to define an *availability
    zone* (where AWS datacenters will be hosting your subnet) for the subnet. If you’re
    not sure which availability zone you want to use, you can use the `Get-EC2AvailabilityZone`
    command to enumerate all of them. [Listing 13-14](ch13.xhtml#ch13list14) shows
    what should happen if you do.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要在更大的VPC中创建一个子网，并将其与路由表关联。记住，子网定义了你的EC2实例的网络适配器将参与的逻辑网络。为了创建一个子网，你可以使用`New-EC2Subnet`命令，然后使用`Register-EC2RouteTable`命令将子网注册到之前创建的路由表中。首先，你需要为子网定义一个*可用区*（AWS数据中心将托管你的子网的位置）。如果你不确定要使用哪个可用区，可以使用`Get-EC2AvailabilityZone`命令列出所有可用区。[列表
    13-14](ch13.xhtml#ch13list14)显示了你执行此操作时的情况。
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*Listing 13-14: Enumerating EC2 availability zones*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13-14：列举EC2可用区*'
- en: If it’s all the same to you, let’s use the `us-east-1d` availability zone. [Listing
    13-15](ch13.xhtml#ch13list15) shows the code to create the subnet, using the `New-EC2Subnet`
    command, which takes the VPC ID you created earlier, a CIDR block (subnet), and
    finally that availability zone you found as well as the code to register the table
    (using the `Register-EC2RouteTable` command).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不介意的话，我们使用`us-east-1d`可用区。[列表 13-15](ch13.xhtml#ch13list15)显示了使用`New-EC2Subnet`命令创建子网的代码，该命令需要你之前创建的VPC
    ID，一个CIDR块（子网），以及你找到的可用区，最后是注册路由表的代码（使用`Register-EC2RouteTable`命令）。
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*Listing 13-15: Creating and registering a subnet*'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13-15：创建并注册子网*'
- en: Now that you have the subnet created and registered, you’re all done with the
    network stack!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建并注册了子网，网络栈的工作就完成了！
- en: Assigning an AMI to Your EC2 Instance
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将AMI分配给你的EC2实例
- en: 'After building the network stack, you have to assign an Amazon Machine Image
    (AMI) to your VM. An *AMI*, which is a “snapshot” of a disk, is used as a template
    to prevent having to install the operating system on EC2 instances from scratch.
    You need to find an existing AMI that suits your needs: you need an AMI that can
    support a Windows Server 2016 instance, so first you need to find the name of
    that instance. Enumerate all of the available instances with the Get-EC2ImageByName
    command, and you should see an image called `WINDOWS_2016_BASE`. Perfect.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建网络堆栈之后，你需要为你的虚拟机分配一个Amazon Machine Image（AMI）。*AMI*是一个磁盘的“快照”，用于作为模板，防止每次都要从头开始安装操作系统。你需要找到一个符合你需求的现有AMI：你需要一个支持Windows
    Server 2016实例的AMI，因此首先需要找到该实例的名称。使用`Get-EC2ImageByName`命令列出所有可用的实例，你应该会看到一个名为`WINDOWS_2016_BASE`的镜像。太完美了。
- en: Now that you know the image name, use `Get-EC2ImageByName` again, and this time,
    specify the image you’d like to use. Doing so will tell the command to return
    the image object you need, as you can see in [Listing 13-16](ch13.xhtml#ch13list16).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道了镜像的名称，重新使用`Get-EC2ImageByName`命令，这次指定你想使用的镜像。这样做会告诉命令返回你需要的镜像对象，正如你在[列表
    13-16](ch13.xhtml#ch13list16)中看到的那样。
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '*Listing 13-16: Finding the AMI*'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13-16：查找AMI*'
- en: 'Your image is stored and ready to go. Finally, you can create your EC2 instance.
    All you need is the instance type; unfortunately, you can’t get a list of them
    with a PowerShell cmdlet, but you can find them at [*https://aws.amazon.com/ec2/instance-types/*](https://aws.amazon.com/ec2/instance-types/).
    Let’s use the free one: `t2.micro`. Load up your parameters—the image ID, whether
    you want to associate with a public IP, the instance type, and subnet ID—and run
    the `New-EC2Instance` command ([Listing 13-17](ch13.xhtml#ch13list17)).'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你的镜像已存储并准备就绪。最后，你可以创建你的EC2实例。你只需要指定实例类型；不幸的是，你无法通过PowerShell cmdlet获取实例类型的列表，但你可以在[*https://aws.amazon.com/ec2/instance-types/*](https://aws.amazon.com/ec2/instance-types/)上找到它们。我们来使用免费的`t2.micro`。加载你的参数——镜像ID、是否希望与公共IP关联、实例类型和子网ID——然后运行`New-EC2Instance`命令（[列表
    13-17](ch13.xhtml#ch13list17)）。
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '*Listing 13-17: Creating an EC2 instance*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13-17：创建EC2实例*'
- en: It’s done! You should see a brand-new EC2 instance in your AWS Management Console,
    or you can use the `Get-EC2Instance` command to return your newly created instance.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了！你应该可以在AWS管理控制台中看到一个全新的EC2实例，或者你可以使用`Get-EC2Instance`命令来返回你新创建的实例。
- en: Wrapping Up
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 总结
- en: You nailed down the code to create the EC2 instance, but, as is, the code is
    cumbersome to use. Let’s make this code easier to use over and over again. Chances
    are, creating an EC2 instance will be a frequent occurrence, so you’ll create
    a custom function to avoid doing everything one step at a time. At a high level,
    this function works the same way as the one you created in [Chapter 12](ch12.xhtml#ch12)
    in Azure; I won’t go through the specifics of the function here, but the script
    can be found in the book’s resources, and I highly recommend you try to build
    the function on your own.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经搞定了创建EC2实例的代码，但目前的代码使用起来较为繁琐。让我们把这段代码改得更容易重复使用。创建EC2实例很可能是一个频繁的操作，因此你可以创建一个自定义函数，避免一步步手动执行。这个函数的高层工作原理与[第12章](ch12.xhtml#ch12)中在Azure创建的函数相同；我在这里不会详细讲解该函数的具体内容，但你可以在书本的资源中找到该脚本，我强烈建议你自己动手尝试构建这个函数。
- en: When the script is called and all dependencies already exist *except* for the
    EC2 instance itself, you’ll see output similar to [Listing 13-18](ch13.xhtml#ch13list18)
    when you run it with the `Verbose` parameter.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当脚本被调用，并且所有依赖项已经存在，*除了*EC2实例本身，你在运行带有`Verbose`参数时，将看到类似于[列表 13-18](ch13.xhtml#ch13list18)的输出。
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '*Listing 13-18: Running the custom EC2 instance creation function*'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13-18：运行自定义EC2实例创建函数*'
- en: You now have the tools you need to automate the boring task of creating EC2
    instances in AWS!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你拥有了自动化创建AWS中EC2实例这一枯燥任务的工具！
- en: Deploying an Elastic Beanstalk Application
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署Elastic Beanstalk应用程序
- en: 'Much like Microsoft Azure’s Web App service, AWS has a web app service of its
    own. *Elastic Beanstalk (EB)* is a service that allows you to upload web packages
    to be hosted on the AWS infrastructure. In this section, you’ll see what it takes
    to create an EB application and then deploy a package to one. This process requires
    five steps:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于微软Azure的Web应用服务，AWS也有自己的Web应用服务。*Elastic Beanstalk (EB)*是一项允许你上传Web包以托管在AWS基础设施上的服务。在本节中，你将看到创建EB应用程序并将包部署到其中所需的步骤。这个过程需要五个步骤：
- en: Create the application.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建应用程序。
- en: Create the environment.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建环境。
- en: Upload the package to make it available to the application.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传包以使其可以用于应用程序。
- en: Create a new version of the application.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的应用程序版本。
- en: Deploy the new version to the environment.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新版本部署到环境中。
- en: Let’s start by creating a new application.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个新的应用程序开始。
- en: Creating the Application
  id: totrans-112
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建应用程序
- en: To create a new application, use the `New-EBApplication` command, which provides
    the application’s name. Let’s call it `AutomateWorkflow`. Run the command, and
    you should see something like [Listing 13-19](ch13.xhtml#ch13list19).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的应用程序，请使用`New-EBApplication`命令，提供应用程序的名称。我们将其命名为`AutomateWorkflow`。运行该命令后，你应该会看到类似于[清单
    13-19](ch13.xhtml#ch13list19)的输出。
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '*Listing 13-19: Creating a new Elastic Beanstalk application*'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 13-19：创建一个新的 Elastic Beanstalk 应用程序*'
- en: The next step is creating the *environment*, which is the infrastructure the
    application will be hosted on. The command to create a new environment is `New-EBEnvironment`.
    Unfortunately, creating the environment isn’t quite as straightforward as creating
    the application. A couple of the parameters, such as the application name and
    name of the environment, are up to you, but you need to know the `SolutionStackName`,
    `Tier_Type`, and `Tier_Name`. Let’s look at these a little more closely.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建*环境*，即应用程序将托管的基础设施。创建新环境的命令是`New-EBEnvironment`。不幸的是，创建环境不像创建应用程序那样简单。应用程序名称和环境名称等参数由你决定，但你需要知道`SolutionStackName`、`Tier_Type`和`Tier_Name`。让我们更仔细地看看这些参数。
- en: You use the `SolutionStackName` to specify the operating system and IIS version
    you’d like your app to run under. For a list of available solution stacks, run
    the `Get-EBAvailableSolutionStackList` command and inspect the `SolutionStackDetails`
    property, as shown in [Listing 13-20](ch13.xhtml#ch13list20).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用`SolutionStackName`来指定你希望应用程序运行的操作系统和 IIS 版本。要查看可用的解决方案栈，请运行`Get-EBAvailableSolutionStackList`命令，并检查`SolutionStackDetails`属性，如[清单
    13-20](ch13.xhtml#ch13list20)所示。
- en: '[PRE20]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '*Listing 13-20: Finding available solution stacks*'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 13-20：查找可用的解决方案栈*'
- en: As you can see, you have a lot of options. For this example, choose 64-bit Windows
    Server Core 2012 R2 running IIS 8.5.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，你有很多选择。对于这个示例，选择 64 位的 Windows Server Core 2012 R2，并运行 IIS 8.5。
- en: Now let’s look at the `Tier_Type`. The `Tier_Type` specifies the kind of environment
    your web service will be running under. The `Standard` type is required if you’ll
    be using this environment to host a website.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一下`Tier_Type`。`Tier_Type`指定了你的 Web 服务将运行的环境类型。如果你打算使用此环境来托管一个网站，则必须选择`Standard`类型。
- en: And finally, for the `Tier_Name` parameter, you have the options of `WebServer`
    and `Worker`. Choose `WebServer` here because you’d like to host a website (`Worker`
    would be required if you were creating an API).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于`Tier_Name`参数，你有`WebServer`和`Worker`两个选项。这里选择`WebServer`，因为你希望托管一个网站（如果创建的是
    API，则需要选择`Worker`）。
- en: Now that your parameters are all figured out, let’s run `New-EBEnvironment`.
    [Listing 13-21](ch13.xhtml#ch13list21) shows the command and the output.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有参数都已确定，让我们运行`New-EBEnvironment`。[清单 13-21](ch13.xhtml#ch13list21)显示了命令及其输出。
- en: '[PRE21]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '*Listing 13-21: Creating an Elastic Beanstalk application*'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 13-21：创建一个 Elastic Beanstalk 应用程序*'
- en: You’ll notice that the status shows `Launching`. This means the app isn’t available
    yet, so you may have to wait a bit for the environment to come up. You can periodically
    check on the status of the app by running Get-EBEnvironment -ApplicationName 'AutomateWorkflow'
    -EnvironmentName 'Testing'. The environment may stay in a `Launching` state for
    a few minutes.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到状态显示为`Launching`。这意味着应用程序尚未可用，因此你可能需要稍等片刻，直到环境启动。你可以通过运行`Get-EBEnvironment
    -ApplicationName 'AutomateWorkflow' -EnvironmentName 'Testing'`定期检查应用程序的状态。环境可能会在`Launching`状态下持续几分钟。
- en: When you see the `Status` property turn to `Ready`, the environment is up, and
    it’s time to deploy a package to the site.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当你看到`Status`属性变为`Ready`时，环境已经启动，接下来可以将包部署到网站。
- en: Deploying a Package
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 部署一个包
- en: 'Let’s deploy. The package you’ll deploy should contain any files you want your
    website to host. You can put whatever you’d like in there—for our purposes, it
    doesn’t matter. All you have to make sure of is that it’s in a ZIP file. Use the
    `Compress-Archive` command to zip up whatever files you want to deploy:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在开始部署。你要部署的包应该包含你希望网站托管的所有文件。你可以在其中放入任何文件——为了我们的目的，文件内容无关紧要。唯一需要确保的是它是一个 ZIP
    文件。使用`Compress-Archive`命令将你想部署的文件打包：
- en: '[PRE22]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: With your package nice and zipped up, you need to put it somewhere the application
    can find. You could put it in a couple of places, but for this example, you’ll
    put it in an Amazon S3 bucket, a common way to store data in AWS. But to put it
    in an Amazon S3 bucket, you first need an Amazon S3 bucket! Let’s make one in
    PowerShell. Go ahead and run New-S3Bucket -BucketName 'automateworkflow'.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的包裹整理好并压缩后，你需要把它放在一个应用程序可以找到的地方。你可以把它放在几个地方，但在这个例子中，你将它放入一个Amazon S3存储桶，这是AWS中常用的数据存储方式。要将文件放入Amazon
    S3存储桶，首先你需要一个Amazon S3存储桶！让我们在PowerShell中创建一个。继续运行命令 `New-S3Bucket -BucketName
    'automateworkflow'`。
- en: With your S3 bucket up and waiting for contents, upload the ZIP file by using
    the `Write-S3Object` command, as shown in [Listing 13-22](ch13.xhtml#ch13list22).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的S3存储桶已经准备好等待文件内容，使用 `Write-S3Object` 命令上传ZIP文件，如[清单13-22](ch13.xhtml#ch13list22)所示。
- en: '[PRE23]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '*Listing 13-22: Uploading the package to S3*'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单13-22：将包上传到S3*'
- en: Now you have to point the application to the S3 key you just created and specify
    a version label for it. The version label can be anything, but typically, you
    use a unique number based on the time. So let’s use the number of ticks representing
    the current date and time. Once you have the version label, run `New-EBApplicationVersion`
    with a few more parameters, as shown in [Listing 13-23](ch13.xhtml#ch13list23).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你必须指向你刚刚创建的S3密钥，并为其指定一个版本标签。版本标签可以是任何内容，但通常你会使用一个基于时间的唯一数字。所以我们使用表示当前日期和时间的刻度数。一旦你有了版本标签，运行
    `New-EBApplicationVersion` 并加入更多参数，如[清单13-23](ch13.xhtml#ch13list23)所示。
- en: '[PRE24]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '*Listing 13-23: Creating a new application version*'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单13-23：创建新的应用程序版本*'
- en: Your application version has now been created! It’s time to deploy this version
    to your environment. Do that by using the `Update-EBEnvironment` command, as shown
    in [Listing 13-24](ch13.xhtml#ch13list24).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用程序版本现在已经创建完成！现在是时候将这个版本部署到你的环境中了。通过使用 `Update-EBEnvironment` 命令来完成这个操作，如[清单13-24](ch13.xhtml#ch13list24)所示。
- en: '[PRE25]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '*Listing 13-24: Deploying the application to the EB environment*'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单13-24：将应用程序部署到EB环境*'
- en: You can see that the status has gone from `Ready` to `Updating` ❶. Again, you
    need to wait a bit until the status turns back to `Ready` as you can see in [Listing
    13-25](ch13.xhtml#ch13list25).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到状态已经从`Ready`变为`Updating` ❶。同样，你需要等一会，直到状态变回`Ready`，正如在[清单13-25](ch13.xhtml#ch13list25)中看到的那样。
- en: '[PRE26]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '*Listing 13-25: Confirming the application is ready*'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单13-25：确认应用程序已准备好*'
- en: As you check in, the status is `Ready` again ❶. Everything looks good!
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在你检查时，状态再次变为`Ready` ❶。一切看起来都很好！
- en: Creating a SQL Server Database in AWS
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在AWS中创建SQL Server数据库
- en: As an AWS administrator, you may need to set up different types of relational
    databases. AWS provides the Amazon Relational Database Service (Amazon RDS), which
    allows for administrators to easily provision a few types of databases. There
    a few options, but for now, you’ll stick with SQL.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 作为AWS管理员，你可能需要设置不同类型的关系数据库。AWS提供了Amazon关系数据库服务（Amazon RDS），它使管理员可以轻松地配置几种类型的数据库。有几种选择，但现在，你将专注于SQL。
- en: In this section, you’ll create a blank Microsoft SQL Server database in RDS.
    The main command you’ll use is `New-RDSDBInstance`. Like `New-AzureRmSqlDatabase`,
    `New-RDSDBInstance` has *a lot* of parameters, more than I can possibly cover
    in this section. If you’re curious about other ways to provision RDS instances,
    I encourage you to review the help contents for `New-RDSDBInstance`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，你将创建一个空白的Microsoft SQL Server数据库在RDS中。你将使用的主要命令是 `New-RDSDBInstance`。像
    `New-AzureRmSqlDatabase` 一样，`New-RDSDBInstance` 有 *许多* 参数，远超过我在这一部分能覆盖的。如果你对其他配置RDS实例的方式感兴趣，我鼓励你查看
    `New-RDSDBInstance` 的帮助文档。
- en: 'For our purposes, though, you need the following information:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，你需要以下信息：
- en: The name of the instance
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例的名称
- en: The database engine (SQL Server, MariaDB, MySQL, and so on)
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库引擎（SQL Server、MariaDB、MySQL等）
- en: The instance class that specifies the type of resources the SQL Server runs
    on
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例类别，指定SQL Server运行所需的资源类型
- en: The master username and password
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主用户名和密码
- en: The size of the database (in GB)
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库的大小（以GB为单位）
- en: 'A few of these things you can figure out easily: the name, username/password,
    and size. The others require further investigation.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 有些信息你可以很容易地搞明白：名称、用户名/密码和大小。其他的则需要进一步调查。
- en: Let’s start with the engine version. You can get a list of all available engines
    and their versions by using the `Get-RDSDBEngineVersion` command. When run with
    no parameters, this command returns a lot of information—too much for what you’re
    doing. You can use the `Group-Object` command to group all the objects by engine,
    which will provide a list of all engine versions grouped by the engine name. As
    you can see in [Listing 13-26](ch13.xhtml#ch13list26), you now have a more manageable
    output that shows all the available engines you can use.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从引擎版本开始。你可以使用 `Get-RDSDBEngineVersion` 命令获取所有可用引擎及其版本的列表。此命令在没有参数的情况下运行时，会返回大量信息——对于你正在做的事情来说，信息过多。你可以使用
    `Group-Object` 命令按引擎对所有对象进行分组，这将提供按引擎名称分组的所有引擎版本的列表。正如你在 [列表 13-26](ch13.xhtml#ch13list26)
    中看到的，你现在有一个更易管理的输出，显示了你可以使用的所有可用引擎。
- en: '[PRE27]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '*Listing 13-26: Investigating RDS DB engine versions*'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13-26：调查 RDS 数据库引擎版本*'
- en: You have four `sqlserver` entries, representing SQL Server Express, Web, Standard
    Edition, and Enterprise Edition. Since this is just an example, you’ll go with
    SQL Server Express; it’s a no-frills database engine and, most important, it’s
    free, which allows you to tune and tweak it if necessary. Select the SQL Server
    Express engine by using sqlserver-ex.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你有四个 `sqlserver` 条目，分别代表 SQL Server Express、Web 版、标准版和企业版。由于这只是一个示例，你将选择 SQL
    Server Express；它是一个简洁的数据库引擎，最重要的是，它是免费的，这使得你可以在必要时对其进行调优和调整。通过使用 sqlserver-ex
    选择 SQL Server Express 引擎。
- en: After picking an engine, you have to specify a version. By default, `New-RDSDBInstance`
    provisions the latest version (which you’ll be using), but you can specify a different
    version by using the `EngineVersion` parameter. To see all the available versions,
    you’ll run `Get-RDSDBEngineVersion` again, limit the search to `sqlserver-ex`,
    and return only the engine versions ([Listing 13-27](ch13.xhtml#ch13list27)).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 选择引擎后，你需要指定一个版本。默认情况下，`New-RDSDBInstance` 会配置最新版本（即你将使用的版本），但你可以通过使用 `EngineVersion`
    参数指定不同的版本。要查看所有可用版本，你需要再次运行 `Get-RDSDBEngineVersion`，将搜索限制为 `sqlserver-ex`，并且只返回引擎版本（参见
    [列表 13-27](ch13.xhtml#ch13list27)）。
- en: '[PRE28]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '*Listing 13-27: Finding SQL Server Express engine versions*'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13-27：查找 SQL Server Express 引擎版本*'
- en: 'The next parameter value you need to provide to `New-RDSDBInstance` is the
    instance class. The instance class represents the performance of the underlying
    infrastructure—memory, CPU, and so forth—that the database will be hosted on.
    Unfortunately, there’s no PowerShell command to easily find all available instance
    class options, but you can check out this link to get a full rundown: [*https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide**/Concepts.DBInstanceClass.html*](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html).'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要为 `New-RDSDBInstance` 提供实例类的值。实例类代表托管数据库的基础架构性能——包括内存、CPU 等。不幸的是，没有 PowerShell
    命令可以轻松找到所有可用的实例类选项，但你可以查看此链接以获取完整信息：[*https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html*](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html)。
- en: When selecting an instance class, it’s important to verify that it’s supported
    by the engine you chose. Here, you’ll use the `db2.t2.micro` instance class to
    create your RDS DB, but many of the other options will not work. For a full breakdown
    on which instance classes are supported under which RDS DB, refer to the AWS RDS
    FAQs (*[https://aws.amazon.com/rds/faqs/](https://aws.amazon.com/rds/faqs/)*).
    If you choose an instance class that’s not supported by the engine you’re using,
    you’ll receive an error as in [Listing 13-28](ch13.xhtml#ch13list28).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择实例类时，重要的是要验证它是否被你选择的引擎所支持。在这里，你将使用 `db2.t2.micro` 实例类来创建你的 RDS 数据库，但许多其他选项将无法使用。有关哪些实例类在不同的
    RDS 数据库下受支持的详细信息，请参见 AWS RDS 常见问题解答 (*[https://aws.amazon.com/rds/faqs/](https://aws.amazon.com/rds/faqs/)*)。如果你选择了一个不被你使用的引擎支持的实例类，你将收到类似
    [列表 13-28](ch13.xhtml#ch13list28) 中的错误消息。
- en: '[PRE29]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '*Listing 13-28: Error when specifying an invalid instance configuration*'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13-28：指定无效实例配置时的错误*'
- en: 'Once you’ve selected a (supported) instance class, you have to decide on a
    username and password. Note that AWS will not accept any old password: you cannot
    have a slash, `@` sign, comma, or space in your password, or you will receive
    an error message like the one in [Listing 13-29](ch13.xhtml#ch13list29).'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择了（受支持的）实例类，你需要决定一个用户名和密码。请注意，AWS 不接受任何旧密码：密码中不能包含斜杠、`@` 符号、逗号或空格，否则你将收到类似
    [列表 13-29](ch13.xhtml#ch13list29) 中的错误消息。
- en: '[PRE30]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '*Listing 13-29: Specifying an invalid password with `New-RDSDBInstance`*'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 13-29：使用 `New-RDSDBInstance` 指定无效密码*'
- en: With that, you have all the parameters needed to fire off `New-RDSDBInstance`!
    You can see the expected output in [Listing 13-30](ch13.xhtml#ch13list30).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，您就具备了启动 `New-RDSDBInstance` 所需的所有参数！您可以在 [清单 13-30](ch13.xhtml#ch13list30)
    中查看预期的输出。
- en: '[PRE31]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '*Listing 13-30: Provisioning a new RDS database instance*'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 13-30：配置一个新的 RDS 数据库实例*'
- en: Congratulations! Your AWS should have a shiny, new RDS database.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您的 AWS 应该已经拥有一个崭新的 RDS 数据库。
- en: Summary
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: 'This chapter covered the basics of using AWS with PowerShell. You looked at
    AWS authentication and then went through several common AWS tasks: creating EC2
    instances, deploying Elastic Beanstalk web applications, and provisioning an Amazon
    RDS SQL database.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了使用 AWS 和 PowerShell 的基础知识。您学习了 AWS 的身份验证，然后逐步了解了几个常见的 AWS 任务：创建 EC2 实例、部署
    Elastic Beanstalk Web 应用程序，以及配置 Amazon RDS SQL 数据库。
- en: 'After this chapter and the preceding one, you should have a good sense of how
    to use PowerShell to work with the cloud. Of course, there’s much more to learn—more
    than I could ever cover in this book—but for now, you’ll be moving on to the next
    part of this book: creating your own fully functional PowerShell module.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章以及前一章之后，您应该已经对如何使用 PowerShell 操作云有了一个清晰的了解。当然，还有更多内容需要学习——远远超出了我在本书中能够涉及的范围——但现在，您将进入本书的下一部分：创建您自己的完全功能的
    PowerShell 模块。
