- en: '**11  STM32F1 Interrupt Jigsaw**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**11  STM32F1中断拼图**'
- en: RDP Level 1 of the STM32 series, in which JTAG debugging is allowed but immediately
    disconnects flash memory, is an appealing target for memory extraction exploits.
    The STM32F1 series does not seem to be vulnerable to Obermaier’s STM32F0 exploit
    from [Chapter 10](ch10.xhtml#ch10) or the DFU bootloader exploit from [Chapter
    2](ch02.xhtml#ch02), but in this chapter we will cover a different vulnerability,
    first described in Schink and Obermaier (2020) for the STM32F1 and shortly after
    in Obermaier, Schink, and Moczek (2020) for two of its clones, the APM32F103 and
    CKS32F103\. As a bonus, the STM32F1 series does not support RDP Level 2, so it’s
    possible that all parts in the series are vulnerable.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: STM32系列的RDP Level 1，其中允许JTAG调试但会立即断开闪存连接，是一个具有吸引力的内存提取漏洞目标。STM32F1系列似乎不易受到Obermaier的STM32F0漏洞攻击（见[第10章](ch10.xhtml#ch10)）或DFU引导程序漏洞攻击（见[第2章](ch02.xhtml#ch02)），但在本章中，我们将讨论一个不同的漏洞，这个漏洞最早由Schink和Obermaier（2020）描述，针对的是STM32F1系列，随后Obermaier、Schink和Moczek（2020）也描述了针对其两个克隆版本——APM32F103和CKS32F103的漏洞。作为额外说明，STM32F1系列不支持RDP
    Level 2，因此该系列的所有部件可能都容易受到攻击。
- en: When protections are enabled, flash memory is disconnected from the main memory
    bus when a debugger is attached. You can’t fetch it as data, and you can’t even
    fetch it as code for execution. The trick here is that while flash memory is disconnected
    from the main memory bus for code and data fetches, interrupts can still be fired.
    The interrupt addresses are accurately fetched from the interrupt vector table
    (IVT) despite the disconnect! This table is also movable, and by stepping the
    table slowly across memory, we can move most words of memory into the programmer
    counter for the debugger to catch.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当启用保护时，调试器连接时，闪存会与主内存总线断开连接。你无法将其作为数据获取，也不能将其作为代码执行。这里的技巧是，尽管闪存在代码和数据获取时与主内存总线断开连接，但中断仍然可以触发。尽管断开连接，中断地址仍然可以从中断向量表（IVT）准确获取！这个表也是可以移动的，通过缓慢地将表步进过内存，我们可以将大部分内存字移入程序计数器，以便调试器捕捉。
- en: '![Image](../images/f0110-01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0110-01.jpg)'
- en: 'Figure 11.1: STM32F103'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1：STM32F103
- en: '**The First Two Words**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**前两个字**'
- en: '![Image](../images/f0111-01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0111-01.jpg)'
- en: Schink’s paper begins with this gloriously simple example, in which he first
    attaches a Segger J-Link adapter through SWD and then calls `reset halt` in OpenOCD’s
    telnet session to reveal that `0x08000268` are the upper 31 bits of the reset
    vector, the second word in flash memory. `0x20005000` is the initial stack pointer,
    the very first word.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Schink的论文从这个简单明了的例子开始，在该例子中，他首先通过SWD连接一个Segger J-Link适配器，然后在OpenOCD的telnet会话中输入`reset
    halt`，从而揭示了`0x08000268`是复位向量的高31位，即闪存中的第二个字。`0x20005000`是初始堆栈指针，位于第一字。
- en: The low bit of the program counter is set (1) for all real handler addresses
    on this chip, indicating Thumb2 mode, but it might be clear (0), so we’ll need
    to recover that bit for a real exploit. This is because unlike the real interrupt
    table, the fake interrupt tables are mostly composed of instructions or data that
    are not interrupt handler addresses. Schink does this by first reading the program
    counter (whose low bit is forced clear) and then grabbing the Thumb2 mode from
    `ESPR` to restore the missing bit.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 程序计数器的低位（1）被设置为所有真实处理程序地址的指示，表示为Thumb2模式，但它也可能清除为（0），因此我们需要恢复该位以进行真正的攻击。这是因为，与真实的中断表不同，假中断表大多由非中断处理程序地址的指令或数据组成。Schink通过首先读取程序计数器（其低位被强制清除），然后从`ESPR`中获取Thumb2模式来恢复缺失的位。
- en: '![Image](../images/f0111-02.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0111-02.jpg)'
- en: This gives us the first two words of flash memory, but in reading the code,
    you’ll see that these are a special case because triggering the reset also moves
    the interrupt table back to the beginning of flash memory.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为我们提供闪存的前两个字，但通过阅读代码，你会看到这是一种特殊情况，因为触发复位也会将中断表移动回闪存的开头。
- en: '![Image](../images/f0112-01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0112-01.jpg)'
- en: '**The Rest of Memory**'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**剩余内存**'
- en: For all other addresses, the entire interrupt table must be slowly stepped across
    flash memory, then individual interrupts must be triggered artificially to move
    table entries into the program counter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有其他地址，必须缓慢地将整个中断表步进过闪存，然后必须人为地触发单个中断，以便将表项移动到程序计数器。
- en: The first complication to this is that seven entries in the list are unusable.
    We’ve already discussed that 0 (MSP) and 1 (reset) can’t be relocated, so except
    at the very beginning, those are forbidden. Exceptions 7, 8, 9, 10, and 13 are
    reserved, and we are unable to trigger them. Exceptions 16 and higher are external
    interrupts, and we can trigger them, but the count differs by chip model.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个复杂性是列表中的七个条目是无法使用的。我们已经讨论过 0（MSP）和 1（复位）不能重新定位，因此除了开始时，其他地方都不能使用这些条目。异常 7、8、9、10
    和 13 是保留的，我们无法触发它们。异常 16 及更高的是外部中断，我们可以触发它们，但数量会根据芯片型号不同而有所差异。
- en: A second complication is that we are relocating the table with the vector table
    offset register (VTOR). This register is commonly used by custom bootloaders,
    such as the one in [Chapter 3](ch03.xhtml#ch03), so that the chip can boot with
    one interrupt table and later switch over to the application’s table.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个复杂性在于我们使用向量表偏移寄存器（VTOR）来重新定位表格。这个寄存器通常被自定义的引导加载程序使用，比如[第 3 章](ch03.xhtml#ch03)，以便芯片可以先使用一个中断表，然后再切换到应用程序的中断表。
- en: If we could slide the interrupt table one word at a time, we could reuse a single
    interrupt to dump all words of memory, but as you can see in [Figure 11.2](ch11.xhtml#ch11fig2),
    we have a 128-word alignment restriction that gets in the way. We’ll need to step
    the table in chunks, then trigger individual interrupts to extract words from
    the table.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们能一次移动一个字来滑动中断表，我们就可以重用一个中断来转储内存中的所有字，但正如[图 11.2](ch11.xhtml#ch11fig2)所示，我们有一个
    128 字对齐的限制，妨碍了这一点。我们需要按块移动表格，然后触发单独的中断从表格中提取字。
- en: This alignment rule means that while we can slide the VTOR, we’ll have gaps
    for our forbidden exceptions, with seven words missing from every table! Schink
    found that while you do need to be aligned to the table size for proper operation,
    the table sort of wraps around if the table is aligned to half of its size and
    you trigger an interrupt that is after the end.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个对齐规则意味着，虽然我们可以移动 VTOR，但由于禁用的异常，我们的表格会存在空白，每个表格都缺少七个字！Schink 发现，虽然你确实需要根据表格大小进行对齐以保证正常操作，但如果表格对齐到其大小的一半，并且触发一个超出表格末尾的中断，表格会有点“环绕”。
- en: '![Image](../images/f0113-01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0113-01.jpg)'
- en: 'Figure 11.2: VTOR from STMicro (2005)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2：STMicro 的 VTOR（2005）
- en: '![Image](../images/f0113-02.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0113-02.jpg)'
- en: 'Figure 11.3: Relocation of the IVT'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3：IVT 的重新定位
- en: 'So in an STM32F103 with 64 entries in its IVT, the table begins at `0x08000000`
    and we can officially use the VTOR to relocate it to aligned addresses: `0x08000100`,
    `0x08000200`, `0x0800-0300`, and so on. At these offsets, we are unable to read
    the seven words at offsets `0x00`, `0x04`, `0x1C`, `0x20`, `0x24`, `0x28`, and
    `0x34` because those interrupts are forbidden or impossible to trigger. But by
    setting the table to 32-word alignment at `0x08000080`, `0x08000180`, `0x08000280`,
    and so on, we can use the table wraparound to fill in the blanks, triggering interrupt
    32 instead of 0 to dump offset `0x00`, or interrupt 39 instead of 7 to dump offset
    `0x1C`. [Figure 11.3](ch11.xhtml#ch11fig3) demonstrates this.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在具有 64 个条目的 STM32F103 中，表格从 `0x08000000` 开始，我们可以正式使用 VTOR 将其重新定位到对齐的地址：`0x08000100`、`0x08000200`、`0x08000300`，依此类推。在这些偏移量下，我们无法读取偏移
    `0x00`、`0x04`、`0x1C`、`0x20`、`0x24`、`0x28` 和 `0x34` 的七个字，因为这些中断是禁用的或无法触发的。但通过将表格设置为
    `0x08000080`、`0x08000180`、`0x08000280` 等的 32 字对齐，我们可以利用表格环绕来填补空白，触发中断 32 而不是 0
    来转储偏移 `0x00`，或者触发中断 39 而不是 7 来转储偏移 `0x1C`。[图 11.3](ch11.xhtml#ch11fig3) 说明了这一点。
- en: Using this illegal-offset trick, we still miss seven words from each even 32-word
    block, but we collect all words from the odd 32-word blocks, giving us 89% coverage
    of the firmware on the STM32F103\. Because we only miss words on the even blocks,
    our coverage is better in chips with larger interrupt tables.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个非法偏移技巧，我们仍然错过了每个偶数 32 字节块的七个字，但我们收集了所有来自奇数 32 字节块的字，这使得我们能够覆盖 STM32F103
    固件的 89%。因为我们仅仅错过了偶数块的字，所以在具有更大中断表的芯片上，我们的覆盖率会更好。
- en: '**Triggering Interrupts**'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**触发中断**'
- en: Now that we’ve covered the theory of Schink’s exploit, let’s cover some of the
    practical details behind triggering specific interrupts. After connecting to the
    OpenOCD server, his script begins by halting the target and disabling exception
    masking.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了 Schink 利用的理论，接下来讨论触发特定中断的实际细节。在连接到 OpenOCD 服务器后，他的脚本首先会暂停目标并禁用异常屏蔽。
- en: '![Image](../images/f0114-01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0114-01.jpg)'
- en: 'It then writes four half-word instructions to the beginning of SRAM at `0x20000000`,
    for triggering exceptions when they can’t be triggered directly. One is `svc #0`
    to trigger a supervisor call, the second is a `nop`, the third is a load instruction
    used to trigger a bus fault, and the fourth is `0xFFFF`, an illegal instruction.
    Many of these interrupts are disabled by default, so the code must first enable
    the feature and then perform the illegal action.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '然后它将四个半字指令写入SRAM的起始位置`0x20000000`，用于在无法直接触发中断时触发异常。其中一个是`svc #0`用于触发监督调用，第二个是`nop`，第三个是用于触发总线故障的加载指令，第四个是`0xFFFF`，即非法指令。许多这些中断默认是禁用的，因此代码必须首先启用这些功能，然后再执行非法操作。'
- en: Each interrupt is triggered by first sending `reset halt` to OpenOCD, writing
    the VTOR address, and then triggering the individual interrupt by its own unique
    method.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每个中断首先通过向OpenOCD发送`reset halt`，写入VTOR地址，然后通过其独特的触发方法触发各个中断。
- en: 'First, the standard interrupts: Exception 2 is an NMI, triggered by setting
    bit 31 of `ICSR`. Exception 3 is a HardFault, triggered by executing `0xFFFF`
    from SRAM. Exception 4 is a MemFault, triggered by setting a bit of the `SHCSR`
    register and branching to unexecutable I/O memory at `0xe0000000`. Exception 5
    is a BusFault, triggered by setting a different bit of `SHCSR` and branching to
    the `ldr` instruction in SRAM. Exception 6 is a UsageFault, triggered by jumping
    to the illegal instruction in RAM after setting the appropriate bit of `SHCSR`.
    Exception 11 is a Supervisor Call, triggered by executing `svc #0` from SRAM.
    Exception 12 is a DebugMonitor exception, triggered by setting bit 17 of `DEMCR`.
    Exception 14 is a PendSV interrupt, triggered by setting bit 28 of `ICSR`. Exception
    15 is a SysTick interrupt, triggered by setting bit 26 of `ICSR`.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '首先是标准中断：异常2是NMI，通过设置`ICSR`寄存器的第31位来触发。异常3是HardFault，通过从SRAM执行`0xFFFF`来触发。异常4是MemFault，通过设置`SHCSR`寄存器的某个位并跳转到`0xe0000000`处的不可执行I/O内存来触发。异常5是BusFault，通过设置`SHCSR`的另一个位并跳转到SRAM中的`ldr`指令来触发。异常6是UsageFault，通过设置`SHCSR`的适当位并跳转到RAM中的非法指令来触发。异常11是Supervisor
    Call，通过从SRAM执行`svc #0`来触发。异常12是DebugMonitor异常，通过设置`DEMCR`寄存器的第17位来触发。异常14是PendSV中断，通过设置`ICSR`寄存器的第28位来触发。异常15是SysTick中断，通过设置`ICSR`寄存器的第26位来触发。'
- en: Starting with Exception 16 and continuing to the end of the table, we have external
    interrupts. Each of these has an exception number, beginning with 0 for Exception
    16, and each can be triggered by setting the appropriate bit of both `NVIC_ISER0`
    and `NVIC_ISPR0`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 从异常16开始，直到表格末尾，我们有外部中断。每个中断都有一个异常编号，从异常16的0开始，并且每个中断都可以通过设置`NVIC_ISER0`和`NVIC_ISPR0`寄存器的相应位来触发。
- en: Except where a specific instruction is specified, you’ll probably want to execute
    a `nop` when triggering these interrupts to avoid any unpredictable errors in
    the extraction.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 除非明确指定特定指令，否则在触发这些中断时，您可能需要执行`nop`，以避免提取过程中出现任何不可预测的错误。
- en: '**Counting the External Interrupts**'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**计数外部中断**'
- en: Only one thing is left before the exploit is ready to roll. We desperately need
    to know the size of the interrupt table, in order to know both when to slide it
    to a new position and when we can use the wraparound trick for half-aligned table
    positions.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在漏洞利用准备就绪之前，还剩下最后一件事。我们迫切需要知道中断表的大小，以便知道何时将其滑动到新位置以及何时可以使用环绕技巧处理半对齐的表位置。
- en: It would work perfectly well for a demo to simply hard-code the values for a
    few known model numbers, but for the sake of portability, Schink’s exploit instead
    counts the external interrupts by triggering them sequentially until the Program
    Status Register (PSR) fails to indicate the exception.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于演示来说，简单地将一些已知型号的值硬编码是完全可行的，但为了便于移植，Schink的漏洞利用方法通过依次触发外部中断来进行计数，直到程序状态寄存器（PSR）不再指示异常为止。
- en: Counting the interrupts also revealed that for some model numbers, the documentation
    erroneously listed some of these external interrupts as reserved, when in fact
    they functioned just like all the others.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 统计中断时还发现，对于某些型号，文档错误地将一些外部中断列为保留中断，而实际上它们的功能与其他中断完全相同。
- en: '**Performance**'
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**性能**'
- en: Schink’s paper concludes with a table of STM32F1 chips, along with their external
    interrupt counts, extraction time, and coverage when extracting 128kB of flash
    memory. ([Figures 11.4](ch11.xhtml#ch11fig4) and [11.5](ch11.xhtml#ch11fig5).)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Schink的论文以一张STM32F1芯片的表格作为结尾，表格列出了外部中断计数、提取时间和提取128kB闪存时的覆盖率。（见[图11.4](ch11.xhtml#ch11fig4)和[图11.5](ch11.xhtml#ch11fig5)。）
- en: Extraction coverage is strictly limited by the number of interrupts, because
    of those pesky seven that can’t be triggered in an aligned interrupt table.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 提取覆盖率严格受到中断数量的限制，因为有七个烦人的中断无法在对齐的中断表中触发。
- en: If it becomes too frustrating to reverse engineer the firmware given only the
    majority of the instructions, it might help to dump multiple versions of your
    target’s firmware. Gaps should appear in different places, allowing the missing
    part of one version to be filled in from another version. (There will of course
    be errors with this technique attributed to differences in source code and object
    size, but quite a few of the words should be correctly extracted.)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果仅凭大部分指令进行固件逆向工程变得过于令人沮丧，尝试转储多个目标固件版本可能会有所帮助。不同版本的固件应该在不同位置出现空白，从而允许用另一个版本来填补其中一个版本缺失的部分。（当然，这种技术会因为源代码和对象大小的差异而导致错误，但大多数单词应该能够被正确提取。）
- en: '![Image](../images/f0117-01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0117-01.jpg)'
- en: 'Figure 11.4: Code Coverage from Schink and Obermaier (2020)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4：来自 Schink 和 Obermaier (2020) 的代码覆盖率
- en: '![Image](../images/f0117-02.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0117-02.jpg)'
- en: 'Figure 11.5: Counting Interrupt Handlers'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.5：计数中断处理程序
- en: Schink used a Segger J-Link debugger at 3,500 kHz, and extraction time might
    be improved by reducing round-trips or increasing the clock rate. This won’t matter
    much for dumping a single device, of course, but it could be critical if you need
    to dump many different chips in order to fill in the coverage gaps with bytes
    from different versions of a product’s firmware.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Schink 使用了一个 Segger J-Link 调试器，工作频率为 3500 kHz，提取时间可能通过减少往返次数或提高时钟频率来改善。当然，这对单个设备的转储影响不大，但如果需要转储多个不同的芯片，以填补不同版本固件中遗漏的字节时，这可能变得至关重要。
