["```\npublic sealed class Login\n{\n    public string   UserName {get;}\n    public DateTime Established {get;}\n    public bool     Active {get; private set;}\n    `--snip--`\n    public void Disconnect()\n    {\n        Active = false;\n    }\n}\n```", "```\nvar mac = new Login(\"macreadyrj\");\nvar norris = new Login(\"norrisv\");\nAssert.That(mac.Active, Is.True);\nAssert.That(norris.Active, Is.True);\nvar thing = norris;\nthing.Disconnect();\nAssert.That(norris.Active, Is.False);\nAssert.That(mac.Active, Is.True);\n```", "```\nvar norris = new Login(\"norrisv\");\nvar thing = norris;\nAssert.That(norris.Equals(thing), Is.True);\nthing.Disconnect();\nAssert.That(norris.Equals(thing), Is.True);\n```", "```\npublic readonly struct Color\n{\n    public int Red {get; init;}\n    public int Green {get; init;}\n    public int Blue {get; init;}\n}\nvar crayon = new Color {Red = 0xFF};\nvar pencil = new Color {Red = 0xFF};\n```", "```\npublic readonly struct Product : IEquatable<Product>\n{\n    public Product(string desc, decimal amount)\n        => (Description, Price) = (desc, amount);\n    public string Description {get;}\n    public decimal Price {get;}\n `--snip--`\n}\npublic readonly struct Purchase : IEquatable<Purchase>\n{\n    public Purchase(DateTime time, Product product, int qty)\n        => (Time, Product, Quantity) = (time, product, qty);\n    public DateTime Time {get;}\n    public Product Product{get;}\n    public int Quantity {get;}\n    `--snip--`\n}\n```", "```\npublic static class InternetTime\n{\n    public static async Task<DateTime> CurrentTime(Uri provider)\n    {\n        using var client = new HttpClient();\n        var body = await client.GetStringAsync(provider);\n        return Deserialize.DateAndTime(body);\n    }\n}\n```", "```\npublic class Account\n{\n    public virtual decimal ChargeToAccount(Purchase item)\n    {\n        activity.Add(item);\n        return CalculateBalance();\n    }\n    public virtual decimal CalculateBalance()\n        => activity.Sum(item => item.Product.Price * item.Quantity);\n    public virtual IEnumerable<Purchase> Statement\n        => activity.OrderBy(item => item.Time);\n    private readonly List<Purchase> activity = new();\n}\n```", "```\npublic class Command\n{\n    public Command(DatabaseConnection connection)\n        => (this.connection, Query) = (connection, string.Empty);\n    public string Query {get; set;}\n    public QueryResult Execute()\n    {\n        connection.Open();\n        var result = connection.ExecuteQuery(Query);\n        connection.Close();\n        return result;\n    }\n    private readonly DatabaseConnection connection;\n}\n```", "```\npublic struct Speed\n{\n    public double InMetersPerSecond {get; set;}\n}\n```", "```\nprivate const double C = 299792458;\npublic static double Distance(Speed speed, double time)\n{\n    if(speed.InMetersPerSecond > C ||\n       speed.InMetersPerSecond < 0 ||\n       speed.InMetersPerSecond is double.NaN)\n    {\n        throw new ArgumentOutOfRangeException(…\n    `--snip--`\n}\npublic static double Time(Speed speed, double distance)\n{\n    if(speed.InMetersPerSecond > C ||\n       speed.InMetersPerSecond < 0 ||\n       speed.InMetersPerSecond is double.NaN)\n    {\n        throw new ArgumentOutOfRangeException(…\n    `--snip--`\n}\n```", "```\npublic readonly struct Speed\n{\n    private const double C = 299792458;\n    public Speed(double val)\n        => amount = val switch\n        {\n          ❶ double.NaN => throw new ArgumentException(\n                             message: \"Must be a number\",\n                             paramName: nameof(val)),\n          ❷ < 0 or > C => throw new ArgumentOutOfRangeException(\n                             paramName: nameof(val),\n                             message: $\"Must be between 0 and {C}\"),\n          ❸            => val\n        };\n    `--snip--`\n    private readonly double amount;\n}\n```", "```\npublic static Speed FromMetersPerSecond(double value) => new Speed(value);\npublic      double InMetersPerSecond => amount;\npublic static Speed FromKmh(double value) => new Speed(value * 1000 / 3600);\npublic      double InKmh => amount * 3600 / 1000;\n```", "```\npublic static class SpeedExtensions\n{\n    public static Speed WithPercentAdded(this Speed speed, double percent)\n        => Speed.FromMetersPerSecond(speed.InMetersPerSecond +\n                     percent / 100 * speed.InMetersPerSecond);\n}\nvar start = Speed.FromMetersPerSecond(100);\nvar end = start.WithPercentAdded(25);\nAssert.That(end.InMetersPerSecond, Is.EqualTo(125));\n```", "```\npublic readonly struct Velocity\n{\n    public Velocity(Speed speed, Angle angle)\n        => (Speed, Angle) = (speed, angle);\n    public Speed Speed {get;}\n    public Angle Angle {get;}\n}\nvar velocity = new Velocity(100.Kmh(), 45.Degrees());\n```", "```\npublic sealed record Temperature(double InCelsius)\n{\n    public static Temperature FromCelsius(double val)\n        => new Temperature(val);\n    public double InFahrenheit => InCelsius * 1.8 + 32;\n    public static Temperature FromFahrenheit(double val)\n        => new Temperature((val - 32) / 1.8);\n};\n```", "```\npublic sealed record Temperature\n{\n    private const double ZeroKelvin = -273.15;\n    private Temperature(double celsius)\n        => value = celsius switch\n            {\n               Double.PositiveInfinity or < ZeroKelvin\n                  => throw new ArgumentOutOfRangeException(`--snip--)`,\n               double.NaN =>  throw new ArgumentException(`--snip--`),\n                           => celsius\n            };\n    public double             InCelsius => value;\n    public static Temperature FromCelsius(double val)\n        => new Temperature(val);\n    public double             InFahrenheit => value * 1.8 + 32;\n    public static Temperature FromFahrenheit(double val)\n        => new Temperature((val - 32) / 1.8);\n    public static Temperature AbsoluteZero\n        => new Temperature(ZeroKelvin);\n    private readonly double value;\n}\n```", "```\npublic readonly record struct Color(int Red, int Green, int Blue);\n```", "```\nvar background = new Color();\nvar black = new Color(0, 0, 0);\nAssert.That(background == black, Is.True);\n```", "```\npublic enum Severity {Debug, Info, Warning, Error}\npublic readonly record struct LogEntry(DateTime stamp,\n                                       Severity Level,\n                                       string Message);\n```", "```\npublic readonly record struct LogEntry(DateTime TimeStamp,\n                                       Severity Level,\n                                       string Message)\n    : IComparable<LogEntry>\n{\n    public int CompareTo(LogEntry other)\n        => TimeStamp.CompareTo(other.TimeStamp);\n}\n```", "```\nvar logTime = new DateTime(year:2020, month:5, day:31, 15, 35, 01, 12);\nvar log1 = new LogEntry(logTime, Severity.Debug, \"Debug Message\");\nvar log2 = new LogEntry(logTime, Severity.Info, \"Info Message\");\nAssert.That(log1.Equals(log2), Is.False);\nAssert.That(log1.CompareTo(log2), Is.Zero);\n```", "```\npublic sealed class LogEntryComparer : IComparer<LogEntry>\n{\n    public int Compare(LogEntry x, LogEntry y)\n        => string.Compare(x.Message, y.Message, StringComparison.Ordinal);\n}\n```", "```\nvar log = new List<LogEntry>();\n`--snip--`\nvar comparer = new LogEntryComparer();\nvar alphabeticalLog = log.Order(comparer).ToList();\n```", "```\npublic static bool operator<(LogEntry left, LogEntry right)\n    => left.CompareTo(right) < 0;\npublic static bool operator>(LogEntry left, LogEntry right)\n    => left.CompareTo(right) > 0;\n```"]