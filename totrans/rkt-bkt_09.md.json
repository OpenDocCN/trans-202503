["```\nNTSYSAPI\n\nNTSTATUS\n\nNTAPI\n\nNtRaiseHardError(\n\n      IN NTSTATUS ErrorStatus,\n\n      IN ULONG NumberOfParameters,\n\n      IN PUNICODE_STRING UnicodeStringParameterMask OPTIONAL,\n\n      IN PVOID *Parameters,\n\n    ➊ IN HARDERROR_RESPONSE_OPTION ResponseOption,\n\n      OUT PHARDERROR_RESPONSE Response\n\n);\n```", "```\nName                   Address           Ordinal\n\nKdD0Transition         000007FF70451014  1\n\nKdD3Transition         000007FF70451014  2\n\nKdDebuggerInitialize0  000007FF70451020  3\n\nKdDebuggerInitialize1  000007FF70451104  4\n\nKdReceivePacket        000007FF70451228  5\n\nKdReserved0            000007FF70451008  6\n\nKdRestore              000007FF70451158  7\n\nKdSave                 000007FF70451144  8\n\nKdSendPacket           000007FF70451608  9\n```", "```\nseg000:02E4   cmp     dword ptr es:[bx], '0061'     ; spoofing BcdLibraryBoolean_EmsEnabled\n\nseg000:02EC   jnz     short loc_30A                 ; spoofing BcdLibraryBoolean_EmsEnabled\n\nseg000:02EE   cmp     dword ptr es:[bx+4], '0200'   ; spoofing BcdLibraryBoolean_EmsEnabled\n\nseg000:02F7   jnz     short loc_30A                 ; spoofing BcdLibraryBoolean_EmsEnabled\n\nseg000:02F9 ➊ mov     dword ptr es:[bx], '0062'     ; spoofing BcdLibraryBoolean_EmsEnabled\n\nseg000:0301 ➋ mov     dword ptr es:[bx+4], '2200'   ; spoofing BcdLibraryBoolean_EmsEnabled\n\nseg000:030A   cmp     dword ptr es:[bx], 1666Ch     ; spoofing BcdLibraryBoolean_EmsEnabled\n\nseg000:0312   jnz     short loc_328                 ; spoofing BcdLibraryBoolean_EmsEnabled\n\nseg000:0314   cmp     dword ptr es:[bx+8], '0061'   ; spoofing BcdLibraryBoolean_EmsEnabled\n\nseg000:031D   jnz     short loc_328                 ; spoofing BcdLibraryBoolean_EmsEnabled\n\nseg000:031F ➌ mov     dword ptr es:[bx+8], '0062'   ; spoofing BcdLibraryBoolean_EmsEnabled\n\nseg000:0328   cmp     dword ptr es:[bx], 'NIM/'     ; spoofing /MININT\n\nseg000:0330   jnz     short loc_33A                 ; spoofing /MININT\n\nseg000:0332 ➍ mov     dword ptr es:[bx], 'M/NI'     ; spoofing /MININT\n```", "```\nseg000:0000       xor     ax, ax\n\nseg000:0002       mov     ss, ax\n\nseg000:0004       mov     sp, 7C00h\n\nseg000:0007       mov     es, ax\n\nseg000:0009       mov     ds, ax\n\nseg000:000B       sti\n\nseg000:000C       pusha\n\nseg000:000D ➊    mov     cx, 0CFh        ;size of decrypted data\n\nseg000:0010       mov     bp, 7C19h       ;offset to encrypted data\n\nseg000:0013\n\nseg000:0013 decrypt_routine:\n\nseg000:0013 ➋    ror     byte ptr [bp+0], cl\n\nseg000:0016       inc     bp\n\nseg000:0017       loop    decrypt_routine\n\nseg000:0017 ; -------------------------------------------------------------\n\nseg000:0019 ➌ db 44h                     ;beginning of encrypted data\n\nseg000:001A    db 85h\n\nseg000:001C    db 0C7h\n\nseg000:001D    db 1Ch\n\nseg000:001E    db 0B8h\n\nseg000:001F    db 26h\n\nseg000:0020    db 04h\n\nseg000:0021    --snip--\n```"]