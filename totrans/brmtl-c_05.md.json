["```\n#include <stdio.h>\n\nint main()\n{\n    printf(\"3 + 2 is %d\\n\", 3 + 2);\n    printf(\"3 - 2 is %d\\n\", 3 - 2);\n    printf(\"3 * 2 is %d\\n\", 3 * 2);\n    printf(\"3 / 2 is %d\\n\", 3 / 2);\n    printf(\"10 / 9 is %d\\n\", 10 / 9);\n    printf(\"3 %% 2 is %d\\n\", 3 % 2);\n    return (0);\n}\n```", "```\n`type variable_name``; //` `Comment explaining what this variable does`\n```", "```\nstartTime   currentStation  area\n```", "```\nO = l + 1 + O * 0;  // This sort of programming will get you shot.\n```", "```\n`variable` = `expression`;\n```", "```\n/*  \n * A program to sum two variables\n */  \n#include <stdio.h>\n\nint main()\n{\n    int aNumber;        // Some number\n    int otherNumber;    // Some other number\n\n    aNumber = 5;\n    otherNumber = 7;\n\n    printf(\"Sum is %d\\n\", aNumber + otherNumber);\n    return (0);\n}\n```", "```\nint aNumber = 5;           // Some number\n```", "```\n/*  \n * A program to see if we can sum two variables\n */  \n#include <stdio.h>\n\nint main()\n{\n    int aNumber = 5;        // Some number\n    int otherNumber = 7;    // Some other number\n\n    printf(\"Sum is %d\\n\", aNumber + otherNumber);\n    return (0);\n}\n```", "```\nshort int shortNumber;  // A shorter-than-normal integer\n```", "```\nlong int longNumber;    // A longer-than-normal integer\n```", "```\nlong long int veryLongNumber;   // An even longer integer\n```", "```\nsizeof(short int) <= sizeof(int) <= sizeof(long int) <= sizeof(long long int)\n```", "```\n/*\n * Show different number types.\n */\n#include <stdio.h>\n\nint main()\n{\n    short int aShortInt;        // Short integer\n    int aInteger;               // Default integer\n    long int aLongInt;          // Long integer\n    long long int aLongLongInt; // Long long integer\n\n    printf(\"Size of (short int) = %ld (bytes) %ld bits\\n\",\n            sizeof(aShortInt), sizeof(aShortInt)*8);\n\n    printf(\"Size of (int) = %ld (bytes) %ld bits\\n\",\n            sizeof(aInteger), sizeof(aInteger)*8);\n\n    printf(\"Size of (long int) = %ld (bytes) %ld bits\\n\",\n            sizeof(aLongInt), sizeof(aLongInt)*8);\n\n    printf(\"Size of (long long int) = %ld (bytes) %ld bits\\n\",\n            sizeof(aLongLongInt), sizeof(aLongLongInt)*8);\n\n    return (0);\n}\n```", "```\nSize of (short int) = 2 (bytes) 16 bits\nSize of (int) = 4 (bytes) 32 bits\nSize of (long int) = 8 (bytes) 64 bits\nSize of (long long int) = 8 (bytes) 64 bits\n```", "```\naNumber = 5;\n```", "```\naNumber = 0b101;    // 5 in binary\n```", "```\naNumber = 05;   // 5 in octal\n```", "```\naNumber = 0x5;  // 5 in hexadecimal\n```", "```\n#include <stdint.h>\n```", "```\n/*\n * Demonstrate different sizes of integers.\n */\n#include <stdio.h>\n#include <stdint.h>\n\nint main()\n{\n    int8_t   has8bits = 0x12;               // 8-bit integer\n    int16_t has16bits = 0x1234;             // 16-bit integer\n    int32_t has32bits = 0x12345678;         // 32-bit integer\n    int64_t has64bits = 0x123456789abcdef0; // 64-bit integer\n\n    printf(\" 8 bits %x\\n\", has8bits);\n    printf(\"16 bits %x\\n\", has16bits);\n    printf(\"32 bits %x\\n\", has32bits);\n    printf(\"64 bits %lx\\n\", has64bits);\n    return (0);\n}\n```", "```\n/*\n * Simple use of uint8_t\n */\n\n#include <stdio.h>\n#include <stdint.h>\n\nint main()\n{\n    uint8_t smallNumber = 0x12; // A small number\n\n    printf(\"0x12 is %u decimal\\n\", smallNumber);\n    printf(\"0x12 is %o octal\\n\", smallNumber);\n    printf(\"0x12 is %x hex\\n\", smallNumber);\n    return(0);\n}\n```", "```\n0x12 is 18 decimal\n0x12 is 22 octal\n0x12 is 12 hex\n```", "```\n/*\n * See what happens when we exceed the maximum number.\n * (Contains a mistake)\n */\n\n#include <stdio.h>\n#include <stdint.h>\n\nint main()\n{\n    // Very small integer, set to the maximum\n    uint8_t smallNumber = 255;\n\n  1 printf(\"255+1 is %u\\n\", smallNumber + 1);\n    return (0);\n}\n```", "```\n/*\n * See what happens when we exceed the maximum number.\n */\n\n#include <stdio.h>\n#include <stdint.h>\n\nint main()\n{\n    uint8_t smallNumber;\n **uint8_t result;**\n\n    smallNumber = 255;\n    **result = smallNumber + 1;**\n    printf(\"255+1 is %d\\n\", **result**);\n    return (0);\n}\n```", "```\n 0000 0000\n-0000 0001\n ---------\n 1111 1111\n```", "```\n 1 0000 0000\n-  0000 0001\n   ---------\n   1111 1111\n```", "```\naNumber = aNumber + 5;\n```", "```\naNumber += 5;\n```", "```\naNumber += 1;\n```", "```\n++aNumber;\n```", "```\nresult = ++aNumber;   // Don't do this.\n```", "```\naNumber = 2;\nresult = ++aNumber * ++aNumber + ++aNumber;\n```", "```\naNumber = 5;\nresult = ++aNumber;\naNumber = 5;\nresult = aNumber++;\n```", "```\n 0010 0101\n| 0000 1001\n  ---------\n  0010 1101\n```", "```\nledRegister = ledRegister | 0x01;\n```", "```\nledRegister |= 0x01;\n```", "```\n 0010 0101\n& 0000 1001\n  ---------\n  0000 0001\n```", "```\nledRegister &= 0b11111110;\n```", "```\n~ 0000 0001\n  ---------\n  1111 1110\n```", "```\nconst uint8_t LED_BIT = 0b0000001;\n\n// Turn off everything.\nledRegister = 0;\n\n// Turn on the LED.\nledRegister |= LED_BIT;\n\n// Wait a while.\nsleep(5);\n\n// Turn off the LED.\nledRegister &= ~LED_BIT;\n```", "```\n 0010 0101\n^ 0000 1001\n  ---------\n  0010 1100\n```", "```\nledRegister ^= LED_BIT; // Toggle the LED bit.\n```", "```\nuint8_t result = 0xA5 << 2\n```", "```\n1010 0101\n```", "```\n1001 0100\n```", "```\n1010 0101\n```", "```\n0010 1001\n```", "```\nint8_t result = 0xA5 >> 2;  // Note the lack of \"u\"\n```", "```\n1010 0101\n```", "```\n1110 1001\n```", "```\n+----+----+----+----++----+----+----+----+\n|  7 |  6 |  5 |  4 ||  3 |  2 |  1 |  0 |\n| MF | DF | OL | OP || PW | PF | AP | CF |\n+----+----+----+----++----+----+----+----+\n```", "```\nledRegister = 1;  // Turn on clean filter.\n                  // (Turn all others off.)\n```", "```\nconst uint8_t MASTER_FAIL       = (1 << 7);\nconst uint8_t DATA_FAIL         = (1 << 6);\nconst uint8_t OIL_LOW           = (1 << 5);\nconst uint8_t OIL_PRESSURE      = (1 << 4);\nconst uint8_t POWER_FAILURE     = (1 << 3);\nconst uint8_t POSITION_FAULT    = (1 << 2);\nconst uint8_t AIR_PRESSURE      = (1 << 1);\nconst uint8_t CLEAN_FILTER      = (1 << 0);\n```", "```\nledRegister |= CLEAN_FILTER; // Turn on clean filter.\n```", "```\nledRegister |= MASTER_FAIL | POWER_FAILURE;\n```", "```\nbitSet &= ~bitToTurnOff;\n```", "```\nledRegister &= ~(MASTER_FAIL | POWER_FAILURE);\n```", "```\n1000 1000 (MASTER_FAIL | POWER_FAIL)\n```", "```\n0111 0111 ~(MASTER_FAIL|POWER_FAIL)\n```", "```\n1000 0001 (ledRegister: MASTER_FAIL, CLEAN_FILTER)\n```", "```\n0111 0111 ~(MASTER_FAIL|POWER_FAIL)\n1000 0001 (ledRegister: MASTER_FAIL, CLEAN_FILTER)\nResult:  0000 0001 (CLEAN_FILTER)\n```", "```\n/*\n * Program to demonstrate the use of bit operations\n */\n#include <stdio.h>\n#include <stdint.h>\n\n//< Master fail -- shows if any other error is present.\nconst uint8_t MASTER_FAIL       = (1 << 7);\n//< Indicates that inconsistent data was received.\nconst uint8_t DATA_FAIL         = (1 << 6);\n//< Oil container is low.\nconst uint8_t OIL_LOW           = (1 << 5);\n//< Oil pressure is low.\nconst uint8_t OIL_PRESSURE      = (1 << 4);\n//< Main power supply failed.\nconst uint8_t POWER_FAILURE     = (1 << 3);\n//< We told the position to go to x and it didn't.\nconst uint8_t POSITION_FAULT    = (1 << 2);\n//< Air compressor stopped.\nconst uint8_t AIR_PRESSURE      = (1 << 1);\n//< Air filter has reached end of life.\nconst uint8_t CLEAN_FILTER      = (1 << 0);\n/*!\n * Prints the state of the bits\n * (Substitutes for a real LCD panel)\n *\n * \\param ledRegister Register containing the LED bits\n */\nstatic void printLED(const uint8_t ledRegister)\n{\n    printf(\"Leds: \");\n    if ((MASTER_FAIL & ledRegister) != 0)\n        printf(\"MASTER_FAIL \");\n    if ((DATA_FAIL & ledRegister) != 0)\n        printf(\"DATA_FAIL \");\n    if ((OIL_LOW & ledRegister) != 0)\n        printf(\"OIL_LOW \");\n    if ((OIL_PRESSURE & ledRegister) != 0)\n        printf(\"OIL_PRESSURE \");\n    if ((POWER_FAILURE & ledRegister) != 0)\n        printf(\"POWER_FAILURE \");\n    if ((POSITION_FAULT & ledRegister) != 0)\n        printf(\"POSITION_FAULT \");\n    if ((AIR_PRESSURE & ledRegister) != 0)\n        printf(\"AIR_PRESSURE \");\n    if ((CLEAN_FILTER & ledRegister) != 0)\n        printf(\"CLEAN_FILTER \");\n    printf(\"\\n\");\n}\n\nint main()\n{\n    uint8_t ledRegister = 0x00;         // Start with all off.\n\n    printLED(ledRegister);\n\n    // Power went out.\n ledRegister |= POWER_FAILURE | MASTER_FAIL;\n    printLED(ledRegister);\n\n    // Now the air went out.\n    ledRegister |= AIR_PRESSURE;\n    printLED(ledRegister);\n\n    // Power back, air out, so master is on.\n    ledRegister &= ~POWER_FAILURE;\n    printLED(ledRegister);\n    return (0);\n}\n```", "```\nif ((MASTER_FAIL & ledRegister) != 0)\n    printf(\"MASTER_FAIL \");\n```", "```\n 1000 0000 (MASTER_FAIL)\n& 1000 0001 (ledRegister with MASTER_FAIL and CLEAN_FILTER set)\n  ---------\n= 1000 0000 (Since this is not zero, print \"MASTER FAIL\")\n```", "```\nLeds: MASTER_FAIL POWER_FAILURE\n```", "```\nLeds:\nLeds: MASTER_FAIL POWER_FAILURE\nLeds: MASTER_FAIL POWER_FAILURE AIR_PRESSURE\nLeds: MASTER_FAIL AIR_PRESSURE\n```", "```\n    +----+----+----+----++----+----+----+----+\n    |  7 |  6 |  5 |  4 ||  3 .  2 |  1 .  0 |\n    | IE | TE | RD | BR || Parity  | X Bits  |\n    +----+----+----+----++----+----+----+----+\n    ```"]