- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Unsafe Code
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 不安全代码
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: The mere mention of unsafe code often elicits strong responses from many in
    the Rust community, and from many of those watching Rust from the sidelines. While
    some maintain it’s “no big deal,” others decry it as “the reason all of Rust’s
    promises are a lie.” In this chapter, I hope to pull back the curtain a bit to
    explain what `unsafe` is, what it isn’t, and how you should go about using it
    safely. At the time of writing, and likely also when you read this, Rust’s precise
    requirements for unsafe code are still being determined, and even if they were
    all nailed down, the complete description would be beyond the scope of this book.
    Instead, I’ll do my best to arm you with the building blocks, intuition, and tooling
    you’ll need to navigate your way through most unsafe code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅提到不安全代码，常常会引发 Rust 社区以及许多旁观者的强烈反应。有些人认为这“没什么大不了”，而另一些人则谴责它为“Rust 所有承诺的谎言”。在本章中，我希望揭开一些谜团，解释什么是
    `unsafe`，什么不是，以及如何安全地使用它。在写这本书时，也可能是你阅读时，Rust 对不安全代码的具体要求仍在确定中，即使它们都被敲定下来，完整的描述也超出了本书的范围。相反，我会尽力为你提供构建模块、直觉和工具，以帮助你顺利应对大多数不安全代码。
- en: 'Your main takeaway from this chapter should be this: unsafe code is the mechanism
    Rust gives developers for taking advantage of invariants that, for whatever reason,
    the compiler cannot check. We’ll look at the ways in which `unsafe` does that,
    what those invariants may be, and what we can do with it as a result.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要收获应该是：不安全代码是 Rust 提供给开发者的机制，目的是利用那些编译器无法检查的不可变性，无论其原因是什么。我们将讨论 `unsafe`
    如何实现这一点，这些不可变性可能是什么，以及我们因此可以做些什么。
- en: Crucially, unsafe code is not a way to skirt the various rules of Rust, like
    borrow checking, but rather a way to enforce those rules using reasoning that
    is beyond the compiler. When you write unsafe code, the onus is on you to ensure
    that the resulting code is safe. In a way, `unsafe` is misleading as a keyword
    when it is used to allow unsafe operations through `unsafe {}`; it’s not that
    the contained code *is* unsafe, it’s that the code is allowed to perform otherwise
    unsafe operations because in this particular context, those operations *are* safe.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是，不安全代码不是绕过 Rust 各种规则（如借用检查）的方式，而是通过超越编译器的推理来执行这些规则。当你编写不安全代码时，责任在你，确保生成的代码是安全的。从某种意义上说，`unsafe`
    作为关键字在允许通过 `unsafe {}` 执行不安全操作时具有误导性；它并不是说包含的代码 *是* 不安全的，而是说在这个特定的上下文中，代码被允许执行本应不安全的操作，因为这些操作
    *是* 安全的。
- en: The rest of this chapter is split into four sections. We’ll start with a brief
    examination of how the keyword itself is used, then explore what `unsafe` allows
    you to do. Next, we’ll look at the rules you must follow in order to write safe
    unsafe code. Finally, I’ll give you some advice about how to actually go about
    writing unsafe code safely.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的其余部分分为四个部分。我们将首先简要讨论关键字的使用方式，然后探索 `unsafe` 允许你做的事情。接下来，我们将看看你在编写安全的不安全代码时必须遵循的规则。最后，我会给你一些关于如何安全地编写不安全代码的建议。
- en: The unsafe Keyword
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不安全关键字
- en: 'Before we discuss the powers that `unsafe` grants you, we need to talk about
    its two different meanings. The `unsafe` keyword serves a dual purpose in Rust:
    it marks a particular function as unsafe to call *and* it enables you to invoke
    unsafe functionality in a particular code block. For example, the method in [Listing
    9-1](#listing9-1) is marked as unsafe, even though it contains no unsafe code.
    Here, the `unsafe` keyword serves as a warning to the caller that there are additional
    guarantees that someone who writes code that invokes `decr` must manually check.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论 `unsafe` 授予你的能力之前，我们需要先谈谈它的两种不同含义。`unsafe` 关键字在 Rust 中有双重作用：它将特定函数标记为不安全调用
    *并且* 它使你能够在特定代码块中调用不安全的功能。例如，[列表 9-1](#listing9-1) 中的方法被标记为不安全，尽管它不包含任何不安全代码。在这里，`unsafe`
    关键字作为警告，提醒调用者，在调用 `decr` 的代码中，必须手动检查额外的保证。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 9-1: An unsafe method that contains only safe code'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 9-1：仅包含安全代码的不安全方法
- en: '[Listing 9-2](#listing9-2) illustrates the second usage. Here, the method itself
    is not marked as unsafe, even though it contains unsafe code.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 9-2](#listing9-2) 展示了第二种用法。在这里，方法本身没有标记为不安全，尽管它包含不安全的代码。'
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 9-2: A safe method that contains unsafe code'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 9-2：包含不安全代码的安全方法
- en: These two listings differ in their use of `unsafe` because they embody different
    contracts. `decr` requires the caller to be careful when they call the method,
    whereas `as_ref` assumes that the caller *was* careful when invoking other unsafe
    methods (like `decr`). To see why, imagine that `SomeType` is really a reference-counted
    type like `Rc`. Even though `decr` only decrements a number, that decrement may
    in turn trigger undefined behavior through the safe method `as_ref`. If you call
    `decr` and then drop the second-to-last `Rc` of a given `T`, the reference count
    drops to zero and the `T` will be dropped—but the program might still call `as_ref`
    on the last `Rc`, and end up with a dangling reference.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个示例在`unsafe`的使用上有所不同，因为它们代表了不同的契约。`decr`要求调用者在调用该方法时小心，而`as_ref`则假设调用者在调用其他不安全方法（如`decr`）时*已经*小心。为了理解原因，假设`SomeType`实际上是一个引用计数类型，如`Rc`。即使`decr`只是递减一个数字，这个递减可能会通过安全方法`as_ref`触发未定义行为。如果你调用`decr`，然后丢弃某个`T`的倒数第二个`Rc`，引用计数降为零，`T`将被丢弃——但是程序可能仍然会在最后一个`Rc`上调用`as_ref`，最终导致悬挂引用。
- en: Conversely, as long as there is no way to corrupt the `Rc` reference count using
    safe code, it is always safe to dereference the pointer inside the `Rc` the way
    the code for `as_ref` does—the fact that `&self` exists is proof that the pointer
    must still be valid. We can use this to give the caller a safe API to an otherwise
    unsafe operation, which is a core piece of how to use `unsafe` responsibly.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，只要没有方法通过安全代码破坏`Rc`的引用计数，就可以像`as_ref`中的代码那样安全地解引用`Rc`中的指针——`&self`的存在证明了指针仍然有效。我们可以利用这一点为调用者提供一个安全的API，进行一个本来不安全的操作，这是如何负责任地使用`unsafe`的核心内容。
- en: For historical reasons, every `unsafe fn` contains an implicit unsafe block
    in Rust today. That is, if you declare an `unsafe fn`, you can always invoke any
    unsafe methods or primitive operations inside that `fn`. However, that decision
    is now considered a mistake, and it’s currently being reverted through the already
    accepted and implemented RFC 2585\. This RFC warns about having an `unsafe fn`
    that performs unsafe operations without an explicit unsafe block inside it. The
    lint will also likely become a hard error in future editions of Rust. The idea
    is to reduce the “footgun radius”—if every `unsafe fn` is one giant unsafe block,
    then you might accidentally perform unsafe operations without realizing it! For
    example, in `decr` in [Listing 9-1](#listing9-1), under the current rules you
    could also have added `*std::ptr::null()` without any `unsafe` annotation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 出于历史原因，今天每个`unsafe fn`在Rust中都包含一个隐式的不安全块。也就是说，如果你声明一个`unsafe fn`，你可以在这个`fn`中调用任何不安全方法或原始操作。然而，这个决定现在被认为是一个错误，并且正在通过已经接受并实施的RFC
    2585来撤销。该RFC警告在没有显式`unsafe`块的情况下执行不安全操作的`unsafe fn`。这个lint也很可能在未来的Rust版本中成为一个硬错误。其理念是减少“脚枪半径”——如果每个`unsafe
    fn`都是一个巨大的不安全块，你可能会不小心执行不安全操作而没有意识到！例如，在[示例 9-1](#listing9-1)中的`decr`，根据当前规则，你也可以在没有任何`unsafe`注解的情况下加入`*std::ptr::null()`。
- en: The distinction between `unsafe` as a marker and unsafe blocks as a mechanism
    to enable unsafe operations is important, because you must think about them differently.
    An `unsafe fn` indicates to the caller that they have to be careful when calling
    the `fn` in question and that they must ensure that the function’s documented
    safety invariants hold.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`unsafe`作为标记与不安全块作为启用不安全操作的机制之间的区别非常重要，因为你必须以不同的方式思考它们。一个`unsafe fn`告诉调用者，在调用该`fn`时必须小心，并且他们必须确保该函数的文档化安全不变量成立。'
- en: Meanwhile, an unsafe block implies that whoever wrote that block carefully checked
    that the safety invariants for any unsafe operations performed inside it hold.
    If you want an approximate real-world analogy, `unsafe fn` is an unsigned contract
    that asks the author of calling code to “solemnly swear X, Y, and Z.” Meanwhile,
    `unsafe {}` is the calling code’s author signing off on all the unsafe contracts
    contained within the block. Keep that in mind as we go through the rest of this
    chapter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，一个`unsafe`块意味着编写该块的开发者已经仔细检查过其中执行的任何不安全操作的安全不变量。如果你想要一个大致的现实世界类比，`unsafe
    fn`就像是一个未签署的合同，它要求调用代码的作者“郑重承诺X、Y和Z。”与此同时，`unsafe {}`则是调用代码的作者在签署块中所有不安全合同时的同意。记住这一点，在我们继续阅读本章的内容时。
- en: Great Power
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 强大之力
- en: So, once you sign the unsafe contract with `unsafe {}`, what are you allowed
    to do? Honestly, not that much. Or rather, it doesn’t enable that many new features.
    Inside an unsafe block, you are allowed to dereference raw pointers and call `unsafe
    fn`s.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，一旦你签署了`unsafe {}`的“不安全合同”，你可以做什么呢？老实说，并没有太多。或者说，它并没有启用太多新功能。在`unsafe`块内部，你被允许解引用原始指针并调用`unsafe
    fn`。
- en: That’s it. Technically, there are a few other things you can do, like accessing
    mutable and external static variables and accessing fields of unions, but those
    don’t change the discussion much. And honestly, that’s enough. Together, these
    powers allow you to wreak all sorts of havoc, like turning types into one another
    with `mem::transmute`, dereferencing raw pointers that point to who knows where,
    casting `&'a` to `&'static`, or making types shareable across thread boundaries
    even though they’re not thread-safe.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。技术上来说，你可以做一些其他事情，比如访问可变的和外部静态变量，访问联合体的字段，但这些并不会对讨论产生太大影响。老实说，这些就够了。总的来说，这些能力使你能够制造各种混乱，比如通过`mem::transmute`将类型互相转换，解引用指向不知道在哪里的原始指针，将`&'a`转换为`&'static`，或者让类型在跨线程边界共享，即使它们本身不是线程安全的。
- en: In this section, we won’t worry too much about what can go wrong with these
    powers. We’ll leave that for the boring, responsible, grown-up section that comes
    after. Instead, we’ll look at these neat shiny new toys and what we can do with
    them.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，我们不会过多担心这些能力可能会出错的情况。我们会把这些留到后面那部分沉闷、负责任的大人部分去讨论。相反，我们将看看这些闪亮的新玩具，以及我们能用它们做些什么。
- en: Juggling Raw Pointers
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理原始指针
- en: 'One of the most fundamental reasons to use `unsafe` is to deal with Rust’s
    raw pointer types: `*const T` and `*mut T`. You should think of these as more
    or less analogous to `&T` and `&mut T`, except that they don’t have lifetimes
    and are not subject to the same validity rules as their `&` counterparts, which
    we’ll discuss later in the chapter. These types are interchangeably referred to
    as *pointers* and *raw pointers*,mostly because many developers instinctively
    refer to references as pointers, and calling them raw pointers makes the distinction
    clearer.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`unsafe`的一个最基本的原因是处理Rust的原始指针类型：`*const T`和`*mut T`。你可以把它们看作是与`&T`和`&mut T`大致相当，只是它们没有生命周期，且不像`&`引用那样受相同的有效性规则约束，我们将在本章稍后讨论这些规则。这些类型通常被称为*指针*和*原始指针*，主要是因为许多开发者本能地将引用称为指针，而将它们称为原始指针可以让这个区别更加清晰。
- en: Since fewer rules apply to `*` than `&`, you can cast a reference to a pointer
    even outside an unsafe block. Only if you want to go the other way, from `*` to
    `&`, do you need `unsafe`. You’ll generally turn a pointer back into a reference
    to do useful things with the pointed-to data, such as reading or modifying its
    value. For that reason, a common operation to use on pointers is `unsafe { &*ptr
    }` (or `&mut *`). The `*` there may look strange as the code is just constructing
    a reference, not dereferencing the pointer, but it makes sense if you look at
    the types; if you have a `*mut T` and want a `&mut T`, then `&mut ptr` would just
    give you a `&mut *mut T`. You need the `*` to indicate that you want the mutable
    reference to what `ptr` is a pointer *to*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于适用于`*`的规则比`&`少，你可以在`unsafe`块外将引用转换为指针。只有当你想反过来做，从`*`转换为`&`时，才需要使用`unsafe`。通常，你会将指针转回引用，以便对指向的数据执行有用的操作，例如读取或修改其值。因此，指针上常用的操作是`unsafe
    { &*ptr }`（或`&mut *`）。这里的`*`可能看起来有些奇怪，因为代码只是构造一个引用，而不是解引用指针，但如果你看一下类型就能明白；如果你有一个`*mut
    T`，并且想要得到一个`&mut T`，那么`&mut ptr`只会给你一个`&mut *mut T`。你需要`*`来表明你想要`ptr`所指向内容的可变引用。
- en: Unrepresentable Lifetimes
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 无法表示的生命周期
- en: As raw pointers do not have lifetimes, they can be used in circumstances where
    the liveness of the value being pointed to cannot be expressed statically within
    Rust’s lifetime system, such as a self-pointer in a self-referential struct like
    the generators we discussed in Chapter 8. A pointer that points into `self` is
    valid for as long as `self` is around (and doesn’t move, which is what `Pin` is
    for), but that isn’t a lifetime you can generally name. And while the entire self-referential
    type may be `'static`, the self-pointer isn’t—if it were static, then even if
    you gave away that pointer to someone else, they could continue to use it forever,
    even after `self` was gone! Take the type in [Listing 9-3](#listing9-3) as an
    example; here we attempt to store the raw bytes that make up a value alongside
    its stored representation.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于原始指针没有生命周期，它们可以在Rust的生命周期系统无法静态表示所指向值的存活性的情况下使用，例如我们在第8章讨论的自引用结构体中的自指针。指向`self`的指针只要`self`还存在（并且没有移动，`Pin`正是为了这个目的），就一直有效，但这不是你通常可以命名的生命周期。虽然整个自引用类型可能是`'static`，但自指针却不是——如果它是静态的，即使你把指针交给别人，他们也能一直使用它，即使`self`已经不存在了！以[列表
    9-3](#listing9-3)中的类型为例；在这里，我们尝试将构成一个值的原始字节与它的存储表示一起存储。
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 9-3: Trying, and failing, to name the lifetime of a self-referential
    reference'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 9-3：尝试命名自引用引用的生命周期，但失败了
- en: The reference inside `Person` wants to refer to data stored in `bytes` in `Parsed`,
    but there is no lifetime we can assign to that reference from `Parsed`. It’s not
    `'static` or something like `'self` (which doesn’t exist), because if `Parsed`
    is moved, the reference is no longer valid.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`Person`中的引用想要引用存储在`Parsed`中的`bytes`数据，但我们无法为这个引用指定生命周期。它既不是`''static`，也不是类似`''self`（不存在）的东西，因为如果`Parsed`被移动，该引用将不再有效。'
- en: Since pointers do not have lifetimes, they circumvent this problem because you
    don’t have to be able to name the lifetime. Instead, you just have to make sure
    that when you do use the pointer, it’s still valid, which is what you sign off
    on when you write `unsafe { &*ptr }`. In the example in [Listing 9-3](#listing9-3),
    `Person` would instead store a `*const str` and then unsafely turn that into a
    `&str` at the appropriate times when it can guarantee that the pointer is still
    valid.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于指针没有生命周期，它们避免了这个问题，因为你不需要能够命名生命周期。相反，你只需要确保在使用指针时，它仍然有效，这就是你在编写`unsafe { &*ptr
    }`时所签署的内容。在[列表 9-3](#listing9-3)中的示例中，`Person`将存储一个`*const str`，然后在合适的时候不安全地将其转换为`&str`，当它能保证指针仍然有效时。
- en: A similar issue arises with a type like `Arc`, which has a pointer to a value
    that’s shared for some duration, but that duration is known only at runtime when
    the last `Arc` is dropped. The pointer is kind-of, sort-of `'static`, but not
    really—like in the self-referential case, the pointer is no longer valid when
    the last `Arc` reference goes away, so the lifetime is more like `'self`. In `Arc`’s
    cousin, `Weak`, the lifetime is also “when the last `Arc` goes away,” but since
    a `Weak` isn’t an `Arc`, the lifetime isn’t even tied to `self`. So, `Arc` and
    `Weak` both use raw pointers internally.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的问题出现在像`Arc`这样的类型中，它包含一个指向某个值的指针，该值在某段时间内是共享的，但这段时间只有在运行时才能知道，当最后一个`Arc`被释放时。这个指针有点像是`'static`，但实际上不是——就像在自引用的情况中，当最后一个`Arc`引用消失时，指针就不再有效，因此生命周期更像是`'self`。在`Arc`的兄弟类型`Weak`中，生命周期也是“当最后一个`Arc`消失时”，但由于`Weak`不是`Arc`，所以生命周期甚至不与`self`相关。因此，`Arc`和`Weak`内部都使用原始指针。
- en: Pointer Arithmetic
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 指针运算
- en: With raw pointers, you can do arbitrary pointer arithmetic, just like you can
    in C, by using `.offset()`, `.add()`, and `.sub()` to move the pointer to any
    byte that lives within the same allocation. This is most often used in highly
    space-optimized data structures, like hash tables, where storing an extra pointer
    for each element would add too much overhead and using slices isn’t possible.
    Those are fairly niche use cases, and we won’t be talking more about them in this
    book, but I encourage you to read the code for `hashbrown::RawTable` ([https://github.com/rust-lang/hashbrown/](https://github.com/rust-lang/hashbrown/))
    if you want to learn more!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用原始指针，你可以进行任意的指针运算，就像在C语言中一样，使用`.offset()`、`.add()`和`.sub()`将指针移动到同一分配中的任何字节。这通常用于高度优化空间的数据结构，比如哈希表，在这些结构中，为每个元素存储一个额外的指针会增加太多开销，而使用切片又不可行。这些是相对小众的用例，我们在本书中不会深入讨论，但如果你想了解更多，可以阅读`hashbrown::RawTable`的代码（[https://github.com/rust-lang/hashbrown/](https://github.com/rust-lang/hashbrown/)）。
- en: The pointer arithmetic methods are unsafe to call even if you don’t want to
    turn the pointer into a reference afterwards. There are a couple of reasons for
    this, but the main one is that it is illegal to make a pointer point beyond the
    end of the allocation that it originally pointed to. Doing so triggers undefined
    behavior, and the compiler is allowed to decide to eat your code and replace it
    with arbitrary nonsense that only a compiler could understand. If you do use these
    methods, read the documentation carefully!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你不打算将指针转换为引用，指针算术方法也是不安全的。造成这种情况的原因有几个，但最主要的是，指针指向原始分配末尾之外的地方是非法的。这样做会触发未定义行为，编译器可以决定吞掉你的代码，并将其替换为只有编译器能理解的任意胡话。如果你确实使用这些方法，请仔细阅读文档！
- en: To Pointer and Back Again
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 到指针再回
- en: Often when you need to use pointers, it’s because you have some normal Rust
    type, like a reference, a slice, or a string, and you have to move to the world
    of pointers for a bit and then go back to the original normal type. Some of the
    key standard library types therefore provide you with a way to turn them into
    their raw constituent parts, such as a pointer and a length for a slice, and a
    way to turn them back into the whole using those same parts. For example, you
    can get a slice’s data pointer with `as_ptr` and its length with `[]::len`. You
    can then reconstruct the slice by providing those same values to `std::slice::from_raw_parts`.
    `Vec`, `Arc`, and `String` have similar methods that return a raw pointer to the
    underlying allocation, and `Box` has `Box::into_raw` and `Box::from_raw`, which
    do the same thing.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要使用指针时，通常是因为你有某个普通的 Rust 类型，比如引用、切片或字符串，然后你需要暂时转到指针的世界，然后再返回到原始的普通类型。因此，一些关键的标准库类型为你提供了一种方法，将它们转换为原始组成部分，例如切片的指针和长度，并通过这些相同的部分将其转换回完整的类型。例如，你可以通过
    `as_ptr` 获取切片的数据指针，通过 `[]::len` 获取它的长度。然后，你可以通过将这些相同的值传递给 `std::slice::from_raw_parts`
    来重建切片。`Vec`、`Arc` 和 `String` 也有类似的方法，它们返回指向底层分配的原始指针，而 `Box` 则有 `Box::into_raw`
    和 `Box::from_raw`，它们执行相同的操作。
- en: Playing Fast and Loose with Types
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 对类型的自由操作
- en: Sometimes, you have a type `T` and want to treat it as some other type `U`.
    Whether that’s because you need to do lightning-fast zero-copy parsing or because
    you need to fiddle with some lifetimes, Rust provides you with some (very unsafe)
    tools to do so.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你有一个类型 `T`，并希望将其视为另一个类型 `U`。无论是因为你需要进行极速的零拷贝解析，还是因为你需要调整某些生命周期，Rust 提供了一些（非常不安全的）工具来实现这一点。
- en: 'The first and by far most widely used of these is pointer casting: you can
    cast a `*const T` to any other `*const U` (and the same for `mut`), and you don’t
    even need `unsafe` to do it. The unsafety comes into play only when you later
    try to use the cast pointer as a reference, as you have to assert that the raw
    pointer can in fact be used as a reference to the type it’s pointing to.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 其中最常用的指针转换是：你可以将 `*const T` 转换为任何其他 `*const U`（`mut` 同理），而且你甚至不需要使用 `unsafe`。不安全性只在你之后尝试将转换后的指针作为引用使用时出现，因为你必须断言该原始指针实际上可以作为它所指向类型的引用来使用。
- en: This kind of pointer type casting comes in particularly handy when working with
    foreign function interfaces (FFI)—you can cast any Rust pointer to a `*const std::ffi::c_void`
    or `*mut std::ffi::c_void`, and then pass that to a C function that expects a
    void pointer. Similarly, if you get a void pointer from C that you previously
    passed in, you can trivially cast it back into its original type.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这种指针类型转换在处理外部函数接口（FFI）时特别有用——你可以将任何 Rust 指针转换为 `*const std::ffi::c_void` 或 `*mut
    std::ffi::c_void`，然后将其传递给一个期望空指针的 C 函数。类似地，如果你从 C 函数那里获得一个你之前传入的空指针，你可以轻松地将其转换回原来的类型。
- en: Pointer casts are also useful when you want to interpret a sequence of bytes
    as plain old data—types like integers, Booleans, characters, and arrays, or `#[repr(C)]`
    structs of these—or write such types directly out as a byte stream without serialization.
    There are a lot of safety invariants to keep in mind if you want to try to do
    that, but we’ll leave that for later.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 指针转换在你希望将一串字节解释为普通数据时也非常有用——例如整数、布尔值、字符、数组，或这些类型的 `#[repr(C)]` 结构体——或者直接将这些类型以字节流的形式写出，而不进行序列化。如果你想尝试这样做，有很多安全不变量需要记住，但我们稍后再讨论这些。
- en: Calling Unsafe Functions
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用不安全函数
- en: Arguably `unsafe`’s most commonly used feature is that it enables you to call
    unsafe functions. Deeper down the stack, most of those functions are unsafe because
    they operate on raw pointers at some fundamental level, but higher up the stack
    you tend to interact with unsafety primarily through function calls.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 可以说，`unsafe` 最常用的特性是它允许你调用不安全函数。在栈的更深处，这些函数大多数是不安全的，因为它们在某些基本层面上操作原始指针，但在栈的更高层，你通常通过函数调用与不安全性进行交互。
- en: 'There’s really no limit to what calling an unsafe function might enable, as
    it is entirely up to the libraries you interact with. But *in general*, unsafe
    functions can be divided into three camps: those that interact with non-Rust interfaces,
    those that skip safety checks, and those that have custom invariants.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 调用不安全函数的结果没有限制，因为它完全取决于你交互的库。但是，*一般来说*，不安全函数可以分为三类：与非 Rust 接口交互的、不进行安全检查的以及具有自定义不变式的。
- en: Foreign Function Interfaces
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 外部函数接口
- en: Rust lets you declare functions and static variables that are defined in a language
    other than Rust using `extern` blocks (which we’ll discuss at length in Chapter
    11). When you declare such a block, you’re telling Rust that the items appearing
    within it will be implemented by some external source when the final program binary
    is linked, such as a C library you are integrating with. Since `extern`s exist
    outside of Rust’s control, they are inherently unsafe to access. If you call a
    C function from Rust, all bets are off—it might overwrite your entire memory contents
    and clobber all your neatly arranged references into random pointers into the
    kernel somewhere. Similarly, an `extern` static variable could be modified by
    external code at any time, and could be filled with all sorts of bad bytes that
    don’t reflect its declared type at all. In an unsafe block, though, you can access
    `extern`s to your heart’s delight, as long as you’re willing to vouch for the
    other side of the extern behaving according to Rust’s rules.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 允许你使用 `extern` 块声明在 Rust 以外的语言中定义的函数和静态变量（我们将在第11章详细讨论）。当你声明这样的块时，你是在告诉
    Rust，这些在其中出现的项将在最终程序二进制文件链接时由某个外部源实现，例如你正在集成的 C 库。由于 `extern` 是 Rust 控制之外的，它们在访问时本质上是不安全的。如果你从
    Rust 调用 C 函数，所有的保证都不成立——它可能会覆盖你整个内存内容，并将你精心安排的引用弄乱，变成指向内核某处的随机指针。类似地，`extern`
    静态变量可能随时被外部代码修改，甚至可能被填充上与其声明类型完全不符的各种无效字节。不过，在不安全块中，只要你愿意担保外部代码遵守 Rust 的规则，你就可以随心所欲地访问
    `extern`。
- en: I’ll Pass on Safety Checks
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 我放弃安全检查
- en: Some unsafe operations can be made entirely safe by introducing additional runtime
    checks. For example, accessing an item in a slice is unsafe since you might try
    to access an item beyond the length of the slice. But, given how common the operation
    is, it’d be unfortunate if indexing into a slice was unsafe. Instead, the safe
    implementation includes bounds checks that (depending on the method you use) either
    panic or return an `Option` if the index you provide is out of bounds. That way,
    there is no way to cause undefined behavior even if you pass in an index beyond
    the slice’s length. Another example is in hash tables, which hash the key you
    provide rather than letting you provide the hash yourself; this ensures that you’ll
    never try to access a key using the wrong hash.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一些不安全操作可以通过引入额外的运行时检查变得完全安全。例如，访问切片中的项是危险的，因为你可能会尝试访问超出切片长度的项。但是，鉴于这种操作的普遍性，如果切片的索引操作是危险的，那将是非常不幸的。因此，安全的实现包括边界检查（取决于你使用的方法），如果提供的索引超出范围，它会导致程序崩溃或返回一个
    `Option`。这样，即使你传入一个超出切片长度的索引，也不会导致未定义行为。另一个例子是在哈希表中，哈希表对你提供的键进行哈希，而不是让你自己提供哈希值；这确保了你永远不会使用错误的哈希值去访问某个键。
- en: However, in the endless pursuit of ultimate performance, some developers may
    find these safety checks add just a little too much overhead in their tightest
    loops. To cater to situations where peak performance is paramount and the caller
    knows that the indexes are in bounds, many data structures provide alternate versions
    of particular methods without these safety checks. Such methods usually include
    the word `unchecked` in the name to indicate that they blindly trust the provided
    arguments to be safe and that they do not do any of those pesky, slow safety checks.
    Some examples are `NonNull::new_unchecked`, `slice::get_unchecked`, `NonZero::new_unchecked`,
    `Arc::get_mut_unchecked`, and `str::from_utf8_unchecked`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在追求极致性能的过程中，一些开发者可能会发现这些安全检查在他们的紧密循环中增加了过多的开销。为了应对对性能要求极高且调用者知道索引在有效范围内的情况，许多数据结构提供了不包含这些安全检查的特定方法版本。这些方法通常在名称中包含
    `unchecked` 这个词，以表明它们盲目地信任所提供的参数是安全的，并且不执行那些烦人的、缓慢的安全检查。一些例子包括 `NonNull::new_unchecked`、`slice::get_unchecked`、`NonZero::new_unchecked`、`Arc::get_mut_unchecked`
    和 `str::from_utf8_unchecked`。
- en: In practice, the safety and performance trade-off forunchecked methods is rarely
    worth it. As always with performance optimization, measure first, then optimize.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，对于不安全方法的安全性和性能权衡，通常是无法值得的。和性能优化一样，先进行测量，再进行优化。
- en: Custom Invariants
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 自定义不变量
- en: 'Most uses of `unsafe` rely on custom invariants to some degree. That is, they
    rely on invariants beyond those provided by Rust itself, which are specific to
    the particular application or library. Since so many functions fall into this
    category, it’s hard to give a good general summary of this class of unsafe functions.
    Instead, I’ll give some examples of unsafe functions with custom invariants that
    you may come across in practice and want to use:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 `unsafe` 的使用都在一定程度上依赖于自定义不变量。也就是说，它们依赖于 Rust 本身所提供的不变量之外的约定，这些约定是特定于特定应用程序或库的。由于有许多函数属于这一类，因此很难给出一个好的概述。不过，我将举一些可能在实践中遇到并希望使用的带有自定义不变量的
    `unsafe` 函数的例子：
- en: '**`MaybeUninit::assume_init`**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**`MaybeUninit::assume_init`**'
- en: The `MaybeUninit` type is one of the few ways in which you can store values
    that are not valid for their type in Rust. You can think of a `MaybeUninit<T>`
    as a `T` that may not be legal to use as a `T` at the moment. For example, a `MaybeUninit<NonNull>`
    is allowed to hold a null pointer, a `MaybeUninit<Box>` is allowed to hold a dangling
    heap pointer, and a ``MaybeUninit<bool> is allowed to hold the bit pattern for
    the number 3 (normally it must be 0 or 1). This comes in handy if you are constructing
    a value bit by bit or are dealing with zeroed or uninitialized memory that will
    eventually be made valid (such as by being filled through a call to `std::io::Read::read`).
    The `assume_init` function asserts that the `MaybeUninit` now holds a valid value
    for the type `T` and can therefore be used as a `T`.``
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MaybeUninit` 类型是 Rust 中少数几种可以存储不合法值的方式之一。你可以将 `MaybeUninit<T>` 看作是一个当前可能不合法使用的
    `T`。例如，`MaybeUninit<NonNull>` 允许存储一个空指针，`MaybeUninit<Box>` 允许存储一个悬空堆指针，而 `MaybeUninit<bool>`
    允许存储数字 3 的比特模式（通常它只能是 0 或 1）。这在你按位构建一个值或处理最终会变得合法的零值或未初始化内存时非常有用（比如通过调用 `std::io::Read::read`
    填充）。`assume_init` 函数断言 `MaybeUninit` 现在包含一个对类型 `T` 有效的值，因此可以作为 `T` 使用。'
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
