- en: '**16  nRF52 APPROTECT Glitch**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**16  nRF52 APPROTECT 漏洞**'
- en: 'Access Port Protection (APPROTECT) is nRF52’s replacement for the nRF51’s family’s
    MPU-based protection features that we saw in [Chapter 9](ch09.xhtml#ch09). It
    fixes the vulnerabilities of the older platform, providing a debugging interface
    to unlocked chips but a very limited interface to locked chips. On a locked chip,
    the debugger can do little except erase all of memory, unlocking the chip but
    destroying any secrets that might once have been in flash memory. A glitching
    attack against APPROTECT was first described in two articles: Results (2020a)
    and Results (2021b). The specific target of these papers was the nRF52840, but
    the entire family is expected to be vulnerable.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 访问端口保护（APPROTECT）是 nRF52 替代 nRF51 系列 MPU 基于保护功能的实现，这在[第9章](ch09.xhtml#ch09)中有介绍。它修复了旧平台的漏洞，为解锁芯片提供了调试接口，但对锁定芯片则提供了非常有限的接口。在锁定芯片上，调试器几乎无法做什么，除了擦除所有内存，解锁芯片，但同时摧毁了可能曾经存储在闪存中的任何机密数据。对
    APPROTECT 进行的 glitch 攻击首次在两篇文章中描述：Results（2020a）和 Results（2021b）。这些文章的具体目标是 nRF52840，但预计整个系列都会存在漏洞。
- en: Because these chips have no boot ROM, all peripherals are initialized in hardware
    after reset, including the protection features. By using simple power analysis
    on a scope to identify the time offset at which the memory controller *disables*
    APPROTECT on an unlocked chip at startup, he could then glitch at this moment
    to trick a locked chip into disabling protections as if it were unlocked.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些芯片没有引导 ROM，所有外设在复位后都会在硬件上初始化，包括保护功能。通过在示波器上使用简单的功耗分析，确定内存控制器在启动时*禁用*解锁芯片上的
    APPROTECT 的时间偏移，然后他可以在这一时刻进行 glitch 攻击，欺骗锁定芯片像解锁芯片一样禁用保护功能。
- en: With the popularity of Apple’s AirTags and a public pinout in O’Flynn (2021)
    ([Figure 16.1](ch16.xhtml#ch16fig1)), the nRF52 began to replace the LPC11 family
    as the most glitched microcontroller in literature. It’s been dumped as a video
    tutorial (Roth (2021)) and a glitcher built from an STM32 devkit (Melching (2021))
    appeared within days. Practice makes perfect, and my favorite glitcher for the
    nRF52 was published as 36 lines of Arduino ESP32 code in Christophel (2021) as
    a tweet!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 Apple AirTag 的流行，以及 O'Flynn（2021）中公开的引脚图（[图16.1](ch16.xhtml#ch16fig1)），nRF52
    开始取代 LPC11 系列，成为文献中最常被攻击的微控制器。它已经作为视频教程发布（Roth（2021）），而由 STM32 开发板制作的 glitcher（Melching（2021））几天内就出现了。实践出真知，我最喜欢的
    nRF52 glitcher 是作为 36 行 Arduino ESP32 代码在 Christophel（2021）中发布的，并且以推文形式发布！
- en: '![Image](../images/f0158-01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0158-01.jpg)'
- en: 'Figure 16.1: Apple AirTag Testpoints from O’Flynn (2021)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.1：O'Flynn（2021）提供的 Apple AirTag 测试点
- en: '![Image](../images/f0159-01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0159-01.jpg)'
- en: 'Figure 16.2: Nordic nRF52840'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.2：Nordic nRF52840
- en: '![Image](../images/f0160-01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0160-01.jpg)'
- en: 'Figure 16.3: A nRF52 Glitcher in a Tweet'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.3：Twitter 上的 nRF52 Glitcher
