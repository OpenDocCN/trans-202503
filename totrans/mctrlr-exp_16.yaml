- en: '**16  nRF52 APPROTECT Glitch**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Access Port Protection (APPROTECT) is nRF52’s replacement for the nRF51’s family’s
    MPU-based protection features that we saw in [Chapter 9](ch09.xhtml#ch09). It
    fixes the vulnerabilities of the older platform, providing a debugging interface
    to unlocked chips but a very limited interface to locked chips. On a locked chip,
    the debugger can do little except erase all of memory, unlocking the chip but
    destroying any secrets that might once have been in flash memory. A glitching
    attack against APPROTECT was first described in two articles: Results (2020a)
    and Results (2021b). The specific target of these papers was the nRF52840, but
    the entire family is expected to be vulnerable.'
  prefs: []
  type: TYPE_NORMAL
- en: Because these chips have no boot ROM, all peripherals are initialized in hardware
    after reset, including the protection features. By using simple power analysis
    on a scope to identify the time offset at which the memory controller *disables*
    APPROTECT on an unlocked chip at startup, he could then glitch at this moment
    to trick a locked chip into disabling protections as if it were unlocked.
  prefs: []
  type: TYPE_NORMAL
- en: With the popularity of Apple’s AirTags and a public pinout in O’Flynn (2021)
    ([Figure 16.1](ch16.xhtml#ch16fig1)), the nRF52 began to replace the LPC11 family
    as the most glitched microcontroller in literature. It’s been dumped as a video
    tutorial (Roth (2021)) and a glitcher built from an STM32 devkit (Melching (2021))
    appeared within days. Practice makes perfect, and my favorite glitcher for the
    nRF52 was published as 36 lines of Arduino ESP32 code in Christophel (2021) as
    a tweet!
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0158-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.1: Apple AirTag Testpoints from O’Flynn (2021)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0159-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.2: Nordic nRF52840'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0160-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.3: A nRF52 Glitcher in a Tweet'
  prefs: []
  type: TYPE_NORMAL
