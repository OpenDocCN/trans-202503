["```\n**for** (**var** i=0, len=data.length; i<len; i++) {\n    *// Code continues...*\n}\n```", "```\n**var** fib = **function**(n) {\n    *// If 0th or 1st, just return n itself*\n    **if** (n < 2) **return** n;\n\n    *// Otherwise, initialize variable to compute result*\n    **var** f0=0, f1=1, f=1;\n\n    *// Iterate until we reach n*\n    **for** (i=2; i<=n; i++) {\n\n        *// At each iteration, slide the intermediate*\n        *// values down a step*\n        f0 = f1 = f;\n\n        *// And calculate sum for the next pass*\n        f = f0 + f1;\n    }\n\n    *// After all the iterations, return the result*\n    **return** f;\n}\n```", "```\n**for** (i=2; i<=n; i++) {\n```", "```\nf0 = f1 = f;\n```", "```\nf0 = f1;\nf1 = f;\n```", "```\n**for** (**var** i=2; i<n; i++) {\n```", "```\n**var** fib = **function**(n) { **return** n < 2 ? n : fib(n-1) + fib(n-2); }\n```", "```\n<!DOCTYPE html>\n**<html** lang=\"en\"**>**\n  **<head>**\n    **<meta** charset=\"utf-8\"**>**\n    **<title></title>**\n  **</head>**\n  **<body>**\n    *<!-- Content goes here -->*\n    **<script**\n      src=\"//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.4.4/\"+\n          \"underscore-min.js\"**>**\n    **</script>**\n  **</body>**\n**</html>**\n```", "```\n**var** fib = _( **function**(n) {\n        **return** n < 2 ? n : fib(n-1) + fib(n-2);\n    } ).memoize()\n```", "```\n**var** arr = [1,2,3,4,5,6,7,8,9];\n```", "```\n> _(arr).first()\n  1\n> _(arr).first(3)\n  [1, 2, 3]\n```", "```\n> _(arr).last()\n  9\n> _(arr).last(3)\n  [7, 8, 9]\n```", "```\n> _(arr).initial()\n  [1, 2, 3, 4, 5, 6, 7, 8]\n> _(arr).initial(3)\n  [1, 2, 3, 4, 5, 6]\n```", "```\n> _(arr).rest()\n  [2, 3, 4, 5, 6, 7, 8, 9]\n> _(arr).rest(3)\n  [4, 5, 6, 7, 8, 9]\n```", "```\n**var** fibs = [0, 1, 1, 2, 3, 5, 8];\n**var** even = [0, 2, 4, 6, 8];\n```", "```\n> _(fibs).union(even)\n  [0, 1, 2, 3, 5, 8, 4, 6]\n```", "```\n> _(fibs).intersection(even)\n  [0, 2, 8]\n```", "```\n> _(fibs).difference(even)\n  [1, 1, 3, 5]\n```", "```\n> _(fibs).uniq()\n  [0, 1, 2, 3, 5, 8]\n```", "```\n> **var** naturals = [1, 2, 3, 4, 5];\n> **var** primes = [2, 3, 5, 7, 11];\n> _.zip(naturals, primes)\n  [ [1,2], [2,3], [3,5], [4,7], [5,11] ]\n```", "```\n> **var** raw = [0, 1, **false**, 2, \"\", 3, **NaN**, 4, , 5, **null**];\n> _(raw).compact()\n  [1, 2, 3, 4, 5]\n```", "```\n> **var** raw = [1, 2, 3, [[4]], 5];\n> _(raw).flatten()\n  [1, 2, 3, 4, 5]\n```", "```\n> **var** raw = [1, 2, 3, [[4]], 5];\n> _(raw).flatten(**true**)\n  [1, 2, 3, [4], 5]\n```", "```\n> **var** raw = [1, 2, 3, 4];\n> _(raw).without(2, 3)\n  [1, 4]\n```", "```\n> **var** primes = [2, 3, 5, 7, 11];\n> _(primes).indexOf(5)\n  2\n```", "```\n> **var** arr = [2, 3, 5, 7, 11, 7, 5, 3, 2];\n> _(arr).indexOf(5, 4)\n  6\n```", "```\n> **var** arr = [2, 3, 5, 7, 11, 7, 5, 3, 2];\n> _(arr).lastIndexOf(5)\n  6\n```", "```\n> **var** arr = [2, 3, 5, 7, 11];\n> _(arr).sortedIndex(6)\n  3\n```", "```\n> _.range(10)\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n> _.range(20,10)\n  [20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n> _.range(0, 10, 100)\n  [0, 100, 200, 300, 400, 500, 600, 700, 800, 900]\n```", "```\n> **var** yvalues = [0.1277, 1.2803, 1.7697, 3.1882]\n> _.zip(_.range(yvalues.length),yvalues)\n  [ [0, 0.1277], [1, 1.2803], [2, 1.7697], [3, 3.1882] ]\n```", "```\n**var** pizza = {\n    size: 10,\n    crust: \"thin\",\n    cheese: **true**,\n    toppings: [ \"pepperoni\",\"sausage\"]\n};\n```", "```\n> _(pizza).keys()\n  [ \"size\", \"crust\", \"cheese\", \"toppings\"]]\n```", "```\n> _(pizza).values()\n  [10, \"thin\", **true**, [ \"pepperoni\",\"sausage\"]]\n```", "```\n> _(pizza).pairs()\n [\n   [ \"size\",10],\n   [ \"crust\",\"thin\"],\n   [ \"cheese\",**true**],\n   [ \"toppings\",[ \"pepperoni\",\"sausage\"]]\n ]\n```", "```\n> **var** arr = [ [ \"size\",10], [ \"crust\",\"thin\"], [ \"cheese\",**true**],\n            [ \"toppings\",[ \"pepperoni\",\"sausage\"]] ]\n> _(arr).object()\n  { size: 10, crust: \"thin\", cheese: **true**, toppings: [ \"pepperoni\",\"sausage\"]}\n```", "```\n> _(pizza).invert()\n  {10: \"size\", thin: \"crust\", true: \"cheese\", \"pepperoni,sausage\":\n\"toppings\"}\n```", "```\n> _(pizza).pick( \"size\",\"crust\")\n  {size: 10, crust: \"thin\"}\n```", "```\n> _(pizza).omit( \"size\",\"crust\")\n {cheese: **true**, toppings: [ \"pepperoni\",\"sausage\"]}\n```", "```\n> **var** standard = { size: 12, crust: \"regular\", cheese: **true** }\n> **var** order = { size: 10, crust: \"thin\",\n  toppings: [ \"pepperoni\",\"sausage\"] };\n> _.extend(standard, order)\n  { size: 10, crust: \"thin\", cheese: **true**,\n  toppings: [ \"pepperoni\",\"sausage\"] };\n```", "```\n> **var** order = { size: 10, crust: \"thin\",\n  toppings: [ \"pepperoni\",\"sausage\"] };\n> **var** standard = { size: 12, crust: \"regular\", cheese: **true** }\n> _.defaults(order, standard)\n  { size: 10, crust: \"thin\",\n  toppings [ \"pepperoni\",\"sausage\"], cheese: **true** };\n```", "```\n> **var** order = { size: 10, crust: \"thin\",\n  toppings: [ \"pepperoni\",\"sausage\"] };\n> **var** standard = { size: 12, crust: \"regular\", cheese: **true** }\n> **var** pizza = _.extend(standard, order)\n  { size: 10, crust: \"thin\", cheese: **true**,\n  toppings: [ \"pepperoni\",\"sausage\"] };\n```", "```\n> **var** order = { size: 10, crust: \"thin\",\n  toppings: [ \"pepperoni\",\"sausage\"] };\n> **var** standard = { size: 12, crust: \"regular\", cheese: **true** }\n> **var** pizza = _.extend({}, standard, order)\n  { size: 10, crust: \"thin\", cheese: **true**,\n  toppings: [ \"pepperoni\",\"sausage\"] };\n```", "```\n**var** national_league = [\n    { name: \"Arizona Diamondbacks\",  wins: 81, losses:  81,\n      division: \"west\" },\n    { name: \"Atlanta Braves\",        wins: 94, losses:  68,\n      division: \"east\" },\n    { name: \"Chicago Cubs\",          wins: 61, losses: 101,\n      division: \"central\" },\n    { name: \"Cincinnati Reds\",       wins: 97, losses:  65,\n      division: \"central\" },\n    { name: \"Colorado Rockies\",      wins: 64, losses:  98,\n      division: \"west\" },\n    { name: \"Houston Astros\",        wins: 55, losses: 107,\n      division: \"central\" },\n    { name: \"Los Angeles Dodgers\",   wins: 86, losses:  76,\n      division: \"west\" },\n    { name: \"Miami Marlins\",         wins: 69, losses:  93,\n      division: \"east\" },\n    { name: \"Milwaukee Brewers\",     wins: 83, losses:  79,\n      division: \"central\" },\n    { name: \"New York Mets\",         wins: 74, losses:  88,\n      division: \"east\" },\n    { name: \"Philadelphia Phillies\", wins: 81, losses:  81,\n      division: \"east\" },\n    { name: \"Pittsburgh Pirates\",    wins: 79, losses:  83,\n      division: \"central\" },\n    { name: \"San Diego Padres\",      wins: 76, losses:  86,\n      division: \"west\" },\n    { name: \"San Francisco Giants\",  wins: 94, losses:  68,\n      division: \"west\" },\n    { name: \"St. Louis Cardinals\",   wins: 88, losses:  74,\n      division: \"central\" },\n    { name: \"Washington Nationals\",  wins: 98, losses:  64,\n      division: \"east\" }\n];\n```", "```\n> _(national_league).each(**function**(team) { console.log(team.name); })\n  Arizona Diamondbacks\n  Atlanta Braves\n  *// Console output continues...*\n  Washington Nationals\n```", "```\n> _(national_league).map(**function**(team) {\n      **return** Math.round(100*team.wins/(team.wins + team.losses);\n  })\n  [50, 58, 38, 60, 40, 34, 53, 43, 51, 46, 50, 49, 47, 58, 54, 60]\n```", "```\n   > _(national_league).reduce(\n➊       **function**(count, team) {\n➋           **return** count + (team.wins > team.losses);\n         },\n➌       0 *// Starting point for reduced value*\n     )\n     7\n```", "```\n> _(national_league).find( **function**(team) { **return** team.wins > 90; })\n  { name: \"Atlanta Braves\", wins: 94, losses: 68, division: \"east\" }\n```", "```\n> _(national_league).filter( **function**(team) { **return** team.wins > 90; })\n  [ { name: \"Atlanta Braves\", wins: 94, losses: 68, division: \"east\" },\n    { name: \"Cincinnati Reds\", wins: 97, losses: 65, division: \"central\" },\n    { name: \"San Francisco Giants\", wins: 94, losses: 68, division: \"west\" },\n    { name: \"Washington Nationals\", wins: 98, losses: 64, division: \"east\" }\n  ]\n```", "```\n> _(national_league).reject( **function**(team) { **return** team.wins > 90; })\n  [ { name: \"Arizona Diamondbacks\", wins: 81, losses: 81, division: \"west\" },\n    { name: \"Chicago Cubs\", wins: 61, losses: 101, division: \"central\" },\n    *// Console output continues...*\n    { name: \"St. Louis Cardinals\", wins: 88, losses: 74, division: \"central\" }\n  ]\n```", "```\n> _(national_league).where({division: \"east\"})\n  [ { name: \"Atlanta Braves\", wins: 94, losses: 68, division: \"east\" },\n    { name: \"Miami Marlins\", wins: 69, losses: 93, division: \"east\" },\n    { name: \"New York Mets\", wins: 74, losses: 88, division: \"east\" },\n    { name: \"Philadelphia Phillies\", wins: 81, losses: 81, division: \"east\" },\n    { name: \"Washington Nationals\", wins: 98, losses: 64, division: \"east\" }\n  ]\n```", "```\n> _(national_league).where({name: \"Atlanta Braves\"})\n  {name: \"Atlanta Braves\", wins: 94, losses: 68, division: \"east\"}\n```", "```\n> _(national_league).pluck( \"team\")\n  [\n    \"Arizona Diamondbacks\",\n    \"Atlanta Braves\",\n   */* Data continues... */*,\n    \"Washington Nationals\"\n  ]\n```", "```\n> _(national_league).every(**function**(team) { **return** team.wins >= 70; })\n  **false**\n```", "```\n> _(national_league).any(**function**(team) { **return** team.wins >= 70; })\n  **true**\n```", "```\n> _(national_league).max(**function**(team) { **return** team.wins; })\n  { name: \"Washington Nationals\", wins: 98, losses: 64, division: \"east\" }\n```", "```\n> _(national_league).min(**function**(team) { **return** team.wins; })\n  { name: \"Houston Astros\", wins: 55, losses: 107, division: \"central\" }\n```", "```\n> _(national_league).sortBy(**function**(team) { **return** team.wins; })\n  [ { name: \"Houston Astros\", wins: 55, losses: 107, division: \"central\" }\n    { name: \"Chicago Cubs\", wins: 61, losses: 101, division: \"central\" },\n    *// Data continues...*\n    { name: \"Washington Nationals\", wins: 98, losses: 64, division: \"east\" }\n```", "```\n> _(national_league).groupBy( \"division\")\n  {\n    { west:\n      { name: \"Arizona Diamondbacks\", wins: 81, losses: 81, division: \"west\" },\n      { name: \"Colorado Rockies\", wins: 64, losses: 98, division: \"west\" },\n      { name: \"Los Angeles Dodgers\", wins: 86, losses: 76, division: \"west\" },\n      { name: \"San Diego Padres\", wins: 76, losses: 86, division: \"west\" },\n      { name: \"San Francisco Giants\", wins: 94, losses: 68, division: \"west\" },\n    },\n    { east:\n      { name: \"Atlanta Braves\", wins: 94, losses: 68, division: \"east\" },\n      { name: \"Miami Marlins\", wins: 69, losses: 93, division: \"east\" },\n      { name: \"New York Mets\", wins: 74, losses: 88, division: \"east\" },\n      { name: \"Philadelphia Phillies\", wins: 81, losses: 81,\n        division: \"east\" },\n      { name: \"Washington Nationals\", wins: 98, losses: 64, division: \"east\" }\n    },\n    { central:\n      { name: \"Chicago Cubs\", wins: 61, losses: 101, division: \"central\" },\n      { name: \"Cincinnati Reds\", wins: 97, losses: 65, division: \"central\" },\n      { name: \"Houston Astros\", wins: 55, losses: 107, division: \"central\" },\n      { name: \"Milwaukee Brewers\", wins: 83, losses: 79, division: \"central\" },\n      { name: \"Pittsburgh Pirates\", wins: 79, losses: 83,\n        division: \"central\" },\n      { name: \"St. Louis Cardinals\", wins: 88, losses: 74,\n        division: \"central\" },\n    }\n  }\n```", "```\n> _(national_league).countBy( \"division\")\n  {west: 5, east: 5, central: 6}\n```", "```\n_(national_league).shuffle()\n```"]