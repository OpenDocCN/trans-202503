- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unreliable UDP Communication
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: Although most networking applications take advantage of TCP’s reliability and
    flow control, the less popular User Datagram Protocol (UDP) is nonetheless an
    important part of the TCP/IP stack. UDP is a simple protocol with minimal features.
    Some applications do not require TCP’s feature set and session overhead. Those
    applications, like domain name resolution services, opt to use UDP instead.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: This chapter starts by comparing UDP to TCP, focusing on scenarios where UDP
    may be a better choice over TCP. Then, you’ll learn how to send and receive UDP
    packets in Go. Finally, you’ll learn why it’s best to limit the size of UDP packets
    you send across a network and how to determine an optimal packet size.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'Using UDP: Simple and Unreliable'
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: UDP is unreliable because it does not include many of the mechanisms that make
    TCP so trustworthy. It provides little more than a socket address (an IP address
    and port). In fact, the protocol is so simple that RFC 768 describes the entire
    thing in about three pages. Unlike TCP, UDP does not provide session support or
    even confirm that the destination is accessible; it simply makes a best-effort
    attempt to deliver the packet. Recipients do not automatically acknowledge UDP
    packets, so UDP has no inherent delivery confirmation. UDP does not manage congestion,
    control data flow, or retransmit packets. Lastly, UDP does not guarantee that
    the destination receives packets in the order they originate. UDP is simply a
    conduit between applications and the IP layer. This simplicity is what makes UDP
    fast and attractive for some applications.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: UDP has a few strengths over TCP. Whereas TCP must establish a session with
    each individual node in a group before it can transmit data, UDP can send a single
    packet to a group of nodes without duplicating the packet, a process known as
    *multicasting*. UDP is also capable of broadcasting packets to all members of
    a subnet since it doesn’t need to establish a session between each node.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: UDP is ideal when missing packets aren’t detrimental to overall communication
    because the most recently received packets can take the place of earlier, dropped
    packets. Weather data is a good example of this. If you’re tracking a tornado
    in your area by streaming weather data to your phone, you aren’t as concerned
    about dropped packets indicating the tornado’s location two minutes ago if you’ve
    received packets giving you the tornado’s current location.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: You should consider using UDP in your application if it doesn’t require all
    the features TCP provides. For most network applications, TCP is the right protocol
    choice. But UDP is an option if its speed and simplicity better fit your use case
    and the reliability trade-offs aren’t detrimental.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: UDP’s packet structure consists of an 8-byte header and a payload. The header
    contains 2 bytes for the source port, 2 bytes for the destination port, 2 bytes
    for the packet length in bytes, and a 2-byte checksum. The minimum packet length
    is 8 bytes to account for the header and an empty payload. [Figure 5-1](#figure5-1)
    illustrates the organization of a UDP packet.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: UDP的数据包结构包括一个8字节的头部和一个负载。头部包含2个字节表示源端口，2个字节表示目标端口，2个字节表示数据包长度（以字节为单位），以及2个字节的校验和。最小的数据包长度是8字节，用于表示头部和一个空的负载。[图
    5-1](#figure5-1)展示了UDP数据包的组织结构。
- en: '![f05001](image_fi/500884c05/f05001.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![f05001](image_fi/500884c05/f05001.png)'
- en: 'Figure 5-1: UDP packet header and payload'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-1：UDP数据包头部和负载
- en: Although the maximum packet length is 65,535 bytes, application layer protocols
    often limit the packet length to avoid fragmentation, which we discuss in “Avoiding
    Fragmentation” on page 115.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管最大数据包长度为65,535字节，但应用层协议通常会限制数据包长度，以避免数据包碎片化，具体内容请参见第115页的“避免碎片化”一节。
- en: Sending and Receiving UDP Data
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发送和接收UDP数据
- en: When it comes to sending and receiving data, UDP is uncivilized compared to
    TCP. For example, let’s assume your neighbor baked you a pie and wants to give
    it to you. Using TCP to communicate is like your neighbor shouting a greeting
    from her window (her socket address) to your open window (your socket address).
    You hear her greeting and return a greeting of your own (the TCP handshake). Your
    neighbor then delivers your pie. You accept it and thankfully acknowledge the
    pie (the data transfer). You then both exchange farewells and go about your business
    (the termination). By contrast, using UDP to communicate is like your neighbor
    abruptly throwing the pie at your window, whether it’s open or not, and awaiting
    no confirmation that you received it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在发送和接收数据时，UDP相比TCP显得更加粗糙。例如，假设你的邻居烤了一个馅饼并想要给你。使用TCP进行通信就像是你的邻居从她的窗户（她的套接字地址）向你敞开的窗户（你的套接字地址）大声喊个问候。你听到她的问候并回应一个问候（TCP握手）。然后你的邻居把馅饼送到你那里。你接受它并感激地确认收到馅饼（数据传输）。接着你们互道告别，各自继续忙自己的事（连接终止）。相比之下，使用UDP进行通信就像是你的邻居突然把馅饼扔向你的窗户，无论窗户开没开，也不等待你确认收到。
- en: The section “Using the net.Conn Interface” on page 74 introduced the `net.Conn`
    interface for handling stream-oriented connections, such as TCP, between a client
    and a server. But this interface isn’t ideal for UDP connections because UDP is
    not a stream-oriented protocol. UDP does not maintain a session or involve a handshake
    process like TCP. UDP does not have the concept of acknowledgments, retransmissions,
    or flow control.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在第74页的“使用 net.Conn 接口”一节中，介绍了`net.Conn`接口，用于处理面向流的连接，如TCP连接，客户端和服务器之间。但这个接口不适合UDP连接，因为UDP不是面向流的协议。UDP没有像TCP那样维持会话或进行握手过程。UDP没有确认、重传或流控制的概念。
- en: Instead, UDP primarily relies on the packet-oriented `net.PacketConn` interface.
    We’ll discuss a use case for `net.Conn` with UDP later in this chapter, but `net.PacketConn`
    is the better choice for most UDP applications.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，UDP主要依赖于面向数据包的`net.PacketConn`接口。本章稍后我们会讨论一个UDP与`net.Conn`结合使用的案例，但对于大多数UDP应用程序来说，`net.PacketConn`是更好的选择。
- en: Using a UDP Echo Server
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用UDP回显服务器
- en: Sending and receiving UDP packets is a nearly identical process to sending and
    receiving TCP packets. But since UDP doesn’t have session support, you must be
    able to handle an additional return value, the sender’s address, when reading
    data from the connection object, as shown in [Listing 5-1](#listing5-1)’s UDP
    echo server implementation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 发送和接收UDP数据包的过程几乎与发送和接收TCP数据包相同。但由于UDP不支持会话，你必须能够处理从连接对象读取数据时的附加返回值，即发送者的地址，正如[列表5-1](#listing5-1)中UDP回显服务器实现所示。
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 5-1: A simple UDP echo server implementation (*echo.go*)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-1：一个简单的UDP回显服务器实现（*echo.go*）
- en: This code allows you to spin up a UDP server that will echo any UDP packets
    it receives to the sender. You’ll make use of this code quite a bit in this chapter,
    so it behooves you to understand what’s happening here.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码允许你启动一个UDP服务器，能够将接收到的任何UDP数据包回显给发送者。在本章中，你会频繁使用这段代码，因此理解它的作用是很重要的。
- en: The function receives a context 1 to allow cancellation of the echo server by
    the caller and a string address in the familiar *host:port* format. It returns
    a `net.Addr` interface and an `error` interface. The caller uses the `net.Addr`
    interface to address messages to the echo server. The returned `error` interface
    is not `nil` if anything goes wrong while instantiating the echo server.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接收一个上下文1，以便调用者取消回显服务器，以及一个熟悉的*host:port*格式的字符串地址。它返回一个`net.Addr`接口和一个`error`接口。调用者使用`net.Addr`接口向回显服务器发送消息。如果在实例化回显服务器时出现任何问题，返回的`error`接口将不为`nil`。
- en: You create a UDP connection for your server with a call to `net.ListenPacket`2,
    which returns a `net.PacketConn` interface and an `error` interface. The `net.ListenPacket`
    function is analogous to the `net.Listen` function you used to create a TCP listener
    in Chapters 3 and 4, except `net.ListenPacket` exclusively returns a `net.PacketConn`
    interface.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你通过调用`net.ListenPacket`2为服务器创建一个UDP连接，该方法返回一个`net.PacketConn`接口和一个`error`接口。`net.ListenPacket`函数类似于你在第3章和第4章中用于创建TCP监听器的`net.Listen`函数，不同之处在于`net.ListenPacket`只返回一个`net.PacketConn`接口。
- en: A goroutine manages the asynchronous echoing of messages by your echo server
    3. A second goroutine blocks on the context’s `Done` channel 4. Once the caller
    cancels the context, receiving on the `Done` channel unblocks and the server is
    closed, tearing down both this goroutine and the parent goroutine 3.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一个goroutine管理你回显服务器3的异步消息回显。第二个goroutine阻塞在上下文的`Done`通道4上。一旦调用者取消上下文，接收`Done`通道的操作会解除阻塞，服务器关闭，销毁此goroutine以及父goroutine
    3。
- en: To read from the UDP connection, you pass a byte slice to the `ReadFrom` method
    6. This returns the number of bytes read, the sender’s address, and an error interface.
    Notice there is no `Accept` method on your UDP connection as there is with the
    TCP-based listeners in the previous chapters. This is because UDP doesn’t use
    a handshake process. Here, you simply create a UDP connection listening to a UDP
    port and read any incoming messages. Since you don’t have the luxury of a proper
    introduction and an established session, you rely on the returned address 5 to
    determine which node sent you the message.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要从UDP连接中读取数据，你将一个字节切片传递给`ReadFrom`方法6。该方法返回读取的字节数、发送者的地址以及一个错误接口。请注意，你的UDP连接没有像前面章节中的基于TCP的监听器那样具有`Accept`方法。这是因为UDP不使用握手过程。在这里，你只是创建一个监听UDP端口的UDP连接，并读取任何传入的消息。由于没有适当的介绍和建立会话，你依赖返回的地址5来确定是哪一个节点发送了消息。
- en: To write a UDP packet, you pass a byte slice and a destination address 8 to
    the connection’s `WriteTo` method 7. The `WriteTo` method returns the number of
    bytes written and an error interface. Just as with reading data, you need to tell
    the `WriteTo` method where to send the packet, because you do not have an established
    session with a remote node. In [Listing 5-1](#listing5-1), you write the message
    to the original sender. But you could just as easily forward the message onto
    another node using your existing UDP connection object. You do not have to establish
    a new UDP connection object to forward on the message as you would if you were
    using TCP.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要写入一个UDP数据包，你将一个字节切片和一个目标地址8传递给连接的`WriteTo`方法7。`WriteTo`方法返回写入的字节数和一个错误接口。与读取数据时一样，你需要告诉`WriteTo`方法数据包的发送位置，因为你与远程节点没有建立会话。在[清单5-1](#listing5-1)中，你将消息写入原始发送者。但你也可以轻松地将消息转发到另一个节点，使用你现有的UDP连接对象。你无需像使用TCP时那样建立一个新的UDP连接对象来转发消息。
- en: Receiving Data from the Echo Server
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从回显服务器接收数据
- en: Now that you are familiar with the UDP-based echo server, let’s have a look
    at some client code that interacts with the echo server. [Listing 5-2](#listing5-2)
    shows a simple interaction with the echo server.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经熟悉了基于UDP的回显服务器，我们来看看一些与回显服务器交互的客户端代码。[清单5-2](#listing5-2)展示了与回显服务器的简单交互。
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 5-2: Sending UDP packets to the echo server and receiving replies (*echo_test.go*)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 清单5-2：向回显服务器发送UDP数据包并接收回复（*echo_test.go*）
- en: You pass along a context and the address string to the `echoServer` function
    and receive the server’s address 1 object. You defer a call to the context’s `cancel`
    function, which signals the server to exit and close its goroutines. In a real-world
    application, using a context for cancellation of long-running processes is useful
    to make sure you aren’t leaking resources like memory or unnecessarily keeping
    files open.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: You instantiate the client’s `net.PacketConn`2 in the same way that you instantiated
    the echo server’s `net.PacketConn`. The `net.ListenPacket` function creates the
    connection object for both the client and the server. Here, too, you need to tell
    the client where to send its message with each invocation of its `WriteTo` method
    3. After sending the message to the echo server, the client should immediately
    receive a message via its `ReadFrom` method 5. You can examine the address 4 returned
    by the `ReadFrom` method to confirm that the echo server sent the message.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that the test in [Listing 5-2](#listing5-2) can fail
    under certain circumstances. Even though you’re reading packets from and writing
    packets to a computer’s local network stack, the packets are still subject to
    all of the conditions that make UDP unreliable over inter-node networks. For example,
    full send or receive buffers, or the lack of available RAM, can result in dropped
    packets; large UDP packets may be subject to fragmentation (discussed later in
    this chapter); and operating systems using multiple threads to deliver UDP packets
    may deliver the packets out of order.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Every UDP Connection Is a Listener
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Recall from Chapter 3 that Go’s `net` package distinguishes between a TCP connection
    object (`TCPConn`) and a TCP listener (`TCPListener`). The TCP listener is what
    accepts the connection and returns an object that represents the listener’s side
    of the connection so that the listener can then send a message to the client.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: There is no UDP equivalent of the `TCPListener` because UDP lacks sessions.
    This means your code has a bit more accounting to do when it receives packets.
    You need to verify the sender’s address, because you can no longer trust that
    all incoming packets to a connection object are from the same sender.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: The next few listings are part of a test that a single UDP connection object
    can receive packets from more than one sender. [Listing 5-3](#listing5-3) spins
    up an echo server and a client for the test.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 5-3: Creating an echo server and client (*listen_packet_test.go*)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: You start by creating the echo server 1 and client connection 2. [Listing 5-4](#listing5-4)
    adds a second network connection to interact with the client.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 5-4: Adding an interloper and interrupting the client with a message
    (*listen_packet_test.go*)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: You then create a new UDP connection 1 meant to interlope on the client and
    echo server and interrupt the client 2. This message should queue up in the client’s
    receive buffer.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: The client sends its ping message to the echo server and reconciles the replies
    in [Listing 5-5](#listing5-5).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端将其 ping 消息发送到回声服务器，并在[清单 5-5](#listing5-5)中对回复进行调解。
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 5-5: Receiving UDP packets from multiple senders at once (*listen_packet_test.go*)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 5-5：接收来自多个发送者的 UDP 数据包（*listen_packet_test.go*）
- en: Meanwhile, the client writes a ping message to the echo server 1 and promptly
    reads an incoming message 2. What’s unique about the UDP client connection is
    it first reads the interruption message from the interloping connection 3 and
    then the reply from the echo server 4. Were this a TCP connection, the client
    would have never received the interloper’s message. As such, your code should
    always verify the sender of each packet it reads by evaluating the second return
    value 5 from the `ReadFrom` method, the sender’s address.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，客户端向回声服务器 1 写入 ping 消息，并迅速读取一个传入的消息 2。UDP 客户端连接的独特之处在于，它首先读取来自非法连接的中断消息
    3，然后是来自回声服务器的回复 4。如果这是一个 TCP 连接，客户端将永远不会接收到非法连接的消息。因此，你的代码应始终通过评估 `ReadFrom` 方法的第二个返回值
    5（发送者的地址）来验证每个读取的包的发送者。
- en: Using net.Conn in UDP
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 UDP 中使用 net.Conn
- en: You can establish a UDP connection that implements the `net.Conn` interface
    so that your code behaves indistinguishably from a TCP `net.Conn`. You do so by
    passing `udp` as the first argument to the `net.Dial` function used in the preceding
    two chapters. Using `net.Conn` with your UDP-based connections can prevent interlopers
    from sending you messages and eliminate the need to check the sender’s address
    on every reply you receive.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以建立一个实现 `net.Conn` 接口的 UDP 连接，这样你的代码表现得就像是一个 TCP 的 `net.Conn`。你通过将 `udp` 作为第一个参数传递给在前两章中使用的
    `net.Dial` 函数来实现这一点。使用 `net.Conn` 与基于 UDP 的连接可以防止非法连接发送消息给你，并消除在收到每个回复时检查发送方地址的需要。
- en: '[Listing 5-6](#listing5-6) creates the UDP-based `net.Conn` and demonstrates
    how `net.Conn` encapsulates the implementation details of UDP to emulate a stream-oriented
    network connection.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 5-6](#listing5-6) 创建了基于 UDP 的 `net.Conn`，并演示了 `net.Conn` 如何封装 UDP 的实现细节，从而模拟面向流的网络连接。'
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 5-6: Creating an echo server and client (*dial_test.go*)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 5-6：创建回声服务器和客户端（*dial_test.go*）
- en: The client side of a connection can leverage the stream-oriented functionality
    of `net.Conn` over UDP, but the UDP listener must still use `net.PacketConn`.
    You spawn an instance of the echo server 1 for the purpose of sending a reply
    to the client. You then dial the echo server over UDP by passing `udp` as the
    first argument to `net.Dial`2. Unlike TCP, the echo server receives no traffic
    upon calling `net.Dial` because no handshake is necessary.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 连接的客户端可以通过 UDP 利用 `net.Conn` 的面向流的功能，但 UDP 监听器仍然必须使用 `net.PacketConn`。你为回声服务器
    1 创建了一个实例，目的是向客户端发送回复。然后，你通过将 `udp` 作为第一个参数传递给 `net.Dial`2 来通过 UDP 拨号回声服务器。与 TCP
    不同，回声服务器在调用 `net.Dial` 时不会接收到任何流量，因为无需握手。
- en: '[Listing 5-7](#listing5-7) interrupts the client by sending a message to it
    before the echo server sends its reply.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 5-7](#listing5-7) 通过在回声服务器发送其回复之前向客户端发送消息来中断客户端。'
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 5-7: Interrupting the client (*dial_test.go*)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 5-7：中断客户端（*dial_test.go*）
- en: Just as in [Listing 5-4](#listing5-4), you send a message to the client from
    an interloping connection 1.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在[清单 5-4](#listing5-4)中一样，你从一个非法连接 1 向客户端发送了一条消息。
- en: '[Listing 5-8](#listing5-8) details the difference between a UDP connection
    using `net.Conn` and one using `net.PacketConn`, as in [Listing 5-5](#listing5-5).'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 5-8](#listing5-8) 详细说明了使用 `net.Conn` 的 UDP 连接与使用 `net.PacketConn` 的连接之间的区别，如[清单
    5-5](#listing5-5)所示。'
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Listing 5-8: Using `net.Conn` to manage UDP traffic (*dial_test.go*)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 5-8：使用 `net.Conn` 管理 UDP 流量（*dial_test.go*）
- en: The client sends a ping message to the echo server by using `net.Conn`’s `Write`
    method 1. The `net.Conn` client will write its messages to the address specified
    in the `net.Dial` call. You do not need to specify a destination address for every
    packet you send using the client connection. Likewise, you read packets using
    the client’s `Read` method 2. The client reads packets only from the sender address
    specified in the `net.Dial` call, as you would expect using a stream-oriented
    connection object. The client never reads the message sent by the interloping
    connection. To make sure, you set an ample deadline 3 and attempt to read another
    message 4.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: For your purposes, using `net.Conn` over `net.PacketConn` may make your UDP
    connection code cleaner. Just be aware of the trade-offs. Using `net.Conn` with
    UDP does not offer the same functionality as you would expect when using `net.Conn`
    with TCP. For example, a UDP-based `net.Conn`’s `Write` method will not return
    an error if the destination failed to receive the packet. The onus is still on
    your application code to confirm delivery when using UDP.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding Fragmentation
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Fragmentation* is a Layer 3 IP process of splitting a packet into smaller
    pieces suitable for efficient transmission over a network. All network media have
    packet size limitations known as the *maximum transmission unit (MTU)*. Packets
    larger than the medium’s maximum transmission unit require fragmentation so that
    each fragment is less than or equal to the medium’s MTU before nodes pass them
    over the medium. Once the fragments reach their destination, the operating system
    reassembles each packet and presents the packet to your application.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: But fragments can corrupt or fail to reach their destination for one reason
    or another. This is a significant consideration if you’re using UDP because, unlike
    TCP, UDP does not gracefully recover from missing or corrupt data. If an operating
    system fails to receive even a single fragment, the sender must retransmit the
    entire UDP packet. As you can imagine, retransmitting large packets is woefully
    inefficient. Although there are numerous approaches to mitigating the effects
    of fragmentation, we’ll attempt to avoid it altogether. We’ll focus on a straightforward
    way to identify the MTU between your computer and a destination node, and then
    use those results to inform your choice of payload size to avoid fragmentation.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: You can use the `ping` command to determine the MTU between your computer and
    a destination node. The `ping` command allows you to send an ICMP packet of a
    specific size with a flag set to inform nodes not to fragment it. If the packet
    reaches a node that needs to fragment the packet because of its size, the node
    will see the *do not fragment* flag and respond with an ICMP message informing
    you that the packet is too large.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: The following example sends these pings over Ethernet, which has a minimum MTU
    of 46 bytes and a maximum MTU of 1,500 bytes, per its specification. If any hop
    between your computer and its destination has an MTU of less than 1,500 bytes,
    your packet will fragment. Let’s confirm that with the `ping` command on Linux
    ([Listing 5-9](#listing5-9)).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例通过以太网发送这些 ping，按规范以太网的最小 MTU 为 46 字节，最大 MTU 为 1,500 字节。如果你计算机与目标主机之间的任何跳跃的
    MTU 小于 1,500 字节，那么你的数据包将会被分片。让我们使用 Linux 上的 `ping` 命令来确认这一点（[列表 5-9](#listing5-9)）。
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Listing 5-9: Pinging 1.1.1.1 with a payload size of 1,500 bytes on Linux'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-9：在 Linux 上使用 1,500 字节有效负载大小 ping 1.1.1.1
- en: You set the `-M` flag 1 to `do`, which sets the prohibit fragmentation option,
    and set the `-s` flag 2 to `1500`, which sets a payload of 1,500 bytes. Since
    you aren’t accounting for the packet’s header size, this should exceed the Ethernet
    MTU. As expected, you get a notification that the packet needs fragmentation 4.
    You also see that the total packet size is 1,528 bytes 3. The extra 28 bytes is
    the sum of the 8-byte ICMP header and the 20-byte IP header. Any payload you specify
    should account for the overall header size as well.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你将 `-M` 标志设置为 1 为 `do`，这设置了禁止分片选项，并将 `-s` 标志设置为 2 为 `1500`，这设置了 1,500 字节的有效负载。由于没有考虑数据包的头部大小，这应该超过以太网的
    MTU。如预期的那样，你收到通知，数据包需要进行分片。你还看到总的数据包大小是 1,528 字节。额外的 28 字节是 8 字节的 ICMP 头部和 20
    字节的 IP 头部之和。任何你指定的有效负载都应该考虑到整体头部大小。
- en: As you can see, you never received a reply from 1.1.1.1 in [Listing 5-9](#listing5-9)
    because the packet you sent was too big to traverse each hop without requiring
    fragmentation. Instead, the `ping` command informed you that your message was
    too long.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，你在 [列表 5-9](#listing5-9) 中从未收到 1.1.1.1 的回复，因为你发送的数据包太大，无法在每个跳跃中不进行分片。相反，`ping`
    命令通知你消息太长。
- en: Let’s try again and subtract 28 bytes from the payload ([Listing 5-10](#listing5-10)).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再试一次，减去 28 字节的有效负载（[列表 5-10](#listing5-10)）。
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Listing 5-10: Pinging 1.1.1.1 with a payload size of 1472 bytes on Linux'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-10：在 Linux 上使用 1,472 字节有效负载大小 ping 1.1.1.1
- en: That’s more like it. You confirmed that the MTU between this computer and 1.1.1.1
    over the internet is set to 1,500 bytes. This is the maximum packet size you can
    send on the network before it will require fragmentation. Thankfully, the UDP
    header is also 8 bytes, so the `ping` command gives accurate results despite using
    ICMP. Accounting for the headers, your maximum UDP payload size is 1,472 bytes
    to avoid fragmentation.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这才像话。你确认了这台计算机与 1.1.1.1 之间通过互联网的 MTU 设置为 1,500 字节。这是你在网络上发送数据包时的最大大小，超过这个大小就需要进行分片。幸运的是，UDP
    头部也是 8 字节，所以尽管使用 ICMP，`ping` 命令依然能给出准确的结果。考虑到头部大小，你的最大 UDP 有效负载大小是 1,472 字节，以避免分片。
- en: 'The equivalent `ping` command on Windows is the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，等效的 `ping` 命令如下：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `-f` flag instructs nodes to not fragment the packet, and the `-l` flag
    sets the packet size to the given integer in bytes.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`-f` 标志指示节点不要分片数据包，`-l` 标志将数据包大小设置为给定的字节数。'
- en: 'On macOS, the `ping` command looks like this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 上，`ping` 命令如下：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `-D` flag sets the no fragmentation flag, and the `-s` flag specifies the
    payload size.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`-D` 标志设置了禁止分片标志，`-s` 标志指定了有效负载的大小。'
- en: Keep in mind that the MTU from your computer may differ from the examples in
    this chapter because of MTU settings either on your network or between your computer
    and the destination you choose to ping. I recommend you experiment with the `ping`
    command to determine the MTU from your computer to various hosts on the internet
    and see if you find any differences.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，你计算机的 MTU 可能与本章示例中的不同，因为网络或计算机与目标主机之间的 MTU 设置不同。我建议你尝试使用 `ping` 命令来确定从计算机到互联网各主机的
    MTU，并查看是否发现任何差异。
- en: What You’ve Learned
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你所学到的
- en: UDP is a minimalistic, datagram-based protocol that favors speed over reliability
    by eschewing many of TCP’s flow control and reliability features. UDP is ideal
    when speed and simplicity are required and the potential for data loss is acceptable,
    such as with live video streaming.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: UDP 是一种简约的基于数据报的协议，优先考虑速度而非可靠性，避免了许多 TCP 的流量控制和可靠性特性。UDP 适用于需要速度和简洁性、且能容忍数据丢失的场景，比如实时视频流。
- en: Since UDP is not session based, there is no concept of a UDP listener that accepts
    a connection after establishing a session. Rather, you create a network connection
    by using `net.ListenPacket`, which returns a `net.PacketConn` interface. Your
    code can then read any incoming messages, or datagrams, from the `net.PacketConn`
    interface since every `net.PacketConn` listens for incoming messages.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 UDP 不是基于会话的，因此没有 UDP 监听器的概念，不会在建立会话后接受连接。相反，你需要通过使用 `net.ListenPacket` 来创建网络连接，它返回一个
    `net.PacketConn` 接口。然后，你的代码可以从 `net.PacketConn` 接口读取任何传入的消息或数据报，因为每个 `net.PacketConn`
    都会监听传入的消息。
- en: Fragmentation is a serious consideration when using UDP. It’s important to avoid
    fragmentation of your UDP packets whenever possible to help ensure delivery. The
    `ping` command can help you derive the appropriate maximum transmission unit between
    your computer and your destination network. Since ICMP packet headers used by
    the `ping` command are the same size as UDP headers, you can use that knowledge
    to easily determine the payload size threshold at which fragmentation will occur.
    Aside from managing fragmentation by appropriately sizing your payloads, your
    code must manage acknowledgments and retransmissions to ensure reliability.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 UDP 时，分片是一个需要认真考虑的问题。尽量避免 UDP 数据包的分片，以帮助确保数据的可靠传输非常重要。`ping` 命令可以帮助你确定计算机与目标网络之间的适当最大传输单元。由于
    `ping` 命令使用的 ICMP 包头与 UDP 包头大小相同，你可以利用这一点轻松确定发生分片的有效载荷大小阈值。除了通过适当调整有效载荷的大小来管理分片外，你的代码还必须管理确认和重传，以确保可靠性。
