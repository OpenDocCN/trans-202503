- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 1 AN R PROGRAMMING CRASH COURSE
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1 R 编程速成课程
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: R has a well-earned reputation for being hard to learn, especially for those
    who come to it without prior programming experience. This chapter is designed
    to help anyone who has never used R before. You’ll set up an R programming environment
    with RStudio and learn how to use functions, objects, packages, and projects to
    work with data. You’ll also be introduced to the tidyverse package, which contains
    the core data analysis and manipulation functions used in this book.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: R 因学习难度大而声名显赫，尤其是对于那些没有编程经验的人。本章旨在帮助从未使用过 R 的人。你将通过 RStudio 设置一个 R 编程环境，并学习如何使用函数、对象、包和项目来处理数据。你还将了解
    tidyverse 包，它包含了本书中使用的核心数据分析和操作功能。
- en: This chapter won’t provide a complete introduction to R programming; rather,
    it will focus on the knowledge you need to follow along with the rest of the book.
    If you have prior experience with R, feel free to skip ahead to [Chapter 2](chapter2.xhtml).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章不会提供 R 编程的完整介绍；它将集中介绍你跟随本书其余部分所需的知识。如果你有 R 的先前经验，可以跳到 [第 2 章](chapter2.xhtml)。
- en: Setting Up
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置
- en: 'You’ll need two pieces of software to use R effectively. The first is R itself,
    which provides the underlying computational tools that make the language work.
    The second is an *integrated development environment (IDE)* like RStudio. This
    coding platform simplifies working with R. The best way to understand the relationship
    between R and RStudio is with this analogy from Chester Ismay and Albert Kim’s
    book *Statistical Inference via Data Science: A ModernDive into R and the Tidyverse*:
    R is the engine that powers your data, and RStudio is like the dashboard that
    provides a user-friendly interface.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要有效使用 R，你需要两个软件。第一个是 R 本身，它提供了支撑语言运作的计算工具。第二个是像 RStudio 这样的 *集成开发环境（IDE）*。这个编码平台简化了与
    R 的工作。理解 R 和 RStudio 之间关系的最佳方式是参考 Chester Ismay 和 Albert Kim 在其著作 *《通过数据科学进行统计推断：R
    和 Tidyverse 的现代探究》* 中的类比：R 就像是驱动数据的引擎，而 RStudio 就像是提供用户友好界面的仪表盘。
- en: Installing R and RStudio
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装 R 和 RStudio
- en: To download R, go to *[https://cloud.r-project.org](https://cloud.r-project.org)*
    and choose the link for your operating system. Once you’ve installed it, open
    the file. This should open an interface, like the one shown in [Figure 1-1](chapter1.xhtml#fig1-1),
    that lets you work with R on your operating system’s command line. For example,
    enter 2 + 2, and you should see 4.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载 R，请访问 *[https://cloud.r-project.org](https://cloud.r-project.org)* 并选择与你操作系统相对应的链接。安装完成后，打开该文件。这将打开一个界面，就像
    [图 1-1](chapter1.xhtml#fig1-1) 中所示的那样，允许你在操作系统的命令行中使用 R。例如，输入 2 + 2，你应该会看到 4。
- en: '![](../images/fig1-1.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig1-1.jpg)'
- en: 'Figure 1-1: The R console'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-1：R 控制台
- en: A few brave souls work with R using only this command line, but most opt to
    use RStudio, which provides a way to see your files, the output of your code,
    and more. You can download RStudio at *[https://posit.co/download/rstudio-desktop/](https://posit.co/download/rstudio-desktop/)*.
    Install RStudio as you would any other app and open it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一些勇敢的灵魂仅使用命令行与 R 工作，但大多数人选择使用 RStudio，它提供了一种查看文件、代码输出等的方式。你可以在 *[https://posit.co/download/rstudio-desktop/](https://posit.co/download/rstudio-desktop/)*
    下载 RStudio。像安装其他应用一样安装 RStudio 并打开它。
- en: Exploring the RStudio Interface
  id: totrans-13
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 探索 RStudio 界面
- en: The first time you open RStudio, you should see the three panes shown in [Figure
    1-2](chapter1.xhtml#fig1-2).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次打开 RStudio 时，你应该会看到 [图 1-2](chapter1.xhtml#fig1-2) 中显示的三个窗格。
- en: '![](../images/fig1-2.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig1-2.jpg)'
- en: 'Figure 1-2: The RStudio editor'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-2：RStudio 编辑器
- en: The left pane should look familiar. It’s similar to the screen you saw when
    working in R on the command line. This is known as the *console*. You’ll use it
    to enter code and see the results. This pane has several tabs, such as Terminal
    and Background Jobs, for more advanced uses. For now, you’ll stick to the default
    tab.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧窗格应该看起来很熟悉。它类似于你在命令行中使用 R 时看到的屏幕。这被称为 *控制台*。你将使用它来输入代码并查看结果。这个窗格有几个标签页，例如
    Terminal 和 Background Jobs，用于更高级的功能。现在，你将只使用默认的标签页。
- en: At the bottom right, the *files pane* shows all of the files on your computer.
    You can click any file to open it within RStudio. Finally, at the top right is
    the *environment pane*, which shows the objects that are available to you when
    working in RStudio. Objects are discussed in “Saving Data as Objects” on [page
    11](#pg_11).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在右下角，*文件面板*显示了你计算机上的所有文件。你可以点击任何一个文件，在RStudio中打开它。最后，在右上角是*环境面板*，它显示了在RStudio中工作时可用的对象。有关对象的讨论，请参见“将数据保存为对象”部分，见[第11页](#pg_11)。
- en: There is one more pane that you’ll typically use when working in RStudio, but
    to see it, first you need to create an R script file.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个你在RStudio中工作时通常会使用的面板，但要查看它，你首先需要创建一个R脚本文件。
- en: R Script Files
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: R脚本文件
- en: If you write all of your code in the console, you won’t have any record of it.
    Say you sit down today and import your data, analyze it, and then make some graphs.
    If you run these operations in the console, you’ll have to re-create that code
    from scratch tomorrow. But if you write your code in files instead, you can run
    it multiple times.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你所有的代码都写在控制台中，你将没有任何记录。假设你今天坐下来导入数据、进行分析，然后制作一些图表。如果你在控制台中运行这些操作，明天你必须从头开始重新编写这些代码。但如果你将代码写入文件中，你就可以多次运行它。
- en: '*R script files*, which use the *.R* extension, save your code so you can run
    it later. To create an R script file, go to **File****New File****R Script**,
    and the *script file pane* should appear in the top left of RStudio, as shown
    in [Figure 1-3](chapter1.xhtml#fig1-3). Save this file in your *Documents* folder
    as *sample-code.R*.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*R脚本文件*，使用*.R*扩展名，可以保存你的代码，以便以后运行。要创建一个R脚本文件，进入**文件****新建文件****R脚本**，然后*脚本文件面板*应该出现在RStudio的左上角，如[图1-3](chapter1.xhtml#fig1-3)所示。将此文件保存到你的*文档*文件夹中，命名为*sample-code.R*。'
- en: '![](../images/fig1-3.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig1-3.jpg)'
- en: 'Figure 1-3: The script file pane (top left)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-3：脚本文件面板（左上角）
- en: Now you can enter R code into the new pane to add it to your script file. For
    example, try entering 2 + 2 in the script file pane to perform a simple addition
    operation.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在新的面板中输入R代码，将其添加到你的脚本文件中。例如，尝试在脚本文件面板中输入2 + 2，执行一个简单的加法运算。
- en: To run a script file, click **Run** or use the keyboard shortcut COMMAND-ENTER
    on macOS or CTRL-ENTER on Windows. The result (4, in this case) should show up
    in the console pane.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行脚本文件，点击**运行**或使用快捷键：在macOS上是COMMAND-ENTER，在Windows上是CTRL-ENTER。结果（在此案例中是4）应该会显示在控制台面板中。
- en: You now have a working programming environment. Next you’ll use it to write
    some simple R code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经有了一个可用的编程环境。接下来，你将使用它编写一些简单的R代码。
- en: Basic R Syntax
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本的R语法
- en: If you’re trying to learn R, you probably want to perform more complex operations
    than 2 + 2, but understanding the fundamentals will prepare you to do more serious
    data analysis tasks later in this chapter. Let’s cover some of these basics.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在学习R，可能希望执行比2 + 2更复杂的操作，但理解基础知识将为你后续更严肃的数据分析任务做好准备。让我们先了解一些基础内容。
- en: Arithmetic Operators
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 算术运算符
- en: 'Besides +, R supports the common arithmetic operators - for subtraction, *
    for multiplication, and / for division. Try entering the following in the console:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 除了+，R还支持常见的算术运算符：- 用于减法，* 用于乘法，/ 用于除法。尝试在控制台中输入以下内容：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, R returns the result of each calculation you enter. You don’t
    have to add the spaces around operators as shown here, but doing so makes your
    code much more readable.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，R会返回你输入的每个计算结果。你不必像这里显示的那样在运算符周围加上空格，但这样做会使你的代码更具可读性。
- en: 'You can also use parentheses to perform multiple operations at once and see
    their result. The parentheses specify the order in which R will evaluate the expression.
    Try running the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用括号一次执行多个运算并查看其结果。括号指定了R评估表达式的顺序。试试运行以下代码：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code first evaluates the expression within the parentheses, 2 + 1, before
    multiplying the result by 2 in order to get 6.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码首先计算括号内的表达式2 + 1，然后将结果乘以2，得到6。
- en: 'R also has more advanced arithmetic operators, such as ** to calculate exponents:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: R还具有更高级的算术运算符，如**用于计算指数：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is equivalent to 2³, which returns 8.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于2³，结果是8。
- en: 'To get the remainder of a division operation, you can use the %% operator:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取除法操作的余数，你可以使用%%运算符：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Dividing 10 by 3 produces a remainder of 1, the value R returns.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 将10除以3会产生余数1，这是R返回的值。
- en: You won’t need to use these advanced arithmetic operators for the activities
    in this book, but they’re good to know nonetheless.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书中的活动，你不需要使用这些高级算术运算符，但了解它们总是有益的。
- en: Comparison Operators
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 比较运算符
- en: 'R also uses *comparison operators*, which let you test how one value compares
    to another. R will return either TRUE or FALSE. For example, enter 2 > 1 in the
    console:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: R 还使用*比较运算符*，它让你测试一个值与另一个值的比较结果。R 会返回 TRUE 或 FALSE。例如，在控制台中输入 `2 > 1`：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: R should return TRUE, because 2 is greater than 1.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: R 应该返回 TRUE，因为 2 大于 1。
- en: 'Other common comparison operators include less than (<), greater than or equal
    to (>=), less than or equal to (<=), equal to (==), and not equal to (!=). Here
    are some examples:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 其他常见的比较运算符包括小于（<）、大于或等于（>=）、小于或等于（<=）、等于（==）和不等于（!=）。以下是一些示例：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When you enter 498 == 498 in the console, R should return TRUE because the two
    values are equal. If you run 2 != 2 in the console, R should return FALSE because
    2 does not *not* equal 2.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在控制台输入 `498 == 498` 时，R 应该返回 TRUE，因为两个值是相等的。如果你在控制台运行 `2 != 2`，R 应该返回 FALSE，因为
    2 并不*不等于* 2。
- en: You’ll rarely use comparison operators to directly test how one value compares
    to another; instead, you’ll use them to perform tasks like keeping only data where
    a value is greater than a certain threshold. You’ll see comparison operators used
    in this way in “tidyverse Functions” on [page 15](#pg_15).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你很少会使用比较运算符直接测试一个值与另一个值的比较；相反，你会用它们来执行像仅保留大于某个阈值的数据这样的任务。你将在“tidyverse 函数”部分看到比较运算符是如何使用的，见
    [第 15 页](#pg_15)。
- en: Functions
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 函数
- en: You can perform even more useful operations by making use of R’s many *functions*,
    predefined sections of code that let you efficiently do specific things. Functions
    have a name and a set of parentheses containing *arguments*, which are values
    that affect the function’s behavior.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过利用 R 的许多*函数*来执行更多有用的操作，函数是预定义的代码段，可以让你高效地完成特定任务。函数有一个名称和一对括号，其中包含*参数*，这些参数是影响函数行为的值。
- en: 'Consider the print() function, which displays information:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一下 `print()` 函数，它用于显示信息：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The name of the print() function is print. Within the function’s parentheses,
    you specify the argument name—x, in this case—followed by the equal sign (=) and
    a value for the function to display. This code will print the number 1.1.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`print()` 函数的名称是 `print`。在函数的括号内，你需要指定参数名称——在这个例子中是 `x`，然后是等号（=）和一个值，表示要显示的内容。这段代码会打印数字
    1.1。'
- en: 'To separate multiple arguments, you use commas. For example, you can use the
    print() function’s digits argument to indicate how many digits of a number to
    display:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要分隔多个参数，你可以使用逗号。例如，你可以使用 `print()` 函数的 `digits` 参数来指定显示数字的小数位数：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This code will display only one digit (in other words, a whole number).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将只显示一个数字（换句话说，显示整数）。
- en: Using these two arguments allows you to do something specific (display results)
    while also giving you the flexibility to change the function’s behavior.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这两个参数让你可以做特定的事情（显示结果），同时又提供了灵活性来改变函数的行为。
- en: NOTE
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*For a list of all functions built into R, see* [https://stat.ethz.ch/R-manual/R-devel/library/base/html/00Index.xhtml](https://stat.ethz.ch/R-manual/R-devel/library/base/html/00Index.xhtml)*.*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*要查看所有内置 R 函数的列表，请参见* [https://stat.ethz.ch/R-manual/R-devel/library/base/html/00Index.xhtml](https://stat.ethz.ch/R-manual/R-devel/library/base/html/00Index.xhtml)*。*'
- en: 'A common R pattern is using a function within a function. For example, if you
    wanted to calculate the *mean*, or average, of the values 10, 20, and 30, you
    could use the mean() function to operate on the result of the c() function like
    so:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的 R 语言模式是将函数嵌套使用。例如，如果你想计算值 10、20 和 30 的*均值*或平均数，你可以使用 `mean()` 函数对 `c()`
    函数的结果进行操作，如下所示：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The c() function combines multiple values into one, which is necessary because
    the mean() function accepts only one argument. This is why the code has two matching
    sets of open and close parentheses: one for mean() and a nested one for c().'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`c()` 函数将多个值组合成一个，这非常必要，因为 `mean()` 函数只接受一个参数。这就是为什么代码中有两个匹配的开括号和闭括号：一个用于 `mean()`，另一个是嵌套的，用于
    `c()`。'
- en: The value after the equal sign in this example, c(10, 20, 30), tells R to use
    the values 10, 20, and 30 to calculate the mean. Running this code in the console
    returns the value 20.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，等号后面的值 `c(10, 20, 30)` 告诉 R 使用值 10、20 和 30 来计算均值。在控制台运行这段代码会返回值 20。
- en: The functions median() and mode() work with c() in the same way. To learn how
    to use a function and what arguments it accepts, enter ? followed by the function’s
    name in the console to see the function’s help file.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`median()` 和 `mode()` 函数与 `c()` 的使用方式相同。要了解如何使用一个函数以及它接受哪些参数，可以在控制台输入 `?` 后跟函数名称，查看该函数的帮助文件。'
- en: Next, let’s look at how to import data for your R programs to work with.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何导入R程序需要处理的数据。
- en: Working with Data
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据处理
- en: 'R lets you do all of the same data manipulation tasks you might perform in
    a tool like Excel, such as calculating averages or totals. Conceptually, however,
    working with data in R is very different from working with Excel, where your data
    and analysis code live in the same place: a spreadsheet. While the data you work
    with in R might look similar to the data you work with in Excel, it typically
    comes from some external file, so you have to run code to import it.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: R可以让你完成类似于Excel中可能执行的所有数据操作任务，比如计算平均值或总计。然而，从概念上讲，R中的数据处理与在Excel中的工作非常不同，因为在Excel中，数据和分析代码存在于同一个地方：电子表格中。虽然你在R中处理的数据可能看起来与你在Excel中处理的数据类似，但通常来自某个外部文件，因此你必须运行代码来导入它。
- en: Importing Data
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 导入数据
- en: You’ll import data from a *comma-separated values (CSV)* file, a text file that
    holds a series of related values separated by commas. You can open CSV files using
    most spreadsheet applications, which use columns rather than commas as separators.
    For example, [Figure 1-4](chapter1.xhtml#fig1-4) shows the *population-by-state.csv*
    file in Excel.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你将从一个*逗号分隔值（CSV）*文件中导入数据，这是一个保存一系列相关值的文本文件，以逗号分隔。你可以使用大多数电子表格应用程序打开CSV文件，它们使用列而不是逗号作为分隔符。例如，[图1-4](chapter1.xhtml#fig1-4)展示了Excel中的*population-by-state.csv*文件。
- en: '![](../images/fig1-4.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig1-4.jpg)'
- en: 'Figure 1-4: The population-by-state.csv file in Excel'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-4：Excel中的population-by-state.csv文件
- en: To work with this file in R, download it from *[https://data.rfortherestofus.com/population-by-state.csv](https://data.rfortherestofus.com/population-by-state.csv)*.
    Save it to a location on your computer, such as your *Documents* folder.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要在R中处理此文件，请从*[https://data.rfortherestofus.com/population-by-state.csv](https://data.rfortherestofus.com/population-by-state.csv)*下载它。将它保存到你计算机上的一个位置，比如你的*文档*文件夹。
- en: 'Next, to import the file into R, add a line like the following to the *sample-code.R*
    file you created earlier in this chapter, replacing my filepath with the path
    to the file’s location on your system:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，要将文件导入R中，在本章前面创建的*sample-code.R*文件中添加以下类似的行，将我的文件路径替换为你系统上文件位置的路径：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The file argument in the read.csv() function specifies the path to the file
    to open.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: read.csv()函数中的file参数指定要打开的文件的路径。
- en: 'The read.csv() function can accept additional optional arguments, separated
    by commas. For example, the following line uses the skip argument in addition
    to file to import the same file but skip the first row:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: read.csv()函数可以接受额外的可选参数，用逗号分隔。例如，以下行除了文件外还使用了skip参数来导入相同的文件但跳过第一行：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: To learn about additional arguments for this function, enter ?read.csv() in
    the console to see its help file.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解此函数的其他参数，请在控制台中输入?read.csv()以查看其帮助文件。
- en: 'At this point, you can run the code to import your data (without the skip argument).
    Highlight the line you want to run in the script file pane in RStudio and click
    **Run**. You should see the following output in the console pane:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你可以运行代码来导入你的数据（不带skip参数）。在RStudio中的脚本文件窗格中高亮显示要运行的行，并点击**Run**。你应该在控制台窗格中看到以下输出：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is R’s way of confirming that it imported the CSV file and understands
    the data within it. Four variables show each state’s rank (in terms of population
    size), name, current population, population growth between the Pop and Pop2018
    variables (expressed as a percentage), and 2018 population. Several other variables
    are hidden in the output, but you’ll see them if you import this CSV file yourself.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是R确认它导入了CSV文件并理解其中数据的方式。四个变量显示了每个州的排名（按人口大小计算），名称，当前人口，Pop和Pop2018变量之间的人口增长（以百分比表示），以及2018年人口。输出中隐藏了几个其他变量，但如果你自己导入这个CSV文件，你会看到它们。
- en: You might think you’re ready to work with your data now, but all you’ve really
    done at this point is display the result of running the code that imports the
    data. To actually use the data, you need to save it to an object.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能认为现在你已经准备好处理数据了，但实际上你所做的只是显示了导入数据的代码的结果。要真正使用数据，你需要将它保存到一个对象中。
- en: Saving Data as Objects
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将数据保存为对象
- en: 'To save your data for reuse, you need to create an object. For the purposes
    of this discussion, an *object* is a data structure that is stored for later use.
    To create an object, update your data-importing syntax so it looks like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要保存你的数据以便重用，你需要创建一个对象。在本讨论中，*对象*是一个数据结构，用于以后使用。要创建一个对象，请更新你的数据导入语法，使其看起来像这样：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now this line of code contains the <- *assignment operator*, which takes what
    follows it and assigns it to the item on the left. To the left of the assignment
    operator is the population_data object. Put together, the whole line imports the
    CSV file and assigns it to an object called population_data.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这行代码包含了<- *赋值操作符*，它将后面的内容赋值给左边的项目。赋值操作符左侧是population_data对象。结合起来，这整行代码将CSV文件导入并赋值给名为population_data的对象。
- en: When you run this code, you should see population_data in your environment pane,
    as shown in [Figure 1-5](chapter1.xhtml#fig1-5).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这段代码时，你应该能在你的环境窗格中看到population_data，如[图1-5](chapter1.xhtml#fig1-5)所示。
- en: '![](../images/fig1-5.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig1-5.jpg)'
- en: 'Figure 1-5: The population_data object in the environment pane'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-5：环境窗格中的population_data对象
- en: This message confirms that your data import worked and that the population_data
    object is ready for future use. Now, instead of having to rerun the code to import
    the data, you can simply enter population_data in an R script file or in the console
    to output the data.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这条信息确认了你的数据导入成功，并且population_data对象已准备好用于未来使用。现在，你无需重新运行代码来导入数据，只需在R脚本文件或控制台中输入population_data，就可以输出数据。
- en: Data imported to an object in this way is known as a *data frame*. You can see
    that the population_data data frame has 52 observations and 9 variables. *Variables*
    are the data frame’s columns, each of which represents some value (for example,
    the population of each state). As you’ll see throughout the book, you can add
    new variables or modify existing ones using R code. The 52 observations come from
    the 50 states, as well as the District of Columbia and Puerto Rico.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式导入到对象中的数据被称为*数据框*。你可以看到，population_data数据框有52个观测值和9个变量。*变量*是数据框的列，每个列代表一个值（例如，每个州的人口）。正如你将在全书中看到的，你可以使用R代码添加新变量或修改现有变量。52个观测值来自50个州，以及哥伦比亚特区和波多黎各。
- en: Installing Packages
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装包
- en: The read.csv() function you’ve been using, as well as the mean() and c() functions
    you saw earlier, comes from *base R*, the set of built-in R functions. To use
    base R functions, you simply enter their names. However, one of the benefits of
    R being an open source language is that anyone can create their own code and share
    it with others. R users around the world make R *packages*, which provide custom
    functions to accomplish specific goals.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你一直在使用的read.csv()函数，以及之前看到的mean()和c()函数，来自*base R*，即内置的R函数集。要使用base R函数，你只需输入它们的名称。然而，R作为开源语言的一个好处是，任何人都可以创建自己的代码并与他人分享。全球的R用户会制作R
    *包*，提供自定义函数以完成特定目标。
- en: The best analogy for understanding packages also comes from the book *Statistical
    Inference via Data Science*. The functionality in base R is like the features
    built into a smartphone. A smartphone can do a lot on its own, but you usually
    want to install additional apps for specific tasks. Packages are like apps, giving
    you functionality beyond what’s built into base R. In [Chapter 12](chapter12.xhtml),
    you’ll create your own R package.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 理解包的最佳类比也来自《*通过数据科学的统计推断*》一书。base R中的功能就像智能手机内置的功能。智能手机本身可以做很多事情，但你通常需要安装额外的应用程序来完成特定任务。包就像应用程序，提供超出base
    R内置功能的功能。在[第12章](chapter12.xhtml)中，你将创建自己的R包。
- en: You can install packages using the install.packages() function. You’ll be working
    with the tidyverse package, which provides a range of functions for data import,
    cleaning, analysis, visualization, and more. To install it, enter install.packages("tidyverse").
    Typically, you’ll enter package installation code in the console rather than in
    a script file because you need to install a package only once on your computer
    to access its code in the future.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用install.packages()函数安装包。你将使用tidyverse包，它提供了一系列用于数据导入、清理、分析、可视化等的函数。要安装它，输入install.packages("tidyverse")。通常，你会在控制台中输入包安装代码，而不是在脚本文件中，因为你只需要在电脑上安装一次包，未来就可以访问其代码。
- en: To confirm that the tidyverse package has been installed correctly, click the
    **Packages** tab on the bottom-right pane in RStudio. Search for tidyverse, and
    you should see it pop up.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认tidyverse包是否已正确安装，在RStudio的右下角窗格中点击**Packages**标签。搜索tidyverse，你应该会看到它弹出。
- en: 'Now that you’ve installed the tidyverse, you’ll put it to use. Although you
    need to *install* packages only once per computer, you need to *load* them each
    time you restart RStudio. Return to the *sample-code.R* file and reimport your
    data using a function from the tidyverse package (your filepath will look slightly
    different):'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经安装了tidyverse，接下来将开始使用它。虽然您只需要在每台计算机上*安装*一次包，但每次重新启动RStudio时，您需要*加载*它们。返回到*sample-code.R*文件，并使用tidyverse包中的函数重新导入数据（您的文件路径会略有不同）：
- en: '[PRE13]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'At the top of the script, the line library(tidyverse) loads the tidyverse package.
    Then, the package’s read_csv() function imports the data. Note the underscore
    (_) in place of the period (.) in the function’s name; this differs from the base
    R function you used earlier. Using read_csv() to import CSV files achieves the
    same goal of creating an object, however—in this case, one called population_data_2.
    Enter population_data_2 in the console, and you should see this output:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本顶部的`library(tidyverse)`语句加载了tidyverse包。然后，包中的read_csv()函数用于导入数据。请注意，函数名称中的下划线（_）替代了句点（.）；这与您之前使用的基础R函数不同。使用read_csv()导入CSV文件实现了相同的目标——创建一个对象，在本例中，称为population_data_2。在控制台中输入population_data_2，您应该会看到以下输出：
- en: '[PRE14]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This data looks slightly different from the data you generated using the read.csv()
    function. For example, R shows only the first 10 rows. This variation occurs because
    read_csv() imports the data not as a data frame but as a data type called a *tibble*.
    Both data frames and tibbles are used to describe *rectangular* data like what
    you would see in a spreadsheet. There are some minor differences between data
    frames and tibbles, the most important of which is that tibbles print only the
    first 10 rows by default, while data frames print all rows. For the purposes of
    this book, the two terms are used interchangeably.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据与您使用read.csv()函数生成的数据略有不同。例如，R只显示前10行。之所以会有这种差异，是因为read_csv()导入的数据不是数据框，而是称为*tibble*的数据类型。数据框和tibble都用于描述*矩形*数据，就像电子表格中的数据一样。数据框和tibble之间有一些小的差异，其中最重要的是，tibble默认只打印前10行，而数据框则打印所有行。对于本书的目的，两个术语可以互换使用。
- en: RStudio Projects
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RStudio项目
- en: So far, you’ve imported a CSV file from your *Documents* folder. But because
    others won’t have this exact location on their computer, your code won’t work
    if they try to run it. One solution to this problem is an RStudio project.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经从*Documents*文件夹导入了一个CSV文件。但因为其他人计算机上的文件路径可能不同，所以他们尝试运行您的代码时将无法正常工作。解决这个问题的一个方法是使用RStudio项目。
- en: By working in a project, you can use *relative paths* to your files instead
    of having to write the entire filepath when calling a function to import data.
    Then, if you place the CSV file in your project, anyone can open it by using the
    file’s name, as in read_csv(file = "population-by-state.csv"). This makes the
    path easier to write and enables others to use your code.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在项目中工作，您可以使用*相对路径*来引用文件，而不必在调用导入数据的函数时写出完整的文件路径。然后，如果您将CSV文件放入项目中，任何人都可以通过使用文件名来打开它，像这样：read_csv(file
    = "population-by-state.csv")。这使得路径更容易编写，并使其他人能够使用您的代码。
- en: To create a new RStudio project, go to **File****New Project**. Select either
    **New Directory** or **Existing Directory** and choose where to put your project.
    If you choose New Directory, you’ll need to specify that you want to create a
    new project. Next, choose a name for the new directory and where it should live.
    (Leave the checkboxes that ask about creating a Git repository and using renv
    unchecked; they’re for more advanced purposes.)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的RStudio项目，请前往**文件****新建项目**。选择**新建目录**或**现有目录**，然后选择项目的存储位置。如果选择新建目录，您需要指定想要创建一个新项目。接下来，为新目录选择一个名称并指定它的位置。（不要勾选创建Git仓库和使用renv的选项框，它们用于更高级的用途。）
- en: 'Once you’ve created this project, you should see two major differences in RStudio’s
    appearance. First, the files pane no longer shows every file on your computer.
    Instead, it shows only files in the *example-project* directory. Right now, that’s
    just the *example-project.Rproj* file, which indicates that the folder contains
    a project. Second, at the top right of RStudio, you can see the name *example-project*.
    This label previously read Project: (None). If you want to make sure you’re working
    in a project, check for its name here. [Figure 1-6](chapter1.xhtml#fig1-6) shows
    these changes.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '创建项目后，你应该能看到 RStudio 外观上的两个主要变化。首先，文件面板不再显示你计算机上的所有文件，而是仅显示 *example-project*
    目录中的文件。现在，它只显示 *example-project.Rproj* 文件，这表明该文件夹包含一个项目。其次，在 RStudio 右上角，你可以看到
    *example-project* 的名称。之前这里显示的是 Project: (None)。如果你想确认自己正在一个项目中工作，请在这里检查其名称。[图
    1-6](chapter1.xhtml#fig1-6) 显示了这些变化。'
- en: '![](../images/fig1-6.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig1-6.jpg)'
- en: 'Figure 1-6: RStudio with an active project'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-6：RStudio 中的活动项目
- en: Now that you’ve created a project, copy the *population-by-state.csv* file into
    the *example-project* directory. Once you’ve done so, you should see it in the
    RStudio files pane.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了项目，请将 *population-by-state.csv* 文件复制到 *example-project* 目录中。完成后，你应该能在
    RStudio 的文件面板中看到它。
- en: 'With this CSV file in your project, you can now import it more easily. As before,
    start by loading the tidyverse package. Then, remove the reference to the *Documents*
    folder and import your data by simply using the name of the file:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将此 CSV 文件添加到项目中，你可以更轻松地导入它。像之前一样，首先加载 tidyverse 包。然后，移除对 *Documents* 文件夹的引用，直接使用文件名导入数据：
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The reason you can import the *population-by-state.csv* file this way is that
    the RStudio project sets the working directory to be the root of your project.
    With the working directory set like this, all references to files are relative
    to the *.Rproj* file at the root of the project. Now anyone can run this code
    because it imports the data from a location that is guaranteed to exist on their
    computer.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你能够以这种方式导入 *population-by-state.csv* 文件的原因是 RStudio 项目将工作目录设置为项目的根目录。通过这种方式设置工作目录后，所有对文件的引用都是相对于项目根目录下的
    *.Rproj* 文件的。因此，任何人都可以运行这段代码，因为它从一个在他们计算机上保证存在的位置导入数据。
- en: Data Analysis with the tidyverse
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 tidyverse 进行数据分析
- en: Now that you’ve imported the population data, you’re ready to do a bit of analysis
    on it. Although I’ve been referring to the tidyverse as a single package, it’s
    actually a collection of packages. We’ll explore several of its functions throughout
    this book, but this section introduces you to its basic workflow.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经导入了人口数据，可以开始对其进行一些分析了。尽管我一直把 tidyverse 称为一个单一的包，但它实际上是一个包的集合。我们将在本书中探索其中的几个函数，但本节将介绍其基本工作流程。
- en: tidyverse Functions
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: tidyverse 函数
- en: 'Because you’ve loaded the tidyverse package, you can now access its functions.
    For example, the package’s summarize() function takes a data frame or tibble and
    calculates some piece of information for one or more of the variables in that
    dataset. The following code uses summarize() to calculate the mean population
    of all states:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你已经加载了 tidyverse 包，现在可以访问它的函数。例如，该包的 `summarize()` 函数接受一个数据框或 tibble，并计算该数据集中的一个或多个变量的信息。以下代码使用
    `summarize()` 计算所有州的平均人口：
- en: '[PRE16]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: First, the code passes population_data_2 to the summarize() function’s .data
    argument to tell R to use that data frame to perform the calculation. Next, it
    creates a new variable called mean_population and assigns it to the output of
    the mean() function introduced earlier. The mean() function runs on Pop, one of
    the variables in the population_data_2 data frame.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，代码将 `population_data_2` 传递给 `summarize()` 函数的 `.data` 参数，告诉 R 使用该数据框进行计算。接下来，它创建了一个名为
    `mean_population` 的新变量，并将其赋值为之前介绍的 `mean()` 函数的输出。`mean()` 函数运行在 `Pop` 上，这是 `population_data_2`
    数据框中的一个变量。
- en: 'You might be wondering why you don’t need to use the c() function within mean(),
    as shown earlier in this chapter. The reason is that you’re passing the function
    only one argument here: Pop, which contains the set of population data for which
    you’re calculating the mean. In this case, there’s no need to use c() to combine
    multiple values into one.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，为什么在 `mean()` 函数中不需要像本章前面所示的那样使用 `c()` 函数。原因是你这里只传递了一个参数给函数：Pop，它包含了你计算均值所需的人口数据集。在这种情况下，不需要使用
    `c()` 来将多个值合并为一个。
- en: 'Running this code should return a tibble with a single variable (mean_population),
    as shown here:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此代码应该返回一个包含单个变量（mean_population）的 tibble，如下所示：
- en: '[PRE17]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The variable is of type double (dbl), which is used to hold general numeric
    data. Other common data types are integer (for whole numbers, such as 4, 82, and
    915), character (for text values), and logical (for the TRUE/FALSE values returned
    from comparison operations). The mean_population variable has a value of 6433422,
    the mean population of all states.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 该变量是双精度类型（dbl），用于存储一般的数字数据。其他常见的数据类型有整数（用于存储整数值，如4、82、915）、字符（用于存储文本值）和逻辑（用于存储TRUE/FALSE值，通常来源于比较操作）。mean_population变量的值为6433422，这是所有州的平均人口。
- en: Notice also that the summarize() function creates a totally new tibble from
    the original population_data_2 data frame. This is why the variables from population_data_2
    are no longer present in the output.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，summarize()函数从原始的population_data_2数据框中创建了一个全新的tibble。这就是为什么在输出中不再出现来自population_data_2的变量。
- en: This is a basic example of data analysis, but you can do a lot more with the
    tidyverse.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基本的数据分析示例，但你可以使用tidyverse做更多的事情。
- en: The tidyverse Pipe
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: tidyverse管道
- en: 'One advantage of working with the tidyverse is that it uses the *pipe* for
    multistep operations. The tidyverse pipe, which is written as %>%, allows you
    to break steps into multiple lines. For example, you could rewrite your code using
    the pipe like so:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用tidyverse的一个优势是，它使用*管道*进行多步骤操作。tidyverse管道写作%>%，允许你将步骤拆分成多行。例如，你可以像这样重写你的代码：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This code says, “Start with the population_data_2 data frame, then run the summarize()
    function on it, creating a variable called mean_population by calculating the
    mean of the Pop variable.”
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的意思是：“从population_data_2数据框开始，然后在它上面运行summarize()函数，通过计算Pop变量的均值来创建一个名为mean_population的变量。”
- en: Notice that the line following the pipe is indented. To make the code easier
    to read, RStudio automatically adds two spaces to the start of lines that follow
    pipes.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，管道后的行有缩进。为了使代码更易于阅读，RStudio会自动在管道后的行首添加两个空格。
- en: 'The pipe becomes even more useful when you use multiple steps in your data
    analysis. Say, for example, you want to calculate the mean population of the five
    largest states. The following code adds a line that uses the filter() function,
    also from the tidyverse package, to include only states where the rank variable
    is less than or equal to (<=) 5. Then, it uses summarize() to calculate the mean
    of those states:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在数据分析中使用多个步骤时，管道就显得更加有用。举个例子，假设你想计算五个最大州的平均人口。以下代码添加了一行，使用filter()函数（同样来自tidyverse包）仅包括rank变量小于或等于（<=）5的州。然后，使用summarize()函数计算这些州的平均值：
- en: '[PRE19]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Running this code returns the mean population of the five largest states:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这段代码会返回五个最大州的平均人口：
- en: '[PRE20]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Using the pipe to combine functions lets you refine your data in multiple ways
    while keeping it readable and easy to understand. Indentation can also make your
    code more readable. You’ve seen only a few functions for analysis at this point,
    but the tidyverse has many more functions that enable you to do nearly anything
    you could hope to do with your data. Because of how useful the tidyverse is, it
    will appear in every single piece of R code you write in this book.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使用管道将多个函数组合在一起，让你能够以多种方式精炼数据，同时保持代码的可读性和易理解性。缩进也可以使代码更易于阅读。到目前为止，你只看到了几个用于分析的函数，但tidyverse还有许多其他函数，能够让你几乎做任何你想做的事情。由于tidyverse的强大，它将出现在本书中你写的每一段R代码里。
- en: NOTE
  id: totrans-138
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: R for Data Science, *2nd edition, by Hadley Wickham, Mine Çetinkaya-Rundel,
    and Garrett Grolemund is the bible of tidyverse programming and worth reading
    for more details on how the package’s many functions work.*
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 《R for Data Science》*第二版，由Hadley Wickham、Mine Çetinkaya-Rundel和Garrett Grolemund编写，是tidyverse编程的圣经，值得阅读以了解更多关于包中众多函数如何工作的细节。*
- en: Comments
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: 'In addition to code, R script files often contain *comments*—lines that begin
    with hash marks (#) and aren’t treated as runnable code but instead as notes for
    anyone reading the script. For example, you could add a comment to the code from
    the previous section, like so:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 除了代码，R脚本文件通常还包含*注释*——这些是以井号（#）开头的行，R会忽略这些行，它们只是供阅读脚本的人做备注。例如，你可以在前一节的代码中添加一个注释，像这样：
- en: '[PRE21]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This comment will help others understand what is happening in the code, and
    it can also serve as a useful reminder for you if you haven’t worked on the code
    in a while. R knows to ignore any lines that begin with the hash mark instead
    of trying to run them.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这个注释将帮助他人理解代码中发生的事情，如果你有一段时间没有处理这段代码，它还可以作为一个有用的提醒。R会忽略任何以井号开头的行，而不是尝试运行它们。
- en: How to Get Help
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何获得帮助
- en: Now that you’ve learned the basics of how R works, you’re probably ready to
    dive in and write some code. When you do, though, you’re going to encounter errors.
    Being able to get help when you run into issues is a key part of learning to use
    R successfully. There are two main strategies you can use to get unstuck.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学会了R的基础，可能已经准备好深入编码了。不过，在编写代码时，你会遇到错误。当你遇到问题时，能够获得帮助是成功使用R的重要部分。你可以使用两种主要策略来解决问题。
- en: The first is to read the documentation for the functions you use. Remember,
    to access the documentation for any function, simply enter ? and then the name
    of the function in the console. In the bottom-right pane in [Figure 1-7](chapter1.xhtml#fig1-7),
    for example, you can see the result of running ?read.csv.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个方法是阅读你使用的函数的文档。记住，要访问任何函数的文档，只需在控制台输入 ? 然后输入函数名。例如，在[图1-7](chapter1.xhtml#fig1-7)的右下角面板中，你可以看到运行
    ?read.csv 的结果。
- en: '![](../images/fig1-7.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig1-7.jpg)'
- en: 'Figure 1-7: The documentation for the read.csv() function'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-7：read.csv()函数的文档
- en: Help files can be a bit hard to decipher, but essentially they describe what
    package the function comes from, what the function does, what arguments it accepts,
    and some examples of how to use it.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助文件可能有点难以解读，但本质上它们描述了函数来源的包、函数的功能、它接受的参数，以及如何使用它的一些示例。
- en: NOTE
  id: totrans-150
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*For additional guidance on reading documentation, I recommend the appendix
    of Kieran Healy’s book* Data Visualization: A Practical Introduction*. A free
    online version is available at* [https://socviz.co/appendix.xhtml](https://socviz.co/appendix.xhtml)*.*'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '*有关阅读文档的额外指导，我推荐Kieran Healy的《数据可视化：实用入门》一书的附录。该书的在线免费版可在* [https://socviz.co/appendix.xhtml](https://socviz.co/appendix.xhtml)*.* '
- en: The second approach is to read the documentation websites associated with many
    R packages. These can be easier to read than RStudio’s help files. In addition,
    they often contain longer articles, known as *vignettes*, that provide an overview
    of how a given package works. Reading these can help you understand how to combine
    individual functions in the context of a larger project. Every package discussed
    in this book has a good documentation website.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是阅读与许多R包相关的文档网站。这些网站通常比RStudio的帮助文件更容易阅读。此外，它们通常包含较长的文章，称为*小插曲*，提供了有关如何使用特定包的概述。阅读这些可以帮助你了解如何在更大的项目背景下组合各个函数。本书中讨论的每个包都有一个很好的文档网站。
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned the basics of R programming. You saw how to download
    and set up R and RStudio, what the various RStudio panes are for, and how R script
    files work. You also learned how to import CSV files and explore them in R, how
    to save data as objects, and how to install packages to access additional functions.
    Then, to make the files used in your code more accessible, you created an RStudio
    project. Finally, you experimented with tidyverse functions and the tidyverse
    pipe, and you learned how to get help when those functions don’t work as expected.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了R编程的基础。你了解了如何下载和设置R及RStudio，RStudio的各个面板的作用，以及R脚本文件的工作原理。你还学会了如何导入CSV文件并在R中进行探索，如何将数据保存为对象，以及如何安装包以访问额外的功能。然后，为了使代码中使用的文件更易于访问，你创建了一个RStudio项目。最后，你尝试了tidyverse函数和tidyverse管道，并学会了如何在这些函数没有按预期工作时获得帮助。
- en: Now that you understand the basics, you’re ready to start using R to work with
    your data. See you in [Chapter 2](chapter2.xhtml)!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经掌握了基础，准备开始使用R处理数据了。我们在[第二章](chapter2.xhtml)见！
- en: Additional Resources
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 额外资源
- en: 'Kieran Healy, *Data Visualization: A Practical Introduction* (Princeton, NJ:
    Princeton University Press, 2018), *[https://socviz.co](https://socviz.co)*.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kieran Healy, *数据可视化：实用入门*（普林斯顿，新泽西州：普林斯顿大学出版社，2018），*[https://socviz.co](https://socviz.co)*。
- en: 'Chester Ismay and Albert Y. Kim, *Statistical Inference via Data Science: A
    ModernDive into R and the Tidyverse* (Boca Raton, FL: CRC Press, 2020), *[https://moderndive.com](https://moderndive.com)*.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chester Ismay和Albert Y. Kim, *统计推断与数据科学：R和Tidyverse的现代深入探索*（佛罗里达州博卡拉顿：CRC出版社，2020），*[https://moderndive.com](https://moderndive.com)*。
- en: David Keyes, “Getting Started with R,” online course, accessed November 10,
    2023, *[https://rfortherestofus.com/courses/getting-started](https://rfortherestofus.com/courses/getting-started)*.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: David Keyes, “R入门”，在线课程，访问日期：2023年11月10日，*[https://rfortherestofus.com/courses/getting-started](https://rfortherestofus.com/courses/getting-started)*。
- en: 'Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund, *R for Data Science*,
    2nd ed. (Sebastopol, CA: O’Reilly Media, 2023).'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈德利·威克姆（Hadley Wickham）、米娜·切廷卡亚-伦德尔（Mine Çetinkaya-Rundel）和加勒特·格罗莱蒙德（Garrett
    Grolemund），*R数据科学*，第二版。（加利福尼亚州塞巴斯托波尔：O'Reilly Media，2023年）。
