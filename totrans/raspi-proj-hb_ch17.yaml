- en: '**17'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**17'
- en: Internet of Things Control Center with Node-RED**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Node-RED 构建物联网控制中心**
- en: In this project, you’ll create an Internet of Things app to control your favorite
    household electronics from a web server using Node-RED, a powerful and easy-to-use
    tool for Internet of Things applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将创建一个物联网应用程序，使用 Node-RED 控制你最喜欢的家电，通过 Web 服务器远程操控，它是一个功能强大且易于使用的物联网应用工具。
- en: '![image](../images/f0209-01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0209-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需部件**'
- en: Raspberry Pi
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派
- en: Breadboard
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 面包板
- en: DHT22 temperature and humidity sensor
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: DHT22 温湿度传感器
- en: 4.7 kΩ resistor
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 4.7 kΩ 电阻
- en: Two 5 mm LEDs
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 5 毫米 LED
- en: Two 330 Ω resistor
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 330 Ω 电阻
- en: Jumper wires
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线
- en: '**SOFTWARE REQUIRED**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需软件**'
- en: Node-RED DHT node
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED DHT 节点
- en: Node-RED dashboard
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED 仪表盘
- en: You’re going to create a Node-RED application that controls outputs and reads
    inputs in the local network. You’ll use it to control LEDs, as well as to read
    and display temperature and humidity values using the DHT22 sensor—all remotely
    through a web server.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你将创建一个 Node-RED 应用程序，控制本地网络中的输出并读取输入。你将用它来控制 LED，并使用 DHT22 传感器读取并显示温湿度值——所有这些都通过
    Web 服务器远程完成。
- en: '**INTRODUCING NODE-RED**'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍 Node-RED**'
- en: Node-RED is an open source visual wiring tool for building IoT applications
    that comes already installed on your Pi’s operating system and is designed to
    run perfectly with the Pi.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED 是一个开源的视觉连接工具，用于构建物联网应用程序，它已经预装在树莓派的操作系统中，且与树莓派完美兼容。
- en: Node-RED uses visual programming, with blocks called *nodes* that you wire together
    to perform a certain task, simplifying much of the programming significantly.
    Node-RED allows you to prototype a complex home automation system quickly and
    simply, giving you more time to spend on designing and making cool stuff.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED 使用视觉编程，包含称为*节点*的模块，你可以将它们连接在一起以执行特定任务，从而显著简化了编程。Node-RED 允许你快速且简单地原型化一个复杂的家庭自动化系统，让你有更多时间专注于设计和制作酷炫的东西。
- en: 'We won’t cover everything that Node-RED can do in this project, but here’s
    a brief breakdown if you want to explore further:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会在这个项目中涵盖 Node-RED 的所有功能，但如果你想进一步探索，这里有一个简短的概述：
- en: Access the Pi’s GPIOs.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问树莓派的 GPIO。
- en: Establish a connection with other boards like the Arduino and ESP8266.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立与其他板卡的连接，例如 Arduino 和 ESP8266。
- en: Create a responsive graphical user interface.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建响应式图形用户界面。
- en: Communicate with third-party services.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与第三方服务进行通信。
- en: Retrieve data from the web.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从网上检索数据。
- en: Create time-triggered events.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建时间触发事件。
- en: Store and retrieve data from a database.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库中存储和检索数据。
- en: '**Installing the DHT22 Nodes**'
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**安装 DHT22 节点**'
- en: 'Although the Node-RED software comes already installed with the Pi’s operating
    system, it doesn’t come with a node able to read from the DHT22 sensor. We need
    to install that first, by installing npm (Node Package Management) like so:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Node-RED 软件已经随 Pi 的操作系统预装，但它并没有自带可以读取 DHT22 传感器的节点。我们需要先安装它，通过像下面这样安装 npm（Node
    包管理）：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When prompted, type Y and press ENTER. The installation may take a few minutes.
    Then, enter the following command to upgrade npm to the latest 3.x version, which
    is the version recommended for use with Node-RED:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当系统提示时，输入 Y 并按下 ENTER 键。安装可能需要几分钟时间。然后，输入以下命令将 npm 升级到最新的 3.x 版本，这是与 Node-RED
    一起使用时推荐的版本：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: These commands will output a warning message, but don’t worry—it’s harmless,
    so you can ignore it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将输出一个警告信息，但不用担心——它是无害的，可以忽略。
- en: Next you’ll download and unzip a C library for the Raspberry Pi. You need this
    library to control DHT22 through Node-RED. At the time of writing, the latest
    version of the library is 1.55\. Before you install the library, go to *[http://www.airspayce.com/mikem/bcm2835/](http://www.airspayce.com/mikem/bcm2835/)*
    and check the latest version. Then, enter the following commands, replacing the
    `1.55` highlighted in italics with the latest version.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将下载并解压一个适用于树莓派的 C 库。你需要这个库来通过 Node-RED 控制 DHT22。撰写本文时，库的最新版本为 1.55。安装库之前，请访问
    *[http://www.airspayce.com/mikem/bcm2835/](http://www.airspayce.com/mikem/bcm2835/)*
    查看最新版本。然后，输入以下命令，将斜体部分的 `1.55` 替换为最新版本。
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, enter the following list of commands to compile and install the nodes
    needed to control the DHT22 sensor and add dashboard support:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，输入以下命令列表以编译并安装控制 DHT22 传感器所需的节点，并添加仪表盘支持：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: With all of that installed, reboot your Pi. Now we’ll give you a quick tour
    of Node-RED.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，重启你的 Pi。现在我们将快速介绍 Node-RED。
- en: '**Getting Started with Node-RED**'
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**Node-RED 入门**'
- en: 'To open Node-RED, go to the terminal and enter the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开Node-RED，请进入终端并输入以下命令：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Your terminal window should show something like [Figure 17-1](ch17.xhtml#ch17fig1).
    The highlighted line shows your localhost’s Raspberry Pi IP address followed by
    the number of the port the Node-RED server is running on. *Localhost* is a hostname
    that means “this computer” and resolves to the IP address shown in the terminal
    window: http://127.0.0.1\. Using this IP address you can access Node-RED only
    in your Raspberry Pi browser. To access Node-RED in any browser on your local
    network, you need to find your Pi’s IP address.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你的终端窗口应该会显示类似[图17-1](ch17.xhtml#ch17fig1)的内容。高亮显示的行显示了你本地主机的树莓派IP地址，后面是Node-RED服务器运行的端口号。*本地主机*是一个主机名，表示“这台计算机”，并解析为终端窗口中显示的IP地址：http://127.0.0.1。使用此IP地址，你只能在树莓派浏览器中访问Node-RED。如果要在本地网络中的任何浏览器中访问Node-RED，你需要找到树莓派的IP地址。
- en: '**NOTE**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Usually, instead of going to the terminal, you can open Node-RED by going
    to the taskbar main menu and clicking **Programming ▸ Node-RED**. However, in
    this project, you need to start Node-RED from the terminal because DHT22 nodes
    require administrator permission.*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*通常，你可以通过进入任务栏主菜单并点击**编程 ▸ Node-RED**来打开Node-RED，而不是直接进入终端。然而，在这个项目中，你需要从终端启动Node-RED，因为DHT22节点需要管理员权限。*'
- en: '![image](../images/f0212-01.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0212-01.jpg)'
- en: '**FIGURE 17-1:** Starting Node-RED from the terminal'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**图17-1：** 从终端启动Node-RED'
- en: 'To find your Raspberry Pi IP address, enter the following in the terminal:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找你的树莓派IP地址，请在终端输入以下命令：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Open Chromium and enter *http://<Pi IP address>:1880/*, replacing *<Pi IP address>*
    with your Raspberry Pi’s IP address. Your Node-RED page server should open as
    shown in [Figure 17-2](ch17.xhtml#ch17fig2).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Chromium并输入*http://<Pi IP地址>:1880/*，将*<Pi IP地址>*替换为你的树莓派的IP地址。你的Node-RED页面服务器应该会如[图17-2](ch17.xhtml#ch17fig2)所示打开。
- en: '![image](../images/f0212-02.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0212-02.jpg)'
- en: '**FIGURE 17-2:** The Node-RED editor in your browser'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**图17-2：** 浏览器中的Node-RED编辑器'
- en: On the left you’ll see a list of blocks, or nodes. Nodes are grouped according
    to their function; scroll down the list to see what you have. We’ll just cover
    a small number of existing nodes in this project, including nodes from the input,
    Raspberry_Pi, function, and dashboard sections, illustrated in [Figure 17-3](ch17.xhtml#ch17fig3).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，你会看到一个块或节点的列表。节点根据其功能分组；向下滚动列表查看你所拥有的节点。我们将在这个项目中介绍少量现有节点，包括来自输入、树莓派、功能和仪表板部分的节点，详见[图17-3](ch17.xhtml#ch17fig3)。
- en: '![image](../images/f0213-01.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0213-01.jpg)'
- en: '**FIGURE 17-3:** Some of the Node-RED nodes'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**图17-3：** 一些Node-RED节点'
- en: 'The center box of your Node-RED page is the *flow* section; this is where you
    drag the nodes and wire them together to build your application. On the right
    are several tabs: the *info* tab shows information about a selected node, the
    *debug* tab is used for debugging purposes, and the *dashboard* tab is where you
    organize the user interface widgets of your application. Finally, the *Deploy*
    button saves the changes made to the flow and executes it. Next you’ll wire up
    your hardware, and then put together your flow in Node-RED.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你的Node-RED页面的中央框是*流程*区域；这是你拖动节点并将它们连接起来以构建应用程序的地方。右侧有几个标签：*信息*标签显示选定节点的信息，*调试*标签用于调试，*仪表板*标签是你组织应用程序用户界面小部件的地方。最后，*部署*按钮保存对流程所做的更改并执行它。接下来，你将接线硬件，然后在Node-RED中搭建流程。
- en: '**WIRING THE CIRCUIT**'
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**电路接线**'
- en: 'You should already be familiar with LEDs and the DHT22 sensor, but for a refresher
    on the DHT22 sensor, check [Project 12](ch12.xhtml#ch12). To wire the circuit,
    follow these instructions:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经熟悉LED和DHT22传感器，但如果需要复习DHT22传感器的内容，请查看[项目12](ch12.xhtml#ch12)。接线电路时，请按照以下说明操作：
- en: Connect 5 V and GND from the Pi to a red and blue breadboard rail, respectively.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将树莓派的5V和GND分别连接到面包板的红色和蓝色导轨。
- en: Insert two LEDs into the breadboard. Wire the shorter lead of each LED to the
    GND rail through a 330 Ω resistor. Wire the longer lead of one LED to GPIO 18,
    and the longer lead of the other LED to GPIO 17.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个LED插入面包板。将每个LED的短脚通过330Ω电阻连接到GND导轨。将一个LED的长脚连接到GPIO 18，另一个LED的长脚连接到GPIO 17。
- en: Insert the DHT22 into the breadboard (with the raised side facing you) and wire
    it according to the following table. Your completed circuit should match [Figure
    17-4](ch17.xhtml#ch17fig4).
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将DHT22插入面包板（使其凸起的一面朝向你），并按照下表进行接线。完成的电路应该与[图17-4](ch17.xhtml#ch17fig4)匹配。
- en: '| **DHT22** | **RASPBERRY PI** |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| **DHT22** | **树莓派** |'
- en: '| --- | --- |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 1 | 3.3 V |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 3.3 V |'
- en: '| 2 | GPIO 4 and 3.3 V (via 4.7 kΩ resistor) |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 2 | GPIO 4 和 3.3 V（通过 4.7 kΩ 电阻） |'
- en: '| 3 | Don’t connect |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 不连接 |'
- en: '| 4 | GND |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 4 | GND |'
- en: '![image](../images/f0214-01.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0214-01.jpg)'
- en: '**FIGURE 17-4:** Wiring the DHT22 and two LEDs to the Pi'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 17-4：** 将 DHT22 和两个 LED 连接到树莓派'
- en: '**CREATING THE FLOW**'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**创建流程**'
- en: 'The script, in this case, is the flow you’ll make in Node-RED. This flow will
    allow you to do the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，脚本是你将在 Node-RED 中创建的流程。这个流程将允许你执行以下操作：
- en: Control an LED with an on and off switch. This LED will also be time-sensitive,
    which means it will automatically light up and turn off at a specific time that
    you set.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用开关控制 LED。这个 LED 也是时间敏感的，这意味着它将在你设置的特定时间自动亮起和熄灭。
- en: Control another LED with PWM using a slider to act as a dimmer switch.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用滑块控制另一个 LED，通过 PWM 来充当调光开关。
- en: Read the temperature from the DHT22 sensor and display it on a time-versus-temperature
    chart.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 DHT22 传感器读取温度，并在时间与温度的图表上显示它。
- en: Read the humidity from the DHT22 sensor and display it on a gauge.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 DHT22 传感器读取湿度，并在仪表盘上显示它。
- en: First you’ll make the user interface you’ll use to control the components from
    your server.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将创建一个用户界面，用于从服务器控制组件。
- en: '**Creating the Dashboard User Interface**'
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建仪表板用户界面**'
- en: Nodes from the dashboard section provide widgets that show up in your application
    user interface (UI) to control components. Every widget—like a button, slider,
    or chart—you add to the flow has to be associated with a *group* that tells the
    widget where it should appear on the UI.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 来自仪表板部分的节点提供了在应用程序用户界面（UI）中显示的小部件，用于控制组件。你添加到流程中的每个小部件——如按钮、滑块或图表——都必须与一个*组*关联，指示小部件应显示在
    UI 的位置。
- en: You’ll also need tabs, which are like pages in your application (like tabs in
    a browser). Groups are sections within a tab, where you can group widgets together.
    In any project, you’ll need to create tabs and groups in your dashboard to organize
    the widgets in the UI. You’ll build a tab called “Home” with one group called
    “Dashboard.”
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要标签页，类似于应用程序中的页面（就像浏览器中的标签）。组是标签页中的部分，你可以在其中将小部件分组。在任何项目中，你都需要在仪表板上创建标签页和组，以组织用户界面中的小部件。你将创建一个名为“Home”的标签页，并在其中创建一个名为“Dashboard”的组。
- en: Using [Figure 17-5](ch17.xhtml#ch17fig5) as a reference, select the **dashboard**
    tab ➊ in the top right and then press the **+ tab** button ➋ to create a new tab
    under the Tabs list. Click **edit** to edit the tab ➌ and enter the name Home.
    Once that’s created, press the **+ group** button ➍ to create a new group; then
    click **edit** ➎ and enter the name Dashboard.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以[图 17-5](ch17.xhtml#ch17fig5)为参考，选择右上角的 **仪表板** 标签 ➊，然后按下 **+标签** 按钮 ➋ 在标签列表下创建一个新标签。点击
    **编辑** 以编辑标签 ➌ 并输入名称 Home。创建后，按下 **+组** 按钮 ➍ 创建一个新组；然后点击 **编辑** ➎ 并输入名称 Dashboard。
- en: '![image](../images/f0215-01.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0215-01.jpg)'
- en: '**FIGURE 17-5:** Creating tabs and groups in the dashboard'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 17-5：** 在仪表板中创建标签页和组'
- en: To see how your dashboard currently looks, go to *http://<Pi IP address>:1880/ui*
    in your browser, replacing *<Pi IP address>* with your Raspberry Pi’s IP address
    you got earlier. As you can see in [Figure 17-6](ch17.xhtml#ch17fig6), your user
    interface is empty at the moment because you haven’t added any widgets, so let’s
    add some functionality next.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看当前的仪表板外观，打开浏览器并访问 *http://<Pi IP 地址>:1880/ui*，将 *<Pi IP 地址>* 替换为之前获取的树莓派
    IP 地址。如[图 17-6](ch17.xhtml#ch17fig6)所示，目前你的用户界面是空的，因为你还没有添加任何小部件，所以接下来我们将添加一些功能。
- en: '![image](../images/f0216-01.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0216-01.jpg)'
- en: '**FIGURE 17-6:** The Node-RED user interface'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 17-6：** Node-RED 用户界面'
- en: '**Wiring the Nodes**'
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接节点**'
- en: Now you’re going to add nodes to your flow. Your flow will control the LEDs
    connected to the Raspberry Pi GPIOs and read temperature and humidity from the
    DHT22 sensor.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将向流程中添加节点。你的流程将控制连接到树莓派 GPIO 的 LED，并从 DHT22 传感器读取温度和湿度。
- en: '**Adding a Switch and Scheduling Events**'
  id: totrans-86
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**添加开关和调度事件**'
- en: Go back to the Node-RED editor and add two inject nodes from the input section
    by dragging them into the flow. When you drop them in the flow, their name will
    change to *timestamp*. Add a switch from the dashboard section, and an rpi gpio
    output node (the one with a joint on the left side) from the Raspberry_Pi nodes
    section. Arrange the nodes and wire them as shown in [Figure 17-7](ch17.xhtml#ch17fig7).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0216-02.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 17-7:** The flow for controlling LED 1'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: This set of nodes controls the LED connected to GPIO 17\. This LED can be controlled
    remotely with an on and off switch, and it is also time sensitive; timestamp 1
    determines the time the LED lights up, and timestamp 2 determines the time the
    LED turns off.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'If you double-click a node, a new window will open that allows you to edit
    the node’s properties. Double-click the first timestamp node and edit its properties
    like so: set the payload number to **1**, which sends 1 to the Raspberry Pi GPIO
    17 when this node is triggered. In the repeat field, select **at a specific time**
    and choose the time and day you want your LED to light up; you’ll choose the time
    to turn it off in timestamp 2\. We chose 19:00 (7 PM) for all days of the week.
    You can choose whatever times and days you want. The name field lets you name
    the node, and in our case we’ve called it **On at 7PM**. When you’re done editing
    your node, click the **Done** button. [Figure 17-8](ch17.xhtml#ch17fig8) shows
    the properties we set for this node.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0217-01.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 17-8:** Editing the inject node properties'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Edit the other nodes’ properties to match those in the following table.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '| **NODE** | **PROPERTIES** |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
- en: '| timestamp | Payload: number 1 Repeat: at a specific time'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'At: 19:00'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 'On: select all days |'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '| timestamp | Payload: number 0 Repeat: at a specific time'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'At: 23:00'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'On: select all days |'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '| switch | Group: Dashboard [Home] Label: LED 1'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'On Payload: number 1'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'Off Payload: number 0'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: LED 1 – Switch |'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '| pin | GPIO: GPIO17 – 11 Type: Digital output'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: LED 1 – GPIO 17 |'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: To run your Node-RED application, click the **Deploy** button at the top right.
    This will also save the changes. To see how your application looks, go to *http://<Pi
    IP address>:1880/ui* in the browser. At this point, it should look like [Figure
    17-9](ch17.xhtml#ch17fig9).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0218-01.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 17-9:** The user interface with the LED 1 control switch'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Click the switch to test whether you can control the LED connected to GPIO 17\.
    If not, go back and make sure you’ve wired your nodes correctly and set the right
    properties.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding a Slider**'
  id: totrans-113
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Now, you’ll add the nodes to control the brightness of the LED connected to
    GPIO 18\. Drag a slider and an rpi gpio output node into the flow, and arrange
    them as in [Figure 17-10](ch17.xhtml#ch17fig10).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0218-02.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 17-10:** The flow for controlling LED 1 and LED 2'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Edit the new nodes’ properties as shown in the following table.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑新节点的属性，如下表所示。
- en: '| **NODE** | **PROPERTIES** |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| **节点** | **属性** |'
- en: '| --- | --- |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| slider | Group: Dashboard [Home] Label: LED 2'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '| 滑块 | 组：仪表板 [主页] 标签：LED 2'
- en: 'Range: min:0; max:100; step:1'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 范围：最小值：0；最大值：100；步长：1
- en: 'Name: LED 2 – Slider |'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 名称：LED 2 – 滑块 |
- en: '| pin | GPIO: 12 – GPIO18 Type: PWM output'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '| 引脚 | GPIO：12 – GPIO18 类型：PWM 输出'
- en: 'Name: LED 2 – GPIO 18 |'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 名称：LED 2 – GPIO 18 |
- en: This new set of nodes controls the LED connected to GPIO 18 using PWM. Moving
    the slider will change the LED brightness. Click the **Deploy** button, go to
    the Node-RED UI, and test your application. It should look something like [Figure
    17-11](ch17.xhtml#ch17fig11).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这组新节点使用 PWM 控制连接到 GPIO 18 的 LED。移动滑块将改变 LED 的亮度。点击 **部署** 按钮，前往 Node-RED UI，测试你的应用程序。它应该看起来像
    [图 17-11](ch17.xhtml#ch17fig11)。
- en: '![image](../images/f0219-01.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0219-01.jpg)'
- en: '**FIGURE 17-11:** The user interface with the LED 1 switch and the LED 2 slider'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 17-11：** 带有 LED 1 开关和 LED 2 滑块的用户界面'
- en: '**Adding a Temperature Chart and Humidity Gauge**'
  id: totrans-128
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**添加温度图表和湿度仪表**'
- en: Finally, to create a temperature chart and a humidity gauge, drag an inject
    node, rpi dht22 node, function node, a chart, and a gauge to the flow. The chart
    and the gauge are dashboard nodes. Arrange the nodes so your flow looks like [Figure
    17-13](ch17.xhtml#ch17fig13).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了创建温度图表和湿度仪表，拖动注入节点、rpi dht22 节点、函数节点、图表和仪表到流程中。图表和仪表是仪表板节点。安排节点，使你的流程像
    [图 17-13](ch17.xhtml#ch17fig13) 一样。
- en: '![image](../images/f0219-02.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0219-02.jpg)'
- en: '**FIGURE 17-12:** The complete Node-RED flow'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 17-12：** 完整的 Node-RED 流程'
- en: Edit the new nodes’ properties with the settings in the following table.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑新节点的属性，使用以下表格中的设置。
- en: '| **NODE** | **PROPERTIES** |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| **节点** | **属性** |'
- en: '| --- | --- |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| timestamp | Payload: Boolean true Repeat: interval'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '| 时间戳 | 载荷：布尔值 true 重复：间隔'
- en: 'Every: 1 minute'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 每次：1分钟
- en: 'Name: Read DHT22 |'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 名称：读取 DHT22 |
- en: '| rpi-dht22 | Sensor model: DHT22 Pin numbering: BCM GPIO'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '| rpi-dht22 | 传感器型号：DHT22 引脚编号：BCM GPIO'
- en: 'Pin number: 4'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 引脚编号：4
- en: 'Name: DHT22 – GPIO 4 |'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 名称：DHT22 – GPIO 4 |
- en: '| chart | Group: Dashboard [Home] Label: Temperature'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '| 图表 | 组：仪表板 [主页] 标签：温度'
- en: 'Type: Line Chart'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 类型：折线图
- en: 'X-axis: 1 hour'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: X轴：1小时
- en: 'X-axis Label: HH:mm'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: X轴标签：HH:mm
- en: 'Name: Temperature – Chart |'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 名称：温度 – 图表 |
- en: '| f | Name: Get humidity Function:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '| f | 名称：获取湿度 功能：'
- en: msg.payload = msg.humidity;
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: msg.payload = msg.humidity;
- en: return msg; |
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 msg; |
- en: '| gauge | Group: Dashboard [Home] Type: Gauge'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '| 仪表盘 | 组：仪表板 [主页] 类型：仪表'
- en: 'Label: Humidity'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 标签：湿度
- en: 'Value format: {{value}}'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 值格式：{{value}}
- en: 'Units: %'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 单位：%
- en: 'Range: min:0; max:100'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 范围：最小值：0；最大值：100
- en: 'Name: Humidity - Gauge |'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 名称：湿度 - 仪表 |
- en: Click the **Deploy** button and once again test your application. Remember,
    if you run into any trouble, make sure that your properties match the tables here
    and double-check the wiring of your nodes against the figures.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **部署** 按钮，再次测试你的应用程序。记得，如果遇到问题，确保你的属性与此处的表格一致，并再次检查节点的接线与图示是否匹配。
- en: '**RUNNING YOUR APPLICATION**'
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**运行应用程序**'
- en: Congratulations! You’ve built your first IoT application with Node-RED. Go to
    *http://<Pi IP address>:1880/ui* to see how your user interface looks. You can
    access this URL using any browser on the local network, whether that’s on your
    computer or smartphone. [Figure 17-13](ch17.xhtml#ch17fig13) shows the final circuit
    you can control using your Node-RED application.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经用 Node-RED 构建了第一个物联网应用程序。前往 *http://<Pi IP 地址>:1880/ui* 查看用户界面效果。你可以在本地网络上的任何浏览器（无论是电脑还是智能手机）中访问这个
    URL。[图 17-13](ch17.xhtml#ch17fig13) 显示了你可以通过 Node-RED 应用程序控制的最终电路。
- en: '![image](../images/f0221-01.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0221-01.jpg)'
- en: '**FIGURE 17-13:** IoT project with Node-RED'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 17-13：** 使用 Node-RED 的物联网项目'
- en: Your application has a switch to control LED 1, which is also time sensitive;
    a slider to control the brightness of LED 2; and a chart and gauge to display
    temperature and humidity.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用程序有一个开关来控制 LED 1，它也具有时间敏感性；一个滑块来控制 LED 2 的亮度；还有一个图表和仪表来显示温度和湿度。
- en: '**TAKING IT FURTHER**'
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步扩展**'
- en: 'This project just scratched the surface of what Node-RED can do. Here are some
    ideas for taking this project further:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目仅仅触及了 Node-RED 的表面。以下是一些进一步扩展此项目的想法：
- en: Replace the time-sensitive LED with a relay and a lamp (refer to [Project 16](ch16.xhtml#ch16)
    for an introduction to the relay module).
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用继电器和灯泡替换时间敏感的 LED（有关继电器模块的介绍，请参见 [项目 16](ch16.xhtml#ch16)）。
- en: Add more sensor readings to your application, like the smoke sensor and movement
    detection.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向应用程序添加更多传感器读取，例如烟雾传感器和运动检测。
