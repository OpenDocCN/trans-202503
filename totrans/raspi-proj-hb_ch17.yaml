- en: '**17'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Internet of Things Control Center with Node-RED**
  prefs: []
  type: TYPE_NORMAL
- en: In this project, you’ll create an Internet of Things app to control your favorite
    household electronics from a web server using Node-RED, a powerful and easy-to-use
    tool for Internet of Things applications.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0209-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: DHT22 temperature and humidity sensor
  prefs: []
  type: TYPE_NORMAL
- en: 4.7 kΩ resistor
  prefs: []
  type: TYPE_NORMAL
- en: Two 5 mm LEDs
  prefs: []
  type: TYPE_NORMAL
- en: Two 330 Ω resistor
  prefs: []
  type: TYPE_NORMAL
- en: Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: '**SOFTWARE REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Node-RED DHT node
  prefs: []
  type: TYPE_NORMAL
- en: Node-RED dashboard
  prefs: []
  type: TYPE_NORMAL
- en: You’re going to create a Node-RED application that controls outputs and reads
    inputs in the local network. You’ll use it to control LEDs, as well as to read
    and display temperature and humidity values using the DHT22 sensor—all remotely
    through a web server.
  prefs: []
  type: TYPE_NORMAL
- en: '**INTRODUCING NODE-RED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Node-RED is an open source visual wiring tool for building IoT applications
    that comes already installed on your Pi’s operating system and is designed to
    run perfectly with the Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Node-RED uses visual programming, with blocks called *nodes* that you wire together
    to perform a certain task, simplifying much of the programming significantly.
    Node-RED allows you to prototype a complex home automation system quickly and
    simply, giving you more time to spend on designing and making cool stuff.
  prefs: []
  type: TYPE_NORMAL
- en: 'We won’t cover everything that Node-RED can do in this project, but here’s
    a brief breakdown if you want to explore further:'
  prefs: []
  type: TYPE_NORMAL
- en: Access the Pi’s GPIOs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establish a connection with other boards like the Arduino and ESP8266.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a responsive graphical user interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communicate with third-party services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieve data from the web.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create time-triggered events.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Store and retrieve data from a database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Installing the DHT22 Nodes**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Although the Node-RED software comes already installed with the Pi’s operating
    system, it doesn’t come with a node able to read from the DHT22 sensor. We need
    to install that first, by installing npm (Node Package Management) like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When prompted, type Y and press ENTER. The installation may take a few minutes.
    Then, enter the following command to upgrade npm to the latest 3.x version, which
    is the version recommended for use with Node-RED:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: These commands will output a warning message, but don’t worry—it’s harmless,
    so you can ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: Next you’ll download and unzip a C library for the Raspberry Pi. You need this
    library to control DHT22 through Node-RED. At the time of writing, the latest
    version of the library is 1.55\. Before you install the library, go to *[http://www.airspayce.com/mikem/bcm2835/](http://www.airspayce.com/mikem/bcm2835/)*
    and check the latest version. Then, enter the following commands, replacing the
    `1.55` highlighted in italics with the latest version.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, enter the following list of commands to compile and install the nodes
    needed to control the DHT22 sensor and add dashboard support:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: With all of that installed, reboot your Pi. Now we’ll give you a quick tour
    of Node-RED.
  prefs: []
  type: TYPE_NORMAL
- en: '**Getting Started with Node-RED**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To open Node-RED, go to the terminal and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Your terminal window should show something like [Figure 17-1](ch17.xhtml#ch17fig1).
    The highlighted line shows your localhost’s Raspberry Pi IP address followed by
    the number of the port the Node-RED server is running on. *Localhost* is a hostname
    that means “this computer” and resolves to the IP address shown in the terminal
    window: http://127.0.0.1\. Using this IP address you can access Node-RED only
    in your Raspberry Pi browser. To access Node-RED in any browser on your local
    network, you need to find your Pi’s IP address.'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Usually, instead of going to the terminal, you can open Node-RED by going
    to the taskbar main menu and clicking **Programming ▸ Node-RED**. However, in
    this project, you need to start Node-RED from the terminal because DHT22 nodes
    require administrator permission.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0212-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 17-1:** Starting Node-RED from the terminal'
  prefs: []
  type: TYPE_NORMAL
- en: 'To find your Raspberry Pi IP address, enter the following in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Open Chromium and enter *http://<Pi IP address>:1880/*, replacing *<Pi IP address>*
    with your Raspberry Pi’s IP address. Your Node-RED page server should open as
    shown in [Figure 17-2](ch17.xhtml#ch17fig2).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0212-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 17-2:** The Node-RED editor in your browser'
  prefs: []
  type: TYPE_NORMAL
- en: On the left you’ll see a list of blocks, or nodes. Nodes are grouped according
    to their function; scroll down the list to see what you have. We’ll just cover
    a small number of existing nodes in this project, including nodes from the input,
    Raspberry_Pi, function, and dashboard sections, illustrated in [Figure 17-3](ch17.xhtml#ch17fig3).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0213-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 17-3:** Some of the Node-RED nodes'
  prefs: []
  type: TYPE_NORMAL
- en: 'The center box of your Node-RED page is the *flow* section; this is where you
    drag the nodes and wire them together to build your application. On the right
    are several tabs: the *info* tab shows information about a selected node, the
    *debug* tab is used for debugging purposes, and the *dashboard* tab is where you
    organize the user interface widgets of your application. Finally, the *Deploy*
    button saves the changes made to the flow and executes it. Next you’ll wire up
    your hardware, and then put together your flow in Node-RED.'
  prefs: []
  type: TYPE_NORMAL
- en: '**WIRING THE CIRCUIT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You should already be familiar with LEDs and the DHT22 sensor, but for a refresher
    on the DHT22 sensor, check [Project 12](ch12.xhtml#ch12). To wire the circuit,
    follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect 5 V and GND from the Pi to a red and blue breadboard rail, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert two LEDs into the breadboard. Wire the shorter lead of each LED to the
    GND rail through a 330 Ω resistor. Wire the longer lead of one LED to GPIO 18,
    and the longer lead of the other LED to GPIO 17.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the DHT22 into the breadboard (with the raised side facing you) and wire
    it according to the following table. Your completed circuit should match [Figure
    17-4](ch17.xhtml#ch17fig4).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **DHT22** | **RASPBERRY PI** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 3.3 V |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | GPIO 4 and 3.3 V (via 4.7 kΩ resistor) |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | Don’t connect |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | GND |'
  prefs: []
  type: TYPE_TB
- en: '![image](../images/f0214-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 17-4:** Wiring the DHT22 and two LEDs to the Pi'
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE FLOW**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The script, in this case, is the flow you’ll make in Node-RED. This flow will
    allow you to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Control an LED with an on and off switch. This LED will also be time-sensitive,
    which means it will automatically light up and turn off at a specific time that
    you set.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control another LED with PWM using a slider to act as a dimmer switch.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read the temperature from the DHT22 sensor and display it on a time-versus-temperature
    chart.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read the humidity from the DHT22 sensor and display it on a gauge.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First you’ll make the user interface you’ll use to control the components from
    your server.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating the Dashboard User Interface**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Nodes from the dashboard section provide widgets that show up in your application
    user interface (UI) to control components. Every widget—like a button, slider,
    or chart—you add to the flow has to be associated with a *group* that tells the
    widget where it should appear on the UI.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also need tabs, which are like pages in your application (like tabs in
    a browser). Groups are sections within a tab, where you can group widgets together.
    In any project, you’ll need to create tabs and groups in your dashboard to organize
    the widgets in the UI. You’ll build a tab called “Home” with one group called
    “Dashboard.”
  prefs: []
  type: TYPE_NORMAL
- en: Using [Figure 17-5](ch17.xhtml#ch17fig5) as a reference, select the **dashboard**
    tab ➊ in the top right and then press the **+ tab** button ➋ to create a new tab
    under the Tabs list. Click **edit** to edit the tab ➌ and enter the name Home.
    Once that’s created, press the **+ group** button ➍ to create a new group; then
    click **edit** ➎ and enter the name Dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0215-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 17-5:** Creating tabs and groups in the dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: To see how your dashboard currently looks, go to *http://<Pi IP address>:1880/ui*
    in your browser, replacing *<Pi IP address>* with your Raspberry Pi’s IP address
    you got earlier. As you can see in [Figure 17-6](ch17.xhtml#ch17fig6), your user
    interface is empty at the moment because you haven’t added any widgets, so let’s
    add some functionality next.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0216-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 17-6:** The Node-RED user interface'
  prefs: []
  type: TYPE_NORMAL
- en: '**Wiring the Nodes**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now you’re going to add nodes to your flow. Your flow will control the LEDs
    connected to the Raspberry Pi GPIOs and read temperature and humidity from the
    DHT22 sensor.
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding a Switch and Scheduling Events**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Go back to the Node-RED editor and add two inject nodes from the input section
    by dragging them into the flow. When you drop them in the flow, their name will
    change to *timestamp*. Add a switch from the dashboard section, and an rpi gpio
    output node (the one with a joint on the left side) from the Raspberry_Pi nodes
    section. Arrange the nodes and wire them as shown in [Figure 17-7](ch17.xhtml#ch17fig7).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0216-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 17-7:** The flow for controlling LED 1'
  prefs: []
  type: TYPE_NORMAL
- en: This set of nodes controls the LED connected to GPIO 17\. This LED can be controlled
    remotely with an on and off switch, and it is also time sensitive; timestamp 1
    determines the time the LED lights up, and timestamp 2 determines the time the
    LED turns off.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you double-click a node, a new window will open that allows you to edit
    the node’s properties. Double-click the first timestamp node and edit its properties
    like so: set the payload number to **1**, which sends 1 to the Raspberry Pi GPIO
    17 when this node is triggered. In the repeat field, select **at a specific time**
    and choose the time and day you want your LED to light up; you’ll choose the time
    to turn it off in timestamp 2\. We chose 19:00 (7 PM) for all days of the week.
    You can choose whatever times and days you want. The name field lets you name
    the node, and in our case we’ve called it **On at 7PM**. When you’re done editing
    your node, click the **Done** button. [Figure 17-8](ch17.xhtml#ch17fig8) shows
    the properties we set for this node.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0217-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 17-8:** Editing the inject node properties'
  prefs: []
  type: TYPE_NORMAL
- en: Edit the other nodes’ properties to match those in the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| **NODE** | **PROPERTIES** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| timestamp | Payload: number 1 Repeat: at a specific time'
  prefs: []
  type: TYPE_NORMAL
- en: 'At: 19:00'
  prefs: []
  type: TYPE_NORMAL
- en: 'On: select all days |'
  prefs: []
  type: TYPE_NORMAL
- en: '| timestamp | Payload: number 0 Repeat: at a specific time'
  prefs: []
  type: TYPE_NORMAL
- en: 'At: 23:00'
  prefs: []
  type: TYPE_NORMAL
- en: 'On: select all days |'
  prefs: []
  type: TYPE_NORMAL
- en: '| switch | Group: Dashboard [Home] Label: LED 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'On Payload: number 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'Off Payload: number 0'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: LED 1 – Switch |'
  prefs: []
  type: TYPE_NORMAL
- en: '| pin | GPIO: GPIO17 – 11 Type: Digital output'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: LED 1 – GPIO 17 |'
  prefs: []
  type: TYPE_NORMAL
- en: To run your Node-RED application, click the **Deploy** button at the top right.
    This will also save the changes. To see how your application looks, go to *http://<Pi
    IP address>:1880/ui* in the browser. At this point, it should look like [Figure
    17-9](ch17.xhtml#ch17fig9).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0218-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 17-9:** The user interface with the LED 1 control switch'
  prefs: []
  type: TYPE_NORMAL
- en: Click the switch to test whether you can control the LED connected to GPIO 17\.
    If not, go back and make sure you’ve wired your nodes correctly and set the right
    properties.
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding a Slider**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Now, you’ll add the nodes to control the brightness of the LED connected to
    GPIO 18\. Drag a slider and an rpi gpio output node into the flow, and arrange
    them as in [Figure 17-10](ch17.xhtml#ch17fig10).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0218-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 17-10:** The flow for controlling LED 1 and LED 2'
  prefs: []
  type: TYPE_NORMAL
- en: Edit the new nodes’ properties as shown in the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| **NODE** | **PROPERTIES** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| slider | Group: Dashboard [Home] Label: LED 2'
  prefs: []
  type: TYPE_NORMAL
- en: 'Range: min:0; max:100; step:1'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: LED 2 – Slider |'
  prefs: []
  type: TYPE_NORMAL
- en: '| pin | GPIO: 12 – GPIO18 Type: PWM output'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: LED 2 – GPIO 18 |'
  prefs: []
  type: TYPE_NORMAL
- en: This new set of nodes controls the LED connected to GPIO 18 using PWM. Moving
    the slider will change the LED brightness. Click the **Deploy** button, go to
    the Node-RED UI, and test your application. It should look something like [Figure
    17-11](ch17.xhtml#ch17fig11).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0219-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 17-11:** The user interface with the LED 1 switch and the LED 2 slider'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding a Temperature Chart and Humidity Gauge**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Finally, to create a temperature chart and a humidity gauge, drag an inject
    node, rpi dht22 node, function node, a chart, and a gauge to the flow. The chart
    and the gauge are dashboard nodes. Arrange the nodes so your flow looks like [Figure
    17-13](ch17.xhtml#ch17fig13).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0219-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 17-12:** The complete Node-RED flow'
  prefs: []
  type: TYPE_NORMAL
- en: Edit the new nodes’ properties with the settings in the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| **NODE** | **PROPERTIES** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| timestamp | Payload: Boolean true Repeat: interval'
  prefs: []
  type: TYPE_NORMAL
- en: 'Every: 1 minute'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: Read DHT22 |'
  prefs: []
  type: TYPE_NORMAL
- en: '| rpi-dht22 | Sensor model: DHT22 Pin numbering: BCM GPIO'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pin number: 4'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: DHT22 – GPIO 4 |'
  prefs: []
  type: TYPE_NORMAL
- en: '| chart | Group: Dashboard [Home] Label: Temperature'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type: Line Chart'
  prefs: []
  type: TYPE_NORMAL
- en: 'X-axis: 1 hour'
  prefs: []
  type: TYPE_NORMAL
- en: 'X-axis Label: HH:mm'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: Temperature – Chart |'
  prefs: []
  type: TYPE_NORMAL
- en: '| f | Name: Get humidity Function:'
  prefs: []
  type: TYPE_NORMAL
- en: msg.payload = msg.humidity;
  prefs: []
  type: TYPE_NORMAL
- en: return msg; |
  prefs: []
  type: TYPE_NORMAL
- en: '| gauge | Group: Dashboard [Home] Type: Gauge'
  prefs: []
  type: TYPE_NORMAL
- en: 'Label: Humidity'
  prefs: []
  type: TYPE_NORMAL
- en: 'Value format: {{value}}'
  prefs: []
  type: TYPE_NORMAL
- en: 'Units: %'
  prefs: []
  type: TYPE_NORMAL
- en: 'Range: min:0; max:100'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: Humidity - Gauge |'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Deploy** button and once again test your application. Remember,
    if you run into any trouble, make sure that your properties match the tables here
    and double-check the wiring of your nodes against the figures.
  prefs: []
  type: TYPE_NORMAL
- en: '**RUNNING YOUR APPLICATION**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Congratulations! You’ve built your first IoT application with Node-RED. Go to
    *http://<Pi IP address>:1880/ui* to see how your user interface looks. You can
    access this URL using any browser on the local network, whether that’s on your
    computer or smartphone. [Figure 17-13](ch17.xhtml#ch17fig13) shows the final circuit
    you can control using your Node-RED application.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0221-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 17-13:** IoT project with Node-RED'
  prefs: []
  type: TYPE_NORMAL
- en: Your application has a switch to control LED 1, which is also time sensitive;
    a slider to control the brightness of LED 2; and a chart and gauge to display
    temperature and humidity.
  prefs: []
  type: TYPE_NORMAL
- en: '**TAKING IT FURTHER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This project just scratched the surface of what Node-RED can do. Here are some
    ideas for taking this project further:'
  prefs: []
  type: TYPE_NORMAL
- en: Replace the time-sensitive LED with a relay and a lamp (refer to [Project 16](ch16.xhtml#ch16)
    for an introduction to the relay module).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add more sensor readings to your application, like the smoke sensor and movement
    detection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
