["```\nif (distance <= 15)\n```", "```\n/* NewPing Library created by Tim Eckel teckel@leethost.com.\n   Copyright 2012 License: GNU GPL v3\n   http://www.gnu.org/licenses/gpl-3.0.html\n*/\n\n#include <NewPing.h> // Call NewPing library\n#include <Servo.h>   // Call Servo library\n#define trigPin 12   // Trig pin connected to Arduino 12\n#define echoPin 13   // Echo pin connected to Arduino 13\n#define MAX_DISTANCE 500\nNewPing sonar(trigPin, echoPin, MAX_DISTANCE); // Library setting\nint greenLed = 3, redLed = 2; // Set green LED to pin 3, red to pin 2\nint pos = 20;\nServo myservo;\n\nvoid setup() {\n  Serial.begin (115200);\n  pinMode(trigPin, OUTPUT);\n  pinMode(echoPin, INPUT);\n  pinMode(greenLed, OUTPUT);\n  pinMode(redLed, OUTPUT);\n  myservo.attach(9); // Servo attached to pin 9\n}\n\nvoid loop() {\n  int duration, distance, pos = 0, i;\n  digitalWrite(trigPin, LOW);\n  delayMicroseconds(2);\n  digitalWrite(trigPin, HIGH); // Trig pin sends a ping\n  delayMicroseconds(10);\n  digitalWrite(trigPin, LOW);\n  duration = pulseIn(echoPin, HIGH); // Echo receives the ping\n  distance = (duration / 2) / 29.1;\n  Serial.print(distance);\n  Serial.println(\" cm\");\n  // If sensor detects object within 15 cm\n  if (distance <= 15) {\n    digitalWrite(greenLed, LOW); // Turn off green LED\n    digitalWrite(redLed, HIGH);  // Turn on red LED\n    myservo.write(180);          // Move servo arm 180 degrees\n    delay(450);\n    digitalWrite(redLed, LOW);   // Light the red LED\n    myservo.write(90);\n    delay(450);\n    digitalWrite(redLed, HIGH);\n    myservo.write(0);\n    delay(450);\n    digitalWrite(redLed, LOW);\n    myservo.write(90);\n  }\n  // Otherwise\n  else {\n    digitalWrite(redLed, LOW);    // Turn off red LED\n    digitalWrite(greenLed, HIGH); // Turn on green LED\n    myservo.write(90);\n  }\n  delay(450);\n}\n```", "```\n    void setup() {\n      pinMode(4, OUTPUT);\n      Serial.begin(9600);\n    }\n\n    void loop() {\n      digitalWrite(4, HIGH);\n      Serial.println(analogRead(0));\n    }\n    ```", "```\nif (analogRead(0) > 850) {\n```", "```\nint buzzPin = 11; // Pin connected to the piezo\nint LED = 13;     // Pin connected to the LED\n\nvoid setup() {\n  pinMode(buzzPin, OUTPUT); // Set pin as output\n  pinMode(LED, OUTPUT);     // Set pin as output\n}\n\nvoid loop() {\n  if (analogRead(0) > 850) { // Set this value depending on the\n                             // values of your photoresistor\n    digitalWrite(buzzPin, HIGH); // If value is above 850,\n                                 // turn the piezo ON\n    digitalWrite(LED, LOW);      // If value is above 850,\n                                 // turn the LED OFF\n    delay(1000); // Wait for 1 second\n    digitalWrite(buzzPin, LOW);\n    digitalWrite(LED, LOW);\n  } else {\n    digitalWrite(buzzPin, LOW); // If value is 850 or below\n                                // (light shining on photoresistor),\n                                // the piezo is off\n    digitalWrite(LED, HIGH);    // If value is 850 or below\n                                // (light shining on photoresistor),\n                                // the LED is on\n  }\n}\n```", "```\n   #include <NewPing.h> // Call NewPing library\n   #include <Servo.h>   // Call Servo library\n   #define trigPin 12   // Pin connected to ultrasonic sensor Trig\n   #define echoPin 13   // Pin connected the ultrasonic sensor Echo\n   #define MAX_DISTANCE 500\n\n   NewPing sonar(trigPin, echoPin, MAX_DISTANCE);\n\n   int blaster = 3; // Pin connected to the blaster\n\n   int angle = 0; // Set servo position in degrees\n\n   Servo servo;\n\n   void setup() {\n     Serial.begin (115200);\n     pinMode(trigPin, OUTPUT);\n     pinMode(echoPin, INPUT);\n     pinMode(blaster, OUTPUT);\n     servo.attach(9); // Pin connected to servo\n   }\n\n   void loop() {\n     int duration, distance, pos = 0, i;\n     digitalWrite(trigPin, LOW);\n     delayMicroseconds(2);\n     digitalWrite(trigPin, HIGH); // trigPin sends a ping\n     delayMicroseconds(10);\n     digitalWrite(trigPin, LOW);\n     duration = pulseIn(echoPin, HIGH); // echoPin receives the ping\n     distance = (duration / 2) / 29.1;\n     Serial.print(distance);\n     Serial.println(\" cm\");\n➊   if (distance <= 15) { // If distance is fewer than 15 cm\n       digitalWrite(blaster, HIGH); // Blaster will fire\n       servo.write(90);\n     }\n     else {\n       digitalWrite(blaster, LOW); // Otherwise, blaster won't activate\n       for (angle = 0; angle < 180; angle++) { // Sweep the servo\n         servo.write(angle);\n         delay(15);\n       }\n       for (angle = 180; angle > 0; angle--) {\n         servo.write(angle);\n       }\n       delay(450);\n     }\n   }\n```", "```\nint ledPin = 13;           // Pin connected to LED\nint inputPin = 2;          // Pin connected to PIR sensor\nint pirState = LOW;        // Start PIR state LOW with no motion\nint val = 0;               // Variable for reading the pin status\nint pinSpeaker = 10;       // Pin connected to piezo\n\nvoid setup() {\n  pinMode(ledPin, OUTPUT);  // Set LED as output\n  pinMode(inputPin, INPUT); // Set sensor as input\n  pinMode(pinSpeaker, OUTPUT);\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  val = digitalRead(inputPin);   // Read PIR input value\n  if (val == HIGH) {             // Check if input is HIGH\n    digitalWrite(ledPin, HIGH);  // If it is, turn ON LED\n    playTone(300, 160);\n    delay(150);\n    if (pirState == LOW) {\n      // Print to the Serial Monitor if motion detected\n      Serial.println(\"Motion detected!\");\n\n      pirState = HIGH;\n    }\n  } else {\n      digitalWrite(ledPin, LOW); // If input is not HIGH,\n                                 // turn OFF LED\n      playTone(0, 0);\n      delay(300);\n      if (pirState == HIGH) {\n      Serial.println(\"Motion ended!\");\n      pirState = LOW;\n    }\n  }\n}\n\nvoid playTone(long duration, int freq) { // Duration in ms,\n                                         // frequency in Hz\n    duration *= 1000;\n    int period = (1.0 / freq) * 1000000;\n    long elapsed_time = 0;\n    while (elapsed_time < duration) {\n      digitalWrite(pinSpeaker, HIGH);\n      delayMicroseconds(period / 2);\n      digitalWrite(pinSpeaker, LOW);\n      delayMicroseconds(period / 2);\n      elapsed_time += (period);\n    }\n}\n```", "```\n#include <Keypad.h>\n\nconst byte ROWS = 4;\nconst byte COLS = 4;\nchar keys[ROWS][COLS] = {\n  {'1','2','3','A'},\n  {'4','5','6','B'},\n  {'7','8','9','C'},\n  {'*','0','#','D'}\n};\nbyte rowPins[ROWS] = {2,3,4,5};\nbyte colPins[COLS] = {6,7,8,9};\n\nKeypad keypad = Keypad(makeKeymap(keys), rowPins, colPins,\n                       ROWS, COLS);\n\nvoid setup() {\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  char key = keypad.getKey();\n  if (key != NO_KEY){\n    Serial.println(key);\n  }\n}\n```", "```\nPassword password = Password(\"2468\");\n```", "```\n/* Keypad Library for Arduino\n   Authors: Mark Stanley, Alexander Brevig\n   http://playground.arduino.cc/Main/KeypadTutorial\n*/\n\n#include <Password.h>\n#include <Keypad.h>\n#include <Servo.h>\n\nServo myservo;\nPassword password = Password(\"2468\"); // Set password\n\nconst byte ROWS = 4; // Set four rows\nconst byte COLS = 4; // Set four columns\n\nchar keys[ROWS][COLS] = { // Define the keymap\n  {'1','2','3','A'},\n  {'4','5','6','B'},\n  {'7','8','9','C'},\n  {'*','0','#','D'}\n};\nbyte rowPins[ROWS] = { 9,8,7,6 };  // Pins connected to keypad\n                                   // ROW0, ROW1, ROW2 and ROW3\nbyte colPins[COLS] = { 5,4,3,2, }; // Pins connected to keypad\n                                   // COL0, COL1 and COL2\n// Create the keypad\nKeypad keypad = Keypad(makeKeymap(keys), rowPins, colPins,\n                       ROWS, COLS);\nvoid setup() {\n  Serial.begin(9600);\n  delay(200);\n  pinMode(11, OUTPUT); // Set green LED as output\n  pinMode(12, OUTPUT); // Set red LED as output\n  myservo.attach(13);  // Pin connected to servo\n  keypad.addEventListener(keypadEvent); // Add an event listener to\n                                        // detect keypresses\n}\n\nvoid loop() {\n  keypad.getKey();\n  myservo.write(0);\n}\n\nvoid keypadEvent(KeypadEvent eKey) {\n  switch (keypad.getState()) {\n    case PRESSED:\n    Serial.print(\"Pressed: \");\n    Serial.println(eKey);\n    switch (eKey) {\n      case '*': checkPassword(); break;\n      case '#': password.reset(); break;\n      default: password.append(eKey);\n    }\n  }\n}\n\nvoid checkPassword() {\n  if (password.evaluate() ){\n    Serial.println(\"Success\"); // If the password is correct...\n    myservo.write(90);         // Move servo arm 90 degrees\n    digitalWrite(11, HIGH);    // Turn on green LED\n    delay(500);                // Wait 5 seconds\n    digitalWrite(11, LOW);     // Turn off green LED\n  } else {\n    Serial.println(\"Wrong\");   // If the password is incorrect...\n    myservo.write(0);\n    digitalWrite(12, HIGH);    // Turn on red LED\n    delay(500);                // Wait 5 seconds\n    digitalWrite(12, LOW);     // Turn off red LED\n\n  }\n}\n```", "```\n    // RFID Library Created by Miguel Balboa (circuitito.com)\n    #include <SPI.h>\n    #include <RFID.h>\n    #define SS_PIN 10\n    #define RST_PIN 9\n    RFID rfid(SS_PIN, RST_PIN);\n\n    // Setup variables\n    int serNum0;\n    int serNum1;\n    int serNum2;\n    int serNum3;\n    int serNum4;\n\n    void setup() {\n      Serial.begin(9600);\n      SPI.begin();\n      rfid.init();\n    }\n\n    void loop() { // This loop looks for a card(s) to read\n      if (rfid.isCard()) {\n        if (rfid.readCardSerial()) {\n          if (rfid.serNum[0] != serNum0\n              && rfid.serNum[1] != serNum1\n              && rfid.serNum[2] != serNum2\n              && rfid.serNum[3] != serNum3\n              && rfid.serNum[4] != serNum4\n             ) {\n            // When a card is found, the following code will run\n            Serial.println(\" \");\n            Serial.println(\"Card found\");\n            serNum0 = rfid.serNum[0];\n            serNum1 = rfid.serNum[1];\n            serNum2 = rfid.serNum[2];\n            serNum3 = rfid.serNum[3];\n            serNum4 = rfid.serNum[4];\n\n            // Print the card ID to the Serial Monitor of the IDE\n            Serial.println(\"Cardnumber:\");\n            Serial.print(\"Dec: \");\n            Serial.print(rfid.serNum[0], DEC);\n            Serial.print(\", \");\n            Serial.print(rfid.serNum[1], DEC);\n            Serial.print(\", \");\n            Serial.print(rfid.serNum[2], DEC);\n            Serial.print(\", \");\n            Serial.print(rfid.serNum[3], DEC);\n            Serial.print(\", \");\n            Serial.print(rfid.serNum[4], DEC);\n            Serial.println(\" \");\n            Serial.print(\"Hex: \");\n            Serial.print(rfid.serNum[0], HEX);\n            Serial.print(\", \");\n            Serial.print(rfid.serNum[1], HEX);\n            Serial.print(\", \");\n            Serial.print(rfid.serNum[2], HEX);\n            Serial.print(\", \");\n            Serial.print(rfid.serNum[3], HEX);\n            Serial.print(\", \");\n            Serial.print(rfid.serNum[4], HEX);\n            Serial.println(\" \");\n\n          } else {\n            // If the ID matches, write a dot to the Serial Monitor\n            Serial.print(\".\");\n          }\n        }\n      }\n      rfid.halt();\n    }\n    ```", "```\n    byte card[5] = {0x4D,0x55,0xAD,0xD3,0x66};\n    ```", "```\nbyte card[5] = {0x4D,0x55,0xAD,0xD3,0x66};\n```", "```\n   #include <SPI.h>\n   #include <RFID.h>\n   #include <Servo.h>\n   #include \"pitches.h\"\n   #include <Wire.h>\n\n   RFID rfid(10, 5); // Define the RFID\n\n   // Replace this with the code from your card in hex form\n➊ byte card[5] = {0x4D,0x55,0xAD,0xD3,0x66};\n   // List any other codes for cards with access here\n\n   byte serNum[5];\n   byte data[5];\n\n   // Define the melodies for successful access and denied access\n   int access_melody[] = {NOTE_G4, 0, NOTE_A4, 0, NOTE_B4, 0, NOTE_A4,\n   0, NOTE_B4, 0, NOTE_C5, 0};\n   int access_noteDurations[] = {8, 8, 8, 8, 8, 4, 8, 8, 8, 8, 8, 4};\n   int fail_melody[] = {NOTE_G2, 0, NOTE_F2, 0, NOTE_D2, 0};\n   int fail_noteDurations[] = {8, 8, 8, 8, 8, 4};\n\n   int LED_access = 2;   // Pin connected to green LED\n   int LED_intruder = 3; // Pin connected to red LED\n   int speaker_pin = 8;  // Pin connected to piezo buzzer\n   int servoPin = 9;     // Pin connected to servo\n\n   Servo doorLock; // Define the servomotor\n\n   void setup() {\n     doorLock.attach(servoPin); // Set servo as a pin\n     Serial.begin(9600); // Start serial communication\n     SPI.begin(); // Start serial communication between the RFID and PC\n     rfid.init(); // Initialize the RFID\n     Serial.println(\"Arduino card reader\");\n     delay(1000);\n     pinMode(LED_access, OUTPUT);\n     pinMode(LED_intruder, OUTPUT);\n     pinMode(speaker_pin, OUTPUT);\n     pinMode(servoPin, OUTPUT);\n   }\n\n   void loop() { // Create a variable for each user\n     boolean card_card = true; // Define your card\n     if (rfid.isCard()) {\n       if (rfid.readCardSerial()) {\n         delay(1000);\n         data[0] = rfid.serNum[0];\n         data[1] = rfid.serNum[1];\n         data[2] = rfid.serNum[2];\n         data[3] = rfid.serNum[3];\n         data[4] = rfid.serNum[4];\n       }\n       Serial.print(\"Card found - code:\");\n       for (int i = 0; i < 5; i++) {\n         // If it is not your card, the card is considered false\n         if (data[i] != card[i]) card_card = false;\n       }\n       Serial.println();\n       if (card_card) { // A card with access permission is found\n         Serial.println(\"Hello!\"); // Print to Serial Monitor\n         for (int i = 0; i < 12; i++) { // Play welcome music\n           int access_noteDuration = 1000 / access_noteDurations[i];\n           tone(speaker_pin, access_melody[i], access_noteDuration);\n           int access_pauseBetweenNotes = access_noteDuration * 1.30;\n           delay(access_pauseBetweenNotes);\n           noTone(speaker_pin);\n         }\n       }\n       else { // If the card is not recognized\n         // Print message to Serial Monitor\n         Serial.println(\"Card not recognized! Contact administrator!\");\n         digitalWrite(LED_intruder, HIGH); // Turn on red LED\n         for (int i = 0; i < 6; i++) { // Play intruder melody\n           int fail_noteDuration = 1000 / fail_noteDurations[i];\n           tone(speaker_pin, fail_melody[i], fail_noteDuration);\n           int fail_pauseBetweenNotes = fail_noteDuration * 1.30;\n           delay(fail_pauseBetweenNotes);\n           noTone(speaker_pin);\n         }\n         delay(1000);\n         digitalWrite(LED_intruder, LOW); // Turn off red LED\n       }\n    if (card_card) { // Add other users with access here\n         Serial.println(\"Access granted.......Welcome!\");\n         digitalWrite(LED_access, HIGH); // Turn on green LED\n         doorLock.write(180); // Turn servo 180 degrees\n         delay(5000); // Wait for 5 seconds\n         doorLock.write(0); // Turn servo back to 0 degrees\n         digitalWrite(LED_access, LOW); // Turn off green LED\n       }\n       Serial.println();\n       delay(500);\n       rfid.halt();\n     }\n   }\n```"]