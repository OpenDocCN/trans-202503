- en: '![image](../images/f059-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**3'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ghost Burgers: Adding Special Effects with Scripting**'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll learn more advanced Twine features and become a Twine
    virtuoso. You’ll learn *scripting*, which allows you to add special effects to
    your story’s text, and to make your game remember and respond to player choices.
    Now you can keep track of whether they went to one room or another or whether
    they’re carrying a flashlight or a hamburger. You’ll also learn how to change
    your story’s background colors, font colors, and font styles. We’ll use a Twine
    game called *Ghost Burgers* as our starting point. Play it at [*https://nostarch.com/twinegames*](https://nostarch.com/twinegames)*/.*
  prefs: []
  type: TYPE_NORMAL
- en: Here is what the spooky *Ghost Burgers* start screen looks like.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f060-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In *Ghost Burgers*, you explore a spooky old house to find proof of the supernatural
    so you and your friend Astrid can become world-famous ghost hunters. As you explore
    the house, you’ll perform actions, like flipping a weird switch and exploring
    a spooky attic, to progress through the story and meet some ghosts.
  prefs: []
  type: TYPE_NORMAL
- en: Take a few minutes to play *Ghost Burgers*, and then I’ll show you how to make
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Mapping Out a Space
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Unlike *Interview with a Cat!*, which simulates a conversation, *Ghost Burgers*
    simulates a place: a mansion. The player can move from one part of the mansion
    to the other and even retrace their steps to see if anything has changed in a
    particular room.'
  prefs: []
  type: TYPE_NORMAL
- en: But before building a mansion, it’s a good idea to map it out. For this game,
    the first step was to think about the rooms I wanted, where they were, and what
    events should happen in which rooms. For example, I decided the parlor would always
    lead to either the maintenance room or the library, and the dining room would
    always lead to the kitchen. This should make intuitive sense to most players.
    Then I drew a map like this one to help me keep track of the paths.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f061-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Planning Events and Controlling Play
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With my map in hand and a basic idea of what the *Ghost Burgers* mansion would
    look like, I made a list of major events I wanted to happen in the game. The list
    looked something like this, in the general order in which the events would take
    place:'
  prefs: []
  type: TYPE_NORMAL
- en: •Find a key under the doormat and use it to get into the mansion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: •Discover the trapdoor that leads to the attic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: •Turn on the ghost switch to make ghosts appear
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: •Use the ghost stepladder to reach the attic trapdoor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: •Meet Burger Ghost in the attic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: •Find the ghost burger in the fridge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: •Find a plate of ghost china for the burger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: •Feed the ghost burger to Burger Ghost
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ghost Burgers* isn’t super strict about the order in which these events happen.
    For example, the player can find the burger before meeting the Burger Ghost, or
    they can find the plate before finding the burger that goes on the plate. The
    reason to make a list of events is to have a general idea of the flow of the game.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f062-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To make your games a bit more challenging and interesting, you can make the
    player do things in a specific order. For example, I can make sure the player
    sees the trapdoor that leads to the attic *before* the ghost stepladder appears.
    When the player sees the trapdoor and can’t find a way up to it, they’ll have
    to keep exploring to find out how to get up there. Later, when they flip a ghost
    switch, the ghostly stepladder appears, which shows the player how to access a
    different dimension of the game.
  prefs: []
  type: TYPE_NORMAL
- en: 'To ensure that the player sees the trapdoor before the ghost switch, I made
    it impossible for the player to get to the ghost switch without passing through
    the library where the trapdoor is. As you can see on the map on [page 37](#page_37),
    the player *must* pass through the library to get to the maintenance room and
    flip the switch. This works both ways: after the player flips the switch, they
    *must* pass through the library again where they’ll see the ghostly stepladder.'
  prefs: []
  type: TYPE_NORMAL
- en: Flipping the switch also reveals many new items for the player to explore. For
    example, the player can examine the fridge and the china cabinet before flipping
    the ghost switch, but they won’t see the burger and plate until the ghost switch
    is on. This technique adds to the experience because the player must look around
    to get a sense of what’s going on and anticipate changes to the game environment.
  prefs: []
  type: TYPE_NORMAL
- en: I also decided to make two of the most important moments in the game—finding
    the ghost burger and finding the plate to put it on—happen on opposite sides of
    the mansion. That way, the player has to explore the entire mansion before they
    can finish the game.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: Not all Twine games will have the kind of organization that *Ghost Burgers*
    does. Some Twine stories only move forward. But even in those stories, it’s best
    to think about the order in which the player discovers things, what they learn
    and when, and where important moments in the game are in relation to each other
    so you can space out the game’s components.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Text Effects Using Hooks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The rooms in *Ghost Burgers* change from one visit to the next, but only after
    the player flips the switch. After the player flips the ghost switch, ghosts (like
    Archibald Prancibald, the talkative gentleman ghost, or the ghostly stepladder
    or ghost burger) appear in places that were previously ghost free! And the text
    looks ghostly, too!
  prefs: []
  type: TYPE_NORMAL
- en: How do you create spooky ghost text? How do you make a passage in your story
    look different each time the player returns to it? How do you change passages
    depending on what the player has already done or seen?
  prefs: []
  type: TYPE_NORMAL
- en: The answer to all these questions is to use hooks. In this chapter, I will sometimes
    refer to writing hooks as “script” or “code.” Those are just different names for
    instructions that are given to a computer.
  prefs: []
  type: TYPE_NORMAL
- en: For our first hook, let’s add *s p o o k y* text to our game!
  prefs: []
  type: TYPE_NORMAL
- en: Ghostly Text Style
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Did you notice while playing *Ghost Burgers* that the names of ghostly objects
    appear ghostly, like the blurry word *stepladder* shown here?
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f064-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Blurring the word makes the text stand out, which helps players notice that
    the stepladder wasn’t there the first time they traveled through this room: they
    would have remembered a blurry ladder! The blurry text identifies what has changed
    in each room.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create these effects, you can use hooks, which are built into Twine. To
    see how they work, open a new passage in Twine and enter the following line into
    the editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Test-play this passage, and you should see that the word *stepladder* looks
    blurry.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, the text enclosed inside parentheses `(text-style: "blur")`
    is the *hook*, which is a label you can use to tell Twine how to style a passage.
    The text in square brackets `[stepladder]` is the tagged word. Here, the `text-style`
    tag changes the style of the text in the square brackets from the default to the
    `"blur"` style. You can apply a range of styles using the `text-style` tag: for
    example, you can create upside-down text with `(text-style: "upside-down")` and
    create text that casts a shadow with `(text-style: "shadow")`. As long as you
    enclose the text within the square brackets, you can apply the style change to
    as much text as you like. (A complete list of text effects is at the Twine 2 reference
    site at [*http://twine2.neocities.org/*](http://twine2.neocities.org/).)'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying Random Text with either
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In addition to using hooks to apply different text effects, you can also use
    them to display different text each time the player revisits a passage. For example,
    in *Ghost Burgers*, if the player looks at a book in the library more than once,
    they’ll see a different book each time.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f065-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Displaying random books creates the impression of a library full of books. Almost
    every time the player pulls a book off the shelf, they’ll see a different title.
    In fact, only 10 book title options are available, but that’s enough to make it
    seem like the library has so many books the player will never be able to look
    at them all.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f066-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can use Twine’s `either` tag to pick from a list of options at random.
    For example, open a passage in Twine and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now test-play the passage a couple of times. The passage should read *red*,
    *blue*, or *green* each time you play it.
  prefs: []
  type: TYPE_NORMAL
- en: Each option can be as long or short as you like, but you must enclose it in
    quotation marks with commas between the options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how we use `either` in the *Library* passage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The symbols `=><=` center the book titles, and `<==` moves the text back to
    the left afterward. To use these directional characters to format your text, enter
    them into Twine, and then insert the text you want to adjust on the line that
    follows. To move text to the right, use `==>`.
  prefs: []
  type: TYPE_NORMAL
- en: The asterisks (`*`) at either end of the list of book title options italicize
    the text, as you learned in [Chapter 2](ch02.xhtml). When you test-run this passage,
    you should see something like this.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f067-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, let’s explore how to place hooks inside other hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Nesting Hooks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can combine the effects of different hooks by placing one inside the other,
    which is called *nesting*. Enter the following to see how nesting works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, the words “What am I?” would randomly appear italicized, with a shadow,
    blurry, upside-down, or rumbling (shaking up and down). Each hook starts with
    text that shows what it does (`text-style`, `either`), a colon, and then a “how
    do I do it” part. The “how do I do it” part for the `text-style` tag is the `either`
    hook. We’re telling Twine to print this text using either italicized, shadowed,
    blurry, upside-down, or rumbling style. Try it! Just make sure each hook has its
    own opening parenthesis and closing parenthesis!
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f068-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Think of nesting hooks like nesting dolls. When you open the “text-style” doll,
    you’ll find the “either” doll nested neatly inside it. As long as every doll has
    a top and a bottom—the “what do I do” and “how do I do it” with the correct punctuation—you
    can nest as many hooks inside other hooks as you like.
  prefs: []
  type: TYPE_NORMAL
- en: 'This nested tag sends the player to a random room in the mansion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Each item inside the `either` hook is the name of a passage in the game. The
    `either` hook is nested inside a `display` hook, which allows you to show the
    contents of one passage inside another. (It’s more useful than you might realize!)
  prefs: []
  type: TYPE_NORMAL
- en: Using display to Avoid Retyping Text
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `display` hook can be very handy because it lets you show any passage inside
    any other passage. For example, say you want to display the same text (like a
    description of a gorgeous sunset) in a few different places. The player can see
    the sunset from any room in the house: through the bedroom windows or out the
    window in the front door. Instead of writing the description of the sunset twice,
    you write it once, save it as the *Sunset* passage, and then use `display` to
    show that passage in several rooms.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f069-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As another example, when the player talks to Archibald in *Ghost Burgers*, they’ll
    see the same list of questions no matter which order they ask them in. After they
    ask a question, Archibald will answer it. Then the player can ask another one.
    We show the same list of questions at the end of every one of Archibald’s answers,
    so the player can pick the next one.
  prefs: []
  type: TYPE_NORMAL
- en: 'We *could* retype the five questions in every passage, but if we later decide
    to change one of the questions or add a new one, we’d have to make the same change
    five times. To avoid this, we just put the questions in their own passage and
    use `display` to show that passage whenever Archibald is done talking, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the contents of the displayed passage should appear wherever you put the
    `display` hook. The text of the *Archibald-Questions* passage looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We’re writing these questions in their own passage called *Archibald-Questions.*
    Then we’re using a hook to display the text from that passage inside another passage.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is what the passage looks like in the editor after the player
    asks Archibald how he died:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: And this is what the player sees.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f070-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `display` hook lets you reuse passages in more than one place so you don’t
    have to do a lot of retyping.
  prefs: []
  type: TYPE_NORMAL
- en: Using Variables to Store Information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some rooms in *Ghost Burgers* appear differently the second time a player visits
    them. One reason is that I use `display` to skip some of the messages in *Ghost
    Burgers* the second time a player visits a room. For example, the first time the
    player climbs the ghost stepladder, they see the *Climbing the Stepladder* passage
    and a message saying how weird it is that a stepladder could be a ghost. But the
    next time they use the stepladder, I just use `display` on the *Attic* passage
    so the player can skip straight to the attic.
  prefs: []
  type: TYPE_NORMAL
- en: Whether or not the player sees the *Climbing the Stepladder* passage depends
    on whether or not the player has already climbed the stepladder. To determine
    whether the player has already used the stepladder, you can use a *variable* to
    store information about the game play. Variables *vary*, which means the information
    they store can change.
  prefs: []
  type: TYPE_NORMAL
- en: '*Ghost Burgers* uses 12 different variables. One variable keeps track of whether
    the front door to the mansion is locked. Other variables track whether Archibald
    has introduced himself to the player, whether the player is carrying the ghost
    burger, whether they’ve cleared away the cobwebs in the attic, whether their flashlight
    is on, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at the flashlight variable. The first time the player enters the
    mansion, they see a couple of sentences about turning on their flashlight.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f071-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: But clearly they shouldn’t see this message every time they walk through the
    foyer, because after the player has entered the mansion, we can assume their flashlight
    is still on. That’s why I use the variable `$flashlight_on` to help Twine remember
    that the player’s flashlight is on. In Twine, variable names always start with
    a dollar sign (`$`), but you can include as many as you want for free.
  prefs: []
  type: TYPE_NORMAL
- en: Boolean Variables
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are several different variable types. For example, `$flashlight_on` is
    a *Boolean* type. (It’s named after a mathematician named George Boole.) A Boolean
    variable has a value of either `true` or `false`, like the switch on a flashlight.
    If `$flashlight_on` is `true`, the flashlight is on. If `$flashlight_on` is `false`,
    the flashlight is off.
  prefs: []
  type: TYPE_NORMAL
- en: After you create a Boolean variable, you can use Twine hooks to check your variables
    and display different text depending on the variable’s value or condition. For
    example, when the player enters the foyer and turns on their flashlight, they
    shouldn’t see a message about turning it on again. So, I wrote a hook to display
    a different message depending on the condition of the flashlight—whether it’s
    on or off. This is called a *conditional* statement because different conditions
    determine which message is shown.
  prefs: []
  type: TYPE_NORMAL
- en: 'Conditional statements use two major hooks: `set` and `if`. You use `set` to
    set a variable to a value. For example, to turn on the flashlight, you set the
    `$flashlight_on` variable to `true:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Then you can use `if` to check the variable’s value.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f072-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using if to Check a Variable’s Value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In *Ghost Burgers*, we use variables to track whether the front door to the
    mansion is locked (`true` for yes, `false` for no), whether the player is carrying
    a hamburger (`true` for hamburger, `false` for no hamburger), or whether the player
    has turned on their flashlight.
  prefs: []
  type: TYPE_NORMAL
- en: Checking Whether the Flashlight Is On
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To see if the flashlight is on, you can use `if` to check whether the `$flashlight_on`
    variable is `true` or `false:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The following is the full code for the *Foyer* passage. It uses `set` and `if`
    to keep track of whether or not the flashlight is on.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we use a Boolean to check whether the flashlight is off using `(if:
    $flashlight_on is false)`. If it’s `false`, the `if` tag displays everything in
    the square brackets after it—the part where the player turns their flashlight
    on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we use the conditional `set` to change the `$flashlight_on` variable from
    `false` to `true` using `(set: $flashlight_on to true)`, which keeps track of
    having shown that message. So the next time the player comes through the room,
    the message won’t display again, because `(if: $flashlight is false)` will no
    longer be true.'
  prefs: []
  type: TYPE_NORMAL
- en: Triggering Different Messages Based on Flashlight Condition
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'But let’s say you want to show one message when the flashlight is on and a
    different message when it’s off. To do so, you can use `else`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: To use `else`, just add `(else:)` and text in square brackets to the end of
    an `if` statement. If the `if` statement isn’t `true`, the text inside the `else`
    statement displays.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that both hooks are on the same line because Twine detects *whitespace*—the
    empty spaces between paragraphs. In fact, sometimes you can accidentally introduce
    empty spaces into your story by pressing enter in the middle of your hooks. One
    solution to avoid accidentally adding whitespace is to use braces `{}` to tell
    Twine to display everything between the braces on one line, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now, everything between `{` and `}` will display in your story as though it’s
    all on one line, even though it spans several lines of code. This syntax is particularly
    useful when you’re writing lots of hooks in your passages, because you can use
    whitespace to make the hooks easier for you to read without displaying the whitespace
    to the player.
  prefs: []
  type: TYPE_NORMAL
- en: Making Ghosts Appear Conditionally
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'In *Ghost Burgers*, we use `if` and `else` to determine whether ghosts should
    appear as shown in the Library code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If ghosts aren’t visible `(if: $ghosts_visible is false)`, the player only
    sees the trapdoor. If ghosts are visible, we use `(else:)` to display the ghost
    ladder leading up to the trapdoor so the player can climb it.'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: A link can be part of a hook, too. Just make sure you use two square brackets
    on either side of a link or one on either side of the hook.
  prefs: []
  type: TYPE_NORMAL
- en: Now you know how to show items based on certain conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Integer Variables
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To keep track of more than two items or events, you can use an integer variable.
    An *integer* is a whole number that isn’t a fraction, such as 1, 10, 33, 5000,
    or 0.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in *Ghost Burgers*, the player can talk to their friend Astrid
    if they don’t know what to do next or can’t figure out something, and Astrid will
    give them a hint. The following figure shows an example.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f075-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If the player talks to Astrid when they’re looking for a burger, she’ll give
    them one piece of advice. If the player already has the burger and hasn’t fed
    it to the Burger Ghost, she’ll give them a different piece of advice. In fact,
    the game has eight different pieces of advice. Astrid also has something special
    to say the first time the player consults her after turning on the ghost switch.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use an integer variable to keep track of which piece of advice Astrid should
    give the player. Each number in the variable matches a different piece of advice.
    Here’s a sample of what that code looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The integer variable `$advice` starts at 0\. When the player discovers that
    the door is locked, the game sets `$advice` to 1\. When the player unlocks the
    door, the game sets `$advice` to 2\. If the player finds the ghost switch but
    doesn’t switch it on, `$advice` is set to 3\. When the player flips the switch,
    `$advice` is set to 4\. Whenever the player talks to Astrid, the game checks all
    possible numbers for the `$advice` variable and shows the message that matches
    the number that `$advice` is currently set to.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can set your variables to whatever you want them to start with in the first
    passage of your game; however, make sure the player can’t return to this passage,
    or the game will reset all those variables to their starting positions! I set
    up all my variables once in the starting passage of my game. Think of it like
    a title screen in a movie: once the player clicks **Start**, they’ll never come
    back to this passage.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: By putting this line of code in my starting passage, I make sure that the `$advice`
    variable is set to `0` when a player starts the game.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ghost Burgers has 12 variables in total. Here’s what the entire first passage
    in *Ghost Burgers* looks like. I put braces around all the variables because otherwise
    Twine would print an entire blank line for each one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: When the player starts the game, the door should be locked, the ladder should
    be unclimbed, the mysterious burger not yet collected. Because the player hasn’t
    done anything at the beginning of the game, most of the variables start as *false*.
    When the player clicks **START**, all the variables should be reset, and the player
    should be able to play a new game!
  prefs: []
  type: TYPE_NORMAL
- en: Editing Your Story’s Stylesheet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Little changes in your story’s appearance can have a big effect on how a player
    feels while playing your game. Does *Ghost Burgers* feel spookier than *Interview
    with a Cat!* because it’s on a black background (representing nighttime) instead
    of a bright white one? Do the blurry words in the story feel ghostlier than the
    solid words around them? Experiment with changing the appearance of your story
    and see if its new style changes your perspective. Your story can be as stylish
    as you want it to be.
  prefs: []
  type: TYPE_NORMAL
- en: Most websites use *Cascading Style Sheets (CSS)* to determine what the site
    looks like. Twine also uses CSS, and it’s easy to change Twine’s stylesheet using
    CSS. A *stylesheet* in Twine describes how elements on a web page should look.
    Twine comes with its own stylesheet that describes how Twine games should look,
    but you could change it to make the text blue and the background pink.
  prefs: []
  type: TYPE_NORMAL
- en: To find your story’s stylesheet, click the name of your story (below the blue
    story grid), and then click **Edit Story Stylesheet**, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f078-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The *Ghost Burgers* stylesheet looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f078-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is where you change your story’s appearance. If you don’t make any changes,
    Twine will just use the existing stylesheet. Let’s look at how to make some changes.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the Background Color
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When you make a new Twine game, its stylesheet is blank. The first change I
    like to make is to modify the background color. Add this code to your Twine game’s
    stylesheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This code sets the page’s background color to black. The `body` refers to the
    web page itself, and `tw-story` is short for “Twine story” and affects how your
    story looks. Everything between the braces, `{ }`, describes your Twine game’s
    `body`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you copy this code into your story’s stylesheet, make sure you enter everything
    precisely as you see it here. CSS needs to use this specific format, or it won’t
    work. The background in Twine stories is black by default, but you could change
    it to any color you want: `blue`, `green`, `purple`, `hotpink`, or `indigo`. (You’ll
    find a more extensive list of HTML color names at [*http://html-color-names.com/color-chart.php/*](http://html-color-names.com/color-chart.php/)).
    Test-play your story to see the new background color.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f079-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Stylizing Your Text
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Next, I changed the passage color in the *Ghost Burgers* stylesheet to white
    using this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The code `tw-passage` is short for “Twine passage,” and it contains information
    about how your story’s passages will look.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can change more than just the color. For example, you can change the font
    family and size by adding something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This code changes the font to Courier New, the font size to 40, and the color
    of all the text in all the passages to hot pink, which looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f080-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding Fancy Touches
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can also change the width of your text display, which is like an invisible
    box that contains your story’s words, and add a fancy border. Try adding the following
    to `tw-passage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Your display should show a dashed blue border 500 pixels wide.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f081-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Pixels* are the tiny dots that make up the image on your computer screen.
    The word *pixel* comes from picture elements, and it’s abbreviated as px (for
    example, 500px means 500 pixels).'
  prefs: []
  type: TYPE_NORMAL
- en: You can change the color of the links in your game, too. For example, if you
    wanted to make your links crimson, you would enter this code
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: To learn more about what you can change on the stylesheet, see the Twine **Help**
    page. (Click **Help** on the Twine Stories page, and then click **Change the Font,
    Colors, or Appearance**.)
  prefs: []
  type: TYPE_NORMAL
- en: Opening Ghost Burgers’ Source Files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you’re not sure how I created some of the features in this game, you can
    look at the game’s *source code*. To do that, open *Ghost Burgers* in your web
    browser by navigating to [*https://nostarch.com/twinegames/*](https://nostarch.com/twinegames/),
    right-click on the background of the web page (or Control-click if you’re using
    a Mac), and click **Save as**. Make sure you right-click the actual page and then
    save it to your computer. Then, on your Twine Stories page at [*http://twinery.org/2/#!/stories/*](http://twinery.org/2/#!/stories/),
    click **Import From File** to open the *Ghost Burgers.html* file you saved in
    Twine.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f082-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now you can look at the guts of *Ghost Burgers*, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f082-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Double-click the passages to see how I made them work and which hooks I used.
    You can do this for any of the example games in this book. In fact, you can do
    this for most Twine games. Just remember that although it’s perfectly okay to
    look inside someone’s Twine game to see how they made something, it’s not okay
    to copy someone’s work without asking them! Be respectful when you’re having a
    look-see at other peoples’ creations!
  prefs: []
  type: TYPE_NORMAL
- en: As you dig through the *Ghost Burgers* code, you’ll find a few techniques I
    haven’t explained, like how I made the cobwebs in the attic. I made those using
    the `Click-replace` hook and named hooks. A *named hook* is just a name that you
    give to a specific hook so *another* hook can do something to it. For example,
    clicking a link at the bottom of the page can change a piece of text near the
    top of the page. Look inside the *Attic* passage and see if you can figure out
    how they work. (You’ll find information on named hooks and all other hooks in
    Twine at *[http://twine2.neocities.org/](http://twine2.neocities.org/))*.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t be afraid to try hooks in your own stories!
  prefs: []
  type: TYPE_NORMAL
- en: What You Learned
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now you know how to make more sophisticated Twine games. You can keep track
    of what the player has read so that you can change what the player sees, and you
    know how to change your story’s appearance. You’re a programmer now—congratulations!
    From now on, your Twine games can be as simple or complicated as you want them
    to be.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 4](ch04.xhtml), we’ll work with more advanced techniques. If the
    information is more complicated than you’re comfortable with, feel free to skip
    to the game challenges in [Chapter 5](ch05.xhtml)! Programming is not for everyone,
    and that’s fine!
  prefs: []
  type: TYPE_NORMAL
