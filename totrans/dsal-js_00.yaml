- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: INTRODUCTION
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: 'This book deals with two basic concepts in computer science: data structures
    and algorithms. It follows a structure similar to university curricula and adds
    examples taken from coding challenges and interview questions, using them to discuss
    the relative advantages and disadvantages of specific algorithms and data structures.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本书涉及计算机科学中的两个基本概念：数据结构和算法。它的结构与大学课程类似，并添加了来自编码挑战和面试题目的示例，利用这些示例讨论特定算法和数据结构的相对优缺点。
- en: All examples are fully coded in JavaScript, with particular attention given
    to modern language features that simplify coding. Performance is also considered,
    from both a theoretical point of view (order of algorithms) and a practical one
    (scaffolding, measuring). Each chapter ends with a series of questions that amplify
    the concepts covered in the chapter and provide further examples for the reader
    to apply. The answers to the questions are provided at the end of the book.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所有示例都用JavaScript编写，特别注意现代语言特性，以简化编程。性能也被考虑到，包括从理论角度（算法的时间复杂度）和实际角度（架构设计、性能测试）。每章结束时都会有一系列问题，帮助加深本章所涉及的概念，并为读者提供进一步的示例来应用。问题的答案会在书末给出。
- en: '## Who Should Read This Book?'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '## 谁应该阅读本书？'
- en: This book is geared toward three groups of readers. The first and main group
    is JavaScript frontend (web) and backend (Node.js) developers, as it explores
    how we can apply data structures and algorithms to solve and optimize complex
    problems.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本书面向三类读者。第一类也是主要的读者是JavaScript前端（Web）和后端（Node.js）开发者，因为本书探讨了如何运用数据结构和算法来解决和优化复杂问题。
- en: The second group of readers is computer science (CS) students, as the book covers
    topics that appear in most CS courses. These students should be familiar with
    several programming languages, so the JavaScript focus shouldn’t be a hindrance.
    The algorithms don’t heavily depend on aspects of the language and can be translated
    into other languages with little difficulty.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 第二类读者是计算机科学（CS）专业的学生，因为本书涵盖了大多数计算机科学课程中的主题。这些学生应该熟悉几种编程语言，因此，专注于JavaScript并不会成为障碍。这些算法并不依赖于语言的特性，可以轻松地转换为其他语言。
- en: Finally, the third group of readers includes programmers who are preparing for
    coding interviews or are interested in competitive programming. These readers
    will profit from actual implementation of algorithms and data structures and from
    seeing examples of the kinds of questions they’ll encounter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，第三类读者是正在准备编码面试或对竞技编程感兴趣的程序员。这些读者将从实际的算法和数据结构实现中获益，并通过看到他们将遇到的各种问题的示例，来提升自己的能力。
- en: What’s the Book’s Approach?
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本书的写作方法是什么？
- en: The book always takes a practical approach to real-life use cases. It considers
    common problems and discusses appropriate algorithms and data structures. We’ll
    explore multiple versions and optimizations and develop several implementation
    variants to provide a deeper understanding of alternative possible solutions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本书始终采用实际的方式来探讨真实世界中的使用案例。它考虑了常见的问题，并讨论了适当的算法和数据结构。我们将探讨多个版本和优化，并开发几个实现变体，以便更深入地理解可能的替代解决方案。
- en: All of the algorithms are programmed using JavaScript, as it’s a widely available
    language that could be applied for both frontend and backend work. JavaScript
    is also well known and commonly used today, and it should be applicable to all
    kinds of problems.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的示例都使用JavaScript编写，因为它是一种广泛可用的语言，既可应用于前端也可用于后端开发。JavaScript也非常知名且被广泛使用，应该能够应用于各种问题。
- en: What’s in the Book?
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本书内容是什么？
- en: 'The book is structured in three parts. [Part I](part1.xhtml) covers the basics
    and highlights important aspects of JavaScript that are used throughout the rest
    of the book. We’ll explore functional programming to understand some design considerations
    that are applied in later chapters. We’ll also consider abstract data types (ADTs),
    which is a concept that involves data structures and algorithms. Finally, we’ll
    study the topic of performance as it relates to algorithms, which will be applied
    often in the rest of the book. The following chapters are in [Part I](part1.xhtml):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书分为三部分。[第一部分](part1.xhtml)涵盖了基础内容，并突出了整个书中使用的 JavaScript 重要特性。我们将探索函数式编程，以理解后续章节中应用的一些设计考虑因素。我们还将考虑抽象数据类型（ADTs），这是一个涉及数据结构和算法的概念。最后，我们将研究与算法相关的性能问题，这将在本书的后续章节中多次应用。以下章节位于[第一部分](part1.xhtml)：
- en: '**[Chapter 1](chapter1.xhtml): Using JavaScript **In this chapter we’ll cover
    important features of JavaScript that are used in the rest of the book, but we’ll
    just consider the highlights, as it is assumed you are already familiar with the
    language. Topics will include the current JavaScript version, transpilation, typing,
    arrow functions, spreading, destructuring, modules, and more. I’ll also introduce
    some of the many tools that are available to help you develop JavaScript code.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第1章](chapter1.xhtml)：使用 JavaScript **在这一章，我们将介绍本书其余部分中使用的 JavaScript 重要特性，但我们只会考虑重点内容，因为假设你已经熟悉该语言。主题包括当前的
    JavaScript 版本、转译、类型、箭头函数、扩展运算符、解构、模块等。我还将介绍一些可帮助你开发 JavaScript 代码的工具。'
- en: '**[Chapter 2](chapter2.xhtml): Functional Programming in JavaScript **Here
    we’ll consider functional programming to highlight some design features that are
    used in the rest of the book. Topics will include what functional programming
    is, why you should use it, whether JavaScript is a functional programming language,
    the declarative programming style, side effects, and higher-order functions, among
    others.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第2章](chapter2.xhtml)：JavaScript中的函数式编程 **在这一章，我们将探讨函数式编程，突出在本书其余部分中使用的一些设计特性。主题包括函数式编程是什么，为什么你应该使用它，JavaScript是否是一种函数式编程语言，声明式编程风格、副作用和高阶函数等。'
- en: '**[Chapter 3](chapter3.xhtml): Abstract Data Types **In this chapter I’ll introduce
    the concept of abstract data types as a basis for considering data structures
    and their associated operations. In later chapters, all structures will be considered
    as ADTs to highlight their pros and cons as well as their performance. The key
    topics will include what ADTs are and how to implement them in JavaScript.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第3章](chapter3.xhtml)：抽象数据类型 **在这一章，我将介绍抽象数据类型的概念，作为考虑数据结构及其相关操作的基础。在后续章节中，所有的数据结构将被视为
    ADTs，以突出它们的优缺点以及性能。关键主题将包括什么是 ADTs，以及如何在 JavaScript 中实现它们。'
- en: '**[Chapter 4](chapter4.xhtml): Analyzing Algorithms **Here we’ll consider the
    performance aspects of algorithms in terms of both space and speed. We’ll discuss
    the concept of complexity classes and how (and when) it applies to the design
    of algorithms and data structures. The topics we’ll explore include what an algorithm’s
    performance is; the big *O* notation; complexity classes; the differences among
    best, average, worst, and amortized cases; how to measure performance; and time
    versus space trade-offs.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第4章](chapter4.xhtml)：算法分析 **在这一章，我们将考虑算法在空间和速度方面的性能。我们将讨论复杂度类的概念，以及它如何（和何时）应用于算法和数据结构的设计。我们将探讨的主题包括什么是算法的性能；大*O*符号；复杂度类；最优、平均、最差和摊销情况之间的差异；如何衡量性能；以及时间与空间的权衡。'
- en: '[Part II](part2.xhtml) of the book focuses on algorithms, and it’s concerned
    with strategies for algorithm design. In particular, we’ll consider searching,
    sorting, shuffling, and sampling—all of which have well-known algorithms. The
    chapters in this part are as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[第二部分](part2.xhtml)的内容集中在算法上，讨论算法设计的策略。特别地，我们将考虑搜索、排序、洗牌和抽样——这些都有着著名的算法。本部分的章节如下：'
- en: '**[Chapter 5](chapter5.xhtml): Designing Algorithms **In this chapter we’ll
    consider strategies for the design of algorithms and look at examples of each
    case. We’ll discuss general practices, recursion, brute-force search, greedy algorithms,
    divide-and-conquer algorithms, backtracking, dynamic programming, branch-and-bound,
    transform-and-conquer, and problem reduction.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第五章](chapter5.xhtml)：算法设计** 本章将探讨算法设计的策略，并展示每种情况的示例。我们将讨论一般实践、递归、暴力搜索、贪心算法、分治算法、回溯法、动态规划、分支限界法、变换与征服法和问题简化。'
- en: '**[Chapter 6](chapter6.xhtml): Sorting **Here we’ll discuss several common
    and important sorting algorithms to produce an ordered sequence of data out of
    unordered data. Some algorithms (such as heapsort) will receive only a brief mention,
    because they will be further analyzed in later chapters where the corresponding
    data structure is described. Topics include a description of the sorting problem,
    internal versus external sorting, JavaScript’s own sort function, comparison-based
    algorithms (such as bubblesort, selection sort, insertion sort, quicksort, and
    mergesort, among others), and comparison-less sorting algorithms (like bitmap
    sort, counting sort, and radix sort).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第六章](chapter6.xhtml)：排序** 本章将讨论几种常见且重要的排序算法，旨在将无序的数据序列转变为有序序列。有些算法（如堆排序）只会简要提及，因为它们将在后续章节中进一步分析，届时会详细描述相应的数据结构。本章内容包括排序问题的描述、内部排序与外部排序、JavaScript
    自带的排序函数、基于比较的算法（如冒泡排序、选择排序、插入排序、快速排序、归并排序等），以及无比较的排序算法（如位图排序、计数排序和基数排序）。'
- en: '**[Chapter 7](chapter7.xhtml): Selecting **This chapter will show algorithms
    for just finding the *k*th smallest value in a list or array, as opposed to sorting
    where we wanted to order the complete set. We’ll discuss the selection problem
    in general, using JavaScript’s minimum and maximum functions; doing selection
    by sorting (or partial sorting); and several other algorithms like quickselect,
    Floyd-Rivest, median of medians, and sorting by selection.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第七章](chapter7.xhtml)：选择** 本章将展示只找出列表或数组中第*k*小值的算法，而不是排序算法，排序是为了将完整集合排序。我们将讨论选择问题的一般情况，使用
    JavaScript 的最小值和最大值函数；通过排序（或部分排序）进行选择；以及其他几种算法，如快速选择、Floyd-Rivest 算法、中位数的中位数和选择排序。'
- en: '**[Chapter 8](chapter8.xhtml): Shuffling and Sampling **This chapter can be
    considered a complement to [Chapter 6](chapter6.xhtml). In this case we want to
    produce a random disordered sequence of data, instead of a totally ordered one,
    as might be needed for a computer card game or statistical sampling. We’ll look
    at the shuffling problem, how to do random sorting, the Fisher-Yates algorithm,
    random key sorting, and random sampling algorithms.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第八章](chapter8.xhtml)：洗牌与采样** 本章可以视为[第六章](chapter6.xhtml)的补充。在这里，我们希望生成一个随机无序的数据序列，而不是完全有序的序列，这在计算机扑克牌游戏或统计抽样中可能是需要的。我们将讨论洗牌问题，如何进行随机排序，Fisher-Yates
    算法，随机键排序和随机采样算法。'
- en: '**[Chapter 9](chapter9.xhtml): Searching **Here we’ll consider several common
    searching algorithms meant to quickly answer whether a specific value is or isn’t
    included in some set of data. Some algorithms will just be introduced here, but
    we’ll explore them more thoroughly in later chapters where the corresponding data
    structures are described and analyzed. Topics in this chapter include a description
    of the searching problem, JavaScript’s own search functions, linear searching
    (with or without sentinels), jump searching, binary searching, and interpolation
    searching.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第九章](chapter9.xhtml)：查找** 本章将考虑几种常见的查找算法，目的是快速判断某个特定值是否包含在某个数据集内。有些算法将在本章介绍，但我们将在后续章节中对它们进行更深入的探讨，届时会描述并分析相应的数据结构。本章的内容包括查找问题的描述、JavaScript
    自带的查找函数、线性查找（有无哨兵）、跳跃查找、二分查找和插值查找。'
- en: '[Part III](part3.xhtml) of the book is devoted to data structures, and it considers
    several data structure types, starting with simple, linear ones and finishing
    with more complex nonlinear structures. The following chapters are included in
    this part:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的[第三部分](part3.xhtml)专注于数据结构，考虑了几种数据结构类型，从简单的线性结构到更复杂的非线性结构。本部分包括以下章节：
- en: '**[Chapter 10](chapter10.xhtml): Lists **This chapter discusses the simplest
    structure, a linked list, which also includes several variants. We’ll delve into
    lists in detail (what they are; their various types; their ADT; single-, double-,
    and circular-linked lists), stacks (what they are and several implementations),
    queues (what queues are and what they’re used for, their ADT, and many implementations),
    and deques (their objective, ADT, and implementation).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第10章](chapter10.xhtml)：列表** 本章讨论最简单的结构——链表，还包括几种变种。我们将详细探讨链表（它是什么，几种类型，它的抽象数据类型；单向、双向和循环链表）、栈（它是什么以及几种实现方式）、队列（队列是什么，它的应用，抽象数据类型及多种实现方式），以及双端队列（它的目标、抽象数据类型和实现）。'
- en: '**[Chapter 11](chapter11.xhtml): Bags, Sets, and Maps **Here we’ll discuss
    structures that let you represent sets (no repeated elements) and bags (repeated
    elements allowed), with maps (key/value pairs) as a special important case. We’ll
    see what bags and sets are and their implementation (including JavaScript’s own
    versions as well as array- and list-based versions), finishing with hashing and
    bitmaps.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第11章](chapter11.xhtml)：袋、集合与映射** 本章将讨论可以表示集合（没有重复元素）和袋（允许重复元素）的结构，并将映射（键/值对）作为一个特殊的重要案例。我们将了解袋和集合是什么以及它们的实现（包括JavaScript自身的版本以及基于数组和链表的版本），最后讨论哈希和位图。'
- en: '**[Chapter 12](chapter12.xhtml): Binary Trees **This chapter considers binary
    trees, and in particular binary search trees (BSTs), which are the basis for many
    algorithms. We’ll discuss what a tree is, tree traversal (pre-, in-, and postorder
    algorithms), and using binary search trees for searching (including splay trees,
    balanced search trees like AVL and red-black trees, and randomized binary search
    trees).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第12章](chapter12.xhtml)：二叉树** 本章讨论二叉树，特别是二叉搜索树（BST），它是许多算法的基础。我们将讨论树是什么，树的遍历（前序、中序和后序算法），以及使用二叉搜索树进行查找（包括伸展树、平衡搜索树如AVL树和红黑树，以及随机化的二叉搜索树）。'
- en: '**[Chapter 13](chapter13.xhtml): Trees and Forests **Here we’ll study more
    general variants of trees, including forests (sets of trees). Topics include what
    trees and forests are, how to represent them in several ways, traversal algorithms
    (breadth- and depth-first algorithms), B-trees and variants that are oriented
    for searching, and red-black trees as a variant of BSTs.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第13章](chapter13.xhtml)：树与森林** 在本章中，我们将研究更一般的树的变种，包括森林（一组树）。主题包括树和森林的定义，它们的几种表示方式，遍历算法（广度优先和深度优先算法），B树及其用于查找的变种，以及作为二叉搜索树变种的红黑树。'
- en: '**[Chapter 14](chapter14.xhtml): Heaps **In this chapter we’ll consider heaps,
    a variant of binary trees that are stored without the need for dynamic memory
    and allow easy implementation of priority queues and sorting. We’ll discuss what
    heaps are, binary heaps and variants (ternary or d-ary heaps), heapsort (a heap-based
    sorting algorithm), heap-based sampling algorithms, and treaps, a heap-related
    BST.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第14章](chapter14.xhtml)：堆** 在本章中，我们将讨论堆，一种二叉树的变种，它无需动态内存即可存储，并且可以轻松实现优先队列和排序。我们将讨论堆是什么，二叉堆及其变种（如三叉堆或d叉堆）、堆排序（一种基于堆的排序算法）、基于堆的采样算法以及堆相关的二叉搜索树（treap）。'
- en: '**[Chapter 15](chapter15.xhtml): Extended Heaps **This chapter expands on the
    concept of heaps, considering variants that allow extra operations such as changing
    (altering the value of a key) and melding or merging (joining two or more heaps
    into one). Topics include binomial heaps, lazy binomial heaps, Fibonacci heaps,
    and pairing heaps.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第15章](chapter15.xhtml)：扩展堆** 本章扩展了堆的概念，考虑了允许额外操作的变种，例如改变（更改键的值）和合并（将两个或多个堆合并为一个）。我们将讨论二项堆、懒惰二项堆、斐波那契堆以及配对堆。'
- en: '**[Chapter 16](chapter16.xhtml): Digital Search Trees **Here we’ll consider
    trees specially designed to search for strings, as in a common “dictionary” where
    we’d look up words. We’ll include tries, radix tries, ternary tries, and other
    variants of these structures.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第16章](chapter16.xhtml)：数字查找树** 在本章中，我们将讨论专门设计用来查找字符串的树结构，比如常见的“字典”，我们可以在其中查找单词。我们将介绍字典树（trie）、基数字典树（radix
    trie）、三叉字典树（ternary trie）以及这些结构的其他变种。'
- en: '**[Chapter 17](chapter17.xhtml): Graphs **In this chapter we’ll consider graphs,
    which are currently used in many applications, such as Google Maps or for calculating
    dependencies in a software project. Topics include what graphs are, different
    ways of representing them (such as adjacency lists or adjacency matrices), graph
    traversals and path finding (including shortest-path algorithms), and topological
    sorting.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第17章](chapter17.xhtml)：图** 本章将讨论图结构，目前在许多应用中都有使用，比如谷歌地图或在软件项目中计算依赖关系。内容包括图是什么、不同的表示方式（如邻接表或邻接矩阵）、图的遍历和路径寻找（包括最短路径算法）、以及拓扑排序。'
- en: '**[Chapter 18](chapter18.xhtml): Immutability and Functional Data Structures **This
    final chapter will discuss the immutability aspect and explore how algorithms
    can be altered to avoid modifying the input structures, producing a new one instead.
    We’ll see what functional data structures are, what immutability means, object
    freezing, algorithms needed to avoid modifying data structures, and some examples
    of specific functional data structures such as lists, queues, and trees.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第18章](chapter18.xhtml)：不变性与函数式数据结构** 本章将讨论不变性方面的内容，并探索如何通过修改算法来避免改变输入结构，从而产生一个新的结构。我们将了解什么是函数式数据结构，什么是不变性，如何冻结对象，避免修改数据结构所需的算法，以及一些具体的函数式数据结构示例，如列表、队列和树。'
- en: The book finishes with the answers to the questions found at the end of each
    chapter; sometimes answers are given in full, and other times hints or links to
    solutions are provided.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 本书最后提供了每章末尾问题的答案；有时答案会给出完整解答，而有时则提供提示或解决方案的链接。
- en: NOTE
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*All of the source code for this book is available at* [https://github.com/fkereki/data-structures-and-algorithms-book](https://github.com/fkereki/data-structures-and-algorithms-book).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*本书的所有源代码都可以在* [https://github.com/fkereki/data-structures-and-algorithms-book](https://github.com/fkereki/data-structures-and-algorithms-book)
    获得。'
