- en: Chapter 41. Fundamentals of Shared Libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Shared libraries are a technique for placing library functions into a single
    unit that can be shared by multiple processes at run time. This technique can
    save both disk space and RAM. This chapter covers the fundamentals of shared libraries.
    The next chapter covers a number of advanced features of shared libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Object Libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One way of building a program is simply to compile each of its source files
    to produce corresponding object files, and then link all of these object files
    together to produce the executable program, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Linking is actually performed by the separate linker program, *ld*. When we
    link a program using the *cc* (or *gcc*) command, the compiler invokes *ld* behind
    the scenes. On Linux, the linker should always be invoked indirectly via *gcc*,
    since *gcc* ensures that *ld* is invoked with the correct options and links the
    program against the correct library files.
  prefs: []
  type: TYPE_NORMAL
- en: In many cases, however, we may have source files that are used by several programs.
    As a first step toward saving ourselves some work, we could compile these source
    files just once, and then link them into different executables as required. Although
    this technique saves us compilation time, it still suffers from the disadvantage
    that we must name all of the object files during the link phase. Furthermore,
    our directories may be inconveniently cluttered with a large number of object
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get around these problems, we can group a set of object files into a single
    unit, known as an *object library*. Object libraries are of two types: *static*
    and *shared*. Shared libraries are the more modern type of object library, and
    provide several advantages over static libraries, as we describe in Section 41.3.'
  prefs: []
  type: TYPE_NORMAL
- en: 'An aside: including debugger information when compiling a program'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the *cc* command shown above, we used the *-g* option to include debugging
    information in the compiled program. In general, it is a good idea to always create
    programs and libraries that allow debugging. (In earlier times, debugging information
    was sometimes omitted so that the resulting executable used less disk and RAM,
    but nowadays disk and RAM are cheap.)
  prefs: []
  type: TYPE_NORMAL
- en: In addition, on some architectures, such as x86-32, the *-fomit-frame-pointer*
    option should not be specified because this makes debugging impossible. (On some
    architectures, such as x86-64, this option is enabled by default since it doesn’t
    prevent debugging.) For the same reason, executables and libraries should not
    be stripped of debugging information using *strip(1)*.
  prefs: []
  type: TYPE_NORMAL
- en: Static Libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before starting our discussion of shared libraries, we begin with a brief description
    of static libraries in order to make clear the differences and advantages of shared
    libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Static libraries, also known as *archives*, were the first type of library
    to be provided on UNIX systems. They provide the following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: We can place a set of commonly used object files into a single library file
    that can then be used to build multiple executables, without needing to recompile
    the original source files when building each application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Link commands become simpler. Instead of listing a long series of object files
    on the link command line, we specify just the name of the static library. The
    linker knows how to search the static library and extract the objects required
    by the executable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and maintaining a static library
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In effect, a static library is simply a file holding copies of all of the object
    files added to it. The archive also records various attributes of each of the
    component object files, including file permissions, numeric user and group IDs,
    and last modification time. By convention, static libraries have names of the
    form `lib`*name*`.a`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A static library is created and maintained using the *ar(1)* command, which
    has the following general form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The *options* argument consists of a series of letters, one of which is the
    *operation code*, while the others are *modifiers* that influence the way the
    operation is carried out. Some commonly used operation codes are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*r* (replace): Insert an object file into the archive, replacing any previous
    object file of the same name. This is the standard method for creating and updating
    an archive. Thus, we might build an archive with the following commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As shown above, after building the library, we can delete the original object
    files if desired, since they are no longer required.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*t* (table of contents): Display a table of contents of the archive. By default,
    this lists just the names of the object files in the archive. By adding the *v*
    (verbose) modifier, we additionally see all of the other attributes recorded in
    the archive for each object file, as in the following example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The additional attributes that we see for each object are, from left to right,
    its permissions when it was added to the archive, its user ID and group ID, its
    size, and the date and time when it was last modified.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*d* (delete): Delete a named module from the archive, as in this example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using a static library
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We can link a program against a static library in two ways. The first is to
    name the static library as part of the link command, as in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we can place the library in one of the standard directories
    searched by the linker (e.g., `/usr/lib`), and then specify the library name (i.e.,
    the filename of the library without the `lib` prefix and `.a` suffix) using the
    *-l* option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If the library resides in a directory not normally searched by the linker,
    we can specify that the linker should search this additional directory using the
    *-L* option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]*`mylibdir`*`` `-ldemo`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: $ `./prog`
  prefs: []
  type: TYPE_NORMAL
- en: Called mod1-x1
  prefs: []
  type: TYPE_NORMAL
- en: Called mod2-x2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: $ `gcc -g -c -fPIC -Wall mod1.c mod2.c mod3.c`
  prefs: []
  type: TYPE_NORMAL
- en: $ `gcc -g -shared -o libfoo.so mod1.o mod2.o mod3.o`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: $ `gcc -g -fPIC -Wall mod1.c mod2.c mod3.c -shared -o libfoo.so`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: $ `nm mod1.o | grep _GLOBAL_OFFSET_TABLE_`
  prefs: []
  type: TYPE_NORMAL
- en: $ `readelf -s mod1.o | grep _GLOBAL_OFFSET_TABLE_`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: $ `objdump --all-headers libfoo.so | grep TEXTREL`
  prefs: []
  type: TYPE_NORMAL
- en: $ `readelf -d libfoo.so | grep TEXTREL`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: $ `gcc -g -Wall -o prog prog.c libfoo.so`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: $ `./prog`
  prefs: []
  type: TYPE_NORMAL
- en: './prog: error in loading shared libraries: libfoo.so: cannot'
  prefs: []
  type: TYPE_NORMAL
- en: 'open shared object file: No such file or directory'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: $ `LD_LIBRARY_PATH=. ./prog`
  prefs: []
  type: TYPE_NORMAL
- en: Called mod1-x1
  prefs: []
  type: TYPE_NORMAL
- en: Called mod2-x2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: $ `gcc -g -c -fPIC -Wall mod1.c mod2.c mod3.c`
  prefs: []
  type: TYPE_NORMAL
- en: $ `gcc -g -shared -Wl,-soname,libbar.so -o libfoo.so mod1.o mod2.o mod3.o`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: $ `objdump -p libfoo.so | grep SONAME`
  prefs: []
  type: TYPE_NORMAL
- en: SONAME      libbar.so
  prefs: []
  type: TYPE_NORMAL
- en: $ `readelf -d libfoo.so | grep SONAME`
  prefs: []
  type: TYPE_NORMAL
- en: '0x0000000e (SONAME)      Library soname: [libbar.so]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: $ `gcc -g -Wall -o prog prog.c libfoo.so`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: $ `LD_LIBRARY_PATH=. ./prog`
  prefs: []
  type: TYPE_NORMAL
- en: 'prog: error in loading shared libraries: libbar.so: cannot open'
  prefs: []
  type: TYPE_NORMAL
- en: 'shared object file: No such file or directory'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: $ `ln -s libfoo.so libbar.so`
  prefs: []
  type: TYPE_NORMAL
- en: '*Create soname symbolic link in current directory*'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: $ `LD_LIBRARY_PATH=. ./prog`
  prefs: []
  type: TYPE_NORMAL
- en: Called mod1-x1
  prefs: []
  type: TYPE_NORMAL
- en: Called mod2-x2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: $ `ldd prog`
  prefs: []
  type: TYPE_NORMAL
- en: libdemo.so.1 => /usr/lib/libdemo.so.1 (0x40019000)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: libc.so.6 => /lib/tls/libc.so.6 (0x4017b000)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '*library-name* => *resolves-to-path*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: $ `nm -A /usr/lib/lib*.so 2> /dev/null | grep ' crypt$'`
  prefs: []
  type: TYPE_NORMAL
- en: /usr/lib/libcrypt.so:00007080 W crypt
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: libdemo.so.1.0.1
  prefs: []
  type: TYPE_NORMAL
- en: libdemo.so.1.0.2              *Minor version, compatible with version 1.0.1*
  prefs: []
  type: TYPE_NORMAL
- en: libdemo.so.2.0.0              *New major version, incompatible with version
    1.**
  prefs: []
  type: TYPE_NORMAL
- en: libreadline.so.5.0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: libdemo.so.1        -> libdemo.so.1.0.2
  prefs: []
  type: TYPE_NORMAL
- en: libdemo.so.2        -> libdemo.so.2.0.0
  prefs: []
  type: TYPE_NORMAL
- en: libreadline.so.5    -> libreadline.so.5.0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: libdemo.so           -> libdemo.so.2
  prefs: []
  type: TYPE_NORMAL
- en: libreadline.so       -> libreadline.so.5
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: $ `gcc -g -c -fPIC -Wall mod1.c mod2.c mod3.c`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: $ `gcc -g -shared -Wl,-soname,libdemo.so.1 -o libdemo.so.1.0.1 \`
  prefs: []
  type: TYPE_NORMAL
- en: '`mod1.o mod2.o mod3.o`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: $ `ln -s libdemo.so.1.0.1 libdemo.so.1`
  prefs: []
  type: TYPE_NORMAL
- en: $ `ln -s libdemo.so.1 libdemo.so`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: $ `ls -l libdemo.so* | awk '{print $1, $9, $10, $11}'`
  prefs: []
  type: TYPE_NORMAL
- en: lrwxrwxrwx libdemo.so -> libdemo.so.1
  prefs: []
  type: TYPE_NORMAL
- en: lrwxrwxrwx libdemo.so.1 -> libdemo.so.1.0.1
  prefs: []
  type: TYPE_NORMAL
- en: -rwxr-xr-x libdemo.so.1.0.1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: $ `gcc -g -Wall -o prog prog.c -L. -ldemo`
  prefs: []
  type: TYPE_NORMAL
- en: $ `LD_LIBRARY_PATH=. ./prog`
  prefs: []
  type: TYPE_NORMAL
- en: Called mod1-x1
  prefs: []
  type: TYPE_NORMAL
- en: Called mod2-x2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: $ `su`
  prefs: []
  type: TYPE_NORMAL
- en: 'Password:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mv libdemo.so.1.0.1 /usr/lib`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`cd /usr/lib`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ln -s libdemo.so.1.0.1 libdemo.so.1`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ln -s libdemo.so.1 libdemo.so`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: $ `su`
  prefs: []
  type: TYPE_NORMAL
- en: 'Password:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mv libdemo.so.1.0.1 libdemo.so.2.0.0 /usr/lib`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ldconfig -v | grep libdemo`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: libdemo.so.1 -> libdemo.so.1.0.1 (changed)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: libdemo.so.2 -> libdemo.so.2.0.0 (changed)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '`cd /usr/lib`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ls -l libdemo* | awk ''{print $1, $9, $10, $11}''`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: lrwxrwxrwx libdemo.so.1 -> libdemo.so.1.0.1
  prefs: []
  type: TYPE_NORMAL
- en: -rwxr-xr-x libdemo.so.1.0.1
  prefs: []
  type: TYPE_NORMAL
- en: lrwxrwxrwx libdemo.so.2 -> libdemo.so.2.0.0
  prefs: []
  type: TYPE_NORMAL
- en: -rwxr-xr-x libdemo.so.2.0.0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '`ln -s libdemo.so.2 libdemo.so`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '`mv libdemo.so.2.0.1 /usr/lib`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ldconfig -v | grep libdemo`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: libdemo.so.1 -> libdemo.so.1.0.1
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: libdemo.so.2 -> libdemo.so.2.0.1 (changed)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: $ `gcc -g -c -fPIC -Wall mod1.c mod2.c mod3.c`
  prefs: []
  type: TYPE_NORMAL
- en: $ `gcc -g -shared -Wl,-soname,libdemo.so.1 -o libdemo.so.1.0.1 \`
  prefs: []
  type: TYPE_NORMAL
- en: '`mod1.o mod2.o mod3.o`'
  prefs: []
  type: TYPE_NORMAL
- en: $ `/sbin/ldconfig -nv .`
  prefs: []
  type: TYPE_NORMAL
- en: '.:'
  prefs: []
  type: TYPE_NORMAL
- en: libdemo.so.1 -> libdemo.so.1.0.1
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: $ `ls -l libdemo.so* | awk '{print $1, $9, $10, $11}'`
  prefs: []
  type: TYPE_NORMAL
- en: lrwxrwxrwx libdemo.so.1 -> libdemo.so.1.0.1
  prefs: []
  type: TYPE_NORMAL
- en: -rwxr-xr-x libdemo.so.1.0.1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: $ `su`
  prefs: []
  type: TYPE_NORMAL
- en: 'Password:'
  prefs: []
  type: TYPE_NORMAL
- en: '`gcc -g -c -fPIC -Wall mod1.c mod2.c mod3.c`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`gcc -g -shared -Wl,-soname,libdemo.so.1 -o libdemo.so.1.0.2 \`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`mod1.o mod2.o mod3.o`'
  prefs: []
  type: TYPE_NORMAL
- en: '`mv libdemo.so.1.0.2 /usr/lib`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ldconfig -v | grep libdemo`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: libdemo.so.1 -> libdemo.so.1.0.2 (changed)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '`gcc -g -c -fPIC -Wall mod1.c mod2.c mod3.c`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`gcc -g -shared -Wl,-soname,libdemo.so.2 -o libdemo.so.2.0.0 \`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`mod1.o mod2.o mod3.o`'
  prefs: []
  type: TYPE_NORMAL
- en: '`mv libdemo.so.2.0.0 /usr/lib`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ldconfig -v | grep libdemo`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: libdemo.so.1 -> libdemo.so.1.0.2
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: libdemo.so.2 -> libdemo.so.2.0.0 (changed)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`cd /usr/lib`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ln -sf libdemo.so.2 libdemo.so`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: $ `gcc -g -Wall -Wl,-rpath,/home/mtk/pdir -o prog prog.c libdemo.so`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: $ `cd /home/mtk/pdir/d2`
  prefs: []
  type: TYPE_NORMAL
- en: $ `gcc -g -c -fPIC -Wall modx2.c`
  prefs: []
  type: TYPE_NORMAL
- en: $ `gcc -g -shared -o libx2.so modx2.o`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: $ `cd /home/mtk/pdir/d1`
  prefs: []
  type: TYPE_NORMAL
- en: $ `gcc -g -c -Wall -fPIC modx1.c`
  prefs: []
  type: TYPE_NORMAL
- en: $ `gcc -g -shared -o libx1.so modx1.o -Wl,-rpath,/home/mtk/pdir/d2 \`
  prefs: []
  type: TYPE_NORMAL
- en: '`-L/home/mtk/pdir/d2 -lx2`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: $ `cd /home/mtk/pdir`
  prefs: []
  type: TYPE_NORMAL
- en: $ `gcc -g -Wall -o prog prog.c -Wl,-rpath,/home/mtk/pdir/d1 \`
  prefs: []
  type: TYPE_NORMAL
- en: '`-L/home/mtk/pdir/d1 -lx1`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: $ `objdump -p prog | grep PATH`
  prefs: []
  type: TYPE_NORMAL
- en: RPATH       /home/mtk/pdir/d1         libx1.so *will be sought here at run time*
  prefs: []
  type: TYPE_NORMAL
- en: $ `objdump -p d1/libx1.so | grep PATH`
  prefs: []
  type: TYPE_NORMAL
- en: RPATH       /home/mtk/pdir/d2         libx2.so *will be sought here at run time*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: $ `ldd prog`
  prefs: []
  type: TYPE_NORMAL
- en: libx1.so => /home/mtk/pdir/d1/libx1.so (0x40017000)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: libc.so.6 => /lib/tls/libc.so.6 (0x40024000)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: libx2.so => /home/mtk/pdir/d2/libx2.so (0x4014c000)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: $ `gcc -g -Wall -o prog prog.c -Wl,--enable-new-dtags \`
  prefs: []
  type: TYPE_NORMAL
- en: '`-Wl,-rpath,/home/mtk/pdir/d1 -L/home/mtk/pdir/d1 -lx1`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: $ `objdump -p prog | grep PATH`
  prefs: []
  type: TYPE_NORMAL
- en: RPATH       /home/mtk/pdir/d1
  prefs: []
  type: TYPE_NORMAL
- en: RUNPATH     /home/mtk/pdir/d1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: $ `gcc -Wl,-rpath,'$ORIGIN'/lib` ...
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: $ `gcc -g -c -fPIC -Wall -c foo.c`
  prefs: []
  type: TYPE_NORMAL
- en: $ `gcc -g -shared -o libfoo.so foo.o`
  prefs: []
  type: TYPE_NORMAL
- en: $ `gcc -g -o prog prog.c libfoo.so`
  prefs: []
  type: TYPE_NORMAL
- en: $`LD_LIBRARY_PATH=. ./prog`
  prefs: []
  type: TYPE_NORMAL
- en: main-xyz
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: $ `gcc -g -c -fPIC -Wall -c foo.c`
  prefs: []
  type: TYPE_NORMAL
- en: $ `gcc -g -shared -Wl,-Bsymbolic -o libfoo.so foo.o`
  prefs: []
  type: TYPE_NORMAL
- en: $ `gcc -g -o prog prog.c libfoo.so`
  prefs: []
  type: TYPE_NORMAL
- en: $`LD_LIBRARY_PATH=. ./prog`
  prefs: []
  type: TYPE_NORMAL
- en: foo-xyz
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: The *-Bsymbolic* linker option specifies that references to global symbols within
    a shared library should be preferentially bound to definitions (if they exist)
    within that library. (Note that, regardless of this option, calling *xyz()* from
    the main program would always invoke the version of *xyz()* defined in the main
    program.)
  prefs: []
  type: TYPE_NORMAL
- en: Using a Static Library Instead of a Shared Library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although it is almost always preferable to use shared libraries, there are occasional
    situations where static libraries may be appropriate. In particular, the fact
    that a statically linked application contains all of the code that it requires
    at run time can be advantageous. For example, static linking is useful if the
    user can’t, or doesn’t wish to, install a shared library on the system where the
    program is to be used, or if the program is to be run in an environment (perhaps
    a *chroot* jail, for example) where shared libraries are unavailable. In addition,
    even a compatible shared library upgrade may unintentionally introduce a bug that
    breaks an application. By linking an application statically, we can ensure that
    it is immune to changes in the shared libraries on a system and that it has all
    of the code it requires to run (at the expense of a larger program size, and consequent
    increased disk and memory requirements).
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, where the linker has a choice of a shared and a static library
    of the same name (e.g., we link using *-Lsomedir -ldemo*, and both `libdemo.so`
    and `libdemo.a` exist), the shared version of the library is used. To force usage
    of the static version of the library, we may do one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Specify the pathname of the static library (including the `.a` extension) on
    the *gcc* command line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specify the *-static* option to *gcc*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the *gcc* options *-Wl,-Bstatic* and *-Wl,-Bdynamic* to explicitly toggle
    the linker’s choice between static and shared libraries. These options can be
    intermingled with *-l* options on the *gcc* command line. The linker processes
    the options in the order in which they are specified.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An object library is an aggregation of compiled object modules that can be
    employed by programs that are linked against the library. Like other UNIX implementations,
    Linux provides two types of object libraries: static libraries, which were the
    only type of library available under early UNIX systems, and the more modern shared
    libraries.'
  prefs: []
  type: TYPE_NORMAL
- en: Because they provide several advantages over static libraries, shared libraries
    are the predominant type of library in use on contemporary UNIX systems. The advantages
    of shared libraries spring primarily from the fact that when a program is linked
    against the library, copies of the object modules required by the program are
    not included in the resulting executable. Instead, the (static) linker merely
    includes information in the executable file about the shared libraries that are
    required at run time. When the file is executed, the dynamic linker uses this
    information to load the required shared libraries. At run time, all programs using
    the same shared library share a single copy of that library in memory. Since shared
    libraries are not copied into executable files, and a single memory-resident copy
    of the shared library is employed by all programs at run time, shared libraries
    reduce the amount of disk space and memory required by the system.
  prefs: []
  type: TYPE_NORMAL
- en: The shared library soname provides a level of indirection in resolving shared
    library references at run time. If a shared library has a soname, then this name,
    rather than the library’s real name, is recorded in the resulting executable produced
    by the static linker. A versioning scheme, whereby a shared library is given a
    real name of the form `lib`*name.so.major-id.minor-id*, while the soname has the
    form `lib`*name.so.major-id*, allows for the creation of programs that automatically
    employ the latest minor version of the shared library (without requiring the programs
    to be relinked), while also allowing for the creation of new, incompatible major
    versions of the library.
  prefs: []
  type: TYPE_NORMAL
- en: In order to find a shared library at run time, the dynamic linker follows a
    standard set of search rules, which include searching a set of directories (e.g.,
    /`lib` and /`usr/lib`) in which most shared libraries are installed.
  prefs: []
  type: TYPE_NORMAL
- en: Further information
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Various information related to static and shared libraries can be found in the
    *ar(1)*, *gcc(1)*, *ld(1)*, *ldconfig(8)*, *ld.so(8)*, *dlopen(3)*, and *objdump(1)*
    manual pages and in the *info* documentation for *ld* and *readelf*. [Drepper,
    2004 (b)] covers many of the finer details of writing shared libraries on Linux.
    Further useful information can also be found in David Wheeler’s *Program Library
    HOWTO*, which is online at the LDP web site, [http://www.tldp.org/](http://www.tldp.org/).
    The GNU shared library scheme has many similarities to that implemented in Solaris,
    and therefore it is worth reading Sun’s *Linker and Libraries Guide* (available
    at [http://docs.sun.com/](http://docs.sun.com/)) for further information and examples.
    [Levine, 2000] provides an introduction to the operation of static and dynamic
    linkers.
  prefs: []
  type: TYPE_NORMAL
- en: Information about GNU *Libtool*, a tool that shields the programmer from the
    implementation-specific details of building shared libraries, can be found online
    at [http://www.gnu.org/software/libtool](http://www.gnu.org/software/libtool)
    and in [Vaughan et al., 2000].
  prefs: []
  type: TYPE_NORMAL
- en: The document *Executable and Linking Format*, from the *Tools Interface Standards*
    committee, provides details on ELF. This document can be found online at [http://refspecs.freestandards.org/elf/elf.pdf](http://refspecs.freestandards.org/elf/elf.pdf).
    [Lu, 1995] also provides a lot of useful detail on ELF.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Try compiling a program with and without the *-static* option, to see the difference
    in size between an executable dynamically linked with the C library and one that
    is linked against the static version of the C library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
