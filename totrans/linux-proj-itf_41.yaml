- en: Chapter 41. Fundamentals of Shared Libraries
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第41章。共享库基础
- en: Shared libraries are a technique for placing library functions into a single
    unit that can be shared by multiple processes at run time. This technique can
    save both disk space and RAM. This chapter covers the fundamentals of shared libraries.
    The next chapter covers a number of advanced features of shared libraries.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 共享库是一种将库函数放入单一单元中，在运行时可以被多个进程共享的技术。这种技术可以节省磁盘空间和内存。本章介绍共享库的基础知识。下一章将介绍共享库的多个高级特性。
- en: Object Libraries
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标库
- en: 'One way of building a program is simply to compile each of its source files
    to produce corresponding object files, and then link all of these object files
    together to produce the executable program, like so:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 构建程序的一种方法是简单地将每个源文件编译成相应的目标文件，然后将所有这些目标文件链接在一起，生成可执行程序，如下所示：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Linking is actually performed by the separate linker program, *ld*. When we
    link a program using the *cc* (or *gcc*) command, the compiler invokes *ld* behind
    the scenes. On Linux, the linker should always be invoked indirectly via *gcc*,
    since *gcc* ensures that *ld* is invoked with the correct options and links the
    program against the correct library files.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 链接实际上是由独立的链接器程序*ld*执行的。当我们使用*cc*（或*gcc*）命令链接程序时，编译器会在后台调用*ld*。在Linux上，链接器应始终通过*gcc*间接调用，因为*gcc*确保*ld*以正确的选项调用，并将程序链接到正确的库文件。
- en: In many cases, however, we may have source files that are used by several programs.
    As a first step toward saving ourselves some work, we could compile these source
    files just once, and then link them into different executables as required. Although
    this technique saves us compilation time, it still suffers from the disadvantage
    that we must name all of the object files during the link phase. Furthermore,
    our directories may be inconveniently cluttered with a large number of object
    files.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在许多情况下，我们可能有多个程序使用的源文件。作为节省工作量的第一步，我们可以只编译这些源文件一次，然后根据需要将它们链接到不同的可执行文件中。虽然这种技术节省了编译时间，但它仍然存在一个缺点，即我们必须在链接阶段指定所有的目标文件。此外，我们的目录可能会因为大量的目标文件而变得杂乱无章。
- en: 'To get around these problems, we can group a set of object files into a single
    unit, known as an *object library*. Object libraries are of two types: *static*
    and *shared*. Shared libraries are the more modern type of object library, and
    provide several advantages over static libraries, as we describe in Section 41.3.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了绕过这些问题，我们可以将一组目标文件组合成一个单一单元，称为*目标库*。目标库有两种类型：*静态*和*共享*。共享库是现代的目标库类型，相比静态库，它提供了多种优势，我们将在41.3节中描述。
- en: 'An aside: including debugger information when compiling a program'
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 顺便说一下：在编译程序时包含调试器信息
- en: In the *cc* command shown above, we used the *-g* option to include debugging
    information in the compiled program. In general, it is a good idea to always create
    programs and libraries that allow debugging. (In earlier times, debugging information
    was sometimes omitted so that the resulting executable used less disk and RAM,
    but nowadays disk and RAM are cheap.)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面显示的*cc*命令中，我们使用了*-g*选项以在编译后的程序中包含调试信息。通常，始终创建允许调试的程序和库是个好主意。（在早期，调试信息有时被省略，这样生成的可执行文件占用更少的磁盘和内存，但如今磁盘和内存都便宜了。）
- en: In addition, on some architectures, such as x86-32, the *-fomit-frame-pointer*
    option should not be specified because this makes debugging impossible. (On some
    architectures, such as x86-64, this option is enabled by default since it doesn’t
    prevent debugging.) For the same reason, executables and libraries should not
    be stripped of debugging information using *strip(1)*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在一些架构上，如x86-32，* -fomit-frame-pointer*选项不应指定，因为这会使调试变得不可能。（在某些架构上，如x86-64，该选项默认启用，因为它不会妨碍调试。）出于同样的原因，不应使用*strip(1)*去除可执行文件和库中的调试信息。
- en: Static Libraries
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态库
- en: Before starting our discussion of shared libraries, we begin with a brief description
    of static libraries in order to make clear the differences and advantages of shared
    libraries.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始讨论共享库之前，我们首先简要描述静态库，以便清楚地了解共享库的差异和优势。
- en: 'Static libraries, also known as *archives*, were the first type of library
    to be provided on UNIX systems. They provide the following benefits:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 静态库，也称为*档案*，是UNIX系统上提供的第一种库类型。它们提供以下好处：
- en: We can place a set of commonly used object files into a single library file
    that can then be used to build multiple executables, without needing to recompile
    the original source files when building each application.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以将一组常用的目标文件放入一个库文件中，然后使用该库文件构建多个可执行文件，而无需在构建每个应用程序时重新编译原始源文件。
- en: Link commands become simpler. Instead of listing a long series of object files
    on the link command line, we specify just the name of the static library. The
    linker knows how to search the static library and extract the objects required
    by the executable.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接命令变得更简单。我们不再在链接命令行中列出一长串目标文件，而只需指定静态库的名称。链接器知道如何搜索静态库并提取可执行文件所需的目标。
- en: Creating and maintaining a static library
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建和维护静态库
- en: In effect, a static library is simply a file holding copies of all of the object
    files added to it. The archive also records various attributes of each of the
    component object files, including file permissions, numeric user and group IDs,
    and last modification time. By convention, static libraries have names of the
    form `lib`*name*`.a`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，静态库只是一个文件，包含所有添加到其中的目标文件的副本。归档还记录了每个组成目标文件的各种属性，包括文件权限、用户和组的数字ID，以及最后的修改时间。按照惯例，静态库的名称形式为`lib`*name*`.a`。
- en: 'A static library is created and maintained using the *ar(1)* command, which
    has the following general form:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 静态库的创建和维护使用*ar(1)*命令，该命令的一般形式如下：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The *options* argument consists of a series of letters, one of which is the
    *operation code*, while the others are *modifiers* that influence the way the
    operation is carried out. Some commonly used operation codes are the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*options*参数由一系列字母组成，其中一个是*操作码*，其他的是影响操作执行方式的*修饰符*。一些常用的操作码如下所示：'
- en: '*r* (replace): Insert an object file into the archive, replacing any previous
    object file of the same name. This is the standard method for creating and updating
    an archive. Thus, we might build an archive with the following commands:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*r*（替换）：将目标文件插入到归档中，替换任何同名的目标文件。这是创建和更新归档的标准方法。因此，我们可能会使用以下命令构建归档：'
- en: '[PRE2]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As shown above, after building the library, we can delete the original object
    files if desired, since they are no longer required.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如上所示，构建完库后，如果需要，我们可以删除原始目标文件，因为它们不再需要。
- en: '*t* (table of contents): Display a table of contents of the archive. By default,
    this lists just the names of the object files in the archive. By adding the *v*
    (verbose) modifier, we additionally see all of the other attributes recorded in
    the archive for each object file, as in the following example:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*t*（目录表）：显示归档文件的目录表。默认情况下，这将列出归档中的所有目标文件的名称。通过添加*v*（详细）修饰符，我们还可以看到归档中记录的每个目标文件的其他属性，如以下示例所示：'
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The additional attributes that we see for each object are, from left to right,
    its permissions when it was added to the archive, its user ID and group ID, its
    size, and the date and time when it was last modified.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们看到的每个目标文件的附加属性，从左到右依次是：添加到归档时的权限、用户ID和组ID、文件大小，以及最后修改日期和时间。
- en: '*d* (delete): Delete a named module from the archive, as in this example:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*d*（删除）：从归档中删除指定的模块，如以下示例所示：'
- en: '[PRE4]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Using a static library
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用静态库
- en: 'We can link a program against a static library in two ways. The first is to
    name the static library as part of the link command, as in the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过两种方式将程序与静态库链接。第一种方式是在链接命令中指定静态库，如下所示：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Alternatively, we can place the library in one of the standard directories
    searched by the linker (e.g., `/usr/lib`), and then specify the library name (i.e.,
    the filename of the library without the `lib` prefix and `.a` suffix) using the
    *-l* option:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以将库放置在链接器搜索的标准目录之一（例如`/usr/lib`）中，然后使用*-l*选项指定库的名称（即库文件名，不包括`lib`前缀和`.a`后缀）：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If the library resides in a directory not normally searched by the linker,
    we can specify that the linker should search this additional directory using the
    *-L* option:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果库位于链接器通常不搜索的目录中，我们可以使用*-L*选项指定链接器搜索这个额外的目录：
- en: '[PRE7]*`mylibdir`*`` `-ldemo`'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE7]*`mylibdir`*`` `-ldemo`'
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: $ `./prog`
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: $ `./prog`
- en: Called mod1-x1
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 调用mod1-x1
- en: Called mod2-x2
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 调用mod2-x2
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: $ `gcc -g -c -fPIC -Wall mod1.c mod2.c mod3.c`
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -c -fPIC -Wall mod1.c mod2.c mod3.c`
- en: $ `gcc -g -shared -o libfoo.so mod1.o mod2.o mod3.o`
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -shared -o libfoo.so mod1.o mod2.o mod3.o`
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: $ `gcc -g -fPIC -Wall mod1.c mod2.c mod3.c -shared -o libfoo.so`
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -fPIC -Wall mod1.c mod2.c mod3.c -shared -o libfoo.so`
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: $ `nm mod1.o | grep _GLOBAL_OFFSET_TABLE_`
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: $ `nm mod1.o | grep _GLOBAL_OFFSET_TABLE_`
- en: $ `readelf -s mod1.o | grep _GLOBAL_OFFSET_TABLE_`
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: $ `readelf -s mod1.o | grep _GLOBAL_OFFSET_TABLE_`
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: $ `objdump --all-headers libfoo.so | grep TEXTREL`
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: $ `objdump --all-headers libfoo.so | grep TEXTREL`
- en: $ `readelf -d libfoo.so | grep TEXTREL`
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: $ `readelf -d libfoo.so | grep TEXTREL`
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: $ `gcc -g -Wall -o prog prog.c libfoo.so`
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -Wall -o prog prog.c libfoo.so`
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: $ `./prog`
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: $ `./prog`
- en: './prog: error in loading shared libraries: libfoo.so: cannot'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: ./prog：加载共享库时出错：libfoo.so：无法打开
- en: 'open shared object file: No such file or directory'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 打开共享对象文件：没有此文件或目录
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: $ `LD_LIBRARY_PATH=. ./prog`
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: $ `LD_LIBRARY_PATH=. ./prog`
- en: Called mod1-x1
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 调用了 mod1-x1
- en: Called mod2-x2
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 调用了 mod2-x2
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: $ `gcc -g -c -fPIC -Wall mod1.c mod2.c mod3.c`
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -c -fPIC -Wall mod1.c mod2.c mod3.c`
- en: $ `gcc -g -shared -Wl,-soname,libbar.so -o libfoo.so mod1.o mod2.o mod3.o`
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -shared -Wl,-soname,libbar.so -o libfoo.so mod1.o mod2.o mod3.o`
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: $ `objdump -p libfoo.so | grep SONAME`
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: $ `objdump -p libfoo.so | grep SONAME`
- en: SONAME      libbar.so
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: SONAME      libbar.so
- en: $ `readelf -d libfoo.so | grep SONAME`
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: $ `readelf -d libfoo.so | grep SONAME`
- en: '0x0000000e (SONAME)      Library soname: [libbar.so]'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 0x0000000e (SONAME)      库的 soname：[libbar.so]
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: $ `gcc -g -Wall -o prog prog.c libfoo.so`
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -Wall -o prog prog.c libfoo.so`
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: $ `LD_LIBRARY_PATH=. ./prog`
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: $ `LD_LIBRARY_PATH=. ./prog`
- en: 'prog: error in loading shared libraries: libbar.so: cannot open'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: prog：加载共享库时出错：libbar.so：无法打开
- en: 'shared object file: No such file or directory'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 共享对象文件：没有此文件或目录
- en: '[PRE20]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: $ `ln -s libfoo.so libbar.so`
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: $ `ln -s libfoo.so libbar.so`
- en: '*Create soname symbolic link in current directory*'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*在当前目录中创建 soname 符号链接*'
- en: $ `LD_LIBRARY_PATH=. ./prog`
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: $ `LD_LIBRARY_PATH=. ./prog`
- en: Called mod1-x1
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 调用了 mod1-x1
- en: Called mod2-x2
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 调用了 mod2-x2
- en: '[PRE21]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: $ `ldd prog`
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: $ `ldd prog`
- en: libdemo.so.1 => /usr/lib/libdemo.so.1 (0x40019000)
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: libdemo.so.1 => /usr/lib/libdemo.so.1 (0x40019000)
- en: libc.so.6 => /lib/tls/libc.so.6 (0x4017b000)
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: libc.so.6 => /lib/tls/libc.so.6 (0x4017b000)
- en: /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)
- en: '[PRE22]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '*library-name* => *resolves-to-path*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*library-name* => *resolves-to-path*'
- en: '[PRE23]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: $ `nm -A /usr/lib/lib*.so 2> /dev/null | grep ' crypt$'`
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: $ `nm -A /usr/lib/lib*.so 2> /dev/null | grep ' crypt$'`
- en: /usr/lib/libcrypt.so:00007080 W crypt
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: /usr/lib/libcrypt.so:00007080 W crypt
- en: '[PRE24]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: libdemo.so.1.0.1
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: libdemo.so.1.0.1
- en: libdemo.so.1.0.2              *Minor version, compatible with version 1.0.1*
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: libdemo.so.1.0.2              *次要版本，与版本1.0.1兼容*
- en: libdemo.so.2.0.0              *New major version, incompatible with version
    1.**
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: libdemo.so.2.0.0              *新的主版本，与版本1不兼容*
- en: libreadline.so.5.0
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: libreadline.so.5.0
- en: '[PRE25]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: libdemo.so.1        -> libdemo.so.1.0.2
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: libdemo.so.1        -> libdemo.so.1.0.2
- en: libdemo.so.2        -> libdemo.so.2.0.0
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: libdemo.so.2        -> libdemo.so.2.0.0
- en: libreadline.so.5    -> libreadline.so.5.0
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: libreadline.so.5    -> libreadline.so.5.0
- en: '[PRE26]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: libdemo.so           -> libdemo.so.2
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: libdemo.so           -> libdemo.so.2
- en: libreadline.so       -> libreadline.so.5
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: libreadline.so       -> libreadline.so.5
- en: '[PRE27]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: $ `gcc -g -c -fPIC -Wall mod1.c mod2.c mod3.c`
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -c -fPIC -Wall mod1.c mod2.c mod3.c`
- en: '[PRE28]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: $ `gcc -g -shared -Wl,-soname,libdemo.so.1 -o libdemo.so.1.0.1 \`
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -shared -Wl,-soname,libdemo.so.1 -o libdemo.so.1.0.1 \`
- en: '`mod1.o mod2.o mod3.o`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`mod1.o mod2.o mod3.o`'
- en: '[PRE29]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: $ `ln -s libdemo.so.1.0.1 libdemo.so.1`
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: $ `ln -s libdemo.so.1.0.1 libdemo.so.1`
- en: $ `ln -s libdemo.so.1 libdemo.so`
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: $ `ln -s libdemo.so.1 libdemo.so`
- en: '[PRE30]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: $ `ls -l libdemo.so* | awk '{print $1, $9, $10, $11}'`
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: $ `ls -l libdemo.so* | awk '{print $1, $9, $10, $11}'`
- en: lrwxrwxrwx libdemo.so -> libdemo.so.1
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: lrwxrwxrwx libdemo.so -> libdemo.so.1
- en: lrwxrwxrwx libdemo.so.1 -> libdemo.so.1.0.1
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: lrwxrwxrwx libdemo.so.1 -> libdemo.so.1.0.1
- en: -rwxr-xr-x libdemo.so.1.0.1
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: -rwxr-xr-x libdemo.so.1.0.1
- en: '[PRE31]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: $ `gcc -g -Wall -o prog prog.c -L. -ldemo`
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -Wall -o prog prog.c -L. -ldemo`
- en: $ `LD_LIBRARY_PATH=. ./prog`
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: $ `LD_LIBRARY_PATH=. ./prog`
- en: Called mod1-x1
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 调用了 mod1-x1
- en: Called mod2-x2
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 调用了 mod2-x2
- en: '[PRE32]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: $ `su`
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: $ `su`
- en: 'Password:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 密码：
- en: '`mv libdemo.so.1.0.1 /usr/lib`'
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`mv libdemo.so.1.0.1 /usr/lib`'
- en: '`cd /usr/lib`'
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`cd /usr/lib`'
- en: '`ln -s libdemo.so.1.0.1 libdemo.so.1`'
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`ln -s libdemo.so.1.0.1 libdemo.so.1`'
- en: '`ln -s libdemo.so.1 libdemo.so`'
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`ln -s libdemo.so.1 libdemo.so`'
- en: '[PRE33]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: $ `su`
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: $ `su`
- en: 'Password:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 密码：
- en: '`mv libdemo.so.1.0.1 libdemo.so.2.0.0 /usr/lib`'
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`mv libdemo.so.1.0.1 libdemo.so.2.0.0 /usr/lib`'
- en: '`ldconfig -v | grep libdemo`'
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`ldconfig -v | grep libdemo`'
- en: libdemo.so.1 -> libdemo.so.1.0.1 (changed)
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: libdemo.so.1 -> libdemo.so.1.0.1（已更改）
- en: libdemo.so.2 -> libdemo.so.2.0.0 (changed)
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: libdemo.so.2 -> libdemo.so.2.0.0（已更改）
- en: '[PRE34]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '`cd /usr/lib`'
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`cd /usr/lib`'
- en: '`ls -l libdemo* | awk ''{print $1, $9, $10, $11}''`'
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`ls -l libdemo* | awk ''{print $1, $9, $10, $11}''`'
- en: lrwxrwxrwx libdemo.so.1 -> libdemo.so.1.0.1
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: lrwxrwxrwx libdemo.so.1 -> libdemo.so.1.0.1
- en: -rwxr-xr-x libdemo.so.1.0.1
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: -rwxr-xr-x libdemo.so.1.0.1
- en: lrwxrwxrwx libdemo.so.2 -> libdemo.so.2.0.0
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: lrwxrwxrwx libdemo.so.2 -> libdemo.so.2.0.0
- en: -rwxr-xr-x libdemo.so.2.0.0
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: -rwxr-xr-x libdemo.so.2.0.0
- en: '[PRE35]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '`ln -s libdemo.so.2 libdemo.so`'
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`ln -s libdemo.so.2 libdemo.so`'
- en: '[PRE36]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '`mv libdemo.so.2.0.1 /usr/lib`'
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`mv libdemo.so.2.0.1 /usr/lib`'
- en: '`ldconfig -v | grep libdemo`'
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`ldconfig -v | grep libdemo`'
- en: libdemo.so.1 -> libdemo.so.1.0.1
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: libdemo.so.1 -> libdemo.so.1.0.1
- en: libdemo.so.2 -> libdemo.so.2.0.1 (changed)
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: libdemo.so.2 -> libdemo.so.2.0.1（已更改）
- en: '[PRE37]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: $ `gcc -g -c -fPIC -Wall mod1.c mod2.c mod3.c`
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -c -fPIC -Wall mod1.c mod2.c mod3.c`
- en: $ `gcc -g -shared -Wl,-soname,libdemo.so.1 -o libdemo.so.1.0.1 \`
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -shared -Wl,-soname,libdemo.so.1 -o libdemo.so.1.0.1 \`
- en: '`mod1.o mod2.o mod3.o`'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`mod1.o mod2.o mod3.o`'
- en: $ `/sbin/ldconfig -nv .`
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: $ `/sbin/ldconfig -nv .`
- en: '.:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '.:'
- en: libdemo.so.1 -> libdemo.so.1.0.1
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: libdemo.so.1 -> libdemo.so.1.0.1
- en: $ `ls -l libdemo.so* | awk '{print $1, $9, $10, $11}'`
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: $ `ls -l libdemo.so* | awk '{print $1, $9, $10, $11}'`
- en: lrwxrwxrwx libdemo.so.1 -> libdemo.so.1.0.1
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: lrwxrwxrwx libdemo.so.1 -> libdemo.so.1.0.1
- en: -rwxr-xr-x libdemo.so.1.0.1
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: -rwxr-xr-x libdemo.so.1.0.1
- en: '[PRE38]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: $ `su`
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: $ `su`
- en: 'Password:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '密码:'
- en: '`gcc -g -c -fPIC -Wall mod1.c mod2.c mod3.c`'
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`gcc -g -c -fPIC -Wall mod1.c mod2.c mod3.c`'
- en: '`gcc -g -shared -Wl,-soname,libdemo.so.1 -o libdemo.so.1.0.2 \`'
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`gcc -g -shared -Wl,-soname,libdemo.so.1 -o libdemo.so.1.0.2 \`'
- en: '`mod1.o mod2.o mod3.o`'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`mod1.o mod2.o mod3.o`'
- en: '`mv libdemo.so.1.0.2 /usr/lib`'
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`mv libdemo.so.1.0.2 /usr/lib`'
- en: '`ldconfig -v | grep libdemo`'
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`ldconfig -v | grep libdemo`'
- en: libdemo.so.1 -> libdemo.so.1.0.2 (changed)
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: libdemo.so.1 -> libdemo.so.1.0.2 (已更改)
- en: '[PRE39]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '`gcc -g -c -fPIC -Wall mod1.c mod2.c mod3.c`'
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`gcc -g -c -fPIC -Wall mod1.c mod2.c mod3.c`'
- en: '`gcc -g -shared -Wl,-soname,libdemo.so.2 -o libdemo.so.2.0.0 \`'
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`gcc -g -shared -Wl,-soname,libdemo.so.2 -o libdemo.so.2.0.0 \`'
- en: '`mod1.o mod2.o mod3.o`'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`mod1.o mod2.o mod3.o`'
- en: '`mv libdemo.so.2.0.0 /usr/lib`'
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`mv libdemo.so.2.0.0 /usr/lib`'
- en: '`ldconfig -v | grep libdemo`'
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`ldconfig -v | grep libdemo`'
- en: libdemo.so.1 -> libdemo.so.1.0.2
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: libdemo.so.1 -> libdemo.so.1.0.2
- en: libdemo.so.2 -> libdemo.so.2.0.0 (changed)
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: libdemo.so.2 -> libdemo.so.2.0.0 (已更改)
- en: '`cd /usr/lib`'
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`cd /usr/lib`'
- en: '`ln -sf libdemo.so.2 libdemo.so`'
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`ln -sf libdemo.so.2 libdemo.so`'
- en: '[PRE40]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: $ `gcc -g -Wall -Wl,-rpath,/home/mtk/pdir -o prog prog.c libdemo.so`
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -Wall -Wl,-rpath,/home/mtk/pdir -o prog prog.c libdemo.so`
- en: '[PRE41]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: $ `cd /home/mtk/pdir/d2`
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: $ `cd /home/mtk/pdir/d2`
- en: $ `gcc -g -c -fPIC -Wall modx2.c`
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -c -fPIC -Wall modx2.c`
- en: $ `gcc -g -shared -o libx2.so modx2.o`
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -shared -o libx2.so modx2.o`
- en: '[PRE42]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: $ `cd /home/mtk/pdir/d1`
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: $ `cd /home/mtk/pdir/d1`
- en: $ `gcc -g -c -Wall -fPIC modx1.c`
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -c -Wall -fPIC modx1.c`
- en: $ `gcc -g -shared -o libx1.so modx1.o -Wl,-rpath,/home/mtk/pdir/d2 \`
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -shared -o libx1.so modx1.o -Wl,-rpath,/home/mtk/pdir/d2 \`
- en: '`-L/home/mtk/pdir/d2 -lx2`'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`-L/home/mtk/pdir/d2 -lx2`'
- en: '[PRE43]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: $ `cd /home/mtk/pdir`
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: $ `cd /home/mtk/pdir`
- en: $ `gcc -g -Wall -o prog prog.c -Wl,-rpath,/home/mtk/pdir/d1 \`
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -Wall -o prog prog.c -Wl,-rpath,/home/mtk/pdir/d1 \`
- en: '`-L/home/mtk/pdir/d1 -lx1`'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`-L/home/mtk/pdir/d1 -lx1`'
- en: '[PRE44]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: $ `objdump -p prog | grep PATH`
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: $ `objdump -p prog | grep PATH`
- en: RPATH       /home/mtk/pdir/d1         libx1.so *will be sought here at run time*
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: RPATH       /home/mtk/pdir/d1         libx1.so *将在运行时从这里查找*
- en: $ `objdump -p d1/libx1.so | grep PATH`
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: $ `objdump -p d1/libx1.so | grep PATH`
- en: RPATH       /home/mtk/pdir/d2         libx2.so *will be sought here at run time*
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: RPATH       /home/mtk/pdir/d2         libx2.so *将在运行时从这里查找*
- en: '[PRE45]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: $ `ldd prog`
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: $ `ldd prog`
- en: libx1.so => /home/mtk/pdir/d1/libx1.so (0x40017000)
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: libx1.so => /home/mtk/pdir/d1/libx1.so (0x40017000)
- en: libc.so.6 => /lib/tls/libc.so.6 (0x40024000)
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: libc.so.6 => /lib/tls/libc.so.6 (0x40024000)
- en: libx2.so => /home/mtk/pdir/d2/libx2.so (0x4014c000)
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: libx2.so => /home/mtk/pdir/d2/libx2.so (0x4014c000)
- en: /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)
- en: '[PRE46]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: $ `gcc -g -Wall -o prog prog.c -Wl,--enable-new-dtags \`
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -Wall -o prog prog.c -Wl,--enable-new-dtags \`
- en: '`-Wl,-rpath,/home/mtk/pdir/d1 -L/home/mtk/pdir/d1 -lx1`'
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`-Wl,-rpath,/home/mtk/pdir/d1 -L/home/mtk/pdir/d1 -lx1`'
- en: $ `objdump -p prog | grep PATH`
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: $ `objdump -p prog | grep PATH`
- en: RPATH       /home/mtk/pdir/d1
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: RPATH       /home/mtk/pdir/d1
- en: RUNPATH     /home/mtk/pdir/d1
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: RUNPATH     /home/mtk/pdir/d1
- en: '[PRE47]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: $ `gcc -Wl,-rpath,'$ORIGIN'/lib` ...
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -Wl,-rpath,'$ORIGIN'/lib` ...
- en: '[PRE48]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: $ `gcc -g -c -fPIC -Wall -c foo.c`
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -c -fPIC -Wall -c foo.c`
- en: $ `gcc -g -shared -o libfoo.so foo.o`
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -shared -o libfoo.so foo.o`
- en: $ `gcc -g -o prog prog.c libfoo.so`
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -o prog prog.c libfoo.so`
- en: $`LD_LIBRARY_PATH=. ./prog`
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: $`LD_LIBRARY_PATH=. ./prog`
- en: main-xyz
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: main-xyz
- en: '[PRE49]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: $ `gcc -g -c -fPIC -Wall -c foo.c`
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -c -fPIC -Wall -c foo.c`
- en: $ `gcc -g -shared -Wl,-Bsymbolic -o libfoo.so foo.o`
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -shared -Wl,-Bsymbolic -o libfoo.so foo.o`
- en: $ `gcc -g -o prog prog.c libfoo.so`
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: $ `gcc -g -o prog prog.c libfoo.so`
- en: $`LD_LIBRARY_PATH=. ./prog`
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: $`LD_LIBRARY_PATH=. ./prog`
- en: foo-xyz
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: foo-xyz
- en: '```'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The *-Bsymbolic* linker option specifies that references to global symbols within
    a shared library should be preferentially bound to definitions (if they exist)
    within that library. (Note that, regardless of this option, calling *xyz()* from
    the main program would always invoke the version of *xyz()* defined in the main
    program.)
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '*-Bsymbolic* 链接器选项指定应优先将共享库中的全局符号引用绑定到该库中的定义（如果存在）。(请注意，无论是否使用此选项，从主程序调用 *xyz()*
    始终会调用主程序中定义的 *xyz()* 版本。)'
- en: Using a Static Library Instead of a Shared Library
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用静态库代替共享库
- en: Although it is almost always preferable to use shared libraries, there are occasional
    situations where static libraries may be appropriate. In particular, the fact
    that a statically linked application contains all of the code that it requires
    at run time can be advantageous. For example, static linking is useful if the
    user can’t, or doesn’t wish to, install a shared library on the system where the
    program is to be used, or if the program is to be run in an environment (perhaps
    a *chroot* jail, for example) where shared libraries are unavailable. In addition,
    even a compatible shared library upgrade may unintentionally introduce a bug that
    breaks an application. By linking an application statically, we can ensure that
    it is immune to changes in the shared libraries on a system and that it has all
    of the code it requires to run (at the expense of a larger program size, and consequent
    increased disk and memory requirements).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管通常更倾向于使用共享库，但在某些情况下，静态库可能更为合适。特别是，静态链接的应用程序包含其运行时所需的所有代码这一事实可能是有利的。例如，如果用户无法或不希望在要使用程序的系统上安装共享库，或者如果程序需要在共享库不可用的环境（例如
    *chroot* 监狱）中运行，那么静态链接非常有用。此外，即使是兼容的共享库升级，也可能无意中引入一个错误，导致应用程序崩溃。通过静态链接应用程序，我们可以确保它不受系统上共享库变化的影响，并且拥有运行所需的所有代码（虽然会增加程序大小，并导致磁盘和内存要求增加）。
- en: 'By default, where the linker has a choice of a shared and a static library
    of the same name (e.g., we link using *-Lsomedir -ldemo*, and both `libdemo.so`
    and `libdemo.a` exist), the shared version of the library is used. To force usage
    of the static version of the library, we may do one of the following:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当链接器可以选择相同名称的共享库和静态库时（例如，我们使用 *-Lsomedir -ldemo* 链接，而 `libdemo.so` 和 `libdemo.a`
    都存在），将使用共享库版本。要强制使用静态库版本，可以执行以下操作之一：
- en: Specify the pathname of the static library (including the `.a` extension) on
    the *gcc* command line.
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 *gcc* 命令行中指定静态库的路径名（包括 `.a` 扩展名）。
- en: Specify the *-static* option to *gcc*.
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 *gcc* 中指定 *-static* 选项。
- en: Use the *gcc* options *-Wl,-Bstatic* and *-Wl,-Bdynamic* to explicitly toggle
    the linker’s choice between static and shared libraries. These options can be
    intermingled with *-l* options on the *gcc* command line. The linker processes
    the options in the order in which they are specified.
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 *gcc* 选项 *-Wl,-Bstatic* 和 *-Wl,-Bdynamic* 明确切换链接器在静态库和共享库之间的选择。这些选项可以与 *-l*
    选项在 *gcc* 命令行中交替使用。链接器按指定顺序处理这些选项。
- en: Summary
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'An object library is an aggregation of compiled object modules that can be
    employed by programs that are linked against the library. Like other UNIX implementations,
    Linux provides two types of object libraries: static libraries, which were the
    only type of library available under early UNIX systems, and the more modern shared
    libraries.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 对象库是编译后的目标模块的集合，可以被与库链接的程序使用。像其他 UNIX 实现一样，Linux 提供了两种类型的对象库：静态库，这是早期 UNIX 系统唯一可用的库类型，以及现代的共享库。
- en: Because they provide several advantages over static libraries, shared libraries
    are the predominant type of library in use on contemporary UNIX systems. The advantages
    of shared libraries spring primarily from the fact that when a program is linked
    against the library, copies of the object modules required by the program are
    not included in the resulting executable. Instead, the (static) linker merely
    includes information in the executable file about the shared libraries that are
    required at run time. When the file is executed, the dynamic linker uses this
    information to load the required shared libraries. At run time, all programs using
    the same shared library share a single copy of that library in memory. Since shared
    libraries are not copied into executable files, and a single memory-resident copy
    of the shared library is employed by all programs at run time, shared libraries
    reduce the amount of disk space and memory required by the system.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 由于共享库相较于静态库提供了多个优点，因此它们是当代 UNIX 系统中使用的主要库类型。共享库的优点主要来自于这样的事实：当程序与库链接时，程序所需的目标模块副本不会包含在最终的可执行文件中。相反，链接器仅在可执行文件中包含关于运行时所需共享库的信息。当文件执行时，动态链接器使用这些信息加载所需的共享库。在运行时，所有使用相同共享库的程序共享内存中的单个库副本。由于共享库不会被复制到可执行文件中，并且所有程序在运行时都使用共享库的单一内存副本，因此共享库减少了系统所需的磁盘空间和内存。
- en: The shared library soname provides a level of indirection in resolving shared
    library references at run time. If a shared library has a soname, then this name,
    rather than the library’s real name, is recorded in the resulting executable produced
    by the static linker. A versioning scheme, whereby a shared library is given a
    real name of the form `lib`*name.so.major-id.minor-id*, while the soname has the
    form `lib`*name.so.major-id*, allows for the creation of programs that automatically
    employ the latest minor version of the shared library (without requiring the programs
    to be relinked), while also allowing for the creation of new, incompatible major
    versions of the library.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 共享库的soname提供了一种在运行时解析共享库引用的间接方式。如果一个共享库有soname，那么在静态链接器生成的可执行文件中，记录的将是这个名字，而不是库的真实名称。版本控制方案是，给共享库分配一个真实名称，格式为`lib`*name.so.major-id.minor-id*，而soname的格式为`lib`*name.so.major-id*，这种方式可以创建自动使用共享库最新小版本的程序（无需重新链接程序），同时也允许创建新的、不兼容的大版本共享库。
- en: In order to find a shared library at run time, the dynamic linker follows a
    standard set of search rules, which include searching a set of directories (e.g.,
    /`lib` and /`usr/lib`) in which most shared libraries are installed.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在运行时找到共享库，动态链接器遵循一套标准的搜索规则，其中包括搜索一组目录（例如，/`lib` 和 /`usr/lib`），大多数共享库通常安装在这些目录中。
- en: Further information
  id: totrans-238
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更多信息
- en: Various information related to static and shared libraries can be found in the
    *ar(1)*, *gcc(1)*, *ld(1)*, *ldconfig(8)*, *ld.so(8)*, *dlopen(3)*, and *objdump(1)*
    manual pages and in the *info* documentation for *ld* and *readelf*. [Drepper,
    2004 (b)] covers many of the finer details of writing shared libraries on Linux.
    Further useful information can also be found in David Wheeler’s *Program Library
    HOWTO*, which is online at the LDP web site, [http://www.tldp.org/](http://www.tldp.org/).
    The GNU shared library scheme has many similarities to that implemented in Solaris,
    and therefore it is worth reading Sun’s *Linker and Libraries Guide* (available
    at [http://docs.sun.com/](http://docs.sun.com/)) for further information and examples.
    [Levine, 2000] provides an introduction to the operation of static and dynamic
    linkers.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 与静态库和共享库相关的各种信息可以在*ar(1)*、*gcc(1)*、*ld(1)*、*ldconfig(8)*、*ld.so(8)*、*dlopen(3)*、*objdump(1)*的手册页中找到，此外，还可以在*ld*和*readelf*的*info*文档中找到相关信息。[Drepper,
    2004 (b)] 详细介绍了在Linux上编写共享库的许多细节。更多有用的信息也可以在David Wheeler的*程序库HOWTO*中找到，该文档可以在LDP网站上查阅，网址为[http://www.tldp.org/](http://www.tldp.org/)。GNU共享库方案与Solaris中实现的方案有很多相似之处，因此阅读Sun的*链接器和库指南*（可以在[http://docs.sun.com/](http://docs.sun.com/)找到）以获取更多信息和示例是值得的。[Levine,
    2000] 提供了静态链接器和动态链接器操作的介绍。
- en: Information about GNU *Libtool*, a tool that shields the programmer from the
    implementation-specific details of building shared libraries, can be found online
    at [http://www.gnu.org/software/libtool](http://www.gnu.org/software/libtool)
    and in [Vaughan et al., 2000].
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 关于GNU *Libtool*的信息，这是一种屏蔽程序员与构建共享库实现相关细节的工具，可以在线查阅，网址为[http://www.gnu.org/software/libtool](http://www.gnu.org/software/libtool)，并且在[Vaughan
    et al., 2000]中有介绍。
- en: The document *Executable and Linking Format*, from the *Tools Interface Standards*
    committee, provides details on ELF. This document can be found online at [http://refspecs.freestandards.org/elf/elf.pdf](http://refspecs.freestandards.org/elf/elf.pdf).
    [Lu, 1995] also provides a lot of useful detail on ELF.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 该文档《*可执行与链接格式*》由*工具接口标准*委员会提供，详细介绍了ELF。该文档可以在线查阅，网址为[http://refspecs.freestandards.org/elf/elf.pdf](http://refspecs.freestandards.org/elf/elf.pdf)。[Lu,
    1995] 也提供了大量关于ELF的有用细节。
- en: Exercise
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: Try compiling a program with and without the *-static* option, to see the difference
    in size between an executable dynamically linked with the C library and one that
    is linked against the static version of the C library.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试在编译程序时使用与不使用*-static*选项，查看一个动态链接C库的可执行文件与一个静态链接C库的可执行文件之间的大小差异。
