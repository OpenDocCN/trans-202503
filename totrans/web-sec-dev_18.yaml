- en: '**16**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**16**'
- en: '**DON’T BE AN ACCESSORY**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**不要成为共犯**'
- en: '![image](Images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common01.jpg)'
- en: Malicious actors have a lot of places to hide on the internet. Hackers routinely
    impersonate other people and use compromised servers to evade detection. This
    chapter explores various ways that your web presence may be helping attackers
    get away with malicious acts, even when you aren’t the target of their attacks.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意行为者在互联网上有很多藏身之处。黑客常常冒充他人，并使用被攻陷的服务器来躲避检测。本章探讨了你的网站可能如何帮助攻击者逃脱恶意行为，即使你并不是他们攻击的目标。
- en: Making sure you aren’t being an accessory will win you good internet citizen
    points. More practically, if hackers are using your system as a jumping-off point
    for attacking others, you will quickly find your domain and IP addresses getting
    blacklisted from key services, and you may even end up being cut off by your hosting
    provider.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你不是网络犯罪的共犯，这样你将获得良好的网络公民分数。更实际地说，如果黑客将你的系统作为攻击其他目标的跳板，你很快就会发现你的域名和IP地址被主要服务列入黑名单，甚至可能会被你的托管服务商断开连接。
- en: 'This chapter covers several vulnerabilities that can make you an accessory
    to malicious acts on the internet. The first couple of vulnerabilities are used
    by hackers to send harmful emails: scammers frequently use *email address spoofing*
    to disguise who is sending an email, and use *open redirects* on websites to disguise
    malicious links in email.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了几种可能使你成为网络恶意行为共犯的漏洞。前几个漏洞被黑客用来发送有害邮件：诈骗者常常使用*电子邮件地址伪造*来伪装发件人，并在网站上利用*开放重定向*来伪装邮件中的恶意链接。
- en: Next, you’ll see how your site can be hosted within a frame on someone else’s
    page and be used as part of a *clickjacking* attack. In this type of attack, your
    site is used in a bait-and-switch scheme to trick users into clicking something
    harmful.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将看到如何将你的网站嵌入到他人页面的框架中，并作为*点击劫持*攻击的一部分。在这种类型的攻击中，你的网站被用作诱饵和替换的手段，欺骗用户点击一些有害的内容。
- en: You saw in the preceding chapter how hackers can use vulnerabilities in XML
    parsers in order to trigger network requests. If an attacker can craft malicious
    HTTP requests that trigger outbound network access from your server, you are enabling
    *server-side request forgery* attacks. You will learn common ways this type of
    attack can be launched and how to protect against it.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，你已经了解了黑客如何利用XML解析器中的漏洞来触发网络请求。如果攻击者能够精心构造恶意HTTP请求，触发从你的服务器发出的外部网络访问，那么你就启用了*服务器端请求伪造*攻击。你将学习这种攻击类型的常见发起方式以及如何防御。
- en: Finally, you will look at the risk of malware being installed on your servers
    for use in a *botnet*. You may unknowingly be hosting zombie code that can be
    controlled remotely by an attacker!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你将了解恶意软件被安装到你的服务器上，进而用于*僵尸网络*的风险。你可能在不知情的情况下托管了可以被攻击者远程控制的僵尸代码！
- en: '**Email Fraud**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**电子邮件欺诈**'
- en: 'Email is sent using the *Simple Mail Transfer Protocol (SMTP)*. One major oversight
    in the original design of SMTP is that it does not have a mechanism for authentication:
    the sender of an email is able to attach *any* email address they want in the
    `From` header, and until relatively recently, there was no way for the receiving
    agent to verify that the sender is who they claim to be.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件是通过*简单邮件传输协议（SMTP）*发送的。SMTP最初设计中的一个重大疏漏是没有身份验证机制：电子邮件的发件人可以在`From`头部附加*任何*他们想要的电子邮件地址，直到最近，接收方无法验证发件人是否真的是他们声称的身份。
- en: As a result, of course, we all receive massive amounts of spam email. Experts
    estimate that around *half* of all email sent is spam—nearly 15 billion spam emails
    are sent every day. Spam email generally contains unwanted (and often misleading)
    marketing material that is a nuisance to the recipient.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，当然，我们都会收到大量垃圾邮件。专家估计，约有*一半*的电子邮件是垃圾邮件——每天发送近150亿封垃圾邮件。垃圾邮件通常包含不需要的（且常常具有误导性）营销材料，给收件人带来麻烦。
- en: 'Related to spam email is *phishing* email: the sender attempts to trick the
    recipient into revealing sensitive personal information such as passwords or credit
    card details. A common trick is to email a victim with what looks like a password
    reset email for a website they use, but have the reset link to a *doppelganger
    domain*—a domain whose name looks superficially similar to the real domain name
    that hosts a fake version of the site. The fake site will harvest the user’s credentials
    on behalf of the attacker, and then redirect the user to the real site so the
    victim is none the wiser.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 与垃圾邮件相关的是*钓鱼*电子邮件：发件人试图欺骗收件人泄露敏感的个人信息，如密码或信用卡详情。一种常见的伎俩是向受害者发送看似是他们使用的网站的密码重置邮件，但实际重置链接指向一个*伪域名*——一个看起来与真实域名相似的域名，托管着该网站的伪造版本。假网站会在攻击者的代理下收集用户的凭据，然后将用户重定向到真实网站，使受害者毫无察觉。
- en: An even more vicious form of this type of attack is *spearphishing*, whereby
    the content of a malicious email is tailored to a small audience. Fraudsters sending
    this type of email often conduct detailed research on their victims in order to
    be able to name-drop or impersonate colleagues. *CEO fraud*—through which a scammer
    pretends to be a C-level officer and emails another employee to request a wire
    transfer—netted hackers over $26 billion between 2016 and 2019 according to the
    FBI. And that’s just counting the victims who reported the loss to law enforcement.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 更恶劣的这种类型的攻击是*精准钓鱼*（spearphishing），其中恶意电子邮件的内容是针对小范围受众量身定制的。进行这种攻击的诈骗者通常会对受害者进行详细的调查，以便能够提及同事的名字或冒充同事。*CEO诈骗*——诈骗者冒充C级高管，通过电子邮件向其他员工请求电汇——根据FBI的数据，仅2016年至2019年间，这类诈骗就让黑客获利超过260亿美元。这个数字仅包括那些向执法部门报告损失的受害者。
- en: 'Thankfully, mail service providers have developed sophisticated algorithms
    for detecting spam and phishing email. Gmail, for instance, will scan each incoming
    email and quickly decide whenever it is legitimate, sending anything that looks
    suspicious to the junk folder. Spam filters use many inputs when classifying email:
    keywords in the email and the subject line, the email domain, and the presence
    of any suspicious outgoing links in the body of the mail.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 值得庆幸的是，邮件服务提供商已经开发出复杂的算法来检测垃圾邮件和钓鱼邮件。例如，Gmail会扫描每封传入的邮件，并迅速判断其是否合法，将任何看起来可疑的邮件发送到垃圾邮件文件夹。垃圾邮件过滤器在分类邮件时会使用许多输入：邮件和主题行中的关键词、邮件域名以及邮件正文中是否包含任何可疑的外链。
- en: 'Your website and organization likely send email from a custom domain, so the
    onus is on *you* to prevent your email from being marked as spam and to protect
    your users from malicious email that pretends to be from your domain. You have
    a couple of ways to do this: by implementing a Sender Policy Framework and by
    using DomainKeys Identified Mail when you generate email.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您的网站和组织可能会从自定义域发送电子邮件，因此责任在于*您*防止电子邮件被标记为垃圾邮件，并保护您的用户免受伪装成您域名的恶意电子邮件的攻击。您可以通过以下几种方式做到这一点：通过实施发件人策略框架（Sender
    Policy Framework，SPF）和在生成电子邮件时使用域名密钥识别邮件（DomainKeys Identified Mail，DKIM）。
- en: '***Implement a Sender Policy Framework***'
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***实施发件人策略框架***'
- en: Implementing a *Sender Policy Framework (SPF)* entails whitelisting the IP addresses
    that are authorized to send email from your web domain in the DNS. Because SMTP
    sits on top of the TCP, the IP address that an email is sent from cannot be spoofed
    in the same way as the `From` header. By explicitly whitelisting IP addresses
    in your domain name records, mail receiving agents will be able to verify that
    incoming mail originated from a permitted source.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 实施*发件人策略框架（SPF）*意味着在DNS中将被授权从您的网页域名发送电子邮件的IP地址列入白名单。由于SMTP位于TCP之上，因此电子邮件发送方的IP地址无法像`From`头部那样被伪造。通过在您的域名记录中明确列出IP地址，邮件接收代理将能够验证传入的邮件是否来源于允许的来源。
- en: '[Listing 16-1](ch16.xhtml#ch16list1) shows how to specify a Sender Policy Framework
    in your DNS records.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表16-1](ch16.xhtml#ch16list1)展示了如何在您的DNS记录中指定发件人策略框架。'
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 16-1: A DNS record to whitelist a range of IP addresses authorized
    to send email from a given domain as part of your SPF*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表16-1：一个DNS记录，用于将授权从给定域发送电子邮件的IP地址范围列入白名单，作为SPF的一部分*'
- en: 'This record would be added as a *.txt* record in your domain name records.
    In this syntax, the `v=` argument ❶ defines the version of SPF used. The `ip4`
    ❷ and `a` ❸ flags specify the systems permitted to send messages for the given
    domain: in this case, a range of IP addresses, and the IP address corresponding
    to the domain (indicated by the `a` flag) itself. The `-all` flag ❹ at the end
    of the record tells mail providers that if the preceding mechanisms did not match,
    the message should be rejected.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此记录将作为*.txt*记录添加到您的域名记录中。在此语法中，`v=`参数❶定义了使用的SPF版本。`ip4`❷和`a`❸标志指定了允许为给定域发送消息的系统：在此案例中，是一系列IP地址，以及对应域名的IP地址（由`a`标志指示）。记录末尾的`-all`标志❹告诉邮件提供商，如果前面的机制没有匹配，邮件应被拒绝。
- en: '***Implement DomainKeys Identified Mail***'
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***实施域名密钥识别邮件（DKIM）***'
- en: '*DomainKeys* can be used to generate a digital signature for outgoing mail,
    to prove an email was legitimately sent from your domain and that it wasn’t modified
    in transit. *DomainKeys Identified Mail (DKIM)* uses public-key cryptography,
    signing outgoing messages from a domain with a private key and allowing recipients
    to validate the signature by using a public key hosted in DNS. Only the sender
    knows the private signing key, so only they can generate legitimate signatures.
    A mail receiving agent will recalculate the signature by combining the email’s
    content and the public signing key hosted on your domain. If the recalculated
    signature does not match the signature attached to the mail, the email will be
    rejected.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*DomainKeys*可用于为发出的邮件生成数字签名，以证明电子邮件确实是从您的域名合法发送的，并且在传输过程中没有被篡改。*域名密钥识别邮件（DKIM）*使用公钥加密技术，使用私钥为来自域名的发出邮件签名，并允许接收者通过使用托管在DNS中的公钥验证签名。只有发送者知道私钥，因此只有他们才能生成合法的签名。邮件接收代理将通过将电子邮件内容和托管在您域上的公钥结合来重新计算签名。如果重新计算的签名与附加在邮件上的签名不匹配，则邮件将被拒绝。'
- en: To implement DKIM, you need to add a DomainKey in a *.txt* record to your domain.
    [Listing 16-2](ch16.xhtml#ch16list2) shows an example.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现DKIM，您需要在您的域中添加一个域密钥，作为*.txt*记录。[清单16-2](ch16.xhtml#ch16list2)显示了一个示例。
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 16-2: A (public) domain key is hosted in the DNS system, and the corresponding
    private key needs to be shared with the application generating email for the domain.*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单16-2：一个（公有）域名密钥托管在DNS系统中，相应的私钥需要与为该域名生成电子邮件的应用共享。*'
- en: In this example, `k` indicates the key type ❶, and `p` is the public key used
    to recalculate the signature ❷.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，`k`表示密钥类型❶，`p`是用于重新计算签名的公钥❷。
- en: '***Securing Your Email: Practical Steps***'
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***保护您的电子邮件：实用步骤***'
- en: Your organization likely generates email from multiple locations. Email sent
    to a user in response to their actions on your website—called transactional email—will
    be triggered by your web server software, and often is generated via email services
    such as SendGrid or Mailgun. Email written by hand will be sent either by a webmail
    service (for example, Gmail) or from email server software hosted on your network
    (for example, Microsoft Exchange or Postfix). Your team may also be using email
    marketing or newsletter services such as Mailchimp or TinyLetter to send email.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您的组织可能会从多个位置生成电子邮件。作为响应用户在您网站上操作的电子邮件——即事务性电子邮件——将由您的Web服务器软件触发，通常通过像SendGrid或Mailgun这样的电子邮件服务生成。手动编写的电子邮件将通过Web邮件服务（例如Gmail）或托管在您网络上的电子邮件服务器软件（例如Microsoft
    Exchange或Postfix）发送。您的团队也可能使用像Mailchimp或TinyLetter这样的电子邮件营销或新闻通讯服务发送电子邮件。
- en: Consult the documentation of your service providers or email server to see how
    to generate and add the DNS entries needed to implement SPF and DKIM. In fact,
    you may *already* be using DKIM, because many transactional email and marketing
    services require you to add the relevant DNS entries when you sign up to the service.
    As you lock down IP ranges and domains as part of your SPF implementation, remember
    to consider *all* the software that is sending email from your domain!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 查阅您的服务提供商或电子邮件服务器的文档，了解如何生成并添加实现SPF和DKIM所需的DNS记录。实际上，您可能*已经*在使用DKIM，因为许多事务性邮件和营销服务在您注册时要求您添加相关的DNS记录。当您在实施SPF时锁定IP范围和域名时，请记得考虑*所有*从您的域名发送电子邮件的软件！
- en: '**Disguising Malicious Links in Email**'
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**伪装恶意链接在电子邮件中**'
- en: Spam algorithms look for malicious links in email, and to support this, webmail
    providers keep up-to-date blacklists of domains that are known to be harmful.
    Scanning for links to such domains is a common and effective way to block dangerous
    email.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 垃圾邮件算法会检查电子邮件中的恶意链接，为了支持这一点，Webmail 提供商保持更新的域名黑名单，这些域名已知是有害的。扫描指向这些域名的链接是阻止危险电子邮件的一种常见且有效的方法。
- en: As such, scammers have had to come up with new tricks to disguise harmful links,
    to prevent their email from being flagged and sent directly to the junk folder.
    One way to do this is to use a URL-shortening service like Bitly, which will encode
    a URL in a shorter form and redirect the user when they visit the link. However,
    in the ever-escalating spam wars, email scanning algorithms now *unroll* links
    to known URL-shortening services and check whether the final destination is harmful.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，骗子们不得不想出新的手段来伪装有害链接，以防止他们的电子邮件被标记并直接发送到垃圾邮件文件夹。这样做的一种方法是使用像 Bitly 这样的 URL
    缩短服务，它会将 URL 编码为更短的形式，并在用户访问链接时重定向到该网址。然而，在不断升级的垃圾邮件战争中，电子邮件扫描算法现在会*展开*指向已知 URL
    缩短服务的链接，并检查最终目的地是否有害。
- en: Hackers have found a subtler way to disguise malicious links in email. If your
    website can be used to disguise a link to an arbitrary URL on the internet—if
    you implement an *open redirect* anywhere on your site—you may be helping hackers
    disguise malicious links in the same way as a URL-shortening service. Not only
    are you making your users vulnerable to phishing scams, but the *genuine* email
    you send is liable to be blacklisted by spam-detection algorithms.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客还发现了更微妙的方式来伪装电子邮件中的恶意链接。如果你的网站可以用来伪装指向互联网上任意 URL 的链接——如果你在网站上实现了*开放重定向*——你可能会像
    URL 缩短服务一样帮助黑客伪装恶意链接。你不仅会让用户容易受到钓鱼攻击，而且你发送的*真正*电子邮件可能会被垃圾邮件检测算法列入黑名单。
- en: '***Open Redirects***'
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***开放重定向***'
- en: In HTTP, a *redirect* occurs when a web server responds with a `301` (temporary
    redirect) or `302` (permanent redirect) response code, and supplies a URL that
    the browser should navigate to instead. One of the most common uses of redirects
    is to send an unauthenticated user to the login page if they attempt to visit
    a site. In this scenario, the site typically issues a second redirect *back* to
    the original URL after the user has authenticated themselves.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HTTP 中，*重定向*发生在 Web 服务器响应 `301`（临时重定向）或 `302`（永久重定向）响应代码时，并提供浏览器应导航到的 URL。重定向最常见的用途之一是，如果未经身份验证的用户尝试访问网站，重定向其到登录页面。在这种情况下，网站通常会在用户完成身份验证后发出第二次重定向*回到*原始
    URL。
- en: To enable this second redirect, the web server has to remember the original
    destination as the user logs in. Frequently, this is done by encoding the final
    destination URL within a query parameter in the login URL. If a hacker can encode
    an arbitrary URL in this query parameter—in other words, if the second redirect
    can send the user to a whole different website on the internet—you have what is
    known as an *open redirect*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启用第二次重定向，Web 服务器必须在用户登录时记住原始目的地。通常，这通过在登录 URL 中对最终目标 URL 进行编码作为查询参数来实现。如果黑客能够在这个查询参数中编码任意
    URL——换句话说，如果第二次重定向可以将用户发送到互联网上的另一个网站——这就被称为*开放重定向*。
- en: '***Preventing Open Redirects***'
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***防止开放重定向***'
- en: 'Most sites won’t ever need to redirect to an external URL. If any part of your
    website encodes a URL within another URL for the purpose of redirecting the user
    to that destination, you should make sure that these encoded URLs are *relative*
    URLs rather than *absolute* URLs: encoded links should point within your site,
    rather than externally.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数网站永远不需要重定向到外部 URL。如果你的网站的任何部分会在另一个 URL 中编码一个 URL 以将用户重定向到该目的地，你应该确保这些编码的
    URL 是*相对* URL，而不是*绝对* URL：编码的链接应该指向你的网站内部，而不是外部。
- en: Relative URLs begin with a forward slash (*/*), which is easy to check for.
    Hackers have found a few ways to disguise absolute URLs to look like relative
    URLs, so your code needs to account for that. [Listing 16-3](ch16.xhtml#ch16list3)
    shows how to check that a URL is a relative URL via simple pattern-matching logic.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 相对 URL 以斜杠（*/*）开头，容易检查。黑客已经找到了一些方法，能够将绝对 URL 伪装成相对 URL，因此你的代码需要考虑到这一点。[清单 16-3](ch16.xhtml#ch16list3)展示了如何通过简单的模式匹配逻辑来检查
    URL 是否为相对 URL。
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 16-3: A function to check that a link is relative (internal to a website),
    using a regular expression in Python*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 16-3：使用 Python 中的正则表达式检查链接是否为相对链接（网站内部）*'
- en: This pattern ❶ states that the URL must begin with a forward slash, and the
    following character must not be another forward slash or a backslash (*\*). The
    second character is checked to protect against URLs such as *[www.google.com](http://www.google.com)*,
    which are interpreted by browsers as absolute URLs; they will be automatically
    prefixed by *http* or *https* depending on what protocol the page is currently
    using.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模式 ❶ 表示 URL 必须以斜杠开头，接下来的字符不能是另一个斜杠或反斜杠 (*\*)。检查第二个字符是为了防止像 *[www.google.com](http://www.google.com)*
    这样的 URL，这些 URL 会被浏览器解释为绝对 URL；它们将自动以 *http* 或 *https* 为前缀，具体取决于页面当前使用的协议。
- en: Another approach to preventing open redirects is to avoid encoding URLs within
    query parameters *altogether*. If you are encoding a URL for an eventual redirect
    following login, consider dropping the URL in a temporary cookie instead of a
    query parameter. An attacker is unable to forge a cookie in a victim’s browser
    quite as easily, so you will close the door to abusive linking.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 防止开放重定向的另一种方法是避免在查询参数中*完全*编码 URLs。如果你正在为登录后重定向编码一个 URL，考虑将该 URL 存放在临时 cookie
    中，而不是查询参数中。攻击者无法轻易伪造受害者浏览器中的 cookie，因此你将关闭恶意链接的门。
- en: '***Other Considerations***'
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***其他考虑事项***'
- en: Some types of websites do require external links to be posted by users. For
    instance, if you run a social news site, your users will often post links to external
    URLs. If this applies to your site, use the *Google Safe Browsing* API to check
    each URL against a blacklist of harmful sites.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 某些类型的网站确实需要用户发布外部链接。例如，如果你运营一个社交新闻网站，用户经常会发布指向外部 URL 的链接。如果这适用于你的站点，使用 *Google
    Safe Browsing* API 检查每个 URL 是否与有害网站的黑名单匹配。
- en: After you have secured your email and redirect code, it’s important to make
    sure your web pages can’t be wrapped in other people’s malicious websites. Let’s
    look at how to protect your users against clickjacking attacks.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在你确保了你的电子邮件和重定向代码安全后，确保你的网页无法被其他人的恶意网站嵌套也是非常重要的。让我们看看如何保护你的用户免受点击劫持攻击。
- en: '**Clickjacking**'
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**点击劫持**'
- en: HTML permits a web page to contain another web page, by using an `<iframe>`
    tag. This allows content from different web domains to be mixed in a controlled
    fashion, because JavaScript running on the page within the frame cannot access
    the containing page. The `<iframe>` tags are commonly used to embed third-party
    content in a web page—OAuth and CAPTCHA widgets often use them to secure cookies.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 允许网页包含另一个网页，使用 `<iframe>` 标签。这使得来自不同网页域名的内容能够以受控的方式混合，因为在框架内运行的 JavaScript
    无法访问包含页面。`<iframe>` 标签常用于在网页中嵌入第三方内容——OAuth 和 CAPTCHA 小部件通常使用它们来保护 cookies。
- en: As with anything useful on the internet, hackers have found ways to abuse `<iframe>`
    tags. Modern CSS allows page elements to be layered on top of each other using
    the `z-index` attribute; elements with a higher `z-index` will hide elements with
    a lower `z-index` and receive click events first. Page elements can also be made
    transparent using the `opacity` attribute. By combining these techniques, a hacker
    can position a transparent `<div>` over an `<iframe>` element, and then trick
    a victim into clicking whatever content is stored in the `<div>` rather than the
    underlying content they believe they are clicking.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如互联网中的任何有用的东西一样，黑客已经找到了滥用 `<iframe>` 标签的方法。现代 CSS 允许使用 `z-index` 属性将页面元素层叠在彼此之上；具有较高
    `z-index` 的元素将遮挡具有较低 `z-index` 的元素，并且首先接收点击事件。页面元素还可以使用 `opacity` 属性使其透明。通过结合这些技术，黑客可以将一个透明的
    `<div>` 放置在 `<iframe>` 元素上方，然后诱使受害者点击存储在 `<div>` 中的任何内容，而不是他们认为自己正在点击的底层内容。
- en: This click-hijacking—*clickjacking*—has been used in a variety of ways. In some
    cases, victims have been tricked into switching on their webcam so the attacker
    can watch them remotely. Another variation of this technique is *likejacking*,
    whereby a victim is tricked into liking something on Facebook without their knowledge.
    Selling likes on the dark web for promotional purposes is a big money-spinner
    for a hacker.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这种点击劫持——*点击劫持*——已经以各种方式被使用。在某些情况下，受害者被诱导打开他们的摄像头，以便攻击者能够远程观看他们。此技术的另一个变种是 *点赞劫持*，即受害者被诱导在
    Facebook 上未经他们同意地点赞某些内容。在黑暗网络上出售点赞用于促销目的已成为黑客的一个重要赚钱方式。
- en: '***Preventing Clickjacking***'
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***防止点击劫持***'
- en: If you run a website, you should make sure your site isn’t used as bait in a
    clickjacking attack. Most sites never need to be hosted in `<iframe>` tags, so
    you should tell the browser that directly. Modern browsers support the `Content-Security-Policy`
    header that allows the response from the server to specify that the page should
    have no `frame-ancestors`, as shown in [Listing 16-4](ch16.xhtml#ch16list4).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运营一个网站，您应该确保您的网站不会成为点击劫持攻击的诱饵。大多数网站根本不需要被包含在 `<iframe>` 标签中，因此您应该直接告诉浏览器这一点。现代浏览器支持
    `Content-Security-Policy` 头部，允许服务器的响应指定页面不应有 `frame-ancestors`，如在[示例 16-4](ch16.xhtml#ch16list4)中所示。
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 16-4: A header that tells the browser never to host your website in
    a frame*'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 16-4：一个告知浏览器绝不将您的网站托管在框架中的头部*'
- en: Implementing this policy tells the browser to never put your website in a frame.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 实现此策略会告知浏览器绝不将您的网站放入框架中。
- en: If for some reason your site does need to be contained within an `<iframe>`,
    you should tell the browsers *which* sites are permitted to host such a frame.
    You can do this by using the same `Content-Security-Policy` header to specify
    that the website can be its own frame ancestor. [Listing 16-5](ch16.xhtml#ch16list5)
    shows how to use the keyword `self` to permit your site to host iframes pointing
    to other parts of the same site.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某种原因您的站点确实需要包含在 `<iframe>` 中，您应该告诉浏览器 *哪些* 网站允许托管这样的框架。您可以使用相同的 `Content-Security-Policy`
    头部来指定该网站可以作为其自身框架的祖先。[示例 16-5](ch16.xhtml#ch16list5) 显示了如何使用关键字 `self` 来允许您的站点托管指向同一站点其他部分的
    iframes。
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 16-5: A header that permits a site to host iframes of itself*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 16-5：一个允许网站托管其自身 iframes 的头部*'
- en: Finally, if you need third-party websites to be able to host your site in a
    frame, you can whitelist individual web domains, as shown in [Listing 16-6](ch16.xhtml#ch16list6).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您确实需要第三方网站能够在框架中托管您的网站，您可以像在[示例 16-6](ch16.xhtml#ch16list6)中所示的那样，列出单独的
    Web 域名。
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 16-6: A header that permits a site to be hosted in an iframe by* [example.com](http://example.com)
    *and* [google.com](http://google.com)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 16-6：一个允许网站被* [example.com](http://example.com) *和* [google.com](http://google.com)
    *通过 iframe 托管的头部*'
- en: Now that you’ve looked at how to protect against clickjacking, let’s see how
    attackers will try to launch malicious network requests from your server.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了如何防范点击劫持，让我们看看攻击者如何试图从您的服务器发起恶意网络请求。
- en: '**Server-Side Request Forgery**'
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**服务器端请求伪造**'
- en: Hackers making malicious HTTP requests often seek to disguise where those requests
    are launched from. For instance, denial-of-service attacks—covered in the next
    chapter—are more effective when coming from many different IP addresses. If your
    web server makes outgoing HTTP requests, and a hacker can control which URLs those
    requests are sent to, you are vulnerable to a server-side request forgery (SSRF)
    attack, and a hacker can use your server to send malicious requests.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客进行恶意 HTTP 请求时，通常会试图掩盖这些请求的来源。例如，拒绝服务攻击——将在下一章讨论——当来自许多不同的 IP 地址时效果更佳。如果您的
    Web 服务器发出外部 HTTP 请求，而黑客可以控制这些请求发送到哪些 URL，那么您的服务器就容易受到服务器端请求伪造（SSRF）攻击，黑客可以利用您的服务器发送恶意请求。
- en: There are some legitimate reasons to make outbound network requests from your
    server. If you use any kind of third-party API, these are typically made available
    as web services over HTTPS. You might, for example, use server-side APIs to send
    transactional email, index content for searching, record unexpected errors in
    an error-reporting system, or process payments. Problems occur, however, when
    an attacker is able to manipulate the server into calling a URL of their choosing.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 确实有一些合理的理由需要从您的服务器发出外部网络请求。如果您使用任何形式的第三方 API，这些通常通过 HTTPS 提供为 Web 服务。例如，您可能会使用服务器端
    API 发送事务邮件、为搜索索引内容、在错误报告系统中记录意外错误或处理支付。然而，当攻击者能够操控服务器调用其选择的 URL 时，问题就出现了。
- en: Typically, SSRF vulnerabilities occur when the outbound URL of an HTTP request
    sent *from* the web server is insecurely constructed from a part of an HTTP request
    sent *to* the server. A hacker will check a site for SSRF vulnerabilities by *spidering*
    through it, navigating to every page, and using hacking tools to replace every
    HTTP parameter they encounter with a URL under their control. If they detect any
    HTTP requests to their trap URL, they know the requests must have been triggered
    from your server, and that you are vulnerable to SSRF.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，SSRF 漏洞发生在 HTTP 请求的出站 URL 从发送给服务器的 HTTP 请求的某一部分不安全地构造时。黑客通过对网站进行*蜘蛛抓取*，访问每一页，并使用黑客工具将他们遇到的每个
    HTTP 参数替换为他们控制的 URL 来检查网站是否存在 SSRF 漏洞。如果他们检测到任何 HTTP 请求发送到他们设置的陷阱 URL，他们就知道这些请求一定是从您的服务器触发的，这意味着您容易受到
    SSRF 攻击。
- en: Hackers will also check to see if any part of your site accepts XML content,
    and use XML external entity attacks in an attempt to commit SSRF. [Chapter 15](ch15.xhtml#ch15)
    discussed this attack vector.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客还会检查您网站是否接受 XML 内容，并使用 XML 外部实体攻击来尝试执行 SSRF。[第15章](ch15.xhtml#ch15)讨论了这种攻击途径。
- en: '***Protecting Against Server-Side Forgery***'
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***保护免受服务器端伪造（SSRF）攻击***'
- en: You can protect yourself against server-side forgery at several levels. The
    first, and most important step, is to audit any parts of your code that make outbound
    HTTP requests. You will almost always know ahead of time which domains need to
    be invoked as part of API calls, so the construction of URLs for API calls should
    use web domains recorded in your configuration or code rather than coming from
    the client. One way of ensuring this is to use the *software development kit (SDK)*
    that is usually made freely available with most APIs.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在多个层级上保护自己免受服务器端伪造（SSRF）的攻击。第一步，也是最重要的一步，是审计您代码中所有发起外部 HTTP 请求的部分。您几乎总是能够提前知道哪些域名需要在
    API 调用中被调用，因此构建 API 调用的 URL 时应该使用在配置或代码中记录的 web 域名，而不是来自客户端。确保这一点的一个方法是使用通常与大多数
    API 一起免费提供的软件开发工具包（*SDK*）。
- en: Because you should be following the practice of defense in depth—protecting
    yourself from vulnerabilities in multiple, overlapping ways—it makes sense to
    install safeguards against SSRF at the network level too. Whitelisting the individual
    domains that you need access to in your firewall, and banning all others, is a
    good way to catch any security issues you may have overlooked during code review.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 因为您应该遵循深度防御的做法——从多个重叠的方式保护自己免受漏洞攻击——所以在网络层面安装防护措施以防止 SSRF 攻击也是明智之举。在您的防火墙中将需要访问的单个域名列入白名单，禁止所有其他域名，是捕捉在代码审查过程中可能忽略的安全问题的一种好方法。
- en: Finally, consider employing penetration testing to detect SSRF vulnerabilities
    in your code. This can be done by employing an external team to find vulnerabilities
    in your website or by using an automated online tool to do the same. Effectively,
    you will be using the same tools that hackers use to detect vulnerabilities, before
    they get the chance to do so themselves.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，考虑使用渗透测试来检测代码中的 SSRF 漏洞。这可以通过聘请外部团队来检查您网站的漏洞，或使用自动化在线工具来实现。实际上，您将使用黑客用来发现漏洞的相同工具，在他们自己有机会进行攻击之前进行检查。
- en: '**Botnets**'
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**僵尸网络**'
- en: Hackers are always looking for spare computing power to power their attacks.
    If a hacker manages to compromise your server, they will frequently install a
    *bot*—a piece of malware that they can control using remote commands. Most bots
    operate as part of a peer-to-peer network of individual bots—a *botnet*—that communicate
    with each other by using an encrypted protocol.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客总是在寻找备用的计算能力来支持他们的攻击。如果黑客成功侵入您的服务器，他们通常会安装一个*僵尸*——一种可以通过远程命令控制的恶意软件。大多数僵尸作为一个点对点网络的一部分运行——一个*僵尸网络*——它们通过加密协议相互通信。
- en: Bots are often used to infect regular consumer devices like laptops. Managing
    to install a bot on a server is big prize, however, because significantly more
    computing power will be available to the bot. Scammers will pay a good price on
    the dark web for access keys that allow them to control botnets. They commonly
    use this spare computing power to mine bitcoin or commit *click fraud*—that is,
    artificially inflate page-view numbers of websites. Botnets are also used to generate
    spam email or to commit denial-of-service attacks (covered in the next chapter).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人通常用于感染普通消费者设备，如笔记本电脑。然而，将机器人安装到服务器上是一笔大生意，因为服务器将为机器人提供显著更多的计算能力。骗子们会在暗网上支付高价购买可以控制僵尸网络的访问密钥。他们通常利用这些空闲的计算能力来挖掘比特币或进行*点击欺诈*——即人为地夸大网站的页面浏览量。僵尸网络还用于生成垃圾邮件或进行拒绝服务攻击（将在下一章讨论）。
- en: '***Protecting Against Malware Infection***'
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***防范恶意软件感染***'
- en: Clearly, you want to avoid having any bot malware installed on the server. [Chapter
    6](ch06.xhtml#ch06) discussed command injection and file upload vulnerabilities
    that could allow a hacker to install a bot on your server. Make sure you follow
    that chapter’s advice to secure such vulnerabilities.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，您要避免在服务器上安装任何机器人恶意软件。[第六章](ch06.xhtml#ch06)讨论了可能允许黑客在您的服务器上安装机器人命令注入和文件上传漏洞。请确保按照本章的建议来修复这些漏洞。
- en: 'Additionally, you should also proactively protect your servers from infections.
    Running up-to-date antivirus software will help you quickly spot any kind of malware.
    Monitoring your outgoing network access will highlight suspicious activity: installed
    bots will periodically poll other IPs looking for other bots. You should also
    consider running an *integrity checker* on your web servers—a piece of software
    that checks for unexpected file changes on sensitive directories.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还应该积极保护您的服务器免受感染。运行最新的杀毒软件将帮助您快速发现任何类型的恶意软件。监控您的外发网络访问将突出可疑活动：已安装的机器人将定期轮询其他
    IP 寻找其他机器人。您还应该考虑在您的 web 服务器上运行*完整性检查器*——一种检查敏感目录中文件变化的软件。
- en: 'If you are using virtualized services or containers, you have an advantage
    here: any rebuild of the system will typically wipe away malicious software that
    was installed. Rebuilding from an image periodically will do a lot to keep your
    system safe from bot infestations.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用虚拟化服务或容器，您在这里有一个优势：系统的任何重建通常都会清除已安装的恶意软件。定期从镜像重建系统将大大帮助您防止机器人感染。
- en: '**Summary**'
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: 'Avoid being an accessory to attacks on others on the internet by doing the
    following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下措施避免成为他人互联网攻击的帮凶：
- en: Protect the email you send by implementing SPF and DKIM headers in your domain
    name records.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在您的域名记录中实施 SPF 和 DKIM 头部来保护您发送的电子邮件。
- en: Make sure you have no open redirects on your site.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您的网站没有开放的重定向。
- en: Prevent your site from being hosted in an `<iframe>` tag by setting a content
    security policy.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过设置内容安全策略，防止您的网站被托管在 `<iframe>` 标签中。
- en: Audit your code to ensure that the server cannot be tricked into sending HTTP
    requests to an external URL of an attacker’s choosing, and whitelist outbound
    network access to avoid being used in server-side request forgery attacks.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审计您的代码，以确保服务器不能被欺骗，向攻击者选择的外部 URL 发送 HTTP 请求，并将外部网络访问列入白名单，以避免在服务器端请求伪造攻击中被利用。
- en: Use virtualized servers, virus scanners, or vulnerability scanning tools to
    check for and remove bots.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用虚拟化服务器、病毒扫描程序或漏洞扫描工具来检查并移除机器人。
- en: 'In the next chapter, you will look at a brute-force technique that hackers
    can use to take your web server offline: the denial-of-service attack.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将了解黑客可能使用的暴力破解技术，该技术可能使您的 web 服务器离线：拒绝服务攻击。
