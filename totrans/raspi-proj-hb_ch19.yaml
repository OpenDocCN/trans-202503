- en: '**19'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make a Game in Scratch: Hungry Monkey**'
  prefs: []
  type: TYPE_NORMAL
- en: In this project you’ll use the block-based programming language Scratch to create
    a game that can be controlled with two pushbuttons and your Pi.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0233-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: Two pushbuttons
  prefs: []
  type: TYPE_NORMAL
- en: Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: In this project, you’ll create your own game called Hungry Monkey. The object
    of the game is for the monkey to catch as many ripe bananas as possible in 30
    seconds, while avoiding the rotten ones. You’ll be able to move the monkey left
    and right with two pushbuttons that you’ll wire to your Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: '**INTRODUCING SCRATCH 2**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*To find out more about Scratch, visit the official Scratch website at* [http://scratch.mit.edu/](http://scratch.mit.edu/).'
  prefs: []
  type: TYPE_NORMAL
- en: Scratch is a visual programming language you can use to create animations, stories,
    and games using drag-and-drop code blocks. Although Scratch was developed to teach
    kids how to program, it’s suitable for anyone who wants to learn some fundamental
    programming concepts or just wants to have fun building their own games.
  prefs: []
  type: TYPE_NORMAL
- en: Scratch 2 is installed on Raspbian by default. You can open it from the desktop
    main menu by going to **Programming** ▸ **Scratch 2**. When you open Scratch 2,
    you should see a window like the one in [Figure 19-1](ch19.xhtml#ch19fig1).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0234-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 19-1:** The Scratch 2 window'
  prefs: []
  type: TYPE_NORMAL
- en: The Scratch window divides the screen into four main sections. The Stage ➊ is
    where your game or animations will play out. At the top right, you’ll see a green
    flag and a stop sign; you can use these icons to start and stop the game, respectively.
    When you first open Scratch, you should see a cat on your stage by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Sprite List ➋ shows all of your *sprites*, which are your game characters
    or any object that performs an action in your project. In the middle of the window
    is the Blocks Area ➌, which has three tabs: Scripts, Costumes, and Sounds. The
    Scripts tab contains programming blocks you use to build your program. Each block
    is a different programming instruction that you can drag and drop into place in
    your program. You’ll see different categories of blocks organized according to
    what they do. Each category has a specific color; for example, blocks from the
    **Motion** category, which tell your sprites how to move around, are dark blue.'
  prefs: []
  type: TYPE_NORMAL
- en: The Costumes tab ➍ shows options for customizing and creating new costumes for
    your sprites, and the Sounds tab ➎ allows you to add sounds to your sprites. The
    Scripts Area ➏ is where you drag the blocks and put them together to create a
    script.
  prefs: []
  type: TYPE_NORMAL
- en: The menu bar ➐ at the top shows the File and Edit main menus at the left side.
    The icons at the center allow you to duplicate, delete, grow, and shrink your
    sprites, and also get help from Scratch.
  prefs: []
  type: TYPE_NORMAL
- en: '**WIRING THE CIRCUIT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The circuit for this project consists of two pushbuttons and the Raspberry Pi.
    Follow these instructions to wire them, using [Figure 19-2](ch19.xhtml#ch19fig2)
    as a reference.
  prefs: []
  type: TYPE_NORMAL
- en: Connect a GND pin to your breadboard’s GND rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert two pushbuttons into the breadboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the bottom-right pushbutton pins to the GND rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the bottom-left pin of one pushbutton to GPIO 2 and the other to GPIO
    3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0235-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 19-2:** Wiring two pushbuttons to the Raspberry Pi'
  prefs: []
  type: TYPE_NORMAL
- en: That’s it! You’re ready to code the game.
  prefs: []
  type: TYPE_NORMAL
- en: '**BUILDING THE SCRIPT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before creating a game, it’s useful to outline the features you want your game
    to have so you know exactly what you need to do.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Hungry Monkey game, the player controls a monkey who needs to catch
    as many ripe bananas as possible while avoiding rotten bananas. For each good
    banana caught, the player gets a point; if the player catches a rotten banana,
    the game deducts a point. Here’s a list of the main steps to build the Hungry
    Monkey game:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the main character, the monkey, and allow the player to control its
    movement using two pushbuttons: one moves the monkey right and the other moves
    the monkey left. Also allow the player to move the monkey with keyboard keys.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the good and rotten banana sprites and make them fall from the sky.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Program the monkey so that it catches the bananas when it touches them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a score system that adds one point when the monkey catches a good banana
    and subtracts a point when it catches a rotten one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a timer and end the game when the timer hits 0.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Display the player’s score when the game is over.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Scratch file for this project is available at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*.
    To upload a saved program to Scratch, go to **File ▸ Load Project**. To build
    the script, follow the next few sections.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating the Sprites and Choosing the Stage Background**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*You can also create a sprite from scratch using the paintbrush icon, upload
    your own sprite by clicking the folder icon, or take a photo with a webcam for
    your sprite with the camera icon.*'
  prefs: []
  type: TYPE_NORMAL
- en: In the Hungry Monkey Game, you’ll use a monkey sprite, and a banana sprite from
    the Sprite Library. You won’t need to use the cat sprite that appears on the Stage
    by default, so you can delete it by right-clicking the sprite and selecting **Delete**
    to delete this sprite.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Sprite List and click the leftmost icon that looks like a character
    (see [Figure 19-3](ch19.xhtml#ch19fig3)) to open the Sprite Library.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0237-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 19-3:** Icons to create new sprites'
  prefs: []
  type: TYPE_NORMAL
- en: From the Animals category, choose the `Monkey2` sprite and click **OK**. Then,
    open the Sprite Library again, select the `Bananas` sprite from the Things category,
    and then click **OK**.
  prefs: []
  type: TYPE_NORMAL
- en: You can choose a background for your game from the leftmost side of the Sprite
    List. There you’ll find a set of icons for the background. Click the first icon—highlighted
    in [Figure 19-4](ch19.xhtml#ch19fig4)—to choose a background from the backdrop
    library. We’ve chosen the one called *blue sky*.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0237-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 19-4:** Selecting the background from the backdrop library'
  prefs: []
  type: TYPE_NORMAL
- en: Now your sprites section should look like [Figure 19-5](ch19.xhtml#ch19fig5).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0237-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 19-5:** Sprite List with the selected sprites and background'
  prefs: []
  type: TYPE_NORMAL
- en: '**Editing the Sprites**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Scratch allows you to increase or decrease the size of a sprite, change its
    color, or edit it as you would do in an image-editing program. Scratch built-in
    image editor is called *Paint Editor*. Here you’ll make some changes to your sprites’
    appearance.
  prefs: []
  type: TYPE_NORMAL
- en: Select the `Monkey2` sprite in the Sprite List; if a sprite is selected, it
    will be outlined in blue, as shown in [Figure 19-5](ch19.xhtml#ch19fig5). Next,
    click the `Monkey2` sprite in the Costumes tab, and edit the first costume, called
    `monkey2-a`. With the mouse pointer drag a corner of the sprite until its size
    matches 98×138 pixels, or use the shrink tool until you get the desired size;
    the sprite size is displayed below the `monkey2-a` costume. Also change the `Bananas`
    sprite’s size to 28×28 pixels.
  prefs: []
  type: TYPE_NORMAL
- en: When adjusting the sprites’ size, make sure they’re at the center of the canvas
    in order to keep the sprite’s reference point.
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding Controls to the Monkey Sprite**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now you’ll add controls to the monkey so you can make it go left or right by
    pressing the pushbuttons or the left and right arrows on the keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: To allow the Raspberry Pi GPIOs to interface with Scratch so the program will
    react when a pushbutton is pressed, you need to add an extension library to Scratch.
    Select the `Monkey2` sprite in the Scripts tab, select **More Blocks**, and click
    **Add an Extension**. Next select the Pi GPIO icon, as shown in [Figure 19-6](ch19.xhtml#ch19fig6),
    and click **OK**.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0238-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 19-6:** Adding the Pi GPIO extension'
  prefs: []
  type: TYPE_NORMAL
- en: The extension library adds new blocks to control the Pi GPIOs, which should
    appear in the More Blocks category.
  prefs: []
  type: TYPE_NORMAL
- en: There are many different ways to make your sprite move in Scratch. You’ll use
    the (x,y) coordinate system, in which the (0,0) position is the middle of the
    Stage. Increasing the x-coordinate moves your sprites to the right, and decreasing
    it moves your sprites to the left. Increasing the y-coordinate moves your sprites
    up, and decreasing it moves your sprites down. The blocks that control movement
    are in the dark blue **Motion** category.
  prefs: []
  type: TYPE_NORMAL
- en: To control the monkey, select the `Monkey2` sprite and drag the blocks in [Figure
    19-7](ch19.xhtml#ch19fig7) into the Script Area. Then change the settings in the
    blocks to match [Figure 19-7](ch19.xhtml#ch19fig7).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0239-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 19-7:** Blocks for controlling the monkey'
  prefs: []
  type: TYPE_NORMAL
- en: You first set the `Monkey2` sprite’s x-position to 0 and y-position to –110\.
    Setting x to 0 centers your sprite horizontally, and setting y to –110 moves your
    sprite to the floor. This way the sprite is always in this position every time
    you start the game.
  prefs: []
  type: TYPE_NORMAL
- en: The next two blocks set GPIO 2 and GPIO 3 to inputs, so the program will be
    able to tell if the pushbuttons have been pressed.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Finding the blocks is easy. Remember that each blocks category has a specific
    color and each block within it is colored accordingly.*'
  prefs: []
  type: TYPE_NORMAL
- en: Then you add a forever loop that continuously checks if the player is pressing
    the pushbuttons or the left and right arrow keys. If the player presses the pushbutton
    connected to GPIO 3, or the right arrow key, the sprite’s x-position is changed
    by 30, moving it to the right; if the player presses the pushbutton connected
    to GPIO 2, or the left arrow key, the sprite’s x-position is changed by –30, moving
    it to the left. You can increase this number to make your monkey move faster,
    or decrease it to make the monkey move slower.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve added the blocks, double-check them against [Figure 19-7](ch19.xhtml#ch19fig7),
    and then you can test it out.
  prefs: []
  type: TYPE_NORMAL
- en: '**Testing Your Script**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To start a script in Scratch, you use the green flag block, ![image](../images/f0239-02.jpg).
    This block will start your game and synchronize all the scripts in your sprites.
    When you click the green flag icon at the top right of the stage section, Scratch
    starts all the scripts that are under this block.
  prefs: []
  type: TYPE_NORMAL
- en: Click the green flag icon ![image](../images/f0239-03.jpg) at the upper-right
    corner of the stage now. Test that the sprite moves appropriately by pressing
    the pushbuttons and arrow keys. When you have everything working, move on to the
    timer.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating the Countdown Timer**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The player needs to know how much time they have left to catch bananas, so next
    you’ll create a countdown timer.
  prefs: []
  type: TYPE_NORMAL
- en: To add the timer to your game, select the `Monkey2` sprite, and then add the
    blocks in [Figure 19-8](ch19.xhtml#ch19fig8) to the Script Area. You may notice
    you can’t find the show variable block. That’s because you need to create the
    variable to hold the time. To create variables, navigate to the **Data** blocks
    category, and click the **Make a Variable** button. Call the new variable time
    and make it available for all sprites by checking the **For all sprites** box.
    Now drag that block into the Script Area.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0240-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 19-8:** Blocks to create a countdown timer'
  prefs: []
  type: TYPE_NORMAL
- en: To create the countdown timer, you’ll use a block called timer. This block counts
    the time that has passed since the script started. When you click the green flag
    icon, the script resets the timer, so it starts counting from 0 every time you
    start the game. Next you include a block that shows the `time` variable on the
    stage. You can position the `time` variable by dragging it across the stage section;
    move it to the stage’s top-right corner.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the forever loop keeps updating the `time` variable so that it starts
    at 30 and decreases by one every second. You use the round block so the countdown
    time is shown only in integer numbers. If you want to change your game duration,
    you can adjust the number in the round block.
  prefs: []
  type: TYPE_NORMAL
- en: Pay careful attention to the nesting here (see [Figure 19-9](ch19.xhtml#ch19fig9));
    you’ll notice that the set time to block comes first, then the round block. Then,
    on top of that, you need to drop the green - block with two empty circles. Inside
    the first empty circle, enter 30, and inside the second empty circle, drop a timer
    block from the **Sensing** category.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0241-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 19-9:** The nested if block'
  prefs: []
  type: TYPE_NORMAL
- en: The if block at the end (see [Figure 19-8](ch19.xhtml#ch19fig8)) hides the `time`
    variable from the stage when `time` hits 0\. Now try it out!
  prefs: []
  type: TYPE_NORMAL
- en: '**Counting and Displaying the Score**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To create the score system, first you need to create a variable to keep track
    of the score. In the **Data** blocks category, create a new variable called `score`
    and make it available for all sprites. Select the `Monkey2` sprite, and then add
    the blocks in [Figure 19-10](ch19.xhtml#ch19fig10) to the scripts area.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0241-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 19-10:** Blocks to display the score and stop the game'
  prefs: []
  type: TYPE_NORMAL
- en: Set the set score to block to `0` so your score will restart when the game starts.
    Then add the show variable block to display the score on the stage.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the game, when the time hits 0, the monkey should say the score
    in a speech bubble and all the scripts will stop, ending the game. To make the
    monkey talk, add some purple **Looks** blocks to show a speech bubble—you can
    enter whatever text you want your monkey to say here.
  prefs: []
  type: TYPE_NORMAL
- en: Again, be careful with the nesting here, and look at [Figure 19-10](ch19.xhtml#ch19fig10)
    carefully.
  prefs: []
  type: TYPE_NORMAL
- en: '**Making the Bananas Fall from the Sky**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Now that you’ve created all the `Monkey2` animations and controls, you need
    to set the `Bananas` sprite to fall from the sky. Here’s the to-do list for the
    `Bananas` sprite:'
  prefs: []
  type: TYPE_NORMAL
- en: The bananas should fall from the sky, starting from a random x-position and
    then decreasing in y-position until they hit the floor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bananas should disappear when they hit the floor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the bananas touch the monkey, a sound should play, one point should be
    added to the score, and the bananas should disappear.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the bananas should be deleted when the time hits 0, so they don’t continue
    to fall after the game is over.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First you need to add a sound from the Sound Library to the blocks section.
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding a Sound from the Sound Library**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: You’ll add a pop sound to the `Bananas` sprite to play when it hits the `Monkey2`
    sprite. For that, select the `Bananas` sprite, and in the blocks section select
    the **Sounds** tab. Then click the ![image](../images/f0242-01.jpg) icon to choose
    a sound from the Sound Library and choose `pop`. Select the **Scripts** tab to
    add your action blocks.
  prefs: []
  type: TYPE_NORMAL
- en: '**Making the Bananas Fall**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To accomplish everything in the to-do list, select the `Bananas` sprite, and
    then add the blocks in [Figure 19-11](ch19.xhtml#ch19fig11) to its scripts area.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0242-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 19-11:** Blocks for creating and controlling the `Bananas` sprite'
  prefs: []
  type: TYPE_NORMAL
- en: With the upper-left set of blocks ➊ in [Figure 19-11](ch19.xhtml#ch19fig11),
    you create a clone of the `Bananas` sprite every second. In other words, you make
    a new `Bananas` sprite appear every second.
  prefs: []
  type: TYPE_NORMAL
- en: In the set of blocks to the right ➌, you initialize the values for the `Bananas`
    clones. The show block ensures that the bananas appear on the screen. You set
    the bananas’ y-position to 170, which corresponds to the top of the Stage, and
    set the x-position to a random number between –230 and 230, which is the horizontal
    Stage space from left to right.
  prefs: []
  type: TYPE_NORMAL
- en: Then you initialize a repeat until block, which is like a `while` loop that
    is active until the `time` variable hits 0\. The change y by block inside the
    repeat until block decreases the y-position of the bananas so they look like they’re
    falling from the sky. In this case, we’re decreasing the y-position by 5\. If
    you want to make them fall faster, increase the y-value; if you want them to fall
    more slowly, decrease it.
  prefs: []
  type: TYPE_NORMAL
- en: The first if block inside the repeat until block makes the bananas disappear
    when they reach the bottom of the stage, at y < –160\. The second if block adds
    one point to the `score` variable and plays the `pop` sound when the bananas hit
    the monkey, and makes the bananas disappear. Finally, when the repeat until block
    is over, the `Bananas` clones are hidden from the stage.
  prefs: []
  type: TYPE_NORMAL
- en: The blocks in the lower left ➋ of [Figure 19-11](ch19.xhtml#ch19fig11) stop
    the creation of new `Bananas` clones when the `time` variable hits 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding the Rotten Bananas**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You now have the monkey, the good bananas, the timer, and the score. You’re
    just missing the rotten bananas. The script for the rotten bananas is really similar
    to the script in [Figure 19-11](ch19.xhtml#ch19fig11); you just need to make these
    changes:'
  prefs: []
  type: TYPE_NORMAL
- en: Create rotten bananas every 2 seconds instead of 1.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decrease the score by one when the rotten bananas touch the monkey.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Play a different sound when the monkey touches the rotten bananas. We’ve chosen
    the sound called `F elec bass`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change how the rotten bananas look.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because this script is so similar to the previous one, you’re going to duplicate
    the good bananas and then make the changes. Right-click the `Bananas` sprite and
    select **duplicate**. The sprite and its script should be duplicated and automatically
    named `Bananas2`. Right-click the `Bananas2` sprite and select **info**; a menu
    should appear that allows you to change the sprite’s name. Enter `Rotten` as the
    new name. The changes you need to make to the script are highlighted in [Figure
    19-12](ch19.xhtml#ch19fig12).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0244-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 19-12:** Blocks for controlling the rotten bananas'
  prefs: []
  type: TYPE_NORMAL
- en: Change the wait block value to `2` ➊, so a new `Rotten` clone will fall every
    2 seconds, instead of every second. Also change the sound block to play `F elec
    bass` ➋, and in the set score to block, reduce the score by `1` ➌. Remember that
    you have to add this sound from the library in the Sounds tab first.
  prefs: []
  type: TYPE_NORMAL
- en: With the script for rotten bananas complete, next you’ll change the `Rotten`
    sprite colors so that the bananas look rotten. Select the `Rotten` sprite and
    click the **Costumes** tab. The Paint Editor screen should appear (see [Figure
    19-13](ch19.xhtml#ch19fig13)).
  prefs: []
  type: TYPE_NORMAL
- en: On the right side of the window, select the bucket icon ➊; then, at the bottom,
    select different colors ➋ to fill each individual banana with a different color.
    Choose colors like brown, olive green, and dark green to show that they’re rotten.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0245-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 19-13:** Editing the **Rotten** sprite colors'
  prefs: []
  type: TYPE_NORMAL
- en: '**PLAYING THE GAME**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Congratulations! Your game is ready. To play the game in fullscreen, click the
    fullscreen icon at the top-left corner of the stage, and then click the green
    flag icon. Playing the game in fullscreen makes it run smoother and quicker.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can use either the pushbuttons or the keyboard keys to play
    the game. When the game is over, just click the green flag icon to restart.
  prefs: []
  type: TYPE_NORMAL
- en: '**TAKING IT FURTHER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This project was just a glimpse of what you can do with Scratch. Here are some
    ideas to improve this game:'
  prefs: []
  type: TYPE_NORMAL
- en: Increase the bananas’ falling speed as the game progresses.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increase the number of rotten bananas as the game progresses.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make this game multiplayer by creating another sprite with different controls.
    (You’ll need to add another `score` variable to hold player 2’s score.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add other electronics to your circuit that you can interface with Scratch, like
    buttons, buzzers, or sensors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have fun and create your own games!
  prefs: []
  type: TYPE_NORMAL
