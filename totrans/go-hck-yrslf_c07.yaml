- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Stealing and Cracking Passwords
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: In Chapter 6, you learned how an attacker can create malware to infect your
    computer and see your files, keystrokes, screen, webcam video, and more. In this
    chapter, you’ll see how an attacker can use that same malware to steal the encrypted
    passwords of all users on a Windows computer. Then you’ll find out how hackers
    *crack* those passwords, or recover them in their unencrypted, plaintext form.
  prefs: []
  type: TYPE_NORMAL
- en: If an attacker cracks your password, they may be able to hack into any other
    account, website, or device where you’ve used that password—even if you’ve added
    extra characters to make it “unique” for those other accounts. Weak passwords
    are one of the easiest ways for black hat hackers to break into an organization’s
    network or into your personal accounts. If your password is strong enough, however,
    even if an attacker steals the encrypted password, they won’t be able to crack
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Password Hashes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Modern computer systems and secure websites encrypt passwords with a cryptographic
    hash function before storing them. Unlike the codes you encounter in spy movies,
    which are meant to be decoded on the receiving end, a *cryptographic hash function*
    encrypts your password in a way that cannot be reversed or decrypted. The hashed
    version of the password is known as a *password hash*. Hashes can be viewed as
    long strings of hexadecimal digits, as in [Listing 7-1](#listing7-1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 7-1: Hashed versions of five passwords'
  prefs: []
  type: TYPE_NORMAL
- en: When you log in to a computer or website, the only way for it to check whether
    you entered the correct password is to run the same hash function on the characters
    you entered and then compare the result with the password hash stored in its database.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are lots of different types of hash functions, but they have several
    things in common:'
  prefs: []
  type: TYPE_NORMAL
- en: The same input text will always produce the same hash value in a particular
    hash function; this is necessary so that your stored password hash can be tested
    against the hash of the password you enter when you return to a site.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every hash from a particular hash function will be the same length, no matter
    how long the input text might be. Since a one-word password and a five-word password
    will produce the same number of hash characters, the hash function hides the length
    of your password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing just one character in the input will cause lots of characters in the
    hash to change, so adding even a single character to a password changes the hash
    completely.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stealing Windows Password Hashes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we’ll use your Kali Linux VM to steal password data from your
    Windows 10 VM. First, we’ll create several usernames and passwords in the Windows
    10 VM. Next, we’ll use the Meterpreter remote access trojan to break back into
    the Windows VM. Then, we’ll use the Mimikatz tool in Metasploit to steal the password
    hashes from the Windows 10 victim machine.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Windows Users
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, let’s add some users to the Windows 10 VM so we can later steal their
    password hashes.
  prefs: []
  type: TYPE_NORMAL
- en: Open your Windows 10 VM in VirtualBox (logging in with `IEUser` and `Passw0rd!`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `cmd` into the Windows search bar, right-click the **Command Prompt**
    app, and click **Run as administrator**. Click **Yes** when Windows asks if you
    want to allow this app to make changes to your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new user account with the same command we used during the Sticky Keys
    hack back in Chapter 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command adds a user called *ironman* with the password *Jarvis*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now add several more user accounts with passwords of different complexity and
    length:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After the last command, Windows will warn you that the password is longer than
    14 characters (which was the limit for password length on Windows machines before
    the year 2000!). Enter `Y` to let Windows know you still want to use the long
    password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, create a hard passphrase (made up of at least four words, plus a number
    or special symbol) for a username with your name—but make sure it’s a fake passphrase
    that you’re not using on any real accounts, since we’ll be trying to crack it.
    Here’s mine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You may think a passphrase like this is too hard to type every time you log
    in, but it’s actually easier to remember and harder to guess than most of the
    passwords you’ve added.
  prefs: []
  type: TYPE_NORMAL
- en: Hacking Back into Windows 10 with Meterpreter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next we need to hack back into the Windows 10 VM from Kali.
  prefs: []
  type: TYPE_NORMAL
- en: Start your Kali VM (logging in with username and password `kali`) and open the
    Metasploit app by clicking the Kali menu button and selecting **08 - Exploitation
    Tools**▶**Metasploit Framework**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the `msf6` command prompt, enter the following command to start your Kali
    web server again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The web server will serve the *10.0.9.x/share* folder containing your Windows
    malware in case you need to download it again.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter the following four commands in Metasploit to listen for the Meterpreter
    trojan to phone home:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember to change `10.0.9.x` to your Kali VM’s IP address (enter `ip` `addr`,
    or `ip` `a` for short, to see the IP address).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Switch back to your Windows 10 VM. Turn off your Windows Defender real-time
    virus protection: enter `virus` into the Windows search bar, open **Virus & threat
    protection settings**, click **Manage settings**, and slide the toggle under Real-time
    protection to **Off**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following command into an administrator command prompt in the Windows
    10 VM to disable the Windows Firewall as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Windows will respond with `Ok.`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Find the Meterpreter trojan executable file you created in Chapter 6. This file
    should still be in your *Downloads* or *Documents* folder. If Windows Defender
    has removed it, open the Edge browser, go to *http://<10.0.9.4>/share/* (substitute
    your Kali VM’s IP address if it’s different from *10.0.9.4*), and download the
    trojan again. Check your Virus & threat protection settings again to make sure
    real-time protection is turned off. Then double-click the trojan to run it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch back to your Kali VM, and you should see a Meterpreter session opened:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Escalating Privileges
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Stealing Windows passwords requires administrator- or system-level privileges,
    a higher level of access than the IEUser account that you used to run the Meterpreter
    trojan. Thanks to Metasploit, we’ll be able to raise our access level with another
    exploit. This process is known as *privilege escalation*.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use a Metasploit exploit of the Windows `fodhelper` vulnerability to get
    system-level access. Windows uses a program called *fodhelper.exe* (the *fod*
    is short for “features on demand”) to manage regional settings like the keyboard
    layout for your language of choice. This app is a good target for hackers because
    it runs with higher privileges to be able to change language settings across multiple
    apps, such as your web browser, word processor, and desktop.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your Kali VM, make sure you’re at the `msf6` command prompt, not interacting
    with a Meterpreter session. If you see the `meterpreter >` command prompt, enter
    `background` to return to the regular `msf6` command prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'From the `msf6` prompt, enter the five commands shown in bold:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change the `set` `SESSION` command to match your session number (if it isn’t
    1) and change the `LHOST` IP address to match that of your Kali machine.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The last command, `exploit`, might take a couple of tries. If you get a message
    stating `no` `session` `was` `created`, use the up arrow and press enter to run
    the `exploit` command again. When it succeeds, you’ll see `Meterpreter` `session`
    `2` `opened`, meaning that the exploit has opened a second session. Your command
    prompt will change back to `meterpreter >` to indicate that you’re interacting
    with a new Meterpreter session.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Privilege escalation is the highest-level, most technically challenging hack
    you’ll perform in this book, and it might take several tries. If you keep seeing
    “no session created” messages, check your Windows 10 VM to make sure Windows Defender’s
    Virus & threat protection settings are still turned off. If you’re still stuck,
    try rerunning the hack from the beginning. And, at some point in the next five
    years, there’s a good chance Windows will fix the `fodhelper` vulnerability and
    you’ll have to try a different exploit. Check the book’s website at [https://www.nostarch.com/go-hck-yourself/](https://www.nostarch.com/go-hck-yourself/)
    for updates or do a web search for “Metasploit privilege escalation” on the latest
    version of Windows.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter `getsystem` in Meterpreter to get system-level access to the Windows
    10 VM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check that you’ve got system-level access by entering `getuid`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Meterpreter will respond that your user ID is `NT` `Authority\System`, indicating
    that you now have system-level access.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Stealing Password Hashes with Mimikatz
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have system-level privileges, we’re ready to steal the password
    hashes. We’ll use Mimikatz, a hacking tool that can access Windows passwords from
    multiple locations, including directly from the memory of the computer while it’s
    running. The Mimikatz module in Metasploit is named `kiwi` (the New Zealander
    who wrote Mimikatz, Benjamin Delpy, calls himself the Gentil Kiwi).
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter `use` `kiwi` at the Meterpreter prompt to load the Mimikatz tools:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Mimikatz startup screen will appear in your Meterpreter console. Now we
    can dump the password hashes for all users from the Windows 10 VM, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Mimikatz will answer by listing all the users and Windows password hashes it
    can find:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The password hashes use the *New Technology LAN Manager (NTLM) format*, one
    of the ways that Windows computers store login information, including password
    hashes. We’ll select this type of password hash later when we crack the passwords.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To crack the password hashes, we need to gather them in a text document. Highlight
    the usernames and NTLM hashes, right-click the selection, and choose **Copy**
    (you can’t use ctrl-C to copy in the Metasploit console; that’s the command to
    quit or close a running process in a terminal window).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Mousepad Text Editor by clicking the Kali menu button and selecting
    **Favorites**▶**Text Editor**. Press ctrl-V to paste the text you copied from
    Meterpreter into Mousepad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **File**▶**New** to open a second Mousepad window. Copy and paste just
    the usernames and password hashes into this new document in the format `username``:``hash`,
    with one username and hash value per line, separated by a colon, as shown in [Figure
    7-1](#figure7-1). Make sure there are no extra spaces.![f07001](image_fi/502000c07/f07001.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 7-1: Copying and pasting the usernames and NTLM hash values into a new
    text file'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Skip any users without hash values or any of the accounts Windows created, like
    sshd, Guest, and DefaultAccount. You’re interested only in real user and admin
    accounts, like IEUser, Administrator, and the user accounts you created earlier
    in the chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save the file as *Windows_hashes.txt* in your *Documents* folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cracking Passwords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have a document of usernames and password hashes stolen from the
    Windows VM, we’re ready to begin cracking the passwords. Hackers take a few different
    approaches to password cracking. A *dictionary attack* uses a list of common passwords,
    hashing each one to see if it matches the hash you’re trying to crack. Dictionary
    attacks are fast, but they only help with relatively simple passwords. A *brute-force
    attack* systematically tries every combination of characters to find even highly
    complex passwords up to a certain length. This makes brute-force attacks very
    thorough, but extremely slow. A *mask attack* is a special type of brute-force
    attack we use when we know part of the password and have to brute-force just a
    few characters.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll try out a few approaches to password cracking. As you’ll see, the internet
    and Kali Linux have resources that make short work of cracking passwords. First,
    you’ll search a free online password database to crack common password hashes.
    Then, you’ll use one of Kali’s many password-cracking tools, John the Ripper,
    to crack more of the hashes. You’ll start with a password dictionary attack for
    the easier passwords, and you’ll finish with a mask attack.
  prefs: []
  type: TYPE_NORMAL
- en: Free Online Password Databases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hashes.com is a web service that allows you to search for passwords in a database
    of *billions* of previously cracked hashes. Every time you hash a particular password,
    you get the same hash, so the database can store each password with its hash.
    When you search for a hash, the database returns the unencrypted password (if
    that password is in the database).
  prefs: []
  type: TYPE_NORMAL
- en: In your Kali VM, open the Firefox browser and go to [https://hashes.com/decrypt/hash/](https://hashes.com/decrypt/hash/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the usernames and password hashes from your *Windows_hashes.txt* file
    into the Hashes text box. Then remove the usernames so that only the hashes appear
    in the box, as shown in [Figure 7-2](#figure7-2).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **Submit & Search** to search the Hashes.com database. After a few moments,
    you should see a list of cracked passwords:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![f07002](image_fi/502000c07/f07002.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7-2: Hashes.com takes your NTLM hashes as input and outputs any cracked
    passwords it finds in its database.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Hashes.com found five of the passwords! Because it keeps adding new passwords
    to its database, it may be able to crack more of the simple passwords we will
    use over the course of this book.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve been able to recover at least five passwords from our Windows VM using
    a free online lookup tool—and an attacker may need only *one* username and password
    to be able to hack into a network, company, or government agency. That’s why it’s
    important for *every user* in an organization to choose longer, harder-to-guess
    passwords.
  prefs: []
  type: TYPE_NORMAL
- en: John the Ripper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: John the Ripper, often abbreviated to JtR or simply John, is one of the oldest
    tools for cracking passwords; it’s been over 20 years since the first version
    of John was released. John is included in Kali Linux under the Kali menu button’s
    05 - Password Attacks menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'John runs from the command line terminal, but there’s another version of John,
    called Johnny, with a graphical user interface (GUI) that’s easier to work with.
    Johnny isn’t included in the most recent versions of Kali. To install it, open
    a new terminal window and type the following two commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You may have to enter your password (`kali`) after the first command. After
    installation, Johnny will usually appear on the 05 - Password Attacks menu below
    John, but you can also run it from the terminal by typing `johnny`.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use two methods in Johnny to crack more of our stolen Windows passwords.
    We’ll try a dictionary attack to crack common passwords and a mask attack to crack
    passwords with variations. Everything you do in Johnny can also be done from the
    terminal with John; after you use Johnny, you can look up commands for John and
    try them to understand the overall process.
  prefs: []
  type: TYPE_NORMAL
- en: A Dictionary Attack
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We’ll begin by trying a dictionary attack. Also called a *wordlist attack*,
    a *dictionary attack* tests a list of words against the hashes we’re trying to
    crack. John the Ripper will hash each password in a long list of common passwords
    we provide, comparing each hash value to our Windows hashes. If it finds a match,
    we’ve cracked that password.
  prefs: []
  type: TYPE_NORMAL
- en: Kali has several built-in wordlists, including the RockYou wordlist. RockYou
    was a company that lost 32 million users’ passwords in a famous 2009 breach involving
    a poorly protected web application. The list of plaintext passwords exposed by
    RockYou is still one of the best free wordlists for checking the security of a
    password.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the RockYou wordlist, enter the following command in the terminal
    window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will extract the wordlist as *rockyou.txt* in the */usr/share/wordlists*
    folder so that it can be used as a dictionary in John and Johnny.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open Johnny by clicking the Kali menu button and selecting **05 - Password Attacks**▶**johnny**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Open password file**▶**Open password file (PASSWD format)**. Find the
    *Windows_hashes.txt* file we created earlier, as shown in [Figure 7-3](#figure7-3),
    and select it to load the password hash file.![f07003](image_fi/502000c07/f07003.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 7-3: Opening the *Windows_hashes.txt* password file in Johnny'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click **Options** on the left in Johnny and then click the **Wordlist** tab
    under Attack mode in the Options window. Type `/usr/share/wordlists/rockyou.txt`
    into the Wordlist file: text box, as shown in [Figure 7-4](#figure7-4).![f07004](image_fi/502000c07/f07004.png)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 7-4: Loading the *rockyou.txt* wordlist through Johnny'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Still in the Options window, under Session details, select **NT** from the
    Current hash format: drop-down list, as shown in [Figure 7-5](#figure7-5). This
    tells Johnny that the password hashes are in NTLM format.![f07005](image_fi/502000c07/f07005.png)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 7-5: Choosing *NT* as the input password hash format'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Passwords** on the left and then click **Start new attack** at the top.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Almost instantly, Johnny will display several cracked passwords, as shown in
    [Figure 7-6](#figure7-6). (If you don’t see any, make sure you changed the current
    hash format to NT in step 5.)
  prefs: []
  type: TYPE_NORMAL
- en: '![f07006](image_fi/502000c07/f07006.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-6: It takes Johnny almost no time to crack five or six passwords using
    the hashes we captured.'
  prefs: []
  type: TYPE_NORMAL
- en: It took us a few minutes to capture the password hashes, but less than a second
    to crack the first five or six passwords using a dictionary attack with the RockYou
    wordlist. That’s all the work a malicious hacker needs to do to get your passwords
    if you’using simple one- or two-word passwords with just a few numbers and symbols.
  prefs: []
  type: TYPE_NORMAL
- en: The RockYou wordlist contained several of the passwords we set up for our users.
    The other passwords were complex enough that they didn’t appear in the list. Let’s
    see how to crack one or two more passwords using another option in Johnny—a mask
    attack.
  prefs: []
  type: TYPE_NORMAL
- en: A Mask Attack
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A *mask attack* starts with partial information, like an old password, and adds
    characters to try cracking similar passwords. There’s a good chance that you or
    someone you know is reusing an old password by adding digits or symbols to the
    end, like *badpassword20!*. This behavior is more common than you’d think, and
    it makes many passwords susceptible to mask attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Mask attacks are also effective if an attacker gains access to a fragment of
    someone’s password. Imagine Kara, one of our Windows users, has a job at CatCo
    Worldwide Media. While passing by Kara’s desk, a snoopy co-worker sees a sticky
    note Kara has thrown in the trash. It’s torn, but it looks like it might have
    part of a password written on it: *SuperGir* (see [Figure 7-7](#figure7-7)).'
  prefs: []
  type: TYPE_NORMAL
- en: Social engineers call this *dumpster diving*—literally looking through someone’s
    trash for useful information, like bank statements, credit card offers, or passwords
    scribbled on the back of an envelope or on a sticky note like this one.
  prefs: []
  type: TYPE_NORMAL
- en: '![f07007](image_fi/502000c07/f07007.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-7: Kara’s torn sticky note with what looks like part of her password'
  prefs: []
  type: TYPE_NORMAL
- en: In Johnny, we can add wildcard characters to the end of *SuperGir* to try to
    guess what the rest of Kara’s password might be. A *wildcard* is a placeholder
    that can be replaced by any one of a group of letters, numbers, or symbols. We
    can use the wildcard characters *?u* for uppercase letters, ?l for lowercase letters,
    *?d* for digits (0–9), *?s* for special symbols, or *?a* for all printable characters
    (letters, numbers, punctuation, and special characters).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the part of the password that we know (*SuperGir*), plus some wildcard
    characters, to create a mask. A *mask* decreases the number of password combinations
    we have to try by filling in the characters that we know already (in this case,
    the first eight characters: *SuperGir*). We don’t know whether Kara’s password
    ends in numbers, letters, or special characters based on the sticky note, so let’s
    use a mask of *SuperGir?a* to start.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Johnny, click **Options** on the left, click the **Mask** tab, and enter
    `SuperGir?a` into the Mask: text box.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Start new attack** at the top. Then, to see if Kara’s password was cracked,
    click **Passwords** on the left. You should see that a single wildcard character
    after SuperGir wasn’t able to crack the password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to the **Mask** tab, enter two wildcard characters, `SuperGir?a?a`,
    and try it again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Still nothing? Enter a third wildcard character, `SuperGir?a?a?a`, as shown
    in [Figure 7-8](#figure7-8). Then click **Start new attack** again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![f07008](image_fi/502000c07/f07008.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-8: Using a mask attack—putting wildcard characters after the partial
    password found on a sticky note—to crack Kara’s password'
  prefs: []
  type: TYPE_NORMAL
- en: This time, the progress bar at the bottom of the window in [Figure 7-8](#figure7-8)
    should change to show that Johnny was able to crack one additional password. Click
    **Passwords** again. Now, next to *kara*, you’ll see her password, *SuperGirl7!*,
    as shown in [Figure 7-9](#figure7-9).
  prefs: []
  type: TYPE_NORMAL
- en: '![f07009](image_fi/502000c07/f07009.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-9: The password mask `SuperGir?a?a?a` was able to crack Kara’s password
    (*SuperGirl7!*) in less than a second!'
  prefs: []
  type: TYPE_NORMAL
- en: Even though we had only part of Kara’s password, we were able to use a mask
    attack to guess her complete password. It took Johnny less than a second to try
    the thousands of possibilities, from *SuperGir000* to *SuperGirl7!*, one by one.
    That means that if you reuse a password by changing only numbers and symbols at
    the beginning, middle, or end, a hacker who finds one of your old passwords can
    guess your current password in seconds using Johnny or a similar tool.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use a mask attack for Peter’s password. Enter a few wildcard characters—starting
    with `SpidermanRu?a`, then `SpidermanRu?a?a`, and so on—until you crack the full
    password. The last round may take five or six minutes to run, as each added character
    increases the complexity exponentially (3 wildcards take less than a second, 4
    wildcards take three to four seconds, 5 wildcards take five to six minutes, 6
    wildcards take almost nine hours, and 14 wildcards would take thousands of years!).
  prefs: []
  type: TYPE_NORMAL
- en: The exponential increase in the time it takes to crack longer passwords is exactly
    why everyone should use long passwords. No matter how many years we run Johnny,
    we’re not likely to crack our long passphrase, the final password you created.
    Long passwords are one of the tricks we can use to keep hackers out of our accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Using Safer Passwords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can make your passwords too hard for even pros to crack with just a couple
    of changes. First, generally the longer a password is, the safer it will be. To
    make a strong passphrase, pick four or more random, unrelated words and string
    them together. To make your passphrase almost uncrackable, add a few numbers or
    special characters.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the regular keyboard special characters like *!*, *@*, *#*, and
    *$*, you can add a special character from a language or alphabet different from
    your own. Even if you use a shorter password instead of a passphrase, adding a
    special character from another language can make it much harder to crack.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at how to do this in different operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Windows Hold down the ALT key while typing numbers on the numeric keypad and
    then release it. For example, hold down the ALT key while typing 0214 on your
    numeric keypad; when you release the alt key, the character `Ö` will appear (a
    capital *O* with an umlaut). Search online for a list of “Windows alt codes” to
    find a character you want to use. Note that some keyboards may require you to
    use the left ALT key specifically. On a laptop without a numeric keypad, you can
    press the Windows key plus the period key (Windows-.) to insert an emoji or other
    symbol.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Linux Press ctrl-shift-U; release (you’ll see an underlined *u* onscreen); enter
    the Unicode hexadecimal value for the character you want, like `d6` (or `00d6`
    for systems that require four digits) for the `Ö` character, and then press the
    spacebar or enter. Search online for “Unicode character codes” to find more options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: macOS Press CONTROL-COMMAND-SPACEBAR to bring up the Character Viewer. Enter
    `u+d6` to show the `Ö` character. To insert the character, either press the down
    arrow to select it and then press ENTER or simply click it with your mouse. The
    same Unicode character codes that work for Linux will work on macOS in the Character
    Viewer; just add `u+` before the hexadecimal code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: iPhone or Android Press and hold the O on the virtual keyboard until a pop-up
    appears with the `Ö` character and other options. You can’t access all Unicode
    characters without installing an app or choosing an alternate keyboard layout,
    but a long press on most vowels and a few consonants will give you enough options
    to make your password stronger.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Of course, you might not remember more than one or two long passwords with special
    characters like this. A password manager can lessen the burden by setting long,
    random passwords for most of your accounts and safely storing them for you. Additionally,
    you should turn on two-factor authentication whenever it’s offered. With this
    feature, even if an attacker cracks one of your passwords, they may not be able
    to gain access to your account. We’ll look more closely at these tools in Chapter
    11.
  prefs: []
  type: TYPE_NORMAL
- en: The Takeaway
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you learned how attackers steal Windows password hashes over
    the web using Mimikatz in Metasploit. Once an attacker has access to your computer
    through malware they’ve tricked you into installing, they can (and often do) look
    around your system for passwords or other sensitive data. Then you saw how hackers
    can easily crack many password hashes with a free online password database or
    a dictionary attack in John the Ripper. You also learned how to crack more complex
    passwords using a mask attack by adding a few wildcard characters to an old or
    incomplete password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you learned some techniques to keep yourself safe from the password
    hacks covered in this chapter. Here’s a short summary of dos and don’ts that can
    change your password habits for life:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Don’t* use the same password across multiple accounts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Don’t* reuse a password by adding numbers or symbols to the end (or middle
    or beginning).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Don’t* write passwords down or store them in plaintext documents or spreadsheets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Do* use long passphrases with one or more special characters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Do* use a password manager and multifactor authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These tips will make your online life easier and *much* more secure than the
    average person’s. However, an attacker doesn’t have to access your computer to
    steal your password; they can steal passwords and other information from web applications
    and servers over the internet. In the next chapter, we’ll learn how by hacking
    into a vulnerable web server in our virtual lab.
  prefs: []
  type: TYPE_NORMAL
- en: First, though, check [Listing 7-2](#listing7-2) to see if you successfully cracked
    the passwords from the beginning of the chapter!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 7-2: Cracked passwords from [Listing 7-1](#listing7-1)'
  prefs: []
  type: TYPE_NORMAL
