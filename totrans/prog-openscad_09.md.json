["```\n    shape(...);\n    ```", "```\n    transformation2(...) transformation1(...) shape(...);\n    ```", "```\n    var_name = value;\n    ```", "```\n    module name(...) { ... } \n    name(...); \n    ```", "```\n    function name(...) = ...;\n    name(...);\n    or\n    name = function(...) ...;\n    name(...);\n    ```", "```\n    include `<filename.scad>`\n    ```", "```\n    use `<filename.scad>`\n    ```", "```\n    circle(`radius` | d=`diameter`)\n    ```", "```\n    square(`size`, `center`)\n    ```", "```\n    square([`width`, `height`], *center*)\n    ```", "```\n    polygon([*[*`x1`, `y2`*]**,* *[*`x2, y2`*]**, ...,* *[*`xn, yn`*]*])\n    ```", "```\n    polygon(*[*`points`*]*, *[*`paths`*]*)\n    ```", "```\n    text(`text`, *size*, *font*, *halign*, *valign*, \n    *spacing*, *direction*, *language*, *script*)\n    ```", "```\n    import(\"`filename.svg`\")\n    ```", "```\n    sphere(`radius` | d=`diameter`)\n    ```", "```\n    cube(`size`, *center*)\n    ```", "```\n    cube([`width`, `depth`, `height`], center)\n    ```", "```\n    cylinder(*h*, *r*|*d*, center)\n    ```", "```\n    cylinder(*h*, *r1*|*d1*, *r2*|*d2*, center)\n    ```", "```\n    polyhedron(*[*`points`*]*, *[*`faces`*]*, convexity)\n    ```", "```\n    import(\"`filename.stl`\")\n    ```", "```\n    surface(file = \"`filename.dat`\", center, convexity)\n    ```", "```\n    union() { ... }\n    ```", "```\n    difference() { ... }\n    ```", "```\n    intersection() { ... }\n    ```", "```\n    translate([`x`, `y`, `z`])\n    ```", "```\n    rotate([`x`, `y`, `z`])\n    ```", "```\n    rotate(`angle`)\n    ```", "```\n    scale([`x`, `y`, `z`])\n    ```", "```\n    resize([`x`, `y`, `z`], auto, convexity)\n    ```", "```\n    mirror([`x`, `y`, `z`])\n    ```", "```\n    multmatrix(`matrix`)\n    ```", "```\n    color(\"`colorname` | `#hex`\", alpha)\n    ```", "```\n    color([`r`, `g`, `b`, `a`])\n    ```", "```\n    offset(`r`|delta, chamfer)\n    ```", "```\n    projection(cut)\n    ```", "```\n    hull() { ... }\n    ```", "```\n    minkowski() { ... }\n    ```", "```\n    linear_extrude(*height*, *center*, *convexity*, *twist*, *slices*, *scale*)\n    ```", "```\n    rotate_extrude(angle, convexity)\n    ```", "```\n    for (`var_name` = [`start`:`step`:`end`]) { ... }\n    ```", "```\n    intersection_for(`var_name` = [`start`:`step`:`end`]) { ... }\n    ```", "```\n    if (`boolean_test`) { ... }\n    ```", "```\n    if (`boolean_test`) { ... } else { ... }\n    ```", "```\n    `list_var` = [ for (i = `range`|`list`) `func`(`i`) ]\n    ```", "```\n    `list_var` = [ for (`i` = ...) if (`condition`(`i`)) `func`(`i`) else ... ]\n    ```", "```\n    `list_var` = [ for (`i` = ...) let (`assignments`) `func`(...) ]\n    ```", "```\n    render(convexity) { ... }\n    ```", "```\n    children(`index` | `vector` | `range`)\n    ```", "``` *   `rands(``min``,` `max``,` `count``,` `seed``)` Generates a vector of random numbers; optionally includes the seed for generating repeatable values.*   `min(``VECTOR` `|` `a``,` `b``,` `c``)` Calculates the minimum value in a vector or list of parameters.*   `max(``VECTOR` `|` `a, b, c``)` Calculates the maximum value in a vector or list of parameters.*   `norm(``VECTOR``)` Returns the Euclidean norm of a vector.*   `cross(``VECTOR, VECTOR``)` `Calculates the cross-product of two vectors in 3D space.` ```", "````` ```` ## Other Functions    1.  `len(``VECTOR``|``STRING``)` Calculates the length of a vector or string parameter. 2.  `echo(``STRING``)` Prints a value to the console window for debugging purposes. 3.  `concat(``VECTOR,VECTOR,` `...)` Returns a new vector that’s the result of appending the elements of the supplied vectors. 4.  `lookup(...)` Looks up a value in a table and linearly interpolates whether there’s no exact match. 5.  `str(...)` Converts all parameters to strings and concatenates. 6.  `chr(``NUMBER` `|` `VECTOR` `|` `STRING``)` Converts ASCII or Unicode values to a string. 7.  `ord(``CHARACTER``)` Converts a character into an ASCII or Unicode value. 8.  `search(...)` Finds all occurrences of a value or list of values in a vector, string, or more complex list-of-list construct. 9.  `version()` Returns the OpenSCAD version as a vector. 10.  `version_num()` Returns the OpenSCAD version as a number. 11.  `parent_module(``INDEX``)` ``Returns the name of the module `idx` levels above the current module in the instantiation stack.`` ```*   `is_undef(``VARIABLE``)`, `is_list(``VARIABLE``)`, `is_num(``VARIABLE``)`, `is_bool(``VARIABLE``)`, `is_string(``VARIABLE``), is_function(``VARIABLE``)` Returns `true` if the argument is of the specified type.*   `assert(``expression``)` Will cause a compilation error if the expression is not true.*   `let (``variable` `=` `value``) ...` Assigns a value to a variable only in the following expression.``` ```` `````"]