- en: '**3**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**USING ELECTRICITY**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f0001-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that you have a neat row of car batteries all charged up and ready to use,
    it’s time to use them to improve your standard of living (see [Figure 3-1](ch03.html#ch03fig1)).
    First, you’ll learn how to connect those batteries to something useful, and then
    in this chapter’s first project, you’ll build a simple lighting circuit.
  prefs: []
  type: TYPE_NORMAL
- en: The second project in this chapter will show you how to use an Arduino microcontroller
    board and a few extra components to make a simple battery monitor. You wouldn’t
    want to lose your brains just because your defenses’ batteries died!
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3-1: Car batteries have a variety of uses in the postapocalyptic world.'
  prefs: []
  type: TYPE_NORMAL
- en: '**POWERING DEVICES FROM A CAR BATTERY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s look at how you can use all that energy to make your life more comfortable
    while you keep those pesky zombies at bay. Of course, you first have to get the
    electricity from the battery to your device. There are two common connectors you’ll
    want to have on hand.
  prefs: []
  type: TYPE_NORMAL
- en: '**CIGARETTE LIGHTER SOCKETS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As DC voltages go, 12V is pretty useful. It’s the same voltage you find in the
    cigarette lighter socket of a car, and there are lots of 12V appliances that you
    can just connect straight to the battery. This includes various types of lighting,
    fans, drink warmers, air compressors, DVD players, mini fridges, and more.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, there are so many 12V appliances with a cigarette lighter plug on the
    end that it’s worth making an adapter lead that will allow you to plug them right
    in, without having to modify them.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can buy a cigarette lighter socket adapter, like the one on the left in
    [Figure 3-2](ch03.html#ch03fig2), at your local auto parts store. Having acquired
    it, you can strip the leads and attach alligator clips so you can hook the adapter
    up to the battery. For info about how to join the wires/attach the alligator clip,
    see Project 1, “[Step 3: Wire Up the Battery and Charge Controller](ch02.html#ch00lev1sec40)”
    on [page 30](ch02.html#page_30).'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3-2: Making a cigarette lighter socket adapter'
  prefs: []
  type: TYPE_NORMAL
- en: '**WARNING**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Never assume that a car battery is harmless just because it’s only 12V! While
    you can’t get an electric shock from 12V, you can most certainly receive nasty
    burns from it. If a wrench or screwdriver accidentally shorts across the terminals
    of a car battery, hundreds of amps will flow through it, turning the tool into
    flying molten metal that can easily burn or even blind you. Just remember: Car
    batteries store a lot of energy, which can easily be released by such an accident.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you’re starting to connect things to your battery, you need to make
    sure the battery is protected from accidental damage. Some adapters may already
    incorporate a fuse, but if yours doesn’t have a fuse, you should include a fuse
    holder in the circuit. A 10A fuse, like the one used in “[Project 2: Bicycle Generator](ch02.html#ch00lev1sec43)”
    on [page 34](ch02.html#page_34), will work just fine. Always remember to keep
    spare fuses around. It’s not so easy to nip out to the shops if the neighborhood
    is overrun with zombies. Notice that I’ve included a fuse in the design in [Figure
    3-2](ch03.html#ch03fig2); the fuse will prevent any problems of a fiery nature,
    should an accidental short circuit occur.'
  prefs: []
  type: TYPE_NORMAL
- en: 'An alternative (or supplementary) way to protect your battery is to position
    the solar charge controller from “[Project 1: Solar Recharging](ch02.html#ch00lev1sec33)”
    on [page 26](ch02.html#page_26) between the battery and the *load*, or anything
    you want to power from that battery ([Figure 3-3](ch03.html#ch03fig3)).'
  prefs: []
  type: TYPE_NORMAL
- en: When set up this way, the charge controller monitors the battery voltage and
    will automatically disconnect the load when the battery voltage drops below a
    certain threshold. This is advantageous because if the battery is discharged too
    much beyond this point, then it can be so damaged that it will no longer accept
    charge, and then good luck recharging it.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3-3: Use a charge controller to protect your battery. The solar panel
    is optional.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In “[Project 4: Battery Monitor](ch03.html#ch00lev1sec63)” on [page 53](ch03.html#page_53),
    you will learn how to build a battery monitor that will alert you when your battery
    runs low.'
  prefs: []
  type: TYPE_NORMAL
- en: '**USB POWER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Largely due to the influence of the USB charger lead, 5V has become the most
    common operating voltage for small DC devices. Jumping from 12V to 5V is much
    easier than from 120V AC to 5V DC. At the auto parts store, you will find 12V
    cigarette lighter to 5V USB power adapters.
  prefs: []
  type: TYPE_NORMAL
- en: The adapter in [Figure 3-4](ch03.html#ch03fig4) has the benefit of combining
    both 12V sockets and 5V USB sockets. Another type of adapter just has a 12V cigarette
    lighter–shaped plug with one or two USB sockets built into the end of the plug.
    You could either plug the type of adapter shown in [Figure 3-4](ch03.html#ch03fig4)
    into the adapter of [Figure 3-2](ch03.html#ch03fig2). Alternatively, you could
    chop off the plug from the adapter of [Figure 3-4](ch03.html#ch03fig4) and add
    alligator clips to it, just as you did to the adapter in [Figure 3-2](ch03.html#ch03fig2).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3-4: 12V to USB adapter'
  prefs: []
  type: TYPE_NORMAL
- en: You could, of course, use this adapter to charge your cell phone. But the cellular
    network will probably be one of the first services to collapse during the zombie
    apocalypse, first suffering overload from callers flooding the network, trying
    to get in touch with loved ones, and then succumbing to system failures due to
    power outages and lack of maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: '**AC INVERTERS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It’s possible to convert the 12V DC of a battery into 120V (or 220V) AC using
    an *inverter*. This device has terminals that connect to a 12V battery and an
    AC outlet, which you can plug regular AC appliances into.
  prefs: []
  type: TYPE_NORMAL
- en: You cannot, however, plug in very high-powered AC devices. A wattage rating
    printed on the inverter will specify the maximum power load it can handle. Small
    models intended for powering laptops may only be 50W, but 200W or 400W inverters
    are neither hard to find nor particularly expensive.
  prefs: []
  type: TYPE_NORMAL
- en: Where possible, using DC devices is much better, as inverters aren’t very efficient.
    They generate high-voltage AC and waste quite a lot of energy as heat; just look
    at the large heat sinks on the sides of most inverters. They also often use significant
    amounts of current even when nothing is plugged into them, so you have to remember
    to turn them off when not in use.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you’ll learn how to make a low-voltage lighting setup that
    can provide lighting intensity similar to that of AC lighting but by using 12V
    DC lamps powered directly by a car battery.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT 3: LED LIGHTING**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: LEDs offer the most light per watt of any type of illumination and are a natural
    choice for postapocalyptic lighting. This project uses three 12V, MR16 LED light
    bulbs. These bulbs are available in powers from 2W to 10W or more, and any of
    these wattages are suitable for this project.
  prefs: []
  type: TYPE_NORMAL
- en: You can string together more than three of these bulbs if you like. Just use
    a longer lead and more bulbs. You may, for example, have a long corridor that
    you wish to defend, and good illumination is essential for effective zombie fighting.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, almost any 12V light source could be used, including high-power halogen
    light bulbs of 50W or more. However, the higher the wattage, the faster the battery
    will drain.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU WILL NEED**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make this project, you’ll need the following items.
  prefs: []
  type: TYPE_NORMAL
- en: '| **ITEM** | **NOTES** | **SOURCE** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Car Battery | 12V | Auto parts store, scavenge
    |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) 2x heavy-duty alligator clip | 7A or more |
    Auto parts store |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) LED lamps MR16 | 12V 2W-10W | Hardware store
    |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) MR16 lamp sockets | Sockets with trailing leads
    | Hardware store |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Switch | Inline switch (5A) | Hardware store
    |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Electrical cable | 7A | Scavenge |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Fuse | 10A fuse and holder | Auto parts store
    |'
  prefs: []
  type: TYPE_TB
- en: '**CONSTRUCTION**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The LED lights for this project are wired in parallel ([Figure 3-5](ch03.html#ch03fig5)).
    In this arrangement, each of the lights gets the full 12V from the battery, and
    if one of the lights fails for any reason, the other lights will keep working.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3-5: 12V lighting system'
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 1: PREPARE THE ELECTRICAL CABLE**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: If you’re using a fairly small number of low-power LED light bulbs (up to five,
    at up to 5W each), then double-core bell wire will be just fine. Cable designed
    for speakers is also a good choice. In my design ([Figure 3-5](ch03.html#ch03fig5)),
    I used three bulbs, so I cut three lengths of cable, stripping half an inch (15
    mm) of the insulation off the ends.
  prefs: []
  type: TYPE_NORMAL
- en: The first of these leads (labeled ➊ in [Figure 3-5](ch03.html#ch03fig5)) will
    go from the battery’s positive terminal to the switch and then to the first lamp.
    The second length will continue on to the second lamp (➋), and the final lead
    (➌) will go to the last lamp.
  prefs: []
  type: TYPE_NORMAL
- en: Where the wires join, there needs to be a three-way twisting of each wire of
    the cable with both the next length of cable and the lamp holder ([Figure 3-6](ch03.html#ch03fig6)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3-6: Connecting the lamp holder'
  prefs: []
  type: TYPE_NORMAL
- en: For a more permanent connection, solder the twisted connection. Whether you
    solder them or not, wrap the connections in electrical tape. For a guide on how
    to make this kind of twisted-wire connection, see “[Joining Wires by Twisting](app02.html#ch00lev1sec226)”
    on [page 229](app02.html#page_229).
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 2: WIRE UP THE FUSE AND SWITCH**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Complete the wiring by attaching the fuse and alligator clip to the start of
    the wiring. Note that these MR16 light bulbs include a circuit to automatically
    switch the polarity of the LED. This means you can connect them either way around.
    If you use a different type of 12V LED, check whether it has separate positive
    and negative connections. If so, make sure that you connect the positive side
    to the switch lead and the negative side to the lead you’ll attach to the negative
    terminal on the battery.
  prefs: []
  type: TYPE_NORMAL
- en: The alligator clip attaches to the fuse lead, which is attached to the switch
    ([Figure 3-7](ch03.html#ch03fig7)). Once again, these leads can be twisted together,
    and for a more reliable finish, you can solder the twisted joint. The in-line
    switch uses screw terminals to attach the wires. One side is just a metal connector
    that passes straight through, and the other side has spring contacts, which connect
    with each other when the switch is in the on position.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3-7: Connecting the fuse and alligator clip for a lighting system'
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 3: INSTALL THE LAMPS**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Now that everything is wired up, attach the alligator clips to the battery and
    make sure that the bulbs light when the switch is flicked. Once you know the lights
    turn on, just affix them to the ceiling, the wall, or wherever you want them.
  prefs: []
  type: TYPE_NORMAL
- en: '**USING THE LIGHTING**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Murphy’s law dictates that batteries will run out of juice and shut off the
    lights just as the zombies attack. To anticipate and avoid this situation, it’s
    good to know roughly how many hours of light you’re going to get from your battery
    before you need to do some more pedaling or otherwise put some juice into it.
  prefs: []
  type: TYPE_NORMAL
- en: That number of hours depends on the size and quality of your battery. Looking
    back at [Table 2-1](ch02.html#ch02tab1) on [page 21](ch02.html#page_21), you can
    see that a 5W LED is expected to last 120 hours. Therefore, a string of six 5W
    LEDs should be good for about 20 hours. If you go all out and put up a string
    of three 60W 12V halogen lamps, you’ll only get about 4 hours of light before
    needing another charge.
  prefs: []
  type: TYPE_NORMAL
- en: Whatever your lighting setup, it would be great to have advance notice that
    the battery is getting low—and this is the goal of the next project.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT 4: BATTERY MONITOR**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I recommend keeping a good stock of car batteries charged up and ready to go
    at all times. That way, if zombies damage your solar panels, or you fall ill and
    can’t pedal your generator, you won’t be plunged into darkness and left powerless
    (in both senses of the word). It is therefore of paramount importance that you
    have an early warning system that will monitor the battery, telling you when it
    starts to get low so you can swap in a new one.
  prefs: []
  type: TYPE_NORMAL
- en: This project uses an Arduino, a useful little board that’s great for putting
    together electronic projects that require a bit of logic. In this case, the logic
    is simply to measure the battery voltage, display it, and sound a buzzer when
    it falls below a certain critical level.
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino will be powered from the same car battery that it’s monitoring.
    The Arduino uses less than 1W to operate, so it’s okay to leave the board connected
    to the battery continuously.
  prefs: []
  type: TYPE_NORMAL
- en: In the battery monitor setup ([Figure 3-8](ch03.html#ch03fig8)), alligator clips
    connect the battery monitor to the battery. If the battery has large alligator
    clips attached to it, then these smaller clips can be attached to the handles
    of the big clips.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3-8: Battery monitor'
  prefs: []
  type: TYPE_NORMAL
- en: The left lead of the left resistor ([Figure 3-8](ch03.html#ch03fig8)) is connected
    to the positive battery terminal, and the right lead of the right resistor is
    connected to the negative battery terminal.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU WILL NEED**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To make this project, you’ll need the following items.
  prefs: []
  type: TYPE_NORMAL
- en: '| **ITEM** | **NOTES** | **SOURCE** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Arduino | Arduino Uno R3 | Adafruit, Fry’s
    (7224833), Sparkfun |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Arduino screwshield | Screwshield | Adafruit
    (196) |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) LCD shield | LCD 16x2 display shield | eBay,
    Sparkfun (DEV-11851) |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Buzzer | Small piezo buzzer | Adafruit (1740),
    eBay |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) 270Ω resistor |  | Mouser (293-270-RC) |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) 470Ω resistor |  | Mouser (293-470-RC) |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Small alligator clip leads |  | Auto parts
    store |'
  prefs: []
  type: TYPE_TB
- en: One great thing about using an Arduino is that there are many different ready-made
    modules, called *shields*, that fit on top of the Arduino and add extra features
    to it without any complex electronic construction. This project uses two such
    shields that are stacked on top of each other.
  prefs: []
  type: TYPE_NORMAL
- en: The first shield that fits on top of the Arduino is a *screwshield*, sometimes
    called a *wing shield*. This shield allows you to attach wires to the Arduino
    using screw terminals and a screw driver. The second and topmost shield that you’ll
    attach to the Arduino is an LCD display shield. This shield will tell you the
    battery level as a measurement of voltage and as a bar graph display of the state
    of charge (SOC) of the battery. The project also has an option to mute the buzzer
    to avoid attracting zombies, if you suspect they are shuffling about nearby.
  prefs: []
  type: TYPE_NORMAL
- en: The only other electronic components in this project are a pair of resistors
    and a buzzer. The resistors are needed because although the Arduino has inputs
    to measure voltage, it can only measure voltages up to 5V. Any more than that
    would damage the Arduino. You’ll use the pair of resistors in an arrangement called
    a *voltage divider*. The resistors I’ve chosen for my divider reduce the voltage
    to the Arduino by a factor of 2.74 so that the 12V or 13V that we might find at
    the battery will be reduced to 4.7V or less.
  prefs: []
  type: TYPE_NORMAL
- en: '**VOLTAGE DIVIDERS**'
  prefs: []
  type: TYPE_NORMAL
- en: Using two resistors as a voltage divider ([Figure 3-9](ch03.html#ch03fig9))
    is a great way to reduce the voltage you are trying to measure to a level where
    it can be directly measured by, say, an Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3-9: Voltage divider'
  prefs: []
  type: TYPE_NORMAL
- en: The formula to calculate V[out] if you know V[in], R1, and R2 is
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f0055-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For example, if R1 is 470 Ω, R2 is 270 Ω, and the maximum voltage of V[in] is
    13V, then
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f0055-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In other words, even if your battery is fully charged and managing to provide
    13V, only a maximum of 4.74V (below the critical 5V level) will find its way to
    the Arduino. If the input voltage is lower than this, then V[out] will scale proportionally.
    For example, if the battery voltage is 6.5V (which would indicate a bit of a problem,
    by the way), V[out] would be 2.37V.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONSTRUCTION**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Remarkably, no soldering at all is needed to make this project. The only tool
    you need is a screwdriver.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 1: PROGRAM THE ARDUINO**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Arduino programs, which are called *sketches*, can change whether a connection,
    or *pin*, on the Arduino is an input or an output. The Arduino remembers whether
    each pin was set to input or output, even after you disconnect it from the rest
    of the circuit. Thus, if one of your Arduino pins was an output the last time
    you used it, connecting the Arduino to new hardware that expects the pin to be
    an input could damage the Arduino or the circuit you’re connecting it to. By uploading
    the program to the Arduino before doing anything else, you’ll ensure that each
    pin functions the way your circuit expects it to.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll find detailed instructions on getting started with the Arduino, connecting
    it to your computer, and uploading a sketch to it in [Appendix B](app02.html#app02).
    In this case, the sketch is called *Project_04_Battery_monitor* and can be found
    with all the other program files used in this book at *[http://nostarch.com/zombies/](http://nostarch.com/zombies/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 2: BUILD THE ARDUINO SANDWICH**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: When used with the two shields, the Arduino Uno is on the bottom, the screwshield
    is plugged into that, and, finally, the LCD display shield goes on top of the
    screwshield ([Figure 3-10](ch03.html#ch03fig10)). The LCD shield has to be at
    the top of the stack or you won’t be able to see what it says!
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3-10: An Arduino “sandwich”'
  prefs: []
  type: TYPE_NORMAL
- en: When pushing the pins of a shield into an Arduino or the screwshield, be careful
    to check that all the pins meet the holes correctly so you don’t damage them.
    It’s quite easy for one of the pins to splay out as you are pushing the pins in.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 3: ATTACH THE RESISTORS AND BUZZER**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: You’ll attach the resistors and buzzer to the screw terminals of the screwshield
    ([Figure 3-11](ch03.html#ch03fig11)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3-11: Connecting components to the screwshield'
  prefs: []
  type: TYPE_NORMAL
- en: The two resistors can be identified either by measuring their resistance using
    a multimeter (see “Using a Multimeter” on [page 237](app02.html#page_237)) or
    by reading the colored stripes on the resistor body. The 470 Ω resistor will have
    stripes of yellow, purple, and brown; the 270 Ω resistor will have red, purple,
    and brown stripes. In “[Resistor Color Codes](app01.html#ch00lev1sec224)” on [page
    225](app01.html#page_225), you will find a resistor color code table and instructions
    on how to identify resistors by their stripes.
  prefs: []
  type: TYPE_NORMAL
- en: Some buzzers will have a positive red lead and a negative black lead. If this
    is the case, connect the black lead to GND (ground) and the red lead to D11 on
    the Arduino. Other buzzers will have identical leads; if this is the case, it
    doesn’t matter which way around they are connected.
  prefs: []
  type: TYPE_NORMAL
- en: '**SOFTWARE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The sketch for this program is mostly concerned with making sure that the right
    text is displayed on the LCD at the right time. I’ll walk you through it in full,
    though you don’t have to understand or follow how this sketch works to finish
    the project. You can just upload it exactly as it is into the Arduino board, following
    the steps explained in “[Installing the Antizombie Sketches](app03.html#ch00lev1sec241)”
    on [page 248](app03.html#page_248).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to learn more about Arduino programming, see [Appendix C](app03.html#app03)
    or take a look at my book *Programming Arduino: Getting Started with Sketches*
    (McGraw-Hill, 2012).'
  prefs: []
  type: TYPE_NORMAL
- en: The sketch starts by importing the *LiquidCrystal* library, which is responsible
    for controlling the LCD shield. Because this library is included as a standard
    part of the Arduino software, there is nothing to download and install for this
    library.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After the library command, three constants are defined for key battery voltages.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: These voltages are, in order, the fully charged battery voltage, the minimum
    voltage that you want the battery to be allowed to discharge to, and the voltage
    at which the buzzer should sound. These last two are both set to 11.7V. These
    values are pretty standard for a lead-acid car battery, but if you use a different
    type of battery, you can tweak them. Because they hold decimal values, the variables
    are of a type called *float*. You can find out more about Arduino data types in
    [Appendix C](app03.html#app03).
  prefs: []
  type: TYPE_NORMAL
- en: The next few lines define constants for the Arduino pins that are used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The Arduino’s various pins are normally identified simply by a number, so these
    constants give them meaningful names. You don’t need to change these pin designations
    unless you decide to wire up your battery monitor differently.
  prefs: []
  type: TYPE_NORMAL
- en: The final section defines constants for the values of the resistors used in
    the potential divider.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The constant `k` is the resulting factor the input voltage will be reduced by
    in order to fit into the 5V measurement range of the Arduino. The next line of
    code initializes the LCD display, specifying which pins are used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The comment line starting with `//` just identifies which of the Arduino pin
    numbers on the line beneath it correspond to which pins on the LCD module. The
    line after that defines a *Boolean* (a value that can be true or false) variable,
    `mute`, which is used to mute the buzzer.
  prefs: []
  type: TYPE_NORMAL
- en: The setup function that comes next is run just once, when the Arduino starts.
    In this case, it begins by setting the backlight pin (D10) to be an input.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The backlight pin is used only on some LCD shields, but a significant number
    of LCD shields have a design flaw that can destroy the Arduino they are connected
    to if this pin is set to an output and also set high. To be on the safe side,
    D10 is set to an input. The rest of the function initializes the LCD display and
    writes out the word `Battery`, which will be a permanent fixture of the message
    displayed.
  prefs: []
  type: TYPE_NORMAL
- en: The loop function that follows the setup function is run repeatedly. That is,
    as soon as all the commands in the function have been executed, the function will
    start again from the top.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The display is updated inside the loop function. This is also where you’ll check
    that the battery voltage hasn’t dropped below the warning voltage and check for
    key presses to toggle the battery monitor’s mute mode.
  prefs: []
  type: TYPE_NORMAL
- en: This loop function makes use of a number of other functions further down in
    the file. The first of these is `displayVoltage`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This function starts at column 8 and overwrites the eight character positions
    on the top line by printing eight spaces ➊. It then moves the cursor back to column
    8 and writes the battery voltage in that gap ➋ before writing the *V* character
    at the end of the line.
  prefs: []
  type: TYPE_NORMAL
- en: The `displayVoltage` function makes use of the `readVoltage` function to convert
    the raw reading from the Arduino’s analog input into a voltage.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Readings from an Arduino analog pin give a result between 0 and 1,023, where
    0 means 0V and 1,023 means 5V. So, the value of `vout` in `readVoltage` is the
    output voltage of the potential divider—that is, the reduced voltage. You need
    to work backward to calculate the original battery voltage `vin`, then return
    this value to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: The final function in the sketch displays the bar graph showing how much power
    is left in the battery and, if the battery monitor is in mute mode, the `MUTE`
    notification.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `displayBar` function steps through each of the 16 character positions of
    the second row of the display and then displays either a `*` or a space character,
    depending on the measure of `fullness` of the battery.
  prefs: []
  type: TYPE_NORMAL
- en: '**USING THE BATTERY MONITOR**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As soon as you connect the battery monitor to the battery, the LCD should light
    up and show a readout of the battery voltage on the top row of the display. The
    second row of the display will show a number of `*` characters to indicate the
    juice remaining in the battery. Also, if you press any of the button switches
    below the display to disable the buzzer, the message `MUTE` should toggle on and
    off.
  prefs: []
  type: TYPE_NORMAL
- en: If your display appears blank or difficult to read, then you may need to adjust
    the contrast. Just use a small, flat-headed screwdriver to turn the small variable
    resistor at the top right of the LCD shield ([Figure 3-11](ch03.html#ch03fig11)).
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have the basics of power generation and lighting sorted out, turn
    your attention to detecting zombies. You’ll find out how to know they’re coming
    in [Chapter 4](ch04.html#ch04).
  prefs: []
  type: TYPE_NORMAL
