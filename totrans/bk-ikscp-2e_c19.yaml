- en: '19'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Extensions
  prefs: []
  type: TYPE_NORMAL
- en: Most long-lived software projects owe a large part of their success to extensibility.
    If you manage to attract and keep outside developers with their unique needs,
    perspectives, and approaches, your software product has acquired good insurance
    against oblivion. Inkscape's ecosystem of extensions is not very large, but it
    is an important part of the program's impact. Almost 200 extensions ship with
    Inkscape 1.0, and you can find many more online.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I first look at extensions from the user perspective. I explain
    the extensions UI ([19.1](#section19.1)) and describe, with examples, the notable
    extensions included with Inkscape ([19.2](#section19.2)). After that, I put on
    my developer's hat; I explain the architecture of Inkscape extensions ([19.3](#section19.3))
    and guide you through a simple example of an extension created from scratch ([19.4](#section19.4)).
    As Inkscape is an open source application, everyone can (and is encouraged to)
    contribute to it; writing an extension may be the easiest way not only to solve
    your unique problem but also make your solution useful to others.
  prefs: []
  type: TYPE_NORMAL
- en: 19.1 Working with Extensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An *extension* is a piece of code you can run to perform some actions on the
    selected objects in an Inkscape document. Within Inkscape, you can access most
    extensions via commands in the Extensions submenus. Unlike path effects ([Chapter 13](c13.xhtml#ch13))
    or filters ([Chapter 17](c17.xhtml#ch17)), an extension is a one-off operation;
    it is typically destructive and changes objects without preserving the originals.
    The only way to reverse an extension run is via Edit ▶ Undo.
  prefs: []
  type: TYPE_NORMAL
- en: A typical extension has a number of parameters that you set in its dialog before
    running the extension. The dialog may have more than one tab, and some of the
    most developed ones have an About or Help tab that describes the extension and
    how to use it, as shown in [Figure 19-1](#fig19-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![](21/ext-els.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19-1: The Export Layer Slices extension: the two tabs of the parameters
    dialog'
  prefs: []
  type: TYPE_NORMAL
- en: Most extension dialogs have a Live preview checkbox; when checked, it shows
    your document as it would look after the extension is applied with the current
    parameters. This way, you can experiment with parameter values without having
    to undo and run the extension again. To apply the parameters as final, click **Apply**;
    to cancel without running the extension, click **Close**.
  prefs: []
  type: TYPE_NORMAL
- en: When the Live preview is off, the extension dialog is not modal, so you can
    pan the canvas and select different objects; as soon as you turn Live preview
    on, the dialog locks the rest of Inkscape so you can only change the parameters
    in the dialog and see their effect. For some extensions, updating can be slow,
    especially when your document is big and complex.
  prefs: []
  type: TYPE_NORMAL
- en: The Previous Extension command in the Extensions menu re-runs the last extension
    command without showing the parameters dialog. The Previous Extension Settings
    command opens last extension's parameters dialog from which you can run it again.
  prefs: []
  type: TYPE_NORMAL
- en: 19.2 A Guide to Inkscape Extensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Many extensions have already been mentioned or described throughout this book.
    In some (but far from all) cases, an extension is an alternative to some other,
    more convenient or integrated method to achieve the same result; when an extension
    duplicates functionality available in the core of the program, it''s usually because
    the extension was created first. Still, many extensions are unique and indispensable
    tools in Inkscape''s toolbox. Let''s go through the Extensions menu to review
    what is available:'
  prefs: []
  type: TYPE_NORMAL
- en: The Arrange submenu has Restack for z-order manipulations ([4.4](c04.xhtml#section4.4))
    and Deep Ungroup for ungrouping multiple levels of grouping ([4.8.1](c04.xhtml#section4.8.1)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color extensions change the colors of selected vector objects (but don't work
    on bitmaps), as detailed in [8.10.1](c08.xhtml#section8.10.1).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document has two extensions that convert between the old Inkscape SVG documents
    that assume 90 dpi resolution and the new ones that are based on 96 dpi (see the
    note at the end of [4.2](c04.xhtml#section4.2) for details).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Export extensions implement various ways to export a document, such as sending
    it to a plotter device (Plot) or exporting multiple slices of a web page mockup
    (Export Layer Slices, which is intended as an improvement on the standard batch
    export functionality in the Export PNG Image dialog, [18.6.1.4](c18.xhtml#section18.6.1.4)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gcodetools is a collection of extensions to prepare and export your document
    to the G-code language that various computerized machine tools understand, so
    that you can, for example, cut or engrave a metallic badge out of your Inkscape
    design.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Generate from Path, Modify Path, and Visualize Path submenus provide a number
    of path-processing extensions described in the chapter on path effects ([13.4](c13.xhtml#section13.4)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Images submenu contains utilities for embedding and extracting images ([18.2.1](c18.xhtml#section18.2.1))
    as well as for changing image attributes ([18.2.3](c18.xhtml#section18.2.3)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JessyInk extensions insert Javascript snippets into a document that turn it
    into an interactive presentation when viewed in a browser. With these snippets,
    you will be able to scroll the pages, make objects respond to clicks, use transitions,
    and even insert videos.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raster (bitmap-processing) extensions were reviewed in [18.7](c18.xhtml#section18.7).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stylesheet ▶ Merge Styles into CSS is the tool to use if you have many objects
    with the same style and want to store that style in a single place so you can
    update all those objects at once. Recall that Inkscape supports selectors that
    apply a shared style to multiple objects ([8.1](c08.xhtml#section8.1)); this extension
    creates such a selector from the selected objects and then switches them from
    their inline style properties to that selector.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text extensions were described in the chapter on text ([15.7](c15.xhtml#section15.7)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Typography is a collection of extensions that aid in creating SVG fonts ([15.8](c15.xhtml#section15.8)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web extensions once again remind you that Inkscape's documents are usable as
    web pages because modern web browsers support SVG (see also JessyInk above). The
    Web ▶ JavaScript ▶ Set Attributes extension allows you to change an object’s style
    property in response to a given event—typically a click of some other element.
    The Web ▶ JavaScript ▶ Transmit Attributes is similar but copies the clicked object's
    property to another object. You need to select both objects, the click target
    first and the property-changing object second, before calling these extensions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 19.2.1 The Render Submenu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Render submenu contains extensions that generate entirely new objects—not
    based on anything in your document. Most of them haven''t been mentioned, so here''s
    a list of the notable ones:'
  prefs: []
  type: TYPE_NORMAL
- en: 3D Polyhedron
  prefs: []
  type: TYPE_NORMAL
- en: Creates a projection of any of a number of three-dimensional shapes, from a
    cube to a great stellated dodecahedron; you specify the spatial angle and the
    styling of the shape's faces.
  prefs: []
  type: TYPE_NORMAL
- en: Barcode
  prefs: []
  type: TYPE_NORMAL
- en: Extensions in this subsubmenu create a Classic linear barcode (supported formats
    include EAN8, EAN13, Code39, Code128, and others), a two-dimensional Datamatrix
    barcode, or a square QR Code with the given text.
  prefs: []
  type: TYPE_NORMAL
- en: Calendar
  prefs: []
  type: TYPE_NORMAL
- en: In case you ever need it, this extension fills your page with a fully formatted
    calendar for a given year, with many layout, styling, and localization options.
  prefs: []
  type: TYPE_NORMAL
- en: Draw From Triangle, Triangle
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the path effects for geometric constructions ([13.3.15](c13.xhtml#section13.3.15)),
    Draw From Triangle draws any of a number of geometric shapes (such as the circumcircle
    or orthocenter) based on a triangle defined by the first three nodes of a selected
    path. The Triangle extension creates a triangle from any unambiguous combination
    of sides and angles.
  prefs: []
  type: TYPE_NORMAL
- en: Function Plotter, Parametric Curves
  prefs: []
  type: TYPE_NORMAL
- en: These two extensions draw function graphs. The Function Plotter creates a graph
    of a single function (for example, altitude against time of a moving body), whereas
    Parametric Curves draws a curve where both X and Y coordinates vary as functions
    of an independent*parameter* variable conventionally called *t* (for example,
    X and Y may represent coordinates of a body as they change with time).
  prefs: []
  type: TYPE_NORMAL
- en: Before calling one of these extensions, draw or select a rectangle that will
    define the scale of the graph, and use the numeric parameters to define the ranges
    of the X and Y coordinates. The Multiply X range by 2*pi checkbox is convenient
    for trigonometric functions; with it, for example, the range of 0 to 2 is treated
    as 0 to 2 × π. In the Function Plotter, the Use polar coordinates checkbox transforms
    the graph into a circle whose center is in the center of the selected rectangle,
    with the X range mapped to the angle and the Y to the radius.
  prefs: []
  type: TYPE_NORMAL
- en: The Samples parameter sets the total number of times the function(s) will be
    sampled; since each sampling produces a node, this is also the total number of
    nodes in the generated path. The higher this number, the more precise the graph.
    The optimum number of samples depends on the nature of your function; for example,
    a periodic function with *n* periods in the X range would need at least several
    samples per period to reproduce with any fidelity.
  prefs: []
  type: TYPE_NORMAL
- en: The function or functions are written in the Python programming language. You
    can use a number of built-in mathematical functions such as`sin(x)`, `log(x)`,
    or `sqrt(x)`; refer to theFunctions tab for a full list.
  prefs: []
  type: TYPE_NORMAL
- en: In the Function Plotter ([Figure 19-2](#fig19-2)), you can give the *first derivative*
    of the graphed function; the value of the derivative determines the angle of the
    Bézier handles at each node. Either ask the extension to Calculate first derivative
    numerically or uncheck that checkbox and provide the derivative function analytically,
    using the same Python syntax and built-in functions—for example, the first derivative
    of `sin(x)` is `cos(x)`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](21/pe-funplot.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19-2: Function Plotter examples'
  prefs: []
  type: TYPE_NORMAL
- en: Gear
  prefs: []
  type: TYPE_NORMAL
- en: These two extensions create a circular gear or rack gear, with a given number
    of teeth, pitch, and contact angle.
  prefs: []
  type: TYPE_NORMAL
- en: Grids
  prefs: []
  type: TYPE_NORMAL
- en: This family of extensions is for creating grids of lines—rectangular (Cartesian,
    such as the grid in [Figure 13-60](c13.xhtml#fig13-60)), isometric, or polar.
    The options for the number of lines and their spacing are self-explanatory; major
    and minor lines use different stroke width. Lines can be spaced logarithmically.
    Each line is a separate path object.
  prefs: []
  type: TYPE_NORMAL
- en: Guides Creator
  prefs: []
  type: TYPE_NORMAL
- en: This extension divides your page into any number of rows and columns by adding
    guidelines ([7.1](c07.xhtml#section7.1)).
  prefs: []
  type: TYPE_NORMAL
- en: L-system
  prefs: []
  type: TYPE_NORMAL
- en: This extension implements *Lindenmeyer systems*—a simple graphic language with
    recursion that can produce complex sequential or tree-like structures ([Figure 19-3](#fig19-3)).
  prefs: []
  type: TYPE_NORMAL
- en: Programs in this language are built out of simple commands like "draw one step
    forward" or "turn left." You start with an Axiom and apply the substitution Rules
    to it recursively, limited by the Order parameter. The rest of the parameters
    determine the length and angles of the lines produced by the primitive commands;
    you can also randomize these values to render a more natural result. For a complete
    list of the commands recognized in the axiom and rules, refer to the Help tab.
  prefs: []
  type: TYPE_NORMAL
- en: '![](21/pe-lsystem.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19-3: L-system examples'
  prefs: []
  type: TYPE_NORMAL
- en: Mathematics ▶ LaTeX
  prefs: []
  type: TYPE_NORMAL
- en: This extension runs `pdflatex` (which needs to be installed on your computer)
    to convert a LaTeX string into a vector formula image inserted into your document.
  prefs: []
  type: TYPE_NORMAL
- en: NiceCharts
  prefs: []
  type: TYPE_NORMAL
- en: This extension can create bar charts, stacked bar charts, or pie charts based
    on data from a file or a string. Parameters determine sizes, spacings, and styling
    of the chart's elements.
  prefs: []
  type: TYPE_NORMAL
- en: Random Tree
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the L-system but more primitive, this extension draws a random branching
    tree where the first segment of the trunk is Initial size long and each subsequent
    branch is progressively shorter, until the Minimum size is reached and the drawing
    terminates. The bigger the difference between the initial and minimum sizes, the
    more complex the tree.
  prefs: []
  type: TYPE_NORMAL
- en: Spirograph
  prefs: []
  type: TYPE_NORMAL
- en: A spirograph is a toy where a small circle, holding the pen, rolls along the
    inner edge of a larger circular hole. This extension is an implementation of the
    same idea that you can use to produce a huge variety of smooth centrally symmetric
    curves.
  prefs: []
  type: TYPE_NORMAL
- en: Wireframe Sphere
  prefs: []
  type: TYPE_NORMAL
- en: This is the extension to use whenever you need a geometrically correct globe
    of parallels and meridians.
  prefs: []
  type: TYPE_NORMAL
- en: 19.3 Extensions Architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The rest of this chapter is more technical. Read on if you're interested in
    learning how Inkscape's extensions are implemented, why you might want to make
    one of your own, and how to proceed if you do. Familiarity with the basics of
    programming in general and the Python language in particular is a plus.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 19-4](#fig19-4) gives an overview of Inkscape''s extension architecture.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](21/ext-arch.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19-4: Inkscape extensions: under the hood'
  prefs: []
  type: TYPE_NORMAL
- en: Unlike, for example, Adobe products, Inkscape does not have "first-class" plug-ins
    that would load into the main program's memory space and have the same level of
    access to the document's tree and the program's API as Inkscape itself. Instead,
    an Inkscape extension is just a script written in Python that Inkscape runs on
    a (temporary) saved copy of the current document—and then loads the script's output
    back, replacing the document with it and restoring object selection if possible.
    Inkscape's extension-running machinery compresses all this saving, processing,
    and loading back into a single undoable action that is transparent to the user.
    What's more, when you turn on the Live preview checkbox in an extension's dialog,
    every change of the parameters causes another save-process-load cycle—which is
    automatically undone if you change a parameter again or close the dialog without
    clicking Apply.
  prefs: []
  type: TYPE_NORMAL
- en: It is the extension script's responsibility to not touch anything in the document
    except what it is supposed to touch. Along with the reference to the saved temporary
    copy of the document, it is passed the list of currently selected objects as well
    as, of course, the parameters the user has set in the extension's dialog. The
    script must load and parse the SVG file, find the selected objects in it, do its
    thing, and output the changed document back as serialized SVG (via the standard
    output).
  prefs: []
  type: TYPE_NORMAL
- en: If this whole approach strikes you as clumsy and inefficient, that's because
    it is. However, such a radical decoupling of extension code from the core of Inkscape
    has its advantages, too. The biggest advantage is the low barrier of entry for
    new developers. You don't need to know much about Inkscape itself in order to
    start; all you need is basic familiarity with SVG and an understanding of how
    to deal with the XML tree of the document in Python. Existing Inkscape extensions
    are very easy to study, modify, or fork for the same reason. Another advantage
    is that any extension is easy to reuse as a stand-alone script that you can run
    not only from Inkscape, but also in all kinds of automated processing scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: While you don't have any access to Inkscape's internals when you're in an extension,
    that doesn't mean you're completely on your own. Inkscape ships with a Python
    library called `inkex` (for INKscape EXtensions) that extension scripts are supposed
    to use. It has facilities for a lot of tedious and complex tasks that you don't
    need to do in your code, such as parsing the path data (the `d` attribute), parsing
    style strings and calculating an object's effective style (taking inheritance
    and CSS selectors into account), manipulating transform matrices, and so on. You
    can write much more powerful algorithms with `inkex` taking care of the low-level
    drudgery for you.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, however, even `inkex` is not enough. You may need something done
    that only Inkscape itself can do—for example, create one or more PNG exports from
    the source document. For this, you need to run Inkscape itself—a *second copy*
    of Inkscape called, possibly repeatedly, via the command line. In older versions,
    even getting the correct bounding box of an object required a command line Inkscape
    call (using the `--query` parameters, [C.5](b03.xhtml#sectionC.5)); as of this
    writing, `inkex` is capable of providing a correct bounding box for a path object,
    but it still can’t do so for text (because of the complexity of correctly rendering
    arbitrary fonts and text layouts).
  prefs: []
  type: TYPE_NORMAL
- en: 19.4 Creating an Extension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The remainder of this chapter walks you through creating an extremely simple—but
    still rudimentarily useful—Inkscape extension from scratch. Hopefully, seeing
    how easy and natural that is, you will feel encouraged to automate your own tedious
    and repeated manual tasks—and perhaps, eventually, share your solution so that
    others may benefit from it too.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example extension, called *Make Initial*, creates a simple initial in a
    text object by taking its first character and increasing its font size. It has
    a single parameter: the size of the initial letter, given as percent of the font
    size of the rest of the text.'
  prefs: []
  type: TYPE_NORMAL
- en: 19.4.1 The .inx File
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before getting to the Python code, we need to create an .inx file (from INkscape
    eXtension) for the extension. This is an XML file that describes, to Inkscape,
    what this extension is, how to run it, and how to present it to the user. Here
    is the makeinitial.inx file for the Make Initial extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The root element, `inkscape-extension`, is just a container. Note the obligatory
    `xmlns` attribute that sets the file's namespace, without which Inkscape won't
    recognize it. The `name` is the name of the extension as it will appear in the
    menu; `label` is the intro text to be displayed in the extension's dialog. The
    `id` can be any string so long as it's unique for your extension.
  prefs: []
  type: TYPE_NORMAL
- en: The single `param` element (there may be any number of them) describes the extension's
    parameter. Called `initialsize`, it is an integer (as this is a percentage, we
    don't need floating-point precision) in the range from 0 to 1000\. The `gui-text`
    attribute provides the label it will have in the dialog, and the content of the
    element (200) is the initial value (after the first use, Inkscape remembers and
    restores the value you last used for all parameters).
  prefs: []
  type: TYPE_NORMAL
- en: The `effect` element identifies this one as an *effect extension*; other extension
    types are `input`, `output`, and `template` (see [19.4.2](#section19.4.2) for
    details). Inside, the `object-type` identifies what kind of selected objects this
    extension accepts; possible values are `all`, `path`, or `text`. The `effects-menu`
    element places this extension inside the Text submenu of the Extensions menu.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `script` element tells Inkscape how to run this extension. In the
    `command` element, the `location="inx"` instructs it to look for the executable
    files in the same folder as the .inx file, and the `interpreter` attribute identifies
    Python as the interpreter to use (the version included with Inkscape 1.1 is Python
    3.8.9). The content of that element (makeinitial.py) refers to the extension’s
    main code file.
  prefs: []
  type: TYPE_NORMAL
- en: 19.4.2 The inkex Base Classes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Gone are the days when Python was a quick-and-dirty scripting language with
    little structure. You now can—and are encouraged to—write fully object-oriented
    Python code. Inkscape''s `inkex` library is as good an example as any: the first
    thing you do after `import inkex` is create a class that will hold your extension''s
    code. Your class should extend one of the *base extension classes* of `inkex`
    so that it inherits all of the utility methods it needs for loading the SVG document,
    parsing the parameters, and outputting the changed document back.'
  prefs: []
  type: TYPE_NORMAL
- en: The `inkex` library includes several base extension classes designed for various
    kinds of extensions, from general to specialized. Choose one that best fits your
    case.
  prefs: []
  type: TYPE_NORMAL
- en: '`EffectExtension` is the most general type of extension that, per [Figure 19-4](#fig19-4),
    takes the input document and the list of selected objects, does something to them,
    and returns the changed document back. You need to implement the `effect` method
    that does the actual processing. This is the base class we will use for our example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GenerateExtension` is for an extension that doesn''t care about the source
    document or its selection; all it does is generate some new object(s) to be added
    to it. The base class handles adding the generated objects to the document, placing
    them by default in the center of view. You need to implement the `generate` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`InputExtension` is an extension that is not available in the Extensions menu;
    instead, it adds a new item to the list of file formats in Open and Import dialogs.
    To support a new file format through an input extension, you need to implement
    the `load` method that reads an input file from a stream and, optionally, the
    `effect` method that transforms the result. Needless to say, you have to return
    valid SVG.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OutputExtension`, similarly, is for output extensions that manifest themselves
    as file formats in the Save and Save As dialogs. You need to implement an optional
    `effect` method that transforms the document before saving and the obligatory
    `save` that performs the actual output to a stream.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CallExtension` is for an extension designed to be a simple interface between
    Inkscape and some external SVG-processing application. You need to implement the
    `call` method that calls your application on an input file and produces an output
    file. For such tasks, this base class is more efficient than the generic `EffectExtension`
    because it does not even parse the SVG in the Python code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TemplateExtension` is an extension that provides a new document template.
    Like input and output extensions, it''s not listed in the Extensions menu; instead,
    it adds an item to the list of templates in the New from Template dialog ([Figure 3-3](c03.xhtml#fig3-3)).
    You can implement the `get_template` method that returns the template''s ready-to-use
    SVG code (for example, by reading it from a file). Alternatively, you can implement
    the `get_size` method (returns the template''s size) and/or `set_namedview` method
    (creates the `sodipodi:namedview` element where you set up guides, page borders,
    zoom, and so on).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ColorExtension` is a specialized effect extension for adjusting colors in
    selected objects. All you need to do is implement the `modify_color` method that
    takes an input color and returns the output color; optionally, you can add `modify_opacity`
    that does the same for opacity. The base class does all the rest (such as parsing
    styles, tracking down clones, dealing with gradients, and so on).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TextExtension` is a specialized effect extension for editing a document''s
    text content. All you need to do is implement the `process_chardata` method that
    takes an input text string and returns its edited version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to the obligatory methods for each base class (listed above), any
    extension class may also need to implement the `add_arguments` method if your
    extension has some user-adjustable parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 19.4.3 The makeinitial.py File
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After these preliminaries, we can finally dive into the actual Python code.
    Here''s the *makeinitial.py* file in full:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Naturally, the first thing we do is `import inkex`. Since we will be manipulating
    the document's tree (to create a new `tspan` node for the initial), we also need
    to import the `etree` component of `lxml`, which is Python's library for dealing
    with XML (if you're unfamiliar with it, read the tutorial at [https://lxml.de/tutorial.html](https://lxml.de/tutorial.html)).
  prefs: []
  type: TYPE_NORMAL
- en: We create the class for the extension by extending `inkex.EffectExtension` ([19.4.2](#section19.4.2)).
    The first obligatory method to implement in our class is `add_arguments`. In it,
    we call `pars.add_argument`; the first string argument of that method is the command
    line parameter (therefore starting with `--`) that Inkscape passes to our script,
    and it must match the name of the extension's parameter (`initialsize`) as defined
    in the .inx file. It is also the name by which we will access its value later
    on.
  prefs: []
  type: TYPE_NORMAL
- en: The `effect` method shown in line 9 does the actual work. The call `self.svg.get_selected(inkex.TextElement)`
    returns the list of elements that the user has selected before calling the extension,
    filtered to contain only text elements. We then go through all these elements
    and call our own method, `__makeinitial` (the double underscore in the name is
    Python's convention for private methods), on each one in turn.
  prefs: []
  type: TYPE_NORMAL
- en: In `__makeinitial` (line 14), things get a little more complicated. We need
    to get the first character of this text element's textual content. However, in
    SVG, the`text` element usually does not contain text under it; instead, it contains
    `tspan` elements for the lines that, in turn, may contain further `tspan`s for
    styling. We therefore check if this node has any text at all (`node.text != None`)
    and if its text is not all whitespace (`node.text.strip() != ""`). If that is
    not so, we call `__makeinitial` recursively on its first child, if it has one
    (lines 24-25); in `lxml`, elements are lists of children, so the check for presence
    of any children is `len(node) != 0`, and then the first child is simply `node[0]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If our current node does have text, we extract its first non-whitespace character
    via `node.text.strip()[0]` (line 16). Since it may not be the first one due to
    whitespace, we calculate its index (line 17). Then, we create the new `tspan`
    node in line 18 (note for XML geeks: don''t worry about namespaces here because
    the SVG namespace is the default one in Inkscape''s SVG documents). We retrieve
    the extension parameter''s value via `self.options.initialsize` and, in our new
    node, construct the `style` attribute that uses it in the `font-size` property
    (line 19). Per CSS rules, the percentage value in the property refers to the font
    size of the parent node (that is, the `node` we''re processing now).'
  prefs: []
  type: TYPE_NORMAL
- en: We now need to take care of the text. The initial character gets assigned to
    the new `tspan` node, as its `text` property, in line 20\. As for the rest of
    the text, however, we need to cull it out from the current `node` (line 22) and
    assign it to the `newNode` as its `tail` (line 21). That's because in `lxml`,
    the `text` property of a node holds only that part of its textual content that
    comes before its first child node. After that, each of the child nodes holds the
    fragment of text that comes after it, if any, in its `tail` property.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `newNode` is ready, and we insert it into the current `node` (line
    23).
  prefs: []
  type: TYPE_NORMAL
- en: The last two lines of the script (27-28) are a bit of black magic required for
    it to run. We check whether this script is run as a stand-alone program (as opposed
    to, for example, being imported into some other script) and, if so, run our class's
    `run` method (supplied by its `inkex` parent class).
  prefs: []
  type: TYPE_NORMAL
- en: 19.4.4 Deploying and Testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Both the .py file with the extension's code and its .inx file are placed into
    Inkscape's extensions folder. In Preferences ▶ System, you can look up the Inkscape
    extensions folder—this is where the extensions that ship with Inkscape live and
    where you search for inspiration and code to reuse. Your own extensions, however,
    should go into the User extensions folder; on my system, it's in C:\Users\dmitry\AppData\Roaming\inkscape\extensions.
    This way, your code will not be lost when you upgrade to a newer version of Inkscape.
  prefs: []
  type: TYPE_NORMAL
- en: Copy your files over, restart Inkscape, and voilà! The new extension shows up
    in Extensions ▶ Text menu and can be used on any text object, as shown in [Figure 19-5](#fig19-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![](21/ext-makeinitial.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19-5: The new Make Initial extension in action'
  prefs: []
  type: TYPE_NORMAL
