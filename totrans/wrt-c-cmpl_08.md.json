["```\nint main(void) {\n    int a ❶ = 5;\n    return a;\n❷}\n```", "```\nint main(void) {\n    if (1) {\n        int a ❶ = 2;\n        return a + 1;\n  ❷}\n    return 0;\n}\n```", "```\nint a = 2;\n{\n    int b = a + 2;\n}\n```", "```\n❶ int a = 2;\n{\n  ❷ int a = 3;\n    int b = a + 2;\n}\n```", "```\n❶ int a = 2;\n{\n  ❷ int a = 3;\n    int b = a + 2;\n}\n❸ return a;\n```", "```\nint a = 2;\n{\n    int b = a + 2;\n    int a = 3;\n}\n```", "```\nint main(void) {\n  ❶ int x = 1;\n    {\n      ❷ int x = 2;\n        if (x > 1) {\n          ❸ x = 3;\n          ❹ int x = 4;\n        }\n      ❺ return x;\n    }\n  ❻ return x;\n}\n```", "```\nint main(void) {\n    {\n        int x ❶ = 4;\n  ❷}\n    return ❸ x;\n    int x ❹ = 3;\n❺}\n```", "```\nint a = 3;\n{\n    int b = a;\n    int b = 1;\n}\n```", "```\nblock = Block(block_item*)\n```", "```\nstatement = Return(exp)\n          | Expression(exp)\n          | If(exp condition, statement then, statement? else)\n **| Compound(block)**\n          | Null\n```", "```\nfunction_definition = Function(identifier name, **block** body)\n```", "```\nprogram = Program(function_definition)\nfunction_definition = Function(identifier name, **block** body)\nblock_item = S(statement) | D(declaration)\n**block = Block(block_item*)**\ndeclaration = Declaration(identifier name, exp? init)\nstatement = Return(exp)\n          | Expression(exp)\n          | If(exp condition, statement then, statement? else)\n **| Compound(block)**\n          | Null\nexp = Constant(int)\n    | Var(identifier)\n    | Unary(unary_operator, exp)\n    | Binary(binary_operator, exp, exp)\n    | Assignment(exp, exp)\n    | Conditional(exp condition, exp, exp)\nunary_operator = Complement | Negate | Not\nbinary_operator = Add | Subtract | Multiply | Divide | Remainder | And | Or\n                | Equal | NotEqual | LessThan | LessOrEqual\n                | GreaterThan | GreaterOrEqual\n```", "```\n<program> ::= <function>\n<function> ::= \"int\" <identifier> \"(\" \"void\" \")\" **<block>**\n**<block> ::= \"{\" {<block-item>} \"}\"**\n<block-item> ::= <statement> | <declaration>\n<declaration> ::= \"int\" <identifier> [\"=\" <exp>] \";\"\n<statement> ::= \"return\" <exp> \";\"\n              | <exp> \";\"\n              | \"if\" \"(\" <exp> \")\" <statement> [\"else\" <statement>]\n              **| <block>**\n              | \";\"\n<exp> ::= <factor> | <exp> <binop> <exp> | <exp> \"?\" <exp> \":\" <exp>\n<factor> ::= <int> | <identifier> | <unop> <factor> | \"(\" <exp> \")\"\n<unop> ::= \"-\" | \"~\" | \"!\"\n<binop> ::= \"-\" | \"+\" | \"*\" | \"/\" | \"%\" | \"&&\" | \"||\"\n          | \"==\" | \"!=\" | \"<\" | \"<=\" | \">\" | \">=\" | \"=\"\n<identifier> ::= ? An identifier token ?\n<int> ::= ? A constant token ?\n```", "```\nint main(void) {\n    int x = 1;\n    {\n        int x = 2;\n        if (x > 1) {\n            x = 3;\n            int x = 4;\n        }\n        return x;\n    }\n    return x;\n}\n```", "```\nint main(void) {\n    int x0 = 1;\n    {\n        int x1 = 2;\n        if (x1 > 1) {\n            x1 = 3;\n            int x2 = 4;\n        }\n        return x1;\n    }\n    return x0;\n}\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">int x</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">=</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">1;\n    {</samp></samp></samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">int x</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">=</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">2;\n        if (x > 1) {\n            x</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">=</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">3;</samp></samp></samp></samp></samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">int x</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">=</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">4;\n         }</samp></samp></samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">return x;\n     }</samp>\n```", "```\n <samp class=\"SANS_Futura_Std_Book_11\"></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">   return x;\n}</samp>\n```", "```\nresolve_declaration(Declaration(name, init), variable_map):\n    if name is in variable_map:\n        fail(\"Duplicate variable declaration!\")\n `--snip--`\n```", "```\nresolve_declaration(Declaration(name, init), variable_map):\n    if name is in variable_map **and variable_map.get(name).from_current_block:**\n        fail(\"Duplicate variable declaration!\")\n    unique_name = make_temporary()\n    variable_map.add(name, **MapEntry(new_name=unique_name, from_current_block=True)**)\n    if init is not null:\n        init = resolve_exp(init, variable_map)\n    return Declaration(unique_name, init)\n```", "```\nresolve_statement(statement, variable_map):\n    match statement with\n    | Return(e) -> return Return(resolve_exp(e, variable_map))\n    | Expression(e) -> return Expression(resolve_exp(e, variable_map))\n **| Compound(block) ->**\n **new_variable_map = copy_variable_map(variable_map)**\n **return Compound(resolve_block(block, new_variable_map))**\n    | `--snip--`\n```"]