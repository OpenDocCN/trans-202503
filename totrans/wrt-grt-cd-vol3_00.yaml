- en: '**INTRODUCTION**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**介绍**'
- en: '![Image](Images/com.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/com.jpg)'
- en: In the late 1960s, the need for computer software was outpacing the capability
    of technical schools, colleges, and universities to produce trained computer professionals
    to create that software—a phenomenon that became known as the *software crisis*.
    Increasing the output of colleges and universities wasn’t a practical approach;
    too few qualified students were enrolling in computer science programs to satisfy
    the demand. At the time, researchers determined that a better solution was to
    increase the productivity of existing computer programmers. Noticing similarities
    between software development and other engineering activities, these researchers
    concluded that the procedures and policies that worked for other engineering disciplines
    could solve the software crisis. Thus, *software engineering* was born.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在20世纪60年代末，计算机软件的需求远远超过了技术学校、大学和高等院校培养训练有素的计算机专业人员来开发这些软件的能力——这一现象被称为*软件危机*。提高大学和院校的输出并不是一种切实可行的方法；当时，计算机科学专业的合格学生人数太少，无法满足需求。研究人员当时认为，更好的解决方案是提高现有程序员的生产力。注意到软件开发和其他工程活动之间的相似性，这些研究人员得出结论，其他工程学科行之有效的程序和政策可以解决软件危机。于是，*软件工程*应运而生。
- en: Until the field of software engineering blossomed, software development was
    a mysterious craft practiced by gurus with varying abilities and accomplishments.
    Up to that point, a software project’s success depended entirely upon the abilities
    of one or two key programmers rather than those of the entire team. Software engineering
    sought to balance the skills of software teams to make them more productive and
    less reliant upon those one or two highly talented individuals.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件工程领域繁荣之前，软件开发是一项神秘的技艺，由能力和成就各异的高手们所实践。在那时，软件项目的成功完全依赖于一两位关键程序员的能力，而不是整个团队的能力。软件工程旨在平衡软件团队的技能，使它们更具生产力，减少对那一两位高才的依赖。
- en: To a large extent, the practice of software engineering has been successful.
    Large projects built by teams of programmers could never have been completed with
    the ad hoc organizational methods of the past. But at the same time, important
    qualities were lost. Software engineering encourages team productivity at the
    expense of individual creativity, skill, and growth. Although software engineering
    techniques have the potential to turn poor programmers into good programmers,
    they can also restrict great programmers from doing their best work. The world
    has too few great programmers. The last thing we want to do is to discourage a
    programmer from reaching their potential; however, this is what the software engineering
    regimen often does.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在很大程度上，软件工程的实践是成功的。由程序员团队构建的大型项目，过去使用临时组织方法是无法完成的。但与此同时，重要的品质却丧失了。软件工程鼓励团队的生产力，却以牺牲个人的创造力、技能和成长为代价。尽管软件工程技术有可能将差劲的程序员培养成优秀的程序员，但它们也可能限制杰出程序员发挥最佳能力。世界上优秀程序员太少了。我们最不希望做的就是让程序员失去发挥潜力的动力；然而，这正是软件工程模式常常做的事情。
- en: The *Write Great Code* series is an effort to restore some of that lost individual
    creativity, skill, and growth. It covers what I call *personal software engineering*,
    or how a programmer can improve the quality of their code. Specifically, it describes
    how you can produce great code—code that’s easy to maintain, enhance, test and
    debug, document, deploy, and even retire—from mediocre code. Great code is devoid
    of the kludges and hacks that are often the result of unreasonable pressure or
    ill planning on the engineer’s or management’s part. Great code is code you can
    be proud of.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*《写出优秀的代码》*系列的目标是恢复一些丧失的个人创造力、技能和成长。它讲述了我所称之为*个人软件工程*的内容，即程序员如何提高代码质量。具体来说，它描述了如何从平庸的代码中编写出优秀的代码——一种易于维护、增强、测试、调试、文档化、部署，甚至退休的代码。优秀的代码没有那些往往是工程师或管理层由于不合理压力或糟糕计划所产生的杂乱和临时解决办法。优秀的代码是你可以为之自豪的代码。'
- en: 'As I completed *Write Great Code, Volume 2:* *Thinking Low-Level, Writing High-Level*
    *(WGC2)*, I had intended to incorporate more information in this book. In the
    last chapter of *WGC2*, I wrote the following:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当我完成了*《写出优秀的代码，第2卷：低层次思维，高层次写作》*（*WGC2*）时，我原本打算在这本书中加入更多的内容。在*WGC2*的最后一章中，我写下了以下内容：
- en: '[*Write Great Code, Volume 3: Engineering Software*] begins discussing the
    *personal software engineering* aspects of programming. The software engineering
    field focuses primarily on the management of large software systems. Personal
    software engineering, on the other hand, covers those topics germane to writing
    great code at a personal level—craftsmanship, art, and pride in workmanship. So,
    in *Engineering Software*, we’ll consider those aspects through discussions on
    software development metaphors, software developer metaphors, and *system documentation*
    [emphasis added], among other topics.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[*写出优秀代码，第三卷：工程软件*]开始讨论编程的*个人软件工程*方面。软件工程领域主要关注大型软件系统的管理。而个人软件工程则涵盖了那些与个人层面上写出优秀代码相关的话题——工艺、艺术和对工艺的自豪感。因此，在*工程软件*中，我们将通过讨论软件开发隐喻、软件开发者隐喻以及*系统文档*
    [重点强调]等话题，来考虑这些方面。'
- en: System documentation (including requirements, test procedures, design documents,
    and the like) is a huge part of software engineering. Therefore, a book on the
    subject must provide, at the very least, an overview of these subjects. Well,
    about seven chapters into this book I realized there wasn’t enough room to cover
    all this material in a single book. In the end, I wound up splitting this volume,
    *Engineering Software*, into four volumes. The first of these four volumes is
    this one, which is the third volume of the *Write Great Code* series. It concentrates
    on software development models and system documentation. The fourth volume of
    the series will teach software design; the fifth volume will develop the great-coding
    theme further; and a sixth volume will deal with testing.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 系统文档（包括需求、测试程序、设计文档等）是软件工程的一个重要部分。因此，关于这一主题的书籍至少必须提供这些内容的概述。好吧，在本书写到第七章时，我意识到单一的一本书无法涵盖所有这些内容。最终，我将本卷《工程软件》拆分成四卷。这四卷中的第一卷就是本书，它是《*写出优秀代码*》系列的第三卷。它集中讨论软件开发模型和系统文档。系列的第四卷将讲解软件设计；第五卷将进一步发展优秀编码的主题；第六卷将涉及测试。
- en: As I write this, it’s been 10 years since I completed Volume 2 of the *Write
    Great Code* series. It was time to complete Volume 3, even if it meant splitting
    the original information across two or more volumes. If you’ve read my earlier
    books, you know I like to cover subjects in depth; I’m not interested in writing
    books that barely touch on the subject matter. Thus, I was faced with either splitting
    the work across multiple volumes and getting them out the door or producing a
    2,000-page tome that, as history has oft demonstrated, might never be completed.
    I apologize to those who expected this book to cover additional subjects. Fear
    not—the information will arrive in future volumes. You’re just getting the first
    part of it sooner in this book.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当我写这篇文章时，距离我完成《*写出优秀代码*》系列第二卷已经过去了10年。是时候完成第三卷了，即使这意味着将原本的信息分成两卷或更多卷。如果你读过我之前的书，你会知道我喜欢深入探讨课题；我不感兴趣写那些仅仅触及主题的书。因此，我面临着将这项工作分成多个卷并尽快发布，或者制作一本2000页的巨著，而历史常常证明，这本书可能永远无法完成。我为那些期待本书涵盖更多内容的人道歉。别担心——这些信息会在未来的卷中出现。你只是提前在本书中获得了第一部分内容。
- en: '**Assumptions and Prerequisites**'
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**假设与前提条件**'
- en: In order to concentrate on engineering software, this book has to make certain
    assumptions. Although I’ve tried to keep those to a minimum, you’ll benefit most
    from this book if your personal skill set fulfills some prerequisites.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了专注于工程软件，本书必须做出一些假设。虽然我尽力将这些假设保持在最低限度，但如果你的个人技能集符合某些前提条件，你将从本书中受益最多。
- en: You should be reasonably competent in at least one imperative (procedural) or
    object-oriented programming language. This includes C and C++, C#, Swift, Pascal,
    BASIC, Java, and assembly. You should know how to take a small problem description
    and work through the design and implementation of its software solution. A typical
    semester or quarter course at a college or university or several months’ experience
    on your own should be sufficient for using this book.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该至少对一种命令式（过程式）或面向对象的编程语言有相当的熟练度。这包括C和C++、C#、Swift、Pascal、BASIC、Java以及汇编语言。你应该知道如何根据一个小问题的描述，进行设计和实现其软件解决方案。一门典型的大学课程或几个月的自学经验应该足以让你使用本书。
- en: 'You should also have a basic grasp of machine organization and data representation.
    For example, you should understand hexadecimal and binary numbering systems, and
    how computers represent various high-level data types, such as signed integers,
    characters, and strings in memory. *Write Great Code, Volume* *1: Understanding
    the Machine (WGC1)* fully covers machine organization if you feel your knowledge
    in this area is weak. Although I might refer to material in *WGC1*, you should
    have no problem reading this book independently of that one.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '你还应该具备计算机组织和数据表示的基本知识。例如，你应该理解十六进制和二进制数字系统，以及计算机如何在内存中表示各种高级数据类型，如有符号整数、字符和字符串。如果你在这方面的知识较弱，*Write
    Great Code, Volume* *1: Understanding the Machine (WGC1)* 完整地覆盖了计算机组织。尽管我可能会参考*WGC1*中的内容，但你应该能够独立阅读本书，而不依赖于那本书。'
- en: '**What Is Great Code?**'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**什么是优秀的代码？**'
- en: Great code is software that follows a set of rules that guide the decisions
    a programmer makes when implementing an algorithm as source code. Great code is
    written with other programmers in mind—with documentation that allows others to
    read, comprehend, and maintain the software. I call this the *Golden Rule of Software
    Development*, and it holds the key to software engineering.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 优秀的代码是遵循一套规则的软件，这些规则指导程序员在将算法实现为源代码时所做的决策。优秀的代码是以其他程序员为考虑对象编写的——其文档使其他人能够阅读、理解并维护该软件。我称之为*软件开发黄金法则*，它是软件工程的关键。
- en: 'Taking things down a level, great code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 降低一个层次，优秀的代码：
- en: Is fast and uses the CPU, system resources, and memory efficiently
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高效且使用CPU、系统资源和内存
- en: Is well documented and easy to read, maintain, and enhance
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档完善，易于阅读、维护和扩展
- en: Follows a consistent set of style guidelines
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循一致的风格指南
- en: Uses an explicit design that follows established software engineering conventions
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用明确的设计，遵循已建立的软件工程惯例
- en: Is well tested and robust
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经过充分测试且健壮
- en: Is produced on time and under budget
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按时完成并且预算内
- en: While Volumes 1 and 2 of the *Write Great Code* series deal with many of the
    efficiency aspects associated with great code, the remaining books in the series,
    starting with this one, focus specifically on creating code that meets the preceding
    criteria.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然*Write Great Code*系列的第1卷和第2卷涉及许多与优秀代码相关的效率方面，系列中的其他书籍，从这一卷开始，专注于创建符合前述标准的代码。
- en: '**Programmer Classifications**'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**程序员分类**'
- en: In order to understand what makes a programmer great, let’s first consider the
    differences between amateurs, programmers at various levels, and software engineers.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解是什么让一个程序员变得伟大，让我们首先考虑业余程序员、各级程序员和软件工程师之间的差异。
- en: '***Amateurs***'
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***业余程序员***'
- en: The amateur programmer is self-taught, with only a small amount of experience,
    and as such is the antithesis of the great programmer. In the early days of computers,
    these programmers were known as *hackers*. That term has morphed into several
    different meanings today that don’t necessarily describe a programmer without
    sufficient education or experience to do professional-level software engineering.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 业余程序员是自学成才，经验有限，因此是伟大程序员的对立面。在计算机的早期，这些程序员被称为*黑客*。这个术语今天已经演变成几种不同的含义，不一定指没有足够教育或经验做专业软件工程的程序员。
- en: The problem with code written by amateur programmers is that typically they
    write it for themselves or for friends; thus, it doesn’t usually adhere to contemporary
    standards for software engineering projects. However, amateur programmers can
    improve their status with a little education (which the *WGC* series can help
    provide).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 业余程序员编写的代码问题在于，他们通常是为自己或朋友编写代码；因此，这些代码通常不符合当代软件工程项目的标准。然而，业余程序员可以通过一些教育提升自己的水平（*WGC*系列可以提供帮助）。
- en: '***Programmers***'
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***程序员***'
- en: Computer programmers have a wide range of experiences and responsibilities,
    which is often reflected in titles like junior programmer, coder, Programmer I
    and II, analyst/system analyst, and system architect. Here we explore some of
    these roles and how they differ.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机程序员拥有广泛的经验和职责，这通常反映在职称中，如初级程序员、编码员、程序员I和II、分析师/系统分析师和系统架构师。我们在这里探讨其中一些角色及其差异。
- en: '**Interns**'
  id: totrans-31
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**实习生**'
- en: Typically, interns are students working part-time who are assigned so-called
    *grunt* *work*—tasks such as running a set of canned test procedures on the code
    or documenting the software.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，实习生是兼职的学生，他们被分配所谓的*苦力活*——如运行一套固定的测试程序或编写软件文档。
- en: '**Junior Programmer**'
  id: totrans-33
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**初级程序员**'
- en: Recent graduates typically fill the junior programmer position. Often, they
    work on testing or maintenance tasks. Rarely do they get the opportunity to work
    on new projects; instead, most of their programming time is spent reworking existing
    statements or dealing with legacy code.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 应届毕业生通常担任初级程序员职务。通常，他们从事测试或维护任务。很少有机会参与新项目；相反，他们大部分编程时间都用于重写现有代码或处理遗留代码。
- en: '**Coder**'
  id: totrans-35
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**编码员**'
- en: A programmer advances to the coder level when they gain sufficient experience
    for management to trust them with developing new code for projects. A more senior
    programmer assigns (less complex) subcomponents of a larger project to the coder
    to help complete the project faster.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员在获得足够经验后晋升为编码员，管理层也开始信任他们进行项目的新代码开发。一名更资深的程序员将（较不复杂的）子组件分配给编码员，以帮助加快项目的完成速度。
- en: '**Programmer I and II**'
  id: totrans-37
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**程序员I和II**'
- en: As a programmer gains more experience and is capable of handling complex implementation
    tasks on their own, they progress from coder to Programmer I and then Programmer
    II. A system analyst can often provide a Programmer I or II with a general idea
    of what they want, and the programmer is able to fill in the missing details and
    produce an application in line with the system analyst’s expectations.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 随着程序员积累更多经验，并能独立处理复杂的实现任务，他们从编码员晋升为程序员I，再到程序员II。系统分析师通常可以为程序员I或II提供一个大致的需求，程序员能够填补细节并生成符合系统分析师预期的应用程序。
- en: '**System Analyst**'
  id: totrans-39
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**系统分析师**'
- en: A system analyst studies a problem and determines the best way to implement
    a solution. Often, the system analyst chooses the major algorithms to use and
    creates the final application’s organization.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 系统分析师研究问题并确定最佳的解决方案实现方式。通常，系统分析师选择要使用的主要算法并创建最终应用的组织结构。
- en: '**System Architect**'
  id: totrans-41
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**系统架构师**'
- en: The system architect chooses how the components designed by a system analyst
    in a large-scale system will work together. Often, the system architect specifies
    processes, hardware, and other non-software-related items as part of the total
    solution.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 系统架构师决定系统分析师在大型系统中设计的各个组件如何协同工作。通常，系统架构师会指定流程、硬件及其他与软件无关的部分作为整体解决方案的一部分。
- en: '**The Complete Programmer**'
  id: totrans-43
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**完整的程序员**'
- en: A *complete* *programmer* is the amalgamation of all these subdivisions. That
    is, a complete programmer is capable of studying a problem, designing a solution,
    implementing that solution in a programming language, and testing the result.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一名*完整的* *程序员*是这些子领域的融合。也就是说，一名完整的程序员能够研究问题、设计解决方案、使用编程语言实现解决方案并测试结果。
- en: THE PROBLEM WITH PROGRAMMER CLASSIFICATION
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员分类问题
- en: In reality, most of these programmer categories are artificial; they exist simply
    to justify a different pay scale for beginning programmers and experienced programmers.
    For example, a system analyst designs the algorithms and overall data flow for
    a particular application, then hands off the design to a coder, who implements
    that design in a particular programming language. We normally associate both tasks
    with *programming*, but junior members of the programming staff don’t have the
    proper experience to design large systems from scratch, although they’re perfectly
    capable of taking a design and converting it into an appropriate programming language.
    The system analysts and architects usually have the experience and ability to
    handle the entire project. However, management generally finds it more cost-effective
    to use them on those portions of the project that require their experience rather
    than having them do the low-level coding that a recent graduate could do (at lower
    cost).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，大多数程序员分类都是人为设定的；它们的存在仅仅是为了为初级程序员和有经验的程序员设定不同的薪酬标准。例如，系统分析师设计特定应用的算法和整体数据流，然后将设计交给编码员，由他们用特定的编程语言实现。我们通常将这两个任务与*编程*联系在一起，但初级程序员没有足够的经验从零开始设计大型系统，尽管他们完全有能力将设计转化为适当的编程语言。系统分析师和架构师通常拥有处理整个项目的经验和能力。然而，管理层通常认为让他们处理那些需要经验的项目部分比让他们做低级别的编码更具成本效益，而后者是应届毕业生也能做的（且成本更低）。
- en: '***Software Engineers***'
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***软件工程师***'
- en: In the engineering fields, engineers approach a specified problem by following
    a prescribed set of rules, building a custom solution from a combination of predetermined
    solutions. This approach allows even less talented engineers to produce working
    solutions without having to develop a system from scratch. Software engineering
    emerged as an effort to maximize the value of the entire programming team by applying
    traditional engineering concepts to software development. For the most part, the
    software engineering revolution has been successful. Software engineers with the
    proper training and leadership can produce high-quality code in less time and
    for less money than was possible before.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在工程领域，工程师通过遵循一套规定的规则来处理特定问题，利用预定解决方案的组合来构建定制的解决方案。这种方法使得即使是技术不太出众的工程师也能在不从零开始开发系统的情况下，产出有效的解决方案。软件工程作为一种尝试，通过将传统工程概念应用于软件开发，最大化整个编程团队的价值而产生。总体来看，软件工程革命是成功的。拥有正确培训和领导的工程师可以在比以往更短的时间和更少的资金投入下，编写出高质量的代码。
- en: Pure software engineering discourages divergent thinking, because it risks wasting
    time and leading the engineer down an unsuccessful path (resulting in higher development
    costs and longer development times). In general, software engineering is more
    concerned with developing an application *on time and under budget* than with
    writing code the *best possible way*. But if software engineering practitioners
    never try anything new, they often miss opportunities to produce a great design,
    never develop any new practices to incorporate into their rule book, and never
    become great programmers.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 纯粹的软件工程不鼓励发散性思维，因为它可能会浪费时间，并使工程师走上失败的道路（导致更高的开发成本和更长的开发时间）。一般来说，软件工程更关注按时和按预算开发应用程序，而不是以*最佳方式*编写代码。但是，如果软件工程师从不尝试新事物，他们通常会错失机会，无法产生优秀的设计，永远不会开发出新的实践，也无法成为伟大的程序员。
- en: '***Great Programmers***'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***伟大的程序员***'
- en: 'Great programmers are cognizant of the budgetary issues, but they also realize
    that exploring new ideas and methodologies is important to advance the field.
    They know when it’s essential to follow the rules but also when it’s okay to break
    (or at least bend) them. But most important of all, great programmers use their
    skill sets to their fullest, achieving results that wouldn’t be possible by simply
    thinking inside the box. Hackers are born, software engineers are made, and great
    programmers are a bit of both. They have three main characteristics: a genuine
    love for the work, ongoing education and training, and the ability to think outside
    the box when solving problems.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 伟大的程序员意识到预算问题，但他们也明白，探索新想法和方法对于推动这个领域的发展非常重要。他们知道何时必须遵循规则，但也知道何时可以打破（或至少弯曲）规则。但最重要的是，伟大的程序员充分利用自己的技能集，取得仅凭思维局限无法实现的成果。黑客天生如此，软件工程师是后天培养的，而伟大的程序员则是两者的结合体。他们有三个主要特点：对工作有真正的热爱、持续的教育和培训，以及在解决问题时能够跳出框架思考的能力。
- en: '**Loving What You Do, Doing What You Love**'
  id: totrans-52
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**热爱你所做的，做你所爱的**'
- en: People tend to excel at tasks they love and do poorly on activities they dislike.
    The bottom line is that if you hate computer programming, you won’t make a very
    good computer programmer. If you weren’t born with the desire to solve problems
    and overcome challenges, no amount of education and training will change your
    disposition. Thus, the most important prerequisite to becoming a great programmer
    is that you really love to write computer programs.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 人们往往在自己喜欢的任务上表现出色，而在自己不喜欢的活动上表现不佳。底线是，如果你讨厌计算机编程，你将不会成为一个很好的程序员。如果你天生没有解决问题和克服挑战的欲望，再多的教育和培训也无法改变你的性格。因此，成为一名伟大的程序员最重要的前提是你真正热爱编写计算机程序。
- en: '**Prioritizing Education and Training**'
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**优先考虑教育和培训**'
- en: Great programmers enjoy the types of tasks the field demands, but they also
    need something else—formal education and training. We’ll discuss education and
    training in greater depth in later chapters, but for now it suffices to say that
    great programmers are well educated (perhaps possessing a postsecondary degree)
    and continue their education throughout their careers.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 伟大的程序员喜欢这个领域所要求的任务，但他们还需要其他东西——正规教育和培训。我们将在后续章节中更深入地讨论教育和培训，但现在可以说，伟大的程序员受过良好的教育（或许拥有大专以上学位），并且在整个职业生涯中持续接受教育。
- en: '**Thinking Outside the Box**'
  id: totrans-56
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**跳出框架思考**'
- en: As mentioned, following a predetermined set of rules to produce code is the
    typical expectation of a software engineer. However, as you’ll see in [Chapter
    1](ch01.xhtml), to become a great programmer (a “Grand Master Programmer”), you
    need to be willing and able to devise new programming techniques that come only
    from divergent thinking rather than blindly following rules. Great programmers
    have an innate desire to push boundaries and explore new solutions to the problems
    they face.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，按照预定的规则生成代码是软件工程师的典型期望。然而，正如你将在[第1章](ch01.xhtml)中看到的，要成为一名伟大的程序员（“大宗师程序员”），你需要愿意并能够设计出新的编程技巧，这些技巧来源于发散性思维，而不是盲目遵循规则。伟大的程序员天生有推动边界并探索新解决方案的渴望。
- en: '**So You Want to Be a Great Programmer**'
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**所以你想成为一名伟大的程序员**'
- en: 'To summarize, if you want to be a truly great programmer and inspire awe from
    your peers, you’ll need the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，如果你想成为一名真正伟大的程序员并赢得同行的敬佩，你需要具备以下几点：
- en: A love of computer programming and problem solving
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对计算机编程和问题解决的热爱
- en: A wide range of computer science knowledge based on a college or university
    degree^([1](ch19_footnote.xhtml#ch00fn1))
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于大学或高等院校学位的广泛计算机科学知识^([1](ch19_footnote.xhtml#ch00fn1))
- en: A lifelong commitment to education and training
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对教育和培训的终身承诺
- en: The ability and willingness to think outside the box when exploring solutions
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在探索解决方案时，具备跳出框框思考的能力和意愿
- en: The personal desire and motivation to excel at a task and always produce the
    best possible work
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 个人对卓越表现的渴望和动力，以及始终力求做到最好
- en: With these attributes, the only thing keeping you from becoming a great programmer
    is more knowledge. That’s where this book comes in.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 具备这些特质，阻碍你成为一名伟大程序员的唯一因素就是更多的知识。这就是本书的作用所在。
- en: '**A Final Note on Ethics and Character**'
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**关于伦理与品格的最终说明**'
- en: The software engineer’s job is to create the best possible product given conflicting
    requirements by making appropriate compromises in a system’s design. During this
    process, the engineer must prioritize requirements and choose the best solution
    to the problem given the project’s constraints. Ethics and personal character
    often impact decisions individuals make while working on complex projects, particularly
    stressful ones. Being intellectually dishonest (for example, fudging project estimates
    or claiming a piece of software works without fully testing it), pirating software
    development tools (or other software), introducing undocumented features in software
    (such as backdoors) without management approval, or adopting an elitist attitude
    (thinking you’re better than other team members) are all cases of software engineering
    ethical lapses. Exercising sound moral judgment and practicing good ethics will
    make you both a better person and a better programmer.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程师的工作是根据冲突的需求，通过在系统设计中做出适当的妥协来创造最佳的产品。在这个过程中，工程师必须优先考虑需求，并在项目的限制下选择最佳解决方案。伦理和个人品格常常会影响个体在处理复杂项目时，尤其是压力较大的项目时做出的决策。做出不诚实的智力决策（例如，虚报项目估算或声称某个软件在未经充分测试的情况下就可以工作），盗版软件开发工具（或其他软件），在软件中引入未经文档化的功能（如后门）而未获得管理层批准，或采纳精英主义态度（认为自己比其他团队成员更优秀）都是软件工程伦理失范的例子。践行正确的道德判断和良好的伦理将使你成为更好的人，也会让你成为更优秀的程序员。
- en: '**For More Information**'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**更多信息**'
- en: 'Barger, Robert N. *Computer Ethics: A Case-Based Approach*. Cambridge, UK:
    Cambridge University Press, 2008.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Barger, Robert N. *《计算机伦理学：基于案例的方法》*。剑桥，英国：剑桥大学出版社，2008年。
- en: 'Floridi, Luciano, ed. *The Cambridge Handbook of Information and Computer Ethics*.
    Cambridge, UK: Cambridge University Press, 2006.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Floridi, Luciano, ed. *《剑桥信息与计算机伦理学手册》*。剑桥，英国：剑桥大学出版社，2006年。
- en: 'Forester, Tom, and Perry Morrison. *Computer Ethics: Cautionary Tales and Ethical
    Dilemmas in Computing*. 2nd ed. Cambridge, MA: MIT Press, 1993.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Forester, Tom, 和 Perry Morrison. *《计算机伦理：计算中的警示故事与伦理困境》*。第二版。剑桥，马萨诸塞州：麻省理工学院出版社，1993年。
- en: 'Parker, Donn B. “Rules of Ethics in Information Processing.” *Communications
    of the ACM* 11, no. 3 (1968): 198–201\. *[https://dl.acm.org/doi/10.1145/362929.362987](https://dl.acm.org/doi/10.1145/362929.362987)*.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Parker, Donn B. “信息处理中的伦理规则。” *《ACM通讯》* 11，第三期（1968年）：198-201。*[https://dl.acm.org/doi/10.1145/362929.362987](https://dl.acm.org/doi/10.1145/362929.362987)*。
- en: 'Wiener, Norbert. *The Human Use of Human Beings: Cybernetics and Society*.
    Boston: Houghton Mifflin Harcourt, 1950.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Wiener, Norbert. *《人类对人类的使用：控制论与社会》*。波士顿：霍顿·米夫林·哈考特出版社，1950年。
- en: WikiWikiWeb. “Grand Master Programmer.” Last updated November 23, 2014\. *[http://c2.com/cgi/wiki?GrandMasterProgrammer/](http://c2.com/cgi/wiki?GrandMasterProgrammer/)*.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: WikiWikiWeb. “大师级程序员。”最后更新时间为2014年11月23日。*[http://c2.com/cgi/wiki?GrandMasterProgrammer/](http://c2.com/cgi/wiki?GrandMasterProgrammer/)*。
