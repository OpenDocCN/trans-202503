["```\n<?php\nnamespace Mattsmithdev;\n\nclass AudioClip\n{\n    // --- Static (per-class) members ---\n  ❶ private static int $maxClipDurationSeconds = -1;\n\n ❷ public static function getMaxClipDurationSeconds(): int\n    {\n        return self::$maxClipDurationSeconds;\n    }\n\n    // --- Object (instance) members ---\n  ❸ private string $title;\n    private int $durationSeconds = 0;\n\n  ❹ public function __construct(string $title, int $durationSeconds)\n    {\n        $this->setTitle($title);\n        $this->setDurationSeconds($durationSeconds);\n    }\n\n    public function getTitle(): string\n    {\n        return $this->title;\n    }\n\n    public function setTitle(string $title): void\n    {\n        $this->title = $title;\n    }\n\n    public function getDurationSeconds(): int\n    {\n        return $this->durationSeconds;\n    }\n\n  ❺ public function setDurationSeconds(int $durationSeconds): void\n    {\n        // Exit with no action if negative\n        if ($durationSeconds < 0) return;\n\n        $this->durationSeconds = $durationSeconds;\n\n        if ($durationSeconds > self::$maxClipDurationSeconds) {\n            self::$maxClipDurationSeconds = $durationSeconds;\n        }\n    }\n\n  ❻ public function __toString(): string\n    {\n        return \"(AudioClip) $this->title ($this->durationSeconds seconds) \\n\";\n    }\n}\n```", "```\n<?php\nrequire_once __DIR__ . '/../vendor/autoload.php';\n\nuse Mattsmithdev\\AudioClip;\n\nprint '- Max AudioClip duration so far = '\n    . AudioClip::getMaxClipDurationSeconds() . PHP_EOL;\n\n$clip1 = new AudioClip('hello world', 2);\nprint $clip1;\n\nprint '- Max AudioClip duration so far = '\n    . AudioClip::getMaxClipDurationSeconds() . PHP_EOL;\n\n$clip2 = new AudioClip('bad duration', -10);\nprint $clip2;\n\nprint '- Max AudioClip duration so far = '\n    . AudioClip::getMaxClipDurationSeconds() . PHP_EOL;\n\n$clip3 = new AudioClip('My Way', 275);\nprint $clip3;\n\nprint '- Max AudioClip duration so far = '\n    . AudioClip::getMaxClipDurationSeconds() . PHP_EOL;\n```", "```\n- Max AudioClip duration so far = -1\n(AudioClip) hello world (2 seconds)\n- Max AudioClip duration so far = 2\n(AudioClip) bad duration (0 seconds)\n- Max AudioClip duration so far = 2\n(AudioClip) My Way (275 seconds)\n- Max AudioClip duration so far = 275\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass AudioClip\n{\n    const NUM_CHANNELS = 2;\n\n    const BITS_PER_SAMPLE = 16;\n\n    const SAMPLES_PER_SECOND = 44100;\n\n    const BITS_PER_SECOND = self::NUM_CHANNELS\n        * self::BITS_PER_SAMPLE * self::SAMPLES_PER_SECOND;\n\n--snip--\n\n    public function getSizeBits(): int\n    {\n        return self::BITS_PER_SECOND * $this->durationSeconds;\n    }\n\n  ❶ public function __toString(): string\n {\n        $numBitsFormatted = number_format($this->getSizeBits());\n        return \"(AudioClip) $this->title \"\n            . \"($this->durationSeconds seconds), $numBitsFormatted bits \\n\";\n }\n}\n```", "```\n- Max AudioClip duration so far = -1\n(AudioClip) hello world (2 seconds), 2,822,400 bits\n- Max AudioClip duration so far = 2\n(AudioClip) bad duration (0 seconds), 0 bits\n- Max AudioClip duration so far = 2\n(AudioClip) My Way (275 seconds), 388,080,000 bits\n- Max AudioClip duration so far = 275\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nabstract class SizeUtilities\n{\n    const BITS_PER_BYTE = 8;\n const BYTES_PER_KILOBTYE = 1024;\n    const BITS_PER_MEGABTYE =\n        self::BITS_PER_BYTE * self::BYTES_PER_KILOBTYE * 1024;\n\n    public static function bitsToMegaBytes(int $bits): float\n    {\n        return $bits / self::BITS_PER_MEGABTYE;\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass AudioClip\n{\n--snip--\n\n public function getSizeBits(): int\n {\n return self::BITS_PER_SECOND * $this->durationSeconds;\n }\n\n    public function getSizeMegaBytes(): float\n    {\n      ❶ return SizeUtilities::bitsToMegaBytes($this->getSizeBits());\n    }\n\n public function __toString(): string 2\n {\n        $numMegaBytesFormatted = number_format($this->getSizeMegaBytes(), 2);\n        return \"(AudioClip) $this->title \"\n            . \"($this->durationSeconds seconds), $numMegaBytesFormatted MB \\n\";\n }\n}\n```", "```\n- Max AudioClip duration so far = -1\n(AudioClip) hello world (2 seconds), 0.34 MB\n- Max AudioClip duration so far = 2\n(AudioClip) bad duration (0 seconds), 0 MB\n- Max AudioClip duration so far = 2\n(AudioClip) My Way (275 seconds), 46.26 MB\n- Max AudioClip duration so far = 275\n```", "```\nLogger::debug('my message');\n```", "```\n$ **composer require monolog/monolog**\n```", "```\n<?php\nnamespace Mattsmithdev;\n\n❶ use Monolog\\Logger as MonologLogger;\nuse Monolog\\Handler\\StreamHandler;\n\nabstract class Logger\n{\n    const PATH_TO_LOG_FILE = __DIR__ . '/../logs/debug.log';\n\n  ❷ public static function debug(string $message): void\n    {\n        $logger = new MonologLogger('channel1');\n        $logger->pushHandler(new StreamHandler(self::PATH_TO_LOG_FILE));\n        $logger->debug($message);\n    }\n}\n```", "```\n<?php\nrequire_once __DIR__ . '/../vendor/autoload.php';\nuse Mattsmithdev\\Application;\n$app = new Application();\n$app->run();\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass Application\n{\n    public function run(): void\n    {\n        print 'Hello, world!';\n        Logger::debug('Hello, world! printed out');\n        Logger::debug('another log message');\n    }\n}\n```", "```\nMattsmithdev\\Logger::debug('Hello, world! printed out');\n```", "```\n$ **cat debug.log**\n[2025-01-30T10:49:54.516974 + 00:00]\nchannel1.DEBUG: Hello, world! printed out [] []\n\n[2025-01-30T10:49:54.519278 + 00:00]\nchannel1.DEBUG: another log message [] []\n```", "```\n$myObject = Singleton::getInstance();\n```", "```\n<?php\nclass Singleton\n{\n    private static ?Singleton $instance = NULL;\n\n    private function __construct()\n    {\n        // -- Do the resource-expensive work here --\n    }\n\n    public static function getInstance(): Singleton\n    {\n      ❶ if (self::$instance == NULL)\n        {\n ❷ self::$instance = new Singleton();\n        }\n\n        return self::$instance;\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nuse Monolog\\Logger as MonologLogger;\nuse Monolog\\Handler\\StreamHandler;\n\n❶ class Logger extends MonologLogger\n{\n const PATH_TO_LOG_FILE = __DIR__ . '/../logs/debug.log';\n\n    private static ?Logger $instance = NULL;\n\n    private function __construct()\n    {\n        parent::__construct('channel1');\n        $this->pushHandler(new StreamHandler(self::PATH_TO_LOG_FILE));\n    }\n\n ❷ public static function getInstance(): Logger\n    {\n        if (self::$instance == NULL)\n        {\n            self::$instance = new Logger();\n        }\n\n        return self::$instance;\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass Application\n{\n public function run(): void\n {\n print 'Hello, world!';\n        Logger::getInstance()->warning('I am a warning.');\n        Logger::getInstance()->error('I am a test error!',\n            ['exception' => new \\Exception('example of exception object')]);\n }\n}\n```", "```\n$ **cat debug.log**\n[2025-01-30T14:37:32.728758 + 00:00]\nchannel1.WARNING: I am a warning. [] []\n\n[2025-01-30T14:37:32.730002 + 00:00]\nchannel1.ERROR: I am a test error! {\"exception\":\"[object]\n(Exception(code: 0): example of exception object\n    at /Users/matt/src/Application.php:13)\"} []\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nenum Suit\n{\n    case CLUBS;\n    case DIAMONDS;\n    case HEARTS;\n    case SPADES;\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass Card\n{\n  ❶ private Suit $suit;\n    private int $number;\n\n    public function getSuit(): Suit\n    {\n        return $this->suit;\n    }\n\n public function setSuit(Suit $suit): void\n    {\n        $this->suit = $suit;\n    }\n\n    public function getNumber(): int\n    {\n        return $this->number;\n    }\n\n    public function setNumber(int $number): void\n    {\n        $this->number = $number;\n    }\n\n  ❷ public function __toString(): string\n    {\n        return \"CARD: the \" . $this->number . \" of \" . $this->suit->name;\n    }\n}\n```", "```\n<?php\nrequire_once __DIR__ . '/../vendor/autoload.php';\n\nuse Mattsmithdev\\Suit;\nuse Mattsmithdev\\Card;\n\n$card1 = new Card();\n❶ $card1->setSuit(Suit::SPADES);\n$card1->setNumber(1);\n\nprint $card1;\n```", "```\n$ **php public/index.php**\nCARD: the 1 of SPADES\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nenum Suit: string\n{\n case CLUBS = '♣';\n case DIAMONDS = '♦';\n case HEARTS = '♥';\n case SPADES = '♠';\n}\n```", "```\n<?php\nrequire_once __DIR__ . '/../vendor/autoload.php';\nuse Mattsmithdev\\Suit;\n\n$cases = Suit::cases();\n$caseStrings = [];\nforeach ($cases as $case) {\n    $caseStrings[] = $case->value;\n}\nprint implode($caseStrings);\n```", "```\n$ **php public/index.php**\n♣♦♥♠\n```", "```\n(DESSERT) Eton Mess (VEGETARIAN dish)\n```"]