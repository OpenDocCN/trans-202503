- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Memory Access and Organization
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 内存访问和组织
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: Chapters 1 and 2 showed you how to declare and access simple variables in an
    assembly language program. This chapter fully explains x86-64 memory access. In
    this chapter, you will learn how to efficiently organize your variable declarations
    to speed up access to their data. You’ll also learn about the x86-64 stack and
    how to manipulate data on it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 第1章和第2章向你展示了如何在汇编语言程序中声明和访问简单的变量。本章将全面解释x86-64内存访问。在本章中，你将学习如何高效组织变量声明，以加速对数据的访问。你还将了解x86-64堆栈以及如何在堆栈上操作数据。
- en: 'This chapter discusses several important concepts, including the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了几个重要概念，包括以下内容：
- en: Memory organization
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存组织
- en: Memory allocation by program
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序的内存分配
- en: x86-64 memory addressing modes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: x86-64内存寻址模式
- en: Indirect and scaled-indexed addressing modes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 间接寻址和缩放索引寻址模式
- en: Data type coercion
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据类型强制转换
- en: The x86-64 stack
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: x86-64堆栈
- en: This chapter will teach to you make efficient use of your computer’s memory
    resources.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将教你如何高效利用计算机的内存资源。
- en: 3.1 Runtime Memory Organization
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.1 运行时内存组织
- en: 'A running program uses memory in many ways, depending on the data’s type. Here
    are some common data classifications you’ll find in an assembly language program:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正在运行的程序根据数据类型以多种方式使用内存。以下是你在汇编语言程序中可能遇到的一些常见数据分类：
- en: '**Code**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码**'
- en: Memory values that encode machine instructions.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编码机器指令的内存值。
- en: '**Uninitialized static data**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**未初始化的静态数据**'
- en: An area in memory that the program sets aside for uninitialized variables that
    exist the whole time the program runs; Windows will initialize this storage area
    to 0s when it loads the program into memory.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 程序为未初始化的变量分配的一块内存区域，这些变量在程序运行的整个过程中都存在；Windows在将程序加载到内存时会将该存储区域初始化为0。
- en: '**Initialized static data**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**初始化静态数据**'
- en: A section of memory that also exists the whole time the program runs. However,
    Windows loads values for all the variables appearing in this section from the
    program’s executable file so they have an initial value when the program first
    begins execution.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一块内存区域，在程序运行的整个过程中始终存在。然而，Windows从程序的可执行文件中加载该区域中所有变量的值，因此当程序首次开始执行时，它们具有初始值。
- en: '**Read-only data**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**只读数据**'
- en: Similar to initialized static data insofar as Windows loads initial data for
    this section of memory from the executable file. However, this section of memory
    is marked *read-only* to prevent inadvertent modification of the data. Programs
    typically store constants and other unchanging data in this section of memory
    (by the way, note that the code section is also marked read-only by the operating
    system).
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似于初始化静态数据，Windows从可执行文件中加载该内存区域的初始数据。然而，这一内存区域被标记为*只读*，以防止数据被不小心修改。程序通常将常量和其他不变的数据存储在该内存区域（顺便提一下，操作系统也将代码区标记为只读）。
- en: '**Heap**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**堆**'
- en: This special section of memory is designated to hold dynamically allocated storage.
    Functions such as C’s `malloc()` and `free()` are responsible for allocating and
    deallocating storage in the heap area. “Pointer Variables and Dynamic Memory Allocation”
    in Chapter 4 discusses dynamic storage allocation in greater detail.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内存的这一特殊区域被指定为存储动态分配的存储空间。像C语言中的`malloc()`和`free()`这样的函数负责在堆区分配和释放存储空间。第4章中的“指针变量和动态内存分配”将更详细地讨论动态存储分配。
- en: '**Stack**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**堆栈**'
- en: In this special section in memory, the program maintains local variables for
    procedures and functions, program state information, and other transient data.
    See “The Stack Segment and the push and pop Instructions” on page 134 for more
    information about the stack section.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在内存的这一特殊区域，程序维护着过程和函数的局部变量、程序状态信息以及其他临时数据。有关堆栈区的更多信息，请参见第134页的“堆栈段及push和pop指令”。
- en: These are the typical sections you will find in common programs (assembly language
    or otherwise). Smaller programs won’t use all of these sections (code, stack,
    and data sections are a good minimum number). Complex programs may create additional
    sections in memory for their own purposes. Some programs may combine several of
    these sections together. For example, many programs will combine the code and
    read-only sections into the same section in memory (as the data in both sections
    gets marked as read-only). Some programs combine the uninitialized and initialized
    data sections together (*initializing* the uninitialized variables to 0). Combining
    sections is generally handled by the linker program. See the Microsoft linker
    documentation for more details on combining sections.^([1](#c03-footnote-1))
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Windows tends to put different types of data into different sections (or *segments*)
    of memory. Although it is possible to reconfigure memory as you choose by running
    the linker and specifying various parameters, by default Windows loads a MASM
    program into memory by using an organization similar to that in [Figure 3-1](#figure3-1).^([2](#c03-footnote-2))
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '![f03001](image_fi/501089c03/f03001.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3-1: MASM typical runtime memory organization'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows reserves the lowest memory addresses. Generally, your application cannot
    access data (or execute instructions) at these low addresses. One reason the operating
    system reserves this space is to help trap NULL pointer references: if you attempt
    to access memory location 0 (NULL), the operating system will generate a *general
    protection fault* (also known as a *segmentation fault*), meaning you’ve accessed
    a memory location that doesn’t contain valid data.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: The remaining six areas in the memory map hold different types of data associated
    with your program. These sections of memory include the stack section, the heap
    section, the `.code` section, the `.data` (static) section, the `.const` section,
    and the `.data?` (storage) section. Each corresponds to a type of data you can
    create in your MASM programs. The `.code`, `.data`, `.const`, and `.data?` sections
    are described next in detail.^([3](#c03-footnote-3))
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.1 The .code Section
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `.code` section contains the machine instructions that appear in a MASM
    program. MASM translates each machine instruction you write into a sequence of
    one or more byte values. The CPU interprets these byte values as machine instructions
    during program execution.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: By default, when MASM links your program, it tells the system that your program
    can execute instructions and read data from the code segment but cannot write
    data to the code segment. The operating system will generate a general protection
    fault if you attempt to store any data into the code segment.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.2 The .data Section
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `.data` section is where you will typically put your variables. In addition
    to declaring static variables, you can also embed lists of data into the `.data`
    declaration section. You use the same technique to embed data into your `.data`
    section that you use to embed data into the `.code` section: you use the `byte`,
    `word`, `dword`, `qword`, and so on, directives. Consider the following example:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`.data`部分通常是放置变量的地方。除了声明静态变量外，你还可以将数据列表嵌入到`.data`声明部分。你在`.data`部分嵌入数据的方式与在`.code`部分嵌入数据的方式相同：你使用`byte`、`word`、`dword`、`qword`等指令。考虑以下示例：'
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Values that MASM places in the `.data` memory segment by using these directives
    are written to the segment after the preceding variables. For example, the byte
    values `1`, `2`, and `3` are emitted to the `.data` section after `b`’s `0` byte.
    Because there aren’t any labels associated with these values, you do not have
    direct access to them in your program. You can use the indexed addressing modes
    to access these extra values.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: MASM使用这些指令将数据放入`.data`内存段时，会在前面声明的变量后写入数据。例如，字节值`1`、`2`和`3`会在`b`的`0`字节后写入`.data`部分。由于这些值没有与标签关联，你无法在程序中直接访问它们。你可以使用索引寻址模式来访问这些额外的值。
- en: In the preceding examples, note that the `c` and `bn` variables do not have
    an (explicit) initial value. However, if you don’t provide an initial value, MASM
    will initialize the variables in the `.data` section to 0, so MASM assigns the
    NULL character (ASCII code 0) to `c` as its initial value. Likewise, MASM assigns
    false as the initial value for `bn` (assuming false is defined as `0`). Variable
    declarations in the `.data` section always consume memory, even if you haven’t
    assigned them an initial value.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，请注意`c`和`bn`变量没有（显式的）初始值。然而，如果你没有提供初始值，MASM将把`.data`部分的变量初始化为0，因此MASM将NULL字符（ASCII码为0）分配给`c`作为其初始值。同样，MASM将假定false为`0`，并将false分配给`bn`的初始值。`.data`部分中的变量声明总是会消耗内存，即使你没有为它们分配初始值。
- en: 3.1.3 The .const Section
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.1.3 `.const`部分
- en: 'The `.const` data section holds constants, tables, and other data that your
    program cannot change during execution. You create read-only objects by declaring
    them in the `.const` declaration section. The `.const` section is similar to the
    `.data` section, with three differences:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`.const`数据部分包含常量、表格以及在程序执行过程中不能更改的其他数据。你可以通过在`.const`声明部分中声明它们来创建只读对象。`.const`部分类似于`.data`部分，但有三个不同之处：'
- en: The `.const` section begins with the reserved word `.const` rather than `.data`.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.const`部分以保留字`.const`开头，而不是`.data`。'
- en: All declarations in the `.const` section have an initializer.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.const`部分的所有声明都有一个初始化器。'
- en: The system does not allow you to write data to variables in a `.const` object
    while the program is running.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统不允许你在程序运行时向`.const`对象中的变量写入数据。
- en: 'Here’s an example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: All `.const` object declarations must have an initializer because you cannot
    initialize the value under program control. For many purposes, you can treat `.const`
    objects as literal constants. However, because they are actually memory objects,
    they behave like (read-only) `.data` objects. You cannot use a `.const` object
    anywhere a literal constant is allowed; for example, you cannot use them as displacements
    in addressing modes (see “The x86-64 Addressing Modes” on page 122), and you cannot
    use them in constant expressions. In practice, you can use them anywhere that
    reading a `.data` variable is legal.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所有`.const`对象声明必须有一个初始化器，因为你不能在程序控制下初始化值。对于许多用途，你可以将`.const`对象视为字面常量。然而，由于它们实际上是内存对象，它们表现得像（只读）`.data`对象。你不能在字面常量允许的地方使用`.const`对象；例如，你不能在寻址模式中使用它们作为位移（见第122页的《x86-64寻址模式》），也不能在常量表达式中使用它们。实际上，你可以在读取`.data`变量合法的任何地方使用它们。
- en: 'As with the `.data` section, you may embed data values in the `.const` section
    by using the `byte`, `word`, `dword`, and so on, data declarations, though all
    declarations must be initialized. For example:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 和`.data`部分一样，你可以通过使用`byte`、`word`、`dword`等数据声明在`.const`部分嵌入数据值，尽管所有声明都必须初始化。例如：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that you can also declare constant values in the `.code` section. Data
    values you declare in this section are also read-only objects, as Windows write-protects
    the `.code` section. If you do place constant declarations in the `.code` section,
    you should take care to place them in a location that the program will not attempt
    to execute as code (such as after a `jmp` or `ret` instruction). Unless you’re
    manually encoding x86 machine instructions using data declarations (which would
    be rare, and done only by expert programmers), you don’t want your program to
    attempt to execute data as machine instructions; the result is usually undefined.^([4](#c03-footnote-4))
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你也可以在`.code`部分声明常量值。在该部分声明的数据值也是只读对象，因为Windows会对`.code`部分进行写保护。如果你确实在`.code`部分放置常量声明，应该小心将它们放置在程序不会尝试执行为代码的位置（例如在`jmp`或`ret`指令之后）。除非你在手动编码x86机器指令时使用数据声明（这通常很少见，且只有专家程序员会这样做），否则你不希望程序尝试将数据作为机器指令执行；结果通常是未定义的。^([4](#c03-footnote-4))
- en: 3.1.4 The .data? Section
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.1.4 `.data?`部分
- en: 'The `.const` section requires that you initialize all objects you declare.
    The `.data` section lets you optionally initialize objects (or leave them uninitialized,
    in which case they have the default initial value of `0`). The `.data?` section
    lets you declare variables that are always uninitialized when the program begins
    running. The `.data?` section begins with the `.data?` reserved word and contains
    variable declarations without initializers. Here is an example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`.const`部分要求你初始化所有声明的对象。`.data`部分让你可选择性地初始化对象（或者让它们保持未初始化状态，在这种情况下，它们的默认初始值为`0`）。`.data?`部分让你声明那些在程序开始运行时总是未初始化的变量。`.data?`部分以`.data?`保留字开头，并包含没有初始化器的变量声明。以下是一个示例：'
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Windows will initialize all `.data?` objects to 0 when it loads your program
    into memory. However, it’s probably not a good idea to depend on this implicit
    initialization. If you need an object initialized with 0, declare it in a `.data`
    section and explicitly set it to 0.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Windows会在加载程序到内存时将所有`.data?`对象初始化为0。然而，依赖这种隐式初始化可能并不是一个好主意。如果需要一个初始化为0的对象，请在`.data`部分声明它并明确将其设置为0。
- en: Variables you declare in the `.data?` section may consume less disk space in
    the executable file for the program. This is because MASM writes out initial values
    for `.const` and `.data` objects to the executable file, but it may use a compact
    representation for uninitialized variables you declare in the `.data?` section;
    note, however, that this behavior is dependent on the OS version and object-module
    format.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你在`.data?`部分声明的变量可能会在程序的可执行文件中占用更少的磁盘空间。这是因为MASM会将`.const`和`.data`对象的初始值写入可执行文件，但对于在`.data?`部分声明的未初始化变量，它可能使用一种紧凑的表示方式；不过请注意，这种行为取决于操作系统版本和对象模块格式。
- en: 3.1.5 Organization of Declaration Sections Within Your Programs
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.1.5 程序中声明部分的组织
- en: 'The `.data`, `.const`, `.data?`, and `.code` sections may appear zero or more
    times in your program. The declaration sections may appear in any order, as the
    following example demonstrates:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`.data`、`.const`、`.data?`和`.code`部分可以在程序中出现零次或多次。声明部分可以按任何顺序出现，以下示例说明了这一点：'
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The sections may appear in an arbitrary order, and a given declaration section
    may appear more than once in your program. As noted previously, when multiple
    declaration sections of the same type (for example, the three `.data?` sections
    in the preceding example) appear in a declaration section of your program, MASM
    combines them into a single group (in any order it pleases).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 各部分可以按任意顺序出现，且某个声明部分在程序中可能出现多次。如前所述，当多个相同类型的声明部分（例如前面示例中的三个`.data?`部分）出现在程序的声明部分时，MASM会将它们组合成一个单独的组（顺序可以任意）。
- en: 3.1.6 Memory Access and 4K Memory Management Unit Pages
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.1.6 内存访问和4K内存管理单元页面
- en: 'The x86-64’s *memory* *management unit (**MMU)* divides memory into blocks
    known as *pages*.^([5](#c03-footnote-5)) The operating system is responsible for
    managing pages in memory, so application programs don’t typically worry about
    page organization. However, you should be aware of a couple of issues when working
    with pages in memory: specifically, whether the CPU even allows access to a given
    memory location and whether it is read/write or read-only (write-protected).'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: x86-64 的*内存* *管理单元（**MMU**）*将内存划分为称为*页面*的块。^([5](#c03-footnote-5)) 操作系统负责管理内存中的页面，因此应用程序通常不需要担心页面的组织。然而，在处理内存中的页面时，你应该注意几个问题：具体来说，CPU
    是否允许访问某个给定的内存位置，以及该位置是可读/可写还是只读（写保护）。
- en: Each program section appears in memory in contiguous MMU pages. That is, the
    `.const` section begins at offset 0 in an MMU page and sequentially consumes pages
    in memory for all the data appearing in that section. The next section in memory
    (perhaps `.data`) begins at offset 0 in the next MMU page following the last page
    of the previous section. If that previous section (for example, `.const`) did
    not consume an integral multiple of 4096 bytes, padding space will be present
    between the end of that section’s data to the end of its last page (to guarantee
    that the next section begins on an MMU page boundary).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 每个程序节在内存中以连续的 MMU 页面出现。也就是说，`.const`节从 MMU 页面中的偏移量 0 开始，并且顺序地消耗内存中的页面，直到该节中的所有数据。内存中的下一个节（可能是`.data`）从紧接着上一个节的最后一页之后的下一个
    MMU 页面中的偏移量 0 开始。如果上一个节（例如`.const`）没有消耗 4096 字节的整数倍，那么在该节数据的末尾和其最后一页的末尾之间会有填充空间（以确保下一个节从
    MMU 页边界开始）。
- en: Each new section starts in its own MMU page because the MMU controls access
    to memory by using page *granularity*. For example, the MMU controls whether a
    page in memory is readable/writable or read-only. For ``.const sections, you want
    the memory to be read-only. For the `.data` section, you want to allow reads and
    writes. Because the MMU can enforce these attributes only on a page-by-page basis,
    you cannot have `.data` section information in the same MMU page as a `.const`
    section.``
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 每个新的节会在自己的 MMU 页面中开始，因为 MMU 通过使用页面的*粒度*来控制对内存的访问。例如，MMU 控制内存中的页面是可读/可写的还是只读的。对于``.const节，你希望内存是只读的。对于`.data`节，你希望允许读写。因为
    MMU 只能按页级别强制执行这些属性，所以你不能将`.data`节的信息和`.const`节放在同一个 MMU 页面中。``
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
