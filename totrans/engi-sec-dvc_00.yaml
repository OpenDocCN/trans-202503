- en: '**INTRODUCTION**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
- en: Internet connectivity, digital business models and data-driven services, remote
    access, and data analytics—all contribute to a variety of needs and challenges
    across nearly every industry. To put it simply, most modern products need some
    kind of computer integrated into them. More specifically, they usually require
    an *embedded system*, which means an electronic system including a processing
    unit, memory, and input/output interfaces that are embedded within a larger mechanical
    or electronic system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: The application domains of embedded systems are extremely wide. They’re used
    in controllers, sensors, and actuators in industrial automation, transportation,
    and critical infrastructure systems. Communication and network hardware like routers,
    switches, and base stations are based on them too. In the consumer market, typical
    products with embedded systems include smart washing machines, intelligent heating
    systems, and gaming consoles. Even the plastic cards we use for banking and building
    access control can be considered a type of embedded system.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Compared to personal computers (PCs) and server systems, these devices often
    face constraints, like the need to keep down manufacturing costs or run on hardware
    with low to moderate computational power, in addition to the rather limited options
    for input and output capabilities. Embedded systems are used in very specific,
    sometimes critical areas, and they usually operate with few user interactions,
    if any. Further, these devices are built from a wide range of hardware, firmware,
    and operating systems in use across different products, manufacturers, and industries.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: On top of those limitations, adding security requirements to the equation doesn’t
    make the life of an embedded systems engineer easier. The development of security
    measures for these devices, their specific application environments, and their
    constrained resources lead to challenging tasks for architects and developers.
    As if all these things weren’t enough, in many cases, embedded systems also face
    physical attackers, which are a more powerful attack model in comparison to remote
    access on cloud or web services, for example.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '**The State of Embedded System Security**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we look at different application domains and industries, the state of security
    measures in embedded systems varies greatly. For example, smart card solutions
    for pay-TV were confronted with fraud cases as early as the 1990s. If people could
    circumvent the scrambling and shuffling algorithms, they were able to watch pay-TV
    for free. In addition, if attackers succeeded in cloning those smart cards, they
    could sell them at a lower price, leading to a loss in revenue for the original
    provider. Since the business model was under pressure, the security awareness
    of these companies was relatively high, and corresponding investments and developments
    in smart card security were prioritized.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 'Another field of embedded systems in entertainment exhibits a similar pattern:
    gaming consoles. The natural interest of console manufacturers is that only original
    game media can be played on their devices. If attackers succeed in running cloned
    discs, the business model suffers. After the reverse engineering community gained
    interest in analyzing game consoles, which, for example, led to the renowned book
    *Hacking the Xbox* by Andrew Huang (No Starch Press, 2003), the industry responded
    with increased security mechanisms. As a result, they reached a solid state of
    embedded system security that requires attackers to invest in a lot of resources,
    expertise, and sophisticated tools to successfully bypass protection measures.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: However, in other application areas of embedded systems, the components don’t
    have such mature security features. In 2016, this became quite obvious with the
    discovery of the *Mirai* malware that exploited hundreds of thousands of internet
    of things (IoT) devices, mainly IP cameras and home routers, turning them into
    botnets that performed enormous distributed denial-of-service (DDoS) attacks against
    websites. Further, the compilations of vulnerabilities dubbed *Ripple20* and *Amnesia:33*
    showed various weaknesses in TCP/IP stacks for embedded systems in 2020\. According
    to estimates, more than 15 million devices were affected, from medical to building
    automation to industrial control systems (ICS).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Strangely enough, devices used in industrial automation and critical infrastructures,
    where robustness and reliability are crucial, also have long security to-do lists.
    Although the *Stuxnet* incident reports in 2010 were a wake-up call for industrial
    automation manufacturers, more than 10 years later, the market still has a significant
    lack of well-protected devices. In 2022, a collection of vulnerabilities in operational
    technology (OT) components was published under the name of *OT:ICEFALL*. The authors
    characterized the security engineering failings as *insecurity by design* because
    the analyzed products missed even the most basic security controls.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '**Emerging Requirements, Laws, and Standards**'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As strange as it sounds, without these incidents, vulnerabilities, and attacks,
    only marginal security awareness would probably exist. However, since we’ve seen
    many of these issues during the last 20 years while at the same time online connectivity,
    digital services, and data analytics grew increasingly relevant to companies,
    cybersecurity “suddenly” has become a requirement—for example, in the procurement
    process.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: This doesn’t mean customers immediately show deep and comprehensive security
    knowledge, but they increasingly demand risk analyses, protection measures, or
    a (random) collection of standards to be fulfilled by product manufacturers. From
    my experiences in the industrial context, this sometimes initiates communication
    between customers and manufacturers to find a compromise between the practical
    need for security and the associated costs, which can be a reasonable and fruitful
    discussion for both parties.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着客户立刻展现出深刻且全面的安全知识，但他们越来越要求进行风险分析、采取保护措施，或满足产品制造商必须遵守的一系列（随机的）标准。从我在工业领域的经验来看，这有时会促使客户和制造商之间进行沟通，以在安全的实际需求和相关成本之间找到妥协，这对双方来说可能是一场合理且富有成效的讨论。
- en: Governments, on the other hand, are increasingly concerned with developing national
    laws and signing international agreements pushing for basic security requirements
    that every product on the market should fulfill. In Europe, the Cybersecurity
    Act (CSA) of 2019 aims to establish a security certification framework for all
    products and services sold in the European Union, and the Cyber Resilience Act
    (CRA) of 2024 regulates cybersecurity requirements for products with digital elements.
    The European Standard ETSI EN 303 645 already defines baseline security requirements,
    especially for consumer IoT products. On the other side of the Atlantic Ocean,
    Biden’s Executive Order 14028 from May 2021 takes a similar line and aims to improve
    cybersecurity in IoT devices and software solutions. The National Institute of
    Standards and Technology (NIST) already provides recommendations for cybersecurity
    labeling of these products.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，政府越来越关注制定国家法律并签署国际协议，推动每个市场上销售的产品应当满足基本的安全要求。在欧洲，2019年的《网络安全法案》（CSA）旨在为所有在欧盟销售的产品和服务建立安全认证框架，而2024年的《网络韧性法案》（CRA）则规范了具有数字元素的产品的网络安全要求。欧洲标准ETSI
    EN 303 645已定义了基准安全要求，特别是针对消费类物联网产品。在大西洋彼岸，拜登于2021年5月发布的第14028号行政命令采取了类似的政策，旨在提升物联网设备和软件解决方案的网络安全性。美国国家标准与技术研究院（NIST）已经提供了关于这些产品的网络安全标签的建议。
- en: 'In parallel, consortia in various industries try to agree on common security
    standards in their fields. A prominent example is International Electrotechnical
    Commission (IEC) standard 62443, targeting ICS security and the industrial IoT
    (IIoT). It combines security requirements for operators, system integrators, and
    component manufacturers, which allows for a unified and interrelated security
    view of industrial systems. Regarding secure device engineering, Parts 4-1 and
    4-2 of IEC 62443 are the most relevant: Part 4-1 covers practices for a secure
    development process, and Part 4-2 is concerned with technical product security
    requirements.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，多个行业的联盟正在尝试就各自领域的共同安全标准达成一致。一个显著的例子是国际电工委员会（IEC）标准62443，专注于工业控制系统（ICS）安全和工业物联网（IIoT）。该标准结合了操作员、系统集成商和组件制造商的安全要求，提供了对工业系统统一且相互关联的安全视角。关于安全设备工程，IEC
    62443的第4-1部分和第4-2部分最为相关：第4-1部分涵盖了安全开发过程的实践，第4-2部分则涉及技术产品安全要求。
- en: '**Who Should Read This Book?**'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**谁应该阅读本书？**'
- en: If you’re an embedded systems architect who is involved in customer discussions
    like those described previously, this book provides you the necessary knowledge
    to debate with your partners at eye level.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是参与客户讨论的嵌入式系统架构师，如前所述，本书将为你提供必要的知识，帮助你与合作伙伴进行平等的辩论。
- en: If you’re an embedded systems engineer or an IoT developer who is in charge
    of implementing security features and you want to know about the reasoning behind
    these features and typical obstacles, this book will prepare you for the journey
    ahead.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是负责实施安全功能的嵌入式系统工程师或物联网开发人员，并且想了解这些功能背后的逻辑及典型障碍，本书将为你准备好迎接未来的挑战。
- en: If you’re part of a product’s requirements engineering process or do embedded
    systems testing in your day-to-day work, this book will help you understand the
    value of certain security features and why your colleagues from the development
    team might be reluctant to implement them.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你参与产品需求工程过程，或者在日常工作中进行嵌入式系统测试，本书将帮助你理解某些安全功能的价值，以及为什么开发团队的同事可能不愿意实现这些功能。
- en: If you’re a student and wonder why many protection measures can’t be taken for
    granted in IoT products, this book will confirm that you have the right mindset,
    and you’ll learn that embedded system security is an important but sometimes tedious
    task.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: And if, some minutes ago, somebody yelled at you, “We need to implement this
    f****** device security! NOW!!!” take a deep breath, cancel all appointments,
    and read through this book carefully. Afterward, you’ll be ready for a friendly,
    objective discussion about “security.”
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '**What Does This Book Cover?**'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book’s contents are based on my hands-on experiences and research insights
    from the last 15 years in the field of embedded system security.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'In **[Part I: Fundamentals](part01.xhtml#part01)**, you’ll learn foundational
    knowledge related to providing a secure development life cycle and how cryptography
    is used.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 1: Secure Development Process](ch01.xhtml#ch01)**    Covers the
    basic elements necessary to follow the principle of security by design within
    a product development process.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 2: Cryptography](ch02.xhtml#ch02)**    Summarizes the cryptographic
    essentials relevant for practical security engineering.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '**[Part II: Device Security Building Blocks](part02.xhtml#part02)** details
    the basic physical and logical building blocks for embedded system security.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 3: Random Number Generators](ch03.xhtml#ch03)**    Dives into the
    magical field of randomness, highlights its importance for security, and gives
    practical hints on how to generate and assess random data.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 4: Cryptographic Implementations](ch04.xhtml#ch04)**    Discusses
    implementation options for cryptographic algorithms and the corresponding impacts
    on properties such as performance.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 5: Confidential Data Storage and Secure Memory](ch05.xhtml#ch05)**    Focuses
    on storing small and large portions of data in a secure, confidential way.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 6: Secure Device Identity](ch06.xhtml#ch06)**    Is concerned with
    the generation and management of unique identities for embedded systems.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 7: Secure Communication](ch07.xhtml#ch07)**    Presents state-of-the-art
    protection measures for communication channels, and answers common questions regarding
    their implementation on embedded systems.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '**[Part III: Advanced Device Security Concepts](part03.xhtml#part03)**    focuses
    on comprehensive protection concepts relevant for secure IoT devices.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 8: Secure Boot and System Integrity](ch08.xhtml#ch08)**    Covers
    security considerations during the sensitive operation phase when an embedded
    system is booting up.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 9: Secure Firmware Update](ch09.xhtml#ch09)**    Describes the complexity
    of providing software updates for products with security in mind.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 10: Robust Device Architecture](ch10.xhtml#ch10)**    Discusses
    the question of how to continue the operation of critical processes while under
    attack.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 11: Access Control and Management](ch11.xhtml#ch11)**    Considers
    the restriction of users and processes on a device and its practical consequences.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 12: System Monitoring](ch12.xhtml#ch12)**    Completes the book
    by exploring measures that allow you to detect and analyze anomalies or attacks
    on embedded systems.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: While reading this book, keep in mind that your goal should not only be to absorb
    as much technical knowledge as possible but also to understand *when* and *why*
    device security measures make sense.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '**A Note on the Case Studies in This Book**'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Several chapters in this book contain practical case studies. Their purpose
    is *not* to serve as copy-and-paste examples to be reproduced easily on your own
    device or even to be used for productive development. That would require a level
    of detail beyond the scope of this book, and the relevant security insights would
    vanish in a sea of implementation issues.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Some of the case studies illustrate gaps between the theory and the messy real
    world. Others demonstrate the advantages or disadvantages of different implementation
    options, and some of the case studies just provide a specific application context
    that should help you understand the preceding ideas and concepts.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned earlier, embedded systems are a diverse class of devices and so
    are their processors, memories, and interfaces. In order to provide a reasonable
    demonstration device—not too high end, not too tiny and constrained—I chose a
    hardware platform with medium performance that also includes hardware-based security
    measures that can be analyzed in practical case studies: the STM32MP157F-DK2 evaluation
    board from STMicroelectronics (ST). (For the record, I have no affiliation with
    ST.)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Whenever it comes to operating systems for medium- and high-performance embedded
    systems, Linux is the natural choice. It’s used in cars, dishwashers, programmable
    logic controllers (PLCs), TVs, energy monitoring systems, and also in the case
    studies within this book. Specifically, I used ST’s OpenSTLinux distribution with
    a Linux 5.15 kernel.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
