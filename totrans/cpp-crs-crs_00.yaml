- en: '**INTRODUCTION**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**介绍**'
- en: '*Grab the ol’ brush and paint along with us.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*拿起那把旧画笔，跟我们一起画吧。'
- en: —Bob Ross*
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: —Bob Ross*
- en: '![Image](../images/common.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: The demand for system programming is enormous. With the ubiquity of web browsers,
    mobile devices, and the Internet of Things, there has perhaps never been a better
    time to be a system programmer. Efficient, maintainable, and correct code is desired
    in all cases, and it’s my firm belief that C++ is the right language for the job
    *in general*.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 系统编程的需求巨大。随着网页浏览器、移动设备和物联网的普及，或许现在正是成为一名系统程序员的最佳时机。高效、可维护且正确的代码在任何情况下都是需求，而我坚信
    C++ 是做这项工作的正确语言*通常*来说。
- en: In the hands of a knowledgeable programmer, C++ can produce smaller, more efficient,
    and more readable code than any other system programming language on the planet.
    It’s a language committed to the ideal of zero-overhead abstraction mechanisms—so
    your programs are fast and quick to program—as well as simple, direct mapping
    to hardware—so you have low-level control when you need it. When you program in
    C++, you stand on the shoulders of giants who have spent decades crafting an incredibly
    powerful and flexible language.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在一位有经验的程序员手中，C++ 可以比任何其他系统编程语言生成更小、更高效、且更易读的代码。它是一种致力于零开销抽象机制的语言——让你的程序既快速又易于编程——并且能够直接映射到硬件——因此在你需要时，能够提供低级别的控制。使用
    C++ 编程时，你站在那些花费数十年精心打造一个极为强大和灵活语言的巨人肩膀上。
- en: 'A huge benefit of learning C++ is that you gain access to the C++ Standard
    Library, the *stdlib*, free of charge. The stdlib is composed of three interlocking
    parts: *containers*, *iterators*, and *algorithms*. If you’ve ever written your
    own *quicksort* algorithm by hand or if you’ve programmed system code and been
    bitten by buffer overflows, dangling pointers, use-after frees, and double frees,
    you’ll enjoy getting acquainted with the stdlib. It provides you with an unrivaled
    combination of type safety, correctness, and efficiency. In addition, you’ll like
    how compact and expressive your code can be.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 学习 C++ 的一个巨大好处是，你可以免费使用 C++ 标准库（*stdlib*）。stdlib 由三部分组成：*容器*、*迭代器*和*算法*。如果你曾经手写过自己的*快速排序*算法，或者编写过系统代码并且遭遇过缓冲区溢出、悬空指针、使用后释放和双重释放等问题，那么你一定会喜欢熟悉
    stdlib。它为你提供了无与伦比的类型安全性、正确性和效率。此外，你还会喜欢你的代码变得如此简洁和富有表现力。
- en: At the core of the C++ programming model is the *object life cycle*, which gives
    you strong guarantees that resources your program uses, such as files, memory,
    and network sockets, release correctly, even when error conditions occur. When
    used effectively, *exceptions* can clean out large amounts of error-condition-checking
    clutter from your code. Also, *move*/*copy* semantics provide safety, efficiency,
    and flexibility to manage resource ownership in a way that earlier system programming
    languages, like C, simply don’t provide.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: C++ 编程模型的核心是*对象生命周期*，它能强有力地保证程序使用的资源（如文件、内存和网络套接字）能够正确释放，即使在发生错误条件时也是如此。当使用得当时，*异常*可以清理代码中大量的错误条件检查杂乱无章的部分。此外，*移动*/*拷贝*语义提供了安全性、效率和灵活性，以一种早期系统编程语言（如
    C）根本无法提供的方式来管理资源所有权。
- en: 'C++ is a living, breathing language; after more than 30 years, the International
    Organization for Standardization (ISO) committee for C++ regularly makes improvements
    in the language. Several updates to the standard have been released in the past
    decade: C++11, C++14, and C++17, which were released in 2011, 2014, and 2017,
    respectively. You can expect a new C++20 in 2020.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: C++ 是一门活生生的语言；在过去的 30 年中，C++ 的国际标准化组织（ISO）委员会定期对该语言进行改进。过去十年发布了几次标准更新：C++11、C++14
    和 C++17，分别在 2011、2014 和 2017 年发布。你可以期待在 2020 年推出新的 C++20。
- en: When I use the term *modern C++*, I mean the latest C++ version that embraces
    the features and paradigms presented in these additions. These updates have made
    serious refinements to the language that improve its expressiveness, efficiency,
    safety, and overall usability. By some measures, the language has never been more
    popular, and it’s not going away any time soon. If you decide to invest in learning
    C++, it will pay dividends for years to come.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当我提到*现代 C++*时，我指的是采用这些新增功能和范式的最新 C++ 版本。这些更新对语言进行了严重的精炼，提高了语言的表达能力、效率、安全性和整体可用性。从某些标准来看，C++
    从未如此受欢迎，而且它短期内不会消失。如果你决定投资学习 C++，它将在未来的岁月里为你带来丰厚的回报。
- en: '**About This Book**'
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**关于本书**'
- en: Although a number of very high-quality books are available to modern C++ programmers,
    such as Scott Meyer’s *Effective Modern C++* and Bjarne Stroustrup’s *The C++
    Programming Language*, 4th Edition, they’re generally quite advanced. Some introductory
    C++ texts are available, but they often skip over crucial details because they’re
    geared to those totally new to programming. For the experienced programmer, it’s
    not clear where to dive into the C++ language.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有许多非常高质量的书籍可供现代 C++ 程序员使用，例如 Scott Meyer 的 *Effective Modern C++* 和 Bjarne
    Stroustrup 的 *The C++ Programming Language* 第4版，但它们通常相当高级。一些入门级的 C++ 书籍也有，但它们常常跳过重要的细节，因为它们是为那些完全没有编程经验的人设计的。对于有经验的程序员来说，C++
    语言的学习路径并不清晰。
- en: I prefer to learn about complicated topics deliberately, building concepts from
    their fundamental elements. C++ has a daunting reputation because its fundamental
    elements nest so tightly together, making it difficult to construct a complete
    picture of the language. When I learned C++, I struggled to get my mind around
    the language, bouncing among books, videos, and exhausted colleagues. So I wrote
    the book I wish I’d had five years ago.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我更喜欢有意识地学习复杂的主题，从其基本元素开始构建概念。C++ 因为其基本元素紧密嵌套在一起，导致它具有令人畏惧的声誉，使得很难构建完整的语言图像。当我学习
    C++ 时，我曾经在书籍、视频和疲惫的同事间反复跳跃，努力理清语言的框架。因此，我写了这本书，是我五年前希望能拥有的那本书。
- en: '**Who Should Read This Book?**'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**谁应该阅读本书？**'
- en: This book is intended for intermediate to advanced programmers already familiar
    with basic programming concepts. If you don’t specifically have *system* programming
    experience, that’s okay. Experienced application programmers are welcome.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本书适合已经熟悉基本编程概念的中级到高级程序员。如果你没有专门的 *系统* 编程经验也没关系，经验丰富的应用程序员同样欢迎阅读。
- en: '**NOTE**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you’re a seasoned C programmer or an aspiring system programmer wondering
    whether you should invest in learning C++, be sure to read An Overture to C Programmers
    on [page xxxvii](anoverture.xhtml#page_xxxvii) for a detailed examination.*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你是一名资深的 C 程序员或正在考虑是否投资学习 C++ 的系统程序员，请务必阅读第 [xxxvii 页](anoverture.xhtml#page_xxxvii)
    的《C 程序员序曲》进行详细了解。*'
- en: '**What’s in This Book?**'
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**本书内容是什么？**'
- en: The book is divided into two parts. [Part I](part01.xhtml#part01) covers the
    core C++ language. Rather than presenting the C++ language chronologically (from
    old-style C++ 98 to modern C++11/14/17), you’ll learn idiomatic, modern C++ directly.
    [Part II](part02.xhtml#part02) introduces you to the world of the C++ Standard
    Library (stdlib) where you’ll learn the most important and essential concepts.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本书分为两部分。[第一部分](part01.xhtml#part01)涵盖 C++ 核心语言。你将直接学习地道的现代 C++，而不是按时间顺序介绍 C++
    语言（从旧版 C++ 98 到现代 C++11/14/17）。[第二部分](part02.xhtml#part02)则将带你进入 C++ 标准库（stdlib）的世界，学习其中最重要和最基本的概念。
- en: '***[Part I: The C++ Core Language](part01.xhtml#part01)***'
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***[第一部分：C++ 核心语言](part01.xhtml#part01)***'
- en: '**[Chapter 1: Up and Running](ch01.xhtml)** This introductory chapter will
    help you set up a C++ development environment. You’ll compile and run your first
    program, and you’ll learn how to debug it.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第1章：快速入门](ch01.xhtml)** 本章节将帮助你设置 C++ 开发环境。你将编译并运行你的第一个程序，并学习如何调试它。'
- en: '**[Chapter 2: Types](ch02.xhtml)** Here you’ll explore the C++ type system.
    You’ll learn about the fundamental types, the foundation upon which all other
    types are built. Next, you’ll learn about plain-old-data types and fully featured
    classes. You’ll delve into the role of constructors, initialization, and destructors.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第2章：类型](ch02.xhtml)** 在这一章中，你将探索 C++ 的类型系统。你将学习基本类型，这是所有其他类型构建的基础。接下来，你将了解普通数据类型和功能齐全的类。你将深入研究构造函数、初始化和析构函数的角色。'
- en: '**[Chapter 3: Reference Types](ch03.xhtml)** This chapter introduces you to
    objects that store the memory addresses of other objects. These types are the
    cornerstone of many important programming patterns, and they allow you to produce
    flexible, efficient code.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第3章：引用类型](ch03.xhtml)** 本章将介绍存储其他对象内存地址的对象。这些类型是许多重要编程模式的基石，它们使你能够编写灵活且高效的代码。'
- en: '**[Chapter 4: The Object Life Cycle](ch04.xhtml)** The discussion of class
    invariants and the constructor is continued within the context of storage durations.
    The destructor is introduced alongside the resource acquisition is initialization
    (RAII) paradigm. You’ll learn about exceptions and how they enforce class invariants
    and complement RAII. After a discussion of move and copy semantics, you’ll explore
    how to operationalize them with constructors and assignment operators.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第四章：对象生命周期](ch04.xhtml)** 本章继续讨论类的不变性和构造函数，并在存储持续时间的上下文中展开。析构函数与资源获取即初始化（RAII）范式一起介绍。你将学习异常处理及其如何强制执行类的不变性，并补充
    RAII。经过关于移动语义和复制语义的讨论后，你将学习如何通过构造函数和赋值操作符来实现这些概念。'
- en: '**[Chapter 5: Runtime Polymorphism](ch05.xhtml)** Here you’ll be introduced
    to interfaces, a programming concept that allows you to write code that’s polymorphic
    at runtime. You’ll learn the basics of inheritance and object composition, which
    underpin how you can operationalize interfaces in C++.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第五章：运行时多态性](ch05.xhtml)** 本章将介绍接口，这是一个允许你编写运行时多态代码的编程概念。你将学习继承和对象组合的基础知识，这些知识构成了如何在
    C++ 中实现接口的基础。'
- en: '**[Chapter 6: Compile-Time Polymorphism](ch06.xhtml)** This chapter introduces
    templates, a language feature that allows you to write polymorphic code. You’ll
    also explore concepts, a language feature that will be added to a future C++ release,
    and named conversion functions, which allow you to convert objects from one type
    to another.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第六章：编译时多态性](ch06.xhtml)** 本章介绍模板，这是一种允许你编写多态代码的语言特性。你还将探索概念，这是将添加到未来 C++
    版本中的语言特性，以及命名转换函数，它允许你将对象从一种类型转换为另一种类型。'
- en: '**[Chapter 7: Expressions](ch07.xhtml)** Now you’ll dive deeply into operands
    and operators. With a firm grasp of types, the object life cycle, and templates,
    you’ll be ready to plunge into the core components of the C++ language, and expressions
    are the first waypoint.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第七章：表达式](ch07.xhtml)** 现在你将深入学习操作数和运算符。在牢牢掌握类型、对象生命周期和模板的基础上，你将准备好深入探讨 C++
    语言的核心组件，而表达式就是第一个重要的环节。'
- en: '**[Chapter 8: Statements](ch08.xhtml)** This chapter explores the elements
    that comprise functions. You’ll learn about expression statements, compound statements,
    declaration statements, iteration statements, and jump statements.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第八章：语句](ch08.xhtml)** 本章将探讨构成函数的各种元素。你将学习表达式语句、复合语句、声明语句、迭代语句和跳转语句。'
- en: '**[Chapter 9: Functions](ch09.xhtml)** The final chapter of [Part I](part01.xhtml#part01)
    expands on the discussion of how to arrange statements into units of work. You’ll
    learn the details of function definitions, return types, overload resolution,
    variadic functions, variadic templates, and function pointers. You’ll also learn
    how to create invokable user-defined types using the function call operator and
    lambda expressions. You’ll explore `std::function`, a class that provides a uniform
    container for storing invokable objects.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第九章：函数](ch09.xhtml)** [第一部分](part01.xhtml#part01)的最后一章扩展了如何将语句安排成工作单元的讨论。你将了解函数定义、返回类型、重载解析、可变参数函数、可变参数模板和函数指针的细节。你还将学习如何使用函数调用操作符和
    lambda 表达式创建可调用的用户自定义类型。你将探索 `std::function`，这是一个提供统一容器来存储可调用对象的类。'
- en: '***[Part II: C++ Libraries and Frameworks](part02.xhtml#part02)***'
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***[第二部分：C++ 库和框架](part02.xhtml#part02)***'
- en: '**[Chapter 10: Testing](ch10.xhtml)** This chapter introduces you to the wonderful
    world of unit testing and mocking frameworks. You’ll practice test-driven development
    to develop software for an autonomous driving system while learning about frameworks,
    such as Boost Test, Google Test, Google Mock, and others.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第十章：测试](ch10.xhtml)** 本章将带你进入单元测试和模拟框架的精彩世界。你将练习测试驱动开发，开发一个自动驾驶系统的软件，并学习
    Boost Test、Google Test、Google Mock 等框架。'
- en: '**[Chapter 11: Smart Pointers](ch11.xhtml)** The special utility classes that
    the stdlib provides for handling ownership of dynamic objects are explained.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第十一章：智能指针](ch11.xhtml)** 本章将解释 stdlib 提供的特殊工具类，用于处理动态对象的所有权。'
- en: '**[Chapter 12: Utilities](ch12.xhtml)** Here you’ll get an overview of the
    types, classes, and functions at your disposal in the stdlib and Boost libraries
    for tackling common programming problems. You’ll learn about data structures,
    numeric functions, and random number generators.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第十二章：实用工具](ch12.xhtml)** 本章将概述你可以在 stdlib 和 Boost 库中使用的类型、类和函数，以解决常见的编程问题。你将了解数据结构、数值函数和随机数生成器。'
- en: '**[Chapter 13: Containers](ch13.xhtml)** This chapter surveys the many special
    data structures in the Boost libraries and stdlib that help you organize data.
    You’ll learn about sequence containers, associative containers, and unordered
    associative containers.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第13章：容器](ch13.xhtml)** 本章将概述 Boost 库和标准库中许多特殊数据结构，这些数据结构帮助你组织数据。你将了解顺序容器、关联容器和无序关联容器。'
- en: '**[Chapter 14: Iterators](ch14.xhtml)** This is the interface between the containers
    you learned about in the previous chapter and the strings of the next chapter.
    You’ll learn about the different kinds of iterators and how their design provides
    you with incredible flexibility.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第14章：迭代器](ch14.xhtml)** 这是你在上一章学习的容器与下一章字符串之间的接口。你将学习不同种类的迭代器，以及它们的设计如何为你提供极大的灵活性。'
- en: '**[Chapter 15: Strings](ch15.xhtml)** This chapter teaches you how to handle
    human language data in a single family of containers. You’ll also learn about
    the special facilities built into strings that allow you to perform common tasks.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第15章：字符串](ch15.xhtml)** 本章教你如何在单一容器系列中处理人类语言数据。你还将学习字符串中内置的特殊功能，这些功能使你能够执行常见的任务。'
- en: '**[Chapter 16: Streams](ch16.xhtml)** You’ll be introduced here to the major
    concept underpinning input and output operations. You’ll learn how to handle input
    and output streams with formatted and unformatted operations, as well as how to
    employ manipulators. You’ll also learn how to read and write data from and to
    files.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第16章：流](ch16.xhtml)** 本章将向你介绍输入和输出操作的核心概念。你将学习如何使用格式化和非格式化操作处理输入输出流，以及如何使用操控符。你还将学习如何从文件中读取和写入数据。'
- en: '**[Chapter 17: Filesystems](ch17.xhtml)** Here you’ll get an overview of the
    facilities in the stdlib for manipulating filesystems. You’ll learn how to construct
    and manipulate paths, inspect files and directories, and enumerate directory structures.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第17章：文件系统](ch17.xhtml)** 本章将概述标准库中用于操作文件系统的功能。你将学习如何构建和操作路径，检查文件和目录，以及枚举目录结构。'
- en: '**[Chapter 18: Algorithms](ch18.xhtml)** This is a quick reference to the dozens
    of problems you can solve easily from within the stdlib. You’ll learn about the
    impressive scope of the high-quality algorithms available to you.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第18章：算法](ch18.xhtml)** 这是一个快速参考，介绍了你可以轻松通过标准库解决的数十个问题。你将了解可供使用的高质量算法的广泛范围。'
- en: '**[Chapter 19: Concurrency and Parallelism](ch19.xhtml)** This chapter teaches
    you some simple methods for multithreaded programming that are part of the stdlib.
    You’ll learn about futures, mutexes, condition variables, and atomics.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第19章：并发与并行性](ch19.xhtml)** 本章教你一些标准库中的多线程编程的简单方法。你将学习到 futures、互斥锁、条件变量和原子操作。'
- en: '**[Chapter 20: Network Programming with Boost Asio](ch20.xhtml)** Here you’ll
    learn how to build high-performance programs that communicate over networks. You’ll
    see how to use Boost Asio with blocking and non-blocking input and output.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第20章：使用 Boost Asio 进行网络编程](ch20.xhtml)** 在本章中，你将学习如何构建高性能的网络通信程序。你将看到如何使用
    Boost Asio 进行阻塞和非阻塞的输入输出操作。'
- en: '**[Chapter 21: Writing Applications](ch21.xhtml)** This final chapter rounds
    out the book with a discussion of several important topics. You’ll learn about
    program support facilities that allow you to hook into the application life cycle.
    You’ll also learn about Boost ProgramOptions, a library that makes writing console
    applications that accept user input straightforward.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第21章：编写应用程序](ch21.xhtml)** 本章总结了全书的内容，讨论了几个重要的主题。你将了解程序支持功能，它们允许你与应用程序生命周期进行交互。你还将学习
    Boost ProgramOptions，这是一个简化编写接受用户输入的控制台应用程序的库。'
- en: '**NOTE**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Visit the companion site* [https://ccc.codes/](https://ccc.codes/) *to access
    the code listings contained in this book.*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*访问伴随网站* [https://ccc.codes/](https://ccc.codes/) *获取本书中包含的代码清单。*'
