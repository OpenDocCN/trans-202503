- en: '**4'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**4'
- en: A Graphical User Interface for a Multicolor LED**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 多色LED的图形用户界面**
- en: In this project, we’ll introduce you to the multicolor RGB LED, and you’ll learn
    how to build a simple graphical user interface in Tkinter to control your electronics.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将向你介绍多色RGB LED，并教你如何在Tkinter中构建一个简单的图形用户界面来控制你的电子设备。
- en: '![image](../images/f0062-01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0062-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需零件**'
- en: Raspberry Pi
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派
- en: Breadboard
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 面包板
- en: Common cathode RGB LED
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 共阴RGB LED
- en: Three 330 Ω resistors
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 三个330Ω电阻
- en: Jumper wires
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线
- en: '**INTRODUCING RGB LEDS**'
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍RGB LED**'
- en: RGB LEDs are three LEDs in one—red, green, and blue—that can produce almost
    any color by combining those three colors.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: RGB LED是一个集成了三种LED（红色、绿色和蓝色）的设备，通过将这三种颜色混合，可以产生几乎任何颜色。
- en: With an RGB LED you can, of course, produce red, green, and blue light, and
    by configuring the intensity of each LED, you can produce other colors as well.
    For example, to produce purely blue light, you’d set the blue LED to the highest
    intensity and the green and red LEDs to the lowest intensity. For a white light,
    you’d set all three LEDs to the highest intensity. [Figure 4-1](ch04.xhtml#ch04fig1)
    shows a simplified RGB color-mixing chart to give you an idea of how to combine
    red, green, and blue to produce different colors.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用RGB LED，你当然可以产生红色、绿色和蓝色光，并通过调整每个LED的强度，你还可以产生其他颜色。例如，要产生纯蓝光，你可以将蓝色LED的强度调到最大，将绿色和红色LED的强度调到最低。要产生白光，你需要将所有三个LED的强度调到最大。[图4-1](ch04.xhtml#ch04fig1)展示了一个简化的RGB颜色混合图表，帮助你理解如何通过混合红色、绿色和蓝色来产生不同的颜色。
- en: '![image](../images/f0063-01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0063-01.jpg)'
- en: '**FIGURE 4-1:** Simple RGB color mixing'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**图4-1：** 简单的RGB颜色混合'
- en: 'There are two kinds of RGB LEDs: a *common cathode* LED, where each color LED
    shares a negative connection, and a *common anode*, where each LED shares a positive
    connection. [Figure 4-2](ch04.xhtml#ch04fig2) illustrates a common anode and a
    common cathode LED.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的RGB LED：*共阴*LED，其中每个颜色的LED共享一个负连接；以及*共阳*LED，其中每个LED共享一个正连接。[图4-2](ch04.xhtml#ch04fig2)展示了共阳和共阴LED。
- en: '![image](../images/f0063-02.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0063-02.jpg)'
- en: '**FIGURE 4-2:** Common anode and common cathode RGB LEDs'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**图4-2：** 共阳和共阴RGB LED'
- en: RGB LEDs have four leads—one for each LED and another for the common anode or
    cathode. You can identify each lead by its length, as shown in [Figure 4-3](ch04.xhtml#ch04fig3).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: RGB LED有四个引脚——每个LED一个，还有一个共阳或共阴引脚。你可以通过引脚的长度来识别每个引脚，如[图4-3](ch04.xhtml#ch04fig3)所示。
- en: '![image](../images/f0064-01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0064-01.jpg)'
- en: '**FIGURE 4-3:** Common anode and common cathode RGB LED leads'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**图4-3：** 共阳和共阴RGB LED引脚'
- en: 'With the LED facing you so the anode or cathode (the longest lead) is second
    from the left, the leads should be in the following order: red, anode or cathode,
    green, and blue. We’ll be using a common cathode LED for this project, but if
    you already have a common anode LED it’s fine to use that; just watch out for
    the differences noted in the circuit wiring.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当LED面对你时，阳极或阴极（最长的引脚）位于左边第二个位置，引脚的顺序应该是：红色、阳极或阴极、绿色、蓝色。我们将在本项目中使用共阴LED，但如果你已有一个共阳LED，也可以使用；只需要注意电路接线中的差异。
- en: '**WIRING THE CIRCUIT**'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**接线电路**'
- en: Wiring an RGB LED to the Raspberry Pi is really straightforward and not much
    different than wiring a simple LED. You’ll need three current limiting resistors—one
    for each LED color.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 将RGB LED连接到树莓派非常简单，与连接普通LED差别不大。你需要三个限流电阻——每个LED颜色一个。
- en: Follow these instructions, using [Figure 4-4](ch04.xhtml#ch04fig4) as a reference.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照这些指示操作，使用[图4-4](ch04.xhtml#ch04fig4)作为参考。
- en: Connect the LED pins in the breadboard and add a 330 Ω current-limiting resistor
    in series for each color lead.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将LED引脚连接到面包板，并为每个颜色引脚串联一个330Ω限流电阻。
- en: Connect GND to the breadboard blue rail, and wire the RGB LED to the Raspberry
    Pi’s GPIO according to the following table, with red connected to GPIO 23, the
    cathode to GND, green to GPIO 24, and blue to GPIO 25\. Check [Figure 4-3](ch04.xhtml#ch04fig3)
    to make sure you’re orienting the LED correctly.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将GND连接到面包板的蓝色轨道，并按照下表将RGB LED连接到树莓派的GPIO，红色连接到GPIO 23，阴极连接到GND，绿色连接到GPIO 24，蓝色连接到GPIO
    25。查看[图4-3](ch04.xhtml#ch04fig3)以确保你正确地定向了LED。
- en: '**NOTE**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: If you’re using a common anode RGB LED, connect the longest lead (the anode)
    to 3.3 V.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是共阳RGB LED，将最长的引脚（阳极）连接到3.3V。
- en: '| **RGB LED** | **RASPBERRY PI** |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| **RGB LED** | **树莓派** |'
- en: '| --- | --- |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| First lead: red | GPIO 23 |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 第一引脚：红色 | GPIO 23 |'
- en: '| Second lead: cathode | GND |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 第二引脚：阴极 | GND |'
- en: '| Third lead: green | GPIO 24 |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 第三根引脚：绿色 | GPIO 24 |'
- en: '| Fourth lead: blue | GPIO 25 |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 第四根引脚：蓝色 | GPIO 25 |'
- en: '![image](../images/f0065-01.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0065-01.jpg)'
- en: '**FIGURE 4-4:** Wiring a common cathode RGB LED to the Raspberry Pi'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 4-4:** 将共阴极RGB LED接到树莓派'
- en: '**WRITING THE SCRIPT**'
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写脚本**'
- en: In your script, you’ll use a library called Tkinter to create a user interface
    window in your desktop environment that you can use to control the RGB LED. Tkinter
    is already installed with your Raspbian system, so you just need to import it
    in your script.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的脚本中，你将使用一个名为Tkinter的库来创建一个用户界面窗口，借此你可以控制RGB LED。Tkinter已经随着Raspbian系统预装好了，因此你只需要在脚本中导入它。
- en: The interface window will have three sliders (with values of `0` to `1`) to
    control the intensity of the built-in red, green, and blue LEDs, and a close button
    to shut down the program. By adjusting the values’ intensities with the sliders,
    you can change the color of the RGB LED.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 界面窗口将有三个滑块（值范围为`0`到`1`）来控制内建红色、绿色和蓝色LED的亮度，还有一个关闭按钮用于关闭程序。通过调整滑块的值，你可以改变RGB
    LED的颜色。
- en: 'Now, open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a
    new script. Then, enter the following code into the Python Editor and save the
    script as *rgb_led_controller.py* inside the *LEDs* folder (remember that you
    can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开**Python 3 (IDLE)**，然后进入**文件** ▸ **新建文件**，创建一个新的脚本。接着，在Python编辑器中输入以下代码，并将脚本保存为*rgb_led_controller.py*，保存在*LEDs*文件夹中（记得你可以在*[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*下载所有脚本）：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**USER-DEFINED FUNCTIONS**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户自定义函数**'
- en: To define a new function, you use the word `def` followed by the name you want
    to give the function and a set of parentheses.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个新的函数，你需要使用`def`关键字，后跟你希望赋予函数的名称和一对圆括号。
- en: 'After the parentheses you add a colon (`:`) and then tell the function what
    instructions to perform. Python knows which instructions are part of the function
    definition by the use of the colon and indentation: every indented line after
    the colon is part of the function. Later, you can run the instructions you’ve
    set inside the function by entering the name of the function, also known as *calling*
    the function.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在括号后，你需要添加一个冒号（`:`），然后告诉函数执行什么指令。Python通过使用冒号和缩进来识别哪些指令是函数定义的一部分：冒号后的每一行缩进的代码都属于函数的一部分。之后，你可以通过输入函数名来运行你在函数内设置的指令，这也叫做*调用*函数。
- en: First, you import `PWMLED` from the gpiozero library to control the LED with
    PWM, and import the tkinter library to build the user interface ➊. Next, you create
    the function to control the LED color. Remember that a function is basically a
    block of reusable code that will perform a certain action. Python has many built-in
    functions, like `print()`, `int()`, and `input()`, but you can also build your
    own *user-defined functions*, as in this script. Read the [“User-Defined Functions”](ch04.xhtml#ch04box1)
    box to learn more.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你从gpiozero库中导入`PWMLED`来用PWM控制LED，并导入tkinter库来构建用户界面 ➊。接着，你创建函数来控制LED颜色。记住，函数基本上是一个可重复使用的代码块，它会执行某个特定的操作。Python有许多内置函数，如`print()`、`int()`和`input()`，但你也可以自己编写*用户自定义函数*，正如本脚本中所示。阅读[“用户自定义函数”](ch04.xhtml#ch04box1)框来了解更多。
- en: '**Controlling the Intensity and Closing the Window**'
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**控制强度与关闭窗口**'
- en: The `change_color()` function ➋ changes the LED’s duty cycle as you adjust the
    value of the slider, which in turn changes the intensity of the LED and therefore
    the color it produces. This function is called every time the sliders move, so
    you should see an instantaneous change on the LED when you move the slider. At
    ➍, you create `PWMLED` objects to refer to each color of the RGB LED.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`change_color()`函数➋会随着你调整滑块的值而改变LED的占空比，从而改变LED的亮度，进而改变它产生的颜色。每次滑块移动时，都会调用此函数，因此你应该能在滑块移动时看到LED的即时变化。在
    ➍ 处，你创建了`PWMLED`对象来表示RGB LED的每种颜色。'
- en: The `close_window()` function ➌ closes the window with `window.destroy()`. This
    function is called when you press the Close button in the Tkinter interface. We’ll
    look at how to create the Tkinter interface next.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`close_window()`函数➌使用`window.destroy()`关闭窗口。这个函数会在你按下Tkinter界面中的关闭按钮时被调用。接下来我们将看看如何创建Tkinter界面。'
- en: '**Designing the User Interface with Tkinter**'
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**使用Tkinter设计用户界面**'
- en: At ➎, you define the main window of your interface. You create a variable called
    `window` that is a `tkinter` window with the line `window = Tk()`. You then give
    your window a title and set the window dimensions with the `title()` and `geometry()`
    methods, respectively.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在➎处，你定义了界面的主窗口。你创建了一个名为`window`的变量，它是一个`tkinter`窗口，通过`window = Tk()`这行代码来创建。接着，你通过`title()`和`geometry()`方法分别为窗口设置标题和窗口尺寸。
- en: '**Creating Sliders and Buttons**'
  id: totrans-51
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**创建滑块和按钮**'
- en: After creating the window, you can start adding the controls, known as *widgets*,
    like buttons, labels, and sliders. You’re using a `Button` widget to close the
    window and three `Scale` widgets to add the sliders to your window.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 创建完窗口后，你可以开始添加控件，也就是*小部件*，比如按钮、标签和滑块。你使用了一个`Button`小部件来关闭窗口，并使用了三个`Scale`小部件来向窗口添加滑块。
- en: 'You then create three sliders, one for each RGB color ➏, using the following
    syntax:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你创建了三个滑块，每个对应一个RGB颜色➏，使用以下语法：
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The master argument is the window you’ll add the widget to, and each option
    argument allows you to personalize your sliders. In the *rgb_led_controller.py*
    script, you use the following options:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: master参数是你将小部件添加到的窗口，而每个选项参数允许你个性化你的滑块。在*rgb_led_controller.py*脚本中，你使用了以下选项：
- en: '`from_` defines the lower end of the scale’s range.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`from_`定义了滑块范围的下限。'
- en: '`to` defines the upper end of the scale’s range. In our case, the range is
    0 to 1.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to`定义了滑块范围的上限。在我们的案例中，范围是0到1。'
- en: '`resolution` sets the resolution of the slider—the minimum difference between
    two consecutive values. Here, the resolution is `0.01`.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resolution`设置滑块的分辨率——两个连续值之间的最小差值。这里的分辨率是`0.01`。'
- en: '`orient` defines the slider orientation, either `HORIZONTAL` or `VERTICAL`.
    This script sets the sliders to `HORIZONTAL`.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`orient`定义了滑块的方向，可能是`HORIZONTAL`（水平）或`VERTICAL`（垂直）。这个脚本将滑块设置为`HORIZONTAL`。'
- en: '`label` sets the slider label. You label each slider in this script according
    to the LED color it controls.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label`设置滑块的标签。在这个脚本中，你根据每个滑块控制的LED颜色为每个滑块命名标签。'
- en: '`troughcolor` sets the background color of the slider. Each slider background
    is the color of the LED it controls.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`troughcolor`设置滑块的背景颜色。每个滑块的背景颜色与它控制的LED颜色相同。'
- en: '`length` defines the length of the slider in pixels. All of the sliders are
    set to `200`.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length`定义了滑块的长度，单位是像素。所有滑块的长度都设置为`200`。'
- en: '`command` dictates the procedure that will be called every time the slider
    is moved. In this case, moving the slider calls the `change_color()` function,
    which changes the LED’s duty cycle and thus the color it produces.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`command`决定了每次滑块移动时调用的程序。在这种情况下，移动滑块会调用`change_color()`函数，该函数改变LED的占空比，从而改变其显示的颜色。'
- en: 'After creating the slider, you use the `pack()` method to place the widgets
    in the main `window`. As you’re not passing any argument to the `pack()` method,
    the widgets are placed in the window according to the default settings: widgets
    fill only their minimal dimension, and they are packed against the top of the
    window or against the widget above.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 创建完滑块后，你使用`pack()`方法将小部件放置在主`window`中。因为没有给`pack()`方法传递任何参数，小部件会根据默认设置被放置：小部件仅填充其最小尺寸，并且会被排列在窗口顶部或上方的小部件旁边。
- en: 'Next, you create the Close button ➐ using the following syntax:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你使用以下语法创建了关闭按钮➐：
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In your code, you use these options:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的代码中，你使用了以下选项：
- en: '`text` defines the text that will be displayed on the button.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text`定义了按钮上显示的文本。'
- en: '`command` dictates the procedure that will be called when the button is pressed—here,
    the `close_window()` function, which closes the window.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`command`决定了当按钮被按下时调用的程序——在这里是`close_window()`函数，用于关闭窗口。'
- en: '**Using the Main Loop**'
  id: totrans-70
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**使用主循环**'
- en: The script’s final statement calls the `mainloop()` function ➑, which is an
    infinite loop that allows windows to be drawn and events to be processed. The
    `mainloop()` function is what keeps your program running.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的最终语句调用了`mainloop()`函数➑，这是一个无限循环，允许窗口被绘制并处理事件。`mainloop()`函数是保持程序运行的关键。
- en: '**Running the Script**'
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**运行脚本**'
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. Your interface
    window should pop up, as shown in [Figure 4-5](ch04.xhtml#ch04fig5).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 按下**F5**或选择**Run** ▸ **Run Module**来运行脚本。你的界面窗口应该会弹出，如[图4-5](ch04.xhtml#ch04fig5)所示。
- en: '![image](../images/f0069-01.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0069-01.jpg)'
- en: '**FIGURE 4-5:** The RGB LED controller user interface'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**图4-5：** RGB LED 控制器用户界面'
- en: Congratulations! You’ve made your own component user interface! Now try moving
    the sliders to change the LED color. When you change each slider’s position, the
    RGB LED color should change accordingly.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经制作了自己的组件用户界面！现在试着移动滑块来改变LED的颜色。当你改变每个滑块的位置时，RGB LED的颜色应该会相应变化。
- en: To close the program, just press the Close button.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要关闭程序，只需点击关闭按钮。
- en: '**TAKING IT FURTHER**'
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**更进一步**'
- en: 'Now that you know how to make a graphical user interface, we encourage you
    to edit its parameters to customize its look to suit your tastes. Here are some
    other project ideas you could try:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何制作图形用户界面，我们鼓励你编辑其参数，以定制界面的外观，符合你的个人喜好。这里有一些你可以尝试的其他项目想法：
- en: Build a graphical user interface that controls turning an LED on and off.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个图形用户界面，用来控制LED的开关。
- en: Make a graphical user interface that controls the brightness of the LED.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作一个图形用户界面，用来控制LED的亮度。
- en: Alter the user interface to control several LEDs.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改用户界面，以控制多个LED。
