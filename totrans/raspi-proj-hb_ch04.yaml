- en: '**4'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Graphical User Interface for a Multicolor LED**
  prefs: []
  type: TYPE_NORMAL
- en: In this project, we’ll introduce you to the multicolor RGB LED, and you’ll learn
    how to build a simple graphical user interface in Tkinter to control your electronics.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0062-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: Common cathode RGB LED
  prefs: []
  type: TYPE_NORMAL
- en: Three 330 Ω resistors
  prefs: []
  type: TYPE_NORMAL
- en: Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: '**INTRODUCING RGB LEDS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: RGB LEDs are three LEDs in one—red, green, and blue—that can produce almost
    any color by combining those three colors.
  prefs: []
  type: TYPE_NORMAL
- en: With an RGB LED you can, of course, produce red, green, and blue light, and
    by configuring the intensity of each LED, you can produce other colors as well.
    For example, to produce purely blue light, you’d set the blue LED to the highest
    intensity and the green and red LEDs to the lowest intensity. For a white light,
    you’d set all three LEDs to the highest intensity. [Figure 4-1](ch04.xhtml#ch04fig1)
    shows a simplified RGB color-mixing chart to give you an idea of how to combine
    red, green, and blue to produce different colors.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0063-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 4-1:** Simple RGB color mixing'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two kinds of RGB LEDs: a *common cathode* LED, where each color LED
    shares a negative connection, and a *common anode*, where each LED shares a positive
    connection. [Figure 4-2](ch04.xhtml#ch04fig2) illustrates a common anode and a
    common cathode LED.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0063-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 4-2:** Common anode and common cathode RGB LEDs'
  prefs: []
  type: TYPE_NORMAL
- en: RGB LEDs have four leads—one for each LED and another for the common anode or
    cathode. You can identify each lead by its length, as shown in [Figure 4-3](ch04.xhtml#ch04fig3).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0064-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 4-3:** Common anode and common cathode RGB LED leads'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the LED facing you so the anode or cathode (the longest lead) is second
    from the left, the leads should be in the following order: red, anode or cathode,
    green, and blue. We’ll be using a common cathode LED for this project, but if
    you already have a common anode LED it’s fine to use that; just watch out for
    the differences noted in the circuit wiring.'
  prefs: []
  type: TYPE_NORMAL
- en: '**WIRING THE CIRCUIT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Wiring an RGB LED to the Raspberry Pi is really straightforward and not much
    different than wiring a simple LED. You’ll need three current limiting resistors—one
    for each LED color.
  prefs: []
  type: TYPE_NORMAL
- en: Follow these instructions, using [Figure 4-4](ch04.xhtml#ch04fig4) as a reference.
  prefs: []
  type: TYPE_NORMAL
- en: Connect the LED pins in the breadboard and add a 330 Ω current-limiting resistor
    in series for each color lead.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect GND to the breadboard blue rail, and wire the RGB LED to the Raspberry
    Pi’s GPIO according to the following table, with red connected to GPIO 23, the
    cathode to GND, green to GPIO 24, and blue to GPIO 25\. Check [Figure 4-3](ch04.xhtml#ch04fig3)
    to make sure you’re orienting the LED correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: If you’re using a common anode RGB LED, connect the longest lead (the anode)
    to 3.3 V.
  prefs: []
  type: TYPE_NORMAL
- en: '| **RGB LED** | **RASPBERRY PI** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| First lead: red | GPIO 23 |'
  prefs: []
  type: TYPE_TB
- en: '| Second lead: cathode | GND |'
  prefs: []
  type: TYPE_TB
- en: '| Third lead: green | GPIO 24 |'
  prefs: []
  type: TYPE_TB
- en: '| Fourth lead: blue | GPIO 25 |'
  prefs: []
  type: TYPE_TB
- en: '![image](../images/f0065-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 4-4:** Wiring a common cathode RGB LED to the Raspberry Pi'
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE SCRIPT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In your script, you’ll use a library called Tkinter to create a user interface
    window in your desktop environment that you can use to control the RGB LED. Tkinter
    is already installed with your Raspbian system, so you just need to import it
    in your script.
  prefs: []
  type: TYPE_NORMAL
- en: The interface window will have three sliders (with values of `0` to `1`) to
    control the intensity of the built-in red, green, and blue LEDs, and a close button
    to shut down the program. By adjusting the values’ intensities with the sliders,
    you can change the color of the RGB LED.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a
    new script. Then, enter the following code into the Python Editor and save the
    script as *rgb_led_controller.py* inside the *LEDs* folder (remember that you
    can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**USER-DEFINED FUNCTIONS**'
  prefs: []
  type: TYPE_NORMAL
- en: To define a new function, you use the word `def` followed by the name you want
    to give the function and a set of parentheses.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the parentheses you add a colon (`:`) and then tell the function what
    instructions to perform. Python knows which instructions are part of the function
    definition by the use of the colon and indentation: every indented line after
    the colon is part of the function. Later, you can run the instructions you’ve
    set inside the function by entering the name of the function, also known as *calling*
    the function.'
  prefs: []
  type: TYPE_NORMAL
- en: First, you import `PWMLED` from the gpiozero library to control the LED with
    PWM, and import the tkinter library to build the user interface ➊. Next, you create
    the function to control the LED color. Remember that a function is basically a
    block of reusable code that will perform a certain action. Python has many built-in
    functions, like `print()`, `int()`, and `input()`, but you can also build your
    own *user-defined functions*, as in this script. Read the [“User-Defined Functions”](ch04.xhtml#ch04box1)
    box to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: '**Controlling the Intensity and Closing the Window**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `change_color()` function ➋ changes the LED’s duty cycle as you adjust the
    value of the slider, which in turn changes the intensity of the LED and therefore
    the color it produces. This function is called every time the sliders move, so
    you should see an instantaneous change on the LED when you move the slider. At
    ➍, you create `PWMLED` objects to refer to each color of the RGB LED.
  prefs: []
  type: TYPE_NORMAL
- en: The `close_window()` function ➌ closes the window with `window.destroy()`. This
    function is called when you press the Close button in the Tkinter interface. We’ll
    look at how to create the Tkinter interface next.
  prefs: []
  type: TYPE_NORMAL
- en: '**Designing the User Interface with Tkinter**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: At ➎, you define the main window of your interface. You create a variable called
    `window` that is a `tkinter` window with the line `window = Tk()`. You then give
    your window a title and set the window dimensions with the `title()` and `geometry()`
    methods, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating Sliders and Buttons**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: After creating the window, you can start adding the controls, known as *widgets*,
    like buttons, labels, and sliders. You’re using a `Button` widget to close the
    window and three `Scale` widgets to add the sliders to your window.
  prefs: []
  type: TYPE_NORMAL
- en: 'You then create three sliders, one for each RGB color ➏, using the following
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The master argument is the window you’ll add the widget to, and each option
    argument allows you to personalize your sliders. In the *rgb_led_controller.py*
    script, you use the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`from_` defines the lower end of the scale’s range.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to` defines the upper end of the scale’s range. In our case, the range is
    0 to 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resolution` sets the resolution of the slider—the minimum difference between
    two consecutive values. Here, the resolution is `0.01`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`orient` defines the slider orientation, either `HORIZONTAL` or `VERTICAL`.
    This script sets the sliders to `HORIZONTAL`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`label` sets the slider label. You label each slider in this script according
    to the LED color it controls.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`troughcolor` sets the background color of the slider. Each slider background
    is the color of the LED it controls.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`length` defines the length of the slider in pixels. All of the sliders are
    set to `200`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`command` dictates the procedure that will be called every time the slider
    is moved. In this case, moving the slider calls the `change_color()` function,
    which changes the LED’s duty cycle and thus the color it produces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After creating the slider, you use the `pack()` method to place the widgets
    in the main `window`. As you’re not passing any argument to the `pack()` method,
    the widgets are placed in the window according to the default settings: widgets
    fill only their minimal dimension, and they are packed against the top of the
    window or against the widget above.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you create the Close button ➐ using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In your code, you use these options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`text` defines the text that will be displayed on the button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`command` dictates the procedure that will be called when the button is pressed—here,
    the `close_window()` function, which closes the window.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using the Main Loop**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The script’s final statement calls the `mainloop()` function ➑, which is an
    infinite loop that allows windows to be drawn and events to be processed. The
    `mainloop()` function is what keeps your program running.
  prefs: []
  type: TYPE_NORMAL
- en: '**Running the Script**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. Your interface
    window should pop up, as shown in [Figure 4-5](ch04.xhtml#ch04fig5).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0069-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 4-5:** The RGB LED controller user interface'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You’ve made your own component user interface! Now try moving
    the sliders to change the LED color. When you change each slider’s position, the
    RGB LED color should change accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: To close the program, just press the Close button.
  prefs: []
  type: TYPE_NORMAL
- en: '**TAKING IT FURTHER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that you know how to make a graphical user interface, we encourage you
    to edit its parameters to customize its look to suit your tastes. Here are some
    other project ideas you could try:'
  prefs: []
  type: TYPE_NORMAL
- en: Build a graphical user interface that controls turning an LED on and off.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make a graphical user interface that controls the brightness of the LED.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alter the user interface to control several LEDs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
