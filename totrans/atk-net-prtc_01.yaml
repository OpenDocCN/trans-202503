- en: '**1**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1**'
- en: '**THE BASICS OF NETWORKING**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络基础**'
- en: To attack network protocols, you need to understand the basics of computer networking.
    The more you understand how common networks are built and function, the easier
    it will be to apply that knowledge to capturing, analyzing, and exploiting new
    protocols.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要攻克网络协议，你需要了解计算机网络的基础知识。你对常见网络的构建和运作方式了解得越多，应用这些知识来捕获、分析和利用新协议就越容易。
- en: Throughout this chapter, I’ll introduce basic network concepts you’ll encounter
    every day when you’re analyzing network protocols. I’ll also lay the groundwork
    for a way to think about network protocols, making it easier to find previously
    unknown security issues during your analysis.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将介绍你在分析网络协议时每天都会遇到的基本网络概念。我还将为你提供一种思考网络协议的方法，使得在分析过程中更容易发现以前未曾察觉的安全问题。
- en: '**Network Architecture and Protocols**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**网络架构和协议**'
- en: 'Let’s start by reviewing some basic networking terminology and asking the fundamental
    question: what is a network? A *network* is a set of two or more computers connected
    together to share information. It’s common to refer to each connected device as
    a *node* on the network to make the description applicable to a wider range of
    devices. [Figure 1-1](../Text/ch01.xhtml#ch1fig1) shows a very simple example.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从回顾一些基本的网络术语开始，并提出一个根本性的问题：什么是网络？一个*网络*是由两个或更多计算机通过连接共享信息的集合。通常会将每个连接的设备称为网络上的*节点*，以便这个描述适用于更广泛的设备。[图
    1-1](../Text/ch01.xhtml#ch1fig1)展示了一个非常简单的示例。
- en: '![image](../Images/f01-01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/f01-01.jpg)'
- en: '*Figure 1-1: A simple network of three nodes*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-1：一个简单的三节点网络*'
- en: The figure shows three nodes connected with a common network. Each node might
    have a different operating system or hardware. But as long as each node follows
    a set of rules, or *network protocol*, it can communicate with the other nodes
    on the network. To communicate correctly, all nodes on a network must understand
    the same network protocol.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图中展示了三个节点通过一个公共网络连接。每个节点可能有不同的操作系统或硬件。但只要每个节点遵循一套规则，或*网络协议*，它就可以与网络上的其他节点进行通信。为了正确通信，网络上的所有节点必须理解相同的网络协议。
- en: 'A network protocol serves many functions, including one or more of the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一个网络协议有许多功能，其中包括以下一种或多种：
- en: '**Maintaining session state** Protocols typically implement mechanisms to create
    new connections and terminate existing connections.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**保持会话状态** 协议通常实现机制来创建新的连接和终止现有连接。'
- en: '**Identifying nodes through addressing** Data must be transmitted to the correct
    node on a network. Some protocols implement an addressing mechanism to identify
    specific nodes or groups of nodes.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**通过寻址识别节点** 数据必须传输到网络上的正确节点。一些协议实现了寻址机制，用以识别特定节点或节点组。'
- en: '**Controlling flow** The amount of data transferred across a network is limited.
    Protocols can implement ways of managing data flow to increase throughput and
    reduce latency.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制流量** 通过网络传输的数据量是有限的。协议可以实现管理数据流的方法，以提高吞吐量并减少延迟。'
- en: '**Guaranteeing the order of transmitted data** Many networks do not guarantee
    that the order in which the data is sent will match the order in which it’s received.
    A protocol can reorder the data to ensure it’s delivered in the correct order.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**保证传输数据的顺序** 许多网络不能保证数据发送的顺序与接收的顺序一致。一个协议可以重新排序数据，以确保数据按正确顺序传递。'
- en: '**Detecting and correcting errors** Many networks are not 100 percent reliable;
    data can become corrupted. It’s important to detect corruption and, ideally, correct
    it.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**检测和纠正错误** 许多网络并不是百分之百可靠的；数据可能会损坏。检测损坏并理想地进行修复是非常重要的。'
- en: '**Formatting and encoding data** Data isn’t always in a format suitable for
    transmitting on the network. A protocol can specify ways of encoding data, such
    as encoding English text into binary values.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**格式化和编码数据** 数据并不总是以适合在网络上传输的格式存在。一个协议可以指定数据的编码方式，例如将英文文本编码为二进制值。'
- en: '**The Internet Protocol Suite**'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**互联网协议套件**'
- en: 'TCP/IP is the de facto protocol that modern networks use. Although you can
    think of TCP/IP as a single protocol, it’s actually a combination of two protocols:
    the *Transmission Control Protocol (TCP)* and the *Internet Protocol (IP)*. These
    two protocols form part of the *Internet Protocol Suite (IPS)*, a conceptual model
    of how network protocols send network traffic over the internet that breaks down
    network communication into four layers, as shown in [Figure 1-2](../Text/ch01.xhtml#ch1fig2).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: TCP/IP 是现代网络使用的事实标准协议。虽然你可以将 TCP/IP 看作一个单一的协议，但它实际上是由两个协议组合而成：*传输控制协议（TCP）*和*互联网协议（IP）*。这两个协议是*互联网协议套件（IPS）*的一部分，互联网协议套件是一个概念模型，描述了网络协议如何通过互联网发送网络流量，将网络通信分解为四个层次，如[图
    1-2](../Text/ch01.xhtml#ch1fig2)所示。
- en: '![image](../Images/f01-02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/f01-02.jpg)'
- en: '*Figure 1-2: Internet Protocol Suite layers*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-2：互联网协议套件层次*'
- en: 'These four layers form a *protocol stack*. The following list explains each
    layer of the IPS:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这四个层次构成了一个*协议栈*。以下列表解释了 IPS 的每一层：
- en: '**Link layer (layer 1)** This layer is the lowest level and describes the physical
    mechanisms used to transfer information between nodes on a local network. Well-known
    examples include Ethernet (both wired and wireless) and Point-to-Point Protocol
    (PPP).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**链路层（层 1）** 这一层是最低层，描述了用于在本地网络节点之间传输信息的物理机制。知名的例子包括以太网（有线和无线）和点对点协议（PPP）。'
- en: '**Internet layer (layer 2)** This layer provides the mechanisms for addressing
    network nodes. Unlike in layer 1, the nodes don’t have to be located on the local
    network. This level contains the IP; on modern networks, the actual protocol used
    could be either version 4 (IPv4) or version 6 (IPv6).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**互联网层（层 2）** 这一层提供了用于网络节点寻址的机制。与层 1 不同，节点不必位于本地网络中。这个层次包含了 IP；在现代网络中，实际使用的协议可以是版本
    4（IPv4）或版本 6（IPv6）。'
- en: '**Transport layer (layer 3)** This layer is responsible for connections between
    clients and servers, sometimes ensuring the correct order of packets and providing
    service multiplexing. Service multiplexing allows a single node to support multiple
    different services by assigning a different number for each service; this number
    is called a *port*. TCP and the User Datagram Protocol (UDP) operate on this layer.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**传输层（层 3）** 这一层负责客户端与服务器之间的连接，有时确保数据包的正确顺序并提供服务复用。服务复用允许单个节点通过为每个服务分配不同的编号来支持多个不同的服务；这个编号被称为*端口*。TCP
    和用户数据报协议（UDP）在这一层上运行。'
- en: '**Application layer (layer 4)** This layer contains network protocols, such
    as the *HyperText Transport Protocol (HTTP)*, which transfers web page contents;
    the *Simple Mail Transport Protocol (SMTP)*, which transfers email; and the *Domain
    Name System (DNS) protocol*, which converts a name to a node on the network. Throughout
    this book, we’ll focus primarily on this layer.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**应用层（层 4）** 这一层包含了网络协议，如*超文本传输协议（HTTP）*，用于传输网页内容；*简单邮件传输协议（SMTP）*，用于传输电子邮件；*域名系统（DNS）协议*，用于将名称转换为网络中的节点。在本书中，我们将主要关注这一层。'
- en: 'Each layer interacts only with the layer above and below it, but there must
    be some external interactions with the stack. [Figure 1-2](../Text/ch01.xhtml#ch1fig2)
    shows two external connections. The link layer interacts with a physical network
    connection, transmitting data in a physical medium, such as pulses of electricity
    or light. The application layer interacts with the user application: an *application*
    is a collection of related functionality that provides a service to a user. [Figure
    1-3](../Text/ch01.xhtml#ch1fig3) shows an example of an application that processes
    email. The service provided by the mail application is the sending and receiving
    of messages over a network.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 每一层只与上下层交互，但必须与栈外部进行某些交互。[图 1-2](../Text/ch01.xhtml#ch1fig2)展示了两个外部连接。链路层与物理网络连接交互，通过物理介质（如电信号或光脉冲）传输数据。应用层与用户应用程序交互：*应用程序*是一个相关功能的集合，为用户提供服务。[图
    1-3](../Text/ch01.xhtml#ch1fig3)展示了一个处理电子邮件的应用程序的例子。邮件应用程序提供的服务是通过网络发送和接收消息。
- en: '![image](../Images/f01-03.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/f01-03.jpg)'
- en: '*Figure 1-3: Example mail application*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-3：邮件应用程序示例*'
- en: 'Typically, applications contain the following components:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，应用程序包含以下组件：
- en: '**Network communication** This component communicates over the network and
    processes incoming and outgoing data. For a mail application, the network communication
    is most likely a standard protocol, such as SMTP or POP3.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络通信** 该组件通过网络进行通信，并处理进出数据。对于邮件应用程序，网络通信最有可能是标准协议，如SMTP或POP3。'
- en: '**Content parsers** Data transferred over a network usually contains content
    that must be extracted and processed. Content might include textual data, such
    as the body of an email, or it might be pictures or video.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**内容解析器** 通过网络传输的数据通常包含必须提取和处理的内容。内容可能包括文本数据，如邮件正文，或可能是图片或视频。'
- en: '**User interface (UI)** The UI allows the user to view received emails and
    to create new emails for transmission. In a mail application, the UI might display
    emails using HTML in a web browser.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户界面（UI）** UI允许用户查看已接收的邮件并创建新的邮件进行传输。在邮件应用程序中，UI可能会使用HTML在Web浏览器中显示邮件。'
- en: Note that the user interacting with the UI doesn’t have to be a human being.
    It could be another application that automates the sending and receiving of emails
    through a command line tool.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，与UI交互的用户不一定是人类。它也可以是一个自动化工具，通过命令行工具发送和接收邮件的其他应用程序。
- en: '**Data Encapsulation**'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**数据封装**'
- en: Each layer in the IPS is built on the one below, and each layer is able to encapsulate
    the data from the layer above so it can move between the layers. Data transmitted
    by each layer is called a *protocol data unit (PDU)*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: IPS中的每一层都建立在下层之上，每一层能够封装来自上一层的数据，使其能够在层之间传输。每层传输的数据被称为*协议数据单元（PDU）*。
- en: '***Headers, Footers, and Addresses***'
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***头部、尾部和地址***'
- en: The PDU in each layer contains the payload data that is being transmitted. It’s
    common to prefix a *header*—which contains information required for the payload
    data to be transmitted, such as the *addresses* of the source and destination
    nodes on the network—to the payload data. Sometimes a PDU also has a *footer*
    that is suffixed to the payload data and contains values needed to ensure correct
    transmission, such as error-checking information. [Figure 1-4](../Text/ch01.xhtml#ch1fig4)
    shows how the PDUs are laid out in the IPS.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 每一层中的PDU包含正在传输的有效载荷数据。通常会在有效载荷数据前加上*头部*——它包含传输有效载荷数据所需的信息，如网络中源节点和目标节点的*地址*。有时，PDU还会有一个*尾部*，它被附加到有效载荷数据后面，包含确保正确传输所需的值，例如错误检查信息。[图
    1-4](../Text/ch01.xhtml#ch1fig4)展示了PDU在IPS中的布局。
- en: '![image](../Images/f01-04.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/f01-04.jpg)'
- en: '*Figure 1-4: IPS data encapsulation*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-4：IPS数据封装*'
- en: The TCP header contains a source and destination port number ➊. These port numbers
    allow a single node to have multiple unique network connections. Port numbers
    for TCP (and UDP) range from 0 to 65535\. Most port numbers are assigned as needed
    to new connections, but some numbers have been given special assignments, such
    as port 80 for HTTP. (You can find a current list of assigned port numbers in
    the */etc/services* file on most Unix-like operating systems.) A TCP payload and
    header are commonly called a *segment*, whereas a UDP payload and header are commonly
    called a *datagram*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: TCP头部包含源端口和目标端口号 ➊。这些端口号允许单个节点拥有多个独特的网络连接。TCP（和UDP）的端口号范围为0到65535。大多数端口号会根据需要分配给新的连接，但有些端口号已经被特别指定，例如HTTP的端口80。（你可以在大多数类Unix操作系统的*/etc/services*文件中找到当前的端口号分配列表。）TCP的有效载荷和头部通常称为*段*，而UDP的有效载荷和头部通常称为*数据报*。
- en: The IP protocol uses a source and a destination address ➋. The *destination
    address* allows the data to be sent to a specific node on the network. The *source
    address* allows the receiver of the data to know which node sent the data and
    allows the receiver to reply to the sender.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: IP协议使用源地址和目标地址 ➋。*目标地址*使数据能够发送到网络中的特定节点。*源地址*使接收数据的节点知道是哪个节点发送了数据，并允许接收方回复发送者。
- en: IPv4 uses 32-bit addresses, which you’ll typically see written as four numbers
    separated by dots, such as 192.168.10.1\. IPv6 uses 128-bit addresses, because
    32-bit addresses aren’t sufficient for the number of nodes on modern networks.
    IPv6 addresses are usually written as hexadecimal numbers separated by colons,
    such as fe80:0000:0000:0000:897b:581e:44b0:2057\. Long strings of 0000 numbers
    are collapsed into two colons. For example, the preceding IPv6 address can also
    be written as fe80::897b:581e:44b0:2057\. An IP payload and header are commonly
    called a *packet*.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: IPv4使用32位地址，通常以四个数字用点分隔的形式表示，例如192.168.10.1。IPv6使用128位地址，因为32位地址不足以满足现代网络中节点的数量。IPv6地址通常以冒号分隔的十六进制数表示，例如fe80:0000:0000:0000:897b:581e:44b0:2057。连续的0000数字会被压缩成两个冒号。例如，前面的IPv6地址也可以写成fe80::897b:581e:44b0:2057。IP有效负载和头部通常被称为*数据包*。
- en: Ethernet also contains source and destination addresses ➌. Ethernet uses a 64-bit
    value called a *Media Access Control (MAC)* address, which is typically set during
    manufacture of the Ethernet adapter. You’ll usually see MAC addresses written
    as a series of hexadecimal numbers separated by dashes or colons, such as 0A-00-27-00-00-0E.
    The Ethernet payload, including the header and footer, is commonly referred to
    as a *frame*.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以太网还包含源地址和目标地址➌。以太网使用一个64位值，称为*媒体访问控制（MAC）*地址，通常在以太网适配器制造时设定。MAC地址通常以一系列用短横线或冒号分隔的十六进制数字表示，例如0A-00-27-00-00-0E。以太网的有效负载，包括头部和尾部，通常被称为*帧*。
- en: '***Data Transmission***'
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***数据传输***'
- en: Let’s briefly look at how data is transferred from one node to another using
    the IPS data encapsulation model. [Figure 1-5](../Text/ch01.xhtml#ch1fig5) shows
    a simple Ethernet network with three nodes.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要看看如何使用IPS数据封装模型将数据从一个节点传输到另一个节点。[图1-5](../Text/ch01.xhtml#ch1fig5)显示了一个简单的以太网网络，包含三个节点。
- en: '![image](../Images/f01-05.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/f01-05.jpg)'
- en: '*Figure 1-5: A simple Ethernet network*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-5：一个简单的以太网网络*'
- en: 'In this example, the node at ➊ with the IP address 192.1.1.101 wants to send
    data using the IP protocol to the node at ➋ with the IP address 192.1.1.50\. (The
    *switch* device ➌ forwards Ethernet frames between all nodes on the network. The
    switch doesn’t need an IP address because it operates only at the link layer.)
    Here is what takes place to send data between the two nodes:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，位于➊的节点，其IP地址为192.1.1.101，想要通过IP协议向位于➋的节点（IP地址为192.1.1.50）发送数据。（*交换机*设备➌在网络中的所有节点之间转发以太网帧。交换机不需要IP地址，因为它仅在链路层操作。）以下是两个节点之间传输数据时发生的过程：
- en: The operating system network stack node ➊ encapsulates the application and transport
    layer data and builds an IP packet with a source address of 192.1.1.101 and a
    destination address of 192.1.1.50.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作系统的网络协议栈节点➊封装应用层和传输层的数据，并构建一个IP数据包，源地址为192.1.1.101，目标地址为192.1.1.50。
- en: The operating system can at this point encapsulate the IP data as an Ethernet
    frame, but it might not know the MAC address of the target node. It can request
    the MAC address for a particular IP address using the Address Resolution Protocol
    (ARP), which sends a request to all nodes on the network to find the MAC address
    for the destination IP address.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作系统此时可以将IP数据封装为以太网帧，但可能不知道目标节点的MAC地址。它可以使用地址解析协议（ARP）请求特定IP地址的MAC地址，该协议向网络中的所有节点发送请求，以查找目标IP地址的MAC地址。
- en: Once the node at ➊ receives an ARP response, it can build the frame, setting
    the source address to the local MAC address of 00-11-22-33-44-55 and the destination
    address to 66-77-88-99-AA-BB. The new frame is transmitted on the network and
    is received by the switch ➌.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦位于➊的节点收到ARP响应，它可以构建帧，将源地址设置为本地MAC地址00-11-22-33-44-55，目标地址设置为66-77-88-99-AA-BB。新的帧被传输到网络上，并由交换机➌接收。
- en: The switch forwards the frame to the destination node, which unpacks the IP
    packet and verifies that the destination IP address matches. Then the IP payload
    data is extracted and passes up the stack to be received by the waiting application.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交换机将帧转发到目标节点，目标节点解包IP数据包并验证目标IP地址是否匹配。然后，IP有效负载数据被提取并传递到协议栈，等待应用程序接收。
- en: '**Network Routing**'
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**网络路由**'
- en: Ethernet requires that all nodes be directly connected to the same local network.
    This requirement is a major limitation for a truly global network because it’s
    not practical to physically connect every node to every other node. Rather than
    require that all nodes be directly connected, the source and destination addresses
    allow data to be *routed* over different networks until the data reaches the desired
    destination node, as shown in [Figure 1-6](../Text/ch01.xhtml#ch1fig6).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以太网要求所有节点直接连接到同一局域网。这个要求对真正的全球网络来说是一个主要限制，因为不可能将每个节点物理连接到每一个其他节点。为了避免要求所有节点都直接连接，源地址和目标地址允许数据在不同的网络上进行*路由*，直到数据到达所需的目的地节点，如[图1-6](../Text/ch01.xhtml#ch1fig6)所示。
- en: '![image](../Images/f01-06.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/f01-06.jpg)'
- en: '*Figure 1-6: An example of a routed network connecting two Ethernet networks*'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-6：连接两个以太网网络的路由网络示例*'
- en: '[Figure 1-6](../Text/ch01.xhtml#ch1fig6) shows two Ethernet networks, each
    with separate IP network address ranges. The following description explains how
    the IP uses this model to send data from the node at ➊ on network 1 to the node
    at ➋ on network 2.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[图1-6](../Text/ch01.xhtml#ch1fig6)显示了两个以太网网络，每个网络有不同的IP网络地址范围。以下描述解释了IP如何利用该模型将数据从网络1上的节点➊发送到网络2上的节点➋。'
- en: The operating system network stack node ➊ encapsulates the application and transport
    layer data, and it builds an IP packet with a source address of 192.1.1.101 and
    a destination address of 200.0.1.50.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作系统网络栈节点➊封装了应用层和传输层的数据，并构建了一个源地址为192.1.1.101、目标地址为200.0.1.50的IP数据包。
- en: The network stack needs to send an Ethernet frame, but because the destination
    IP address does not exist on any Ethernet network that the node is connected to,
    the network stack consults its operating system *routing table*. In this example,
    the routing table contains an entry for the IP address 200.0.1.50\. The entry
    indicates that a router ➌ on IP address 192.1.1.1 knows how to get to that destination
    address.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网络栈需要发送一个以太网帧，但由于目标IP地址在节点连接的任何以太网网络中都不存在，网络栈查询其操作系统的*路由表*。在此示例中，路由表包含了指向IP地址200.0.1.50的条目。该条目表明，IP地址192.1.1.1的路由器➌知道如何到达该目标地址。
- en: The operating system uses ARP to look up the router’s MAC address at 192.1.1.1,
    and the original IP packet is encapsulated within the Ethernet frame with that
    MAC address.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作系统使用ARP查找路由器192.1.1.1的MAC地址，原始IP数据包被封装在包含该MAC地址的以太网帧中。
- en: The router receives the Ethernet frame and unpacks the IP packet. When the router
    checks the destination IP address, it determines that the IP packet is not destined
    for the router but for a different node on another connected network. The router
    looks up the MAC address of 200.0.1.50, encapsulates the original IP packet into
    the new Ethernet frame, and sends it on to network 2.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 路由器接收到以太网帧并解包IP数据包。当路由器检查目标IP地址时，它发现该IP数据包不是发往路由器，而是发往另一个连接网络上的不同节点。路由器查找200.0.1.50的MAC地址，将原始IP数据包封装到新的以太网帧中，并将其发送到网络2。
- en: The destination node receives the Ethernet frame, unpacks the IP packet, and
    processes its contents.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目标节点接收到以太网帧，解包IP数据包并处理其内容。
- en: This routing process might be repeated multiple times. For example, if the router
    was not directly connected to the network containing the node 200.0.1.50, it would
    consult its own routing table and determine the next router it could send the
    IP packet to.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个路由过程可能会重复多次。例如，如果路由器没有直接连接到包含节点200.0.1.50的网络，它将查询自己的路由表，并确定可以将IP数据包发送到的下一台路由器。
- en: Clearly, it would be impractical for every node on the network to know how to
    get to every other node on the internet. If there is no explicit routing entry
    for a destination, the operating system provides a default routing table entry,
    called the *default gateway*, which contains the IP address of a router that can
    forward IP packets to their destinations.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，对于网络上的每个节点来说，知道如何到达互联网上的每个其他节点是不现实的。如果没有明确的路由条目指向某个目的地，操作系统会提供一个默认的路由表条目，称为*默认网关*，它包含了一个路由器的IP地址，该路由器可以将IP数据包转发到它们的目的地。
- en: '**My Model for Network Protocol Analysis**'
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**我的网络协议分析模型**'
- en: The IPS describes how network communication works; however, for analysis purposes,
    most of the IPS model is not relevant. It’s simpler to use my model to understand
    the behavior of an application network protocol. My model contains three layers,
    as shown in [Figure 1-7](../Text/ch01.xhtml#ch1fig7), which illustrates how I
    would analyze an HTTP request.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: IPS 描述了网络通信的工作原理；然而，出于分析目的，大部分 IPS 模型是不相关的。使用我的模型更简单，可以理解应用程序网络协议的行为。我的模型包含三个层次，如[图
    1-7](../Text/ch01.xhtml#ch1fig7)所示，图中展示了我如何分析一个 HTTP 请求。
- en: 'Here are the three layers of my model:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我的模型的三个层次：
- en: '**Content layer** Provides the meaning of what is being communicated. In [Figure
    1-7](../Text/ch01.xhtml#ch1fig7), the meaning is making an HTTP request for the
    file *image.jpg*.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**内容层** 提供了所传达内容的意义。在[图 1-7](../Text/ch01.xhtml#ch1fig7)中，意义就是发出一个 HTTP 请求以获取文件
    *image.jpg*。'
- en: '**Encoding layer** Provides rules to govern how you represent your content.
    In this example, the HTTP request is encoded as an HTTP GET request, which specifies
    the file to retrieve.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**编码层** 提供了如何表示内容的规则。在这个例子中，HTTP 请求被编码为一个 HTTP GET 请求，指定了要检索的文件。'
- en: '**Transport layer** Provides rules to govern how data is transferred between
    the nodes. In the example, the HTTP GET request is sent over a TCP/IP connection
    to port 80 on the remote node.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**传输层** 提供了关于如何在节点之间传输数据的规则。在这个例子中，HTTP GET 请求通过 TCP/IP 连接发送到远程节点的 80 端口。'
- en: '![image](../Images/f01-07.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/f01-07.jpg)'
- en: '*Figure 1-7: My conceptual protocol model*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-7：我的概念协议模型*'
- en: Splitting the model this way reduces complexity with application-specific protocols
    because it allows us to filter out details of the network protocol that aren’t
    relevant. For example, because we don’t really care how TCP/IP is sent to the
    remote node (we take for granted that it will get there somehow), we simply treat
    the TCP/IP data as a binary transport that just works.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这样划分模型可以减少应用特定协议的复杂性，因为它可以让我们过滤掉与网络协议无关的细节。例如，因为我们并不关心 TCP/IP 如何发送到远程节点（我们理所当然地认为它会以某种方式到达那里），我们只是将
    TCP/IP 数据视为一个简单的二进制传输，它就是能正常工作的。
- en: 'To understand why the protocol model is useful, consider this protocol example:
    imagine you’re inspecting the network traffic from some malware. You find that
    the malware uses HTTP to receive commands from the operator via the server. For
    example, the operator might ask the malware to enumerate all files on the infected
    computer’s hard drive. The list of files can be sent back to the server, at which
    point the operator can request a specific file to be uploaded.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解为什么协议模型有用，考虑这个协议示例：假设你正在检查某些恶意软件的网络流量。你发现恶意软件使用 HTTP 从服务器接收操作员的命令。例如，操作员可能要求恶意软件列举感染计算机硬盘上的所有文件。文件列表可以返回到服务器，届时操作员可以请求上传特定的文件。
- en: If we analyze the protocol from the perspective of how the operator would interact
    with the malware, such as by requesting a file to be uploaded, the new protocol
    breaks down into the layers shown in [Figure 1-8](../Text/ch01.xhtml#ch1fig8).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从操作员与恶意软件交互的角度来分析协议，例如请求上传一个文件，那么新协议会分解成[图 1-8](../Text/ch01.xhtml#ch1fig8)中显示的各层。
- en: '![image](../Images/f01-08.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/f01-08.jpg)'
- en: '*Figure 1-8: The conceptual model for a malware protocol using HTTP*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-8：使用 HTTP 的恶意软件协议的概念模型*'
- en: 'The following list explains each layer of the new protocol model:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表解释了新协议模型的每一层：
- en: '**Content layer** The malicious application is sending a stolen file called
    *secret.doc* to the server.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**内容层** 恶意应用程序正在将一个名为 *secret.doc* 的被盗文件发送到服务器。'
- en: '**Encoding layer** The encoding of the command to send the stolen file is a
    simple text string with a command `SEND` followed by the filename and the file
    data.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**编码层** 发送被盗文件的命令编码是一个简单的文本字符串，包含命令 `SEND`，后面跟着文件名和文件数据。'
- en: '**Transport layer** The protocol uses an HTTP request parameter to transport
    the command. It uses the standard percent-encoding mechanism, making it a legal
    HTTP request.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**传输层** 协议使用 HTTP 请求参数来传输命令。它使用标准的百分号编码机制，使其成为一个合法的 HTTP 请求。'
- en: Notice in this example that we don’t consider the HTTP request being sent over
    TCP/IP; we’ve combined the encoding and transport layer in [Figure 1-7](../Text/ch01.xhtml#ch1fig7)
    into just the transport layer in [Figure 1-8](../Text/ch01.xhtml#ch1fig8). Although
    the malware still uses lower-level protocols, such as TCP/IP, these protocols
    are not important to the analysis of the malware command to send a file. The reason
    it’s not important is that we can consider HTTP over TCP/IP as a single transport
    layer that just works and focus specifically on the unique malware commands.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在这个例子中，我们没有考虑通过TCP/IP发送的HTTP请求；我们已将[图 1-7](../Text/ch01.xhtml#ch1fig7)中的编码和传输层合并为[图
    1-8](../Text/ch01.xhtml#ch1fig8)中的传输层。虽然恶意软件仍然使用低层协议，如TCP/IP，但这些协议对分析恶意软件命令发送文件并不重要。原因是我们可以将基于TCP/IP的HTTP视为一个单独的传输层，它能够正常工作，进而专注于恶意软件命令的独特性。
- en: By narrowing our scope to the layers of the protocol that we need to analyze,
    we avoid a lot of work and focus on the unique aspects of the protocol. On the
    other hand, if we were to analyze this protocol using the layers in [Figure 1-7](../Text/ch01.xhtml#ch1fig7),
    we might assume that the malware was simply requesting the file *image.jpg*, because
    it would appear as though that was all the HTTP request was doing.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将我们的分析范围缩小到需要分析的协议层，我们可以避免大量工作，并专注于协议的独特方面。另一方面，如果我们使用[图 1-7](../Text/ch01.xhtml#ch1fig7)中的协议层来分析该协议，我们可能会认为恶意软件只是请求了文件*image.jpg*，因为看起来好像HTTP请求只是这么做的。
- en: '**Final Words**'
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**结束语**'
- en: This chapter provided a quick tour of the networking basics. I discussed the
    IPS, including some of the protocols you’ll encounter in real networks, and described
    how data is transmitted between nodes on a local network as well as remote networks
    through routing. Additionally, I described a way to think about application network
    protocols that should make it easier for you to focus on the unique features of
    the protocol to speed up its analysis.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 本章简要介绍了网络基础知识。我讨论了IPS，包括一些你在实际网络中会遇到的协议，并描述了数据如何通过本地网络的节点以及通过路由传输到远程网络。此外，我还介绍了一种思考应用程序网络协议的方法，这应该有助于你集中注意协议的独特特性，从而加速其分析。
- en: In [Chapter 2](../Text/ch02.xhtml#ch02), we’ll use these networking basics to
    guide us in capturing network traffic for analysis. The goal of capturing network
    traffic is to access the data you need to start the analysis process, identify
    what protocols are being used, and ultimately discover security issues that you
    can exploit to compromise the applications using these protocols.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](../Text/ch02.xhtml#ch02)中，我们将使用这些网络基础知识来指导我们捕获网络流量进行分析。捕获网络流量的目标是访问你需要的数据，以便开始分析过程，识别正在使用的协议，并最终发现你可以利用的安全问题，从而破坏使用这些协议的应用程序。
