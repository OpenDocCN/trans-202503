- en: '**18'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Digital Drum Set**
  prefs: []
  type: TYPE_NORMAL
- en: In this project you’ll create a button-controlled digital drum set with just
    a breadboard circuit and a few buttons. Pressing different buttons will produce
    different drum sounds, including two drumbeat loops.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0225-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: Eight pushbuttons
  prefs: []
  type: TYPE_NORMAL
- en: Headphones, or monitor with speakers connected to the Pi via HDMI
  prefs: []
  type: TYPE_NORMAL
- en: Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: '**SOFTWARE REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: avconv
  prefs: []
  type: TYPE_NORMAL
- en: This project uses samples from the Sonic Pi sample library, but you’re free
    to adapt it to use any sounds you want.
  prefs: []
  type: TYPE_NORMAL
- en: '**PREPARING THE AUDIO**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First you’ll need to configure the Raspberry Pi audio properly and get set up
    to use audio samples from Sonic Pi.
  prefs: []
  type: TYPE_NORMAL
- en: '**Configuring the Audio**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: First, plug your headphones or speakers into the Raspberry Pi audio jack. If
    your monitor has built-in speakers and is connected to the Pi with an HDMI cable,
    you don’t need to connect anything to the audio jack—you can listen to the sound
    through the monitor speakers.
  prefs: []
  type: TYPE_NORMAL
- en: On the top-right corner of your desktop environment, right-click the audio symbol
    and select the audio source as shown in [Figure 18-1](ch18.xhtml#ch18fig1). Select
    Analog if you’re using headphones, or HDMI if you’re using a monitor with speakers.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0226-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 18-1:** Selecting the audio source'
  prefs: []
  type: TYPE_NORMAL
- en: '**Getting the Audio Sample Files**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We won’t be covering Sonic Pi in this book, but if you want to explore it
    on your own, go to **Programming*** ▸ ***Sonic Pi** in the taskbar main menu to
    open the software and take a look around.*'
  prefs: []
  type: TYPE_NORMAL
- en: The Sonic Pi software comes installed in the Pi’s operating system and allows
    you to create your own digital music using code, but in this project you’ll just
    be using the Sonic Pi’s sample audio files.
  prefs: []
  type: TYPE_NORMAL
- en: In the terminal, enter the following commands to create a new folder called
    *Games_and_Toys* inside the *Projects* folder, and move into the new folder. You’ll
    save the samples here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then enter the following to copy the Sonic Pi’s *samples* folder to the *Games_and_Toys*
    folder (note that there is a space between the final `/` and the period at the
    end):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, enter these commands to list the contents of the *samples* folder to
    check that they transferred correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If all went as planned, you should see a list of files like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You may notice these files have the unusual extension *.flac*. This format
    is used in Sonic Pi, but to use them with Python you need to convert them to *.wav*
    files. For that, you’ll use the avconv software. Enter the following command to
    install avconv:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then enter the following command, which will go through all the files in the
    *samples* folder and convert each *.flac* file into a *.wav* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, use the `ls` command to list the items in your *samples* folder and check
    that you now have *.wav* files to work with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You should have both a *.wav* and a *.flac* file for each sample. To remove
    the *.flac* files from your *samples* folder, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You can double-check that you have the correct files with the `ls` command again
    if you like.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can play the sounds with the *omxplayer* software that’s installed on your
    operating system by default. To listen to the sample called *drum_snare_soft.wav*,
    enter the following at your command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you explore the samples files, you’ll see a wide variety of sounds, from
    guitar sounds to cow bell and drums. Choose eight different drum sounds to include
    in your drum set (or any other sounds that strike your fancy).
  prefs: []
  type: TYPE_NORMAL
- en: 'The sounds we’ve chosen are as follows; the last two are drum beats, while
    the others refer to single drum sounds:'
  prefs: []
  type: TYPE_NORMAL
- en: '*drum_cymbal_open.wav*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*drum_heavy_kick.wav*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*drum_snare_hard.wav*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*drum_cymbal_closed.wav*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*drum_roll.wav*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*perc_snap.wav*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*loop_amen_full.wav*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*loop_mika.wav*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WIRING THE CIRCUIT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The circuitry for this project simply involves wiring eight pushbuttons to the
    Pi. Each pushbutton is associated with a different sound.
  prefs: []
  type: TYPE_NORMAL
- en: To wire the circuit, follow these instructions, using [Figure 18-2](ch18.xhtml#ch18fig2)
    as a reference.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0228-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 18-2:** The digital drum set circuit'
  prefs: []
  type: TYPE_NORMAL
- en: Connect the GND pin to the breadboard GND rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert eight pushbuttons into the breadboard at equal distances over the center
    divide.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Connect the bottom-left pushbutton leads to GND and the bottom-right leads
    to one of the following GPIO pins in turn: GPIO 2, 3, 14, 15, 17, 18, 22, and
    27.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **PUSHBUTTON** | **RASPBERRY PI** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 1 | GPIO 2 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 2 | GPIO 3 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 3 | GPIO 14 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 4 | GPIO 15 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 5 | GPIO 17 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 6 | GPIO 18 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 7 | GPIO 22 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 8 | GPIO 27 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**WRITING THE SCRIPT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Copy the following code into the Python Editor and save the script as
    *digital_drum_set.py* inside the *Games_and_Toys* folder (remember that you can
    download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As usual, you start your script by importing the necessary libraries ➊. The
    new library here is the `pygame.mixer`, used for loading and playing sounds. From
    `pygame.mixer` you also import the `Sound` module, used to create sound objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then you initialize the Pygame mixer ➋ and create a dictionary that holds sounds
    ➌. In Python, a *dictionary* is a data structure used to store relationships between
    items. In this case, you’re associating a button with a specific sound. The basic
    structure of a dictionary is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The dictionary is enclosed by curly brackets, `{}`, and is composed of key/value
    pairs. You use a colon (`:`) to assign each key to its corresponding value, and
    you use commas (`,`) to separate each key/value pair.
  prefs: []
  type: TYPE_NORMAL
- en: In this project, the keys are the buttons, and the values are the sounds. To
    create a sound object, you pass the sound file path as a string to the `Sound()`
    function. In this case, since the *samples* folder is inside the *Games_and_Toys*
    folder, you don’t need to provide an entire path, just the folder name followed
    by the sound filename. You’ll need to change the sound filenames in this script,
    highlighted in bold, to your chosen sound files.
  prefs: []
  type: TYPE_NORMAL
- en: Next, assign each button to a sound effect ➍; this means that, when a pushbutton
    is pressed, the corresponding sound will play. Finally, the `pause()` function
    ➎ at the end of the script keeps the program running, so events can be detected.
  prefs: []
  type: TYPE_NORMAL
- en: To run the script, press **F5** or go to **Run** ▸ **Run Module**.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations—you’ve just built your own digital drum set! Now, press the
    pushbuttons and compose your own music clips.
  prefs: []
  type: TYPE_NORMAL
- en: '**TAKING IT FURTHER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This was a cool project and so simple to build. We encourage you to extend
    this project by trying the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding other sounds to your digital drum set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recording your own sounds or searching the web for free sounds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a digital piano, a digital guitar, or a hybrid music box with mixed
    sounds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
