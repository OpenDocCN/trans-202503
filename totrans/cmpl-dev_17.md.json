["```\nMONGO_URI=mongodb://backend:27017/foodfinder\nGITHUB_CLIENT_ID=`ADD_YOUR_CLIENT_ID_HERE`\nGITHUB_CLIENT_SECRET=`ADD_YOUR_CLIENT_SECRET_HERE` \n```", "```\n$ **docker exec -it foodfinder_application npm install next-auth**\n```", "```\nNEXTAUTH_SECRET=78f6cc4bf633b1102f4ca4d72602c60f\n```", "```\nimport GithubProvider from \"next-auth/providers/github\";\nimport {NextApiRequest, NextApiResponse} from \"next\";\nimport NextAuth from \"next-auth\";\nimport {createHash} from \"crypto\";\n\nconst createUserId = (base: string): string => {\n    return createHash(\"sha256\").update(base).digest(\"hex\");\n};\n\nexport default async function auth(req: NextApiRequest, res: NextApiResponse) {\n    return await NextAuth(req, res, {\n        providers: [\n            GithubProvider({\n                clientId: process.env.GITHUB_CLIENT_ID || \" \",\n                clientSecret: process.env.GITHUB_CLIENT_SECRET || \" \",\n            }),\n\n        ],\n        callbacks: {\n            async jwt({token}) {\n                if (token?.email && !token.fdlst_private_userId) {\n                    token.fdlst_private_userId = createUserId(token.email);\n                }\n                return token;\n            },\n async session({session}) {\n                if (\n                    session?.user?.email &&\n                    !session?.user.fdlst_private_userId\n                ) {\n                    session.user.fdlst_private_userId = createUserId(\n                        session?.user?.email\n                    );\n                }\n                return session;\n            },\n        },\n    });\n} \n```", "```\nimport mongoose from \"mongoose\";\n**import {DefaultSession} from \"next-auth\";**\n\ndeclare global {\n    var mongoose: mongoose;\n}\n\n**declare module \"next-auth\" {**\n **interface Session {**\n **user: {**\n **fdlst_private_userId: string;**\n **} & DefaultSession[\"user\"];**\n **}**\n**}** \n```", "```\nimport \"../styles/globals.css\";\nimport \"../styles/layout.css\";\nimport type {AppProps} from \"next/app\";\nimport Layout from \"components/layout\";\n**import {SessionProvider} from \"next-auth/react\";**\n\nexport default function App({\n    Component, **pageProps: {session, ...pageProps}**}: AppProps) {\n    return (\n **<SessionProvider session={session}>**\n            <Layout>\n                <Component {...pageProps} />\n            </Layout>\n **</SessionProvider>**\n    );\n} \n```", "```\n.root {\n    align-items: center;\n    border-radius: 5px;\n    color: #1d1f21;\n    cursor: pointer;\n    display: inline-flex;\n    font-weight: 500;\n    height: 35px;\n    letter-spacing: 0;\n    margin: 0;\n    overflow: hidden;\n    place-content: flex-start;\n    position: relative;\n    white-space: nowrap;\n}\n\n.root > a,\n.root > span {\n    padding: 0 1rem;\n    white-space: nowrap;\n}\n\n.root {\n    transition: border-color 0.25s ease-in, background-color 0.25s ease-in,\n        color 0.25s ease-in;\n    will-change: border-color, background-color, color;\n}\n\n.root.default,\n.root.default:link,\n.root.default:visited {\n    background-color: transparent;\n    border: 1px solid transparent;\n    color: #1d1f21;\n}\n\n.root.default:hover,\n.root.default:active {\n    background-color: transparent;\n    border: 1px solid #dbd8e3;\n    color: #1d1f21;\n}\n\n.root.blue,\n.root.blue:link,\n.root.blue:visited {\n    background-color: rgba(0, 118, 255, 0.9);\n    border: 1px solid rgba(0, 118, 255, 0.9);\n    color: #fff;\n    text-decoration: none;\n}\n\n.root.blue:hover,\n.root.blue:active {\n    background-color: transparent;\n    border: 1px solid #1d1f21;\n    color: #1d1f21;\n    text-decoration: none;\n}\n\n.root.outline,\n.root.outline:link,\n.root.outline:visited {\n    background-color: transparent;\n    border: 1px solid #dbd8e3;\n    color: #1d1f21;\n    text-decoration: none;\n}\n\n.root.outline:hover,\n.root.outline:active {\n    background-color: transparent;\n    border: 1px solid rgba(0, 118, 255, 0.9);\n    color: rgba(0, 118, 255, 0.9);\n    text-decoration: none;\n}\n\n.root.disabled,\n.root.disabled:link,\n.root.disabled:visited {\n    background-color: transparent;\n    border: 1px solid #dbd8e3;\n    color: #dbd8e3;\n    text-decoration: none;\n}\n\n.root.disabled:hover,\n.root.disabled:active {\n    background-color: transparent;\n    border: 1px solid #dbd8e3;\n    color: #dbd8e3;\n    text-decoration: none;\n} \n```", "```\nimport React from \"react\";\nimport styles from \"./index.module.css\";\n\ninterface PropsInterface {\n    disabled?: boolean;\n    children?: React.ReactNode;\n    variant?: \"blue\" | \"outline\";\n    clickHandler?: () => any;\n}\n\nconst Button = (props: PropsInterface): JSX.Element => {\n    const {children, variant, disabled, clickHandler} = props;\n\n    const renderContent = (children: React.ReactNode) => {\n        if (disabled) {\n            return (\n                <span className={styles.span}>\n                    {children}\n                </span>\n            );\n        } else {\n            return (\n                <span className={styles.span} onClick={clickHandler}>\n                    {children}\n                </span>\n            );\n        }\n    };\n\n    return (\n        <div\n            className={[\n                styles.root,\n                disabled ? styles.disabled : \" \",\n                styles[variant || \"default\"],\n            ].join(\" \")}\n        >\n            {renderContent(children)}\n        </div>\n    );\n};\n\nexport default Button; \n```", "```\n.root {\n    align-items: center;\n    display: flex;\n    justify-content: space-between;\n    margin: 0;\n    padding: 1rem 0;\n    width: auto;\n}\n\n.root > * {\n    margin: 0 0 0 2rem;\n}\n\n.name {\n    margin: 1rem 0 0 0;\n}\n\n@media (min-width: 600px) {\n    .name {\n        margin: 0 0 0 1rem;\n    }\n} \n```", "```\nimport Link from \"next/link\";\nimport {signIn, signOut, useSession} from \"next-auth/react\";\nimport Button from \"components/button\";\nimport styles from \"./index.module.css\";\n\nconst AuthElement = (): JSX.Element => {\n    const {data: session, status} = useSession();\n\n    return (\n        <>\n            {status === \"authenticated\" (\n                <span className={styles.name}>\n                    Hi <b>{session?.user?.name}</b>\n                </span>\n            )}\n\n <nav className={styles.root}>\n                {status === \"authenticated\" && (\n                    <>\n                        <Button variant=\"outline\">\n                            <Link\nhref={`/list/${session?.user.fdlst_private_userId}`}\n                            >\n                                Your wish list\n                            </Link>\n                        </Button>\n\n                        <Button variant=\"blue\" clickHandler={() => signOut()}>\n                            Sign out\n                        </Button>\n                    </>\n                )}\n                {status == \"unauthenticated\" && (\n                    <>\n                        <Button variant=\"blue\" clickHandler={() => signIn()}>\n                            Sign in\n                        </Button>\n                    </>\n                )}\n            </nav>\n        </>\n    );\n};\nexport default AuthElement; \n```", "```\nimport styles from \"./index.module.css\";\nimport Logo from \"components/header/logo\";\n**import AuthElement from \"components/header/auth-element\";**\nconst Header = (): JSX.Element => {\n    return (\n        <header className={styles.root}>\n            <div className=\"**layout-grid**\">\n                <Logo />\n **<AuthElement />**\n            </div>\n        </header>\n    );\n};\n\nexport default Header; \n```", "```\nimport type {\n    GetServerSideProps,\n    GetServerSidePropsContext,\n    NextPage,\n    PreviewData,\n    InferGetServerSidePropsType,\n} from \"next\";\nimport Head from \"next/head\";\nimport {ParsedUrlQuery} from \"querystring\";\n\nimport dbConnect from \"middleware/db-connect\";\nimport {onUserWishlist} from \"mongoose/locations/services\";\nimport {LocationType} from \"mongoose/locations/schema\";\nimport LocationsList from \"components/locations-list\";\n\nimport {useSession} from \"next-auth/react\";\n\nconst List: NextPage = (\n    props: InferGetServerSidePropsType<typeof getServerSideProps>\n) => {\n    const locations: LocationType[] = JSON.parse(props.data?.locations);\n    const userId: string | undefined = props.data?.userId;\n    const {data: session} = useSession();\n    let title = `The Food Finder- A personal wish list`;\n    let isCurrentUsers =\n        userId && session?.user.fdlst_private_userId === userId;\n    return (\n        <div>\n            <Head>\n                <title>{title}</title>\n                content={`The Food Finder. A personal wish list.`}\n            </Head>\n            <h1>\n                {isCurrentUsers ? \" Your \" : \" A \"}\n                wish list!\n            </h1>\n            {isCurrentUsers && locations?.length === 0 && (\n                <>\n                    <h2>Your list is currently empty! :(</h2>\n                    <p>Start adding locations to your wish list!</p>\n                </>\n            )}\n            <LocationsList locations={locations} />\n        </div>\n    );\n};\n\nexport const getServerSideProps: GetServerSideProps = async (\n    context: GetServerSidePropsContext<ParsedUrlQuery, PreviewData>\n) => {\n    let {userId} = context.query;\n    let locations: LocationType[] | [] = [];\n    try {\n        await dbConnect();\n        locations = await onUserWishlist(userId as string);\n    } catch (err: any) {}\n    return {\n        // the props will be received by the page component\n        props: {\n            data: {locations: JSON.stringify(locations), userId: userId},\n        },\n    };\n};\nexport default List; \n```", "```\nimport {LocationType} from \"mongoose/locations/schema\";\nimport styles from \"./index.module.css\";\n\n**import {useSession} from \"next-auth/react\";**\n**import {useEffect, useState} from \"react\";**\n**import Button from \"components/button\";**\n\ninterface PropsInterface {\n    location: LocationType;\n}\n\n**interface WishlistInterface {**\n **locationId: string;**\n **userId: string;**\n**}**\n\nconst LocationDetail = (props: PropsInterface): JSX.Element => {\n    let location: LocationType = props.location;\n\n    **const {data: session} = useSession();**\n **const [onWishlist, setOnWishlist] = useState<Boolean****>(false);**\n **const [loading, setLoading] = useState<Boolean>(false);**\n\n  **useEffect(() => {**\n **let userId = session?.user.fdlst_private_userId;**\n **setOnWishlist(**\n **userId && location.on_wishlist.includes(userId) ? true : false**\n **);**\n **}, [session]);**\n\n    **const wishlistAction = (props: WishlistInterface) => {**\n\n **const {locationId, userId} = props;**\n\n **if (loading) {return false;}**\n **setLoading(true);**\n\n **let action = !onWishlist ? \"addWishlist\" : \"removeWishlist\";**\n\n  **fetch(\"/api/graphql\", {**\n **method: \"POST\",**\n **headers: {**\n **\"Content-Type\": \"application/json\",**\n **},**\n **body: JSON.stringify({**\n                **query: `mutation wishlist {**\n **${action}(**\n **location_id: \"${locationId}\",**\n **user_id: \"${userId}\"**\n **) {**\n **on_wishlist**\n **}**\n **}`,**\n **}),**\n **})**\n **.then((result) => {**\n **if (result.status === 200) {**\n **setOnWishlist(action === \"addWishlist\" ? true : false);**\n **}**\n **})**\n **.finally(() => {**\n **setLoading(false);**\n **});**\n **};**\n\n    return (\n        <div>\n            {location && (\n                <ul className={styles.root}>\n                    <li>\n                        <b>Address: </b>\n                        {location.address}\n                    </li>\n                    <li>\n                        <b>Zipcode: </b>\n                        {location.zipcode}\n                    </li>\n                    <li>\n                        <b>Borough: </b>\n                        {location.borough}\n                    </li>\n                    <li>\n                        <b>Cuisine: </b>\n                        {location.cuisine}\n                    </li>\n                    <li>\n                        <b>Grade: </b>\n                        {location.grade}\n                    </li>\n                </ul>\n            )}\n\n            **{session?.user.fdlst_private_userId && (**\n **<Button**\n **variant={!onWishlist ? \"outline\" : \"blue\"}**\n **disabled={loading ? true : false}**\n **clickHandler={() =>**\n **wishlistAction({**\n **locationId: session?.user.fdlst_private_userId,**\n **userId: session?.user?.userId,**\n **})**\n **}**\n **>**\n **{onWishlist && <>Remove from your Wishlist</>}**\n **{!onWishlist && <>Add to your Wishlist</>}**\n **</Button>**\n **)}**\n\n        </div>\n    );\n};\nexport default LocationDetail; \n```", "```\n$ **curl -v \\**\n **-X POST \\**\n **-H \"Accept: application/json\" \\**\n **-H \"Content-Type: application/json\" \\**\n **-d '{\"query\":\"mutation wishlist {removeWishlist(location_id: \\\"12340\\\",**\n **user_id: \\\"exampleid\\\") {on_wishlist}}\"}' \\**\n **http://localhost:3000/api/graphql**\n\n< HTTP/1.1 200 OK\n<\n{\"data\":{\"removeWishlist\":{\"on_wishlist\":[]}}} \n```", "```\nimport {GraphQLError} from \"graphql/error\";\nimport {JWT} from \"next-auth/jwt\";\n\ninterface paramInterface {\n    user_id: string;\n    location_id: string;\n}\ninterface contextInterface {\n    token: JWT;\n}\n\nexport const authGuard = (\n    param: paramInterface,\n    context: contextInterface\n): boolean | Error => {\n\n ❶ if (!context || !context.token || !context.token.fdlst_private_userId) {\n        return new GraphQLError(\"User is not authenticated\", {\n            extensions: {\n                http: {status: 500},\n                code: \"UNAUTHENTICATED\",\n            },\n        });\n    }\n\n ❷ if (context?.token?.fdlst_private_userId !== param.user_id) {\n        return new GraphQLError(\"User is not authorized\", {\n            extensions: {\n                http: {status: 500},\n                code: \"UNAUTHORIZED\",\n            },\n        });\n    }\n    return true;\n}; \n```", "```\nimport {ApolloServer, BaseContext} from \"@apollo/server\";\nimport {startServerAndCreateNextHandler} from \"@as-integrations/next\";\n\nimport {resolvers} from \"graphql/resolvers\";\nimport {typeDefs} from \"graphql/schema\";\nimport dbConnect from \"middleware/db-connect\";\n\nimport {NextApiHandler, NextApiRequest, NextApiResponse} from \"next\";\n\n**import {getToken} from \"next-auth/jwt\";**\n\nconst server = new ApolloServer<BaseContext>({\n    resolvers,\n    typeDefs,\n});\n\nconst handler = startServerAndCreateNextHandler(server, {\n    context: async (**req:** **NextApiRequest**) => {\n        **const token = await getToken({req});**\n        return {**token**};\n    },\n});\n\nconst allowCors =\n    (fn: NextApiHandler) =>\n    async (req: NextApiRequest, res: NextApiResponse) => {\n        res.setHeader(\"Allow\", \"POST\");\n        res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n        res.setHeader(\"Access-Control-Allow-Methods\", \"POST\");\n        res.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n        res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n\n        if (req.method === \"OPTIONS\") {\n            res.status(200).end();\n        }\n        return await fn(req, res);\n    };\n\nconst connectDB =\n    (fn: NextApiHandler) =>\n    async (req: NextApiRequest, res: NextApiResponse) => {\n        await dbConnect();\n        return await fn(req, res);\n    };\n\nexport default connectDB(allowCors(handler)); \n```", "```\nimport {updateWishlist} from \"mongoose/locations/services\";\n**import {authGuard} from \"middleware/auth-guard\";**\n**import {JWT} from \"next-auth/jwt\";**\n\ninterface UpdateWishlistInterface {\n    user_id: string;\n    location_id: string;\n}\n\n**interface contextInterface {**\n **token: JWT;**\n**}**\n\nexport const locationMutations = {\n    removeWishlist: async (\n        _: any,\n        param: UpdateWishlistInterface,\n        **context: contextInterface**\n    ) => {\n\n **const guard = authGuard(param, context);**\n **if (guard !== true) {return guard;}**\n\n        return await updateWishlist(param.location_id, param.user_id, \"remove\");\n    },\n\n    addWishlist: async (\n        _: any,\n        param: UpdateWishlistInterface,\n        **context: contextInterface**\n    ) => {\n\n **const guard = authGuard(param, context);**\n **if (guard !== true) {return guard;}**\n\n        return await updateWishlist(param.location_id, param.user_id, \"add\");\n    },\n}; \n```", "```\n$ **curl -v \\**\n **-X POST \\**\n **-H \"Accept: application/json\" \\**\n **-H \"Content-Type: application/json\" \\**\n **-d '{\"query\":\"mutation wishlist {removeWishlist(location_id: \\\"12340\\\",**\n **user_id: \\\"exampleid\\\") {on_wishlist}}\"}' \\**\n **http://localhost:3000/api/graphql**\n\n< HTTP/1.1 500 Internal Server Error\n<\n{\n    \"errors\":[\n        {\n            \"message\":\"User is not authenticated\",\n            \"locations\": [{\"line\":1,\"column\":20}],\n            \"path\": [\"removeWishlist\"],\n            \"extensions\": {\"code\":\"UNAUTHENTICATED\",\"data\":null}\n        }\n    ]\n} \n```"]