- en: '**8'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**8'
- en: TEMPLATE INJECTION**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: TEMPLATE INJECTION**
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: A *template engine* is code that creates dynamic websites, emails, and other
    media by automatically filling in placeholders in the template when rendering
    it. By using placeholders, the template engine allows developers to separate application
    and business logic. For example, a website might use just one template for user
    profile pages with dynamic placeholders for profile fields, such as the user’s
    name, email address, and age. Template engines also usually provide additional
    benefits, such as user input sanitization features, simplified HTML generation,
    and easy maintenance. But these features don’t make template engines immune to
    vulnerabilities.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*模板引擎* 是一种通过在渲染时自动填充模板中的占位符来创建动态网站、电子邮件和其他媒体的代码。通过使用占位符，模板引擎使开发人员能够分离应用程序和业务逻辑。例如，一个网站可能仅使用一个模板来生成用户个人资料页面，并为个人资料字段（如用户的姓名、电子邮件地址和年龄）设置动态占位符。模板引擎通常还提供额外的好处，如用户输入清理功能、简化的
    HTML 生成和易于维护。但这些功能并不能使模板引擎免受漏洞的影响。'
- en: '*Template injection* vulnerabilities occur when engines render user input without
    properly sanitizing it, sometimes leading to remote code execution. We’ll cover
    remote code execution in more detail in [Chapter 12](ch12.xhtml#ch12).'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*模板注入* 漏洞发生在引擎渲染用户输入时未正确清理，可能导致远程代码执行。我们将在[第12章](ch12.xhtml#ch12)中更详细地讨论远程代码执行。'
- en: 'There are two types of template injection vulnerabilities: server side and
    client side.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的模板注入漏洞：服务器端和客户端。
- en: '**Server-Side Template Injections**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**服务器端模板注入**'
- en: '*Server-side template injection (SSTI)* vulnerabilities occur when the injection
    happens in the server-side logic. Because template engines are associated with
    specific programming languages, when an injection occurs, you may sometimes be
    able to execute arbitrary code from that language. Whether or not you can do this
    depends on the security protections the engine provides, as well as the site’s
    preventative measures. The Python Jinja2 engine has allowed arbitrary file access
    and remote code execution, as has the Ruby ERB template engine that Rails uses
    by default. In contrast, Shopify’s Liquid Engine allows access to a limited number
    of Ruby methods in an attempt to prevent full remote code execution. Other popular
    engines include PHP’s Smarty and Twig, Ruby’s Haml, Mustache, and so on.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*服务器端模板注入（SSTI）* 漏洞发生在服务器端逻辑中进行注入时。由于模板引擎与特定的编程语言相关联，当发生注入时，有时你可能能够执行该语言中的任意代码。是否能这样做取决于引擎提供的安全保护以及网站的防护措施。Python
    的 Jinja2 引擎曾允许任意文件访问和远程代码执行，Ruby 默认使用的 ERB 模板引擎也是如此。相比之下，Shopify 的 Liquid 引擎允许访问有限数量的
    Ruby 方法，以防止完全的远程代码执行。其他流行的引擎包括 PHP 的 Smarty 和 Twig、Ruby 的 Haml、Mustache 等。'
- en: To test for SSTI vulnerabilities, you submit template expressions using the
    specific syntax for the engine in use. For example, PHP’s Smarty template engine
    uses four braces `{{ }}` to denote expressions, whereas ERB uses a combination
    of angle brackets, percent symbols, and an equal sign `<%= %>`. Typical testing
    for injections on Smarty involves submitting `{{7*7}}` and looking for areas where
    inputs are reflected back on the page (such as in forms, URL parameters, and so
    on). In this case, you’d look for `49` rendered from the code `7*7` executing
    in the expression. If you find `49`, you’ll know that you successfully injected
    your expression and the template evaluated it.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 测试 SSTI 漏洞时，你需要使用该引擎特定的语法提交模板表达式。例如，PHP 的 Smarty 模板引擎使用四个大括号 `{{ }}` 来表示表达式，而
    ERB 使用尖括号、百分号和等号的组合 `<%= %>`。在 Smarty 上进行注入测试时，通常提交 `{{7*7}}` 并查找页面上回显输入的地方（例如表单、URL
    参数等）。在这种情况下，你需要查找由代码 `7*7` 执行后渲染出来的 `49`。如果你找到 `49`，说明你成功地注入了表达式，模板已对其进行了评估。
- en: Because the syntax isn’t uniform across all template engines, you must know
    the software used to build the site you’re testing. Tools like Wappalyzer and
    BuiltWith are specifically designed for this purpose. After identifying the software,
    use that template engine’s syntax to submit a simple payload, such as `7*7`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 由于不同的模板引擎语法不统一，因此你必须了解构建你正在测试的网站所使用的软件。像 Wappalyzer 和 BuiltWith 这样的工具专门用于此目的。在识别出软件后，使用该模板引擎的语法提交一个简单的有效载荷，例如`7*7`。
- en: '**Client-Side Template Injections**'
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**客户端模板注入**'
- en: '*Client-side template injection (CSTI)* vulnerabilities occur in client template
    engines and are written in JavaScript. Popular client template engines include
    Google’s AngularJS and Facebook’s ReactJS.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*客户端模板注入（CSTI）*漏洞出现在客户端模板引擎中，且这些模板引擎是用JavaScript编写的。流行的客户端模板引擎包括谷歌的AngularJS和Facebook的ReactJS。'
- en: 'Because CSTIs occur in the user’s browser, you typically can’t use them to
    achieve remote code execution, but you can use them for XSS. However, achieving
    XSS can sometimes be difficult and requires bypassing preventative measures, just
    as with SSTI vulnerabilities. For example, ReactJS does a great job of preventing
    XSS by default. When testing applications using ReactJS, you should search the
    JavaScript files for the function `dangerouslySetInnerHTML`, where you can control
    input provided to the function. This intentionally bypasses ReactJS’s XSS protections.
    With regard to AngularJS, versions earlier than 1.6 include a Sandbox that limits
    access to some JavaScript functions and protects against XSS (to confirm the AngularJS
    version, enter `Angular.version` in the developer console in your browser). But
    ethical hackers routinely found and released AngularJS Sandbox bypasses before
    the version 1.6 release. The following is a popular bypass for Sandbox versions
    1.3.0 to 1.5.7 that you can submit when you find an AngularJS injection:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于CSTI发生在用户的浏览器中，通常无法利用它们实现远程代码执行，但可以用它们来实现XSS。然而，实现XSS有时可能很困难，并且需要绕过预防措施，就像SSTI漏洞一样。例如，ReactJS通过默认设置有效地防止XSS。在测试使用ReactJS的应用程序时，你应该在JavaScript文件中查找函数`dangerouslySetInnerHTML`，因为你可以控制提供给该函数的输入。这故意绕过了ReactJS的XSS保护。关于AngularJS，1.6版本之前的版本包含了一个沙箱，限制了对某些JavaScript函数的访问，并防止了XSS（要确认AngularJS的版本，可以在浏览器的开发者控制台中输入`Angular.version`）。但是，伦理黑客通常会在1.6版本发布之前找到并发布AngularJS沙箱绕过方法。以下是一个流行的绕过方法，适用于1.3.0到1.5.7版本的沙箱，当你发现AngularJS注入时可以提交该方法：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You’ll find other published AngularJS Sandbox escapes at *[https://pastebin.com/xMXwsm0N](https://pastebin.com/xMXwsm0N)*
    and *[https://jsfiddle.net/89aj1n7m/](https://jsfiddle.net/89aj1n7m/)*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在* [https://pastebin.com/xMXwsm0N](https://pastebin.com/xMXwsm0N)*和* [https://jsfiddle.net/89aj1n7m/](https://jsfiddle.net/89aj1n7m/)*找到其他已发布的AngularJS沙箱绕过方法。
- en: Demonstrating the severity of a CSTI vulnerability requires you to test the
    code you can potentially execute. Although you might be able to evaluate some
    JavaScript code, some sites might have additional security mechanisms to prevent
    exploitation. For example, I found a CSTI vulnerability by using the payload `{{4+4}}`,
    which returned `8` on a site using AngularJS. But when I used `{{4*4}}`, the text
    `{{44}}` was returned because the site sanitized the input by removing the asterisk.
    The field also removed special characters, such as `()` and `[]`, and it allowed
    a maximum of 30 characters. Combined, these preventative measures effectively
    rendered the CSTI useless.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 演示CSTI漏洞的严重性需要测试你可能执行的代码。虽然你可能能够评估一些JavaScript代码，但有些网站可能有额外的安全机制来防止利用。例如，我通过使用负载`{{4+4}}`发现了一个CSTI漏洞，这在使用AngularJS的网站上返回了`8`。但是当我使用`{{4*4}}`时，返回的文本是`{{44}}`，因为该网站通过移除星号来清理输入。该字段还移除了特殊字符，例如`()`和`[]`，并且最多允许30个字符。结合这些预防措施，CSTI漏洞基本上变得无效。
- en: '**Uber AngularJS Template Injection**'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Uber AngularJS模板注入**'
- en: '**Difficulty:** High'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 高'
- en: '**URL:** *[https://developer.uber.com/](https://developer.uber.com/)*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**网址：** *[https://developer.uber.com/](https://developer.uber.com/)*'
- en: '**Source:** *[https://hackerone.com/reports/125027/](https://hackerone.com/reports/125027/)*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://hackerone.com/reports/125027/](https://hackerone.com/reports/125027/)*'
- en: '**Date reported:** March 22, 2016'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2016年3月22日'
- en: '**Bounty paid:** $3,000'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖励金额：** $3,000'
- en: In March 2016, James Kettle, the lead security researcher at PortSwigger (creator
    of Burp Suite) found a CSTI vulnerability in an Uber subdomain via the URL *https://developer.uber.com/docs/deep-linking?q=wrtz{{7*7}}*.
    If you viewed the rendered page source after visiting the link, you’d find the
    string `wrtz49`, showing that the template had evaluated the expression `7*7`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 2016年3月，PortSwigger（Burp Suite的创建者）首席安全研究员James Kettle在一个Uber子域名中发现了一个CSTI漏洞，通过URL
    *https://developer.uber.com/docs/deep-linking?q=wrtz{{7*7}}*。如果在访问链接后查看渲染的页面源代码，你会看到字符串`wrtz49`，这表明模板已经计算了表达式`7*7`。
- en: As it turned out, *[developer.uber.com](http://developer.uber.com)* used AngularJS
    to render its web pages. You could confirm this by using a tool such as Wappalyzer
    or BuiltWith or by viewing the page source and looking for `ng-` HTML attributes.
    As mentioned, older versions of AngularJS implemented a Sandbox, but the version
    Uber was using was vulnerable to a Sandbox escape. So in this case, a CSTI vulnerability
    meant you could execute XSS.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，*[developer.uber.com](http://developer.uber.com)* 使用 AngularJS 来渲染其网页。你可以通过使用像
    Wappalyzer 或 BuiltWith 这样的工具，或者查看页面源代码并查找 `ng-` HTML 属性来确认这一点。如前所述，旧版本的 AngularJS
    实现了 Sandbox，但 Uber 使用的版本存在 Sandbox 漏洞。因此，在这种情况下，CSTI 漏洞意味着你可以执行 XSS。
- en: 'Using the following JavaScript within the Uber URL, Kettle escaped the AngularJS
    Sandbox and executed the `alert` function:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下 JavaScript 代码在 Uber URL 中，Kettle 绕过了 AngularJS Sandbox 并执行了 `alert` 函数：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Deconstructing this payload is beyond the scope of this book, given the publication
    of numerous AngularJS Sandbox bypasses and the removal of the Sandbox in version
    1.6\. But the end result of the payload `alert(1)` is a JavaScript popup. This
    proof of concept demonstrated to Uber that attackers could exploit this CSTI to
    achieve XSS, resulting in potentially compromised developer accounts and associated
    apps.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对此有效载荷的解析超出了本书的范围，因为 AngularJS Sandbox 绕过的多种方法已经公开，并且 Sandbox 在版本 1.6 中被移除。但该有效载荷
    `alert(1)` 的最终结果是一个 JavaScript 弹窗。这个概念验证向 Uber 演示了攻击者如何利用这个 CSTI 漏洞实现 XSS，从而可能导致开发者账户和相关应用程序被攻击。
- en: '***Takeaways***'
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***重点总结***'
- en: After you confirm whether a site is using a client-side template engine, begin
    testing the site by submitting simple payloads using the same syntax as the engine,
    such as `{{7*7}}` for AngularJS, and watching for the rendered result. If the
    payload is executed, check which version of AngularJS the site is using by typing
    *Angular.version* in the browser console. If the version is greater than 1.6,
    you can submit a payload from the aforementioned resources without a Sandbox bypass.
    If it’s less than 1.6, you’ll need to submit a Sandbox bypass like Kettle’s, specific
    to the AngularJS version the application is using.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在确认一个站点是否使用客户端模板引擎后，通过提交简单的有效载荷，使用与该引擎相同的语法开始测试站点，例如对于 AngularJS 使用`{{7*7}}`，并观察渲染结果。如果有效载荷被执行，在浏览器控制台中输入*Angular.version*来检查站点使用的
    AngularJS 版本。如果版本大于 1.6，则可以提交来自上述资源的有效载荷而无需绕过 Sandbox。如果版本小于 1.6，则需要提交像 Kettle
    那样的 Sandbox 绕过方法，具体取决于应用程序使用的 AngularJS 版本。
- en: '**Uber Flask Jinja2 Template Injection**'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Uber Flask Jinja2 模板注入**'
- en: '**Difficulty:** Medium'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 中等'
- en: '**URL:** *[https://riders.uber.com/](https://riders.uber.com/)*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL:** *[https://riders.uber.com/](https://riders.uber.com/)*'
- en: '**Source:** *[https://hackerone.com/reports/125980/](https://hackerone.com/reports/125980/)*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://hackerone.com/reports/125980/](https://hackerone.com/reports/125980/)*'
- en: '**Date reported:** March 25, 2016'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2016年3月25日'
- en: '**Bounty paid:** $10,000'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖励金额：** $10,000'
- en: When you’re hacking, it’s important to identify the technologies a company uses.
    When Uber launched its public bug bounty program on HackerOne, it also included
    a “treasure map” on its site at *[https://eng.uber.com/bug-bounty/](https://eng.uber.com/bug-bounty/)*
    (a revised map was published in August 2017 at *[https://medium.com/uber-security-privacy/uber-bug-bounty-treasure-map-17192af85c1a/](https://medium.com/uber-security-privacy/uber-bug-bounty-treasure-map-17192af85c1a/)*).
    The map identified a number of sensitive properties Uber operated, including the
    software each one used.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行黑客攻击时，识别公司使用的技术是很重要的。当 Uber 在 HackerOne 上启动其公开的漏洞奖励计划时，它还在其网站上发布了一张“藏宝图”，网址为
    *[https://eng.uber.com/bug-bounty/](https://eng.uber.com/bug-bounty/)* （2017年8月发布了修订版，网址为
    *[https://medium.com/uber-security-privacy/uber-bug-bounty-treasure-map-17192af85c1a/](https://medium.com/uber-security-privacy/uber-bug-bounty-treasure-map-17192af85c1a/)*）。这张地图列出了
    Uber 运营的多个敏感属性，包括每个属性使用的软件。
- en: In its map, Uber disclosed that *[riders.uber.com](http://riders.uber.com)*
    was built with Node.js, Express, and Backbone.js, none of which immediately jumps
    out as a potential SSTI attack vector. But the sites *[vault.uber.com](http://vault.uber.com)*
    and *[partners.uber.com](http://partners.uber.com)* were developed using Flask
    and Jinja2\. Jinja2 is a server-side template engine that can allow remote code
    execution if implemented incorrectly. Although *[riders.uber.com](http://riders.uber.com)*
    didn’t use Jinja2, if the site supplied input to either the *vault* or *partners*
    subdomains and those sites trusted the input without sanitizing it, an attacker
    might be able to exploit an SSTI vulnerability.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在其地图中，Uber 透露 *[riders.uber.com](http://riders.uber.com)* 使用了 Node.js、Express
    和 Backbone.js，这些技术并不立即显现为潜在的 SSTI 攻击向量。但是，网站 *[vault.uber.com](http://vault.uber.com)*
    和 *[partners.uber.com](http://partners.uber.com)* 使用了 Flask 和 Jinja2。Jinja2 是一个服务器端模板引擎，如果实现不当，可能会允许远程代码执行。尽管
    *[riders.uber.com](http://riders.uber.com)* 并未使用 Jinja2，但如果该网站向 *vault* 或 *partners*
    子域提供输入，并且这些网站未对输入进行清理，那么攻击者可能会利用 SSTI 漏洞。
- en: Orange Tsai, the hacker who found this vulnerability, entered `{{1+1}}` as his
    name to begin testing for SSTI vulnerabilities. He searched for whether any interaction
    took place between the subdomains.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 发现此漏洞的黑客 Orange Tsai，将 `{{1+1}}` 输入为他的名字，以开始测试 SSTI 漏洞。他查找是否有任何交互发生在子域之间。
- en: In his write-up, Orange explained that any change to a profile on *[riders.uber.com](http://riders.uber.com)*
    would result in an email to the account owner notifying them of the change—a common
    security approach. By changing his name on the site to include `{{1+1}}`, he received
    an email with a `2` in his name, as shown in [Figure 8-1](ch08.xhtml#ch08fig01).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在他的报告中，Orange 解释说，任何对 *[riders.uber.com](http://riders.uber.com)* 上的个人资料的更改都会导致发送电子邮件通知账户所有者变更情况——这是常见的安全做法。通过将他的名字更改为包含
    `{{1+1}}`，他收到了带有 `2` 的名字的电子邮件，如图 [8-1](ch08.xhtml#ch08fig01) 所示。
- en: '![image](../images/08fig01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/08fig01.jpg)'
- en: '*Figure 8-1: The email Orange received executing the code he had injected into
    his name*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-1：Orange 执行他注入到自己名字中的代码后收到的电子邮件*'
- en: This behavior immediately raised a red flag because Uber evaluated his expression
    and replaced it with the result of the equation. Orange then tried to submit the
    Python code `{% for c in [1,2,3]%} {{c,c,c}} {% endfor %}` to confirm that a more
    complex operation could be evaluated. This code iterates over the array `[1,2,3]`
    and prints each number three times. The email in [Figure 8-2](ch08.xhtml#ch08fig02)
    shows Orange’s name displayed as nine numbers that resulted from the `for` loop
    executing, which confirmed his finding.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行为立即引起了警觉，因为 Uber 评估了他的表达式并将其替换为方程的结果。Orange 随后尝试提交 Python 代码 `{% for c in
    [1,2,3]%} {{c,c,c}} {% endfor %}` 以确认是否可以评估更复杂的操作。此代码遍历数组 `[1,2,3]`，并将每个数字打印三次。图
    [8-2](ch08.xhtml#ch08fig02) 中的电子邮件显示了 Orange 的名字作为九个数字，这是 `for` 循环执行后的结果，确认了他的发现。
- en: Jinja2 also implements a Sandbox, which limits the ability to execute arbitrary
    code but can occasionally be bypassed. In this case, Orange would have been able
    to do just that.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Jinja2 还实现了一个沙箱，限制了执行任意代码的能力，但有时可以被绕过。在这种情况下，Orange 本可以做到这一点。
- en: '![image](../images/08fig02.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/08fig02.jpg)'
- en: '*Figure 8-2: The email that resulted from Orange’s injection of more complex
    code*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8-2：因 Orange 注入更复杂的代码而导致的电子邮件*'
- en: Orange only reported the ability to execute code in his write-up, but he could
    have taken the vulnerability even further. In his write-up, he credited nVisium’s
    blog posts with providing the information necessary to find the bug. But these
    posts also contain additional information about the scope of Jinja2 vulnerabilities
    when combined with other concepts. Let’s take a slight detour to see how this
    added information applies to Orange’s vulnerability by looking at nVisium’s blog
    post at *[https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html](https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html)*.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Orange 在他的报告中仅报告了能够执行代码的能力，但他本可以将此漏洞利用得更进一步。在他的报告中，他将发现该漏洞所需的信息归功于 nVisium 的博客文章。但这些文章还包含了关于将
    Jinja2 漏洞与其他概念结合使用时的额外信息。让我们稍作偏离，看看这些附加信息如何应用于 Orange 的漏洞，并查看 nVisium 的博客文章 *[https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html](https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html)*。
- en: In the blog post, nVisium walks through exploiting Jinja2 by using *introspection*,
    an object-oriented programming concept. Introspection involves inspecting the
    properties of an object at runtime to see what data is available to it. The details
    of how object-oriented introspection works are beyond the scope of this book.
    In the context of this bug, introspection allowed Orange to execute code and identify
    what properties were available to the template object when the injection occurred.
    Once an attacker knows that information, they could find potentially exploitable
    properties they could use to achieve remote code execution; I’ll cover this vulnerability
    type in [Chapter 12](ch12.xhtml#ch12).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在博客文章中，nVisium展示了如何通过使用*自省*这一面向对象编程概念来利用Jinja2。自省是指在运行时检查对象的属性，看看有哪些数据可供访问。关于面向对象自省的具体细节超出了本书的范围。在这个漏洞的背景下，自省使得Orange能够执行代码并识别在注入发生时，模板对象可用的属性。一旦攻击者知道了这些信息，他们就可能找到可以利用的属性，从而实现远程代码执行；我将在[第12章](ch12.xhtml#ch12)中详细讨论这种漏洞类型。
- en: When Orange found this vulnerability, he simply reported the ability to execute
    the code necessary to perform the introspection rather than attempting to take
    the vulnerability further. It’s best to take Orange’s approach because it ensures
    you don’t perform any unintended actions; also, companies can assess the potential
    impact of the vulnerability. If you’re interested in exploring the full severity
    of an issue, ask the company in your report whether you can continue testing.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当Orange发现这个漏洞时，他仅报告了执行必要代码以进行自省的能力，而没有进一步尝试利用该漏洞。最好采用Orange的方法，因为这样可以确保你不会执行任何无意的操作；同时，公司也可以评估漏洞的潜在影响。如果你有兴趣探索问题的完整严重性，可以在报告中询问公司是否允许继续测试。
- en: '***Takeaways***'
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***要点总结***'
- en: Note the technologies a site uses; often, these lead to insights into how you
    can exploit the site. Be sure to also consider how the technologies interact with
    each other. In this case, Flask and Jinja2 were great attack vectors, although
    they weren’t directly used on the vulnerable site. As with XSS vulnerabilities,
    check all possible places your input might be used, because a vulnerability might
    not be immediately apparent. In this case, the malicious payload was rendered
    as plaintext on the user’s profile page, and the code was executed when emails
    were sent.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意一个网站使用的技术；这些技术常常为你如何利用该网站提供线索。还要考虑这些技术如何相互作用。在这种情况下，Flask和Jinja2是很好的攻击向量，尽管它们并未直接应用于存在漏洞的网站。与XSS漏洞类似，检查所有可能使用你输入的位置，因为漏洞可能不会立即显现。在这种情况下，恶意负载被作为纯文本渲染在用户的个人资料页面上，并且在发送电子邮件时执行了代码。
- en: '**Rails Dynamic Render**'
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Rails 动态渲染**'
- en: '**Difficulty:** Medium'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 中等'
- en: '**URL:** N/A'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**网址：** 不适用'
- en: '**Source:** *https://nvisium.com/blog/2016/01/26/rails-dynamic-render-to-rce-cve-2016-0752/*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *https://nvisium.com/blog/2016/01/26/rails-dynamic-render-to-rce-cve-2016-0752/*'
- en: '**Date reported:** February 1, 2015'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2015年2月1日'
- en: '**Bounty paid:** N/A'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**赏金支付：** 不适用'
- en: In early 2016, the Ruby on Rails team disclosed a potential remote code execution
    vulnerability in the way they handled rendering templates. A member of the nVisium
    team identified the vulnerability and provided a valuable write-up of the issue,
    assigned CVE-2016-0752\. Ruby on Rails uses a *model, view, controller architecture
    (MVC)* design. In this design, the database logic (the model) is separated from
    the presentation logic (the view) and the application logic (the controller).
    MVC is a common design pattern in programming that improves code maintainability.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在2016年初，Ruby on Rails团队披露了一个潜在的远程代码执行漏洞，该漏洞出现在他们处理渲染模板的方式中。nVisium团队的一名成员识别了该漏洞，并提供了一个有价值的问题分析，分配了CVE-2016-0752。Ruby
    on Rails使用*模型-视图-控制器架构（MVC）*设计。在这种设计中，数据库逻辑（模型）与表现逻辑（视图）和应用逻辑（控制器）分开。MVC是一种常见的编程设计模式，可以提高代码的可维护性。
- en: In its write-up, the nVisium team explains how Rails controllers, which are
    responsible for the application logic, can infer what template file to render
    based on user-controlled parameters. Depending on how the site was developed,
    these user-controlled parameters might be passed directly to the `render` method
    responsible for passing data to the presentation logic. The vulnerability could
    occur from a developer passing the input to the `render` function, such as by
    calling the `render` method and `params[:template]` where the `params[:template]`
    value is the dashboard. In Rails, all parameters from an HTTP request are available
    to the application controller logic via the `params` array. In this case, a parameter
    `template` is submitted in the HTTP request and passed to the `render` function.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在nVisium团队的报告中，解释了Rails控制器如何基于用户控制的参数推断出应该渲染哪个模板文件，这些控制器负责应用程序的逻辑。根据网站的开发方式，这些用户控制的参数可能会直接传递给负责传递数据给展示逻辑的`render`方法。漏洞可能出现在开发者将输入传递给`render`函数的情况下，比如调用`render`方法和`params[:template]`，其中`params[:template]`的值是仪表板。在Rails中，所有来自HTTP请求的参数都可以通过`params`数组访问应用程序控制器的逻辑。在这种情况下，`template`参数被提交到HTTP请求中并传递给`render`函数。
- en: 'This behavior is noteworthy because the `render` method provides no specific
    context to Rails; in other words, it doesn’t provide a path or link to a specific
    file and just automagically determines which file should return content to the
    user. It’s able to do this because Rails strongly implements convention over configuration:
    whatever template parameter value is passed to the `render` function is used to
    scan for filenames to render content with. According to the discovery, Rails would
    first recursively search the application root directory */app/views*. This is
    the common default folder for all files used to render content for users. If Rails
    couldn’t find a file using its given name, it scanned the application root directory.
    If it still couldn’t find the file, Rails scanned the server root directory.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个行为值得注意，因为`render`方法并未向Rails提供具体的上下文；换句话说，它并没有提供文件路径或链接，而是自动决定应该返回哪个文件的内容。它能做到这一点是因为Rails强烈执行"约定优于配置"的原则：无论传递给`render`函数的模板参数值是什么，都用来扫描文件名并渲染内容。根据发现，Rails会首先递归地搜索应用程序根目录*/app/views*。这是所有用于渲染用户内容的文件的常见默认文件夹。如果Rails未能找到匹配名称的文件，它会扫描应用程序根目录。如果仍然找不到文件，Rails会扫描服务器根目录。
- en: Before CVE-2016-0752, a malicious user could pass `template=%2fetc%2fpasswd`
    and Rails would look for the file */etc/passwd* in the views directory, then the
    application directory, and finally the server root directory. Assuming you were
    using a Linux machine and the file was readable, Rails would print your */etc/passwd*
    file.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在CVE-2016-0752漏洞之前，恶意用户可以传递`template=%2fetc%2fpasswd`，然后Rails会首先在视图目录中查找文件*/etc/passwd*，接着在应用程序目录中查找，最后在服务器根目录中查找。假设你使用的是Linux机器且该文件是可读的，Rails会打印出你的*/etc/passwd*文件。
- en: According to nVisium’s article, the search sequence Rails uses can also be used
    for arbitrary code execution when a user submits a template injection, such as
    ``<%25%3d`ls`%25>``. If the site uses the default Rails template language ERB,
    this encoded input is interpreted as ``<%= `ls` %>``, or the Linux command to
    list all files in the current directory. While the Rails team has fixed this vulnerability,
    you can still test for SSTI in case a developer passes user-controlled input to
    `render inline:` because `inline:` is used to supply ERB directly to the `render`
    function.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 根据nVisium的文章，Rails使用的搜索顺序也可以用于任意代码执行，当用户提交模板注入时，例如``<%25%3d`ls`%25>``。如果网站使用的是默认的Rails模板语言ERB，则此编码输入会被解释为``<%=
    `ls` %>`，即列出当前目录下所有文件的Linux命令。尽管Rails团队已修复了这个漏洞，但你仍然可以测试SSTI（服务器端模板注入），以防开发者将用户控制的输入传递给`render
    inline:`，因为`inline:`用于直接将ERB传递给`render`函数。
- en: '***Takeaways***'
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***重点总结***'
- en: Understanding how the software you’re testing works will help you uncover vulnerabilities.
    In this case, any Rails site was vulnerable if it was passing user-controlled
    input to the `render` function. Understanding the design patterns Rails uses undoubtedly
    helped to uncover this vulnerability. As with the template parameter in this example,
    be on the lookout for opportunities that arise when you control input that might
    be directly related to how content is being rendered.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 了解你正在测试的软件是如何工作的，这将帮助你发现漏洞。在这种情况下，任何使用`render`函数传递用户控制的输入的Rails站点都是脆弱的。了解Rails使用的设计模式无疑有助于发现这个漏洞。正如本例中的模板参数所示，当你控制的输入可能直接与内容渲染方式相关时，要留意可能出现的机会。
- en: '**Unikrn Smarty Template Injection**'
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Unikrn Smarty模板注入**'
- en: '**Difficulty:** Medium'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 中等'
- en: '**URL:** N/A'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL：** N/A'
- en: '**Source:** *[https://hackerone.com/reports/164224/](https://hackerone.com/reports/164224/)*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://hackerone.com/reports/164224/](https://hackerone.com/reports/164224/)*'
- en: '**Date reported:** August 29, 2016'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2016年8月29日'
- en: '**Bounty paid:** $400'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖励支付：** $400'
- en: On August 29, 2016, I was invited to the then-private bug bounty program for
    Unikrn, an eSports betting site. During my initial site reconnaissance, the Wappalyzer
    tool I was using confirmed that the site was using AngularJS. This discovery raised
    a red flag for me because I’d been successful at finding AngularJS injection vulnerabilities.
    I began looking for CSTI vulnerabilities by submitting `{{7*7}}` and looking for
    the number `49` rendered, beginning with my profile. Although I wasn’t successful
    on the profile page, I noticed you could invite friends to the site, so I also
    tested that functionality.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 2016年8月29日，我受邀参加当时的Unikrn私密漏洞悬赏计划，这是一个电子竞技博彩网站。在我对该站点的初步侦查中，我使用的Wappalyzer工具确认该站点使用了AngularJS。这个发现让我警觉，因为我之前曾成功发现过AngularJS注入漏洞。我开始通过提交`{{7*7}}`并观察是否渲染出数字`49`来寻找CSTI漏洞，首先是我的个人资料页面。尽管我在个人资料页面没有成功，但我注意到你可以邀请朋友访问该站点，于是我也测试了该功能。
- en: After submitting an invitation to myself, I received the odd email shown in
    [Figure 8-3](ch08.xhtml#ch08fig03).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 提交邀请后，我收到了如[图8-3](ch08.xhtml#ch08fig03)所示的奇怪邮件。
- en: '![image](../images/08fig03.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/08fig03.jpg)'
- en: '*Figure 8-3: The email I received from Unikrn with a Smarty error*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-3：我收到的来自Unikrn的Smarty错误邮件*'
- en: The beginning of the email included a stack trace with a Smarty error that showed
    `7*7` was not recognized. It looked as though `{{7*7}}` was being injected into
    the template, and Smarty was trying to evaluate the code but didn’t recognize
    `7*7`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 邮件的开头包含了一个堆栈跟踪，显示了一个Smarty错误，表明`7*7`没有被识别。看起来像是`{{7*7}}`被注入到了模板中，Smarty试图评估该代码，但未能识别`7*7`。
- en: I immediately consulted James Kettle’s indispensable article on template injection
    (*[http://blog.portswigger.net/2015/08/server-side-template-injection.html](http://blog.portswigger.net/2015/08/server-side-template-injection.html)*)
    to test the Smarty payload he referenced (he also provides a great Black Hat presentation
    available on YouTube). Kettle specifically referenced the payload `{self::getStreamVariable("file:///proc/self/loginuuid")}`,
    which calls the method `getStreamVariable` to read the file */proc/self/loginuuid*.
    I tried the payload he shared but received no output.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我立即查阅了James Kettle关于模板注入的必读文章（* [http://blog.portswigger.net/2015/08/server-side-template-injection.html](http://blog.portswigger.net/2015/08/server-side-template-injection.html)
    *），测试了他提到的Smarty载荷（他还提供了一个很棒的Black Hat演讲，YouTube上可以找到）。Kettle特别提到了载荷`{self::getStreamVariable("file:///proc/self/loginuuid")}`，它调用`getStreamVariable`方法读取文件*/proc/self/loginuuid*。我尝试了他分享的载荷，但没有收到输出。
- en: Now I was skeptical of my finding. But then I searched the Smarty documentation
    for its reserved variables, which included the `{$smarty.version}` variable that
    returns the version of Smarty being used. I changed my profile name to `{$smarty.version}`
    and reinvited myself to the site. The result was an invitation email that used
    2.6.18 as my name, which was the Smarty version installed on the site. My injection
    was being executed, and my confidence was restored.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我对自己的发现感到怀疑。但随后，我搜索了Smarty文档中的保留变量，找到了返回当前使用的Smarty版本的`{$smarty.version}`变量。我将我的个人资料名称更改为`{$smarty.version}`，并重新邀请自己访问该站点。结果是我收到了一个邀请邮件，邮件中使用了2.6.18作为我的名字，这正是站点上安装的Smarty版本。我的注入得以执行，我的信心也恢复了。
- en: When I continued to read the documentation, I learned that you can use the tags
    `{php} {/php}` to execute arbitrary PHP code (Kettle specifically mentions these
    tags in his article, but I had completely missed them). So, I tried the payload
    `{php}print "Hello"{/php}` as my name and submitted the invite again. The resulting
    email stated that Hello had invited me to the site, confirming that I had executed
    PHP’s `print` function.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当我继续阅读文档时，我了解到可以使用标签`{php} {/php}`来执行任意的PHP代码（Kettle在他的文章中特别提到了这些标签，但我完全没有注意到）。于是，我尝试了负载`{php}print
    "Hello"{/php}`作为我的名字，并再次提交了邀请。随后收到的邮件中指出是Hello邀请我加入该网站，确认我已经执行了PHP的`print`函数。
- en: 'As a final test, I wanted to extract the */etc/passwd* file to demonstrate
    the potential of this vulnerability to the bounty program. Although the */etc/passwd*
    file isn’t critical, accessing it is commonly used as a flag to demonstrate remote
    code execution. So I used the following payload:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最终测试，我想提取*/etc/passwd*文件，以向赏金计划展示这个漏洞的潜力。虽然*/etc/passwd*文件并不关键，但访问它通常作为标志，表明远程代码执行漏洞的存在。所以我使用了以下负载：
- en: '[PRE2]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This PHP code opens the */etc/passwd* file, reads its contents using `file_get_contents`,
    and assigns the contents to the `$s` variable. Once `$s` is set, I dump the contents
    of that variable using `var_dump`, expecting the email I receive will include
    the contents of */etc/passwd* as the name of the person who invited me to the
    Unikrn site. But strangely enough, the email I received had a blank name.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这段PHP代码打开*/etc/passwd*文件，使用`file_get_contents`读取文件内容，并将内容赋值给变量`$s`。一旦`$s`被设置，我通过`var_dump`输出该变量的内容，期望我收到的邮件中会包含*/etc/passwd*文件的内容，作为邀请我加入Unikrn网站的人的名字。但奇怪的是，我收到的邮件中名字为空白。
- en: 'I wondered whether Unikrn was limiting the length of names. This time I searched
    the PHP documentation for `file_get_contents`, which detailed how to limit the
    amount of data read at a time. I changed my payload to the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我想知道Unikrn是否限制了名字的长度。这次我搜索了PHP文档中的`file_get_contents`，文档详细说明了如何限制每次读取的数据量。我将负载更改为如下：
- en: '[PRE3]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The key parameters in this payload are `'/etc/passwd'`, `0`, and `100`. The
    path refers to the file to read, `0` instructs PHP where to start in the file
    (in this case at the beginning of the file), and `100` denotes the length of data
    to read. I reinvited myself to Unikrn using this payload, which produced the email
    shown in [Figure 8-4](ch08.xhtml#ch08fig04).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个负载中的关键参数是`'/etc/passwd'`、`0`和`100`。路径指向要读取的文件，`0`指示PHP从文件中的哪里开始读取（在本例中是从文件开头），而`100`表示要读取的数据长度。我使用这个负载重新邀请自己加入Unikrn，结果产生了如[图8-4](ch08.xhtml#ch08fig04)所示的邮件。
- en: '![image](../images/08fig04.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/08fig04.jpg)'
- en: '*Figure 8-4: The Unikrn invitation email showing contents of the* /etc/passwd
    *file*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8-4：Unikrn邀请邮件显示*/etc/passwd*文件内容*'
- en: I successfully executed arbitrary code and, as proof of concept, extracted the
    */etc/passwd* file 100 characters at a time. After I submitted my report, the
    vulnerability was fixed within the hour.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我成功执行了任意代码，并作为概念验证，每次提取*/etc/passwd*文件的100个字符。在我提交报告后，漏洞在一小时内得到了修复。
- en: '***Takeaways***'
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***收获***'
- en: Working on this vulnerability was great fun. The initial stack trace was a red
    flag that something was wrong, and as the saying goes, “Where there’s smoke, there’s
    fire.” If you find a potential SSTI, always read the documentation to determine
    how best to proceed—and be persistent.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 处理这个漏洞的过程非常有趣。最初的堆栈追踪是一个明显的警告，表明某些地方出问题了，正如谚语所说，“哪里有烟，哪里就有火”。如果你发现潜在的SSTI漏洞，一定要仔细阅读文档，确定如何最佳地进行操作——并保持坚持。
- en: '**Summary**'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: When you’re searching for vulnerabilities, it’s best to try to confirm the underlying
    technology (be it a web framework, frontend rendering engine, or something else)
    to identify possible attack vectors and ideas to test. The variety of template
    engines makes it difficult to determine what will and won’t work in all situations,
    but knowing which technology is being used will help you overcome that challenge.
    Be on the lookout for opportunities that arise when text you control is being
    rendered. Also, keep in mind that vulnerabilities might not be immediately apparent
    but could still exist in other functionality, such as in emails.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在寻找漏洞时，最好确认底层技术（无论是web框架、前端渲染引擎还是其他技术），以便识别可能的攻击面和测试思路。各种模板引擎的多样性使得很难确定哪些方法在所有情况下有效，但了解所使用的技术有助于克服这个挑战。当你控制的文本被渲染时，留意出现的漏洞机会。此外，也要记住，漏洞可能不会立即显现，但可能仍然存在于其他功能中，比如邮件中。
