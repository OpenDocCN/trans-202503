- en: '**6'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'TIC TAC TOE: USING LOOPS TO CREATE A GAME**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Programmers often write code that repeats a set of actions. For instance, they
    may want to display a password request each time a user enters the wrong password
    or search for the same phrase in thousands of files. To avoid copying and pasting
    the same lines of code over and over again, we use the repetition programming
    control structure or *loops*, which are code segments that repeat a task a specific
    number of times or until a certain condition is met. It’s easier to review and
    correct errors in a loop than multiple lines of repeated code.
  prefs: []
  type: TYPE_NORMAL
- en: '**USING LOOPS IN APP INVENTOR**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In App Inventor, you can control the flow of apps with three types of loops:
    a `for each number` loop that performs an action for each number in a given range,
    a `while` loop that repeats an action until a tested Boolean condition returns
    `false`, and a `for each item` loop that performs the same action on each item
    in a list. Next we’ll take a closer look at each of these.'
  prefs: []
  type: TYPE_NORMAL
- en: '**THE FOR EACH NUMBER LOOP**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We often use a `for each number` loop to calculate a series of numbers. The
    following event handler shows how a `for each number` loop calculates the sum
    of certain numbers in a given range.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0102-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: First, we initialize the global `sum` variable that holds the value to compute.
    Then we program the event handler to reset `sum` to `0` at each button click.
    This ensures that the app calculates the correct sum by erasing values from a
    previous click.
  prefs: []
  type: TYPE_NORMAL
- en: To create the `for each number` loop, we use a *counter variable* named `number`
    to count and control the number of times the app executes the code. Then we include
    a range of values, starting with the number in `from` and ending with the number
    in `to`. Inside the `by` socket, we insert a number that determines how much to
    increment the `number` variable between the loops. When you click the button,
    the app loops through and executes the blocks in the `for each` block’s `do` socket
    for each number in the range from 20 to 40, while increasing the value of `number`
    by 10 between each loop.
  prefs: []
  type: TYPE_NORMAL
- en: This means that, in the first loop, the code sets the value of the global `sum`
    variable to its current value (`0`) plus the value of the `number` variable (`20`),
    which equals `20`, and then increments the `number` variable to `30`. In the second
    loop, it sets `sum` to 20 + 30, or `50`, and then increments `number` to `40`.
    In the final loop, it sets `sum` to 50 + 40, or `90`, which is the sum we set
    out to compute. You can use this kind of code any time you want to compute the
    sum of numbers in a specific range incremented between each loop by a consistent
    number.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE WHILE LOOP**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A `while` loop repeats an action until a Boolean condition evaluates to `false`.
    The following event handler uses a `while` loop that chooses three random winners
    from 30 raffle tickets.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0102-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Before coding the event handler, we need to create an empty list variable named
    `raffleWinners` to hold the three randomly selected ticket numbers. We’ll use
    `raffleWinners` along with a relational operator (`<`) to set the `while` loop’s
    `test` condition. Before each loop, we test whether the length of, or number of
    items in, the `raffleWinners` list is less than 3.
  prefs: []
  type: TYPE_NORMAL
- en: We test for this condition because we want to execute the code in the `do` socket
    only three times to pick the three random raffle winners. As long as the length
    of `raffleWinners` is less than 3, we execute the code in the `while` loop’s `do`
    socket. Once the length of `raffleWinners` reaches a value of `3`, the loop ends,
    and we immediately execute the blocks beneath the loop.
  prefs: []
  type: TYPE_NORMAL
- en: When you click the button, while the test condition is `true`, the blocks in
    the `do` socket loop through and add a random integer between 1 and 30 to the
    `raffleWinners` list variable.
  prefs: []
  type: TYPE_NORMAL
- en: This means that, in the first loop when the length of `raffleWinners` is `0`,
    the app adds one random number to `raffleWinners`, which then increases its length
    to `1`. In the second loop, since the length of `raffleWinners` is still less
    than 3, the app repeats this action, adding another random number to `raffleWinners`,
    which then increases its length to `2`. In the third loop, since the length of
    `raffleWinners` is still less than 3, the app adds another random number to `raffleWinners`,
    which then increases its length to `3`, after which the test condition fails and
    the loop ends.
  prefs: []
  type: TYPE_NORMAL
- en: After the loop, the app displays `raffleWinners`, the list of randomly selected
    raffle winning numbers, in a label.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE FOR EACH ITEM LOOP**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We can use the `for each item` loop to repeat actions for each item in a list.
    Here is a `for each item` loop that we could add to “Beat the Bus” from [Chapter
    5](ch05.xhtml#ch05) so that users can provide their destination to all numbers
    in the list of phone numbers, instead of just one.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0103-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These blocks loop through the list of telephone numbers and text the location
    information to each number.
  prefs: []
  type: TYPE_NORMAL
- en: '**BUILDING THE “TIC TAC TOE” APP**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you’ll use two `for each item` loops and work more with the
    `Canvas` and `ImageSprite` components to create a “Tic Tac Toe” game app, where
    two players take turns touching empty squares on the `Canvas`. The first player
    who touches three empty squares in a row, either horizontally, vertically, or
    diagonally, wins the game. The app keeps track of the players’ turns and lets
    them reset the game to play again at any time.
  prefs: []
  type: TYPE_NORMAL
- en: Log in to App Inventor and create a project called TicTacToe.
  prefs: []
  type: TYPE_NORMAL
- en: '**DECOMPOSING “TIC TAC TOE”**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We can decompose the game activity into three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: When the app opens, display a nine-square Tic Tac Toe board and a reset button.
    Place an `ImageSprite` on top of each square on the board, which will display
    the X or O.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the first player touches an empty square on the board, display an X on
    that square. Then display a message that shows it’s the other player’s turn (O),
    and so on. When the last square gets filled, tell the players that the game is
    over!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When a player hits the reset button, remove all Xs and Os from the board along
    with all notices, and the app is ready for a new game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You’ll need the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: Button for a player to click to reset the game board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Canvas with a game board background for players to touch to play the game and
    on which to display X and O `ImageSprite`s
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Global variable (3) to store `ImageSprite`s and keep track of the current game
    player and number of plays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ImageSprite (9) to display X and O graphics on empty game board squares touched
    by players
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Label to display game notices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local variable to store the value of the touched `ImageSprite`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LAYING OUT “TIC TAC TOE” IN THE DESIGNER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Now let’s lay out the app in the Designer starting with `Screen1`. In the Properties
    pane for `Screen1`, set its AlignHorizontal property to **Center: 3** so that
    all components we place will sit in the middle of the screen toward the top.'
  prefs: []
  type: TYPE_NORMAL
- en: Then, to keep the screen’s orientation from changing when the device rotates,
    set ScreenOrientation to **Portrait**. Finally, remove the checkmark under TitleVisible
    to keep the title of the screen from showing when the app runs on a device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, drag the other necessary components from their drawers in the Palette
    pane onto the Viewer pane and adjust their properties. Drag in the `Label` from
    the User Interface drawer that will show the player’s turns. In the Properties
    pane, make its font bold and italic by clicking the checkboxes under FontBold
    and FontItalic, and change the FontSize to 30. Also, change the **Width** to **Fill
    parent**, remove the text under **Text**, set the TextAlignment to **center: 1**,
    and select **Magenta** as the TextColor.'
  prefs: []
  type: TYPE_NORMAL
- en: To create the reset button, place a Button from the User Interface drawer under
    the `Label`. In the Properties pane, change the `Button`’s BackgroundColor also
    to **Magenta**, make its FontBold, and increase FontSize to 20. Also, change the
    **Width** to **Fill parent**, and set the **Text** to Reset Game and TextColor
    to **White**.
  prefs: []
  type: TYPE_NORMAL
- en: Now drag in a Canvas from the Drawing and Animation drawer. Upload a background
    image of the Tic Tac Toe board by clicking the text box under `BackgroundImage`
    in the Properties pane and following the image upload instructions in “Uploading
    a Picture” on [page 27](ch02.xhtml#page_27). Also, set the `Canvas`’s **Height**
    and **Width** to 100 percent.
  prefs: []
  type: TYPE_NORMAL
- en: Drag onto the `Canvas` nine ImageSprites that will show the Xs and Os when the
    players touch the screen. In the Properties pane, set the X and Y properties to
    0 for those we want positioned in the three top and three left squares of the
    Tic Tac Toe board. We can do this now since we know that the 0 coordinate values
    for these five `ImageSprite`s won’t change no matter what size device a player
    uses. Set the 0 coordinates shown in [Table 6-1](ch06.xhtml#ch06tab1) as you drag
    the `ImageSprite`s to the `Canvas`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 6-1:** Initial `X` and `Y` Property Values for Top and Left `ImageSprite`s'
  prefs: []
  type: TYPE_NORMAL
- en: '| ImageSprite | **X property** | **Y property** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ImageSprite1` | `0` | `0` |'
  prefs: []
  type: TYPE_TB
- en: '| `ImageSprite2` |  | `0` |'
  prefs: []
  type: TYPE_TB
- en: '| `ImageSprite3` |  | `0` |'
  prefs: []
  type: TYPE_TB
- en: '| `ImageSprite4` | `0` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `ImageSprite7` | `0` |  |'
  prefs: []
  type: TYPE_TB
- en: We won’t set the other coordinates now, since their positions will change depending
    on screen size. Instead, we’ll program the app to set them as a fraction of the
    `Canvas` size when the app opens.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, upload the X and O images by clicking **Upload File…** in the Media
    pane and following the image upload instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Now all components should show in the Viewer, except for `Label1`, which doesn’t
    contain any text to start. You also should see the list of all app components
    in the Components pane and the names of the uploaded images in the Media pane,
    and `Screen1` should look like [Figure 6-1](ch06.xhtml#ch6fig1) (although, depending
    on where you dragged the `ImageSprite`s, they may not appear as neatly ordered).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-1: The Viewer, Component, and Media panes after you’ve laid out “Tic
    Tac Toe”*'
  prefs: []
  type: TYPE_NORMAL
- en: Now you’re ready to program the app in the Blocks Editor.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING “TIC TAC TOE”**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For “Tic Tac Toe,” we’ll program three event handlers. The first directs the
    app’s action when the screen initializes, and the others respond to the `Canvas
    TouchDown` and `Button Click` events. We’ll also create four variables to store
    important information, including a global list, and we’ll use several `if then`
    and two `for each item` loop blocks to direct the flow of the app’s action. Click
    the **Blocks** button to switch to the Blocks Editor, and let’s begin programming
    step 1.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 1: SETTING UP THE TIC TAC TOE GAME BOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the screen opens, we want players to see the nine-square Tic Tac Toe board
    and the reset button that we placed and styled in the Designer. At the same time,
    we want the app to respond to the `Screen1 Initialize` event by setting the width
    and height of the `ImageSprite`s and positioning one on each square of the game
    board. The `Screen1 Initialize` event handler programs the behind-the scenes action
    in step 1.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0107-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Creating the Global squares List Variable**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Before you code the event handler, you should create the global `squares` list
    variable to store the nine `ImageSprite`s that will display Xs and Os. Since the
    variable is global, we can use it in all event handlers to refer to the nine `ImageSprite`s.
    The following blocks declare and initialize the variable.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0107-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To place the blocks, click the **Variables** block drawer and drag an initialize
    global name block ➊ to the Viewer, click name, and replace it with squares. Then
    drag a make a list block ➋ from the Lists drawer, snap it to the right side of
    the initialize global squares block, and provide a socket for each of the nine
    `ImageSprite`s by adding seven more sockets to the make a list block’s two default
    inputs. To add the seven sockets, click the blue mutator icon to the left of the
    words `make a list`, and drag the additional item blocks to the list block in
    the dialog that opens.
  prefs: []
  type: TYPE_NORMAL
- en: Then, in the Blocks pane, click each ImageSprite in order from 1 to 9, and drag
    its ImageSprite getter block ➌ into its socket in the make a list block. We’ve
    now set the list items in `squares` to the nine `ImageSprite`s.
  prefs: []
  type: TYPE_NORMAL
- en: '**Looping Through ImageSprites in the squares List**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Now that you have the `squares` list, start the event handler by clicking Screen1
    in the Blocks pane and dragging the `whenScreen1.Initialize` block to the Viewer.
    Then add a `for each item` block that loops through the list of `ImageSprite`s
    and sets their width and height to match those of the game board squares.
  prefs: []
  type: TYPE_NORMAL
- en: Because the list contains a series of components, you’ll use the generic Any
    component blocks to access and manipulate the properties of all `ImageSprite`s
    in the loop without needing to specifically name each `ImageSprite`. You can find
    Any component blocks in the Blocks Editor window beneath the component-specific
    blocks in the Blocks pane, as shown in [Figure 6-2](ch06.xhtml#ch6fig2).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-2: The “Tic Tac Toe” app’s Any component blocks*'
  prefs: []
  type: TYPE_NORMAL
- en: Any app you create in App Inventor will include Any component blocks for each
    component added.
  prefs: []
  type: TYPE_NORMAL
- en: '**Setting the Width and Height of Each ImageSprite in the squares List**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: By setting the `Canvas` height and width to 100 percent of the screen size in
    the Designer earlier, we made sure both the `Canvas` and the squares in the `Canvas`’s
    game board background image will change proportionately whenever the device’s
    size changes. Likewise, by setting the width and height to a fraction of the `Canvas`
    size in the `for each item` loop, we make sure that the width and height of each
    `ImageSprite` will change proportionately with the size of the game board.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0108-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To place the loop, drag a for each item block ➊ from the Control blocks drawer
    to the Viewer and snap it inside the whenScreen1.Initialize block next to the
    word `do`. On the `for each item` block, you’ll notice the counter variable `item`,
    which represents each item in the list. Click the word item and enter a more meaningful
    name, sprite.
  prefs: []
  type: TYPE_NORMAL
- en: Then click the **Variables** blocks drawer, drag in a get global squares block
    ➋, and snap it to the right side of the for each sprite block next to the word
    `list`. So far, for each sprite in the global `squares` list variable, these blocks
    will cause the app to perform some action. Now let’s have the app set the width
    and height for each sprite.
  prefs: []
  type: TYPE_NORMAL
- en: To set the `ImageSprite`s’ width to one-third the `Canvas` width, click the
    plus sign to the left of **Any component** in the Blocks pane, click the **Any
    ImageSprite** drawer, and drag a setImageSprite.Width block ➌ inside the for each
    sprite block next to the word `do`. This generic setter block requires us to identify
    the `ImageSprite` we’re changing before providing the size we’re changing it to.
    To identify these values, fill its `of component` socket by mousing over the sprite
    counter variable and dragging in a get sprite block ➍. Fill its `to` socket with
    a multiplication operator block ➎ filled on the left with a Canvas1.Width block
    ➏ from the Canvas1 drawer and on the right with a 0.333 number block ➐.
  prefs: []
  type: TYPE_NORMAL
- en: To set the height of each sprite to one-fourth the `Canvas` height, make a copy
    of the setImageSprite.Width blocks and snap the duplicate blocks inside the for
    each sprite block under the setImageSprite.Width block. In the duplicate blocks,
    click the drop-down arrows in both the setImageSprite.Width block ➑ and the Canvas1.Width
    block ➒ and select Height. Replace `0.333` in the number block with 0.25 ➓.
  prefs: []
  type: TYPE_NORMAL
- en: '**Positioning ImageSprites on the Canvas**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Finally, we need to place each `ImageSprite` on the game board so that it lines
    up with the top-left point of its corresponding square, as shown in [Figure 6-3](ch06.xhtml#ch6fig3).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/06fig03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-3: Tic Tac Toe’s Canvas background image with labeled squares, columns,
    and rows*'
  prefs: []
  type: TYPE_NORMAL
- en: We want the x- and y-coordinates of `ImageSprite1` to be the top-left corner
    of square 1 (which is where `X` = 0 and `Y` = 0), the x- and y-coordinates of
    `ImageSprite2` to be the top-left corner of square 2, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In the Designer, we already set the `X` property of `ImageSprite1`, `ImageSprite4`,
    and `ImageSprite7` to `0`, because we want them in the left column of the `Canvas`
    over squares 1, 4, and 7\. We also set the `Y` property of `ImageSprite1`, `ImageSprite2`,
    and `ImageSprite3` to `0`, because we want them at the top row of the `Canvas`
    covering squares, 1, 2, and 3.
  prefs: []
  type: TYPE_NORMAL
- en: The following blocks set the `ImageSprite`s’ remaining x- and y-coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0110-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: First, set the x-coordinate of `ImageSprite2` to the farthest point at the left
    of square 2 on the game board in [Figure 6-3](ch06.xhtml#ch6fig3), which is the
    `Canvas` width multiplied by 0.333\. Place the setImageSprite2.Xto block ➊ inside
    the whenScreen1.Initialize block under the for each block. Then attach a multiplication
    operator block to the setImageSprite2.Xto block ➋, and fill it with a Canvas1.Width
    block ➌ and a 0.333 number block ➍. Now make 11 duplicates of the setImageSprite2.Xto
    block and make the changes shown in the code.
  prefs: []
  type: TYPE_NORMAL
- en: These duplicate blocks set the x-coordinates of `ImageSprite5` and `ImageSprite8`
    to the `Canvas` width multiplied by 0.333, which is the farthest point at the
    left of the Tic Tac Toe board’s center column on the board in [Figure 6-3](ch06.xhtml#ch6fig3),
    and the x-coordinates of `ImageSprite3`, `ImageSprite6`, and `ImageSprite9` to
    the `Canvas` width multiplied by 0.666, which is the farthest point at the left
    of the Tic Tac Toe board’s right column on the board in [Figure 6-3](ch06.xhtml#ch6fig3).
  prefs: []
  type: TYPE_NORMAL
- en: They also set the y-coordinates of `ImageSprite4`, `ImageSprite5`, and `ImageSprite6`
    to the `Canvas` height multiplied by 0.25, which is the very top point of the
    Tic Tac Toe board’s middle row on the board in [Figure 6-3](ch06.xhtml#ch6fig3),
    and the y-coordinates of `ImageSprite7`, `ImageSprite8`, and `ImageSprite9` to
    the `Canvas` height multiplied by 0.5, which is the very top point of the Tic
    Tac Toe board’s bottom row on the board in [Figure 6-3](ch06.xhtml#ch6fig3).
  prefs: []
  type: TYPE_NORMAL
- en: Now, with all of our step 1 blocks, we’ve programmed the app to respond to the
    `Screen1 Initialize` event by placing on each Tic Tac Toe board square an `ImageSprite`
    that shows no image, has the same width and height as the square, and is positioned
    with its top-left point at the top-left point of the square.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s live-test now with a device, as outlined in “Live-Testing Your Apps” on
    [page xxii](intro.xhtml#page_xxii). Click **Connect** ▸ **AI Companion** in the
    top menu bar and scan the QR code with your device’s AI2 Companion app. Your “Tic
    Tac Toe” app should open on your device, and you should see the game board and
    the reset button.
  prefs: []
  type: TYPE_NORMAL
- en: The app should have the invisible `ImageSprite`s on the `Canvas`, and you should
    see their width, height, and position after we program the `Canvas` `TouchDown`
    event handler in step 2\. Leave the app open on your device to keep live-testing.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 2: RESPONDING TO PLAYER MOVES**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In step 2, we’ll program the app to respond each time a player touches an empty
    square on the `Canvas` Tic Tac Toe game board. That’s when we want the app to
    perform several actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Determine which `ImageSprite` the player touched using the x- and y-coordinates
    of the place touched and a series of nested conditionals.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Determine whether player X or O touched the `Canvas` using the data stored in
    a global variable called `player`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Display a corresponding X or O graphic in the touched `ImageSprite`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the value of `player` to the opposite player.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keep track of the number of plays in a global variable called `play`. (There’s
    a total of nine possible plays in Tic Tac Toe.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Display a notice indicating who plays next, until the value of `play` equals
    `9`, when the notice should then read, “Game’s over!”
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We’ll start the code for step 2 by creating the two global variables: `player`
    and `play`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating Global Variables**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The first global variable, `player`, stores the value of the current player,
    either X or O. The second global variable, `play`, keeps track of the number of
    plays made in the game. Since both `player` and `play` are global, we can use
    them throughout the code in all event handlers. The following blocks initialize
    the `player` and `play` variables.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0111-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To create each variable, click the **Variables** block drawer and drag an initialize
    global name block ➊ to the Viewer, click name, and replace it with the variable
    name. Then, for `player`, since it will hold string data, drag an empty string
    block ➋ from the Text drawer, snap it to the right side of the initialize global
    player block, and give it the initial value for the first player, player X, by
    entering X in the empty string block.
  prefs: []
  type: TYPE_NORMAL
- en: Initialize `play`, which will hold numeric data representing the number of plays
    in the game, to the value of `0` by dragging a 0 number block ➌ from the Math
    drawer and snapping it to the right side of the initialize global play block.
  prefs: []
  type: TYPE_NORMAL
- en: '**Handling the Canvas TouchDown Event**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Now that we’ve created `player` and `play`, we have the data we’ll need for
    the step 2 `Canvas TouchDown` event handler.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0112-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When a player touches down on an empty square on the `Canvas` game board, we
    need the app to place the X image on the touched spot if player X touched it,
    and the O image if player O touched it. To do this, the app first needs to know
    which square on the board and corresponding `ImageSprite` the player touched.
    Fortunately, the `Canvas TouchDown` event handler includes two event parameters,
    `x` and `y`, that hold the x- and y-coordinates of the place touched. The app
    will use these coordinates to determine the game board square and `ImageSprite`
    touched.
  prefs: []
  type: TYPE_NORMAL
- en: We start by using the `x` and `y` event parameters to set the value of a local
    variable called `touchedSprite` to the `ImageSprite` that was touched. We do this
    by first testing a series of conditions to determine whether the player touched
    a square and its corresponding `ImageSprite` in the left column of the game board.
    If the player didn’t touch the left column, we test whether the player touched
    the center column, and then, if necessary, the right column.
  prefs: []
  type: TYPE_NORMAL
- en: Once we know the value of `touchedSprite`—the `ImageSprite` that the player
    touched—then the app can determine whether that `ImageSprite` is already displaying
    an image, and, if not, display either the X or O image, depending on which player
    touched the board.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating the Local touchedSprite Variable**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The following blocks from the `Canvas TouchDown` event handler determine which
    `ImageSprite` the player touched and then set it as the value of `touchedSprite`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0113-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: First, click Canvas1 in the Blocks pane and drag its whenCanvas1.TouchDown event
    handler block ➊ to the Viewer. Then, create the local variable `touchedSprite`
    by clicking the **Variables** blocks drawer, dragging the first initialize local
    name to in block inside the whenCanvas1.TouchDown block ➋ next to the word `do`,
    and changing name to touchedSprite.
  prefs: []
  type: TYPE_NORMAL
- en: This block sets the initial value of the local variable `touchedSprite` to the
    value of the blocks we snap into the `to` socket. Since `touchedSprite`’s scope
    is local, we can use it only in this `TouchDown` event handler in the blocks we
    snap next to the word `in` later in this step.
  prefs: []
  type: TYPE_NORMAL
- en: '**Testing Whether touchedSprite Is in the Left Column of the Game Board**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Now we’ll add the blocks that set the value for `touchedSprite`, which is the
    `ImageSprite` that displays on top of the square a player has touched. To figure
    out which spot on the board was touched, the app first tests whether the spot
    is located in the left column of the board in [Figure 6-3](ch06.xhtml#ch6fig3),
    which would mean the `x` parameter is less than or equal to the `Canvas` width
    multiplied by 0.33.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0114-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To place the blocks, click the **Control** blocks drawer and place an if then
    else block ➊ in the initialize local touchedSprite to in block’s to socket.
  prefs: []
  type: TYPE_NORMAL
- en: Fill the if then else block’s if socket with a `≤` comparison operator block
    ➋ from the Math drawer. Fill the `≤` operator block’s first socket by mousing
    over the whenCanvas1.TouchDown block’s x parameter and dragging in the get x block
    ➌. Fill the `≤` operator block’s second socket with a multiplication operator
    block ➍. Now fill the multiplication block by clicking Canvas1 in the Blocks pane
    and dragging its Canvas1.Width block ➎ into the left operand socket and snapping
    a 0.33 number block ➏ into the right operand socket.
  prefs: []
  type: TYPE_NORMAL
- en: These blocks check whether the sprite the player touched is in the game board’s
    left column, or `ImageSprite1`, `ImageSprite4`, or `ImageSprite7`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Testing Whether touchedSprite Is in the Top Row of the Left Column**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: If the first condition is true, we want the app to test the second condition,
    which is whether the `y` parameter of the touched spot is less than or equal to
    the `Canvas1` height multiplied by 0.25, or located in the top row of the game
    board. The following blocks test this second condition.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0114-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click the **Control** blocks drawer, drag in the second if then else block ➊,
    and snap it to the right of the first if then else block next to the word `then`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, fill the second if then else block’s if socket with a `≤` operator block
    ➋. Then fill the `≤` operator block’s first socket by mousing over the whenCanvas1.TouchDown
    block’s y parameter and dragging in the get y block ➌, and fill its second socket
    with a multiplication operator block ➍. Fill the multiplication block by dragging
    the Canvas1.Height block ➎ into the left socket and a 0.25 number block ➏ into
    the right socket. Finally, fill the second if then else block’s then socket by
    clicking ImageSprite1 in the Blocks pane and dragging in its ImageSprite1 getter
    block ➐.
  prefs: []
  type: TYPE_NORMAL
- en: Since we already know the player touched `ImageSprite1`, `ImageSprite4`, or
    `ImageSprite7`, we test whether the touched sprite is in the top row of the game
    board as shown in [Figure 6-3](ch06.xhtml#ch6fig3). If so, then we know that `touchedSprite`
    is `ImageSprite1` because it’s the only `ImageSprite` that meets both the first
    and second test conditions.
  prefs: []
  type: TYPE_NORMAL
- en: '**Testing Whether touchedSprite Is in the Middle Row of the Left Column**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: If the `touchedSprite` is in the left column of the game board but not in the
    top row, then the second condition would fail. In that case, we use the `if then
    else` block’s `else` socket to test whether the sprite is in the middle row of
    the game board.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0115-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Place another if then else block ➊ inside the second if then else block next
    to the word `else`. Next, fill the third if then else block’s if socket with an
    and logic operator block ➋ from the Logic drawer. The `and` logic block requires
    that both of its operands evaluate to `true` in order for the tested condition
    to be true.
  prefs: []
  type: TYPE_NORMAL
- en: The first `and` operand determines whether the y-coordinate of the touched spot
    is greater than the `Canvas1` height multiplied by 0.25\. Fill the and logic block’s
    first socket with a > operator block ➌, and fill the first socket of the > operator
    block with the get y block ➍ and the second socket with a × operator block ➎ that
    multiplies `Canvas1.Height` ➏ on the left by `0.25` ➐ on the right.
  prefs: []
  type: TYPE_NORMAL
- en: Now add the second `and` operand, which determines whether the y-coordinate
    of the touched spot is less than or equal to the Canvas1 height multiplied by
    0.5\. Fill the and logic block’s second socket by snapping a copy of the blocks
    in its first socket, clicking the drop-down arrow next to the > operator to change
    it to a `≤` operator block ➑, and changing the 0.25 number block to 0.5 ➒.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, add the blocks that tell the app the result if both of those conditions
    are true, which means that the `touchedSprite` is `ImageSprite4`. If either condition
    is not true, it means that `touchedSprite` is `ImageSprite7`. Fill the third if
    then else block’s then socket by clicking ImageSprite4 in the Blocks pane and
    dragging in its ImageSprite4 getter block ➓ and its else socket by dragging in
    the ImageSprite7 getter block.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if `touchedSprite` meets the first condition by being in the left column
    of the game board but fails the second condition because it’s not in the top row,
    the blocks test the third condition—whether the touched sprite is in the middle
    row of the game board. If so, then we know `touchedSprite` is `ImageSprite4`,
    because it’s the only `ImageSprite` that meets both the first and third conditions
    by being in both the left column and the middle row of the game board.
  prefs: []
  type: TYPE_NORMAL
- en: But if the third condition is not true, or the touched sprite is not in the
    middle row of the game board, then we know that `touchedSprite` must be `ImageSprite7`,
    because it’s the only remaining `ImageSprite` that meets the first condition—being
    located in the left column.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the blocks in the `to` socket of the `initalize local touchedSprite`
    block fill the `else` socket of the first `if then else` block and tell the app
    what to do if the touched sprite isn’t in the left column of the game board. In
    that case, we test whether the touched sprite is in the center column of the game
    board and, if not, then test whether it’s in the right column of the board.
  prefs: []
  type: TYPE_NORMAL
- en: To create the blocks to test whether the touched sprite is located in the center
    column, simply right-click the first if then else block and make a copy. Then
    snap the copy of the blocks into the first if then else block’s else socket, and
    make the few changes indicated in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: '**Testing Whether touchedSprite Is in the Center Column of the Game Board**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To determine which `ImageSprite` is `touchedSprite`, the first three `if then
    else` blocks test whether the spot touched is in the left column of the board.
    Next, we need to handle cases where `touchedSprite` isn’t in the left column at
    all by testing whether the spot touched on the game board is located in the center
    column. This would mean that the `x` parameter of the touched spot is greater
    than the `Canvas` width multiplied by 0.33 and less than or equal to the `Canvas`
    width multiplied by 0.66, and that `touchedSprite` is either `ImageSprite2`, `ImageSprite5`,
    or `ImageSprite8`.
  prefs: []
  type: TYPE_NORMAL
- en: These three `if then else` blocks test whether the touched spot is in the center
    column of the game board.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0116-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Make changes to the duplicate blocks that you snapped into the `whenCanvas1.TouchDown`
    event handler in the first `if then else` block’s `else` socket so they look exactly
    like those shown here.
  prefs: []
  type: TYPE_NORMAL
- en: These `if then else` blocks now represent the fourth condition we want the app
    to test—whether the touched sprite is in the center column of the game board—and
    tell the app what to do if the condition is met. If the touched sprite is in the
    game board’s center column (meaning it’s either `ImageSprite2`, `ImageSprite5`,
    or `ImageSprite8`), the blocks test the fifth condition, which is whether the
    touched sprite is in the top row of the game board. If this fifth condition is
    also true, then we know that `touchedSprite` is `ImageSprite2`.
  prefs: []
  type: TYPE_NORMAL
- en: But if the fifth condition is not true, the blocks test the sixth condition—whether
    the touched sprite is in the middle row of the game board. If so, then we know
    that `touchedSprite` is `ImageSprite5`, because it’s the only `ImageSprite` that
    meets both the fourth and sixth conditions, meaning it’s in both the center column
    and the middle row of the game board.
  prefs: []
  type: TYPE_NORMAL
- en: However, if the sixth condition is not true, meaning the touched sprite is not
    in the middle row of the game board, then `touchedSprite` has to be `ImageSprite8`,
    because it’s the only remaining `ImageSprite` that meets the fourth condition—being
    located in the center column.
  prefs: []
  type: TYPE_NORMAL
- en: '**Determining Whether touchedSprite Is in the Right Column of the Game Board**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: So far, the first six `if then else` blocks test whether the spot touched on
    the game board is located in the left or center columns of the board. Now we need
    to add blocks to handle cases in which `touchedSprite` isn’t in the left or center
    column but in the right column instead.
  prefs: []
  type: TYPE_NORMAL
- en: To determine whether the player touched `ImageSprite3`, `ImageSprite6`, or `ImageSprite9`,
    add the following blocks.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0117-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To place the blocks, copy the last two if then else blocks, snap the copy into
    the whenCanvas1.TouchDown event handler in the fourth if then else block’s else
    socket, and make changes so the blocks are identical to those shown here.
  prefs: []
  type: TYPE_NORMAL
- en: 'These last two `if then else` blocks now pose the seventh condition we want
    to test: whether the touched sprite, which by default must be in the right column,
    is also in the top row of the game board. If it is, then `touchedSprite` is `ImageSprite3`.'
  prefs: []
  type: TYPE_NORMAL
- en: But if the seventh condition is not true, the blocks test the eighth condition—whether
    the touched sprite is in the middle row of the game board. If so, then `touchedSprite`
    is `ImageSprite6`. However, if the eighth condition is not true, meaning the touched
    sprite is not in the middle row of the game board, then `touchedSprite` is `ImageSprite9`,
    because it’s the only `ImageSprite` left.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve assigned a value to `touchedSprite` (the `ImageSprite` that was
    touched by the player), we’ll use that value in the remainder of the `whenCanvas1.TouchDown`
    event handler. If the player touched an empty square on the board, we’ll use the
    data stored in `player` to determine whether it was player X or O who touched
    the board, or played; display a corresponding X or O graphic in the touched `ImageSprite`;
    and then change the value of `player` to the opposite player.
  prefs: []
  type: TYPE_NORMAL
- en: Also, since there are a total of nine possible plays in Tic Tac Toe, we’ll keep
    track of the number of plays in the `play` variable and display a notice indicating
    who plays next if the value of `play` is less than 9 and a notice that the game’s
    over if `play` is 9 or greater. The following blocks from the `whenCanvas1.TouchDown`
    event handler program these actions.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0118-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Testing Whether the Player Touched an Empty Square on the Game Board**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Now we need to determine whether the player touched an empty square on the board.
    This would mean that the name of the touched `ImageSprite`’s `Picture` is an empty
    string. The following blocks test that condition and, if the answer is yes, add
    1 to the value of the variable that keeps track of the number of game plays.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0119-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To add the blocks that test whether the name of the picture showing on `touchedSprite`
    is an empty string, drag an if then block ➊ from the Control drawer and snap it
    inside the whenCanvas1.TouchDown event handler next to the word `in` in the initialize
    local touchedSprite to in block. Then snap an = comparison operator block ➋ from
    the Logic drawer to the right of the word `if`.
  prefs: []
  type: TYPE_NORMAL
- en: Fill the first socket of the `=` block by clicking the **Any ImageSprite** drawer
    in the Blocks pane, dragging in an ImageSprite.Picture block ➌, and filling its
    socket with a get touchedSprite block ➍ from the Variables drawer. Fill the `=`
    operator block’s second socket with an empty string block ➎ from the Text drawer.
  prefs: []
  type: TYPE_NORMAL
- en: If the player touched an empty square on the board, then we want the app to
    count the player’s touch as a true game play and increment the value of the variable
    `play` by 1\. To increment `play` by 1 in the code, snap the set global play block
    ➏ from the Variables drawer to the right of the word `then` and an addition operator
    block ➐ next to the set global play block. Then fill the addition operator block
    on the left with the get global play block ➑ and on the right with a 1 number
    block ➒.
  prefs: []
  type: TYPE_NORMAL
- en: '**Displaying the Correct Image on touchedSprite**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Next we’ll tell the app which image to display on `touchedSprite` based on the
    value of the `player` variable and then change the value of `player` to the opposite
    player.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0119-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: First we’ll set up the test condition that determines if the value of the `player`
    variable equals `X`, which means that player X touched the `Canvas`. Place another
    if then block ➊ inside the whenCanvas1.TouchDown block under the set global play
    block. Click the if then block’s blue mutator icon to add an else input to the
    block. Then, snap an = operator block ➋ from the Logic drawer into the if socket,
    and fill its left side with a get global player block ➌ and its right side with
    a string block ➍ containing the letter `X`.
  prefs: []
  type: TYPE_NORMAL
- en: If the answer to the test condition is yes and the `player` variable equals
    X, we display X on `touchedSprite` and then change the value of `player` to `O`.
    To do this, fill the if then else block’s `then` socket by clicking the **Any
    ImageSprite** drawer in the Blocks pane, dragging in a setImageSprite.Picture
    block ➎, and filling its `of component` socket with a get touched Sprite block
    ➏ from the Variables drawer and its `to` socket with a string block ➐ from the
    Text drawer containing *PurpleX.png*, which is the name of the X graphic. Then,
    under the setImageSprite.Picture block, drag in a set global player block ➑ from
    the Variables drawer, and snap a string block ➒ from the Text drawer containing
    the letter `O` to the right of the word `to`.
  prefs: []
  type: TYPE_NORMAL
- en: If the answer to the test condition is no, meaning the `player` variable equals
    `O`, we display O on `touchedSprite` and change the value of `player` to `X`.
    Code this by copying the blocks we just placed in the if then else block’s then
    socket, snapping the copy into the if then else block’s else socket, and making
    two changes. Change the name of the graphic in the setImageSprite.Picture block’s
    bottom socket ➓ to PinkO.png. Then, change the O in the string block to the right
    of the set global player block to the letter X.
  prefs: []
  type: TYPE_NORMAL
- en: Altogether, the code tests whether the value of `player` is `X`, and, if so,
    direct the app to display the X graphic on `touchedSprite` and then change the
    value of `player` to `O`. If the value of `player` is not `X`, they tell the app
    to display the O graphic on `touchedSprite` and then change the value of `player`
    to `X`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Displaying Information on the Game’s Label**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The next blocks use a conditional to determine what to display on the app’s
    `Label`, depending on the value of the variable `play`, which we’ve already programmed
    the app to increase each time a player touches an empty square on the board. If
    `play` is less than 9, then we want the `Label` to indicate who plays next. But,
    if `play` equals or exceeds 9, we want the `Label` to say the game is over.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0120-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To add the blocks, drag another if then block ➊ from the Control drawer and
    snap it inside the whenCanvas1.TouchDown block under the prior if then else block.
    Click the new if then block’s blue mutator icon to add an else input. Then, to
    test whether `play` is less than 9, snap a < comparison operator block ➋ into
    the if socket and fill its left side with a get global play block ➌ from the Variables
    drawer and its right side with a 9 number block ➍
  prefs: []
  type: TYPE_NORMAL
- en: If the value of `play` is less than 9, the next blocks tell the app to indicate
    who plays next. Fill the then socket by clicking Label1 in the Blocks pane, dragging
    in its setLabel1.Textto block ➎, and then snapping a join block ➏ from the Text
    drawer next to the word `to`. Fill the join block’s top socket with the get global
    player block ➐ from the Variables drawer and the bottom socket with a string block
    ➑ from the Text drawer containing `'s turn...` to indicate which player’s turn
    it is.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, if `play` is not less than 9, the next blocks tell the app to say the
    game is over. Fill the if then else block’s else socket by dragging in another
    setLabel1.Textto block ➒ and snapping a string block ➓ from the Text drawer containing
    `Game's over!` next to the word `to`.
  prefs: []
  type: TYPE_NORMAL
- en: Altogether, these blocks test whether the value of `play`, which holds the number
    of times a player has played in the game, is less than 9\. If so, they direct
    the app to use the value of `player` to indicate whose turn it is to play next.
    However, if the value of `play` is 9 or more, they tell the app to indicate that
    the game is over.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s live-test now to see how the step 2 blocks work. As long as the blocks
    are placed correctly, once you open the app, you should see the game board and
    the reset button and be able to play the game.
  prefs: []
  type: TYPE_NORMAL
- en: When you touch an empty square, an X should appear in the square you touched,
    and the label above the reset button should display `O's turn`. Then, when the
    next empty square is touched, an O should appear in the touched square, and the
    label above the reset button should read `X's turn`, and so on, until the last
    empty square is touched and the label reads `Game's over!`. Since we haven’t yet
    programmed the reset button, nothing should happen when you click it. We’ll do
    that next.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 3: PROGRAMMING THE RESET BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s now program step 3 of the app—coding the `Button1 Click` event handler.
    When a player hits the reset button, we want all X and O images on the game board
    and all text in the label to disappear, and we want to reset `player` and `play`
    to their original values. The `Button1 Click` event handler programs these actions.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0121-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Clearing the Game Board**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To make the X and O images disappear, we’ll use another `for each item` and
    Any ImageSprite blocks to make the app loop though each `ImageSprite` and set
    the name of its `Picture` to an empty string so that it will no longer display
    an image.
  prefs: []
  type: TYPE_NORMAL
- en: Click Button1 in the Blocks pane and drag its whenButton1.Click event handler
    block ➊ to the Viewer. Then drag in a for each item block ➋ from the Control drawer
    and snap it inside the whenButton1.Click block next to the word `do`, and then
    change item to sprite.
  prefs: []
  type: TYPE_NORMAL
- en: Next, drag a get global squares block ➌ from the Variables drawer and snap it
    to the right of the for each sprite block next to the word `list`. Then, next
    to the word `do`, drag in a setImageSprite.Picture block ➍ from the Any ImageSprite
    drawer, and fill its first socket by mousing over sprite in the for each sprite
    block and dragging in its get sprite block ➎ and its second socket by snapping
    in an empty string block ➏. These blocks clear the game board of all Xs and Os
    when the player hits the button.
  prefs: []
  type: TYPE_NORMAL
- en: '**Resetting the Label and Global Variables**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Now let’s add the blocks that will restore `Label1` and the `player` and `play`
    variables to their original state.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0122-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click Label1 in the Blocks pane, drag its setLabel1.Text block ➊ in under the
    for each loop, and snap an empty string block ➋ into its socket. Then drag a set
    global player block ➌ from the Variables drawer, snap it under the setLabel1.Text
    block, and place another string block ➍ filled with an `X` into its socket. Finally,
    drag a set global play block ➎ from the Variables drawer, snap it under the set
    global player block, and place a 0 number block ➏ into its socket. These blocks
    make the `Label` text disappear and set `player` and `play` to their original
    `X` and `0` values.
  prefs: []
  type: TYPE_NORMAL
- en: Altogether, the blocks for step 3 direct the app to reset when a player hits
    Reset Game, just as we planned.
  prefs: []
  type: TYPE_NORMAL
- en: '**TESTING THE APP**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now we can test the completed app! When you look at your device, you should
    still see the game board and the reset button and be able to play the game just
    as you did when you last tested. And now, when you hit the reset button, all the
    X and O graphics should disappear along with the label text.
  prefs: []
  type: TYPE_NORMAL
- en: Also, behind the scenes, the `player` and `play` variables should reset as well,
    which you can test by beginning to play the game again. When you touch a square,
    an X graphic should appear and you should be allowed to touch all nine empty squares
    before the label displays “Game’s over!”
  prefs: []
  type: TYPE_NORMAL
- en: If your reset button doesn’t work as planned, debug and try again. Also reset
    your connection to AI2 Companion if necessary by clicking **Connect** ▸ **Reset
    Connection** in the top menu bar and then clicking **Connect** ▸ **AI Companion**
    and scanning the QR code. If you placed your blocks correctly, the app should
    work as expected, and you’ve successfully created the “Tic Tac Toe” game app!
  prefs: []
  type: TYPE_NORMAL
- en: '**SUMMARY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you built the “Tic Tac Toe” app, which uses the App Inventor
    `Canvas` and `ImageSprite` components to create a Tic Tac Toe game for two players.
    As you built the app, you learned how to create a list of components, access the
    components’ properties using Any component blocks, and iterate through the list
    with `for each` loops to set up and help control the flow of the game. You worked
    more extensively with `if then` and logical and comparison operator blocks to
    control app flow as well.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll learn how to make your code reusable by writing
    *procedures*—called *methods* and *functions* in some programming environments—using
    the Procedures blocks. You’ll create and call procedures in your code for the
    “Multiplication Station II” app, which will allow users to choose from one of
    two difficulty levels of timed multiplication problems.
  prefs: []
  type: TYPE_NORMAL
- en: '**ON YOUR OWN**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Save new versions of “Tic Tac Toe” as you modify and extend it for these exercises.
    You can find solutions online at *[https://nostarch.com/programwithappinventor/](https://nostarch.com/programwithappinventor/)*.
  prefs: []
  type: TYPE_NORMAL
- en: Extend the game so that it indicates when a player has won the game, meaning
    a player has placed Xs or Os in three squares in a row, either horizontally, vertically,
    or diagonally.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extend the app further so that it uses an additional component to indicate which
    player has won the game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
