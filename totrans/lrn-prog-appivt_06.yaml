- en: '**6'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**6'
- en: 'TIC TAC TOE: USING LOOPS TO CREATE A GAME**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'TIC TAC TOE: 使用循环创建游戏**'
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/common.jpg)'
- en: Programmers often write code that repeats a set of actions. For instance, they
    may want to display a password request each time a user enters the wrong password
    or search for the same phrase in thousands of files. To avoid copying and pasting
    the same lines of code over and over again, we use the repetition programming
    control structure or *loops*, which are code segments that repeat a task a specific
    number of times or until a certain condition is met. It’s easier to review and
    correct errors in a loop than multiple lines of repeated code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员经常编写重复执行一组操作的代码。例如，他们可能希望每次用户输入错误密码时都显示密码请求，或者在成千上万个文件中搜索相同的短语。为了避免一次又一次地复制粘贴相同的代码行，我们使用重复编程控制结构或
    *循环*，这些是重复执行任务的代码段，可以指定重复执行的次数或直到某个条件被满足。相较于多行重复的代码，循环更容易进行审查和修正错误。
- en: '**USING LOOPS IN APP INVENTOR**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**在 App Inventor 中使用循环**'
- en: 'In App Inventor, you can control the flow of apps with three types of loops:
    a `for each number` loop that performs an action for each number in a given range,
    a `while` loop that repeats an action until a tested Boolean condition returns
    `false`, and a `for each item` loop that performs the same action on each item
    in a list. Next we’ll take a closer look at each of these.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在 App Inventor 中，你可以通过三种类型的循环来控制应用的流程：`for each number` 循环对给定范围内的每个数字执行一个操作，`while`
    循环在测试的布尔条件返回 `false` 之前重复执行一个操作，以及 `for each item` 循环对列表中的每个项执行相同的操作。接下来，我们将更详细地了解这些。
- en: '**THE FOR EACH NUMBER LOOP**'
  id: totrans-6
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**FOR EACH NUMBER 循环**'
- en: We often use a `for each number` loop to calculate a series of numbers. The
    following event handler shows how a `for each number` loop calculates the sum
    of certain numbers in a given range.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常使用 `for each number` 循环来计算一系列数字。下面的事件处理器展示了 `for each number` 循环如何计算给定范围内某些数字的总和。
- en: '![Image](../images/f0102-01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0102-01.jpg)'
- en: First, we initialize the global `sum` variable that holds the value to compute.
    Then we program the event handler to reset `sum` to `0` at each button click.
    This ensures that the app calculates the correct sum by erasing values from a
    previous click.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们初始化一个全局的 `sum` 变量来存储待计算的值。然后，我们编写事件处理器，在每次点击按钮时将 `sum` 重置为 `0`。这样可以确保应用通过删除上次点击的值来计算正确的总和。
- en: To create the `for each number` loop, we use a *counter variable* named `number`
    to count and control the number of times the app executes the code. Then we include
    a range of values, starting with the number in `from` and ending with the number
    in `to`. Inside the `by` socket, we insert a number that determines how much to
    increment the `number` variable between the loops. When you click the button,
    the app loops through and executes the blocks in the `for each` block’s `do` socket
    for each number in the range from 20 to 40, while increasing the value of `number`
    by 10 between each loop.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建 `for each number` 循环，我们使用一个名为 `number` 的 *计数器变量* 来计算并控制应用执行代码的次数。然后，我们包括一个值范围，起始值为
    `from` 中的数字，结束值为 `to` 中的数字。在 `by` 插座中，我们插入一个数字，它决定了每次循环之间 `number` 变量增加的数量。当你点击按钮时，应用会在
    20 到 40 的范围内循环并执行 `for each` 块的 `do` 插座中的代码块，同时每次循环时将 `number` 的值增加 10。
- en: This means that, in the first loop, the code sets the value of the global `sum`
    variable to its current value (`0`) plus the value of the `number` variable (`20`),
    which equals `20`, and then increments the `number` variable to `30`. In the second
    loop, it sets `sum` to 20 + 30, or `50`, and then increments `number` to `40`.
    In the final loop, it sets `sum` to 50 + 40, or `90`, which is the sum we set
    out to compute. You can use this kind of code any time you want to compute the
    sum of numbers in a specific range incremented between each loop by a consistent
    number.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，在第一次循环中，代码将全局 `sum` 变量的值设置为其当前值（`0`）加上 `number` 变量的值（`20`），结果为 `20`，然后将
    `number` 变量增加到 `30`。在第二次循环中，它将 `sum` 设置为 20 + 30，即 `50`，然后将 `number` 增加到 `40`。在最后一次循环中，它将
    `sum` 设置为 50 + 40，即 `90`，这是我们要计算的总和。你可以在任何需要计算一特定范围内数字总和，并且每次循环之间按固定数值递增的情况下使用这种代码。
- en: '**THE WHILE LOOP**'
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**WHILE 循环**'
- en: A `while` loop repeats an action until a Boolean condition evaluates to `false`.
    The following event handler uses a `while` loop that chooses three random winners
    from 30 raffle tickets.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`while` 循环会重复执行一个操作，直到布尔条件的结果为 `false`。下面的事件处理器使用一个 `while` 循环，从 30 张抽奖票中选择三个随机中奖者。'
- en: '![Image](../images/f0102-02.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0102-02.jpg)'
- en: Before coding the event handler, we need to create an empty list variable named
    `raffleWinners` to hold the three randomly selected ticket numbers. We’ll use
    `raffleWinners` along with a relational operator (`<`) to set the `while` loop’s
    `test` condition. Before each loop, we test whether the length of, or number of
    items in, the `raffleWinners` list is less than 3.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写事件处理程序之前，我们需要创建一个名为`raffleWinners`的空列表变量，用于存放三个随机选择的票号。我们将使用`raffleWinners`和一个关系运算符（`<`）来设置`while`循环的`test`条件。在每次循环之前，我们测试`raffleWinners`列表的长度（或项数）是否小于3。
- en: We test for this condition because we want to execute the code in the `do` socket
    only three times to pick the three random raffle winners. As long as the length
    of `raffleWinners` is less than 3, we execute the code in the `while` loop’s `do`
    socket. Once the length of `raffleWinners` reaches a value of `3`, the loop ends,
    and we immediately execute the blocks beneath the loop.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们测试这个条件是因为我们希望在`do`插座中的代码只执行三次，以选择三名随机的抽奖获胜者。只要`raffleWinners`的长度小于3，我们就执行`while`循环中的`do`插座的代码。一旦`raffleWinners`的长度达到3，循环结束，我们立即执行循环下方的代码块。
- en: When you click the button, while the test condition is `true`, the blocks in
    the `do` socket loop through and add a random integer between 1 and 30 to the
    `raffleWinners` list variable.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击按钮时，测试条件为`true`时，`do`插座中的代码块会循环并向`raffleWinners`列表变量添加一个1到30之间的随机整数。
- en: This means that, in the first loop when the length of `raffleWinners` is `0`,
    the app adds one random number to `raffleWinners`, which then increases its length
    to `1`. In the second loop, since the length of `raffleWinners` is still less
    than 3, the app repeats this action, adding another random number to `raffleWinners`,
    which then increases its length to `2`. In the third loop, since the length of
    `raffleWinners` is still less than 3, the app adds another random number to `raffleWinners`,
    which then increases its length to `3`, after which the test condition fails and
    the loop ends.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，在第一次循环中，当`raffleWinners`的长度为`0`时，应用会向`raffleWinners`中添加一个随机数，长度变为`1`。在第二次循环中，由于`raffleWinners`的长度仍然小于3，应用会重复此操作，再次向`raffleWinners`添加一个随机数，长度变为`2`。在第三次循环中，由于`raffleWinners`的长度仍然小于3，应用会再次向`raffleWinners`添加一个随机数，长度变为`3`，此时测试条件不再成立，循环结束。
- en: After the loop, the app displays `raffleWinners`, the list of randomly selected
    raffle winning numbers, in a label.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 循环结束后，应用会在标签中显示`raffleWinners`，即随机选择的抽奖中奖号码列表。
- en: '**THE FOR EACH ITEM LOOP**'
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**FOR EACH ITEM 循环**'
- en: We can use the `for each item` loop to repeat actions for each item in a list.
    Here is a `for each item` loop that we could add to “Beat the Bus” from [Chapter
    5](ch05.xhtml#ch05) so that users can provide their destination to all numbers
    in the list of phone numbers, instead of just one.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`for each item`循环来对列表中的每个项重复执行操作。以下是我们可以添加到[第5章](ch05.xhtml#ch05)的“Beat
    the Bus”中的一个`for each item`循环，这样用户可以将目的地提供给电话号码列表中的所有号码，而不仅仅是一个。
- en: '![Image](../images/f0103-01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0103-01.jpg)'
- en: These blocks loop through the list of telephone numbers and text the location
    information to each number.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些代码块会遍历电话号码列表，并将位置信息发送给每个号码。
- en: '**BUILDING THE “TIC TAC TOE” APP**'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建“TIC TAC TOE”应用**'
- en: In this chapter, you’ll use two `for each item` loops and work more with the
    `Canvas` and `ImageSprite` components to create a “Tic Tac Toe” game app, where
    two players take turns touching empty squares on the `Canvas`. The first player
    who touches three empty squares in a row, either horizontally, vertically, or
    diagonally, wins the game. The app keeps track of the players’ turns and lets
    them reset the game to play again at any time.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你将使用两个`for each item`循环，并更多地使用`Canvas`和`ImageSprite`组件来创建一个“Tic Tac Toe”游戏应用。在这个游戏中，两个玩家轮流在`Canvas`上的空白格子里点击。第一个在横向、纵向或对角线上连续点击三个空格的玩家获胜。这个应用会跟踪玩家的回合，并允许他们随时重置游戏重新开始。
- en: Log in to App Inventor and create a project called TicTacToe.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到App Inventor并创建一个名为TicTacToe的项目。
- en: '**DECOMPOSING “TIC TAC TOE”**'
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**分解“TIC TAC TOE”**'
- en: 'We can decompose the game activity into three steps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将游戏活动分解为三个步骤：
- en: When the app opens, display a nine-square Tic Tac Toe board and a reset button.
    Place an `ImageSprite` on top of each square on the board, which will display
    the X or O.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当应用打开时，显示一个九格的Tic Tac Toe棋盘和一个重置按钮。在棋盘上的每个格子上放置一个`ImageSprite`，用于显示X或O。
- en: When the first player touches an empty square on the board, display an X on
    that square. Then display a message that shows it’s the other player’s turn (O),
    and so on. When the last square gets filled, tell the players that the game is
    over!
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当第一位玩家点击棋盘上的空白格子时，在该格子上显示一个X。然后显示一条消息，说明轮到另一位玩家（O）了，以此类推。当最后一个格子被填满时，告知玩家游戏结束！
- en: When a player hits the reset button, remove all Xs and Os from the board along
    with all notices, and the app is ready for a new game.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当玩家点击重置按钮时，清除棋盘上的所有X和O以及所有通知，应用程序准备开始新的一局游戏。
- en: 'You’ll need the following components:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要以下组件：
- en: Button for a player to click to reset the game board
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩家点击以重置游戏棋盘的按钮
- en: Canvas with a game board background for players to touch to play the game and
    on which to display X and O `ImageSprite`s
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有游戏棋盘背景的画布，供玩家触摸进行游戏，并显示X和O的`ImageSprite`
- en: Global variable (3) to store `ImageSprite`s and keep track of the current game
    player and number of plays
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储`ImageSprite`并跟踪当前游戏玩家和回合次数的全局变量（3）
- en: ImageSprite (9) to display X and O graphics on empty game board squares touched
    by players
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示X和O图形的图像精灵（9），用于玩家点击的空白棋盘格子
- en: Label to display game notices
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示游戏通知的标签
- en: Local variable to store the value of the touched `ImageSprite`
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储所点击`ImageSprite`值的局部变量
- en: '**LAYING OUT “TIC TAC TOE” IN THE DESIGNER**'
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**在设计器中布局“井字棋”**'
- en: 'Now let’s lay out the app in the Designer starting with `Screen1`. In the Properties
    pane for `Screen1`, set its AlignHorizontal property to **Center: 3** so that
    all components we place will sit in the middle of the screen toward the top.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，让我们从`Screen1`开始在设计器中布局应用程序。在`Screen1`的属性面板中，将其AlignHorizontal属性设置为**居中:
    3**，这样我们放置的所有组件都会位于屏幕的中间偏上位置。'
- en: Then, to keep the screen’s orientation from changing when the device rotates,
    set ScreenOrientation to **Portrait**. Finally, remove the checkmark under TitleVisible
    to keep the title of the screen from showing when the app runs on a device.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，为了防止设备旋转时屏幕方向改变，将ScreenOrientation设置为**竖屏**。最后，去掉TitleVisible下的勾选框，以防在设备运行应用程序时显示屏幕标题。
- en: 'Next, drag the other necessary components from their drawers in the Palette
    pane onto the Viewer pane and adjust their properties. Drag in the `Label` from
    the User Interface drawer that will show the player’s turns. In the Properties
    pane, make its font bold and italic by clicking the checkboxes under FontBold
    and FontItalic, and change the FontSize to 30. Also, change the **Width** to **Fill
    parent**, remove the text under **Text**, set the TextAlignment to **center: 1**,
    and select **Magenta** as the TextColor.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，从调色板面板中将其他必要的组件拖入查看面板，并调整它们的属性。从用户界面控件栏拖入一个`Label`，用于显示玩家的回合。在属性面板中，通过勾选FontBold和FontItalic框，使其字体加粗和斜体，并将FontSize设置为30。同时，将**宽度**改为**填充父项**，去除**文本**下的内容，将TextAlignment设置为**居中:
    1**，并选择**品红色**作为文本颜色。'
- en: To create the reset button, place a Button from the User Interface drawer under
    the `Label`. In the Properties pane, change the `Button`’s BackgroundColor also
    to **Magenta**, make its FontBold, and increase FontSize to 20. Also, change the
    **Width** to **Fill parent**, and set the **Text** to Reset Game and TextColor
    to **White**.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建重置按钮，将一个按钮从用户界面控件栏拖到`Label`下方。在属性面板中，将按钮的背景颜色更改为**品红色**，设置字体加粗，并将字体大小设置为20。同时，将**宽度**改为**填充父项**，并将**文本**设置为“重置游戏”，文本颜色设置为**白色**。
- en: Now drag in a Canvas from the Drawing and Animation drawer. Upload a background
    image of the Tic Tac Toe board by clicking the text box under `BackgroundImage`
    in the Properties pane and following the image upload instructions in “Uploading
    a Picture” on [page 27](ch02.xhtml#page_27). Also, set the `Canvas`’s **Height**
    and **Width** to 100 percent.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从绘图与动画控件栏拖入一个画布。通过点击属性面板中`BackgroundImage`下的文本框并按照[第27页](ch02.xhtml#page_27)中“上传图片”的指示上传井字棋背景图片。同时，将`Canvas`的**高度**和**宽度**设置为100%。
- en: Drag onto the `Canvas` nine ImageSprites that will show the Xs and Os when the
    players touch the screen. In the Properties pane, set the X and Y properties to
    0 for those we want positioned in the three top and three left squares of the
    Tic Tac Toe board. We can do this now since we know that the 0 coordinate values
    for these five `ImageSprite`s won’t change no matter what size device a player
    uses. Set the 0 coordinates shown in [Table 6-1](ch06.xhtml#ch06tab1) as you drag
    the `ImageSprite`s to the `Canvas`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将九个 `ImageSprite` 拖到 `Canvas` 上，这些 `ImageSprite` 会在玩家触摸屏幕时显示 X 和 O。在属性面板中，将这些
    `ImageSprite` 的 X 和 Y 属性设置为 0，定位它们到井字棋面板的前三个顶部和左侧方格。我们可以现在设置这些值，因为我们知道这五个 `ImageSprite`
    的 0 坐标值无论玩家使用什么设备大小都不会改变。在将 `ImageSprite` 拖到 `Canvas` 时，根据[表 6-1](ch06.xhtml#ch06tab1)
    设置这些 0 坐标。
- en: '**Table 6-1:** Initial `X` and `Y` Property Values for Top and Left `ImageSprite`s'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 6-1：** 顶部和左侧 `ImageSprite` 的初始 `X` 和 `Y` 属性值'
- en: '| ImageSprite | **X property** | **Y property** |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| ImageSprite | **X 属性** | **Y 属性** |'
- en: '| --- | --- | --- |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `ImageSprite1` | `0` | `0` |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `ImageSprite1` | `0` | `0` |'
- en: '| `ImageSprite2` |  | `0` |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `ImageSprite2` |  | `0` |'
- en: '| `ImageSprite3` |  | `0` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `ImageSprite3` |  | `0` |'
- en: '| `ImageSprite4` | `0` |  |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `ImageSprite4` | `0` |  |'
- en: '| `ImageSprite7` | `0` |  |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `ImageSprite7` | `0` |  |'
- en: We won’t set the other coordinates now, since their positions will change depending
    on screen size. Instead, we’ll program the app to set them as a fraction of the
    `Canvas` size when the app opens.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在不会设置其他坐标，因为它们的位置会根据屏幕大小变化。相反，我们将编程让应用程序在启动时按 `Canvas` 大小的比例来设置这些坐标。
- en: Finally, upload the X and O images by clicking **Upload File…** in the Media
    pane and following the image upload instructions.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过在媒体面板中点击**上传文件...**并按照图片上传说明上传 X 和 O 图像。
- en: Now all components should show in the Viewer, except for `Label1`, which doesn’t
    contain any text to start. You also should see the list of all app components
    in the Components pane and the names of the uploaded images in the Media pane,
    and `Screen1` should look like [Figure 6-1](ch06.xhtml#ch6fig1) (although, depending
    on where you dragged the `ImageSprite`s, they may not appear as neatly ordered).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有组件应显示在查看器中，除了 `Label1`，它一开始不包含任何文本。你还应该能在组件面板中看到所有应用组件的列表，以及在媒体面板中看到上传的图片名称，`Screen1`
    应该像[图 6-1](ch06.xhtml#ch6fig1)一样（虽然，根据你拖动 `ImageSprite` 的位置，它们可能不会像图中那样整齐排列）。
- en: '![Image](../images/06fig01.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig01.jpg)'
- en: '*Figure 6-1: The Viewer, Component, and Media panes after you’ve laid out “Tic
    Tac Toe”*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-1：你布局“井字棋”后的查看器、组件和媒体面板*'
- en: Now you’re ready to program the app in the Blocks Editor.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在块编辑器中开始编程应用程序了。
- en: '**PROGRAMMING “TIC TAC TOE”**'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程“井字棋”**'
- en: For “Tic Tac Toe,” we’ll program three event handlers. The first directs the
    app’s action when the screen initializes, and the others respond to the `Canvas
    TouchDown` and `Button Click` events. We’ll also create four variables to store
    important information, including a global list, and we’ll use several `if then`
    and two `for each item` loop blocks to direct the flow of the app’s action. Click
    the **Blocks** button to switch to the Blocks Editor, and let’s begin programming
    step 1.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“井字棋”，我们将编写三个事件处理程序。第一个在屏幕初始化时指导应用程序的操作，其他两个响应 `Canvas TouchDown` 和 `Button
    Click` 事件。我们还将创建四个变量来存储重要信息，包括一个全局列表，并且会使用多个 `if then` 语句和两个 `for each item` 循环块来引导应用程序的操作流程。点击**块**按钮切换到块编辑器，我们开始编程步骤
    1。
- en: '**STEP 1: SETTING UP THE TIC TAC TOE GAME BOARD**'
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**步骤 1：设置井字棋游戏面板**'
- en: When the screen opens, we want players to see the nine-square Tic Tac Toe board
    and the reset button that we placed and styled in the Designer. At the same time,
    we want the app to respond to the `Screen1 Initialize` event by setting the width
    and height of the `ImageSprite`s and positioning one on each square of the game
    board. The `Screen1 Initialize` event handler programs the behind-the scenes action
    in step 1.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当屏幕打开时，我们希望玩家看到九格的井字棋面板和我们在设计器中放置和样式化的重置按钮。与此同时，我们希望应用程序响应 `Screen1 Initialize`
    事件，通过设置 `ImageSprite` 的宽度和高度，并将每个 `ImageSprite` 定位到游戏面板的一个方格上。`Screen1 Initialize`
    事件处理程序在幕后执行步骤 1 中的操作。
- en: '![Image](../images/f0107-01.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0107-01.jpg)'
- en: '**Creating the Global squares List Variable**'
  id: totrans-65
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**创建全局方格列表变量**'
- en: Before you code the event handler, you should create the global `squares` list
    variable to store the nine `ImageSprite`s that will display Xs and Os. Since the
    variable is global, we can use it in all event handlers to refer to the nine `ImageSprite`s.
    The following blocks declare and initialize the variable.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写事件处理程序之前，你应该创建全局`squares`列表变量来存储将显示X和O的九个`ImageSprite`。由于该变量是全局的，我们可以在所有事件处理程序中使用它来引用这九个`ImageSprite`。以下块声明并初始化该变量。
- en: '![Image](../images/f0107-02.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0107-02.jpg)'
- en: To place the blocks, click the **Variables** block drawer and drag an initialize
    global name block ➊ to the Viewer, click name, and replace it with squares. Then
    drag a make a list block ➋ from the Lists drawer, snap it to the right side of
    the initialize global squares block, and provide a socket for each of the nine
    `ImageSprite`s by adding seven more sockets to the make a list block’s two default
    inputs. To add the seven sockets, click the blue mutator icon to the left of the
    words `make a list`, and drag the additional item blocks to the list block in
    the dialog that opens.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要放置这些块，点击**变量**块抽屉，拖动一个初始化全局名称块 ➊ 到Viewer，点击名称并将其替换为`squares`。然后从列表抽屉中拖动一个“创建列表”块
    ➋，将其固定到初始化全局`squares`块的右侧，并通过向“创建列表”块的两个默认输入添加七个插槽来为每个`ImageSprite`提供一个插槽。要添加这七个插槽，点击“创建列表”左侧的蓝色变异符号图标，并将额外的项块拖动到弹出窗口中的列表块上。
- en: Then, in the Blocks pane, click each ImageSprite in order from 1 to 9, and drag
    its ImageSprite getter block ➌ into its socket in the make a list block. We’ve
    now set the list items in `squares` to the nine `ImageSprite`s.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在Blocks面板中，从1到9依次点击每个`ImageSprite`，并将其`ImageSprite getter`块 ➌ 拖动到“创建列表”块中的插槽中。现在，我们已经将`squares`列表中的项目设置为这九个`ImageSprite`。
- en: '**Looping Through ImageSprites in the squares List**'
  id: totrans-70
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**循环遍历`squares`列表中的`ImageSprite`**'
- en: Now that you have the `squares` list, start the event handler by clicking Screen1
    in the Blocks pane and dragging the `whenScreen1.Initialize` block to the Viewer.
    Then add a `for each item` block that loops through the list of `ImageSprite`s
    and sets their width and height to match those of the game board squares.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了`squares`列表，点击Blocks面板中的Screen1并将`whenScreen1.Initialize`块拖动到Viewer，启动事件处理程序。然后添加一个`for
    each item`块，它遍历`ImageSprite`列表并将它们的宽度和高度设置为与游戏板方块相匹配。
- en: Because the list contains a series of components, you’ll use the generic Any
    component blocks to access and manipulate the properties of all `ImageSprite`s
    in the loop without needing to specifically name each `ImageSprite`. You can find
    Any component blocks in the Blocks Editor window beneath the component-specific
    blocks in the Blocks pane, as shown in [Figure 6-2](ch06.xhtml#ch6fig2).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 由于列表包含一系列组件，你将使用通用的Any组件块来访问和操作循环中所有`ImageSprite`的属性，而无需专门指定每个`ImageSprite`的名称。你可以在Blocks编辑器窗口中，在组件特定块下方的Blocks面板中找到Any组件块，如[图6-2](ch06.xhtml#ch6fig2)所示。
- en: '![Image](../images/06fig02.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/06fig02.jpg)'
- en: '*Figure 6-2: The “Tic Tac Toe” app’s Any component blocks*'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-2：“井字游戏”应用的Any组件块*'
- en: Any app you create in App Inventor will include Any component blocks for each
    component added.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你在App Inventor中创建的任何应用都会为每个添加的组件包含Any组件块。
- en: '**Setting the Width and Height of Each ImageSprite in the squares List**'
  id: totrans-76
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**设置`squares`列表中每个`ImageSprite`的宽度和高度**'
- en: By setting the `Canvas` height and width to 100 percent of the screen size in
    the Designer earlier, we made sure both the `Canvas` and the squares in the `Canvas`’s
    game board background image will change proportionately whenever the device’s
    size changes. Likewise, by setting the width and height to a fraction of the `Canvas`
    size in the `for each item` loop, we make sure that the width and height of each
    `ImageSprite` will change proportionately with the size of the game board.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在设计器中将`Canvas`的高度和宽度设置为屏幕尺寸的100%，我们确保了每当设备的尺寸发生变化时，`Canvas`及其游戏板背景图中的方块会按比例调整。同样地，通过在`for
    each item`循环中将宽度和高度设置为`Canvas`尺寸的一部分，我们确保了每个`ImageSprite`的宽度和高度会随着游戏板的大小按比例变化。
- en: '![Image](../images/f0108-01.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0108-01.jpg)'
- en: To place the loop, drag a for each item block ➊ from the Control blocks drawer
    to the Viewer and snap it inside the whenScreen1.Initialize block next to the
    word `do`. On the `for each item` block, you’ll notice the counter variable `item`,
    which represents each item in the list. Click the word item and enter a more meaningful
    name, sprite.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要放置循环，拖动一个每个项目积木 ➊ 从控制积木抽屉到查看器，并将其插入到whenScreen1.Initialize块内，紧挨着`do`。在`for
    each item`积木上，您会注意到计数器变量`item`，它表示列表中的每一项。点击`item`并输入一个更有意义的名称，例如sprite。
- en: Then click the **Variables** blocks drawer, drag in a get global squares block
    ➋, and snap it to the right side of the for each sprite block next to the word
    `list`. So far, for each sprite in the global `squares` list variable, these blocks
    will cause the app to perform some action. Now let’s have the app set the width
    and height for each sprite.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后点击**变量**积木抽屉，拖入一个获取全局方格块 ➋，并将其与每个精灵块右侧的`list`单词旁边的块对接。目前，针对全局`方格`列表变量中的每个精灵，这些积木将促使应用执行某些操作。现在，让我们让应用为每个精灵设置宽度和高度。
- en: To set the `ImageSprite`s’ width to one-third the `Canvas` width, click the
    plus sign to the left of **Any component** in the Blocks pane, click the **Any
    ImageSprite** drawer, and drag a setImageSprite.Width block ➌ inside the for each
    sprite block next to the word `do`. This generic setter block requires us to identify
    the `ImageSprite` we’re changing before providing the size we’re changing it to.
    To identify these values, fill its `of component` socket by mousing over the sprite
    counter variable and dragging in a get sprite block ➍. Fill its `to` socket with
    a multiplication operator block ➎ filled on the left with a Canvas1.Width block
    ➏ from the Canvas1 drawer and on the right with a 0.333 number block ➐.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`ImageSprite`的宽度设置为`Canvas`宽度的三分之一，请点击积木面板中**任何组件**左侧的加号，点击**任何ImageSprite**抽屉，然后拖动一个setImageSprite.Width积木
    ➌ 到每个精灵块的右侧，紧挨着`do`。这个通用的设置器积木要求我们在提供要更改的大小之前，先识别出我们正在更改的`ImageSprite`。为了识别这些值，点击`of
    component`插槽，鼠标悬停在精灵计数器变量上，并拖入一个获取精灵块 ➍。将其`to`插槽与一个乘法操作符积木 ➎ 连接，左侧连接一个Canvas1.Width积木
    ➏，右侧连接一个0.333数字块 ➐。
- en: To set the height of each sprite to one-fourth the `Canvas` height, make a copy
    of the setImageSprite.Width blocks and snap the duplicate blocks inside the for
    each sprite block under the setImageSprite.Width block. In the duplicate blocks,
    click the drop-down arrows in both the setImageSprite.Width block ➑ and the Canvas1.Width
    block ➒ and select Height. Replace `0.333` in the number block with 0.25 ➓.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要将每个精灵的高度设置为`Canvas`高度的四分之一，请复制setImageSprite.Width积木，并将复制的积木放入for each sprite块内，放置在setImageSprite.Width块下方。在复制的积木中，点击setImageSprite.Width积木
    ➑ 和Canvas1.Width积木 ➒ 的下拉箭头，选择高度。将数字块中的`0.333`替换为0.25 ➓。
- en: '**Positioning ImageSprites on the Canvas**'
  id: totrans-83
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**在画布上定位ImageSprites**'
- en: Finally, we need to place each `ImageSprite` on the game board so that it lines
    up with the top-left point of its corresponding square, as shown in [Figure 6-3](ch06.xhtml#ch6fig3).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要将每个`ImageSprite`放置在游戏板上，使其与对应方格的左上角对齐，如[图 6-3](ch06.xhtml#ch6fig3)所示。
- en: '![Image](../images/06fig03.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig03.jpg)'
- en: '*Figure 6-3: Tic Tac Toe’s Canvas background image with labeled squares, columns,
    and rows*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-3：井字棋的画布背景图像，标注了方格、列和行*'
- en: We want the x- and y-coordinates of `ImageSprite1` to be the top-left corner
    of square 1 (which is where `X` = 0 and `Y` = 0), the x- and y-coordinates of
    `ImageSprite2` to be the top-left corner of square 2, and so on.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望`ImageSprite1`的x和y坐标为方格1的左上角（即`X` = 0 和 `Y` = 0），`ImageSprite2`的x和y坐标为方格2的左上角，以此类推。
- en: In the Designer, we already set the `X` property of `ImageSprite1`, `ImageSprite4`,
    and `ImageSprite7` to `0`, because we want them in the left column of the `Canvas`
    over squares 1, 4, and 7\. We also set the `Y` property of `ImageSprite1`, `ImageSprite2`,
    and `ImageSprite3` to `0`, because we want them at the top row of the `Canvas`
    covering squares, 1, 2, and 3.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计器中，我们已经将`ImageSprite1`、`ImageSprite4`和`ImageSprite7`的`X`属性设置为`0`，因为我们希望它们位于`Canvas`的左列，覆盖方格1、4和7。我们还将`ImageSprite1`、`ImageSprite2`和`ImageSprite3`的`Y`属性设置为`0`，因为我们希望它们位于`Canvas`的顶行，覆盖方格1、2和3。
- en: The following blocks set the `ImageSprite`s’ remaining x- and y-coordinates.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下积木设置了`ImageSprite`的剩余x和y坐标。
- en: '![Image](../images/f0110-01.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0110-01.jpg)'
- en: First, set the x-coordinate of `ImageSprite2` to the farthest point at the left
    of square 2 on the game board in [Figure 6-3](ch06.xhtml#ch6fig3), which is the
    `Canvas` width multiplied by 0.333\. Place the setImageSprite2.Xto block ➊ inside
    the whenScreen1.Initialize block under the for each block. Then attach a multiplication
    operator block to the setImageSprite2.Xto block ➋, and fill it with a Canvas1.Width
    block ➌ and a 0.333 number block ➍. Now make 11 duplicates of the setImageSprite2.Xto
    block and make the changes shown in the code.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将`ImageSprite2`的x坐标设置为游戏板上方格 2 最左侧的点，如[图 6-3](ch06.xhtml#ch6fig3)所示，具体位置为`Canvas`宽度的
    0.333 倍。将`setImageSprite2.Xto`块➊放置在`whenScreen1.Initialize`块下的`for each`块内。然后，将一个乘法操作符块附加到`setImageSprite2.Xto`块➋，并用`Canvas1.Width`块
    ➌ 和一个 0.333 的数值块 ➍ 填充它。现在，复制 11 个`setImageSprite2.Xto`块并做出代码中所示的修改。
- en: These duplicate blocks set the x-coordinates of `ImageSprite5` and `ImageSprite8`
    to the `Canvas` width multiplied by 0.333, which is the farthest point at the
    left of the Tic Tac Toe board’s center column on the board in [Figure 6-3](ch06.xhtml#ch6fig3),
    and the x-coordinates of `ImageSprite3`, `ImageSprite6`, and `ImageSprite9` to
    the `Canvas` width multiplied by 0.666, which is the farthest point at the left
    of the Tic Tac Toe board’s right column on the board in [Figure 6-3](ch06.xhtml#ch6fig3).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这些重复的块将`ImageSprite5`和`ImageSprite8`的x坐标设置为`Canvas`宽度的 0.333 倍，这个位置是井字游戏板中间列的最左侧，如[图
    6-3](ch06.xhtml#ch6fig3)所示；而`ImageSprite3`、`ImageSprite6`和`ImageSprite9`的x坐标设置为`Canvas`宽度的
    0.666 倍，这个位置是井字游戏板右列的最左侧，如[图 6-3](ch06.xhtml#ch6fig3)所示。
- en: They also set the y-coordinates of `ImageSprite4`, `ImageSprite5`, and `ImageSprite6`
    to the `Canvas` height multiplied by 0.25, which is the very top point of the
    Tic Tac Toe board’s middle row on the board in [Figure 6-3](ch06.xhtml#ch6fig3),
    and the y-coordinates of `ImageSprite7`, `ImageSprite8`, and `ImageSprite9` to
    the `Canvas` height multiplied by 0.5, which is the very top point of the Tic
    Tac Toe board’s bottom row on the board in [Figure 6-3](ch06.xhtml#ch6fig3).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 它们还将`ImageSprite4`、`ImageSprite5`和`ImageSprite6`的y坐标设置为`Canvas`高度的 0.25 倍，这个位置是井字游戏板中间行的顶部，如[图
    6-3](ch06.xhtml#ch6fig3)所示；而`ImageSprite7`、`ImageSprite8`和`ImageSprite9`的y坐标设置为`Canvas`高度的
    0.5 倍，这个位置是井字游戏板底部行的顶部，如[图 6-3](ch06.xhtml#ch6fig3)所示。
- en: Now, with all of our step 1 blocks, we’ve programmed the app to respond to the
    `Screen1 Initialize` event by placing on each Tic Tac Toe board square an `ImageSprite`
    that shows no image, has the same width and height as the square, and is positioned
    with its top-left point at the top-left point of the square.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，借助我们在步骤 1 中完成的所有模块，我们已经编写了应用程序，使其在响应`Screen1 Initialize`事件时，在每个井字游戏板的方格上放置一个`ImageSprite`，该`ImageSprite`不显示图像，具有与方格相同的宽度和高度，并且其左上角位置与方格的左上角对齐。
- en: Let’s live-test now with a device, as outlined in “Live-Testing Your Apps” on
    [page xxii](intro.xhtml#page_xxii). Click **Connect** ▸ **AI Companion** in the
    top menu bar and scan the QR code with your device’s AI2 Companion app. Your “Tic
    Tac Toe” app should open on your device, and you should see the game board and
    the reset button.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们按“实时测试应用”中概述的步骤，在设备上进行实时测试，如[第 xxii 页](intro.xhtml#page_xxii)所示。在顶部菜单栏中点击**连接**
    ▸ **AI Companion**，并使用设备的 AI2 Companion 应用扫描二维码。你的“井字游戏”应用应该会在设备上打开，并且你应该能看到游戏板和重置按钮。
- en: The app should have the invisible `ImageSprite`s on the `Canvas`, and you should
    see their width, height, and position after we program the `Canvas` `TouchDown`
    event handler in step 2\. Leave the app open on your device to keep live-testing.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序应该在`Canvas`上有不可见的`ImageSprite`，在我们编写`Canvas`的`TouchDown`事件处理程序并完成步骤 2 后，你应该能够看到它们的宽度、高度和位置。请保持应用程序在设备上处于打开状态以进行实时测试。
- en: '**STEP 2: RESPONDING TO PLAYER MOVES**'
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**步骤 2：响应玩家操作**'
- en: 'In step 2, we’ll program the app to respond each time a player touches an empty
    square on the `Canvas` Tic Tac Toe game board. That’s when we want the app to
    perform several actions:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 2 中，我们将编写应用程序，使其每当玩家触摸`Canvas`井字游戏板上的一个空方格时做出响应。此时，我们希望应用程序执行几个操作：
- en: Determine which `ImageSprite` the player touched using the x- and y-coordinates
    of the place touched and a series of nested conditionals.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用触摸点的x和y坐标以及一系列嵌套的条件判断来确定玩家触摸了哪个`ImageSprite`。
- en: Determine whether player X or O touched the `Canvas` using the data stored in
    a global variable called `player`.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用名为`player`的全局变量存储的数据来确定是玩家 X 还是玩家 O 触摸了`Canvas`。
- en: Display a corresponding X or O graphic in the touched `ImageSprite`.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在触摸的`ImageSprite`中显示对应的 X 或 O 图形。
- en: Change the value of `player` to the opposite player.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`player`的值更改为对方玩家。
- en: Keep track of the number of plays in a global variable called `play`. (There’s
    a total of nine possible plays in Tic Tac Toe.)
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用全局变量`play`跟踪游戏中的操作次数。（井字棋总共有9次可能的操作。）
- en: Display a notice indicating who plays next, until the value of `play` equals
    `9`, when the notice should then read, “Game’s over!”
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示一个通知，指示下一位玩家是谁，直到`play`的值等于`9`，此时通知应显示为“游戏结束！”
- en: 'We’ll start the code for step 2 by creating the two global variables: `player`
    and `play`.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过创建两个全局变量：`player`和`play`，开始第2步的代码编写。
- en: '**Creating Global Variables**'
  id: totrans-106
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**创建全局变量**'
- en: The first global variable, `player`, stores the value of the current player,
    either X or O. The second global variable, `play`, keeps track of the number of
    plays made in the game. Since both `player` and `play` are global, we can use
    them throughout the code in all event handlers. The following blocks initialize
    the `player` and `play` variables.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个全局变量`player`存储当前玩家的值，可能是X或O。第二个全局变量`play`用于跟踪游戏中的操作次数。由于`player`和`play`都是全局变量，我们可以在代码中的所有事件处理程序中使用它们。以下块初始化了`player`和`play`变量。
- en: '![Image](../images/f0111-01.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0111-01.jpg)'
- en: To create each variable, click the **Variables** block drawer and drag an initialize
    global name block ➊ to the Viewer, click name, and replace it with the variable
    name. Then, for `player`, since it will hold string data, drag an empty string
    block ➋ from the Text drawer, snap it to the right side of the initialize global
    player block, and give it the initial value for the first player, player X, by
    entering X in the empty string block.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建每个变量，请点击**变量**块工具栏，并将初始化全局名称块 ➊ 拖到查看器中，点击名称并将其替换为变量名。然后，对于`player`，因为它将保存字符串数据，从文本工具栏拖动一个空字符串块
    ➋，将其连接到初始化全局player块的右侧，并将其初始值设置为第一个玩家，即玩家X，在空字符串块中输入X。
- en: Initialize `play`, which will hold numeric data representing the number of plays
    in the game, to the value of `0` by dragging a 0 number block ➌ from the Math
    drawer and snapping it to the right side of the initialize global play block.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化`play`，它将保存表示游戏中操作次数的数字数据，初始值为`0`，通过将数字块0 ➌从数学工具栏拖到初始化全局play块的右侧。
- en: '**Handling the Canvas TouchDown Event**'
  id: totrans-111
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**处理Canvas TouchDown事件**'
- en: Now that we’ve created `player` and `play`, we have the data we’ll need for
    the step 2 `Canvas TouchDown` event handler.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了`player`和`play`，我们拥有了第2步`Canvas TouchDown`事件处理程序所需的数据。
- en: '![Image](../images/f0112-01.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0112-01.jpg)'
- en: When a player touches down on an empty square on the `Canvas` game board, we
    need the app to place the X image on the touched spot if player X touched it,
    and the O image if player O touched it. To do this, the app first needs to know
    which square on the board and corresponding `ImageSprite` the player touched.
    Fortunately, the `Canvas TouchDown` event handler includes two event parameters,
    `x` and `y`, that hold the x- and y-coordinates of the place touched. The app
    will use these coordinates to determine the game board square and `ImageSprite`
    touched.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家触摸到`Canvas`游戏板上的空白方格时，如果是玩家X触摸的，需要在触摸点上放置X图像，如果是玩家O触摸的，则放置O图像。为此，应用程序首先需要知道玩家触摸了游戏板上的哪个方格以及相应的`ImageSprite`。幸运的是，`Canvas
    TouchDown`事件处理程序包括两个事件参数，`x`和`y`，它们保存了触摸位置的x和y坐标。应用程序将使用这些坐标来确定玩家触摸的游戏板方格和`ImageSprite`。
- en: We start by using the `x` and `y` event parameters to set the value of a local
    variable called `touchedSprite` to the `ImageSprite` that was touched. We do this
    by first testing a series of conditions to determine whether the player touched
    a square and its corresponding `ImageSprite` in the left column of the game board.
    If the player didn’t touch the left column, we test whether the player touched
    the center column, and then, if necessary, the right column.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先使用`x`和`y`事件参数将一个名为`touchedSprite`的局部变量的值设置为被触摸的`ImageSprite`。我们通过首先测试一系列条件来判断玩家是否触摸了游戏板左列的方格及其相应的`ImageSprite`。如果玩家没有触摸左列，我们接着测试玩家是否触摸了中列，必要时再测试右列。
- en: Once we know the value of `touchedSprite`—the `ImageSprite` that the player
    touched—then the app can determine whether that `ImageSprite` is already displaying
    an image, and, if not, display either the X or O image, depending on which player
    touched the board.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦知道了`touchedSprite`的值——即玩家触摸的`ImageSprite`——应用程序就可以判断该`ImageSprite`是否已经显示了图像，如果没有，就根据是哪个玩家触摸了游戏板，显示X或O图像。
- en: '**Creating the Local touchedSprite Variable**'
  id: totrans-117
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**创建本地变量 touchedSprite**'
- en: The following blocks from the `Canvas TouchDown` event handler determine which
    `ImageSprite` the player touched and then set it as the value of `touchedSprite`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块来自`Canvas TouchDown`事件处理程序，用于确定玩家触摸的是哪个`ImageSprite`，然后将其设置为`touchedSprite`的值。
- en: '![Image](../images/f0113-01.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0113-01.jpg)'
- en: First, click Canvas1 in the Blocks pane and drag its whenCanvas1.TouchDown event
    handler block ➊ to the Viewer. Then, create the local variable `touchedSprite`
    by clicking the **Variables** blocks drawer, dragging the first initialize local
    name to in block inside the whenCanvas1.TouchDown block ➋ next to the word `do`,
    and changing name to touchedSprite.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，点击Canvas1，在代码块面板中拖动其`whenCanvas1.TouchDown`事件处理程序块➊到查看器中。然后，通过点击**变量**代码块抽屉，拖动第一个初始化本地变量的`name
    to in`代码块，将其放入`whenCanvas1.TouchDown`代码块➋的`do`旁边，并将名称更改为`touchedSprite`。
- en: This block sets the initial value of the local variable `touchedSprite` to the
    value of the blocks we snap into the `to` socket. Since `touchedSprite`’s scope
    is local, we can use it only in this `TouchDown` event handler in the blocks we
    snap next to the word `in` later in this step.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码块将本地变量`touchedSprite`的初始值设置为我们插入到`to`插槽中的代码块的值。由于`touchedSprite`的作用域是局部的，我们只能在这个`TouchDown`事件处理程序中使用它，在这个步骤中稍后会插入到`in`旁边的代码块中。
- en: '**Testing Whether touchedSprite Is in the Left Column of the Game Board**'
  id: totrans-122
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**测试`touchedSprite`是否位于游戏板的左列**'
- en: Now we’ll add the blocks that set the value for `touchedSprite`, which is the
    `ImageSprite` that displays on top of the square a player has touched. To figure
    out which spot on the board was touched, the app first tests whether the spot
    is located in the left column of the board in [Figure 6-3](ch06.xhtml#ch6fig3),
    which would mean the `x` parameter is less than or equal to the `Canvas` width
    multiplied by 0.33.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将添加设置`touchedSprite`值的代码块，`touchedSprite`是显示在玩家触摸的方块上的`ImageSprite`。为了找出触摸的是游戏板上的哪个位置，应用程序首先测试该位置是否位于板子的左侧列，如[图6-3](ch06.xhtml#ch6fig3)所示，这意味着`x`参数小于或等于`Canvas`的宽度乘以0.33。
- en: '![Image](../images/f0114-01.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0114-01.jpg)'
- en: To place the blocks, click the **Control** blocks drawer and place an if then
    else block ➊ in the initialize local touchedSprite to in block’s to socket.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要放置代码块，请点击**控制**代码块抽屉，然后将一个if-then-else代码块➊放到初始化本地变量`touchedSprite`的`to`插槽中。
- en: Fill the if then else block’s if socket with a `≤` comparison operator block
    ➋ from the Math drawer. Fill the `≤` operator block’s first socket by mousing
    over the whenCanvas1.TouchDown block’s x parameter and dragging in the get x block
    ➌. Fill the `≤` operator block’s second socket with a multiplication operator
    block ➍. Now fill the multiplication block by clicking Canvas1 in the Blocks pane
    and dragging its Canvas1.Width block ➎ into the left operand socket and snapping
    a 0.33 number block ➏ into the right operand socket.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 将if-then-else代码块的if插槽填充为一个`≤`比较运算符块➋，该块来自数学抽屉。将`≤`运算符块的第一个插槽填充为鼠标悬停在`whenCanvas1.TouchDown`代码块的`x`参数上，然后拖入`get
    x`代码块➌。将`≤`运算符块的第二个插槽填充为一个乘法运算符块➍。现在通过点击Canvas1，在代码块面板中拖动其`Canvas1.Width`代码块➎到左操作数插槽，并将0.33的数字块➏插入到右操作数插槽中。
- en: These blocks check whether the sprite the player touched is in the game board’s
    left column, or `ImageSprite1`, `ImageSprite4`, or `ImageSprite7`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这些代码块检查玩家触摸的精灵是否位于游戏板的左列，或者是`ImageSprite1`、`ImageSprite4`或`ImageSprite7`。
- en: '**Testing Whether touchedSprite Is in the Top Row of the Left Column**'
  id: totrans-128
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**测试`touchedSprite`是否位于左列的顶部行**'
- en: If the first condition is true, we want the app to test the second condition,
    which is whether the `y` parameter of the touched spot is less than or equal to
    the `Canvas1` height multiplied by 0.25, or located in the top row of the game
    board. The following blocks test this second condition.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果第一个条件为真，我们希望应用程序测试第二个条件，即触摸点的`y`参数是否小于或等于`Canvas1`的高度乘以0.25，或者是否位于游戏板的顶部行。以下代码块测试这个第二个条件。
- en: '![Image](../images/f0114-02.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0114-02.jpg)'
- en: Click the **Control** blocks drawer, drag in the second if then else block ➊,
    and snap it to the right of the first if then else block next to the word `then`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**控制**代码块抽屉，拖入第二个if-then-else代码块➊，并将其插入到第一个if-then-else代码块右侧，紧挨着`then`旁边。
- en: Next, fill the second if then else block’s if socket with a `≤` operator block
    ➋. Then fill the `≤` operator block’s first socket by mousing over the whenCanvas1.TouchDown
    block’s y parameter and dragging in the get y block ➌, and fill its second socket
    with a multiplication operator block ➍. Fill the multiplication block by dragging
    the Canvas1.Height block ➎ into the left socket and a 0.25 number block ➏ into
    the right socket. Finally, fill the second if then else block’s then socket by
    clicking ImageSprite1 in the Blocks pane and dragging in its ImageSprite1 getter
    block ➐.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将第二个if then else块的if插槽填充为`≤`运算符块 ➋。然后通过将鼠标悬停在whenCanvas1.TouchDown块的y参数上并拖动获取y块
    ➌，填充`≤`运算符块的第一个插槽，第二个插槽填充一个乘法运算符块 ➍。通过拖动Canvas1.Height块 ➎到左侧插槽，0.25数字块 ➏到右侧插槽，填充乘法块。最后，通过点击块面板中的ImageSprite1并拖动其ImageSprite1获取块
    ➐，填充第二个if then else块的then插槽。
- en: Since we already know the player touched `ImageSprite1`, `ImageSprite4`, or
    `ImageSprite7`, we test whether the touched sprite is in the top row of the game
    board as shown in [Figure 6-3](ch06.xhtml#ch6fig3). If so, then we know that `touchedSprite`
    is `ImageSprite1` because it’s the only `ImageSprite` that meets both the first
    and second test conditions.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经知道玩家触摸了`ImageSprite1`、`ImageSprite4`或`ImageSprite7`，我们测试触摸的精灵是否位于游戏板的顶部行，如[图6-3](ch06.xhtml#ch6fig3)所示。如果是这样，我们就知道`TouchedSprite`是`ImageSprite1`，因为它是唯一符合第一个和第二个测试条件的`ImageSprite`。
- en: '**Testing Whether touchedSprite Is in the Middle Row of the Left Column**'
  id: totrans-134
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**测试touchedSprite是否位于左列的中间行**'
- en: If the `touchedSprite` is in the left column of the game board but not in the
    top row, then the second condition would fail. In that case, we use the `if then
    else` block’s `else` socket to test whether the sprite is in the middle row of
    the game board.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`TouchedSprite`位于游戏板的左列但不在顶部行，那么第二个条件将失败。在这种情况下，我们使用`if then else`块的`else`插槽来测试精灵是否位于游戏板的中间行。
- en: '![Image](../images/f0115-01.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0115-01.jpg)'
- en: Place another if then else block ➊ inside the second if then else block next
    to the word `else`. Next, fill the third if then else block’s if socket with an
    and logic operator block ➋ from the Logic drawer. The `and` logic block requires
    that both of its operands evaluate to `true` in order for the tested condition
    to be true.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个if then else块内的`else`旁边再放置一个if then else块 ➊。接下来，将第三个if then else块的if插槽填充为来自逻辑抽屉的and逻辑操作符块
    ➋。`and`逻辑块要求其两个操作数都为`true`，以使测试条件成立。
- en: The first `and` operand determines whether the y-coordinate of the touched spot
    is greater than the `Canvas1` height multiplied by 0.25\. Fill the and logic block’s
    first socket with a > operator block ➌, and fill the first socket of the > operator
    block with the get y block ➍ and the second socket with a × operator block ➎ that
    multiplies `Canvas1.Height` ➏ on the left by `0.25` ➐ on the right.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`and`操作数决定了触摸点的y坐标是否大于`Canvas1`高度乘以0.25。将and逻辑块的第一个插槽填充为`>`运算符块 ➌，然后将`>`运算符块的第一个插槽填充为获取y块
    ➍，第二个插槽填充为一个`×`运算符块 ➎，该运算符块将`Canvas1.Height` ➏乘以右侧的`0.25` ➐。
- en: Now add the second `and` operand, which determines whether the y-coordinate
    of the touched spot is less than or equal to the Canvas1 height multiplied by
    0.5\. Fill the and logic block’s second socket by snapping a copy of the blocks
    in its first socket, clicking the drop-down arrow next to the > operator to change
    it to a `≤` operator block ➑, and changing the 0.25 number block to 0.5 ➒.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，添加第二个`and`操作数，用于判断触摸点的y坐标是否小于或等于`Canvas1`高度乘以0.5。通过将第一个插槽中的块复制并粘贴，点击`>`运算符旁边的下拉箭头，将其更改为`≤`运算符块
    ➑，并将0.25数字块更改为0.5 ➒，来填充and逻辑块的第二个插槽。
- en: Finally, add the blocks that tell the app the result if both of those conditions
    are true, which means that the `touchedSprite` is `ImageSprite4`. If either condition
    is not true, it means that `touchedSprite` is `ImageSprite7`. Fill the third if
    then else block’s then socket by clicking ImageSprite4 in the Blocks pane and
    dragging in its ImageSprite4 getter block ➓ and its else socket by dragging in
    the ImageSprite7 getter block.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，添加用于告诉应用程序当这两个条件都为真时的块，这意味着`TouchedSprite`是`ImageSprite4`。如果任一条件不成立，则意味着`TouchedSprite`是`ImageSprite7`。通过点击块面板中的ImageSprite4并拖动其ImageSprite4获取块
    ➓，然后拖动ImageSprite7获取块，填充第三个if then else块的then插槽。
- en: Now, if `touchedSprite` meets the first condition by being in the left column
    of the game board but fails the second condition because it’s not in the top row,
    the blocks test the third condition—whether the touched sprite is in the middle
    row of the game board. If so, then we know `touchedSprite` is `ImageSprite4`,
    because it’s the only `ImageSprite` that meets both the first and third conditions
    by being in both the left column and the middle row of the game board.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: But if the third condition is not true, or the touched sprite is not in the
    middle row of the game board, then we know that `touchedSprite` must be `ImageSprite7`,
    because it’s the only remaining `ImageSprite` that meets the first condition—being
    located in the left column.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the blocks in the `to` socket of the `initalize local touchedSprite`
    block fill the `else` socket of the first `if then else` block and tell the app
    what to do if the touched sprite isn’t in the left column of the game board. In
    that case, we test whether the touched sprite is in the center column of the game
    board and, if not, then test whether it’s in the right column of the board.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: To create the blocks to test whether the touched sprite is located in the center
    column, simply right-click the first if then else block and make a copy. Then
    snap the copy of the blocks into the first if then else block’s else socket, and
    make the few changes indicated in the following section.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '**Testing Whether touchedSprite Is in the Center Column of the Game Board**'
  id: totrans-145
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To determine which `ImageSprite` is `touchedSprite`, the first three `if then
    else` blocks test whether the spot touched is in the left column of the board.
    Next, we need to handle cases where `touchedSprite` isn’t in the left column at
    all by testing whether the spot touched on the game board is located in the center
    column. This would mean that the `x` parameter of the touched spot is greater
    than the `Canvas` width multiplied by 0.33 and less than or equal to the `Canvas`
    width multiplied by 0.66, and that `touchedSprite` is either `ImageSprite2`, `ImageSprite5`,
    or `ImageSprite8`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: These three `if then else` blocks test whether the touched spot is in the center
    column of the game board.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0116-01.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
- en: Make changes to the duplicate blocks that you snapped into the `whenCanvas1.TouchDown`
    event handler in the first `if then else` block’s `else` socket so they look exactly
    like those shown here.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: These `if then else` blocks now represent the fourth condition we want the app
    to test—whether the touched sprite is in the center column of the game board—and
    tell the app what to do if the condition is met. If the touched sprite is in the
    game board’s center column (meaning it’s either `ImageSprite2`, `ImageSprite5`,
    or `ImageSprite8`), the blocks test the fifth condition, which is whether the
    touched sprite is in the top row of the game board. If this fifth condition is
    also true, then we know that `touchedSprite` is `ImageSprite2`.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: But if the fifth condition is not true, the blocks test the sixth condition—whether
    the touched sprite is in the middle row of the game board. If so, then we know
    that `touchedSprite` is `ImageSprite5`, because it’s the only `ImageSprite` that
    meets both the fourth and sixth conditions, meaning it’s in both the center column
    and the middle row of the game board.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果第五个条件不成立，积木会测试第六个条件——即触摸的精灵是否在游戏板的中间行。如果是这样，那么我们知道`touchedSprite`是`ImageSprite5`，因为它是唯一符合第四个和第六个条件的`ImageSprite`，即它同时位于游戏板的中心列和中间行。
- en: However, if the sixth condition is not true, meaning the touched sprite is not
    in the middle row of the game board, then `touchedSprite` has to be `ImageSprite8`,
    because it’s the only remaining `ImageSprite` that meets the fourth condition—being
    located in the center column.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果第六个条件不成立，意味着触摸的精灵不在游戏板的中间行，那么`touchedSprite`必须是`ImageSprite8`，因为它是唯一符合第四个条件——位于中心列的剩余`ImageSprite`。
- en: '**Determining Whether touchedSprite Is in the Right Column of the Game Board**'
  id: totrans-153
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**确定`touchedSprite`是否在游戏板的右列**'
- en: So far, the first six `if then else` blocks test whether the spot touched on
    the game board is located in the left or center columns of the board. Now we need
    to add blocks to handle cases in which `touchedSprite` isn’t in the left or center
    column but in the right column instead.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，前六个`if then else`积木测试触摸的游戏板位置是否位于游戏板的左列或中间列。现在我们需要添加积木来处理`touchedSprite`不在左列或中间列，而是在右列的情况。
- en: To determine whether the player touched `ImageSprite3`, `ImageSprite6`, or `ImageSprite9`,
    add the following blocks.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要判断玩家是否触摸了`ImageSprite3`、`ImageSprite6`或`ImageSprite9`，请添加以下积木。
- en: '![Image](../images/f0117-01.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0117-01.jpg)'
- en: To place the blocks, copy the last two if then else blocks, snap the copy into
    the whenCanvas1.TouchDown event handler in the fourth if then else block’s else
    socket, and make changes so the blocks are identical to those shown here.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 要放置这些积木，复制最后两个if then else积木，将复制的积木插入到第四个if then else积木的else插槽中，然后进行修改，使这些积木与这里所示的完全一致。
- en: 'These last two `if then else` blocks now pose the seventh condition we want
    to test: whether the touched sprite, which by default must be in the right column,
    is also in the top row of the game board. If it is, then `touchedSprite` is `ImageSprite3`.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这最后两个`if then else`积木现在提出了我们要测试的第七个条件：触摸的精灵，默认情况下必须位于右列，是否也位于游戏板的顶行。如果是，那么`touchedSprite`就是`ImageSprite3`。
- en: But if the seventh condition is not true, the blocks test the eighth condition—whether
    the touched sprite is in the middle row of the game board. If so, then `touchedSprite`
    is `ImageSprite6`. However, if the eighth condition is not true, meaning the touched
    sprite is not in the middle row of the game board, then `touchedSprite` is `ImageSprite9`,
    because it’s the only `ImageSprite` left.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果第七个条件不成立，积木会测试第八个条件——即触摸的精灵是否在游戏板的中间行。如果是，那么`touchedSprite`是`ImageSprite6`。然而，如果第八个条件不成立，意味着触摸的精灵不在游戏板的中间行，那么`touchedSprite`就是`ImageSprite9`，因为它是唯一剩下的`ImageSprite`。
- en: Now that we’ve assigned a value to `touchedSprite` (the `ImageSprite` that was
    touched by the player), we’ll use that value in the remainder of the `whenCanvas1.TouchDown`
    event handler. If the player touched an empty square on the board, we’ll use the
    data stored in `player` to determine whether it was player X or O who touched
    the board, or played; display a corresponding X or O graphic in the touched `ImageSprite`;
    and then change the value of `player` to the opposite player.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为`touchedSprite`（玩家触摸的`ImageSprite`）赋了值，我们将在`whenCanvas1.TouchDown`事件处理程序的其余部分中使用该值。如果玩家触摸了游戏板上的一个空格，我们将使用`player`中存储的数据来确定是玩家X还是O触摸了该位置，并在触摸的`ImageSprite`中显示相应的X或O图标，然后将`player`的值更改为对方玩家。
- en: Also, since there are a total of nine possible plays in Tic Tac Toe, we’ll keep
    track of the number of plays in the `play` variable and display a notice indicating
    who plays next if the value of `play` is less than 9 and a notice that the game’s
    over if `play` is 9 or greater. The following blocks from the `whenCanvas1.TouchDown`
    event handler program these actions.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于井字游戏中总共有九次可能的操作，我们将通过`play`变量来跟踪操作次数，并在`play`的值小于9时显示下一轮玩家的提示，而当`play`的值为9或更大时，显示游戏结束的提示。以下是`whenCanvas1.TouchDown`事件处理程序中的积木，用于编程这些操作。
- en: '![Image](../images/f0118-01.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0118-01.jpg)'
- en: '**Testing Whether the Player Touched an Empty Square on the Game Board**'
  id: totrans-163
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**测试玩家是否触摸了游戏板上的空格**'
- en: Now we need to determine whether the player touched an empty square on the board.
    This would mean that the name of the touched `ImageSprite`’s `Picture` is an empty
    string. The following blocks test that condition and, if the answer is yes, add
    1 to the value of the variable that keeps track of the number of game plays.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要确定玩家是否触碰了棋盘上的空白格子。这意味着触碰到的`ImageSprite`的`Picture`名称是一个空字符串。以下这些块会测试这个条件，如果答案是肯定的，就会将记录游戏操作次数的变量值加1。
- en: '![Image](../images/f0119-01.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0119-01.jpg)'
- en: To add the blocks that test whether the name of the picture showing on `touchedSprite`
    is an empty string, drag an if then block ➊ from the Control drawer and snap it
    inside the whenCanvas1.TouchDown event handler next to the word `in` in the initialize
    local touchedSprite to in block. Then snap an = comparison operator block ➋ from
    the Logic drawer to the right of the word `if`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加测试触碰的`touchedSprite`上显示的图像名称是否为空字符串的块，从控制抽屉中拖拽一个`if then`块➊，并将其插入到`whenCanvas1.TouchDown`事件处理程序中的`in`单词旁，紧接着`initialize
    local touchedSprite to in`块。然后从逻辑抽屉中将一个`=`比较操作符块➋拖拽到`if`单词的右侧。
- en: Fill the first socket of the `=` block by clicking the **Any ImageSprite** drawer
    in the Blocks pane, dragging in an ImageSprite.Picture block ➌, and filling its
    socket with a get touchedSprite block ➍ from the Variables drawer. Fill the `=`
    operator block’s second socket with an empty string block ➎ from the Text drawer.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 点击`=`块的第一个插槽，在块面板中点击**Any ImageSprite**抽屉，拖入一个`ImageSprite.Picture`块➌，并用`get
    touchedSprite`块➍从变量抽屉填充它的插槽。将`=`操作符块的第二个插槽填充为空字符串块➎，该块来自文本抽屉。
- en: If the player touched an empty square on the board, then we want the app to
    count the player’s touch as a true game play and increment the value of the variable
    `play` by 1\. To increment `play` by 1 in the code, snap the set global play block
    ➏ from the Variables drawer to the right of the word `then` and an addition operator
    block ➐ next to the set global play block. Then fill the addition operator block
    on the left with the get global play block ➑ and on the right with a 1 number
    block ➒.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果玩家触碰到了棋盘上的空白格子，我们希望应用程序将玩家的触摸计为一次有效的游戏操作，并将`play`变量的值增加1。要在代码中将`play`增加1，首先从变量抽屉中将`set
    global play`块➏拖到`then`单词的右侧，再将加法操作符块➐放在`set global play`块旁边。然后，将加法操作符块的左侧填充为`get
    global play`块➑，右侧填充为数字1块➒。
- en: '**Displaying the Correct Image on touchedSprite**'
  id: totrans-169
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**在touchedSprite上显示正确的图像**'
- en: Next we’ll tell the app which image to display on `touchedSprite` based on the
    value of the `player` variable and then change the value of `player` to the opposite
    player.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将告诉应用程序根据`player`变量的值，在`touchedSprite`上显示哪张图像，然后将`player`的值更改为对方玩家。
- en: '![Image](../images/f0119-02.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0119-02.jpg)'
- en: First we’ll set up the test condition that determines if the value of the `player`
    variable equals `X`, which means that player X touched the `Canvas`. Place another
    if then block ➊ inside the whenCanvas1.TouchDown block under the set global play
    block. Click the if then block’s blue mutator icon to add an else input to the
    block. Then, snap an = operator block ➋ from the Logic drawer into the if socket,
    and fill its left side with a get global player block ➌ and its right side with
    a string block ➍ containing the letter `X`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将设置测试条件，以确定`player`变量的值是否等于`X`，这意味着玩家X触碰了`Canvas`。在`whenCanvas1.TouchDown`块下的`set
    global play`块内，再放置一个`if then`块➊。点击`if then`块的蓝色变动器图标，添加一个else输入到该块。然后，从逻辑抽屉中拖拽一个`=`操作符块➋到`if`插槽，将其左侧填充为`get
    global player`块➌，右侧填充为一个包含字母`X`的字符串块➍。
- en: If the answer to the test condition is yes and the `player` variable equals
    X, we display X on `touchedSprite` and then change the value of `player` to `O`.
    To do this, fill the if then else block’s `then` socket by clicking the **Any
    ImageSprite** drawer in the Blocks pane, dragging in a setImageSprite.Picture
    block ➎, and filling its `of component` socket with a get touched Sprite block
    ➏ from the Variables drawer and its `to` socket with a string block ➐ from the
    Text drawer containing *PurpleX.png*, which is the name of the X graphic. Then,
    under the setImageSprite.Picture block, drag in a set global player block ➑ from
    the Variables drawer, and snap a string block ➒ from the Text drawer containing
    the letter `O` to the right of the word `to`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试条件的答案是“是”，并且`player`变量等于X，我们在`touchedSprite`上显示X，然后将`player`的值更改为`O`。为此，在Blocks面板中点击**任意ImageSprite**抽屉，拖入一个setImageSprite.Picture块
    ➎，并将其`of component`插槽填充为从Variables抽屉中获取的get touched Sprite块 ➏，然后将`to`插槽填充为一个包含*PurpleX.png*的字符串块
    ➐，这是X图形的名称。接下来，在setImageSprite.Picture块下，拖入一个从Variables抽屉中获取的set global player块
    ➑，并将一个包含字母`O`的字符串块 ➒从Text抽屉拖动到“to”右侧。
- en: If the answer to the test condition is no, meaning the `player` variable equals
    `O`, we display O on `touchedSprite` and change the value of `player` to `X`.
    Code this by copying the blocks we just placed in the if then else block’s then
    socket, snapping the copy into the if then else block’s else socket, and making
    two changes. Change the name of the graphic in the setImageSprite.Picture block’s
    bottom socket ➓ to PinkO.png. Then, change the O in the string block to the right
    of the set global player block to the letter X.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试条件的答案是否定的，也就是说`player`变量等于`O`，我们在`touchedSprite`上显示O，并将`player`的值更改为`X`。通过复制我们刚刚放入if
    then else块的then插槽中的块，将复制块放入if then else块的else插槽，并进行两个更改来编写代码。将setImageSprite.Picture块底部插槽
    ➓中的图形名称更改为PinkO.png。然后，将set global player块右侧的字符串块中的O更改为字母X。
- en: Altogether, the code tests whether the value of `player` is `X`, and, if so,
    direct the app to display the X graphic on `touchedSprite` and then change the
    value of `player` to `O`. If the value of `player` is not `X`, they tell the app
    to display the O graphic on `touchedSprite` and then change the value of `player`
    to `X`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，这段代码测试了`player`的值是否为`X`，如果是，它会指示应用程序在`touchedSprite`上显示X图形，并将`player`的值更改为`O`。如果`player`的值不是`X`，则告诉应用程序在`touchedSprite`上显示O图形，并将`player`的值更改为`X`。
- en: '**Displaying Information on the Game’s Label**'
  id: totrans-176
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**在游戏标签上显示信息**'
- en: The next blocks use a conditional to determine what to display on the app’s
    `Label`, depending on the value of the variable `play`, which we’ve already programmed
    the app to increase each time a player touches an empty square on the board. If
    `play` is less than 9, then we want the `Label` to indicate who plays next. But,
    if `play` equals or exceeds 9, we want the `Label` to say the game is over.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的块使用条件判断，根据变量`play`的值来确定在应用程序的`Label`上显示什么内容，我们已经编写了程序来增加`play`的值，每当玩家点击棋盘上的空方格时。如果`play`小于9，那么我们希望`Label`指示谁将进行下一步。但如果`play`等于或超过9，我们希望`Label`显示游戏结束。
- en: '![Image](../images/f0120-01.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0120-01.jpg)'
- en: To add the blocks, drag another if then block ➊ from the Control drawer and
    snap it inside the whenCanvas1.TouchDown block under the prior if then else block.
    Click the new if then block’s blue mutator icon to add an else input. Then, to
    test whether `play` is less than 9, snap a < comparison operator block ➋ into
    the if socket and fill its left side with a get global play block ➌ from the Variables
    drawer and its right side with a 9 number block ➍
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加这些块，从Control抽屉中拖入另一个if then块 ➊，将其放入prior if then else块下的whenCanvas1.TouchDown块内部。点击新的if
    then块的蓝色mutator图标，添加一个else输入。然后，为了测试`play`是否小于9，将一个<比较操作符块 ➋插入if插槽，并将其左侧填充为从Variables抽屉中获取的get
    global play块 ➌，右侧填充为9数字块 ➍。
- en: If the value of `play` is less than 9, the next blocks tell the app to indicate
    who plays next. Fill the then socket by clicking Label1 in the Blocks pane, dragging
    in its setLabel1.Textto block ➎, and then snapping a join block ➏ from the Text
    drawer next to the word `to`. Fill the join block’s top socket with the get global
    player block ➐ from the Variables drawer and the bottom socket with a string block
    ➑ from the Text drawer containing `'s turn...` to indicate which player’s turn
    it is.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `play` 的值小于 9，接下来的方块会告诉应用程序指示下一个轮到谁玩。通过点击 Blocks 面板中的 Label1，拖入它的 setLabel1.Textto
    方块 ➎，然后从 Text 抽屉中拖入一个 join 方块 ➏，将其插入到 `to` 旁边。将 join 方块的上方插槽填充为从 Variables 抽屉中获取的
    get global player 方块 ➐，并将下方插槽填充为包含 `'s turn...` 的字符串块 ➑，以指示哪个玩家的轮到玩。
- en: Finally, if `play` is not less than 9, the next blocks tell the app to say the
    game is over. Fill the if then else block’s else socket by dragging in another
    setLabel1.Textto block ➒ and snapping a string block ➓ from the Text drawer containing
    `Game's over!` next to the word `to`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果 `play` 不小于 9，接下来的方块会告诉应用程序说游戏已经结束。通过拖入另一个 setLabel1.Textto 方块 ➒，并从 Text
    抽屉中拖入一个包含 `Game's over!` 的字符串块 ➓，将其插入到 if then else 方块的 else 插槽中。
- en: Altogether, these blocks test whether the value of `play`, which holds the number
    of times a player has played in the game, is less than 9\. If so, they direct
    the app to use the value of `player` to indicate whose turn it is to play next.
    However, if the value of `play` is 9 or more, they tell the app to indicate that
    the game is over.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，这些方块会测试 `play` 的值，`play` 保存了玩家在游戏中已进行的次数。如果 `play` 小于 9，它们会指示应用程序使用 `player`
    的值来显示下一个轮到哪个玩家。然而，如果 `play` 的值为 9 或更多，它们会告诉应用程序游戏已经结束。
- en: Let’s live-test now to see how the step 2 blocks work. As long as the blocks
    are placed correctly, once you open the app, you should see the game board and
    the reset button and be able to play the game.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们进行现场测试，看看第2步的方块是如何工作的。只要方块放置正确，一旦你打开应用程序，你应该能看到游戏板和重置按钮，并能够开始游戏。
- en: When you touch an empty square, an X should appear in the square you touched,
    and the label above the reset button should display `O's turn`. Then, when the
    next empty square is touched, an O should appear in the touched square, and the
    label above the reset button should read `X's turn`, and so on, until the last
    empty square is touched and the label reads `Game's over!`. Since we haven’t yet
    programmed the reset button, nothing should happen when you click it. We’ll do
    that next.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击一个空白方格时，X 应该出现在你点击的方格里，重置按钮上方的标签应该显示 `O's turn`。然后，当下一个空白方格被点击时，O 应该出现在被点击的方格里，重置按钮上方的标签应该显示
    `X's turn`，依此类推，直到最后一个空白方格被点击，标签显示 `Game's over!`。由于我们还没有编程重置按钮，因此点击它时不会发生任何事情。接下来我们将编程这一部分。
- en: '**STEP 3: PROGRAMMING THE RESET BUTTON**'
  id: totrans-185
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**第 3 步：编程重置按钮**'
- en: Let’s now program step 3 of the app—coding the `Button1 Click` event handler.
    When a player hits the reset button, we want all X and O images on the game board
    and all text in the label to disappear, and we want to reset `player` and `play`
    to their original values. The `Button1 Click` event handler programs these actions.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们编写应用程序的第3步——编程 `Button1 Click` 事件处理程序。当玩家点击重置按钮时，我们希望游戏板上的所有 X 和 O 图片以及标签中的所有文本消失，并且希望将
    `player` 和 `play` 重置为原始值。`Button1 Click` 事件处理程序负责编程这些操作。
- en: '![Image](../images/f0121-01.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0121-01.jpg)'
- en: '**Clearing the Game Board**'
  id: totrans-188
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**清空游戏板**'
- en: To make the X and O images disappear, we’ll use another `for each item` and
    Any ImageSprite blocks to make the app loop though each `ImageSprite` and set
    the name of its `Picture` to an empty string so that it will no longer display
    an image.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 X 和 O 图片消失，我们将使用另一个 `for each item` 和 Any ImageSprite 方块，使应用程序遍历每个 `ImageSprite`，并将其
    `Picture` 的名称设置为空字符串，这样它就不再显示图片。
- en: Click Button1 in the Blocks pane and drag its whenButton1.Click event handler
    block ➊ to the Viewer. Then drag in a for each item block ➋ from the Control drawer
    and snap it inside the whenButton1.Click block next to the word `do`, and then
    change item to sprite.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 Blocks 面板中的 Button1，并将其 whenButton1.Click 事件处理程序块 ➊ 拖动到 Viewer 中。然后从控制抽屉中拖入一个
    `for each item` 方块 ➋，并将其插入到 whenButton1.Click 方块的 `do` 旁边，再将 item 改为 sprite。
- en: Next, drag a get global squares block ➌ from the Variables drawer and snap it
    to the right of the for each sprite block next to the word `list`. Then, next
    to the word `do`, drag in a setImageSprite.Picture block ➍ from the Any ImageSprite
    drawer, and fill its first socket by mousing over sprite in the for each sprite
    block and dragging in its get sprite block ➎ and its second socket by snapping
    in an empty string block ➏. These blocks clear the game board of all Xs and Os
    when the player hits the button.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从变量抽屉中拖动一个“获取全局方块”块 ➌，并将其连接到“每个精灵”块右侧，位于 `list` 字样旁边。然后，在 `do` 旁边，拖动一个“设置ImageSprite.Picture”块
    ➍，从“任意ImageSprite”抽屉中拖入，填充其第一个插槽时，悬停在“每个精灵”块中的精灵上并拖入其“获取精灵”块 ➎，将第二个插槽填充为拖入一个空字符串块
    ➏。这些块会在玩家点击按钮时清除游戏板上的所有 X 和 O。
- en: '**Resetting the Label and Global Variables**'
  id: totrans-192
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**重置 Label 和全局变量**'
- en: Now let’s add the blocks that will restore `Label1` and the `player` and `play`
    variables to their original state.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加那些会将 `Label1` 以及 `player` 和 `play` 变量恢复到原始状态的块。
- en: '![Image](../images/f0122-01.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0122-01.jpg)'
- en: Click Label1 in the Blocks pane, drag its setLabel1.Text block ➊ in under the
    for each loop, and snap an empty string block ➋ into its socket. Then drag a set
    global player block ➌ from the Variables drawer, snap it under the setLabel1.Text
    block, and place another string block ➍ filled with an `X` into its socket. Finally,
    drag a set global play block ➎ from the Variables drawer, snap it under the set
    global player block, and place a 0 number block ➏ into its socket. These blocks
    make the `Label` text disappear and set `player` and `play` to their original
    `X` and `0` values.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在块面板中点击 `Label1`，将其“设置Label1.Text”块 ➊ 拖入“每个循环”下方，并将一个空字符串块 ➋ 拖入其插槽。然后，从变量抽屉中拖入一个“设置全局player”块
    ➌，将其放在“设置Label1.Text”块下方，再放入另一个字符串块 ➍，并将其填充为 `X`。最后，从变量抽屉中拖入一个“设置全局play”块 ➎，将其放在“设置全局player”块下方，并将一个值为
    0 的数字块 ➏ 放入其插槽。这些块会使 `Label` 文本消失，并将 `player` 和 `play` 恢复到它们原始的 `X` 和 0 值。
- en: Altogether, the blocks for step 3 direct the app to reset when a player hits
    Reset Game, just as we planned.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，第三步的块会指示应用在玩家点击“重置游戏”时进行重置，正如我们预期的那样。
- en: '**TESTING THE APP**'
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**测试应用**'
- en: Now we can test the completed app! When you look at your device, you should
    still see the game board and the reset button and be able to play the game just
    as you did when you last tested. And now, when you hit the reset button, all the
    X and O graphics should disappear along with the label text.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以测试完成的应用了！当你查看你的设备时，应该仍然能看到游戏板和重置按钮，并且能够像上次测试时一样进行游戏。而现在，当你点击重置按钮时，所有 X
    和 O 图形以及标签文本应该会消失。
- en: Also, behind the scenes, the `player` and `play` variables should reset as well,
    which you can test by beginning to play the game again. When you touch a square,
    an X graphic should appear and you should be allowed to touch all nine empty squares
    before the label displays “Game’s over!”
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，幕后中的 `player` 和 `play` 变量也应被重置，你可以通过重新开始游戏来进行测试。当你点击一个方块时，应该会出现一个 X 图形，并且你可以在标签显示“游戏结束！”之前点击所有九个空白方块。
- en: If your reset button doesn’t work as planned, debug and try again. Also reset
    your connection to AI2 Companion if necessary by clicking **Connect** ▸ **Reset
    Connection** in the top menu bar and then clicking **Connect** ▸ **AI Companion**
    and scanning the QR code. If you placed your blocks correctly, the app should
    work as expected, and you’ve successfully created the “Tic Tac Toe” game app!
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的重置按钮没有按预期工作，请调试并重试。如果有必要，通过点击顶部菜单栏的 **Connect** ▸ **Reset Connection** 来重置与你的
    AI2 Companion 的连接，然后点击 **Connect** ▸ **AI Companion** 并扫描二维码来重新连接。如果你正确放置了块，应用程序应该按预期工作，且你已成功创建了“Tic
    Tac Toe”游戏应用！
- en: '**SUMMARY**'
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter, you built the “Tic Tac Toe” app, which uses the App Inventor
    `Canvas` and `ImageSprite` components to create a Tic Tac Toe game for two players.
    As you built the app, you learned how to create a list of components, access the
    components’ properties using Any component blocks, and iterate through the list
    with `for each` loops to set up and help control the flow of the game. You worked
    more extensively with `if then` and logical and comparison operator blocks to
    control app flow as well.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你构建了“Tic Tac Toe”应用，使用 App Inventor 的 `Canvas` 和 `ImageSprite` 组件为两名玩家创建了一个井字游戏。在构建应用的过程中，你学习了如何创建组件列表，使用任何组件块访问组件的属性，并通过
    `for each` 循环遍历列表以设置和帮助控制游戏流程。你还更深入地使用了 `if then` 和逻辑及比较操作符块来控制应用程序的流程。
- en: In the next chapter, you’ll learn how to make your code reusable by writing
    *procedures*—called *methods* and *functions* in some programming environments—using
    the Procedures blocks. You’ll create and call procedures in your code for the
    “Multiplication Station II” app, which will allow users to choose from one of
    two difficulty levels of timed multiplication problems.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何通过编写*过程*（在某些编程环境中称为*方法*和*函数*）使你的代码具有可重用性，使用过程块。在你的代码中，你将为“乘法站 II”应用创建并调用过程，这将允许用户选择两种计时乘法题目难度之一。
- en: '**ON YOUR OWN**'
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**独立完成**'
- en: Save new versions of “Tic Tac Toe” as you modify and extend it for these exercises.
    You can find solutions online at *[https://nostarch.com/programwithappinventor/](https://nostarch.com/programwithappinventor/)*.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在修改和扩展“井字游戏”以完成这些练习时，保存新版本。你可以在 *[https://nostarch.com/programwithappinventor/](https://nostarch.com/programwithappinventor/)*
    在线找到解决方案。
- en: Extend the game so that it indicates when a player has won the game, meaning
    a player has placed Xs or Os in three squares in a row, either horizontally, vertically,
    or diagonally.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展游戏，使其能够指示当某个玩家赢得比赛时，即当玩家在三格中连续放置了X或O，无论是水平、垂直还是对角线方向。
- en: Extend the app further so that it uses an additional component to indicate which
    player has won the game.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进一步扩展应用，使其使用一个额外的组件来指示哪个玩家赢得了比赛。
