["```\ndef get_neighbors(self) -> set:  \n    neighbors: set = set()\n    for edge in self.edges.values():\n        neighbors.add(edge.to_node)\n    return neighbors \n```", "```\ndef get_out_neighbors(self) -> set:  \n    neighbors: set = set()\n    for edge in self.edges.values():\n        neighbors.add(edge.to_node)\n    return neighbors \n```", "```\ndef get_in_neighbors(self, target: int) -> set:  \n    neighbors: set = set()\n    for node in self.nodes:\n      ❶ if target in node.edges:\n            neighbors.add(node.index)\n    return neighbors \n```", "```\ndef clustering_coefficient(g: Graph, ind: int) -> float: \n  ❶ neighbors: set = g.nodes[ind].get_neighbors()\n    num_neighbors: int = len(neighbors)\n\n    count: int = 0\n    for n1 in neighbors:\n        for edge in g.nodes[n1].get_edge_list():\n          ❷ if edge.to_node > n1 and edge.to_node in neighbors:\n                count += 1\n\n    total_possible = (num_neighbors * (num_neighbors - 1)) / 2.0\n  ❸ if total_possible == 0.0:\n        return 0.0\n    return count / total_possible \n```", "```\ndef ave_clustering_coefficient(g: Graph) -> float:\n    total: float = 0.0\n    for n in range(g.num_nodes):\n        total += clustering_coefficient(g, n)\n\n    if g.num_nodes == 0:\n        return 0.0\n    return total / g.num_nodes \n```", "```\ndef make_undirected_neighborhood_subgraph(self, ind: int, closed: bool):  \n  ❶ if not self.undirected:\n        raise ValueError\n\n  ❷ nodes_to_use: set = self.nodes[ind].get_neighbors()\n    if closed:\n        nodes_to_use.add(ind)\n\n    index_map = {}\n  ❸ for new_index, old_index in enumerate(nodes_to_use):\n        index_map[old_index] = new_index\n\n    g_new: Graph = Graph(len(nodes_to_use), undirected=True)\n    for n in nodes_to_use:\n        for edge in self.nodes[n].get_edge_list():\n          ❹ if edge.to_node in nodes_to_use and edge.to_node > n:\n                ind1_new = index_map[n]\n                ind2_new = index_map[edge.to_node]\n                g_new.insert_edge(ind1_new, ind2_new, edge.weight)\n\n    return g_new \n```"]