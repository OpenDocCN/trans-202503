- en: 11. selected interviews
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’ve done several interviews over the years, and this chapter compiles a couple
    that I thought you might enjoy. The first interview was originally published by
    the *China Software Developer Network (CSDN)*, which describes itself as a “programmer
    magazine.” At the end, you’ll find a story from the *Blueprint*, a collection
    of interviews with founders and innovators in hardware.
  prefs: []
  type: TYPE_NORMAL
- en: '**ANDREW “BUNNIE” HUANG: HARDWARE HACKER (CSDN)**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This interview originally appeared in *CSDN* in Chinese in 2013, and the magazine
    kindly allowed me to publish an English translation on my blog. In the first section,
    I discussed my thoughts on the maker movement, which was relatively new at the
    time, and my experience with making hardware products. The second section was
    more about hardware hacking and what I feel it means to have a hacker spirit.
    You can find the original Chinese-language version at *[http://www.csdn.net/article/2013-07-03/2816095](http://www.csdn.net/article/2013-07-03/2816095)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**About Open Hardware and the Maker Movement**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '***The maker and open hardware movements have attracted a lot of attention.
    Chris Anderson wrote a book called Makers, and Paul Graham called this time the
    “Hardware Renaissance.” How do you think this movement will affect ordinary people,
    developers, and our IT industry?***'
  prefs: []
  type: TYPE_NORMAL
- en: This movement, as it may be, is more a symptom than a cause, in my opinion.
    First, let’s review how we got to this point.
  prefs: []
  type: TYPE_NORMAL
- en: In 1960, there was only hardware, and it was all open. When you bought a transistor
    radio, it had a schematic printed in the back. If the radio broke, you had to
    fix it yourself. It was popular to buy kits to make your own radios.
  prefs: []
  type: TYPE_NORMAL
- en: Between 1980 and 1990, the personal computer revolution began. Computers started
    to become powerful enough to run software that was interesting and enabling.
  prefs: []
  type: TYPE_NORMAL
- en: 'From 1990 to 2005, Moore’s law drove computers to be twice as fast and have
    twice as much memory every 1.5 to 2 years. Only software mattered, because unless
    you could afford to fab a chip in the latest technology, making hardware wasn’t
    worth it. By the time you got the components together, a new chip would make your
    design look slow. Optimizing software also mattered less than features, convenience,
    and creativity. Users could just buy a faster computer and run old software faster.
    “Making” fell out of fashion because there was no time for it: you had to ship
    code or die.'
  prefs: []
  type: TYPE_NORMAL
- en: From 2005 to 2010, computers didn’t get much faster in terms of clock speed,
    but they got smaller. Smartphones were born. Everything became an app, and everything
    is still becoming more connected.
  prefs: []
  type: TYPE_NORMAL
- en: 'From about 2010 to now, Moore’s law has been slowing down. This slowdown is
    rippling through the innovation chain. PCs aren’t getting faster, better, or cheaper
    in a meaningful way. We buy new PCs just to replace broken ones, not because the
    latest model is so much better. It’s too early to tell, but smartphones may also
    be solidifying as a platform: the iPhone 5 is quite similar to the iPhone 4, and
    Samsung phones also look pretty similar across revisions.'
  prefs: []
  type: TYPE_NORMAL
- en: The question, then, is how to innovate? How can you create market differentiation?
    With Moore’s law slowing down, it’s possible to innovate in hardware and not have
    your innovation look slow because a new chip came out. You have steady platforms
    (PCs, smartphones, tablets) that you can target your hardware ideas toward. You
    don’t have to fab chips just to have an advantage. Everyone is now sifting through
    technology’s past, looking for niches that were overlooked. Even an outdated smartphone
    motherboard looks amazing when you put it in a quadcopter, satellite, HVAC system,
    automobile, energy monitoring system, health monitoring system, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, as humans, we fundamentally feel differently toward physical things
    and virtual things. Apps are wonderful, but human homes are more than a smartphone,
    a food tray, a bed, and a toilet. People still surround themselves with knickknacks,
    photos of friends, and physical gifts from special occasions. I don’t think there
    will ever be a time when a virtual teddy bear app will displace a physical teddy
    bear for cuddling at night.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, there will always be a place for people to make hardware that fills
    this need for tangible goods. This hardware will merge more technology and run
    more software, but in the end, there is a space for makers and hardware startups,
    and that space is just getting bigger now that hardware technology is stabilizing.
  prefs: []
  type: TYPE_NORMAL
- en: '***Arduino and Raspberry Pi seem to reduce the threshold for designing hardware.
    How do you think this will affect the hardware industry? Do you think these platforms
    will progress the industry by leaps and bounds? If not, what does it take to make
    a really innovative hardware product?***'
  prefs: []
  type: TYPE_NORMAL
- en: Arduino and Raspberry Pi serve specific market niches.
  prefs: []
  type: TYPE_NORMAL
- en: Arduino’s key contribution is reducing computation to an easy-to-use physical
    form. It was made first and foremost by designers and artists, and less so by
    technologists. This unique perspective on technology is very powerful because
    people who aren’t programmers or hardware designers want to access hardware technology,
    too. Some very moving, deep interactive art pieces have been made using the Arduino,
    allowing hardware to transform menial control applications into artwork that changes
    your mood or makes you think about life differently. I think Arduino is just the
    first step toward taking the “tech” out of technology and letting everyday people
    not just use technology but create with it. There will be other platforms, for
    sure.
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi is a very inexpensive embedded hardware reference module, and I
    think other platforms will follow in its footsteps. It’s cheap enough that for
    many applications, you can use the Raspberry Pi as is and gain no net cost advantage
    by designing and building your own hardware. For hardware professionals, the nice
    thing about this platform is that instead of buying a reference design and then
    having to spin your own board, you can just buy the Raspberry Pi and ship it in
    your product. For people who have relatively low-volume products, this makes sense.
  prefs: []
  type: TYPE_NORMAL
- en: I see an ongoing trend toward product design becoming more feasible at low volumes.
    There’s still a market for million-unit blockbuster devices like smartphones and
    coffeemakers, but eventually, there will also be a market for devices that only
    have a production run of 1,000 to 10,000 units, but with a much higher margin.
    These small-run products will be developed and sold by teams of just one or two
    people so that the profit will still be a good living for the individuals. The
    key to the success for these products is that they are highly customized and help
    solve a specific problem for a small group of users who are willing to pay more
    for the solution.
  prefs: []
  type: TYPE_NORMAL
- en: '***When new concepts or technologies first appear, they always generate optimistic
    discussion, but most of them will really affect our lives only after a long period
    of development. When discussing the maker and open hardware movements, are we
    too optimistic? Does the average person have common misunderstandings about this
    field?***'
  prefs: []
  type: TYPE_NORMAL
- en: Yes, it does take a long time for technology to really change our lives.
  prefs: []
  type: TYPE_NORMAL
- en: The maker movement, I think, is less about developing products and more about
    developing people. It’s about helping people realize that because technology is
    man-made, every person has the power to control it with a little knowledge. There
    is no magic in technology. You could also say that anyone can be a magician with
    a little training.
  prefs: []
  type: TYPE_NORMAL
- en: Open hardware is more of a philosophy. The success or failure of a product is
    largely disconnected from whether the hardware is open or closed. Closing hardware
    doesn’t stop people from cloning or copying, and opening hardware doesn’t mean
    that bad ideas will be copied simply because they are open. Unlike software, hardware
    requires a supply chain, distribution, and a network of relationships to build
    it at a low cost. That overhead means being open or closed is only a small part
    of the equation, and the question of whether to open or close a project revolves
    around how much you want to involve end users or third parties to modify or interoperate
    with your product.
  prefs: []
  type: TYPE_NORMAL
- en: '***Looking at the future of open source hardware, do you think it will be analogous
    to the open source software industry, where many commercial companies also support
    open source software? What are the differences between them?***'
  prefs: []
  type: TYPE_NORMAL
- en: I don’t think they’re quite analogous. In software, the cost to copy, modify,
    and distribute is basically zero. I can clone a copy of the Linux source repository,
    run the `make` command, and have the same high-quality kernel running on my desktop
    that runs on top-end servers and supercomputers.
  prefs: []
  type: TYPE_NORMAL
- en: 'But copying hardware has a real cost: the parts, the factories, and the skilled
    workers used to build them; the quality control procedures; and the manufacturing
    process are all important factors in the final product’s cost, look, feel, and
    performance. Simply giving someone a copy of my schematics and drawings doesn’t
    mean they can make my exact product. Even injection molding has art to it. If
    I give the same CAD drawing to two tooling makers, the outcome could be very different
    depending on where the mold maker decides to place the gates, the ejector pins,
    the cooling for the mold, the mold cycle time, temperature, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: And then you have to think about the distribution channel, reverse logistics,
    financing, and so on. Even as the world becomes more efficient at logistics, you’ll
    never be able to buy a TV as easily as you can download the movies that you’d
    watch on that TV.
  prefs: []
  type: TYPE_NORMAL
- en: '***What kind of business model do you think is ideal for an open source hardware
    company? Could you give an example?***'
  prefs: []
  type: TYPE_NORMAL
- en: One of my key theories behind open source hardware is that regardless of the
    license, hardware is essentially open, at least at the level of schematics and
    PCB layout. For a relatively small amount of money, you can pay a service to extract
    the details required to copy a PCB design. Therefore, you can assume that once
    you ship hardware, it can be copied. If you accept this assumption, then it follows
    that not releasing schematics and PCB layouts won’t stop people from copying your
    goods. If someone wants to copy a piece of hardware, they will, whether you share
    your design files or not.
  prefs: []
  type: TYPE_NORMAL
- en: But sharing design files does make a difference to a separate and important
    group of people. There are other businesses and individual innovators who could
    use your design files to design accessories, upgrades, or third-party enhancements
    that rely upon your product. In that case, sharing your design files improves
    your opportunity for new business relationships, which makes doing so (with an
    open source hardware license to reserve a few basic rights and protections) a
    practical suggestion.
  prefs: []
  type: TYPE_NORMAL
- en: Clearly, some hardware strategies aren’t compatible with open source. If your
    sole value to the consumer is your ability to make stand-alone hardware, and you
    have no strategic advantage in terms of cost, then you’d want to keep your plans
    secret to delay low-cost copies for as long as possible.
  prefs: []
  type: TYPE_NORMAL
- en: But the most innovative products today aren’t just pieces of hardware. They
    also involve software and services. Open hardware business models work better
    in such hybrid products. In many cases, consumers are willing to pay annually
    (think in terms of subscriptions, advertising, upsells, accessories, royalties,
    or upgrades) for many products. In fact, it’s most profitable to just collect
    these fees and not involve yourself in the hardware manufacturing portion. Controlling
    access to an ongoing service is also much easier than controlling the plans for
    a piece of hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, if you couple a profitable online service with your hardware, open hardware
    makes a lot of sense. Letting other people copy the hardware, sell it, and add
    more users to your online service simply means you get more revenue without more
    risk.
  prefs: []
  type: TYPE_NORMAL
- en: '***You come to China often and know a lot about this country. China’s software
    technology is not advanced. Do you think that being the world factory center will
    help China improve its overall level of technology? How can this country change
    from just a manufacturing center to a place focused on design, research, and development?
    What is China missing?***'
  prefs: []
  type: TYPE_NORMAL
- en: I wouldn’t say I know much about China. I know a little about one small corner
    of China in one specific area—hardware manufacturing. If there’s one thing I do
    know, however, it’s that China is a very big country with many different kinds
    of people and a long history that I am only beginning to understand. However,
    I’ve lived through almost the entire history of high technology, so I can comment
    on the relationship between high technology and people, from which I can derive
    some perspective about China.
  prefs: []
  type: TYPE_NORMAL
- en: First, every country that is a technology powerhouse today started with manufacturing.
    The United States started as colonies of Britain, mining ores, trapping furs,
    and farming cotton and tobacco. Over time, the United States had steel mills and
    linen production. The United States didn’t really start to develop original technology
    until the early 1900s, and that process didn’t take off until the mid 1900s.
  prefs: []
  type: TYPE_NORMAL
- en: Japan developed similarly. It started in manufacturing, copying many US-made
    goods. In fact, if you believe the historical accounts, the first cars and radios
    made in Japan were not great. It took the United States and Japan decades to go
    from manufacturing-based economies to service-based economies.
  prefs: []
  type: TYPE_NORMAL
- en: Compare that to China, where the electronics manufacturing industry started
    maybe 20 years ago, at most, and China is just turning the corner from being a
    manufacturing-oriented economy to one that can do more design and software technology.
    I believe this is a natural series of events. Some portion of entry-level workers
    will eventually become technicians, then some technicians will become designers,
    and finally, some designers will become successful entrepreneurs.
  prefs: []
  type: TYPE_NORMAL
- en: In concrete numbers, if you have 10 million factory workers, maybe 1 percent,
    or 100,000 workers, will learn enough to become technicians after a few years.
    After a few years of technician work, maybe 1 percent will gain enough skill to
    become original designers, giving 1,000 designers. These experienced, grassroots
    designers would become the core of an entrepreneurial economy, and from there,
    the economy could begin to transform.
  prefs: []
  type: TYPE_NORMAL
- en: Over the course of a decade or two, a thousand companies would eventually be
    distilled to just a handful of global brand companies. I believe China is currently
    going through this final phase. A lot of people in Shenzhen have the experience
    of manufacturing, the wisdom to do design, and the ability to apply their talent
    to innovation and original product design. The next decade will be an exciting
    one for China’s technology industry, if the current policies on economic and intellectual
    development stay roughly on course.
  prefs: []
  type: TYPE_NORMAL
- en: This pattern applies primarily to hardware or hardwaredominated products. Software
    products have a similar pattern, but I believe there are unique cultural aspects
    that give the West an advantage in software design. In hardware, if a process
    is not efficient or is producing low yield, you can easily identify the root cause
    and produce direct physical evidence of the problem. Hardware problems, in essence,
    are indisputable.
  prefs: []
  type: TYPE_NORMAL
- en: In software, if code is not efficient or it’s poorly written, it’s very hard
    to identify the exact problem that causes it. You can see evidence of programs
    crashing or running slowly, but there’s no broken wire or missing screw you can
    hold up to show everyone why the software is broken. Instead, developers have
    to review complex designs, consider many opinions, and ultimately, identify a
    problem that comes down to nothing more than one individual’s bad decision. All
    software APIs are simply constructs of human opinions.
  prefs: []
  type: TYPE_NORMAL
- en: Asian cultures have a strong focus on *guanxi*, reputation, and respect for
    the elders. The West tends to be more rebellious and willing to accept outsiders
    as champions, and they have less respect for the advice of elders. As a result,
    I think it’s very culturally difficult in an Asian context to discuss code quality
    and architectural decisions. The field of software itself is only 30 years old,
    and older, more experienced engineers are also the most out of date in terms of
    methodology and knowledge. In fact, the young engineers often have the best ideas.
    But if it’s culturally difficult for young engineers to challenge the decisions
    of elder engineers, you end up with poorly architected code and no hope to be
    competitive.
  prefs: []
  type: TYPE_NORMAL
- en: Overcoming these obstacles is possible, but enforcing the correct incentives
    and culture would require a very strong management philosophy. The workers should
    be rewarded fairly for making correct decisions, and there can be no favorites
    based upon friendship, relationship, or seniority. Senior engineers and managers
    must see a real financial reward for accepting their mistakes, instead of saving
    face by forcing junior engineers to code patches around bad high-level decisions.
    US companies usually achieve this alignment by sharing equity in a company among
    the engineers so that the big payout only comes if the company as a whole survives,
    regardless of an individual’s ego.
  prefs: []
  type: TYPE_NORMAL
- en: '***What do you think the relationship between individual makers and commercial
    companies will be in the future? And as individual makers may compete not only
    with commercial companies but also with other makers in the future, what factors
    are critical to a product’s success?***'
  prefs: []
  type: TYPE_NORMAL
- en: As minimum order quantities decrease and innovation gets closer to the edge,
    I think commercial companies will see more competition from makers, especially
    as the logistics industry transforms itself into an API that can plug directly
    into websites. At the end of the day, the most critical factor to success will
    still be how much value consumers perceive from a product. This is related to
    superior features and good product quality, but the presentation to the consumer
    and how clearly the benefits are explained are important, too.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, any product will need to be visually appealing, be easy to use,
    and come with marketing material that clearly explains the benefits of using it.
    Those elements are often challenging for individual makers who are good at making
    products that are valuable technically but have less talent for sales and marketing.
    Makers who can master both facets will have an edge.
  prefs: []
  type: TYPE_NORMAL
- en: '**About Hardware Hackers**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '***You’ve participated in the development process of many products, but what
    is your personal goal?***'
  prefs: []
  type: TYPE_NORMAL
- en: I would like to make people happy by building things that improve their life
    in some way. The greatest pleasure is to see someone enjoying something I made,
    and knowing I’ve improved that person’s life in some small way. Sometimes, the
    product is solving a big problem for its users; other times, the product is more
    whimsical, and the user’s happiness comes from fun or beauty. But either way,
    knowing I’m helping another person by making something is important to me. I’ve
    learned that money beyond a certain level doesn’t make me any happier. This makes
    me difficult to work with, because it’s hard for people to just hire me by offering
    a lot of money. Instead, they need to convince me that the activity will somehow
    also make people happy.
  prefs: []
  type: TYPE_NORMAL
- en: Another important goal for me is to just understand how the world works. I have
    a natural curiosity, and I want to learn and understand all kinds of things. The
    universe has a lot of patterns to it, and sometimes, you’ll find seemingly unrelated
    pieces fitting together like magic. Discovering these links and seeing the world
    fit together like a big jigsaw puzzle is profound and satisfying.
  prefs: []
  type: TYPE_NORMAL
- en: '***Failure tends to give people more experience. Could you talk about the not-so-successful
    projects you have participated in, or if you’ve ever seen other failed projects
    that inspired you?***'
  prefs: []
  type: TYPE_NORMAL
- en: 'My life is a story of failures. The only thing I have done repeatedly and reliably
    is fail. But I have two rules when handling failure:'
  prefs: []
  type: TYPE_NORMAL
- en: Don’t give up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don’t make the same mistake twice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you follow these rules, eventually, you’ll find success after many failures.
    That said, I do have an interview that focuses on one of my recent failures. You
    can read it at *[http://makezine.com/2012/04/30/makes-exclusive-interview-with-andrew-bunnie-huang-the-end-of-chumby-new-adventures/](http://makezine.com/2012/04/30/makes-exclusive-interview-with-andrew-bunnie-huang-the-end-of-chumby-new-adventures/)*.[*](footnote.xhtml#fn35)
  prefs: []
  type: TYPE_NORMAL
- en: '***Your book,*** **Hacking the Xbox*****, has been published for 10 years.
    For people who want to learn reverse engineering or become a hardware hacker today,
    how do these experiences and skills still apply?***'
  prefs: []
  type: TYPE_NORMAL
- en: I’d like to think the core principles covered in the book are still relevant
    today. The Xbox was simply an example I used to show how to do things. The approach
    and the techniques are applicable to a broad range of problems.
  prefs: []
  type: TYPE_NORMAL
- en: For the Chinese audience, I have found mobile phone repair manuals to be quite
    interesting to read, even though I can’t read Chinese well. Their descriptions
    on the theory of electronics are not always completely accurate, but practically
    speaking, they’re good enough, and they provide a quick way to get started while
    learning immediately useful skills in repairing phones.
  prefs: []
  type: TYPE_NORMAL
- en: There’s also a Chinese magazine, called 无线电 (something like *Radio Electronics*
    in English), which I have found to be quite good. If you get started building
    the projects in there, I think you will learn very quickly.
  prefs: []
  type: TYPE_NORMAL
- en: '***The Xbox One has more stringent restrictions for users. What do you think
    about this? Are you interested in exploring this black box and upgrading your
    book?***'
  prefs: []
  type: TYPE_NORMAL
- en: I haven’t done much work on video game consoles in a while; there’s a whole
    new generation of console hackers who are excited to explore them, and I’m happy
    for that. As for the Xbox One’s security, I’m sure it is one of the most secure
    systems built. Microsoft did a very good job on the Xbox 360, and the Xbox One
    security team members I know personally have a very solid understanding of the
    principles needed to build secure hardware. It should be very hard to crack.
  prefs: []
  type: TYPE_NORMAL
- en: That said, I’m glad I have no desire to buy or use one. I think I would become
    very frustrated with their use policies and restrictions very quickly.
  prefs: []
  type: TYPE_NORMAL
- en: '***There’s a lot of controversy over whether electronic devices should have
    a lock to prevent user rooting. What do you think about this? Is there a contradiction
    between ensuring user safety and giving users complete control of their devices?***'
  prefs: []
  type: TYPE_NORMAL
- en: I believe users should own their hardware, and owning something means having
    the right to modify it and having root access rights. If a company is concerned
    about users being unsafe, then it’s easy enough to allow users to opt out by signing
    an electronic waiver to give up their support and warranty rights in order to
    gain complete access to their own machines. Most people who can root their machines
    are already smarter than the phone support they would be calling inside the company,
    so they shouldn’t have problems.
  prefs: []
  type: TYPE_NORMAL
- en: The laws have changed to make some rooting activities illegal, even on hardware
    that you bought and own. I think this reduction in our natural rights of ownership
    is dangerous and can put consumers in unfair situations. This also discourages
    consumers from exploring and learning more about the technologies they’ve become
    so dependent upon.
  prefs: []
  type: TYPE_NORMAL
- en: '***As hardware systems become more integrated, do you think hardware hacking
    is getting more and more difficult, or do you worry about hardware hackers becoming
    extinct? If so, how could we change this situation?***'
  prefs: []
  type: TYPE_NORMAL
- en: Hardware system integration has been increasing for a long time. The TX-0 just
    used transistors, the Apple II used TTL ICs, PCs use controller chipsets, and
    mobile phones have just a single System-on-Chip. Increasing integration does make
    some parts harder to hack, but there are always opportunities at the system integration
    level.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, I still think there is art in hardware, but the level at which
    hardware hackers have to work gets higher every day, and that’s a good thing.
    It means hacks are getting more powerful with time as well.
  prefs: []
  type: TYPE_NORMAL
- en: '**Hacking the Xbox** ***is dedicated to Aaron Swartz. Could you talk about
    why you think the hacker spirit is important today?***'
  prefs: []
  type: TYPE_NORMAL
- en: The hacker spirit is the ultimate expression of human problem-solving ability.
    It’s about the ability to see the world for what it is, and not the constructs
    and conventions that society puts in place. For instance, a brick is not just
    used to make buildings; it can be a doorstop, a weapon, a paperweight, a heating
    ballast, or it can be ground up and used for soil. Hackers question convention
    through the lens of doing what’s most practical and correct for the situation
    at hand. Sometimes their methods aren’t always harmonious, as hackers often prioritize
    doing the right thing over being nice or playing by the rules.
  prefs: []
  type: TYPE_NORMAL
- en: I find the more difficult situations become, the more pervasive and stronger
    the hacker spirit becomes among common people. I see evidence of this around the
    world. This spirit is linked to the human will to survive and to thrive. I think
    it’s important for a society to cultivate and tolerate the hacker spirit. Not
    everyone has it, but the few who do help make society more resilient and survivable
    in hard times.
  prefs: []
  type: TYPE_NORMAL
- en: '***Do you have other words you would like to share with Chinese readers?***'
  prefs: []
  type: TYPE_NORMAL
- en: I was reading some comments on a Chinese web forum and was surprised that many
    Chinese regard the term *shanzhai* as a negative term. As an outsider, I feel
    that the shanzhai have done a lot of very interesting and useful innovation.
  prefs: []
  type: TYPE_NORMAL
- en: In English, we have a similar problem. The term *hacker* in English started
    as a good term but over time became associated with many kinds of negative acts.
    The term *maker* was coined to distinguish between the positive and negative aspects
    of hackers, but I still call myself a hacker because I still adhere to the traditional
    definition of the word.
  prefs: []
  type: TYPE_NORMAL
- en: It may be easier to explain the innovation happening in China if a similar linguistic
    bifurcation could happen in Chinese. I recently proposed referring to the innovative,
    open aspects of what the shanzhai do, like their method of sharing design files,
    as *gongkai* (公开). Significantly, I feel the term 开放 (*kai fang*, which means
    to lay open or to open to the public) as used in 开放源代码 (*kai fang yuan dai ma*,
    which means open source software) doesn’t quite apply. It refers to a specific
    Western-centric legal aspect of being open, which is not applicable to the methods
    engaged in the Chinese ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Incidentally,* kai fang *also means to bloom, so it sounds poetic in Chinese.*
    Gongkai*, on the other hand, just means public or overt—whether you like it or
    not. Its meaning is not as poetic or optimistic as* kai fang.'
  prefs: []
  type: TYPE_NORMAL
- en: The fact that China has found its own way to share IP, unique from the Western
    system, doesn’t mean that the Chinese system is bad. It’s actually quite interesting,
    and I’m very curious to see where it goes. Since I see positive value in some
    of the methods that the shanzhai use, I’d propose using the more positive, generic
    term *gongkai* to describe the style of IP sharing commonly used in China, but
    I would stop short of formally associating it with the strict definition of open
    source.
  prefs: []
  type: TYPE_NORMAL
- en: But then again, who am I to say? I’m not a native Chinese speaker, and maybe
    there is a much better way to address the situation.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BLUEPRINT TALKS TO ANDREW HUANG**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Blueprint* publishes stories about founders in the hardware space, and
    this interview focuses on, as the writer put it, my “personal journey.” I discuss
    what got me into hardware as a kid, what projects I was working on when I gave
    the interview, and pitfalls that hardware startups should keep an eye out for.
    The original interview, which includes some photos of my projects and answers
    to a few other interesting questions that didn’t appear in the interview proper,
    is at *[https://theblueprint.com/stories/andrew-huang/](https://theblueprint.com/stories/andrew-huang/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '***How would you describe your first encounters with hardware?***'
  prefs: []
  type: TYPE_NORMAL
- en: My dad bought an Apple II clone when I was eight years old, and that sparked
    my interest in hardware. The clone came without a case, leaving all of the electronics
    exposed. I could see the electronics, and I wanted to fiddle with them. My dad
    didn’t want me to touch the computer because I might break it, but when he wasn’t
    home, I’d still fiddle with the electronics. I broke it several times because
    the chips were in sockets. Even though my dad told me not to, I just wanted to
    see what happened when you put the chips in backward. I learned very early on
    that putting chips in backward is a bad thing!
  prefs: []
  type: TYPE_NORMAL
- en: The great thing is that the Apple II came with a cool set of schematics and
    source code. I was the weird kid in elementary school who carried around an Apple
    II reference manual. On the playground, I’d just pull up the schematic and stare
    at it because it was so fascinating. I didn’t understand what I was looking at,
    but I had some inkling about the connection between lines on the schematic and
    wires on the board. Over time, I learned to map the schematic’s symbols to the
    computer functions bit-by-bit, and it all started coming together.
  prefs: []
  type: TYPE_NORMAL
- en: By junior high or high school, I was able to build my own plug-in cards for
    the computer, and I built a little speech synthesizer. That’s what you do when
    you grow up among cornfields in Michigan and kids don’t want to play with you
    because you look strange and you are the only Chinese kid.
  prefs: []
  type: TYPE_NORMAL
- en: '***How did your early experiences affect your decision to go into the hardware
    industry?***'
  prefs: []
  type: TYPE_NORMAL
- en: I just kept learning more from there. When I went to MIT, I flipped a coin,
    and instead of going into biology, I went into electronics. I got a degree, eventually
    went into industry, hated that, and then went back for my PhD because I wanted
    to hide in my shell a little more. After getting my PhD, I participated in a bunch
    of startups that all failed. I never had a successful startup, but I learned a
    lot from failure.
  prefs: []
  type: TYPE_NORMAL
- en: 'I did some silicon chip design and reverse engineering before I did manufacturing.
    For many years, I wanted to do the biggest, baddest, hardest project I could do,
    which meant working for a pure tech startup. With something like that, you’re
    way in the future and basically by the time the technology works and goes onto
    the market, the patents have expired. There is no capital monetization, you work
    really hard, and the product is really obscure. As a result, I never had anything
    ship in volume. That was the most frustrating part: to put my life into something
    and never have it see the light of day.'
  prefs: []
  type: TYPE_NORMAL
- en: '***What lessons did you learn while working on chumby?***'
  prefs: []
  type: TYPE_NORMAL
- en: I got tired of working for a pure tech company and decided it was time to join
    a company that could monetize a business idea quickly. When I joined Chumby, I
    wanted to do open hardware and manufacturing, and I started logging experience
    in both. I worked on the first chumby and then multiple generations after that
    from 2005 to 2010.
  prefs: []
  type: TYPE_NORMAL
- en: When I started, I had never mass-produced a product or done mechanical design.
    I didn’t even know what injection molding was. But I had the privilege of sitting
    with other engineers at PCH, and I would just get on the factory floor, see what
    they were doing, and learn about it. By the time I was through with Chumby, I
    was able to use SolidWorks to design my own cases and make injection-molded cases
    from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: It was a very educational experience. I learned to do test plans, manufacturing,
    sourcing, and other skills you just have to pick up along the way. When Chumby
    went under, I was living in Singapore, where I had attempted to open a field office.
    I stayed behind to wind down the office, give it a clean shutdown, and make sure
    everyone got jobs elsewhere. After everything was taken care of, I decided to
    be unemployed for one year; the first thing I did was design a radiation sensor
    for Japan after the terrible earthquake and tsunami on March 11, 2011.
  prefs: []
  type: TYPE_NORMAL
- en: Then I started thinking about what my next project would be. I did a series
    of projects like reverse engineering SD cards, and I met Jie Qi, who I helped
    to produce circuit stickers under the Chibitronics brand.
  prefs: []
  type: TYPE_NORMAL
- en: One of the guys working with me in Singapore was Sean Cross, and we were sitting
    around asking what we should build. We decided to build something we could use
    because when I was at Chumby, I built things for other people rather than myself.
    I use a laptop every day, and we needed a development platform, so we built a
    laptop that we would actually use. We’re now doing a crowdfunding campaign around
    that product.
  prefs: []
  type: TYPE_NORMAL
- en: '***How would you describe your process of going from a prototype to manufacturing
    it?***'
  prefs: []
  type: TYPE_NORMAL
- en: There’s actually a lot of art in designing things to be easy to make. One great
    approach to this is to be fully responsible for your own supply chain. I don’t
    like to have a supply chain manager and a manufacturing manager. I want to make
    something myself. I insist on doing all of the testing myself. I insist on handling
    the manufacturing issues myself because, from a design standpoint, doing so forces
    you to think, “Can I build that? If I gloss over this bit of detail, I might pay
    dearly for that later.”
  prefs: []
  type: TYPE_NORMAL
- en: From the very beginning when you start designing, I think about how to make
    something manufacturable. What manufacturing process should I use? How do I make
    sure I can source all of these components? When I actually get to the manufacturing
    time, I’ve made all the decisions because I’m the one who has to pay the price
    at the end of the day.
  prefs: []
  type: TYPE_NORMAL
- en: '***What do people most overlook when they are designing?***'
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of aspects you could forget. The two that come to mind first
    are the ability to source the materials and the yield. For example, the instructions
    for a cool project in *Make:* magazine often tell you to go find an obscure or
    out-of-date object, like a motor from a 1980s VHS player. In theory, that would
    be great because many people have this cheap item in their garage. But all of
    a sudden, everyone is going to eBay trying to find the same part, and it’s not
    sourceable.
  prefs: []
  type: TYPE_NORMAL
- en: On the yield side, a lot of people won’t run the numbers in terms of what it
    means to be yielding. Every step of the manufacturing process has some fallout.
    If every step is about 99 percent yield and you take 10 steps like that, your
    yield will be about 90 percent. People essentially build the Leaning Tower of
    Pisa into their project, and at the end of the day the problems compound, preventing
    delivery. It’s crucial to build a system that is robust and reworkable so that
    every step can be coupled with another step to minimize yield fallouts. Otherwise,
    you’ll throw away a lot of money.
  prefs: []
  type: TYPE_NORMAL
- en: '***How would you describe how things have changed in the perception of hardware
    since you got involved in manufacturing?***'
  prefs: []
  type: TYPE_NORMAL
- en: It’s weird. Right around the time I was working on the Xbox in 2001, hardware
    was probably at the rock bottom. During the dot-com boom, working on Web 2.0 was
    really super-hot, and if you did something with Amazon or XML, it was cool. Soldering
    was a low-value thing that happened somewhere else.
  prefs: []
  type: TYPE_NORMAL
- en: But I was that weird guy who knew how to solder in a lab, so people would come
    to me with broken things and I’d fix them. I just stuck with it because that’s
    what I do, and I love doing it. One reason the Xbox’s security was relatively
    easy to break was because of the assumption that hardware was hard and soldering
    was difficult. But if you know how to solder, breaking the security is very easy.
    I did it on a grad school budget for about $150\. I gave some talks at conferences
    after the Xbox hacking, basically telling people that hardware is not hard, that
    there’s no magic behind it. I showed people that the “magic” was actually pretty
    simple manufacturing techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Then Kickstarter came. Money started going into a system where it hadn’t before
    because VCs wouldn’t touch hardware. They thought hardware was a retail chasm
    where all this money had to be paid up front, then basically the startups all
    die, and investors don’t get returns.
  prefs: []
  type: TYPE_NORMAL
- en: All of a sudden, these cool companies began raking in a million dollars in Kickstarter
    as their seed round and eventually delivering on their products enough of the
    time. There’s nothing like money to get the interest of the guys in Silicon Valley.
    Since then, hardware perception has changed radically. People are starting to
    get into hardware more and more. The problem is that a lot of people think they
    have to add hardware to products now, yet have no idea how.
  prefs: []
  type: TYPE_NORMAL
- en: Another problem is an increasing number of scams on Kickstarter, where there
    are all these hardware bits and pieces, and backers can’t tell what’s real or
    what’s fake. I know the industry definitely feels like a bubble already; I can
    sense the bubble growing now.
  prefs: []
  type: TYPE_NORMAL
- en: I think maybe I liked it better when nobody knew about hardware because at least
    I didn’t have to worry about competing with fraudsters.
  prefs: []
  type: TYPE_NORMAL
- en: '***How have you approached finding your own factories?***'
  prefs: []
  type: TYPE_NORMAL
- en: If you’re a startup and the only value you can bring to a factory is money,
    then you’re basically worthless. Startups don’t have any money, and if you have
    money, it’s finite. All factories know this.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of startups want to go to somewhere like Foxconn, but Foxconn has a ton
    of people and capability. They don’t need your help. But they do need your money,
    and you don’t have a lot of it. If you try to engage with the really hip factories,
    you’ll deplete your cash very quickly and won’t be able to launch.
  prefs: []
  type: TYPE_NORMAL
- en: I look for factories that are missing certain capabilities, so I can give them
    more value than money. When I come in with my product, I help train the staff
    to build my product. The factories see value in that training, and I get to that
    point where I’m building a relationship by trading more than money.
  prefs: []
  type: TYPE_NORMAL
- en: '***What’s the challenge for online hardware startups when they get to the retail
    phase?***'
  prefs: []
  type: TYPE_NORMAL
- en: In the world of the internet, where everything is automated, it seems like you
    could solve any problem with technology. But retail is all about the salesperson
    meeting buyers face-to-face, doing demonstrations, and going to the Walmart or
    Target headquarters to actually develop relationships and cut deals. It feels
    like an older system, and a lot of people don’t expect that because they’re doing
    business with Kickstarter.
  prefs: []
  type: TYPE_NORMAL
- en: The problem is that people want to physically see and touch and feel a product
    before they spend a couple hundred dollars on it. Best Buy is becoming a showroom
    for Amazon, but offering the product in-store is really valuable. There is probably
    room for some disruption (perhaps you can convince credible reviewers to try your
    hardware and describe it to other people), but at the end of the day, retail presence
    is needed to sell hardware effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Margins are much fatter online, so companies that start a business online from
    the beginning tend to underprice their products. Then, when they get to retail,
    they can’t survive.
  prefs: []
  type: TYPE_NORMAL
- en: '***What are some of the most common questions that hardware entrepreneurs ask
    you?***'
  prefs: []
  type: TYPE_NORMAL
- en: The questions teams tend to ask usually center on weaknesses in their team composition.
    Some teams have super-hotshot electrical engineers, but they have no mechanical
    engineering background. These teams have a bunch of “mech-y” questions. Some teams
    have no electrical engineers, and then the big question is how to create a hardware
    startup with no one who can design electronics.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware startup teams generally tend to be technical, so they’re often weak
    on marketing and business. Some do have business guys involved early on who can
    map it all out and get a strategy in place, but a lot of teams have great tech
    ideas without realizing they’re missing crucial aspects to their strategy.
  prefs: []
  type: TYPE_NORMAL
- en: At that point, I get them to tell me what they’re doing, and I give feedback.
    It’s almost not what teams ask, but rather what they forget to ask, that they
    need the most help with.
  prefs: []
  type: TYPE_NORMAL
- en: '***What do you think is missing from startups that will be necessary for the
    ongoing support of the hardware ecosystem?***'
  prefs: []
  type: TYPE_NORMAL
- en: There is a huge mismatch between the way manufacturing has been done and the
    way it needs to be done to match these more agile, lean, and honestly, less experienced
    companies. But I don’t think it’s an impassable chasm.
  prefs: []
  type: TYPE_NORMAL
- en: The original design manufacturers (ODMs) who have factories and resources need
    to raise their level of service. People expect ODMs to be able to answer a lot
    of questions. There are unreasonable expectations between startups and ODMs because
    ODMs can offer absolutely zero insight into costing down your product. People
    get upset because they just don’t see that conflict of interest.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of people think that building a product in China means the cost of parts
    gets magically cheaper. They don’t understand. A factory is not a designer; its
    job is to ensure that your design works and is built to specification. If you
    specify an expensive part, and the factory substitutes a cheaper version, who
    gets the blame when the product doesn’t work as well? Furthermore, the factory
    makes its money as a percentage margin over the bill of materials. Thus, recommending
    cheaper parts to use exposes them to greater risk, while making them less money.
    A lot of people get mad at factories for not being more aggressive on keeping
    the cost down, but if you think about it, you really have to get engaged. You
    need to get an engineer working with these guys to cost things down because ultimately,
    it’s your bottom line. It’s your net profit. You don’t just go to China and expect
    them to do it right.
  prefs: []
  type: TYPE_NORMAL
- en: An ODM can possibly solve that problem by hiring staff dedicated to reducing
    costs, but then the ODM would either need to charge the customer extra to make
    the service sustainable, or require a significantly larger order volume over which
    to amortize the extra cost of providing such services.
  prefs: []
  type: TYPE_NORMAL
- en: More interoperability in the industry would be good, too. One startup I work
    with is Spark,[*](footnote.xhtml#fn36) which really tries to enable people to
    use its hardware platform by being open. I feel like one piece missing for Spark
    is getting ODMs to be “Spark certified” to make products that use Spark’s platform.
    Often, someone wants to design one product into another product, and suggestions
    about how to do that effectively are all over the place. Even if you have all
    the necessary information, it’s not a streamlined process for most people.
  prefs: []
  type: TYPE_NORMAL
- en: When someone is given all the design answers, a lot of decoding still has to
    happen. Even bigger companies are afraid of that because they don’t have the competency
    to hire the people to get that decoding done.
  prefs: []
  type: TYPE_NORMAL
- en: '***What is your current focus in the hardware industry?***'
  prefs: []
  type: TYPE_NORMAL
- en: Right now, I’m working with Jie Qi on circuit stickers. We’re getting to the
    point of shipping the units out, and I’m hellbent on making sure that I meet the
    deadlines I set for my campaign. I actually want to ship on time and get things
    to people when I said I would because there has been way too much lateness in
    crowdfunded campaigns. It doesn’t have to be that way. You just have to set expectations,
    have your stuff together before you announce the date, and know when the inventory
    is pretty much ready to go. We have a number of product lines that are selling;
    about half are done with manufacturing and are just waiting in the factory to
    ship. A couple of new lines are behind, but we still have until May to solve these
    issues. I think it will be no problem, and I’m looking forward to seeing our lines
    grow and develop and work with more people.
  prefs: []
  type: TYPE_NORMAL
- en: The other thing I am working on is this Novena laptop project with Sean Cross,
    which we weren’t really planning on doing last year. I built this handmade prototype
    last December; it was a little, kind of crummy, leather-and-paper thing. We used
    it to give a presentation at CCC, and the response was overwhelming. That was
    great, and I refactored the design to make it more manufacturable and more sourceable.
    The campaign seems to be going well so far. I think it will fund, and I’m looking
    forward to getting Novena manufactured and out in the world.
  prefs: []
  type: TYPE_NORMAL
- en: '***What have you learned from your two crowdfunding campaigns?***'
  prefs: []
  type: TYPE_NORMAL
- en: Completing almost two crowdfunding campaigns has given me a lot of insight.
    Earlier, I mentioned that people selling online price their product too low to
    later move into retail. But it’s been really painful to maintain the high price
    that I say that everyone else should maintain. It’s so tempting to go lower to
    an unsustainable point.
  prefs: []
  type: TYPE_NORMAL
- en: The reason a lot of crowdfunding campaigns fail to deliver is because they price
    too low. They can’t actually build the product for the price they set. Even knowing
    this, I still had to grit my teeth on the laptop because I had to price it higher
    than I would have liked. Despite the high price, if we were to close the campaign
    at exactly the amount I hope to raise, I would probably just barely not lose money
    on it, but a lot of people don’t see that. Look at something like the Ubuntu Edge,
    which raised $12 million but needed $25 million to succeed. That’s because in
    order to set a price of $700–800 per phone, they had to build 40,000 phones. So
    even though people thought the Ubuntu Edge was cool and it raised a lot of money,
    it didn’t reach its funding goal, which is a sad conclusion for everyone.
  prefs: []
  type: TYPE_NORMAL
- en: I knew I could either price my laptop much lower and need thousands of people
    to buy it to reach my goal, or I could service a really focused market of a few
    hundred open source enthusiasts who are totally on the same page as me. At the
    end of the day, especially in the early phases, you really want those enthusiasts.
    They’re going to be your best users. You want to take care of them and give them
    the best service possible. You’re going to charge a little more, but you’re going
    to build a really good product for them and they’re going to be happy. That’s
    a much happier conclusion in my mind than trying to shoot the moon and failing.
  prefs: []
  type: TYPE_NORMAL
