- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">13</samp> <samp class="SANS_Dogma_OT_Bold_B_11">BUILDING
    THE GRAPHQL API</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">13</samp> <samp class="SANS_Dogma_OT_Bold_B_11">构建
    GraphQL API</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/Drop-image.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Drop-image.jpg)'
- en: In this chapter, you’ll add a GraphQL API to the middleware by defining its
    schema, as well as resolvers for each query and mutation. These resolvers will
    complement the Mongoose services created in [Chapter 12](chapter12.xhtml). The
    queries will be public; however, we’ll expose our mutations as protected APIs
    by adding an authorization layer via OAuth.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将通过定义其模式以及每个查询和突变的解析器，为中间件添加一个 GraphQL API。这些解析器将补充在 [第 12 章](chapter12.xhtml)
    中创建的 Mongoose 服务。查询将是公开的；然而，我们将通过添加授权层（通过 OAuth）将突变暴露为受保护的 API。
- en: Unlike in the GraphQL API of [Chapter 6](chapter6.xhtml), we’ll follow a pattern
    of modularization to implement these schemas and resolvers. Instead of writing
    everything in one big file, we’ll split the elements into separate files. Like
    using modules in modern JavaScript, this approach has the benefit of breaking
    down the code into smaller logical units, each with a clear focus. These units
    enhance the code’s readability and maintainability.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [第 6 章](chapter6.xhtml) 中的 GraphQL API 不同，我们将遵循模块化模式来实现这些模式和解析器。我们将不再将所有内容写在一个大文件中，而是将各个元素分拆到不同的文件中。就像在现代
    JavaScript 中使用模块一样，这种方法的好处是将代码拆解为更小的逻辑单元，每个单元都有明确的焦点。这些单元提高了代码的可读性和可维护性。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Setting Up</samp>
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">设置</samp>
- en: 'We’ll create the API’s single-entry point */api/graphql* with the Apollo server,
    which integrates into Next.js with the *@as-integrations/next* package. Start
    by installing the packages necessary for the GraphQL setup from the npm registry:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Apollo 服务器创建 API 的单一入口点 */api/graphql*，并通过 *@as-integrations/next* 包将其集成到
    Next.js 中。首先，从 npm 注册表安装 GraphQL 设置所需的包：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After the installation is complete, create the folder *graphql/locations* next
    to the *middleware* folder in the application’s root.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，在应用程序根目录下创建 *graphql/locations* 文件夹，紧挨着 *middleware* 文件夹。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Schemas</samp>
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">模式</samp>
- en: The first step to writing the schemas is to define the query and mutation typedefs,
    as well as any custom types we use for the schema. To do so, we’ll split the schema
    into three files, *custom.gql.ts*, *queries.gql.ts*, and *mutations.gql.ts*, in
    the *graphql/locations* folder. Then we’ll use an ordinary template literal to
    merge them into the final schema definition.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 编写模式的第一步是定义查询和突变的 typedef，以及我们为模式使用的任何自定义类型。为此，我们将在 *graphql/locations* 文件夹中将模式拆分为三个文件：*custom.gql.ts*、*queries.gql.ts*
    和 *mutations.gql.ts*。然后，我们将使用普通的模板字面量将它们合并到最终的模式定义中。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The Custom Types
    and Directives</samp>
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">自定义类型和指令</samp>
- en: Add the code from [Listing 13-1](chapter13.xhtml#Lis13-1) to the *custom.gql.ts*
    file to define the schema for the GraphQL queries.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 将 [清单 13-1](chapter13.xhtml#Lis13-1) 中的代码添加到 *custom.gql.ts* 文件，以定义 GraphQL
    查询的模式。
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 13-1: The graphql/locations/custom.gql.ts file'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 13-1：graphql/locations/custom.gql.ts 文件
- en: The GraphQL API will return location objects from the Mongoose schema. Therefore,
    we must define a custom type representing these location objects. Create a custom
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Location</samp> type. To instruct
    the server to cache the retrieved values, set an <samp class="SANS_TheSansMonoCd_W5Regular_11">@cacheControl</samp>
    directive for the whole custom type and a shorter one for the <samp class="SANS_TheSansMonoCd_W5Regular_11">on_wishlist</samp>
    property because we expect this particular property to change frequently.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL API 将从 Mongoose 模式返回位置对象。因此，我们必须定义一个自定义类型来表示这些位置对象。创建一个自定义的 <samp class="SANS_TheSansMonoCd_W5Regular_11">Location</samp>
    类型。为了指示服务器缓存检索到的值，为整个自定义类型设置 <samp class="SANS_TheSansMonoCd_W5Regular_11">@cacheControl</samp>
    指令，并为 <samp class="SANS_TheSansMonoCd_W5Regular_11">on_wishlist</samp> 属性设置一个更短的缓存指令，因为我们预期该属性会频繁变化。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The Query Schema</samp>
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">查询模式</samp>
- en: Now add the code from [Listing 13-2](chapter13.xhtml#Lis13-2) to the *queries.gql.ts*
    file to define the schema for the queries.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将 [清单 13-2](chapter13.xhtml#Lis13-2) 中的代码添加到 *queries.gql.ts* 文件，以定义查询的模式。
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 13-2: The graphql/locations/queries.gql.ts file'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 13-2：graphql/locations/queries.gql.ts 文件
- en: We define a template literal with three GraphQL queries, all of which are entry
    points to the services we implemented for the Mongoose locations model in [Chapter
    12](chapter12.xhtml). The names and parameters are similar to those in the services,
    and the queries follow the GraphQL syntax you learned about in [Chapter 6](chapter6.xhtml).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个包含三个 GraphQL 查询的模板字面量，所有查询都是我们在[第12章](chapter12.xhtml)中为 Mongoose 位置模型实现的服务的入口点。这些查询的名称和参数与服务中的类似，并且查询遵循你在[第6章](chapter6.xhtml)中学到的
    GraphQL 语法。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The Mutation Schema</samp>
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">变更操作架构</samp>
- en: To define the mutation schema, paste the code from [Listing 13-3](chapter13.xhtml#Lis13-3)
    into the *mutations.gql.ts* file.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义变更操作架构，请将[列表13-3](chapter13.xhtml#Lis13-3)中的代码粘贴到*mutations.gql.ts*文件中。
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 13-3: The graphql/locations/mutations.gql.ts file'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 列表13-3：graphql/locations/mutations.gql.ts 文件
- en: 'We create two mutations as template literals using GraphQL syntax: one for
    adding an item to the user’s wish list and one for removing it. Both will use
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">updateWishlist</samp> function
    we implemented on the location services, so they require the <samp class="SANS_TheSansMonoCd_W5Regular_11">location_id</samp>
    and the <samp class="SANS_TheSansMonoCd_W5Regular_11">user_id</samp> as parameters.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 GraphQL 语法创建了两个变更操作作为模板字面量：一个用于将项目添加到用户的愿望清单中，另一个用于将其移除。两者都会使用我们在位置服务中实现的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">updateWishlist</samp>函数，因此它们需要<samp class="SANS_TheSansMonoCd_W5Regular_11">location_id</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">user_id</samp>作为参数。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Merging the Typedefs into the Final
    Schema</samp>
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">将类型定义合并到最终的架构中</samp>
- en: We’ve split the location schema into two files, one for the queries and one
    for the mutations, and placed their custom types in a third file; however, to
    initiate the Apollo server, we’ll need a unified schema. Luckily, the typedefs
    are nothing more than template literals, and if we use template literal placeholders,
    the parser can interpolate these into a complete string. To accomplish this, create
    a new file, *schema.ts*, in the *graphql* folder and add the code from [Listing
    13-4](chapter13.xhtml#Lis13-4).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将位置架构拆分为两个文件，一个用于查询，一个用于变更操作，并将它们的自定义类型放置在第三个文件中；然而，为了启动 Apollo 服务器，我们需要一个统一的架构。幸运的是，类型定义不过是模板字面量而已，如果我们使用模板字面量占位符，解析器就能将其插入成一个完整的字符串。为此，创建一个新文件*schema.ts*，放入*graphql*文件夹，并添加[列表13-4](chapter13.xhtml#Lis13-4)中的代码。
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 13-4: The graphql/schema.ts file'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 列表13-4：graphql/schema.ts 文件
- en: We import the <samp class="SANS_TheSansMonoCd_W5Regular_11">gql</samp> tag from
    the *graphql-tag* package. Even though doing so is optional when working with
    the Apollo server, we keep the <samp class="SANS_TheSansMonoCd_W5Regular_11">gql</samp>
    tag in front of our tagged template to ensure compatibility with all other GraphQL
    implementations. This also produces proper syntax highlighting in the IDE, which
    statically analyzes type definitions as GraphQL tags.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从*graphql-tag*包中导入<samp class="SANS_TheSansMonoCd_W5Regular_11">gql</samp>标签。虽然在使用
    Apollo 服务器时这一步是可选的，但我们仍然在标记模板前保留<samp class="SANS_TheSansMonoCd_W5Regular_11">gql</samp>标签，以确保与所有其他
    GraphQL 实现的兼容性。这也能在 IDE 中产生正确的语法高亮，IDE会静态分析类型定义作为 GraphQL 标签。
- en: Next, we import the dependencies and schema fragments we’ll use to implement
    the unified schema. Finally, we create a tagged template literal with the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">gql</samp> function, using template literal
    placeholders to merge the schema fragments into the schema skeleton. We add the
    custom <samp class="SANS_TheSansMonoCd_W5Regular_11">Location</samp> type and
    then merge the queries’ typedefs into the <samp class="SANS_TheSansMonoCd_W5Regular_11">Query</samp>
    object and the <samp class="SANS_TheSansMonoCd_W5Regular_11">Mutations</samp>
    into the <samp class="SANS_TheSansMonoCd_W5Regular_11">mutation</samp> object
    and export the schema <samp class="SANS_TheSansMonoCd_W5Regular_11">const</samp>
    as typedefs.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们导入将用于实现统一架构的依赖项和模式片段。最后，我们使用<samp class="SANS_TheSansMonoCd_W5Regular_11">gql</samp>函数创建一个标记模板字面量，使用模板字面量占位符将模式片段合并到架构骨架中。我们添加自定义的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Location</samp>类型，然后将查询的类型定义合并到<samp class="SANS_TheSansMonoCd_W5Regular_11">Query</samp>对象中，将变更操作合并到<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Mutations</samp>对象中，并将架构<samp class="SANS_TheSansMonoCd_W5Regular_11">const</samp>作为类型定义导出。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The GraphQL Resolvers</samp>
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">GraphQL 解析器</samp>
- en: Now that we have the schema, we’ll turn to the resolvers. We’ll use a similar
    development pattern, writing the queries and mutations in separate files, then
    merging them into the single file we need for the Apollo server. Start by creating
    the *queries.ts* and *mutations.ts* files in the *graphql/locations* folder and
    then add the code from [Listing 13-5](chapter13.xhtml#Lis13-5) to *queries.ts*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了架构，我们将转向解析器。我们将采用类似的开发模式，分别编写查询和变更操作文件，然后将它们合并到 Apollo 服务器所需的单个文件中。首先，在
    *graphql/locations* 文件夹中创建 *queries.ts* 和 *mutations.ts* 文件，然后将[列表13-5](chapter13.xhtml#Lis13-5)中的代码添加到
    *queries.ts*。
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 13-5: The graphql/locations/queries.ts file'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 列表13-5：graphql/locations/queries.ts 文件
- en: We import our services from the Mongoose folder and then create and export the
    location query object. The structure of each query follows the structure discussed
    in [Chapter 6](chapter6.xhtml). We make one query for each service, and their
    parameters match those in the services.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从 Mongoose 文件夹导入服务，然后创建并导出位置查询对象。每个查询的结构遵循在[第六章](chapter6.xhtml)中讨论的结构。我们为每个服务创建一个查询，并且它们的参数与服务中的参数相匹配。
- en: For our mutations, add the code from [Listing 13-6](chapter13.xhtml#Lis13-6)
    to the *mutations.ts* file.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于变更操作，将[列表13-6](chapter13.xhtml#Lis13-6)中的代码添加到 *mutations.ts* 文件中。
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 13-6: The graphql/locations/mutations.ts file'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 列表13-6：graphql/locations/mutations.ts 文件
- en: Here we import only the <samp class="SANS_TheSansMonoCd_W5Regular_11">updateWishlist</samp>
    function from our services. This is because we defined it as the single entry
    point for updating our documents, and we opted to use the third parameter, with
    the value <samp class="SANS_TheSansMonoCd_W5Regular_11">add</samp> or <samp class="SANS_TheSansMonoCd_W5Regular_11">remove</samp>,
    to distinguish between the two actions the mutation should perform. We also create
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">UpdateWishlistInterface</samp>,
    which we don’t export. Instead, we’ll use it inside this file to avoid repeating
    code when we define the interface for the functions’ <samp class="SANS_TheSansMonoCd_W5Regular_11">param</samp>
    argument.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只从服务中导入 `<samp class="SANS_TheSansMonoCd_W5Regular_11">updateWishlist</samp>`
    函数。这是因为我们将其定义为更新文档的单一入口点，并且我们选择使用第三个参数，其值为 `<samp class="SANS_TheSansMonoCd_W5Regular_11">add</samp>`
    或 `<samp class="SANS_TheSansMonoCd_W5Regular_11">remove</samp>`，来区分变更操作应该执行的两个动作。我们还创建了
    `<samp class="SANS_TheSansMonoCd_W5Regular_11">UpdateWishlistInterface</samp>`，但我们并未导出它。相反，我们将在此文件中使用它，以避免在为函数的
    `<samp class="SANS_TheSansMonoCd_W5Regular_11">param</samp>` 参数定义接口时重复代码。
- en: As mutations, we create two functions at the <samp class="SANS_TheSansMonoCd_W5Regular_11">locationMutations</samp>
    object, one for adding an item from a user’s wish list and one for removing it.
    Both use the <samp class="SANS_TheSansMonoCd_W5Regular_11">updateWishlist</samp>
    service and supply the value parameter corresponding to the action the user would
    like to take. The two mutations, <samp class="SANS_TheSansMonoCd_W5Regular_11">removeWishlist</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">addWishlist</samp>, also take
    a third object called <samp class="SANS_TheSansMonoCd_W5Regular_11">context</samp>.
    For now, it’s an empty object, but in [Chapter 15](chapter15.xhtml), we’ll replace
    it with the session information necessary to verify the identity of the user performing
    the action.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 作为变更操作，我们在 `<samp class="SANS_TheSansMonoCd_W5Regular_11">locationMutations</samp>`
    对象中创建了两个函数，一个用于从用户的愿望清单中添加项目，另一个用于移除它。两个函数都使用 `<samp class="SANS_TheSansMonoCd_W5Regular_11">updateWishlist</samp>`
    服务，并提供对应用户操作的 `value` 参数。这两个变更操作，`<samp class="SANS_TheSansMonoCd_W5Regular_11">removeWishlist</samp>`
    和 `<samp class="SANS_TheSansMonoCd_W5Regular_11">addWishlist</samp>`，还接受一个名为 `<samp
    class="SANS_TheSansMonoCd_W5Regular_11">context</samp>` 的第三个对象。目前，它是一个空对象，但在[第十五章](chapter15.xhtml)中，我们将用验证执行操作的用户身份所需的会话信息替换它。
- en: Create the final resolvers file, *resolvers.ts*, in the *graphql* folder and
    add the code from [Listing 13-7](chapter13.xhtml#Lis13-7) to it. This code will
    merge the mutation and query definitions.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 创建最终的解析器文件 *resolvers.ts*，并将[列表13-7](chapter13.xhtml#Lis13-7)中的代码添加到该文件中。此代码将合并变更和查询定义。
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Listing 13-7: The graphql/resolvers.ts file'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 列表13-7：graphql/resolvers.ts 文件
- en: In addition to the schema, we must pass the Apollo server an object containing
    all resolvers, as discussed in [Chapter 6](chapter6.xhtml). To be able to do so,
    we must import the queries and mutations. Then we use the spread operator to merge
    the imported objects into the <samp class="SANS_TheSansMonoCd_W5Regular_11">resolvers</samp>
    object, which we export. Now, with the schema and <samp class="SANS_TheSansMonoCd_W5Regular_11">resolvers</samp>
    object available, we can create the API endpoint and instantiate the Apollo server.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 除了模式外，我们还必须将一个包含所有解析器的对象传递给Apollo服务器，正如我们在[第6章](chapter6.xhtml)中讨论的那样。为了做到这一点，我们必须导入查询和变更。然后，我们使用扩展运算符将导入的对象合并到<sup
    class="SANS_TheSansMonoCd_W5Regular_11">resolvers</sup>对象中，并导出它。现在，模式和<sup class="SANS_TheSansMonoCd_W5Regular_11">resolvers</sup>对象都可以使用，我们可以创建API端点并实例化Apollo服务器。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Adding the API Endpoint to Next.js</samp>
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">将API端点添加到Next.js</samp>
- en: When we discussed the differences between REST and GraphQL APIs, we pointed
    out that unlike REST, where every API has its own endpoint, GraphQL provides only
    one endpoint, typically exposed as */graphql*. To create this endpoint, we’ll
    use the Apollo server’s Next.js integration, as we did in [Chapter 6](chapter6.xhtml).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论REST和GraphQL API之间的差异时，我们指出，与每个REST API都有自己独立的端点不同，GraphQL只提供一个端点，通常暴露为*/graphql*。为了创建这个端点，我们将使用Apollo服务器的Next.js集成，就像我们在[第6章](chapter6.xhtml)中做的那样。
- en: Create the *graphql.ts* file in the *pages/api* folder and copy the code in
    [Listing 13-8](chapter13.xhtml#Lis13-8), which defines the API handler and its
    single entry point.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在*pages/api*文件夹中创建*graphql.ts*文件，并复制[清单13-8](chapter13.xhtml#Lis13-8)中的代码，该代码定义了API处理程序及其唯一的入口点。
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Listing 13-8: The pages/api/graphql.ts file'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 清单13-8：pages/api/graphql.ts文件
- en: 'We import all the elements we need to create the API handler: the Apollo server,
    a helper for the Apollo–Next.js integration, our resolvers, the GraphQL schema
    files, the function used to connect to the database, and the Next.js API helpers.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入了创建API处理程序所需的所有元素：Apollo服务器、Apollo-Next.js集成的辅助工具、我们的解析器、GraphQL模式文件、用于连接数据库的函数以及Next.js的API辅助工具。
- en: We create a new Apollo server with the resolvers and schema ❶. Then we use the
    Next.js integration helper ❷ to start the Apollo server and return a Next.js handler.
    The integration helper uses a serverless Apollo setup to smoothly integrate into
    the Next.js custom server instead of creating its own. In addition, we pass the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">context</samp> with an empty <samp
    class="SANS_TheSansMonoCd_W5Regular_11">token</samp> to the handler. This is how
    we’ll access the JWT we receive in the OAuth flow and pass it to the resolvers
    later.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用解析器和模式❶创建一个新的Apollo服务器。然后，我们使用Next.js集成辅助工具❷来启动Apollo服务器并返回一个Next.js处理程序。集成辅助工具使用无服务器Apollo设置，顺利地与Next.js自定义服务器集成，而不是创建它自己的服务器。此外，我们将带有空<sup
    class="SANS_TheSansMonoCd_W5Regular_11">token</sup>的<sup class="SANS_TheSansMonoCd_W5Regular_11">context</sup>传递给处理程序。这就是我们如何访问在OAuth流程中收到的JWT，并稍后将其传递给解析器的方法。
- en: Next, we create the wrapper functions discussed in [Chapter 6](chapter6.xhtml)
    to add the CORS headers ❸ and ensure that we have a database connection on each
    API call ❹. We can safely do so because we set up our database connection in a
    way that returns the existing cached connection. Finally, we export the returned
    asynchronous wrapped handler.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建在[第6章](chapter6.xhtml)中讨论的包装函数，以添加CORS头❸并确保在每个API调用中都有数据库连接❹。我们可以安全地这样做，因为我们已经以返回现有缓存连接的方式设置了数据库连接。最后，我们导出返回的异步包装处理程序。
- en: Visit the Apollo sandbox at *http:/localhost:3000/api/graphql* and run a few
    queries to test the GraphQL API before moving on to the next chapter. If you see
    the weather queries and mutations instead of the Food Finder’s, clear your browser’s
    cache and do a hard reload.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 访问Apollo沙箱，地址是*http:/localhost:3000/api/graphql*，并运行一些查询以测试GraphQL API，然后再进入下一章。如果你看到的是天气查询和变更而不是Food
    Finder的查询，请清除浏览器缓存并进行强制刷新。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">摘要</samp>
- en: We’ve successfully added the GraphQL API to the middleware. With the code in
    this chapter, we can now use the Apollo sandbox to read and update values in the
    database. We’ve also already prepared the Apollo handler for authentication by
    providing it with an empty token. Now we’re ready to use the JWT token we’ll receive
    from the OAuth flow in [Chapter 15](chapter15.xhtml) to protect the API’s mutations.
    But before we add this authentication, let’s build the frontend.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功将 GraphQL API 添加到中间件中。通过本章中的代码，我们现在可以使用 Apollo 沙盒来读取和更新数据库中的值。我们还为认证准备了
    Apollo 处理程序，并为其提供了一个空的令牌。现在，我们准备使用在 [第15章](chapter15.xhtml) 中从 OAuth 流程中获得的 JWT
    令牌来保护 API 的变更操作。在我们添加认证之前，让我们先构建前端。
