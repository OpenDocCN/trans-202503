- en: '23'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Communications
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Mike Fleming and Telephony
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It has been said that mobile phones are not just for browsing content, playing
    games, and checking email and messages; some people have been known to also use
    them for phone calls.^([1](#c23-footnote-1)) Or at least that was the theory behind
    the communications software that Android built for 1.0.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two important aspects of communication on a device: phone calls and
    messaging. Android had different teams for these features. And by “teams,” I mean
    there was a different person working on each.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: To make the actual telephone part of Android’s phone platform work, the team
    brought in Mike Fleming. Mike knew that space already since he wrote the telephony
    software back at Danger.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Mike Fleming came to Silicon Valley in early 2000 to work for a company called
    Eazel, where he met Eric Fischer (who would later work on text functionality for
    Android). Within a year, Eazel ran out of funding and laid off nearly everyone.
    Andy Hertzfeld,^([2](#c23-footnote-2)) one of Eazel’s founders and an engineer
    on the original Macintosh team, helped many of the employees find positions at
    either Apple or Danger.^([3](#c23-footnote-3)) Mike and Eric went to Danger.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Danger had recently shifted its product focus to target mobile phones. Mike
    was brought in to make the phone application work, which the engineering manager
    thought would take a couple of weeks. Mike said, “We discovered that it was really
    the entry point to a large set of industry standards and certification. So it
    was quite a bit more complex than expected.”
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Mike stuck around Danger for about four years, before interviewing at Android,
    where he knew former Danger people. He started in November of 2005 and was given
    the task of making Android telephony work. At least he had a better idea of how
    complicated that job would be the second time around.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Mike had mixed feelings in taking the job. “I joined Android because I really
    wanted it to exist. But honestly, I didn’t really want to work on it. I had done
    telephony and I was kind of burnt out on it. But somebody had to bring that domain
    expertise. I joined Google to work on Android, but I had no intention of staying
    past Android 1.0\. So my headspace going into the project was a little bit odd.”
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502680c23/f23001.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
- en: Dan Bornstein, on a work-from-home day, sent an email to the Android engineering
    team with the subject, “Logcat preventing me from using my keyboard.” (Picture
    courtesy Dan Bornstein.)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: With the state of Android at that time, there was no shortage of other work
    to do in addition to telephony, so Mike took on other tasks as well. For example,
    he worked with Swetland to make debug logging more efficient and accessible to
    developers. On Android, this system is known as *logcat*, which stands for `cat`-ing^([4](#c23-footnote-4))
    a logfile.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Mike also helped out with the Java runtime. Dan Bornstein was working on making
    the new Dalvik runtime work, but the team needed a placeholder to use in the meantime.
    Mike pulled in JamVM, an open source runtime for Java. This gave the team something
    to write Java code against and gave him enough functionality to start working
    on the code for the telephony software, which he finished up once Dalvik was working.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: One of the tricky parts in the telephony work was that the G1 phone was launching
    with 3G connectivity, which was new for T-Mobile. Since T-Mobile was getting it
    to work on their network at the same time, the Android team needed a way to test
    it, so T-Mobile parked a dedicated 3G COW^([5](#c23-footnote-5)) on the Google
    campus to allow G1 users to test the new network.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502680c23/f23002.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
- en: 'COW #1: This was one of the mobile cell towers T-Mobile set up near the Android
    building. (Picture courtesy Eric Fischer.)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Although Mike made telephony work on Android, he did not work on the telephone
    application (also known as Dialer), although he had wanted to do just that. There
    were deep, architectural disagreements between the different factions of people
    who had worked at Danger, Be/PalmSource, and WebTV/Microsoft. Eventually, Steve
    Horowitz, who was running engineering, stepped in and worked out a deal that got
    the teams past this period of conflict and indecision. Mike remembered, “At some
    point there was a decision made that the Danger people would work on the lower
    parts of the system and the Palm and Microsoft people would work on the upper
    layers. I think that Steve Horowitz brokered that compromise with Brian [Swetland].
    I remember being unhappy with it at the time. I wasn’t bought into that. But that
    was the deal that was made.”
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502680c23/f23003.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
- en: 'COW #2: Another cell tower set up on campus for testing (picture courtesy Eric
    Fischer)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: This segmenting of the Danger and Be/PalmSource/Microsoft teams brought up other
    tensions and philosophical differences. For example, Dianne proposed a model of
    *Intents*, Android’s mechanism for allowing applications to launch other apps
    to handle specific actions, like “take a picture” bringing up a camera app, or
    “send an email” launching an email app. An application could register the Intents
    it could handle in its *manifest* (a file that is bundled along with an application
    that contains summary information about the app). Having the information available
    in the manifest file instead of just in the code of the application itself meant
    that the system could identify which apps handled which Intents quickly, without
    having to launch the apps to find out.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'But others on the team weren’t convinced. Wei Huang said, “At the time, we’re
    like, ‘Why are we making this so complicated?’ I remember Chris DeSalvo and Mike
    Fleming were advocating making it simple: just do it when an app is running. There
    were a few things where I think Dianne had a much more of an in-depth idea how
    things would scale on the platform. But at the same time, I think that the activity
    lifecycle^([6](#c23-footnote-6)) was kind of complicated. And Swetland was very
    frustrated with how complicated things were.”'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Mike Fleming added, “I think that there was never really a forum for discussing
    an alternative to Activities and Intents. I think that that was probably the thing
    that I was the most upset with. As someone who’s working on the lower layer, because
    I happened to have the domain expertise, but also had participated on doing the
    upper layer at previous companies, I was really upset that I wasn’t able to be
    a part of the whole vision.”
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Wei Huang observed, “These people had a lot of experience in building mobile
    OSes. It was not without challenges; we had to figure out how to work with each
    other, because we had different opinions. And strong opinions. Overall, I think
    we managed to work through these differences. Not all of them, because Mike Fleming
    left.”
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: In the Spring of 2008, six months before 1.0, Mike left Android. He said, “The
    product was struggling to come together. I felt that it was entirely possible
    that it would not make it out the door. It didn’t work very well on devices. It
    was slow and crashed a lot. It worked well enough to use, but I found it to be
    a very frustrating and disappointing product.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: “The telephony stuff was in good hands. The Dalvik stuff was in good hands.
    And I felt that I didn’t have anything else that I could do to help it ship. I
    didn’t expect to stay beyond completion. I didn’t see what I could do to really
    help complete it. So I left for a startup.”
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Despite Mike’s feelings about Android at the time, he had gotten telephony working
    before he left, and the product continued on its long journey toward 1.0.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Wei Huang and Messaging
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Users of recent Android releases may wonder at the many messaging applications
    Google has provided recently, but Android has always had many of these apps. To
    some extent, this dynamic is a product of there being so many different kinds
    of messaging: SMS (text messaging through the carrier), MMS (texting pictures
    or groups of friends), Instant Messaging (of various flavors), video chat, and
    so on. Even in the early days, there were multiple ways of messaging people, most
    using different underlying protocols and requiring different apps, but there was
    only one engineer working on all of them: Wei Huang.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: In the Spring of 2006, Wei was on the Android Browser team, but after many years
    of working on browsers (at Microsoft, then AvantGo, then Danger, then Android),
    he was ready for something new. Steve Horowitz suggested that he take on messaging,
    since Android needed it and nobody else was on it. So Wei worked on the Google
    Talk application as well as SMS.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Owning both of these apps seems like a lot of work for a single engineer (and,
    indeed, multiple teams of multiple people are working on equivalent apps now).
    In fact, the underlying mechanisms for these apps to work was quite different,
    especially with the carrier requirements necessary for SMS messaging. But back
    in the early days of Android, this was a typical workload. Wei said, “At the time,
    we didn’t have the luxury of even one engineer per feature. Other people were
    owning one or two apps.”
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Wei dove into Google Talk first and was able to get a demo working quickly.
    One of the things that helped get it going was that Google Talk (which already
    existed as a desktop app, with a complete backend on Google servers) used a very
    full-featured protocol for sending messages (XMPP^([7](#c23-footnote-7))), so
    it was relatively straightforward for Wei to write an app to set up a connection
    to the server and send messages back and forth.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: One of the hard parts with turning his app from a demo into a product was maintaining
    that connection between the server and the client. The connection would frequently
    drop, but the client wouldn’t find out and would continue sending messages without
    realizing that the messages weren’t going through. Much of the time that Wei spent
    on the project went into making the connection more reliable, with logic to handle
    the inevitable drops and retries.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Once the rudiments of the system were working, Michael Morrissey, who was leading
    the services team, suggested using this connection for all the Google apps (including
    Gmail, Contacts, and Calendar). Instead of each of those apps having to maintain
    its own connection to the backend, they could all share this single, persistent
    connection. Software on the device would combine app data to send to the server
    through this single pipe and would receive responses from the server and deliver
    them to the appropriate applications. This was a similar architecture to the one
    at Danger that Michael had helped set up.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: This connection was available not only to the existing apps; it was potentially
    available for pushing messages from other apps as well. Charles Mendis, for his
    Bounce application, wanted to be able to notify the Maps app when friends’ locations
    changed. With push messaging enabled over this persistent connection, the Maps
    server could find out when a location changed and send that to the device, which
    would send it to the Maps app to update locations on the screen.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Wei worked with Debajit on the implementation, piggy-backing all this infrastructure
    onto the existing Google Talk connection. They wanted to release it in 1.0 as
    a connection not only for Google apps, but also for any apps that wanted to use
    push messaging. But then they talked to the security team, who told them, “There’s
    no way you’re going to launch this thing.” It wasn’t secure enough.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: So even though the functionality and API for pushing messages was available
    to developers in pre-1.0 releases, it was removed in the .9 release. There’s an
    item about it in the Android 0.9 SDK Beta release notes:^([8](#c23-footnote-8))
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '*Due to the security risks inherent in accepting arbitrary data from “outside”
    the device, the data messaging facility of the GTalkService will not be present
    in Android 1.0\. The GTalkService will provide connectivity to Google’s servers
    for Google Talk instant messaging, but the API has been removed from this release
    while we improve the service. Note that this will be a Google-specific service
    and is not part of the core of Android.*'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This functionality made it into Android later (after the team fixed the security
    issues), eventually showing up in the Google Play Services library as something
    called Google Cloud Messaging.^([9](#c23-footnote-9))
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: SMS
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Meanwhile, Wei was also working on getting SMS working. Most of the effort for
    the project was in implementing and perfecting all the complex features and requirements
    needed for carrier certification. He said, “It was a pain because of carriers.”
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: For a long time, Wei was working alone. But as 1.0 got closer, Android worked
    with engineers from Esmertec in China, especially to help with the integration
    of SMS and MMS and making them work correctly for carrier compliance.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Ficus, who had been working on camera and then audio drivers, also joined the
    effort to help make it work more reliably. He had a personal passion to have better
    messaging on Android. “I was trying to be a good Android dogfooder^([10](#c23-footnote-10))
    and was texting . . . and it just didn’t work. I felt like being younger had some
    perspective for me that was lacking elsewhere; it was a big part of social life
    in the mid 2000s. I just started fixing bugs, committing code. I didn’t get any
    blessing to stop working on my other stuff or start on SMS, I just did it. I just
    felt that someone should fix it.”
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Another person helping out was Peisun Wu,^([11](#c23-footnote-11)) who was managing
    the project (in addition to other projects on Android). With everything from external
    contractors to carrier testing, there were many details to be managed.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'Carrier testing complicated communications projects like these. Ficus explained:
    “There was a lot of carrier compliance certification stuff, which made me crazy.
    The MMS standard in particular is really complex. There are all these things you
    can do with it, making slideshows and images doing animations and playing sounds.
    And even though everyone knew that the only thing anyone ever actually wanted
    to do was send one and only one picture, you had to implement the whole thing
    because you had to go through carrier certification.”'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 运营商测试使得像这样的通信项目变得复杂。榕解释道：“有很多运营商合规认证的事情，这让我疯狂。尤其是MMS标准非常复杂。你可以用它做很多事情，比如制作幻灯片、图像动画和播放声音。尽管大家都知道，实际上任何人最想做的事情就是只发送一张图片，但你必须实现所有功能，因为必须通过运营商认证。”
- en: In June of 2008, Ficus, Wei, and Peisun flew over to China to work with the
    contractors. Sichuan had just had a major earthquake, so they met in Beijing and
    worked out of the Google office for two weeks.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 2008年6月，榕、魏和佩孙飞往中国与承包商合作。四川刚刚经历了一场大地震，他们在北京见面，并在谷歌办公室工作了两周。
- en: '![](image_fi/502680c23/f23004.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502680c23/f23004.png)'
- en: Wei and Ficus, during the Beijing trip in June of 2008 (picture courtesy Peisun
    Wu)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 2008年6月，魏和榕在北京旅行期间（图片由佩孙·吴提供）
- en: 'Ficus remembered a later trip to work with the same team: “Summer of 2008,
    trying to ship. None of the prototype devices could leave the supervision of a
    Google employee. All of the contractors were in Chengdu, China. We’d previously
    met in Beijing, but this was during the Olympics and we couldn’t get a place to
    meet. We had to find a place that had a GSM network, and a Google office so that
    we could have these test devices, and that the engineers could get a visa to.
    So we met in Zurich for two weeks.”'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 榕记得后来一次与同一团队合作的旅行：“2008年夏天，尝试发布。所有的原型设备都不能离开谷歌员工的监督。所有承包商都在中国成都。我们之前在北京见过面，但那时候正值奥运会，我们无法找到合适的地方开会。我们得找到一个有GSM网络和谷歌办公室的地方，这样我们才能带着这些测试设备，并且工程师们能获得签证。因此，我们在苏黎世待了两周。”
- en: Both Google Talk and SMS (with MMS) made it in time for the 1.0 launch.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌Talk和短信（带MMS）都及时赶上了1.0版本的发布。
