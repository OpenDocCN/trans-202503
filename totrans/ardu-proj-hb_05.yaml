- en: '**PART 4**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**LCDS**'
  prefs: []
  type: TYPE_NORMAL
- en: 'PROJECT 12: LCD SCREEN WRITER'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**NOT ONLY IS THERE SOMETHING VERY SATISFYING ABOUT HAVING AN LCD SCREEN DISPLAY
    YOUR OWN MESSAGES, BUT IT’S ALSO VERY USEFUL.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0102-01.jpg)![image](../images/f0103-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Arduino board
  prefs: []
  type: TYPE_NORMAL
- en: • Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: • 16×2 LCD screen (Hitachi HD44780 compatible)
  prefs: []
  type: TYPE_NORMAL
- en: • 50k-ohm potentiometer
  prefs: []
  type: TYPE_NORMAL
- en: '**LIBRARIES REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • LiquidCrystal
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An LCD (liquid crystal display) screen is made of two sheets of polarizing material
    with a liquid crystal solution between them. Current passing through the solution
    creates an image or, in this case, characters. For this project, you’ll need an
    LCD screen that’s compatible with the Hitachi HD44780 driver for it to work with
    the Arduino—there are lots of them out there and you can usually identify them
    by their 16-pin interface.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use the LiquidCrystal library to send characters to the LCD screen. The
    LiquidCrystal library maps the characters and uses the `print.lcd` commands to
    copy the message from the sketch to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Before you start, you need to prepare your LCD screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**PREPARING THE LCD SCREEN**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The LCD screen will probably require a bit of assembly. Your screen should come
    with 16 holes (as shown in [Figure 12-1](ch12.xhtml#ch12fig1)) and a separate
    strip of header pins.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 12-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: The LCD screen has 16 pins running along the top.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f12-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Take the strip of pins and break off a row of 16 pins. Insert the shorter side
    of the pins into the 16 LCD holes. You’ll need to solder these in place: solder
    the far-right and far-left pins first to hold the strip in place and wait a moment
    for them to set. Then solder each pin in turn, holding the solder and soldering
    iron to each pin. Holding the iron to the pins for too long will damage them;
    you only need to solder them for a couple of seconds. (If you’ve never soldered
    before, see the “[Quick Soldering Guide](ch00.xhtml#ch00lev1sec07)” on [page 18](ch00.xhtml#page_18).)'
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Place your LCD screen in the breadboard, inserting the header pins into the
    breadboard holes. Also place the potentiometer in the breadboard, and use the
    breadboard and jumper wires to connect your LCD screen, Arduino, and potentiometer
    as shown in the following table and in [Figure 12-2](ch12.xhtml#ch12fig2). There
    are three GND connections from the LCD module, so use the breadboard GND rail
    to make those connections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 12-2:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connections between the LCD screen and the Arduino. LCD screen pins 15 and 16
    are the power and ground for the backlight of the screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f12-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '| **LCD SCREEN** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 1 VSS | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 2 VDD | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 3 VO contrast | Potentiometer center pin |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 4 RS | Pin 7 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 5 R/W | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 6 Enable | Pin 8 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 7 D0 | Not used |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 8 D1 | Not used |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 9 D2 | Not used |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 10 D3 | Not used |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 11 D4 | Pin 9 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 12 D5 | Pin 10 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 13 D6 | Pin 11 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 14 D7 | Pin 12 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 15 A BcL+ | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 16 K BcL– | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: The center pin of the 50k-ohm potentiometer is connected to LCD pin 3 (VO).
    The potentiometer controls the screen contrast. Turn it until you can clearly
    see the characters on the screen. Now connect one of the outer pins to GND and
    the other to +5V.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Backlit LCD screens (see [Figure 12-3](ch12.xhtml#ch12fig3)) will have resistors
    built in, but if you have a non-backlit LCD screen, you should insert a 220-ohm
    resistor between LCD 15 and +5V. (The screen’s packaging will say whether it is
    backlit or not.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 12-3:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A backlit LCD screen
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f12-03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Your setup should look like [Figure 12-4](ch12.xhtml#ch12fig4). Check your work
    against the circuit diagram in [Figure 12-5](ch12.xhtml#ch12fig5), and then upload
    the code in “[The Sketch](ch12.xhtml#ch12lev1sec04)” on [page 107](ch12.xhtml#page_107).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 12-4:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The complete setup
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f12-04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 12-5:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The circuit diagram for the LCD screen writer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f12-05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This sketch is included in your IDE examples. Load it from the IDE by going
    to **File ![image](../images/arrow.jpg) Examples ![image](../images/arrow.jpg)
    LiquidCrystal** and then clicking **Scroll**. The sketch uses the LiquidCrystal
    library that’s built into the Arduino IDE to send messages from the Arduino to
    the LCD screen. You can change the message by replacing `"Arduino Sketch"` at
    ➋.
  prefs: []
  type: TYPE_NORMAL
- en: To use this circuit setup with the example sketches in the Arduino IDE, we also
    change the LCD pins in the sketch (12, 11, 5, 4, 3, 2) at ➊ to 7, 8, 9, 10, 11,
    12, as these are the pins we’ve assigned. I’ve re-created the sketch here as you’ll
    see it in the IDE, but with those changes made.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'PROJECT 13: WEATHER STATION'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**IN THIS PROJECT YOU’LL SET UP A WEATHER STATION TO MEASURE TEMPERATURE AND
    HUMIDITY, AND DISPLAY THE VALUES ON AN LCD SCREEN.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0110-01.jpg)![image](../images/f0111-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Arduino board
  prefs: []
  type: TYPE_NORMAL
- en: • Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: • 50k-ohm potentiometer
  prefs: []
  type: TYPE_NORMAL
- en: • 16x2 LCD screen (Hitachi HD44780 compatible)
  prefs: []
  type: TYPE_NORMAL
- en: • DHT11 humidity sensor
  prefs: []
  type: TYPE_NORMAL
- en: '**LIBRARIES REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • LiquidCrystal
  prefs: []
  type: TYPE_NORMAL
- en: • DHT
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The humidity sensor used in this project is the relatively cheap DHT11, shown
    in [Figure 13-1](ch13.xhtml#ch13fig1), which measures both humidity and temperature.
    It uses a capacitive humidity sensor and resistive-type temperature sensor to
    take a reading from its environment. It sends this reading to the Arduino as voltage,
    and the Arduino converts this to readable values displayed on the screen. For
    best results, you should mount your sensor on an outside wall with a decent amount
    of open space. You’ll want to mount your LCD screen indoors or seal it carefully
    in a clear, waterproof bag or casing to keep it protected from the elements.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 13-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: The DHT11 measures both temperature and humidity.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f13-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The DHT11 comes with either four pins or three pins. The sensor shown in [Figure
    13-1](ch13.xhtml#ch13fig1) has four pins, but you can use either version for this
    project, because you won’t be using pin 3\. Check the retailers at the beginning
    of the book for ideas on where to buy a DHT11.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, prepare the LCD screen as per the soldering instructions in “[Preparing
    the LCD Screen](ch12.xhtml#ch12lev1sec02)” on [page 104](ch12.xhtml#page_104).
    Insert the DHT11 sensor into your breadboard. The DHT11 pins are numbered 1 to
    4 (or 3) from the left, when the front is facing you. Connect pin 1 to the +5V
    rail, connect pin 2 directly to Arduino pin 8, and connect pin 4 (or 3) to GND.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **DHT11** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 1 | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 2 | Pin 8 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 3 | Not used |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 4 | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Insert the LCD screen into the breadboard and connect the pins to the Arduino
    as shown in the following table and in [Figure 13-2](ch13.xhtml#ch13fig2). The
    GND and +5V rails will have multiple connections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **LCD SCREEN** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 1 VSS | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 2 VDD | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 3 VO contrast | Potentiometer center pin |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 4 RS | Pin 12 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 5 R/W | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 6 Enable | Pin 11 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 7 D0 | Not used |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 8 D1 | Not used |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 9 D2 | Not used |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 10 D3 | Not used |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 11 D4 | Pin 5 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 12 D5 | Pin 4 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 13 D6 | Pin 3 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 14 D7 | Pin 2 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 15 A BcL + | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 16 K BcL – | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**FIGURE 13-2:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Inserting the LCD screen into the breadboard
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f13-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Insert a potentiometer into the breadboard as shown in [Figure 13-3](ch13.xhtml#ch13fig3)
    and connect the center pin to LCD pin 3\. Connect one outer pin to the +5V rail
    and the other to the GND rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 13-3:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Inserting the potentiometer into the breadboard
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f13-03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Remember to connect the power rails of the breadboard to Arduino GND and +5V.
    Confirm that your setup matches the circuit diagram in [Figure 13-4](ch13.xhtml#ch13fig4),
    and upload the code in “[The Sketch](ch13.xhtml#ch13lev1sec03)” on [page 116](ch13.xhtml#page_116).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 13-4:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The circuit diagram for the weather station
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f13-04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This sketch uses the LiquidCrystal library, which comes with the Arduino IDE,
    and the DHT library, which you will need to download and install from *[http://nostarch.com/arduinohandbook/](http://nostarch.com/arduinohandbook/)*
    (see “[Libraries](ch00.xhtml#ch00lev2sec07)” on [page 7](ch00.xhtml#page_7)).
    The DHT library controls the function of the sensor, and the LCD library displays
    the readings on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'PROJECT 14: FORTUNE TELLER'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**IN THIS PROJECT, WE’LL CREATE AN ELECTRONIC VERSION OF A CLASSIC FORTUNE-TELLING
    DEVICE: THE MAGIC 8 BALL.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0117-01.jpg)![image](../images/f0118-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Arduino board
  prefs: []
  type: TYPE_NORMAL
- en: • Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: • 16x2 LCD screen (Hitachi HD44780 compatible)
  prefs: []
  type: TYPE_NORMAL
- en: • Tilt ball switch
  prefs: []
  type: TYPE_NORMAL
- en: • 50k-ohm potentiometer
  prefs: []
  type: TYPE_NORMAL
- en: • 1k-ohm resistor
  prefs: []
  type: TYPE_NORMAL
- en: '**LIBRARIES REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • LiquidCrystal
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Magic 8 Ball, a novelty toy created in the 1950s, is made of a hollow sphere
    in which a 20-sided die floated in alcohol. When you ask the ball a question and
    shake it, one side of the die floats up and displays your answer in the ball’s
    window.
  prefs: []
  type: TYPE_NORMAL
- en: For this project, you’ll use a tilt ball switch, shown in [Figure 14-1](ch14.xhtml#ch14fig1).
    The tilt ball switch is composed of a metal ball inside a metal casing that makes
    a connection when the switch is in an upright position. If you tilt the switch,
    the ball shifts and the connection is broken. There are lots of tilt switches
    available, and all do the same job. In this project, you’ll ask a question and
    shake the switch. When the switch settles upright again, it connects to the Arduino,
    which then randomly selects a response from eight preset answers and displays
    it on the LCD screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 14-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: Tilt ball switch inserted in the breadboard
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f14-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The potentiometer controls the contrast of the LCD screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Prepare the LCD screen as per the soldering instructions in “[Preparing the
    LCD Screen](ch12.xhtml#ch12lev1sec02)” on [page 104](ch12.xhtml#page_104).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place your LCD screen in the breadboard, inserting the header pins into the
    breadboard holes. Also place the potentiometer in the breadboard, and use the
    breadboard and jumper wires to connect your LCD screen, Arduino, and potentiometer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **LCD SCREEN** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 1 VSS | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 2 VDD | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 3 VO contrast | Potentiometer center pin |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 4 RS | Pin 12 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 5 R/W | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 6 Enable | Pin 11 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 7 D0 | Not used |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 8 D1 | Not used |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 9 D2 | Not used |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 10 D3 | Not used |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 11 D4 | Pin 5 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 12 D5 | Pin 4 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 13 D6 | Pin 3 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 14 D7 | Pin 2 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 15 A BcL + | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 16 K BcL – | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Remember to use a breadboard rail to make the multiple connections to the Arduino
    GND pin, as shown in [Figure 14-2](ch14.xhtml#ch14fig2).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 14-2:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The LCD screen is connected to the Arduino.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f14-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: You should have already connected the center pin of the 10k-ohm potentiometer
    to LCD pin 3 (VO). Now connect one of the outer pins to GND and the other to +5V.
    This controls the contrast of your LCD screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the tilt switch into your breadboard and attach one side to Arduino pin
    6 via a 1k-ohm resistor and the other side to GND.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **TILT BALL SWITCH** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Leg 1 | Pin 6 via 1k-ohm resistor |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Leg 2 | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Connect your breadboard rails to the Arduino +5V and GND for power.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm that your setup matches [Figure 14-3](ch14.xhtml#ch14fig3), and upload
    the code in “[The Sketch](ch14.xhtml#ch14lev1sec03)” on [page 122](ch14.xhtml#page_122).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 14-3:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The circuit diagram for the fortune teller
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f14-03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code for this project is fairly simple. When you switch on the Arduino,
    the LCD screen displays the message `Ask a Question`. Shaking the tilt switch
    activates the sketch, and the Arduino chooses a random answer from the eight available
    answers (cases 0–7).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the line in the code that does this:'
  prefs: []
  type: TYPE_NORMAL
- en: reply = random(8);
  prefs: []
  type: TYPE_NORMAL
- en: 'To add in your own responses, change the value `8` to the number of possible
    responses, and then add your responses (or cases) in the same style as the others:'
  prefs: []
  type: TYPE_NORMAL
- en: 'case 8:'
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print("You betcha");
  prefs: []
  type: TYPE_NORMAL
- en: break;
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the full sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'PROJECT 15: REACTION TIMER GAME'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**IN THIS PROJECT, LET’S COMBINE OUR LCD SCREEN WITH AN RGB LED AND A PIEZO
    BUZZER TO MAKE A REACTION TIMER GAME.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0124-01.jpg)![image](../images/f0125-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Arduino board
  prefs: []
  type: TYPE_NORMAL
- en: • Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: • 16x2 LCD screen (Hitachi HD44780 compatible)
  prefs: []
  type: TYPE_NORMAL
- en: • RGB LED module
  prefs: []
  type: TYPE_NORMAL
- en: • Piezo buzzer
  prefs: []
  type: TYPE_NORMAL
- en: • Momentary tactile four-pin pushbutton
  prefs: []
  type: TYPE_NORMAL
- en: • 50k-ohm potentiometer
  prefs: []
  type: TYPE_NORMAL
- en: • 220-ohm resistor
  prefs: []
  type: TYPE_NORMAL
- en: '**LIBRARIES REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • LiquidCrystal
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You start the game by holding down the pushbutton. The RGB LED lights up and
    fades through some random colors. Your aim is to react as quickly as possible
    when it turns red and release the pushbutton. The LCD screen shows your reaction
    time in milliseconds, from when the LED turned red to when you released the button
    (see [Figure 15-1](ch15.xhtml#ch15fig1)).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 15-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: After you release the pushbutton, your reaction time will be shown on the LED
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f15-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The piezo buzzer tries to distract you by making random sounds. If you release
    the button too soon, the LCD screen displays a message saying so, and you’ll have
    to start over.
  prefs: []
  type: TYPE_NORMAL
- en: 'As its name implies, an RGB LED is actually three LEDs in one: red, green,
    and blue (see [Figure 15-2](ch15.xhtml#ch15fig2)).'
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 15-2:**'
  prefs: []
  type: TYPE_NORMAL
- en: An RGB LED can be red, green, or blue.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f15-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: RGB is an *additive* color model, which means that by combining the light of
    two or more colors we can create other colors. Red, green, and blue are the additive
    primary colors usually used as the base for other colors, as shown in [Figure
    15-3](ch15.xhtml#ch15fig3).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 15-3:**'
  prefs: []
  type: TYPE_NORMAL
- en: The RGB color model is additive.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f15-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s take a look at an RGB LED in a bit more detail. [Figure 15-4](ch15.xhtml#ch15fig4)
    shows a clear common-cathode LED. Note that the LED has four legs instead of the
    usual two: one each for red, green, and blue, and the final one is either the
    cathode or anode. In this case the longest pin is the cathode, and it connects
    to ground (GND).'
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 15-4:**'
  prefs: []
  type: TYPE_NORMAL
- en: An RGB LED has four legs instead of the usual two.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f15-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The RGB LED used in this project is on a module with built-in resistors, which
    allows us to save space on our breadboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Prepare the LCD screen as per the soldering instructions in “[Preparing the
    LCD Screen](ch12.xhtml#ch12lev1sec02)” on [page 104](ch12.xhtml#page_104).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place your LCD screen in the breadboard, inserting the header pins into the
    breadboard holes. Also place the potentiometer in the breadboard, and use the
    breadboard and jumper wires to connect your LCD screen, Arduino, and potentiometer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **LCD SCREEN** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 1 VSS | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 2 VDD | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 3 VO contrast | Potentiometer center pin |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 4 RS | Pin 11 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 5 R/W | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 6 Enable | Pin 12 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 7 D0 | Not used |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 8 D1 | Not used |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 9 D2 | Not used |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 10 D3 | Not used |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 11 D4 | Pin 5 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 12 D5 | Pin 4 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 13 D6 | Pin 3 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 14 D7 | Pin 2 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 15 A BcL + | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 16 K BcL – | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: You should have already connected the center pin of the 50-kilohm potentiometer
    to LCD pin 3 (VO). Now connect one of the outer pins to GND and the other to +5V.
    This controls the contrast of your LCD screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the pushbutton into the breadboard so that it straddles the break in
    the center. We’ll label the pins as shown in [Figure 15-5](ch15.xhtml#ch15fig5).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 15-5:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The pushbutton straddles the center break.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f15-05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Connect pin A to ground via a 220-ohm resistor, pin C to Arduino pin 9, and
    pin D to +5V (see [Project 1](ch01.xhtml#ch01) for more on how the pushbutton
    works).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| **PUSHBUTTON** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin A | GND via 220-ohm resistor |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin C | Pin 9 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin D | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Insert the RGB module and connect the red pin to Arduino pin 8, green to pin
    6, blue to pin 7, and + to +5V.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **RGB LED** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Red | Pin 8 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Green | Pin 6 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Blue | Pin 7 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| + | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Connect the piezo buzzer’s red wire directly to Arduino pin 13 and its black
    wire to GND.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **PIEZO** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Red wire | Pin 13 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Black wire | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Check your build against Figure 15-7, and then upload the code in “[The Sketch](ch15.xhtml#ch15lev1sec03)”
    on [page 130](ch15.xhtml#page_130) to start playing!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 15-6:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Circuit diagram for the reaction timer game. You’ll probably find that it’s
    easier to add all the GND and +5V wires before the data wires.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f15-06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you press and hold the pushbutton, the LED flashes random colors and eventually
    turns red. The duration of time for which each color shows is set to random, as
    is the duration of the pauses between lights. This means you can’t learn the sequence
    of the colors and predict when the LED might turn red.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can make the game more difficult by increasing the duration of the intervals
    in the following line of the sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The full sketch is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
