- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">21</samp> <samp class="SANS_Dogma_OT_Bold_B_11">RETRIEVE
    THE CURRENT TIME FROM AN INTERNET TIME SERVER</samp>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">21</samp> <samp class="SANS_Dogma_OT_Bold_B_11">从互联网时间服务器获取当前时间</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: When building projects that rely on keeping track of the current time (such
    as for logging data, creating planned events, or just making your own clocks),
    it’s common to use a real-time clock IC. For increased time and date accuracy,
    however, you can use an ESP32 Arduino-compatible board to retrieve the current
    time and date from an internet time server. Using the ESP32 also saves you the
    cost of an RTC IC or module and a separate Arduino or compatible board when building
    a new project and allows you to set your required time zone in the code, rather
    than in a separate interface.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建依赖于当前时间跟踪的项目（例如数据记录、创建计划事件或仅仅是制作自己的时钟）时，通常使用实时钟表IC。然而，为了提高时间和日期的准确性，你可以使用ESP32兼容Arduino的板子从互联网时间服务器获取当前时间和日期。使用ESP32还可以节省RTC
    IC模块或独立Arduino板的成本，并且可以在代码中设置你所需的时区，而不是在单独的界面中设置。
- en: 'In this chapter, you’ll learn about the Network Time Protocol (NTP), install
    and test the NTP client library for Arduino, and extract the time and date components
    for your own projects. You’ll learn to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习网络时间协议（NTP），安装并测试Arduino的NTP客户端库，并提取时间和日期组件用于你自己的项目。你将学会：
- en: Build a compact clock with an OLED display
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个带OLED显示屏的紧凑型时钟
- en: Build a dual-time clock that displays time at home and at another location
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个双时区时钟，显示家里和另一个地点的时间
- en: Build a giant, super-bright digital clock
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个巨型超亮数字时钟
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Network Time Protocol</samp>
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">网络时间协议</samp>
- en: Originally standardized in the mid-1980s, NTP is a method of synchronizing connected
    computers to the Coordinated Universal Time (formally known as Greenwich Mean
    Time, or GMT). The NTP allows for an accuracy of 1 millisecond or better. In general
    use, the margin of error is around 100 milliseconds, but a difference of one-10th
    of a second is easily accurate enough for timing-related Arduino projects.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: NTP最初在1980年代中期标准化，是一种将计算机与协调世界时（正式称为格林威治标准时间，或GMT）同步的方法。NTP可以达到1毫秒或更好的精度。一般情况下，误差范围约为100毫秒，但对于与时间相关的Arduino项目来说，十分之一秒的差距通常已经足够准确。
- en: You can retrieve the time from the NTP server either in the usual 24-hour time
    and standard date format or in the format of *epoch time*. This is the number
    of seconds since January 1, 1970, from which you can make your own calculations
    to determine the current date and time. Some people use epoch time to calculate
    their own types of time, such as metric time.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从NTP服务器中以通常的24小时制时间和标准日期格式或以*纪元时间*格式获取时间。纪元时间是自1970年1月1日起的秒数，你可以基于此时间进行自己的计算，以确定当前的日期和时间。有些人使用纪元时间来计算自己的时间类型，例如公制时间。
- en: There are many NTP servers available around the world, each with its own address.
    Generally, the one closest to your location should have the fastest connection
    to your project, but you might want to use a different server depending on your
    internet routing. Check [*https://<wbr>www<wbr>.pool<wbr>.ntp<wbr>.org<wbr>/zone<wbr>/@*](https://www.pool.ntp.org/zone/@)
    to find the server address most appropriate for you and then use that to replace
    my default NTP server in the code for this chapter’s projects.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 世界各地有许多NTP服务器，每个服务器都有自己的地址。通常，离你的位置最近的服务器应该能提供最快的连接，但你可能希望根据互联网路由使用不同的服务器。请访问[*https://<wbr>www<wbr>.pool<wbr>.ntp<wbr>.org<wbr>/zone<wbr>/@*](https://www.pool.ntp.org/zone/@)
    查找最适合你的服务器地址，并用它替换本章项目中默认的NTP服务器。
- en: 'You will also need to know your *time zone offset*: the number of hours before
    or after GMT, or in more contemporary parlance, the Coordinated Universal Time.
    This is based on the values listed at [*https://<wbr>en<wbr>.wikipedia<wbr>.org<wbr>/wiki<wbr>/List<wbr>_of<wbr>_UTC<wbr>_offsets*](https://en.wikipedia.org/wiki/List_of_UTC_offsets).
    For example, if you live in London, set your offset to 0, as your time zone falls
    in the value of UTC (or GMT) 0\. If you live in Los Angeles, California, the time
    zone is UTC −8\. This means you’d use a value of −28,800, as LA is 8 hours behind
    UTC, multiplied by 3,600 to convert to seconds. Finally, the update interval value
    of 60,000 is the update interval in milliseconds. This is set to a default that
    equates to one minute, as you don’t need to update the time more than once a second.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要知道你的*时区偏移*：即相对于格林威治标准时间（GMT）或更现代的协调世界时（UTC）的小时数。例如，如果你住在伦敦，将时区偏移设置为0，因为伦敦时区属于UTC（或GMT）0。如果你住在洛杉矶，加利福尼亚州，时区为UTC
    −8。这意味着你应该使用−28,800的值，因为洛杉矶比UTC晚8小时，将其乘以3,600来转换为秒。最后，更新间隔值60,000是以毫秒为单位的更新间隔。这是设置为默认值，等于一分钟，因为你不需要每秒钟更新时间超过一次。
- en: To prepare to build the projects in this chapter, download and install the NTP
    Client library for Arduino directly from my GitHub page. Visit [*https://<wbr>github<wbr>.com<wbr>/taranais<wbr>/NTPClient*](https://github.com/taranais/NTPClient)
    and click **Code** in the center of the screen. A small menu should appear, as
    shown in [Figure 21-1](chapter21.xhtml#fig21-1). Click **Download ZIP** to download
    the library ZIP file to your PC. If the Arduino IDE ever prompts you to update
    this library, don’t—use the first version you already installed.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备本章的项目，直接从我的GitHub页面下载并安装Arduino的NTP客户端库。访问[*https://<wbr>github<wbr>.com<wbr>/taranais<wbr>/NTPClient*](https://github.com/taranais/NTPClient)，点击屏幕中间的**代码**。会弹出一个小菜单，如[图21-1](chapter21.xhtml#fig21-1)所示。点击**下载ZIP**，将库ZIP文件下载到你的PC。如果Arduino
    IDE提示你更新此库，请不要更新——使用你已安装的第一个版本。
- en: '![A SCREENSHOT OF THE NTP CLIENT LIBRARY GITHUB PAGE](../images/fig21-1.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![NTP客户端库GitHub页面截图](../images/fig21-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 21-1: Downloading the
    NTP Client library</samp>'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图21-1：下载NTP客户端库</samp>
- en: Open the Arduino IDE and install the library by selecting **Sketch** ![](../images/arr.png)
    **Include Library** ![](../images/arr.png) **Add .ZIP Library.** Once the library
    installs, restart the Arduino IDE to continue.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Arduino IDE，并通过选择**草图** ![](../images/arr.png) **包含库** ![](../images/arr.png)
    **添加 .ZIP 库**来安装库。安装完成后，重新启动Arduino IDE以继续操作。
- en: You’re ready to start using internet time in your projects.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以开始在项目中使用互联网时间了。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #61: Retrieving the Time and
    Date</samp>'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_21">项目#61：获取时间和日期</samp>
- en: This project serves as a framework for retrieving the time and date from an
    NTP server and then extracting the elements of date and time (hours, minutes,
    and so on) so you can use them in your own projects.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目作为一个框架，用于从NTP服务器获取时间和日期，然后提取日期和时间的各个元素（小时、分钟等），以便你在自己的项目中使用。
- en: The project uses the Serial Monitor to display the time and date, so for hardware,
    you’ll need only the ESP32 dev board and matching USB cable as used in previous
    chapters. If you haven’t already, turn to [Chapter 19](chapter19.xhtml) and follow
    “Configuring the Arduino IDE for the ESP32” through “Testing the ESP32” to install
    the required board profiles for the Arduino IDE.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目使用串口监视器显示时间和日期，因此在硬件方面，你只需要ESP32开发板和与前几章相同的USB电缆。如果你还没有完成，请转到[第19章](chapter19.xhtml)，按照“为ESP32配置Arduino
    IDE”到“测试ESP32”的步骤安装Arduino IDE所需的板卡配置。
- en: 'Enter and upload the Project #61 sketch, adding your Wi-Fi network credentials
    in the SSID and password fields near the top of the sketch (as originally explained
    for Project #55 in [Chapter 19](chapter19.xhtml)). Once the sketch has uploaded,
    the ESP32 should attempt to connect to your Wi-Fi network and then retrieve and
    display the time and date information in the Serial Monitor, as shown in [Figure
    21-2](chapter21.xhtml#fig21-2).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并上传项目#61的草图，在草图顶部附近的SSID和密码字段中添加你的Wi-Fi网络凭证（如在[第19章](chapter19.xhtml)中项目#55部分所述）。上传草图后，ESP32应该尝试连接到你的Wi-Fi网络，并在串口监视器中检索并显示时间和日期信息，如[图21-2](chapter21.xhtml#fig21-2)所示。
- en: '![AN EXAMPLE OUTPUT FROM PROJECT #61](../images/fig21-2.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #61 的示例输出](../images/fig21-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 21-2: Example output
    from Project #61</samp>'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 21-2：项目 #61 的示例输出</samp>'
- en: 'Let’s take a closer look at how this works:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看它是如何工作的：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: First, the sketch includes the required libraries for Wi-Fi and the NTP client
    and creates an instance of the timer server <samp class="SANS_TheSansMonoCd_W5Regular_11">ntp</samp>
    ❶. Next, it stores the name and password of the Wi-Fi network for use by the Wi-Fi
    library ❷.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，草图包含了 Wi-Fi 和 NTP 客户端所需的库，并创建了一个定时器服务器实例 <samp class="SANS_TheSansMonoCd_W5Regular_11">ntp</samp>
    ❶。接下来，它存储了 Wi-Fi 网络的名称和密码，以供 Wi-Fi 库使用 ❷。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">NTPClient timeClient()</samp>
    function accepts the NTP server address to use, the required time zone offset,
    and the update interval. As mentioned in the previous section, try the default
    time server address supplied in the code or find one closer to your location.
    For the time zone offset, replace the value in the code with the offset appropriate
    for your location.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">NTPClient timeClient()</samp>
    函数接受要使用的 NTP 服务器地址、所需的时区偏移量和更新时间间隔。如前节所述，尝试使用代码中提供的默认时间服务器地址，或查找一个离您位置更近的服务器地址。对于时区偏移，请将代码中的值替换为适合您所在位置的偏移量。
- en: In <samp class="SANS_TheSansMonoCd_W5Regular_11">void loop()</samp>, various
    string variables are declared for storing time and date information, followed
    by a force update of the time client ❸ to get the latest time and date from the
    server. The next three functions demonstrate how to retrieve the time and date
    information in different formats and display their values on the Serial Monitor.
    The first is <samp class="SANS_TheSansMonoCd_W5Regular_11">timeClient.getEpochTime()</samp>,
    which retrieves the epoch time. Next, <samp class="SANS_TheSansMonoCd_W5Regular_11">timeClient.getFormattedDate()</samp>
    shows the entire time and date in the previously set time zone with the date in
    *yyyy*-*mm*-*dd* format, followed by the letter *T* (for “time”) and then the
    current time in 24-hour time. Finally, <samp class="SANS_TheSansMonoCd_W5Regular_11">timeClient.getFormattedTime()</samp>
    shows the current time in *hh*:*mm*:*ss* format.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在 <samp class="SANS_TheSansMonoCd_W5Regular_11">void loop()</samp> 中，声明了多个字符串变量用于存储时间和日期信息，接着强制更新时间客户端
    ❸ 以从服务器获取最新的时间和日期。接下来的三个函数演示了如何以不同的格式检索时间和日期信息，并将其值显示在串口监视器上。第一个是 <samp class="SANS_TheSansMonoCd_W5Regular_11">timeClient.getEpochTime()</samp>，它获取纪元时间。接着，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">timeClient.getFormattedDate()</samp> 显示设置时区后的完整时间和日期，日期格式为
    *yyyy*-*mm*-*dd*，后跟字母 *T*（表示“时间”），然后是当前时间的 24 小时制。最后，<samp class="SANS_TheSansMonoCd_W5Regular_11">timeClient.getFormattedTime()</samp>
    显示当前时间，格式为 *hh*:*mm*:*ss*。
- en: Next, the sketch demonstrates how to extract individual pieces of time and date
    information. The <samp class="SANS_TheSansMonoCd_W5Regular_11">timeClient.getDay()</samp>
    function returns an integer between 0 and 6 that represents the day of the week,
    from Sunday through Saturday, respectively. This is used in a <samp class="SANS_TheSansMonoCd_W5Regular_11">switch…case</samp>
    function ❹ to determine the current day and display the name in the Serial Monitor.
    The sketch displays the individual values for hours, minutes, and seconds with
    the functions <samp class="SANS_TheSansMonoCd_W5Regular_11">timeClient.getHours()</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">timeClient.getMinutes()</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">timeClient.getSeconds()</samp>,
    which all return their respective values as integers. The code also includes a
    test for values less than 10 for minutes and seconds to add a 0 if necessary for
    the proper time format. This is so that you don’t end up with a time display of
    9:5:00 for five minutes past 9 AM, for example.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，草图演示了如何提取单独的时间和日期信息。<samp class="SANS_TheSansMonoCd_W5Regular_11">timeClient.getDay()</samp>
    函数返回一个介于 0 和 6 之间的整数，表示星期几，分别是从星期天到星期六。这个值用于 <samp class="SANS_TheSansMonoCd_W5Regular_11">switch…case</samp>
    函数 ❹ 来确定当前是星期几，并在串口监视器上显示对应的名称。草图通过函数 <samp class="SANS_TheSansMonoCd_W5Regular_11">timeClient.getHours()</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">timeClient.getMinutes()</samp> 和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">timeClient.getSeconds()</samp> 显示小时、分钟和秒的单独值，这些函数都返回对应的整数值。代码还包括一个测试，检查分钟和秒是否小于
    10，并在必要时添加前导零，以确保正确的时间格式。例如，防止显示为 9:5:00，表示早上 9 点 5 分。
- en: Getting the day, month, and year is a little different. The sketch first retrieves
    the entire time and date using <samp class="SANS_TheSansMonoCd_W5Regular_11">timeClient.getFormattedDate()</samp>❺
    and then stores the values for the date, month, and year in string variables using
    <samp class="SANS_TheSansMonoCd_W5Regular_11">.substring</samp> functions. For
    example, the year falls within the first four characters of the string <samp class="SANS_TheSansMonoCd_W5Regular_11">dateString</samp>,
    so the function <samp class="SANS_TheSansMonoCd_W5Regular_11">dateString.substring(0,4)</samp>
    will return those first four characters. Finally, there’s a delay of 1 second
    before the process repeats.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 获取日期、月份和年份的方式稍有不同。程序首先使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">timeClient.getFormattedDate()</samp>❺
    获取完整的时间和日期，然后使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">.substring</samp>
    函数将日期、月份和年份的值存储在字符串变量中。例如，年份位于字符串 <samp class="SANS_TheSansMonoCd_W5Regular_11">dateString</samp>
    的前四个字符中，因此函数 <samp class="SANS_TheSansMonoCd_W5Regular_11">dateString.substring(0,4)</samp>
    将返回这四个字符。最后，程序会延迟 1 秒后重复该过程。
- en: If your project loses its connection to your Wi-Fi network, the time will stay
    the same and not update until the ESP32 can reconnect to the NTP server, at which
    point the time and date will automatically update.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的项目与 Wi-Fi 网络断开连接，时间将保持不变，直到 ESP32 能够重新连接到 NTP 服务器，届时时间和日期将自动更新。
- en: The following projects use this sketch as a framework for retrieving the time
    and date and displaying the results on different devices.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下项目使用此代码框架来获取时间和日期，并在不同的设备上显示结果。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #62: Displaying the Time and
    Date on an OLED</samp>'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #62：在 OLED 上显示时间和日期</samp>'
- en: This project demonstrates how to display the time and date from an NTP server
    on the inexpensive OLED display you first used in [Chapter 10](chapter10.xhtml).
    You could modify this project to control other types of displays, such as LCDs
    or even Nixie tubes, if so inclined.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目展示了如何在你在[第10章](chapter10.xhtml)中首次使用的廉价 OLED 显示屏上显示来自 NTP 服务器的时间和日期。如果愿意，你可以修改本项目来控制其他类型的显示器，比如
    LCD 或者甚至是尼克管显示器。
- en: 'You’ll need the following hardware:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下硬件：
- en: An ESP32 Arduino-compatible board and USB cable
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块 ESP32 Arduino 兼容板和 USB 电缆
- en: A 128 × 32 pixel, 0.91-inch OLED display
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 128 × 32 像素、0.91 英寸的 OLED 显示屏
- en: A solderless breadboard
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个无焊接面包板
- en: Various jumper wires
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种跳线
- en: If this is your first time using the OLED display, please turn to [Chapter 10](chapter10.xhtml)
    and follow the instructions in “Graphic OLED Displays” on page 149 to the point
    where you have tested the OLED and then assemble the circuit as shown in [Figure
    21-3](chapter21.xhtml#fig21-3).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是你第一次使用 OLED 显示屏，请转到[第10章](chapter10.xhtml)，按照第149页的“图形 OLED 显示屏”部分中的说明，测试
    OLED 显示屏，然后按照[图 21-3](chapter21.xhtml#fig21-3)中的电路图组装电路。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*Although your OLED might be marked as a 5 V device, the specified model also
    works on 3.3 V without a level converter.*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*尽管你的 OLED 可能标明为 5 V 设备，但指定型号在 3.3 V 下也能正常工作，无需电平转换器。*'
- en: '![THE SCHEMATIC FOR PROJECT #62](../images/fig21-3.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #62 的电路图](../images/fig21-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 21-3: The schematic
    for Project #62</samp>'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 21-3：项目 #62 的电路图</samp>'
- en: 'Enter and upload the Project #62 sketch, updating your Wi-Fi network details
    as appropriate. The OLED should display a message telling you the ESP32 is attempting
    to connect to Wi-Fi, as shown in [Figure 21-4](chapter21.xhtml#fig21-4).'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '输入并上传项目 #62 的代码，适当更新你的 Wi-Fi 网络详细信息。OLED 应该显示一条信息，告诉你 ESP32 正在尝试连接 Wi-Fi，如[图
    21-4](chapter21.xhtml#fig21-4)所示。'
- en: '![THE OLED DISPLAY DURING THE INITIAL CONNECTION TO WI-FI: “CONNECTING TO WI-FI…”](../images/fig21-4.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![初次连接 Wi-Fi 时的 OLED 显示屏：“正在连接到 Wi-Fi...”](../images/fig21-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 21-4: The project connecting
    to Wi-Fi</samp>'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 21-4：项目连接到 Wi-Fi</samp>
- en: Once the project has connected to the NTP server, the OLED should display the
    current time and date, along with the day of the week, as shown in [Figure 21-5](chapter21.xhtml#fig21-5).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦项目连接到 NTP 服务器，OLED 显示屏应该显示当前时间和日期，以及星期几，如[图 21-5](chapter21.xhtml#fig21-5)所示。
- en: '![THE EXAMPLE OUTPUT FROM PROJECT #62: “10:49:09 MON 09/01/2023”](../images/fig21-5.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #62 的示例输出：“10:49:09 MON 09/01/2023”](../images/fig21-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 21-5: Example output
    from Project #62</samp>'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 21-5：项目 #62 的示例输出</samp>'
- en: 'Let’s take a closer look at how this works:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看它是如何工作的：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The sketch includes and initializes the libraries required for Wi-Fi, the NTP
    client, the I²C bus, and the OLED. Set the fields for your Wi-Fi network details,
    as usual.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图包括并初始化了Wi-Fi、NTP客户端、I²C总线和OLED所需的库。像往常一样，设置你的Wi-Fi网络详细信息。
- en: The sketch then initiates an instance of the NTP client and sets up the pool
    server, time zone offset, and update intervals ❶. In <samp class="SANS_TheSansMonoCd_W5Regular_11">void
    setup()</samp>, it starts the I²C bus, OLED display library, and Serial Monitor
    for debugging and then initializes the Wi-Fi. The next block of code causes the
    “Connecting …” message to appear on the OLED during the connection process ❷.
    The sketch then starts the NTP client library.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，草图初始化了NTP客户端的一个实例，并设置了池服务器、时区偏移和更新时间间隔❶。在<samp class="SANS_TheSansMonoCd_W5Regular_11">void
    setup()</samp>中，它启动了I²C总线、OLED显示库和用于调试的串口监视器，然后初始化了Wi-Fi。接下来的代码块会使“OLED正在连接...”消息在连接过程中显示❷。草图接着启动了NTP客户端库。
- en: The code in <samp class="SANS_TheSansMonoCd_W5Regular_11">void loop()</samp>
    aims to assemble the time information and display it on the top line of the OLED
    and then assemble the date information and display it on the bottom line. This
    starts by retrieving the time ❸ and then adding a 0 to the string <samp class="SANS_TheSansMonoCd_W5Regular_11">OLED1</samp>,
    which will contain the time data for hours, minutes, and seconds if the individual
    piece of data is below 10\. The hour, minute, and second values are then added
    into their respective string variables, which are finally concatenated into one
    string for display ❹.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">void loop()</samp>中的代码旨在组合时间信息并将其显示在OLED的顶部行，然后组合日期信息并将其显示在底部行。首先通过获取时间❸，然后将一个0添加到字符串<samp
    class="SANS_TheSansMonoCd_W5Regular_11">OLED1</samp>中，如果小时、分钟或秒数小于10，字符串将包含这些数据。接着，小时、分钟和秒数被添加到各自的字符串变量中，最终它们会被拼接成一个字符串进行显示❹。
- en: After retrieving the date string ❺, the code retrieves the day of week and places
    it inside the string <samp class="SANS_TheSansMonoCd_W5Regular_11">OLED2</samp>,
    which it uses to display the entire date via the <samp class="SANS_TheSansMonoCd_W5Regular_11">switch…case</samp>
    function. Next, it retrieves the day, month, and year and adds that data to the
    main date string, including with separators for a neat display ❻.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 获取日期字符串❺之后，代码获取星期几并将其放入字符串<samp class="SANS_TheSansMonoCd_W5Regular_11">OLED2</samp>中，接着利用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">switch…case</samp>函数显示完整的日期。然后，它获取日期、月份和年份，并将这些数据添加到主日期字符串中，同时使用分隔符进行整洁的显示❻。
- en: Finally, the sketch sends the two lines of data, <samp class="SANS_TheSansMonoCd_W5Regular_11">OLED1</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">OLED2</samp>, to the OLED for
    display ❼. As demonstrated in the code, you must add the suffix <samp class="SANS_TheSansMonoCd_W5Regular_11">.c_str</samp>
    to the variable name to tell the OLED library to convert the variable from a string
    to usable data.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，草图将两行数据<samp class="SANS_TheSansMonoCd_W5Regular_11">OLED1</samp>和<samp class="SANS_TheSansMonoCd_W5Regular_11">OLED2</samp>发送到OLED显示器进行显示❼。如代码所示，必须在变量名后添加后缀<samp
    class="SANS_TheSansMonoCd_W5Regular_11">.c_str</samp>，以告诉OLED库将变量从字符串转换为可用的数据。
- en: Keep the hardware for this project assembled. In the next project, you’ll use
    it to make a dual-zone clock that takes advantage of the offset function in the
    NTP library.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 保持这个项目的硬件组件已组装好。在下一个项目中，你将使用它制作一个双时区时钟，利用NTP库中的偏移功能。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #63: Displaying Two Time Zones
    on an OLED</samp>'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #63：在OLED上显示两个时区</samp>'
- en: This project shows you how to display the time in two zones simultaneously on
    the OLED display used in the previous project. This might be useful if you’re
    a HAM radio operator or if you often communicate with friends, family, or colleagues
    in different time zones.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目展示了如何在前一个项目使用的OLED显示器上同时显示两个时区的时间。如果你是HAM无线电爱好者，或者你经常与不同时间区的朋友、家人或同事沟通，这可能会很有用。
- en: 'The required hardware and assembly are the same as Project #62\. Once the hardware
    is ready, enter and upload the Project #63 sketch. Don’t forget to add your Wi-Fi
    network credentials into this sketch. After the ESP32 connects to the Wi-Fi network,
    the OLED should display the “home zone” time for the east coast of Australia (where
    I live) and display the “away zone” time for San Francisco in the United States
    (the home of No Starch Press), as shown in [Figure 21-6](chapter21.xhtml#fig21-6).'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的硬件和组装与项目#62相同。硬件准备好后，进入并上传项目#63的草图。别忘了将你的Wi-Fi网络凭证添加到这个草图中。ESP32连接到Wi-Fi网络后，OLED应显示澳大利亚东海岸的“家庭时区”时间（我所在的地方），并显示美国旧金山的“离开时区”时间（No
    Starch Press的总部），如[图21-6](chapter21.xhtml#fig21-6)所示。
- en: '![THE EXAMPLE OUTPUT FROM PROJECT #63: “HOME 11:25:11 SFO 17:25:11”](../images/fig21-6.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![项目#63的示例输出：“HOME 11:25:11 SFO 17:25:11”](../images/fig21-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 21-6: Example display
    for Project #63</samp>'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图21-6：项目#63的示例显示</samp>
- en: 'To learn to change the time zones, let’s take a closer look at the sketch:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了学习如何更改时区，让我们仔细看看这个草图：
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This sketch is similar to the one for Project #62, in that it also assembles
    two lines of data to display on the OLED. To create a dual-zone clock, the code
    begins by setting the time zone offset for the first zone ❶. The example home
    time zone in the sketch is for Brisbane, which is UTC +10, so the offset value
    for the <samp class="SANS_TheSansMonoCd_W5Regular_11">timeClient.setTimeOffset()</samp>
    function is 36,000 (3,600 multiplied by +10 hours), but you can change this to
    match whichever time zone you like. Following this, the sketch retrieves the time
    data and assembles it into the string variable <samp class="SANS_TheSansMonoCd_W5Regular_11">OLED1</samp>
    ❷, preceding it with the label <samp class="SANS_TheSansMonoCd_W5Regular_11">Home</samp>.
    The sketch then blanks out the string variables used to temporarily hold retrieved
    time data for reuse ❸.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图与项目#62的草图类似，同样将两行数据组装并显示到OLED上。为了创建一个双时区时钟，代码首先设置第一个时区的时区偏移量❶。草图中的示例本地时区是布里斯班，布里斯班的时区是UTC+10，因此<samp
    class="SANS_TheSansMonoCd_W5Regular_11">timeClient.setTimeOffset()</samp>函数的偏移值是36,000（3,600乘以+10小时），但是你可以将其更改为任何你喜欢的时区。接着，草图获取时间数据并将其组装到字符串变量<samp
    class="SANS_TheSansMonoCd_W5Regular_11">OLED1</samp> ❷中，在前面加上标签<samp class="SANS_TheSansMonoCd_W5Regular_11">Home</samp>。草图然后清空临时存储获取时间数据的字符串变量，供以后重用❸。
- en: The same process repeats for a second time zone. I’ve used the example of San
    Francisco, which is UTC –8, meaning that the offset value for the <samp class="SANS_TheSansMonoCd_W5Regular_11">timeClient.setTimeOffset()</samp>
    function is –28,800 (3,600 multiplied by –8 hours). The sketch retrieves and assembles
    the time date into the string variable <samp class="SANS_TheSansMonoCd_W5Regular_11">OLED2</samp>
    ❹, starting with a label for the away zone <samp class="SANS_TheSansMonoCd_W5Regular_11">SFO</samp>.
    Finally, it sends the two strings of data to the OLED for display ❺, followed
    by a short delay before the entire process repeats.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的过程会对第二个时区重复。我使用了旧金山的例子，旧金山的时区是UTC-8，这意味着<samp class="SANS_TheSansMonoCd_W5Regular_11">timeClient.setTimeOffset()</samp>函数的偏移值为-28,800（3,600乘以-8小时）。草图将获取并组装时间数据到字符串变量<samp
    class="SANS_TheSansMonoCd_W5Regular_11">OLED2</samp> ❹中，以“离开时区”的标签<samp class="SANS_TheSansMonoCd_W5Regular_11">SFO</samp>开头。最后，它将这两组数据发送到OLED显示❺，然后稍作延迟后整个过程再次重复。
- en: For a challenge, you might try modifying this project to scroll through various
    time zones at the press of a button.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想挑战自己，可以尝试修改这个项目，在按下按钮时切换显示不同的时区。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #64: Building a Giant Digital
    Clock</samp>'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_21">项目#64：构建一个巨型数字时钟</samp>
- en: 'For this chapter’s final project, let’s have some fun and build a giant digital
    clock using the seven-segment LED modules from Project #27 in [Chapter 8](chapter8.xhtml).
    Once assembled, you could use this project to keep time in your workshop as an
    example of your prowess.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最终项目，让我们来点乐趣，使用项目#27中来自[第8章](chapter8.xhtml)的七段LED模块构建一个巨型数字时钟。组装完成后，你可以将这个项目用作车间里的时间工具，展示你的技术实力。
- en: 'If you don’t already have the seven-segment LED modules set up, revisit Project
    #27 and build the four required display boards. (For a challenge, you might make
    six boards so you can display seconds in addition to minutes and hours.) Apart
    from the display boards, wiring, and 9 V DC 1A power supply covered in that project,
    you will only need the ESP32 board used in this chapter and the usual jumper wires
    and USB cable.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你还没有设置七段 LED 模块，回顾一下项目 #27 并制作四个需要的显示板。（如果你想挑战自己，可以做六个显示板，这样就可以同时显示秒数、分钟和小时了。）除了这个项目中涉及的显示板、布线和
    9 V DC 1A 电源，你还需要本章节中使用的 ESP32 板以及常规的跳线和 USB 电缆。'
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*The TPIC6B595 shift register ICs used in the LED display boards are both 3.3
    V and 5 V tolerant, so you don’t need to connect a level shifter between them
    and the ESP32 board.*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*LED 显示板中使用的 TPIC6B595 移位寄存器 IC 既支持 3.3 V 也支持 5 V，所以你不需要在它们与 ESP32 板之间连接电平转换器。*'
- en: 'Once you have connected the four display boards, upload the Project #64 sketch.
    Using the connections diagrammed in [Figure 21-7](chapter21.xhtml#fig21-7), connect
    the ESP32 to the first display board (the one on the left of the figure).'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '一旦连接好四个显示板，上传项目 #64 的草图。按照 [图 21-7](chapter21.xhtml#fig21-7) 中的连接图，连接 ESP32
    到第一个显示板（图中左侧的那个显示板）。'
- en: '![THE CONNECTION DETAILS BETWEEN THE ESP32 AND THE FIRST DISPLAY BOARD](../images/fig21-7.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![ESP32 与第一个显示板之间的连接详情](../images/fig21-7.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 21-7: The connection
    layout between the ESP32 and first display board</samp>'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 21-7：ESP32 与第一个显示板之间的连接布局</samp>
- en: Connect the power to the first display board. The ESP32 should connect to the
    Wi-Fi network and retrieve the time. Stand back to see all four digits light up
    with the current time, as shown in [Figure 21-8](chapter21.xhtml#fig21-8).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 将电源连接到第一个显示板。ESP32 应该连接到 Wi-Fi 网络并获取时间。稍微退后，你就能看到四个数字同时亮起，显示当前时间，如 [图 21-8](chapter21.xhtml#fig21-8)
    所示。
- en: '![PROJECT #64 IN OPERATION, SHOWING 21.15H](../images/fig21-8.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #64 运行示例，显示 21.15H](../images/fig21-8.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 21-8: Project #64 in
    action</samp>'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 21-8：项目 #64 的运行示例</samp>'
- en: 'Let’s see how this works in the sketch:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个草图是如何工作的：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The operations in this sketch should be familiar to you at this point. The code
    includes the required libraries and Wi-Fi network details. It then creates an
    instance of the NTP client with the pool server, time zone offset, and update
    interval details. For easy reference, the sketch defines the pin numbers used
    for the outputs to the shift registers on the display boards ❶.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图中的操作现在应该对你来说已经很熟悉了。代码包含了所需的库和 Wi-Fi 网络详情。接着，它创建了一个 NTP 客户端实例，包含了池服务器、时区偏移和更新时间间隔的细节。为了便于参考，草图还定义了用于向显示板上的移位寄存器输出的引脚编号
    ❶。
- en: The array <samp class="SANS_TheSansMonoCd_W5Regular_11">digits[]</samp> holds
    the 10 bytes of data used to define how a digit is displayed on the LED boards,
    where each bit represents one of the seven segments used to comprise a digit.
    The custom <samp class="SANS_TheSansMonoCd_W5Regular_11">sendNumbers()</samp>
    function accepts an array of four integers to display on the four LED boards,
    as well as another integer that, if used, turns on the decimal point on the matching
    LED board.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 数组 <samp class="SANS_TheSansMonoCd_W5Regular_11">digits[]</samp> 存储了用于定义数字在
    LED 显示板上如何显示的 10 个字节数据，其中每一位代表组成数字的七个段之一。自定义的 <samp class="SANS_TheSansMonoCd_W5Regular_11">sendNumbers()</samp>
    函数接受一个包含四个整数的数组，以在四个 LED 显示板上显示，并且还可以接受另一个整数，如果使用这个整数，就会在相应的 LED 显示板上点亮小数点。
- en: In <samp class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp>, the code
    initializes the required digital pins, sets up the Serial Monitor for debugging,
    and starts the Wi-Fi connection and the NTP client ❷. The code in <samp class="SANS_TheSansMonoCd_W5Regular_11">void
    loop()</samp> updates the NTP client for the latest time information ❸ and then
    retrieves and stores the hours and minutes in variables. The time must be broken
    down into single digits before it’s sent to the LED boards, so the use of modulo
    and division ❹ on the hours and minutes values returns the first and second digits,
    which are then stored in the array <samp class="SANS_TheSansMonoCd_W5Regular_11">numbers[]</samp>.
    Finally, the sketch sends those digits to the display using <samp class="SANS_TheSansMonoCd_W5Regular_11">sendNumbers()</samp>,
    with the decimal point placed at the second digit as separator between hours and
    minutes ❺.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在 <samp class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp> 中，代码初始化了所需的数字引脚，设置了串口监视器进行调试，启动了Wi-Fi连接和NTP客户端
    ❷。在 <samp class="SANS_TheSansMonoCd_W5Regular_11">void loop()</samp> 中，代码更新NTP客户端以获取最新的时间信息
    ❸，然后检索并存储小时和分钟的值。时间在发送到LED显示板之前必须拆解成单个数字，因此对小时和分钟值进行取模和除法操作 ❹，返回第一个和第二个数字，然后将其存储在数组
    <samp class="SANS_TheSansMonoCd_W5Regular_11">numbers[]</samp> 中。最后，代码通过 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">sendNumbers()</samp> 函数将这些数字发送到显示屏，且在第二个数字处放置小数点作为小时和分钟之间的分隔符
    ❺。
- en: For a final challenge, you can try altering the code in any of the projects
    in this chapter to use 12-hour time rather than 24-hour time. To do so, you must
    subtract 12 from any hour value that is 13 or more before displaying that hour.
    You could, of course, also add a test for AM and PM.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最终挑战，你可以尝试修改本章任何项目中的代码，将时间格式从24小时制改为12小时制。为此，你需要将任何大于或等于13的小时值减去12，然后再显示该小时数。当然，你也可以增加一个AM和PM的测试。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">继续前进</samp>
- en: In this chapter, you learned how to harness accurate time and date information
    from the internet and show that information using various display types. Armed
    with these skills, you might try building additional clocks with various displays
    as practice for other projects that require the time and date.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学习了如何从互联网获取准确的时间和日期信息，并使用各种显示类型展示这些信息。掌握了这些技能后，你可以尝试构建其他类型的时钟，作为练习，为需要时间和日期的其他项目做准备。
- en: The next chapter covers another way to use the ESP32, demonstrating how to capture
    data from the dev board into the Google Sheets app for analysis.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章介绍了另一种使用ESP32的方法，演示了如何将开发板的数据捕获到Google Sheets应用中进行分析。
