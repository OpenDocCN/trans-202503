- en: '**11'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**11'
- en: XML EXTERNAL ENTITY**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: XML 外部实体**
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/common.jpg)'
- en: Attackers can exploit how an application parses *eXtensible Markup Language
    (XML)* by taking advantage of an *XML External Entity (XXE)* vulnerability. More
    specifically, it involves exploiting how the application processes the inclusion
    of external entities in its input. You can use an XXE to extract information from
    a server or to call on a malicious server.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以利用应用程序解析*可扩展标记语言（XML）*的方式，利用*XML 外部实体（XXE）*漏洞。更具体地说，这涉及利用应用程序处理外部实体在输入中的包含方式。您可以使用XXE从服务器中提取信息，或者调用恶意服务器。
- en: '**eXtensible Markup Language**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**可扩展标记语言**'
- en: This vulnerability takes advantage of the external entities used in XML. XML
    is a *metalanguage*, meaning it’s used to describe other languages. It was developed
    as a response to the shortcomings of HTML, which can define only how data is *displayed*.
    In contrast, XML defines how data is *structured*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这种漏洞利用了XML中使用的外部实体。XML是一个*元语言*，意味着它用来描述其他语言。它是为了回应HTML的不足而开发的，HTML只能定义数据如何*显示*。相比之下，XML定义了数据如何*结构化*。
- en: For example, HTML can format text as a header using the opening header tag `<h1>`
    and a closing tag `</h1>`. (For some tags, the closing tag is optional.) Each
    tag can have a predefined style that the browser applies to the text on a website
    when it renders it. For example, the `<h1>` tag might format all headers as bold
    with a 14px font size. Similarly, the `<table>` tag presents data in rows and
    columns, and `<p>` tags define how text should look for regular paragraphs.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，HTML可以使用开头标签`<h1>`和闭合标签`</h1>`将文本格式化为标题。（对于某些标签，闭合标签是可选的。）每个标签都有一个预定义的样式，浏览器在渲染网页时会将该样式应用到文本上。例如，`<h1>`标签可能会将所有标题格式化为粗体，字体大小为14px。同样，`<table>`标签将数据以行和列的形式呈现，`<p>`标签定义了常规段落中文本的显示方式。
- en: 'In contrast, XML has no predefined tags. Instead, you define the tags yourself,
    and those definitions won’t necessarily be included in the XML file. For example,
    consider the following XML file, which presents a job listing:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，XML没有预定义的标签。相反，您自己定义标签，而这些定义不一定包含在XML文件中。例如，考虑以下XML文件，它呈现了一个职位列表：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: All the tags are author defined, so it’s impossible to know from the file alone
    how this data would look on a web page.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所有标签都是作者定义的，因此仅凭文件本身无法知道这些数据在网页上的显示方式。
- en: The first line ➊ is a declaration header indicating the XML 1.0 version and
    type of Unicode encoding to be used. After the initial header, the `<Jobs>` tag
    ➋ wraps all other `<Job>` tags ➌. Each `<Job>` tag wraps a `<Title>` ➍, `<Compensation>`
    ➎, and `<Responsibility>` ➏ tag. As in HTML, a basic XML tag is made up of two
    angle brackets surrounding the tag name. But unlike tags in HTML, all XML tags
    require a closing tag. In addition, each XML tag can have an attribute. For example,
    the `<Responsibility>` tag has the name `Responsibility` with an optional attribute
    made up of the attribute name `fundamental` and attribute value `1` ➏.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行➊是一个声明头，指示使用的XML 1.0版本和Unicode编码类型。初始头部之后，`<Jobs>`标签➋将所有其他`<Job>`标签➌包裹起来。每个`<Job>`标签包裹着`<Title>`
    ➍、`<Compensation>` ➎和`<Responsibility>` ➏标签。与HTML一样，基本的XML标签由两个角括号围绕标签名称组成。但与HTML中的标签不同，所有XML标签都需要闭合标签。此外，每个XML标签都可以具有一个属性。例如，`<Responsibility>`标签具有名称`Responsibility`，并且有一个可选属性，由属性名`fundamental`和属性值`1`
    ➏组成。
- en: '***Document Type Definitions***'
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***文档类型定义***'
- en: Because the author can define any tag, a valid XML document must follow a set
    of general XML rules (these are beyond the scope of this book, but having a closing
    tag is one example) and match a *document type definition (DTD)*. An XML DTD is
    a set of declarations that define which elements exist, what attributes they can
    have, and which elements can be enclosed within other elements. (An *element*
    consists of the opening and closing tags, so an opening `<foo>` is a tag and a
    closing `</foo>` is also a tag, but `<foo></foo>` is an element.) XML files can
    either use an external DTD, or they can use an internal DTD that is defined within
    the XML document.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因为作者可以定义任何标签，所以有效的XML文档必须遵循一组通用的XML规则（这些超出了本书的范围，但拥有闭合标签是其中一个例子），并且必须与*文档类型定义（DTD）*匹配。XML
    DTD是一组声明，定义了哪些元素存在、它们可以拥有哪些属性以及哪些元素可以包含在其他元素内。（*元素*由开头和闭合标签组成，因此`<foo>`是标签，`</foo>`也是标签，但`<foo></foo>`是一个元素。）XML文件可以使用外部DTD，或者使用定义在XML文档中的内部DTD。
- en: '**External DTDs**'
  id: totrans-13
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**外部 DTD**'
- en: An external DTD is an external *.dtd* file the XML document references and fetches.
    Here’s what an external DTD file might look like for the jobs XML document shown
    earlier.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 外部 DTD 是 XML 文档引用并获取的外部 *.dtd* 文件。以下是之前展示的工作岗位 XML 文档可能对应的外部 DTD 文件示例。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Each element used in the XML document is defined in the DTD file using the keyword
    `!ELEMENT`. The definition of `Jobs` indicates that it can contain the element
    `Job`. The asterisk denotes that `Jobs` may contain zero or more `Job` elements.
    A `Job` element must contain a `Title`, `Compensation`, and `Responsibility` ➋.
    Each of these is also an element and can contain only HTML-parsable character
    data, denoted by `(#PCDATA)` ➌. The data definition `(#PCDATA)` tells the parser
    what type of characters will be enclosed in each XML tag. Lastly, `Responsibility`
    has an attribute declared using `!ATTLIST` ➍. The attribute is named ➎, and the
    `CDATA` ➏ tells the parser the tag will only contain character data that shouldn’t
    be parsed. The default value of `Responsibility` is defined as `0` ➐.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: XML 文档中使用的每个元素都在 DTD 文件中使用 `!ELEMENT` 关键字进行定义。`Jobs` 的定义表明它可以包含 `Job` 元素。星号表示
    `Jobs` 可以包含零个或多个 `Job` 元素。`Job` 元素必须包含 `Title`、`Compensation` 和 `Responsibility`
    ➋。这些也是元素，并且只能包含可由 HTML 解析的字符数据，用 `(#PCDATA)` 表示 ➌。数据定义 `(#PCDATA)` 告诉解析器每个 XML
    标签内将包含什么类型的字符。最后，`Responsibility` 有一个通过 `!ATTLIST` 声明的属性 ➍。该属性名为 ➎，`CDATA` ➏ 告诉解析器该标签仅包含不应解析的字符数据。`Responsibility`
    的默认值被定义为 `0` ➐。
- en: 'External DTD files are defined in the XML document using the `<!DOCTYPE>` element:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 外部 DTD 文件在 XML 文档中使用 `<!DOCTYPE>` 元素进行定义：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this case, we define a `<!DOCTYPE>` with the XML entity `note` ➊. XML entities
    are explained in the next section. But for now, just know that `SYSTEM` ➋ is a
    keyword that tells the XML parser to get the results of the *jobs.dtd* file ➌
    and use that wherever `note` ➊ is subsequently used in the XML.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们定义了一个带有 XML 实体 `note` ➊ 的 `<!DOCTYPE>`。XML 实体将在下一节中讲解。但目前，你只需要知道 `SYSTEM`
    ➋ 是一个关键字，它告诉 XML 解析器获取 *jobs.dtd* 文件 ➌ 的结果，并在 XML 中后续使用 `note` ➊ 时使用该结果。
- en: '**Internal DTDs**'
  id: totrans-20
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**内部 DTD**'
- en: 'It’s also possible to include the DTD within the XML document. To do so, the
    first line of the XML must also be a `<!DOCTYPE>` element. By using an internal
    DTD to combine the XML file and DTD, we’d get a document that looks like the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以将 DTD 包含在 XML 文档内。为此，XML 的第一行也必须是 `<!DOCTYPE>` 元素。通过使用内部 DTD 将 XML 文件与 DTD
    结合，我们将得到一个如下所示的文档：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we have what’s referred to as an *internal DTD declaration*. Notice that
    we still begin with a declaration header, indicating our document conforms to
    XML 1.0 with UTF-8 encoding ➊. Immediately after, we define our `!DOCTYPE` for
    the XML to follow, this time by just writing out the entire DTD instead of a reference
    to an external file ➋. The rest of the XML document follows the DTD declaration
    ➌.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们有一个所谓的 *内部 DTD 声明*。注意，我们仍然以声明头开始，表示我们的文档符合 XML 1.0，并采用 UTF-8 编码 ➊。紧接着，我们定义了
    XML 将遵循的 `!DOCTYPE`，这次是通过直接写出整个 DTD，而不是引用外部文件 ➋。其余的 XML 文档跟随 DTD 声明 ➌。
- en: '***XML Entities***'
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***XML 实体***'
- en: 'XML documents contain *XML entities*, which are like placeholders for information.
    Using our `<Jobs>` example again, if we wanted every job to include a link to
    our website, it would be tedious for us to write the address every time, especially
    if our URL could change. Instead, we can use an entity, have the parser fetch
    the URL at the time of parsing, and insert the value into the document. To create
    one, you declare a placeholder entity name in an `!ENTITY` tag along with the
    information to put in that placeholder. In the XML document, the entity name is
    prefixed with an ampersand (`&`) and ends with a semicolon (`;`). When the XML
    document is accessed, the placeholder name is substituted with the value declared
    in the tag. Entity names can do more than just replace placeholders with strings:
    they can also fetch the contents of a website or file using the `SYSTEM` tag along
    with a URL.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: XML 文档包含 *XML 实体*，它们类似于信息的占位符。再次使用我们之前的 `<Jobs>` 示例，如果我们希望每个职位都包含指向我们网站的链接，反复写地址会很麻烦，尤其是如果我们的
    URL 可能会更改时。相反，我们可以使用实体，让解析器在解析时获取 URL 并将其插入到文档中。要创建一个实体，你需要在 `!ENTITY` 标签中声明一个占位符实体名称以及要放入该占位符的信息。在
    XML 文档中，实体名称以一个与号（`&`）开头，并以分号（`;`）结尾。当访问 XML 文档时，占位符名称会被标签中声明的值替换。实体名称不仅可以用来替换占位符字符串，它们还可以使用
    `SYSTEM` 标签与 URL 一起获取网站或文件的内容。
- en: 'We can update our XML file to include this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以更新我们的 XML 文件以包含这一内容：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice that I’ve added a `Website !ELEMENT`, but instead of `(#PCDATA)`, I’ve
    used `ANY` ➊. This data definition means the `Website` tag can contain any combination
    of parsable data. I’ve also defined an `!ENTITY` with a `SYSTEM` attribute, telling
    the parser to get the contents of the *website.txt* file wherever the placeholder
    name `url` is inside a `website` tag ➋. At ➌ I use the `website` tag, and the
    contents of *website.txt* would be fetched in the place of `&url;`. Note the `&`
    in front of the entity name. Whenever you reference an entity in an XML document,
    you must precede it with `&`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我添加了一个`Website !ELEMENT`，但不是使用`(#PCDATA)`，而是使用了`ANY` ➊。这个数据定义意味着`Website`标签可以包含任何可解析数据的组合。我还定义了一个带有`SYSTEM`属性的`!ENTITY`，告诉解析器在`website`标签中的`url`占位符名称处获取*website.txt*文件的内容
    ➋。在 ➌ 我使用`website`标签，并且会在`&url;`的位置获取*website.txt*的内容。注意实体名称前面的`&`符号。每当你在XML文档中引用一个实体时，必须在其前面加上`&`。
- en: '**How XXE Attacks Work**'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**XXE攻击是如何工作的**'
- en: In an XXE attack, an attacker abuses a target application so that it includes
    external entities in its XML parsing. In other words, the application expects
    some XML but isn’t validating what it’s receiving; it just parses anything it
    gets. For instance, let’s say the job board in the previous example lets you register
    and upload jobs via XML.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在XXE攻击中，攻击者滥用目标应用程序，使其在解析XML时包含外部实体。换句话说，应用程序期望接收一些XML数据，但并没有验证其接收到的内容；它只是解析任何它收到的东西。例如，假设前面提到的招聘板允许你通过XML注册并上传职位信息。
- en: The job board might make its DTD file available to you and assume that you’ll
    submit a file matching the requirements. Instead of having the `!ENTITY` retrieve
    the contents of `"website.txt"`, you could have it retrieve the contents of `"/etc/passwd"`.
    The XML would be parsed, and the contents of the server file */etc/passwd* would
    be included in our content. (The */etc/passwd* file originally stored all usernames
    and passwords on a Linux system. Although Linux systems now store passwords in
    */etc/shadow*, it’s still common to read the */etc/passwd* file to prove that
    a vulnerability exists.)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 招聘板可能会向你提供其DTD文件，并假设你会提交一个符合要求的文件。你可以让`!ENTITY`去获取`"website.txt"`的内容，而不是获取`"/etc/passwd"`的内容。XML将被解析，服务器文件*/etc/passwd*的内容将被包含在我们的内容中。（*/etc/passwd*
    文件最初存储了Linux系统上的所有用户名和密码，虽然Linux系统现在将密码存储在*/etc/shadow*中，但仍然通常会读取*/etc/passwd*文件来证明漏洞的存在。）
- en: 'You might submit something like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会提交类似这样的内容：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The parser receives this code and recognizes an internal DTD defining a `foo`
    document type ➊. The DTD tells the parser that `foo` can include any parsable
    data ➋; then there’s an entity `xxe` that should read my */etc/passwd* file (*file://*
    denotes a full URI path to the */etc/passwd* file) when the document is parsed.
    The parser should replace `&xxe;` elements with those file contents ➌. Then, you
    finish it off with XML defining a `<foo>` tag that contains `&xxe;`, which prints
    my server info ➍. And that, friends, is why XXE is so dangerous.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 解析器接收到这段代码并识别出一个定义了`foo`文档类型的内部DTD ➊。DTD告诉解析器，`foo`可以包含任何可解析的数据 ➋；然后有一个实体`xxe`，当文档被解析时，它应该读取我的
    */etc/passwd* 文件（*file://*表示指向*/etc/passwd*文件的完整URI路径）。解析器应该用这些文件内容替换`&xxe;`元素
    ➌。然后，你使用XML定义了一个包含`&xxe;`的`<foo>`标签，这将打印出我的服务器信息 ➍。这就是为什么XXE如此危险的原因。
- en: 'But wait, there’s more. What if the application didn’t print a response and
    only parsed my content? If the contents of the sensitive file were never returned
    to me, would the vulnerability still be useful? Well, instead of parsing a local
    file, you could contact a malicious server like so:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，等等，还有更多。如果应用程序没有打印响应，只是解析我的内容呢？如果敏感文件的内容从未返回给我，这个漏洞是否仍然有用？好吧，如果不是解析本地文件，你可以像这样联系一个恶意服务器：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now when the XML document is parsed, the `callhome` entity ➋ is replaced by
    the contents of a call to *www.<malicious>.com/?%xxe* ➌. But ➌ requires that `%xxe`
    be evaluated as defined in ➊. The XML parser reads */etc/passwd* and appends that
    as the parameter to the URL *www.<malicous>.com/*, thereby sending the file contents
    as a URL parameter ➌. Because you control that server, you would check your log,
    and sure enough, it would have the contents of */etc/passwd*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当XML文档被解析时，`callhome`实体 ➋ 会被替换为调用 *www.<恶意>.com/?%xxe* ➌ 的内容。但是 ➌ 需要对`%xxe`进行如
    ➊ 所定义的评估。XML解析器读取 */etc/passwd* 并将其作为参数附加到网址 *www.<恶意>.com/*，从而将文件内容作为URL参数 ➌
    发送。因为你控制了那个服务器，你会查看日志，果然，它会包含 */etc/passwd* 的内容。
- en: You might have noticed the use of `%` instead of `&` in the `callhome` URL,
    `%xxe;` ➊. A `%` is used when the entity should be evaluated within the DTD definition.
    A `&` is used when the entity is evaluated in the XML document.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，在`callhome`的URL中使用了`%`而不是`&`，`%xxe;` ➊。当实体应该在DTD定义中进行评估时，使用`%`；当实体在XML文档中评估时，使用`&`。
- en: Sites protect against XXE vulnerabilities by disabling external entities from
    being parsed. The OWASP XML External Entity Prevention Cheat Sheet (see *[https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet)*)
    has instructions on how to do this for a variety of languages.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 网站通过禁用外部实体解析来防止XXE漏洞。OWASP XML外部实体防护备忘单（参见 *[https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet)*)
    提供了如何为多种语言执行此操作的说明。
- en: '**Read Access to Google**'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Google读取访问**'
- en: '**Difficulty:** Medium'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 中'
- en: '**URL:** *https://google.com/gadgets/directory?synd=toolbar/*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**网址：** *https://google.com/gadgets/directory?synd=toolbar/*'
- en: '**Source:** *[https://blog.detectify.com/2014/04/11/how-we-got-read-access-on-googles-production-servers/](https://blog.detectify.com/2014/04/11/how-we-got-read-access-on-googles-production-servers/)*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://blog.detectify.com/2014/04/11/how-we-got-read-access-on-googles-production-servers/](https://blog.detectify.com/2014/04/11/how-we-got-read-access-on-googles-production-servers/)*'
- en: '**Date reported:** April 2014'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2014年4月'
- en: '**Bounty paid:** $10,000'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖励金额：** $10,000'
- en: This Google read access vulnerability exploited a feature of Google’s Toolbar
    button gallery that allowed developers to define their own buttons by uploading
    XML files containing metadata. Developers could search the buttons gallery, and
    Google would show a description of the button in the search results.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Google读取访问漏洞利用了Google工具栏按钮图库的一个特性，该特性允许开发者通过上传包含元数据的XML文件来定义自己的按钮。开发者可以搜索按钮图库，Google会在搜索结果中显示按钮的描述。
- en: According to the Detectify team, when an XML file that referenced an entity
    to an external file was uploaded to the gallery, Google parsed the file and then
    rendered the contents in the button search results.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Detectify团队的说法，当上传一个引用外部文件实体的XML文件到图库时，Google会解析该文件并在按钮搜索结果中渲染内容。
- en: As a result, the team used the XXE vulnerability to render the contents of the
    server’s */etc/passwd* file. At a minimum, this demonstrated that malicious users
    could exploit the XXE vulnerability to read internal files.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，团队利用XXE漏洞渲染了服务器的*/etc/passwd*文件内容。至少，这证明恶意用户可以利用XXE漏洞读取内部文件。
- en: '***Takeaways***'
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***要点***'
- en: Even big companies can make mistakes. Whenever a site accepts XML, no matter
    who owns the site, always test for XXE vulnerabilities. Reading an */etc/passwd*
    file is a good way to demonstrate a vulnerability’s impact on companies.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是大公司也会犯错。无论谁拥有网站，只要网站接受XML，始终需要测试XXE漏洞。读取*/etc/passwd*文件是展示漏洞对公司影响的一个好方法。
- en: '**Facebook XXE with Microsoft Word**'
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Facebook XXE与Microsoft Word**'
- en: '**Difficulty:** Hard'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 难'
- en: '**URL:** *[https://facebook.com/careers/](https://facebook.com/careers/)*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**网址：** *[https://facebook.com/careers/](https://facebook.com/careers/)*'
- en: '**Source:** Attack Secure Blog'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** 攻击安全博客'
- en: '**Date reported:** April 2014'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2014年4月'
- en: '**Bounty paid:** $6,300'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖励金额：** $6,300'
- en: This Facebook XXE is a little more challenging than the previous example because
    it involves remotely calling a server. In late 2013, Facebook patched an XXE vulnerability
    discovered by Reginaldo Silva. Silva immediately reported the XXE to Facebook
    and asked for permission to escalate it to a remote code execution (a type of
    vulnerability covered in [Chapter 12](ch12.xhtml#ch12)). He believed a remote
    code execution was possible because he could read most files on the server and
    open arbitrary network connections. Facebook investigated and agreed, paying him
    $30,000.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Facebook XXE漏洞比之前的示例更具挑战性，因为它涉及远程调用服务器。在2013年底，Facebook修补了Reginaldo Silva发现的XXE漏洞。Silva立即向Facebook报告了该漏洞，并请求允许将其升级为远程代码执行（这类漏洞在[第12章](ch12.xhtml#ch12)中介绍）。他认为远程代码执行是可能的，因为他可以读取服务器上的大多数文件，并打开任意的网络连接。Facebook进行了调查并同意，支付了他$30,000。
- en: 'As a result, Mohamed Ramadan challenged himself to hack Facebook in April 2014\.
    He didn’t think another XXE was a possibility until he found Facebook’s careers
    page, which allowed users to upload *.docx* files. The *.docx* file type is just
    an archive for XML files. Ramadan created a *.docx* file, opened it with 7-Zip
    to extract its contents, and inserted the following payload into one of the XML
    files:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，Mohamed Ramadan 在 2014 年 4 月挑战自己入侵 Facebook。他原本没想到另一个 XXE 漏洞的可能性，直到他发现 Facebook
    的招聘页面，允许用户上传 *.docx* 文件。*.docx* 文件类型只是 XML 文件的一个归档。Ramadan 创建了一个 *.docx* 文件，用
    7-Zip 打开提取其内容，并将以下负载插入其中的一个 XML 文件：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If the target has external entities enabled, the XML parser will evaluate the
    `%dtd;` ➌ entity, which makes a remote call to Ramadan’s server *http://197.37.102.90/ext.dtd*
    ➋. That call would return the following, which is the contents of the *ext.dtd*
    file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果目标启用了外部实体，XML 解析器将评估 `%dtd;` ➌ 实体，它会发起到 Ramadan 服务器 *http://197.37.102.90/ext.dtd*
    ➋ 的远程调用。该调用将返回以下内容，即 *ext.dtd* 文件的内容：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: First, `%dtd;` would reference the external *ext.dtd* file and make the `%send;`
    entity available ➎. Next, the parser would parse `%send;` ➍, which would make
    a remote call to `http://197.37.102.90/FACEBOOK-HACKED?%file;` ➎. The `%file;`
    references the */etc/passwd* file ➊, so its contents would replace `%file;` in
    the HTTP request ➎.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`%dtd;` 将引用外部的 *ext.dtd* 文件，并使 `%send;` 实体可用 ➎。接着，解析器将解析 `%send;` ➍，这将发起对
    `http://197.37.102.90/FACEBOOK-HACKED?%file;` ➎ 的远程调用。`%file;` 引用了 */etc/passwd*
    文件 ➊，因此它的内容将替换 HTTP 请求中的 `%file;` ➎。
- en: Calling a remote IP to exploit an XXE isn’t always necessary, although it can
    be useful when sites parse remote DTD files but block access to reading local
    files. This is similar to a server-side request forgery (SSRF), which was discussed
    in [Chapter 10](ch10.xhtml#ch10). With an SSRF, if a site blocks access to internal
    addresses but allows calls to external sites and follows 301 redirects to internal
    addresses, you can achieve a similar result.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 调用远程 IP 来利用 XXE 并不总是必要的，尽管它在站点解析远程 DTD 文件时很有用，但又阻止访问本地文件的读取。这类似于服务器端请求伪造（SSRF），如在
    [第 10 章](ch10.xhtml#ch10) 中讨论的那样。通过 SSRF，如果站点阻止访问内部地址，但允许调用外部站点并遵循 301 重定向到内部地址，你可以实现类似的结果。
- en: 'Next, Ramadan started a local HTTP server on his server to receive the call
    and content using Python and SimpleHTTPServer:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，Ramadan 在他的服务器上启动了一个本地 HTTP 服务器，用 Python 和 SimpleHTTPServer 接收调用和内容：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: At ➊ is the command to start Python SimpleHTTPServer, which returns the message
    `"Serving HTTP on 0.0.0.0 port 80..."` at ➋. The terminal waits until it receives
    an HTTP request to the server. At first, Ramadan didn’t receive a response, but
    he waited until he finally got a remote call at ➌ to retrieve the */ext.dtd* file.
    As expected, he then saw the call back to the server */FACEBOOK-HACKED?* ➍, but
    unfortunately without the contents of the */etc/passwd* file appended. This meant
    that either Ramadan couldn’t read local files using the vulnerability or that
    */etc/passwd* didn’t exist.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处是启动 Python SimpleHTTPServer 的命令，它在 ➋ 处返回消息 `"Serving HTTP on 0.0.0.0 port
    80..."`。终端等待，直到接收到对服务器的 HTTP 请求。起初，Ramadan 没有收到响应，但他等待直到最终在 ➌ 收到远程调用以检索 */ext.dtd*
    文件。如预期，他随后看到回调到服务器的 */FACEBOOK-HACKED?* ➍，但遗憾的是没有附加 */etc/passwd* 文件的内容。这意味着要么
    Ramadan 无法通过这个漏洞读取本地文件，要么 */etc/passwd* 文件不存在。
- en: Before I continue with this report, I should add that Ramadan could have submitted
    a file that didn’t make a remote call to his server and instead could have just
    attempted to read the local file. But the initial call for the remote DTD file
    demonstrates an XXE vulnerability if successful, whereas a failed attempt at reading
    a local file doesn’t. In this case, because Ramadan recorded HTTP calls to his
    server from Facebook, he could prove Facebook was parsing remote XML entities
    and that a vulnerability existed even though he couldn’t access */etc/passwd*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续这个报告之前，我应该补充一点，Ramadan 本可以提交一个不向他的服务器发起远程调用的文件，而是直接尝试读取本地文件。但初步的远程 DTD 文件调用证明了
    XXE 漏洞的存在（如果成功），而失败的本地文件读取尝试并不能证明这一点。在这种情况下，由于 Ramadan 记录了 Facebook 向其服务器发出的 HTTP
    调用，他可以证明 Facebook 正在解析远程 XML 实体，且即使他无法访问 */etc/passwd*，仍然存在漏洞。
- en: When Ramadan reported the bug, Facebook replied asking for a proof of concept
    video because they couldn’t replicate the upload. After Ramadan supplied a video,
    Facebook then rejected the submission and suggested that a recruiter had clicked
    a link, which initiated the request to his server. After exchanging a few emails,
    the Facebook team did some more digging to confirm the vulnerability existed and
    awarded a bounty. Unlike the initial XXE in 2013, the impact of Ramadan’s XXE
    couldn’t have been escalated to a remote code execution, so Facebook awarded a
    smaller bounty.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Ramadan 报告漏洞时，Facebook 回复要求提供概念验证视频，因为他们无法重现上传过程。之后，在 Ramadan 提供视频后，Facebook
    否认了提交的有效性，并表示是某个招聘人员点击了链接，从而发起了请求到他的服务器。经过几封邮件交流后，Facebook 团队继续深入调查，确认漏洞存在并奖励了奖金。与
    2013 年初的 XXE 漏洞不同，Ramadan 的 XXE 漏洞无法升级为远程代码执行，因此 Facebook 奖励了较小的奖金。
- en: '***Takeaways***'
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***要点***'
- en: 'There are a couple of takeaways here. XML files come in different shapes and
    sizes: keep an eye out for sites that accept *.docx*, *.xlsx*, *.pptx*, and other
    XML file types because there might be custom applications parsing the file’s XML.
    At first, Facebook thought an employee clicked a malicious link that connected
    to Ramadan’s server, which wouldn’t be considered an SSRF. But upon further investigation,
    Facebook confirmed the request was invoked through a different method.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几点要注意的内容。XML 文件有不同的格式和大小：留意接受 *.docx*、*.xlsx*、*.pptx* 和其他 XML 文件类型的网站，因为可能有自定义应用程序在解析文件的
    XML。最初，Facebook 认为是某个员工点击了一个恶意链接，连接到了 Ramadan 的服务器，这本不算 SSRF。但经过进一步调查，Facebook
    确认请求是通过另一种方式发起的。
- en: As you’ve seen in other examples, sometimes reports are initially rejected.
    It’s important to have confidence and to continue working with the company you’re
    reporting to if you’re certain the vulnerability is valid. Don’t shy away from
    explaining why something might be a vulnerability or more severe than the company’s
    initial assessment.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在其他案例中看到的，有时报告最初会被拒绝。如果你确定漏洞是有效的，那么继续与你报告的公司合作是很重要的，不要放弃解释为什么某个问题可能是漏洞，或者为什么它可能比公司最初评估的更加严重。
- en: '**Wikiloc XXE**'
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Wikiloc XXE**'
- en: '**Difficulty:** Hard'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 困难'
- en: '**URL:** *[https://wikiloc.com/](https://wikiloc.com/)*'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**网址：** *[https://wikiloc.com/](https://wikiloc.com/)*'
- en: '**Source:** *[https://www.davidsopas.com/wikiloc-xxe-vulnerability/](https://www.davidsopas.com/wikiloc-xxe-vulnerability/)*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://www.davidsopas.com/wikiloc-xxe-vulnerability/](https://www.davidsopas.com/wikiloc-xxe-vulnerability/)*'
- en: '**Date reported:** October 2015'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2015年10月'
- en: '**Bounty paid:** Swag'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖励支付：** 礼品'
- en: Wikiloc is a website for discovering and sharing the best outdoor trails for
    hiking, cycling, and many other activities. It also lets users upload their own
    tracks via XML files, which turns out to be very enticing for cyclist hackers
    like David Sopas.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Wikiloc 是一个发现和分享最佳户外徒步、骑行及其他活动路径的网站。它还允许用户通过 XML 文件上传自己的轨迹，这对于像 David Sopas
    这样的骑行黑客来说非常有吸引力。
- en: 'Sopas registered for Wikiloc and, after noticing the XML upload, decided to
    test it for an XXE vulnerability. To start, he downloaded a file from the site
    to determine Wikiloc’s XML structure, which in this case was a *.gpx* file. He
    then modified the file and uploaded it. This is the file with his modifications:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Sopas 注册了 Wikiloc，并在注意到 XML 上传功能后，决定测试其是否存在 XXE 漏洞。首先，他从网站下载了一个文件，以确定 Wikiloc
    的 XML 结构，在这个案例中是一个 *.gpx* 文件。然后他修改了文件并上传。这是他修改后的文件：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: At ➊, he added an external entity definition as the first line of the file.
    At ➋, he called the entity from within the track name in the *.gpx* file.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊，他在文件的第一行添加了一个外部实体定义。在 ➋，他在 *.gpx* 文件中的轨迹名称内调用了该实体。
- en: Uploading the file back to Wikiloc resulted in an `HTTP GET` request to Sopas’s
    server. This is notable for two reasons. First, by using a simple proof of concept
    call, Sopas was able to confirm that the server was evaluating his injected XML
    and the server would make external calls. Second, Sopas used the existing XML
    document so his content fit within the structure the site was expecting.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件上传回 Wikiloc 导致向 Sopas 的服务器发出了一个 `HTTP GET` 请求。这个事件有两个值得注意的原因。首先，通过使用一个简单的概念验证调用，Sopas
    能够确认服务器正在评估他注入的 XML，并且服务器会进行外部调用。其次，Sopas 使用了现有的 XML 文档，因此他的内容符合该网站预期的结构。
- en: 'After Sopas had confirmed that Wikiloc would make external HTTP requests, the
    only other question was whether it would read local files. So, he modified his
    injected XML to have Wikiloc send him its */etc/issue* file contents (the */etc/issue*
    file will will return the operating system used):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在Sopas确认Wikiloc会进行外部HTTP请求之后，唯一的另一个问题就是它是否会读取本地文件。因此，他修改了自己注入的XML，使Wikiloc将其*/etc/issue*文件的内容发送给他（*/etc/issue*文件会返回所使用的操作系统）：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This code should look familiar. Here he has used two entities at ➊ and ➋, which
    are defined using `%` because they’ll be evaluated in the DTD. At ➌, he retrieves
    the *xxe.dtd* file. The reference to `&send;` ➍ in the tag gets defined by the
    returned *xxe.dtd* file he serves back to Wikiloc from the remote call to his
    server ➋. Here’s the *xxe.dtd* file:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码应该很熟悉。在这里，他使用了位于➊和➋的两个实体，这些实体是通过`%`定义的，因为它们将在DTD中被评估。在➌位置，他检索到*xxe.dtd*文件。标签中对`&send;`
    ➍的引用由返回的*xxe.dtd*文件定义，该文件通过远程调用返回给Wikiloc ➋。以下是*xxe.dtd*文件：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `% all` ➎ defines the entity `send` at ➍. Sopas’s execution is similar
    to Ramadan’s approach to Facebook but with a subtle difference: Sopas attempted
    to ensure that all places the XXE could be executed were included. That is why
    he calls `%dtd;` ➌ right after defining it in the internal DTD and `%all;` ➏ immediately
    after defining it in the external DTD. The executed code is on the backend of
    the site, so you likely won’t know exactly how the vulnerability was executed.
    But here’s what the parsing process could have looked like:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`%all` ➎在位置➍定义了实体`send`。Sopas的执行方式类似于Ramadan对Facebook的做法，但有一个微妙的区别：Sopas试图确保所有可能执行XXE的地方都被包括在内。这就是为什么他在内部DTD中定义`%dtd;`
    ➌后立即调用它，并且在外部DTD中定义`%all;` ➏后立即调用它。执行的代码位于网站的后端，因此你可能无法确切知道漏洞是如何被执行的。但以下是解析过程的可能样子：'
- en: Wikiloc parses the XML and evaluates `%dtd;` as an external call to Sopas’s
    server. Then Wikiloc requests the *xxe.dtd* file on Sopas’s server.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Wikiloc解析XML并评估`%dtd;`，作为对Sopas服务器的外部调用。然后Wikiloc请求Sopas服务器上的*xxe.dtd*文件。
- en: Sopas’s server returns the *xxe.dtd* file to Wikiloc.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Sopas的服务器将*xxe.dtd*文件返回给Wikiloc。
- en: Wikiloc parses the received DTD file, which triggers the call to `%all`.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Wikiloc解析收到的DTD文件，这触发了对`%all`的调用。
- en: When `%all` is evaluated, it defines `&send;`, which includes a call on the
    entity `%file`.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当`%all`被评估时，它定义了`&send;`，其中包括对实体`%file`的调用。
- en: The `%file;` call in the URL value is replaced with the contents of the */etc/issue*
    file.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: URL值中的`%file;`调用被替换为*/etc/issue*文件的内容。
- en: Wikiloc parses the XML document. This parses the `&send;` entity, which evaluates
    to a remote call to Sopas’s server with the contents of the */etc/issue* file
    as a parameter in the URL.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Wikiloc解析XML文档。这会解析`&send;`实体，该实体将被评估为对Sopas服务器的远程调用，URL中的参数为*/etc/issue*文件的内容。
- en: In his own words, game over.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 用他自己的话说，游戏结束。
- en: '***Takeaways***'
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***要点***'
- en: This is a great example of how you can use a site’s XML templates to embed your
    own XML entities so the file is parsed by the target. In this case, Wikiloc was
    expecting a *.gpx* file and Sopas kept that structure, inserting his own XML entities
    within expected tags. Additionally, it’s interesting to see how you can serve
    a malicious DTD file back to have a target make `GET` requests to your server
    with file contents as URL parameters. This is an easy way to facilitate data extraction
    because the `GET` parameters will be logged on your server.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的例子，展示了你如何利用网站的XML模板嵌入自己的XML实体，以便文件被目标解析。在这个例子中，Wikiloc预期接收的是一个*.gpx*文件，而Sopas保留了该结构，在预期的标签内插入了自己的XML实体。此外，值得注意的是，你如何将恶意的DTD文件返回，以便目标对你的服务器发出`GET`请求，将文件内容作为URL参数传递。这是一个简便的数据提取方式，因为`GET`参数会在你的服务器上被记录。
- en: '**Summary**'
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: 'An XXE represents an attack vector with huge potential. You can accomplish
    an XXE attack in a few ways: getting a vulnerable application to print its */etc/passwd*
    file, calling to a remote server using the */etc/passwd* file’s contents, and
    calling for a remote DTD file that instructs the parser to callback to a server
    with the */etc/passwd* file.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: XXE代表了一个巨大的攻击向量。你可以通过几种方式完成XXE攻击：让易受攻击的应用程序打印其*/etc/passwd*文件，使用*/etc/passwd*文件的内容调用远程服务器，或者请求一个远程DTD文件，指示解析器回调到一个服务器并带有*/etc/passwd*文件。
- en: Keep an eye out for file uploads, especially those that take some form of XML.
    You should always test them for XXE vulnerabilities.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 留意文件上传，尤其是那些包含某种形式XML的文件。你应该始终测试它们是否存在XXE漏洞。
