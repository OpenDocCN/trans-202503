- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hacking Mobile Devices
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: In this chapter, we’ll explore the world of mobile device hacking. You’ll build
    a virtual machine using the world’s most popular mobile operating system, Android.
    Then you’ll hack into your virtual mobile device with Metasploit and take control
    of it remotely using Meterpreter, much like you hacked a PC in Chapter 6\. You’ll
    also learn several ways to protect yourself and your family and friends from the
    growing number of mobile attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Android Phone/Tablet VM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want to hack an Android mobile device in a safe, ethical way, so we’ll begin
    by adding an Android VM in our virtual hacking lab. Follow these steps to download
    and configure the VM.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://www.osboxes.org/android-x86/](https://www.osboxes.org/android-x86/)and
    scroll down to the Android-x86 8.1-RC1 Oreo section. Select the **VirtualBox**
    tab and click the **Download** button for the 64-bit version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your download should have a *.7z* file extension. To unzip the file, you’ll
    need to download and install 7-Zip for Windows, Archiver for Mac, or p7zip-full
    for Linux. Once you have the required software, unzip the Android VM: on Windows,
    right-click the file and select **7-Zip**▶**Extract Here**; on macOS or Linux,
    double-click the file. The VM will be extracted into a folder called *64bit*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open VirtualBox and click **New** to open the Create Virtual Machine window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Name and operating system dialog, enter **Android 8.1** or similar in
    the Name: text box, select **Linux** from the Type: drop-down list, and choose
    **Other Linux (64-bit)** from the Version: drop-down list. Then click **Next**
    on Windows or **Continue** (on macOS).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Memory size dialog, enter **2048** in the box to give the VM 2,048MB
    (2GB) of RAM and click through to the next screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Hard disk dialog, choose **Use an existing virtual hard disk file** and
    click the Browse icon (the folder with a green arrow). In the pop-up window that
    appears, click **Add**. Then find and select the *.vdi* file inside the *64bit*
    folder you unzipped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click through to return to the Hard disk dialog and choose **Create** to create
    your VM. Your new Android 8.1 VM should now appear in the list of VMs in VirtualBox,
    as shown in [Figure 9-1](#figure9-1).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Android VM in the list, go to **Settings**, and choose the **Display**
    tab. In the Graphics Controller: drop-down list, select **VBoxSVGA**. This changes
    the display settings so that we’ll be able to see the graphical user interface
    (GUI) version of our Android smartphone VM.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Still in the Display tab, make sure the checkbox beside **Enable 3D Acceleration**
    is unchecked. (If your VM doesn’t work in a moment, however, you might have to
    turn on 3D acceleration.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to the **Network** settings tab and choose the NAT network named **PublicNAT**.
    This will enable your Android VM to communicate with your Kali VM in your virtual
    hacking lab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![f09001](image_fi/502000c09/f09001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-1: We’ve added an Android 8.1 VM to VirtualBox!'
  prefs: []
  type: TYPE_NORMAL
- en: You’re now ready to fire up your Android VM! It may take a few moments to load
    the first time (and you may need to restart your VM if the screen stays black
    for more than a minute or so), but you’ll eventually see an Android device home
    screen like the one shown in [Figure 9-2](#figure9-2).
  prefs: []
  type: TYPE_NORMAL
- en: '![f09002](image_fi/502000c09/f09002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-2: The home screen on your virtual Android device'
  prefs: []
  type: TYPE_NORMAL
- en: Before you start exploring the VM, go to **Input**▶**Mouse Integration** in
    the Android VM’s menu bar to deselect Mouse Integration. Leaving Mouse Integration
    on can make it difficult to control the pointer on the Android VM. (The Android
    VM is made for touch screens, so the mouse can be frustrating to use in Android
    anyway.) With that done, you’re ready to look around your virtual Android device.
  prefs: []
  type: TYPE_NORMAL
- en: Open the Chrome browser and browse to a web page or open the Contacts app and
    add a few contacts—do anything you want to try. The Android VM is almost identical
    to a real Android tablet or phone, except that it can’t make phone calls and it
    doesn’t have certain sensors like GPS for location services. Remember that you
    can use the right CTRL key (Windows) or left COMMAND key (Mac) to regain control
    of your mouse when you want to leave the Android VM, just as we’ve done with other
    VMs.
  prefs: []
  type: TYPE_NORMAL
- en: Launching an Android Trojan
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we’re ready to create some malware. Just as we did with your Windows VM
    in Chapter 6, we’ll use a Meterpreter trojan to infect and take over the Android
    VM. We’ll hide the trojan in a file called *CoolGame.apk*. Android uses the *APK
    file format* to distribute and install mobile apps. Following these steps, you’ll
    see how easy it is for an attacker to trick an Android user into installing and
    running an infected app.
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your Kali VM and launch Metasploit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the Metasploit `msf6` command prompt, type the following command as one
    long line, substituting your Kali VM’s IP address after `LHOST=`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This creates an `android/meterpreter/reverse_tcp` payload in the form of an
    APK file and saves it directly to Kali’s shared web folder. Metasploit will respond
    with a few lines of output, ending with something like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Turn on the Apache web server service so you can download the file from your
    Android VM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To verify that your Kali web server is active, open Firefox and go to *localhost/share*.
    You should see *CoolGame.apk* in the file listing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter these four commands in the Metasploit terminal window to set up the listener
    for handling incoming Meterpreter connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Metasploit is now listening for incoming connections!
  prefs: []
  type: TYPE_NORMAL
- en: Infecting the Android VM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we’ll download the trojan app and deliberately infect your virtual Android
    device. Switch back to your Android VM and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Chrome browser and enter your Kali VM’s IP address in the address bar,
    followed by `/share/`, like `10.0.9.4``/share/`, as shown in [Figure 9-3](#figure9-3).![f09003](image_fi/502000c09/f09003.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 9-3: Navigate to your Kali VM’s *share* folder from your Android VM’s
    Chrome browser to find your *CoolGame.apk* trojan app ready to download and install.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the APK file to download it. Android will pop up a message the first time
    you try to download a file, asking you to give Chrome permission to access file
    storage on your device. Click **Update Permissions**, then **Allow**.![g09001](image_fi/502000c09/g09001.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click your APK file again to download it. Chrome will usually show you the warning
    “This type of file can harm your device.” Click **OK** to download the file anyway.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the down arrow in the upper-left corner of your Android VM’s screen, and
    you’ll see the Download Manager as shown in [Figure 9-5](#figure9-5). Click the
    name of your APK file in the list to install the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Android will pop up yet another window telling you “your phone is not allowed
    to install unknown apps from this source.” Click **Settings**, then slide the
    toggle switch to turn on the **Allow from this source** setting.![f09005](image_fi/502000c09/f09005.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 9-5: Accessing the Download Manager'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the back button (left arrow) in the black band at the bottom of your
    Android screen, and you’ll see a list of permissions the Meterpreter trojan app,
    called MainActivity, is requesting: settings, pictures, videos, contacts, GPS,
    mic, call logs, text messages, SD card access . . . virtually every permission
    your smartphone can allow! Click **Next** at the bottom right of the permission
    window and then click **Install**. If you get a Google Play Protect warning, click
    **Install Anyway**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the home button (the circle in the middle) at the bottom of your Android
    VM’s screen. Then click and drag the screen up to reveal your installed apps.
    Click the MainActivity icon to start the trojan app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch back to your Kali VM, and you’ll see a new session has opened in Meterpreter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our trojan on the Android device has called home to Kali and is waiting for
    commands. Let’s see what we can do once we take control.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the Android VM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The threat from malicious mobile apps is just as real as the threat of malware
    on PCs. If you install malware on your smartphone, an attacker will have access
    to *a lot* of sensitive information: every picture and video you’ve ever taken,
    all your contacts, your call and text message history, your GPS location history,
    every web search you’ve done and YouTube video you’ve watched, and a portable
    camera and microphone an attacker could use to spy on you at any time—that’s what
    you carry with you everywhere you go.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To see exactly how much a malicious hacker can do with an app like the Meterpreter
    trojan, enter `help` in the Meterpreter terminal window. You’ll see a list of
    all available Meterpreter commands. In addition to those we saw in Chapter 6 when
    we hacked a Windows PC, there are two sections of commands just for Android devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The first thing we’ll do to take control of the Android device is prevent it
    from going to sleep. Enter this command at the Meterpreter prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Meterpreter will reply `Wakelock was acquired`, and if your Android device had
    gone to sleep or changed to a black screen before, the screen will wake up and
    the device will remain awake until you release the wakelock.
  prefs: []
  type: TYPE_NORMAL
- en: It’s easiest to run the Meterpreter commands and see their effect if you can
    display both the Android and Kali VMs on your screen at the same time. (This approach
    is also useful to see what the user sees while an attacker is hacking their device.)
    If you have dual monitors, put Kali on one monitor and Android on the other. If
    you have a single screen, try to fit Kali alongside Android so you can see both
    as you work.
  prefs: []
  type: TYPE_NORMAL
- en: Running Apps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once an attacker has taken control of a mobile device, they can remotely launch
    any app they want. To see how it works, let’s list the apps the user has installed
    on their device. In the Meterpreter terminal window, enter the command `app_list`.
    Android will list every app installed on the smartphone, including both the name
    that appears on the app icon and the package Uniform Resource Identifier (URI)
    string for that app. The *URI string* is how we identify the various resources
    on an Android device. For example, you might see the YouTube app listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The final two entries on the line tell you whether the app is running and whether
    it’s a system app installed by the operating system. Here, the `false` value tells
    us that the YouTube app is not currently running, and the `true` value indicates
    that it is a standard app installed as part of the Android operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we know YouTube is installed on the Android device, we can launch
    it from Meterpreter using the `app_run` command and YouTube’s package URI string.
    Enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You’ll see the YouTube app open in your Android VM! Switch back to your Android
    VM and search for the video “Bryson Payne TED Talk.” The YouTube app on your Android
    VM will pull up the video (though you probably won’t be able to hear audio through
    the VM, because VirtualBox’s drivers don’t always work for smartphone and tablet
    operating systems).
  prefs: []
  type: TYPE_NORMAL
- en: You can run *any app* on the infected smartphone or tablet this way, without
    the user’s permission or interaction at all. Try running several more apps, such
    as Settings (`com.android.settings`) or the Phone app (`com.android.dialer`).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also request permission to uninstall an app, but the user will be alerted.
    Try this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Your Android VM will show a pop-up window asking if you want to uninstall Gmail,
    as shown in [Figure 9-6](#figure9-6). Click **Cancel** to keep the Gmail app on
    your device. The security settings on newer Android devices keep the Meterpreter
    trojan from uninstalling the app. However, with superuser access (which we’ll
    get in “Stealing Files and Snooping Around in Logs” on page 117), we could delete
    the app’s data and even its main program files without the user’s knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: '![f09006](image_fi/502000c09/f09006.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-6: Android asks the user’s permission before uninstalling an app.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we move on to more devious hacks, let’s run one last app, Contacts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The Contacts app will open in your Android VM. While it’s open, we’ll add a
    contact so we can steal it in Meterpreter later.
  prefs: []
  type: TYPE_NORMAL
- en: Click the Add Contact icon (a red circle with a plus sign, +) in the lower-right
    of your Contacts screen in Android.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Android will ask you to add an account to access your Google contacts. Click
    **Cancel**. (You don’t need to log in to your Google account to add contacts to
    your virtual smartphone.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Create New Contact window will appear. Enter your name, a fake phone number
    or two, and a fake email address, as shown in [Figure 9-7](#figure9-7).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Save** to store the new contact on your Android VM. Click the back arrow
    at the bottom of your Android screen if you’d like to add more contacts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![f09007](image_fi/502000c09/f09007.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-7: Using the Contacts app to add a new contact with fake information'
  prefs: []
  type: TYPE_NORMAL
- en: Accessing Contacts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Meterpreter has several commands for accessing the sensitive data we store
    in our smartphones. Run `help` in the Meterpreter console in Kali and look for
    several commands that begin with `dump`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Since our Android VM isn’t a physical Android device, we can’t make calls or
    receive text messages, but we did add a contact in the previous section. Let’s
    steal it now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `dump_contacts` command in Meterpreter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Meterpreter will respond with the number of contacts it found, along with the
    filename where it saved those contacts on your Kali machine.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open a second terminal window in your Kali VM and enter `cd` to change into
    your home directory. Then enter the command `ls con*` to list any contact files
    Meterpreter dumped there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You’ll see a *.txt* file named *contacts_dump_* followed by a timestamp (year,
    month, day, and time in numeric format).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter `cat con` and press **TAB** to autocomplete the contacts filename, and
    then press **ENTER** to display the contents of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: An attacker can see the full contact information of every person listed in your
    smartphone’s Contacts app, in addition to reading your text messages and seeing
    every phone call you’ve made recently!
  prefs: []
  type: TYPE_NORMAL
- en: Spying Through the Camera
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If an attacker gains remote control of your smartphone, they can hijack the
    device’s camera and/or microphone. As we’ll see, this kind of spying is disturbingly
    easy.
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve got a webcam, connect it to the Android VM by going to the menu bar
    of your VM under **Devices**▶**Webcams** and selecting its name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After attaching the webcam, reboot your Android VM (select **Machine**▶**Reset**
    and click the **reset** button). Then rerun the trojan by clicking the MainActivity
    app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Metasploit, press **ENTER** after the error `Meterpreter session closed`
    and then enter the command `exploit`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the new Meterpreter session starts, enter the command `webcam_list` to
    see your camera listed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the command `webcam_stream` to view a live feed from the camera:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The webcam will begin streaming video (slowly) to your Kali VM through the Firefox
    browser, until you close the web browser video stream and press CTRL-C (on Windows)
    or CONTROL-C (on macOS) in the Meterpreter terminal to stop the stream.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, an attacker can stream video from your smartphone’s webcam if
    your device is ever compromised through an exploit like the one we built, just
    like they can access your laptop or desktop webcam. But unlike with your computer’s
    webcam, you probably take your smartphone with you *everywhere*, as do your friends
    and family. Most of us don’t want to cover the camera on our smartphone like we
    do with our laptop, so it’s even more important to be careful which apps we install
    on our smartphones and what permissions we give them.
  prefs: []
  type: TYPE_NORMAL
- en: Stealing Files and Snooping Around in Logs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just as we did in our Windows 10 hack, we can upload and download files from
    the Android device’s storage using the upload and download commands. We can even
    access protected, sensitive files using the device’s shell terminal if the user
    gives us superuser access.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter `shell` in Meterpreter to enter the Android terminal shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Android shell doesn’t show a prompt at the beginning of the line, so your
    cursor will be on a blank line. Enter the commands `cd /` and `ls` to change directories
    to the root */* directory and list all folders on the device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The *data* folder contains a treasure trove of user data, including the user’s
    YouTube, browser, and other app history files. Remember when we ran the YouTube
    app and searched for “Bryson Payne TED Talk”? If an app stores a log or history
    file with recent search results, we can access those files as long as the user
    grants administrator or superuser privileges to the app.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter `su` into the Meterpeter Android shell to request superuser access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Immediately in the Android VM, you’ll see the permissions window pop up, as
    shown in [Figure 9-8](#figure9-8). Click **Allow** to give Meterpreter superuser
    access.![f09008](image_fi/502000c09/f09008.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 9-8: Giving Meterpreter superuser access'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Change directories into */data/data/com.google.android.youtube* and list the
    directory contents with `ls`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The *databases* folder contains various files used by the app, including one
    that stores the YouTube search history. To find that file, enter the commands
    `cd databases` and `ls`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the short list of files that appears, you’ll find the *history.db* file.
    Run the command `cat history.db` to view the device’s YouTube Search history.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Because this is a special database-formatted file, not all of the characters
    are printable, but look at the last line or two—our search for “Bryson Payne TED
    Talk” is viewable in plaintext! If you search for other videos on YouTube and
    then rerun that last command (`cat history.db`), you’ll see new results added
    to the file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now we’ll download the YouTube search history file to the Kali VM. First, we
    need to copy it to the Metasploit trojan app’s *files* folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to grant access to the copied file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Exit the Android shell by pressing CTRL-C (CONTROL-C on a Mac). Meterpreter
    will respond with a prompt asking if you want to terminate the *channel*, or shell
    connection. Enter `y`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You’ll now drop back into a regular Meterpreter prompt, where you can download
    the YouTube history file to your Kali VM’s home (*/home/kali/*) folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In a separate terminal window, type `ls` to confirm that the *history.db* file
    downloaded successfully. Then enter `cat history.db` and you’ll see the same file
    contents you saw in the Android shell, with the user’s YouTube search history
    in plaintext.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Malicious hackers can use this technique to save a record of your YouTube search
    history. If you were a forensic data analyst working for the FBI or on a company’s
    security team, however, you could use the same technique to discover whether a
    criminal had watched YouTube videos to learn how to make a bomb or commit another
    crime.
  prefs: []
  type: TYPE_NORMAL
- en: Turning Off the Ringer and More
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can change settings with Meterpreter and prevent the user from being able
    to change them back. For example, you can turn off the ringer on the Android VM
    by entering the following command in Meterpreter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In your Android VM, swipe up on your home screen and select **Settings**. Search
    for “ring” and click **Ring volume** to open the Sound settings. The Ring volume
    has been turned off, as shown in [Figure 9-9](#figure9-9).
  prefs: []
  type: TYPE_NORMAL
- en: '![f09009](image_fi/502000c09/f09009.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-9: When we turn off the ring volume in Meterpreter, the user can’t
    turn it back on from the Settings screen!'
  prefs: []
  type: TYPE_NORMAL
- en: Try to slide the Ring volume slider to the right or left. You won’t be able
    to! Meterpreter has locked the ring volume off by turning on a “Do not disturb”
    mode (much like sliding the mute switch on some smartphones). The user will have
    to find “Do not disturb” under Settings and turn it off to regain control of their
    smartphone’s ring volume.
  prefs: []
  type: TYPE_NORMAL
- en: There’s another change we can make that the user can’t override. You might have
    already thought to yourself, *If I saw an app I didn’t recognize, like MainActivity,
    I’d probably delete it*. So let’s hide the MainActivity app icon to make it harder
    for the user to delete our trojan app.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Meterpreter, enter the following command to hide the MainActivity trojan
    app from the user’s list of installed apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Switch back to your Android VM, click the home button, and swipe up to show
    your apps. The MainActivity app will disappear from the list, as shown in [Figure
    9-10](#figure9-10).
  prefs: []
  type: TYPE_NORMAL
- en: '![f09010](image_fi/502000c09/f09010.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-10: Hiding our MainActivity app icon from the user’s screen'
  prefs: []
  type: TYPE_NORMAL
- en: By hiding the app icon, we’ve made it difficult for the user to uninstall the
    trojan app. If an attacker hides the app icon at the very beginning, the user
    might not even know the trojan app had been installed! The user can still uninstall
    the trojan app, however, even if they can’t see it. Go to **Settings**▶**App info**,
    click **MainActivity**, and click **Uninstall**. Notice that stopping or uninstalling
    the app closes the Meterpreter session in the Kali VM. To reinstall the trojan
    app, go to your *Downloads* folder in Android and click the *CoolGame.apk* file
    like we did earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Defending Against Malicious Apps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To protect yourself from malicious apps, be careful about which apps you allow
    onto your smartphone. In short, think before you install! Use Google Play Protect
    on your Android device and view each security pop-up as a chance to reconsider
    what you’re doing. Even better, don’t download apps over the web or outside the
    Google Play Store, Apple’s App Store (if you’re on an iPhone), or your smartphone
    manufacturer’s store.
  prefs: []
  type: TYPE_NORMAL
- en: Malicious apps can make it into official app stores, though. That’s why it’s
    important to read which permissions an app is requesting when you install it.
    A game or simple app shouldn’t need access to your contacts, call logs, or text
    messages, and other than augmented-reality or location-based apps like *Pokémon
    Go*, an app shouldn’t require your location. If an app asks for more permissions
    than you think it should need, delete it and find one that does what you want
    with fewer permissions. Similarly, if an app you’ve installed ever asks for additional
    permissions—especially if it asks for superuser access—you can cancel the request
    or even delete the app. You *never* have to give more permission to an app than
    you want to, and most apps function perfectly well without being granted extensive
    permissions.
  prefs: []
  type: TYPE_NORMAL
- en: If you ever see apps opening on your smartphone that you didn’t open (like when
    we used Meterpreter to open YouTube on the Android VM), turn your smartphone off
    completely (don’t just turn off the screen). Press the power button on the side
    or top of the phone along with the volume up button for several seconds until
    the screen goes black (this works on most Android devices), or search (using a
    different device) for how to reboot or reset your specific device. It might also
    be a good idea to install a security app if you spot any suspicious activity on
    your smartphone or tablet. There are free or low-cost antivirus apps for most
    mobile devices that can detect malicious processes or communications if your smartphone
    ever gets hacked through an app.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, just like on your desktop or laptop, don’t click suspicious links in
    emails or text messages. You can use VirusTotal to check most links by copying
    and pasting, just like you can on a desktop, but on your smartphone, you need
    to be even more careful about clicking malicious links. Remember, an attacker
    can access a lot of personal information (and even track your location!) if they’re
    able to trick you into clicking a bad link or installing a malicious app. So tell
    your friends, your family members, and other people you care about to be suspicious
    of any links they get via text message or email and to think before they install
    an app, especially if it’s from an unknown source.
  prefs: []
  type: TYPE_NORMAL
- en: The Takeaway
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you created an Android virtual machine that looks and works
    just like a real Android smartphone or tablet. You used Metasploit to create a
    Meterpreter remote access trojan for Android, almost exactly the same way you
    did for Windows 10 in Chapter 6, and you installed and launched the trojan on
    the Android VM. Once you gained control of the Android device, you saw how an
    attacker can run apps, steal contacts, upload and download files, hijack your
    camera, and snoop around in your search history.
  prefs: []
  type: TYPE_NORMAL
- en: You also learned that the best way to defend your mobile devices from malware
    is to avoid installing untrusted apps. Even if an app looks legitimate, delete
    or uninstall it if the app asks for more permissions than it needs. If your smartphone
    starts acting weird, reboot it, delete all suspicious apps, and consider installing
    a security app like an antivirus scanner if you suspect you accidentally installed
    malware.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll try one last hacking activity. You’ll see that hacking
    doesn’t apply just to computers, smartphones, and tablets. You can also use the
    tools in your Kali Linux VM to hack other network-connected devices in the world
    around you, from smart TVs to video game consoles and beyond. To prove it, we’ll
    hack a car!
  prefs: []
  type: TYPE_NORMAL
