["```\n`function` Person() {\n    `// intentionally empty`\n}\n```", "```\n`var` person1 `=` `new` Person();\n`var` person2 `=` `new` Person();\n```", "```\n`var` person1 `=` `new` Person;\n`var` person2 `=` `new` Person;\n```", "```\nconsole.log(person1 `instanceof` Person);     `// true`\nconsole.log(person2 `instanceof` Person);     `// true`\n```", "```\nconsole.log(person1.constructor `===` Person);     `// true`\nconsole.log(person2.constructor `===` Person);     `// true`\n```", "```\n  `function` Person(name) {\n❶     `this`.name `=` name;\n❷     `this`.sayName `=` `function`() {\n          console.log(`this`.name);\n      };\n  }\n```", "```\n`var` person1 `=` `new` Person(`\"Nicholas\"`);\n`var` person2 `=` `new` Person(`\"Greg\"`);\n\nconsole.log(person1.name);            `// \"Nicholas\"`\nconsole.log(person2.name);            `// \"Greg\"`\n\nperson1.sayName();                    `// outputs \"Nicholas\"`\nperson2.sayName();                    `// outputs \"Greg\"`\n```", "```\n`function` Person(name) {\n\n    `Object`.defineProperty(`this`, `\"name\"`, {\n        get: `function`() {\n            `return` name;\n        },\n        set: `function`(newName) {\n            name `=` newName;\n        },\n        enumerable: `true`,\n        configurable: `true`\n    });\n\n    `this`.sayName `=` `function`() {\n        console.log(`this`.name);\n    };\n}\n```", "```\n`var` person1 `=` Person(`\"Nicholas\"`);            `// note: missing \"new\"`\n\nconsole.log(person1 `instanceof` Person);      `// false`\nconsole.log(`typeof` person1);                 `// \"undefined\"`\nconsole.log(name);                           `// \"Nicholas\"`\n```", "```\n`var` book = {\n    title: `\"The Principles of Object-Oriented JavaScript\"`\n};\n\nconsole.log(`\"title\"` `in` book);                                    `// true`\nconsole.log(book.hasOwnProperty(`\"title\"`));                       `// true`\nconsole.log(`\"hasOwnProperty\"` `in` book);                           `// true`\nconsole.log(book.hasOwnProperty(`\"hasOwnProperty\"`));              `// false`\nconsole.log(`Object`.prototype.hasOwnProperty(`\"hasOwnProperty\"`));  `// true`\n```", "```\n`function` hasPrototypeProperty(object, name) {\n    `return` name `in` object `&&` !object.hasOwnProperty(name);\n}\n\nconsole.log(hasPrototypeProperty(book, `\"title\"`));            `// false`\nconsole.log(hasPrototypeProperty(book, `\"hasOwnProperty\"`));   `// true`\n```", "```\n❶ `var` object `=` {};\n  `var` prototype `=` `Object`.getPrototypeOf(object);\n\n  console.log(prototype `===` `Object`.prototype);          `// true`\n```", "```\n`var` object `=` {};\n\nconsole.log(`Object`.prototype.isPrototypeOf(object));    `// true`\n```", "```\n  `var` object `=` {};\n\n❶ console.log(object.toString());    `// \"[object Object]\"`\n\n  object.toString `=` `function`() {\n      `return` `\"[object Custom]\"`;\n  };\n\n❷ console.log(object.toString());    `// \"[object Custom]\"`\n\n  `// delete own property`\n  `delete` object.toString;\n\n❸ console.log(object.toString());    `// \"[object Object]\"`\n\n  `// no effect - delete only works on own properties`\n  `delete` object.toString;\n  console.log(object.toString());    `// \"[object Object]\"`\n```", "```\n  `function` Person(name) {\n      `this`.name `=` name;\n  }\n\n❶ Person.prototype.sayName `=` `function`() {\n      console.log(`this`.name);\n  };\n\n  `var` person1 `=` `new` Person(`\"Nicholas\"`);\n  `var` person2 `=` `new` Person(`\"Greg\"`);\n\n  console.log(person1.name);          `// \"Nicholas\"`\n  console.log(person2.name);          `// \"Greg\"`\n\n  person1.sayName();                  `// outputs \"Nicholas\"`\n  person2.sayName();                  `// outputs \"Greg\"`\n```", "```\n  `function` Person(name) {\n      `this`.name `=` name;\n  }\n\n  Person.prototype.sayName `=` `function`() {\n      console.log(`this`.name);\n};\n❶ Person.prototype.favorites `=` [];\n\n  `var` person1 `=` `new` Person(`\"Nicholas\"`);\n  `var` person2 `=` `new` Person(`\"Greg\"`);\n\n  person1.favorites.push(`\"pizza\"`);\n  person2.favorites.push(`\"quinoa\"`);\n\n  console.log(person1.favorites);     `// \"pizza,quinoa\"`\n  console.log(person2.favorites);     `// \"pizza,quinoa\"`\n```", "```\n  `function` Person(name) {\n      `this`.name `=` name;\n  }\n\n  Person.prototype `=` {\n❶     sayName: `function`() {\n          console.log(`this`.name);\n      },\n\n❷     toString: `function`() {\n          `return` `\"[Person \"` `+` `this`.name + `\"]\"`;\n      }\n  };\n```", "```\n  `var` person1 `=` `new` Person(`\"Nicholas\"`);\n\n  console.log(person1 `instanceof` Person);        `// true`\n  console.log(person1.constructor `===` Person);   `// false`\n❶ console.log(person1.constructor `===` `Object`);   `// true`\n```", "```\n  `function` Person(name) {\n      `this`.name `=` name;\n  }\n\n  Person.prototype `=` {\n❶     constructor: Person,\n\n      sayName: `function`() {\n          console.log(`this`.name);\n      },\n\n      toString: `function`() {\n          `return` `\"[Person \"` + `this`.name + `\"]\"`;\n      }\n  };\n\n  `var` person1 `=` `new` Person(`\"Nicholas\"`);\n  `var` person2 `=` `new` Person(`\"Greg\"`);\n\n  console.log(person1 `instanceof` Person);         `// true`\n  console.log(person1.constructor `===` Person);    `// true`\n  console.log(person1.constructor `===` `Object`);    `// false`\n\n  console.log(person2 `instanceof` Person);         `// true`\n  console.log(person2.constructor `===` Person);    `// true`\n  console.log(person2.constructor `===` `Object`);    `// false`\n```", "```\n  `function` Person(name) {\n      `this`.name `=` name;\n  }\n\n  Person.prototype `=` {\n      constructor: Person,\n\n❶     sayName: `function`() {\n          console.log(`this`.name);\n      },\n\n❷     toString: `function`() {\n          `return` `\"[Person \"` + `this`.name + `\"]\"`;\n      }\n  };\n❸ `var` person1 `=` `new` Person(`\"Nicholas\"`);\n  `var` person2 `=` `new` Person(`\"Greg\"`);\n\n  console.log(`\"sayHi\"` `in` person1);         `// false`\n  console.log(`\"sayHi\"` `in` person2);         `// false`\n\n  `// add a new method`\n❹ Person.prototype.sayHi `=` `function`() {\n      console.log(\"H`i``\"``);`\n  };\n\n❺ person1.sayHi();                         `// outputs \"Hi\"`\n  person2.sayHi();                         `// outputs \"Hi\"`\n```", "```\n  `var` person1 `=` `new` Person(`\"Nicholas\"`);\n  `var` person2 `=` `new` Person(`\"Greg\"`);\n\n❶ `Object`.freeze(person1);\n\n❷ Person.prototype.sayHi `=` `function`() {\n   console.log(`\"Hi\"`);\n  };\n\nperson1.sayHi();                            `// outputs \"Hi\"`\nperson2.sayHi();                            `// outputs \"Hi\"`\n```", "```\n`Array`.prototype.sum `=` `function`() {\n    `return` `this`.reduce(`function`(previous, current) {\n        `return` previous `+` current;\n    });\n};\n\n`var` numbers `=` [ `1`, `2`, `3`, `4`, `5`, `6` ];\n`var` result `=` numbers.sum();\n\nconsole.log(result);                `// 21`\n```", "```\n`String`.prototype.capitalize `=` `function`() {\n    `return` `this`.charAt(`0`).toUpperCase() `+` `this`.substring(`1`);\n};\n\n`var` message `=` `\"hello world!\"`;\nconsole.log(message.capitalize());  `// \"Hello world!\"`\n```"]