- en: Chapter 1. Getting Started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have you ever wanted to create your own computer game, animated story, tutorial,
    or science simulation? *Scratch* is a graphical programming language that makes
    it easy to create those applications and more. In this introductory chapter, you
    will:'
  prefs: []
  type: TYPE_NORMAL
- en: Explore Scratch’s programming environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about different types of command blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create your first game in Scratch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you make a Scratch application, you can save it on your computer or upload
    it to the Scratch website, where others can comment on it and remix it into new
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: Excited? Then let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: What Is Scratch?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A computer program is just a set of instructions that tell a computer what to
    do. You write these instructions using a *programming language*, and that’s where
    Scratch comes in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most programming languages are *text based*, which means you have to give the
    computer commands in what looks like a cryptic form of English. For example, to
    display “Hello!” on the screen, you might write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Learning these languages and understanding their syntax rules can be challenging
    for beginners. Scratch, on the other hand, is a *visual* programming language.
    It was developed in the Massachusetts Institute of Technology (MIT) Media Lab
    to make programming easier and more fun to learn.
  prefs: []
  type: TYPE_NORMAL
- en: In Scratch, you won’t type any complicated commands. Instead, you’ll connect
    graphical blocks together to create programs. Confused? Look at the simple program
    in [Figure 1-1](ch01.html#when_you_run_this_scratch_blockcomma_the "Figure 1-1. When
    you run this Scratch block, the cat says “Hello!” in a speech bubble."), and I’ll
    explain.
  prefs: []
  type: TYPE_NORMAL
- en: '![When you run this Scratch block, the cat says “Hello!” in a speech bubble.](httpatomoreillycomsourcenostarchimages2134257.png.jpg)Figure 1-1. When
    you run this Scratch block, the cat says “Hello!” in a speech bubble.'
  prefs: []
  type: TYPE_NORMAL
- en: The cat that you see in [Figure 1-1](ch01.html#when_you_run_this_scratch_blockcomma_the
    "Figure 1-1. When you run this Scratch block, the cat says “Hello!” in a speech
    bubble.") is called a *sprite*. Sprites understand and obey sets of instructions
    that you give them. The purple block on the left tells the cat to display “Hello!”
    in a speech bubble. Many of the applications you’ll create in this book will contain
    multiple sprites, and you’ll use blocks to make sprites move, turn, say things,
    play music, do math, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: You can program in Scratch by snapping those color-coded blocks together as
    you would puzzle pieces or LEGO bricks. The stacks of blocks that you create are
    called *scripts*. For example, [Figure 1-2](ch01.html#using_a_script_to_change_the_cat_spritea
    "Figure 1-2. Using a script to change the Cat sprite’s color") shows a script
    that changes a sprite’s color four times.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a script to change the Cat sprite’s color](httpatomoreillycomsourcenostarchimages2134259.png.jpg)Figure 1-2. Using
    a script to change the *Cat* sprite’s color'
  prefs: []
  type: TYPE_NORMAL
- en: This script waits for one second between color changes, and the four cats you
    see here show the sprite’s new color after each change.
  prefs: []
  type: TYPE_NORMAL
- en: Try It Out 1-1
  prefs: []
  type: TYPE_NORMAL
- en: 'Though we haven’t discussed the blocks in [Figure 1-2](ch01.html#using_a_script_to_change_the_cat_spritea
    "Figure 1-2. Using a script to change the Cat sprite’s color") yet, read them,
    look at their shapes, and try to figure out the steps the script took to make
    the cat teal. (Hint: The first purple block returns the cat to its original color.)
    What do you think would happen if we removed the **wait** block from the script?'
  prefs: []
  type: TYPE_NORMAL
- en: This book covers Scratch 2, which was released in May 2013\. This version allows
    you to create projects directly in your web browser so you don’t have to install
    any software on your computer, and we’ll rely on Scratch’s web interface for the
    material in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Now, that you know a little about this language, it’s time to kick off our programming
    journey and learn how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Scratch Programming Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start Scratch, go to the Scratch website (*[http://scratch.mit.edu/](http://scratch.mit.edu/)*)
    and click the *TRY IT OUT* link. This should take you to Scratch’s project editor
    interface, shown in [Figure 1-3](ch01.html#scratch_user_interfacecomma_where_youapo
    "Figure 1-3. The Scratch user interface, where you’ll build your programs").
  prefs: []
  type: TYPE_NORMAL
- en: '![The Scratch user interface, where you’ll build your programs](httpatomoreillycomsourcenostarchimages2134261.png.jpg)Figure 1-3. The
    Scratch user interface, where you’ll build your programs'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see a single window with at least the following three panes: the
    Stage (top left), the Sprite List (bottom left), and the Scripts tab (right),
    which contains the Blocks tab and the Scripts Area. The right pane also contains
    two additional tabs, Costumes and Sounds, which will be discussed later in this
    section. If you’re logged into an account on the Scratch website, you should also
    see the Backpack (bottom right), which has buttons that let you share your project
    and use sprites and scripts from existing projects.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a quick look at the three main panes.
  prefs: []
  type: TYPE_NORMAL
- en: The Stage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Stage* is where your sprites move, draw, and interact. The Stage is 480
    steps wide and 360 steps tall, as illustrated in [Figure 1-4](ch01.html#stage_is_like_a_coordinate_plane_with_po
    "Figure 1-4. The Stage is like a coordinate plane with point (0,0) in the center.").
    The center of the Stage has an *x*-coordinate of 0 and a *y*-coordinate of 0.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Stage is like a coordinate plane with point (0,0) in the center.](httpatomoreillycomsourcenostarchimages2134263.png.jpg)Figure 1-4. The
    Stage is like a coordinate plane with point (0,0) in the center.'
  prefs: []
  type: TYPE_NORMAL
- en: You can find the (*x*,*y*) coordinates of any point on the Stage by moving the
    mouse cursor to that point and watching the numbers in the Mouse (*x*,*y*) Display
    Area, located directly below the Stage.
  prefs: []
  type: TYPE_NORMAL
- en: The small bar located above the Stage has several controls. The Presentation
    mode icon ① hides all scripts and programming tools and makes the Stage area take
    up almost your entire monitor. The edit box ② shows the name of the current project.
    The green flag ③ and stop ④ icons let you start and end your program.
  prefs: []
  type: TYPE_NORMAL
- en: Try It Out 1-2
  prefs: []
  type: TYPE_NORMAL
- en: Move the mouse around the Stage and watch the Mouse Display Area. What happens
    when you move the mouse outside the Stage area? Now, switch to Presentation mode
    and watch how the screen changes. Click the ![](httpatomoreillycomsourcenostarchimages2134265.png.jpg)
    icon in the top left of the screen or press ESC on your keyboard to exit Presentation
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: Sprite List
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Sprite List displays names and thumbnails for all the sprites in your project.
    New projects begin with a white Stage and a single cat-costumed sprite, as illustrated
    in [Figure 1-5](ch01.html#sprite_list_for_a_new_project "Figure 1-5. The Sprite
    List for a new project").
  prefs: []
  type: TYPE_NORMAL
- en: '![The Sprite List for a new project](httpatomoreillycomsourcenostarchimages2134267.png.jpg)Figure 1-5. The
    Sprite List for a new project'
  prefs: []
  type: TYPE_NORMAL
- en: 'The buttons above the Sprite List let you add new sprites to your project from
    one of four places: Scratch’s sprite library ①, the built-in Paint Editor ② (where
    you can draw your own costume), a camera connected to your computer ③, or your
    computer ④.'
  prefs: []
  type: TYPE_NORMAL
- en: Try It Out 1-3
  prefs: []
  type: TYPE_NORMAL
- en: Add new sprites to your project using some of the buttons located above the
    Sprite List. Rearrange the sprites in the Sprite List by dragging their corresponding
    thumbnails.
  prefs: []
  type: TYPE_NORMAL
- en: Each sprite in your project has its own scripts, costumes, and sounds. You can
    select any sprite to see its belongings. Either (1) click the sprite’s thumbnail
    in the Sprite List or (2) double-click the sprite itself on the Stage. The currently
    selected sprite thumbnail is always highlighted and outlined with a blue border.
    When you select a sprite, you can access its scripts, costumes, and sounds by
    clicking one of the three tabs located above the Scripts Area. We’ll look at the
    contents of these tabs later. For now, right-click (or CTRL-click if you’re using
    a Mac) the `Cat` sprite’s thumbnail to see the popup menu shown in [Figure 1-6](ch01.html#right-clicking_a_spriteapostrophes_thumb
    "Figure 1-6. Right-clicking a sprite’s thumbnail shows this handy menu.").
  prefs: []
  type: TYPE_NORMAL
- en: The duplicate option ① copies the sprite and gives the copy a different name.
    You can remove a sprite from your project with delete ②, and you can export a
    sprite to a *.sprite2* file on your computer using the save to local file option
    ③. (To import an exported sprite into another project, just click the Upload sprite
    from file button shown in [Figure 1-5](ch01.html#sprite_list_for_a_new_project
    "Figure 1-5. The Sprite List for a new project").) The hide/show option ④ allows
    you to change whether a sprite on the Stage is visible or not.
  prefs: []
  type: TYPE_NORMAL
- en: '![Right-clicking a sprite’s thumbnail shows this handy menu.](httpatomoreillycomsourcenostarchimages2134269.png.jpg)Figure 1-6. Right-clicking
    a sprite’s thumbnail shows this handy menu.'
  prefs: []
  type: TYPE_NORMAL
- en: Along with thumbnails for your sprites, the Sprite List also shows a thumbnail
    of the Stage to the left (see [Figure 1-6](ch01.html#right-clicking_a_spriteapostrophes_thumb
    "Figure 1-6. Right-clicking a sprite’s thumbnail shows this handy menu.")). The
    Stage has its own set of scripts, images, and sounds. The background image you
    see on the Stage is called a *backdrop*. When you start a new project, the Stage
    defaults to a plain, white backdrop, but you can add new backdrop images with
    any of the four buttons below the Stage’s thumbnail. Click on the Stage icon in
    the Sprite List to view and edit its associated scripts, backdrops, and sounds.
  prefs: []
  type: TYPE_NORMAL
- en: Blocks Tab
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Blocks in Scratch are divided into 10 categories (palettes): *Motion*, *Looks*,
    *Sound*, *Pen*, *Data*, *Events*, *Control*, *Sensing*, *Operators*, and *More
    Blocks*. Blocks are color coded to help you find related blocks easily. Scratch
    2 has more than 100 blocks, though some blocks only appear under certain conditions.
    For example, blocks in the *Data* palette (discussed in [Chapter 5](ch05.html
    "Chapter 5. Variables") and [Chapter 9](ch09.html "Chapter 9. Lists")) appear
    only after a variable or a list is created. Let’s look at the various components
    of the Blocks tab in [Figure 1-7](ch01.html#enlarged_view_of_the_blocks_tab "Figure 1-7. An
    enlarged view of the Blocks tab").'
  prefs: []
  type: TYPE_NORMAL
- en: '![An enlarged view of the Blocks tab](httpatomoreillycomsourcenostarchimages2134271.png.jpg)Figure 1-7. An
    enlarged view of the Blocks tab'
  prefs: []
  type: TYPE_NORMAL
- en: Try clicking a block to see what it does. If you click **move 10 steps** on
    the *Motion* palette, for example, the sprite will move 10 steps on the Stage.
    Click it again, and the sprite moves another 10 steps. Click the **say Hello!
    for 2 secs** block (in the *Looks* palette) to make the sprite display “Hello!”
    in a speech bubble for two seconds. You can also access the help screen of a block
    by selecting *Block help* (the question mark icon) from the toolbar and clicking
    the block you’re confused about.
  prefs: []
  type: TYPE_NORMAL
- en: Some blocks require one or more inputs (also called *arguments*) that tell the
    block what to do. The number 10 in the **move 10 steps** block is an example of
    an argument. Look at [Figure 1-8](ch01.html#changing_the_inputs_of_different_types_o
    "Figure 1-8. Changing the inputs of different types of blocks") to see the different
    ways blocks let you change their inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the inputs of different types of blocks](httpatomoreillycomsourcenostarchimages2134273.png.jpg)Figure 1-8. Changing
    the inputs of different types of blocks'
  prefs: []
  type: TYPE_NORMAL
- en: You can change the number of steps in **move 10 steps** by clicking the white
    area where you see the 10 and entering a new number ①, perhaps 30 as you see in
    [Figure 1-8](ch01.html#changing_the_inputs_of_different_types_o "Figure 1-8. Changing
    the inputs of different types of blocks"). Some blocks, like **point in direction
    90**, also have pull-down menus for their inputs ②. You can click the down arrow
    to see a list of available options and select one. This particular command has
    a white editable area, so you could also just type a value inside the white box.
    Other blocks, like **point towards** ③, will force you to choose a value from
    the drop-down menu.
  prefs: []
  type: TYPE_NORMAL
- en: Try It Out 1-4
  prefs: []
  type: TYPE_NORMAL
- en: Go to the *Looks* palette, change the values of block inputs, and click the
    blocks to see what they do. For example, experiment with the **set color effect
    to** block. Try numbers like 10, 20, 30, and so on until the cat returns to its
    original color. Try the options in the drop-down menu with different numbers.
    You can click the **clear graphic effects** block (also in the *Looks* palette)
    to remove your changes.
  prefs: []
  type: TYPE_NORMAL
- en: Scripts Area
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To make a sprite do interesting things, you need to program it by dragging blocks
    from the Blocks tab to the Scripts Area and snapping them together. When you drag
    a block around the Scripts Area, a white highlight indicates where you can drop
    that block to form a valid connection with another block ([Figure 1-9](ch01.html#drag_blocks_into_the_scripts_area_and_sn
    "Figure 1-9. Drag blocks into the Scripts Area and snap them together to create
    scripts.")). Scratch blocks only snap together in certain ways, eliminating the
    typing errors that tend to occur when people use text-based programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: '![Drag blocks into the Scripts Area and snap them together to create scripts.](httpatomoreillycomsourcenostarchimages2134275.png.jpg)Figure 1-9. Drag
    blocks into the Scripts Area and snap them together to create scripts.'
  prefs: []
  type: TYPE_NORMAL
- en: You don’t need to complete scripts to run them, which means that you can test
    your script as you build it. Clicking anywhere on a script, complete or partial,
    runs the entire script, from top to bottom.
  prefs: []
  type: TYPE_NORMAL
- en: Try It Out 1-5
  prefs: []
  type: TYPE_NORMAL
- en: Start a new Scratch project and create the script below for the `Cat` sprite.
    (The **forever** block is in the *Control* palette, and the other blocks are in
    the *Motion* palette.)
  prefs: []
  type: TYPE_NORMAL
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2134277.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You’ll learn about most of these blocks in [Chapter 2](ch02.html "Chapter 2. Motion
    and Drawing"). For now, click your new script to run it. (Scratch should highlight
    the running script with a glowing yellow border, as shown in the right side of
    the image.) You can even change a block’s inputs and add new blocks to a script
    while it runs! For example, change the number in the **move** block and watch
    how the cat’s motion changes. Click the script one more time to stop it.
  prefs: []
  type: TYPE_NORMAL
- en: You can also easily disassemble a stack of blocks and test each individually.
    This will be an invaluable strategy when you’re trying to understand long scripts.
    To move an entire stack of blocks, grab the top block of the stack. To detach
    a block in the middle of a stack and all the blocks below it, grab it and drag
    it. Go ahead and try this out.
  prefs: []
  type: TYPE_NORMAL
- en: This feature also allows you to build your project one piece at a time. You
    can connect small chunks of blocks, test them to make sure they work as intended,
    and then combine them into larger scripts.
  prefs: []
  type: TYPE_NORMAL
- en: You can even copy a stack of blocks from one sprite to another. Just drag the
    stack from the Scripts Area of the source sprite to the thumbnail of the destination
    sprite in the Sprite List.
  prefs: []
  type: TYPE_NORMAL
- en: Try It Out 1-6
  prefs: []
  type: TYPE_NORMAL
- en: Add another sprite to your project. Drag the script from the `Cat` sprite and
    drop it over the thumbnail of the new sprite. Your mouse arrow must be on top
    of the new sprite’s thumbnail for the drop to succeed. Check the Scripts tab of
    the new sprite to make sure that it has an identical copy of the script.
  prefs: []
  type: TYPE_NORMAL
- en: Costumes Tab
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can change what a sprite looks like by changing its costume, which is just
    an image. The Costumes tab contains everything you need to organize your sprite’s
    costumes; you could think of it like a clothes closet. The closet can have many
    costumes, but a sprite can wear only one at a time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try changing the `Cat` sprite’s costume now. Click the thumbnail of the
    `Cat` sprite and select the Costumes tab. As illustrated in [Figure 1-10](ch01.html#you_can_organize_all_the_costumes_for_a
    "Figure 1-10. You can organize all the costumes for a sprite from the Costumes
    tab."), the `Cat` has two costumes: `costume1` and `costume2`. The highlighted
    costume (`costume1` in this case) represents the sprite’s current costume.'
  prefs: []
  type: TYPE_NORMAL
- en: '![You can organize all the costumes for a sprite from the Costumes tab.](httpatomoreillycomsourcenostarchimages2134279.png.jpg)Figure 1-10. You
    can organize all the costumes for a sprite from the Costumes tab.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you right-click on a costume’s thumbnail, you’ll see a pop-up menu with
    three options: (1) duplicate, (2) delete, and (3) save to local file. The first
    option adds a new costume with an image identical to that of the costume you duplicated.
    The delete option deletes the selected costume. The last option allows you to
    save the costume to a file. You can import that costume and use it in a different
    project using the Upload costume from file button (the third button in [Figure 1-10](ch01.html#you_can_organize_all_the_costumes_for_a
    "Figure 1-10. You can organize all the costumes for a sprite from the Costumes
    tab.")). Go ahead and try these options out.'
  prefs: []
  type: TYPE_NORMAL
- en: Try It Out 1-7
  prefs: []
  type: TYPE_NORMAL
- en: Click the first button above the cat’s image in [Figure 1-10](ch01.html#you_can_organize_all_the_costumes_for_a
    "Figure 1-10. You can organize all the costumes for a sprite from the Costumes
    tab.") to choose a new costume from Scratch’s library. Then select any image you
    like from the window that appears. Apply some of the tips in [Figure 1-10](ch01.html#you_can_organize_all_the_costumes_for_a
    "Figure 1-10. You can organize all the costumes for a sprite from the Costumes
    tab.") to become more familiar with the costume options.
  prefs: []
  type: TYPE_NORMAL
- en: Sounds Tab
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sprites can also play sounds, which liven up your programs. You can, for example,
    give a sprite different sounds to use when it’s happy or sad. If your game contains
    a sprite that looks like a missile, you could make the missile generate different
    sounds when it hits or misses a target.
  prefs: []
  type: TYPE_NORMAL
- en: The buttons in the Sounds tab will help you organize the different sounds your
    sprites can play. As shown in [Figure 1-11](ch01.html#sounds_tab_allows_you_to_organize_the_so
    "Figure 1-11. The Sounds tab allows you to organize the sounds of a sprite."),
    Scratch even provides a tool you can use to edit sound files. I won’t discuss
    the details of this tool in this book, but I encourage you to experiment with
    it on your own.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Sounds tab allows you to organize the sounds of a sprite.](httpatomoreillycomsourcenostarchimages2134281.png.jpg)Figure 1-11. The
    Sounds tab allows you to organize the sounds of a sprite.'
  prefs: []
  type: TYPE_NORMAL
- en: Most of the time, you’ll need only the three buttons at the top of the Sounds
    tab. They allow you to choose a sound from Scratch’s sound library ①, record a
    new sound ② (if you have a microphone), or import an existing sound file from
    your computer ③. Scratch can read only MP3 and WAV sound files.
  prefs: []
  type: TYPE_NORMAL
- en: Try It Out 1-8
  prefs: []
  type: TYPE_NORMAL
- en: Select the Sounds tab and click the **Choose sound from library** button. Listen
    to the various sounds that are available in Scratch to get some ideas for your
    future projects.
  prefs: []
  type: TYPE_NORMAL
- en: Backdrops Tab
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you select the thumbnail of the Stage in the Sprite List, the name of the
    middle tab changes from *Costumes* to *Backdrops*. Use this tab to organize the
    Stage’s background images, which you can change with your scripts. For example,
    if you’re creating a game, you might show one backdrop with instructions to begin
    and then switch to another when the user starts the game. The Backdrops tab is
    identical to the Costumes tab.
  prefs: []
  type: TYPE_NORMAL
- en: Try It Out 1-9
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Choose backdrop from library** button below the thumbnail of the
    Stage in the Sprite List. Select the xy-grid backdrop from the window that appears
    and click OK. Scratch will add the xy-grid to your project and make it the default
    backdrop. (The xy-grid shows a 2-D Cartesian plane, which is useful when you’re
    working with the Motion command blocks.) Repeat these steps and select any other
    backdrop that you like.
  prefs: []
  type: TYPE_NORMAL
- en: Sprite Info
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can view the sprite info area by clicking the small ![](httpatomoreillycomsourcenostarchimages2134283.png)
    icon at the top-left edge of a sprite’s thumbnail, as illustrated in [Figure 1-12](ch01.html#sprite_info_area
    "Figure 1-12. Sprite info area"). This area shows the sprite’s name, its current
    (*x*,*y*) position and direction, its rotation style and visibility state, and
    whether it can be dragged in Presentation mode. Let’s briefly talk about each
    of these options.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sprite info area](httpatomoreillycomsourcenostarchimages2134285.png.jpg)Figure 1-12. Sprite
    info area'
  prefs: []
  type: TYPE_NORMAL
- en: The edit box ① at the top of this area allows you to change the sprite’s name.
    You’ll use this box many times in this book.
  prefs: []
  type: TYPE_NORMAL
- en: The *x* and *y* values ② show the sprite’s current position on the Stage. Drag
    the sprite onto the Stage and watch what happens to these numbers.
  prefs: []
  type: TYPE_NORMAL
- en: The sprite’s direction ③ indicates which direction the sprite will move in response
    to a movement block. Drag the blue line emanating from the center of the circle
    icon to rotate the sprite.
  prefs: []
  type: TYPE_NORMAL
- en: The three rotation-style buttons ④ (named Rotate, Left-right flip, and No rotate)
    control how the costume appears as the sprite changes its direction. To understand
    the effect of these buttons, create the script shown in [Figure 1-13](ch01.html#script_for_demonstrating_rotation_styles
    "Figure 1-13. Script for demonstrating rotation styles") and then click each of
    these buttons while the script is running. You can find the **wait** block in
    the *Control* palette.
  prefs: []
  type: TYPE_NORMAL
- en: The Can drag in player checkbox ⑤ indicates whether or not the sprite can be
    dragged (using the mouse) in Presentation mode. Switch to Presentation mode with
    this box checked/ unchecked and try to drag the sprite across the Stage to understand
    the effect of this checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: '![Script for demonstrating rotation styles](httpatomoreillycomsourcenostarchimages2134287.png.jpg)Figure 1-13. Script
    for demonstrating rotation styles'
  prefs: []
  type: TYPE_NORMAL
- en: The Show checkbox ⑥ allows you to show/hide the sprite at program design time.
    Try it out and see what happens. You’ll see several examples of hidden sprites
    that do useful work behind the scenes in many examples throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: Toolbar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s take a quick look at Scratch’s toolbar in [Figure 1-14](ch01.html#scratchapostrophes_toolbar
    "Figure 1-14. Scratch’s toolbar"), starting with some of the buttons. (The toolbar
    will look slightly different if you are signed in, as covered in Appendix A.)
    Use the Duplicate and Delete buttons to copy and remove sprites, costumes, sounds,
    blocks, or scripts. The Grow button makes sprites bigger, while the Shrink button
    makes them smaller. Just click the button you want to use and then click on a
    sprite (or a script) to apply that action. To return to the arrow cursor, click
    on any blank area of the screen. You can use the Language menu to change the language
    of the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: '![Scratch’s toolbar](httpatomoreillycomsourcenostarchimages2134289.png.jpg)Figure 1-14. Scratch’s
    toolbar'
  prefs: []
  type: TYPE_NORMAL
- en: From the File menu, you can create new projects, upload (open) an existing project
    from your computer, download (save) the current project to your computer, or revert
    (undo) all your changes to the current project. Scratch 2 projects have an *.sb2*
    file extension to distinguish them from projects created in the previous version
    of Scratch (*.sb*).
  prefs: []
  type: TYPE_NORMAL
- en: In the Edit menu, Undelete will bring back the last block, script, sprite, costume,
    or sound you deleted. The Small stage layout option shrinks the Stage and gives
    the Scripts Area more room. Selecting Turbo mode increases the speed of some blocks.
    For example, executing a **move** block 1,000 times may take about 70 seconds
    in normal mode and about 0.2 seconds in Turbo mode.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve seen the essentials of the Scratch toolbar, we’ll talk briefly
    about Scratch’s built-in Paint Editor.
  prefs: []
  type: TYPE_NORMAL
- en: Paint Editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use the Paint Editor ([Figure 1-15](ch01.html#scratchapostrophes_paint_editor
    "Figure 1-15. Scratch’s Paint Editor")) to create or edit costumes and backdrops.
    (Of course, you’re free to use your favorite image-editing program, too.) If you
    want to learn more about Scratch’s Paint Editor, check out *ScratchPaintEditor.pdf*
    (located in the online resources, which can be downloaded from *[http://nostarch.com/learnscratch/](http://nostarch.com/learnscratch/)*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Scratch’s Paint Editor](httpatomoreillycomsourcenostarchimages2134291.png.jpg)Figure 1-15. Scratch’s
    Paint Editor'
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, there are two important features you’ll need to know about: setting
    the center of an image and setting the transparent color. I’ll explain these features
    in the following sections.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting the Center of an Image
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you command a sprite to turn (left or right), it will turn with respect
    to a reference point—the center of its costume. The Set costume center button
    (in the upper-right corner of the Paint Editor) allows you to choose that center.
    When you click this button, you’ll see crosshairs on the drawing area, as shown
    in [Figure 1-16](ch01.html#changing_a_costumeapostrophes_center_aft "Figure 1-16. Changing
    a costume’s center after clicking the Set costume center button"). The center
    point is determined by the intersection of these two axes, so to shift a costume’s
    center, just drag them to a new position. To hide the axes, click the same button
    again.
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing a costume’s center after clicking the Set costume center button](httpatomoreillycomsourcenostarchimages2134293.png.jpg)Figure 1-16. Changing
    a costume’s center after clicking the Set costume center buttonTry It Out 1-10'
  prefs: []
  type: TYPE_NORMAL
- en: '*RotationCenter.sb2*'
  prefs: []
  type: TYPE_NORMAL
- en: Open *RotationCenter.sb2* and run it. This application contains a single sprite
    with the costume and script shown below. The costume center is set in the middle
    of the square. Run the script and notice the pattern. Then edit the costume to
    set its center in the middle of the circle and run the script again to see how
    the picture changes.
  prefs: []
  type: TYPE_NORMAL
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2134295.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting Transparent Color
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When two images overlap, the top image will cover some part of the bottom image.
    Similarly, sprites cover parts of the Stage. If you want to see what the Stage
    looks like behind an image, you need to use the Paint Editor to make at least
    part of that image *transparent*, as the penguin on the right is in [Figure 1-17](ch01.html#you_can_make_any_part_of_an_image_transp
    "Figure 1-17. You can make any part of an image transparent by filling it with
    the “transparent” color.").
  prefs: []
  type: TYPE_NORMAL
- en: In the *Color* palette, just click the square with a diagonal red line and paint
    with that “transparent” color to make something invisible. You can think of this
    icon as a “No Color” sign, similar to a “No Smoking” sign with a red bar across
    a cigarette.
  prefs: []
  type: TYPE_NORMAL
- en: '![You can make any part of an image transparent by filling it with the “transparent”
    color.](httpatomoreillycomsourcenostarchimages2134297.png.jpg)Figure 1-17. You
    can make any part of an image transparent by filling it with the “transparent”
    color.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you know your way around the Scratch interface, we’ll put that knowledge
    to good use and make something fun. Roll up your sleeves and get ready: We’re
    making a game!'
  prefs: []
  type: TYPE_NORMAL
- en: Your First Scratch Game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Pong.sb2*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Pong_NoCode.sb2*'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you’ll create a single-player game in which players will move
    a paddle to keep a bouncing tennis ball from hitting the floor, based on the classic
    arcade game Pong. The user interface for our game is illustrated in [Figure 1-18](ch01.html#our_game_screen
    "Figure 1-18. Our game screen").
  prefs: []
  type: TYPE_NORMAL
- en: '![Our game screen](httpatomoreillycomsourcenostarchimages2134299.png.jpg)Figure 1-18. Our
    game screen'
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the figure, the ball starts at the top of the Stage and moves down
    at some random angle, bouncing off the edges of the Stage. The player moves the
    paddle horizontally (using the mouse) to send the ball back up. If the ball touches
    the bottom of the Stage, it’s game over.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll build this game one step at a time, but first we need to open a fresh
    project. Select **File**▸**New** to start a new Scratch project. Then delete the
    `Cat` sprite by right-clicking it and selecting **delete** from the pop-up menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Prepare the Backdrop'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To detect when the ball misses the paddle, we’ll mark the bottom of the Stage
    with a certain color and use the **touching color ?** block (from the *Sensing*
    palette) to tell us when the ball touches that color. Our current backdrop is
    white, so we can just draw a thin, colored rectangle at the bottom, as shown in
    [Figure 1-19](ch01.html#steps_for_drawing_a_rectangle_at_the_bot "Figure 1-19. The
    steps for drawing a rectangle at the bottom of the backdrop image").
  prefs: []
  type: TYPE_NORMAL
- en: '![The steps for drawing a rectangle at the bottom of the backdrop image](httpatomoreillycomsourcenostarchimages2134301.png.jpg)Figure 1-19. The
    steps for drawing a rectangle at the bottom of the backdrop image'
  prefs: []
  type: TYPE_NORMAL
- en: Click the thumbnail of the Stage to select it and then go to the Backdrops tab.
    Follow the steps in [Figure 1-19](ch01.html#steps_for_drawing_a_rectangle_at_the_bot
    "Figure 1-19. The steps for drawing a rectangle at the bottom of the backdrop
    image") to draw a thin rectangle at the bottom of the Stage’s backdrop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Add the Paddle and Ball'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Click the **Paint new sprite** button above the Sprite List to add the `Paddle`
    sprite to your project. Since the paddle is just a thin, short rectangle, repeat
    what you did in Step 1 to draw a paddle like the one in [Figure 1-18](ch01.html#our_game_screen
    "Figure 1-18. Our game screen"). Color the paddle any way you want and set the
    center approximately in the middle of the rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: Next, name the sprite something that explains what it is; I called it `Paddle`.
    Also, click the paddle image on the Stage and move it so that its *y*-coordinate
    is about –120.
  prefs: []
  type: TYPE_NORMAL
- en: Our game has a paddle now, but we still need a ball to bounce around, so click
    **Choose sprite from library** above the Sprite List to import one. In the dialog
    that appears, click the **Things** category and select the **Tennis Ball** image
    to add that sprite to your project. Rename the sprite as `Ball`.
  prefs: []
  type: TYPE_NORMAL
- en: Before you start working on scripts for the game, select **File** ▸ **Download
    to your computer** to save what you’ve done so far to your computer. In the dialog
    that appears, select the folder where you want to save your work, name the file
    *Pong.sb2*, and click **Save**. If you are currently signed in, you can also save
    your work on the *cloud* (that is, on a Scratch server). Whether you decide to
    save your files locally (on your computer) or on the cloud, make sure to save
    your work often.
  prefs: []
  type: TYPE_NORMAL
- en: With the `Paddle` and `Ball` sprites, the Stage should look similar to [Figure 1-18](ch01.html#our_game_screen
    "Figure 1-18. Our game screen"). If you encounter any difficulties at this time,
    you can open the file *Pong_NoCode.sb2*, which contains everything we just created.
    You’ll add the scripts to run the game next, but don’t worry too much about the
    details of the blocks. We’ll explore all of them later in the book, so for now,
    let’s focus on learning to put a complete project together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Start the Game and Get Your Sprites Moving'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the designer for this game, you’ll decide how players can start a new round.
    For example, the game could begin when you press a key, click a sprite on the
    Stage, or even clap or wave your hands (if you have a webcam). The green flag
    icon (located above the Stage) is another popular option, which we’ll use here.
  prefs: []
  type: TYPE_NORMAL
- en: The idea is simple. Any scripts that start with the **when green flag clicked**
    trigger block start running when you press that button. The flag turns bright
    green and stays that way until the scripts finish. To see this in action, create
    the script shown in [Figure 1-20](ch01.html#script_for_the_paddle_sprite "Figure 1-20. The
    script for the Paddle sprite") for the `Paddle` sprite.
  prefs: []
  type: TYPE_NORMAL
- en: '![The script for the Paddle sprite](httpatomoreillycomsourcenostarchimages2134303.png.jpg)Figure 1-20. The
    script for the *`Paddle`* sprite'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the green flag is clicked ①, the **go to x: y:** block ② sets the paddle’s
    vertical position to –120, just in case you previously moved it with the mouse.
    The paddle should hover just above the pink rectangle at the bottom of the Stage,
    so if your rectangle is thicker, change its position number to something that
    works for your design.'
  prefs: []
  type: TYPE_NORMAL
- en: The script then uses a **forever** block ③ to constantly check the mouse position.
    We’ll move the paddle back and forth by matching the paddle’s *x*-position to
    that of the mouse ④. Run the script (by clicking the green flag icon) and try
    moving your mouse horizontally; the paddle should follow. Click the stop icon
    next to the green flag to stop the script.
  prefs: []
  type: TYPE_NORMAL
- en: The script for the `Ball` sprite is a little longer than the previous one, so
    I’ll break it down into simple chunks. The ball should start moving when we click
    the green flag, so first, add the script in [Figure 1-21](ch01.html#first_part_of_the_ball_sprite_script
    "Figure 1-21. The first part of the Ball sprite script") to the `Ball` sprite.
  prefs: []
  type: TYPE_NORMAL
- en: '![The first part of the Ball sprite script](httpatomoreillycomsourcenostarchimages2134305.png.jpg)Figure 1-21. The
    first part of the *`Ball`* sprite script'
  prefs: []
  type: TYPE_NORMAL
- en: First, we move the ball to the top of the stage ① and make it point down at
    a random angle using the **pick random** block ② (from the *Operators* palette).
    The script then uses a **forever** block ③ to move the ball ④ across the Stage
    and bounce ⑤ off the edges. Click the green flag to test what you’ve written so
    far. The ball should move in a zigzag pattern, and the paddle should still follow
    your mouse.
  prefs: []
  type: TYPE_NORMAL
- en: Try It Out 1-11
  prefs: []
  type: TYPE_NORMAL
- en: Replace the 12 inside the **move** block with different values, run the script,
    and watch what happens. This should give you an idea of how to make the game easier
    or harder to play. Click the stop icon when you’re done.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it’s time to add the fun part—the blocks that make the ball bounce off
    the paddle. We can modify the **forever** block we just created so the ball travels
    upward when it hits the paddle, as shown in [Figure 1-22](ch01.html#adding_code_to_kick_the_ball_up
    "Figure 1-22. Adding code to kick the ball up").
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding code to kick the ball up](httpatomoreillycomsourcenostarchimages2134307.png.jpg)Figure 1-22. Adding
    code to kick the ball up'
  prefs: []
  type: TYPE_NORMAL
- en: When the ball and paddle touch, we command the ball to point in a random direction
    between –30 and 30\. When the **forever** block goes for the next round, it will
    execute the **move** block, which will now cause the ball to go up. Click the
    green flag again to test this part of the game. Click the stop icon when you are
    sure the ball is bouncing off of the paddle as it’s supposed to.
  prefs: []
  type: TYPE_NORMAL
- en: The only piece we’re missing now is some code to stop the game when the ball
    touches the bottom of the Stage. Add the script shown in [Figure 1-23](ch01.html#blocks_for_ending_the_game
    "Figure 1-23. The blocks for ending the game") to the `Ball` sprite, either right
    before or after the **if** block in [Figure 1-22](ch01.html#adding_code_to_kick_the_ball_up
    "Figure 1-22. Adding code to kick the ball up"). You’ll find the **touching color
    ?** block in the *Sensing* palette and the **stop** block in the *Control* palette.
  prefs: []
  type: TYPE_NORMAL
- en: '![The blocks for ending the game](httpatomoreillycomsourcenostarchimages2134309.png.jpg)Figure 1-23. The
    blocks for ending the game'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click the mouse over the colored square inside the **touching color?**
    block, the cursor will change to a hand cursor. When you move that cursor and
    click over the light pink rectangle at the bottom of the Stage, the colored square
    inside the block should match the rectangle’s color. The **stop all** block does
    exactly what its name says: It stops all running scripts in all sprites, and the
    `Paddle` and the `Ball` sprites are no exception.'
  prefs: []
  type: TYPE_NORMAL
- en: This basic pong game is now fully functional. Click the green flag and play
    it a couple of times to test it out. After seeing that you can create a whole
    game with such a small amount of code, I hope you agree with me that Scratch is
    amazing!
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: Spice It Up with Sound'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Of course, games are more fun when they have sound, so let’s add one final touch
    to play a noise every time we hit the ball.
  prefs: []
  type: TYPE_NORMAL
- en: Double-click the ball on the Stage to select it and then select the Sounds tab.
    Click the **Choose sound from library** button to add a sound to the `Ball` sprite.
    In the dialog that appears, select the **Effects** category, choose the **pop**
    sound, and click **OK** to add it to the Sounds tab. After that, go back to the
    Scripts tab and insert a **play sound** block (from the *Sound* palette), as shown
    in [Figure 1-24](ch01.html#playing_a_sound_when_the_ball_touches_th "Figure 1-24. Playing
    a sound when the ball touches the paddle").
  prefs: []
  type: TYPE_NORMAL
- en: '![Playing a sound when the ball touches the paddle](httpatomoreillycomsourcenostarchimages2134311.png.jpg)Figure 1-24. Playing
    a sound when the ball touches the paddle'
  prefs: []
  type: TYPE_NORMAL
- en: Test the game once more, and this time, you should hear a short “pop” every
    time the ball touches the paddle.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! Your game is now complete (unless, of course, you want to add
    more features to it), and you just wrote your first Scratch program. If you’d
    like to experiment some more, try duplicating the `Ball` sprite to have two (or
    more) balls in your game and see how that changes the way you play!
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, I’ll introduce the different types of blocks available
    in Scratch. As you continue through this book, you’ll really dig into how those
    blocks work, but for now, we’ll just go over them briefly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scratch Blocks: An Overview'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, you’ll learn about the different blocks available in Scratch,
    their names, and their intended usage. The goal is to define some of the terms
    that you’ll read in the next chapters. You can come back to this section as you
    progress if you need to refresh your memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in [Figure 1-25](ch01.html#four_types_of_blocks_available_in_scratc
    "Figure 1-25. The four types of blocks available in Scratch"), Scratch has four
    kinds of blocks: command blocks, function blocks, trigger blocks, and control
    blocks. *Command blocks* and *control blocks* (also called *stack* blocks) have
    bumps on the bottom and/or notches on the top. You can snap these blocks together
    into stacks. *Trigger blocks*, also called *hats*, have rounded tops because they
    are placed at the top of a stack. Trigger blocks connect events to scripts. They
    wait for an event—such as a key press or mouse click—and run the blocks underneath
    them when that event happens. For example, all scripts that start with the **when
    green flag clicked** block will run when the user clicks the green flag icon.'
  prefs: []
  type: TYPE_NORMAL
- en: '![The four types of blocks available in Scratch](httpatomoreillycomsourcenostarchimages2134313.png.jpg)Figure 1-25. The
    four types of blocks available in Scratch'
  prefs: []
  type: TYPE_NORMAL
- en: '*Function blocks* (also called *reporters*) don’t have notches or bumps. They
    can’t form a layer of a script alone; instead, they’re used as inputs to other
    blocks. The shapes of these blocks indicate the type of data they return. For
    example, blocks with rounded ends report numbers or strings, whereas blocks with
    pointed ends report whether something is true or false. This is illustrated in
    [Figure 1-26](ch01.html#shape_of_a_function_block_indicates_the "Figure 1-26. The
    shape of a function block indicates the type of data it returns.").'
  prefs: []
  type: TYPE_NORMAL
- en: '![The shape of a function block indicates the type of data it returns.](httpatomoreillycomsourcenostarchimages2134315.png.jpg)Figure 1-26. The
    shape of a function block indicates the type of data it returns.'
  prefs: []
  type: TYPE_NORMAL
- en: Some function blocks have a checkbox next to them. If you check the box, a *monitor*
    appears on the Stage to display the current value of the reporter. Select a sprite
    and check the box on the **x position** block (in the *Motion* palette). Then
    drag the sprite around the Stage and watch that monitor. It should change as you
    move the sprite back and forth.
  prefs: []
  type: TYPE_NORMAL
- en: Arithmetic Operators and Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let’s take a quick look at the arithmetic operators and functions supported
    in Scratch. If you’ve lost your calculator, then your worries are over! You could
    make your own calculator in Scratch with the blocks from the *Operators* palette,
    which you’ll explore in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Arithmetic Operators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Scratch supports the four basic arithmetic operations of addition (**+**), subtraction
    (**-**), multiplication (*****), and division (**/**). The blocks used to perform
    these operations, called *operators*, are shown in [Figure 1-27](ch01.html#arithmetic_operators_in_scratch
    "Figure 1-27. Arithmetic operators in Scratch"). Since these blocks produce a
    number, you can use them as inputs to any block that accepts numbers, as demonstrated
    in this figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Arithmetic operators in Scratch](httpatomoreillycomsourcenostarchimages2134317.png.jpg)Figure 1-27. Arithmetic
    operators in Scratch'
  prefs: []
  type: TYPE_NORMAL
- en: Scratch also supports the modulus (**mod**) operator, which returns the remainder
    of the division of two numbers. For example, **10 mod 3** returns 1 because the
    remainder of dividing 10 by 3 is 1\. A common use of the modulus operator is to
    test the divisibility of one *integer* (whole number) by another (smaller) integer.
    A modulus of 0 indicates that the larger number is divisible by the smaller number.
    Does this give you an idea for checking whether a number is even or odd?
  prefs: []
  type: TYPE_NORMAL
- en: Another useful operator supported by Scratch is the **round** operator, which
    rounds decimal numbers to the nearest whole number. For example, **round(3.1)**
    = 3, **round(3.5)** = 4, and **round(3.6)** = 4.
  prefs: []
  type: TYPE_NORMAL
- en: Random Numbers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you program more often, you’ll probably need to generate random numbers at
    some point, especially if you create games and simulations. Scratch provides the
    **pick random** block specifically for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: This block outputs a random number each time you use it. Its two editable white
    boxes allow you to enter a range for that number, and Scratch will only choose
    values between the two limits (inclusive). [Table 1-1](ch01.html#examples_of_using_the_pick_random_block
    "Table 1-1. Examples of Using the Pick Random Block") shows some examples of using
    this block.
  prefs: []
  type: TYPE_NORMAL
- en: Table 1-1. Examples of Using the Pick Random Block
  prefs: []
  type: TYPE_NORMAL
- en: '| Example | Possible Outcome |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ![image with no caption](httpatomoreillycomsourcenostarchimages2134319.png.jpg)
    | {0, 1} |'
  prefs: []
  type: TYPE_TB
- en: '| ![image with no caption](httpatomoreillycomsourcenostarchimages2134321.png.jpg)
    | {0, 1, 2, 3, ..., 10} |'
  prefs: []
  type: TYPE_TB
- en: '| ![image with no caption](httpatomoreillycomsourcenostarchimages2134323.png.jpg)
    | {–2, –1, 0, 1, 2} |'
  prefs: []
  type: TYPE_TB
- en: '| ![image with no caption](httpatomoreillycomsourcenostarchimages2134325.png.jpg)
    | {0, 10, 20, 30, ..., 100} |'
  prefs: []
  type: TYPE_TB
- en: '| ![image with no caption](httpatomoreillycomsourcenostarchimages2134327.png.jpg)
    | {0, 0 .1, 0 .15, 0 .267, 0 .3894, ..., 1 .0} |'
  prefs: []
  type: TYPE_TB
- en: '| ![image with no caption](httpatomoreillycomsourcenostarchimages2134329.png.jpg)
    | {0, 0 .01, 0 .12, 0 .34, 0 .58, ..., 1 .0} |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*The outputs of* **pick random 0 to 1** *and* **pick random 0 to 1.0** *are
    different. The first case will give you either a 1 or a 0, but the second gives
    a decimal value between 0 and 1\. If any input to the* **pick random** *block
    contains a decimal point, the output will also be a decimal value.*'
  prefs: []
  type: TYPE_NORMAL
- en: Mathematical Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Scratch also supports a large number of mathematical functions. The **sqrt of**
    block groups together 14 math functions that can be selected from the drop-down
    menu, including square root, trigonometric, logarithmic, and exponential functions.
    Refer to *MathematicalFunctions.pdf* for an extensive coverage of these functions.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter provided a high-level overview of Scratch and its programming environment.
    You learned about the various elements of the user interface and even created
    a game! We also explored Scratch’s mathematical operators and functions.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you’ve seen the most basic information you need to create some
    powerful scripts in Scratch, but that’s only one step on the road to writing awesome
    programs. In the chapters that follow, you’ll dig deeper into how you can use
    Scratch to develop your programming skills.
  prefs: []
  type: TYPE_NORMAL
- en: Problems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| **Q:** | 1\. Write down the result of each block in the script below. Is
    there a pattern in these products?![image with no caption](httpatomoreillycomsourcenostarchimages2134331.png.jpg)
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Q:** | 2\. Is there a pattern in the products 9 × 9, 99 × 99, 999 × 999,
    ..., etc.? Use the **say** command to find the result of these products and check
    your answer. |'
  prefs: []
  type: TYPE_TB
- en: '| **Q:** | 3\. Complete the following table by writing the value of each expression.'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; Expression &#124; Value &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; --- &#124; --- &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 3 + (2 × 5) &#124;   &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; (10 / 2) – 3 &#124;   &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 7 + (8 × 2) – 4 &#124;   &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; (2 + 3) × 4 &#124;   &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 5 + (2 × (7 – 4)) &#124;   &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; (11 – 5) × (2 + 1) / 2 &#124;   &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 5 × (5 + 4) – 2 × (1 + 3) &#124;   &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; (6 + 12) mod 4 &#124;   &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 3 × (13 mod 3 ) &#124;   &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 5 + (17 mod 5) – 3 &#124;   &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: Now, use the **say** command and the appropriate operator blocks to check your
    answers. |
  prefs: []
  type: TYPE_NORMAL
- en: '| **Q:** | 4\. Evaluate the following Scratch expressions using a pencil and
    paper. Let *x* = 2 and *y* = 4.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2134333.png.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_IMG
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2134335.png.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_IMG
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2134337.png.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_IMG
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2134339.png.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_IMG
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2134341.png.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_IMG
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Q:** | 5\. Use the **say** command and the appropriate blocks from the
    *Operators* palette to calculate the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The square root of 32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The sine of 30°
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The cosine of 60°
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The result of rounding 99.459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Q:** | 6\. Create a function block that calculates the average of the following
    three numbers: 90, 95, and 98\. Display the result using the **say** block. |'
  prefs: []
  type: TYPE_TB
- en: '| **Q:** | 7\. Create a function block that converts 60°F to Celsius. (Hint:
    *C* = (5/9) × (*F* – 32).) |'
  prefs: []
  type: TYPE_TB
- en: '| **Q:** | 8\. Create a function block that calculates the area of a trapezoid
    with a height of 4/6 foot and bases of lengths 5/9 foot and 22/9 foot. (Hint:
    *A* = 0.5 × (*b*[1] + *b*[2]) × *h*, where *h* is the height and *b*[1] and *b*[2]
    are the lengths of the two bases.) |'
  prefs: []
  type: TYPE_TB
- en: '| **Q:** | 9\. Create a function block that calculates the force needed to
    accelerate a 2,000 kg car 3 m/s². (Hint: *Force* = *mass* × *acceleration*.) |'
  prefs: []
  type: TYPE_TB
- en: '| **Q:** | 10\. The cost of electricity is $0.06 per kilowatt-hour. Create
    a function block that calculates the cost of using a 1,500-watt air conditioner
    for 2 hours. (Hint: *Energy* = *power* × *time*.) |'
  prefs: []
  type: TYPE_TB
- en: '| **Q:** | 11\. With a simple mathematical trick, you can use the **round**
    operator to round a number to a specific decimal place. For example, you can round
    the number 5.3567 to the nearest tenth (that is, the first position to the right
    of the decimal point) using these three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; a. &#124; 5.3567 × 10 = 53.567 &#124; (Multiply the number by 10.) &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; b. &#124; round(53.567) = 54 &#124; (Round the answer from step a.)
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; c. &#124; 54/10 = 5.4 &#124; (Divide the answer from step b by 10.)
    &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: What changes would you need to make to the above steps to round to the nearest
    hundredth (i.e., the second position to the right of the decimal point)? Create
    a function block that rounds 5.3567 to the nearest tenth (or hundredth) and display
    its output using the **say** block. |
  prefs: []
  type: TYPE_NORMAL
