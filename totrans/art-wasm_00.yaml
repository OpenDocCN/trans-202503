- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](Images/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: Welcome to *The Art of WebAssembly*. This book teaches you how to read, write,
    and understand WebAssembly at the virtual machine level. It will help you learn
    how WebAssembly interacts with JavaScript, the web browser, and the embedding
    environment. By the end, you’ll comprehend what WebAssembly is, its ideal use
    cases, and how to write WebAssembly that performs at near-native speeds.
  prefs: []
  type: TYPE_NORMAL
- en: Who Should Read This Book
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book is for web developers interested in understanding when and why to
    use WebAssembly. If you truly want to grasp WebAssembly, you need to learn it
    in detail. Several books have been written on various WebAssembly toolchains.
    This book is not specific to writing C/C++ or Rust, or any other language for
    WebAssembly; instead, it explores WebAssembly’s mechanisms and capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: This book is for users who want to understand what WebAssembly is, what it can
    do, and how to use it best. WebAssembly can perform better and create smaller
    downloads and memory footprints than JavaScript. But developing high-performing
    WebAssembly applications requires more than simply writing an app in a language
    like C++/Rust or AssemblyScript and compiling it in WebAssembly. To build an application
    that executes two or three times as fast as its JavaScript equivalent, you’ll
    need to know how WebAssembly works at a deeper level.
  prefs: []
  type: TYPE_NORMAL
- en: Readers should have a basic familiarity with web technologies, such as JavaScript,
    HTML, and CSS, but don’t need to be experts in any of them. In its current incarnation,
    it isn’t easy to use WebAssembly without understanding the web and how it works.
    I don’t explain the basics of a web page, but I also don’t assume readers have
    much knowledge of how the web works either.
  prefs: []
  type: TYPE_NORMAL
- en: Why Users Are Interested in WebAssembly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At the first WebAssembly summit, Ashley Williams ([@ag_dubs](http://www.twitter.com/@ag_dubs))
    presented the result of her Twitter polls asking WebAssembly users why they were
    interested in the technology. Here are the results:'
  prefs: []
  type: TYPE_NORMAL
- en: Multi-language, 40.1 percent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smaller faster code, 36.8 percent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sandboxed (security), 17.3 percent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'She then asked users who were interested in WebAssembly for its support of
    multiple languages why that was so:'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript doesn’t meet my needs, 43.5 percent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reuse of existing libraries, 40.8 percent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preexisting app distro (distribution), 8.1 percent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Of those users who thought JavaScript didn’t meet their needs, she asked why:'
  prefs: []
  type: TYPE_NORMAL
- en: Performance is bad or inconsistent, 42 percent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ecosystem doesn’t meet my needs, 17.4 percent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I don’t like or understand it, 31.3 percent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can watch her talk, “Why the #wasmsummit Website Isn’t Written in Wasm,”
    on YouTube at [https://www.youtube.com/watch?v=J5Rs9oG3FdI](https://www.youtube.com/watch?v=J5Rs9oG3FdI).'
  prefs: []
  type: TYPE_NORMAL
- en: Although these polls weren’t scientific, they’re still rather illuminating.
    For one, if you combine the first and third poll users interested in using WebAssembly
    to improve an app’s performance, the total is more than 55 percent. Improving
    your code’s performance with WebAssembly is unquestionably possible. But to really
    utilize WebAssembly isn’t magic; you just need to know what you’re doing. By the
    end of this book, you’ll know enough about WebAssembly to drastically improve
    the performance of your web apps.
  prefs: []
  type: TYPE_NORMAL
- en: Why the World Needs WebAssembly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’ve been developing web applications since the mid-1990s. Initially, web pages
    were no more than documents with images. That changed with the emergence of Java
    and JavaScript. At the time, JavaScript was a toy language that could add rollover
    effects to buttons on your web pages. Java was the real deal, and the Java virtual
    machine (JVM) was an exciting technology. But Java never reached its full potential
    on the web platform. Java requires a plug-in, and the plug-in technology eventually
    fell out of fashion when it became a security and malware nightmare.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, Java is a proprietary technology, which prevented its direct
    integration into the web browser. However, WebAssembly is different in that it
    wasn’t created unilaterally by a single technology company. WebAssembly began
    its life as a collaboration between many hardware and software vendors, such as
    Google, Mozilla, Microsoft, and Apple. It’s available without a plug-in in every
    modern web browser. You can use it to write hardware-independent software using
    Node.js. Because it’s not proprietary, any hardware or software platform can use
    it without royalty or permission. It fulfills the 1990s-era dream of *one binary
    to rule them all*.
  prefs: []
  type: TYPE_NORMAL
- en: What’s in This Book
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this book, we will walk you through how WebAssembly works at a low level
    by introducing you to WebAssembly Text format. We will cover many low-level topics
    and take some time to show you how WebAssembly works with JavaScript in Node.js
    and web-based applications. The book is intended to be read in order, with concepts
    building on each other. There are also references throughout the book to code
    examples that can be found at [https://wasmbook.com](https://wasmbook.com).
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 1: An Introduction to WebAssembly**'
  prefs: []
  type: TYPE_NORMAL
- en: We go into detail about what WebAssembly is, what it isn’t, and when best to
    use it. You’re introduced to WebAssembly Text (WAT), which allows you to understand
    how WebAssembly works at the lowest level. We also set up the environment you’ll
    use to follow along with the examples in the book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Chapter 2: WebAssembly Text Basics**'
  prefs: []
  type: TYPE_NORMAL
- en: We cover the basics of WAT and how it relates to high-level languages that deploy
    to WebAssembly. You’ll write your first WAT program, and we’ll discuss fundamentals
    like variable use and control flow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Chapter 3: Functions and Tables**'
  prefs: []
  type: TYPE_NORMAL
- en: We discuss creating functions in WebAssembly modules and calling them from JavaScript.
    You’ll build a program to check for prime numbers to illustrate these concepts.
    We investigate calling functions from tables and performance implications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Chapter 4: Low-Level Bit Manipulation**'
  prefs: []
  type: TYPE_NORMAL
- en: You learn about the low-level concepts you can use to improve your WebAssembly
    modules’ performance, such as number systems, bit masking, and 2s complement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Chapter 5: Strings in WebAssembly**'
  prefs: []
  type: TYPE_NORMAL
- en: WebAssembly doesn’t have a built-in string data type, so in this chapter you
    will learn how strings are represented in WebAssembly, and how to manipulate them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Chapter 6: Linear Memory**'
  prefs: []
  type: TYPE_NORMAL
- en: You’re introduced to linear memory and how WebAssembly modules use it to share
    large data sets with JavaScript or an alternative embedding environment. We start
    creating an object collision program that sets objects moving randomly and checks
    for object collisions, which we then use throughout the book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Chapter 7: Web Applications**'
  prefs: []
  type: TYPE_NORMAL
- en: You learn how to create a simple web application using HTML, CSS, JavaScript,
    and WebAssembly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Chapter 8: Working with the Canvas**'
  prefs: []
  type: TYPE_NORMAL
- en: We discuss how to use the HTML canvas with WebAssembly to create lightning-fast
    web animations. We use the canvas to improve our object collision application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Chapter 9: Optimizing Performance**'
  prefs: []
  type: TYPE_NORMAL
- en: You learn how WebAssembly works well for computationally intensive tasks, such
    as collision detection. You spend some time using Chrome and Firefox profilers
    and other optimization tools to improve our applications’ performance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Chapter 10: Debugging WebAssembly**'
  prefs: []
  type: TYPE_NORMAL
- en: We will cover debugging basics such as logging to the console using alerts and
    stack traces. You will also learn how to use the debuggers in Chrome and Firefox
    to step through our WebAssembly code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Chapter 11: AssemblyScript**'
  prefs: []
  type: TYPE_NORMAL
- en: We discuss using WAT to understand high-level languages by using it to evaluate
    AssemblyScript, a high-level language designed to deploy to WebAssembly in an
    efficient way.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
