["```\n{-# OPTIONS -Wall #-}\n\nmodule Geometry where\n\nimport SimpleVec ( R, Vec, (*^) )\nimport CoordinateSystems ( Position, cylindrical, spherical, cart, cyl, sph\n                         , shiftPosition, displacement )\n```", "```\ndata Curve = Curve { curveFunc          :: R -> Position\n                   , startingCurveParam :: R  -- t_a\n                   , endingCurveParam   :: R  -- t_b\n                   }\n```", "```\ncircle2 :: Curve\ncircle2 = Curve (\\t -> cart (2 * cos t) (2 * sin t) 0) 0 (2*pi)\n```", "```\ncircle2' :: Curve\ncircle2' = Curve (\\phi -> cyl 2 phi 0) 0 (2*pi)\n```", "```\nunitCircle :: Curve\nunitCircle = Curve (\\t -> cyl 1 t 0) 0 (2 * pi)\n```", "```\nstraightLine :: Position  -- starting position\n             -> Position  -- ending position\n             -> Curve     -- straight-line curve\nstraightLine r1 r2 = let d = displacement r1 r2\n                         f t = shiftPosition (t *^ d) r1\n                     in Curve f 0 1\n```", "```\ndata Surface = Surface { surfaceFunc :: (R,R) -> Position\n                       , lowerLimit  :: R       -- s_l\n                       , upperLimit  :: R       -- s_u\n                       , lowerCurve  :: R -> R  -- t_l(s)\n                       , upperCurve  :: R -> R  -- t_u(s)\n                       }\n```", "```\nunitSphere :: Surface\nunitSphere = Surface (\\(th,phi) -> cart (sin th * cos phi)\n                                        (sin th * sin phi)\n                                        (cos th))\n                     0 pi (const 0) (const $ 2*pi)\n```", "```\nunitSphere' :: Surface\nunitSphere' = Surface (\\(th,phi) -> sph 1 th phi)\n                      0 pi (const 0) (const $ 2*pi)\n```", "```\nparabolaSurface :: Surface\nparabolaSurface = Surface (\\(x,y) -> cart x y 0)\n                          (-2) 2 (\\x -> x*x) (const 4)\n```", "```\nshiftSurface :: Vec -> Surface -> Surface\nshiftSurface d (Surface g sl su tl tu)\n    = Surface (shiftPosition d . g) sl su tl tu\n```", "```\ncenteredSphere :: R -> Surface\ncenteredSphere r = Surface (\\(th,phi) -> sph r th phi)\n                           0 pi (const 0) (const $ 2*pi)\n```", "```\nsphere :: R -> Position -> Surface\nsphere radius center\n    = shiftSurface (displacement (cart 0 0 0) center)\n      (centeredSphere radius)\n```", "```\nnorthernHemisphere :: Surface\nnorthernHemisphere = Surface (\\(th,phi) -> sph 1 th phi)\n                             0 (pi/2) (const 0) (const $ 2*pi)\n```", "```\ndisk :: R -> Surface\ndisk radius = Surface (\\(s,phi) -> cyl s phi 0)\n                      0 radius (const 0) (const (2*pi))\n```", "```\nunitCone :: R -> Surface\nunitCone theta = Surface (\\(r,phi) -> sph r theta phi)\n                         0 1 (const 0) (const (2*pi))\n```", "```\ndata Volume = Volume { volumeFunc :: (R,R,R) -> Position\n                     , loLimit    :: R            -- s_l\n                     , upLimit    :: R            -- s_u\n                     , loCurve    :: R -> R       -- t_l(s)\n                     , upCurve    :: R -> R       -- t_u(s)\n                     , loSurf     :: R -> R -> R  -- u_l(s,t)\n                     , upSurf     :: R -> R -> R  -- u_u(s,t)\n                     }\n```", "```\nunitBall :: Volume\nunitBall = Volume spherical 0 1 (const 0) (const pi)\n                  (\\_ _ -> 0) (\\_ _ -> 2*pi)\n```", "```\ncenteredCylinder :: R       -- radius\n                 -> R       -- height\n                 -> Volume  -- cylinder\ncenteredCylinder radius height\n  = Volume cylindrical 0 radius (const 0) (const (2*pi))\n           (\\_ _ -> 0) (\\_ _ -> height)\n```", "```\ncircle :: Position  -- center position\n       -> R         -- radius\n       -> Curve\ncircle r radius = undefined r radius\n```", "```\nsquare :: Curve\nsquare = Curve squareFunc 0 4\n\nsquareFunc :: R -> Position\nsquareFunc t\n    |           t < 1  = cart undefined   (-1)   0\n    | 1 <= t && t < 2  = cart     1    undefined 0\n    | 2 <= t && t < 3  = cart undefined     1    0\n    | otherwise        = cart   (-1)   undefined 0\n```", "```\nnorthernHalfBall :: Volume\nnorthernHalfBall = undefined\n```", "```\ncenteredBall :: R -> Volume\ncenteredBall = undefined\n```", "```\nshiftVolume :: Vec -> Volume -> Volume\nshiftVolume = undefined\n```", "```\nquarterDiskBoundary :: R -> Curve\nquarterDiskBoundary = undefined\n```", "```\nquarterCylinder :: R -> R -> Volume\nquarterCylinder = undefined\n```"]