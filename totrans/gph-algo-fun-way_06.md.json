["```\ndef dfs_recursive_basic(g: Graph, ind: int, seen: list): \n  ❶ seen[ind] = True\n    current: Node = g.nodes[ind]\n\n    for edge in current.get_edge_list():\n        neighbor: int = edge.to_node\n      ❷ if not seen[neighbor]:\n            dfs_recursive_basic(g, neighbor, seen) def depth_first_search_basic(g: Graph, start: int):\n    seen: list = [False] * g.num_nodes\n    dfs_recursive_basic(g, start, seen) \n```", "```\ndef depth_first_search_basic_all(g: Graph): \n    seen: list = [False] * g.num_nodes\n    for ind in range(g.num_nodes):\n      ❶ if not seen[ind]:\n            dfs_recursive_basic(g, ind, seen) \n```", "```\ndef dfs_recursive_path(g: Graph, ind: int, seen: list, last: list): \n    seen[ind] = True\n    current: Node = g.nodes[ind]\n\n    for edge in current.get_edge_list():\n        neighbor: int = edge.to_node\n        if not seen[neighbor]:\n          ❶ last[neighbor] = ind\n            dfs_recursive_path(g, neighbor, seen, last) def depth_first_search_path(g: Graph) -> list: \n    seen: list = [False] * g.num_nodes\n    last: list = [-1] * g.num_nodes\n\n    for ind in range(g.num_nodes):\n        if not seen[ind]:\n            dfs_recursive_path(g, ind, seen, last)\n    return last \n```", "```\ndef depth_first_search_stack(g: Graph, start: int) -> list: \n    seen: list = [False] * g.num_nodes\n    last: list = [-1] * g.num_nodes\n    to_explore: list = [] ❶ to_explore.append(start)\n  ❷ while to_explore:\n      ❸ ind = to_explore.pop()\n        if not seen[ind]:\n            current: Node = g.nodes[ind]\n            seen[ind] = True\n\n          ❹ all_edges: list = current.get_sorted_edge_list()\n          ❺ all_edges.reverse()\n            for edge in all_edges:\n                neighbor: int = edge.to_node\n                if not seen[neighbor]:\n                    last[neighbor] = ind\n                    to_explore.append(neighbor)\n    return last \n```", "```\ndef dfs_recursive_cc(g: Graph, ind: int, component: list, curr_comp: int):  \n  ❶ component[ind] = curr_comp\n    current: Node = g.nodes[ind]\n\n    for edge in current.get_edge_list():\n        neighbor: int = edge.to_node\n      ❷ if component[neighbor] == -1:\n            dfs_recursive_cc(g, neighbor, component, curr_comp)\n\ndef dfs_connected_components(g: Graph) -> list:\n    component: list = [-1] * g.num_nodes\n    curr_comp: int = 0\n\n    for ind in range(g.num_nodes):\n        if component[ind] == -1:\n          ❸ dfs_recursive_cc(g, ind, component, curr_comp)\n            curr_comp += 1\n\n    return component \n```"]