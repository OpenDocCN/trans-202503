- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Numeric Keypads
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数字键盘
- en: In this chapter you will
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将
- en: Learn how to connect numeric keypads to your Arduino
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何将数字键盘连接到你的 Arduino
- en: Read values from the keypad in a sketch
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从键盘读取值并在草图中使用
- en: Expand on decision systems with the `switch case` statement
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `switch case` 语句扩展决策系统
- en: Create a PIN-controlled lock or switch
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 PIN 码控制的锁或开关
- en: Using a Numeric Keypad
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用数字键盘
- en: As your projects become more involved, you might want to accept numeric input
    from users when your Arduino isn’t connected to a device with a keyboard. For
    example, you might like the ability to turn something on or off by entering a
    secret number. One option would be to wire up 10 or more push buttons to various
    digital input pins (for the numbers 0 through 9), but it’s much easier to use
    a numeric keypad like the one shown in [Figure 11-1](#figure11-1).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你的项目变得更加复杂，当 Arduino 未连接到带键盘的设备时，你可能需要接受用户的数字输入。例如，你可能希望通过输入一个秘密数字来开启或关闭某个设备。一种选择是将
    10 个或更多的按钮接入不同的数字输入引脚（对应数字 0 到 9），但使用一个数字键盘要更简单，就像[图 11-1](#figure11-1)所示。
- en: '![f11001](image_fi/500587c11/f11001.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![f11001](image_fi/500587c11/f11001.png)'
- en: 'Figure 11-1: A numeric keypad'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-1：数字键盘
- en: One of the benefits of using a keypad is that it uses only 8 pins for 16 active
    buttons, and with the use of a clever Arduino library, you won’t need to add pull-down
    resistors for debouncing as we did in Chapter 4.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用键盘的好处之一是，它只需使用 8 个引脚就能支持 16 个活动按钮，并且借助一个聪明的 Arduino 库，你无需像在第 4 章那样为去抖动添加下拉电阻。
- en: At this point, you will need to download and install the Arduino Keypad library,
    which is available from[https://github.com/Chris--A/Keypad/archive/master.zip](https://github.com/Chris--A/Keypad/archive/master.zip).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你需要下载并安装 Arduino 键盘库，该库可从[https://github.com/Chris--A/Keypad/archive/master.zip](https://github.com/Chris--A/Keypad/archive/master.zip)获取。
- en: Wiring a Keypad
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 键盘接线
- en: Physically wiring the keypad to the Arduino is easy. With the keypad facing
    up, take a look at the end of the ribbon cable. You’ll see eight female connectors
    in a row, as shown in [Figure 11-2](#figure11-2).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 将键盘接线到 Arduino 上很简单。将键盘正面朝上，看看带状电缆的末端。你会看到一排八个女性连接器，如[图 11-2](#figure11-2)所示。
- en: '![f11002](image_fi/500587c11/f11002.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![f11002](image_fi/500587c11/f11002.png)'
- en: 'Figure 11-2: The keypad connector'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-2：键盘连接器
- en: Reading from left to right, the sockets are numbered from 8 to 1\. For all the
    keypad projects in this book, you’ll plug the keypad pins into the Arduino pins
    as shown in [Table 11-1](#table11-1).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从左到右读取插座，编号从 8 到 1。对于本书中的所有键盘项目，你将按照[表 11-1](#table11-1)中所示，将键盘引脚插入 Arduino
    引脚。
- en: 'Table 11-1: Keypad-to-Arduino Connections'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 表 11-1：键盘与 Arduino 连接
- en: '| **Keypad pin number** | **Arduino pin** |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| **键盘引脚编号** | **Arduino 引脚** |'
- en: '| --- | --- |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 8 | Digital 9 |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 数字 9 |'
- en: '| 7 | Digital 8 |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 数字 8 |'
- en: '| 6 | Digital 7 |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 数字 7 |'
- en: '| 5 | Digital 6 |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 数字 6 |'
- en: '| 4 | Digital 5 |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 数字 5 |'
- en: '| 3 | Digital 4 |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 数字 4 |'
- en: '| 2 | Digital 3 |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 数字 3 |'
- en: '| 1 | Digital 2 |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 数字 2 |'
- en: Programming for the Keypad
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为键盘编程
- en: When you write a sketch for the keypad, you must include certain lines of code
    to enable the keypad, as identified in [Listing 11-1](#listing11-1). The required
    code starts at 1 and ends at 5.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当你为键盘编写草图时，必须包括一些代码行来启用键盘，这些代码在[清单 11-1](#listing11-1)中有说明。所需的代码从第 1 行开始，到第
    5 行结束。
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 11-1: Numeric keypad demonstration sketch'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 11-1：数字键盘示范草图
- en: At 2, we introduce `keys`, a char variable array that contains one or more letters,
    numbers, or symbols that can be generated with a computer keyboard. In this case,
    it contains the numbers and symbols that your Arduino can expect from the keypad.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 2 行，我们介绍了 `keys`，这是一个字符变量数组，包含一个或多个可以通过计算机键盘生成的字母、数字或符号。在这个例子中，它包含了你的 Arduino
    可以从键盘接收到的数字和符号。
- en: The lines of code at 3 and 4 define which digital pins are used on the Arduino.
    Using these lines and [Table 11-1](#table11-1), you can change the digital pins
    used for input if you want.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 第 3 行和第 4 行的代码定义了在 Arduino 上使用的数字引脚。通过这些代码和[表 11-1](#table11-1)，如果你想改变用于输入的数字引脚，可以进行修改。
- en: Testing the Sketch
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试草图
- en: After uploading the sketch, open the Serial Monitor and press some keys on the
    keypad. The characters for the keys you pressed will be displayed in the Serial
    Monitor, as shown in [Figure 11-3](#figure11-3).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 上传草图后，打开串口监视器并按下键盘上的一些按键。你按下的按键字符将显示在串口监视器中，如[图 11-3](#figure11-3)所示。
- en: '![f11003](image_fi/500587c11/f11003.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![f11003](image_fi/500587c11/f11003.png)'
- en: 'Figure 11-3: The result of pressing keys on the keypad'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-3：按下键盘上的按键后的结果
- en: Making Decisions with switch case
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`switch case`做决策
- en: 'When you need to compare two or more variables against another value, you’ll
    often find it easier and neater to use a `switch case` statement instead of an
    `if then` statement, because `switch case` statements can make an indefinite number
    of comparisons and run code when the comparison returns true. For example, if
    we had the integer variable `xx` with a possible value of `1`, `2`, or `3` and
    we wanted to run different code based on whether the value was `1`, `2`, or `3`,
    we could use code like the following to replace our `if then` statement:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要将两个或更多变量与另一个值进行比较时，使用`switch case`语句通常会比使用`if then`语句更容易且更简洁，因为`switch case`语句可以进行任意次数的比较，并在比较为真时执行代码。例如，如果我们有一个整数变量`xx`，其可能的值为`1`、`2`或`3`，并且我们希望根据值为`1`、`2`或`3`来运行不同的代码，我们可以使用以下代码来替换`if
    then`语句：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The optional `default:` section at the end of this code segment lets you choose
    to run some code when true comparisons no longer exist in the `switch case` statement.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码段末尾的可选`default:`部分允许你选择在`switch case`语句中没有有效比较时运行某些代码。
- en: 'Project #32: Creating a Keypad-Controlled Lock'
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '项目 #32：创建一个键盘控制的锁'
- en: In this project, we’ll start to create a keypad-controlled lock. We’ll use the
    basic setup described in the sketch in [Listing 11-1](#listing11-1), but we’ll
    also include a six-digit secret code that a user needs to enter on the keypad.
    The Serial Monitor will tell the user whether the code they’ve input is correct
    or not.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将开始创建一个键盘控制的锁。我们将使用[清单 11-1](#listing11-1)中描述的基本设置，但还会包含一个六位数的秘密代码，用户需要在键盘上输入。串口监视器会告诉用户他们输入的代码是否正确。
- en: The secret code is stored in the sketch but is not displayed to the user. The
    sketch will call different functions depending on whether the input code (PIN)
    is correct. To activate and deactivate the lock, the user must press `*` and then
    the secret number, followed by `#`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 秘密代码存储在草图中，但不会显示给用户。根据输入的代码（PIN）是否正确，草图将调用不同的函数。为了激活和解除激活锁，用户必须按下`*`，然后输入秘密号码，再按`#`。
- en: The Sketch
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草图
- en: 'Enter and upload this sketch:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并上传此草图：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Understanding the Sketch
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解草图
- en: After the usual setup routines (as described in [Listing 11-1](#listing11-1)),
    the sketch continually “listens” to the keypad by running the function `readKeypad()`
    at 6. After a key is pressed, the Arduino examines the value of the key using
    a `switch case` statement at 5. The Arduino stores the values of the keys pressed
    on the keypad in the array `attempt`, and when the user presses `#`, the Arduino
    calls the function `checkPIN()`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成常规的初始化例程后（如[清单 11-1](#listing11-1)所示），草图会不断地“监听”键盘，通过运行第6行的`readKeypad()`函数来实现。按下按键后，Arduino
    会使用第5行的`switch case`语句检查按下的按键值。Arduino 会将按下的按键值存储在`attempt`数组中，当用户按下`#`时，Arduino
    会调用`checkPIN()`函数。
- en: At 2, the Arduino compares the values of the pressed keys against the PIN stored
    in the array `PIN` at 1. If the correct sequence is entered, the function `correctPIN()`
    at 3 is called, where you can add your own code to execute. If an incorrect sequence
    is entered, the function `incorrectPIN()` at 4 is called. Finally, once the user’s
    entry has been checked, the code deletes the entry from memory so the code is
    ready for the next test.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在第2行，Arduino 将按键值与存储在`PIN`数组中的 PIN 值进行比较。如果输入的序列正确，函数`correctPIN()`将在第3行被调用，你可以在其中添加自己的代码进行执行。如果输入的序列错误，则调用第4行的`incorrectPIN()`函数。最后，一旦用户的输入被检查完毕，代码会从内存中删除输入值，以便为下一个测试做好准备。
- en: Testing the Sketch
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试草图
- en: After you’ve uploaded the sketch to your Arduino, open the Serial Monitor window,
    press star (`*`) on the numeric keypad, type the secret number, and then enter
    the pound sign (`#`). Try entering both correct and incorrect numbers. Your results
    should be similar to the output shown in [Figure 11-4](#figure11-4).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在将草图上传到 Arduino 后，打开串口监视器窗口，按下数字键盘上的星号（`*`），输入秘密号码，然后按下井号（`#`）。尝试输入正确和错误的数字。你的结果应类似于[图
    11-4](#figure11-4)中显示的输出。
- en: This example serves as a perfect foundation for your own PIN-activated devices,
    such as locks, alarms, or anything else you can imagine. Just be sure to replace
    the code in `correctPIN()` and `incorrectPIN()` with the code you want to run
    when a correct or incorrect sequence is entered.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例为你自己的PIN激活设备（如锁、警报或任何你能想象的设备）提供了一个完美的基础。只需确保在`correctPIN()`和`incorrectPIN()`中替换你希望在输入正确或错误的序列时执行的代码。
- en: '![f11004](image_fi/500587c11/f11004.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![f11004](image_fi/500587c11/f11004.png)'
- en: 'Figure 11-4: Results from entering correct and incorrect PINs'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图11-4：输入正确和错误的 PIN 后的结果
- en: Looking Ahead
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展望未来
- en: 'You have learned yet another way to gather input for your Arduino. You’ve also
    gained the foundational knowledge to create a useful method of controlling a sketch
    using a numeric keypad, as well as the foundations for a combination lock to access
    anything that your Arduino can control. Furthermore, you’ve learned the very useful
    `switch case` statement. In the next chapter, you’ll learn about another form
    of input: the touchscreen.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学会了另一种为你的 Arduino 收集输入的方式。你还掌握了创建一个有用的方法来通过数字键盘控制草图的基础知识，以及创建一个组合锁来访问你 Arduino
    能控制的任何内容的基础知识。此外，你还学会了非常有用的`switch case`语句。在下一章中，你将学习另一种输入形式：触摸屏。
