- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Numeric Keypads
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter you will
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to connect numeric keypads to your Arduino
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read values from the keypad in a sketch
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expand on decision systems with the `switch case` statement
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a PIN-controlled lock or switch
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a Numeric Keypad
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As your projects become more involved, you might want to accept numeric input
    from users when your Arduino isn’t connected to a device with a keyboard. For
    example, you might like the ability to turn something on or off by entering a
    secret number. One option would be to wire up 10 or more push buttons to various
    digital input pins (for the numbers 0 through 9), but it’s much easier to use
    a numeric keypad like the one shown in [Figure 11-1](#figure11-1).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '![f11001](image_fi/500587c11/f11001.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11-1: A numeric keypad'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: One of the benefits of using a keypad is that it uses only 8 pins for 16 active
    buttons, and with the use of a clever Arduino library, you won’t need to add pull-down
    resistors for debouncing as we did in Chapter 4.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you will need to download and install the Arduino Keypad library,
    which is available from[https://github.com/Chris--A/Keypad/archive/master.zip](https://github.com/Chris--A/Keypad/archive/master.zip).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Wiring a Keypad
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Physically wiring the keypad to the Arduino is easy. With the keypad facing
    up, take a look at the end of the ribbon cable. You’ll see eight female connectors
    in a row, as shown in [Figure 11-2](#figure11-2).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '![f11002](image_fi/500587c11/f11002.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11-2: The keypad connector'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Reading from left to right, the sockets are numbered from 8 to 1\. For all the
    keypad projects in this book, you’ll plug the keypad pins into the Arduino pins
    as shown in [Table 11-1](#table11-1).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 11-1: Keypad-to-Arduino Connections'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '| **Keypad pin number** | **Arduino pin** |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
- en: '| 8 | Digital 9 |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
- en: '| 7 | Digital 8 |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
- en: '| 6 | Digital 7 |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
- en: '| 5 | Digital 6 |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
- en: '| 4 | Digital 5 |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
- en: '| 3 | Digital 4 |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
- en: '| 2 | Digital 3 |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
- en: '| 1 | Digital 2 |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
- en: Programming for the Keypad
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you write a sketch for the keypad, you must include certain lines of code
    to enable the keypad, as identified in [Listing 11-1](#listing11-1). The required
    code starts at 1 and ends at 5.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 11-1: Numeric keypad demonstration sketch'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: At 2, we introduce `keys`, a char variable array that contains one or more letters,
    numbers, or symbols that can be generated with a computer keyboard. In this case,
    it contains the numbers and symbols that your Arduino can expect from the keypad.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: The lines of code at 3 and 4 define which digital pins are used on the Arduino.
    Using these lines and [Table 11-1](#table11-1), you can change the digital pins
    used for input if you want.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Sketch
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After uploading the sketch, open the Serial Monitor and press some keys on the
    keypad. The characters for the keys you pressed will be displayed in the Serial
    Monitor, as shown in [Figure 11-3](#figure11-3).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '![f11003](image_fi/500587c11/f11003.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11-3: The result of pressing keys on the keypad'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Making Decisions with switch case
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you need to compare two or more variables against another value, you’ll
    often find it easier and neater to use a `switch case` statement instead of an
    `if then` statement, because `switch case` statements can make an indefinite number
    of comparisons and run code when the comparison returns true. For example, if
    we had the integer variable `xx` with a possible value of `1`, `2`, or `3` and
    we wanted to run different code based on whether the value was `1`, `2`, or `3`,
    we could use code like the following to replace our `if then` statement:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The optional `default:` section at the end of this code segment lets you choose
    to run some code when true comparisons no longer exist in the `switch case` statement.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'Project #32: Creating a Keypad-Controlled Lock'
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this project, we’ll start to create a keypad-controlled lock. We’ll use the
    basic setup described in the sketch in [Listing 11-1](#listing11-1), but we’ll
    also include a six-digit secret code that a user needs to enter on the keypad.
    The Serial Monitor will tell the user whether the code they’ve input is correct
    or not.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: The secret code is stored in the sketch but is not displayed to the user. The
    sketch will call different functions depending on whether the input code (PIN)
    is correct. To activate and deactivate the lock, the user must press `*` and then
    the secret number, followed by `#`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: The Sketch
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Enter and upload this sketch:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Understanding the Sketch
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After the usual setup routines (as described in [Listing 11-1](#listing11-1)),
    the sketch continually “listens” to the keypad by running the function `readKeypad()`
    at 6. After a key is pressed, the Arduino examines the value of the key using
    a `switch case` statement at 5. The Arduino stores the values of the keys pressed
    on the keypad in the array `attempt`, and when the user presses `#`, the Arduino
    calls the function `checkPIN()`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: At 2, the Arduino compares the values of the pressed keys against the PIN stored
    in the array `PIN` at 1. If the correct sequence is entered, the function `correctPIN()`
    at 3 is called, where you can add your own code to execute. If an incorrect sequence
    is entered, the function `incorrectPIN()` at 4 is called. Finally, once the user’s
    entry has been checked, the code deletes the entry from memory so the code is
    ready for the next test.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Sketch
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After you’ve uploaded the sketch to your Arduino, open the Serial Monitor window,
    press star (`*`) on the numeric keypad, type the secret number, and then enter
    the pound sign (`#`). Try entering both correct and incorrect numbers. Your results
    should be similar to the output shown in [Figure 11-4](#figure11-4).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: This example serves as a perfect foundation for your own PIN-activated devices,
    such as locks, alarms, or anything else you can imagine. Just be sure to replace
    the code in `correctPIN()` and `incorrectPIN()` with the code you want to run
    when a correct or incorrect sequence is entered.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '![f11004](image_fi/500587c11/f11004.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![f11004](image_fi/500587c11/f11004.png)'
- en: 'Figure 11-4: Results from entering correct and incorrect PINs'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图11-4：输入正确和错误的 PIN 后的结果
- en: Looking Ahead
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展望未来
- en: 'You have learned yet another way to gather input for your Arduino. You’ve also
    gained the foundational knowledge to create a useful method of controlling a sketch
    using a numeric keypad, as well as the foundations for a combination lock to access
    anything that your Arduino can control. Furthermore, you’ve learned the very useful
    `switch case` statement. In the next chapter, you’ll learn about another form
    of input: the touchscreen.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学会了另一种为你的 Arduino 收集输入的方式。你还掌握了创建一个有用的方法来通过数字键盘控制草图的基础知识，以及创建一个组合锁来访问你 Arduino
    能控制的任何内容的基础知识。此外，你还学会了非常有用的`switch case`语句。在下一章中，你将学习另一种输入形式：触摸屏。
