- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Journey Ahead
  prefs: []
  type: TYPE_NORMAL
- en: 'Your journey as a software engineer spans your entire career. There are many
    stops along the way: student, engineer, tech lead, maybe even manager. Most new
    engineers start with a technical foundation but little real-world experience.
    The chapters ahead will guide you toward the first milestone of your career, which
    you’ll reach when you can safely deliver code changes and work seamlessly with
    your team.'
  prefs: []
  type: TYPE_NORMAL
- en: Reaching the first milestone is difficult—the information you need is scattered
    across the internet or, worse, tucked away in someone’s head. This book consolidates
    key information that you need to be successful. But what does a successful software
    engineer look like, and how do you get there?
  prefs: []
  type: TYPE_NORMAL
- en: Your Destination
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Everyone begins as an entry-level engineer. To advance, you’ll need to be competent
    in several core areas.
  prefs: []
  type: TYPE_NORMAL
- en: Technical knowledge You know your computer science fundamentals. You know how
    to use integrated development environments (IDEs), build systems, debuggers, and
    test frameworks. You are familiar with continuous integration, metrics and monitoring,
    configuration, and packaging systems. You proactively create and improve test
    code. You consider operations when making architectural decisions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execution You create value by solving problems with code, and you understand
    the connection between your work and the business. You’ve built and deployed small
    and medium-sized features. You write, test, and review code. You share on-call
    duties and debug operational issues. You are proactive and dependable. You participate
    in technical talks, reading groups, interviews, and presentations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Communication You communicate clearly both in written and verbal form. You are
    able to give and receive feedback effectively. You proactively ask for help and
    get clarification in ambiguous situations. You raise issues and identify problems
    in a constructive manner. You provide help when possible and are starting to influence
    peers. You document your work. You write clear design documents and invite feedback.
    You are patient and empathetic when dealing with others.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leadership You work independently on well-scoped work. You learn from mistakes
    quickly. You handle change and ambiguity well. You actively participate in project
    and quarterly planning. You help new team members onboard. You give meaningful
    feedback to your manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Map for Your Journey
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get to your destination, you need a map. The rest of this chapter will help
    you navigate both this book and the beginning of your career. We start at Peak
    Newb, where all newbies begin. From there, we travel down Ramp-Up River, where
    you start coding and learning local conventions and processes. Next is Cape Contributor,
    where you ship some meaningful features. Shipping features means you will have
    to sail the storms of Operations Ocean. Finally, we will land in the safe haven
    of Competence Cove.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve annotated many paragraphs with chapter references. You can read this book
    linearly, or you can jump to the chapters you care most about. Many chapter references
    appear more than once in the outline; this is intentional. Chapters are grouped
    by subject, but the subjects we cover will span your career. You will discover
    new insights every time you revisit the material.
  prefs: []
  type: TYPE_NORMAL
- en: Peak Newb
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You begin your journey as a newbie. Get familiar with the company, the team,
    and how things get done. Attend onboarding meetings. Set up your development environment
    and system access, and figure out regular team processes and meetings. Read documentation
    and have discussions with teammates. Contribute by filling in documentation gaps
    you find in the onboarding process.
  prefs: []
  type: TYPE_NORMAL
- en: Your company might have a new hire orientation to help you get up and running.
    These programs teach you how the company works, provide a tour of the organization,
    and introduce company leadership. New hire programs also introduce you to new
    hires from other departments—your future colleagues. If your company doesn’t have
    a new hire program, ask your manager to explain the “org chart” (who is in charge
    of what and who reports to whom), the different departments, and how they relate;
    take notes.
  prefs: []
  type: TYPE_NORMAL
- en: Some companies have additional new software engineer onboarding processes to
    help you get access to systems, set up your development environment, and check
    out and build code. If no such process exists, you have an opportunity to create
    one! Write down what you do as you set up. (See Chapter 2, “Getting to Conscious
    Competence.”)
  prefs: []
  type: TYPE_NORMAL
- en: You should get assigned a small task to learn the basics of making a code change
    and shepherding it into production. If not, look or ask for some useful—but minor—change
    to make. It can be as small as updating a comment; the goal is to understand the
    steps, not to impress. (See Chapter 2, “Getting to Conscious Competence,” and
    Chapter 8, “Delivering Software.”)
  prefs: []
  type: TYPE_NORMAL
- en: Set up your code editor or IDE. Use the IDE that your team uses; if you don’t
    know it, find a tutorial online. Learning your IDE will save you a lot of time
    later. Configure your IDE to apply team code formatting conventions; ask what
    they are and how to apply them. (See Chapter 3, “Working with Code.”)
  prefs: []
  type: TYPE_NORMAL
- en: Make sure your manager adds you to team and company meetings—stand-ups, sprint
    planning, retrospectives, all-hands, and so on. Remind your manager to schedule
    a one-on-one meeting if they conduct them. (See Chapter 12, “Agile Planning,”
    and Chapter 13, “Working with Managers.”)
  prefs: []
  type: TYPE_NORMAL
- en: Ramp-Up River
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you’ve completed newbie tasks, you’ll take on your first real work for
    the team. You will probably work on an existing codebase. What you find might
    confuse or intimidate you. Ask questions, and have your team review your work
    frequently. (See Chapter 3, “Working with Code,” and Chapter 7, “Code Reviews.”)
  prefs: []
  type: TYPE_NORMAL
- en: Learning is critical as you ramp up. Investigate how code is built, tested,
    and deployed. Read pull requests and code reviews. Don’t be afraid to ask for
    more information. Sign up for tech talks, brown bags, reading groups, mentorship
    programs, and the like. (See Chapter 2, “Getting to Conscious Competence”; Chapter
    5, “Managing Dependencies”; Chapter 6, “Testing”; and Chapter 8, “Delivering Software.”)
  prefs: []
  type: TYPE_NORMAL
- en: Now is the time to build a relationship with your manager. Get to know their
    working style, understand their expectations, and talk to them about your goals.
    If your manager does one-on-ones, expect to have your first few sessions. Managers
    usually want to track progress, so ask your manager how to communicate status.
    (See Chapter 13, “Working with Managers.”)
  prefs: []
  type: TYPE_NORMAL
- en: You’ll probably also attend your first planning session, usually a sprint planning
    meeting. You might also join retrospective or all-hands meetings. Ask for an overview
    of the roadmap and development planning process. (See Chapter 12, “Agile Planning.”)
  prefs: []
  type: TYPE_NORMAL
- en: Cape Contributor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You’ll enter Cape Contributor once you begin working on larger tasks and features.
    The team trusts you to work more independently. Learn how to write production-grade
    code that’s operator friendly, properly manages dependencies, and has clean tests.
    (See Chapter 3, “Working with Code”; Chapter 4, “Writing Operable Code”; Chapter
    5, “Managing Dependencies”; and Chapter 6, “Testing.”)
  prefs: []
  type: TYPE_NORMAL
- en: You should be helping teammates now, too. Get involved in code reviews, and
    expect teammates to ask for ideas and feedback. Your team might forget that you’ve
    joined recently, so ask questions when you’re confused. (See Chapter 2, “Getting
    to Conscious Competence”; Chapter 7, “Code Reviews”; and Chapter 10, “Technical
    Design Process.”)
  prefs: []
  type: TYPE_NORMAL
- en: Most companies have quarterly planning and goal-setting cycles. Participate
    in team planning, and work with your manager to set goals or objectives and key
    results (OKRs). (See Chapter 12, “Agile Planning,” and Chapter 13, “Working with
    Managers.”)
  prefs: []
  type: TYPE_NORMAL
- en: Operations Ocean
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You’ll learn more about how code is delivered to users as you work on larger
    tasks. A lot happens during delivery: testing, build, release, deployment, and
    rollout. Finessing this process takes skill. (See Chapter 8, “Delivering Software.”)'
  prefs: []
  type: TYPE_NORMAL
- en: After rolling out your changes, you’ll have to operate your team’s software.
    Operations work is high stress and takes grit; customers will be impacted by instability.
    You’ll debug live software using metrics, logs, and trace tools. You might also
    enter an on-call rotation at this point. Exposure to operational work will show
    you how code behaves in users’ hands, and you’ll learn to protect your software.
    (See Chapter 4, “Writing Operable Code,” and Chapter 9, “Going On-Call.”)
  prefs: []
  type: TYPE_NORMAL
- en: Competence Cove
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your team will count on you to drive a small project now. You’ll need to write
    a technical design document and help with project planning. Designing software
    will expose you to a new level of complexity. Don’t settle for your first design;
    explore trade-offs and plan for your system to evolve over time. (See Chapter
    10, “Technical Design Process”; Chapter 11, “Creating Evolvable Architectures”;
    and Chapter 12, “Agile Planning.”)
  prefs: []
  type: TYPE_NORMAL
- en: Some of the early shine of your job has worn off. You see flaws in the architecture,
    the build and deploy system, and the testing environment. You are learning to
    balance regular work with necessary maintenance and refactoring. Don’t try to
    rewrite everything. (See Chapter 3, “Working with Code.”)
  prefs: []
  type: TYPE_NORMAL
- en: You also have thoughts about team processes. Write down your observations—what’s
    working and what isn’t—and discuss your ideas in a one-on-one with your manager.
    (See Chapter 13, “Working with Managers.”)
  prefs: []
  type: TYPE_NORMAL
- en: Now is also the time to work on longer-term goal setting and performance reviews.
    Work with your manager to understand the process and get feedback from peers.
    Discuss career aspirations, future work, projects, and ideas with your manager.
    (See Chapter 13, “Working with Managers,” and Chapter 14, “Navigating Your Career.”)
  prefs: []
  type: TYPE_NORMAL
- en: Onward!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You now have both a map and destination for your beginner’s journey. After landing
    at Competence Cove, you’ll be a full-fledged software engineer capable of working
    with your team to deliver valuable features. The remainder of the book will help
    you navigate the path. Our journey begins.
  prefs: []
  type: TYPE_NORMAL
