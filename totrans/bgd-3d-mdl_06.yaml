- en: '**7'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SPRINGS, SCREWS, AND OTHER ADVANCED MODELING**
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this chapter, you’ll learn some tricks for modeling geometrically complex
    shapes. You’ll learn how to use the *Coil* and *Thread* tools, which are commonly
    used to make springs and screws. You’ll also learn about a way to model complex
    geometry using *surfaces*, which you’ll use to design a 20-sided die.
  prefs: []
  type: TYPE_NORMAL
- en: '**Modeling a Coil**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Coil tool creates helical, or spiral-shaped, forms. These could also be
    made with a sweep on a 3D spiral path, but the Coil tool is a lot easier to use.
    To make a hollow tube for a heat exchange coil, you might use two coils—one for
    a New Body and one for a Cut.
  prefs: []
  type: TYPE_NORMAL
- en: To get started, select **Coil** from the **Create** drop-down menu. The software
    then asks you to choose a plane, which you should make perpendicular to the axis
    of the coil. The centerpoint of the coil’s cross-section will start at this plane.
    Draw a circle, like the one shown in [Figure 7-1](ch07.xhtml#ch07fig1), to specify
    the central axis and diameter of the coil.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/07fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-1: Select a point for the coil’s center axis and then draw a circle
    to specify the diameter.*'
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve set the circle’s diameter, the Coil dialog should pop up, and Fusion
    360 should display a model with the default parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure the circle you just drew is selected as the profile. In the **Type**
    field, choose what kind of dimensions you want to use to create the coil. The
    default setting asks you to specify the coil’s revolution and height. The software
    will use these dimensions to calculate the coil’s *pitch*, or the distance along
    the axis needed for the coil to make a full revolution. You may want to switch
    the type if, for instance, you don’t care how many revolutions the coil makes
    but do care about the specific pitch.
  prefs: []
  type: TYPE_NORMAL
- en: Select **Revolution and Height** and then specify how many turns the coil should
    make in the **Revolutions** field. In the **Height** field, specify the coil’s
    nominal height, which is the distance from the centerpoint of the topmost cross-section
    to the centerpoint of the bottommost cross-section. Note that it is not asking
    you for the coil’s overall height. If your coil needed to be exactly 100 mm tall,
    you would subtract the *Section Size* value, which is the diameter of the cross-section,
    from the Height value. In the **Rotation** field, set the coil to turn either
    clockwise or counterclockwise.
  prefs: []
  type: TYPE_NORMAL
- en: You already set the diameter when you drew the circle, but you can change it
    in the Diameter field. If you want the diameter to gradually increase or decrease,
    you can use the Angle field to give it a conical shape. Use **Section** to set
    the shape of the coil’s cross-section. You can choose to make it a circle, square,
    in-facing triangle, or out-facing triangle.
  prefs: []
  type: TYPE_NORMAL
- en: By default, that cross-section will center itself on the diameter you select,
    but if you wanted your coil to fit around an existing part with that diameter,
    you would set the Section Position field to Outside and choose the part. If you
    wanted it to fit inside a cylinder with that diameter, you would change the field
    to Inside.
  prefs: []
  type: TYPE_NORMAL
- en: Take a few minutes to tweak the various parameters and watch how the model changes
    in response. [Figure 7-2](ch07.xhtml#ch07fig2) shows the dimensions I chose.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/07fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-2: Play around with your coil’s dimensions to get a feel for what
    the parameters do.*'
  prefs: []
  type: TYPE_NORMAL
- en: That’s it—you’ve created a coil! Fusion 360 makes it as easy as that.
  prefs: []
  type: TYPE_NORMAL
- en: Modeling a Screw Using the Thread Tool
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although modeling a screw might seem easy, you’ll encounter difficulties if
    you try to do it with the tools you already know. That’s because the spiral-shaped
    ridge that runs along a screw’s body, called the *thread*, has very specific dimensions
    tailored to the screw’s purpose. For example, an orthopedic bone screw will have
    a completely different kind of thread than a machine screw. When modeling screws,
    you must define a thread’s major diameter, minor diameter, thread pitch, and thread
    angle, and it’s important to get it all right.
  prefs: []
  type: TYPE_NORMAL
- en: On a traditional two-dimensional technical drawing, it’s rare for a drafter
    to bother drawing the threads of a screw. Instead, the drafter will just specify
    the thread type—for example, 6 g M4×25 mm—so the manufacturer knows what kind
    of tap or screw to use. If you’re planning to buy threaded inserts and screws
    for your project, you’ll probably want to do the same. But if you want to print
    all your parts with a 3D printer, you’ll have to model the threads exactly as
    you want them to look. In the early days of 3D CAD, that meant precisely sketching
    the cross-section of each thread and modeling it with a helix feature similar
    to the Coil tool.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately for your sanity and patience, Fusion 360 gives you a tool that lets
    you skip all of that. The Thread tool contains a library of just about every thread
    commonly in use today. All you have to do is create a cylinder to put the threads
    on.
  prefs: []
  type: TYPE_NORMAL
- en: To see how it works, you’ll model an M4×25 mm screw. This is a very common screw;
    there are probably even a few of them in whatever computer you’re using to run
    Fusion 360.
  prefs: []
  type: TYPE_NORMAL
- en: '***Creating the Body of the Screw***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your screw model will have a variable length, so start by creating a Length
    parameter of 25 mm (**Modify** ▸ **Change Parameters** ▸ **New User Parameter**).
    Then draw a new sketch like the one shown in [Figure 7-3](ch07.xhtml#ch07fig3)
    and set the fx: 25.00 dimension to the Length user parameter you made. The “fx:”
    in the dimension designates that the value has been calculated with a user parameter.
    Make the screw head 4 mm long and 3.5 mm wide.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/07fig03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-3: Create a sketch like this using your Length user parameter.*'
  prefs: []
  type: TYPE_NORMAL
- en: I’ve used the measurements of a standard socket-head cap screw, but the 1.5
    mm dimension is completely arbitrary; when you add the threads, the software should
    automatically resize the width of the cylinder to fit the specifications of the
    threads. Once your sketch looks like that, revolve it around the bottom line to
    create a new body.
  prefs: []
  type: TYPE_NORMAL
- en: Like everything else on a standard fastener, this screw has a specific socket
    size, designed to fit a specific bit. We’ll use a 3 mm hex socket, as shown in
    [Figure 7-4](ch07.xhtml#ch07fig4).
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/07fig04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-4: Draw an inscribed polygon for the socket head.*'
  prefs: []
  type: TYPE_NORMAL
- en: To model that, create a new sketch on the top of the head. In the **Sketch**
    menu, choose the **Polygon** option. This lets you create a polygon with any number
    of equal sides, like the one in [Figure 7-4](ch07.xhtml#ch07fig4). In the case
    of this hex cap screw, you’ll need six sides. *Circumscribed* defines it by the
    diameter of an imaginary circle that touches the midpoints of each edge, while
    *Inscribed* defines it by the diameter of an imaginary circle that touches the
    vertices. Choose **Circumscribed** and make the diameter 3 mm.
  prefs: []
  type: TYPE_NORMAL
- en: '***Modeling the Thread***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now you can create the threads themselves by choosing **Thread** from the **Create**
    menu. You should see the dialog shown in [Figure 7-5](ch07.xhtml#ch07fig5).
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/07fig05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-5: Choose your Thread dialog options based on the fastener type you
    require.*'
  prefs: []
  type: TYPE_NORMAL
- en: Select the face of the cylinder and then check **Modeled** to make the threads
    appear there. (If you leave the Modeled option unchecked, Fusion 360 will just
    store the thread information for a later technical drawing.) Because we want the
    threads to span the full length of the cylinder, check **Full Length**.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the options allow you to pick a specific kind of thread. For the
    **Thread Type**, choose **ISO Metric Profile**. Set **Size** to 4.0 mm and **Designation**
    to M4×0.5\. The Class setting determines how much tolerance to give. We’ll use
    6 g here. Finally, because this is a standard screw, set **Direction** to **Right
    Hand**. Almost all fasteners use right-hand threads, which you tighten by turning
    clockwise, but you might occasionally have a need for left-hand threads, which
    you tighten by turning counterclockwise.
  prefs: []
  type: TYPE_NORMAL
- en: Your model should now look like a real screw, with built-in threads. As a final
    step, give the screw’s tip a *revolved cut* to make it easier to insert. I gave
    mine a 45-degree cut that starts 1.5 mm from the center axis, but this is one
    of the few parts of a fastener without rigid specifications, so you can make the
    dimensions whatever you’d like. In the end, your model should look something like
    the one shown in [Figure 7-6](ch07.xhtml#ch07fig6).
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/07fig06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-6: Your model should have a revolved cut at the end to make it easier
    to insert.*'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You’ve finished modeling your first screw.
  prefs: []
  type: TYPE_NORMAL
- en: Modeling a 20-Sided Die
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unfortunately, Fusion 360 can’t offer a dedicated tool for every complicated
    design. In this section, you learn how to model a die with 20 sides by using Surfaces,
    as well as the geometrical concept of golden rectangles, to break the task into
    manageable steps.
  prefs: []
  type: TYPE_NORMAL
- en: Called regular icosahedrons or, colloquially, d20s, these dice are popular in
    tabletop role-playing games like *Dungeons & Dragons*. The die consists of 20
    identical equilateral triangles joined so that the vertices all touch the same
    imaginary sphere. Five faces meet at each vertex, as shown in [Figure 7-7](ch07.xhtml#ch07fig7).
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/07fig07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-7: You’ll be modeling this 20-sided (d20) die.*'
  prefs: []
  type: TYPE_NORMAL
- en: In geometric terms, the die is quite complex; even using a formula to calculate
    the length of the triangles’ edges would be tricky for people who aren’t math
    whizzes. Fortunately, we can express the geometry in a far simpler way using golden
    rectangles.
  prefs: []
  type: TYPE_NORMAL
- en: Golden rectangles have dimensions that follow the golden ratio, meaning that
    their lengths are approximately 1.618 times their widths. [Figure 7-8](ch07.xhtml#ch07fig8)
    shows three interlocking golden rectangles placed perpendicular to one another.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/07fig08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-8: A 20-sided die formed by three golden rectangles*'
  prefs: []
  type: TYPE_NORMAL
- en: When arranged like this, the rectangles’ corners form the 12 vertices of the
    die. The die has 20 sides with 3 corners each, equaling 60\. Since 5 sides share
    the same vertex, there are 12 vertices in total.
  prefs: []
  type: TYPE_NORMAL
- en: When you draw lines between the corners of the rectangle nearest to one another,
    you form the die’s edges. For modeling purposes, we can use those edges to create
    surfaces for each of the 20 faces. You can then stitch the surfaces together to
    create a single solid body.
  prefs: []
  type: TYPE_NORMAL
- en: To work with surfaces, switch to the **Patch** workspace, which gives you access
    to tools in the Create and Modify drop-down menus that you haven’t seen yet. Otherwise,
    this workspace looks the same as the Model workspace.
  prefs: []
  type: TYPE_NORMAL
- en: Use the sketch tools you’re already familiar with to draw the three golden rectangles—one
    on each of the existing planes. Make sure they’re oriented the way they appear
    in [Figure 7-9](ch07.xhtml#ch07fig9). Give them each a height of 10 mm and a width
    of 16.18 mm.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/07fig09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-9: Draw three perpendicular golden rectangles.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to draw lines connecting the corners of the rectangles to form
    the edges of the die’s faces. To do that, we first need to create construction
    planes to sketch them on. From the **Construct** drop-down, choose the **Plane
    Through Three Points** option. Select three points that will make up the vertices
    of a single triangular face, as shown in [Figure 7-10](ch07.xhtml#ch07fig10).
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/07fig10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-10: Create a construction plane that touches the three vertices of
    a triangular face.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now draw a new sketch on the plane you just created. Use lines to connect the
    same three points you selected for the plane itself. You should end up with an
    equilateral triangle like the one in [Figure 7-11](ch07.xhtml#ch07fig11).
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/07fig11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-11: Draw a sketch that connects the three points to form a triangle.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now you’re ready to make your first surface. Surfaces have no thickness, so
    they’re not solid bodies like the features you’ve used so far in this book. Although
    they have no actual substance on their own, you can connect multiple surfaces
    to create a solid body.
  prefs: []
  type: TYPE_NORMAL
- en: To model your first surface, select **Patch** from the **Create** menu. This
    should open the dialog shown in [Figure 7-12](ch07.xhtml#ch07fig12).
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/07fig12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-12: Use the Patch feature to create a surface from the three lines
    of the triangle.*'
  prefs: []
  type: TYPE_NORMAL
- en: Use the three lines of the triangle you just drew as *boundary edges*. Select
    **Enable Chaining**. Ignore the Interior Rails/Points option; you won’t need these
    for this project. Set the Continuity drop-down menu to **Connected** and the Operation
    drop-down menu to **New Body**.
  prefs: []
  type: TYPE_NORMAL
- en: Once you click OK, you should have a single triangular surface—one side of the
    die. Now, repeat that process 19 more times to generate all of the faces. (Yes,
    it’s a little tedious.)
  prefs: []
  type: TYPE_NORMAL
- en: If you lose track of which points you’re supposed to connect, reference [Figure
    7-8](ch07.xhtml#ch07fig8). All edges should be equal in length, so if you end
    up with an edge of a different length, you’ve connected the wrong points. In the
    end, you should have a shape composed of 20 individual faces, as shown in [Figure
    7-13](ch07.xhtml#ch07fig13).
  prefs: []
  type: TYPE_NORMAL
- en: The model now *looks* like a d20, but it’s not really a solid body yet. As noted,
    the surfaces have no thickness. If you tried to export this as an STL file for
    3D printing, Fusion 360 wouldn’t let you—there just isn’t anything there to convert
    into a mesh.
  prefs: []
  type: TYPE_NORMAL
- en: Fusion 360 provides the *Stitch* feature to turn multiple surfaces into a single
    solid body. For this feature to work, the surfaces must come together to form
    an airtight body. If you had only made 19 of the 20 faces, the Stitch feature
    would fail because of the missing face.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/07fig13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-13: Keep creating triangular surfaces until you have all 20 faces.*'
  prefs: []
  type: TYPE_NORMAL
- en: Since you’ve got all 20 faces, go ahead and choose **Stitch** from the **Modify**
    menu; then select all of the surfaces, as shown in [Figure 7-14](ch07.xhtml#ch07fig14).
    After you select all 20 surfaces and click OK, Fusion 360 should “stitch” together
    the surfaces and turn the set into a solid body.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/07fig14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-14: Use the Stitch feature to convert your surfaces into a solid
    body.*'
  prefs: []
  type: TYPE_NORMAL
- en: The final step is to add fillets to the edges, because nobody wants a d20 with
    sharp corners. To do that, switch back to the **Model** workspace. Then, use the
    **Fillet** tool by selecting all the edges and setting a radius of 1 mm. When
    you’re done, your die should look like the one in [Figure 7-15](ch07.xhtml#ch07fig15).
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/07fig15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-15: Your finished d20 should look like this.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercises**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Try your hand at the following exercises to get some practice with a couple
    of minor tools Fusion 360 has to offer.
  prefs: []
  type: TYPE_NORMAL
- en: '***Changing the Size of Your d20***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you started modeling the d20, I gave you the dimensions of your golden
    rectangles. I chose those dimensions to make the math easy, but you may want your
    d20 to be a different size—with, say, a distance of 75 mm between two opposing
    faces. Of course, you could figure out how the dimensions of the rectangles relate
    to the distance between the faces of the die and then change the rectangles’ dimensions
    accordingly, but it’s far easier to just resize the final model.
  prefs: []
  type: TYPE_NORMAL
- en: If you measure the distance between opposite parallel faces using the Measure
    tool from the Inspect menu, you’ll find that it’s something like 15.114974 mm.
    (This will differ very slightly between faces, because 1:1.618 is actually just
    an approximation of the golden ratio. Like pi, the golden ratio is an irrational
    number and continues infinitely past the decimal point. For real-world use, 1:1.618
    works fine.)
  prefs: []
  type: TYPE_NORMAL
- en: We want the distance between opposite faces to be 75 mm, so about 4.961967 times
    what it is now. To make that happen, choose the **Scale** feature from the **Modify**
    menu and select the model. Keep **Scale Type** set to **Uniform**, as shown in
    [Figure 7-16](ch07.xhtml#ch07fig16), and set the **Scale Factor** to **4.961967**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/07fig16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-16: Scale the model to make it 75 mm between opposite faces.*'
  prefs: []
  type: TYPE_NORMAL
- en: Click **OK** to resize the d20\. Measure the opposite faces again. The distance
    should be almost exactly 75 mm (by any reasonable tolerance).
  prefs: []
  type: TYPE_NORMAL
- en: '***Inscribing Numbers***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you want to actually 3D print your giant d20 to impress the dungeon master
    at your next D&D session, you have to add numbers, or else you’ll find it pretty
    difficult to use. To add them, choose the **Text** option from the **Sketch**
    menu and position your text; then extrude it as with any other sketch to cut lightly
    into the face. I did this to the “20” shown in [Figure 7-17](ch07.xhtml#ch07fig17).
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/07fig17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-17: Add numbers to the faces of the die by extruding the text.*'
  prefs: []
  type: TYPE_NORMAL
- en: Repeat that process for all 20 numbers. Statistically, it doesn’t matter how
    you number the faces—all sides of the die have an equal chance of coming up—but
    there is a convention for doing so. Pick a random side, and place 1 there. Then,
    on the opposite side, place 20\. On a face adjacent to 20, place 2\. Then opposite
    that, place 19\. Adjacent to 19, place 3, and so on. In the end, the sum of any
    two opposite faces should always equal 21.
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The modeling in this chapter ranged from trivial to pretty darn difficult, but
    hopefully you’ve learned that even projects that seem overwhelmingly complex at
    first glance can be broken down into manageable steps. With the skills you’ve
    picked up so far in this book, you should be able to create 3D models of just
    about anything you can imagine, as long as you take the time to think through
    how you’ll approach it step by step.
  prefs: []
  type: TYPE_NORMAL
- en: Now you know how to use all of the most important modeling tools. In [Chapter
    8](ch08.xhtml#ch08), you’ll learn how to create technical drawings, which will
    be useful if you’d like your models to be built. In [Chapter 9](ch09.xhtml#ch09),
    you’ll learn how to make nice-looking renders of your models for presentation
    purposes.
  prefs: []
  type: TYPE_NORMAL
