["```\nlw x5, x6, 0            ; load word to x5, from content at address x6+0\nsw x5, x6, 0            ; store value from reg x5 to address x6+0\nla x6, mylabel          ; load address of mylabel (not its content) to x6\n```", "```\nlw x5, mylabel          ; load content at address mylabel to register x5\n```", "```\nj mylabel               ; jump to address mylabel\njr x5                   ; jump to address in x5\n```", "```\nbeq x1, x2, mylabel     ; branch if x1==x2\nbne x1, x2, mylabel     ; branch if not x1==x2\nblt x1, x2, mylabel     ; branch if x1<x2\nbge x1, x2, mylabel     ; branch if x1>=x2\n```", "```\njal x1, mylabel         ; store current PC in x1 and jump to mylabel\njalr x1, x2, 0          ; store current PC in x1 and jump to address x2+0\n```", "```\njalr x0, x1, 0\n```", "```\naddi sp, sp, -4 ; grow stack\nsw   a0, sp, 0 ; store a0 onto stack\n```", "```\nlw   a0, sp, 0 ; retrieve data to a0 from stack\naddi sp, sp, 4 ; shrink stack\n```", "```\nadd x6, x7, x8  ; x6 := x7 + x8\nsub x6, x7, x8  ; x6 := x7 - x8\nmul x6, x7, x8  ; x6 := x7 * x8\ndiv x6, x7, x8  ; x6 := integer of x7 / x8\nrem x6, x7, x8  ; x6 := remainder of x7 / x8\n```", "```\nand x6, x7, x8  ; x6 := x7 bitwise-and x8\nor x6, x7, x8   ; x6 := x7 bitwise-or x8\nxor x6, x7, x8  ; x6 := x7 bitwise-xor x8\nnot x6, x7      ; x6 := bitwise-not x7\n```", "```\naddi x1, x0, 3   ; load immediate integer 3 to x1\nadd x2, x1, x0   ; copy x1 to x2\n```", "```\nli x2, 3         ; load integer 3 into x2\nmv x2, x1        ; copy x1 to x2\n```", "```\nfadd f6, f7, f8  ; f6 := f7 + f8\nfsub f6, f7, f8  ; f6 := f7 - f8\nfmul f6, f7, f8  ; f6 := f7 * f8\nfdiv f6, f7, f8  ; f6 := f7 / f8\nfsqrt f6, f7     ; f6 := sqrt(f7)\n```", "```\nflw f1, t0, 0    ; load float word to f1 from address t0+0\nfsw t0, f1, 0    ; store float word to address t0+0 from f1\nflt.s x6, f1, f2 ; x6 := (f1 < f2)\nfcvt.w.s x6, f1  ; convert float f1 to int x6\nfcvt.s.w f1, x7  ; convert int x7 to float f1\n```", "```\n    .globl __start\n    __start:\n      li t0,0\n    ```", "```\n    .globl __start\n    .data\n      mylabel: .word 17\n      myfloat: .float 34.56\n    .text\n    __start:\n      lw x5, mylabel ; load word to register x5, from content at address mylabel\n      la x6, mylabel ; load address to x6, of mylabel (not its content)\n    myloop:\n      sw x5, 0(x6)   ; store value from reg x5 to address 0+x6 (= mylabel)\n      j myloop\n    ```"]