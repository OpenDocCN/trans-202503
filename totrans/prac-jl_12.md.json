["```\nusing Plots\n\nra = rand(100000)\nscatter(ra, markersize=1, label=nothing)\n```", "```\nif P > rand()\n    event()\nend\n```", "```\nusing Random\n\nrgen = MersenneTwister(7654);\nrand(rgen)\n```", "```\n   N = 3000\n\n   stay = zeros(Int32, N)\n   switch = zeros(Int32, N)\n\n   for game in 1:N\n       prize = rand(1:3)\n       choice = rand(1:3)\n       if choice == prize\n           stay[game] = 1\n       end\n   end\n\n   for game in 1:N\n       prize = rand(1:3)\n       choice = rand(1:3)\n       if choice != prize\n           switch[game] = 1\n       end\n   end\n\n➊ stayra = [sum(stay[1:i]) / i for i in 1:N]\n   switchra = [sum(switch[1:i]) / i  for i in 1:N]\n\n   using Plots\n\n   plot(1:N, [stayra, switchra, ones(N)*1/3, ones(N)*2/3],\n        label=[\"Stay\" \"Switch\" \"\" \"\"])\n   annotate!(2700, 1/3 + 0.05, \"1/3\")\n   annotate!(2700, 2/3 + 0.05, \"2/3\")\n```", "```\n   using Plots\n   using Printf\n   using JLD\n   worldgrad = cgrad([:blue, :red, :black, :green], [0.25, 0.50, 0.75],\n               categorical=true)\n   n = 16\n➊ initial = Dict(\"infected\"=>0.5, \"isolated\"=>0.15)\n   transition = Dict(\"infected\"=>0.05, \"dead\"=>0.1, \"dud\"=>7)\n   include(\"plotworld.jl\")\n   \"\"\"Simulate pandemic growth.\n       n: length of side of world array;\n       initial: starting proportions of infected and isolated subpopulations;\n       transition: probabilities of infection and of death after dud days of\n                   infection;\n       days: number of days before stopping;\n       seeding: selects spatially random or centered initial distribution of\n                infected individuals;\n       plotmode: display or save plots of simulation while running, or save\n                 only the final state.\n   \"\"\"\n   function pandemic(n::Int, initial, transition, days::Int; seeding=:normal,\n                     plotmode=:display)\n       noi = [] # Number of infected people\n       nod = [] # Number of dead people\n       function finish()\n           if plotmode == :last\n               plotfilename = @sprintf \"%d.png\" days\n               savefig(plotworld(world, noi, nod, worldgrad), plotfilename);\n           end\n           @save \"pandata.jld\" world noi nod\n       end\n       function nif(I, J) # Number of infected neighbors of an uninfected cell\n           return sum(world[I-1:I+1,J-1:J+1] .== infected)\n       end\n       tpi = zeros(8)\n    ➋ for N in 1:8\n          tp = 0\n          for i in 1:N\n              tp += (-1)^(i-1)*binomial(N, i)*transition[\"infected\"]^i\n          end\n          tpi[N] = tp # The total probability of infection with N infected neighbors\n      end\n      ok::Int32 = 1\n      infected::Int32 = 2\n      dead::Int32 = 3\n      isolated::Int32 = 4\n      world = fill(ok, n, n)\n      if seeding == :normal\n          world[rand(n, n) .< initial[\"infected\"]] .= infected\n      end\n      world[rand(n, n) .< initial[\"isolated\"]] .= isolated\n      if seeding == :center\n          world[n ÷ 2, n ÷ 2] = infected\n      end\n   ➌ next = copy(world)\n   ➍ aoi = fill(0, n, n) # Age of infection\n      dud = transition[\"dud\"]\n      for day in 1:days\n          for j in 2:n-1 for i in 2:n-1\n              if world[i, j] == ok\n                  if nif(i, j) > 0\n                      if tpi[nif(i, j)] >= rand()\n                          next[i, j] = infected\n                          aoi[i, j] = day\n                      end\n                  end\n              end\n              if (world[i, j] == infected) && ((day - aoi[i, j]) == dud)\n                  if rand() < transition[\"dead\"]\n                      next[i, j] = dead\n                  end\n              end\n          end; end\n          world = copy(next)\n       ➎ push!(noi, sum(world[2:n-1, 2:n-1] .== infected))\n          push!(nod, sum(world[2:n-1, 2:n-1] .== dead))\n       ➏ if day > 4dud\n              if noi[end] == noi[end - dud] && nod[end] == nod[end - dud]\n                  return finish()\n              end\n          end\n          if plotmode == :save\n              plotfilename = @sprintf \"%05d.png\" day\n              savefig(plotworld(world, noi, nod, worldgrad), plotfilename);\n          elseif plotmode == :display\n              display(plotworld(world, noi, nod, worldgrad))\n          end\n      end\n      finish()\n  end\n  days = 2000\n  pandemic(n, initial, transition, days; seeding=:normal, plotmode=:display)\n```", "```\ninitial = Dict(\"infected\"=>0.001, \"isolated\"=>0.5)\ntransition = Dict(\"infected\"=>0.08, \"dead\"=>0.25, \"dud\"=>5)\n```", "```\nusing Plots\nusing Printf\n\"\"\"Plot a heatmap of the current state of the pandemic with the histories\nof the number of infected and dead people; calculate and display the\nproportion of people protected from infection.\"\"\"\nfunction plotworld(world, noi, nod, worldgrad)\n    ok::Int32 = 1\n    day = length(noi)\n    protected = sum(world[2:n-1, 2:n-1] .== ok) / n^2 * 100\n ➊ prot = @sprintf(\"%.2f%% protected\", protected)\n    p1 = heatmap(1:n, 1:n, world, c=worldgrad, clims=(1, 4), legend=nothing);\n    p2 = plot(1:day, noi, label=nothing, yformatter=y -> @sprintf(\"%.1e\", y),\n              titlefontsize=10);\n    p3 = plot(1:day, nod, label=nothing, annotate=\n              (0.7day, 0.1nod[end], text(prot, :blue, 7)), yformatter=\n               y -> @sprintf(\"%.1e\", y), titlefontsize=10);\n ➋ layout=@layout [a{0.6w} grid(2, 1)];\n    return plot(p1, p2, p3, layout=layout,\n                title=[\"\" \"Number infected.\" \"Number dead.\"]);\nend\n```", "```\njulia> median([1, 2, 3])\n2.0\n\njulia> median([1, 2, 3, 4])\n2.5\n```", "```\njulia> mode([1, 3, 2, 9, 9])\n9\n\njulia> mode([1, 3, 2, 9, 9, 4, 4])\n9\n\njulia> mode([1, 3, 2, 9])\n1\n```", "```\njulia> mean([1, 2, 3])\n2.0\n\njulia> mean(x -> 2x, [1, 2, 3])\n4.0\n\njulia> mean(2 .* [1, 2, 3])\n4.0\n```", "```\nusing Plots\nusing Statistics\nN = 10000\naverages = zeros(N)\nfor i in 1:N\n    averages[i] = mean(rand(1000))\nend\nhistogram(averages, label=\"Empirical\")\n```", "```\nusing Distributions\nσ = std(averages)\nnd = Normal(0.5, σ)\nplot!(rand(nd, 10000), seriestype=:scatterhist, label=\"Normal sample\")\n```", "```\n   histogram(averages, label=\"Empirical\", normalize=true)\n   plot!(rand(nd, 10000), seriestype=:scatterhist, label=\"Normal sample\",\n         normalize=true)\n➊ plot!(0.46:0.001:0.54, pdf.(nd, 0.46:0.001:0.54), lw=5, label=\"Normal PDF\")\n```", "```\nusing Plots\nra = randn(100000)\nscatter(ra, markersize=1, label=nothing)\n```", "```\njulia> m = missing\nmissing\n\njulia> 3m\nmissing\n\njulia> 3 + m\nmissing\n\njulia> missing/3\nmissing\n\njulia> missing/0\nmissing\n\njulia> missing + missing\nmissing\n\njulia> typeof(m)\nMissing\n```", "```\nusing Plots\nfunction plotmissing()\n    a::Vector{Union{Missing, Float64}} = sin.(0:0.03:2π) .+ rand(210)/4\n    a[49:54] .= missing\n    plot(a, legend=nothing, linewidth=3)\nend\n```", "```\na = [1, missing, 2, 3, missing, 4]\n```", "```\njulia> sum(skipmissing(a))\n10\n```", "```\nfor i in skipmissing(a)\n    println(i)\nend\n```", "```\n1\n2\n3\n4\n```", "```\njulia> coalesce.(a, NaN)\n6-element Vector{Real}:\n   1\n NaN\n   2\n   3\n NaN\n   4\n```", "```\nimport Base.sum\nfunction sum(a::AbstractArray{Union{Missing, Int64}})\n    return sum(skipmissing(a))\nend\n```", "```\njulia> import Missings\njulia> a = rand(4)\njulia> a = Missings.allowmissing(a)\njulia> a[3] = missing;\njulia> a\n4-element Vector{Union{Missing, Float64}}:\n 0.6225362617934931\n 0.4473340385496267\n  missing\n 0.5062746637386624\n```", "```\nusing CSV, DataFrames\ncovdat = CSV.File(\"time_series_covid19_confirmed_global.csv\";\n    normalizenames=true) |> DataFrame\n```", "```\nProvince/State,Country/Region,Lat,Long,1/22/20,1/23/20,1/24/20,...\n```", "```\nusing StatsPlots, Statistics\n```", "```\njulia> @df covdat print((minimum(:_1_1_21), maximum(:_1_1_21), mean(:_1_1_21)))\n(0, 20252310, 306902.8576642336)\n```", "```\n➊ julia> covdat[3, 2]\n  \"Algeria\"\n\n➋ julia> covdat[3:6, 2]\n   4-element Vector{String}:\n   \"Algeria\"\n   \"Andorra\"\n   \"Angola\"\n   \"Antigua and Barbuda\"\n\n➌ julia> covdat[1, 2:4]\n   DataFrameRow\n   Row | Country_Region  Lat       Long\n       | String          Float64?  Float64?\n  ------------------------------------------\n     1 | Afghanistan      33.9391     67.71\n```", "```\njulia> covdat[266:268, 2:4]\n3×3 DataFrame\n Row | Country_Region  Lat       Long\n     | String          Float64?  Float64?\n------------------------------------------\n   1 | Uruguay         -32.5228  -55.7658\n   2 | Uzbekistan       41.3775   64.5853\n   3 | Vanuatu         -15.3767  166.959\n```", "```\njulia> covdat[272:end, [:Country_Region, :Lat, :Long, :_1_22_21]]\n3×4 DataFrame\n Row | Country_Region  Lat       Long      _1_22_21\n     | String          Float64?  Float64?  Int64\n----------------------------------------------------\n   1 | Yemen            15.5527   48.5164      2118\n   2 | Zambia          -13.1339   27.8493     43333\n   3 | Zimbabwe        -19.0154   29.1549     30523\n```", "```\nfilter(r -> (r.Lat === missing) || (r.Long ===  missing), covdat)\n\n1×432 DataFrame\n Row | Province_State          Country_Region  Lat       Long     ...\n     | String?                 String          Float64?  Float64? ...\n-------------------------------------------------------------------\n   1 | Repatriated Travellers  Canada          missing   missing  ...\n                                                428 columns omitted\n```", "```\njulia> covdat.Country_Region\n274-element Vector{String}:\n \"Afghanistan\"\n \"Albania\"\n \"Algeria\"\n \"Andorra\"\n :\n \"Yemen\"\n \"Zambia\"\n \"Zimbabwe\"\n```", "```\nusing Plots\nplot(covdat.Country_Region, covdat._1_1_21; xrotation=40,\n     label=\"Cases on 1JAN2021\", legend=:topleft)\n```", "```\ncovhc = filter(r -> r._1_1_21 > 2*10^6, covdat)\n@df covhc bar(:Country_Region, :_1_1_21; xrotation=40,\n     label=\"Cases on 1JAN2021\", legend=:topleft)\n```", "```\ncovdat[1, Between(:_1_22_20, end)]\n```", "```\ncovdat[1, Not([:Country_Region, :Province_State, :Lat, :Long])]\n```", "```\ncovdat[1, r\"_2\"]\n```", "```\ncovdat[1, Cols(:Country_Region, r\"_1\")]\ncovdat[1, Cols(\"Country_Region\", r\"_1\")]\ncovdat[1, Cols(2, r\"_1\")]\ncovdat[1, Cols(2, 5:end)]\n```", "```\ncovdat[:, Cols(1:2, r\"_\", :Lat, :Long)]\n```", "```\njulia> covdat[:, :Country_Region] == covdat.Country_Region\ntrue\n\njulia> covdat[:, :Country_Region] === covdat.Country_Region\nfalse\n```", "```\njulia> covdat.Country_Region[1] = \"Disneyworld\"\n\"Disneyworld\"\n\njulia> covdat\n274×432 DataFrame\n Row | Province_State  Country_Region      Lat       Long    ...\n     | String?         String              Float64?  Float64 ...\n--------------------------------------------------------------\n   1 | missing         Disneyworld          33.9391   67.71  ...\n   2 | missing         Albania              41.1533   20.168\n  :  |       :                 :              :         :\n 274 | missing         Zimbabwe            -19.0154   29.154\n                              429 columns and 271 rows omitted\n```", "```\ncovdat[!, :Country_Region][1] = \"Disneyworld\"\n```", "```\nusing Chain\n@chain covdat begin\n    filter(r -> r.Country_Region == \"US\", _)[1, 5:end]\n    Vector()\n    plot(names(covdat)[5:end], _, xrotation=45, legend=:topleft,\n         label=\"US cases\", lw=3)\nend\n```", "```\ncovmc = covdat[ismissing.(covdat.Province_State), :]\n```", "```\ncovmc = covmc[:, Not([:Province_State, :Lat, :Long])]\ncdcn = permutedims(covmc, 1, \"d\")\n```", "```\ncdcn = permutedims(covmc, :Country_Region, \"d\")\n```", "```\njulia> [c for c in covdat.Country_Region if contains(c, \" \")]\n46-element Vector{String}:\n \"Antigua and Barbuda\"\n \"Bosnia and Herzegovina\"\n \"Burkina Faso\"\n \"Cabo Verde\"\n :\n \"United Kingdom\"\n \"United Kingdom\"\n \"West Bank and Gaza\"\n```", "```\nrename!(x -> replace(x, \" \" => \"_\"), cdcn)\n```", "```\njulia> cdcn[:, r\"^Un\"]\n428×2 DataFrame\n Row | United_Arab_Emirates   United_Kingdom\n     | Int64                  Int64\n--------------------------------------------\n   1 |                    0                0\n   2 |                    0                0\n  :                       :                :\n 428 |               446594          4312908\n```", "```\n@df cdcn plot(:d, [:Zambia :Albania :Afghanistan]; xrotation=35,\n              legend=:topleft, lw=3, ls=[:solid :dash :dot])\n```", "```\nsc = [Symbol(c) for c in names(cdcn)[2:end] if maximum(cdcn[:, c]) > 3*10^6]\n@df cdcn plot(:d, cols(sc); xrotation=35, lw=2, legend=:topleft, ls=:auto)\n```", "```\njulia> combine(cdcn, 2:190 .=> maximum)\n1×189 DataFrame\n Row | Afghanistan_maximum  Albania_maximum  Algeria_maximum ...\n     | Int64                Int64            Int64           ...\n--------------------------------------------------------------\n   1 |               56192           122295           116438 ...\n                                           186 columns omitted\n```", "```\ncdmax = combine(cdcn, 2:190 .=> maximum, renamecols=false)\ncdmax[!, :Country] = [\"Maximum\"]\ncdmp = permutedims(cdmax, :Country)\ncdmpc = cdmp[cdmp.Maximum .> 2*10^6, :]\n```", "```\n14×2 DataFrame\n Row | Country          Maximum\n     | String           Int64\n--------------------------------\n   1 | Argentina         2269877\n   2 | Brazil           12220011\n  :  |       :             :\n  13 | US               30010928\n  14 | United_Kingdom    4312908\n                 10 rows  omitted\n```", "```\nbar(cdmpc.Country, cdmpc.Maximum, xrotation=45, label=nothing,\n    title=\"Countries with highest maximum caseloads\")\n```", "```\njulia> describe(cdcn, :max; cols=Not(:d))\n189×2 DataFrame\n Row | variable             max\n     | Symbol               Int64\n------------------------------------\n   1 | Afghanistan            56192\n   2 | Albania               122295\n   3 | Algeria               116438\n   4 | Andorra                11638\n   5 | Angola                 21836\n   6 | Antigua_and_Barbuda     1080\n  :  |          :              :\n 184 | Venezuela             153315\n 185 | Vietnam                 2576\n 186 | West_Bank_and_Gaza    230076\n 187 | Yemen                   3703\n 188 | Zambia                 86993\n 189 | Zimbabwe               36749\n                    177 rows omitted\n```", "```\ncvgp = groupby(covdat, :Country_Region)\n```", "```\n➊ julia> length(cvgp)\n   192\n\n➋ julia> length(covdat.Country_Region) - length(cvgp)\n   82\n\n➌ julia> cvgp[1]\n   1×432 SubDataFrame\n    Row | Province_State  Country_Region  Lat       Long      _ ...\n        | String?         String          Float64?  Float64?  I ...\n   --------------------------------------------------------------\n      1 | missing         Afghanistan      33.9391     67.71    ...\n                                              428 columns omitted\n\n➍ julia> cvgp[183]\n   12×432 SubDataFrame\n    Row | Province_State                     Country_Region  La ...\n        | String?                            String          Fl ...\n   --------------------------------------------------------------\n      1 | Anguilla                           United Kingdom   1 ...\n      2 | Bermuda                            United Kingdom   3\n     :  |                 :                        :\n     12 | missing                            United Kingdom   5\n                                   430 columns and 9 rows omitted\n```", "```\ndcols = cdcn.d\ncvsm = combine(cvgp, dcols .=> sum, renamecols=false)\n```", "```\ncvsp = permutedims(cvsm, :Country_Region, \"d\")\n```", "```\n@df cvsp plot(:d, :France; xrotation=35, label=\"France with territories\", legend=:topleft)\n@df cdcn plot!(:d, :France; xrotation=35, label=\"France minus territories\", legend=:topleft,\n               ls=:dash)\n```", "```\nAreaname    Larceny Murder  MVTheft Robbery MinorsNHI   EstimatedPop\n##UNITED STATES 6384687 16107   1196608 405471  10.8    295753151\n##ALABAMA   97640   308 10796   5636    7.8 4545049\nAutauga, AL 1149    0   112 28  8   47870\nBaldwin, AL 1973    5   137 37  11.3    162564\nBarbour, AL 64  0   7   1   7.8 29452\nBibb, AL    144 0   18  3   8\\.  21375\nBlount, AL  558 0   134 6   11.8    55035\nBullock, AL 54  0   0   3   7.9 10975\n```", "```\ncbc = CSV.File(\"census.dat\", comment=\"#\") |> DataFrame\ncbc = cbc[cbc.EstimatedPop .!= 0, :]\n```", "```\nfor c in 2:5\n    cbc[!, c] = cbc[!, c] ./ cbc[!, 7]\nend\n```", "```\njulia> cbc\n3143×7 DataFrame\n  Row | Areaname        Larceny      Murder      MVTheft      Robber ...\n      | String          Float64      Float64     Float64      Float6 ...\n----------------------------------------------------------------------\n    1 | Autauga, AL     0.0240025    0.0         0.00233967   0.0005 ...\n    2 | Baldwin, AL     0.0121368    3.07571e-5  0.000842745  0.0002\n    3 | Barbour, AL     0.00217303   0.0         0.000237675  3.3953\n    4 | Bibb, AL        0.00673684   0.0         0.000842105  0.0001\n    5 | Blount, AL      0.010139     0.0         0.00243481   0.0001 ...\n    6 | Bullock, AL     0.00492027   0.0         0.0          0.0002\n    7 | Butler, AL      0.0227653    9.83381e-5  0.00108172   0.0007\n    8 | Calhoun, AL     0.0256511    4.46106e-5  0.00215915   0.0014\n  :   |       :              :           :            :            :\n 3137 | Sheridan, WY    0.0167767    0.0         0.000921795  3.6871 ...\n 3138 | Sublette, WY    0.0387191    0.0         0.00262009   0.0\n 3139 | Sweetwater, WY  0.0296249    2.68341e-5  0.00262974   0.0001\n 3140 | Teton, WY       0.0197487    0.0         0.00149925   0.0001\n 3141 | Uinta, WY       0.0283567    0.0         0.00190417   0.0002 ...\n 3142 | Washakie, WY    0.00425093   0.0         0.000128816  0.0\n 3143 | Weston, WY      0.0122008    0.0         0.0          0.0001\n                                       3 columns and 3128 rows omitted\n```", "```\n@df cbc histogram(:Larceny; legend=nothing)\n```", "```\njulia> mean(cbc.Larceny)\n0.014305068778810368\n\njulia> @df cbc cor(:Murder, :Larceny)\n0.29993876295850447\n\njulia> @df cbc cor(:MVTheft, :Larceny)\n0.6528140798664165\n```", "```\n@df cbc scatter(:MVTheft, :Larceny; legend=nothing, markersize=2,\n    opacity=0.3, xlabel=\"Motor vehicle theft\", ylabel=\"Larceny\",\n    xrange=[0, 0.015])\n```", "```\n@df cbc histogram2d(:MVTheft, :Larceny; xlabel=\"Motor vehicle theft\",\n                    ylabel=\"Larceny\", xrange=[0, 0.015])\n```", "```\njulia> describe(cbc, :mean, :max, :nmissing)[2:end,:]\n6×4 DataFrame\n Row | variable      mean         max           nmissing\n     | Symbol        ...Union     Any           Int64\n--------------------------------------------------------\n   1 | Larceny       0.0143051    0.0925926            0\n   2 | Murder        3.01897e-5   0.000539374          0\n   3 | MVTheft       0.00156298   0.0231045            0\n   4 | Robbery       0.000357696  0.00987096           0\n   5 | MinorsNHI     11.5316      42.9                 0\n   6 | EstimatedPop  94099.0      9803912              0\n```", "```\n@df cbc marginalhist(:MVTheft, :Larceny; xlabel=\"Motor vehicle theft\",\n                     ylabel=\"Larceny\")\n```", "```\n@df cbc corrplot([:MinorsNHI :MVTheft :Robbery]; fillcolor=cgrad(),\n                 xrotation=40)\n```"]