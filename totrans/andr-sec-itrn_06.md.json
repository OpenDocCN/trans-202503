["```\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            09:49:24:fd:15:cf:1f:2e\n    Signature Algorithm: sha1WithRSAEncryption\n        Issuer: C=US, O=Google Inc, CN=Google Internet Authority G2➊\n        Validity\n            Not Before: Oct 9 10:33:36 2013 GMT\n            Not After : Oct 9 10:33:36 2014 GMT\n        Subject: C=US, ST=California, L=Mountain View, O=Google Inc, CN=*.googlecode.com➋\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (2048 bit)➌\n                Modulus:\n                    00:9b:58:02:90:d6:50:03:0a:7c:79:06:99:5b:7a:\n                    --*snip*--\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Extended Key Usage:\n                TLS Web Server Authentication, TLS Web Client Authentication\n            X509v3 Subject Alternative Name:\n                DNS:*.googlecode.com, DNS:*.cloud.google.com, DNS:*.code.google.com,➍\n                --*snip*--\n            Authority Information Access:\n                CA Issuers - URI:http://pki.google.com/GIAG2.crt\n                OCSP - URI:http://clients1.google.com/ocsp\n\n            X509v3 Subject Key Identifier:\n                65:10:15:1B:C4:26:13:DA:50:3F:84:4E:44:1A:C5:13:B0:98:4F:7B\n            X509v3 Basic Constraints: critical\n                CA:FALSE\n            X509v3 Authority Key Identifier:\n                keyid:4A:DD:06:16:1B:BC:F6:68:B5:76:F5:81:B6:BB:62:1A:BA:5A:81:2F\n            X509v3 Certificate Policies:\n                Policy: 1.3.6.1.4.1.11129.2.5.1\n            X509v3 CRL Distribution Points:\n                Full Name:\n                  URI:http://pki.google.com/GIAG2.crl\n    Signature Algorithm: sha1WithRSAEncryption\n         3f:38:94:1b:f5:0a:49:e7:6f:9b:7b:90:de:b8:05:f8:41:32:\n         --*snip*--\n```", "```\nCertificate Revocation List (CRL):\n        Version 2 (0x1)\n    Signature Algorithm: sha1WithRSAEncryption\n        Issuer: /C=US/O=Google Inc/CN=Google Internet Authority G2\n        Last Update: Jan 13 01:00:02 2014 GMT\n        Next Update: Jan 23 01:00:02 2014 GMT\n        CRL extensions:\n            X509v3 Authority Key Identifier:\n                keyid:4A:DD:06:16:1B:BC:F6:68:B5:76:F5:81:B6:BB:62:1A:BA:5A:81:2F\n            X509v3 CRL Number:\n                219\nRevoked Certificates:\n    Serial Number: 40BF8571DD53E3BB➊\n        Revocation Date: Sep 10 15:19:22 2013 GMT\n        CRL entry extensions:\n            X509v3 CRL Reason Code:\n                Affiliation Changed\n--*snip*--\n    Serial Number: 0A9F21196A442E45➋\n        Revocation Date: Jun 12 17:42:06 2013 GMT\n        CRL entry extensions:\n            X509v3 CRL Reason Code:\n                Superseded\n    Signature Algorithm: sha1WithRSAEncryption\n         40:f6:05:7d:...\n```", "```\nvoid init(KeyManager[] km, TrustManager[] tm, SecureRandom random);\n```", "```\nvoid checkClientTrusted(X509Certificate[] chain, String authType);\nvoid checkServerTrusted(X509Certificate[] chain, String authType);\nX509Certificate[] getAcceptedIssuers();\n```", "```\nString chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket);\nString chooseServerAlias(String keyType, Principal[] issuers, Socket socket);\nX509Certificate[] getCertificateChain(String alias);\nString[] getClientAliases(String keyType, Principal[] issuers);\nPrivateKey getPrivateKey(String alias);\nString[] getServerAliases(String keyType, Principal[] issuers);\n```", "```\nboolean verify(String hostname, SSLSession session);\n```", "```\n# **ls -l /data/misc/keychain**\ndrwxr-xr-x system   system            cacerts-added\ndrwxr-xr-x system   system            cacerts-removed\n-rw-r--r-- system   system         81 pubkey_blacklist.txt\n-rw-r--r-- system   system          7 serial_blacklist.txt\n# **ls -l /data/misc/keychain/cacerts-added**\n-rw-r--r-- system   system        653 30ef493b.0➊\n# **ls -l /data/misc/keychain/cacerts-removed**\n-rw-r--r-- system   system       1060 00673b5b.0➋\n```", "```\nKeyStore ks = KeyStore.getInstance(\"AndroidCAStore\");➊\nks.load(null, null);➋\nEnumeration<String> aliases = ks.aliases();➌\nwhile (aliases.hasMoreElements()) {\n    String alias = aliases.nextElement();\n    Log.d(TAG, \"Certificate alias: \" + alias);\n    X09Certificate cert = (X509Certificate) ks.getCertificate(alias);➍\n    Log.d(TAG, \"Subject DN: \" + cert.getSubjectDN().getName());\n    Log.d(TAG, \"Issuer DN: \" + cert.getIssuerDN().getName());\n}\n```", "```\n// Certificate chain including the end entity (server) certificate\n// and any intermediate issuers.\nX509Certificate[] chain = { endEntityCert };\nTrustManagerFactory tmf = TrustManagerFactory.getInstance(\"X509\");➊\ntmf.init((KeyStore) null);➋\nTrustManager[] tms = tmf.getTrustManagers();\nX509TrustManager xtm = (X509TrustManager) tms[0];➌\nLog.d(TAG, \"checking chain with \" + xtm.getClass().getName());\nxtm.checkServerTrusted(chain, \"RSA\");➍\nLog.d(TAG, \"chain is valid\");\n```", "```\nhostname=enforcing|SPKI SHA512 hash, SPKI SHA512 hash,...\n```", "```\nList<X509Certificate> checkServerTrusted(X509Certificate[] chain, String authType, String host)\n```"]