- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: More Ways to Transform Shapes
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: This chapter introduces a collection of transformation operations that allow
    you to have more control when creating complex shapes. You’ll learn how to rotate,
    reflect, and scale shapes; combine them with a shared hull; and round out their
    edges. These transformation operations will expand your modeling toolbox and allow
    you to create even more complex designs.
  prefs: []
  type: TYPE_NORMAL
- en: OpenSCAD Shape Transformations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, you’ll learn how to use three transformation operations: `rotate`, `mirror`,
    and `resize`. A *transformation operation* is a bit of code that comes immediately
    before a shape to alter the shape’s position, size, or orientation. For illustrative
    purposes, we include a transparent gray outline in this chapter’s examples to
    indicate where the original, untransformed shape would have appeared.'
  prefs: []
  type: TYPE_NORMAL
- en: Rotating Shapes with rotate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, OpenSCAD draws shapes so they’re oriented in a certain way. It draws
    sphere shapes centered at (0, 0, 0), for example, and cube shapes with a single
    corner at (0, 0, 0). Sometimes, though, you’ll want your shape to have a different
    orientation.
  prefs: []
  type: TYPE_NORMAL
- en: One way to alter a shape’s default position is to *rotate* it. To rotate a shape,
    specify the angle of rotation around each of the three axes, and express the angles
    of rotation in degrees, which can be positive or negative.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet rotates a cuboid 90 degrees around the x-axis ([Figure
    2-1](#figure2-1)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![f02001](image_fi/279547c02/f02001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-1: A cuboid rotated 90 degrees around the x-axis'
  prefs: []
  type: TYPE_NORMAL
- en: First, write the name of the transformation, and then inside the parentheses,
    provide `rotate` with a vector in square brackets (`[ ]`) to group together the
    three axes of rotation. The first element in the vector is the degree of rotation
    around the x-axis, the second is the degree of rotation around the y-axis, and
    the third is the degree of rotation around the z-axis. Next, write the code for
    the shape you want to rotate. As always, use a semicolon (`;`) to end the entire
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: Because you’re rotating the shape 90 degrees around the x-axis, its position
    the x-axis stays fixed, and it gets a new position on the yz-plane.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet rotates the same cuboid around the y-axis ([Figure
    2-2](#figure2-2)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![f02002](image_fi/279547c02/f02002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-2: A cuboid rotated 180 degrees around the y-axis'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the shape’s position relative to the y-axis stays fixed, and its
    position on the xz-plane moves by 180 degrees.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also rotate a shape around two axes with a single operation, as in
    the following snippet ([Figure 2-3](#figure2-3)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![f02003](image_fi/279547c02/f02003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-3: A cuboid rotated 90 degrees around the x-axis and 90 degrees around
    the z-axis'
  prefs: []
  type: TYPE_NORMAL
- en: 'This cuboid is rotated around both the x- and z-axes. You might find it easier
    to imagine this operation as two separate transformations: one that rotates the
    shape around the x-axis and one that rotates it around the z-axis. To rotate the
    shape counterclockwise by 90 degrees in both directions, set the angle of rotation
    for those axes to –90\.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Even though rotation around multiple axes is possible with the application
    of only one rotation operation, it’s best to separate the various rotations into
    individual, repeated transformations. This is because it is sometimes hard to
    predict which rotation will be applied first. Consider the difference in the location
    of the cuboid when the rotation around the z-axis is applied before the rotation
    around the x-axis ([Figure 2-4](#figure2-4)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![f02004](image_fi/279547c02/f02004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-4: A cuboid rotated –90 degrees around the z-axis, then rotated –90
    degrees around the x-axis'
  prefs: []
  type: TYPE_NORMAL
- en: Explicitly applying multiple rotations in their intended order will result in
    shapes ending up exactly where you’d like them to be after the rotations are applied.
  prefs: []
  type: TYPE_NORMAL
- en: Reflecting Shapes with mirror
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another way to change a shape’s default position is to *reflect* it across
    an imaginary 2D plane with the `mirror` transformation. As you might expect from
    the name of the operation, `mirror` creates a mirror-like reflection of your shape.
    The following statement reflects a truncated cone across the yz-plane ([Figure
    2-5](#figure2-5)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![f02005](image_fi/279547c02/f02005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-5: A truncated cone reflected across the yz-plane via the vector [10,
    0, 0]'
  prefs: []
  type: TYPE_NORMAL
- en: The vector you pass to `mirror` contains the x, y, and z coordinates that define
    an imaginary point. OpenSCAD then draws an imaginary line from the origin to that
    point and uses the 2D plane that is perpendicular to that line at the origin as
    the *mirror*, or plane of reflection.
  prefs: []
  type: TYPE_NORMAL
- en: To clarify this, [Figure 2-6](#figure2-6) shows the “mirror” as a semitransparent
    plane.
  prefs: []
  type: TYPE_NORMAL
- en: '![f02006](image_fi/279547c02/f02006.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-6: A truncated cone reflected across the yz-plane via the vector [10,
    0, 0]'
  prefs: []
  type: TYPE_NORMAL
- en: The “mirror” is perpendicular to the vector, shown in green, drawn from (0,
    0, 0) to (10, 0, 0). Notice that you don’t have to use 10 as the x-axis value
    to create this mirror; any nonzero x-axis value would cause the mirror operation
    to behave the same way, as your goal is only to specify a vector that is perpendicular
    to the mirror. The *mirror plane* always contains the origin (0, 0, 0). In effect,
    the vector parameter of the `mirror` operation describes how the mirror is rotated.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next statement reflects a cylinder across the xy-plane ([Figure 2-7](#figure2-7)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![f02007](image_fi/279547c02/f02007.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-7: A cone reflected across the xy-plane via the vector [0, 0, 10]'
  prefs: []
  type: TYPE_NORMAL
- en: This example defines a point at (0, 0, 10), and the line from the defined point
    to the origin is perpendicular to the xy-plane. The `mirror` operation is particularly
    useful for quickly creating complex shapes that involve symmetry. Using the `mirror`
    operation in such cases may save you time, as you can focus on designing only
    one half of the object, and then use `mirror` to create the second half.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the `mirror` operation does not copy the shape; it moves the shape
    into the mirrored position. If you want a fully symmetrical shape, first create
    the shape, and then repeat it with the `mirror` operation in front of it.
  prefs: []
  type: TYPE_NORMAL
- en: Scaling Shapes with resize
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `resize` operation allows you to stretch or shrink specific dimensions of
    individual shapes. When you resize a shape, you can specify its exact dimension
    along each axis. By stretching a sphere across a single axis, for example, you
    can turn it into an ellipsoid (an elongated sphere).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet uses `resize` to scale a sphere with a radius of
    1 into an ellipsoid ([Figure 2-8](#figure2-8)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![f02008](image_fi/279547c02/f02008.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-8: A sphere resized into an ellipsoid'
  prefs: []
  type: TYPE_NORMAL
- en: Before writing the shape command, pass a vector to the `resize` operation to
    group together the new dimensions of the sphere along the x-, y-, and z-axes.
    As with all transformations, use a semicolon to end the entire statement.
  prefs: []
  type: TYPE_NORMAL
- en: The new ellipsoid stretches 5 units on either side of the origin along the x-axis,
    5 units on either side of the origin along the y-axis, and 10 units on either
    side of the origin along the z-axis.
  prefs: []
  type: TYPE_NORMAL
- en: 'You could also use `resize` to transform a basic cylinder ([Figure 2-9](#figure2-9)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![f02009](image_fi/279547c02/f02009.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-9: A resized cylinder'
  prefs: []
  type: TYPE_NORMAL
- en: This statement resizes a basic cylinder with a height and two radii of 5 units
    so that the transformed cylinder stretches 10 units along the x-axis (through
    the origin), 5 units along the y-axis (also through the origin), and 20 units
    along the z-axis (from the origin).
  prefs: []
  type: TYPE_NORMAL
- en: More Ways to Combine 3D Shapes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Chapter 1, you learned about three Boolean operations that allow you to
    combine multiple 3D shapes: `union`, `difference`, and `intersection`. You can
    also combine two shapes into one with the `hull` and `minkowski` operations.'
  prefs: []
  type: TYPE_NORMAL
- en: Combining Shapes with hull
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `hull` operation creates a convex *hull* (or skin) around two shapes. To
    understand this, imagine stretching a balloon tightly around two or more shapes
    in order to create a single shape. For example, the following code creates a balloon
    surrounding both a sphere and a cube ([Figure 2-10](#figure2-10)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![f02010](image_fi/279547c02/f02010.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-10: A hull stretched around a small cube and a big sphere'
  prefs: []
  type: TYPE_NORMAL
- en: The `hull` operation has the same syntax as the Boolean operations described
    in Chapter 1. It can combine two or more shapes, and as with the `union` operation,
    the order of shapes does not matter.
  prefs: []
  type: TYPE_NORMAL
- en: Combining Shapes with minkowski
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `minkowski` operation creates a *Minkowski sum* of a collection of shapes.
    This means it wraps the edges of one shape with the characteristic of a second
    shape. The following example wraps a sphere around the edges of a cylinder to
    create rounded edges ([Figure 2-11](#figure2-11)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![f02011](image_fi/279547c02/f02011.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-11: A sphere used to smooth the corners of a cylinder'
  prefs: []
  type: TYPE_NORMAL
- en: The `minkowski` operation also has the same syntax as the Boolean operations
    described in Chapter 1\. In this example, the edges of the cylinder become rounded
    edges because the smaller sphere has been embossed along the edges of the cylinder.
    It’s important to note that the `minkowski` operation produces a larger shape
    than the original cylinder, because wrapping the sphere around the original cylinder
    adds volume.
  prefs: []
  type: TYPE_NORMAL
- en: Combining Transformations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can combine transformation operations by writing one operation in front
    of another. For example, the following code snippet applies the `rotate` operation
    before `translate` on each of three cylinders ([Figure 2-12](#figure2-12)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![f02012](image_fi/279547c02/f02012.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-12: Three cylinders, rotated and then translated'
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenSCAD first executes the innermost transformation (the operation directly
    to the left of a shape), then applies the outermost transformation. If you applied
    the transformations in the reverse order, you’d get a different result. The next
    snippet applies the `translate` operation before the `rotate` operation ([Figure
    2-13](#figure2-13)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![f02013](image_fi/279547c02/f02013.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-13: Three cylinders, translated and then rotated'
  prefs: []
  type: TYPE_NORMAL
- en: You get different results because OpenSCAD applies operations in order, starting
    with the transformation operation closest to the shape.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter introduced several important operations for transforming shapes.
    You can now move, rotate, reflect, and resize shapes. You can also combine two
    shapes by forming a hull around them or by smoothing the corners of one shape
    with another.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some important points to remember:'
  prefs: []
  type: TYPE_NORMAL
- en: You can apply transformation operations to single shapes and combined shapes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining shapes with the `union` operation can reduce the number of transformation
    operations that you need to apply to a complex design.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying a series of `rotate` operations is often easier to manage than combining
    rotations into one `rotate` operation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reflecting combined shapes with `mirror` can save you time when you’re building
    symmetrical designs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you’re applying multiple transformation operations, order matters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The transformation operation closest to the shape is applied first.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, you’ll learn how to convert 2D shapes into 3D shapes, apply
    transformation operations to 2D shapes, and create surprisingly complex 3D shapes
    by combining and operating on basic 2D shapes.
  prefs: []
  type: TYPE_NORMAL
