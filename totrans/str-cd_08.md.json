["```\n> tar xzf clips_core_source_631.tar.gz \n> cd clips_core_source_631/core/\n> make\n```", "```\n> ./clips\n         CLIPS (6.31 6/12/19)\nCLIPS> (* (+ 1 2) 3)\n9\nCLIPS> (exit)\n```", "```\nif door-is-open and time-is-after-midnight then signal-the-police\n```", "```\n(defrule intruder\n    ?x <- (door-is-open)\n    ?y <- (after-midnight)\n  =>\n    (retract ?x ?y)\n    (assert (signal-the-police)))\n```", "```\n> clips\nCLIPS> (load \"wine.clp\")\n--snip--\nCLIPS> (reset)\nCLIPS> (run)\nDo you generally prefer dry, medium, or sweet wines? dry\nDo you generally prefer red or white wines? white\nDo you generally prefer light, medium, or full bodied wines? light\nIs the flavor of the meal delicate, average, or strong? average\nDoes the meal have a sauce on it? no\nIs the main component of the meal meat, fish, or poultry? fish\n\n        SELECTED WINES\n\n WINE                  CERTAINTY\n -------------------------------\n Chardonnay               58%\n Soave                    40%\n Sauvignon-Blanc          40%\n Chablis                  40%\n Geverztraminer           30%\n\nCLIPS> (exit)\n```", "```\n> clips\nCLIPS> (load \"wine.clp\")\n--snip--\nCLIPS> (run)\n\n        SELECTED WINES\n\n WINE                  CERTAINTY\n -------------------------------\n\nCLIPS> (facts)\nf-0     (initial-fact)\nFor a total of 1 fact.\nCLIPS> (agenda)\nCLIPS> (reset)\nCLIPS> (facts)\nf-0     (initial-fact)\nf-36    (attribute (name best-color) (value any) (certainty 100.0))\nf-37    (attribute (name best-body) (value any) (certainty 100.0))\nf-38    (attribute (name best-sweetness) (value any) (certainty 100.0))\nFor a total of 4 facts.\nCLIPS> (agenda)\n10000  start: *\nFor a total of 1 activation.\n```", "```\n(defrule hello\n  => (printout t \"Hello, world!\" crlf))\n```", "```\nCLIPS> (load \"hello0.clp\")\nCLIPS> (run)\nHello, world!\n```", "```\n(deffunction hello () (printout t \"Hello, world!\" crlf))\n(hello)\n(exit)\n```", "```\n> clips -f2 hello1.clp\nHello, world!\n```", "```\nCLIPS> (assert (emergency-brake-on))\n<Fact-1>\nCLIPS> (assert (roses-are red))\n<Fact-2>\nCLIPS> (assert (violets-are blue))\n<Fact-3>\nCLIPS> (facts)\nf-0     (initial-fact)\nf-1     (emergency-brake-on)\nf-2     (roses-are red)\nf-3     (violets-are blue)\nFor a total of 4 facts.\n```", "```\nCLIPS> (facts)\nf-0     (initial-fact)\nFor a total of 1 fact.\nCLIPS> (deffacts arthropods (insects 6) (spiders 8) (trilobites 48))\nCLIPS> (facts) f-0     (initial-fact)\nFor a total of 1 fact.\nCLIPS> (reset)\nCLIPS> (facts)\nf-0     (initial-fact)\nf-1     (insects 6)\nf-2     (spiders 8)\nf-3     (trilobites 48)\nFor a total of 4 facts.\n```", "```\n(deftemplate roman-coin \"Roman coin facts\"\n  (slot emperor)\n  (slot denomination)\n  (slot obverse)\n  (slot reverse))\n\n(deffacts coin-facts \"ancient Roman coins\"\n  (ancient (emperor Otho)\n           (denomination Denarius)\n           (obverse \"Emperor hd right\")\n           (reverse \"Securitas std left\"))\n  (ancient (emperor Constantine)\n           (denomination AE3)\n           (obverse \"IMP CONSTANTINVS MAX AVG\")\n           (reverse \"VICTORIAE LAETAE PRINC PERP\")) )\n```", "```\nCLIPS> (load \"coin.clp\")\nDefining deftemplate: coin\nDefining deffacts: coin-facts\nTRUE\nCLIPS> (reset)\nCLIPS> (facts)\nf-0     (initial-fact)\nf-1     (coin (emperor Otho) \n              (denomination Denarius) \n              (obverse \"Emperor hd right\") \n              (reverse \"Securitas std left\"))\nf-2     (coin (emperor Constantine) \n              (denomination AE3) \n              (obverse \"IMP CONSTANTINVS MAX AVG\") \n              (reverse \"VICTORIAE LAETAE PRINC PERP\"))\nFor a total of 3 facts.\nCLIPS> (retract 1)\nCLIPS> (facts)\nf-0     (initial-fact)\nf-2     (coin (emperor Constantine) \n              (denomination AE3) \n              (obverse \"IMP CONSTANTINVS MAX AVG\") \n              (reverse \"VICTORIAE LAETAE PRINC PERP\"))\nFor a total of 2 facts.\n```", "```\n(defrule <rule-name> \"<optional-comment>\"\n  (<lefthand-side>) => (<righthand-side>))\n```", "```\nCLIPS> (bind ?x 1)\nCLIPS> (bind ?y 1121)\nCLIPS> (printout t (/ ?x ?y) crlf)\n0.000892060660124889\n```", "```\n(defrule react-security-breach \"React to a security breach\"\n    ?r <- (security-breach ?typ)\n  =>\n    (retract ?r)\n    (assert (log-security-breach ?typ))\n    (printout t \"!!! security alert !!!\" crlf))\n```", "```\nCLIPS> (load \"security.clp\")\nCLIPS> (reset)\nCLIPS> (assert (security-breach hacker))\n<Fact-1>\nCLIPS> (run) !!! security alert !!!\nCLIPS> (facts)\nf-0     (initial-fact)\nf-2     (log-security-breach hacker)\nFor a total of 2 facts.\n```", "```\n(defrule start \"\"\n  ?r <- (startup)\n  =>\n  (printout t \"A simple calculator.\" crlf)\n  (printout t crlf)\n  (printout t \"Enter <number> <op> <number> where\" crlf)\n  (printout t \"<op> is +, -, *, /, ^, mod\" crlf crlf)\n  (printout t \"Enter <function> <arg> where\" crlf)\n  (printout t \"      <function> is: trig, log, exp, or sqrt\" crlf crlf)\n  (printout t \"Type 'end' to exit and @ to use previous result.\" crlf) (retract ?r)\n  (assert (get-next-operation)))\n\n(deffacts initial-facts \"\"\n  (@ 0)\n  (startup))\n```", "```\n(defrule get-operation \"\"\n  ?w <- (get-next-operation)\n  =>\n  (retract ?w)\n  (printout t crlf \"      \")\n  (bind ?expr (readline))\n  (if (eq ?expr \"end\") then (halt))\n  (assert (operation (explode$ ?expr))) )\n```", "```\n(defrule unary-math \"\"\n  ?w <- (operation ?func ?x)\n  ?at <- (@ ?last) =>\n  (retract ?w)\n  (retract ?at)\n  (assert (get-next-operation))\n  (if (eq ?x @) then (bind ?x ?last))\n  (if (eq ?func cos) then (bind ?y (cos ?x)))\n  (if (eq ?func sin) then (bind ?y (sin ?x)))\n  (if (eq ?func tan) then (bind ?y (tan ?x)))\n  (if (eq ?func log) then (bind ?y (log ?x)))\n  (if (eq ?func exp) then (bind ?y (exp ?x)))\n  (if (eq ?func sqrt) then (bind ?y (sqrt ?x)))\n  (printout t ?y)\n  (assert (@ ?y)))\n```", "```\n(defrule binary-math \"\"\n  ?w <- (operation ?a ?op ?b)\n  ?at <- (@ ?last)\n  =>\n  (retract ?w)\n  (retract ?at)\n  (assert (get-next-operation))\n  (if (eq ?a @) then (bind ?a ?last))\n  (if (eq ?b @) then (bind ?b ?last))\n  (if (eq ?op +) then (bind ?y (+ ?a ?b)))\n  (if (eq ?op -) then (bind ?y (- ?a ?b)))\n  (if (eq ?op *) then (bind ?y (* ?a ?b)))\n  (if (eq ?op /) then (bind ?y (/ ?a ?b)))\n  (if (eq ?op ^) then (bind ?y (** ?a ?b)))\n  (if (eq ?op mod) then (bind ?y (mod ?a ?b)))\n  (printout t ?y)\n  (assert (@ ?y)))\n```", "```\nCLIPS> (load \"math.clp\")\nCLIPS> (reset)\nCLIPS> (run)\nA simple calculator.\n\nEnter <number> <op> <number> where\n<op> is +, -, *, /, ^, mod\n\nEnter <function> <arg> where\n      <function> is: trig, log, exp, or sqrt\n\nType 'end' to exit and @ to use the previous result.\n\n      111 * 123\n13653\n      @ + 5\n13658\n      @ / 23456\n0.582281718963165\n      cos @\n0.835210036979047\n      exp @\n2.30529819530959\n      @ ^ @\n6.8579474467406\n      end\n```", "```\n(deffacts olympians\n    (male uranus)\n    (male cronus)\n--snip--\n    (female gaia)\n    (female rhea)\n--snip--\n    (parent uranus cronus)\n    (parent gaia cronus)\n--snip--\n    (married zeus hera)\n    (married hephaestus aphrodite))\n```", "```\n(defrule father\n    (parent ?x ?y)\n    (male ?x)\n  =>\n    (printout t ?x \" is father of \" ?y crlf))\n\n(defrule mother\n    (parent ?x ?y) \n    (female ?x)\n  =>\n    (printout t ?x \" is mother of \" ?y crlf))\n\n(defrule wife\n    (female ?x)\n    (or (married ?x ?y) (married ?y ?x))\n  =>\n    (printout t ?x \" is wife of \" ?y crlf)) (defrule husband\n    (male ?x)\n    (or (married ?x ?y) (married ?y ?x))\n  =>\n    (printout t ?x \" is husband of \" ?y crlf))\n```", "```\n(defrule sibling\n    (parent ?p ?x)\n    (parent ?p ?y)\n    (test (neq ?x ?y))\n  =>\n    (assert (siblings ?x ?y)))\n\n(defrule sister\n    (siblings ?x ?y)\n    (female ?x)\n    (test (neq ?x ?y))\n  =>\n    (printout t ?x \" is sister to \" ?y crlf))\n\n(defrule brother\n    (siblings ?x ?y)\n    (male ?x)\n    (test (neq ?x ?y))\n  =>\n    (printout t ?x \" is brother to \" ?y crlf))\n```", "```\nhephaestus is husband of aphrodite\naphrodite is wife of hephaestus\nzeus is husband of hera      \nhera is wife of zeus       \nuranus is father of aphrodite\naphrodite is sister to cronus\ncronus is brother to aphrodite\nsemele is mother of dionysus \nzeus is father of dionysus         \ndionysus is brother to artemis\n--snip--\n```", "```\n(defglobal ?*brothers* = (create$))\n(defglobal ?*sisters* = (create$))\n\n(defrule sister\n    (siblings ?x ?y)\n    (female ?x)\n    (test (neq ?x ?y))\n  =>\n    (bind ?msg (implode$ (create$ ?x is sister to ?y)))\n    (bind ?*sisters* (create$ ?*sisters* ?msg))) (defrule brother\n    (siblings ?x ?y)\n    (male ?x)\n    (test (neq ?x ?y))\n  =>\n    (bind ?msg (implode$ (create$ ?x is brother to ?y)))\n    (bind ?*brothers* (create$ ?*brothers* ?msg)))\n\n(deffunction brothers ()\n    (foreach ?bro ?*brothers*\n        (printout t ?bro crlf)))\n\n(deffunction sisters ()\n    (foreach ?sis ?*sisters*\n        (printout t ?sis crlf)))\n```", "```\nCLIPS> (load \"family2.clp\")\nCLIPS> (reset)\nCLIPS> (run)\nCLIPS> (sisters)\naphrodite is sister to cronus eris is sister to dionysus\nartemis is sister to dionysus\nartemis is sister to apollo\nartemis is sister to hermes\nartemis is sister to athena\nartemis is sister to eris\nartemis is sister to hephaestus\nartemis is sister to ares\n--snip--\n```", "```\n(defglobal ?*base* = (time))\n(deffunction ftime ()\n  (- (time) ?*base*))\n\n(deffunction rand ()\n  (/ (mod (random) 1000000) 1000000))\n\n(deffunction pause (?delay)\n  (bind ?start (time))\n  (while (< (time) (+ ?start ?delay)) do))\n```", "```\n(defrule emergency \"there is an emergency\"\n    (declare (salience 100))\n    ?x <- (emergency-alert)\n  =>\n    (retract ?x)\n    (printout t \"  !!! emergency! !!!\" crlf))\n\n(defrule pumps-on \"turn the pumps on\"\n    (declare (salience 5))\n    ?x <- (pumps-on)\n  =>\n    (retract ?x)\n    (printout t \"  pumps on (\" (ftime) \")\" crlf)\n    (assert (pumps-off-time (+ (ftime) 3))))\n\n(defrule pumps-off \"turn off the pumps\"\n    (declare (salience 5)) \n    ?x <- (pumps-off-time ?t) \n  =>  \n    (if (>= (ftime) ?t) then \n      (retract ?x) \n      (printout t \"  pumps off (\" (ftime) \")\" crlf)\n    else\n      (refresh pumps-off)))\n```", "```\n(defrule monitor \"monitor the factory\"\n    (declare (salience 0))\n    (monitor-loop)\n  =>\n    (if (< (rand) 0.2) then (assert (pumps-on)))\n    (if (< (rand) 0.05) then (assert (emergency-alert)))\n    (pause 0.2)\n    (refresh monitor))\n\n(deffacts initial\n  (monitor-loop))\n```", "```\nCLIPS> (load \"factory.clp\")\nCLIPS> (reset)\nCLIPS> (run)\n  pumps on (2.55227184295654)\n  pumps off (5.55229592323303)\n  pumps on (5.95234894752502)\n  pumps off (8.95237803459167)\n  !!! emergency! !!!\n  pumps on (10.152487039566)\n  pumps off (13.1525239944458)\n  pumps on (14.5526268482208)\n  pumps off (17.5526599884033)\n^\\Quit (core dumped)\n```", "```\n(deffacts initial-facts \"\"\n  (question \"Is petal width <= 0.80?\")\n  (state 1)\n  (startup))\n\n(defrule start \"start the program\"\n  ?r <- (startup)\n  =>\n  (printout t crlf)\n  (printout t \"Iris classifier.  Please respond 'y' or 'n' to each question.\" crlf)\n  (printout t crlf)\n  (retract ?r))\n\n(defrule ask-question \"ask the user a question\"\n  ?p <- (question ?q)\n  =>\n  (retract ?p)\n  (printout t ?q \" \")\n  (bind ?resp (readline))\n  (assert (response ?resp)))\n\n(defrule output-result \"we have a label\"\n  (label ?label)\n  =>\n  (printout t crlf \"The sample is an instance of \")\n  (printout t ?label crlf crlf)\n  (halt))\n```", "```\n(defrule q1-yes \"\"\n  ?q <- (state 1)\n  ?r <- (response \"y\")\n  =>\n  (retract ?q ?r)\n  (assert (label \"setosa (0)\")))\n\n(defrule q1-no \"\"\n  ?q <- (state 1)\n  ?r <- (response \"n\")\n  =>\n  (retract ?q ?r)\n  (assert (state 2))\n  (assert (question \"Is petal length <= 4.75?\")))\n```", "```\nCLIPS> (load \"irises.clp\")\nCLIPS> (reset)\nCLIPS> (run)\n\nIris classifier.  Please respond 'y' or 'n' to each question.\n\nIs petal width <= 0.80? n\nIs petal length <= 4.75? n\nIs petal width <= 1.75? y\nIs petal length <= 5.05? y\n\nThe sample is an instance of versicolor (1)\n```"]