- en: '**8'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'VIRTUAL SHADES: DRAWING AND DRAGGING IMAGES**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For the “Fruit Loot” and “Tic Tac Toe” games in [Chapters 3](ch03.xhtml#ch03)
    and [6](ch06.xhtml#ch06), you animated the `Canvas` and `ImageSprite` components
    from App Inventor’s Drawing and Animation drawer by programming `EdgeReached`,
    `TouchDown`, and other event handlers.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll program `Canvas` and `ImageSprite` moving, drawing, and
    dragging methods and event handlers to create an app that lets users draw, type,
    and drag images across a smartphone or tablet screen. Developers use similar functions
    to build apps that allow users to move elements, take handwritten notes, and doodle
    on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**BUILDING THE “VIRTUAL SHADES” APP**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The “Virtual Shades” app lets users take pictures of themselves with their cameras
    and then drag images of sunglasses over their selfies to try them on virtually.
    As you build the app, you’ll learn to use the `Camera` to create the `Canvas`
    background, the `Slider` to adjust other components, and the `Notifier` to collect
    user input. You’ll also practice using many programming concepts you’ve already
    learned.
  prefs: []
  type: TYPE_NORMAL
- en: To get started, log in to App Inventor and create a new project named VirtualShades.
  prefs: []
  type: TYPE_NORMAL
- en: '**DECOMPOSING “VIRTUAL SHADES”**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For this app, users should be able to take a picture that becomes the `Canvas`
    background, drag various pairs of sunglasses over the picture, and change the
    size of the sunglasses to get the right fit. They also should be able to doodle
    and add text to the photo; save it as a graphic that they can view, email, or
    text later; and erase the sunglasses as well as all drawing and text at any time.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can break this action into eight steps:'
  prefs: []
  type: TYPE_NORMAL
- en: When the user clicks the picture button, open the device’s camera. Set the picture
    the user takes as the `Canvas` background.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the user clicks the `ListPicker`, show the list of available sunglasses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the user selects a pair of sunglasses, display them on the `Canvas`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the user drags the sunglasses around the `Canvas`, move them where the
    user drags. When the user moves the `Slider`’s thumb, adjust the size of the sunglasses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the user clicks the draw button, show a `Notifier` alert letting the user
    know where to draw. When the user drags a finger around the `Canvas`, draw on
    the `Canvas` where the user drags.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the user clicks the type button, show a `Notifier` with a text box where
    the user can enter text. After the user submits the text, display it at the bottom
    of the `Canvas`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the user clicks the save button, store a picture of the `Canvas` on the
    device, and show a `Notifier` alert letting the user know the storage location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the user clicks the trash button, erase all sunglasses, marks, and typing
    from the `Canvas`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You’ll need the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: Button (5) for the user to click to open the camera, draw, type, save, and erase
    the `Canvas`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Camera to open the device’s camera
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Canvas to enable dragging and drawing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HorizontalArrangement (2) to hold the `Label`, `Slider`, and `Button`s
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ImageSprite (4) for the user to drag around the `Canvas`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Label to provide `Slider` directions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ListPicker for the user to click to choose sunglasses `ImageSprite`s
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notifier to show alerts and capture user text input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Procedure to clear images from the `Canvas` and reset the `Slider`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slider for the user to adjust the size of `ImageSprite`s
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variable (2) to store the `ImageSprite`s and their descriptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VerticalArrangement to hold all visible components except the picture `Button`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LAYING OUT “VIRTUAL SHADES” IN THE DESIGNER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now let’s start laying out the app in the Designer by adjusting the app screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**Adjusting the Screen**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: First, change the screen’s horizontal alignment to center all contents. Then,
    to give users the most space to “try on” sunglasses, make the screen stay in portrait
    mode even when the user rotates the device. To do this, select **Portrait** under
    ScreenOrientation. Also, hide the status bar and screen title so they won’t take
    up space by unclicking the checkboxes under both ShowStatusBar and TitleVisible.
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding the Canvas and ImageSprites**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Let’s place most of the visible components on the screen in a `VerticalArrangement`
    so that we can set their visibility as a group. When the app opens, only the `Button`
    to take a picture should show; the other components will go in the `VerticalArrangement`
    so we can hide them until later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag a VerticalArrangement from the Layout drawer onto the Viewer. In the Properties
    pane, click the drop-down arrow under AlignHorizontal and select **Center: 3**,
    and set its height and width to **Fill parent** to make it cover the entire screen.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add components to the `VerticalArrangement` in the order in which we want
    them to appear. Start by dragging a Canvas from the Drawing and Animation drawer
    onto the Viewer inside of VerticalArrangement1. In the Properties pane, remove
    the `Canvas`’s background color by clicking the box under BackgroundColor and
    selecting **None**. Change its text size to 25 in the text box under FontSize.
    Make its height and width **Fill parent**, and increase the width of the line
    that can be drawn on it to 4 in the text box under LineWidth. Remove its paint
    color by clicking the box under PaintColor and selecting **None**. Lastly, left-align
    its text by clicking the drop-down arrow under TextAlignment and selecting **left:
    0**.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, drag four ImageSprites from the Drawing and Animation drawer onto the `Canvas`,
    click them in the Components pane, and rename them Sunglasses1, Sunglasses2, Sunglasses3,
    and Sunglasses4. Upload the images *tanSunglasses.png*, *purpleSunglasses.png*,
    *redSunglasses.png*, and *blackSunglasses.png*, all of which come with the resources
    for this book, to the `ImageSprite`s by clicking **Picture** in the Properties
    pane for each. Also, make each `ImageSprite` invisible by deselecting the box
    under **Visible**, and change both the X and Y property for each to 0 so that
    they appear at the top left of the `Canvas` when they show up in the app.
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding User Buttons and Controls**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Drag a ListPicker from the User Interface drawer into VerticalArrangement1 under
    the `Canvas` and make its background color red, its font bold, its height 35 pixels,
    and its width **Fill parent**. Also, change the default text to Choose Glasses
    and make the text white.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we’ll add a `Label` and `Slider`, which we want to position side by side
    to save space. That means we need to place them within a `HorizontalArrangement`.
    Drag a HorizontalArrangement from the Layout drawer into VerticalArrangement1
    under the `ListPicker` and rename it SliderArrangement. Then, select **Center:
    3** under AlignHorizontal and make its width **Fill parent**.'
  prefs: []
  type: TYPE_NORMAL
- en: Drag a Label and a Slider from the User Interface drawer into SliderArrangement,
    with the `Label` on the left. Make the `Label`’s font bold, change its default
    text to Adjust Sunglasses Width:, center-align its text, and make the text red.
  prefs: []
  type: TYPE_NORMAL
- en: Make `Slider1`’s ColorLeft red to match the color scheme and **Width** 40 percent
    so it will fit next to the `Label`. Also, so the user can change the width of
    the sunglasses from 150 to 250 pixels, make the `Slider`’s MaxValue 250 and MinValue
    150. Then set the ThumbPosition to 200 so the `Slider`’s thumb will sit in the
    middle of the slider when it appears. Next, disable the `Slider`’s thumb by unclicking
    the checkbox under ThumbEnabled, which will keep the `Slider` from moving until
    we program it to work after a user drags sunglasses onto the `Canvas`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s add the `Button`s. We’ll place the first four `Button`s side by side
    in a second `HorizontalArrangement`, also to save space. Place this HorizontalArrangement
    under SliderArrangement in VerticalArrangement1 and name it ButtonArrangement,
    center its contents by selecting **Center: 3** under AlignHorizontal, and make
    its width **Fill parent**.'
  prefs: []
  type: TYPE_NORMAL
- en: Drag four buttons from the User Interface drawer into ButtonArrangement and
    rename them, from left to right, DrawBtn, TypeBtn, SaveBtn, and TrashBtn. Then,
    in the Properties pane for each, under **Image**, upload *DrawBtn.png*, *TypeBtn.png*,
    *SaveBtn.png*, and *TrashBtn.png*, respectively, all of which come with the resources
    for this book. Set the height of each `Button` to 50 pixels and remove each `Button`’s
    default text from the text box under **Text**. Note that the four buttons may
    not be fully visible in the Viewer, but you should see them when you test on a
    device.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve placed all the components we need inside of `VerticalArrangement1`,
    we need to hide it until after the user takes a picture. To make it invisible,
    in its Properties pane, unclick the checkbox under **Visible**.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, add the last `Button`, which is the only visible component we’ll place
    outside of `VerticalArrangement1`. Users click this Button to open the camera
    when they first enter the app. Drag the new Button from the User Interface drawer
    onto the Viewer, and rename it TakePicBtn in the Components pane. Make its height
    and width **Fill parent** to cover the entire screen. Next, add a background image
    to the `Button` by clicking the text box under **Image** and uploading *TakePictureBtn.png*,
    which comes with the resources for this book. Also remove the `Button`’s default
    text.
  prefs: []
  type: TYPE_NORMAL
- en: '**Preparing the Non-Visible Components**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Now let’s add and adjust the non-visible components. Drag a Camera component
    from the Media drawer and a Notifier component from the User Interface drawer.
    Change the Notifier’s BackgroundColor to red.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, your screen should look like [Figure 8-1](ch08.xhtml#ch8fig1).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/08fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 8-1: The Viewer, Components, and partial Media panes after you’ve laid
    out “Virtual Shades”*'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve laid out all components, move to the Blocks Editor to program
    the app.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING “VIRTUAL SHADES” IN THE BLOCKS EDITOR**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For “Virtual Shades,” we’ll create two list variables and a procedure, and we’ll
    program 15 event handlers with three conditionals and one `for each` loop.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 1: SETTING THE SELFIE AS THE CANVAS BACKGROUND**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this step, we want the user to take a photo that will become the `Canvas`
    background for the user to drag and draw on.
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking the Photo**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: We start by having the app open the camera when a user clicks `TakePicBtn`.
    Here is the event handler for this.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0146-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the Blocks pane, click TakePicBtn and drag the whenTakePicBtn.Click event
    handler block ➊ to the Viewer. Then, drag Camera1’s callCamera1.TakePicture method
    call block ➋ next to the word `do`. When the user clicks `TakePicBtn`, these blocks
    open the camera so the user can take the photo.
  prefs: []
  type: TYPE_NORMAL
- en: '**Setting the Canvas Background and Showing App Controls**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: After the user takes the selfie, we need the picture to become the `Canvas`
    background, `TakePicBtn` to disappear, and the `VerticalArrangement` that holds
    the `Canvas` and other user interface components to appear. The `Camera`’s `AfterPicture`
    event handler programs this action.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0146-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Drag Camera1’s whenCamera1.AfterPicture event handler block ➊ to the Viewer.
    This event handler reports the value for the `image` event parameter, which is
    the picture taken by the `Camera`. We’ll set the `Canvas` background to that value.
  prefs: []
  type: TYPE_NORMAL
- en: Drag Canvas1’s setCanvas1.BackgroundImageto block ➋ into the whenCamera1.AfterPicture
    block. Then mouse over the image event parameter and snap its get image block
    ➌ to the right of the setCanvas1.BackgroundImageto block. These blocks set the
    user’s picture as the `Canvas` background.
  prefs: []
  type: TYPE_NORMAL
- en: Now, to make `TakePicBtn` disappear, drag its setTakePicBtn.Visibleto block
    ➍ into the event handler block and snap in a false block ➎.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll make the `Canvas` and components in the `VerticalArrangement` visible
    so the user can drag and “try on” the sunglasses and draw and type on the `Canvas`.
    Drag VerticalArrangement1’s setVerticalArrangement1.Visibleto block ➏ into the
    event handler and attach a true block to it ➐.
  prefs: []
  type: TYPE_NORMAL
- en: Put together, the blocks in step 1 open the camera when the user clicks the
    picture button and, after the user takes a picture, set the `Canvas` background
    to that picture, hide the button by setting its `Visible` property to `false`,
    and show the `VerticalArrangement` containing the `Canvas` and app controls by
    setting its `Visible` property to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: To see how these blocks work, live-test with a device. You should see the full-screen
    `TakePicBtn` when you open the app. When you click it, your camera should open,
    and the picture you take should become the background of the top portion of your
    app screen, where you placed the `Canvas`. If the picture is rotated the wrong
    way in the app, close and reopen the app, rotate your camera, and take another
    photo until it displays the way you want.
  prefs: []
  type: TYPE_NORMAL
- en: Below the picture, you should see the `ListPicker` with the app’s Slider and
    the draw, type, save, and trash buttons beneath it, but none of these controls
    should work yet. Leave the app open on your device to keep live-testing.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 2: ADDING SUNGLASSES TO CHOOSE FROM**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now let’s program step 2 of the app, the `ListPicker`’s `BeforePicking` event
    handler, which will set the options for the `ListPicker` that the user clicks
    to select each pair of sunglasses.
  prefs: []
  type: TYPE_NORMAL
- en: To provide these options, we’ll create a global variable called `glassesDescriptions`
    to hold descriptions of the four pairs of sunglasses. We’ll also create a related
    global list variable, `glassesSprites`, which will hold the `ImageSprite`s that
    display the sunglasses. Creating these as global variables allows us to use them
    in every event handler and procedure in the app.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating the glassesDescriptions and glassesSprites List Variables**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The following blocks create `glassesDescriptions`, the variable that holds the
    options we’ll add to the `ListPicker` to describe each pair of sunglasses, and
    `glassesSprites`, the variable that holds the `ImageSprites` (`Sunglasses1` through
    `Sunglasses4`) that display the corresponding pictures of the sunglasses.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0147-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To create the variables, drag two initialize global name blocks ➊ from the Variables
    block drawer to the Viewer and name one variable glassesDescriptions and the other
    glassesSprites. Then attach a make a list block ➋ from the Lists drawer to each
    initialize global block.
  prefs: []
  type: TYPE_NORMAL
- en: Add two more sockets to each make a list block’s two default inputs by clicking
    the blue mutator icon to the left of the words make a list and dragging the additional
    item blocks to the make a list block in the dialog that opens. Finally, for `glassesDescriptions`,
    drag in four empty string blocks ➌, snap them into the sockets of the make a list
    block, and enter the text shown. For `glassesSprites`, click `Sunglasses1` through
    `Sunglasses4` in the Blocks pane and drag each `ImageSprite`’s getter block ➍
    into its socket in the `make a list` block. These blocks create the two variables
    so that each item in `glassesSprites` corresponds with the item at the same index
    position in `glassesDescriptions`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Setting the ListPicker Options**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Next, we’ll code the `ListPicker`’s `BeforePicker` event handler, which sets
    the `ListPicker`’s elements to the items in `glassesDescriptions`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0148-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To add the blocks, drag ListPicker1’s whenListPicker1.BeforePicking event handler
    block ➊ to the Viewer. Then drag its setListPicker1.Elementsto block ➋ inside
    the event handler block, and snap the get global glassesDescriptions block ➌ to
    the right of the setListPicker1.Elementsto block.
  prefs: []
  type: TYPE_NORMAL
- en: Live-test the app to see how these blocks work. When you click the `ListPicker`,
    you should see the selection options, which are descriptions of each pair of sunglasses.
    Nothing should happen yet when you select a pair, except that the `ListPicker`
    should close. Leave the app open on your device to keep live-testing.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 3: SELECTING A PAIR OF SUNGLASSES TO TRY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s now program the `ListPicker`’s `AfterPicking` event handler, which tells
    the app what to do after the user picks a pair of sunglasses. At that point, if
    there’s already a pair of sunglasses on the `Canvas`, the app should remove it
    and reset the `Slider` that adjusts the width of the sunglasses, in case the user
    previously adjusted it. If, on the other hand, it’s the user’s first pick from
    the `ListPicker`, we want the app to enable the `Slider`. Then, we want the app
    to show the pair of sunglasses the user selected.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating the clearSprite Procedure**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To clear an existing `ImageSprite` and reset the `Slider`, we’ll use a procedure
    called `clearSprite`, which we’ll call in the `ListPicker`’s `AfterPicking` event
    handler and later in the handler we’ll create to clear the `Canvas`. The `clearSprite`
    procedure uses a conditional block to test whether there’s an image on the `Canvas`.
    If there is, it removes the image and moves the `Slider` thumb back to its starting
    position.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0149-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click the **Procedures** blocks drawer in the Blocks pane, drag the to procedure
    do block ➊ to the Viewer, and name the procedure clearSprite. Next, we’ll test
    whether there’s an `ImageSprite` on the `Canvas` by determining whether the current
    `ListPicker` selection index is `1` or greater. Since the four sunglasses `ImageSprite`s
    have the index positions `1` through `4`, we’ll know by checking the index whether
    one of them is showing on the `Canvas`. If it is, then the app needs to clear
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Snap an if then block ➋ inside the clearSprite procedure block and a `≥` comparison
    block ➌ into the if then block’s if socket. Fill the comparison block’s left operand
    socket with the ListPicker.SelectionIndex block ➍ and its right socket with a
    1 number block ➎. So far, the `if then` block sets up the test condition by saying,
    “If the `ListPicker1` selection index is greater than or equal to `1`” and the
    sentence stops there. The next blocks complete the sentence by telling the app
    what to do if the condition is met.
  prefs: []
  type: TYPE_NORMAL
- en: '**Clearing All ImageSprites and Resetting the Slider**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: If the `ListPicker1` selection index is greater than or equal to `1`, the following
    blocks loop through and hide all `ImageSprite`s and reset the `Slider`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0149-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To place the blocks, drag a for each item block ➊ inside the if then block’s
    then socket, and change item to sprite. Then snap a get global glassesSprites
    block ➋ to the right of the for each block next to the word `list`. Next, click
    the plus sign to the left of **Any component** near the bottom of the Blocks pane,
    click the **Any ImageSprite** drawer, and drag a setImageSprite.Visible block
    ➌ inside the for each block. Fill the setter block’s top socket by mousing over
    the sprite item and dragging in a get sprite block ➍, and fill its bottom socket
    with a false block ➎. Now, when the procedure is called, all `ImageSprite`s will
    become invisible.
  prefs: []
  type: TYPE_NORMAL
- en: Next we’ll add the blocks that reset the `Slider`. We need to do this because,
    later in the code, we’ll program an `ImageSprite`’s width to change when a user
    changes the `Slider`’s `ThumbPosition`. Just in case the user has changed the
    `ThumbPosition` for one of the `ImageSprite`s when it was showing on the `Canvas`,
    the next blocks change the `Slider`’s `ThumbPosition` and the `ImageSprite`’s
    width back to the `200` we set in the Designer.
  prefs: []
  type: TYPE_NORMAL
- en: Drag Slider1’s setSlider1.ThumbPosition block ➏ inside the if then block under
    the for each block, and snap a 200 number block ➐ to its right. Now, when the
    procedure is called, these blocks reset the `Slider`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Calling clearSprite and Enabling the Slider**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Now that we’ve created the procedure, let’s build the `AfterPicker` event handler.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0150-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `AfterPicker` event handler will first call the `clearSprite` procedure
    we just created to clear any `ImageSprite`s from the screen and reset the `Slider`.
    It will then enable the `Slider`, if necessary, and show the selected pair of
    sunglasses.
  prefs: []
  type: TYPE_NORMAL
- en: Drag ListPicker1’s whenListPicker1.AfterPicking block ➊ to the Viewer. Then,
    drag the call clearSprite block ➋ into the event handler block. These blocks call
    the `clearSprite` procedure after the user selects a pair of sunglasses in the
    `ListPicker`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll add the conditional block that lets the app know when to turn on
    the `Slider`, which we turned off in the Designer by unclicking the `ThumbEnabled`
    property. We disabled the thumb so that a user can’t move it before selecting
    a pair of sunglasses, which would cause an error.
  prefs: []
  type: TYPE_NORMAL
- en: It’s possible, though, that the user has already enabled the `Slider` by previously
    selecting a pair of sunglasses, so we must check for that. In the Blocks pane,
    drag an if then block ➌ into the event handler under the call clearSprite block.
    Then, fill the if socket with an = comparison operator block ➍, and fill the operator
    block’s left operand socket by dragging in Slider1’s Slider1.ThumbEnabled block
    ➎. Fill its right operand socket with a false block ➏.
  prefs: []
  type: TYPE_NORMAL
- en: Next, fill the if then block’s then socket with a setSlider1.ThumbEnabled block
    ➐ and drag a true block ➑ to its right. Now, after the user selects a pair of
    sunglasses, this `if then` block will enable the `Slider`’s thumb *only if* it’s
    currently not enabled. Although the app will check this condition each time the
    user selects a pair of sunglasses, it will enable the `Slider`’s thumb only once,
    after the user’s first selection.
  prefs: []
  type: TYPE_NORMAL
- en: '**Showing the Selected ImageSprite**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Finally, the `AfterPicker` event handler will display the selected pair of sunglasses
    on the `Canvas`. When added to the event handler, the following blocks will make
    this happen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0151-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These blocks set the `Visible` property of the user’s selected `ImageSprite`
    to `true` after they identify the correct `ImageSprite` by matching its index
    position in the `glassesSprites` list with the index of the selected `ListPicker1`
    option.
  prefs: []
  type: TYPE_NORMAL
- en: To place these blocks, click the **Any ImageSprite** drawer and drag a setImageSprite.Visible
    block ➊ inside the event handler block under the if then block. Fill the setImageSprite.Visible
    block’s top socket with a select list item block ➋ from the Lists blocks drawer.
    Next, fill the select list item block’s list socket with a get global glassesSprites
    block ➌ and its index socket with ListPicker1’s ListPicker1.SelectionIndex block
    ➍. Now, fill the setImageSprite.Visible block’s bottom socket with a true block
    ➎.
  prefs: []
  type: TYPE_NORMAL
- en: That’s it for step 3\. After the user selects a pair of sunglasses, the blocks
    for this step clear any existing `ImageSprite` from the `Canvas` and reset the
    `Slider`, enable the `Slider` if it’s the user’s first time picking from the `ListPicker`,
    and show the selected sunglasses on the `Canvas`.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s live-test the blocks for this step. When you click the `ListPicker` and
    make a selection, the sunglasses you selected should show on the `Canvas` after
    the `ListPicker` closes. You won’t be able to move the glasses around on the screen
    yet—not until we program step 4\. Leave the app open on the screen to keep live-testing.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 4: TRYING ON SUNGLASSES**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this step, we’ll program two event handlers: the `ImageSprite Dragged` event
    handler that moves the sunglasses around the `Canvas` when the user drags them
    and the `Slider PositionChanged` event handler that makes the sunglasses bigger
    or smaller when the user adjusts the `Slider`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Setting the Sunglasses1 X- and Y-Coordinates After Dragging**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: We’ll have to program a `Dragged` event handler that moves the `ImageSprites`
    when the user drags the sunglasses around the screen. The following blocks move
    `Sunglasses1`.
  prefs: []
  type: TYPE_NORMAL
- en: Drag Sunglasses1’s whenSunglasses1.Dragged block ➊ to the Viewer. Then drag
    its callSunglasses1.MoveTo block ➋ into the event handler block. These blocks
    call the `MoveTo` method to move `Sunglasses1` to a given point when a user drags
    `Sunglasses1`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0152-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To use this method, we need to provide the coordinates for that point as the
    arguments for the method’s `x` and `y` parameters. We’ll set those coordinates
    using the `Dragged` event handler’s reported event parameter arguments for the
    coordinates at which the user’s drag of the `ImageSprite` ended (`currentX` and
    `currentY`).
  prefs: []
  type: TYPE_NORMAL
- en: To add the blocks for the `x` parameter, snap a - operator block ➌ to the right
    of the letter x. Then, mouse over the currentX event parameter and drag its get
    currentX block ➍ into the subtraction block’s first operand socket.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to subtract half the `ImageSprite`’s width from its x-coordinate
    to shift it to the left, so that users can drag it from its top-center point,
    which is easier than dragging it from the default position, the top-left edge.
    To do this, drag a × operator block ➎ into the subtraction block’s second operand
    socket. Then, fill the multiplication block’s left operand socket by dragging
    in Sunglasses1’s Sunglasses1.Width block ➏ and its right operand socket with a
    0.5 number block ➐. These blocks tell the app that, when a user drags `Sunglasses1`,
    it should move `Sunglasses1` to the x-coordinate of the point to which the user
    dragged it, minus half the sprite’s width.
  prefs: []
  type: TYPE_NORMAL
- en: To add the blocks for the `MoveTo` block’s `y` parameter, mouse over the currentY
    event parameter and snap its get currentY block ➑ in next to the letter `y`. These
    blocks tell the app that, when a user drags `Sunglasses1`, it should move `Sunglasses1`
    to the y-coordinate of the point to which the user dragged it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating a Dragged Event Handler for All Sunglasses ImageSprites**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: We now need to program the exact same `Dragged` event response for `Sunglasses2`,
    `Sunglasses3`, and `Sunglasses4`. The following generic event handler accomplishes
    this task.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0152-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To create this any `ImageSprite Dragged` event handler, right-click the `Sunglasses1
    Dragged` event handler that we just placed and select **Make Generic**. Now the
    blocks for step 4 move the four sunglasses `ImageSprite`s around the `Canvas`
    when the user drags them.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s live-test to see these blocks work. Once you select a pair of sunglasses,
    they should move around the `Canvas` where you drag them. If they’re not moving
    correctly, debug and test again. Before you test again, you may need to refresh
    the app in your Companion to make sure your changes take effect. You can refresh
    by making any change to the app in the Designer. Once this part of step 4 is working,
    move to the next part of the step, where we’ll program the `Slider` to allow a
    user to change the sunglasses’ sizes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Adjusting the Width of the Selected Sunglasses**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Since the 200-pixel-wide sunglasses might not fit correctly on a user’s photo,
    we’ll program the app to let the user adjust the size of the sunglasses by moving
    the `Slider`. The `Slider1 PositionChanged` event handler accomplishes this.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0153-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These blocks handle the action that takes place when the thumb position of the
    `Slider` changes from the initial value of `200` that we set in the Designer.
    Once the `Slider` position changes, the `whenSlider1.PositionChanged` block provides
    the argument for a `thumbPosition` event parameter, which holds the numerical
    value of the thumb position after the change.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll first place the blocks that set the selected `ImageSprite`’s new width
    to the value of `thumbPosition`, which will be somewhere between a minimum of
    150 and maximum of 250, the `MinValue` and `MaxValue` properties we set for the
    `Slider` in the Designer. Drag Slider1’s whenSlider1.PositionChanged block ➊ to
    the Viewer. Next, drag a setImageSprite.Width block ➋ from the Any ImageSprite
    drawer into the event handler block. Fill the setImageSprite.Width block’s top
    socket with a select list item block ➌, and fill that select list item block’s
    top socket with a get global glassesSprites block ➍ and its bottom socket with
    the ListPicker1.SelectionIndex block ➎. Now, fill the setImageSprite.Width block’s
    bottom socket by mousing over the thumbPosition event parameter and dragging in
    a get thumbPosition block ➏.
  prefs: []
  type: TYPE_NORMAL
- en: '**Adjusting the Height of the Selected Sunglasses**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The next blocks set the height of the selected sunglasses when the `Slider`
    position changes. This is the second half of the `Slider1 PositionChanged` event
    handler.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0154-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These blocks set the pixel height of the selected sunglasses to the value of
    the `thumbPosition` multiplied by 0.4\. Since the height of each pair of sunglasses
    is 80 pixels, which is 0.4 times the default 200-pixel width, we use this formula
    to maintain the same proportion between the sunglasses’ height and width when
    the width changes. This will keep the glasses from looking distorted when a user
    moves the `Slider`.
  prefs: []
  type: TYPE_NORMAL
- en: To place these blocks, duplicate the `setImageSprite.Width` block. In the copy,
    change Width to Height, and snap the setImageSprite.Height block ➊ into the event
    handler block. Then replace the block in the to socket with a × operator block
    ➋. Fill that multiplication block’s left operand socket by dragging in a get thumbPosition
    block ➌ and its right socket with a 0.4 number block ➍.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve now completed step 4\. Let’s live-test again to see how these blocks
    work. You should be able to drag your selected pair of sunglasses around the `Canvas`
    and move the `Slider` to the left to make the glasses smaller and to the right
    to make them larger. If the sunglasses aren’t changing size correctly or proportionally,
    debug and test again. Once step 4 is working, move on to step 5, where we’ll program
    the app to let users draw on the picture.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 5: LETTING USERS DRAW ON THE CANVAS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s now program step 5 of the app. When a user clicks the draw button, the
    app should display a notification that the user can draw anywhere on the `Canvas`.
    Also, when the user drags a finger on the `Canvas`, the app should draw on the
    `Canvas` along the finger’s path, unless the user is dragging one of the sunglasses
    `ImageSprite`s at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: '**Letting Users Know They Can Draw**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Here is the code that tells the user where to draw on the app screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0154-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Drag the whenDrawBtn.Click block ➊ to the Viewer and then drag Notifier1’s callNotifier1.ShowAlert
    method call block ➋ inside it.
  prefs: []
  type: TYPE_NORMAL
- en: The `ShowAlert` method that we’re calling requires an argument for its `notice`
    parameter, which holds the information we want the `Notifier` to display. To provide
    that argument, snap in an empty string block ➌ and enter Drag on the screen anywhere
    above the buttons to draw. into its text area. Now, when the user clicks the draw
    button, these blocks will display an alert saying the user can drag on the `Canvas`
    to draw.
  prefs: []
  type: TYPE_NORMAL
- en: '**Drawing Lines on the Canvas**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Next, we’ll tell the app where to draw when a user drags the `Canvas` and in
    what color. The following blocks handle this `Canvas1 Dragged` event.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0155-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Drag the whenCanvas1.Dragged block ➊ to the Viewer. When the user drags the
    `Canvas`, this event handler will store the following seven event parameters as
    arguments: the x- and y-coordinates for the point at which the user first touched
    the `Canvas` (`startX` and `startY`), the point at which the current drag began
    (`prevX` and `prevY`), the point at which the current drag ended (`currentX` and
    `currentY`), and a Boolean value for whether the drag also dragged an `ImageSprite`
    (`draggedAnySprite`). We’ll use a number of these values in the blocks we add
    to the `Dragged` event handler.'
  prefs: []
  type: TYPE_NORMAL
- en: To add the blocks to make the app draw a line where the user dragged, drag the
    callCanvas1.DrawLine method call block ➋ into the event handler block. This method
    requires us to provide arguments for its `x1` and `y1` parameters, which hold
    the x- and y-coordinates for the point at which the app should start drawing,
    and `x2` and `y2` parameters, which hold the x- and y-coordinates for the point
    at which the app should stop drawing.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll get these arguments from the `whenCanvas1.Dragged` block. Mouse over the
    block’s parameters and drag a get prevX block ➌ into the callCanvas1.DrawLine
    block’s top socket, a get prevY block ➍ into its second socket, a get currentX
    block ➎ into its third socket, and a get currentY block ➏ into its last socket.
    Now, when the user drags on the `Canvas`, these blocks direct the app to draw
    a line from the point at which the user begins to drag the `Canvas` to the point
    at which the user stops.
  prefs: []
  type: TYPE_NORMAL
- en: '**Determining the Canvas Line Color**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Right now, despite the blocks we just placed, the user’s lines won’t show up.
    That’s because we set the `PaintColor` for `Canvas1` to None in the Designer.
    To update this, we’ll have the app draw a transparent line if the user also drags
    an `ImageSprite` along with the `Canvas` and a red line if the user drags only
    the `Canvas`. The following `if then else` block directs this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0156-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Drag an if then block to the Viewer, click the blue mutator icon to add an else
    input to the block, and then snap the if then else block ➊ inside the event handler
    block. Now, mouse over the event handler’s draggedAnySprite parameter, and drag
    a get draggedAnySprite block ➋ into the if then else block’s if socket, which
    checks whether the user has dragged one of the `ImageSprite`s. Then, drag a setCanvas1.PaintColor
    block ➌ into the if then else block’s then socket and snap a 1 number block ➍
    to its right to make the color transparent. The blocks in this `then` socket dictate
    what happens if the user has also dragged an `ImageSprite`.
  prefs: []
  type: TYPE_NORMAL
- en: Next duplicate the setCanvas1.PaintColor block ➎ and drag the copy into the
    if then else block’s else socket, which determines what happens if the user hasn’t
    dragged an `ImageSprite`. Replace the 1 number block with a red color block ➏
    from the Colors drawer.
  prefs: []
  type: TYPE_NORMAL
- en: Now, each time a user drags the `Canvas`, the app tests whether the user is
    also dragging a sunglasses `ImageSprite`. If so, the app draws an invisible line
    because of the `1` value we set. If the user’s not dragging an `ImageSprite`,
    the app draws a red line.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s live-test to see how these blocks work. When you click `DrawBtn`, you
    should see an alert letting you know you can draw on the screen by dragging your
    finger above the buttons. When you drag on the `Canvas`, you should see your drawing
    in red on the device screen, unless you’re also dragging a pair of sunglasses.
    If you’re dragging a pair of sunglasses, you shouldn’t see any lines drawn. If
    any part of this step isn’t working correctly, debug and test again. Once step
    5 is working, continue on to the next step, where we’ll program the app to let
    users type on the picture.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 6: LETTING USERS TYPE ON THE CANVAS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When a user clicks `TypeBtn`, the app’s `Notifier` should open a text dialog
    in which the user can enter the desired text to display on the `Canvas`. After
    the user clicks OK to close the dialog, the app should display any text entered
    into the dialog in blue near the bottom of the `Canvas`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Opening the Text Dialog for Input**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The `TypeBtn.Click` event handler opens the text dialog to collect the entered
    text when the user clicks `TypeBtn`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0157-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Drag the whenTypeBtn.Click block ➊ to the Viewer, then drag the callNotifier1.ShowTextDialog
    method call block ➋ into it. This `ShowTextDialog` method call requires an argument
    for its `message` parameter, which holds the message we’ll show the user in the
    text dialog that opens; its `title` parameter, which holds a title that will show
    at the top of the text dialog; and its `cancelable` parameter. If the `cancelable`
    parameter were set to `true`, the app would add an OK and a Cancel button to the
    text dialog. Then, when we program the app to display the user’s response later
    in this step, the app would display the word “Cancel” on the `Canvas` if the user
    clicked Cancel. We’ll set the `cancelable` parameter to `false` instead, which
    adds only an OK button to the dialog. After we program the second part of this
    step, pressing the OK button should place the user’s text on the `Canvas`.
  prefs: []
  type: TYPE_NORMAL
- en: For the `message` parameter, snap an empty string block ➌ into the message socket
    and enter Type your brief message below. Click OK to close this box. For the `title`
    parameter, snap an empty string block ➍ into the title socket and enter Type on
    the Screen; then, set the `cancelable` parameter by changing the default true
    block to false ➎.
  prefs: []
  type: TYPE_NORMAL
- en: '**Displaying the User’s Input on the Canvas**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Now we’ll program the `Notifier AfterTextInput` event handler, which tells the
    app how and where to display the user’s message (reported as the response event
    parameter) on the `Canvas`. Once the user clicks OK in the dialog, the app should
    set the paint color to blue and print the response at specific coordinates on
    the `Canvas`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0157-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Drag the whenNotifier1.AfterTextInput block ➊ to the Viewer. Then, to set the
    paint color, drag the setCanvas1.PaintColor block ➋ into the event handler block
    and snap a blue color block ➌ into its right socket. After the user closes the
    text dialog, these blocks will change the `Canvas` paint color to blue.
  prefs: []
  type: TYPE_NORMAL
- en: Next, to call the method that draws the text on the `Canvas`, drag the callCanvas1.DrawText
    method call block into the whenNotifier1.AfterTextInput event handler block ➍.
    This `DrawText` method takes arguments for its `text` parameter, which is the
    user input it should display on the screen, and for its `x` and `y` parameters,
    which are the x- and y-coordinates for the point at which the input should begin
    to show on the `Canvas`.
  prefs: []
  type: TYPE_NORMAL
- en: To provide the argument for the method’s `text` parameter, mouse over the AfterTextInput
    handler’s response event parameter and drag its get response block ➎ into the
    text socket. For the text location, we’ll set it at 10 pixels in from the `Canvas`’s
    left edge and 20 pixels up from the bottom so that it will display close to the
    bottom of the picture.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, for the `callCanvas1.DrawText` block’s `x` parameter, drag in a
    10 number block ➏, and for its `y` parameter, drag in a - operator block ➐. Fill
    the subtraction block’s left operand socket by dragging in the Canvas1.Height
    block ➑ and fill its right operand socket by dragging in a 20 number block ➒.
    This sets the `x` parameter to `10` and the `y` parameter to the height of the
    `Canvas` minus 20 pixels—or, in other words, 20 pixels from the bottom of the
    `Canvas`.
  prefs: []
  type: TYPE_NORMAL
- en: Now test these blocks. When you click `TypeBtn`, a dialog should open in which
    you can enter the text you want typed on the `Canvas`. Enter some text and click
    **OK**. You should see the text typed in blue at the left side of the `Canvas`,
    near the bottom. If any part of this step isn’t working correctly, debug and test
    again. Once step 6 is working, let’s program the app to allow users to save the
    `Canvas`.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 7: LETTING USERS SAVE A PICTURE OF THE CANVAS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this step, we’ll let a user save a picture of the `Canvas`, along with any
    selected sunglasses, drawing, and typing, to a device as an image file. The `SaveBtn.click`
    event handler saves the user’s creation.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0158-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: First, we’ll tell the app to show an alert when the user clicks the save button.
    Drag the whenSaveBtn.click block ➊ to the Viewer and then place the callNotifier1.ShowAlert
    method call block ➋ inside of it.
  prefs: []
  type: TYPE_NORMAL
- en: The next blocks provide the argument for the `ShowAlert` method’s `notice` parameter,
    which is the notice we want the `Notifier` to show. We want that notice to tell
    the user where on the device the picture is saved and call the method that saves
    the picture while displaying the storage location.
  prefs: []
  type: TYPE_NORMAL
- en: To place these blocks, drag a join block ➌ into the callNotifier1.ShowAlert
    block’s notice socket. Then fill the join block’s top socket with an empty string
    block ➍ and enter The Canvas is saved at, including the final space, into its
    text area. Next, fill the join block’s bottom socket by dragging in a callCanvas1.Save
    method call block ➎.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s test these blocks. When you click `SaveBtn`, you should see an alert reading,
    “The Canvas is saved at <*file location*>.” You should be able to find the file
    when you go to that location or look in the device’s File Manager, but you may
    need to close the app before the file appears. Once this step works as it should,
    close the app on your device and move on to program the app’s last step, which
    allows the user to clear the `Canvas`.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 8: LETTING USERS CLEAR THE CANVAS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this final step, we’ll program the app to let the user clear the sunglasses,
    as well as all drawings and typed text, from the `Canvas`, so that only the background
    image remains. The `TrashBtn.click` event handler clears the `Canvas`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0159-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These blocks call the `clearSprite` procedure, which hides all `ImageSprite`s,
    like it did when we used it in the `AfterPicker` event handler. Then they call
    the built-in `Canvas Clear` method, which clears all text and drawings from the
    `Canvas`, when the user clicks the trash button.
  prefs: []
  type: TYPE_NORMAL
- en: Drag the whenTrashBtn.click block ➊ to the Viewer and then drag the call clearSprite
    block ➋ into it. Next drag a callCanvas1.Clear block ➌ into the event handler
    block under the call clearSprite block.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s test the completed app! Open the app on your device. You should see
    the `TakePicBtn`. Click it, and your camera should open. When you take a picture,
    that picture should become the background of the top portion of your app screen.
    Below the picture, you should see the `ListPicker`, with the `Slider` and the
    draw, type, save, and trash buttons beneath it.
  prefs: []
  type: TYPE_NORMAL
- en: When you click Choose Glasses, you should see all four sunglasses options listed,
    and, when you select a pair, the `ListPicker` should close and your selected sunglasses
    should appear at the top of the `Canvas`. You should be able to drag the glasses
    around the `Canvas` and use the `Slider` to change their size.
  prefs: []
  type: TYPE_NORMAL
- en: Test each button. When you click `DrawBtn`, the app should display the notice
    telling you that you can draw on the `Canvas`, and when you drag your finger along
    the `Canvas` at any place except on the `ImageSprite`, a red line should appear.
    When you click `TypeBtn`, a dialog should open prompting you to type a message,
    and after you type it and click OK, your message should appear in blue at the
    bottom of the `Canvas`.
  prefs: []
  type: TYPE_NORMAL
- en: When you click `SaveBtn`, you should see a notice alerting you that a picture
    of the `Canvas` has been saved at a given location on your device. When you click
    `TrashBtn`, the `ImageSprite` and all text and drawing should disappear from the
    `Canvas`. If you placed your blocks correctly, you’ve successfully created the
    “Virtual Shades” app!
  prefs: []
  type: TYPE_NORMAL
- en: '**SUMMARY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you built the “Virtual Shades” app, which lets users try on
    sunglasses, draw and type on the `Canvas`, and save a picture of the `Canvas`
    to their devices to keep and share.
  prefs: []
  type: TYPE_NORMAL
- en: Along the way, you learned how to set the `Canvas` line size and colors to prepare
    for drawing, let users take a selfie through the app and make it the app background,
    let users adjust components with the `Slider`, and use the `Notifier` component
    to not only display information but also collect user input.
  prefs: []
  type: TYPE_NORMAL
- en: You also practiced declaring and initializing list variables, creating procedures,
    providing required arguments for built-in methods with parameters, using comparison
    operators to test conditions, and adding conditionals and loops to control app
    flow.
  prefs: []
  type: TYPE_NORMAL
- en: '**ON YOUR OWN**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Modify and extend the “Virtual Shades” app by working on the following exercises.
    Be sure to adjust your algorithm to plan the changes before you add any components
    or blocks, and save the new versions of the apps you create. You can find solutions
    online at *[https://nostarch.com/programwithappinventor/](https://nostarch.com/programwithappinventor/)*.
  prefs: []
  type: TYPE_NORMAL
- en: Change the app so that it allows users to choose the `Canvas` paint color to
    draw and type on the `Canvas`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the app so that it allows users to speak the words they want entered
    on the `Canvas`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extend the app so that users can opt not to take a background photo and instead
    create art on a blank `Canvas`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
