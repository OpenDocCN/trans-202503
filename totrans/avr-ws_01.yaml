- en: '[1](nsp-boxall502581-0008.xhtml#rch01)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](images/nsp-boxall502581-ct.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Welcome to the beginning of your AVR microcontroller journey! In this chapter
    I’ll introduce you to the microcontrollers used in this book, as well as a few
    exciting examples of real-world AVR-based projects, then teach you some fundamentals
    about electronics.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: • Where to get the required parts for the projects in this book
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • How to install the required software for Windows, macOS, and Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • The basic properties of electricity and electronic components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • About electronic components, including resistors, light-emitting diodes (LEDs),
    power diodes, capacitors, and more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • How to use a solderless breadboard to construct circuits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Ways to safely power your experiments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of the chapter, you’ll be ready to use your AVR workstation to build
    your [first project](nsp-boxall502581-0012.xhtml#pro0) .
  prefs: []
  type: TYPE_NORMAL
- en: '[The Possibilities Are Endless](nsp-boxall502581-0008.xhtml#rah0301)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A quick scan through this book will show you that you can use AVR microcontrollers
    as the heart of an incredibly wide range of devices. You’ll go from blinking LEDs
    to creating a thermostat, a GPS logger, and more—but don’t limit yourself to the
    range of projects covered here! After working through this book, you’ll be well
    prepared to explore more advanced projects like those I’ll describe in this section.
  prefs: []
  type: TYPE_NORMAL
- en: For example, computer scientist Vassilis Serasidis built a piece of electronics
    test equipment called a *logic analyzer* , which can measure the values of four
    electrical currents at the same time and display the results. His design uses
    an inexpensive LCD typically found in cheap cellular phones to show the signals
    in a graphical form, as shown in [Figure 1-1](nsp-boxall502581-0011.xhtml#f01001)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![Demonstration of the AVR-powered logic analyzer, showing four signals being
    analyzed at once](images/nsp-boxall502581-f01001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-1: An inexpensive logic analyzer'
  prefs: []
  type: TYPE_NORMAL
- en: You can use logic analyzers to run a huge variety of displays with an AVR microcontroller,
    from inexpensive black and white versions like the one in [Figure 1-1](nsp-boxall502581-0011.xhtml#f01001)
    to realistic color displays. For more information on the project, visit [https://www.serasidis.gr/circuits/mini_logic_analyzer/miniLogicAnalyzer.htm](https://www.serasidis.gr/circuits/mini_logic_analyzer/miniLogicAnalyzer.htm)
    .
  prefs: []
  type: TYPE_NORMAL
- en: You can also use AVRs to build tiny projects like wearable electronics, but
    you need an incredibly small development board to do so. Electronics enthusiast
    Erik Kettenburg dreamed of such a board based on the smallest AVR in existence.
    He translated this idea into the Digispark board, shown in [Figure 1-2](nsp-boxall502581-0011.xhtml#f01002)
    , which measures only 17.5 × 19 mm, and built a thriving business via a successful
    Kickstarter promotion in 2017.
  prefs: []
  type: TYPE_NORMAL
- en: '![Photo of the very compact Digispark AVR-based development board](images/nsp-boxall502581-f01002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-2: An example of the Digispark board'
  prefs: []
  type: TYPE_NORMAL
- en: The size of the Digispark board means the AVR microcontroller it uses doesn’t
    have quite as many features as some larger chips—for example, it has less program
    memory space. However, the Digispark allows you to program the microcontroller
    directly via USB, whereas you’d normally have to purchase a separate programming
    device. For more information on the Digispark board, visit [http://digistump.com/](http://digistump.com/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: In addition to using AVRs professionally, plenty of people build AVR-based projects
    purely for fun! One example is the AVR TV Game software engineer Ben Ryves built
    in 2009, shown in [Figure 1-3](nsp-boxall502581-0011.xhtml#f01003) . Ben used
    very basic electronics and an AVR to make a device that plugs into a television
    and lets you play the classic games *Snake* and *Tetris* .
  prefs: []
  type: TYPE_NORMAL
- en: '![Image of Tetris being played on an AVR-based TV game system](images/nsp-boxall502581-f01003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-3: Playing *Tetris* on the AVR TV Game'
  prefs: []
  type: TYPE_NORMAL
- en: The AVR can generate the video signals to communicate with a television without
    any extra hardware, and with some imagination, you can program your own games
    into the microcontroller. For more information, visit [http://benryves.com/products/avrtvgame/](http://benryves.com/products/avrtvgame/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Engineer Adam Heinrich even built his own cellular telephone in 2017 based on
    an AVR, complete with a color touchscreen interface. Adam’s “AvrPhone,” which
    is portable for mobile use, is shown in [Figure 1-4](nsp-boxall502581-0011.xhtml#f01004)
    . For more information, visit [http://projects.adamh.cz/avrphone/](http://projects.adamh.cz/avrphone/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![Photo of the AVR-powered cellular phone in use](images/nsp-boxall502581-f01004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-4: The AvrPhone'
  prefs: []
  type: TYPE_NORMAL
- en: Just like these makers, with some effort, you can bridge the gap between hobbyist
    tinkering and full product development! But for now, let’s start with a more detailed
    discussion of the parts you’ll use in this book.
  prefs: []
  type: TYPE_NORMAL
- en: '[The Microchip AVR Microcontrollers](nsp-boxall502581-0008.xhtml#rah0302)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Throughout this book, you’ll use the two microcontrollers shown in [Figure 1-5](nsp-boxall502581-0011.xhtml#f01005)
    , which Microchip Technology produces as part of its AVR product line. The smaller
    one, called an ATtiny85, has 8 *pins* , which are the pieces of metal sticking
    out on the sides of the black chips that allow you to send and receive data and
    power from and to the microcontroller. The larger AVR is an ATmega328P-PU, which
    has 28 pins.
  prefs: []
  type: TYPE_NORMAL
- en: '![Photo of the ATtiny85 and ATmega328P-PU microcontrollers](images/nsp-boxall502581-f01005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-5: Our AVR microcontrollers, the ATtiny85 and ATmega328P-PU'
  prefs: []
  type: TYPE_NORMAL
- en: Note In this book and when purchasing your own parts, you may see microcontrollers
    labeled “Atmel.” Microchip acquired Atmel in 2016, but at the time of writing
    some suppliers still have Atmel-branded units; either label is fine.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from size, there are several important differences between the ATtiny85
    and ATmega328P-PU microcontrollers, as listed in [Table 1-1](nsp-boxall502581-0011.xhtml#tab0101)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 1-1 : Specifications for the ATtiny85 and ATmega328P-PU Microcontrollers'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table of specifications for the ATtiny85 and ATmega328P-PU microcontrollers](images/nsp-boxall502581-tab0101.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The specifications in [Table 1-1](nsp-boxall502581-0011.xhtml#tab0101) describe
    each chip’s physical limitations, and they will help you determine which other
    electronic components you can realistically use with your microcontroller. Anytime
    you start a new project, you need to consider this information carefully, so here’s
    an overview of what each specification means:'
  prefs: []
  type: TYPE_NORMAL
- en: Schematic This is a drawing that represents the connections to an electronic
    component, such as the microcontrollers in this table. You’ll learn more about
    schematic symbols in [Chapter 2](nsp-boxall502581-0012.xhtml#ch02) .
  prefs: []
  type: TYPE_NORMAL
- en: Maximum processing speed This row tells you how fast the microcontroller can
    process data, measured in cycles per second. Note that the clock speed isn’t always
    equal to processing speed, as some instructions can take multiple cycles to complete.
  prefs: []
  type: TYPE_NORMAL
- en: Operating voltage This row shows the range of voltages that you can safely use
    to power the microcontroller. If you don’t supply at least 1.8 V, the chip won’t
    turn on, but if you try to supply more than 5.5 V, it may melt!
  prefs: []
  type: TYPE_NORMAL
- en: Digital pins This row shows the number of pins that can send or receive digital
    data. Digital data is represented by voltage signals; the numbers one and zero,
    respectively, represent an “on” or “off” voltage. These voltage signals are then
    combined to represent various forms of data. All microcontrollers have pins that
    you can set up as digital inputs or outputs and use to control external devices.
  prefs: []
  type: TYPE_NORMAL
- en: Analog input pins This row shows the number of physical inputs that are available
    to measure voltage levels. Analog input pins let you read information from devices
    like *sensors* , which output different voltages based on what’s happening in
    their surroundings.
  prefs: []
  type: TYPE_NORMAL
- en: Flash memory This row shows how much flash memory is available on the chip.
    To tell your microcontroller what to do, you’ll have to write programs, which
    are stored in flash memory and retained even after you turn off power. If your
    program’s file size exceeds your AVR’s memory capacity, it won’t fit on the microcontroller!
  prefs: []
  type: TYPE_NORMAL
- en: EEPROM This row tells you how much *electrically erasable programmable read-only
    memory (EEPROM* ) is available on the chip. EEPROM can hold data your program
    creates even when the microcontroller is turned off. For example, if you want
    to display a certain image on an LCD whenever you power on your project, you can
    store that image in EEPROM for future use.
  prefs: []
  type: TYPE_NORMAL
- en: SRAM This row tells you how much *Static Random Access Memory (SRAM)* is available
    on the chip. This is the amount of memory available to store temporary data created
    by your programs. Just like the RAM in your desktop computer, SRAM is where all
    the information your program generates as it runs is stored until it gets deleted
    when the power is turned off. This could include sensor data, the results of calculations,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: I’ll cover these and other important features in detail in later chapters. For
    now, let’s start setting up your AVR microcontroller lab.
  prefs: []
  type: TYPE_NORMAL
- en: '[Required Parts and Accessories](nsp-boxall502581-0008.xhtml#rah0303)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You won’t need to buy a ton of expensive parts to get started with the projects
    in this book; assuming you already have a modern personal computer, you can have
    a lot of fun with microcontrollers for around $50\. Each project I’ll walk you
    through includes a list of the parts you need to complete it, and you can download
    a list of all the parts used in this book from [https://nostarch.com/avr-workshop/](https://nostarch.com/avr-workshop/)
    . I’d recommend you order the parts you’ll need for the projects in the first
    few chapters now so you don’t have to wait too long for delivery.
  prefs: []
  type: TYPE_NORMAL
- en: '[Electronic Components](nsp-boxall502581-0008.xhtml#rbh0301)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: AVR microcontrollers and electronic components are available from many retailers
    that offer a range of products and accessories. When you’re shopping, be sure
    to purchase the original parts I’ve listed and not knock-offs, or you run the
    risk of receiving faulty or poorly performing goods. Don’t take chances buying
    an inferior product, as it could end up costing you more in the long run!
  prefs: []
  type: TYPE_NORMAL
- en: 'Always read the hardware list at the beginning of every project and be sure
    to buy the correct components before you start. Here are some recommended suppliers
    for AVR-related parts and accessories. The first five supply worldwide, while
    the last four are country-specific, as noted:'
  prefs: []
  type: TYPE_NORMAL
- en: '• DigiKey: [https://www.digikey.com/](https://www.digikey.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• element14/Farnell: [http://farnell.com/](http://farnell.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• PMD Way: [http://pmdway.com/](http://pmdway.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• SparkFun Electronics: [https://www.sparkfun.com/](https://www.sparkfun.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• Mouser: [https://www.mouser.com/](https://www.mouser.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• Freetronics Australia: [https://www.freetronics.com/](https://www.freetronics.com/)
    (for Australia)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• Altronics: [https://www.altronics.com.au/](https://www.altronics.com.au/)
    (for Australia)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• Newark: [https://www.newark.com/](https://www.newark.com/) (for the United
    States)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '• MindKits: [https://www.mindkits.co.nz/](https://www.mindkits.co.nz/) (for
    New Zealand)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I can vouch for these suppliers from personal experience, but there are many
    more across the globe. As a general rule, try to deal with organizations that
    offer technical and sales support and are more than just simple sales agents or
    listings on mega retail sites.
  prefs: []
  type: TYPE_NORMAL
- en: '[Choosing an AVR Programmer](nsp-boxall502581-0008.xhtml#rbh0302)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You need to connect a *programmer* like the ones shown in [Figure 1-6](nsp-boxall502581-0011.xhtml#f01006)
    from your computer to your microcontroller circuit so that you can load programs
    and data onto the chip. Finding a good programmer is crucial for success in the
    AVR world, and a quick web search for “AVR programmer” will present you with many
    options. The projects in this book use a *USBasp programmer* , a device that interfaces
    between your PC and your AVR project to send your code to your project’s microcontroller.
    You can buy one from any of the stores listed in the previous section for (at
    the time of printing) less than $20.
  prefs: []
  type: TYPE_NORMAL
- en: '![Photo of two different USBasp-style AVR programmers](images/nsp-boxall502581-f01006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-6: Examples of USBasp AVR programmers'
  prefs: []
  type: TYPE_NORMAL
- en: The USBasp should work with the open source software required for AVR programming.
    It’s an open source device created by Thomas Fischl, and only requires USB drivers
    when used with a Windows-based PC. When shopping for your USBasp programmer, be
    sure it comes with a 6-pin (not 10-pin) ribbon cable so you can use it for the
    projects in this book.
  prefs: []
  type: TYPE_NORMAL
- en: '[Required Software](nsp-boxall502581-0008.xhtml#rah0304)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, you’ll set up a *toolchain* that will let you program your
    AVR microcontroller. This toolchain consists of a series of software that takes
    your typed program of instructions, translates it into a form the AVR can understand,
    and places it in flash memory. There are three stages to the programming process,
    each using a different piece of software (a different “tool” in the “chain”):'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Using text editor software, you enter, edit, and save the code containing
    your instructions for the AVR.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2\. Compiler software then converts the code you created into machine code that
    the microcontroller can understand.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 3\. Next, programming software takes the machine code file and uploads it to
    the microcontroller. At this point, the AVR should start doing what you told it
    to do.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can write your programs in any basic text editor, such as Notepad on Windows
    or TextEdit on macOS. You’ll also need a package containing the compiler and programming
    software. In the following three sections, I explain how to acquire and install
    that software for computers running MacOS, Ubuntu Linux, and Windows 7 or later.
  prefs: []
  type: TYPE_NORMAL
- en: '[macOS 10.6 or Later](nsp-boxall502581-0008.xhtml#rbh0303)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install the required software on your Mac, open the macOS Terminal app and
    enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will install software that allows you to run 32-bit programs on macOS.
    You may be prompted to enter your password, and then the software will start,
    as shown in [Figure 1-7](nsp-boxall502581-0011.xhtml#f01007) .
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the AVR toolchain being installed on a Mac via Terminal](images/nsp-boxall502581-f01007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-7: The toolchain installation begins in macOS.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once that has completed, enter the following into the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And once that has completed, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This is the final step, which installs the required AVR software. It will return
    you to the command prompt when finished, as shown in [Figure 1-8](nsp-boxall502581-0011.xhtml#f01008)
    ; you can then close the Terminal app.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the completed AVR toolchain installation process on a Mac
    via Terminal](images/nsp-boxall502581-f01008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-8: Installation is complete.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve installed your toolchain software, skip ahead to the section
    “Current, Voltage, and Power.”
  prefs: []
  type: TYPE_NORMAL
- en: '[Ubuntu Linux 20.04 LTS or Later](nsp-boxall502581-0008.xhtml#rbh0304)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To download and install the AVR toolchain in Ubuntu Linux 20.04 LTS, first
    ensure your system has completed all the latest updates. Next, open a terminal
    window and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter your password if requested. You may then be asked if you want to continue:
    enter `Y` and press enter . A lot of text describing various packages should scroll
    by, and then the command prompt should once again appear. Enter the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, enter your password and give permission to continue if required by the
    installation process. Then enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After a short period (depending on the speed of your computer and internet
    connection), all the required software should finish installing. Now you need
    to install the USB driver for the USBasp programmer. To do so, enter the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If prompted, provide your password and enter `Y` to continue. Finally, it’s
    time to check the driver is working. Plug your USBasp into a USB port on the computer,
    then enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After a moment a list of devices connected to the machine via USB should appear,
    looking something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the USBasp is the second item in the list. If your device doesn’t
    appear, check the connection to the PC, restart the machine, and try the `lsusb`
    command one more time.
  prefs: []
  type: TYPE_NORMAL
- en: Note Due to the open source nature of Linux, there are many variations of the
    OS that cannot be accounted for or documented in this book. If you’re still having
    problems, or would like details on installing the toolchain on other flavors of
    Linux, please visit [http://www.nongnu.org/avr-libc/user-manual/install_tools.html](http://www.nongnu.org/avr-libc/user-manual/install_tools.html)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Once installation is complete, move forward to the section titled “Current,
    Voltage, and Power.”
  prefs: []
  type: TYPE_NORMAL
- en: '[Windows 7 Through 11](nsp-boxall502581-0008.xhtml#rbh0305)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Setting up your toolchain in Microsoft Windows requires an extra step: you’ll
    first download and install the software, then install the appropriate drivers
    for your programmer.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Toolchain
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To install the required software for Windows, follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Open your web browser and visit the software download page located at [https://sourceforge.net/projects/winavr/files/WinAVR/](https://sourceforge.net/projects/winavr/files/WinAVR/)
    , as shown in [Figure 1-9](nsp-boxall502581-0011.xhtml#f01009) .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of the WinAVR download web page with buttons labeled “Download
    Latest Version” and “Get Updates”](images/nsp-boxall502581-f01009.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1-9: The WinAVR download page for Windows'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2\. Click the **Download Latest Version** button to start the software download.
    After a short period of time, the toolchain installer should finish downloading.
    Open the *Downloads* folder in Explorer, as shown in [Figure 1-10](nsp-boxall502581-0011.xhtml#f01010)
    , and you should see the WinAVR install file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot showing the downloaded WinAVR installation software](images/nsp-boxall502581-f01010.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1-10: The WinAVR package'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 3\. Double-click the install package, and after selecting your language, you
    should be presented with the WinAVR Setup Wizard, as shown in [Figure 1-11](nsp-boxall502581-0011.xhtml#f01011)
    .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of the WinAVR Setup Wizard welcome screen in Windows 11](images/nsp-boxall502581-f01011.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1-11: The WinAVR Setup Wizard'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 4\. Click **Next** in the Setup Wizard, and click **I Agree** when the License
    Agreement is displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 5\. The next window should prompt for the folder in which to install the toolchain.
    You can choose the default by clicking **Next** , as shown in [Figure 1-12](nsp-boxall502581-0011.xhtml#f01012)
    .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot showing how to choose the installation location for the WinAVR
    software in Windows 11](images/nsp-boxall502581-f01012.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1-12: Choosing the file location'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 6\. The next window that appears, shown in [Figure 1-13](nsp-boxall502581-0011.xhtml#f01013)
    , should ask you which components to install. Check all three boxes and click
    **Install** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot showing all the available components (Install Files, Add Directories
    to Path, And Install Programmers Notepad) selected](images/nsp-boxall502581-f01013.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1-13: Selecting the components to install'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 7\. The wizard should then display a progress bar while it installs the files.
    Once installation has finished, close the wizard by clicking the **Finish** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 8\. You should now be presented with the WinAVR user manual page, as shown in
    [Figure 1-14](nsp-boxall502581-0011.xhtml#f01014) .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of the WinAVR user manual displayed in a browser](images/nsp-boxall502581-f01014.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1-14: The WinAVR user manual page'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Bookmark this page in your web browser, as it will be useful later on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Installing the USBasp Driver
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Unlike other operating systems, Windows requires you to install a driver to
    enable the USBasp programmer. There are different drivers for different USBasp
    programmers; the driver you need will depend on the brand you buy. You can find
    the Windows driver and installation instructions for generic USBasps on Thomas
    Fischl’s website: [https://www.fischl.de/usbasp/](https://www.fischl.de/usbasp/)
    . If you have a “branded” programmer from a company like Freetronics, however,
    please consult the product page for the correct driver and installation instructions.'
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve installed the driver for your USBasp programmer, you can quickly
    confirm the success of the installation by plugging it in and then visiting the
    Windows Device Manager, as in [Figure 1-15](nsp-boxall502581-0011.xhtml#f01015)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the Windows 11 Device Manager showing the USBasp programmer
    installed](images/nsp-boxall502581-f01015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-15: USBasp in Device Manager'
  prefs: []
  type: TYPE_NORMAL
- en: You should see USBasp listed in the *libusb-win32 devices* category. Now that
    you have the software required for this book installed on your computer, it’s
    time for you to learn about the basics of electricity!
  prefs: []
  type: TYPE_NORMAL
- en: '[Current, Voltage, and Power](nsp-boxall502581-0008.xhtml#rah0305)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to build electronic circuits with your AVR-based projects, you’ll
    need a basic grasp of how electricity works. In simple terms, *electricity* is
    a form of energy that you can harness and convert into heat, light, movement,
    and power. Electricity has three main properties important for our purposes: current,
    voltage, and power.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Current* is the flow of electrical energy through a circuit from the positive
    side of a power source, such as a battery, to the negative side of the power source.
    In circuits that are not powered by a battery, the negative side is instead called
    *ground (GND)* . This kind of current is known as *direct current (DC)* . (For
    the purposes of this book, you won’t deal with the *alternating current [AC]*
    that is supplied by 110 V or 230 V mains power outlets.) Current is measured in
    amperes (or amps), abbreviated as A. Small amounts of current are measured in
    milliamps (mA), where 1,000 mA equals 1 A.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Voltage* is an indication of the difference in potential energy between a
    circuit’s positive and negative ends, measured in *volts (V)* . The greater the
    voltage, the faster the current moves through a circuit.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Power* is a measurement of the rate at which an electrical device converts
    energy from one form to another. Power is measured in *watts (W)* . For example,
    a 100 W light bulb is much brighter than a 60 W bulb because the higher-wattage
    bulb converts more electrical energy into light.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple mathematical relationship exists among voltage, current, and power:'
  prefs: []
  type: TYPE_NORMAL
- en: Power ( *W* ) = Voltage ( *V* ) × Current ( *A* )
  prefs: []
  type: TYPE_NORMAL
- en: Later chapters of this book will explain the uses of this formula in detail.
  prefs: []
  type: TYPE_NORMAL
- en: '[Electronic Components](nsp-boxall502581-0008.xhtml#rah0306)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you know a little bit about the basics of electricity, let’s look at
    how electricity interacts with electronic components and devices. Electronic *components*
    are the parts in a circuit that control electric current and make your designs
    a reality. Just as the many parts of a car work together to let us drive, electronic
    components work together to help us harness and control electricity to create
    useful devices.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book, I’ll explain specialized components as they come up. The
    following sections describe some of the fundamental components you’ll need in
    any project.
  prefs: []
  type: TYPE_NORMAL
- en: '[Resistors](nsp-boxall502581-0008.xhtml#rbh0306)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some components, such as LEDs, which we’ll look at shortly, require only a small
    amount of current to function—usually around 10 mA. When a component receives
    excess current, it converts the excess to heat, which can damage or destroy the
    component. To reduce the flow of current, you can add a *resistor* between the
    voltage source and the component. Current flows freely along electrical wire,
    but when it encounters a resistor, the current flow is limited. The resistor converts
    some of that current into a small amount of heat energy, proportional to its value.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 1-16](nsp-boxall502581-0011.xhtml#f01016) shows two examples of commonly
    used resistors.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Photo of two example 0.25 W resistors set above a ruler](images/nsp-boxall502581-f01016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-16: Typical resistors'
  prefs: []
  type: TYPE_NORMAL
- en: The amount of current flow limitation is determined by the level of resistance,
    which can be either fixed or variable. Resistance is measured in ohms ( Ω ) and
    can range from zero to thousands of ohms (kilohms, or kΩ ) or millions of ohms
    (megohms, or MΩ ).
  prefs: []
  type: TYPE_NORMAL
- en: Reading Resistance Values
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Resistors are very small, so their resistance values usually cannot be printed
    on the components themselves. One common way to show a component’s resistance
    is with a series of color-coded bands, as shown (in grayscale) in [Figure 1-16](nsp-boxall502581-0011.xhtml#f01016)
    , where each color represents a numerical value. The *multiplier band* dictates
    the number of zeros to add to the end of the previous digits to complete the value.
    Resistors with five bands have a higher accuracy than four-band resistors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how to read these bands, from left to right:'
  prefs: []
  type: TYPE_NORMAL
- en: First band The first digit of the resistance
  prefs: []
  type: TYPE_NORMAL
- en: Second band The second digit of the resistance
  prefs: []
  type: TYPE_NORMAL
- en: Third band The multiplier (for four-band resistors) or the third digit of the
    resistance (for five-band resistors)
  prefs: []
  type: TYPE_NORMAL
- en: Fourth band The multiplier (for five-band resistors) or the resistor’s *tolerance*
    , a measure of its accuracy in terms of percentage (for four-band resistors)
  prefs: []
  type: TYPE_NORMAL
- en: Fifth band The resistor’s tolerance, for five-band resistors
  prefs: []
  type: TYPE_NORMAL
- en: To determine which band is the first and leftmost, check which band is closest
    to the edge of the resistor. The first band is usually closer to the left-hand
    edge than the last band is to the right-hand edge.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 1-2](nsp-boxall502581-0011.xhtml#tab0102) lists the colors of the different
    bands that can appear on resistors and their corresponding values.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Table 1-2 : Values of Bands Printed on a Resistor, in Ohms |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| Color | Ohms |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Black | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| Brown | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| Red | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| Orange | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| Yellow | 4 |'
  prefs: []
  type: TYPE_TB
- en: '| Green | 5 |'
  prefs: []
  type: TYPE_TB
- en: '| Blue | 6 |'
  prefs: []
  type: TYPE_TB
- en: '| Violet | 7 |'
  prefs: []
  type: TYPE_TB
- en: '| Gray | 8 |'
  prefs: []
  type: TYPE_TB
- en: '| White | 9 |'
  prefs: []
  type: TYPE_TB
- en: Because it is difficult to manufacture resistors with exact values, each has
    a margin of error, represented by the rightmost band. A brown band indicates 1 percent
    tolerance, gold indicates 5 percent tolerance, and silver indicates 10 percent
    tolerance. The smaller the tolerance, the greater the accuracy of the resistor.
    That is, the value of a 1 percent resistor can only vary +/−1 percent from the
    stated value, whereas the value of a 5 percent resistor can vary +/–5 percent
    from the stated value.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 1-17](nsp-boxall502581-0011.xhtml#f01017) shows a resistor diagram.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram of a 47 kilohm resistor with yellow, violet, orange, and brown color
    bands that represent the resistor’s values](images/nsp-boxall502581-f01017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-17: An example resistor diagram'
  prefs: []
  type: TYPE_NORMAL
- en: The yellow, violet, and orange bands read as 4, 7, and 3, as listed in [Table
    1-2](nsp-boxall502581-0011.xhtml#tab0102) , with the brown band noting the tolerance
    (1 percent). These values translate to 47,000 Ω , more commonly written as 47
    kΩ . Often, you’ll see ohms written as R; for example, a 220 Ω resistor might
    be represented as 220 R.
  prefs: []
  type: TYPE_NORMAL
- en: Another way to read resistance values is using a *multimeter* , an incredibly
    useful and relatively inexpensive piece of test equipment that can measure voltage,
    resistance, current, and more. [Figure 1-18](nsp-boxall502581-0011.xhtml#f01018)
    shows a multimeter measuring a resistor.
  prefs: []
  type: TYPE_NORMAL
- en: '![Photo of measuring the resistance of a 560-ohm resistor using a digital multimeter.
    the resistance shown is 556.0.](images/nsp-boxall502581-f01018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-18: A multimeter measuring a 560 Ω 1 percent tolerance resistor'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are colorblind, a multimeter is essential. Even if you are not, I highly
    recommend purchasing one: it will save you much time and reduce possible mistakes
    caused by misreading resistor color bands. As with other good tools, purchase
    your multimeter from a reputable retailer instead of fishing about on the internet
    for the cheapest one you can find.'
  prefs: []
  type: TYPE_NORMAL
- en: Power Rating
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A resistor’s *power rating* is a measurement of the power, in watts, that it
    will tolerate before overheating or failing. When selecting a resistor, you need
    to consider the relationship between power, current, and voltage. The greater
    the current or voltage, the greater the resistor’s power rating. For example,
    using the formula Power ( *W* ) = Voltage ( *V* ) × Current ( *A* ), with a voltage
    of 5 V and a low current of 20 mA, the power-handling value required would be
    5 × 0.02 = 0.1 W. This would work fine with the 0.25 W resistors that are most
    commonly used in the projects in this book (the resistors shown in [Figure 1-16](nsp-boxall502581-0011.xhtml#f01016)
    are 0.25 W resistors).
  prefs: []
  type: TYPE_NORMAL
- en: If projects in this book require different power handling, we’ll run through
    it when required and go over the best resistor to use instead. Usually, the greater
    a resistor’s power rating, the greater its physical size. For example, the resistor
    shown in [Figure 1-19](nsp-boxall502581-0011.xhtml#f01019) is a 5 W resistor,
    which measures 26 mm long by 7.5 mm wide.
  prefs: []
  type: TYPE_NORMAL
- en: '![Photo of a 5 W ceramic resistor](images/nsp-boxall502581-f01019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-19: A 5 W resistor'
  prefs: []
  type: TYPE_NORMAL
- en: '[Light-Emitting Diodes](nsp-boxall502581-0008.xhtml#rbh0307)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The LED is a very common yet infinitely useful component that converts electrical
    current into light. LEDs come in various shapes, sizes, and colors. [Figure 1-20](nsp-boxall502581-0011.xhtml#f01020)
    shows a common LED.
  prefs: []
  type: TYPE_NORMAL
- en: '![Photo of a 5 mm red LED alongside a ruler](images/nsp-boxall502581-f01020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-20: Red LED, 5 mm diameter'
  prefs: []
  type: TYPE_NORMAL
- en: Connecting LEDs in a circuit takes some care because they are *polarized* ,
    meaning that current can enter and leave the LED in one direction only. The current
    enters via the *anode* (positive) side and leaves via the *cathode* (negative)
    side, as shown in [Figure 1-21](nsp-boxall502581-0011.xhtml#f01021) . Any attempt
    to make current flow in the opposite direction will break the LED.
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, LEDs are designed so that you can tell which end is which. The leg
    on the anode side is longer, and on the cathode side, the rim at the base of the
    LED is flat, as shown in [Figure 1-22](nsp-boxall502581-0011.xhtml#f01022) .
  prefs: []
  type: TYPE_NORMAL
- en: '![Schematic symbol for an LED that also shows direction of current flow from
    anode to cathode](images/nsp-boxall502581-f01021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-21: Current flow through an LED'
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram of an LED showing that the longer leg is the anode and the shorter
    leg is the cathode](images/nsp-boxall502581-f01022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-22: LED design indicates the anode (longer leg) and cathode (flat
    rim) sides.'
  prefs: []
  type: TYPE_NORMAL
- en: When adding LEDs to a project, you must consider the operating voltage and current.
    For example, common red LEDs require around 1.7 V and 5 to 20 mA of current. This
    presents a slight problem, because the power supply used in the projects in this
    book will output 5 V and a much higher current. Luckily, you can use a *current-limiting
    resistor* to reduce the current flow into an LED. But which value resistor do
    you use? That’s where Ohm’s law comes in.
  prefs: []
  type: TYPE_NORMAL
- en: '*Ohm’s law* states that voltage is equal to current times resistance, or *V*
    = *I* × *R* . It follows that to calculate the required current-limiting resistor
    for an LED, you can use this formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '*R* = ( *V* [s] − *V* [f] ) / *I*'
  prefs: []
  type: TYPE_NORMAL
- en: 'where *V* [s] is the supply voltage (which will be 5 V when powering the circuit
    from our USBasp programmer), *V* [f] is the LED forward voltage drop (say, 1.7
    V), and *I* is the current required for the LED (10 mA). The value of *I* must
    be in amps, so 10 mA converts to 0.01 A. You can use these values for your LEDs:
    substituting them into the formula gives a value for *R* of 330 Ω . However, the
    LEDs will happily light when fed current less than 10 mA. It’s good practice to
    use lower currents when possible to protect sensitive electronics, so I recommend
    using 560 Ω , 0.25 W resistors with your LEDs, which provide about 6 mA.'
  prefs: []
  type: TYPE_NORMAL
- en: When in doubt, always choose a slightly higher value resistor, because it’s
    better to have a dim LED than a dead one!
  prefs: []
  type: TYPE_NORMAL
- en: The Ohm’s Law Triangle
  prefs: []
  type: TYPE_NORMAL
- en: 'Ohm’s law states that the relationship between current, resistance, and voltage
    is as follows: *V* = *I* × *R* . A popular way to remember Ohm’s law is with a
    triangle, as shown in the figure below.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image of the Ohm’s law triangle, used to determine formulas for calculating
    power, current, or resistance values. The top third is labeled V, the bottom-left
    third is labeled I, and the bottom-right third is labeled R.](images/nsp-boxall502581-g01003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Ohm’s law triangle
  prefs: []
  type: TYPE_NORMAL
- en: This diagram is a convenient tool for calculating voltage, current, or resistance
    when two of the three values are known. For example, if you need to calculate
    resistance, put your finger over R, leaving voltage divided by current. To calculate
    voltage, cover V, leaving current times resistance.
  prefs: []
  type: TYPE_NORMAL
- en: '[Power Diodes](nsp-boxall502581-0008.xhtml#rbh0308)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *power diode* is ideal for blocking current flow in one direction in a circuit.
    Power diodes are used in the same way as LEDs, but instead of illuminating when
    current flows, they protect the circuitry from current flowing in the opposite
    direction. There are many different types; we will use the common 1N4004 version
    shown in [Figure 1-23](nsp-boxall502581-0011.xhtml#f01023) .
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 1-24](nsp-boxall502581-0011.xhtml#f01024) shows the schematic symbol
    of the 1N4004 diode in [Figure 1-23](nsp-boxall502581-0011.xhtml#f01023) .'
  prefs: []
  type: TYPE_NORMAL
- en: '![Photo of a common 1N4004 power diode](images/nsp-boxall502581-f01023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-23: 1N4004 power diode'
  prefs: []
  type: TYPE_NORMAL
- en: '![Schematic symbol for a 1N4004 power diode, also showing the direction of
    current flow from the anode to the cathode](images/nsp-boxall502581-f01024.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-24: 1N4004 schematic symbol'
  prefs: []
  type: TYPE_NORMAL
- en: Up to 1 A of current can flow through the 1N4004 from the anode pin to the cathode
    pin. The 1N4004 also causes a voltage drop of 0.7 V DC and is a convenient way
    to drop voltage when required.
  prefs: []
  type: TYPE_NORMAL
- en: '[Capacitors](nsp-boxall502581-0008.xhtml#rbh0309)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *capacitor* is a device that can hold an electric charge. It consists of two
    metal plates with an insulating layer that allows an electric charge to build
    up between them. The electric charge builds to a maximum value as current flows
    to the capacitor. Once the charge hits the maximum, current stops flowing through
    the capacitor. However, the charge remains and flows out of the capacitor, which
    is called *discharging* , as soon as it is presented with a new path.
  prefs: []
  type: TYPE_NORMAL
- en: The amount of charge that a capacitor can store is measured in farads. One farad
    is actually a very large amount, so you’ll generally find capacitors with values
    in picofarads or microfarads. One picofarad (pF) is 0.000000000001 of a farad,
    and one microfarad ( μF ) is 0.000001 of a farad. Capacitors are also manufactured
    to accept voltage maximums. For the projects in this book you’ll only work with
    low voltages, so you’ll use capacitors rated at greater than 10 or so volts. It’s
    generally fine, however, to use capacitors with larger voltage specifications
    in lower-voltage circuits. Common voltage ratings for capacitors are 10, 16, 25,
    and 50 V.
  prefs: []
  type: TYPE_NORMAL
- en: The projects covered in this book will use two types of capacitors, ceramic
    and electrolytic.
  prefs: []
  type: TYPE_NORMAL
- en: Ceramic Capacitors
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Figure 1-25](nsp-boxall502581-0011.xhtml#f01025) shows a *ceramic capacitor*
    . These capacitors are very small and therefore hold a small amount of charge.
    They are not polarized and can be used for current flowing in either direction.
    Ceramic capacitors work beautifully in high-frequency circuits because they can
    charge and discharge very quickly due to their small capacitance.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Photo of a small ceramic capacitor alongside a ruler](images/nsp-boxall502581-f01025.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-25: A 0.1 μF ceramic capacitor'
  prefs: []
  type: TYPE_NORMAL
- en: Reading the value of a ceramic capacitor takes some practice, because the value
    is printed in a sort of code. The first two digits represent the value in picofarads,
    and the third digit is the multiplier in tens. For example, the capacitor shown
    in [Figure 1-25](nsp-boxall502581-0011.xhtml#f01025) is labeled “104.” This equates
    to 10, followed by four zeros, which equals 100,000 pF (equivalent to 100 nF,
    or 0.1 μF ).
  prefs: []
  type: TYPE_NORMAL
- en: Retailers or other projects may specify capacitor values that require you to
    do some mental arithmetic on the fly. To simplify conversions between these units
    of measurement, you can print the excellent conversion chart available at [https://www.justradios.com/uFnFpF.html](https://www.justradios.com/uFnFpF.html)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Electrolytic Capacitors
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*Electrolytic capacitors* are physically larger than ceramic types, offer increased
    capacitance, and are polarized. A marking on the cover indicates the positive
    (+) and negative (–) sides; for example, [Figure 1-26](nsp-boxall502581-0011.xhtml#f01026)
    shows the stripe and small symbol (–) marking a capacitor’s negative side.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Photo of a small electrolytic capacitor](images/nsp-boxall502581-f01026.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-26: An electrolytic capacitor'
  prefs: []
  type: TYPE_NORMAL
- en: Like resistor values, marked capacitor values are also accurate within a certain
    tolerance. Unlike with resistors and ceramic capacitors, the values of the electrolytic
    capacitor are printed on them and don’t require decoding or interpretation. The
    capacitor in [Figure 1-26](nsp-boxall502581-0011.xhtml#f01026) has a tolerance
    of 20 percent, as indicated on the stripe with the negative symbol, and a capacitance
    of 100 μF , shown on the darker part of the label.
  prefs: []
  type: TYPE_NORMAL
- en: Electrolytic capacitors provide power supply smoothing and stability near circuits
    or parts that draw high currents quickly from the supply. This prevents unwanted
    dropouts and noise in your circuits.
  prefs: []
  type: TYPE_NORMAL
- en: '[Integrated Circuits](nsp-boxall502581-0008.xhtml#rbh0310)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More commonly known by the acronym *IC* , an *integrated circuit* is a set of
    electronic circuits built into a piece of silicon and fitted inside a strong,
    usually rectangular, plastic housing. The current flows in or out of the metal
    legs, or pins.
  prefs: []
  type: TYPE_NORMAL
- en: IC pins are identified by numbers, and the first step in working with ICs is
    figuring out which pin is which. First, locate the pinout for the IC; it should
    be available on the supplier’s website. (Check [Table 1-1](nsp-boxall502581-0011.xhtml#tab0101)
    to see the pinouts for the microcontrollers used in this book.) Then, look at
    the side of the IC that has writing on it to determine which pin is number one.
    This is usually the pin with a small circle closest to it. If you don’t see a
    small circle, hold the IC in a vertical position with the notched end pointed
    up. Pin one is at the bottom left of the IC when it is placed horizontally in
    front of you, as shown in [Figure 1-27](nsp-boxall502581-0011.xhtml#f01027) .
  prefs: []
  type: TYPE_NORMAL
- en: '![Photo of an ATmega328P-PU microcontroller, highlighting the location of pin
    number 1](images/nsp-boxall502581-f01027.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-27: Highlighting pin 1 of an IC'
  prefs: []
  type: TYPE_NORMAL
- en: When inserting or removing ICs from a solderless breadboard or other location,
    be careful not to bend the pins, as they’re quite fragile and suffer from metal
    fatigue easily. It’s a good idea to use an *IC extractor* , a simple but useful
    clawlike toolthat can pull both ends of an IC at the same time, as demonstrated
    in [Figure 1-28](nsp-boxall502581-0011.xhtml#f01028) .
  prefs: []
  type: TYPE_NORMAL
- en: '![Photo of using an IC extractor to remove a microcontroller from an IC socket](images/nsp-boxall502581-f01028.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-28: An IC extractor in use'
  prefs: []
  type: TYPE_NORMAL
- en: With this device you can slowly apply upward pressure on each end in turn, until
    the IC is loose enough to slowly draw up and out of the IC socket.
  prefs: []
  type: TYPE_NORMAL
- en: '[Solderless Breadboards](nsp-boxall502581-0008.xhtml#rbh0311)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You’ll need a base to build your ever-changing circuits on, and a solderless
    breadboard is a great tool for this purpose. The breadboard is a plastic base
    with rows of electrically connected sockets. Breadboards come in many sizes, shapes,
    and colors, as shown in [Figure 1-29](nsp-boxall502581-0011.xhtml#f01029) . Just
    don’t cut bread on them. The colors aren’t important from an electrical perspective,
    they just help the end user differentiate between boards.
  prefs: []
  type: TYPE_NORMAL
- en: '![Photo of various solderless breadboards](images/nsp-boxall502581-f01029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-29: Breadboards in various shapes and sizes'
  prefs: []
  type: TYPE_NORMAL
- en: The key to using a breadboard is understanding how the sockets are connected,
    whether in short columns or in long rows along the edge or in the center. The
    connections vary by board. For example, in the breadboard in [Figure 1-30](nsp-boxall502581-0011.xhtml#f01030)
    , columns of five holes are connected vertically but isolated horizontally. If
    you place two wires in one vertical row, they will be electrically connected.
    By the same token, the long rows in the center between the horizontal lines are
    electrically connected horizontally. You’ll often need to connect a circuit to
    the supply voltage and ground, and these long horizontal lines of holes are ideal
    for those connections.
  prefs: []
  type: TYPE_NORMAL
- en: '![Photo showing rows and columns of pins on a solderless breadboard that are
    electrically connected](images/nsp-boxall502581-f01030.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-30: Breadboard internal connections'
  prefs: []
  type: TYPE_NORMAL
- en: When you’re building more complex circuits, a breadboard will get crowded and
    you won’t always be able to place components exactly where you want. You can solve
    this problem by using short connecting wires. Retailers that sell breadboards
    usually also sell small boxes of wires of various lengths, such as the assortment
    shown in [Figure 1-31](nsp-boxall502581-0011.xhtml#f01031) .
  prefs: []
  type: TYPE_NORMAL
- en: '![Example of a breadboard hookup wire kit](images/nsp-boxall502581-f01031.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-31: Assorted breadboard wires'
  prefs: []
  type: TYPE_NORMAL
- en: '[Powering Your Projects](nsp-boxall502581-0008.xhtml#rbh0312)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use a multitude of methods to power your projects. In the spirit of
    keeping things simple and safe, I’ll just show you a few easy and inexpensive
    options.
  prefs: []
  type: TYPE_NORMAL
- en: First, the USBasp itself can provide you with the right voltage for your AVR
    circuit. It provides only a limited amount of current, around 450 mA, but that’s
    more than sufficient for small projects with a limited number of components. However,
    this method is convenient only when your project is close to a USB socket.
  prefs: []
  type: TYPE_NORMAL
- en: Another option is to use a *mains plugpack* with a regulated 5 V output and
    a *DC jack adaptor* . The adaptor, shown in [Figure 1-32](nsp-boxall502581-0011.xhtml#f01032)
    , allows you to connect wires to a jack that the plugpack can connect to. This
    lets you avoid modifying or damaging the end of the plugpack lead.
  prefs: []
  type: TYPE_NORMAL
- en: '![Photo of a DC socket to screw terminal adaptor](images/nsp-boxall502581-f01032.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-32: A DC jack adaptor'
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, a *breadboard power supply* is a fantastic option, as it’s both
    cheap and extremely easy to use. This is a small circuit board that plugs into
    one end of your solderless breadboard, as shown in [Figure 1-33](nsp-boxall502581-0011.xhtml#f01033)
    . The supply then converts current from a mains plugpack adaptor to a safe 5 V
    or 3.3 V.
  prefs: []
  type: TYPE_NORMAL
- en: '![Photo of a solderless breadboard power supply inserted in the end of a solderless
    breadboard](images/nsp-boxall502581-f01033.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-33: A solderless breadboard power supply'
  prefs: []
  type: TYPE_NORMAL
- en: Your final option is to use four rechargeable AA cells in a battery holder.
    When charged, these cells each have a voltage of 1.2 V. Four of them gives you
    4.8 V, which is close enough to 5 V for almost any project. Don’t use disposable
    AA cells, as the initial voltage from new will be over 6 V, which will damage
    your project. You can hold rechargeable AA cells together easily in a neat enclosure,
    such as the one shown in [Figure 1-34](nsp-boxall502581-0011.xhtml#f01034) .
  prefs: []
  type: TYPE_NORMAL
- en: '![Four rechargeable AA batteries in a switched holder](images/nsp-boxall502581-f01034.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1-34: A four AA cell battery holder'
  prefs: []
  type: TYPE_NORMAL
- en: The projects in this book use all four power methods discussed in this section,
    so you’ll need to obtain parts for each. For more detail on this, check the parts
    list at [https://nostarch.com/avr-workshop/](https://nostarch.com/avr-workshop/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: In this first chapter, you’ve built the foundations for your AVR learning by
    seeing some examples of what’s possible, installed the required software, and
    learned about the basics of electricity and some of the parts you’ll be using.
    Now you’re ready for the [next chapter](nsp-boxall502581-0012.xhtml#ch02) , where
    you’ll build your first electronic circuit based around an AVR microcontroller,
    upload your first code, and start to dig into the microcontroller’s different
    operations.
  prefs: []
  type: TYPE_NORMAL
