["```\nPS> Connect-AzAccount\n\nEnvironment           : AzureCloud\nAccount               : email\nTenantId              : tenant id\nSubscriptionId        : subscription id\nSubscriptionName      : subscription name\nCurrentStorageAccount :\n```", "```\nPS> ❶$secPassword = ConvertTo-SecureString -AsPlainText -Force -String 'password'\nPS> ❷$myApp = New-AzADApplication -DisplayName AppForServicePrincipal -IdentifierUris\n'http://Some URL here' -Password $secPassword\n```", "```\nPS> $sp = New-AzADServicePrincipal -ApplicationId $myApp.ApplicationId\nPS> $sp\n\nServicePrincipalNames : {application id, http://appforserviceprincipal}\nApplicationId         : application id\nDisplayName           : AppForServicePrincipal\nId                    : service principal id\nType                  : ServicePrincipal\n```", "```\nPS> New-AzRoleAssignment -RoleDefinitionName Contributor -ServicePrincipalName \n$sp.ServicePrincipalNames[0]\n\nRoleAssignmentId   : /subscriptions/subscription id/providers/Microsoft.Authorization/\n                     roleAssignments/assignment id\nScope              : /subscriptions/subscription id\nDisplayName        : AppForServicePrincipal\nSignInName         :\nRoleDefinitionName : Contributor\nRoleDefinitionId   : id\nObjectId           : id\nObjectType         : ServicePrincipal\nCanDelegate        : False\n```", "```\nPS> $secPassword | ConvertFrom-SecureString | Out-File -FilePath C:\\AzureAppPassword.txt\n```", "```\n$azureAppId = 'application id'\n$azureAppIdPasswordFilePath = 'C:\\AzureAppPassword.txt'\n$pwd = (Get-Content -Path $azureAppIdPasswordFilePath | ConvertTo-SecureString)\n$azureAppCred = (New-Object System.Management.Automation.PSCredential $azureAppId,$pwd)\n```", "```\n$subscriptionId = 'subscription id'\n$tenantId = 'tenant id'\nConnect-AzAccount -ServicePrincipal -SubscriptionId $subscriptionId -TenantId $tenantId\n-Credential $azureAppCred\n```", "```\nPS> New-AzResourceGroup -Name 'PowerShellForSysAdmins-RG' -Location 'East US'\n```", "```\nPS> $newSubnetParams = @{\n 'Name' = 'PowerShellForSysAdmins-Subnet'\n 'AddressPrefix' = '10.0.1.0/24'\n}\nPS> $subnet = New-AzVirtualNetworkSubnetConfig @newSubnetParams\n```", "```\nPS> $newVNetParams = @{\n ❶ 'Name' = 'PowerShellForSysAdmins-vNet'\n ❷ 'ResourceGroupName' = 'PowerShellForSysAdmins-RG'\n ❸ 'Location' = 'East US'\n ❹ 'AddressPrefix' = '10.0.0.0/16'\n}\nPS> $vNet = New-AzVirtualNetwork @newVNetParams -Subnet $subnet\n```", "```\nPS> $newPublicIpParams = @{\n 'Name' = 'PowerShellForSysAdmins-PubIp'\n 'ResourceGroupName' = 'PowerShellForSysAdmins-RG'\n 'AllocationMethod' = 'Dynamic' ## Dynamic or Static\n 'Location' = 'East US'\n}\nPS> $publicIp = New-AzPublicIpAddress @newPublicIpParams\n```", "```\nPS> $newVNicParams = @{\n 'Name' = 'PowerShellForSysAdmins-vNIC'\n 'ResourceGroupName' = 'PowerShellForSysAdmins-RG'\n 'Location' = 'East US'\n 'SubnetId' = $vNet.Subnets[0].Id\n 'PublicIpAddressId' = $publicIp.Id\n}\nPS> $vNic = New-AzNetworkInterface @newVNicParams\n```", "```\nPS> $newStorageAcctParams = @{\n 'Name' = 'powershellforsysadmins'\n 'ResourceGroupName' = 'PowerShellForSysAdmins-RG'\n 'Type' = 'Standard_LRS'\n 'Location' = 'East US'\n}\nPS> $storageAccount = New-AzStorageAccount @newStorageAcctParams\n```", "```\nPS> $newConfigParams = @{\n 'VMName' = 'PowerShellForSysAdmins-VM'\n 'VMSize' = 'Standard_A3'\n}\nPS> $vmConfig = New-AzVMConfig @newConfigParams\n```", "```\nPS> $newVmOsParams = @{\n 'Windows' = $true\n 'ComputerName' = 'Automate-VM'\n 'Credential' = (Get-Credential -Message 'Type the name and password of the\n    local administrator account.')\n 'EnableAutoUpdate' = $true\n 'VM' = $vmConfig\n}\nPS> $vm = Set-AzVMOperatingSystem @newVmOsParams\n```", "```\nPS> $offer = Get-AzVMImageOffer -Location 'East US'❶ –PublisherName\n'MicrosoftWindowsServer'❷ | Where-Object { $_.Offer -eq 'WindowsServer' }❸\nPS> $newSourceImageParams = @{\n 'PublisherName' = 'MicrosoftWindowsServer'\n 'Version' = 'latest'\n 'Skus' = '2012-R2-Datacenter'\n 'VM' = $vm\n 'Offer' = $offer.Offer\n}\nPS> $vm = Set-AzVMSourceImage @newSourceImageParams\n```", "```\nPS> $osDiskName = 'PowerShellForSysAdmins-Disk'\nPS> $osDiskUri = '{0}vhds/PowerShellForSysAdmins-VM{1}.vhd' -f $storageAccount\n                 .PrimaryEndpoints.Blob.ToString(), $osDiskName\nPS> $vm = Set-AzVMOSDisk -Name $osDiskName -CreateOption 'fromImage' -VM $vm -VhdUri $osDiskUri\n```", "```\nPS> $vm = Add-AzVMNetworkInterface -VM $vm -Id $vNic.Id\n```", "```\nPS> New-AzVM -VM $vm -ResourceGroupName 'PowerShellForSysAdmins-RG' -Location 'East US'\n\nRequestId IsSuccessStatusCode StatusCode ReasonPhrase\n--------- ------------------- ---------- ------------\n                         True         OK OK\n```", "```\nPS> Get-AzVm -ResourceGroupName 'PowerShellForSysAdmins-RG' -Name PowerShellForSysAdmins-VM\n\nResourceGroupName  : PowerShellForSysAdmins-RG\nId                 : /subscriptions/XXXXXXXXXXXXX/resourceGroups/PowerShellForSysAdmins-RG/\n                     providers/Microsoft.Compute/virtualMachines/PowerShellForSysAdmins-VM\nVmId               : e459fb9e-e3b2-4371-9bdd-42ecc209bc01\nName               : PowerShellForSysAdmins-VM\nType               : Microsoft.Compute/virtualMachines\nLocation           : eastus\nTags               : {}\nDiagnosticsProfile : {BootDiagnostics}\nExtensions         : {BGInfo}\nHardwareProfile    : {VmSize}\nNetworkProfile     : {NetworkInterfaces}\nOSProfile          : {ComputerName, AdminUsername, WindowsConfiguration, Secrets}\nProvisioningState  : Succeeded\nStorageProfile     : {ImageReference, OsDisk, DataDisks}\n```", "```\nPS> New-AzAppServicePlan -Name 'Automate' -Location 'East US'\n-ResourceGroupName 'PowerShellForSysAdmins-App' -Tier 'Free'\n```", "```\nPS> New-AzWebApp -ResourceGroupName 'PowerShellForSysAdmins-App' -Name\n'AutomateApp' -Location 'East US' -AppServicePlan 'Automate'\n```", "```\nPS> $userName = 'sqladmin'\nPS> $plainTextPassword = 's3cretp@SSw0rd!'\nPS> $secPassword = ConvertTo-SecureString -String $plainTextPassword -AsPlainText -Force\nPS> $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList\n$userName,$secPassword\n```", "```\nPS> $parameters = @{\n ResourceGroupName = 'PowerShellForSysAdmins-SQL'\n ServerName = 'powershellforsysadmins-sqlsrv'\n Location =  'East US'\n SqlAdministratorCredentials = $credential\n}\nPS> New-AzSqlServer @parameters\n\nResourceGroupName        : PowerShellForSysAdmins-SQL\nServerName               : powershellsysadmins-sqlsrv\nLocation                 : eastus\nSqlAdministratorLogin    : sqladmin\nSqlAdministratorPassword :\nServerVersion            : 12.0\nTags                     :\nIdentity                 :\nFullyQualifiedDomainName : powershellsysadmins-sqlsrv.database.windows.net\nResourceId               : /subscriptions/XXXXXXXXXXXXX/resourceGroups\n                           /PowerShellForSysAdmins-SQL/providers/Microsoft.Sql\n                           /servers/powershellsysadmins-sqlsrv\n```", "```\nPS> New-AzSqlDatabase -ResourceGroupName 'PowerShellForSysAdmins-SQL'\n-ServerName 'PowerShellSysAdmins-SQLSrv' -DatabaseName 'AutomateSQLDb'\n\nResourceGroupName             : PowerShellForSysAdmins-SQL\nServerName                    : PowerShellSysAdmins-SQLSrv\nDatabaseName                  : AutomateSQLDb\nLocation                      : eastus\nDatabaseId                    : 79f3b331-7200-499f-9fba-b09e8c424354\nEdition                       : Standard\nCollationName                 : SQL_Latin1_General_CP1_CI_AS\nCatalogCollation              :\nMaxSizeBytes                  : 268435456000\nStatus                        : Online\nCreationDate                  : 9/15/2019 6:48:32 PM\nCurrentServiceObjectiveId     : 00000000-0000-0000-0000-000000000000\nCurrentServiceObjectiveName   : S0\nRequestedServiceObjectiveName : S0\nRequestedServiceObjectiveId   :\nElasticPoolName               :\nEarliestRestoreDate           : 9/15/2019 7:18:32 PM\nTags                          :\nResourceId                    : /subscriptions/XXXXXXX/resourceGroups\n                                /PowerShellForSysAdmins-SQL/providers\n                                /Microsoft.Sql/servers/powershellsysadmin-sqlsrv\n                                /databases/AutomateSQLDb\nCreateMode                    :\nReadScale                     : Disabled\nZoneRedundant                 : False\nCapacity                      : 10\nFamily                        :\nSkuName                       : Standard\nLicenseType                   :\n```", "```\nPS> $parameters = @{\n ResourceGroupName = 'PowerShellForSysAdmins-SQL'\n FirewallRuleName = 'PowerShellForSysAdmins-FwRule'\n ServerName = 'powershellsysadmin-sqlsrv'\n StartIpAddress = 'Your Public IP Address'\n EndIpAddress = 'Your Public IP Address'\n}\nPS> New-AzSqlServerFirewallRule @parameters\n\nResourceGroupName : PowerShellForSysAdmins-SQL\nServerName        : powershellsys-sqlsrv\nStartIpAddress    : 0.0.0.0\nEndIpAddress      : 0.0.0.0\nFirewallRuleName  : PowerShellForSysAdmins-FwRule\n```", "```\nfunction Test-SqlConnection {\n    param(\n        [Parameter(Mandatory)]\n     ❶ [string]$ServerName,\n\n        [Parameter(Mandatory)]\n        [string]$DatabaseName,\n\n        [Parameter(Mandatory)]\n     ❷ [pscredential]$Credential\n    )\n\n    try {\n        $userName = $Credential.UserName\n     ❸ $password = $Credential.GetNetworkCredential().Password\n     ❹ $connectionString = 'Data Source={0};database={1};User\n        ID={2};Password={3}' -f $ServerName,$DatabaseName,$userName,$password\n        $sqlConnection = New-Object System.Data.SqlClient.SqlConnection\n        $ConnectionString\n     ❺ $sqlConnection.Open()\n        $true\n } catch {\n       if ($_.Exception.Message -match 'cannot open server') {\n           $false\n       } else {\n           throw $_\n       }\n    } finally {\n     ❻ $sqlConnection.Close()\n    }\n}\n```"]