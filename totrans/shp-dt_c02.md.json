["```\nlibrary(igraph)\nedges<-rbind(c(\"Sadako\",\"Pedro\"),c(\"Sadako\",\"Georg\"),c(\"Pedro\",\"Georg\"))\ng_colleagues<-graph.edge(edges,directed=T)\n```", "```\nlibrary(igraph)\nadjmat<-matrix(c(0,0,0,1,0,0,1,1,0),nrow=3)\nrownames(adjmat)<-c(\"Sadako\",\"Pedro\",\"Georg\")\ncolnames(adjmat)<-c(\"Sadako\",\"Pedro\",\"Georg\")\ng_colleagues<-graph_from_adjacency_matrix(adjmat,mode=\"directed\",weighted=T)\n```", "```\n#create symmetric matrix of town connections and miles between each town\ntowns<-matrix(c(0,0,0,4,0,0,12,2,0,12,0,6,4,2,6,0),nrow=4)\n\n#label the rows and columns so the towns have names\nrownames(towns)<-c(\"V1\",\"V2\",\"V3\",\"V4\")\ncolnames(towns)<-c(\"V1\",\"V2\",\"V3\",\"V4\")\n\n#create a weighted undirected network from this adjacency matrix\nlibrary(igraph)\ng_towns<-graph_from_adjacency_matrix(towns,mode=\"undirected\",weighted=T)\n\n#plot town graph with edges labeled by weights\nplot(g_towns,edge.label=E(g_towns)$weight,main=\"Plot of Connected Towns by Road Miles\",vertex.color=2,vertex.size=20)\n```", "```\n#load data including no header\nmydata<-as.matrix(read.csv(\"SocialNetwork.csv\",header=F))\n\n#convert data to graph\ng_social<-graph_from_adjacency_matrix(mydata,mode=\"undirected\",weighted=T)\n\n#plot graph\nplot(g_social,main=\"Farrelly's Social Network\",vertex.size=15,vertex.label.cex=0.5,vertex.color=2)\n```", "```\n#betweenness\nplot(g_social,vertex.size=20*betweenness(g_social)/max(betweenness(g_social)),vertex.label.cex=0.8,vertex.color=2)\n\n#closeness\nplot(g_social,vertex.size=20*closeness(g_social)/max(closeness(g_social)),vertex.label.cex=0.8,vertex.color=2)\n\n#eigenvector centrality\nplot(g_social,vertex.size=20*eigen_centrality(g_social)$vector,vertex.label.cex=0.8,vertex.color=2)\n\n#PageRank centrality\nplot(g_social,vertex.size=20*page_rank(g_social)$vector/max(page_rank(g_social)$vector),vertex.label.cex=0.8,vertex.color=2)\n\n#Katz centrality (with alpha parameter set to 0.2)\nplot(g_social,vertex.size=20*alpha_centrality(g_social,alpha=0.2)/max(alpha_centrality(g_social,alpha=0.2)),vertex.label.cex=0.8,vertex.color=2)\n```", "```\n#randomly remove some entries in the adjacency matrix\nmydata_directed<-mydata\nfor (i in 1:20){\n  for (j in i:20){\n      rand<-runif(1)\n      if(rand < 0.33){mydata_directed[i,j]<-0}\n      if(rand >= 0.33 & rand < 0.66){mydata_directed[j,i]<-0}\n  }\n}\n\n#use this modified adjacency matrix to create a directed network\ng_directed<-graph_from_adjacency_matrix(mydata_directed,mode=\"directed\",weighted=T)\n\n#plot the hub centrality and authority centrality for this directed network\nplot(g_directed,vertex.size=20*hub_score(g_directed)$vector,vertex.label.cex=0.8,vertex.color=2,edge.arrow.size=0.4)\nplot(g_directed,vertex.size=20*authority_score(g_directed)$vector,vertex.label.cex=0.8,vertex.color=2,edge.arrow.size=0.4)\n```", "```\n#create dataset of a few centrality measures on Farrelly's social network\ndata_social<-cbind(page_rank(g_social)$vector,degree(g_social),hub_score(g_social)$vector,betweenness(g_social))\ncolnames(data_social)<-c(\"PageRank\",\"Degree\",\"Hub Score\",\"Betweenness\")\n```", "```\n#compute and plot transitivity for each vertex in Farrelly's social network\nplot(g_social,vertex.size=20*transitivity(g_social,type=\"local\",isolates=\"zero\"),vertex.label.cex=0.8,vertex.color=2)\n```", "```\n#load the brainGraph library that adds on to igraph\nlibrary(brainGraph)\n\n#compute efficiency for each vertex in Farrelly's social network\nefficiency(g_social,type=\"local\")\n```", "```\n#compute the degrees of all vertices\nd<-degree(g_social)\n\n#count edges and initiate vector of edge curvature values\nl<-length(E(g_social))\nfrc<-rep(NA,l)\n\n#loop to calculate and store Forman-Ricci edge curvature\nfor (I in 1:l){\n  w<-as.vector(ends(g_social,E(g_social)[i],names=F))\n  frc[i]<-2-d[w[1]]-d[w[2]]\n}\n\n#count vertices and initiate vector of vertex curvature values\nn<-length(d)\nfrcv<-rep(NA,n)\n\n#loop to calculate and store Forman-Ricci vertex curvature\nfor (i in 1:n){\n  I<-as.vector(incident(g_social,i))\n  frcv[i]<-sum(frc[I])\n}\n\n#plot the network with vertex and edge size given by the negated curvature\nplot(g_social,edge.width=-frc,vertex.size=-20*frcv/max(-frcv),vertex.label.cex=0.8,vertex.color=2)\n```", "```\n#compute the graph Laplacian of a network g\nlap<-laplacian_matrix(g)\n\n#compute the eigenvalues and round to avoid numerical issues\nevals<-round(eigen(lap)$values,digits=5)\n\n#compute number of connected components\nsum(evals == 0)\n\n#compute the algebraic connectivity\nunique(evals)[length(unique(evals))-1]\n```"]