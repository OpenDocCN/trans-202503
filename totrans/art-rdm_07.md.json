["```\nimport time\nimport turtle as tu\nfrom RE import *\n\ntu.speed(0)\ntu.ht()\ntu.getscreen().setup(500,500)\ntu.getscreen().bgcolor('black')\n\nx = np.linspace(-200,200,400)\ny = np.linspace(-200,200,400)\n```", "```\nwhile (True):\n    tu.clear()\n    X,Y = RE(mode='int', low=-100, high=100).random(2)\n    step = RE(mode='int', low=2, high=9).random()\n    r,g,b = RE(mode='int', low=1, high=256).random(3)\n    color = \"#%02x%02x%02x\" % (r,g,b)\n    tu.color(color)\n\n    for i in range(0,400,step):\n        Line(X,Y, x[i],y[0], color)\n        Line(X,Y, x[0],y[i], color)\n        Line(X,Y, x[i],y[-1], color)\n        Line(X,Y, x[-1],y[i], color)\n\n    time.sleep(4)\n```", "```\ndef Line(x0,y0,x1,y1,color):\n    tu.color('white')\n    tu.pu()\n    tu.goto(x0,y0)\n    tu.pd()\n    tu.goto(x1,y1)\n    tu.color(color)\n    tu.goto(x0,y0)\n    tu.pu()\n```", "```\n>>> from matplotlib import cm\n>>> cmap = cm.get_cmap(\"viridis\")\n>>> cmap(129)\n(0.126453, 0.570633, 0.549841, 1.0)\n```", "```\n> python3 walker.py 4 1000000 Reds,Oranges,Reds,Oranges none portrait tshirt.png mt19937 8675309\n```", "```\nif (len(sys.argv) == 8):\n    kind = sys.argv[7]\n    rng = RE(kind=kind, mode=\"int\", low=0, high=mode)\nelif (len(sys.argv) == 9):\n    kind = sys.argv[7]\n    seed = int(sys.argv[8])\n    rng = RE(kind=kind, mode=\"int\", low=0, high=mode, seed=seed)\nelse:\n    rng = RE(mode=\"int\", low=0, high=mode)\n```", "```\nX = []; Y = []; C = []\nfor cname in cnames:\n    x,y,c = Walk(steps,cname,mode)\n    X = X + x\n    Y = Y + y\n    C = C + c\n```", "```\ndef Walk(steps, cname, mode):\n    try:\n        cmap = cm.get_cmap(cname)\n    except:\n        cmap = cm.get_cmap(\"inferno\")\n    if (mode == 8):\n        offset = [[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]]\n    else:\n        offset = [[0,-1],[1,0],[0,1],[-1,0]]\n    X = [0]\n    Y = [0]\n    C = [cmap(0)]\n    for i in range(steps):\n        m = rng.random()\n        X.append(X[-1] + offset[m][0])\n        Y.append(Y[-1] + offset[m][1])\n     âžŠ c = cmap(int(256*i/steps))\n        C.append((c[0],c[1],c[2]))\n    return X,Y,C\n```", "```\ndef CreateOutputImage(X,Y,C, background):\n    x = np.array(X)\n    y = np.array(Y)\n    xmin = x.min(); xmax = x.max()\n    dx = xmax - xmin\n    ymin = y.min(); ymax = y.max()\n    dy = ymax - ymin\n    img = np.zeros((dy,dx,4), dtype=\"uint8\")\n\n    if (background is not None) and (background != \"none\"):\n        try:\n            r = int(background[:2],16)\n            g = int(background[2:4],16)\n            b = int(background[4:],16)\n            a = 255\n        except:\n            r,g,b,a = 0,0,0,0\n    else:\n        r,g,b,a = 0,0,0,0 img[:,:,0] = r; img[:,:,1] = g\n    img[:,:,2] = b; img[:,:,3] = a\n\n    for i in range(len(x)):\n        xx = int((dx-1)*(x[i] - xmin) / dx)\n        yy = int((dy-1)*(y[i] - ymin) / dy)\n        c = C[i]\n        img[yy,xx,0] = int(255*c[0])\n        img[yy,xx,1] = int(255*c[1])\n        img[yy,xx,2] = int(255*c[2])\n        img[yy,xx,3] = 255\n    return img\n```", "```\nimg = CreateOutputImage(X,Y,C,background)\nrows, cols, _ = img.shape\nif (orient == \"portrait\"):\n    if (rows < cols):\n        img = img.transpose([1,0,2])\nelse:\n    if (rows > cols):\n        img = img.transpose([1,0,2])\nImage.fromarray(img).save(oname)\n```", "```\n> python3 warp.py 300 11 example.png minstd 6502\n```", "```\ndef f0(a,b):\n    x,y = a**3 + b, b**2 + a\n    c = int(255*(a*b+1)/2)\n    return x,y,c\n```", "```\nfuncs = [f0,f1,f2,f3,f4]\n```", "```\nv = -1 + 2*np.arange(npoints)/npoints\n```", "```\nfor k in range(cycles):\n    n = int(len(cnames)*rng.random())\n    cmap = cm.get_cmap(cnames[n])\n    n = int(len(funcs)*rng.random())\n    fn = funcs[n]\n    xoff,yoff = rng.random(2)-0.5\n    theta = np.pi*rng.random()\n    for i in range(len(v)):\n        for j in range(len(v)):\n            n,m,c = fn(v[i],v[j])\n            x = n*np.cos(theta) - m*np.sin(theta)\n            y = n*np.sin(theta) + m*np.cos(theta)\n            X.append(x+xoff)\n            Y.append(y+yoff)\n            C.append(cmap(c))\n```", "```\nplt.scatter(X,Y, marker=',', s=0.6, c=C)\nplt.axis('off')\nplt.tight_layout(pad=0, h_pad=0, w_pad=0)\nplt.savefig(oname, dpi=300)\nplt.show()\n```", "```\n> python3 warp_factor_9.py 3141592 100 warpings\n```", "```\n> python3 sierpinski.py\n```", "```\nX = [-200,0,200];  Y = [-200,200,-200]\nx = X[0]; y = Y[0]\ncolors = ['#E7FFAC','#ACE7FF','#97A2FF']\ntu.color(colors[0])\nrng = RE(mode='int', low=0, high=3)\n\ndone = False\ndef Done():\n    global done\n    done = True\ntu.onkeypress(Done)\ntu.listen()\n\nwhile (not done):\n    n = rng.random()\n    x = 0.5*(x + X[n])\n    y = 0.5*(y + Y[n])\n    tu.color(colors[n])\n    tu.goto(x,y)\n    tu.pd()\n    tu.dot(1)\n    tu.pu()\n\ntu.ht()\ntu.done()\n```", "```\n> python3 ifs.py\n\nifs <points> <output> <fractal> <color> [<kind> | <kind> <seed>]\n\n  <points>   - number of points to calculate\n  <output>   - output image\n  <fractal>  - name from the list below or 'random'\n  <color>    - <hex> (no '#')|maps\n  <kind>     - randomness source\n  <seed>     - seed value\n\ncircle dragon fern koch shell sierpinski tree thistle \nmaple spiral mandel tree2 tree3 fern2 dragon2\n```", "```\n\"sierpinski\": {\n    \"nmaps\":3,\n    \"probs\":[0.3333,0.3333,0.3333],\n    \"maps\":[\n           [[.5, 0, 0], [0, .5, 0], [0,0,1]],\n           [[.5, 0, .5], [0, .5, 0], [0,0,1]],\n           [[.5, 0, .25], [0, .5, .5], [0,0,1]]]},\n```", "```\n> python3 ifs.py 1_000_000 fern.png fern maps\n```", "```\ndef GeneratePoints(self):\n    self.xy = np.zeros((self.npoints,3))\n    xy = np.array([self.rng.random(), self.rng.random(), 1.0])\n\n    for i in range(100):\n        m = self.maps[self.ChooseMap(),:,:]\n        xy = m @ xy\n\n    for i in range(self.npoints):\n        k = self.ChooseMap()\n        m = self.maps[k,:,:]\n        xy = m @ xy\n        self.xy[i,:] = [xy[0],xy[1],k]\n```", "```\ndef ChooseMap(self):\n    r = self.rng.random()\n    a = 0.0\n    k = 0\n    for i in range(self.nmaps):\n        if (r > a):\n            k = i else:\n            return k\n        a += self.probs[i]\n    return k\n```", "```\napp = IFS(npoints, name, ctype, rng, show=True)\napp.GeneratePoints()\napp.StoreFractal(outfile)\n```", "```\ndef RandomMaps(self):\n    def mapping():\n        while (True):\n            a,b,c,d,e,f = -1 + 2*self.rng.random(6) if (a*a+d*d) >= 1:\n                continue\n            if (b*b+e*e) >= 1:\n                continue\n            if a*a+b*b+d*d+e*e - (a*e-d*b)**2 >= 1:\n                continue\n            break\n        return [[a,b,c],[d,e,f],[0,0,1]]\n\n    nmaps = 2 + int(4*self.rng.random()) # [2,5]\n    probs = self.rng.random(nmaps)\n    probs = probs / probs.sum()\n\n    maps = []\n    for k in range(nmaps):\n        maps.append(mapping())\n\n    return nmaps, probs, np.array(maps)\n```", "```\n> python3 ifs_maps.py 100 fractals 271828 >ifs_maps_271828.txt\n```"]