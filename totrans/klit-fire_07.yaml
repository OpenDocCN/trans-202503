- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Design as Destiny
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 设计即命运
- en: Design is not about making things look pretty.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 设计并不仅仅是让事物看起来漂亮。
- en: 'Many software engineers I’ve worked with have never considered this fact before
    it was pointed out to them. It’s an easy mistake to make. The most noticeable
    output of design thinking is packaging—how we speak about things, how something
    looks, what features go where, and how features behave. When we consider the end
    results, designers seem most effective when relegated to polishing up a product
    in the final stages. We do ourselves and our teams a disservice when we dismiss
    the toolkit of a designer in this way. Design is critical to making good technical
    decisions. *The US Army/Marine Corps**Counterinsurgency Field Manual*^([1](#c07-footnote-1))
    put it best when it advised soldiers:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 许多我曾与之共事的软件工程师在被指出之前，从未考虑过这一事实。这是一个容易犯的错误。设计思维最显著的输出是包装——我们如何谈论事物，事物的外观，功能的位置以及功能的行为。当我们考虑最终结果时，设计师似乎最有效的时候是被
    relegated（委派）去完善产品的最后阶段。当我们这样忽视设计师的工具包时，实际上是在给自己和团队带来不利影响。设计对于做出好的技术决策至关重要。*《美国陆军/海军陆战队反叛乱作战手册》*^([1](#c07-footnote-1))最好地表述了这一点，它建议士兵：
- en: “Planning is problem solving, while design is problem setting.”
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: “规划是解决问题，而设计是设定问题。”
- en: Problem-*solving* versus problem-*setting* is the difference between being *reactive*
    and being *responsive*. Reactive teams jump around aimlessly. Setbacks whittle
    away their confidence and their ability to coordinate. Momentum is hard to maintain.
    Responsive teams, on the other hand, are calmer and more thoughtful. They’re able
    to sort new information as it becomes available into different scopes and contexts.
    They’re able to change approaches without affecting their confidence, because
    design thinking gives them insight into why the change happened in the first place.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 问题-*解决*与问题-*设定*的区别在于，前者是*反应*性的，而后者是*应对*性的。反应性的团队往往漫无目的地四处奔波。挫折削弱了他们的信心和协调能力，势头很难保持。而应对性的团队则更冷静、更深思熟虑。当新信息到来时，他们能将其整理到不同的范围和情境中。因为设计思维让他们洞察到变化的原因，所以他们能够在不影响信心的情况下改变方法。
- en: With any large, complex project, odds of success are improved if a team can
    frame the problem and adjust to new information. When done well, problem-setting
    frees up all members of the team to act autonomously, using their intuition and
    judgment. At a minimum, problem-setting keeps everybody on the same page about
    the project’s goals and what success looks like. Legacy projects that maximize
    the impact of design thinking don’t just modernize, they innovate.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何大型复杂项目，团队能够明确问题并适应新信息时，成功的概率会提高。当问题设定得当时，它使团队的每个成员都能够自主行动，依靠直觉和判断力。至少，问题设定可以让所有人对项目的目标和成功的标准达成一致。最大化设计思维影响的传统项目不仅仅是现代化，而是创新。
- en: If those statements sound familiar, it’s because I’ve already described several
    design exercises for problem-setting in earlier chapters. In Chapter 2, I discussed
    how working from familiar interfaces increases the likelihood of technology being
    adopted. In Chapter 3, I explained how to map a system in terms of complexity
    and coupling. In Chapter 5, I introduced troubleshooting difficult technical conversations
    with scoping. All of these were design exercises. Now it’s time to dive deeper
    and explore some variations on the problem setting approaches I’ve already covered.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些说法听起来很熟悉，那是因为我在前几章中已经描述了几个用于问题设定的设计练习。在第二章，我讨论了如何通过从熟悉的接口出发来提高技术被采纳的可能性。在第三章，我解释了如何根据复杂性和耦合性来映射一个系统。在第五章，我介绍了如何通过界定问题来解决困难的技术对话。所有这些都是设计练习。现在，是时候深入探讨我之前提到的一些问题设定方法的变化形式了。
- en: 'The first part of this chapter focuses on applying design techniques to technical
    decision-making: how to structure technical conversations, scope problems, and
    come to a consensus.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的第一部分集中于将设计技巧应用于技术决策：如何构建技术对话、界定问题以及达成共识。
- en: The second part of this chapter focuses on using design techniques to align
    incentives. In the previous chapter, I mentioned how conflicting incentives can
    doom projects and demoralize teams; this chapter describes how to figure out what
    the incentives are within the organization and how to position teams for success
    given that information.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的第二部分集中于使用设计技巧来对齐激励。在上一章中，我提到过，冲突的激励会导致项目失败并打击团队士气；本章将介绍如何找出组织内的激励因素，并根据这些信息来为团队定位成功。
- en: Designing Technical Conversations
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计技术对话
- en: Chapter 5 introduced the concept of scope as a solution to avoid unproductive
    meetings, but in reality, the process of managing a major modernization is all
    about manipulating scope.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第五章介绍了“范围”这一概念，作为避免无效会议的解决方案，但实际上，管理重大现代化项目的过程就是在操控范围。
- en: Scope is determined by what problem you want solve, but few problems exist completely
    independent from other factors. Deciding which factors actually have influence
    over the success or failure of that marquee problem and which do not requires
    thorough and regular feedback. You will have to become adept at collecting data
    because the factors that can complicate a modernization project are many. They
    include the historical context, the technical constraints, the skills available
    through human capital, and internal politics.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 范围是由你想要解决的问题决定的，但很少有问题是完全独立于其他因素的。决定哪些因素对解决这个重要问题的成功或失败有影响，哪些没有影响，需要经过深入和定期的反馈。你必须变得擅长收集数据，因为有许多因素可能会使现代化项目变得复杂。它们包括历史背景、技术约束、可用的人力资本技能以及内部政治。
- en: On top of that, some of the information delivered to you by those feedback loops
    will be incorrect, or you will interpret them incorrectly. The simplest form of
    design exercise is to talk to your user. Doing that is better than doing nothing,
    but in unstructured conversations, the quality of the feedback can vary. Sometimes
    users don’t know what they want. Sometimes the user and the researcher use the
    same words to mean different things. Sometimes the power dynamics between the
    user and the person conducting the interview are so great, the user tells the
    interviewer what he or she wants to hear.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，通过反馈循环传递给你的信息可能是错误的，或者你会错误地解读它们。最简单的设计练习就是与用户交谈。这样做总比什么都不做要好，但在非结构化的对话中，反馈的质量可能会有所不同。有时候用户不知道自己想要什么。有时候，用户和研究人员使用相同的词语来表示不同的意思。有时候，用户和访谈者之间的权力动态过大，用户会告诉访谈者他或她想听的话。
- en: Design thinking changes the way we address that challenge. It highlights how
    we ask, who we ask, and who does the asking as determining factors in what information
    comes to the surface and gets discussed in the first place.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 设计思维改变了我们解决这一挑战的方式。它强调我们提问的方式、提问的对象以及谁来提问是决定哪些信息会浮现并首先被讨论的决定性因素。
- en: Don’t underestimate the role social dynamics have in skewing the accuracy of
    your information. We know that people behave differently when they are being observed.
    We know that people tend to be conflict-averse and go along with crowds. We know
    that not every voice on an engineering team carries the same weight. Design exercises
    can succeed where normal technical conversations fail because they account for
    those influences.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 不要低估社会动态在扭曲信息准确性方面的作用。我们知道人们在被观察时会表现得不同。我们知道人们倾向于避免冲突并随波逐流。我们知道并不是每个工程团队中的声音都有同样的分量。设计练习之所以能够成功，是因为它们考虑了这些影响，而普通的技术对话往往忽视了这一点。
- en: If we think of the average technical conversation as being adversarial in nature
    with individuals either proposing solutions or challenging the ideas of others,
    team members have plenty of opportunities to engage in unproductive behavior.
    What makes them look smart in front of the group won’t necessarily translate to
    good technical strategy.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们把普通的技术对话看作是具有对抗性的，个人要么提出解决方案，要么挑战他人的想法，那么团队成员就有很多机会参与不生产性的行为。在团队面前看起来聪明的做法不一定会转化为好的技术战略。
- en: But with design, we can change the path to winning the argument. During a normal
    team conversation, individual members are looking either to increase or to maintain
    their status among the group. And, what increases their status? Shooting down
    the ideas of others. Demonstrating their ability to see some critical flaw everyone
    else has missed. Developing a brilliant solution. Of those options, developing
    a brilliant solution is the most difficult to accomplish. Shooting down other
    people’s ideas is usually much easier. So, environments where team members are
    jockeying for status can overselect for this behavior.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在设计中，我们可以改变赢得论证的路径。在正常的团队对话中，个别成员通常是在寻求提升或维持自己在小组中的地位。那么，什么能提升他们的地位呢？击败他人的想法。展示他们发现了别人忽视的某个关键缺陷。提出一个绝妙的解决方案。在这些选项中，提出一个绝妙的解决方案是最难做到的。打击他人的想法通常要容易得多。因此，在成员争夺地位的环境中，这种行为可能会被过度选拔。
- en: Now, imagine that we started the conversation by telling the team we would give
    them points for coming up with solutions that used a specific piece of technology.
    The amount of time spent shooting down ideas would plummet as everyone focused
    on curating the longest list of potential solutions.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，想象一下我们开始对话时告诉团队，我们会根据他们提出的解决方案是否使用特定技术来给予积分。随着每个人都集中精力编制最长的潜在解决方案清单，用来反驳创意的时间将大幅减少。
- en: That’s the value of design. When we design our conversations, we turn them into
    games. We redirect the energy of team members into providing more and better answers
    instead of simply being right and their colleagues wrong.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是设计的价值。当我们设计对话时，我们将其转化为游戏。我们将团队成员的精力转移到提供更多、更好的答案上，而不是仅仅纠正自己或让同事犯错。
- en: How to Run a Design Exercise
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行设计练习
- en: My goal in including a chapter on design in this book is not to turn software
    engineers into designers. I’m skeptical of the habit of technical people to assume
    they can pick up disciplines on the fly that others have spent years cultivating
    and studying. I believe that technical people should focus on bringing technical
    expertise to the table and seek out other experts to complement their skills.
    Therefore, I encourage you to incorporate design thinking into your process by
    hiring a designer or, even better, consulting the designers you already employ.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中包含设计章节的目的不是将软件工程师培养成设计师。我对技术人员习惯性地认为自己可以迅速掌握其他人花费多年培养和研究的学科持怀疑态度。我相信技术人员应该专注于将技术专长带到桌面上，并寻求其他专家来补充他们的技能。因此，我鼓励你通过聘请设计师或更好的是，咨询你已雇佣的设计师，将设计思维融入到你的流程中。
- en: 'That being said, it is useful to understand how design thinking works. Design
    exercises come in various shapes and sizes, but they share these four distinct
    phases:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，了解设计思维如何运作还是很有帮助的。设计练习有各种形式和大小，但它们都有以下四个明显的阶段：
- en: Warm-up The warm-up creates a break from the distractions of everyday life so
    that the participants in the exercise are focused on the task at hand. The simplest
    warm-ups are listing a few sentences introducing your topic/goal/intention, but
    more active and complicated exercises might devote more time and energy to warming
    up. Posing a simple question for group discussions, pair work, or polling people
    for experiences all can be used as warm-ups.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 热身 热身活动为参与者提供一个从日常生活干扰中暂时脱离的机会，让他们能够集中精力在当前任务上。最简单的热身活动是列出几句介绍你的主题/目标/意图的句子，但更积极和复杂的活动可能会花费更多的时间和精力进行热身。提出一个简单的问题进行小组讨论、配对工作，或通过问卷调查人们的经验，都可以作为热身活动。
- en: Research questions When we do a design exercise, we do it with a specific research
    question in mind. We have a problem or a decision to make, and we want to hear
    other perspectives. Or, we’re about to invest in a new product, and we want to
    know if the users will like it. The most common design exercise for engineering
    teams is observing potential users interacting with a product. A good researcher
    will be careful not to lead users, not to teach them how to use the product, but
    let them interact with it organically and use carefully worded questions to direct
    them to functions relevant to the research objective.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 研究问题 当我们进行设计练习时，心中通常有一个特定的研究问题。我们面临一个问题或需要做出决策，并希望听取其他人的观点。或者，我们即将投资一款新产品，希望了解用户是否会喜欢它。工程团队最常见的设计练习是观察潜在用户与产品的互动。一个好的研究者会小心谨慎，不引导用户，也不教他们如何使用产品，而是让他们自然地与产品互动，并通过精心措辞的问题引导他们关注与研究目标相关的功能。
- en: Follow-ups People often say things we don’t expect in design exercises, requiring
    us to divert from the structure we’ve set out for a moment to understand this
    new piece of information. Follow-up questions or activities are used to go deeper
    on individual issues as they appear.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跟进问题 人们在设计练习中常常会说出我们未曾预料到的话，这需要我们稍微偏离我们预设的结构，去理解这一新出现的信息。跟进问题或活动用于在个别问题出现时进行深入探讨。
- en: Aggregation At some point—maybe after a single exercise or after a series of
    interviews—we need to look at all the data and draw a conclusion. Just like engineering,
    design is often an iterative process. The conclusion of one exercise may create
    the research question for the next. For example, if a user research session reveals
    that users don’t understand how to interact with the product, future research
    sessions will test alternative interfaces until the organization has found something
    that works for users.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 聚合 在某个时刻——可能是在一次练习之后，或者在一系列访谈之后——我们需要查看所有数据并得出结论。就像工程学一样，设计通常是一个迭代过程。一项练习的结论可能会为下一次研究提出新的问题。例如，如果用户研究揭示出用户不理解如何与产品互动，那么未来的研究会测试不同的界面，直到组织找到一个适合用户的解决方案。
- en: 'More About Follow-ups: Why vs. How'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于后续问题：为什么与如何
- en: Creating effective follow-up questions is an art form unto itself. As with research
    questions, be careful that they don’t suggest their own answers or create ambiguities
    that might bias the data, but unlike with devising research questions, it is nearly
    impossible to anticipate everything you might want to follow up on ahead of time.
    You need to write the questions on the fly.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 创建有效的后续问题本身就是一种艺术。与研究问题一样，要小心它们不要暗示自己的答案或产生可能会偏向数据的模糊性，但与设计研究问题不同的是，几乎不可能事先预见你可能需要跟进的所有问题。你需要临时编写这些问题。
- en: A good rule of thumb is questions that begin with *why* produce more abstract
    statements, while questions that begin with *how* generate answers that are more
    specific and actionable. Think about how your answer would be different if the
    follow-up were “What are the best tools for the job?” versus “How do you know
    these tools are the best for the job?” You might list a bunch of common solutions
    in the answer to the first question, convinced that they are good because they
    are popular. You are more likely to describe your various experiences with the
    tools you actually use when asked the second question.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的经验法则是，以*为什么*开头的问题会产生更抽象的陈述，而以*如何*开头的问题则会产生更具体、可操作的答案。想一想，如果后续问题是“什么是最适合这项工作的工具？”和“你怎么知道这些工具最适合这项工作？”你的回答会有什么不同？在第一个问题的回答中，你可能会列出一堆常见的解决方案，确信它们之所以好是因为它们很受欢迎。而在回答第二个问题时，你更有可能描述自己使用过的工具的各种经验。
- en: Both *why* questions and *how* questions can be useful. *Why* questions broaden
    the boundaries of the research field by allowing unseen factors and forces to
    be introduced into the data. *How* questions put you in the minds of users so
    you can see those factors as they understand them. *Why* questions often lead
    to *how* questions.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*为什么*问题和*如何*问题都可以是有用的。*为什么*问题通过引入尚未见过的因素和力量，扩展了研究领域的边界。*如何*问题则让你置身于用户的思维中，这样你就能看到他们理解这些因素的方式。*为什么*问题通常会引出*如何*问题。'
- en: Some Useful Design Exercises for Engineering Teams
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些有用的工程团队设计练习
- en: 'Design is a rich industry full of interesting approaches and philosophies,
    more than what a single chapter can capture. To get you started, I’ve provided
    a few of my favorite exercises for technical conversations. Think of this as a
    toolkit. Some of these exercises are loosely adapted from *The Surprising Power
    of Liberating Structures: Simple Rules to Unleash a Culture of Innovation* by
    Henri Lipmanowicz and Keith McCandless, which is a great resource for further
    learning.^([2](#c07-footnote-2))'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 设计是一个充满有趣方法和哲学的丰富行业，远超一个单独章节所能囊括的内容。为了帮助你入门，我提供了我最喜欢的一些技术对话练习。可以把它当作一个工具包。这些练习有些是从Henri
    Lipmanowicz和Keith McCandless的《释放结构的惊人力量：简单规则激发创新文化》一书中松散改编的，这是一本很好的进一步学习资源。^([2](#c07-footnote-2))
- en: 'Exercise: Critical Factors^([3](#c07-footnote-3))'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习：关键因素^([3](#c07-footnote-3))
- en: This is a brainstorming exercise to do with a team to help prioritize conversations
    around the early stages of a modernization activity. What must happen for the
    project goals to be successful? What must not happen? After everyone has had their
    say and recorded their ideas, the team edits the list to make sure everything
    on it really deserves to be there. A good way to do that is for the team to discuss
    each item in terms of whether the project could succeed if everything else on
    the list of critical factors went favorably. The only items that should remain
    on the list are the factors that have the ability to take down the entire project
    by themselves.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个与团队进行头脑风暴的练习，帮助优先考虑围绕现代化活动初期阶段的讨论。为了项目目标成功，必须发生什么？又必须避免发生什么？每个人发言并记录自己的想法后，团队编辑列表，确保其中的每一项确实值得保留。一个好的方法是，团队根据是否在其他所有关键因素都朝着有利方向发展时，项目是否能成功，来讨论每一项。唯一应该留在列表上的项目是那些有能力单独让整个项目失败的因素。
- en: '**After actions:** Early technical conversations should focus on achieving
    or maintaining good outcomes for these critical factors. In-scope issues move
    outcomes along these critical factors in a positive direction. Out-of-scope issues
    do not affect these outcomes.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**行动之后：** 早期的技术讨论应集中在实现或维持这些关键因素的良好结果上。范围内的问题推动这些关键因素向积极方向发展。范围外的问题不会影响这些结果。'
- en: 'Exercise: The Saboteur^([4](#c07-footnote-4))'
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习：破坏者^([4](#c07-footnote-4))
- en: A similar but inverse brainstorming exercise to the critical factors exercise
    is asking your team to play saboteur. If you wanted to guarantee that the project
    fails, what would you do? How can you achieve the worst possible outcome? Once
    this list is generated, the team discusses if there are any behaviors either internally
    or from external partners that are close to items on the saboteur list.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一个与关键因素练习相似但相反的头脑风暴练习是要求你的团队扮演破坏者角色。如果你想保证项目失败，你会做什么？怎样才能达到最糟糕的结果？一旦列出这个清单，团队讨论是否有任何内部或外部合作伙伴的行为，接近破坏者清单上的项目。
- en: '**After actions:** Some of the behaviors on the saboteur list will be habits
    or ineffective processes that need to be changed. Depending on your results, these
    items might be worth handling as critical factors. More likely, though, the saboteur
    list will show you where the fault lines are in your team. What distractions are
    they the most vulnerable to? How well do they understand their true threats? How
    do internal politics manifest among team members? The saboteur exercise should
    help you anticipate out-of-scope issues that are likely to be brought up and who
    they are likely to come from. Having a sense of that from the beginning helps
    keep technical conversations on track. If you’re able to open your meetings by
    defining what is and is not in scope, it is much easier to hold everyone accountable.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**行动之后：** 一些破坏者清单上的行为可能是需要改变的习惯或低效的流程。根据你的结果，这些项目可能值得作为关键因素处理。然而，更可能的是，破坏者清单将向你展示你团队中的裂缝。它们最容易受到什么干扰？他们对真正的威胁了解多少？团队成员之间是如何体现内部政治的？破坏者练习应帮助你预见可能会被提出的超出范围的问题，以及这些问题可能来自谁。从一开始就有这种预感有助于保持技术对话的正确轨道。如果你能通过定义什么是范围内，什么是范围外，来开启会议，那么让每个人负责就变得容易得多。'
- en: 'Exercise: Shared Uncertainties^([5](#c07-footnote-5))'
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习：共享的不确定性^([5](#c07-footnote-5))
- en: 'This exercise also starts by asking team members to identify potential risks
    and challenges to a project’s success, but this time, you’re looking for differences
    in how such risks are perceived. Give each team member a four-quadrant map with
    the following axes:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习同样要求团队成员识别可能影响项目成功的潜在风险和挑战，但这次你关注的是不同的人如何看待这些风险。给每个团队成员一个四象限图，图中包含以下坐标轴：
- en: Simple to complex Problems are simple if they are well defined and understood.
    They are complicated if their causes are unknown or if solving them means giving
    up something else of value.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简单到复杂：问题如果定义清晰并且理解透彻，就很简单。如果它们的原因不明确，或者解决它们意味着必须放弃其他有价值的东西，那它们就变得复杂。
- en: Orderly to chaotic Problems are orderly when there isn’t much debate about the
    correct way to solve them, although those solutions might be long and tedious.
    They are chaotic when their solutions could accidentally make the situation worse.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有序到混乱：当解决问题的方法没有太多争议，尽管这些解决方案可能漫长而繁琐时，问题是有序的。当解决方案可能会意外地使局势更糟时，问题就是混乱的。
- en: Each team member places challenges somewhere on this map. Then as a group they
    compare results. How far apart are they? Where are the shared anxieties? Is anyone
    completely out of sync with everyone else? Depending on your team’s composition,
    you might want to agree on the challenges to be mapped in advance or let individuals
    come up with the challenges to map as a group. The advantage to not getting everyone
    on the same page before mapping is if your team draws from different organizational
    units or functions, you can better see knowledge gaps by not requiring them all
    to use the same challenges.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 每个团队成员将挑战放置在这个图谱的某个位置。然后，作为一个小组，他们会比较结果。它们之间有多远的差距？共享的焦虑点在哪里？是否有人完全不同步？根据团队的组成，您可能希望事先商定要映射的挑战，或者让个体在小组内提出要映射的挑战。未在映射前达成一致的好处是，如果团队成员来自不同的组织单位或职能领域，您可以通过不要求他们使用相同的挑战，更好地看到知识差距。
- en: '**After actions:** By far the biggest benefit of this exercise is that it introduces
    alternative perspectives and priorities in a way that is not confrontational.
    In open discussions, different perspectives are often presented as responses to
    other people sharing their own perspectives. This makes the contribution feel
    like a counterargument and encourages people not to empathize with or listen to
    each other.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**执行后：** 这个练习最大的好处无疑是它以一种非对抗性的方式引入了替代的视角和优先级。在公开讨论中，不同的视角常常被作为对他人视角的回应。这使得贡献显得像是反驳，鼓励人们不去相互理解或倾听对方的意见。'
- en: There’s also an inherent sense of prioritization when overlap and consensus
    are high on the team. If a certain challenge is thought to be orderly and simple
    by everyone, the team might prefer to consider it out of scope until strategies
    are developed around harder problems.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当团队成员之间的重叠和共识度很高时，优先级的感知也会自然产生。如果每个人都认为某个挑战是有序且简单的，团队可能会倾向于认为它不在讨论范围内，直到围绕更困难的问题制定出策略。
- en: Regarding simple/chaotic and orderly/complex problems, if you have any of those,
    they are good issues to focus early conversations around. They are often the most
    intimidating and anxiety-inducing.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 关于简单/混乱和有序/复杂的问题，如果你遇到其中任何一种，它们是很适合早期讨论的好问题。它们通常是最具威胁性和引发焦虑的。
- en: 'Exercise: The 15 Percent^([6](#c07-footnote-6))'
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习：15%的改善^([6](#c07-footnote-6))
- en: In Chapter 3, I talked about the value of making something 5 percent, 10 percent,
    or 20 percent better. This exercise asks team members to map out how much they
    can do on their own to move the project toward achieving its goals. What are they
    empowered to do? What blockers do they foresee, and when do they think they become
    relevant? How far can they go without approval, and who needs to grant that approval
    when the time comes?
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3章中，我谈到了将某些事物改善5%、10%或20%的价值。这个练习要求团队成员绘制出他们自己能够做到的，推动项目实现目标的具体措施。它们有什么权限？他们预见到哪些阻碍因素？这些阻碍因素何时变得重要？他们在没有批准的情况下能走多远？当时需要谁的批准？
- en: Have each team member brainstorm an ordered list of actions they can take right
    now to make the situation 15 percent better. The number 15 is arbitrary; don’t
    quibble over whether the impact of actions would really be only an 8 percent improvement.
    The point is these actions don’t need to come close to solving the problem; they
    just need to move things forward.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让每个团队成员头脑风暴出一个按优先顺序排列的行动清单，列出他们现在能采取的措施，以使局面改善15%。数字15是任意的；不要纠结于这些行动的实际效果是否只会带来8%的改善。关键是，这些行动不需要接近解决问题的程度；它们只需要推动事情向前发展。
- en: When each team member has a list, the team should discuss the items, refine
    them as needed, and make a commitment to execute.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当每个团队成员都有了自己的清单后，团队应当讨论这些条目，必要时进行优化，并承诺执行。
- en: '**After actions:** The best technical conversations are the ones you don’t
    need to have. This exercise helps teams figure out where they need to make decisions
    versus where they need only advise and support other team members. Discussing
    potential blockers and approvers helps focus the invite lists of whatever conversations
    do need to be scheduled to the most relevant people. Nothing produces out-of-scope
    digressions more effectively than having people in meetings who don’t need to
    be there.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**执行后：** 最好的技术讨论是那些你不需要进行的讨论。这个练习帮助团队弄清楚在哪些地方需要做决策，哪些地方仅需要建议和支持其他团队成员。讨论潜在的阻碍因素和批准者有助于集中邀请那些最相关的人参与需要安排的会议。没有什么比让不必要的人参加会议更能引发偏题讨论。'
- en: Exercises Specifically for Decisions
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 专门针对决策的练习
- en: The exercises described previously all assume that once information is collected
    and exposed to the team, the right decisions are self-evident. It doesn’t always
    work that way. When you’ve collected all the data as a team and had a good, thorough
    discussion about it, here are two additional exercises that focus on decision-making.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 前面描述的所有练习都假设一旦信息收集并呈现给团队，正确的决策是显而易见的。但事情并不总是这样。当你作为团队收集完所有数据并进行了充分的讨论后，下面是两个额外的练习，专注于决策制定。
- en: 'Exercise: Probabilistic Outcome-Based Decision-Making'
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习：基于概率结果的决策制定
- en: '*Probabilistic outcome-based decision-making* is better known as *betting.*
    It’s a great technique for decisions that are hard to undo, have potentially serious
    impacts, and are vulnerable to confirmation bias. I tend to use it a lot to run
    hiring committees, for example. Firing people is difficult; making a wrong hire
    can destroy a team’s productivity, and people often see what they want to see
    in potential candidates.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*基于概率结果的决策制定*更广为人知的名字是*下注*。这是一个很好的技巧，适用于那些难以逆转、可能带来严重影响并容易受到确认偏差影响的决策。例如，我通常会在招聘委员会中广泛使用这个方法。解雇员工很困难；错误的招聘可能会摧毁一个团队的生产力，而且人们往往只看到他们想看到的潜在候选人。'
- en: 'This is how it works: as a group, we make a list of potential outcomes from
    the decision that needs to be made. Outcomes like “We’re able to scale 2× by doing
    this” or “We will implement this new feature by this date.” You can mix both positive
    and negative outcomes if you like, but I find the conversation usually goes better
    if the list of outcomes is either positive or negative.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法是这样的：作为一个团队，我们列出需要做出的决策可能带来的潜在结果。比如“通过这样做，我们能够实现2倍增长”或“我们将在这个日期之前实现这个新功能”。如果你愿意，可以将正面和负面的结果混合在一起，但我发现如果结果列表只是正面的或负面的，讨论通常会更顺畅。
- en: Then team members place bets as to whether the outcome will come true. Traditionally,
    this exercise is run with imaginary money. Depending on the specific decision
    to be made, I sometimes ask them to bet with hours of their time instead of money.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，团队成员根据结果是否会实现进行下注。传统上，这个练习使用的是虚拟货币。根据具体的决策，我有时会要求他们用时间而不是金钱下注。
- en: The mechanics of the bet work the same way they do in any other context. If
    you bet a lot and win, you gain a lot. If you bet a lot and lose, you lose a lot.
    Therefore, just asking someone to put a unit value next to an outcome is forcing
    them to articulate a confidence level. The wondrous thing about this design is
    that if you ask people to rate their confidence level between 1 and 10, most of
    them would struggle to answer. It’s the unit itself, the knowledge of how much
    a dollar or an hour means to them, and what it means to lose a certain amount
    of dollars or time that helps research subjects articulate their feelings. It
    doesn’t matter that they will not lose what they’ve bet, just imagining *this
    much money* or *that much time* is enough to help people place where their feelings
    are on a spectrum.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个赌注的机制与其他任何情境中的机制一样。如果你下注很多并且赢了，你就获得很多；如果你下注很多但输了，你就损失很多。因此，仅仅要求某人在结果旁边标注一个单位值，就迫使他们表述自己的信心水平。这种设计的奇妙之处在于，如果你要求人们在1到10之间给出自己的信心水平，大多数人会很难回答。正是单位本身，也就是他们知道一美元或一小时对他们的意义，以及失去一定数量的钱或时间意味着什么，帮助研究对象表述他们的感受。即使他们不会失去所下注的内容，仅仅想象*这么多钱*或*这么多时间*就足以帮助人们将自己的感受放置在一个范围内。
- en: You can do this exercise alone when struggling with your own decisions. When
    I do it with teams, I like to put everyone’s bets for each outcome in a shared
    document or on a whiteboard. Then we discuss how confident the team feels that
    the positive outcomes would be reached by making the decision one way or the other.
    By this point, the right decision is usually much more obvious.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在为自己的决策感到困惑时，可以独自做这个练习。当我与团队一起做时，我喜欢将每个结果的赌注放在共享文档或白板上。然后我们讨论团队对不同决策方式能够达到正面结果的信心有多大。到此时，正确的决策通常会变得更加明显。
- en: 'Exercise: Affinity Mapping'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习：亲和图
- en: '*Affinity mapping* is a common design exercise involving clustering ideas and
    statements from individuals together visually. This involves a large empty surface,
    usually a wall or a whiteboard, and generally some markers and Post-it Notes.
    You’ve probably done affinity mapping before. Everyone writes down their thoughts,
    one per Post-it Note, and puts it on the wall. Meanwhile, a moderator moves the
    Post-it Notes around, assembling them into groups of common ideas or feelings.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*亲和图法*是一个常见的设计练习，涉及将个人的想法和陈述视觉化地聚类。这通常需要一个大的空白表面，通常是墙面或白板，以及一些标记笔和便签纸。你可能做过亲和图法练习。每个人将他们的想法写在便签纸上，然后将其贴在墙上。同时，主持人会将便签纸移动，按照共同的想法或感受将其组合成群组。'
- en: Affinity mapping works well for category building, but it can also reveal the
    specific circumstances that make reaching a consensus on a particular decision
    so difficult. Often in open discussions, people will talk past one another or
    assume they mean the same thing when expressing different concepts. Affinity mapping
    can reveal how far apart from one another the group really is and where the biggest
    points of disagreement actually are.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 亲和图法在构建类别时效果很好，但它也能揭示出达成某一决策共识的具体困难。通常在开放讨论中，人们会错过彼此的观点，或者在表达不同概念时假设大家的意思相同。亲和图法能够揭示出团队成员之间真正的差距，以及最大的分歧点在哪里。
- en: Team Structure, Organization Structure, and Incentives
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 团队结构、组织结构与激励措施
- en: 'In 1968, Melvin Conway published a paper titled “How Do Committees Invent?”^([7](#c07-footnote-7))
    This paper, originally intended for *Harvard Business Review*but rejected for
    being too speculative in nature, outlined the ways the structure and incentives
    of an organization influenced the software product it produced. It received little
    response but eventually made its way to the chair of the University of North Carolina
    at Chapel Hill’s computer science department, Fred Brooks. At the time, Brooks
    had been pondering a question from his exit interview at IBM: Why is it so much
    harder to manage software projects than hardware projects? Conway’s insight linking
    the structure of software to the structure of the committees that invented it
    seemed significant enough for Brooks to repackage the thesis as “Conway’s law”
    when he published his guide on effectively managing software teams, titled *The
    Mythical Man-Month*, in 1975.^([8](#c07-footnote-8))'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 1968年，梅尔文·康威（Melvin Conway）发表了一篇名为《委员会是如何发明的？》的论文^([7](#c07-footnote-7))。这篇论文最初是为*哈佛商业评论*所写，但因其内容过于推测性而被拒绝，论文概述了组织的结构和激励措施如何影响其所生产的软件产品。该论文反响平平，但最终被北卡罗来纳大学教堂山分校计算机科学系的系主任弗雷德·布鲁克斯（Fred
    Brooks）看到了。当时，布鲁克斯正在思考他在IBM离职面谈中提到的一个问题：为什么管理软件项目比硬件项目更难？康威关于软件结构与发明该软件的委员会结构之间的联系的见解，似乎足够重要，促使布鲁克斯在1975年出版他关于有效管理软件团队的指南《神话中的人月》时，将这一理论重新包装为“康威定律”^([8](#c07-footnote-8))。
- en: Yet, this was not the only useful observation in Conway’s paper. As it has subsequently
    been referenced by hundreds of computer science texts since Brooks’s adoption
    of it as a universal truth, the more nuanced observations that supported Conway’s
    argument have largely been omitted from the conversation. Conway’s law has become
    a voodoo curse—something that people believe only in retrospect. Few engineers
    attribute their architecture successes to the structures of their organizations,
    but when a product is malformed, the explanation of Conway’s law is easily accepted.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并不是康威论文中唯一有用的观察结果。自布鲁克斯将其作为普遍真理之后，康威的定律已被数百本计算机科学教材引用，但支持康威论点的更为细致的观察大多被忽略。康威定律已经成为一种迷信咒语——人们只会在事后相信它。很少有工程师将他们架构上的成功归因于组织结构，但当产品出现问题时，康威定律的解释便很容易被接受。
- en: 'Conway’s original paper outlined not just how organizational structure influenced
    technology but also how human factors contributed to its evolution. Some of his
    other observations include the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 康威的原始论文不仅阐述了组织结构如何影响技术，还指出了人类因素对技术发展的贡献。他的其他一些观察结果包括：
- en: Individual incentives have a role in design choices. People will make design
    decisions based on how a specific choice—using a shiny new tool or process—will
    shape their future.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 个人激励在设计选择中扮演了角色。人们会根据某个特定选择——例如使用一种崭新的工具或过程——如何塑造他们的未来，来做出设计决策。
- en: Minor adjustments and rework are unflattering. They make the organization and
    its future look uncertain and highlight mistakes. To save face, reorgs and full
    rewrites become preferable solutions, even though they are more expensive and
    often less effective.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小幅调整和返工是不光彩的，它们让组织和未来看起来不确定，突显出错误。为了挽回面子，重组和全面重写成为了更可取的解决方案，尽管这些方案更昂贵且往往效果不佳。
- en: An organization’s size affects the flexibility and tolerance of its communication
    structure.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织的规模影响其沟通结构的灵活性和容忍度。
- en: 'When a manager’s prestige is determined by the number of people reporting up
    to her and the size of her budget, the manager will be incentivized to subdivide
    design tasks that in turn will be reflected in the efficiency of the technical
    design—or as Conway put it: “The greatest single common factor behind many poorly
    designed systems now in existence has been the availability of a design organization
    in need of work.”'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个经理的威望由其下属人数和预算规模决定时，经理会受到激励去细分设计任务，这反过来会影响技术设计的效率——正如Conway所说：“当前许多设计不佳的系统背后最大的共同因素，就是有一个急需工作量的设计团队。”
- en: Conway’s observations are more important in the maintaining of existing systems
    than they are in the building of new systems. Organizations and products both
    change, but they do not always change at the same pace. Figuring out whether to
    change the organization or change the design of the technology is just another
    scaling challenge.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Conway的观察在维护现有系统时比在构建新系统时更为重要。组织和产品都会发生变化，但变化的速度不一定相同。弄清楚是改变组织结构还是改变技术设计，是另一个规模扩展的挑战。
- en: Individual Incentives
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 个人激励
- en: How do software engineers get ahead? What does an engineer on one level need
    to accomplish for an organization to be promoted to another level? Such questions
    are usually delegated to the world of engineering managers and not incorporated
    into technical decisions. And yet, the answers absolutely have technical impacts.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程师如何获得晋升？一个工程师在某个级别上需要完成什么任务，才能被提升到更高的级别？这类问题通常被委派给工程经理的领域，而不会被纳入技术决策中。然而，答案显然会对技术产生影响。
- en: 'Most of us have encountered this in the wild: a service, a library, or a piece
    of a system that is inexplicably different from the rest of the applications it
    connects to. Sometimes this is an older component of the system reimplemented
    using a different set of tools. Sometimes this is a new feature. It’s always technology
    that was trendy at the time the code was introduced.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们大多数人都曾在实际中遇到过这种情况：一个服务、一个库，或是系统的一部分，与其连接的其他应用程序之间存在莫名其妙的差异。有时这是系统的一个较旧组件，使用一套不同的工具重新实现；有时是一个新功能。它总是当时流行的技术。
- en: When an organization has no clear career pathway for software engineers, they
    grow their careers by building their reputations externally. This means getting
    drawn into the race of being one of the first to prove the production-scale benefits
    of a new paradigm, language, or technical product. While it’s good for engineering
    teams to experiment with different approaches as they iterate, introducing and
    supporting new tools, databases, languages, or infrastructures increases the complexity
    of maintaining the system over time. One organization I worked for had an entire
    stable of custom-built solutions for things such as caching, routing, and message
    handling. Senior management hated this but felt their complaints—even their instructions
    that it stop—did little to course-correct. Culturally, the engineering organization
    was flat, with teams formed on an ad hoc basis. Opportunities to work on interesting
    technical challenges were awarded based on personal relationships, so the organization’s
    regular hack days became critical networking events. Engineering wanted to build
    difficult and complex solutions to advertise their skills to the lead engineers
    who were assembling teams.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个组织没有为软件工程师提供明确的职业发展路径时，他们通常通过在外部建立声誉来推动自己的职业生涯。这意味着他们会参与到成为第一个证明新范式、语言或技术产品在生产规模下优势的竞争中。尽管工程团队在迭代过程中试验不同的方法是好的，但引入和支持新的工具、数据库、语言或基础设施会增加系统在维护过程中的复杂性。我曾为一个组织工作过，他们为缓存、路由和消息处理等领域定制了大量的解决方案。高层管理对此深感反感，但他们的抱怨——甚至是要求停止这种做法——似乎并未起到太大的纠正作用。在文化上，工程组织呈扁平化，团队是按需成立的。能够参与有趣的技术挑战的机会是根据个人关系来分配的，因此组织中的定期黑客日变成了关键的社交活动。工程师们希望构建复杂而困难的解决方案，以便向正在组建团队的首席工程师展示他们的技能。
- en: Stern lectures about the importance of choosing the right technology for the
    job did not stop this behavior. It stopped when the organization hired engineering
    managers who developed a career ladder. By defining what the expectations were
    for every experience level of engineering and hiring managers who would coach
    and advocate for their engineers, engineers could earn promotions and opportunities
    without the need to show off.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对选择适合工作的技术的重要性进行严厉的讲解并没有停止这种行为。这种情况直到组织雇佣了开发职业晋升阶梯的工程经理才得到了遏制。通过明确每个经验级别工程师的期望，并聘请能够辅导并为工程师争取机会的管理者，工程师们可以在不需要炫耀的情况下获得晋升和机会。
- en: Organizations end up with patchwork solutions because the tech community rewards
    explorers. Being among the first with tales of documenting, experimenting, or
    destroying a piece of technology builds an individual’s prestige. Pushing the
    boundaries of performance by adopting something new and innovative builds it even
    more so.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 组织最终会得到拼凑的解决方案，因为技术社区奖励探索者。作为第一个记录、实验或摧毁一项技术的先行者会增加个人的声望。通过采用新颖创新的东西来推动性能的边界，声望会更高。
- en: Software engineers are incentivized to forego tried and true approaches in favor
    of new frontiers. Left to their own devices, software engineers will proliferate
    tools, ignoring feature overlaps for the sake of that one thing tool X does better
    than tool Y that is relevant only in that specific situation.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程师被激励放弃经过验证的方法，转而迎接新的前沿。如果任由软件工程师自行其是，他们会繁衍出各种工具，忽略功能重叠，只为那一个工具X在特定情况下比工具Y做得更好的特性。
- en: Well-integrated, high-functioning software that is easy to understand usually
    blends in. Simple solutions do not do much to enhance one’s personal brand. They
    are rarely worth talking about. Therefore, when an organization provides no pathway
    to promotion for software engineers, they are incentivized to make technical decisions
    that emphasize their individual contribution over integrating well into an existing
    system.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 集成良好、高效运作且易于理解的软件通常是低调的。简单的解决方案往往无法提升个人品牌，它们很少值得一谈。因此，当组织未能为软件工程师提供晋升路径时，他们会倾向于做出强调个人贡献而非与现有系统良好融合的技术决策。
- en: 'Typically, this manifests itself in one of three different patterns:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这种情况表现为三种不同的模式之一：
- en: Creating frameworks, tooling, and other abstraction layers to make code that
    is unlikely to have more than one use case theoretically “reusable”
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建框架、工具和其他抽象层，以使那些不太可能有多个使用场景的代码在理论上“可重用”
- en: Breaking off functions into new services, particularly middleware
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将功能拆分成新的服务，特别是中间件
- en: Introducing new languages or tools to optimize performance for the sake of optimizing
    performance (in other words, without any need to improve an SLO or existing benchmark)
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了优化性能而引入新语言或工具（换句话说，没有任何提升SLO或现有基准的需求，仅仅为了优化性能）
- en: Essentially, engineers are motivated to create named things. If something can
    be named, it can have a creator. If the named thing turns out to be popular, the
    engineer’s prestige increases, and her career will advance.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，工程师的动力来自于创造有名字的事物。如果某样东西能被命名，就能有一个创造者。如果这个命名的东西变得受欢迎，工程师的声望就会增加，她的职业生涯也会向前发展。
- en: This is not to say that good software engineers should never break off a new
    service or introduce a new tool or try a new language on a production system.
    There just needs to be a compelling reason why those actions benefit the system
    versus benefit the prospects of the individual engineer.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是说好的软件工程师就应该永远避免在生产系统中拆分新服务、引入新工具或尝试新语言。只是需要有一个令人信服的理由，说明这些行动是有益于系统的，而不是有益于个人工程师的前景。
- en: Most of the systems I work on rescuing are not badly built. They are badly maintained.
    Technical decisions that highlight individuals’ unique contributions are not always
    comprehensible to the rest of the team. For example, switching from language X
    to language Z may in fact boost memory performance significantly, but if no one
    else on the team understands the new language well enough to continue developing
    the code, the gains realized will be whittled away over time by technical debt
    that no one knows how to fix.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我所负责拯救的大多数系统并不是构建得很糟糕，而是维护得很糟糕。突出个人独特贡献的技术决策并不总是能被团队其他成员理解。例如，从语言X切换到语言Z可能确实显著提升了内存性能，但如果团队中的其他人对新语言不够了解，无法继续开发代码，那么随着时间推移，由于没人知道如何修复的技术债务，所获得的收益将逐渐被消耗掉。
- en: The folly of engineering culture is that we are often ashamed of signing up
    our organization for a future rewrite by picking the right architecture for right
    now, but we have no misgivings about producing systems that are difficult for
    others to understand and therefore impossible to maintain. This was a constant
    problem for software engineers answering the call to public service from organizations
    like US Digital Service and 18F. When modernizing a critical government system,
    when should the team build it using common private sector tools and train the
    government owners on said tools, and when should the solution be built with the
    tools the government worker already knew? Wasn’t the newest, greatest web application
    stack always the best option? Conway argued against aspiring for a universally
    correct architecture. He wrote in 1968, “It is an article of faith among experienced
    system designers that given any system design, someone someday will find a better
    one to do the same job. In other words, it is misleading and incorrect to speak
    of the design for a specific job, unless this is understood in the context of
    space, time, knowledge, and technology.”
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 工程文化的愚蠢之处在于，我们常常羞于通过选择当前合适的架构来为组织签下未来重写的任务，但对于生产那些让别人难以理解，因此无法维护的系统却没有任何顾虑。对于像美国数字服务和18F这样的组织来说，这一直是软件工程师在响应公共服务号召时的一个常见问题。在现代化关键政府系统时，团队应该在什么时候使用常见的私营部门工具并训练政府人员使用这些工具，什么时候应该使用政府工作人员已经掌握的工具来构建解决方案？难道最新最强大的Web应用栈不是最好的选择吗？Conway反对追求普适正确的架构。他在1968年写道：“经验丰富的系统设计师普遍信仰的一个观点是，给定任何系统设计，总有一天有人会找到一种更好的设计来完成同样的工作。换句话说，除非在空间、时间、知识和技术的背景下理解，否则谈论某个特定工作的设计是具有误导性和不准确的。”
- en: Minor Adjustments as Uncertainty
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微调作为不确定性
- en: Joel Spolsky once described rewriting software as the single worst strategic
    mistake any organization could make, but he attributed its nearly universal appeal
    to a clever maxim that *code is easier to write than read*.^([9](#c07-footnote-9))
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Joel Spolsky曾经形容重写软件是任何组织可能犯下的最糟糕的战略错误，但他将其几乎普遍的吸引力归因于一句巧妙的格言——*代码写起来比读起来容易*。^([9](#c07-footnote-9))
- en: And it’s true; code is easier to write than read. Nearly every software engineer
    has had the experience of pulling up an old project and finding code that she
    wrote virtually incomprehensible.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是真的；代码写起来比读起来容易。几乎每个软件工程师都有过翻看旧项目时，发现自己曾写的代码几乎无法理解的经历。
- en: But that doesn’t explain why we see the same behaviors with infrastructure,
    data storage, and other products that do not involve writing code.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并不能解释为什么我们会在基础设施、数据存储和其他不涉及写代码的产品中看到相同的行为。
- en: One of the major themes that influences how systems degrade over time is how
    terrible human beings are at probability. We tend to overestimate the likelihood
    of events recurring once we have already seen them and underestimate the likelihood
    of events that have not yet happened. Sidney Dekker, a professor of human factors
    and system safety, called the outcome of this cognition problem on system safety
    *drift*.^([10](#c07-footnote-10)) Systems do not generally fail all at once; they
    “drift” into failure via feedback loops caused by a desire to prevent failure.
    Let’s suppose a worker is given a set of checklists with necessary steps to maintain
    the system in good working order. If she misses a step and the system doesn’t
    fail immediately, her perception of risk changes. Skipping that step becomes not
    such a big deal, unlikely to cause failure. The more she skips the step, the more
    convinced of the safety of her action she becomes. She overlooks the possibility
    that she could have just gotten lucky. The more corners she cuts, the more prone
    to failure the system becomes.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 影响系统随时间退化的一个主要因素是人类在概率方面的弱点。我们往往高估已经发生过的事件再次发生的可能性，而低估尚未发生事件的可能性。人因学和系统安全学教授Sidney
    Dekker称这一认知问题对系统安全的影响为*漂移*。（^([10](#c07-footnote-10))）系统通常不会一下子完全失败；它们通过反馈回路逐渐“漂移”到失败，原因是想要防止失败。假设一名工人被给了一套检查清单，包含维持系统正常运行所需的步骤。如果她漏掉了一步且系统没有立即失败，她对风险的感知发生了变化。跳过这一步变得不再那么重要，看似不太可能导致失败。她越是跳过这一步，就越确信自己的行为是安全的。她忽视了自己可能只是运气好而已。她越是走捷径，系统就越容易发生故障。
- en: At the same time, if the system fails for a reason not represented in her checklist,
    she overestimates the odds of such a failure happening again. The system could
    have failed because there was a significant flaw, or it could have failed because
    of a random series of events unlikely to recur. Her ability to respond appropriately
    is determined by her ability to assess the probability of what has just happened
    correctly. If she overestimates, she will find new steps to add to the checklist
    to ensure that an unlikely failure does not recur. Over time, the checklists become
    more and more cumbersome and increase the likelihood that either she or one of
    her colleagues will skip a step.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，如果系统因她检查清单中没有涵盖的原因出现故障，她会高估此类故障再次发生的概率。系统可能因为存在重大缺陷而失败，或者可能因为一系列不太可能重现的随机事件而失败。她能否做出恰当反应取决于她是否能正确评估刚刚发生事件的概率。如果她高估了概率，她会为检查清单添加新步骤，以确保不太可能发生的故障不再重现。随着时间的推移，检查清单变得越来越繁琐，增加了她或她的同事跳过某些步骤的可能性。
- en: The systems we like to rewrite from scratch are usually the systems we have
    been ignoring. We don’t know how likely failure is because we pay attention to
    them only when they fail and forget about them otherwise. A hundred errors on
    a legacy system is not failure-prone if it handles two million requests over that
    period. When looking at legacy systems, we tend to overrepresent failures.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们喜欢从头开始重写的系统通常是我们一直忽视的系统。我们无法知道失败的可能性有多大，因为我们只有在系统故障时才会关注它们，其他时候则将它们忘记。一个遗留系统上有一百个错误，并不意味着它容易失败，尤其是当它在这段时间内处理了两百万个请求时。看待遗留系统时，我们往往会过度强调故障。
- en: The systems we like to rewrite from scratch also tend to be complex with many
    layers of abstraction and integrations. When we change something on them, it doesn’t
    always go smoothly, particularly if we’ve slipped up in our test coverage. The
    more problems we have making changes, the more we overestimate future failures.
    The more a system seems brittle, failure-prone, and just impossible to save, the
    more a full rewrite feels like an easier solution.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们喜欢从头开始重写的系统通常也很复杂，具有许多抽象层次和集成。当我们对其进行更改时，事情并不总是顺利进行，特别是当我们在测试覆盖方面出现疏漏时。我们在进行更改时遇到的问题越多，我们对未来故障的高估就越严重。系统看起来越脆弱、易失败，并且似乎无法挽救，完全重写就越像是一个更容易的解决方案。
- en: 'Our perception of risk cues up another cognitive bias that makes rewrites more
    appealing than incremental improvements on a working system: whether we are trying
    to ensure success or avoid failure. When success seems certain, we gravitate toward
    more conservative, risk-averse solutions. When failure seems more likely, we switch
    mentalities completely. We go bold, take more risks.^([11](#c07-footnote-11))'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对风险的感知会触发另一种认知偏差，使得重写比对一个运行良好的系统进行增量改进更具吸引力：我们是在努力确保成功还是避免失败。当成功似乎是确定的时，我们倾向于选择更保守、规避风险的解决方案。而当失败看起来更可能时，我们会完全转变心态，变得更加大胆，承担更多的风险。^([11](#c07-footnote-11))
- en: If we are judging odds correctly, this behavior makes sense. Why not authorize
    that multimillion-dollar rewrite if the existing system is doomed?
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们正确地评估了概率，这种行为是有道理的。既然现有系统注定会失败，为什么不批准那个数百万美元的重写呢？
- en: The problem is we’re most likely not judging the odds correctly. We’re overemphasizing
    failure that may be rare and underestimating both the time it will take to complete
    the rewrite and the performance gains of the rewrite itself. We are swapping a
    system that works and needs to be adjusted for an expensive and difficult migration
    to something unproven.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是，我们很可能并没有正确判断概率。我们过度强调了可能稀有的失败，低估了重写所需的时间和重写本身带来的性能提升。我们正在用一个仍在运作并且只需调整的系统，换成一个昂贵且复杂、没有经过验证的迁移方案。
- en: It’s the minor adjustments to systems that have not been actively developed
    in a while that create the impression that failure is inevitable and push otherwise
    rational engineers toward doing rewrites when rewrites are not necessary.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的细微调整，尤其是那些一段时间没有积极开发的系统，会让人产生失败不可避免的印象，并推动原本理性的工程师做出重写的决定，而重写在某些情况下并非必要。
- en: Organization Size and Communication
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组织规模与沟通
- en: Every working person has experienced how an organization’s size affects its
    patterns of communication. When small, an organization communicates in an open
    and fluid manner. It is possible for everyone in the organization to build a relationship
    with one another. As the organization grows, knowing everyone else becomes less
    and less feasible. Coordination requires trust. Given a choice, we prefer to base
    our trust on the character of people we know, but when we scale to a size where
    that is not possible anymore, we gradually replace social bonds with process.
    Typically this happens when the organization has reached the size of around 100
    to 150 people.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 每一个职场人士都体验过组织规模如何影响沟通模式。当组织较小时，沟通通常是开放和流动的，每个人都可以与其他人建立关系。随着组织的扩大，认识所有其他人变得越来越不可行。协调需要信任。在有选择的情况下，我们更倾向于基于我们熟悉的人的品格来建立信任，但当组织规模扩展到无法做到这一点时，我们逐渐用流程取代了社会联系。通常这发生在组织规模达到100到150人左右时。
- en: One of the benefits of microservices, for example, is that it allows many teams
    to contribute to the same system independently from one another. Whereas a monolith
    would require coordination in the form of code reviews—a personal, direct interaction
    between colleagues—service-oriented architecture scales the same guarantees with
    process. Engineers document contracts and protocols; automation is applied to
    ensure that those contracts are not violated, and it prescribes a course of action
    if they are.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，微服务的一个好处是，它允许多个团队独立地贡献于同一个系统。而单体架构则需要以代码审查的形式进行协调——即同事之间的个人、直接互动——而面向服务的架构通过流程扩展了相同的保证。工程师记录合同和协议；自动化被应用以确保这些合同不被违反，并且当违约时，系统会指示行动方案。
- en: For that reason, engineers who want to “jump ahead” and build something with
    microservices from the beginning often struggle. The level of complexity and abstraction
    is out of sync with the communication patterns of the organization.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，想要“提前”从一开始就使用微服务构建的工程师往往会遇到困难。复杂性和抽象层次与组织的沟通模式不匹配。
- en: Manager Incentives
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 经理的激励
- en: An engineering manager is a strange creature in a technical organization. How
    should we judge a good one from a bad one? Unfortunately, far too often managers
    advance in their careers by managing more people. And if the organization isn’t
    properly controlling for that, system design will be overcomplicated by the need
    to broadcast importance.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 工程经理在技术型组织中是一个奇特的存在。我们该如何评判一个好的经理和一个坏的经理呢？不幸的是，经理们往往通过管理更多的人来晋升。如果组织没有对这一点进行适当的控制，系统设计将会因需要传达重要性而变得过于复杂。
- en: Opportunities to go from being an engineering manager to a senior engineering
    manager come up from time to time as an organization grows and changes. It’s the
    difference between handling one team and handling many. Managers leave, new teams
    form, and existing teams grow past their ideal sizes. A good manager could easily
    earn those opportunities in the normal course of business. Going from senior manager
    to director, though, is more difficult. Going from director to vice president
    or higher is even more so. It takes a long time for an organization to reach that
    level of growth organically.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 随着组织的成长和变化，偶尔会出现从工程经理晋升为高级工程经理的机会。这是处理一个团队和处理多个团队之间的区别。经理离职，新团队成立，现有团队的规模也超出了理想的范围。一个优秀的经理可以轻松地在正常的工作过程中获得这些机会。然而，从高级经理晋升为总监则更具挑战。再从总监晋升为副总裁或更高职位则更加困难。一个组织要通过自然成长达到这一层级需要很长时间。
- en: Organizations that are unprepared to grow talent end up with managers who are
    incentivized to subdivide their teams into more specialized units before there
    are either enough people or enough work to maintain such a unit. The manager gets
    to check off the career-building experience of running multiple teams, hiring
    more engineers, and taking on more ambitious projects, and the needs of the overall
    architecture are ignored.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 那些没有为人才成长做好准备的组织，最终会出现一些经理，他们有动机在没有足够人员或足够工作来维持这样一个小单位之前，就将团队划分为更多的专门化单元。这些经理可以勾选自己在管理多个团队、招聘更多工程师、承担更具雄心的项目等方面的职业发展经历，而整体架构的需求却被忽视了。
- en: Scaling an organization before it needs to be scaled has similar consequences
    to scaling technology before it needs to be scaled. It restricts your future technical
    choices. A complex architecture means the organization must successfully anticipate
    a number of future requirements and determine how code should be best abstracted
    to create shared services based on those predictions. Rarely are all of those
    predictions right, but once a shared service is deployed, changing it is difficult.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有真正需要扩展的情况下扩展组织，和在技术尚未需要扩展时就扩展技术，产生的后果是相似的。这会限制你未来的技术选择。复杂的架构意味着组织必须成功地预见到许多未来的需求，并确定如何根据这些预测最佳地抽象代码，以创建共享服务。这些预测很少能完全正确，但一旦共享服务部署上线，改变它就变得非常困难。
- en: In the same way, managers sometimes subdivide their team before there is need
    to do so. When this happens, they are making predictions about future needs that
    may or may not come true. In my last role, our director of engineering decided
    the new platform we were building needed a dedicated team to manage data storage.
    Predictions about future scaling challenges supported her conclusions, but to
    get the head count for this new team, she had to cut it from teams that were working
    on the organization’s existing scaling challenges. Suddenly, new abstractions
    around data storage that we didn’t need yet were being developed, while systems
    that affected our SLAs had maintenance and updates deferred.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，经理有时会在没有必要时就将团队细分。当这种情况发生时，他们实际上是在预测未来可能出现的需求，而这些需求可能会成真，也可能不会。在我上一个职位上，我们的工程总监决定我们正在构建的新平台需要一个专门的团队来管理数据存储。关于未来扩展挑战的预测支持了她的结论，但为了获得这个新团队的人员配备，她不得不从已经在处理组织现有扩展挑战的团队中裁减人员。突然间，我们开始开发一些围绕数据存储的新抽象，而这些抽象实际上我们并不需要，而影响我们服务水平协议（SLA）的系统则被推迟了维护和更新。
- en: Carrying existing initiatives to completion was not as attractive of an accomplishment
    as breaking new ground. But the problem with designing team structure around the
    desired future state of the technology is if it doesn’t come true, the team is
    thrown into the chaos of a reorganization.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 完成现有的项目并不如开辟新天地那样具有吸引力。但围绕技术的理想未来状态来设计团队结构的问题是，如果这种理想状态没有实现，团队就会被推入重组的混乱之中。
- en: 'Designing a Team: Applications of Conway’s Law'
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计团队：康威定律的应用
- en: The challenge of applying Conway’s law in a proactive and positive manner is
    that divisions of work on technical projects can shift depending on the technical
    challenge being addressed.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 积极而有效地应用康威定律的挑战在于，技术项目中的工作分配可能会根据正在解决的技术难题而发生变化。
- en: 'Let’s say we have an organization building a system that is composed of three
    web services. Each service has its own repository of code, its own machine images,
    and its own deployment schedule. Each has a three-tier structure: an application
    layer, a data access layer, and a frontend. In the beginning, the frontend and
    the application are logically separate but hosted in the same code repository
    for convenience. The frontend is just HTML and some CSS and JavaScript files.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个组织，正在构建一个由三个Web服务组成的系统。每个服务都有自己的代码库、机器镜像和部署计划。每个服务都有三层结构：应用层、数据访问层和前端。在开始时，前端和应用是逻辑上分开的，但为了方便，它们托管在同一个代码库中。前端只是HTML文件和一些CSS、JavaScript文件。
- en: Our engineering teams probably reflect this structure. For each service, we
    have a frontend person and some backend people. We want the look and feel of these
    services to be the same because they are one system, so we have a design org that
    is separate from the three development teams, but it produces style guides and
    assets used by all of them. Maybe we assign a specific point of contact on the
    design team for each engineering team. We do the same thing for our operations
    and security groups. Their work is overarching and common to all teams, and we
    want consistent implementation. We don’t want each engineering silo to reinvent
    the wheel.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的工程团队可能反映了这种结构。对于每个服务，我们都有一名前端人员和一些后端人员。我们希望这些服务的外观和感觉保持一致，因为它们是一个系统，因此我们有一个与三个开发团队分开的设计团队，但它会产生所有团队共享的样式指南和资源。也许我们为每个工程团队指定设计团队的具体联系人。我们对运维和安全团队也做同样的事。他们的工作是跨部门的，并且适用于所有团队，我们希望保持一致的实施。我们不希望每个工程孤岛都重复造轮子。
- en: Now let’s say we want to start using a frontend framework like React, Angular,
    or Vue.js. We still want each service to have the same look and feel, but we also
    want to minimize duplicate efforts. They should reuse UI components. Who writes
    that code? Where does that code live? Do we move the frontend engineers out of
    the product engineering groups and into a separate group like the designers, security
    engineers, and operations people, or do we keep them where they are and establish
    a matrix division to handle the shared development work?
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们想开始使用像React、Angular或Vue.js这样的前端框架。我们仍然希望每个服务有相同的外观和感觉，但我们也希望减少重复的工作。它们应该重用UI组件。谁来编写这些代码？这些代码存放在哪里？我们是把前端工程师从产品工程团队中调出来，放到像设计师、安全工程师和运维人员这样的独立小组，还是将他们留在原地并建立矩阵式分工来处理共享的开发工作？
- en: 'The problem with seeing Conway’s law as prescriptive is that technology is
    filled with little shifts in perception like this. The technology in our example
    has not fundamentally changed, but our groupings of what belongs with what have
    changed. We could tell the same story in reverse: what if we want to transition
    away from a traditional operations team to a DevOps model? Do our operations people
    now get moved to the product engineering teams? Do backend engineers learn the
    DevOps tools with operations acting as an oversight authority? Do we keep operations
    where it is and just ask them to automate?'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 将康威定律视为规定性原则的问题在于，技术中充满了像这样的感知小变化。我们例子中的技术并没有从根本上发生变化，但我们对“什么属于什么”的分组发生了变化。我们也可以反过来讲这个故事：如果我们想从传统的运维团队过渡到DevOps模型怎么办？我们的运维人员是否会被调动到产品工程团队？后端工程师是否会学习DevOps工具，而运维则充当监督职能？我们是否将运维保持在原地，仅要求他们进行自动化？
- en: Reorgs Are Traumatic
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组织重组是创伤性的
- en: The reorg is the matching misused tool of the full rewrite. As the software
    engineer gravitates toward throwing everything out and starting over to project
    confidence and certainty, so too does the software engineers’ manager gravitate
    toward the reorg to fix all manner of institutional ills.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 组织重组是全面重写的常见误用工具。正如软件工程师倾向于推翻一切重新开始，以展示信心和确定性一样，软件工程师的经理也倾向于通过重组来解决所有形式的制度性问题。
- en: And like a full rewrite, sometimes this is the appropriate strategy, but it
    is not nearly the right strategy as often as it is used. Reorgs are incredibly
    disruptive. They are demoralizing. They send the message to rank and file engineers
    that something is wrong—they built the wrong thing or the product they built doesn’t
    work or the company is struggling. It increases workplace anxiety and decreases
    productivity. The fact that reorgs almost always end up with a few odd people
    out who are subsequently let go exacerbates the issue.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 就像全面重组一样，这有时确实是合适的策略，但它并不像常用时那样是最合适的策略。重组极具破坏性，它令人士气低落。它传递给普通工程师的信息是，某些事情出了问题——他们做错了什么，或者他们做的产品无法正常工作，或者公司正面临困境。这会增加工作场所的焦虑感，并降低生产力。重组几乎总是以一些“被淘汰”的人最终被解雇作为结局，这种情况加剧了问题。
- en: They are also easy to get wrong, creating new silos where information once flowed
    freely. Organizations are almost always a little behind in capturing and documenting
    the state of things in flight. Reorgs orphan in-progress initiatives, particularly
    the ones focused on long-term maintenance, resulting in information loss and follow-ups
    dropped.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 重组也容易弄错，导致重新建立信息孤岛，而这些地方曾经是信息自由流动的。组织几乎总是稍微滞后于捕捉和记录正在进行的事情。重组使正在进行的项目“孤立无援”，尤其是那些专注于长期维护的项目，导致信息丢失和后续工作被搁置。
- en: I think of reorgs as major surgery. If something is seriously wrong, it’s worthwhile
    to risk it, but you wouldn’t trust a doctor who wanted to open you up because
    a kidney was just an inch too far to the right. Similarly, you shouldn’t hire
    managers who want to reorg because they read a blog post that said engineering
    teams work better when structured this particular way or that particular way.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我把重组看作是重大手术。如果有什么问题非常严重，冒险一试是值得的，但你不会相信一个医生因为肾脏稍微偏右就想为你开刀。同样，你也不应该雇佣那些因为看了一篇博客文章，说工程团队在某种结构下运作更好的人，而去做重组。
- en: Sometimes an organization doesn’t grow in an orderly fashion, and as a result,
    teams end up owning a combination of things that don’t go together or sharing
    ownership of things that more properly should have one owner. These are the sorts
    of situations where reorgs make sense.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 有时一个组织的成长并不按部就班，结果是团队最终拥有一些不相配的东西，或者共同拥有本应只有一个负责人管理的事务。这些情况是重组合适的场合。
- en: Conway’s law is a tendency, not a commandment. Large, complex organizations
    can develop fluid and resilient communication pathways; it just requires the right
    leadership and the right tooling. Reorgs should be undertaken only in situations
    where an organization’s structure is completely and totally out of alignment with
    its implementation.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 康威定律是一种趋势，而不是一种命令。大型复杂组织能够开发出灵活且具有韧性的沟通渠道；这只需要合适的领导力和合适的工具。只有在组织结构完全与其执行方式不匹配时，才应该进行重组。
- en: Finding the Right Leadership
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 找到合适的领导力
- en: Modernization projects are ultimately about transitions. You are moving resources,
    adjusting processes, and reimagining implementation. The teams that make sense
    in the beginning do not always make sense at the end.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现代化项目归根结底是关于转型的。你正在调配资源、调整流程并重新构想实施方式。开始时合适的团队，最终未必仍然适合。
- en: To find the right leadership, look for people who have been successful in a
    wide variety of different contexts—old systems, new systems, big bureaucracies,
    and small startups. Do not hire aspirationally. Do not hire people whose only
    experiences are working in companies that reflect your desired end state. Do not
    hire based on what you wish were true about your organization. This is a pretty
    common mistake. Organizations that want to grow big recruit executives from big
    organizations. Organizations that want to migrate to the cloud recruit executives
    who supervised cloud products.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到合适的领导力，寻找那些在各种不同环境中都取得过成功的人——无论是旧有系统、新系统、大型官僚机构，还是小型初创公司。不要抱有幻想去招聘。不要只招聘那些在与你希望达成的最终状态相符的公司工作过的人。不要根据你希望组织具备的特质来招聘。这是一个相当常见的错误。想要扩展的组织往往从大公司中招募高管，想要迁移到云端的组织则从管理云产品的高管中招聘。
- en: Transitions are inherently ambiguous, and the most important characteristic
    of any leader who steps into a transition is the ability to adapt to the changing
    conditions that ambiguity opens up. You can assess those skills in interviews,
    but the best indicator is usually a candidate’s career path. Candidates who are
    good at adapting have experiences of different sizes and industries on their résumés.
    They might have done nonprofit or government work. They might have dipped their
    toes into different careers or roles. They might have left the working world for
    a few years and then successfully come back.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡本质上是模糊的，任何进入过渡阶段的领导者最重要的特质就是适应模糊带来的变化的能力。你可以在面试中评估这些技能，但最好的指标通常是候选人的职业发展轨迹。善于适应的候选人在简历上会有不同行业和规模的经验。他们可能曾做过非营利或政府工作。他们可能尝试过不同的职业或角色。他们可能曾暂时离开工作世界，之后成功回归。
- en: Candidates who have spent seven or eight years essentially in the same type
    of organization may bring a lot to the table, but they might also be too attached
    to one way of doing things. They might not understand why certain approaches work
    in this situation but not that situation. They might be bureaucratic, risk-averse,
    and not willing to rise to the challenge of a different environment.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一种类型的组织中工作了七八年的候选人，可能会带来很多有价值的经验，但他们也可能过于依赖某一种做事方式。他们可能不理解为什么某些方法在这种情况下有效，而在那种情况下却无效。他们可能具有官僚主义倾向，风险厌恶，并且不愿意迎接不同环境下的挑战。
- en: Transitions are all about change, but determining *what* should change and *when*
    it should change are significant questions. We didn’t get where we are all at
    once. Why should we get anywhere else that way? Leaders who are comfortable with
    ambiguity have a higher likelihood of figuring out where all the interim phases
    are between the starting point and the end state.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡是关于变化的，但确定*什么*应该变化和*何时*应该变化是重要的问题。我们不是一蹴而就地走到今天的地方。为什么我们应该以这种方式去到其他地方呢？能够适应模糊不清的领导者更有可能弄清楚从起点到最终状态之间的所有中间阶段。
- en: 'Exercise: The Smallest Testable Unit'
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习：最小可测试单元
- en: I developed this exercise for planning failure drills (better known to some
    software engineers as chaos experiments). I eventually ended up repurposing it
    as an interview question to assess a candidate’s ability to design a road map
    for a transition.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我开发这个练习是为了规划故障演练（一些软件工程师称之为混乱实验）。最后，我将它重新用于面试问题，以评估候选人设计过渡路线图的能力。
- en: 'We start with a large goal we want to reach. For example, suppose we have a
    web application where secrets are kept in a plaintext configuration file. Three
    decades ago, that would have been the right way to build an application, but now
    it’s not secure enough. Any number of solutions will improve security, but the
    organization may not be able to use all of them. This is a typical problem with
    legacy modernizations: the ideal solution is dependent on conditions that are
    either not present or not possible. Leaders have to decide whether to compromise
    on another solution or invest time and energy resolving the dependencies of the
    preferred solution.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个想要实现的大目标开始。例如，假设我们有一个 web 应用，其中的秘密存储在一个明文配置文件中。三十年前，这种方式可能是构建应用程序的正确方式，但现在它的安全性不足。许多解决方案都可以提高安全性，但组织可能无法使用所有这些解决方案。这是遗留现代化中的典型问题：理想的解决方案依赖于不具备或无法实现的条件。领导者必须决定是否妥协使用其他解决方案，或者投入时间和精力解决首选解决方案的依赖问题。
- en: 'You might be familiar with the expression *yak shaving*. It’s when every problem
    has another problem that must be solved before it can be addressed. In a way,
    the smallest testable unit exercise is a yak-shaving exercise. You advance through
    each stage by asking the question “What do we need to do this, and how can we
    test that we have it?” For the previous example, the road map might look like
    this:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能熟悉“*剃 yak*”这个表达。它指的是每个问题都有另一个必须先解决的问题才能处理的情况。某种程度上，最小可测试单元的练习就是一个剃 yak 的练习。你通过问“我们需要什么来做到这一点？我们如何测试它是否具备？”来推进每个阶段。对于前面的例子，路线图可能长这样：
- en: We need to move secrets to a secure secret management solution. To do that,
    we need to know how many secrets we have, where they are in code, and who or what
    needs to use them.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要将机密信息转移到一个安全的秘密管理解决方案中。为此，我们需要知道我们有多少个秘密，它们在代码中的位置，以及谁或什么需要使用它们。
- en: We can figure out who needs to use our current secrets by carefully logging
    access to them. To do that, we need a way to aggregate logs and search them. We
    should take care not to log actual secrets, just the request for them.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以通过仔细记录访问现有机密的人来弄清楚谁需要使用我们的当前机密。为此，我们需要一种聚合日志并搜索它们的方法。我们应该小心，不要记录实际的机密，只记录请求机密的日志。
- en: We can test whether we have the ability to aggregate and search logs by having
    various parts of the application write distinctive messages to the logs and check
    where those messages end up. To do that, we need access to the application source
    code.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以通过让应用程序的不同部分将独特的消息写入日志，并检查这些消息最终会出现在哪里来测试我们是否有能力聚合和搜索日志。为此，我们需要访问应用程序的源代码。
- en: We can test whether we have access to the source code by finding the repository,
    reading the code, and attempting to submit a change to it. To do that, we need
    some kind of version control solution.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以通过找到代码库、阅读代码并尝试提交更改来测试我们是否能访问源代码。为此，我们需要某种版本控制解决方案。
- en: And so on, and so forth.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如此类，等等。
- en: Done well, the candidate plans the roadmap out backward, starting at the end
    state and identifying smaller and smaller units of change. With each step, we
    are designing tests to find weaknesses in the organization’s operational excellence
    that we can resolve. It’s important that our roadmap is structured around proving
    we have something with a simple test, rather than steps that assert we do. On
    large projects, it’s easy for people to become confused or misreport the ground
    truth. It is useful to know how a leader would construct a test to verify information.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果做得好，候选人会从最终状态开始，逆向规划路线图，识别出越来越小的变革单元。每一步，我们都在设计测试，找出我们可以解决的组织运营卓越中的弱点。重要的是，我们的路线图应围绕通过简单测试证明我们已经拥有某些东西，而不是断言我们已经具备某些东西的步骤来构建。在大型项目中，人们容易感到困惑或错误报告真实情况。了解领导者如何构建测试以验证信息是非常有用的。
- en: A leader with low tolerance for ambiguity either doesn’t see these blockers
    or will not acknowledge them, so she sends a top-down directive mandating the
    new solution. Engineering whips up a hack or a workaround to handle the blockers
    or else just ignores the top-down directive, and efforts to improve the legacy
    system stall.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 一位对模糊性容忍度低的领导者要么看不见这些障碍，要么不承认它们，因此她会下达一个自上而下的指令，要求实施新解决方案。工程团队可能会迅速做出修补或变通方案来处理这些障碍，或者直接忽视这一自上而下的指令，导致改进遗留系统的努力停滞不前。
- en: Structuring the Team to Account for Past Failure
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组织团队以应对过去的失败
- en: Legacy modernizations are never about just one team or one leader. Legacy systems
    survive because they are important; processes tend to grow around important systems,
    and organizations tend to grow around those processes. Even if you chose to run
    one team specifically for the modernization itself, the work of that one team
    will rely on and influence other teams.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留系统的现代化从来都不是关于一个团队或一个领导者的。遗留系统之所以能够存活，是因为它们很重要；重要的系统往往会带来相应的流程，组织也会围绕这些流程发展。即使你选择专门成立一个团队来进行现代化改造，该团队的工作也会依赖于并影响其他团队。
- en: 'The three effective structures for modernization are as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现代化的三种有效结构如下：
- en: '**Teams that mirror existing components**. If there’s a short history of failure,
    you may be able to trust the current division of labor to carry the day. The teams
    consist of either all or parts of existing teams, so coordination between them
    takes the form of a cross-functional meeting group populated by either the leads
    of each existing component or someone appointed by the component to represent
    them. More than any other structure, this option relies heavily on interpersonal
    connections. If cliques and rivalries have begun to form in the organization,
    it will be hard to keep the group focused.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**复制现有组件的团队**。如果过去有失败的短暂历史，你可能能够依赖当前的劳动分工来推动进展。团队由现有团队的全部或部分组成，因此它们之间的协调以跨职能会议小组的形式进行，该小组由每个现有组件的负责人或由组件指定的代表组成。与任何其他结构相比，这种选项高度依赖于人际关系。如果组织中已经开始形成小圈子和敌对关系，保持团队的专注将变得困难。'
- en: '**Lead team and subgroups**. With this model, a lead team shapes the high-level
    view of the modernization effort and then dispatches tasks to the subgroups who
    are empowered to make any and all decisions on the details of how they implement
    those instructions. The more a particular modernization project has a track record
    of failure, the more I like to form a distinction between our effort and business
    as usual. That means this structure can take the shape of an architecture group
    advising business components (which we might already have set up), or we can pull
    people off their normal teams for a short period of time. It is better to avoid
    slotting the same people into the same roles, and you will likely see an immediate
    boost of motivation provided the shuffling of roles is made in good faith and
    the objectives are clear.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**领导团队和子小组**。在这种模式下，领导团队制定现代化努力的高层次视图，然后将任务分配给各子小组，子小组有权做出关于如何执行这些指令的所有细节决策。一个现代化项目的失败记录越多，我就越倾向于将我们的努力与常规业务区分开来。这意味着该结构可以采取架构组为业务部门提供建议的形式（我们可能已经设置了这个），或者我们可以暂时将人员从其正常团队中调出。最好避免将相同的人分配到相同的角色，通常如果角色调动是出于良好意图且目标明确，你会看到动力立即得到提升。'
- en: 'As I mentioned in Chapter 6, nothing says you’re serious about accomplishing
    something more effectively than changing people’s scenery. Consult the “Solution:
    Code Yellow” on page 116 for more information on how this structure can work.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在第六章提到的，想要更有效地完成某事，最直接的方式就是改变人们的环境。有关这种结构如何工作的更多信息，请参考第116页的“解决方案：黄色警戒”。
- en: '**One embedded team**. When the history of failure is long, sometimes the best
    option is to embed people within existing teams for the sole purpose of implementing
    solutions. In this model, one team decides on the plan and then dispatches its
    members to different components around the organization to work on the solution.
    The trick to getting this right is identity. The members of the embedded team
    must have strong bonds of camaraderie with each other. They must feel like one
    team. They should treat their host teams with compassion and empathy, but they
    also should consider the host teams more like clients or customers rather than
    as peers.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**一个嵌入式团队**。当失败的历史较长时，有时最佳的选择是将人员嵌入到现有团队中，专门负责实施解决方案。在这种模式下，一个团队决定计划，然后将其成员分派到组织中不同的部门，负责解决方案的实施。做到这一点的关键是身份认同。嵌入式团队的成员之间必须有强烈的同袍情谊。他们必须感受到自己是一个团队。他们应该以同情和共情的态度对待主办团队，但同时也应该将主办团队视为客户或顾客，而不是同行。'
- en: This is not the same as pulling representatives from every team into a joint
    committee. In the committee solution, the individual is bonded to her home team,
    while having no particular attachment to her colleagues on the committee. With
    an embedded team, the dynamic should be reversed.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这与从每个团队中抽调代表组成联合委员会不同。在委员会解决方案中，个人与她所在的团队有联系，而对委员会上的同事没有特别的依赖。在嵌入式团队中，动态应该是相反的。
- en: Implementing these three structures is an exercise in itself to help figure
    out organically how the organization should self-organize around the new system
    once completed. Conway’s law is ultimately about communication and incentives.
    The incentive side can be covered by giving people a pathway to prestige and career
    advancement that complements the modernization effort. The only way to design
    communication pathways is actually to give people something to communicate about.
    In each case, we allow the vision for the new organization to reveal itself by
    designing structures that encourage new communication pathways to form in response
    to our modernization challenges. As the work continues, those communication pathways
    begin to solidify, and we can begin documentation and formalizing new teams or
    roles. In this way, we sidestep the anxiety of reorganizing. The workers determine
    where they belong based on how they adapt to problems; workers typically left
    out are given time and space to learn new skills or prove themselves in different
    roles, and by the time the new organization structure is ratified by leadership,
    everyone already has been working that way for a couple months.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 实施这三种结构本身就是一项练习，旨在帮助有机地找出组织在新系统完成后如何围绕它进行自我组织。康威定律最终与沟通和激励有关。激励方面可以通过为人们提供一条与现代化工作相辅相成的荣誉和职业发展道路来实现。设计沟通路径的唯一方法实际上是给人们一些值得沟通的内容。在每种情况下，我们通过设计能够鼓励新沟通路径形成的结构，来让新组织的愿景逐渐显现出来，以应对我们的现代化挑战。随着工作的继续，这些沟通路径开始逐渐固化，我们可以开始文档化，并正式确定新的团队或角色。通过这种方式，我们避免了重组的焦虑。工人们根据他们如何适应问题来决定自己的位置；那些通常被忽视的工人会得到时间和空间来学习新技能或证明自己可以担任不同角色，而在新组织结构由领导层批准之前，每个人已经在这种方式下工作了几个月。
- en: Choose your modernization team structure based on how much organizational change
    you think will be needed to make the new system maintainable.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你认为为了使新系统可维护所需的组织变革程度，选择你的现代化团队结构。
- en: Leaving teams as they are supposes that the abstractions of the new system will
    match those of the old system. There will not be new responsibilities; there will
    not be new roles. The only things that change from the old system to the new are
    implementation details like language or tool selection. Many migrations will look
    like this.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 保持团队不变的假设是新系统的抽象将与旧系统相匹配。不会有新的职责，也不会有新的角色。从旧系统到新系统唯一的变化是像语言或工具选择这样的实现细节。许多迁移将看起来像这样。
- en: Having a lead team with subgroups assumes that there will be overarching problems
    that no one existing team is empowered to fix or has all the necessary information
    to fix. By the time the new system is completed, new teams may have developed
    around those issues. For example, the organization might realize that new services
    need to be developed or that to enforce good practices across the engineering
    organization, they need internal tooling. With this structure, we know some parts
    of our engineering group will remain the same, and some parts of it will change,
    but we don’t know exactly how.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个由子团队组成的领导团队意味着将会有一些跨越性的问题，现有的团队无法解决这些问题，或者没有足够的信息来解决这些问题。在新系统完成时，可能会围绕这些问题发展出新的团队。例如，组织可能会意识到需要开发新的服务，或者为了在整个工程组织中推行良好的实践，他们需要内部工具。在这种结构下，我们知道工程团队的某些部分将保持不变，而某些部分将发生变化，但我们并不清楚具体会怎么变。
- en: Finally, the embedded team sets the precedent of injecting expertise as needed
    into other teams. I use this structure when the goal state of the new system is
    significantly different from the old system. When there’s that much change, technology
    and practices that are completely foreign to existing engineers usually are being
    introduced. Moving off mainframes, shutting down a data center in favor of the
    cloud, rolling out SRE, or incorporating orchestration are all examples of modernization
    challenges where there is likely to be a skills gap on the existing teams. The
    expert being injected to advise and assist will start the process of forming new
    teams by figuring out how the work the old team needs to do gets split up. For
    example, if the modernization effort involves a new piece of technology, not everyone
    on the team will need to reach the same proficiency level with it. Rather than
    a senior manager deciding who will go where, the organization lets the existing
    team work on it and sees who develops an aptitude.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，嵌入式团队为将专业知识根据需要注入到其他团队中树立了先例。当新系统的目标状态与旧系统有显著不同时，我会使用这种结构。当发生如此大的变化时，通常会引入对现有工程师来说完全陌生的技术和实践。从主机转移到云端、关闭数据中心并转向云端、推出SRE或引入编排，都是现代化挑战的例子，这些挑战通常会导致现有团队出现技能差距。被注入的专家将开始通过弄清楚旧团队需要做的工作如何分配，来推动新团队的形成。例如，如果现代化工作涉及一项新技术，并非每个团队成员都需要达到同样的熟练度。与其让高级经理决定谁去哪里，组织应该让现有团队自己去做，并看看谁能发展出相应的能力。
- en: What you don’t want to do is draw a new organization chart based on your vision
    for how teams will be arranged with the new system. You don’t want to do this
    for the same reason that you don’t want to start product development with everything
    designed up front. Your concept of what the new system will look like will be
    wrong in some minor ways you can’t possibly foresee. You don’t want to lock in
    your team to a structure that will not fit their needs.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你不想做的事情是根据你对新系统中团队如何安排的愿景绘制一张新的组织结构图。你不想这么做的原因和你不想在产品开发初期就事先设计好一切的原因一样。你对新系统外观的构想在某些细微的方面是错误的，而这些错误是你无法预见的。你不想把你的团队锁定在一个无法满足他们需求的结构中。
- en: Instead, ask yourself who needs to collaborate with whom for various stages
    of the modernization project to work, and pick a structure that makes this communication
    easy.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，你应该问自己，哪些人需要在现代化项目的不同阶段之间进行合作，并选择一个使这种沟通变得容易的结构。
- en: 'Exercise: In-Group/Out-Group'
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习：组内/组外
- en: Who needs to communicate with whom may not be clear when you get started. This
    is an exercise I use to help reveal where the communication pathways are or should
    be. I give everyone a piece of paper with a circle drawn on it. The instructions
    are to write down the names of the people whose work they are dependent on inside
    the circle (in other words, “If this person fell behind schedule, would you be
    blocked?”) and the names of people who give them advice outside the circle. If
    there’s no one specific person, they can write a group or team name or a specific
    role, like frontend engineer, instead.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始时，谁需要与谁沟通可能并不明确。这是我用来帮助揭示沟通路径在哪里或应该在哪里的一个练习。我给每个人发一张纸，上面画着一个圆圈。说明是把他们依赖的人的名字写在圆圈里（换句话说，“如果这个人落后了，你会被阻塞吗？”），把给他们建议的人的名字写在圆圈外。如果没有特定的人，他们可以写下一个小组或团队的名字，或者是一个特定角色，比如前端工程师。
- en: Then I compare the results across each team. In theory, those inside the circle
    are people with whom the engineer needs to collaborate closely. Each result should
    resemble that engineer’s actual team with perhaps a few additions or deletions
    based on current issues playing out. Outside the circle should be all the other
    teams. Experts not on the team should be seen as interchangeable with other experts
    in the same field.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我会对每个团队的结果进行比较。从理论上讲，圈内的人是工程师需要密切合作的对象。每个结果应该与该工程师的实际团队相似，也许会有一些基于当前问题的增减。圈外应该是所有其他团队。团队外的专家应该被视为与同一领域的其他专家可以互换的。
- en: Small variations will exist from person to person, but if the visualizations
    that people produce don’t look like their current teams, you know your existing
    structure does not meet your communication needs.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人的差异会存在一些小变化，但如果人们所画的图像看起来和他们当前的团队不一样，那么你就知道你现有的结构无法满足你的沟通需求。
- en: You can modify this exercise to look at the communication needs of the new system
    instead of the existing one by focusing the research question on a future work
    stream. Instead of which people might be blockers or advisors generally, ask people
    to visualize the in-group and out-group in terms of a specific modernization task.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以修改这个练习，聚焦于未来工作流的研究问题，而非现有系统的沟通需求。不要仅仅问哪些人可能是阻碍者或顾问，而是要求人们根据特定的现代化任务，想象内群体和外群体的划分。
- en: Takeaways
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要点
- en: 'This chapter covers a lot of ground. Design thinking is a rich landscape with
    lots of insight and strategy of value to the task of legacy modernization. I have
    tried to demonstrate enough of that value to encourage you to bring a designer
    into your fold if you don’t already have one. To review, here are the takeaways
    you should have from this chapter:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了很多内容。设计思维是一个丰富的领域，包含了许多对遗留系统现代化任务有价值的洞察和策略。我尽力展示了足够的价值，以鼓励你在没有设计师的情况下，邀请设计师加入你的团队。回顾一下，这里是你应该从本章得到的要点：
- en: Design is problem setting. Incorporating it into your process will help your
    teams become more resilient.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计是问题设定。将其融入到你的过程中将有助于你的团队变得更加韧性。
- en: By themselves, technical conversations tend to incentivize people to maintain
    status by criticizing ideas. Design can help mitigate those effects by giving
    conversations the structure of a game and a path to winning.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单纯的技术对话往往会激励人们通过批评想法来维持现状。设计可以通过赋予对话一种游戏的结构和通向胜利的路径来帮助缓解这些效应。
- en: Legacy modernizations are ultimately transitions and require leaders with high
    tolerance for ambiguity.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遗留系统现代化最终是一个过渡过程，需要有较高容忍模糊性的领导者。
- en: Conway’s law doesn’t mean you should design your organization to look like the
    technology you want. It means you should pay attention to how the organization
    structure incentivizes people to behave. These forces will determine what the
    technology looks like.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 康威定律并不意味着你应该将组织设计成你想要的技术样貌。它意味着你应该注意组织结构如何激励人们的行为。这些力量将决定技术的样子。
- en: Don’t design the organization; let the organization design itself by choosing
    a structure that facilitates the communication teams will need to get the job
    done.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要设计组织结构；让组织通过选择一种能够促进团队沟通的结构来自我设计，以便完成工作。
- en: In the next chapter, I’ll continue to explore the concept of communication by
    tackling the issue of breaking changes and how to keep them from blocking progress
    forward.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我将继续探索沟通的概念，解决破坏性变更的问题，以及如何防止这些变更阻碍前进的步伐。
