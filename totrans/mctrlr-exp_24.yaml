- en: '**24  Clipper Chip Diffusion ROM**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**24  克利珀芯片扩散ROM**'
- en: In the Nineties, the Clinton administration had an obsession with key escrow
    cryptography. They wanted to provide American citizens with cryptography that
    the US government itself could break, but in a way that excluded foreign governments
    from the same privilege. This was called the Clipper chip in general, and in this
    chapter we’ll focus on the PCMCIA generation of that chip, known as the MYK82
    or Fortezza card. We’ll dump its firmware and extract it into useful bits.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在九十年代，克林顿政府对密钥托管加密有一种执念。他们希望为美国公民提供一种美国政府自己也能破解的加密方式，但这种方式排除了外国政府享有同样的特权。这种加密方式通常被称为“克利珀芯片”，在这一章中，我们将重点介绍该芯片的PCMCIA版本，称为MYK82或Fortezza卡。我们将提取其固件并将其转化为有用的数据。
- en: 'It worked roughly like this: suppose that Monica calls Bill for a private conversation.
    As she hits the *encrypt* button, the two telephones perform a key exchange. After
    the keys are exchanged, her phone will send Bill’s phone a bundle called the Law
    Enforcement Access Field (LEAF) containing (1) their session key encrypted with
    Monica’s personal key and (2) a checksum of the session key. The LEAF is encrypted
    with a “family key” that every Clipper device contains but which was not given
    to consumers. Every unit has the family key, but only spooky agencies with a warrant
    were able to look up Monica’s personal key and decrypt the session key.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 它大致是这样工作的：假设莫妮卡打电话给比尔进行私人对话。当她按下*加密*按钮时，两部电话会执行密钥交换。密钥交换完成后，她的电话会向比尔的电话发送一个名为“执法访问字段”（LEAF）的数据包，其中包含（1）使用莫妮卡个人密钥加密的会话密钥，和（2）会话密钥的校验和。LEAF本身使用一种“家庭密钥”进行加密，这个家庭密钥是每个克利珀设备都包含的，但不会提供给消费者。每个设备都有这个家庭密钥，但只有持有令状的特殊机构才能查找莫妮卡的个人密钥并解密会话密钥。
- en: Astute readers will notice that these keys are all symmetric and that the scheme
    does not hold up to an attacker with control of firmware. If you had the family
    key, things might work differently. Bill could call Monica, perform the key exchange,
    and then send along a tampered LEAF with (1) a random number and (2) the checksum
    of the real session key. Her phone would validate the checksum and allow the call
    to proceed, but any spooky agencies listening in would not be able to decrypt
    the random number into a session key. Monica’s phone does not have access to the
    key escrow database, so it’s unable to know that the authorities are being tricked.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 精明的读者会注意到这些密钥都是对称的，并且这种方案并不适用于拥有固件控制权的攻击者。如果你有家庭密钥，事情可能会有所不同。比尔可以给莫妮卡打电话，进行密钥交换，然后发送一个篡改过的LEAF，里面包含（1）一个随机数，和（2）真实会话密钥的校验和。她的电话会验证校验和并允许通话继续，但任何监听的特殊机构都无法将随机数解密为会话密钥。莫妮卡的电话没有访问密钥托管数据库的权限，因此无法知道当局正被欺骗。
- en: '![Image](../images/f0228-01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0228-01.jpg)'
- en: 'Figure 24.1: MYK82 Chip in a Fortezza PCMCIA Card'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图 24.1：MYK82 芯片在Fortezza PCMCIA卡中的位置
- en: '![Image](../images/f0229-01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0229-01.jpg)'
- en: 'Figure 24.2: MYK82 Die'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图 24.2：MYK82 芯片
- en: It’s also worth noting that Bill does not strictly need to know the family key.
    Without a tampered device, Bill might simply call Monica a few tens of thousands
    of times while corrupting the LEAF bundle, until the 16-bit checksum collides
    and her phone believes that the LEAF was not corrupted. Blaze (1994) describes
    such an attack, as well as a detailed explanation of the Escrowed Encryption Standard.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 还值得注意的是，比尔并不严格需要知道家庭密钥。在没有篡改设备的情况下，比尔可能会反复拨打莫妮卡的电话，几万次后通过篡改LEAF数据包，直到16位校验和发生碰撞，令她的电话认为LEAF数据包没有被篡改。Blaze（1994）描述了这种攻击，并详细解释了托管加密标准。
- en: The MYK82 chip contained in the Fortezza card implements this protocol, with
    handy library functions for using the card in Windows and Solaris. [Figure 24.1](ch24.xhtml#ch24fig1)
    shows this chip on the card in a QFP package. This package is a little weird in
    that the lead frame is *above* the die, and the die faces downward into the PCB.
    Perhaps this is to frustrate RF emissions, as the die sits between two ground
    planes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: MYK82芯片嵌入在Fortezza卡中，执行此协议，并提供了便于在Windows和Solaris中使用该卡的库函数。[图24.1](ch24.xhtml#ch24fig1)展示了该芯片在QFP封装中的样子。这个封装有些特别，因为引脚框架位于*芯片上方*，而芯片则面朝下与PCB接触。这可能是为了减少射频辐射，因为芯片位于两个接地平面之间。
- en: The die is shown in its entirety in [Figure 24.2](ch24.xhtml#ch24fig2). The
    CPU can be seen in the southwest, including an ARM6 logo that tells us we can
    expect 32-bit ARM instructions without the shortened Thumb instruction set that
    came later in ARM7\. There are three ROMs on this chip, with the largest holding
    code in the east. Two smaller ROMs hold the same Skipjack F-Table in the south
    of the chip, just a little east of center; these are exactly 256 bytes and match
    up to those in the Skipjack documentation, which has since been declassified.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 芯片的整体结构展示在[图 24.2](ch24.xhtml#ch24fig2)中。CPU位于西南部，其中包括一个ARM6的标志，告诉我们可以期待32位的ARM指令，而不是后来的ARM7中加入的精简Thumb指令集。该芯片上有三个ROM，其中最大的一个位于东侧，存储代码。两个较小的ROM位于芯片南部，稍微偏东的地方，存储相同的Skipjack
    F-Table；这两个ROM的大小正好是256字节，并与Skipjack文档中的内容完全一致，该文档已经解密。
- en: The MYK82 chip, like its predecessor the MYK78, uses diffusion ROMs. These shape
    the diffusion layer beneath the transistors so that a working transistor will
    produce a one and a broken transistor will produce a zero.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: MYK82芯片，像它的前身MYK78一样，使用扩散ROM。这些ROM形状扩散层位于晶体管下方，使得工作中的晶体管输出1，而损坏的晶体管输出0。
- en: Because bits are not surface visible, a delayering procedure like that in [Chapter
    22](ch22.xhtml#ch22) is needed to remove the upper layers that cover the diffusion
    layer. My usual procedure for this chip is to first burn off the packaging with
    63% nitric acid and then to delayer the chip in 5% hydrofluoric acid. Both of
    these run on a hot plate in my fume hood, but I do the HF reaction in a sealed
    plastic test tube to minimize the fumes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于位是不可见的，需要像[第22章](ch22.xhtml#ch22)中那样的去层处理来去除覆盖扩散层的上层。我通常对这个芯片的处理流程是，首先用63%的硝酸烧掉封装，然后用5%的氟化氢酸去层。这两种操作都在热板上进行，并且我在我的排风罩里做HF反应时，会将其放入密封的塑料试管中，以尽量减少有害气体。
- en: Before delayering, bits can just barely be seen in aggregate at low magnification.
    This has something to do with optics and a little bit of exposure, as individual
    bits can hardly be seen at all. After delayering, bits dramatically jump out,
    visible at both high and low magnifications.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在去层之前，位仅能在低倍放大下看到总的轮廓。这与光学和少量曝光有关，因为单个位几乎无法看到。去层后，位会显著地浮现出来，无论在高倍还是低倍放大下都能清晰可见。
- en: '[Figure 24.3](ch24.xhtml#ch24fig3) is the ROM as a whole, and because that’s
    still a bit hard to see in print, [Figure 24.5](ch24.xhtml#ch24fig5) shows just
    the six most significant bits at the far right of the ROM. [Figure 24.4](ch24.xhtml#ch24fig4)
    shows a close up of bits. To figure out the decoding, I took those two photos
    on a flight to Bogota with no local friends and no local responsibilities. By
    the time I left, I had decoded the ROM into 32-bit words and made a few friends.^([1](footnotes.xhtml#ch24fn1))'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 24.3](ch24.xhtml#ch24fig3)展示了ROM的整体结构，由于印刷版中这仍然有些难以看清，[图 24.5](ch24.xhtml#ch24fig5)展示了ROM最右侧六个位。
    [图 24.4](ch24.xhtml#ch24fig4)展示了位的特写。为了破解这些数据，我在一次飞往波哥大的航班上拍了这两张照片，那时我没有当地的朋友和责任。离开时，我已经将ROM解码成32位的字，并交到了几个朋友。^([1](footnotes.xhtml#ch24fn1))'
- en: Our first clue was the ARM6 logo elsewhere on the die. ARM6 predates Thumb,
    so all instructions are 32 bits wide and aligned to 32-bits. We can see that the
    bottom of the ROM is quite sparse, filled in with the same color in every bit.
    These happen to be zeroes, and they correctly imply that the code is built up
    from rows at the top of the ROM.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个线索是芯片上其他地方的ARM6标志。ARM6出现在Thumb之前，因此所有指令都是32位宽并且对齐到32位。我们可以看到ROM的底部相当稀疏，每个位都填充了相同的颜色。这些正好是0，它们正确地暗示了代码是从ROM顶部的行构建起来的。
- en: ARM reverse engineers will tell you that 32-bit code stands out because most
    instructions begin with an `E` as the most significant nybble. If you look at
    the right six bits in [Figure 24.5](ch24.xhtml#ch24fig5), you will see that the
    each major column holds two bits. (You might also figure that out from [Figure
    24.3](ch24.xhtml#ch24fig3), where 16 major columns represent 32 bits.) The rightmost
    major column is mostly filled with ones, while the major column to its left has
    ones on the right half and zeroes on the left half. This is our `E` nybble, formed
    from the right as one, one, one, zero!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: ARM逆向工程师会告诉你，32位代码很有特色，因为大多数指令的最显著四位（nybble）是`E`。如果你查看[图 24.5](ch24.xhtml#ch24fig5)中的右侧六个位，你会看到每一列的两位。
    （你也许可以从[图 24.3](ch24.xhtml#ch24fig3)推断出这一点，那里16列代表32位。）最右侧的主列大多是1，而其左侧的主列在右半部分是1，左半部分是0。这就是我们的`E`
    nybble，从右到左依次是1, 1, 1, 0！
- en: '![Image](../images/f0232-01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0232-01.jpg)'
- en: 'Figure 24.3: MYK82 Code ROM'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 24.3：MYK82 代码 ROM
- en: '![Image](../images/f0232-02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0232-02.jpg)'
- en: 'Figure 24.4: MYK82 ROM Bits'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 24.4：MYK82 ROM 位
- en: '![Image](../images/f0233-01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0233-01.jpg)'
- en: 'Figure 24.5: Right six bits of the MYK82 Code ROM'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 24.5：MYK82 代码 ROM 的右侧六位
- en: Sure enough, we can find 32-bit words by taking a bit from each of the 32 minor
    columns—that’s two from each major column—with the most significant bit on the
    far right and the least significant bit on the far left. We already know that
    the program begins on the first row because of the empty, zeroed rows at the end.
    All that is left is to understand the order of the words within a given row.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，我们可以通过从每一列的 32 个小列中取一位来找到 32 位字——即从每个大列中取两个字节——最有效位在最右侧，最不有效位在最左侧。我们已经知道程序从第一行开始，因为最后有空的、清零的行。剩下的就是理解给定行中单词的顺序。
- en: Each of the rows has 512 bits to it, so we know that they contain 16 words apiece.
    To learn the order, I simply wrote a decoder that output them in order and piped
    this into a disassembler. The correct ordering was from right to left, just as
    the bits are best read from right to left.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 每一行都有 512 位，因此我们知道每行包含 16 个字。为了了解顺序，我简单地编写了一个解码器，它按顺序输出这些位，并将其传送到反汇编器中。正确的顺序是从右到左，就像位最好是从右到左读取一样。
- en: At this point, it’s clear how to decode the ROM into 32-bit words, but to get
    them into bytes, we would like to understand the endianness. Does the most significant
    byte come first or last? This is where things get weird.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经清楚如何将 ROM 解码为 32 位字，但要将其转化为字节，我们希望了解字节序。最高有效字节是先还是后？这就是事情变得复杂的地方。
- en: Endianness is not a matter of byte order in words, but a matter of how words
    are seen as bytes or vice versa. The internal ROM is only composed of 32-bit words
    that are never fetched in smaller sizes, so it has no endianness. The ARM6 CPU
    has no instruction to fetch bytes from ROM, but there is a wiring decision of
    the external EEPROM memory. That EEPROM contains code as big-endian bytes, and
    it is only from that that we can say the machine as a whole is big-endian.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 字节序（Endianness）并不是指字中的字节顺序，而是指字是如何看作字节，或者字节如何看作字。内部 ROM 仅由 32 位字组成，这些字从不以更小的尺寸提取，因此它没有字节序。ARM6
    CPU 没有指令从 ROM 中提取字节，但外部 EEPROM 存储器有一个布线决定。这个 EEPROM 存储了以大端字节序存储的代码，只有通过这个，我们才能说整个机器是大端的。
