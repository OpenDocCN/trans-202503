["```\n3\np[0]*x**2+p[1]*x+p[2]\n10.2772497 0.0000000\n12.2926738 0.7142857\n15.7968918 1.4285714 11.9787533 2.1428571\n7.5707351 2.8571429\n0.2314503 3.5714286\n-0.1762932 4.2857143\n-9.0166104 5.0000000\n-21.6965056 5.7142857\n-50.3670945 6.4285714\n-60.2153079 7.1428571\n-88.6989830 7.8571429\n-107.3679996 8.5714286\n-145.8216296 9.2857143\n-173.1300077 10.0000000\n```", "```\n> python3 curves.py curfit_example.txt -10 20 20 1000 0 DE pcg64\nMinimum mean total squared error: 16.430381313  (curfit_example.txt)\nParameters:\n 0:   -2.7702810873939598\n 1:    9.8170736277919577\n 2:    6.6657767196319488\n(73 best updates, 20020 function calls, time: 1.618 seconds)\n```", "```\n> python3 curves.py sinexp.txt -3 23 20 1000 0 Jaya mt19937 fit.png\nMinimum mean total squared error: 0.000000015  (sinexp.txt)\nParameters:\n 0:    1.9999892608106149\n 1:    3.0000001706464414\n 2:   20.0001115681148427\n 3:    7.9999997934624147\n 4:    0.6000128598331004\n(137 best updates, 20020 function calls, time: 1.412 seconds)\n```", "```\nrng = RE(kind=kind)\nb = Bounds(lower, upper, enforce=\"resample\", rng=rng)\ni = RandomInitializer(npart, ndim, bounds=b, rng=rng)\nobj = Objective(X, Y, func)\nswarm = DE(obj=obj, npart=npart, ndim=ndim, init=i, tol=tol, max_iter=niter, bounds=b, rng=rng)\nswarm.Optimize()\nres = swarm.Results()\n```", "```\nclass Objective:\n    def __init__(self, x, y, func):\n        self.x = x\n        self.y = y\n        self.func = func\n        self.fcount = 0\n\n    def Evaluate(self, p):\n        self.fcount += 1\n        x = self.x\n        y = eval(self.func)\n        return ((y - self.y)**2).mean()\n```", "```\npush(a)  | a\npush(b)  | a b\npush(c)  | a b c\nadd      | a t0\nmul      | t1\npush(d)  | t1 d\nsub      | y\n```", "```\n>>> 7.07870 % -9.09650\n-2.0178000000000003\n```", "```\ndef Number(f, gmin=-20.0, gmax=20.0):\n    return gmin + f*(gmax-gmin)\n```", "```\nclass Objective:\n    def __init__(self, x,y, gmin=-20.0, gmax=20.0):\n        self.fcount = 0\n        self.x = x.copy()\n        self.y = y.copy()\n        self.gmin = gmin\n        self.gmax = gmax\n\n    def Evaluate(self, p):\n        self.fcount += 1\n y = np.zeros(len(self.x))\n        for i in range(len(self.x)):\n            y[i] = Expression(self.x[i],p, self.gmin, self.gmax)\n            if (np.isnan(y[i])):\n                y[i] = 1e9\n        return ((y - self.y)**2).mean()\n```", "```\ndef Expression(x, expr, gmin=-20.0, gmax=20.0):\n ➊ def BinaryOp(s,op):\n        b = s.pop()\n        a = s.pop()\n        if (op == 0):\n            c = a + b\n        elif (op == 1):\n            c = a - b\n        elif (op == 2):\n            c = a * b\n        elif (op == 3):\n            c = a / b\n        elif (op == 4):\n            c = a % b\n        elif (op == 5):\n            c = a**b\n        s.append(c)\n\n    bad = 1e9\n ➋ s = [x]\n    try:\n     ➌ for e in expr:\n            if (e < 1.0):\n                s.append(Number(e, gmin=gmin, gmax=gmax)) else:\n                op = int(np.floor(e))\n                if (op < 7):\n                    BinaryOp(s, op-1)\n                elif (op == 7):\n                    s.append(-s.pop())\n                elif (op == 8):\n                    s.append(x)\n                elif (op == 9):\n                    break\n    except:\n        return bad\n    try:\n     ➍ return s.pop()\n    except:\n        return bad\n```", "```\nelif (alg == \"PSO\"):\n    swarm = PSO(obj=obj, npart=npart, ndim=ndim, init=i, tol=0, max_iter=niter, bounds=b, \n                rng=rng, vbounds=Bounds([-10]*ndim, [10]*ndim, enforce=\"clip\", rng=rng), \n                inertia=LinearInertia(), ring=True, neighbors=6)\n elif (alg == \"BARE\"):\n    swarm = PSO(obj=obj, npart=npart, ndim=ndim, init=i, tol=0, max_iter=niter, bounds=b, \n                rng=rng, bare=True)\n```", "```\n> python3 gp.py data/x1_2n.txt -5 5 22 20 10000 bare minstd plot.png\n```", "```\nMinimum mean total squared error: 0.385596890  (x1_2n.txt)\n    push(x)\n    push(x)\n    add\n    push(x)\n    add\n    push(4.82483)\n    push(2.39118)\n    div\n    sub\n    halt\n    add\n    mod\n    div\n    sub\n    sub\n    sub\n    div\n    mul\n    halt\n    push(x)\n    pow\n    add\n    div\n(23 best updates, 200020 function calls, time: 257.076 seconds)\n```", "```\n> python3 gp.py data/x2_2n.txt -5 5 22 20 10000 bare minstd plot.png\n```", "```\nMinimum mean total squared error: 0.263703051  (x2_2n.txt)\n    push(x)\n    push(x)\n    mul\n    push(-2.97844)\n    sub\n    push(x)\n    sub\n    push(x)\n    sub\n    halt\n(98 best updates, 200020 function calls, time: 290.683 seconds)\n```", "```\n> python3 gp.py data/x4_-2x3_3x2_-4x_5_50n.txt -25 25 22 25 15000 bare pcg64 plot.png\n```", "```\npush(x)\n\npush(-21.60479)\n\nmul\n\npush(21.92950)\n\npush(-24.20913)\n\nsub\n\nsub\n\npush(-24.96894)\n\npush(-11.43579)\n\nneg\n\nneg\n\npush(-21.53894)\n\nsub\n\npush(x)\n\nmod\n\nmul\n\npush(x)\n\npush(x)\n\nmul\n\npush(23.76431)\n\nmul\n\nadd\n\nadd\n```"]