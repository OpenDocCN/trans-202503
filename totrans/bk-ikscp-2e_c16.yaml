- en: '16'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Clones and Symbols
  prefs: []
  type: TYPE_NORMAL
- en: 'The idea of a *clone*—a linked copy of an object that updates itself when the
    original changes—comes naturally from the vector way of thinking about graphics.
    In a sense, a clone is not a real object—rather, it is just a command: "Display
    a copy of the object here." The document stores that command, not a real object.
    An actual object instead of the command is created only in the memory of an SVG
    application such as Inkscape when it displays the document.'
  prefs: []
  type: TYPE_NORMAL
- en: There are both artistic and technical reasons to use clones. Watching several
    objects change, live, when you edit only one is an exciting experience that suggests
    many creative possibilities. On the other hand, using clones instead of duplicates
    can make an SVG document smaller and faster to display. Map symbols, repeated
    design elements such as bullets or icons, various symmetric designs or patterns—all
    these are natural to do with clones. Few other vector editors allow you to create
    live linked copies of objects with such directness and ease as Inkscape.
  prefs: []
  type: TYPE_NORMAL
- en: 16.1 Creating a Clone
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To clone one or several objects, just select them and press Alt-D (or**Edit ▶ Clone ▶ Create
    Clone**). The visible result of this is exactly the same as that of duplicating
    (Ctrl-D): a copy of (each) selected object is created and placed on top of the
    original. If you need to get a clone of several objects as a whole, group them
    together and clone the group.'
  prefs: []
  type: TYPE_NORMAL
- en: A clone is a *linked* copy of an object, as [Figure 16-1](#fig16-1) demonstrates.
    What constitutes this link?
  prefs: []
  type: TYPE_NORMAL
- en: Most important, a clone copies the original's *content*. If it is a clone of
    a path ([Chapter 12](c12.xhtml#ch12)) or a shape ([Chapter 11](c11.xhtml#ch11)),
    it exactly reproduces the form of the original, and it updates automatically when
    you edit the original in the Node tool or in a shape tool. If it is a clone of
    a text object, it has the same textual content and is also updated live when you
    edit the original with the Text tool. Finally, if you clone a group, you can then
    enter that group ([5.10](c05.xhtml#section5.10)) to add, delete, or edit objects
    within the group—and the group's clone will update immediately. On the other hand,
    since a clone has no content of its own, you cannot edit its content—no node editing,
    text editing, or ungrouping is possible on a clone so long as it remains a clone.
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-basic.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-1: A clone is a linked copy of an object.'
  prefs: []
  type: TYPE_NORMAL
- en: What about *transforms*? If you scale, rotate, or skew the original, all of
    its clones will do the same ([Figure 16-2](#fig16-2)). However, if you just move
    the original object, by default the clone will *not* move (although that behavior
    can be changed, see below). Of course if you select *both* the original and its
    clone, you can transform them together—by moving, scaling, rotating, or skewing.
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-transform.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-2: Clones respond to the original''s transforms, except for moving.'
  prefs: []
  type: TYPE_NORMAL
- en: You can also move, scale, rotate, or skew the clone completely independently
    of its original. The clone's own transform is applied *on top* of the transform
    inherited from the original. For example, if you squeeze a clone vertically and
    then rotate its original, the clone will be both rotated and squeezed—but the
    vertical squeeze will be applied to the shape *after* it is rotated, resulting
    in a skew, as shown in [Figure 16-3](#fig16-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-transform-combine.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-3: A clone''s own transform is applied on top of the transform inherited
    from the original.'
  prefs: []
  type: TYPE_NORMAL
- en: The *style* of the original is also passed on to its clones. If you paint the
    original a different fill or stroke color, all of its clones will take the same
    color at once. Conversely, if you try to paint a clone, it will simply refuse
    to change color, remaining true to its original. (Again, this rule has exceptions,
    as you will see below.)
  prefs: []
  type: TYPE_NORMAL
- en: 'This table summarizes various things you can and cannot do on a clone and its
    original and how those changes affect one another:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Move** | **Scale, rotate, skew** | **Node or shape edit** | **Style**
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Applied to **original** | does *not* affect clones'
  prefs: []
  type: TYPE_NORMAL
- en: (by default) | does affect clones | does affect clones | does affect clones
    |
  prefs: []
  type: TYPE_NORMAL
- en: '| Applied to **clone** | is possible | is possible (on top of original''s transformation)
    | is impossible | is impossible (unless unset in the original) |'
  prefs: []
  type: TYPE_TB
- en: 16.2 Transforming Clones
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you have seen, a clone can be transformed in any way, and this transform
    is applied on top of the transform it inherits from its original. You can use
    any transformation method—dragging with the mouse, transforming via keys ([6.5](c06.xhtml#section6.5)),
    aligning, distributing, and snapping all work on clones exactly as they do on
    regular objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, transforms of the original are classified—by how they affect
    the clones of that original—into two groups: simple moves and everything else.
    For "everything else" (scales, rotates, and skews) the transform is passed on
    to all clones. Simple moves, however, are treated differently.'
  prefs: []
  type: TYPE_NORMAL
- en: By default, Inkscape tries to isolate clones so that they remain in place when
    the original is moved. Under the hood, this is done by moving the clone in the
    opposite direction to compensate for the original's move. This works pretty intuitively
    and is usually convenient; for example, you can take the original of a large pattern
    of clones and move it away without disturbing the pattern. You can also grab both
    the original and its clones and move them anywhere, and they would behave as expected—that
    is, they move in parallel, even if the clone has a transform of its own.
  prefs: []
  type: TYPE_NORMAL
- en: 'Users can modify this compensation behavior. The Behavior ▶ Clones page of
    the Preferences dialog ([Figure 16-4](#fig16-4)) contains the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: Move in parallel forces all clones, including those rotated or scaled, to always
    move in parallel with the original, as if they were always selected together with
    it (even if in fact they are not).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stay unmoved (this is the default) forces those clones that were not selected
    to stay unmoved (but those that *are* selected are moved as usual).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Move according to transform turns off any clone movement compensation. Now each
    clone, selected or not, moves according to the transform inherited from its original,
    without any attempt to compensate. When complex transformations are in effect,
    the resulting behavior may appear chaotic—but from SVG's viewpoint, it is the
    least intrusive option, since the inherited clone transformations are not tampered
    with in any way.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](18/cl-move-compensate.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-4: Setting up movement compensation of clones'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, transforming clones does not honor theAffect buttons on the Selector
    controls bar ([6.11](c06.xhtml#section6.11)): it always behaves as if all of those
    buttons were pressed. You cannot scale a clone in such a way as to leave its stroke
    width unchanged or its gradient unaffected—because what you''re transforming is,
    in effect, an image of the original, and that image cannot have a different stroke
    width or gradient position compared to the original.'
  prefs: []
  type: TYPE_NORMAL
- en: 16.3 Styling Clones
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I have already mentioned that clones inherit their style from their originals:
    a clone of a red rectangle will be red. There are, however, several exceptions
    and workarounds for this limitation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, opacity ([8.3](c08.xhtml#section8.3)) and blur ([17.1](c17.xhtml#section17.1))
    are not subject to this limitation: you can easily blur a clone or make it semitransparent.
    This is because these properties *accumulate*—that is, if you blur something and
    then blur its parent, those blurs add up, and the result will be more fuzzy than
    from either of the blurs taken alone. This also means that if your original is
    *already* blurred or has less than 100% opacity, you can make its clone *more*
    blurred or *more* transparent, but not less.'
  prefs: []
  type: TYPE_NORMAL
- en: The same applies to filter effects ([Chapter 17](c17.xhtml#ch17); actually,
    blur is just one of the filters). You can apply any filter to a clone, and it
    will work on top of any filters that the original of this clone has. For example,
    you can make the clone of a red rectangle green or gray by applying a color-shifting
    filter.
  prefs: []
  type: TYPE_NORMAL
- en: 'But what about plain fill or stroke colors? You can change them in a clone—but
    only if the original cooperates. Namely, any style property you want to change
    in a clone must be *unset* in the original. Unsetting ([8.2](c08.xhtml#section8.2))
    is not the same as setting to `none`: a property is unset when it is simply *not
    specified* for an object, which allows its clone''s property to take effect instead,
    as shown in [Figure 16-5](#fig16-5).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-paint.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-5: A clone can be painted if its original has the paint unset.'
  prefs: []
  type: TYPE_NORMAL
- en: Inkscape has a special button in the Fill and Stroke dialog, as well as a command
    in the selected style indicator ([8.6](c08.xhtml#section8.6)), for unsetting the
    fill or stroke properties of an object. An object with an unset stroke simply
    has no visible stroke, but if you unset its fill, it is shown as black. If you
    want to unset some other style property, use the **Selectors and CSS** dialog
    ([8.1](c08.xhtml#section8.1)) to remove the property you want to override in the
    clones.
  prefs: []
  type: TYPE_NORMAL
- en: If you have a group as the original object, you can unset fill or stroke in
    some of the members of that group only, leaving others colored. Then, if you clone
    that group and paint the clone, only the objects with unset properties will take
    on that color, whereas everything else will remain true to the original.
  prefs: []
  type: TYPE_NORMAL
- en: 16.4 Chaining Clones
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Duplicating ([4.5](c04.xhtml#section4.5)) or copying and pasting a clone gives
    you another clone *of the same original*. (You can copy and then paste a clone
    into a different document but only together with its original; if you try to paste
    a clone alone, it will end up*orphaned* and invisible.) Duplicating an existing
    clone is often convenient, as this duplicate will also get the first clone's own
    transform and style, if it had any. Of course, you can also get another clone
    simply by cloning the original again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nothing prevents you from cloning a clone object itself. The resulting object—a
    *clone of a clone*—will still display the content of its ultimate original, but
    its link to it is no longer direct: it is now a grandchild, not a child, of the
    original. Such a grandchild clone inherits transforms and style first from the
    original, then from its parent clone, and finally, applies its own transform and
    style on top of all that. Such clone-of-clone chains (they can be of any length)
    are rarely useful; in almost all cases, multiple clones of the same original can
    be used instead, as [Figure 16-6](#fig16-6) demonstrates.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-cloneofclone.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-6: Instead of clones of clones, use multiple clones of the same object.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To figure out whether the object you selected is a clone—and if so, what it
    is a clone of—look at the status bar. It will describe your selected object as,
    for example,Clone of: Group or Clone of: Clone of: Path. If you want to know which
    object is the parent of the selected clone, press Shift-D: Inkscape will draw
    a dashed line from the clone to its original (that line will disappear after one
    second) and select the original object, as shown in [Figure 16-7](#fig16-7).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-selectoriginal.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-7: Press Shift-D to find the original of a clone.'
  prefs: []
  type: TYPE_NORMAL
- en: 16.5 Unlinking and Relinking Clones
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A clone's live link to its original is its main feature—that is, after all,
    why we use clones. This link facilitates a lot of tasks in complex designs; for
    example, you can use clones for identical buttons or bullets on a website mockup,
    and then change all such elements at once by changing their common original. However,
    sometimes this link becomes an obstacle. If you want to edit a clone independently
    of its original, you need to*unlink* the clone.
  prefs: []
  type: TYPE_NORMAL
- en: Select a clone (or clone of a clone) and press Shift-Alt-D (or select **Edit ▶ Clone ▶ Unlink
    Clone**). Visibly, nothing changes, but the object is no longer a clone—it is
    now a copy of the original, with all its additional transforms and style preserved,
    but now independent and fully editable. You can unlink multiple clones at once.
  prefs: []
  type: TYPE_NORMAL
- en: What happens if you delete the original of a clone? By default, its clones are
    automatically unlinked—that is, turned into copies of the object being killed.
    On the sameBehavior ▶ Clones page of the Preferences dialog you can, however,
    force clones to disappear when their original does ([Figure 16-8](#fig16-8)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-originaldeleted.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-8: Setting up the behavior of clones when the original is deleted'
  prefs: []
  type: TYPE_NORMAL
- en: When you *relink* a clone, it remains a clone, but its original changes. Here's
    how to do it. Suppose you have a clone C of an object A, but you want it to be
    a clone of B instead. Select B and copy it to the clipboard (Ctrl-C), then select
    clone C and do **Edit ▶ Clone ▶ Relink to Copied**. After that, C becomes a clone
    of B—which, depending on what B is, may result in C changing shape, style, position,
    transform, or any combination of these, as shown in [Figure 16-9](#fig16-9).
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-relink.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-9: Relinking a clone to a different original'
  prefs: []
  type: TYPE_NORMAL
- en: Manual relinking is a rarely needed operation. More useful is *automatic relinking
    on duplication*. Imagine you have a complex group of objects, some of which are
    clones of others—for example, a 3D-like graphic button where the shadow is a blurred
    clone of the main shape. Now, imagine you select this entire group and duplicate
    it. What happens?
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the group, each regular object will duplicate to a regular object, and
    each clone will duplicate to a clone. However, the clones will still be linked
    to the originals in the source group—which is most likely not what you wanted!
    It would be more natural for the shadow in the duplicated group to be a clone
    of the shape *in the same group*, not some other group far away. To ensure this,
    on the same**Behavior ▶ Clones** page, check **Duplicating original+clones/linked
    offset: Relink duplicated clones**. Now after duplication, you will have two independent
    buttons, each with its own editable shape and a shadow linked to that shape ([Figure 16-10](#fig16-10)).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-relink-auto.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-10: Automatically relinking clones on duplication'
  prefs: []
  type: TYPE_NORMAL
- en: 16.6 Tiling Clones
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The powerful Create Tiled Clones dialog (Edit ▶ Clone ▶ Create Tiled Clones)
    is a tool for creating multiple clones at once, arranged into all kinds of spatial
    and color patterns ranging from absolutely regular to totally randomized. As a
    bonus, you can also make the pattern of the clones trace the image underneath.
  prefs: []
  type: TYPE_NORMAL
- en: 16.6.1 Size and Bounding Box
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first step is to select the object you will be cloning. I recommend using
    a group for that; even if you have a single object, group it (Ctrl-G). This way,
    you will later be able to add more objects to the original group and the clones
    will reflect that. Place the original into the top-left corner of the area you
    want to fill with the pattern.
  prefs: []
  type: TYPE_NORMAL
- en: In the **Create Tiled Clones** dialog, start by specifying the size of the tiling
    ([Figure 16-11](#fig16-11)). You can give the number of rows and columns in the
    pattern; or, if you have some specific area to fill, you can type or paste its
    width and height. Note that too-large patterns—with more than a few thousand clones—can
    slow down Inkscape considerably.
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-tile-size.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-11: Setting the size of a pattern'
  prefs: []
  type: TYPE_NORMAL
- en: Once you set all other parameters as described below (or just trust the defaults),
    click the **Create** button. The pattern appears on the canvas, but you still
    have the original object selected. The Remove button deletes any previously tiled
    clones of the selected object. Note that Create first does Remove—that is, when
    you click Create, any existing tiled clones (but not regular clones created by
    Alt-D) are removed and replaced by a new pattern.
  prefs: []
  type: TYPE_NORMAL
- en: The Unclump button works exactly as the same-name button in the Align and Distribute
    dialog ([7.5.2](c07.xhtml#section7.5.2)), except it moves all the tiled clones
    of the selected object rather than all selected objects, as shown in [Figure 16-12](#fig16-12).
    Unclumping is especially useful for making randomized patterns more uniform without
    regularizing them. The Reset button changes all parameters of the dialog back
    to the defaults.
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-tile-unclump.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-12: Unclumping a randomized pattern'
  prefs: []
  type: TYPE_NORMAL
- en: The Use saved size and position of the tile checkbox has no effect when you
    create a pattern for the first time. However, if you modify the object you're
    tiling and create the pattern again, normally Inkscape will use the altered size
    of the object, which may result in the pattern changing its overall size and the
    alignment of the tiles. To make Inkscape use the same tile size as the last time
    you created a pattern from that object, even if the object's size has changed,
    check this checkbox. For example, you can create a pattern from a rectangle, fine-tune
    all the parameters, then scale up the original rectangle and re-create the pattern
    with this checkbox checked. That will give you the exact same pattern as last
    time, but with larger tiles overlapping each other.
  prefs: []
  type: TYPE_NORMAL
- en: All tiled patterns include a clone that exactly (except when randomized) overlays
    the original object. This means if you lose the selection of the original,simply
    clicking the original's location will select the overlying clone and not the original.
    Use Alt-click ([5.9](c05.xhtml#section5.9)) or select any of the clones and press
    Shift-D to jump to the original.
  prefs: []
  type: TYPE_NORMAL
- en: 16.6.2 Symmetry
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first tab in the dialog is titled Symmetry. It contains a list of*symmetry
    groups* from which you select one to use for your pattern. Each symmetry group
    is a specific way to transform the clones to form the pattern. The number of these
    groups is exactly 17 because it has been proven that any regular pattern on a
    plane can be classified into one of these 17 types; see the Wikipedia article
    on "wallpaper group" for extensive details and examples. Here is a brief overview
    of the symmetry types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**P1**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the simplest possible symmetry: the pattern tile is simply repeated
    in a rectangular grid without any rotations or flips ([Figure 16-13](#fig16-13)).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-tile-P1.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-13: The basic symmetry: P1'
  prefs: []
  type: TYPE_NORMAL
- en: P2, PM, PG, CM, PMM, PMG, PGG, and CMM
  prefs: []
  type: TYPE_NORMAL
- en: These symmetries use rotations by 180 degrees as well as vertical and horizontal
    flips in various combinations ([Figure 16-14](#fig16-14)). However, all of these
    symmetries use the same rectangular grid placement as P1, with the width and height
    of each unit of the grid being the same as those of the original object.
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-tile-P2.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-14: Symmetries with flips and 180-degree rotations'
  prefs: []
  type: TYPE_NORMAL
- en: P4, P4M, and P4G
  prefs: []
  type: TYPE_NORMAL
- en: These symmetries involve rotations by 90 degrees, so they produce square-based
    patterns. The P4M symmetry results in partial overlapping of rectangular tiles;
    with it, you can use triangular tiles to avoid overlapping and fill the plane,
    as shown in [Figure 16-15](#fig16-15).
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-tile-P4.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-15: Symmetries with 90-degree rotations'
  prefs: []
  type: TYPE_NORMAL
- en: P3, P31M, and P3M1
  prefs: []
  type: TYPE_NORMAL
- en: These symmetries involve rotations by 120 degrees and are thus roughly triangular
    in appearance ([Figure 16-16](#fig16-16)). Again, P31M creates a more dense pattern
    with partially overlapping tiles, so you can use a "pie slice" shape to fill the
    plane with this symmetry without overlapping.
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-tile-P3.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-16: Symmetries with 120-degree rotations'
  prefs: []
  type: TYPE_NORMAL
- en: P6 and P6M
  prefs: []
  type: TYPE_NORMAL
- en: These symmetries rotate the tiles by 60 degrees, forming snowflake-like hexagonal
    patterns ([Figure 16-17](#fig16-17)). Of them, P6M again overlaps the tiles and
    requires a "pie slice" shape to fill the plane without overlapping.
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-tile-P6.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-17: Symmetries with 60-degree rotations'
  prefs: []
  type: TYPE_NORMAL
- en: For "dense" patterns (P4M, P31M, P6M) that overlap the tiles, try creating the
    pattern and then scaling the original down. This will make the pattern sparser,
    and its characterisic logic will be easier to understand.
  prefs: []
  type: TYPE_NORMAL
- en: When working on a *tessellation* (a pattern that completely fills the plane
    without gaps or overlapping), it would be very difficult to create the required
    shape of the tile in isolation, even if you understand how your chosen symmetry
    works. Instead, just start with any random shape, create the pattern from it using
    the desired symmetry, and then node-edit the original path watching how the pattern's
    clones repeat its changes. In this way, you can easily produce a surprisingly
    sophisticated tessellation (see [25.2](c25.xhtml#section25.2) for an example).
  prefs: []
  type: TYPE_NORMAL
- en: 16.6.3 Shift, Scale, and Rotation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next three tabs in the dialog allow you to specify the *additional* transforms
    to be applied to the pattern's tiles—that is, transforms on top of the shifts,
    rotations, and flips created by the chosen symmetry group ([Figure 16-18](#fig16-18)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-tile-ssr.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-18: The Shift, Scale, and Rotation tabs'
  prefs: []
  type: TYPE_NORMAL
- en: You can specify all of these additional transform components separately per
    row and per column, and each value can include a degree of randomness. You can
    specify, for example, an equivalent of "Make tiles in each next row 20 percent
    taller, rotate tiles in each next column by 5 degrees, and make the rotation angle
    vary randomly by 10 percent." All shifts, scales, and randomization values are
    measured as percentages of the original object's dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 16-19](#fig16-19) shows how it works for shifts.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-tile-per.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-19: Specifying shifts per row and per column (PG symmetry)'
  prefs: []
  type: TYPE_NORMAL
- en: Negative shifts are possible, too. Naturally, to get all the clones to overlay
    the original, you need to specify **Shift X:** –100% per column and **Shift Y:**
    –100% per row. If you combine this with rotation per row, it's easy to create
    a flower or a clock face, as shown in [Figure 16-20](#fig16-20).
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-tile-per-rot.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-20: Specifying scale and rotation per row and per column'
  prefs: []
  type: TYPE_NORMAL
- en: You can make the values Alternate (for example, scale clones in every second
    row), as shown in [Figure 16-21](#fig16-21). The Cumulate checkbox forces the
    values of shift or scale to accumulate. For example, normally a shift of 10 px
    per column means that each column is shifted by 10 px relative to the previous
    column; if you check Cumulate, the same value would make every column shift 10
    px further than its predecessor—that is, the second column is 10 px from the first,
    the third is 20 px from the second, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-tile-altcum.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-21: Alternating transforms'
  prefs: []
  type: TYPE_NORMAL
- en: What is considered a "row" and a "column" when calculating transform values
    with complex symmetries? Inkscape draws complex patterns by symmetric clusters
    (of 3, 4, 6, or 12 clones, depending on the symmetry), going from one cluster
    to the next horizontally within a row. In other words, clones that belong to one
    cluster are considered to be in the same row but in different columns. This means
    that thePer row values shift rows of clusters or scale clones in each cluster
    uniformly, whereas Per column values affect each clone independently—and, as a
    result, clusters lose their symmetry, as [Figure 16-22](#fig16-22) demonstrates.
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-tile-complexsym.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-22: Transforming complex symmetries'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to space out symmetric clusters in both dimensions, just create
    a single cluster with your chosen symmetry, group it, and tile the group with
    a simple P1 symmetry, possibly with alternating shifts.
  prefs: []
  type: TYPE_NORMAL
- en: 16.6.4 Blur and Opacity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This tab of the dialog looks and acts very similar to the transform tabs; here,
    you can adjust the blur and opacity of the clones in the pattern, per row or per
    column, with optional alternating or randomization ([Figure 16-23](#fig16-23)).
    Remember that you can only make a clone more blurred or more transparent than
    its original, but not less.
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-tile-blurop.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-23: Varying blur and opacity in a pattern'
  prefs: []
  type: TYPE_NORMAL
- en: 16.6.5 Color
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you've seen in [16.3](#section16.3), if you want to paint a clone with its
    own color, you need to unset the corresponding property in the original. Once
    you've done that for the paint you're going to change (fill, stroke, or both),
    the Create Tiled Clones dialog allows you to create a variety of color patterns.
  prefs: []
  type: TYPE_NORMAL
- en: The Color tab of the dialog looks similar to the tabs you've already seen ([Figure 16-24](#fig16-24)).
    Here, you can vary any of the three components of the clone color in the HSL model—hue,
    saturation, and lightness ([8.4.3](c08.xhtml#section8.4.3))—per row or per column,
    as well as alternate or randomize the changes. You also need to specify theInitial
    color from which all those variations will start; just click the color swatch
    and use the color selector dialog. Remember that the original must have unset
    fill or stroke; otherwise, this tab will have no effect!
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-tile-color.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-24: Setting an initial color for the Color tab'
  prefs: []
  type: TYPE_NORMAL
- en: For example, by starting with red and varying the hue by 5 percent per row and
    per column, you get a slanted rainbow (see [Figure 12 in the color insert](c15b.xhtml#ill-fig12)).
  prefs: []
  type: TYPE_NORMAL
- en: 16.6.6 Tracing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The last tab of the Create Tiled Clones dialog ([Figure 16-25](#fig16-25)) is
    different. Here, you can make the pattern *trace* any image on top of which it
    is built—that is, make some aspects of each clone depend on what is immediately
    below it. The background image you're tracing can be an imported bitmap (such
    as a photo) or any vector drawing; it makes no difference to the tracer what to
    pick its values from.
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/cl-tile-trace.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-25: The Trace tab'
  prefs: []
  type: TYPE_NORMAL
- en: The tab contains three main areas that correspond to the three main steps of
    the tracing algorithm. First, you pick some value at the location of each clone;
    second, you do some optional processing with that value; and third, you apply
    the result to some aspect of the clone. Enable the controls of the tab by checking
    the **Trace the drawing under the tiles** checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: For the input value, you have the option of picking the Color,Opacity, or any
    single component of the color in RGB or HSL models. The value picked for each
    clone is averaged over the entire rectangular area that will be covered by that
    clone's bounding box. All these options produce a single numeric value in the
    range from 0 to 1, except Color, which picks all three components of the color
    as a composite value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The possible ways to process the value include:'
  prefs: []
  type: TYPE_NORMAL
- en: Gamma correction
  prefs: []
  type: TYPE_NORMAL
- en: Positive gamma shifts the picked value up; negative shifts it down.
  prefs: []
  type: TYPE_NORMAL
- en: Randomization by a given percentage
  prefs: []
  type: TYPE_NORMAL
- en: 'The value will have a random component of the given size: 0% randomization
    means the value is exactly as picked, 100% randomization means it is totally random
    and does not depend on the picked value at all.'
  prefs: []
  type: TYPE_NORMAL
- en: Inversion
  prefs: []
  type: TYPE_NORMAL
- en: Turns high values into low and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: If a color is picked, this processing is applied to each of its components independently
    (see [Figure 13 in the color insert](c15b.xhtml#ill-fig13)).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the resulting value can be applied to the clone's probability of presence
    (0 means the clone is absent at this location, 1 means it's present, and intermediate
    values make it appear with the given probability); color (this can directly reuse
    the background color if it was picked, otherwise it translates single values to
    shades of gray); size (from disappearance at 0 to its full size at 1); or opacity
    (smaller values make the clone more transparent). You can enable any number of
    these options at the same time; for example, you can pick lightness, invert it,
    and apply it to both the opacity and size of the clones (see [Figure 14 in the
    color insert](c15b.xhtml#ill-fig14)).
  prefs: []
  type: TYPE_NORMAL
- en: 16.7 The Symbols Dialog
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can think of *symbols* as clones organized into libraries for reuse. Inkscape's
    Object ▶ Symbols dialog (Shift-Ctrl-Y) gives you access to a number of common
    graphic symbol sets that come with Inkscape. You can also use it to create and
    manage your own collections of custom symbols.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inkscape''s prepackaged symbol sets should give you an idea of what kinds of
    objects it may make sense to organize into a library:'
  prefs: []
  type: TYPE_NORMAL
- en: AIGA (American Institute of Graphic Arts)
  prefs: []
  type: TYPE_NORMAL
- en: 'Urban signage, used mostly in airports: arrivals, customs, barber shops—very
    recognizable and very 1970s.'
  prefs: []
  type: TYPE_NORMAL
- en: US National Park Service Map Symbols
  prefs: []
  type: TYPE_NORMAL
- en: Campgrounds, guided trails, post offices—stylistically similar to AIGA symbols.
  prefs: []
  type: TYPE_NORMAL
- en: Flow chart shapes
  prefs: []
  type: TYPE_NORMAL
- en: The conventional blocks of flow chart diagrams, such as storage, extract, merge,
    display, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Logic diagram symbols
  prefs: []
  type: TYPE_NORMAL
- en: The AND gate, OR gate, NOT gate, and friends.
  prefs: []
  type: TYPE_NORMAL
- en: Word balloons
  prefs: []
  type: TYPE_NORMAL
- en: Various shapes of word balloons to be used in comics.
  prefs: []
  type: TYPE_NORMAL
- en: To insert a symbol in your document, just drag in from the dialog onto the canvas.
    The object you get behaves as if it is a clone of something, but the status bar
    description says *Symbol*; nevertheless, if you want to edit this object, you
    can do the same Edit ▶ Clone ▶ Unlink Clone as you would do for a clone. (If all
    you want to do is move, scale, or rotate the symbol, you don't need to unlink
    it.)
  prefs: []
  type: TYPE_NORMAL
- en: 'The search field in the Symbols dialog allows you to find a symbol with a certain
    word or phrase in its description. The search is performed in the currently selected
    symbol set or in all of them if you select Symbol set: All symbol sets.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you switch the dialog to Current document ([Figure 16-26](#fig16-26)), you
    will see that it already contains all the symbols you have added from the standard
    libraries (if any). This is where you can also add your own objects as symbols:
    select an object and click the **Add Symbol** button in the lower-left corner.
    Once the new symbol is in the list, the original object can be deleted and replaced
    with a copy of the symbol. Your new symbol will be inserted with the same size
    and styling as it had when you created it.'
  prefs: []
  type: TYPE_NORMAL
- en: To delete a symbol from the document, select it in the list and use the **Remove
    Symbol** button; after that, an actual copy of the symbol is placed on the canvas,
    and all instances of this symbol are converted into clones of this visible object.
  prefs: []
  type: TYPE_NORMAL
- en: '![](18/symbols.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16-26: The Symbols dialog managing the symbols in the current document'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to share your custom symbol library between documents, all you need
    to do is to place an SVG document containing the symbols into Inkscape's symbols
    folder (go to the **Preferences**, **System** page, and click **Open** next to
    **User symbols**). After that, your symbol set will be available in the Symbol
    set list (under the name of your SVG file).
  prefs: []
  type: TYPE_NORMAL
