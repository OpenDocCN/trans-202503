- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 5 STRING AND BOOLEAN DATA TYPES
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5 字符串和布尔数据类型
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: The first thing to learn about assigning data types in Batch is that Batch doesn’t
    allow for the assignment of data types. There’s no underlying egalitarian ethos
    at play, but all Batch variables are created equal. Intrinsically, there’s no
    difference between a variable holding a number, text, or even a boolean. However,
    a variable set to a number can be treated as numeric, and I’ll focus on those
    data types in the next chapter.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习 Batch 数据类型赋值的第一件事就是，Batch 不允许赋予数据类型。这里并没有什么平等主义的底层思想，但所有 Batch 变量都是平等的。从本质上讲，保存数字、文本甚至布尔值的变量没有任何区别。然而，设置为数字的变量可以被视为数值类型，接下来我将集中讲解这些数据类型。
- en: In this chapter, after an overview of all Batch data types, you’ll learn about
    string and character variables. You’ll also explore strings further with methods
    for substringing and text replacement. Booleans were not devised by the creators
    of Batch, but I’ll show you how to build and use this useful data type.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，在概述所有 Batch 数据类型之后，你将学习字符串和字符变量。你还将进一步探索字符串，了解如何进行子字符串提取和文本替换。布尔值并非 Batch
    的创建者设计的，但我将教你如何构建和使用这个有用的数据类型。
- en: Common Data Types
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常见数据类型
- en: 'Many if not most programming languages not only allow but also require every
    variable to be declared as a specific data type before it can be assigned a value
    or used in any fashion. There are variations from language to language, but here’s
    a general list of data types:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 许多（如果不是大多数的话）编程语言不仅允许，而且要求在赋值或以任何方式使用变量之前，必须先声明其数据类型。不同语言之间有所不同，但这里有一个一般的数据类型列表：
- en: '**Character**    Single alphanumeric character'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**字符**    单个字母数字字符'
- en: '**String**    Zero to many alphanumeric characters'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**字符串**    零个或多个字母数字字符'
- en: '**Integer**    Positive and negative whole numbers'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**整数**    正数和负整数'
- en: '**Floating-point**    Numbers with a decimal place'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**浮点数**    具有小数点的数字'
- en: '**Boolean**    True or false'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**布尔值**    真或假'
- en: For better or worse, Batch variables aren’t declared. One comes into being ex
    nihilo the first time the interpreter discovers a new variable name. This practice
    does allow for a great deal of flexibility, but it can be tricky and dangerous.
    One misspelled instance of a variable name used a dozen times is considered to
    be an entirely different variable by the interpreter, and the mistake will not
    be caught by the guiding hand of a compiler. Instead, it’s treated as a new variable
    that’ll likely resolve to nothing.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 无论好坏，Batch 变量并没有显式声明。变量名第一次被解释器发现时，它就会凭空产生。这种做法确实提供了很大的灵活性，但也可能很棘手且危险。解释器会认为变量名拼写错误的实例是一个完全不同的变量，且编译器并不会捕捉到这个错误。相反，它会被当作一个新的变量，这个变量可能最终什么也没有。
- en: A variable can be assigned an integer, and arithmetic can be performed on it.
    That same variable can then be assigned text and treated like a string. That also
    means that arithmetic can inadvertently be performed on a variable containing
    a string, but on the upside, a number can easily be treated as a string without
    any type of conversion when written to the console or a report. It’s pure digital
    anarchy, a coding language for nihilists, and somehow it works.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 变量可以被赋予一个整数，并且可以对其进行算术运算。这个变量之后可以被赋值为文本，并像字符串一样处理。这也意味着，包含字符串的变量可能不小心进行算术运算，但从好的一面看，数字可以轻松地当作字符串处理，在控制台或报告中无需任何转换。这是纯粹的数字混乱，是为虚无主义者设计的编程语言，不知为何它居然能工作。
- en: Even though you can’t assign data types, you can create variables and treat
    them as one of the types, but—and I cannot stress this enough—the underlying structure
    of every Batch variable is really just a few nondescript bytes of memory.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你不能直接赋予数据类型，你仍然可以创建变量，并将其当作某种类型来使用，但——我必须强调这一点——每个 Batch 变量的底层结构实际上只是几字节的内存，没有明确的类型区分。
- en: Characters
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符
- en: A character is merely a single byte of text; in the world of Batch, think of
    it as a very short string, as it’s treated exactly like any other single-character
    string. I’ll keep this section short and move on to strings.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 字符仅仅是单个字节的文本；在 Batch 世界中，可以把它看作是一个非常短的字符串，因为它和任何其他单字符字符串的处理方式完全相同。我将简短讲解这一部分，并继续介绍字符串。
- en: Strings
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符串
- en: 'A string is text of any length, containing alphabetic characters, numbers,
    and/or special characters. The following command sets the aString variable to
    a five-word string:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串是任意长度的文本，包含字母字符、数字和/或特殊字符。以下命令将 aString 变量设置为一个包含五个单词的字符串：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Including embedded spaces, its length totals 35 characters or, in the parlance
    of coders, bytes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 包括嵌入的空格，其长度总计为 35 个字符，或者用程序员的话来说，是 35 个字节。
- en: 'Many special characters, such as the dollar and pound signs, can be explicitly
    included in the string, but others, such as the percent sign, cannot, because
    they have specific uses in Batch. In [Chapter 14](chapter14.xhtml), I’ll address
    how escaping allows for the inclusion of all characters in a string, but for now,
    understand that the interpreter won’t abort when it comes upon an exclamation
    mark in a string, but you might not see your expected result. For instance, the
    last character in the value being assigned to this variable is an exclamation
    mark:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 许多特殊字符，如美元符号和英镑符号，可以明确地包含在字符串中，但其他字符，如百分号符号，则不行，因为它们在 Batch 中有特定的用途。在[第14章](chapter14.xhtml)中，我将讲解如何通过转义实现将所有字符包含在字符串中的方法，但现在要理解的是，当解释器在字符串中遇到感叹号时，它不会中止执行，但你可能不会看到预期的结果。例如，赋值给这个变量的值中的最后一个字符是一个感叹号：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here’s the result of the echo command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `echo` 命令的结果：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The punctuation mark isn’t written to the console because it wasn’t included
    in the string variable.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 标点符号没有写入控制台，因为它没有包含在字符串变量中。
- en: NOTE
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*As mentioned in [Chapter 3](chapter3.xhtml), I’m assuming that delayed expansion
    is enabled throughout this book. This example is a great case in point, because
    if delayed expansion had been disabled, the exclamation mark would’ve been just
    another character, not a delimiter used to resolve a variable. The character would’ve
    been included as part of the value and would’ve been written to the console with
    the rest of the text. Being able to treat an exclamation mark as simple text might
    be the only advantage of disabling delayed expansion. This trivial advantage pales
    in comparison to the functionality afforded by delayed expansion, which is why
    I recommend its universal use.*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*如[第3章](chapter3.xhtml)中所述，我假设本书中启用了延迟扩展。这个例子很好地说明了这一点，因为如果延迟扩展被禁用，感叹号将仅仅是另一个字符，而不是用来解析变量的分隔符。这个字符会作为值的一部分被包含在内，并与其余文本一起写入控制台。能够将感叹号视为普通文本，可能是禁用延迟扩展的唯一优势。这个微不足道的优势与延迟扩展所提供的功能相比显得微不足道，这也是我推荐全书都使用它的原因。*'
- en: In later chapters, I’ll discuss how to write strings and other data types to
    files, but here I’ll explain how to build, concatenate, substring, and manipulate
    strings.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在后续章节中，我会讨论如何将字符串和其他数据类型写入文件，但在这里我将解释如何构建、连接、提取子串和操作字符串。
- en: Build and Concatenate
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 构建和连接
- en: 'The previous example used a single set command to assign the value Awesome
    Batch Code Dares Excellence to a variable. The following six lines perform the
    same task:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个例子使用单个 `set` 命令将值 `Awesome Batch Code Dares Excellence` 赋给一个变量。以下六行执行相同的任务：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In practice, this method would be horribly inefficient for building a string,
    but it nicely demonstrates the principle of concatenation.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这种方法在构建字符串时效率极低，但它很好地展示了连接的原理。
- en: The variables defined by the first five letters of the alphabet are each set
    to a single word. Then on the last line all five variables are resolved and concatenated
    together to create aString. Take note of the four embedded spaces in the result.
    One is from the trailing space after Batch, another is from the leading space
    before Excellence, and the other two are embedded in the last set command.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 由字母表前五个字母定义的变量每个都被设置为一个单词。然后在最后一行，所有五个变量都被解析并连接起来创建一个 `aString`。注意结果中嵌入的四个空格：一个是来自
    `Batch` 后面的空格，另一个是来自 `Excellence` 前面的空格，其他两个则是嵌入在最后的 `set` 命令中。
- en: 'The previous example shows how to create a string by concatenating other strings,
    but you can also append or prepend an existing string with other text:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个例子展示了如何通过连接其他字符串来创建一个字符串，但你也可以通过附加或预置其他文本来扩展现有字符串：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here a string is being appended with additional text four times to create a
    very long string.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这里一个字符串被四次附加额外文本，从而创建了一个非常长的字符串。
- en: 'This method is my preference for creating long string variables, but you can
    do the same task with the “continuation character” or caret (^). When the interpreter
    comes to a caret at the end of a line, it appends to that line the next line:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法是我创建长字符串变量的偏好方式，但你也可以使用“续行符”或插入符号（^）完成相同的任务。当解释器遇到行尾的插入符号时，它会将下一行附加到该行：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this example, three carets are used to make a four-line set command. The
    first and third lines have a space in front of the caret, and their following
    lines start in the first byte, resulting in a space between the words. To demonstrate
    a different means of doing the same thing, the second caret immediately follows
    the word way, and the next line has a space prior to the next word, over. The
    upshot is a long string of words, all separated by a single space.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，使用了三个插入符号来制作一个四行的 set 命令。第一行和第三行前面有一个空格，而它们的后续行从第一字节开始，这导致了单词之间的空格。为了展示一种不同的实现方式，第二个插入符号紧跟在单词
    way 后面，接下来的行在下一个单词 over 前有一个空格。最终结果是一个由空格分隔的长字符串。
- en: I am not a fan of this technique for the simple reason that it plays havoc with
    my indentation scheme. I indent most commands two or more spaces, as the first
    line of the set command shows, but any spaces at the beginning of the subsequent
    line are considered part of the appended text. This effectively means that these
    lines must be left-justified. I’ll delve into indenting schemes further in [Chapter
    9](chapter9.xhtml). For now, just understand that it works—but it’s ugly.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我不太喜欢这种技术，原因很简单，它会破坏我的缩进规则。我通常将大部分命令缩进两个或更多空格，正如 set 命令的第一行所示，但任何后续行开头的空格都被视为附加文本的一部分。这实际上意味着这些行必须左对齐。我会在[第9章](chapter9.xhtml)中深入讨论缩进规则。现在只需理解它是有效的——但不美观。
- en: NOTE
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*I put “continuation character” in quotes because this is a gross simplification.
    The caret is really an escape character. In [Chapter 14](chapter14.xhtml), I’ll
    explain why that matters, but many Batch coders simply refer to it as the* continuation
    character*.*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*我把“续行符”加上引号是因为这是一个过度简化。插入符号实际上是一个转义字符。在[第14章](chapter14.xhtml)中，我会解释为什么这很重要，但许多批处理程序员通常称其为*续行符*。*'
- en: Substrings
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 子字符串
- en: 'Any language worth its salt will support a substringing function that retrieves
    a portion of a string, and Batch is up to the task. For the next few examples,
    let’s consider the aString variable being set just as it was earlier:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 任何值得一提的语言都会支持一种子字符串函数，能够提取字符串的一部分，而 Batch 也不例外。在接下来的几个例子中，我们假设 aString 变量已经像之前那样设置好了：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: A *substringing function* needs two numbers, the offset or starting position
    and the length of the desired text. Surprisingly, Batch uses the zero-offset that
    predominates more modern languages and not the one-offset more common of 20th-century
    languages. This means the first byte is position 0 (not 1), the second byte is
    position 1, the 100th byte is position 99, and so on.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*子字符串函数*需要两个数字，即偏移量或起始位置和所需文本的长度。令人惊讶的是，Batch 使用的是更现代语言中常见的零偏移量，而不是 20 世纪语言中更常见的
    1 偏移量。这意味着第一个字节的位置是 0（而不是 1），第二个字节的位置是 1，第 100 个字节的位置是 99，以此类推。
- en: 'The syntax to substring is a bit clunky. The variable is resolved with percent
    signs as is typical, but the closing percent sign is preceded with a colon, a
    tilde, the offset, a comma, and ultimately the length. Hence, the following syntax
    returns the first three characters of the aString variable:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 子字符串的语法有点笨重。变量使用百分号进行解析，这是常见的做法，但闭合的百分号前面会加上冒号、波浪号、偏移量、逗号，最终是长度。因此，下面的语法会返回
    aString 变量的前三个字符：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The offset of 0 tells the interpreter to start with the first byte and the length
    is defined as 3, resulting in the text Awe being assigned to subString.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 偏移量为 0 告诉解释器从第一个字节开始，长度定义为 3，最终将文本 Awe 赋值给 subString。
- en: 'The following extracts the text some out of the first word of the same string:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码从同一字符串的第一个单词中提取文本 some：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We need to start in the fourth byte, which is a zero-offset of 3. If you find
    the zero-offset confusing, think of the offset as the number of bytes *before*
    the substring. More obviously, the length is 4.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要从第 4 个字节开始，这就是零偏移量 3。如果你觉得零偏移量有些混乱，可以将偏移量理解为子字符串*之前*的字节数。更明显的是，长度是 4。
- en: 'Here are two substrings put together with a hardcoded to and a couple spaces:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个子字符串与硬编码的 "to" 和几个空格一起拼接：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The 15th byte is the capital C in Code, so the first substring is the remaining
    three bytes of the word. The eighth byte is the space before Batch, so the next
    five bytes encompass that entire word. The result is an apt, if not corny, reinterpretation
    of the original string: ode to Batch.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 第 15 个字节是 Code 中的字母 C，因此第一个子字符串是该单词的剩余三个字节。第 8 个字节是 Batch 前的空格，因此接下来的五个字节包含整个单词。结果是一个恰当的，虽然不那么高深的，重新诠释原始字符串：ode
    to Batch。
- en: 'If the length isn’t defined, the interpreter returns the remainder of the string.
    To demonstrate, the following substring has no length and no preceding comma.
    The offset corresponds to the 25 bytes preceding the last word in the 35-byte
    variable:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有定义长度，解释器将返回字符串的其余部分。为了演示，以下子字符串没有长度，也没有前导逗号。偏移量对应于35字节变量中倒数第一个单词前面的25个字节：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The upshot is that subString is assigned the string Excellence, the last 10
    bytes of the original string.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，subString被赋值为字符串“Excellence”，即原始字符串的最后10个字节。
- en: Negative Offsets
  id: totrans-60
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 负偏移量
- en: 'Notice the negative offset in the following example. Interestingly, this also
    assigns Excellence to the variable:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下示例中的负偏移量。有趣的是，这也将“Excellence”赋值给变量：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: A *negative offset* indicates that the starting position is relative to the
    end of the string, not the beginning, which means -10 tells the interpreter that
    the substring is to start 10 bytes from the end of the string. Since no length
    is given, it returns the remainder of the text. As long as the variable is populated,
    %aString:~-1% is an easy way to inspect its last byte.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*负偏移量*表示起始位置相对于字符串的结尾，而不是开头，这意味着-10告诉解释器子字符串应从字符串末尾起10个字节的位置开始。由于没有给定长度，它将返回文本的其余部分。只要变量已填充，%aString:~-1%是检查其最后一个字节的简便方法。
- en: 'Both of these commands result in the same ode substring:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个命令都会返回相同的子字符串：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The first command’s offset is 15 bytes from the start of the original string,
    while the second command finds the same position by counting 20 bytes from the
    end of the 35-byte variable.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令的偏移量是原始字符串起始位置的15个字节，而第二个命令通过从35字节的变量末尾起始的20个字节来找到相同的位置。
- en: Negative Lengths
  id: totrans-67
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 负长度
- en: 'A negative length works in a similar fashion. Don’t think of it as a *length*;
    think of it as the number of bytes at the end of the string *not* in the substring.
    For instance, the following returns a string with the first and last bytes stripped
    off:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 负长度的工作方式类似。不要把它看作是一个*长度*；把它看作是字符串末尾*不*包含在子字符串中的字节数。例如，以下命令返回一个去掉首尾字节的字符串：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can even use negative offsets with negative lengths. The following extracts
    the penultimate byte of the string:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以将负偏移量与负长度一起使用。以下命令提取字符串的倒数第二个字节：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The offset of -2 tells the interpreter to start with the second to last byte,
    and the length of -1 indicates that the last byte is dropped.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 偏移量-2告诉解释器从倒数第二个字节开始，长度-1表示删除最后一个字节。
- en: Substring in Practice
  id: totrans-73
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 实际中的子字符串
- en: One nice feature of retrieving a substring in Batch is that a null is simply
    returned if calling for a substring beyond the length of the string. Thus, the
    interpreter won’t crash when it comes upon %aString:~99,1% for the 35-byte string,
    nor will it return a space. Instead, it returns only an empty string. It’s a handy
    way of determining the length of a string with no fear of the null pointer exceptions
    prevalent in compiled code. If the 36th byte equals null (that is, "%aString:~35,1%"
    equ "") but the 35th byte is populated, the string is exactly 35 bytes in length.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 批处理中的一个不错的特性是，如果请求的子字符串超出了字符串的长度，解释器会返回null，而不会崩溃。因此，当遇到35字节字符串的命令%aString:~99,1%时，解释器不会崩溃，也不会返回空格。它只会返回一个空字符串。这是确定字符串长度的一种方便方法，避免了编译代码中常见的null指针异常。如果第36个字节为空（即"%aString:~35,1%"为""），但第35个字节已填充，则字符串的长度正好为35个字节。
- en: However, this syntax works only when substringing a populated string. As I just
    mentioned, the resolution of %aString:~35,1% is null if the string is between
    1 and 35 bytes in length, and of course, it resolves to the 36th byte if the string
    is 36 bytes or longer. But if the string is empty or set to null, %aString:~35,1%
    resolves to ~35,1, or everything between the colon and trailing delimiter. Likewise
    due to this batveat, when trying to inspect the last byte of an empty string,
    %aString:~-1% resolves to ~-1, not the null you may have expected.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种语法仅在截取已填充的字符串时有效。正如我刚才提到的，当字符串长度在1到35字节之间时，%aString:~35,1%的解析结果为null；当然，如果字符串长度为36字节或更长，它会解析为第36个字节。但如果字符串为空或设置为null，%aString:~35,1%会解析为~35,1，或冒号和后续定界符之间的所有内容。同样，由于这个警告，当尝试检查空字符串的最后一个字节时，%aString:~-1%会解析为~-1，而不是你可能期望的null。
- en: 'You now know how to extract any portion of a string from another string, but
    all of the offsets and lengths are hardcoded in the earlier examples. Often, if
    not most of the time, those two numbers will be variables. In the following example,
    the offset and length are defined as obviously named variables and used in the
    third command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何从另一个字符串中提取字符串的任何部分，但之前的例子中，所有的偏移量和长度都是硬编码的。通常情况下，甚至大多数情况下，这两个数字会是变量。在以下示例中，偏移量和长度被定义为显而易见的命名变量，并在第三个命令中使用：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The percent signs encasing offset and length first resolve these variables to
    their numeric values. Then the exclamation marks kick in so that !aString:~15,3!
    resolves to our familiar ode, which is yet another victory for enabling delayed
    expansion.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 包围偏移量和长度的百分号首先会解析这些变量的数值。然后，感叹号发挥作用，使得 !aString:~15,3! 解析为我们熟悉的 ode，这是启用延迟扩展的又一次胜利。
- en: After finishing the next chapter, where I discuss arithmetic, you’ll be able
    to calculate variables holding integer values to be used as offsets and lengths
    to find a substring.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 完成下一章后，我将在其中讨论算术运算，你将能够计算持有整数值的变量，用作偏移量和长度来查找子字符串。
- en: Text Replacement
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 文本替换
- en: 'Batch also has a handy mechanism for replacing all or part of a string with
    other text. For example, assume that the following variable contains this awkward
    filename:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Batch 还有一个便捷的机制，可以将字符串的全部或部分替换为其他文本。例如，假设以下变量包含这个不太合适的文件名：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If you aren’t fond of this filename, you could change the underscores to dashes.
    In [Chapter 7](chapter7.xhtml), I’ll introduce the ideal command for renaming
    a file, but here I’ll discuss how to build a variable containing the new filename.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不喜欢这个文件名，你可以将下划线替换为短横线。在[第七章](chapter7.xhtml)中，我将介绍用于重命名文件的理想命令，但在这里我将讨论如何构建包含新文件名的变量。
- en: 'The text replacement syntax is similar to what was used for substringing. The
    variable and a colon are surrounded by percent signs as before, but now there’s
    no tilde. Instead, after the colon comes the text to search for and change, followed
    by an equal sign delimiter, and finally the replacement text:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 文本替换语法类似于用于子字符串提取时的语法。变量和冒号仍然被百分号包围，但现在没有波浪号。冒号后面是要查找并更改的文本，接着是等号分隔符，最后是替换文本：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Each and every underscore character (_), not just the first one encountered,
    is changed to a dash (-), resulting in File-Name-With-Underscores.docx. Be careful
    not to change more text than you intend.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 每一个下划线字符（_），而不仅仅是遇到的第一个下划线，都会被替换为短横线（-），从而得到 File-Name-With-Underscores.docx。小心不要更改超过预期的文本。
- en: 'Looking at this filename, it also would make sense to change the word Underscores
    to Dashes. Fortunately, Batch doesn’t require that the target and replacement
    text be the same length, so this additional command further updates the value
    of this variable to File-Name-With-Dashes.docx:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 看着这个文件名，也可以考虑将 Underscores 替换为 Dashes。幸运的是，Batch 不要求目标文本和替换文本的长度相同，因此这个附加命令进一步将变量的值更新为
    File-Name-With-Dashes.docx：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Since both words end in es, I’m using the singular Dash as the replacement text,
    and the target text is underscor, which isn’t even a real word. Also, notice that
    Underscores is capitalized in the variable’s value, but underscor is lowercase
    in the replace syntax. Very important, Batch does a case-insensitive replacement.
    The target text can be whichever case or even mixed case with no effect on the
    outcome, but the replacement text will be used exactly as it is entered in the
    command. Hence, %newFilNm:UNDERscor=Dash% is functionally identical to the variable
    resolution in the previous command, but %newFilNm:underscor=DASH% would result
    in a new filename of File-Name-With -DASHes.docx.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这两个单词都以 es 结尾，我使用单数形式的 Dash 作为替换文本，而目标文本是 underscor，后者甚至不是一个真实的单词。此外，注意到在变量的值中
    Underscores 是大写的，而在替换语法中，underscor 是小写的。非常重要的一点是，Batch 执行的是不区分大小写的替换。目标文本的大小写可以是任意的，甚至是混合大小写，这对结果没有影响，但替换文本会按原样使用。因此，%newFilNm:UNDERscor=Dash%
    与之前命令中的变量解析功能完全相同，但 %newFilNm:underscor=DASH% 将会导致文件名变为 File-Name-With-DASHes.docx。
- en: It’s subtle, but the prior two commands show two distinct methods of assignment.
    The first assigns the modified value of filNm to newFilNm, leaving filNm unchanged.
    The second command reassigns newFilNm to itself so that its ultimate value reflects
    both text replacements. These two methods give you the flexibility to either alter
    a variable’s value in place or maintain two variables, one with the old and one
    with the new text.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这很微妙，但前两个命令展示了两种不同的赋值方法。第一个命令将修改后的 `filNm` 值赋给 `newFilNm`，而不改变 `filNm`。第二个命令将
    `newFilNm` 重新赋值给它自己，以便其最终值反映两个文本替换。这两种方法为你提供了灵活性，可以选择直接在变量内修改值，或者保持两个变量，一个保存旧文本，一个保存新文本。
- en: 'You can also use delayed expansion to turn the target text, targ, and the replacement
    text, repl, into variables. Here’s an example:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用延迟扩展将目标文本 `targ` 和替换文本 `repl` 转换为变量。这里有一个例子：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The result is the far more honest string I Hate Broccoli.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是更诚实的字符串 "I Hate Broccoli"。
- en: 'A text search is one wonderful application of the text replacement syntax.
    In [Chapter 24](chapter24.xhtml), I’ll compare and contrast two methods of determining
    whether one string is part of another string. The findstr command works well,
    but the method based on the previous syntax executes in a fraction of the time.
    Spoiler alert: the text search logic replaces the searched for text with null,
    and the result is compared to the original text. If they differ, the text was
    found.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 文本搜索是文本替换语法的一个绝妙应用。在[第24章](chapter24.xhtml)中，我将对比两种判断一个字符串是否为另一个字符串一部分的方法。`findstr`
    命令效果不错，但基于前述语法的方法执行速度要快得多。剧透：文本搜索逻辑会将搜索到的文本替换为空，然后将结果与原始文本进行比较。如果它们不同，说明文本被找到了。
- en: Booleans
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 布尔值
- en: 'Booleans are ever-present in compiled languages having two, and *only* two,
    possible states: true or false. Once set, you can use them alone as the conditional
    clause in an if command to be evaluated as true or false, thus determining whether
    a block of code should be executed. Batch doesn’t support booleans explicitly,
    but with a little ingenuity, you can create them.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值在编译语言中无处不在，它们只有两个状态：true 或 false。一旦设置，你可以单独使用它们作为 if 命令中的条件语句，评估为真或假，从而决定是否执行一段代码。Batch
    并不明确支持布尔值，但通过一点巧妙的设计，你可以创建布尔值。
- en: 'Much ink has been spilled exploring the question, “Does God exist?” This isn’t
    one of those books, but we can answer a far easier question, “Does *God.txt* exist?”
    In [Chapter 4](chapter4.xhtml), I showed how to use an if command to determine
    the existence or nonexistence of a text file:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 许多篇幅已被用来探讨“上帝是否存在？”这个问题。这不是那类书籍，但我们可以回答一个更简单的问题：“*God.txt* 是否存在？”在[第4章](chapter4.xhtml)中，我展示了如何使用
    if 命令来判断一个文本文件是否存在：
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: A variable is being set to Found or NotFound based on the status of the file
    at a certain instant in time. The god variable can then be interrogated in the
    future to determine whether *God.txt* existed at that earlier time. It works,
    but it’s a bit clunky; a boolean would provide a more elegant solution. You could
    then easily reference the boolean as many times as is necessary throughout the
    code and maybe even reset it.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一个变量根据某一时刻文件的状态被设置为 `Found` 或 `NotFound`。然后，可以在未来询问 `god` 变量，以确定 *God.txt* 是否在那个较早的时刻存在。它能工作，但有点笨重；布尔值将提供更优雅的解决方案。然后，你可以根据需要在代码中多次引用这个布尔值，甚至可能重置它。
- en: Setting and Evaluating Booleans
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置和评估布尔值
- en: 'In Batch, a boolean, like all variables, is really just some text, but text
    that can be evaluated as true or false. As a convention, I always prefix boolean
    variable names with a lowercase b followed by an uppercase character to make it
    stand out as a boolean. (A more verbose and descriptive option is to lead with
    the bool text.) Let’s duplicate the logic in the previous example with the only
    difference being that the clunky variable god is replaced with the boolean, bGod,
    which gets set to true if *God.txt* is found and false if it isn’t:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Batch 中，布尔值像所有变量一样，本质上只是一些文本，但这些文本可以被评估为真或假。按照惯例，我总是将布尔变量名以小写字母 b 开头，后跟大写字母，以便使其作为布尔值脱颖而出。（一个更冗长且描述性的选项是以
    `bool` 文字开头。）让我们复制之前示例中的逻辑，唯一的区别是将笨重的变量 `god` 替换为布尔值 `bGod`，如果找到 *God.txt* 则将其设置为
    true，否则为 false：
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In other languages, a boolean is explicitly set to true or false. For instance,
    a valid Java command is bGod = true;. But the previous set commands for the Batch
    boolean look a bit different; in particular, each has three equal signs. The first
    is simply for the assignment; the other two are a portion of the assigned value.
    When the conditional clause of the if command is true, we set bGod to true==true;
    if not, false==x is the value. That certainly looks odd, but now the variable,
    while still technically nothing but text, can be evaluated as the conditional
    clause of another if command like so:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他编程语言中，布尔值通常显式设置为 true 或 false。例如，一个有效的 Java 命令是 bGod = true;。但是，Batch 布尔值的前述设置命令看起来有点不同；特别是每个命令都有三个等号。第一个等号仅用于赋值；另外两个则是赋值的一部分。当
    if 命令的条件语句为真时，我们将 bGod 设置为 true==true；如果不是，则值为 false==x。这看起来确实有些奇怪，但现在该变量虽然技术上仍然只是文本，但可以像这样被评估为另一个
    if 命令的条件语句：
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: But how? If bGod had been set to what we consider true, the interpreter resolves
    if %bGod% to if true == true. The variable contains an equality operator, double
    equal signs, with identical values on either side. (Don’t ask about the spaces
    around the operator, but this is what the interpreter sees.) Put all of this after
    an if command, and it evaluates to true.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 那么怎么做呢？如果 bGod 被设置为我们认为的 true，解释器将 %bGod% 解析为 if true == true。该变量包含一个等号操作符，两个相等的等号，并且两边的值是相同的。（别问操作符周围的空格，这就是解释器看到的。）将所有这些放在
    if 命令后面，它将被评估为真。
- en: If the variable had been set to what we consider false, however, the command
    would’ve been resolved to if false == x, which compares two values that clearly
    differ, resulting in the code after the if command not to be executed.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果该变量被设置为我们认为的 false，那么命令将被解析为 if false == x，它比较两个明显不同的值，导致 if 命令后面的代码不被执行。
- en: 'The if command with a boolean can also be used with the not clause:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 带有布尔值的 if 命令还可以与 not 子句一起使用：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If the text, if not %bGod%, resolves to if not true == true, the result of the
    evaluation is *not true* or false. But when the text resolves to the double negative
    if not false == x, it evaluates to *not false* or true, and the text is written
    to the console.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文本 if not %bGod% 被解析为 if not true == true，那么评估结果是 *not true* 或 false。但当文本解析为双重否定
    if not false == x 时，它将评估为 *not false* 或 true，并且文本将被写入控制台。
- en: Converting Booleans to Strings
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 布尔值转换为字符串
- en: I’ve chosen true==true as the value for true, but x==x or 0 == 0 would’ve worked
    and required fewer keystrokes. Even false==false would evaluate to true, but let’s
    not be difficult. Likewise, false==x could’ve contained any two differing strings,
    but I chose these values so that either the text true or false is at the forefront
    of the boolean value. The structure of the boolean variable allows you to mimic
    another feature of booleans in compiled code—the conversion of the boolean to
    a string.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择 true==true 作为 true 的值，但 x==x 或 0 == 0 也能工作，并且需要更少的击键。即使是 false==false 也会评估为
    true，但我们不必这样做。同样，false==x 本来可以包含任何两个不同的字符串，但我选择了这些值，使得布尔值的文本 true 或 false 始终处于前沿。布尔变量的结构使你能够模仿编译代码中的另一个布尔特性——将布尔值转换为字符串。
- en: 'As structured, you can convert Batch booleans to the string true or false by
    simply stripping off everything after and including the two equal signs. When
    we get to the for command in [Chapter 19](chapter19.xhtml), I’ll show exactly
    how that works, but for now, the following line of code truncates the extraneous
    text:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，你可以通过简单地去掉等号后面的所有内容，将 Batch 布尔值转换为字符串 true 或 false。当我们在 [第 19 章](chapter19.xhtml)中讲到
    for 命令时，我将展示具体是如何实现的，但现在，下面的代码行可以截断多余的文本：
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: After this executes against a valid boolean, the *boolean string* variable named
    bStrGod will contain either true or false.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在此执行之后，针对有效的布尔值，名为 bStrGod 的 *布尔字符串* 变量将包含 true 或 false。
- en: (If boolean variables are prefixed with b, it might make sense to prefix boolean
    string variables with bs, but the convention that I’ve settled on heads off accusations
    of my code being full of BS.)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: （如果布尔变量以 b 开头，那么将布尔字符串变量以 bs 开头可能是有意义的，但我选择的惯例避免了人们对我的代码充满 BS 的指责。）
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: Strings are ubiquitous in Batch, and in this chapter, I detailed how to build
    and concatenate them. Substringing and text replacement are two powerful and useful
    tools that all Batch coders should master, despite their esoteric syntaxes. Booleans
    are not so ubiquitous, but I hope that I demonstrated the usefulness of this underused
    data type.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串在 Batch 中无处不在，在本章中，我详细讲解了如何构建和连接字符串。子字符串提取和文本替换是两个强大而有用的工具，尽管它们的语法较为深奥，但所有
    Batch 编程人员都应该掌握。布尔值虽然不那么常见，但我希望我已经展示了这一不常用数据类型的实用性。
- en: In the next chapter, I’ll continue the discussion on data types, delving into
    the numeric data types. I’ll detail integers of three different bases and floating-point
    numbers, providing a great opportunity to explore how arithmetic is tackled in
    Batch.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我将继续讨论数据类型，深入探讨数字数据类型。我将详细介绍三种不同进制的整数和浮点数，为探索 Batch 中如何处理算术运算提供一个很好的机会。
