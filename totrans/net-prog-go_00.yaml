- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: With the advent of the internet came an ever-increasing demand for network engineers
    and developers. Today, personal computers, tablets, phones, televisions, watches,
    gaming systems, vehicles, common household items, and even doorbells communicate
    over the internet. Network programming makes all this possible. And *secure* network
    programming makes it trustworthy, driving increasing numbers of people to adopt
    these services. This book will teach you how to write contemporary network software
    using Go’s asynchronous features.
  prefs: []
  type: TYPE_NORMAL
- en: Google created the Go programming language in 2007 to increase the productivity
    of developers working with large code bases. Since then, Go has earned a reputation
    as a fast, efficient, and safe language for the development and deployment of
    software at some of the largest companies in the world. Go is easy to learn and
    has a rich standard library, well suited for taking advantage of multicore, networked
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: This book details the basics of network programming with an emphasis on security.
    You will learn socket-level programming including TCP, UDP, and Unix sockets,
    interact with application-level protocols like HTTPS and HTTP/2, serialize data
    with formats like Gob, JSON, XML, and protocol buffers, perform authentication
    and authorization for your network services, create streams and asynchronous data
    transfers, write gRPC microservices, perform structured logging and instrumentation,
    and deploy your applications to the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of our journey, you should feel comfortable using Go, its standard
    library, and popular third-party packages to design and implement secure network
    applications and microservices. Every chapter uses best practices and includes
    nuggets of wisdom that will help you avoid potential pitfalls.
  prefs: []
  type: TYPE_NORMAL
- en: Who This Book Is For
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you’d like to learn how to securely share data over a network using standard
    protocols, all the while writing Go code that is stable, secure, and effective,
    this book is for you.
  prefs: []
  type: TYPE_NORMAL
- en: The target reader is a security-conscious developer or system administrator
    who wishes to take a deep dive into network programming and has a working knowledge
    of Go and Go’s module support. That said, the first few chapters introduce basic
    networking concepts, so networking newcomers are welcome.
  prefs: []
  type: TYPE_NORMAL
- en: Staying abreast of contemporary protocols, standards, and best practices when
    designing and developing network applications can be difficult. That’s why, as
    you work through this book, you’ll be given increased responsibility. You’ll also
    be introduced to tools and tech that will make your workload manageable.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Go
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow along with the code in this book, install the latest stable version
    of Go available at [https://golang.org/](https://golang.org/)*.* For most programs
    in this book, you’ll need at least Go 1.12\. That said, certain programs in this
    book are compatible with only Go 1.14 or newer. The book calls out the use of
    this code.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that the Go version available in your operating system’s package
    manager may be several versions behind the latest stable version.
  prefs: []
  type: TYPE_NORMAL
- en: Recommended Development Environments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The code samples in this book are mostly compatible with Windows 10, Windows
    Subsystem for Linux, macOS Catalina, and contemporary Linux distributions, such
    as Ubuntu 20.04, Fedora 32, and Manjaro 20.1\. The book calls out any code samples
    that are incompatible with any of those operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Some command line utilities used to test network services, such as `curl` or
    `nmap`, may not be part of your operating system’s standard installation. You
    may need to install some of these command line utilities by using a package manager
    compatible with your operating system, such as Homebrew at [https://brew.sh/](https://brew.sh/)
    for macOS or Chocolatey at [https://chocolatey.org/](https://chocolatey.org/)
    for Windows 10\. Contemporary Linux operating systems should include newer binaries
    in their package managers that will allow you to work through the code examples.
  prefs: []
  type: TYPE_NORMAL
- en: What’s in This Book
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book is divided into four parts. In the first, you’ll learn the foundational
    networking knowledge you’ll need to understand before you begin writing network
    software.
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 1: An Overview of Networked Systems** introduces computer network
    organization models and the concepts of bandwidth, latency, network layers, and
    data encapsulation.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Chapter 2:******Resource Location and Traffic Routing** teaches you how human-readable
    names identify network resources, how devices locate network resources using their
    addresses, and how traffic gets routed between nodes on a network.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Part II of this book will put your new networking knowledge to use and teach
    you how to write programs that communicate using TCP, UDP, and Unix sockets. These
    protocols allow different devices to exchange data over a network and are fundamental
    to most network software you’ll encounter or write.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 3: Reliable TCP Data Streams** takes a deeper dive into the Transmission
    Control Protocol’s handshake process, as well as its packet sequence numbering,
    acknowledgments, retransmissions, and other features that ensure reliable data
    transmission. You will use Go to establish and communicate over TCP sessions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Chapter 4: Sending TCP Data** details several programming techniques for
    transmitting data over a network using TCP, proxying data between network connections,
    monitoring network traffic, and avoiding common connection-handling bugs.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Chapter 5: Unreliable UDP Communication** introduces you to the User Datagram
    Protocol, contrasting it with TCP. You’ll learn how the difference between the
    two translates to your code and when to use UDP in your network applications.
    You’ll write code that exchanges data with services using UDP.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Chapter 6: Ensuring UDP Reliability** walks you through a practical example
    of performing reliable data transfers over a network using UDP.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Chapter 7: Unix Domain Sockets** shows you how to efficiently exchange data
    between network services running on the same node using file-based communication.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The book’s third part teaches you about application-level protocols such as
    HTTP and HTTP/2\. You’ll learn how to build applications that securely interact
    with servers, clients, and APIs over a network using TLS.
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 8: Writing HTTP Clients** uses Go’s excellent HTTP client to send
    requests to, and receive resources from, servers over the World Wide Web.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Chapter 9: Building HTTP Services** demonstrates how to use handlers, middleware,
    and multiplexers to build capable HTTP-based applications with little code.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Chapter 10: Caddy: A Contemporary Web Server** introduces you to a contemporary
    web server named Caddy that offers security, performance, and extensibility through
    modules and configuration adapters.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Chapter 11: Securing Communications with TLS** gives you the tools to incorporate
    authentication and encryption into your applications using TLS, including mutual
    authentication between a client and a server.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Part IV shows you how to serialize data into formats suitable for exchange over
    a network; gain insight into your services; and deploy your code to Amazon Web
    Services, Google Cloud, and Microsoft Azure.
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 12: Data Serialization** discusses how to exchange data between applications
    that use different platforms and languages. You’ll write programs that serialize
    and deserialize data using Gob, JSON, and protocol buffers and communicate using
    gRPC.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Chapter 13: Logging and Metrics** introduces tools that provide insight into
    how your services are working, allowing you to proactively address potential problems
    and recover from failures.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Chapter 14: Moving to the Cloud** discusses how to develop and deploy a serverless
    application on Amazon Web Services, Google Cloud, and Microsoft Azure.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
