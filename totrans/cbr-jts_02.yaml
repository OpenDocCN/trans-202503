- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Guarding with Special Care
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Even castles with strong fortifications should be guarded, paying particular
    attention to the recessed corners.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: What shinobi should keep in mind when stealing into a castle or camp are the
    naturally fortified and difficult directions, the woods, and blind spots.
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '—Yoshimori Hyakushu #10'
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Shinobi were historically proficient infiltrators. The ancient scrolls describe
    how to quickly identify and brutally exploit weak spots in an enemy’s fortifications.
    The scrolls also stress that shinobi should use higher-order thinking to creatively
    apply their knowledge when building their own defenses. *Bansenshūkai* advises
    commanders tasked with defending a camp or castle to identify, inspect, and guard
    with special care the areas where shinobi are most likely to attempt entry, such
    as the recessed corners of a castle’s stone walls, rubbish disposal areas, water
    pipes, and nearby woods or bushes.^([1](b01.xhtml#endnote-28))
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Attack Vectors
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Consider the castle’s wall an *attack surface* and weak points in the castle’s
    wall (for example, the water pipe or poorly placed stones in the wall that provide
    footholds) *attack vectors*. The term *attack surface* refers to all the software,
    networks, and systems that the adversary has the opportunity to attack. Any point
    within the attack surface can be an attack vector, or the means an attacker uses
    to gain access. In cybersecurity, it’s always advisable to reduce your attack
    surface. That said, while reducing the castle footprint would shrink the attack
    surface that needs to be defended, it wouldn’t mitigate the amount of damage the
    adversary could inflict or prevent any given attack vector from being exploited.
    Nonetheless, attack surface reduction can make guarding the target easier.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '*Bansenshūkai*’s volume on hidden infiltration includes a list of well-intentioned
    defensive techniques, weapons, and modes of thought that can actually expose a
    camp to risk. It implores commanders to consider how everything in their environment
    could be used against them. For example, the scroll instructs infiltrators to
    look for *shinobi-gaeshi*, spikes set up around an enemy’s encampment to deter
    would-be attackers.^([2](b01.xhtml#endnote-29)) Because defenders placed these
    spikes in locations they considered vulnerable, the spikes’ presence told enemy
    shinobi where the defenses were inadequate; defenders were essentially broadcasting
    their insecurities. Shinobi knew they could remove these spikes—doing so was relatively
    easy, as they were almost always attached as an afterthought—and gain passage
    through the weakest spot in the target’s perimeter.^([3](b01.xhtml#endnote-30))'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: A succinct example of such security that is “bolted on” as an afterthought is
    found in Microsoft Windows’ PowerShell. The multitude of security features added
    on top of the .NET framework with each new version of PowerShell do not address
    the product’s core flaws and, in fact, have allowed threat actors to create an
    armory of tools and weapons that can be used to infiltrate systems that support
    PowerShell. This is an excellent case study for any security researcher wishing
    to examine *shinobi-gaeshi* more closely.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的“事后加固”安全例子可以在微软Windows的PowerShell中找到。每个新版本的PowerShell在.NET框架之上增加的众多安全功能并没有解决该产品的核心缺陷，事实上，它们使得威胁行为者能够创建一整套工具和武器，用以渗透支持PowerShell的系统。这是任何希望更深入研究*忍返*的安全研究人员的一个极好案例。
- en: The ancient castles still standing in Japan are not typically adorned with spikes,
    but they do tend to have water pipes that are too small for a human to climb through,
    perimeters cleared of vegetation, and no recessed corners in the outer walls—all
    of which suggest that emperors, taking their cues from shinobi, made efforts over
    time to eliminate these vulnerabilities. However, while it is ideal to eliminate
    weaknesses so they do not require guarding, it is not always possible.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 日本仍然屹立的古老城堡通常不会装饰尖刺，但它们确实往往有太小的水管，使人无法通过，周围的植被被清除，外墙也没有凹陷的角落——所有这些都表明，皇帝们从忍者那里获得灵感，随着时间的推移，采取了措施消除这些弱点。然而，虽然消除弱点是理想的，因为这样就不需要看守，但这并非总是可能的。
- en: In this chapter, we’ll discuss the concept of guarding and its proposed place
    within the five functions of cybersecurity. We will then discuss how to identify
    the vulnerable areas that may require guarding with threat modeling.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论守卫的概念及其在网络安全五大职能中的拟议位置。然后，我们将讨论如何通过威胁建模识别可能需要守卫的脆弱区域。
- en: The Concept of Guarding
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 守卫的概念
- en: '*Guarding* is the act of exercising protective control over assets by observing
    the environment, detecting threats, and taking preventative action. For example,
    the lord of a castle identifies a fairly large water drainage pipe in the castle
    wall as a weak point. The lord retains the pipe, which performs an important function
    in allowing water to exit, but requires a guard to stand nearby, preventing attackers
    from using the pipe as a means of access.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*守卫*是通过观察环境、发现威胁并采取预防措施来对资产进行保护控制的行为。例如，城堡的领主发现城堡墙上的一个相当大的排水管是一个弱点。领主保留了这个管道，因为它在允许水排出方面发挥着重要作用，但要求有卫兵站在附近，防止攻击者利用这个管道作为进入手段。'
- en: In general, organizations tend to keep cybersecurity staff in the dark about
    weak systems, network blind spots, or vulnerable attack vectors that should be
    guarded with special care. Some organizations assume it’s entirely the cybersecurity
    staff’s responsibility to discover security flaws in the network. Many stakeholders
    have not identified these attack vectors in the first place, or if no commercial
    solution exists or no commonly accepted countermeasure can be applied easily,
    they simply ignore the weaknesses and hope they will not be exploited.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，组织倾向于让网络安全人员对弱系统、网络盲点或需要特别小心守卫的脆弱攻击向量一无所知。一些组织认为发现网络安全缺陷完全是网络安全人员的责任。许多利益相关者根本没有首先识别出这些攻击向量，或者如果没有现成的商业解决方案，或者没有广泛接受的防范措施能够轻松应用，他们就简单忽视这些弱点，希望它们不会被利用。
- en: In some instances, management directs security personnel *not* to perform basic
    logging, scanning, or patching of legacy systems for fear that touching them will
    disrupt business operations. In more political organizations, it’s common for
    a threat to not be recognized as a valid concern unless it’s identified through
    a formal documentation process. Imagine seeing that a castle is missing its west
    wall, reporting this obvious vulnerability to the king, and having the king dismiss
    your concerns because his guards have not mentioned it in their official reports.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，管理层指示安保人员*不要*进行基本的日志记录、扫描或对遗留系统进行修补，因为担心触碰这些系统会干扰业务运营。在更具政治性的组织中，除非通过正式的文档过程确认，否则常常不会将威胁视为有效的关注点。试想一下，如果发现一座城堡缺少西墙，你将这一明显的漏洞报告给国王，但国王却因卫兵在官方报告中没有提到此事而忽视你的担忧。
- en: Guarding Within a Cybersecurity Framework
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在网络安全框架中的守卫
- en: 'The *National Institute of Standards and Technology (NIST) Cybersecurity Framework*^([4](b01.xhtml#endnote-31))
    seeks to prevent these common missteps and improve organizations’ resilience to
    cyber threats through five core cybersecurity functions: identify, protect, detect,
    respond, and recover. These functions help identify vulnerabilities in networks
    and systems by using common information security tools and processes.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: For instance, most organizations begin the process of identifying weaknesses
    by conducting vulnerability or application scans of systems on their network—this
    is the *identify* function. Effective and reliable, these scans identify obvious
    security issues such as unpatched software, active accounts with blank passwords,
    default factory credentials, unparameterized input, and SSH ports open to the
    internet. Next comes the *protect* function. Upon discovery of an unsecured system,
    the scanner documents the problem, and then security staff fixes or mitigates
    the vulnerability with patches; configuration changes; or long-term architectural,
    security system, or software implementations.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'If the security staff is unable to protect a system that has been identified
    as an attack vector, I believe they should *guard* it through human controls.
    However, a guard function is missing from the NIST framework. Instead, we move
    straight to the *detect* function: the security staff attempts to detect an adversary
    by monitoring and investigating anomalous events. Once the security staff detects
    infiltration, only then do they execute the *respond* function by containing the
    threat, neutralizing the threat, and reporting it.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'Last is the *recovery* function: restoring the systems and data to operational
    status, as well as improving their ability to resist future attacks.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: While essential to a robust security profile, these safeguards are prevention-,
    protection-, or response-based functions. The cybersecurity industry rarely applies
    the concept of guarding—using human controls and protection—to information systems,
    because it’s not feasible for a human defender to manually inspect and approve
    every email, web page, file, or packet that leaves or enters the environment in
    the way that a gate guard could watch people or packages entering a building.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: For example, computers with 1GB network connections can process more than 100,000
    packets per second, far more than any human could inspect. Instead of using human
    guards, defenders either rely heavily on automated security controls or simply
    accept/ignore risk as part of doing business. Guarding can still be feasible within
    a modern digital network, however, if guards are inserted only into areas that
    need special care and attention, such as the most likely attack vectors. This
    is why threat modeling to identify these areas in your organization will be useful.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Threat Modeling
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The closest thing to guarding in cybersecurity is *threat hunting*, which involves
    vigorously seeking out indicators of infiltration in logs, forensic data, and
    other observable evidence. Few organizations perform threat hunting, and even
    in those that do, a hunter’s job is to detect, not guard.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Nonetheless, it’s important that cyber defenders go beyond the conventional
    framework, continually imagining new ways in which networks and information systems
    could be attacked, and implement the necessary defenses. To this end, defenders
    can use threat modeling to implement information flow controls and design safeguards
    against threats rather than simply react to them.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Typically performed only by cyber-mature organizations, threat modeling involves
    documenting a *data flow diagram (DFD)*, which describes the flow of data and
    processes inside systems. DFDs are typically documented as a type of flowchart,
    but can be roughly represented by a detailed network map. A DFD can be used as
    a tool for structured analysis of your attack surface that allows you to think
    of attack scenarios within the parameters of the documented information systems.
    It doesn’t require vulnerability scanning, proving of the attack scenario by red
    teams, or validation from a compliance framework, and organizations don’t need
    to wait for a security incident to prove a threat model before acting to guard
    against the vulnerability.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the modern cyber equivalents to “recessed corners of a castle’s
    stone walls, rubbish disposal areas, water pipes, and nearby woods or bushes”
    of your environment could help you identify attack vectors that may need guarding
    with special care.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider this example: as part of their nightly duties, a security guard pulls
    on every doorknob in an office to make sure the doors are locked. If they find
    an unlocked door, they lock it, secure the keys, and file a security incident
    ticket.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: It is later determined that a security incident occurred because door keys were
    copied or stolen, so the organization adds a second-level authenticator control
    (such as a keypad or badge reader) to the doors, changes the locks, and issues
    new keys. These new preventive security controls satisfy compliance auditors,
    and the ticket reporting the unsecured doors is closed. The chief information
    security officer (CISO) even hires a red team to perform a narrow-scope physical
    penetration test of the new door-locking mechanisms, and the team confirms that
    they were denied access because of the enhanced security measures.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: However, once we conduct threat-modeling exercises, we identify that it’s possible
    to push moveable ceiling tiles out of the way and climb over the office wall,
    bypassing the new security measures altogether. To counteract this, we could add
    controls, such as security cameras or motion detectors in the ceiling crawl space,
    or we could install solid, tunnel-resistant ceilings and floors. Guards could
    even be hired and trained to look for evidence of disturbed ceiling tiles, ceiling
    particulate on the floor, or footprints on the walls. Guarding against this threat
    would require that guards be posted inside the room or stationed within the ceiling
    crawl space, armed with the authority and tools to protect the room from intruders.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: The feasibility of implementing such countermeasures is low—you might be laughed
    out of your manager’s office for even suggesting them. It’s easy to see why organizations
    are more likely to accept or ignore certain threats than attempt to repel them,
    and this is likely why the NIST Cybersecurity Framework doesn’t include a guard
    function. If thoughtfully informed by detailed threat modeling and carefully implemented
    in a creative and deliberate manner, however, this guard-centric mode of thinking
    can bolster the security of information systems and networks.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: An example of a scenario suitable for the implementation of the guard function
    is in *jump boxes*. Jump boxes are systems that span two or more network boundaries,
    allowing administrators to log in remotely to the jump box from one network and
    “jump” to another network to gain access to it. The conventional cybersecurity
    framework advises hardening jump box systems by patching all known vulnerabilities,
    restricting access with various firewall rules, and monitoring audit logs for
    anomalous events such as unauthorized access. However, such technical controls
    are often attacked or bypassed. A guard, on the other hand, could physically disconnect
    the internal network cable from the other network and connect it directly only
    after verifying with the administrator that they have approval to execute remote
    commands against these systems. The guard could also actively monitor actions
    on the machine in real time and forcibly terminate the session anytime they observe
    malicious or unauthorized actions. Implementing the guard function in this way
    might mean hiring a human guard to sit in the data center to protect both physical
    and remote access to these sensitive systems.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Using Threat Modeling to Find Potential Attack Vectors
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The basic steps for identifying attack vectors are to follow the guidelines
    for threat modeling, starting with creating a DFD. Once potential attack vectors
    are identified from the DFD, the shinobi scrolls recommend inspecting them to
    determine what technical security controls can be implemented to protect them.
    Then, as a last resort, use guards to defend these areas as well. You can use
    the network map you made in the previous chapter to help create the DFD or use
    it as a rough substitute.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '*Model your information systems.* Create an accurate DFD with the help of your
    organization’s network, security, development, business, and other IT system owners
    and experts. It does not need to use Unified Modeling Language (UML) or other
    advanced concepts—it simply needs to accurately represent your systems and the
    information within them. Note that large, complex systems can easily take a team
    more than six months to diagram.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*STRIDE and guard.* STRIDE is a threat-modeling methodology developed by Microsoft^([5](b01.xhtml#endnote-32))
    to describe what could go wrong in an information system. The acronym comes from
    the ways in which an attacker could violate six properties of the system:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **S**poofing Identity | = | Authentication |'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **T**ampering with Data | = | Integrity |'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **R**epudiation/Deniability | = | Nonrepudiation |'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **I**nformation Disclosure | = | Confidentiality |'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **D**enial of Service | = | Availability |'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **E**levation of Privilege | = | Authorization |'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: To use STRIDE, you will review your DFD and, at every point where there is data
    input, data processing, data output, or other data flows/rules, hypothesize how
    an adversary may threaten it. For example, if a system requires a thumbprint to
    verify a user’s identity before allowing access to the system, you might consider
    how they could spoof the thumbprint to impersonate a different user. Similarly,
    you could think about ways they could tamper with the fingerprint database to
    insert their print, or you could explore a scenario in which the attacker causes
    the fingerprint scanner to go down, allowing unauthorized access through a weaker
    authentication process.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After learning this framework, you can use it to challenge any imagined threat
    models that do not accurately represent your systems or scenarios that do not
    describe how a plausible threat impacts a specific component, surface, or vector.
    This may require inviting technical subject matter experts to threat-modeling
    sessions.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Suppose, for example, that an organizational threat-modeling session produces
    the following scenario: “The threat of malware compromises the integrity of internal
    databases.”'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This threat is not properly modeled. Among other pieces of critical information,
    the scenario does not describe how malware could be delivered and installed. Nor
    does it describe how the malware would compromise the integrity of the database:
    does it encrypt, delete, or corrupt data? It does not describe which vectors allow
    the threat to impact the system, and it doesn’t consider the information flow
    and controls currently in place or provide realistic countermeasures. If, for
    example, we determined that the most plausible way to infect an internal business
    database with malware would be through a malicious USB drive, then security may
    need to draft policies detailing how staff must use USB drives or install cameras
    to monitor access to USB ports. The organization might decide to grant security
    the ability to turn USBs on or off, dictate which drives can interface with USBs,
    control the information flow and direction of USB ports, inspect the files on
    USB drives before granting access to the requestor, control access with hardware
    or software locks, or even hot-glue the USB ports shut. Such measures, resulting
    from thorough threat modeling, allow security personnel to guard against specific
    threats with special care, rather than having to accept the risk or being limited
    to protect and detect functions.'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Do not advertise bolted-on security.* Threat modeling is an iterative, infinite
    process of evaluating new threats and developing protective countermeasures. In
    your haste to protect your systems, avoid the use of *shinobi-gaeshi* security
    controls—defensive efforts that may backfire by drawing attention to your vulnerable
    areas. Often because of time, resource, or operational restrictions, you may have
    taken only half measures that a motivated, sophisticated threat actor can defeat.
    For example, hot glue in a USB port can be removed with isopropyl alcohol. Where
    possible, assess the viability of a pure security-first defense approach.'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the USB threat example, the USB interacts with the hardware abstraction layer
    (HAL) that sits below the OS kernel. It cannot be fully protected or mitigated
    with software and policy controls, as those exist above the kernel and can be
    bypassed. Therefore, a more complete solution might be to implement a motherboard
    and chassis configuration in which USB ports do not even exist. In contrast, hot
    glue in the USB port advertises to motivated threat actors that you have not properly
    addressed the security of USBs, and it will likely be a successful attack vector
    for them should they be able to pull it free—just as the shinobi pulled out the
    spikes bolted onto pipes and walls in ancient times.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Recommended Security Controls and Mitigations
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Where relevant, each recommendation is presented with an applicable security
    control from the NIST 800-53 standard, and it should be evaluated through the
    lens of guarding with special care.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: 'Review the results of auditors, red team assessments, vulnerability scans,
    and incident reports to find vulnerabilities in your environment that cannot be
    easily patched or mitigated with controls (that is, those that require special
    guarding). [CA-2: Security Assessments; CA-8: Penetration Testing; IR-6: Incident
    Reporting | (2) Vulnerabilities Related to Incidents; RA-5: Vulnerability Scanning]'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Perform threat modeling of your environment to identify vulnerabilities. Then
    determine which ones can be designed out of your environment. Explore the concept
    of guarding security functions and apply those controls to threats that cannot
    be easily purged. [SA-8: Security Engineering Principles; SA-14: Criticality Analysis;
    SA-15: Development Process, Standards, and Tools | (4) Threat Modeling/Vulnerability
    Analysis; SA-17: Developer Security Architecture and Design]'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To deter, protect against, and ensure rapid response to threats, hire real-time
    security personnel as guards and integrate them into vulnerable areas of business
    operations. [IR-10: Integrated Information Security Analysis Team]'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Debrief
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter has helped you think about the places in a network environment
    that an adversary is likely to target for infiltration. You have also been introduced
    to the concept of guarding with direct human interaction between information systems
    and processes. You may have utilized your network map from the previous chapter
    or created your own data flow diagram (DFD) as a representation of your environment
    to identify likely attack vectors and potential STRIDE threats that could be mitigated
    with guards.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll explore a “xenophobic” security concept used by the
    ancient ninja that may hinder adversaries from finding any common ground or footholds
    in your environment to even start their attack vector process.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
