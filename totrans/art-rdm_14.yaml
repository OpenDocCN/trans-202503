- en: '**INDEX**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**A**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: alleles, [85](ch03.xhtml#page_85), [93](ch03.xhtml#page_93)
  prefs: []
  type: TYPE_NORMAL
- en: Apple II, [212](ch07.xhtml#page_212)
  prefs: []
  type: TYPE_NORMAL
- en: artificial intelligence (AI), [253](ch08.xhtml#page_253)–[254](ch08.xhtml#page_254)
  prefs: []
  type: TYPE_NORMAL
- en: atmospheric noise, [17](ch01.xhtml#page_17)
  prefs: []
  type: TYPE_NORMAL
- en: Audacity, [12](ch01.xhtml#page_12), [240](ch08.xhtml#page_240)
  prefs: []
  type: TYPE_NORMAL
- en: '**B**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: backpropagation, [182](ch06.xhtml#page_182)
  prefs: []
  type: TYPE_NORMAL
- en: Bacon, Sir Francis, [40](ch02.xhtml#page_40)
  prefs: []
  type: TYPE_NORMAL
- en: bare-bones PSO, [114](ch04.xhtml#page_114)
  prefs: []
  type: TYPE_NORMAL
- en: Barnsley, Michael, [224](ch07.xhtml#page_224)
  prefs: []
  type: TYPE_NORMAL
- en: BASIC program, [212](ch07.xhtml#page_212)
  prefs: []
  type: TYPE_NORMAL
- en: Bass, Thomas, [12](ch01.xhtml#page_12)
  prefs: []
  type: TYPE_NORMAL
- en: Bayes, Thomas, [327](ch012.xhtml#page_327)
  prefs: []
  type: TYPE_NORMAL
- en: Bayesian inference, [328](ch012.xhtml#page_328)
  prefs: []
  type: TYPE_NORMAL
- en: Bayes’ theorem, [328](ch012.xhtml#page_328)
  prefs: []
  type: TYPE_NORMAL
- en: Bernoulli crossover, [116](ch04.xhtml#page_116)
  prefs: []
  type: TYPE_NORMAL
- en: Bertrand, Joseph, [100](ch03.xhtml#page_100)
  prefs: []
  type: TYPE_NORMAL
- en: Bertrand’s paradox, [101](ch03.xhtml#page_101)
  prefs: []
  type: TYPE_NORMAL
- en: big O notation, [301](ch011.xhtml#page_301)
  prefs: []
  type: TYPE_NORMAL
- en: Biles, Al, [253](ch08.xhtml#page_253)
  prefs: []
  type: TYPE_NORMAL
- en: block randomization, [276](ch010.xhtml#page_276)
  prefs: []
  type: TYPE_NORMAL
- en: Bourke, Paul, [229](ch07.xhtml#page_229)
  prefs: []
  type: TYPE_NORMAL
- en: Box, George, [74](ch03.xhtml#page_74)
  prefs: []
  type: TYPE_NORMAL
- en: Box-Muller distribution, [184](ch06.xhtml#page_184)
  prefs: []
  type: TYPE_NORMAL
- en: box plot, [79](ch03.xhtml#page_79)
  prefs: []
  type: TYPE_NORMAL
- en: “Brian’s Theme,” [212](ch07.xhtml#page_212)
  prefs: []
  type: TYPE_NORMAL
- en: '**C**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Calcul des probabilités* (Bertrand), [100](ch03.xhtml#page_100)'
  prefs: []
  type: TYPE_NORMAL
- en: calculus integration, [324](ch012.xhtml#page_324)
  prefs: []
  type: TYPE_NORMAL
- en: Cantor, Georg, [325](ch012.xhtml#page_325)
  prefs: []
  type: TYPE_NORMAL
- en: central limit theorem, [4](ch01.xhtml#page_4)
  prefs: []
  type: TYPE_NORMAL
- en: chaos game, [224](ch07.xhtml#page_224)–[225](ch07.xhtml#page_225)
  prefs: []
  type: TYPE_NORMAL
- en: Chapman estimate, [306](ch011.xhtml#page_306)
  prefs: []
  type: TYPE_NORMAL
- en: Cohen’s *d*, [275](ch010.xhtml#page_275)
  prefs: []
  type: TYPE_NORMAL
- en: color table, [215](ch07.xhtml#page_215)
  prefs: []
  type: TYPE_NORMAL
- en: combinatorial explosion, [298](ch011.xhtml#page_298)
  prefs: []
  type: TYPE_NORMAL
- en: compressed sensing, [255](ch09.xhtml#page_255)–[259](ch09.xhtml#page_259)
  prefs: []
  type: TYPE_NORMAL
- en: aliasing, [263](ch09.xhtml#page_263)
  prefs: []
  type: TYPE_NORMAL
- en: applications, [267](ch09.xhtml#page_267)–[268](ch09.xhtml#page_268)
  prefs: []
  type: TYPE_NORMAL
- en: discrete cosine transformation, [258](ch09.xhtml#page_258)
  prefs: []
  type: TYPE_NORMAL
- en: inverse problem, [257](ch09.xhtml#page_257)
  prefs: []
  type: TYPE_NORMAL
- en: Lasso optimization, [258](ch09.xhtml#page_258)
  prefs: []
  type: TYPE_NORMAL
- en: norm, [258](ch09.xhtml#page_258)
  prefs: []
  type: TYPE_NORMAL
- en: Euclidean, [258](ch09.xhtml#page_258)
  prefs: []
  type: TYPE_NORMAL
- en: Manhattan, [258](ch09.xhtml#page_258)
  prefs: []
  type: TYPE_NORMAL
- en: Nyquist-Shannon sampling theorem, [256](ch09.xhtml#page_256)
  prefs: []
  type: TYPE_NORMAL
- en: sparsity, [257](ch09.xhtml#page_257)
  prefs: []
  type: TYPE_NORMAL
- en: underdetermined system, [257](ch09.xhtml#page_257)
  prefs: []
  type: TYPE_NORMAL
- en: uniform sampling, [256](ch09.xhtml#page_256)
  prefs: []
  type: TYPE_NORMAL
- en: confusion matrix, [187](ch06.xhtml#page_187), [191](ch06.xhtml#page_191)
  prefs: []
  type: TYPE_NORMAL
- en: continuous distribution, [3](ch01.xhtml#page_3), [340](ch012.xhtml#page_340)
  prefs: []
  type: TYPE_NORMAL
- en: Coppersmith-Winograd algorithm, [305](ch011.xhtml#page_305)
  prefs: []
  type: TYPE_NORMAL
- en: Cramer’s rule, [236](ch07.xhtml#page_236)
  prefs: []
  type: TYPE_NORMAL
- en: cryptographically secure, [27](ch01.xhtml#page_27)
  prefs: []
  type: TYPE_NORMAL
- en: cryptography, [39](ch02.xhtml#page_39)
  prefs: []
  type: TYPE_NORMAL
- en: cumulative distribution function (CDF), [325](ch012.xhtml#page_325)
  prefs: []
  type: TYPE_NORMAL
- en: curse of dimensionality, [349](ch012.xhtml#page_349)
  prefs: []
  type: TYPE_NORMAL
- en: curve fitting, [106](ch04.xhtml#page_106), [109](ch04.xhtml#page_109)
  prefs: []
  type: TYPE_NORMAL
- en: '**D**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Darwin, Charles, [85](ch03.xhtml#page_85)
  prefs: []
  type: TYPE_NORMAL
- en: data augmentation, [175](ch06.xhtml#page_175), [179](ch06.xhtml#page_179)
  prefs: []
  type: TYPE_NORMAL
- en: dataset
  prefs: []
  type: TYPE_NORMAL
- en: breast cancer, [174](ch06.xhtml#page_174)
  prefs: []
  type: TYPE_NORMAL
- en: irises, [198](ch06.xhtml#page_198)
  prefs: []
  type: TYPE_NORMAL
- en: MNIST, [178](ch06.xhtml#page_178), [208](ch06.xhtml#page_208)
  prefs: []
  type: TYPE_NORMAL
- en: decision tree, [198](ch06.xhtml#page_198)
  prefs: []
  type: TYPE_NORMAL
- en: interpreting, [200](ch06.xhtml#page_200)
  prefs: []
  type: TYPE_NORMAL
- en: deterministic processes, [21](ch01.xhtml#page_21)
  prefs: []
  type: TYPE_NORMAL
- en: Devroye, Luc, [329](ch012.xhtml#page_329)
  prefs: []
  type: TYPE_NORMAL
- en: differential evolution (DE) algorithm, [105](ch04.xhtml#page_105), [115](ch04.xhtml#page_115)
  prefs: []
  type: TYPE_NORMAL
- en: dinosaurs, [93](ch03.xhtml#page_93)
  prefs: []
  type: TYPE_NORMAL
- en: discrete cosine transformation (DCT), [258](ch09.xhtml#page_258)
  prefs: []
  type: TYPE_NORMAL
- en: discrete distributions, [2](ch01.xhtml#page_2)
  prefs: []
  type: TYPE_NORMAL
- en: divide-and-conquer algorithm, [315](ch011.xhtml#page_315)
  prefs: []
  type: TYPE_NORMAL
- en: duck typing, [111](ch04.xhtml#page_111)
  prefs: []
  type: TYPE_NORMAL
- en: '**E**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Eberhart, Russell, [115](ch04.xhtml#page_115)
  prefs: []
  type: TYPE_NORMAL
- en: enhancing images, [150](ch05.xhtml#page_150)–[159](ch05.xhtml#page_159)
  prefs: []
  type: TYPE_NORMAL
- en: '`ent`, [6](ch01.xhtml#page_6)'
  prefs: []
  type: TYPE_NORMAL
- en: entropy, [7](ch01.xhtml#page_7)
  prefs: []
  type: TYPE_NORMAL
- en: epoch, [187](ch06.xhtml#page_187)
  prefs: []
  type: TYPE_NORMAL
- en: Euclidean distance, [86](ch03.xhtml#page_86), [196](ch06.xhtml#page_196)
  prefs: []
  type: TYPE_NORMAL
- en: Euclidean norm, [258](ch09.xhtml#page_258)
  prefs: []
  type: TYPE_NORMAL
- en: '*Eudaemonic Pie, The* (Bass), [12](ch01.xhtml#page_12)'
  prefs: []
  type: TYPE_NORMAL
- en: evolution, [84](ch03.xhtml#page_84)–[99](ch03.xhtml#page_99)
  prefs: []
  type: TYPE_NORMAL
- en: catastrophic world, [93](ch03.xhtml#page_93)
  prefs: []
  type: TYPE_NORMAL
- en: crossover, [85](ch03.xhtml#page_85)–[86](ch03.xhtml#page_86)
  prefs: []
  type: TYPE_NORMAL
- en: extinction, [101](ch03.xhtml#page_101)
  prefs: []
  type: TYPE_NORMAL
- en: fitness, [86](ch03.xhtml#page_86), [90](ch03.xhtml#page_90)
  prefs: []
  type: TYPE_NORMAL
- en: founder effect, [93](ch03.xhtml#page_93)
  prefs: []
  type: TYPE_NORMAL
- en: genetic drift, [85](ch03.xhtml#page_85), [93](ch03.xhtml#page_93)
  prefs: []
  type: TYPE_NORMAL
- en: genotype, [95](ch03.xhtml#page_95)
  prefs: []
  type: TYPE_NORMAL
- en: gradually changing world, [91](ch03.xhtml#page_91)
  prefs: []
  type: TYPE_NORMAL
- en: mutation, [85](ch03.xhtml#page_85)–[86](ch03.xhtml#page_86), [90](ch03.xhtml#page_90)
  prefs: []
  type: TYPE_NORMAL
- en: natural selection, [85](ch03.xhtml#page_85)
  prefs: []
  type: TYPE_NORMAL
- en: population bottleneck, [93](ch03.xhtml#page_93)
  prefs: []
  type: TYPE_NORMAL
- en: static world, [89](ch03.xhtml#page_89)
  prefs: []
  type: TYPE_NORMAL
- en: evolutionary algorithms, [103](ch04.xhtml#page_103)
  prefs: []
  type: TYPE_NORMAL
- en: differential evolution, [105](ch04.xhtml#page_105), [115](ch04.xhtml#page_115)
  prefs: []
  type: TYPE_NORMAL
- en: genetic, [105](ch04.xhtml#page_105), [114](ch04.xhtml#page_114)
  prefs: []
  type: TYPE_NORMAL
- en: organisms, [104](ch04.xhtml#page_104)
  prefs: []
  type: TYPE_NORMAL
- en: experimental design, [271](ch010.xhtml#page_271)
  prefs: []
  type: TYPE_NORMAL
- en: block randomization, [276](ch010.xhtml#page_276)
  prefs: []
  type: TYPE_NORMAL
- en: control group, [275](ch010.xhtml#page_275)
  prefs: []
  type: TYPE_NORMAL
- en: covariates, [277](ch010.xhtml#page_277)
  prefs: []
  type: TYPE_NORMAL
- en: double-blind study, [278](ch010.xhtml#page_278)
  prefs: []
  type: TYPE_NORMAL
- en: effect size, [275](ch010.xhtml#page_275)
  prefs: []
  type: TYPE_NORMAL
- en: power analysis, [291](ch010.xhtml#page_291)
  prefs: []
  type: TYPE_NORMAL
- en: random noise, [271](ch010.xhtml#page_271)
  prefs: []
  type: TYPE_NORMAL
- en: sample bias, [272](ch010.xhtml#page_272)
  prefs: []
  type: TYPE_NORMAL
- en: simple randomization, [275](ch010.xhtml#page_275)
  prefs: []
  type: TYPE_NORMAL
- en: stratified randomization, [277](ch010.xhtml#page_277)
  prefs: []
  type: TYPE_NORMAL
- en: treatment group, [275](ch010.xhtml#page_275)
  prefs: []
  type: TYPE_NORMAL
- en: explainable AI (XAI), [198](ch06.xhtml#page_198)
  prefs: []
  type: TYPE_NORMAL
- en: exponential distribution, [340](ch012.xhtml#page_340)–[341](ch012.xhtml#page_341)
  prefs: []
  type: TYPE_NORMAL
- en: extreme learning machine, [173](ch06.xhtml#page_173), [189](ch06.xhtml#page_189)
  prefs: []
  type: TYPE_NORMAL
- en: reckless swarm optimization, [194](ch06.xhtml#page_194)–[197](ch06.xhtml#page_197)
  prefs: []
  type: TYPE_NORMAL
- en: '**F**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Farmer, J. Doyne, [12](ch01.xhtml#page_12)
  prefs: []
  type: TYPE_NORMAL
- en: Fast Loaded Dice Roller, [331](ch012.xhtml#page_331)
  prefs: []
  type: TYPE_NORMAL
- en: Fermat, Pierre, [311](ch011.xhtml#page_311)
  prefs: []
  type: TYPE_NORMAL
- en: '`Fetch`, [33](ch01.xhtml#page_33)–[34](ch01.xhtml#page_34)'
  prefs: []
  type: TYPE_NORMAL
- en: fitting data, [116](ch04.xhtml#page_116)–[132](ch04.xhtml#page_132)
  prefs: []
  type: TYPE_NORMAL
- en: Fourier space, [267](ch09.xhtml#page_267)
  prefs: []
  type: TYPE_NORMAL
- en: fractals
  prefs: []
  type: TYPE_NORMAL
- en: attractor, [227](ch07.xhtml#page_227)–[228](ch07.xhtml#page_228)
  prefs: []
  type: TYPE_NORMAL
- en: chaos game, [224](ch07.xhtml#page_224)–[225](ch07.xhtml#page_225)
  prefs: []
  type: TYPE_NORMAL
- en: Hausdorff dimension, [226](ch07.xhtml#page_226)
  prefs: []
  type: TYPE_NORMAL
- en: iterated function system, [227](ch07.xhtml#page_227)
  prefs: []
  type: TYPE_NORMAL
- en: contraction mapping, [228](ch07.xhtml#page_228), [232](ch07.xhtml#page_232)
  prefs: []
  type: TYPE_NORMAL
- en: creating maps, [234](ch07.xhtml#page_234)
  prefs: []
  type: TYPE_NORMAL
- en: map, [228](ch07.xhtml#page_228)–[229](ch07.xhtml#page_229)
  prefs: []
  type: TYPE_NORMAL
- en: self-similar, [224](ch07.xhtml#page_224)
  prefs: []
  type: TYPE_NORMAL
- en: Sierpiński triangle, [225](ch07.xhtml#page_225), [235](ch07.xhtml#page_235)
  prefs: []
  type: TYPE_NORMAL
- en: Freivalds’ algorithm, [301](ch011.xhtml#page_301)–[304](ch011.xhtml#page_304)
  prefs: []
  type: TYPE_NORMAL
- en: '**G**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: galactic algorithms, [304](ch011.xhtml#page_304)–[305](ch011.xhtml#page_305)
  prefs: []
  type: TYPE_NORMAL
- en: Gaussian distribution, [3](ch01.xhtml#page_3)
  prefs: []
  type: TYPE_NORMAL
- en: generative adversarial network, [253](ch08.xhtml#page_253)
  prefs: []
  type: TYPE_NORMAL
- en: generative AI, [253](ch08.xhtml#page_253)–[254](ch08.xhtml#page_254)
  prefs: []
  type: TYPE_NORMAL
- en: genetics. *See* evolution
  prefs: []
  type: TYPE_NORMAL
- en: GenJam, [253](ch08.xhtml#page_253)
  prefs: []
  type: TYPE_NORMAL
- en: Glorot initialization, [184](ch06.xhtml#page_184). *See also* scikit-learn
  prefs: []
  type: TYPE_NORMAL
- en: gradient descent, [182](ch06.xhtml#page_182)
  prefs: []
  type: TYPE_NORMAL
- en: Great Dying, The, [93](ch03.xhtml#page_93)
  prefs: []
  type: TYPE_NORMAL
- en: Grey Wolf Optimizer, [133](ch04.xhtml#page_133)
  prefs: []
  type: TYPE_NORMAL
- en: grid warping
  prefs: []
  type: TYPE_NORMAL
- en: functions, [221](ch07.xhtml#page_221)
  prefs: []
  type: TYPE_NORMAL
- en: rotation, [223](ch07.xhtml#page_223)
  prefs: []
  type: TYPE_NORMAL
- en: Gundersen, Gregory, [353](ch012.xhtml#page_353)
  prefs: []
  type: TYPE_NORMAL
- en: '**H**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Haahr, Mads, [17](ch01.xhtml#page_17)
  prefs: []
  type: TYPE_NORMAL
- en: Halton sequence, [24](ch01.xhtml#page_24)
  prefs: []
  type: TYPE_NORMAL
- en: Hamming distance, [251](ch08.xhtml#page_251)
  prefs: []
  type: TYPE_NORMAL
- en: Hartl, Daniel, [73](ch03.xhtml#page_73)
  prefs: []
  type: TYPE_NORMAL
- en: Hausdorff dimension, [226](ch07.xhtml#page_226)
  prefs: []
  type: TYPE_NORMAL
- en: He initialization, [183](ch06.xhtml#page_183)
  prefs: []
  type: TYPE_NORMAL
- en: Herodotus, [40](ch02.xhtml#page_40)
  prefs: []
  type: TYPE_NORMAL
- en: histogram, [5](ch01.xhtml#page_5)
  prefs: []
  type: TYPE_NORMAL
- en: HotBits, [20](ch01.xhtml#page_20)
  prefs: []
  type: TYPE_NORMAL
- en: Howard, Brian, [212](ch07.xhtml#page_212)
  prefs: []
  type: TYPE_NORMAL
- en: hybrid processes, [26](ch01.xhtml#page_26)
  prefs: []
  type: TYPE_NORMAL
- en: hypothesis testing
  prefs: []
  type: TYPE_NORMAL
- en: Mann-Whitney U, [186](ch06.xhtml#page_186)
  prefs: []
  type: TYPE_NORMAL
- en: t-test, [186](ch06.xhtml#page_186)
  prefs: []
  type: TYPE_NORMAL
- en: '**I**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: IFS Construction Kit, [237](ch07.xhtml#page_237)
  prefs: []
  type: TYPE_NORMAL
- en: image formats, [62](ch02.xhtml#page_62)
  prefs: []
  type: TYPE_NORMAL
- en: grayscale, [62](ch02.xhtml#page_62)
  prefs: []
  type: TYPE_NORMAL
- en: RGB, [62](ch02.xhtml#page_62)
  prefs: []
  type: TYPE_NORMAL
- en: images, unraveled, [263](ch09.xhtml#page_263)–[267](ch09.xhtml#page_267)
  prefs: []
  type: TYPE_NORMAL
- en: inverse problem, [257](ch09.xhtml#page_257)
  prefs: []
  type: TYPE_NORMAL
- en: inverse transform sampling, [340](ch012.xhtml#page_340)
  prefs: []
  type: TYPE_NORMAL
- en: iterated function system, [227](ch07.xhtml#page_227)
  prefs: []
  type: TYPE_NORMAL
- en: attractor, [228](ch07.xhtml#page_228)
  prefs: []
  type: TYPE_NORMAL
- en: contraction mapping, [228](ch07.xhtml#page_228), [232](ch07.xhtml#page_232)
  prefs: []
  type: TYPE_NORMAL
- en: maps, [228](ch07.xhtml#page_228)–[229](ch07.xhtml#page_229), [234](ch07.xhtml#page_234)
  prefs: []
  type: TYPE_NORMAL
- en: '**J**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Jaya, [105](ch04.xhtml#page_105), [113](ch04.xhtml#page_113)
  prefs: []
  type: TYPE_NORMAL
- en: '**K**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Kennedy, James, [115](ch04.xhtml#page_115)
  prefs: []
  type: TYPE_NORMAL
- en: Kilroy was here, [67](ch02.xhtml#page_67)
  prefs: []
  type: TYPE_NORMAL
- en: Kneusel, Paul (composer), [56](ch02.xhtml#page_56)
  prefs: []
  type: TYPE_NORMAL
- en: k-space, [267](ch09.xhtml#page_267)
  prefs: []
  type: TYPE_NORMAL
- en: Kumaraswamy distribution, [342](ch012.xhtml#page_342)
  prefs: []
  type: TYPE_NORMAL
- en: '**L**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`lame`, [249](ch08.xhtml#page_249)'
  prefs: []
  type: TYPE_NORMAL
- en: Lasso optimization, [258](ch09.xhtml#page_258)
  prefs: []
  type: TYPE_NORMAL
- en: Las Vegas algorithm, [296](ch011.xhtml#page_296)
  prefs: []
  type: TYPE_NORMAL
- en: Lincoln-Petersen estimate, [306](ch011.xhtml#page_306)
  prefs: []
  type: TYPE_NORMAL
- en: linear congruential generator, [21](ch01.xhtml#page_21)
  prefs: []
  type: TYPE_NORMAL
- en: lossy compression, [55](ch02.xhtml#page_55). *See also* sound
  prefs: []
  type: TYPE_NORMAL
- en: Łukasiewicz, Jan, [117](ch04.xhtml#page_117)
  prefs: []
  type: TYPE_NORMAL
- en: '**M**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: machine learning
  prefs: []
  type: TYPE_NORMAL
- en: data augmentation, [175](ch06.xhtml#page_175), [179](ch06.xhtml#page_179)
  prefs: []
  type: TYPE_NORMAL
- en: decision tree, [198](ch06.xhtml#page_198)
  prefs: []
  type: TYPE_NORMAL
- en: interpreting, [200](ch06.xhtml#page_200)
  prefs: []
  type: TYPE_NORMAL
- en: extreme learning machine, [173](ch06.xhtml#page_173)
  prefs: []
  type: TYPE_NORMAL
- en: overfitting, [200](ch06.xhtml#page_200)
  prefs: []
  type: TYPE_NORMAL
- en: random forest, [173](ch06.xhtml#page_173), [198](ch06.xhtml#page_198)
  prefs: []
  type: TYPE_NORMAL
- en: bagging, [201](ch06.xhtml#page_201)
  prefs: []
  type: TYPE_NORMAL
- en: bootstrapping, [201](ch06.xhtml#page_201)
  prefs: []
  type: TYPE_NORMAL
- en: ensembling, [203](ch06.xhtml#page_203)
  prefs: []
  type: TYPE_NORMAL
- en: random feature selection, [205](ch06.xhtml#page_205)
  prefs: []
  type: TYPE_NORMAL
- en: magnetic resonance imaging, [267](ch09.xhtml#page_267)
  prefs: []
  type: TYPE_NORMAL
- en: Manhattan norm, [258](ch09.xhtml#page_258)
  prefs: []
  type: TYPE_NORMAL
- en: Mann-Whitney U, [186](ch06.xhtml#page_186)
  prefs: []
  type: TYPE_NORMAL
- en: mark and recapture
  prefs: []
  type: TYPE_NORMAL
- en: Chapman estimate, [306](ch011.xhtml#page_306)
  prefs: []
  type: TYPE_NORMAL
- en: Lincoln-Petersen estimate, [306](ch011.xhtml#page_306)
  prefs: []
  type: TYPE_NORMAL
- en: Markov, Andrey, [349](ch012.xhtml#page_349)
  prefs: []
  type: TYPE_NORMAL
- en: Markov chain, [349](ch012.xhtml#page_349)
  prefs: []
  type: TYPE_NORMAL
- en: stationary distribution, [349](ch012.xhtml#page_349)
  prefs: []
  type: TYPE_NORMAL
- en: transition probability, [349](ch012.xhtml#page_349)
  prefs: []
  type: TYPE_NORMAL
- en: Markov Chain Monte Carlo (MCMC), [349](ch012.xhtml#page_349)
  prefs: []
  type: TYPE_NORMAL
- en: '*Math for Deep Learning* (Kneusel), [5](ch01.xhtml#page_5)'
  prefs: []
  type: TYPE_NORMAL
- en: matrix multiplication, [299](ch011.xhtml#page_299)–[300](ch011.xhtml#page_300)
  prefs: []
  type: TYPE_NORMAL
- en: column vector, [299](ch011.xhtml#page_299)
  prefs: []
  type: TYPE_NORMAL
- en: square, [299](ch011.xhtml#page_299)
  prefs: []
  type: TYPE_NORMAL
- en: McGrayne, Sharon Bertsch, [328](ch012.xhtml#page_328)
  prefs: []
  type: TYPE_NORMAL
- en: melodies, [245](ch08.xhtml#page_245). *See also* sound
  prefs: []
  type: TYPE_NORMAL
- en: Mersenne primes, [310](ch011.xhtml#page_310)
  prefs: []
  type: TYPE_NORMAL
- en: Mersenne Twister (MT19937), [23](ch01.xhtml#page_23)
  prefs: []
  type: TYPE_NORMAL
- en: metaheuristics, [103](ch04.xhtml#page_103)
  prefs: []
  type: TYPE_NORMAL
- en: curve fitting, [106](ch04.xhtml#page_106), [109](ch04.xhtml#page_109)
  prefs: []
  type: TYPE_NORMAL
- en: generic algorithm, [104](ch04.xhtml#page_104)
  prefs: []
  type: TYPE_NORMAL
- en: genetic programming, [116](ch04.xhtml#page_116)
  prefs: []
  type: TYPE_NORMAL
- en: grocery store, [159](ch05.xhtml#page_159)
  prefs: []
  type: TYPE_NORMAL
- en: image enhancement, [150](ch05.xhtml#page_150)
  prefs: []
  type: TYPE_NORMAL
- en: nature-inspired, [133](ch04.xhtml#page_133)–[134](ch04.xhtml#page_134)
  prefs: []
  type: TYPE_NORMAL
- en: objective function, [107](ch04.xhtml#page_107)
  prefs: []
  type: TYPE_NORMAL
- en: packing circles, [137](ch05.xhtml#page_137)
  prefs: []
  type: TYPE_NORMAL
- en: placing cell towers, [142](ch05.xhtml#page_142)
  prefs: []
  type: TYPE_NORMAL
- en: Metropolis-Hastings sampling, [352](ch012.xhtml#page_352)
  prefs: []
  type: TYPE_NORMAL
- en: algorithm, [353](ch012.xhtml#page_353)
  prefs: []
  type: TYPE_NORMAL
- en: burn-in, [354](ch012.xhtml#page_354)
  prefs: []
  type: TYPE_NORMAL
- en: trace plots, [357](ch012.xhtml#page_357)
  prefs: []
  type: TYPE_NORMAL
- en: MiCRO, [133](ch04.xhtml#page_133)
  prefs: []
  type: TYPE_NORMAL
- en: MIDI (Musical Instrument Digital Interface), [245](ch08.xhtml#page_245)
  prefs: []
  type: TYPE_NORMAL
- en: Miller-Rabin test, [311](ch011.xhtml#page_311)–[313](ch011.xhtml#page_313)
  prefs: []
  type: TYPE_NORMAL
- en: non-witness number, [313](ch011.xhtml#page_313)
  prefs: []
  type: TYPE_NORMAL
- en: performance, [314](ch011.xhtml#page_314)–[315](ch011.xhtml#page_315)
  prefs: []
  type: TYPE_NORMAL
- en: test witness number, [312](ch011.xhtml#page_312)
  prefs: []
  type: TYPE_NORMAL
- en: MINSTD generator, [22](ch01.xhtml#page_22)
  prefs: []
  type: TYPE_NORMAL
- en: modular arithmetic, [311](ch011.xhtml#page_311)
  prefs: []
  type: TYPE_NORMAL
- en: moiré pattern, [212](ch07.xhtml#page_212)
  prefs: []
  type: TYPE_NORMAL
- en: Monte Carlo algorithm, [296](ch011.xhtml#page_296)
  prefs: []
  type: TYPE_NORMAL
- en: Moore-Penrose pseudoinverse, [190](ch06.xhtml#page_190)
  prefs: []
  type: TYPE_NORMAL
- en: '`mplayer`, [240](ch08.xhtml#page_240)'
  prefs: []
  type: TYPE_NORMAL
- en: multilayer perceptron (MLP), [182](ch06.xhtml#page_182)–[183](ch06.xhtml#page_183)
  prefs: []
  type: TYPE_NORMAL
- en: MuseScore, [245](ch08.xhtml#page_245)
  prefs: []
  type: TYPE_NORMAL
- en: '**N**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: natural selection. *See* evolution
  prefs: []
  type: TYPE_NORMAL
- en: neural network
  prefs: []
  type: TYPE_NORMAL
- en: activation function, [193](ch06.xhtml#page_193)
  prefs: []
  type: TYPE_NORMAL
- en: anatomy, [180](ch06.xhtml#page_180)
  prefs: []
  type: TYPE_NORMAL
- en: architecture, [187](ch06.xhtml#page_187)
  prefs: []
  type: TYPE_NORMAL
- en: backpropagation, [182](ch06.xhtml#page_182)
  prefs: []
  type: TYPE_NORMAL
- en: confusion matrix, [188](ch06.xhtml#page_188), [191](ch06.xhtml#page_191)
  prefs: []
  type: TYPE_NORMAL
- en: extreme learning machine, [173](ch06.xhtml#page_173), [189](ch06.xhtml#page_189)
  prefs: []
  type: TYPE_NORMAL
- en: generative adversarial network, [253](ch08.xhtml#page_253)
  prefs: []
  type: TYPE_NORMAL
- en: gradient descent, [182](ch06.xhtml#page_182)
  prefs: []
  type: TYPE_NORMAL
- en: initialization, [183](ch06.xhtml#page_183), [185](ch06.xhtml#page_185)
  prefs: []
  type: TYPE_NORMAL
- en: rectified linear unit, [181](ch06.xhtml#page_181)
  prefs: []
  type: TYPE_NORMAL
- en: training, [182](ch06.xhtml#page_182)
  prefs: []
  type: TYPE_NORMAL
- en: variational autoencoder, [253](ch08.xhtml#page_253)
  prefs: []
  type: TYPE_NORMAL
- en: '*Non-Uniform Random Variate Generation* (Devroye), [329](ch012.xhtml#page_329)'
  prefs: []
  type: TYPE_NORMAL
- en: null hypothesis, [9](ch01.xhtml#page_9)
  prefs: []
  type: TYPE_NORMAL
- en: '`NumPyGen`, [30](ch01.xhtml#page_30)–[31](ch01.xhtml#page_31)'
  prefs: []
  type: TYPE_NORMAL
- en: Nyquist-Shannon sampling theorem, [255](ch09.xhtml#page_255)
  prefs: []
  type: TYPE_NORMAL
- en: '**O**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: optimization, [103](ch04.xhtml#page_103)
  prefs: []
  type: TYPE_NORMAL
- en: particle swarm, [105](ch04.xhtml#page_105), [113](ch04.xhtml#page_113)
  prefs: []
  type: TYPE_NORMAL
- en: random, [105](ch04.xhtml#page_105), [113](ch04.xhtml#page_113)
  prefs: []
  type: TYPE_NORMAL
- en: overfitting, [200](ch06.xhtml#page_200)
  prefs: []
  type: TYPE_NORMAL
- en: '**P**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Packard, Norman, [12](ch01.xhtml#page_12)
  prefs: []
  type: TYPE_NORMAL
- en: PCG64, [23](ch01.xhtml#page_23)
  prefs: []
  type: TYPE_NORMAL
- en: Perceptron machine, [183](ch06.xhtml#page_183)
  prefs: []
  type: TYPE_NORMAL
- en: permutation sort (bogosort), [296](ch011.xhtml#page_296)
  prefs: []
  type: TYPE_NORMAL
- en: Pillow (PIL), [63](ch02.xhtml#page_63)
  prefs: []
  type: TYPE_NORMAL
- en: polynomial-time algorithm, [27](ch01.xhtml#page_27)
  prefs: []
  type: TYPE_NORMAL
- en: population genetics, [88](ch03.xhtml#page_88). *See also* evolution
  prefs: []
  type: TYPE_NORMAL
- en: postfix notation, [117](ch04.xhtml#page_117)
  prefs: []
  type: TYPE_NORMAL
- en: '*Practical Deep Learning: A Python-Based Introduction* (Kneusel), [182](ch06.xhtml#page_182)'
  prefs: []
  type: TYPE_NORMAL
- en: Price, Kenneth, [115](ch04.xhtml#page_115)
  prefs: []
  type: TYPE_NORMAL
- en: primality testing, [310](ch011.xhtml#page_310)
  prefs: []
  type: TYPE_NORMAL
- en: Fermat test, [311](ch011.xhtml#page_311)
  prefs: []
  type: TYPE_NORMAL
- en: Miller-Rabin, [311](ch011.xhtml#page_311)
  prefs: []
  type: TYPE_NORMAL
- en: non-witness number, [313](ch011.xhtml#page_313)
  prefs: []
  type: TYPE_NORMAL
- en: test witness number, [312](ch011.xhtml#page_312)
  prefs: []
  type: TYPE_NORMAL
- en: '*Primer of Population Genetics and Genomics, A* (Hartl), [73](ch03.xhtml#page_73)'
  prefs: []
  type: TYPE_NORMAL
- en: principal component analysis, [175](ch06.xhtml#page_175)
  prefs: []
  type: TYPE_NORMAL
- en: probability
  prefs: []
  type: TYPE_NORMAL
- en: Bayesian inference, [328](ch012.xhtml#page_328)
  prefs: []
  type: TYPE_NORMAL
- en: Bayes’ theorem, [328](ch012.xhtml#page_328)
  prefs: []
  type: TYPE_NORMAL
- en: conditional, [328](ch012.xhtml#page_328)
  prefs: []
  type: TYPE_NORMAL
- en: cumulative distribution function, [325](ch012.xhtml#page_325)
  prefs: []
  type: TYPE_NORMAL
- en: distribution, [1](ch01.xhtml#page_1)
  prefs: []
  type: TYPE_NORMAL
- en: beta, [87](ch03.xhtml#page_87)
  prefs: []
  type: TYPE_NORMAL
- en: binomial, [282](ch010.xhtml#page_282), [324](ch012.xhtml#page_324)
  prefs: []
  type: TYPE_NORMAL
- en: Box-Muller, [184](ch06.xhtml#page_184)
  prefs: []
  type: TYPE_NORMAL
- en: continuous, [2](ch01.xhtml#page_2)
  prefs: []
  type: TYPE_NORMAL
- en: discrete, [2](ch01.xhtml#page_2)
  prefs: []
  type: TYPE_NORMAL
- en: exponential, [340](ch012.xhtml#page_340)
  prefs: []
  type: TYPE_NORMAL
- en: Gaussian, [3](ch01.xhtml#page_3)
  prefs: []
  type: TYPE_NORMAL
- en: Kumaraswamy, [342](ch012.xhtml#page_342)
  prefs: []
  type: TYPE_NORMAL
- en: normal, [3](ch01.xhtml#page_3), [114](ch04.xhtml#page_114), [184](ch06.xhtml#page_184)
  prefs: []
  type: TYPE_NORMAL
- en: uniform, [3](ch01.xhtml#page_3)
  prefs: []
  type: TYPE_NORMAL
- en: evidence, [328](ch012.xhtml#page_328)
  prefs: []
  type: TYPE_NORMAL
- en: histogram, [5](ch01.xhtml#page_5)
  prefs: []
  type: TYPE_NORMAL
- en: joint, [328](ch012.xhtml#page_328)
  prefs: []
  type: TYPE_NORMAL
- en: likelihood, [328](ch012.xhtml#page_328)
  prefs: []
  type: TYPE_NORMAL
- en: normal distribution PDF, [326](ch012.xhtml#page_326)
  prefs: []
  type: TYPE_NORMAL
- en: normalization, [328](ch012.xhtml#page_328)
  prefs: []
  type: TYPE_NORMAL
- en: posterior probability, [328](ch012.xhtml#page_328)
  prefs: []
  type: TYPE_NORMAL
- en: prior probability, [328](ch012.xhtml#page_328)
  prefs: []
  type: TYPE_NORMAL
- en: probability density function, [324](ch012.xhtml#page_324)
  prefs: []
  type: TYPE_NORMAL
- en: probability mass function, [324](ch012.xhtml#page_324)
  prefs: []
  type: TYPE_NORMAL
- en: random variable, [1](ch01.xhtml#page_1)
  prefs: []
  type: TYPE_NORMAL
- en: pseudorandom generator
  prefs: []
  type: TYPE_NORMAL
- en: cryptographically secure, [27](ch01.xhtml#page_27)
  prefs: []
  type: TYPE_NORMAL
- en: '`/dev/urandom`, [26](ch01.xhtml#page_26)'
  prefs: []
  type: TYPE_NORMAL
- en: linear congruential generator, [21](ch01.xhtml#page_21)
  prefs: []
  type: TYPE_NORMAL
- en: Mersenne Twister, [23](ch01.xhtml#page_23)
  prefs: []
  type: TYPE_NORMAL
- en: MINSTD, [22](ch01.xhtml#page_22)
  prefs: []
  type: TYPE_NORMAL
- en: PCG64, [23](ch01.xhtml#page_23)
  prefs: []
  type: TYPE_NORMAL
- en: period, [22](ch01.xhtml#page_22)
  prefs: []
  type: TYPE_NORMAL
- en: '`RDRAND` instruction, [26](ch01.xhtml#page_26)'
  prefs: []
  type: TYPE_NORMAL
- en: seed, [21](ch01.xhtml#page_21)
  prefs: []
  type: TYPE_NORMAL
- en: pseudorandom process, [1](ch01.xhtml#page_1), [21](ch01.xhtml#page_21)
  prefs: []
  type: TYPE_NORMAL
- en: p-value, [9](ch01.xhtml#page_9)
  prefs: []
  type: TYPE_NORMAL
- en: '**Q**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: quasirandom generator, [24](ch01.xhtml#page_24)
  prefs: []
  type: TYPE_NORMAL
- en: Halton sequence, [24](ch01.xhtml#page_24)
  prefs: []
  type: TYPE_NORMAL
- en: quasirandom process, [1](ch01.xhtml#page_1), [21](ch01.xhtml#page_21)
  prefs: []
  type: TYPE_NORMAL
- en: Quicksort, [315](ch011.xhtml#page_315)–[318](ch011.xhtml#page_318)
  prefs: []
  type: TYPE_NORMAL
- en: '**R**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: radioactive decay, [20](ch01.xhtml#page_20)
  prefs: []
  type: TYPE_NORMAL
- en: random forest, [173](ch06.xhtml#page_173), [198](ch06.xhtml#page_198)
  prefs: []
  type: TYPE_NORMAL
- en: bagging, [201](ch06.xhtml#page_201)
  prefs: []
  type: TYPE_NORMAL
- en: bootstrapping, [201](ch06.xhtml#page_201)
  prefs: []
  type: TYPE_NORMAL
- en: ensembling, [203](ch06.xhtml#page_203)
  prefs: []
  type: TYPE_NORMAL
- en: random feature selection, [205](ch06.xhtml#page_205)
  prefs: []
  type: TYPE_NORMAL
- en: randomization
  prefs: []
  type: TYPE_NORMAL
- en: block, [276](ch010.xhtml#page_276)
  prefs: []
  type: TYPE_NORMAL
- en: combining, [292](ch010.xhtml#page_292)
  prefs: []
  type: TYPE_NORMAL
- en: in experiments, [272](ch010.xhtml#page_272)
  prefs: []
  type: TYPE_NORMAL
- en: simple, [275](ch010.xhtml#page_275)
  prefs: []
  type: TYPE_NORMAL
- en: stratified, [277](ch010.xhtml#page_277)
  prefs: []
  type: TYPE_NORMAL
- en: randomized algorithm, [295](ch011.xhtml#page_295)
  prefs: []
  type: TYPE_NORMAL
- en: Las Vegas algorithm, [296](ch011.xhtml#page_296)
  prefs: []
  type: TYPE_NORMAL
- en: Monte Carlo algorithm, [296](ch011.xhtml#page_296)
  prefs: []
  type: TYPE_NORMAL
- en: randomness engine (RE), [29](ch01.xhtml#page_29)
  prefs: []
  type: TYPE_NORMAL
- en: random noise, [271](ch010.xhtml#page_271). *See also* experimental design
  prefs: []
  type: TYPE_NORMAL
- en: '*Random Numbers and Computers* (Kneusel), [29](ch01.xhtml#page_29)'
  prefs: []
  type: TYPE_NORMAL
- en: random process
  prefs: []
  type: TYPE_NORMAL
- en: atmospheric noise, [17](ch01.xhtml#page_17)
  prefs: []
  type: TYPE_NORMAL
- en: coin flipping, [8](ch01.xhtml#page_8)
  prefs: []
  type: TYPE_NORMAL
- en: de-biasing, [10](ch01.xhtml#page_10)
  prefs: []
  type: TYPE_NORMAL
- en: dice rolls, [11](ch01.xhtml#page_11)
  prefs: []
  type: TYPE_NORMAL
- en: hybrid, [26](ch01.xhtml#page_26)
  prefs: []
  type: TYPE_NORMAL
- en: physical, [16](ch01.xhtml#page_16)
  prefs: []
  type: TYPE_NORMAL
- en: pseudorandom, [1](ch01.xhtml#page_1), [21](ch01.xhtml#page_21)
  prefs: []
  type: TYPE_NORMAL
- en: quasirandom, [1](ch01.xhtml#page_1), [21](ch01.xhtml#page_21)
  prefs: []
  type: TYPE_NORMAL
- en: radioactive decay, [20](ch01.xhtml#page_20)
  prefs: []
  type: TYPE_NORMAL
- en: roulette wheel, [12](ch01.xhtml#page_12)
  prefs: []
  type: TYPE_NORMAL
- en: testing, [6](ch01.xhtml#page_6)
  prefs: []
  type: TYPE_NORMAL
- en: truly random, [8](ch01.xhtml#page_8)
  prefs: []
  type: TYPE_NORMAL
- en: random variable, [1](ch01.xhtml#page_1)
  prefs: []
  type: TYPE_NORMAL
- en: random walk, [215](ch07.xhtml#page_215)
  prefs: []
  type: TYPE_NORMAL
- en: '`RDRAND`, [26](ch01.xhtml#page_26)'
  prefs: []
  type: TYPE_NORMAL
- en: '`RE` class, [30](ch01.xhtml#page_30), [35](ch01.xhtml#page_35)–[36](ch01.xhtml#page_36)'
  prefs: []
  type: TYPE_NORMAL
- en: Regan, Kenneth W., [305](ch011.xhtml#page_305)
  prefs: []
  type: TYPE_NORMAL
- en: Reinhart, Alex, [5](ch01.xhtml#page_5)
  prefs: []
  type: TYPE_NORMAL
- en: reverse Polish notation (RPN), [117](ch04.xhtml#page_117)
  prefs: []
  type: TYPE_NORMAL
- en: Riddle, Larry, [237](ch07.xhtml#page_237)
  prefs: []
  type: TYPE_NORMAL
- en: Rosenblatt, Frank, [183](ch06.xhtml#page_183)
  prefs: []
  type: TYPE_NORMAL
- en: '**S**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: sampling, [324](ch012.xhtml#page_324)
  prefs: []
  type: TYPE_NORMAL
- en: Fast Loaded Dice Roller, [331](ch012.xhtml#page_331)
  prefs: []
  type: TYPE_NORMAL
- en: inverse transform, [340](ch012.xhtml#page_340)
  prefs: []
  type: TYPE_NORMAL
- en: Markov chain, [349](ch012.xhtml#page_349)
  prefs: []
  type: TYPE_NORMAL
- en: stationary distribution, [349](ch012.xhtml#page_349)
  prefs: []
  type: TYPE_NORMAL
- en: transition probability, [349](ch012.xhtml#page_349)
  prefs: []
  type: TYPE_NORMAL
- en: Markov Chain Monte Carlo, [349](ch012.xhtml#page_349)
  prefs: []
  type: TYPE_NORMAL
- en: Metropolis-Hastings, [352](ch012.xhtml#page_352)
  prefs: []
  type: TYPE_NORMAL
- en: algorithm, [353](ch012.xhtml#page_353)
  prefs: []
  type: TYPE_NORMAL
- en: burn-in, [354](ch012.xhtml#page_354)
  prefs: []
  type: TYPE_NORMAL
- en: trace plots, [357](ch012.xhtml#page_357)
  prefs: []
  type: TYPE_NORMAL
- en: rejection, [344](ch012.xhtml#page_344)
  prefs: []
  type: TYPE_NORMAL
- en: algorithm, [345](ch012.xhtml#page_345)
  prefs: []
  type: TYPE_NORMAL
- en: proposal function, [344](ch012.xhtml#page_344)
  prefs: []
  type: TYPE_NORMAL
- en: sequential search inversion, [329](ch012.xhtml#page_329)
  prefs: []
  type: TYPE_NORMAL
- en: sound, [240](ch08.xhtml#page_240)
  prefs: []
  type: TYPE_NORMAL
- en: scientific method, [271](ch010.xhtml#page_271)
  prefs: []
  type: TYPE_NORMAL
- en: scikit-learn, [xxiii](ch00.xhtml#page_xxiii), [187](ch06.xhtml#page_187). *See
    also* Glorot initialization
  prefs: []
  type: TYPE_NORMAL
- en: sequential search inversion, [329](ch012.xhtml#page_329)
  prefs: []
  type: TYPE_NORMAL
- en: Shannon, Claude, [12](ch01.xhtml#page_12)
  prefs: []
  type: TYPE_NORMAL
- en: Sierpiński, Wacław, [225](ch07.xhtml#page_225)
  prefs: []
  type: TYPE_NORMAL
- en: simple randomization, [275](ch010.xhtml#page_275)
  prefs: []
  type: TYPE_NORMAL
- en: simulation, [73](ch03.xhtml#page_73)–[74](ch03.xhtml#page_74), [278](ch010.xhtml#page_278)
  prefs: []
  type: TYPE_NORMAL
- en: birthday paradox, [80](ch03.xhtml#page_80)–[84](ch03.xhtml#page_84)
  prefs: []
  type: TYPE_NORMAL
- en: estimating *π*, [74](ch03.xhtml#page_74)–[80](ch03.xhtml#page_80)
  prefs: []
  type: TYPE_NORMAL
- en: evolution, [84](ch03.xhtml#page_84)–[99](ch03.xhtml#page_99)
  prefs: []
  type: TYPE_NORMAL
- en: catastrophic, [93](ch03.xhtml#page_93)
  prefs: []
  type: TYPE_NORMAL
- en: genetic drift, [93](ch03.xhtml#page_93)
  prefs: []
  type: TYPE_NORMAL
- en: static, [89](ch03.xhtml#page_89)
  prefs: []
  type: TYPE_NORMAL
- en: experimental, [278](ch010.xhtml#page_278)–[291](ch010.xhtml#page_291)
  prefs: []
  type: TYPE_NORMAL
- en: sanity check, [91](ch03.xhtml#page_91)
  prefs: []
  type: TYPE_NORMAL
- en: software
  prefs: []
  type: TYPE_NORMAL
- en: Audacity, [12](ch01.xhtml#page_12), [240](ch08.xhtml#page_240)
  prefs: []
  type: TYPE_NORMAL
- en: '`ent`, [6](ch01.xhtml#page_6)'
  prefs: []
  type: TYPE_NORMAL
- en: GenJam, [253](ch08.xhtml#page_253)
  prefs: []
  type: TYPE_NORMAL
- en: IFS Construction Kit, [237](ch07.xhtml#page_237)
  prefs: []
  type: TYPE_NORMAL
- en: '`lame`, [249](ch08.xhtml#page_249)'
  prefs: []
  type: TYPE_NORMAL
- en: '`mplayer`, [240](ch08.xhtml#page_240)'
  prefs: []
  type: TYPE_NORMAL
- en: MuseScore, [245](ch08.xhtml#page_245)
  prefs: []
  type: TYPE_NORMAL
- en: Pillow, [63](ch02.xhtml#page_63)
  prefs: []
  type: TYPE_NORMAL
- en: '`wildmidi`, [245](ch08.xhtml#page_245)'
  prefs: []
  type: TYPE_NORMAL
- en: sound
  prefs: []
  type: TYPE_NORMAL
- en: C major scale, [244](ch08.xhtml#page_244)
  prefs: []
  type: TYPE_NORMAL
- en: melodies, [245](ch08.xhtml#page_245)
  prefs: []
  type: TYPE_NORMAL
- en: MIDI, [245](ch08.xhtml#page_245)
  prefs: []
  type: TYPE_NORMAL
- en: musical modes, [246](ch08.xhtml#page_246)
  prefs: []
  type: TYPE_NORMAL
- en: random, [239](ch08.xhtml#page_239)–[241](ch08.xhtml#page_241)
  prefs: []
  type: TYPE_NORMAL
- en: sampling, [240](ch08.xhtml#page_240)
  prefs: []
  type: TYPE_NORMAL
- en: sine wave, [241](ch08.xhtml#page_241)–[243](ch08.xhtml#page_243)
  prefs: []
  type: TYPE_NORMAL
- en: WAV file, [239](ch08.xhtml#page_239)
  prefs: []
  type: TYPE_NORMAL
- en: source code
  prefs: []
  type: TYPE_NORMAL
- en: '*40000cointosses.py*, [10](ch01.xhtml#page_10)'
  prefs: []
  type: TYPE_NORMAL
- en: '*algorithms.py*, [249](ch08.xhtml#page_249)'
  prefs: []
  type: TYPE_NORMAL
- en: '*bad_sample.py*, [276](ch010.xhtml#page_276)'
  prefs: []
  type: TYPE_NORMAL
- en: '*bagging.py*, [203](ch06.xhtml#page_203)'
  prefs: []
  type: TYPE_NORMAL
- en: '*birthday.py*, [81](ch03.xhtml#page_81)'
  prefs: []
  type: TYPE_NORMAL
- en: '*bootstrap.py*, [201](ch06.xhtml#page_201)'
  prefs: []
  type: TYPE_NORMAL
- en: '*brute_primes.py*, [314](ch011.xhtml#page_314)'
  prefs: []
  type: TYPE_NORMAL
- en: '*build_bc_data.py*, [175](ch06.xhtml#page_175)'
  prefs: []
  type: TYPE_NORMAL
- en: '*build_mnist_dataset.py*, [178](ch06.xhtml#page_178)'
  prefs: []
  type: TYPE_NORMAL
- en: '*cdf.py*, [326](ch012.xhtml#page_326)'
  prefs: []
  type: TYPE_NORMAL
- en: '*cell.py*, [142](ch05.xhtml#page_142)'
  prefs: []
  type: TYPE_NORMAL
- en: '*circles.py*, [138](ch05.xhtml#page_138)'
  prefs: []
  type: TYPE_NORMAL
- en: '*cohen_d_test.py*, [290](ch010.xhtml#page_290)'
  prefs: []
  type: TYPE_NORMAL
- en: '*count.py*, [319](ch011.xhtml#page_319)'
  prefs: []
  type: TYPE_NORMAL
- en: '*cs_image.py*, [263](ch09.xhtml#page_263)'
  prefs: []
  type: TYPE_NORMAL
- en: '*cs_signal.py*, [260](ch09.xhtml#page_260)'
  prefs: []
  type: TYPE_NORMAL
- en: '*curfit_example.py*, [106](ch04.xhtml#page_106)'
  prefs: []
  type: TYPE_NORMAL
- en: '*curves.py*, [106](ch04.xhtml#page_106)'
  prefs: []
  type: TYPE_NORMAL
- en: '*darwin_catastrophic.py*, [93](ch03.xhtml#page_93)'
  prefs: []
  type: TYPE_NORMAL
- en: '*darwin_drift.py*, [93](ch03.xhtml#page_93)'
  prefs: []
  type: TYPE_NORMAL
- en: '*darwin_slow.py*, [91](ch03.xhtml#page_91)'
  prefs: []
  type: TYPE_NORMAL
- en: '*darwin_static.py*, [89](ch03.xhtml#page_89)'
  prefs: []
  type: TYPE_NORMAL
- en: '*DE.py*, [115](ch04.xhtml#page_115)'
  prefs: []
  type: TYPE_NORMAL
- en: '*design.py*, [278](ch010.xhtml#page_278)'
  prefs: []
  type: TYPE_NORMAL
- en: '*discrete_2d.py*, [338](ch012.xhtml#page_338)'
  prefs: []
  type: TYPE_NORMAL
- en: '*discrete_ravel.py*, [336](ch012.xhtml#page_336)'
  prefs: []
  type: TYPE_NORMAL
- en: '*discrete_test.py*, [332](ch012.xhtml#page_332)'
  prefs: []
  type: TYPE_NORMAL
- en: '*drift.py*, [96](ch03.xhtml#page_96)'
  prefs: []
  type: TYPE_NORMAL
- en: '*elm_brute.py*, [196](ch06.xhtml#page_196)'
  prefs: []
  type: TYPE_NORMAL
- en: '*elm.py*, [190](ch06.xhtml#page_190)'
  prefs: []
  type: TYPE_NORMAL
- en: '*elm_swarm.py*, [195](ch06.xhtml#page_195)'
  prefs: []
  type: TYPE_NORMAL
- en: '*elm_test.py*, [193](ch06.xhtml#page_193)'
  prefs: []
  type: TYPE_NORMAL
- en: '*elm_test_results.py*, [194](ch06.xhtml#page_194)'
  prefs: []
  type: TYPE_NORMAL
- en: '*enhance.py*, [152](ch05.xhtml#page_152)'
  prefs: []
  type: TYPE_NORMAL
- en: '*evolve.py*, [248](ch08.xhtml#page_248)'
  prefs: []
  type: TYPE_NORMAL
- en: '*fldr.py*, [331](ch012.xhtml#page_331)'
  prefs: []
  type: TYPE_NORMAL
- en: '*forest_mnist.py*, [206](ch06.xhtml#page_206)'
  prefs: []
  type: TYPE_NORMAL
- en: '*forest.py*, [205](ch06.xhtml#page_205)'
  prefs: []
  type: TYPE_NORMAL
- en: '*F.py*, [159](ch05.xhtml#page_159)'
  prefs: []
  type: TYPE_NORMAL
- en: '*freivalds_plots.py*, [304](ch011.xhtml#page_304)'
  prefs: []
  type: TYPE_NORMAL
- en: '*freivalds.py*, [303](ch011.xhtml#page_303)'
  prefs: []
  type: TYPE_NORMAL
- en: '*GA.py*, [115](ch04.xhtml#page_115)'
  prefs: []
  type: TYPE_NORMAL
- en: '*gaussian.py*, [133](ch04.xhtml#page_133)'
  prefs: []
  type: TYPE_NORMAL
- en: '*gpgen.py*, [126](ch04.xhtml#page_126)'
  prefs: []
  type: TYPE_NORMAL
- en: '*gp.py*, [119](ch04.xhtml#page_119)'
  prefs: []
  type: TYPE_NORMAL
- en: '*GWO.py*, [133](ch04.xhtml#page_133)'
  prefs: []
  type: TYPE_NORMAL
- en: '*ifs_maps.py*, [233](ch07.xhtml#page_233)'
  prefs: []
  type: TYPE_NORMAL
- en: '*ifs.py*, [229](ch07.xhtml#page_229)'
  prefs: []
  type: TYPE_NORMAL
- en: '*init_test.py*, [185](ch06.xhtml#page_185)'
  prefs: []
  type: TYPE_NORMAL
- en: '*inverse_cauchy.py*, [359](ch012.xhtml#page_359)'
  prefs: []
  type: TYPE_NORMAL
- en: '*inverse.py*, [342](ch012.xhtml#page_342)'
  prefs: []
  type: TYPE_NORMAL
- en: '*iris_tree.py*, [199](ch06.xhtml#page_199)'
  prefs: []
  type: TYPE_NORMAL
- en: '*make_random.py*, [49](ch02.xhtml#page_49)'
  prefs: []
  type: TYPE_NORMAL
- en: '*make_results_plot.py*, [149](ch05.xhtml#page_149)'
  prefs: []
  type: TYPE_NORMAL
- en: '*make_towers_plot.py*, [149](ch05.xhtml#page_149)'
  prefs: []
  type: TYPE_NORMAL
- en: '*markov_chain.py*, [351](ch012.xhtml#page_351)'
  prefs: []
  type: TYPE_NORMAL
- en: '*mark_recapture.py*, [307](ch011.xhtml#page_307)'
  prefs: []
  type: TYPE_NORMAL
- en: '*mark_recapture_range.py*, [309](ch011.xhtml#page_309)'
  prefs: []
  type: TYPE_NORMAL
- en: '*mcmc_movie.py*, [358](ch012.xhtml#page_358)'
  prefs: []
  type: TYPE_NORMAL
- en: '*mcmc.py*, [355](ch012.xhtml#page_355)'
  prefs: []
  type: TYPE_NORMAL
- en: '*melody_maker.py*, [245](ch08.xhtml#page_245)'
  prefs: []
  type: TYPE_NORMAL
- en: '*merge_images.py*, [158](ch05.xhtml#page_158)'
  prefs: []
  type: TYPE_NORMAL
- en: '*MiCRO.py*, [133](ch04.xhtml#page_133)'
  prefs: []
  type: TYPE_NORMAL
- en: '*miller_rabin.py*, [313](ch011.xhtml#page_313)'
  prefs: []
  type: TYPE_NORMAL
- en: '*mnist_test.py*, [180](ch06.xhtml#page_180)'
  prefs: []
  type: TYPE_NORMAL
- en: '*moire.py*, [212](ch07.xhtml#page_212)'
  prefs: []
  type: TYPE_NORMAL
- en: '*note_walker.py*, [244](ch08.xhtml#page_244)'
  prefs: []
  type: TYPE_NORMAL
- en: '*nselect.py*, [327](ch012.xhtml#page_327)'
  prefs: []
  type: TYPE_NORMAL
- en: '*permutation_sort_plot.py*, [298](ch011.xhtml#page_298)'
  prefs: []
  type: TYPE_NORMAL
- en: '*permutation_sort.py*, [296](ch011.xhtml#page_296)'
  prefs: []
  type: TYPE_NORMAL
- en: '*plot_gbest_giter.py*, [133](ch04.xhtml#page_133)'
  prefs: []
  type: TYPE_NORMAL
- en: '*plot_results.py*, [141](ch05.xhtml#page_141)'
  prefs: []
  type: TYPE_NORMAL
- en: '*polygon.py*, [227](ch07.xhtml#page_227)'
  prefs: []
  type: TYPE_NORMAL
- en: '*power_analysis.py*, [291](ch010.xhtml#page_291)'
  prefs: []
  type: TYPE_NORMAL
- en: '*prime_tests.py*, [314](ch011.xhtml#page_314)'
  prefs: []
  type: TYPE_NORMAL
- en: '*process_images.py*, [158](ch05.xhtml#page_158)'
  prefs: []
  type: TYPE_NORMAL
- en: '*process_results.py*, [166](ch05.xhtml#page_166)'
  prefs: []
  type: TYPE_NORMAL
- en: '*process_rgb_images.py*, [169](ch05.xhtml#page_169)'
  prefs: []
  type: TYPE_NORMAL
- en: '*process_vgr_data.py*, [18](ch01.xhtml#page_18)'
  prefs: []
  type: TYPE_NORMAL
- en: '*product_order.py*, [167](ch05.xhtml#page_167)'
  prefs: []
  type: TYPE_NORMAL
- en: '*PSO.py*, [124](ch04.xhtml#page_124)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Quicksort.py*, [316](ch011.xhtml#page_316)'
  prefs: []
  type: TYPE_NORMAL
- en: '*quicksort_tests.py*, [317](ch011.xhtml#page_317)'
  prefs: []
  type: TYPE_NORMAL
- en: '*random_sounds.py*, [240](ch08.xhtml#page_240)'
  prefs: []
  type: TYPE_NORMAL
- en: '*rejection.py*, [345](ch012.xhtml#page_345)'
  prefs: []
  type: TYPE_NORMAL
- en: '*RE.py*, [29](ch01.xhtml#page_29)'
  prefs: []
  type: TYPE_NORMAL
- en: '*rf_vs_mlp.py*, [208](ch06.xhtml#page_208)'
  prefs: []
  type: TYPE_NORMAL
- en: '*rf_vs_mlp_results.py*, [208](ch06.xhtml#page_208)'
  prefs: []
  type: TYPE_NORMAL
- en: '*RO.py*, [134](ch04.xhtml#page_134)'
  prefs: []
  type: TYPE_NORMAL
- en: '*sierpinski.py*, [225](ch07.xhtml#page_225)'
  prefs: []
  type: TYPE_NORMAL
- en: '*silence.py*, [14](ch01.xhtml#page_14)'
  prefs: []
  type: TYPE_NORMAL
- en: '*sim_pi.py*, [76](ch03.xhtml#page_76)'
  prefs: []
  type: TYPE_NORMAL
- en: '*sim_pi_quasi.py*, [78](ch03.xhtml#page_78)'
  prefs: []
  type: TYPE_NORMAL
- en: '*sim_pi_test.py*, [78](ch03.xhtml#page_78)'
  prefs: []
  type: TYPE_NORMAL
- en: '*sine_walker.py*, [242](ch08.xhtml#page_242)'
  prefs: []
  type: TYPE_NORMAL
- en: '*songs.py*, [250](ch08.xhtml#page_250)'
  prefs: []
  type: TYPE_NORMAL
- en: '*spheres.py*, [169](ch05.xhtml#page_169)'
  prefs: []
  type: TYPE_NORMAL
- en: '*steg_audio.py*, [55](ch02.xhtml#page_55)'
  prefs: []
  type: TYPE_NORMAL
- en: '*steg_audio_test.py*, [58](ch02.xhtml#page_58)'
  prefs: []
  type: TYPE_NORMAL
- en: '*steg_image.py*, [65](ch02.xhtml#page_65)'
  prefs: []
  type: TYPE_NORMAL
- en: '*steg_image_test.py*, [66](ch02.xhtml#page_66)'
  prefs: []
  type: TYPE_NORMAL
- en: '*steg_random.py*, [49](ch02.xhtml#page_49)'
  prefs: []
  type: TYPE_NORMAL
- en: '*steg_random_test.py*, [50](ch02.xhtml#page_50)'
  prefs: []
  type: TYPE_NORMAL
- en: '*steg_simple.py*, [41](ch02.xhtml#page_41)'
  prefs: []
  type: TYPE_NORMAL
- en: '*steg_text.py*, [44](ch02.xhtml#page_44)'
  prefs: []
  type: TYPE_NORMAL
- en: '*store.py*, [159](ch05.xhtml#page_159)'
  prefs: []
  type: TYPE_NORMAL
- en: '*test_mmult.py*, [319](ch011.xhtml#page_319)'
  prefs: []
  type: TYPE_NORMAL
- en: '*walker.py*, [216](ch07.xhtml#page_216)'
  prefs: []
  type: TYPE_NORMAL
- en: '*warp_factor_9.py*, [224](ch07.xhtml#page_224)'
  prefs: []
  type: TYPE_NORMAL
- en: '*warp.py*, [222](ch07.xhtml#page_222)'
  prefs: []
  type: TYPE_NORMAL
- en: spirograph, [212](ch07.xhtml#page_212)
  prefs: []
  type: TYPE_NORMAL
- en: stack, [117](ch04.xhtml#page_117)
  prefs: []
  type: TYPE_NORMAL
- en: statistics
  prefs: []
  type: TYPE_NORMAL
- en: central limit theorem, [4](ch01.xhtml#page_4)
  prefs: []
  type: TYPE_NORMAL
- en: '*χ*² test, [7](ch01.xhtml#page_7), [9](ch01.xhtml#page_9)'
  prefs: []
  type: TYPE_NORMAL
- en: Mann-Whitney U, [186](ch06.xhtml#page_186)
  prefs: []
  type: TYPE_NORMAL
- en: null hypothesis, [9](ch01.xhtml#page_9)
  prefs: []
  type: TYPE_NORMAL
- en: p-value, [9](ch01.xhtml#page_9)
  prefs: []
  type: TYPE_NORMAL
- en: quantile, [201](ch06.xhtml#page_201)
  prefs: []
  type: TYPE_NORMAL
- en: statistically significant, [9](ch01.xhtml#page_9)
  prefs: []
  type: TYPE_NORMAL
- en: t-test, [9](ch01.xhtml#page_9), [186](ch06.xhtml#page_186)
  prefs: []
  type: TYPE_NORMAL
- en: '*Statistics Done Wrong* (Reinhart), [5](ch01.xhtml#page_5)'
  prefs: []
  type: TYPE_NORMAL
- en: steganography, [39](ch02.xhtml#page_39)
  prefs: []
  type: TYPE_NORMAL
- en: audio data, [55](ch02.xhtml#page_55)
  prefs: []
  type: TYPE_NORMAL
- en: Bacon cipher, [40](ch02.xhtml#page_40)
  prefs: []
  type: TYPE_NORMAL
- en: decoding a file, [54](ch02.xhtml#page_54)
  prefs: []
  type: TYPE_NORMAL
- en: embedding in random data, [47](ch02.xhtml#page_47)
  prefs: []
  type: TYPE_NORMAL
- en: encoding a file, [52](ch02.xhtml#page_52)–[53](ch02.xhtml#page_53)
  prefs: []
  type: TYPE_NORMAL
- en: fixed offset, [41](ch02.xhtml#page_41)
  prefs: []
  type: TYPE_NORMAL
- en: history, [40](ch02.xhtml#page_40)
  prefs: []
  type: TYPE_NORMAL
- en: image files, [62](ch02.xhtml#page_62)
  prefs: []
  type: TYPE_NORMAL
- en: pool text, [41](ch02.xhtml#page_41)
  prefs: []
  type: TYPE_NORMAL
- en: random offset, [44](ch02.xhtml#page_44)
  prefs: []
  type: TYPE_NORMAL
- en: secret key, [44](ch02.xhtml#page_44)
  prefs: []
  type: TYPE_NORMAL
- en: steganalysis, [39](ch02.xhtml#page_39)
  prefs: []
  type: TYPE_NORMAL
- en: Storn, Rainer, [115](ch04.xhtml#page_115)
  prefs: []
  type: TYPE_NORMAL
- en: Strassen’s algorithm, [304](ch011.xhtml#page_304)
  prefs: []
  type: TYPE_NORMAL
- en: stratified randomization, [277](ch010.xhtml#page_277)
  prefs: []
  type: TYPE_NORMAL
- en: swarm intelligence, [103](ch04.xhtml#page_103), [105](ch04.xhtml#page_105)
  prefs: []
  type: TYPE_NORMAL
- en: algorithms
  prefs: []
  type: TYPE_NORMAL
- en: bare-bones PSO, [114](ch04.xhtml#page_114)
  prefs: []
  type: TYPE_NORMAL
- en: differential evolution, [115](ch04.xhtml#page_115)
  prefs: []
  type: TYPE_NORMAL
- en: genetic, [114](ch04.xhtml#page_114)–[115](ch04.xhtml#page_115)
  prefs: []
  type: TYPE_NORMAL
- en: Grey Wolf Optimizer, [133](ch04.xhtml#page_133)
  prefs: []
  type: TYPE_NORMAL
- en: Jaya, [105](ch04.xhtml#page_105), [113](ch04.xhtml#page_113)
  prefs: []
  type: TYPE_NORMAL
- en: MiCRO, [133](ch04.xhtml#page_133)
  prefs: []
  type: TYPE_NORMAL
- en: particle swarm optimization, [105](ch04.xhtml#page_105), [113](ch04.xhtml#page_113)
  prefs: []
  type: TYPE_NORMAL
- en: random optimization, [105](ch04.xhtml#page_105), [113](ch04.xhtml#page_113)
  prefs: []
  type: TYPE_NORMAL
- en: particles, [104](ch04.xhtml#page_104)
  prefs: []
  type: TYPE_NORMAL
- en: '**T**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: testing randomness, [6](ch01.xhtml#page_6)
  prefs: []
  type: TYPE_NORMAL
- en: '*Theory That Would Not Die, The* (McGrayne), [328](ch012.xhtml#page_328)'
  prefs: []
  type: TYPE_NORMAL
- en: Thorp, Edward, [12](ch01.xhtml#page_12)
  prefs: []
  type: TYPE_NORMAL
- en: truly random processes, [8](ch01.xhtml#page_8)–[16](ch01.xhtml#page_16)
  prefs: []
  type: TYPE_NORMAL
- en: T-shirts, [217](ch07.xhtml#page_217)
  prefs: []
  type: TYPE_NORMAL
- en: t-test, [9](ch01.xhtml#page_9), [167](ch05.xhtml#page_167), [186](ch06.xhtml#page_186)
  prefs: []
  type: TYPE_NORMAL
- en: turtle graphics, [212](ch07.xhtml#page_212)
  prefs: []
  type: TYPE_NORMAL
- en: '**V**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: von Neumann, John, [10](ch01.xhtml#page_10), [21](ch01.xhtml#page_21)
  prefs: []
  type: TYPE_NORMAL
- en: '*Voyager* spacecraft, [18](ch01.xhtml#page_18)'
  prefs: []
  type: TYPE_NORMAL
- en: '**W**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: WAV file, [239](ch08.xhtml#page_239)
  prefs: []
  type: TYPE_NORMAL
- en: '`wildmidi`, [245](ch08.xhtml#page_245)'
  prefs: []
  type: TYPE_NORMAL
- en: The fonts used in *The Art of Randomness* are New Baskerville, Futura, The Sans
    Mono Condensed, and Dogma. The book was typeset with LaTeX2*ɛ* package `nostarch`
    by Boris Veytsman (*2008/06/06 v1.3 Typesetting books for No Starch Press)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**RESOURCES**'
  prefs: []
  type: TYPE_NORMAL
- en: Visit *[https://nostarch.com/art-randomness](https://nostarch.com/art-randomness)*
    for errata and more information.
  prefs: []
  type: TYPE_NORMAL
- en: '*More no-nonsense books from* ![Image](../images/pg375-01.jpg) **NO STARCH
    PRESS**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg375-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**MATH FOR DEEP LEARNING**'
  prefs: []
  type: TYPE_NORMAL
- en: '**What You Need to Know to Understand Neural Networks**'
  prefs: []
  type: TYPE_NORMAL
- en: '*BY* RONALD T. KNEUSEL'
  prefs: []
  type: TYPE_NORMAL
- en: 344 PP., $49.99
  prefs: []
  type: TYPE_NORMAL
- en: ISBN 978-1-7185-0190-4
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg375-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**MODELING AND SIMULATION IN PYTHON**'
  prefs: []
  type: TYPE_NORMAL
- en: '**An Introduction for Scientists and Engineers**'
  prefs: []
  type: TYPE_NORMAL
- en: '*BY* ALLEN B. DOWNEY'
  prefs: []
  type: TYPE_NORMAL
- en: 280 PP., $39.99
  prefs: []
  type: TYPE_NORMAL
- en: ISBN 978-1-7185-0216-1
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg375-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PRACTICAL DEEP LEARNING**'
  prefs: []
  type: TYPE_NORMAL
- en: '**A Python-Based Introduction**'
  prefs: []
  type: TYPE_NORMAL
- en: '*BY* RONALD T. KNEUSEL'
  prefs: []
  type: TYPE_NORMAL
- en: 464 PP., $59.95
  prefs: []
  type: TYPE_NORMAL
- en: ISBN 978-1-7185-0074-7
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg375-05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**STATISTICS DONE WRONG**'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Woefully Complete Guide**'
  prefs: []
  type: TYPE_NORMAL
- en: '*BY* ALEX REINHART'
  prefs: []
  type: TYPE_NORMAL
- en: 176 PP., $24.95
  prefs: []
  type: TYPE_NORMAL
- en: ISBN 978-1-59327-620-1
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg375-06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**DEEP LEARNING**'
  prefs: []
  type: TYPE_NORMAL
- en: '**A Visual Approach**'
  prefs: []
  type: TYPE_NORMAL
- en: '*BY* ANDREW GLASSNER'
  prefs: []
  type: TYPE_NORMAL
- en: 768 PP., $99.99
  prefs: []
  type: TYPE_NORMAL
- en: ISBN 978-1-7185-0072-3
  prefs: []
  type: TYPE_NORMAL
- en: '*full color*'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg375-07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**ALGORITHMIC THINKING, 2ND EDITION**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Learn Algorithms to Level Up'
  prefs: []
  type: TYPE_NORMAL
- en: Your Coding Skills**
  prefs: []
  type: TYPE_NORMAL
- en: '*BY* DANIEL ZINGARO'
  prefs: []
  type: TYPE_NORMAL
- en: 480 PP., $49.99
  prefs: []
  type: TYPE_NORMAL
- en: ISBN 978-1-7185-0322-9
  prefs: []
  type: TYPE_NORMAL
- en: '**PHONE:**'
  prefs: []
  type: TYPE_NORMAL
- en: 800.420.7240 OR
  prefs: []
  type: TYPE_NORMAL
- en: 415.863.9900
  prefs: []
  type: TYPE_NORMAL
- en: '**EMAIL:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[SALES@NOSTARCH.COM](mailto:SALES@NOSTARCH.COM)'
  prefs: []
  type: TYPE_NORMAL
- en: '**WEB:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[WWW.NOSTARCH.COM](http://WWW.NOSTARCH.COM)'
  prefs: []
  type: TYPE_NORMAL
