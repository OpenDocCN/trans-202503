["```` `<` (less than operator), [78](c05.xhtml#Page_78)    `<=` (less than or equal operator), [78](c05.xhtml#Page_78)    `\\n` (line feed or newline), [7](c01.xhtml#Page_7), [146](c09.xhtml#Page_146), [254](c15.xhtml#Page_254)    `!=` (not equals operator), [78](c05.xhtml#Page_78)    `~` (NOT operator), [68](c04.xhtml#Page_68), [69](c04.xhtml#Page_69)    `\\0` (NUL), [101](c06.xhtml#Page_101)    `+=` operator, [65](c04.xhtml#Page_65)    `|` (OR operator), [67](c04.xhtml#Page_67), [68](c04.xhtml#Page_68)    `@param` (parameter), [143](c09.xhtml#Page_143)    `` >> `(right shift operator), [70](c04.xhtml#Page_70)` ``   ``` `` `-` (subtraction operation), [54](c04.xhtml#Page_54)    `\\t` (tab), [7](c01.xhtml#Page_7)    **A**    absolute address, [194](c11.xhtml#Page_194)    absolute object file, [192](c11.xhtml#Page_192)    Ac6 STM32 MCU Project, [37](c03.xhtml#Page_37)    add, integer, [54](c04.xhtml#Page_54)    adding node, single linked list, [227](c13.xhtml#Page_227), [228](c13.xhtml#Page_228)    addition, fixed-point, [263](c16.xhtml#Page_263)–[265](c16.xhtml#Page_265)    address, [13](c01.xhtml#Page_13)    absolute, [194](c11.xhtml#Page_194)    pointers, [94](c06.xhtml#Page_94)    printing, [98](c06.xhtml#Page_98)    sanitizer, [234](c13.xhtml#Page_234), [235](c13.xhtml#Page_235)    address of operator (`&`), [94](c06.xhtml#Page_94)    advanced linker usage, [195](c11.xhtml#Page_195)    `align` (assembler directive), [187](c11.xhtml#Page_187), [189](c11.xhtml#Page_189)    aligned data, access, [125](c08.xhtml#Page_125)–[127](c08.xhtml#Page_127)    alignment, integer, [123](c08.xhtml#Page_123), [124](c08.xhtml#Page_124)    allocate heap (`malloc`), [224](c13.xhtml#Page_224), [225](c13.xhtml#Page_225)    allocation, local variable, [109](c07.xhtml#Page_109), [110](c07.xhtml#Page_110)    alternatives, floating-point, [262](c16.xhtml#Page_262)    ambiguity, `if/else`, [79](c05.xhtml#Page_79)    analog pin, [41](c03.xhtml#Page_41)    analysis    assembly language, [180](c10.xhtml#Page_180)    interrupt code, [177](c10.xhtml#Page_177), [179](c10.xhtml#Page_179)    AND operator (`&`), [68](c04.xhtml#Page_68), [69](c04.xhtml#Page_69), [74](c04.xhtml#Page_74)    anonymous `struct`, [130](c08.xhtml#Page_130)    anti-pattern, [88](c05.xhtml#Page_88), [89](c05.xhtml#Page_89)    assignment in `while`, [89](c05.xhtml#Page_89)    empty loop, [89](c05.xhtml#Page_89)    Apple    end of line, [146](c09.xhtml#Page_146), [254](c15.xhtml#Page_254)    USB serial setup, [158](c09.xhtml#Page_158)    `apt-get`, [4](c01.xhtml#Page_4)    `ar` command, [275](c17.xhtml#Page_275)–[278](c17.xhtml#Page_278)    `argc` parameter, [250](c15.xhtml#Page_250)    argument    command line, [249](c15.xhtml#Page_249), [250](c15.xhtml#Page_250)    promotion, [61](c04.xhtml#Page_61)    `argv` parameter, [250](c15.xhtml#Page_250)    arithmetic, pointer, [97](c06.xhtml#Page_97)    ARM Cortex-M0, [xviii](f04.xhtml#Page_xviii), [57](c04.xhtml#Page_57)    ARM GCC compiler, [45](c03.xhtml#Page_45)    `arm-none-eabi-objcopy`, [46](c03.xhtml#Page_46)    `arm-none-eabi-size`, [46](c03.xhtml#Page_46)    array, [91](c06.xhtml#Page_91), [92](c06.xhtml#Page_92)    declaration, [92](c06.xhtml#Page_92)    illegal, [92](c06.xhtml#Page_92)    index, [92](c06.xhtml#Page_92), [100](c06.xhtml#Page_100)    initialization, [93](c06.xhtml#Page_93)    overflow, [98](c06.xhtml#Page_98)–[100](c06.xhtml#Page_100)    to pointer assignment, [97](c06.xhtml#Page_97)    arrays and pointers, relationship between, [97](c06.xhtml#Page_97)    `as`, [11](c01.xhtml#Page_11)    ASCII, [239](c14.xhtml#Page_239)    assembler, [11](c01.xhtml#Page_11), [12](c01.xhtml#Page_12)    assembler directive    `.align`, [187](c11.xhtml#Page_187), [189](c11.xhtml#Page_189)    `.bss`, [187](c11.xhtml#Page_187), [189](c11.xhtml#Page_189)    `.comm`, [187](c11.xhtml#Page_187)    `.data`, [187](c11.xhtml#Page_187), [189](c11.xhtml#Page_189)    `.global`, [187](c11.xhtml#Page_187)    `.section`, [188](c11.xhtml#Page_188)    `.space`, [187](c11.xhtml#Page_187), [189](c11.xhtml#Page_189)    `.weak`, [164](c10.xhtml#Page_164)    `.word`, [187](c11.xhtml#Page_187), [189](c11.xhtml#Page_189)    assembly language, [10](c01.xhtml#Page_10), [12](c01.xhtml#Page_12)    analysis, [180](c10.xhtml#Page_180)    assembly listing, [13](c01.xhtml#Page_13)    `assert` statement, [134](c08.xhtml#Page_134), [135](c08.xhtml#Page_135)    assigning variables, [56](c04.xhtml#Page_56)    assignment, `struct`, [128](c08.xhtml#Page_128)    assignment in `while` (anti-pattern), [89](c05.xhtml#Page_89)    asynchronous interrupts, [171](c10.xhtml#Page_171)    attribute    `packed`, [125](c08.xhtml#Page_125), [126](c08.xhtml#Page_126), [135](c08.xhtml#Page_135)    `section`, [195](c11.xhtml#Page_195)    `unused`, [152](c09.xhtml#Page_152)    `weak`, [279](c17.xhtml#Page_279)    automatic conversion, [258](c16.xhtml#Page_258)    **B**    backslash (`\\\\`), [7](c01.xhtml#Page_7)    bare metal, [xvii](f04.xhtml#Page_xvii)    Basic Settings dialog, [23](c02.xhtml#Page_23)    baud, [145](c09.xhtml#Page_145)    rate, [148](c09.xhtml#Page_148)    big machines, [221](p02.xhtml#Page_221), [222](p02.xhtml#Page_222)    *.bin* (file extension), [47](c03.xhtml#Page_47)    binary    file, [243](c14.xhtml#Page_243), [244](c14.xhtml#Page_244)–[246](c14.xhtml#Page_246)    numbers, [59](c04.xhtml#Page_59)–[60](c04.xhtml#Page_60)    bit    checking, [72](c04.xhtml#Page_72), [73](c04.xhtml#Page_73)    clearing, [72](c04.xhtml#Page_72)    constant, [71](c04.xhtml#Page_71)    defining, [71](c04.xhtml#Page_71)    manipulation, example of, [72](c04.xhtml#Page_72)–[74](c04.xhtml#Page_74)    meaning, [70](c04.xhtml#Page_70)    operations, [67](c04.xhtml#Page_67)    pattern, [60](c04.xhtml#Page_60)    printing, [74](c04.xhtml#Page_74)    setting, [71](c04.xhtml#Page_71), [72](c04.xhtml#Page_72)    bitmapped I/O, [71](c04.xhtml#Page_71)    bitwise AND (`&`), [68](c04.xhtml#Page_68), [69](c04.xhtml#Page_69), [74](c04.xhtml#Page_74)    bitwise invert (`~`), [68](c04.xhtml#Page_68), [69](c04.xhtml#Page_69)    bitwise exclusive OR (`^`), [69](c04.xhtml#Page_69)    bitwise OR (`|`), [67](c04.xhtml#Page_67), [68](c04.xhtml#Page_68)    blinking LED, [32](c02.xhtml#Page_32)    bootloader, [204](c11.xhtml#Page_204)    breakpoint, [49](c03.xhtml#Page_49)    Breakpoints window, [28](c02.xhtml#Page_28)    `break` statement, [87](c05.xhtml#Page_87)    `bss`    assembler directive, [187](c11.xhtml#Page_187), [189](c11.xhtml#Page_189)    ideal memory model, [185](c11.xhtml#Page_185), [186](c11.xhtml#Page_186)    section, [187](c11.xhtml#Page_187), [189](c11.xhtml#Page_189), [191](c11.xhtml#Page_191)    size, [46](c03.xhtml#Page_46)    buffer    circular, [172](c10.xhtml#Page_172), [173](c10.xhtml#Page_173)    log, [178](c10.xhtml#Page_178), [179](c10.xhtml#Page_179)    buffered file I/O, [222](p02.xhtml#Page_222), [237](c14.xhtml#Page_237)–[246](c14.xhtml#Page_246)    vs. raw I/O, [251](c15.xhtml#Page_251)    buffering, [246](c14.xhtml#Page_246)    line, [246](c14.xhtml#Page_246)    serial, [172](c10.xhtml#Page_172)    bug, `=` vs. `==`, [78](c05.xhtml#Page_78), [79](c05.xhtml#Page_79)    Build Project, IDE, [24](c02.xhtml#Page_24), [44](c03.xhtml#Page_44)    button, [83](c05.xhtml#Page_83)    get state of, [86](c05.xhtml#Page_86)    user, [34](c03.xhtml#Page_34)    byte, [57](c04.xhtml#Page_57)    order, [131](c08.xhtml#Page_131), [132](c08.xhtml#Page_132)    **C**    call by value, [128](c08.xhtml#Page_128), [129](c08.xhtml#Page_129)    call stack trace, [183](c11.xhtml#Page_183), [184](c11.xhtml#Page_184)    camel case, [55](c04.xhtml#Page_55)    carriage return (`\\r`), [7](c01.xhtml#Page_7), [146](c09.xhtml#Page_146), [254](c15.xhtml#Page_254)    `cc1`, [11](c01.xhtml#Page_11)    `CFLAG` (`make` macro), [9](c01.xhtml#Page_9)    chapters, [114](c07.xhtml#Page_114)    `char`, [91](c06.xhtml#Page_91), [101](c06.xhtml#Page_101)    character    `printf`, [238](c14.xhtml#Page_238), [239](c14.xhtml#Page_239)    transmit (serial), [150](c09.xhtml#Page_150)    characters and strings, [100](c06.xhtml#Page_100)–[101](c06.xhtml#Page_101)    `char` constant, [101](c06.xhtml#Page_101)    `char*` initialization, [101](c06.xhtml#Page_101)    checking, bit, [72](c04.xhtml#Page_72), [73](c04.xhtml#Page_73)    C ideal memory model, [185](c11.xhtml#Page_185)    circular buffer, [172](c10.xhtml#Page_172), [173](c10.xhtml#Page_173)    interrupt, [173](c10.xhtml#Page_173)    sending, [173](c10.xhtml#Page_173)    clean    `make` target, [16](c01.xhtml#Page_16)    project, [44](c03.xhtml#Page_44)    clearing, bit, [72](c04.xhtml#Page_72)    clock, [34](c03.xhtml#Page_34)    serial, [145](c09.xhtml#Page_145), [146](c09.xhtml#Page_146)    `close`, [252](c15.xhtml#Page_252)    closing files, [247](c14.xhtml#Page_247)    C Managed Build, [54](c04.xhtml#Page_54)    *CMSIS* directory, [47](c03.xhtml#Page_47)    code    instrumenting, [177](c10.xhtml#Page_177)    interrupt analysis, [179](c10.xhtml#Page_179)    macro, preprocessor, [211](c12.xhtml#Page_211)–[212](c12.xhtml#Page_212)    combination shaving brush and fountain pen, [162](c10.xhtml#Page_162)    `comm` (assembler directive), [187](c11.xhtml#Page_187)    command line arguments, [249](c15.xhtml#Page_249), [250](c15.xhtml#Page_250)    comment, [8](c01.xhtml#Page_8)    comment out code, [218](c12.xhtml#Page_218), [219](c12.xhtml#Page_219)    `COMMON` section, [191](c11.xhtml#Page_191), [194](c11.xhtml#Page_194)    `comm` section, [188](c11.xhtml#Page_188)    compilation    conditional, [214](c12.xhtml#Page_214), [215](c12.xhtml#Page_215)    cross, [21](c02.xhtml#Page_21)    of modules, [268](c17.xhtml#Page_268)    native, [21](c02.xhtml#Page_21)    of a program, [5](c01.xhtml#Page_5)    compiler, [3](c01.xhtml#Page_3), [10](c01.xhtml#Page_10)–[16](c01.xhtml#Page_16)    ARM, [45](c03.xhtml#Page_45)    compiler flags, [10](c01.xhtml#Page_10)    `-c`, [45](c03.xhtml#Page_45)    `-E`, [16](c01.xhtml#Page_16), [208](c12.xhtml#Page_208)    `-g3`, [45](c03.xhtml#Page_45)    `-ggdb`, [10](c01.xhtml#Page_10)    `-mcpu=cortex-m0`, [45](c03.xhtml#Page_45)    `-mfloat-abi=soft`, [45](c03.xhtml#Page_45)    `-mthumb`, [45](c03.xhtml#Page_45)    `-o`, [10](c01.xhtml#Page_10), [45](c03.xhtml#Page_45)    `-O0`, [45](c03.xhtml#Page_45)    `-static`, [14](c01.xhtml#Page_14)    `-Wa` , [12](c01.xhtml#Page_12)    `-Wall`, [10](c01.xhtml#Page_10), [45](c03.xhtml#Page_45)    `-Wextra`, [10](c01.xhtml#Page_10)    `-Wl`, [14](c01.xhtml#Page_14)    complex data types, [117](c08.xhtml#Page_117)    conditional compilation, [214](c12.xhtml#Page_214), [215](c12.xhtml#Page_215)    `CONFIG` section, [195](c11.xhtml#Page_195), [196](c11.xhtml#Page_196), [202](c11.xhtml#Page_202), [203](c11.xhtml#Page_203)    configuration items, multiple, [202](c11.xhtml#Page_202)    Console tab, [44](c03.xhtml#Page_44)    Console window, [26](c02.xhtml#Page_26), [28](c02.xhtml#Page_28), [44](c03.xhtml#Page_44)    `const`, [71](c04.xhtml#Page_71), [91](c06.xhtml#Page_91), [114](c07.xhtml#Page_114), [118](c08.xhtml#Page_118), [209](c12.xhtml#Page_209)    declaration, [92](c06.xhtml#Page_92)    demonstration, [102](c06.xhtml#Page_102)    constant    bit, [71](c04.xhtml#Page_71)    global, [186](c11.xhtml#Page_186)    string, [186](c11.xhtml#Page_186), [188](c11.xhtml#Page_188)    `const char* const`, [101](c06.xhtml#Page_101), [102](c06.xhtml#Page_102)    `const volatile`, [165](c10.xhtml#Page_165)    `continue` statement, [88](c05.xhtml#Page_88), [89](c05.xhtml#Page_89)    copy file (buffered), [244](c14.xhtml#Page_244)    `core dumped` (floating-point exception), [261](c16.xhtml#Page_261)    `cpp`, [11](c01.xhtml#Page_11)    Cppcheck, [283](b01.xhtml#Page_283)    `CR1` (Control Register 1), [166](c10.xhtml#Page_166)–[169](c10.xhtml#Page_169), [173](c10.xhtml#Page_173), [175](c10.xhtml#Page_175), [176](c10.xhtml#Page_176)    create mode, [253](c15.xhtml#Page_253)    creative theft, [282](b01.xhtml#Page_282)    creative writing, [281](b01.xhtml#Page_281)    cross-compilation, [21](c02.xhtml#Page_21)    cross file type checking, [269](c17.xhtml#Page_269)    curly brackets (`{}`), [7](c01.xhtml#Page_7)    custom type, [132](c08.xhtml#Page_132), [133](c08.xhtml#Page_133)    **D**    data    initialized, [185](c11.xhtml#Page_185)    type, complex, [117](c08.xhtml#Page_117)    uninitialized, [185](c11.xhtml#Page_185), [186](c11.xhtml#Page_186)    `data`    assembler directive, [187](c11.xhtml#Page_187), [189](c11.xhtml#Page_189)    ideal memory model, [185](c11.xhtml#Page_185), [186](c11.xhtml#Page_186)    section, [187](c11.xhtml#Page_187), [191](c11.xhtml#Page_191), [192](c11.xhtml#Page_192)    size, [46](c03.xhtml#Page_46)    deallocate heap (`free`), [225](c13.xhtml#Page_225)    deallocation, local variable, [109](c07.xhtml#Page_109), [110](c07.xhtml#Page_110)    Debug configuration, [23](c02.xhtml#Page_23)    debug connector (JTAG), [34](c03.xhtml#Page_34), [35](c03.xhtml#Page_35)    *Debug* directory, [47](c03.xhtml#Page_47)    debugger, [10](c01.xhtml#Page_10), [26](c02.xhtml#Page_26), [47](c03.xhtml#Page_47), [50](c03.xhtml#Page_50), [28](c02.xhtml#Page_28), [48](c03.xhtml#Page_48)    external, [194](c11.xhtml#Page_194)    internal, [195](c11.xhtml#Page_195)    interrupt, [178](c10.xhtml#Page_178), [179](c10.xhtml#Page_179)    JTAG, [xviii](f04.xhtml#Page_xviii), [1](p01.xhtml#Page_1), [34](c03.xhtml#Page_34)–[35](c03.xhtml#Page_35), [49](c03.xhtml#Page_49)    local variable, [110](c07.xhtml#Page_110)    perspective, [27](c02.xhtml#Page_27), [28](c02.xhtml#Page_28), [48](c03.xhtml#Page_48)    pointers, [96](c06.xhtml#Page_96)    stack frame, [111](c07.xhtml#Page_111)    ST-LINK, [36](c03.xhtml#Page_36)    `struct`, [122](c08.xhtml#Page_122)    variables, [56](c04.xhtml#Page_56)    `dec` (size), [46](c03.xhtml#Page_46)    decimal, [59](c04.xhtml#Page_59)    decision statements, [77](c05.xhtml#Page_77)    declaration    array, [92](c06.xhtml#Page_92)    `const`, [92](c06.xhtml#Page_92)    pointer, [94](c06.xhtml#Page_94)    variable, [55](c04.xhtml#Page_55)    decrement operator (`--`), [66](c04.xhtml#Page_66)    `Default_Handler`, [164](c10.xhtml#Page_164)    `define`    code, preprocessor, [211](c12.xhtml#Page_211)–[213](c12.xhtml#Page_213)    conditional code, preprocessor, [214](c12.xhtml#Page_214)    parameterized, preprocessor, [210](c12.xhtml#Page_210)    preprocessor, [208](c12.xhtml#Page_208)    defining bits, [71](c04.xhtml#Page_71)    deleting node, linked list, [230](c13.xhtml#Page_230)    demonstration, `const`, [102](c06.xhtml#Page_102)    dereference operator (`*`), [94](c06.xhtml#Page_94)    designated initializers, [127](c08.xhtml#Page_127)    deterministic library, [278](c17.xhtml#Page_278)    development board, [34](c03.xhtml#Page_34)    `diagnostic` (GCC `#pragma`), [218](c12.xhtml#Page_218)    directives, preprocessor, [10](c01.xhtml#Page_10)    directory    *CMSIS*, [47](c03.xhtml#Page_47)    *Debug*, [47](c03.xhtml#Page_47)    *HAL_Driver*, [47](c03.xhtml#Page_47)    *inc*, [47](c03.xhtml#Page_47)    *startup*, [47](c03.xhtml#Page_47)    disable interrupt, [181](c10.xhtml#Page_181)    divide, integer, [54](c04.xhtml#Page_54)    divide by zero, [246](c14.xhtml#Page_246)    division, fixed-point, [263](c16.xhtml#Page_263)–[265](c16.xhtml#Page_265)    `dnf`, [4](c01.xhtml#Page_4)    double inclusion protection, [270](c17.xhtml#Page_270)    `double`, `printf`, [238](c14.xhtml#Page_238)    double quotes (`\\″`), [7](c01.xhtml#Page_7)    `do/while` trick, preprocessor, [213](c12.xhtml#Page_213)    Doxygen, [40](c03.xhtml#Page_40), [108](c07.xhtml#Page_108), [143](c09.xhtml#Page_143), [283](b01.xhtml#Page_283)    dynamic memory (heap), [221](p02.xhtml#Page_221), [223](c13.xhtml#Page_223)–[235](c13.xhtml#Page_235)    problems, [233](c13.xhtml#Page_233)    **E**    `E` (compiler option), [16](c01.xhtml#Page_16)    `ebss` (linker symbol), [192](c11.xhtml#Page_192)    Eclipse, [4](c01.xhtml#Page_4), [19](c02.xhtml#Page_19)–[31](c02.xhtml#Page_31)    `edata` (linker symbol), [192](c11.xhtml#Page_192)    *.elf* (file extension), [47](c03.xhtml#Page_47)    `elif` (preprocessor), [216](c12.xhtml#Page_216)    `else` statement, [79](c05.xhtml#Page_79)    embedded computer, [xvii](f04.xhtml#Page_xvii)    embedded `struct`, [133](c08.xhtml#Page_133), [134](c08.xhtml#Page_134)    empty loop (anti-pattern), [89](c05.xhtml#Page_89)    Empty Project, [54](c04.xhtml#Page_54)    enable interrupt, [181](c10.xhtml#Page_181)    `endif` (preprocessor), [214](c12.xhtml#Page_214), [215](c12.xhtml#Page_215)    end of line, [146](c09.xhtml#Page_146), [254](c15.xhtml#Page_254)    `enum` (enumerated type), [117](c08.xhtml#Page_117), [118](c08.xhtml#Page_118)    illegal values, [118](c08.xhtml#Page_118), [119](c08.xhtml#Page_119)    preprocessor trick, [119](c08.xhtml#Page_119)–[121](c08.xhtml#Page_121)    type, [132](c08.xhtml#Page_132), [133](c08.xhtml#Page_133)    equals bug, [78](c05.xhtml#Page_78), [79](c05.xhtml#Page_79)    equals operator (`==`), [78](c05.xhtml#Page_78)    `error` (preprocessor), [218](c12.xhtml#Page_218)    `Error_Handler`, [152](c09.xhtml#Page_152), [199](c11.xhtml#Page_199)    `ErrorHandler`, [147](c09.xhtml#Page_147)    errors, [6](c01.xhtml#Page_6)    preprocessor, [209](c12.xhtml#Page_209)–[211](c12.xhtml#Page_211)    `estack` (linker symbol), [192](c11.xhtml#Page_192)    event logging, [177](c10.xhtml#Page_177), [178](c10.xhtml#Page_178), [179](c10.xhtml#Page_179)    evil `gets`, [241](c14.xhtml#Page_241)    examples, importing, [31](c02.xhtml#Page_31)    exclusive OR operator (`^`), [69](c04.xhtml#Page_69)    executable, [11](c01.xhtml#Page_11)    file, [184](c11.xhtml#Page_184)    Executables window, [28](c02.xhtml#Page_28)    exiting a loop (`break`), [87](c05.xhtml#Page_87)    `extern`, [268](c17.xhtml#Page_268)–[271](c17.xhtml#Page_271), [274](c17.xhtml#Page_274)    external debugger, [194](c11.xhtml#Page_194)    **F**    F5 (Step Into), [50](c03.xhtml#Page_50)    F6 (Step Over), [29](c02.xhtml#Page_29), [30](c02.xhtml#Page_30), [49](c03.xhtml#Page_49), [50](c03.xhtml#Page_50)    F8 (Resume), [30](c02.xhtml#Page_30)    factorial, [112](c07.xhtml#Page_112), [113](c07.xhtml#Page_113)    `fclose`, [245](c14.xhtml#Page_245), [246](c14.xhtml#Page_246)    `fgets`, [228](c13.xhtml#Page_228)–[230](c13.xhtml#Page_230), [241](c14.xhtml#Page_241), [243](c14.xhtml#Page_243)    field, `struct`, [121](c08.xhtml#Page_121), [122](c08.xhtml#Page_122)    file    binary, [243](c14.xhtml#Page_243), [244](c14.xhtml#Page_244)–[246](c14.xhtml#Page_246)    buffered copy, [244](c14.xhtml#Page_244)    closing, [242](c14.xhtml#Page_242), [246](c14.xhtml#Page_246)    executable, [184](c11.xhtml#Page_184)    I/O, buffered, [237](c14.xhtml#Page_237)–[246](c14.xhtml#Page_246)    *main.c*, [46](c03.xhtml#Page_46)    object, [184](c11.xhtml#Page_184)    opening, [242](c14.xhtml#Page_242)–[243](c14.xhtml#Page_243)    *output.map*, [47](c03.xhtml#Page_47)    program, [184](c11.xhtml#Page_184)    *startup_stm32f030x8.s*, [47](c03.xhtml#Page_47), [51](c03.xhtml#Page_51), [163](c10.xhtml#Page_163), [193](c11.xhtml#Page_193)    *stm32f0xx_it.h*, [47](c03.xhtml#Page_47)    *stm32f0xxit.c*, [46](c03.xhtml#Page_46)    *syscalls.c*, [46](c03.xhtml#Page_46)    *Systemstm32f0xx.c*, [46](c03.xhtml#Page_46)    `FILE*` declaration, [242](c14.xhtml#Page_242), [245](c14.xhtml#Page_245)    firmware    library, [37](c03.xhtml#Page_37)    upgrade, [185](c11.xhtml#Page_185), [204](c11.xhtml#Page_204)    fixed-point, [262](c16.xhtml#Page_262)–[265](c16.xhtml#Page_265)    addition, [263](c16.xhtml#Page_263)–[265](c16.xhtml#Page_265)    division, [263](c16.xhtml#Page_263)–[265](c16.xhtml#Page_265)    multiplication, [263](c16.xhtml#Page_263)–[265](c16.xhtml#Page_265)    subtraction, [263](c16.xhtml#Page_263)–[265](c16.xhtml#Page_265)    fixing interrupt problem, [181](c10.xhtml#Page_181)    `FLASH`, [202](c11.xhtml#Page_202), [203](c11.xhtml#Page_203)    flash (memory), [184](c11.xhtml#Page_184)    `FLASH_EraseInitTypeDef`, [197](c11.xhtml#Page_197), [200](c11.xhtml#Page_200)    flash memory programmer, [xviii](f04.xhtml#Page_xviii), [34](c03.xhtml#Page_34), [43](c03.xhtml#Page_43), [48](c03.xhtml#Page_48), [195](c11.xhtml#Page_195)    `FLASH` section, [196](c11.xhtml#Page_196)    floating pin, [85](c05.xhtml#Page_85)    floating-point    automatic conversion, [258](c16.xhtml#Page_258)    alternatives, [262](c16.xhtml#Page_262)    divide exception, [246](c14.xhtml#Page_246)    exception, [261](c16.xhtml#Page_261)    guard digit, [259](c16.xhtml#Page_259)    hardware, [262](c16.xhtml#Page_262)    implementation, [262](c16.xhtml#Page_262)    infinity, [260](c16.xhtml#Page_260), [261](c16.xhtml#Page_261)    money, [260](c16.xhtml#Page_260)    `NaN`, [260](c16.xhtml#Page_260), [261](c16.xhtml#Page_261)    normalization, [260](c16.xhtml#Page_260)    numbers, [222](p02.xhtml#Page_222), [257](c16.xhtml#Page_257)–[265](c16.xhtml#Page_265)    precision, [260](c16.xhtml#Page_260)    problems, [259](c16.xhtml#Page_259)    rounding error, [259](c16.xhtml#Page_259)    subnormal, [260](c16.xhtml#Page_260), [262](c16.xhtml#Page_262)    floating vs. integer divide, [258](c16.xhtml#Page_258)    flushing, [246](c14.xhtml#Page_246)    `fopen`, [242](c14.xhtml#Page_242), [245](c14.xhtml#Page_245)    `for` loop, [82](c05.xhtml#Page_82), [93](c06.xhtml#Page_93)    `for(;;)` (loop forever), [40](c03.xhtml#Page_40), [42](c03.xhtml#Page_42), [43](c03.xhtml#Page_43), [84](c05.xhtml#Page_84), [126](c08.xhtml#Page_126)    `fprintf`, [240](c14.xhtml#Page_240), [243](c14.xhtml#Page_243)    `fread`, [244](c14.xhtml#Page_244), [245](c14.xhtml#Page_245)    `free`, [225](c13.xhtml#Page_225)    `NULL` pointer, [226](c13.xhtml#Page_226)    function. *See* procedure    function pointer, `typedef`, [136](c08.xhtml#Page_136)    `fwrite`, [244](c14.xhtml#Page_244), [245](c14.xhtml#Page_245)    **G**    GCC, [3](c01.xhtml#Page_3), [5](c01.xhtml#Page_5), [10](c01.xhtml#Page_10), [11](c01.xhtml#Page_11)    address sanitizer, [234](c13.xhtml#Page_234)–[236](c13.xhtml#Page_236)    `arm-none-eabi-gcc`, [45](c03.xhtml#Page_45)    diagnostic (`#pragma`), [218](c12.xhtml#Page_218)    installing, [4](c01.xhtml#Page_4)    `-L` (library search), [277](c17.xhtml#Page_277)    options, [44](c03.xhtml#Page_44)    warning, suggest parentheses, [79](c05.xhtml#Page_79)    `gcc -E`, [208](c12.xhtml#Page_208)    general purpose input/ouput. *See* GPIO    `gets`, [241](c14.xhtml#Page_241)    `ggdb`, [10](c01.xhtml#Page_10)    `global` (assembler directive), [187](c11.xhtml#Page_187)    global    constant, [186](c11.xhtml#Page_186)    initialized, [186](c11.xhtml#Page_186), [187](c11.xhtml#Page_187)    initialized to zero, [186](c11.xhtml#Page_186), [187](c11.xhtml#Page_187)    uninitialized, [186](c11.xhtml#Page_186), [187](c11.xhtml#Page_187)    variable, [105](c07.xhtml#Page_105), [106](c07.xhtml#Page_106)    GPIO, [70](c04.xhtml#Page_70), [71](c04.xhtml#Page_71), [83](c05.xhtml#Page_83)–[86](c05.xhtml#Page_86), [149](c09.xhtml#Page_149), [150](c09.xhtml#Page_150)    internal wiring, [86](c05.xhtml#Page_86)    pin, [41](c03.xhtml#Page_41), [42](c03.xhtml#Page_42)    register, [42](c03.xhtml#Page_42)    `GPIOA`, [150](c09.xhtml#Page_150), [155](c09.xhtml#Page_155), [202](c11.xhtml#Page_202)    `GPIO_AF1_USART2`, [150](c09.xhtml#Page_150), [155](c09.xhtml#Page_155)    `GPIO_InitTypeDef`, [42](c03.xhtml#Page_42), [43](c03.xhtml#Page_43), [83](c05.xhtml#Page_83), [84](c05.xhtml#Page_84), [155](c09.xhtml#Page_155)    `GPIO_MODE_AF_PP`, [150](c09.xhtml#Page_150), [155](c09.xhtml#Page_155)    `GPIO_MODE_INPUT`, [84](c05.xhtml#Page_84)    `GPIO_MODE_OUTPUT_PP`, [42](c03.xhtml#Page_42), [43](c03.xhtml#Page_43), [153](c09.xhtml#Page_153)    `GPIO_NOPULL`, [42](c03.xhtml#Page_42), [43](c03.xhtml#Page_43), [150](c09.xhtml#Page_150), [155](c09.xhtml#Page_155)    `GPIO_PIN_2`, [150](c09.xhtml#Page_150), [155](c09.xhtml#Page_155), [202](c11.xhtml#Page_202)    `GPIO_PIN_3`, [150](c09.xhtml#Page_150), [155](c09.xhtml#Page_155), [202](c11.xhtml#Page_202)    `GPIO_PIN_SET`, [86](c05.xhtml#Page_86)    `GPIO_PinState`, [83](c05.xhtml#Page_83), [84](c05.xhtml#Page_84)    `GPIO_PULLDOWN`, [85](c05.xhtml#Page_85)    `GPIO_PULLUP`, [85](c05.xhtml#Page_85), [153](c09.xhtml#Page_153)    `GPIO_SPEED_FREQ_HIGH`, [42](c03.xhtml#Page_42), [43](c03.xhtml#Page_43), [153](c09.xhtml#Page_153)    `GPIO_SPEED_FREQ_LOW`, [150](c09.xhtml#Page_150), [155](c09.xhtml#Page_155)    Gray code, [60](c04.xhtml#Page_60)    greater than operator (`>`), [78](c05.xhtml#Page_78)    greater than or equal operator (`>=`), [78](c05.xhtml#Page_78)    guard digit, [259](c16.xhtml#Page_259)    **H**    HAL (hardware abstraction layer), [33](c03.xhtml#Page_33), [39](c03.xhtml#Page_39), [84](c05.xhtml#Page_84)    library, [41](c03.xhtml#Page_41), [42](c03.xhtml#Page_42), [47](c03.xhtml#Page_47)    modules, [267](c17.xhtml#Page_267)    namespace, [273](c17.xhtml#Page_273)    `HAL_Delay`, [42](c03.xhtml#Page_42), [43](c03.xhtml#Page_43), [147](c09.xhtml#Page_147), [153](c09.xhtml#Page_153), [154](c09.xhtml#Page_154), [167](c10.xhtml#Page_167), [176](c10.xhtml#Page_176), [198](c11.xhtml#Page_198)    `HAL_Driver` (directory), [47](c03.xhtml#Page_47)    `HAL_FLASH_ERROR_NONE`, [200](c11.xhtml#Page_200)    `HAL_FLASH_ERROR_PROG`, [200](c11.xhtml#Page_200)    `HAL_FLASH_ERROR_WRP`, [200](c11.xhtml#Page_200)    `HAL_FLASH_Lock`,197, [200](c11.xhtml#Page_200)    `HAL_FLASH_Program`, [197](c11.xhtml#Page_197), [200](c11.xhtml#Page_200)    `HAL_FLASH_Unlock`, [196](c11.xhtml#Page_196), [200](c11.xhtml#Page_200)    `HAL_FLASHEx_Erase`, [197](c11.xhtml#Page_197), [200](c11.xhtml#Page_200)    `HAL_GPIO_DeInit`, [155](c09.xhtml#Page_155), [202](c11.xhtml#Page_202)    `HAL_GPIO_Init`, [42](c03.xhtml#Page_42), [43](c03.xhtml#Page_43), [83](c05.xhtml#Page_83), [84](c05.xhtml#Page_84), [153](c09.xhtml#Page_153), [199](c11.xhtml#Page_199), [201](c11.xhtml#Page_201)    `HAL_GPIO_ReadPin`, [84](c05.xhtml#Page_84), [86](c05.xhtml#Page_86)    `HAL_GPIO_TogglePin`, [42](c03.xhtml#Page_42), [43](c03.xhtml#Page_43), [49](c03.xhtml#Page_49), [153](c09.xhtml#Page_153), [198](c11.xhtml#Page_198)    `HAL_GPIO_WritePin`, [84](c05.xhtml#Page_84), [153](c09.xhtml#Page_153), [198](c11.xhtml#Page_198)    `HAL_Init`, [41](c03.xhtml#Page_41), [43](c03.xhtml#Page_43), [47](c03.xhtml#Page_47), [83](c05.xhtml#Page_83), [147](c09.xhtml#Page_147), [154](c09.xhtml#Page_154), [176](c10.xhtml#Page_176), [200](c11.xhtml#Page_200)    `HAL_OK`, [148](c09.xhtml#Page_148), [199](c11.xhtml#Page_199), [200](c11.xhtml#Page_200)    `HAL_StatusTypeDef`, [200](c11.xhtml#Page_200)    `HAL_UART_Init`, [147](c09.xhtml#Page_147), [148](c09.xhtml#Page_148), [154](c09.xhtml#Page_154), [199](c11.xhtml#Page_199)    `HAL_UART_MspDeInit`, [202](c11.xhtml#Page_202)    `HAL_UART_MspInit`, [149](c09.xhtml#Page_149), [149](c09.xhtml#Page_149), [201](c11.xhtml#Page_201)    `HAL_UART_STATE_RESET`, [149](c09.xhtml#Page_149)    `HAL_UNLOCKED`, [149](c09.xhtml#Page_149)    hardware    initialization, [41](c03.xhtml#Page_41)    specification, [71](c04.xhtml#Page_71)    to `struct`, [134](c08.xhtml#Page_134)    heap, [110](c07.xhtml#Page_110), [186](c11.xhtml#Page_186), [221](p02.xhtml#Page_221), [223](c13.xhtml#Page_223)    *hello.c*, [5](c01.xhtml#Page_5)    `hello, hello, hello`, [108](c07.xhtml#Page_108)    Hello World, [3](c01.xhtml#Page_3), [5](c01.xhtml#Page_5)–[16](c01.xhtml#Page_16), [21](c02.xhtml#Page_21), [24](c02.xhtml#Page_24), [101](c06.xhtml#Page_101)    ANSI C Project, [22](c02.xhtml#Page_22)    one-character version, [142](c09.xhtml#Page_142)–[143](c09.xhtml#Page_143)    serial, [141](c09.xhtml#Page_141), [147](c09.xhtml#Page_147)    serial interrupt, [161](c10.xhtml#Page_161), [174](c10.xhtml#Page_174)–[175](c10.xhtml#Page_175)    `hex` (size), [46](c03.xhtml#Page_46)    hexadecimal, [59](c04.xhtml#Page_59)    `printf`, [238](c14.xhtml#Page_238), [239](c14.xhtml#Page_239)    hidden variable, [107](c07.xhtml#Page_107)–[108](c07.xhtml#Page_108)    **I**    I/O    bitmapped, [71](c04.xhtml#Page_71)    buffered, [222](p02.xhtml#Page_222)    buffered file, [237](c14.xhtml#Page_237)–[246](c14.xhtml#Page_246)    interrupt, [161](c10.xhtml#Page_161), [162](c10.xhtml#Page_162)    polling, [161](c10.xhtml#Page_161), [162](c10.xhtml#Page_162)    raw, [222](p02.xhtml#Page_222), [249](c15.xhtml#Page_249)–[255](c15.xhtml#Page_255)    IDE, [19](c02.xhtml#Page_19)–[28](c02.xhtml#Page_28)    Basic Settings dialog, [23](c02.xhtml#Page_23)    Build Project, [24](c02.xhtml#Page_24)    Console window, [26](c02.xhtml#Page_26)    debugging, [26](c02.xhtml#Page_26)    generated makefile, [30](c02.xhtml#Page_30)    Problems tab, [21](c02.xhtml#Page_21)    project creation, [22](c02.xhtml#Page_22)    Project Explorer, [21](c02.xhtml#Page_21)    project screen, [20](c02.xhtml#Page_20), [21](c02.xhtml#Page_21)    Run Configurations dialog, [25](c02.xhtml#Page_25)    Select Configurations dialog, [23](c02.xhtml#Page_23)    starting, [20](c02.xhtml#Page_20)    text editor, [21](c02.xhtml#Page_21)    view, [21](c02.xhtml#Page_21)    workspace, [20](c02.xhtml#Page_20)    ideal memory model, [185](c11.xhtml#Page_185)    `bss`, [185](c11.xhtml#Page_185), [186](c11.xhtml#Page_186)    `data`, [185](c11.xhtml#Page_185), [186](c11.xhtml#Page_186)    `text`, [185](c11.xhtml#Page_185), [186](c11.xhtml#Page_186)    `ifdef` (preprocessor), [214](c12.xhtml#Page_214)–[215](c12.xhtml#Page_215)    `ifdef UNDEF` (remove code), [219](c12.xhtml#Page_219)    `if/else` ambiguity, [79](c05.xhtml#Page_79)    `ifndef` (preprocessor), [215](c12.xhtml#Page_215)    `if` statement, [77](c05.xhtml#Page_77)–[79](c05.xhtml#Page_79)    illegal array index, [92](c06.xhtml#Page_92)    importing examples, [31](c02.xhtml#Page_31)    *inc* directory, [47](c03.xhtml#Page_47)    `include` (preprocessor), [7](c01.xhtml#Page_7), [12](c01.xhtml#Page_12), [209](c12.xhtml#Page_209), [217](c12.xhtml#Page_217), [270](c17.xhtml#Page_270)    include file, [217](c12.xhtml#Page_217)    inclusion, double protection, [217](c12.xhtml#Page_217), [270](c17.xhtml#Page_270)    increment operator (`++`), [65](c04.xhtml#Page_65)–[66](c04.xhtml#Page_66)    index    array, [92](c06.xhtml#Page_92)    wrong array, [100](c06.xhtml#Page_100)    `Infinite_Loop`, [164](c10.xhtml#Page_164)    infinite recursion, [113](c07.xhtml#Page_113)    `INFINITY` (floating point), [260](c16.xhtml#Page_260)–[261](c16.xhtml#Page_261)    initialization    array, [93](c06.xhtml#Page_93)    `char*`, [101](c06.xhtml#Page_101)    hardware, [41](c03.xhtml#Page_41)    string, [101](c06.xhtml#Page_101)    `struct`, [127](c08.xhtml#Page_127)    UART, [147](c09.xhtml#Page_147)    of variables, [56](c04.xhtml#Page_56)–[57](c04.xhtml#Page_57)    initialized    data, [185](c11.xhtml#Page_185)    global variable, [186](c11.xhtml#Page_186), [187](c11.xhtml#Page_187)    local static variable, [189](c11.xhtml#Page_189)    module only, [186](c11.xhtml#Page_186)    static local, [187](c11.xhtml#Page_187)    to zero global, [186](c11.xhtml#Page_186), [187](c11.xhtml#Page_187)    initializers, designated, [127](c08.xhtml#Page_127)    inline procedure, [211](c12.xhtml#Page_211)    installing GCC, [4](c01.xhtml#Page_4)    instrumenting code, [177](c10.xhtml#Page_177)    `int`, [56](c04.xhtml#Page_56), [114](c07.xhtml#Page_114)    `long`, [57](c04.xhtml#Page_57)    `long long`, [58](c04.xhtml#Page_58)    `short`, [57](c04.xhtml#Page_57)    `int16_t`, [61](c04.xhtml#Page_61)    `int32_t`, [61](c04.xhtml#Page_61), [62](c04.xhtml#Page_62)    `int64_t`, [61](c04.xhtml#Page_61), [62](c04.xhtml#Page_62)    `int8_t`, [61](c04.xhtml#Page_61)    integer    add, [54](c04.xhtml#Page_54)    alignment, [123](c08.xhtml#Page_123)–[124](c08.xhtml#Page_124)    divide, [54](c04.xhtml#Page_54)    vs. floating divide, [258](c16.xhtml#Page_258)    modulus, [54](c04.xhtml#Page_54)    multiply, [54](c04.xhtml#Page_54)    `printf`, [238](c14.xhtml#Page_238), [239](c14.xhtml#Page_239)    size, [57](c04.xhtml#Page_57)–[59](c04.xhtml#Page_59)    subtract, [54](c04.xhtml#Page_54)    unsigned, [62](c04.xhtml#Page_62)    integrated development environment. *See* IDE    internal debugger, [195](c11.xhtml#Page_195)    interrupt    circular buffer, [173](c10.xhtml#Page_173)    code, analyzing, [177](c10.xhtml#Page_177), [179](c10.xhtml#Page_179)    data analysis, [165](c10.xhtml#Page_165)    debugging, [178](c10.xhtml#Page_178)    disable, [181](c10.xhtml#Page_181)    enable, [181](c10.xhtml#Page_181)    handler, [279](c17.xhtml#Page_279)    hell, [171](c10.xhtml#Page_171)    I/O, [161](c10.xhtml#Page_161), [162](c10.xhtml#Page_162)    mapping, [170](c10.xhtml#Page_170)    problem, [177](c10.xhtml#Page_177)    fixing, [181](c10.xhtml#Page_181)    routines, [163](c10.xhtml#Page_163)–[164](c10.xhtml#Page_164)    serial, [174](c10.xhtml#Page_174)–[175](c10.xhtml#Page_175)    shared variable, [180](c10.xhtml#Page_180)    `interrupt` (nonstandard keyword), [170](c10.xhtml#Page_170)    interrupt and status register. *See* ISR    `int main()`, [7](c01.xhtml#Page_7)    invert bit, or NOT operator (`~`), [68](c04.xhtml#Page_68), [69](c04.xhtml#Page_69)    `ioctl`, [255](c15.xhtml#Page_255)    `isalpha`, [103](c06.xhtml#Page_103)    `isnormal`, [262](c16.xhtml#Page_262)    ISR (interrupt and status register), [150](c09.xhtml#Page_150)–[153](c09.xhtml#Page_153), [163](c10.xhtml#Page_163), [166](c10.xhtml#Page_166), [168](c10.xhtml#Page_168), [174](c10.xhtml#Page_174)–[175](c10.xhtml#Page_175), [198](c11.xhtml#Page_198)    `isr_vector` section, [190](c11.xhtml#Page_190), [191](c11.xhtml#Page_191), [194](c11.xhtml#Page_194)    **J**    JTAG    debug connector, [34](c03.xhtml#Page_34), [35](c03.xhtml#Page_35)    debugger, [xviii](f04.xhtml#Page_xviii), [1](p01.xhtml#Page_1), [34](c03.xhtml#Page_34)–[35](c03.xhtml#Page_35), [49](c03.xhtml#Page_49)    jumpers, [36](c03.xhtml#Page_36)    **L**    last in, first out (LIFO), [111](c07.xhtml#Page_111)    `l` as variable name, [55](c04.xhtml#Page_55)    `ld` (linker), [11](c01.xhtml#Page_11)    LD1 (LED), [37](c03.xhtml#Page_37)    LD2 (LED), [37](c03.xhtml#Page_37), [199](c11.xhtml#Page_199)    leak, memory, [233](c13.xhtml#Page_233)    learning to write, [281](b01.xhtml#Page_281)    LED, [83](c05.xhtml#Page_83)    blink, [32](c02.xhtml#Page_32)    LD1, [37](c03.xhtml#Page_37)    LD2, [37](c03.xhtml#Page_37), [199](c11.xhtml#Page_199)    power, [34](c03.xhtml#Page_34)    user, [34](c03.xhtml#Page_34)    LED2, [41](c03.xhtml#Page_41), [42](c03.xhtml#Page_42)    `LED2_GPIO_CLK_ENABLE`, [42](c03.xhtml#Page_42), [43](c03.xhtml#Page_43), [83](c05.xhtml#Page_83)–[84](c05.xhtml#Page_84), [199](c11.xhtml#Page_199)    `LED2_GPIO_PORT`, [42](c03.xhtml#Page_42), [43](c03.xhtml#Page_43), [49](c03.xhtml#Page_49), [83](c05.xhtml#Page_83)–[84](c05.xhtml#Page_84), [153](c09.xhtml#Page_153), [198](c11.xhtml#Page_198)–[199](c11.xhtml#Page_199)    `led2_Init`, [147](c09.xhtml#Page_147), [154](c09.xhtml#Page_154), [167](c10.xhtml#Page_167), [176](c10.xhtml#Page_176), [200](c11.xhtml#Page_200)    `LED2_PIN;`, [42](c03.xhtml#Page_42)–[43](c03.xhtml#Page_43), [49](c03.xhtml#Page_49), [83](c05.xhtml#Page_83)–[84](c05.xhtml#Page_84), [153](c09.xhtml#Page_153), [198](c11.xhtml#Page_198)–[199](c11.xhtml#Page_199)    left shift operator (`<<`), [69](c04.xhtml#Page_69)–[70](c04.xhtml#Page_70)    less than operator (`<`), [78](c05.xhtml#Page_78)    less than or equal operator (`<=`), [78](c05.xhtml#Page_78)    *libc.a*, [193](c11.xhtml#Page_193)    *libm.a*, [193](c11.xhtml#Page_193)    library, [11](c01.xhtml#Page_11), [193](c11.xhtml#Page_193), [273](c17.xhtml#Page_273)–[278](c17.xhtml#Page_278)    building, [275](c17.xhtml#Page_275)–[278](c17.xhtml#Page_278)    deterministic, [278](c17.xhtml#Page_278)    `make`, [275](c17.xhtml#Page_275)–[277](c17.xhtml#Page_277)    nondeterministic, [278](c17.xhtml#Page_278)    STM firmware, [37](c03.xhtml#Page_37)    LIFO (last in, first out), [111](c07.xhtml#Page_111)    line    buffering, [246](c14.xhtml#Page_246)–[247](c14.xhtml#Page_247)    endings, [146](c09.xhtml#Page_146)    markers, [208](c12.xhtml#Page_208)    line feed *See* newline    linked list, [224](c13.xhtml#Page_224), [226](c13.xhtml#Page_226)–[233](c13.xhtml#Page_233)    adding node, [227](c13.xhtml#Page_227), [228](c13.xhtml#Page_228)    printing, [229](c13.xhtml#Page_229), [230](c13.xhtml#Page_230)    linker, [11](c01.xhtml#Page_11), [14](c01.xhtml#Page_14)–[15](c01.xhtml#Page_15), [45](c03.xhtml#Page_45), [183](c11.xhtml#Page_183)–[204](c11.xhtml#Page_204)    advanced, [195](c11.xhtml#Page_195)    directive    `MEMORY`, [196](c11.xhtml#Page_196)    `SECTIONS`, [196](c11.xhtml#Page_196)    library, [193](c11.xhtml#Page_193)    *LinkerScript.ld*, [45](c03.xhtml#Page_45)    map, [14](c01.xhtml#Page_14), [15](c01.xhtml#Page_15), [184](c11.xhtml#Page_184), [185](c11.xhtml#Page_185), [193](c11.xhtml#Page_193)–[194](c11.xhtml#Page_194)    memory configuration, [194](c11.xhtml#Page_194)    nonstandard section, [190](c11.xhtml#Page_190)    section    `CONFIG`, [196](c11.xhtml#Page_196)    `FLASH`, [196](c11.xhtml#Page_196)    `RAM`, [196](c11.xhtml#Page_196)    symbol    `_ebss`, [192](c11.xhtml#Page_192)    `_edata`, [192](c11.xhtml#Page_192)    `_estack`, [192](c11.xhtml#Page_192)    `_sbss`, [192](c11.xhtml#Page_192)    `_sdata`, [192](c11.xhtml#Page_192)    `_sidata`, [192](c11.xhtml#Page_192)    *LinkerScript.ld*, [45](c03.xhtml#Page_45)    linking    process, [191](c11.xhtml#Page_191)    symbols, [183](c11.xhtml#Page_183)    Linux, [4](c01.xhtml#Page_4)    end of line, [146](c09.xhtml#Page_146), [254](c15.xhtml#Page_254)    USB serial setup, [158](c09.xhtml#Page_158)    list    linked, [226](c13.xhtml#Page_226)–[233](c13.xhtml#Page_233)    node, [226](c13.xhtml#Page_226)    listing, assembly, [13](c01.xhtml#Page_13)    local `include`, [270](c17.xhtml#Page_270)    local `static`    initialized, [189](c11.xhtml#Page_189)    uninitialized, [189](c11.xhtml#Page_189)    local variable, [105](c07.xhtml#Page_105)–[107](c07.xhtml#Page_107)    allocation, [109](c07.xhtml#Page_109), [110](c07.xhtml#Page_110)    deallocation, [109](c07.xhtml#Page_109), [110](c07.xhtml#Page_110)    debugger, [110](c07.xhtml#Page_110)    initialized `static`, [187](c11.xhtml#Page_187), [189](c11.xhtml#Page_189)    uninitialized, [186](c11.xhtml#Page_186)    uninitialized `static`, [187](c11.xhtml#Page_187)    log buffer, [178](c10.xhtml#Page_178), [179](c10.xhtml#Page_179)    logging, event, [178](c10.xhtml#Page_178)    `LOGO`, memory section, [203](c11.xhtml#Page_203)–[204](c11.xhtml#Page_204)    logo storage, [203](c11.xhtml#Page_203)    `long int`, [57](c04.xhtml#Page_57)    `printf`, [238](c14.xhtml#Page_238)    `long long int`, [58](c04.xhtml#Page_58)    loop    anti-patterns, [88](c05.xhtml#Page_88)–[90](c05.xhtml#Page_90)    control, [87](c05.xhtml#Page_87)    exiting (`break`), [87](c05.xhtml#Page_87)    `for`, [82](c05.xhtml#Page_82)    forever, [40](c03.xhtml#Page_40), [82](c05.xhtml#Page_82)    restarting (`continue`), [88](c05.xhtml#Page_88), [89](c05.xhtml#Page_89)    `while`, [79](c05.xhtml#Page_79), [80](c05.xhtml#Page_80)    looping statements, [80](c05.xhtml#Page_80)–[83](c05.xhtml#Page_83)    lousy programming, [79](c05.xhtml#Page_79)    lower layer (interrupt code), [164](c10.xhtml#Page_164)–[165](c10.xhtml#Page_165), [179](c10.xhtml#Page_179)    **M**    macOS, [4](c01.xhtml#Page_4)    USB serial setup, [158](c09.xhtml#Page_158)    macro processor, [12](c01.xhtml#Page_12), [207](c12.xhtml#Page_207)    macros    code, preprocessor, [211](c12.xhtml#Page_211)–[213](c12.xhtml#Page_213)    parametrized, [210](c12.xhtml#Page_210)    `make`, [9](c01.xhtml#Page_9), [271](c17.xhtml#Page_271), [272](c17.xhtml#Page_272)    simple, [208](c12.xhtml#Page_208)    magic number, [93](c06.xhtml#Page_93)    `main`, [7](c01.xhtml#Page_7)    *main.c*, [46](c03.xhtml#Page_46)    `make`, [9](c01.xhtml#Page_9), [10](c01.xhtml#Page_10), [15](c01.xhtml#Page_15)    library, [275](c17.xhtml#Page_275)–[277](c17.xhtml#Page_277)    macros, [9](c01.xhtml#Page_9), [271](c17.xhtml#Page_271), [272](c17.xhtml#Page_272)    phony target, [16](c01.xhtml#Page_16)    `make clean`, [16](c01.xhtml#Page_16)    *Makefile*, [9](c01.xhtml#Page_9), [15](c01.xhtml#Page_15)–[16](c01.xhtml#Page_16), [31](c02.xhtml#Page_31), [47](c03.xhtml#Page_47)    IDE-generated, [30](c02.xhtml#Page_30)    library, [275](c17.xhtml#Page_275)–[277](c17.xhtml#Page_277)    modules, [268](c17.xhtml#Page_268), [271](c17.xhtml#Page_271)    `malloc`, [224](c13.xhtml#Page_224)–[225](c13.xhtml#Page_225)    running out of memory, [225](c13.xhtml#Page_225)    map, linker, [14](c01.xhtml#Page_14), [15](c01.xhtml#Page_15), [184](c11.xhtml#Page_184), [185](c11.xhtml#Page_185), [193](c11.xhtml#Page_193)–[194](c11.xhtml#Page_194)    memory configuration, [194](c11.xhtml#Page_194)    memory    `CONFIG` section, [203](c11.xhtml#Page_203)    dynamic, [223](c13.xhtml#Page_223)    flash, [184](c11.xhtml#Page_184), [191](c11.xhtml#Page_191), [192](c11.xhtml#Page_192), [194](c11.xhtml#Page_194), [202](c11.xhtml#Page_202)–[203](c11.xhtml#Page_203)    heap, [223](c13.xhtml#Page_223)    layout `struct`, [122](c08.xhtml#Page_122)–[124](c08.xhtml#Page_124)    leak, [233](c13.xhtml#Page_233)    `LOGO` section, [203](c11.xhtml#Page_203)    model, [185](c11.xhtml#Page_185)    RAM, [183](c11.xhtml#Page_183)–[185](c11.xhtml#Page_185), [191](c11.xhtml#Page_191), [192](c11.xhtml#Page_192), [194](c11.xhtml#Page_194), [202](c11.xhtml#Page_202), [203](c11.xhtml#Page_203), [223](c13.xhtml#Page_223)    stack, [223](c13.xhtml#Page_223)    `MEMORY` (linker directive), [196](c11.xhtml#Page_196)    microcontroller, [32](c02.xhtml#Page_32)–[51](c03.xhtml#Page_51)    Microsoft filenames, [243](c14.xhtml#Page_243)    MinGW (Windows), [4](c01.xhtml#Page_4)    mistakes, [6](c01.xhtml#Page_6)    preprocessor, [209](c12.xhtml#Page_209)–[211](c12.xhtml#Page_211)    `mkdir`, [5](c01.xhtml#Page_5)    modular programming, [267](c17.xhtml#Page_267)–[279](c17.xhtml#Page_279)    module-only symbol    initialized, [186](c11.xhtml#Page_186)    uninitialized, [186](c11.xhtml#Page_186)    modules, [267](c17.xhtml#Page_267)–[268](c17.xhtml#Page_268)    Modules window, [28](c02.xhtml#Page_28)    modulus, integer, [54](c04.xhtml#Page_54)    Morse code, [90](c05.xhtml#Page_90), [145](c09.xhtml#Page_145)    multiple configuration items, [202](c11.xhtml#Page_202)–[203](c11.xhtml#Page_203)    multiplication, fixed-point, [263](c16.xhtml#Page_263)–[265](c16.xhtml#Page_265)    multiply, integer, [54](c04.xhtml#Page_54)    **N**    names, [v](f03.xhtml#Page_v)ariable, [55](c04.xhtml#Page_55)    namespace, [272](c17.xhtml#Page_272)    naming, `struct`, [129](c08.xhtml#Page_129)    `NaN` (Not a Number), [246](c14.xhtml#Page_246), [260](c16.xhtml#Page_260)–[261](c16.xhtml#Page_261)    native compilation, [21](c02.xhtml#Page_21)    nested vectored interrupt, [168](c10.xhtml#Page_168)    newline (`\\n`), [7](c01.xhtml#Page_7), [146](c09.xhtml#Page_146), [254](c15.xhtml#Page_254)    node (list), [226](c13.xhtml#Page_226)    nondeterministic library, [278](c17.xhtml#Page_278)    nonstandard section, linker, [190](c11.xhtml#Page_190)    normalization, floating-point, [260](c16.xhtml#Page_260)    not equals operator (`!=`), [78](c05.xhtml#Page_78)    NOT operator (`~`), [68](c04.xhtml#Page_68), [69](c04.xhtml#Page_69)    NUCLEO-F030R8, [xix](f04.xhtml#Page_xix), [32](c02.xhtml#Page_32)–[51](c03.xhtml#Page_51)    setup, [35](c03.xhtml#Page_35)    NUL character (`\\0`), [101](c06.xhtml#Page_101)    `NULL` pointer dereference, [169](c10.xhtml#Page_169)    numbers, [53](c04.xhtml#Page_53)    fixed-point, [263](c16.xhtml#Page_263)–[265](c16.xhtml#Page_265)    floating-point, [257](c16.xhtml#Page_257)–[265](c16.xhtml#Page_265)    magic, [93](c06.xhtml#Page_93)    representation, [59](c04.xhtml#Page_59)    numerical analysis, [260](c16.xhtml#Page_260)    `NVIC_EnableIRQ`, [167](c10.xhtml#Page_167), [168](c10.xhtml#Page_168), [176](c10.xhtml#Page_176)    **O**    `O` as variable name, [55](c04.xhtml#Page_55)    `O_BINARY`, [252](c15.xhtml#Page_252)–[255](c15.xhtml#Page_255)    `objcopy` (`arm-none-eabi-objcopy`), [46](c03.xhtml#Page_46)    object file, [11](c01.xhtml#Page_11), [184](c11.xhtml#Page_184)    absolute, [192](c11.xhtml#Page_192)    relocatable, [192](c11.xhtml#Page_192), [193](c11.xhtml#Page_193)    `O_CREAT`, [252](c15.xhtml#Page_252), [253](c15.xhtml#Page_253)    octal, [59](c04.xhtml#Page_59)    `printf`, [238](c14.xhtml#Page_238)    one-character version of Hello World, [142](c09.xhtml#Page_142)–[143](c09.xhtml#Page_143)    open flags    `O_BINARY`, [252](c15.xhtml#Page_252)–[255](c15.xhtml#Page_255)    `O_CREAT`, [252](c15.xhtml#Page_252), [253](c15.xhtml#Page_253)    `O_RDONLY`, [252](c15.xhtml#Page_252), [253](c15.xhtml#Page_253)    `open` function, [252](c15.xhtml#Page_252), [253](c15.xhtml#Page_253)    opening files, [242](c14.xhtml#Page_242)    open mode, file, [243](c14.xhtml#Page_243)    `rb`, [245](c14.xhtml#Page_245)    `wb`, [245](c14.xhtml#Page_245)    open source tools, [282](b01.xhtml#Page_282)–[284](b01.xhtml#Page_284)    operating system, [222](p02.xhtml#Page_222)    operations, bit, [67](c04.xhtml#Page_67)    operator    `++`, [65](c04.xhtml#Page_65)    `+=`, [65](c04.xhtml#Page_65)    `--`, [66](c04.xhtml#Page_66)    address of (`&`), [94](c06.xhtml#Page_94)    AND (`&`), [68](c04.xhtml#Page_68), [69](c04.xhtml#Page_69), [74](c04.xhtml#Page_74)    decrement (`--`), [66](c04.xhtml#Page_66)    dereference (`*`), [94](c06.xhtml#Page_94)    equals (`==`), [78](c05.xhtml#Page_78)    exclusive OR (`^`), [69](c04.xhtml#Page_69)    greater than (`>`), [78](c05.xhtml#Page_78)    greater than or equal (`>=`), [78](c05.xhtml#Page_78)    increment (`++`), [65](c04.xhtml#Page_65)    left shift (`<<`), [69](c04.xhtml#Page_69)–[70](c04.xhtml#Page_70)    less than (`<`), [78](c05.xhtml#Page_78)    less than or equal (`<=`), [78](c05.xhtml#Page_78)    NOT (`~`), [68](c04.xhtml#Page_68), [69](c04.xhtml#Page_69)    not equals (`!=`), [78](c05.xhtml#Page_78)    OR (`|`), [67](c04.xhtml#Page_67), [68](c04.xhtml#Page_68)    right shift (`>>`), [70](c04.xhtml#Page_70)    shorthand, [65](c04.xhtml#Page_65)    optimizer, [3](c01.xhtml#Page_3)    `O_RDONLY`, [252](c15.xhtml#Page_252), [253](c15.xhtml#Page_253)    OR operator (`|`), [67](c04.xhtml#Page_67), [68](c04.xhtml#Page_68)    Outline window, [28](c02.xhtml#Page_28)    *output.map*, [47](c03.xhtml#Page_47)    overflow, [63](c04.xhtml#Page_63)–[64](c04.xhtml#Page_64)    array, [98](c06.xhtml#Page_98)–[100](c06.xhtml#Page_100)    oversampling (serial), [149](c09.xhtml#Page_149)    **P**    PA2 pin, [149](c09.xhtml#Page_149), [150](c09.xhtml#Page_150)    PA3 pin, [149](c09.xhtml#Page_149), [150](c09.xhtml#Page_150)    `packed` attribute, [125](c08.xhtml#Page_125), [126](c08.xhtml#Page_126), [135](c08.xhtml#Page_135)    parameter, pointer, [128](c08.xhtml#Page_128), [129](c08.xhtml#Page_129)    parameterized macros, [210](c12.xhtml#Page_210)    parentheses warning, [79](c05.xhtml#Page_79)    permanent memory (flash), [195](c11.xhtml#Page_195)    perspective, debug, [27](c02.xhtml#Page_27), [28](c02.xhtml#Page_28), [48](c03.xhtml#Page_48)    phony target, `make`, [16](c01.xhtml#Page_16)    PIC processor, [170](c10.xhtml#Page_170)    pin    analog, [41](c03.xhtml#Page_41)    floating, [85](c05.xhtml#Page_85)    GPIO, [41](c03.xhtml#Page_41), [42](c03.xhtml#Page_42)    PA2, [149](c09.xhtml#Page_149), [150](c09.xhtml#Page_150)    PA3, [149](c09.xhtml#Page_149), [150](c09.xhtml#Page_150)    pulldown, [85](c05.xhtml#Page_85)    pullup, [85](c05.xhtml#Page_85)    pointer, [91](c06.xhtml#Page_91)    arithmetic, [97](c06.xhtml#Page_97)    scaling, [98](c06.xhtml#Page_98)    assign from array, [97](c06.xhtml#Page_97)    debugger, [96](c06.xhtml#Page_96)    declaration, [94](c06.xhtml#Page_94)    function, [136](c08.xhtml#Page_136)    `typedef`, [136](c08.xhtml#Page_136)    parameters, [128](c08.xhtml#Page_128), [129](c08.xhtml#Page_129)    `printf` (`%p`), [95](c06.xhtml#Page_95)    size    STM32, [96](c06.xhtml#Page_96)    x86, [96](c06.xhtml#Page_96)    `struct`, [128](c08.xhtml#Page_128)    and thing, [94](c06.xhtml#Page_94)    variable panel, [96](c06.xhtml#Page_96)    polling I/O, [161](c10.xhtml#Page_161)–[162](c10.xhtml#Page_162)    power connector, [34](c03.xhtml#Page_34)    power LED, [34](c03.xhtml#Page_34)    `pragma` (preprocessor), [217](c12.xhtml#Page_217), [218](c12.xhtml#Page_218)    `pragma diagnostic` (GCC), [218](c12.xhtml#Page_218)    precision, floating-point, [260](c16.xhtml#Page_260)    predefined files, [240](c14.xhtml#Page_240)    preprocessor, [10](c01.xhtml#Page_10), [12](c01.xhtml#Page_12), [207](c12.xhtml#Page_207)–[219](c12.xhtml#Page_219)    code macro, [211](c12.xhtml#Page_211)–[213](c12.xhtml#Page_213)    continuation character, [211](c12.xhtml#Page_211)–[213](c12.xhtml#Page_213)    `#define`, [208](c12.xhtml#Page_208)    code, [211](c12.xhtml#Page_211)–[213](c12.xhtml#Page_213)    parameterized, [210](c12.xhtml#Page_210)    `do/while`, [213](c12.xhtml#Page_213)    `#elif`, [216](c12.xhtml#Page_216)    `#endif`, [214](c12.xhtml#Page_214), [215](c12.xhtml#Page_215)    `enum` trick, [119](c08.xhtml#Page_119)–[121](c08.xhtml#Page_121)    `#error`, [218](c12.xhtml#Page_218)    errors, [209](c12.xhtml#Page_209)–[211](c12.xhtml#Page_211)    `#ifdef`, [214](c12.xhtml#Page_214), [215](c12.xhtml#Page_215)    `#ifndef`, [215](c12.xhtml#Page_215)    `#include`, [209](c12.xhtml#Page_209), [217](c12.xhtml#Page_217)    `++` issues, [210](c12.xhtml#Page_210)    line markers, [208](c12.xhtml#Page_208)    `#pragma`, [217](c12.xhtml#Page_217), [218](c12.xhtml#Page_218)    symbol, [216](c12.xhtml#Page_216)    command line, [216](c12.xhtml#Page_216)    predefined, [217](c12.xhtml#Page_217)    tricks, [218](c12.xhtml#Page_218)    `#warning`, [218](c12.xhtml#Page_218)    `printf`, [1](p01.xhtml#Page_1), [7](c01.xhtml#Page_7), [11](c01.xhtml#Page_11), [12](c01.xhtml#Page_12), [14](c01.xhtml#Page_14), [54](c04.xhtml#Page_54), [93](c06.xhtml#Page_93), [238](c14.xhtml#Page_238), [239](c14.xhtml#Page_239)    `%c`, [238](c14.xhtml#Page_238), [239](c14.xhtml#Page_239)    `%d`, [238](c14.xhtml#Page_238), [239](c14.xhtml#Page_239)    `%f`, [238](c14.xhtml#Page_238)    `%l`, [238](c14.xhtml#Page_238)    `%ld`, [58](c04.xhtml#Page_58)    `%lx`, [62](c04.xhtml#Page_62)    `%o`, [62](c04.xhtml#Page_62), [63](c04.xhtml#Page_63), [238](c14.xhtml#Page_238)    `%p`, [95](c06.xhtml#Page_95)    `%u`, [62](c04.xhtml#Page_62), [63](c04.xhtml#Page_63)    `%x`, [61](c04.xhtml#Page_61), [62](c04.xhtml#Page_62), [238](c14.xhtml#Page_238), [239](c14.xhtml#Page_239)    printing bits, [74](c04.xhtml#Page_74)    problems    dynamic memory, [233](c13.xhtml#Page_233)    floating-point, [259](c16.xhtml#Page_259)    interrupt, [171](c10.xhtml#Page_171), [177](c10.xhtml#Page_177)    fixing, [181](c10.xhtml#Page_181)    use after free, [234](c13.xhtml#Page_234)    Problems tab, IDE, [21](c02.xhtml#Page_21), [28](c02.xhtml#Page_28)    procedure, [105](c07.xhtml#Page_105), [106](c07.xhtml#Page_106), [108](c07.xhtml#Page_108), [109](c07.xhtml#Page_109)    inline, [211](c12.xhtml#Page_211)    program file, [184](c11.xhtml#Page_184)    programming    modular, [267](c17.xhtml#Page_267)–[279](c17.xhtml#Page_279)    style, [114](c07.xhtml#Page_114)    project creation, IDE, [22](c02.xhtml#Page_22)    Project Explorer, IDE, [21](c02.xhtml#Page_21)    project screen, IDE, [20](c02.xhtml#Page_20), [21](c02.xhtml#Page_21)    project type, [37](c03.xhtml#Page_37)    promotion, argument, [61](c04.xhtml#Page_61)    protection    double include, [217](c12.xhtml#Page_217)    mode, [253](c15.xhtml#Page_253)    pulldown pin, [85](c05.xhtml#Page_85)    pullup pin, [85](c05.xhtml#Page_85)    `putchar`, [142](c09.xhtml#Page_142)–[143](c09.xhtml#Page_143)    `puts`, [14](c01.xhtml#Page_14), [101](c06.xhtml#Page_101), [108](c07.xhtml#Page_108)    PuTTY, [156](c09.xhtml#Page_156)–[157](c09.xhtml#Page_157)    **R**    RAM, [183](c11.xhtml#Page_183), [202](c11.xhtml#Page_202), [203](c11.xhtml#Page_203), [223](c13.xhtml#Page_223)    memory, [184](c11.xhtml#Page_184)–[185](c11.xhtml#Page_185), [191](c11.xhtml#Page_191)–[192](c11.xhtml#Page_192), [194](c11.xhtml#Page_194)    `RAM` section, [196](c11.xhtml#Page_196)    `ranlib` command, [276](c17.xhtml#Page_276)–[277](c17.xhtml#Page_277)    raw I/O, [222](p02.xhtml#Page_222), [249](c15.xhtml#Page_249)–[255](c15.xhtml#Page_255)    vs. buffered I/O, [251](c15.xhtml#Page_251)    `close`, [252](c15.xhtml#Page_252)    `ioctl`, [255](c15.xhtml#Page_255)    `open`, [252](c15.xhtml#Page_252), [253](c15.xhtml#Page_253)    open flags    `O_BINARY`, [252](c15.xhtml#Page_252)–[255](c15.xhtml#Page_255)    `O_CREAT`, [252](c15.xhtml#Page_252), [253](c15.xhtml#Page_253)    `O_RDONLY`, [252](c15.xhtml#Page_252), [253](c15.xhtml#Page_253)    `read`, [252](c15.xhtml#Page_252), [253](c15.xhtml#Page_253)    `write`, [252](c15.xhtml#Page_252), [253](c15.xhtml#Page_253)    `rb` (open mode), [245](c14.xhtml#Page_245)    `read`, [252](c15.xhtml#Page_252), [253](c15.xhtml#Page_253)    `READ (10)`, SCSI, [134](c08.xhtml#Page_134)    reading data, buffered I/O, [241](c14.xhtml#Page_241)    recursion, [112](c07.xhtml#Page_112), [113](c07.xhtml#Page_113)    infinite, [113](c07.xhtml#Page_113)    Red Hat, [4](c01.xhtml#Page_4)    register    GPIO, [42](c03.xhtml#Page_42)    I/O, [150](c09.xhtml#Page_150), [151](c09.xhtml#Page_151)    stack (`rsp`), [110](c07.xhtml#Page_110)    Registers tab (debug view), [110](c07.xhtml#Page_110)    Registers window, [28](c02.xhtml#Page_28)    relative address, [13](c01.xhtml#Page_13)    Release configuration, [23](c02.xhtml#Page_23), [31](c02.xhtml#Page_31)    relocatable object file, [14](c01.xhtml#Page_14), [192](c11.xhtml#Page_192)–[193](c11.xhtml#Page_193)    representation of numbers, [59](c04.xhtml#Page_59)    reset, [34](c03.xhtml#Page_34), [41](c03.xhtml#Page_41), [43](c03.xhtml#Page_43)    restarting loop (`continue`), [88](c05.xhtml#Page_88), [89](c05.xhtml#Page_89)    Resume (F8), [30](c02.xhtml#Page_30)    `return`, [8](c01.xhtml#Page_8), [109](c07.xhtml#Page_109)    right shift operator (`>>`), [70](c04.xhtml#Page_70)    `rodata` section, [13](c01.xhtml#Page_13), [188](c11.xhtml#Page_188), [191](c11.xhtml#Page_191)    rounding error, floating-point, [259](c16.xhtml#Page_259)    RS-232 standard (serial), [149](c09.xhtml#Page_149)    `rsp` stack register, [110](c07.xhtml#Page_110)    Run Configurations dialog, [25](c02.xhtml#Page_25)    running out of stack, [113](c07.xhtml#Page_113)    running the program, [43](c03.xhtml#Page_43)    RX signal (serial), [144](c09.xhtml#Page_144)    **S**    sane programming, [106](c07.xhtml#Page_106)    sanitizer, address, [234](c13.xhtml#Page_234)–[235](c13.xhtml#Page_235)    `sbss` (linker symbol), [192](c11.xhtml#Page_192)    scaling, pointer arithmetic, [98](c06.xhtml#Page_98)    `scanf`, [241](c14.xhtml#Page_241)    scope, [v](f03.xhtml#Page_v)ariable, [106](c07.xhtml#Page_106)–[107](c07.xhtml#Page_107)    `screen` program, [158](c09.xhtml#Page_158)    SCSI (small computer system interface), [133](c08.xhtml#Page_133)–[134](c08.xhtml#Page_134)    `READ (10)`, [134](c08.xhtml#Page_134)    `sdata` (linker symbol), [192](c11.xhtml#Page_192)    section    `bss`, [187](c11.xhtml#Page_187), [189](c11.xhtml#Page_189), [191](c11.xhtml#Page_191)    `.comm`, [188](c11.xhtml#Page_188)    `COMMON`, [191](c11.xhtml#Page_191), [194](c11.xhtml#Page_194)    `.config`, [195](c11.xhtml#Page_195), [202](c11.xhtml#Page_202)    `CONFIG`, [195](c11.xhtml#Page_195), [196](c11.xhtml#Page_196)    `data`, [187](c11.xhtml#Page_187), [191](c11.xhtml#Page_191), [192](c11.xhtml#Page_192)    `FLASH`, [196](c11.xhtml#Page_196)    `.isr_vector`, [190](c11.xhtml#Page_190), [191](c11.xhtml#Page_191), [194](c11.xhtml#Page_194)    `RAM`, [196](c11.xhtml#Page_196)    `.rodata`, [13](c01.xhtml#Page_13), [188](c11.xhtml#Page_188), [191](c11.xhtml#Page_191)    `.text`, [188](c11.xhtml#Page_188), [191](c11.xhtml#Page_191)    `.text.main`, [188](c11.xhtml#Page_188), [193](c11.xhtml#Page_193), [194](c11.xhtml#Page_194)    `section` (assembler directive), [188](c11.xhtml#Page_188)    `section` attribute, [195](c11.xhtml#Page_195)    `SECTIONS` linker directive, [196](c11.xhtml#Page_196)    sections, nonstandard, [190](c11.xhtml#Page_190)    segment, text, [184](c11.xhtml#Page_184)    serial “Hello World,” [147](c09.xhtml#Page_147)    serial clock, [145](c09.xhtml#Page_145)    serial communication, [146](c09.xhtml#Page_146)    serial I/O, [2](p01.xhtml#Page_2), [34](c03.xhtml#Page_34), [35](c03.xhtml#Page_35), [141](c09.xhtml#Page_141)    buffering, [172](c10.xhtml#Page_172)    history, [145](c09.xhtml#Page_145)    input, [144](c09.xhtml#Page_144)    interrupt, [174](c10.xhtml#Page_174)–[175](c10.xhtml#Page_175)    ISR, [150](c09.xhtml#Page_150)–[153](c09.xhtml#Page_153), [163](c10.xhtml#Page_163), [166](c10.xhtml#Page_166), [168](c10.xhtml#Page_168), [174](c10.xhtml#Page_174), [175](c10.xhtml#Page_175), [198](c11.xhtml#Page_198)    output, [143](c09.xhtml#Page_143)    speed, [148](c09.xhtml#Page_148)    TDR, [150](c09.xhtml#Page_150), [151](c09.xhtml#Page_151), [153](c09.xhtml#Page_153)    transmit, [150](c09.xhtml#Page_150), [162](c10.xhtml#Page_162), [163](c10.xhtml#Page_163)    to USB, [156](c09.xhtml#Page_156)    setting bit value, [71](c04.xhtml#Page_71), [72](c04.xhtml#Page_72)    shared variable, interrupt, [180](c10.xhtml#Page_180)    shorthand operators, [65](c04.xhtml#Page_65)    `short int`, [57](c04.xhtml#Page_57)    `sidata` (linker symbol), [192](c11.xhtml#Page_192), [192](c11.xhtml#Page_192)    signal    RX (serial), [144](c09.xhtml#Page_144)    TX (serial), [143](c09.xhtml#Page_143)    simple macro, [208](c12.xhtml#Page_208)    Single Step (F6), [29](c02.xhtml#Page_29), [30](c02.xhtml#Page_30), [49](c03.xhtml#Page_49), [50](c03.xhtml#Page_50)    singly linked list, [226](c13.xhtml#Page_226)–[233](c13.xhtml#Page_233)    adding node, [227](c13.xhtml#Page_227), [228](c13.xhtml#Page_228)    printing, [229](c13.xhtml#Page_229), [230](c13.xhtml#Page_230)    *size.c*, [58](c04.xhtml#Page_58)    size command (`arm-none-eabi-size`), [46](c03.xhtml#Page_46)    `sizeof`, [58](c04.xhtml#Page_58), [95](c06.xhtml#Page_95), [224](c13.xhtml#Page_224)    SOC (system on a chip), [xviii](f04.xhtml#Page_xviii)    source file, [11](c01.xhtml#Page_11)    Source window, [28](c02.xhtml#Page_28), [29](c02.xhtml#Page_29)    `space` (assembler directive), [187](c11.xhtml#Page_187), [189](c11.xhtml#Page_189)    speed, serial, [148](c09.xhtml#Page_148)    SQLite, [284](b01.xhtml#Page_284)    `sscanf`, [241](c14.xhtml#Page_241)    *s_sin.o*, [193](c11.xhtml#Page_193)    stack, [110](c07.xhtml#Page_110)–[112](c07.xhtml#Page_112), [186](c11.xhtml#Page_186), [223](c13.xhtml#Page_223)    frame, [109](c07.xhtml#Page_109)–[112](c07.xhtml#Page_112)    register (rsp), [110](c07.xhtml#Page_110)    running out of, [113](c07.xhtml#Page_113)    trace, [183](c11.xhtml#Page_183), [184](c11.xhtml#Page_184)    Stack Trace window, [28](c02.xhtml#Page_28)    start bit, [145](c09.xhtml#Page_145), [146](c09.xhtml#Page_146)    startup directory, [47](c03.xhtml#Page_47)    *startup_stm32f030x8.S*, [47](c03.xhtml#Page_47), [163](c10.xhtml#Page_163), [164](c10.xhtml#Page_164), [190](c11.xhtml#Page_190), [192](c11.xhtml#Page_192), [193](c11.xhtml#Page_193)    statement    `break`, [87](c05.xhtml#Page_87)    `continue`, [88](c05.xhtml#Page_88), [89](c05.xhtml#Page_89)    decision, [77](c05.xhtml#Page_77)    `else`, [79](c05.xhtml#Page_79)    `if`, [77](c05.xhtml#Page_77)–[79](c05.xhtml#Page_79)    looping, [79](c05.xhtml#Page_79)    `static`    compiler option, [14](c01.xhtml#Page_14)    initialized local variable, [189](c11.xhtml#Page_189)    local initialized, [187](c11.xhtml#Page_187)    local uninitialized, [187](c11.xhtml#Page_187)    `stderr` predefined file, [240](c14.xhtml#Page_240)    `stdin` predefined file, [240](c14.xhtml#Page_240)    *stdint.h*, [61](c04.xhtml#Page_61), [135](c08.xhtml#Page_135)    `stdout` predefined file, [240](c14.xhtml#Page_240)    Step Into (F5), [50](c03.xhtml#Page_50)    Step Over (F6), [29](c02.xhtml#Page_29), [30](c02.xhtml#Page_30), [49](c03.xhtml#Page_49), [50](c03.xhtml#Page_50)    ST-LINK, [36](c03.xhtml#Page_36)    STM32F030x4 processor, [xviii](f04.xhtml#Page_xviii)    *stm32f0xx.h*, [216](c12.xhtml#Page_216)    *stm32f0xx_hal.c*, [50](c03.xhtml#Page_50)    *stm32f0xx_it.h*, [47](c03.xhtml#Page_47)    *stm32f0xxit.c*, [46](c03.xhtml#Page_46)    STM32 firmware library, [37](c03.xhtml#Page_37)    STM32 NUCLEO-F030R8, [32](c02.xhtml#Page_32)–[51](c03.xhtml#Page_51)    setup, [35](c03.xhtml#Page_35)    STM32 pointer size, [96](c06.xhtml#Page_96)    STM HAL modules, [267](c17.xhtml#Page_267)    stop bit, [145](c09.xhtml#Page_145), [146](c09.xhtml#Page_146)    string, [91](c06.xhtml#Page_91), [100](c06.xhtml#Page_100)–[101](c06.xhtml#Page_101)    constant, [186](c11.xhtml#Page_186), [188](c11.xhtml#Page_188)    initialization, [101](c06.xhtml#Page_101)    `string` (assembly directive), [13](c01.xhtml#Page_13)    `struct`, [117](c08.xhtml#Page_117), [122](c08.xhtml#Page_122)–[130](c08.xhtml#Page_130), [133](c08.xhtml#Page_133)–[135](c08.xhtml#Page_135)    anonymous, [130](c08.xhtml#Page_130)    assignment, [128](c08.xhtml#Page_128)    debugger, [122](c08.xhtml#Page_122)    embedded, [133](c08.xhtml#Page_133)–[134](c08.xhtml#Page_134)    field, [121](c08.xhtml#Page_121)–[122](c08.xhtml#Page_122)    from hardware, [134](c08.xhtml#Page_134)    initialization, [127](c08.xhtml#Page_127)    memory layout, [122](c08.xhtml#Page_122)–[124](c08.xhtml#Page_124)    naming, [129](c08.xhtml#Page_129)    packed, [125](c08.xhtml#Page_125)    padding, [123](c08.xhtml#Page_123), [124](c08.xhtml#Page_124)    pointer, [128](c08.xhtml#Page_128)    `typedef`, [137](c08.xhtml#Page_137)    structure. *See* `struct`    subnormal floating-point numbers, [260](c16.xhtml#Page_260), [262](c16.xhtml#Page_262)    subtract, integer, [54](c04.xhtml#Page_54)    subtraction, fixed-point, [263](c16.xhtml#Page_263)–[265](c16.xhtml#Page_265)    summing two variables, [57](c04.xhtml#Page_57)    symbol    definition    command line, [216](c12.xhtml#Page_216)    preprocessor, [216](c12.xhtml#Page_216)    predefined, [217](c12.xhtml#Page_217)    weak, [164](c10.xhtml#Page_164), [278](c17.xhtml#Page_278)–[279](c17.xhtml#Page_279)    synchronous communications, [146](c09.xhtml#Page_146)    *syscalls.c*, [46](c03.xhtml#Page_46)l    system on a chip (SOC), [xviii](f04.xhtml#Page_xviii)    *Systemstm32f0xx.c*, [46](c03.xhtml#Page_46)    System Workbench for STM32, [4](c01.xhtml#Page_4), [20](c02.xhtml#Page_20)–[31](c02.xhtml#Page_31), [33](c03.xhtml#Page_33), [37](c03.xhtml#Page_37)–[40](c03.xhtml#Page_40), [46](c03.xhtml#Page_46), [50](c03.xhtml#Page_50), [54](c04.xhtml#Page_54), [112](c07.xhtml#Page_112), [191](c11.xhtml#Page_191), [216](c12.xhtml#Page_216), [282](b01.xhtml#Page_282), [285](b02.xhtml#Page_285)–[288](b02.xhtml#Page_288)    **T**    tab character (`\\t`), [7](c01.xhtml#Page_7)    Tasks window, [28](c02.xhtml#Page_28)    TDR (transmit data register), [150](c09.xhtml#Page_150), [151](c09.xhtml#Page_151), [153](c09.xhtml#Page_153), [162](c10.xhtml#Page_162), [163](c10.xhtml#Page_163), [170](c10.xhtml#Page_170), [175](c10.xhtml#Page_175), [198](c11.xhtml#Page_198)    teletype, [145](c09.xhtml#Page_145), [146](c09.xhtml#Page_146)    `text` (ideal memory model), [185](c11.xhtml#Page_185), [186](c11.xhtml#Page_186), [188](c11.xhtml#Page_188), [191](c11.xhtml#Page_191)    `text` (size), [46](c03.xhtml#Page_46)    text editor, IDE, [21](c02.xhtml#Page_21)    `text.main` section, [188](c11.xhtml#Page_188), [193](c11.xhtml#Page_193), [194](c11.xhtml#Page_194)    `text` section, [185](c11.xhtml#Page_185), [188](c11.xhtml#Page_188), [191](c11.xhtml#Page_191)    text segment, [184](c11.xhtml#Page_184)    theft, creative, [282](b01.xhtml#Page_282)    things and pointers to things, [94](c06.xhtml#Page_94)    `toupper`, [103](c06.xhtml#Page_103)    translation, hardware to `struct`, [134](c08.xhtml#Page_134)    transmit    serial, [150](c09.xhtml#Page_150)    serial I/O, [162](c10.xhtml#Page_162), [163](c10.xhtml#Page_163)    transmit data register. *See* TDR    transmit empty bit. *See* TXE bit    transmit shift register (TSR), [162](c10.xhtml#Page_162), [163](c10.xhtml#Page_163)    tricks, preprocessor, [218](c12.xhtml#Page_218)    turning off bit, [72](c04.xhtml#Page_72)    two’s complement, [64](c04.xhtml#Page_64), [65](c04.xhtml#Page_65)    TX, serial I/O, [143](c09.xhtml#Page_143), [162](c10.xhtml#Page_162), [163](c10.xhtml#Page_163)    TXE bit, [151](c09.xhtml#Page_151), [152](c09.xhtml#Page_152), [198](c11.xhtml#Page_198)    type    checking across files, [269](c17.xhtml#Page_269)    custom, [132](c08.xhtml#Page_132), [133](c08.xhtml#Page_133)    `enum`, [117](c08.xhtml#Page_117), [118](c08.xhtml#Page_118), [132](c08.xhtml#Page_132), [133](c08.xhtml#Page_133)    `int`, [56](c04.xhtml#Page_56)    `struct`, [117](c08.xhtml#Page_117), [121](c08.xhtml#Page_121), [122](c08.xhtml#Page_122), [132](c08.xhtml#Page_132), [133](c08.xhtml#Page_133)    `union`, [117](c08.xhtml#Page_117), [130](c08.xhtml#Page_130), [132](c08.xhtml#Page_132), [133](c08.xhtml#Page_133)    variable, [55](c04.xhtml#Page_55)    `typedef`, [117](c08.xhtml#Page_117), [135](c08.xhtml#Page_135)    function pointer, [136](c08.xhtml#Page_136)    and `struct`, [136](c08.xhtml#Page_136)    `typeof`, [220](c12.xhtml#Page_220)    **U**    UART, [41](c03.xhtml#Page_41), [146](c09.xhtml#Page_146), [150](c09.xhtml#Page_150)    initialization, [147](c09.xhtml#Page_147)    `UART_ADVFEATURE_NO_INIT`, [148](c09.xhtml#Page_148), [154](c09.xhtml#Page_154), [199](c11.xhtml#Page_199)    `UART_FLAG_TXE`, [151](c09.xhtml#Page_151)–[153](c09.xhtml#Page_153), [163](c10.xhtml#Page_163), [198](c11.xhtml#Page_198)    `UART_HandleTypeDef`, [166](c10.xhtml#Page_166), [201](c11.xhtml#Page_201)    `UART_HWCONTROL_NONE`, [148](c09.xhtml#Page_148), [154](c09.xhtml#Page_154), [199](c11.xhtml#Page_199)    `UART_MODE_TX_RX`, [148](c09.xhtml#Page_148), [154](c09.xhtml#Page_154), [199](c11.xhtml#Page_199)    `UART_ONE_BIT_SAMPLE_DISABLE`, [148](c09.xhtml#Page_148), [154](c09.xhtml#Page_154), [199](c11.xhtml#Page_199)    `UART_OVERSAMPLING_16`, [148](c09.xhtml#Page_148), [154](c09.xhtml#Page_154), [199](c11.xhtml#Page_199)    `UART_PARITY_NONE`, [148](c09.xhtml#Page_148), [154](c09.xhtml#Page_154), [199](c11.xhtml#Page_199)    `UART_STOPBITS_1`, [148](c09.xhtml#Page_148), [154](c09.xhtml#Page_154), [199](c11.xhtml#Page_199)    `UART_WORDLENGTH_8B`, [148](c09.xhtml#Page_148), [154](c09.xhtml#Page_154), [199](c11.xhtml#Page_199)    Ubuntu, [4](c01.xhtml#Page_4)    ugly code removal, [215](c12.xhtml#Page_215)    `uint8_t`, [62](c04.xhtml#Page_62), [94](c06.xhtml#Page_94), [118](c08.xhtml#Page_118), [121](c08.xhtml#Page_121), [122](c08.xhtml#Page_122)    `uint16_t`, [62](c04.xhtml#Page_62)    `uint32_t`, [62](c04.xhtml#Page_62), [121](c08.xhtml#Page_121), [122](c08.xhtml#Page_122)    `uint64_t`, [62](c04.xhtml#Page_62), [94](c06.xhtml#Page_94)    unaligned data, access, [125](c08.xhtml#Page_125)–[127](c08.xhtml#Page_127)    uninitialized    data, [185](c11.xhtml#Page_185), [186](c11.xhtml#Page_186)    global, [186](c11.xhtml#Page_186), [187](c11.xhtml#Page_187)    local, [186](c11.xhtml#Page_186)    local static variable, [189](c11.xhtml#Page_189)    module only, [186](c11.xhtml#Page_186)    static local, [187](c11.xhtml#Page_187)    variables, [56](c04.xhtml#Page_56)    `union`, [117](c08.xhtml#Page_117), [132](c08.xhtml#Page_132), [133](c08.xhtml#Page_133)    field assignment, [131](c08.xhtml#Page_131)    type, [130](c08.xhtml#Page_130)    *unistd.h*, [251](c15.xhtml#Page_251)    universal asynchronous receive-transmitter. *See* UART    `unsigned int`, [114](c07.xhtml#Page_114)    unsigned integers, [62](c04.xhtml#Page_62)    `unused` attribute, [152](c09.xhtml#Page_152)    upgrade, firmware, [185](c11.xhtml#Page_185), [204](c11.xhtml#Page_204)    upper layer (interrupt code), [164](c10.xhtml#Page_164), [165](c10.xhtml#Page_165), [179](c10.xhtml#Page_179)    USART. *See* UART    `USART2`, [149](c09.xhtml#Page_149), [154](c09.xhtml#Page_154), [199](c11.xhtml#Page_199), [202](c11.xhtml#Page_202)    `USART2_IRQHandler`, [163](c10.xhtml#Page_163), [164](c10.xhtml#Page_164), [166](c10.xhtml#Page_166), [168](c10.xhtml#Page_168)    `USART2_IRQn`, [167](c10.xhtml#Page_167), [176](c10.xhtml#Page_176)    `USART_CR1_IDLEIE`, [168](c10.xhtml#Page_168)    `USART_CR1_PEIE`, [168](c10.xhtml#Page_168)    `USART_CR1_RXNEIE`, [168](c10.xhtml#Page_168)    `USART_CR1_TCIE`, [168](c10.xhtml#Page_168)    `USART_CR1_TXEIE`, [166](c10.xhtml#Page_166)–[169](c10.xhtml#Page_169), [173](c10.xhtml#Page_173)–[176](c10.xhtml#Page_176)    `USART_CR1_TXNEIE`, [168](c10.xhtml#Page_168)    `USART_ISR_CMF`, [169](c10.xhtml#Page_169)    `USART_ISR_CTSIF`, [169](c10.xhtml#Page_169)    `USART_ISR_FE`, [169](c10.xhtml#Page_169)    `USART_ISR_IDLE`, [169](c10.xhtml#Page_169)    `USART_ISR_NE`, [169](c10.xhtml#Page_169)    `USART_ISR_ORE`, [169](c10.xhtml#Page_169)    `USART_ISR_PE`, [169](c10.xhtml#Page_169)    `USART_ISR_RXNE`, [169](c10.xhtml#Page_169)    `USART_ISR_TC`, [169](c10.xhtml#Page_169)    `USART_ISR_TXE`, [166](c10.xhtml#Page_166), [168](c10.xhtml#Page_168), [169](c10.xhtml#Page_169), [169](c10.xhtml#Page_169), [174](c10.xhtml#Page_174), [175](c10.xhtml#Page_175)    USB    connector, [37](c03.xhtml#Page_37)    to serial, [xviii](f04.xhtml#Page_xviii), [141](c09.xhtml#Page_141), [156](c09.xhtml#Page_156)    serial setup    Linux, [158](c09.xhtml#Page_158)    MacOS, [158](c09.xhtml#Page_158)    Windows, [156](c09.xhtml#Page_156)–[157](c09.xhtml#Page_157)    use after free, [234](c13.xhtml#Page_234)    `USER_BUTTON_GPIO_CLK_ENABLE`, [83](c05.xhtml#Page_83)    user LED (LED2), [34](c03.xhtml#Page_34), [41](c03.xhtml#Page_41), [42](c03.xhtml#Page_42)    user push button, [34](c03.xhtml#Page_34)    **V**    Valgrind, [234](c13.xhtml#Page_234), [235](c13.xhtml#Page_235), [283](b01.xhtml#Page_283)    variable    assignment, [56](c04.xhtml#Page_56)    complex, [51](c03.xhtml#Page_51)    debugger, [56](c04.xhtml#Page_56)    declaration, [55](c04.xhtml#Page_55)    global, [105](c07.xhtml#Page_105), [106](c07.xhtml#Page_106)    hidden, [107](c07.xhtml#Page_107)    initialization, [56](c04.xhtml#Page_56), [57](c04.xhtml#Page_57)    initialized local static, [189](c11.xhtml#Page_189)    local, [105](c07.xhtml#Page_105)–[107](c07.xhtml#Page_107)    allocation, [109](c07.xhtml#Page_109), [110](c07.xhtml#Page_110)    deallocation, [109](c07.xhtml#Page_109), [110](c07.xhtml#Page_110)    debugger, [110](c07.xhtml#Page_110)    names, [55](c04.xhtml#Page_55)    panel, [56](c04.xhtml#Page_56), [96](c06.xhtml#Page_96), [111](c07.xhtml#Page_111)    scope, [106](c07.xhtml#Page_106), [107](c07.xhtml#Page_107)    size, [57](c04.xhtml#Page_57)    type, [55](c04.xhtml#Page_55)    uninitialized, [56](c04.xhtml#Page_56)    uninitialized local static, [189](c11.xhtml#Page_189)    Variables window, [28](c02.xhtml#Page_28)    `void`, [109](c07.xhtml#Page_109)    `volatile`, [152](c09.xhtml#Page_152), [164](c10.xhtml#Page_164)    **W**    `Wa` (compiler option), [12](c01.xhtml#Page_12)    `Wall` (compiler option), [10](c01.xhtml#Page_10)    `warning` (preprocessor), [218](c12.xhtml#Page_218)    `wb` (open mode), [245](c14.xhtml#Page_245)    `weak` (assembler directive), [164](c10.xhtml#Page_164)    `weak` attribute, [279](c17.xhtml#Page_279)    weak symbol, [164](c10.xhtml#Page_164), [278](c17.xhtml#Page_278)–[280](c17.xhtml#Page_280)    `Wextra` (compiler option), [10](c01.xhtml#Page_10)    `while`    assignment in, [89](c05.xhtml#Page_89)    loop, [79](c05.xhtml#Page_79), [80](c05.xhtml#Page_80)    Windows    terminal emulator (PuTTY), [156](c09.xhtml#Page_156)–[157](c09.xhtml#Page_157)    USB serial setup, [156](c09.xhtml#Page_156)–[157](c09.xhtml#Page_157)    `Wl` (compiler option), [14](c01.xhtml#Page_14)    `word` (assembler directive), [187](c11.xhtml#Page_187), [189](c11.xhtml#Page_189)    workspace, IDE, [20](c02.xhtml#Page_20)    `write`, [252](c15.xhtml#Page_252), [253](c15.xhtml#Page_253)    writing data past the end, [234](c13.xhtml#Page_234)    wrong array index, [100](c06.xhtml#Page_100)    **X**    x86 pointer size, [96](c06.xhtml#Page_96)    `xcode-select`, [4](c01.xhtml#Page_4)    **Z**    zero, divide by, [246](c14.xhtml#Page_246) `` ``` ````"]