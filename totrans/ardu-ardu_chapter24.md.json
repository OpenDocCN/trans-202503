["```\n// Project #69 - Camera web server\n\n#include \"esp_camera.h\"\n#include <WiFi.h>\n\n#define CAMERA_MODEL_AI_THINKER\n#include \"camera_pins.h\"\n\nconst char* ssid = \"`SSID`\";\nconst char* password = \"`password`\";\n\nvoid startCameraServer();\n\nvoid setup()\n{\n  ❶ Serial.begin(115200);\n    Serial.setDebugOutput(true);\n    Serial.println();\n\n  ❷ camera_config_t config;\n    config.ledc_channel = LEDC_CHANNEL_0;\n    config.ledc_timer = LEDC_TIMER_0;\n    config.pin_d0 = Y2_GPIO_NUM;\n    config.pin_d1 = Y3_GPIO_NUM;\n    config.pin_d2 = Y4_GPIO_NUM;\n    config.pin_d3 = Y5_GPIO_NUM;\n    config.pin_d4 = Y6_GPIO_NUM;\n    config.pin_d5 = Y7_GPIO_NUM;\n    config.pin_d6 = Y8_GPIO_NUM;\n    config.pin_d7 = Y9_GPIO_NUM;\n    config.pin_xclk = XCLK_GPIO_NUM;\n    config.pin_pclk = PCLK_GPIO_NUM;\n    config.pin_vsync = VSYNC_GPIO_NUM;\n    config.pin_href = HREF_GPIO_NUM;\n    config.pin_sscb_sda = SIOD_GPIO_NUM;\n    config.pin_sscb_scl = SIOC_GPIO_NUM;\n    config.pin_pwdn = PWDN_GPIO_NUM;\n    config.pin_reset = RESET_GPIO_NUM;\n    config.xclk_freq_hz = 20000000;\n    config.pixel_format = PIXFORMAT_JPEG;\n  ❸ config.frame_size = FRAMESIZE_UXGA;\n    config.jpeg_quality = 10;\n    config.fb_count = 2;\n\n  ❹ esp_err_t err = esp_camera_init(&config);\n    if (err != ESP_OK)\n    {\n      ❺ Serial.printf(\"Camera init failed with error 0x%x\", err);\n        return;\n }\n  ❻ s->set_framesize(s, FRAMESIZE_QVGA); // Set default frame size\n\n  ❼ WiFi.begin(ssid, password);\n    while (WiFi.status() != WL_CONNECTED)\n    {\n        delay(500);\n        Serial.print(\".\");\n    }\n    Serial.println(\" \");\n    Serial.println(\"WiFi connected\");\n\n    startCameraServer();\n\n  ❽ Serial.print(\"Camera Ready! Use 'http://\");\n    Serial.print(WiFi.localIP());\n    Serial.println(\" ' to connect\");\n}\n\nvoid loop() {} \n```", "```\n// Project #70 - Save images to microSD card\n\n#include \"esp_camera.h\"\n#include \"soc/soc.h\"\n#include \"soc/rtc_cntl_reg.h\"\n#include \"driver/rtc_io.h\"\n#include \"FS.h\"\n#include \"SD_MMC.h\"\n\n// Pin definitions for CAMERA_MODEL_AI_THINKER\n#define PWDN_GPIO_NUM 32\n#define RESET_GPIO_NUM −1\n#define XCLK_GPIO_NUM 0\n#define SIOD_GPIO_NUM 26\n#define SIOC_GPIO_NUM 27\n#define Y9_GPIO_NUM 35\n#define Y8_GPIO_NUM 34\n#define Y7_GPIO_NUM 39\n#define Y6_GPIO_NUM 36\n#define Y5_GPIO_NUM 21\n#define Y4_GPIO_NUM 19\n#define Y3_GPIO_NUM 18\n#define Y2_GPIO_NUM 5\n#define VSYNC_GPIO_NUM 25\n#define HREF_GPIO_NUM 23\n#define PCLK_GPIO_NUM 22\n\n❶ int imageCounter = 0;\n\nvoid configESPCamera()\n{\n    // Object for camera configuration parameters:\n    camera_config_t config;\n\n  ❷ config.ledc_channel = LEDC_CHANNEL_0;\n    config.ledc_timer = LEDC_TIMER_0;\n    config.pin_d0 = Y2_GPIO_NUM;\n    config.pin_d1 = Y3_GPIO_NUM;\n    config.pin_d2 = Y4_GPIO_NUM;\n    config.pin_d3 = Y5_GPIO_NUM;\n    config.pin_d4 = Y6_GPIO_NUM;\n    config.pin_d5 = Y7_GPIO_NUM;\n    config.pin_d6 = Y8_GPIO_NUM;\n    config.pin_d7 = Y9_GPIO_NUM;\n    config.pin_xclk = XCLK_GPIO_NUM;\n    config.pin_pclk = PCLK_GPIO_NUM;\n    config.pin_vsync = VSYNC_GPIO_NUM;\n    config.pin_href = HREF_GPIO_NUM;\n    config.pin_sscb_sda = SIOD_GPIO_NUM;\n    config.pin_sscb_scl = SIOC_GPIO_NUM;\n    config.pin_pwdn = PWDN_GPIO_NUM;\n    config.pin_reset = RESET_GPIO_NUM;\n    config.xclk_freq_hz = 20000000;\n    config.pixel_format = PIXFORMAT_JPEG;\n    config.frame_size = FRAMESIZE_UXGA;\n    config.jpeg_quality = 10;\n    config.fb_count = 2;\n\n    esp_err_t err = esp_camera_init(&config);\n    if (err != ESP_OK)\n    {\n        Serial.printf(\"Camera init failed with error 0x%x\", err);\n        return;\n    }\n\n    // Set camera quality parameters:\n    sensor_t *s = esp_camera_sensor_get();\n\n  ❸ // Brightness (−2 to 2)\n    s->set_brightness(s, 0);\n    // Contrast (−2 to 2)\n    s->set_contrast(s, 0);\n    // Saturation (−2 to 2)\n    s->set_saturation(s, 0);\n    // Special effects (0 - none, 1 - negative, 2 - grayscale,\n    // 3 - red tint, 4 - green tint, 5 - blue tint, 6 - sepia)\n    s->set_special_effect(s,  0);\n    // Auto white balance (0 = disable , 1 = enable)\n s->set_whitebal(s, 1);\n    // Auto white balance gain (0 = disable , 1 = enable)\n    s->set_awb_gain(s, 1);\n    // WB MODES (0 - automatic, 1 - sunny, 2 - cloudy,\n    // 3 - office, 4 - home)\n    s->set_wb_mode(s,  0);\n    // EXPOSURE CONTROLS (0 = disable , 1 = enable)\n    s->set_exposure_ctrl(s, 1);\n    // AEC2 (0 = disable , 1 = enable)\n    s->set_aec2(s, 0);\n    // AE LEVELS (−2 to 2)\n    s->set_ae_level(s, 0);\n    // AEC VALUES (0 to 1200)\n    s->set_aec_value(s, 300);\n    // GAIN CONTROLS (0 = disable , 1 = enable)\n    s->set_gain_ctrl(s, 1);\n    // AGC GAIN (0 to 30)\n    s->set_agc_gain(s, 0);\n    // GAIN CEILING (0 to 6)\n    s->set_gainceiling(s, (gainceiling_t)0);\n    // BPC (0 = disable , 1 = enable)\n    s->set_bpc(s, 0);\n    // WPC (0 = disable , 1 = enable)\n    s->set_wpc(s, 1);\n    // RAW GMA (0 = disable , 1 = enable)\n    s->set_raw_gma(s, 1);\n    // LENC (0 = disable , 1 = enable)\n    s->set_lenc(s, 1);\n    // HORIZ MIRROR (0 = disable , 1 = enable)\n    s->set_hmirror(s, 0);\n    // VERT FLIP (0 = disable , 1 = enable)\n    s->set_vflip(s, 0);\n    // DCW (0 = disable , 1 = enable)\n    s->set_dcw(s, 1);\n    // COLOR  BAR PATTERN (0 = disable , 1 = enable)\n    s->set_colorbar(s, 0);\n}\n\nvoid initMicroSDCard()\n{\n    if (!SD_MMC.begin())\n    {\n        Serial.println(\"microSD card failed\");\n        return;\n    }\n    uint8_t cardType = SD_MMC.cardType();\n    if (cardType == CARD_NONE)\n    {\n        Serial.println(\"microSD card not found\");\n        return;\n    }\n}\n\nvoid takeNewPhoto(String path)\n{\n    // Set up frame buffer:\n    camera_fb_t *fb = esp_camera_fb_get();\n\n    if (!fb)\n    {\n        Serial.println(\"Camera capture failed\");\n        return;\n    }\n\n    // Save picture to microSD card:\n    fs::FS &fs = SD_MMC;\n    File file = fs.open(path.c_str(), FILE_WRITE);\n    if (!file)\n    {\n        Serial.println(\"Couldn't open file in write mode!\");\n    } else\n    {\n        file.write(fb->buf, fb->len);\n        Serial.printf(\"File saved as: %s\\n\", path.c_str());\n    }\n    file.close();\n    esp_camera_fb_return(fb);\n}\n\nvoid captureImage()\n{\n    imageCounter += 1;\n    // Build image path and filename:\n    String path = \"/ESP32CAM_\" + String(imageCounter) + \".jpg\";\n    Serial.printf(\"Picture file name: %s\\n\", path.c_str());\n    takeNewPhoto(path);\n}\n\nvoid setup()\n{\n    Serial.begin(115200);\n    WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0);\n    configESPCamera();\n    initMicroSDCard();\n}\n\nvoid loop()\n{\n    captureImage();\n    delay(5000);\n} \n```"]