["```\n1000000000000000000000000000000000000000000000000000\n```", "```\n00000000010\n```", "```\n0.1000000000000000055511151231257827021181583404541015625\n```", "```\n1.100110011001100110011001100110011001100110011001101 * 2^-4\n```", "```\n111111111111111111111111111111111111111111111111111111111111011\n```", "```\n`./YOUR_COMPILER` /path/to/program.c -lm\n```", "```\ngcc /path/to/program.s -o /path/to/program -lm\n```", "```\n[0-9]*\\.[0-9]+|[0-9]+\\.\n```", "```\n[0-9]*\\.[0-9]+|[0-9]+\\.?\n```", "```\n[Ee][+-]?[0-9]+\n```", "```\n([0-9]*\\.[0-9]+|[0-9]+\\.?)[Ee][+-]?[0-9]+|[0-9]*\\.[0-9]+|[0-9]+\\.\n```", "```\n(([0-9]*\\.[0-9]+|[0-9]+\\.?)[Ee][+-]?[0-9]+|[0-9]*\\.[0-9]+|[0-9]+\\.)[^\\w.]\n```", "```\nprogram = Program(declaration*)\ndeclaration = FunDecl(function_declaration) | VarDecl(variable_declaration)\nvariable_declaration = (identifier name, exp? init,\n                        type var_type, storage_class?)\nfunction_declaration = (identifier name, identifier* params, block? body,\n                        type fun_type, storage_class?)\ntype = Int | Long | UInt | ULong | **Double |** FunType(type* params, type ret)\nstorage_class = Static | Extern\nblock_item = S(statement) | D(declaration)\nblock = Block(block_item*)\nfor_init = InitDecl(variable_declaration) | InitExp(exp?)\nstatement = Return(exp)\n          | Expression(exp)\n          | If(exp condition, statement then, statement? else)\n          | Compound(block)\n          | Break\n          | Continue\n          | While(exp condition, statement body)\n          | DoWhile(statement body, exp condition)\n          | For(for_init init, exp? condition, exp? post, statement body)\n          | Null\nexp = Constant(const)\n    | Var(identifier)\n    | Cast(type target_type, exp)\n    | Unary(unary_operator, exp)\n    | Binary(binary_operator, exp, exp)\n    | Assignment(exp, exp)\n    | Conditional(exp condition, exp, exp)\n    | FunctionCall(identifier, exp* args)\nunary_operator = Complement | Negate | Not\nbinary_operator = Add | Subtract | Multiply | Divide | Remainder | And | Or\n                | Equal | NotEqual | LessThan | LessOrEqual\n                | GreaterThan | GreaterOrEqual\nconst = ConstInt(int) | ConstLong(int)\n      | ConstUInt(int) | ConstULong(int)\n **| ConstDouble(double)**\n```", "```\n<program> ::= {<declaration>}\n<declaration> ::= <variable-declaration> | <function-declaration>\n<variable-declaration> ::= {<specifier>}+ <identifier> [\"=\" <exp>] \";\"\n<function-declaration> ::= {<specifier>}+ <identifier> \"(\" <param-list> \")\" (<block> | \";\")\n<param-list> ::= \"void\"\n               | {<type-specifier>}+ <identifier> {\",\" {<type-specifier>}+ <identifier>}\n<type-specifier> ::= \"int\" | \"long\" | \"unsigned\" | \"signed\" **| \"double\"**\n<specifier> ::= <type-specifier> | \"static\" | \"extern\"\n<block> ::= \"{\" {<block-item>} \"}\"\n<block-item> ::= <statement> | <declaration>\n<for-init> ::= <variable-declaration> | [<exp>] \";\"\n<statement> ::= \"return\" <exp> \";\"\n              | <exp> \";\"\n              | \"if\" \"(\" <exp> \")\" <statement> [\"else\" <statement>]\n              | <block>\n              | \"break\" \";\"\n              | \"continue\" \";\"\n              | \"while\" \"(\" <exp> \")\" <statement>\n              | \"do\" <statement> \"while\" \"(\" <exp> \")\" \";\"\n              | \"for\" \"(\" <for-init> [<exp>] \";\" [<exp>] \")\" <statement>\n              | \";\"\n<exp> ::= <factor> | <exp> <binop> <exp> | <exp> \"?\" <exp> \":\" <exp>\n<factor> ::= <const> | <identifier>\n           | \"(\" {<type-specifier>}+ \")\" <factor>\n           | <unop> <factor> | \"(\" <exp> \")\"\n           | <identifier> \"(\" [<argument-list>] \")\"\n<argument-list> ::= <exp> {\",\" <exp>}\n<unop> ::= \"-\" | \"~\" | \"!\"\n<binop> ::= \"-\" | \"+\" | \"*\" | \"/\" | \"%\" | \"&&\" | \"||\"\n          | \"==\" | \"!=\" | \"<\" | \"<=\" | \">\" | \">=\" | \"=\"\n<const> ::= <int> | <long> | <uint> | <ulong> **| <double>**\n<identifier> ::= ? An identifier token ?\n<int> ::= ? An int token ?\n<long> ::= ? An int or long token ?\n<uint> ::= ? An unsigned int token ?\n<ulong> ::= ? An unsigned int or unsigned long token ?\n**<double> ::= ? A floating-point constant token ?**\n```", "```\nparse_type(specifier_list):\n    if specifier_list == [\"double\"]:\n        return Double\n    if specifier_list contains \"double\":\n        fail(\"Can't combine 'double' with other type specifiers\")\n `--snip--`\n```", "```\nget_common_type(type1, type2):\n    if type1 == type2:\n        return type1\n **if type1 == Double or type2 == Double:**\n **return Double**\n `--snip--`\n```", "```\ntypecheck_exp(e, symbols):\n    match e with\n  | `--snip--`\n    | Unary(Complement, inner) ->\n        typed_inner = typecheck_exp(inner, symbols)\n      ❶ if get_type(typed_inner) == Double:\n            fail(\"Can't take the bitwise complement of a double\")\n        unary_exp = Unary(Complement, typed_inner)\n        return set_type(unary_exp, get_type(typed_inner))\n```", "```\nstatic_init = IntInit(int) | LongInit(int) | UIntInit(int) | ULongInit(int)\n **| DoubleInit(double)**\n```", "```\nprogram = Program(top_level*)\ntop_level = Function(identifier, bool global, identifier* params, instruction* body)\n          | StaticVariable(identifier, bool global, type t, static_init init)\ninstruction = Return(val)\n            | SignExtend(val src, val dst)\n            | Truncate(val src, val dst)\n            | ZeroExtend(val src, val dst)\n            **| DoubleToInt(val src, val dst)**\n            **| DoubleToUInt(val src, val dst)**\n            **| IntToDouble(val src, val dst)**\n            **| UIntToDouble(val src, val dst)**\n            | Unary(unary_operator, val src, val dst)\n            | Binary(binary_operator, val src1, val src2, val dst)\n            | Copy(val src, val dst)\n            | Jump(identifier target)\n            | JumpIfZero(val condition, identifier target)\n            | JumpIfNotZero(val condition, identifier target)\n            | Label(identifier)\n            | FunCall(identifier fun_name, val* args, val dst)\nval = Constant(const) | Var(identifier)\nunary_operator = Complement | Negate | Not\nbinary_operator = Add | Subtract | Multiply | Divide | Remainder | Equal | NotEqual\n                | LessThan | LessOrEqual | GreaterThan | GreaterOrEqual\n```", "```\n .section .rodata\n    .align 8\n.L_one:\n    .double 1.0\n    .text\none_plus_one:\n    movsd   .L_one(%rip), %xmm0\n    addsd   .L_one(%rip), %xmm0\n    `--snip--`\n```", "```\ndouble add_double(double a, double b) {\n    return a + b;\n}\n```", "```\n .text\n    .globl add_double\nadd_double:\n    addsd   %xmm1, %xmm0\n    ret\n```", "```\nlong pass_parameters_1(int i1, double d1, int i2, unsigned long i3,\n                       double d2, double d3, long i4, int i5);\n```", "```\ndouble pass_parameters_2(double d1, long i1, long i2, double d2, int i3,\n                         long i4, long i5, double d3, long i6, long i7,\n                         int i8, double d4);\n```", "```\nint pass_parameters_3(double d1, double d2, int i1, double d3, double d4,\n                      double d5, double d6, unsigned int i2, long i3,\n                      double d7, double d8, unsigned long i4, double d9,\n                      int i5, double d10, int i6, int i7, double d11,\n                      int i8, int i9);\n```", "```\nint pass_parameters_3(double d1, double d2, int i1, double d3, double d4,\n                      double d5, double d6, unsigned int i2, long i3,\n                      double d7, double d8, unsigned long i4, **double d9**,\n                      int i5, **double d10,** int i6, **int i7, double d11,**\n                      **int i8, int i9**);\n```", "```\n .section .rodata\n    .align 16\n.L_negative.zero:\n    .double -0.0\n```", "```\n movsd   -8(%rbp), %xmm0\n    xorpd   .L_negative.zero(%rip), %xmm0\n    movsd   %xmm0, -16(%rbp)\n```", "```\n(unsigned int) 4294967290.0\n```", "```\ncvttsd2siq  %xmm0, %rax\nmovl  %eax, -4(%rbp)\n```", "```\n .section .rodata\n    .align 8\n.L_upper_bound:\n  ❶ .double 9223372036854775808.0\n    .text\n    `--snip--`\n  ❷ comisd  .L_upper_bound(%rip), %xmm0\n    jae     .L_out_of_range\n  ❸ cvttsd2siq    %xmm0, %rax\n    jmp     .L_end\n.L_out_of_range:\n    movsd   %xmm0, %xmm1\n  ❹ subsd   .L_upper_bound(%rip), %xmm1\n    cvttsd2siq    %xmm1, %rax\n    movq    $9223372036854775808, %rdx\n    addq    %rdx, %rax\n.L_end:\n```", "```\nmovl  $4294967290, %eax\ncvtsi2sdq  %rax, %xmm0\n```", "```\n ❶ cmpq    $0, -8(%rbp)\n    jl      .L_out_of_range\n  ❷ cvtsi2sdq    -8(%rbp), %xmm0\n    jmp     .L_end\n.L_out_of_range:\n    movq    -8(%rbp), %rax\n  ❸ shrq    %rax\n    cvtsi2sdq    %rax, %xmm0\n addsd   %xmm0, %xmm0\n.L_end:\n```", "```\n1.000000000000000000000000000000000000000000000000000**0** * 2^62\n```", "```\n1.000000000000000000000000000000000000000000000000000**1** * 2^62\n```", "```\nmovq    %rax, %rdx\nshrq    %rdx\nandq    $1, %rax\norq     %rax, %rdx\n```", "```\n cmpq    $0, -8(%rbp)\n    jl      .L_out_of_range\n    cvtsi2sdq    -8(%rbp), %xmm0\n    jmp     .L_end\n.L_out_of_range:\n    movq    -8(%rbp), %rax\n **movq    %rax, %rdx**\n **shrq    %rdx**\n **andq    $1, %rax**\n **orq     %rax, %rdx**\n    cvtsi2sdq    **%rdx,** %xmm0\n    addsd   %xmm0, %xmm0\n.L_end:\n```", "```\nassembly_type = Longword | Quadword **| Double**\n```", "```\nStaticConstant(identifier name, int alignment, static_init init)\n```", "```\ninstruction = `--snip--`\n            | Cvttsd2si(assembly_type dst_type, operand src, operand dst)\n            | Cvtsi2sd(assembly_type src_type, operand src, operand dst)\n```", "```\nbinary_operator = `--snip--` | DivDouble | And | Or | Xor\n```", "```\nunary_operator = `--snip--` | Shr\n```", "```\nreg = `--snip--` | XMM0 | XMM1 | XMM2 | XMM3 | XMM4 | XMM5 | XMM6 | XMM7 | XMM14 | XMM15\n```", "```\nprogram = Program(top_level*)\nassembly_type = Longword | Quadword **| Double**\ntop_level = Function(identifier name, bool global, instruction* instructions)\n          | StaticVariable(identifier name, bool global, int alignment, static_init init)\n          **| StaticConstant(identifier name, int alignment, static_init init)**\ninstruction = Mov(assembly_type, operand src, operand dst)\n            | Movsx(operand src, operand dst)\n            | MovZeroExtend(operand src, operand dst)\n            **| Cvttsd2si(assembly_type dst_type, operand src, operand dst)**\n            **| Cvtsi2sd(assembly_type src_type, operand src, operand dst)**\n            | Unary(unary_operator, assembly_type, operand)\n            | Binary(binary_operator, assembly_type, operand, operand)\n            | Cmp(assembly_type, operand, operand)\n            | Idiv(assembly_type, operand)\n            | Div(assembly_type, operand)\n            | Cdq(assembly_type)\n            | Jmp(identifier)\n            | JmpCC(cond_code, identifier)\n            | SetCC(cond_code, operand)\n            | Label(identifier)\n            | Push(operand)\n            | Call(identifier)\n            | Ret\n\nunary_operator = Neg | Not **| Shr**\nbinary_operator = Add | Sub | Mult **| DivDouble | And | Or | Xor**\noperand = Imm(int) | Reg(reg) | Pseudo(identifier) | Stack(int) | Data(identifier)\ncond_code = E | NE | G | GE | L | LE | A | AE | B | BE\nreg = AX | CX | DX | DI | SI | R8 | R9 | R10 | R11 | SP\n    **| XMM0 | XMM1 | XMM2 | XMM3 | XMM4 | XMM5 | XMM6 | XMM7 | XMM14 | XMM15**\n```", "```\nCopy(Constant(ConstDouble(1.0)), Var(\"x\"))\n```", "```\nStaticConstant(const_label, 8, DoubleInit(1.0))\n```", "```\nMov(Double, Data(const_label), Pseudo(\"x\"))\n```", "```\nasm_symtab_entry = ObjEntry(assembly_type, bool is_static, **bool is_constant**)\n | FunEntry(bool defined)\n```", "```\nBinary(Divide, Var(\"src1\"), Var(\"src2\"), Var(\"dst\"))\n```", "```\nMov(Double, Pseudo(\"src1\"), Pseudo(\"dst\"))\nBinary(DivDouble, Double, Pseudo(\"src2\"), Pseudo(\"dst\"))\n```", "```\nUnary(Negate, Var(\"src\"), Var(\"dst\"))\n```", "```\nStaticConstant(const, 16, DoubleInit(-0.0))\n```", "```\nMov(Double, Pseudo(\"src\"), Pseudo(\"dst\"))\nBinary(Xor, Double, Data(const), Pseudo(\"dst\"))\n```", "```\nBinary(LessThan, Var(\"x\"), Var(\"y\"), Var(\"dst\"))\n```", "```\nCmp(Double, Pseudo(\"y\"), Pseudo(\"x\"))\nMov(Longword, Imm(0), Pseudo(\"dst\"))\nSetCC(B, Pseudo(\"dst\"))\n```", "```\nJumpIfZero(Var(\"x\"), \"label\")\n```", "```\nBinary(Xor, Double, Reg(XMM0), Reg(XMM0))\nCmp(Double, Pseudo(\"x\"), Reg(XMM0))\nJmpCC(E, \"label\")\n```", "```\nUIntToDouble(Var(\"x\"), Var(\"y\"))\n```", "```\nMovZeroExtend(Pseudo(\"x\"), Reg(AX))\nCvtsi2sd(Quadword, Reg(AX), Pseudo(\"y\"))\n```", "```\nclassify_parameters(values):\n    int_reg_args = []\n    double_reg_args = []\n    stack_args = []\n\n    for v in values:\n        operand = convert_val(v)\n        t = assembly_type_of(v)\n      ❶ typed_operand = (t, operand)\n        if t == Double:\n          ❷ if length(double_reg_args) < 8:\n              ❸ double_reg_args.append(operand)\n            else:\n                stack_args.append(typed_operand)\n        else:\n            if length(int_reg_args) < 6:\n              ❹ int_reg_args.append(typed_operand)\n            else:\n                stack_args.append(typed_operand)\n\n    return (int_reg_args, double_reg_args, stack_args)\n```", "```\nset_up_parameters(parameters):\n\n    // classify them\n    int_reg_params, double_reg_params, stack_params = classify_parameters(parameters)\n\n    // copy parameters from general-purpose registers\n    int_regs = [DI, SI, DX, CX, R8, R9]\n    reg_index = 0\n    for (param_type, param) in int_reg_params:\n        r = int_regs[reg_index]\n emit(Mov(param_type, Reg(r), param))\n        reg_index += 1\n\n    // copy parameters from XMM registers\n    double_regs = [XMM0, XMM1, XMM2, XMM3, XMM4, XMM5, XMM6, XMM7]\n    reg_index = 0\n    for param in double_reg_params:\n        r = double_regs[reg_index]\n        emit(Mov(Double, Reg(r), param))\n        reg_index += 1\n\n    // copy parameters from the stack\n    offset = 16\n    for (param_type, param) in stack_params:\n        emit(Mov(param_type, Stack(offset), param))\n        offset += 8\n```", "```\nconvert_function_call(FunCall(fun_name, args, dst)):\n    int_registers = [DI, SI, DX, CX, R8, R9]\n    **double_registers = [XMM0, XMM1, XMM2, XMM3, XMM4, XMM5, XMM6, XMM7]**\n\n    **// classify arguments**\n    **int_args, double_args, stack_args = classify_parameters(args)**\n\n    // adjust stack alignment\n    if length(stack_args) is odd:\n        stack_padding = 8\n    else:\n        stack_padding = 0\n\n    if stack_padding != 0:\n        emit(Binary(Sub, Quadword, Imm(stack_padding), Reg(SP)))\n\n // pass args in registers\n    reg_index = 0\n    for (assembly_type, assembly_arg) in int_args:\n        r = int_registers[reg_index]\n        emit(Mov(assembly_type, assembly_arg, Reg(r)))\n        reg_index += 1\n\n    **reg_index = 0**\n    **for assembly_arg in double_args:**\n        **r = double_registers[reg_index]**\n        **emit(Mov(Double, assembly_arg, Reg(r)))**\n        **reg_index += 1**\n\n    // pass args on stack\n    for (assembly_type, assembly_arg) in reverse(stack_args):\n        if (assembly_arg is a Reg or Imm operand\n            or assembly_type == Quadword\n            **or assembly_type == Double**):\n            emit(Push(assembly_arg))\n        else:\n            emit(Mov(**assembly_type**, assembly_arg, Reg(AX)))\n            emit(Push(Reg(AX)))\n\n    // emit call instruction\n    emit(Call(fun_name))\n\n    // adjust stack pointer\n    bytes_to_remove = 8 * length(stack_args) + stack_padding\n    if bytes_to_remove != 0:\n        emit(Binary(Add, Quadword, Imm(bytes_to_remove), Reg(SP)))\n\n    // retrieve return value\n    assembly_dst = convert_val(dst)\n    return_type = assembly_type_of(dst)\n    **if return_type == Double:**\n        **emit(Mov(Double, Reg(XMM0), assembly_dst))**\n    **else:**\n        emit(Mov(return_type, Reg(AX), assembly_dst))\n```", "```\nReturn(Var(\"x\"))\n```", "```\nMov(Double, Pseudo(\"x\"), Reg(XMM0))\nRet\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Program(top_level_defs</samp> <samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">+</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\"><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><all StaticConstant constructs for\n         floating-point constants></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">)</samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Function(name, global, params,\n          instructions)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Function(name, global,</samp> \n <samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\"></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">[Mov(<</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\">first int param type</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">>, Reg(DI),</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_11\"><</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\">first int param</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">>),</samp>\n <samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\"></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">(<</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\">second int param type</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">>, Reg(SI),</samp>\n <samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\"><</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\">second int param</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">>),</samp>\n <samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><copy next four</samp> <samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\">integer</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">parameters from registers></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp>\n <samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">Mov(Double, Reg(XMM0),</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><first double param>),</samp>\n <samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">Mov(Double, Reg(XMM1),</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><second double param></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">),</samp> \n <samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><copy next six double parameters from registers>,</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(<</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\">first stack param type</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">>, Stack(16),</samp>\n <samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><first stack param</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">>),</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(<</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\">second stack param type</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">>, Stack(24),</samp>\n <samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\"><</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\">second stack param</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">>),</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><copy remaining parameters from stack></samp><samp class=\"SANS_Futura_Std_Book_11\">]</samp> +\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">instructions)</samp></samp></samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><val type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, val, Reg(AX))\nRet</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">Mov(Double, val, Reg(XMM0))\nRet</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Cmp(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src type></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">,</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Imm(0), src)\nMov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><dst type></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">,</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Imm(0), dst)\nSetCC(E, dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">Binary(Xor, Double, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">), Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">))\nCmp(Double, src, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">))\nMov(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><dst type></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">, Imm(0), dst)\nSetCC(E, dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">Mov(Double, src, dst)\nBinary(Xor, Double, Data(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><negative-zero></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">), dst)</samp>\n```", "```\n<samp class=\"SANS_Futura_Std_Heavy_B_11\">And add a top-level constant:</samp>\n<samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">StaticConstant(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><negative-zero></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">, 16,\n                DoubleInit(-0.0))</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, src1, Reg(AX))\nCdq(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">)\nIdiv(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, src2)\nMov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, Reg(AX), dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, src1, Reg(AX))\nMov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, Imm(0), Reg(DX))\nDiv(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, src2)\nMov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, Reg(AX), dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Cmp(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><condition type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, Imm(0), condition)\nJmpCC(E, target)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">Binary(Xor, Double, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">), Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">))\nCmp(Double, condition, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">))\nJmpCC(E, target)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Cmp(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><condition type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, Imm(0), condition)\nJmpCC(NE, target)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">Binary(Xor, Double, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">), Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">))\nCmp(Double, condition, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">))\nJmpCC(NE, target)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><fix stack alignment></samp> \n<samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><move arguments to general-purpose registers>\n<move arguments to XMM registers>\n<push arguments onto the stack></samp> \n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Call(fun_name)</samp> \n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><deallocate arguments/padding></samp> \n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><dst type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><dst register></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, dst)</samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">Cvtsi2sd(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><src type></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">, src, dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">Cvttsd2si(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><dst type></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">, src, dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">MovZeroExtend(src, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">))\nCvtsi2sd(Quadword, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">), dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">Cmp(Quadword, Imm(0), src)\nJmpCC(L,</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><label1></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">)\nCvtsi2sd(Quadword, src, dst) Jmp(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><label2></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">)\nLabel(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><label1></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">)\nMov(Quadword, src, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><R1></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">))\nMov(Quadword, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><R1></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">), Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><R2></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">))\nUnary(Shr, Quadword, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><R2></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">))\nBinary(And, Quadword, Imm(1), Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><R1></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">))\nBinary(Or, Quadword, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><R1></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">), Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><R2></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">))\nCvtsi2sd(Quadword, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><R2></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">), dst)\nBinary(Add, Double, dst, dst)\nLabel(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><label2></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">)</samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">Cvttsd2si(Quadword, src, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">))\nMov(Longword, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">), dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">Cmp(Double, Data(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><upper-bound></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">), src)\nJmpCC(AE,</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><label1></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">)\nCvttsd2si(Quadword, src, dst)\nJmp(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><label2></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">)\nLabel(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><label1></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">)\nMov(Double, src, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">))\nBinary(Sub, Double, Data(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><upper-bound></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">),</samp> \n <samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\"></samp> <samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">))\nCvttsd2si(Quadword, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">), dst)\nMov(Quadword, Imm(9223372036854775808), Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">))\nBinary(Add, Quadword, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">), dst)\nLabel(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><label2></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">)</samp></samp>\n```", "```\n<samp class=\"SANS_Futura_Std_Heavy_B_11\">And add a top-level constant:</samp>\n<samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">StaticConstant(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><upper-bound></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">, 8,\n                DoubleInit(9223372036854775808.0))</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">Data(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><ident></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">)</samp> \n<samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">And add top-level constant:</samp> \n<samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">StaticConstant(</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><ident></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">, 8, DoubleInit(double))</samp>\n```", "```\nCvttsd2si(Quadword, Stack(-8), Stack(-16))\n```", "```\nCvttsd2si(Quadword, Stack(-8), Reg(R11))\nMov(Quadword, Reg(R11), Stack(-16))\n```", "```\nCvtsi2sd(Longword, Imm(10), Stack(-8))\n```", "```\nMov(Longword, Imm(10), Reg(R10))\nCvtsi2sd(Longword, Reg(R10), Reg(XMM15))\nMov(Double, Reg(XMM15), Stack(-8))\n```", "```\nCmp(Double, Stack(-8), Stack(-16))\n```", "```\nMov(Double, Stack(-16), Reg(XMM15))\nCmp(Double, Stack(-8), Reg(XMM15))\n```", "```\n.L_twenty:\n    .double 0x2.8p+3\n```", "```\n.L_twenty:\n    .quad 4626322717216342016\n```", "```\n.L_twenty:\n    .double 20.0\n```", "```\n1.000000000000000055511151231257827021181583404541015625e-1\n```", "```\n1.0000000000000001e-1\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">StaticVariable(name, global,\n                alignment, init)</samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><global-directive></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.bss\n   </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><alignment-directive>\n<name></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:\n   </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><init></samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><global-directive></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">\n   .data</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">\n    <alignment-directive>\n<name></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:</samp> \n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><init></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">StaticConstant(name, alignment,\n                init)</samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">.section .rodata</samp> \n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"></samp> <samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><alignment-directive></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><name></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">:</samp> \n <samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><init></samp></samp>\n```", "```\n<samp class=\"SANS_Futura_Std_Heavy_B_11\">macOS (8-byte-aligned constants)</samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">.literal8\n    .balign 8</samp> \n<samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><name></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">:</samp> \n <samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><init></samp>\n```", "```\n<samp class=\"SANS_Futura_Std_Heavy_B_11\">macOS (16-byte-aligned constants)</samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">.literal16\n    .balign 16</samp> \n<samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><name></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">:</samp> \n <samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><init></samp> \n <samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">.quad 0</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">cvtsi2sd</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><t></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\"></samp> <samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><src>, <dst></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">cvttsd2si</samp><samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><t></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\"></samp> <samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><src>, <dst></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">xorpd   </samp> <samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><src></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">,</samp> <samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><dst></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">mulsd   </samp> <samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><src></samp><samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">,</samp> <samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><dst></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W7Bold_B_11\">comisd  </samp> <samp class=\"SANS_TheSansMonoCd_W7Bold_Italic_BI_11\"><operand>, <operand></samp>\n```", "```\n$ **./test_compiler** `**/path/to/your_compiler**` **--chapter 13 --nan**\n```"]