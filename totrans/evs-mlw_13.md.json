["```\n`--snip--`\npush [ebp+hProcess]\npush [ebp+DebuggerPresent]\ncall CheckRemoteDebuggerPresent\n`--snip--`\n```", "```\nSetLastError(\"5\");\nOutputDebugString(\"testing123\");\n\nerror = GetLastError();\n\nif (error == \"5\"):\n  // Debugger detected.\n  // Execute evasion code, such as TerminateProcess.\nelse:\n  // Did not detect debugger; continue execution.\n```", "```\nmov ebx, [invalid_handle]\ncall NtClose\n```", "```\n`--snip--`\nmov eax, [fs:0x30]\ncmp [eax+0x2], 1\njnz DebuggerDetected\n`--snip--`\n```", "```\n`--snip--`\nIsBeingDebugged() {\n  try {\n   ❶ asm (\"int 3\");\n     return true;\n  }\n ❷ catch (EXCEPTION_EXECUTE_HANDLER) {\n     return false;\n  }\n}\n`--snip--`\n```", "```\n`--snip--`\nmov ebx, <kernel32.WriteProcessMemory>\ncmp byte ptr ds:[ebx], 0xCC\n`--snip--`\n```", "```\nCONTEXT context;\ncontext.ContextFlags = CONTEXT_DEBUG_REGISTERS;\nHANDLE hThread = GetCurrentThread();\nGetThreadContext(hThread, &context);\n\nif ((context.Dr0) || (context.Dr1) || (context.Dr2) || (context.Dr3)) {\n   return true;\n}\n```", "```\ncontext.Dr0 = null;\ncontext.Dr1 = null;\ncontext.Dr2 = null;\ncontext.Dr3 = null;\n\nSetThreadContext(hThread, &context);\n```", "```\n`--snip--`\npush 104h ; 0x100 (PAGE_GUARD) + 0x4 (READ/WRITE)\npush edi\npush esi\ncall VirtualAlloc\n`--snip--`\n```", "```\n// Calculate the checksum of the clean code.\nclean_code_checksum = calculate_checksum(clean_code)\n\n// At runtime, recalculate the checksum and compare it to the stored value.\nmalware_code = read_malware_code()\nmalware_code_checksum = calculate_checksum(malware_code)\n\n// If checksums do not match, terminate the malware.\nif malware_code_checksum != clean_code_checksum:\n  terminate_malware()\nelse:\n  // The code has not been tampered with! Continue running.\n```"]