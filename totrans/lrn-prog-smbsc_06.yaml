- en: '**6**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**6**'
- en: '**GETTING USER INPUT**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**获取用户输入**'
- en: '![image](graphics/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/common01.jpg)'
- en: To perform useful tasks or give you useful information, some programs need input
    from you. For example, in Microsoft Word you enter text, click buttons to make
    it look good, and enter a filename to save it. In a web browser, you click links
    or enter a URL or search term to find a web page. In drawing programs, you draw
    by clicking and dragging the mouse. When you use a program and give it information
    that helps it do its job, that information is called *user input*.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行有用的任务或提供有用的信息，一些程序需要来自您的输入。例如，在 Microsoft Word 中，您输入文本，点击按钮使其看起来更好，并输入文件名以保存它。在网页浏览器中，您点击链接或输入
    URL 或搜索词来找到网页。在绘图程序中，您通过点击和拖动鼠标来绘制。当您使用程序并向其提供帮助其完成工作的信息时，这些信息被称为*用户输入*。
- en: Programs need a way to ask users for input, process that input, and respond
    correctly. Programs that do this are *interactive*. In this chapter, you’ll make
    your programs interactive by giving them the capability to accept and react to
    user input, which will be in the form of strings and numbers.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 程序需要一种方式来向用户请求输入，处理这些输入，并做出正确的响应。能够做到这一点的程序是*交互式的*。在本章中，您将通过使程序能够接受并响应用户输入（该输入将是字符串和数字的形式）来让程序变得互动。
- en: '**Talking to the Computer**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**与计算机对话**'
- en: Until now, all the information your programs needed was in the source code.
    For example, look at the program in [Listing 6-1](ch06.html#ch6ex1).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您的程序所需的所有信息都在源代码中。例如，看看[清单 6-1](ch06.html#ch6ex1)中的程序。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 6-1: Finding the area of a circle*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 6-1：计算圆的面积*'
- en: This program uses a fixed value of 5 for the radius in line 2\. This is called
    *hard-coded* data. Hard-coded data is part of the program. If you want to change
    that data, you must change the source code. For example, to find the area of a
    circle using a different radius, you’d open the file, change the radius value
    in your code, save the file, and run the new code. It’s a pain to do this every
    time you want to change the value of a variable. And if you give this code to
    someone who doesn’t know how to program, it won’t be very useful.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序在第 2 行使用一个固定值 5 作为半径。这被称为*硬编码*数据。硬编码数据是程序的一部分。如果您想要更改这些数据，必须更改源代码。例如，要使用不同的半径来计算圆的面积，您需要打开文件，在代码中更改半径值，保存文件并运行新代码。每次想要更改变量的值时这样做非常麻烦。而且如果将这段代码交给一个不懂编程的人，它就不会很有用。
- en: '***Your Number, Please?***'
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***请输入您的号码？***'
- en: 'Clearly, it’d be best if you could calculate the area of any circle without
    having to change the source code. So let’s explore how to read values directly
    input by users. We want our program to ask the user to enter a value for the radius
    and then use that value in the calculation. To do this, you’ll use the `TextWindow`
    method `ReadNumber()`. Replace line 2 in [Listing 6-1](ch06.html#ch6ex1) with
    the following statement:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 很显然，如果您能计算任何圆的面积，而无需更改源代码，那将是最好的。所以让我们来探索如何直接读取用户输入的值。我们希望程序询问用户输入半径的值，然后在计算中使用该值。为此，您将使用
    `TextWindow` 方法 `ReadNumber()`。将[清单 6-1](ch06.html#ch6ex1)中的第 2 行替换为以下语句：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When this statement runs, a flashing cursor appears in the text window, as shown
    in [Figure 6-1](ch06.html#ch6fig1). The cursor is the program’s way of saying,
    “It’s your turn to type. I’m waiting. Don’t make me come over there!”
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当此语句运行时，文本窗口中会出现一个闪烁的光标，如[图 6-1](ch06.html#ch6fig1)所示。光标是程序的方式告诉你：“轮到你输入了。我在等你。别让我过来找你！”
- en: '![image](graphics/f06-01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f06-01.jpg)'
- en: '*Figure 6-1: Running the* `ReadNumber()` *method*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-1：运行* `ReadNumber()` *方法*'
- en: When the user types a number and presses ENTER, the input is stored for the
    rest of the program to use. Whatever number the user entered is now stored in
    the `radius` variable.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户输入一个数字并按下 ENTER 键时，输入会被存储，供程序的其余部分使用。用户输入的数字现在存储在 `radius` 变量中。
- en: '**NOTE**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Run the program and try to enter a character other than a number. What happens?
    The program won’t accept anything that’s not a number! That’s why the method is
    named* `ReadNumber()`.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*运行程序并尝试输入一个非数字字符。会发生什么？程序不会接受任何不是数字的输入！这就是该方法被命名为* `ReadNumber()` *的原因。*'
- en: '***Introducing Yourself to Your Computer***'
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***向计算机自我介绍***'
- en: 'A program can also accept user input in the form of text, or strings. Let’s
    imagine we want to greet the player with their name. We’ll store the player’s
    name in a variable called `userName` but use a new `TextWindow` method called
    `Read()`. Run the following program, and enter your name when you see the cursor:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 程序还可以接受用户以文本或字符串的形式输入数据。假设我们想要用玩家的名字来问候他们。我们将把玩家的名字存储在一个名为`userName`的变量中，但使用一个新的`TextWindow`方法，叫做`Read()`。运行以下程序，并在看到光标时输入你的名字：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first statement accepts the text the user entered in the text window and
    stores that text in `userName`. The program then greets the user with their name.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条语句接受用户在文本窗口中输入的文本，并将其存储在`userName`中。程序然后用用户的名字来问候他们。
- en: 'So what’s the difference between `Read()` and `ReadNumber()`? `Read()` works
    exactly like `ReadNumber()`: they both show a flashing cursor and wait for the
    user to type input and press ENTER. In fact, you can even use `Read()` to get
    numbers from a user. But `ReadNumber()` will accept *only* a number from a user,
    so we recommend you use it when you need your user to enter a number.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，`Read()`和`ReadNumber()`有什么区别呢？`Read()`的工作方式和`ReadNumber()`完全相同：它们都会显示一个闪烁的光标，并等待用户输入并按下
    ENTER。事实上，你甚至可以使用`Read()`来获取数字。但`ReadNumber()`只接受用户输入的*数字*，因此我们建议在你需要用户输入数字时使用它。
- en: '***Writing Prompts for Input***'
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***为输入编写提示***'
- en: A flashing cursor without instructions doesn’t tell your user what kind of data
    to input (like a number, a name, an address, or favorite type of monkey). Unless
    your program is written for a magician or a mind reader like Professor X, you
    should provide some instructions before you allow your program to accept input
    from `Read()` or `ReadNumber()`. To do this, you’ll display a *prompt*, which
    is a message that tells the user what kind of data to enter.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一个闪烁的光标没有任何提示，无法告诉用户应输入何种数据（比如数字、姓名、地址或最喜欢的猴子类型）。除非你的程序是为魔术师或像教授 X 这样的读心术师编写的，否则你应该在允许程序从`Read()`或`ReadNumber()`接受输入之前，提供一些指引。为此，你将显示一个*提示*，这是告诉用户应输入哪种数据的消息。
- en: 'From [Listing 6-1](ch06.html#ch6ex1), replace line 2 with these two lines:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从[清单 6-1](ch06.html#ch6ex1)中，将第 2 行替换为以下两行：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: First, we call the `Write()` method and pass it a message to display. In this
    program, the message you pass is a prompt telling your user to enter a value for
    the radius and then press ENTER. You end the prompt with a colon to show the user
    that the program’s waiting for keyboard input. (You don’t need the colon, but
    it’s clearer to your user.) Use `Write()` instead of `WriteLine()` to keep the
    cursor on the same line as the prompt. After you call `Write()`, you call `ReadNumber()`
    to accept the number input by the user and store it in the variable `radius`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们调用`Write()`方法并传递一条消息来显示。在这个程序中，你传递的消息是一个提示，告诉用户输入半径的值并按下 ENTER。你用冒号结束提示，以便告诉用户程序在等待键盘输入。（你可以不加冒号，但这样会让用户更清楚。）使用`Write()`而不是`WriteLine()`，这样光标就会停留在与提示相同的行上。调用`Write()`后，接着调用`ReadNumber()`来接受用户输入的数字并将其存储在`radius`变量中。
- en: After adding these two statements, run your program to see something like [Figure
    6-2](ch06.html#ch6fig2).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这两条语句后，运行你的程序，应该会看到类似于[图 6-2](ch06.html#ch6fig2)的内容。
- en: '![image](graphics/f06-02.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f06-02.jpg)'
- en: '*Figure 6-2: The text window waiting for input from your user*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-2：文本窗口等待用户输入*'
- en: When Small Basic runs the statement `radius = TextWindow.ReadNumber()`, it waits
    for the user to enter a number and press ENTER. The program won’t read what the
    user types until they press ENTER. When the user presses ENTER, the program grabs
    the user input and assigns it to the `radius` variable. The program then continues
    with the statement after the `ReadNumber()` method.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Small Basic 执行语句`radius = TextWindow.ReadNumber()`时，它会等待用户输入一个数字并按下 ENTER。程序不会在用户按下
    ENTER 之前读取他们输入的内容。当用户按下 ENTER 后，程序会获取用户的输入，并将其赋值给`radius`变量。然后，程序会继续执行`ReadNumber()`方法后的语句。
- en: Now that you’ve accepted the radius from your user, all that’s left is to compute
    the area and display the result. [Listing 6-2](ch06.html#ch6ex2) shows the complete
    program.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经接受了用户的半径，剩下的就是计算面积并显示结果。[清单 6-2](ch06.html#ch6ex2)展示了完整的程序。
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 6-2: Letting the user enter the radius*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 6-2：让用户输入半径*'
- en: 'Let’s see what the output looks like if you enter a radius of 8:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下如果输入半径为 8 时，输出会是什么样子：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Try it out for yourself!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 自己试试看吧！
- en: '***A Moment of Silence, Please (Pause)***'
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***请稍等片刻（暂停）***'
- en: At times you may need to display some instructions to your user (like explaining
    the rules of Hide and Go Tickle) and then wait for them to read those instructions.
    For example, you might display the instructions followed by “Press any key to
    continue ...” and then wait for the user to press a key to show that they’re ready
    to continue. You can do this by using the `Pause()` method.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能需要向用户展示一些说明（比如解释“捉迷藏”游戏的规则），然后等待他们阅读这些说明。例如，你可能会显示说明内容，并跟上“按任意键继续...”的提示，然后等待用户按键表示他们准备继续。你可以通过使用`Pause()`方法来实现这一点。
- en: To see this method in action, let’s write a program that converts the computer
    into a wisdom machine. Each time the user presses a key, the computer displays
    a new bit of wisdom. The program is shown in [Listing 6-3](ch06.html#ch6ex3).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到这个方法的实际效果，让我们写一个程序，把计算机变成一个智慧机器。每次用户按下一个键时，计算机会显示一条新的智慧名言。该程序如[清单 6-3](ch06.html#ch6ex3)所示。
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 6-3: Demonstrating the* `Pause()` *method*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 6-3：演示* `Pause()` *方法*'
- en: After showing the first wise saying (line 4), the program calls `Pause()` to
    give the user time to read it (line 5). This call displays “Press any key to continue
    ...” and waits for the user to press a key. When the user presses a key, the program
    displays the next bit of wisdom (line 7) and pauses again (line 8). The program
    continues to do this until the last statement is executed. Add more wise sayings
    to this program, and then share it with someone!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在显示第一句智慧名言（第4行）之后，程序调用`Pause()`给用户时间阅读（第5行）。这个调用会显示“按任意键继续...”并等待用户按键。当用户按下一个键时，程序会显示下一句智慧名言（第7行），然后再次暂停（第8行）。程序会继续这样做，直到执行最后一句话。向程序中添加更多智慧名言，然后与他人分享！
- en: 'What if you want to display a statement other than “Press any key to continue
    ...,” such as “Press any key to see the next line of wisdom ...”? Well, Small
    Basic provides you with the `PauseWithoutMessage()` method for this purpose. You
    can write a custom prompt using `Write()` or `WriteLine()` as usual, and then
    call `PauseWithoutMessage()` to wait for the user. Try it out. Replace the calls
    to `Pause()` in lines 5 and 8 of [Listing 6-3](ch06.html#ch6ex3) with these statements:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想显示与“按任意键继续...”不同的语句，例如“按任意键查看下一条智慧名言...”，该怎么办呢？好消息是，Small Basic为此提供了`PauseWithoutMessage()`方法。你可以像平常一样使用`Write()`或`WriteLine()`编写自定义提示，然后调用`PauseWithoutMessage()`等待用户。试试看吧。将[清单
    6-3](ch06.html#ch6ex3)中第5行和第8行的`Pause()`调用替换为以下语句：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Your program runs the same way as before but uses a more descriptive prompt.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你的程序运行方式与之前相同，但使用了更具描述性的提示。
- en: '**Working with User Input**'
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**处理用户输入**'
- en: Let’s put your new knowledge to use by writing a couple of programs that read
    input from a user, process the input, and display the output back to the user.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过编写几个程序来运用你学到的新知识，这些程序将从用户那里读取输入，处理输入，并将输出显示给用户。
- en: '***Converting Fahrenheit to Celsius***'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***将华氏度转换为摄氏度***'
- en: 'Next, you’ll create a program that converts a temperature from degrees Fahrenheit
    to degrees Celsius. The program prompts the user for the temperature in Fahrenheit
    and then converts it to Celsius using this formula:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将创建一个程序，将温度从华氏度转换为摄氏度。程序会提示用户输入华氏温度，然后使用以下公式将其转换为摄氏度：
- en: '*C* = (5 ÷ 9) × (*F* – 32)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*C* = (5 ÷ 9) × (*F* – 32)'
- en: Run the program in [Listing 6-4](ch06.html#ch6ex4) several times to see how
    it works. To use the degree symbol, press and hold the ALT key, type `248` on
    your numeric keypad, and then release the ALT key.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 多次运行[清单 6-4](ch06.html#ch6ex4)中的程序，看看它是如何工作的。要使用度符号，请按住ALT键，输入数字小键盘上的`248`，然后释放ALT键。
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 6-4: Converting Fahrenheit to Celsius*'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 6-4：将华氏度转换为摄氏度*'
- en: First, the program prompts the user to enter a temperature. When they press
    ENTER, their input is assigned to the variable `F`. Your program then converts
    the value stored in `F` to Celsius and stores the result in variable `C` (which
    is all done in line 4). Next, the program uses `Math.Round()` on line 5 to take
    the current value of `C`, round it to the nearest integer, and store the rounded
    value in `C`, which replaces the old value of `C`. You’ll learn more about the
    `Round()` method in [Chapter 7](ch07.html#ch07), but we use it here to make the
    program’s output easier to read. Finally, your program displays the output (line
    6).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，程序提示用户输入温度。当用户按下 ENTER 键时，输入的值会被赋给变量 `F`。然后，程序将存储在 `F` 中的值转换为摄氏度，并将结果存储在变量
    `C` 中（这一切都在第 4 行完成）。接下来，程序在第 5 行使用 `Math.Round()` 对 `C` 的当前值进行四舍五入，将四舍五入后的值存储回
    `C`，替换掉原来的值。你将在[第 7 章](ch07.html#ch07)中学习更多关于 `Round()` 方法的内容，但我们在这里使用它是为了让程序的输出更易读。最后，程序在第
    6 行显示输出结果。
- en: '**TRY IT OUT 6-1**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**动手实践 6-1**'
- en: 'Try to guess what the following program does. Run it to check your answer:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试猜测以下程序的功能。运行它来检查你的答案：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '***Averaging Numbers***'
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***计算数字平均值***'
- en: Let’s write a program that finds the average of four numbers provided by the
    user. There are a couple of ways to do this; the first is to use five variables,
    as shown in [Listing 6-5](ch06.html#ch6ex5).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个程序，计算用户提供的四个数字的平均值。实现这个目标有几种方式；第一种是使用五个变量，如[清单 6-5](ch06.html#ch6ex5)所示。
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 6-5: Finding the average of four numbers*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 6-5: 计算四个数字的平均值*'
- en: 'Look at the output when we enter 10, 20, 15, and 25:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们输入 10、20、15 和 25 时，查看输出：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The program prompts the user to enter four numbers and press ENTER after each
    number. It reads these numbers, one by one, and saves them in four variables:
    `n1`, `n2`, `n3`, and `n4` (lines 4–7). It then computes the average of these
    numbers, saves the average in the variable `avg` (line 8), and displays the result
    (line 9).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 程序提示用户输入四个数字，每输入一个数字后按下 ENTER 键。它逐个读取这些数字，并将它们保存在四个变量中：`n1`、`n2`、`n3` 和 `n4`（第
    4 到 7 行）。然后，它计算这些数字的平均值，并将平均值存储在变量 `avg` 中（第 8 行），最后显示结果（第 9 行）。
- en: '[Listing 6-6](ch06.html#ch6ex6) shows a different way to write this program.
    Enter this program, and then run it. This time you’ll use just one variable named
    `sum`.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 6-6](ch06.html#ch6ex6)展示了另一种编写此程序的方式。输入这个程序后运行它。这次你将只使用一个名为 `sum` 的变量。'
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 6-6: Finding the average of four numbers using an accumulator*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 6-6: 使用累加器计算四个数字的平均值*'
- en: To understand how the program works, let’s say the user entered the numbers
    10, 20, 15, and 25 in response to the prompt. So, in line 4, `sum` becomes 10\.
    In line 5, the second number (20) is added to the first number (10) and saved
    to the `sum` variable (totaling 30). In lines 6–7, the third number (15) and fourth
    number (25) are added and saved to `sum` (totaling 70). The program then displays
    the average, which is `sum / 4`, to the user (line 8).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解程序是如何工作的，假设用户输入了数字 10、20、15 和 25 作为回应。所以，在第 4 行，`sum` 变成了 10。在第 5 行，第二个数字（20）加到第一个数字（10）上，结果保存在
    `sum` 变量中（总共 30）。在第 6 到 7 行，第三个数字（15）和第四个数字（25）被加到一起并保存在 `sum` 中（总共 70）。程序然后显示平均值，即
    `sum / 4`，给用户看（第 8 行）。
- en: Because of how the `sum` variable keeps adding input to itself (or accumulating),
    it’s known as an *accumulator* (also known as a *running sum*). (This might be
    similar to how you accumulate hairbands or Pokémon cards, but these numbers only
    take up computer memory and don’t clutter your room.)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 `sum` 变量不断将输入值累加到自己上（或称为积累），它被称为*累加器*（也称为*累计和*）。(这可能类似于你积累发圈或宝可梦卡片的方式，但这些数字只占用计算机内存，不会让你的房间变得杂乱。)
- en: '***Reading Text***'
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***读取文本***'
- en: 'Next, let’s write a simple program that makes silly sentences using the words
    in Shakespeare’s famous quote: “To *be* or not to *be*: that is the *question*.”
    You’ll ask the user to enter two verbs and a noun, and then you’ll use these entries
    to replace the words *be*, *be*, and *question* in Shakespeare’s quote. [Listing
    6-7](ch06.html#ch6ex7) shows the complete program.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，让我们编写一个简单的程序，使用莎士比亚名言中的单词来构建搞笑的句子：“*To be* or not to *be*: that is the
    *question*。”你将要求用户输入两个动词和一个名词，然后用这些输入替换莎士比亚名言中的 *be*、*be* 和 *question*。[清单 6-7](ch06.html#ch6ex7)展示了完整的程序。'
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 6-7: Silly Shakespeare lines*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 6-7: 搞笑的莎士比亚句子*'
- en: 'When we ran this code, we entered *eat*, *swim*, and *cow*. This is the output:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行这段代码时，我们输入了*eat*、*swim* 和 *cow*。这是输出结果：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Try it out, and then come back. We’ll wait. Are you back? Was your output funnier
    than ours? Well, go show someone!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试一下，然后回来。我们等你。你回来了么？你的输出比我们的更好笑吗？那就去给别人看看吧！
- en: '**TRY IT OUT 6-2**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**试试看 6-2**'
- en: Write an interactive Mad Libs–style program in which you ask the user to enter
    the name of their favorite princess (such as Snow White), something evil, the
    name of a school for princesses, something yummy, a name for a short wizard, something
    so valuable that they’d never sell it, a verb, small creatures, and a superhero’s
    power.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个互动的Mad Libs风格程序，要求用户输入他们最喜欢的公主的名字（比如白雪公主）、某个邪恶的东西、公主学校的名字、某个美味的东西、一个矮小巫师的名字、某个他们永远不会卖掉的珍贵物品、一个动词、小生物的名称和超级英雄的力量。
- en: 'Then display the following story for the user, and replace the bracketed terms
    with the user’s input:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后向用户展示以下故事，并用用户的输入替换方括号中的词语：
- en: “Princess [PrincessName] was traveling through the forest when suddenly the
    evil [SomethingEvil] jumped out at her and offered her an apple. Princess [PrincessName]
    refused, because her mother sent her to [NameOfSchool], where she learned that
    you don’t take unwrapped food from strangers (it could be poisoned). So Princess
    [PrincessName] continued through the woods until she came upon a house made of
    [SomethingYummy]! Not wanting to damage private property, she kept walking. Next,
    Princess [PrincessName] came upon a spinning wheel where a short man named [ShortWizard’sName]
    tempted her to use a magic spinning wheel to make gold (in exchange for her [SomethingValuable]).
    But Princess [PrincessName]’s mother had already told her that an evil fairy had
    cast a spell on her when she was a baby and that she’d [Verb] forever if she pricked
    her finger on a spinning wheel. So Princess [PrincessName] kept walking and arrived
    safely home to a cottage with seven [SmallCreatures], where she locked herself
    in her room for the rest of her life because she had the power of [SuperHeroPower].”
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: “公主[PrincessName]正在穿越森林，突然邪恶的[SomethingEvil]跳出来向她递了一只苹果。公主[PrincessName]拒绝了，因为她的母亲让她去[NameOfSchool]，在那里她学到了不要从陌生人那里接受未包装的食物（因为那可能是被下了毒的）。于是公主[PrincessName]继续穿越森林，直到她遇到了一座由[SomethingYummy]做成的房子！她不想破坏私人财产，所以继续走。接下来，公主[PrincessName]遇到了一个纺车，纺车旁站着一个名叫[ShortWizard’sName]的小个子巫师，他诱使她使用一个魔法纺车来制造黄金（以交换她的[SomethingValuable]）。但是公主[PrincessName]的母亲早就告诉过她，当她还是婴儿时，一位邪恶的仙女对她施下了诅咒，如果她在纺车上刺破手指，她将永远[Verb]。因此，公主[PrincessName]继续前行，最终安全回到家，家里有七个[SmallCreatures]，她把自己锁在房间里过完了余生，因为她拥有[SuperHeroPower]的力量。”
- en: Then make your own interactive story program with a new character (like a hero,
    ninja, pirate, or My Little Pony), and share it!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后制作一个自己的互动故事程序，创建一个新角色（比如英雄、忍者、海盗，或者小马宝莉），并分享它！
- en: '**Programming Challenges**'
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程挑战**'
- en: If you get stuck, check out *[http://nostarch.com/smallbasic/](http://nostarch.com/smallbasic/)*
    for the solutions and for more resources and review questions for teachers and
    students.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到困难，可以查看 *[http://nostarch.com/smallbasic/](http://nostarch.com/smallbasic/)*，这里有解决方案以及更多资源和针对教师和学生的复习问题。
- en: Using Small Basic, you can easily turn your computer into a number wizard! Open
    the file *Magician.sb* from this chapter’s folder and run it. Explain how the
    program works.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Small Basic，你可以轻松将你的计算机变成一个数字魔法师！打开本章节文件夹中的 *Magician.sb* 文件并运行它。解释这个程序是如何工作的。
- en: 'Make a silly Mad Libs–style game using the phrase, “One man’s trash is another
    man’s treasure.” Another version of the phrase is, “One man’s loss is another
    man’s gain.” For your version, ask the user for two living creatures and two different
    nouns. Then have your program output in this format: “One [Creature1]’s [Noun1]
    is another [Creature2]’s [Noun2].”'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个愚蠢的Mad Libs风格游戏，使用这个短语：“一个人的垃圾是另一个人的宝藏。”这个短语的另一个版本是：“一个人的失落是另一个人的收获。”在你的版本中，要求用户提供两个活物名称和两个不同的名词。然后让你的程序输出如下格式：“一个[Creature1]的[Noun1]是另一个[Creature2]的[Noun2]。”
- en: 'Eve’s mom is having a garage sale. Because Eve wants to earn some money, she
    sets up a table to sell lemonade, cookies, and her homemade greeting cards as
    the customers come up the driveway (she’s a genius salesperson, so she sells a
    lot). Help Eve count the money her customers give her by creating a program that
    asks Eve to enter the number of dollars, quarters, dimes, nickels, and pennies
    she earned. Then have it convert them into a total dollar amount, and display
    that amount in dollars and cents (like $23.34). Try your program using the following
    amounts to make sure it works:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 伊芙的妈妈正在举办车库销售。因为伊芙想赚些钱，她在车道上摆了张桌子，卖柠檬水、饼干和她亲手做的贺卡（她是个天才销售员，所以卖得很好）。通过编写一个程序，帮助伊芙计算顾客给她的钱，程序会要求伊芙输入她赚到的美元、quarters（四分之一美元硬币）、dimes（十分之一美元硬币）、nickels（五分之一美元硬币）和
    pennies（分币）的数量。然后，程序会将这些钱转换成总金额，以美元和分（比如 $23.34）的形式显示出来。尝试使用以下金额来测试你的程序，确保它能正常工作：
- en: a. 35 dollars, 3 quarters, 3 pennies
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 35美元，3个 quarter（四分之一美元硬币），3个 penny（分币）
- en: b. 2 dollars, 1 quarter, 2 pennies
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. 2美元，1个 quarter（四分之一美元硬币），2个 penny（分币）
- en: c. 10 dollars, 1 nickel, 3 pennies
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. 10美元，1个 nickel（五分之一美元硬币），3个 penny（分币）
- en: d. 6 dollars, 1 quarter, 3 pennies
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. 6美元，1个 quarter（四分之一美元硬币），3个 penny（分币）
- en: e. 3 dollars, 2 quarters, 1 dime, 1 nickel, 3 pennies
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: e. 3美元，2个 quarter（四分之一美元硬币），1个 dime（十分之一美元硬币），1个 nickel（五分之一美元硬币），3个 penny（分币）
- en: f. 1 dollar, 2 dimes, 1 nickel, 4 pennies
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: f. 1美元，2个 dime（十分之一美元硬币），1个 nickel（五分之一美元硬币），4个 penny（分币）
