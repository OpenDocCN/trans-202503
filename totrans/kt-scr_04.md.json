["```\nimport javafx.application.Application\nimport javafx.geometry.Pos\nimport javafx.stage.Stage\nimport javafx.scene.Scene\nimport javafx.scene.layout.VBox\nimport javafx.scene.text.Font\nimport javafx.scene.text.Text\n\nclass HelloWorld : Application() {\n  ❶ override fun start(primaryStage: Stage) {\n        primaryStage.title = \"Primary Stage\"\n        val text = Text(\"Hello, world!\")\n        text.font = Font.font(\"Verdana\", 20.0)\n\n        val vbx = VBox(text)\n        vbx.alignment = Pos.CENTER\n        val scene = Scene(vbx, 300.0, 300.0)\n        primaryStage.scene = scene\n        primaryStage.show()\n    }\n}\n\nfun main() {\n  ❷ Application.launch(HelloWorld::class.java)\n}\n```", "```\nval myStage = Stage()\nmyStage.title  = \"This is a secondary window\"\nmyStage.width  = 800.0 // in pixels\nmyStage.height = 600.0 // in pixels\n```", "```\nval root = Group()\nval scene = Scene(root, 800.0, 600.0)\n```", "```\n// Create a rectangle object (child node).\nval rectangle = Rectangle(100.0, 100.0, Color.BLUE)\n\n// Pass the child node to its parent node.\nval root = Group(rectangle)\n```", "```\n// Create a Button object with the text \"Click me\".\nval button = Button(\"Click me\")\n\n// Create a Pane object.\nval pane = Pane()\n\n// Add the Button as a child node to the Pane.\npane.children.add(button)\n```", "```\nimport javafx.application.Application\nimport javafx.geometry.Side\nimport javafx.scene.Scene\nimport javafx.scene.chart.CategoryAxis\nimport javafx.scene.chart.BarChart\nimport javafx.scene.chart.NumberAxis\nimport javafx.scene.chart.XYChart\nimport javafx.stage.Stage\n\nclass BarChartExample : Application() {\n    override fun start(primaryStage: Stage) {\n      ❶ primaryStage.title = \"Bar Chart Example\"\n\n      ❷ // Create XYAxis objects and set their properties.\n        val xAxis = CategoryAxis()\n        val yAxis = NumberAxis()\n        xAxis.label = \"Months\"\n        yAxis.label = \"Sales in thousands of dollars\"\n\n      ❸ // Create BarChart object and set its properties.\n        val barChart = BarChart(xAxis, yAxis)\n        barChart.title = \"Monthly Sales\"\n        barChart.legendSide = Side.TOP\n\n      ❹ // Create Series, populate with data, and assign to chart.\n        val dataSeries = XYChart.Series<String, Number>()\n        dataSeries.name = \"Q1 Data for ABC & Co.\"\n      ❺ getData(dataSeries)\n        barChart.data.add(dataSeries)\n\n        val scene = Scene(barChart, 400.0, 400.0)\n        primaryStage.scene = scene\n        primaryStage.show()\n    }\n}\n\nfun main() {\n    Application.launch(BarChartExample::class.java)\n}\n```", "```\nfun getData(dataSeries: XYChart.Series<String, Number>) {\n    dataSeries.data.addAll(\n        XYChart.Data(\"Jan\", 150),\n        XYChart.Data(\"Feb\", 100),\n        XYChart.Data(\"Mar\", 225)\n    )\n}\n```", "```\nimport javafx.application.Application\nimport javafx.geometry.Side\nimport javafx.scene.Scene\nimport javafx.scene.chart.LineChart\nimport javafx.scene.chart.NumberAxis\nimport javafx.scene.chart.XYChart\nimport javafx.stage.Stage\n\nclass LineChartExample : Application() {\n    override fun start(primaryStage: Stage) {\n        primaryStage.title = \"Multiseries Line Chart Example\"\n\n        // Create XYAxis objects and set their properties.\n        val xAxis = NumberAxis()\n        xAxis.label = \"Age\"\n        val yAxis = NumberAxis()\n        yAxis.label = \"Height (inches)\"\n\n      ❶ // Adjust tick interval and lower/upper bounds.\n        xAxis.isAutoRanging = false\n        xAxis.tickUnit = 5.0    // custom tick interval\n        xAxis.lowerBound = 0.0  // minimum value for x-axis\n        xAxis.upperBound = 35.0 // maximum value for x-axis\n\n        yAxis.isAutoRanging = false\n        yAxis.lowerBound = 20.0 // minimum value for y-axis\n        yAxis.upperBound = 75.0 // maximum value for y-axis\n\n        // Create LineChart object and set its properties.\n      ❷ val lineChart = LineChart(xAxis, yAxis)\n        lineChart.title = \"Average Heights at Different Ages\"\n        lineChart.legendSide = Side.TOP\n\n        // Create Series, populate with data, and assign to chart.\n        val maleData = XYChart.Series<Number, Number>()\n        maleData.name = \"Male\"\n      ❸ getMaleData(maleData)\n        val femaleData = XYChart.Series<Number, Number>()\n        femaleData.name = \"Female\"\n      ❹ getFemaleData(femaleData)\n\n      ❺ lineChart.data.addAll(maleData, femaleData)\n\n        val scene = Scene(lineChart, 800.0, 600.0)\n        primaryStage.scene = scene\n        primaryStage.show()\n    }\n}\n\nfun main() {\n    Application.launch(LineChartExample::class.java)\n}\n```", "```\nfun getMaleData(maleData: XYChart.Series<Number, Number>) {\n    maleData.data.addAll(\n        XYChart.Data(5, 38.0),\n        XYChart.Data(10, 50.0),\n        XYChart.Data(15, 62.0),\n        XYChart.Data(20, 68.0),\n        XYChart.Data(30, 69.0)\n    )\n}\n\nfun getFemaleData(femaleData: XYChart.Series<Number, Number>) {\n    femaleData.data.addAll(\n        XYChart.Data(5, 36.0),\n        XYChart.Data(10, 48.0),\n        XYChart.Data(15, 60.0),\n        XYChart.Data(20, 64.0),\n        XYChart.Data(30, 65.0)\n    )\n}\n```", "```\nimport javafx.application.Application\nimport javafx.scene.Scene\nimport javafx.scene.canvas.Canvas\nimport javafx.scene.canvas.GraphicsContext\nimport javafx.scene.layout.Pane\nimport javafx.scene.paint.Color\nimport javafx.stage.Stage\n\nclass CanvasExample_1 : Application() {\n    override fun start(primaryStage: Stage) {\n        primaryStage.title = \"Canvas Example\"\n\n      ❶ val canvas = Canvas(400.0, 200.0)\n      ❷ val gc = canvas.getGraphicsContext2D()\n        val pane = Pane(canvas)\n        val scene = Scene(pane)\n        primaryStage.setScene(scene)\n        primaryStage.show()\n\n      ❸ drawRectangle(gc)\n    }\n    fun drawRectangle(gc: GraphicsContext) {\n      ❹ with(gc) {\n            stroke = Color.RED\n            strokeRect(100.0, 50.0, 200.0, 100.0)\n        }\n    }\n}\n\nfun main() {\n    Application.launch(CanvasExample_1::class.java)\n}\n```", "```\nimport javafx.application.Application\nimport javafx.scene.Scene\nimport javafx.scene.canvas.Canvas\nimport javafx.scene.canvas.GraphicsContext\nimport javafx.scene.layout.Pane\nimport javafx.scene.paint.Color\nimport javafx.stage.Stage\n\nimport kotlin.math.cos\nimport kotlin.math.sin\n\nclass MultiTurnSpiral : Application() {\n    override fun start(primaryStage: Stage) {\n        primaryStage.title = \"Multi-Turn Spiral\"\n\n        // Create a canvas and set its graphics context.\n        val canvas = Canvas(600.0, 600.0)\n        val gc = canvas.graphicsContext2D\n\n      ❶ primaryStage.scene = Scene(Pane(canvas))\n        primaryStage.show()\n\n        // Call helper function to draw the spiral.\n        drawMultiTurnSpiral(gc, canvas.width, canvas.height)\n    }\n\n    fun drawMultiTurnSpiral(\n        gc: GraphicsContext,\n        width: Double, height: Double) {\n        `--snip--`\n    }\n\n    fun printParams(\n        gc: GraphicsContext,\n radiusStep: Double, numCircles: Int) {\n        `--snip--`\n    }\n\n    fun drawCircle(\n        gc: GraphicsContext,\n        x: Double, y: Double, radius: Double) {\n        `--snip--`\n    }\n}\n\nfun main() {\n    Application.launch(MultiTurnSpiral::class.java)\n}\n```", "```\nfun drawMultiTurnSpiral(\n          gc: GraphicsContext,\n          width: Double, height: Double) {\n\n  ❶ // Set key parameters for the spiral.\n    val numCircles = 70  // number of circles\n    val turns = 2.0      // 360 degrees per turn\n    val maxAngle = 360.0 * turns\n    // rotation in degrees per step\n    val rotationStep = (maxAngle / numCircles)\n\n    // Ensure the circles stay inside the canvas boundaries.\n    val maxRadius = minOf(width, height) / 10.0\n    // Set the amplification factor.\n    val spacingFactor = 2.0\n    val radiusStep = (maxRadius / numCircles) * spacingFactor\n\n  ❷ printParams(gc, radiusStep, numCircles)\n\n  ❸ for (i in 0..< numCircles) {\n        val angle = i * rotationStep\n        val radius = i * radiusStep\n\n val x = (width / 2.0) + radius * cos(Math.toRadians(angle))\n        val y = (height / 2.0) + radius * sin(Math.toRadians(angle))\n\n        // Draw circles with increasing radii.\n      ❹ drawCircle(gc, x, y, radius)\n    }\n}\n```", "```\nfun printParams(gc: GraphicsContext, radiusStep: Double, numCircles: Int) {\n\n    val msg1 = \"Base radius: \" + \"%.4f\".format(radiusStep) + \" pixels\"\n    val msg2 = \"Number of shapes (circles): $numCircles\"\n    gc.fillText(msg1, 25.0, 555.0)\n    gc.fillText(msg2, 25.0, 575.0)\n}\n\nfun drawCircle(\n        gc: GraphicsContext,\n        x: Double, y: Double, radius: Double) {\n\n ❶ // Set draw parameters.\n    val topLeftX = x - radius\n    val topLeftY = y - radius\n    val pointSize = 8.0\n\n    with (gc) {\n        lineWidth = 2.0\n        stroke = Color.LIGHTBLUE\n        fill = Color.RED\n      ❷ fillOval(x – pointSize / 2, y - pointSize / 2,\n                 pointSize, pointSize)\n      ❸ strokeOval(topLeftX, topLeftY, radius * 2, radius * 2)\n    }\n}\n```", "```\n// graphics-related imports\nimport javafx.application.Application\nimport javafx.scene.Scene\nimport javafx.scene.layout.Pane\nimport javafx.scene.paint.Color\nimport javafx.scene.shape.Rectangle\nimport javafx.stage.Stage\n\n// animation-related imports\nimport javafx.animation.Transition\nimport javafx.animation.TranslateTransition\nimport javafx.util.Duration\n\nclass TransitionExample : Application() {\n    override fun start(primaryStage: Stage) {\n        primaryStage.title = \"Transition Example\"\n\n        // Create a square.\n      ❶ val square = Rectangle(50.0, 50.0, Color.RED)\n        square.y = 100.0\n        // Create a pane to hold the square.\n        val pane = Pane(square)\n\n        // Create a scene and show the stage.\n      ❷ val scene = Scene(pane, 300.0, 300.0)\n        primaryStage.scene = scene\n        primaryStage.show()\n\n        // Create a TranslateTransition class instance\n        // and set its properties.\n ❸ val transition =\n            TranslateTransition(Duration.seconds(2.0), square)\n\n        with (transition) {\n            fromX = 0.0\n            toX = pane.width - square.width\n            cycleCount = Transition.INDEFINITE\n            isAutoReverse = true\n          ❹ play()\n        }\n    }\n}\n\nfun main() {\n    Application.launch(TransitionExample::class.java)\n}\n```", "```\n// graphics-related imports\nimport javafx.application.Application\nimport javafx.scene.Scene\nimport javafx.scene.layout.StackPane\nimport javafx.scene.paint.Color\nimport javafx.scene.shape.Circle\nimport javafx.stage.Stage\n\n// animation-related imports\nimport javafx.animation.KeyFrame\nimport javafx.animation.KeyValue\nimport javafx.animation.Timeline\nimport javafx.util.Duration\n\nclass KeyframeAnimationExample : Application() {\n    override fun start(primaryStage: Stage) {\n        primaryStage.title =\n            \"Animation Example: A Growing and Shrinking Circle\"\n        // Create a circle.\n      ❶ val circle = Circle(50.0, Color.BLUE)\n\n      ❷ val root = StackPane(circle) // autocenters child node\n        val scene = Scene(root, 600.0, 600.0)\n        primaryStage.scene = scene\n        primaryStage.show()\n\n        // Create a Timeline for the animation.\n        val timeline = Timeline()\n        // Define keyframes.\n val startFrame = KeyFrame(\n                         Duration.ZERO,\n                         KeyValue(circle.radiusProperty(), 50.0))\n\n        val endFrame = KeyFrame(\n                       Duration.seconds(5.0),\n                       KeyValue(circle.radiusProperty(), 250.0))\n\n        // Add keyframes to the timeline.\n      ❸ timeline.keyFrames.addAll(startFrame, endFrame)\n\n        // Set and play the timeline.\n        with (timeline) {\n            cycleCount = Timeline.INDEFINITE\n            isAutoReverse = true\n          ❹ play()\n        }\n    }\n}\n\nfun main() {\n    Application.launch(KeyframeAnimationExample::class.java)\n}\n```", "```\n// graphics-related imports\nimport javafx.application.Application\nimport javafx.scene.layout.Pane\nimport javafx.scene.Scene\nimport javafx.scene.paint.Color\nimport javafx.scene.shape.Circle\nimport javafx.stage.Stage\n\n// animation-related imports\nimport javafx.animation.Animation\nimport javafx.animation.KeyFrame\nimport javafx.animation.Timeline\nimport javafx.util.Duration\n\nclass BouncingBall : Application() {\n    override fun start(primaryStage: Stage) {\n        primaryStage.title = \"Bouncing Red Ball\"\n      ❶ val redBall = Circle(250.0, 200.0,\n            30.0, Color.RED)\n val root = Pane(redBall)\n        val scene = Scene(root, 500.0, 400.0)\n        primaryStage.scene = scene\n        primaryStage.show()\n\n        // Call the bouncyBall method.\n      ❷ bouncyBall(redBall, scene)\n    }\n\n    fun bouncyBall(redBall: Circle, scene: Scene) {\n        // displacement parameters\n        var dx = 2\n        var dy = 2\n\n        // Timeline-KeyFrame with ActionEvent\n      ❸ val tl = Timeline()\n      ❹ val moveBall = KeyFrame(\n            Duration.seconds(0.015),\n            {\n                // Get min/max boundary coordinates.\n                val xMin = redBall.boundsInParent.minX\n                val xMax = redBall.boundsInParent.maxX\n                val yMin = redBall.boundsInParent.minY\n                val yMax = redBall.boundsInParent.maxY\n\n                // Change direction if boundary is hit/crossed.\n                if (xMin < 0 || xMax > scene.width) {\n                    dx = - dx\n                }\n                if (yMin < 0 || yMax > scene.height) {\n                    dy = - dy\n                }\n                // Continue to move.\n                redBall.translateX += dx\n                redBall.translateY += dy\n            })\n\n        with (tl) {\n          ❺ keyFrames.add(moveBall)\n            cycleCount = Animation.INDEFINITE\n          ❻ play()\n        }\n    }\n}\n\nfun main() {\n    Application.launch(BouncingBall::class.java)\n}\n```"]