["```\nPS> New-PowerLabVm -Name 'SQLSRV'\n```", "```\nPS> Install-PowerLabOperatingSystem -VmName 'SQLSRV'\nGet-Item : Cannot find path 'C:\\Program Files\\WindowsPowerShell\\Modules\\\npowerlab\\SQLSRV.xml' because it does not exist.\nAt C:\\Program Files\\WindowsPowerShell\\Modules\\powerlab\\PowerLab.psm1:138 char:16\n+     $answerFile = Get-Item -Path \"$PSScriptRoot\\$VMName.xml\"\n+                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : ObjectNotFound: (C:\\Program File...rlab\\SQLSRV\n                              .xml:String) [Get-Item], ItemNotFoundException\n```", "```\nPS> Copy-Item -Path 'C:\\Program Files\\WindowsPowerShell\\Modules\\PowerLab\\LABDC.xml' -Destination\n'C:\\Program Files\\WindowsPowerShell\\Modules\\PowerLab\\SQLSRV.xml'\n```", "```\n<component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\"\npublicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" \n    xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <ComputerName>SQLSRV</ComputerName>\n    <ProductKey>XXXXXXXXXXXXX</ProductKey>\n</component>\n```", "```\n<UnicastIpAddresses>\n    <IpAddress wcm:action=\"add\" wcm:keyValue=\"1\">10.0.0.101</IpAddress>\n</UnicastIpAddresses>\n```", "```\nPS> Start-VM -Name SQLSRV\n```", "```\n$vmCred = Import-CliXml -Path 'C:\\PowerLab\\VMCredential.xml'\nwhile (-not (Invoke-Command -VmName SQLSRV -ScriptBlock { 1 } -Credential\n$vmCred -ErrorAction Ignore)) {\n    Start-Sleep -Seconds 10\n    Write-Host 'Waiting for SQLSRV to come up...'\n}\n```", "```\n$domainCred = Import-CliXml -Path 'C:\\PowerLab\\DomainCredential.xml'\n$addParams = @{\n    DomainName = 'powerlab.local'\n    Credential = $domainCred\n    Restart    = $true\n    Force      = $true\n}\nInvoke-Command -VMName SQLSRV -ScriptBlock { Add-Computer ❶@using:addParams } -Credential $vmCred\n```", "```\n❶ while (Invoke-Command -VmName SQLSRV -ScriptBlock { 1 } -Credential $vmCred \n   -ErrorAction Ignore) {\n    ❷ Start-Sleep -Seconds 10\n    ❸ Write-Host 'Waiting for SQLSRV to go down...'\n}\n\n❶ while (-not (Invoke-Command -VmName SQLSRV -ScriptBlock { 1 } -Credential \n   $domainCred -ErrorAction Ignore)) {\n    ❷ Start-Sleep -Seconds 10\n    ❸ Write-Host 'Waiting for SQLSRV to come up...'\n}\n```", "```\n$session = New-PSSession -VMName 'SQLSRV' -Credential $domainCred\n```", "```\n$sqlServerAnswerFilePath = \"C:\\Program Files\\WindowsPowerShell\\Modules\\\nPowerLab\\SqlServer.ini\"\n$tempFile = Copy-Item -Path $sqlServerAnswerFilePath -Destination \"C:\\Program\nFiles\\WindowsPowerShell\\Modules\\PowerLab\\temp.ini\" -PassThru\n```", "```\n$configContents = Get-Content -Path $tempFile.FullName -Raw\n$configContents = $configContents.Replace('SQLSVCACCOUNT=\"\"', 'SQLSVCACCOUNT=\"PowerLabUser\"')\n$configContents = $configContents.Replace('SQLSVCPASSWORD=\"\"', 'SQLSVCPASSWORD=\"P@$$w0rd12\"')\n$configContents = $configContents.Replace('SQLSYSADMINACCOUNTS=\"\"', 'SQLSYSADMINACCOUNTS=\n\"PowerLabUser\"')\nSet-Content -Path $tempFile.FullName -Value $configContents\n```", "```\n$copyParams = @{\n    Path        = $tempFile.FullName\n    Destination = 'C:\\'\n    ToSession   = $session\n}\nCopy-Item @copyParams\nRemove-Item -Path $tempFile.FullName -ErrorAction Ignore\nCopy-Item -Path 'C:\\PowerLab\\ISOs\\en_sql_server_2016_standard_x64_dvd_8701871.iso' \n-Destination 'C:\\' -Force -ToSession $session\n```", "```\n$icmParams = @{\n    Session      = $session\n    ArgumentList = $tempFile.Name\n    ScriptBlock  = {\n        $image = Mount-DiskImage -ImagePath 'C:\\en_sql_server_2016_standard_x64_dvd_8701871\n        .iso' -PassThru ❶\n        $installerPath = \"$(($image | Get-Volume).DriveLetter):\"\n        $null = & \"$installerPath\\setup.exe\" \"/CONFIGURATIONFILE=C:\\$($using:tempFile.Name)\" ❷\n        $image | Dismount-DiskImage ❸\n    }\n}\nInvoke-Command @icmParams\n```", "```\n$scriptBlock = { Remove-Item -Path 'C:\\en_sql_server_2016_standard_x64_dvd\n_8701871.iso', \"C:\\$($using:tempFile.Name)\" -Recurse -ErrorAction Ignore }\nInvoke-Command -ScriptBlock $scriptBlock -Session $session\n$session | Remove-PSSession\n```", "```\nfunction New-PowerLabSqlServer {\n    [CmdletBinding()]\n    param\n    (\n\n        [Parameter(Mandatory)]\n        [string]$Name,\n\n        [Parameter(Mandatory)]\n        [pscredential]$DomainCredential,\n\n        [Parameter(Mandatory)]\n        [pscredential]$VMCredential,\n\n        [Parameter()]\n        [string]$VMPath = 'C:\\PowerLab\\VMs',\n\n        [Parameter()]\n        [int64]$Memory = 2GB,\n\n        [Parameter()]\n        [string]$Switch = 'PowerLab',\n\n        [Parameter()]\n        [int]$Generation = 2,\n\n        [Parameter()]\n        [string]$DomainName = 'powerlab.local',\n\n        [Parameter()]\n        [string]$AnswerFilePath = \"C:\\Program Files\\WindowsPowerShell\\Modules\\PowerLab\n        \\SqlServer.ini\"\n    )\n\n    ## Build the VM\n    $vmparams = @{ \n        Name       = $Name\n        Path       = $VmPath\n        Memory     = $Memory\n        Switch     = $Switch\n        Generation = $Generation\n    }\n    New-PowerLabVm @vmParams\n    Install-PowerLabOperatingSystem -VmName $Name\n    Start-VM -Name $Name\n    Wait-Server -Name $Name -Status Online -Credential $VMCredential\n    $addParams = @{\n        DomainName = $DomainName\n        Credential = $DomainCredential\n        Restart    = $true\n        Force      = $true\n Invoke-Command -VMName $Name -ScriptBlock { Add-Computer @using:addParams } -Credential\n    $VMCredential\n    Wait-Server -Name $Name -Status Offline -Credential $VMCredential\n    Wait-Server -Name $Name -Status Online -Credential $DomainCredential\n    $tempFile = Copy-Item -Path $AnswerFilePath\n    -Destination \"C:\\Program Files\\WindowsPowerShell\\Modules\\PowerLab\\temp.ini\" -PassThru\n\n    Install-PowerLabSqlServer -ComputerName $Name -AnswerFilePath $tempFile.FullName\n}\n```", "```\nfunction Install-PowerLabSqlServer {\n    ❶ param\n    (\n\n        [Parameter(Mandatory)]\n        [string]$ComputerName,\n\n        [Parameter(Mandatory)]\n        [pscredential]$DomainCredential,\n\n        [Parameter(Mandatory)]\n        [string]$AnswerFilePath,\n\n        [Parameter()]\n        [string]$IsoFilePath = 'C:\\PowerLab\\ISOs\\en_sql_server_2016_standard\n        _x64_dvd_8701871.iso'\n    )\n\n    try {\n        --snip--\n\n     ❷ ## Test to see if SQL Server is already installed\n        if (Invoke-Command -Session $session\n        -ScriptBlock { Get-Service -Name 'MSSQLSERVER' -ErrorAction Ignore }) {\n            Write-Verbose -Message 'SQL Server is already installed'\n        } else {\n\n         ❸ PrepareSqlServerInstallConfigFile -Path $AnswerFilePath\n --snip--\n    } catch {\n        $PSCmdlet.ThrowTerminatingError($_)\n    }\n}\n```", "```\nfunction PrepareSqlServerInstallConfigFile {\n    [CmdletBinding()]\n    param\n    (\n\n        [Parameter(Mandatory)]\n        [string]$Path,\n\n        [Parameter()]\n        [string]$ServiceAccountName = 'PowerLabUser',\n\n        [Parameter()]\n        [string]$ServiceAccountPassword = 'P@$$w0rd12',\n\n        [Parameter()]\n        [string]$SysAdminAccountName = 'PowerLabUser'\n    )\n\n    $configContents = Get-Content -Path $Path -Raw\n    $configContents = $configContents.Replace('SQLSVCACCOUNT=\"\"',\n    ('SQLSVCACCOUNT=\"{0}\"' -f $ServiceAccountName))\n    $configContents = $configContents.Replace('SQLSVCPASSWORD=\"\"',\n    ('SQLSVCPASSWORD=\"{0}\"' -f $ServiceAccountPassword))\n    $configContents = $configContents.Replace('SQLSYSADMINACCOUNTS=\"\"',\n    ('SQLSYSADMINACCOUNTS=\"{0}\"' -f $SysAdminAccountName))\n    Set-Content -Path $Path -Value $configContents\n}\n```", "```\nPS> $vmCred = Import-CliXml -Path 'C:\\PowerLab\\VMCredential.xml'\nPS> $domainCred = Import-CliXml -Path 'C:\\PowerLab\\DomainCredential.xml'\nPS> New-PowerLabSqlServer -Name SQLSRV -DomainCredential $domainCred -VMCredential $vmCred\n```", "```\nPS> Invoke-Pester 'C:\\PowerShellForSysAdmins\\Part II\\Creating and Configuring\nSQL Servers\\Creating and Configuring SQL Servers.Tests.ps1'\n\nDescribing SQLSRV\n   Context SQL Server installation\n    [+] SQL Server is installed 4.33s\n   Context SQL Server configuration\n    [+] PowerLabUser holds the sysadmin role 275ms\n    [+] the MSSQLSERVER is running under the PowerLabUser account 63ms\nTests completed in 6.28s\nPassed: 3 Failed: 0 Skipped: 0 Pending: 0 Inconclusive: 0\n```"]