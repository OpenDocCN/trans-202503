["```\npackage echo\n\nimport (\n    \"context\"\n    \"net\"\n)\n\nfunc echoServerUDP(1ctx context.Context, addr string) (net.Addr, error) {\n    s, err := 2net.ListenPacket(\"udp\", addr)\n    if err != nil {\n        return nil, fmt.Errorf(\"binding to udp %s: %w\", addr, err)\n    }\n\n    3 go func() {\n        go func() {\n            4 <-ctx.Done()\n            _ = s.Close()\n        }()\n\n        buf := make([]byte, 1024)\n for {\n            n, 5clientAddr, err := 6s.ReadFrom(buf) // client to server\n            if err != nil {\n                return\n            }\n\n            _, err = 7s.WriteTo(buf[:n], 8clientAddr) // server to client\n            if err != nil {\n                return\n            }\n        }\n    }()\n\n    return s.LocalAddr(), nil\n}\n```", "```\npackage echo\n\nimport (\n    \"bytes\"\n    \"context\"\n    \"net\"\n    \"testing\"\n)\n\nfunc TestEchoServerUDP(t *testing.T) {\n    ctx, cancel := context.WithCancel(context.Background())\n    1 serverAddr, err := echoServerUDP(ctx, \"127.0.0.1:\")\n    if err != nil {\n        t.Fatal(err)\n    }\n    defer cancel()\n\n    2 client, err := net.ListenPacket(\"udp\", \"127.0.0.1:\")\n    if err != nil {\n        t.Fatal(err)\n    }\n    defer func() { _ = client.Close() }()\n\n    msg := []byte(\"ping\")\n    _, err = 3client.WriteTo(msg, serverAddr)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    buf := make([]byte, 1024)\n    n, 4addr, err := 5client.ReadFrom(buf)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    if addr.String() != serverAddr.String() {\n        t.Fatalf(\"received reply from %q instead of %q\", addr, serverAddr)\n    }\n\n if !bytes.Equal(msg, buf[:n]) {\n        t.Errorf(\"expected reply %q; actual reply %q\", msg, buf[:n])\n    }\n}\n```", "```\npackage echo\n\nimport (\n    \"bytes\"\n    \"context\"\n    \"net\"\n    \"testing\"\n)\n\nfunc TestListenPacketUDP(t *testing.T) {\n    ctx, cancel := context.WithCancel(context.Background())\n    1 serverAddr, err := echoServerUDP(ctx, \"127.0.0.1:\")\n    if err != nil {\n        t.Fatal(err)\n    }\n    defer cancel()\n\n    2 client, err := net.ListenPacket(\"udp\", \"127.0.0.1:\")\n    if err != nil {\n        t.Fatal(err)\n    }\n    defer func() { _ = client.Close() }()\n```", "```\n`--snip--`\n\n    1 interloper, err := net.ListenPacket(\"udp\", \"127.0.0.1:\")\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    interrupt := []byte(\"pardon me\")\n    2 n, err := interloper.WriteTo(interrupt, client.LocalAddr())\n    if err != nil {\n        t.Fatal(err)\n    }\n    _ = interloper.Close()\n\n    if l := len(interrupt); l != n {\n        t.Fatalf(\"wrote %d bytes of %d\", n, l)\n    }\n```", "```\n`--snip--`\n\n    ping := []byte(\"ping\")\n    _, err = 1client.WriteTo(ping, serverAddr)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    buf := make([]byte, 1024)\n    n, addr, err := 2client.ReadFrom(buf)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    if !bytes.Equal(3interrupt, buf[:n]) {\n        t.Errorf(\"expected reply %q; actual reply %q\", interrupt, buf[:n])\n    }\n\n    if addr.String() != interloper.LocalAddr().String() {\n        t.Errorf(\"expected message from %q; actual sender is %q\",\n            interloper.LocalAddr(), addr)\n    }\n\n    n, addr, err = client.ReadFrom(buf)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    if !bytes.Equal(4ping, buf[:n]) {\n        t.Errorf(\"expected reply %q; actual reply %q\", ping, buf[:n])\n    }\n\n    5 if addr.String() != serverAddr.String() {\n        t.Errorf(\"expected message from %q; actual sender is %q\",\n            serverAddr, addr)\n    }\n}\n```", "```\npackage echo\n\nimport (\n    \"bytes\"\n    \"context\"\n    \"net\"\n    \"testing\"\n    \"time\"\n)\n\nfunc TestDialUDP(t *testing.T) {\n    ctx, cancel := context.WithCancel(context.Background())\n    1 serverAddr, err := echoServerUDP(ctx, \"127.0.0.1:\")\n    if err != nil {\n        t.Fatal(err)\n    }\n    defer cancel()\n\n    client, err := 2net.Dial(\"udp\", serverAddr.String())\n    if err != nil {\n        t.Fatal(err)\n    }\n    defer func() { _ = client.Close() }()\n```", "```\n`--snip--`\n\n    interloper, err := net.ListenPacket(\"udp\", \"127.0.0.1:\")\n    if err != nil {\n        t.Fatal(err)\n    }\n\n interrupt := []byte(\"pardon me\")\n    1 n, err := interloper.WriteTo(interrupt, client.LocalAddr())\n    if err != nil {\n        t.Fatal(err)\n    }\n    _ = interloper.Close()\n\n    if l := len(interrupt); l != n {\n        t.Fatalf(\"wrote %d bytes of %d\", n, l)\n    }\n```", "```\n`--snip--`\n\n    ping := []byte(\"ping\")\n    _, err = 1client.Write(ping)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    buf := make([]byte, 1024)\n    n, err = 2client.Read(buf)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    if !bytes.Equal(ping, buf[:n]) {\n        t.Errorf(\"expected reply %q; actual reply %q\", ping, buf[:n])\n    }\n\n    err = 3client.SetDeadline(time.Now().Add(time.Second))\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    _, err = 4client.Read(buf)\n    if err == nil {\n        t.Fatal(\"unexpected packet\")\n    }\n}\n```", "```\n$ **ping -M** 1**do -s** 2**1500 1.1.1.1**\nPING 1.1.1.1 (1.1.1.1) 1500(31528) bytes of data.\nping: sendmsg: 4Message too long\n```", "```\n$ **ping -M do -s 1472 1.1.1.1**\nPING 1.1.1.1 (1.1.1.1) 1472(1500) bytes of data.\n1480 bytes from 1.1.1.1: icmp_seq=1 ttl=59 time=11.8 ms\n```", "```\nC:\\>**ping -f -l 1500 1.1.1.1**\n```", "```\n$ **ping -D -s 1500 1.1.1.1**\n```"]