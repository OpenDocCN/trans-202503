- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 30 ODDS AND ENDS
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 30 杂项内容
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: Throughout this book, I’ve endeavored to write short, concise chapters about
    pointed topics, while introducing a few related commands along the way. In this
    chapter, I’ll discuss a few interesting topics that couldn’t find a home in any
    of the other chapters and were too short to constitute chapters of their own,
    but these topics are no less important or helpful than the others.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我努力编写简短、简洁的章节，针对具体话题进行讨论，同时在过程中介绍一些相关的命令。在本章中，我将讨论一些无法归类到其他章节的有趣话题，这些话题太短，无法单独成章，但它们的重要性和实用性丝毫不逊色于其他内容。
- en: With these odds and ends, you’ll learn how to sort files and interrogate the
    registry for useful information. You’ll also learn how to retrieve and set the
    attributes of files and directories, and I’ll discuss bit manipulation to round
    out the book’s coverage of Batch arithmetic.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些杂项内容中，你将学习如何排序文件并查询注册表中的有用信息。你还将学习如何检索和设置文件和目录的属性，我还将讨论位操作，以完善本书对批处理运算的覆盖。
- en: Sorting Files
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 排序文件
- en: 'The sort command does exactly what you would likely expect it to do; it sorts
    input files into output files. To demonstrate, consider a small file containing
    the names of the first eight future captains of the starship *Enterprise*, listed
    in the order in which they’ll serve in the post. The first 15 bytes contain a
    first name, followed by one byte for a middle initial (if they use a middle initial,
    and only one does). The last name starts in byte 17 and may or may not be followed
    by a few trailing spaces:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 排序命令完全符合你的预期；它将输入文件排序为输出文件。为了演示，假设有一个小文件，其中包含未来八位星际舰队*企业号*船长的名字，按他们担任船长的顺序列出。前15个字节包含一个名字，后面跟着一个字节作为中间名首字母（如果有的话，只有一位船长使用了中间名）。姓氏从字节17开始，后面可能跟着一些空格：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '(*Star Trek* is famous for its alternate universes and timelines, but this
    is the list for *our* universe with one significant omission. Spock, or Mr. Spock,
    was left off the list for two reasons. First and foremost, he has only one name,
    which is neither a first nor a last name, but sometimes treated as either, hopelessly
    complicating the format of the data file. Second, he was captain for only about
    three minutes of screen time at the beginning of *Star Trek II: The Wrath of Khan*.
    As seriously as I take getting every fact about Batch as accurate as possible,
    I also strive to stay true to the *Star Trek* canon.)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: (*星际迷航*以其平行宇宙和时间线著称，但这是*我们*宇宙中的船长名单，且有一项重要遗漏。斯波克，或者说斯波克先生，未列入名单有两个原因。首先，最主要的是他只有一个名字，这个名字既不是名字也不是姓氏，而有时被当作名字或姓氏，这使得数据文件的格式变得复杂。其次，他作为船长的时间在*星际迷航II：可汗的愤怒*的开头只有大约三分钟。尽管我非常注重每个批处理事实的准确性，但我也力求忠于*星际迷航*的正史。)
- en: 'The following command accepts the file as its first argument, and the /O option
    precedes and defines the *output* file that follows it:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将文件作为第一个参数接受，/O 选项紧接着并定义了其后的*输出*文件：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The command very easily sorts the small input file into an output file of the
    same size. Here’s the complete contents of the *SortedByName.txt* file following
    the execution of the prior command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令可以非常轻松地将小型输入文件排序到大小相同的输出文件中。以下是执行前述命令后，*SortedByName.txt* 文件的完整内容：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The captains are sorted by their first names, because the sort command starts
    sorting at the first byte of the record by default. If two captains had shared
    the same first name, they would have been sorted on middle initials and finally
    on last names, but we can alter the initial character of the sort easily with
    the /+ option. The following command starts sorting in byte 17 where the last
    name starts:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些船长按名字排序，因为排序命令默认从记录的第一个字节开始排序。如果有两个船长的名字相同，他们将按中间名首字母排序，最后按姓氏排序，但我们可以通过 /+
    选项轻松改变排序的起始字符。以下命令从字节17开始排序，这是姓氏的起始位置：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The *SortedByLastName.txt* file is sorted by last name, as its name more than
    suggests:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*SortedByLastName.txt* 文件按姓氏排序，正如其名称所示：'
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The command has a few other useful options for customizing sorts. The /R option
    *reverses* the order of the sort, so Pike would have come first and April last
    if you had added /R to the last command. The /UNIQ option writes out only *unique*
    lines, which is another way of saying that it drops duplicate records. If some
    records in the input file might exceed the default maximum length of 4,096 bytes,
    use /REC to define a different maximum *record* length up to 65,535 bytes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令还有一些其他有用的选项，用于自定义排序。/R 选项会*反转*排序顺序，因此如果你在上一个命令中添加了 /R，Pike 会排在第一，April 会排在最后。/UNIQ
    选项仅输出*唯一*的行，换句话说，它会删除重复的记录。如果输入文件中的某些记录可能超过默认的最大长度 4,096 字节，可以使用 /REC 来定义不同的最大*记录*长度，最大为
    65,535 字节。
- en: NOTE
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*I must state my displeasure with any option, parameter, or setting denoted
    by a single letter O; users will invariably enter a zero by mistake. After a blunder
    in my coding youth, I stay away from this and other ambiguous characters (I and
    l), but unfortunately, this is what we have with the sort command.*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*我必须声明我对任何由单个字母 O 表示的选项、参数或设置的反感；用户总是会因错误而输入零。在我年轻时的编码失误之后，我避免使用这种以及其他含糊不清的字符（如
    I 和 l），但不幸的是，sort 命令就是这样。*'
- en: The performance of the sort command is far from great on large files, and you
    can’t define multiple sort fields, but the command offers an easy way to perform
    simple sorts on small-to-medium-sized files.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理大文件时，sort 命令的性能远不如商业工具，而且不能定义多个排序字段，但该命令提供了一个简便的方法，可以对小型到中型文件进行简单排序。
- en: Commercially available sort utilities are much faster and offer far more functionality
    than the sort command. With a little effort, you can set up a bat file to execute
    one or the other depending on whether a utility is registered on a machine. For
    instance, the bat file can execute a commercial sort utility, such as Syncsort,
    if it exists; if not, it will execute the slower but still functional sort command.
    In this way, you’ll reap the benefits of the faster sort utility on the machines
    where it’s registered, but the primary challenge in this plan is determining whether
    the utility is installed and registered on a particular machine. Conveniently,
    this leads directly to our next topic.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 商用的排序工具比 sort 命令要快得多，并且提供更多的功能。通过一点努力，你可以设置一个批处理文件，根据工具是否在机器上注册来执行不同的命令。例如，如果存在商业排序工具（如
    Syncsort），批处理文件可以执行它；如果不存在，则会执行较慢但仍然有效的 sort 命令。通过这种方式，你可以在已注册工具的机器上受益于更快的排序工具，但这个计划的主要挑战在于确定工具是否已安装并注册在特定的机器上。方便的是，这直接引出了我们的下一个话题。
- en: The Windows Registry
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows 注册表
- en: The Windows Registry is a hierarchical database storing configuration settings
    and options for the operating system and all installed applications. It’s structured
    similarly to Windows itself with what looks like a folder structure, but each
    apparent folder is really a registry key one or more levels beneath a root key
    or hive.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 注册表是一个层次结构的数据库，存储操作系统和所有已安装应用程序的配置设置和选项。它的结构类似于 Windows 本身，看起来像是一个文件夹结构，但每个看似文件夹的地方实际上是一个注册表键，位于根键或树干下的一个或多个级别。
- en: If an application is installed on a particular computer, you can find information
    about that application in the registry. The existence or lack of that information
    on other machines indicates whether the application is installed on that particular
    computer, and we can determine this with a few lines of Batch code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某个应用程序已安装在特定的计算机上，你可以在注册表中找到有关该应用程序的信息。其他机器是否存在该信息，就能判断该应用程序是否安装在该计算机上，我们可以通过几行批处理代码来确定这一点。
- en: For instance, if Syncsort is installed on a Windows computer, it has a registry
    key in the registry, and eventually we’ll interrogate the registry for that key
    associated with the application with some Batch code. If we find it, Syncsort
    is installed; if we don’t find it, it isn’t installed. But before we can use that
    logic, we need to know the registry key associated with the application. The best
    way to find the key is to look for it in the registry of a computer where you
    know the software (in this example, Syncsort) is installed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果 Syncsort 已安装在 Windows 计算机上，它在注册表中有一个注册表键，最终我们将通过一些批处理代码查询与该应用程序相关的注册表键。如果找到该键，则说明
    Syncsort 已安装；如果未找到，则说明未安装。但在使用这一逻辑之前，我们需要知道与该应用程序相关的注册表键。找到该键的最佳方法是查找已安装该软件（在此示例中为
    Syncsort）计算机的注册表。
- en: Exploring the Registry
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 探索注册表
- en: 'The regedit command, which stands for *Registry Editor*, offers a portal into
    the registry that looks a bit like Windows Explorer. At the command prompt, enter
    the following and press ENTER:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: regedit 命令，代表 *注册表编辑器*，提供了一个类似于 Windows 资源管理器的入口，允许你浏览注册表。在命令提示符下，输入以下命令并按回车键：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The Registry Editor should open.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注册表编辑器应该会打开。
- en: WARNING
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '*On second thought, hold off a minute. When first using this editor, I felt
    as though I had stumbled into a secret room behind a trapdoor in an old mansion,
    but the potential to do some damage exists. There’s no need to be paralyzed with
    fear, but unless you have a deep understanding of the registry, don’t delete or
    modify anything from inside the Registry Editor. Caution is a must, but investigating
    the registry can be illuminating even if much of the data is cryptic.*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*再想一想，稍等一下。当我第一次使用这个编辑器时，感觉就像是闯进了一座老宅子里的一个秘密房间，通过一个陷阱门进入，但这里确实有做出一些破坏的潜力。无需因此而感到害怕，但除非你对注册表有深刻的理解，否则不要在注册表编辑器中删除或修改任何内容。谨慎是必须的，但即使许多数据是晦涩难懂的，调查注册表也能带来启示。*'
- en: All of the software loaded onto a computer is in the registry under *HKEY_LOCAL_MACHINE\SOFTWARE*,
    so this is the first place to look for an application. If one of the many keys
    under the *SOFTWARE* key isn’t obviously for the product in question, you can
    also right-click the *HKEY _LOCAL_MACHINE* root key or hive, select **FIND**,
    enter the application name or any other search string, and press ENTER. The first
    key to match the string appears, and pressing F3 takes you to the next matching
    key.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机上加载的所有软件都位于 *HKEY_LOCAL_MACHINE\SOFTWARE* 下，因此这是查找应用程序的第一个地方。如果 *SOFTWARE*
    键下的许多键中没有一个显然是该产品的，你还可以右键点击 *HKEY_LOCAL_MACHINE* 根键或根 hive，选择 **查找**，输入应用程序名称或其他搜索字符串，然后按回车键。第一个匹配该字符串的键将出现，按
    F3 可以跳转到下一个匹配的键。
- en: 'For the sake of this demonstration, assume that we find the following registry
    key for the application in question:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，我们假设找到了下列应用程序的注册表键：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The regedit command is one of the few commands you’ll find in this book that’s
    used almost exclusively at the command prompt and is of little use inside a bat
    file. If you were to use it in a bat file, it would simply open the Registry Editor
    and pause the execution of the bat file until a human closes the Editor. But with
    this command and a little work, we now have the registry key. What we need next
    is some Batch code that can determine whether this key exists in the registry
    of other computers.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: regedit 命令是本书中为数不多的几乎专门在命令提示符下使用的命令之一，在 bat 文件中几乎没有用处。如果你在 bat 文件中使用它，它将仅仅打开注册表编辑器，并暂停
    bat 文件的执行，直到用户关闭编辑器。但是，通过这个命令和一点努力，我们现在已经得到了注册表键。接下来我们需要一些 Batch 代码，用来判断这个键是否存在于其他计算机的注册表中。
- en: Querying the Registry
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 查询注册表
- en: The solution to this challenge is the reg command, which simply stands for *registry*.
    From a bat file, the reg command can do quite a bit of damage in the registry
    in its own right. If you go to the help for this command, you’ll see that it sports
    several operations that can manipulate the registry, including add, delete, copy,
    and import, that someone with ill intent could easily exploit to build a bat virus.
    It’s important to know that these commands exist but use them only if you truly
    and fully understand the registry and any possible impacts of your actions. I’ll
    be strictly focusing on reading from or querying the registry—that is, performing
    the query operation of the reg command.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 解决此挑战的方法是 reg 命令，reg 简单代表 *注册表*。从 bat 文件中，reg 命令本身就可以在注册表中做出相当大的修改。如果你查看此命令的帮助信息，你会发现它拥有多个操作，可以操作注册表，包括添加、删除、复制和导入，某些心怀不轨的人可能会轻易利用这些操作来构建
    bat 病毒。了解这些命令的存在非常重要，但只有在你完全理解注册表及其可能影响的情况下，才应使用它们。我将严格聚焦于从注册表中读取或查询操作，也就是说，执行
    reg 命令的查询操作。
- en: 'The most basic reg query command accepts a possible registry key as an argument.
    Conveniently, Batch allows us to abbreviate the HKEY_LOCAL_MACHINE root key as
    HKLM. This command is looking for Syncsort in the registry:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的 reg query 命令接受一个可能的注册表键作为参数。方便的是，Batch 允许我们将 HKEY_LOCAL_MACHINE 根键缩写为 HKLM。此命令正在注册表中查找
    Syncsort：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This command returns a list of the argument’s registry key values and other
    registry keys immediately subordinate to it. More important for our purposes,
    if this command finds the argument key in the registry, it sets errorlevel to
    0; if it doesn’t find it, the value returned is 1. With this in mind, consider
    this code using the same command with conditional execution to set a boolean:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令返回参数的注册表键值和其他直接从属的注册表键的列表。对于我们的目的来说更重要的是，如果此命令在注册表中找到该参数键，它将设置 errorlevel
    为 0；如果找不到，则返回值为 1。考虑到这一点，请看使用相同命令的代码，并通过条件执行设置布尔值：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After this executes, you can reference the boolean elsewhere in the process
    flow to determine whether the particular application is installed and available.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此操作后，您可以在流程的其他地方引用该布尔值，以确定特定的应用程序是否已安装并可用。
- en: 'We can also interrogate the registry for other types of information. For instance,
    the following command uses the /V option to look for one specific registry key
    *value*, ProductName, of the current version of Windows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以查询注册表中的其他类型信息。例如，以下命令使用 /V 选项查找当前 Windows 版本的特定注册表键 *值*，ProductName：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Without the /V option, the command will likely write many key values and subordinate
    keys to stdout, but with this option in place, it writes precisely two lines of
    output if it finds the key value. One example might be:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有 /V 选项，命令可能会将许多键值和从属键写入标准输出，但如果使用此选项，它将仅在找到键值时写入两行输出。一个例子可能是：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The registry key in the argument is the first line of output, and the desired
    information about the ProductName is contained in the second.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 参数中的注册表键是输出的第一行，关于 ProductName 的所需信息包含在第二行。
- en: 'The following for /F command nicely parses out the Windows version and assigns
    it to a variable:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的 for /F 命令能够很好地解析出 Windows 版本并将其分配给一个变量：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Since the for /F command processes two lines of text and we care only about
    the second, the if command isolates just the line containing ProductName as the
    first token. (We also could have ignored the first line with the skip=1 clause
    from [Chapter 19](chapter19.xhtml).)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 for /F 命令处理两行文本，而我们只关心第二行，因此 if 命令将仅提取包含 ProductName 的那一行作为第一个令牌。（我们也可以通过
    [第19章](chapter19.xhtml) 中的 skip=1 子句忽略第一行。）
- en: Because of the asterisk in the tokens clause, the third token, %%k, contains
    everything, including embedded spaces, after the unused and discarded second token.
    Thus, the value of winVersion becomes Windows 10 Home. If you were to run this
    on a different machine, this code might assign Windows 7 Enterprise to the variable.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 tokens 子句中的星号，第三个令牌 %%k 包含从未使用和丢弃的第二个令牌之后的所有内容，包括嵌入的空格。因此，winVersion 的值变为
    Windows 10 Home。如果在另一台机器上运行此代码，它可能将 Windows 7 Enterprise 分配给该变量。
- en: Much more can and has been written about the registry. I’ve just touched on
    it here from the perspective of Batch to show how you can safely interrogate it
    for some very useful information. The help for the reg command provides far more
    information for the curious.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 关于注册表，可以写下更多的内容。我在这里仅从 Batch 的角度简单介绍了一下，展示了如何安全地查询一些非常有用的信息。reg 命令的帮助文档为好奇者提供了更多的信息。
- en: File Attributes
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件属性
- en: Just as you can use the reg command for evil as well as good, you can do the
    same with another interesting command, the attrib command. Its name is short for
    *attribute*, and it both retrieves and assigns file and directory attributes.
    Ne’er-do-wells can use this command to create and hide malignant files on a computer
    for any number of nefarious purposes, although such actions do violate the Batch
    coders’ oath to use their powers only for good.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你可以用 reg 命令做坏事一样，你也可以用另一个有趣的命令，attrib 命令，做同样的事情。它的名字是 *attribute*（属性）的缩写，既能检索也能分配文件和目录属性。坏人可以利用此命令在计算机上创建和隐藏恶意文件，以实现各种恶意目的，尽管这种行为违反了批处理编码者的誓言，誓言只将其力量用于正当用途。
- en: Retrieving Attributes
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检索属性
- en: 'If the command’s only argument is a file, it returns the file’s attributes.
    Consider this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果命令的唯一参数是文件，它将返回文件的属性。请考虑以下内容：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This command writes the following result to stdout if the file is, from left
    to right, ready to archive (A, byte 1), a system file (S, byte 4), hidden (H,
    byte 5), and read-only (R, byte 6):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件从左到右处于准备归档（A，字节 1）、系统文件（S，字节 4）、隐藏（H，字节 5）和只读（R，字节 6）状态，则此命令将以下结果写入标准输出：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The second and third bytes are always blank.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 第二和第三字节始终为空。
- en: Each position in the string represents a predefined attribute. For instance,
    the value of H in the fifth byte means that the file is hidden or that you can’t
    see it in Windows Explorer, at least by default. In contrast, a space in that
    position means that the file isn’t hidden.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串中的每个位置代表一个预定义的属性。例如，第五个字节中H的值表示文件是隐藏的，或者至少在Windows资源管理器中默认情况下无法看到它。相反，那个位置上的空格意味着文件不是隐藏的。
- en: 'To determine whether a particular file is read-only, the following for /F command
    uses the attrib command as its input:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定特定文件是否为只读，以下for /F命令使用attrib命令作为输入：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The logic in the code block sets the bReadOnly boolean to true or false based
    on the existence or nonexistence of the file attribute associated with the sixth
    byte.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块中的逻辑根据与第六个字节相关联的文件属性的存在与否，将bReadOnly布尔值设置为true或false。
- en: A file mask with wildcards can return results for multiple files. The /S option
    matches the filename or mask on all files in the directory and all of its subdirectories,
    giving the results for each. Also, the /D option handles directory attributes
    in lieu of the attributes of a file.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 带有通配符的文件掩码可以返回多个文件的结果。/S选项在目录及其所有子目录中的所有文件上匹配文件名或掩码，并返回每个文件的结果。此外，/D选项处理目录属性，而不是文件的属性。
- en: Setting Attributes
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置属性
- en: 'The command’s real power comes in its ability to reset attributes. A negative
    sign in front of the attribute character turns the attribute off, and a plus sign
    turns it on. For instance, the following command ensures that the file isn’t a
    system file (-S) and not a hidden file (-H), while also being read-only (+R):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的真正强大之处在于它能够重置属性。在属性字符前加上负号会关闭该属性，加上正号则会开启该属性。例如，以下命令确保文件不是系统文件（-S）且不是隐藏文件（-H），同时是只读的（+R）：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This can be very useful. If you create a Batch process that creates or modifies
    a file where users might have access to it and if those users are not to be trusted
    with the file, you can protect and hide it when not in use with the attrib command.
    To make the file accessible, run the command with the -H -R argument string just
    before updating the file, followed by another command with the +H +R argument
    string after the update, thus leaving the file hidden and read-only until the
    code needs it again. It’s the digital equivalent of unlocking the shed, getting
    and using the mower, putting it away, and relocking the shed until the lawn grows
    long again.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常有用。如果你创建了一个批处理程序，用于创建或修改一个用户可能会访问的文件，并且这些用户不应信任该文件，你可以使用attrib命令在不使用文件时保护并隐藏它。为了让文件可访问，在更新文件之前运行带有-H
    -R参数的命令，更新后再运行另一个带有+H +R参数的命令，从而将文件保持隐藏并只读，直到代码再次需要它。这相当于数字化的“解锁工具棚，取出并使用割草机，用完后再放回，并重新上锁，直到草又长起来”。
- en: 'Interestingly, the attrib command fails to set attributes when a file is a
    system file or a hidden file—except for the actual system and hidden file attributes
    themselves. Thus, if a file is hidden and you use +R alone in the argument string,
    the attrib command fails to set the file to read-only. However, the previous command
    with the -S -H +R argument string ensures that these two file attributes are not
    set, thus enabling the use of the last attribute. If need be, you can execute
    a second attrib command to reset the system and/or hidden attributes: +S +H. You’ll
    find the full set of attributes that you can set and unset with the help command.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，当文件是系统文件或隐藏文件时，attrib命令无法设置属性——除了系统和隐藏文件属性本身。因此，如果文件是隐藏的，并且你仅在参数字符串中使用+R，attrib命令将无法将文件设置为只读。然而，之前的命令（-S
    -H +R参数字符串）确保这些文件属性没有被设置，从而使得可以使用最后的属性。如果需要，你可以执行第二个attrib命令来重置系统和/或隐藏属性：+S +H。你可以通过help命令查看你可以设置和取消设置的完整属性列表。
- en: 'To demonstrate a final use, the del command ([Chapter 7](chapter7.xhtml)) does
    a great job of deleting a particular file, but not of deleting everything *but*
    a particular file. Assuming that your work directory doesn’t have any hidden files,
    these three lines of code delete everything except the lone file:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示最终用途，del命令（[第7章](chapter7.xhtml)）非常擅长删除特定文件，但不能删除所有文件*除了*特定文件。假设你的工作目录没有任何隐藏文件，这三行代码会删除除了那个文件之外的所有内容：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The first attrib command flips the *Noah.txt* file to hidden; then the del command
    deletes everything in the directory that isn’t hidden thanks to the /A-H option.
    Finally, the second attrib command restores the file to its prior state without
    a scratch on it and without any other files in the directory.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个attrib命令将*Noah.txt*文件改为隐藏；接着del命令通过/A-H选项删除目录中所有未隐藏的文件。最后，第二个attrib命令将文件恢复到原先的状态，没有任何损伤，也没有删除目录中的其他文件。
- en: Once you’ve mastered the art of manipulating the attributes of a file, you can
    move on to the manipulation of bits.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦掌握了操作文件属性的技巧，你就可以开始操作位了。
- en: Bit Manipulation
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 位操作
- en: 'In [Chapter 6](chapter6.xhtml), I promised to return to the last remaining
    arithmetic operators supported in Batch: three bitwise operators and two logical
    shift operators. These operators work on the bit level, so you need to make a
    cognitive shift to the binary world to understand their behavior. A *nibble*,
    or half of a byte, is comprised of four bits, each representing a decreasing power
    of two. Setting a bit’s value to 1 turns it on, and setting its value to 0 turns
    it off.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](chapter6.xhtml)中，我承诺会回到Batch支持的最后几个算术操作符：三个按位操作符和两个逻辑位移操作符。这些操作符作用于位级别，因此你需要在理解它们的行为时转向二进制世界。*半字节*，即一个字节的一半，包含四个位，每个位代表一个递减的二次方。将位的值设置为1表示打开该位，将其值设置为0则表示关闭该位。
- en: When you turn on the first or leftmost of the four bits, it represents the decimal
    8—the second bit is 4, the third bit is 2, and the final bit is 1\. Therefore,
    the binary number 0001 equals the decimal number of 1, and binary 1000 is equivalent
    to decimal 8.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开启四个位中最左边的第一个位时，它表示十进制8——第二个位是4，第三个位是2，最后一个位是1。因此，二进制0001等于十进制1，而二进制1000等于十进制8。
- en: You can derive other numbers by turning on a combination of bits. Binary 1111
    is equivalent to decimal 15—that is, 8 + 4 + 2 + 1\. The complete byte consisting
    of two nibbles has 256 unique values, but for this discussion, I’ll stay with
    the much more manageable nibble and its 16 unique values for most of the upcoming
    examples.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过开启一组位来得到其他数字。二进制1111等于十进制15——即8 + 4 + 2 + 1。由两个半字节组成的完整字节有256个独特的值，但在本讨论中，我将坚持使用更加易于管理的半字节及其16个独特值来做大多数即将出现的例子。
- en: Bitwise Operations
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 按位操作
- en: The *bitwise and* operation accepts two operands and returns a 1 in each bit
    position for which the corresponding bits of both operands are set to 1\. For
    this example, consider the decimal numbers 3 and 6\. The decimal number 3 equals
    binary 0011, having the bits for 2 and 1 turned on, and the decimal 6 equals the
    binary 0110, having the bits for 4 and 2 turned on. The only common bit set to
    1 is the third bit, which has a value of 2, so the result of a bitwise and of
    3 and 6 is binary 0010 or decimal 2.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*按位与* 操作接受两个操作数，并返回在每个位位置上，如果两个操作数的对应位都设置为1，则该位置为1。在这个例子中，考虑十进制数字3和6。十进制数字3等于二进制0011，打开了2和1的位，十进制数字6等于二进制0110，打开了4和2的位。唯一共同的设置为1的位是第三位，其值为2，所以3和6的按位与操作结果是二进制0010或十进制2。'
- en: The *bitwise or* operator looks for bits being set to 1 in *either* operand.
    There are three such bits between 3 and 6, resulting in binary 0111 or decimal
    7\. The *bitwise exclusive or* turns on the bits that *differ* in the two operands.
    Using the same numbers, only the second and fourth bits differ, so the result
    is binary 0101 or decimal 5 (that is, 4 + 1).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*按位或* 运算符会查找在*任一*操作数中被设置为1的位。在3和6之间有三个这样的位，结果是二进制0111或十进制7。*按位异或* 会开启两个操作数中*不同*的位。使用相同的数字，只有第二位和第四位不同，所以结果是二进制0101或十进制5（即4
    + 1）。'
- en: This is much easier to visualize in tabular form. [Table 30-1](#tab30-1) also
    introduces the Batch operator for each bitwise arithmetic operation.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这种操作在表格形式中更容易理解。[表格30-1](#tab30-1)还介绍了每个按位算术操作的Batch操作符。
- en: 'Table 30-1: Bitwise Arithmetic and Operators'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 表格30-1：按位算术和操作符
- en: '|  | Operator | Example |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '|  | 操作符 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Bitwise and | & | 3 & 6 = 0011 & 0110 = 0010 = 2 |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| 按位与 | & | 3 & 6 = 0011 & 0110 = 0010 = 2 |'
- en: '| Bitwise or | &#124; | 3 &#124; 6 = 0011 &#124; 0110 = 0111 = 7 |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 按位或 | &#124; | 3 &#124; 6 = 0011 &#124; 0110 = 0111 = 7 |'
- en: '| Bitwise exclusive or | ^ | 3 ^ 6 = 0011 ^ 0110 = 0101 = 5 |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 按位异或 | ^ | 3 ^ 6 = 0011 ^ 0110 = 0101 = 5 |'
- en: After grasping the machinations of bitwise logic, you might balk at the choice
    of operators. One ampersand usually terminates a command, the caret is an escape
    character, and the character used for the bitwise or is most often used to pipe
    data from one command to another (and I haven’t even mentioned conditional execution).
    Surely, you can’t use these characters in arithmetic calculations?
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'You can, but you need to take some action to ensure that these characters don’t
    trigger their other uses. There are actually three different methods, all of which
    I show in these three functionally equivalent examples of bitwise and arithmetic:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: My preference is to encase just the arithmetic in double quotes as demonstrated
    in the first example. You can also use double quotes to surround the variable
    name, the equality operator, and the arithmetic, as shown in the second example.
    Finally, you can escape the operator with a caret.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'The following demonstrates all three bitwise arithmetic operations using my
    preferred method:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: After these commands execute, bitAnd, bitOr, and bitXOr contain the values 2,
    7, and 5, respectively, the same results calculated earlier.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: This is where I usually detail the many uses for what I’ve just discussed, but
    I can’t say that I manipulate bits on a daily basis. Actually, I’ve never used
    any of the bitwise operators in Batch. In the early days of computing, coders
    would often concatenate a set of flags at the bit level to create just one condensed
    field. They could then set and retrieve the individual bits representing individual
    flags with bit manipulation.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'Cheap and plentiful memory has made this technique a distant memory, but I
    can still share one use. The following code determines whether a particular number
    is a power of two:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Only if nbr equals 0, 1, 2, 4, 8, 16, and so on, does the echo command write
    its message.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'Any number that’s a power of 2 has exactly one bit turned on, and the number
    one less than it has that bit turned off with all the bits to its right turned
    on. For instance, decimal 8 = binary 1000, and 7 = 0111\. The result of a bitwise
    and operation on these two operands is 0, because there are no common bits turned
    on or set to 1\. But if a number isn’t a power of 2, at least one corresponding
    bit is turned on in both it and the number one less than it. For instance, 6 =
    0110, and 5 = 0101; the second bit is turned on in both numbers, so the result
    of the bitwise and operation is nonzero: 4 = 0100.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Logical Shift Operations
  id: totrans-102
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Batch has two more tools for manipulating bits. The *logical left shift* operator
    shifts all of the bits in the first operand to the left by an amount dictated
    by the right operand, replacing the bits on the right with zeros. The *logical
    right shift* operator behaves similarly except that it shifts to the right and
    replaces the vacated bits on the left with zeros while discarding the same number
    of bits on the right.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the logical shift operators, both with an example:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '|  | Operator | Example |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '|  | 运算符 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Logical left shift | << | 3 << 2 = 0011 → 1100 = 12 |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| 逻辑左移 | << | 3 << 2 = 0011 → 1100 = 12 |'
- en: '| Logical right shift | >> | 9 >> 1 = 1001 → 0100 = 4 |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| 逻辑右移 | >> | 9 >> 1 = 1001 → 0100 = 4 |'
- en: The bits that the logical shift inserted into the result are shown in bold.
    The first command appends two zeros after shifting the bits two places to the
    left. The second command prepends one zero after shifting the bits one place to
    the right, while also dropping the rightmost 1 in the process.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑移位插入到结果中的位用粗体显示。第一个命令在将位向左移两位后附加了两个零。第二个命令在将位向右移一位后前置一个零，同时在过程中去掉了最右边的 1。
- en: 'The following two commands implement both of these examples in Batch:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两个命令在 Batch 中实现了这两个示例：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: (To handle the less-than and greater-than signs, we either need escape characters
    or one of the two double-quote techniques mentioned in reference to the bitwise
    operators.)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: （为了处理小于号和大于号，我们需要转义字符或前文提到的两种双引号技巧之一。）
- en: 'I’m equally nonplussed attempting to find logical shift applications because
    I’ve never used these operators in the real world. However, since Batch doesn’t
    support exponentials, we can use the logical left shift to raise a number to a
    power ... if that base is two. Think of it as a very narrowly defined power function.
    Consider these examples that compute 23 and 29:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我同样感到困惑，试图找到逻辑移位的应用，因为我在实际工作中从未使用过这些运算符。然而，由于 Batch 不支持指数运算，我们可以使用逻辑左移将一个数字提升到某个幂次……前提是这个基数是二。可以把它看作一个非常狭义的幂函数。考虑这些计算
    2³ 和 2⁹ 的示例：
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Every bit in a nibble (and a byte) represents a power of 2, so the first command
    shifts 0001 to the left 3 bits, resulting in 1000 or the decimal number 8, which
    is two cubed. The trailing set command writes the following to the console:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 每个字节中的每一位（以及字节本身）都代表 2 的幂，因此，第一个命令将 0001 向左移 3 位，得到 1000，即十进制数 8，正好是 2 的三次方。后续的
    set 命令将以下内容写入控制台：
- en: '[PRE22]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The second command uses more than one nibble in its calculation. Notice that
    a binary 1 followed by 9 zeros equals 512 or two to the ninth power.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个命令在计算中使用了多个字节。注意，二进制的 1 后跟 9 个零等于 512，即 2 的 9 次方。
- en: If you have used these operators in the wild, drop me a line and I’ll see about
    adding your application to the next edition of this book.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在实际应用中使用过这些运算符，给我留言，我会考虑将你的应用案例添加到本书的下一个版本中。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, I discussed a set of topics that I simply had to share even
    though they’re too short for chapters of their own. You learned how to sort small-to-medium-sized
    data files and how to customize that sort. I gave a brief overview of the Windows
    Registry and demonstrated how to interrogate it with a couple interesting commands.
    You also learned how to set and retrieve file attributes and how to manipulate
    bits with the bitwise and logical shift operators.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我讨论了一些话题，尽管它们太简短，无法单独成章，但我还是觉得必须分享。你学习了如何排序中小型数据文件，以及如何定制排序。我简要介绍了 Windows
    注册表，并展示了如何使用几个有趣的命令进行查询。你还学会了如何设置和获取文件属性，以及如何使用位运算符和逻辑移位运算符操作位。
- en: The next chapter might be the most important and, eventually, the most referenced
    in this book. Troubleshooting tips and testing techniques are important in any
    language, but especially in a scripting language without a compiler—and without
    an animator or debugger.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章可能是本书中最重要的一章，最终也会是被引用最多的一章。故障排除技巧和测试技术在任何编程语言中都很重要，特别是在没有编译器的脚本语言中——而且没有动画器或调试器。
