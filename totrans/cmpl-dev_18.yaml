- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">16</samp> <samp class="SANS_Dogma_OT_Bold_B_11">RUNNING
    AUTOMATED TESTS IN DOCKER</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Drop-image.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this short final chapter, you’ll write a couple of automated tests that verify
    the state of the Food Finder application. Then you’ll configure a Docker service
    to continuously run them.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll focus on evaluating the application’s header by using a snapshot test
    and mocking the user session. We won’t create tests for the other components or
    our middleware, services, or APIs. However, I encourage you to build these on
    your own. Try using browser-based end-to-end tests, with a specialized framework
    such as Cypress or Playwright, to test entire pages. You can find installation
    instructions and examples for both frameworks at [*https://<wbr>nextjs<wbr>.org<wbr>/docs<wbr>/testing*](https://nextjs.org/docs/testing).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Adding Jest to the Project</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Install the Jest libraries with npm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, configure Jest to work with our Next.js setup by creating a new file called
    *jest.config.js* containing the code in [Listing 16-1](chapter16.xhtml#Lis16-1).
    Save the file in the application’s root folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-1: The jest.config.js file'
  prefs: []
  type: TYPE_NORMAL
- en: We leverage the built-in Next.js Jest configuration, so we need to configure
    the project’s base directory to load the *config* and *.env* files into the test
    environment. Then we set the location of the module directories and the global
    test environment. We use a global setting here because our snapshot tests will
    require a DOM environment.
  prefs: []
  type: TYPE_NORMAL
- en: Now we want to be able to run the tests with npm commands. Therefore, add the
    two commands in [Listing 16-2](chapter16.xhtml#Lis16-2) to the <samp class="SANS_TheSansMonoCd_W5Regular_11">scripts</samp>
    property of the project’s *package.json* file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-2: Two commands added to the package.json file’s <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">scripts</samp>
    property'
  prefs: []
  type: TYPE_NORMAL
- en: The first command executes all available tests once, and the second continuously
    watches for file changes and then reruns the tests if it detects one.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Setting Up Docker</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To run the tests using Docker, add another service to *docker-compose.yml* that
    uses the Node.js image. On startup, this service will run <samp class="SANS_TheSansMonoCd_W5Regular_11">npm
    run testWatch</samp>, the command we just defined. In doing so, we’ll continuously
    run the tests and get instant feedback about the application’s state. Modify the
    file to match the code in [Listing 16-3](chapter16.xhtml#Lis16-3).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-3: The modified docker-compose.yml file with the jest service'
  prefs: []
  type: TYPE_NORMAL
- en: Our small service, named *jest*, uses the official Node.js Alpine image we’ve
    used previously. We set the working directory and use the <samp class="SANS_TheSansMonoCd_W5Regular_11">volumes</samp>
    property to make our code available in this container as well. Unlike our application’s
    service, however, the *jest* service sets the Node.js environment to <samp class="SANS_TheSansMonoCd_W5Regular_11">test</samp>
    and runs the <samp class="SANS_TheSansMonoCd_W5Regular_11">testWatch</samp> command.
  prefs: []
  type: TYPE_NORMAL
- en: Restart the Docker containers; the console should indicate that Jest is watching
    our files.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Writing Snapshot Tests for the Header
    Element</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As in [Chapter 8](chapter8.xhtml), create the *__tests__* folder to hold our
    test files in the application’s root directory. Then add the *header.snapshot.test.tsx*
    file containing the code in [Listing 16-4](chapter16.xhtml#Lis16-4).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 16-4: The __tests__/header.snapshot.test.tsx file'
  prefs: []
  type: TYPE_NORMAL
- en: This test should resemble those you wrote in [Chapter 8](chapter8.xhtml). Note
    that we import the <samp class="SANS_TheSansMonoCd_W5Regular_11">useSession</samp>
    hook from *next-auth/react* and then use <samp class="SANS_TheSansMonoCd_W5Regular_11">jest.mock</samp>
    to replace it in the *arrange* step of each test. By replacing the session with
    a mocked one that returns the state, we can verify that the header component behaves
    as expected for both logged-in and logged-out users. We describe the test suite
    for the <samp class="SANS_TheSansMonoCd_W5Regular_11">Header</samp> component
    by using the arrange, act, and assert pattern and verify that the rendered component
    matches the stored snapshot.
  prefs: []
  type: TYPE_NORMAL
- en: The first test case uses an empty session and the *unauthenticated* status to
    render the header in a logged-out state. The second test case uses a session with
    minimal data and sets the user’s status to *authenticated*. This lets us verify
    that an existing session shows a different user interface than an empty session
    does.
  prefs: []
  type: TYPE_NORMAL
- en: If you write additional tests, make sure to add them to the *__tests__* folder.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You’ve successfully added a few simple snapshot tests to verify that the Food
    Finder application works as intended. Using an additional Docker service, you
    can continuously verify that additional developments won’t break the application.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You’ve successfully created your first full-stack application
    with TypeScript, React, Next.js, Mongoose, and MongoDB. You’ve used Docker to
    containerize your application and Jest to test it. With the knowledge gained in
    the book and its exercises, you’ve laid the foundation for your career as a full-stack
    developer.
  prefs: []
  type: TYPE_NORMAL
