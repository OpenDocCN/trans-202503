- en: '**14  MC13224, the Simplest Fault Injection**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s take a look at an exploit of mine from Goodspeed (2011), in which the
    Freescale MC13224 is unlocked by grounding out one of its pins during reset. This
    requires a custom PCB and a bit of hot air soldering, but it’s very reliable and
    does not involve any fancy software.
  prefs: []
  type: TYPE_NORMAL
- en: The MC13224 is a system-in-package (SiP) offering a 32-bit TDMI ARM7 CPU, with
    an 802.15.4 (Zigbee) radio. It has 128kB of SPI flash, 96kB of RAM, and 80kB of
    ROM implementing the 15.4 MAC functions. This was the chip used in the Defcon
    18 Ninja Badge, Wozniak and Creighton (2010). Its selling point is that a 50Ω
    trace antenna tuned for 2.4GHz is all that you need to add as an antenna chain,
    with everything else but the crystals included internally.
  prefs: []
  type: TYPE_NORMAL
- en: System-in-package is a great way to make the PCB designer’s life easier, but
    you can see from the decapsulated photos in [Figure 14.1](ch14.xhtml#ch14fig1)
    that this package is really three little chips in a trench-coat, trying to act
    like an adult.^([1](footnotes.xhtml#ch14fn1)) The smallest chip is a radio balun,
    the largest is a CPU combined with a radio, and the third chip is flash memory.
  prefs: []
  type: TYPE_NORMAL
- en: Because the flash memory is on a separate die and the MC13224 has no execute-in-place
    feature, it is unable to execute code from flash memory directly. Rather, a ROM
    bootloader copies a working image from flash memory into RAM. If the security
    word “`OKOK`” is seen at the beginning of the image, then JTAG access is enabled
    before the bootloader branches into RAM. If the security word is instead set to
    “`SECU`,” then JTAG access is not enabled and the chip remains in its default,
    locked state.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0138-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.1: Decapsulated MC13224'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0139-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.2: SST25WF010'
  prefs: []
  type: TYPE_NORMAL
- en: Looking closer at the flash chip, we find the model number from text written
    on the die, shown in [Figure 14.3](ch14.xhtml#ch14fig3). It’s a standard SST25WF010
    low-voltage SPI flash chip. One way to read this would be to decapsulate the target
    chip and then wire-bond this SPI flash chip back into a new package and read it
    with a low-voltage SPI adapter. That would certainly work, but we’d prefer a solution
    that doesn’t require expensive equipment like a wire bonder.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0140-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.3: MC13224, Pin 133 in Bold'
  prefs: []
  type: TYPE_NORMAL
- en: A better technique takes advantage of the fact that, while the SPI bus is not
    bound out to external pins, pin 133 (`NVM_REG`) is the voltage regulator output
    for the flash chip, which is exposed in order to allow an external voltage regulator
    to replace the internal one. In low-power applications, power might be saved by
    shutting this down after booting.
  prefs: []
  type: TYPE_NORMAL
- en: What happens when we cut power to the SST25WF010 flash memory by grounding out
    this pin? Freescale (2010) explains in Figure 3-22 on [page 93](ch08.xhtml#page_93)
    that the MC13224 will enable JTAG access when the magic word is not found in flash
    memory. It will then try to boot from UART1 as a serial port, as a SPI slave,
    as a SPI master, or as an I2C master. If none of these methods work, the chip
    will hang in an infinite loop, but it hangs with JTAG enabled!
  prefs: []
  type: TYPE_NORMAL
- en: So all that is needed to recover a copy of an MC13224’s flash memory is a board
    that holds pin 133 low during a reset, then loads a new executable into RAM that—after
    the pin is allowed to swing high—will read firmware out of the recently powered
    SST25WF010 and exfiltrate it through an I/O pin.
  prefs: []
  type: TYPE_NORMAL
- en: Toward that end, I’ve made a small batch of modified Econotag boards in [Figure
    14.4](ch14.xhtml#ch14fig4) that expose this pin to a jumper. A pair of tweezers
    can then hold the line low during a reboot to unlock JTAG. Once the tweezers are
    removed, a client for the internal SST25 SPI flash chip can be used through the
    board’s built-in OpenOCD implementation to dump the firmware.
  prefs: []
  type: TYPE_NORMAL
- en: For more sophisticated attacks on dual-die microcontrollers, see the GD32F130
    exploit in [Chapter D.2](app04.xhtml#app04_2) or the MT1335WE exploit in [Chapter
    D.4](app04.xhtml#app04_4).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0142-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.4: Modified Econotag'
  prefs: []
  type: TYPE_NORMAL
