- en: '**Primer**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**入门**'
- en: In this primer, you will get set up for everything you need in the following
    projects. We’ll introduce you to the Raspberry Pi board and its most important
    and interesting parts. Then we’ll walk you through setting up the Pi with all
    the hardware and software it needs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本入门中，你将为接下来的项目做好所有准备。我们将向你介绍树莓派板及其最重要和最有趣的部分。然后我们将带你一步步设置树莓派所需的所有硬件和软件。
- en: This is a simple process that lets you use the Pi for so many things, including
    as a regular computer! We’ll go over setting up the Pi as a computer and show
    you how to navigate the desktop and file systems. We’ll show you how to use the
    terminal, also known as the command line, to give instructions to the Pi. Finally,
    we’ll introduce you to the Python programming language, which is what we’ll be
    using to program the projects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的过程，让你可以将树莓派用于许多事情，包括作为一台普通的计算机！我们将介绍如何将树莓派设置为计算机，并展示如何操作桌面和文件系统。我们还会教你如何使用终端，也就是命令行，来给树莓派发出指令。最后，我们将介绍Python编程语言，它是我们将在项目中使用的编程语言。
- en: Once you’re done with this primer, you’ll be ready to tackle the projects.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本入门后，你将准备好开始进行项目。
- en: '**GETTING STARTED WITH THE RASPBERRY PI**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**开始使用树莓派**'
- en: We’ll start by exploring uses for the Raspberry Pi board, gathering what we
    need to get it running, and loading an operating system onto a freshly formatted
    microSD card to put in the Pi board.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从探索树莓派板的用途开始，收集使其运行所需的东西，并将操作系统加载到一张新格式化的microSD卡上，然后插入树莓派板中。
- en: 'The Raspberry Pi is a credit card–size microcomputer board that you can buy
    for about $35\. It has everything a normal computer has: a processor; RAM; ports
    to plug in a monitor, mouse, and keyboard; and the ability to connect to the internet.
    The Raspberry Pi board even has one special feature that normal computers don’t:
    General Purpose Input Output Pins (GPIOs). These GPIOs let the Pi interact with
    the real world, allowing you to build smart electronics projects and control them
    with the Pi.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派是一块信用卡大小的微型计算机板，你可以花大约$35购买。它拥有普通计算机的所有功能：处理器；RAM；用于连接显示器、鼠标和键盘的端口；以及连接互联网的能力。树莓派板甚至有一项普通计算机没有的特殊功能：通用输入输出引脚（GPIO）。这些GPIO引脚使树莓派能够与现实世界互动，让你能够构建智能电子项目并用树莓派控制它们。
- en: You can use the Raspberry Pi to do most things you do with a regular computer,
    such as browsing the web, editing documents, playing games, coding, and much more.
    [Figure 0-1](ch00.xhtml#ch00fig1) shows a Raspberry Pi being used as a desktop
    computer.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用树莓派做大多数普通计算机能做的事情，比如浏览网页、编辑文档、玩游戏、编程等等。[图0-1](ch00.xhtml#ch00fig1)展示了树莓派作为桌面计算机的使用方式。
- en: '![image](../images/f0003-01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0003-01.jpg)'
- en: '**FIGURE 0-1:** Using the Raspberry Pi as a desktop computer'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**图0-1：** 使用树莓派作为桌面计算机'
- en: However, keep in mind that the Pi isn’t as powerful as more expensive computers,
    so it has some limitations. First, it can’t keep up with the demands of some modern
    software, so not all software will work with the Pi. Second, it runs the Linux
    operating system instead of Windows or macOS, which may be more familiar to you.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，记住树莓派的性能不如更昂贵的计算机，所以它有一些限制。首先，它无法满足一些现代软件的需求，因此并非所有软件都能在树莓派上运行。其次，它运行的是Linux操作系统，而不是Windows或macOS，这些系统可能对你来说更为熟悉。
- en: '**Uses for the Raspberry Pi**'
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**树莓派的用途**'
- en: So what’s the advantage of the Raspberry Pi, if it’s like a normal computer
    but with some limitations? The Pi gives you freedom to experiment in ways you
    wouldn’t or couldn’t with your computer. Computers are expensive and much harder
    to fix, so you wouldn’t want to tinker too much without knowing exactly what you’re
    doing. However, as Linus Torvalds—the founder of Linux—said in an interview with
    BBC News, Raspberry Pi makes it possible to “afford failure.” You can play around
    with hardware and software on the Pi without worrying about breaking something
    expensive or losing all your important files!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果树莓派像一台普通的计算机，但有一些限制，它的优势是什么呢？树莓派让你能够以一种你在普通计算机上无法做到或不敢做到的方式进行实验。计算机价格昂贵且修复难度大，所以你不愿意在没有完全了解自己的操作的情况下做过多的改动。然而，正如Linux创始人Linus
    Torvalds在接受BBC新闻采访时所说，树莓派让“承受失败”成为可能。你可以在树莓派上随意玩弄硬件和软件，而不用担心损坏昂贵的设备或丢失重要文件！
- en: 'The Pi lets you experiment in two main ways:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派让你通过两种主要方式进行实验：
- en: '**Creating your own programs** The Pi comes with a set of free tools for writing
    software. If you make a mistake, you can just wipe your Pi and start over.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建你自己的程序** Pi 附带一套免费的软件编写工具。如果你犯了错误，你只需擦除 Pi 并重新开始。'
- en: '**Creating your own electronics projects** The Pi board has GPIOs that allow
    you to connect sensors and other electronic devices that can interact with the
    real world. You can create useful things and have your projects running 24/7 without
    using much electricity.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建你自己的电子项目** Pi 板具有 GPIO 引脚，可以连接传感器和其他电子设备，从而与现实世界进行交互。你可以创建有用的物品，并且在不耗费大量电力的情况下让你的项目
    24/7 全天候运行。'
- en: 'There are endless uses for Raspberry Pi. Here are some examples of projects
    people around the world have been making: a retro gaming console to play old arcade
    games; a supercomputer, built by linking multiple Pi boards; a cloud server to
    store and access your data; a media center to organize and play media on your
    TV; a home automation system to control and monitor devices in the house; a whole
    host of awesome and useful robots, like farming robots and autonomous robot cars—just
    to mention a few. For an example of a really cool Pi project, check out the SeeMore
    sculpture, shown in [Figure 0-2](ch00.xhtml#ch00fig02), which displays the beauty
    of parallel algorithms by correlating the movements of a 256-node Raspberry Pi
    cluster.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi 的应用几乎没有限制。以下是全球各地的人们制作的一些项目示例：一台复古游戏机，用于玩老式街机游戏；一个超级计算机，通过将多个 Pi
    板连接起来构建；一台云服务器，用于存储和访问数据；一个媒体中心，用于在电视上组织和播放媒体；一个家庭自动化系统，用于控制和监控家中的设备；一系列非常酷且有用的机器人，比如农业机器人和自动驾驶机器人车——这些只是其中的一部分。作为一个非常酷的
    Pi 项目示例，看看 [图 0-2](ch00.xhtml#ch00fig02) 展示的 SeeMore 雕塑，它通过关联一个 256 节点 Raspberry
    Pi 集群的运动，展现了并行算法的美。
- en: '![image](../images/f0005-01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0005-01.jpg)'
- en: '**FIGURE 0-2:** The SeeMore project'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 0-2：** SeeMore 项目'
- en: '**Differentiating Between Boards**'
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**区分各个板子**'
- en: There are several releases of the Raspberry Pi board, as shown in [Figure 0-3](ch00.xhtml#ch00fig3).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi 板有多个版本，如 [图 0-3](ch00.xhtml#ch00fig3) 所示。
- en: '![image](../images/f0005-02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0005-02.jpg)'
- en: '**FIGURE 0-3:** Chronology of Raspberry Pi boards'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 0-3：** Raspberry Pi 板的时间轴'
- en: Throughout this book we’ll be using the Raspberry Pi 3 Model B, and that’s the
    board we recommend buying. However, if you already have an older Raspberry Pi
    model, it should work with most of the projects in this book. (If you are using
    a model with 26 GPIOs instead of 40, you may need to change some of the project’s
    circuits, which may require some research. You can also consult the [“Raspberry
    Pi GPIO Pin Guide”](app01.xhtml#app01) on [page 261](app01.xhtml#page_261) for
    a pinout of older boards.)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中我们将使用 Raspberry Pi 3 Model B，这是我们推荐购买的板子。不过，如果你已经有了旧版的 Raspberry Pi，它也能支持本书中的大部分项目。（如果你使用的是
    26 个 GPIO 引脚的模型，而不是 40 个引脚，你可能需要更改一些项目电路，可能需要进行一些研究。你也可以参考 [“Raspberry Pi GPIO
    引脚指南”](app01.xhtml#app01) 中的内容，在 [第 261 页](app01.xhtml#page_261) 查找旧版板子的引脚分布。）
- en: The Raspberry Pi boards differ in a number of aspects, including the number
    of GPIOs and the type and number of connectors. [Table 0-1](ch00.xhtml#ch00tab1)
    shows the different features of the Model B boards. (Note that the newer boards
    have better features, such as more RAM and better processors. You can also see
    that the Pi 3 is the first board to have built-in Bluetooth and Wi-Fi.)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi 板在多个方面有所不同，包括 GPIO 引脚的数量以及连接器的类型和数量。[表 0-1](ch00.xhtml#ch00tab1)
    显示了 Model B 板的不同特性。（请注意，较新的板子具有更好的特性，例如更多的内存和更强的处理器。你还可以看到，Pi 3 是第一款内置蓝牙和 Wi-Fi
    的板子。）
- en: '**TABLE 0-1:** Features of the Model B boards'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 0-1：** Model B 板的特性'
- en: '| **FEATURE** | **PI 1 MODEL B** | **PI 1 MODEL B+** | **PI 2 MODEL B** | **PI
    3 MODEL B** |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| **特性** | **PI 1 MODEL B** | **PI 1 MODEL B+** | **PI 2 MODEL B** | **PI 3
    MODEL B** |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Processor | 700 MHz single-core ARMv6 | 700 MHz single-core ARMv6 | 900 MHz
    quadcore ARMv7 | 1.2GHz quadcore ARMv8 |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 处理器 | 700 MHz 单核 ARMv6 | 700 MHz 单核 ARMv6 | 900 MHz 四核 ARMv7 | 1.2GHz 四核
    ARMv8 |'
- en: '| RAM | 512MB | 512MB | 1GB | 1GB |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| RAM | 512MB | 512MB | 1GB | 1GB |'
- en: '| USB ports | 2 | 4 | 4 | 4 |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| USB 端口 | 2 | 4 | 4 | 4 |'
- en: '| GPIOs | 26 | 40 | 40 | 40 |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| GPIO 引脚 | 26 | 40 | 40 | 40 |'
- en: '| Ethernet port | ✓ | ✓ | ✓ | ✓ |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 以太网端口 | ✓ | ✓ | ✓ | ✓ |'
- en: '| HDMI | ✓ | ✓ | ✓ | ✓ |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| HDMI | ✓ | ✓ | ✓ | ✓ |'
- en: '| Storage | SD | MicroSD | MicroSD | MicroSD |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 存储 | SD | MicroSD | MicroSD | MicroSD |'
- en: '| Wi-Fi | - | - | - | ✓ |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| Wi-Fi | - | - | - | ✓ |'
- en: '| Bluetooth | - | - | - | ✓ |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 蓝牙 | - | - | - | ✓ |'
- en: '| Price | $35 | $25 | $35 | $35 |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 价格 | $35 | $25 | $35 | $35 |'
- en: '| Power source | MicroUSB | MicroUSB | MicroUSB | MicroUSB |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 电源 | MicroUSB | MicroUSB | MicroUSB | MicroUSB |'
- en: '**Getting to Know the Raspberry Pi and Its Accessories**'
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**了解树莓派及其配件**'
- en: Let’s take a closer look at a Raspberry Pi board. [Figure 0-4](ch00.xhtml#ch00fig4)
    shows an annotated Raspberry Pi 3 Model B board.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看树莓派主板。[图 0-4](ch00.xhtml#ch00fig4) 显示了一个标注的树莓派 3 型号 B 主板。
- en: '![image](../images/f0006-01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0006-01.jpg)'
- en: '**FIGURE 0-4:** The Raspberry Pi 3 Model B'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 0-4：** 树莓派 3 型号 B'
- en: 'The Raspberry Pi 3 Model B has the following components:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派 3 型号 B 包含以下组件：
- en: '**USB ports** Connect peripherals, such as a mouse and keyboard.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**USB 端口** 连接外设，如鼠标和键盘。'
- en: '**Ethernet port** Connects the Raspberry Pi to the internet.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**以太网端口** 将树莓派连接到互联网。'
- en: '**Audio jack** Connects an audio device.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**音频插孔** 连接音频设备。'
- en: '**CSI (Camera Serial Interface) connector** Connects a small camera.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSI（摄像头串行接口）连接器** 连接小型摄像头。'
- en: '**HDMI (High-Definition Multimedia Interface) connector** Connects a monitor
    or TV.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**HDMI（高清多媒体接口）连接器** 连接显示器或电视。'
- en: '**MicroUSB power input** Powers the Raspberry Pi. (There is no power switch
    on the Raspberry Pi board.) The microUSB connector is for power input only.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**MicroUSB 电源输入** 为树莓派提供电力。（树莓派板上没有电源开关。）MicroUSB 连接器仅用于电源输入。'
- en: '**DSI (Display Serial Interface) connector** Allows you to easily connect DSI-compatible
    displays, such as an LCD touchscreen, with a 15-pin ribbon cable.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**DSI（显示串行接口）连接器** 使您能够轻松连接兼容 DSI 的显示器，如 LCD 触摸屏，使用 15 针排线连接。'
- en: '**MicroSD card slot** Stores the microSD card, which holds the operating system
    and everything else the Pi needs to work.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**MicroSD 卡槽** 存储 microSD 卡，里面包含操作系统以及树莓派工作所需的所有内容。'
- en: '**Processor** Functions as the brain of your Raspberry Pi. It features a Broadcom
    BCM2837 system on a chip (SoC) with a 64-bit quad-core CPU operating at a maximum
    speed of 1.2 GHz.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**处理器** 作为树莓派的大脑，采用 Broadcom BCM2837 系统芯片（SoC），配备 64 位四核 CPU，最大运行速度为 1.2 GHz。'
- en: '**Antenna** Picks up wireless LAN and Bluetooth signals.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**天线** 接收无线局域网和蓝牙信号。'
- en: '**GPIO pins** Allow you to connect sensors to collect data or send output signals
    to control an output, such as a motor or LED.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**GPIO 引脚** 允许您连接传感器以收集数据，或发送输出信号来控制输出设备，如电机或 LED。'
- en: As you can see, the Raspberry Pi is a bare electronic board that can’t do much
    on its own. You’ll need some accessories to get started (see [Figure 0-5](ch00.xhtml#ch00fig5)).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，树莓派是一个裸露的电子板，单独使用时无法完成太多功能。您需要一些配件才能开始使用（请参见 [图 0-5](ch00.xhtml#ch00fig5)）。
- en: '![image](../images/f0007-01.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0007-01.jpg)'
- en: '**FIGURE 0-5:** A keyboard and, from left to right, an HDMI cable, a microSD
    card, a mouse, and a power adapter'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 0-5：** 从左到右，键盘、HDMI 电缆、microSD 卡、鼠标和电源适配器'
- en: 'Here’s a list of things you’ll want to purchase for the Pi:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您可能需要购买的树莓派配件：
- en: '**Power adapter**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**电源适配器**'
- en: The Raspberry Pi 3 should be powered using a 2.5 A 5 V supply.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派 3 应该使用 2.5 A 5 V 的电源进行供电。
- en: '**MicroSD card**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**MicroSD 卡**'
- en: We recommend getting an 8GB (or higher) class 10 microSD card. If you’re using
    a Raspberry Pi 1 Model B, you need a full-size SD card rather than a microSD.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议使用 8GB（或更大）Class 10 的 microSD 卡。如果您使用的是树莓派 1 型号 B，您需要一张全尺寸的 SD 卡，而不是 microSD
    卡。
- en: '**Monitor and HDMI cable**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**显示器和 HDMI 电缆**'
- en: Your Raspberry Pi works with a monitor or a TV and uses an HDMI connection.
    Most recent TVs and monitors have an HDMI socket, so you can connect one directly
    to the Pi board using an HDMI cable. If you have an old monitor or TV, it probably
    has a VGA or DVI socket. You can still connect the Pi to these screens, but you’ll
    need a VGA- or DVI-to-HDMI adapter.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您的树莓派可以与显示器或电视一起使用，并通过 HDMI 连接。大多数现代电视和显示器都配有 HDMI 插口，因此您可以使用 HDMI 电缆直接将其连接到树莓派板。如果您有一台较旧的显示器或电视，它可能配有
    VGA 或 DVI 插口。您仍然可以将树莓派连接到这些显示器，但需要使用 VGA 或 DVI 转 HDMI 的适配器。
- en: '**Mouse and keyboard**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**鼠标和键盘**'
- en: You can use any mouse and keyboard as long as they have an USB plug. You can
    also use a wireless keyboard and mouse as long as they come with a USB receiver
    dongle.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 只要您的鼠标和键盘具有 USB 插头，您就可以使用任何鼠标和键盘。只要无线键盘和鼠标配有 USB 接收器插头，您也可以使用它们。
- en: '**MicroSD card adapter and writer for your PC (optional)**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**MicroSD 卡适配器和 PC 写入器（可选）**'
- en: Most modern computers have a slot for SD cards. You insert your microSD card
    into an SD card adapter and connect it to your computer. If your computer doesn’t
    have an SD card slot, you also need to get an SD card reader/writer that connects
    via USB.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代计算机都配有 SD 卡插槽。您可以将 microSD 卡插入 SD 卡适配器并将其连接到计算机。如果您的计算机没有 SD 卡插槽，您还需要一个通过
    USB 连接的 SD 卡读写器。
- en: '**Ethernet cable or Wi-Fi dongle (optional)**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**以太网电缆或 Wi-Fi 加密狗（可选）**'
- en: The Raspberry Pi 3 has built-in Wi-Fi, but older versions don’t. This means
    that older versions need an Ethernet cable or a Wi-Fi dongle to get internet connection.
    If you get a Wi-Fi dongle, make sure that it is compatible with your Pi board.
    You can go to *[https://elinux.org/RPi_USB_Wi-Fi_Adapters](https://elinux.org/RPi_USB_Wi-Fi_Adapters)*
    to find out if the dongle is compatible.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi 3 内置 Wi-Fi，但旧版没有。这意味着旧版需要以太网电缆或 Wi-Fi 加密狗来连接互联网。如果你购买 Wi-Fi 加密狗，请确保它与你的
    Pi 板兼容。你可以访问 *[https://elinux.org/RPi_USB_Wi-Fi_Adapters](https://elinux.org/RPi_USB_Wi-Fi_Adapters)*
    来查看加密狗是否兼容。
- en: '**Protective case (optional)**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**保护壳（可选）**'
- en: The Raspberry Pi doesn’t come with an enclosure and is fine to use as is. That
    said, we recommend purchasing a protective case for your board to make it a bit
    sturdier. If you don’t want to spend money, you can also create your own case
    using 3D printing, LEGO, or whatever you like. Just make sure the case allows
    you to access the GPIOs so you can build your electronics projects.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi 本身没有外壳，直接使用也没问题。尽管如此，我们建议购买一个保护壳，这样板子会更加坚固。如果你不想花钱，也可以使用 3D 打印、LEGO
    或任何你喜欢的方式自制外壳。只要确保外壳允许你访问 GPIO 端口，这样你就可以进行电子项目的制作。
- en: '**NOTE**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*You can also run your Raspberry Pi through your computer without a keyboard,
    mouse, or monitor. This is known as* running headless.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*你也可以通过计算机运行你的 Raspberry Pi，而无需键盘、鼠标或显示器。这种方式称为* 无头运行。'
- en: If you’re not sure whether your peripherals are compatible with the Raspberry
    Pi, you can check *[https://elinux.org/RPi_VerifiedPeripherals](https://elinux.org/RPi_VerifiedPeripherals)*
    to find a list of compatible and incompatible peripherals.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不确定你的外设是否与 Raspberry Pi 兼容，可以访问 *[https://elinux.org/RPi_VerifiedPeripherals](https://elinux.org/RPi_VerifiedPeripherals)*
    查找兼容和不兼容的外设清单。
- en: '**Project Component List**'
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**项目组件清单**'
- en: On top of this equipment, you’ll also need some electronics components to complete
    the projects in this book. Each project gives you a detailed list of the required
    parts at the start, and you should be able to easily find the needed components
    at most online electronics stores or with a quick Google search. We recommend
    stores like Element14/Farnell, Adafruit, ThePiHut, and SparkFun. Alternatively,
    you can also buy your parts from Amazon—make sure you get top-reviewed products.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些设备，你还需要一些电子元件来完成本书中的项目。每个项目开始时都会提供详细的所需零件清单，你应该能够在大多数在线电子商店或者通过快速 Google
    搜索轻松找到所需的组件。我们推荐像 Element14/Farnell、Adafruit、ThePiHut 和 SparkFun 这样的商店。或者，你也可以从亚马逊购买零件——确保选择评价较高的产品。
- en: '**NOTE**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*For the parts that start with an * we recommend you buy an assorted pack.
    These components are really cheap and you’ll need plenty of them, so a bulk pack
    is better value.*'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*对于以* 开头的部分，我们建议你购买一个混合包装。这些组件非常便宜，且你需要大量的它们，所以大宗包装更具性价比。*'
- en: 'Here’s a list of all parts you’ll need for the projects in this book:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你完成本书项目所需的所有零件清单：
- en: Raspberry Pi 3 Model B
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi 3 Model B
- en: Raspberry Pi Zero W (optional)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi Zero W（可选）
- en: Breadboard
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 面包板
- en: '*5 mm LEDs (at least two LEDs with different colors)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*5mm LED（至少两颗不同颜色的 LED）*'
- en: '*Jumper wires (male-to-male and male-to-female)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*跳线（公对公和公对母）*'
- en: '*330 Ω resistors (at least three)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*330 Ω 电阻（至少三个）*'
- en: 4.7 kΩ resistor
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 4.7 kΩ 电阻
- en: '*Pushbuttons (at least eight)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*按键（至少八个）*'
- en: 10 kΩ potentiometers (at least two)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 10 kΩ 可调电阻（至少两个）
- en: MCP3008 chip
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: MCP3008 芯片
- en: Common cathode RGB LED
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 公共阴极 RGB LED
- en: WS2812B addressable RGB LED strip
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: WS2812B 可寻址 RGB LED 灯带
- en: Header pins
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 排针
- en: Logic level converter module BSS 138
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑电平转换模块 BSS 138
- en: 16×2 Hitachi HD44780–compatible LCD
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 16×2 Hitachi HD44780 兼容 LCD
- en: 0.96-inch OLED display
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 0.96英寸 OLED 显示屏
- en: Sense HAT
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Sense HAT
- en: PIR motion sensor HC-SR501
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: PIR 红外传感器 HC-SR501
- en: Piezo buzzer
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 蜂鸣器
- en: MQ-2 gas and smoke sensor
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: MQ-2 气体和烟雾传感器
- en: Raspberry Pi Camera Module v2
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi Camera Module v2
- en: Relay module HL-52S
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 继电器模块 HL-52S
- en: Plastic box enclosure
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 塑料盒外壳
- en: 12 V lamp and holder
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 12V 灯泡及灯座
- en: 12 V power adapter
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 12V 电源适配器
- en: Male DC barrel power jack
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 公型 DC 插座电源接口
- en: DHT22 temperature and humidity sensor
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: DHT22 温湿度传感器
- en: MotoZero add-on board
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: MotoZero 扩展板
- en: Smart robot car chassis kit
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 智能机器人车底盘套件
- en: Four AA batteries
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 四节 AA 电池
- en: Portable charger
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 便携式充电器
- en: Lighter
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 打火机
- en: Headphones or a monitor with speakers and an HDMI cable
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 耳机或带扬声器的显示器及 HDMI 电缆
- en: You’ll also need a soldering iron and accessories like solder, solder wick,
    and a helping hand. Additionally, it can be useful to have needle-nose pliers,
    mini cutting pliers, and a wire stripper.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要一把烙铁以及焊料、吸锡带和帮助手等配件。此外，针嘴钳、迷你剪钳和剥线钳也会很有帮助。
- en: '**UPLOADING THE OPERATING SYSTEM**'
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**上传操作系统**'
- en: The Raspberry Pi runs the Linux operating system, open source software built
    by expert volunteers working together from all over the world. Because Linux is
    open source, everyone has access to the source code.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi 运行的是 Linux 操作系统，这是一款由来自全球的专家志愿者合作构建的开源软件。由于 Linux 是开源的，任何人都可以访问源代码。
- en: '**NOTE**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*There are Android and Windows versions for the Pi, but they don’t work as
    well as the Linux systems. It’s better to stick with Linux, which is the most
    supported operating system for Raspberry Pi.*'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*有 Android 和 Windows 版本适用于 Pi，但它们的性能不如 Linux 系统。最好使用 Linux，它是 Raspberry Pi
    支持最好的操作系统。*'
- en: There are several Linux distributions available for Raspberry Pi, but the recommended
    distribution for beginners is Raspbian, which has the most support in the Raspberry
    Pi community. Raspbian is also free to download.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi 有多个 Linux 发行版，但推荐给初学者使用的是 Raspbian，因为它在 Raspberry Pi 社区中有最广泛的支持。Raspbian
    也是免费的，可以下载。
- en: Because the Raspberry Pi doesn’t have a hard drive, you need to install the
    operating system on the microSD card, and for that you need another, everyday
    personal computer.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Raspberry Pi 没有硬盘，你需要将操作系统安装到 microSD 卡上，而为此你需要另一台普通的个人计算机。
- en: It’s easiest to install Raspbian with the New Out Of the Box Software (NOOBS),
    a simple operating system installer that contains Raspbian.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 New Out Of the Box Software（NOOBS）来安装 Raspbian 是最简单的方式，NOOBS 是一个包含 Raspbian
    的简易操作系统安装程序。
- en: '**Downloading NOOBS**'
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**下载 NOOBS**'
- en: 'To download NOOBS, go to *[https://www.raspberrypi.org/downloads/noobs/](https://www.raspberrypi.org/downloads/noobs/)*.
    NOOBS comes in two versions: NOOBS and NOOBS LITE. NOOBS LITE doesn’t come with
    Raspbian, so you need to choose the NOOBS option (see [Figure 0-6](ch00.xhtml#ch00fig6)).'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载 NOOBS，请访问 *[https://www.raspberrypi.org/downloads/noobs/](https://www.raspberrypi.org/downloads/noobs/)*。NOOBS
    有两个版本：NOOBS 和 NOOBS LITE。NOOBS LITE 不包含 Raspbian，因此你需要选择 NOOBS 选项（见 [图 0-6](ch00.xhtml#ch00fig6)）。
- en: '![image](../images/f0011-01.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0011-01.jpg)'
- en: '**FIGURE 0-6:** Downloading NOOBS'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 0-6：** 下载 NOOBS'
- en: Click the **Download ZIP** button to download NOOBS. (It’s a large file and
    will take some time to download.) Find the file in your *Downloads* folder, or
    wherever your downloads go, but don’t unpack it yet.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**下载 ZIP**按钮下载 NOOBS。（这是一个大文件，下载可能需要一些时间。）找到文件所在的*下载*文件夹，或者其他你下载文件的位置，但不要解压缩它。
- en: You’ll you need to copy the contents of the NOOBS file to a blank microSD card,
    but first you need to format the card. Your microSD card will need at least 8GB
    to run well. Follow the instructions for the operating system on your computer.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将 NOOBS 文件的内容复制到一张空白的 microSD 卡上，但首先你需要格式化该卡。你的 microSD 卡至少需要 8GB 才能正常运行。根据你电脑上的操作系统执行相应的操作。
- en: '**Formatting a microSD card on Windows or macOS**'
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**在 Windows 或 macOS 上格式化 microSD 卡**'
- en: 'Connect your microSD card to your computer and then follow these instructions
    to format your microSD card:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 将 microSD 卡连接到你的计算机，然后按照以下步骤格式化你的 microSD 卡：
- en: Go to *[https://www.sdcard.org/downloads/formatter_4/](https://www.sdcard.org/downloads/formatter_4/)*
    and download the SD Card Formatter for Windows or Mac (see [Figure 0-7](ch00.xhtml#ch00fig7)).
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 *[https://www.sdcard.org/downloads/formatter_4/](https://www.sdcard.org/downloads/formatter_4/)*
    下载适用于 Windows 或 Mac 的 SD 卡格式化工具（见 [图 0-7](ch00.xhtml#ch00fig7)）。
- en: '![image](../images/f0011-02.jpg)'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0011-02.jpg)'
- en: '**FIGURE 0-7:** SD Card Formatter download'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 0-7：** SD 卡格式化工具下载'
- en: After you accept the terms, a ZIP file should begin to download.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在接受条款后，ZIP 文件应该开始下载。
- en: Run the setup file to install the SD Card Formatter on your computer. Then,
    with your microSD card connected to your computer, open the SD Card Formatter
    application.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行安装文件将 SD 卡格式化工具安装到你的计算机上。然后，将你的 microSD 卡连接到计算机，打开 SD 卡格式化工具应用程序。
- en: If you’re using Windows, in the SD Card Formatter dialog, select the drive for
    your SD card from the drop-down menu and select the **Overwrite format** option.
    Click the **Format** button to format (see [Figure 0-8](ch00.xhtml#ch00fig8)).
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用的是 Windows，在 SD 卡格式化工具对话框中，从下拉菜单中选择你的 SD 卡驱动器，并选择**覆盖格式化**选项。点击**格式化**按钮进行格式化（见
    [图 0-8](ch00.xhtml#ch00fig8)）。
- en: '![image](../images/f0012-01.jpg)'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0012-01.jpg)'
- en: '**FIGURE 0-8:** The SD Card Formatter dialog on Windows'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 0-8：** Windows 上的 SD 卡格式化工具对话框'
- en: If you’re using macOS, in the SD Card Formatter dialog, select the microSD card
    drive from the drop-down menu, select **Overwrite Format**, and name your microSD
    card **BOOT**, as shown in [Figure 0-9](ch00.xhtml#ch00fig9). Then, click **Format**.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用的是 macOS，在 SD 卡格式化工具对话框中，从下拉菜单中选择 microSD 卡驱动器，选择 **覆盖格式**，并将你的 microSD
    卡命名为 **BOOT**，如 [图 0-9](ch00.xhtml#ch00fig9) 所示。然后点击 **格式化**。
- en: '![image](../images/f0012-02.jpg)'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0012-02.jpg)'
- en: '**FIGURE 0-9:** The SD Card Formatter dialog on macOS'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 0-9：** macOS 上的 SD 卡格式化工具对话框'
- en: '**Formatting a microSD card on Linux**'
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**在 Linux 上格式化 microSD 卡**'
- en: 'Connect your microSD card to your computer and then follow these instructions
    to format your microSD card on Linux:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的 microSD 卡连接到电脑，然后按照以下步骤在 Linux 上格式化 microSD 卡：
- en: Go to *[http://gparted.org/](http://gparted.org/)* and download the GParted
    software.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 *[http://gparted.org/](http://gparted.org/)* 并下载 GParted 软件。
- en: Install and open GParted.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装并打开 GParted。
- en: Select your microSD card at the top right, as shown in [Figure 0-10](ch00.xhtml#ch00fig10).
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如 [图 0-10](ch00.xhtml#ch00fig10) 所示，选择右上角的 microSD 卡。
- en: '![image](../images/f0013-01.jpg)'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0013-01.jpg)'
- en: '**FIGURE 0-10:** GParted on Ubuntu'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 0-10：** 在 Ubuntu 上的 GParted'
- en: In the bottom half of the window, you should see a series of partitions listed.
    Right-click one of the partitions and delete it. Repeat that process to delete
    all partitions of your microSD card so all the memory is unallocated.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在窗口的下半部分，你应该会看到一系列列出的分区。右键点击其中一个分区并删除它。重复此过程删除你 microSD 卡上的所有分区，以便所有存储空间未分配。
- en: Right-click the unallocated partition and select **Create New Partition**.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击未分配的分区并选择 **创建新分区**。
- en: Set the File system to **fat32**, enter the Label **BOOT**, and click the **Add**
    button, as shown in [Figure 0-11](ch00.xhtml#ch00fig11). Last, click the green
    checkmark at the top of the main window to resume operation.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件系统设置为 **fat32**，输入标签 **BOOT**，并点击 **添加** 按钮，如 [图 0-11](ch00.xhtml#ch00fig11)
    所示。最后，点击主窗口顶部的绿色勾选标志以继续操作。
- en: '![image](../images/f0013-02.jpg)'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f0013-02.jpg)'
- en: '**FIGURE 0-11:** Creating a new microSD Card partition in GParted'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 0-11：** 在 GParted 中创建新的 microSD 卡分区'
- en: In the end, your microSD card should look like [Figure 0-12](ch00.xhtml#ch00fig12).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，你的 microSD 卡应如下所示：[图 0-12](ch00.xhtml#ch00fig12)。
- en: '![image](../images/f0014-01.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0014-01.jpg)'
- en: '**FIGURE 0-12:** The microSD card formatted using GParted'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 0-12：** 使用 GParted 格式化的 microSD 卡'
- en: '**Loading Raspbian onto the microSD Card**'
  id: totrans-156
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将 Raspbian 加载到 microSD 卡上**'
- en: After the microSD card is properly formatted, plug it into your computer, extract
    the files from the *NOOBS.zip* file, and copy the files onto the card. Then safely
    eject your microSD card from your computer.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在 microSD 卡正确格式化后，将其插入你的电脑，解压 *NOOBS.zip* 文件中的内容，并将文件复制到卡上。然后安全地从电脑中弹出你的 microSD
    卡。
- en: Now that your microSD card is ready to boot your Raspberry Pi, you can set up
    your Pi to act as a fully functioning desktop computer.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的 microSD 卡已准备好启动 Raspberry Pi，你可以设置 Pi 作为一个完全功能的桌面电脑。
- en: '**SETTING UP YOUR RASPBERRY PI AS A DESKTOP COMPUTER**'
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**将你的 Raspberry Pi 设置为桌面电脑**'
- en: Using your Raspberry Pi as a desktop computer is like having a learning center
    that allows you to build your projects and write your own software without worrying
    about messing up your computer. This is also the easiest way for beginners to
    interact with the physical world using Raspberry Pi.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Raspberry Pi 作为桌面电脑就像拥有一个学习中心，让你可以在不担心破坏电脑的情况下构建项目和编写自己的软件。这也是初学者使用 Raspberry
    Pi 与物理世界互动的最简单方式。
- en: '**Connecting your Raspberry Pi**'
  id: totrans-161
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接你的 Raspberry Pi**'
- en: 'Here is a list of everything you need to use your Pi as a desktop computer:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用你的 Pi 作为桌面电脑所需的一切清单：
- en: MicroSD card with NOOBS installed
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装了 NOOBS 的 microSD 卡
- en: Monitor or TV
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示器或电视
- en: HDMI cable
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HDMI 电缆
- en: Mouse
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼠标
- en: Keyboard
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键盘
- en: Power adapter
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电源适配器
- en: 'The power adapter should be the last thing connected, but the other components
    don’t need to be connected in a specific order. For simplicity, though, we recommend
    you follow these steps:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 电源适配器应是最后连接的设备，但其他组件连接的顺序并不重要。不过为了简便起见，我们建议你按以下步骤操作：
- en: '**NOTE**'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you don’t have NOOBS installed on your microSD card, go back to [“Downloading
    NOOBS”](ch00.xhtml#lev11) on [page 10](ch00.xhtml#page_10) to see how to install
    it.*'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你的 microSD 卡上没有安装 NOOBS，请返回 [“下载 NOOBS”](ch00.xhtml#lev11)，查看 [第 10 页](ch00.xhtml#page_10)
    了解如何安装。*'
- en: Insert your microSD card into the microSD card slot on the Pi.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的 microSD 卡插入 Pi 上的 microSD 卡槽。
- en: Connect the monitor or TV to the Raspberry Pi HDMI socket with an HDMI cable.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 HDMI 电缆将显示器或电视连接到 Raspberry Pi 的 HDMI 插口。
- en: Connect the mouse and keyboard to the available USB ports.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标和键盘连接到可用的USB端口。
- en: Connect the power adapter to the microUSB power input.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将电源适配器连接到microUSB电源输入端口。
- en: Plug the power adapter into a power socket.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将电源适配器插入电源插座。
- en: '[Figure 0-13](ch00.xhtml#ch00fig13) illustrates these connections.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '[图0-13](ch00.xhtml#ch00fig13)展示了这些连接。'
- en: '![image](../images/f0015-01.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0015-01.jpg)'
- en: '**FIGURE 0-13:** Connecting the Raspberry Pi to the essential peripherals'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**图0-13：** 将树莓派连接到必要的外围设备'
- en: When you apply power to your Raspberry Pi, you should see one red LED and one
    green LED light up, as in [Figure 0-14](ch00.xhtml#ch00fig14). These are called
    *status LEDs*, and they provide you with some useful information.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 当您为树莓派供电时，您应该会看到一个红色LED和一个绿色LED亮起，如[图0-14](ch00.xhtml#ch00fig14)所示。这些被称为*状态LED*，它们为您提供了一些有用的信息。
- en: '![image](../images/f0015-02.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0015-02.jpg)'
- en: '**FIGURE 0-14:** Raspberry Pi board status LEDs'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '**图0-14：** 树莓派板状态LED'
- en: When the red LED is on, it means the Raspberry Pi is connected to a power source.
    When the green LED is blinking, there is microSD card activity.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 当红色LED亮起时，表示树莓派已连接到电源。当绿色LED闪烁时，表示microSD卡正在活动。
- en: '**Booting Up Your Pi for the First Time**'
  id: totrans-184
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**第一次启动树莓派**'
- en: As soon as you apply power to your Raspberry Pi board, it should boot automatically.
    If you set up NOOBS correctly, you should see the installation window shown in
    [Figure 0-15](ch00.xhtml#ch00fig15) after a few seconds.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦为树莓派板供电，它应该会自动启动。如果您正确设置了NOOBS，几秒钟后应该会看到如[图0-15](ch00.xhtml#ch00fig15)所示的安装窗口。
- en: '![image](../images/f0016-01.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0016-01.jpg)'
- en: '**FIGURE 0-15:** NOOBS installation window'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**图0-15：** NOOBS安装窗口'
- en: '**NOTE**'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*It is very important that you correctly select your keyboard layout. Otherwise
    the wrong characters will come up on the screen when you type.*'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '*正确选择您的键盘布局非常重要，否则输入时屏幕上会出现错误的字符。*'
- en: Raspbian should be selected by default. At the bottom of the screen, outside
    the NOOBS installation window, you need to select your language and keyboard layout,
    categorized by region.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 默认应选择Raspbian。屏幕底部，NOOBS安装窗口外，您需要根据地区选择语言和键盘布局。
- en: After setting your language and keyboard preferences, click **Install** in the
    top left of the installation window. Your Pi should then give you a prompt about
    whether to overwrite the microSD card; select **Yes** and the installation should
    begin.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 设置语言和键盘偏好后，点击安装窗口左上角的**安装**按钮。此时，您的树莓派应该会提示是否覆盖microSD卡；选择**是**，安装将开始。
- en: When the installation is complete, click **OK** and a message should ask you
    to restart your Pi. After restarting, you should see the Raspbian desktop environment,
    which will look something like [Figure 0-16](ch00.xhtml#ch00fig16).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，点击**确定**，并且会弹出消息提示您重启树莓派。重启后，您应该会看到Raspbian桌面环境，它看起来类似于[图0-16](ch00.xhtml#ch00fig16)。
- en: '![image](../images/f0017-01.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0017-01.jpg)'
- en: '**FIGURE 0-16:** The Raspbian desktop environment'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**图0-16：** Raspbian桌面环境'
- en: '**NOTE**'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*You’ll only see the installation menu on the first boot instance. The next
    time you boot your Pi, you’ll be taken directly to the desktop environment.*'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '*您只会在第一次启动时看到安装菜单。下次启动树莓派时，您将直接进入桌面环境。*'
- en: Congratulations! You successfully set up your Raspberry Pi as a desktop computer.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已成功将树莓派设置为桌面计算机。
- en: You shouldn’t have been asked to enter a username and password, but you may
    be asked to do so in future. The default username is *pi*, and the default password
    is *raspberry*. You can change the password by going to the taskbar main menu
    and selecting **Preferences** ▸ **Raspberry Pi Configuration**. In the **System**
    tab, click the **Change Password** button to change your password, as shown in
    [Figure 0-17](ch00.xhtml#ch00fig17).
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 您不应该被要求输入用户名和密码，但未来可能会要求您这样做。默认的用户名是*pi*，默认的密码是*raspberry*。您可以通过任务栏主菜单选择**首选项**
    ▸ **树莓派配置**来更改密码。在**系统**选项卡中，点击**更改密码**按钮来更改密码，如[图0-17](ch00.xhtml#ch00fig17)所示。
- en: '![image](../images/f0017-02.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0017-02.jpg)'
- en: '**FIGURE 0-17:** Changing a password on Raspberry Pi'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '**图0-17：** 在树莓派上更改密码'
- en: We recommend using the default user account for following the projects in this
    book. However, if you need to create a new user account, see the [“Adding a New
    User Account”](ch00.xhtml#ch00box1) box.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议在本书中跟随项目时使用默认用户账户。不过，如果您需要创建一个新用户账户，请参阅[“添加新用户账户”](ch00.xhtml#ch00box1)框。
- en: '**ADDING A NEW USER ACCOUNT**'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**添加新用户账户**'
- en: 'To add a new user account to your Raspberry Pi, open the terminal and enter
    the following command, replacing username with the name you want to give to the
    user:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 要在你的树莓派上添加新用户账户，打开终端并输入以下命令，将“username”替换为你想给用户取的名字：
- en: '[PRE0]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You’ll be prompted to enter a password twice (no characters will be displayed
    on the terminal while you type the password). You’ll then be asked further information
    about the user, which you can leave blank by pressing ENTER. Last, the terminal
    will prompt you to verify the information. If it is correct, type `Y` and press
    ENTER. You should now have a new user account.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 系统会提示你输入密码两次（在你输入密码时，终端不会显示字符）。接着，系统会询问你关于用户的其他信息，你可以通过按 ENTER 键跳过这些问题。最后，终端会提示你验证信息。如果信息正确，输入`Y`并按
    ENTER。你现在应该已经有了一个新的用户账户。
- en: '**Desktop Tour**'
  id: totrans-206
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**桌面游览**'
- en: 'As soon as you start exploring the desktop environment, you’ll notice that
    it’s very similar to a regular computer: it has a taskbar and a desktop area with
    a wastebasket. You can open, drag, resize, and close windows; create, rename,
    move, and delete folders; launch apps; and do most of the things you usually do
    on a normal desktop computer.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你开始探索桌面环境，你会注意到它与普通电脑非常相似：它有任务栏和带有垃圾桶的桌面区域。你可以打开、拖动、调整窗口大小和关闭窗口；创建、重命名、移动和删除文件夹；启动应用程序；以及进行你通常在普通桌面电脑上做的大多数操作。
- en: '**Using the Taskbar**'
  id: totrans-208
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**使用任务栏**'
- en: The taskbar is at the top of the screen, and on the right side are several useful
    icons. [Figure 0-18](ch00.xhtml#ch00fig18) shows what each is.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 任务栏位于屏幕顶部，右侧有几个实用的图标。[图 0-18](ch00.xhtml#ch00fig18)展示了每个图标的功能。
- en: '![image](../images/f0018-01.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0018-01.jpg)'
- en: '**FIGURE 0-18:** Icons on the right side of the taskbar'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 0-18：** 任务栏右侧的图标'
- en: The left side of the taskbar has the taskbar menu and a few useful quick launch
    icons for programs (see [Figure 0-19](ch00.xhtml#ch00fig19)).
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 任务栏的左侧有任务栏菜单和一些有用的程序快捷启动图标（见[图 0-19](ch00.xhtml#ch00fig19)）。
- en: '![image](../images/f0019-01.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0019-01.jpg)'
- en: '**FIGURE 0-19:** Taskbar quick launch icons'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 0-19：** 任务栏快捷启动图标'
- en: We encourage you to click the icons and explore the programs.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们鼓励你点击图标，探索程序。
- en: '**Exploring the Programs Menu**'
  id: totrans-216
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**探索程序菜单**'
- en: When you click the taskbar menu (the Raspberry Pi symbol on the taskbar), a
    drop-down menu with submenus should open (see [Figure 0-20](ch00.xhtml#ch00fig20)).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击任务栏菜单（任务栏上的树莓派符号）时，一个带有子菜单的下拉菜单应会打开（见[图 0-20](ch00.xhtml#ch00fig20)）。
- en: '![image](../images/f0019-02.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0019-02.jpg)'
- en: '**FIGURE 0-20:** The taskbar menu'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 0-20：** 任务栏菜单'
- en: Explore each menu item to see what’s inside. For example, the Programming submenu
    contains several tools for writing software in languages like Java and Python.
    These are worth exploring by yourself at your leisure.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 探索每个菜单项，看看里面有什么。例如，编程子菜单包含了几个用来编写软件的工具，如 Java 和 Python。这些工具值得你在闲暇时自己去探索。
- en: '**File Manager**'
  id: totrans-221
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**文件管理器**'
- en: On the left side of the taskbar is a folder icon that opens the File Manager
    window shown on [Figure 0-21](ch00.xhtml#ch00fig21). The File Manager is a folder
    with more folders inside for you to organize your stuff. You can create, rename,
    move, and delete folders.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 任务栏左侧有一个文件夹图标，点击它会打开[图 0-21](ch00.xhtml#ch00fig21)中显示的文件管理器窗口。文件管理器是一个文件夹，里面有更多的文件夹供你整理文件。你可以创建、重命名、移动和删除文件夹。
- en: '![image](../images/f0020-01.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0020-01.jpg)'
- en: '**FIGURE 0-21:** The File Manager'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 0-21：** 文件管理器'
- en: '**Accessing the Terminal**'
  id: totrans-225
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**访问终端**'
- en: Another important program is the terminal, which you’ll use a lot when you work
    with the Raspberry Pi. In simple terms, the terminal sends text-based instructions
    through a command line to interact with your Raspberry Pi. To access the terminal,
    click the quick launch **Terminal** icon on the taskbar (labeled in [Figure 0-19](ch00.xhtml#ch00fig19))
    or go to the taskbar menu and select **Accessories** ▸ **Terminal**. You should
    see a window that looks like [Figure 0-22](ch00.xhtml#ch00fig22).
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的程序是终端，当你使用树莓派时，你将经常使用它。简单来说，终端通过命令行发送基于文本的指令，以与树莓派交互。要访问终端，点击任务栏上的快捷启动**终端**图标（如[图
    0-19](ch00.xhtml#ch00fig19)中所标记）或者进入任务栏菜单并选择**附件** ▸ **终端**。你应该会看到一个像[图 0-22](ch00.xhtml#ch00fig22)中的窗口。
- en: '![image](../images/f0020-02.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0020-02.jpg)'
- en: '**FIGURE 0-22:** The Raspberry Pi terminal'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 0-22：** 树莓派终端'
- en: In the terminal, you can type specific commands to your Raspberry Pi. For example,
    you could check what’s inside a folder using the command `ls foldername` or make
    a new folder using `mkdir foldername`. You can do basically everything you do
    when you use a computer, but instead of, say, clicking an icon, you enter some
    specific text commands.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中，你可以输入特定的命令来控制 Raspberry Pi。例如，你可以使用命令 `ls foldername` 来查看文件夹中的内容，或使用 `mkdir
    foldername` 来创建一个新文件夹。你可以像使用计算机一样做几乎所有事情，只不过不是点击图标，而是输入一些特定的文本命令。
- en: Don’t be intimidated by the terminal. It may seem a bit daunting, but throughout
    this book, each project gives you the commands you need to enter, so it will be
    easy to follow.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 不要被终端吓到。它看起来可能有点令人生畏，但本书中的每个项目都会提供你需要输入的命令，所以跟着做就很容易了。
- en: '**Connecting Your Pi to the Internet**'
  id: totrans-231
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**将 Pi 连接到互联网**'
- en: You can connect your Pi to the internet by using Wi-Fi or by connecting it to
    a modem with an Ethernet cable. Connecting via Wi-Fi is as simple as on a regular
    computer.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过 Wi-Fi 或使用以太网电缆连接 Pi 到互联网。通过 Wi-Fi 连接与普通计算机一样简单。
- en: Click the second icon on the right side of the taskbar, as shown in [Figure
    0-23](ch00.xhtml#ch00fig23). Select your network from the available connections,
    enter your network credentials, and you’re done.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 点击任务栏右侧的第二个图标，如[图 0-23](ch00.xhtml#ch00fig23)所示。选择可用连接中的网络，输入你的网络凭据，就完成了。
- en: '![image](../images/f0021-01.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0021-01.jpg)'
- en: '**FIGURE 0-23:** Connecting to Wi-Fi'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 0-23：** 连接到 Wi-Fi'
- en: If you’re using an Ethernet cable, you just have to plug it into the Pi’s Ethernet
    port.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用以太网电缆，只需将它插入 Pi 的以太网端口即可。
- en: '**Accessing the Internet and Browsing the Web**'
  id: totrans-237
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**访问互联网并浏览网页**'
- en: The Raspberry Pi browser is Chromium. To open Chromium, click the **Chromium**
    icon (a blue globe) on the taskbar, or go to the taskbar menu and select **Internet**
    ▸ **Chromium**.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi 浏览器是 Chromium。要打开 Chromium，请点击任务栏上的**Chromium**图标（一个蓝色的地球图标），或者在任务栏菜单中选择**Internet**
    ▸ **Chromium**。
- en: '[Figure 0-24](ch00.xhtml#ch00fig24) shows an open Chromium window.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 0-24](ch00.xhtml#ch00fig24) 显示了一个打开的 Chromium 窗口。'
- en: '![image](../images/f0021-02.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0021-02.jpg)'
- en: '**FIGURE 0-24:** The Chromium web browser'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 0-24：** Chromium 网络浏览器'
- en: As you can see, it’s very similar to Google Chrome. In fact, Chromium is the
    open source web browser that Google Chrome is based on.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它与 Google Chrome 非常相似。实际上，Chromium 是 Google Chrome 所基于的开源浏览器。
- en: '**Connecting an External Device**'
  id: totrans-243
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**连接外部设备**'
- en: To use an external device like a USB removable disk, you just have to insert
    the device into one of the available USB ports. A window like the one in [Figure
    0-25](ch00.xhtml#ch00fig25) should open. Select **Open in File Manager** to check
    what’s inside or to move files onto the device.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用外部设备（如 USB 可移动磁盘），只需将设备插入一个可用的 USB 端口。应该会弹出一个窗口，像[图 0-25](ch00.xhtml#ch00fig25)所示。选择**在文件管理器中打开**来查看设备内容或将文件移动到设备中。
- en: '![image](../images/f0022-01.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0022-01.jpg)'
- en: '**FIGURE 0-25:** Removable medium is inserted window'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 0-25：** 可移除介质插入窗口'
- en: Once you’re done, eject your device safely by clicking the **Eject** icon on
    the taskbar and selecting your device.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，通过点击任务栏上的**弹出**图标并选择你的设备来安全弹出设备。
- en: '**Shutting Down, Rebooting, and Logging Off**'
  id: totrans-248
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**关机、重启和注销**'
- en: When you turn off your Pi, you need to make sure you shut it down properly.
    If you just unplug the power, it may damage the Pi. The easiest way to shut down
    your Pi is to select **Shutdown** from the taskbar menu and then click **Shutdown**,
    shown in [Figure 0-26](ch00.xhtml#ch00fig26).
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 当你关闭 Pi 时，确保正确关闭。如果直接拔掉电源，可能会损坏 Pi。关闭 Pi 的最简单方法是从任务栏菜单中选择**关机**，然后点击**关机**，如[图
    0-26](ch00.xhtml#ch00fig26)所示。
- en: '![image](../images/f0022-02.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0022-02.jpg)'
- en: '**FIGURE 0-26:** Shutdown menu options'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 0-26：** 关机菜单选项'
- en: Wait until the green LED stops blinking before you remove the power adapter
    from the power plug.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在移除电源适配器之前，等待绿色 LED 停止闪烁。
- en: You can also reboot or log out of your Pi from the Shutdown menu. If you want
    to log back into your account, just enter your username and password. The logout
    option is useful if you need to switch accounts.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以从关机菜单中重新启动或注销你的 Pi。如果你想重新登录，只需输入用户名和密码即可。注销选项对于需要切换帐户时非常有用。
- en: Your Pi is now ready to run some programs! But first, let’s learn about some
    Python programming basics, including user input, variables, math operators, conditional
    statements, and loops.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 Pi 现在已准备好运行一些程序！但在此之前，让我们学习一些 Python 编程基础，包括用户输入、变量、数学运算符、条件语句和循环。
- en: '**GETTING STARTED WITH PYTHON**'
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**开始使用 Python**'
- en: Python is the programming language you’ll use in most projects in this book.
    It’s one of the most simple and easy-to-learn programming languages around, so
    even if you’ve never programmed before, this is a good starting point.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是你在本书中大多数项目中使用的编程语言。它是最简单、最易学的编程语言之一，因此即使你从未编程过，它也是一个不错的入门选择。
- en: 'Your Raspberry Pi has two versions of Python installed: Python 2 and Python
    3\. In this book, we will use Python 3 whenever possible because Python 3 is the
    most up-to-date version. Python 2 is still used by many programmers with frequent
    updates, but it is slowly going out of use.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 Raspberry Pi 安装了两个版本的 Python：Python 2 和 Python 3。在本书中，我们会尽可能使用 Python 3，因为它是最新的版本。Python
    2 仍然被许多程序员使用，并且有频繁的更新，但它正在逐渐被淘汰。
- en: '**NOTE**'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll use Python 2 only in [Project 12](ch12.xhtml#ch12), which uses packages
    unavailable in Python 3 at the time of writing.*'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们仅在 [项目 12](ch12.xhtml#ch12) 中使用 Python 2，该项目使用了 Python 3 写作时无法使用的包。*'
- en: '**Python 3 Integrated Development Environment**'
  id: totrans-260
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**Python 3 集成开发环境**'
- en: To write code in Python you need the Python 3 IDLE (*I*ntegrated *D*eve*L*opment
    *E*nvironment), which will be installed automatically when you install Raspbian.
    With your Pi connected up to a monitor, mouse, and keyboard, start IDLE by going
    to the taskbar main menu and then select **Programming** ▸ **Python 3 (IDLE)**.
    [Figure 0-27](ch00.xhtml#ch00fig27) shows the *Python shell*, which is the name
    for the IDLE window that opens.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写 Python 代码，你需要 Python 3 的 IDLE（*I*ntegrated *D*eve*L*opment *E*nvironment），安装
    Raspbian 时会自动安装该环境。将你的 Pi 连接到显示器、鼠标和键盘后，通过任务栏主菜单启动 IDLE，然后选择 **编程** ▸ **Python
    3 (IDLE)**。 [图 0-27](ch00.xhtml#ch00fig27) 显示了 *Python Shell*，它是打开的 IDLE 窗口的名称。
- en: '![image](../images/f0023-01.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0023-01.jpg)'
- en: '**FIGURE 0-27:** The Python shell'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 0-27：** Python Shell'
- en: The Python shell is where you type and run Python commands to tell Python what
    to do. Python runs your instructions with an *interpreter*, which is what actually
    understands and runs your code.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: Python Shell 是你输入并运行 Python 指令的地方，用于告诉 Python 做什么。Python 使用 *解释器* 来运行你的指令，解释器实际理解并执行你的代码。
- en: 'When the shell opens you should see the three arrows `>>>`, as shown in [Figure
    0-27](ch00.xhtml#ch00fig27)—this is called the *prompt*, and it lets you know
    the shell is ready for you the enter code. Some of the simplest instructions Python
    can run are math operations. To try it out, type the following:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Shell 打开时，你应该会看到三个箭头 `>>>`，如 [图 0-27](ch00.xhtml#ch00fig27) 所示——这叫做 *提示符*，它表示
    Shell 已准备好让你输入代码。Python 可以运行的一些最简单指令是数学运算。试试看，输入以下内容：
- en: '[PRE1]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Press ENTER and you should get the following result:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 按下 ENTER 后，你应该会看到以下结果：
- en: '[PRE2]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can see that the result doesn’t have the prompt before it. This is to show
    that it’s an *output* from Python and not input from you.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到结果前没有提示符。这是为了表明它是 Python 的 *输出*，而不是你的输入。
- en: '**Basic Python Instructions**'
  id: totrans-270
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**基础 Python 指令**'
- en: Python can understand many kinds of instructions. You can build *programs* by
    putting those instructions, or commands, together. We’ll look at the different
    kinds of instructions here.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: Python 能理解多种类型的指令。你可以通过将这些指令或命令组合起来构建 *程序*。我们将在这里讨论不同种类的指令。
- en: '**Mathematical Operators**'
  id: totrans-272
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**数学运算符**'
- en: Python is capable of doing most mathematical operations. [Table 0-2](ch00.xhtml#ch00tab2)
    lists the mathematical operators used in Python.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: Python 能执行大多数数学运算。 [表 0-2](ch00.xhtml#ch00tab2) 列出了 Python 中使用的数学运算符。
- en: '**TABLE 0-2:** Mathematical operators in Python'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 0-2：** Python 中的数学运算符'
- en: '| **OPERATOR** | **MATHEMATICAL OPERATION** |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| **运算符** | **数学运算** |'
- en: '| --- | --- |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `+` | Addition |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| `+` | 加法 |'
- en: '| `-` | Subtraction |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| `-` | 减法 |'
- en: '| `*` | Multiplication |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| `*` | 乘法 |'
- en: '| `/` | Division |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| `/` | 除法 |'
- en: '| `//` | Division, discarding the decimal point |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| `//` | 除法，舍弃小数部分 |'
- en: '| `%` | Remainder after division |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| `%` | 除法余数 |'
- en: Try more of these operations to get a feel for the shell.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试更多这些运算，感受一下 Shell 的使用。
- en: '**Python Relational Operators**'
  id: totrans-284
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**Python 关系运算符**'
- en: Python can make comparisons using *relational operators*, which compare the
    values on either sides and show the relation between them. A value, usually a
    number or letter, is one of the basic components a program works with.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: Python 可以使用*关系运算符*进行比较，这些运算符比较两边的值，并展示它们之间的关系。一个值，通常是数字或字母，是程序操作的基本组成部分。
- en: '[Table 0-3](ch00.xhtml#ch00tab3) shows the different relational operators used
    in Python.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 0-3](ch00.xhtml#ch00tab3)展示了 Python 中使用的不同关系运算符。'
- en: '**TABLE 0-3:** Relational operators in Python'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 0-3：** Python 中的关系运算符'
- en: '| **OPERATOR** | **DESCRIPTION** |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| **运算符** | **描述** |'
- en: '| --- | --- |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `==` | Equal to |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| `==` | 等于 |'
- en: '| `!=` | Not equal to |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| `!=` | 不等于 |'
- en: '| `>` | Greater than |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| `>` | 大于 |'
- en: '| `<` | Less than |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| `<` | 小于 |'
- en: '| `>=` | Greater than or equal to |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| `>=` | 大于或等于 |'
- en: '| `<=` | Less than or equal to |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| `<=` | 小于或等于 |'
- en: 'For example, enter the following in the Python shell:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 Python shell 中输入以下内容：
- en: '[PRE3]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You should get:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到：
- en: '[PRE4]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Python checks whether `2` is greater than `4` and tells you it isn’t. On the
    other hand, if you enter:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: Python 会检查`2`是否大于`4`并告诉你它不是。另一方面，如果你输入：
- en: '[PRE5]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'you’ll get:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到：
- en: '[PRE6]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Assigning Values to Variables**'
  id: totrans-304
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**给变量赋值**'
- en: A *variable* is like a box that you create to store a value. You give the variable
    a name, and when you need to use the value you can enter the variable name instead.
    [Figure 0-28](ch00.xhtml#ch00fig28) illustrates the concept. To assign a value
    to a variable you use the equal sign (`=`), with the name on the left and the
    value on the right.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*变量*就像是你用来存储值的盒子。你给变量起个名字，当你需要使用这个值时，可以输入变量的名字来代替。[图 0-28](ch00.xhtml#ch00fig28)说明了这一概念。要给变量赋值，你使用等号（`=`），变量名在左边，值在右边。
- en: '![image](../images/f0026-01.jpg)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0026-01.jpg)'
- en: '**FIGURE 0-28:** Assigning a value to a variable'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 0-28：** 给变量赋值'
- en: 'Variables are useful for storing information in a program so that you can refer
    to or reuse that information later. For example, enter the following:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 变量在程序中非常有用，可以用来存储信息，之后你可以引用或重复使用这些信息。例如，输入以下内容：
- en: '[PRE7]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this line you are creating a variable called `my_variable` that has the value
    10 assigned, as illustrated in [Figure 0-28](ch00.xhtml#ch00fig28).
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行中，你创建了一个名为`my_variable`的变量，并将值10赋给它，如[图 0-28](ch00.xhtml#ch00fig28)所示。
- en: 'Then, if you enter the variable name in the Python shell like so:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果你像下面这样在 Python shell 中输入变量名：
- en: '[PRE8]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'it should return the value stored inside as output:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该返回存储在其中的值作为输出：
- en: '[PRE9]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The names you give variables can’t have spaces and are case sensitive, so `my_variable`
    is different from `my_Variable` or `MyVariable`.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 你给变量起的名字不能有空格，并且是区分大小写的，所以`my_variable`和`my_Variable`或`MyVariable`是不同的。
- en: '**Data Types**'
  id: totrans-316
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**数据类型**'
- en: Variables can store several types of values, not just whole numbers. That’s
    where data types come in. A *data type* is a classification of a value that tells
    the interpreter what operations can be done with the value and how it should be
    stored. [Table 0-4](ch00.xhtml#ch00tab4) shows the data types you’ll use most
    often.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 变量可以存储多种类型的值，不仅仅是整数。这时数据类型就派上用场了。*数据类型*是对一个值的分类，它告诉解释器可以对该值进行哪些操作以及如何存储它。[表
    0-4](ch00.xhtml#ch00tab4)展示了你最常用的数据类型。
- en: '**TABLE 0-4:** Python data types'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 0-4：** Python 数据类型'
- en: '| **DATA TYPE** | **DESCRIPTION** |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| **数据类型** | **描述** |'
- en: '| --- | --- |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Int | Integer (whole) number |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| 整数 | 整数（完整的）数值 |'
- en: '| Float | Number with a decimal point |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| 浮点数 | 带小数点的数字 |'
- en: '| String | Set of characters between quotation marks |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| 字符串 | 由引号括起来的一组字符 |'
- en: '| Boolean | True or false |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| 布尔值 | 真或假 |'
- en: 'Let’s look at an example of each data type in the table:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看一下表中每个数据类型的示例：
- en: '[PRE10]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: These are four assignment statements. The first, assigned to `a`, is an *integer*,
    which is a whole number. The `b` variable contains a *float* value, which is a
    number with a decimal. The third value, `'Hello'`, is a *string*, which is a series
    of characters. (Note that a string must be put inside single or double quotation
    marks.) Last, `True` is a *Boolean*, which is a type that can only take either
    `True` or `False`. You saw this data type in use earlier when we used the `>`
    operator.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 这是四个赋值语句。第一个，赋给`a`的是一个*整数*，它是一个整数。`b`变量包含一个*浮点数*值，它是一个带小数点的数字。第三个值，`'Hello'`，是一个*字符串*，它是一个字符的序列。（注意，字符串必须放在单引号或双引号中。）最后，`True`是一个*布尔值*，它只能取`True`或`False`中的一个。在我们使用`>`运算符时，你已经看到过这个数据类型的用法。
- en: '**The Python Editor**'
  id: totrans-328
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**Python 编辑器**'
- en: The Python shell is good for experimenting with simple snippets of code, but
    it takes only one line at a time. To write a program, known as a *script*, you
    need to put together a lot of commands to execute in one go. The right place to
    write a script is in the *Python Editor*, which is like a word processor for writing
    code. In the editor, you can create, edit, and save Python files. You then execute
    these scripts by running the file. Python files have *.py* extension.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: Python shell 很适合用来尝试简单的代码片段，但它一次只能处理一行代码。要编写一个程序（即 *脚本*），你需要将许多命令组合在一起一次性执行。编写脚本的正确地方是
    *Python 编辑器*，它就像一个写代码的文字处理器。在编辑器中，你可以创建、编辑和保存 Python 文件。然后，你可以通过运行文件来执行这些脚本。Python
    文件的扩展名为 *.py*。
- en: To open a new file in the Python Editor, go to the Python shell and select **File**
    ▸ **New File**. A window like the one in [Figure 0-29](ch00.xhtml#ch00fig29) should
    open.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Python 编辑器中打开一个新文件，进入 Python shell 并选择 **文件** ▸ **新建文件**。一个类似于 [图 0-29](ch00.xhtml#ch00fig29)
    中的窗口应该会弹出。
- en: '![image](../images/f0027-01.jpg)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0027-01.jpg)'
- en: '**FIGURE 0-29:** The Python Editor and Python shell'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 0-29：** Python 编辑器和 Python shell'
- en: The Python Editor doesn’t have a prompt because the commands you enter will
    not be immediately executed. You save them in a file and run them later. Let’s
    write a really simple Python script to try out the editor.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: Python 编辑器没有提示符，因为你输入的命令不会立即执行。你需要将它们保存在一个文件中，稍后再运行。让我们写一个非常简单的 Python 脚本来试试编辑器。
- en: '**Your First Python Program**'
  id: totrans-334
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**你的第一个 Python 程序**'
- en: 'Traditionally, the first program you write is a simple one that displays a
    “Hello, world!” message. To do this in Python, enter the following:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，你编写的第一个程序是一个简单的程序，用来显示“Hello, world!”的信息。要在 Python 中做到这一点，请输入以下内容：
- en: '[PRE11]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The first line is a comment. *Comments* must start with a hash mark (`#`), which
    indicates that any text after the `#` should be ignored by the Python interpreter.
    Comments are useful for reminding you or whoever uses your script what the code
    is meant to do.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行是注释。*注释* 必须以井号（`#`）开头，表示井号后的任何文本都应被 Python 解释器忽略。注释对提醒你或使用你脚本的人代码的用途非常有帮助。
- en: The second line is what actually prints `Hello, world!` using the `print()`
    function. A *function* tells Python to perform a certain action; in this case,
    the `print()` function tells Python to display whatever you enter between the
    parentheses. The information inside the parentheses is called the *argument* of
    the function. The `print()` function is a built-in Python function, which means
    it is always available for you to use.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行是实际执行打印 `Hello, world!` 的代码，使用了 `print()` 函数。*函数* 告诉 Python 执行某个特定的操作；在这个例子中，`print()`
    函数告诉 Python 显示括号内的任何内容。括号内的信息被称为函数的 *参数*。`print()` 函数是 Python 的内置函数，这意味着它随时可以使用。
- en: '**NOTE**'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*All scripts in Python need a* .py *extension. Don’t forget to add the file
    extension to the name.*'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '*所有 Python 脚本都需要以* .py *扩展名结尾。别忘了给文件名加上扩展名。*'
- en: Before you can run the code, you need to save your script. Go to **File** ▸
    **Save as** and enter a name for your script—for example, *hello_world.py*—and
    then choose a folder.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在你运行代码之前，你需要先保存脚本。进入 **文件** ▸ **另存为**，并为你的脚本输入一个名称——例如 *hello_world.py*——然后选择一个文件夹。
- en: To run your script, press **F5** or go to **Run** ▸ **Run Module**. The results
    are shown in the Python shell rather than the editor. You should get a message
    saying `Hello, world!` as shown in [Figure 0-30](ch00.xhtml#ch00fig30).
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行脚本，按 **F5** 键，或者进入 **运行** ▸ **运行模块**。结果会显示在 Python shell 中，而不是编辑器中。你应该会看到一条信息，显示
    `Hello, world!`，如 [图 0-30](ch00.xhtml#ch00fig30) 所示。
- en: '![image](../images/f0028-01.jpg)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0028-01.jpg)'
- en: '**FIGURE 0-30:** Running the *hello_world.py* script'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 0-30：** 运行 *hello_world.py* 脚本'
- en: Now, try changing the argument of the `print()` function and see different messages
    being displayed on the Python shell.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尝试改变 `print()` 函数的参数，看看 Python shell 中显示不同的消息。
- en: '**Asking for User Input**'
  id: totrans-346
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**请求用户输入**'
- en: 'You can level up your program by asking for user input, meaning the user needs
    to enter some information for the program to continue. In the editor, enter the
    following snippet of code to ask the user for their name and then print a greeting
    message using that name:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过请求用户输入来提升程序的功能，这意味着用户需要输入一些信息以便程序继续运行。在编辑器中，输入以下代码片段来请求用户输入他们的名字，然后使用这个名字打印问候消息：
- en: '[PRE12]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You use the `input()` function to ask the user for input. In this example, the
    user is asked `What is your name?`. This text is displayed to the user and the
    program won’t continue until something is entered. Whatever the user enters is
    then assigned to the `username` variable so that we can use it later in the program.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用`input()`函数向用户询问输入。在这个例子中，用户会被问到`What is your name?`。这段文本会显示给用户，直到用户输入内容，程序才会继续。用户输入的内容将被赋值给`username`变量，以便我们在程序中后续使用。
- en: Save these two lines of code in a new file called *username.py* and run the
    file to see what happens. You should be asked for your name in the shell, and
    when you enter it, you should see the greeting.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 将这两行代码保存在一个名为*username.py*的新文件中，并运行文件查看会发生什么。你应该会在命令行中被询问你的名字，当你输入时，你应该能看到问候语。
- en: 'The `input()` function accepts data as strings only, so if you want to ask
    for a number you can then use later in your program, you need to convert it into
    an integer or float. For example, if you wanted to get the user’s age as an integer,
    you’d need to use the `int()` function:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`input()`函数只接受字符串类型的数据，所以如果你想获取一个数字并在后续程序中使用，你需要将其转换为整数或浮点数。例如，如果你想将用户的年龄获取为整数，你需要使用`int()`函数：'
- en: '[PRE13]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Similarly, to convert an input to a float, you use the `float()` function:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，要将输入转换为浮点数，可以使用`float()`函数：
- en: '[PRE14]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Converting strings to numbers is necessary if you want to perform mathematical
    operations on the input.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想对输入执行数学运算，将字符串转换为数字是必要的。
- en: '**Making Decisions with Conditional Statements**'
  id: totrans-356
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**使用条件语句做决策**'
- en: 'To write useful programs, you almost always need to perform different actions
    depending on whether a certain condition is true or false. In programming, these
    are called *conditional statements*, and they have the following structure:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写有用的程序，你几乎总是需要根据某个条件是否为真来执行不同的操作。在编程中，这些叫做*条件语句*，它们有如下结构：
- en: '[PRE15]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'For example, the following snippet of code tries to guess the fruit you’re
    thinking of based on the color you choose:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码片段尝试根据你选择的颜色猜测你在想的水果：
- en: '[PRE16]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The first `if` condition tests whether the user entered `red` ➊. If so, the
    program guesses that the fruit is a strawberry and prints the statement `Your
    fruit is a strawberry.` at ➋.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`if`条件测试用户是否输入了`red` ➊。如果是，程序猜测水果是草莓，并在 ➋ 输出`Your fruit is a strawberry.`。
- en: The `elif` statment stands for *else if* and runs only if the first `if` condition
    turns out not to be true. So if the user didn’t input `red`, the code checks whether
    the input is `yellow` ➌. If it is, the program guesses that the fruit is a banana.
    If not, it will check whether the color is `green` ➍, and if it is, the program
    guesses that you’ve chosen a kiwi.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '`elif`语句代表*else if*，只有在第一个`if`条件不成立时才会执行。所以，如果用户没有输入`red`，代码会检查输入是否为`yellow`
    ➌。如果是，程序猜测水果是香蕉。如果不是，它会检查颜色是否为`green` ➍，如果是，程序猜测你选择的是猕猴桃。'
- en: '**NOTE**'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Python’s standard indentation is four spaces, not a tab. However, in IDLE,
    you can press the tab key to automatically insert four spaces.*'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '*Python的标准缩进是四个空格，而不是制表符。然而，在IDLE中，你可以按Tab键自动插入四个空格。*'
- en: Notice something very important here. Some lines begin with a few spaces before
    the code—four spaces to be exact. This is called *indentation*. Indentation is
    important to define *code blocks*. For example, you have an `if` statement at
    ➊, and the following line is indented at ➋. The indentation tells Python that
    the line at ➋ belongs to the preceding `if` statement, so that line will only
    be executed if the `if` condition is true. The line at ➌ is not indented, which
    means that line doesn’t belong to the same code block and will run separately.
    Indentation is essential in Python so the interpreter knows what code to run when,
    so pay attention to the spacing as you work through this book.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这里有一个非常重要的事项。有些行的代码前面有一些空格——准确来说是四个空格。这叫做*缩进*。缩进对于定义*代码块*至关重要。例如，你在 ➊ 有一个`if`语句，接下来的代码行在
    ➋ 是缩进的。缩进告诉Python，这一行属于前面的`if`语句，因此这行代码只有在`if`条件成立时才会执行。行 ➌ 没有缩进，意味着这一行不属于同一个代码块，会单独执行。缩进在Python中是至关重要的，解释器通过缩进来确定哪些代码何时执行，所以在做本书中的练习时要特别注意空格。
- en: Last, if the user misspelled the color or didn’t type the color in lowercase,
    the `else` line ➎ runs, and the program alerts the user that the input is invalid.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果用户拼写错误或没有输入小写的颜色，`else`语句 ➎ 会执行，程序会提示用户输入无效。
- en: In summary, the script checks each condition in order. When a condition is false,
    it proceeds to the next one, and so on. When a condition is true, it runs the
    corresponding indented code, and the statement ends. Note that there is no limit
    on the number of `elif` statements in a program. It’s also not necessary to include
    an `else` clause, but if there is one, it must come at the end.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，脚本会依次检查每个条件。当一个条件为假时，它会跳到下一个条件，依此类推。当一个条件为真时，它会运行对应的缩进代码，然后语句结束。注意，程序中没有`elif`语句的数量限制。也不必包括`else`语句，但如果有`else`，它必须放在最后。
- en: Try creating some `if`/`else` statements with your own examples using the `print()`
    and `input()` functions—that’s the best way to learn.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试创建一些带有自己示例的`if`/`else`语句，使用`print()`和`input()`函数——这是最好的学习方式。
- en: '**while and for Loops**'
  id: totrans-369
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**while和for循环**'
- en: 'Loops allow you to execute a block of code multiple times for as long as a
    condition is met. There are two kinds of loops: `while` and `for` loops. For example,
    you can print all numbers from 1 to 10 with a `while` loop. Enter the following
    in the Python Editor:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 循环允许你在条件满足时多次执行一段代码。循环有两种类型：`while`循环和`for`循环。例如，你可以使用`while`循环打印从1到10的所有数字。在Python编辑器中输入以下内容：
- en: '[PRE17]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The code that belongs to the `while` loop, indicated by the indentation, is
    executed as long as the value in the variable `number` is less than or equal to
    (`<=`) 10\. In every loop, the current `number` is printed and then 1 is added
    to it.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 属于`while`循环的代码，由缩进表示，会在变量`number`的值小于或等于(`<=`)10时执行。在每次循环中，当前的`number`会被打印出来，然后加1。
- en: 'You can also print numbers from 1 to 10 using a `for` loop, like this:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`for`循环打印从1到10的数字，像这样：
- en: '[PRE18]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `for` loop is executed as long as the value in the variable `number` is
    within the range of 1 and 11\. The `range()` function automatically assigns the
    next value to the `number` variable, until 1 below the final number you specify.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环会在变量`number`的值在1到11的范围内时执行。`range()`函数会自动将下一个值赋给`number`变量，直到你指定的最终数字之前的一个值。'
- en: You should use a `for` loop when you want to repeat a block of code a certain
    number of times. Use a `while` loop when you want to repeat code until a certain
    condition is no longer met. In some situations, you can use either one, but as
    you’ll see as you work through this book, oftentimes one is more efficient than
    the other.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想要重复执行一段代码一定次数时，应该使用`for`循环。当你希望重复执行代码直到某个条件不再满足时，应该使用`while`循环。在某些情况下，你可以使用任意一种循环，但正如你在本书中看到的那样，通常其中一种比另一种更高效。
- en: '**Making a Simple Calculator**'
  id: totrans-377
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**制作一个简单的计算器**'
- en: 'To test your new programming skills, you’re going to build a calculator. The
    script for this program is very simple and uses all the concepts you’ve just learned.
    Your calculator will do the following:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试你的新编程技能，你将构建一个计算器。这个程序的脚本非常简单，使用了你刚刚学到的所有概念。你的计算器将执行以下操作：
- en: Show a welcome message
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示欢迎信息
- en: Ask the user what operation to perform
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请用户选择要执行的操作
- en: Ask the user to enter one number
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请用户输入一个数字
- en: Ask the user to enter another number
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请用户输入另一个数字
- en: Perform the calculation
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行计算
- en: Print the result
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印结果
- en: Go to the Python shell and select **File** ▸ **New File**. Copy the following
    code to the Python Editor. (Remember that all scripts are also available to download
    with the book’s resources at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*.)
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Python shell并选择**文件** ▸ **新建文件**。将以下代码复制到Python编辑器中。（记住，所有脚本也可以通过本书的资源下载，网址为*[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*。）
- en: '[PRE19]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Let’s break down how the calculator program works. The first line is just a
    comment that tells anyone who reads the program what the script does ➊. Then,
    we assign values to variables at ➋ and ➌ and print a welcome message at ➍.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来分解一下计算器程序是如何工作的。第一行只是一个注释，它告诉任何阅读程序的人这个脚本的作用 ➊。然后，我们在➋和➌处为变量赋值，并在➍处打印欢迎信息。
- en: Next we start a `while` loop ➎ that will run as long as `running` is set to
    `True`; that is, as long as the user hasn’t quit the program. We ask the user
    to choose a mathematical operation to perform using the numbers 1 to 5, and the
    program stores the value they choose in the `operation` variable ➏. We use a series
    of `if`/`elif` statements to select the right operation to run, depending on the
    input ➐. We then ask the user for the numbers to perform the operation on ➑, and
    the final line of each `if`/`elif` block performs the selected mathematical operation
    and prints the result ➒.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们开始一个`while`循环 ➎，它将在`running`设置为`True`时运行；也就是说，只要用户没有退出程序。我们让用户选择一个数学运算操作，使用数字1到5，程序将他们选择的值存储在`operation`变量中
    ➏。我们使用一系列的`if`/`elif`语句来选择正确的运算，根据输入 ➐。然后我们让用户输入进行运算的数字 ➑，每个`if`/`elif`代码块的最后一行执行选定的数学运算并打印结果
    ➒。
- en: If the user enters `5`, the `running` variable is set to `False`, and the `while`
    loop stops ➓.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户输入`5`，`running`变量将被设置为`False`，`while`循环停止 ➓。
- en: '**Running the Script**'
  id: totrans-390
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**运行脚本**'
- en: Save your script as *calculator.py*. Then to run it, press **F5** or go to **Run**
    ▸ **Run Module**. [Figure 0-31](ch00.xhtml#ch00fig31) shows what you should get.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的脚本保存为*calculator.py*。然后按**F5**或去**运行** ▸ **运行模块**。 [图 0-31](ch00.xhtml#ch00fig31)展示了你应该看到的内容。
- en: '![image](../images/f0033-01.jpg)'
  id: totrans-392
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0033-01.jpg)'
- en: '**FIGURE 0-31:** Running *calculator.py*'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 0-31：** 运行*calculator.py*'
- en: '**Taking it Further**'
  id: totrans-394
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**进一步扩展**'
- en: Congratulations! You’ve built a working calculator program. Now see what you
    can do to improve it. As on example, you may have noticed that the user input
    only accepts integers; it’s useful if a calculator can accept floats, so see if
    you can add that capability. Another improvement you can try is allowing the user
    to do calculations using more than two numbers.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经创建了一个工作计算器程序。现在看看你能做些什么来改进它。举个例子，你可能已经注意到用户输入只接受整数；如果计算器能接受浮点数，那会更有用，所以看看你能否添加这个功能。另一个你可以尝试的改进是允许用户使用超过两个数字进行计算。
