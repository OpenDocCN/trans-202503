- en: '**Primer**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**入门**'
- en: In this primer, you will get set up for everything you need in the following
    projects. We’ll introduce you to the Raspberry Pi board and its most important
    and interesting parts. Then we’ll walk you through setting up the Pi with all
    the hardware and software it needs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本入门中，你将为接下来的项目做好所有准备。我们将向你介绍树莓派板及其最重要和最有趣的部分。然后我们将带你一步步设置树莓派所需的所有硬件和软件。
- en: This is a simple process that lets you use the Pi for so many things, including
    as a regular computer! We’ll go over setting up the Pi as a computer and show
    you how to navigate the desktop and file systems. We’ll show you how to use the
    terminal, also known as the command line, to give instructions to the Pi. Finally,
    we’ll introduce you to the Python programming language, which is what we’ll be
    using to program the projects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的过程，让你可以将树莓派用于许多事情，包括作为一台普通的计算机！我们将介绍如何将树莓派设置为计算机，并展示如何操作桌面和文件系统。我们还会教你如何使用终端，也就是命令行，来给树莓派发出指令。最后，我们将介绍Python编程语言，它是我们将在项目中使用的编程语言。
- en: Once you’re done with this primer, you’ll be ready to tackle the projects.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本入门后，你将准备好开始进行项目。
- en: '**GETTING STARTED WITH THE RASPBERRY PI**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**开始使用树莓派**'
- en: We’ll start by exploring uses for the Raspberry Pi board, gathering what we
    need to get it running, and loading an operating system onto a freshly formatted
    microSD card to put in the Pi board.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从探索树莓派板的用途开始，收集使其运行所需的东西，并将操作系统加载到一张新格式化的microSD卡上，然后插入树莓派板中。
- en: 'The Raspberry Pi is a credit card–size microcomputer board that you can buy
    for about $35\. It has everything a normal computer has: a processor; RAM; ports
    to plug in a monitor, mouse, and keyboard; and the ability to connect to the internet.
    The Raspberry Pi board even has one special feature that normal computers don’t:
    General Purpose Input Output Pins (GPIOs). These GPIOs let the Pi interact with
    the real world, allowing you to build smart electronics projects and control them
    with the Pi.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派是一块信用卡大小的微型计算机板，你可以花大约$35购买。它拥有普通计算机的所有功能：处理器；RAM；用于连接显示器、鼠标和键盘的端口；以及连接互联网的能力。树莓派板甚至有一项普通计算机没有的特殊功能：通用输入输出引脚（GPIO）。这些GPIO引脚使树莓派能够与现实世界互动，让你能够构建智能电子项目并用树莓派控制它们。
- en: You can use the Raspberry Pi to do most things you do with a regular computer,
    such as browsing the web, editing documents, playing games, coding, and much more.
    [Figure 0-1](ch00.xhtml#ch00fig1) shows a Raspberry Pi being used as a desktop
    computer.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用树莓派做大多数普通计算机能做的事情，比如浏览网页、编辑文档、玩游戏、编程等等。[图0-1](ch00.xhtml#ch00fig1)展示了树莓派作为桌面计算机的使用方式。
- en: '![image](../images/f0003-01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0003-01.jpg)'
- en: '**FIGURE 0-1:** Using the Raspberry Pi as a desktop computer'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**图0-1：** 使用树莓派作为桌面计算机'
- en: However, keep in mind that the Pi isn’t as powerful as more expensive computers,
    so it has some limitations. First, it can’t keep up with the demands of some modern
    software, so not all software will work with the Pi. Second, it runs the Linux
    operating system instead of Windows or macOS, which may be more familiar to you.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，记住树莓派的性能不如更昂贵的计算机，所以它有一些限制。首先，它无法满足一些现代软件的需求，因此并非所有软件都能在树莓派上运行。其次，它运行的是Linux操作系统，而不是Windows或macOS，这些系统可能对你来说更为熟悉。
- en: '**Uses for the Raspberry Pi**'
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**树莓派的用途**'
- en: So what’s the advantage of the Raspberry Pi, if it’s like a normal computer
    but with some limitations? The Pi gives you freedom to experiment in ways you
    wouldn’t or couldn’t with your computer. Computers are expensive and much harder
    to fix, so you wouldn’t want to tinker too much without knowing exactly what you’re
    doing. However, as Linus Torvalds—the founder of Linux—said in an interview with
    BBC News, Raspberry Pi makes it possible to “afford failure.” You can play around
    with hardware and software on the Pi without worrying about breaking something
    expensive or losing all your important files!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果树莓派像一台普通的计算机，但有一些限制，它的优势是什么呢？树莓派让你能够以一种你在普通计算机上无法做到或不敢做到的方式进行实验。计算机价格昂贵且修复难度大，所以你不愿意在没有完全了解自己的操作的情况下做过多的改动。然而，正如Linux创始人Linus
    Torvalds在接受BBC新闻采访时所说，树莓派让“承受失败”成为可能。你可以在树莓派上随意玩弄硬件和软件，而不用担心损坏昂贵的设备或丢失重要文件！
- en: 'The Pi lets you experiment in two main ways:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派让你通过两种主要方式进行实验：
- en: '**Creating your own programs** The Pi comes with a set of free tools for writing
    software. If you make a mistake, you can just wipe your Pi and start over.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating your own electronics projects** The Pi board has GPIOs that allow
    you to connect sensors and other electronic devices that can interact with the
    real world. You can create useful things and have your projects running 24/7 without
    using much electricity.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'There are endless uses for Raspberry Pi. Here are some examples of projects
    people around the world have been making: a retro gaming console to play old arcade
    games; a supercomputer, built by linking multiple Pi boards; a cloud server to
    store and access your data; a media center to organize and play media on your
    TV; a home automation system to control and monitor devices in the house; a whole
    host of awesome and useful robots, like farming robots and autonomous robot cars—just
    to mention a few. For an example of a really cool Pi project, check out the SeeMore
    sculpture, shown in [Figure 0-2](ch00.xhtml#ch00fig02), which displays the beauty
    of parallel algorithms by correlating the movements of a 256-node Raspberry Pi
    cluster.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0005-01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-2:** The SeeMore project'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '**Differentiating Between Boards**'
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are several releases of the Raspberry Pi board, as shown in [Figure 0-3](ch00.xhtml#ch00fig3).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0005-02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-3:** Chronology of Raspberry Pi boards'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book we’ll be using the Raspberry Pi 3 Model B, and that’s the
    board we recommend buying. However, if you already have an older Raspberry Pi
    model, it should work with most of the projects in this book. (If you are using
    a model with 26 GPIOs instead of 40, you may need to change some of the project’s
    circuits, which may require some research. You can also consult the [“Raspberry
    Pi GPIO Pin Guide”](app01.xhtml#app01) on [page 261](app01.xhtml#page_261) for
    a pinout of older boards.)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi boards differ in a number of aspects, including the number
    of GPIOs and the type and number of connectors. [Table 0-1](ch00.xhtml#ch00tab1)
    shows the different features of the Model B boards. (Note that the newer boards
    have better features, such as more RAM and better processors. You can also see
    that the Pi 3 is the first board to have built-in Bluetooth and Wi-Fi.)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '**TABLE 0-1:** Features of the Model B boards'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '| **FEATURE** | **PI 1 MODEL B** | **PI 1 MODEL B+** | **PI 2 MODEL B** | **PI
    3 MODEL B** |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
- en: '| Processor | 700 MHz single-core ARMv6 | 700 MHz single-core ARMv6 | 900 MHz
    quadcore ARMv7 | 1.2GHz quadcore ARMv8 |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
- en: '| RAM | 512MB | 512MB | 1GB | 1GB |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
- en: '| USB ports | 2 | 4 | 4 | 4 |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
- en: '| GPIOs | 26 | 40 | 40 | 40 |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
- en: '| Ethernet port | ✓ | ✓ | ✓ | ✓ |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
- en: '| HDMI | ✓ | ✓ | ✓ | ✓ |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
- en: '| Storage | SD | MicroSD | MicroSD | MicroSD |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
- en: '| Wi-Fi | - | - | - | ✓ |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
- en: '| Bluetooth | - | - | - | ✓ |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
- en: '| Price | $35 | $25 | $35 | $35 |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
- en: '| Power source | MicroUSB | MicroUSB | MicroUSB | MicroUSB |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
- en: '**Getting to Know the Raspberry Pi and Its Accessories**'
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s take a closer look at a Raspberry Pi board. [Figure 0-4](ch00.xhtml#ch00fig4)
    shows an annotated Raspberry Pi 3 Model B board.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0006-01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-4:** The Raspberry Pi 3 Model B'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'The Raspberry Pi 3 Model B has the following components:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '**USB ports** Connect peripherals, such as a mouse and keyboard.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '**Ethernet port** Connects the Raspberry Pi to the internet.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '**Audio jack** Connects an audio device.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '**CSI (Camera Serial Interface) connector** Connects a small camera.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '**HDMI (High-Definition Multimedia Interface) connector** Connects a monitor
    or TV.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '**MicroUSB power input** Powers the Raspberry Pi. (There is no power switch
    on the Raspberry Pi board.) The microUSB connector is for power input only.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '**DSI (Display Serial Interface) connector** Allows you to easily connect DSI-compatible
    displays, such as an LCD touchscreen, with a 15-pin ribbon cable.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '**MicroSD card slot** Stores the microSD card, which holds the operating system
    and everything else the Pi needs to work.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '**Processor** Functions as the brain of your Raspberry Pi. It features a Broadcom
    BCM2837 system on a chip (SoC) with a 64-bit quad-core CPU operating at a maximum
    speed of 1.2 GHz.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '**Antenna** Picks up wireless LAN and Bluetooth signals.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '**GPIO pins** Allow you to connect sensors to collect data or send output signals
    to control an output, such as a motor or LED.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the Raspberry Pi is a bare electronic board that can’t do much
    on its own. You’ll need some accessories to get started (see [Figure 0-5](ch00.xhtml#ch00fig5)).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0007-01.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-5:** A keyboard and, from left to right, an HDMI cable, a microSD
    card, a mouse, and a power adapter'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a list of things you’ll want to purchase for the Pi:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '**Power adapter**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi 3 should be powered using a 2.5 A 5 V supply.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '**MicroSD card**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: We recommend getting an 8GB (or higher) class 10 microSD card. If you’re using
    a Raspberry Pi 1 Model B, you need a full-size SD card rather than a microSD.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '**Monitor and HDMI cable**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Your Raspberry Pi works with a monitor or a TV and uses an HDMI connection.
    Most recent TVs and monitors have an HDMI socket, so you can connect one directly
    to the Pi board using an HDMI cable. If you have an old monitor or TV, it probably
    has a VGA or DVI socket. You can still connect the Pi to these screens, but you’ll
    need a VGA- or DVI-to-HDMI adapter.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '**Mouse and keyboard**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: You can use any mouse and keyboard as long as they have an USB plug. You can
    also use a wireless keyboard and mouse as long as they come with a USB receiver
    dongle.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '**MicroSD card adapter and writer for your PC (optional)**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Most modern computers have a slot for SD cards. You insert your microSD card
    into an SD card adapter and connect it to your computer. If your computer doesn’t
    have an SD card slot, you also need to get an SD card reader/writer that connects
    via USB.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '**Ethernet cable or Wi-Fi dongle (optional)**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi 3 has built-in Wi-Fi, but older versions don’t. This means
    that older versions need an Ethernet cable or a Wi-Fi dongle to get internet connection.
    If you get a Wi-Fi dongle, make sure that it is compatible with your Pi board.
    You can go to *[https://elinux.org/RPi_USB_Wi-Fi_Adapters](https://elinux.org/RPi_USB_Wi-Fi_Adapters)*
    to find out if the dongle is compatible.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '**Protective case (optional)**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi doesn’t come with an enclosure and is fine to use as is. That
    said, we recommend purchasing a protective case for your board to make it a bit
    sturdier. If you don’t want to spend money, you can also create your own case
    using 3D printing, LEGO, or whatever you like. Just make sure the case allows
    you to access the GPIOs so you can build your electronics projects.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '*You can also run your Raspberry Pi through your computer without a keyboard,
    mouse, or monitor. This is known as* running headless.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: If you’re not sure whether your peripherals are compatible with the Raspberry
    Pi, you can check *[https://elinux.org/RPi_VerifiedPeripherals](https://elinux.org/RPi_VerifiedPeripherals)*
    to find a list of compatible and incompatible peripherals.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '**Project Component List**'
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: On top of this equipment, you’ll also need some electronics components to complete
    the projects in this book. Each project gives you a detailed list of the required
    parts at the start, and you should be able to easily find the needed components
    at most online electronics stores or with a quick Google search. We recommend
    stores like Element14/Farnell, Adafruit, ThePiHut, and SparkFun. Alternatively,
    you can also buy your parts from Amazon—make sure you get top-reviewed products.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '*For the parts that start with an * we recommend you buy an assorted pack.
    These components are really cheap and you’ll need plenty of them, so a bulk pack
    is better value.*'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a list of all parts you’ll need for the projects in this book:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi 3 Model B
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi Zero W (optional)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Breadboard
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '*5 mm LEDs (at least two LEDs with different colors)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '*Jumper wires (male-to-male and male-to-female)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '*330 Ω resistors (at least three)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 4.7 kΩ resistor
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '*Pushbuttons (at least eight)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 10 kΩ potentiometers (at least two)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: MCP3008 chip
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Common cathode RGB LED
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: WS2812B addressable RGB LED strip
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Header pins
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Logic level converter module BSS 138
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 16×2 Hitachi HD44780–compatible LCD
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 0.96-inch OLED display
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Sense HAT
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: PIR motion sensor HC-SR501
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Piezo buzzer
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: MQ-2 gas and smoke sensor
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi Camera Module v2
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Relay module HL-52S
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Plastic box enclosure
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 12 V lamp and holder
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 12 V power adapter
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Male DC barrel power jack
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: DHT22 temperature and humidity sensor
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: MotoZero add-on board
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Smart robot car chassis kit
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Four AA batteries
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Portable charger
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Lighter
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Headphones or a monitor with speakers and an HDMI cable
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also need a soldering iron and accessories like solder, solder wick,
    and a helping hand. Additionally, it can be useful to have needle-nose pliers,
    mini cutting pliers, and a wire stripper.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '**UPLOADING THE OPERATING SYSTEM**'
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Raspberry Pi runs the Linux operating system, open source software built
    by expert volunteers working together from all over the world. Because Linux is
    open source, everyone has access to the source code.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '*There are Android and Windows versions for the Pi, but they don’t work as
    well as the Linux systems. It’s better to stick with Linux, which is the most
    supported operating system for Raspberry Pi.*'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: There are several Linux distributions available for Raspberry Pi, but the recommended
    distribution for beginners is Raspbian, which has the most support in the Raspberry
    Pi community. Raspbian is also free to download.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Because the Raspberry Pi doesn’t have a hard drive, you need to install the
    operating system on the microSD card, and for that you need another, everyday
    personal computer.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: It’s easiest to install Raspbian with the New Out Of the Box Software (NOOBS),
    a simple operating system installer that contains Raspbian.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '**Downloading NOOBS**'
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To download NOOBS, go to *[https://www.raspberrypi.org/downloads/noobs/](https://www.raspberrypi.org/downloads/noobs/)*.
    NOOBS comes in two versions: NOOBS and NOOBS LITE. NOOBS LITE doesn’t come with
    Raspbian, so you need to choose the NOOBS option (see [Figure 0-6](ch00.xhtml#ch00fig6)).'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0011-01.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-6:** Downloading NOOBS'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Download ZIP** button to download NOOBS. (It’s a large file and
    will take some time to download.) Find the file in your *Downloads* folder, or
    wherever your downloads go, but don’t unpack it yet.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: You’ll you need to copy the contents of the NOOBS file to a blank microSD card,
    but first you need to format the card. Your microSD card will need at least 8GB
    to run well. Follow the instructions for the operating system on your computer.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '**Formatting a microSD card on Windows or macOS**'
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Connect your microSD card to your computer and then follow these instructions
    to format your microSD card:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Go to *[https://www.sdcard.org/downloads/formatter_4/](https://www.sdcard.org/downloads/formatter_4/)*
    and download the SD Card Formatter for Windows or Mac (see [Figure 0-7](ch00.xhtml#ch00fig7)).
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0011-02.jpg)'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 0-7:** SD Card Formatter download'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After you accept the terms, a ZIP file should begin to download.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the setup file to install the SD Card Formatter on your computer. Then,
    with your microSD card connected to your computer, open the SD Card Formatter
    application.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you’re using Windows, in the SD Card Formatter dialog, select the drive for
    your SD card from the drop-down menu and select the **Overwrite format** option.
    Click the **Format** button to format (see [Figure 0-8](ch00.xhtml#ch00fig8)).
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0012-01.jpg)'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 0-8:** The SD Card Formatter dialog on Windows'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you’re using macOS, in the SD Card Formatter dialog, select the microSD card
    drive from the drop-down menu, select **Overwrite Format**, and name your microSD
    card **BOOT**, as shown in [Figure 0-9](ch00.xhtml#ch00fig9). Then, click **Format**.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0012-02.jpg)'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 0-9:** The SD Card Formatter dialog on macOS'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Formatting a microSD card on Linux**'
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Connect your microSD card to your computer and then follow these instructions
    to format your microSD card on Linux:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Go to *[http://gparted.org/](http://gparted.org/)* and download the GParted
    software.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install and open GParted.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your microSD card at the top right, as shown in [Figure 0-10](ch00.xhtml#ch00fig10).
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0013-01.jpg)'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 0-10:** GParted on Ubuntu'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the bottom half of the window, you should see a series of partitions listed.
    Right-click one of the partitions and delete it. Repeat that process to delete
    all partitions of your microSD card so all the memory is unallocated.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the unallocated partition and select **Create New Partition**.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the File system to **fat32**, enter the Label **BOOT**, and click the **Add**
    button, as shown in [Figure 0-11](ch00.xhtml#ch00fig11). Last, click the green
    checkmark at the top of the main window to resume operation.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0013-02.jpg)'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 0-11:** Creating a new microSD Card partition in GParted'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the end, your microSD card should look like [Figure 0-12](ch00.xhtml#ch00fig12).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0014-01.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-12:** The microSD card formatted using GParted'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '**Loading Raspbian onto the microSD Card**'
  id: totrans-156
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: After the microSD card is properly formatted, plug it into your computer, extract
    the files from the *NOOBS.zip* file, and copy the files onto the card. Then safely
    eject your microSD card from your computer.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Now that your microSD card is ready to boot your Raspberry Pi, you can set up
    your Pi to act as a fully functioning desktop computer.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING UP YOUR RASPBERRY PI AS A DESKTOP COMPUTER**'
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using your Raspberry Pi as a desktop computer is like having a learning center
    that allows you to build your projects and write your own software without worrying
    about messing up your computer. This is also the easiest way for beginners to
    interact with the physical world using Raspberry Pi.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '**Connecting your Raspberry Pi**'
  id: totrans-161
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is a list of everything you need to use your Pi as a desktop computer:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: MicroSD card with NOOBS installed
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitor or TV
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HDMI cable
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mouse
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keyboard
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Power adapter
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The power adapter should be the last thing connected, but the other components
    don’t need to be connected in a specific order. For simplicity, though, we recommend
    you follow these steps:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '*If you don’t have NOOBS installed on your microSD card, go back to [“Downloading
    NOOBS”](ch00.xhtml#lev11) on [page 10](ch00.xhtml#page_10) to see how to install
    it.*'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Insert your microSD card into the microSD card slot on the Pi.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the monitor or TV to the Raspberry Pi HDMI socket with an HDMI cable.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the mouse and keyboard to the available USB ports.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the power adapter to the microUSB power input.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plug the power adapter into a power socket.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 0-13](ch00.xhtml#ch00fig13) illustrates these connections.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0015-01.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-13:** Connecting the Raspberry Pi to the essential peripherals'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: When you apply power to your Raspberry Pi, you should see one red LED and one
    green LED light up, as in [Figure 0-14](ch00.xhtml#ch00fig14). These are called
    *status LEDs*, and they provide you with some useful information.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0015-02.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-14:** Raspberry Pi board status LEDs'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: When the red LED is on, it means the Raspberry Pi is connected to a power source.
    When the green LED is blinking, there is microSD card activity.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '**Booting Up Your Pi for the First Time**'
  id: totrans-184
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As soon as you apply power to your Raspberry Pi board, it should boot automatically.
    If you set up NOOBS correctly, you should see the installation window shown in
    [Figure 0-15](ch00.xhtml#ch00fig15) after a few seconds.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0016-01.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-15:** NOOBS installation window'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '*It is very important that you correctly select your keyboard layout. Otherwise
    the wrong characters will come up on the screen when you type.*'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Raspbian should be selected by default. At the bottom of the screen, outside
    the NOOBS installation window, you need to select your language and keyboard layout,
    categorized by region.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: After setting your language and keyboard preferences, click **Install** in the
    top left of the installation window. Your Pi should then give you a prompt about
    whether to overwrite the microSD card; select **Yes** and the installation should
    begin.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: When the installation is complete, click **OK** and a message should ask you
    to restart your Pi. After restarting, you should see the Raspbian desktop environment,
    which will look something like [Figure 0-16](ch00.xhtml#ch00fig16).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0017-01.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-16:** The Raspbian desktop environment'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '*You’ll only see the installation menu on the first boot instance. The next
    time you boot your Pi, you’ll be taken directly to the desktop environment.*'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You successfully set up your Raspberry Pi as a desktop computer.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: You shouldn’t have been asked to enter a username and password, but you may
    be asked to do so in future. The default username is *pi*, and the default password
    is *raspberry*. You can change the password by going to the taskbar main menu
    and selecting **Preferences** ▸ **Raspberry Pi Configuration**. In the **System**
    tab, click the **Change Password** button to change your password, as shown in
    [Figure 0-17](ch00.xhtml#ch00fig17).
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0017-02.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-17:** Changing a password on Raspberry Pi'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: We recommend using the default user account for following the projects in this
    book. However, if you need to create a new user account, see the [“Adding a New
    User Account”](ch00.xhtml#ch00box1) box.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING A NEW USER ACCOUNT**'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a new user account to your Raspberry Pi, open the terminal and enter
    the following command, replacing username with the name you want to give to the
    user:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You’ll be prompted to enter a password twice (no characters will be displayed
    on the terminal while you type the password). You’ll then be asked further information
    about the user, which you can leave blank by pressing ENTER. Last, the terminal
    will prompt you to verify the information. If it is correct, type `Y` and press
    ENTER. You should now have a new user account.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '**Desktop Tour**'
  id: totrans-206
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As soon as you start exploring the desktop environment, you’ll notice that
    it’s very similar to a regular computer: it has a taskbar and a desktop area with
    a wastebasket. You can open, drag, resize, and close windows; create, rename,
    move, and delete folders; launch apps; and do most of the things you usually do
    on a normal desktop computer.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '**Using the Taskbar**'
  id: totrans-208
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The taskbar is at the top of the screen, and on the right side are several useful
    icons. [Figure 0-18](ch00.xhtml#ch00fig18) shows what each is.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0018-01.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-18:** Icons on the right side of the taskbar'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: The left side of the taskbar has the taskbar menu and a few useful quick launch
    icons for programs (see [Figure 0-19](ch00.xhtml#ch00fig19)).
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0019-01.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-19:** Taskbar quick launch icons'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: We encourage you to click the icons and explore the programs.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '**Exploring the Programs Menu**'
  id: totrans-216
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: When you click the taskbar menu (the Raspberry Pi symbol on the taskbar), a
    drop-down menu with submenus should open (see [Figure 0-20](ch00.xhtml#ch00fig20)).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0019-02.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-20:** The taskbar menu'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Explore each menu item to see what’s inside. For example, the Programming submenu
    contains several tools for writing software in languages like Java and Python.
    These are worth exploring by yourself at your leisure.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '**File Manager**'
  id: totrans-221
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: On the left side of the taskbar is a folder icon that opens the File Manager
    window shown on [Figure 0-21](ch00.xhtml#ch00fig21). The File Manager is a folder
    with more folders inside for you to organize your stuff. You can create, rename,
    move, and delete folders.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0020-01.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-21:** The File Manager'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '**Accessing the Terminal**'
  id: totrans-225
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Another important program is the terminal, which you’ll use a lot when you work
    with the Raspberry Pi. In simple terms, the terminal sends text-based instructions
    through a command line to interact with your Raspberry Pi. To access the terminal,
    click the quick launch **Terminal** icon on the taskbar (labeled in [Figure 0-19](ch00.xhtml#ch00fig19))
    or go to the taskbar menu and select **Accessories** ▸ **Terminal**. You should
    see a window that looks like [Figure 0-22](ch00.xhtml#ch00fig22).
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0020-02.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-22:** The Raspberry Pi terminal'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: In the terminal, you can type specific commands to your Raspberry Pi. For example,
    you could check what’s inside a folder using the command `ls foldername` or make
    a new folder using `mkdir foldername`. You can do basically everything you do
    when you use a computer, but instead of, say, clicking an icon, you enter some
    specific text commands.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Don’t be intimidated by the terminal. It may seem a bit daunting, but throughout
    this book, each project gives you the commands you need to enter, so it will be
    easy to follow.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '**Connecting Your Pi to the Internet**'
  id: totrans-231
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: You can connect your Pi to the internet by using Wi-Fi or by connecting it to
    a modem with an Ethernet cable. Connecting via Wi-Fi is as simple as on a regular
    computer.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: Click the second icon on the right side of the taskbar, as shown in [Figure
    0-23](ch00.xhtml#ch00fig23). Select your network from the available connections,
    enter your network credentials, and you’re done.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0021-01.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-23:** Connecting to Wi-Fi'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: If you’re using an Ethernet cable, you just have to plug it into the Pi’s Ethernet
    port.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '**Accessing the Internet and Browsing the Web**'
  id: totrans-237
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The Raspberry Pi browser is Chromium. To open Chromium, click the **Chromium**
    icon (a blue globe) on the taskbar, or go to the taskbar menu and select **Internet**
    ▸ **Chromium**.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 0-24](ch00.xhtml#ch00fig24) shows an open Chromium window.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0021-02.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-24:** The Chromium web browser'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, it’s very similar to Google Chrome. In fact, Chromium is the
    open source web browser that Google Chrome is based on.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '**Connecting an External Device**'
  id: totrans-243
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To use an external device like a USB removable disk, you just have to insert
    the device into one of the available USB ports. A window like the one in [Figure
    0-25](ch00.xhtml#ch00fig25) should open. Select **Open in File Manager** to check
    what’s inside or to move files onto the device.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0022-01.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-25:** Removable medium is inserted window'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Once you’re done, eject your device safely by clicking the **Eject** icon on
    the taskbar and selecting your device.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '**Shutting Down, Rebooting, and Logging Off**'
  id: totrans-248
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you turn off your Pi, you need to make sure you shut it down properly.
    If you just unplug the power, it may damage the Pi. The easiest way to shut down
    your Pi is to select **Shutdown** from the taskbar menu and then click **Shutdown**,
    shown in [Figure 0-26](ch00.xhtml#ch00fig26).
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0022-02.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-26:** Shutdown menu options'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Wait until the green LED stops blinking before you remove the power adapter
    from the power plug.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: You can also reboot or log out of your Pi from the Shutdown menu. If you want
    to log back into your account, just enter your username and password. The logout
    option is useful if you need to switch accounts.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: Your Pi is now ready to run some programs! But first, let’s learn about some
    Python programming basics, including user input, variables, math operators, conditional
    statements, and loops.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING STARTED WITH PYTHON**'
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python is the programming language you’ll use in most projects in this book.
    It’s one of the most simple and easy-to-learn programming languages around, so
    even if you’ve never programmed before, this is a good starting point.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: 'Your Raspberry Pi has two versions of Python installed: Python 2 and Python
    3\. In this book, we will use Python 3 whenever possible because Python 3 is the
    most up-to-date version. Python 2 is still used by many programmers with frequent
    updates, but it is slowly going out of use.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll use Python 2 only in [Project 12](ch12.xhtml#ch12), which uses packages
    unavailable in Python 3 at the time of writing.*'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '**Python 3 Integrated Development Environment**'
  id: totrans-260
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To write code in Python you need the Python 3 IDLE (*I*ntegrated *D*eve*L*opment
    *E*nvironment), which will be installed automatically when you install Raspbian.
    With your Pi connected up to a monitor, mouse, and keyboard, start IDLE by going
    to the taskbar main menu and then select **Programming** ▸ **Python 3 (IDLE)**.
    [Figure 0-27](ch00.xhtml#ch00fig27) shows the *Python shell*, which is the name
    for the IDLE window that opens.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0023-01.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-27:** The Python shell'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: The Python shell is where you type and run Python commands to tell Python what
    to do. Python runs your instructions with an *interpreter*, which is what actually
    understands and runs your code.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: 'When the shell opens you should see the three arrows `>>>`, as shown in [Figure
    0-27](ch00.xhtml#ch00fig27)—this is called the *prompt*, and it lets you know
    the shell is ready for you the enter code. Some of the simplest instructions Python
    can run are math operations. To try it out, type the following:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Press ENTER and you should get the following result:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can see that the result doesn’t have the prompt before it. This is to show
    that it’s an *output* from Python and not input from you.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '**Basic Python Instructions**'
  id: totrans-270
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Python can understand many kinds of instructions. You can build *programs* by
    putting those instructions, or commands, together. We’ll look at the different
    kinds of instructions here.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '**Mathematical Operators**'
  id: totrans-272
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Python is capable of doing most mathematical operations. [Table 0-2](ch00.xhtml#ch00tab2)
    lists the mathematical operators used in Python.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: '**TABLE 0-2:** Mathematical operators in Python'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '| **OPERATOR** | **MATHEMATICAL OPERATION** |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
- en: '| `+` | Addition |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
- en: '| `-` | Subtraction |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
- en: '| `*` | Multiplication |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
- en: '| `/` | Division |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
- en: '| `//` | Division, discarding the decimal point |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
- en: '| `%` | Remainder after division |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
- en: Try more of these operations to get a feel for the shell.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '**Python Relational Operators**'
  id: totrans-284
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Python can make comparisons using *relational operators*, which compare the
    values on either sides and show the relation between them. A value, usually a
    number or letter, is one of the basic components a program works with.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 0-3](ch00.xhtml#ch00tab3) shows the different relational operators used
    in Python.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '**TABLE 0-3:** Relational operators in Python'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '| **OPERATOR** | **DESCRIPTION** |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
- en: '| `==` | Equal to |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
- en: '| `!=` | Not equal to |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
- en: '| `>` | Greater than |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
- en: '| `<` | Less than |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
- en: '| `>=` | Greater than or equal to |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
- en: '| `<=` | Less than or equal to |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
- en: 'For example, enter the following in the Python shell:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You should get:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Python checks whether `2` is greater than `4` and tells you it isn’t. On the
    other hand, if you enter:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'you’ll get:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Assigning Values to Variables**'
  id: totrans-304
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: A *variable* is like a box that you create to store a value. You give the variable
    a name, and when you need to use the value you can enter the variable name instead.
    [Figure 0-28](ch00.xhtml#ch00fig28) illustrates the concept. To assign a value
    to a variable you use the equal sign (`=`), with the name on the left and the
    value on the right.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0026-01.jpg)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-28:** Assigning a value to a variable'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: 'Variables are useful for storing information in a program so that you can refer
    to or reuse that information later. For example, enter the following:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this line you are creating a variable called `my_variable` that has the value
    10 assigned, as illustrated in [Figure 0-28](ch00.xhtml#ch00fig28).
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, if you enter the variable name in the Python shell like so:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'it should return the value stored inside as output:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The names you give variables can’t have spaces and are case sensitive, so `my_variable`
    is different from `my_Variable` or `MyVariable`.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '**Data Types**'
  id: totrans-316
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Variables can store several types of values, not just whole numbers. That’s
    where data types come in. A *data type* is a classification of a value that tells
    the interpreter what operations can be done with the value and how it should be
    stored. [Table 0-4](ch00.xhtml#ch00tab4) shows the data types you’ll use most
    often.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '**TABLE 0-4:** Python data types'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: '| **DATA TYPE** | **DESCRIPTION** |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
- en: '| Int | Integer (whole) number |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
- en: '| Float | Number with a decimal point |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
- en: '| String | Set of characters between quotation marks |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
- en: '| Boolean | True or false |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
- en: 'Let’s look at an example of each data type in the table:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: These are four assignment statements. The first, assigned to `a`, is an *integer*,
    which is a whole number. The `b` variable contains a *float* value, which is a
    number with a decimal. The third value, `'Hello'`, is a *string*, which is a series
    of characters. (Note that a string must be put inside single or double quotation
    marks.) Last, `True` is a *Boolean*, which is a type that can only take either
    `True` or `False`. You saw this data type in use earlier when we used the `>`
    operator.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: '**The Python Editor**'
  id: totrans-328
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Python shell is good for experimenting with simple snippets of code, but
    it takes only one line at a time. To write a program, known as a *script*, you
    need to put together a lot of commands to execute in one go. The right place to
    write a script is in the *Python Editor*, which is like a word processor for writing
    code. In the editor, you can create, edit, and save Python files. You then execute
    these scripts by running the file. Python files have *.py* extension.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: To open a new file in the Python Editor, go to the Python shell and select **File**
    ▸ **New File**. A window like the one in [Figure 0-29](ch00.xhtml#ch00fig29) should
    open.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0027-01.jpg)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-29:** The Python Editor and Python shell'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: The Python Editor doesn’t have a prompt because the commands you enter will
    not be immediately executed. You save them in a file and run them later. Let’s
    write a really simple Python script to try out the editor.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '**Your First Python Program**'
  id: totrans-334
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Traditionally, the first program you write is a simple one that displays a
    “Hello, world!” message. To do this in Python, enter the following:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The first line is a comment. *Comments* must start with a hash mark (`#`), which
    indicates that any text after the `#` should be ignored by the Python interpreter.
    Comments are useful for reminding you or whoever uses your script what the code
    is meant to do.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: The second line is what actually prints `Hello, world!` using the `print()`
    function. A *function* tells Python to perform a certain action; in this case,
    the `print()` function tells Python to display whatever you enter between the
    parentheses. The information inside the parentheses is called the *argument* of
    the function. The `print()` function is a built-in Python function, which means
    it is always available for you to use.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '*All scripts in Python need a* .py *extension. Don’t forget to add the file
    extension to the name.*'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: Before you can run the code, you need to save your script. Go to **File** ▸
    **Save as** and enter a name for your script—for example, *hello_world.py*—and
    then choose a folder.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: To run your script, press **F5** or go to **Run** ▸ **Run Module**. The results
    are shown in the Python shell rather than the editor. You should get a message
    saying `Hello, world!` as shown in [Figure 0-30](ch00.xhtml#ch00fig30).
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0028-01.jpg)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-30:** Running the *hello_world.py* script'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: Now, try changing the argument of the `print()` function and see different messages
    being displayed on the Python shell.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: '**Asking for User Input**'
  id: totrans-346
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'You can level up your program by asking for user input, meaning the user needs
    to enter some information for the program to continue. In the editor, enter the
    following snippet of code to ask the user for their name and then print a greeting
    message using that name:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You use the `input()` function to ask the user for input. In this example, the
    user is asked `What is your name?`. This text is displayed to the user and the
    program won’t continue until something is entered. Whatever the user enters is
    then assigned to the `username` variable so that we can use it later in the program.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: Save these two lines of code in a new file called *username.py* and run the
    file to see what happens. You should be asked for your name in the shell, and
    when you enter it, you should see the greeting.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: 'The `input()` function accepts data as strings only, so if you want to ask
    for a number you can then use later in your program, you need to convert it into
    an integer or float. For example, if you wanted to get the user’s age as an integer,
    you’d need to use the `int()` function:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Similarly, to convert an input to a float, you use the `float()` function:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Converting strings to numbers is necessary if you want to perform mathematical
    operations on the input.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: '**Making Decisions with Conditional Statements**'
  id: totrans-356
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'To write useful programs, you almost always need to perform different actions
    depending on whether a certain condition is true or false. In programming, these
    are called *conditional statements*, and they have the following structure:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'For example, the following snippet of code tries to guess the fruit you’re
    thinking of based on the color you choose:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The first `if` condition tests whether the user entered `red` ➊. If so, the
    program guesses that the fruit is a strawberry and prints the statement `Your
    fruit is a strawberry.` at ➋.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: The `elif` statment stands for *else if* and runs only if the first `if` condition
    turns out not to be true. So if the user didn’t input `red`, the code checks whether
    the input is `yellow` ➌. If it is, the program guesses that the fruit is a banana.
    If not, it will check whether the color is `green` ➍, and if it is, the program
    guesses that you’ve chosen a kiwi.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: '*Python’s standard indentation is four spaces, not a tab. However, in IDLE,
    you can press the tab key to automatically insert four spaces.*'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: Notice something very important here. Some lines begin with a few spaces before
    the code—four spaces to be exact. This is called *indentation*. Indentation is
    important to define *code blocks*. For example, you have an `if` statement at
    ➊, and the following line is indented at ➋. The indentation tells Python that
    the line at ➋ belongs to the preceding `if` statement, so that line will only
    be executed if the `if` condition is true. The line at ➌ is not indented, which
    means that line doesn’t belong to the same code block and will run separately.
    Indentation is essential in Python so the interpreter knows what code to run when,
    so pay attention to the spacing as you work through this book.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: Last, if the user misspelled the color or didn’t type the color in lowercase,
    the `else` line ➎ runs, and the program alerts the user that the input is invalid.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: In summary, the script checks each condition in order. When a condition is false,
    it proceeds to the next one, and so on. When a condition is true, it runs the
    corresponding indented code, and the statement ends. Note that there is no limit
    on the number of `elif` statements in a program. It’s also not necessary to include
    an `else` clause, but if there is one, it must come at the end.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: Try creating some `if`/`else` statements with your own examples using the `print()`
    and `input()` functions—that’s the best way to learn.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: '**while and for Loops**'
  id: totrans-369
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Loops allow you to execute a block of code multiple times for as long as a
    condition is met. There are two kinds of loops: `while` and `for` loops. For example,
    you can print all numbers from 1 to 10 with a `while` loop. Enter the following
    in the Python Editor:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The code that belongs to the `while` loop, indicated by the indentation, is
    executed as long as the value in the variable `number` is less than or equal to
    (`<=`) 10\. In every loop, the current `number` is printed and then 1 is added
    to it.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also print numbers from 1 to 10 using a `for` loop, like this:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `for` loop is executed as long as the value in the variable `number` is
    within the range of 1 and 11\. The `range()` function automatically assigns the
    next value to the `number` variable, until 1 below the final number you specify.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: You should use a `for` loop when you want to repeat a block of code a certain
    number of times. Use a `while` loop when you want to repeat code until a certain
    condition is no longer met. In some situations, you can use either one, but as
    you’ll see as you work through this book, oftentimes one is more efficient than
    the other.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: '**Making a Simple Calculator**'
  id: totrans-377
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To test your new programming skills, you’re going to build a calculator. The
    script for this program is very simple and uses all the concepts you’ve just learned.
    Your calculator will do the following:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: Show a welcome message
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ask the user what operation to perform
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ask the user to enter one number
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ask the user to enter another number
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform the calculation
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Print the result
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go to the Python shell and select **File** ▸ **New File**. Copy the following
    code to the Python Editor. (Remember that all scripts are also available to download
    with the book’s resources at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*.)
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Let’s break down how the calculator program works. The first line is just a
    comment that tells anyone who reads the program what the script does ➊. Then,
    we assign values to variables at ➋ and ➌ and print a welcome message at ➍.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: Next we start a `while` loop ➎ that will run as long as `running` is set to
    `True`; that is, as long as the user hasn’t quit the program. We ask the user
    to choose a mathematical operation to perform using the numbers 1 to 5, and the
    program stores the value they choose in the `operation` variable ➏. We use a series
    of `if`/`elif` statements to select the right operation to run, depending on the
    input ➐. We then ask the user for the numbers to perform the operation on ➑, and
    the final line of each `if`/`elif` block performs the selected mathematical operation
    and prints the result ➒.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: If the user enters `5`, the `running` variable is set to `False`, and the `while`
    loop stops ➓.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: '**Running the Script**'
  id: totrans-390
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Save your script as *calculator.py*. Then to run it, press **F5** or go to **Run**
    ▸ **Run Module**. [Figure 0-31](ch00.xhtml#ch00fig31) shows what you should get.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0033-01.jpg)'
  id: totrans-392
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-31:** Running *calculator.py*'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it Further**'
  id: totrans-394
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Congratulations! You’ve built a working calculator program. Now see what you
    can do to improve it. As on example, you may have noticed that the user input
    only accepts integers; it’s useful if a calculator can accept floats, so see if
    you can add that capability. Another improvement you can try is allowing the user
    to do calculations using more than two numbers.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
