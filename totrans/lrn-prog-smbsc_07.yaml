- en: '**7**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**7**'
- en: '**EMPOWERING PROGRAMS WITH MATH**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**用数学赋能程序**'
- en: '![image](graphics/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/common01.jpg)'
- en: If mathematics bores or scares you, that’s okay. You’ll soon realize how easy
    Small Basic makes it for you to write programs that do math for you. Many programs
    use only simple operations like addition, subtraction, multiplication, and division.
    For these types of problems, you need just the four basic math operators (`+`,
    `–`, `*`, and `/`). The asterisk (`*`) represents multiplication, and the slash
    (`/`) represents division.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数学让你感到无聊或害怕，那也没关系。你很快就会发现，Small Basic让你编写执行数学运算的程序变得非常简单。许多程序仅使用加法、减法、乘法和除法等基本运算。对于这些类型的问题，你只需要四个基本的数学运算符（`+`、`–`、`*`和`/`）。星号（`*`）表示乘法，而斜杠（`/`）表示除法。
- en: Other programs need to use some of the math functions that you might have learned
    in algebra (like square root, absolute value, and trigonometric functions). Small
    Basic’s `Math` object provides these functions and many others.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 其他程序可能需要使用一些你在代数中学过的数学函数（例如平方根、绝对值和三角函数）。Small Basic的`Math`对象提供了这些函数以及其他许多函数。
- en: If you don’t know what a square root or a trigonometric function is, don’t panic;
    you still can write programs using these functions. And it’s okay to skip some
    of the examples in this chapter, too.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不知道什么是平方根或三角函数，别担心；你依然可以使用这些函数编写程序。而且，你也可以跳过本章的一些示例。
- en: 'To use any of the `Math` object methods, you’ll write a statement like this:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用任何`Math`对象的方法，你将编写如下语句：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, you call the `SquareRoot()` method and pass 16 to it (to find
    the square root of 16). The output, or result of a method, is called the *return
    value*. In this statement, the method’s return value is assigned to the `ans`
    variable (short for *answer*). In this chapter, you’ll learn about the `Math`
    object’s methods and how to put them to work.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你调用`SquareRoot()`方法并传入16（来求16的平方根）。方法的输出结果称为*返回值*。在这个语句中，方法的返回值被赋值给`ans`变量（即*答案*的缩写）。在本章中，你将学习`Math`对象的方法，并了解如何将它们投入实际使用。
- en: '**Exponent Methods**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**指数方法**'
- en: The `Math` object has four methods related to exponents, but we’ll cover just
    `SquareRoot()` and `Power()` in this book.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`Math`对象有四个与指数相关的方法，但本书只会介绍`SquareRoot()`和`Power()`这两个。'
- en: '***SquareRoot() and Good Old Pythagoras***'
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***SquareRoot() 和古老的毕达哥拉斯***'
- en: 'In this first example, we’ll find the length of the longest side, or *hypotenuse*,
    of a right triangle. If you call the lengths of the other two sides `s1` and `s2`,
    the Pythagorean Theorem tells you that the length of the hypotenuse is the square
    root of the sum of each side squared. Here’s the equation:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第一个示例中，我们将找到直角三角形的最长边，或称*斜边*的长度。如果你将其他两条边的长度称为`s1`和`s2`，那么勾股定理告诉你，斜边的长度是每条边的平方和的平方根。公式如下：
- en: '![image](graphics/f0084-01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f0084-01.jpg)'
- en: We put this formula in the program in [Listing 7-1](ch07.html#ch7ex1) so you
    don’t have to think about it too much. Given the two side lengths of a right triangle,
    the following program uses the Pythagorean Theorem to calculate the length of
    the hypotenuse.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这个公式放入了[列表 7-1](ch07.html#ch7ex1)的程序中，这样你就不必过多思考它了。给定直角三角形的两条边长，以下程序使用勾股定理计算斜边的长度。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 7-1: Finding the length of a hypotenuse*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 7-1：求斜边长度*'
- en: This program prompts the user to enter the length of the first side (line 2)
    and then saves the input in `s1` (line 3). It then asks for the second input and
    saves it in `s2` (line 6). Then it computes the length of the hypotenuse (line
    8) and displays the result (line 9). On line 8, notice how the square of `s1`
    (and `s2`) was computed by multiplying `s1` (and `s2`) by itself.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序提示用户输入第一条边的长度（第2行），然后将输入值保存在`s1`中（第3行）。接着它要求输入第二个值并保存在`s2`中（第6行）。然后它计算斜边的长度（第8行）并显示结果（第9行）。在第8行，注意到`
    s1`（和`s2`）的平方是通过将`s1`（和`s2`）乘以它们自己来计算的。
- en: 'Here’s a sample run of our program. Remember that this program works only with
    right triangles:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们程序的一个示范运行。记住，这个程序只适用于直角三角形：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '***Powerful Powers***'
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***强大的指数运算***'
- en: 'You can use `Power()` for all sorts of calculations that involve exponents,
    like taking 3 to the 5th power. You might see this written in math class as 3⁵,
    which is the same as 3 × 3 × 3 × 3 × 3\. The 3 is called the *base*, and the 5
    is the *exponent*. Here’s how you could perform this calculation in Small Basic:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `Power()` 进行各种涉及指数的计算，比如计算 3 的 5 次方。你可能在数学课上看到它写作 3⁵，它等于 3 × 3 × 3 × 3
    × 3。这里的 3 被称为 *底数*，5 被称为 *指数*。以下是如何在 Small Basic 中进行此计算：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Notice that `Power()` takes two arguments: the first is the base, and the second
    is the exponent. The result is saved in the `answer` variable. The second statement
    displays the output so you can check the answer.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`Power()` 接受两个参数：第一个是底数，第二个是指数。结果保存在 `answer` 变量中。第二条语句显示输出结果，以便你检查答案。
- en: 'Now let’s look at a program that’s a little more complicated. We’ll use the
    `Power()` method to show you how money grows. If you deposit *P* dollars at a
    bank that gives an interest rate of *r* percent, then at the end of *n* years
    you’ll have *A* dollars:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一个稍微复杂的程序。我们将使用 `Power()` 方法来展示钱是如何增长的。如果你在一家银行存入 *P* 美元，利率为 *r*%，那么在
    *n* 年后你将拥有 *A* 美元：
- en: '*A* = *P* × (1 + *r*)^(*n*)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*A* = *P* × (1 + *r*)^(*n*)'
- en: Without worrying about where this formula came from, let’s write a program that
    computes the value of *A* for given values of *P*, *r*, and *n* (entered by the
    user). Enter the program in [Listing 7-2](ch07.html#ch7ex2).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 不用担心这个公式的来源，让我们编写一个程序来计算给定 *P*、*r* 和 *n*（由用户输入）的 *A* 的值。将程序输入到[示例 7-2](ch07.html#ch7ex2)中。
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 7-2: Calculating how your money grows*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 7-2：计算你的钱如何增长*'
- en: 'Run the program to see how much money you’ll have in 20 years if you deposit
    $1,000 with an interest rate of 6%:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序，看看如果你存入 1,000 美元，年利率为 6%，20 年后你将拥有多少钱：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We admit it’s rather strange to see dollars and cents written with so many decimal
    places. In this case, you don’t need all those digits to the right of the decimal
    point. Next, you’ll learn how to round this long answer to the nearest dollars
    and cents.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们承认看到美元和分数写得有那么多小数位数确实很奇怪。在这种情况下，你不需要这么多的小数位。接下来，你将学习如何将这个长的答案四舍五入到最接近的美元和分。
- en: '**TRY IT OUT 7-1**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试一下 7-1**'
- en: The circus is looking for talent, and they think you’re the one! They want to
    pay you $1 for balancing one cat on your head, $2 for balancing two cats on your
    head, $4 for balancing a third cat, and so on, doubling the money with each cat
    you add to the stack! Write a program to find out how much money you get when
    you have *n* number of cats balanced on your head, where *n* is entered by the
    user. Is it enough to retire and buy a cat mansion?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 马戏团正在寻找人才，他们认为你就是那个人！他们愿意支付你 1 美元来让你在头上平衡一只猫，2 美元来让你平衡两只猫，4 美元来平衡第三只猫，以此类推，每增加一只猫，报酬翻倍！编写一个程序，计算当你在头上平衡
    *n* 只猫时，你会得到多少钱，其中 *n* 是由用户输入的。这些钱够你退休并买个猫咪大宅吗？
- en: '**Rounding Methods**'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**四舍五入方法**'
- en: Sometimes you’ll need to round numbers in your programs. For example, if your
    program finds the average number of children per household in your neighborhood,
    you don’t want your program to display 2.25 (two and a quarter children per house).
    That wouldn’t make any sense!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你需要在程序中对数字进行四舍五入。例如，如果你的程序计算了你所在社区每户的平均子女数，你肯定不希望程序显示 2.25（每户两个零点二五个孩子）。这显然不合适！
- en: 'The `Math` object gives you three methods that round or chop numbers: `Round()`,
    `Floor()`, and `Ceiling()`. See [Figure 7-1](ch07.html#ch7fig1) for a quick overview
    of what each method does to a number.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`Math` 对象提供了三个方法来对数字进行四舍五入或截断：`Round()`、`Floor()` 和 `Ceiling()`。请参见[图 7-1](ch07.html#ch7fig1)，快速了解每个方法对数字的作用。'
- en: '`Round(x)` returns the whole number (or integer) nearest to `x`. `Floor(x)`
    returns the integer that’s less than or equal to `x`, and `Ceiling(x)` returns
    the integer that’s greater than or equal to `x`. Experiment with each of these
    different methods to see what results you get.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`Round(x)` 返回最接近 `x` 的整数。`Floor(x)` 返回小于或等于 `x` 的整数，而 `Ceiling(x)` 返回大于或等于
    `x` 的整数。试验这些不同的方法，看看你得到什么结果。'
- en: 'Let’s use this rounding knowledge to fix the output of our interest calculator.
    Add the following statement after line 11 in [Listing 7-2](ch07.html#ch7ex2):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们利用这些四舍五入的知识来修正我们利息计算器的输出。在[示例 7-2](ch07.html#ch7ex2)的第 11 行后添加以下语句：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After computing `A`, you round it and assign the rounded result back to `A`.
    When you run the program now with the same inputs, it will display $3207\. Much
    better!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 计算完`A`后，你将其四舍五入并将四舍五入后的结果重新赋值给`A`。当你用相同的输入重新运行程序时，它将显示$3207。太好了！
- en: '![image](graphics/f07-01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f07-01.jpg)'
- en: '*Figure 7-1: The rounding methods with example arguments and return values*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-1：带有示例参数和返回值的四舍五入方法*'
- en: '***Traditional Rounding***'
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***传统四舍五入***'
- en: Be careful when you use the `Round()` method if the fraction part of the number
    is exactly 0.5\. In this case, the `Round()` method rounds to the nearest even
    integer (this is called *banker’s rounding*). For example, 0.5 and –0.5 are rounded
    to 0, 1.5 and 2.5 are rounded to 2.0, and –1.5 and –2.5 are rounded to –2\. This
    is different from what you learned in algebra, where the 0.5 fractions always
    round up to 1! Even though it’s not what you’re used to, banker’s rounding is
    very common and is regularly used by bankers, which gives it its name.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用`Round()`方法时，如果数字的小数部分恰好是0.5，请小心。在这种情况下，`Round()`方法会将数字四舍五入到最接近的偶数整数（这叫做*银行家舍入*）。例如，0.5和-0.5会四舍五入为0，1.5和2.5会四舍五入为2.0，-1.5和-2.5会四舍五入为-2。这与你在代数中学到的不同，在代数中0.5的分数总是向上舍入到1！尽管这不是你习惯的方式，但银行家舍入非常常见，并且被银行家广泛使用，因此得名。
- en: 'But how can we make Small Basic round numbers the way you learned in school
    (where the 0.5 fraction is always rounded up)? We’ll do some fancy footwork using
    the `Floor()` method instead of the `Round()` method, like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们如何让Small Basic按照你在学校学到的方式四舍五入数字（即0.5的分数总是向上舍入）呢？我们将使用`Floor()`方法而不是`Round()`方法来做一些巧妙的处理，如下所示：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Using this trick, `x` represents whatever value you want to round. So if `x`
    is 0.6, then `x` + 0.5 = 1.1, and `Floor(1.1)` = 1\. Cool! That’s exactly how
    we’d expect it to work.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个技巧，`x`表示你想要四舍五入的任何值。所以如果`x`是0.6，那么`x` + 0.5 = 1.1，`Floor(1.1)` = 1。酷吧！这正是我们期望的效果。
- en: But let’s say `x` is 2.5\. If we just used `Math.Round(2.5)`, we would get 2,
    which isn’t the result you would want if you wanted to use traditional rounding.
    We want to round up and get 3\. Using our fancy trick, you’d get `x` + 0.5 = 3.0,
    and `Floor(3.0)` = 3\. Now that’s more like it! This gets the values you’d expect
    if you wanted to round a number with a .5 fraction.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 假设`x`是2.5。如果我们只使用`Math.Round(2.5)`，我们会得到2，这不是你希望的传统四舍五入的结果。我们想要四舍五入并得到3。使用我们巧妙的技巧，你会得到`x`
    + 0.5 = 3.0，`Floor(3.0)` = 3。现在这才是我们想要的！这样就得到了你期望的结果，如果你想四舍五入一个带有.5的小数。
- en: '***Rounding to the Nearest Hundredth***'
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***四舍五入到最接近的百分位数***'
- en: 'Let’s explore [Listing 7-2](ch07.html#ch7ex2) a bit more. Using `Round()` or
    `Floor()` on the answer gives you a whole number (dollars only). But what if you
    want to show the amount of money to the nearest penny? How can you make Small
    Basic round the answer to the nearest hundredth? Consider this statement:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再看看[例子 7-2](ch07.html#ch7ex2)。使用`Round()`或`Floor()`处理结果会得到一个整数（只有美元）。但如果你想要显示到最接近的便士的金额怎么办？如何让Small
    Basic将答案四舍五入到最接近的百分位数呢？考虑这个语句：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: For example, if `x = 2.8735`, then `100 * x + 0.5 = 287.85`, and the `Floor()`
    method returns 287\. Dividing 287 by 100 is 2.87, which is the result we want.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果`x = 2.8735`，那么`100 * x + 0.5 = 287.85`，`Floor()`方法返回287。将287除以100得到2.87，这是我们想要的结果。
- en: 'You can also round to the nearest hundredth using this statement:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用以下语句四舍五入到最接近的百分位数：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let’s use this second technique to round the answer from [Listing 7-2](ch07.html#ch7ex2)
    to the nearest penny. Add the following statement after line 11 in [Listing 7-2](ch07.html#ch7ex2):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用第二种技术将[例子 7-2](ch07.html#ch7ex2)中的答案四舍五入到最接近的便士。在[例子 7-2](ch07.html#ch7ex2)的第11行之后，添加以下语句：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: After computing `A` in line 11, the program rounds it to the nearest hundredth
    (nearest penny) and saves the rounded answer back in `A`. If you run the program
    now using the original inputs, the output will be $3207.14\. Perfect! Now we’re
    talking money!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在第11行计算完`A`后，程序将其四舍五入到最接近的百分位数（最接近的便士），并将四舍五入后的答案保存回`A`。如果你现在使用原始输入重新运行程序，输出将是$3207.14。完美！现在我们在谈钱了！
- en: '**TRY IT OUT 7-2**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试一下 7-2**'
- en: Helen is having a tough time at her store. She uses a calculator to add the
    6% sales tax to the purchase price. For example, if a customer’s total comes to
    $27.46, she multiplies 27.46 by 1.06 to get 29.1076\. But should she charge the
    customer $29.10 or $29.11? She doesn’t have time to do these calculations herself!
    Her store keeps her much too busy!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 海伦在商店遇到了一些麻烦。她用计算器把6%的销售税加到购买价格上。例如，如果顾客的总额是27.46美元，她会将27.46乘以1.06得到29.1076。但是，她应该向顾客收取29.10美元还是29.11美元？她没有时间自己做这些计算！她的店铺把她忙得不可开交！
- en: Helen heard about your programming skills, so she’s coming to you for help.
    She needs a program that lets her enter the total purchase amount. Then she wants
    the program to add the sales tax, round the result to the nearest penny, and display
    the answer. Create this program for Helen.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 海伦听说了你的编程技能，因此她来找你帮忙。她需要一个程序，让她输入总购买金额。然后，她希望程序能加上销售税，将结果四舍五入到最接近的分，并显示答案。为海伦创建这个程序。
- en: '**Abs(), Min(), and Max() Methods**'
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Abs()、Min()和Max()方法**'
- en: The `Math` object provides methods for you to find the absolute value of a number.
    When you calculate the absolute value of a number, you’re finding its distance
    from zero, which will always be a positive number. For example, the absolute value
    of both –1 and 1 is 1.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`Math`对象为你提供了一些方法来计算一个数字的绝对值。当你计算一个数字的绝对值时，实际上是在找它与零的距离，这个值始终是一个正数。例如，–1和1的绝对值都是1。'
- en: 'This code snippet shows you some examples:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码示范了几个例子：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `Abs()` method takes in a number (positive or negative) and returns that
    number’s distance from 0, or its absolute value. This return value is always a
    positive number. (In other words, `Abs()` removes the minus sign.)
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`Abs()`方法接受一个数字（无论是正数还是负数），并返回该数字与0的距离，即其绝对值。这个返回值始终是一个正数。（换句话说，`Abs()`去掉了负号。）'
- en: For example, let’s say the user of your game needs to guess a secret number
    (10), but the guess doesn’t have to be exact. Instead, your game accepts any guess
    between 8 and 12\. To check if the user’s guess is okay, you can test the absolute
    difference between the user’s guess (saved in the `guess` variable) and 10; that
    is `Abs(guess - 10)`. If the result is less than or equal to 2, then your player’s
    guess is good. You’ll learn how to perform checks like this one using `If` statements
    in the next chapter.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你的游戏玩家需要猜一个秘密数字（10），但猜测不必完全准确。相反，你的游戏接受8到12之间的任何猜测。为了检查玩家的猜测是否合理，你可以测试玩家的猜测（保存在`guess`变量中）和10之间的绝对差值；即`Abs(guess
    - 10)`。如果结果小于或等于2，那么玩家的猜测就可以接受。你将在下一章学习如何使用`If`语句执行这样的检查。
- en: 'Now let’s find the minimum or maximum of two numbers. The `Min()` method returns
    the lower of two numbers, and the `Max()` method returns the higher number:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们找出两个数字中的最小值或最大值。`Min()`方法返回两个数字中的较小值，而`Max()`方法返回较大的数字：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can use these methods to limit the numbers your user can input to your
    program. For example, if your program expects a number that’s less than 100, you
    can write this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这些方法来限制用户输入的数字。例如，如果你的程序期望一个小于100的数字，你可以写出以下代码：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Try it out! Run this code two times. The first time, enter a number less than
    100, and the second time, enter a number greater than 100\. What happens? Can
    you modify the code so the entered number can’t go below 0?
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 试试看！运行这段代码两次。第一次输入一个小于100的数字，第二次输入一个大于100的数字。会发生什么？你能修改代码，使输入的数字不能低于0吗？
- en: 'What if you want to find the minimum of three numbers? For example, let’s say
    you want to find the lowest score out of the three math quizzes you took last
    week. One way is to write this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想找到三个数字中的最小值怎么办？例如，假设你想找出上周参加的三场数学测验中的最低分。一个方法是这样写：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The inner `Min()` method finds the minimum of the `score1` and `score2` variables.
    That result and `score3` are passed to the outer `Min()` method to determine which
    is lower: the first minimum (of `score1` and `score2`) or `score3`. The final
    result is saved in the `minScore` variable.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 内部的`Min()`方法找到`score1`和`score2`变量中的最小值。该结果和`score3`被传递到外部的`Min()`方法中，以确定哪个较小：第一个最小值（来自`score1`和`score2`）还是`score3`。最终结果保存在`minScore`变量中。
- en: '**TRY IT OUT 7-3**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试一下 7-3**'
- en: Your favorite potato chips are sold at three local stores; each bag is a different
    price. Write a program that prompts you to enter the price at each store and then
    displays the lowest price. Saving money means more potato chips for you!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你最喜欢的薯片在三个本地商店出售；每一袋的价格都不一样。写一个程序，提示你输入每个商店的价格，然后显示最低价格。节省下来的钱就能买更多的薯片！
- en: '**The Remainder() Method**'
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Remainder() 方法**'
- en: You can get the remainder from any division operation by using the `Remainder()`
    method. For example, `Math.Remainder(10, 3)` returns 1 because 10 ÷ 3 = 3 with
    a remainder of 1.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用`Remainder()`方法从任何除法操作中得到余数。例如，`Math.Remainder(10, 3)`返回 1，因为 10 ÷ 3
    = 3，余数为 1。
- en: 'You can use the `Remainder()` method to test whether one integer (whole number)
    can be divided evenly by another, smaller integer. A remainder of 0 means that
    the larger number’s divisible by the smaller number (such as how 9 is divisible
    by 3). Knowing if there’s a remainder has all sorts of interesting uses. For example,
    if you want to check whether a number is even or odd, you can examine the remainder
    of that number divided by 2: if the remainder is 0, the number is even; otherwise,
    it’s odd.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`Remainder()`方法测试一个整数（整数）是否能被另一个更小的整数整除。余数为 0 表示较大的数字可以被较小的数字整除（比如 9 可以被
    3 整除）。知道是否有余数有各种有趣的用途。例如，如果你想检查一个数字是偶数还是奇数，你可以检查这个数字除以 2 的余数：如果余数是 0，数字是偶数；否则，它是奇数。
- en: To see the `Remainder()` method in action, let’s write a program that finds
    the number of dollars, quarters, dimes, nickels, and pennies in a given amount
    of money. To find the most efficient quantity of dollars and coins, you’ll need
    to start with the largest denomination (dollars) and work your way down the the
    smallest one (pennies). [Listing 7-3](ch07.html#ch7ex3) shows the complete program
    and includes example output in the comments. Read through the program, and see
    if you can figure out what happens when the input is 25.36.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示`Remainder()`方法的作用，让我们编写一个程序，查找给定金额中的美元、四分之一美元、一角硬币、五分硬币和一美分硬币的数量。为了找到最有效的美元和硬币数量，你需要从最大面额（美元）开始，然后逐步处理到最小面额（美分）。[清单
    7-3](ch07.html#ch7ex3)展示了完整的程序，并在注释中包含了示例输出。阅读程序，看看你是否能弄清楚输入为 25.36 时会发生什么。
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*Listing 7-3: Finding dollar and coin denominations*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 7-3：查找美元和硬币面额*'
- en: Let’s walk through this program line by line to understand how it works. The
    user enters 25.36 (that is, 25 dollars and 36 cents) in response to line 2, so
    the `total = 25.36`. Line 4 computes the total `cents` as `Floor(25.36 * 100)
    = 2536`. This number is then divided by 100 to get 25 and saved in `dollars` (line
    5), with a remainder of 36, which is saved in `cents` (line 6). Next, 36 cents
    is divided by 25 to get 1 quarter (line 7) and a remainder of 11 cents (line 8).
    The remainder of 11 cents is then divided by 10 to get 1 dime (line 9) with a
    remainder of 1 cent (line 10). Lines 11 and 12 compute the available `nickels`
    and the remaining `pennies` in the same way. The rest of the program (lines 13–19)
    displays the results. [Figure 7-2](ch07.html#ch7fig2) illustrates this program.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐行分析这个程序，了解它是如何工作的。用户在第 2 行输入 25.36（即 25 美元和 36 美分），因此`total = 25.36`。第 4
    行计算总的`cents`为`Floor(25.36 * 100) = 2536`。这个数字然后被除以 100 得到 25 并保存到`dollars`（第 5
    行），剩下的 36 被保存到`cents`（第 6 行）。接下来，36 美分除以 25 得到 1 个四分之一美元（第 7 行）和剩余的 11 美分（第 8
    行）。剩余的 11 美分然后被除以 10 得到 1 个一角硬币（第 9 行），剩下 1 美分（第 10 行）。第 11 行和第 12 行以相同的方式计算可用的`nickels`和剩余的`pennies`。程序的其余部分（第
    13–19 行）显示结果。[图 7-2](ch07.html#ch7fig2)说明了这个程序。
- en: '![image](graphics/f07-02.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f07-02.jpg)'
- en: '*Figure 7-2: Illustrating the output of* Money.sb'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-2：展示 Money.sb 的输出*'
- en: 'Let’s try a different amount and look at the output:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试不同的金额，看看输出是什么：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: That’s pretty handy if you’re making change!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你要找零钱，这个方法非常有用！
- en: '**TRY IT OUT 7-4**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试 7-4**'
- en: 'Write a program that reads a three digit number and outputs each digit followed
    by its place value. For example, if the input is 368, the program should display
    this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，读取一个三位数，并输出每个数字后面跟着它的位值。例如，如果输入是 368，程序应该显示如下内容：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '(Hint: if you divide 368 by 100, you get 3 with a remainder of 68\. If you
    divide 68 by 10, you get 6 and a remainder of 8.)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: （提示：如果你将 368 除以 100，你得到 3，余数为 68。如果你将 68 除以 10，你得到 6，余数为 8。）
- en: '**Random Numbers**'
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**随机数**'
- en: Random numbers are used in many applications, like simulations and games. They’re
    also used for software testing (to see how a program responds to different input
    values) or to simulate random events (like the lottery).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 随机数在许多应用中都有使用，比如仿真和游戏。它们还被用于软件测试（查看程序如何响应不同的输入值）或模拟随机事件（如彩票）。
- en: The `GetRandomNumber()` method returns a random integer between one and the
    upper limit you pass to the method. Using this method, your program can generate
    random numbers that you can use in all sorts of exciting applications, for instance,
    to see whether a troll bops your hero on the head. Let’s look at some examples.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`GetRandomNumber()`方法返回一个介于1和你传入的方法的上限之间的随机整数。通过这个方法，你的程序可以生成随机数，应用于各种有趣的场景，例如查看一个巨魔是否会敲打你英雄的头。让我们来看一些例子。'
- en: 'To simulate a roll of a die, write this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要模拟掷骰子，写下如下代码：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The variable, `dice`, contains a number between 1 and 6 that’s selected at random,
    similar to picking it out of a hat (but not the Hogwart’s Sorting Hat). Run the
    program several times to see for yourself.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 变量`dice`包含一个1到6之间的随机数，类似于从帽子里随机抽取（但不是霍格沃茨的分院帽）。运行程序几次，亲自感受一下。
- en: 'To simulate the flip of a coin, you can write this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要模拟投掷硬币，你可以编写如下代码：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The variable `coinFlip` is either 1 or 2\. The value 1 represents heads, and
    the value 2 represents tails (or the other way around; it’s up to you!).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 变量`coinFlip`的值为1或2。值1表示正面，值2表示反面（或者你也可以反过来，取决于你！）。
- en: 'To simulate rolling a pair of dice and finding their sum, you can write this
    code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要模拟掷一对骰子并计算它们的和，你可以编写如下代码：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Although your outcome will be a number between 2 (rolling two 1s) and 12 (rolling
    two 6s), don’t make the mistake of writing this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你的结果会在2（掷出两个1）和12（掷出两个6）之间，但不要犯这样的错误：
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Although this statement gives you a number between 2 and 12, the probability
    you’d get from one random number is different from adding two random numbers together.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个语句会给你一个2到12之间的数字，但从一个随机数得到的概率与将两个随机数相加得到的概率是不同的。
- en: '**TRY IT OUT 7-5**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**动手试试 7-5**'
- en: A bag contains 20 balls numbered from 1 to 20\. Write a program that simulates
    drawing one ball from the bag at random.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一个袋子里有20个球，编号从1到20。编写一个程序，模拟随机抽取一个球。
- en: '**Trigonometric Methods**'
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**三角方法**'
- en: Trigonometric functions are those mischievous enemies of high school students
    (sine, cosine, tangent, and so on). We won’t explain what these are, but if you
    have no idea what a trigonometric function is or you’ve never even heard the word
    *trigonometry*, don’t worry. Just skip ahead to [Chapter 8](ch08.html#ch08). Otherwise,
    let’s jump right in with an example.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 三角函数是那些让高中生头疼的“恶魔”（正弦、余弦、正切等等）。我们不会解释这些是什么，但如果你对三角函数毫无概念，或者从未听说过*三角学*这个词，别担心。你可以跳过这部分，直接看[第8章](ch08.html#ch08)。否则，让我们通过一个例子来快速入门。
- en: Imagine that androids from the future have traveled back to our time to destroy
    humanity, and you’re the only person who can stop their attack. You’ll need to
    use your cannon to destroy their weapons warehouse, as shown in [Figure 7-3](ch07.html#ch7fig3).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 假设来自未来的机器人穿越时空来到我们这个时代，目的是摧毁人类，而你是唯一能够阻止他们攻击的人。你需要用你的大炮摧毁他们的武器仓库，如[图 7-3](ch07.html#ch7fig3)所示。
- en: '![image](graphics/f07-03.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f07-03.jpg)'
- en: '*Figure 7-3: Destroying the androids’ warehouse*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-3：摧毁机器人仓库*'
- en: Your cannon fires with an initial speed, `v`, of 160 feet per second. The warehouse
    is 500 feet away. All you have to do is figure out the launch angle θ (the Greek
    letter theta). The program in [Listing 7-4](ch07.html#ch7ex4) prompts you to enter
    the desired angle, and then it computes the missile range *d* (in feet) according
    to the formula shown in the figure.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你的大炮以初始速度`v`为160英尺每秒发射，仓库距离500英尺。你只需要计算发射角度θ（希腊字母Theta）。[清单 7-4](ch07.html#ch7ex4)中的程序会提示你输入所需的角度，然后根据图中显示的公式计算导弹射程*d*（单位：英尺）。
- en: You need to run the program several times (using different launch angles) to
    find the best angle for your shot.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要多次运行程序（使用不同的发射角度）来找到最适合的发射角度。
- en: '[PRE22]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '*Listing 7-4: Finding the launch angle*'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 7-4：计算发射角度*'
- en: After the prompt, the program reads your input and saves it in the variable
    `angle` (line 6). Then line 7 converts the angle from degrees to radians using
    the `GetRadians()` method (the `Sin()` method requires its input to be given in
    radians).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在提示符后，程序读取你的输入并将其保存在变量`angle`中（第6行）。然后，第7行使用`GetRadians()`方法将角度从度数转换为弧度（`Sin()`方法要求其输入为弧度）。
- en: After that, the program computes the distance using the given formula (line
    9), rounds it to the nearest integer (line 10), and displays it (line 12).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，程序使用给定的公式计算距离（第9行），四舍五入到最接近的整数（第10行），然后显示结果（第12行）。
- en: 'Here’s a sample run:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例运行：
- en: '[PRE23]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: It looks like humanity isn’t quite safe yet. Enter some different angles in
    the program until you get it right.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 看来人类还没有完全安全。继续在程序中输入不同的角度，直到你得到正确的答案。
- en: In addition to the `Sin()` method, the `Math` object also provides `Cos()`,
    `Tan()`, `ArcSin()`, `ArcCos()`, and `ArcTan()`. You can read more about these
    methods in the Additional Resources section for this chapter at *[http://www.nostarch.com/smallbasic/](http://www.nostarch.com/smallbasic/)*.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`Sin()`方法，`Math`对象还提供`Cos()`、`Tan()`、`ArcSin()`、`ArcCos()`和`ArcTan()`方法。你可以在本章的附加资源部分阅读更多关于这些方法的信息，地址是*[http://www.nostarch.com/smallbasic/](http://www.nostarch.com/smallbasic/)*。
- en: '**TRY IT OUT 7-6**'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试一下 7-6**'
- en: 'You want to select a 20-foot Christmas tree (for your school’s festival) from
    a forest. One way to find the right tree is to attach a tape measure to a monkey
    and have it climb each tree, but let’s use a little trigonometry instead. If you
    measure the distance, *d*, from the base of the tree and the angle, θ, as shown
    in [Figure 7-4](ch07.html#ch7fig4), you can compute the height of the tree, *h*,
    like this:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你想从一片森林中选一棵20英尺高的圣诞树（用于你学校的节日庆典）。找对树的一种方法是把卷尺绑在猴子身上，让它爬上每棵树，但我们不如用一点三角学来代替。通过测量从树基到树顶的距离*d*和角度θ，如[图7-4](ch07.html#ch7fig4)所示，你可以像下面这样计算树的高度*h*：
- en: '*h* = *d* tan(θ)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*h* = *d* tan(θ)'
- en: Write a program that lets you enter *d* and θ, and computes the height of the
    tree.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，允许你输入*d*和θ，并计算树的高度。
- en: '![image](graphics/f07-04.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f07-04.jpg)'
- en: '*Figure 7-4: Computing the height of a tree*'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-4：计算树的高度*'
- en: '**Programming Challenges**'
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程挑战**'
- en: If you get stuck, check out *[http://nostarch.com/smallbasic/](http://nostarch.com/smallbasic/)*
    for the solutions and for more resources and review questions for teachers and
    students.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到困难，可以访问*[http://nostarch.com/smallbasic/](http://nostarch.com/smallbasic/)*查看解决方案、更多资源以及供教师和学生复习的问题。
- en: 'Write a Small Basic statement for each of these algebraic expressions:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为以下代数表达式编写一个Small Basic语句：
- en: a. ![image](graphics/f0095-01.jpg)
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. ![image](graphics/f0095-01.jpg)
- en: b. *a* = *x*^((*y^z*))
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. *a* = *x*^((*y^z*))
- en: c. ![image](graphics/f0095-02.jpg)
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. ![image](graphics/f0095-02.jpg)
- en: The following puzzle was written by the Egyptian scribe Ahmes in 1650 BCE.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下难题是公元前1650年埃及抄写员Ahmes编写的。
- en: “Seven houses each have seven cats. Each cat kills seven mice. Each mouse, if
    alive, would’ve eaten seven ears of grain. Each ear of grain would have produced
    seven bushels of wheat. How many bushels of wheat were saved by the cats?”
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “七座房子，每座房子里有七只猫。每只猫抓到七只老鼠。每只老鼠，如果活着的话，能吃掉七穗粮食。每穗粮食能产出七蒲式耳的小麦。这些猫节省了多少蒲式耳的小麦？”
- en: 'Write a Small Basic program to find the answer. (Hint: use the `Power()` method.)'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编写一个Small Basic程序来找到答案。（提示：使用`Power()`方法。）
- en: Create a program that converts a number of seconds (input by the user) to the
    equivalent number of hours, minutes, and seconds. For example, if the user enters
    8110 seconds, the program reports 2 hours, 15 minutes, and 10 seconds.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个程序，将用户输入的秒数转换为相应的小时、分钟和秒数。例如，如果用户输入8110秒，程序将显示2小时15分钟10秒。
