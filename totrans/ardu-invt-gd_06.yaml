- en: 5 A Color-Mixing Night-Light
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5 A 彩色混合夜光灯
- en: The wonderful thing about digital electronics and microcontrollers is that they
    are smart. They can read sensors and make decisions based on what those sensors
    tell them. Sensors are components that collect information about the environment
    around them and convert that into something a microcontroller can understand.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数字电子学和微控制器的奇妙之处在于它们很聪明。它们能够读取传感器并根据传感器告诉它们的信息做出决策。传感器是收集周围环境信息并将其转化为微控制器能够理解的形式的组件。
- en: You can use sensors to make projects that react to all sorts of stimuli (like
    temperature, sound, and the proximity of an object), but in this project, we’ll
    start small with a night-light that reacts to changes in light level, shown in
    [Figure 5-1](ch05.xhtml#ch05fig01).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用传感器制作对各种刺激（如温度、声音和物体接近度）作出反应的项目，但在这个项目中，我们将从一个简单的夜光灯开始，它会对光线变化做出反应，如[图5-1](ch05.xhtml#ch05fig01)所示。
- en: '**FIGURE 5-1:** Finished Night-Light project'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5-1：** 完成的夜光灯项目'
- en: '![Image](../images/fig5_1.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig5_1.jpg)'
- en: '**MATERIALS TO GATHER**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**收集的材料**'
- en: This project uses a new kind of LED and a *photoresistor*, a sensor that changes
    resistance based on how much light it detects. We encourage you to be creative
    and design a custom shade, too, but if you don’t feel up to that challenge yet,
    fear not! This book’s resource files include a shade design you can start with.
    [Figures 5-2](ch05.xhtml#ch05fig02) and [5-3](ch05.xhtml#ch05fig03) show the parts
    and equipment you’ll need for this project.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目使用了一种新型LED和*光敏电阻*，这是一种根据检测到的光线强度变化而改变电阻值的传感器。我们鼓励你发挥创意，设计一个定制的灯罩，但如果你还不准备迎接这个挑战，也不必担心！本书的资源文件包括一个可以开始使用的灯罩设计。[图5-2](ch05.xhtml#ch05fig02)和[图5-3](ch05.xhtml#ch05fig03)展示了你在此项目中所需的零件和设备。
- en: '**Electronic Parts**'
  id: totrans-7
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**电子零件**'
- en: '**NOTE**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The parts marked with an asterisk (*) do not come with the standard SparkFun
    Inventor’s Kit but are available in the separate add-on kit.*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*带星号（*）的零件不包含在标准的SparkFun发明者套件中，但可以在单独的附加套件中获得。*'
- en: • One SparkFun RedBoard (DEV-13975), Arduino Uno (DEV-11021), or another Arduino-compatible
    board
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: • 一块SparkFun RedBoard（DEV-13975）、Arduino Uno（DEV-11021）或其他兼容Arduino的板子
- en: • One USB Mini-B cable (CAB-11301 or your board’s USB cable; not shown)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: • 一根USB Mini-B电缆（CAB-11301，或你板子的USB电缆；未显示）
- en: • One solderless breadboard (PRT-12002)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: • 一块无焊面包板（PRT-12002）
- en: • One mini breadboard (PRT-12043*; not shown)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: • 一块迷你面包板（PRT-12043*；未显示）
- en: • One RGB LED, common cathode (COM-09264)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: • 一只RGB LED，共阴极（COM-09264）
- en: • Three 330 Ω resistors (COM-08377, or COM-11507 for a pack of 20)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: • 三个330 Ω电阻（COM-08377，或者20个装的COM-11507）
- en: • One 10 kΩ resistor (COM-08374, or COM-11508 for a pack of 20)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: • 一只10 kΩ电阻（COM-08374，或者20个装的COM-11508）
- en: • One photoresistor (SEN-09088)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: • 一块光敏电阻（SEN-09088）
- en: • Male-to-male jumper wires (PRT-11026)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: • 公对公跳线（PRT-11026）
- en: • Short 4-inch male-to-male jumper wires (PRT-13870*)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: • 短4英寸的公对公跳线（PRT-13870*）
- en: • (Optional) Male-to-female jumper wires (PRT-09140*)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: • （可选）公对母跳线（PRT-09140*）
- en: • (Optional) One 4 AA battery holder (PRT-09835*; not shown)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: • （可选）一只4节AA电池架（PRT-09835*；未显示）
- en: '**FIGURE 5-2:** Components for the Night-Light'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5-2：** 夜光灯的组件'
- en: '![Image](../images/fig5_2.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig5_2.jpg)'
- en: '**Other Materials and Tools**'
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**其他材料和工具**'
- en: • Craft knife
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: • 工艺刀
- en: • Metal ruler
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: • 金属尺
- en: • Glue (hot glue gun or craft glue)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: • 胶水（热熔胶枪或工艺胶水）
- en: • One sheet of cardstock (not cardboard), about 8.5 × 11 inches
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: • 一张卡纸（不是纸板），约8.5 × 11英寸
- en: • One sheet of white or translucent vellum, or standard copy paper, about 8.5
    × 11 inches
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: • 一张白色或半透明的羊皮纸，或者标准的复印纸，约8.5 × 11英寸
- en: • Enclosure template (see [Figure 5-20](ch05.xhtml#ch05fig20) on page [144](ch05.xhtml#page_144))
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: • 外壳模板（见[图5-20](ch05.xhtml#ch05fig20) 第[144](ch05.xhtml#page_144)页）
- en: '**FIGURE 5-3:** Recommended building materials for the Night-Light'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5-3：** 夜光灯的推荐建筑材料'
- en: '![Image](../images/fig5_3.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig5_3.jpg)'
- en: '**NEW COMPONENTS**'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**新组件**'
- en: 'You’ll be using two new components in this project: an LED that has three colors
    integrated into a single package, and a photoresistor. Let’s take a look at how
    these components work.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用两种新组件：一种将三种颜色集成在一个包中的LED，以及一个光敏电阻。我们来看看这些组件是如何工作的。
- en: '**The RGB LED**'
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**RGB LED**'
- en: 'If you’ve built any of the other projects in this book, then you already have
    experience with regular LEDs. The *red, green, blue (RGB)* LED shown in [Figure
    5-4](ch05.xhtml#ch05fig04) works very similarly. This LED is actually three LEDs
    in one package: one red, one green, and one blue. Each LED has its own positive
    (or anode) leg, but they all share a single negative (or cathode) leg, called
    the *common cathode*.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经做过本书中的其他项目，那么你已经有了使用普通 LED 的经验。[图 5-4](ch05.xhtml#ch05fig04)中显示的*红色、绿色、蓝色（RGB）*
    LED 工作方式非常相似。这个 LED 实际上是三只 LED 合在一个外壳中的：一只红色、一只绿色和一只蓝色。每个 LED 都有自己的正极（或阳极）引脚，但它们都共享一个负极（或阴极）引脚，称为*公共阴极*。
- en: If you look closely at the LED in [Figure 5-4](ch05.xhtml#ch05fig04), you’ll
    notice that the legs are all different lengths. With regular LEDs, the short leg
    is the negative leg, but with the RGB LED, the longest leg is the negative leg.
    The circuit diagram for this component is usually drawn like [Figure 5-5](ch05.xhtml#ch05fig05).
    Notice that it shows three separate LEDs connected together, and they each share
    a single negative connection.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果仔细观察[图 5-4](ch05.xhtml#ch05fig04)中的 LED，你会注意到它的引脚长度各不相同。对于普通的 LED，短引脚是负极引脚，但对于
    RGB LED，最长的引脚是负极引脚。这个元件的电路图通常像[图 5-5](ch05.xhtml#ch05fig05)那样绘制。请注意，它显示了三个独立的
    LED 被连接在一起，它们共享一个负极连接。
- en: '**FIGURE 5-4:** An RGB LED with a common cathode leg'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-4：** 带公共阴极引脚的 RGB LED'
- en: '![Image](../images/fig5_4.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig5_4.jpg)'
- en: '**FIGURE 5-5:** Circuit diagram of an RGB LED'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-5：** RGB LED 的电路图'
- en: '![Image](../images/fig5_5.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig5_5.jpg)'
- en: To figure out which positive leg is which color for this particular LED, orient
    the LED so that it looks like the one shown in [Figure 5-5](ch05.xhtml#ch05fig05).
    In this orientation, the leftmost leg is the red positive leg. The next leg (the
    longest one) is the shared negative leg, and the last two legs are the green and
    blue positive legs, respectively.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要弄清楚这个特定 LED 哪个正极对应哪种颜色，可以将 LED 定位为[图 5-5](ch05.xhtml#ch05fig05)中所示的样子。在这种方向下，最左边的引脚是红色正极引脚。接下来的引脚（最长的）是共享的负极引脚，最后两个引脚分别是绿色和蓝色的正极引脚。
- en: Keeping in mind which positive leg corresponds to which color, you can wire
    this LED into a circuit just like you would three separate LEDs. Just connect
    the positive leg(s) you want to use to power or to an Arduino output pin through
    a current-limiting resistor, and connect the common cathode to ground.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 记住哪个正极对应哪种颜色后，你可以像连接三个独立的 LED 一样将这个 LED 接入电路。只需要将你想使用的正极引脚连接到电源或 Arduino 输出引脚，串联一个限流电阻，再将公共阴极连接到地线。
- en: RGB LEDs are cool because you can use them to create a slew of colors. Red,
    green, and blue are the primary colors in the additive color scheme, and the LED
    can mix these colors to create light in other colors. (This is different from
    the *primary pigments*—red, blue, and yellow—which, as you might remember from
    grade-school art class, mix together in paints to create new colors.) The additive
    color wheel in [Figure 5-6](ch05.xhtml#ch05fig06) shows how primary colors can
    combine to create any color in the rainbow.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: RGB LED 很酷，因为你可以用它们创建大量的颜色。红色、绿色和蓝色是加色法中的三原色，LED 可以混合这些颜色来创造其他颜色的光。（这与*原色颜料*——红色、蓝色和黄色——不同，后者在你从小学美术课上可能记得，混合在一起可以在油漆中创造新的颜色。）[图
    5-6](ch05.xhtml#ch05fig06)中的加色环展示了三原色如何组合来创造彩虹中的任何颜色。
- en: '**FIGURE 5-6:** The additive color wheel'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-6：** 加色环'
- en: '![Image](../images/fig5_6.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig5_6.jpg)'
- en: 'With your RGB LED, if you turn on the blue LED and the red LED together, you
    get magenta light. Combine the red and green LEDs, and you get yellow. If all
    the LEDs are on, you get white light. This concept is the foundation for how an
    LED TV or monitor works: each pixel on your screen is essentially an RGB LED.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你的 RGB LED，如果同时点亮蓝色 LED 和红色 LED，你会得到品红色光。将红色和绿色 LED 结合在一起，你会得到黄色。如果所有 LED
    都亮起，你会得到白色光。这一概念是 LED 电视或显示器工作的基础：你屏幕上的每个像素本质上是一个 RGB LED。
- en: '**The Photoresistor**'
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**光敏电阻**'
- en: This Night-Light will turn on when it is in a dark room and turn off when the
    room is bright. That means the Night-Light needs to determine whether the room
    is dark. To do so, it uses a light sensor to monitor the light level of its surroundings.
    There are a number of different light sensors available, but we used the simple
    photoresistor shown in [Figure 5-7](ch05.xhtml#ch05fig07). This component is sometimes
    also called a *light-dependent resistor (LDR)* or a *photocell*. Also, similar
    to many other types of sensors, a photoresistor is sometimes referred to as a
    *variable resistor sensor*.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个夜光灯在黑暗的房间里会打开，在光线充足的房间里会关闭。这意味着夜光灯需要判断房间是否黑暗。为此，它使用光传感器来监测周围的光照水平。有许多不同的光传感器可以选择，但我们使用了如[图
    5-7](ch05.xhtml#ch05fig07)所示的简单光敏电阻。这个组件有时也被称为*光敏电阻（LDR）*或*光电池*。另外，类似于许多其他类型的传感器，光敏电阻有时也被称为*可变电阻传感器*。
- en: The resistance of the photoresistor in this project varies from about 80 Ω to
    around 1,000,000 Ω (1 MΩ) depending on how much light it is exposed to. The photoresistor
    has a low resistance when exposed to bright light and a high resistance when it’s
    in the dark.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，光敏电阻的电阻值从约 80 Ω 到约 1,000,000 Ω（1 MΩ）变化，具体取决于其所接收的光照强度。当光敏电阻暴露在强光下时，它的电阻较低，而在黑暗中时，它的电阻较高。
- en: '**FIGURE 5-7:** A photoresistor'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-7：** 一只光敏电阻'
- en: '![Image](../images/fig5_7.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig5_7.jpg)'
- en: To use the photoresistor to measure brightness, you have to place it in a *voltage
    divider* circuit, like the one in [Figure 5-8](ch05.xhtml#ch05fig08). A voltage
    divider uses two resistors wired in *series* (that is, in line with each other)
    between a supply voltage (5 V) and ground to obtain a smaller voltage.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用光敏电阻来测量亮度，必须将其放置在如[图 5-8](ch05.xhtml#ch05fig08)所示的*电压分压*电路中。电压分压电路使用两个串联连接的电阻（即串联在电源电压
    5 V 和地之间）来获得较小的电压。
- en: '**FIGURE 5-8:** Voltage divider circuit'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-8：** 电压分压电路'
- en: '![Image](../images/fig5_8.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig5_8.jpg)'
- en: The total voltage across these two resistors is 5 V, and the voltages across
    *R*[1] and *R*[2] depend on the ratio of the two resistors’ resistances. *V*[out]
    will be some voltage between 5 V and 0 V, because the voltage is divided between
    the two resistors. The relationship between *V*[out] and the resistor values *R*[1]
    and *R*[2] can be characterized by the following equation.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个电阻上的总电压为 5 V，而*R*[1]和*R*[2]上的电压取决于两个电阻的阻值比。*V*[out]将是介于 5 V 和 0 V 之间的某个电压，因为电压在这两个电阻之间分配。*V*[out]与电阻值
    *R*[1] 和 *R*[2] 之间的关系可以通过以下方程式来表示。
- en: '![Image](../images/129equ01.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/129equ01.jpg)'
- en: 'We know what you’re thinking: that looks like math! Well, it is, and math is
    an important part of electronics, but it doesn’t have to be complicated. We’ll
    take things slow to make sure everyone understands it as we go along. This little
    equation is especially helpful when you’re dealing with this photoresistor or
    any other type of resistive sensor. In the voltage divider circuit, if you replace
    *R*[1] with the photoresistor, you get the circuit shown in [Figure 5-9](ch05.xhtml#ch05fig09).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道你在想什么：看起来像数学！嗯，确实是，而且数学是电子学中的一个重要部分，但它并不复杂。我们会慢慢来，确保每个人都能理解。这个小小的方程式在处理光敏电阻或任何其他类型的电阻传感器时特别有用。在电压分压电路中，如果你用光敏电阻替代*R*[1]，就得到如[图
    5-9](ch05.xhtml#ch05fig09)所示的电路。
- en: '**FIGURE 5-9:** A voltage divider circuit with a photoresistor'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-9：** 一个带光敏电阻的电压分压电路'
- en: '![Image](../images/fig5_9.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig5_9.jpg)'
- en: The resistance of the photoresistor increases as the light around it gets dim.
    Now, look at the voltage divider equation. As resistance *R*[1] increases, the
    denominator of the fraction increases, making the entire fraction smaller. That
    means *V*[out] gets smaller as it gets darker.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当周围光线变暗时，光敏电阻的电阻增大。现在，看看电压分压方程。当电阻*R*[1]增大时，分数的分母增大，使得整个分数变小。这意味着当光线变暗时，*V*[out]会变小。
- en: With this circuit, you can accurately read the amount of light on the photoresistor
    by connecting *V*[out] to an analog input pin on the left-hand side of the Arduino
    (the pins marked with an A). *Analog* signals are those that can vary across a
    range of values. Up to this point, you’ve only used the *digital* pins on the
    right-hand side of the Arduino board. Unlike a push button, which has only two
    states, the photoresistor can have a range of values based on the brightness of
    light and the voltage divider circuit. This is the difference between a digital
    and an analog signal.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个电路，你可以通过将*V*[out]连接到Arduino左侧的一个模拟输入引脚（标有A的引脚）来准确读取光敏电阻上的光线强度。*模拟*信号是指那些可以在一定范围内变化的信号。到目前为止，你只使用了Arduino板右侧的*数字*引脚。与按键只有两种状态不同，光敏电阻可以根据光线的亮度和电压分压电路的影响，产生一系列的数值。这就是数字信号和模拟信号之间的区别。
- en: 'That’s all you really need to know to use this voltage divider circuit, but
    if you want to practice the calculations, see “[Show Me Some Math: Voltage Dividers](ch05.xhtml#ch05sb01)”
    on page [130](ch05.xhtml#page_130).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你需要了解的关于如何使用这个电压分压器电路的所有内容，但如果你想练习计算，参见第[130](ch05.xhtml#page_130)页的“[给我一些数学：电压分压器](ch05.xhtml#ch05sb01)”。
- en: '**SHOW ME SOME MATH: VOLTAGE DIVIDERS**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**给我一些数学：电压分压器**'
- en: 'Using a multimeter, you can measure the resistance of a photoresistor under
    different conditions. (For instructions on using a multimeter, see “[Measuring
    Electricity with a Multimeter](app01.xhtml#app01lev1sec1)” on page [298](app01.xhtml#page_298).)
    When we shined a bright light from a flashlight or cell phone on the photoresistor,
    we measured a resistance of about 100 Ω. When we covered the photoresistor with
    our hands, we saw a resistance of about 200 kΩ. With the fixed resistor (*R*[2])
    set at 10 kΩ, we’d expect to see the following values from the voltage divider
    in those two situations:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用万用表，你可以在不同条件下测量光敏电阻的电阻值。（关于如何使用万用表的说明，请参见第[298](app01.xhtml#page_298)页的“[用万用表测量电流](app01.xhtml#app01lev1sec1)”）。当我们用手电筒或手机照射光敏电阻时，测得的电阻大约为100
    Ω。当我们用手遮住光敏电阻时，测得的电阻大约为200 kΩ。当固定电阻(*R*[2])设置为10 kΩ时，我们预计在这两种情况下电压分压器的输出值会如下所示：
- en: '![Image](../images/130equ01.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/130equ01.jpg)'
- en: With an input voltage of 5 V, the voltage across the photoresistor varies from
    0.24 V to 4.95 V through a range of light levels. We’ll show you how to use the
    Arduino to read these voltages in this chapter. Pretty cool, right? Math works!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在5V的输入电压下，光敏电阻上的电压在不同的光照强度下从0.24 V变化到4.95 V。在本章中，我们将向你展示如何使用Arduino读取这些电压。很酷吧？数学是有效的！
- en: '**BUILD THE NIGHT-LIGHT PROTOTYPE**'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建夜灯原型**'
- en: Let’s put the RGB LED and the voltage divider together to build the Night-Light
    circuit. You’ll start by building the voltage divider circuit with the photoresistor
    and then add the RGB LED. When you’re done, your breadboard should look like [Figure
    5-10](ch05.xhtml#ch05fig10). We’ve also included a circuit diagram in [Figure
    5-11](ch05.xhtml#ch05fig11) for your reference.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把RGB LED和电压分压器连接起来，构建夜灯电路。你将首先构建包含光敏电阻的电压分压器电路，然后添加RGB LED。完成后，你的面包板应该像[图
    5-10](ch05.xhtml#ch05fig10)那样。我们还在[图 5-11](ch05.xhtml#ch05fig11)中提供了一个电路图供参考。
- en: '**FIGURE 5-10:** Completed prototype circuit'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-10：** 完成的原型电路'
- en: '![Image](../images/fig5_10.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig5_10.jpg)'
- en: '**FIGURE 5-11:** Circuit diagram of completed prototype Night-Light circuit'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-11：** 完成的夜灯原型电路图'
- en: '![Image](../images/fig5_11.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig5_11.jpg)'
- en: '**Wire the Voltage Divider**'
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**接线电压分压器**'
- en: Find your photoresistor (it should look like the one in [Figure 5-7](ch05.xhtml#ch05fig07))
    and a 10 kΩ resistor. Recall that a 10 kΩ resistor has brown, black, and orange
    color bands, as shown in [Figure 5-12](ch05.xhtml#ch05fig12). See “[Resistors
    and Bands](app01.xhtml#app01lev1sec4)” on page [308](app01.xhtml#page_308) for
    details on how to determine the value of a resistor from its color bands.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 找到你的光敏电阻（它应该像[图 5-7](ch05.xhtml#ch05fig07)中的那样）和一个10 kΩ的电阻。回忆一下，10 kΩ电阻的颜色带为棕色、黑色和橙色，如[图
    5-12](ch05.xhtml#ch05fig12)所示。有关如何通过颜色带确定电阻值的详细信息，请参见第[308](app01.xhtml#page_308)页的“[电阻与颜色带](app01.xhtml#app01lev1sec4)”。
- en: '**FIGURE 5-12:** 10 kΩ resistor (brown-black-orange)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-12：** 10 kΩ电阻（棕黑橙）'
- en: '![Image](../images/fig5_12.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig5_12.jpg)'
- en: With your parts in hand, build the voltage divider circuit as shown in [Figure
    5-13](ch05.xhtml#ch05fig13). It’s good practice to connect both power (5 V) and
    ground when setting up the breadboard for building circuits, so do that first.
    Find the ground rail (–) and the power rail (+) on the left side of your breadboard.
    Connect 5 V on the Arduino to the power rail, and connect GND on the Arduino to
    the ground rail.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 手头有了零件后，按照[图 5-13](ch05.xhtml#ch05fig13)所示搭建电压分压电路。在搭建面包板电路时，连接电源（5V）和接地是一个很好的做法，因此首先完成这一步。找到面包板左侧的接地轨（–）和电源轨（+）。将Arduino的5V引脚连接到电源轨，将Arduino的GND引脚连接到接地轨。
- en: '**FIGURE 5-13:** Completed voltage divider, using the photoresistor'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-13：** 完成的电压分压器，使用光敏电阻'
- en: '![Image](../images/fig5_13.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig5_13.jpg)'
- en: Next, plug the photoresistor in near the bottom of the breadboard, with each
    leg in its own row. Plug one side of the 10 kΩ resistor into the same row as one
    of the photoresistor legs (connecting the two together), and plug the other side
    of the resistor into a row by itself. Add a wire to connect the 5 V power rail
    (+) to the photoresistor leg that isn’t connected to the resistor. Then, add another
    wire to connect the ground rail (–) to the resistor leg that’s in a row by itself.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将光敏电阻插入面包板的下方，每条腿插入不同的排针中。将一端10 kΩ电阻的一端插入与光敏电阻一条腿相同的排针中（连接两者），并将电阻的另一端插入一个单独的排针中。添加一根导线，将5V电源轨（+）连接到未连接电阻的光敏电阻腿。然后，添加另一根导线，将接地轨（–）连接到单独排针中的电阻腿。
- en: Finally, connect the photoresistor to the Arduino by running a wire from the
    breadboard row that’s shared with both a leg from the resistor and a leg from
    the photoresistor to the Arduino analog input pin A0\. This wire is often called
    the output voltage of the photoresistor, or the *signal wire*. The analog input
    pins, A0–A5, can all be used to measure a range of voltages.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过将一根导线从面包板与电阻和光敏电阻共用的排针连接到Arduino的模拟输入引脚A0，将光敏电阻连接到Arduino。这个导线通常被称为光敏电阻的输出电压线，也就是*信号线*。模拟输入引脚A0-A5都可以用来测量不同范围的电压。
- en: Notice how the breadboard circuit looks a lot like the diagram in [Figure 5-9](ch05.xhtml#ch05fig09).
    This is one of the most basic sensor circuits used in Arduino projects. Many other
    analog sensors, like sensors for flex, temperature, and pressure, are variable
    resistors, too. To experiment with one of those later, just replace the photoresistor
    with that sensor.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，面包板电路看起来很像[图 5-9](ch05.xhtml#ch05fig09)中的示意图。这是Arduino项目中最基本的传感器电路之一。许多其他模拟传感器，比如用于弯曲、温度和压力的传感器，也都是可变电阻。如果以后想尝试这些传感器，只需将光敏电阻替换为相应的传感器。
- en: '**Wire the RGB LED**'
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接RGB LED**'
- en: Remember the Stoplight circuit in [Project 2](ch02.xhtml#ch02)? That project
    had three LEDs. The RGB LED basically squishes those three LEDs together. The
    RGB LED has four legs, and the longest leg is the common cathode (negative) leg.
    With your RGB LED oriented as in [Figure 5-5](ch05.xhtml#ch05fig05), find the
    red leg. Plug the RGB LED into the breadboard so that the red leg is at the top
    and the longest leg is the second one down, as shown in [Figure 5-14](ch05.xhtml#ch05fig14).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 记得[项目 2](ch02.xhtml#ch02)中的红绿灯电路吗？那个项目有三个LED。RGB LED实际上将这三个LED合并在一起。RGB LED有四条腿，其中最长的一条是公共阴极（负极）腿。按照[图
    5-5](ch05.xhtml#ch05fig05)中的方向摆放RGB LED，找到红色腿。将RGB LED插入面包板，使红色腿位于顶部，最长的腿排在第二位置，正如[图
    5-14](ch05.xhtml#ch05fig14)所示。
- en: '**FIGURE 5-14:** Adding the RGB LED to the voltage divider circuit'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-14：** 将RGB LED添加到电压分压电路中'
- en: '![Image](../images/fig5_14.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig5_14.jpg)'
- en: The two halves of the breadboard are divided by a ditch that separates the rows.
    Plug the RGB LED into the right side, starting with the red pin in row 4.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 面包板的两半通过一条隔开的沟槽分开，分隔了各个排针。将RGB LED插入右侧，从红色引脚插入第4排开始。
- en: Next, find three 330 Ω resistors; their color bands are orange-orange-brown.
    Use the three resistors to bridge the red, green, and blue pins across the ditch
    to open rows on the other side, as shown in [Figure 5-14](ch05.xhtml#ch05fig14).
    The resistors need to straddle the ditch so that the two ends of the resistors
    aren’t shorted together. Run a wire from the common cathode (negative) leg of
    the LED to the ground rail on the left side of the breadboard. Finally, connect
    the three pins of the RGB LED to the Arduino by running a wire from pin 11 on
    the Arduino to the resistor connected to the red pin on the breadboard, pin 10
    on the Arduino to the resistor for the green pin on the breadboard, and pin 9
    on the Arduino to the resistor for the blue pin on the breadboard. When you’re
    done, it should resemble the diagram in [Figure 5-14](ch05.xhtml#ch05fig14). Notice
    that the red, green, and blue wires correspond to the red, green, and blue positive
    legs on the LED.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，找到三颗330 Ω的电阻，它们的颜色带为橙色-橙色-棕色。使用这三颗电阻将红色、绿色和蓝色引脚连接过电路的沟槽，以便通向另一侧的开放行，如[图5-14](ch05.xhtml#ch05fig14)所示。电阻需要跨越沟槽，以确保电阻的两端不会直接短路。将一根线从LED的公共阴极（负极）引脚接到面包板左侧的地轨。最后，将RGB
    LED的三根引脚通过线缆连接到Arduino：将Arduino的11号引脚连接到面包板上与红色引脚相连的电阻，将Arduino的10号引脚连接到面包板上与绿色引脚相连的电阻，将Arduino的9号引脚连接到面包板上与蓝色引脚相连的电阻。完成后，它应该与[图5-14](ch05.xhtml#ch05fig14)中的示意图相似。注意，红色、绿色和蓝色的线缆分别对应LED上的红色、绿色和蓝色正极引脚。
- en: With the RGB LED hooked up, you can control each color like a separate LED,
    using pins 9, 10, and 11\. Open up the Arduino IDE, and let’s play with this idea!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 将RGB LED连接好后，你可以像控制单独的LED一样，通过9、10、11号引脚来控制每种颜色。打开Arduino IDE，让我们来试试这个想法吧！
- en: '**TEST THE NIGHT-LIGHT WITH BASIC COLOR MIXING**'
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**测试夜灯与基本颜色混合**'
- en: You’ll tackle a few new concepts with this project, starting with how to mix
    colors using an RGB LED. The RGB LED is really three LEDs in one, and you need
    to treat it that way in your code. Create a new sketch, and replace the default
    code with the `setup()` and `loop()` functions in [Listing 5-1](ch05.xhtml#ch05ex01).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将接触到一些新的概念，首先是如何使用RGB LED混合颜色。RGB LED实际上是三颗LED组成的，你需要在代码中像对待三颗单独的LED那样来操作它。创建一个新的草图，并将默认代码替换为[列表5-1](ch05.xhtml#ch05ex01)中的`setup()`和`loop()`函数。
- en: '**LISTING 5-1:** A simple code example to display cyan on the RGB LED'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表5-1：** 显示RGB LED青色的简单代码示例'
- en: '[PRE0]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Each pin that controls the RGB LED needs its own `pinMode()` function to set
    that pin as an `OUTPUT` ➊. Previous projects used the `digitalWrite()` function
    to turn LEDs on and off with individual pins, and you’re going to do the same
    with the RGB LED. Using the color wheel in [Figure 5-6](ch05.xhtml#ch05fig06),
    choose from any of the colors represented. We selected cyan, the combination of
    green and blue. To create cyan, you need to turn on the green ➌ and blue ➍ LEDs
    using the `digitalWrite()` function. To make sure that the red LED is off, the
    code also needs a third `digitalWrite()` function ➋.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 每个控制RGB LED的引脚都需要一个独立的`pinMode()`函数来将该引脚设置为`OUTPUT` ➊。之前的项目使用`digitalWrite()`函数通过单独的引脚控制LED的开关，你将使用相同的方法来控制RGB
    LED。使用[图5-6](ch05.xhtml#ch05fig06)中的色轮，从其中选择你喜欢的颜色。我们选择了青色，即绿色和蓝色的组合。要生成青色，你需要通过`digitalWrite()`函数开启绿色
    ➌ 和蓝色 ➍ 的LED。为了确保红色LED熄灭，代码中还需要添加一个第三个`digitalWrite()`函数 ➋。
- en: Upload this sketch to your Arduino, and if the circuit is wired up correctly
    and the code is correct, your RGB LED should glow with a soft cyan light. If it’s
    a different color or not lighting up at all, check your wiring and the orientation
    of the RGB LED.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 将此草图上传到你的Arduino，如果电路连接正确且代码无误，你的RGB LED应该会发出柔和的青色光。如果颜色不同或完全不亮，请检查接线和RGB LED的方向。
- en: Notice that even though you’re using the RGB LED to mix colors, your code is
    still pretty similar to the code from other LED projects in this book. Each LED
    is turned on by a separate digital pin using the `pinMode()` function. You’re
    just controlling the colors by using multiple `digitalWrite()` functions at the
    same time.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，尽管你使用RGB LED来混合颜色，但你的代码仍然与本书中其他LED项目的代码非常相似。每颗LED都是通过单独的数字引脚控制的，使用`pinMode()`函数开启。你只是在同时使用多个`digitalWrite()`函数来控制颜色。
- en: '**TRY IT OUT: MIX MORE COLORS!**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试：混合更多颜色！**'
- en: Try changing the color of the LED on your own, and this time, incorporate red
    into the color. Can you make magenta? What about yellow? What color do you get
    when you turn all three colors on? Use the color wheel as a reference.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试自己改变LED的颜色，这次加入红色。你能做出品红色吗？黄色呢？当你打开所有三种颜色时，你会得到什么颜色？可以参考颜色轮来看看。
- en: '**PROGRAM THE NIGHT-LIGHT**'
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程夜光灯**'
- en: In the Night-Light circuit, the photoresistor is used as a light sensor. The
    photoresistor voltage divider is connected to analog input pin A0\. Recall that
    the Arduino can be used to measure voltage on any of the analog input pins. You
    can have the Arduino read the sensor value from that pin using the `analogRead()`
    function. The `analogRead()` function reads the voltage applied to an analog input
    pin and returns a value between 0 and 1,023, scaled from a voltage range of 0
    V to 5 V. For example, if you applied 2.5 V to A0, the `analogRead(A0)` function
    would return a value of about 512, or roughly half of 1,023.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在夜光灯电路中，光敏电阻器用作光传感器。光敏电阻器电压分压器连接到模拟输入引脚A0。回想一下，Arduino可以用来测量任何模拟输入引脚上的电压。你可以使用`analogRead()`函数让Arduino读取该引脚的传感器值。`analogRead()`函数读取应用到模拟输入引脚的电压，并返回一个介于0和1,023之间的值，电压范围从0
    V到5 V。例如，如果你将2.5 V施加到A0，引脚的`analogRead(A0)`函数将返回一个大约为512的值，即大约是1,023的一半。
- en: As the amount of light hitting the photoresistor changes, its resistance changes,
    and because of the voltage divider circuit, the voltage on the analog input pin
    changes, too. Let’s see how to code this on the Arduino. To determine whether
    the Night-Light should be on or off, you want to read the voltage from the photoresistor
    and compare it against a value that indicates whether the room is dark or bright.
    You should already have the circuit wired up, with the RGB LED and the photoresistor
    hooked up to pin A0\. [Listing 5-2](ch05.xhtml#ch05ex02) shows the Arduino sketch
    in its entirety. You can either modify the sketch you made for [Listing 5-1](ch05.xhtml#ch05ex01)
    to match it or just add this code to a brand-new sketch.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 随着光线照射到光敏电阻器的强度变化，它的电阻会变化，由于电压分压电路的作用，模拟输入引脚上的电压也会发生变化。让我们看看如何在Arduino上编码。为了确定夜光灯是否应该开启，你需要读取光敏电阻器的电压，并将其与一个值进行比较，这个值可以表示房间是昏暗还是明亮。你应该已经将电路接好，RGB
    LED和光敏电阻器连接到A0引脚。[列表 5-2](ch05.xhtml#ch05ex02)显示了整个Arduino草图。你可以修改为[列表 5-1](ch05.xhtml#ch05ex01)所做的草图，或者直接将此代码添加到一个全新的草图中。
- en: '**LISTING 5-2:** Complete Night-Light code'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 5-2：** 完整的夜光灯代码'
- en: '[PRE1]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Upload this to your Arduino board, and make sure the room you’re in is brightly
    lit. When you shade the photoresistor enough with your hand, the RGB LED should
    turn on with a cyan color. If it doesn’t work, try cupping your hands around the
    photoresistor or covering it with a book or magazine to make sure that it doesn’t
    sense any light. Now, if you remove your hand and expose the photoresistor to
    light, the RGB LED should return to being off. Pretty cool! Let’s look at how
    this works.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 将此代码上传到你的Arduino板上，并确保你所在的房间光线充足。当你用手遮住光敏电阻器时，RGB LED应该会亮起，显示青色。如果它没有反应，试着用手将光敏电阻器包住，或者用书籍或杂志遮住它，确保它感应不到任何光线。现在，如果你移开手并将光敏电阻器暴露在光线下，RGB
    LED应该会关闭。很酷吧！让我们来看看这如何工作。
- en: '**Prepare to Check the Light Level**'
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**准备检查光照强度**'
- en: First, the sketch creates the `calibrationValue` and `lightValue` global variables
    without assigning values to them. Like the code in [Listing 5-1](ch05.xhtml#ch05ex01),
    the `setup()` function calls `pinMode()` once for each pin of the RGB LED, setting
    pins 9, 10, and 11 to `OUTPUT`. Next, the sketch takes a single initial calibration
    reading from the photoresistor ➊ and places it in the `calibrationValue` variable.
    This is the value the sketch will compare future measured light levels against
    to decide whether to turn the LED on or not.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，草图创建了`calibrationValue`和`lightValue`全局变量，但没有给它们赋值。像[列表 5-1](ch05.xhtml#ch05ex01)中的代码一样，`setup()`函数为RGB
    LED的每个引脚调用一次`pinMode()`，将引脚9、10和11设置为`OUTPUT`。接下来，草图从光敏电阻器➊读取一个初始的校准值，并将其存储在`calibrationValue`变量中。这个值将作为草图未来用来比较测得光照强度的基准值，以决定是否开启LED。
- en: Now, jump into the `loop()` function. The `loop()` function repeatedly reads
    the current light level and stores it in the `lightValue` ➋ variable. The value
    of `lightValue` will be updated every time the `loop()` function repeats.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，进入`loop()`函数。`loop()`函数会重复读取当前的光照强度并将其存储在`lightValue`➋变量中。每次`loop()`函数重复时，`lightValue`的值都会更新。
- en: '**Control the Night-Light Based on the Light Level**'
  id: totrans-109
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**根据光线水平控制夜光灯**'
- en: 'With the initial light level stored in the `calibrationValue` variable and
    the current light level stored in the `lightValue` variable, the Arduino can compare
    the two and decide whether to turn the Night-Light on or off. You can tell the
    Arduino to do this by using an `if()` statement, a structure that controls the
    flow of code execution in a sketch. It allows the Arduino to make a decision based
    on the truth of an *expression*, a mathematical statement that has one of only
    two outcomes: `true` or `false`. You can see the basic flow of an `if()` statement
    in [Figure 5-15](ch05.xhtml#ch05fig15).'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 将初始光线水平存储在`calibrationValue`变量中，并将当前光线水平存储在`lightValue`变量中，Arduino可以比较两者，并决定是否打开或关闭夜光灯。你可以通过使用`if()`语句来指示Arduino执行此操作，`if()`语句是一种控制草图中代码执行流程的结构。它允许Arduino根据一个*表达式*的真假来做出决策，表达式是一个数学语句，它只有两个结果：`true`或`false`。你可以在[图
    5-15](ch05.xhtml#ch05fig15)中看到`if()`语句的基本流程。
- en: '**FIGURE 5-15:** The structural flow of an `if()` statement'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-15：** `if()`语句的结构流程'
- en: '![Image](../images/fig5_15.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig5_15.jpg)'
- en: This sketch’s `if()` statement checks the expression `lightValue < calibrationValue
    - 50`. The `<` symbol means “less than,” so this statement reads, “Is `lightValue`
    less than `calibrationValue` minus 50?” If that expression is `true`, the sketch
    enacts the code inside the set of curly brackets just underneath the `if()` statement.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图的`if()`语句检查表达式`lightValue < calibrationValue - 50`。`<`符号表示“小于”，所以这条语句的意思是，“`lightValue`是否小于`calibrationValue`减去50？”如果该表达式为`true`，草图将执行`if()`语句下方花括号中的代码。
- en: As the room gets darker, the voltage coming from the sensor circuit decreases.
    This expression checks if `lightValue` is significantly smaller than `calibrationValue`,
    which is `true` if the room has gotten darker. If it has, the sketch sets pins
    9 and 10 `HIGH` and sets pin 11 `LOW` to turn the Night-Light on with a cyan color.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 随着房间变暗，来自传感器电路的电压减小。这个表达式检查`lightValue`是否明显小于`calibrationValue`，如果房间变暗，这个表达式的值为`true`。如果是，草图将引脚9和10设置为`HIGH`，并将引脚11设置为`LOW`，以用青色点亮夜光灯。
- en: When the `if()` statement is `false`, the Arduino skips to the code that follows.
    This sketch includes an `else` ➌ statement, which gets executed only after an
    `if()` statement’s expression evaluates to `false`. Inside the `else` statement,
    the sketch turns off all three pins.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当`if()`语句为`false`时，Arduino跳过后续的代码。这段草图包含一个`else` ➌语句，只有在`if()`语句的表达式评估为`false`后，`else`语句才会执行。在`else`语句中，草图关闭所有三个引脚。
- en: '**Prevent False Alarms**'
  id: totrans-116
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**防止误报**'
- en: If the sketch just needs to check whether the light level has changed, why subtract
    50 from the `calibrationValue` variable in the expression? Checking `lightValue`
    against a number smaller than `calibrationValue` increases the tolerance on the
    sketch. If you were to use the `lightValue < calibrationValue` expression, your
    Night-Light would flicker on and off at the smallest changes in light (flip back
    to “[Logical Comparison Operators](ch04.xhtml#ch04sb02)” on page [106](ch04.xhtml#page_106)
    for more on the `<` symbol). Subtracting 50 from the calibration value makes sure
    that the Night-Light turns on when the light level is more than 50 below the calibration
    (initial) measurement.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果草图仅需要检查光线水平是否发生变化，为什么要在表达式中从`calibrationValue`变量中减去50呢？将`lightValue`与小于`calibrationValue`的数字进行比较，可以增加草图的容忍度。如果你使用`lightValue
    < calibrationValue`的表达式，你的夜光灯会在最小的光线变化下闪烁（返回到页面[106](ch04.xhtml#page_106)上的“[逻辑比较运算符](ch04.xhtml#ch04sb02)”以了解更多关于`<`符号的内容）。从校准值中减去50可以确保夜光灯在光线水平比校准（初始）测量值低50时开启。
- en: '**Recalibrate the Night-Light**'
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**重新校准夜光灯**'
- en: One last piece of useful information before you prettify your Night-Light is
    how to reset the calibration value to recalibrate for different light levels.
    The value of `calibrationValue` is set in the `setup()` function, so it runs only
    once. When your Arduino is powered, there are two different ways to restart your
    sketch. First, you can turn the Arduino off and on again, but that’s kind of annoying
    and unsophisticated. The second way is a little more elegant. As with [Project
    4](ch04.xhtml#ch04), you can simply press the reset button shown in [Figure 5-16](ch05.xhtml#ch05fig16)
    to restart your sketch. It works the same way as the reset button on a computer
    or game console. Every time you press that button, the calibration value for the
    Night-Light is reset.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在你美化夜灯之前，最后一个有用的信息是如何重置校准值，以便根据不同的光照水平重新校准。`calibrationValue` 的值在 `setup()`
    函数中设置，因此它只运行一次。当你的 Arduino 通电时，有两种不同的方法可以重启你的草图。首先，你可以将 Arduino 关掉再重新开机，但这有点麻烦而且不太优雅。第二种方法稍微优雅一些。就像[项目
    4](ch04.xhtml#ch04)一样，你只需按下[图 5-16](ch05.xhtml#ch05fig16)所示的重置按钮即可重启草图。它的工作原理与计算机或游戏机上的重置按钮一样。每次按下该按钮，夜灯的校准值都会被重置。
- en: '**FIGURE 5-16:** The reset button in all of its clicky glory'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-16：** 重置按钮，展现其点击时的光辉'
- en: '![Image](../images/fig5_16.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig5_16.jpg)'
- en: Each time you move your project into a new room or lighting situation, recalibrate
    your photoresistor by pressing the reset button. When you recalibrate your photoresistor,
    make sure that it’s reading the actual lighting conditions of your room and that
    you’re not accidentally shadowing it in any way.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你将项目搬到一个新房间或新的光照环境时，按下重置按钮重新校准光敏电阻。当你重新校准光敏电阻时，确保它读取的是房间的实际光照条件，并且没有被任何阴影遮挡。
- en: '**CREATE MORE COLORS WITH ANALOGWRITE()**'
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用 ANALOGWRITE() 创建更多颜色**'
- en: You’re not restricted to just the colors you’ve seen so far with the RGB LED.
    By mixing gradations of those colors, you can make cerulean, orange, powder pink,
    or any of the other thousands of combinations. But you can’t create these colors
    by just turning the different standard colors on an RGB LED on and off, so you
    need a way to turn red on just a bit and add a hint of blue and green to create,
    for example, pink.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你不仅限于目前看到的 RGB LED 的颜色。通过混合这些颜色的渐变，你可以创造出天蓝色、橙色、粉红色或其他成千上万种组合。但你不能通过简单地开关 RGB
    LED 上的标准颜色来创造这些颜色，因此你需要一种方法，只将红色稍微打开，并加入一点蓝色和绿色，来创造例如粉红色。
- en: '**Create Analog Signals with PWM**'
  id: totrans-125
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**使用 PWM 创建模拟信号**'
- en: To use the LED in this way, you need to use analog values rather than digital
    values. In the Electronics Primer, we talked about the difference between analog
    and digital (page [10](ch00.xhtml#page_10)). A digital value can only be on or
    off, like a normal light switch. An analog signal has an infinite number of values,
    so it works on a scale, like a dimmer switch.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要以这种方式使用 LED，你需要使用模拟值而不是数字值。在《电子学入门》一书中，我们讨论了模拟与数字的区别（见第[10](ch00.xhtml#page_10)页）。数字值只能是开或关，就像普通的电灯开关一样。模拟信号有无限多个值，因此它像调光开关一样工作。
- en: The problem is that the Arduino is a digital device, which means that it can
    only turn things on and off. To get it to output a value somewhere between on
    and off, you use a technique called *pulse width modulation (PWM)* to emulate
    an analog signal with digital values. The Arduino does this by turning a digital
    pin on and off extremely fast and then varying the relative amount of time the
    signal is `HIGH` (on) compared to the amount of time the signal is `LOW` (off)
    to create a signal that appears to be analog. The longer a pin is at a high value,
    the greater the analog value of the signal. This is sometimes also called varying
    the *duty cycle*. [Figure 5-17](ch05.xhtml#ch05fig17) shows some duty cycles with
    varying pulse widths; the analog value of the pulse at 75 percent is higher than
    the value of the 25 percent duty cycle.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于 Arduino 是一个数字设备，这意味着它只能开或关。为了让它输出一个介于开和关之间的值，你需要使用一种叫做*脉宽调制（PWM）*的技术，通过数字值模拟模拟信号。Arduino
    通过极快地开关数字引脚，并根据信号处于 `HIGH`（开）与 `LOW`（关）的时间比例来创建一个看起来像模拟信号的输出。引脚处于高值的时间越长，信号的模拟值就越高。这有时也叫做改变*占空比*。[图
    5-17](ch05.xhtml#ch05fig17)展示了不同脉宽的占空比信号；75% 占空比的脉冲模拟值比 25% 占空比的脉冲高。
- en: '**FIGURE 5-17:** Duty cycle signals showing different widths of the pulse'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-17：** 展示不同脉宽的占空比信号'
- en: '![Image](../images/fig5_17.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig5_17.jpg)'
- en: That’s great, but not all Arduino pins have the ability to use PWM. On a standard
    Arduino, only certain GPIO pins—that is, pins 3, 5, 6, 9, 10, and 11—are PWM compatible.
    These pins are noted with a tilde (~) on the board, highlighted in [Figure 5-18](ch05.xhtml#ch05fig18).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好，但并非所有Arduino引脚都支持PWM。在标准Arduino板上，只有某些GPIO引脚——即引脚3、5、6、9、10和11——支持PWM。这些引脚在板上用波浪号（~）标注，在[图5-18](ch05.xhtml#ch05fig18)中突出显示。
- en: '**FIGURE 5-18:** PWM pins on the standard RedBoard'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5-18：** 标准RedBoard上的PWM引脚'
- en: '![Image](../images/fig5_18.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig5_18.jpg)'
- en: Anytime you want to control something with varying values, like the brightness
    of an LED, the speed of a motor, or the tone of a buzzer, you’ll need to use a
    PWM pin to fake an analog signal. Here, we’ll use it to control the brightness
    of each color of the RGB LED in order to mix the colors. For this project, you
    have the RGB LED red, green, and blue pins already hooked up to PWM pins 11, 10,
    and 9, respectively, so you don’t have to change any of your wiring, only your
    code.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你需要控制某个具有变化值的事物时，例如LED的亮度、电机的速度或蜂鸣器的音调，你都需要使用PWM引脚来模拟模拟信号。在这里，我们将使用它来控制RGB
    LED每种颜色的亮度，从而混合颜色。对于这个项目，你的RGB LED红、绿、蓝引脚已经分别连接到PWM引脚11、10和9，因此你不需要更改任何接线，只需修改代码。
- en: '**Mix Colors with analogWrite()**'
  id: totrans-134
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**使用analogWrite()混合颜色**'
- en: 'To utilize these PWM powers, you need to use the `analogWrite()` function,
    which writes a PWM value to a pin. The `analogWrite()` function accepts two parameters:
    the pin number that you want to control and a PWM value to write, which is always
    a range from 0 to 255\. The value of `0` is completely off, and `255` is completely
    on. Let’s write a simple sketch that demonstrates the `analogWrite()` function.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了利用这些PWM功能，你需要使用`analogWrite()`函数，它将PWM值写入一个引脚。`analogWrite()`函数接受两个参数：你想控制的引脚编号和要写入的PWM值，范围始终是0到255。`0`表示完全关闭，`255`表示完全开启。让我们写一个简单的草图来演示`analogWrite()`函数。
- en: '[PRE2]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: First, as with any other pin, you need to specify how you’re going to use the
    GPIO pin using the `pinMode()` function. You pass the pin number, and, since the
    LED is an output, you pass `OUTPUT` as you have in past projects ➊. To set a PWM
    value, you use the `analogWrite()` function to set an analog value between 0 and
    255\. In the example, pin 9 (the blue anode of the RGB LED) is set to an analog
    value of `2` ➋. Upload this sketch to your Arduino, and you should have a dim
    blue colored RGB LED. The `analogWrite()` value of 2 uses PWM to turn on this
    LED for about 0.7 percent or 2/255 of the time. Before moving on, try changing
    the PWM value and reuploading a few times to get a feel for the different values
    and their intensity.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，和其他引脚一样，你需要使用`pinMode()`函数指定如何使用GPIO引脚。你传递引脚编号，并且由于LED是输出设备，你传递`OUTPUT`，就像在过去的项目中一样
    ➊。要设置PWM值，使用`analogWrite()`函数设置一个介于0和255之间的模拟值。在这个示例中，引脚9（RGB LED的蓝色阳极）被设置为模拟值`2`
    ➋。将这个草图上传到Arduino，你应该能看到一个微弱的蓝色RGB LED。`analogWrite()`值为2，使用PWM将此LED开启约0.7%的时间，或2/255的时间。在继续之前，尝试更改PWM值并重新上传几次，感受不同值的强度。
- en: Now that you have the hang of the `analogWrite()` function, try using it to
    mix colors. [Listing 5-3](ch05.xhtml#ch05ex03) creates a blink pattern with different,
    more interesting colors than those used so far.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经掌握了`analogWrite()`函数，尝试使用它来混合颜色。[清单 5-3](ch05.xhtml#ch05ex03)创建了一种闪烁模式，使用了比之前更有趣的颜色。
- en: '**LISTING 5-3:** Multicolored blink'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 5-3：** 多色闪烁'
- en: '[PRE3]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: First, add the other two color pins using the `pinMode()` function ➊. Then,
    cycle through three different colors by setting different analog values to the
    three pins. This sets the brightness level of each specific color, changing how
    much of that color is added to the final mix.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用`pinMode()`函数添加另外两个颜色引脚 ➊。然后，通过为三个引脚设置不同的模拟值来循环显示三种不同的颜色。这将设置每种特定颜色的亮度级别，改变最终混合中每种颜色的加入量。
- en: The first color set creates a bluish purple ➋, the second creates a dusty pale
    blue ➌, and the final set creates a bright yellow ➍. Play around with `analogWrite()`
    to create different colors.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 第一组颜色会产生一种蓝紫色 ➋，第二组产生一种灰白色的浅蓝色 ➌，最后一组则产生明亮的黄色 ➍。尝试使用`analogWrite()`创建不同的颜色。
- en: '**Find RGB Values with Color Picker**'
  id: totrans-143
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**使用颜色选择器查找RGB值**'
- en: You created some pretty specific colors before, but it can be hard to predict
    which RGB values will give you certain colors. An easy way of finding out is to
    use a color-picker tool on the web. There are plenty of them out there, but we
    recommend *[https://www.colorpicker.com/](https://www.colorpicker.com/)*. This
    tool gives you the RGB values for colors you pick from a palette, as shown in
    [Figure 5-19](ch05.xhtml#ch05fig19).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你之前已经创建了一些非常具体的颜色，但很难预测哪些RGB值能生成某种颜色。一个简单的方法是使用网上的颜色选择器工具。有很多这样的工具，我们推荐*[https://www.colorpicker.com/](https://www.colorpicker.com/)*。这个工具能为你从调色板中选取的颜色提供RGB值，如[图
    5-19](ch05.xhtml#ch05fig19)所示。
- en: '**FIGURE 5-19:** The color-selector tool from *[https://www.colorpicker.com/](https://www.colorpicker.com/)*.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-19：** 来自*[https://www.colorpicker.com/](https://www.colorpicker.com/)*的颜色选择器工具。'
- en: '![Image](../images/fig5_19.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig5_19.jpg)'
- en: The three numbers you want to use are labeled R, G, B for the three colors Red,
    Green, and Blue. Ignore the top three H, S, B boxes; they refer to another common
    method for specifying colors called *HSB (hue, saturation, and brightness)*. This
    is a useful technique for many color mixing and graphic design applications, but
    it’s not as useful when you have direct control over the three colors red, green,
    and blue.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 你要使用的三个数字标记为R、G、B，分别代表红色、绿色和蓝色。忽略顶部的三个H、S、B框，它们是另一种常见的指定颜色的方法，称为*HSB（色相、饱和度和亮度）*。这是一种在许多颜色混合和图形设计应用中非常有用的技术，但当你能直接控制红色、绿色和蓝色这三种颜色时，它就没那么有用了。
- en: '**The Custom-Color Night-Light Code**'
  id: totrans-148
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**自定义颜色夜灯代码**'
- en: With the RGB knowledge in hand, now you can easily modify your Night-Light code
    to include your custom color by replacing your `digitalWrite()` function with
    `analogWrite()`. [Listing 5-4](ch05.xhtml#ch05ex04) shows changes to the Night-Light
    code, with the color values set to the teal color we selected in [Figure 5-19](ch05.xhtml#ch05fig19).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有RGB知识后，你现在可以轻松修改你的夜灯代码，通过将`digitalWrite()`函数替换为`analogWrite()`来加入你的自定义颜色。[清单
    5-4](ch05.xhtml#ch05ex04)显示了夜灯代码的变化，将颜色值设置为我们在[图 5-19](ch05.xhtml#ch05fig19)中选择的青绿色。
- en: '**LISTING 5-4:** Final Night-Light code with `analogWrite()` instead of `digitalWrite()`
    commands'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 5-4：** 使用`analogWrite()`替代`digitalWrite()`命令的最终夜灯代码'
- en: '[PRE4]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: With that, your Night-Light prototype is done! If you don’t like the teal we
    selected, use the color-selector tool to find a color you prefer, update your
    `analogWrite()` functions with its RGB value, and then re-upload your sketch before
    moving on. Visit *[http://99colors.net/color-names/](http://99colors.net/color-names/)*
    if you want to browse through some fun color suggestions.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，你的夜灯原型完成了！如果你不喜欢我们选择的青绿色，可以使用颜色选择器工具找到你喜欢的颜色，更新你的`analogWrite()`函数，使用它的RGB值，然后重新上传草图再继续进行。想要浏览一些有趣的颜色建议，可以访问*[http://99colors.net/color-names/](http://99colors.net/color-names/)*。
- en: Now that you have the code working, it’s time to get creative and build the
    enclosure and lampshade.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在代码已经可以运行了，是时候发挥创意，开始制作外壳和灯罩了。
- en: '**BUILD THE NIGHT-LIGHT ENCLOSURE**'
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**制作夜灯外壳**'
- en: We suggest cardstock for this project’s enclosure rather than cardboard (as
    it produces cleaner edges and is easier to work with) and a vellum material or
    translucent paper for the shade. Let’s get building.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议使用卡纸而非纸板来制作此项目的外壳（因为卡纸切边更整齐且更容易操作），并使用羊皮纸或透明纸来制作灯罩。让我们开始动手吧。
- en: '**Cardstock Construction**'
  id: totrans-156
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**卡纸制作**'
- en: We’ll show you a basic Night-Light design to get you started, but we encourage
    you to get creative by customizing the design later. Or, if you’re feeling confident,
    you can design your own Night-Light enclosure from scratch without using our templates
    at all.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会展示一个基础的夜灯设计来帮助你入门，但我们鼓励你稍后通过自定义设计来发挥创意。或者，如果你有信心，也可以完全不使用我们的模板，自己从头设计夜灯外壳。
- en: '**Cut Out the Parts**'
  id: totrans-158
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**裁剪部件**'
- en: 'This project has two templates: one for the structure of the Night-Light and
    one for the shade. The shade can be made from any material similar to printer
    paper in thickness, but we’ve found that a fully translucent material like vellum
    works best. If you have a printer, you can open the templates in [Figure 5-20](ch05.xhtml#ch05fig20)
    from this book’s resource files and print them directly to your material to cut
    out.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目有两个模板：一个是夜灯的结构模板，另一个是灯罩模板。灯罩可以由任何类似打印纸厚度的材料制作，但我们发现完全透明的材料（如羊皮纸）效果最好。如果你有打印机，可以在本书的资源文件中打开[图
    5-20](ch05.xhtml#ch05fig20)的模板，直接打印到你的材料上然后裁剪出来。
- en: '**FIGURE 5-20:** Enclosure templates for the Night-Light (not full size)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-20：** 夜光灯外壳模板（非全尺寸）'
- en: '![Image](../images/fig5_20.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig5_20.jpg)'
- en: Note that the base of the Night-Light enclosure has a square cut out for access
    to wires. We also found it convenient to leave one of the four side panels off
    so that we could run the wires back to the larger breadboard more easily. We’ll
    leave it up to you whether to include that fourth panel.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，夜光灯外壳的底部有一个方形开口，用于电线的通过。我们还发现，去掉四个侧面板中的一个会更方便，这样可以更容易地将电线引回到较大的面包板上。是否包括第四个面板，将由你决定。
- en: 'Once your template pieces are copied onto your cardstock and translucent material,
    cut them out. We highly recommend a sharp craft knife and a metal ruler to get
    clean edges for your project, as shown in [Figure 5-21](ch05.xhtml#ch05fig21).
    Remember craft-knife safety: always pull the blade (don’t push), and make multiple
    passes.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的模板部件复制到卡纸和透明材料上，开始切割它们。我们强烈推荐使用锋利的工艺刀和金属尺来确保项目的边缘干净，如[图 5-21](ch05.xhtml#ch05fig21)所示。记住工艺刀使用安全：总是拉刀片（不要推），并进行多次切割。
- en: '**FIGURE 5-21:** Cutting out templates from cardstock'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-21：** 从卡纸上切割模板'
- en: '![Image](../images/fig5_21.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig5_21.jpg)'
- en: '**Assemble the Parts**'
  id: totrans-166
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**组装部件**'
- en: Arrange all of your pieces in front of you. You should have six pieces for the
    structure and four pieces for the shade material, as shown in [Figure 5-22](ch05.xhtml#ch05fig22).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有部件摆放在你面前。你应该有六个结构部件和四个遮光片部件，正如[图 5-22](ch05.xhtml#ch05fig22)所示。
- en: '**FIGURE 5-22:** Individual parts cut out and ready for assembly'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-22：** 切割好的单独部件，准备组装'
- en: '![Image](../images/fig5_22.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig5_22.jpg)'
- en: First, pick up the base (the piece with the center cut out). Hold it flat in
    front of you and fold the left and top edges toward you to form a right angle.
    Fold the tab on the left edge inward and secure it to the top edge with a small
    amount of glue, as shown in [Figure 5-23](ch05.xhtml#ch05fig23). Repeat this for
    the other four corners of the base piece, and then use the same technique to assemble
    the top piece.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，拿起底部部件（中央有开口的部件）。将其平放在你面前，并将左边和顶部边缘向你折叠，以形成一个直角。将左边缘上的标签向内折叠，并用少量胶水将其固定在顶部边缘，正如[图
    5-23](ch05.xhtml#ch05fig23)所示。对底部部件的其他四个角重复此步骤，然后使用相同的方法组装顶部部件。
- en: '**NOTE**'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Depending on your card-stock thickness, you may want to lightly score the
    fold lines with your craft knife. This will result in sharper, cleaner corners.*'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '*根据你的卡纸厚度，你可能想用工艺刀轻轻划出折痕线。这将使角部更加锋利、干净。*'
- en: '**FIGURE 5-23:** Assembling the base and top pieces'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-23：** 底部和顶部部件的组装'
- en: '![Image](../images/fig5_23.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig5_23.jpg)'
- en: Next, fold each of the four side pieces down the middle lengthwise to form a
    nice 90-degree angle. There is a dotted line in the template to guide you. Once
    you have the top and base assembled and the sides folded, the six pieces should
    look like the ones in [Figure 5-24](ch05.xhtml#ch05fig24).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将四个侧面部件沿中线纵向折叠，形成一个漂亮的90度角。模板中有虚线可以指导你。一旦顶部和底部组装好并且侧面折叠完成，六个部件应该如[图 5-24](ch05.xhtml#ch05fig24)所示。
- en: '**FIGURE 5-24:** Assembled pieces for the Night-Light enclosure'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-24：** 夜光灯外壳的组装部件'
- en: '![Image](../images/fig5_24.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig5_24.jpg)'
- en: Finally, take each corner piece and glue it to the base, as shown in [Figure
    5-25](ch05.xhtml#ch05fig25).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，拿起每个角部件并将其粘到底部，正如[图 5-25](ch05.xhtml#ch05fig25)所示。
- en: '**FIGURE 5-25:** Glue each corner piece to the base'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-25：** 将每个角部件粘到底部'
- en: '![Image](../images/fig5_25.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig5_25.jpg)'
- en: When you’re finished gluing corners, you should have four standing corner support
    structures. We found it easier to glue the shades in place before gluing the top
    piece, so just add a small dab of glue on the inside edge of each support structure,
    and press the shades into place, as shown in [Figure 5-26](ch05.xhtml#ch05fig26).
    You may want to use only three shades, to allow access for wires.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成粘合角落时，应该会有四个立起的角撑结构。我们发现，在粘合顶部部件之前先将遮光片粘好更为容易，所以只需在每个支撑结构的内边缘涂上一小点胶水，然后将遮光片按图示位置压入，正如[图
    5-26](ch05.xhtml#ch05fig26)所示。你可能只想使用三个遮光片，以便让电线能够通过。
- en: '**FIGURE 5-26:** Before adding the top piece, glue the shades into place.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-26：** 在加上顶部部件之前，先将遮光片粘好。'
- en: '![Image](../images/fig5_26.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig5_26.jpg)'
- en: When you’ve added all the panels you want, add the top piece. Simply add a small
    dab of glue on each corner to secure the top piece in place, as shown in [Figure
    5-27](ch05.xhtml#ch05fig27).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 当你添加完所有面板后，添加顶部件。只需在每个角落上涂一点胶水，以固定顶部件，如[图5-27](ch05.xhtml#ch05fig27)所示。
- en: '**FIGURE 5-27:** Adding the final top piece'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5-27：** 添加最终的顶部件'
- en: '![Image](../images/fig5_27.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig5_27.jpg)'
- en: Now you should have a completed Night-Light enclosure like the one in [Figure
    5-28](ch05.xhtml#ch05fig28)!
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该已经有了一个完成的夜灯外壳，像[图5-28](ch05.xhtml#ch05fig28)中的那样！
- en: '**FIGURE 5-28:** Final Night-Light enclosure'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5-28：** 最终的夜灯外壳'
- en: '![Image](../images/fig5_28.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig5_28.jpg)'
- en: '**Put the Electronics Inside**'
  id: totrans-190
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将电子元件放入内部**'
- en: 'You have a couple of options for transferring the electronics into your new
    project: put the breadboard and the Arduino baseplate under the Night-Light, or
    move just the LED inside the Night-Light. We took the second approach.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 你有几个选择可以将电子元件转移到新的项目中：将面包板和Arduino底座放在夜灯下方，或者仅将LED移入夜灯内。我们选择了第二种方法。
- en: 'First, unplug your Arduino from the computer, and then move the RGB LED onto
    a mini breadboard. The mini breadboard works the same way as its bigger cousin
    does; it just lacks power rails and is shorter. Add jumper wires to the mini breadboard
    to make the connection from the LED back to your original circuit, as shown in
    [Figure 5-29](ch05.xhtml#ch05fig29). Notice that each of the four legs of the
    RGB LED is in a separate row: one for the red leg, one for the ground leg (the
    longest), one for green, and one for blue.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将Arduino从电脑上拔下，然后将RGB LED移到迷你面包板上。迷你面包板的工作原理与较大的面包板相同，只是没有电源轨，且较短。将跳线添加到迷你面包板上，以便将LED连接回原始电路，如[图5-29](ch05.xhtml#ch05fig29)所示。请注意，RGB
    LED的四个引脚分别位于不同的行：一个是红色引脚，一个是地线引脚（最长的），一个是绿色引脚，一个是蓝色引脚。
- en: '**FIGURE 5-29:** Using the mini breadboard to move the RGB LED inside the Night-Light'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5-29：** 使用迷你面包板将RGB LED移入夜灯内'
- en: '![Image](../images/fig5_29.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig5_29.jpg)'
- en: Now, connect the other end of each jumper wire to the breadboard row where the
    corresponding RGB LED leg used to be, as in [Figure 5-30](ch05.xhtml#ch05fig30).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将每根跳线的另一端连接到面包板上对应RGB LED引脚所在的行，如[图5-30](ch05.xhtml#ch05fig30)所示。
- en: '**FIGURE 5-30:** Connecting the mini breadboard back to the main circuit'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5-30：** 将迷你面包板连接回主电路'
- en: '![Image](../images/fig5_30.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig5_30.jpg)'
- en: If you left one of the sides open, simply run the wires out the back of the
    lamp enclosure, like we did in [Figure 5-31](ch05.xhtml#ch05fig31). Otherwise,
    carefully place your shade over the mini breadboard, and either tape your jumper
    wires to the table so the shade stays flat or make a couple of notches in the
    cardboard at the bottom of the enclosure for the wires to fit through.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你留了一边空着，只需像我们在[图5-31](ch05.xhtml#ch05fig31)中所做的那样，将跳线从灯罩后面引出。否则，仔细地将灯罩放在迷你面包板上，并用胶带将跳线固定在桌面上，以确保灯罩平稳，或者在灯罩底部的纸板上做几个缺口，以便跳线通过。
- en: '**FIGURE 5-31:** Placing the shade on top of the mini breadboard'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5-31：** 将灯罩放置在迷你面包板上'
- en: '![Image](../images/fig5_31.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig5_31.jpg)'
- en: '**Let It Glow!**'
  id: totrans-201
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**让它发光！**'
- en: If you have the external battery pack, you can now put four AA batteries in,
    and plug the barrel jack into the Arduino. The board should still be programmed
    and running, so just turn off the lights. You should get a nice, softly glowing
    night-light, like ours in [Figure 5-32](ch05.xhtml#ch05fig32).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有外部电池包，现在可以放入四个AA电池，并将桶形插头插入Arduino。电路板应该仍然是编程并运行的，因此只需关闭灯光。你应该得到一个柔和发光的夜灯，就像我们在[图5-32](ch05.xhtml#ch05fig32)中的那样。
- en: '**FIGURE 5-32:** Lights out! Our final glowing Night-Light project.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5-32：** 灯光熄灭！我们最终的发光夜灯项目。'
- en: '![Image](../images/fig5_32.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig5_32.jpg)'
- en: '**GOING FURTHER**'
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步扩展**'
- en: This project used a lot of new skills and knowledge, but it still has a load
    of potential for further hacking. There are plenty of things you can do in terms
    of both the design and the code as you build your skills with Arduino.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目使用了许多新的技能和知识，但它仍然具有大量进一步修改的潜力。随着你在Arduino方面技能的提升，无论是设计还是代码方面，都有许多可以尝试的地方。
- en: '**Hack**'
  id: totrans-207
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**黑客**'
- en: One great sketch hack would be to have the colors change periodically when the
    Night-Light is on. For some hints, look back at your Stoplight project code. One
    method would be to add some simple blink code within the `if()` statement rather
    than just `digitalWrite()` functions and build a color animation.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的草图技巧是，当夜光灯开启时，让颜色周期性地变化。你可以参考你的红绿灯项目代码，获得一些提示。一种方法是在`if()`语句中加入一些简单的闪烁代码，而不仅仅是使用`digitalWrite()`函数，来构建一个颜色动画。
- en: You could also try adding different colors for different light readings using
    the `else if()` command rather than just `if()` or `else` on its own. The base
    structure of this method might look something like [Listing 5-5](ch05.xhtml#ch05ex05).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以尝试使用`else if()`命令为不同的光照读取值添加不同的颜色，而不是仅仅使用`if()`或`else`。这种方法的基本结构可能类似于[列表
    5-5](ch05.xhtml#ch05ex05)。
- en: '**LISTING 5-5:** Three-stage Night-Light code example'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 5-5：** 三阶段夜光灯代码示例'
- en: '[PRE5]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can see the sketch uses `else` `if()` to set categories of light value.
    You would then need to set the color for each category.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到草图使用了`else` `if()`来设置光照值的类别。然后，你需要为每个类别设置颜色。
- en: '**Modify**'
  id: totrans-213
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**修改**'
- en: The design of your Night-Light is totally up to you, so you can create a whole
    new design if you want. There are a number of tools you can use to design an enclosure
    and then produce it through automated means, such as laser cutting with balsa
    wood, 3D printing with materials like ABS or HIPS plastics, or even CNC milling,
    routing, or machining. Computer-controlled manufacturing will produce superclean
    and accurate parts that will amount to a more refined product. We encourage you
    to explore these possibilities to create something more permanent and polished.
    If you don’t have access to these kinds of tools, try looking into local hacker
    or maker spaces in your city. Often they’ll have facilities and tools that you
    can work with.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 你的夜光灯设计完全由你决定，所以如果你愿意，可以创造一个全新的设计。你可以使用许多工具来设计一个外壳，然后通过自动化方式制作它，比如使用轻木激光切割、3D
    打印（使用 ABS 或 HIPS 塑料等材料）甚至 CNC 铣削、雕刻或加工。计算机控制的制造将产生非常干净且精确的部件，从而成就一个更精致的产品。我们鼓励你探索这些可能性，创造出更持久、更精致的作品。如果你没有这些工具，可以尝试查找你所在城市的本地黑客空间或创客空间。通常它们会提供你可以使用的设施和工具。
- en: We have included a few example templates and ideas of projects that you can
    build and adapt at *[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*.
    [Figure 5-33](ch05.xhtml#ch05fig33) shows an example of how you can break up the
    lampshade design with some fun patterns.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供了一些示例模板和项目创意，你可以在*[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*上查看和改编这些内容。[图
    5-33](ch05.xhtml#ch05fig33)展示了如何通过一些有趣的图案来打破灯罩设计的示例。
- en: '**FIGURE 5-33:** A fun design from our design templates.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5-33：** 来自我们设计模板的有趣设计。'
- en: '![Image](../images/fig5_33.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../images/fig5_33.jpg)'
