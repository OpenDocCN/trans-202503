["```\nconst getFoo = function () {\n    return 'foo';\n};\n\nexport default getFoo; \n```", "```\nexport const getFooBar = function () {\n    return 'foo bar';\n};\n\nconst getBar = function () {\n    return 'bar';\n};\n\nconst getBaz = function () {\n    return 'baz';\n};\n\nexport {getBar, getBaz}; \n```", "```\nimport getFoo from \"default.js\";\n```", "```\nimport {getFooBar, getBar, getBaz} from \"named.js\";\n```", "```\nfunction scope() {\n    foo = 1;\n    var foo;\n} \n```", "```\nfunction scope() {\n    var foo;\n    foo = 1;\n} \n```", "```\nvar globalVar = \"global\";\nfunction scope() {\n    var foo = \"1\";\n    if (true) {\n        var bar = \"2\";\n    }\n    console.log(globalVar);\n    console.log(window.globalVar);\n    console.log(foo);\n    console.log(bar);\n}\nscope(); \n```", "```\nlet globalVar = \"global\";\nfunction scope() {\n    let foo = \"1\";\n    if (true) {\n        let bar = \"2\";\n    }\n    console.log(globalVar);\n    console.log(window.globalVar);\n    console.log(foo);\n    console.log(bar);\n}\nscope(); \n```", "```\nconst primitiveDataType = 1;\ntry {\n    primitiveDataType = 2;\n} catch (err) {\n    console.log(err);\n}\n\nconst nonPrimitiveDataType = [];\nnonPrimitiveDataType.push(1);\n\nconsole.log(nonPrimitiveDataType); \n```", "```\nconst traditional = function (x) {\n    return x * x;\n}\n\nconst conciseBody = x => x * x; \n```", "```\n❶ this.scope = \"lexical scope\";\n\nconst scopeOf = {\n  ❷ scope: \"defining scope\",\n\n    traditional: function () {\n      ❸ return this.scope;\n    },\n\n    arrow: () => {\n        return this.scope;\n    },\n};\n\nconsole.log(scopeOf.traditional());\nconsole.log(scopeOf.arrow()); \n```", "```\nlet numbers = [-2, -1, 0, 1, 2];\n\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">let traditional = numbers.filter(function(num) {</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">return num >= 0;</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">}</samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">);</samp>\n\nlet arrow = numbers.filter(num => num >= 0);\n\nconsole.log(traditional);\nconsole.log(arrow); \n```", "```\nlet a = 1;\nlet b = 2;\nlet string = `${a} + ${b} = ${a + b}`;\nconsole.log(string); \n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">function tag(literal, ...values) {</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">console.log(\"literal\", literal);</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">console.log(\"values\", values);</samp>\n\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">let result;</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\"></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">switch (literal[1]) {</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">case \" plus \":</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">result = values[0] + values[1];</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">break;</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">case \" minus \":</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">result = values[0] - values[1];</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">break;</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">}</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">return `${values[0]}${literal[1]}${values[1]} is ${result}`;</samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">}</samp>\n\nlet a = 1;\nlet b = 2;\nlet output = tag`What is ${a} plus ${b}?`;\n\nconsole.log(output); \n```", "```\nconst fs = require(\"fs\");\n\nconst callback = (err, data) => {\n    if (err) {\n        return console.log(\"error\");\n    }\n    console.log(`File content ${data}`);\n};\n\nfs.readFile(\" file.txt\", callback); \n```", "```\nfunction fetchData(url) {\n    fetch(url)\n        .then((response) => response.json())\n        .then((json) => console.log(json))\n        .catch((error) => {\n            console.error(`Error : ${error}`);\n        });\n}\nfetchData(\"https://www.usemodernfullstack.dev/api/v1/users\"); \n```", "```\nasync function fetchData (url) {\n    try {\n        const response = await fetch(url);\n        const json = await response.json();\n        console.log(json);\n    } catch (error) {\n        console.error(`Error : ${error}`);\n    }\n}\n\nfetchData(\"https://www.usemodernfullstack.dev/api/v1/users\"); \n```", "```\nconst original = [1,2,3,4];\nconst multiplied = original.map((item) => item * 10);\nconsole.log(`original array: ${original}`);\nconsole.log(`multiplied array: ${multiplied}`); \n```", "```\nlet object = {fruit: \"apple\", color: \"green\"};\nlet {fruit, color} = {...object};\n\nconsole.log(`fruit: ${fruit}, color: ${color}`);\n\ncolor = \"red\";\nconsole.log(`object.color: ${object.color}, color: ${color}`); \n```", "```\nlet originalArray = [1,2,3];\nlet clonedArray = [...originalArray];\n\nclonedArray[0] = \"one\";\nclonedArray[1] = \"two\";\nclonedArray[2] = \"three\";\n\nconsole.log (`originalArray: ${originalArray}, clonedArray: ${clonedArray}`); \n```", "```\n{\n    \"name\": \"sample-express\",\n    \"version\": \"1.0.0\",\n    \"description\": \"sample express server\",\n    \"license\": \"ISC\",\n    **\"type\": \"module\",**\n    \"dependencies\": {\n        \"express\":\"^4.18.2\",\n        **\"node-fetch\": \"^3.2.6\"**\n    },\n    \"devDependencies\": {}\n} \n```", "```\nimport fetch from \"node-fetch\";\n\nconst routeHello = () => \"Hello World!\";\n\nconst routeAPINames = async () => {\n    const url = \"https://www.usemodernfullstack.dev/api/v1/users\";\n    let data;\n    try {\n        const response = await fetch(url);\n        data = await response.json();\n    } catch (err) {\n        return err;\n    }\n    const names = data\n        .map((item) => `id: ${item.id}, name: ${item.name}`)\n        .join(\"<br>\");\n    return names;\n};\n\nexport {routeHello, routeAPINames}; \n```", "```\n**import {routeHello, routeAPINames} from \"./routes.js\";**\n**import express from \"express\";**\n\nconst server = express();\nconst port = 3000;\n\nserver.get(\"/hello\", function (req, res) {\n    **const response = routeHello(req, res);**\n    res.send(response);\n});\n\nserver.get(\"/api/names\", **async** function (req, res) {\n    let response;\n    try {\n        **response = await routeAPINames(req, res);**\n    } catch (err) {\n        console.log(err);\n    }\n    res.send(response);\n});\n\nserver.listen(port, function () {\n    console.log(\"Listening on \" + port);\n}); \n```", "```\n$ **node index.js**\nListening on 3000 \n```"]