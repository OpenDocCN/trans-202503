- en: '**PART 2**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**SOUND**'
  prefs: []
  type: TYPE_NORMAL
- en: 'PROJECT 7: ARDUINO MELODY'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**SO FAR ALL THE PROJECTS HAVE BEEN VISUAL, SO NOW IT’S TIME TO MAKE SOME MUSIC.
    IN THIS PROJECT WE WILL BE USING A PIEZOELECTRIC BUZZER TO PLAY SOME MELODIES.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0064-01.jpg)![image](../images/f0065-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Arduino board
  prefs: []
  type: TYPE_NORMAL
- en: • Piezo buzzer
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Arduino melody uses a piezo buzzer to create frequencies that resemble recognizable
    notes. You use the Arduino IDE to give the order, rate, and duration of the notes
    to play a specific tune.
  prefs: []
  type: TYPE_NORMAL
- en: '*Piezos* are inexpensive buzzers often used in small toys. A piezo element
    without its plastic housing looks like a gold metallic disc with connected positive
    (typically red) and negative (typically black) wires. A piezo is capable only
    of making a clicking sound, which we create by applying voltage. We can make recognizable
    notes by getting the piezo to click hundreds of times a second at a particular
    frequency, so first we need to know the frequency of the different tones we want.
    [Table 7-1](ch07.xhtml#ch7tab1) shows the notes and their corresponding frequencies.
    *Period* is the duration of time, in microseconds, at which the frequency is created.
    We halve this number to get the `timeHigh` value, which is used in the code to
    create the note.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TABLE 7-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: Notes and their corresponding frequences
  prefs: []
  type: TYPE_NORMAL
- en: '| **NOTE** | **FREQUENCY** | **PERIOD** | **TIMEHIGH** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| C | 261 Hz | 3,830 | 1915 |'
  prefs: []
  type: TYPE_TB
- en: '| D | 294 Hz | 3,400 | 1700 |'
  prefs: []
  type: TYPE_TB
- en: '| E | 329 Hz | 3,038 | 1519 |'
  prefs: []
  type: TYPE_TB
- en: '| F | 349 Hz | 2,864 | 1432 |'
  prefs: []
  type: TYPE_TB
- en: '| G | 392 Hz | 2,550 | 1275 |'
  prefs: []
  type: TYPE_TB
- en: '| A | 440 Hz | 2,272 | 1136 |'
  prefs: []
  type: TYPE_TB
- en: '| B | 493 Hz | 2,028 | 1014 |'
  prefs: []
  type: TYPE_TB
- en: '| C | 523 Hz | 1,912 | 956 |'
  prefs: []
  type: TYPE_TB
- en: 'The code sends a square wave of the appropriate frequency to the piezo, generating
    the corresponding tone (see [Project 2](ch02.xhtml#ch02) for more on waveform).
    The tones are calculated through the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The setup of this project is really simple and uses only two wires connected
    to the Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Connect the piezo’s black wire directly to GND on the Arduino, and the red wire
    to Arduino pin 9.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **PIEZO** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Red wire | Pin 9 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Black wire | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Check that your setup matches that of [Figure 7-1](ch07.xhtml#ch7fig1), and
    then upload the code shown next in “[The Sketch](ch07.xhtml#ch07lev1sec03)”.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 7-1**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Circuit diagram for the Arduino melody
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f07-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ll start off with a simple tune. At ➊, we tell the IDE that the tune is made
    up of 15 notes. Then we store the notes of the melody in a character array as
    a text string in the order in which they should be played, and the length for
    which each note will play is stored in another array as integers. If you want
    to change the tune, you can alter the notes in the array at ➋, and the number
    of beats for which each corresponding note plays at ➌. Finally at ➍ we set the
    tempo at which the tune will be played. Put it all together, and what does it
    play?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'PROJECT 8: MEMORY GAME'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**IN THIS PROJECT WE’LL CREATE OUR OWN VERSION OF AN ATARI ARCADE MEMORY GAME
    CALLED TOUCH ME, USING FOUR LEDS, FOUR PUSHBUTTON SWITCHES, A PIEZO BUZZER, AND
    SOME RESISTORS AND JUMPER WIRES.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0069-01.jpg)![image](../images/f0070-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Arduino board
  prefs: []
  type: TYPE_NORMAL
- en: • Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: • Piezo buzzer
  prefs: []
  type: TYPE_NORMAL
- en: • 4 momentary tactile four-pin pushbuttons
  prefs: []
  type: TYPE_NORMAL
- en: • 4 LEDs
  prefs: []
  type: TYPE_NORMAL
- en: • 4 220-ohm resistors
  prefs: []
  type: TYPE_NORMAL
- en: '**LIBRARIES REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Tone
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The original Atari game had four colored panels, each with an LED that lit up
    in a particular pattern that players had to repeat back (see [Figure 8-1](ch08.xhtml#ch8fig1)).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 8-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: The original *Touch Me* game
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f08-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This memory game plays a short introductory tune and flashes an LED. When you
    press the correct corresponding button, the lights flash again in a longer sequence.
    Each time you repeat the sequence back correctly, the game adds an extra step
    to make the sequence more challenging for you. When you make an error, the game
    resets itself.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Place the pushbuttons in the breadboard so they straddle the center break with
    pins A and B on one side of the break, and C and D on the other, as shown in [Figure
    8-2](ch08.xhtml#ch8fig2). (See [Project 1](ch01.xhtml#ch01) for more information
    on how the pushbutton works.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 8-2:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A pushbutton has four pins.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f08-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Connect pin B of each pushbutton to the GND rail of your breadboard, and connect
    the rail to Arduino GND.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect pin D of each pushbutton to Arduino’s digital pins 2 through 5 in order.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the LEDs into the breadboard with the shorter, negative legs connected
    to pin C of each pushbutton. Insert the positive leg into the hole on the right,
    as shown in the circuit diagram in [Figure 12-3](ch12.xhtml#ch12fig3).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **PUSHBUTTON** | **ARDUINO/LED** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin B | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin C | LED negative legs |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin D | Arduino pins 2–5 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Place a 220-ohm resistor into the breadboard with one wire connected to the
    positive leg of each LED. Connect the other wire of the resistor to the Arduino
    as follows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **LEDS** | **ARDUINO/PUSHBUTTON** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Positive legs | Arduino pins 8–11 via 220-ohm resistors |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Negative legs | Pushbutton pin C |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Make sure the red LED connected to pin 11 is paired with the pushbutton connected
    to pin 5, the yellow LED connected to pin 10 is paired with the pushbutton connected
    to pin 4, the green LED connected to pin 9 is paired with the pushbutton connected
    to pin 3, and the blue LED connected to pin 8 is paired with the pushbutton connected
    to pin 2.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connect the black wire of the piezo directly to Arduino GND, and the red wire
    to Arduino pin 12.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **PIEZO** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Red wire | Pin 12 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Black wire | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Check your setup against [Figure 8-3](ch08.xhtml#ch8fig3), and then upload the
    code in “[The Sketch](ch08.xhtml#ch08lev1sec03)” on [page 73](ch08.xhtml#page_73).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 8-3:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Circuit diagram for the memory game
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f08-03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sketch generates a random sequence in which the LEDs will light; a random
    value generated for `y` in the pattern loop determines which LED is lit (e.g.,
    if y is 2, the LED connected to pin 2 will light). You have to follow and repeat
    back the pattern to advance to the next level.
  prefs: []
  type: TYPE_NORMAL
- en: In each level, the previous lights are repeated and one more randomly generated
    light is added to the pattern. Each light is associated with a different tone
    from the piezo, so you get a different tune each time, too. When you get a sequence
    wrong, the sketch restarts with a different random sequence. For the sketch to
    compile correctly, you will need to install the Tone library (available from *[http://nostarch.com.com/arduinohandbook/](http://nostarch.com.com/arduinohandbook/)*).
    See “[Libraries](ch00.xhtml#ch00lev2sec07)” on [page 7](ch00.xhtml#page_7) for
    details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'PROJECT 9: SECRET KNOCK LOCK'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**FOR CENTURIES CLANDESTINE GROUPS HAVE USED SECRET KNOCKS TO PREVENT UNAUTHORIZED
    ENTRY. LET’S BRING THIS SYSTEM INTO MODERN TIMES, BY CREATING OUR OWN ELECTRONIC
    GATEKEEPER.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0078-01.jpg)![image](../images/f0079-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Arduino board
  prefs: []
  type: TYPE_NORMAL
- en: • Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: • Tower Pro SG90 9g servomotor
  prefs: []
  type: TYPE_NORMAL
- en: • Piezo buzzer
  prefs: []
  type: TYPE_NORMAL
- en: • 3 LEDs
  prefs: []
  type: TYPE_NORMAL
- en: • 1M-ohm resistor
  prefs: []
  type: TYPE_NORMAL
- en: • 3 220-ohm resistors
  prefs: []
  type: TYPE_NORMAL
- en: '**LIBRARIES REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Servo
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this project, you’ll make a circuit that moves a servo arm to unlock a box
    or door when you provide the correct secret knock. So far we’ve been using a piezo
    buzzer only to make noise, but we can also use it as a sensor to detect sounds—in
    this case, knocks. When a piezo is struck it rings like a bell, but instead of
    producing sound it outputs voltage, which generates a number depending on the
    force of the strike. We’ll measure this voltage in numbers, and if the knocks
    fall within a certain range, the Arduino will register them as correct. If three
    knocks of the correct voltage are detected, you’ve cracked the code, and the servo
    arm moves to unlock the box or door.
  prefs: []
  type: TYPE_NORMAL
- en: Here are the two lines of code we’ll use later in the sketch to set the range
    for the voltage; if the voltage is between 10 and 100, the knock will be registered.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If you knock too softly or too hard, the knock won’t register. You’ll need
    to do three “correct” knocks to trigger the servo arm to move. When the correct
    sequence and strength of knock are registered, the servo arm swings 90 degrees
    to “unlock” whatever it is set up with. The LEDs, shown in [Figure 9-1](ch09.xhtml#ch9fig1),
    serve as indicators of your lock’s status: the red LED lights when the knocks
    are incorrect and the servo arm has not moved (that is, the box or door is still
    locked); the yellow LED flashes when a knock is registered and a correct code
    is sensed; and the green LED lights and the servomotor moves after three correct
    knocks.'
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 9-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: The LED setup
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f09-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For the best result, remove your piezo from its casing and attach it directly
    to the inside of a box or outside of a door so it is more sensitive to the vibration
    of the knock.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Insert a 1M-ohm resistor into your breadboard and connect the piezo’s red wire
    to one leg and its black wire to the other. Connect the black wire to the GND
    rail, and the red wire to Arduino pin A0.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **PIEZO** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Red wire | A0 via 1M-ohm resistor |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Black wire | GND via 1M-ohm resistor |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Connect the servo’s yellow signal wire directly to Arduino pin 9, its brown
    wire to GND, and its red wire to +5V.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **SERVO** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Yellow wire | Pin 9 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Red wire | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Brown wire | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: 'Insert the LEDs into your breadboard with the short, negative legs connected
    to GND. The positive legs should connect to the pins via 220-ohm resistors as
    follows: yellow connects to Arduino pin 3, green to pin 4, and red to pin 5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **LEDS** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Positive legs | Pins 3–5 via 220-ohm resistors |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Negative legs | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Connect Arduino pin 2 to the positive power rail. In our setup this is always
    on, but you could add a switch in the connection between Arduino pin 2 and the
    power rail to save power when the project is not in use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the breadboard rails to Arduino GND and +5V.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure your setup matches the circuit diagram in [Figure 9-2](ch09.xhtml#ch9fig2),
    and then upload the code in “[The Sketch](ch09.xhtml#ch09lev1sec03)” on [page
    82](ch09.xhtml#page_82).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 9-2:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The circuit diagram for the secret knock lock
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f09-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We first call on the Servo library and set Arduino pin 9 to control the servo.
    LEDs are attached to Arduino pins 3, 4, and 5, and these will light depending
    on the validity of a knock. The piezo acts as a sensor rather than a buzzer in
    this project and is attached to Arduino pin A0\. When someone knocks, the knock
    is sensed by the piezo and a voltage value is sent to the A0 analog pin of the
    Arduino depending on the strength of the knock—the harder the knock, the higher
    the value. A knock with a value below 10 is considered too quiet, and one with
    a value above 100 too loud, so neither will be accepted as a valid knock. The
    red LED lights if the knock is not accepted, and the yellow LED lights if it is.
    Any knock value between 10 and 100 is accepted as a valid knock and counted, and
    if three valid knocks are received, the servomotor moves and the green LED lights.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned earlier, these are the two lines of code that set the parameters
    for measuring the voltage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you were feeling particularly secretive, you could set this range even tighter
    to make the code harder to crack. Here’s the sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
