- en: '**PART 2**'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**第2部分**'
- en: '![image](../images/common-01.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common-01.jpg)'
- en: '**SOUND**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**声音**'
- en: 'PROJECT 7: ARDUINO MELODY'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目7：Arduino旋律
- en: '**SO FAR ALL THE PROJECTS HAVE BEEN VISUAL, SO NOW IT’S TIME TO MAKE SOME MUSIC.
    IN THIS PROJECT WE WILL BE USING A PIEZOELECTRIC BUZZER TO PLAY SOME MELODIES.**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**到目前为止，所有项目都是视觉项目，现在是时候制作一些音乐了。在这个项目中，我们将使用压电蜂鸣器来播放一些旋律。**'
- en: '![image](../images/f0064-01.jpg)![image](../images/f0065-01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0064-01.jpg)![image](../images/f0065-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需组件**'
- en: • Arduino board
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: • Arduino主板
- en: • Piezo buzzer
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: • 压电蜂鸣器
- en: '**HOW IT WORKS**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**工作原理**'
- en: The Arduino melody uses a piezo buzzer to create frequencies that resemble recognizable
    notes. You use the Arduino IDE to give the order, rate, and duration of the notes
    to play a specific tune.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino旋律使用压电蜂鸣器产生类似于可辨认音符的频率。你可以使用Arduino IDE来指定音符的顺序、速率和时长，以播放特定的旋律。
- en: '*Piezos* are inexpensive buzzers often used in small toys. A piezo element
    without its plastic housing looks like a gold metallic disc with connected positive
    (typically red) and negative (typically black) wires. A piezo is capable only
    of making a clicking sound, which we create by applying voltage. We can make recognizable
    notes by getting the piezo to click hundreds of times a second at a particular
    frequency, so first we need to know the frequency of the different tones we want.
    [Table 7-1](ch07.xhtml#ch7tab1) shows the notes and their corresponding frequencies.
    *Period* is the duration of time, in microseconds, at which the frequency is created.
    We halve this number to get the `timeHigh` value, which is used in the code to
    create the note.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*压电元件*是便宜的蜂鸣器，通常用于小型玩具。没有塑料外壳的压电元件看起来像一个金色的金属圆盘，带有连接的正极（通常为红色）和负极（通常为黑色）导线。压电元件只能发出“咔嗒”声，我们通过施加电压来产生这个声音。我们可以通过让压电元件在每秒钟以特定频率点击数百次来发出可辨认的音符，因此首先我们需要知道我们想要的不同音调的频率。[表7-1](ch07.xhtml#ch7tab1)显示了音符及其对应的频率。*周期*是以微秒为单位的时间长度，用于创建该频率。我们将这个数字除以二，得到`timeHigh`值，该值在代码中用于生成音符。'
- en: '**TABLE 7-1:**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**表7-1：**'
- en: Notes and their corresponding frequences
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 音符及其对应的频率
- en: '| **NOTE** | **FREQUENCY** | **PERIOD** | **TIMEHIGH** |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| **音符** | **频率** | **周期** | **timeHigh** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| C | 261 Hz | 3,830 | 1915 |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| C | 261 Hz | 3,830 | 1915 |'
- en: '| D | 294 Hz | 3,400 | 1700 |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| D | 294 Hz | 3,400 | 1700 |'
- en: '| E | 329 Hz | 3,038 | 1519 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| E | 329 Hz | 3,038 | 1519 |'
- en: '| F | 349 Hz | 2,864 | 1432 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| F | 349 Hz | 2,864 | 1432 |'
- en: '| G | 392 Hz | 2,550 | 1275 |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| G | 392 Hz | 2,550 | 1275 |'
- en: '| A | 440 Hz | 2,272 | 1136 |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| A | 440 Hz | 2,272 | 1136 |'
- en: '| B | 493 Hz | 2,028 | 1014 |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| B | 493 Hz | 2,028 | 1014 |'
- en: '| C | 523 Hz | 1,912 | 956 |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| C | 523 Hz | 1,912 | 956 |'
- en: 'The code sends a square wave of the appropriate frequency to the piezo, generating
    the corresponding tone (see [Project 2](ch02.xhtml#ch02) for more on waveform).
    The tones are calculated through the following equation:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码向压电元件发送适当频率的方波，生成相应的音调（有关波形的更多内容，请参见[项目2](ch02.xhtml#ch02)）。这些音调通过以下公式计算：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The setup of this project is really simple and uses only two wires connected
    to the Arduino.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目的设置非常简单，只需要两根连接到Arduino的导线。
- en: '**THE BUILD**'
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建**'
- en: Connect the piezo’s black wire directly to GND on the Arduino, and the red wire
    to Arduino pin 9.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将压电元件的黑线直接连接到Arduino的GND引脚，红线连接到Arduino的引脚9。
- en: '| **PIEZO** | **ARDUINO** |'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **压电元件** | **Arduino** |'
- en: '| --- | --- |'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Red wire | Pin 9 |'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 红线 | 引脚9 |'
- en: '| Black wire | GND |'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 黑线 | GND |'
- en: Check that your setup matches that of [Figure 7-1](ch07.xhtml#ch7fig1), and
    then upload the code shown next in “[The Sketch](ch07.xhtml#ch07lev1sec03)”.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查你的设置是否与[图7-1](ch07.xhtml#ch7fig1)中的一致，然后上传接下来在“[草图](ch07.xhtml#ch07lev1sec03)”中显示的代码。
- en: '**FIGURE 7-1**'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图7-1**'
- en: Circuit diagram for the Arduino melody
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Arduino旋律的电路图
- en: '![image](../images/f07-01.jpg)'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f07-01.jpg)'
- en: '**THE SKETCH**'
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**草图**'
- en: We’ll start off with a simple tune. At ➊, we tell the IDE that the tune is made
    up of 15 notes. Then we store the notes of the melody in a character array as
    a text string in the order in which they should be played, and the length for
    which each note will play is stored in another array as integers. If you want
    to change the tune, you can alter the notes in the array at ➋, and the number
    of beats for which each corresponding note plays at ➌. Finally at ➍ we set the
    tempo at which the tune will be played. Put it all together, and what does it
    play?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一段简单的旋律开始。在 ➊ 处，我们告诉 IDE 这段旋律由 15 个音符组成。然后，我们将旋律的音符按演奏顺序存储在字符数组中，音符播放的时长则存储在另一个整数数组中。如果你想改变旋律，你可以在
    ➋ 处修改数组中的音符，在 ➌ 处修改每个音符的拍数。最后，在 ➍ 处我们设置旋律的演奏速度。将这些组合在一起，它会播放什么？
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'PROJECT 8: MEMORY GAME'
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目 8：记忆游戏
- en: '**IN THIS PROJECT WE’LL CREATE OUR OWN VERSION OF AN ATARI ARCADE MEMORY GAME
    CALLED TOUCH ME, USING FOUR LEDS, FOUR PUSHBUTTON SWITCHES, A PIEZO BUZZER, AND
    SOME RESISTORS AND JUMPER WIRES.**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**在本项目中，我们将使用四个 LED、四个按键开关、一个蜂鸣器以及一些电阻和跳线，制作一个名为“Touch Me”的 Atari 游戏记忆游戏版本。**'
- en: '![image](../images/f0069-01.jpg)![image](../images/f0070-01.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0069-01.jpg)![image](../images/f0070-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需零件**'
- en: • Arduino board
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: • Arduino 板
- en: • Breadboard
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: • 面包板
- en: • Jumper wires
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: • 跳线
- en: • Piezo buzzer
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: • 蜂鸣器
- en: • 4 momentary tactile four-pin pushbuttons
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: • 4 个瞬时触觉四脚按键
- en: • 4 LEDs
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: • 4 个 LED
- en: • 4 220-ohm resistors
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: • 4 个 220 欧姆电阻
- en: '**LIBRARIES REQUIRED**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需库**'
- en: • Tone
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: • 音调
- en: '**HOW IT WORKS**'
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**工作原理**'
- en: The original Atari game had four colored panels, each with an LED that lit up
    in a particular pattern that players had to repeat back (see [Figure 8-1](ch08.xhtml#ch8fig1)).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 原始的 Atari 游戏有四个彩色面板，每个面板上都有一个 LED，以特定的模式亮起，玩家需要按这个模式重复（见[图 8-1](ch08.xhtml#ch8fig1)）。
- en: '**FIGURE 8-1:**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8-1：**'
- en: The original *Touch Me* game
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 原始的*Touch Me*游戏
- en: '![image](../images/f08-01.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f08-01.jpg)'
- en: This memory game plays a short introductory tune and flashes an LED. When you
    press the correct corresponding button, the lights flash again in a longer sequence.
    Each time you repeat the sequence back correctly, the game adds an extra step
    to make the sequence more challenging for you. When you make an error, the game
    resets itself.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '这个记忆游戏会播放一段简短的介绍音调并闪烁一个 LED。当你按下正确的对应按钮时，灯光会在一个更长的序列中再次闪烁。每当你正确地重复这个序列时，游戏会增加一个额外的步骤，使序列变得更具挑战性。当你犯错时，游戏会重置。  '
- en: '**THE BUILD**'
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**制作过程**'
- en: Place the pushbuttons in the breadboard so they straddle the center break with
    pins A and B on one side of the break, and C and D on the other, as shown in [Figure
    8-2](ch08.xhtml#ch8fig2). (See [Project 1](ch01.xhtml#ch01) for more information
    on how the pushbutton works.)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按键放置在面包板上，使其跨越中央断点，A 和 B 引脚在断点的一侧，C 和 D 引脚在另一侧，如[图 8-2](ch08.xhtml#ch8fig2)所示。（参见[项目
    1](ch01.xhtml#ch01)了解按键的更多信息。）
- en: '**FIGURE 8-2:**'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 8-2：**'
- en: A pushbutton has four pins.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个按键有四个引脚。
- en: '![image](../images/f08-02.jpg)'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f08-02.jpg)'
- en: Connect pin B of each pushbutton to the GND rail of your breadboard, and connect
    the rail to Arduino GND.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将每个按键的 B 引脚连接到面包板的 GND 轨道，再将轨道连接到 Arduino 的 GND。
- en: Connect pin D of each pushbutton to Arduino’s digital pins 2 through 5 in order.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将每个按键的 D 引脚按顺序连接到 Arduino 的数字引脚 2 至 5。
- en: Insert the LEDs into the breadboard with the shorter, negative legs connected
    to pin C of each pushbutton. Insert the positive leg into the hole on the right,
    as shown in the circuit diagram in [Figure 12-3](ch12.xhtml#ch12fig3).
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 LED 插入面包板，短的负极脚连接到每个按键的 C 引脚，长的正极脚插入右侧的孔，如[图 12-3](ch12.xhtml#ch12fig3)所示。
- en: '| **PUSHBUTTON** | **ARDUINO/LED** |'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **按键** | **Arduino/LED** |'
- en: '| --- | --- |'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Pin B | GND |'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 引脚 B | GND |'
- en: '| Pin C | LED negative legs |'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 引脚 C | LED 负极脚 |'
- en: '| Pin D | Arduino pins 2–5 |'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 引脚 D | Arduino 引脚 2–5 |'
- en: Place a 220-ohm resistor into the breadboard with one wire connected to the
    positive leg of each LED. Connect the other wire of the resistor to the Arduino
    as follows.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个 220 欧姆的电阻插入面包板，一端连接到每个 LED 的正极脚，电阻的另一端连接到 Arduino，如下所示。
- en: '| **LEDS** | **ARDUINO/PUSHBUTTON** |'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **LED** | **Arduino/按键** |'
- en: '| --- | --- |'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Positive legs | Arduino pins 8–11 via 220-ohm resistors |'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 正极脚 | Arduino 引脚 8–11，通过 220 欧姆电阻 |'
- en: '| Negative legs | Pushbutton pin C |'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 负极脚 | 按键 C 引脚 |'
- en: Make sure the red LED connected to pin 11 is paired with the pushbutton connected
    to pin 5, the yellow LED connected to pin 10 is paired with the pushbutton connected
    to pin 4, the green LED connected to pin 9 is paired with the pushbutton connected
    to pin 3, and the blue LED connected to pin 8 is paired with the pushbutton connected
    to pin 2.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保连接到针脚 11 的红色LED与连接到针脚 5 的按钮配对，连接到针脚 10 的黄色LED与连接到针脚 4 的按钮配对，连接到针脚 9 的绿色LED与连接到针脚
    3 的按钮配对，连接到针脚 8 的蓝色LED与连接到针脚 2 的按钮配对。
- en: Connect the black wire of the piezo directly to Arduino GND, and the red wire
    to Arduino pin 12.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将压电元件的黑色线直接连接到Arduino的GND，红色线连接到Arduino的针脚12。
- en: '| **PIEZO** | **ARDUINO** |'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **压电元件** | **Arduino** |'
- en: '| --- | --- |'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Red wire | Pin 12 |'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 红色线 | 针脚 12 |'
- en: '| Black wire | GND |'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 黑色线 | GND |'
- en: Check your setup against [Figure 8-3](ch08.xhtml#ch8fig3), and then upload the
    code in “[The Sketch](ch08.xhtml#ch08lev1sec03)” on [page 73](ch08.xhtml#page_73).
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据[图 8-3](ch08.xhtml#ch8fig3)检查你的设置，然后上传[第73页](ch08.xhtml#page_73)中“[草图](ch08.xhtml#ch08lev1sec03)”中的代码。
- en: '**FIGURE 8-3:**'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 8-3：**'
- en: Circuit diagram for the memory game
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记忆游戏电路图
- en: '![image](../images/f08-03.jpg)'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f08-03.jpg)'
- en: '**THE SKETCH**'
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**草图**'
- en: The sketch generates a random sequence in which the LEDs will light; a random
    value generated for `y` in the pattern loop determines which LED is lit (e.g.,
    if y is 2, the LED connected to pin 2 will light). You have to follow and repeat
    back the pattern to advance to the next level.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图生成一个随机序列，LED会按此顺序点亮；在模式循环中生成的随机值`y`决定了哪个LED被点亮（例如，如果 y 是 2，则连接到针脚 2 的LED将点亮）。你需要跟随并重复这个模式才能进入下一关。
- en: In each level, the previous lights are repeated and one more randomly generated
    light is added to the pattern. Each light is associated with a different tone
    from the piezo, so you get a different tune each time, too. When you get a sequence
    wrong, the sketch restarts with a different random sequence. For the sketch to
    compile correctly, you will need to install the Tone library (available from *[http://nostarch.com.com/arduinohandbook/](http://nostarch.com.com/arduinohandbook/)*).
    See “[Libraries](ch00.xhtml#ch00lev2sec07)” on [page 7](ch00.xhtml#page_7) for
    details.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在每一关中，前面的灯光会重复，并且会随机添加一个新的灯光。每个灯光都与压电元件的不同音调相关联，所以每次你都会听到不同的旋律。当你输入的顺序错误时，草图将重新开始，并生成一个不同的随机序列。为了使草图能够正确编译，你需要安装Tone库（可从*
    [http://nostarch.com.com/arduinohandbook/](http://nostarch.com.com/arduinohandbook/)
    *下载）。详细信息请参见[第7页](ch00.xhtml#page_7)的“[库](ch00.xhtml#ch00lev2sec07)”部分。
- en: '[PRE2]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'PROJECT 9: SECRET KNOCK LOCK'
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目 9：秘密敲击锁
- en: '**FOR CENTURIES CLANDESTINE GROUPS HAVE USED SECRET KNOCKS TO PREVENT UNAUTHORIZED
    ENTRY. LET’S BRING THIS SYSTEM INTO MODERN TIMES, BY CREATING OUR OWN ELECTRONIC
    GATEKEEPER.**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**数百年来，秘密组织一直使用秘密敲击来防止未经授权的进入。让我们将这个系统带入现代，创造属于我们的电子门卫。**'
- en: '![image](../images/f0078-01.jpg)![image](../images/f0079-01.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0078-01.jpg)![image](../images/f0079-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需零件**'
- en: • Arduino board
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: • Arduino 板
- en: • Breadboard
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: • 面包板
- en: • Jumper wires
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: • 跳线
- en: • Tower Pro SG90 9g servomotor
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: • Tower Pro SG90 9g伺服电机
- en: • Piezo buzzer
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: • 压电蜂鸣器
- en: • 3 LEDs
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: • 3 个LED
- en: • 1M-ohm resistor
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: • 1M欧姆电阻
- en: • 3 220-ohm resistors
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: • 3 个220欧姆电阻
- en: '**LIBRARIES REQUIRED**'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需库**'
- en: • Servo
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: • 伺服电机
- en: '**HOW IT WORKS**'
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**工作原理**'
- en: In this project, you’ll make a circuit that moves a servo arm to unlock a box
    or door when you provide the correct secret knock. So far we’ve been using a piezo
    buzzer only to make noise, but we can also use it as a sensor to detect sounds—in
    this case, knocks. When a piezo is struck it rings like a bell, but instead of
    producing sound it outputs voltage, which generates a number depending on the
    force of the strike. We’ll measure this voltage in numbers, and if the knocks
    fall within a certain range, the Arduino will register them as correct. If three
    knocks of the correct voltage are detected, you’ve cracked the code, and the servo
    arm moves to unlock the box or door.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将制作一个电路，当你输入正确的秘密敲击时，伺服臂将移动以解锁一个盒子或门。到目前为止，我们只使用压电蜂鸣器发出声音，但我们也可以将它用作传感器来检测声音——在这种情况下，是敲击声。当压电元件被敲击时，它像铃铛一样响起，但它不会产生声音，而是输出电压，电压的数值取决于敲击的力度。我们将以数字形式测量这个电压，如果敲击的电压在某个范围内，Arduino会将其识别为正确的。如果检测到三次正确电压的敲击，你就破解了密码，伺服臂将移动解锁盒子或门。
- en: Here are the two lines of code we’ll use later in the sketch to set the range
    for the voltage; if the voltage is between 10 and 100, the knock will be registered.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们将在草图中稍后使用的两行代码，用于设置电压的范围；如果电压在 10 到 100 之间，敲击将被识别为有效。
- en: '[PRE3]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you knock too softly or too hard, the knock won’t register. You’ll need
    to do three “correct” knocks to trigger the servo arm to move. When the correct
    sequence and strength of knock are registered, the servo arm swings 90 degrees
    to “unlock” whatever it is set up with. The LEDs, shown in [Figure 9-1](ch09.xhtml#ch9fig1),
    serve as indicators of your lock’s status: the red LED lights when the knocks
    are incorrect and the servo arm has not moved (that is, the box or door is still
    locked); the yellow LED flashes when a knock is registered and a correct code
    is sensed; and the green LED lights and the servomotor moves after three correct
    knocks.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果敲击太轻或太重，敲击将无法被识别。你需要进行三次“正确”的敲击才能触发伺服臂的移动。当正确的敲击顺序和力度被识别时，伺服臂将摆动90度，从而“解锁”设置好的设备。LED灯（如[图9-1](ch09.xhtml#ch9fig1)所示）作为锁状态的指示灯：红色LED表示敲击不正确且伺服臂没有移动（即箱子或门仍然被锁住）；黄色LED闪烁时表示敲击被识别且正确的代码被检测到；绿色LED亮起且伺服电机在三次正确敲击后开始运动。
- en: '**FIGURE 9-1:**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9-1：**'
- en: The LED setup
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: LED设置
- en: '![image](../images/f09-01.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f09-01.jpg)'
- en: For the best result, remove your piezo from its casing and attach it directly
    to the inside of a box or outside of a door so it is more sensitive to the vibration
    of the knock.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得最佳效果，将压电元件从外壳中取出并将其直接固定在盒子的内部或门的外部，以便它更敏感地响应敲击的震动。
- en: '**THE BUILD**'
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**搭建过程**'
- en: Insert a 1M-ohm resistor into your breadboard and connect the piezo’s red wire
    to one leg and its black wire to the other. Connect the black wire to the GND
    rail, and the red wire to Arduino pin A0.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在面包板上插入一个1M欧姆电阻，并将压电元件的红色线连接到一端，黑色线连接到另一端。将黑色线连接到GND轨，红色线连接到Arduino的A0引脚。
- en: '| **PIEZO** | **ARDUINO** |'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **压电元件** | **ARDUINO** |'
- en: '| --- | --- |'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Red wire | A0 via 1M-ohm resistor |'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 红色线 | 通过1M欧姆电阻连接到A0 |'
- en: '| Black wire | GND via 1M-ohm resistor |'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 黑色线 | 通过1M欧姆电阻连接到GND |'
- en: Connect the servo’s yellow signal wire directly to Arduino pin 9, its brown
    wire to GND, and its red wire to +5V.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将伺服电机的黄色信号线直接连接到Arduino的9号引脚，棕色线连接到GND，红色线连接到+5V。
- en: '| **SERVO** | **ARDUINO** |'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **伺服电机** | **ARDUINO** |'
- en: '| --- | --- |'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Yellow wire | Pin 9 |'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 黄色线 | 9号引脚 |'
- en: '| Red wire | +5V |'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 红色线 | +5V |'
- en: '| Brown wire | GND |'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 棕色线 | GND |'
- en: 'Insert the LEDs into your breadboard with the short, negative legs connected
    to GND. The positive legs should connect to the pins via 220-ohm resistors as
    follows: yellow connects to Arduino pin 3, green to pin 4, and red to pin 5.'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将LED插入面包板，短的负极引脚连接到GND，正极引脚通过220欧姆电阻与引脚连接，具体连接如下：黄色连接到Arduino的3号引脚，绿色连接到4号引脚，红色连接到5号引脚。
- en: '| **LEDS** | **ARDUINO** |'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **LED灯** | **ARDUINO** |'
- en: '| --- | --- |'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Positive legs | Pins 3–5 via 220-ohm resistors |'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 正极引脚 | 通过220欧姆电阻连接到3–5号引脚 |'
- en: '| Negative legs | GND |'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 负极引脚 | GND |'
- en: Connect Arduino pin 2 to the positive power rail. In our setup this is always
    on, but you could add a switch in the connection between Arduino pin 2 and the
    power rail to save power when the project is not in use.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Arduino的2号引脚连接到正电源轨。在我们的设置中，这个电源始终处于开启状态，但你也可以在Arduino 2号引脚和电源轨之间添加一个开关，以便在项目不使用时节省电量。
- en: Connect the breadboard rails to Arduino GND and +5V.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将面包板的电源轨连接到Arduino的GND和+5V。
- en: Make sure your setup matches the circuit diagram in [Figure 9-2](ch09.xhtml#ch9fig2),
    and then upload the code in “[The Sketch](ch09.xhtml#ch09lev1sec03)” on [page
    82](ch09.xhtml#page_82).
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的设置与[图9-2](ch09.xhtml#ch9fig2)中的电路图一致，然后上传[第82页](ch09.xhtml#page_82)中“[草图](ch09.xhtml#ch09lev1sec03)”的代码。
- en: '**FIGURE 9-2:**'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图9-2：**'
- en: The circuit diagram for the secret knock lock
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 秘密敲击锁的电路图
- en: '![image](../images/f09-02.jpg)'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f09-02.jpg)'
- en: '**THE SKETCH**'
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**草图**'
- en: We first call on the Servo library and set Arduino pin 9 to control the servo.
    LEDs are attached to Arduino pins 3, 4, and 5, and these will light depending
    on the validity of a knock. The piezo acts as a sensor rather than a buzzer in
    this project and is attached to Arduino pin A0\. When someone knocks, the knock
    is sensed by the piezo and a voltage value is sent to the A0 analog pin of the
    Arduino depending on the strength of the knock—the harder the knock, the higher
    the value. A knock with a value below 10 is considered too quiet, and one with
    a value above 100 too loud, so neither will be accepted as a valid knock. The
    red LED lights if the knock is not accepted, and the yellow LED lights if it is.
    Any knock value between 10 and 100 is accepted as a valid knock and counted, and
    if three valid knocks are received, the servomotor moves and the green LED lights.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先调用 Servo 库，并将 Arduino 引脚 9 设置为控制舵机。LED 灯连接到 Arduino 引脚 3、4 和 5，根据敲击的有效性，这些灯会亮起。压电传感器在本项目中充当传感器，而不是蜂鸣器，并连接到
    Arduino 引脚 A0。当有人敲击时，敲击会被压电传感器感知，并根据敲击的力度，发送一个电压值到 Arduino 的 A0 模拟引脚——敲击越强，电压值越高。一个值低于
    10 的敲击被认为太轻，一个值高于 100 的敲击则太响，因此这两者都不会被认为是有效敲击。如果敲击无效，则红色 LED 灯亮起；如果敲击有效，则黄色 LED
    灯亮起。任何值在 10 到 100 之间的敲击都会被接受为有效敲击并计数，如果接收到三个有效敲击，舵机就会移动，并且绿色 LED 灯会亮起。
- en: 'As mentioned earlier, these are the two lines of code that set the parameters
    for measuring the voltage:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，这两行代码设置了测量电压的参数：
- en: '[PRE4]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you were feeling particularly secretive, you could set this range even tighter
    to make the code harder to crack. Here’s the sketch:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想特别保密，你可以将这个范围设得更紧一些，这样代码就更难破解。下面是草图：
- en: '[PRE5]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
