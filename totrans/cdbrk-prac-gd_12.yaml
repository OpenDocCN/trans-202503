- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Digraph substitution
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c12/g12001.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: 'In his 1563 book *De Furtivis Literarum Notis*, Italian polymath and cryptologist
    Giambattista della Porta (1535–1615) proposed an interesting encryption method.
    Instead of replacing single letters, his system substituted letter pairs (also
    known as digraphs). In the centuries that followed, different variants of this
    digraph substitution were developed—including the so-called Playfair cipher. In
    this chapter, we will cover both methods: Playfair and Porta’s original system.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: How general digraph substitution works
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The method Giambattista della Porta suggested is based on a digraph substitution
    table with 400 unique entries. It provides a different symbol for each possible
    letter pair, as shown in [Figure 12-1](#figure12-1).^([1](b06.xhtml#c12-endnote-1))
    (The alphabet he used had twenty letters.)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c12/f12001.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-1: Giambattista della Porta suggested this substitution table, which
    provides a different symbol for every digraph.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we wanted to encrypt the word `STREET` using this table, we
    would first need to think of it as a sequence of three digraphs: `ST`, `RE`, and
    `ET`. If we look up each pair in the table (using the first letter along the top
    of the table and the second letter along the right-hand side), we get this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c12/g12002.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
- en: 'However, Porta’s table was probably never used in practice, as dealing with
    400 different symbols is quite cumbersome. Other cipher designers preferred replacing
    digraphs with three-digit substitutes (we will provide an example of this in [Chapter
    16](c16.xhtml)), but in the end, it turned out that the most convenient way to
    replace a digraph is with another digraph. Here’s an excerpt, from the top left-hand
    corner of a table with 26 × 26, or 676, entries, that substitutes a new digraph
    for every existing one:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '`A B C D E F G H I . . .`'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '`A` `KF SW JL OO QA CP DA BN CX . . .`'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '`B` `LH WS WM CO XE YP WW NV CH . . .`'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '`C` `JX KV AS PI CS PX NU SR LS . . .`'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '`D` `TR AL FG AD WU QM GH PG JC . . .`'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '`E` `ND SG RE AT NA TU RX SS OD . . .`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '`. . .`'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'Using this table, the word `BEAD` encrypts to `SGTR` (again, assuming that
    the first letter of each digraph is taken from the top row). The alphabets at
    the top and on the left can also be written in a keyword-dependent way. The following
    table, for instance, was created with the keywords `AMERICA` and `BALL`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '`A M E R I C B D F . . .`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '`B` `KF SW JL OO QA CP DA BN CX . . .`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '`A` `LH WS WM CO XE YP WW NV CH . . .`'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '`L` `JX KV AS PI CS PX NU SR LS . . .`'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '`C` `TR AL FG AD WU QM GH PG JC . . .`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '`D` `ND SG RE AT NA TU RX SS OD . . .`'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '`. . .`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: When using such a table, one usually keeps the digraphs in the matrix constant
    while changing the two keywords frequently.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: How the Playfair cipher works
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Even a table with 26 × 26 (or 676) entries is quite tedious to build and use.
    For this reason, digraph substitution with an exhaustive table, though reasonably
    secure, never played much of a role in the history of cryptography. Instead of
    using a large table, practitioners tended to prefer a set of rules more desirable
    for substituting digraphs. While they could have constructed such a rules set
    in numerous ways, only one method (with many variants) was frequently used in
    practice: the Playfair cipher. It was invented by Charles Wheatstone (1802–1875)
    in 1854 and later recommended to the British military by Lord Lyon Playfair (1818–1898),
    hence the name.^([2](b06.xhtml#c12-endnote-2))'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是一个26 × 26（或676）条目的表格，也相当繁琐，既难以构建又不容易使用。因此，虽然双字母替换法使用了一个详尽的表格，虽然合理安全，但它在密码学历史中从未发挥过重要作用。实践中，密码学家们更倾向于使用一些规则来替换双字母，而不是使用庞大的表格。尽管他们可以用多种方式构建这样的规则集，但实际上只有一种方法（具有多种变体）在实践中频繁使用：Playfair密码。该密码由查尔斯·惠特斯通（1802–1875）于1854年发明，后来由莱昂·普雷费尔（1818–1898）推荐给英国军队，因此得名。^([2](b06.xhtml#c12-endnote-2))
- en: 'British psychologist and parapsychologist Robert Thouless (1894–1984), who
    appears several times in our book, created two famous cryptograms of this type.
    Remember from [Chapter 8](c08.xhtml) that, in 1948, Thouless started an interesting
    experiment: in order to check whether it was possible to send a message from the
    realm of the dead to the living, he published an encrypted text, keeping the plaintext
    and the keyword secret. His plan was to channel the keyword from the beyond after
    his death. Before his death in 1984, Thouless published three trials of his parapsychological
    experiment: two with Playfair and one with a polyalphabetic system. His two Playfair
    attempts are covered in this chapter.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 英国心理学家和超心理学家罗伯特·索尔斯（1894–1984），在我们书中多次出现，创作了两种著名的加密文。这些加密文使用了这种类型的双字母密码。还记得在[第8章](c08.xhtml)中提到，1948年，索尔斯开始了一个有趣的实验：为了验证是否可以从死者的领域向活人传递信息，他发布了一段加密文本，保密了明文和关键词。他的计划是死后从另一个世界传递关键词。在1984年去世前，索尔斯公开了他三次超心理学实验的结果：两次使用了Playfair密码，另一次使用了多表替换系统。他的两次Playfair尝试将在本章中讨论。
- en: 'In his first trial, Thouless encrypted a Shakespearean quote using the Playfair
    system. The plaintext was this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在他的第一次实验中，索尔斯使用Playfair系统加密了一句莎士比亚名言。明文如下：
- en: '`BALM OF HURT MINDS GREAT NATURE''S SECOND COURSE CHIEF NOURISHER IN LIFE''S
    FEAST`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`伤痛心灵的药膏，伟大自然的第二道菜，生命盛宴中的主要滋养者`'
- en: 'Written in digraphs, this reads:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 用双字母书写的内容为：
- en: '`BA LM OF HU RT MI ND SG RE AT NA TU RE SS EC ON DC OU RS EC HI EF NO UR IS
    HE RI NL IF ES FE AS T`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`BA LM OF HU RT MI ND SG RE AT NA TU RE SS EC ON DC OU RS EC HI EF NO UR IS
    HE RI NL IF ES FE AS T`'
- en: 'Typically, the Playfair cipher requires that no pair consist of two equal letters,
    because the standard set of rules has no method for encrypting an identical pair,
    as we will explain shortly. Therefore, as is often done in these cases, Thouless
    added an `X` between the two `S`s:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Playfair密码要求没有一对字母相同，因为标准规则集没有加密相同字母对的方法，稍后我们会解释。因此，在这些情况下，索尔斯常常会在两个`S`之间加一个`X`：
- en: '`BA LM OF HU RT MI ND SG RE AT NA TU RE SX SE CO ND CO UR SE CH IE FN OU RI
    SH ER IN LI FE SF EA ST`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`BA LM OF HU RT MI ND SG RE AT NA TU RE SX SE CO ND CO UR SE CH IE FN OU RI
    SH ER IN LI FE SF EA ST`'
- en: 'If the number of letters in this plaintext were odd, he would have had to add
    another `X` in the last position so that each letter belonged to a pair, but this
    is not necessary here. Thouless chose, as his keyword, `SURPRISE`. Based on this
    word, he used the following transposed alphabet. It starts with the keyword, omits
    repeating letters, and considers I and J to be equivalent in order to produce
    an alphabet of twenty-five letters: `SURPIEABCDFGHKLMNOQTVWXYZ`. Next, Thouless
    wrote this alphabet out in a 5 × 5 grid (also known as a Playfair matrix):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果明文中字母的个数是奇数，他必须在最后一个位置加一个`X`，以确保每个字母都属于一个对，但是在这里并不需要这样做。索尔斯选择了`SURPRISE`作为他的关键词。基于这个词，他使用了以下转置的字母表。它从关键词开始，省略了重复的字母，并且将I和J视为等同，从而得到了一个包含二十五个字母的字母表：`SURPIEABCDFGHKLMNOQTVWXYZ`。接下来，索尔斯将这个字母表写成一个5
    × 5的网格（也称为Playfair矩阵）：
- en: '`S U R P I`'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`S U R P I`'
- en: '`E A B C D`'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`E A B C D`'
- en: '`F G H K L`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`F G H K L`'
- en: '`M N O Q T`'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`M N O Q T`'
- en: '`V W X Y Z`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`V W X Y Z`'
- en: 'From here, Thouless replaced the plaintext digraphs (`BA`, `LM`, `OF`, `HU`
    . . .) according to the following most common three Playfair rules, which are
    visualized in [Figure 12-2](#figure12-2):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，索尔斯根据以下三条最常见的Playfair规则替换了明文的双字母（`BA`，`LM`，`OF`，`HU`……），这些规则在[图12-2](#figure12-2)中进行了可视化：
- en: Rule 1 If the two letters are neither in the same column nor in the same row
    (which is the most frequent case), find a rectangle formed by the two letters
    when they are at opposite corners and replace the two letters with the other two
    corner letters (replacing the upper plaintext letter with the other upper letter
    in the rectangle and the lower plaintext letter with the other lower letter).
    In this example, `LM` becomes `FT`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 规则1：如果两个字母既不在同一列也不在同一行（这是最常见的情况），找到由这两个字母形成的矩形，并用矩形的另两个角字母替换这两个字母（将上方的明文字母替换为矩形的另一个上方字母，下方的明文字母替换为矩形的另一个下方字母）。在这个例子中，`LM`变为`FT`。
- en: Rule 2 If the two letters are in the same row, replace each one with its neighbor
    to the right. Here, `BA` becomes `CB`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 规则2：如果两个字母位于同一行，将每个字母替换为其右侧的邻居。这里，`BA`变为`CB`。
- en: Rule 3 If the two letters are in the same column, replace each one with its
    lower neighbor. In our example, `AN` becomes `GW`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 规则3：如果两个字母位于同一列，将每个字母替换为其下方的邻居。在我们的示例中，`AN`变为`GW`。
- en: '![](image_fi/502727c12/f12002.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c12/f12002.png)'
- en: 'Figure 12-2: The Playfair cipher replaces letter pairs based on three rules.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图12-2：Playfair密码通过三条规则替换字母对。
- en: 'When we apply the Playfair rules to the 5 × 5 grid shown above, the Shakespeare
    quote encrypts to the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将Playfair规则应用于上面显示的5×5矩阵时，莎士比亚的名言会被加密为以下内容：
- en: '`CB FT MH GR IO TS TA UF SB DN WG NI SB RV EF BQ TA BQ RP EF BK SD GM NR PS
    RF BS UT TD MF EM AB IM`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`CB FT MH GR IO TS TA UF SB DN WG NI SB RV EF BQ TA BQ RP EF BK SD GM NR PS
    RF BS UT TD MF EM AB IM`'
- en: 'This is the cryptogram Robert Thouless published in 1948\. He wrote it in five-letter
    groups, except for the last six letters:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Robert Thouless在1948年发布的加密信息。他将其写成五个字母一组，最后六个字母除外：
- en: '`CBFTM HGRIO TSTAU FSBDN WGNIS BRVEF BQTAB`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`CBFTM HGRIO TSTAU FSBDN WGNIS BRVEF BQTAB`'
- en: '`QRPEF BKSDG MNRPS RFBSU TTDMF EMA BIM`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`QRPEF BKSDG MNRPS RFBSU TTDMF EMA BIM`'
- en: To learn more about the follow-up to this experiment, see [Chapter 8](c08.xhtml).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于该实验后续的内容，请参见[第8章](c08.xhtml)。
- en: Of course, the Playfair method we described can be modified in many ways. For
    instance, we can use a 4 × 6 or a 5 × 6 Playfair matrix, instead of the 5 × 5
    version. The 5 × 6 matrix provides room for a few more characters, such as a space,
    a period, or meaningless letters (nulls). The replacement rules can be changed
    in many ways, as well. For instance, one can add a rule for substituting double
    letters or for shifting letters to the left instead of to the right.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们描述的Playfair方法可以以多种方式进行修改。例如，我们可以使用一个4×6或5×6的Playfair矩阵，而不是5×5版本。5×6矩阵可以提供更多空间，比如用于表示空格、句号或无意义的字母（空字符）。替换规则也可以以多种方式进行更改。例如，可以添加一个规则来替换双字母，或者将字母移到左边而不是右边。
- en: In World War II, the German army implemented a Playfair version that used two
    5 × 5 matrices instead of one, constructing each grid with a different keyword.
    This system was known as the Doppelkasten (“Double Box”) method.^([3](b06.xhtml#c12-endnote-3))
    Examples can be found in back issues of the academic journal *Cryptologia*.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二次世界大战中，德国军队实施了Playfair密码的一个版本，使用两个5×5矩阵而不是一个，每个矩阵使用不同的关键字构造。这个系统被称为Doppelkasten（“双箱”）方法。^([3](b06.xhtml#c12-endnote-3))
    相关示例可以在《Cryptologia》学术期刊的早期期刊中找到。
- en: How to detect a general digraph substitution
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何检测一般的双字母替换
- en: Klaus created the following ciphertext with a general digraph substitution,
    not a Playfair cipher. He published it as a challenge for his blog readers, to
    test whether a digraph substitution cryptogram of this length could be solved.
    We will come back to this story in the “Challenges” section of this chapter.^([4](b06.xhtml#c12-endnote-4))
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Klaus使用一般的双字母替换而非Playfair密码创建了以下密文。他将其作为挑战发布给博客读者，测试这种长度的双字母替换加密信息是否能够被破解。我们将在本章的“挑战”部分回到这个故事。^([4](b06.xhtml#c12-endnote-4))
- en: '`UNGOZIHIJGSLGVWPIVGJSOKEFMAHSDBDGLUBUNZIWPIEBIUNKFVOUNB`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`UNGOZIHIJGSLGVWPIVGJSOKEFMAHSDBDGLUBUNZIWPIEBIUNKFVOUNB`'
- en: '`DSLPPHELVAQBAHEBIFJMHKVFLHXQQEFSLQQBDAQRIBVBIBYGJMOSOZB`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`DSLPPHELVAQBAHEBIFJMHKVFLHXQQEFSLQQBDAQRIBVBIBYGJMOSOZB`'
- en: '`SDUXZINXUNEQVKUGYHUNVOWPSGSMGEFLFKRUHELFPHGVUXFGHRJYFUH`'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`SDUXZINXUNEQVKUGYHUNVOWPSGSMGEFLFKRUHELFPHGVUXFGHRJYFUH`'
- en: '`IPBMHUNVOWPSGHXVKRSSGPHPWQXPLKCXGUNFGBICJFGJGCLLCFPNXUN`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`IPBMHUNVOWPSGHXVKRSSGPHPWQXPLKCXGUNFGBICJFGJGCLLCFPNXUN`'
- en: '`TUUKKIZBKFABEQNHRFWLKCYHDJHJOPBZRLAHQVFTHETGRQRJTDAYDTX`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`TUUKKIZBKFABEQNHRFWLKCYHDJHJOPBZRLAHQVFTHETGRQRJTDAYDTX`'
- en: '`TVDBDKFEFZKSDHETUFVIQBIYABDEXZIKCHXRUKQRLGECJAQAOBKZIOB`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`TVDBDKFEFZKSDHETUFVIQBIYABDEXZIKCHXRUKQRLGECJAQAOBKZIOB`'
- en: '`TEFMFRZNZACLWDWAUNEBBISLMREQKWRJRCUGHERGJMXONWGJHIPBEYG`'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`TEFMFRZNZACLWDWAUNEBBISLMREQKWRJRCUGHERGJMXONWGJHIPBEYG`'
- en: '`DZOHXIXKFOXFLKVRUDWAOBIDLSRRICSICJGKFZBBUMRFMGQKFYBXOHE`'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`DZOHXIXKFOXFLKVRUDWAOBIDLSRRICSICJGKFZBBUMRFMGQKFYBXOHE`'
- en: '`TGHEOAMUEMWLAYRJWPKIGXUOSKZIHIJGSLHIGIBLFUXXUKUQPHGEGWH`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '`IOPZIBDLVBUKQRJSMUGFPWLWPSGPHFIKVYXCJLVULKVQSZIBDLVBUUI`'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '`SRRUGJAIYXXGLKQXFRPBUOJIBTGHGDTGRCICUNVOWPSGDTLIEMTAVOU`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '`NVUQQKCRTLHBDAIUXFGOAKPBTKVFLAHVWRHWAUGKCXGUNFGBIXAGJHE`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '`HXGLBIRNGDOEBPUQSGBDIKACVORUBLKVVLZIHIJGSLWPIEUNCEPHFOM`'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '`KFVMHUGNOPKBGLKCGCLHEXFAYUOMKTAGDZOHEKFLVBWKVPLGXBPHEGI`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '`XOTJWURUUNCLSOFMKVWGFMFPIKGJLLJYOGDWFRGLFQQEYDFVCAHYZPJ`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '`GKFBIRQHEBAHELFHEFSVUCLWDBWIGJGDRAYVKFPWLZNLQFGGJQAKFBL`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '`FUWQPWGJOBSLRIVVBXBDVUMHYIZYBZKFGQLWROZIOBMACTPHSMGECLF`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '`GVOSGUNTUJYOGBIHECERCUGWDEMFGKPAYSQKCBWONQVGEKVDHBIDWPH`'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '`EMGEAQAONOEXZIOBMAUNTUPHFYNXXGUNFGBIFNFMMFOXJBBDCLBIBIF`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '`JMHKVFLFJMHXNHXVKUNKFZBTFFMHMFVLVWLYHHEMFOFICOJVUYXMFZN`'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '`WLLWICLVSDZIFSEBUNNXVUFIHARCXOZKMMFPKVRUUNVOWPSGLCQWUGC`'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '`ECJTGHIVKWAFLPHAQVKPHHJSGMFHMRLDDHJZUBPTDBOFGVOSGUNTUJY`'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '`OGXGUNFGBIXAFMWAAQFPAIEQQQKCFIHAQWFIBPGLUBZNNNSOWDXMXGU`'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '`NFGBIEAHAKCAHAQSGRLMSKFWDBAHEFVMHWGPHFYBIUNTUJYOGAIYXWA`'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '`ZIFLYNKCRUSOKVLKBOWARIBIHJ`'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: It is fairly easy to distinguish a digraph substitution from a simple substitution
    cipher by using frequency analysis. Look at the two diagrams in [Figure 12-3](#figure12-3).
    The top part shows the frequency of letters in our ciphertext, and the lower part
    shows the frequency of letters in a simple-substitution-cipher encryption of the
    same plaintext. As can be seen, the frequency distribution of the upper chart,
    with digraph substitution, is a lot flatter (i.e., the frequent letters are less
    frequent, and the rare letters are less rare).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: The index of coincidence is different, too. While an English text encrypted
    in a simple substitution cipher (as well as plain English) has an index of coincidence
    of 6.7%, our letter pair cryptogram has an index of coincidence of only 4.3%.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: But what about other ciphers that are not simple substitutions? Do they have
    a similar frequency distribution?
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c12/f12003.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-3: The letter frequency distributions of a digraph substitution (top)
    and a simple substitution cipher (bottom)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'We can conduct a frequency count of the digraphs to help determine whether
    the algorithm is Playfair, another digraph system, transposition, polyalphabetic,
    or something else. However, the digraph frequency count we need to use here is
    different from the one we applied in [Chapter 4](c04.xhtml), where we included
    overlapping pairs. For instance, the string `ABCDEF` consists of five overlapping
    digraphs (`AB`, `BC`, `CD`, `DE`, and `EF`). In the context of a digraph substitution,
    we should consider nonoverlapping pairs only. `ABCDEF` consists of three of these:
    `AB`, `CD`, and `EF`. Mathematically speaking, if there is an even number of *n*
    letters in a text, there are *n –* 1 overlapping digraphs and *n*/2 nonoverlapping
    ones.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 12-4](#figure12-4) shows a (nonoverlapping) digraph frequency analysis
    of our cryptogram, followed by a digraph frequency analysis of the same plaintext
    encrypted in a Vigenère cipher. We used [https://dcode.fr/en](https://dcode.fr/en)
    to count the letter pairs and Excel to plot the diagrams. Note that there are
    only about 220 different pairs in the digraph cryptogram, while there are some
    380 in the Vigenère cryptogram.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: The lower part of the diagram also shows that only a few letter pairs in the
    Vigenère cryptogram have a frequency of over 1%, while in the upper part, we see
    some twenty-five of these in the digraph substitution cryptogram, with the most
    frequent one almost reaching 4%.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting that, even in longer English texts, the plaintexts will show
    properties of only having about three hundred different digraphs, regardless of
    whether we count overlapping digraphs or not. All other possible digraphs (of
    the 676 total) would probably have a frequency of zero. This is because, in English,
    many letter pairs such as *QZ*, *VH*, *II*, and *JN* are extremely rare.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: All in all, the risk of confusing a digraph substitution with another cipher
    is not very high if one compares the frequency counts of nonoverlapping digraphs.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c12/f12004.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-4: Two frequency distribution charts using nonoverlapping digraphs.
    The pattern for our digraph substitution cryptogram (top) looks different from
    that of a Vigenère ciphertext (bottom) because fewer digraphs appear, while the
    frequencies of the most common digraphs are much higher (above 3.0).'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: How to detect a Playfair cipher
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How can we check whether a certain cryptogram has been created with a Playfair
    cipher? As an example, consider a message sent in World War II. During the war,
    the US Navy and the United States’ allies used the Playfair cipher frequently
    for tactical communication in the Pacific. One story involves *PT-109*, a patrol
    torpedo boat commanded by the young naval officer and later president, John F.
    Kennedy.^([5](b06.xhtml#c12-endnote-5)) After the much larger Japanese destroyer
    *Amagiri* crashed into *PT-109*, slicing it in half and sinking it, the American
    crew swam for miles and finally washed up on the beach of nearby Plum Pudding
    Island.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Australian coastwatcher Sublieutenant Arthur Reginald Evans, who observed the
    crash, received and decrypted multiple messages in Playfair and coordinated a
    rescue effort involving dispatching one of his teams of Solomon Islanders to try
    to find the crew.^([6](b06.xhtml#c12-endnote-6)) At the suggestion of one of his
    team members, Biuku Gasa, Kennedy sent a note (in English) carved into a coconut
    with his pocketknife. We will come back to this story in [Chapter 15](c15.xhtml).
    For now, we are only interested in one of the Playfair messages ([Figure 12-5](#figure12-5))
    sent to Evans, which reported the loss of *PT-109*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'The plaintext of this Playfair cryptogram, received at 9:20 am on August 7,
    1943, five days after the crash, is noted on the upper half of the sheet and reproduced
    here:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '`ELEVEN SURVIVORS PT BOAT ON GROSS IS X HAVE SENT FOOD AND LETTER ADVISING
    SENIOR COME HERE WITHOUT DELAY X WARN AVIATION OF CANOES CROSSING FERGUSON RE`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, this message has 125 letters. The `RE` at the end stands for
    Reginald Evans, while `GROSS IS` means Gross Island (also known as Cross Island
    or Nauru). The `X` represents a period.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c12/f12005.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-5: The Playfair-encrypted message received by the Australian coastwatcher
    Sublieutenant Arthur (“Reg”) Reginald Evans, which reported the loss of *PT-109*
    in World War II'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: This message used the key `PHYSICAL EXAMINATION` and an encryption method that
    is almost identical to the standard Playfair technique we saw earlier in this
    chapter, with three minor exceptions. First, pairs of equal letters are not avoided
    by adding an additional letter; instead, they are simply left unchanged. For instance,
    the `TT` in `LETTER` encrypts to a ciphertext `TT`. Second, `J` is used as an
    equivalent of `I` in the ciphertext. Third, the last letter of the message, `E`,
    for “Evans,” being unpaired because of the odd number of letters in the text,
    is left unchanged, without being paired with a padding letter.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'Detecting a Playfair cipher can be quite easy, as it produces messages that
    have a number of very special and easy-to-see properties:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: The number of letters in the ciphertext is even.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The letter `J` does not appear because it is represented by `I`.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No digraph consists of two letters of the same kind.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, all these properties can be hidden easily, as the World War II Playfair
    ciphertext above shows. This message has an uneven number of letters because the
    last one is left unencrypted; it includes a J, which is used as an equivalent
    of `I`; and it has identical digraphs, which are double letters left unchanged
    instead of avoided by the insertion of an `X`. However, in most cases we have
    encountered in practice, the encipherer of a Playfair cryptogram does not take
    these precautions.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: If these criteria are not sufficient to identify the use of a Playfair cipher,
    we can turn to statistics to learn more. While counting nonoverlapping digraphs
    helps to distinguish digraph substitution from many other ciphers, it doesn’t
    differentiate a Playfair cipher from a general digraph substitution based on a
    26 × 26 chart. To do that, we can perform an ordinary frequency count of the individual
    letters. The frequency distribution of a Playfair cryptogram is flatter—meaning
    that the frequent letters are less frequent, while the rare ones are less rare—than
    that of a simple substitution cipher, but less flat than that of a general digraph
    substitution (see [Figure 12-6](#figure12-6)).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c12/f12006.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: '*[Figure 12-6](#figureanchor12-6):* The frequency distribution of a Playfair
    cryptogram (top) is flatter than the distribution of a simple substitution cipher
    (bottom), but it is not as flat as the distribution of a general digraph substitution
    (middle).'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: How to break a digraph substitution
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can break the Playfair cipher, as well as digraph substitution in general,
    quite effectively and without a crib, using a computer program that implements
    hill climbing (see [Chapter 16](c16.xhtml)). In the following sections, we introduce
    a couple of other methods and then focus on one that can be used manually. As
    will become clear, a general digraph substitution is harder to break, requiring
    more ciphertext than a Playfair cipher.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Frequency analysis
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One way to attack a digraph substitution is to perform digraph frequency analysis
    of the nonoverlapping variant. The most frequent digraphs in the English language
    are *TH*, *HE*, *IN*, and *ER*. A more comprehensive list is available in Appendix
    B. However, this method only works for long cryptograms. You’ll need about 2,000
    letters to get a meaningful digraph frequency chart. Unfortunately, digraph substitution
    cryptograms are rarely this long in practice, so we rarely use frequency analysis
    alone to attack a digraph substitution.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Dictionary attacks
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If a cryptogram has been created with a Playfair cipher based on a keyword (as
    shown above), we can try a dictionary attack by using a computer program that
    decrypts the cryptogram with one keyword candidate after another until the resulting
    plaintext candidate looks like a meaningful text. To check whether a letter sequence
    looks meaningful, the program can employ a fitness function, as described in [Chapter
    16](c16.xhtml). The keyword candidates can be taken from a dictionary file (i.e.,
    a file that lists all common words of a certain language). There are plenty of
    dictionary files, containing millions of words from many languages, available
    online. We describe an example of a dictionary attack on a Playfair cryptogram
    in the “Success stories” section of this chapter.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Manual attacks
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is definitely possible to break the Playfair cipher without computer support.
    However, it is considerably more difficult than solving a simple substitution
    cipher or a complete columnar transposition cipher—especially if we are dealing
    with a ciphertext that is no longer than, say, 200 letters. Most Playfair messages
    we have encountered are of this kind.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Solving a Playfair cryptogram manually usually requires knowing or guessing
    the plaintext equivalents of a few ciphertext digraphs and deriving others from
    those, following a few rules we will introduce here. In doing so, we will reconstruct
    the Playfair matrix used. Of course, this method becomes easier if we have a crib.
    Our success therefore depends on the crib available, the quality of our guesses,
    the length of the ciphertext, and chance.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to note that different Playfair matrices may implement the
    same cipher. Generally speaking, a Playfair matrix can be circularly shifted column-wise
    and row-wise without changing the encryption method it defines. For example, the
    following three matrices are equivalent:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '`S U R P I U R P I S V W X Y Z`'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '`E A B C D A B C D E S U R P I`'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '`F G H K L G H K L F E A B C D`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '`M N O Q T N O Q T M F G H K L`'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '`V W X Y Z W X Y Z V M N O Q T`'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: It is therefore possible that the matrix we reconstruct while deciphering a
    message is a column-wise and row-wise circularly shifted version of the one the
    message creator used. Once we’ve found a matrix, we can discover the likely original
    orientation by seeing which shift produces a plausible keyword.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'To break a Playfair cipher (in English), we can use a number of rules that
    are derived from weaknesses of this system:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: We mentioned that digraph frequencies are hard to exploit unless a cryptogram
    has thousands of letters. Nevertheless, we might be able to use the fact that
    in English texts, some letter pairs, such as *TH*, *HE*, *IN*, and *ER*, are especially
    frequent, while others, including *QG* and *JN*, are almost nonexistent.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The most frequent tetragraphs (i.e., groups of four letters) in the English
    language are *THER*, *TION*, *ATIO*, and *THAT*. This means that two of the most
    frequent digraphs (*TH* and *ER*) form *THER*, one of the most frequent tetragraphs.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If *<letter1><letter2>* encrypts to *<letter3><letter4>*, then *<letter2><letter1>*
    will encrypt to *<letter4><letter3>*. For instance, if `AB` encrypts to `XY`,
    then `BA` will encrypt to `YX`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The most frequent pair of digraphs that is routinely mirrored is *ER*/*RE*,
    followed by *ES*/*SE*.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No letter will ever be encrypted to itself. For instance, `AB` won’t become
    `AY` or `YB`.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If *<letter1><letter2>* is replaced with *<letter2><letter3>*, the letters *<letter1><letter2><letter3>*
    will appear in a row or column together in exactly that order. The same is true
    if *<letter1><letter2>* is replaced by *<letter3><letter1>*. For instance, if
    `XY` is replaced with `YZ`, you’ll find the letters `XYZ` in a row or column rather
    than as part of a rectangle. Similarly, if `XY` is replaced with `ZX`, the letters
    `XZY` will be in a row or column in that order.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If *<letter1>* and *<letter2>* form a rectangle in the Playfair matrix (which
    happens in sixteen of twenty-four cases), the following rule holds: if *<letter1><letter2>*
    encrypts to *<letter3><letter4>*, then *<letter3><letter4>* encrypts to *<letter1><letter2>*.
    For instance, if `A` and `B` form a rectangle, then if `AB` encrypts to `XY`,
    `XY` encrypts to `AB`.'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each letter can only be encrypted to five specific ciphertext letters in any
    Playfair tableau.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Letters that appear in a row or column with frequent letters (especially `E`
    and `T`) are more frequent in the ciphertext than others.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the Playfair cipher uses a keyword in the way shown above, it is likely that
    the more frequent letters will appear at the top of the square. In many cases,
    the letters `VWXYZ` form the last line because these letters have a low frequency
    (and thus have a low likelihood of occurring in the keyword). The line `UVWXZ`
    is also encountered quite often at the bottom of a matrix, because `Y` is more
    frequent than its neighbors.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To apply these rules, we’ll now break a Playfair message described in Chapter
    26 of Dorothy L. Sayers’s 1932 crime novel *Have His Carcase* ([Figure 12-7](#figure12-7)).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c12/f12008.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-7: Dorothy L. Sayers’s 1932 crime novel *Have His Carcase* contains
    a Playfair cryptogram.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the encrypted message:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '`XNATNX`'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '`RBEXMG`'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '`PRBFX ALI MKMG BFFY, MGTSQ IMRRY. ZBZE`'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '`FLOX P.M. MSIU FKX FLDYPC FKAP RPD KL DONA`'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '`FMKPC FM NOR ANXP.`'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '`SOLFA TGMZ DXL LKKZM VXI BWHNZ MBFFY`'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '`MG. TSQ A NVPD NMM VFYQ. CIU ROGA K.C. RAC`'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '`RRMTN S.B. IF H.P. HNZ ME? SSPXLZ DFAX LRAEL`'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '`TLMK. XATL RPX BM AEBF HS MPIKATL TO`'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '`HOKCCI HNRY. TYM VDSM SUSSX GAMKR. BG AIL`'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '`AXH NZMLF HVUL KNN RAGY QWMCK. MNQS`'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '`TOIL AXFA AN IHMZS RPT HO KFLTIM. IF MTGNLU`'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '`H.M. CLM KLZM AHPE ALF AKMSM, ZULPR FHQ --`'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '`CMZT SXS RSMKRS GNKS FVMP RACY OSS QESBH`'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '`NAE UZCK CON MGBNRY RMAL RSH NZM, BKTQAP`'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '`MSH NZM TO ILG MELMS NAGMIU KC KC.`'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '`TQKFX BQZ NMEZLI BM ZLFA AYZ MARS UP QOS`'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '`KMXBP SUE UMIL PRKBG MSK QD.`'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '`NAP DZMTB N.B. OBE XMG SREFZ DBS AM IMHY`'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '`GAKY R. MULBY M.S. SZLKO GKG LKL GAW`'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '`XNTED BHMB XZD NRKZH PSMSKMN A.M. MHIZP`'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '`DK MIM, XNKSAK C KOK MNRL CFL INXF HDA`'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '`GAIQ.`'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '`GATLM Z DLFA A QPHND MV AK MV MAG C.P.R.`'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '`XNATNX PD GUN MBKL I OLKA GLDAGA KQB`'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '`FTQO SKMX GPDH NW LX SULMY ILLE MKH`'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '`BEALF MRSK UFHA AKTS.`'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the same text broken into digraphs:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '`XN AT NX RB EX MG PR BF XA LI`'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '`MK MG BF FY MG TS QI MR RY ZB`'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '`ZE FL OX PM MS IU FK XF LD YP`'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '`CF KA PR PD KL DO NA FM KP CF`'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '`MN OR AN XP SO LF AT GM ZD XL`'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '`LK KZ MV XI BW HN ZM BF FY MG`'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '`TS QA NV PD NM MV FY QC IU RO`'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '`GA KC RA CR RM TN SB IF HP HN`'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '`ZM ES SP XL ZD FA XL RA EL TL`'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '`MK XA TL RP XB MA EB FH SM PI`'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '`KA TL TO HO KC CI HN RY TY MV`'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '`DS MS US SX GA MK RB GA IL AX`'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '`HN ZM LF HV UL KN NR AG YQ WM`'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '`CK MN QS TO IL AX FA AN IH MZ`'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '`SR PT HO KF LT IM IF MT GN LU`'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '`HM CL MK LZ MA HP EA LF AK MS`'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '`MZ UL PR FH QC MZ TS XS RS MK`'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '`RS GN KS FV MP RA CY OS SQ ES`'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '`BH NA EU ZC KC ON MG BN RY RM`'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '`AL RS HN ZM BK TQ AP MS HN ZM`'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '`TO IL GM EL MS NA GM IU KC KC`'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '`TQ KF XB QZ NM EZ LI BM ZL FA`'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '`AY ZM AR SU PQ OS KM XB PS UE`'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '`UM IL PR KB GM SK QD NA PD ZM`'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '`TB NB OB EX MG SR EF ZD BS AM`'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '`IM HY GA KY RM UL BY MS SZ LK`'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '`OG KG LK LG AW XN TE DB HM BX`'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '`ZD NR KZ HP SM SK MN AM MH IZ`'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '`PD KM IM XN KS AK CK OK MN RL`'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '`CF LI NX FH DA GA IQ GA TL MZ`'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '`DL FA AQ PH ND MV AK MV MA GC`'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '`PR XN AT NX PD GU NM BK LI OL`'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '`KA GL DA GA KQ BF TQ OS KM XG`'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '`PD HN WL XS UL MY IL LE MK HB`'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '`EA LF MR SK UF HA AK TS`'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: Before we start deciphering, we have to do some statistical analysis. The ciphertext
    has 696 letters. [Figure 12-8](#figure12-8) shows the letter and nonoverlapping
    digraph frequencies. `M` is the most frequent character in the cryptogram. This
    suggests that it is in a line or column with `E`, the most frequent letter of
    the English language.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c12/f12007.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-8: Frequency analysis of the letters (top) and the digraphs (bottom)
    in the Playfair cryptogram described in Dorothy L. Sayers’s 1932 crime novel *Have
    His Carcase*'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'The most frequent reversible letter pairs appearing in the ciphertext are the
    following:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '`ZM`/`MZ` appears seven and four times, respectively.'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`MK`/`KM` appears six and three times, respectively.'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`IL`/`LI` appears five and four times, respectively.'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It is possible to solve a Playfair cryptogram by applying only the rules mentioned
    so far. However, doing so requires a lot of trial and error—a procedure that is
    too lengthy and complex to document in this book. To make things a little easier,
    we’ll assume that we have some information about the contents of the text. Researching
    the context in which a cipher message was created can be a powerful tool. In this
    example, we learn the following:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: This message was sent from Warsaw, Poland.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A treaty concluded with Poland might be mentioned.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The recipient of the message is usually addressed as “His Serene Highness.”
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This information delivers us a few cribs. For instance, the first line of the
    cryptogram consists of only six letters: `XN AT NX`. Note that the third letter
    pair is the reverse of the first one, which means that its plaintext representation
    is a reversed version of the other, too. Because the letter was sent from Warsaw,
    it appears that `WARSAW` is a potential match. So, let’s use `WARSAW` as a first
    crib. If our guess is correct, we can conclude the following:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '`WA` = `XN`'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '`RS` = `AT`'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '`AW` = `NX`'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: 'Moreover, by reversing the letter pair of the second statement, we get this:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '`SR` = `TA`'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: 'The digraphs `XN AT NX` (`WARSAW`) appear again on line 32 of the ciphertext.
    Before it, we find the letter pair `PR`. With five appearances, `PR` is one of
    the twelve most frequent digraphs in the ciphertext. What does it stand for? Possibilities
    like `THWARSAW`, `ENWARSAW`, `ERWARSAW`, and `ONWARSAW`, as well as a few other
    guesses based on letter pair frequencies, are unlikely. The most plausible option
    is `TOWARSAW`, which gives us the following:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '`TO` = `PR`'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, we gain another mapping by reversing the letters:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '`OT` = `RP`'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on rule 7 for breaking Playfair messages, listed earlier in this chapter,
    we can assume that the following six statement pairs are most likely correct.
    These mappings result from switching the plaintext and ciphertext in the statements
    we already know, and each has a probability of sixteen in twenty-four (or 66.6%)
    of being correct:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '`XN` = `WA`'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '`NX` = `AW`'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '`AT` = `RS`'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '`TA` = `SR`'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '`PR` = `TO`'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '`RP` = `OT`'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: To check if these mappings are plausible, we can look at their frequencies.
    `WA` doesn’t appear in the ciphertext, so we don’t have to worry about it. `AW`
    appears once; at the moment, we can’t say whether it really stands for `NX`, but
    `NX` is a plausible digraph, provided that the letter `X` was used to separate
    pairs of equal letters. Furthermore, `AT` = `RS` and `TA` = `SR` are plausible
    because `RS` appears three times in the ciphertext, as expected for the ciphertext
    equivalent of the common letter pair `AT`. It is hard to say whether `PR` = `TO`
    and `RP` = `OT` make sense, but to keep things simple, we take it as given that
    they do. (In real life, further analysis would be necessary to confirm this.)
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: 'In conclusion, we assume that all of these mappings are correct. Now, we fill
    in the letter pairs we have guessed so far:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '`XN AT NX RB EX MG PR BF XA LI`'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '`WA RS AW TO`'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '`MK MG BF FY MG TS QI MR RY ZB`'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '`ZE FL OX PM MS IU FK XF LD YP`'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '`CF KA PR PD KL DO NA FM KP CF`'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '`TO`'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '`MN OR AN XP SO LF AT GM ZD XL`'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '`RS`'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '`LK KZ MV XI BW HN ZM BF FY MG`'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '`TS QA NV PD NM MV FY QC IU RO`'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '`GA KC RA CR RM TN SB IF HP HN`'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '`ZM ES SP XL ZD FA XL RA EL TL`'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '`MK XA TL RP XB MA EB FH SM PI`'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: '`OT`'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '`KA TL TO HO KC CI HN RY TY MV`'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '`PR`'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '`DS MS US SX GA MK RB GA IL AX`'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '`HN ZM LF HV UL KN NR AG YQ WM`'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '`CK MN QS TO IL AX FA AN IH MZ`'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '`PR`'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '`SR PT HO KF LT IM IF MT GN LU`'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '`TA`'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '`HM CL MK LZ MA HP EA LF AK MS`'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '`MZ UL PR FH QC MZ TS XS RS MK`'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '`TO AT`'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '`RS GN KS FV MP RA CY OS SQ ES`'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '`AT`'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '`BH NA EU ZC KC ON MG BN RY RM`'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '`AL RS HN ZM BK TQ AP MS HN ZM`'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '`AT`'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '`TO IL GM EL MS NA GM IU KC KC`'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '`PR`'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '`TQ KF XB QZ NM EZ LI BM ZL FA`'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '`AY ZM AR SU PQ OS KM XB PS UE`'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '`UM IL PR KB GM SK QD NA PD ZM`'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '`TO`'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '`TB NB OB EX MG SR EF ZD BS AM`'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '`TA`'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: '`IM HY GA KY RM UL BY MS SZ LK`'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '`OG KG LK LG AW XN TE DB HM BX`'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: '`NX WA`'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '`ZD NR KZ HP SM SK MN AM MH IZ`'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '`PD KM IM XN KS AK CK OK MN RL`'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '`WA`'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '`CF LI NX FH DA GA IQ GA TL MZ`'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '`AW`'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '`DL FA AQ PH ND MV AK MV MA GC`'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: '`PR XN AT NX PD GU NM BK LI OL`'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '`TO WA RS AW`'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '`KA GL DA GA KQ BF TQ OS KM XG`'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '`PD HN WL XS UL MY IL LE MK HB`'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '`EA LF MR SK UF HA AK TS`'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: 'These known letter pairs are not sufficient to reconstruct complete words.
    Additional guesses are necessary, and admittedly, this is not an easy task. The
    following sequence (starting on line 17 of the cryptogram) might be helpful: `RS
    MK RS`, which decrypts to `AT**AT`. Remember that `MK` is an especially frequent
    reversible letter pair in our ciphertext. Does it stand for `RE`, the most common
    reversible letter pair in the English language? If so, we get `ATREAT`, which
    might stand for a `TREATY`. Remember that `TREATY` is a word we expect to appear
    in the plaintext. The new guess gives us this:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: '`RE` = `MK` and `ER` = `KM`'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming that we have identified the word `TREATY`, we could plausibly guess
    that the phrase `WITH POLAND` follows it. Remember that we know that the plaintext
    might mention a treaty with Poland. This means that `RS MK RS GN KS FV MP RA`
    could stand for `AT RE AT YW IT HP OL AN`, giving us the following pairings (including
    their reversed versions):'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '`YW` = `GN` and `WY` = `NG`'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '`IT` = `KS` and `TI` = `SK`'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: '`HP` = `FV` and `PH` = `VF`'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '`OL` = `MP` and `LO` = `PM`'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '`AN` = `RA` and `NA` = `AR`'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: 'The last substitution pair (`AN` = `RA` and `NA` =`AR`) also indicates that
    one line or column of the substitution table contains the letters `NAR`, in that
    order (according to rule 6). Here’s our next look at the ciphertext and the plaintext
    parts we already know:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '`XN AT NX RB EX MG PR BF XA LI`'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '`WA RS AW TO`'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '`MK MG BF FY MG TS QI MR RY ZB`'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '`RE`'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: '`ZE FL OX PM MS IU FK XF LD YP`'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '`LO`'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: '`CF KA PR PD KL DO NA FM KP CF`'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '`TO ON`'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: '`MN OR AN XP SO LF AT GM ZD XL`'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '`NO PA RS`'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '`LK KZ MV XI BW HN ZM BF FY MG`'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '`TS QA NV PD NM MV FY QC IU RO`'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '`GA KC RA CR RM TN SB IF HP HN`'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: '`ED AN`'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '`ZM ES SP XL ZD FA XL RA EL TL`'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: '`IL AN`'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: '`MK XA TL RP XB MA EB FH SM PI`'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '`RE OT`'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '`KA TL TO HO KC CI HN RY TY MV`'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '`PR ED`'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: '`DS MS US SX GA MK RB GA IL AX`'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '`RE`'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: '`HN ZM LF HV UL KN NR AG YQ WM`'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: '`CK MN QS TO IL AX FA AN IH MZ`'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '`SR PT HO KF LT IM IF MT GN LU`'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '`TA YW`'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: '`HM CL MK LZ MA HP EA LF AK MS`'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: '`RE`'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: '`MZ UL PR FH QC MZ TS XS RS MK`'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '`TO AT RE`'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '`RS GN KS FV MP RA CY OS SQ ES`'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: '`AT YW IT HP OL AN`'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: '`BH NA EU ZC KC ON MG BN RY RM`'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: '`AL RS HN ZM BK TQ AP MS HN ZM`'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '`AT`'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '`TO IL GM EL MS NA GM IU KC KC`'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '`PR`'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '`TQ KF XB QZ NM EZ LI BM ZL FA`'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: '`AY ZM AR SU PQ OS KM XB PS UE`'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '`NA ER`'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '`UM IL PR KB GM SK QD NA PD ZM`'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '`TO TI ON`'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '`TB NB OB EX MG SR EF ZD BS AM`'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '`TA`'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: '`IM HY GA KY RM UL BY MS SZ LK`'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: '`OG KG LK LG AW XN TE DB HM BX`'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '`NX WA`'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '`ZD NR KZ HP SM SK MN AM MH IZ`'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: '`TI`'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: '`PD KM IM XN KS AK CK OK MN RL`'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '`ER WA IT`'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: '`CF LI NX FH DA GA IQ GA TL MZ`'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: '`AW`'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '`DL FA AQ PH ND MV AK MV MA GC`'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: '`PR XN AT NX PD GU NM BK LI OL`'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: '`TO WA RS AW`'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '`KA GL DA GA KQ BF TQ OS KM XG`'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '`AP ER`'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: '`PD HN WL XS UL MY IL LE MK HB`'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: '`RE`'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '`EA LF MR SK UF HA AK TS`'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: '`TI`'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we extend `APER` to `PAPER`, a plausible word in a diplomatic message.
    But which letter comes before `P`? In other words, what is the `*` in `*P` = `TQ`?
    Because `TQ` appears three times in the cryptogram, we can almost be sure that
    the missing letter is `S`, producing `SP` = `TQ`, as `SP` is the most frequent
    letter pair ending with a `P` in English. Including the reverse pairing, we get
    this:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '`SP` = `TQ` and `PS` = `QT`'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: What might come before `SPAPERS`? The best option looks to be `HIS PAPERS`,
    giving us `HI` = `BF` and the reverse, `IH` = `FB`. The expression `PA**RS` in
    the fifth line of the ciphertext might also stand for `PAPERS`, which gives us
    the statements `PE` = `LF` and `EP` = `FL`.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: Now, recall our third crib. Say we know that the expression `HIS SERENE HIGHNESS`
    usually appears early in the letter. In this case, it probably follows the word
    `TO` in the first line. Including the reversed versions, this crib reveals the
    statements `SX` = `XA`, `XS` = `AX`, `SE` = `LI`, `ES` = `IL`, `NE` = `MG`, `EN`
    = `GM`, `GH` = `FY`, and `HG` = `YF`.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: 'According to rule 6, the statement `SX` = `XA` indicates that the letters `SXA`
    are found in a row or line of the Playfair matrix, in this order, and without
    any other letter in between. Remember that we also identified the letter sequence
    `NAR` as belonging to a line or row. Because both triples contain an `A`, we can
    reconstruct the following part of the matrix:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: '`S`'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: '`X`'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: '`NAR`'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: 'Combining this with the statements `WA` = `XN` and `RS` = `AT`, which we already
    know, we get the following:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: '`ST`'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: '`WX`'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: '`NAR`'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now apply our newly detected statements to the ciphertext:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: '`XN AT NX RB EX MG PR BF XA LI`'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: '`WA RS AW NE TO HI SX SE`'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: '`MK MG BF FY MG TS QI MR RY ZB`'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: '`RE NE HI GH NE`'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: '`ZE FL OX PM MS IU FK XF LD YP`'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: '`EP LO`'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: '`CF KA PR PD KL DO NA FM KP CF`'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: '`TO ON`'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: '`MN OR AN XP SO LF AT GM ZD XL`'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: '`NO PA PE RS EN`'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: '`LK KZ MV XI BW HN ZM BF FY MG`'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: '`HI GH NE`'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: '`TS QA NV PD NM MV FY QC IU RO`'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: '`GH`'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: '`GA KC RA CR RM TN SB IF HP HN`'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: '`ED AN`'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: '`ZM ES SP XL ZD FA XL RA EL TL`'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: '`AN`'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: '`MK XA TL RP XB MA EB FH SM PI`'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: '`RE SX OT`'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: '`KA TL TO HO KC CI HN RY TY MV`'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: '`PR ED`'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: '`DS MS US SX GA MK RB GA IL AX`'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: '`RE ES SX`'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: '`HN ZM LF HV UL KN NR AG YQ WM`'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: '`PE`'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: '`CK MN QS TO IL AX FA AN IH MZ`'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: '`ES SX`'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: '`SR PT HO KF LT IM IF MT GN LU`'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: '`TA YW`'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: '`HM CL MK LZ MA HP EA LF AK MS`'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: '`RE PE`'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: '`MZ UL PR FH QC MZ TS XS RS MK`'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: '`TO AT RE`'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: '`RS GN KS FV MP RA CY OS SQ ES`'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: '`AT YW IT HP OL AN`'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: '`BH NA EU ZC KC ON MG BN RY RM`'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '`ON NE`'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: '`AL RS HN ZM BK TQ AP MS HN ZM`'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: '`AT SP`'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: '`TO IL GM EL MS NA GM IU KC KC`'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: '`PR ES EN ON EN`'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: '`TQ KF XB QZ NM EZ LI BM ZL FA`'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: '`SP SE`'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: '`AY ZM AR SU PQ OS KM XB PS UE`'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: '`NA ER`'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: '`UM IL PR KB GM SK QD NA PD ZM`'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: '`ES TO EN TI ON`'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: '`TB NB OB EX MG SR EF ZD BS AM`'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: '`EN TA`'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: '`IM HY GA KY RM UL BY MS SZ LK`'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: '`OG KG LK LG AW XN TE DB HM BX`'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: '`NX WA`'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: '`ZD NR KZ HP SM SK MN AM MH IZ`'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: '`TI`'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: '`PD KM IM XN KS AK CK OK MN RL`'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: '`ER WA IT`'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: '`CF LI NX FH DA GA IQ GA TL MZ`'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: '`SE AW`'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: '`DL FA AQ PH ND MV AK MV MA GC`'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: '`PR XN AT NX PD GU NM BK LI OL`'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: '`TO WA RS AW SE`'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: '`KA GL DA GA KQ BF TQ OS KM XG`'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: '`HI SP AP ER`'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: '`PD HN WL XS UL MY IL LE MK HB`'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '`ES RE`'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: '`EA LF MR SK UF HA AK TS`'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: '`PE TI`'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: 'For brevity’s sake, we’ll skip the rest of the codebreaking process. In the
    end, we receive the following plaintext:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: '`WARSAW AD IUNE TO HIS X SERENE HIGHNESQS GRANDX DUKE PAVLO ALEXEIVITCHQ HEIR
    TO THE THRONE OF THE ROMANOVS PAPERS ENTRUSTED TO US BYX YOUR HIGHNESQS NOW THOROUGHLY
    EXAMINED AND MARQRIAGE OF YOUR ILQLUSTRIOUS ANCESTRESXS TO TSAR NICHOLAS FIRST
    PROVED BEYONDQ DOUBT ALXL IS IN READINESXS YOUR PEOPLE GROANING UNDER OPQPRESXSION
    OF BRUTAL SOVIETS EAGERLY WELCOME RETURN OF IMPERIAL RULE TO HOLY RUSQSIA TREATY
    WITH POLAND HAPQPILY CONCLUDED MONEY AND ARMS AT YOUR DISPOSAL YOUR PRESENCE ALONE
    NEXEDED SPIES AT WORK USE CAUTION BURN ALXL PAPERS ALQL CLUES TO IDENTITY ON THURSDAY
    AH IUNE TAKE TRAIN REACHING DARLEY HALT X TEN FIFTEQEN X WALK BY COASTROAD TO
    FLATIRON ROCK X THERE AWAIT RIDER FROM THESE A WHO BRINGS INSTRUCTIONS FOR YOUR
    IOURNEY TO WARSAW THE WORD IS EMPIRE Q BRING THIS PAPER WITH YOU QSILENCE SECRECY
    IMPERATIVE BORISQ`'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the complete Playfair matrix, which is based on the keyword `MONARCHY`.
    We can circularly shift rows and columns with respect to the matrix to reproduce
    a meaningful keyword:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: '`M O N A R`'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: '`C H Y B D`'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: '`E F G I K`'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: '`L P Q S T`'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: '`U V W X Z`'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: We might now find it interesting to take a second look at the text statistics
    generated at the start of our analysis. `M`, which is the most frequent letter
    in the cryptogram, appears in the same column as `E`—just as we expected. The
    most frequent digraphs, `ZM`, `HN`, and `GA`, decrypt to `UR`, `YO`, and `IN`.
    The digraph `UR` is not typically this common in an English text; here, its frequent
    appearance is caused by the example’s frequent use of the word `YOUR`. The plaintext
    equivalents of the frequent reversible digraphs, `ZM`/`MZ`, `MK`/`KM`, and `IL`/`LI`,
    are `UR`/`RU`, `RE`/`ER`, and `ES`/`SE`. Again, `UR`/`RU` appears more commonly
    than one would expect, but things like this happen in the life of a codebreaker.
    All in all, text statistics were not particularly helpful in breaking this Playfair
    cryptogram, though they may be in other cases.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: It should now be clear that manually breaking a Playfair cryptogram is a difficult
    task. Although we had several cribs (which we cannot, of course, always expect
    in practice), we had to make a few quite optimistic guesses. We also cheated by
    only following the guesses we knew were correct. A real codebreaking process would
    require a lot more trial and error. Still, in the pre-computer age, people really
    did solve Playfair encryptions with the method described here. We can’t help but
    tip our hats to them.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: If you are looking for resources that explain the techniques introduced in this
    chapter in more detail, check out the cited chapters in *Cryptanalysis* by Helen
    Fouché Gaines,^([7](b06.xhtml#c12-endnote-7)) *Manual for the Solution of Military
    Ciphers* by Parker Hitt,^([8](b06.xhtml#c12-endnote-8)) or *Cryptography* by André
    Langie.^([9](b06.xhtml#c12-endnote-9)) In *Solution of a Playfair Cipher*, Alf
    Monge also walks through the breaking of a Playfair cryptogram consisting of only
    thirty letters.^([10](b06.xhtml#c12-endnote-10))
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: Success stories
  id: totrans-451
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Thouless’s first message
  id: totrans-452
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As mentioned earlier in this chapter, British parapsychologist Robert Thouless
    (1894–1984) published a Playfair message in 1948, intending to psychically transmit
    its key after his death (see [Chapter 8](c08.xhtml) for details).^([11](b06.xhtml#c12-endnote-11))
    This message is reproduced here and in [Figure 12-9](#figure12-9):'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: '`CBFTM HGRIO TSTAU FSBDN WGNIS BRVEF BQTAB`'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: '`QRPEF BKSDG MNRPS RFBSU TTDMF EMA BIM`'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: A codebreaker, who wanted to stay anonymous, deciphered this message only a
    few weeks after its publication, causing Thouless’s first attempt at his experiment
    to fail. We do not know how this individual deciphered this cryptogram—the codebreaker
    is referenced only briefly in Thouless’s next paper—but we can make a few educated
    guesses.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502727c12/f12009.png)'
  id: totrans-457
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12-9: Robert Thouless (pictured) wanted to channel the solution to this
    Playfair-encrypted message after his death in order to prove that the dead can
    communicate with the living. However, long before Thouless died, a codebreaker
    solved the cryptogram—without psychic powers.'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: As Thouless did not reveal the encryption system he had used, the first hurdle
    involved finding out his method. Frequency analysis clearly shows that Thouless
    had not used a simple substitution cipher. The unknown codebreaker probably saw
    that the message didn’t contain a `J` and had an even number of letters, as is
    typical of a Playfair cipher. The fact that no digraph in the ciphertext consists
    of two identical letters is consistent with Playfair, too. Considering all this
    evidence, the codebreaker had enough reason to conclude that they were dealing
    with a Playfair cryptogram.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: 'But, once they had identified the system as Playfair, how did they solve it?
    In his 2017 book *Unsolved**!*, our colleague Craig Bauer points to a few promising
    starting points.^([12](b06.xhtml#c12-endnote-12)) We mentioned earlier in this
    chapter that the last line of a Playfair matrix derived from a keyword is often
    `VWXYZ`, because these five letters are unlikely to be included in a keyword in
    English. In this case, this assumption turns out to be correct. In addition, Craig
    writes:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: We see that some digraphs (`BQ`, `EF`, `SB`, and `TA`) appear twice. These are
    likely to represent high-frequency digraphs in normal English. A lot of trial
    and error may be involved in matching these up correctly, but cryptanalysts are
    patient.
  id: totrans-461
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It might also have helped that Thouless’s message contains `BS` and `SB`, a
    reversing digraph. The most frequent reversing digraph in English texts is *ER*/*RE*.
    So, does `BS` stand for `ER` and `SB` for `RE`, or vice versa? It turns out that
    the mappings `BS` = `ER` and `SB` = `RE` are correct.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: The unknown codebreaker might also have taken a completely different approach.
    While Thouless did not reveal the cipher he used, he mentioned that the plaintext
    was a Shakespearean quote. Perhaps the codebreaker worked through a list of famous
    Shakespeare quotes, looking for one that contains the same digraph repetitions
    as the ciphertext. The pattern `BQTABQ`, consisting of two identical digraphs
    with a different one in between, might have been helpful for this purpose. It
    is certainly possible to identify the correct plaintext in this way.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: 'Whichever method the codebreaker used, they finally came up with the following
    Playfair matrix (based on the keyword `SURPRISE`):'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: '`S U R P I`'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: '`E A B C D`'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: '`F G H K L`'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: '`M N O Q T`'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: '`V W X Y Z`'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: 'From this matrix, they derived the following plaintext, which is from Shakespeare’s
    *Macbeth*, Act 2, Scene 2, and proved correct: `BALM OF HURT MINDS GREAT NATURE’S
    SECOND COURSE CHIEF NOURISHER IN LIFE’S FEAST.`'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: Thouless’s third message
  id: totrans-471
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Robert Thouless’s third cryptogram is also encrypted with the Playfair cipher
    (see [Chapter 8](c08.xhtml) for the background story). However, this time, Thouless
    double-encrypted the message, using Playfair twice with two different keywords,
    in order to increase its security. Between the two encryptions, he added the same
    letter to the start and end of the result, to make decryption a bit more difficult.
    Here’s the cryptogram he published:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: '`BTYRR OOFLH KCDXK FWPCZ KTADR GFHKA`'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: '`HTYXO ALZUP PYPVF AYMMF SDLR UVUB`'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: This time, Thouless revealed the cipher he had used but kept the two keywords
    secret.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: When he died in 1984, the solution remained unknown, and the interesting part
    of his experiment began. The Survival Research Foundation, an organization that
    studied after-death communications, offered a $1,000 reward for the correct solution
    to the second or third message, so long as it was provided by 1987.^([13](b06.xhtml#c12-endnote-13))
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: To our knowledge, nobody ever received the two keywords from the realm of the
    dead, and the reward was never paid. So, Thouless’s messages did not prove that
    the dead could communicate with the living. Or perhaps the dead simply can’t remember
    keywords!
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: In 1995, renowned codebreaker Jim Gillogly and his partner Larry Harnisch started
    a project that aimed to solve Thouless’s second and third messages. They never
    solved the second but did succeed in breaking the third. It should come as no
    surprise that, rather than using psychic powers, the partners applied codebreaking
    methods and a computer.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: 'As a first step, their computer program attempted to decrypt the message using
    each entry in a file of 64,000 keyword candidates (a dictionary attack). But,
    of course, this trial-and-error decryption could do only half of the job, as Thouless
    had used two Playfairs in a row. A question remained: How could they determine
    whether one keyword was correct without knowing the other one?'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: Gillogly and Harnisch found two simple ways to check this. First, they used
    the fact that Thouless had added the same letter to the start and the end of his
    intermediate result. Second, they knew that the decryption they performed needed
    to result in another Playfair cryptogram. As mentioned, Playfair cryptograms have
    certain predictable properties, such as a lack of double letters. A computer program
    could easily check both conditions.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: Of the 64,000 keyword candidates Gillogly and Harnisch checked, 1,385 produced
    a result that fulfilled both criteria (they had the same first and last letters
    and no identical digraphs). For each of these candidates, they applied a second
    Playfair decryption, testing all 64,000 keywords, which resulted in about 88 million
    combinations. Next, for each combination, their program checked whether the plaintext
    candidate looked like an English text by analyzing its trigraph frequencies.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: 'After 8.5 hours of calculations, the computer program returned a potential
    solution. Using `BLACK` as the first keyword and `BEAUTY` as the second one, the
    program produced a readable English sentence. The choice of keywords sounded plausible,
    as Robert Thouless certainly knew Anna Sewell’s famous 1877 novel *Black Beauty*.
    The problem was solved:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: '`THIS IS A CIPHER WHICH WILL NOT BE READ UNLESS I GIVE THE KEY WORDS X`'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: 'Gillogly and Harnisch presented their solution in the scientific journal *Cryptologia*,
    in a 1996 paper titled “Cryptograms from the Crypt.”^([14](b06.xhtml#c12-endnote-14))
    Unfortunately, this was too late to earn the $1,000 prize. So, Gillogly and Harnisch
    ended their article with this lament: “Our successful computational séance must
    be its own reward.”'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: Challenges
  id: totrans-485
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The cryptogram in National Treasure: Book of Secrets'
  id: totrans-486
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s try an easy challenge. In the 2007 movie *National Treasure: Book of
    Secrets*, the following Playfair cryptogram appears:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: '`ME IK QO TX CQ TE ZX CO MW QC TE HN FB IK ME HA KR QC UN GI KM AV`'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: The keyword is `DEATH`. Can you decrypt it?
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: Unsolved cryptograms
  id: totrans-490
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The world record digraph challenge
  id: totrans-491
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The shortest message created with a general digraph substitution that was ever
    broken has a length of 750 letters.^([15](b06.xhtml#c12-endnote-15)) We’ll cover
    this record in [Chapter 16](c16.xhtml), when we discuss the hill-climbing method.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: 'Klaus created the following shorter ciphertext, encrypted in the same way,
    in March 2020, to encourage his blog readers to improve the record:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: '`UGBZAEHINYQLBPZLNFTLUEBMULTLSLZPBZPZKPOVUGYSQPNYHL`'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: '`RYFHATQKRHTZEHPDQUUGYSUJOVYTUGYVRHAJNFTLUEXFRUEOOJ`'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: '`TZOSLUPZEICVADYMYLCRBZXOUGSVDJOIDYRHTZOSWZROYNKJRM`'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: '`EIXOREOVNFTLUESAMNDJHIIWJGKRYFUBTIQPULBPRMJORECJCY`'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: '`WZZPQRXXVNOSZLBLNYJMPLYNOVLCLKIOGUKUKFSAKAQRSVQXUJ`'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: '`IOANYSWZSDKUKFLNRMEIRJYVEOLXLKMEYKERHXZPBZXOZXQPCR`'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: '`KSYOSVHNTLIXKRYFUBTIMGWIZLOSONRMIDKYNYLCFFOMTTLLJH`'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: '`WTADHLYNRHMZADOGMUKBWZZPPQBZBZNOCRHINYNFTLUEYNOVBZ`'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: '`NOQPGCQMRHTZIDKYNYCRBZXOUGSVTTQPOSDYXOMQKKVNEALUYV`'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: '`RMUFPYNXZAVLRHTZNYQXMFYVUCMZSAJMBZZPXPBZMNVFUCJTNY`'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: '`QXGHEITPPYFWKUZFPZQUDEVLDBOMGRUEKFSCYTVNANLDRMNBYV`'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: '`UTFNUJMUMMEOIXIISDVNZPMNRYRCTFUGZPDNUTLXJNSSVNCRJC`'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: Also known as the Bigram 600 challenge, this message consists of 600 letters
    and has (as of this writing) withstood all attempts to break it.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: The world record Playfair challenge
  id: totrans-507
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While general digraph substitution appears to protect a 600-letter plaintext
    quite well, as evidenced by the ciphertext in the previous section, the Playfair
    cipher has proven much easier to attack. As of this writing, the shortest Playfair
    cryptogram created with a random Playfair matrix (i.e., without a keyword) ever
    to have been solved consists of just twenty-six letters. We will cover this record
    in [Chapter 16](c16.xhtml), when we address hill climbing. The thirty-letter Playfair
    ciphertext broken in 1936 by Alf Monge, which we mentioned earlier in this chapter,
    was based on a keyword and therefore doesn’t count in this category.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: In January 2020, Klaus, always seeking to challenge his blog readers, published
    an even shorter Playfair cryptogram containing only twenty-four letters:^([16](b06.xhtml#c12-endnote-16))
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: '`VYRSTKSVSDQLARMWTLRZNVUC`'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: Can you decipher this message? If so, you may set a new record!
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
