- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Digraph substitution
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 字母对替换
- en: '![](image_fi/502727c12/g12001.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c12/g12001.png)'
- en: 'In his 1563 book *De Furtivis Literarum Notis*, Italian polymath and cryptologist
    Giambattista della Porta (1535–1615) proposed an interesting encryption method.
    Instead of replacing single letters, his system substituted letter pairs (also
    known as digraphs). In the centuries that followed, different variants of this
    digraph substitution were developed—including the so-called Playfair cipher. In
    this chapter, we will cover both methods: Playfair and Porta’s original system.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在他1563年的著作《*De Furtivis Literarum Notis*》中，意大利博学家和密码学家Giambattista della Porta（1535–1615）提出了一种有趣的加密方法。他的系统并非替换单个字母，而是替换字母对（也称为字母二重组合）。在随后的几个世纪中，这种字母对替换法被发展出了不同的变种——包括所谓的Playfair密码。在本章中，我们将介绍这两种方法：Playfair和Porta的原始系统。
- en: How general digraph substitution works
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一般字母对替换的工作原理
- en: The method Giambattista della Porta suggested is based on a digraph substitution
    table with 400 unique entries. It provides a different symbol for each possible
    letter pair, as shown in [Figure 12-1](#figure12-1).^([1](b06.xhtml#c12-endnote-1))
    (The alphabet he used had twenty letters.)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Giambattista della Porta 提出的加密方法基于一个包含400个独特条目的字母对替换表。该表为每一对可能的字母对提供了不同的符号，如[图12-1](#figure12-1)所示。^([1](b06.xhtml#c12-endnote-1))（他使用的字母表包含20个字母。）
- en: '![](image_fi/502727c12/f12001.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c12/f12001.png)'
- en: 'Figure 12-1: Giambattista della Porta suggested this substitution table, which
    provides a different symbol for every digraph.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图12-1：Giambattista della Porta 提出了这张替换表，为每一对字母提供了不同的符号。
- en: 'For example, if we wanted to encrypt the word `STREET` using this table, we
    would first need to think of it as a sequence of three digraphs: `ST`, `RE`, and
    `ET`. If we look up each pair in the table (using the first letter along the top
    of the table and the second letter along the right-hand side), we get this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想使用这个表加密单词`STREET`，我们首先需要将其视为三个字母对：`ST`、`RE`和`ET`。如果我们查找表格中的每对字母（使用表格顶部的第一个字母和右侧的第二个字母），我们会得到如下结果：
- en: '![](image_fi/502727c12/g12002.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c12/g12002.png)'
- en: 'However, Porta’s table was probably never used in practice, as dealing with
    400 different symbols is quite cumbersome. Other cipher designers preferred replacing
    digraphs with three-digit substitutes (we will provide an example of this in [Chapter
    16](c16.xhtml)), but in the end, it turned out that the most convenient way to
    replace a digraph is with another digraph. Here’s an excerpt, from the top left-hand
    corner of a table with 26 × 26, or 676, entries, that substitutes a new digraph
    for every existing one:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Porta的表格可能从未在实际中使用过，因为处理400个不同符号是相当麻烦的。其他密码设计师更倾向于将字母对替换为三位数的替代符号（我们将在[第16章](c16.xhtml)中提供一个示例），但最终证明，替换字母对最方便的方式是使用另一个字母对。以下是一个例子，它替换了每个现有字母对，用一个新的字母对替代，表格的左上角如下所示：
- en: '`A B C D E F G H I . . .`'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`A B C D E F G H I . . .`'
- en: '`A` `KF SW JL OO QA CP DA BN CX . . .`'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`A` `KF SW JL OO QA CP DA BN CX . . .`'
- en: '`B` `LH WS WM CO XE YP WW NV CH . . .`'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`B` `LH WS WM CO XE YP WW NV CH . . .`'
- en: '`C` `JX KV AS PI CS PX NU SR LS . . .`'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`C` `JX KV AS PI CS PX NU SR LS . . .`'
- en: '`D` `TR AL FG AD WU QM GH PG JC . . .`'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`D` `TR AL FG AD WU QM GH PG JC . . .`'
- en: '`E` `ND SG RE AT NA TU RX SS OD . . .`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`E` `ND SG RE AT NA TU RX SS OD . . .`'
- en: '`. . .`'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`. . .`'
- en: 'Using this table, the word `BEAD` encrypts to `SGTR` (again, assuming that
    the first letter of each digraph is taken from the top row). The alphabets at
    the top and on the left can also be written in a keyword-dependent way. The following
    table, for instance, was created with the keywords `AMERICA` and `BALL`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个表时，单词`BEAD`加密后的结果是`SGTR`（假设每对字母的第一个字母来自顶部行）。顶部和左侧的字母表也可以根据关键词的不同进行调整。例如，以下表格就是使用关键词`AMERICA`和`BALL`创建的：
- en: '`A M E R I C B D F . . .`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`A M E R I C B D F . . .`'
- en: '`B` `KF SW JL OO QA CP DA BN CX . . .`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`B` `KF SW JL OO QA CP DA BN CX . . .`'
- en: '`A` `LH WS WM CO XE YP WW NV CH . . .`'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`A` `LH WS WM CO XE YP WW NV CH . . .`'
- en: '`L` `JX KV AS PI CS PX NU SR LS . . .`'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`L` `JX KV AS PI CS PX NU SR LS . . .`'
- en: '`C` `TR AL FG AD WU QM GH PG JC . . .`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`C` `TR AL FG AD WU QM GH PG JC . . .`'
- en: '`D` `ND SG RE AT NA TU RX SS OD . . .`'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`D` `ND SG RE AT NA TU RX SS OD . . .`'
- en: '`. . .`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`. . .`'
- en: When using such a table, one usually keeps the digraphs in the matrix constant
    while changing the two keywords frequently.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用这样的表时，通常保持矩阵中的字母对不变，同时频繁更换两个关键词。
- en: How the Playfair cipher works
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Playfair密码的工作原理
- en: 'Even a table with 26 × 26 (or 676) entries is quite tedious to build and use.
    For this reason, digraph substitution with an exhaustive table, though reasonably
    secure, never played much of a role in the history of cryptography. Instead of
    using a large table, practitioners tended to prefer a set of rules more desirable
    for substituting digraphs. While they could have constructed such a rules set
    in numerous ways, only one method (with many variants) was frequently used in
    practice: the Playfair cipher. It was invented by Charles Wheatstone (1802–1875)
    in 1854 and later recommended to the British military by Lord Lyon Playfair (1818–1898),
    hence the name.^([2](b06.xhtml#c12-endnote-2))'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是一个26 × 26（或676）条目的表格，也相当繁琐，既难以构建又不容易使用。因此，虽然双字母替换法使用了一个详尽的表格，虽然合理安全，但它在密码学历史中从未发挥过重要作用。实践中，密码学家们更倾向于使用一些规则来替换双字母，而不是使用庞大的表格。尽管他们可以用多种方式构建这样的规则集，但实际上只有一种方法（具有多种变体）在实践中频繁使用：Playfair密码。该密码由查尔斯·惠特斯通（1802–1875）于1854年发明，后来由莱昂·普雷费尔（1818–1898）推荐给英国军队，因此得名。^([2](b06.xhtml#c12-endnote-2))
- en: 'British psychologist and parapsychologist Robert Thouless (1894–1984), who
    appears several times in our book, created two famous cryptograms of this type.
    Remember from [Chapter 8](c08.xhtml) that, in 1948, Thouless started an interesting
    experiment: in order to check whether it was possible to send a message from the
    realm of the dead to the living, he published an encrypted text, keeping the plaintext
    and the keyword secret. His plan was to channel the keyword from the beyond after
    his death. Before his death in 1984, Thouless published three trials of his parapsychological
    experiment: two with Playfair and one with a polyalphabetic system. His two Playfair
    attempts are covered in this chapter.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 英国心理学家和超心理学家罗伯特·索尔斯（1894–1984），在我们书中多次出现，创作了两种著名的加密文。这些加密文使用了这种类型的双字母密码。还记得在[第8章](c08.xhtml)中提到，1948年，索尔斯开始了一个有趣的实验：为了验证是否可以从死者的领域向活人传递信息，他发布了一段加密文本，保密了明文和关键词。他的计划是死后从另一个世界传递关键词。在1984年去世前，索尔斯公开了他三次超心理学实验的结果：两次使用了Playfair密码，另一次使用了多表替换系统。他的两次Playfair尝试将在本章中讨论。
- en: 'In his first trial, Thouless encrypted a Shakespearean quote using the Playfair
    system. The plaintext was this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在他的第一次实验中，索尔斯使用Playfair系统加密了一句莎士比亚名言。明文如下：
- en: '`BALM OF HURT MINDS GREAT NATURE''S SECOND COURSE CHIEF NOURISHER IN LIFE''S
    FEAST`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`伤痛心灵的药膏，伟大自然的第二道菜，生命盛宴中的主要滋养者`'
- en: 'Written in digraphs, this reads:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 用双字母书写的内容为：
- en: '`BA LM OF HU RT MI ND SG RE AT NA TU RE SS EC ON DC OU RS EC HI EF NO UR IS
    HE RI NL IF ES FE AS T`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`BA LM OF HU RT MI ND SG RE AT NA TU RE SS EC ON DC OU RS EC HI EF NO UR IS
    HE RI NL IF ES FE AS T`'
- en: 'Typically, the Playfair cipher requires that no pair consist of two equal letters,
    because the standard set of rules has no method for encrypting an identical pair,
    as we will explain shortly. Therefore, as is often done in these cases, Thouless
    added an `X` between the two `S`s:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Playfair密码要求没有一对字母相同，因为标准规则集没有加密相同字母对的方法，稍后我们会解释。因此，在这些情况下，索尔斯常常会在两个`S`之间加一个`X`：
- en: '`BA LM OF HU RT MI ND SG RE AT NA TU RE SX SE CO ND CO UR SE CH IE FN OU RI
    SH ER IN LI FE SF EA ST`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`BA LM OF HU RT MI ND SG RE AT NA TU RE SX SE CO ND CO UR SE CH IE FN OU RI
    SH ER IN LI FE SF EA ST`'
- en: 'If the number of letters in this plaintext were odd, he would have had to add
    another `X` in the last position so that each letter belonged to a pair, but this
    is not necessary here. Thouless chose, as his keyword, `SURPRISE`. Based on this
    word, he used the following transposed alphabet. It starts with the keyword, omits
    repeating letters, and considers I and J to be equivalent in order to produce
    an alphabet of twenty-five letters: `SURPIEABCDFGHKLMNOQTVWXYZ`. Next, Thouless
    wrote this alphabet out in a 5 × 5 grid (also known as a Playfair matrix):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果明文中字母的个数是奇数，他必须在最后一个位置加一个`X`，以确保每个字母都属于一个对，但是在这里并不需要这样做。索尔斯选择了`SURPRISE`作为他的关键词。基于这个词，他使用了以下转置的字母表。它从关键词开始，省略了重复的字母，并且将I和J视为等同，从而得到了一个包含二十五个字母的字母表：`SURPIEABCDFGHKLMNOQTVWXYZ`。接下来，索尔斯将这个字母表写成一个5
    × 5的网格（也称为Playfair矩阵）：
- en: '`S U R P I`'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`S U R P I`'
- en: '`E A B C D`'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`E A B C D`'
- en: '`F G H K L`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`F G H K L`'
- en: '`M N O Q T`'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`M N O Q T`'
- en: '`V W X Y Z`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`V W X Y Z`'
- en: 'From here, Thouless replaced the plaintext digraphs (`BA`, `LM`, `OF`, `HU`
    . . .) according to the following most common three Playfair rules, which are
    visualized in [Figure 12-2](#figure12-2):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，索尔斯根据以下三条最常见的Playfair规则替换了明文的双字母（`BA`，`LM`，`OF`，`HU`……），这些规则在[图12-2](#figure12-2)中进行了可视化：
- en: Rule 1 If the two letters are neither in the same column nor in the same row
    (which is the most frequent case), find a rectangle formed by the two letters
    when they are at opposite corners and replace the two letters with the other two
    corner letters (replacing the upper plaintext letter with the other upper letter
    in the rectangle and the lower plaintext letter with the other lower letter).
    In this example, `LM` becomes `FT`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 规则1：如果两个字母既不在同一列也不在同一行（这是最常见的情况），找到由这两个字母形成的矩形，并用矩形的另两个角字母替换这两个字母（将上方的明文字母替换为矩形的另一个上方字母，下方的明文字母替换为矩形的另一个下方字母）。在这个例子中，`LM`变为`FT`。
- en: Rule 2 If the two letters are in the same row, replace each one with its neighbor
    to the right. Here, `BA` becomes `CB`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 规则2：如果两个字母位于同一行，将每个字母替换为其右侧的邻居。这里，`BA`变为`CB`。
- en: Rule 3 If the two letters are in the same column, replace each one with its
    lower neighbor. In our example, `AN` becomes `GW`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 规则3：如果两个字母位于同一列，将每个字母替换为其下方的邻居。在我们的示例中，`AN`变为`GW`。
- en: '![](image_fi/502727c12/f12002.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c12/f12002.png)'
- en: 'Figure 12-2: The Playfair cipher replaces letter pairs based on three rules.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图12-2：Playfair密码通过三条规则替换字母对。
- en: 'When we apply the Playfair rules to the 5 × 5 grid shown above, the Shakespeare
    quote encrypts to the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将Playfair规则应用于上面显示的5×5矩阵时，莎士比亚的名言会被加密为以下内容：
- en: '`CB FT MH GR IO TS TA UF SB DN WG NI SB RV EF BQ TA BQ RP EF BK SD GM NR PS
    RF BS UT TD MF EM AB IM`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`CB FT MH GR IO TS TA UF SB DN WG NI SB RV EF BQ TA BQ RP EF BK SD GM NR PS
    RF BS UT TD MF EM AB IM`'
- en: 'This is the cryptogram Robert Thouless published in 1948\. He wrote it in five-letter
    groups, except for the last six letters:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Robert Thouless在1948年发布的加密信息。他将其写成五个字母一组，最后六个字母除外：
- en: '`CBFTM HGRIO TSTAU FSBDN WGNIS BRVEF BQTAB`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`CBFTM HGRIO TSTAU FSBDN WGNIS BRVEF BQTAB`'
- en: '`QRPEF BKSDG MNRPS RFBSU TTDMF EMA BIM`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`QRPEF BKSDG MNRPS RFBSU TTDMF EMA BIM`'
- en: To learn more about the follow-up to this experiment, see [Chapter 8](c08.xhtml).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于该实验后续的内容，请参见[第8章](c08.xhtml)。
- en: Of course, the Playfair method we described can be modified in many ways. For
    instance, we can use a 4 × 6 or a 5 × 6 Playfair matrix, instead of the 5 × 5
    version. The 5 × 6 matrix provides room for a few more characters, such as a space,
    a period, or meaningless letters (nulls). The replacement rules can be changed
    in many ways, as well. For instance, one can add a rule for substituting double
    letters or for shifting letters to the left instead of to the right.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们描述的Playfair方法可以以多种方式进行修改。例如，我们可以使用一个4×6或5×6的Playfair矩阵，而不是5×5版本。5×6矩阵可以提供更多空间，比如用于表示空格、句号或无意义的字母（空字符）。替换规则也可以以多种方式进行更改。例如，可以添加一个规则来替换双字母，或者将字母移到左边而不是右边。
- en: In World War II, the German army implemented a Playfair version that used two
    5 × 5 matrices instead of one, constructing each grid with a different keyword.
    This system was known as the Doppelkasten (“Double Box”) method.^([3](b06.xhtml#c12-endnote-3))
    Examples can be found in back issues of the academic journal *Cryptologia*.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二次世界大战中，德国军队实施了Playfair密码的一个版本，使用两个5×5矩阵而不是一个，每个矩阵使用不同的关键字构造。这个系统被称为Doppelkasten（“双箱”）方法。^([3](b06.xhtml#c12-endnote-3))
    相关示例可以在《Cryptologia》学术期刊的早期期刊中找到。
- en: How to detect a general digraph substitution
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何检测一般的双字母替换
- en: Klaus created the following ciphertext with a general digraph substitution,
    not a Playfair cipher. He published it as a challenge for his blog readers, to
    test whether a digraph substitution cryptogram of this length could be solved.
    We will come back to this story in the “Challenges” section of this chapter.^([4](b06.xhtml#c12-endnote-4))
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Klaus使用一般的双字母替换而非Playfair密码创建了以下密文。他将其作为挑战发布给博客读者，测试这种长度的双字母替换加密信息是否能够被破解。我们将在本章的“挑战”部分回到这个故事。^([4](b06.xhtml#c12-endnote-4))
- en: '`UNGOZIHIJGSLGVWPIVGJSOKEFMAHSDBDGLUBUNZIWPIEBIUNKFVOUNB`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`UNGOZIHIJGSLGVWPIVGJSOKEFMAHSDBDGLUBUNZIWPIEBIUNKFVOUNB`'
- en: '`DSLPPHELVAQBAHEBIFJMHKVFLHXQQEFSLQQBDAQRIBVBIBYGJMOSOZB`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`DSLPPHELVAQBAHEBIFJMHKVFLHXQQEFSLQQBDAQRIBVBIBYGJMOSOZB`'
- en: '`SDUXZINXUNEQVKUGYHUNVOWPSGSMGEFLFKRUHELFPHGVUXFGHRJYFUH`'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`SDUXZINXUNEQVKUGYHUNVOWPSGSMGEFLFKRUHELFPHGVUXFGHRJYFUH`'
- en: '`IPBMHUNVOWPSGHXVKRSSGPHPWQXPLKCXGUNFGBICJFGJGCLLCFPNXUN`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`IPBMHUNVOWPSGHXVKRSSGPHPWQXPLKCXGUNFGBICJFGJGCLLCFPNXUN`'
- en: '`TUUKKIZBKFABEQNHRFWLKCYHDJHJOPBZRLAHQVFTHETGRQRJTDAYDTX`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`TUUKKIZBKFABEQNHRFWLKCYHDJHJOPBZRLAHQVFTHETGRQRJTDAYDTX`'
- en: '`TVDBDKFEFZKSDHETUFVIQBIYABDEXZIKCHXRUKQRLGECJAQAOBKZIOB`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`TVDBDKFEFZKSDHETUFVIQBIYABDEXZIKCHXRUKQRLGECJAQAOBKZIOB`'
- en: '`TEFMFRZNZACLWDWAUNEBBISLMREQKWRJRCUGHERGJMXONWGJHIPBEYG`'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`TEFMFRZNZACLWDWAUNEBBISLMREQKWRJRCUGHERGJMXONWGJHIPBEYG`'
- en: '`DZOHXIXKFOXFLKVRUDWAOBIDLSRRICSICJGKFZBBUMRFMGQKFYBXOHE`'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`DZOHXIXKFOXFLKVRUDWAOBIDLSRRICSICJGKFZBBUMRFMGQKFYBXOHE`'
- en: '`TGHEOAMUEMWLAYRJWPKIGXUOSKZIHIJGSLHIGIBLFUXXUKUQPHGEGWH`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`TGHEOAMUEMWLAYRJWPKIGXUOSKZIHIJGSLHIGIBLFUXXUKUQPHGEGWH`'
- en: '`IOPZIBDLVBUKQRJSMUGFPWLWPSGPHFIKVYXCJLVULKVQSZIBDLVBUUI`'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`IOPZIBDLVBUKQRJSMUGFPWLWPSGPHFIKVYXCJLVULKVQSZIBDLVBUUI`'
- en: '`SRRUGJAIYXXGLKQXFRPBUOJIBTGHGDTGRCICUNVOWPSGDTLIEMTAVOU`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`SRRUGJAIYXXGLKQXFRPBUOJIBTGHGDTGRCICUNVOWPSGDTLIEMTAVOU`'
- en: '`NVUQQKCRTLHBDAIUXFGOAKPBTKVFLAHVWRHWAUGKCXGUNFGBIXAGJHE`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`NVUQQKCRTLHBDAIUXFGOAKPBTKVFLAHVWRHWAUGKCXGUNFGBIXAGJHE`'
- en: '`HXGLBIRNGDOEBPUQSGBDIKACVORUBLKVVLZIHIJGSLWPIEUNCEPHFOM`'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`HXGLBIRNGDOEBPUQSGBDIKACVORUBLKVVLZIHIJGSLWPIEUNCEPHFOM`'
- en: '`KFVMHUGNOPKBGLKCGCLHEXFAYUOMKTAGDZOHEKFLVBWKVPLGXBPHEGI`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`KFVMHUGNOPKBGLKCGCLHEXFAYUOMKTAGDZOHEKFLVBWKVPLGXBPHEGI`'
- en: '`XOTJWURUUNCLSOFMKVWGFMFPIKGJLLJYOGDWFRGLFQQEYDFVCAHYZPJ`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`XOTJWURUUNCLSOFMKVWGFMFPIKGJLLJYOGDWFRGLFQQEYDFVCAHYZPJ`'
- en: '`GKFBIRQHEBAHELFHEFSVUCLWDBWIGJGDRAYVKFPWLZNLQFGGJQAKFBL`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`GKFBIRQHEBAHELFHEFSVUCLWDBWIGJGDRAYVKFPWLZNLQFGGJQAKFBL`'
- en: '`FUWQPWGJOBSLRIVVBXBDVUMHYIZYBZKFGQLWROZIOBMACTPHSMGECLF`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`FUWQPWGJOBSLRIVVBXBDVUMHYIZYBZKFGQLWROZIOBMACTPHSMGECLF`'
- en: '`GVOSGUNTUJYOGBIHECERCUGWDEMFGKPAYSQKCBWONQVGEKVDHBIDWPH`'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`GVOSGUNTUJYOGBIHECERCUGWDEMFGKPAYSQKCBWONQVGEKVDHBIDWPH`'
- en: '`EMGEAQAONOEXZIOBMAUNTUPHFYNXXGUNFGBIFNFMMFOXJBBDCLBIBIF`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`EMGEAQAONOEXZIOBMAUNTUPHFYNXXGUNFGBIFNFMMFOXJBBDCLBIBIF`'
- en: '`JMHKVFLFJMHXNHXVKUNKFZBTFFMHMFVLVWLYHHEMFOFICOJVUYXMFZN`'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`JMHKVFLFJMHXNHXVKUNKFZBTFFMHMFVLVWLYHHEMFOFICOJVUYXMFZN`'
- en: '`WLLWICLVSDZIFSEBUNNXVUFIHARCXOZKMMFPKVRUUNVOWPSGLCQWUGC`'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`WLLWICLVSDZIFSEBUNNXVUFIHARCXOZKMMFPKVRUUNVOWPSGLCQWUGC`'
- en: '`ECJTGHIVKWAFLPHAQVKPHHJSGMFHMRLDDHJZUBPTDBOFGVOSGUNTUJY`'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`ECJTGHIVKWAFLPHAQVKPHHJSGMFHMRLDDHJZUBPTDBOFGVOSGUNTUJY`'
- en: '`OGXGUNFGBIXAFMWAAQFPAIEQQQKCFIHAQWFIBPGLUBZNNNSOWDXMXGU`'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`OGXGUNFGBIXAFMWAAQFPAIEQQQKCFIHAQWFIBPGLUBZNNNSOWDXMXGU`'
- en: '`NFGBIEAHAKCAHAQSGRLMSKFWDBAHEFVMHWGPHFYBIUNTUJYOGAIYXWA`'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`NFGBIEAHAKCAHAQSGRLMSKFWDBAHEFVMHWGPHFYBIUNTUJYOGAIYXWA`'
- en: '`ZIFLYNKCRUSOKVLKBOWARIBIHJ`'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`ZIFLYNKCRUSOKVLKBOWARIBIHJ`'
- en: It is fairly easy to distinguish a digraph substitution from a simple substitution
    cipher by using frequency analysis. Look at the two diagrams in [Figure 12-3](#figure12-3).
    The top part shows the frequency of letters in our ciphertext, and the lower part
    shows the frequency of letters in a simple-substitution-cipher encryption of the
    same plaintext. As can be seen, the frequency distribution of the upper chart,
    with digraph substitution, is a lot flatter (i.e., the frequent letters are less
    frequent, and the rare letters are less rare).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过频率分析，很容易区分双字母替换密码和简单替换密码。请看[图12-3](#figure12-3)中的两个图表。上半部分显示了密文中字母的频率，下半部分显示了同一明文在简单替换密码加密下的字母频率。可以看出，上图（双字母替换）的频率分布要平坦得多（即，频繁出现的字母不那么频繁，罕见的字母也不那么罕见）。
- en: The index of coincidence is different, too. While an English text encrypted
    in a simple substitution cipher (as well as plain English) has an index of coincidence
    of 6.7%, our letter pair cryptogram has an index of coincidence of only 4.3%.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的，重合指数也不同。虽然用简单替换密码加密的英语文本（以及原始的英语文本）的重合指数是6.7%，我们这里的字母对密码加密文本的重合指数只有4.3%。
- en: But what about other ciphers that are not simple substitutions? Do they have
    a similar frequency distribution?
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，其他不是简单替换的密码呢？它们的频率分布是否相似？
- en: '![](image_fi/502727c12/f12003.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c12/f12003.png)'
- en: 'Figure 12-3: The letter frequency distributions of a digraph substitution (top)
    and a simple substitution cipher (bottom)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图12-3：双字母替换加密（上）和简单替换加密（下）的字母频率分布
- en: 'We can conduct a frequency count of the digraphs to help determine whether
    the algorithm is Playfair, another digraph system, transposition, polyalphabetic,
    or something else. However, the digraph frequency count we need to use here is
    different from the one we applied in [Chapter 4](c04.xhtml), where we included
    overlapping pairs. For instance, the string `ABCDEF` consists of five overlapping
    digraphs (`AB`, `BC`, `CD`, `DE`, and `EF`). In the context of a digraph substitution,
    we should consider nonoverlapping pairs only. `ABCDEF` consists of three of these:
    `AB`, `CD`, and `EF`. Mathematically speaking, if there is an even number of *n*
    letters in a text, there are *n –* 1 overlapping digraphs and *n*/2 nonoverlapping
    ones.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以对双字母进行频率计数，帮助判断算法是Playfair密码、另一种双字母系统、换位密码、多表代换密码，还是其他类型。然而，这里使用的双字母频率计数方法不同于我们在[第4章](c04.xhtml)中应用的方法，在第4章中我们计算了重叠对。比如，字符串`ABCDEF`包含五个重叠的双字母对（`AB`，`BC`，`CD`，`DE`，和`EF`）。在双字母替换的情况下，我们只应考虑非重叠的对。`ABCDEF`包含三对非重叠的双字母：`AB`，`CD`，和`EF`。从数学角度来看，如果文本中有偶数个*n*个字母，那么将有*n-1*个重叠的双字母对和*n*/2个非重叠的双字母对。
- en: '[Figure 12-4](#figure12-4) shows a (nonoverlapping) digraph frequency analysis
    of our cryptogram, followed by a digraph frequency analysis of the same plaintext
    encrypted in a Vigenère cipher. We used [https://dcode.fr/en](https://dcode.fr/en)
    to count the letter pairs and Excel to plot the diagrams. Note that there are
    only about 220 different pairs in the digraph cryptogram, while there are some
    380 in the Vigenère cryptogram.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[图12-4](#figure12-4)展示了我们密码的（非重叠）双字母频率分析，接着是用维吉尼亚密码加密的相同明文的双字母频率分析。我们使用了[https://dcode.fr/en](https://dcode.fr/en)来统计字母对，并用Excel绘制了图表。需要注意的是，双字母密码图案中只有大约220个不同的字母对，而维吉尼亚密码中有大约380个不同的字母对。'
- en: The lower part of the diagram also shows that only a few letter pairs in the
    Vigenère cryptogram have a frequency of over 1%, while in the upper part, we see
    some twenty-five of these in the digraph substitution cryptogram, with the most
    frequent one almost reaching 4%.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图表的下部还显示，只有少数几个字母对在维吉尼亚密码图案中频率超过1%，而在上部，我们可以看到大约二十五个此类字母对出现在双字母替换密码图案中，其中最常见的一个接近4%。
- en: It is worth noting that, even in longer English texts, the plaintexts will show
    properties of only having about three hundred different digraphs, regardless of
    whether we count overlapping digraphs or not. All other possible digraphs (of
    the 676 total) would probably have a frequency of zero. This is because, in English,
    many letter pairs such as *QZ*, *VH*, *II*, and *JN* are extremely rare.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，即使在较长的英语文本中，明文也只会展示出大约三百种不同的双字母组合，无论我们是否统计重叠的双字母。这是因为在英语中，许多字母对如*QZ*、*VH*、*II*和*JN*极为罕见。
- en: All in all, the risk of confusing a digraph substitution with another cipher
    is not very high if one compares the frequency counts of nonoverlapping digraphs.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，如果将非重叠双字母频率统计与另一种密码进行比较，混淆双字母替换与其他密码的风险并不高。
- en: '![](image_fi/502727c12/f12004.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c12/f12004.png)'
- en: 'Figure 12-4: Two frequency distribution charts using nonoverlapping digraphs.
    The pattern for our digraph substitution cryptogram (top) looks different from
    that of a Vigenère ciphertext (bottom) because fewer digraphs appear, while the
    frequencies of the most common digraphs are much higher (above 3.0).'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图12-4：使用非重叠双字母的两个频率分布图。我们的双字母替换密码图案（上方）与维吉尼亚密码图案（下方）看起来不同，因为出现的双字母较少，而最常见的双字母频率要高得多（超过3.0）。
- en: How to detect a Playfair cipher
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何检测Playfair密码
- en: How can we check whether a certain cryptogram has been created with a Playfair
    cipher? As an example, consider a message sent in World War II. During the war,
    the US Navy and the United States’ allies used the Playfair cipher frequently
    for tactical communication in the Pacific. One story involves *PT-109*, a patrol
    torpedo boat commanded by the young naval officer and later president, John F.
    Kennedy.^([5](b06.xhtml#c12-endnote-5)) After the much larger Japanese destroyer
    *Amagiri* crashed into *PT-109*, slicing it in half and sinking it, the American
    crew swam for miles and finally washed up on the beach of nearby Plum Pudding
    Island.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何检查某个密码是否是用Playfair密码创建的呢？举个例子，考虑一下二战时期发送的消息。在战争期间，美国海军及其盟友频繁使用Playfair密码进行太平洋战区的战术通信。有一个故事涉及*PT-109*，一艘由年轻海军军官、后来的总统约翰·F·肯尼迪指挥的巡逻鱼雷艇。^([5](b06.xhtml#c12-endnote-5))
    在更大的日本驱逐舰*天霧*与*PT-109*相撞，将其一分为二并击沉后，美国船员游了好几英里，最终冲上了附近布朗布丁岛的海滩。
- en: Australian coastwatcher Sublieutenant Arthur Reginald Evans, who observed the
    crash, received and decrypted multiple messages in Playfair and coordinated a
    rescue effort involving dispatching one of his teams of Solomon Islanders to try
    to find the crew.^([6](b06.xhtml#c12-endnote-6)) At the suggestion of one of his
    team members, Biuku Gasa, Kennedy sent a note (in English) carved into a coconut
    with his pocketknife. We will come back to this story in [Chapter 15](c15.xhtml).
    For now, we are only interested in one of the Playfair messages ([Figure 12-5](#figure12-5))
    sent to Evans, which reported the loss of *PT-109*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 澳大利亚海岸观察员阿瑟·雷金纳德·埃文斯中尉目击了坠机事件，并接收并解密了多条Playfair密码信息，协调了一个营救行动，派遣了他的所罗门群岛团队之一去寻找机组人员。^([6](b06.xhtml#c12-endnote-6))
    在他的一名团队成员比乌库·加萨的建议下，肯尼迪用他的口袋刀在椰子上刻下了一张便条（用英语写的）。我们将在[第15章](c15.xhtml)回到这个故事。现在，我们只关心一条发送给埃文斯的Playfair密码消息（[图12-5](#figure12-5)），它报告了*PT-109*的失踪。
- en: 'The plaintext of this Playfair cryptogram, received at 9:20 am on August 7,
    1943, five days after the crash, is noted on the upper half of the sheet and reproduced
    here:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这份于1943年8月7日上午9:20收到的Playfair密码文本，发生撞机事故后的第五天，明文记录在纸张的上半部分，并在此复原：
- en: '`ELEVEN SURVIVORS PT BOAT ON GROSS IS X HAVE SENT FOOD AND LETTER ADVISING
    SENIOR COME HERE WITHOUT DELAY X WARN AVIATION OF CANOES CROSSING FERGUSON RE`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`ELEVEN SURVIVORS PT BOAT ON GROSS IS X HAVE SENT FOOD AND LETTER ADVISING
    SENIOR COME HERE WITHOUT DELAY X WARN AVIATION OF CANOES CROSSING FERGUSON RE`'
- en: As you can see, this message has 125 letters. The `RE` at the end stands for
    Reginald Evans, while `GROSS IS` means Gross Island (also known as Cross Island
    or Nauru). The `X` represents a period.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这条信息有125个字母。结尾的`RE`代表Reginald Evans，而`GROSS IS`表示Gross Island（也称为Cross
    Island或Nauru）。`X`表示句号。
- en: '![](image_fi/502727c12/f12005.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c12/f12005.png)'
- en: 'Figure 12-5: The Playfair-encrypted message received by the Australian coastwatcher
    Sublieutenant Arthur (“Reg”) Reginald Evans, which reported the loss of *PT-109*
    in World War II'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图12-5：澳大利亚海岸观察员Arthur（“Reg”）Reginald Evans中尉收到的Playfair加密信息，报告了二战期间*PT-109*的失踪。
- en: This message used the key `PHYSICAL EXAMINATION` and an encryption method that
    is almost identical to the standard Playfair technique we saw earlier in this
    chapter, with three minor exceptions. First, pairs of equal letters are not avoided
    by adding an additional letter; instead, they are simply left unchanged. For instance,
    the `TT` in `LETTER` encrypts to a ciphertext `TT`. Second, `J` is used as an
    equivalent of `I` in the ciphertext. Third, the last letter of the message, `E`,
    for “Evans,” being unpaired because of the odd number of letters in the text,
    is left unchanged, without being paired with a padding letter.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个信息使用了密钥`PHYSICAL EXAMINATION`，并采用了几乎与本章早些时候看到的标准Playfair加密技术完全相同的加密方法，只有三个小的例外。首先，成对的相同字母不是通过添加额外的字母来避免的；而是简单地保持不变。例如，`LETTER`中的`TT`加密成密文`TT`。其次，`J`在密文中用作`I`的等价字母。第三，由于文本中字母的数量是奇数，消息的最后一个字母`E`（代表“Evans”）未与任何填充字母配对，而是保持不变。
- en: 'Detecting a Playfair cipher can be quite easy, as it produces messages that
    have a number of very special and easy-to-see properties:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 检测Playfair密码是相对容易的，因为它会产生一些非常特殊且容易识别的特征：
- en: The number of letters in the ciphertext is even.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密文中的字母数量是偶数。
- en: The letter `J` does not appear because it is represented by `I`.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字母`J`没有出现，因为它由`I`表示。
- en: No digraph consists of two letters of the same kind.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有双字母是由相同的字母组成的。
- en: However, all these properties can be hidden easily, as the World War II Playfair
    ciphertext above shows. This message has an uneven number of letters because the
    last one is left unencrypted; it includes a J, which is used as an equivalent
    of `I`; and it has identical digraphs, which are double letters left unchanged
    instead of avoided by the insertion of an `X`. However, in most cases we have
    encountered in practice, the encipherer of a Playfair cryptogram does not take
    these precautions.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，所有这些特征都可以很容易地被隐藏，就像上述二战Playfair密文所展示的那样。这个信息包含奇数个字母，因为最后一个字母没有加密；其中包括了`J`，它被用作`I`的等价字母；并且包含了相同的双字母，它们是未改变的双字母，而不是通过插入`X`来避免的。然而，在我们实际遇到的大多数情况下，Playfair密码的加密者并没有采取这些预防措施。
- en: If these criteria are not sufficient to identify the use of a Playfair cipher,
    we can turn to statistics to learn more. While counting nonoverlapping digraphs
    helps to distinguish digraph substitution from many other ciphers, it doesn’t
    differentiate a Playfair cipher from a general digraph substitution based on a
    26 × 26 chart. To do that, we can perform an ordinary frequency count of the individual
    letters. The frequency distribution of a Playfair cryptogram is flatter—meaning
    that the frequent letters are less frequent, while the rare ones are less rare—than
    that of a simple substitution cipher, but less flat than that of a general digraph
    substitution (see [Figure 12-6](#figure12-6)).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些标准不足以识别Playfair密码的使用，我们可以转向统计方法进一步了解。虽然统计不重叠的双字母有助于区分双字母替代法与许多其他密码，但它并不能将Playfair密码与基于26×26图表的一般双字母替代法区分开。为此，我们可以对单个字母进行普通的频率计数。Playfair密码文本的频率分布较为平坦——意味着常见字母变得不那么常见，而稀有字母也不再那么稀有——相较于简单替代密码，但仍不如一般的双字母替代法那么平坦（见[图12-6](#figure12-6)）。
- en: '![](image_fi/502727c12/f12006.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c12/f12006.png)'
- en: '*[Figure 12-6](#figureanchor12-6):* The frequency distribution of a Playfair
    cryptogram (top) is flatter than the distribution of a simple substitution cipher
    (bottom), but it is not as flat as the distribution of a general digraph substitution
    (middle).'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*[图12-6](#figureanchor12-6):* Playfair 密码文的频率分布（上）比简单替代密码的分布（下）平坦，但又不如一般双字母替代密码的分布（中）那么平坦。'
- en: How to break a digraph substitution
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何破解双字母替代密码
- en: We can break the Playfair cipher, as well as digraph substitution in general,
    quite effectively and without a crib, using a computer program that implements
    hill climbing (see [Chapter 16](c16.xhtml)). In the following sections, we introduce
    a couple of other methods and then focus on one that can be used manually. As
    will become clear, a general digraph substitution is harder to break, requiring
    more ciphertext than a Playfair cipher.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用计算机程序，借助爬山算法（见[第16章](c16.xhtml)），有效地破解 Playfair 密码以及一般的双字母替代密码，且无需使用提示词。接下来的几节中，我们将介绍其他几种方法，并着重讨论一种可以手动使用的方法。正如后文所示，一般的双字母替代密码比
    Playfair 密码更难破解，需要更多的密文。
- en: Frequency analysis
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 频率分析
- en: One way to attack a digraph substitution is to perform digraph frequency analysis
    of the nonoverlapping variant. The most frequent digraphs in the English language
    are *TH*, *HE*, *IN*, and *ER*. A more comprehensive list is available in Appendix
    B. However, this method only works for long cryptograms. You’ll need about 2,000
    letters to get a meaningful digraph frequency chart. Unfortunately, digraph substitution
    cryptograms are rarely this long in practice, so we rarely use frequency analysis
    alone to attack a digraph substitution.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击双字母替代密码的一种方法是对不重叠变体进行双字母频率分析。英语中最常见的双字母是*TH*、*HE*、*IN*和*ER*。一个更全面的列表可以在附录
    B 中找到。然而，这种方法只适用于长密码文。你大约需要 2,000 个字母才能得到有意义的双字母频率图表。不幸的是，在实际中，双字母替代密码文很少有这么长，因此我们很少单独使用频率分析来攻击双字母替代密码。
- en: Dictionary attacks
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字典攻击
- en: If a cryptogram has been created with a Playfair cipher based on a keyword (as
    shown above), we can try a dictionary attack by using a computer program that
    decrypts the cryptogram with one keyword candidate after another until the resulting
    plaintext candidate looks like a meaningful text. To check whether a letter sequence
    looks meaningful, the program can employ a fitness function, as described in [Chapter
    16](c16.xhtml). The keyword candidates can be taken from a dictionary file (i.e.,
    a file that lists all common words of a certain language). There are plenty of
    dictionary files, containing millions of words from many languages, available
    online. We describe an example of a dictionary attack on a Playfair cryptogram
    in the “Success stories” section of this chapter.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个密码文是基于关键字（如上所示）使用 Playfair 密码算法创建的，我们可以通过使用计算机程序进行字典攻击，逐一尝试不同的关键字候选，直到解密后的明文候选看起来像是有意义的文本。为了检查字母序列是否有意义，程序可以使用适应度函数，如在[第16章](c16.xhtml)中所述。关键字候选可以从字典文件中获取（即列出某种语言所有常用词的文件）。有许多字典文件包含来自多种语言的数百万个单词，在线可以轻松找到。我们将在本章的“成功案例”部分描述一个对
    Playfair 密码文进行字典攻击的示例。
- en: Manual attacks
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动攻击
- en: It is definitely possible to break the Playfair cipher without computer support.
    However, it is considerably more difficult than solving a simple substitution
    cipher or a complete columnar transposition cipher—especially if we are dealing
    with a ciphertext that is no longer than, say, 200 letters. Most Playfair messages
    we have encountered are of this kind.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 确实可以在没有计算机支持的情况下破解 Playfair 密码。然而，这比破解简单替代密码或完全列转置密码要困难得多——尤其是当我们处理的密文长度不超过大约
    200 个字母时。我们遇到的大多数 Playfair 密码文都属于这种情况。
- en: Solving a Playfair cryptogram manually usually requires knowing or guessing
    the plaintext equivalents of a few ciphertext digraphs and deriving others from
    those, following a few rules we will introduce here. In doing so, we will reconstruct
    the Playfair matrix used. Of course, this method becomes easier if we have a crib.
    Our success therefore depends on the crib available, the quality of our guesses,
    the length of the ciphertext, and chance.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 手动破解 Playfair 密码文通常需要知道或猜测一些密文双字母对应的明文，并根据这些明文推导出其他的明文，遵循我们将在此介绍的一些规则。这样，我们将重建使用的
    Playfair 矩阵。当然，如果我们有提示词，这个方法会更容易。因此，我们的成功依赖于可用的提示词、我们的猜测质量、密文的长度以及运气。
- en: 'It is important to note that different Playfair matrices may implement the
    same cipher. Generally speaking, a Playfair matrix can be circularly shifted column-wise
    and row-wise without changing the encryption method it defines. For example, the
    following three matrices are equivalent:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，不同的 Playfair 矩阵可能会实现相同的密码。一般来说，一个 Playfair 矩阵可以在列和行上循环位移，而不改变它所定义的加密方法。例如，以下三个矩阵是等效的：
- en: '`S U R P I U R P I S V W X Y Z`'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`S U R P I U R P I S V W X Y Z`'
- en: '`E A B C D A B C D E S U R P I`'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`E A B C D A B C D E S U R P I`'
- en: '`F G H K L G H K L F E A B C D`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`F G H K L G H K L F E A B C D`'
- en: '`M N O Q T N O Q T M F G H K L`'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`M N O Q T N O Q T M F G H K L`'
- en: '`V W X Y Z W X Y Z V M N O Q T`'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`V W X Y Z W X Y Z V M N O Q T`'
- en: It is therefore possible that the matrix we reconstruct while deciphering a
    message is a column-wise and row-wise circularly shifted version of the one the
    message creator used. Once we’ve found a matrix, we can discover the likely original
    orientation by seeing which shift produces a plausible keyword.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们在解码信息时重构的矩阵可能是消息创建者使用的矩阵的列和行循环位移版本。一旦找到一个矩阵，我们可以通过查看哪个位移产生了一个合理的关键词，来发现可能的原始方向。
- en: 'To break a Playfair cipher (in English), we can use a number of rules that
    are derived from weaknesses of this system:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要破解 Playfair 密码（英文版），我们可以使用一些规则，这些规则是从该系统的弱点中衍生出来的：
- en: We mentioned that digraph frequencies are hard to exploit unless a cryptogram
    has thousands of letters. Nevertheless, we might be able to use the fact that
    in English texts, some letter pairs, such as *TH*, *HE*, *IN*, and *ER*, are especially
    frequent, while others, including *QG* and *JN*, are almost nonexistent.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们提到过，双字母频率很难利用，除非密码文本包含成千上万个字母。然而，我们可以利用这样一个事实：在英文文本中，一些字母对，如 *TH*、*HE*、*IN*
    和 *ER*，尤其常见，而其他字母对，如 *QG* 和 *JN*，几乎不存在。
- en: The most frequent tetragraphs (i.e., groups of four letters) in the English
    language are *THER*, *TION*, *ATIO*, and *THAT*. This means that two of the most
    frequent digraphs (*TH* and *ER*) form *THER*, one of the most frequent tetragraphs.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 英文中最常见的四字母组合（即四个字母的组合）是 *THER*、*TION*、*ATIO* 和 *THAT*。这意味着两个最常见的双字母组合（*TH* 和
    *ER*）组成了 *THER*，这是最常见的四字母组合之一。
- en: If *<letter1><letter2>* encrypts to *<letter3><letter4>*, then *<letter2><letter1>*
    will encrypt to *<letter4><letter3>*. For instance, if `AB` encrypts to `XY`,
    then `BA` will encrypt to `YX`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 *<letter1><letter2>* 加密为 *<letter3><letter4>*，那么 *<letter2><letter1>* 将加密为
    *<letter4><letter3>*。例如，如果 `AB` 加密为 `XY`，则 `BA` 会加密为 `YX`。
- en: The most frequent pair of digraphs that is routinely mirrored is *ER*/*RE*,
    followed by *ES*/*SE*.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最常见的双字母组合是 *ER*/*RE*，其次是 *ES*/*SE*。
- en: No letter will ever be encrypted to itself. For instance, `AB` won’t become
    `AY` or `YB`.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有字母会被加密为它自身。例如，`AB` 不会变成 `AY` 或 `YB`。
- en: If *<letter1><letter2>* is replaced with *<letter2><letter3>*, the letters *<letter1><letter2><letter3>*
    will appear in a row or column together in exactly that order. The same is true
    if *<letter1><letter2>* is replaced by *<letter3><letter1>*. For instance, if
    `XY` is replaced with `YZ`, you’ll find the letters `XYZ` in a row or column rather
    than as part of a rectangle. Similarly, if `XY` is replaced with `ZX`, the letters
    `XZY` will be in a row or column in that order.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 *<letter1><letter2>* 被替换为 *<letter2><letter3>*，则字母 *<letter1><letter2><letter3>*
    将按该顺序一起出现在行或列中。如果 *<letter1><letter2>* 被替换为 *<letter3><letter1>*，也会出现相同的情况。例如，如果
    `XY` 被替换为 `YZ`，你会发现字母 `XYZ` 会按顺序出现在行或列中，而不是作为一个矩形的一部分。同样，如果 `XY` 被替换为 `ZX`，字母
    `XZY` 将按该顺序出现在行或列中。
- en: 'If *<letter1>* and *<letter2>* form a rectangle in the Playfair matrix (which
    happens in sixteen of twenty-four cases), the following rule holds: if *<letter1><letter2>*
    encrypts to *<letter3><letter4>*, then *<letter3><letter4>* encrypts to *<letter1><letter2>*.
    For instance, if `A` and `B` form a rectangle, then if `AB` encrypts to `XY`,
    `XY` encrypts to `AB`.'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 *<letter1>* 和 *<letter2>* 在 Playfair 矩阵中形成一个矩形（这发生在二十四个中的十六个案例中），则有以下规则：如果
    *<letter1><letter2>* 加密为 *<letter3><letter4>*，那么 *<letter3><letter4>* 会加密为 *<letter1><letter2>*。例如，如果
    `A` 和 `B` 形成一个矩形，则如果 `AB` 加密为 `XY`，则 `XY` 会加密为 `AB`。
- en: Each letter can only be encrypted to five specific ciphertext letters in any
    Playfair tableau.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个字母在任何 Playfair 表格中只能被加密为五个特定的密文字母。
- en: Letters that appear in a row or column with frequent letters (especially `E`
    and `T`) are more frequent in the ciphertext than others.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与频繁出现的字母（尤其是 `E` 和 `T`）在同一行或列中出现的字母，在密文中比其他字母更常见。
- en: If the Playfair cipher uses a keyword in the way shown above, it is likely that
    the more frequent letters will appear at the top of the square. In many cases,
    the letters `VWXYZ` form the last line because these letters have a low frequency
    (and thus have a low likelihood of occurring in the keyword). The line `UVWXZ`
    is also encountered quite often at the bottom of a matrix, because `Y` is more
    frequent than its neighbors.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 Playfair 密码使用上面展示的关键词，那么更频繁的字母可能会出现在方阵的顶部。许多情况下，字母 `VWXYZ` 形成最后一行，因为这些字母的频率较低（因此它们出现在关键词中的概率较低）。`UVWXZ`
    这一行也很常见出现在矩阵的底部，因为 `Y` 的频率高于它的邻居。
- en: To apply these rules, we’ll now break a Playfair message described in Chapter
    26 of Dorothy L. Sayers’s 1932 crime novel *Have His Carcase* ([Figure 12-7](#figure12-7)).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应用这些规则，我们现在将解密 Dorothy L. Sayers 1932 年犯罪小说《*Have His Carcase*》中的 Playfair
    密码消息（[图12-7](#figure12-7)）。
- en: '![](image_fi/502727c12/f12008.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c12/f12008.png)'
- en: 'Figure 12-7: Dorothy L. Sayers’s 1932 crime novel *Have His Carcase* contains
    a Playfair cryptogram.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图12-7：Dorothy L. Sayers的1932年犯罪小说《*Have His Carcase*》中包含了一个Playfair密码。
- en: 'Here is the encrypted message:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这是加密的消息：
- en: '`XNATNX`'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`XNATNX`'
- en: '`RBEXMG`'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`RBEXMG`'
- en: '`PRBFX ALI MKMG BFFY, MGTSQ IMRRY. ZBZE`'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`PRBFX ALI MKMG BFFY, MGTSQ IMRRY. ZBZE`'
- en: '`FLOX P.M. MSIU FKX FLDYPC FKAP RPD KL DONA`'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`FLOX P.M. MSIU FKX FLDYPC FKAP RPD KL DONA`'
- en: '`FMKPC FM NOR ANXP.`'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`FMKPC FM NOR ANXP.`'
- en: '`SOLFA TGMZ DXL LKKZM VXI BWHNZ MBFFY`'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`SOLFA TGMZ DXL LKKZM VXI BWHNZ MBFFY`'
- en: '`MG. TSQ A NVPD NMM VFYQ. CIU ROGA K.C. RAC`'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`MG. TSQ A NVPD NMM VFYQ. CIU ROGA K.C. RAC`'
- en: '`RRMTN S.B. IF H.P. HNZ ME? SSPXLZ DFAX LRAEL`'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`RRMTN S.B. IF H.P. HNZ ME? SSPXLZ DFAX LRAEL`'
- en: '`TLMK. XATL RPX BM AEBF HS MPIKATL TO`'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`TLMK. XATL RPX BM AEBF HS MPIKATL TO`'
- en: '`HOKCCI HNRY. TYM VDSM SUSSX GAMKR. BG AIL`'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`HOKCCI HNRY. TYM VDSM SUSSX GAMKR. BG AIL`'
- en: '`AXH NZMLF HVUL KNN RAGY QWMCK. MNQS`'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`AXH NZMLF HVUL KNN RAGY QWMCK. MNQS`'
- en: '`TOIL AXFA AN IHMZS RPT HO KFLTIM. IF MTGNLU`'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`TOIL AXFA AN IHMZS RPT HO KFLTIM. IF MTGNLU`'
- en: '`H.M. CLM KLZM AHPE ALF AKMSM, ZULPR FHQ --`'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`H.M. CLM KLZM AHPE ALF AKMSM, ZULPR FHQ --`'
- en: '`CMZT SXS RSMKRS GNKS FVMP RACY OSS QESBH`'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`CMZT SXS RSMKRS GNKS FVMP RACY OSS QESBH`'
- en: '`NAE UZCK CON MGBNRY RMAL RSH NZM, BKTQAP`'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`NAE UZCK CON MGBNRY RMAL RSH NZM, BKTQAP`'
- en: '`MSH NZM TO ILG MELMS NAGMIU KC KC.`'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`MSH NZM TO ILG MELMS NAGMIU KC KC.`'
- en: '`TQKFX BQZ NMEZLI BM ZLFA AYZ MARS UP QOS`'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`TQKFX BQZ NMEZLI BM ZLFA AYZ MARS UP QOS`'
- en: '`KMXBP SUE UMIL PRKBG MSK QD.`'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`KMXBP SUE UMIL PRKBG MSK QD.`'
- en: '`NAP DZMTB N.B. OBE XMG SREFZ DBS AM IMHY`'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`NAP DZMTB N.B. OBE XMG SREFZ DBS AM IMHY`'
- en: '`GAKY R. MULBY M.S. SZLKO GKG LKL GAW`'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`GAKY R. MULBY M.S. SZLKO GKG LKL GAW`'
- en: '`XNTED BHMB XZD NRKZH PSMSKMN A.M. MHIZP`'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`XNTED BHMB XZD NRKZH PSMSKMN A.M. MHIZP`'
- en: '`DK MIM, XNKSAK C KOK MNRL CFL INXF HDA`'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`DK MIM, XNKSAK C KOK MNRL CFL INXF HDA`'
- en: '`GAIQ.`'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`GAIQ.`'
- en: '`GATLM Z DLFA A QPHND MV AK MV MAG C.P.R.`'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`GATLM Z DLFA A QPHND MV AK MV MAG C.P.R.`'
- en: '`XNATNX PD GUN MBKL I OLKA GLDAGA KQB`'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`XNATNX PD GUN MBKL I OLKA GLDAGA KQB`'
- en: '`FTQO SKMX GPDH NW LX SULMY ILLE MKH`'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`FTQO SKMX GPDH NW LX SULMY ILLE MKH`'
- en: '`BEALF MRSK UFHA AKTS.`'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`BEALF MRSK UFHA AKTS.`'
- en: 'Here is the same text broken into digraphs:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是相同文本，按双字母分解：
- en: '`XN AT NX RB EX MG PR BF XA LI`'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`XN AT NX RB EX MG PR BF XA LI`'
- en: '`MK MG BF FY MG TS QI MR RY ZB`'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`MK MG BF FY MG TS QI MR RY ZB`'
- en: '`ZE FL OX PM MS IU FK XF LD YP`'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`ZE FL OX PM MS IU FK XF LD YP`'
- en: '`CF KA PR PD KL DO NA FM KP CF`'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`CF KA PR PD KL DO NA FM KP CF`'
- en: '`MN OR AN XP SO LF AT GM ZD XL`'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`MN OR AN XP SO LF AT GM ZD XL`'
- en: '`LK KZ MV XI BW HN ZM BF FY MG`'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`LK KZ MV XI BW HN ZM BF FY MG`'
- en: '`TS QA NV PD NM MV FY QC IU RO`'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`TS QA NV PD NM MV FY QC IU RO`'
- en: '`GA KC RA CR RM TN SB IF HP HN`'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`GA KC RA CR RM TN SB IF HP HN`'
- en: '`ZM ES SP XL ZD FA XL RA EL TL`'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`ZM ES SP XL ZD FA XL RA EL TL`'
- en: '`MK XA TL RP XB MA EB FH SM PI`'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`MK XA TL RP XB MA EB FH SM PI`'
- en: '`KA TL TO HO KC CI HN RY TY MV`'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`KA TL TO HO KC CI HN RY TY MV`'
- en: '`DS MS US SX GA MK RB GA IL AX`'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`DS MS US SX GA MK RB GA IL AX`'
- en: '`HN ZM LF HV UL KN NR AG YQ WM`'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`HN ZM LF HV UL KN NR AG YQ WM`'
- en: '`CK MN QS TO IL AX FA AN IH MZ`'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`CK MN QS TO IL AX FA AN IH MZ`'
- en: '`SR PT HO KF LT IM IF MT GN LU`'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`SR PT HO KF LT IM IF MT GN LU`'
- en: '`HM CL MK LZ MA HP EA LF AK MS`'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`HM CL MK LZ MA HP EA LF AK MS`'
- en: '`MZ UL PR FH QC MZ TS XS RS MK`'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`MZ UL PR FH QC MZ TS XS RS MK`'
- en: '`RS GN KS FV MP RA CY OS SQ ES`'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`RS GN KS FV MP RA CY OS SQ ES`'
- en: '`BH NA EU ZC KC ON MG BN RY RM`'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`BH NA EU ZC KC ON MG BN RY RM`'
- en: '`AL RS HN ZM BK TQ AP MS HN ZM`'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`AL RS HN ZM BK TQ AP MS HN ZM`'
- en: '`TO IL GM EL MS NA GM IU KC KC`'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`TO IL GM EL MS NA GM IU KC KC`'
- en: '`TQ KF XB QZ NM EZ LI BM ZL FA`'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`TQ KF XB QZ NM EZ LI BM ZL FA`'
- en: '`AY ZM AR SU PQ OS KM XB PS UE`'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`AY ZM AR SU PQ OS KM XB PS UE`'
- en: '`UM IL PR KB GM SK QD NA PD ZM`'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`UM IL PR KB GM SK QD NA PD ZM`'
- en: '`TB NB OB EX MG SR EF ZD BS AM`'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`TB NB OB EX MG SR EF ZD BS AM`'
- en: '`IM HY GA KY RM UL BY MS SZ LK`'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`IM HY GA KY RM UL BY MS SZ LK`'
- en: '`OG KG LK LG AW XN TE DB HM BX`'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`OG KG LK LG AW XN TE DB HM BX`'
- en: '`ZD NR KZ HP SM SK MN AM MH IZ`'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`ZD NR KZ HP SM SK MN AM MH IZ`'
- en: '`PD KM IM XN KS AK CK OK MN RL`'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`PD KM IM XN KS AK CK OK MN RL`'
- en: '`CF LI NX FH DA GA IQ GA TL MZ`'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`CF LI NX FH DA GA IQ GA TL MZ`'
- en: '`DL FA AQ PH ND MV AK MV MA GC`'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`DL FA AQ PH ND MV AK MV MA GC`'
- en: '`PR XN AT NX PD GU NM BK LI OL`'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`PR XN AT NX PD GU NM BK LI OL`'
- en: '`KA GL DA GA KQ BF TQ OS KM XG`'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`KA GL DA GA KQ BF TQ OS KM XG`'
- en: '`PD HN WL XS UL MY IL LE MK HB`'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`PD HN WL XS UL MY IL LE MK HB`'
- en: '`EA LF MR SK UF HA AK TS`'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`EA LF MR SK UF HA AK TS`'
- en: Before we start deciphering, we have to do some statistical analysis. The ciphertext
    has 696 letters. [Figure 12-8](#figure12-8) shows the letter and nonoverlapping
    digraph frequencies. `M` is the most frequent character in the cryptogram. This
    suggests that it is in a line or column with `E`, the most frequent letter of
    the English language.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始解码之前，需要做一些统计分析。密文中有696个字母。[图12-8](#figure12-8)展示了字母和不重叠的字母二重组频率。`M`是密文中最频繁的字符。这表明它位于一行或一列中，与`E`（英语中最频繁的字母）一起。
- en: '![](image_fi/502727c12/f12007.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c12/f12007.png)'
- en: 'Figure 12-8: Frequency analysis of the letters (top) and the digraphs (bottom)
    in the Playfair cryptogram described in Dorothy L. Sayers’s 1932 crime novel *Have
    His Carcase*'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图12-8：在多萝西·L·赛尔斯1932年犯罪小说《*有尸体*》中描述的普莱菲尔密码中，字母（上）和字母二重组（下）的频率分析
- en: 'The most frequent reversible letter pairs appearing in the ciphertext are the
    following:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 出现在密文中的最频繁的可逆字母对如下：
- en: '`ZM`/`MZ` appears seven and four times, respectively.'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ZM`/`MZ`分别出现了七次和四次。'
- en: '`MK`/`KM` appears six and three times, respectively.'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MK`/`KM`分别出现了六次和三次。'
- en: '`IL`/`LI` appears five and four times, respectively.'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`IL`/`LI`分别出现了五次和四次。'
- en: 'It is possible to solve a Playfair cryptogram by applying only the rules mentioned
    so far. However, doing so requires a lot of trial and error—a procedure that is
    too lengthy and complex to document in this book. To make things a little easier,
    we’ll assume that we have some information about the contents of the text. Researching
    the context in which a cipher message was created can be a powerful tool. In this
    example, we learn the following:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 通过仅应用到目前为止提到的规则，我们是有可能解决普莱菲尔密码的。然而，这样做需要大量的反复试验——这是一个过于冗长和复杂的过程，无法在本书中详细记录。为了稍微简化问题，我们假设我们对文本内容有一些信息。研究密码消息创建时的上下文可以成为一个强有力的工具。在这个例子中，我们了解到以下信息：
- en: This message was sent from Warsaw, Poland.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这条信息是从波兰华沙发出的。
- en: A treaty concluded with Poland might be mentioned.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与波兰签订的条约可能会被提及。
- en: The recipient of the message is usually addressed as “His Serene Highness.”
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息的接收人通常被称为“他的宁静殿下”。
- en: 'This information delivers us a few cribs. For instance, the first line of the
    cryptogram consists of only six letters: `XN AT NX`. Note that the third letter
    pair is the reverse of the first one, which means that its plaintext representation
    is a reversed version of the other, too. Because the letter was sent from Warsaw,
    it appears that `WARSAW` is a potential match. So, let’s use `WARSAW` as a first
    crib. If our guess is correct, we can conclude the following:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息给我们提供了一些破解线索。例如，密文的第一行仅由六个字母组成：`XN AT NX`。注意，第三个字母对是第一个字母对的反向，这意味着它的明文表示也是反转的。由于信件是从华沙发出的，因此`WARSAW`（华沙）是一个潜在的匹配。所以，我们将`WARSAW`作为第一个线索。如果我们的猜测正确，我们可以得出以下结论：
- en: '`WA` = `XN`'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`WA` = `XN`'
- en: '`RS` = `AT`'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`RS` = `AT`'
- en: '`AW` = `NX`'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`AW` = `NX`'
- en: 'Moreover, by reversing the letter pair of the second statement, we get this:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，通过反转第二个语句中的字母对，我们得到以下内容：
- en: '`SR` = `TA`'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`SR` = `TA`'
- en: 'The digraphs `XN AT NX` (`WARSAW`) appear again on line 32 of the ciphertext.
    Before it, we find the letter pair `PR`. With five appearances, `PR` is one of
    the twelve most frequent digraphs in the ciphertext. What does it stand for? Possibilities
    like `THWARSAW`, `ENWARSAW`, `ERWARSAW`, and `ONWARSAW`, as well as a few other
    guesses based on letter pair frequencies, are unlikely. The most plausible option
    is `TOWARSAW`, which gives us the following:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 字母对`XN AT NX`（`WARSAW`）在密文的第32行再次出现。在它之前，我们找到了字母对`PR`。`PR`出现了五次，是密文中最频繁的十二个字母对之一。那么它代表什么呢？像`THWARSAW`、`ENWARSAW`、`ERWARSAW`、`ONWARSAW`等可能性，以及一些其他基于字母对频率的猜测，似乎都不太可能。最合理的选择是`TOWARSAW`，这给了我们以下结果：
- en: '`TO` = `PR`'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`TO` = `PR`'
- en: 'Again, we gain another mapping by reversing the letters:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们通过反转字母获得另一个映射：
- en: '`OT` = `RP`'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`OT` = `RP`'
- en: 'Based on rule 7 for breaking Playfair messages, listed earlier in this chapter,
    we can assume that the following six statement pairs are most likely correct.
    These mappings result from switching the plaintext and ciphertext in the statements
    we already know, and each has a probability of sixteen in twenty-four (or 66.6%)
    of being correct:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 根据本章前面列出的破译普莱菲尔信息的第7条规则，我们可以假设以下六个语句对最可能是正确的。这些映射结果来自于我们已经知道的语句中交换明文和密文的过程，每个都有16/24（或66.6%）的概率是正确的：
- en: '`XN` = `WA`'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`XN` = `WA`'
- en: '`NX` = `AW`'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`NX` = `AW`'
- en: '`AT` = `RS`'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`AT` = `RS`'
- en: '`TA` = `SR`'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`TA` = `SR`'
- en: '`PR` = `TO`'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`PR` = `TO`'
- en: '`RP` = `OT`'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`RP` = `OT`'
- en: To check if these mappings are plausible, we can look at their frequencies.
    `WA` doesn’t appear in the ciphertext, so we don’t have to worry about it. `AW`
    appears once; at the moment, we can’t say whether it really stands for `NX`, but
    `NX` is a plausible digraph, provided that the letter `X` was used to separate
    pairs of equal letters. Furthermore, `AT` = `RS` and `TA` = `SR` are plausible
    because `RS` appears three times in the ciphertext, as expected for the ciphertext
    equivalent of the common letter pair `AT`. It is hard to say whether `PR` = `TO`
    and `RP` = `OT` make sense, but to keep things simple, we take it as given that
    they do. (In real life, further analysis would be necessary to confirm this.)
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查这些映射是否合理，我们可以查看它们的频率。`WA`在密文中没有出现，所以我们不必担心。`AW`出现了一次；目前我们无法确定它是否真正代表`NX`，但`NX`是一个合理的二字母组合，前提是字母`X`用于分隔相同字母对。此外，`AT`
    = `RS`和`TA` = `SR`是合理的，因为`RS`在密文中出现了三次，正如预期的那样，这符合了常见字母对`AT`的密文等价物。至于`PR` = `TO`和`RP`
    = `OT`是否有意义，目前很难说，但为了简化起见，我们假设它们是合理的。（在现实生活中，进一步的分析是必要的，以确认这一点。）
- en: 'In conclusion, we assume that all of these mappings are correct. Now, we fill
    in the letter pairs we have guessed so far:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，我们假设所有这些映射都是正确的。现在，我们填入已经猜测出来的字母对：
- en: '`XN AT NX RB EX MG PR BF XA LI`'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`XN AT NX RB EX MG PR BF XA LI`'
- en: '`WA RS AW TO`'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`WA RS AW TO`'
- en: '`MK MG BF FY MG TS QI MR RY ZB`'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`MK MG BF FY MG TS QI MR RY ZB`'
- en: '`ZE FL OX PM MS IU FK XF LD YP`'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`ZE FL OX PM MS IU FK XF LD YP`'
- en: '`CF KA PR PD KL DO NA FM KP CF`'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`CF KA PR PD KL DO NA FM KP CF`'
- en: '`TO`'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`TO`'
- en: '`MN OR AN XP SO LF AT GM ZD XL`'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`MN OR AN XP SO LF AT GM ZD XL`'
- en: '`RS`'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`RS`'
- en: '`LK KZ MV XI BW HN ZM BF FY MG`'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`LK KZ MV XI BW HN ZM BF FY MG`'
- en: '`TS QA NV PD NM MV FY QC IU RO`'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`TS QA NV PD NM MV FY QC IU RO`'
- en: '`GA KC RA CR RM TN SB IF HP HN`'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`GA KC RA CR RM TN SB IF HP HN`'
- en: '`ZM ES SP XL ZD FA XL RA EL TL`'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`ZM ES SP XL ZD FA XL RA EL TL`'
- en: '`MK XA TL RP XB MA EB FH SM PI`'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`MK XA TL RP XB MA EB FH SM PI`'
- en: '`OT`'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`OT`'
- en: '`KA TL TO HO KC CI HN RY TY MV`'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`KA TL TO HO KC CI HN RY TY MV`'
- en: '`PR`'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`PR`'
- en: '`DS MS US SX GA MK RB GA IL AX`'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`DS MS US SX GA MK RB GA IL AX`'
- en: '`HN ZM LF HV UL KN NR AG YQ WM`'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`HN ZM LF HV UL KN NR AG YQ WM`'
- en: '`CK MN QS TO IL AX FA AN IH MZ`'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`CK MN QS TO IL AX FA AN IH MZ`'
- en: '`PR`'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`PR`'
- en: '`SR PT HO KF LT IM IF MT GN LU`'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`SR PT HO KF LT IM IF MT GN LU`'
- en: '`TA`'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`TA`'
- en: '`HM CL MK LZ MA HP EA LF AK MS`'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`HM CL MK LZ MA HP EA LF AK MS`'
- en: '`MZ UL PR FH QC MZ TS XS RS MK`'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`MZ UL PR FH QC MZ TS XS RS MK`'
- en: '`TO AT`'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`TO AT`'
- en: '`RS GN KS FV MP RA CY OS SQ ES`'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`RS GN KS FV MP RA CY OS SQ ES`'
- en: '`AT`'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`AT`'
- en: '`BH NA EU ZC KC ON MG BN RY RM`'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`BH NA EU ZC KC ON MG BN RY RM`'
- en: '`AL RS HN ZM BK TQ AP MS HN ZM`'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`AL RS HN ZM BK TQ AP MS HN ZM`'
- en: '`AT`'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`AT`'
- en: '`TO IL GM EL MS NA GM IU KC KC`'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`TO IL GM EL MS NA GM IU KC KC`'
- en: '`PR`'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`PR`'
- en: '`TQ KF XB QZ NM EZ LI BM ZL FA`'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`TQ KF XB QZ NM EZ LI BM ZL FA`'
- en: '`AY ZM AR SU PQ OS KM XB PS UE`'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`AY ZM AR SU PQ OS KM XB PS UE`'
- en: '`UM IL PR KB GM SK QD NA PD ZM`'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`UM IL PR KB GM SK QD NA PD ZM`'
- en: '`TO`'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`TO`'
- en: '`TB NB OB EX MG SR EF ZD BS AM`'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`TB NB OB EX MG SR EF ZD BS AM`'
- en: '`TA`'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`TA`'
- en: '`IM HY GA KY RM UL BY MS SZ LK`'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`IM HY GA KY RM UL BY MS SZ LK`'
- en: '`OG KG LK LG AW XN TE DB HM BX`'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`OG KG LK LG AW XN TE DB HM BX`'
- en: '`NX WA`'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`NX WA`'
- en: '`ZD NR KZ HP SM SK MN AM MH IZ`'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`ZD NR KZ HP SM SK MN AM MH IZ`'
- en: '`PD KM IM XN KS AK CK OK MN RL`'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`PD KM IM XN KS AK CK OK MN RL`'
- en: '`WA`'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`WA`'
- en: '`CF LI NX FH DA GA IQ GA TL MZ`'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`CF LI NX FH DA GA IQ GA TL MZ`'
- en: '`AW`'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`AW`'
- en: '`DL FA AQ PH ND MV AK MV MA GC`'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`DL FA AQ PH ND MV AK MV MA GC`'
- en: '`PR XN AT NX PD GU NM BK LI OL`'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`PR XN AT NX PD GU NM BK LI OL`'
- en: '`TO WA RS AW`'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`TO WA RS AW`'
- en: '`KA GL DA GA KQ BF TQ OS KM XG`'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`KA GL DA GA KQ BF TQ OS KM XG`'
- en: '`PD HN WL XS UL MY IL LE MK HB`'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`PD HN WL XS UL MY IL LE MK HB`'
- en: '`EA LF MR SK UF HA AK TS`'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`EA LF MR SK UF HA AK TS`'
- en: 'These known letter pairs are not sufficient to reconstruct complete words.
    Additional guesses are necessary, and admittedly, this is not an easy task. The
    following sequence (starting on line 17 of the cryptogram) might be helpful: `RS
    MK RS`, which decrypts to `AT**AT`. Remember that `MK` is an especially frequent
    reversible letter pair in our ciphertext. Does it stand for `RE`, the most common
    reversible letter pair in the English language? If so, we get `ATREAT`, which
    might stand for a `TREATY`. Remember that `TREATY` is a word we expect to appear
    in the plaintext. The new guess gives us this:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 这些已知的字母对不足以重建完整的单词。需要额外的猜测，坦率说，这不是一件容易的任务。以下的序列（从密文第17行开始）可能会有所帮助：`RS MK RS`，解密为`AT**AT`。记住，`MK`是我们密文中一个特别频繁的可逆字母对。它代表的是`RE`，即英语中最常见的可逆字母对吗？如果是这样，我们得到`ATREAT`，可能代表一个`TREATY`。记住，`TREATY`是我们期望在明文中出现的一个单词。新的猜测给了我们这个：
- en: '`RE` = `MK` and `ER` = `KM`'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`RE` = `MK` and `ER` = `KM`'
- en: 'Assuming that we have identified the word `TREATY`, we could plausibly guess
    that the phrase `WITH POLAND` follows it. Remember that we know that the plaintext
    might mention a treaty with Poland. This means that `RS MK RS GN KS FV MP RA`
    could stand for `AT RE AT YW IT HP OL AN`, giving us the following pairings (including
    their reversed versions):'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经识别出了单词 `TREATY`，我们可以合理猜测接下来的短语是 `WITH POLAND`。记住，我们知道明文中可能会提到与波兰的条约。这意味着
    `RS MK RS GN KS FV MP RA` 可能代表 `AT RE AT YW IT HP OL AN`，从而得到以下配对（包括它们的反向版本）：
- en: '`YW` = `GN` and `WY` = `NG`'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`YW` = `GN` 和 `WY` = `NG`'
- en: '`IT` = `KS` and `TI` = `SK`'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`IT` = `KS` 和 `TI` = `SK`'
- en: '`HP` = `FV` and `PH` = `VF`'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`HP` = `FV` 和 `PH` = `VF`'
- en: '`OL` = `MP` and `LO` = `PM`'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`OL` = `MP` 和 `LO` = `PM`'
- en: '`AN` = `RA` and `NA` = `AR`'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`AN` = `RA` 和 `NA` = `AR`'
- en: 'The last substitution pair (`AN` = `RA` and `NA` =`AR`) also indicates that
    one line or column of the substitution table contains the letters `NAR`, in that
    order (according to rule 6). Here’s our next look at the ciphertext and the plaintext
    parts we already know:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的替换对 (`AN` = `RA` 和 `NA` = `AR`) 也表明替换表的一行或一列包含字母 `NAR`，按照规则 6。这里是我们对密码文本的下一次查看，并且我们已经知道的明文部分：
- en: '`XN AT NX RB EX MG PR BF XA LI`'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`XN AT NX RB EX MG PR BF XA LI`'
- en: '`WA RS AW TO`'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`WA RS AW TO`'
- en: '`MK MG BF FY MG TS QI MR RY ZB`'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`MK MG BF FY MG TS QI MR RY ZB`'
- en: '`RE`'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`RE`'
- en: '`ZE FL OX PM MS IU FK XF LD YP`'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`ZE FL OX PM MS IU FK XF LD YP`'
- en: '`LO`'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`LO`'
- en: '`CF KA PR PD KL DO NA FM KP CF`'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`CF KA PR PD KL DO NA FM KP CF`'
- en: '`TO ON`'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`TO ON`'
- en: '`MN OR AN XP SO LF AT GM ZD XL`'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`MN OR AN XP SO LF AT GM ZD XL`'
- en: '`NO PA RS`'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`NO PA RS`'
- en: '`LK KZ MV XI BW HN ZM BF FY MG`'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`LK KZ MV XI BW HN ZM BF FY MG`'
- en: '`TS QA NV PD NM MV FY QC IU RO`'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`TS QA NV PD NM MV FY QC IU RO`'
- en: '`GA KC RA CR RM TN SB IF HP HN`'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`GA KC RA CR RM TN SB IF HP HN`'
- en: '`ED AN`'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '`ED AN`'
- en: '`ZM ES SP XL ZD FA XL RA EL TL`'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`ZM ES SP XL ZD FA XL RA EL TL`'
- en: '`IL AN`'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '`IL AN`'
- en: '`MK XA TL RP XB MA EB FH SM PI`'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`MK XA TL RP XB MA EB FH SM PI`'
- en: '`RE OT`'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`RE OT`'
- en: '`KA TL TO HO KC CI HN RY TY MV`'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`KA TL TO HO KC CI HN RY TY MV`'
- en: '`PR ED`'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`PR ED`'
- en: '`DS MS US SX GA MK RB GA IL AX`'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`DS MS US SX GA MK RB GA IL AX`'
- en: '`RE`'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`RE`'
- en: '`HN ZM LF HV UL KN NR AG YQ WM`'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`HN ZM LF HV UL KN NR AG YQ WM`'
- en: '`CK MN QS TO IL AX FA AN IH MZ`'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`CK MN QS TO IL AX FA AN IH MZ`'
- en: '`SR PT HO KF LT IM IF MT GN LU`'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`SR PT HO KF LT IM IF MT GN LU`'
- en: '`TA YW`'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`TA YW`'
- en: '`HM CL MK LZ MA HP EA LF AK MS`'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`HM CL MK LZ MA HP EA LF AK MS`'
- en: '`RE`'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`RE`'
- en: '`MZ UL PR FH QC MZ TS XS RS MK`'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`MZ UL PR FH QC MZ TS XS RS MK`'
- en: '`TO AT RE`'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`TO AT RE`'
- en: '`RS GN KS FV MP RA CY OS SQ ES`'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '`RS GN KS FV MP RA CY OS SQ ES`'
- en: '`AT YW IT HP OL AN`'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`AT YW IT HP OL AN`'
- en: '`BH NA EU ZC KC ON MG BN RY RM`'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`BH NA EU ZC KC ON MG BN RY RM`'
- en: '`AL RS HN ZM BK TQ AP MS HN ZM`'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`AL RS HN ZM BK TQ AP MS HN ZM`'
- en: '`AT`'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '`AT`'
- en: '`TO IL GM EL MS NA GM IU KC KC`'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`TO IL GM EL MS NA GM IU KC KC`'
- en: '`PR`'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`PR`'
- en: '`TQ KF XB QZ NM EZ LI BM ZL FA`'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`TQ KF XB QZ NM EZ LI BM ZL FA`'
- en: '`AY ZM AR SU PQ OS KM XB PS UE`'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`AY ZM AR SU PQ OS KM XB PS UE`'
- en: '`NA ER`'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`NA ER`'
- en: '`UM IL PR KB GM SK QD NA PD ZM`'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`UM IL PR KB GM SK QD NA PD ZM`'
- en: '`TO TI ON`'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '`TO TI ON`'
- en: '`TB NB OB EX MG SR EF ZD BS AM`'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '`TB NB OB EX MG SR EF ZD BS AM`'
- en: '`TA`'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`TA`'
- en: '`IM HY GA KY RM UL BY MS SZ LK`'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '`IM HY GA KY RM UL BY MS SZ LK`'
- en: '`OG KG LK LG AW XN TE DB HM BX`'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`OG KG LK LG AW XN TE DB HM BX`'
- en: '`NX WA`'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '`NX WA`'
- en: '`ZD NR KZ HP SM SK MN AM MH IZ`'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '`ZD NR KZ HP SM SK MN AM MH IZ`'
- en: '`TI`'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '`TI`'
- en: '`PD KM IM XN KS AK CK OK MN RL`'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '`PD KM IM XN KS AK CK OK MN RL`'
- en: '`ER WA IT`'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '`ER WA IT`'
- en: '`CF LI NX FH DA GA IQ GA TL MZ`'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`CF LI NX FH DA GA IQ GA TL MZ`'
- en: '`AW`'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '`AW`'
- en: '`DL FA AQ PH ND MV AK MV MA GC`'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`DL FA AQ PH ND MV AK MV MA GC`'
- en: '`PR XN AT NX PD GU NM BK LI OL`'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`PR XN AT NX PD GU NM BK LI OL`'
- en: '`TO WA RS AW`'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`TO WA RS AW`'
- en: '`KA GL DA GA KQ BF TQ OS KM XG`'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '`KA GL DA GA KQ BF TQ OS KM XG`'
- en: '`AP ER`'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`AP ER`'
- en: '`PD HN WL XS UL MY IL LE MK HB`'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`PD HN WL XS UL MY IL LE MK HB`'
- en: '`RE`'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '`RE`'
- en: '`EA LF MR SK UF HA AK TS`'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`EA LF MR SK UF HA AK TS`'
- en: '`TI`'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '`TI`'
- en: 'Now, we extend `APER` to `PAPER`, a plausible word in a diplomatic message.
    But which letter comes before `P`? In other words, what is the `*` in `*P` = `TQ`?
    Because `TQ` appears three times in the cryptogram, we can almost be sure that
    the missing letter is `S`, producing `SP` = `TQ`, as `SP` is the most frequent
    letter pair ending with a `P` in English. Including the reverse pairing, we get
    this:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将 `APER` 扩展为 `PAPER`，这是一个在外交消息中合理的单词。那么，哪个字母出现在 `P` 前面呢？换句话说，`*P` = `TQ`
    中的 `*` 是什么？因为 `TQ` 在密码中出现了三次，我们几乎可以确定缺失的字母是 `S`，从而得到 `SP` = `TQ`，因为 `SP` 是以 `P`
    结尾的英语中最常见的字母组合。包括反向组合，我们得到以下结果：
- en: '`SP` = `TQ` and `PS` = `QT`'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '`SP` = `TQ` 和 `PS` = `QT`'
- en: What might come before `SPAPERS`? The best option looks to be `HIS PAPERS`,
    giving us `HI` = `BF` and the reverse, `IH` = `FB`. The expression `PA**RS` in
    the fifth line of the ciphertext might also stand for `PAPERS`, which gives us
    the statements `PE` = `LF` and `EP` = `FL`.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 可能出现在 `SPAPERS` 前面的是什么呢？最佳的选项似乎是 `HIS PAPERS`，这给我们 `HI` = `BF` 和反向 `IH` = `FB`。密码文本第五行的表达式
    `PA**RS` 也可能代表 `PAPERS`，这给我们 `PE` = `LF` 和 `EP` = `FL`。
- en: Now, recall our third crib. Say we know that the expression `HIS SERENE HIGHNESS`
    usually appears early in the letter. In this case, it probably follows the word
    `TO` in the first line. Including the reversed versions, this crib reveals the
    statements `SX` = `XA`, `XS` = `AX`, `SE` = `LI`, `ES` = `IL`, `NE` = `MG`, `EN`
    = `GM`, `GH` = `FY`, and `HG` = `YF`.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回想一下我们的第三个线索。假设我们知道表达式`HIS SERENE HIGHNESS`通常出现在信件的开头。在这种情况下，它可能跟在第一行的`TO`之后。包括反向版本，这个线索揭示了陈述`SX`
    = `XA`，`XS` = `AX`，`SE` = `LI`，`ES` = `IL`，`NE` = `MG`，`EN` = `GM`，`GH` = `FY`，和`HG`
    = `YF`。
- en: 'According to rule 6, the statement `SX` = `XA` indicates that the letters `SXA`
    are found in a row or line of the Playfair matrix, in this order, and without
    any other letter in between. Remember that we also identified the letter sequence
    `NAR` as belonging to a line or row. Because both triples contain an `A`, we can
    reconstruct the following part of the matrix:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 根据规则6，陈述`SX` = `XA`表示字母`SXA`以这种顺序出现在Playfair矩阵的一行或一列中，中间没有其他字母。记住，我们还识别出了字母序列`NAR`属于一行或一列。因为这两个三重字母都包含字母`A`，我们可以重构矩阵的以下部分：
- en: '`S`'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '`S`'
- en: '`X`'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '`X`'
- en: '`NAR`'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '`NAR`'
- en: 'Combining this with the statements `WA` = `XN` and `RS` = `AT`, which we already
    know, we get the following:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 将其与我们已知的陈述`WA` = `XN` 和 `RS` = `AT`结合，我们得到如下结果：
- en: '`ST`'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '`ST`'
- en: '`WX`'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '`WX`'
- en: '`NAR`'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '`NAR`'
- en: 'Let’s now apply our newly detected statements to the ciphertext:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将新检测到的陈述应用到密文中：
- en: '`XN AT NX RB EX MG PR BF XA LI`'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`XN AT NX RB EX MG PR BF XA LI`'
- en: '`WA RS AW NE TO HI SX SE`'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '`WA RS AW NE TO HI SX SE`'
- en: '`MK MG BF FY MG TS QI MR RY ZB`'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '`MK MG BF FY MG TS QI MR RY ZB`'
- en: '`RE NE HI GH NE`'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '`RE NE HI GH NE`'
- en: '`ZE FL OX PM MS IU FK XF LD YP`'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '`ZE FL OX PM MS IU FK XF LD YP`'
- en: '`EP LO`'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '`EP LO`'
- en: '`CF KA PR PD KL DO NA FM KP CF`'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '`CF KA PR PD KL DO NA FM KP CF`'
- en: '`TO ON`'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '`TO ON`'
- en: '`MN OR AN XP SO LF AT GM ZD XL`'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '`MN OR AN XP SO LF AT GM ZD XL`'
- en: '`NO PA PE RS EN`'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '`NO PA PE RS EN`'
- en: '`LK KZ MV XI BW HN ZM BF FY MG`'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '`LK KZ MV XI BW HN ZM BF FY MG`'
- en: '`HI GH NE`'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '`HI GH NE`'
- en: '`TS QA NV PD NM MV FY QC IU RO`'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '`TS QA NV PD NM MV FY QC IU RO`'
- en: '`GH`'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '`GH`'
- en: '`GA KC RA CR RM TN SB IF HP HN`'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '`GA KC RA CR RM TN SB IF HP HN`'
- en: '`ED AN`'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '`ED AN`'
- en: '`ZM ES SP XL ZD FA XL RA EL TL`'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '`ZM ES SP XL ZD FA XL RA EL TL`'
- en: '`AN`'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '`AN`'
- en: '`MK XA TL RP XB MA EB FH SM PI`'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`MK XA TL RP XB MA EB FH SM PI`'
- en: '`RE SX OT`'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '`RE SX OT`'
- en: '`KA TL TO HO KC CI HN RY TY MV`'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '`KA TL TO HO KC CI HN RY TY MV`'
- en: '`PR ED`'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '`PR ED`'
- en: '`DS MS US SX GA MK RB GA IL AX`'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '`DS MS US SX GA MK RB GA IL AX`'
- en: '`RE ES SX`'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`RE ES SX`'
- en: '`HN ZM LF HV UL KN NR AG YQ WM`'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '`HN ZM LF HV UL KN NR AG YQ WM`'
- en: '`PE`'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '`PE`'
- en: '`CK MN QS TO IL AX FA AN IH MZ`'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '`CK MN QS TO IL AX FA AN IH MZ`'
- en: '`ES SX`'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '`ES SX`'
- en: '`SR PT HO KF LT IM IF MT GN LU`'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '`SR PT HO KF LT IM IF MT GN LU`'
- en: '`TA YW`'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '`TA YW`'
- en: '`HM CL MK LZ MA HP EA LF AK MS`'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '`HM CL MK LZ MA HP EA LF AK MS`'
- en: '`RE PE`'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`RE PE`'
- en: '`MZ UL PR FH QC MZ TS XS RS MK`'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '`MZ UL PR FH QC MZ TS XS RS MK`'
- en: '`TO AT RE`'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '`TO AT RE`'
- en: '`RS GN KS FV MP RA CY OS SQ ES`'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '`RS GN KS FV MP RA CY OS SQ ES`'
- en: '`AT YW IT HP OL AN`'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '`AT YW IT HP OL AN`'
- en: '`BH NA EU ZC KC ON MG BN RY RM`'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '`BH NA EU ZC KC ON MG BN RY RM`'
- en: '`ON NE`'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '`ON NE`'
- en: '`AL RS HN ZM BK TQ AP MS HN ZM`'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '`AL RS HN ZM BK TQ AP MS HN ZM`'
- en: '`AT SP`'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '`AT SP`'
- en: '`TO IL GM EL MS NA GM IU KC KC`'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '`TO IL GM EL MS NA GM IU KC KC`'
- en: '`PR ES EN ON EN`'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '`PR ES EN ON EN`'
- en: '`TQ KF XB QZ NM EZ LI BM ZL FA`'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '`TQ KF XB QZ NM EZ LI BM ZL FA`'
- en: '`SP SE`'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '`SP SE`'
- en: '`AY ZM AR SU PQ OS KM XB PS UE`'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '`AY ZM AR SU PQ OS KM XB PS UE`'
- en: '`NA ER`'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '`NA ER`'
- en: '`UM IL PR KB GM SK QD NA PD ZM`'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '`UM IL PR KB GM SK QD NA PD ZM`'
- en: '`ES TO EN TI ON`'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '`ES TO EN TI ON`'
- en: '`TB NB OB EX MG SR EF ZD BS AM`'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '`TB NB OB EX MG SR EF ZD BS AM`'
- en: '`EN TA`'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '`EN TA`'
- en: '`IM HY GA KY RM UL BY MS SZ LK`'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '`IM HY GA KY RM UL BY MS SZ LK`'
- en: '`OG KG LK LG AW XN TE DB HM BX`'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '`OG KG LK LG AW XN TE DB HM BX`'
- en: '`NX WA`'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '`NX WA`'
- en: '`ZD NR KZ HP SM SK MN AM MH IZ`'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '`ZD NR KZ HP SM SK MN AM MH IZ`'
- en: '`TI`'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '`TI`'
- en: '`PD KM IM XN KS AK CK OK MN RL`'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '`PD KM IM XN KS AK CK OK MN RL`'
- en: '`ER WA IT`'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '`ER WA IT`'
- en: '`CF LI NX FH DA GA IQ GA TL MZ`'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '`CF LI NX FH DA GA IQ GA TL MZ`'
- en: '`SE AW`'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '`SE AW`'
- en: '`DL FA AQ PH ND MV AK MV MA GC`'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '`DL FA AQ PH ND MV AK MV MA GC`'
- en: '`PR XN AT NX PD GU NM BK LI OL`'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '`PR XN AT NX PD GU NM BK LI OL`'
- en: '`TO WA RS AW SE`'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '`TO WA RS AW SE`'
- en: '`KA GL DA GA KQ BF TQ OS KM XG`'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '`KA GL DA GA KQ BF TQ OS KM XG`'
- en: '`HI SP AP ER`'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '`HI SP AP ER`'
- en: '`PD HN WL XS UL MY IL LE MK HB`'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '`PD HN WL XS UL MY IL LE MK HB`'
- en: '`ES RE`'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '`ES RE`'
- en: '`EA LF MR SK UF HA AK TS`'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '`EA LF MR SK UF HA AK TS`'
- en: '`PE TI`'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '`PE TI`'
- en: 'For brevity’s sake, we’ll skip the rest of the codebreaking process. In the
    end, we receive the following plaintext:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简便起见，我们将跳过其余的破译过程。最终，我们得到以下明文：
- en: '`WARSAW AD IUNE TO HIS X SERENE HIGHNESQS GRANDX DUKE PAVLO ALEXEIVITCHQ HEIR
    TO THE THRONE OF THE ROMANOVS PAPERS ENTRUSTED TO US BYX YOUR HIGHNESQS NOW THOROUGHLY
    EXAMINED AND MARQRIAGE OF YOUR ILQLUSTRIOUS ANCESTRESXS TO TSAR NICHOLAS FIRST
    PROVED BEYONDQ DOUBT ALXL IS IN READINESXS YOUR PEOPLE GROANING UNDER OPQPRESXSION
    OF BRUTAL SOVIETS EAGERLY WELCOME RETURN OF IMPERIAL RULE TO HOLY RUSQSIA TREATY
    WITH POLAND HAPQPILY CONCLUDED MONEY AND ARMS AT YOUR DISPOSAL YOUR PRESENCE ALONE
    NEXEDED SPIES AT WORK USE CAUTION BURN ALXL PAPERS ALQL CLUES TO IDENTITY ON THURSDAY
    AH IUNE TAKE TRAIN REACHING DARLEY HALT X TEN FIFTEQEN X WALK BY COASTROAD TO
    FLATIRON ROCK X THERE AWAIT RIDER FROM THESE A WHO BRINGS INSTRUCTIONS FOR YOUR
    IOURNEY TO WARSAW THE WORD IS EMPIRE Q BRING THIS PAPER WITH YOU QSILENCE SECRECY
    IMPERATIVE BORISQ`'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: “华沙致尤恩·托·他的**殿下**大公**帕夫洛·阿列克谢耶维奇**，俄罗斯罗曼诺夫家族王位继承人委托给我们的文件现在已彻底审查完毕，证明您**杰出祖先**与**沙皇尼古拉斯一世**的婚姻无可置疑地得到确认。现在一切准备就绪，您的人民在**残暴的苏维埃压迫下呻吟**，迫切欢迎帝国统治的恢复。与波兰的条约已顺利签订，金钱与武器任由您支配。您的到来便足以，间谍正在行动，请小心行事，销毁所有文件和身份线索。星期四六月，请乘火车到达达尔利车站，向西沿海岸公路步行至平铁石岩，在那里等候来自这些人的骑士，带来您前往华沙的指示。密码是‘帝国’，请随身携带此纸。保持沉默和保密。**鲍里斯**。”
- en: 'Here’s the complete Playfair matrix, which is based on the keyword `MONARCHY`.
    We can circularly shift rows and columns with respect to the matrix to reproduce
    a meaningful keyword:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完整的 Playfair 矩阵，基于关键字 `MONARCHY`。我们可以通过按矩阵的行列进行循环移动，来重新生成一个有意义的关键字：
- en: '`M O N A R`'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '`M O N A R`'
- en: '`C H Y B D`'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '`C H Y B D`'
- en: '`E F G I K`'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '`E F G I K`'
- en: '`L P Q S T`'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '`L P Q S T`'
- en: '`U V W X Z`'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '`U V W X Z`'
- en: We might now find it interesting to take a second look at the text statistics
    generated at the start of our analysis. `M`, which is the most frequent letter
    in the cryptogram, appears in the same column as `E`—just as we expected. The
    most frequent digraphs, `ZM`, `HN`, and `GA`, decrypt to `UR`, `YO`, and `IN`.
    The digraph `UR` is not typically this common in an English text; here, its frequent
    appearance is caused by the example’s frequent use of the word `YOUR`. The plaintext
    equivalents of the frequent reversible digraphs, `ZM`/`MZ`, `MK`/`KM`, and `IL`/`LI`,
    are `UR`/`RU`, `RE`/`ER`, and `ES`/`SE`. Again, `UR`/`RU` appears more commonly
    than one would expect, but things like this happen in the life of a codebreaker.
    All in all, text statistics were not particularly helpful in breaking this Playfair
    cryptogram, though they may be in other cases.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可能会觉得有趣的是，再次查看我们分析开始时生成的文本统计数据。`M`，作为密码中最常见的字母，出现在与`E`相同的列中——正如我们预期的那样。最常见的二字母组合`ZM`、`HN`和`GA`分别解码为`UR`、`YO`和`IN`。二字母组合`UR`在英语文本中通常不会这么常见；这里，它频繁出现的原因是示例中频繁使用了单词`YOUR`。频繁出现的可逆二字母组合`ZM`/`MZ`、`MK`/`KM`和`IL`/`LI`的明文对应分别是`UR`/`RU`、`RE`/`ER`和`ES`/`SE`。再一次，`UR`/`RU`的出现频率高于预期，但这种情况在破译者的工作中是常有的。总的来说，文本统计数据在破解这个
    Playfair 密码时并没有特别大的帮助，尽管在其他情况下它们可能会有用。
- en: It should now be clear that manually breaking a Playfair cryptogram is a difficult
    task. Although we had several cribs (which we cannot, of course, always expect
    in practice), we had to make a few quite optimistic guesses. We also cheated by
    only following the guesses we knew were correct. A real codebreaking process would
    require a lot more trial and error. Still, in the pre-computer age, people really
    did solve Playfair encryptions with the method described here. We can’t help but
    tip our hats to them.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该很清楚，手动破解一个 Playfair 密码是非常困难的。尽管我们有几个已知的密码线索（当然，这在实际中并不总是能预料到），我们仍然不得不做出一些相当乐观的猜测。我们也作弊了，只跟随我们知道是正确的猜测。真正的破译过程需要更多的反复试验和错误。然而，在没有计算机的时代，人们确实能通过这里描述的方法破解
    Playfair 密码。我们不得不对他们表示敬意。
- en: If you are looking for resources that explain the techniques introduced in this
    chapter in more detail, check out the cited chapters in *Cryptanalysis* by Helen
    Fouché Gaines,^([7](b06.xhtml#c12-endnote-7)) *Manual for the Solution of Military
    Ciphers* by Parker Hitt,^([8](b06.xhtml#c12-endnote-8)) or *Cryptography* by André
    Langie.^([9](b06.xhtml#c12-endnote-9)) In *Solution of a Playfair Cipher*, Alf
    Monge also walks through the breaking of a Playfair cryptogram consisting of only
    thirty letters.^([10](b06.xhtml#c12-endnote-10))
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在寻找更多详细解释本章介绍的技术的资源，可以查阅*Helen Fouché Gaines*的《Cryptanalysis》（密码分析）中的相关章节^([7](b06.xhtml#c12-endnote-7))，*Parker
    Hitt*的《Manual for the Solution of Military Ciphers》（军事密码解法手册）中的章节^([8](b06.xhtml#c12-endnote-8))，或者*André
    Langie*的《Cryptography》（密码学）^([9](b06.xhtml#c12-endnote-9))。在《Solution of a Playfair
    Cipher》（Playfair 密码的破解）中，Alf Monge 也详细讲解了如何破解一个仅包含三十个字母的 Playfair 密码^([10](b06.xhtml#c12-endnote-10))。
- en: Success stories
  id: totrans-451
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成功案例
- en: Thouless’s first message
  id: totrans-452
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Thouless的第一条消息
- en: 'As mentioned earlier in this chapter, British parapsychologist Robert Thouless
    (1894–1984) published a Playfair message in 1948, intending to psychically transmit
    its key after his death (see [Chapter 8](c08.xhtml) for details).^([11](b06.xhtml#c12-endnote-11))
    This message is reproduced here and in [Figure 12-9](#figure12-9):'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章早些时候提到的，英国的超心理学家罗伯特·Thouless（1894–1984）于1948年发布了一条Playfair加密消息，意图在去世后通过超感官方式传递其密钥（详情见[第8章](c08.xhtml)）。^([11](b06.xhtml#c12-endnote-11))这条消息在这里以及在[图12-9](#figure12-9)中展示：
- en: '`CBFTM HGRIO TSTAU FSBDN WGNIS BRVEF BQTAB`'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '`CBFTM HGRIO TSTAU FSBDN WGNIS BRVEF BQTAB`'
- en: '`QRPEF BKSDG MNRPS RFBSU TTDMF EMA BIM`'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '`QRPEF BKSDG MNRPS RFBSU TTDMF EMA BIM`'
- en: A codebreaker, who wanted to stay anonymous, deciphered this message only a
    few weeks after its publication, causing Thouless’s first attempt at his experiment
    to fail. We do not know how this individual deciphered this cryptogram—the codebreaker
    is referenced only briefly in Thouless’s next paper—but we can make a few educated
    guesses.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 一位想保持匿名的破译者在这条消息发布仅几周后就解开了它，导致Thouless第一次实验的尝试失败。我们不知道这位破译者是如何解开这个密码的——这位破译者在Thouless的下一篇论文中只被简短提及——但我们可以做一些合理的推测。
- en: '![](image_fi/502727c12/f12009.png)'
  id: totrans-457
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/502727c12/f12009.png)'
- en: 'Figure 12-9: Robert Thouless (pictured) wanted to channel the solution to this
    Playfair-encrypted message after his death in order to prove that the dead can
    communicate with the living. However, long before Thouless died, a codebreaker
    solved the cryptogram—without psychic powers.'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 图12-9：罗伯特·Thouless（如图所示）希望在自己去世后传达这条经过Playfair加密的消息，以证明死者可以与活人交流。然而，在Thouless去世之前，一位破译者就已经解开了这个密码——并没有依靠超能力。
- en: As Thouless did not reveal the encryption system he had used, the first hurdle
    involved finding out his method. Frequency analysis clearly shows that Thouless
    had not used a simple substitution cipher. The unknown codebreaker probably saw
    that the message didn’t contain a `J` and had an even number of letters, as is
    typical of a Playfair cipher. The fact that no digraph in the ciphertext consists
    of two identical letters is consistent with Playfair, too. Considering all this
    evidence, the codebreaker had enough reason to conclude that they were dealing
    with a Playfair cryptogram.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Thouless没有透露他使用的加密系统，第一道难题是找出他的加密方法。频率分析清楚表明，Thouless没有使用简单的替换密码。未知的破译者可能发现，消息中没有`J`，且字母数是偶数，这符合Playfair密码的特点。密文中没有任何一个双字母组合由两个相同的字母组成，这一点也与Playfair密码一致。考虑到所有这些证据，破译者有足够的理由推测他们正在处理的是一个Playfair密码。
- en: 'But, once they had identified the system as Playfair, how did they solve it?
    In his 2017 book *Unsolved**!*, our colleague Craig Bauer points to a few promising
    starting points.^([12](b06.xhtml#c12-endnote-12)) We mentioned earlier in this
    chapter that the last line of a Playfair matrix derived from a keyword is often
    `VWXYZ`, because these five letters are unlikely to be included in a keyword in
    English. In this case, this assumption turns out to be correct. In addition, Craig
    writes:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，一旦他们确定了使用的是Playfair加密系统，他们是如何解密的呢？在2017年出版的《未解之谜**！**》一书中，我们的同事Craig Bauer指出了一些有前景的起点。^([12](b06.xhtml#c12-endnote-12))我们在本章早些时候提到，基于关键字推导出的Playfair矩阵的最后一行通常是`VWXYZ`，因为这五个字母在英语的关键字中不太可能出现。在这个案例中，这个假设是正确的。此外，Craig写道：
- en: We see that some digraphs (`BQ`, `EF`, `SB`, and `TA`) appear twice. These are
    likely to represent high-frequency digraphs in normal English. A lot of trial
    and error may be involved in matching these up correctly, but cryptanalysts are
    patient.
  id: totrans-461
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们看到一些双字母组合（`BQ`，`EF`，`SB`，和`TA`）出现了两次。这些可能代表英语中常见的高频双字母组合。正确匹配这些组合可能涉及大量的试错，但密码分析员们很有耐心。
- en: It might also have helped that Thouless’s message contains `BS` and `SB`, a
    reversing digraph. The most frequent reversing digraph in English texts is *ER*/*RE*.
    So, does `BS` stand for `ER` and `SB` for `RE`, or vice versa? It turns out that
    the mappings `BS` = `ER` and `SB` = `RE` are correct.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 也许还因为Thouless的消息包含了`BS`和`SB`这两个反向双字母组合（digraph）。在英语文本中，最常见的反向双字母组合是*ER*/*RE*。那么，`BS`是否代表`ER`，`SB`是否代表`RE`，还是反过来呢？事实证明，`BS`
    = `ER`和`SB` = `RE`的映射是正确的。
- en: The unknown codebreaker might also have taken a completely different approach.
    While Thouless did not reveal the cipher he used, he mentioned that the plaintext
    was a Shakespearean quote. Perhaps the codebreaker worked through a list of famous
    Shakespeare quotes, looking for one that contains the same digraph repetitions
    as the ciphertext. The pattern `BQTABQ`, consisting of two identical digraphs
    with a different one in between, might have been helpful for this purpose. It
    is certainly possible to identify the correct plaintext in this way.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 这位未知的破译者可能也采取了完全不同的方法。虽然索尔斯并未透露他使用的密码，但他提到明文是一句莎士比亚的名言。或许破译者通过列出著名的莎士比亚名句，寻找包含与密文相同字母重复的句子。模式`BQTABQ`，由两个相同的二字母组和其中一个不同的字母组成，可能对这个过程有帮助。通过这种方式，确实有可能识别出正确的明文。
- en: 'Whichever method the codebreaker used, they finally came up with the following
    Playfair matrix (based on the keyword `SURPRISE`):'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 无论破译者使用了哪种方法，他们最终得出了以下的Playfair矩阵（基于关键词`SURPRISE`）：
- en: '`S U R P I`'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '`S U R P I`'
- en: '`E A B C D`'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '`E A B C D`'
- en: '`F G H K L`'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '`F G H K L`'
- en: '`M N O Q T`'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '`M N O Q T`'
- en: '`V W X Y Z`'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '`V W X Y Z`'
- en: 'From this matrix, they derived the following plaintext, which is from Shakespeare’s
    *Macbeth*, Act 2, Scene 2, and proved correct: `BALM OF HURT MINDS GREAT NATURE’S
    SECOND COURSE CHIEF NOURISHER IN LIFE’S FEAST.`'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个矩阵中，他们推导出了以下明文，来自莎士比亚的*麦克白*，第二幕，第二场，并证明是正确的：`BALM OF HURT MINDS GREAT NATURE’S
    SECOND COURSE CHIEF NOURISHER IN LIFE’S FEAST.`
- en: Thouless’s third message
  id: totrans-471
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索尔斯的第三条信息
- en: 'Robert Thouless’s third cryptogram is also encrypted with the Playfair cipher
    (see [Chapter 8](c08.xhtml) for the background story). However, this time, Thouless
    double-encrypted the message, using Playfair twice with two different keywords,
    in order to increase its security. Between the two encryptions, he added the same
    letter to the start and end of the result, to make decryption a bit more difficult.
    Here’s the cryptogram he published:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 罗伯特·索尔斯的第三个密码也使用了Playfair密码（有关背景故事请参见[第8章](c08.xhtml)）。然而，这一次，索尔斯采用了双重加密，使用两个不同的关键词分别进行两次Playfair加密，以增强安全性。在两次加密之间，他将相同的字母添加到结果的开始和结束，以增加解密难度。以下是他发布的密码：
- en: '`BTYRR OOFLH KCDXK FWPCZ KTADR GFHKA`'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '`BTYRR OOFLH KCDXK FWPCZ KTADR GFHKA`'
- en: '`HTYXO ALZUP PYPVF AYMMF SDLR UVUB`'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '`HTYXO ALZUP PYPVF AYMMF SDLR UVUB`'
- en: This time, Thouless revealed the cipher he had used but kept the two keywords
    secret.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，索尔斯透露了他所使用的密码，但将两个关键词保密。
- en: When he died in 1984, the solution remained unknown, and the interesting part
    of his experiment began. The Survival Research Foundation, an organization that
    studied after-death communications, offered a $1,000 reward for the correct solution
    to the second or third message, so long as it was provided by 1987.^([13](b06.xhtml#c12-endnote-13))
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 当他在1984年去世时，解法依然未解，而他实验中有趣的部分才刚开始。生存研究基金会，一个研究死后通讯的组织，提供了1,000美元的奖励，只要在1987年之前提供正确的第二或第三条消息的解答。^([13](b06.xhtml#c12-endnote-13))
- en: To our knowledge, nobody ever received the two keywords from the realm of the
    dead, and the reward was never paid. So, Thouless’s messages did not prove that
    the dead could communicate with the living. Or perhaps the dead simply can’t remember
    keywords!
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 据我们所知，没人从死者的领域得到过这两个关键词，因此奖励也没有发放。所以，索尔斯的信息并没有证明死者能够与活人沟通。或者，也许死者根本记不得关键词了！
- en: In 1995, renowned codebreaker Jim Gillogly and his partner Larry Harnisch started
    a project that aimed to solve Thouless’s second and third messages. They never
    solved the second but did succeed in breaking the third. It should come as no
    surprise that, rather than using psychic powers, the partners applied codebreaking
    methods and a computer.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 1995年，著名的密码破译者吉姆·吉洛戈利和他的搭档拉里·哈尼什开始了一个旨在解决索尔斯第二条和第三条信息的项目。他们没有解决第二条信息，但成功破译了第三条信息。毫不奇怪的是，他们并没有使用超能力，而是应用了密码破译方法和计算机。
- en: 'As a first step, their computer program attempted to decrypt the message using
    each entry in a file of 64,000 keyword candidates (a dictionary attack). But,
    of course, this trial-and-error decryption could do only half of the job, as Thouless
    had used two Playfairs in a row. A question remained: How could they determine
    whether one keyword was correct without knowing the other one?'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一步，他们的计算机程序尝试使用一个包含64,000个关键词候选项的文件解密信息（字典攻击）。但当然，这种反复试探的解密只能完成一半工作，因为索尔斯使用了两次连续的Playfair加密。一个问题依然存在：他们如何判断一个关键词是否正确，而又不知另一个关键词是什么？
- en: Gillogly and Harnisch found two simple ways to check this. First, they used
    the fact that Thouless had added the same letter to the start and the end of his
    intermediate result. Second, they knew that the decryption they performed needed
    to result in another Playfair cryptogram. As mentioned, Playfair cryptograms have
    certain predictable properties, such as a lack of double letters. A computer program
    could easily check both conditions.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 吉洛格利和哈尼施发现了两种简单的方法来验证这一点。首先，他们利用了瑟尔斯在中间结果的开始和结尾添加了相同字母这一事实。其次，他们知道他们进行的解密需要产生另一个Playfair密码文本。如前所述，Playfair密码文本具有某些可预测的特性，比如没有重复字母。计算机程序可以轻松检查这两个条件。
- en: Of the 64,000 keyword candidates Gillogly and Harnisch checked, 1,385 produced
    a result that fulfilled both criteria (they had the same first and last letters
    and no identical digraphs). For each of these candidates, they applied a second
    Playfair decryption, testing all 64,000 keywords, which resulted in about 88 million
    combinations. Next, for each combination, their program checked whether the plaintext
    candidate looked like an English text by analyzing its trigraph frequencies.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 在吉洛格利和哈尼施检查的64,000个关键词候选中，有1,385个满足了两个标准（它们的首尾字母相同，且没有重复的双字母组合）。对于这些候选项，他们进行了第二次Playfair解密，测试了所有64,000个关键词，结果得到了约8800万个组合。接着，他们的程序对每个组合进行了检查，分析其三字母频率，验证该明文候选是否像英语文本。
- en: 'After 8.5 hours of calculations, the computer program returned a potential
    solution. Using `BLACK` as the first keyword and `BEAUTY` as the second one, the
    program produced a readable English sentence. The choice of keywords sounded plausible,
    as Robert Thouless certainly knew Anna Sewell’s famous 1877 novel *Black Beauty*.
    The problem was solved:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 经过8.5小时的计算，计算机程序返回了一个潜在的解答。使用`BLACK`作为第一个关键词，`BEAUTY`作为第二个关键词，程序生成了一个可读的英语句子。选择这些关键词看起来合理，因为罗伯特·瑟尔斯（Robert
    Thouless）显然知道安娜·瑟威尔（Anna Sewell）1877年出版的著名小说《黑美人》*Black Beauty*。问题得到了最终解决：
- en: '`THIS IS A CIPHER WHICH WILL NOT BE READ UNLESS I GIVE THE KEY WORDS X`'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '`THIS IS A CIPHER WHICH WILL NOT BE READ UNLESS I GIVE THE KEY WORDS X`'
- en: 'Gillogly and Harnisch presented their solution in the scientific journal *Cryptologia*,
    in a 1996 paper titled “Cryptograms from the Crypt.”^([14](b06.xhtml#c12-endnote-14))
    Unfortunately, this was too late to earn the $1,000 prize. So, Gillogly and Harnisch
    ended their article with this lament: “Our successful computational séance must
    be its own reward.”'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 吉洛格利和哈尼施在1996年发表的《密码学》期刊上，介绍了他们的解决方案，论文标题为《来自地下室的密码》。^([14](b06.xhtml#c12-endnote-14))
    不幸的是，这个解决方案为时已晚，无法赢得1,000美元奖金。因此，吉洛格利和哈尼施在文章的结尾写道：“我们的成功计算会议必须是它自己的奖励。”
- en: Challenges
  id: totrans-485
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 挑战
- en: 'The cryptogram in National Treasure: Book of Secrets'
  id: totrans-486
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 《国家宝藏：秘密书》中的密码文本
- en: 'Let’s try an easy challenge. In the 2007 movie *National Treasure: Book of
    Secrets*, the following Playfair cryptogram appears:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一个简单的挑战。在2007年电影《国家宝藏：秘密书》中，出现了以下Playfair密码文本：
- en: '`ME IK QO TX CQ TE ZX CO MW QC TE HN FB IK ME HA KR QC UN GI KM AV`'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '`ME IK QO TX CQ TE ZX CO MW QC TE HN FB IK ME HA KR QC UN GI KM AV`'
- en: The keyword is `DEATH`. Can you decrypt it?
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 关键词是`DEATH`。你能解密吗？
- en: Unsolved cryptograms
  id: totrans-490
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未解决的密码文本
- en: The world record digraph challenge
  id: totrans-491
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 世界纪录双字母挑战
- en: The shortest message created with a general digraph substitution that was ever
    broken has a length of 750 letters.^([15](b06.xhtml#c12-endnote-15)) We’ll cover
    this record in [Chapter 16](c16.xhtml), when we discuss the hill-climbing method.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一般双字母替换法破译的最短消息长度为750个字母。^([15](b06.xhtml#c12-endnote-15)) 我们将在[第16章](c16.xhtml)中讨论这个纪录，特别是当我们讨论爬山法时。
- en: 'Klaus created the following shorter ciphertext, encrypted in the same way,
    in March 2020, to encourage his blog readers to improve the record:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 克劳斯在2020年3月创建了以下更短的密文，以同样的方式加密，鼓励他的博客读者提高纪录：
- en: '`UGBZAEHINYQLBPZLNFTLUEBMULTLSLZPBZPZKPOVUGYSQPNYHL`'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '`UGBZAEHINYQLBPZLNFTLUEBMULTLSLZPBZPZKPOVUGYSQPNYHL`'
- en: '`RYFHATQKRHTZEHPDQUUGYSUJOVYTUGYVRHAJNFTLUEXFRUEOOJ`'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '`RYFHATQKRHTZEHPDQUUGYSUJOVYTUGYVRHAJNFTLUEXFRUEOOJ`'
- en: '`TZOSLUPZEICVADYMYLCRBZXOUGSVDJOIDYRHTZOSWZROYNKJRM`'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '`TZOSLUPZEICVADYMYLCRBZXOUGSVDJOIDYRHTZOSWZROYNKJRM`'
- en: '`EIXOREOVNFTLUESAMNDJHIIWJGKRYFUBTIQPULBPRMJORECJCY`'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '`EIXOREOVNFTLUESAMNDJHIIWJGKRYFUBTIQPULBPRMJORECJCY`'
- en: '`WZZPQRXXVNOSZLBLNYJMPLYNOVLCLKIOGUKUKFSAKAQRSVQXUJ`'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '`WZZPQRXXVNOSZLBLNYJMPLYNOVLCLKIOGUKUKFSAKAQRSVQXUJ`'
- en: '`IOANYSWZSDKUKFLNRMEIRJYVEOLXLKMEYKERHXZPBZXOZXQPCR`'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '`IOANYSWZSDKUKFLNRMEIRJYVEOLXLKMEYKERHXZPBZXOZXQPCR`'
- en: '`KSYOSVHNTLIXKRYFUBTIMGWIZLOSONRMIDKYNYLCFFOMTTLLJH`'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '`KSYOSVHNTLIXKRYFUBTIMGWIZLOSONRMIDKYNYLCFFOMTTLLJH`'
- en: '`WTADHLYNRHMZADOGMUKBWZZPPQBZBZNOCRHINYNFTLUEYNOVBZ`'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '`WTADHLYNRHMZADOGMUKBWZZPPQBZBZNOCRHINYNFTLUEYNOVBZ`'
- en: '`NOQPGCQMRHTZIDKYNYCRBZXOUGSVTTQPOSDYXOMQKKVNEALUYV`'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '`NOQPGCQMRHTZIDKYNYCRBZXOUGSVTTQPOSDYXOMQKKVNEALUYV`'
- en: '`RMUFPYNXZAVLRHTZNYQXMFYVUCMZSAJMBZZPXPBZMNVFUCJTNY`'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '`RMUFPYNXZAVLRHTZNYQXMFYVUCMZSAJMBZZPXPBZMNVFUCJTNY`'
- en: '`QXGHEITPPYFWKUZFPZQUDEVLDBOMGRUEKFSCYTVNANLDRMNBYV`'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '`QXGHEITPPYFWKUZFPZQUDEVLDBOMGRUEKFSCYTVNANLDRMNBYV`'
- en: '`UTFNUJMUMMEOIXIISDVNZPMNRYRCTFUGZPDNUTLXJNSSVNCRJC`'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '`UTFNUJMUMMEOIXIISDVNZPMNRYRCTFUGZPDNUTLXJNSSVNCRJC`'
- en: Also known as the Bigram 600 challenge, this message consists of 600 letters
    and has (as of this writing) withstood all attempts to break it.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 这个挑战也被称为Bigram 600挑战，这条信息由600个字母组成，并且截至目前，所有破解尝试都未能成功。
- en: The world record Playfair challenge
  id: totrans-507
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 世界纪录Playfair挑战
- en: While general digraph substitution appears to protect a 600-letter plaintext
    quite well, as evidenced by the ciphertext in the previous section, the Playfair
    cipher has proven much easier to attack. As of this writing, the shortest Playfair
    cryptogram created with a random Playfair matrix (i.e., without a keyword) ever
    to have been solved consists of just twenty-six letters. We will cover this record
    in [Chapter 16](c16.xhtml), when we address hill climbing. The thirty-letter Playfair
    ciphertext broken in 1936 by Alf Monge, which we mentioned earlier in this chapter,
    was based on a keyword and therefore doesn’t count in this category.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管一般的双字母替代法看起来能够很好地保护一个600字母的明文，如上一部分的密文所示，Playfair密码却被证明更容易被破解。根据目前的资料，使用随机Playfair矩阵（即没有关键词）的最短Playfair密文，已经被破解的由26个字母组成。我们将在[第16章](c16.xhtml)中讨论这一记录，届时我们将探讨爬山算法。我们之前提到的1936年由Alf
    Monge破解的30字母Playfair密文，是基于一个关键词的，因此不算在此类别中。
- en: In January 2020, Klaus, always seeking to challenge his blog readers, published
    an even shorter Playfair cryptogram containing only twenty-four letters:^([16](b06.xhtml#c12-endnote-16))
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 2020年1月，Klaus总是挑战他的博客读者，发布了一个更短的Playfair密码，仅包含24个字母：^([16](b06.xhtml#c12-endnote-16))
- en: '`VYRSTKSVSDQLARMWTLRZNVUC`'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: '`VYRSTKSVSDQLARMWTLRZNVUC`'
- en: Can you decipher this message? If so, you may set a new record!
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 你能解读这条信息吗？如果可以，你可能会创下新纪录！
