["```\n\n      // Project 34 - DC Motor Control with PWM and MOSFET\n\n      #include <avr/io.h>\n\n      #include <util/delay.h>\n\n      ❶ #define wait 10\n\n      ❷ void initPWM(void)\n\n      {\n\n      // Timers 1A and 1B\n\n      TCCR1A |= (1 << WGM10);        // Fast PWM mode\n\n      TCCR1B |= (1 << WGM12);        // Fast PWM mode\n\n      TCCR1B |= (1 << CS11);\n\n      }\n\n      void motorOn(void)\n\n      {\n\n      ❸ TCCR1A &= ~(1 << COM1A1);      // Disconnect PWM from PB1\n\n      PORTB |= (1 << PORTB1);        // Set PB1 on\n\n      }\n\n      void motorOff(void)\n\n      {\n\n      ❹ TCCR1A &= ~(1 << COM1A1);      // Disconnect PWM from PB1\n\n      PORTB &= ~(1 << PORTB1);       // Set PB1 off\n\n      }\n\n      void motorPWM(uint8_t duty)\n\n      {\n\n      ❺ TCCR1A |= (1 << COM1A1);       // Connect PWM to OCR1A—PB1\n\n      OCR1A = duty;\n\n      }\n\n      int main(void)\n\n      {\n\n      DDRB |= (1 << PORTB1);         // Set PORTB pin 1 as output\n\n      ❷ initPWM();\n\n      uint8_t a;\n\n      while(1)\n\n      {\n\n      motorOff();                 // Motor off\n\n      _delay_ms(3000);\n\n      for (a = 1; a <255; a++)    // Slowly increase motor speed\n\n      {\n\n      motorPWM(a);\n\n      _delay_ms(wait);\n\n      }\n\n      motorOn();                  // Motor full on\n\n      _delay_ms(1000);\n\n      for (a = 254; a > 0;—a)   // Slowly decrease motor speed\n\n      {\n\n      motorPWM(a);\n\n      _delay_ms(wait);\n\n      }\n\n      }\n\n      }\n\n```", "```\n\n      // Project 35 - Temperature-Controlled Fan\n\n      #include <avr/io.h>\n\n      #include <util/delay.h>\n\n      void startADC()\n\n      {\n\n      ADMUX |= (1 << REFS0);                 // Use AVcc pin with ADC\n\n      ADMUX |= (1 << MUX2) | (1 << MUX0);    // Use ADC5 (pin 28)\n\n      ADCSRA |= (1 << ADPS1) | (1 << ADPS0); // Prescaler for 1 MHz (/8)\n\n      ADCSRA |= (1 << ADEN);                 // Enable ADC\n\n      }\n\n      void initPWM(void)\n\n      {\n\n      // Timers 1A and 1B\n\n      TCCR1A |= (1 << WGM10);                // Fast PWM mode\n\n      TCCR1B |= (1 << WGM12);                // Fast PWM mode\n\n      TCCR1B |= (1 << CS11);\n\n      }\n\n      void motorOff(void)\n\n      {\n\n      TCCR1A &= ~(1 << COM1A1);              // Disconnect PWM from PB1\n\n      PORTB &= ~(1 << PORTB1);               // Set PB1 off\n\n      }\n\n      void motorOn(void)\n\n      {\n\n      TCCR1A &= ~(1 << COM1A1);              // Disconnect PWM from PB1\n\n      PORTB |= (1 << PORTB1);                // Set PB1 on\n\n      }\n\n      void motorPWM(uint8_t duty)\n\n      {\n\n      TCCR1A |= (1 << COM1A1);               // Connect PWM to OCR1A—PB1\n\n      OCR1A = duty;\n\n      }\n\n      int main(void)\n\n      {\n\n      DDRB |= (1 << PORTB1);                 // Set PORTB pin 1 as output\n\n      ❶ startADC();\n\n      initPWM();\n\n      ❷ uint8_t ADCvalue;\n\n      float voltage;\n\n      float temperature;\n\n      // Delay motor action for a few moments on start\n\n      ❸ _delay_ms(3000);\n\n      while(1)\n\n      {\n\n      // Get reading from TMP36 via ADC\n\n      ❹ ADCSRA |= (1 << ADSC);              // Start ADC measurement\n\n      while (ADCSRA & (1 << ADSC) );      // Wait until conversion complete\n\n      _delay_ms(10);\n\n      // Get value from ADC register, convert to 8-bit value\n\n      ADCvalue = ADC >> 2;\n\n      // Convert reading to temperature value (Celsius)\n\n      voltage = (ADCvalue * (5000 / 256));\n\n      ❺ temperature = (voltage—500) / 10;\n\n      // Now you have a temperature value, take action\n\n      ❻ if (temperature<25)\n\n      {\n\n      // Under 25 degrees, turn motor off\n\n      motorOff();\n\n      }\n\n      ❼ else if ((temperature>=25) & (temperature <35))\n\n      {\n\n      // At or above 25 and below 35 degrees, set motor to 50% PWM\n\n      motorPWM(127);\n\n      }\n\n      ❽ else if (temperature>=35)\n\n      {\n\n      // 35 degrees and over, turn motor full on\n\n      motorOn();\n\n      }\n\n      ❾ _delay_ms(500); // Prevent rapid motor speed changes\n\n      }\n\n      }\n\n```", "```\n\n      // Project 36 - DC Motor Control with L293D\n\n      #include <avr/io.h>\n\n      #include <util/delay.h>\n\n      ❶ void initPWM(void)\n\n      {\n\n      TCCR2A |= (1 << WGM20);     // Fast PWM mode\n\n      TCCR2A |= (1 << WGM21);     // Fast PWM mode, part 2\n\n      TCCR2B |= (1 << CS21);      // PWM Freq = F_CPU/8/256\n\n      }\n\n      ❷ void motorForward(uint8_t duty)\n\n      {\n\n      // Set direction\n\n      ❸ PORTB |= (1 << PORTB1);     // PB1 HIGH\n\n      PORTB &= ~(1 << PORTB2);    // PB2 LOW\n\n      // Set speed\n\n      ❹ if (duty == 255)\n\n      {\n\n      PORTB |= (1 << PORTB3);  // Set PORTB3 to on\n\n      } else if (duty < 255)\n\n      {\n\n      ❺ TCCR2A |= (1 << COM2A1); // PWM output on OCR2A—PB3\n\n      OCR2A = duty;            // Set PORTB3 to PWM value\n\n      }\n\n      }\n\n      ❻ void motorBackward(uint8_t duty)\n\n      {\n\n      // Set direction\n\n      PORTB &= ~(1 << PORTB1);    // PB1 LOW\n\n      PORTB |= (1 << PORTB2);     // PB2 HIGH\n\n      // Set speed\n\n      if (duty == 255)\n\n      {\n\n      PORTB |= (1 << PORTB3);  // Set PORTB3 to on\n\n      } else if (duty < 255)\n\n      {\n\n      TCCR2A |= (1 << COM2A1); // PWM output on OCR2A—PB3\n\n      OCR2A = duty;            // Set PORTB3 to PWM value\n\n      }\n\n      }\n\n      ❼ void motorOff(void)\n\n      {\n\n      // Disconnect PWM output from OCR2A—PB3\n\n      TCCR2A &= ~(1 << COM2A1);\n\n      // Set ENABLE to zero for brake\n\n      PORTB &= ~(1 << PORTB3);\n\n      }\n\n      int main(void)\n\n      {\n\n      // Set PORTB3, 2, and 1 as outputs\n\n      DDRB |= (1 << PORTB3)|(1 << PORTB2)|(1 << PORTB1);\n\n      ❽ initPWM();\n\n      _delay_ms(3000);            // Wait a moment before starting\n\n      while(1)\n\n      {\n\n      ❾ motorForward(64);\n\n      _delay_ms(2000);\n\n      motorOff();\n\n      _delay_ms(2000);\n\n      motorForward(255);\n\n      _delay_ms(2000);\n\n      motorOff();\n\n      _delay_ms(2000);\n\n      motorBackward(64);\n\n      _delay_ms(2000);\n\n      motorOff();\n\n      _delay_ms(2000);\n\n      motorBackward(255);\n\n      _delay_ms(2000);\n\n      motorOff();\n\n      _delay_ms(2000);\n\n      }\n\n      }\n\n```", "```\n\n      // Project 37 - Controlling a Two-Wheel-Drive Robot Vehicle\n\n      #include <avr/io.h>\n\n      #include <util/delay.h>\n\n      void initPWM(void)\n\n      ❶\n\n      {\n\n      TCCR2A |= (1 << WGM20);                 // Fast PWM mode\n\n      TCCR2A |= (1 << WGM21); );              // Fast PWM mode, part 2\n\n      TCCR2B |= (1 << CS21); );               // PWM Freq = F_CPU/8/256\n\n      }\n\n      void moveForward(uint8_t duty)\n\n      {\n\n      // Set direction\n\n      PORTB |= (1 << PORTB4)|(1 << PORTB1);\n\n      ❷ // PB4,1 HIGH\n\n      PORTB &= ~(1 << PORTB5)&~(1 << PORTB2); // PB5,2 LOW\n\n      // Set speed\n\n      if (duty == 255)\n\n      ❸\n\n      {\n\n      PORTB |= (1 << PORTB3);              // Set PORTB3 to on\n\n      PORTD |= (1 << PORTD3);              // Set PORTD3 to on\n\n      } else if (duty < 255)\n\n      {\n\n      TCCR2A |= (1 << COM2A1);\n\n      ❹           // PWM output on OCR2A—PB3\n\n      TCCR2A |= (1 << COM2B1);             // PWM to OCR2B—PD3\n\n      OCR2A = duty;                        // Set PORTB3 to PWM value\n\n      OCR2B = duty;                        // Set PORTD3 to PWM value\n\n      }\n\n      }\n\n      void moveBackward(uint8_t duty)\n\n      {\n\n      // Set direction\n\n      PORTB &= ~(1 << PORTB4)&~(1 << PORTB1); // PB4,1 LOW\n\n      PORTB |= (1 << PORTB5)|(1 << PORTB2);   // PB5,2 HIGH\n\n      // Set speed\n\n      if (duty == 255)\n\n      {\n\n      PORTB |= (1 << PORTB3);              // Set PORTB3 to on\n\n      PORTD |= (1 << PORTD3);              // Set PORTD3 to on\n\n      } else if (duty < 255)\n\n      {\n\n      TCCR2A |= (1 << COM2A1);             // PWM output on OCR2A—PB3\n\n      TCCR2A |= (1 << COM2B1);             // PWM to OCR2B—PD3\n\n      OCR2A = duty;                        // Set PORTB3 to PWM value\n\n      OCR2B = duty;                        // Set PORTD3 to PWM value\n\n      }\n\n      }\n\n      void moveLeft(uint8_t duty)\n\n      {\n\n      // Set direction\n\n      PORTB |= (1 << PORTB4)|(1 << PORTB2);   // PB4,2 HIGH\n\n      PORTB &= ~(1 << PORTB5)&~(1 << PORTB1); // PB5,1 LOW\n\n      // Set speed\n\n      if (duty == 255)\n\n      {\n\n      PORTB |= (1 << PORTB3);              // Set PORTB3 to on\n\n      PORTD |= (1 << PORTD3);              // Set PORTD3 to on\n\n      } else if (duty < 255)\n\n      {\n\n      TCCR2A |= (1 << COM2A1);             // PWM output on OCR2A—PB3\n\n      TCCR2A |= (1 << COM2B1);             // PWM to OCR2B—PD3\n\n      OCR2A = duty;                        // Set PORTB3 to PWM value\n\n      OCR2B = duty;                        // Set PORTD3 to PWM value\n\n      }\n\n      }\n\n      void moveRight(uint8_t duty)\n\n      {\n\n      // Set direction\n\n      PORTB |= (1 << PORTB5)|(1 << PORTB1);   // PB5,1 HIGH\n\n      PORTB &= ~(1 << PORTB4)&~(1 << PORTB2); // PB4,2 LOW\n\n      // Set speed\n\n      if (duty == 255)\n\n      {\n\n      PORTB |= (1 << PORTB3);              // Set PORTB3 to on\n\n      PORTD |= (1 << PORTD3);              // Set PORTD3 to on\n\n      } else if (duty < 255)\n\n      {\n\n      TCCR2A |= (1 << COM2A1);             // PWM output on OCR2A—PB3\n\n      TCCR2A |= (1 << COM2B1);             // PWM to OCR2B—PD3\n\n      OCR2A = duty;                        // Set PORTB3 to PWM value\n\n      OCR2B = duty;                        // Set PORTD3 to PWM value\n\n      }\n\n      }\n\n      void motorsOff(void)\n\n      ❺\n\n      {\n\n      TCCR2A &= ~(1 << COM2A1); // Disconnect PWM from OCR2A—PB3\n\n      TCCR2A &= ~(1 << COM2B1); // Disconnect PWM from OCR2B—PD3\n\n      PORTB &= ~(1 << PORTB3);  // Set ENABLE pins to zero for brake\n\n      PORTD &= ~(1 << PORTD3);\n\n      }\n\n      int main(void)\n\n      {\n\n      // Set PORTB5, 4, 3, 2, and 1 as outputs\n\n      DDRB |= (1 << PORTB5)|(1 << PORTB4)|(1 << PORTB3)|(1 << PORTB2)|(1 << PORTB1);\n\n      ❻\n\n      DDRD |= (1 << PORTD3);\n\n      ❼               // Set PORTD3 as output\n\n      initPWM();\n\n      ❽\n\n      _delay_ms(3000);                       // Wait a moment before starting\n\n      while(1)\n\n      {\n\n      moveForward(128);\n\n      _delay_ms(2000);\n\n      moveLeft(128);\n\n      _delay_ms(2000);\n\n      moveRight(128);\n\n      _delay_ms(2000);\n\n      motorsOff();\n\n      moveBackward(128);\n\n      _delay_ms(2000);\n\n      }\n\n      }\n\n```"]