- en: Now we visit the PuTTY download website, shown in Figure 12-3, and
  prefs: []
  type: TYPE_NORMAL
- en: download *putty.exe* via HTTP and then FTP.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 12-3: PuTTY website download*'
  prefs: []
  type: TYPE_NORMAL
- en: Once the download is finished, stop each Tcpdump instance by press-
  prefs: []
  type: TYPE_NORMAL
- en: ing ctrl-C, and then use Capinfos to look at the metadata for each trace,
  prefs: []
  type: TYPE_NORMAL
- en: as shown in Listing 12-6\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **capinfos putty-http.pcap putty-ftp.pcap**
  prefs: []
  type: TYPE_NORMAL
- en: 'File name: putty-http.pcap'
  prefs: []
  type: TYPE_NORMAL
- en: 'File type: Wireshark/tcpdump/... - libpcap'
  prefs: []
  type: TYPE_NORMAL
- en: 'File encapsulation: Ethernet'
  prefs: []
  type: TYPE_NORMAL
- en: 'Packet size limit: file hdr: 65535 bytes'
  prefs: []
  type: TYPE_NORMAL
- en: 'Number of packets: 509'
  prefs: []
  type: TYPE_NORMAL
- en: 'File size: 521880 bytes'
  prefs: []
  type: TYPE_NORMAL
- en: 'Data size: 513712 bytes'
  prefs: []
  type: TYPE_NORMAL
- en: '*-- snip --*'
  prefs: []
  type: TYPE_NORMAL
- en: '**268** Chapter 12'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'File name: putty-ftp.pcap'
  prefs: []
  type: TYPE_NORMAL
- en: 'File type: Wireshark/tcpdump/... - libpcap'
  prefs: []
  type: TYPE_NORMAL
- en: 'File encapsulation: Ethernet'
  prefs: []
  type: TYPE_NORMAL
- en: 'Packet size limit: file hdr: 65535 bytes'
  prefs: []
  type: TYPE_NORMAL
- en: 'Number of packets: 558'
  prefs: []
  type: TYPE_NORMAL
- en: 'File size: 525649 bytes'
  prefs: []
  type: TYPE_NORMAL
- en: 'Data size: 516697 bytes'
  prefs: []
  type: TYPE_NORMAL
- en: '*-- snip --*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-6: Capinfos output for the HTTP and FTP traces*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Testing Bro to Extract Binaries from HTTP Traffic***'
  prefs: []
  type: TYPE_NORMAL
- en: With the test traffic data ready, let’s run Bro against each trace to see what
  prefs: []
  type: TYPE_NORMAL
- en: logs it creates. Listing 12-7 runs Bro against the *putty-http.pcap* file u
    and tells Bro to reference our modified *local.bro* file v. (Notice that I run
    these commands in a directory called *bro-http* to separate the output from the
    second test for FTP.)
  prefs: []
  type: TYPE_NORMAL
- en: $ sudo bro -r putty-http.pcapu /opt/bro/share/bro/site/local.brov
  prefs: []
  type: TYPE_NORMAL
- en: 'WARNING: No Site::local_nets have been defined. It''s usually a good idea to'
  prefs: []
  type: TYPE_NORMAL
- en: define your local networks.
  prefs: []
  type: TYPE_NORMAL
- en: 'WARNING: Template value remaining in BPFConf filename: /etc/nsm/{{hostname}}-'
  prefs: []
  type: TYPE_NORMAL
- en: '{{interface}}/bpf-bro.conf (/opt/bro/share/bro/securityonion/./bpfconf.bro,'
  prefs: []
  type: TYPE_NORMAL
- en: line 99)
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-7: Running Bro against the saved HTTP traffic*'
  prefs: []
  type: TYPE_NORMAL
- en: We can now see which logs Bro generated. First, we’ll look at the contents
  prefs: []
  type: TYPE_NORMAL
- en: of the current working directory, as shown in Listing 12-8\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **ls -al**
  prefs: []
  type: TYPE_NORMAL
- en: total 560
  prefs: []
  type: TYPE_NORMAL
- en: drwxrwxr-x 3 sov sov 4096 Apr 17 19:33 .
  prefs: []
  type: TYPE_NORMAL
- en: drwxr-xr-x 29 sov sov 4096 Apr 17 19:32 ..
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 280 Apr 17 19:33 capture_loss.log
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 763 Apr 17 19:33 conn.log
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 1376 Apr 17 19:33 http.logu
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 7888 Apr 17 19:33 loaded_scripts.log
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 938 Apr 17 19:33 notice.log
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 1128 Apr 17 19:33 notice_policy.log
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 251 Apr 17 19:33 packet_filter.log
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 521880 Apr 17 17:53 putty-http.pcap
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 951 Apr 17 19:33 reporter.log
  prefs: []
  type: TYPE_NORMAL
- en: drwx------ 3 root root 4096 Apr 17 19:33 .state
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-8: Logs created by running Bro against the saved HTTP traffic*'
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s examine the *http.log* file u in more detail with the cat and
  prefs: []
  type: TYPE_NORMAL
- en: bro-cut commands in tandem, as shown in Listing 12-9\. The -d flags
  prefs: []
  type: TYPE_NORMAL
- en: tells bro-cut to display a human-readable timestamp, and -C tells it to pre-
  prefs: []
  type: TYPE_NORMAL
- en: serve the file headers to show the fields that are present.
  prefs: []
  type: TYPE_NORMAL
- en: Extending SO **269**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: $ **cat http.log | bro-cut -d -C**
  prefs: []
  type: TYPE_NORMAL
- en: '#separator \x09'
  prefs: []
  type: TYPE_NORMAL
- en: '#set_separator ,'
  prefs: []
  type: TYPE_NORMAL
- en: '#empty_field (empty)'
  prefs: []
  type: TYPE_NORMAL
- en: '#unset_field -'
  prefs: []
  type: TYPE_NORMAL
- en: '#path http'
  prefs: []
  type: TYPE_NORMAL
- en: '#open 2013-04-17-19-33-23'
  prefs: []
  type: TYPE_NORMAL
- en: '#fields ts uid id.orig_h id.orig_p id.resp_h id.resp_p trans_'
  prefs: []
  type: TYPE_NORMAL
- en: depth method host uri referrer user_agent request_body_len
  prefs: []
  type: TYPE_NORMAL
- en: response_body_len status_code status_msg info_code info_msg filename tags username
    password proxied mime_type md5 extraction_file
  prefs: []
  type: TYPE_NORMAL
- en: '#types string string addr port addr port count string string string string
    string count count count string count string string table[enum] string string
    table[string] string string file'
  prefs: []
  type: TYPE_NORMAL
- en: 2013-04-17T17:53:28+0000u cSb1GfCIIL9w 192.168.2.108 53999 46.43.34.31
  prefs: []
  type: TYPE_NORMAL
- en: 80 1 GET the.earth.li /~sgtatham/putty/latest/x86/putty.exez http://
  prefs: []
  type: TYPE_NORMAL
- en: www.chiark.greenend.org.uk/~sgtatham/putty/download.html Mozilla/5.0 (Windows
    NT 6.1; WOW64) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.64 Safari/537.31
    0 300 302y Found - - - (empty) - - - text/html - -
  prefs: []
  type: TYPE_NORMAL
- en: 2013-04-17T17:53:28+0000v cSb1GfCIIL9x 192.168.2.108 53999 46.43.34.31
  prefs: []
  type: TYPE_NORMAL
- en: 80 2 GET the.earth.li /~sgtatham/putty/0.62/x86/putty.exe{ http://
  prefs: []
  type: TYPE_NORMAL
- en: www.chiark.greenend.org.uk/~sgtatham/putty/download.html Mozilla/5.0 (Windows
    NT 6.1; WOW64) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.64 Safari/537.31
    0 483328
  prefs: []
  type: TYPE_NORMAL
- en: 200| OK - - - (empty) - - - application/
  prefs: []
  type: TYPE_NORMAL
- en: x-dosexec a3ccfd0aa0b17fd23aa9fd0d84b86c05~ /nsm/bro/extracted/http/http-
  prefs: []
  type: TYPE_NORMAL
- en: item_192.168.2.108:53999-46.43.34.31:80_resp_2.dat}
  prefs: []
  type: TYPE_NORMAL
- en: '#close 2013-04-17-19-33-23'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-9: Bro ht p.log for HTTP transfer*'
  prefs: []
  type: TYPE_NORMAL
- en: The two log entries u and v show traffic over a single web connec-
  prefs: []
  type: TYPE_NORMAL
- en: tion, because Bro assigned the same tracking ID w and x to both records.
  prefs: []
  type: TYPE_NORMAL
- en: In the first record u, the web server replies with a 302 code y that directed
  prefs: []
  type: TYPE_NORMAL
- en: the download from */~sgtatham/putty/latest/x86/putty.exe* z to */~sgtatham/*
  prefs: []
  type: TYPE_NORMAL
- en: '*putty/0.62/x86/putty.exe* {. In the second record v, the web server replies
    with a 200 code | showing that it has the requested file. Finally, the second
    record'
  prefs: []
  type: TYPE_NORMAL
- en: shows that Bro extracted *putty.exe* to a specific directory and file, */nsm/bro/*
  prefs: []
  type: TYPE_NORMAL
- en: '*extracted/http/http-item_192.168.2.108:53999-46.43.34.31:80_resp_2.dat* }.
    We'
  prefs: []
  type: TYPE_NORMAL
- en: also have an MD5 hash for the file, a3ccfd0aa0b17fd23aa9fd0d84b86c05 ~.
  prefs: []
  type: TYPE_NORMAL
- en: Bro is processing this HTTP traffic as we expected.
  prefs: []
  type: TYPE_NORMAL
- en: '***Examining the Binary Extracted from HTTP***'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have indicators that Bro extracted a file from the HTTP traffic,
  prefs: []
  type: TYPE_NORMAL
- en: we can examine it on disk. Listing 12-10 shows the results of that analysis.
  prefs: []
  type: TYPE_NORMAL
- en: '**270** Chapter 12'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 149](index-305_1.png)'
  prefs: []
  type: TYPE_IMG
- en: $ **ls -al /nsm/bro/extracted/http/http-item_192.168.2.108:53999-46.43.34.31:80_**
  prefs: []
  type: TYPE_NORMAL
- en: '**resp_2.dat**'
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 483328u Apr 17 19:33 /nsm/bro/extracted/http/http-
  prefs: []
  type: TYPE_NORMAL
- en: item_192.168.2.108:53999-46.43.34.31:80_resp_2.dat
  prefs: []
  type: TYPE_NORMAL
- en: $ **file /nsm/bro/extracted/http/http-item_192.168.2.108:53999-46.43.34.31:80_**
  prefs: []
  type: TYPE_NORMAL
- en: '**resp_2.dat**'
  prefs: []
  type: TYPE_NORMAL
- en: /nsm/bro/extracted/http/http-item_192.168.2.108:53999-46.43.34.31:80_resp_2\.
  prefs: []
  type: TYPE_NORMAL
- en: 'dat: PE32 executable (GUI) Intel 80386, for MS Windowsv'
  prefs: []
  type: TYPE_NORMAL
- en: $ **md5sum /nsm/bro/extracted/http/http-item_192.168.2.108:53999-46.43.34.31:80_**
  prefs: []
  type: TYPE_NORMAL
- en: '**resp_2.dat**'
  prefs: []
  type: TYPE_NORMAL
- en: a3ccfd0aa0b17fd23aa9fd0d84b86c05w /nsm/bro/extracted/http/http-
  prefs: []
  type: TYPE_NORMAL
- en: item_192.168.2.108:53999-46.43.34.31:80_resp_2.dat
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-10: Examining the binary extracted from HTTP traffic*'
  prefs: []
  type: TYPE_NORMAL
- en: Here, we see that the extracted file is 483,328 bytes u, with file
  prefs: []
  type: TYPE_NORMAL
- en: type PE32 executable (GUI) Intel 80386, for MS Windows v and a hash
  prefs: []
  type: TYPE_NORMAL
- en: (a3ccfd0aa0b17fd23aa9fd0d84b86c05 w) that matches the values Bro
  prefs: []
  type: TYPE_NORMAL
- en: reported in Listing 12-9\.
  prefs: []
  type: TYPE_NORMAL
- en: To confirm that the hash matches the values of the binary downloaded
  prefs: []
  type: TYPE_NORMAL
- en: to the Windows system, we look at the file properties, as shown in Figure 12-4\.
  prefs: []
  type: TYPE_NORMAL
- en: I used HashTab by Implbits ( *http://www.implbits.com/hashtab.aspx*) to gener-
  prefs: []
  type: TYPE_NORMAL
- en: ate these hashes in the File Hashes tab of the Properties dialog.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 12-4: File properties of* putty .exe *showing the*'
  prefs: []
  type: TYPE_NORMAL
- en: '*same MD5 hash*'
  prefs: []
  type: TYPE_NORMAL
- en: Extending SO **271**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***Testing Bro to Extract Binaries from FTP Traffic***'
  prefs: []
  type: TYPE_NORMAL
- en: As with our HTTP test, we can run Bro against the FTP example to see the
  prefs: []
  type: TYPE_NORMAL
- en: logs it creates. Listing 12-11 demonstrates running Bro against *putty-ftp.pcap*
    u and telling Bro to again reference our modified *local.bro* v file. (Notice
    that I run these commands in a directory called *bro-ftp* to keep the output separate
    from the HTTP test results.)
  prefs: []
  type: TYPE_NORMAL
- en: $ sudo bro -r putty-ftp.pcapu /opt/bro/share/bro/site/local.brov
  prefs: []
  type: TYPE_NORMAL
- en: 'WARNING: No Site::local_nets have been defined. It''s usually a good idea to'
  prefs: []
  type: TYPE_NORMAL
- en: define your local networks.
  prefs: []
  type: TYPE_NORMAL
- en: 'WARNING: Template value remaining in BPFConf filename: /etc/nsm/{{hostname}}-'
  prefs: []
  type: TYPE_NORMAL
- en: '{{interface}}/bpf-bro.conf (/opt/bro/share/bro/securityonion/./bpfconf.bro,'
  prefs: []
  type: TYPE_NORMAL
- en: line 99)
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-11: Running Bro against the saved HTTP traffic*'
  prefs: []
  type: TYPE_NORMAL
- en: We can now see which logs Bro generated. First, we examine the con-
  prefs: []
  type: TYPE_NORMAL
- en: tents of the current working directory, as shown in Listing 12-12\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **ls -al**
  prefs: []
  type: TYPE_NORMAL
- en: total 560
  prefs: []
  type: TYPE_NORMAL
- en: drwxrwxr-x 3 sov sov 4096 Apr 17 20:30 .
  prefs: []
  type: TYPE_NORMAL
- en: drwxr-xr-x 29 sov sov 4096 Apr 17 20:30 ..
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 281 Apr 17 20:30 capture_loss.log
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 1531 Apr 17 20:30 conn.log
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 731 Apr 17 20:30 ftp.logu
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 7888 Apr 17 20:30 loaded_scripts.log
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 1128 Apr 17 20:30 notice_policy.log
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 251 Apr 17 20:30 packet_filter.log
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 525649 Apr 17 18:07 putty-ftp.pcap
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 951 Apr 17 20:30 reporter.log
  prefs: []
  type: TYPE_NORMAL
- en: drwx------ 3 root root 4096 Apr 17 20:30 .state
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-12: Logs created by running Bro against the saved FTP traffic*'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at the *ftp.log* u. Listing 12-13 shows the results of using the
    cat and bro-cut commands in tandem.
  prefs: []
  type: TYPE_NORMAL
- en: $ **cat ftp.log | bro-cut -d -C**
  prefs: []
  type: TYPE_NORMAL
- en: '#separator \x09'
  prefs: []
  type: TYPE_NORMAL
- en: '#set_separator ,'
  prefs: []
  type: TYPE_NORMAL
- en: '#empty_field (empty)'
  prefs: []
  type: TYPE_NORMAL
- en: '#unset_field -'
  prefs: []
  type: TYPE_NORMAL
- en: '#path ftp'
  prefs: []
  type: TYPE_NORMAL
- en: '#open 2013-04-17-20-30-56'
  prefs: []
  type: TYPE_NORMAL
- en: '#fields ts uid id.orig_h id.orig_p id.resp_h id.resp_p user password command
    arg mime_type mime_desc file_size reply_code reply_msg tags extraction_file'
  prefs: []
  type: TYPE_NORMAL
- en: '**272** Chapter 12'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '#types string string addr port addr port string string string string string
    string count count string table[string] file'
  prefs: []
  type: TYPE_NORMAL
- en: 2013-04-17T18:06:59+0000u 3JGazzdNGmev 192.168.2.108 54104 212.13.197.229
  prefs: []
  type: TYPE_NORMAL
- en: 21 anonymousw chrome@example.comx RETR ftp://212.13.197.229/users/
  prefs: []
  type: TYPE_NORMAL
- en: sgtatham/putty-latest/x86/putty.exey application/x-dosexec MS-DOS executable,
    MZ for MS-DOSz 86 226 Transfer complete{ - /nsm/bro/extracted/ftp/ftp-file_192.168.2.108:54106-212.13.197.229:38177_1.dat|
  prefs: []
  type: TYPE_NORMAL
- en: '#close 2013-04-17-20-30-56'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-13: Bro* ftp .log *for FTP transfer*'
  prefs: []
  type: TYPE_NORMAL
- en: This one log entry at u tracks a single FTP session, because Bro
  prefs: []
  type: TYPE_NORMAL
- en: assigns one tracking ID v to the session. Here, we see the artifacts of
  prefs: []
  type: TYPE_NORMAL
- en: downloading a binary via Google Chrome. The username supplied is
  prefs: []
  type: TYPE_NORMAL
- en: anonymous w, and the password is chrome@example.com x. We see that the
  prefs: []
  type: TYPE_NORMAL
- en: file retrieved, *putty-latest/x86/putty.exe* y, is of type MS-DOS executable,
    MZ
  prefs: []
  type: TYPE_NORMAL
- en: for MS-DOS z. We also see that the transfer completed successfully { and
  prefs: []
  type: TYPE_NORMAL
- en: 'that Bro extracted the binary that it observed: */nsm/bro/extracted/ftp/*'
  prefs: []
  type: TYPE_NORMAL
- en: '*ftp-file_192.168.2.108:54106-212.13.197.229:38177_1.dat* |.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Examining the Binary Extracted from FTP***'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have indicators that Bro extracted a file from the FTP traffic,
  prefs: []
  type: TYPE_NORMAL
- en: we can examine it on disk. Listing 12-14 shows the results of that analysis.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we’ll only confirm that the MD5 hash matches what we
  prefs: []
  type: TYPE_NORMAL
- en: saw earlier.
  prefs: []
  type: TYPE_NORMAL
- en: $ **md5sum /nsm/bro/extracted/ftp/ftp-file_192.168.2.108:54106-212.13.197.229:38177_1.dat**
    a3ccfd0aa0b17fd23aa9fd0d84b86c05u /nsm/bro/extracted/ftp/ftp-file_192.168.2.108:54106-212.13.197.229:38177_1.dat
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-14: Examining the binary extracted from FTP traffic*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the MD5 hash u matches the values listed in the HTTP
  prefs: []
  type: TYPE_NORMAL
- en: examples, Listing 12-10 and Figure 12-4\.
  prefs: []
  type: TYPE_NORMAL
- en: '***Submitting a Hash and Binary to VirusTotal***'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have both the hash of a binary and the binary itself (recov-
  prefs: []
  type: TYPE_NORMAL
- en: ered from network traffic), we can submit them to VirusTotal for analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Whereas in Figure 12-1 we submitted only a hash of a binary for analysis, in
  prefs: []
  type: TYPE_NORMAL
- en: this section, we’ll submit the hash and then the binary in order to compare
  prefs: []
  type: TYPE_NORMAL
- en: the results. In Figure 12-5, we submit the hash.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12-6 shows what VirusTotal knows about this hash.
  prefs: []
  type: TYPE_NORMAL
- en: The results of this analysis are a little mixed, with two antivirus engines
  prefs: []
  type: TYPE_NORMAL
- en: (in the Detection Ratio field) reporting the file associated with this hash
    as
  prefs: []
  type: TYPE_NORMAL
- en: malicious! We know this file is legitimate, however, because we downloaded
  prefs: []
  type: TYPE_NORMAL
- en: it from the publisher’s website. If we’re still suspicious, we could use the
  prefs: []
  type: TYPE_NORMAL
- en: cryptographic signatures published on the PuTTY download page to verify
  prefs: []
  type: TYPE_NORMAL
- en: Extending SO **273**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 150](index-308_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 151](index-308_2.png)'
  prefs: []
  type: TYPE_IMG
- en: that the file we downloaded is the file posted on the website, but that would
  prefs: []
  type: TYPE_NORMAL
- en: only confirm that someone with access to the private key posted a binary
  prefs: []
  type: TYPE_NORMAL
- en: signed by that key. (Trust only goes so far in the digital world.)
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 12-5: Submitting the* putty .exe *hash to VirusTotal*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 12-6: VirusTotal results for the submit ed MD5 hash*'
  prefs: []
  type: TYPE_NORMAL
- en: VirusTotal publishes other information along with antivirus results,
  prefs: []
  type: TYPE_NORMAL
- en: such as the output of running Mark Russinovich’s Sigcheck ( *http://technet*
  prefs: []
  type: TYPE_NORMAL
- en: '*.microsoft.com/en-us/sysinternals/bb897441.aspx*), which checks to confirm'
  prefs: []
  type: TYPE_NORMAL
- en: that a file is digitally signed, as shown in Listing 12-15\.
  prefs: []
  type: TYPE_NORMAL
- en: Sigcheck
  prefs: []
  type: TYPE_NORMAL
- en: 'publisher................: Simon Tatham'
  prefs: []
  type: TYPE_NORMAL
- en: 'product..................: PuTTY suite'
  prefs: []
  type: TYPE_NORMAL
- en: 'internal name............: PuTTY'
  prefs: []
  type: TYPE_NORMAL
- en: 'copyright................: Copyright (c) 1997-2011 Simon Tatham.'
  prefs: []
  type: TYPE_NORMAL
- en: 'original name............: PuTTY'
  prefs: []
  type: TYPE_NORMAL
- en: 'file version.............: Release 0.62'
  prefs: []
  type: TYPE_NORMAL
- en: 'description..............: SSH, Telnet and Rlogin client'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-15: VirusTotal reports Sigcheck results.*'
  prefs: []
  type: TYPE_NORMAL
- en: Sigcheck’s results appear to confirm that the hash we submitted matches
  prefs: []
  type: TYPE_NORMAL
- en: a PuTTY binary uploaded by previous VirusTotal users.
  prefs: []
  type: TYPE_NORMAL
- en: We can also upload the binary Bro extracted for us, as shown in
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12-7\.
  prefs: []
  type: TYPE_NORMAL
- en: '**274** Chapter 12'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 152](index-309_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 12-7: Submit ing the binary extracted from HTTP traffic*'
  prefs: []
  type: TYPE_NORMAL
- en: 'VirusTotal knows about this binary, and it should: it’s the binary Bro'
  prefs: []
  type: TYPE_NORMAL
- en: extracted, and we just saw that the hash for it was already known to VirusTotal.
  prefs: []
  type: TYPE_NORMAL
- en: This general approach shows a powerful way to extend Bro to extract
  prefs: []
  type: TYPE_NORMAL
- en: Windows binaries from HTTP and FTP traffic. However, the current instance
  prefs: []
  type: TYPE_NORMAL
- en: of Bro is running with the previous configuration files in memory. Unless
  prefs: []
  type: TYPE_NORMAL
- en: we restart Bro, it won’t know to apply the new *local.bro* configuration file
    to the running configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '***Restarting Bro***'
  prefs: []
  type: TYPE_NORMAL
- en: Until you restart Bro, or reboot the SO system, Bro will continue running
  prefs: []
  type: TYPE_NORMAL
- en: with the original *local.bro* script loaded. In order to benefit from Bro’s
    ability to extract Windows executables from network traffic, we need to have
  prefs: []
  type: TYPE_NORMAL
- en: Bro reread its *local.bro* script. To tell Bro to process the script, use the
    broctl interface, as shown in Listing 12-16\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo broctl**u
  prefs: []
  type: TYPE_NORMAL
- en: Welcome to BroControl 1.1
  prefs: []
  type: TYPE_NORMAL
- en: Type "help" for help.
  prefs: []
  type: TYPE_NORMAL
- en: '[BroControl] > **check**v'
  prefs: []
  type: TYPE_NORMAL
- en: manager is ok.
  prefs: []
  type: TYPE_NORMAL
- en: proxy is ok.
  prefs: []
  type: TYPE_NORMAL
- en: sov-eth0-1 is ok.
  prefs: []
  type: TYPE_NORMAL
- en: '[BroControl] > **install**w'
  prefs: []
  type: TYPE_NORMAL
- en: removing old policies in /nsm/bro/spool/installed-scripts-do-not-touch/site
    ... done.
  prefs: []
  type: TYPE_NORMAL
- en: removing old policies in /nsm/bro/spool/installed-scripts-do-not-touch/auto
    ... done.
  prefs: []
  type: TYPE_NORMAL
- en: creating policy directories ... done.
  prefs: []
  type: TYPE_NORMAL
- en: installing site policies ... done.
  prefs: []
  type: TYPE_NORMAL
- en: generating cluster-layout.bro ... done.
  prefs: []
  type: TYPE_NORMAL
- en: generating local-networks.bro ... done.
  prefs: []
  type: TYPE_NORMAL
- en: Extending SO **275**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: generating broctl-config.bro ... done.
  prefs: []
  type: TYPE_NORMAL
- en: updating nodes ... done.
  prefs: []
  type: TYPE_NORMAL
- en: '[BroControl] > **restart**x'
  prefs: []
  type: TYPE_NORMAL
- en: stopping ...
  prefs: []
  type: TYPE_NORMAL
- en: stopping sov-eth0-1 ...
  prefs: []
  type: TYPE_NORMAL
- en: stopping proxy ...
  prefs: []
  type: TYPE_NORMAL
- en: stopping manager ...
  prefs: []
  type: TYPE_NORMAL
- en: starting ...
  prefs: []
  type: TYPE_NORMAL
- en: starting manager ...
  prefs: []
  type: TYPE_NORMAL
- en: starting proxy ...
  prefs: []
  type: TYPE_NORMAL
- en: starting sov-eth0-1 ...
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: '[BroControl] > **exit**y'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-16: Reconfiguring Bro using broctl*'
  prefs: []
  type: TYPE_NORMAL
- en: In Listing 12-16, broctl is started u from a terminal that launches the
  prefs: []
  type: TYPE_NORMAL
- en: broctl interface and accepts commands. Next, we run the check command v
  prefs: []
  type: TYPE_NORMAL
- en: to determine if the configuration files Bro reads are formatted properly. If
    so,
  prefs: []
  type: TYPE_NORMAL
- en: Bro reports the status as ok, and we install them w. Next, we restart Bro x,
  prefs: []
  type: TYPE_NORMAL
- en: and after seeing the components restart, we exit the broctl interface y.
  prefs: []
  type: TYPE_NORMAL
- en: The last step is to confirm Bro’s status using the NSM scripts shipped
  prefs: []
  type: TYPE_NORMAL
- en: with SO, as shown in Listing 12-17\. (You could do the same thing with the
  prefs: []
  type: TYPE_NORMAL
- en: sudo broctl status command.)
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo nsm_sensor_ps-status --only-bro**
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: Bro'
  prefs: []
  type: TYPE_NORMAL
- en: Name Type Host Status Pid Peers Started
  prefs: []
  type: TYPE_NORMAL
- en: manager manager 192.168.2.102 running 19555 2 18 Apr 00:29:37
  prefs: []
  type: TYPE_NORMAL
- en: proxy proxy 192.168.2.102 running 19603 2 18 Apr 00:29:40
  prefs: []
  type: TYPE_NORMAL
- en: sov-eth0-1 worker 192.168.2.102 running 19647 2 18 Apr 00:29:42
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: sov-eth0'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-17: Confirming Bro status using NSM scripts*'
  prefs: []
  type: TYPE_NORMAL
- en: According to the output of the nsm_sensor_ps-status --only-bro command,
  prefs: []
  type: TYPE_NORMAL
- en: Bro is running properly with the new configuration.
  prefs: []
  type: TYPE_NORMAL
- en: To test the live configuration, we’ll download another executable and
  prefs: []
  type: TYPE_NORMAL
- en: watch for entries in the Bro logs. Listing 12-18 shows commands to test
  prefs: []
  type: TYPE_NORMAL
- en: the new functionality on a production SO sensor configured to extract
  prefs: []
  type: TYPE_NORMAL
- en: Windows executables.
  prefs: []
  type: TYPE_NORMAL
- en: $ **wget http://www.etree.org/cgi-bin/counter.cgi/software/md5sum.exe**u
  prefs: []
  type: TYPE_NORMAL
- en: --2013-04-18 00:44:06-- http://www.etree.org/cgi-bin/counter.cgi/software/md5sum.exe
    Resolving www.etree.org (www.etree.org)... 152.19.134.46
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to www.etree.org (www.etree.org)|152.19.134.46|:80... connected.
  prefs: []
  type: TYPE_NORMAL
- en: HTTP request sent, awaiting response... 200 OK
  prefs: []
  type: TYPE_NORMAL
- en: 'Length: 49152 (48K) [application/octet-stream]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Saving to: `md5sum.exe'''
  prefs: []
  type: TYPE_NORMAL
- en: '**276** Chapter 12'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: 100%[======================================>] 49,152 --.-K/s in 0.1s 2013-04-18
    00:44:07 (398 KB/s) - `md5sum.exe' saved [49152/49152]
  prefs: []
  type: TYPE_NORMAL
- en: $ **grep md5sum.exe /nsm/bro/logs/current/***v
  prefs: []
  type: TYPE_NORMAL
- en: /nsm/bro/logs/current/http_eth0.log:1366245846.879854 8AwBGe9EpX 192.168.2.102
    55409
  prefs: []
  type: TYPE_NORMAL
- en: 152.19.134.46 80 1 GET www.etree.org /cgi-bin/counter.cgi/software/md5sum.
  prefs: []
  type: TYPE_NORMAL
- en: exew - Wget/1.13.4 (linux-gnu) 0 49152 200 OK - - -
  prefs: []
  type: TYPE_NORMAL
- en: (empty) - - - application/x-dosexecx eb574b236133e60c989c6f472f07827by
  prefs: []
  type: TYPE_NORMAL
- en: /nsm/bro/extracted/http/http-item_192.168.2.102:55409-152.19.134.46:80_resp_1.datz
  prefs: []
  type: TYPE_NORMAL
- en: /nsm/bro/logs/current/notice.log:1366245847.087877 8AwBGe9EpX 192.168.2.102
  prefs: []
  type: TYPE_NORMAL
- en: 55409 152.19.134.46 80 tcp HTTP::MD5 192.168.2.102
  prefs: []
  type: TYPE_NORMAL
- en: eb574b236133e60c989c6f472f07827b{ http://www.etree.org/cgi-bin/counter.cgi/software/md5sum.
  prefs: []
  type: TYPE_NORMAL
- en: exe| eb574b236133e60c989c6f472f07827b 192.168.2.102 152.19.134.46 80 -
  prefs: []
  type: TYPE_NORMAL
- en: sov-eth0-1 Notice::ACTION_LOG 6 3600.000000 F - - -
  prefs: []
  type: TYPE_NORMAL
- en: '- - - - -'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-18: Testing the new file extraction capability*'
  prefs: []
  type: TYPE_NORMAL
- en: Listing 12-18 shows two commands to validate Windows executable
  prefs: []
  type: TYPE_NORMAL
- en: extraction on a production sensor. First, we download a Windows executable
  prefs: []
  type: TYPE_NORMAL
- en: called *md5sum.exe* using the wget tool u. Once the download is complete, we
  prefs: []
  type: TYPE_NORMAL
- en: use grep to look for instances of the string md5sum in the current Bro logs
    v.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two results:'
  prefs: []
  type: TYPE_NORMAL
- en: • The first, from *http.log*, shows the download of the file w, file type x,
  prefs: []
  type: TYPE_NORMAL
- en: MD5 hash y, and path to the extracted binary z.
  prefs: []
  type: TYPE_NORMAL
- en: • The second, from *notice.log*, reproduces many of the same elements from
  prefs: []
  type: TYPE_NORMAL
- en: earlier examples, like the MD5 hash { and URL for the binary |.
  prefs: []
  type: TYPE_NORMAL
- en: The presence of these logs indicates that Bro is extracting Windows
  prefs: []
  type: TYPE_NORMAL
- en: executables from HTTP traffic, thanks to our configuration changes and
  prefs: []
  type: TYPE_NORMAL
- en: application restart.
  prefs: []
  type: TYPE_NORMAL
- en: '**using aPT1 intelligence**'
  prefs: []
  type: TYPE_NORMAL
- en: In February 2013, Mandiant released a report on a Chinese military unit
  prefs: []
  type: TYPE_NORMAL
- en: known as Advanced Persistent Threat 1 (APT1). Within China, APT1 is the
  prefs: []
  type: TYPE_NORMAL
- en: Second Bureau of the Third Department of the General Staff Directorate
  prefs: []
  type: TYPE_NORMAL
- en: of the People’s Liberation Army. Also known by its Military Unit Cover
  prefs: []
  type: TYPE_NORMAL
- en: Designator, 61398, this Army team targets English-speaking companies and
  prefs: []
  type: TYPE_NORMAL
- en: steals trade secrets, intellectual property, and other sensitive information.
  prefs: []
  type: TYPE_NORMAL
- en: In its report, Mandiant released 3000 IOCs (discussed in Chapter 9),
  prefs: []
  type: TYPE_NORMAL
- en: including domain names, IP addresses, X.509 encryption certificates, and
  prefs: []
  type: TYPE_NORMAL
- en: MD5 hashes of malware used by APT1\. Mandiant also published video of
  prefs: []
  type: TYPE_NORMAL
- en: Extending SO **277**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: the intruders interacting with victim Western computers to send phishing email,
    establish command-and-control channels, and exfiltrate data.
  prefs: []
  type: TYPE_NORMAL
- en: Although Mandiant published intelligence in OpenIOC ( *http://www*
  prefs: []
  type: TYPE_NORMAL
- en: '*.openioc.org/*) format, it was not immediately clear how network defenders'
  prefs: []
  type: TYPE_NORMAL
- en: and NSM analysts could apply those indicators to their network. Within two
  prefs: []
  type: TYPE_NORMAL
- en: days of the report’s arrival, Seth Hall from the Bro project published one
  prefs: []
  type: TYPE_NORMAL
- en: 'answer: a new Bro module called APT1, incorporating Mandiant’s APT1'
  prefs: []
  type: TYPE_NORMAL
- en: intelligence ( *https://github.com/sethhall/bro-apt1/*). Network defenders running
    NSM shops using SO now had an easy way to search for APT1 indicators on
  prefs: []
  type: TYPE_NORMAL
- en: the network.
  prefs: []
  type: TYPE_NORMAL
- en: '**Proof-of-coNcePT vS. ProDucTioN**'
  prefs: []
  type: TYPE_NORMAL
- en: Seth Hall wrote the APT1 Bro module as a proof-of-concept in the interest of
  prefs: []
  type: TYPE_NORMAL
- en: publishing something quickly for the benefit of the community . However, SO
  prefs: []
  type: TYPE_NORMAL
- en: users should be aware of several aspects of this module when using it in pro-
  prefs: []
  type: TYPE_NORMAL
- en: duction . (Seth would be the first to warn you of all these issues, but I include
  prefs: []
  type: TYPE_NORMAL
- en: them here for clarity!)
  prefs: []
  type: TYPE_NORMAL
- en: As writ en, the module identifies the use of APT1 domains in DNS traffic, but
  prefs: []
  type: TYPE_NORMAL
- en: it does not detect APT1 domains in the Host element of HTTP headers (such as
  prefs: []
  type: TYPE_NORMAL
- en: 'Host: advanbusiness.com) or proxy-style URIs (such as *GET ht p://advanbusiness*'
  prefs: []
  type: TYPE_NORMAL
- en: '*.com/some/file*) . Also, the module doesn’t look for activity involving subdomains
    (such as *subdomain.advanbusiness.com*) .'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to using the features in the APT1 Bro module, you could also
  prefs: []
  type: TYPE_NORMAL
- en: look for interesting domains in other traffic, such as SMTP, or other content
    . As
  prefs: []
  type: TYPE_NORMAL
- en: of this writing, the module doesn’t include those functions, but you can use
    the
  prefs: []
  type: TYPE_NORMAL
- en: Bro network programming language to write scripts to meet those needs . Seth
  prefs: []
  type: TYPE_NORMAL
- en: reminds users that Bro is constantly evolving, and his module will likely change
  prefs: []
  type: TYPE_NORMAL
- en: as Bro incorporates new features .
  prefs: []
  type: TYPE_NORMAL
- en: '***Using the APT1 Module***'
  prefs: []
  type: TYPE_NORMAL
- en: So far, we’ve explored how Bro works with SO to create a variety of use-
  prefs: []
  type: TYPE_NORMAL
- en: ful logs, and we’ve modified *local.bro* to enable the extraction of Windows
  prefs: []
  type: TYPE_NORMAL
- en: executables from HTTP and FTP traffic. Now we will extend Bro by adding
  prefs: []
  type: TYPE_NORMAL
- en: a new module to its configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Seth’s APT1 module consists of three policy scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '***data.bro*** This script contains a list of the domain names, MD5 hashes,
    and elements of the X.509 certificates Mandiant provided, formatted'
  prefs: []
  type: TYPE_NORMAL
- en: for consumption by Bro.
  prefs: []
  type: TYPE_NORMAL
- en: '***main.bro*** This script tells Bro’s notice framework to watch for matches
    against elements in *data.bro*.'
  prefs: []
  type: TYPE_NORMAL
- en: '***load__.bro*** This script tells Bro to load *data.bro* and *main.bro*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**278** Chapter 12'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: The module also includes a file called *README.rst*, which contains instructions
    on how to install the script, discusses new notices generated
  prefs: []
  type: TYPE_NORMAL
- en: by Bro, and offers related information.
  prefs: []
  type: TYPE_NORMAL
- en: The IOCs in *data.bro* are formatted as shown in Listing 12-19\.
  prefs: []
  type: TYPE_NORMAL
- en: umodule APT1;
  prefs: []
  type: TYPE_NORMAL
- en: 'vconst x509_serials_and_subjects: set[string, string] = {'
  prefs: []
  type: TYPE_NORMAL
- en: '["01", "C=US, ST=Some-State, O=www.virtuallythere.com, OU=new, CN=new"],'
  prefs: []
  type: TYPE_NORMAL
- en: '["0122", "C=US, ST=Some-State, O=Internet Widgits Pty Ltd, CN=IBM"],'
  prefs: []
  type: TYPE_NORMAL
- en: '*-- snip --*'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: 'wconst domains: set[string] = {'
  prefs: []
  type: TYPE_NORMAL
- en: '"advanbusiness.com",'
  prefs: []
  type: TYPE_NORMAL
- en: '"aoldaily.com",'
  prefs: []
  type: TYPE_NORMAL
- en: '"aolon1ine.com",'
  prefs: []
  type: TYPE_NORMAL
- en: '"applesoftupdate.com",'
  prefs: []
  type: TYPE_NORMAL
- en: '*-- snip --*'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: 'xconst file_md5s: set[string] = {'
  prefs: []
  type: TYPE_NORMAL
- en: '"001dd76872d80801692ff942308c64e6",'
  prefs: []
  type: TYPE_NORMAL
- en: '"002325a0a67fded0381b5648d7fe9b8e",'
  prefs: []
  type: TYPE_NORMAL
- en: '"00dbb9e1c09dbdafb360f3163ba5a3de",'
  prefs: []
  type: TYPE_NORMAL
- en: '*-- snip --*'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-19: Excerpt from APT1* data .bro'
  prefs: []
  type: TYPE_NORMAL
- en: 'The *data.bro* file contains four main parts:'
  prefs: []
  type: TYPE_NORMAL
- en: • Part u declares that this is the APT1 module.
  prefs: []
  type: TYPE_NORMAL
- en: • Part v includes X509 encryption certificate details recognized by Bro
  prefs: []
  type: TYPE_NORMAL
- en: and used by APT1\.
  prefs: []
  type: TYPE_NORMAL
- en: • Part w contains a list of malicious domains associated with APT1 activity.
  prefs: []
  type: TYPE_NORMAL
- en: • Part x features a list of MD5 hashes of malware used by APT1\.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, it’s very easy to add IOCs to this file or a copy, in order
  prefs: []
  type: TYPE_NORMAL
- en: to detect different activities. The *main.bro* file generates alert data in
    the Bro *notice.log* file, as shown in Listing 12-20\.
  prefs: []
  type: TYPE_NORMAL
- en: APT1::Domain_Hit
  prefs: []
  type: TYPE_NORMAL
- en: APT1::Certificate_Hit
  prefs: []
  type: TYPE_NORMAL
- en: APT1::File_MD5_Hit
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-20: Alert data generated by the APT1 module*'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll see one of these alerts in a live example when we test the APT1
  prefs: []
  type: TYPE_NORMAL
- en: module, but first we need to get that module and install it.
  prefs: []
  type: TYPE_NORMAL
- en: Extending SO **279**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***Instal ing the APT1 Module***'
  prefs: []
  type: TYPE_NORMAL
- en: We can test the APT1 module using techniques like the ones we tried when
  prefs: []
  type: TYPE_NORMAL
- en: enabling binary extraction from HTTP and FTP traffic. Listing 12-21 shows
  prefs: []
  type: TYPE_NORMAL
- en: this process in action.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo apt-get install git**u
  prefs: []
  type: TYPE_NORMAL
- en: -- *snip* --
  prefs: []
  type: TYPE_NORMAL
- en: $ **cd /opt/bro/share/bro/site/**
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo git clone git://github.com/sethhall/bro-apt1.git apt1**v
  prefs: []
  type: TYPE_NORMAL
- en: Cloning into 'apt1'...
  prefs: []
  type: TYPE_NORMAL
- en: 'remote: Counting objects: 12, done.'
  prefs: []
  type: TYPE_NORMAL
- en: 'remote: Compressing objects: 100% (10/10), done.'
  prefs: []
  type: TYPE_NORMAL
- en: 'remote: Total 12 (delta 2), reused 11 (delta 1)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Receiving objects: 100% (12/12), 32.82 KiB, done.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Resolving deltas: 100% (2/2), done.'
  prefs: []
  type: TYPE_NORMAL
- en: $ **ls**
  prefs: []
  type: TYPE_NORMAL
- en: apt1 local.bro.orig local-proxy.bro
  prefs: []
  type: TYPE_NORMAL
- en: local.bro local-manager.bro local-worker.bro
  prefs: []
  type: TYPE_NORMAL
- en: $ **cd apt1**
  prefs: []
  type: TYPE_NORMAL
- en: $ **ls**
  prefs: []
  type: TYPE_NORMAL
- en: data.bro __load__.bro main.bro README.rst
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-21: Instal ing Git and obtaining the APT1 module*'
  prefs: []
  type: TYPE_NORMAL
- en: To acquire the APT1 module, first install the Git version control soft-
  prefs: []
  type: TYPE_NORMAL
- en: ware u, and then clone the Git repository of Seth Hall’s APT module v.
  prefs: []
  type: TYPE_NORMAL
- en: Once the APT1 module has been downloaded into the */opt/bro/share/*
  prefs: []
  type: TYPE_NORMAL
- en: '*bro/site/* directory, tell Bro about it by adding the following line to the
    bottom of *local.bro*:'
  prefs: []
  type: TYPE_NORMAL
- en: '@load apt1'
  prefs: []
  type: TYPE_NORMAL
- en: With *local.bro* modified, we’re almost ready to test the APT1 module, but
  prefs: []
  type: TYPE_NORMAL
- en: we still need to take one more step.
  prefs: []
  type: TYPE_NORMAL
- en: '***Generating Traffic to Test the APT1 Module***'
  prefs: []
  type: TYPE_NORMAL
- en: To test the APT1 module, we launch a terminal on our sensor and tell
  prefs: []
  type: TYPE_NORMAL
- en: Tcpdump to capture traffic. We apply a BPF to focus on traffic to and from
  prefs: []
  type: TYPE_NORMAL
- en: port 53 that involves our test system 192.168.2.102\. Tcpdump will save what
  prefs: []
  type: TYPE_NORMAL
- en: it sees to a trace file called *port53.pcap*.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo tcpdump -n -i eth0 -s 0 -w port53.pcap port 53 and host 192.168.2.102**
  prefs: []
  type: TYPE_NORMAL
- en: '**280** Chapter 12'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: In a second terminal, query for one of the domains listed in the APT1
  prefs: []
  type: TYPE_NORMAL
- en: '*data.bro* policy script *advanbusiness.com*, as shown in Listing 12-22\.'
  prefs: []
  type: TYPE_NORMAL
- en: $ **host advanbusiness.com**u
  prefs: []
  type: TYPE_NORMAL
- en: advanbusiness.com has address 50.63.202.91v
  prefs: []
  type: TYPE_NORMAL
- en: advanbusiness.com mail is handled by 0 smtp.secureserver.net.
  prefs: []
  type: TYPE_NORMAL
- en: advanbusiness.com mail is handled by 10 mailstore1.secureserver.net.
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-22: Performing a DNS query for* advanbusiness .com'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we use the Linux utility host to query for *advanbusiness.com* u, and
  prefs: []
  type: TYPE_NORMAL
- en: see that the result is the IP address 50.63.202.91 v.
  prefs: []
  type: TYPE_NORMAL
- en: Returning to Tcpdump, we stop the capture with ctrl-C and review the
  prefs: []
  type: TYPE_NORMAL
- en: results, as shown in Listing 12-23\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **tcpdump -n -r port53.pcap**
  prefs: []
  type: TYPE_NORMAL
- en: reading from file port53.pcap, link-type EN10MB (Ethernet)
  prefs: []
  type: TYPE_NORMAL
- en: '14:30:15.622379 IP 192.168.2.102.57097 > 172.16.2.1.53: 57373+ A? advanbusiness.com.u
    (35) 14:30:15.762833 IP 172.16.2.1.53 > 192.168.2.102.57097: 57373 1/0/0 A 50.63.202.91v
    (51) 14:30:15.765342 IP 192.168.2.102.58378 > 172.16.2.1.53: 42025+ AAAA? advanbusiness.com.
    (35) 14:30:15.870230 IP 172.16.2.1.53 > 192.168.2.102.58378: 42025 0/1/0 (103)'
  prefs: []
  type: TYPE_NORMAL
- en: '14:30:15.872373 IP 192.168.2.102.42336 > 172.16.2.1.53: 29779+ MX? advanbusiness.com.
    (35) 14:30:15.989506 IP 172.16.2.1.53 > 192.168.2.102.42336: 29779 2/0/2 MX smtp.secureserver.net.'
  prefs: []
  type: TYPE_NORMAL
- en: 0, MX mailstore1.secureserver.net. 10 (131)
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-23: DNS query for* advanbusiness .com'
  prefs: []
  type: TYPE_NORMAL
- en: Listing 12-23 shows the query for *advanbusiness.com* u, followed by the
  prefs: []
  type: TYPE_NORMAL
- en: 'result: IP address 50.63.202.91 v. With this traffic, we can now test the'
  prefs: []
  type: TYPE_NORMAL
- en: APT1 module.
  prefs: []
  type: TYPE_NORMAL
- en: '***Testing the APT1 Module***'
  prefs: []
  type: TYPE_NORMAL
- en: To test the APT1 module, we run Bro against the trace file we just captured.
  prefs: []
  type: TYPE_NORMAL
- en: Listing 12-24 shows the result.
  prefs: []
  type: TYPE_NORMAL
- en: $ sudo bro -r port53.pcapu /opt/bro/share/bro/site/local.brov
  prefs: []
  type: TYPE_NORMAL
- en: 'WARNING: No Site::local_nets have been defined. It''s usually a good idea to'
  prefs: []
  type: TYPE_NORMAL
- en: define your local networks.
  prefs: []
  type: TYPE_NORMAL
- en: 'WARNING: Template value remaining in BPFConf filename: /etc/nsm/{{hostname}}-'
  prefs: []
  type: TYPE_NORMAL
- en: '{{interface}}/bpf-bro.conf (/opt/bro/share/bro/securityonion/./bpfconf.bro,'
  prefs: []
  type: TYPE_NORMAL
- en: line 99)
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-24: Running Bro against the saved DNS traffic*'
  prefs: []
  type: TYPE_NORMAL
- en: Listing 12-24 shows Bro reading a network trace u, while the pres-
  prefs: []
  type: TYPE_NORMAL
- en: ence of the *local.bro* v file in the command line tells Bro to read that file
  prefs: []
  type: TYPE_NORMAL
- en: for additional configuration information. We can now see which logs Bro
  prefs: []
  type: TYPE_NORMAL
- en: generated.
  prefs: []
  type: TYPE_NORMAL
- en: Extending SO **281**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: First, we examine the contents of the current working directory, as
  prefs: []
  type: TYPE_NORMAL
- en: shown in Listing 12-25\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **ls -al**
  prefs: []
  type: TYPE_NORMAL
- en: total 52
  prefs: []
  type: TYPE_NORMAL
- en: drwxrwxr-x 3 soe soe 4096 Apr 18 14:52 .
  prefs: []
  type: TYPE_NORMAL
- en: drwxr-xr-x 33 soe soe 4096 Apr 18 14:52 ..
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 278 Apr 18 14:52 capture_loss.log
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 865 Apr 18 14:52 conn.log
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 932 Apr 18 14:52 dns.log
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 8020 Apr 18 14:52 loaded_scripts.log
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 864 Apr 18 14:52 notice.logu
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 1128 Apr 18 14:52 notice_policy.log
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 251 Apr 18 14:52 packet_filter.log
  prefs: []
  type: TYPE_NORMAL
- en: -rw-rw-r-- 1 soe soe 762 Apr 18 14:52 port53.pcap
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 951 Apr 18 14:52 reporter.log
  prefs: []
  type: TYPE_NORMAL
- en: drwx------ 3 root root 4096 Apr 18 14:52 .state
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-25: Logs created by running Bro against the saved HTTP traffic*'
  prefs: []
  type: TYPE_NORMAL
- en: Listing 12-25 shows a variety of files created when Bro processed the net-
  prefs: []
  type: TYPE_NORMAL
- en: work trace. Let’s look at the *notice.log* u to see if the APT1 module detected
    the DNS query we made for the reportedly malicious *advanbusiness .com*
  prefs: []
  type: TYPE_NORMAL
- en: domain. Listing 12-26 shows the output.
  prefs: []
  type: TYPE_NORMAL
- en: $ **cat notice.log | bro-cut -C -d**
  prefs: []
  type: TYPE_NORMAL
- en: '#separator \x09'
  prefs: []
  type: TYPE_NORMAL
- en: '#set_separator ,'
  prefs: []
  type: TYPE_NORMAL
- en: '#empty_field (empty)'
  prefs: []
  type: TYPE_NORMAL
- en: '#unset_field -'
  prefs: []
  type: TYPE_NORMAL
- en: '#path notice'
  prefs: []
  type: TYPE_NORMAL
- en: '#open 2013-04-18-14-52-57'
  prefs: []
  type: TYPE_NORMAL
- en: '#fields ts uid id.orig_h id.orig_p id.resp_h id.resp_p proto note msg sub src
    dst p n peer_descr actions policy_items suppress_for dropped remote_location.country_code
    remote_location.region remote_'
  prefs: []
  type: TYPE_NORMAL
- en: location.city remote_location.latitude remote_location.longitude metric_
  prefs: []
  type: TYPE_NORMAL
- en: index.host metric_index.str metric_index.network
  prefs: []
  type: TYPE_NORMAL
- en: '#types string string addr port addr port enum enum string string addr addr
    port count string table[enum] table[count] interval bool string string string
    double double addr string subnet'
  prefs: []
  type: TYPE_NORMAL
- en: 2013-04-18T14:30:15+0000 IVCYGEfpRya 192.168.2.102 57097 172.16.2.1 53
  prefs: []
  type: TYPE_NORMAL
- en: 'udp APT1::Domain_Hitu A domain from the APT1 report seen: advanbusiness.comv'
  prefs: []
  type: TYPE_NORMAL
- en: '- 192.168.2.102 172.16.2.1 53 - bro Notice::ACTION_LOG 6'
  prefs: []
  type: TYPE_NORMAL
- en: 3600.000000 F - - - - - - - -
  prefs: []
  type: TYPE_NORMAL
- en: '#close 2013-04-18-14-52-57'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-26: Contents of the Bro* notice .log *file*'
  prefs: []
  type: TYPE_NORMAL
- en: '**282** Chapter 12'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: Listing 12-26 shows Bro reporting an APT::Domain_hit alert u, followed by information
    about the domain seen, *advanbusiness.com* v. Our test was
  prefs: []
  type: TYPE_NORMAL
- en: successful, but this was only a test. To make Bro run the new configuration,
  prefs: []
  type: TYPE_NORMAL
- en: we need to restart Bro, as shown in Listing 12-27\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo broctl install && sudo broctl restart**
  prefs: []
  type: TYPE_NORMAL
- en: removing old policies in /nsm/bro/spool/installed-scripts-do-not-touch/site
    ... done.
  prefs: []
  type: TYPE_NORMAL
- en: removing old policies in /nsm/bro/spool/installed-scripts-do-not-touch/auto
    ... done.
  prefs: []
  type: TYPE_NORMAL
- en: creating policy directories ... done.
  prefs: []
  type: TYPE_NORMAL
- en: installing site policies ... done.
  prefs: []
  type: TYPE_NORMAL
- en: generating cluster-layout.bro ... done.
  prefs: []
  type: TYPE_NORMAL
- en: generating local-networks.bro ... done.
  prefs: []
  type: TYPE_NORMAL
- en: generating broctl-config.bro ... done.
  prefs: []
  type: TYPE_NORMAL
- en: updating nodes ... done.
  prefs: []
  type: TYPE_NORMAL
- en: stopping ...
  prefs: []
  type: TYPE_NORMAL
- en: stopping soe-eth0-1 ...
  prefs: []
  type: TYPE_NORMAL
- en: stopping proxy ...
  prefs: []
  type: TYPE_NORMAL
- en: stopping manager ...
  prefs: []
  type: TYPE_NORMAL
- en: starting ...
  prefs: []
  type: TYPE_NORMAL
- en: starting manager ...
  prefs: []
  type: TYPE_NORMAL
- en: starting proxy ...
  prefs: []
  type: TYPE_NORMAL
- en: starting soe-eth0-1 ...
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-27: Restarting Bro from the command line*'
  prefs: []
  type: TYPE_NORMAL
- en: Remember to check Bro’s status using the **sudo nsm_sensor_ps-status**
  prefs: []
  type: TYPE_NORMAL
- en: '**--only-bro** command as well.'
  prefs: []
  type: TYPE_NORMAL
- en: '**reporting downloads of Malicious binaries**'
  prefs: []
  type: TYPE_NORMAL
- en: As you learned earlier, Bro can calculate MD5 hashes of Windows executa-
  prefs: []
  type: TYPE_NORMAL
- en: bles downloaded over HTTP. In this section, we’ll examine how SO and Bro
  prefs: []
  type: TYPE_NORMAL
- en: integrate with a third-party malware hash registry to warn analysts when
  prefs: []
  type: TYPE_NORMAL
- en: users download malicious software using a database offered by the Team
  prefs: []
  type: TYPE_NORMAL
- en: Cymru organization.
  prefs: []
  type: TYPE_NORMAL
- en: '***Using the Team Cymru Malware Hash Registry***'
  prefs: []
  type: TYPE_NORMAL
- en: Team Cymru, formally known as *Team Cymru Research NFP*, describes itself
  prefs: []
  type: TYPE_NORMAL
- en: as “a specialized Internet security research firm and 501(c)3 non-profit
  prefs: []
  type: TYPE_NORMAL
- en: dedicated to making the Internet more secure” ( *http://www.team-cymru.*
  prefs: []
  type: TYPE_NORMAL
- en: '*org/About/*). We can use their free Malware Hash Registry (MHR, at *http://*'
  prefs: []
  type: TYPE_NORMAL
- en: '*www.team-cymru.org/Services/MHR/*) to match MD5 hashes against known'
  prefs: []
  type: TYPE_NORMAL
- en: malware.
  prefs: []
  type: TYPE_NORMAL
- en: Most analysts query the MHR via DNS. Listing 12-28 shows how to use
  prefs: []
  type: TYPE_NORMAL
- en: the Linux dig command to run DNS TXT record queries for a malware hash
  prefs: []
  type: TYPE_NORMAL
- en: against MHR.
  prefs: []
  type: TYPE_NORMAL
- en: Extending SO **283**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: $ **dig +short 733a48a9cb49651d72fe824ca91e8d00.malware.hash.cymru.com TXT**u
  prefs: []
  type: TYPE_NORMAL
- en: '"1277221946v 79w"'
  prefs: []
  type: TYPE_NORMAL
- en: $ **date -d @1277221946**x
  prefs: []
  type: TYPE_NORMAL
- en: Tue Jun 22 15:52:26 UTC 2010y
  prefs: []
  type: TYPE_NORMAL
- en: $ **dig +short 1e39efe30b02fd96b10785b49e23913b.malware.hash.cymru.com TXT**z
  prefs: []
  type: TYPE_NORMAL
- en: $ **whois -h hash.cymru.com 1e39efe30b02fd96b10785b49e23913b**{
  prefs: []
  type: TYPE_NORMAL
- en: 1e39efe30b02fd96b10785b49e23913b 1366297928 NO_DATA|
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-28: Querying the MHR via TXT and whois records*'
  prefs: []
  type: TYPE_NORMAL
- en: The first example shows a DNS TXT records query for malware with hash
  prefs: []
  type: TYPE_NORMAL
- en: 733a48a9cb49651d72fe824ca91e8d00 u. (Search VirusTotal to see what it is!) The
  prefs: []
  type: TYPE_NORMAL
- en: first part of the response shows the date when the MHR last saw the sample v.
  prefs: []
  type: TYPE_NORMAL
- en: The second part of the response is a rough antivirus detection metric, as
  prefs: []
  type: TYPE_NORMAL
- en: a percentage w. We convert the timestamp from Unix epoch time to
  prefs: []
  type: TYPE_NORMAL
- en: human-readable format with the date command x, and see that it was
  prefs: []
  type: TYPE_NORMAL
- en: June 22, 2010 y.
  prefs: []
  type: TYPE_NORMAL
- en: The second example shows what happens when you query the MHR
  prefs: []
  type: TYPE_NORMAL
- en: and it sends no response z. The hash supplied is the value for the Firefox
  prefs: []
  type: TYPE_NORMAL
- en: binary. Because the MHR has no data on this hash, we switch to the MHR
  prefs: []
  type: TYPE_NORMAL
- en: WHOIS query functionality {. The NO_DATA | response proves the MHR
  prefs: []
  type: TYPE_NORMAL
- en: doesn’t know the supplied hash.
  prefs: []
  type: TYPE_NORMAL
- en: The example in Listing 12-29 shows another query using dig, but not
  prefs: []
  type: TYPE_NORMAL
- en: requesting a TXT record.
  prefs: []
  type: TYPE_NORMAL
- en: $ **dig +short 733a48a9cb49651d72fe824ca91e8d00.malware.hash.cymru.com**
  prefs: []
  type: TYPE_NORMAL
- en: 127.0.0.2
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-29: Querying the MHR via the default A record*'
  prefs: []
  type: TYPE_NORMAL
- en: We query for the same first hash from Listing 12-28, but we let the
  prefs: []
  type: TYPE_NORMAL
- en: default be an A record.
  prefs: []
  type: TYPE_NORMAL
- en: A query for an A record asks a DNS server to return an IP address for
  prefs: []
  type: TYPE_NORMAL
- en: the requested fully qualified domain name. In contrast, a query for a PTR
  prefs: []
  type: TYPE_NORMAL
- en: record asks a DNS server to return a fully qualified domain name for the
  prefs: []
  type: TYPE_NORMAL
- en: requested IP address. A query for a TXT record asks a DNS server to reply
  prefs: []
  type: TYPE_NORMAL
- en: with any text records associated with a domain name.
  prefs: []
  type: TYPE_NORMAL
- en: Our only result is the IP address 127.0.0.2\. This is the MHR’s way of
  prefs: []
  type: TYPE_NORMAL
- en: responding to A record queries that have a match. If we want more informa-
  prefs: []
  type: TYPE_NORMAL
- en: tion about a match, we need to run a DNS query for a TXT record, as shown
  prefs: []
  type: TYPE_NORMAL
- en: earlier in Listing 12-28\.
  prefs: []
  type: TYPE_NORMAL
- en: '**284** Chapter 12'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 153](index-319_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '***The MHR and SO: Active by Default***'
  prefs: []
  type: TYPE_NORMAL
- en: By default, Bro on SO is configured to work with the MHR to help detect
  prefs: []
  type: TYPE_NORMAL
- en: malicious downloads. SO relies on Bro to calculate MD5 hashes of Windows
  prefs: []
  type: TYPE_NORMAL
- en: executables downloaded over HTTP, and that Bro automatically submits
  prefs: []
  type: TYPE_NORMAL
- en: those hashes to the MHR. We can see this activity in action if we query Bro
  prefs: []
  type: TYPE_NORMAL
- en: logs via ELSA, as shown in Figure 12-8\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 12-8: Querying ELSA for MHR lookup*'
  prefs: []
  type: TYPE_NORMAL
- en: In Figure 12-8, we query ELSA for 1e39efe30b02fd96b10785b49e23913b
  prefs: []
  type: TYPE_NORMAL
- en: .malware.hash.cymru.com—the MD5 hash of the Firefox binary from an earlier
  prefs: []
  type: TYPE_NORMAL
- en: example (1e39efe30b02fd196b10785b49e23913b), plus the domain *malware.hash*
  prefs: []
  type: TYPE_NORMAL
- en: '*.cymru.com*. Figure 12-8 shows eight results, all of which are pairs. The
    first entry in the pair is a lookup for an A record for IPv4, and the second entry
    is'
  prefs: []
  type: TYPE_NORMAL
- en: a lookup for an AAAA record for IPv6\. Thus, we have four unique queries for
  prefs: []
  type: TYPE_NORMAL
- en: this particular MD5 hash.
  prefs: []
  type: TYPE_NORMAL
- en: We can use one of two approaches to determine if any of the lookups
  prefs: []
  type: TYPE_NORMAL
- en: 'returned results:'
  prefs: []
  type: TYPE_NORMAL
- en: • Inspect the results returned by ELSA directly. For example, a result
  prefs: []
  type: TYPE_NORMAL
- en: with no indication of malicious entries in the MHR looks like |1
  prefs: []
  type: TYPE_NORMAL
- en: '|C_INTERNET|1|A|-|-|F|F|T|F|0|-|- for IPv4 and |1|C_INTERNET|28|AAAA|-'
  prefs: []
  type: TYPE_NORMAL
- en: '|-|F|F|T|F|0|-|- for IPv6\. We see these results for each of the entries'
  prefs: []
  type: TYPE_NORMAL
- en: in Figure 12-8, indicating that there are no matches in the MHR. This
  prefs: []
  type: TYPE_NORMAL
- en: tells us that the MHR doesn’t think the download of a binary with MD5
  prefs: []
  type: TYPE_NORMAL
- en: 1e39efe30b02fd96b10785b49e23913b is malicious.
  prefs: []
  type: TYPE_NORMAL
- en: • Query ELSA for Malware_Hash_Registry_Match. This is part of the event
  prefs: []
  type: TYPE_NORMAL
- en: returned by Bro when it queries the MHR and gets a positive response.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the query finds no records in ELSA for a binary with hash
  prefs: []
  type: TYPE_NORMAL
- en: 1e39efe30b02fd96b10785b49e23913b.
  prefs: []
  type: TYPE_NORMAL
- en: Extending SO **285**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 154](index-320_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '***The MHR and SO vs. a Malicious Download***'
  prefs: []
  type: TYPE_NORMAL
- en: Because SO and Bro query the MHR by default, in production, any match
  prefs: []
  type: TYPE_NORMAL
- en: for a malicious download will appear in ELSA and the underlying Bro logs.
  prefs: []
  type: TYPE_NORMAL
- en: For example, suppose that one day you’re working with SO and your
  prefs: []
  type: TYPE_NORMAL
- en: NSM data, and you run a query for Malware_Hash_Registry_Match. You get the
  prefs: []
  type: TYPE_NORMAL
- en: result shown in Figure 12-9\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 12-9: Query result for Malware_Hash_Registry_Match*'
  prefs: []
  type: TYPE_NORMAL
- en: I’ve reproduced the same log entry as text only in Listing 12-30 for easy
  prefs: []
  type: TYPE_NORMAL
- en: reference.
  prefs: []
  type: TYPE_NORMAL
- en: 1366293016.555895 - 192.168.2.108u 62585 205.186.148.46v 80 tcp HTTP::Malware_Hash_Registry_Matchw
    192.168.2.108 b4f990cad1d20efab410e98fc7a6c81bx http://www.taosecurity.com/helpdesk.exey
    - 192.168.2.108 205.186.148.46
  prefs: []
  type: TYPE_NORMAL
- en: 80- soe-eth0-1 Notice::ACTION_LOG 6 3600.000000 F
  prefs: []
  type: TYPE_NORMAL
- en: '- - --- - - -'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-30: Log entry for Malware_Hash_Registry_Match*'
  prefs: []
  type: TYPE_NORMAL
- en: This log result from the Bro *notice.log* file indicates that a com-
  prefs: []
  type: TYPE_NORMAL
- en: puter with IP address 192.168.2.108 u visited 205.186.148.46 v and
  prefs: []
  type: TYPE_NORMAL
- en: triggered an HTTP::Malware_Hash_Registry_Match w alert for MD5 hash
  prefs: []
  type: TYPE_NORMAL
- en: b4f990cad1d20efab410e98fc7a6c81b x from *www.taosecurity.com* and the
  prefs: []
  type: TYPE_NORMAL
- en: '*helpdesk.exe* file y. We can learn more about this connection if we'
  prefs: []
  type: TYPE_NORMAL
- en: query ELSA for the filename *helpdesk.exe*, as shown in Figure 12-10\.
  prefs: []
  type: TYPE_NORMAL
- en: 'The results show three records:'
  prefs: []
  type: TYPE_NORMAL
- en: • The first record in Figure 12-10 is Bro’s way of telling us that it com-
  prefs: []
  type: TYPE_NORMAL
- en: puted an MD5 hash of the *helpdesk.exe* binary.
  prefs: []
  type: TYPE_NORMAL
- en: • The second record is the same as what we saw in the MD5 lookup.
  prefs: []
  type: TYPE_NORMAL
- en: • The third record shows that Bro extracted the binary from the HTTP
  prefs: []
  type: TYPE_NORMAL
- en: traffic and saved it as */nsm/bro/extracted/http/http-item_192.168.2.108:*
  prefs: []
  type: TYPE_NORMAL
- en: '*62585-205.186.148.46:80_resp_1.dat*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**286** Chapter 12'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 155](index-321_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 156](index-321_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 12-10: Querying ELSA for* helpdesk .exe'
  prefs: []
  type: TYPE_NORMAL
- en: '***Identifying the Binary***'
  prefs: []
  type: TYPE_NORMAL
- en: We know that Bro and SO performed a lookup for the binary based on an
  prefs: []
  type: TYPE_NORMAL
- en: MD5 hash, and we know that a match was found because Bro reported a
  prefs: []
  type: TYPE_NORMAL
- en: Malware_Hash_Registry_Match event. We can take a different look at this result
  prefs: []
  type: TYPE_NORMAL
- en: by querying ELSA using the hash and domain method demonstrated ear-
  prefs: []
  type: TYPE_NORMAL
- en: lier in Figure 12-8\.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll modify the query slightly by adding a +127.0.0.2 after the hash
  prefs: []
  type: TYPE_NORMAL
- en: and domain. The plus sign (+) tells ELSA to query for the term after it—
  prefs: []
  type: TYPE_NORMAL
- en: specifically 127.0.0.2, which is the IP address that the MHR returns when
  prefs: []
  type: TYPE_NORMAL
- en: Bro queries it for malware hashes. (We saw this difference in Listing 12-28.)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12-11 shows the result of looking for MHR matches for the hash and
  prefs: []
  type: TYPE_NORMAL
- en: domain b4f990cad1d20efab410e98fc7a6c81b.malware.hash.cymru.com.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 12-11: Querying ELSA for b4f990cad1d20efab410e98fc7a6c81b.malware.hash.cymru
    .com +127.0.0.2*'
  prefs: []
  type: TYPE_NORMAL
- en: Extending SO **287**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 157](index-322_1.png)'
  prefs: []
  type: TYPE_IMG
- en: We get one result. The presence of the 127.0.0.2 reply tells us that the
  prefs: []
  type: TYPE_NORMAL
- en: MHR recognized the hash.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we could take a few different paths to identify the binary:'
  prefs: []
  type: TYPE_NORMAL
- en: • Because the binary is stored in */nsm/bro/extracted/http/http-item_*
  prefs: []
  type: TYPE_NORMAL
- en: '*192.168.2.108:62585-205.186.148.46:80_resp_1.dat*, we could perform'
  prefs: []
  type: TYPE_NORMAL
- en: manual analysis.
  prefs: []
  type: TYPE_NORMAL
- en: • We could submit the extracted binary to a third-party engine like VirusTotal.
  prefs: []
  type: TYPE_NORMAL
- en: • We could submit the hash to VirusTotal, which returns the results
  prefs: []
  type: TYPE_NORMAL
- en: shown in Figure 12-12\.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 12-12: VirusTotal results for submit ing hash b4f990cad1d20efab410e98fc7a6c81b*
    VirusTotal identifies the malware as a Poison Ivy variant—a popular'
  prefs: []
  type: TYPE_NORMAL
- en: remote-access Trojan (RAT) available from several websites. We hope the
  prefs: []
  type: TYPE_NORMAL
- en: user identified through this case downloaded the tool only for testing pur-
  prefs: []
  type: TYPE_NORMAL
- en: poses. If not, it’s time to begin looking for signs of outbound command-
  prefs: []
  type: TYPE_NORMAL
- en: and-control traffic, as described in Chapters 10 and 11\. Good hunting!
  prefs: []
  type: TYPE_NORMAL
- en: '**conclusion**'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter has introduced you to four ways to extend and make better
  prefs: []
  type: TYPE_NORMAL
- en: use of functions packaged with SO. We covered how Bro creates MD5
  prefs: []
  type: TYPE_NORMAL
- en: hashes for executables, and showed how to use them with VirusTotal. We
  prefs: []
  type: TYPE_NORMAL
- en: configured Bro to extract executable binaries from network traffic, and
  prefs: []
  type: TYPE_NORMAL
- en: demonstrated how to integrate external intelligence from Mandiant’s APT1
  prefs: []
  type: TYPE_NORMAL
- en: report. We also generated alerts in Bro to simulate suspicious DNS lookups
  prefs: []
  type: TYPE_NORMAL
- en: for an APT1 domain. We finished the chapter by showing how SO reports
  prefs: []
  type: TYPE_NORMAL
- en: and extracts the download of a malicious binary in production, which we
  prefs: []
  type: TYPE_NORMAL
- en: learned was the Poison Ivy RAT.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll take a look at two challenges to conducting
  prefs: []
  type: TYPE_NORMAL
- en: 'NSM: proxies and checksums.'
  prefs: []
  type: TYPE_NORMAL
- en: '**288** Chapter 12'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**13**'
  prefs: []
  type: TYPE_NORMAL
- en: '**P r o x i e S a N D c h e c k S u M S**'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter, aptly number 13, examines
  prefs: []
  type: TYPE_NORMAL
- en: two unlucky features of conducting NSM
  prefs: []
  type: TYPE_NORMAL
- en: 'on real networks: proxies and checksums.'
  prefs: []
  type: TYPE_NORMAL
- en: The term *proxy* refers to a piece of network infra-
  prefs: []
  type: TYPE_NORMAL
- en: structure that some companies use to observe, control,
  prefs: []
  type: TYPE_NORMAL
- en: and accelerate Internet usage. The term *checksum*,
  prefs: []
  type: TYPE_NORMAL
- en: in the context of this chapter, refers to an error detection mechanism
  prefs: []
  type: TYPE_NORMAL
- en: offered by the Internet Protocol (IP). This chapter describes some ways
  prefs: []
  type: TYPE_NORMAL
- en: to cope with the problems caused by each of these features in operational
  prefs: []
  type: TYPE_NORMAL
- en: environments.
  prefs: []
  type: TYPE_NORMAL
- en: '**Proxies**'
  prefs: []
  type: TYPE_NORMAL
- en: Web proxies are especially popular in corporate environments. One type
  prefs: []
  type: TYPE_NORMAL
- en: of web proxy is tuned to handle traffic from web clients destined for web
  prefs: []
  type: TYPE_NORMAL
- en: servers.
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: Some network and security administrators like proxies because they
  prefs: []
  type: TYPE_NORMAL
- en: provide performance and security benefits. With proxies, users sometimes
  prefs: []
  type: TYPE_NORMAL
- en: enjoy better access to content because that content is cached the first time
  prefs: []
  type: TYPE_NORMAL
- en: any user views it, with subsequent users enjoying fast access to the cached
  prefs: []
  type: TYPE_NORMAL
- en: copy. When users must send traffic through a proxy, administrators can try
  prefs: []
  type: TYPE_NORMAL
- en: to protect the network by limiting their access to malicious sites.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13-1 shows how a web proxy might work in a corporate environ-
  prefs: []
  type: TYPE_NORMAL
- en: ment. Here, a web client with IP address 192.168.2.108 visits a web server
  prefs: []
  type: TYPE_NORMAL
- en: at 205.186.148.46\. The web client first establishes a session with the proxy,
  prefs: []
  type: TYPE_NORMAL
- en: labeled CONNECTION 1\. The proxy then connects to the web server on
  prefs: []
  type: TYPE_NORMAL
- en: behalf of the client. That session is labeled CONNECTION 2\. All traffic
  prefs: []
  type: TYPE_NORMAL
- en: between the client and server occurs over independent connections like
  prefs: []
  type: TYPE_NORMAL
- en: these.
  prefs: []
  type: TYPE_NORMAL
- en: CONNECTION 1
  prefs: []
  type: TYPE_NORMAL
- en: CONNECTION 2
  prefs: []
  type: TYPE_NORMAL
- en: Location X
  prefs: []
  type: TYPE_NORMAL
- en: Location Y
  prefs: []
  type: TYPE_NORMAL
- en: Internet
  prefs: []
  type: TYPE_NORMAL
- en: Web Client
  prefs: []
  type: TYPE_NORMAL
- en: Proxy
  prefs: []
  type: TYPE_NORMAL
- en: Web Server
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.2.108
  prefs: []
  type: TYPE_NORMAL
- en: 'Internal: 192.168.2.1'
  prefs: []
  type: TYPE_NORMAL
- en: 205.186.148.46
  prefs: []
  type: TYPE_NORMAL
- en: 'External: 172.16.2.1'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 13-1: Sample web proxy setup*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Proxies and Visibility***'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in Figure 13-1, some elements of visibility are lost when
  prefs: []
  type: TYPE_NORMAL
- en: administrators deploy proxies. Instead of seeing only a true source IP
  prefs: []
  type: TYPE_NORMAL
- en: address for the web client and a true destination IP address for the web
  prefs: []
  type: TYPE_NORMAL
- en: server, we also see internal and external IP addresses for the proxy. The
  prefs: []
  type: TYPE_NORMAL
- en: web client speaks to the proxy, which then speaks to the web server. When
  prefs: []
  type: TYPE_NORMAL
- en: the web server replies, the direction is reversed.
  prefs: []
  type: TYPE_NORMAL
- en: For example, an NSM platform watching traffic at location X in
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13-1 sees traffic with source IP address 192.168.2.108 and destina-
  prefs: []
  type: TYPE_NORMAL
- en: tion IP address 192.168.2.1\. An NSM platform at location Y sees traffic with
  prefs: []
  type: TYPE_NORMAL
- en: source IP address 172.16.2.1 and destination IP address 205.186.148.46\.
  prefs: []
  type: TYPE_NORMAL
- en: There doesn’t seem to be a single location where one sensor can see both
  prefs: []
  type: TYPE_NORMAL
- en: the true source IP address (192.168.2.108) and true destination IP address
  prefs: []
  type: TYPE_NORMAL
- en: (205.186.148.46) at once. This is a problem for analysts who rely on this
  prefs: []
  type: TYPE_NORMAL
- en: information to detect and respond to intruders.
  prefs: []
  type: TYPE_NORMAL
- en: Without access to sufficient logs, NSM analysts may actually see *less*
  prefs: []
  type: TYPE_NORMAL
- en: when proxies are deployed. Sometimes they can access proxy logs, but those
  prefs: []
  type: TYPE_NORMAL
- en: may not be easy to read. Sometimes analysts can capture network traffic
  prefs: []
  type: TYPE_NORMAL
- en: directly on the proxy itself. For example, the proxy in Figure 13-1 is run-
  prefs: []
  type: TYPE_NORMAL
- en: ning the pfSense ( *http://www.pfsense.org/*) firewall with the Squid ( *http://*
  prefs: []
  type: TYPE_NORMAL
- en: '*www.squid-cache.org/*) web proxy. Because the specific platform is a FreeBSD'
  prefs: []
  type: TYPE_NORMAL
- en: system in this example, we can collect traffic directly on the server. That
    is
  prefs: []
  type: TYPE_NORMAL
- en: not usually the case in production, but we will leverage this situation in this
  prefs: []
  type: TYPE_NORMAL
- en: chapter to gather network traffic and better understand the situation.
  prefs: []
  type: TYPE_NORMAL
- en: '**290** Chapter 13'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you want to troubleshoot a perceived problem with the proxy
  prefs: []
  type: TYPE_NORMAL
- en: in Figure 13-1\. You decide to log full content traffic in pcap format using
  prefs: []
  type: TYPE_NORMAL
- en: Tcpdump. You collect traffic from the internal interface in one trace file
  prefs: []
  type: TYPE_NORMAL
- en: called *bej-int.pcap*. You then collect traffic in a separate session from the
  prefs: []
  type: TYPE_NORMAL
- en: external interface in *bej-ext.pcap*. While sniffing each interface, you use
    a
  prefs: []
  type: TYPE_NORMAL
- en: web client on 192.168.2.108 to visit the *www.bejtlich.net* web server.
  prefs: []
  type: TYPE_NORMAL
- en: In order to look at the contents of the trace file, you manually generate
  prefs: []
  type: TYPE_NORMAL
- en: a transcript using Tcpflow ( *https://github.com/simsong/tcpflow/*), as shown
    in Listing 13-1\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **tcpflow -r bej-int.pcap**
  prefs: []
  type: TYPE_NORMAL
- en: $ **ls -al**
  prefs: []
  type: TYPE_NORMAL
- en: total 56
  prefs: []
  type: TYPE_NORMAL
- en: drwxrwxr-x 3 ds61so ds61so 4096 Apr 23 20:14 .
  prefs: []
  type: TYPE_NORMAL
- en: drwxrwxr-x 4 ds61so ds61so 4096 Apr 23 20:05 ..
  prefs: []
  type: TYPE_NORMAL
- en: -rw-rw-r-- 1 ds61so ds61so 3605 Apr 21 20:53 172.016.002.001.03128-192.168.002.108.50949u
  prefs: []
  type: TYPE_NORMAL
- en: '-rw-rw-r-- 1 ds61so ds61so 376 Apr 21 20:53 192.168.002.108.50949-172.016.002.001.03128v
    *Listing 13-1: Using Tcpflow to generate transcripts manual y on the* bej-int
    .pcap *trace file* When run in this manner, Tcpflow generates two files. The first
    is traffic from the proxy to the client u. The second is traffic from the client
    to'
  prefs: []
  type: TYPE_NORMAL
- en: the proxy v.
  prefs: []
  type: TYPE_NORMAL
- en: '**traffic from the Client to the Proxy**'
  prefs: []
  type: TYPE_NORMAL
- en: Listing 13-2 shows the traffic from the client to the proxy in this example.
  prefs: []
  type: TYPE_NORMAL
- en: $ **cat 192.168.002.108.50949-172.016.002.001.03128**
  prefs: []
  type: TYPE_NORMAL
- en: GET http://www.bejtlich.net/u HTTP/1.1
  prefs: []
  type: TYPE_NORMAL
- en: 'Host: www.bejtlich.net'
  prefs: []
  type: TYPE_NORMAL
- en: 'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:20.0) Gecko/20100101
    Firefox/20.0'
  prefs: []
  type: TYPE_NORMAL
- en: 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
  prefs: []
  type: TYPE_NORMAL
- en: 'Accept-Language: en-US,en;q=0.5'
  prefs: []
  type: TYPE_NORMAL
- en: 'Accept-Encoding: gzip, deflate'
  prefs: []
  type: TYPE_NORMAL
- en: 'DNT: 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'Referer: http://www.taosecurity.com/training.html'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connection: keep-alive'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 13-2: Traffic from the client to the proxy*'
  prefs: []
  type: TYPE_NORMAL
- en: At location X, notice that the GET request for *http://www.bejtlich.net/* u
    is a bit different from normal GET requests. Unproxied web traffic would make
    a
  prefs: []
  type: TYPE_NORMAL
- en: GET request to the / directory, not the entire URL, with something like GET
    /.
  prefs: []
  type: TYPE_NORMAL
- en: Listing 13-3 shows the response from the proxy.
  prefs: []
  type: TYPE_NORMAL
- en: Proxies and Checksums **291**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: $ **cat 172.016.002.001.03128-192.168.002.108.50949**
  prefs: []
  type: TYPE_NORMAL
- en: HTTP/1.0 200 OK
  prefs: []
  type: TYPE_NORMAL
- en: 'Date: Sun, 21 Apr 2013 20:53:38 GMT'
  prefs: []
  type: TYPE_NORMAL
- en: 'Server: Apache/2'
  prefs: []
  type: TYPE_NORMAL
- en: 'Last-Modified: Wed, 02 Jan 2013 15:49:44 GMT'
  prefs: []
  type: TYPE_NORMAL
- en: 'ETag: "2e800ed-c713-4d25031f1f600"'
  prefs: []
  type: TYPE_NORMAL
- en: 'Accept-Ranges: bytes'
  prefs: []
  type: TYPE_NORMAL
- en: 'Content-Length: 3195'
  prefs: []
  type: TYPE_NORMAL
- en: 'Content-Type: text/html; charset=UTF-8'
  prefs: []
  type: TYPE_NORMAL
- en: 'X-Cache: MISS from localhostu'
  prefs: []
  type: TYPE_NORMAL
- en: 'X-Cache-Lookup: MISS from localhost:3128v'
  prefs: []
  type: TYPE_NORMAL
- en: 'Via: 1.1 localhost:3128 (squid/2.7.STABLE9)w'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connection: keep-alive'
  prefs: []
  type: TYPE_NORMAL
- en: 'Proxy-Connection: keep-alivex'
  prefs: []
  type: TYPE_NORMAL
- en: y<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/
  prefs: []
  type: TYPE_NORMAL
- en: xhtml1-strict.dtd">
  prefs: []
  type: TYPE_NORMAL
- en: <html xml:lang="en">
  prefs: []
  type: TYPE_NORMAL
- en: <head>
  prefs: []
  type: TYPE_NORMAL
- en: <meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
  prefs: []
  type: TYPE_NORMAL
- en: <meta name="Richard Bejtlich" content="Home page of TaoSecurity founder Richard
    Bejtlich" />
  prefs: []
  type: TYPE_NORMAL
- en: <meta name="keywords" content="bejtlich,taosecurity,network,security" />
  prefs: []
  type: TYPE_NORMAL
- en: '*-- snip --*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 13-3: Traffic from proxy to client as seen at location X*'
  prefs: []
  type: TYPE_NORMAL
- en: Listing 13-3 includes four headers indicating that a proxy is involved.
  prefs: []
  type: TYPE_NORMAL
- en: The headers at u and v show that the proxy didn’t have a locally cached
  prefs: []
  type: TYPE_NORMAL
- en: copy of the requested content. The headers at w and x report the nature
  prefs: []
  type: TYPE_NORMAL
- en: of the proxy connection. The last part, at y, shows the beginning of the
  prefs: []
  type: TYPE_NORMAL
- en: web page hosted at 205.186.148.46\.
  prefs: []
  type: TYPE_NORMAL
- en: '**traffic from the Proxy to the Web Server**'
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s use Tcpflow to see what traffic looks like when it goes from the
  prefs: []
  type: TYPE_NORMAL
- en: proxy to a web server, as seen at location Y. Listing 13-4 shows how to gener-
  prefs: []
  type: TYPE_NORMAL
- en: ate the transcripts against trace file *bej-ext.pcap*, which was captured on
    the proxy interface facing the web server.
  prefs: []
  type: TYPE_NORMAL
- en: $ **tcpflow -r bej-ext.pcap**
  prefs: []
  type: TYPE_NORMAL
- en: $ **ls -al**
  prefs: []
  type: TYPE_NORMAL
- en: total 20
  prefs: []
  type: TYPE_NORMAL
- en: drwxrwxr-x 2 ds61so ds61so 4096 Apr 23 20:33 .
  prefs: []
  type: TYPE_NORMAL
- en: drwxrwxr-x 3 ds61so ds61so 4096 Apr 23 20:32 ..
  prefs: []
  type: TYPE_NORMAL
- en: -rw-rw-r-- 1 ds61so ds61so 461 Apr 21 20:53 192.168.001.002.02770-205.186.148.046.00080u
  prefs: []
  type: TYPE_NORMAL
- en: '-rw-rw-r-- 1 ds61so ds61so 3453 Apr 21 20:53 205.186.148.046.00080-192.168.001.002.02770v
    *Listing 13-4: Using Tcpflow to generate transcripts manual y on the* bej-ext
    .pcap *trace file* **292** Chapter 13'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, Tcpflow generates two files: traffic from the proxy to the'
  prefs: []
  type: TYPE_NORMAL
- en: server u and traffic from the server to the proxy v. Let’s look at traffic
  prefs: []
  type: TYPE_NORMAL
- en: from the proxy to the server first, as shown in Listing 13-5\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **cat 192.168.001.002.02770-205.186.148.046.00080**
  prefs: []
  type: TYPE_NORMAL
- en: GET /u HTTP/1.0
  prefs: []
  type: TYPE_NORMAL
- en: 'Host: www.bejtlich.net'
  prefs: []
  type: TYPE_NORMAL
- en: 'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:20.0) Gecko/20100101
    Firefox/20.0'
  prefs: []
  type: TYPE_NORMAL
- en: 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
  prefs: []
  type: TYPE_NORMAL
- en: 'Accept-Language: en-US,en;q=0.5'
  prefs: []
  type: TYPE_NORMAL
- en: 'Accept-Encoding: gzip, deflate'
  prefs: []
  type: TYPE_NORMAL
- en: 'DNT: 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'Referer: http://www.taosecurity.com/training.html'
  prefs: []
  type: TYPE_NORMAL
- en: 'Via: 1.1 localhost:3128 (squid/2.7.STABLE9)v'
  prefs: []
  type: TYPE_NORMAL
- en: 'X-Forwarded-For: 192.168.2.108w'
  prefs: []
  type: TYPE_NORMAL
- en: 'Cache-Control: max-age=259200'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connection: keep-alive'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 13-5: Traffic from the proxy to the server as seen at location Y*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 13-5 includes several interesting features:'
  prefs: []
  type: TYPE_NORMAL
- en: • The resource visited by the proxy via the GET / request u resembles nor-
  prefs: []
  type: TYPE_NORMAL
- en: mal web traffic seen elsewhere in the book. However, it differs from the
  prefs: []
  type: TYPE_NORMAL
- en: proxied request shown in Listing 13-2\.
  prefs: []
  type: TYPE_NORMAL
- en: • The proxy includes a Via statement v indicating the involvement of a
  prefs: []
  type: TYPE_NORMAL
- en: Squid proxy.
  prefs: []
  type: TYPE_NORMAL
- en: • The proxy reveals the true source IP address of the client making the
  prefs: []
  type: TYPE_NORMAL
- en: web request in the X-Forwarded-For statement w.
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Some security analysts worry that these “features,” especially the X-Forwarded-For*
    *statement, will allow intruders operating malicious websites to see these headers
    and* *learn how a company’s internal network is configured. Security teams must
    balance* *the added visibility they gain against a perceived leakage of potentially
    sensitive information to outsiders.*'
  prefs: []
  type: TYPE_NORMAL
- en: Listing 13-6 shows the response from the server.
  prefs: []
  type: TYPE_NORMAL
- en: $ **cat 205.186.148.046.00080-192.168.001.002.02770**
  prefs: []
  type: TYPE_NORMAL
- en: HTTP/1.1 200 OK
  prefs: []
  type: TYPE_NORMAL
- en: 'Date: Sun, 21 Apr 2013 20:53:38 GMT'
  prefs: []
  type: TYPE_NORMAL
- en: 'Server: Apache/2'
  prefs: []
  type: TYPE_NORMAL
- en: 'Last-Modified: Wed, 02 Jan 2013 15:49:44 GMT'
  prefs: []
  type: TYPE_NORMAL
- en: 'ETag: "2e800ed-c713-4d25031f1f600"'
  prefs: []
  type: TYPE_NORMAL
- en: 'Accept-Ranges: bytes'
  prefs: []
  type: TYPE_NORMAL
- en: 'Content-Length: 3195'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connection: close'
  prefs: []
  type: TYPE_NORMAL
- en: 'Content-Type: text/html; charset=UTF-8'
  prefs: []
  type: TYPE_NORMAL
- en: Proxies and Checksums **293**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/
  prefs: []
  type: TYPE_NORMAL
- en: xhtml1-strict.dtd">
  prefs: []
  type: TYPE_NORMAL
- en: <html xml:lang="en">
  prefs: []
  type: TYPE_NORMAL
- en: <head>
  prefs: []
  type: TYPE_NORMAL
- en: <meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
  prefs: []
  type: TYPE_NORMAL
- en: <meta name="Richard Bejtlich" content="Home page of TaoSecurity founder Richard
    Bejtlich" />
  prefs: []
  type: TYPE_NORMAL
- en: <meta name="keywords" content="bejtlich,taosecurity,network,security" />
  prefs: []
  type: TYPE_NORMAL
- en: '*-- snip --*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 13-6: Traffic from the server to the proxy as seen at location Y*'
  prefs: []
  type: TYPE_NORMAL
- en: As far as the web server in Listing 13-6 is concerned, the proxy is the sys-
  prefs: []
  type: TYPE_NORMAL
- en: tem making the request. There is nothing special about what it sends back.
  prefs: []
  type: TYPE_NORMAL
- en: (Notice in Listing 13-3 how the two differ, paying particular attention to
  prefs: []
  type: TYPE_NORMAL
- en: the headers added by the proxy.)
  prefs: []
  type: TYPE_NORMAL
- en: '***Dealing with Proxies in Production Networks***'
  prefs: []
  type: TYPE_NORMAL
- en: 'CIRTs have four options when dealing with proxies in production networks:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Try to gain access to the logs generated by a proxy in order to see traf-
  prefs: []
  type: TYPE_NORMAL
- en: fic from the proxy’s perspective.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Use the techniques described in Chapter 2 to deploy multiple sensors
  prefs: []
  type: TYPE_NORMAL
- en: with appropriate visibility. In this respect, a proxy is like a NAT issue—
  prefs: []
  type: TYPE_NORMAL
- en: put sensors where you need them in order to see true source and desti-
  prefs: []
  type: TYPE_NORMAL
- en: nation IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Make more extensive use of the information kept inside logs generated
  prefs: []
  type: TYPE_NORMAL
- en: by proxy-aware NSM software. As shown in the transcripts in Listings 13-2,
  prefs: []
  type: TYPE_NORMAL
- en: 13-3, and 13-5, information about proxy use is available for review.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Use software that can enable special features to track X-Forwarded-For
  prefs: []
  type: TYPE_NORMAL
- en: headers and extract the client IP address when reporting alert data.
  prefs: []
  type: TYPE_NORMAL
- en: (See the enable_xff configuration option in Snort, for example.)
  prefs: []
  type: TYPE_NORMAL
- en: The next part of this chapter will take the third approach. We’ll use
  prefs: []
  type: TYPE_NORMAL
- en: Bro to examine the traffic in these sample traces to see whether it can gen-
  prefs: []
  type: TYPE_NORMAL
- en: erate information that helps us deal with proxies. Before dealing with our
  prefs: []
  type: TYPE_NORMAL
- en: proxy problem, however, we need to take a slight detour into the world of
  prefs: []
  type: TYPE_NORMAL
- en: IP checksums.
  prefs: []
  type: TYPE_NORMAL
- en: '**checksums**'
  prefs: []
  type: TYPE_NORMAL
- en: IP headers contain a checksum as an error detection mechanism. Network
  prefs: []
  type: TYPE_NORMAL
- en: devices calculate and insert checksums when they process packets. When
  prefs: []
  type: TYPE_NORMAL
- en: a downstream device receives an IP packet, it calculates a checksum for
  prefs: []
  type: TYPE_NORMAL
- en: that packet based on the contents of the IP header. For the purposes of the
  prefs: []
  type: TYPE_NORMAL
- en: calculation, the equation sets the IP checksum field itself to zero. If the
    cal-
  prefs: []
  type: TYPE_NORMAL
- en: culated checksum fails to match the checksum in the IP packet, the device
  prefs: []
  type: TYPE_NORMAL
- en: may discard the packet. The device senses an error and deals with it by
  prefs: []
  type: TYPE_NORMAL
- en: dropping the IP packet.
  prefs: []
  type: TYPE_NORMAL
- en: '**294** Chapter 13'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 158](index-329_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 159](index-329_2.png)'
  prefs: []
  type: TYPE_IMG
- en: '***A Good Checksum***'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13-2 shows a checksum that is correct for the contents of a packet.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 13-2: Correct IP checksum of 0x81a4 in a TCP packet*'
  prefs: []
  type: TYPE_NORMAL
- en: The IP checksum is 0x81a4 (0x means the value is represented in hexa-
  prefs: []
  type: TYPE_NORMAL
- en: decimal). Wireshark appends the word [correct] after the checksum value
  prefs: []
  type: TYPE_NORMAL
- en: to show that it calculated a checksum and found that it matched the value
  prefs: []
  type: TYPE_NORMAL
- en: reported in the packet. (Note this is a TCP segment, but we are concerned
  prefs: []
  type: TYPE_NORMAL
- en: only with the IP checksum here.)
  prefs: []
  type: TYPE_NORMAL
- en: '***A Bad Checksum***'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13-3 shows a checksum that is not correct for the contents of a packet.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 13-3: Incorrect IP checksum of 0x0000 in a TCP packet*'
  prefs: []
  type: TYPE_NORMAL
- en: Here, we see that the IP checksum is 0x0000\. Wireshark doesn’t like
  prefs: []
  type: TYPE_NORMAL
- en: this value. It reports concern via a red bar over the IP header entry and the
  prefs: []
  type: TYPE_NORMAL
- en: words [incorrect, should be 0x1529 (may be caused by “IP checksum offload”?)].
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark shows that it calculated a checksum that didn’t match the value
  prefs: []
  type: TYPE_NORMAL
- en: reported in the packet. (This is also a TCP segment.)
  prefs: []
  type: TYPE_NORMAL
- en: Proxies and Checksums **295**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***Identifying Bad and Good Checksums with Tshark***'
  prefs: []
  type: TYPE_NORMAL
- en: Tshark offers a few helpful ways to quickly review checksums. We’ll use
  prefs: []
  type: TYPE_NORMAL
- en: the traffic we collected i[n “Proxies” on page 289 a](#p323)s our sample data.
    We’re supposed to be troubleshooting performance, and we expect to rely on
  prefs: []
  type: TYPE_NORMAL
- en: those traces to answer our questions. First, look at the trace file recorded
  prefs: []
  type: TYPE_NORMAL
- en: at location X, as shown in Listing 13-7\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **tshark -n -r bej-int.pcap -T fields -E separator=/t -e ip.src -e tcp.srcport**
  prefs: []
  type: TYPE_NORMAL
- en: '**-e ip.dst -e tcp.dstport -e ip.checksum**'
  prefs: []
  type: TYPE_NORMAL
- en: Source IP SrcPort Destination IP DstPort IP Checksum
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.2.108 50949 172.16.2.1 3128 0x81a4
  prefs: []
  type: TYPE_NORMAL
- en: 172.16.2.1 3128 192.168.2.108 50949 0x0000
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.2.108 50949 172.16.2.1 3128 0x81af
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.2.108 50949 172.16.2.1 3128 0x8036
  prefs: []
  type: TYPE_NORMAL
- en: 172.16.2.1 3128 192.168.2.108 50949 0x0000
  prefs: []
  type: TYPE_NORMAL
- en: 172.16.2.1 3128 192.168.2.108 50949 0x0000
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.2.108 50949 172.16.2.1 3128 0x81ad
  prefs: []
  type: TYPE_NORMAL
- en: 172.16.2.1 3128 192.168.2.108 50949 0x0000
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.2.108 50949 172.16.2.1 3128 0x81a5
  prefs: []
  type: TYPE_NORMAL
- en: 172.16.2.1 3128 192.168.2.108 50949 0x0000
  prefs: []
  type: TYPE_NORMAL
- en: 172.16.2.1 3128 192.168.2.108 50949 0x0000
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.2.108 50949 172.16.2.1 3128 0x81a4
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 13-7: Custom Tshark output for the* bej-int .pcap *trace file*'
  prefs: []
  type: TYPE_NORMAL
- en: Listing 13-7 invokes a few new switches to display only the information
  prefs: []
  type: TYPE_NORMAL
- en: that concerns us. We used the -T fields and -E separator=/t switches to tell
  prefs: []
  type: TYPE_NORMAL
- en: Tshark we wanted specific parts of the packets to be displayed and we wanted
  prefs: []
  type: TYPE_NORMAL
- en: those fields printed with tabs between them. Using the -e switches, we told
  prefs: []
  type: TYPE_NORMAL
- en: Tshark just which parts of the packets we wanted. (I added the headers after
  prefs: []
  type: TYPE_NORMAL
- en: the command line to make it easier for you to recognize the fields.)
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the last column, it seems odd that every packet from
  prefs: []
  type: TYPE_NORMAL
- en: 172.16.2.1 has a checksum of 0x0000\. When we saw that same occurrence
  prefs: []
  type: TYPE_NORMAL
- en: in Wireshark, the tool reported a checksum error.
  prefs: []
  type: TYPE_NORMAL
- en: We can invoke Tshark again to tell us which packets have miscalculated
  prefs: []
  type: TYPE_NORMAL
- en: checksums, as shown in Listing 13-8\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **tshark -n -r bej-int.pcap -T fields -E separator=/t -e ip.src -e tcp.srcport**
  prefs: []
  type: TYPE_NORMAL
- en: '**-e ip.dst -e tcp.dstport -e ip.proto -e ip.checksum -R "ip.checksum_bad==1"**'
  prefs: []
  type: TYPE_NORMAL
- en: 172.16.2.1 3128 192.168.2.108 50949 6 0x0000
  prefs: []
  type: TYPE_NORMAL
- en: 172.16.2.1 3128 192.168.2.108 50949 6 0x0000
  prefs: []
  type: TYPE_NORMAL
- en: 172.16.2.1 3128 192.168.2.108 50949 6 0x0000
  prefs: []
  type: TYPE_NORMAL
- en: 172.16.2.1 3128 192.168.2.108 50949 6 0x0000
  prefs: []
  type: TYPE_NORMAL
- en: 172.16.2.1 3128 192.168.2.108 50949 6 0x0000
  prefs: []
  type: TYPE_NORMAL
- en: 172.16.2.1 3128 192.168.2.108 50949 6 0x0000
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 13-8: Tshark output for sample trace file showing only bad checksums*'
  prefs: []
  type: TYPE_NORMAL
- en: '**296** Chapter 13'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: In Listing 13-8, we add the display filter **-R "ip.checksum_bad==1"** . This
    tells Tshark to show only packets whose checksums do not match the values
  prefs: []
  type: TYPE_NORMAL
- en: Tshark thinks they should have. If you want to see only packets with good
  prefs: []
  type: TYPE_NORMAL
- en: checksums, try the command shown in Listing 13-9\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **tshark -n -r bej-int.pcap -T fields -E separator=/t -e ip.src -e tcp.srcport**
  prefs: []
  type: TYPE_NORMAL
- en: '**-e ip.dst -e tcp.dstport -e ip.proto -e ip.checksum -R "ip.checksum_good==1"**'
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.2.108 50949 172.16.2.1 3128 6 0x81a4
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.2.108 50949 172.16.2.1 3128 6 0x81af
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.2.108 50949 172.16.2.1 3128 6 0x8036
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.2.108 50949 172.16.2.1 3128 6 0x81ad
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.2.108 50949 172.16.2.1 3128 6 0x81a5
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.2.108 50949 172.16.2.1 3128 6 0x81a4
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 13-9: Tshark output for sample trace file showing only good checksums*'
  prefs: []
  type: TYPE_NORMAL
- en: In Listing 13-9, we add the display filter -R "ip.checksum_good==1". This
  prefs: []
  type: TYPE_NORMAL
- en: tells Tshark to show only packets whose checksums match the values Tshark
  prefs: []
  type: TYPE_NORMAL
- en: thinks they should have. You could get the same results for Listing 13-8
  prefs: []
  type: TYPE_NORMAL
- en: using the display filter -R "ip.checksum_good==0" and the same results for
  prefs: []
  type: TYPE_NORMAL
- en: Listing 13-9 using the display filter -R "ip.checksum_bad==0".
  prefs: []
  type: TYPE_NORMAL
- en: Before investigating why we’re getting these bad checksums, let’s see
  prefs: []
  type: TYPE_NORMAL
- en: whether they also appear in *bej-ext.pcap*. As we did with Listing 13-7, we
    can show the key elements of a trace file using Tshark. Listing 13-10 provides
  prefs: []
  type: TYPE_NORMAL
- en: the syntax and output.
  prefs: []
  type: TYPE_NORMAL
- en: $ **tshark -n -r ../bej-ext.pcap -T fields -E separator=/t -e ip.src -e tcp.**
  prefs: []
  type: TYPE_NORMAL
- en: '**srcport -e ip.dst -e tcp.dstport -e ip.checksum**'
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.1.2 2770 205.186.148.46 80 0x0000
  prefs: []
  type: TYPE_NORMAL
- en: 205.186.148.46 80 192.168.1.2 2770 0x5b28
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.1.2 2770 205.186.148.46 80 0x0000
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.1.2 2770 205.186.148.46 80 0x0000
  prefs: []
  type: TYPE_NORMAL
- en: 205.186.148.46 80 192.168.1.2 2770 0x9597
  prefs: []
  type: TYPE_NORMAL
- en: 205.186.148.46 80 192.168.1.2 2770 0x8fee
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.1.2 2770 205.186.148.46 80 0x0000
  prefs: []
  type: TYPE_NORMAL
- en: 205.186.148.46 80 192.168.1.2 2770 0x8fed
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.1.2 2770 205.186.148.46 80 0x0000
  prefs: []
  type: TYPE_NORMAL
- en: 205.186.148.46 80 192.168.1.2 2770 0x9367
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.1.2 2770 205.186.148.46 80 0x0000
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.1.2 2770 205.186.148.46 80 0x0000
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.1.2 2770 205.186.148.46 80 0x0000
  prefs: []
  type: TYPE_NORMAL
- en: 205.186.148.46 80 192.168.1.2 2770 0x9593
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 13-10: Custom Tshark output for the* bej-ext .pcap *trace file*'
  prefs: []
  type: TYPE_NORMAL
- en: In Listing 13-10, the proxy is 192.168.1.2, and the server is 205.186.148.46,
  prefs: []
  type: TYPE_NORMAL
- en: offering web services on port 80 TCP. Again, we see suspicious IP checksums
  prefs: []
  type: TYPE_NORMAL
- en: (0x0000) on all packets from the proxy to the web server. As with *bej-int.pcap*,
    the system generating IP traffic with bad checksums is the proxy. Why?
  prefs: []
  type: TYPE_NORMAL
- en: Proxies and Checksums **297**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***How Bad Checksums Happen***'
  prefs: []
  type: TYPE_NORMAL
- en: IP checksums occasionally fail to match the intended values due to errors
  prefs: []
  type: TYPE_NORMAL
- en: introduced over the Internet. These errors are exceptionally rare, however,
  prefs: []
  type: TYPE_NORMAL
- en: unless a real network problem is involved. How did so many checksums
  prefs: []
  type: TYPE_NORMAL
- en: fail in Listings 13-7 and 13-10, and why are those failures so consistent?
  prefs: []
  type: TYPE_NORMAL
- en: The error reported by Wireshark in Figure 13-3, [incorrect, should be
  prefs: []
  type: TYPE_NORMAL
- en: 0x1529 (may be caused by "IP checksum offload"?)], can help us answer those
    questions.
  prefs: []
  type: TYPE_NORMAL
- en: Traditionally, the operating system and network stack were responsible
  prefs: []
  type: TYPE_NORMAL
- en: for calculating IP checksums, but modern network drivers and some NICs
  prefs: []
  type: TYPE_NORMAL
- en: assume that burden. This process, called *offloading*, allows the network stack
    to send traffic quickly. Calculating checksums can be done quickly in the
  prefs: []
  type: TYPE_NORMAL
- en: driver or, better yet, by dedicated hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Frequent IP checksum errors like those in Listings 13-7 and 13-10 will
  prefs: []
  type: TYPE_NORMAL
- en: interfere with your ability to conduct NSM. Traces with bad checksums are
  prefs: []
  type: TYPE_NORMAL
- en: often the result of capturing network traffic on a platform that offloads the
  prefs: []
  type: TYPE_NORMAL
- en: checksum process to a driver or hardware. The packet seen by the network
  prefs: []
  type: TYPE_NORMAL
- en: security tool has a 0x0000, or empty, checksum, but the “real” packet sent
  prefs: []
  type: TYPE_NORMAL
- en: on the wire has a true checksum calculated and added to the packet by the
  prefs: []
  type: TYPE_NORMAL
- en: driver or hardware. (When SO configures network interfaces, the setup
  prefs: []
  type: TYPE_NORMAL
- en: script disables driver and hardware checksum offloading in an effort to
  prefs: []
  type: TYPE_NORMAL
- en: avoid these issues.)
  prefs: []
  type: TYPE_NORMAL
- en: In our scenario, the proxy relies on checksum offloading to speed up
  prefs: []
  type: TYPE_NORMAL
- en: the transmission of network traffic. Unfortunately, the software on the
  prefs: []
  type: TYPE_NORMAL
- en: proxy sets a 0x0000 IP checksum on all outgoing packets. Before the packet
  prefs: []
  type: TYPE_NORMAL
- en: hits the wire, though, the driver or NIC hardware calculates and inserts
  prefs: []
  type: TYPE_NORMAL
- en: a proper checksum. Packets received from other devices have the correct
  prefs: []
  type: TYPE_NORMAL
- en: checksums.
  prefs: []
  type: TYPE_NORMAL
- en: '***Bro and Bad Checksums***'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve looked at good and bad IP checksums, let’s examine why
  prefs: []
  type: TYPE_NORMAL
- en: they matter. Some network security tools assume that packets with a bad IP
  prefs: []
  type: TYPE_NORMAL
- en: checksum will never be processed by the receiving network endpoint. The
  prefs: []
  type: TYPE_NORMAL
- en: network security tool drops the packet. Unfortunately, these bad checksums
  prefs: []
  type: TYPE_NORMAL
- en: might simply be caused by offloading.
  prefs: []
  type: TYPE_NORMAL
- en: Bro ignores traffic with bad IP checksums. For example, notice how it
  prefs: []
  type: TYPE_NORMAL
- en: processes the *bej-int.pcap* trace file, as shown in Listing 13-11\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo bro -r bej-int.pcap /opt/bro/share/bro/site/local.bro**
  prefs: []
  type: TYPE_NORMAL
- en: 'WARNING: No Site::local_nets have been defined. It''s usually a good idea to
    define your local networks.'
  prefs: []
  type: TYPE_NORMAL
- en: 'WARNING: Template value remaining in BPFConf filename: /etc/nsm/{{hostname}}-{{interface}}/bpf-bro.conf
    (/opt/bro/share/bro/securityonion/./bpfconf.bro, line 99)'
  prefs: []
  type: TYPE_NORMAL
- en: 'WARNING: Template value remaining in BPFConf filename: /etc/nsm/ds61so-{{interface}}/bpf-bro.'
  prefs: []
  type: TYPE_NORMAL
- en: conf (/opt/bro/share/bro/securityonion/./bpfconf.bro, line 99)
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 13-11: Bro reads the* bej-int .pcap *trace file.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**298** Chapter 13'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: Nothing odd appears by default, but take a look at *weird.log*, shown in Listing
    13-12\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **cat weird.log**
  prefs: []
  type: TYPE_NORMAL
- en: '#separator \x09'
  prefs: []
  type: TYPE_NORMAL
- en: '#set_separator ,'
  prefs: []
  type: TYPE_NORMAL
- en: '#empty_field (empty)'
  prefs: []
  type: TYPE_NORMAL
- en: '#unset_field -'
  prefs: []
  type: TYPE_NORMAL
- en: '#path weird'
  prefs: []
  type: TYPE_NORMAL
- en: '#open 2013-04-23-19-40-10'
  prefs: []
  type: TYPE_NORMAL
- en: '#fields ts uid id.orig_h id.orig_p id.resp_h id.resp_p name addl notice peer'
  prefs: []
  type: TYPE_NORMAL
- en: '#types time string addr port addr port string string bool string 1366577618.249515
    - - - - - bad_IP_checksum - F'
  prefs: []
  type: TYPE_NORMAL
- en: bro
  prefs: []
  type: TYPE_NORMAL
- en: 1366577618.251250 rhdNNjfMGkc 192.168.2.108 50949 172.16.2.1 3128
  prefs: []
  type: TYPE_NORMAL
- en: upossible_split_routing - F bro
  prefs: []
  type: TYPE_NORMAL
- en: 1366577618.251867 rhdNNjfMGkc 192.168.2.108 50949 172.16.2.1 3128
  prefs: []
  type: TYPE_NORMAL
- en: vdata_before_established - F bro
  prefs: []
  type: TYPE_NORMAL
- en: '#close 2013-04-23-19-40-10'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 13-12: Bro* weird .log *file*'
  prefs: []
  type: TYPE_NORMAL
- en: The first entry reports possible_split_routing u because Bro is seeing only
  prefs: []
  type: TYPE_NORMAL
- en: half the traffic, namely packets from 192.168.2.108 to 172.16.2.1\. These were
  prefs: []
  type: TYPE_NORMAL
- en: the packets in Listing 13-9 with good IP checksums. The second entry reports
  prefs: []
  type: TYPE_NORMAL
- en: data_before_established v because Bro didn’t see a complete TCP three-way
  prefs: []
  type: TYPE_NORMAL
- en: handshake. When Bro misses the three-way handshake, it’s confused when it
  prefs: []
  type: TYPE_NORMAL
- en: sees data transmitted before the session was properly established.
  prefs: []
  type: TYPE_NORMAL
- en: The Bro *http.log* file is also odd, as shown in Listing 13-13\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **cat http.log**
  prefs: []
  type: TYPE_NORMAL
- en: '#separator \x09'
  prefs: []
  type: TYPE_NORMAL
- en: '#set_separator ,'
  prefs: []
  type: TYPE_NORMAL
- en: '#empty_field (empty)'
  prefs: []
  type: TYPE_NORMAL
- en: '#unset_field -'
  prefs: []
  type: TYPE_NORMAL
- en: '#path http'
  prefs: []
  type: TYPE_NORMAL
- en: '#open 2013-04-23-19-40-10'
  prefs: []
  type: TYPE_NORMAL
- en: '#fields ts uid id.orig_h id.orig_p id.resp_h id.resp_p trans_'
  prefs: []
  type: TYPE_NORMAL
- en: depth method host uri referrer user_agent request_body_len
  prefs: []
  type: TYPE_NORMAL
- en: response_body_len status_code status_msg info_code info_msg filename tags username
    password proxied mime_type md5 extraction_file
  prefs: []
  type: TYPE_NORMAL
- en: '#types time string addr port addr port count string string string string string
    count count count string count string string table[enum] string string table[string]
    string string file'
  prefs: []
  type: TYPE_NORMAL
- en: Proxies and Checksums **299**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: 1366577618.251867 rhdNNjfMGkc 192.168.2.108 50949 172.16.2.1 3128 1
  prefs: []
  type: TYPE_NORMAL
- en: GETu www.bejtlich.net http://www.bejtlich.net/ http://www.taosecurity.
  prefs: []
  type: TYPE_NORMAL
- en: com/training.html Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:20.0) Gecko/20100101
  prefs: []
  type: TYPE_NORMAL
- en: Firefox/20.0 0 0 - - - - - (empty) - - -
  prefs: []
  type: TYPE_NORMAL
- en: '- - -'
  prefs: []
  type: TYPE_NORMAL
- en: '#close 2013-04-23-19-40-10'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 13-13: Bro* http .log *file*'
  prefs: []
  type: TYPE_NORMAL
- en: We see a GET request here u, but no indication of a reply.
  prefs: []
  type: TYPE_NORMAL
- en: '***Setting Bro to Ignore Bad Checksums***'
  prefs: []
  type: TYPE_NORMAL
- en: We can tell Bro to shut off its checksum verification and process all traffic
  prefs: []
  type: TYPE_NORMAL
- en: using the -C switch, as shown in Listing 13-14\.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo bro -r bej-int.pcap -C /opt/bro/share/bro/site/local.bro**
  prefs: []
  type: TYPE_NORMAL
- en: 'WARNING: No Site::local_nets have been defined. It''s usually a good idea to
    define your local networks.'
  prefs: []
  type: TYPE_NORMAL
- en: 'WARNING: Template value remaining in BPFConf filename: /etc/nsm/{{hostname}}-{{interface}}/bpf-bro.conf
    (/opt/bro/share/bro/securityonion/./bpfconf.bro, line 99)'
  prefs: []
  type: TYPE_NORMAL
- en: 'WARNING: 1366577618.694909 Template value remaining in BPFConf filename: /etc/nsm/ds61so-'
  prefs: []
  type: TYPE_NORMAL
- en: '{{interface}}/bpf-bro.conf (/opt/bro/share/bro/securityonion/./bpfconf.bro,
    line 99)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 13-14: Bro reads the trace file and ignores checksums.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now there is no *weird.log*. If we look at *http.log*, we’ll see that it’s what
    we’ve come to expect. Listing 13-15 shows the results.
  prefs: []
  type: TYPE_NORMAL
- en: $ **cat http.log**
  prefs: []
  type: TYPE_NORMAL
- en: '#separator \x09'
  prefs: []
  type: TYPE_NORMAL
- en: '#set_separator ,'
  prefs: []
  type: TYPE_NORMAL
- en: '#empty_field (empty)'
  prefs: []
  type: TYPE_NORMAL
- en: '#unset_field -'
  prefs: []
  type: TYPE_NORMAL
- en: '#path http'
  prefs: []
  type: TYPE_NORMAL
- en: '#open 2013-04-23-20-06-19'
  prefs: []
  type: TYPE_NORMAL
- en: '#fields ts uid id.orig_h id.orig_p id.resp_h id.resp_p trans_'
  prefs: []
  type: TYPE_NORMAL
- en: depth method host uri referrer user_agent request_body_len
  prefs: []
  type: TYPE_NORMAL
- en: response_body_len status_code status_msg info_code info_msg filename tags username
    password proxied mime_type md5 extraction_file
  prefs: []
  type: TYPE_NORMAL
- en: '#types time string addr port addr port count string string string string string
    count count count string count string string table[enum] string string table[string]
    string string file'
  prefs: []
  type: TYPE_NORMAL
- en: '**300** Chapter 13'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: 1366577618.251867 aqjpeHaXm7f 192.168.2.108 50949 172.16.2.1 3128 1
  prefs: []
  type: TYPE_NORMAL
- en: GETu www.bejtlich.net http://www.bejtlich.net/v http://www.taosecurity.
  prefs: []
  type: TYPE_NORMAL
- en: com/training.html Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:20.0) Gecko/20100101
  prefs: []
  type: TYPE_NORMAL
- en: Firefox/20.0 0 3195 200 OKw - - - (empty) - -
  prefs: []
  type: TYPE_NORMAL
- en: '- text/htmlx - -'
  prefs: []
  type: TYPE_NORMAL
- en: '#close 2013-04-23-20-06-19'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 13-15: Bro* http .log *file for* bej-int .pcap *with checksum validation
    disabled* Now we see not only the GET request u for *http://www.bejtlich.net/*
    v but'
  prefs: []
  type: TYPE_NORMAL
- en: also a record of the server’s 200 OK reply w and indication that the page
  prefs: []
  type: TYPE_NORMAL
- en: returned was *text/html* x. You could perform similar analysis concerning
  prefs: []
  type: TYPE_NORMAL
- en: Bro’s handling of *bej-ext.pcap* to see how it works when processing and ignor-
  prefs: []
  type: TYPE_NORMAL
- en: ing checksums. Listing 13-16 shows the results of the *http.log* file when Bro
  prefs: []
  type: TYPE_NORMAL
- en: reads the *bej-ext.pcap* trace file with checksum processing disabled.
  prefs: []
  type: TYPE_NORMAL
- en: $ **cat http.log**
  prefs: []
  type: TYPE_NORMAL
- en: '#separator \x09'
  prefs: []
  type: TYPE_NORMAL
- en: '#set_separator ,'
  prefs: []
  type: TYPE_NORMAL
- en: '#empty_field (empty)'
  prefs: []
  type: TYPE_NORMAL
- en: '#unset_field -'
  prefs: []
  type: TYPE_NORMAL
- en: '#path http'
  prefs: []
  type: TYPE_NORMAL
- en: '#open 2013-04-24-00-36-03'
  prefs: []
  type: TYPE_NORMAL
- en: '#fields ts uid id.orig_h id.orig_p id.resp_h id.resp_p trans_'
  prefs: []
  type: TYPE_NORMAL
- en: depth method host uri referrer user_agent request_body_len
  prefs: []
  type: TYPE_NORMAL
- en: response_body_len status_code status_msg info_code info_msg filename tags username
    password proxied mime_type md5 extraction_file
  prefs: []
  type: TYPE_NORMAL
- en: '#types time string addr port addr port count string string string string string
    count count count string count string string table[enum] string string table[string]
    string string file'
  prefs: []
  type: TYPE_NORMAL
- en: 1366577618.269074 ua3JI6YJIxh 192.168.1.2 2770 205.186.148.46 80
  prefs: []
  type: TYPE_NORMAL
- en: 1 GET www.bejtlich.net /u http://www.taosecurity.com/training.html Mozilla/5.0
    (X11; Ubuntu; Linux x86_64; rv:20.0) Gecko/20100101 Firefox/20.0 0 3195
  prefs: []
  type: TYPE_NORMAL
- en: 200 OKv - - - (empty) - - wVIA -> 1.1 localhost:3128
  prefs: []
  type: TYPE_NORMAL
- en: (squid/2.7.STABLE9),X-FORWARDED-FOR -> 192.168.2.108x text/html - -
  prefs: []
  type: TYPE_NORMAL
- en: '#close 2013-04-24-00-36-04'
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 13-16: Bro* http .log *file for* bej-ext .pcap *with checksum validation
    disabled* In Listing 13-16, the interesting fields are the GET request for / u,
    the'
  prefs: []
  type: TYPE_NORMAL
- en: 200 OK reply v from the server, the Via statement w revealing the presence
  prefs: []
  type: TYPE_NORMAL
- en: of the Squid proxy, and the X-Forwarded-For field x showing the true source
  prefs: []
  type: TYPE_NORMAL
- en: IP address of the web client. With access only to logs of this nature, you
  prefs: []
  type: TYPE_NORMAL
- en: could use the X-Forwarded-For field to identify the true source IP address
  prefs: []
  type: TYPE_NORMAL
- en: of a client if you saw activity only at location Y and needed to know which
  prefs: []
  type: TYPE_NORMAL
- en: browser was surfing to the web server in question.
  prefs: []
  type: TYPE_NORMAL
- en: Proxies and Checksums **301**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The moral of the checksum story is this: If you must collect traffic from a
    system that transmits traffic with checksum offloading, be sure your tools'
  prefs: []
  type: TYPE_NORMAL
- en: know how to handle the situation. Remember that you can tell Bro to ignore
  prefs: []
  type: TYPE_NORMAL
- en: bad checksums with the -C switch. See the SO mailing list and wiki or the
  prefs: []
  type: TYPE_NORMAL
- en: manual pages for details on equivalent features in other tools. Snort, for
  prefs: []
  type: TYPE_NORMAL
- en: 'example, offers the following options to handle checksum processing:'
  prefs: []
  type: TYPE_NORMAL
- en: -k <mode> Checksum mode (all,noip,notcp,noudp,noicmp,none)
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to handle the checksum offloading character-
  prefs: []
  type: TYPE_NORMAL
- en: istics of collecting traffic on this pfSense box running a Squid proxy, you
  prefs: []
  type: TYPE_NORMAL
- en: can use the data collected here for troubleshooting. Without taking into
  prefs: []
  type: TYPE_NORMAL
- en: account the checksum issue, you may have interpreted the traffic incor-
  prefs: []
  type: TYPE_NORMAL
- en: rectly and arrived at odd conclusions about network performance.
  prefs: []
  type: TYPE_NORMAL
- en: '**conclusion**'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduced two features of networks that might trouble ana-
  prefs: []
  type: TYPE_NORMAL
- en: 'lysts: proxies and checksums. Proxies are problematic because they intro-'
  prefs: []
  type: TYPE_NORMAL
- en: duce another middlebox, adding complexity to the network.
  prefs: []
  type: TYPE_NORMAL
- en: Like NAT, proxies obscure true source and destination IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: Although this chapter showed only one proxy at work, some organizations
  prefs: []
  type: TYPE_NORMAL
- en: chain multiple proxies! Such a multiproxy scenario makes the supposed
  prefs: []
  type: TYPE_NORMAL
- en: Holy Grail of NSM and proxies—proxy logs—unattainable. When multiple
  prefs: []
  type: TYPE_NORMAL
- en: proxies are involved, no single log shows all the activity analysts need to
    see.
  prefs: []
  type: TYPE_NORMAL
- en: If proxy logs were available, however, they would make a useful addition to
  prefs: []
  type: TYPE_NORMAL
- en: the data collected by an application like ELSA.
  prefs: []
  type: TYPE_NORMAL
- en: We also discussed checksums and odd results caused by offloading.
  prefs: []
  type: TYPE_NORMAL
- en: 'This feature, designed to speed up networking, reveals a downside: zeroed'
  prefs: []
  type: TYPE_NORMAL
- en: checksums when reported by a traffic capture tool. Although it’s easier to
  prefs: []
  type: TYPE_NORMAL
- en: engineer around this challenge, don’t be surprised if an eager analyst pro-
  prefs: []
  type: TYPE_NORMAL
- en: vides a trace file with one or both sides of a conversation containing 0x0000
  prefs: []
  type: TYPE_NORMAL
- en: for the IP checksums. With the help of this chapter, you should understand
  prefs: []
  type: TYPE_NORMAL
- en: why that occurs and how to handle the issue.
  prefs: []
  type: TYPE_NORMAL
- en: '**302** Chapter 13'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**c o N c l u S i o N**'
  prefs: []
  type: TYPE_NORMAL
- en: I wrote this book to help readers start a net-
  prefs: []
  type: TYPE_NORMAL
- en: work security monitoring operation within
  prefs: []
  type: TYPE_NORMAL
- en: their organization. I used the open source
  prefs: []
  type: TYPE_NORMAL
- en: SO suite to show how to put NSM to work in a
  prefs: []
  type: TYPE_NORMAL
- en: rapid and cost-effective manner. This final section
  prefs: []
  type: TYPE_NORMAL
- en: of the book shows several other options for NSM and
  prefs: []
  type: TYPE_NORMAL
- en: related operations. My goal is to show how NSM applies to other areas of
  prefs: []
  type: TYPE_NORMAL
- en: digital defense and how I think NSM will adapt to increasingly complex
  prefs: []
  type: TYPE_NORMAL
- en: information processing requirements.
  prefs: []
  type: TYPE_NORMAL
- en: First, I discuss how cloud computing affects NSM. The cloud presents
  prefs: []
  type: TYPE_NORMAL
- en: challenges and opportunities, and awareness of both will help security man-
  prefs: []
  type: TYPE_NORMAL
- en: agers better defend their data. Second, I talk about the importance of work-
  prefs: []
  type: TYPE_NORMAL
- en: flow and why an operational, metrics-driven model is a key to CIRT success.
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**cloud computing**'
  prefs: []
  type: TYPE_NORMAL
- en: The National Institute of Standards and Technology (NIST) defines cloud
  prefs: []
  type: TYPE_NORMAL
- en: computing as
  prefs: []
  type: TYPE_NORMAL
- en: a model for enabling ubiquitous, convenient, on-demand net-
  prefs: []
  type: TYPE_NORMAL
- en: work access to a shared pool of configurable computing resources
  prefs: []
  type: TYPE_NORMAL
- en: (e.g., networks, servers, storage, applications, and services) that
  prefs: []
  type: TYPE_NORMAL
- en: can be rapidly provisioned and released with minimal manage-
  prefs: []
  type: TYPE_NORMAL
- en: ment effort or service provider interaction.1
  prefs: []
  type: TYPE_NORMAL
- en: 'NIST describes three service models:'
  prefs: []
  type: TYPE_NORMAL
- en: '***Software as a Service (SaaS)*** Allows the consumer to use the provider’s
    applications running on a cloud infrastructure.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Platform as a Service (PaaS)*** Allows the consumer to deploy consumer-'
  prefs: []
  type: TYPE_NORMAL
- en: created applications or acquired applications created using program-
  prefs: []
  type: TYPE_NORMAL
- en: ming languages, libraries, services, and tools supported by the provider
  prefs: []
  type: TYPE_NORMAL
- en: onto the cloud infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: '***Infrastructure as a Service (IaaS)*** Gives the consumer access to processing,
    storage, networks, and other fundamental computing resources'
  prefs: []
  type: TYPE_NORMAL
- en: where the consumer is able to deploy and run arbitrary software, which
  prefs: []
  type: TYPE_NORMAL
- en: can include operating systems and applications.
  prefs: []
  type: TYPE_NORMAL
- en: A SaaS offering, like Salesforce.com ( *http://www.salesforce.com/*), gives
  prefs: []
  type: TYPE_NORMAL
- en: customers an application that provides certain capabilities, such as cus-
  prefs: []
  type: TYPE_NORMAL
- en: tomer relationship management. A PaaS offering, like Heroku ( *http://*
  prefs: []
  type: TYPE_NORMAL
- en: '*www.heroku.com/*), gives customers a set of programming languages and'
  prefs: []
  type: TYPE_NORMAL
- en: related capabilities to build their own applications. An IaaS offering, like
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Elastic Compute Cloud (EC2, *https://aws.amazon.com/ec2*), gives
  prefs: []
  type: TYPE_NORMAL
- en: customers a virtual machine and related supporting infrastructure upon
  prefs: []
  type: TYPE_NORMAL
- en: which they can install their own software.
  prefs: []
  type: TYPE_NORMAL
- en: From an NSM perspective, a key feature of cloud computing is the fact
  prefs: []
  type: TYPE_NORMAL
- en: that information processing is being done “somewhere else.” One excep-
  prefs: []
  type: TYPE_NORMAL
- en: tion may be a “private” cloud, operated by an organization for internal use,
  prefs: []
  type: TYPE_NORMAL
- en: or a “community” cloud, operated by an organization cooperating with
  prefs: []
  type: TYPE_NORMAL
- en: partners. When a cloud is “public” or “hybrid,” though, it means an orga-
  prefs: []
  type: TYPE_NORMAL
- en: nization’s data is stored, manipulated, and transmitted beyond the normal
  prefs: []
  type: TYPE_NORMAL
- en: enterprise boundaries. While many security professionals have debated
  prefs: []
  type: TYPE_NORMAL
- en: cloud security and related topics, this section examines visibility challenges
  prefs: []
  type: TYPE_NORMAL
- en: posed by cloud computing.
  prefs: []
  type: TYPE_NORMAL
- en: '***Cloud Computing Challenges***'
  prefs: []
  type: TYPE_NORMAL
- en: With data processing occurring outside an organization, a CIRT cannot
  prefs: []
  type: TYPE_NORMAL
- en: rely on the network instrumentation models introduced in Chapter 2\.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Peter Mell and Timothy Grance, “The NIST Definition of Cloud Computing,”
    NIST Special Publication 800-145, National Institute of Standards and Technology,
    U.S. Department of Commerce, September 2011, *http://csrc.nist.gov/publications/nistpubs/800-145/SP800-145.pdf*.
  prefs: []
  type: TYPE_NORMAL
- en: '**304** Conclusion'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 160](index-339_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Cloud users are not normally able to deploy taps or configure SPAN ports
  prefs: []
  type: TYPE_NORMAL
- en: to see traffic to or from a cloud provider’s infrastructure. By its very nature,
  prefs: []
  type: TYPE_NORMAL
- en: cloud infrastructures tend to be multitenant environments catering to hun-
  prefs: []
  type: TYPE_NORMAL
- en: dreds or thousands of customers on shared platforms. Even though you may
  prefs: []
  type: TYPE_NORMAL
- en: want to see network traffic to and from the platforms processing your data,
  prefs: []
  type: TYPE_NORMAL
- en: your cloud neighbors may not want you to see their traffic!
  prefs: []
  type: TYPE_NORMAL
- en: NSM is generally not an option for SaaS offerings because customers
  prefs: []
  type: TYPE_NORMAL
- en: interact with an application provided by a cloud company. Customers are
  prefs: []
  type: TYPE_NORMAL
- en: limited to relying upon whatever logs the cloud provider makes available.
  prefs: []
  type: TYPE_NORMAL
- en: NSM is also rarely possible for PaaS offerings, although customers can choose
  prefs: []
  type: TYPE_NORMAL
- en: to build application-level logging capabilities into the software they build
  prefs: []
  type: TYPE_NORMAL
- en: on the PaaS platform. NSM may be possible on IaaS offerings, but the visi-
  prefs: []
  type: TYPE_NORMAL
- en: bility is generally limited to specific virtual machines. NSM on IaaS requires
  prefs: []
  type: TYPE_NORMAL
- en: lightweight approaches where agents on the specific VM collect and analyze
  prefs: []
  type: TYPE_NORMAL
- en: network-centric data.
  prefs: []
  type: TYPE_NORMAL
- en: Threat Stack ( *http://www.threatstack.com/*) is an example of a commercial
  prefs: []
  type: TYPE_NORMAL
- en: offering to meet the need for NSM on IaaS cloud platforms. Dustin Webber,
  prefs: []
  type: TYPE_NORMAL
- en: author of the Snorby tool, founded Threat Stackwith Jen Andre to extend
  prefs: []
  type: TYPE_NORMAL
- en: Snorby beyond the enterprise. Threat Stack provides a lightweight agent that
  prefs: []
  type: TYPE_NORMAL
- en: collects and generates NSM information on individual endpoints, whether
  prefs: []
  type: TYPE_NORMAL
- en: in the enterprise or on IaaS cloud platforms. The Threat Stack agent reports
  prefs: []
  type: TYPE_NORMAL
- en: its findings to a cloud-based controller operated by the Threat Stack team.
  prefs: []
  type: TYPE_NORMAL
- en: When analysts want to investigate NSM data from the agents, they log into
  prefs: []
  type: TYPE_NORMAL
- en: a cloud application published by Threat Stack. Figure 1 depicts the Threat
  prefs: []
  type: TYPE_NORMAL
- en: Stack dashboard, showing data from an agent deployed on a virtual private
  prefs: []
  type: TYPE_NORMAL
- en: server.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 1: Threat Stack dashboard*'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion **305**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 161](index-340_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Threat Stack demonstrates how a cloud-based challenge, like monitor-
  prefs: []
  type: TYPE_NORMAL
- en: ing IaaS platforms, can be met by using the cloud to collect and present
  prefs: []
  type: TYPE_NORMAL
- en: NSM data from agents. This hints at some of the benefits cloud computing
  prefs: []
  type: TYPE_NORMAL
- en: brings to NSM operators.
  prefs: []
  type: TYPE_NORMAL
- en: '***Cloud Computing Benefits***'
  prefs: []
  type: TYPE_NORMAL
- en: Cloud environments give analysts powerful and expandable environments
  prefs: []
  type: TYPE_NORMAL
- en: to process and mine NSM data. By putting NSM data in the cloud, storage
  prefs: []
  type: TYPE_NORMAL
- en: and analytical power become less of an issue. Analysts must be comfort-
  prefs: []
  type: TYPE_NORMAL
- en: able with the security controls applied by the cloud provider before putting
  prefs: []
  type: TYPE_NORMAL
- en: sensitive information in the hands of another company. If the provider can
  prefs: []
  type: TYPE_NORMAL
- en: meet those concerns, the cloud offers exciting possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: Packetloop ( *http://www.packetloop.com/*) is an example of another com-
  prefs: []
  type: TYPE_NORMAL
- en: mercial offering built on the cloud, but with a different focus. Michael Baker
  prefs: []
  type: TYPE_NORMAL
- en: and his team in Australia built Packetloop as a cloud-based application to
  prefs: []
  type: TYPE_NORMAL
- en: analyze network traffic uploaded by users. Analysts can send network traffic
  prefs: []
  type: TYPE_NORMAL
- en: in bulk to Packetloop, which then processes and displays that traffic in various
  prefs: []
  type: TYPE_NORMAL
- en: ways. Figure 2 shows a Packetloop dashboard for the network traffic asso-
  prefs: []
  type: TYPE_NORMAL
- en: ciated with a Digital Corpora sample case ( *http://digitalcorpora.org/corpora/*
  prefs: []
  type: TYPE_NORMAL
- en: '*scenarios/m57-patents-scenario/*).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 2: Packetloop dashboard for sample network traffic*'
  prefs: []
  type: TYPE_NORMAL
- en: Threat Stack and Packetloop are options for enterprise users comfort-
  prefs: []
  type: TYPE_NORMAL
- en: able with sending local data to cloud providers. Perhaps more importantly,
  prefs: []
  type: TYPE_NORMAL
- en: these two offerings are suitable for customers who already do computing
  prefs: []
  type: TYPE_NORMAL
- en: in the cloud. In other words, customers doing work in the cloud are likely
  prefs: []
  type: TYPE_NORMAL
- en: '**306** Conclusion'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 162](index-341_1.png)'
  prefs: []
  type: TYPE_IMG
- en: to be comfortable sending logs or network traffic or both to another cloud
  prefs: []
  type: TYPE_NORMAL
- en: offering, such as a security vendor. As more computing work shifts from the
  prefs: []
  type: TYPE_NORMAL
- en: enterprise to the cloud, I expect this sort of “cloud-to-cloud” relationship
    to
  prefs: []
  type: TYPE_NORMAL
- en: become more important for security and monitoring needs.
  prefs: []
  type: TYPE_NORMAL
- en: '**workflow, Metrics, and collaboration**'
  prefs: []
  type: TYPE_NORMAL
- en: NSM isn’t just about tools. NSM is an operation, and that concept implies
  prefs: []
  type: TYPE_NORMAL
- en: workflow, metrics, and collaboration. A *workflow* establishes a series of steps
    that an analyst follows to perform the detection and response mission.
  prefs: []
  type: TYPE_NORMAL
- en: '*Metrics*, like the classification and count of incidents and the time elapsed'
  prefs: []
  type: TYPE_NORMAL
- en: from incident detection to containment, measure the effectiveness of the
  prefs: []
  type: TYPE_NORMAL
- en: workflow. *Collaboration* enables analysts to work smarter and faster.
  prefs: []
  type: TYPE_NORMAL
- en: '***Workflow and Metrics***'
  prefs: []
  type: TYPE_NORMAL
- en: The next generation of NSM tools will incorporate these key features.
  prefs: []
  type: TYPE_NORMAL
- en: Mandiant provides these capabilities in several of its commercial offerings.
  prefs: []
  type: TYPE_NORMAL
- en: The goal is to help customers more rapidly scope an intrusion, manage
  prefs: []
  type: TYPE_NORMAL
- en: the escalation and resolution process, and highlight areas of improvement.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3 shows a graph of two key incident response measurements.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3: Tracking open incidents versus the average time to close an incident*'
  prefs: []
  type: TYPE_NORMAL
- en: In Figure 3, we see a series of dots connected into a line, showing the
  prefs: []
  type: TYPE_NORMAL
- en: average time, in hours, required to close an incident. In this case, “closing”
  prefs: []
  type: TYPE_NORMAL
- en: means conducting short-term incident containment (STIC) to mitigate the
  prefs: []
  type: TYPE_NORMAL
- en: risk posed by an intruder who has compromised a computer. The bars show
  prefs: []
  type: TYPE_NORMAL
- en: the number of open incidents on a daily basis. The spike in open incidents
  prefs: []
  type: TYPE_NORMAL
- en: on April 23 caused the average closure time to spike as well. This indicates
  prefs: []
  type: TYPE_NORMAL
- en: that the CIRT was overwhelmed by the number of incidents it had to man-
  prefs: []
  type: TYPE_NORMAL
- en: age. If the organization’s goal for average closure time is 10 hours or less,
  prefs: []
  type: TYPE_NORMAL
- en: this spike demonstrates that the CIRT cannot meet such a goal when the
  prefs: []
  type: TYPE_NORMAL
- en: number of open incidents exceeds 10 daily cases. CIRT managers can use
  prefs: []
  type: TYPE_NORMAL
- en: these metrics to justify additional headcount or to adjust processes or tools
  prefs: []
  type: TYPE_NORMAL
- en: to keep the CIRT on track.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion **307**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 163](index-342_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '***Collaboration***'
  prefs: []
  type: TYPE_NORMAL
- en: CIRTs that can manage many simultaneous intrusions often benefit from
  prefs: []
  type: TYPE_NORMAL
- en: powerful collaboration tools. Many analysts are familiar with wikis, chat
  prefs: []
  type: TYPE_NORMAL
- en: channels and clients, and other tools for exchanging incident data. A new
  prefs: []
  type: TYPE_NORMAL
- en: sort of collaboration tool combines processing NSM data with shared ana-
  prefs: []
  type: TYPE_NORMAL
- en: lytical capabilities. Just as online word processing applications like Google
  prefs: []
  type: TYPE_NORMAL
- en: Docs allow multiple users to collaborate simultaneously, some tools are
  prefs: []
  type: TYPE_NORMAL
- en: emerging to provide similar features to NSM operators.
  prefs: []
  type: TYPE_NORMAL
- en: CloudShark ( *http://www.cloudshark.org/*) is an example of a collabora-
  prefs: []
  type: TYPE_NORMAL
- en: tive packet analysis tool. The team at QA Cafe ( *http://www.qacafe.com/*)
  prefs: []
  type: TYPE_NORMAL
- en: built CloudShark as a platform that customers could deploy on-premise
  prefs: []
  type: TYPE_NORMAL
- en: and share among multiple team members. (Despite its name, CloudShark
  prefs: []
  type: TYPE_NORMAL
- en: doesn’t reside in the cloud; customers buy the software and deploy it within
  prefs: []
  type: TYPE_NORMAL
- en: their enterprise.2) Analysts upload packet captures to the local appliance
  prefs: []
  type: TYPE_NORMAL
- en: and then manipulate packet captures via a web browser. Figure 4 shows
  prefs: []
  type: TYPE_NORMAL
- en: an example of CloudShark rendering DNS and Online Certificate Status
  prefs: []
  type: TYPE_NORMAL
- en: Protocol (OCSP) traffic.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4: CloudShark displaying DNS and OCSP traffic*'
  prefs: []
  type: TYPE_NORMAL
- en: CloudShark appears very similar to Wireshark, so analysts will feel at
  prefs: []
  type: TYPE_NORMAL
- en: home in the interface. A CIRT could maintain a local CloudShark appli-
  prefs: []
  type: TYPE_NORMAL
- en: ance as a repository of key network traces derived from various intrusions.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The example in this section appears courtesy of CloudShark and Jeremy Stretch,
    who publish sample traces online at *http://packetlife.net/captures/protocol/dns/*
    and *http://www.cloudshark*
  prefs: []
  type: TYPE_NORMAL
- en: '*.org/captures/46b2c8403863/* to demonstrate CloudShark’s capabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: '**308** Conclusion'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: For example, when Sguil retrieves traffic from a sensor to build a transcript,
    the server retains a local archive of the traffic. A CIRT could upload all of
  prefs: []
  type: TYPE_NORMAL
- en: those captures to CloudShark, making them easily available and browsable
  prefs: []
  type: TYPE_NORMAL
- en: by analysts. These analysts could also add comments to the trace via the
  prefs: []
  type: TYPE_NORMAL
- en: Info and Comments features and tag the trace with key names for later
  prefs: []
  type: TYPE_NORMAL
- en: reference. Being a local appliance, CloudShark may address some of the
  prefs: []
  type: TYPE_NORMAL
- en: concerns presented by pure cloud-based offerings as well.
  prefs: []
  type: TYPE_NORMAL
- en: '**conclusion**'
  prefs: []
  type: TYPE_NORMAL
- en: This final part of the book showed examples of some of the NSM capabil-
  prefs: []
  type: TYPE_NORMAL
- en: ities found outside the SO suite. As CIRTs realize that the power of NSM
  prefs: []
  type: TYPE_NORMAL
- en: must be applied to cloud environments and can be augmented by cloud
  prefs: []
  type: TYPE_NORMAL
- en: and collaborative platforms, I expect to see more offerings leveraging
  prefs: []
  type: TYPE_NORMAL
- en: those capabilities. Threat Stack, Packetloop, Mandiant, and CloudShark
  prefs: []
  type: TYPE_NORMAL
- en: are a few examples of companies integrating NSM-related services into
  prefs: []
  type: TYPE_NORMAL
- en: their core offerings. With luck, these and other solution providers will
  prefs: []
  type: TYPE_NORMAL
- en: continue to put tools and processes into the hands of CIRTs worldwide.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to defeat adversaries if we stop them before they accomplish
  prefs: []
  type: TYPE_NORMAL
- en: their mission. As it has been since the early 1990s, NSM will continue to
  prefs: []
  type: TYPE_NORMAL
- en: be a powerful, cost-effective way to counter intruders. Take heart, CIRTs;
  prefs: []
  type: TYPE_NORMAL
- en: the future remains bright!
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion **309**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**S o S c r i P T S**'
  prefs: []
  type: TYPE_NORMAL
- en: '**a N D c o N f i g u r aT i o N**'
  prefs: []
  type: TYPE_NORMAL
- en: '*by Doug Burks, creator of Security Onion*'
  prefs: []
  type: TYPE_NORMAL
- en: This appendix provides a quick reference
  prefs: []
  type: TYPE_NORMAL
- en: to the Security Onion (SO) control scripts
  prefs: []
  type: TYPE_NORMAL
- en: and configuration files. This material will
  prefs: []
  type: TYPE_NORMAL
- en: help SO users better administer and optimize
  prefs: []
  type: TYPE_NORMAL
- en: their sensor deployments.
  prefs: []
  type: TYPE_NORMAL
- en: '**So control Scripts**'
  prefs: []
  type: TYPE_NORMAL
- en: The NSM control scripts are one of the core components of SO. These
  prefs: []
  type: TYPE_NORMAL
- en: scripts were originally a part of the NSMnow package developed by the
  prefs: []
  type: TYPE_NORMAL
- en: SecurixLive team ( *http://www.securixlive.com/nsmnow/docs/index.php*), but
  prefs: []
  type: TYPE_NORMAL
- en: they have been heavily modified for use in SO.
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: The NSM scripts were first developed to control a Sguil server (sguild), its
    agents (snort_agent, pads_agent, sancp_agent, and pcap_agent), and its sensor
  prefs: []
  type: TYPE_NORMAL
- en: components (snort, pads, sancp, and daemonlogger). The following are some of
  prefs: []
  type: TYPE_NORMAL
- en: 'the changes we’ve made to SO:'
  prefs: []
  type: TYPE_NORMAL
- en: • Added the ability to use Suricata instead of Snort
  prefs: []
  type: TYPE_NORMAL
- en: • Added the ability to spin up multiple instances of Snort via PF_RING (and
  prefs: []
  type: TYPE_NORMAL
- en: an equal number of instances of barnyard2 and snort_agent)
  prefs: []
  type: TYPE_NORMAL
- en: • Added control of Argus
  prefs: []
  type: TYPE_NORMAL
- en: • Added control of Bro
  prefs: []
  type: TYPE_NORMAL
- en: • Added control of Sguil’s OSSEC agent
  prefs: []
  type: TYPE_NORMAL
- en: • Added control of Sguil’s HTTP agent
  prefs: []
  type: TYPE_NORMAL
- en: • Replaced pads and sancp with prads
  prefs: []
  type: TYPE_NORMAL
- en: • Replaced daemonlogger with netsniff-ng
  prefs: []
  type: TYPE_NORMAL
- en: The NSM scripts are installed at */usr/sbin/nsm** and require root privi-
  prefs: []
  type: TYPE_NORMAL
- en: leges, so they should be run using sudo. The directory */usr/sbin/* should be
  prefs: []
  type: TYPE_NORMAL
- en: in your PATH variable, so you shouldn’t need to include the full path when
  prefs: []
  type: TYPE_NORMAL
- en: executing the commands. The full path is included in the examples here
  prefs: []
  type: TYPE_NORMAL
- en: for completeness.
  prefs: []
  type: TYPE_NORMAL
- en: We won’t cover every option for every script, but you can explore each
  prefs: []
  type: TYPE_NORMAL
- en: of these scripts using --help to learn more about them. For example, to see
  prefs: []
  type: TYPE_NORMAL
- en: 'more information about /usr/sbin/nsm, enter this command:'
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo /usr/sbin/nsm --help**
  prefs: []
  type: TYPE_NORMAL
- en: The NSMnow Administration scripts are designed to easily configure and manage
  prefs: []
  type: TYPE_NORMAL
- en: your NSM installation. Bugs, comments and flames can be directed to the
  prefs: []
  type: TYPE_NORMAL
- en: SXL team at dev@securixlive.com
  prefs: []
  type: TYPE_NORMAL
- en: The NSMnow Administration scripts come with ABSOLUTELY NO WARRANTY.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usage: /usr/sbin/nsm [options]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Options:'
  prefs: []
  type: TYPE_NORMAL
- en: -U Check and apply any available upgrades
  prefs: []
  type: TYPE_NORMAL
- en: -V Show version information
  prefs: []
  type: TYPE_NORMAL
- en: -? Show usage information
  prefs: []
  type: TYPE_NORMAL
- en: 'Long Options:'
  prefs: []
  type: TYPE_NORMAL
- en: --sensor See nsm_sensor
  prefs: []
  type: TYPE_NORMAL
- en: --server See nsm_server
  prefs: []
  type: TYPE_NORMAL
- en: --all Performs actions on both sensor and server
  prefs: []
  type: TYPE_NORMAL
- en: --upgrade Same as -U
  prefs: []
  type: TYPE_NORMAL
- en: --version Same as -V
  prefs: []
  type: TYPE_NORMAL
- en: --help Same as -?
  prefs: []
  type: TYPE_NORMAL
- en: '**312** Appendix'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm***'
  prefs: []
  type: TYPE_NORMAL
- en: The high-level /usr/sbin/nsm script can pass options to some of the under-
  prefs: []
  type: TYPE_NORMAL
- en: lying scripts such as nsm_server and nsm_sensor. To check the status of all
  prefs: []
  type: TYPE_NORMAL
- en: 'server and sensor processes, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo /usr/sbin/nsm --all --status**
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: securityonion'
  prefs: []
  type: TYPE_NORMAL
- en: '* sguil server [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: HIDS'
  prefs: []
  type: TYPE_NORMAL
- en: '* ossec_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: Bro'
  prefs: []
  type: TYPE_NORMAL
- en: Name Type Host Status Pid Peers Started
  prefs: []
  type: TYPE_NORMAL
- en: bro standalone localhost running 13015 0 18 Feb 16:35:40
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: securityonion-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* netsniff-ng (full packet data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* pcap_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* snort_agent-1 (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* snort-1 (alert data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* barnyard2-1 (spooler, unified2 format) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* prads (sessions/assets) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* sancp_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* pads_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* argus [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* http_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '/etc/init.d/nsm is a wrapper for “/usr/sbin/nsm –all”, so you can also do:'
  prefs: []
  type: TYPE_NORMAL
- en: sudo service nsm status
  prefs: []
  type: TYPE_NORMAL
- en: In addition to status, you can use other process control keywords, such
  prefs: []
  type: TYPE_NORMAL
- en: as start, stop, and restart.
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_al _del***'
  prefs: []
  type: TYPE_NORMAL
- en: The high-level /usr/sbin/nsm_all_del script will prompt for user confirmation,
  prefs: []
  type: TYPE_NORMAL
- en: and then call nsm_all_del_quick to delete all NSM data and configuration.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo /usr/sbin/nsm_all_del**
  prefs: []
  type: TYPE_NORMAL
- en: WARNING!
  prefs: []
  type: TYPE_NORMAL
- en: Continuing will permanently delete all NSM configuration and data!
  prefs: []
  type: TYPE_NORMAL
- en: Press Ctrl-C to cancel.
  prefs: []
  type: TYPE_NORMAL
- en: OR
  prefs: []
  type: TYPE_NORMAL
- en: Press Enter to continue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopping: securityonion'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: sguil server [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopping: HIDS'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: ossec_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopping: Bro'
  prefs: []
  type: TYPE_NORMAL
- en: stopping bro ...
  prefs: []
  type: TYPE_NORMAL
- en: SO Scripts and Configuration **313**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopping: securityonion-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: netsniff-ng (full packet data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: pcap_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: snort_agent-1 (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: snort-1 (alert data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: barnyard2-1 (spooler, unified2 format) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: prads (sessions/assets) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: sancp_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: pads_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: argus [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: http_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: Delete Sensor
  prefs: []
  type: TYPE_NORMAL
- en: All configurations and collected data for sensor "securityonion-eth1" will be
    deleted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deleting sensor: securityonion-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* removing configuration files [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* removing collected data files [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* updating the sensor table [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: Delete Server
  prefs: []
  type: TYPE_NORMAL
- en: All configurations and collected data for server "securityonion" will be
  prefs: []
  type: TYPE_NORMAL
- en: deleted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deleting server:ontinue? (Y/N) [N]:'
  prefs: []
  type: TYPE_NORMAL
- en: '* removing configuration files [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* removing collected data files [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* removing database [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* updating the server table [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_al _del_quick***'
  prefs: []
  type: TYPE_NORMAL
- en: The high-level /usr/sbin/nsm_all_del_quick script will call nsm_sensor_del and
  prefs: []
  type: TYPE_NORMAL
- en: nsm_server_del to delete all NSM data and configuration, but will *not* prompt
  prefs: []
  type: TYPE_NORMAL
- en: for user confirmation. Be careful with this one!
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo nsm_all_del_quick**
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopping: securityonion'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: sguil server [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopping: HIDS'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: ossec_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopping: Bro'
  prefs: []
  type: TYPE_NORMAL
- en: stopping bro ...
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopping: securityonion-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: netsniff-ng (full packet data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: pcap_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: snort_agent-1 (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: snort-1 (alert data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '**314** Appendix'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: barnyard2-1 (spooler, unified2 format) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: prads (sessions/assets) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: sancp_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: pads_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: argus [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: http_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: Delete Sensor
  prefs: []
  type: TYPE_NORMAL
- en: All configurations and collected data for sensor "securityonion-eth1" will be
    deleted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deleting sensor: securityonion-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* removing configuration files [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* removing collected data files [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* updating the sensor table [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: Delete Server
  prefs: []
  type: TYPE_NORMAL
- en: All configurations and collected data for server "securityonion" will be
  prefs: []
  type: TYPE_NORMAL
- en: deleted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deleting server:ontinue? (Y/N) [N]:'
  prefs: []
  type: TYPE_NORMAL
- en: '* removing configuration files [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* removing collected data files [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* removing database [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* updating the server table [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_sensor***'
  prefs: []
  type: TYPE_NORMAL
- en: The high-level /usr/sbin/nsm_sensor script can pass options to some of the
  prefs: []
  type: TYPE_NORMAL
- en: underlying nsm_sensor_* scripts.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo /usr/sbin/nsm_sensor --status**
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: HIDS'
  prefs: []
  type: TYPE_NORMAL
- en: '* ossec_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: Bro'
  prefs: []
  type: TYPE_NORMAL
- en: Name Type Host Status Pid Peers Started
  prefs: []
  type: TYPE_NORMAL
- en: bro standalone localhost running 13015 0 18 Feb 16:35:40
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: securityonion-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* netsniff-ng (full packet data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* pcap_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* snort_agent-1 (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* snort-1 (alert data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* barnyard2-1 (spooler, unified2 format) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* prads (sessions/assets) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* sancp_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* pads_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* argus [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* http_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: SO Scripts and Configuration **315**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_sensor_add***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_sensor_add script is called by the setup wizard to add a new
  prefs: []
  type: TYPE_NORMAL
- en: sensor. You shouldn’t need to run this script manually.
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_sensor_backup-config***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_sensor_backup-config script will back up sensor configura-
  prefs: []
  type: TYPE_NORMAL
- en: tion files to a user-specified tarball.
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_sensor_backup-data***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_sensor_backup-data script will back up sensor datafiles to
    a
  prefs: []
  type: TYPE_NORMAL
- en: user-specified tarball. Keep in mind that datafiles consist of full packet cap-
  prefs: []
  type: TYPE_NORMAL
- en: ture and could be many gigabytes or terabytes.
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_sensor_clean***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_sensor_clean script is called by an hourly cronjob. If disk
  prefs: []
  type: TYPE_NORMAL
- en: usage is at 90 percent or higher, the oldest day’s worth of NSM data (pcaps,
  prefs: []
  type: TYPE_NORMAL
- en: Bro logs, and so on) will be deleted until disk usage is below 90 percent. The
  prefs: []
  type: TYPE_NORMAL
- en: process is repeated until disk usage falls below 90 percent.
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_sensor_clear***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_sensor_clear script clears all data from a sensor.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo /usr/sbin/nsm_sensor_clear --sensor-name=securityonion-eth1**
  prefs: []
  type: TYPE_NORMAL
- en: Clear Sensor
  prefs: []
  type: TYPE_NORMAL
- en: All collected data for sensor "securityonion-eth1" will be cleared.
  prefs: []
  type: TYPE_NORMAL
- en: 'Do you want to continue? (Y/N) [N]: **y**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clearing sensor: securityonion-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* removing bookmarks [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* removing collected data files [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* removing collected log directories [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_sensor_del***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_sensor_del script removes all data and configuration for a
  prefs: []
  type: TYPE_NORMAL
- en: user-specified sensor, permanently disabling it.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo /usr/sbin/nsm_sensor_del --sensor-name=securityonion-eth1**
  prefs: []
  type: TYPE_NORMAL
- en: Delete Sensor
  prefs: []
  type: TYPE_NORMAL
- en: All configurations and collected data for sensor "securityonion-eth1" will be
    deleted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Do you want to continue? (Y/N) [N]: **y**'
  prefs: []
  type: TYPE_NORMAL
- en: '**316** Appendix'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deleting sensor: securityonion-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* removing configuration files [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* removing collected data files [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* updating the sensor table [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_sensor_edit***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_sensor_edit script allows you to edit certain details of a
  prefs: []
  type: TYPE_NORMAL
- en: sensor’s configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_sensor_ps-daily-restart***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_sensor_ps-daily-restart script is called by a daily cronjob
    at
  prefs: []
  type: TYPE_NORMAL
- en: midnight to restart any services that may be dealing with date-based output
  prefs: []
  type: TYPE_NORMAL
- en: and need to roll to a new date stamp.
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_sensor_ps-restart***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_sensor_ps-restart script is used to restart sensor processes.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo /usr/sbin/nsm_sensor_ps-restart**
  prefs: []
  type: TYPE_NORMAL
- en: 'Restarting: HIDS'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: ossec_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: ossec_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Restarting: Bro'
  prefs: []
  type: TYPE_NORMAL
- en: stopping bro ...
  prefs: []
  type: TYPE_NORMAL
- en: starting bro ...
  prefs: []
  type: TYPE_NORMAL
- en: 'Restarting: securityonion-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* restarting with overlap: netsniff-ng (full packet data)'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: netsniff-ng (full packet data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '- stopping old process: netsniff-ng (full packet data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: pcap_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: pcap_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: snort_agent-1 (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: snort_agent-1 (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: snort-1 (alert data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: snort-1 (alert data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: barnyard2-1 (spooler, unified2 format) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: barnyard2-1 (spooler, unified2 format) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: prads (sessions/assets) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: prads (sessions/assets) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: pads_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: pads_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: sancp_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: sancp_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: argus [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: argus [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: http_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: http_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: SO Scripts and Configuration **317**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: Note that this and the remaining nsm_sensor_ps-* scripts allow you to be very
    granular in what sensors or processes you control. For example, notice
  prefs: []
  type: TYPE_NORMAL
- en: 'the --only-, --skip-, and --sensor-name= options in the following --help listing:'
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo /usr/sbin/nsm_sensor_ps-restart --help**
  prefs: []
  type: TYPE_NORMAL
- en: The NSMnow Administration scripts come with ABSOLUTELY NO WARRANTY.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usage: /usr/sbin/nsm_sensor_ps-restart [options]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Options:'
  prefs: []
  type: TYPE_NORMAL
- en: -d Use dialog mode
  prefs: []
  type: TYPE_NORMAL
- en: -y Force yes
  prefs: []
  type: TYPE_NORMAL
- en: -V Show version information
  prefs: []
  type: TYPE_NORMAL
- en: -? Show usage information
  prefs: []
  type: TYPE_NORMAL
- en: 'Long Options:'
  prefs: []
  type: TYPE_NORMAL
- en: --sensor-name=<name> Define specific sensor <name> to process
  prefs: []
  type: TYPE_NORMAL
- en: --only-barnyard2 Only process barnyard2
  prefs: []
  type: TYPE_NORMAL
- en: --only-snort-alert Only process snort alert
  prefs: []
  type: TYPE_NORMAL
- en: --only-pcap Only process packet logger
  prefs: []
  type: TYPE_NORMAL
- en: --only-argus Only process argus
  prefs: []
  type: TYPE_NORMAL
- en: --only-prads Only process prads
  prefs: []
  type: TYPE_NORMAL
- en: --only-bro Only process bro
  prefs: []
  type: TYPE_NORMAL
- en: --only-pcap-agent Only process pcap_agent
  prefs: []
  type: TYPE_NORMAL
- en: --only-sancp-agent Only process sancp_agent
  prefs: []
  type: TYPE_NORMAL
- en: --only-snort-agent Only process snort_agent
  prefs: []
  type: TYPE_NORMAL
- en: --only-http-agent Only process http_agent
  prefs: []
  type: TYPE_NORMAL
- en: --only-pads-agent Only process pads_agent
  prefs: []
  type: TYPE_NORMAL
- en: --only-ossec-agent Only process ossec_agent
  prefs: []
  type: TYPE_NORMAL
- en: --skip-barnyard2 Skip processing of barnyard2
  prefs: []
  type: TYPE_NORMAL
- en: --skip-snort-alert Skip processing of snort alert
  prefs: []
  type: TYPE_NORMAL
- en: --skip-pcap Skip processing of packet logger
  prefs: []
  type: TYPE_NORMAL
- en: --skip-argus Skip processing of argus
  prefs: []
  type: TYPE_NORMAL
- en: --skip-prads Skip processing of prads
  prefs: []
  type: TYPE_NORMAL
- en: --skip-bro Skip processing of bro
  prefs: []
  type: TYPE_NORMAL
- en: --skip-pcap-agent Skip processing of pcap_agent
  prefs: []
  type: TYPE_NORMAL
- en: --skip-sancp-agent Skip processing of sancp_agent
  prefs: []
  type: TYPE_NORMAL
- en: --skip-snort-agent Skip processing of snort_agent
  prefs: []
  type: TYPE_NORMAL
- en: --skip-http-agent Skip processing of http_agent
  prefs: []
  type: TYPE_NORMAL
- en: --skip-pads-agent Skip processing of pads_agent
  prefs: []
  type: TYPE_NORMAL
- en: --skip-ossec-agent Skip processing of ossec_agent
  prefs: []
  type: TYPE_NORMAL
- en: --if-stale Only restart processes that have crashed
  prefs: []
  type: TYPE_NORMAL
- en: --dialog Same as -d
  prefs: []
  type: TYPE_NORMAL
- en: --force-yes Same as -y
  prefs: []
  type: TYPE_NORMAL
- en: --version Same as -V
  prefs: []
  type: TYPE_NORMAL
- en: --help Same as -?
  prefs: []
  type: TYPE_NORMAL
- en: '**318** Appendix'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, suppose you’ve just made changes to *snort.conf*, and you want
    to restart Snort to make those changes take effect. Instead of restarting the
    entire stack, you could restart just the Snort process, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo /usr/sbin/nsm_sensor_ps-restart --only-snort-alert**
  prefs: []
  type: TYPE_NORMAL
- en: 'Restarting: securityonion-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: snort-1 (alert data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: snort-1 (alert data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_sensor_ps-start***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_sensor_ps-start script is used to start sensor processes.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo /usr/sbin/nsm_sensor_ps-start**
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting: HIDS'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: ossec_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting: Bro'
  prefs: []
  type: TYPE_NORMAL
- en: starting bro ...
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting: securityonion-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: netsniff-ng (full packet data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: pcap_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: snort_agent-1 (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: snort-1 (alert data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: barnyard2-1 (spooler, unified2 format) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: prads (sessions/assets) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: pads_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: sancp_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: argus [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: http_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* disk space currently at 26%'
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_sensor_ps-status***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_sensor_ps-status script is used to check the status of sensor
  prefs: []
  type: TYPE_NORMAL
- en: processes.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo /usr/sbin/nsm_sensor_ps-status**
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: HIDS'
  prefs: []
  type: TYPE_NORMAL
- en: '* ossec_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: Bro'
  prefs: []
  type: TYPE_NORMAL
- en: Name Type Host Status Pid Peers Started
  prefs: []
  type: TYPE_NORMAL
- en: bro standalone localhost running 15426 0 18 Feb 16:40:23
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: securityonion-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* netsniff-ng (full packet data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* pcap_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* snort_agent-1 (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* snort-1 (alert data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* barnyard2-1 (spooler, unified2 format) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: SO Scripts and Configuration **319**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '* prads (sessions/assets) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* sancp_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* pads_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* argus [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* http_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_sensor_ps-stop***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_sensor_ps-stop script is used to stop sensor processes.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo /usr/sbin/nsm_sensor_ps-stop**
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopping: HIDS'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: ossec_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopping: Bro'
  prefs: []
  type: TYPE_NORMAL
- en: stopping bro ...
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopping: securityonion-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: netsniff-ng (full packet data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: pcap_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: snort_agent-1 (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: snort-1 (alert data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: barnyard2-1 (spooler, unified2 format) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: prads (sessions/assets) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: sancp_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: pads_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: argus [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: http_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_server***'
  prefs: []
  type: TYPE_NORMAL
- en: The high-level /usr/sbin/nsm_server script can pass options to some of the
  prefs: []
  type: TYPE_NORMAL
- en: underlying nsm_server_* scripts.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo /usr/sbin/nsm_server --status**
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: securityonion'
  prefs: []
  type: TYPE_NORMAL
- en: '* sguil server [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_server_add***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_server_add script is used by the setup wizard to create a
  prefs: []
  type: TYPE_NORMAL
- en: new Sguil server (sguild). You shouldn’t need to run this script manually.
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_server_backup-config***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_server_backup-config script backs up the sguild configura-
  prefs: []
  type: TYPE_NORMAL
- en: tion files to a user-specified tarball.
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_server_backup-data***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_server_backup-data script backs up the sguild data to a
  prefs: []
  type: TYPE_NORMAL
- en: user-specified tarball.
  prefs: []
  type: TYPE_NORMAL
- en: '**320** Appendix'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_server_clear***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_server_clear script clears all sguild data.
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_server_del***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_server_del script permanently deletes the Sguil server
  prefs: []
  type: TYPE_NORMAL
- en: (sguild).
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_server_edit***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_server_edit script can be used to edit certain details of
    the
  prefs: []
  type: TYPE_NORMAL
- en: sguild configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_server_ps-restart***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_server_ps-restart script can be used to restart sguild.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo /usr/sbin/nsm_server_ps-restart**
  prefs: []
  type: TYPE_NORMAL
- en: 'Restarting: securityonion'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: sguil server [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: sguil server [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_server_ps-start***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_server_ps-start script can be used to start sguild.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo /usr/sbin/nsm_server_ps-start**
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting: securityonion'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: sguil server [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_server_ps-status***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_server_ps-status script can be used to check the status of
  prefs: []
  type: TYPE_NORMAL
- en: sguild.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo /usr/sbin/nsm_server_ps-status**
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: securityonion'
  prefs: []
  type: TYPE_NORMAL
- en: '* sguil server [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_server_ps-stop***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_server_ps-stop script can be used to stop sguild.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo /usr/sbin/nsm_server_ps-stop**
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopping: securityonion'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: sguil server [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: SO Scripts and Configuration **321**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_server_sensor-add***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_server_sensor-add script is used to add a sensor to the
  prefs: []
  type: TYPE_NORMAL
- en: sguild configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_server_sensor-del***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_server_sensor-del script is used to delete a sensor from the
  prefs: []
  type: TYPE_NORMAL
- en: sguild configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '***/usr/sbin/nsm_server_user-add***'
  prefs: []
  type: TYPE_NORMAL
- en: The /usr/sbin/nsm_server_user-add script is used to add a new sguild user.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo /usr/sbin/nsm_server_user-add**
  prefs: []
  type: TYPE_NORMAL
- en: User Name
  prefs: []
  type: TYPE_NORMAL
- en: Enter the name of the new user that will be granted privilege to connect to
  prefs: []
  type: TYPE_NORMAL
- en: 'this server.: **richard**'
  prefs: []
  type: TYPE_NORMAL
- en: User Pass
  prefs: []
  type: TYPE_NORMAL
- en: Enter the password for the new user that will be granted privilege to connect
  prefs: []
  type: TYPE_NORMAL
- en: 'to this server.:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify:'
  prefs: []
  type: TYPE_NORMAL
- en: Add User to Server
  prefs: []
  type: TYPE_NORMAL
- en: 'The following information has been collected:'
  prefs: []
  type: TYPE_NORMAL
- en: 'server: securityonion'
  prefs: []
  type: TYPE_NORMAL
- en: 'user: richard'
  prefs: []
  type: TYPE_NORMAL
- en: 'Do you want to create? (Y/N) [Y]: **y**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding user to server: richard => securityonion'
  prefs: []
  type: TYPE_NORMAL
- en: '**So configuration files**'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration files control how SO applications operate. Administrators
  prefs: []
  type: TYPE_NORMAL
- en: can change the contents of some of these files to tailor how SO collects and
  prefs: []
  type: TYPE_NORMAL
- en: interprets NSM data.
  prefs: []
  type: TYPE_NORMAL
- en: The SO team configures SO with sensible defaults, but in some cases,
  prefs: []
  type: TYPE_NORMAL
- en: changes may be appropriate. This section describes SO’s configuration files,
  prefs: []
  type: TYPE_NORMAL
- en: including whether the SO team believes that administrators may sometimes
  prefs: []
  type: TYPE_NORMAL
- en: need to make changes to them.
  prefs: []
  type: TYPE_NORMAL
- en: '***/etc/nsm/***'
  prefs: []
  type: TYPE_NORMAL
- en: '*/etc/nsm/* is the main configuration directory. It contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: administration.conf
  prefs: []
  type: TYPE_NORMAL
- en: ossec/
  prefs: []
  type: TYPE_NORMAL
- en: pulledpork/
  prefs: []
  type: TYPE_NORMAL
- en: rules/
  prefs: []
  type: TYPE_NORMAL
- en: '**322** Appendix'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: securityonion/
  prefs: []
  type: TYPE_NORMAL
- en: securityonion.conf
  prefs: []
  type: TYPE_NORMAL
- en: sensortab
  prefs: []
  type: TYPE_NORMAL
- en: servertab
  prefs: []
  type: TYPE_NORMAL
- en: templates/
  prefs: []
  type: TYPE_NORMAL
- en: $HOSTNAME-$INTERFACE
  prefs: []
  type: TYPE_NORMAL
- en: The final entry in this list will vary based on your hostname and the
  prefs: []
  type: TYPE_NORMAL
- en: interfaces you choose to monitor. For example, the following is output from
  prefs: []
  type: TYPE_NORMAL
- en: 'my sensor named securityonion with a single monitored interface (eth1):'
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 247 Jul 24 2012 administration.conf
  prefs: []
  type: TYPE_NORMAL
- en: drwxr-xr-x 2 root root 4.0K Feb 18 16:16 ossec
  prefs: []
  type: TYPE_NORMAL
- en: drwxr-xr-x 2 root root 4.0K Dec 18 11:15 pulledpork
  prefs: []
  type: TYPE_NORMAL
- en: drwxr-xr-x 3 root root 4.0K Feb 18 16:16 rules
  prefs: []
  type: TYPE_NORMAL
- en: drwxrwxr-x 3 sguil sguil 4.0K Feb 18 16:16 securityonion
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 37 Feb 18 16:16 securityonion.conf
  prefs: []
  type: TYPE_NORMAL
- en: drwxrwxr-x 2 sguil sguil 4.0K Feb 18 16:17 securityonion-eth1
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 31 Feb 18 16:16 sensortab
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 root root 349 Feb 18 16:16 servertab
  prefs: []
  type: TYPE_NORMAL
- en: drwxr-xr-x 8 root root 4.0K Dec 18 11:14 templates
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at each of these files and directories in turn.
  prefs: []
  type: TYPE_NORMAL
- en: '***/etc/nsm/administration.conf***'
  prefs: []
  type: TYPE_NORMAL
- en: The */etc/nsm/administration.conf* file defines some filesystem locations for
    the NSM scripts. You should never need to change anything in this file.
  prefs: []
  type: TYPE_NORMAL
- en: '***/etc/nsm/ossec/***'
  prefs: []
  type: TYPE_NORMAL
- en: The */etc/nsm/ossec/* directory contains the OSSEC agent for Sguil (ossec_
  prefs: []
  type: TYPE_NORMAL
- en: agent.tcl) and its configuration file ( *ossec_agent.conf* ). You probably won’t
    need to modify these files.
  prefs: []
  type: TYPE_NORMAL
- en: '***/etc/nsm/pul edpork/***'
  prefs: []
  type: TYPE_NORMAL
- en: The */etc/nsm/pulledpork/* directory contains the configuration files for
  prefs: []
  type: TYPE_NORMAL
- en: PulledPork, which is responsible for downloading IDS rulesets from the
  prefs: []
  type: TYPE_NORMAL
- en: Internet. The main configuration file for PulledPork is *pulledpork.conf*, but
  prefs: []
  type: TYPE_NORMAL
- en: you’ll probably spend most of your time modifying *disablesid.conf*, *enablesid*
  prefs: []
  type: TYPE_NORMAL
- en: '*.conf*, and *modifysid.conf* to tune your ruleset.'
  prefs: []
  type: TYPE_NORMAL
- en: '***/etc/nsm/rules/***'
  prefs: []
  type: TYPE_NORMAL
- en: The */etc/nsm/rules/* directory contains the IDS ruleset(s) downloaded
  prefs: []
  type: TYPE_NORMAL
- en: by PulledPork and associated files that control the sensor processes. When
  prefs: []
  type: TYPE_NORMAL
- en: PulledPork runs, it stores the rules in *downloaded.rules*. Don’t modify this
    file manually because PulledPork will overwrite it automatically the next time
    it
  prefs: []
  type: TYPE_NORMAL
- en: runs. Instead, tune your ruleset using the files in */etc/nsm/pulledpork/*.
  prefs: []
  type: TYPE_NORMAL
- en: You can write your own rules and store them in *local.rules*. To tune a
  prefs: []
  type: TYPE_NORMAL
- en: particular rule without totally disabling it, use *threshold.conf*. To specify
    a SO Scripts and Configuration **323**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: Berkeley Packet Filter (BPF) so that the sniffing processes will selectively
    ignore traffic from certain IP addresses, use *bpf.conf*. Bro automatically
  prefs: []
  type: TYPE_NORMAL
- en: monitors this file for changes and will update it as needed. Other services
  prefs: []
  type: TYPE_NORMAL
- en: (such as Snort and Suricata, PRADS, and Netsniff-ng) will need to be
  prefs: []
  type: TYPE_NORMAL
- en: restarted for the change to take effect.
  prefs: []
  type: TYPE_NORMAL
- en: '***/etc/nsm/securityonion/***'
  prefs: []
  type: TYPE_NORMAL
- en: The */etc/nsm/securityonion/* directory contains the following Sguil server
  prefs: []
  type: TYPE_NORMAL
- en: '(sguild) configuration files:'
  prefs: []
  type: TYPE_NORMAL
- en: '***autocat.conf*** Used to configure Sguil to automatically categorize'
  prefs: []
  type: TYPE_NORMAL
- en: certain events.
  prefs: []
  type: TYPE_NORMAL
- en: '***certs*** Contains the files used to secure communications between the'
  prefs: []
  type: TYPE_NORMAL
- en: Sguil server (sguild) and its agents and clients.
  prefs: []
  type: TYPE_NORMAL
- en: '***server.conf*** Contains some general settings used to start sguild and'
  prefs: []
  type: TYPE_NORMAL
- en: should not need to be modified.
  prefs: []
  type: TYPE_NORMAL
- en: '***sguild.access*** Used to control access to sguild.'
  prefs: []
  type: TYPE_NORMAL
- en: '***sguild.conf*** Contains general settings for sguild and probably doesn’t
    need to be changed.'
  prefs: []
  type: TYPE_NORMAL
- en: '***sguild.email*** Allows you to configure Sguil to automatically send email
    when certain events occur.'
  prefs: []
  type: TYPE_NORMAL
- en: '***sguild.queries*** Contains queries that can be accessed from the Sguil'
  prefs: []
  type: TYPE_NORMAL
- en: client by selecting **Query**4**Standard Queries**.
  prefs: []
  type: TYPE_NORMAL
- en: '***sguild.users*** This file should not be modified.'
  prefs: []
  type: TYPE_NORMAL
- en: '***/etc/nsm/securityonion.conf***'
  prefs: []
  type: TYPE_NORMAL
- en: The */etc/nsm/securityonion.conf* file contains the IDS_ENGINE, DAYSTOKEEP,
    and ELSA settings, which let you change the intrusion detection system (IDS)
  prefs: []
  type: TYPE_NORMAL
- en: engine, the amount of time data is kept in the Sguil database, and whether
  prefs: []
  type: TYPE_NORMAL
- en: ELSA is enabled, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: If you run the setup wizard and select Quick Setup, SO will default to
  prefs: []
  type: TYPE_NORMAL
- en: using Snort as the IDS engine. If you choose Advanced Setup, SO will ask if
  prefs: []
  type: TYPE_NORMAL
- en: you want to run Snort or Suricata. In either case, the setup wizard will set
  prefs: []
  type: TYPE_NORMAL
- en: the IDS_ENGINE variable. If you later decide to change your IDS engine, you
  prefs: []
  type: TYPE_NORMAL
- en: can stop all sensor processes, change the IDS_ENGINE setting, execute rule-
  prefs: []
  type: TYPE_NORMAL
- en: update, and then restart all sensor processes.
  prefs: []
  type: TYPE_NORMAL
- en: For example, suppose you ran the Quick Setup, giving you the default
  prefs: []
  type: TYPE_NORMAL
- en: 'of Snort. If you want to try Suricata, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo nsm_sensor_ps-stop**
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopping: HIDS'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: ossec_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopping: Bro'
  prefs: []
  type: TYPE_NORMAL
- en: waiting for lock ........ ok
  prefs: []
  type: TYPE_NORMAL
- en: stopping bro ...
  prefs: []
  type: TYPE_NORMAL
- en: '**324** Appendix'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopping: securityonion-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: netsniff-ng (full packet data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: pcap_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: snort_agent-1 (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: snort-1 (alert data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: barnyard2-1 (spooler, unified2 format) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: prads (sessions/assets) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: sancp_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: pads_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: argus [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: http_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo sed -i 's|ENGINE=snort|ENGINE=suricata|g' /etc/nsm/securityonion.conf**
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo rule-update > /dev/null**
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo nsm_sensor_ps-start**
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting: HIDS'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: ossec_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting: Bro'
  prefs: []
  type: TYPE_NORMAL
- en: starting bro ...
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting: securityonion-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: netsniff-ng (full packet data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: pcap_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: snort_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: suricata (alert data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: barnyard2 (spooler, unified2 format) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: prads (sessions/assets) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: pads_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: sancp_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: argus [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: http_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* disk space currently at 26%'
  prefs: []
  type: TYPE_NORMAL
- en: The DAYSTOKEEP variable allows you to define the retention policy for the
  prefs: []
  type: TYPE_NORMAL
- en: Sguil database. A daily cronjob deletes any data in securityonion_db older than
  prefs: []
  type: TYPE_NORMAL
- en: $DAYSTOKEEP. The default is 365\.
  prefs: []
  type: TYPE_NORMAL
- en: The ELSA variable is set when the setup wizard asks if you want to
  prefs: []
  type: TYPE_NORMAL
- en: enable ELSA.
  prefs: []
  type: TYPE_NORMAL
- en: '***/etc/nsm/sensortab***'
  prefs: []
  type: TYPE_NORMAL
- en: If the box is configured to monitor interfaces, this file contains the list
    of
  prefs: []
  type: TYPE_NORMAL
- en: interfaces to be monitored. To disable the sniffing processes on an interface,
  prefs: []
  type: TYPE_NORMAL
- en: you can temporarily stop interfaces as follows (replacing *HOSTNAME-INTERFACE*
  prefs: []
  type: TYPE_NORMAL
- en: 'with your actual hostname and interface name):'
  prefs: []
  type: TYPE_NORMAL
- en: '**sudo nsm_sensor_ps-stop --sensor-name= *HOSTNAME-INTERFACE***'
  prefs: []
  type: TYPE_NORMAL
- en: SO Scripts and Configuration **325**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: To disable an interface permanently, comment out the relevant line in
  prefs: []
  type: TYPE_NORMAL
- en: '*/etc/nsm/sensortab*. For example, suppose you ran the Quick Setup and were'
  prefs: []
  type: TYPE_NORMAL
- en: monitoring eth1, but then decided to move the sensor components off to a
  prefs: []
  type: TYPE_NORMAL
- en: separate box, making this just a server and not a sensor.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo nsm_sensor_ps-stop --sensor-name=securityonion-eth1**
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopping: HIDS'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: ossec_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopping: Bro'
  prefs: []
  type: TYPE_NORMAL
- en: stopping bro ...
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopping: securityonion-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: netsniff-ng (full packet data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: pcap_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: snort_agent-1 (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: snort-1 (alert data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: barnyard2-1 (spooler, unified2 format) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: prads (sessions/assets) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: sancp_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: pads_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: argus [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: http_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo sed -i 's|securityonion-eth1|#securityonion-eth1|g' /etc/nsm/sensortab**
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo service nsm status**
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: securityonion'
  prefs: []
  type: TYPE_NORMAL
- en: '* sguil server [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '***/etc/nsm/servertab***'
  prefs: []
  type: TYPE_NORMAL
- en: If the box is configured as a server, the */etc/nsm/servertab* file contains
    the internal name of the server (securityonion).
  prefs: []
  type: TYPE_NORMAL
- en: '***/etc/nsm/templates/***'
  prefs: []
  type: TYPE_NORMAL
- en: The */etc/nsm/templates/* directory contains template files for barnyard2,
  prefs: []
  type: TYPE_NORMAL
- en: http_agent, prads, pulledpork, snort, and suricata. The setup wizard copies
    the
  prefs: []
  type: TYPE_NORMAL
- en: template files from these directories into the target directories and custom-
  prefs: []
  type: TYPE_NORMAL
- en: izes them using the choices you made during setup. You shouldn’t modify
  prefs: []
  type: TYPE_NORMAL
- en: these files.
  prefs: []
  type: TYPE_NORMAL
- en: '***/etc/nsm/$HOSTNAME-$INTERFACE/***'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll have an /etc/nsm/$ *HOSTNAME*-$ *INTERFACE*/ directory for each interface
    that you choose to monitor. For example, suppose your hostname is securityonion
  prefs: []
  type: TYPE_NORMAL
- en: and you have a quad-port network interface card (eth0, eth1, eth2, and eth3),
  prefs: []
  type: TYPE_NORMAL
- en: but you choose to monitor only eth1 and eth2\. You will have the following
  prefs: []
  type: TYPE_NORMAL
- en: 'sensor configuration directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**326** Appendix'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: /etc/nsm/securityonion-eth1/
  prefs: []
  type: TYPE_NORMAL
- en: /etc/nsm/securityonion-eth2/
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at the files in each of these directories.
  prefs: []
  type: TYPE_NORMAL
- en: '**barnyard2.conf**'
  prefs: []
  type: TYPE_NORMAL
- en: The *barnyard2.conf* file configures barnyard2, the process used to pick up
  prefs: []
  type: TYPE_NORMAL
- en: unified2 output from Snort or Suricata and insert the alerts into Sguil,
  prefs: []
  type: TYPE_NORMAL
- en: Snorby, or ELSA. There may be multiple *barnyard2.conf* files to handle
  prefs: []
  type: TYPE_NORMAL
- en: multiple instances of Snort.
  prefs: []
  type: TYPE_NORMAL
- en: You generally don’t need to modify this file unless you decide to add or
  prefs: []
  type: TYPE_NORMAL
- en: remove some of the outputs. For example, you might decide to stop sending
  prefs: []
  type: TYPE_NORMAL
- en: IDS alerts to ELSA, and forward them to a corporate security information
  prefs: []
  type: TYPE_NORMAL
- en: event management platform instead.
  prefs: []
  type: TYPE_NORMAL
- en: '**bpf.conf files**'
  prefs: []
  type: TYPE_NORMAL
- en: A global configuration file called *bpf.conf* at */etc/nsm/rules/bpf.conf* applies
    to all processes on all interfaces by default. Each process on each interface
  prefs: []
  type: TYPE_NORMAL
- en: 'has its own *.bpf* file, but by default, the per-process *.bpf* files are symlinked
    to the interface bpf, and the interface bpf is symlinked to the global *bpf.conf*,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: lrwxrwxrwx 1 root root 8 Feb 18 16:16 bpf-bro.conf -> bpf.conf
  prefs: []
  type: TYPE_NORMAL
- en: lrwxrwxrwx 1 root root 23 Feb 18 16:16 bpf.conf -> /etc/nsm/rules/bpf.conf
  prefs: []
  type: TYPE_NORMAL
- en: lrwxrwxrwx 1 root root 8 Feb 18 16:16 bpf-ids.conf -> bpf.conf
  prefs: []
  type: TYPE_NORMAL
- en: lrwxrwxrwx 1 root root 8 Feb 18 16:16 bpf-pcap.conf -> bpf.conf
  prefs: []
  type: TYPE_NORMAL
- en: lrwxrwxrwx 1 root root 8 Feb 18 16:16 bpf-prads.conf -> bpf.conf
  prefs: []
  type: TYPE_NORMAL
- en: To specify a bpf per-interface or per-process, simply replace the default
  prefs: []
  type: TYPE_NORMAL
- en: symlinks with the desired bpf files and restart services as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: '**http_agent.conf**'
  prefs: []
  type: TYPE_NORMAL
- en: '*http_agent* sends Bro HTTP logs into the Sguil database, and *http_agent.conf*
    allows you to configure which HTTP logs are included. For example, you'
  prefs: []
  type: TYPE_NORMAL
- en: may want to exclude high-traffic sites that your users normally visit in order
  prefs: []
  type: TYPE_NORMAL
- en: to avoid bloating the Sguil database.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re running ELSA, you may want to disable http_agent altogether to
  prefs: []
  type: TYPE_NORMAL
- en: prevent duplication of effort, since all Bro HTTP logs can be found in ELSA.
  prefs: []
  type: TYPE_NORMAL
- en: '**pads_agent.conf**'
  prefs: []
  type: TYPE_NORMAL
- en: The *pads_agent.conf* file configures pads_agent, which takes asset data from
  prefs: []
  type: TYPE_NORMAL
- en: PRADS and inserts it into Sguil. You generally don’t need to change any-
  prefs: []
  type: TYPE_NORMAL
- en: thing here.
  prefs: []
  type: TYPE_NORMAL
- en: SO Scripts and Configuration **327**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**pcap_agent.conf**'
  prefs: []
  type: TYPE_NORMAL
- en: The *pcap_agent.conf* file configures the pcap_agent, which allows the Sguil
  prefs: []
  type: TYPE_NORMAL
- en: server to request a pcap from the sensor’s pcap store. You probably won’t
  prefs: []
  type: TYPE_NORMAL
- en: need to change anything here.
  prefs: []
  type: TYPE_NORMAL
- en: '**prads.conf**'
  prefs: []
  type: TYPE_NORMAL
- en: The *prads.conf* file configures PRADS, a replacement for PADS and SANCP.
  prefs: []
  type: TYPE_NORMAL
- en: PRADS creates both asset data and session data. If you’re monitoring
  prefs: []
  type: TYPE_NORMAL
- en: anything other than RFC 1918 address ranges, update the home_nets variable
  prefs: []
  type: TYPE_NORMAL
- en: in this file.
  prefs: []
  type: TYPE_NORMAL
- en: '**sancp_agent.conf**'
  prefs: []
  type: TYPE_NORMAL
- en: The *sancp_agent.conf* file configures the sancp_agent, which takes session
    data from PRADS and inserts it into Sguil. You probably won’t need to change
  prefs: []
  type: TYPE_NORMAL
- en: anything here.
  prefs: []
  type: TYPE_NORMAL
- en: '**sensor.conf**'
  prefs: []
  type: TYPE_NORMAL
- en: The *sensor.conf* file contains a few different variables referenced by the
    NSM
  prefs: []
  type: TYPE_NORMAL
- en: scripts when starting processes. Most settings should remain at their default,
  prefs: []
  type: TYPE_NORMAL
- en: but you may need to tune IDS_LB_PROCS, which controls how many PF_RING
  prefs: []
  type: TYPE_NORMAL
- en: load-balanced processes are instantiated for Snort and Suricata. The setup
  prefs: []
  type: TYPE_NORMAL
- en: wizard will automatically ask you how many PF_RING instances you would like
  prefs: []
  type: TYPE_NORMAL
- en: for Snort or Suricata and Bro (assuming you choose Advanced Setup and
  prefs: []
  type: TYPE_NORMAL
- en: you have multiple cores).
  prefs: []
  type: TYPE_NORMAL
- en: If you need to adjust this setting after setup, stop the NSM processes,
  prefs: []
  type: TYPE_NORMAL
- en: modify the IDS_LB_PROCS variable in *sensor.conf*, and then restart the NSM
    processes. If you’re running Snort, the script automatically spawns $IDS_LB_PROCS
  prefs: []
  type: TYPE_NORMAL
- en: instances of Snort (using PF_RING), barnyard2, and snort_agent. If you’re run-
  prefs: []
  type: TYPE_NORMAL
- en: ning Suricata, the script automatically copies $IDS_LB_PROCS into *suricata*
  prefs: []
  type: TYPE_NORMAL
- en: '*.yaml*, and then Suricata spins up the PF_RING instances itself. Since Suricata
    is managing the PF_RING instances, it creates only one unified2 output, and'
  prefs: []
  type: TYPE_NORMAL
- en: therefore only one instance of barnyard2 and snort_agent are needed.
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, we start with the default of IDS_LB_PROCS=1,
  prefs: []
  type: TYPE_NORMAL
- en: increase the setting to 2, and then restart the NSM processes. Notice that we
  prefs: []
  type: TYPE_NORMAL
- en: end up with two snort processes, two snort_agent processes, and two barnyard2
  prefs: []
  type: TYPE_NORMAL
- en: processes.
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo nsm_sensor_ps-stop**
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopping: HIDS'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: ossec_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopping: Bro'
  prefs: []
  type: TYPE_NORMAL
- en: stopping bro ...
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopping: securityonion-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: netsniff-ng (full packet data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: pcap_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: snort_agent-1 (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '**328** Appendix'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: snort-1 (alert data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: barnyard2-1 (spooler, unified2 format) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: prads (sessions/assets) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: sancp_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: pads_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: argus [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* stopping: http_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo sed -i 's|IDS_LB_PROCS=1|IDS_LB_PROCS=2|g' /etc/nsm/securityonion-eth1/**
  prefs: []
  type: TYPE_NORMAL
- en: '**sensor.conf**'
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo nsm_sensor_ps-start**
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting: HIDS'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: ossec_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting: Bro'
  prefs: []
  type: TYPE_NORMAL
- en: starting bro ...
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting: securityonion-eth1'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: netsniff-ng (full packet data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: pcap_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: snort_agent-1 (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: snort_agent-2 (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: snort-1 (alert data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: snort-2 (alert data) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: barnyard2-1 (spooler, unified2 format) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: barnyard2-2 (spooler, unified2 format) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: prads (sessions/assets) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: pads_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: sancp_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: argus [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* starting: http_agent (sguil) [ OK ]'
  prefs: []
  type: TYPE_NORMAL
- en: '* disk space currently at 26%'
  prefs: []
  type: TYPE_NORMAL
- en: As a sidenote, if you want to change the number of load-balanced pro-
  prefs: []
  type: TYPE_NORMAL
- en: cesses for Bro, edit */opt/bro/etc/node.cfg* and change the lb_procs variable,
  prefs: []
  type: TYPE_NORMAL
- en: 'and then issue the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sudo broctl install**'
  prefs: []
  type: TYPE_NORMAL
- en: '**sudo broctl restart**'
  prefs: []
  type: TYPE_NORMAL
- en: '**snort_agent.conf**'
  prefs: []
  type: TYPE_NORMAL
- en: The *snort_agent.conf* file configures the snort_agent, which takes alerts from
    barnyard2 and inserts them into the Sguil database. You probably don’t need
  prefs: []
  type: TYPE_NORMAL
- en: to change anything here.
  prefs: []
  type: TYPE_NORMAL
- en: There may be multiple *snort_agent.conf* files to handle multiple instances
  prefs: []
  type: TYPE_NORMAL
- en: of Snort.
  prefs: []
  type: TYPE_NORMAL
- en: '**snort.conf**'
  prefs: []
  type: TYPE_NORMAL
- en: The *snort.conf* file configures Snort. Even if you’ve set IDS_LB_PROCS greater
    than 1, there will be only one *snort.conf* file, to ensure that Snort instances
    on the same interface are configured identically.
  prefs: []
  type: TYPE_NORMAL
- en: SO Scripts and Configuration **329**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**suricata.yaml**'
  prefs: []
  type: TYPE_NORMAL
- en: The *suricata.yaml* file configures Suricata. The NSM scripts copy $IDS_LB_PROCS
  prefs: []
  type: TYPE_NORMAL
- en: from *sensor.conf* into *suricata.yaml*, and then Suricata spins up the PF_RING
  prefs: []
  type: TYPE_NORMAL
- en: instances itself.
  prefs: []
  type: TYPE_NORMAL
- en: '***/etc/cron.d/***'
  prefs: []
  type: TYPE_NORMAL
- en: The */etc/cron.d/* directory contains some important cronjobs, so let’s look
    at each of these.
  prefs: []
  type: TYPE_NORMAL
- en: '**bro** This cronjob runs the recommended broctl cron every five minutes'
  prefs: []
  type: TYPE_NORMAL
- en: to ensure that Bro is running properly.
  prefs: []
  type: TYPE_NORMAL
- en: '**elsa** This cronjob runs the default ELSA cronjob every minute.'
  prefs: []
  type: TYPE_NORMAL
- en: '**nsm-watchdog** This cronjob checks the NSM sensor processes every five'
  prefs: []
  type: TYPE_NORMAL
- en: minutes, and restarts them if they have failed.
  prefs: []
  type: TYPE_NORMAL
- en: '**rule-update** This cronjob runs rule-update at 7:01 am Universal Coordinated'
  prefs: []
  type: TYPE_NORMAL
- en: Time (UTC). If the NSM box is a stand-alone or server, rule-update will
  prefs: []
  type: TYPE_NORMAL
- en: use PulledPork to download a new IDS ruleset from the Internet. If the
  prefs: []
  type: TYPE_NORMAL
- en: box is a sensor, it will wait a few minutes for the server download to com-
  prefs: []
  type: TYPE_NORMAL
- en: plete, and then use scp to copy the new IDS ruleset from the server to the
  prefs: []
  type: TYPE_NORMAL
- en: local sensor. This script also copies tuning files such as *threshold.conf*
    and *bpf.conf*, allowing you to make changes in one place (your central server)
  prefs: []
  type: TYPE_NORMAL
- en: that will apply to all of your distributed sensors automatically.
  prefs: []
  type: TYPE_NORMAL
- en: '**sensor-clean** This is an hourly cronjob that prevents full packet capture'
  prefs: []
  type: TYPE_NORMAL
- en: and other logfiles from filling your disk. If disk usage is above 90 per-
  prefs: []
  type: TYPE_NORMAL
- en: cent, the oldest day’s worth of NSM data (pcaps, Bro logs, and so on)
  prefs: []
  type: TYPE_NORMAL
- en: are deleted. This is repeated until the disk usage is below 90 percent.
  prefs: []
  type: TYPE_NORMAL
- en: '**sensor-newday** This daily cronjob runs at midnight to restart any services'
  prefs: []
  type: TYPE_NORMAL
- en: that may be dealing with date-based output and need to roll to a new
  prefs: []
  type: TYPE_NORMAL
- en: date stamp.
  prefs: []
  type: TYPE_NORMAL
- en: '**sguil-db-purge** This daily cronjob runs at 5:01 am UTC and performs'
  prefs: []
  type: TYPE_NORMAL
- en: database maintenance, including deleting any data older than $DAYSTOKEEP
  prefs: []
  type: TYPE_NORMAL
- en: (as defined in */etc/nsm/securityonion.conf*) and repairing any corrupted
  prefs: []
  type: TYPE_NORMAL
- en: MySQL tables.
  prefs: []
  type: TYPE_NORMAL
- en: '**squert-ip2c** This cronjob updates Squert’s IP-to-country (GeoIP)'
  prefs: []
  type: TYPE_NORMAL
- en: mappings.
  prefs: []
  type: TYPE_NORMAL
- en: '***Bro***'
  prefs: []
  type: TYPE_NORMAL
- en: Bro is installed in */opt/bro/* and its configuration files can be found in
  prefs: []
  type: TYPE_NORMAL
- en: '*/opt/bro/etc/*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**330** Appendix'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***CapMe***'
  prefs: []
  type: TYPE_NORMAL
- en: CapMe is a PHP-based web interface used to pull ASCII transcripts of TCP
  prefs: []
  type: TYPE_NORMAL
- en: sessions. Its PHP scripts and other resource files can be found in */var/www/*
  prefs: []
  type: TYPE_NORMAL
- en: '*capme/*. Generally, these files do not need to be modified.'
  prefs: []
  type: TYPE_NORMAL
- en: '***ELSA***'
  prefs: []
  type: TYPE_NORMAL
- en: ELSA’s core files can be found in */opt/elsa/*. Generally, you may need to
  prefs: []
  type: TYPE_NORMAL
- en: 'modify settings in its two main configuration files:'
  prefs: []
  type: TYPE_NORMAL
- en: '***/etc/elsa_web.conf*** This file configures the Apache web frontend of'
  prefs: []
  type: TYPE_NORMAL
- en: ELSA. It will be present if you chose a stand-alone or server installation
  prefs: []
  type: TYPE_NORMAL
- en: and chose to enable ELSA.
  prefs: []
  type: TYPE_NORMAL
- en: '***/etc/elsa_node.conf*** This file configures the log node backend of ELSA.'
  prefs: []
  type: TYPE_NORMAL
- en: It will be present if you chose a stand-alone or sensor installation and
  prefs: []
  type: TYPE_NORMAL
- en: enabled ELSA.
  prefs: []
  type: TYPE_NORMAL
- en: '***Squert***'
  prefs: []
  type: TYPE_NORMAL
- en: Squert is a web interface for the Sguil database written in PHP. The PHP
  prefs: []
  type: TYPE_NORMAL
- en: scripts and other resource files can be found in */var/www/squert/*. You gen-
  prefs: []
  type: TYPE_NORMAL
- en: erally don’t need to modify anything in this directory.
  prefs: []
  type: TYPE_NORMAL
- en: '***Snorby***'
  prefs: []
  type: TYPE_NORMAL
- en: Snorby is a web interface for IDS alerts written using Ruby on Rails. Its
  prefs: []
  type: TYPE_NORMAL
- en: scripts and other resource files can be found in */opt/snorby/*. Configuration
  prefs: []
  type: TYPE_NORMAL
- en: files can be found in */opt/snorby/config/*.
  prefs: []
  type: TYPE_NORMAL
- en: '***Syslog-ng***'
  prefs: []
  type: TYPE_NORMAL
- en: Syslog-ng is used by ELSA, and its configuration files can be found in
  prefs: []
  type: TYPE_NORMAL
- en: '*/etc/syslog-ng/*.'
  prefs: []
  type: TYPE_NORMAL
- en: '***/etc/network/interfaces***'
  prefs: []
  type: TYPE_NORMAL
- en: The */etc/network/interfaces* file configures your network interfaces. The
  prefs: []
  type: TYPE_NORMAL
- en: setup wizard will automatically configure this file for you if you choose
  prefs: []
  type: TYPE_NORMAL
- en: '**Yes, configure /etc/network/interfaces**.'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll want a management interface (preferably connected to a dedi-
  prefs: []
  type: TYPE_NORMAL
- en: cated management network) using either DHCP or preferably static IP. If
  prefs: []
  type: TYPE_NORMAL
- en: your management interface uses DHCP and you have Bro in cluster mode,
  prefs: []
  type: TYPE_NORMAL
- en: it will complain whenever your DHCP address changes, and you’ll need
  prefs: []
  type: TYPE_NORMAL
- en: to update your IP address in Bro’s *node.cfg* file. A static IP is highly recommended
    to prevent this problem.
  prefs: []
  type: TYPE_NORMAL
- en: SO Scripts and Configuration **331**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll want one or more interfaces dedicated to sniffing, with no
  prefs: []
  type: TYPE_NORMAL
- en: IP addresses. Network interface card offloading functions such as tso,
  prefs: []
  type: TYPE_NORMAL
- en: gso, and gro should be disabled to ensure that Snort and Suricata get an
  prefs: []
  type: TYPE_NORMAL
- en: accurate view of the traffic (see *http://securityonion.blogspot.com/2011/10/*
  prefs: []
  type: TYPE_NORMAL
- en: '*when-is-full-packet-capture-not-full.html*).'
  prefs: []
  type: TYPE_NORMAL
- en: The following are some sample *network/interfaces* entries.
  prefs: []
  type: TYPE_NORMAL
- en: auto lo
  prefs: []
  type: TYPE_NORMAL
- en: iface lo inet loopback
  prefs: []
  type: TYPE_NORMAL
- en: Management interface using DHCP (not recommended due to Bro issue described
    above)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: auto eth0
  prefs: []
  type: TYPE_NORMAL
- en: iface eth0 inet dhcp
  prefs: []
  type: TYPE_NORMAL
- en: OR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Management interface using STATIC IP (instead of DHCP)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: auto eth0
  prefs: []
  type: TYPE_NORMAL
- en: iface eth0 inet static
  prefs: []
  type: TYPE_NORMAL
- en: address 192.168.1.14
  prefs: []
  type: TYPE_NORMAL
- en: gateway 192.168.1.1
  prefs: []
  type: TYPE_NORMAL
- en: netmask 255.255.255.0
  prefs: []
  type: TYPE_NORMAL
- en: network 192.168.1.0
  prefs: []
  type: TYPE_NORMAL
- en: broadcast 192.168.1.255
  prefs: []
  type: TYPE_NORMAL
- en: dns-nameservers 192.168.1.1 192.168.1.2
  prefs: []
  type: TYPE_NORMAL
- en: AND one or more of the following
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Connected to TAP or SPAN port for traffic monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: auto eth1
  prefs: []
  type: TYPE_NORMAL
- en: iface eth1 inet manual
  prefs: []
  type: TYPE_NORMAL
- en: up ifconfig $IFACE -arp up
  prefs: []
  type: TYPE_NORMAL
- en: up ip link set $IFACE promisc on
  prefs: []
  type: TYPE_NORMAL
- en: down ip link set $IFACE promisc off
  prefs: []
  type: TYPE_NORMAL
- en: down ifconfig $IFACE down
  prefs: []
  type: TYPE_NORMAL
- en: post-up for i in rx tx sg tso ufo gso gro lro; do ethtool -K $IFACE $i off;
    done
  prefs: []
  type: TYPE_NORMAL
- en: post-up echo 1 > /proc/sys/net/ipv6/conf/$IFACE/disable_ipv6
  prefs: []
  type: TYPE_NORMAL
- en: '**updating So**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Two aspects of updating SO deserve mention: keeping the platform up-to-'
  prefs: []
  type: TYPE_NORMAL
- en: date and keeping MySQL up-to-date.
  prefs: []
  type: TYPE_NORMAL
- en: '***Updating the SO Distribution***'
  prefs: []
  type: TYPE_NORMAL
- en: Since all SO packages are in a standard Ubuntu Launchpad Personal Package
  prefs: []
  type: TYPE_NORMAL
- en: Archive (PPA), you can use standard Ubuntu package management tools to
  prefs: []
  type: TYPE_NORMAL
- en: update all packages. You can use the graphical Update Manager, or update
  prefs: []
  type: TYPE_NORMAL
- en: 'from the command line like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sudo apt-get update && sudo apt-get dist-upgrade**'
  prefs: []
  type: TYPE_NORMAL
- en: '**332** Appendix'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '***Updating MySQL***'
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Ubuntu MySQL packages can be problematic due to autossh
  prefs: []
  type: TYPE_NORMAL
- en: port forwarding and other issues. Here’s the recommended procedure to
  prefs: []
  type: TYPE_NORMAL
- en: ensure a smooth MySQL update.
  prefs: []
  type: TYPE_NORMAL
- en: '1\. Stop all services:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sudo service nsm stop**'
  prefs: []
  type: TYPE_NORMAL
- en: '**sudo service syslog-ng stop**'
  prefs: []
  type: TYPE_NORMAL
- en: '**sudo service apache2 stop**'
  prefs: []
  type: TYPE_NORMAL
- en: '**sudo pkill autossh**'
  prefs: []
  type: TYPE_NORMAL
- en: '**sudo pkill perl**'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Check the process listing and verify that all *nsm/syslog-ng/apache/autossh/*
  prefs: []
  type: TYPE_NORMAL
- en: '*perl* processes have stopped:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ps aux**'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Install the MySQL updates. Other updates (such as *securityonion-snorby*)
  prefs: []
  type: TYPE_NORMAL
- en: 'may require MySQL to be running, so update MySQL by itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sudo apt-get update && sudo apt-get install mysql-server mysql-server-core-5.5
    mysql-server-5.5**'
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Reboot the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sudo reboot**'
  prefs: []
  type: TYPE_NORMAL
- en: SO Scripts and Configuration **333**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**i N D e x**'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**'
  prefs: []
  type: TYPE_NORMAL
- en: Argus
  prefs: []
  type: TYPE_NORMAL
- en: as alternative to NetFlow, 202
  prefs: []
  type: TYPE_NORMAL
- en: Address Resolution Protocol (ARP),
  prefs: []
  type: TYPE_NORMAL
- en: counting bytes in session data
  prefs: []
  type: TYPE_NORMAL
- en: 16, 140–142
  prefs: []
  type: TYPE_NORMAL
- en: using, 169
  prefs: []
  type: TYPE_NORMAL
- en: address translation, 42–45
  prefs: []
  type: TYPE_NORMAL
- en: as data collection tool, 115
  prefs: []
  type: TYPE_NORMAL
- en: '*administration.conf*, 322–323'
  prefs: []
  type: TYPE_NORMAL
- en: log storage location, 106
  prefs: []
  type: TYPE_NORMAL
- en: administrators, as within IDC, 203–204
  prefs: []
  type: TYPE_NORMAL
- en: and Ra client, 128–133
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Package Tool (APT), 65
  prefs: []
  type: TYPE_NORMAL
- en: and Racluster client, 130–132, 248
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Persistent Threat (APT), 193
  prefs: []
  type: TYPE_NORMAL
- en: as source of session data, 22, 248
  prefs: []
  type: TYPE_NORMAL
- en: APT1, 193, 202, 277–278\. *See also*
  prefs: []
  type: TYPE_NORMAL
- en: ARIN (American Registry for Internet
  prefs: []
  type: TYPE_NORMAL
- en: APT1 module
  prefs: []
  type: TYPE_NORMAL
- en: Numbers), 40
  prefs: []
  type: TYPE_NORMAL
- en: resources, 190
  prefs: []
  type: TYPE_NORMAL
- en: ARP (Address Resolution Protocol),
  prefs: []
  type: TYPE_NORMAL
- en: adversary simulation, 187
  prefs: []
  type: TYPE_NORMAL
- en: 16, 140–142
  prefs: []
  type: TYPE_NORMAL
- en: Air Force Computer Emergency
  prefs: []
  type: TYPE_NORMAL
- en: AS (autonomous system), 28
  prefs: []
  type: TYPE_NORMAL
- en: Response Team
  prefs: []
  type: TYPE_NORMAL
- en: ASIM (Automated Security Incident
  prefs: []
  type: TYPE_NORMAL
- en: (AFCERT), 3
  prefs: []
  type: TYPE_NORMAL
- en: Measurement), 3
  prefs: []
  type: TYPE_NORMAL
- en: alert data, 28–30
  prefs: []
  type: TYPE_NORMAL
- en: asset-centric security, 199
  prefs: []
  type: TYPE_NORMAL
- en: American Registry for Internet
  prefs: []
  type: TYPE_NORMAL
- en: associate analyst, in ATI, 203–204
  prefs: []
  type: TYPE_NORMAL
- en: Numbers (ARIN), 40
  prefs: []
  type: TYPE_NORMAL
- en: ATI (Applied Threat Intelligence)
  prefs: []
  type: TYPE_NORMAL
- en: Amin, Rohan, 190
  prefs: []
  type: TYPE_NORMAL
- en: Center, 203–204
  prefs: []
  type: TYPE_NORMAL
- en: analysis, as element of detection phase,
  prefs: []
  type: TYPE_NORMAL
- en: '*autocat.conf*, 324'
  prefs: []
  type: TYPE_NORMAL
- en: 188, 193–195
  prefs: []
  type: TYPE_NORMAL
- en: autonomous system (AS), 28
  prefs: []
  type: TYPE_NORMAL
- en: “anatomy of a hack,” 190–191
  prefs: []
  type: TYPE_NORMAL
- en: autossh, as tunnel for SO data, 84,
  prefs: []
  type: TYPE_NORMAL
- en: Andre, Jen, 305
  prefs: []
  type: TYPE_NORMAL
- en: 97, 333
  prefs: []
  type: TYPE_NORMAL
- en: Applied Threat Intelligence (ATI)
  prefs: []
  type: TYPE_NORMAL
- en: Automated Security Incident
  prefs: []
  type: TYPE_NORMAL
- en: Center, 203–204
  prefs: []
  type: TYPE_NORMAL
- en: Measurement (ASIM), 3
  prefs: []
  type: TYPE_NORMAL
- en: APT (Advanced Package Tool), 65
  prefs: []
  type: TYPE_NORMAL
- en: APT (Advanced Persistent Threat), 193
  prefs: []
  type: TYPE_NORMAL
- en: APT1, 193, 202, 277–278\. *See also*
  prefs: []
  type: TYPE_NORMAL
- en: '**B**'
  prefs: []
  type: TYPE_NORMAL
- en: APT1 module
  prefs: []
  type: TYPE_NORMAL
- en: Baker, Michael, 306
  prefs: []
  type: TYPE_NORMAL
- en: resources, 190
  prefs: []
  type: TYPE_NORMAL
- en: '*barnyard2.conf*, 327'
  prefs: []
  type: TYPE_NORMAL
- en: APT1 module, 278
  prefs: []
  type: TYPE_NORMAL
- en: Berkeley Packet Filter (BPF), 118–123,
  prefs: []
  type: TYPE_NORMAL
- en: installing, 280
  prefs: []
  type: TYPE_NORMAL
- en: 130, 230, 280
  prefs: []
  type: TYPE_NORMAL
- en: testing, 280–283
  prefs: []
  type: TYPE_NORMAL
- en: Bianco, David, 32, 193
  prefs: []
  type: TYPE_NORMAL
- en: using, 278–279
  prefs: []
  type: TYPE_NORMAL
- en: BPF (Berkeley Packet Filter), 118–123,
  prefs: []
  type: TYPE_NORMAL
- en: apt-get
  prefs: []
  type: TYPE_NORMAL
- en: 130, 230, 280
  prefs: []
  type: TYPE_NORMAL
- en: and configuring SO sensor, 94
  prefs: []
  type: TYPE_NORMAL
- en: '*bpf-bro.conf*, 327'
  prefs: []
  type: TYPE_NORMAL
- en: installing APT1 module, 280
  prefs: []
  type: TYPE_NORMAL
- en: '*bpf.conf*, 324, 327'
  prefs: []
  type: TYPE_NORMAL
- en: and setting up an SO server, 89–90
  prefs: []
  type: TYPE_NORMAL
- en: breaches
  prefs: []
  type: TYPE_NORMAL
- en: for updating packages, 64, 77, 80,
  prefs: []
  type: TYPE_NORMAL
- en: classification of, 194, 208, 219,
  prefs: []
  type: TYPE_NORMAL
- en: 88–90, 94, 101
  prefs: []
  type: TYPE_NORMAL
- en: 232, 237
  prefs: []
  type: TYPE_NORMAL
- en: upgrade vs. dist-upgrade, 65–66
  prefs: []
  type: TYPE_NORMAL
- en: inevitability of, 5
  prefs: []
  type: TYPE_NORMAL
- en: architects, as within IDC, 203–204
  prefs: []
  type: TYPE_NORMAL
- en: and notifications, 196–197
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: Bro
  prefs: []
  type: TYPE_NORMAL
- en: cloud computing, 304–307
  prefs: []
  type: TYPE_NORMAL
- en: as alternative to NetFlow, 202
  prefs: []
  type: TYPE_NORMAL
- en: CloudShark, 308
  prefs: []
  type: TYPE_NORMAL
- en: APT1 module, 278
  prefs: []
  type: TYPE_NORMAL
- en: collection, as element of detection
  prefs: []
  type: TYPE_NORMAL
- en: installing, 280
  prefs: []
  type: TYPE_NORMAL
- en: phase, 188–191
  prefs: []
  type: TYPE_NORMAL
- en: testing, 280–283
  prefs: []
  type: TYPE_NORMAL
- en: Combs, Gerald, 122
  prefs: []
  type: TYPE_NORMAL
- en: using, 278–279
  prefs: []
  type: TYPE_NORMAL
- en: command-and-control (C2) channel,
  prefs: []
  type: TYPE_NORMAL
- en: '*capture_loss.log*, 243–244'
  prefs: []
  type: TYPE_NORMAL
- en: 190–194, 208, 237, 250–251
  prefs: []
  type: TYPE_NORMAL
- en: checksum validation with, 298–302
  prefs: []
  type: TYPE_NORMAL
- en: compromises
  prefs: []
  type: TYPE_NORMAL
- en: creating hashes of executables
  prefs: []
  type: TYPE_NORMAL
- en: client-side, 235–237
  prefs: []
  type: TYPE_NORMAL
- en: with, 264
  prefs: []
  type: TYPE_NORMAL
- en: phases of, 190
  prefs: []
  type: TYPE_NORMAL
- en: counting bytes in session data, 169
  prefs: []
  type: TYPE_NORMAL
- en: server-side, 207–208
  prefs: []
  type: TYPE_NORMAL
- en: as data collection tool, 115
  prefs: []
  type: TYPE_NORMAL
- en: computer incident response team
  prefs: []
  type: TYPE_NORMAL
- en: DNS logs generated by, 225–226,
  prefs: []
  type: TYPE_NORMAL
- en: (CIRT), 4, 203–205
  prefs: []
  type: TYPE_NORMAL
- en: 244–246
  prefs: []
  type: TYPE_NORMAL
- en: '*conn.log*, as generated by Bro, 21,'
  prefs: []
  type: TYPE_NORMAL
- en: extracting binaries with, 266–273
  prefs: []
  type: TYPE_NORMAL
- en: 242–243
  prefs: []
  type: TYPE_NORMAL
- en: FTP logs generated by, 228–229
  prefs: []
  type: TYPE_NORMAL
- en: Constituent Relations Team, 203, 205
  prefs: []
  type: TYPE_NORMAL
- en: integration with Malware Hash
  prefs: []
  type: TYPE_NORMAL
- en: containment
  prefs: []
  type: TYPE_NORMAL
- en: Registry, 285–288
  prefs: []
  type: TYPE_NORMAL
- en: speed of, 199–200
  prefs: []
  type: TYPE_NORMAL
- en: log storage location for, 106
  prefs: []
  type: TYPE_NORMAL
- en: techniques for, 198
  prefs: []
  type: TYPE_NORMAL
- en: restarting with broctl, 275–277, 283,
  prefs: []
  type: TYPE_NORMAL
- en: continuous monitoring, 8–9
  prefs: []
  type: TYPE_NORMAL
- en: 329–330
  prefs: []
  type: TYPE_NORMAL
- en: Costa, Gianluca, 147
  prefs: []
  type: TYPE_NORMAL
- en: as source of HTTP transaction data
  prefs: []
  type: TYPE_NORMAL
- en: cron, for periodic execution of
  prefs: []
  type: TYPE_NORMAL
- en: in Sguil, 165, 167
  prefs: []
  type: TYPE_NORMAL
- en: commands, 107, 330
  prefs: []
  type: TYPE_NORMAL
- en: as source of logs in ELSA, 178–180,
  prefs: []
  type: TYPE_NORMAL
- en: cronjobs, to execute commands,
  prefs: []
  type: TYPE_NORMAL
- en: 240, 242
  prefs: []
  type: TYPE_NORMAL
- en: 316–317, 325, 330
  prefs: []
  type: TYPE_NORMAL
- en: as source of session data, 21
  prefs: []
  type: TYPE_NORMAL
- en: as source of transaction data, 22–23
  prefs: []
  type: TYPE_NORMAL
- en: '**D**'
  prefs: []
  type: TYPE_NORMAL
- en: SSH logs generated by, 226–227
  prefs: []
  type: TYPE_NORMAL
- en: Bullard, Carter, 128
  prefs: []
  type: TYPE_NORMAL
- en: datatypes, 16, 160
  prefs: []
  type: TYPE_NORMAL
- en: Burks, Doug, 55, 167
  prefs: []
  type: TYPE_NORMAL
- en: alert data, 28–30
  prefs: []
  type: TYPE_NORMAL
- en: extracted content data, 19–20
  prefs: []
  type: TYPE_NORMAL
- en: '**C**'
  prefs: []
  type: TYPE_NORMAL
- en: full content data, 16–18
  prefs: []
  type: TYPE_NORMAL
- en: metadata, 26–28
  prefs: []
  type: TYPE_NORMAL
- en: campaigns, for tracking adversary
  prefs: []
  type: TYPE_NORMAL
- en: session data, 21–22
  prefs: []
  type: TYPE_NORMAL
- en: activity, 199–201
  prefs: []
  type: TYPE_NORMAL
- en: statistical data, 24–26
  prefs: []
  type: TYPE_NORMAL
- en: CapMe
  prefs: []
  type: TYPE_NORMAL
- en: transaction data, 22–23
  prefs: []
  type: TYPE_NORMAL
- en: as accessed from ELSA, 180,
  prefs: []
  type: TYPE_NORMAL
- en: date command, translating Unix
  prefs: []
  type: TYPE_NORMAL
- en: 250–251
  prefs: []
  type: TYPE_NORMAL
- en: epoch to human readable
  prefs: []
  type: TYPE_NORMAL
- en: as accessed from Snorby, 174–177
  prefs: []
  type: TYPE_NORMAL
- en: format, 106
  prefs: []
  type: TYPE_NORMAL
- en: as data delivery tool, 115
  prefs: []
  type: TYPE_NORMAL
- en: DAYSTOKEEP variable, 108
  prefs: []
  type: TYPE_NORMAL
- en: CIRT (computer incident response
  prefs: []
  type: TYPE_NORMAL
- en: De Francheschi, Andrea, 147
  prefs: []
  type: TYPE_NORMAL
- en: team), 4, 203–205
  prefs: []
  type: TYPE_NORMAL
- en: defensible network architecture, 196
  prefs: []
  type: TYPE_NORMAL
- en: checksums
  prefs: []
  type: TYPE_NORMAL
- en: demilitarized zone (DMZ), 11, 37–46
  prefs: []
  type: TYPE_NORMAL
- en: bad checksums, 298
  prefs: []
  type: TYPE_NORMAL
- en: df, to check partition utilization, 108
  prefs: []
  type: TYPE_NORMAL
- en: telling Bro to ignore, 298–301
  prefs: []
  type: TYPE_NORMAL
- en: Digital Corpora, 147, 151, 154
  prefs: []
  type: TYPE_NORMAL
- en: telling Snort to ignore, 302
  prefs: []
  type: TYPE_NORMAL
- en: Director of Incident Response, 203–204
  prefs: []
  type: TYPE_NORMAL
- en: for error detection in IP
  prefs: []
  type: TYPE_NORMAL
- en: '*disablesid.conf*, 323'
  prefs: []
  type: TYPE_NORMAL
- en: packets, 304
  prefs: []
  type: TYPE_NORMAL
- en: display filters, as used in Wireshark and
  prefs: []
  type: TYPE_NORMAL
- en: using Tshark to identify, 297–298
  prefs: []
  type: TYPE_NORMAL
- en: Tshark, 125–128
  prefs: []
  type: TYPE_NORMAL
- en: Cisco, as switch vendor, 12, 48
  prefs: []
  type: TYPE_NORMAL
- en: DMZ (demilitarized zone), 11, 37–46
  prefs: []
  type: TYPE_NORMAL
- en: client-side compromises, 235–237
  prefs: []
  type: TYPE_NORMAL
- en: '*dns.log*, as generated by Bro, 23,'
  prefs: []
  type: TYPE_NORMAL
- en: Cloppert, Michael, 190
  prefs: []
  type: TYPE_NORMAL
- en: 243–246, 282
  prefs: []
  type: TYPE_NORMAL
- en: '**336** Index'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: du, to check directory utilization, 108
  prefs: []
  type: TYPE_NORMAL
- en: and transaction data, 22–23
  prefs: []
  type: TYPE_NORMAL
- en: Dumpcap, usage of, 123–124
  prefs: []
  type: TYPE_NORMAL
- en: and URL events, 167
  prefs: []
  type: TYPE_NORMAL
- en: hunting (IOC-free analysis), 193
  prefs: []
  type: TYPE_NORMAL
- en: '**E**'
  prefs: []
  type: TYPE_NORMAL
- en: Hutchins, Eric, 190
  prefs: []
  type: TYPE_NORMAL
- en: ELSA (Enterprise Log Search and
  prefs: []
  type: TYPE_NORMAL
- en: Archive), usage of, 178–182
  prefs: []
  type: TYPE_NORMAL
- en: '**I**'
  prefs: []
  type: TYPE_NORMAL
- en: '*elsa_node.conf*, 108, 323, 331'
  prefs: []
  type: TYPE_NORMAL
- en: ICMP (Internet Control Message
  prefs: []
  type: TYPE_NORMAL
- en: '*elsa_web.conf*, 331'
  prefs: []
  type: TYPE_NORMAL
- en: Protocol)
  prefs: []
  type: TYPE_NORMAL
- en: '*enablesid.conf*, 323'
  prefs: []
  type: TYPE_NORMAL
- en: example intrusion, 212, 214
  prefs: []
  type: TYPE_NORMAL
- en: engineers, as within IDC, 203–204
  prefs: []
  type: TYPE_NORMAL
- en: searching Bro SSH logs, 226
  prefs: []
  type: TYPE_NORMAL
- en: Enterprise Log Search and Archive
  prefs: []
  type: TYPE_NORMAL
- en: and Tcpdump, 119–128
  prefs: []
  type: TYPE_NORMAL
- en: (ELSA), usage of, 178–182
  prefs: []
  type: TYPE_NORMAL
- en: and Wireshark, 142
  prefs: []
  type: TYPE_NORMAL
- en: enterprise security cycle, 5, 186
  prefs: []
  type: TYPE_NORMAL
- en: incident analyst role, 203–204
  prefs: []
  type: TYPE_NORMAL
- en: phases of, 187
  prefs: []
  type: TYPE_NORMAL
- en: Incident Detection and Response
  prefs: []
  type: TYPE_NORMAL
- en: escalation, as element of response
  prefs: []
  type: TYPE_NORMAL
- en: Center, 203–204
  prefs: []
  type: TYPE_NORMAL
- en: phase, 188, 193–197
  prefs: []
  type: TYPE_NORMAL
- en: incident handler role, 203–204
  prefs: []
  type: TYPE_NORMAL
- en: '*/etc/network/interfaces*, 87–88'
  prefs: []
  type: TYPE_NORMAL
- en: indicator of compromise (IOC)
  prefs: []
  type: TYPE_NORMAL
- en: event analyst role, 203–204
  prefs: []
  type: TYPE_NORMAL
- en: as intelligence format, 188–189,
  prefs: []
  type: TYPE_NORMAL
- en: event classification, 195
  prefs: []
  type: TYPE_NORMAL
- en: 193, 202, 277, 279
  prefs: []
  type: TYPE_NORMAL
- en: extracted content data, 19–20
  prefs: []
  type: TYPE_NORMAL
- en: OpenIOC, as schema for IOC, 278
  prefs: []
  type: TYPE_NORMAL
- en: Infrastructure and Development
  prefs: []
  type: TYPE_NORMAL
- en: '**F**'
  prefs: []
  type: TYPE_NORMAL
- en: Center, 203–204
  prefs: []
  type: TYPE_NORMAL
- en: Internet Control Message Protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Fenner, Bill, 116
  prefs: []
  type: TYPE_NORMAL
- en: '*See* ICMP (Internet Control'
  prefs: []
  type: TYPE_NORMAL
- en: find command, to process traffic,
  prefs: []
  type: TYPE_NORMAL
- en: Message Protocol)
  prefs: []
  type: TYPE_NORMAL
- en: 122, 128
  prefs: []
  type: TYPE_NORMAL
- en: intrusion categories, 194
  prefs: []
  type: TYPE_NORMAL
- en: for command, to process traffic,
  prefs: []
  type: TYPE_NORMAL
- en: intrusion kill chain, 190–192
  prefs: []
  type: TYPE_NORMAL
- en: 122, 128
  prefs: []
  type: TYPE_NORMAL
- en: intrusion prevention, 5
  prefs: []
  type: TYPE_NORMAL
- en: F-Response, 189
  prefs: []
  type: TYPE_NORMAL
- en: IOC (indicator of compromise)
  prefs: []
  type: TYPE_NORMAL
- en: '*ftp.log*, as generated by Bro, 228–229,'
  prefs: []
  type: TYPE_NORMAL
- en: as intelligence format, 188–189,
  prefs: []
  type: TYPE_NORMAL
- en: 272–273
  prefs: []
  type: TYPE_NORMAL
- en: 193, 202, 277, 279
  prefs: []
  type: TYPE_NORMAL
- en: full content data, 16–18
  prefs: []
  type: TYPE_NORMAL
- en: OpenIOC, as schema for IOC, 278
  prefs: []
  type: TYPE_NORMAL
- en: IOC-centric analysis (matching),
  prefs: []
  type: TYPE_NORMAL
- en: '**G**'
  prefs: []
  type: TYPE_NORMAL
- en: 193, 202
  prefs: []
  type: TYPE_NORMAL
- en: IOC-free analysis (hunting), 193
  prefs: []
  type: TYPE_NORMAL
- en: Garfinkel, Simson, 147, 229, 291
  prefs: []
  type: TYPE_NORMAL
- en: Iodine covert tunnel tool, 255–259
  prefs: []
  type: TYPE_NORMAL
- en: Gredler, Hannes, 116
  prefs: []
  type: TYPE_NORMAL
- en: IP addresses, 39–41
  prefs: []
  type: TYPE_NORMAL
- en: '**H**'
  prefs: []
  type: TYPE_NORMAL
- en: '**M**'
  prefs: []
  type: TYPE_NORMAL
- en: Halliday, Paul, 173, 174
  prefs: []
  type: TYPE_NORMAL
- en: Malware Hash Registry (MHR),
  prefs: []
  type: TYPE_NORMAL
- en: Harris, Guy, 116
  prefs: []
  type: TYPE_NORMAL
- en: 283–288
  prefs: []
  type: TYPE_NORMAL
- en: Heberlein, Todd, 3
  prefs: []
  type: TYPE_NORMAL
- en: Mandia, Kevin, 193
  prefs: []
  type: TYPE_NORMAL
- en: Hjelmvik, Erik, 153
  prefs: []
  type: TYPE_NORMAL
- en: Mandiant
  prefs: []
  type: TYPE_NORMAL
- en: Holste, Martin, 178, 245
  prefs: []
  type: TYPE_NORMAL
- en: APT1 report, 190, 193, 202,
  prefs: []
  type: TYPE_NORMAL
- en: '*http_agent.conf*, 327'
  prefs: []
  type: TYPE_NORMAL
- en: 277–278
  prefs: []
  type: TYPE_NORMAL
- en: '*http.log*, as generated by Bro'
  prefs: []
  type: TYPE_NORMAL
- en: involvement with South Carolina
  prefs: []
  type: TYPE_NORMAL
- en: and bad checksums, 299, 300–301
  prefs: []
  type: TYPE_NORMAL
- en: DoR, 6–8
  prefs: []
  type: TYPE_NORMAL
- en: extracting binaries from HTTP
  prefs: []
  type: TYPE_NORMAL
- en: M-Trends Report, 190
  prefs: []
  type: TYPE_NORMAL
- en: traffic, 269–270, 277
  prefs: []
  type: TYPE_NORMAL
- en: as platform for tracking key
  prefs: []
  type: TYPE_NORMAL
- en: querying, 243
  prefs: []
  type: TYPE_NORMAL
- en: incident measurements, 307
  prefs: []
  type: TYPE_NORMAL
- en: tracking executables, 264
  prefs: []
  type: TYPE_NORMAL
- en: Index **337**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: Mandiant for Intelligent Response
  prefs: []
  type: TYPE_NORMAL
- en: network visibility
  prefs: []
  type: TYPE_NORMAL
- en: (MIR), 189
  prefs: []
  type: TYPE_NORMAL
- en: capturing traffic on a client or
  prefs: []
  type: TYPE_NORMAL
- en: matching (IOC-centric analysis),
  prefs: []
  type: TYPE_NORMAL
- en: server, 49
  prefs: []
  type: TYPE_NORMAL
- en: 193, 202
  prefs: []
  type: TYPE_NORMAL
- en: locations for, 45–46
  prefs: []
  type: TYPE_NORMAL
- en: metadata, 26–28
  prefs: []
  type: TYPE_NORMAL
- en: network taps for, 48
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit, 239–241, 248, 251
  prefs: []
  type: TYPE_NORMAL
- en: switching SPAN ports for, 47–48
  prefs: []
  type: TYPE_NORMAL
- en: Metasploitable, 221
  prefs: []
  type: TYPE_NORMAL
- en: vs. network taps, 50
  prefs: []
  type: TYPE_NORMAL
- en: Meterpreter, as Metasploit component,
  prefs: []
  type: TYPE_NORMAL
- en: NIST (National Institute of Standards
  prefs: []
  type: TYPE_NORMAL
- en: 240–241, 248, 251–255
  prefs: []
  type: TYPE_NORMAL
- en: and Technology), 304
  prefs: []
  type: TYPE_NORMAL
- en: MHR (Malware Hash Registry),
  prefs: []
  type: TYPE_NORMAL
- en: '*notice.log*, as generated by Bro'
  prefs: []
  type: TYPE_NORMAL
- en: 283–288
  prefs: []
  type: TYPE_NORMAL
- en: analyzing with ELSA, 242–243
  prefs: []
  type: TYPE_NORMAL
- en: '*modifysid.conf*, 323'
  prefs: []
  type: TYPE_NORMAL
- en: with APT1 module, 279, 282
  prefs: []
  type: TYPE_NORMAL
- en: MySQL
  prefs: []
  type: TYPE_NORMAL
- en: extracting binaries from HTTP
  prefs: []
  type: TYPE_NORMAL
- en: database storage location, 105
  prefs: []
  type: TYPE_NORMAL
- en: traffic, 277
  prefs: []
  type: TYPE_NORMAL
- en: keeping software up-to-date, 333
  prefs: []
  type: TYPE_NORMAL
- en: hashing downloaded executables
  prefs: []
  type: TYPE_NORMAL
- en: query to determine storage
  prefs: []
  type: TYPE_NORMAL
- en: with Bro, 264
  prefs: []
  type: TYPE_NORMAL
- en: usage, 107
  prefs: []
  type: TYPE_NORMAL
- en: and malicious downloads, 286
  prefs: []
  type: TYPE_NORMAL
- en: setting up on SO using PPA, 89, 94
  prefs: []
  type: TYPE_NORMAL
- en: NPAT (network port address
  prefs: []
  type: TYPE_NORMAL
- en: as SO database, 76, 115, 167–169,
  prefs: []
  type: TYPE_NORMAL
- en: translation), 43–46
  prefs: []
  type: TYPE_NORMAL
- en: 178, 180
  prefs: []
  type: TYPE_NORMAL
- en: NSM (network security monitoring)
  prefs: []
  type: TYPE_NORMAL
- en: as target of data theft, 228–232
  prefs: []
  type: TYPE_NORMAL
- en: benefit to CIRTs, 4
  prefs: []
  type: TYPE_NORMAL
- en: as continuous business process, 4
  prefs: []
  type: TYPE_NORMAL
- en: '**N**'
  prefs: []
  type: TYPE_NORMAL
- en: datatypes, 16, 160
  prefs: []
  type: TYPE_NORMAL
- en: definition of, 3
  prefs: []
  type: TYPE_NORMAL
- en: NAT (network address translation),
  prefs: []
  type: TYPE_NORMAL
- en: efficacy of, 12–13, 31
  prefs: []
  type: TYPE_NORMAL
- en: 42–43
  prefs: []
  type: TYPE_NORMAL
- en: how to win with, 10
  prefs: []
  type: TYPE_NORMAL
- en: drawback with NSM, 31
  prefs: []
  type: TYPE_NORMAL
- en: legality of, 13–14
  prefs: []
  type: TYPE_NORMAL
- en: network visibility, 45–46
  prefs: []
  type: TYPE_NORMAL
- en: protecting user privacy when
  prefs: []
  type: TYPE_NORMAL
- en: vs. proxy, 294
  prefs: []
  type: TYPE_NORMAL
- en: conducting, 14
  prefs: []
  type: TYPE_NORMAL
- en: National Institute of Standards and
  prefs: []
  type: TYPE_NORMAL
- en: purchasing, 31–32
  prefs: []
  type: TYPE_NORMAL
- en: Technology (NIST), 304
  prefs: []
  type: TYPE_NORMAL
- en: relationship to other approaches,
  prefs: []
  type: TYPE_NORMAL
- en: net blocks, 39–41
  prefs: []
  type: TYPE_NORMAL
- en: 9–10
  prefs: []
  type: TYPE_NORMAL
- en: Net Optics, as tap vendor, 12, 48
  prefs: []
  type: TYPE_NORMAL
- en: resources, 32
  prefs: []
  type: TYPE_NORMAL
- en: Netsniff-ng, as data collection tool, 115,
  prefs: []
  type: TYPE_NORMAL
- en: simple setup, 10–11
  prefs: []
  type: TYPE_NORMAL
- en: 170, 172, 244
  prefs: []
  type: TYPE_NORMAL
- en: NSMNow, 311
  prefs: []
  type: TYPE_NORMAL
- en: network address translation (NAT),
  prefs: []
  type: TYPE_NORMAL
- en: '*/nsm/sensor_data/<sensorname>/dailylogs*'
  prefs: []
  type: TYPE_NORMAL
- en: 42–43
  prefs: []
  type: TYPE_NORMAL
- en: directory, 105–106, 116,
  prefs: []
  type: TYPE_NORMAL
- en: drawback with NSM, 31
  prefs: []
  type: TYPE_NORMAL
- en: 122, 128–129, 136–137
  prefs: []
  type: TYPE_NORMAL
- en: network visibility, 45–46
  prefs: []
  type: TYPE_NORMAL
- en: vs. proxy, 294
  prefs: []
  type: TYPE_NORMAL
- en: NetworkMiner
  prefs: []
  type: TYPE_NORMAL
- en: '**O**'
  prefs: []
  type: TYPE_NORMAL
- en: counting bytes in session data
  prefs: []
  type: TYPE_NORMAL
- en: OpenIOC format, 278
  prefs: []
  type: TYPE_NORMAL
- en: using, 169
  prefs: []
  type: TYPE_NORMAL
- en: OpenSSH
  prefs: []
  type: TYPE_NORMAL
- en: usage of, 153–157
  prefs: []
  type: TYPE_NORMAL
- en: for communications among
  prefs: []
  type: TYPE_NORMAL
- en: network port address translation
  prefs: []
  type: TYPE_NORMAL
- en: distributed SO platforms,
  prefs: []
  type: TYPE_NORMAL
- en: (NPAT), 43–46
  prefs: []
  type: TYPE_NORMAL
- en: 82–83
  prefs: []
  type: TYPE_NORMAL
- en: network security monitoring. *See*
  prefs: []
  type: TYPE_NORMAL
- en: for connecting via SOCKS
  prefs: []
  type: TYPE_NORMAL
- en: NSM (network security
  prefs: []
  type: TYPE_NORMAL
- en: proxy, 103
  prefs: []
  type: TYPE_NORMAL
- en: monitoring)
  prefs: []
  type: TYPE_NORMAL
- en: as logged by Bro, 277
  prefs: []
  type: TYPE_NORMAL
- en: network taps, 48, 49
  prefs: []
  type: TYPE_NORMAL
- en: for sensor administration, 51, 88,
  prefs: []
  type: TYPE_NORMAL
- en: 94, 124
  prefs: []
  type: TYPE_NORMAL
- en: '**338** Index'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: for X forwarding, 95–97
  prefs: []
  type: TYPE_NORMAL
- en: retrospective security analysis, 30
  prefs: []
  type: TYPE_NORMAL
- en: as used by an intruder, 232–233
  prefs: []
  type: TYPE_NORMAL
- en: Richardson, Michael, 116
  prefs: []
  type: TYPE_NORMAL
- en: OSSEC, 115, 165, 182, 227
  prefs: []
  type: TYPE_NORMAL
- en: RIR (Regional Internet Registry), 40
  prefs: []
  type: TYPE_NORMAL
- en: '*ossec_agent.conf*, 323'
  prefs: []
  type: TYPE_NORMAL
- en: Risso, Fulvio, 116
  prefs: []
  type: TYPE_NORMAL
- en: RobTex, 28, 132
  prefs: []
  type: TYPE_NORMAL
- en: '**P**'
  prefs: []
  type: TYPE_NORMAL
- en: routing, 28, 34, 49, 198, 299
  prefs: []
  type: TYPE_NORMAL
- en: Packetloop, 306
  prefs: []
  type: TYPE_NORMAL
- en: '*pads_agent.conf*, 327'
  prefs: []
  type: TYPE_NORMAL
- en: '**S**'
  prefs: []
  type: TYPE_NORMAL
- en: Passive Real-Time Asset Detection
  prefs: []
  type: TYPE_NORMAL
- en: SANCP (Security Analyst Network
  prefs: []
  type: TYPE_NORMAL
- en: System. *See* PRADS (Passive
  prefs: []
  type: TYPE_NORMAL
- en: Connection Profiler)
  prefs: []
  type: TYPE_NORMAL
- en: Real-Time Asset Detection
  prefs: []
  type: TYPE_NORMAL
- en: database table, 167
  prefs: []
  type: TYPE_NORMAL
- en: System)
  prefs: []
  type: TYPE_NORMAL
- en: querying via Sguil, 167–169,
  prefs: []
  type: TYPE_NORMAL
- en: '*pcap_agent.conf*, 328'
  prefs: []
  type: TYPE_NORMAL
- en: 211–212, 223
  prefs: []
  type: TYPE_NORMAL
- en: pcap file format, 50, 76, 114, 115
  prefs: []
  type: TYPE_NORMAL
- en: as source of session data, 22, 167
  prefs: []
  type: TYPE_NORMAL
- en: pcap-filter man page, 120
  prefs: []
  type: TYPE_NORMAL
- en: '*sancp_agent.conf*, 328'
  prefs: []
  type: TYPE_NORMAL
- en: penetration testing, 187
  prefs: []
  type: TYPE_NORMAL
- en: SANS Internet Storm Center (ISC)
  prefs: []
  type: TYPE_NORMAL
- en: People’s Liberation Army. *See* APT
  prefs: []
  type: TYPE_NORMAL
- en: Port Report, 132
  prefs: []
  type: TYPE_NORMAL
- en: (Advanced Persistent
  prefs: []
  type: TYPE_NORMAL
- en: Security Analyst Network Connection
  prefs: []
  type: TYPE_NORMAL
- en: Threat)
  prefs: []
  type: TYPE_NORMAL
- en: Profiler. *See* SANCP
  prefs: []
  type: TYPE_NORMAL
- en: Poison Ivy, 288
  prefs: []
  type: TYPE_NORMAL
- en: (Security Analyst Network
  prefs: []
  type: TYPE_NORMAL
- en: PPA (Personal Package Archive), 59\.
  prefs: []
  type: TYPE_NORMAL
- en: Connection Profiler)
  prefs: []
  type: TYPE_NORMAL
- en: '*See also* SO (Security'
  prefs: []
  type: TYPE_NORMAL
- en: Security Onion. *See* SO (Security
  prefs: []
  type: TYPE_NORMAL
- en: 'Onion): installation of'
  prefs: []
  type: TYPE_NORMAL
- en: Onion)
  prefs: []
  type: TYPE_NORMAL
- en: PRADS (Passive Real-Time Asset
  prefs: []
  type: TYPE_NORMAL
- en: '*securityonion.conf*, 108, 324–325'
  prefs: []
  type: TYPE_NORMAL
- en: Detection System)
  prefs: []
  type: TYPE_NORMAL
- en: SecurixLive, 311
  prefs: []
  type: TYPE_NORMAL
- en: counting bytes in session data
  prefs: []
  type: TYPE_NORMAL
- en: senior analyst, in ATI, 203–204
  prefs: []
  type: TYPE_NORMAL
- en: using, 169
  prefs: []
  type: TYPE_NORMAL
- en: sensor hardware
  prefs: []
  type: TYPE_NORMAL
- en: as source of NSM data, 115
  prefs: []
  type: TYPE_NORMAL
- en: estimating hard drive space for, 51
  prefs: []
  type: TYPE_NORMAL
- en: with Sguil, 165, 167–169,
  prefs: []
  type: TYPE_NORMAL
- en: requirements for, 49–50
  prefs: []
  type: TYPE_NORMAL
- en: 210–211
  prefs: []
  type: TYPE_NORMAL
- en: '*sensor.conf*, 328'
  prefs: []
  type: TYPE_NORMAL
- en: similarity to Bro’s connection
  prefs: []
  type: TYPE_NORMAL
- en: sensor_cleandisk() function, 107
  prefs: []
  type: TYPE_NORMAL
- en: logs, 180
  prefs: []
  type: TYPE_NORMAL
- en: sensor management, recommendations
  prefs: []
  type: TYPE_NORMAL
- en: '*prads.conf*, 328'
  prefs: []
  type: TYPE_NORMAL
- en: for, 51–52
  prefs: []
  type: TYPE_NORMAL
- en: principal analyst, in ATI, 203–204
  prefs: []
  type: TYPE_NORMAL
- en: '*server.conf*, 324'
  prefs: []
  type: TYPE_NORMAL
- en: Prosise, Chris, 193
  prefs: []
  type: TYPE_NORMAL
- en: server-side compromises, 207–208
  prefs: []
  type: TYPE_NORMAL
- en: protecting user privacy, 14
  prefs: []
  type: TYPE_NORMAL
- en: session data, 21–22
  prefs: []
  type: TYPE_NORMAL
- en: protocol analyzer, 116
  prefs: []
  type: TYPE_NORMAL
- en: Sguil
  prefs: []
  type: TYPE_NORMAL
- en: proxies, 289–294
  prefs: []
  type: TYPE_NORMAL
- en: agents, 115, 312
  prefs: []
  type: TYPE_NORMAL
- en: '*pulledpork.conf*, 323'
  prefs: []
  type: TYPE_NORMAL
- en: for analyzing a client-side intrusion,
  prefs: []
  type: TYPE_NORMAL
- en: PuTTY, for SOCKS proxy access,
  prefs: []
  type: TYPE_NORMAL
- en: 210–224
  prefs: []
  type: TYPE_NORMAL
- en: 103–105
  prefs: []
  type: TYPE_NORMAL
- en: databases used by, 107–108
  prefs: []
  type: TYPE_NORMAL
- en: incident category definitions in, 172
  prefs: []
  type: TYPE_NORMAL
- en: '**r**'
  prefs: []
  type: TYPE_NORMAL
- en: key functions, 164
  prefs: []
  type: TYPE_NORMAL
- en: managing the Sguil database, 108
  prefs: []
  type: TYPE_NORMAL
- en: '*ra.conf*. See */tmp/ra.conf*'
  prefs: []
  type: TYPE_NORMAL
- en: transcript data storage, 172
  prefs: []
  type: TYPE_NORMAL
- en: RAT (remote access trojan), 288
  prefs: []
  type: TYPE_NORMAL
- en: usage of
  prefs: []
  type: TYPE_NORMAL
- en: red teaming, 187
  prefs: []
  type: TYPE_NORMAL
- en: categorizing alert data, 172–173
  prefs: []
  type: TYPE_NORMAL
- en: Regional Internet Registry (RIR), 40
  prefs: []
  type: TYPE_NORMAL
- en: metadata and related data,
  prefs: []
  type: TYPE_NORMAL
- en: remote access trojan (RAT), 288
  prefs: []
  type: TYPE_NORMAL
- en: 164–165
  prefs: []
  type: TYPE_NORMAL
- en: resolution, as element of response
  prefs: []
  type: TYPE_NORMAL
- en: pivoting to full content data,
  prefs: []
  type: TYPE_NORMAL
- en: phase, 188, 198–201
  prefs: []
  type: TYPE_NORMAL
- en: 169–171
  prefs: []
  type: TYPE_NORMAL
- en: Index **339**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: Sguil, usage of *(continued)*
  prefs: []
  type: TYPE_NORMAL
- en: limiting access to, 102–103
  prefs: []
  type: TYPE_NORMAL
- en: querying alert data, 165–167
  prefs: []
  type: TYPE_NORMAL
- en: managing Sguil database
  prefs: []
  type: TYPE_NORMAL
- en: querying session data, 167–169
  prefs: []
  type: TYPE_NORMAL
- en: configuration of, 108
  prefs: []
  type: TYPE_NORMAL
- en: running, 161–163
  prefs: []
  type: TYPE_NORMAL
- en: requirements for server
  prefs: []
  type: TYPE_NORMAL
- en: simple aggregation, 164
  prefs: []
  type: TYPE_NORMAL
- en: hardware, 76
  prefs: []
  type: TYPE_NORMAL
- en: username and password during
  prefs: []
  type: TYPE_NORMAL
- en: selecting method to deploy code, 59
  prefs: []
  type: TYPE_NORMAL
- en: SO setup, 68–69, 79
  prefs: []
  type: TYPE_NORMAL
- en: as server-plus-sensors system,
  prefs: []
  type: TYPE_NORMAL
- en: sguil-db-purge script, 108
  prefs: []
  type: TYPE_NORMAL
- en: 56–58, 76
  prefs: []
  type: TYPE_NORMAL
- en: '*sguild.conf*, 324'
  prefs: []
  type: TYPE_NORMAL
- en: as stand-alone system, 56–57
  prefs: []
  type: TYPE_NORMAL
- en: Snorby
  prefs: []
  type: TYPE_NORMAL
- en: storage, estimating full content
  prefs: []
  type: TYPE_NORMAL
- en: as console to view alert data, 29,
  prefs: []
  type: TYPE_NORMAL
- en: data requirements, 51
  prefs: []
  type: TYPE_NORMAL
- en: 71–73
  prefs: []
  type: TYPE_NORMAL
- en: updating
  prefs: []
  type: TYPE_NORMAL
- en: email address requirement during
  prefs: []
  type: TYPE_NORMAL
- en: via command line, 101
  prefs: []
  type: TYPE_NORMAL
- en: SO setup, 69, 79
  prefs: []
  type: TYPE_NORMAL
- en: via graphical user interface,
  prefs: []
  type: TYPE_NORMAL
- en: usage of, 174–178
  prefs: []
  type: TYPE_NORMAL
- en: 100–101
  prefs: []
  type: TYPE_NORMAL
- en: Snort
  prefs: []
  type: TYPE_NORMAL
- en: SOCKS proxy, 103–104
  prefs: []
  type: TYPE_NORMAL
- en: alerts within ELSA generated by,
  prefs: []
  type: TYPE_NORMAL
- en: '*sosetup.log*, 70'
  prefs: []
  type: TYPE_NORMAL
- en: 180, 240–243, 248
  prefs: []
  type: TYPE_NORMAL
- en: South Carolina, intrusion example,
  prefs: []
  type: TYPE_NORMAL
- en: alerts within Sguil generated by,
  prefs: []
  type: TYPE_NORMAL
- en: 6–8
  prefs: []
  type: TYPE_NORMAL
- en: 210, 215–216
  prefs: []
  type: TYPE_NORMAL
- en: SPAN ports, 49, 50
  prefs: []
  type: TYPE_NORMAL
- en: configuring checksum mode in, 302
  prefs: []
  type: TYPE_NORMAL
- en: Sphinx, 115–116, 178
  prefs: []
  type: TYPE_NORMAL
- en: configuring X-Forwarded-For in, 294
  prefs: []
  type: TYPE_NORMAL
- en: Squert, usage of, 173–174
  prefs: []
  type: TYPE_NORMAL
- en: as console to view alert data, 29–30,
  prefs: []
  type: TYPE_NORMAL
- en: '*ssh.log*, as generated by Bro, 226–227'
  prefs: []
  type: TYPE_NORMAL
- en: 210–11, 214–216
  prefs: []
  type: TYPE_NORMAL
- en: statistical data, 24–26
  prefs: []
  type: TYPE_NORMAL
- en: as console to view session data, 22,
  prefs: []
  type: TYPE_NORMAL
- en: Suricata
  prefs: []
  type: TYPE_NORMAL
- en: 211–214
  prefs: []
  type: TYPE_NORMAL
- en: alerts generated by, 169, 174,
  prefs: []
  type: TYPE_NORMAL
- en: as element in pcap log file name,
  prefs: []
  type: TYPE_NORMAL
- en: 325–325, 328
  prefs: []
  type: TYPE_NORMAL
- en: 105–106
  prefs: []
  type: TYPE_NORMAL
- en: as SO configuration choice, 79
  prefs: []
  type: TYPE_NORMAL
- en: as source of alert data, 28, 30, 115,
  prefs: []
  type: TYPE_NORMAL
- en: as source of alert data, 28, 115,
  prefs: []
  type: TYPE_NORMAL
- en: 164–165
  prefs: []
  type: TYPE_NORMAL
- en: 164–165
  prefs: []
  type: TYPE_NORMAL
- en: '*snort_agent.conf*, 329'
  prefs: []
  type: TYPE_NORMAL
- en: '*suricata.yaml*, 328, 330'
  prefs: []
  type: TYPE_NORMAL
- en: '*snort.conf*, 319, 329'
  prefs: []
  type: TYPE_NORMAL
- en: Sysinternals PsExec, 189
  prefs: []
  type: TYPE_NORMAL
- en: '*snort.log.<Unix timestamp>* , as full'
  prefs: []
  type: TYPE_NORMAL
- en: Syslog-ng, as data delivery tool, 115,
  prefs: []
  type: TYPE_NORMAL
- en: content data generated
  prefs: []
  type: TYPE_NORMAL
- en: 178, 189, 331
  prefs: []
  type: TYPE_NORMAL
- en: by Netsniff-ng, 105
  prefs: []
  type: TYPE_NORMAL
- en: SO (Security Onion)
  prefs: []
  type: TYPE_NORMAL
- en: '**t**'
  prefs: []
  type: TYPE_NORMAL
- en: core tools, 116
  prefs: []
  type: TYPE_NORMAL
- en: data collection tool category of, 115
  prefs: []
  type: TYPE_NORMAL
- en: Tcpdump
  prefs: []
  type: TYPE_NORMAL
- en: data delivery tool category of, 115
  prefs: []
  type: TYPE_NORMAL
- en: for collecting sample traffic, 268,
  prefs: []
  type: TYPE_NORMAL
- en: data presentation tool
  prefs: []
  type: TYPE_NORMAL
- en: 280–281, 291
  prefs: []
  type: TYPE_NORMAL
- en: category of, 114
  prefs: []
  type: TYPE_NORMAL
- en: as packet analysis tool, 114
  prefs: []
  type: TYPE_NORMAL
- en: data storage with, 105–106
  prefs: []
  type: TYPE_NORMAL
- en: as source of full content data, 16–18
  prefs: []
  type: TYPE_NORMAL
- en: estimating database storage of,
  prefs: []
  type: TYPE_NORMAL
- en: usage of, 116–122
  prefs: []
  type: TYPE_NORMAL
- en: 107–108
  prefs: []
  type: TYPE_NORMAL
- en: Tcpflow, 229–230, 291–293
  prefs: []
  type: TYPE_NORMAL
- en: estimating filesystem
  prefs: []
  type: TYPE_NORMAL
- en: Team Cymru, 283
  prefs: []
  type: TYPE_NORMAL
- en: storage of, 108
  prefs: []
  type: TYPE_NORMAL
- en: threat-centric security, 199
  prefs: []
  type: TYPE_NORMAL
- en: installation of,
  prefs: []
  type: TYPE_NORMAL
- en: Threat Stack, 305
  prefs: []
  type: TYPE_NORMAL
- en: sensor system via *.iso*, 80–84
  prefs: []
  type: TYPE_NORMAL
- en: '*threshold.conf*, 323, 330'
  prefs: []
  type: TYPE_NORMAL
- en: sensor system via PPA, 92–96
  prefs: []
  type: TYPE_NORMAL
- en: time
  prefs: []
  type: TYPE_NORMAL
- en: server system via *.iso*, 77–80
  prefs: []
  type: TYPE_NORMAL
- en: events to record, 201
  prefs: []
  type: TYPE_NORMAL
- en: server system via PPA, 85–91
  prefs: []
  type: TYPE_NORMAL
- en: importance of, 5
  prefs: []
  type: TYPE_NORMAL
- en: stand-alone system, 59–73
  prefs: []
  type: TYPE_NORMAL
- en: '*/tmp/ra.conf*, 131–132'
  prefs: []
  type: TYPE_NORMAL
- en: '**340** Index'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '*/tmp/.xkey.log*, as logged keystrokes,'
  prefs: []
  type: TYPE_NORMAL
- en: Webber, Dustin, 174, 177, 305
  prefs: []
  type: TYPE_NORMAL
- en: 253–255
  prefs: []
  type: TYPE_NORMAL
- en: '*weird.log*, as generated by Bro, 299'
  prefs: []
  type: TYPE_NORMAL
- en: traffic
  prefs: []
  type: TYPE_NORMAL
- en: WHOIS
  prefs: []
  type: TYPE_NORMAL
- en: capturing on a client or server, 49
  prefs: []
  type: TYPE_NORMAL
- en: as form of metadata, 26–27
  prefs: []
  type: TYPE_NORMAL
- en: processing, 122, 128
  prefs: []
  type: TYPE_NORMAL
- en: as used in Sguil, 164–165
  prefs: []
  type: TYPE_NORMAL
- en: and Tcpdump, 268, 280-281, 291
  prefs: []
  type: TYPE_NORMAL
- en: whois, as tool to query Malware Hash
  prefs: []
  type: TYPE_NORMAL
- en: understanding flow, 35–38
  prefs: []
  type: TYPE_NORMAL
- en: Registry, 284
  prefs: []
  type: TYPE_NORMAL
- en: transaction data, 22–23
  prefs: []
  type: TYPE_NORMAL
- en: Windows Management Instrumen-
  prefs: []
  type: TYPE_NORMAL
- en: Tshark,
  prefs: []
  type: TYPE_NORMAL
- en: tation Command-line
  prefs: []
  type: TYPE_NORMAL
- en: reviewing checksums with, 296–297
  prefs: []
  type: TYPE_NORMAL
- en: (WMIC), 189
  prefs: []
  type: TYPE_NORMAL
- en: reviewing full content data with,
  prefs: []
  type: TYPE_NORMAL
- en: wireless local area network (WLAN),
  prefs: []
  type: TYPE_NORMAL
- en: 216–218, 249
  prefs: []
  type: TYPE_NORMAL
- en: 12–13, 34–35, 38–46,
  prefs: []
  type: TYPE_NORMAL
- en: usage of, 122–128
  prefs: []
  type: TYPE_NORMAL
- en: 238, 246
  prefs: []
  type: TYPE_NORMAL
- en: Twitter, as compromise vector, 238–239
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark
  prefs: []
  type: TYPE_NORMAL
- en: 256, 261–262
  prefs: []
  type: TYPE_NORMAL
- en: counting bytes in session data
  prefs: []
  type: TYPE_NORMAL
- en: using, 169
  prefs: []
  type: TYPE_NORMAL
- en: '**U**'
  prefs: []
  type: TYPE_NORMAL
- en: decoding protocols in, 144–145
  prefs: []
  type: TYPE_NORMAL
- en: following streams in, 143–144
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu, as NSM platform operating
  prefs: []
  type: TYPE_NORMAL
- en: modifying default column
  prefs: []
  type: TYPE_NORMAL
- en: system, 59, 64–65, 85–94
  prefs: []
  type: TYPE_NORMAL
- en: layout of, 137–140
  prefs: []
  type: TYPE_NORMAL
- en: UFW (Uncomplicated Firewall),
  prefs: []
  type: TYPE_NORMAL
- en: as packet analysis tool, 18–19
  prefs: []
  type: TYPE_NORMAL
- en: 102–103, 105
  prefs: []
  type: TYPE_NORMAL
- en: problems when sniffing traffic
  prefs: []
  type: TYPE_NORMAL
- en: Unit 61398\. *See* APT (Advanced
  prefs: []
  type: TYPE_NORMAL
- en: as root with, 123–124
  prefs: []
  type: TYPE_NORMAL
- en: Persistent Threat)
  prefs: []
  type: TYPE_NORMAL
- en: as source of extracted content data,
  prefs: []
  type: TYPE_NORMAL
- en: Universal Coordinated Time (UTC),
  prefs: []
  type: TYPE_NORMAL
- en: 19–20
  prefs: []
  type: TYPE_NORMAL
- en: 62, 70, 118
  prefs: []
  type: TYPE_NORMAL
- en: as source of statistical data, 24–26
  prefs: []
  type: TYPE_NORMAL
- en: Unix epoch time, 118
  prefs: []
  type: TYPE_NORMAL
- en: usage of, 136–147
  prefs: []
  type: TYPE_NORMAL
- en: understanding traffic flow, 35–38
  prefs: []
  type: TYPE_NORMAL
- en: Wiretap Act, 13
  prefs: []
  type: TYPE_NORMAL
- en: UTC (Universal Coordinated Time),
  prefs: []
  type: TYPE_NORMAL
- en: WLAN (wireless local area network),
  prefs: []
  type: TYPE_NORMAL
- en: 62, 70, 118
  prefs: []
  type: TYPE_NORMAL
- en: 12–13, 34–35, 38–46,
  prefs: []
  type: TYPE_NORMAL
- en: 238, 246
  prefs: []
  type: TYPE_NORMAL
- en: '**V**'
  prefs: []
  type: TYPE_NORMAL
- en: WMIC (Windows Management
  prefs: []
  type: TYPE_NORMAL
- en: VERIS (Vocabulary for Event
  prefs: []
  type: TYPE_NORMAL
- en: Instrumentation
  prefs: []
  type: TYPE_NORMAL
- en: Recording and Incident
  prefs: []
  type: TYPE_NORMAL
- en: Command-line), 189
  prefs: []
  type: TYPE_NORMAL
- en: Sharing), 196
  prefs: []
  type: TYPE_NORMAL
- en: '*www.testmyids.com*, 15–16, 20–23, 28–29,'
  prefs: []
  type: TYPE_NORMAL
- en: virtual private network (VPN), 31, 58,
  prefs: []
  type: TYPE_NORMAL
- en: 71, 84, 179
  prefs: []
  type: TYPE_NORMAL
- en: '258'
  prefs: []
  type: TYPE_NORMAL
- en: VirusTotal
  prefs: []
  type: TYPE_NORMAL
- en: '**X**'
  prefs: []
  type: TYPE_NORMAL
- en: submitting a binary to, 273–275
  prefs: []
  type: TYPE_NORMAL
- en: X forwarding via Secure Shell, 95
  prefs: []
  type: TYPE_NORMAL
- en: submitting a hash to, 264–266,
  prefs: []
  type: TYPE_NORMAL
- en: Xplico, usage of, 147–153
  prefs: []
  type: TYPE_NORMAL
- en: 273–274, 288
  prefs: []
  type: TYPE_NORMAL
- en: Xubuntu, as NSM platform operating
  prefs: []
  type: TYPE_NORMAL
- en: Visscher, Bamm, 3
  prefs: []
  type: TYPE_NORMAL
- en: system, 59–60, 63–65
  prefs: []
  type: TYPE_NORMAL
- en: Vocabulary for Event Recording
  prefs: []
  type: TYPE_NORMAL
- en: and Incident Sharing
  prefs: []
  type: TYPE_NORMAL
- en: '**Y**'
  prefs: []
  type: TYPE_NORMAL
- en: (VERIS), 196
  prefs: []
  type: TYPE_NORMAL
- en: VPN (virtual private network), 31,
  prefs: []
  type: TYPE_NORMAL
- en: Young, David, 116
  prefs: []
  type: TYPE_NORMAL
- en: 58, 258
  prefs: []
  type: TYPE_NORMAL
- en: '*YYYY-MM-DD.log*, as session data'
  prefs: []
  type: TYPE_NORMAL
- en: generated by Argus, 129
  prefs: []
  type: TYPE_NORMAL
- en: '**W**'
  prefs: []
  type: TYPE_NORMAL
- en: Wade, Aaron, 193
  prefs: []
  type: TYPE_NORMAL
- en: waves, for tracking CIRT activity,
  prefs: []
  type: TYPE_NORMAL
- en: 200–201
  prefs: []
  type: TYPE_NORMAL
- en: Index **341**
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '*The Practice of Network Security Monitoring* is set in New Baskerville, TheSansMono
    Condensed, Futura, and Dogma.'
  prefs: []
  type: TYPE_NORMAL
- en: This book was printed and bound at Edwards Brothers Malloy in
  prefs: []
  type: TYPE_NORMAL
- en: Ann Arbor, Michigan. The paper is 70# Williamsburg Smooth, which is
  prefs: []
  type: TYPE_NORMAL
- en: certified by the Sustainable Forestry Initiative (SFI).
  prefs: []
  type: TYPE_NORMAL
- en: The book uses a RepKover binding, in which the pages are bound
  prefs: []
  type: TYPE_NORMAL
- en: together with a cold-set, flexible glue and the first and last pages of the
  prefs: []
  type: TYPE_NORMAL
- en: resulting book block are attached to the cover with tape. The cover is
  prefs: []
  type: TYPE_NORMAL
- en: not actually glued to the book’s spine, and when open, the book lies flat
  prefs: []
  type: TYPE_NORMAL
- en: and the spine doesn’t crack.
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 164](index-378_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 165](index-378_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 166](index-378_3.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 167](index-378_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 168](index-378_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Image 169](index-378_6.png)'
  prefs: []
  type: TYPE_IMG
- en: Updates
  prefs: []
  type: TYPE_NORMAL
- en: Visit *http://nostarch.com/nsm/* for updates, errata, and other information.
  prefs: []
  type: TYPE_NORMAL
- en: '*More no-nonsense books from*'
  prefs: []
  type: TYPE_NORMAL
- en: nO starcH press
  prefs: []
  type: TYPE_NORMAL
- en: practical Malware analysis
  prefs: []
  type: TYPE_NORMAL
- en: MetasplOit
  prefs: []
  type: TYPE_NORMAL
- en: practical packet analysis,
  prefs: []
  type: TYPE_NORMAL
- en: the Hands-On Guide to
  prefs: []
  type: TYPE_NORMAL
- en: the penetration tester’s Guide
  prefs: []
  type: TYPE_NORMAL
- en: 2nd editiOn
  prefs: []
  type: TYPE_NORMAL
- en: dissecting Malicious software
  prefs: []
  type: TYPE_NORMAL
- en: '*by* david kennedy, jim o’gorman,'
  prefs: []
  type: TYPE_NORMAL
- en: Using wireshark to solve real-world
  prefs: []
  type: TYPE_NORMAL
- en: '*by* michael sikorski *and*'
  prefs: []
  type: TYPE_NORMAL
- en: devon kearns, *and* mati aharoni
  prefs: []
  type: TYPE_NORMAL
- en: network problems
  prefs: []
  type: TYPE_NORMAL
- en: andrew honig
  prefs: []
  type: TYPE_NORMAL
- en: july 2011, 328 pp., $49.95
  prefs: []
  type: TYPE_NORMAL
- en: '*by* chris sanders'
  prefs: []
  type: TYPE_NORMAL
- en: february 2012, 800 pp., $59.95
  prefs: []
  type: TYPE_NORMAL
- en: isbn 978-1-59327-288-3
  prefs: []
  type: TYPE_NORMAL
- en: july 2011, 280 pp., $49.95
  prefs: []
  type: TYPE_NORMAL
- en: isbn 978-1-59327-290-6
  prefs: []
  type: TYPE_NORMAL
- en: isbn 978-1-59327-266-1
  prefs: []
  type: TYPE_NORMAL
- en: HackinG, 2nd editiOn
  prefs: []
  type: TYPE_NORMAL
- en: tHe tanGled web
  prefs: []
  type: TYPE_NORMAL
- en: absOlUte Openbsd,
  prefs: []
  type: TYPE_NORMAL
- en: the art of exploitation
  prefs: []
  type: TYPE_NORMAL
- en: a Guide to securing Modern
  prefs: []
  type: TYPE_NORMAL
- en: 2nd editiOn
  prefs: []
  type: TYPE_NORMAL
- en: '*by* jon erickson'
  prefs: []
  type: TYPE_NORMAL
- en: web applications
  prefs: []
  type: TYPE_NORMAL
- en: Unix for the practical paranoid
  prefs: []
  type: TYPE_NORMAL
- en: february 2008, 488 pp. w/cd, $49.95
  prefs: []
  type: TYPE_NORMAL
- en: '*by* michal zalewski'
  prefs: []
  type: TYPE_NORMAL
- en: '*by* michael w. lucas'
  prefs: []
  type: TYPE_NORMAL
- en: isbn 978-1-59327-144-2
  prefs: []
  type: TYPE_NORMAL
- en: november 2011, 320 pp., $49.95
  prefs: []
  type: TYPE_NORMAL
- en: april 2013, 536 pp., $59.95
  prefs: []
  type: TYPE_NORMAL
- en: isbn 978-1-59327-388-0
  prefs: []
  type: TYPE_NORMAL
- en: isbn 978-1-59327-476-4
  prefs: []
  type: TYPE_NORMAL
- en: 'phone:'
  prefs: []
  type: TYPE_NORMAL
- en: 'email:'
  prefs: []
  type: TYPE_NORMAL
- en: 800.420.7240 or
  prefs: []
  type: TYPE_NORMAL
- en: sales@nostarch.com
  prefs: []
  type: TYPE_NORMAL
- en: 415.863.9900
  prefs: []
  type: TYPE_NORMAL
- en: 'web:'
  prefs: []
  type: TYPE_NORMAL
- en: www.nostarch.com
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 170](index-380_1.png)'
  prefs: []
  type: TYPE_IMG
- en: '**C O L L E C T**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Foreword by Todd Heberlein,**'
  prefs: []
  type: TYPE_NORMAL
- en: '**A N A L Y Z E**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Developer of the Network**'
  prefs: []
  type: TYPE_NORMAL
- en: '**E S C A L A T E**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security Monitor System**'
  prefs: []
  type: TYPE_NORMAL
- en: '**N**'
  prefs: []
  type: TYPE_NORMAL
- en: '**T H E P R A C T I C E O F**'
  prefs: []
  type: TYPE_NORMAL
- en: '**ETW**'
  prefs: []
  type: TYPE_NORMAL
- en: '**N E T W O R K S E C U R I T Y**'
  prefs: []
  type: TYPE_NORMAL
- en: '**OR**'
  prefs: []
  type: TYPE_NORMAL
- en: Network security is not simply about building impene-
  prefs: []
  type: TYPE_NORMAL
- en: • Interpret network evidence from server-side and
  prefs: []
  type: TYPE_NORMAL
- en: '**M O N I T O R I N G**'
  prefs: []
  type: TYPE_NORMAL
- en: trable walls—determined attackers *will* eventually over-
  prefs: []
  type: TYPE_NORMAL
- en: client-side intrusions
  prefs: []
  type: TYPE_NORMAL
- en: '**K T**'
  prefs: []
  type: TYPE_NORMAL
- en: come traditional defenses. The most effective computer
  prefs: []
  type: TYPE_NORMAL
- en: • Integrate threat intelligence into NSM software to
  prefs: []
  type: TYPE_NORMAL
- en: '**H**'
  prefs: []
  type: TYPE_NORMAL
- en: security strategies integrate network security monitoring
  prefs: []
  type: TYPE_NORMAL
- en: '**SEC**'
  prefs: []
  type: TYPE_NORMAL
- en: '**U N D E R S T A N D I N G I N C I D E N T D E T E C T I O N**'
  prefs: []
  type: TYPE_NORMAL
- en: '**SEC**'
  prefs: []
  type: TYPE_NORMAL
- en: identify sophisticated adversaries
  prefs: []
  type: TYPE_NORMAL
- en: '**E P**'
  prefs: []
  type: TYPE_NORMAL
- en: '(NSM): the collection and analysis of data to help you'
  prefs: []
  type: TYPE_NORMAL
- en: '**A N D R E S P O N S E**'
  prefs: []
  type: TYPE_NORMAL
- en: detect and respond to intrusions.
  prefs: []
  type: TYPE_NORMAL
- en: There’s no foolproof way to keep attackers out of
  prefs: []
  type: TYPE_NORMAL
- en: your network. But when they get in, you’ll be prepared.
  prefs: []
  type: TYPE_NORMAL
- en: In *The Practice of Network Security Monitoring*,
  prefs: []
  type: TYPE_NORMAL
- en: '**R**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The Practice of Network Security Monitoring* will show'
  prefs: []
  type: TYPE_NORMAL
- en: '**U**'
  prefs: []
  type: TYPE_NORMAL
- en: Mandiant CSO Richard Bejtlich shows you how to
  prefs: []
  type: TYPE_NORMAL
- en: you how to build a security net to detect, contain, and
  prefs: []
  type: TYPE_NORMAL
- en: '**R A**'
  prefs: []
  type: TYPE_NORMAL
- en: '**R I C H A R D B E J T L I C H**'
  prefs: []
  type: TYPE_NORMAL
- en: use NSM to add a robust layer of protection around
  prefs: []
  type: TYPE_NORMAL
- en: '**R**'
  prefs: []
  type: TYPE_NORMAL
- en: control them. Attacks are inevitable, but losing sensitive
  prefs: []
  type: TYPE_NORMAL
- en: '**C**'
  prefs: []
  type: TYPE_NORMAL
- en: your networks—no prior experience required. To help
  prefs: []
  type: TYPE_NORMAL
- en: '**I**'
  prefs: []
  type: TYPE_NORMAL
- en: data shouldn’t be.
  prefs: []
  type: TYPE_NORMAL
- en: you avoid costly and inflexible solutions, he teaches you
  prefs: []
  type: TYPE_NORMAL
- en: '**T T**'
  prefs: []
  type: TYPE_NORMAL
- en: how to deploy, build, and run an NSM operation using
  prefs: []
  type: TYPE_NORMAL
- en: '**Y I**'
  prefs: []
  type: TYPE_NORMAL
- en: open source software and vendor-neutral tools.
  prefs: []
  type: TYPE_NORMAL
- en: '**A B O U T T H E A U T H O R**'
  prefs: []
  type: TYPE_NORMAL
- en: '**MONI CE O**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll learn how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Richard Bejtlich is Chief Security Officer at Mandiant
  prefs: []
  type: TYPE_NORMAL
- en: and was previously Director of Incident Response for
  prefs: []
  type: TYPE_NORMAL
- en: • Determine where to deploy NSM platforms, and
  prefs: []
  type: TYPE_NORMAL
- en: General Electric. He is a graduate of Harvard University
  prefs: []
  type: TYPE_NORMAL
- en: size them for the monitored networks
  prefs: []
  type: TYPE_NORMAL
- en: and the United States Air Force Academy. His previous
  prefs: []
  type: TYPE_NORMAL
- en: '**F**'
  prefs: []
  type: TYPE_NORMAL
- en: • Deploy stand-alone or distributed NSM installations
  prefs: []
  type: TYPE_NORMAL
- en: works include *The Tao of Network Security Monitoring*,
  prefs: []
  type: TYPE_NORMAL
- en: '**T**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Extrusion Detection*, and *Real Digital Forensics*. He writes'
  prefs: []
  type: TYPE_NORMAL
- en: • Use command line and graphical packet analysis
  prefs: []
  type: TYPE_NORMAL
- en: '**OR**'
  prefs: []
  type: TYPE_NORMAL
- en: on his blog ( *http://taosecurity.blogspot.com*) and on
  prefs: []
  type: TYPE_NORMAL
- en: tools and NSM consoles
  prefs: []
  type: TYPE_NORMAL
- en: Twitter as @taosecurity.
  prefs: []
  type: TYPE_NORMAL
- en: '**ING**'
  prefs: []
  type: TYPE_NORMAL
- en: '***TH E FI N EST I N G E E K E NTE RTAI N M E NT™***'
  prefs: []
  type: TYPE_NORMAL
- en: '**B**'
  prefs: []
  type: TYPE_NORMAL
- en: www.nostarch.com
  prefs: []
  type: TYPE_NORMAL
- en: '**EJTL**'
  prefs: []
  type: TYPE_NORMAL
- en: '**$49.95 *($52.95 CDN)***'
  prefs: []
  type: TYPE_NORMAL
- en: '**IC**'
  prefs: []
  type: TYPE_NORMAL
- en: '***“I LIE FLAT.”***'
  prefs: []
  type: TYPE_NORMAL
- en: '**C S**'
  prefs: []
  type: TYPE_NORMAL
- en: '**O H**'
  prefs: []
  type: TYPE_NORMAL
- en: '**H**'
  prefs: []
  type: TYPE_NORMAL
- en: '**M ELV**'
  prefs: []
  type: TYPE_NORMAL
- en: '*This book uses RepKover —a durable binding that won’t snap shut.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PU E**'
  prefs: []
  type: TYPE_NORMAL
- en: '**T I**'
  prefs: []
  type: TYPE_NORMAL
- en: '**E N**'
  prefs: []
  type: TYPE_NORMAL
- en: '**R :**'
  prefs: []
  type: TYPE_NORMAL
- en: '*“An invaluable resource for anyone detecting*'
  prefs: []
  type: TYPE_NORMAL
- en: '**S/SEC**'
  prefs: []
  type: TYPE_NORMAL
- en: '**U**'
  prefs: []
  type: TYPE_NORMAL
- en: '*and responding to security breaches.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '**RITY**'
  prefs: []
  type: TYPE_NORMAL
- en: '***—Kevin Mandia, Mandiant CEO***'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  prefs: []
  type: TYPE_NORMAL
- en: Document Outline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[About the Author](index_split_000.html#p19)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Foreword](index_split_000.html#p21)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Preface](index_split_000.html#p27)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Audience](index_split_000.html#p28)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Prerequisites](index_split_000.html#p29)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Note on Software and Protocols](index_split_000.html#p29)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Scope](index_split_000.html#p30)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Acknowledgements](index_split_000.html#p31)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Part I: Getting Started](index_split_000.html#p35)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 1: Network Security Monitoring Rationale](index_split_000.html#p37)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[An Introduction to NSM](index_split_000.html#p38)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Does NSM Prevent Intrusions?](index_split_000.html#p39)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Is the Difference Between NSM and Continuous Monitoring?](index_split_000.html#p42)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How Does NSM Compare with Other Approaches?](index_split_000.html#p43)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Why Does NSM Work?](index_split_000.html#p44)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How NSM Is Set Up](index_split_000.html#p45)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[When NSM Won’t Work](index_split_000.html#p46)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Is NSM Legal?](index_split_000.html#p47)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How Can You Protect User Privacy During NSM Operations?](index_split_000.html#p48)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Sample NSM Test](index_split_000.html#p49)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Range of NSM Data](index_split_000.html#p50)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Full Content Data](index_split_000.html#p50)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Extracted Content Data](index_split_001.html#p53)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Session Data](index_split_001.html#p55)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Transaction Data](index_split_001.html#p56)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Statistical Data](index_split_001.html#p58)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Metadata](index_split_001.html#p60)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Alert Data](index_split_001.html#p62)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What’s the Point of All This Data?](index_split_001.html#p64)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[NSM Drawbacks](index_split_001.html#p65)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Where Can I Buy NSM?](index_split_001.html#p65)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Where Can I Go for Support or More Information?](index_split_001.html#p66)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_001.html#p66)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 2: Collecting Network Traffic: Access, Storage, and Management](index_split_001.html#p67)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Sample Network for a Pilot NSM System](index_split_001.html#p67)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Traffic Flow in a Simple Network](index_split_001.html#p69)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Possible Locations for NSM](index_split_001.html#p72)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[IP Addresses and Network Address Translation](index_split_001.html#p73)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Net Blocks](index_split_001.html#p73)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[IP Address Assignments](index_split_001.html#p75)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Address Translation](index_split_001.html#p76)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Choosing the Best Place to Obtain Network Visibility](index_split_001.html#p79)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Location for DMZ Network Traffic](index_split_001.html#p79)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Locations for Viewing the Wireless and Internal Network Traffic](index_split_001.html#p79)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Physical Access to the Traffic](index_split_001.html#p81)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using Switches for Traffic Monitoring](index_split_001.html#p81)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using a Network Tap](index_split_001.html#p82)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Capturing Traffic Directly on a Client or Server](index_split_001.html#p83)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Choosing an NSM Platform](index_split_001.html#p83)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ten NSM Platform Management Recommendations](index_split_001.html#p85)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_001.html#p86)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Part II: Security Onion Deployment](index_split_001.html#p87)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 3: Stand-alone NSM Deployment and Installation](index_split_001.html#p89)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stand-alone or Server Plus Sensors?](index_split_001.html#p90)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Choosing How to Get SO Code onto Hardware](index_split_001.html#p93)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Installing a Stand-alone System](index_split_001.html#p93)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Installing SO to a Hard Drive](index_split_001.html#p94)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Configuring SO Software](index_split_001.html#p98)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Choosing the Management Interface](index_split_001.html#p100)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Installing the NSM Software Components](index_split_001.html#p102)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Checking Your Installation](index_split_002.html#p104)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_002.html#p108)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 4: Distributed Deployment](index_split_002.html#p109)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Installing an SO Server Using the SO .iso File](index_split_002.html#p110)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SO Server Considerations](index_split_002.html#p110)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building Your SO Server](index_split_002.html#p111)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Configuring Your SO Server](index_split_002.html#p112)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Installing an SO Sensor Using the SO .iso Image](index_split_002.html#p114)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Configuring the SO Sensor](index_split_002.html#p115)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Completing Setup](index_split_002.html#p117)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Verifying that the Sensors Are Working](index_split_002.html#p118)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Verifying that the Autossh Tunnel Is Working](index_split_002.html#p118)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building an SO Server Using PPAs](index_split_002.html#p119)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Installing Ubuntu Server as the SO Server Operating System](index_split_002.html#p119)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Choosing a Static IP Address](index_split_002.html#p121)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Updating the Software](index_split_002.html#p122)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Beginning MySQL and PPA Setup on the SO Server](index_split_002.html#p123)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Configuring Your SO Server via PPA](index_split_002.html#p124)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building an SO Sensor Using PPAs](index_split_002.html#p126)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Installing Ubuntu Server as the SO Sensor Operating System](index_split_002.html#p126)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Configuring the System as a Sensor](index_split_002.html#p128)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Running the Setup Wizard](index_split_002.html#p129)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_002.html#p132)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 5: SO Platform Housekeeping](index_split_002.html#p133)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Keeping SO Up-to-Date](index_split_002.html#p133)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Updating via the GUI](index_split_002.html#p134)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Updating via the Command Line](index_split_002.html#p135)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Limiting Access to SO](index_split_002.html#p136)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Connecting via a SOCKS Proxy](index_split_002.html#p137)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Changing the Firewall Policy](index_split_002.html#p139)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Managing SO Data Storage](index_split_002.html#p139)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Managing Sensor Storage](index_split_002.html#p140)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Checking Database Drive Usage](index_split_002.html#p141)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Managing the Sguil Database](index_split_002.html#p142)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tracking Disk Usage](index_split_002.html#p142)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_002.html#p143)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Part III: Tools](index_split_002.html#p145)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 6: Command Line Packet Analysis Tools](index_split_002.html#p147)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SO Tool Categories](index_split_002.html#p148)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Presentation](index_split_002.html#p148)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SO Data Collection Tools](index_split_002.html#p149)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SO Data Delivery Tools](index_split_002.html#p149)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Running Tcpdump](index_split_002.html#p150)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Displaying, Writing, and Reading Traffic with Tcpdump](index_split_002.html#p151)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using Filters with Tcpdump](index_split_002.html#p152)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Extracting Details from Tcpdump Output](index_split_002.html#p155)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Examining Full Content Data with Tcpdump](index_split_003.html#p156)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using Dumpcap and Tshark](index_split_003.html#p156)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Running Tshark](index_split_003.html#p157)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Running Dumpcap](index_split_003.html#p157)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Running Tshark on Dumpcap’s Traffic](index_split_003.html#p159)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using Display Filters with Tshark](index_split_003.html#p159)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tshark Display Filters in Action](index_split_003.html#p161)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Running Argus and the Ra Client](index_split_003.html#p162)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stopping and Starting Argus](index_split_003.html#p163)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Argus File Format](index_split_003.html#p163)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Examining Argus Data](index_split_003.html#p164)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_003.html#p167)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 7: Graphical Packet Analysis Tools](index_split_003.html#p169)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using Wireshark](index_split_003.html#p170)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Running Wireshark](index_split_003.html#p170)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Viewing a Packet Capture in Wireshark](index_split_003.html#p171)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Modifying the Default Wireshark Layout](index_split_003.html#p171)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Some Useful Wireshark Features](index_split_003.html#p174)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using Xplico](index_split_003.html#p181)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Running Xplico](index_split_003.html#p181)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Creating Xplico Cases and Sessions](index_split_003.html#p182)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Processing Network Traffic](index_split_003.html#p183)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding the Decoded Traffic](index_split_003.html#p184)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Metadata and Summarizing Traffic](index_split_003.html#p187)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Examining Content with NetworkMiner](index_split_003.html#p187)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Running NetworkMiner](index_split_003.html#p188)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Collecting and Organizing Traffic Details](index_split_003.html#p189)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Rendering Content](index_split_003.html#p190)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_003.html#p191)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 8: NSM Consoles](index_split_003.html#p193)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[An NSM-centric Look at Network Traffic](index_split_003.html#p194)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using Sguil](index_split_003.html#p195)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Running Sguil](index_split_003.html#p195)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Sguil’s Six Key Functions](index_split_003.html#p198)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using Squert](index_split_003.html#p207)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Snorby](index_split_003.html#p208)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ELSA](index_split_003.html#p212)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_004.html#p215)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Part IV: NSM in Action](index_split_004.html#p217)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 9: NSM Operations](index_split_004.html#p219)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Enterprise Security Cycle](index_split_004.html#p220)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Planning Phase](index_split_004.html#p221)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Resistance Phase](index_split_004.html#p221)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Detection and Response Phases](index_split_004.html#p221)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Collection, Analysis, Escalation, and Resolution](index_split_004.html#p222)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Collection](index_split_004.html#p223)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Analysis](index_split_004.html#p227)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Escalation](index_split_004.html#p229)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Resolution](index_split_004.html#p232)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Remediation](index_split_004.html#p235)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using NSM to Improve Security](index_split_004.html#p236)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building a CIRT](index_split_004.html#p237)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_004.html#p239)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 10: Server-side Compromise](index_split_004.html#p241)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Server-side Compromise Defined](index_split_004.html#p242)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Server-side Compromise in Action](index_split_004.html#p243)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Starting with Sguil](index_split_004.html#p244)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Querying Sguil for Session Data](index_split_004.html#p245)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Returning to Alert Data](index_split_004.html#p248)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Reviewing Full Content Data with Tshark](index_split_004.html#p250)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding the Backdoor](index_split_004.html#p252)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Did the Intruder Do?](index_split_004.html#p253)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Else Did the Intruder Do?](index_split_004.html#p256)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Exploring the Session Data](index_split_005.html#p258)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Searching Bro DNS Logs](index_split_005.html#p259)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Searching Bro SSH Logs](index_split_005.html#p260)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Searching Bro FTP Logs](index_split_005.html#p262)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Decoding the Theft of Sensitive Data](index_split_005.html#p263)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Extracting the Stolen Archive](index_split_005.html#p264)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stepping Back](index_split_005.html#p265)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Summarizing Stage 1](index_split_005.html#p265)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Summarizing Stage 2](index_split_005.html#p266)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Next Steps](index_split_005.html#p266)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_005.html#p267)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 11: Client-side Compromise](index_split_005.html#p269)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Client-side Compromise Defined](index_split_005.html#p270)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Client-side Compromise in Action](index_split_005.html#p271)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting the Incident Report from a User](index_split_005.html#p272)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Starting Analysis with ELSA](index_split_005.html#p273)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Looking for Missing Traffic](index_split_005.html#p277)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Analyzing the Bro dns.log File](index_split_005.html#p279)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Checking Destination Ports](index_split_005.html#p280)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Examining the Command-and-Control Channel](index_split_005.html#p284)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Initial Access](index_split_005.html#p285)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Improving the Shell](index_split_005.html#p289)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Summarizing Stage 1](index_split_005.html#p290)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Pivoting to a Second Victim](index_split_005.html#p291)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Installing a Covert Tunnel](index_split_005.html#p291)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Enumerating the Victim](index_split_005.html#p293)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Summarizing Stage 2](index_split_005.html#p294)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_005.html#p295)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 12: Extending Security Onion](index_split_005.html#p297)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using Bro to Track Executables](index_split_005.html#p298)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Hashing Downloaded Executables with Bro](index_split_005.html#p298)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Submitting a Hash to VirusTotal](index_split_005.html#p298)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using Bro to Extract Binaries from Traffic](index_split_005.html#p300)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Configuring Bro to Extract Binaries from Traffic](index_split_005.html#p300)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Collecting Traffic to Test Bro](index_split_005.html#p301)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Testing Bro to Extract Binaries from HTTP Traffic](index_split_006.html#p303)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Examining the Binary Extracted from HTTP](index_split_006.html#p304)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Testing Bro to Extract Binaries from FTP Traffic](index_split_006.html#p306)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Examining the Binary Extracted from FTP](index_split_006.html#p307)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Submitting a Hash and Binary to VirusTotal](index_split_006.html#p307)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Restarting Bro](index_split_006.html#p309)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using APT1 Intelligence](index_split_006.html#p311)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using the APT1 Module](index_split_006.html#p312)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Installing the APT1 Module](index_split_006.html#p314)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Generating Traffic to Test the APT1 Module](index_split_006.html#p314)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Testing the APT1 Module](index_split_006.html#p315)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Reporting Downloads of Malicious Binaries](index_split_006.html#p317)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using the Team Cymru Malware Hash Registry](index_split_006.html#p317)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The MHR and SO: Active by Default](index_split_006.html#p319)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The MHR and SO vs. a Malicious Download](index_split_006.html#p320)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Identifying the Binary](index_split_006.html#p321)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_006.html#p322)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 13: Proxies and Checksums](index_split_006.html#p323)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Proxies](index_split_006.html#p323)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Proxies and Visibility](index_split_006.html#p324)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Dealing with Proxies in Production Networks](index_split_006.html#p328)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Checksums](index_split_006.html#p328)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Good Checksum](index_split_006.html#p329)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Bad Checksum](index_split_006.html#p329)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Identifying Bad and Good Checksums with Tshark](index_split_006.html#p330)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How Bad Checksums Happen](index_split_006.html#p332)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bro and Bad Checksums](index_split_006.html#p332)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Setting Bro to Ignore Bad Checksums](index_split_006.html#p334)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_006.html#p336)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_006.html#p337)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Cloud Computing](index_split_006.html#p338)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Cloud Computing Challenges](index_split_006.html#p338)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Cloud Computing Benefits](index_split_006.html#p340)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Workflow, Metrics, and Collaboration](index_split_006.html#p341)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Workflow and Metrics](index_split_006.html#p341)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Collaboration](index_split_006.html#p342)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_006.html#p343)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Security Onion Scripts and Configuration](index_split_006.html#p345)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Security Onion Control Scripts](index_split_006.html#p345)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm](index_split_006.html#p347)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_all_del](index_split_006.html#p347)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_all_del_quick](index_split_006.html#p348)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_sensor](index_split_006.html#p349)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_sensor_add](index_split_006.html#p350)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_sensor_backup-config](index_split_006.html#p350)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_sensor_backup-data](index_split_006.html#p350)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_sensor_clean](index_split_006.html#p350)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_sensor_clear](index_split_006.html#p350)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_sensor_del](index_split_006.html#p350)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_sensor_edit](index_split_006.html#p351)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_sensor_ps-daily-restart](index_split_006.html#p351)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_sensor_ps-restart](index_split_006.html#p351)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_sensor_ps-start](index_split_006.html#p353)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_sensor_ps-status](index_split_006.html#p353)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_sensor_ps-stop](index_split_006.html#p354)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_server](index_split_006.html#p354)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_server_add](index_split_006.html#p354)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_server_backup-config](index_split_006.html#p354)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_server_backup-data](index_split_006.html#p354)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_server_clear](index_split_006.html#p355)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_server_del](index_split_006.html#p355)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_server_edit](index_split_006.html#p355)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_server_ps-restart](index_split_006.html#p355)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_server_ps-start](index_split_006.html#p355)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_server_ps-status](index_split_006.html#p355)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_server_ps-stop](index_split_006.html#p355)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_server_sensor-add](index_split_006.html#p356)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_server_sensor-del](index_split_006.html#p356)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/usr/sbin/nsm_server_user-add](index_split_006.html#p356)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Security Onion Configuration Files](index_split_006.html#p356)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/etc/nsm/](index_split_006.html#p356)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/etc/nsm/administration.conf](index_split_006.html#p357)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/etc/nsm/ossec/](index_split_006.html#p357)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/etc/nsm/pulledpork/](index_split_006.html#p357)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/etc/nsm/rules/](index_split_006.html#p357)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/etc/nsm/securityonion/](index_split_006.html#p358)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/etc/nsm/securityonion.conf](index_split_006.html#p358)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/etc/nsm/sensortab](index_split_006.html#p359)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/etc/nsm/servertab](index_split_006.html#p360)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/etc/nsm/templates/](index_split_006.html#p360)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/etc/nsm/$HOSTNAME-$INTERFACE/](index_split_006.html#p360)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/etc/cron.d/](index_split_006.html#p364)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bro](index_split_006.html#p364)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CapMe](index_split_006.html#p365)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ELSA](index_split_006.html#p365)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Squert](index_split_006.html#p365)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Snorby](index_split_006.html#p365)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Syslog-ng](index_split_006.html#p365)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[/etc/network/interfaces](index_split_006.html#p365)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Updating Security Onion](index_split_006.html#p366)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Updating the Security Onion Distribution](index_split_006.html#p366)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Updating MySQL](index_split_006.html#p367)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
