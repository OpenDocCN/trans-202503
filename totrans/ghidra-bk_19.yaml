- en: '## **16'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '## **16'
- en: GHIDRA IN HEADLESS MODE**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ghidra 的无头模式**'
- en: '![Image](Images/com.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/com.jpg)'
- en: In earlier chapters, we focused on exploring a single file within a single project,
    facilitated by the Ghidra GUI. In addition to the GUI, Ghidra has a command line
    interface called the *Ghidra headless analyzer*. The headless analyzer provides
    some of the same capabilities as the Ghidra GUI, including the ability to work
    with projects and files, but it’s better suited for batch processing and scripted
    control of Ghidra. In this chapter, we discuss Ghidra’s headless mode and how
    it can help you perform repetitive tasks across a larger number of files. We start
    with a familiar example and then expand our discussion to more complex options.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们专注于在单个项目中探索单个文件，这是通过 Ghidra 的 GUI 完成的。除了 GUI 之外，Ghidra 还提供了一个名为 *Ghidra
    无头分析器* 的命令行界面。无头分析器提供了与 Ghidra GUI 相同的一些功能，包括处理项目和文件的能力，但它更适合批处理和脚本化控制 Ghidra。在本章中，我们将讨论
    Ghidra 的无头模式以及它如何帮助你在更多文件中执行重复任务。我们从一个熟悉的示例开始，然后扩展讨论更复杂的选项。
- en: '### **Getting Started**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '### **入门**'
- en: 'Let’s start by recalling our first use of Ghidra in [Chapter 4](ch04.xhtml#ch04).
    We successfully accomplished the following steps:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先回顾一下我们在[第4章](ch04.xhtml#ch04)中首次使用 Ghidra 的经历。我们成功地完成了以下步骤：
- en: Launch Ghidra.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Ghidra。
- en: Create a new Ghidra project.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 Ghidra 项目。
- en: Identify a location for the project.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定项目的位置。
- en: Import a file to the project.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件导入项目。
- en: Auto analyze the file.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动分析文件。
- en: Save and exit.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并退出。
- en: Let’s replicate these tasks using the Ghidra headless analyzer’s command line
    interface. The headless analyzer (*analyzeHeadless* or *analyzeHeadless.bat*)
    as well as a helpful file called *analyzeHeadlessREADME.html* can be found in
    the *support* directory of your Ghidra installation. To simplify file paths, we
    have temporarily placed the file *global_array_demo_x64* in the same directory.
    First, we will identify the commands and parameters needed for each of the individual
    tasks and then we will put them all together to accomplish our goal. While it
    hasn’t made a significant difference in previous chapters, there are more distinctions
    between the three Ghidra platforms when we are operating from the command line.
    In our examples, we use the Windows installation and make note of significant
    differences on other platforms.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用 Ghidra 无头分析器的命令行界面来复现这些任务。无头分析器（*analyzeHeadless* 或 *analyzeHeadless.bat*）以及一个名为
    *analyzeHeadlessREADME.html* 的有用文件可以在你的 Ghidra 安装目录的 *support* 文件夹中找到。为了简化文件路径，我们临时将文件
    *global_array_demo_x64* 放在了同一个目录下。首先，我们将识别每个单独任务所需的命令和参数，然后将它们组合在一起实现我们的目标。虽然在之前的章节中没有太大区别，但当我们从命令行操作时，三种
    Ghidra 平台之间存在更多的差异。在我们的示例中，我们使用 Windows 安装，并且会标出其他平台上的显著差异。
- en: '**TO SLASH OR BACKSLASH?**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用斜杠还是反斜杠？**'
- en: 'A major difference among the operating system platforms that support Ghidra
    is the manner in which they identify filesystem paths. While the syntax is consistent,
    different platforms use different directory separators. Windows uses a backward
    slash, whereas Linux and macOS use a forward slash. A path looks like this in
    Windows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 支持 Ghidra 的操作系统平台之间的一个主要区别是它们识别文件系统路径的方式。虽然语法一致，不同平台使用不同的目录分隔符。Windows 使用反斜杠，而
    Linux 和 macOS 使用斜杠。在 Windows 中，路径如下所示：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And it looks like this in Linux and macOS:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 和 macOS 中，路径看起来是这样的：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This syntax can be even more confusing for Windows users as forward slashes
    are used in URLs and command line switches (and Ghidra documentation). Operating
    systems recognize this issue and try to accept either, but not always in a predictable
    manner. For the examples in this chapter, we use the Windows convention so readers
    can enjoy being backward compatible with DOS.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows 用户来说，这种语法可能更加困惑，因为斜杠在 URL 和命令行开关（以及 Ghidra 文档）中都有使用。操作系统认识到这个问题，并尝试接受两者，但并不总是以可预测的方式进行。为了本章中的示例，我们使用
    Windows 的约定，以便读者能够保持与 DOS 的向后兼容性。
- en: '#### ***Step 1: Launch Ghidra***'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '#### ***第 1 步：启动 Ghidra***'
- en: This step is accomplished using the `analyzeHeadless` command. All additional
    steps will be accomplished using the parameters and options associated with this
    command. Running `analyzeHeadless` without any parameters displays a usage message
    with the command’s syntax and options, as shown in [Figure 16-1](ch16.xhtml#fig16_1).
    To launch Ghidra, we need to add some of these parameters to the command.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步通过 `analyzeHeadless` 命令完成。所有其他步骤将通过该命令相关的参数和选项完成。运行 `analyzeHeadless` 命令而不带任何参数时，会显示命令的用法信息及其选项，如
    [图 16-1](ch16.xhtml#fig16_1) 所示。为了启动 Ghidra，我们需要将这些参数添加到命令中。
- en: '![image](Images/fig16-1.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig16-1.jpg)'
- en: '*Figure 16-1: Headless analyzer syntax*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-1：无头分析器语法*'
- en: '***Steps 2 and 3: Create a New Ghidra Project in a Specified Location***'
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***步骤 2 和 3：在指定位置创建一个新的 Ghidra 项目***'
- en: 'In headless mode, Ghidra creates a project for you if the project does not
    already exist. If the project already exists in the specified location, Ghidra
    opens the existing project. As a result, two parameters are required: the project
    location and the project name. The following command creates a project named *CH16*
    in our *D:\GhidraProjects* directory:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在无头模式下，如果项目尚不存在，Ghidra 会为你创建一个项目。如果项目已存在于指定位置，Ghidra 会打开现有的项目。因此，需要两个参数：项目位置和项目名称。以下命令会在我们的
    *D:\GhidraProjects* 目录下创建一个名为 *CH16* 的项目：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is a minimal launch of headless Ghidra to open a project and accomplishes
    nothing more. In fact, the response message from Ghidra tells you exactly that:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个最简化的无头 Ghidra 启动命令，只打开一个项目，并不会做更多操作。事实上，来自 Ghidra 的响应消息明确告诉你这一点：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '#### ***Step 4: Import a File to the Project***'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '#### ***步骤 4：将文件导入项目***'
- en: 'To import a file, Ghidra requires the `-import` option and the name of the
    file to import. We will import *global_array_demo_x64*, which we have used in
    the past. As mentioned, for simplicity in this initial example, we have placed
    the file in the *support* directory. Alternatively, we could specify the full
    path to the file on the command line. We add the `-import` option to our command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要导入文件，Ghidra 需要 `-import` 选项和要导入的文件名。我们将导入之前使用过的 *global_array_demo_x64* 文件。如前所述，为了简化这个初始示例，我们将文件放置在
    *support* 目录中。或者，我们可以在命令行中指定文件的完整路径。我们将 `-import` 选项添加到我们的命令中：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '***Steps 5 and 6: Auto Analyze the File, Save, and Exit***'
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***步骤 5 和 6：自动分析文件、保存并退出***'
- en: In headless mode, auto analysis and saving happen by default, so the command
    in step 4 accomplishes everything we want. An option is required to *not* analyze
    the file (`-noanalysis`), and there are options available to control how the project
    and associated files are saved.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在无头模式下，默认会自动分析并保存，因此步骤 4 中的命令可以完成我们需要的所有操作。如果不想分析文件，需要提供一个选项（`-noanalysis`），并且有选项可控制项目及其关联文件的保存方式。
- en: 'Here is our completed command to accomplish our six objectives:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们完成六个目标的完整命令：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As with many console commands, you may be asking yourself, “How can I be sure
    anything has happened?” Your first sign of success (or failure) is the messages
    displayed at the console. Informational messages that start with the prefix `INFO`
    provide progress reports as the headless analyzer starts its work. Error messages
    start with the prefix `ERROR`. [Listing 16-1](ch16.xhtml#exa16_1) includes a subset
    of the messages, including an error message.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 就像许多控制台命令一样，你可能会问自己：“我怎么知道是否有任何操作发生？”你成功（或失败）的第一个迹象是控制台上显示的消息。以 `INFO` 为前缀的信息性消息会在无头分析器开始工作时提供进度报告。错误消息以
    `ERROR` 为前缀。[清单 16-1](ch16.xhtml#exa16_1) 包含了一些消息的子集，包括一个错误消息。
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 16-1: Headless analyzer with error condition*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 16-1：带错误条件的无头分析器*'
- en: The script paths used in headless mode are listed ➊. Later in the chapter, we
    show how to use additional scripts with our headless commands. The extension we
    created in the preceding chapter, SimpleROP, is included in the script path ➋
    because every extension adds a new path to the script path. The `LockException`
    ➌ is perhaps the most common error associated with the headless analyzer. The
    headless analyzer fails if you attempt to run it on a project that you already
    have open in another Ghidra instance. When this occurs, the headless analyzer
    is unable to lock the project for its own, exclusive use, so the command fails.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 无头模式中使用的脚本路径列在➊。在本章后续部分，我们将展示如何在无头命令中使用额外的脚本。我们在上一章中创建的扩展SimpleROP包含在脚本路径中➋，因为每个扩展都会将一个新的路径添加到脚本路径中。`LockException`
    ➌可能是无头分析器中最常见的错误。如果你试图在另一个Ghidra实例中已经打开的项目上运行它，分析器会失败。此时，无头分析器无法为其自身独占使用锁定该项目，因此命令执行失败。
- en: To fix the error, close any running Ghidra instance that has the *CH16* project
    open and run the command again. [Figure 16-2](ch16.xhtml#fig16_2) shows the tail
    end of the output for successful execution of our command, which is similar to
    the pop-up windows that we see when analyzing files in the Ghidra GUI.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了修复该错误，关闭任何正在运行并打开*CH16*项目的Ghidra实例，再次运行命令。[图16-2](ch16.xhtml#fig16_2)显示了成功执行命令后的输出末尾，这与我们在Ghidra
    GUI中分析文件时看到的弹出窗口类似。
- en: '![image](Images/fig16-2.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig16-2.jpg)'
- en: '*Figure 16-2: Headless analyzer results displayed to the console*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*图16-2：无头分析器结果显示在控制台*'
- en: To verify the results in the Ghidra GUI, open the project and confirm that the
    file has been loaded, as shown in [Figure 16-3](ch16.xhtml#fig16_3), and then
    open the file in the CodeBrowser to confirm analysis.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Ghidra GUI中验证结果，打开项目并确认文件已加载，如[图16-3](ch16.xhtml#fig16_3)所示，然后在CodeBrowser中打开该文件以确认分析。
- en: '![image](Images/fig16-3.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig16-3.jpg)'
- en: '*Figure 16-3: Ghidra GUI confirmation that the project has been created and
    the file loaded*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*图16-3：Ghidra GUI确认项目已创建且文件已加载*'
- en: Now that we have replicated our earlier analysis using Ghidra in headless mode,
    let’s investigate some situations where headless mode has an advantage over the
    GUI. To create a project and load and analyze all of the files shown in [Figure
    16-4](ch16.xhtml#fig16_4) using the Ghidra GUI, we could create the project and
    then load each file individually, or select files to include in a batch import
    operation, as discussed in “[Batch Import](ch16.xhtml#ch16lev304)” on [page 226](ch11.xhtml#page_226).
    Headless Ghidra allows us to name a directory and analyze all contained files.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经使用Ghidra的无头模式重复了之前的分析，让我们探讨一些无头模式相对于图形用户界面（GUI）的优势。在Ghidra的GUI中创建项目并加载和分析[图16-4](ch16.xhtml#fig16_4)中显示的所有文件，我们可以创建项目然后逐个加载文件，或者选择文件进行批量导入操作，正如在[第226页](ch11.xhtml#page_226)的“[批量导入](ch16.xhtml#ch16lev304)”中所讨论的。无头Ghidra允许我们指定一个目录并分析该目录中的所有文件。
- en: '![image](Images/fig16-4.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig16-4.jpg)'
- en: '*Figure 16-4: Input directory for headless Ghidra examples*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*图16-4：无头Ghidra示例的输入目录*'
- en: 'The following command tells the headless analyzer to open or create a project
    named *CH16* in the *D:\GhidraProjects* directory and import and analyze all of
    the files in the *D:\ch16* directory:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令告诉无头分析器在*D:\GhidraProjects*目录中打开或创建一个名为*CH16*的项目，并导入分析*D:\ch16*目录中的所有文件：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: After the command is executed, we can load the new project into the Ghidra GUI
    and see its associated files, as shown in [Figure 16-5](ch16.xhtml#fig16_5). The
    subdirectory *D:\ch16\CH16_subdirectory* does not appear in the project, nor do
    any of the files within the subdirectory. We will come back to this when we discuss
    additional options and parameters that can be used with headless Ghidra in the
    following section.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 命令执行后，我们可以将新项目加载到Ghidra GUI中，并查看其相关文件，如[图16-5](ch16.xhtml#fig16_5)所示。子目录*D:\ch16\CH16_subdirectory*不会出现在项目中，该子目录中的任何文件也不会出现。我们将在接下来的章节中讨论更多无头Ghidra可以使用的选项和参数时再回到这个问题。
- en: '![image](Images/fig16-5.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig16-5.jpg)'
- en: '*Figure 16-5: Project resulting from pointing headless Ghidra at a directory*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*图16-5：将无头Ghidra指向目录后生成的项目*'
- en: '***Options and Parameters***'
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***选项和参数***'
- en: The simple examples of using headless Ghidra to create a project, load and analyze
    a single file, and use batch processing to import an entire directory are just
    the beginning of what is possible. While we will not be able to discuss all capabilities
    of headless Ghidra, we will provide a brief introduction to each of the options
    currently available.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用无头模式的 Ghidra 创建项目、加载并分析单个文件，并使用批处理导入整个目录的简单示例，仅仅展示了其可能性的冰山一角。虽然我们无法讨论无头 Ghidra
    的所有功能，但我们会简要介绍当前可用的每个选项。
- en: '**General Options**'
  id: totrans-55
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**常规选项**'
- en: The following are brief descriptions with related examples of additional options
    that we could use to further control what is happening in our simple examples.
    (Wrapped lines are indented.) When encountered, common error conditions are discussed.
    Specialized error conditions are left as an exercise for the reader in the comfort
    of the Ghidra Help file.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们可以使用的额外选项的简要描述，并附有相关示例，帮助我们进一步控制在简单示例中发生的情况。（换行的行会缩进。）当遇到时，将讨论常见的错误情况。专业错误情况留给读者在
    Ghidra 帮助文件中自行探讨。
- en: -log logfilepath
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: -log logfilepath
- en: Many things can go wrong (and right) when executing from the command line. Fortunately,
    Ghidra plugins provide continuous feedback as to what is happening while Ghidra
    is running. While this feedback is less vital in the Ghidra GUI (because you have
    visual cues as to what is happening), it is important in headless Ghidra.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 执行命令行时，许多事情可能会出错（或成功）。幸运的是，Ghidra 插件在 Ghidra 运行时提供持续的反馈，告知发生了什么。虽然在 Ghidra GUI
    中这种反馈不那么重要（因为你可以通过视觉线索看到发生了什么），但在无头 Ghidra 中，这种反馈非常重要。
- en: 'By default, a logfile is written to *.ghidra/.ghidra_<VER>_PUBLIC*/*application.log*
    in the user’s home directory. You may select a new location by adding the `-log`
    option to your command line. To create a directory, *CH16-logs*, and write a logfile
    to *CH16-logfile*, use the following command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，日志文件会写入用户主目录中的 *.ghidra/.ghidra_<VER>_PUBLIC*/*application.log*。你可以通过在命令行中添加
    `-log` 选项来选择新位置。要创建一个目录 *CH16-logs* 并将日志文件写入 *CH16-logfile*，请使用以下命令：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: -noanalysis
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: -noanalysis
- en: 'This option instructs Ghidra not to analyze any files that you import from
    the command line. Opening the file *global_array_demo_x64* in the Ghidra GUI after
    the following statement is executed would present you with a loaded, but not analyzed,
    version of the file within the *CH16* project:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 该选项指示 Ghidra 不分析从命令行导入的任何文件。在执行以下语句后，在 Ghidra GUI 中打开文件 *global_array_demo_x64*
    会展示一个已加载但未分析的文件版本，位于 *CH16* 项目中：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: -overwrite
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: -overwrite
- en: 'In [Listing 16-1](ch16.xhtml#exa16_1), we saw an error condition when Ghidra
    tried to open a project that was already open. A second common error occurs when
    Ghidra tries to import a file into a project and the file has already been imported.
    To import a new version of the file, or overwrite the existing file regardless
    of contents, use the `-overwrite` option. Without this option, running the following
    headless command twice would result in an error during the second execution. With
    this option, we can rerun the command as many times as we wish:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [示例 16-1](ch16.xhtml#exa16_1) 中，我们看到了一个错误条件，当 Ghidra 尝试打开一个已经打开的项目时会发生。第二个常见错误发生在
    Ghidra 尝试将文件导入项目时，而该文件已经被导入。要导入文件的新版本，或无论文件内容如何都覆盖现有文件，请使用 `-overwrite` 选项。如果没有此选项，运行以下无头命令两次会在第二次执行时导致错误。有了此选项，我们可以随意重新运行命令：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: -readOnly
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: -readOnly
- en: To import a file without saving the file in the project, use the `-readOnly`
    option. If you use this option, the `-overwrite` option will be ignored (if present).
    This option also has meaning when used with the `-process` option rather than
    the `-import` command. The `-process` option is covered later in the chapter.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要导入文件但不将文件保存到项目中，请使用 `-readOnly` 选项。如果使用此选项，`-overwrite` 选项将被忽略（如果存在）。当与 `-process`
    选项一起使用时，而不是与 `-import` 命令一起使用时，此选项也具有意义。`-process` 选项将在本章后面介绍。
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: -deleteProject
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: -deleteProject
- en: 'This option instructs Ghidra not to save any project being created with the
    `–import` option. This option can be used with any of the other options but is
    assumed (even if omitted) when using `-readOnly`. The newly created project is
    deleted after analysis is complete. This option will not delete an existing project:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 该选项指示 Ghidra 不保存使用 `–import` 选项创建的任何项目。此选项可以与其他选项一起使用，但在使用 `-readOnly` 时默认假定（即使省略）。新创建的项目会在分析完成后删除。此选项不会删除现有项目：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: -recursive
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: -recursive
- en: 'By default, Ghidra does not recurse into subdirectories when asked to process
    an entire directory. Use this option when you do want Ghidra to perform recursive
    directory processing (that is, process any subdirectories it finds along the way).
    To demonstrate this functionality, we will point Ghidra at the same *ch16* directory
    we processed earlier, but this time will use the `-recursive` option:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Ghidra 在处理整个目录时不会递归进入子目录。当你希望 Ghidra 执行递归目录处理时（即处理它沿途找到的任何子目录），可以使用此选项。为了演示这个功能，我们将指向之前处理过的同一个*ch16*目录，但这次将使用`-recursive`选项：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Opening the project, *CH16*, after running this command results in the project
    structure shown in [Figure 16-6](ch16.xhtml#fig16_6). In contrast to [Figure 16-5](ch16.xhtml#fig16_5),
    the *CH16_subdirectory* is included in the project as well as its associated file,
    and the directory hierarchy is retained within the project hierarchy.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行此命令后打开项目*CH16*，将会生成如[图16-6](ch16.xhtml#fig16_6)所示的项目结构。与[图16-5](ch16.xhtml#fig16_5)相比，项目中包含了*CH16_subdirectory*及其相关文件，并且目录层次结构在项目层次结构中得以保留。
- en: '![image](Images/fig16-6.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig16-6.jpg)'
- en: '*Figure 16-6: Headless Ghidra project resulting from the* -recursive *option*'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*图16-6：通过* -recursive *选项生成的无头 Ghidra 项目*'
- en: '**WILDCARDS!**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**通配符！**'
- en: 'Wildcards provide an easy method to select multiple files for headless Ghidra
    without listing each one separately. In short, an asterisk (`*`) matches any sequence
    of characters, and a question mark (`?`) matches a single character. To load and
    analyze only the 32-bit files from [Figure 16-7](ch16.xhtml#fig16_7), use a wildcard
    as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通配符提供了一种简单的方法来为无头 Ghidra 选择多个文件，而无需单独列出每个文件。简而言之，星号（`*`）匹配任意字符序列，问号（`?`）匹配单个字符。为了仅加载和分析[图16-7](ch16.xhtml#fig16_7)中的32位文件，可以使用以下通配符：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This creates the CH16 project and loads and analyzes all of the 32-bit files
    in the *ch16* directory. The resulting project is shown in [Figure 16-7](ch16.xhtml#fig16_7).
    See *analyzeHeadlessREADME.html* for detailed information about using wildcards
    to specify files for import and processing. You will also see wildcards in future
    headless Ghidra scripting examples.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这会创建 CH16 项目并加载分析*ch16*目录下的所有32位文件。生成的项目如[图16-7](ch16.xhtml#fig16_7)所示。有关使用通配符指定文件进行导入和处理的详细信息，请参见*analyzeHeadlessREADME.html*。你还将会在未来的无头
    Ghidra 脚本示例中看到通配符的使用。
- en: '![image](Images/fig16-7.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig16-7.jpg)'
- en: '*Figure 16-7: Project files resulting from the wildcard* demo_stackframe_32*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*图16-7：由通配符* demo_stackframe_32* 生成的项目文件*'
- en: -analysisTimeoutPerFile seconds
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: -analysisTimeoutPerFile 秒
- en: As you have analyzed (or sat and watched Ghidra analyze) files, you may have
    noticed several factors that impact the analysis time, like the size of the file,
    whether it’s statically linked, and the decompiler analysis options. Regardless
    of the file contents and options, you can’t know in advance exactly how long it
    may take to analyze a file.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在你分析（或观察 Ghidra 分析）文件时，可能会注意到几个影响分析时间的因素，如文件大小、是否静态链接以及反编译选项。无论文件内容和选项如何，你无法提前知道分析文件究竟需要多长时间。
- en: 'In headless Ghidra, particularly when you are processing a large number of
    files, you can use the `-analysisTimeoutPerFile` option to ensure that your task
    ends in a reasonable amount of time. With this option, you specify a time-out
    in seconds, and analysis will be interrupted should time expire. For example,
    our existing headless Ghidra command takes a little over one second to analyze
    on our system (refer to [Figure 16-2](ch16.xhtml#fig16_2)). If we had *really*
    limited time to execute this script, the following headless command would stop
    analysis after one second:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在无头 Ghidra 中，尤其是在处理大量文件时，可以使用`-analysisTimeoutPerFile`选项来确保任务在合理的时间内结束。使用此选项时，你需要指定超时时间（以秒为单位），如果超时，分析将被中断。例如，我们现有的无头
    Ghidra 命令在我们的系统上分析文件大约需要一秒多（参见[图16-2](ch16.xhtml#fig16_2)）。如果我们*真的*有限时间来执行此脚本，以下无头命令将在一秒钟后停止分析：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This would result in the console display shown in [Figure 16-8](ch16.xhtml#fig16_8).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致控制台显示[图16-8](ch16.xhtml#fig16_8)中的信息。
- en: '![image](Images/fig16-8.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig16-8.jpg)'
- en: '*Figure 16-8: Console warning that analysis timed out*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*图16-8：控制台警告：分析超时*'
- en: -processor languageID and -cspec compilerSpecID
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: -processor languageID 和 -cspec compilerSpecID
- en: As shown in previous examples, Ghidra is generally quite good at identifying
    information about a file and making import recommendations. A sample window showing
    the recommendations for a particular file is shown in [Figure 16-9](ch16.xhtml#fig16_9).
    This window is displayed every time you use the GUI to import a file into a project.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的示例所示，Ghidra 通常在识别文件信息并给出导入建议方面做得相当好。对于某个特定文件的建议，示例窗口如[图 16-9](ch16.xhtml#fig16_9)所示。每次使用
    GUI 将文件导入项目时，都会显示此窗口。
- en: '![image](Images/fig16-9.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig16-9.jpg)'
- en: '*Figure 16-9: Ghidra GUI import confirmation dialog*'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-9：Ghidra GUI 导入确认对话框*'
- en: If you feel that you have additional insight into the appropriate language or
    compiler, you can expand the box to the right of the Language specification. This
    presents you with the window shown in [Figure 16-10](ch16.xhtml#fig16_10), which
    gives you the opportunity to select a language and compiler specification.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认为自己对合适的语言或编译器有更多见解，可以展开语言规格右侧的框。这将呈现出[图 16-10](ch16.xhtml#fig16_10)所示的窗口，提供选择语言和编译器规格的机会。
- en: '![image](Images/fig16-10.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig16-10.jpg)'
- en: '*Figure 16-10: Ghidra language/compiler specification selection window*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-10：Ghidra 语言/编译器规格选择窗口*'
- en: To do the same in headless Ghidra, use the `-cspec` and/or `processor` options,
    as shown next. You cannot use the `-cspec` option without using the `-processor`
    option. You can use the `-processor` option without the `-cspec` option, in which
    case Ghidra will choose the default compiler associated with the processor.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要在无头 Ghidra 中执行相同操作，请使用 `-cspec` 和/或 `processor` 选项，如下所示。不能仅使用 `-cspec` 选项而不使用
    `-processor` 选项。你可以在不使用 `-cspec` 选项的情况下使用 `-processor` 选项，这时 Ghidra 会选择与处理器相关的默认编译器。
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: -loader loadername
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: -loader loadername
- en: The `-loader` option can be the most complex of the headless Ghidra options.
    The loadername argument names one of Ghidra’s loader modules (discussed in [Chapter
    17](ch17.xhtml#ch17)) that will be used to import a new file into the named project.
    Sample loader names include `PeLoader`, `ElfLoader`, and `MachoLoader`. Each loader
    module may recognize additional command line arguments of its own. These additional
    arguments are discussed in *support/analyzeHeadlessREADME.html*.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`-loader` 选项可能是无头 Ghidra 选项中最复杂的一个。loadername 参数指定 Ghidra 的加载模块之一（在[第 17 章](ch17.xhtml#ch17)中讨论），该模块将用于将新文件导入指定的项目。示例加载模块名称包括
    `PeLoader`、`ElfLoader` 和 `MachoLoader`。每个加载模块可能还会识别一些额外的命令行参数。这些额外的参数在*support/analyzeHeadlessREADME.html*中有详细讨论。'
- en: -max-cpu number
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: -max-cpu number
- en: This option allows to you to put an upper limit on the number of processor (CPU)
    cores used to process the headless Ghidra command. The option requires an integer
    value as an argument. If the value is less than 1, the maximum number of cores
    is set to 1.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项允许你限制用于处理无头 Ghidra 命令的处理器（CPU）核心数。该选项需要一个整数值作为参数。如果该值小于 1，则最大核心数设置为 1。
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Server Options**'
  id: totrans-106
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**服务器选项**'
- en: Some commands are used only when interacting with a Ghidra Server. As this is
    not the focus of this book, we will mention these commands only briefly. Additional
    information can be found in *analyzeheadlessREADME.html*.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一些命令仅在与 Ghidra 服务器交互时使用。由于这不是本书的重点，我们将简要提及这些命令。更多信息请参考*analyzeheadlessREADME.html*。
- en: ghidra://server[:port]/repository_name[/folder_path]
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: ghidra://server[:port]/repository_name[/folder_path]
- en: The previous examples have all specified a project location or project name.
    This alternative allows you to specify a Ghidra Server repository and optional
    folder path.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例都指定了项目位置或项目名称。这个替代方法允许你指定一个 Ghidra 服务器仓库和可选的文件夹路径。
- en: -p
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: -p
- en: With Ghidra Server, this option forces a password prompt via the console.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Ghidra 服务器时，此选项通过控制台强制要求输入密码。
- en: -connect [userID]
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: -connect [userID]
- en: This option provides a userID to override the default userID when connecting
    to a Ghidra Server.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项提供一个 userID，用于在连接 Ghidra 服务器时覆盖默认的 userID。
- en: -keystore path
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: -keystore path
- en: This option allows you to specify a private keystore file when using PKI or
    SSH authentication.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项允许你在使用 PKI 或 SSH 认证时指定一个私有的密钥库文件。
- en: -commit ["comment"]
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: -commit ["comment"]
- en: While `commit` is enabled by default, this option allows you to associate a
    comment with a commit.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `commit` 默认为启用，但此选项允许你为提交关联评论。
- en: '**Script Options**'
  id: totrans-118
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**脚本选项**'
- en: Perhaps the most powerful applications for headless Ghidra are associated with
    Ghidra’s scripting abilities. [Chapters 14](ch14.xhtml#ch14) and [15](ch15.xhtml#ch15)
    both demonstrated how scripts can be created and used with the Ghidra GUI. After
    we present script options, we will demonstrate how powerful headless Ghidra can
    be in a scripting context.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 也许无头模式下 Ghidra 最强大的应用之一与 Ghidra 的脚本功能相关。[第14章](ch14.xhtml#ch14)和[第15章](ch15.xhtml#ch15)均演示了如何在
    Ghidra GUI 中创建和使用脚本。介绍完脚本选项后，我们将展示无头模式下 Ghidra 在脚本环境中的强大功能。
- en: -process [project_file]
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: -process [project_file]
- en: This option processes select files (as opposed to importing them). If you do
    not specify a file, all files in the project folder will be processed. All specified
    files will also be analyzed unless you use the `-``noanalysis` option. Ghidra
    accepts two wildcard characters (`*` and `?`) for the `–process` option in order
    to simplify selection of multiple files. For this option, unlike with the `–import`
    option, you are naming Ghidra imported project files, *not* local filesystem files,
    so you need to quote any filenames that contain these wildcards in order to prevent
    your shell from expanding them prematurely.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 该选项处理选定的文件（与导入文件不同）。如果没有指定文件，项目文件夹中的所有文件都将被处理。除非使用`-noanalysis`选项，否则所有指定的文件也将被分析。Ghidra
    接受两个通配符字符（`*` 和 `?`）用于`–process`选项，以简化多个文件的选择。对于此选项，与`–import`选项不同，你指定的是 Ghidra
    导入的项目文件，而*不是*本地文件系统中的文件，因此需要引用任何包含通配符的文件名，以防止你的 shell 提前展开它们。
- en: -scriptPath "path1[;path2...]"
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: -scriptPath "path1[;path2...]"
- en: 'By default, headless Ghidra includes many default script paths as well as script
    paths for imported extensions, as seen in [Listing 16-1](ch16.xhtml#exa16_1).
    To extend the list of paths that Ghidra searches for available scripts, use the
    `–scriptPath` option, which requires a quoted path list argument. Within the quotes,
    multiple paths must be separated using a semicolon. Two special prefix designators
    are recognized in path components:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，无头模式下的 Ghidra 包含许多默认脚本路径以及导入扩展的脚本路径，如[清单 16-1](ch16.xhtml#exa16_1)所示。要扩展
    Ghidra 搜索可用脚本的路径列表，可以使用`–scriptPath`选项，该选项需要一个带引号的路径列表参数。在引号内，多个路径必须使用分号分隔。路径组件中会识别两种特殊的前缀标识符：
- en: '`$GHIDRA_HOME` and `$USER_HOME`. `$GHIDRA_HOME` refers to the Ghidra installation
    directory, and `$USER_HOME` refers to the user’s home directory. Note that these
    are not environment variables and that your command shell may require you to escape
    the leading `$` character in order for it to be passed to Ghidra. The following
    example adds the *D:\GhidraScripts* directory to the script path:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`$GHIDRA_HOME`和`$USER_HOME`。`$GHIDRA_HOME`指的是 Ghidra 安装目录，`$USER_HOME`指的是用户的主目录。请注意，这些不是环境变量，且你的命令行
    shell 可能需要你转义前导的`$`字符，以便将其传递给 Ghidra。以下示例将 *D:\GhidraScripts* 目录添加到脚本路径中：'
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'After you run the command, the new script directory, *D:\GhidraScripts*, is
    included in the script path:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在你运行命令后，新的脚本目录，*D:\GhidraScripts*，会被包括在脚本路径中：
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: -preScript
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: -preScript
- en: This option names a script to be run before analysis. The script may contain
    an optional list of arguments.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 该选项指定在分析之前运行的脚本名称。脚本可能包含一个可选的参数列表。
- en: -postScript
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: -postScript
- en: This option names a script to be run after analysis. The script may contain
    an optional list of arguments.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 该选项指定在分析后运行的脚本名称。脚本可能包含一个可选的参数列表。
- en: -propertiesPath
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: -propertiesPath
- en: This option specifies the path to any property files associated with a script.
    Property files provide input to scripts that are run in headless mode. Examples
    of scripts and their associated property files are included in the headless analyzer
    documentation.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 该选项指定与脚本相关的属性文件的路径。属性文件为以无头模式运行的脚本提供输入。脚本及其关联的属性文件示例包含在无头分析器文档中。
- en: -okToDelete
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: -okToDelete
- en: 'As scripts can do whatever their creators intend, it is possible for a script
    to delete (or try to delete) files within a Ghidra project. To prevent this as
    an undesired side-effect, headless Ghidra will not allow deletion of files by
    a script unless the `-okToDelete` option is included when the script is invoked.
    Note: This parameter is not required when running in `-import` mode.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 由于脚本可以执行其创建者意图的任何操作，因此脚本有可能删除（或尝试删除）Ghidra 项目中的文件。为了防止这种不必要的副作用，无头模式下的 Ghidra
    不允许脚本删除文件，除非在调用脚本时包含了`-okToDelete`选项。注意：在`-import`模式下运行时，此参数不是必需的。
- en: '**Writing Scripts**'
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写脚本**'
- en: Now that you understand the basic components of a headless Ghidra command, let’s
    build some scripts to run from the command line.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经理解了无头 Ghidra 命令的基本组件，让我们编写一些脚本，在命令行中运行。
- en: '***HeadlessSimpleROP***'
  id: totrans-138
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***HeadlessSimpleROP***'
- en: Recall the SimpleROP analyzer that we wrote in [Chapter 15](ch15.xhtml#ch15).
    We wrote the module using the Eclipse IDE and then imported the extension into
    Ghidra so we could run it on any file we imported. Now we want to point SimpleROP
    at a directory and have it identify ROP gadgets in every file (or select files)
    in the directory. In addition to the SimpleROP output file with ROP gadgets for
    each existing binary, we also want a summary file that lists each file and the
    number of identified ROP gadgets in each.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下我们在[第 15 章](ch15.xhtml#ch15)中编写的 SimpleROP 分析器。我们使用 Eclipse IDE 编写了这个模块，然后将扩展导入
    Ghidra，这样我们就可以在导入的任何文件上运行它。现在，我们希望将 SimpleROP 指向一个目录，并让它识别该目录中每个文件（或选定文件）中的 ROP
    小工具。除了每个现有二进制文件中带有 ROP 小工具的 SimpleROP 输出文件外，我们还希望有一个摘要文件，列出每个文件及其识别到的 ROP 小工具数量。
- en: For a job like this, running SimpleROP through the Ghidra GUI would introduce
    a time penalty for actions like opening and closing the CodeBrowser to display
    each file in the listing window, and so on. We do not need to see any of the files
    in the CodeBrowser window to accomplish our new goal. Why can’t we just write
    a script to find the gadgets independent of the GUI completely? This is exactly
    the kind of use case appropriate for headless Ghidra.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这样的任务，通过 Ghidra GUI 运行 SimpleROP 会引入一些时间上的开销，例如打开和关闭 CodeBrowser 来显示列表窗口中的每个文件等。为了实现我们的新目标，我们并不需要在
    CodeBrowser 窗口中看到任何文件。为什么我们不能编写一个脚本，完全独立于 GUI 来找到小工具呢？这正是适合无头 Ghidra 的用例。
- en: While we could modify the functionality of SimpleROP to accomplish our goal,
    we do not want to lose the utility of an existing Ghidra extension that other
    users may find useful. (We realize that we just introduced it in the preceding
    chapter . . . but it might have gone viral.) Instead, we will use some of the
    code from SimpleROP as a base to create our new script, *HeadlessSimpleROP*, which
    finds all ROP gadgets in *<filename>* and creates and writes them to *<filename>_gadgets.txt*,
    then appends *<path>/<filename>* and the count of ROP gadgets to a *HeadlessSimpleROP*
    summary file called *gadget_summary.txt*. All other functionality required (parsing
    directories, files, and so on) will be provided by headless Ghidra using the options
    we discussed earlier in this chapter.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以修改 SimpleROP 的功能以实现我们的目标，但我们不想丧失其他用户可能会觉得有用的现有 Ghidra 扩展的功能。（我们意识到我们刚刚在上一章中介绍了它……但它可能已经流行开了。）相反，我们将使用
    SimpleROP 中的一些代码作为基础，创建我们新的脚本 *HeadlessSimpleROP*，它会查找 *<filename>* 中的所有 ROP 小工具，并将其创建并写入到
    *<filename>_gadgets.txt* 中，然后将 *<path>/<filename>* 和 ROP 小工具的计数追加到一个名为 *gadget_summary.txt*
    的 *HeadlessSimpleROP* 摘要文件中。所有其他所需的功能（解析目录、文件等）将由无头 Ghidra 提供，使用我们在本章前面讨论的选项。
- en: To simplify development, we create a new script using the Eclipse ▸ GhidraDev
    approach presented in [Chapter 15](ch15.xhtml#ch15) and then copy the *SimpleROPAnalyzer.java*
    source code into the new script template and edit the code as needed. Finally,
    we will run the script using the `-postScript` option so that it is invoked following
    the analysis phase for each opened file.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化开发，我们使用[第 15 章](ch15.xhtml#ch15)中介绍的 Eclipse ▸ GhidraDev 方法创建一个新脚本，然后将*SimpleROPAnalyzer.java*
    源代码复制到新脚本模板中，并根据需要编辑代码。最后，我们将使用`-postScript`选项运行脚本，以便在分析阶段后调用它，针对每个打开的文件。
- en: '**Creating the HeadlessSimpleROP Script Template**'
  id: totrans-143
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**创建 HeadlessSimpleROP 脚本模板**'
- en: Begin by creating a template. From the GhidraDev menu, choose **New** ▸ **GhidraScript**
    and fill in the information shown in the dialog in [Figure 16-11](ch16.xhtml#fig16_11).
    While we could place the script in any folder, we will place it in the *ghidra_scripts*
    folder within our existing SimpleROP module in Eclipse.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建一个模板。在 GhidraDev 菜单中选择**新建** ▸ **GhidraScript**，并填写对话框中显示的信息，如[图 16-11](ch16.xhtml#fig16_11)所示。虽然我们可以将脚本放在任何文件夹中，但我们将把它放在
    Eclipse 中现有的 SimpleROP 模块中的*ghidra_scripts* 文件夹内。
- en: '![image](Images/fig16-11.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig16-11.jpg)'
- en: '*Figure 16-11: Create Ghidra Script dialog*'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-11：创建 Ghidra 脚本对话框*'
- en: Click **Finish** to see the new script template, complete with metadata, as
    shown in [Figure 16-12](ch16.xhtml#fig16_12). The task tag on line 14 shows you
    where to get started.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**完成**，查看新的脚本模板，连同元数据，如[图 16-12](ch16.xhtml#fig16_12)所示。第 14 行的任务标签显示了你可以开始的地方。
- en: '![image](Images/fig16-12.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig16-12.jpg)'
- en: '*Figure 16-12: New* HeadlessSimpleROP *script template*'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16-12：新的* HeadlessSimpleROP *脚本模板*'
- en: 'To convert the SimpleROP analyzer into the *HeadlessSimpleROP* script, we need
    to do the following:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 要将SimpleROP分析器转换为*HeadlessSimpleROP*脚本，我们需要执行以下操作：
- en: Remove the unneeded `import` statements.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除不需要的`import`语句。
- en: Remove the analyzer public methods.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除分析器公共方法。
- en: Duplicate the functionality of the `added` method that is called when the SimpleROPAnalyzer
    is invoked with the `run` method, which is called when the *HeadlessSimpleROP*
    script is invoked.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制当使用`run`方法调用*HeadlessSimpleROP*脚本时，调用SimpleROPAnalyzer时`added`方法的功能。
- en: Add the functionality to append the filename and number of gadgets found to
    the summary file, *gadget_summary.txt*.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加将文件名和找到的小工具数量附加到汇总文件*gadget_summary.txt*中的功能。
- en: We will place our script, *HeadlessSimpleROP*, in the *D:\GhidraScripts* directory
    and use the headless analyzer to demonstrate its functionality. In the next sections,
    we will run a series of tests invoking the *HeadlessSimpleROP* script using items
    in the directory structure shown in [Figure 16-6](ch16.xhtml#fig16_6). These tests
    also demonstrate some of the options associated with headless Ghidra.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把脚本*HeadlessSimpleROP*放在*D:\GhidraScripts*目录中，并使用无头分析器演示其功能。在接下来的部分中，我们将运行一系列测试，调用*HeadlessSimpleROP*脚本，使用[图16-6](ch16.xhtml#fig16_6)中显示的目录结构中的项目。这些测试还演示了与无头Ghidra相关的一些选项。
- en: '**Test Scenario 1: Load, Analyze, and Process a Single File**'
  id: totrans-156
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**测试场景 1：加载、分析和处理单个文件**'
- en: 'In the following listing, we use headless Ghidra to import, analyze, and invoke
    our script to generate a gadget report for a single file (the ^ character is the
    line-continuation character in a Windows command shell):'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下清单中，我们使用无头Ghidra导入、分析并调用脚本来为单个文件生成小工具报告（^字符是Windows命令行中的行续符）：
- en: '[PRE20]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: When executed, the Ghidra headless analyzer creates a project called *CH16_ROP*
    in the *GhidraProjects* directory, then imports the file *demo_stackframe_32*,
    which will also be loaded and analyzed. We indicate the directory in which our
    script resides using `scriptPath`. Finally, after analysis, our script is run
    on the imported and analyzed file.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 执行时，Ghidra 无头分析器会在*GhidraProjects*目录下创建一个名为*CH16_ROP*的项目，然后导入文件*demo_stackframe_32*，该文件也将被加载并分析。我们使用`scriptPath`指示脚本所在的目录。最后，在分析完成后，我们的脚本将在导入并分析后的文件上运行。
- en: 'Once the command has completed, we check the contents of the *gadget_summary.txt*
    and *demo_stackframe_32_gadgets.txt* files to determine if our script worked correctly.
    The *demo_stackframe_32_gadgets.txt* contains 16 potential ROP gadgets:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 命令完成后，我们检查*tool_summary.txt*和*demo_stackframe_32_gadgets.txt*文件的内容，以确定我们的脚本是否正确工作。*demo_stackframe_32_gadgets.txt*包含16个潜在的ROP小工具：
- en: '[PRE21]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here is the associated entry in *gadget_summary.txt*:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是*tool_summary.txt*中相关条目的内容：
- en: '[PRE22]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Test Scenario 2: Load, Analyze, and Process All Files in a Directory**'
  id: totrans-164
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**测试场景 2：加载、分析和处理目录中的所有文件**'
- en: 'In this test, we import an entire directory, rather than a file with the `import`
    statement:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在此测试中，我们导入一个完整的目录，而不是使用`import`语句导入单个文件：
- en: '[PRE23]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'When the headless analyzer is complete, the following contents are found in
    *gadget_summary.txt*:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当无头分析器完成时，*gadget_summary.txt*中会找到以下内容：
- en: '[PRE24]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: These are the six files in the root directory shown in [Figure 16-6](ch16.xhtml#fig16_6).
    In addition to the gadget summary file, we also produced individual gadget files
    listing the potential ROP gadgets associated with each file. In the remaining
    examples, we will concern ourselves only with the gadget summary file.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是根目录中显示的六个文件，如[图16-6](ch16.xhtml#fig16_6)所示。除了小工具汇总文件外，我们还生成了列出与每个文件相关的潜在ROP小工具的单独小工具文件。在剩余的示例中，我们只关注小工具汇总文件。
- en: '**Test Scenario 3: Load, Analyze, and Process All Files in a Directory Recursively**'
  id: totrans-170
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**测试场景 3：递归加载、分析和处理目录中的所有文件**'
- en: 'In this test, we add the `-recursive` option. This extends the import operation
    to recursively visit all files in all subdirectories within the *ch16* directory:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在此测试中，我们添加了`-recursive`选项。这会扩展导入操作，递归访问*ch16*目录中所有子目录中的所有文件：
- en: '[PRE25]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'When the headless analyzer is complete, the following contents are found in
    *gadget_summary.txt*, with the subdirectory file appearing at the top of the list:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 当无头分析器完成时，*gadget_summary.txt*中会找到以下内容，子目录文件出现在列表的顶部：
- en: '[PRE26]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '**Test Scenario 4: Load, Analyze, and Process All 32-bit Files in a Directory**'
  id: totrans-175
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**测试场景 4：加载、分析和处理目录中的所有32位文件**'
- en: 'In this test, we use an * as a shell wildcard to restrict the import contents
    to the files with the 32-bit designator:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试中，我们使用 * 作为外壳通配符，将导入内容限制为带有 32 位设计符的文件：
- en: '[PRE27]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The resulting *gadget_summary* file contains the following:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的 *gadget_summary* 文件包含以下内容：
- en: '[PRE28]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If you know in advance that you’re interested in only the generated gadget files,
    use the `-readOnly` option. This option instructs Ghidra not to save imported
    files into the project named in the command, and is useful for avoiding project
    clutter from batch-processing many files.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你事先知道只关心生成的 gadget 文件，可以使用 `-readOnly` 选项。此选项指示 Ghidra 不将导入的文件保存到命令中指定的项目中，适用于避免批量处理多个文件时造成项目杂乱。
- en: '***Automated FidDb Creation***'
  id: totrans-181
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***自动化 FidDb 创建***'
- en: In [Chapter 13](ch13.xhtml#ch13), we started creating a Function ID database
    (FidDb) populated with fingerprints of functions taken from a static version of
    *libc*. Using the GUI and Ghidra’s batch file import mode, we imported 1,690 object
    files from a *libc.a* archive. However, we ran into a roadblock when it came to
    analyzing the files because the GUI has minimal support for batch analysis. Now
    that you are familiar with headless Ghidra, we can use it to complete our new
    FidDb.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第13章](ch13.xhtml#ch13) 中，我们开始创建一个函数 ID 数据库（FidDb），并用从 *libc* 静态版本中提取的函数指纹进行填充。通过
    GUI 和 Ghidra 的批量导入模式，我们从 *libc.a* 压缩包中导入了 1,690 个目标文件。然而，在分析这些文件时，我们遇到了瓶颈，因为 GUI
    对批量分析的支持很有限。现在你已经熟悉了无头模式的 Ghidra，我们可以利用它来完成新的 FidDb。
- en: '**Batch Import and Analysis**'
  id: totrans-183
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**批量导入与分析**'
- en: Importing and analyzing 1,690 files from an archive once seemed a daunting task,
    but the preceding examples have shown us everything we need to know to make short
    work of this task. We consider two cases here and provide command line examples
    for each.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 导入并分析来自归档的 1,690 个文件曾一度看起来是一项艰巨的任务，但前面的例子已经向我们展示了完成这项任务所需的所有信息。我们在这里考虑两种情况，并为每种情况提供命令行示例。
- en: 'If *libc.a* has not yet been imported into a Ghidra project, we extract the
    contents of our *libc.a* into a directory and then use headless Ghidra to process
    the entire directory:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *libc.a* 尚未导入到 Ghidra 项目中，我们会将 *libc.a* 的内容提取到一个目录中，然后使用无头 Ghidra 处理整个目录：
- en: '[PRE29]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The command results in thousands of lines of output as Ghidra reports its progress
    on the 1,690 files it processes, but once the command has completed, you will
    have a new *libc.a* folder in your project that contains 1,690 analyzed files.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令会输出数千行结果，Ghidra 会报告它在处理 1,690 个文件时的进度，但一旦命令完成，你的项目中将会有一个新的 *libc.a* 文件夹，里面包含
    1,690 个已分析的文件。
- en: 'If we’ve used the GUI to batch import *libc.a*, but had not processed any of
    the 1,690 imported files, the following command line would take care of the analysis:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们已经使用 GUI 批量导入了 *libc.a*，但没有处理任何已导入的 1,690 个文件，以下命令行将负责分析：
- en: '[PRE30]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: With the entire static archive efficiently imported and analyzed, we can now
    use the features of the Function ID plugin to create and populate an FidDb, as
    detailed in [Chapter 13](ch13.xhtml#ch13).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 通过高效地导入并分析整个静态归档，我们现在可以使用函数 ID 插件的功能来创建并填充 FidDb，详细内容请参见 [第13章](ch13.xhtml#ch13)。
- en: '**Summary**'
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: While GUI Ghidra remains the most straightforward and fully featured version,
    running Ghidra in headless mode offers tremendous flexibility in creating complex
    tools built around Ghidra’s automated analysis. At this point, we have covered
    all of Ghidra’s most commonly used features and examined ways that you can make
    Ghidra work for you. It is time to move on to more advanced features.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 GUI 版 Ghidra 仍然是最直接且功能最全的版本，但以无头模式运行 Ghidra 提供了巨大的灵活性，可以构建围绕 Ghidra 自动化分析的复杂工具。到目前为止，我们已经涵盖了
    Ghidra 最常用的功能，并探讨了你可以如何让 Ghidra 为你工作。现在是时候深入了解更高级的功能了。
- en: Over the course of the next few chapters, we will look at approaches for some
    of the more challenging problems that arise while reverse engineering binaries,
    including dealing with unknown file formats and unknown processor architectures
    by building sophisticated Ghidra extensions. We’ll also spend some time investigating
    Ghidra’s decompiler and discuss some of the ways that compilers can vary in their
    generation of code to improve your fluency in reading disassembly listings.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，我们将探讨一些在反向工程二进制文件时遇到的更具挑战性的问题，包括通过构建复杂的 Ghidra 扩展来处理未知的文件格式和未知的处理器架构。我们还将花一些时间研究
    Ghidra 的反编译器，并讨论编译器在生成代码时的差异，以提高你阅读反汇编代码的流畅度。
