["```\nunsigned int ui; // unsigned is required\nunsigned u; // int can be omitted\nunsigned long long ull2; // int can be omitted\nunsigned char uc; // unsigned is required\n```", "```\nint i; // signed can be omitted\nlong long int sll; // signed can be omitted\nlong long sll2; // signed and int can be omitted\nsigned char sc; // signed is required\n```", "```\nunsigned int ui = UINT_MAX;  // 4,294,967,295 on x86\nui++;\nprintf(\"ui = %u\\n\", ui); // ui is 0\nui--;\nprintf(\"ui = %u\\n\", ui); // ui is 4,294,967,295\n```", "```\nfor (unsigned int i = n; i >= 0; --i)\n```", "```\nextern unsigned int ui, sum;\n// assign values to ui and sum\nif (sum + ui > UINT_MAX)\n  too_big();\nelse\n  sum = sum + ui;\n```", "```\nextern unsigned int ui, sum;\n// assign values to ui and sum\n**if (ui > UINT_MAX - sum)**\n  too_big();\nelse\n  sum = sum + ui;\n```", "```\nextern unsigned int i, j;\n// assign values to i and j\nif (**i - j < 0**)  // cannot happen\n  negative();\nelse\n  i = i - j;\n```", "```\nif (**j > i**)  // correct\n  negative();\nelse\n  i = i - j;\n```", "```\n// undefined or wrong for the most-negative value\n#define ABS(i) ((i) < 0 ? –(i) : (i))\n```", "```\nsigned int si = -25;\nsigned int abs_si = **ABS(si)**;\nprintf(\"%d\\n\", abs_si);  // prints 25\n```", "```\nsigned int si = -25;\nsigned int abs_si = **((si) < 0 ? –(si) : (si))**;\nprintf(\"%d\\n\", abs_si);  // prints 25\n```", "```\nsigned int si = **INT_MIN**;\nsigned int abs_si = ABS(si);  // undefined behavior\nprintf(\"%d\\n\", abs_si);\n```", "```\n#define ABSM(i, flag) ((i) >= 0 ? (i) : ((i)==(flag) ? (flag) : -(i)))\nsigned int si = -25;  // try INT_MIN to trigger the undefined behavior\nsigned int abs_si = ABSM(si, INT_MIN);\nif (abs_si == INT_MIN)\n  overflow();  // handle special case\nelse\n  printf(\"%d\\n\", abs_si);  // prints 25\n```", "```\nint abs(int i) {\n  return (i >= 0) ? i : -(unsigned)i;  // avoids overflow\n}\n```", "```\n_BitInt(32) multiply(_BitInt(8) a8, _BitInt(24) a24) {\n  _BitInt(32) a32 = a8 * (_BitInt(32))a24;\n  return a32;\n}\n```", "```\nunsigned int ui = 71;\nint si;\nsi = -12;\n```", "```\nint agent = 007;\nint permissions = 0777;\n```", "```\nint burger = 0xDEADBEEF;\n```", "```\nint mask = 0b110011;\n```", "```\nunsigned int ui = 71U;\nsigned long int sli = 9223372036854775807L;\nunsigned long long int ui = 18446744073709551615ULL;\n```", "```\n#include <math.h>\nint fpclassify(real-floating x);\n```", "```\nconst char *show_classification(double x) {\n  switch(fpclassify(x)) {\n    case FP_INFINITE:  return \"Inf\";\n    case FP_NAN:       return \"NaN\";\n    case FP_NORMAL:    return \"normal\";\n    case FP_SUBNORMAL: return \"subnormal\";\n    case FP_ZERO:      return \"zero\";\n    default:           return \"unknown\";\n  }\n```", "```\n15.75\n1.575E1   /* 15.75 */\n1575e-2   /* 15.75 */\n25E-4     /* 0.0025 */\n```", "```\nDBL_EPSILON 2.2204460492503131E-16 // decimal constant\nDBL_EPSILON 0X1P-52                // hex constant\nDBL_MIN 2.2250738585072014E-308    // decimal constant\nDBL_MIN 0X1P-1022                  // hex constant\nDBL_MAX 1.7976931348623157E+308    // decimal constant\nDBL_MAX 0X1.fffffffffffffP1023     // hex constant\n```", "```\n10.0F  /* type float */\n10.0   /* type double */\n10.0L  /* type long double */\n```", "```\nint si = 5;\nshort ss = 8;\nlong sl = (long)si;\nunsigned short us = (unsigned short)(ss + sl);\n```", "```\nsigned char cresult, c1, c2, c3;\nc1 = 100; c2 = 3; c3 = 4;\ncresult = c1 * c2 / c3;\n```", "```\n_BitInt(2) a2 = 1;\n_BitInt(3) a3 = 2;\n_BitInt(33) a33 = 1;\nsigned char c = 3;\n```", "```\na2 * a3;\n```", "```\na2 * c;\n```", "```\na33 * c;\n```", "```\nunsigned int ui = UINT_MAX;\nsigned char c = -1;\nif (c == ui) {\n  printf(\"%d equals %u\\n\", c, ui);\n}\n```", "```\n-1 equals 4294967295\n```", "```\n#include <errno.h>\n#include <limits.h>\n\nerrno_t do_stuff(signed long value) {\n  if (**(value < SCHAR_MIN) || (value > SCHAR_MAX)**) {\n    return ERANGE;\n  }\n signed char sc = (signed char)value; // cast quiets warning\n  // `--snip--`\n}\n```"]