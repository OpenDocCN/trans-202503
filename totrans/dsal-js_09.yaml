- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 7 SELECTING
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7 选择
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: 'In the previous chapter, we looked at the sorting problem, and here we’ll consider
    a related problem with many similar algorithms: *selection*. The basic situation
    is given a number *k* and an array with *n* items, we want to find the value at
    the array’s *k*th place if we ordered the array. But we don’t actually need the
    array to be sorted; we just need to know its *k*th element. Unlike the sorting
    problem, JavaScript doesn’t provide a “ready-made” solution for selection, so
    if you’re in need of this kind of function, you’ll have to use some of the algorithms
    in this chapter.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了排序问题，在这里我们将考虑一个与排序有很多相似算法的相关问题：*选择*。基本情况是，给定一个数字*k*和一个包含*n*个项的数组，我们希望找到数组中第*k*个位置的值，假如我们对数组进行了排序。但实际上我们并不需要排序数组；我们只需要知道它的第*k*个元素。与排序问题不同，JavaScript
    并没有提供一个“现成”的选择解决方案，因此，如果你需要这种功能，你必须使用本章中的某些算法。
- en: 'The way this problem relates to sorting is simple: if you just sort the list
    of values (using any of the algorithms in the previous chapter), you can quickly
    produce the *k*th value of the sorted list for all possible values of *k*; you
    just look at the *k*th place in the sorted array. That would be a good solution
    if you actually needed to make many selections from the same array; an *O*(*n*
    log *n*) sort followed by many *O*(1) selections. However, there’s no requirement
    to actually sort the list, and we’ll try to avoid doing that. The selection algorithms
    that we’ll explore in this chapter perform better than sorting algorithms because
    they don’t need to sort everything.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题与排序的关系很简单：如果你只是对值列表进行排序（使用上一章中的任何算法），你可以快速地为所有可能的*k*值生成排序列表中的第*k*个值；你只需要查看排序数组中的第*k*个位置。如果你确实需要从同一个数组中进行多次选择，这将是一个很好的解决方案；一个
    *O*(n log n) 排序，接着进行多个 *O*(1) 选择。然而，实际上并没有要求对列表进行排序，我们将尽量避免这样做。本章将探讨的选择算法比排序算法表现得更好，因为它们不需要排序所有内容。
- en: In the selection problem, if you ask for *k* = 1, you’re asking for the minimum
    of the list; *k* = *n* asks for the maximum, and *k* = *n*/2 asks for the median.
    Keep in mind that in “real life” *k* goes from 1 to *n*, but because of JavaScript’s
    0-based arrays, *k* goes from 0 to one less than the array’s length.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择问题中，如果你请求 *k* = 1，你就是在请求列表中的最小值；*k* = *n* 请求最大值，*k* = *n*/2 请求中位数。请记住，在“实际情况”中，*k*
    的范围是从 1 到 *n*，但是由于 JavaScript 的数组是从 0 开始的，*k* 的范围是从 0 到数组长度减一。
- en: NOTE
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*Formally, if the list of values is of even length, the definition of median
    would ask for the average of the two center values of the sorted array, but we’re
    not doing that. In order for your selection code to produce the median of arrays
    with even length, you’d need to call the selection algorithm twice to get the
    two center values and only then calculate their mean. We’ll just deal with the
    problem of finding the value at any given position.*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*正式来说，如果值列表的长度是偶数，中位数的定义要求取排序数组中两个中心值的平均值，但我们并不这么做。为了让你的选择代码能够输出偶数长度数组的中位数，你需要调用选择算法两次，获取两个中心值，然后再计算它们的均值。我们只处理找到任何给定位置的值的问题。*'
- en: Selection Without Comparisons
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无比较的选择
- en: In the same way you could implement sorting without comparisons (meaning you
    never have to compare one key with another), you can use variations of the bitmap
    and counting sorting methods to find the *k*th value of a list quickly, without
    even attempting a partial sort of the data. Remember that these algorithms are
    limited; they work only for numbers (not key + data of any kind) and preferably
    numbers in a not very extensive range.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你可以实现不需要比较的排序（意思是你永远不需要将一个键与另一个键进行比较），你也可以使用位图排序和计数排序方法的变体来快速找到列表的第*k*个值，而无需尝试部分排序数据。请记住，这些算法是有限制的；它们仅适用于数字（而不是任何类型的键+数据），并且最好是数字位于一个不太广泛的范围内。
- en: Bitmap Selection
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 位图选择
- en: The bitmap sort worked by reading all data and setting bits on in a bitmap;
    after that, outputting the sorted numbers just required walking through the bitmap.
    You’ll do the same here, except you won’t output all numbers; you need only the
    *k*th value in the bitmap. [Figure 7-1](chapter7.xhtml#fig7-1) shows the method;
    assume you want to find the 4th element in the same array used as an example in
    [Chapter 6](chapter6.xhtml).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 位图排序通过读取所有数据并在位图中设置位来工作；然后，输出排序后的数字只需要遍历位图。在这里你也会做同样的事情，只不过不会输出所有数字；你只需要位图中的第*k*个值。[图7-1](chapter7.xhtml#fig7-1)展示了这个方法；假设你想要在与[第6章](chapter6.xhtml)中示例相同的数组中找到第4个元素。
- en: '![](../images/Figure7-1.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure7-1.jpg)'
- en: 'Figure 7-1: A variation of bitmap sort allows a fast selection algorithm.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-1：位图排序的变体提供了一个快速选择算法。
- en: First generate the bitmap and then traverse it looking for the 4th set bit,
    which in this case corresponds to 27.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先生成位图，然后遍历位图，寻找第4个设置的位，在本例中对应的是27。
- en: 'The code is as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The parameters for this algorithm are the same as when sorting ❶ with the addition
    of k, the place of interest. The logic to create the bitmap ❷ is exactly the same
    as for sorting; the only difference comes in the final output ❸. Set a counter
    j to the first position in the array, and every time you find a set bit ❹, test
    whether j reached the desired place at k ❺; if so, you’re done ❻. Otherwise, keep
    looping, after counting one more found number ❼.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法的参数与排序❶时相同，唯一增加的是*k*，即感兴趣的位置。创建位图❷的逻辑与排序时完全相同；唯一的区别出现在最终输出❸。将计数器j设置为数组的第一个位置，每次找到一个设置位❹时，测试j是否达到了所需的位置*k*❺；如果达到了，就完成了❻。否则，继续循环，计数下一个找到的数字❼。
- en: This algorithm is obviously *O*(*n*), and if it weren’t for the limitations
    mentioned earlier, it would be one of the best for solving the selection problem.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个算法显然是*O*(*n*)，如果不是因为之前提到的限制，它将是解决选择问题的最佳算法之一。
- en: Counting Selection
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 计数选择
- en: Under the same circumstances as for bitmap sort, in [Chapter 6](chapter6.xhtml)
    we considered the counting sort, which didn’t have issues if numbers were repeated
    in the input. This situation, however, was a problem when using a bitmap.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在与位图排序相同的情况下，在[第6章](chapter6.xhtml)中我们考虑了计数排序，如果输入中有重复数字则没有问题。然而，使用位图时，这种情况就成了一个问题。
- en: 'You can apply the same kind of solution here: go through the array, generate
    the list of counts, and finish by going through the counts from left to right
    until you find what value is at the *k*th place.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以应用相同的解决方案：遍历数组，生成计数列表，然后从左到右遍历这些计数，直到找到第*k*个位置的值。
- en: Consider an example using the same numbers from [Chapter 6](chapter6.xhtml)
    (see [Figure 7-2](chapter7.xhtml#fig7-2)); you want to find the value at the 4th
    place in the array.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以使用[第6章](chapter6.xhtml)中的相同数字为例（参见[图7-2](chapter7.xhtml#fig7-2)）；你想要找到数组中第4个位置的值。
- en: '![](../images/Figure7-2.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure7-2.jpg)'
- en: 'Figure 7-2: Counting sort also provides a simple selection algorithm.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-2：计数排序也提供了一个简单的选择算法。
- en: First find all the counts and then sum through them, from left to right, until
    the sum equals or exceeds 4; in this case, that happens at value 50 when the accumulated
    sum goes from 3 to 5\. (Keep in mind the case where the sum exceeds *k* because
    of repeated values in the input array.)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先找到所有的计数，然后从左到右依次累加，直到累加和等于或超过4；在这种情况下，当累积和从3变到5时，发生在值50处。（请记住，在输入数组中存在重复值时，可能会发生和超过*k*的情况。）
- en: 'Here’s the logic:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑如下：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The parameters are the same as earlier ❶, and all the logic to generate the
    counts ❷ is the same as in [Chapter 6](chapter6.xhtml). The changes appear when
    preparing output. First initialize a counter j at the first position of the input
    array ❸, and every time you find a nonzero count ❹, update the counter ❺ and see
    whether you reached or passed *k* with that sum. If so, return the corresponding
    value ❻; otherwise, just keep looping.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 参数与之前❶相同，生成计数❷的所有逻辑也与[第6章](chapter6.xhtml)中的相同。变化出现在准备输出时。首先初始化一个计数器j，位于输入数组的第一个位置❸，每次遇到非零计数❹时，更新计数器❺并检查是否通过该和达到了或超过了*k*。如果是，则返回相应的值❻；否则，继续循环。
- en: Again, we have an *O*(*n*) algorithm, but we want to be able to handle more
    general conditions, so let’s move on to selection algorithms based on key-to-key
    comparisons that will work in every case.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们有一个*O*(*n*)算法，但我们希望能够处理更一般的情况，因此让我们继续讨论基于键对键比较的选择算法，这些算法在所有情况下都适用。
- en: Selecting with Comparisons
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用比较进行选择
- en: 'Most algorithms for the selection problem are based on sorting algorithms.
    The first one we’ll explore is based on selection sort, but we won’t sort the
    whole array—just its first *k* values. Selection sort works by finding the minimum
    of the array and exchanging it with the value at the first place; then it looks
    for the minimum of the remaining values and exchanges it with the value at the
    second place, and so on, until the whole array is sorted. We’ll do the same, but
    stop after finding the *k*th minimum:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数选择问题的算法都基于排序算法。我们将探讨的第一个算法基于选择排序，但我们不会对整个数组进行排序——只会排序它的前*k*个值。选择排序通过找到数组中的最小值，并将其与第一个位置的值交换；然后，它继续寻找剩余值中的最小值，并将其与第二个位置的值交换，依此类推，直到整个数组排序完成。我们将采取相同的方法，但在找到第*k*个最小值后停止：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The parameters for this algorithm are the same as before ❶. We made a small
    change in the loop. When sorting, you went through the entire array, but now you’ll
    stop after having reached the *k*th place ❷. The rest of the logic is exactly
    the same as for the sorting algorithm, except that you return the desired value
    instead of the sorted array ❸.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个算法的参数与之前相同❶。我们在循环中做了一些小改动。在排序时，你遍历了整个数组，但现在在达到第*k*个位置后就会停止❷。其余的逻辑与排序算法完全相同，只是你返回的是所需的值，而不是排序后的数组❸。
- en: The performance of this algorithm is *O*(*kn*), which is an efficient result
    for low values of *k* and an asymptotically bad one if *k* grows and is proportional
    to *n*. (See question 7.3 for a unique case.) In particular, if you want to find
    the middle element of the array, then *k* = *n* / 2 and performance becomes *O*(*n*²);
    you’ll do better with different algorithms.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法的性能为*O*(*kn*)，对于较小的*k*值是高效的，但如果*k*增大并且与*n*成正比时，性能会趋于差劲。（请参见问题7.3，了解一种特殊情况。）特别地，如果你要查找数组的中间元素，那么*k*
    = *n* / 2，性能会变成*O*(*n*²)；这时使用其他算法会更好。
- en: The Quickselect Family
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Quickselect系列
- en: Many selection algorithms are derived from the quicksort code, in particular,
    the way it partitions an array in relation to a pivot, moving values around so
    that the array ends up consisting of values lower than the pivot on one side,
    then the pivot itself, and values greater than the pivot on the other side. In
    the case of quicksort, after partitioning the array this way, the algorithm continues
    recursively by sorting each of the two parts; in this case you’ll continue the
    search in only one of the parts. See [Figure 7-3](chapter7.xhtml#fig7-3) for an
    example where you want to find the 6th element of the array.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 许多选择算法源自快速排序代码，特别是它如何根据枢轴分割数组，将值移动，使得数组的一侧包含小于枢轴的值，枢轴本身位于中间，另一侧则包含大于枢轴的值。在快速排序的情况下，数组这样分割后，算法会递归地对两个部分进行排序；而在选择算法中，你只会在其中一个部分继续搜索。有关如何查找数组第六个元素的示例，请参见[图7-3](chapter7.xhtml#fig7-3)。
- en: '![](../images/Figure7-3.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure7-3.jpg)'
- en: 'Figure 7-3: The pivot technique used in quicksort provides a selection algorithm.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-3：快速排序中使用的枢轴技术提供了一种选择算法。
- en: You’ll use the same first pivot scheme as for quicksort and choose the rightmost
    value (14) as the pivot. After repartitioning the array around 14, the pivot ends
    at the 4th place in the array. You want the 6th element, so continue searching
    on the right side of the pivot. There you choose 56 as the pivot, and after repartitioning,
    56 ends at the 7th place in the array. That comes after the place you want, so
    continue searching the left part. You then choose 22 as the pivot. It ends in
    the 5th place, and you continue searching the right side, which now consists of
    a single element, so you know for sure 34 is the 6th value in the array. To the
    left of 34 there are lower values (but not necessarily ordered), and to the right
    there are greater values.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用与快速排序相同的首个枢轴方案，并选择最右边的值（14）作为枢轴。将数组围绕14重新分区后，枢轴将位于数组的第4个位置。你要查找的是第六个元素，所以继续在枢轴右侧进行搜索。在右侧，你选择56作为枢轴，重新分区后，56将位于数组的第7个位置。这个位置超过了你需要的位置，因此继续在左侧搜索。然后你选择22作为枢轴。它位于第5个位置，你继续在右侧搜索，此时右侧只剩下一个元素，因此你可以确定34是数组中的第六个值。在34的左侧是较小的值（但不一定按顺序排列），右侧是较大的值。
- en: As mentioned in [Chapter 6](chapter6.xhtml), the performance of quicksort on
    average is *O*(*n* log *n*), but in the worst case, it becomes *O*(*n*²). Quickselect’s
    average performance has been proven to be *O*(*n*), but it could become *O*(*n*²)
    if you generally make unlucky pivot selections, so rather than study a single
    algorithm, we’ll consider a whole family of them by varying how we choose the
    pivot.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [第六章](chapter6.xhtml) 所提到的，快速排序的平均性能是 *O*(*n* log *n*)，但在最坏情况下，它变成 *O*(*n*²)。quickselect
    的平均性能已被证明是 *O*(*n*)，但如果你每次都做出不幸的基准选择，它可能会变成 *O*(*n*²)，因此我们不仅研究单一算法，而是通过改变基准选择的方式来考虑这一系列算法。
- en: Quickselect
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Quickselect
- en: Let’s start with the basic logic. As in [Chapter 6](chapter6.xhtml), assume
    single-field keys that can be compared with the < and > operators. Always write
    tests as a > b, so adapting the code for a more generic comparison would just
    require writing compare(a,b) > 0, assuming a user-provided compare(x,y) function
    that returns a positive value if x is greater than y.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从基本逻辑开始。如同 [第六章](chapter6.xhtml) 中所述，假设是可以用 < 和 > 操作符进行比较的单字段键。始终编写测试 as
    a > b，因此将代码适配为更通用的比较函数，只需要编写 compare(a,b) > 0，前提是提供一个 compare(x,y) 函数，如果 x 大于
    y，则返回正值。
- en: 'The following code implements the basic structure of the quickselect family;
    the pivot selection part is in bold, and we’ll make changes to that section to
    get other, enhanced versions of the selection function:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码实现了 quickselect 系列算法的基本结构；基准选择部分加粗显示，我们将对该部分进行更改，以获得其他增强版本的选择函数：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The parameters for quickselect ❶ are the same as for selection sort and all
    the algorithms in this chapter. The start of this algorithm is exactly like quicksort’s,
    with the option of using a random choice for the pivot, up to and including how
    you split the array, having the chosen pivot end at position p ❷. The only difference
    is how to proceed after that. If the pivot ends in the *k*th position ❸, you’re
    done, because that’s the value you want. Otherwise, use recursion to examine the
    left ❹ or right ❺ partition, whichever includes the *k*th position. (Actually,
    you don’t need to use recursion; see question 7.4.)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: quickselect ❶ 的参数与选择排序以及本章中所有算法的参数相同。该算法的开始与快速排序完全相同，可以选择随机的基准值，直到如何划分数组，包括让选择的基准值位于位置
    p ❷。唯一的不同之处在于后续的处理方式。如果基准值位于 *k* 位置 ❸，那么就完成了，因为那就是你需要的值。否则，使用递归来检查包含 *k* 位置的左
    ❹ 或右 ❺ 部分。（实际上，你不一定需要使用递归；请参见问题 7.4。）
- en: 'As is, quickselect reorders (partitions) the input array to ensure the element
    in the *k*th place isn’t lower than any element before it or greater than any
    element after it. You can easily get the value itself by writing an auxiliary
    function:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: quickselect 会重新排序（划分）输入数组，确保 *k* 位置的元素不小于它前面的任何元素，也不大于它后面的任何元素。你可以通过编写辅助函数轻松地获取该值：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Use quickselect to repartition the array ❶, and then return the value at the
    desired position ❷. (See question 7.5 for a simple modification.) On average,
    this algorithm can be shown to be linear, but if it happens to choose the worst
    pivot every time, it becomes quadratic instead. Now consider some alternative
    pivot-choosing strategies.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 quickselect 重新划分数组 ❶，然后返回所需位置的值 ❷。（有关简单修改，请参见问题 7.5。）平均而言，这个算法的时间复杂度可以证明是线性的，但如果每次都恰巧选择最差的基准值，它将变成二次复杂度。现在考虑一些替代的基准选择策略。
- en: Median of Medians
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 中位数的中位数
- en: The previous version of quickselect could become slow, but you can split the
    array better. For example, you don’t want either of the two possible partitions
    to be small in case you have to recurse on the large one.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以前版本的 quickselect 可能会变得较慢，但你可以更好地划分数组。例如，你不希望两个可能的划分都太小，以防你必须对较大的部分进行递归处理。
- en: 'One strategy you can apply is called *median of medians*, and the idea is as
    follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以应用的一种策略叫做 *中位数的中位数*，其思路如下：
- en: 1. Divide the array in groups of up to five elements.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 1. 将数组分成最多五个元素一组。
- en: 2. Find the median of each group.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 2. 找到每组的中位数。
- en: 3. Find the median of the medians found in the previous step.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 3. 找到前一步中找到的中位数的中位数。
- en: 4. Use that value to split the array.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 4. 使用该值来划分数组。
- en: '[Figure 7-4](chapter7.xhtml#fig7-4) illustrates this concept; each rectangle
    is a set of five values in order from low to high from bottom to top (as the vertical
    arrow shows) with the median in the middle. The medians themselves grow from left
    (lowest median) to right (highest median) according to the horizontal arrow. The
    pivot you’ll choose is the median of the set of medians—the center value in the
    diagram.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 7-4](chapter7.xhtml#fig7-4)展示了这个概念；每个矩形是一个由底部到顶部按从小到大的顺序排列的五个值的集合（如垂直箭头所示），其中中位数位于中间。中位数本身从左到右（最低的中位数到最高的中位数）按水平箭头顺序排列。你将选择的枢轴是这些中位数集合的中位数——图中的中心值。'
- en: '![](../images/Figure7-4.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure7-4.jpg)'
- en: 'Figure 7-4: The middle element in each column is its median; medians are sorted
    from left to right, and the center value is not less than the shaded values, a
    third of the array.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-4：每列中的中间元素是其中位数；这些中位数从左到右排序，且中心值不小于阴影部分的值，即数组的三分之一。
- en: In [Figure 7-4](chapter7.xhtml#fig7-4), all the gray values (15 out of 45, a
    third of the complete set) are *guaranteed* not to be greater than the chosen
    pivot. Similarly, the chosen pivot is also guaranteed not to be greater than the
    other third of array values (see [Figure 7-5](chapter7.xhtml#fig7-5)).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 7-4](chapter7.xhtml#fig7-4)中，所有灰色的值（45个中的15个，整个集合的三分之一）*保证*不会大于所选的枢轴。同样，所选的枢轴也*保证*不会大于数组中另外三分之一的值（见[图
    7-5](chapter7.xhtml#fig7-5)）。
- en: '![](../images/Figure7-5.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure7-5.jpg)'
- en: 'Figure 7-5: In the same situation as [Figure 7-4](chapter7.xhtml#fig7-4), the
    center value is also not greater than the shaded values, a third of the array.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-5：在与[图 7-4](chapter7.xhtml#fig7-4)相同的情况下，中心值也不大于阴影部分的值，即数组的三分之一。
- en: This means the chosen pivot will be such that it splits the array somehow between
    33/66 percent and 50/50 percent. At worst, you’ll have to apply recursion in a
    new array that is two-thirds the size of the original array (and, at best, one
    that’s only one-third the size) and that can be shown to produce *O*(*n*) performance.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着所选的枢轴将使数组按某种方式分割为33/66百分比和50/50百分比。最坏情况下，你将需要在一个大小为原数组三分之二的新数组中应用递归（而最好情况仅为原数组的三分之一大小），这可以证明会产生*O*(*n*)的性能。
- en: 'The following code implements this method (the bold indicates the parts that
    changed):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码实现了此方法（粗体部分为已更改的部分）：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If the array is short enough (five elements or fewer) ❶, you can use another
    algorithm to find the median of medians (mom). If the array has more than five
    elements ❷, consider sets of five elements at a time. You find the median of the
    set ❸ and move it to the left of the original array ❹ by swapping, so all medians
    end up together starting at position left of the array. You now want the median
    of this (smaller) set, so you calculate its position ❺ and use recursion ❻ to
    find the desired pivot. Once you’ve found it, swap it with the value at the right
    of the array ❼, and from that point onward, it’s the same pivoting logic as shown
    earlier.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数组足够短（最多五个元素）❶，你可以使用另一种算法来找到中位数的中位数（mom）。如果数组有超过五个元素❷，则考虑每次处理五个元素的集合。你先找到该集合的中位数❸，并通过交换将其移到原数组的左侧❹，这样所有中位数最终会集中在数组左侧的位置。现在你需要计算这个（较小）集合的中位数，因此计算它的位置❺，并使用递归❻来找到所需的枢轴。一旦找到枢轴，交换它与数组右侧的值❼，从那时起，接下来的逻辑与前面展示的枢轴逻辑相同。
- en: 'Now complete the code. You need a fast simpleMedian(...) algorithm to find
    the median of an array of up to five elements, and an insertion sort does the
    job (you also could use the sortingSelect(...) code from the section “Selecting
    with Comparisons” on page 124):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在完成代码。你需要一个快速的simpleMedian(...)算法来找到最多五个元素的数组的中位数，插入排序可以完成这个任务（你也可以使用第124页“通过比较选择”章节中的sortingSelect(...)代码）：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Sort the whole array ❶, which isn’t very slow because an insertion sort is quite
    speedy for such a small set of values, and then choose the middle element of the
    sorted array ❷.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对整个数组进行排序❶，这并不会很慢，因为插入排序在处理这样的小集合时非常迅速，然后选择排序数组的中间元素❷。
- en: This logic works well and has guaranteed results, unlike the original quickselect
    that had a worst case different from the average case.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个逻辑效果良好，且结果有保障，不同于原始的快速选择算法，它的最坏情况与平均情况不同。
- en: Repeated Step
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 重复步骤
- en: 'Another variation on how to select the pivot is called *repeated step*. This
    algorithm seemingly does a worse job of partitioning an array, but it has advantages
    in terms of speed. Choosing the median of three elements is quite quick using
    the “ninther” technique (as described in [Chapter 6](chapter6.xhtml)): first go
    through the array, generating a set by choosing the median out of every trio of
    values; then, go through that set of medians to create a second set by choosing
    the median out of every trio of medians. [Figure 7-6](chapter7.xhtml#fig7-6) shows
    how this would work for an array with 18 elements. The idea is exactly the same
    for larger arrays, but there’s not enough space to show it here.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 选择基准的另一种变体叫做*重复步骤*。这个算法在分区数组时看似效果不佳，但它在速度方面有优势。使用“九分法”技术选择三个元素的中位数非常迅速（如[第六章](chapter6.xhtml)所述）：首先遍历数组，从每组三个值中选择中位数，生成一个集合；然后，遍历该中位数集合，从每组三个中位数中选择中位数，生成第二个集合。[图
    7-6](chapter7.xhtml#fig7-6)展示了对于一个包含 18 个元素的数组如何工作。这个思路对于更大的数组是一样的，只是这里没有足够的空间展示。
- en: '![](../images/Figure7-6.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure7-6.jpg)'
- en: 'Figure 7-6: Repeatedly applying the “median of three” process reduces the original
    array to one-ninth of its size.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-6：反复应用“三个中位数”过程将原数组缩小为原始大小的九分之一。
- en: 'The repeated step of choosing the median of three reduces the original array
    to one-ninth of its size and makes recursion go very quickly. (In a sense, you
    are choosing the median of medians of medians.) The implementation is as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 选择三元组中位数的重复步骤将原数组缩小为原始大小的九分之一，并使递归速度非常快。（从某种意义上说，你是在选择中位数的中位数的中位数。）其实现如下：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The mom variable ends up with the median of medians position in the array ❶.
    If the array is less than nine elements long ❷, you don’t need to do any fancy
    work; just use a sort-based algorithm to find the desired median. Variable j1
    keeps track of the medians you’ve swapped to the left of the array ❸. A simple
    loop goes through the array’s elements, three at a time, finding the median of
    that trio and swapping it to the left ❹. You then perform the same logic again,
    using a new j2 variable ❺ and another loop ❻. After these loops, positions from
    left to j2 have the medians of medians ❼, and you apply the algorithm recursively
    to find its median, which you swap with the element at right ❽, so you can proceed
    with the rest of the otherwise unchanged quickselect algorithm.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: mom 变量最终位于数组中的中位数位置 ❶。如果数组元素少于九个 ❷，你不需要做任何复杂的操作；只需使用基于排序的算法找到所需的中位数。变量 j1 跟踪你已交换到数组左侧的中位数
    ❸。一个简单的循环遍历数组的元素，每次处理三个元素，找到该三元组的中位数并交换到左侧 ❹。然后，你再使用新的 j2 变量 ❺ 和另一个循环 ❻ 执行相同的逻辑。经过这些循环后，从左侧到
    j2 位置的元素就是中位数的中位数 ❼，接着递归地应用算法找到其中位数，并将其与右侧的元素交换 ❽，这样你就可以继续进行其余的未变的快速选择算法。
- en: This algorithm can also be proved to have *O*(*n*) performance, so it’s a good
    option. Why use recursion after two rounds of finding the medians of medians and
    not go on? (See question 7.6.)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法也可以证明具有 *O*(*n*) 的性能，因此它是一个不错的选择。为什么在找完两轮中位数的中位数后还要使用递归呢？（请参见问题 7.6。）
- en: So far you’ve explored algorithms that find the *k*th element for any value
    of *k*; this chapter finishes by explicitly considering the problem of finding
    the center element of an array.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经探讨了可以找到任何值的*k*th元素的算法；本章最后明确考虑了找到数组中间元素的问题。
- en: Finding the Median with Lazy Select
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用懒选择法找到中位数
- en: If you want to find the median (remember the working definition isn’t the one
    used in statistics; you just choose the element closest to the center of the array
    without any particular considerations for arrays of even length), you could obviously
    use any of the algorithms in this chapter, letting *k* be half the length of the
    input array. However, there are some other ways to find the center value, and
    in this section, we’ll consider an interesting one that’s based on random sampling
    (you’ll study sampling algorithms in [Chapter 8](chapter8.xhtml)) and probability
    calculations. The lazy select algorithm uses sampling and may find the right value
    with a single pass with an *O*(*n*^(–1/4)) probability of failure, looping again
    and again as needed until it succeeds.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想找到中位数（记住，这里的工作定义不是统计学中使用的那种；你只是选择数组中最接近中心的元素，而不考虑数组长度是否为偶数），你显然可以使用本章中的任何一种算法，设
    *k* 为输入数组长度的一半。然而，还有一些其他方法可以找到中心值，在本节中，我们将考虑一种有趣的方法，它基于随机抽样（你将在[第8章](chapter8.xhtml)中学习抽样算法）和概率计算。懒选择算法使用抽样，并且可能通过一次遍历找到正确的值，具有
    *O*(*n*^(–1/4)) 的失败概率，按需反复循环直到成功。
- en: 'The algorithm to find the median of set *S* of size *n* works as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 求解大小为 *n* 的集合 *S* 的中位数的算法如下：
- en: 1. Choose a random sample *R* of *n*^(3/4) values from *S*.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 1. 从 *S* 中随机选择一个大小为 *n*^(3/4) 的样本 *R*。
- en: 2. Sort *R* using any algorithm.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 2. 使用任意算法对 *R* 进行排序。
- en: 3. Choose two values, *d* and *u*, in *R* that will satisfy *d* < *median* <
    *u with high probability (*you’ll see how to do this shortly).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 3. 在 *R* 中选择两个值，*d* 和 *u*，使其满足 *d* < *median* < *u*，且具有较高的概率（稍后你会看到如何做到这一点）。
- en: 4. Let *dSize* be how many values of *R* are < *d*; if *dSize* > *n*/2, you
    failed and must try again.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 4. 设 *dSize* 为 *R* 中小于 *d* 的值的个数；如果 *dSize* > *n*/2，则表示失败，必须重新尝试。
- en: 5. Let *uSize* be how many values of *R* are > *u*; if *uSize* > *n*/2, you
    must try again.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 5. 设 *uSize* 为 *R* 中大于 *u* 的值的个数；如果 *uSize* > *n*/2，则必须重新尝试。
- en: 6. Let *m* be the set of values *x* of *S* that are *d* < *x* < *u*; if the
    count exceeds 4*n*^(3/4) you must try again.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 6. 设 *m* 为 *S* 中值 *x* 的集合，满足 *d* < *x* < *u*；如果计数超过 4*n*^(3/4)，则必须重新尝试。
- en: 7. Sort *m* and return the value at its *n*/2 – *dSize* position.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 7. 对 *m* 进行排序，并返回其 *n*/2 - *dSize* 位置的值。
- en: The proof of performance for this algorithm depends highly on probabilistic
    arguments, and you won’t see those here. The key concept is that a random choice
    of values *R*—but not too many, so sorting *R* is *O*(*n*)—should usually be good
    enough to find lower and upper limits to the median (*d* and *u* in the previous
    list) and that the set of values between *d* and *u* should be small enough so
    that, again, sorting doesn’t go above *O*(*n*) in performance. This algorithm
    may fail, but the probability is low *O*(*n**^–*^(1/4)), meaning that in the worst
    case, a few new attempts should succeed. As an example, if the odds of failure
    were 10 percent (which means the algorithm may succeed at first 90 percent of
    the times), the odds of two failures in a row would be 1 percent (10 percent of
    10 percent, resulting in 99 percent odds of success), and three successive failures
    would happen once every 1,000 times, and so on.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法的性能证明高度依赖于概率论的推理，这里不再展示。关键概念是，随机选择 *R* 中的值——但不要选择太多，以确保排序 *R* 的复杂度为 *O*(*n*)——通常应该足够找到中位数的上下限（即前面列表中的
    *d* 和 *u*），而且在 *d* 和 *u* 之间的值集合应该足够小，因此，排序操作的复杂度仍然保持在 *O*(*n*) 以内。该算法可能会失败，但失败的概率很低，为
    *O*(*n*^–^(1/4))，也就是说在最坏的情况下，几次新的尝试应该能成功。例如，如果失败的概率是 10%（即算法有 90% 的机会第一次就成功），那么连续两次失败的概率是
    1%（10% 的 10%，成功的概率为 99%），三次连续失败的概率是每 1000 次失败一次，依此类推。
- en: 'The implementation is straightforward, but with lots of math:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 实现非常简单，但包含大量的数学计算：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You use merge sort ❶ to sort arrays when needed; it’s important to choose an
    *O*(*n* log *n*) algorithm, because you’ll use it with arrays that are at most
    4*n*^(3/4) size, so the performance becomes *O*(4*n*^(3/4) log 4*n*^(3/4)) < *O*(*n*).
    Then you define several variables for the rest of the code: len is the size of
    the input array ❷, sR is the size of the sample ❸, dIndex and uIndex are the positions
    of d and u in the sorted r array ❹, and dSize, uSize, and m ❺ correspond with
    the description listed earlier in this section.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要对数组进行排序时，你使用归并排序 ❶；选择一个 *O*(*n* log *n*) 的算法很重要，因为你将用于最大为 4*n*^(3/4) 大小的数组，因此性能为
    *O*(4*n*^(3/4) log 4*n*^(3/4)) < *O*(*n*)。接着，你为其余的代码定义几个变量：len 是输入数组的大小 ❷，sR 是样本的大小
    ❸，dIndex 和 uIndex 是排序后 r 数组中 d 和 u 的位置 ❹，而 dSize、uSize 和 m ❺ 与本节前面列出的描述相对应。
- en: Use a “sampling with repetition” algorithm ❻ to choose sR random values from
    the input array into the r array; making sure no repeated values are sampled would
    work as well, but the logic would be more complex, as you’ll see in [Chapter 8](chapter8.xhtml).
    After having chosen and sorted r ❼, calculate dSize and uSize (how many values
    in the input array are smaller than d or greater than u; note that you never actually
    define d and u; you just refer to them by their indices) and m (with values between
    d and u).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用“带重复的抽样”算法 ❻ 从输入数组中选择sR个随机值到r数组中；确保没有重复的值被抽取也是可行的，但逻辑会更加复杂，正如你在[第8章](chapter8.xhtml)中看到的那样。选择并排序r
    ❼后，计算dSize和uSize（输入数组中小于d或大于u的值的数量；注意你从未定义d和u，你只是通过它们的索引引用它们）和m（值位于d和u之间）。
- en: Finally, you want to know whether the results are as expected ❽. If dSize or
    uSize includes more than half the input array, the median isn’t in m, as was expected;
    you failed. Likewise, if m is too large, you also failed. If all tests pass, m
    has a proper size that allows you to sort it and choose the median from it ❾.
    Note that you account for the dSize values lower than d, which precede the array
    m.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你需要检查结果是否如预期 ❽。如果dSize或uSize包含超过一半的输入数组，那么中位数就不在m中，如预期的那样；你失败了。同样，如果m太大，你也失败了。如果所有测试都通过，m的大小合适，允许你对其进行排序并从中选择中位数
    ❾。注意，你还要考虑比d小的dSize值，这些值位于数组m之前。
- en: This algorithm is quite different from most of what you’ve considered in this
    book, because it depends on probabilistic properties to work, but performance
    is usually quite good, and it finds the median with few iterations, if any.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个算法与本书中大多数你考虑过的算法有很大不同，因为它依赖于概率性质才能工作，但通常性能非常好，能够在很少的迭代（如果有的话）中找到中位数。
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter you studied several algorithms for selection, most of which
    are closely related to the sorting algorithms examined in [Chapter 6](chapter6.xhtml).
    The selection problem isn’t as common as sorting, so it’s no surprise that JavaScript
    doesn’t provide a ready-made method for it, so the implementations in this chapter
    cannot be avoided if you need this functionality. Most of the algorithms covered
    here have *O*(*n*) performance, which is optimum, but the proofs of their behaviors
    are often complex, so they were omitted.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你研究了几种选择算法，其中大多数与[第6章](chapter6.xhtml)中讨论的排序算法密切相关。选择问题并不像排序问题那样常见，因此JavaScript没有提供现成的解决方法，所以如果你需要此功能，就必须实现本章中的算法。这里介绍的大多数算法具有*O*(*n*)的性能，这是最优的，但它们的行为证明通常较为复杂，因此被省略了。
- en: Questions
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题
- en: '**7.1  Tennis Sudden Death**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**7.1 网球淘汰赛**'
- en: Suppose 111 tennis players enter a knockout tournament to find the champion.
    In each round, random pairs of players play each other, and the loser is out of
    the tournament, while the winner passes to the next round. If there’s an odd number
    of players, one player gets a free pass to the next round. How many matches will
    be necessary to find the champion? How many extra matches will you need to find
    the second-best player? (And no, whoever lost to the champion in the last game
    isn’t necessarily the second-best player.) Can you generalize your answer for
    *n* players?
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 假设111名网球选手参加淘汰赛以决出冠军。在每一轮中，选手随机配对进行比赛，失败者淘汰，获胜者晋级下一轮。如果选手数量为奇数，则有一名选手获得直接晋级下一轮的机会。为了找出冠军，至少需要多少场比赛？你还需要进行多少额外的比赛来找出第二好的选手？（而且，不是说输给冠军的选手一定是第二好的选手。）你能为*n*个选手概括出你的答案吗？
- en: '**7.2  Take Five**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**7.2 取五个**'
- en: “Take Five” is the name of a jazz piece that Dave Brubeck made famous, but in
    this case you want to take the median of five elements. What’s the absolute minimum
    number of comparisons that guarantees finding that median? Can you provide an
    appropriate medianOf5(a,b,c,d,e) function that will return the median of its five
    arguments? You could be achieving a better simpleMedian() function with this!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: “Take Five”是Dave Brubeck使其闻名的爵士乐作品，但在这个问题中，你需要的是取五个元素的中位数。保证能找到该中位数的最少比较次数是多少？你能提供一个合适的medianOf5(a,b,c,d,e)函数，返回它五个参数的中位数吗？你可以通过这个方法优化一个更简单的simpleMedian()函数！
- en: '**7.3  Top to Bottom**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**7.3 从上到下**'
- en: If *k* is close to *n*, the length of the input array, your selection sort–based
    algorithm would have a bad quadratic performance, but you can make it quite better
    with a simple trick; can you see how?
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*k*接近*n*（输入数组的长度），你基于选择排序的算法将会有较差的二次性能，但你可以通过一个简单的技巧使其变得更好；你能看出是什么吗？
- en: '**7.4  Just Iterate**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**7.4 仅仅迭代**'
- en: Quickselect does a single tail recursive call and may be rewritten to avoid
    all recursion; can you do it?
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Quickselect 只进行一次尾递归调用，并且可以重写以避免所有递归；你能做到吗？
- en: '**7.5  Select Without Changing**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**7.5  不改变的选择**'
- en: 'As is, qSelect returns the desired *k*th value, but it has a side effect: the
    input array will be changed. Can you modify qSelect to avoid this secondary effect?'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所示，qSelect 返回所需的 *k* 值，但它有一个副作用：输入数组会被更改。你能修改 qSelect 以避免这个副作用吗？
- en: '**7.6  The Sicilian Way**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**7.6  西西里方式**'
- en: 'The repeated step selection algorithm does two rounds of choosing medians of
    three, and finally, it uses recursion to find the median of the resulting array
    of medians of medians. Implement the following variation: instead of recursion,
    keep applying the same method (grouping by three, choosing the median, and so
    on) until the resulting array is less than 3 in length, and then choose the pivot
    from that small array without any recursion.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 重复步骤选择算法进行两轮选择三个数的中位数，最后使用递归找到结果数组中的中位数的中位数。实现以下变体：不使用递归，而是不断应用相同的方法（按三分分组、选择中位数，依此类推），直到结果数组的长度小于
    3，然后从该小数组中选择枢轴，且不使用任何递归。
