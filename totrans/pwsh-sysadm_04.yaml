- en: '3'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '3'
- en: COMBINING COMMANDS
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 合并命令
- en: '![Images](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Images](../images/common.jpg)'
- en: 'So far, you’ve been using the PowerShell console to call one command at a time.
    For simple code, this isn’t a problem: you run the command you need, and if you
    need one more, you call that too. But for bigger projects, having to call each
    command individually is too time-consuming. Luckily, you can combine commands
    so you can call them as a single unit. In this chapter, you’ll learn two ways
    of combining commands: by using the PowerShell pipeline and by saving your code
    in external scripts.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你一直使用 PowerShell 控制台一次执行一个命令。对于简单的代码来说，这没什么问题：你运行需要的命令，如果需要再运行一个命令，也可以这样做。但对于较大的项目来说，单独调用每个命令太耗时了。幸运的是，你可以合并命令，使它们作为一个整体进行调用。在本章中，你将学习两种合并命令的方法：通过使用
    PowerShell 管道以及将代码保存在外部脚本中。
- en: Starting a Windows Service
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动 Windows 服务
- en: 'To illustrate why you’d want to combine commands, you’ll start by doing a simple
    example the old way. You’ll use two commands: `Get-Service`, which queries Windows
    services and returns information about them; and `Start-Service`, which starts
    Windows services. As shown in [Listing 3-1](ch03.xhtml#ch3list1), use `Get-Service`
    to make sure the service exists and then use `Start-Service` to start it.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明为什么需要合并命令，首先让我们用传统的方法做一个简单的示例。你将使用两个命令：`Get-Service`，该命令查询 Windows 服务并返回相关信息；以及
    `Start-Service`，该命令启动 Windows 服务。如[示例 3-1](ch03.xhtml#ch3list1)所示，使用 `Get-Service`
    确保服务存在，然后使用 `Start-Service` 启动它。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 3-1: Finding a service and starting it by using the `Name` parameter*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 3-1：使用 `Name` 参数查找服务并启动它*'
- en: You run `Get-Service` just to make sure PowerShell doesn’t throw any errors.
    Chances are the service is already running. If it is, `Start-Service` will simply
    return control to the console.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你运行 `Get-Service` 只是为了确保 PowerShell 不会抛出错误。很可能该服务已经在运行。如果是这样，`Start-Service`
    将只会将控制权返回给控制台。
- en: When you’re starting just one service, running the commands like this isn’t
    particularly taxing. But you can imagine how monotonous it might get if you were
    working with hundreds of services. Let’s look at how to simplify this problem.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当你只启动一个服务时，像这样运行命令并不会特别费劲。但如果你需要处理数百个服务，你可以想象它会变得多么单调。让我们来看看如何简化这个问题。
- en: Using the Pipeline
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用管道
- en: 'The first way to simplify your code is by chaining together commands by using
    the PowerShell *pipeline*, a tool that allows you to send the output of one command
    directly into another command as input. To use the pipeline, use the *pipe operator*
    (`|`) between two commands, like so:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 简化代码的第一种方法是通过 PowerShell *管道* 将命令链接在一起，管道是一种工具，可以将一个命令的输出直接作为另一个命令的输入。要使用管道，在两个命令之间使用
    *管道操作符* (`|`)，像这样：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, the output of command1 is *piped* into command2, becoming command2’s input.
    The final command in the pipeline will output to the console.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，命令1的输出被*管道*传递到命令2，成为命令2的输入。管道中的最后一个命令将输出到控制台。
- en: Many shell scripting languages, including *cmd.exe* and bash, use a pipeline.
    But what makes the pipeline in PowerShell unique is that it passes objects and
    not simple strings. Later in this chapter, you’ll look at how that happens, but
    for now, let’s rewrite the code in [Listing 3-1](ch03.xhtml#ch3list1) by using
    the pipeline.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 shell 脚本语言，包括 *cmd.exe* 和 bash，都使用管道。但 PowerShell 中管道的独特之处在于它传递的是对象，而不是简单的字符串。本章稍后会讲解这一过程，但现在，让我们使用管道重新编写[示例
    3-1](ch03.xhtml#ch3list1)中的代码。
- en: Piping Objects Between Commands
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在命令之间传递对象
- en: To send the output of `Get-Service` into `Start-Service`, use the code in [Listing
    3-2](ch03.xhtml#ch3list2).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 `Get-Service` 的输出传递给 `Start-Service`，请使用[示例 3-2](ch03.xhtml#ch3list2)中的代码。
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 3-2: Piping existing services to the `Start-Service` command*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 3-2：将现有服务通过管道传递给 `Start-Service` 命令*'
- en: In [Listing 3-1](ch03.xhtml#ch3list1), you used the `Name` parameter to tell
    the `Start-Service` command which service to start. But in this example, you don’t
    have to specify any parameters because PowerShell takes care of that for you.
    It looks at the output of `Get-Service`, decides what values it should pass to
    `Start-Service`, and matches the values to the parameters that `Start-Service`
    takes.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例 3-1](ch03.xhtml#ch3list1)中，你使用了 `Name` 参数来告诉 `Start-Service` 命令要启动哪个服务。但在这个示例中，你不需要指定任何参数，因为
    PowerShell 会为你处理这一切。它会查看 `Get-Service` 的输出，决定应该将哪些值传递给 `Start-Service`，并将这些值与
    `Start-Service` 需要的参数进行匹配。
- en: 'If you wanted to, you could rewrite [Listing 3-2](ch03.xhtml#ch3list2) to use
    no parameters at all:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你愿意，你可以将[示例 3-2](ch03.xhtml#ch3list2)中的代码重写为完全不使用参数： '
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: PowerShell sends the string `wuauserv` into `Get-Service`, and the output of
    `Get-Service` into `Start-Service`—all without you having to specify a thing!
    You’ve combined three separate commands into a single line, but you’ll still have
    to reenter that line for every service you want to start. In the next section,
    you’ll see how to use one line to start as many services as you want.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 将字符串 `wuauserv` 发送到 `Get-Service`，然后将 `Get-Service` 的输出传递到 `Start-Service`
    ——这一切都不需要你做任何指定！你已经将三个独立的命令合并为一行，但每次你想启动服务时，仍然需要重新输入这一行。在下一节中，你将看到如何使用一行命令启动你需要的任意多个服务。
- en: Piping Arrays Between Commands
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在命令之间传递数组
- en: In a text editor such as Notepad, create a text file called *Services.txt* that
    contains the strings `Wuauserv` and `W32Time` on separate lines, as shown in [Figure
    3-1](ch03.xhtml#ch3fig1).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本编辑器中，如记事本，创建一个名为 *Services.txt* 的文本文件，文件中每行包含 `Wuauserv` 和 `W32Time` 字符串，如[图
    3-1](ch03.xhtml#ch3fig1)所示。
- en: '![Image](../images/03fig01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/03fig01.jpg)'
- en: '*Figure 3-1: A* Services.txt *file with `Wuauserv` and `W32Time` listed on
    separate lines*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-1：一个* Services.txt *文件，其中`Wuauserv`和`W32Time`分别列在不同的行上*'
- en: 'This file contains a list of services you want to start. I’ve used two services
    here for simplicity’s sake, but you could add as many as you like. To display
    the file to your PowerShell window, use the `Get-Content` cmdlet’s `Path` parameter:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件包含了你想要启动的服务列表。为了简化起见，我这里使用了两个服务，但你可以根据需要添加更多服务。要将文件内容显示到 PowerShell 窗口中，请使用
    `Get-Content` cmdlet 的 `Path` 参数：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `Get-Content` command reads in a file line by line, adding each line to
    an array and then returning that array. [Listing 3-3](ch03.xhtml#ch3list3) uses
    the pipeline to pass the array that `Get-Content` returns into the `Get-Service`
    command.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`Get-Content` 命令逐行读取文件，将每一行添加到一个数组中，然后返回该数组。[清单 3-3](ch03.xhtml#ch3list3) 使用管道将
    `Get-Content` 返回的数组传递给 `Get-Service` 命令。'
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 3-3: Displaying a list of services to a PowerShell session by piping*
    Services.txt *to `Get-Service`*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 3-3：通过管道将* Services.txt *传递给 `Get-Service`，显示服务列表*'
- en: The `Get-Content` command is reading in the text file and spitting out an array.
    But instead of sending the array itself through the pipeline, PowerShell *unwraps*
    it, sending each item in the array individually through the pipeline. This allows
    you to execute the same command for every item in the array. By putting every
    service you want to start in your text file, and tacking on an extra `| Start-Service`
    to the command in [Listing 3-3](ch03.xhtml#ch3list3), you have a single command
    that can start as many services as you need.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`Get-Content` 命令正在读取文本文件并输出一个数组。但 PowerShell 并没有将整个数组通过管道传递，而是 *解开* 该数组，将数组中的每一项单独通过管道传递。这样，你就可以为数组中的每一项执行相同的命令。通过将你想要启动的每个服务放入文本文件中，并在[清单
    3-3](ch03.xhtml#ch3list3)中的命令后面加上一个额外的 `| Start-Service`，你就能用一个命令启动任意数量的服务。'
- en: 'There’s no limit to how many commands you can stitch together using the pipeline.
    But if you find yourself going over five, you may need to rethink your approach.
    Note that although the pipeline is powerful, it won’t work everywhere: most PowerShell
    commands accept only certain types of pipeline input, and some don’t accept any
    at all. In the next section, you’ll dig a little deeper into how PowerShell handles
    pipeline input by looking at parameter binding.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用管道连接的命令数量没有限制。但如果你发现自己连接了五个以上的命令，可能需要重新考虑你的方法。请注意，尽管管道功能强大，但并不是所有地方都能使用：大多数
    PowerShell 命令仅接受某些类型的管道输入，某些命令甚至根本不接受任何输入。在下一节中，你将深入了解 PowerShell 如何处理管道输入，重点讲解参数绑定。
- en: Looking at Parameter Binding
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 查看参数绑定
- en: 'When you pass parameters to a command, PowerShell initiates a process known
    as *parameter binding*, in which it matches each object you pass into the command
    to the various parameters specified by the command’s creator. For a PowerShell
    command to accept pipeline input, the person who writes the command—whether that’s
    Microsoft or you—has to explicitly build in pipeline support for one or more parameters.
    You’ll notice an error if you attempt to pipe information into a command that
    doesn’t have pipeline support on any parameter, or if PowerShell cannot find a
    suitable binding. For example, try running the following command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将参数传递给命令时，PowerShell 会启动一个叫做 *参数绑定* 的过程，其中它将你传递给命令的每个对象与命令创建者指定的各种参数进行匹配。为了让
    PowerShell 命令接受管道输入，编写该命令的人——无论是 Microsoft 还是你——必须显式地为一个或多个参数构建管道支持。如果你尝试将信息传递到一个没有管道支持的命令中，或者
    PowerShell 找不到合适的绑定，就会出现错误。例如，尝试运行以下命令：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You should see that the command won’t accept pipeline input. To see if using
    the pipeline is even possible, you can look at a command’s full help content by
    using the `Full` parameter on the `Get-Help` command. Let’s use `Get-Help` to
    look at the `Get-Service` command you used in [Listing 3-1](ch03.xhtml#ch3list1):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到命令不接受管道输入。为了查看是否可以使用管道，你可以使用 `Get-Help` 命令并带上 `Full` 参数来查看命令的完整帮助内容。我们使用
    `Get-Help` 查看你在 [示例 3-1](ch03.xhtml#ch3list1) 中使用的 `Get-Service` 命令：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You should get quite a bit of output. Scroll down to the `PARAMETERS` section.
    This section lists information about each parameter and gives you more information
    than you’d get by not using the `Detailed` or `Full` parameter at all. [Listing
    3-4](ch03.xhtml#ch3list4) shows the information for `Get-Service`’s `Name` parameter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到相当多的输出。向下滚动到 `PARAMETERS` 部分。该部分列出了每个参数的信息，并提供比不使用 `Detailed` 或 `Full`
    参数时更多的信息。[示例 3-4](ch03.xhtml#ch3list4) 显示了 `Get-Service` 的 `Name` 参数的信息。
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 3-4: The `Get-Service` command’s `Name` parameter information*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 3-4: `Get-Service` 命令的 `Name` 参数信息*'
- en: 'There’s a lot of information here, but we want to focus on the `Accept pipeline
    input?` field. As you can imagine, this field tells you whether a parameter accepts
    pipeline input or not; if the parameter didn’t accept pipeline input, you’d see
    `false` next to this field. But notice there’s more information here: this parameter
    accepts pipeline input both via `ByValue` and `ByPropertyName`. Contrast this
    with the `ComputerName` parameter for the same command, whose information is in
    [Listing 3-5](ch03.xhtml#ch3list5).'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多信息，但我们想要关注的是 `Accept pipeline input?` 字段。正如你所想象的，这个字段告诉你一个参数是否接受管道输入；如果参数不接受管道输入，你会在此字段旁看到
    `false`。但是注意这里有更多的信息：这个参数同时通过 `ByValue` 和 `ByPropertyName` 接受管道输入。与此对比的是 `ComputerName`
    参数，它的相关信息在 [示例 3-5](ch03.xhtml#ch3list5) 中。
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 3-5: The `Get-Service` command’s `ComputerName` parameter information*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 3-5: `Get-Service` 命令的 `ComputerName` 参数信息*'
- en: The `ComputerName` parameter allows you to specify which computer you’d like
    to run `Get-Service` on. Notice this parameter also accepts a `string` type. So
    how does PowerShell know that you mean the service name, and not the computer
    name, when you do something like the following?
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`ComputerName` 参数允许你指定希望在哪台计算机上运行 `Get-Service`。请注意，这个参数也接受 `string` 类型。那么当你执行类似以下操作时，PowerShell
    怎么知道你指的是服务名称，而不是计算机名称呢？'
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: PowerShell matches pipeline input to parameters in two ways. The first is via
    `ByValue`, which means that PowerShell will look at the *type* of object passed
    in and interpret it accordingly. Because `Get-Service` specifies that it accepts
    the `Name` parameter via `ByValue`, it will interpret any string passed to it
    as `Name` unless otherwise specified. Because parameters passed via `ByValue`
    depend on the type of input, each parameter passed via `ByValue` can be one type
    only.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 匹配管道输入到参数有两种方式。第一种是通过 `ByValue`，这意味着 PowerShell 会查看传入对象的*类型*并相应地解释它。因为
    `Get-Service` 指定它通过 `ByValue` 接受 `Name` 参数，所以除非另行指定，否则它会将传入的任何字符串解释为 `Name`。由于通过
    `ByValue` 传递的参数依赖于输入的类型，每个通过 `ByValue` 传递的参数只能是一个类型。
- en: The second way PowerShell will match a parameter from the pipeline is via `ByPropertyName`.
    In this case, PowerShell will look at the object passed in, and if it has a property
    with the appropriate name (`ComputerName`, in this case), then it will look at
    the value for that property and accept that value as the parameter. So if you
    wanted to pass in both a service name and a computer name to `Get-Service`, you
    could create a `PSCustomObject` and pass it in, as in [Listing 3-6](ch03.xhtml#ch3list6).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 匹配管道参数的第二种方式是通过 `ByPropertyName`。在这种情况下，PowerShell 会查看传入的对象，如果它有一个具有适当名称（在这种情况下是
    `ComputerName`）的属性，则会查看该属性的值并将该值接受为参数。因此，如果你想将服务名称和计算机名称都传递给 `Get-Service`，你可以创建一个
    `PSCustomObject` 并将其传入，如 [示例 3-6](ch03.xhtml#ch3list6) 所示。
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 3-6: Passing a custom object into `Get-Service`*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 3-6: 将自定义对象传递给 `Get-Service`*'
- en: By looking at a command’s parameter specifications, and using a hashtable to
    cleanly store the ones you need, you’ll be able to use the pipeline to string
    together all sorts of commands. But as you start to write more complex PowerShell
    code, you’ll need more than the pipeline. In the next section, you’ll look at
    how to externally store your PowerShell code as scripts.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看命令的参数规范，并使用哈希表干净地存储所需的参数，你将能够使用管道将各种命令串联起来。但随着你开始编写更复杂的 PowerShell 代码，你将需要比管道更多的东西。在下一节中，你将学习如何将
    PowerShell 代码作为脚本外部存储。
- en: Writing Scripts
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写脚本
- en: '*Scripts* are external files that store a sequence of commands, which you can
    run by entering a single line in the PowerShell console. As you can see in [Listing
    3-7](ch03.xhtml#ch3list7), to run a script, you simply enter the path to it in
    the console.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*脚本* 是存储一系列命令的外部文件，你可以通过在 PowerShell 控制台中输入一行命令来运行它们。正如在[示例 3-7](ch03.xhtml#ch3list7)中所示，要运行脚本，你只需在控制台中输入脚本的路径。'
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 3-7: Running a script from the console*'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 3-7：从控制台运行脚本*'
- en: Although there’s nothing you can do in a script that you can’t do in the console,
    it’s much easier to run a single command using a script than it is to type several
    thousand commands! Not to mention that if you want to change anything in your
    code, or you make a mistake, you’ll need to retype those commands again. As you’ll
    see later in the book, scripting allows you to write complex, robust code. But
    before you start writing scripts, you have to change some PowerShell settings
    to make sure you can run them.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在脚本中你能做的事情与在控制台中做的没有区别，但使用脚本运行单个命令比键入几千个命令要容易得多！更不用说，如果你想修改代码中的某些内容，或者你犯了错误，你将需要重新输入那些命令。正如你在本书后面将看到的，脚本可以让你编写复杂、健壮的代码。但在你开始编写脚本之前，你需要更改一些
    PowerShell 设置，以确保你可以运行它们。
- en: Setting the Execution Policy
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置执行策略
- en: By default, PowerShell does not allow you to run any scripts. If you try to
    run an external script in the default PowerShell installation, you’ll encounter
    the error in [Listing 3-8](ch03.xhtml#ch3list8).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，PowerShell 不允许你运行任何脚本。如果你尝试在默认的 PowerShell 安装中运行外部脚本，你会遇到[示例 3-8](ch03.xhtml#ch3list8)中的错误。
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 3-8: An error that occurs when you try to run scripts*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 3-8：尝试运行脚本时发生的错误*'
- en: 'This frustrating error message is the result of PowerShell’s *execution policy*,
    a security measure that decides which scripts can be run. The execution policy
    has four main configurations:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个令人沮丧的错误信息是 PowerShell 的*执行策略*造成的，这是一个安全措施，用来决定哪些脚本可以运行。执行策略有四种主要配置：
- en: '**Restricted** This configuration, which is the default, doesn’t allow you
    to run scripts.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**Restricted** 该配置是默认配置，不允许你运行脚本。'
- en: '**AllSigned** This configuration allows you to run only scripts that have been
    cryptographically signed by a trusted party (more on this later).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**AllSigned** 该配置仅允许你运行那些经过受信任方加密签名的脚本（稍后会详细介绍）。'
- en: '**RemoteSigned** This configuration allows you to run any script you write,
    and any script you download as long as it’s been cryptographically signed by a
    trusted party.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**RemoteSigned** 该配置允许你运行任何自己编写的脚本，以及任何你下载的脚本，只要它们经过受信任方的加密签名。'
- en: '**Unrestricted** This configuration allows you to run any scripts.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**Unrestricted** 该配置允许你运行任何脚本。'
- en: To see which execution policy your machine is currently using, run the command
    in [Listing 3-9](ch03.xhtml#ch3list9).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看你的计算机当前使用的执行策略，可以运行[示例 3-9](ch03.xhtml#ch3list9)中的命令。
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*Listing 3-9: Displaying the current execution policy with the `Get-ExecutionPolicy`
    command*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 3-9：使用 `Get-ExecutionPolicy` 命令显示当前的执行策略*'
- en: Chances are you get `Restricted` when you run this command. For the purposes
    of this book, you’ll change the execution policy to `RemoteSigned`. This will
    allow you to run any script you write, while also ensuring that you use only external
    scripts that come from trusted sources. To change the execution policy, use the
    `Set-ExecutionPolicy` command and pass in the policy you want, as in [Listing
    3-10](ch03.xhtml#ch3list10). Note that you’ll need to be running this command
    as an administrator (see [Chapter 1](ch01.xhtml#ch1) for a refresher on running
    commands as an admin). You need to perform this command only once, as the setting
    is saved in the registry. If you’re in a large Active Directory environment, the
    execution policy can also be set across many computers at once by using Group
    Policy.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行此命令时，很可能会得到 `Restricted`。为了本书的目的，你将把执行策略更改为 `RemoteSigned`。这将允许你运行任何你编写的脚本，同时确保你仅使用来自受信任来源的外部脚本。要更改执行策略，请使用
    `Set-ExecutionPolicy` 命令并传入你想要的策略，如 [Listing 3-10](ch03.xhtml#ch3list10) 所示。请注意，你需要以管理员身份运行此命令（有关以管理员身份运行命令的更多信息，请参见
    [第 1 章](ch01.xhtml#ch1)）。你只需要执行一次此命令，因为设置会保存在注册表中。如果你在一个大型的 Active Directory 环境中，还可以通过组策略将执行策略设置到多个计算机上。
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*Listing 3-10: Changing your execution policy with the `Set-ExecutionPolicy`
    command*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 3-10：使用 `Set-ExecutionPolicy` 命令更改执行策略*'
- en: Run the `Get-ExecutionPolicy` command again in order to verify that you successfully
    changed the policy to `RemoteSigned`. As I said previously, you won’t need to
    set the execution policy every time you open PowerShell. The policy will stay
    at `RemoteSigned` until you want to change it again.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行 `Get-ExecutionPolicy` 命令，以验证你是否成功将策略更改为 `RemoteSigned`。如前所述，你不需要每次打开 PowerShell
    时都设置执行策略。策略将保持在 `RemoteSigned`，直到你决定再次更改它。
- en: SCRIPT SIGNING
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本签名
- en: 'A *script signature* is an encrypted string appended to the end of the script
    as a comment; these signatures are generated by a certificate installed on your
    computer. When you set your policy to `AllSigned` or `RemoteSigned`, you will
    be able to run only those scripts that are properly signed. Signing a source lets
    PowerShell know that the script’s source is reliable and that the author of the
    script is who they say they are. A script signature looks something like this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*脚本签名* 是附加在脚本末尾的加密字符串，作为注释存在；这些签名是通过安装在你电脑上的证书生成的。当你将策略设置为 `AllSigned` 或 `RemoteSigned`
    时，你将只能运行那些正确签名的脚本。签名源代码让 PowerShell 知道脚本的来源是可靠的，并且脚本作者确实如他们所说的那样。一个脚本签名看起来大致如下：'
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You should sign any script that you’re creating and executing in a professional
    environment. I won’t go into how to do that here, but one of the best resources
    I’ve found to explain this concept is the article series “PowerShell Basics—Execution
    Policy and Code Signing” by Carlos Perez, a popular security guru, which you can
    find at *[https://www.darkoperator.com/blog/2013/3/5/powershell-basics-execution-policy-part-1.html](https://www.darkoperator.com/blog/2013/3/5/powershell-basics-execution-policy-part-1.html)*.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该签名任何你在专业环境中创建和执行的脚本。我在这里不会详细讲解如何做，但我找到的最好的资源之一是 Carlos Perez（著名安全专家）写的文章系列《PowerShell
    基础——执行策略和代码签名》，你可以在 *[https://www.darkoperator.com/blog/2013/3/5/powershell-basics-execution-policy-part-1.html](https://www.darkoperator.com/blog/2013/3/5/powershell-basics-execution-policy-part-1.html)*
    中找到。
- en: Scripting in PowerShell
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: PowerShell 脚本编写
- en: Now that your execution policy is set, it’s time to write a script and execute
    it in the console. You can write PowerShell scripts in any text editor you like
    (Emacs, Vim, Sublime Text, Atom—even Notepad), but the most convenient way to
    write PowerShell scripts is by using the PowerShell Integrated Scripting Environment
    (ISE) or Microsoft’s Visual Studio Code editor. Technically, the ISE is deprecated,
    but it comes preinstalled with Windows so it will probably be the first editor
    you discover.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，执行策略已设置完成，是时候编写脚本并在控制台中执行它了。你可以在任何文本编辑器中编写 PowerShell 脚本（如 Emacs、Vim、Sublime
    Text、Atom，甚至 Notepad），但编写 PowerShell 脚本的最便捷方式是使用 PowerShell 集成脚本环境（ISE）或 Microsoft
    的 Visual Studio Code 编辑器。从技术上讲，ISE 已被弃用，但它随 Windows 一起预安装，因此它可能是你最先发现的编辑器。
- en: Using the PowerShell ISE
  id: totrans-79
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用 PowerShell ISE
- en: To start the PowerShell ISE, run the command in [Listing 3-11](ch03.xhtml#ch3list11).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动 PowerShell ISE，运行 [Listing 3-11](ch03.xhtml#ch3list11) 中的命令。
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '*Listing 3-11: Opening the PowerShell ISE*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 3-11：打开 PowerShell ISE*'
- en: An interactive console screen that looks like [Figure 3-2](ch03.xhtml#ch3fig2)
    should open up.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一个看起来像 [图 3-2](ch03.xhtml#ch3fig2) 的交互式控制台界面应该会打开。
- en: '![Image](../images/03fig02.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/03fig02.jpg)'
- en: '*Figure 3-2: The PowerShell ISE*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-2：PowerShell ISE 界面*'
- en: To add a script, click **File ▶ New**. The screen should split, with a white
    panel opening above the console, as in [Figure 3-3](ch03.xhtml#ch3fig3).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加脚本，点击 **文件 ▶ 新建**。屏幕应分为两部分，控制台上方会出现一个白色面板，如[图 3-3](ch03.xhtml#ch3fig3)所示。
- en: '![Image](../images/03fig03.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/03fig03.jpg)'
- en: '*Figure 3-3: The PowerShell ISE with a script opened*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-3：打开脚本的 PowerShell ISE 界面*'
- en: 'Click **File ▶ Save** and save the new file as *WriteHostExample.ps1*. I’ll
    save my script at the root of my C: drive, so it’s located at *C:\WriteHostExample.ps1*.
    Notice that you save your script with the extension *.ps1*; this extension tells
    your system that the file is a PowerShell script.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '点击 **文件 ▶ 保存**，将新文件保存为 *WriteHostExample.ps1*。我将我的脚本保存在 C: 盘的根目录下，所以它的位置是 *C:\WriteHostExample.ps1*。注意，你需要以
    *.ps1* 扩展名保存脚本；这个扩展名告诉你的系统该文件是一个 PowerShell 脚本。'
- en: You’ll be entering all the text for your script in the white panel. The PowerShell
    ISE allows you to edit and run the script in the same window, which can save you
    a lot of annoying back and forth as you’re editing. The PowerShell ISE has many
    more features, although I won’t cover them here.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在白色面板中输入脚本的所有文本。PowerShell ISE 允许你在同一个窗口中编辑并运行脚本，这样在编辑时可以节省大量繁琐的反复操作。PowerShell
    ISE 还有许多其他功能，尽管我在这里不会介绍它们。
- en: PowerShell scripts are simple text files. It doesn’t matter which text editor
    you use, so long as you use the correct PowerShell syntax.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 脚本是简单的文本文件。你使用哪个文本编辑器并不重要，只要使用正确的 PowerShell 语法即可。
- en: Writing Your First Script
  id: totrans-92
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 编写你的第一个脚本
- en: Using whatever editor you like, add the line in [Listing 3-12](ch03.xhtml#ch3list12)
    to your script.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你喜欢的编辑器，将 [列表 3-12](ch03.xhtml#ch3list12) 中的那一行添加到你的脚本中。
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '*Listing 3-12: The first line in your script*'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 3-12：脚本中的第一行*'
- en: Notice there’s no `PS>` at the start of the line. From here on out, that’s how
    you’ll know whether we’re working in the console or writing in a script.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，行首没有 `PS>`。从现在开始，这就是你判断我们是在控制台中操作还是在编写脚本的方式。
- en: To run this script, head over to your console and type the path to your script,
    as in [Listing 3-13](ch03.xhtml#ch3list13).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行此脚本，请前往控制台并键入脚本的路径，如 [列表 3-13](ch03.xhtml#ch3list13) 所示。
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '*Listing 3-13: Executing* WriteHostExample.ps1 *in the console*'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 3-13：在控制台中执行* WriteHostExample.ps1 *'
- en: 'Here, you use the full path to run *WriteHostExample.ps1*. If you’re already
    in the directory containing the script you want to run, you can use a dot to indicate
    the current working directory, like so: `.\WriteHostExample.ps1`.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你使用完整路径运行 *WriteHostExample.ps1*。如果你已经位于包含要运行脚本的目录中，可以使用点符号表示当前工作目录，如：`.\WriteHostExample.ps1`。
- en: Congratulations, that’s it—you’ve created your first script! It might not look
    like much, but it’s a big step in the right direction. By the end of this book,
    you’ll be defining your own PowerShell modules in scripts with hundreds of lines.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，这就完成了——你已经创建了第一个脚本！它可能看起来不算什么，但这是朝正确方向迈出的重要一步。在本书结束时，你将能够在脚本中定义自己的 PowerShell
    模块，甚至包含数百行代码。
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, you learned two valuable methods to combine commands: the
    pipeline and scripts. You also saw how to change your execution policy, and demystified
    some of the magic behind the pipeline by looking at parameter binding. We’ve laid
    the foundation for creating more-powerful scripts, but we need to cover a few
    more key concepts before we get there. In [Chapter 4](ch04.xhtml#ch4), you’ll
    learn how to make your code considerably more robust by using control flow structures
    such as `if/then` statements and `for` loops.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了两种将命令组合在一起的有价值的方法：管道和脚本。你还了解了如何更改执行策略，并通过查看参数绑定来揭示管道背后的某些奥秘。我们为创建更强大的脚本打下了基础，但在我们进入下一步之前，还需要涵盖一些关键概念。在[第
    4 章](ch04.xhtml#ch4)中，你将学习如何通过使用控制流结构，如 `if/then` 语句和 `for` 循环，使代码更加健壮。
