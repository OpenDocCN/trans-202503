- en: D
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FURTHER READING
  prefs: []
  type: TYPE_NORMAL
- en: This appendix contains a list of references and suggestions for further reading
    on binary analysis. I’ve grouped these suggestions into standards and references,
    papers and articles, and books. Although this list is by no means exhaustive,
    it should serve as a good first step for delving further into the world of binary
    analysis.
  prefs: []
  type: TYPE_NORMAL
- en: D.1 Standards and References
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: • *DWARF Debugging Information Format Version 4*. Available at *[http://www.dwarfstd.org/doc/DWARF4.pdf](http://www.dwarfstd.org/doc/DWARF4.pdf)*.
  prefs: []
  type: TYPE_NORMAL
- en: The DWARF v4 debugging format specification.
  prefs: []
  type: TYPE_NORMAL
- en: • *Executable and Linkable Format (ELF)*. Available at *[http://www.skyfree.org/linux/references/ELF_Format.pdf](http://www.skyfree.org/linux/references/ELF_Format.pdf)*.
  prefs: []
  type: TYPE_NORMAL
- en: The ELF binary format specification.
  prefs: []
  type: TYPE_NORMAL
- en: • *Intel 64 and IA-32 Architectures Software Developer Manuals*. Available at
    *[https://software.intel.com/en-us/articles/intel-sdm](https://software.intel.com/en-us/articles/intel-sdm)*.
  prefs: []
  type: TYPE_NORMAL
- en: The Intel x86/x64 manual. Contains in-depth descriptions of the entire instruction
    set.
  prefs: []
  type: TYPE_NORMAL
- en: • *The PDB File Format*. Available at *[https://llvm.org/docs/PDB/index.html](https://llvm.org/docs/PDB/index.html)*.
  prefs: []
  type: TYPE_NORMAL
- en: Unofficial documentation of the PDB debugging format by the LLVM project (based
    on information released by Microsoft at *[https://github.com/Microsoft/microsoft-pdb](https://github.com/Microsoft/microsoft-pdb)*).
  prefs: []
  type: TYPE_NORMAL
- en: • *PE Format Specification*. Available at *[https://msdn.microsoft.com/en-us/library/windows/desktop/ms680547(v=vs.85).aspx](https://msdn.microsoft.com/en-us/library/windows/desktop/ms680547(v=vs.85).aspx)*.
  prefs: []
  type: TYPE_NORMAL
- en: A specification of the PE format on MSDN.
  prefs: []
  type: TYPE_NORMAL
- en: • *System V Application Binary Interface*. Available at *[https://software.intel.com/sites/default/files/article/402129/mpx-linux64-abi.pdf](https://software.intel.com/sites/default/files/article/402129/mpx-linux64-abi.pdf)*.
  prefs: []
  type: TYPE_NORMAL
- en: Specification of the x64 System V ABI.
  prefs: []
  type: TYPE_NORMAL
- en: D.2 Papers and Articles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: • Baldoni, R., Coppa, E., D’Elia, D. C., Demetrescu, C., and Finocchi, I. (2017).
    A Survey of Symbolic Execution Techniques. Available at *[https://arxiv.org/pdf/1610.00502.pdf](https://arxiv.org/pdf/1610.00502.pdf)*.
  prefs: []
  type: TYPE_NORMAL
- en: A survey paper on symbolic execution techniques.
  prefs: []
  type: TYPE_NORMAL
- en: • Barrett, C., Sebastiani, R., Seshia, S. A., and Tinelli, C. (2008). Satisfiability
    modulo theories. In *Handbook of Satisfiability*, chapter 12\. IOS Press. Available
    at *[https://people.eecs.berkeley.edu/~sseshia/pubdir/SMT-BookChapter.pdf](https://people.eecs.berkeley.edu/~sseshia/pubdir/SMT-BookChapter.pdf)*.
  prefs: []
  type: TYPE_NORMAL
- en: A book chapter on Satisfiability Modulo Theories (SMT).
  prefs: []
  type: TYPE_NORMAL
- en: • Cha, S. K., Avgerinos, T., Rebert, A., and Brumley, D. (2012). Unleashing
    Mayhem on Binary Code. In *Proceedings of the IEEE Symposium on Security and Privacy*,
    SP’12\. Available at *[https://users.ece.cmu.edu/~dbrumley/pdf/Cha%20et%20al._2012_Unleashing%20Mayhem%20on%20Binary%20Code.pdf](https://users.ece.cmu.edu/~dbrumley/pdf/Cha%20et%20al._2012_Unleashing%20Mayhem%20on%20Binary%20Code.pdf)*.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic exploit generation for stripped binaries using symbolic execution.
  prefs: []
  type: TYPE_NORMAL
- en: '• Dullien, T. and Porst, S. (2009). REIL: A Platform-Independent Intermediate
    Representation of Disassembled Code for Static Code Analysis. In *Proceedings
    of CanSecWest*. Available at *[https://www.researchgate.net/publication/228958277](https://www.researchgate.net/publication/228958277)*.'
  prefs: []
  type: TYPE_NORMAL
- en: A paper on the REIL intermediate language.
  prefs: []
  type: TYPE_NORMAL
- en: '• Kemerlis, V. P., Portokalidis, G., Jee, K., and Keromytis, A. D. (2012).
    libdft: Practical Dynamic Data Flow Tracking for Commodity Systems. In *Proceedings
    of the Conference on Virtual Execution Environments*, VEE’12\. Available at *[http://nsl.cs.columbia.edu/papers/2012/libdft.vee12.pdf](http://nsl.cs.columbia.edu/papers/2012/libdft.vee12.pdf)*.'
  prefs: []
  type: TYPE_NORMAL
- en: The original paper on the `libdft` dynamic taint analysis library.
  prefs: []
  type: TYPE_NORMAL
- en: • Kolsek, M. (2017). Did Microsoft Just Manually Patch Their Equation Editor
    Executable? Why Yes, Yes They Did. (CVE-2017-11882). Available at *[https://blog.0patch.com/2017/11/did-microsoft-just-manually-patch-their.html](https://blog.0patch.com/2017/11/did-microsoft-just-manually-patch-their.html)*.
  prefs: []
  type: TYPE_NORMAL
- en: An article describing how Microsoft fixed a software vulnerability with a likely
    handwritten binary patch.
  prefs: []
  type: TYPE_NORMAL
- en: • Link Time Optimization (`gcc` wiki entry). Available at *[https://gcc.gnu.org/wiki/LinkTimeOptimization](https://gcc.gnu.org/wiki/LinkTimeOptimization)*.
  prefs: []
  type: TYPE_NORMAL
- en: An article about link-time optimization (LTO) on the `gcc` wiki. Contains links
    to other relevant articles on LTO.
  prefs: []
  type: TYPE_NORMAL
- en: '• LLVM Link Time Optimization: Design and Implementation. Available at *[https://llvm.org/docs/LinkTimeOptimization.html](https://llvm.org/docs/LinkTimeOptimization.html)*.'
  prefs: []
  type: TYPE_NORMAL
- en: An article about LTO in the LLVM project.
  prefs: []
  type: TYPE_NORMAL
- en: '• Luk, C.-K., Cohn, R., Muth, R., Patil, H., Klauser, A., Lowney, G., Wallace,
    S., Reddi, V. J., and Hazelwood, K. (2005). Pin: Building Customized Program Analysis
    Tools with Dynamic Instrumentation. In *Proceedings of the Conference on Programming
    Language Design and Implementation*, PLDI’05\. Available at *[http://gram.eng.uci.edu/students/swallace/papers_wallace/pdf/PLDI-05-Pin.pdf](http://gram.eng.uci.edu/students/swallace/papers_wallace/pdf/PLDI-05-Pin.pdf)*.'
  prefs: []
  type: TYPE_NORMAL
- en: The original paper on Intel Pin.
  prefs: []
  type: TYPE_NORMAL
- en: '• Pietrek, M. (1994). Peering Inside the PE: A Tour of the Win32 Portable Executable
    File Format. Available at *[https://msdn.microsoft.com/en-us/library/ms809762.aspx](https://msdn.microsoft.com/en-us/library/ms809762.aspx)*.'
  prefs: []
  type: TYPE_NORMAL
- en: A detailed (albeit dated) article on the intricacies of the PE format.
  prefs: []
  type: TYPE_NORMAL
- en: '• Rolles, R. (2016). Synesthesia: A Modern Approach to Shellcode Generation.
    Available at *[http://www.msreverseengineering.com/blog/2016/11/8/synesthesia-modern-shellcode-synthesis-ekoparty-2016-talk/](http://www.msreverseengineering.com/blog/2016/11/8/synesthesia-modern-shellcode-synthesis-ekoparty-2016-talk/)*.'
  prefs: []
  type: TYPE_NORMAL
- en: A symbolic execution–based approach for automatically generating shellcode.
  prefs: []
  type: TYPE_NORMAL
- en: • Schwartz, E. J., Avgerinos, T., and Brumley, D. (2010). All You Ever Wanted
    to Know About Dynamic Taint Analysis and Forward Symbolic Execution (But Might
    Have Been Afraid to Ask). In *Proceedings of the IEEE Symposium on Security and
    Privacy*, SP’10\. Available at *[https://users.ece.cmu.edu/~aavgerin/papers/Oakland10.pdf](https://users.ece.cmu.edu/~aavgerin/papers/Oakland10.pdf)*.
  prefs: []
  type: TYPE_NORMAL
- en: An in-depth paper on the implementation details and pitfalls of dynamic taint
    analysis and symbolic execution.
  prefs: []
  type: TYPE_NORMAL
- en: '• Slowinska, A., Stancescu, T., and Bos, H. (2011). Howard: A Dynamic Excavator
    for Reverse Engineering Data Structures. In *Proceedings of the Network and Distributed
    Systems Security Symposium*, NDSS’11\. Available at *[https://www.isoc.org/isoc/conferences/ndss/11/pdf/5_1.pdf](https://www.isoc.org/isoc/conferences/ndss/11/pdf/5_1.pdf)*.'
  prefs: []
  type: TYPE_NORMAL
- en: A paper describing an approach to automatic reverse engineering of data structures.
  prefs: []
  type: TYPE_NORMAL
- en: • Yason, M. V. (2007). The art of unpacking. In *BlackHat USA*. Available at
    *[https://www.blackhat.com/presentations/bh-usa-07/Yason/Whitepaper/bh-usa-07-yason-WP.pdf](https://www.blackhat.com/presentations/bh-usa-07/Yason/Whitepaper/bh-usa-07-yason-WP.pdf)*.
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to binary unpacking techniques.
  prefs: []
  type: TYPE_NORMAL
- en: D.3 Books
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '• Collberg, C. and Nagra, J. (2009). *Surreptitious Software: Obfuscation,
    Watermarking, and Tamperproofing for Software Protection*. Addison-Wesley Professional.'
  prefs: []
  type: TYPE_NORMAL
- en: A thorough overview of software (de)obfuscation, watermarking, and tamperproofing
    techniques.
  prefs: []
  type: TYPE_NORMAL
- en: '• Eagle, C. (2011). *The IDA Pro Book: The Unofficial Guide to the World’s
    Most Popular Disassembler (2nd edition)*. No Starch Press.'
  prefs: []
  type: TYPE_NORMAL
- en: A complete book dedicated to disassembling binaries with IDA Pro.
  prefs: []
  type: TYPE_NORMAL
- en: '• Eilam, E. (2005). *Reversing: Secrets of Reverse Engineering*. John Wiley
    & Sons, Inc.'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to manually reversing binaries (focusing on Windows).
  prefs: []
  type: TYPE_NORMAL
- en: '• Sikorski, M. and Honig, A. (2012). *Practical Malware Analysis: The Hands-On
    Guide to Dissecting Malicious Software*. No Starch Press.'
  prefs: []
  type: TYPE_NORMAL
- en: A comprehensive introduction to malware analysis.
  prefs: []
  type: TYPE_NORMAL
