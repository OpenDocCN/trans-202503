- en: '**12**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**12**'
- en: '**2D TRANSFORMATIONS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**2D 变换**'
- en: '![Image](graphics/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/common-01.jpg)'
- en: Because of the way HTML works, with each element composed of rectangular blocks
    and right-angled corners, web pages have traditionally appeared boxy, with lots
    of straight horizontal and vertical lines, and the only way to provide any variation
    to this rule was to use images. But back in 2008, the WebKit team proposed a new
    module that allows elements to be rotated, scaled, skewed, and generally messed
    around with. This module was adopted for standardization by the W3C and formalized
    as the 2D Transformations Module (*[http://www.w3.org/TR/css3-2d-transforms/](http://www.w3.org/TR/css3-2d-transforms/)*).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于HTML的工作方式，每个元素都是由矩形块和直角构成的，网页通常显得很方正，有很多直的水平和垂直线，唯一能打破这种规则的方法就是使用图片。但早在2008年，WebKit团队提出了一个新模块，允许元素进行旋转、缩放、倾斜等各种操作。该模块被W3C采纳并正式化为2D变换模块（*[http://www.w3.org/TR/css3-2d-transforms/](http://www.w3.org/TR/css3-2d-transforms/)*）。
- en: Much of the process for transforming elements was adapted from functions in
    the *Scalable Vector Graphics (SVG)* language, which is used for drawing two-dimensional
    vector images. SVG is supported by most modern browsers, so Firefox and Opera
    were quick to implement 2D Transformations in their own products, and IE9 followed
    along shortly.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 变换元素的大部分过程是从*可缩放矢量图形（SVG）*语言中的函数借鉴而来的，SVG用于绘制二维矢量图像。大多数现代浏览器都支持SVG，因此Firefox和Opera迅速在自己的产品中实现了2D变换，IE9也很快跟进。
- en: The transformation properties for CSS and SVG were so similar, in fact, that
    the W3C decided to merge them into a single common specification, CSS Transforms
    (*[http://dev.w3.org/csswg/css-transforms/](http://dev.w3.org/csswg/css-transforms/)*),
    which is where work on the module continues today. The long and the short of this
    story is that, although the CSS Transforms module is still only a Working Draft,
    the properties within it are well implemented, and you can start using these new
    features right away.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: CSS和SVG的变换属性非常相似，事实上，W3C决定将它们合并为一个共同的规范——CSS变换（*[http://dev.w3.org/csswg/css-transforms/](http://dev.w3.org/csswg/css-transforms/)*），这就是该模块今天仍在继续工作的地方。简而言之，尽管CSS变换模块仍然只是一个工作草案，但其中的属性已经得到很好的实现，您可以立即开始使用这些新特性。
- en: 'One thing to note before I introduce the syntax: By the end of this chapter,
    I’ll have introduced some fairly complex functions, so you might want to brush
    up on your trigonometry. Are you nervous? Don’t worry; I’ll make it as painless
    as possible.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我介绍语法之前，有一点需要注意：在本章结束时，我将介绍一些相当复杂的函数，因此您可能需要复习一下三角学。你紧张吗？别担心，我会尽量让它变得简单易懂。
- en: '**The transform Property**'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**transform属性**'
- en: 'A range of different transformations can be applied, but all are declared as
    functions in the `transform` property. Here’s the basic syntax:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 可以应用各种不同的变换，但所有变换都作为`transform`属性中的函数声明。以下是基本语法：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A number of possible functions are available; I’ll explore each in turn throughout
    the rest of this chapter. Each function takes either a single value or a comma-separated
    list of values. I’ll also explain what this means when I discuss each function
    individually.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多可用的函数；我将在本章的其余部分依次介绍每个函数。每个函数都接受一个单独的值或一个用逗号分隔的值列表。当我分别讨论每个函数时，我也会解释这意味着什么。
- en: 'You can apply multiple transformations to a single element by simply listing
    functions, space-separated, in the `transform` property:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在`transform`属性中简单地列出多个函数（以空格分隔）来应用多个变换到单个元素：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You need to be aware of one very important caveat when using the `transform`
    property, but before I talk about that, I need to introduce the various functions.
    I urge you, however, to not skip “[An Important Note About Transformation Functions](ch12.html#ch12leve1sec146)”
    on [page 144](ch12.html#page_144).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`transform`属性时，您需要注意一个非常重要的警告，但在我谈论这个之前，我需要介绍各种函数。然而，我强烈建议您不要跳过在[第144页](ch12.html#page_144)上的“[关于变换函数的重要说明](ch12.html#ch12leve1sec146)”。
- en: '***rotate***'
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***rotate***'
- en: 'Probably the simplest of all the functions is `rotate()`, which does what it
    sounds like it should do: It rotates the element around a set point. Here’s the
    syntax:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所有函数中可能最简单的就是`rotate()`，它做的正如字面意思所示：它围绕某一点旋转元素。以下是语法：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `*value*` here is a single angle value, just like you used with the CSS
    gradients introduced in [Chapter 11](ch11.html#ch11). And, as in that chapter,
    I’m sticking with the commonly understood degrees (`deg`) unit for my examples.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的`*value*`是一个单一的角度值，就像你在[第11章](ch11.html#ch11)中使用CSS渐变时一样。而且，像在那一章中一样，我的示例仍然采用通常理解的角度单位（`deg`）。
- en: 'To show you `rotate()` in action, I’ll rotate an `h2` element by −15 degrees
    (or 345 degrees) using this rule:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向你展示`rotate()`的效果，我将使用这个规则将`h2`元素旋转-15度（或345度）：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**BROWSER SUPPORT FOR 2D TRANSFORMATIONS**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**浏览器对2D变换的支持**'
- en: 'As I mentioned in the beginning of the chapter, browser support for 2D transforms
    is pretty widespread, although not all browsers support the `transform` property
    without a vendor prefix. IE9, Safari, and older versions of the Android browser
    all require a prefix, which means that to use this property currently, you have
    to specify it three times:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在本章开始时提到的，浏览器对2D变换的支持已经相当普及，尽管并非所有浏览器都支持没有厂商前缀的`transform`属性。IE9、Safari和较老版本的Android浏览器都需要前缀，这意味着目前要使用这个属性，你必须指定三次：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can see how this example displays in [Figure 12-1](ch12.html#ch12fig1).
    Note that I positioned another `h2` element with a light gray background in the
    same place as the first one so you can compare the rotated element with the default
    (nonrotated) element. I’ll do the same for most examples in this chapter.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图12-1](ch12.html#ch12fig1)中看到这个示例的展示效果。请注意，我将另一个背景为浅灰色的`h2`元素放置在与第一个元素相同的位置，这样你可以比较旋转后的元素和默认（未旋转）元素。我将在本章的大多数示例中使用相同的方法。
- en: '![Image](graphics/f12-01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f12-01.jpg)'
- en: '*Figure 12-1: An element rotated by −15 degrees*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-1：一个旋转了-15度的元素*'
- en: '**Position in Document Flow**'
  id: totrans-26
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**文档流中的位置**'
- en: 'An important point to make before I move on: Transformed elements only affect
    visual rendering of the page, not document layout. The element itself retains
    its place in the document flow, so all subsequent elements are affected by it
    and its margin and padding. The transformed element does not affect the page layout
    but appears as if it were in a new layer above the rest of the page, which means
    it can cover subsequent elements.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我继续之前，有一个重要的点需要说明：变换后的元素仅影响页面的视觉呈现，而不影响文档布局。该元素本身仍然保留在文档流中，因此所有后续的元素都会受到它的影响，包括它的边距和内边距。变换后的元素不会影响页面布局，但看起来像是置于页面其他部分之上的新层，这意味着它可能会覆盖随后的元素。
- en: 'To illustrate what I mean, I’ll rotate another element, but this time flow
    some text under it so you can see the effect of the transformation. Here’s the
    code to rotate the element:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明我的意思，我将再旋转一个元素，这次在其下方加上一些文本，方便你看到变换效果。这里是旋转元素的代码：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[Figure 12-2](ch12.html#ch12fig2) shows the results of this transformation,
    along with an untransformed reference. Both examples are identical, but for the
    applied `rotate()` function. You can clearly see the rotated element covers the
    text under it, which immediately follows the non-transformed element in the layout.
    This same rule applies to any element that has the `transform` property applied
    to it, so be aware of this going forward.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[图12-2](ch12.html#ch12fig2)展示了这个变换的结果，以及一个未变换的参考。两个示例是完全相同的，只是应用了`rotate()`函数。你可以清楚地看到，旋转后的元素覆盖了其下方的文本，而这些文本紧随未变换的元素之后出现在布局中。这个规则适用于任何应用了`transform`属性的元素，因此在继续操作时要注意这一点。'
- en: '![Image](graphics/f12-02.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f12-02.jpg)'
- en: '*Figure 12-2: The effect of a transformed element on the document flow*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-2：变换元素对文档流的影响*'
- en: '**transform-origin**'
  id: totrans-33
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**transform-origin**'
- en: The *origin* of a transformation is the point on an element about which that
    transformation happens. This concept is easiest to illustrate using `rotate()`,
    although you can apply it to any of the transformation functions introduced throughout
    the rest of this chapter.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 变换的*原点*是元素上进行变换的那个点。这个概念最容易通过`rotate()`来说明，尽管你可以将其应用到本章后面介绍的任何变换函数。
- en: In the case of `rotate()`, you can visualize the origin by imagining you have
    a piece of paper (the element) and a pin (the origin of that element). If you
    use the pin to stick the paper to a flat surface, you can rotate the paper around
    the pin. By sticking the pin in different places on the paper, you can change
    how the rotation happens—if the pin is stuck in the center of the paper, the rotation
    has a short radius, and the paper on either side of the pin moves equally; if
    the pin is placed at one edge, the whole length of the paper rotates around it.
    [Figure 12-3](ch12.html#ch12fig3) illustrates how this might look.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`rotate()`，你可以通过想象你有一张纸（元素）和一个针（元素的原点）来直观地理解原点。如果你用针把纸固定在一个平面上，你就可以围绕针旋转纸张。通过将针固定在纸上的不同位置，你可以改变旋转的方式——如果针固定在纸的中心，旋转半径较短，纸张两侧的移动相等；如果针固定在纸的边缘，整个纸张会围绕针旋转。[图12-3](ch12.html#ch12fig3)展示了这种情况。
- en: '![Image](graphics/f12-03.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f12-03.jpg)'
- en: '*Figure 12-3: Rotating a sheet of paper around a pin: Moving the pin changes
    the point of rotation.*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-3：围绕针旋转纸张：移动针的位置会改变旋转点。*'
- en: 'The default point of origin in the CSS `transform` property is the element’s
    horizontal and vertical center. You can change this using the `transform-origin`
    property:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: CSS `transform`属性的默认原点是元素的水平和垂直中心。你可以通过`transform-origin`属性来更改它：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `*value*` for this property is either one or two length, percentage, or
    keyword values. Lengths can be any accepted CSS unit (em, px, and so on). The
    keywords are `left`, `right`, `top`, `bottom`, and `center`. If two values are
    supplied, the first sets the horizontal point and the second sets the vertical;
    if only one is supplied, that point sets the horizontal, with the vertical presumed
    to be `center` (or 50 percent).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性的`*value*`可以是一个或两个长度、百分比或关键字值。长度可以是任何接受的CSS单位（em、px等）。关键字有`left`、`right`、`top`、`bottom`和`center`。如果提供两个值，第一个设置水平点，第二个设置垂直点；如果只提供一个值，该点设置为水平点，垂直点默认为`center`（或50%）。
- en: 'So if you want to change the point of origin to the top-left corner, you can
    use either of the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你想将原点更改为左上角，可以使用以下任意值：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And if you want the point of origin to be the bottom-right corner, you can
    use these values (let’s say the element has a `height` of 50px and a width of
    200px):'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将原点设置为右下角，可以使用这些值（假设元素的`height`为50px，宽度为200px）：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let me demonstrate the effects of changing the origin of transformation. This
    example shows three identical elements with the same `transform` property applied
    to each but with a different `transform-origin` value:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我展示一下改变变换原点的效果。这个例子展示了三个相同的元素，每个元素都有相同的`transform`属性，但`transform-origin`值不同：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can see the effects on the three examples in [Figure 12-4](ch12.html#ch12fig4).
    The first example uses the default values (`center center`), so the element rotates
    around the absolute center. The second example uses values of `left center`, so
    the element rotates around the vertical center of the left-hand side. And the
    third example uses values of `100% 50%`, so the element rotates around the vertical
    center of the right-hand side.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图12-4](ch12.html#ch12fig4)中看到这三种例子的效果。第一个例子使用默认值（`center center`），因此元素围绕绝对中心旋转。第二个例子使用`left
    center`的值，因此元素围绕左侧的垂直中心旋转。第三个例子使用`100% 50%`的值，因此元素围绕右侧的垂直中心旋转。
- en: '![Image](graphics/f12-04.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f12-04.jpg)'
- en: '*Figure 12-4: Different* `*transform-origin*` *values on a rotated element*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-4：不同的* `*transform-origin*` *值对旋转元素的影响*'
- en: '***translate***'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***translate***'
- en: 'The next function we’ll look at is `translate`, which moves the element from
    its default position along the horizontal or vertical axes (if you need a refresher,
    refer to “[Understanding Axes and Coordinates](ch06.html#ch06leve1sec69)” on [page
    64](ch06.html#page_64)). Movement along the horizontal axis is controlled with
    the `translateX()` function and along the vertical axis with `translateY()`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们要讲解的函数是`translate`，它将元素从默认位置沿水平或垂直轴移动（如果你需要复习，请参考[第6章“理解轴和坐标”](ch06.html#ch06leve1sec69)，[第64页](ch06.html#page_64)）。沿水平轴的移动由`translateX()`函数控制，沿垂直轴的移动由`translateY()`函数控制：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Each of these two functions, `translateX()` and `translateY()`, moves the element
    along the appropriate axis for the length that you specify. You can use any length
    units or percentage values here, so, for example, you could have:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个函数`translateX()`和`translateY()`分别沿着指定的轴移动元素，并且根据你指定的长度进行移动。你可以在这里使用任何长度单位或百分比值，例如，你可以使用：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This code moves the element 20px to the right (along the *x*-axis) and 15 percent
    of its own height down (along the *y*-axis). You can see this result in [Figure
    12-5](ch12.html#ch12fig5).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将元素向右移动20px（沿* x *轴）并将其自身高度的15%向下移动（沿* y *轴）。你可以在[图12-5](ch12.html#ch12fig5)中看到这个结果。
- en: '![Image](graphics/f12-05.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f12-05.jpg)'
- en: '*Figure 12-5: An element positively translated along both axes*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-5：元素沿两个轴正向平移*'
- en: You can also use negative values in the `translate` functions, which moves the
    element in the opposite direction along the axis—that is, up or to the left.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在`translate`函数中使用负值，这会使元素沿着轴的相反方向移动——也就是说，向上或向左。
- en: '**NOTE**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*You might think translating elements seems similar to using relative positioning
    and the* `*left*` *and* `*top*` *properties, but remember that the transformed
    element retains its position in the document flow and only* appears *to have moved;
    the visual rendering of the element is transformed, not the element itself.*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可能认为平移元素与使用相对定位以及`*left*`和`*top*`属性类似，但请记住，转换后的元素仍然保留在文档流中，只是*看起来*像是移动了；元素的视觉渲染被转换了，而不是元素本身。*'
- en: '**The translate() Shorthand Function**'
  id: totrans-61
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**translate()简写函数**'
- en: 'A more convenient way to move elements along both axes like this is to use
    the shorthand function, `translate()`. This function accepts up to two values
    in a comma-separated list:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 更方便地沿两个轴移动元素的方法是使用简写函数`translate()`。该函数接受一个以逗号分隔的最多两个值：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'That being the case, you could replicate the transformation shown in [Figure
    12-5](ch12.html#ch12fig5) using the shorthand function with two arguments:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于此，你可以使用简写函数和两个参数来复制[图12-5](ch12.html#ch12fig5)中所示的转换：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And you are allowed to use only one value with the `translate()` shorthand:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以只使用一个值来使用`translate()`简写：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In this case, the value provided is presumed to be the `translateX()` value,
    and a value of `0` (zero) is used for `translateY()`. So both of the following
    declarations are equivalent:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，提供的值被认为是`translateX()`的值，而`translateY()`则使用`0`（零）。因此，以下两种声明是等价的：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Using the translate() Function**'
  id: totrans-70
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**使用translate()函数**'
- en: 'To illustrate how the `translate()` shorthand function works, here are two
    more examples:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明`translate()`简写函数的工作原理，下面是两个示例：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You can see the results of this code displayed in [Figure 12-6](ch12.html#ch12fig6),
    again with elements in a lighter gray showing the original position.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图12-6](ch12.html#ch12fig6)中看到这段代码的结果，元素以浅灰色显示，表示原始位置。
- en: '![Image](graphics/f12-06.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f12-06.jpg)'
- en: '*Figure 12-6: Elements showing effects of different values in the* `*translate()*`
    *function*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-6：元素显示`*translate()*`函数不同值的效果*'
- en: In the first example, the `translate()` function has an initial argument of
    −20px and a second of 20px, so the element is translated 20px negatively on the
    horizontal axis (to the left) and 20px positively on the vertical axis (to the
    bottom). The second example has the opposite arguments, so the element is moved
    positively on the horizontal axis (to the right) and negatively on the vertical
    axis (to the top).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个示例中，`translate()`函数的第一个参数是−20px，第二个参数是20px，因此元素在水平方向上负向平移20px（向左），在垂直方向上正向平移20px（向下）。第二个示例的参数相反，因此元素在水平方向上正向平移（向右），在垂直方向上负向平移（向上）。
- en: '***scale***'
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***缩放***'
- en: 'You can make an element larger or smaller than the original by using `scale`
    functions. As with the `translate` functions, each of the horizontal and vertical
    values has a function, called `scaleX()` and `scaleY()`, respectively:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`scale`函数将元素的大小调整为比原始尺寸更大或更小。与`translate`函数一样，水平方向和垂直方向各自有一个函数，分别称为`scaleX()`和`scaleY()`：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `value`s for `scaleX()` and `scaleY()` are unitless numbers, which give
    a size ratio. The default size is 1; twice the default is 2, half the default
    is 0.5, and so on. You can also use negative numbers—I’ll explain the effect of
    negative numbers shortly.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`scaleX()`和`scaleY()`的`value`是无单位的数字，表示大小比率。默认大小为1；两倍于默认值为2，默认值的一半为0.5，依此类推。你还可以使用负数——我将很快解释负数的效果。'
- en: 'To double an element’s original size on both axes, you use:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要将元素的原始尺寸在两个轴上都加倍，可以使用：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'A shorthand function, `scale()`, is also available. Note, however, that unlike
    the `translate()` shorthand function, if only one value is provided, the other
    is presumed to be identical. Using the previous example, you could opt instead
    for the shorthand:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用简写函数`scale()`。但请注意，不同于`translate()`简写函数的是，如果只提供一个数值，另一个数值会被假定为相同。根据之前的示例，你可以选择简写如下：
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'I’ll demonstrate `scale` in action with a few examples. Here’s the code:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我将通过几个示例演示`scale`的作用。以下是代码：
- en: '[PRE20]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The results are shown in [Figure 12-7](ch12.html#ch12fig7). The first example
    has a `scale` value of 0.5, so the transformed element is half the size of the
    original—remember I specified only one value in the shorthand, so the other is
    presumed to be equal. In the second example, I used 0.5 as a value but this time
    for the `scaleX()` function, meaning the transformed element is the same height
    as the original but only half the width.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如[图12-7](ch12.html#ch12fig7)所示。第一个示例中`scale`值为0.5，所以变换后的元素大小是原始尺寸的一半——记住，我在简写中只指定了一个值，因此另一个值被假定为相同。在第二个示例中，我使用了0.5作为`scaleX()`函数的值，意味着变换后的元素高度与原始元素相同，但宽度是原始的一半。
- en: '![Image](graphics/f12-07.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f12-07.jpg)'
- en: '*Figure 12-7: The effects of different values in the* `*scale*` *function*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-7：不同数值在*`*scale*`*函数中的效果*'
- en: 'In the final example, I supplied two values to the `scale()` shorthand: The
    first is `1` (one), which sets the horizontal size to be the same as the original,
    but the second is `–1` (negative one). Using a negative value has the effect of
    flipping the element vertically, creating a “reflection” of the original element
    at the same scale.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个示例中，我为`scale()`简写提供了两个值：第一个是`1`（单位），表示水平尺寸与原始尺寸相同，而第二个是`–1`（负一）。使用负值会使元素在垂直方向上翻转，创建出一个与原元素等比例的“镜像”。
- en: '***skew***'
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***skew***'
- en: To *skew* an element is to alter the angle of its horizontal or vertical axis
    (or both axes). As with `translate()` and `scale()`, each axis has an individual
    function—this time called `skewX()` and `skewY()`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*skew*一个元素是改变其水平或垂直轴（或两个轴）的角度。像`translate()`和`scale()`一样，每个轴都有一个单独的函数——这次是`skewX()`和`skewY()`。'
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The arguments for the `skew` functions are angle values; I use degrees in my
    examples. Negative values are permitted. I’ll give you three demonstrations, using
    this code, to show you how they work:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`skew`函数的参数是角度值；在我的示例中使用的是度数。负数值也是允许的。我将通过三次演示，使用以下代码向你展示它们的工作原理：'
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The results are illustrated in [Figure 12-8](ch12.html#ch12fig8).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如[图12-8](ch12.html#ch12fig8)所示。
- en: '![Image](graphics/f12-08.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f12-08.jpg)'
- en: '*Figure 12-8: Elements transformed by different values in the* `*skew*` *function*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-8：不同数值作用下元素的变换效果*`*skew*`*函数*'
- en: 'In the first example, the element is skewed by 15 degrees along its *x*-axis,
    causing the vertical edges to slope diagonally. In the second example, the skew
    is by 5 degrees on the *y*-axis, so the horizontal edges slope diagonally whereas
    the vertical edges remain unchanged. The final example shows the effect of two
    values being applied: 15 degrees on the *x*-axis and −15 degrees on the *y*-axis,
    so the element is sloped on both axes.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个示例中，元素沿其*X*轴倾斜了15度，导致垂直边缘呈斜角。第二个示例中，元素在*Y*轴上倾斜了5度，因此水平边缘呈斜角，而垂直边缘保持不变。最后一个示例展示了应用两个数值的效果：*X*轴15度，*Y*轴−15度，导致元素在两个轴上都发生倾斜。
- en: '**Rotating with skew**'
  id: totrans-100
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**通过skew进行旋转**'
- en: 'By looking at the last example in the previous code block, you can see it’s
    possible to replicate the `rotate()` function using `skew`. To do this, the angle
    that you want to rotate the element by is given as a value to `skewX()` and the
    inverse value to `skewY()`; that is, if `skewX()` is 15 degrees, then `skewY()`
    should be −15 degrees, and vice versa. Therefore, the two functions in this code
    example perform the same job:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看前一个代码块中的最后一个示例，你可以看到使用`skew`是可以复制`rotate()`函数的。为此，你希望旋转元素的角度被作为`skewX()`的值，而`skewY()`则是该角度的逆值；也就是说，如果`skewX()`是15度，那么`skewY()`应该是−15度，反之亦然。因此，下面这个代码示例中的两个函数完成的是相同的操作：
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You’ll find this information useful when I introduce the `matrix()` function
    later in this chapter.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在本章稍后介绍`matrix()`函数时，你会发现这些信息非常有用。
- en: '**The skew() Shorthand Function**'
  id: totrans-104
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**skew()简写函数**'
- en: 'The CSS Transforms module and various online sources also list a shorthand
    `skew()` function that accepts the two individual `skew` functions as values (in
    the same way that `translate()` accepts the `translate` functions):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: CSS变换模块和各种在线资源也列出了一个简写`skew()`函数，它接受两个单独的`skew`函数作为值（就像`translate()`接受`translate`函数一样）：
- en: '[PRE24]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: I highly recommend, however, you don’t use this function, as for some arcane
    mathematical reasons, which I don’t understand, it’s considered redundant. It’s
    only defined for legacy purposes; the shorthand function was implemented in some
    older browsers before the redundancy was noticed. If you require skew on both
    axes, use `skewX()` and `skewY()` instead.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我强烈建议你不要使用这个函数，因为出于某些我不理解的数学原因，它被认为是多余的。它仅为向后兼容而定义；在冗余被发现之前，一些旧版浏览器实现了该简写函数。如果你需要对两个轴进行倾斜，请使用`skewX()`和`skewY()`。
- en: '**An Important Note About Transformation Functions**'
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**关于变换函数的重要说明**'
- en: 'When you set the value of the `transform` property, any functions that you
    don’t list will be presumed to be reset to their default values. To see what I
    mean, take a look at this CSS snippet where a rule is applied to a `div` selector
    to rotate and scale it and another to a `*.foo*` selector to rotate it with a
    different value argument:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当你设置`transform`属性的值时，任何未列出的函数将被假定重置为其默认值。为了说明这一点，看看这个CSS代码片段，其中一个规则应用于`div`选择器来旋转和缩放它，另一个规则应用于`*.foo*`选择器，以不同的值参数旋转它：
- en: '[PRE25]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If these rules were applied to a `div` with a class of `.*foo*`, the element
    would be only rotated by 10 degrees and not scaled; as the `scale()` function
    is not specified, its value argument is treated as the default, `0deg`. To apply
    both properties, you have to update the code to include the `scale()` function
    in the rule applied to `*.foo*`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些规则应用于一个类名为`.*foo*`的`div`元素，则该元素只会旋转10度，而不会缩放；因为没有指定`scale()`函数，所以它的值参数被视为默认值`0deg`。要应用这两个属性，你必须更新代码，在应用于`*.foo*`的规则中包含`scale()`函数：
- en: '[PRE26]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '**Transforming Elements with Matrices**'
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用矩阵变换元素**'
- en: Each of the transformation functions used in this chapter so far can also be
    expressed as a *transformation matrix*. Rather than explaining the theory behind
    transformation matrices (which is quite complex and could easily be a chapter
    of its own), I’ll just show you how they can be applied to elements in CSS through
    use of the `matrix()` function.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 本章迄今为止使用的每个变换函数也可以表示为*变换矩阵*。我不会解释变换矩阵背后的理论（因为它相当复杂，足以单独成章），我只是展示如何通过`matrix()`函数将其应用于CSS中的元素。
- en: I’ll keep the explanation as simple as possible and just give you the practical
    basics. If you really want to dig into the theory, I suggest you read the W3C’s
    explanation in the SVG 1.1 module (*[http://www.w3.org/TR/SVG/coords.html#TransformMatrixDefined/](http://www.w3.org/TR/SVG/coords.html#TransformMatrixDefined/)*).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我会尽量保持解释简单，只提供实用的基础知识。如果你真想深入了解理论，建议阅读W3C在SVG 1.1模块中的解释（*[http://www.w3.org/TR/SVG/coords.html#TransformMatrixDefined/](http://www.w3.org/TR/SVG/coords.html#TransformMatrixDefined/)*）。
- en: 'The 2D transformation matrices, and the `matrix()` function, accept six values,
    the combination of which can be used to create the functions introduced already
    in this chapter. Here’s the syntax:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 2D变换矩阵和`matrix()`函数接受六个值，它们的组合可以用来创建本章已介绍的变换函数。其语法如下：
- en: '[PRE27]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: All of the default values are 0 (zero), and they behave slightly differently
    depending on which values are supplied—I’ll explain what this means as I go along.
    I said that you can perform all of the functions introduced so far in this chapter
    with `matrix()`, but the process is not quite that simple—you need to know some
    trigonometry first.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 所有默认值都是0（零），并且它们的行为会根据提供的值有所不同——我会在后续中解释这意味着什么。我说过，你可以通过`matrix()`执行本章介绍的所有函数，但过程并不那么简单——你首先需要了解一些三角学知识。
- en: 'Before getting to the hard stuff, I’ll start with something simple that doesn’t
    require any trig: scaling. If you want to scale an element, you can use `*a*`
    and `*d*` to equate to `scaleX()` and `scaleY()` and set values accordingly, leaving
    `*b*` and `*c*` at 0\. Therefore, to double an element’s size, you use:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理复杂内容之前，我会从一个简单的内容开始，它不需要任何三角函数：缩放。如果你想缩放一个元素，可以使用`*a*`和`*d*`来等同于`scaleX()`和`scaleY()`并设置相应的值，同时将`*b*`和`*c*`设为0。因此，要将元素的大小加倍，你可以使用：
- en: '[PRE28]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can also translate an element with `matrix()` by providing horizontal and
    vertical offset values to `*X*` and `*Y*` (respectively). These values are unitless
    numbers, which represent pixel values (on HTML elements, anyway; in SVG, they
    are vector point values). That being the case, to double an element’s size and
    offset it by 15px both vertically and horizontally, you use this code:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过为`*X*`和`*Y*`（分别是水平方向和垂直方向）提供偏移值，使用`matrix()`来转换一个元素。这些值是无单位的数字，表示像素值（在HTML元素中是像素值，在SVG中则是向量点值）。因此，如果要将一个元素的大小加倍并同时将其垂直和水平方向偏移15px，可以使用以下代码：
- en: '[PRE29]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If you want to skew an element using `matrix()`, well, this is where it becomes
    a lot more complex—here’s where I need to introduce the trigonometric functions.
    You can read a full explanation of these functions on Wikipedia (*[http://en.wikipedia.org/wiki/Trigonometric_functions#Sine.2C_cosine_and_tangent/](http://en.wikipedia.org/wiki/Trigonometric_functions#Sine.2C_cosine_and_tangent/)*),
    but the following is a quick and dirty summary: The trigonometric functions are
    ratio values used to calculate angles in a triangle.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用`matrix()`来倾斜一个元素，那么这里就变得更加复杂了——在这里我需要引入三角函数。你可以在维基百科上阅读这些函数的完整解释（* [http://en.wikipedia.org/wiki/Trigonometric_functions#Sine.2C_cosine_and_tangent/](http://en.wikipedia.org/wiki/Trigonometric_functions#Sine.2C_cosine_and_tangent/)*），但下面是一个快速而简略的总结：三角函数是用于计算三角形角度的比值。
- en: 'The first trigonometric function I’ll use is *tan (tangent)*, which is required
    to skew an element along the *x*- or *y*-axis. Referring to the original `matrix`
    syntax, the *x*-axis is supplied as a value to `*b*` and the *y* as a value to
    `*c*`. Here’s the syntax for each:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用的第一个三角函数是*tan（正切）*，它用于沿*x*-轴或*y*-轴倾斜一个元素。参照原始的`matrix`语法，*x*-轴作为值传递给`*b*`，*y*轴作为值传递给`*c*`。以下是每个的语法：
- en: '[PRE30]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `*angle*` refers to the degrees (counterclockwise) of the angle you want
    to skew by. If you want to skew an element by 15 degrees, the value you’re looking
    for is the tangent of 15\. So whip out your scientific calculator—if you don’t
    own one, your operating system’s calculator should have a scientific mode—and
    get the result that `tan(15) = 0.27`. This result is what you provide to the `matrix`
    function. For example, if you want the skew to be along the *x*-axis, you use
    this syntax:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`*angle*`指的是你希望倾斜的角度（逆时针方向），单位是度。如果你想将元素倾斜15度，那么你需要的值就是15度的正切值。因此，拿出你的科学计算器——如果没有，可以使用操作系统自带的科学计算器——计算出`tan(15)`的结果为0.27。这个结果就是你需要传递给`matrix`函数的值。例如，如果你希望倾斜是沿着*x*-轴的，那么你可以使用以下语法：'
- en: '[PRE31]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '**NOTE** *As I’m using degrees in my examples, make sure your calculator’s
    trigonometric type is set to* degrees *if you want to follow along. If you prefer
    working in gradians or radians, you can update all of these examples accordingly.*'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意** *由于我在示例中使用的是度数，请确保你的计算器的三角函数模式设置为度数，如果你想要跟着示例走。如果你更喜欢使用弧度或格拉度，可以相应地调整这些示例。*'
- en: 'As mentioned, skew functions can also be used to rotate an element—and you
    can do the same with `matrix()`. This time you have to make use of the *sin (sine)*
    and *cos (cosine)* trigonometric functions. To rotate an element, the `matrix()`
    syntax is:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，倾斜函数也可以用来旋转元素——你也可以用`matrix()`来实现这一点。这一次，你需要使用*sin（正弦）*和*cos（余弦）*三角函数。旋转元素的`matrix()`语法是：
- en: '[PRE32]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Note that `*a*` and `*d*` take the same value, and `*b*` and `*c*` take inverse
    values (if `*b*` is a positive value, `*c*` is the negative of the same value,
    and vice versa). Once again, `*angle*` refers to the degrees of the angle you
    want to rotate the element by. To rotate by 60 degrees, you go back to your scientific
    calculator and calculate the cos and sin of 60\. My calculator tells me that `cos(60)
    = 0.5` and `sin(60) = 0.87`, so the required code is
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`*a*`和`*d*`的值相同，而`*b*`和`*c*`则取相反值（如果`*b*`是正值，则`*c*`是相同值的负值，反之亦然）。再次说明，`*angle*`指的是你希望旋转元素的角度。如果要旋转60度，回到你的科学计算器，计算60度的余弦和正弦。我的计算器显示`cos(60)
    = 0.5`和`sin(60) = 0.87`，所以所需的代码是：
- en: '[PRE33]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now let’s look at a few examples. Here’s the code I’ll use:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看几个示例。这是我将使用的代码：
- en: '[PRE34]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The output is shown in [Figure 12-9](ch12.html#ch12fig9).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如[图12-9](ch12.html#ch12fig9)所示。
- en: '![Image](graphics/f12-09.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f12-09.jpg)'
- en: '*Figure 12-9: Examples of transformations made with the* `*matrix*` *function*'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-9：使用`*matrix*`函数进行变换的示例*'
- en: 'In the first example, I’ve flipped the element vertically, as I did earlier
    using `scale()` in [Figure 12-7](ch12.html#ch12fig7). In the next example, I’ve
    skewed the element by 15 degrees along the *y*-axis (after calculating that `tan(15)
    = 0.268`) and translated it along both axes. The final example shows the element
    rotated by 10 degrees; the values are the results of the calculations I showed
    you previously: `cos(10) = 0.98` and `sin(10) = 0.17`. As mentioned, the `sin`
    value is negative in position `*b*` and positive in position `*c*`, which makes
    the rotation uniform.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个例子中，我将元素垂直翻转，正如之前使用 `scale()` 在 [图 12-7](ch12.html#ch12fig7) 中做的那样。在下一个例子中，我沿
    *y* 轴将元素倾斜了 15 度（通过计算 `tan(15) = 0.268`），并沿两个轴平移它。最后一个例子展示了将元素旋转了 10 度；这些值是我之前给你展示过的计算结果：`cos(10)
    = 0.98` 和 `sin(10) = 0.17`。如前所述，`sin` 值在位置 `*b*` 为负，在位置 `*c*` 为正，这样旋转效果就保持一致。
- en: I know this is all quite complex, but hopefully I’ve simplified it enough for
    you to understand, without making it seem so easy you can’t see the scope for
    great flexibility—as long as you keep your scientific calculator with you at all
    times! And if this does seem overly complex, and you’re having trouble understanding
    it, remember you can perform all of these transformations using the individual
    functions, so you can happily forget about `matrix` and trigonometry, too, if
    you wish.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道这些内容都相当复杂，但希望我已经简化到足够让你理解的程度，同时又不至于显得太简单，以至于你看不到其中极大的灵活性——只要你随时携带科学计算器！如果觉得这些内容过于复杂，理解起来有困难，记住，你可以使用各个独立的函数来执行所有这些变换，所以如果你愿意，完全可以忽略
    `matrix` 和三角函数。
- en: '**Summary**'
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: 'This chapter has introduced the most complex property so far: the `matrix()`
    function. Although some might be tempted to say that if you want to perform complex
    operations, you have to deal with complex syntax, I think the other functions
    in this chapter do a good job of translating that complexity into something simple.
    Just remember, easier options are always available if you get fed up with `matrix()`.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了迄今为止最复杂的属性：`matrix()` 函数。虽然有些人可能会觉得，想要执行复杂操作就必须应对复杂的语法，但我认为本章中的其他函数做得很好，将复杂性转化为简单的内容。只要记住，如果你厌烦了
    `matrix()`，总有更简单的选项可以选择。
- en: This chapter has also introduced some of the most revolutionary properties so
    far—just a few years ago the notion that you could rotate, skew, and scale elements
    was just a pipe dream, but today you can do just that. And if you think what you’ve
    seen in this chapter is impressive, wait until the next one. I’m going to show
    you how to add an extra dimension—literally—to your transformation effects.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还介绍了一些至今为止最具革命性的属性——几年前，元素可以旋转、倾斜和缩放的概念还只是空想，但如今你可以轻松做到这些。如果你觉得本章所展示的内容已经令人印象深刻，那就等着下一章吧。我将向你展示如何将一个额外的维度——字面意义上的——添加到你的变换效果中。
- en: '**2D Transformations: Browser Support**'
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**二维变换：浏览器支持**'
- en: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
- en: '| 2D transformations | Yes | Yes | Yes^([*](ch12.html#footnote28a)) | IE9[*](ch12.html#footnote28a),
    IE10 |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| 二维变换 | 是 | 是 | 是^([*](ch12.html#footnote28a)) | IE9[*](ch12.html#footnote28a)，IE10
    |'
- en: '[*](ch12.html#footnote_28a) With vendor prefix'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '[*](ch12.html#footnote_28a) 使用厂商前缀'
