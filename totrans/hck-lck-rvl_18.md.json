["```\nmicah@trapdoor data % **ls -lh**\n\ntotal 215904\n\n-rwx------  1 micah  staff    32M Sep 14  2021 hipaa_special.tar.zst\n\n-rwx------  1 micah  staff    73M Sep 13  2021 horse_around_find_out.tar.zst\n```", "```\nmicah@trapdoor data % **mkdir hipaa_special**\n\nmicah@trapdoor data % **cd hipaa_special**\n\nmicah@trapdoor hipaa_special % **tar -xf ../hipaa_special.tar.zst**\n```", "```\nmicah@trapdoor hipaa_special % **cd ..**\n\nmicah@trapdoor data % **mkdir horse_around_find_out**\n\nmicah@trapdoor data % **cd horse_around_find_out**\n\nmicah@trapdoor horse_around_find_out % **tar -xf ../horse_around_find_out.tar.zst**\n```", "```\nmicah@trapdoor data % **gdu --apparent-size -sh hipaa_special**\n\n493M    hipaa_special\n\nmicah@trapdoor data % **find hipaa_special -type f | wc -l**\n\n  281546\n\nmicah@trapdoor data % **gdu --apparent-size -sh horse_around_find_out**\n\n691M   horse_around_find_out\n\nmicah@trapdoor data % **find horse_around_find_out -type f | wc -l**\n\n     215\n```", "```\nmicah@trapdoor data % **ls -lh hipaa_special | head**\n```", "```\n`--snip--`\n\n-rw-r--r--  1 micah  staff   8.1K Sep 13  2021 100000\n\n-rw-r--r--  1 micah  staff   1.3K Sep 13  2021 100001\n\n-rw-r--r--  1 micah  staff   1.3K Sep 12  2021 100002\n\n-rw-r--r--  1 micah  staff   1.4K Sep 13  2021 100003\n\n-rw-r--r--  1 micah  staff   1.5K Sep 13  2021 100004\n\n-rw-r--r--  1 micah  staff   1.5K Sep 13  2021 100005\n\n-rw-r--r--  1 micah  staff   1.5K Sep 13  2021 100006\n\n-rw-r--r--  1 micah  staff   1.3K Sep 13  2021 100007\n\n-rw-r--r--  1 micah  staff   1.3K Sep 13  2021 100008\n```", "```\n{\n\n    \"result\": true,\n\n    \"provider\": {\n\n        \"provider_id\": null,\n\n        \"npi\": null,\n\n        \"spi\": null,\n\n        \"partner_id\": null,\n\n        \"user_id\": 244273, ❶\n\n `--snip--`\n\n        \"fname\": \"`redacted`\",\n\n        \"lname\": \"`redacted`\",\n\n        \"phone\": \"`redacted`\",\n\n        \"work_phone\": \" \",\n\n        \"work_phone_ext\": \" \",\n\n        \"email\": \"`redacted`@hotmail.com\",\n\n        \"state\": \"CA\",\n\n        \"certified_states\": [],\n\n        \"gender\": \"F\",\n\n        \"fax\": null,\n\n        \"ssn\": 999999999,\n\n        \"birthdate\": \"`redacted`\",\n\n        \"addressLine1\": \"`redacted`\",\n\n        \"zipcode\": \"`redacted`\",\n\n        \"city\": \"`redacted`\",\n\n        \"avatar\": \"avatar\\/default_avatar.png\",\n\n        \"id\": 78410,\n\n        \"partner\": \",3,\", ❷\n\n        \"timezone\": \"America\\/Los_Angeles\",\n\n        \"role_id\": 3,\n\n `--snip--`\n\n        \"alcohol_type\": null,\n\n        \"alcohol_amount\": null,\n\n        \"current_physician\": null, \"consultationNotes\": [ ❸\n\n            {\n\n                \"value\": 179820,\n\n                \"text\": \"09\\/04\\/2021 13:47:28\", ❹\n\n                \"note\": \"This visit was performed via telemedicine.\\nThe patient confirmed knowledge of the limitations of the use of telemedicine were verbally confirmed by the provider.\\nVerification of patient identity was established.\\nVerbal consent was obtained for medical treatment obtained\\n\\nThe patient is being interviewed via phone Platform\\n\\nPatient has need for covid meds in regards to: ivermectin\\nSymptoms onset date: 7 days\\n\\nOccupation:\\nChronic Medical illnesses: denies heart lung or liver problems\\\n\n`--snip--`\n\nbe required.\",\n\n                \"practice\": \"covid19_treatment\"\n\n            }\n\n        ],\n\n        \"internalNotes\": []\n\n    }\n\n}\n```", "```\nmicah@trapdoor data % **ls -lh horse_around_find_out**\n```", "```\n`--snip--`\n\n-rw-r--r--    1 micah  staff   387M Sep 12  2021 cadence_allpatients_all.json\n\n-rw-r--r--    1 micah  staff    13K Sep 12  2021 cadence_allpharmacies_all.json\n\n-rw-r--r--    1 micah  staff   317K Sep 12  2021 cadence_allproviders_all.json\n\n-rw-r--r--    1 micah  staff   3.9K Sep 12  2021 cadence_allteams_all.json\n\n-rw-r--r--    1 micah  staff    15K Sep 13  2021 cadence_api.txt\n\n-rw-r--r--    1 micah  staff   103M Sep 12  2021 cadence_contacts_all.json\n\n-rw-r--r--    1 micah  staff   1.0M Sep 12  2021 cadence_getPrescriptionPad_all.json\n\n-rw-r--r--    1 micah  staff   983K Sep 11  2021 cadence_health_partners.json\n\ndrwxr-xr-x  202 micah  staff   6.3K Sep 12  2021 cadence_js\n\n-rw-r--r--    1 micah  staff   238K Sep 12  2021 cadence_providers_2.json\n\n-rw-r--r--    1 micah  staff   321K Sep 12  2021 ravkoo_contact.csv\n\n-rw-r--r--    1 micah  staff   1.8M Sep 12  2021 ravkoo_drugs.csv\n\n-rw-r--r--    1 micah  staff    51K Sep 12  2021 ravkoo_insurance.csv\n\n-rw-r--r--    1 micah  staff   149M Sep 13  2021 ravkoo_rxdata.csv\n\n-rw-r--r--    1 micah  staff    60K Sep 12  2021 ravkoo_screenshot.png\n\n-rw-r--r--    1 micah  staff   361B Sep 12  2021 ravkoo_third_parties.csv\n```", "```\n{\n\n    \"name\": \"`redacted`\",\n\n    \"id\": 168692,\n\n    \"fname\": \"`redacted`\",\n\n    \"mname\": null,\n\n    \"lname\": \"`redacted`\",\n\n    \"email\": \"`redacted`@gmail.com\",\n\n    \"password\": \"`redacted_password_hash`\",\n\n    \"ssn\": 999999999,\n\n    \"phone\": \"`redacted`\",\n\n    \"fax\": null,\n\n    \"birthdate\": \"`redacted`\",\n\n    \"gender\": \"F\",\n\n    \"maritalStatus\": null,\n\n    \"addressLine1\": \"`redacted`\",\n\n    \"addressLine2\": null,\n\n    \"zipcode\": \"`redacted`\", \"city\": \"`redacted`\",\n\n    \"state\": \"NJ\",\n\n    \"language\": null,\n\n`--snip--`\n\n    \"created_at\": \"2021-08-18 14:04:58\",\n\n    \"updated_at\": \"2021-08-18 14:04:58\",\n\n`--snip--`\n```", "```\n{\n\n    \"id\": 3,\n\n    \"name\": \"America's Frontline Doctors\",\n\n    `--snip--`\n\n    \"practices\": \"covid19,followupvisit\",\n\n    `--snip--`\n\n    \"one_merchant_security_key\": \"`redacted`\",\n\n    \"stripe_publishable_key\": \"dev+admin@cadencehealth.us\",\n\n    \"stripe_secret_key\": \"`redacted`\",\n\n    \"virtual_visit_price\": {\n\n        \"covid19\": \"90.00\",\n\n        \"followupvisit\": \"59.99\"\n\n    },\n\n`--snip--`\n```", "```\nimport json\n\nimport csv\n\nimport os\n\n# Turn a JSON file into a Python dict or list\n\ndef data_from_json(filename):\n\n    with open(filename) as f:\n\n        return json.loads(f.read())\n\n# Export a CSV full of AFLDS patients\n\ndef main():\n\n    # Load patient data from cadence_allpatients_all.json\n\n    patients_data = data_from_json(\n\n        \"data/horse_around_find_out/cadence_allpatients_all.json\"\n\n    )\n\n    # Keep track of the created_at timestamps for each patient's id\n\n    patient_ids_to_created_at = {}\n\n    for patient in patients_data[\"patients\"]:\n\n        patient_ids_to_created_at[patient[\"id\"]] = patient[\"created_at\"]\n\n    # Start the list of AFLDS patients that have had at least one consultation\n\n    patient_rows = []\n\n    # Loop through every file in the hipaa_special folder\n\n    for patient_id in os.listdir(\"data/hipaa_special\"):\n\n        # Load the patient data\n\n        data = data_from_json(os.path.join(\"data/hipaa_special\", patient_id))\n\n        # Some of the patient records are empty. This skips them\n\n        if not data[\"result\"]:\n\n            continue\n\n # Make sure AFLDS (id 3) is in the list of partners\n\n        partner_ids = data[\"provider\"][\"partner\"].split(\",\")\n\n        if \"3\" in partner_ids:\n\n            # Count how many consultations this patient has\n\n            num_consultations = len(data[\"provider\"][\"consultationNotes\"])\n\n            # If they have had more than one, add them to the list\n\n            if num_consultations > 0:\n\n                patient_rows.append(\n\n                      {\n\n                        \"user_id\": data[\"provider\"][\"user_id\"],\n\n                        \"created_at\": patient_ids_to_created_at[\n\n                            data[\"provider\"][\"user_id\"]\n\n                          ],\n\n                        \"fname\": data[\"provider\"][\"fname\"],\n\n                        \"lname\": data[\"provider\"][\"lname\"],\n\n                        \"email\": data[\"provider\"][\"email\"],\n\n                        \"city\": data[\"provider\"][\"city\"],\n\n                        \"state\": data[\"provider\"][\"state\"],\n\n                        \"gender\": data[\"provider\"][\"gender\"],\n\n                        \"birthdate\": data[\"provider\"][\"birthdate\"],\n\n                        \"num_consultations\": num_consultations,\n\n                      }\n\n                )\n\n    # Write the CSV file\n\n    csv_filename = \"aflds-patients.csv\"\n\n    headers = [\n\n        \"user_id\",\n\n        \"created_at\",\n\n        \"fname\",\n\n        \"lname\",\n\n        \"email\",\n\n        \"city\",\n\n        \"state\",\n\n        \"gender\",\n\n        \"birthdate\",\n\n        \"num_consultations\",\n\n    ]\n\n    with open(csv_filename, \"w\") as f:\n\n        writer = csv.DictWriter(f, headers)\n\n        writer.writeheader()\n\n        writer.writerows(patient_rows)\n\nif __name__ == \"__main__\":\n\n    main()\n```", "```\nimport csv\n\n# Export a CSV that adds up prescriptions and their costs for each drug\n\ndef main():\n\n        # A dictionary that maps drug names to another dictionary containing the\n\n    # prescription count and total cost for that drug\n\n    drugs = {}\n\n    # Add up the number of prescriptions and total cost for all drugs, to display\n\n    # at the end\n\n    prescription_count = 0\n\n    total_cost = 0\n\n    # Loop through ravkoo_rxdata.csv, and count prescriptions and costs\n\n    with open(\"data/horse_around_find_out/ravkoo_rxdata.csv\") as f:\n\n        reader = csv.DictReader(f)\n\n        for row in reader:\n\n            if row[\"DrugName\"] not in drugs:\n\n               drugs[row[\"DrugName\"]] = {\"prescription_count\": 0, \"total_cost\": 0}\n\n            # Count prescriptions and cost for this drug\n\n            drugs[row[\"DrugName\"]][\"prescription_count\"] += 1\n\n            drugs[row[\"DrugName\"]][\"total_cost\"] += float(row[\"Cost\"])\n\n            # Count prescriptions and cost for _all_ drugs\n\n            prescription_count += 1\n\n            total_cost += float(row[\"Cost\"])\n\n    # Write the CSV file\n\n    headers = [\n\n        \"drug_name\",\n\n        \"prescription_count\",\n\n        \"total_cost\",\n\n    ]\n\n    csv_filename = \"ravkoo.csv\"\n\n    with open(csv_filename, \"w\") as f:\n\n        writer = csv.DictWriter(f, headers)\n\n        writer.writeheader()\n\n        for drug_name in drugs:\n\n            writer.writerow(\n\n                { \"drug_name\": drug_name,\n\n                    \"prescription_count\": drugs[drug_name][\"prescription_count\"],\n\n                    \"total_cost\": int(drugs[drug_name][\"total_cost\"]),\n\n                }\n\n            )\n\n    print(f\"Number of prescriptions: {prescription_count:,}\")\n\n    print(f\"Total cost: ${int(total_cost):,}\")\n\nif __name__ == \"__main__\":\n\n    main()\n```", "```\nmicah@trapdoor AFLDS % **python3 create-ravkoo-csv.py**\n\nNumber of prescriptions: 340,000\n\nTotal cost: $15,119,473\n```", "```\nimport csv\n\n# Export a CSV that adds up prescriptions and their costs for each category of drug\n\ndef main():\n\n    # A dictionary that maps drug categories to another dictionary containing the\n\n    # prescription count and total cost for that drug category\n\n    drug_categories = {}\n\n    # Loop through ravkoo_rxdata.csv, and count prescriptions and costs\n\n    with open(\"data/horse_around_find_out/ravkoo_rxdata.csv\") as f:\n\n        reader = csv.DictReader(f)\n\n        for row in reader:\n\n            if \"ivermectin\" in row[\"DrugName\"].lower():\n\n                category = \"Ivermectin\"\n\n            elif \"hydroxychloroquine\" in row[\"DrugName\"].lower():\n\n                category = \"Hydroxychloroquine\"\n\n            elif \"azithromycin\" in row[\"DrugName\"].lower():\n\n                category = \"Azithromycin\"\n\n            elif \"zinc\" in row[\"DrugName\"].lower():\n\n               category = \"Zinc\"\n\n            elif \"vitamin c\" in row[\"DrugName\"].lower():\n\n                category = \"Vitamin C\"\n\n            else:\n\n                category = \"Other\"\n\n            if category not in drug_categories:\n\n                drug_categories[category] = {\"prescription_count\": 0, \"total_cost\": 0}\n\n            # Count prescriptions and cost for this drug category\n\n            drug_categories[category][\"prescription_count\"] += 1\n\n            drug_categories[category][\"total_cost\"] += float(row[\"Cost\"])\n\n    # Write the CSV file\n\n    headers = [\n\n        \"drug_category\",\n\n        \"prescription_count\",\n\n        \"total_cost\",\n\n    ]\n\n    csv_filename = \"ravkoo-categories.csv\"\n\n    with open(csv_filename, \"w\") as f:\n\n        writer = csv.DictWriter(f, headers)\n\n        writer.writeheader() for category in drug_categories:\n\n            writer.writerow(\n\n                {\n\n                    \"drug_category\": category,\n\n                    \"prescription_count\": drug_categories[category][\n\n                         \"prescription_count\"\n\n                    ],\n\n                    \"total_cost\": int(drug_categories[category][\"total_cost\"]),\n\n                }\n\n            )\n\nif __name__ == \"__main__\":\n\n    main()\n```", "```\nimport json\n\nimport csv\n\n# Turn a JSON file into a Python dict or list\n\ndef data_from_json(filename):\n\n    with open(filename) as f:\n\n        return json.loads(f.read())\n\n# Convert the comma-separated list of partners, like \",3,\", into a Python list\n\n# of partners, like [\"America's Frontline Doctors\"]\n\ndef get_partners(partner_lookup, patient):\n\n    partners = []\n\n    partner_ids = patient[\"partner\"].split(\",\")\n\n    for partner_id in partner_ids:\n\n        if partner_id != \"\":\n\n            partners.append(partner_lookup[int(partner_id)])\n\n    return partners\n\n# Export a CSV that lists Cadence partners\n\ndef main():\n\n    partner_rows = []\n\n    # Load the Cadence patient data\n\n    patients_data = data_from_json(\n\n        \"data/horse_around_find_out/cadence_allpatients_all.json\"\n\n    )\n\n # Load the Cadence partners data\n\n    partners_data = data_from_json(\n\n        \"data/horse_around_find_out/cadence_health_partners.json\"\n\n    )\n\n    # Create a dictionary that maps a partner ID with its name\n\n    partner_lookup = {}\n\n    for partner in partners_data:\n\n        partner_lookup[partner[\"id\"]] = partner[\"name\"]\n\n    # Loop through all of the partners\n\n    for partner in partners_data:\n\n        # Count how many patients use this partner\n\n        patients = 0\n\n        for patient in patients_data[\"patients\"]:\n\n            patient_partners = get_partners(partner_lookup, patient)\n\n            for patient_partner in patient_partners:\n\n                if patient_partner == partner[\"name\"]:\n\n                    patients += 1\n\n        # Add the partner's row\n\n        partner_rows.append(\n\n            {\n\n                \"ID\": partner[\"id\"],\n\n                \"Name\": partner[\"name\"],\n\n                \"Domain\": partner[\"domain\"],\n\n                \"Patients\": patients,\n\n            }\n\n        )\n\n    # Write the CSV file\n\n    headers = [\"ID\", \"Name\", \"Domain\", \"Patients\"]\n\n    csv_filename = \"cadence-partners.csv\"\n\n    with open(csv_filename, \"w\") as f:\n\n        writer = csv.DictWriter(f, headers)\n\n        writer.writeheader()\n\n        writer.writerows(partner_rows)\n\nif __name__ == \"__main__\":\n\n    main()\n```", "```\nimport csv\n\nimport json\n\nimport time\n\nimport httpx\n\ngeocode_api_key = \"PUT_GEOCODE_API_KEY_HERE\"\n\n# Export a CSV that for each city lists its GPS coordinates and the number of patients there\n\ndef main():\n\n    # This dictionary maps names of cities (in format \"City, State\", like \"New York, NY\")\n\n    # to a dictionary with info about that city (number of patients, GPS coordinates)\n\n    cities = {}\n\n    # Count how many patients are in each city\n\n    with open(\"aflds-patients.csv\") as f:\n\n        reader = csv.DictReader(f)\n\n        for row in reader:\n\n            city = f\"{row['city']}, {row['state']}\"\n\n            if city not in cities:\n\n                cities[city] = {\"count\": 0}\n\n            cities[city][\"count\"] += 1\n\n    print(f\"Found patients in {len(cities):,} cities\")\n\n    # Look up GPS coordinates for each city\n\n    for city in cities:\n\n        # Give each API request 3 tries, in case a connection fails\n\n        tries = 0 success = False\n\n        while not success:\n\n            try:\n\n                print(\n\n                    f\"Loading GPS coordinates for: {city} ({cities[city]['count']} patients)\"\n\n                )\n\n                r = httpx.get(\n\n                    \"https://app.geocodeapi.io/api/v1/search\",\n\n                     params={\n\n                        \"apikey\": geocode_api_key,\n\n                        \"text\": city,\n\n                        \"size\": 1,\n\n                        \"boundary.country\": \"US\",\n\n                    },\n\n                )\n\n                success = True\n\n            # The connection failed\n\n            except:\n\n                tries += 1\n\n                if tries == 3:\n\n                    print(\"Failed, skipping\")\n\n                print(\"Sleeping 2s and trying again\")\n\n                time.sleep(2)\n\n        try:\n\n            data = json.loads(r.text)\n\n            if \"features\" in data and len(data[\"features\"]) > 0:\n\n                cities[city][\"lon\"] = data[\"features\"][0][\"geometry\"][\"coordinates\"][0]\n\n                cities[city][\"lat\"] = data[\"features\"][0][\"geometry\"][\"coordinates\"][1]\n\n        except:\n\n            cities[city][\"lon\"] = None\n\n            cities[city][\"lat\"] = None\n\n    # Write the CSV file\n\n    headers = [\n\n        \"count\",\n\n        \"city\",\n\n        \"lon\",\n\n        \"lat\",\n\n        \"label\",\n\n    ]\n\n    csv_filename = \"cities.csv\"\n\n    with open(csv_filename, \"w\") as f:\n\n        writer = csv.DictWriter(f, fieldnames=headers)\n\n        writer.writeheader()\n\n        for city in cities:\n\n            writer.writerow(\n\n                {\n\n                    \"count\": cities[city][\"count\"],\n\n                    \"city\": city,\n\n                    \"lon\": cities[city][\"lat\"], \"lat\": cities[city][\"lon\"],\n\n                    \"label\": f\"{city} ({cities[city]['count']})\",\n\n                 }\n\n            )\n\nif __name__ == \"__main__\":\n\n    main()\n```", "```\nmicah@trapdoor AFLDS % **python3 create-cities-csv.py**\n\nFound patients in 15,196 cities\n\nLoading GPS coordinates for: roan mountain, TN (1 patients)\n\nLoading GPS coordinates for: El Paso, TX (22 patients)\n\nLoading GPS coordinates for: Paulden, AZ (7 patients)\n\nLoading GPS coordinates for: Athens, NY (5 patients)\n\nLoading GPS coordinates for: Estero, FL (31 patients)\n\nLoading GPS coordinates for: Columbia, MD (16 patients)\n\nLoading GPS coordinates for: Houston, TX (371 patients)\n\nLoading GPS coordinates for: Newtown Square, PA (14 patients) Loading GPS coordinates for: Plymouth, MN (32 patients)\n\nLoading GPS coordinates for: Blairsville, GA (20 patients)\n\nLoading GPS coordinates for: shelby twownhsip, MI (1 patients)\n\nLoading GPS coordinates for: Waukesha, WI (13 patients)\n\n`--snip--`\n```", "```\nimport csv\n\nfrom datetime import datetime, timedelta\n\n# Export a CSV that shows how many patients are part of each age group\n\ndef main():\n\n    # Age groups, the same ones used in CDC data\n\n    age_groups = {\n\n        \"<0\": 0,\n\n        \"0-4\": 0,\n\n        \"5-17\": 0,\n\n        \"18-29\": 0,\n\n        \"30-39\": 0,\n\n        \"40-49\": 0,\n\n        \"50-64\": 0,\n\n        \"65-74\": 0,\n\n        \"75-84\": 0,\n\n        \"85+\": 0,\n\n        \">100\": 0,\n\n      }\n\n    sept2021 = datetime(2021, 9, 11)\n\n    with open(\"aflds-patients.csv\") as f:\n\n        reader = csv.DictReader(f)\n\n        for row in reader:\n\n            birthdate = datetime.strptime(row[\"birthdate\"], \"%m/%d/%Y\")\n\n            age = sept2021 - birthdate\n\n            if age < timedelta(0):\n\n                age_groups[\"<0\"] += 1\n\n            elif age < timedelta(365 * 5):\n\n                age_groups[\"0-4\"] += 1\n\n            elif age < timedelta(365 * 18):\n\n                age_groups[\"5-17\"] += 1\n\n            elif age < timedelta(365 * 30):\n\n                age_groups[\"18-29\"] += 1\n\n            elif age < timedelta(365 * 40):\n\n                age_groups[\"30-39\"] += 1\n\n            elif age < timedelta(365 * 50):\n\n                age_groups[\"40-49\"] += 1\n\n            elif age < timedelta(365 * 65):\n\n                age_groups[\"50-64\"] += 1\n\n            elif age < timedelta(365 * 75):\n\n                age_groups[\"65-74\"] += 1\n\n            elif age < timedelta(365 * 85):\n\n                age_groups[\"75-84\"] += 1\n\n            elif age < timedelta(365 * 100):\n\n                age_groups[\"85+\"] += 1\n\n            else:\n\n                age_groups[\">100\"] += 1\n\n    # Write the CSV file\n\n    headers = [\n\n        \"age_group\", \"patients\",\n\n    ]\n\n    csv_filename = \"ages.csv\"\n\n    with open(csv_filename, \"w\") as f:\n\n        writer = csv.DictWriter(f, headers)\n\n        writer.writeheader()\n\n        for age_group in age_groups:\n\n            writer.writerow(\n\n                {\n\n                    \"age_group\": age_group,\n\n                    \"patients\": age_groups[age_group],\n\n                }\n\n            )\n\nif __name__ == \"__main__\":\n\n    main()\n```"]