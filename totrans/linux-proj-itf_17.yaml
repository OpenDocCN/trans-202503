- en: Chapter 17. Access Control Lists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[File Permissions](ch15.html#file_permissions "File Permissions") described
    the traditional UNIX (and Linux) file permissions scheme. For many applications,
    this scheme is sufficient. However, some applications need finer control over
    the permissions granted to specific users and groups. To meet this requirement,
    many UNIX systems implement an extension to the traditional UNIX file permissions
    model known as *access control lists* (ACLs). ACLs allow file permissions to be
    specified per user or per group, for an arbitrary number of users and groups.
    Linux provides ACLs from kernel 2.6 onward.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Support for ACLs is optional for each file system, and is controlled by kernel
    configuration options under the *File systems* menu. *Reiserfs* support for ACLs
    has been available since kernel 2.6.7.
  prefs: []
  type: TYPE_NORMAL
- en: In order to be able to create ACLs on an *ext2*, *ext3*, *ext4*, or *Reiserfs*
    file system, the file system must be mounted with the *mount -o acl* option.
  prefs: []
  type: TYPE_NORMAL
- en: ACLs have never been formally standardized for UNIX systems. An attempt was
    made to do this in the form of the POSIX.1e and POSIX.2c draft standards, which
    aimed to specify, respectively, the application program interface (API) and the
    shell commands for ACLs (as well as other features, such as capabilities). Ultimately,
    this standardization attempt foundered, and these draft standards were withdrawn.
    Nevertheless, many UNIX implementations (including Linux) base their ACL implementations
    on these draft standards (usually on the final version, *Draft 17*). However,
    because there are many variations across ACL implementations (in part springing
    from the incompleteness of the draft standards), writing portable programs that
    use ACLs presents some difficulties.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter provides a description of ACLs and a brief tutorial on their use.
    It also describes some of the library functions used for manipulating and retrieving
    ACLs. We won’t go into detail on all of these functions because there are so many
    of them. (For the details, see the manual pages.)
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An ACL is a series of ACL entries, each of which defines the file permissions
    for an individual user or group of users (see [Figure 17-1](ch17.html#an_access_control_list
    "Figure 17-1. An access control list")).
  prefs: []
  type: TYPE_NORMAL
- en: '![An access control list](figs/web/17-1_ACL-ACL.png.jpg)Figure 17-1. An access
    control list'
  prefs: []
  type: TYPE_NORMAL
- en: ACL entries
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Each ACL entry consists of the following parts:'
  prefs: []
  type: TYPE_NORMAL
- en: a *tag type*, which indicates whether this entry applies to a user, to a group,
    or to some other category of user;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: an optional *tag qualifier*, which identifies a specific user or group (i.e.,
    a user ID or a group ID); and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a *permission set*, which specifies the permissions (read, write, and execute)
    that are granted by the entry.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The tag type has one of the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ACL_USER_OBJ`'
  prefs: []
  type: TYPE_NORMAL
- en: This entry specifies the permissions granted to the file owner. Each ACL contains
    exactly one `ACL_USER_OBJ` entry. This entry corresponds to the traditional file
    *owner* (*user*) permissions.
  prefs: []
  type: TYPE_NORMAL
- en: '`ACL_USER`'
  prefs: []
  type: TYPE_NORMAL
- en: This entry specifies the permissions granted to the user identified by the tag
    qualifier. An ACL may contain zero or more `ACL_USER` entries, but at most one
    `ACL_USER` entry may be defined for a particular user.
  prefs: []
  type: TYPE_NORMAL
- en: '`ACL_GROUP_OBJ`'
  prefs: []
  type: TYPE_NORMAL
- en: This entry specifies permissions granted to the file group. Each ACL contains
    exactly one `ACL_GROUP_OBJ` entry. This entry corresponds to the traditional file
    *group* permissions, unless the ACL also contains an `ACL_MASK` entry.
  prefs: []
  type: TYPE_NORMAL
- en: '`ACL_GROUP`'
  prefs: []
  type: TYPE_NORMAL
- en: This entry specifies the permissions granted to the group identified by the
    tag qualifier. An ACL may contain zero or more `ACL_GROUP` entries, but at most
    one `ACL_GROUP` entry may be defined for a particular group.
  prefs: []
  type: TYPE_NORMAL
- en: '`ACL_MASK`'
  prefs: []
  type: TYPE_NORMAL
- en: This entry specifies the maximum permissions that may be granted by `ACL_USER`,
    `ACL_GROUP_OBJ`, and `ACL_GROUP` entries. An ACL contains at most one `ACL_MASK`
    entry. If the ACL contains `ACL_USER` or `ACL_GROUP` entries, then an `ACL_MASK`
    entry is mandatory. We say more about this tag type shortly.
  prefs: []
  type: TYPE_NORMAL
- en: '`ACL_OTHER`'
  prefs: []
  type: TYPE_NORMAL
- en: This entry specifies the permissions that are granted to users that don’t match
    any other ACL entry. Each ACL contains exactly one `ACL_OTHER` entry. This entry
    corresponds to the traditional file *other* permissions.
  prefs: []
  type: TYPE_NORMAL
- en: The tag qualifier is employed only for `ACL_USER` and `ACL_GROUP` entries. It
    specifies either a user ID or a group ID.
  prefs: []
  type: TYPE_NORMAL
- en: Minimal and extended ACLs
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A *minimal* ACL is one that is semantically equivalent to the traditional file
    permission set. It contains exactly three entries: one of each of the types `ACL_USER_OBJ`,
    `ACL_GROUP_OBJ`, and `ACL_OTHER`. An *extended* ACL is one that additionally contains
    `ACL_USER`, `ACL_GROUP`, and `ACL_MASK` entries.'
  prefs: []
  type: TYPE_NORMAL
- en: One reason for drawing a distinction between minimal ACLs and extended ACLs
    is that the latter provide a semantic extension to the traditional permissions
    model. Another reason concerns the Linux implementation of ACLs. ACLs are implemented
    as *system* extended attributes ([Chapter 16](ch16.html "Chapter 16. Extended
    Attributes")). The extended attribute used for maintaining a file access ACL is
    named *system.posix_acl_access*. This extended attribute is required only if the
    file has an extended ACL. The permissions information for a minimal ACL can be
    (and is) stored in the traditional file permission bits.
  prefs: []
  type: TYPE_NORMAL
- en: ACL Permission-Checking Algorithm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Permission checking on a file that has an ACL is performed in the same circumstances
    as for the traditional file permissions model ([Permission-Checking Algorithm](ch15.html#permission-checking_algorithm
    "Permission-Checking Algorithm")). Checks are performed in the following order,
    until one of the criteria is matched:'
  prefs: []
  type: TYPE_NORMAL
- en: If the process is privileged, all access is granted. There is one exception
    to this statement, analogous to the traditional permissions model described in
    [Permission-Checking Algorithm](ch15.html#permission-checking_algorithm "Permission-Checking
    Algorithm"). When executing a file, a privileged process is granted execute permission
    only if that permission is granted via at least one of the ACL entries on the
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the effective user ID of the process matches the owner (user ID) of the file,
    then the process is granted the permissions specified in the `ACL_USER_OBJ` entry.
    (To be strictly accurate, on Linux, it is the process’s file-system IDs, rather
    than its effective IDs, that are used for the checks described in this section,
    as described in Section 9.5.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the effective user ID of the process matches the tag qualifier in one of
    the `ACL_USER` entries, then the process is granted the permissions specified
    in that entry, masked (ANDed) against the value of the `ACL_MASK` entry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If one of the process’s group IDs (i.e., the effective group ID or any of the
    supplementary group IDs) matches the file group (this corresponds to the `ACL_GROUP_OBJ`
    entry) or the tag qualifier of any of the `ACL_GROUP` entries, then access is
    determined by checking each of the following, until a match is found:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If one of the process’s group IDs matches the file group, and the `ACL_GROUP_OBJ`
    entry grants the requested permissions, then this entry determines the access
    granted to the file. The granted access is restricted by masking (ANDing) against
    the value in the `ACL_MASK` entry, if present.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If one of the process’s group IDs matches the tag qualifier in an `ACL_GROUP`
    entry for the file, and that entry grants the requested permissions, then this
    entry determines the permissions granted. The granted access is restricted by
    masking (ANDing) against the value in the `ACL_MASK` entry.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Otherwise, access is denied.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Otherwise, the process is granted the permissions specified in the `ACL_OTHER`
    entry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can clarify the rules relating to group IDs with some examples. Suppose
    we have a file whose group ID is 100, and that file is protected by the ACL shown
    in [Figure 17-1](ch17.html#an_access_control_list "Figure 17-1. An access control
    list"). If a process whose group ID is 100 makes the call *access(file, R_OK)*,
    then that call would succeed (i.e., return 0). (We describe *access()* in [Checking
    File Accessibility: *access()*](ch15.html#checking_file_accessibility_colon_access
    "Checking File Accessibility: access()").) On the other hand, even though the
    `ACL_GROUP_OBJ` entry grants all permissions, the call *access(file, R_OK | W_OK
    | X_OK)* would fail (i.e., return -1, with *errno* set to `EACCES`) because the
    `ACL_GROUP_OBJ` permissions are masked (ANDed) against the `ACL_MASK` entry, and
    this entry denies execute permission.'
  prefs: []
  type: TYPE_NORMAL
- en: As another example using [Figure 17-1](ch17.html#an_access_control_list "Figure 17-1. An
    access control list"), suppose we have a process that has a group ID of 102 and
    that also contains the group ID 103 in its supplementary group IDs. For this process,
    the calls *access*(*file*, *R*_*OK*) and *access*(*file*, *W*_*OK*) would both
    succeed, since they would match the `ACL_GROUP` entries for the group IDs 102
    and 103, respectively. On the other hand, the call *access*(*file*, *R*_*OK* |
    *W*_*OK*) would fail because there is no matching `ACL_GROUP` entry that grants
    both read and write permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Long and Short Text Forms for ACLs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When manipulating ACLs using the *setfacl* and *getfacl* commands (described
    in a moment) or certain ACL library functions, we specify textual representations
    of the ACL entries. Two formats are permitted for these textual representations:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Long text form* ACLs contain one ACL entry per line, and may include comments,
    which are started by a `#` character and continue to the end-of-line. The *getfacl*
    command displays ACLs in long text form. The *setfacl -M acl-file* option, which
    takes an ACL specification from a file, expects the specification to be in long
    text form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Short text form* ACLs consist of a sequence of ACL entries separated by commas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In both forms, each ACL entry consists of three parts separated by colons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The *tag-type* is one of the values shown in the first column of [Table 17-1](ch17.html#interpretation_of_acl_entry_text_forms
    "Table 17-1. Interpretation of ACL entry text forms"). The *tag-type* may optionally
    be followed by a *tag-qualifier*, which identifies a user or group, either by
    name or numeric identifier. The *tag-qualifier* is present only for `ACL_USER`
    and `ACL_GROUP` entries.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are all short text form ACLs corresponding to a traditional permissions
    mask of 0650:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following short text form ACL includes two named users, a named group,
    and a mask entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Table 17-1. Interpretation of ACL entry text forms
  prefs: []
  type: TYPE_NORMAL
- en: '| Tag text forms | Tag qualifier present? | Corresponding tag type | Entry
    for |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `u, user` | N | `ACL_USER_OBJ` | File owner (user) |'
  prefs: []
  type: TYPE_TB
- en: '| `u, user` | Y | `ACL_USER` | Specified user |'
  prefs: []
  type: TYPE_TB
- en: '| `g, group` | N | `ACL_GROUP_OBJ` | File group |'
  prefs: []
  type: TYPE_TB
- en: '| `g, group` | Y | `ACL_GROUP` | Specified group |'
  prefs: []
  type: TYPE_TB
- en: '| `m, mask` | N | `ACL_MASK` | Mask for group class |'
  prefs: []
  type: TYPE_TB
- en: '| `o, other` | N | `ACL_OTHER` | Other users |'
  prefs: []
  type: TYPE_TB
- en: The `ACL_MASK` Entry and the ACL Group Class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If an ACL contains `ACL_USER` or `ACL_GROUP` entries, then it must contain an
    `ACL_MASK` entry. If the ACL doesn’t contain any `ACL_USER` or `ACL_GROUP` entries,
    then the `ACL_MASK` entry is optional.
  prefs: []
  type: TYPE_NORMAL
- en: The `ACL_MASK` entry acts as an upper limit on the permissions granted by ACL
    entries in the so-called *group class*. The group class is the set of all `ACL_USER`,
    `ACL_GROUP`, and `ACL_GROUP_OBJ` entries in the ACL.
  prefs: []
  type: TYPE_NORMAL
- en: 'The purpose of the `ACL_MASK` entry is to provide consistent behavior when
    running ACL-unaware applications. As an example of why the mask entry is needed,
    suppose that the ACL on a file includes the following entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now suppose that a program executes the following *chmod()* call on this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In an ACL-unaware application, this means “Deny access to everyone except the
    file owner.” These semantics should hold even in the presence of ACLs. In the
    absence of an `ACL_MASK` entry, this behavior could be implemented in various
    ways, but there are problems with each approach:'
  prefs: []
  type: TYPE_NORMAL
- en: Simply modifying the `ACL_GROUP_OBJ` and `ACL_USER_OBJ` entries to have the
    mask `---` would be insufficient, since the user *paulh* and the group *teach*
    would still have some permissions on the file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Another possibility would be to apply the new group and other permission settings
    (i.e., all permissions disabled) to all of the `ACL_USER`, `ACL_GROUP`, `ACL_GROUP_OBJ`,
    and `ACL_OTHER` entries in the ACL:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The problem with this approach is that the ACL-unaware application would thereby
    inadvertently destroy the file permission semantics established by ACL-aware applications,
    since the following call (for example) would not restore the `ACL_USER` and `ACL_GROUP`
    entries of the ACL to their former states:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To avoid these problems, we might consider making the `ACL_GROUP_OBJ` entry
    the limiting set for all `ACL_USER` and `ACL_GROUP` entries. However, this would
    mean that the `ACL_GROUP_OBJ` permissions would always need to be set to the union
    of all permissions allowed in all `ACL_USER` and `ACL_GROUP` entries. This would
    conflict with the use of the `ACL_GROUP_OBJ` entry for determining the permissions
    accorded to the file group.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `ACL_MASK` entry was devised to solve these problems. It provides a mechanism
    that allows the traditional meanings of *chmod()* operations to be implemented,
    without destroying the file permission semantics established by ACL-aware applications.
    When an ACL has an `ACL_MASK` entry:'
  prefs: []
  type: TYPE_NORMAL
- en: all changes to traditional group permissions via *chmod()* change the setting
    of the `ACL_MASK` entry (rather than the `ACL_GROUP_OBJ` entry); and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a call to *stat()* returns the `ACL_MASK` permissions (instead of the `ACL_GROUP_OBJ`
    permissions) in the group permission bits of the *st_mode* field ([Figure 15-1](ch15.html#layout_of_st_underscore_mode_bit_mask
    "Figure 15-1. Layout of st_mode bit mask"), in [Device IDs and i-node number](ch15.html#device_ids_and_i-node_number-id1
    "Device IDs and i-node number")).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'While the `ACL_MASK` entry provides a way of preserving ACL information in
    the face of ACL-unaware applications, the reverse is not guaranteed. The presence
    of ACLs overrides the effect of traditional operations on file group permissions.
    For example, suppose that we have placed the following ACL on a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If we then execute the command *chmod g+rw* on this file, the ACL becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this case, group still has no access to the file. One workaround for this
    is to modify the ACL entry for group to grant all permissions. Consequently, group
    will then always obtain whatever permissions are granted to the `ACL_MASK` entry.
  prefs: []
  type: TYPE_NORMAL
- en: The *getfacl* and *setfacl* Commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the shell, we can use the *getfacl* command to view the ACL on a file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: From the output of the *getfacl* command, we see that the new file is created
    with a minimal ACL. When displaying the text form of this ACL, *getfacl* precedes
    the ACL entries with three lines showing the name and ownership of the file. We
    can prevent these lines from being displayed by specifying the *--omit-header*
    option.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we demonstrate that changes to a file’s permissions using the traditional
    *chmod* command are carried through to the ACL.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The *setfacl* command modifies a file ACL. Here, we use the *setfacl -m* command
    to add an `ACL_USER` and an `ACL_GROUP` entry to the ACL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The *setfacl -m* option modifies existing ACL entries, or adds new entries if
    corresponding entries with the given tag type and qualifier do not already exist.
    We can additionally use the *-R* option to recursively apply the specified ACL
    to all of the files in a directory tree.
  prefs: []
  type: TYPE_NORMAL
- en: From the output of the *getfacl* command, we can see that *setfacl* automatically
    created an `ACL_MASK` entry for this ACL.
  prefs: []
  type: TYPE_NORMAL
- en: 'The addition of the `ACL_USER` and `ACL_GROUP` entries converts this ACL into
    an extended ACL, and *ls* -*l* indicates this fact by appending a plus sign (+)
    after the traditional file permissions mask:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We continue by using *setfacl* to disable all permissions except execute on
    the `ACL_MASK` entry, and then view the ACL once more with *getfacl*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `#effective:` comments that *getfacl* prints after the entries for the user
    *paulh* and the file group (`group::`) inform us that after masking (ANDing) against
    the `ACL_MASK` entry, the permissions granted by each of these entries will actually
    be less than those specified in the entry.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then use *ls -l* to once more view the traditional permission bits of the
    file. We see that the displayed group class permission bits reflect the permissions
    in the `ACL_MASK` entry (`--x`), rather than those in the `ACL_GROUP` entry (`r-x`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The *setfacl -x* command can be used to remove entries from an ACL. Here, we
    remove the entries for the user *paulh* and the group *teach* (no permissions
    are specified when removing entries):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that during the above operation, *setfacl* automatically adjusted the
    mask entry to be the union of all of the group class entries. (There was just
    one such entry: `ACL_GROUP_OBJ`.) If we want to prevent such adjustment, then
    we must specify the *-n* option to *setfacl*.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we note that the *setfacl -b* option can be used to remove all extended
    entries from an ACL, leaving just the minimal (i.e., user, group, and other) entries.
  prefs: []
  type: TYPE_NORMAL
- en: Default ACLs and File Creation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the discussion of ACLs so far, we have been describing *access* ACLs. As
    its name implies, an access ACL is used in determining the permissions that a
    process has when accessing the file associated with the ACL. We can create a second
    type of ACL on directories: a *default* ACL.'
  prefs: []
  type: TYPE_NORMAL
- en: A default ACL plays no part in determining the permissions granted when accessing
    the directory. Instead, its presence or absence determines the ACL(s) and permissions
    that are placed on files and subdirectories that are created in the directory.
    (A default ACL is stored as an extended attribute named *system.posix_acl_default*.)
  prefs: []
  type: TYPE_NORMAL
- en: To view and set the default ACL of a directory, we use the *-d* option of the
    *getfacl* and *setfacl* commands.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: We can remove a default ACL from a directory using the *setfacl -k* option.
  prefs: []
  type: TYPE_NORMAL
- en: 'If a directory has a default ACL, then:'
  prefs: []
  type: TYPE_NORMAL
- en: A new subdirectory created in this directory inherits the directory’s default
    ACL as its default ACL. In other words, default ACLs propagate down through a
    directory tree as new subdirectories are created.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A new file or subdirectory created in this directory inherits the directory’s
    default ACL as its access ACL. The ACL entries that correspond to the traditional
    file permission bits are masked (ANDed) against the corresponding bits of the
    *mode* argument in the system call (*open(), mkdir()*, and so on) used to create
    the file or subdirectory. By “corresponding ACL entries,” we mean:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ACL_USER_OBJ`;'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ACL_MASK` or, if `ACL_MASK` is absent, then `ACL_GROUP_OBJ`; and'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ACL_OTHER`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When a directory has a default ACL, the process umask ([The Process File Mode
    Creation Mask: *umask()*](ch15.html#the_process_file_mode_creation_mask_colo "The
    Process File Mode Creation Mask: umask()")) doesn’t play a part in determining
    the permissions in the entries of the access ACL of a new file created in that
    directory.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example of how a new file inherits its access ACL from the parent directory’s
    default ACL, suppose we used the following *open()* call to create a new file
    in the directory created above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The new file would have the following access ACL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If a directory doesn’t have a default ACL, then:'
  prefs: []
  type: TYPE_NORMAL
- en: New subdirectories created in this directory also do not have a default ACL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The permissions of the new file or directory are set following the traditional
    rules ([The Process File Mode Creation Mask: *umask()*](ch15.html#the_process_file_mode_creation_mask_colo
    "The Process File Mode Creation Mask: umask()")): the file permissions are set
    to the value in the *mode* argument (given to *open()*, *mkdir()*, and so on),
    less the bits that are turned off by the process umask. This results in a minimal
    ACL on the new file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ACL Implementation Limits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The various file-system implementations impose limits on the number of entries
    in an ACL:'
  prefs: []
  type: TYPE_NORMAL
- en: On *ext2*, *ext3*, and *ext4*, the total number of ACLs on a file is governed
    by the requirement that the bytes in all of the names and values of a file’s extended
    attributes must be contained in a single logical disk block ([Extended Attribute
    Implementation Details](ch16.html#extended_attribute_implementation_detail "Extended
    Attribute Implementation Details")). Each ACL entry requires 8 bytes, so that
    the maximum number of ACL entries for a file is somewhat less (because of some
    overhead for the name of the extended attribute for the ACL) than one-eighth of
    the block size. Thus, a 4096-byte block size allows for a maximum of around 500
    ACL entries. (Kernels before 2.6.11 imposed an arbitrary limitation of 32 entries
    for ACLs on *ext2* and *ext3*.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On *XFS*, an ACL is limited to 25 entries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On *Reiserfs* and *JFS*, ACLs can contain up to 8191 entries. This limit is
    a consequence of the size limitation (64 kB) imposed by the VFS on the value of
    an extended attribute ([Extended Attribute Implementation Details](ch16.html#extended_attribute_implementation_detail
    "Extended Attribute Implementation Details")).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time of writing, *Btrfs* limits ACLs to around 500 entries. However,
    since *Btrfs* was still under heavy development, this limit may change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although most of the above file systems allow large numbers of entries to be
    created in an ACL, this should be avoided for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: The maintenance of lengthy ACLs becomes a complex and potentially error-prone
    system administration task.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The amount of time required to scan the ACL for the matching entry (or matching
    entries in the case of group ID checks) increases linearly with the number of
    ACL entries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Generally, we can keep the number of ACL entries on a file down to a reasonable
    number by defining suitable groups in the system group file ([The Group File:
    `/etc/group`](ch08.html#the_group_file_colon__solidus_etc_solidu "The Group File:
    /etc/group")) and using those groups within the ACL.'
  prefs: []
  type: TYPE_NORMAL
- en: The ACL API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The POSIX.1e draft standard defined a large suite of functions and data structures
    for manipulating ACLs. Since they are so numerous, we won’t attempt to describe
    the details of all of these functions. Instead, we provide an overview of their
    usage and conclude with an example program.
  prefs: []
  type: TYPE_NORMAL
- en: Programs that use the ACL API should include `<sys/acl.h>`. It may also be necessary
    to include `<acl/libacl.h>` if the program makes use of various Linux extensions
    to the POSIX.1e draft standard. (A list of the Linux extensions is provided in
    the *acl(5)* manual page.) Programs using this API must be compiled with the *-lacl*
    option, in order to link against the *libacl* library.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As already noted, on Linux, ACLs are implemented using extended attributes,
    and the ACL API is implemented as a set of library functions that manipulate user-space
    data structures, and, where necessary, make calls to *getxattr()* and *setxattr()*
    to retrieve and modify the on-disk *system* extended attribute that holds the
    ACL representation. It is also possible (though not recommended) for an application
    to use *getxattr()* and *setxattr()* to manipulate ACLs directly.
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The functions that constitute the ACL API are listed in the *acl(5)* manual
    page. At first sight, this plethora of functions and data structures can seem
    bewildering. [Figure 17-2](ch17.html#relationship_between_acl_library_functio
    "Figure 17-2. Relationship between ACL library functions and data structures")
    provides an overview of the relationship between the various data structures and
    indicates the use of many of the ACL functions.
  prefs: []
  type: TYPE_NORMAL
- en: '![Relationship between ACL library functions and data structures](figs/web/17-2_ACL-ACL-API.png.jpg)Figure 17-2. Relationship
    between ACL library functions and data structures'
  prefs: []
  type: TYPE_NORMAL
- en: 'From [Figure 17-2](ch17.html#relationship_between_acl_library_functio "Figure 17-2. Relationship
    between ACL library functions and data structures"), we can see that the ACL API
    considers an ACL as a hierarchical object:'
  prefs: []
  type: TYPE_NORMAL
- en: An ACL consists of one or more ACL entries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each ACL entry consists of a tag type, an optional tag qualifier, and a permission
    set.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We now look briefly at the various ACL functions. In most cases, we don’t describe
    the error returns from each function. Functions that return an integer (*status*)
    typically return 0 on success and -1 on error. Functions that return a handle
    (pointer) return `NULL` on error. Errors can be diagnosed using *errno* in the
    usual manner.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *handle* is an abstract term for some technique used to refer to an object
    or data structure. The representation of a handle is private to the API implementation.
    It may be, for example, a pointer, an array index, or a hash key.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching a file’s ACL into memory
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The *acl_get_file()* function retrieves a copy of the ACL of the file identified
    by *pathname*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This function retrieves either the access ACL or the default ACL, depending
    on whether *type* is specified as `ACL_TYPE_ACCESS` or `ACL_TYPE_DEFAULT`. As
    its function result, *acl_get_file()* returns a handle (of type *acl_t*) for use
    with other ACL functions.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving entries from an in-memory ACL
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The *acl_get_entry()* function returns a handle (of type *acl_entry_t*) referring
    to one of the ACL entries within the in-memory ACL referred to by its *acl* argument.
    This handle is returned in the location pointed to by the final function argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The *entry_id* argument determines which entry’s handle is returned. If *entry_id*
    is specified as `ACL_FIRST_ENTRY`, then a handle for the first entry in the ACL
    is returned. *If entry_id* is specified as `ACL_NEXT_ENTRY`, then a handle is
    returned for the entry following the last ACL entry that was retrieved. Thus,
    we can loop through all of the entries in an ACL by specifying *type* as `ACL_FIRST_ENTRY`
    in the first call to *acl_get_entry()* and specifying *type* as `ACL_NEXT_ENTRY`
    in subsequent calls.
  prefs: []
  type: TYPE_NORMAL
- en: The *acl_get_entry()* function returns 1 if it successfully fetches an ACL entry,
    0 if there are no more entries, or -1 on error.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving and modifying attributes in an ACL entry
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The *acl_get_tag_type()* and *acl_set_tag_type()* functions retrieve and modify
    the tag type in the ACL entry referred to by their *entry* argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The *tag_type* argument has the type *acl_type_t* (an integer type), and has
    one of the values `ACL_USER_OBJ`, `ACL_USER`, `ACL_GROUP_OBJ`, `ACL_GROUP`, `ACL_OTHER`,
    or `ACL_MASK`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *acl_get_qualifier()* and *acl_set_qualifier()* functions retrieve and
    modify the tag qualifier in the ACL entry referred to by their *entry* argument.
    Here is an example, in which we assume that we have already determined that this
    is an `ACL_USER` entry by inspecting the tag type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The tag qualifier is valid only if the tag type of this entry is `ACL_USER`
    or `ACL_GROUP`. In the former case, *qualp* is a pointer to a user ID (*uid_t
    **); in the latter case, it is a pointer to a group ID (*gid_t **).
  prefs: []
  type: TYPE_NORMAL
- en: The *acl_get_permset()* and *acl_set_permset()* functions retrieve and modify
    the permission set in the ACL entry referred to by their *entry* argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The *acl_permset_t* data type is a handle referring to a permission set.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following functions are used to manipulate the contents of a permission
    set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In each of these calls, *perm* is specified as `ACL_READ`, `ACL_WRITE`, or
    `ACL_EXECUTE`, with the obvious meanings. These functions are used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The *acl_get_perm()* function returns 1 (true) if the permission specified in
    *perm* is enabled in the permission set referred to by *permset*, or 0 if it is
    not. This function is a Linux extension to the POSIX.1e draft standard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *acl_add_perm()* function adds the permission specified in *perm* to the
    permission set referred to by *permset*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *acl_delete_perm()* function removes the permission specified in *perm*
    from the permission set referred to by *permset*. (It is not an error to remove
    a permission if it is not present in the set.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *acl_clear_perms()* function removes all permissions from the permission
    set referred to by *permset*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and deleting ACL entries
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The *acl_create_entry()* function creates a new entry in an existing ACL. A
    handle referring to the new entry is returned in the location pointed to by the
    second function argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The new entry can then be populated using the functions described previously.
  prefs: []
  type: TYPE_NORMAL
- en: The *acl_delete_entry()* function removes an entry from an ACL.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Updating a file’s ACL
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The *acl_set_file()* function is the converse of *acl_get_file()*. It updates
    the on-disk ACL with the contents of the in-memory ACL referred to by its *acl*
    argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The *type* argument is either `ACL_TYPE_ACCESS`, to update the access ACL, or
    `ACL_TYPE_DEFAULT`, to update a directory’s default ACL.
  prefs: []
  type: TYPE_NORMAL
- en: Converting an ACL between in-memory and text form
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The *acl_from_text()* function translates a string containing a long or short
    text form ACL into an in-memory ACL, and returns a handle that can be used to
    refer to the ACL in subsequent function calls.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The *acl_to_text()* function performs the reverse conversion, returning a long
    text form string corresponding to the ACL referred to by its *acl* argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: If the *len* argument is not specified as `NULL`, then the buffer it points
    to is used to return the length of the string returned as the function result.
  prefs: []
  type: TYPE_NORMAL
- en: Other functions in the ACL API
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The following paragraphs describe several other commonly used ACL functions
    that are not shown in [Figure 17-2](ch17.html#relationship_between_acl_library_functio
    "Figure 17-2. Relationship between ACL library functions and data structures").
  prefs: []
  type: TYPE_NORMAL
- en: The *acl_calc_mask(&acl)* function calculates and sets the permissions in the
    `ACL_MASK` entry of the in-memory ACL whose handle is pointed to by its argument.
    Typically, we use this function whenever we create or modify an ACL. The `ACL_MASK`
    permissions are calculated as the union of the permissions in all `ACL_USER`,
    `ACL_GROUP`, and `ACL_GROUP_OBJ` entries. A useful property of this function is
    that it creates the `ACL_MASK` entry if it doesn’t already exist. This means that
    if we add `ACL_USER` and `ACL_GROUP` entries to a previously minimal ACL, then
    we can use this function to ensure the creation of the `ACL_MASK` entry.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *acl_valid(acl)* function returns 0 if the ACL referred to by its argument
    is valid, or -1 otherwise. An ACL is valid if all of the following are true:'
  prefs: []
  type: TYPE_NORMAL
- en: the `ACL_USER_OBJ`, `ACL_GROUP_OBJ`, and `ACL_OTHER` entries appear exactly
    once;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: there is an `ACL_MASK` entry if any `ACL_USER` or `ACL_GROUP` entries are present;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: there is at most one `ACL_MASK` entry;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: each `ACL_USER` entry has a unique user ID; and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: each `ACL_GROUP` entry has a unique group ID.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *acl_check()* and *acl_error()* functions (the latter is a Linux extension)
    are alternatives to *acl_valid()* that are less portable, but provide a more precise
    description of the error in a malformed ACL. See the manual pages for details.
  prefs: []
  type: TYPE_NORMAL
- en: The *acl_delete_def_file(pathname)* function removes the default ACL on the
    directory referred to by *pathname*.
  prefs: []
  type: TYPE_NORMAL
- en: The *acl_init(count)* function creates a new, empty ACL structure that initially
    contains space for at least *count* ACL entries. (The *count* argument is a hint
    to the system about intended usage, not a hard limit.) A handle for the new ACL
    is returned as the function result.
  prefs: []
  type: TYPE_NORMAL
- en: The *acl_dup(acl)* function creates a duplicate of the ACL referred to by *acl*
    and returns a handle for the duplicate ACL as its function result.
  prefs: []
  type: TYPE_NORMAL
- en: The *acl_free(handle)* function frees memory allocated by other ACL functions.
    For example, we must use *acl_free()* to free memory allocated by calls to *acl_from_text()*,
    *acl_to_text()*, *acl_get_file()*, *acl_init()*, and *acl_dup()*.
  prefs: []
  type: TYPE_NORMAL
- en: Example program
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Example 17-1](ch17.html#display_the_access_or_default_acl_on_a_f "Example 17-1. Display
    the access or default ACL on a file") demonstrates the use of some of the ACL
    library functions. This program retrieves and displays the ACL on a file (i.e.,
    it provides a subset of the functionality of the *getfacl* command). If the *-d*
    command-line option is specified, then the program displays the default ACL (of
    a directory) instead of the access ACL.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of the use of this program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The source code distribution of this book also includes a program, `acl/acl_update.c`,
    that performs updates on an ACL (i.e., it provides a subset of the functionality
    of the *setfacl* command).
  prefs: []
  type: TYPE_NORMAL
- en: Example 17-1. Display the access or default ACL on a file
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From version 2.6 onward, Linux supports ACLs. ACLs extend the traditional UNIX
    file permissions model, allowing file permissions to be controlled on a per-user
    and per-group basis.
  prefs: []
  type: TYPE_NORMAL
- en: Further information
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The final versions (*Draft 17*) of the draft POSIX.1e and POSIX.2c standards
    are available online at [http://wt.tuxomania.net/publications/posix.1e/](http://wt.tuxomania.net/publications/posix.1e/).
  prefs: []
  type: TYPE_NORMAL
- en: The *acl(5)* manual page gives an overview of ACLs and some guidance on the
    portability of the various ACL library functions implemented on Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Details of the Linux implementation of ACLs and extended attributes can be found
    in [Grünbacher, 2003]. Andreas Grünbacher maintains a web site containing information
    about ACLs at [http://acl.bestbits.at/](http://acl.bestbits.at/).
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write a program that displays the permissions from the ACL entry that corresponds
    to a particular user or group. The program should take two command-line arguments.
    The first argument is either of the letters *u* or *g*, indicating whether the
    second argument identifies a user or group. (The functions defined in [Example 8-1](ch08.html#functions_to_convert_user_and_group_ids
    "Example 8-1. Functions to convert user and group IDs to and from user and group
    names"), in [Example program](ch08.html#example_program-id5 "Example program"),
    can be used to allow the second command-line argument to be specified numerically
    or as a name.) If the ACL entry that corresponds to the given user or group falls
    into the group class, then the program should additionally display the permissions
    that would apply after the ACL entry has been modified by the ACL mask entry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
