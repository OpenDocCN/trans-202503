- en: '**5'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**5'
- en: UML ACTIVITY DIAGRAMS**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: UML 活动图**
- en: '![Image](Images/com.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/com.jpg)'
- en: UML *activity diagrams*, traditionally known as *flowcharts*, illustrate the
    workflow between different components of a system. Flowcharts were prevalent in
    the early days of software development and were still used in software design
    just before the rise of object-oriented programming (OOP). Although the UML object-oriented
    notation supersedes old-fashioned flowcharting to a large extent, OOP still relies
    on small methods, functions, and procedures to implement the low-level, nitty-gritty
    details, and flowcharting is useful for describing control flow in those cases.
    Hence, UML’s designers created activity diagrams as an updated version of flowcharting.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: UML *活动图*，传统上称为*流程图*，用于说明系统不同组件之间的工作流。流程图在软件开发的早期阶段非常流行，并且在面向对象编程（OOP）兴起之前的时期仍然用于软件设计。虽然
    UML 面向对象的符号在很大程度上取代了传统的流程图，但 OOP 仍然依赖于小方法、函数和过程来实现低级的、细节丰富的部分，而流程图在这些情况下仍然用于描述控制流。因此，UML
    的设计者创建了活动图，作为流程图的更新版本。
- en: '**5.1 UML Activity State Symbols**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**5.1 UML 活动状态符号**'
- en: UML activity diagrams use state symbols based on traditional flowchart symbols.
    This section describes some of the ones you’ll commonly use.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: UML 活动图使用基于传统流程图符号的状态符号。本节描述了你将常用的一些符号。
- en: '**NOTE**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you want information on general flowcharting, any web search should yield
    decent results.*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你想了解关于一般流程图的信息，任何网络搜索应该都会有不错的结果。*'
- en: '***5.1.1 Start and Stop States***'
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***5.1.1 起始和停止状态***'
- en: UML diagrams always contain a single *start state*, which represents the start
    terminal object. This consists of a solid circle with a single arrow (*transition*
    in UML parlance) coming from it. You might associate the start state with a label,
    which would be the name of the whole activity diagram.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: UML 图总是包含一个单一的*起始状态*，表示开始终端对象。它由一个实心圆和一个从中指向的单箭头（UML 术语中的*过渡*）组成。你可以将起始状态与一个标签关联，该标签可以是整个活动图的名称。
- en: UML also usually contains *end state* and *end flow* symbols. An end state symbol
    terminates an entire process, while an end flow symbol terminates a single thread,
    useful for processes that involve multiple threads of execution. You might associate
    the end state symbol with a label that indicates the system’s state at the end
    of the process.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: UML 通常还包含*结束状态*和*结束流程*符号。结束状态符号表示整个过程的终止，而结束流程符号表示单个线程的终止，适用于涉及多个执行线程的过程。你可以将结束状态符号与一个标签关联，表示过程结束时系统的状态。
- en: '[Figure 5-1](ch05.xhtml#ch5fig1) shows the start state, end state, and end
    flow symbols.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 5-1](ch05.xhtml#ch5fig1) 显示了起始状态、结束状态和结束流程符号。'
- en: '![image](Images/fig5-1.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-1.jpg)'
- en: '*Figure 5-1: UML starting and ending states*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-1: UML 的起始和结束状态*'
- en: While an activity diagram has only one starting state symbol, it might have
    multiple ending state symbols (think of a method returning from several points
    in the code). The labels attached to the various ending states will likely be
    different, such as “exception exit” and “normal exit.”
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管活动图只有一个起始状态符号，但它可能有多个结束状态符号（想象一个方法从代码中的多个点返回）。附加在各种结束状态上的标签可能不同，如“异常退出”和“正常退出”。
- en: '***5.1.2 Activities***'
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***5.1.2 活动***'
- en: Activity symbols in UML are rectangles with semicircular ends (like the terminal
    symbol in a flowchart) that represent some action, as shown in [Figure 5-2](ch05.xhtml#ch5fig2).^([1](ch19_footnote.xhtml#ch05fn1))
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: UML 中的活动符号是带有半圆形端点的矩形（类似于流程图中的终止符号），表示某个动作，如[图 5-2](ch05.xhtml#ch5fig2)所示。^([1](ch19_footnote.xhtml#ch05fn1))
- en: '![image](Images/fig5-2.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-2.jpg)'
- en: '*Figure 5-2: UML activities*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-2: UML 活动*'
- en: Activities, as a general rule, correspond to one or more statements (actions)
    in a programming language that execute sequentially. The text inside the symbol
    describes the action to perform, such as “read data” or “compute CRC.” Generally,
    a UML activity doesn’t include much low-level detail; it’s the programmer’s job
    to provide that.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 活动通常对应于编程语言中的一条或多条语句（动作），并按顺序执行。符号内的文本描述了要执行的动作，如“读取数据”或“计算 CRC”。一般来说，UML 活动图不包含太多低级细节；提供这些细节的任务由程序员负责。
- en: '***5.1.3 States***'
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***5.1.3 状态***'
- en: UML activity diagrams also provide intermediate states, in addition to start
    and end states, which effectively act as milestones indicating some existing condition(s)
    at the point of the state symbol. State symbols are rounded rectangles (*roundangles*),
    as shown in [Figure 5-3](ch05.xhtml#ch5fig3), although the rounded corners are
    much smaller than those of activity symbols.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: UML 活动图除了起始状态和结束状态外，还提供了中间状态，这些状态实际上充当了里程碑，指示在状态符号的某一点上存在的某些条件。状态符号是圆角矩形（*roundangles*），如[图
    5-3](ch05.xhtml#ch5fig3)所示，尽管圆角的大小比活动符号的圆角小得多。
- en: '![image](Images/fig5-3.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-3.jpg)'
- en: '*Figure 5-3: UML states*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-3: UML 状态*'
- en: The text in the state symbol should describe the state of the system at that
    given point. For example, if the activity is “compute CRC,” you might label the
    state immediately following it as “CRC computed” or “CRC available.” States don’t
    incorporate any action, only the current condition of the system at a given point.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 状态符号中的文本应描述系统在该特定点的状态。例如，如果活动是“计算 CRC”，你可能会将紧接其后的状态标记为“CRC 已计算”或“CRC 可用”。状态不包含任何动作，只表示在特定时刻系统的当前状态。
- en: '***5.1.4 Transitions***'
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***5.1.4 过渡***'
- en: Transitions indicate a flow of control from one point in an activity diagram
    (for example, a state or activity) to another. If a transition flows out of some
    activity, it means the system makes that transition upon completing most of the
    actions associated with that activity. If a pair of transitions flows into and
    out of a state, control flow transfers immediately to wherever the outgoing arrow
    points. A UML state is effectively a marker in the middle of a transition, and
    so no action takes place in a UML state, as shown in [Figure 5-4](ch05.xhtml#ch5fig4).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡表示活动图中从一个点（例如状态或活动）到另一个点的控制流。如果一个过渡从某个活动流出，则表示系统在完成该活动的大部分动作后会进行该过渡。如果一对过渡流入并流出一个状态，则控制流会立即转移到流出箭头所指向的地方。UML
    状态实际上是过渡中的一个标记，因此在 UML 状态中不会发生任何动作，如[图 5-4](ch05.xhtml#ch5fig4)所示。
- en: '![image](Images/fig5-4.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-4.jpg)'
- en: '*Figure 5-4: Control flow through a state*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-4: 通过一个状态的控制流*'
- en: '***5.1.5 Conditionals***'
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***5.1.5 条件语句***'
- en: 'You can handle conditionals in a couple of different ways in a UML activity
    diagram: transition guards and decision points.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 UML 活动图中，你可以通过几种不同的方式处理条件语句：过渡守卫和决策点。
- en: '**5.1.5.1 Transition Guards**'
  id: totrans-31
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**5.1.5.1 过渡守卫**'
- en: In conditionals, a Boolean expression is attached to a transition symbol. UML
    calls these Boolean expressions *guards*. A conditional UML symbol must have at
    least two guarded transitions, which are labeled with expressions surrounded by
    square brackets, but might have more than two, as in [Figure 5-5](ch05.xhtml#ch5fig5)
    (where the hexagon shape represents an arbitrary UML symbol).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在条件语句中，布尔表达式附加在过渡符号上。UML 称这些布尔表达式为*守卫*。一个条件 UML 符号必须至少有两个受保护的过渡，这些过渡用方括号括起来的表达式标注，但可能有超过两个，如[图
    5-5](ch05.xhtml#ch5fig5)所示（其中六边形形状表示一个任意的 UML 符号）。
- en: '![image](Images/fig5-5.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-5.jpg)'
- en: '*Figure 5-5: Transition guards*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-5: 过渡守卫*'
- en: The set of Boolean expressions must be mutually exclusive; that is, only one
    expression can be `true` at all times. Furthermore, the expression coverage must
    be *complete*, which in this context means that for all possible combinations
    of input values, at least one Boolean expression in a set of guarded transitions
    must evaluate to `true` (which, combined with the first condition, means *exactly
    one* Boolean condition must evaluate to `true`).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式的集合必须是互斥的；也就是说，在任何时候，只有一个表达式可以为`true`。此外，表达式覆盖必须是*完整的*，在此语境中，意味着对于所有可能的输入值组合，至少一个布尔表达式在一组受保护的过渡中必须评估为`true`（这与第一个条件结合起来，意味着*只有一个*布尔条件必须评估为`true`）。
- en: If you want a “catch-all” transition to handle any input values that the existing
    guards don’t handle, just attach a word like *else*, *otherwise*, or *default*
    to a transition (see [Figure 5-6](ch05.xhtml#ch5fig6)).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望有一个“通用”的过渡来处理现有守卫未处理的任何输入值，只需在过渡上附加如*else*、*otherwise* 或 *default* 等词语（见[图
    5-6](ch05.xhtml#ch5fig6)）。
- en: '![image](Images/fig5-6.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-6.jpg)'
- en: '*Figure 5-6: Catch-all transition guard*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-6: 通用过渡守卫*'
- en: '**5.1.5.2 Decision Points**'
  id: totrans-39
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**5.1.5.2 决策点**'
- en: Transitions with guards can exit just about any UML symbol; state and action
    symbols often contain them. Problems can occur, however, if you have several actions
    or states merging into a single point at which a decision can create divergent
    paths. For this, UML provides a special symbol, the *decision point*, to cleanly
    collect and join paths where a decision branch occurs. Decision points use a diamond-shaped
    symbol, as shown in [Figure 5-7](ch05.xhtml#ch5fig7).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 带有守卫的转换几乎可以从任何 UML 符号中退出；状态和动作符号通常包含它们。然而，如果多个动作或状态合并到一个决策点，这时可能会产生问题，决策可能会创建分支路径。为此，UML
    提供了一个特殊符号，*决策点*，来清晰地收集和连接发生决策分支的路径。决策点使用菱形符号，如[图 5-7](ch05.xhtml#ch5fig7)所示。
- en: '![image](Images/fig5-7.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-7.jpg)'
- en: '*Figure 5-7: A UML decision point*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-7：一个 UML 决策点*'
- en: Although UML allows guarded transitions to emanate from any UML symbol, it’s
    good practice to always use a decision point to begin a set of related guarded
    transitions.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 UML 允许受控转换从任何 UML 符号中发出，但最佳实践是始终使用决策点来开始一组相关的受控转换。
- en: '***5.1.6 Merge Points***'
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***5.1.6 合并点***'
- en: In UML we can also use the diamond shape to collect several incoming transitions
    into a single outgoing transition, as shown in [Figure 5-8](ch05.xhtml#ch5fig8);
    we call this a *merge point*.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 UML 中，我们还可以使用菱形符号将多个进入的转换收集到一个外出的转换中，如[图 5-8](ch05.xhtml#ch5fig8)所示；我们称之为*合并点*。
- en: '![image](Images/fig5-8.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-8.jpg)'
- en: '*Figure 5-8: A UML merge point*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-8：一个 UML 合并点*'
- en: Technically, a merge point and a decision point are the same object type. Essentially,
    a merge point is an unnamed state object; it takes no action other than passing
    control from all the incoming transitions to the outgoing transition. A decision
    point is just a special case of a merge point that has multiple outgoing guarded
    transitions.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，合并点和决策点是相同的对象类型。实质上，合并点是一个没有名字的状态对象；它除了将控制从所有进入的转换传递到出去的转换外，不进行其他任何操作。决策点则是合并点的一个特殊情况，它有多个外出的受控转换。
- en: In theory, a merge point could have both multiple incoming and outgoing guarded
    transitions. However, the result would be so ugly that the common convention is
    instead to divide the single point into separate merge and decision points, as
    shown in [Figure 5-9](ch05.xhtml#ch5fig9). Most of the time, this separation is
    clearer and easier to read than the alternative.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 从理论上讲，合并点可以有多个进入和外出的受控转换。然而，结果可能会非常复杂，因此常规做法是将单一的合并点拆分成独立的合并点和决策点，如[图 5-9](ch05.xhtml#ch5fig9)所示。大多数情况下，这种分离比替代方案更清晰且易于阅读。
- en: '![image](Images/fig5-9.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-9.jpg)'
- en: '*Figure 5-9: UML merge and decision points*'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-9：UML 合并点和决策点*'
- en: '***5.1.7 Events and Triggers***'
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***5.1.7 事件和触发器***'
- en: Events and triggers are actions outside the current flow of control, typically
    from some other thread of execution or hardware input, that cause some change
    in it.^([2](ch19_footnote.xhtml#ch05fn2)) In UML, event and trigger transitions
    are syntactically similar to guarded transitions in that they consist of a labeled
    transition. The difference is that a guarded transition immediately evaluates
    some Boolean expression and transfers control to the UML symbol at the other end
    of the transition, whereas an event or trigger transition waits for the event
    or trigger to occur before transferring control.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 事件和触发器是控制流外的动作，通常来自其他执行线程或硬件输入，它们会导致控制流的某些变化。^([2](ch19_footnote.xhtml#ch05fn2))
    在 UML 中，事件和触发器转换在语法上与带有守卫的转换相似，因为它们都由标记的转换组成。不同之处在于，带有守卫的转换会立即评估某个布尔表达式，并将控制转移到转换另一端的
    UML 符号，而事件或触发器转换则在事件或触发器发生之前等待，然后才转移控制。
- en: Event and trigger transitions are labeled with the name of the event or trigger
    along with any necessary parameters provided to the control flow when it occurs
    (see [Figure 5-10](ch05.xhtml#ch5fig10)).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 事件和触发器转换标有事件或触发器的名称，以及发生时提供给控制流的任何必要参数（参见[图 5-10](ch05.xhtml#ch5fig10)）。
- en: '![image](Images/fig5-10.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-10.jpg)'
- en: '*Figure 5-10: UML events or triggers*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-10：UML 事件或触发器*'
- en: In this example, the system is waiting for input from the user (perhaps clicking
    a UI button on the display). When the user activates the save, exit, or load operation,
    control transfers to the specified action at the end of the event or trigger transition
    (Save file, Quit program, or Load file, respectively).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，系统正在等待用户的输入（可能是点击显示屏上的一个 UI 按钮）。当用户激活保存、退出或加载操作时，控制将转移到事件或触发器转换末尾指定的动作（分别是保存文件、退出程序或加载文件）。
- en: You can also attach guard conditions to an event or trigger transition, consisting
    of a Boolean expression inside square brackets immediately following the trigger
    or event, as shown in [Figure 5-11](ch05.xhtml#ch5fig11). When you do so, the
    transition occurs only when the event or trigger occurs and the guard expression
    evaluates to `true`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将守卫条件附加到事件或触发过渡中，守卫条件是一个布尔表达式，位于触发器或事件后面的方括号内，如[图 5-11](ch05.xhtml#ch5fig11)所示。这样，过渡只有在事件或触发发生且守卫表达式求值为`true`时才会发生。
- en: '![image](Images/fig5-11.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-11.jpg)'
- en: '*Figure 5-11: Guard conditions on events or triggers*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-11：事件或触发器上的守卫条件*'
- en: UML events and triggers also support action expressions and multiple actions,
    which are beyond the scope of this chapter. To find out more, check out examples
    in Tom Pender’s *UML Bible* (see “[For More Information](ch05.xhtml#lev-5.3)”
    on [page 100](ch05.xhtml#page_100)).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: UML事件和触发器还支持动作表达式和多个动作，这些内容超出了本章的范围。如需了解更多内容，请查阅Tom Pender的*UML圣经*中的示例（参见[更多信息](ch05.xhtml#lev-5.3)在[第100页](ch05.xhtml#page_100)）。
- en: '***5.1.8 Forks and Joins (Synchronization)***'
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***5.1.8 分叉与合并（同步）***'
- en: UML offers support for concurrent processing by providing symbols to split a
    single thread of execution into multiple threads as well as to join multiple threads
    of execution into a single thread (see [Figure 5-12](ch05.xhtml#ch5fig12)).^([3](ch19_footnote.xhtml#ch05fn3))
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: UML通过提供符号支持并发处理，允许将单个执行线程拆分成多个线程，以及将多个执行线程合并为单个线程（见[图 5-12](ch05.xhtml#ch5fig12)）。^([3](ch19_footnote.xhtml#ch05fn3))
- en: '![image](Images/fig5-12.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-12.jpg)'
- en: '*Figure 5-12: Forks and joins*'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-12：分叉与合并*'
- en: 'The UML *fork* operation (a thin, solid rectangle) splits a single thread of
    execution into two or more concurrent operations. The *join* operation (also represented
    by a thin, solid rectangle) merges multiple sets of threads into a single thread
    of execution. The join operation also synchronizes the threads: the diagram assumes
    that all but the last thread entering the join operation will halt until the final
    thread arrives, at which point a single thread of execution continues on output.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: UML的*分叉*操作（一个细的实心矩形）将单一的执行线程分割成两个或多个并发操作。*合并*操作（同样由细的实心矩形表示）将多个线程集合合并为一个执行线程。合并操作还会同步线程：该图假设，进入合并操作的所有线程，除了最后一个线程，将会暂停，直到最后一个线程到达，这时单个执行线程将继续进行。
- en: '***5.1.9 Call Symbols***'
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***5.1.9 调用符号***'
- en: A call symbol in UML, which looks like a small rake, attaches to an activity
    to explicitly declare it as an invocation of another UML sequence. You include
    the call symbol inside the UML activity along with the name of the sequence to
    invoke, as shown in [Figure 5-13](ch05.xhtml#ch5fig13).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: UML中的调用符号，看起来像一个小耙子，附加到活动上，明确声明它是另一个UML序列的调用。你将在UML活动中包含调用符号，并附上要调用的序列名称，如[图
    5-13](ch05.xhtml#ch5fig13)所示。
- en: Elsewhere in your UML document, you’ll define that sequence (or *subroutine*)
    using the invocation name as the activity diagram name, as shown in [Figure 5-14](ch05.xhtml#ch5fig14).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在UML文档的其他部分，你会使用调用名称作为活动图的名称来定义该序列（或*子程序*），如[图 5-14](ch05.xhtml#ch5fig14)所示。
- en: '![image](Images/fig5-13.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-13.jpg)'
- en: '*Figure 5-13: A UML sequence invocation*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-13：一个UML序列调用*'
- en: '![image](Images/fig5-14.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-14.jpg)'
- en: '*Figure 5-14: A UML subroutine*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-14：一个UML子程序*'
- en: '***5.1.10 Partitions***'
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***5.1.10 分区***'
- en: Partitions, which organize the steps of a process, consist of several side-by-side
    rectangular boxes, each labeled at the top with an actor, object, or domain name.^([4](ch19_footnote.xhtml#ch05fn4))
    The activity diagram transitions between the boxes as each part of the process
    comes under the control of the owner of a given box, as shown in [Figure 5-15](ch05.xhtml#ch5fig15).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 分区用于组织一个过程的步骤，由多个并排的矩形框组成，每个框的顶部标有一个参与者、对象或域名。^([4](ch19_footnote.xhtml#ch05fn4))
    活动图在框之间过渡，当过程的每个部分由某个框的拥有者控制时，正如[图 5-15](ch05.xhtml#ch5fig15)所示。
- en: '![image](Images/fig5-15.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-15.jpg)'
- en: '*Figure 5-15: A UML partition*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-15：一个UML分区*'
- en: 'The process in [Figure 5-15](ch05.xhtml#ch5fig15) shows some code under test.
    An operator selects a test to run, passing control to the test software. An event
    or trigger then transfers control to the “Run test #1” action. The test software
    calls the code under test (in the third partition). After the code under test
    executes, control returns to the test software, which determines whether the test
    passed or failed. If the test passes, the test code displays “Pass” to the operator;
    other­wise, the test code runs a diagnostic routine.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 5-15](ch05.xhtml#ch5fig15)中的过程展示了正在测试的代码。一个操作员选择要运行的测试，控制权交给测试软件。一个事件或触发器随后将控制权转交给“运行测试#1”的动作。测试软件调用正在测试的代码（位于第三个分区）。在代码执行完毕后，控制返回测试软件，测试软件根据测试是否通过来决定是显示“通过”给操作员，还是运行诊断程序。'
- en: '***5.1.11 Comments and Annotations***'
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***5.1.11 评论和注释***'
- en: Comments and annotations in UML use an icon that looks like a small page with
    a folded corner, as shown in [Figure 5-16](ch05.xhtml#ch5fig16). You draw a dashed
    line from one side of the box to the UML item you want to annotate.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: UML中的评论和注释使用一个看起来像小纸张并有折角的图标，如[图 5-16](ch05.xhtml#ch5fig16)所示。你需要从框的一侧画一条虚线，指向你想要注释的UML元素。
- en: '![image](Images/fig5-16.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-16.jpg)'
- en: '*Figure 5-16: A UML comment or annotation*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-16：UML评论或注释*'
- en: '***5.1.12 Connectors***'
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***5.1.12 连接器***'
- en: Connectors are circles with an internal label, typically a number, that indicate
    that control transfers to some other point in the diagram with the same label
    (see [Figure 5-17](ch05.xhtml#ch5fig17)). You’d use the same symbol for on-page
    and off-page connectors.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 连接器是带有内部标签（通常是数字）的圆圈，表示控制流转移到图中另一个具有相同标签的点（见[图 5-17](ch05.xhtml#ch5fig17)）。你可以使用相同的符号表示页面内连接器和页面外连接器。
- en: '![image](Images/fig5-17.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-17.jpg)'
- en: '*Figure 5-17: UML connectors*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-17：UML连接器*'
- en: When used properly, UML connectors can make an activity diagram easier to read
    by reducing long or overlapping transition lines. However, keep in mind that connectors
    are the UML equivalent of a `goto` statement in a programming language, and overuse
    can make diagrams more difficult to read.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 正确使用UML连接器可以通过减少冗长或重叠的过渡线，使活动图更易于阅读。但要记住，连接器是编程语言中`goto`语句的UML等价物，过度使用可能会使图表更难阅读。
- en: '***5.1.13 Additional Activity Diagram Symbols***'
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***5.1.13 额外的活动图符号***'
- en: The full UML 2.0 specification provides many additional symbols you can use
    in activity diagrams, such as structured activities, expansion regions/nodes,
    conditional nodes, loop nodes, and more. We don’t have space to discuss them all
    in this book’s basic introduction to UML, but if you’re interested in more details,
    see the sources listed in “For More Information” on [page 100](ch05.xhtml#page_100)
    or search online for “UML.”
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的UML 2.0规范提供了许多可以在活动图中使用的附加符号，例如结构化活动、扩展区域/节点、条件节点、循环节点等。在本书的UML基础介绍中没有空间讨论所有这些内容，但如果你对更多细节感兴趣，请参见[第100页](ch05.xhtml#page_100)中“更多信息”部分列出的资料，或在线搜索“UML”。
- en: '**5.2 Extending UML Activity Diagrams**'
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**5.2 扩展UML活动图**'
- en: 'Sometimes the UML activity diagram notation just doesn’t cut it. In such cases,
    you might be tempted to come up with your own custom symbols. This is almost always
    a bad idea, for the following reasons:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有时UML活动图的符号表示无法满足需求。在这种情况下，你可能会有动机创造自己定制的符号。这几乎总是个坏主意，原因如下：
- en: UML is a *standard*. If you extend UML, you’re no longer using a well-defined
    standard. That means all the people who’ve learned UML won’t be able to read your
    activity diagrams unless they first read your documentation (and will that documentation
    be available to them in your nonstandard activity diagrams?).
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UML是一个*标准*。如果你扩展了UML，就不再使用一个明确的标准。这意味着所有学习过UML的人将无法理解你的活动图，除非他们首先阅读你的文档（而且这些文档会在你非标准的活动图中对他们可用吗？）。
- en: There are many UML diagramming tools available for creating and editing UML
    activity diagrams, and most of them can’t handle nonstandard symbols and objects.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有许多可用的UML图形工具用于创建和编辑UML活动图，而它们大多数无法处理非标准符号和对象。
- en: Many computer-aided software engineering (CASE) tools can generate code directly
    from a UML diagram. Again, these CASE tools work only with standard UML and probably
    won’t be able to handle your nonstandard extensions.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多计算机辅助软件工程（CASE）工具可以直接从UML图生成代码。同样，这些CASE工具只适用于标准UML，可能无法处理你的非标准扩展。
- en: If you can’t figure out how to do something in a UML activity diagram, you may
    be able to use some other scheme. Using a nonstandard way to do a task that you
    can easily do with standard tools may come across to other UML users as an amateur
    approach.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你无法弄清楚如何在 UML 活动图中实现某个功能，你或许可以使用其他方案。用非标准的方法做一些你能通过标准工具轻松完成的任务，可能会被其他 UML
    用户认为是一种业余的做法。
- en: All that being said, UML is far from perfect. In rare cases, developing some
    nonstandard activity diagram objects can vastly simplify your activity diagrams.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，UML 仍然远远不完美。在少数情况下，开发一些非标准的活动图对象可以极大地简化你的活动图。
- en: As an example, consider a concurrent programming *critical section*, a region
    of code in which only one thread of execution can take place at a time. UML sequence
    diagrams (the subject of [Chapter 7](ch07.xhtml)) use *sequence fragment* notation
    to describe concurrency with critical regions. Although you could adapt sequence
    fragment notation to activity diagrams, the result is messy and hard to read and
    understand. In some activity diagrams I’ve created for personal projects, I used
    the custom notation in [Figure 5-18](ch05.xhtml#ch5fig18) to indicate critical
    regions.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个例子，考虑一个并发编程中的*临界区*，这是一个只有一个执行线程可以在同一时间内运行的代码区域。UML 序列图（详见[第 7 章](ch07.xhtml)）使用*序列片段*符号来描述具有临界区的并发性。虽然你可以将序列片段符号应用于活动图，但结果会显得杂乱无章，且难以阅读和理解。在我为个人项目创建的一些活动图中，我使用了[图
    5-18](ch05.xhtml#ch5fig18)中的自定义符号来表示临界区。
- en: '![image](Images/fig5-18.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-18.jpg)'
- en: '*Figure 5-18: A nonstandard critical region diagram*'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-18：非标准的临界区图*'
- en: Arrows coming in to the pentagon on the left indicate transitions (generally
    from different threads) competing for a critical section. The single line out
    of the pentagon represents the single thread of execution that takes place in
    the critical section. The pentagon on the right accepts that single thread of
    execution and routes it back to the original thread (for example, if T1 was the
    thread that entered the critical section, the close of the critical section routes
    control back to the T1 transition/flow).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 从左侧五边形进入的箭头表示转换（通常来自不同的线程），它们在争夺一个临界区。五边形外的单一箭头表示发生在临界区内的单一执行线程。右侧的五边形接受这个单一执行线程，并将其路由回原始线程（例如，如果
    T1 是进入临界区的线程，则临界区结束时，控制将返回到 T1 的转换/流程）。
- en: This diagram doesn’t imply that there are only five threads that can use this
    critical section. Instead, it conveys that there are five activity diagram flows
    (T1–T5) that could compete for the critical resource. In fact, there could be
    multiple threads executing any one of these flows that are also competing for
    the critical region. For example, there could be three threads all executing the
    T1 flow and waiting for the critical region to be available.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图表并不意味着只有五个线程可以使用这个临界区。它表达的是五个活动图流程（T1–T5）可能会竞争这个临界资源。实际上，可能有多个线程在执行这些流程中的任何一个，并且也在争夺临界区资源。例如，可能有三个线程在执行
    T1 流程并等待临界区可用。
- en: Because multiple threads could be executing on the same flow in the critical
    section diagram, it’s quite possible to have only a single flow entering the critical
    region (see [Figure 5-19](ch05.xhtml#ch5fig19)).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 由于多个线程可能在同一个流程中执行，因此在临界区图中，只进入临界区的流可能是单一的（见[图 5-19](ch05.xhtml#ch5fig19)）。
- en: '![image](Images/fig5-19.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/fig5-19.jpg)'
- en: '*Figure 5-19: A single-flow critical region diagram*'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5-19：单流临界区图*'
- en: This example requires that multiple threads execute the same flow (T1) for this
    diagram to make any sense.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例要求多个线程执行相同的流程（T1），才能使这个图表有意义。
- en: As you can see, even a simple diagram like this requires a fair amount of documentation
    to describe and validate it. If that documentation isn’t readily available (that
    is, if it’s not embedded directly in your UML activity diagrams), readers probably
    won’t find it when they’re trying to understand your diagram. Annotating a nonstandard
    object directly within the diagram is the only reasonable approach. Placing meaningful
    documentation in a separate section of the document containing the activity diagrams
    (such as the SDD document), or in a separate document altogether, makes this information
    unavailable when someone cuts and pastes your diagram into a different document.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，即使是这样一个简单的图示，也需要相当多的文档来描述和验证它。如果这些文档不可用（即，如果它们没有直接嵌入你的UML活动图中），读者在试图理解你的图示时可能找不到它。当你在图示中直接注释一个非标准对象时，这是唯一合理的做法。将有意义的文档放在包含活动图的文档的单独部分（例如SDD文档）或完全放在另一个文档中，当别人将你的图示剪切并粘贴到其他文档时，这些信息将无法使用。
- en: '**NOTE**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The critical region diagram in [Figure 5-19](ch05.xhtml#ch5fig19) is simply
    an example of how you might extend UML activity diagrams. In general, I don’t
    recommend adopting it in your own diagrams, nor do I recommend extending UML notation.
    However, you should know that the option is available if you really need it.*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*[图5-19](ch05.xhtml#ch5fig19)中的临界区域图只是你可能扩展UML活动图的一种示例。一般来说，我不建议在你自己的图示中采用它，也不建议扩展UML符号。然而，如果你真的需要，你应该知道这个选项是可以使用的。*'
- en: '**5.3 For More Information**'
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**5.3 更多信息**'
- en: 'Bremer, Michael. *The User Manual Manual: How to Research, Write, Test, Edit,
    and Produce a Software Manual*. Grass Valley, CA: UnTechnical Press, 1999\. A
    sample chapter is available at *[http://www.untechnicalpress.com/Downloads/UMM%20sample%20doc.pdf](http://www.untechnicalpress.com/Downloads/UMM%20sample%20doc.pdf)*.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Bremer, Michael. *《用户手册手册：如何研究、编写、测试、编辑和制作软件手册》*。加利福尼亚州格拉斯谷：UnTechnical Press，1999年。可以在
    *[http://www.untechnicalpress.com/Downloads/UMM%20sample%20doc.pdf](http://www.untechnicalpress.com/Downloads/UMM%20sample%20doc.pdf)*
    获取示例章节。
- en: 'Larman, Craig. *Applying UML and Patterns: An Introduction to Object-Oriented
    Analysis and Design and Iterative Development*. 3rd ed. Upper Saddle River, NJ:
    Prentice Hall, 2004.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Larman, Craig. *《应用UML和模式：面向对象分析与设计及迭代开发导论》*。第三版。新泽西州上萨德尔河：Prentice Hall，2004年。
- en: 'Miles, Russ, and Kim Hamilton. *Learning UML 2.0: A Pragmatic Introduction
    to UML*. Sebastopol, CA: O’Reilly Media, 2003.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Miles, Russ 和 Kim Hamilton. *《学习UML 2.0：UML的务实入门》*。加利福尼亚州塞巴斯托波尔：O'Reilly Media，2003年。
- en: 'Pender, Tom. *UML Bible*. Indianapolis: Wiley, 2003.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Pender, Tom. *《UML圣经》*。印第安纳波利斯：Wiley，2003年。
- en: 'Pilone, Dan, and Neil Pitman. *UML 2.0 in a Nutshell: A Desktop Quick Reference*.
    2nd ed. Sebastopol, CA: O’Reilly Media, 2005.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Pilone, Dan 和 Neil Pitman. *《UML 2.0概览：桌面快速参考》*。第二版。加利福尼亚州塞巴斯托波尔：O'Reilly Media，2005年。
- en: 'Roff, Jason T. *UML: A Beginner’s Guide*. Berkeley, CA: McGraw-Hill Education,
    2003.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Roff, Jason T. *《UML：初学者指南》*。加利福尼亚州伯克利：McGraw-Hill Education，2003年。
- en: Tutorials Point. “UML Tutorial.” [*https://www.tutorialspoint.com/uml/*](https://www.tutorialspoint.com/uml/).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Tutorials Point. “UML教程。” [*https://www.tutorialspoint.com/uml/*](https://www.tutorialspoint.com/uml/)。
