- en: —12—
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cafeteria Stacks and Queues
  prefs: []
  type: TYPE_NORMAL
- en: Frank pushed himself into a crouch and hurried to the door. He tugged and pulled,
    rattling and thumping the door against its lock. He grasped the rusted iron bars
    and threw his full weight into the effort, but succeeded only in producing louder
    clanking sounds.
  prefs: []
  type: TYPE_NORMAL
- en: Frank turned to Socks, hoping the young wizard knew a bar-bending spell. Given
    the circumstances, he felt confident that Socks would even consent to using a
    lock-picking spell. But as Frank’s eye caught the smoldering stacks of parchment
    and the trails of smoke wisping to the ceiling, he froze. An image of a smoke-filled
    kitchen flashed across his mind, dredging up forgotten memories of his first year
    in the academy. He could almost hear the cook shouting. Frank shut his eyes hard,
    trying to force the memory away.
  prefs: []
  type: TYPE_NORMAL
- en: During his first two months at the academy, Frank had balanced his classes with
    a work-study job in the school cafeteria. The job wasn’t anything glamorous; they
    didn’t let new arrivals wash dishes, let alone prepare the food. Instead, Frank
    spent 15 hours a week transporting loads of clean trays, plates, and cutlery from
    the kitchen to the appropriate locations in the cafeteria.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0094-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Despite the tedious nature of the work, Frank found himself enjoying it. “Look
    at me! I’m undoing your work. I’m the anti-busboy,” he would shout to the trio
    of busboys clearing tables and filling bins with dirty dishes. He unsuccessfully
    tried to break the school record for the most number of dishes transported in
    two minutes. He created an entirely new cafeteria game called Fling the Spoon.
    But it wasn’t until a fortuitous run-in with Professor Heappens that he actually
    learned something from the job.
  prefs: []
  type: TYPE_NORMAL
- en: “Ugh. There are some data structures that just don’t belong in the cafeteria,”
    Professor Heappens muttered loudly as he studied the food options.
  prefs: []
  type: TYPE_NORMAL
- en: At 2:30 in the afternoon, the lunch rush had vanished, and Frank Runtime was
    hard at work transporting a load of bowls to the soup station. Though the comment
    wasn’t directed at him, he found himself asking the professor, “What data structures?”
  prefs: []
  type: TYPE_NORMAL
- en: “Stacks,” Professor Heappens said, looking up at Frank. “Stacks almost never
    belong in a cafeteria.”
  prefs: []
  type: TYPE_NORMAL
- en: “Sure they do,” Frank replied with the level of certainty that only new students
    and the truly ignorant can muster. He nodded down at the stack of bowls he was
    carrying. “Stacks of bowls. Stacks of plates. Stacks of pancakes.”
  prefs: []
  type: TYPE_NORMAL
- en: Professor Heappens made a dismissive gesture and started walking away. “What
    do you know about data structures anyway?”
  prefs: []
  type: TYPE_NORMAL
- en: “How else are you supposed to arrange plates?” Frank asked. “If you laid them
    out end to end, they would take too much room.”
  prefs: []
  type: TYPE_NORMAL
- en: The professor stopped and stared at Frank with an expression of profound concern.
    After nearly a minute, he asked, “Do you know the difference between a stack and
    a queue?”
  prefs: []
  type: TYPE_NORMAL
- en: Frank shook his head. He hadn’t taken Police Data Structures yet.
  prefs: []
  type: TYPE_NORMAL
- en: “A stack is a *last-in, first-out* data structure,” explained the professor.
    “It has two operations. You can *push* something onto the top of the stack. Or
    you can *pop* something off the top of the stack.
  prefs: []
  type: TYPE_NORMAL
- en: He gestured at the stack of plates waiting at the front of the line. “It’s just
    like the stack of plates over there. You can push a plate onto the stack.”
  prefs: []
  type: TYPE_NORMAL
- en: He placed his empty plate on top of the stack.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0095-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “Or you can pop a plate off the top.” He grabbed his plate back.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0095-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “And whenever you pop something off a stack, you get the newest item on the
    stack. The oldest item will stay at the bottom of the stack until you have popped
    off everything above it.”
  prefs: []
  type: TYPE_NORMAL
- en: “So?” Frank asked. “What’s wrong with that?”
  prefs: []
  type: TYPE_NORMAL
- en: “Nothing’s wrong with a last-in, first-out data structure if you use it correctly.
    Stacks are wonderful if you are writing a depth-first search; you just keep pushing
    new search options onto the stack and popping them off when you backtrack. But
    cafeterias have misused stacks for decades!
  prefs: []
  type: TYPE_NORMAL
- en: “Take this stack of plates right here. Do you know how long the bottom plate
    has been there?”
  prefs: []
  type: TYPE_NORMAL
- en: Frank tried to recall the last time he had seen the stack empty, but couldn’t
    even conjure the image.
  prefs: []
  type: TYPE_NORMAL
- en: “Five years!” shouted Professor Heappens. “I know, because I marked it. For
    five years that bottom plate has sat there unused, while students like yourself
    dump other clean plates on top. It sits there collecting dust around the edges.
  prefs: []
  type: TYPE_NORMAL
- en: “But that isn’t even the worst. Look at what they are doing to the mashed potatoes!”
  prefs: []
  type: TYPE_NORMAL
- en: Frank glanced over at the large wooden bowl of mashed potatoes. A cook was in
    the process of refilling it. He held a large pot in one hand and was gleefully
    ladling fresh mashed potatoes into the bowl. It took a moment for Frank to realize
    the older food was simply being buried. His stomach turned.
  prefs: []
  type: TYPE_NORMAL
- en: “How long?” he croaked, not really wanting to know the answer.
  prefs: []
  type: TYPE_NORMAL
- en: “Don’t worry. They wash out the serving bowl at least once a week, so the old
    mashed potatoes are less than a week old.”
  prefs: []
  type: TYPE_NORMAL
- en: Frank didn’t feel reassured. In fact, he felt rather ill. A quick scan of the
    cafeteria showed the last-in, first-out pattern being utilized everywhere. He
    stopped when he reached the vats of salad dressing, his stomach roiling with a
    mixture of nausea and panic.
  prefs: []
  type: TYPE_NORMAL
- en: “What can we do?” he asked.
  prefs: []
  type: TYPE_NORMAL
- en: “Queues,” responded the professor. “Queues were practically designed for cafeterias.”
  prefs: []
  type: TYPE_NORMAL
- en: “Queues?” asked Frank.
  prefs: []
  type: TYPE_NORMAL
- en: “First-in, first-out data structures,” explained Professor Heappens. “Like stacks,
    they also store things and have two operations. You can *enqueue* something by
    adding it to the back of the queue. Or you can *dequeue* something by taking it
    from the front. That way, you are always taking out the oldest item.”
  prefs: []
  type: TYPE_NORMAL
- en: Frank tried to picture always taking the bottom plate from a stack. “But how?”
  prefs: []
  type: TYPE_NORMAL
- en: “That’s just how the data structure works. Look at the sandwich line; it’s a
    queue. Right now it has four people in it, and the person at the front has been
    waiting the longest.”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0097-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Even as Professor Heappens said that, another person joined the line. “See,
    they enqueue at the back!” he noted.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0097-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: They stood watching the line until the person at the front received her sandwich
    and departed.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0097-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “And dequeue at the front,” said the professor happily. “What this cafeteria
    needs is more queues. Every cafeteria needs more queues.”
  prefs: []
  type: TYPE_NORMAL
- en: Frank thought back to the mashed potato stack and realized the professor was
    right. How the data was stored could have a significant impact on how it was accessed.
    In cases like mashed potatoes, order mattered.
  prefs: []
  type: TYPE_NORMAL
- en: Despite the seemingly simple revelation, Frank struggled for days to integrate
    queues into the cafeteria. The plates and bowls were relatively easy. He would
    simply lift the old pile up and slide new plates underneath. Convincing the cooks
    to change how they ladled food proved more difficult. They thoroughly enjoyed
    ladling giant spoonfuls of potatoes, smiling as the large gobs smacked down into
    the bowl. Frank ultimately suggested a two-bowl method where the old potatoes
    were ladled onto the top of the new bowl. While it wasn’t strictly a queue, it
    preserved all the fun of slopping mashed potatoes, and the old food didn’t get
    buried at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, disaster struck when he filled in for a sick baker. Not paying
    attention to the fact that the bread was baked in batches for a reason, Frank
    insisted that loading the oven last-in, first-out was unfair to the bread at the
    back. He devised a rotation scheme that, every 25 seconds, inserted a new loaf,
    rotated all the loaves in the oven, and removed the oldest loaf.
  prefs: []
  type: TYPE_NORMAL
- en: Frank’s attempt at a baking queue might have worked if the oven had two doors,
    one at the front and one at the back. Unfortunately, the cafeteria used an older,
    single-door model, which made rotating the loaves in and out extremely difficult.
    While the constant churn ensured a more consistent cooking time for all loaves,
    Frank found himself unable to keep up with the schedule. Soon, dense smoke poured
    from the hearth as the loaves blackened.
  prefs: []
  type: TYPE_NORMAL
- en: As the other cooks dashed to the fire with buckets of water, Frank stared numbly
    at the charred loaves. A sense of hopeless confusion crept in as he realized that
    queues might not be the solution to *every* cafeteria problem. He still had a
    lot to learn about data structures.
  prefs: []
  type: TYPE_NORMAL
- en: '**POLICE ALGORITHMS 101: STACKS AND QUEUES**'
  prefs: []
  type: TYPE_NORMAL
- en: '***Excerpt from Professor Drecker’s Lecture***'
  prefs: []
  type: TYPE_NORMAL
- en: Stacks and queues are two simple structures for storing data. At first glance,
    both data structures resemble nothing more than lists of values. How these two
    data structures differ, though, is in how data is inserted or removed.
  prefs: []
  type: TYPE_NORMAL
- en: A stack is a last-in, first-out data structure that operates much like the pile
    of papers you’ll find on every officer’s desk. New elements are *pushed* onto
    the top of the stack, and elements are removed by being *popped* off the top of
    the stack. If five elements are pushed onto an empty stack in the order 1, 2,
    3, 4, 5, they will be popped off in the reverse order, 5, 4, 3, 2, 1\. Of course,
    as soon as your pile of papers is gone, your captain will just give you more paperwork.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can implement stacks using an array and a single variable to track the
    index corresponding to the top of the stack. When you push a new element onto
    the stack, you add it to the next open slot in the array: index = top + 1\. You
    also increment the top index accordingly.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0099-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you pop an element off the stack, you can again use the top index to find
    the correct element. You can then remove this from the array and decrement the
    top index accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0100-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Of course, you must be careful when adding elements to an array of fixed size
    to avoid going past the end of the array.
  prefs: []
  type: TYPE_NORMAL
- en: A queue is a first-in, first-out data structure, much like a line of suspects
    waiting to be processed. New elements are *enqueued* at the back of the queue,
    and elements are removed by being *dequeued* from the front. If five elements
    are enqueued in an empty queue in the order 1, 2, 3, 4, 5, they will be dequeued
    in the same order, 1, 2, 3, 4, 5.
  prefs: []
  type: TYPE_NORMAL
- en: Queues can also be implemented with arrays. In this case, you need to track
    two indexes—the first and last element in the queue. When you enqueue a new element,
    you add it behind the current last element and increment the back index.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0100-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: And when you dequeue an element, you remove the front element and increment
    the front index accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0101-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you enqueue and dequeue elements in a fixed array, a block of empty space
    will build up at the front of the array. While you can design the queue to wrap,
    you must take care during both enqueuing and dequeuing to handle indexes being
    incremented past the end of the array.
  prefs: []
  type: TYPE_NORMAL
