- en: '**PART 6**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**SECURITY**'
  prefs: []
  type: TYPE_NORMAL
- en: 'PROJECT 18: INTRUDER SENSOR'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**IN THIS PROJECT, WE’LL USE AN ULTRASONIC SENSOR TO DETECT AN INTRUDER.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0156-01.jpg)![image](../images/f0157-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Arduino board
  prefs: []
  type: TYPE_NORMAL
- en: • Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: • Four-pin HC-SR04 ultrasonic sensor
  prefs: []
  type: TYPE_NORMAL
- en: • Servomotor
  prefs: []
  type: TYPE_NORMAL
- en: • Red LED
  prefs: []
  type: TYPE_NORMAL
- en: • Green LED
  prefs: []
  type: TYPE_NORMAL
- en: • 2 220-ohm resistors
  prefs: []
  type: TYPE_NORMAL
- en: We’ll connect the intruder sensor to a servo and some LEDs so that when someone
    comes within a certain distance, a green LED turns off, a red LED turns on, and
    the servomotor moves (see [Figure 18-1](ch18.xhtml#ch18fig1)).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 18-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: The LEDs alert you to an intruder.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f18-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This project is versatile and can be used and adapted in various ways. Because
    the ultrasonic sensor can define distance, you could, for example, use it to define
    an area and trigger an alarm when that perimeter is breached. The sensor works
    similarly to a radar: it sends out an ultrasonic signal, or *ping*. When this
    signal hits an object, it bounces back like an echo, and the time between the
    ping and the echo is used to calculate distance. The Arduino can use this calculation
    to trigger an event, depending on the value received.'
  prefs: []
  type: TYPE_NORMAL
- en: In this project, when the sensor detects an intruder within a predefined vicinity,
    the red LED will light and the servo arm will move. You can adapt this project
    to trigger a different event when the intruder is detected, like pressing a security
    system button or locking a door. For a friendlier scenario, you could set the
    distance really close so that when you wave your hand in front of the sensor,
    the servo presses a button to release a treat, like candy.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*To use the same ultrasonic sensor shown in these figures, see “[Retailer List](app01.xhtml#app01lev1sec02)”
    on [page 240](app01.xhtml#page_240) or search online for* HC-SR04 ultrasonic module.'
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Insert the ultrasonic sensor into the breadboard. The sensor we’re using in
    this project has four pins, as shown in [Figure 18-2](ch18.xhtml#ch18fig2). Connect
    the sensor’s GND to the Arduino GND rail, VCC to Arduino +5V, Trig to Arduino
    pin 12, and Echo to Arduino pin 13.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **ULTRASONIC SENSOR** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| GND | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| VCC | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Trig | Pin 12 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Echo | Pin 13 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**FIGURE 18-2:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The HC-SR04 ultrasonic sensor
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f18-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Connect the servo’s brown (ground) wire to the Arduino GND rail, its red (power)
    wire to the Arduino +5V rail, and its yellow signal (control) wire to Arduino
    pin 9.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **SERVO** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Red wire | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Brown wire | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Yellow wire | Pin 9 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Insert the red and green LEDs into the breadboard with the shorter, negative
    legs in the Arduino GND rail. Add a 220-ohm resistor to each of the positive legs,
    and connect the red LED to Arduino pin 2 and the green LED to pin 3 via the resistors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **LEDS** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Negative legs | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Positive leg (red) | Pin 2 via 220-ohm resistor |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Positive leg (green) | Pin 3 via 220-ohm resistor |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Connect the power rails on the breadboard to Arduino +5V and GND. The final
    configuration is shown in [Figure 18-3](ch18.xhtml#ch18fig3).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 18-3:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The complete intruder sensor project
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f18-03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Check that your setup matches that of [Figure 18-4](ch18.xhtml#ch18fig4) and
    then upload the code in “[The Sketch](ch18.xhtml#ch18lev1sec03)” on [page 161](ch18.xhtml#page_161).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 18-4:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The circuit diagram for the intruder sensor
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f18-04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When an object is within the trigger distance, the red LED will light and the
    servo will move 45 degrees. You can change the distance of the sensor field in
    the following line of the sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this example, if something is sensed within a distance of 15 centimeters,
    the next block of code will run.
  prefs: []
  type: TYPE_NORMAL
- en: The Trig pin on the sensor is connected to Arduino pin 12 and emits an ultrasonic
    signal or ping. When the signal reaches an object, it bounces back to the module,
    and this echo is sent to Arduino pin 13\. The time difference between the two
    signals gives us our distance reading. If the distance is more than our set minimum,
    the green LED stays on; if not, the red LED lights and the servo moves.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'PROJECT 19: LASER TRIP WIRE ALARM'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**IN THIS PROJECT, YOU’LL CREATE A SIMPLE LASER TRIP WIRE ALARM.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0163-01.jpg)![image](../images/f0164-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Arduino board
  prefs: []
  type: TYPE_NORMAL
- en: • Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: • Photoresistor
  prefs: []
  type: TYPE_NORMAL
- en: • Piezo buzzer
  prefs: []
  type: TYPE_NORMAL
- en: • Green LED
  prefs: []
  type: TYPE_NORMAL
- en: • 10k-ohm resistor
  prefs: []
  type: TYPE_NORMAL
- en: • Laser pen
  prefs: []
  type: TYPE_NORMAL
- en: You’ve probably seen a movie where a valuable item is protected by a grid of
    laser beams. The beams look cool and seem pretty high-tech, but the principles
    behind them are actually very simple.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the laser pen shines on the photoresistor, the green LED will light up
    to signify that the circuit is ready. When the laser beam is broken, the LED turns
    off and the buzzer sounds.
  prefs: []
  type: TYPE_NORMAL
- en: As we know from [Projects 13](ch13.xhtml#ch13) and [18](ch18.xhtml#ch18), photoresistors
    produce variable resistance depending on the amount of light falling on their
    sensor. When the photoresistor does not detect light from the laser, it will drop
    its resistance and trigger the Arduino to send voltage to the pin controlling
    the buzzer.
  prefs: []
  type: TYPE_NORMAL
- en: Laser beams that are visible in daylight or even in the dark are very powerful
    and can be extremely dangerous. In this project we’ll use a low-powered laser
    pen instead (see [Figure 19-1](ch19.xhtml#ch19fig1)).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 19-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: Laser pens can still be dangerous and should never be directed toward anybody’s
    eyes!
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f19-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Insert your photoresistor into the breadboard. Connect one leg to the +5V rail
    using a jumper wire. Connect a 10k-ohm resistor to the other leg, and connect
    the other side of this resistor to Arduino A0 and GND on the breadboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **PHOTORESISTOR** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Leg 1 | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Leg 2 | A0 via 10k-ohm resistor and GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Connect the red (positive) wire of the piezo buzzer directly to Arduino pin
    11 on the Arduino and the black (GND) wire to GND on the breadboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **PIEZO** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Black wire | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Red wire | Pin 11 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Insert the green LED’s long leg into Arduino pin 13 and the short leg into GND.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the power rails to the breadboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before you upload the code, you need to check the photo-resistor’s value in
    ambient light. Run the following small program with the photoresistor set up as
    instructed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the Serial Monitor in the Arduino IDE. It will show the value being read
    from the light resistor—in [Figure 19-2](ch19.xhtml#ch19fig2), it’s 964—in normal
    lighting conditions. Take note of your number, which will be different depending
    on your lighting conditions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 19-2:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Reading values from the photoresistor
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f19-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now shine the laser on the resistor’s cell, and also note this number; my reading
    is 620\. This might seem counterintuitive, as you would expect more light to provide
    a higher number, but the figure is actually translating the resistance—more light,
    less resistance. Your values will differ from those shown here, so make sure to
    record your two readings.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Check that your setup matches that of [Figure 19-3](ch19.xhtml#ch19fig3) and
    then upload the code in “[The Sketch](ch19.xhtml#ch19lev1sec03)” on [page 168](ch19.xhtml#page_168).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 19-3:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The circuit diagram for the laser trip wire alarm
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f19-03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The sketch first sets Arduino pin 11 as an `OUTPUT` for the piezo buzzer and
    pin 13 as an `OUTPUT` for the LED. The photoresistor is connected to Arduino pin
    A0\. If the analog reading from A0 is more than 850 (meaning that there is less
    light and the laser beam has been broken), the buzzer will be set to `HIGH` and
    turn on and the LED will turn off. Remember to change the resistance value depending
    on your calibration on this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As noted earlier, when the laser is shining on the resistor it reads about 620,
    so in the sketch I’ve set the buzzer to sound only if the value is more than 850\.
    This value is between our laser value and our nonlaser value, so we know the laser
    beam to the resistor has been broken if the value reaches 850.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'PROJECT 20: SENTRY GUN'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**A SENTRY GUN IS AN UNMANNED WEAPON CAPABLE OF AUTONOMOUSLY SENSING AND FIRING
    UPON ENEMY TARGETS USING ULTRASONIC DETECTION. IN THIS PROJECT, WE’LL CREATE A
    MINIATURE VERSION OF THIS GUN.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0170-01.jpg)![image](../images/f0171-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Arduino board
  prefs: []
  type: TYPE_NORMAL
- en: • Mini breadboard
  prefs: []
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: • Male-to-male jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: • Four-pin HC-SR04 ultrasonic sensor
  prefs: []
  type: TYPE_NORMAL
- en: • WLToys RC V959 missile launcher
  prefs: []
  type: TYPE_NORMAL
- en: • Tower Pro SG90 9g servomotor
  prefs: []
  type: TYPE_NORMAL
- en: '**LIBRARIES REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Servo
  prefs: []
  type: TYPE_NORMAL
- en: • NewPing
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ll attach the toy missile launcher and the ultrasonic sensor to a servo arm
    (see [Figure 20-1](ch20.xhtml#ch20fig1)) so that the servo sweeps the gun and
    sensor back and forth across 180 degrees, giving the ultrasonic sensor a wide
    range of detection. When an enemy is detected, the Arduino triggers the sentry
    gun and discharges the missiles. For more on the ultrasonic sensor, see [Project
    18](ch18.xhtml#ch18).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 20-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: Attaching the toy gun and ultrasonic sensor to the servo arm gives them a wide
    range of detection and motion.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f20-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The key component for this project is the WLToys RC V959 missile launcher, also
    known as the Walkera Part RC V959-19 missile bullet launcher, intended for radio-controlled
    helicopters ([Figure 20-2](ch20.xhtml#ch20fig2)).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 20-2:**'
  prefs: []
  type: TYPE_NORMAL
- en: The Walkera Part RC V959-19 missile bullet launcher
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f20-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This cool part is really cheap (around $6 –10) and is widely available online.
    Inside this launcher is a mini servo that revolves to set off the missiles. The
    wires that control this servo are white (GND) and yellow (+5V). You’ll also find
    black and red wires, which are for a single shot, but we’ll use only yellow and
    white for a continuous Gatling gun effect.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First we’ll prepare the toy missile launcher. Carefully remove the four wires
    from the small plastic socket; they should come out fairly easily. You can use
    a male-to-male jumper wire to push down on the plastic clip to help.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The core of the wire is stranded and quite flimsy, so strip the end of the yellow
    and white wires and solder them to separate solid-core wires that can be inserted
    into the Arduino, as shown in [Figure 20-3](ch20.xhtml#ch20fig3). Trim the black
    and red wires or tape them out of the way.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 20-3:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Stripping and soldering the missile launcher wires
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f20-03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Glue the servo motor’s arm to the base of the missile launcher, as shown in
    [Figure 20-4](ch20.xhtml#ch20fig4).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 20-4:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Gluing the servo motor’s arm
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f20-04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Attach the ultrasonic sensor to the top of the launcher, as shown in [Figure
    20-5](ch20.xhtml#ch20fig5). You can use a hot-glue gun for a solid connection
    or just tape it for now if you might want to alter it later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 20-5:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Attaching the ultrasonic sensor
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f20-05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Use the jumper wires to connect the ultrasonic sensor to the Arduino: connect
    Trig directly to Arduino pin 13, and Echo directly to Arduino pin 12\. We will
    use a mini breadboard to assist with multiple power connections to Arduino +5V
    and GND.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **ULTRASONIC SENSOR** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| VCC | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Trig | Pin 13 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Echo | Pin 12 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| GND | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Connect the servomotor’s brown wire to Arduino GND and the red wire to +5V via
    the mini breadboard, and the yellow/white wire directly to Arduino pin 9.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **SERVO** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Brown wire | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Red wire | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Yellow wire | Pin 9 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Connect the launcher’s white wire to the GND rail of the mini breadboard, and
    the yellow wire directly to Arduino pin 3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **LAUNCHER** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| White wire | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Yellow wire | Pin 3 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Your sentry gun should look like [Figure 20-6](ch20.xhtml#ch20fig6). Insert
    the missiles into the launcher.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 20-6:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Your sentry gun is ready to fire!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f20-06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Confirm that your completed setup matches that of [Figure 20-7](ch20.xhtml#ch20fig7).
    Upload the code in “[The Sketch](ch20.xhtml#ch20lev1sec03)” on [page 176](ch20.xhtml#page_176).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 20-7:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The circuit diagram for the sentry gun
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f20-07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sketch first calls the NewPing and Servo libraries to access the functions
    you’ll need to control the servomotor and ultrasonic sensor, respectively. (Make
    sure the NewPing library is downloaded from *[http://nostarch.com/arduinohandbook/](http://nostarch.com/arduinohandbook/)*
    and saved in your Arduino folder.) The servomotor sweeps back one way and then
    forth the other, moving the ultrasonic sensor 180 degrees. The sensor sends out
    an ultrasonic signal, or *ping*, and when this ping reaches an object, it echoes
    back to give a time value. The Arduino converts this value into the distance between
    the sensor and the object. When the distance to the object is fewer than 15 centimeters,
    the servo stops and power is sent to the launcher to fire the bullets at the object.
    You can change this trigger distance (given in centimeters) at ➊.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'PROJECT 21: MOTION SENSOR ALARM'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**IN THIS PROJECT, WE’LL BUILD A MOTION-SENSING ALARM USING A PASSIVE INFRARED
    (PIR) SENSOR.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0178-01.jpg)![image](../images/f0179-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Arduino board
  prefs: []
  type: TYPE_NORMAL
- en: • Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: • HC SR501 PIR sensor
  prefs: []
  type: TYPE_NORMAL
- en: • LED
  prefs: []
  type: TYPE_NORMAL
- en: • Piezo buzzer
  prefs: []
  type: TYPE_NORMAL
- en: You can use this alarm to trigger a variety of outputs, such as lights, motors,
    or even a “welcome home” message when you approach your front door.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This project is based on the HC SR501 PIR sensor, which is widely available
    online for a few dollars. We’re going to set it up so that when someone passes
    in front of the PIR sensor, the LED will light up and the piezo buzzer will sound
    (see [Figure 21-1](ch21.xhtml#ch21fig1)), but you can adapt it for various other
    output.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 21-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: Any piezo buzzer will work for this project, but remember that most have polarity,
    so the red wire must be connected to +5V and the black wire to GND.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f21-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Other similar PIR sensors will work with this code, but it’s important to check
    the pin layout of your sensor on the data sheet, as this can vary. All sensors
    should have +5V, GND, and output pins. On this model, the pins are not clearly
    marked, but if you simply remove the outer lens (it’s clipped in place and can
    be unclipped easily), you can identify the pins underneath, as shown in [Figure
    21-2](ch21.xhtml#ch21fig2).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 21-2:**'
  prefs: []
  type: TYPE_NORMAL
- en: A PIR sensor with the lens removed
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f21-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The two orange potentiometers on the sensor indicate that there are two adjustable
    settings. With the sensor upright, as shown in [Figure 21-3](ch21.xhtml#ch21fig3),
    the left potentiometer controls how long the output is set to `HIGH` when something
    is detected, and can be set between 5 and 200 seconds. When we attach an LED to
    the output, the LED will be lit for between 5 and 200 seconds depending on the
    setting. The right potentiometer adjusts the detection range from 0 to 7 meters.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 21-3:**'
  prefs: []
  type: TYPE_NORMAL
- en: PIR sensor potentiometers. The left controls how long the output is set to `HIGH`
    (5–200 seconds), while the right controls the range (0–7 meters).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f21-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The sensor works by detecting infrared radiation, which is emitted from objects
    that generate heat. Crystalline material within the sensor detects the infrared
    radiation, and when it detects a set level, it triggers the output signal of the
    sensor. The Arduino reads this output as voltage, so we can use this as a simple
    switch to turn something on—in this instance, an LED.
  prefs: []
  type: TYPE_NORMAL
- en: We are setting up the sensor so that an alarm sounds when the sensor is triggered,
    but there are other ways that you can customize the project. For example, you
    could scare your friends by attaching a servo and setting it up to release a rubber
    band when they walk by.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Connect the PIR sensor’s +5V and GND wires to the +5V and GND rails on the breadboard,
    and connect these rails to the Arduino. Connect the PIR sensor’s output wire to
    Arduino pin 2\. (See [Figure 21-4](ch21.xhtml#ch21fig4).)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **PIR SENSOR** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| +5V | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| GND | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Output | Pin 2 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**FIGURE 21-4:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: PIR sensor connected to wires
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f21-04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Insert an LED into the breadboard and connect the long, positive leg to Arduino
    pin 13, and the short, negative leg to GND. You don’t need a resistor for the
    LED in this project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **LED** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Positive leg | Pin 13 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Negative leg | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Connect the piezo buzzer by attaching the red wire to Arduino pin 10 and the
    black wire to GND.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **PIEZO** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Red wire | Pin 10 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Black wire | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Confirm that your setup matches the circuit diagram in [Figure 21-5](ch21.xhtml#ch21fig5),
    and then upload the code in “[The Sketch](ch21.xhtml#ch21lev1sec03)” on [page
    183](ch21.xhtml#page_183).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 21-5:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The circuit diagram for the motion sensor alarm
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f21-05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sketch works by setting Arduino pin 13 as output for the LED, pin 2 as input
    for the PIR sensor, and pin 10 as output for the piezo buzzer. When the PIR sensor
    is triggered, a `HIGH` signal is sent to the Arduino, which will in turn light
    the LED and play a tone on the piezo buzzer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'PROJECT 22: KEYPAD ENTRY SYSTEM'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**IT’S TIME TO INTRODUCE A KEYPAD TO YOUR ARDUINO BY BUILDING A KEYPAD ENTRY
    SYSTEM.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0185-01.jpg)![image](../images/f0186-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Arduino board
  prefs: []
  type: TYPE_NORMAL
- en: • Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: • Tower Pro SG90 9g servomotor
  prefs: []
  type: TYPE_NORMAL
- en: • Green LED
  prefs: []
  type: TYPE_NORMAL
- en: • Red LED
  prefs: []
  type: TYPE_NORMAL
- en: • 4×4 membrane keypad
  prefs: []
  type: TYPE_NORMAL
- en: • 2 220-ohm resistors
  prefs: []
  type: TYPE_NORMAL
- en: '**LIBRARIES REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Keypad
  prefs: []
  type: TYPE_NORMAL
- en: • Servo
  prefs: []
  type: TYPE_NORMAL
- en: • Password
  prefs: []
  type: TYPE_NORMAL
- en: This project uses a 4×4 membrane keypad with a ribbon of eight wires running
    from the bottom, connected to a servo that sweeps to open a lock.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A keypad is basically a series of buttons that output a number or character
    depending on which button is pressed. With the keypad face up, the wires are numbered
    1–8 from left to right. The first four wires correspond to the rows, and the latter
    four to the columns.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll need to download the library for the keypad from the *[http://nostarch.com/arduinohandbook/](http://nostarch.com/arduinohandbook/)*
    and save it in your IDE’s Arduino libraries folder.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll connect this keypad to a servo and some LEDs to create a lock system like
    the secret knock lock in [Project 9](ch09.xhtml#ch09). To use the lock, enter
    your code and press the asterisk (*) to confirm. If the code matches the password
    defined in the sketch, the green LED will flash and the servo will move 90 degrees.
    If the code is incorrect, the red LED will flash. Use the hash key (#) to reset
    between code inputs. You could swap this servo for a more substantial one capable
    of unlocking a heavier deadbolt on a door, or locking and unlocking a box from
    the inside with the keypad and LEDs mounted externally.
  prefs: []
  type: TYPE_NORMAL
- en: '**TESTING THE KEYPAD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First we’ll test the keypad with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Upload this code and then open the Serial Monitor in your IDE ([Figure 22-1](ch22.xhtml#ch22fig1)).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 22-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: Testing the keypad
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f22-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With the keypad face up, connect the wires in sequence from left to right to
    Arduino digital pins 9–2\. Once you have uploaded the code, press a few keys.
    As each key is pressed, the corresponding character should appear on a separate
    line in the Arduino IDE’s serial console.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Connect the pins of the keypad directly to the Arduino pins as follows. The
    keypad pins are numbered as shown in [Figure 22-2](ch22.xhtml#ch22fig2).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **KEYPAD** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 1 | Pin 9 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 2 | Pin 8 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 3 | Pin 7 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 4 | Pin 6 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 5 | Pin 5 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 6 | Pin 4 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 7 | Pin 3 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 8 | Pin 2 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**FIGURE 22-2:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Keypad pins 1–8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f22-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Place a green LED and a red LED into the breadboard with the shorter, negative
    legs connected to the Arduino GND rail. Add a 220-ohm resistor to each longer,
    positive leg. Connect the resistor that’s attached to the green LED to Arduino
    pin 11, and the resistor that’s attached to the red LED to Arduino pin 12.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **LEDS** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Positive legs | Pins 11 and 12 via 220-ohm resistors |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Negative legs | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Now attach the servo (see [Figure 22-3](ch22.xhtml#ch22fig3)). Connect the brown
    wire to the GND rail, the red wire to the +5V rail, and the yellow/white wire
    directly to pin 13 on the Arduino.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **SERVO** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Brown wire | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Red wire | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Yellow wire | Pin 13 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**FIGURE 22-3:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Attaching the servo
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f22-03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Make sure your setup matches that of [Figure 22-4](ch22.xhtml#ch22fig4), and
    upload the code in “[The Sketch](ch22.xhtml#ch22lev1sec04)” on [page 192](ch22.xhtml#page_192).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 22-4:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Circuit diagram for the keypad entry system
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f22-04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, the sketch calls on the Keypad, Servo, and Password libraries. The Servo
    library is included in the IDE, but you’ll have to download the Keypad and Password
    libraries (*[http://nostarch.com/arduinohandbook/](http://nostarch.com/arduinohandbook/)*).
    We then set the eight pins that will determine the input from the keypad, and
    set Arduino pins 11 and 12 to control the LEDs and pin 13 to control the servomotor.
    The Arduino waits for your code input from the keypad and for you to confirm your
    input with *. Once you’ve pressed the asterisk key, the sketch will check the
    entry against the password in the code. If the entry doesn’t match the password,
    the red LED will be set to `HIGH` and light; if the entry *does* match the password,
    the green LED will be set to `HIGH` and light, and the servomotor will turn. Pressing
    # will reset the sketch so it’s ready for another entry.'
  prefs: []
  type: TYPE_NORMAL
- en: To alter the password, change the number in quotation marks in the following
    line.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The default password in the sketch is 2468.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'PROJECT 23: WIRELESS ID CARD ENTRY SYSTEM'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**IN THIS PROJECT, WE’LL USE A RADIO FREQUENCY IDENTIFICATION (RFID) READER
    TO BUILD A WIRELESS ID CARD ENTRY SYSTEM.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0194-01.jpg)![image](../images/f0195-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Arduino board
  prefs: []
  type: TYPE_NORMAL
- en: • Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: • Mifare RFID-RC522 module
  prefs: []
  type: TYPE_NORMAL
- en: • Tower Pro SG90 9g servomotor
  prefs: []
  type: TYPE_NORMAL
- en: • Piezo buzzer
  prefs: []
  type: TYPE_NORMAL
- en: • Red LED
  prefs: []
  type: TYPE_NORMAL
- en: • Green LED
  prefs: []
  type: TYPE_NORMAL
- en: • 2 220-ohm resistors
  prefs: []
  type: TYPE_NORMAL
- en: '**LIBRARIES REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • RFID
  prefs: []
  type: TYPE_NORMAL
- en: • SPI
  prefs: []
  type: TYPE_NORMAL
- en: • Wire
  prefs: []
  type: TYPE_NORMAL
- en: • Servo
  prefs: []
  type: TYPE_NORMAL
- en: • Pitches
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An RFID reader uses wireless technology to identify a card, tag, or key fob
    without contact. The reader will respond when the card is placed near it. First,
    we need the reader to read the unique number of our RFID card, and then we’ll
    add a servo that will move depending on whether the RFID reader recognizes the
    card. We could use this ID system for something like a door or box lock, as with
    the secret knock code lock in [Project 9](ch09.xhtml#ch09).
  prefs: []
  type: TYPE_NORMAL
- en: You may have seen a sticker like the one in [Figure 23-1](ch23.xhtml#ch23fig1)
    on an item you have purchased. These stickers use RFID to allow the store to track
    items for security purposes. If you pass through the RFID field at the exit without
    paying, the stickers will set off the alarm. RFID readers and cards are also often
    used as identification to allow access into restricted areas, like top-secret
    labs or gated communities.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 23-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: An RFID sticker
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f23-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are two types of RFID: passive and active. Each RFID system uses a radio
    frequency to exchange a signal between the reader and the tag or card. This signal
    contains the tag or card’s unique code, and if the RFID reader recognizes that
    code, it reacts appropriately—for example, by allowing the item to pass through
    the detectors in a store or by unlocking a door.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a passive system, when the two are passed close to each other, the reader’s
    radio signal powers the circuit in the tag or card just enough for them to exchange
    data. Active systems have a powered reader and a powered tag and can read tags
    accurately from much farther away. Active systems are very expensive and used
    for more sophisticated applications, so we’ll be using a passive RFID system:
    the Mifare RFID-RC522 reader, which comes with a blank card and key fob, like
    those shown in [Figure 23-2](ch23.xhtml#ch23fig2). The reader operates at 13.56
    MHz, which means it can identify the card or fob, each of which is powered by
    the reader, only if it is less than a few inches away. It’s important to keep
    this in mind when positioning your reader.'
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 23-2:**'
  prefs: []
  type: TYPE_NORMAL
- en: RFID reader with card and key fob
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f23-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We’ll create an RFID-controlled servo. When you pass your card in front of the
    RFID reader, it reads the card. If the module recognizes the card and the card
    has access rights, the green LED lights up, a tune plays, and the servomotor moves
    180 degrees. If the module does not recognize the card, the red LED lights up,
    a different tune plays, and the servo does not move.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 23-1](ch23.xhtml#ch23tab1) describes the various functions of the RFID
    reader.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TABLE 23-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: Functions of the RFID reader pins
  prefs: []
  type: TYPE_NORMAL
- en: '| **RFID** | **DETAIL** | **NOTES** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 3.3V | 3.3 volts | The module can use only this amount of voltage. |'
  prefs: []
  type: TYPE_TB
- en: '| RST | Reset | Will clear the module to initial state. |'
  prefs: []
  type: TYPE_TB
- en: '| GND | Ground | Connects to the Arduino GND pin. |'
  prefs: []
  type: TYPE_TB
- en: '| IRQ | Interrupt Request | Not used in this project. |'
  prefs: []
  type: TYPE_TB
- en: '| MISO | Master In Slave Out | Sometimes referred to as “data in.” |'
  prefs: []
  type: TYPE_TB
- en: '| MOSI | Master Out Slave In | Sometimes referred to as “data out.” |'
  prefs: []
  type: TYPE_TB
- en: '| SCK | Serial Clock | Output from master. This creates a pulse that synchronizes
    data, usually set by the master. |'
  prefs: []
  type: TYPE_TB
- en: '| SDA/SS | Serial Data/Slave Select | Modules will have either SDA or SS, although
    they are the same. This is how the Arduino and module share data and communicate.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Pin 16 | VCC | Positive power. |'
  prefs: []
  type: TYPE_TB
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may need to set up the module by soldering the header pins to it first.
    Snap off a strip of eight header pins. Solder one header pin to each point. Make
    sure to hold the solder iron in place for only a few seconds so you don’t damage
    the circuits. See the “[Quick Soldering Guide](ch00.xhtml#ch00lev1sec07)” on [page
    18](ch00.xhtml#page_18) for a primer on soldering.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place your RFID module into a breadboard as shown in [Figure 23-3](ch23.xhtml#ch23fig3),
    and then connect the RFID pins to the Arduino pins as indicated in the following
    table. Remember to connect the RFID board to 3.3V power on the Arduino (not +5V),
    or you will damage the module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 23-3:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Placing the RFID module into the breadboard
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f23-03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '| **RFID** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 3.3V | 3.3V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| RST | Pin 5 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| GND | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| IRQ | Not used |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| MISO | Pin 12 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| MOSI | Pin 11 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| SCK | Pin 13 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| SDA | Pin 10 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Now we need to check that the RFID module is working. Download the RFID library
    from *[http://www.nostarch.com/arduinohandbook/](http://www.nostarch.com/arduinohandbook/)*
    and save it in your *libraries* directory (see “[Libraries](ch00.xhtml#ch00lev2sec07)”
    on [page 7](ch00.xhtml#page_7) for details on downloading libraries). Upload the
    following test sketch for the RFID reader. Keep the USB cable from your PC connected
    to the Arduino.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the Arduino Serial Monitor in your IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pass either your card or key fob in front of the RFID module. The unique number
    should appear on the Serial Monitor, as shown in [Figure 23-4](ch23.xhtml#ch23fig4).
    Write down this number, because you’ll need it later. In this case, my card number
    is 4D 55 AD D3 66.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 23-4:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The RFID number represented in hexadecimal on the screen
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f23-04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Insert the two LEDs into the breadboard, with the shorter, negative wires connected
    to the GND rail. Connect the longer, positive wire on the red LED to Arduino pin
    3 via a 220-ohm resistor. Connect the positive leg of the green LED to pin 2 via
    another 220-ohm resistor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **LEDS** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Negative legs | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Positive leg (red) | Pin 3 via 220-ohm resistor |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Positive leg (green) | Pin 2 via 220-ohm resistor |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Connect the servo to the Arduino by attaching the red wire to +5V, the brown
    (or black) wire to GND, and the yellow wire to Arduino pin 9.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **SERVO** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Red wire | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Black wire | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Yellow wire | Pin 9 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Connect the piezo buzzer to the Arduino by attaching the red wire to Arduino
    pin 8 and the black wire to GND. Your build should now look something like [Figure
    23-5](ch23.xhtml#ch23fig5).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **PIEZO** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Red wire | Pin 8 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Black wire | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**FIGURE 23-5:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Completed RFID project
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f23-05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Open the project code in your Arduino IDE and change the following line to match
    the hex number you found for your card or key fob in step 5 using the RFID reader.
    Leave the `0x` as it appears, but fill in the rest with your number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Confirm that your setup matches the circuit diagram in [Figure 23-6](ch23.xhtml#ch23fig6),
    and then upload the code from “[The Sketch](ch23.xhtml#ch23lev1sec03)” on [page
    203](ch23.xhtml#page_203) to your Arduino.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 23-6:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Circuit diagram for the wireless ID card entry system
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f23-06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sketch begins by calling on the SPI, RFID, Servo, Pitches, and Wire libraries
    to control communication between the Arduino, RFID module, and servo. Two melodies
    are defined, one for a positive reading on your card and the other for a negative
    reading. The green LED is set to Arduino pin 2, the red LED to pin 3, the piezo
    buzzer to pin 8, and the servo to pin 9.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following line is where you add your card’s hex value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Pass your card in front of the reader. If the hex code on the card matches that
    in your sketch, the green LED lights up, a tune plays, and the servo moves. The
    reader rejects all other cards unless you add their number to the code at ➊. If
    a card is rejected, the red LED lights up and a different tune plays, but the
    servo does not move.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
