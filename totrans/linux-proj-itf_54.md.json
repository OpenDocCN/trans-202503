["```\n#include <fcntl.h>            /* Defines O_* constants */\n#include <sys/stat.h>         /* Defines mode constants */\n#include <sys/mman.h>\n\nint `shm_open`(const char **name*, int *oflag*, mode_t *mode*);\n```", "```\n$ `./pshm_create -c /demo_shm 10000`\n$ `ls -l /dev/shm`\ntotal 0\n-rw-------    1 mtk      users       10000 Jun 20 11:31 demo_shm\n```", "```\n`pshm/pshm_create.c`\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <sys/mman.h>\n#include \"tlpi_hdr.h\"\n\nstatic void\nusageError(const char *progName)\n{\n    fprintf(stderr, \"Usage: %s [-cx] name size [octal-perms]\\n\", progName);\n    fprintf(stderr, \"    -c   Create shared memory (O_CREAT)\\n\");\n    fprintf(stderr, \"    -x   Create exclusively (O_EXCL)\\n\");\n    exit(EXIT_FAILURE);\n}\n\nint\nmain(int argc, char *argv[])\n{\n    int flags, opt, fd;\n    mode_t perms;\n    size_t size;\n    void *addr;\n\n    flags = O_RDWR;\n    while ((opt = getopt(argc, argv, \"cx\")) != -1) {\n        switch (opt) {\n        case 'c':   flags |= O_CREAT;           break;\n        case 'x':   flags |= O_EXCL;            break;\n        default:    usageError(argv[0]);\n        }\n    }\n\n    if (optind + 1 >= argc)\n        usageError(argv[0]);\n\n    size = getLong(argv[optind + 1], GN_ANY_BASE, \"size\");\n    perms = (argc <= optind + 2) ? (S_IRUSR | S_IWUSR) :\n                getLong(argv[optind + 2], GN_BASE_8, \"octal-perms\");\n\n    /* Create shared memory object and set its size */\n\n    fd = shm_open(argv[optind], flags, perms);\n    if (fd == -1)\n        errExit(\"shm_open\");\n\n    if (ftruncate(fd, size) == -1)\n        errExit(\"ftruncate\");\n\n    /* Map shared memory object */\n\n    addr = mmap(NULL, size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);\n    if (addr == MAP_FAILED)\n        errExit(\"mmap\");\n\n    exit(EXIT_SUCCESS);\n}\n    `pshm/pshm_create.c`\n```", "```\n`pshm/pshm_write.c`\n#include <fcntl.h>\n#include <sys/mman.h>\n#include \"tlpi_hdr.h\"\n\nint\nmain(int argc, char *argv[])\n{\n    int fd;\n    size_t len;                 /* Size of shared memory object */\n    char *addr;\n\n    if (argc != 3 || strcmp(argv[1], \"--help\") == 0)\n        usageErr(\"%s shm-name string\\n\", argv[0]);\n\n    fd = shm_open(argv[1], O_RDWR, 0);      /* Open existing object */\n    if (fd == -1)\n        errExit(\"shm_open\");\n\n    len = strlen(argv[2]);\n    if (ftruncate(fd, len) == -1)           /* Resize object to hold string */\n        errExit(\"ftruncate\");\n    printf(\"Resized to %ld bytes\\n\", (long) len);\n\n    addr = mmap(NULL, len, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);\n    if (addr == MAP_FAILED)\n        errExit(\"mmap\");\n\n    if (close(fd) == -1)\n        errExit(\"close\");                   /* 'fd' is no longer needed */\n\n    printf(\"copying %ld bytes\\n\", (long) len);\n    memcpy(addr, argv[2], len);             /* Copy string to shared memory */\n    exit(EXIT_SUCCESS);\n}\n    `pshm/pshm_write.c`\n```", "```\n`pshm/pshm_read.c`\n#include <fcntl.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include \"tlpi_hdr.h\"\n\nint\nmain(int argc, char *argv[])\n{\n    int fd;\n    char *addr;\n    struct stat sb;\n\n    if (argc != 2 || strcmp(argv[1], \"--help\") == 0)\n        usageErr(\"%s shm-name\\n\", argv[0]);\n\n    fd = shm_open(argv[1], O_RDONLY, 0);    /* Open existing object */\n    if (fd == -1)\n        errExit(\"shm_open\");\n\n    /* Use shared memory object size as length argument for mmap()\n       and as number of bytes to write() */\n\n    if (fstat(fd, &sb) == -1)\n        errExit(\"fstat\");\n\n    addr = mmap(NULL, sb.st_size, PROT_READ, MAP_SHARED, fd, 0);\n    if (addr == MAP_FAILED)\n        errExit(\"mmap\");\n\n    if (close(fd) == -1);                   /* 'fd' is no longer needed */\n        errExit(\"close\");\n\n    write(STDOUT_FILENO, addr, sb.st_size);\n    printf(\"\\n\");\n    exit(EXIT_SUCCESS);\n}\n    `pshm/pshm_read.c`\n```", "```\n$ `./pshm_create -c /demo_shm 0`\n$ `ls -l /dev/shm`                        *Check the size of object*\ntotal 4\n-rw-------    1 mtk    users    0 Jun 21 13:33 demo_shm\n```", "```\n$ `./pshm_write /demo_shm 'hello'`\n$ `ls -l /dev/shm`                        *Check that object has changed in size*\ntotal 4\n-rw-------    1 mtk    users    5 Jun 21 13:33 demo_shm\n```", "```\n$ `./pshm_read /demo_shm`\nhello\n```", "```\n#include <sys/mman.h>\n\nint `shm_unlink`(const char **name*);\n```", "```\n`pshm/pshm_unlink.c`\n#include <fcntl.h>\n#include <sys/mman.h>\n#include \"tlpi_hdr.h\"\n\nint\nmain(int argc, char *argv[])\n{\n    if (argc != 2 || strcmp(argv[1], \"--help\") == 0)\n        usageErr(\"%s shm-name\\n\", argv[0]);\n    if (shm_unlink(argv[1]) == -1)\n        errExit(\"shm_unlink\");\n    exit(EXIT_SUCCESS);\n}\n    `pshm/pshm_unlink.c`\n```"]