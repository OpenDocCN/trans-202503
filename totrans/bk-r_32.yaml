- en: '**A**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**INSTALLING R AND CONTRIBUTED PACKAGES**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This appendix provides more detail on where to find R and how to install it
    and its contributed packages. R is available through CRAN—the Comprehensive R
    Archive Network—accessed through the R website at *[https://www.r-project.org/](https://www.r-project.org/)*.
    I’ll cover only the fundamentals here, but you’ll find a substantial amount of
    information in the R FAQ by Hornik ([2015](ref.xhtml#ref33)) at *[http://CRAN.R-project.org/doc/FAQ/R-FAQ.html](http://CRAN.R-project.org/doc/FAQ/R-FAQ.html)*.
    This should be your first port of call if you need help with installing R and
    its packages. Installation of R and its contributed packages is dealt with in
    [Sections 2](ch02.xhtml#ch02) and [5](ch05.xhtml#ch05) of the FAQ, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '**A.1 Downloading and Installing R**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once at the R website, click the **CRAN mirror** link in the welcoming text
    or the **CRAN** link under the Download heading on the left, as shown in [Figure
    A-1](app01.xhtml#appAfig1), and a page will load that asks you to select a CRAN
    mirror.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fa-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-1: The R home page*'
  prefs: []
  type: TYPE_NORMAL
- en: Pick one close to your geographical location and click the link. [Figure A-2](app01.xhtml#appAfig2)
    shows my local mirror, which is at the University of Auckland; yours will look
    the same.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fa-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-2: A CRAN mirror site. This is where you’ll find the various download
    links.*'
  prefs: []
  type: TYPE_NORMAL
- en: Then click the link for your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: • If you’re a Windows user, click the Windows link, and from that page choose
    the installation file (the binary executable) for the `base` distribution. Double-click
    the executable file and follow the instructions in the installation wizard. You’ll
    want either the 32- or 64-bit version depending on your current Windows installation—you
    can find out which you have by going to Control Panel → System.
  prefs: []
  type: TYPE_NORMAL
- en: '• If you’re a Mac user, click the Mac OS X link and you’ll be taken to a page
    with the packaged binary files. At the time of writing, there are still two versions
    available: one for OS X 10.9 (Mavericks) and later, and another for OS X 10.6
    to 10.8 (this file has the *snowleopard* designation), though support for Snow
    Leopard is being phased out. Download the correct file for your operating system.
    Once the download is complete, double-clicking it will immediately launch the
    installer; follow the instructions therein. I also recommend getting the XQuartz
    window system, freely downloadable from *[http://xquartz.macosforge.org/](http://xquartz.macosforge.org/)*,
    which provides support for additional devices for graphics.'
  prefs: []
  type: TYPE_NORMAL
- en: • Linux users will be taken to a subdirectory with folders named after operating
    systems such as Debian or Ubuntu. Click the link relevant to you and you’ll be
    taken to a page providing step-by-step command line instructions for installing
    R.
  prefs: []
  type: TYPE_NORMAL
- en: '**A.2 Using Packages**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: R *packages* (or *libraries*) are collections of code that hold data and functionality
    used in R. It’s essential to get comfortable with loading these libraries to access
    certain features and commands.
  prefs: []
  type: TYPE_NORMAL
- en: Packages come in three flavors. Those that make up the core functionality of
    the software are included with the installation and are automatically loaded when
    you open R. Also, a handful of *recommended* packages are included with a typical
    R installation but aren’t automatically loaded. Finally, a huge collection of
    user-contributed packages—more than 7000 at the time of writing—extend R’s applications
    vastly.
  prefs: []
  type: TYPE_NORMAL
- en: '***A.2.1 Base Packages***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The *base packages* provide the essential syntax and commands for programming,
    computing, and graphics production, as well as the built-in data sets, basic arithmetic,
    and statistical functionality, and they are immediately available when you start
    R. At the time of writing, there are 14.
  prefs: []
  type: TYPE_NORMAL
- en: base       compiler   datasets   grDevices   graphics  grid   methods
  prefs: []
  type: TYPE_NORMAL
- en: parallel   splines    stats      stats4      tlctk     tools  utils
  prefs: []
  type: TYPE_NORMAL
- en: You’ll find a brief description each of these base packages in [Section 5.1.1](ch05.xhtml#ch05lev2sec49)
    of Kurt Hornik’s R FAQ.
  prefs: []
  type: TYPE_NORMAL
- en: '***A.2.2 Recommended Packages***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: At the time of writing, there are 15 *recommended packages*, as noted in [Section
    5.1.2](ch05.xhtml#ch05lev2sec50) of the R FAQ. These packages are included with
    any standard R installation, and they extend the functionality of the base packages
    to include slightly more specialized (yet still ubiquitous) statistical methods
    and computational tools. In this book, you’ll only be using `MASS` and `boot`
    from this list.
  prefs: []
  type: TYPE_NORMAL
- en: KernSmooth   MASS      Matrix     boot   class   cluster
  prefs: []
  type: TYPE_NORMAL
- en: codetools    foreign   lattice    mgcv   nlme    nnet
  prefs: []
  type: TYPE_NORMAL
- en: rpart        spatial   survival
  prefs: []
  type: TYPE_NORMAL
- en: 'These recommended packages *aren’t* loaded automatically. If you want to access
    functions or data sets from these packages, load them manually with a call to
    `library`. For example, to access the data sets available as part of `MASS`, execute
    the following at the prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Some packages provide a short welcome message upon loading, and R always informs
    you of any masking (see [Section 12.3.1](ch12.xhtml#ch12lev2sec110)) that has
    occurred.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you close your current R session, the package will close too, so you need
    to reload it if you open another instance of R and want to use it again. If you
    decide you no longer need a package in any given session and want to unload it
    to, for example, avoid any potential masking issues, use `detach` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can find topics and technical details concerning package loading and unloading
    in [Sections 9.1](ch09.xhtml#ch09lev1sec31) and [12.3.1](ch12.xhtml#ch12lev2sec110)
    of this book.
  prefs: []
  type: TYPE_NORMAL
- en: '***A.2.3 Contributed Packages***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: On top of these built-in and recommended packages, there’s a massive collection
    of user-contributed packages available through CRAN, serving all kinds of purposes
    and applications in statistics and mathematics, computing, and graphics. If you
    navigate to your local CRAN mirror site, the Packages link on the left of the
    page (see [Figure A-2](app01.xhtml#appAfig2)) will take you to a page with further
    links that provide up-to-date lists of all the available packages on CRAN. You’ll
    also find the useful CRAN Task Views web page, which is a collection of subject-specific
    articles giving an overview of relevant packages, as shown in [Figure A-3](app01.xhtml#appAfig3).
    This is a great way to get familiar with the types of specialized analyses that
    are possible in R.
  prefs: []
  type: TYPE_NORMAL
- en: Because of the sheer number of available packages, naturally R doesn’t include
    them all upon its installation, and as a researcher you’ll only ever be interested
    in a relatively small subset of methods at any one time.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fa-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-3: The CRAN Task Views web page. Each article discusses prominent
    CRAN packages in use in the field.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, you’ll make use of a handful of contributed packages. Some are
    used to access certain data sets or objects, and others are used for their unique
    functionality or to illustrate statistical methodology. They are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: car             faraway   GGally     ggplot2   ggvis
  prefs: []
  type: TYPE_NORMAL
- en: gridExtra       ks        misc3d     mvtnorm   rgl
  prefs: []
  type: TYPE_NORMAL
- en: scatterplot3d   shape     spatstat   tseries
  prefs: []
  type: TYPE_NORMAL
- en: When you want access to any contributed package, you need an Internet connection
    to first download and install it. Packages are generally less than a few megabytes
    in size. Once a package is installed, you then load it with the usual call to
    `library` to access the relevant functionality. For the packages listed above,
    you’ll be prompted to do this when necessary in the relevant parts of the book.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now look at a few ways to perform a package download and installation
    for R, using the `ks` package ([Duong, 2007](ref.xhtml#ref20)) as an example.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Contributed R packages tend to be of good quality in terms of correctness,
    speed and efficiency, and user-friendliness. Although there are fundamental compatibility
    checks that must be passed before a submitted package is made available on CRAN,
    passing them isn’t a sign of the overall quality and usability of a given package.
    You can gauge that only by using the package, studying its documentation, and
    seeking out any related publications.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Finding Packages on CRAN**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Every R package on CRAN has its own standard web page, providing the direct
    links to the downloadable files and important information about the package. Locate
    the package name on one of the lists on CRAN and click it, or do a quick Google
    search for, in our case, *ks r cran*. [Figure A-4](app01.xhtml#appAfig4) shows
    the top of the web page for `ks`.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fa-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-4: Descriptive information on the CRAN web page for the* `ks` *package*'
  prefs: []
  type: TYPE_NORMAL
- en: Along with basic information such as the version number and the maintainer’s
    name and contact information, you’ll see the Depends field. This is important
    for installation; if the R package you’re interested in is dependent on other
    contributed packages (not all are), then you also need to install those packages
    for your package to install successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at [Figure A-4](app01.xhtml#appAfig4), you can see that your R version
    needs to be later than 1.4, that `ks` requires `KernSmooth` (already installed—it’s
    one of the recommended packages noted in [Section A.2.2](app01.xhtml#app01lev2sec274)),
    and that it also needs `misc3d`, `mvtnorm`, and `rgl`. Fortunately, if you install
    an R package directly from R, the dependencies are also installed automatically.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing Packages at the Prompt**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The quickest way to download and install a contributed R package is to use
    the `install.packages` command directly from the R prompt. Starting with a fresh
    installation of R, I see the following on my iMac:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You may first be asked to choose a CRAN mirror. The list pops up and defaults
    to the secure HTTPS servers only; choosing HTTP will switch to the unsecured ones.
    I chose HTTP, found the New Zealand mirror, and clicked OK, as shown in [Figure
    A-5](app01.xhtml#appAfig5). Once you’ve done this, your selected mirror will remain
    set as the go-to site until you reset it; see [Section A.4.1](app01.xhtml#app01lev2sec276).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fa-05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-5: Pop-up windows for selecting a CRAN mirror site to use for downloading
    contributed packages. Left: Optional selection of HTTP servers (as opposed to
    HTTPS). Right: Selection of my local HTTP mirror.*'
  prefs: []
  type: TYPE_NORMAL
- en: After you click **OK**, R lists any dependencies that will also be downloaded
    and installed and then presents download notifications for each package (in the
    snipped output).
  prefs: []
  type: TYPE_NORMAL
- en: 'Some additional notes are warranted:'
  prefs: []
  type: TYPE_NORMAL
- en: • You need to install a package only once, and it will save to your hard drive
    to be loaded with a call to `library` as usual.
  prefs: []
  type: TYPE_NORMAL
- en: • You might be prompted to use or create a local folder on your computer to
    store installed packages. This is done to ensure R knows where to get packages
    from when they’re requested with `library`. Agreeing to this means you have a
    user-specific library of packages, which is generally a good idea.
  prefs: []
  type: TYPE_NORMAL
- en: • There are a number of optional arguments for `install.packages`; see the help
    file given by a call to `?install.packages` at the prompt. For example, if you
    want to specify a CRAN mirror in the console, supply the relevant URL as a character
    string to the `repos` argument, or if you want to prevent dependencies from installing,
    use the `dependencies` argument.
  prefs: []
  type: TYPE_NORMAL
- en: • You can also install R packages from source, that is, from the uncompiled
    code, which may have more recent updates than the precompiled binary version of
    the package. If you’re an OS X user, recent versions of R will ask you whether
    you’d like to download packages from source for packages with versions available
    that are more recent than the precompiled binary version. To do so, you need certain
    command line tools installed on your system; if the download fails, you can stick
    with the binary version by answering `n` (“no”) at the `download from source`
    prompt.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing Packages with the GUI**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The basic R graphical user interface (GUI) used in this book gives you the option
    to download and install contributed packages from the console using menu items.
    Here, you’ll look briefly at the Windows and OS X versions.
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, click the **Packages** → **Install package(s)...** menu item, shown
    on the left of [Figure A-6](app01.xhtml#appAfig6). Select a CRAN mirror and a
    tall window will open, listing all available packages in alphabetical order. Scroll
    to select the package you’re interested in. You can see my selection of `ks` on
    the right of [Figure A-6](app01.xhtml#appAfig6). Click **OK** to download and
    install the packages and dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fa-06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-6: Initiating download and installation of a contributed R package
    (and any missing dependencies automatically) via GUI menus in Windows*'
  prefs: []
  type: TYPE_NORMAL
- en: For OS X R, click the **Packages & Data** → **Package Installer** item in the
    OS X menu bar, as shown on the top of [Figure A-7](app01.xhtml#appAfig7). When
    the package installer opens, click the **Get List** button to bring up the table
    of available packages. Select the package you want, being sure to select the **Install
    Dependencies** box near the bottom of the installer before clicking **Install
    Selected**. R will then download and install everything it needs, including any
    dependencies, as shown on the bottom of [Figure A-7](app01.xhtml#appAfig7). You
    can select more than one package. Note that the options on the bottom left of
    the installer allow you to choose exactly where the installed packages will be
    stored; if you’re a nonadmin user, you may need to create a user-specific library,
    as mentioned earlier.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fa-07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-7: Initiating download and installation of a contributed R package
    (and any missing dependencies) using the GUI-based package installer in OS X*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing Packages Using Local Files**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Lastly, you can download the required package files from CRAN through your Internet
    browser as you’d download anything else, store them on your local drive, and then
    direct R to those local files.
  prefs: []
  type: TYPE_NORMAL
- en: On the CRAN web page for `ks`, you’ll find a Downloads section as shown in [Figure
    A-8](app01.xhtml#appAfig8). For Linux, choose the Package source file. For Windows
    or OS X, choose the corresponding *.zip* or *.pkg* file labeled *r-release*. The
    *r-oldrel* and *r-devel* versions should be used only if you’re experiencing compatibility
    issues. The Old sources link holds archived source files for old versions.
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, select **Packages** → **Install package(s) from local zip files...**
    (shown on the left of [Figure A-6](app01.xhtml#appAfig6)). This will open a file
    browser so you can navigate to the downloaded *.zip* file for the package; R will
    do the rest.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fa-08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-8: The Downloads section of the CRAN web page for* `ks`'
  prefs: []
  type: TYPE_NORMAL
- en: On OS X, once you’ve downloaded the *.pkg* file, select **Packages & Data**
    → **Package Installer**. Use the drop-down menu at the top of the installer to
    select **Local Binary Package**, as shown in [Figure A-9](app01.xhtml#appAfig9).
    To open a file browser to find the local file, you need to click the **Install...**
    button at the bottom of the installer. R will take it from there.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fa-09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure A-9: Using the package installer on OS X to install an R package from
    a local file*'
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to know that this method *does not* automatically install any
    dependencies. You’ll also need to install any packages your package depends on,
    any dependencies of those, and so on—so be sure to check the Depends field on
    the CRAN package web page, as noted earlier.
  prefs: []
  type: TYPE_NORMAL
- en: It’s far easier to use `install.packages` directly from the R prompt, or through
    the GUI, to automate this process. You need to do local file installations only
    if the automatic methods fail for some reason, if you’re installing a package
    that isn’t on CRAN (or any other readily accessible repository—see [Section A.4.2](app01.xhtml#app01lev2sec277)),
    or if the package isn’t directly available for your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: '**A.3 Updating R and Installed Packages**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are roughly four new releases of R a year that address functionality,
    compatibility issues, and bug fixes. It’s a good idea to keep up-to-date with
    these new releases. The R project home page and any CRAN mirror site will tell
    you the latest release, and you can execute `news()` at the R prompt for details
    on what’s new.
  prefs: []
  type: TYPE_NORMAL
- en: Contributed R packages are also periodically updated and new package files uploaded
    to CRAN. Packages you’ve installed won’t auto-update, so it’s up to you to update
    them. It’s difficult to predict how often such updates will be released, since
    it’s completely up to the maintainers, but it’s worth checking for newer versions
    of the packages you’ve installed every few months or, at the very least, when
    you upgrade your version of R.
  prefs: []
  type: TYPE_NORMAL
- en: Checking for package updates is easy. A simple call to `update.packages()`,
    with no arguments, will systematically look through your installed packages and
    flag any that have more recent versions available.
  prefs: []
  type: TYPE_NORMAL
- en: For example, on my current installation, executing the following tells me that
    a later version of `MASS` is available (along with several other packages not
    shown in this snipped output).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Enter `y` to download the updated package from CRAN. If there are several packages
    with updates available, R will ask you one at a time whether you’d like to update,
    and you have to enter `y` (or `N` or `c`) for each.
  prefs: []
  type: TYPE_NORMAL
- en: You can also perform package updates using the R GUI menus (or manually with
    local file installation). In Windows, select **Packages** → **Update packages...**
    to open a list of available updates to your current packages. On OS X, a column
    in the populated table in the package installer provides information on the version
    of every package you currently have installed, as well as the version currently
    on CRAN, giving you the option to install the more recent version. There’s also
    the Update All button, which is what you’d typically use.
  prefs: []
  type: TYPE_NORMAL
- en: '**A.4 Using Other Mirrors and Repositories**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes you might want to change the CRAN mirror associated with your typical
    package installation process or, indeed, change the target repository itself to
    one other than CRAN—there are several options.
  prefs: []
  type: TYPE_NORMAL
- en: '***A.4.1 Switching CRAN Mirror***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll rarely need to change your CRAN mirror, but you might want to if, say,
    your usual mirror site is inaccessible for some reason or you want to use R from
    a different location. To query your currently set repository, call `getOption`
    with `"repos"`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To change this to, say, the mirror at the University of Melbourne, simply assign
    the new URL to the `repos` component in a call to `options` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Any subsequent usage of `install.packages` or `update.packages` will now use
    this Australian mirror for downloads.
  prefs: []
  type: TYPE_NORMAL
- en: '***A.4.2 Other Package Repositories***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: CRAN isn’t the only repository of R packages. Other repositories include Bioconductor
    (see *[https://www.bioconductor.org/](https://www.bioconductor.org/)*), Omegahat
    (see *[http://www.omegahat.org/](http://www.omegahat.org/)*), and R-Forge (see
    *[https://r-forge.r-project.org/](https://r-forge.r-project.org/)*), and there
    are several more. These repositories tend to deal with different subjects. Bioconductor,
    for example, hosts packages that deal with DNA microarray and other genomic analysis
    methodologies; Omegahat hosts packages that focus on web- and Java-based applications.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of general statistical analyses, CRAN is the go-to repository for most
    users. To learn more about the other repositories, you can visit the associated
    websites.
  prefs: []
  type: TYPE_NORMAL
- en: '**A.5 Citing and Writing Packages**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It’s important that the work put into R and its packages is recognized in the
    appropriate way when the software is used in, for example, data analysis as part
    of your research projects. Indeed, when you get to the stage where you’re thinking
    about writing your own packages, it pays to be aware of the following.
  prefs: []
  type: TYPE_NORMAL
- en: '***A.5.1 Citing R and Contributed Packages***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For citing R and/or its packages, the `citation` command produces the relevant
    output.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note that LAT[E]X users are conveniently catered to via automatically generated
    BIBT[E]X entries.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also cite individual packages if these have been instrumental in completing
    a particular piece of work. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '***A.5.2 Writing Your Own Packages***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Once you become an R expert, you may find yourself with a suite of functions,
    data sets, and objects that others might find useful or that you use often enough
    to warrant packaging them up in a standardized, easily loadable format. There’s
    certainly no obligation to submit your packages to CRAN or any other repository,
    but if you do aim to do so, note that there are rather strict requirements to
    assure users of the stability and compatibility of your package.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re interested in constructing your own installable R package, see the
    official *Writing R Extensions* manual, accessible on any CRAN mirror site by
    clicking the Manuals link under Documentation on the left of the home page; you
    can see this link in [Figure A-2](app01.xhtml#appAfig2). If you’re interested,
    you may also want to seek out the book by Wickham ([2015*b*](ref.xhtml#ref74)),
    which provides useful instruction on the R package-writing process and associated
    dos and don’ts.
  prefs: []
  type: TYPE_NORMAL
