["```\nint* my_ptr;\n```", "```\nprintf(\"The value of my_ptr is %p.\", my_ptr);\n```", "```\n#include <cstdio>\n\nint main() {\n  int gettysburg{}; ➊\n  printf(\"gettysburg: %d\\n\", gettysburg); ➋\n  int *gettysburg_address = &gettysburg; ➌\n  printf(\"&gettysburg: %p\\n\", gettysburg_address); ➍\n}\n```", "```\ngettysburg: 0\n&gettysburg: 0053FBA8\n```", "```\ngettysburg: 0\n&gettysburg: 0000007DAB53F594\n```", "```\n*gettysburg_address\n```", "```\n*gettysburg_address = 17325;\n```", "```\nprintf(\"%d\", *gettysburg_address);\n```", "```\n#include <cstdio>\n\nint main() {\n  int gettysburg{};\n  int* gettysburg_address = &gettysburg; ➊\n  printf(\"Value at gettysburg_address: %d\\n\", *gettysburg_address); ➋\n  printf(\"Gettysburg Address: %p\\n\", gettysburg_address); ➌\n  *gettysburg_address = 17325; ➍\n  printf(\"Value at gettysburg_address: %d\\n\", *gettysburg_address); ➎\n  printf(\"Gettysburg Address: %p\\n\", gettysburg_address); ➏\n--------------------------------------------------------------------------\nValue at gettysburg_address: 0 ➋\nGettysburg Address: 000000B9EEEFFB04 ➌\nValue at gettysburg_address: 17325 ➎\nGettysburg Address: 000000B9EEEFFB04 ➏\n```", "```\n  gettysburg = 17325;\n```", "```\n#include <cstdio>\n\nstruct ClockOfTheLongNow {\n  --snip--\n};\n\nint main() {\n  ClockOfTheLongNow clock;\n  ClockOfTheLongNow* clock_ptr = &clock; ➊\n  clock_ptr->set_year(2020); ➋\n printf(\"Address of clock: %p\\n\", clock_ptr); ➌\n  printf(\"Value of clock's year: %d\", clock_ptr->get_year()); ➍\n}\n--------------------------------------------------------------------------\nAddress of clock: 000000C6D3D5FBE4 ➌\nValue of clock's year: 2020 ➍\n```", "```\n  printf(\"Value of clock's year: %d\", (*clock_ptr).get_year());\n```", "```\nint key_to_the_universe[]{ 3, 6, 9 };\nint* key_ptr = key_to_the_universe; // Points to 3\n```", "```\n#include <cstdio>\n\nstruct College {\n  char name[256];\n};\nvoid print_name(College* college_ptr➊) {\n  printf(\"%s College\\n\", college_ptr->name➋);\n}\n\nint main() {\n  College best_colleges[] = { \"Magdalen\", \"Nuffield\", \"Kellogg\" };\n  print_name(best_colleges);\n}\n--------------------------------------------------------------------------\nMagdalen College ➋\n```", "```\n#include <cstdio>\n\nstruct College {\n  char name[256];\n};\n\nvoid print_names(College* colleges➊, size_t n_colleges➋) {\n  for (size_t i = 0; i < n_colleges; i++) { ➌\n    printf(\"%s College\\n\", colleges[i]➍.name➎);\n  }\n}\n\nint main() {\n  College oxford[] = { \"Magdalen\", \"Nuffield\", \"Kellogg\" };\n  print_names(oxford, sizeof(oxford) / sizeof(College));\n}\n--------------------------------------------------------------------------\nMagdalen College\nNuffield College\nKellogg College\n```", "```\nCollege* third_college_ptr = &oxford[2];\n```", "```\nCollege* third_college_ptr = oxford + 2;\n```", "```\n#include <cstdio>\nint main() {\n  char lower[] = \"abc?e\";\n  char upper[] = \"ABC?E\";\n  char* upper_ptr = upper;     ➊ // Equivalent: &upper[0]\n\n  lower[3] = 'd';              ➋ // lower now contains a b c d e \\0\n  upper_ptr[3] = 'D';             // upper now contains A B C D E \\0\n\n  char letter_d = lower[3];    ➌ // letter_d equals 'd'\n  char letter_D = upper_ptr[3];   // letter_D equals 'D'\n\n  printf(\"lower: %s\\nupper: %s\", lower, upper); ➍\n\n  lower[7] = 'g';              ➎ // Super bad. You must never do this.\n}\n--------------------------------------------------------------------------\nlower: abcde ➍\nupper: ABCDE\nThe time is 2:14 a.m. Eastern time, August 29th. Skynet is now online. ➎\n```", "```\n#include <cstdio>\nint main() {\n char lower[] = \"abc?e\";\n  char upper[] = \"ABC?E\";\n  char* upper_ptr = &upper[0];\n\n  *(lower + 3) = 'd';\n  *(upper_ptr + 3) = 'D';\n\n  char letter_d = *(lower + 3); // lower decays into a pointer when we add\n  char letter_D = *(upper_ptr + 3);\n\n  printf(\"lower: %s\\nupper: %s\", lower, upper);\n\n  *(lower + 7) = 'g'; ➊\n}\n```", "```\n#include <cstdio>\n\nstruct ClockOfTheLongNow {\n  --snip--\n};\n\nvoid add_year(ClockOfTheLongNow&➊ clock) {\n  clock.set_year(clock.get_year() + 1); ➋ // No deref operator needed\n}\n\nint main() {\n  ClockOfTheLongNow clock;\n  printf(\"The year is %d.\\n\", clock.get_year()); ➌\n  add_year(clock); ➍ // Clock is implicitly passed by reference!\n  printf(\"The year is %d.\\n\", clock.get_year()); ➎\n}\n--------------------------------------------------------------------------\nThe year is 2019\\. ➌\nThe year is 2020\\. ➎\n```", "```\nstruct Element {\n  Element* next{}; ➊\n  void insert_after(Element* new_element) { ➋\n    new_element->next = next; ➌\n    next = new_element; ➍\n  }\n  char prefix[2]; ➎\n  short operating_number; ➏\n};\n```", "```\n#include <cstdio>\n\nstruct Element {\n  --snip--\n};\n\nint main() {\n  Element trooper1, trooper2, trooper3; ➊\n  trooper1.prefix[0] = 'T';\n  trooper1.prefix[1] = 'K';\n  trooper1.operating_number = 421;\n  trooper1.insert_after(&trooper2); ➋\n  trooper2.prefix[0] = 'F';\n  trooper2.prefix[1] = 'N';\n  trooper2.operating_number = 2187;\n  trooper2.insert_after(&trooper3); ➌\n  trooper3.prefix[0] = 'L';\n  trooper3.prefix[1] = 'S';\n  trooper3.operating_number = 005; ➍\n\n  for (Element *cursor = &trooper1➎; cursor➏; cursor = cursor->next➐) {\n    printf(\"stormtrooper %c%c-%d\\n\",\n           cursor->prefix[0],\n           cursor->prefix[1],\n           cursor->operating_number); ➑\n  }\n}\n--------------------------------------------------------------------------\nstormtrooper TK-421 ➑\nstormtrooper FN-2187 ➑\nstormtrooper LS-5 ➑\n```", "```\n#include <cstdio>\n\nint main() {\n  int original = 100;\n  int& original_ref = original;\n  printf(\"Original:  %d\\n\", original); ➊\n  printf(\"Reference: %d\\n\", original_ref); ➋\n\n  int new_value = 200;\n  original_ref = new_value; ➌\n  printf(\"Original:  %d\\n\", original); ➍\n  printf(\"New Value: %d\\n\", new_value); ➎\n  printf(\"Reference: %d\\n\", original_ref); ➏\n}\n--------------------------------------------------------------------------\nOriginal:  100 ➊\nReference: 100 ➋\nOriginal:  200 ➍\nNew Value: 200 ➎\nReference: 200 ➏\n```", "```\nstruct Element {\n  Element* next{};\n  void insert_after(Element* new_element) {\n new_element->next = this->next; ➊\n    this->next ➋ = new_element;\n  }\n  char prefix[2];\n  short operating_number;\n};\n```", "```\nstruct ClockOfTheLongNow {\n  bool set_year(int year➊) {\n    if (year < 2019) return false;\n    this->year = year; ➋\n    return true;\n  }\n--snip--\nprivate:\n  int year; ➌\n};\n```", "```\nvoid petruchio(const char* shrew➊) {\n  printf(\"Fear not, sweet wench, they shall not touch thee, %s.\", shrew➋);\n  shrew[0] = \"K\"; ➌ // Compiler error! The shrew cannot be tamed.\n}\n```", "```\nstruct ClockOfTheLongNow {\n  --snip--\n  int get_year() const ➊{\n      return year;\n  }\nprivate:\n  int year;\n};\n```", "```\nbool is_leap_year(const ClockOfTheLongNow& clock) {\n  if (clock.get_year() % 4 > 0) return false;\n  if (clock.get_year() % 100 > 0) return true;\n  if (clock.get_year() % 400 > 0) return false;\n  return true;\n}\n```", "```\nstruct Avout {\n  const➊ char* name = \"Erasmas\";\n  ClockOfTheLongNow apert; ➋\n};\n```", "```\nvoid does_not_compile(const Avout& avout) {\n  avout.apert.add_year(); // Compiler error: avout is const\n}\n```", "```\n#include <cstdio>\n\nstruct ClockOfTheLongNow {\n  --snip--\n};\n\nstruct Avout {\n  Avout(const char* name, long year_of_apert) ➊\n    :➋ name➌{ name }➍, apert➎{ year_of_apert }➏ {\n  }\n  void announce() const { ➐\n    printf(\"My name is %s and my next apert is %d.\\n\", name, apert.get_year());\n  }\n const char* name;\n  ClockOfTheLongNow apert;\n};\n\nint main() {\n  Avout raz{ \"Erasmas\", 3010 };\n  Avout jad{ \"Jad\", 4000 };\n  raz.announce();\n  jad.announce();\n}\n--------------------------------------------------------------------------\nMy name is Erasmas and my next apert is 3010.\nMy name is Jad and my next apert is 4000.\n```", "```\nint answer = 42;\n```", "```\nauto the_answer { 42 };            // int\nauto foot { 12L };                 // long\nauto rootbeer { 5.0F };            // float\nauto cheeseburger { 10.0 };        // double\nauto politifact_claims { false };  // bool\nauto cheese { \"string\" };          // char[7]\n```", "```\nauto the_answer = 42;\nauto foot(12L);\n--snip--\n```", "```\nauto year { 2019 };              // int\nauto& year_ref = year;           // int&\nconst auto& year_cref = year;    // const int&\nauto* year_ptr = &year;          // int*\nconst auto* year_cptr = &year;   // const int*\n```", "```\nstruct Dwarf {\n  --snip--\n};\n\nDwarf dwarves[13];\n\nstruct Contract {\n  void add(const Dwarf&);\n};\n void form_company(Contract &contract) {\n  for (const auto& dwarf : dwarves) { ➊\n    contract.add(dwarf);\n  }\n}\n```"]