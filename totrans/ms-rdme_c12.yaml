- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Agile Planning
  prefs: []
  type: TYPE_NORMAL
- en: Software development should be planned and tracked. Your teammates want to know
    what you’re working on so they can collaborate with you effectively. Teams need
    to track progress so they can plan future work and course-correct as new information
    is discovered during development. Without a deliberate process, projects drag
    on, outside demands steal focus, and operational issues distract developers.
  prefs: []
  type: TYPE_NORMAL
- en: '*Agile development*, a software development methodology, is widely adopted
    to deliver quality software quickly. Understanding the core philosophy and the
    goals of common Agile processes such as sprint planning, daily stand-ups, reviews,
    and retrospectives will help you use them effectively. This chapter introduces
    you to Agile planning basics and key practices of Scrum (a commonly adopted Agile
    framework), so you can hit the ground running.'
  prefs: []
  type: TYPE_NORMAL
- en: The Agile Manifesto
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make sense of Agile development practices, you must first understand the
    Agile philosophy. Agile was born in 2001 from collaboration between leaders in
    previous development processes such as Extreme Programming, Scrum, Feature-Driven
    Development, and Pragmatic Programming. The creators of the Agile process wrote
    the *Agile Manifesto* ([https://agilemanifesto.org/](https://agilemanifesto.org/))
    to describe the core tenets that undergird the process:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are uncovering better ways of developing software by doing it and helping
    others do it. Through this work we have come to value:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Individuals and interactions** over processes and tools'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Working software** over comprehensive documentation'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Customer collaboration** over contract negotiation'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Responding to change** over following a plan'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: That is, while there is value in the items on the right, we value the items
    on the left more.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The manifesto sounds a little quirky, but it gets at some important points.
    Agile practices focus on collaboration with teammates and customers; recognizing,
    accepting, and incorporating change; and focusing on iterative improvement over
    big-bang development releases. Agile is usually contrasted with *Waterfall*, an
    out-of-fashion practice where projects get exhaustively planned at their inception.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ironically, once Agile became popular, black-belt ninjas, certifications, and
    process consultants overran some organizations. People got obsessed with the “right”
    way to “do Agile,” often to the detriment of the very first principle: “individuals
    and interactions over processes and tools.”'
  prefs: []
  type: TYPE_NORMAL
- en: Agile Planning Frameworks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Scrum and Kanban are the two most common Agile planning frameworks. *Scrum*,
    the most popular, encourages short iterations with frequent checkpoints to adjust
    plans. Development work is broken into *sprints*. Sprint length varies, with two
    weeks being most common. At the beginning of a sprint, each team has a *sprint
    planning* meeting to divvy up work, which is captured in *user stories* or *tasks*.
    After planning, developers start on their work. Progress is tracked in a *ticketing*
    or *issue* system. A brief *stand-up* meeting takes place every day to share updates
    and call out problems. After each sprint, teams perform a *retrospective* to review
    finished work, discuss new findings, look at key metrics, and fine-tune the process.
    *Retrospectives (retros)* inform the next sprint’s planning session, creating
    a feedback cycle from plan to development to retrospective and back to plan.
  prefs: []
  type: TYPE_NORMAL
- en: '*Kanban* does not use fixed-length sprints like Scrum. Instead, Kanban defines
    workflow stages through which all work items transition (for example, backlog,
    planning, implementation, testing, deployment, rollout). Teams often customize
    Kanban stages to fit their needs. Kanban limits *work in progress (WIP)* by limiting
    the number of tasks in each stage. By limiting ticket count, teams are forced
    to finish existing tasks before taking on new work. Kanban boards are dashboards
    with vertical columns for each workflow stage. Tasks, represented by titled boxes,
    are moved between columns as status changes. Kanban boards visualize in-flight
    work and identify problems like piled-up work in a certain stage. If the board
    shows that a lot of work is stuck in the testing stage, for example, the team
    might make an adjustment by shifting some of the development work to a backlog,
    freeing up engineers to help with testing. Kanban works best for teams like support
    engineers and SREs that handle a large number of incoming requests rather than
    longer-term projects.'
  prefs: []
  type: TYPE_NORMAL
- en: Teams rarely implement the “platonic ideal” of Scrum or Kanban; they pick and
    choose some practices and alter or ignore others. Whether your organization practices
    Scrum, Kanban, a mashup of the two called *Scrumban* (that’s a real thing!), or
    some other variant of Agile, the planning process should be in service of delivering
    useful software to happy customers. Stay focused on the goals rather than the
    mechanics. Experiment and measure the results; keep what works and drop the rest.
  prefs: []
  type: TYPE_NORMAL
- en: Scrum
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most software teams practice some form of Scrum, so you’ll need to understand
    how it works. All planning usually begins with prework. Developers and product
    managers create new *user stories*, and tickets from the *backlog* are *triaged*.
    Stories are assigned *story points* to estimate their complexity and are broken
    into *tasks*. Larger stories are designed and researched with *spike* stories.
    During *sprint planning*, the team chooses which stories to complete during the
    next sprint, using story points to prevent overcommitting.
  prefs: []
  type: TYPE_NORMAL
- en: User Stories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A user story is a specific kind of ticket that defines a feature request from
    a user’s perspective, in the format “As a <user>, I <want to> <so that>.” Here’s
    an example: “As an administrator, I want to grant viewer permissions to my accountants
    so that they can see incoming billing statements.” Writing user-centric descriptions
    keeps the focus on delivering user value.'
  prefs: []
  type: TYPE_NORMAL
- en: A common misuse of user stories is to jam a regular task description into a
    story, as in “As a developer, I need to upgrade the shader plugin to version 8.7”
    or “As a user, I want the privacy policy to show up in the footer.” A story like
    this misses the whole point. Why does the shader plugin need to be updated, what
    is the value this brings, and who wants it? Does a “user” want the policy, or
    does the compliance officer? If you are going to bother writing stories as opposed
    to tasks, write good ones.
  prefs: []
  type: TYPE_NORMAL
- en: Stories usually have attributes beside their title and description. The two
    most common are *estimates* and *acceptance criteria*. User story estimates are
    a guess at the effort a story takes to implement. Acceptance criteria define when
    a story is complete. Acceptance criteria keep developers, product managers, QA,
    and users on the same page. Try to write explicit tests for each acceptance criteria.
  prefs: []
  type: TYPE_NORMAL
- en: The administrator permission page lists the “billing statements” option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nonadministrator-granted “billing statements” viewer permission can see all
    of the account’s billing statements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Edit button is hidden on the billing statement page for nonadministrator
    accounts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nonadministrators with viewer permission are unable to edit billing statements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nonadministrators with editor and viewer billing statement permissions are able
    to both see and edit billing statements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Small stories often double as work tickets, while larger stories are linked
    to implementation tickets or subtasks. Stories that are ambiguous or need design
    are spiked. A spike is a time-bounded investigation that enables other stories
    to be completed. Spikes deliver a design doc, a build-versus-buy decision, an
    assessment of trade-offs, and so on. See Chapter 10 for more on design.
  prefs: []
  type: TYPE_NORMAL
- en: Tasks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A single story may need to be broken down into smaller tasks to estimate how
    long it will take, to share the work between multiple developers, and to track
    implementation progress. A good trick for breaking down work is to write very
    detailed descriptions. Read over the description and find all of the tasks.
  prefs: []
  type: TYPE_NORMAL
- en: We need to add a `retry` parameter to `postProfile`. Right now, profiles don’t
    update if a network timeout occurs. We’ll probably want to cap the retries and
    add exponential backoff so we don’t block for too long; need to talk with product
    to find out how long they’re willing to wait for a profile post to complete.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Once implemented, we should do both unit and integration tests. We should simulate
    real network timeouts in the integration tests to verify backoff is working correctly.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: After testing, we need to deploy to our testing environment, then production.
    In production, we should probably split the traffic and ramp the retry behavior
    slowly, since `postProfile` is pretty sensitive.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Something as simple as adding a `retry` parameter to a network post actually
    has many steps: solidifying the specification with product managers, coding, unit
    testing, integration testing, deploying, and ramping. Breaking this work into
    subtasks helps track and coordinate all the steps.'
  prefs: []
  type: TYPE_NORMAL
- en: Story Points
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The team’s work capacity is measured in *story points*, an agreed-upon sizing
    unit (measured in hours, days, or “complexity”). A sprint’s capacity is the number
    of developers multiplied by the story points per developer; for example, a team
    with 4 engineers and 10 points per engineer would have a 40-point capacity. User-story
    time estimates are also defined in story points; the sum of all story points in
    a sprint should not be greater than a sprint’s capacity.
  prefs: []
  type: TYPE_NORMAL
- en: Many teams use time-based allocations where a single point amounts to one workday.
    Day-based estimates usually account for nontask work—meetings, interruptions,
    code reviews, and so on—by defining a workday as four hours long.
  prefs: []
  type: TYPE_NORMAL
- en: 'Others define story points by task complexity, using a T-shirt size approach:
    one point is extra small, two points is small, three points is medium, five points
    is large, and eight points is extra large. Recognize the pattern? It’s the Fibonacci
    sequence! Incrementing story points according to the Fibonacci sequence helps
    remove some of the quibbling about 3 versus 3.5 points. Having some gaps between
    point values also forces teams to make harder decisions about whether an item
    is big or small, not mediumish. The increase in the size of gaps for more complex
    tasks accounts for estimation inaccuracy in larger work.'
  prefs: []
  type: TYPE_NORMAL
- en: Agile framework doctrine frowns upon time-based estimations. Practitioners claim
    that dates have emotional attachment and don’t represent complexity. Nontime units
    can make it easier to express uncertainty. Changing a single method might seem
    like a small amount of work, but if that method is incredibly complex, it might
    require a lot of effort. It’s mentally easier to say “This is a medium-complexity
    task” than “This will take me three full days of work.”
  prefs: []
  type: TYPE_NORMAL
- en: People get very passionate about using time versus complexity for points, as
    well as their overall usefulness. We haven’t found arguments on this topic to
    be very productive and recommend adopting whatever is most effective for your
    team.
  prefs: []
  type: TYPE_NORMAL
- en: Estimating story points is subjective; people tend to be poor estimators. One
    way to improve estimation accuracy is to use *relative sizing* to derive the values.
    Relative sizing is done by defining story points for tasks that have already been
    finished and then comparing the finished task to one that hasn’t yet been worked
    on. If the unfinished task is less work, then it’s probably fewer points; more
    work is probably more points; and if the tasks are similar, then they should be
    assigned the same value. Processes like *planning poker* are sometimes used, but
    even if you don’t take part in them, looking at finished work will give you a
    feel for your team’s story point values.
  prefs: []
  type: TYPE_NORMAL
- en: Backlog Triage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Backlog triage* or *grooming* (in the tree-trimming sense) usually takes place
    before planning meetings. The backlog is a list of candidate stories. Triage is
    used to keep it fresh, relevant, and prioritized. Product managers read over the
    backlog with the engineering manager and sometimes with the developers. New stories
    are added, outdated stories are closed, incomplete stories are updated, and high-priority
    work is moved to the top of the backlog. A well-groomed backlog will drive planning
    meeting discussions.'
  prefs: []
  type: TYPE_NORMAL
- en: Sprint Planning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A sprint planning meeting is held once prework is done. Planning meetings are
    collaborative; engineering teams work with product managers to decide what to
    work on. Prioritized stories are discussed, and engineers work with product managers
    to determine what will fit into the sprint’s capacity.
  prefs: []
  type: TYPE_NORMAL
- en: Sprint capacity is determined by looking at how much was completed in previous
    sprints. Each sprint capacity is further refined during sprint planning as team
    members join or leave, go on vacation, or enter or exit on-call rotations.
  prefs: []
  type: TYPE_NORMAL
- en: The most important feature of a sprint is that it’s short—usually two weeks.
    Short sprints make pushing out work doable since the work need only be pushed
    out at most a week or two. Small sprints force teams to break down large tasks
    into smaller ones. Small tasks are better because they’re easier to understand
    and estimate. Breaking work into small tasks also allows more than one developer
    to work on a project simultaneously. Smaller development cycles with frequent
    touch points—stand-ups and reviews—mean problems surface earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Sprints are considered locked once sprint planning is done. New work that surfaces
    during the sprint should not be pulled in; it should be pushed to the backlog
    and planned for a future sprint. Locking sprints lets developers focus on their
    work and brings predictability. When unplanned work does get pulled in, the team
    is expected to look into the reasons during the retrospective, with an eye to
    reducing unplanned work in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Strict adherence to sprint planning practices is uncommon. Most teams pick and
    choose what they do; some do prework in the sprint planning meeting, and others
    have no product managers—developers define all work. Many teams don’t use user
    stories, opting instead for task or bug tickets with more open-ended formats.
    Expect variation from team to team.
  prefs: []
  type: TYPE_NORMAL
- en: Stand-ups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After sprint planning is complete, work begins, and the team holds *stand-up
    meetings*, also called *scrum meetings* or *huddles*. Stand-ups keep everyone
    apprised of your progress, keep you accountable and focused, and give the team
    an opportunity to react to anything that puts sprint goals in danger.
  prefs: []
  type: TYPE_NORMAL
- en: Stand-ups are usually 15-minute meetings scheduled every morning (quick enough
    to stand through, though actual standing is optional). In the meeting format,
    teammates go around a circle and give an update on what they have worked on since
    the last stand-up, what they plan to work on going forward, and whether they’ve
    found any issues that can delay or derail the sprint. Though in-person stand-ups
    are the most common, some teams adopt an asynchronous format. In an asynchronous
    stand-up, the same update is submitted to a chatbot or group email on a daily
    cadence.
  prefs: []
  type: TYPE_NORMAL
- en: Stand-ups are a regular system check—the glance at your car’s dashboard to ensure
    that you have gas and that its mysterious “check engine” light is not on. Updates
    should be fast; they are not a place for troubleshooting. Try to limit your comments
    on progress to just the bare essentials and raise any issues that you have. Announce
    discoveries, too; bugs that you discovered, unexpected behavior you found, and
    so on. Discussion about your discoveries can then happen in the *parking lot*
    (not the literal parking lot, of course).
  prefs: []
  type: TYPE_NORMAL
- en: 'If your team holds synchronous stand-ups, do your best to be on time. If your
    stand-ups involve updating the status on tickets or issues, try your best to update
    tickets assigned to you beforehand. When reading or listening to others’ updates,
    you’re looking for opportunities to help de-risk sprint completion: if someone
    says that a ticket is taking longer than expected, volunteer to help if you have
    spare time.'
  prefs: []
  type: TYPE_NORMAL
- en: Parking lot discussions happen after the meeting. It’s a way to keep the stand-ups
    brief and make sure that the discussions are relevant to everyone attending. When
    someone says to “save it for the parking lot,” they’re saying to stop the discussion
    and pick it up after the stand-up with interested parties.
  prefs: []
  type: TYPE_NORMAL
- en: Skipping the meeting when scheduling conflicts arise is acceptable. Ask your
    manager how to provide and get updates if you need to miss a stand-up. Asynchronous
    stand-ups are skipped less often.
  prefs: []
  type: TYPE_NORMAL
- en: There are many variations of stand-ups and scrums. You might catch phrases like
    *scrum of scrums* or *Scrumban*. Scrum of scrums is a model where a leader from
    each individual scrum meeting is selected to go to a second scrum where all the
    teams get together to report on their team progress and call out interdependencies
    between each other. Scrum of scrums are common in operations, where each team
    sends an engineer (usually the on-call) to an operations scrum to keep apprised
    of operational issues. Scrumban is an amalgamation of Scrum and Kanban. The important
    thing with all of this is to understand how your team and organization work, and
    to work within that framework.
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A review happens between each sprint. Reviews are usually broken into two parts:
    demonstrations and project review. During demonstrations, everyone on the team
    shows the progress they’ve made in the sprint. Afterward, the current sprint is
    evaluated against its goal. Successful sprints will meet their goals and have
    a high story-completion rate.'
  prefs: []
  type: TYPE_NORMAL
- en: Review meeting structures vary widely. For some teams, demonstrations are the
    emphasis of the meeting, while other teams focus only on project status reviews.
    Many teams don’t even have reviews. If your team has review meetings, take them
    seriously; provide real feedback and take pride in the work you’ve done. The value
    you get from reviews matches the effort you put into them.
  prefs: []
  type: TYPE_NORMAL
- en: It’s standard to keep reviews to no more than one hour per sprint week—a two-week
    sprint would have a two-hour sprint review. Everyone gathers around desks or in
    a conference room for demonstrations. Teammates take turns showing what they’ve
    worked on. The meeting is kept informal. Afterward, sprint goals are reviewed
    and evaluated for completion.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t overprepare for sprint reviews. Spend a few minutes figuring out what
    you’re going to show, and make sure your ticket statuses are accurate. Demonstrations
    are informal, so avoid formal presentations or speeches.
  prefs: []
  type: TYPE_NORMAL
- en: Reviews celebrate team wins, create unity, give feedback opportunities, and
    keep teams honest about progress. Not all developers in a team work on the same
    set of projects, so reviews help teammates keep up with what others are doing.
    Keeping teammates in sync gives everyone the opportunity to give feedback and
    to recognize great work; it creates cohesion. Project status reviews also help
    teams agree on what is truly “done” and how they are progressing toward their
    goals. Issues that are discovered can be discussed in sprint retrospectives.
  prefs: []
  type: TYPE_NORMAL
- en: Retrospectives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the 12 principles in the Agile Manifesto says, “At regular intervals,
    the team reflects on how to become more effective, then tunes and adjusts its
    behavior accordingly.” Retrospective meetings address this principle.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a retrospective, a team gets together to talk about what has and hasn’t
    gone well since the last retrospective. The meeting normally has three phases:
    sharing, prioritization, and problem solving.'
  prefs: []
  type: TYPE_NORMAL
- en: The leader (or *scrum master*) will kick off a retrospective by asking everyone
    to share what worked and what didn’t during the last sprint. Everyone participates,
    and the scrum master keeps a list on the whiteboard or in a shared document. Teammates
    then discuss the priority of the items that haven’t worked well—which are causing
    the most pain? Finally, the team brainstorms ways to address the highest priority
    problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Don’t be afraid to change things. Agile development practices are meant to
    be malleable; it’s in the manifesto: “Individuals and interactions over process
    and tools.” Spend a few minutes before each retrospective to think about what
    would make your team better. Share your thoughts at the meeting.'
  prefs: []
  type: TYPE_NORMAL
- en: Retrospectives and reviews often get confused. Reviews are focused on the work
    done in a sprint, while retrospectives focus on process and tooling. Retrospectives
    normally take place between sprints, often right after review meetings. Many teams
    combine a review, a retrospective, and a sprint planning meeting into a single
    meeting at the beginning of each sprint. A combined meeting is fine as long as
    each step—review, retro, and planning—is discretely addressed.
  prefs: []
  type: TYPE_NORMAL
- en: Retrospectives are also one of the reasons Agile comes in so many flavors. Teams
    are encouraged to reevaluate and adjust their processes frequently. Constant adjustment
    means no two teams practice Agile quite the same way.
  prefs: []
  type: TYPE_NORMAL
- en: Roadmaps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Two-week sprints are a good way to get small- and medium-sized work done, but
    larger projects need more advanced planning. Customers have delivery dates that
    developers need to stick to, the business needs to know which teams need more
    engineers, and large technical projects need to be broken down, planned, and coordinated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Managers use product roadmaps for long-term planning. Roadmaps are typically
    broken into quarters: January through March, April through June, July through
    September, and October through December.'
  prefs: []
  type: TYPE_NORMAL
- en: Planning takes place before each quarter begins. Engineering managers, product
    managers, engineers, and other stakeholders all convene to discuss upcoming goals
    and work. Planning usually involves a series of meetings and multiple rounds of
    discussion.
  prefs: []
  type: TYPE_NORMAL
- en: According to *The Papers of Dwight David Eisenhower*, Volume XI, Eisenhower
    said, “In preparing for battle I have always found that plans are useless, but
    planning is indispensable” (Johns Hopkins University Press, 1984). This applies
    to roadmaps. We’ve never seen a yearly or even quarterly roadmap be 100 percent
    accurate; this isn’t the point. Roadmaps should encourage everyone to think long-term
    about what the team is building; they’re not meant to be static and reliable documents
    about what the team will build nine months later. Quarters that are farther away
    should be fuzzier, while quarters that are closer should be more accurate. Don’t
    fool yourself into thinking any quarter is 100 percent accurate.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike sprints, which are locked, roadmaps are meant to evolve. Customer requirements
    will change, and new technical problems will arise. This is where sprint planning,
    reviews, and retrospectives help; they let you adjust your plan based on new information.
    Communication is critical when changing roadmaps. Dependent teams should be notified
    early that work is getting shuffled or dropped.
  prefs: []
  type: TYPE_NORMAL
- en: Many companies go through yearly planning cycles. Managers spend the last quarter
    of each year trying to plan the next four quarters of work for the upcoming year.
    Yearly planning is mostly theater—horse-trading and negotiating. Nonetheless,
    yearly planning cycles often drive “resource allocation” or “head count numbers”—corporate
    speak for where newly hired engineers end up. Annual planning usually focuses
    on large projects that account for a significant percentage of a team’s time.
    Don’t stress out if a project you are excited about isn’t mentioned; ask your
    manager where the project stands at the end of the planning process.
  prefs: []
  type: TYPE_NORMAL
- en: Do’s and Don’ts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| **Do’s** | **Don’ts** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **DO** keep standup updates short. | **DON’T** obsess over the “right way”
    to do Agile. |'
  prefs: []
  type: TYPE_TB
- en: '| **DO** write detailed acceptance criteria for stories. | **DON’T** be afraid
    to change Agile processes. |'
  prefs: []
  type: TYPE_TB
- en: '| **DO** only commit to work in a sprint that you can actually finish. | **DON’T**
    force regular task descriptions into “stories.” |'
  prefs: []
  type: TYPE_TB
- en: '| **DO** break up large chunks of work if you can’t finish them in a sprint.
    | **DON’T** forget to track planning and design work. |'
  prefs: []
  type: TYPE_TB
- en: '| **DO** use story points to estimate work. | **DON’T** add work after sprints
    begin if committed work is not yet done. |'
  prefs: []
  type: TYPE_TB
- en: '| **DO** use relative sizing and T-shirt sizing to help with estimation. |
    **DON’T** follow processes blindly. |'
  prefs: []
  type: TYPE_TB
- en: Level Up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most Agile books are going to be overkill for you. The books are extremely detailed
    and cover a lot of Agile variants; they’re targeted at project and program managers.
    Stick to online resources.
  prefs: []
  type: TYPE_NORMAL
- en: The Agile Manifesto, which we mention in this chapter, has an additional page
    called “Principles Behind the Agile Manifesto” ([http://agilemanifesto.org/principles.html](http://agilemanifesto.org/principles.html)).
    Take a look at the principles for more details on the philosophy.
  prefs: []
  type: TYPE_NORMAL
- en: Atlassian’s articles ([https://www.atlassian.com/agile/](https://www.atlassian.com/agile/))
    are a good source of practical information. You’ll find articles on everything
    from project management and roadmap planning to DevOps in Agile. If your team
    uses Kanban rather than Scrum, Atlassian’s Kanban article will be invaluable.
  prefs: []
  type: TYPE_NORMAL
