["```\n➊ BOOL limittracking = [[ASIdentifierManager sharedManager]\n        advertisingTrackingEnabled];\n\n➋ NSUUID *advid = [[ASIdentifierManager sharedManager] advertisingIdentifier];\n```", "```\n➊ [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector\n       (cookieNotificationHandler:)\n      name:NSHTTPCookieManagerAcceptPolicyChangedNotification object:nil];\n\n   - (void) cookieNotificationHandler:(NSNotification *)notification {\n       NSHTTPCookieStorage *cookieStorage = [NSHTTPCookieStorage\n        sharedHTTPCookieStorage];\n\n➋     [cookieStorage setCookieAcceptPolicy:NS\n       HTTPCookieAcceptPolicyOnlyFromMainDocumentDomain];\n   }\n```", "```\n➊ [self setLocationManager:[[CLLocationManager alloc] init]];\n➋ [[self locationManager] setDelegate:self];\n➌ [[self locationManager] setDesiredAccuracy:kCLLocationAccuracyHundredMeters];\n\n   if ([[self locationManager] respondsToSelector:\n        @selector(requestWhenInUseAuthorization)]) {\n➍     [[UIApplication sharedApplication] sendAction:\n        @selector(requestWhenInUseAuthorization)\n                                                 to:[self locationManager]\n                                               from:self\n                                           forEvent:nil];\n➎     [[self locationManager] startUpdatingLocation];\n   }\n```", "```\n   if ([HKHealthStore isHealthDataAvailable]) {\n       HKHealthStore *healthStore = [[HKHealthStore alloc] init];\n➊     HKObjectType *heartRate = [HKObjectType quantityTypeForIdentifier:\n        HKQuantityTypeIdentifierHeartRate];\n➋     HKObjectType *dob = [HKObjectType characteristicTypeForIdentifier:\n        HKCharacteristicTypeIdentifierDateOfBirth];\n➌     [healthStore requestAuthorizationToShareTypes:\n       [NSSet setWithObject:heartRate]\n                   readTypes:[NSSet setWithObject:dob]\n➍                 completion:^(BOOL success, NSError *error) {\n                                              if (!success) {\n                                                  // Failure and sadness\n\n                                              } else {\n                                                  // We succeeded!\n                                              }\n                                          }];\n   }\n```", "```\n➊ NSUUID *myUUID = [[NSUUID alloc] initWithUUIDString:\n        @\"CE7B5250-C6DD-4522-A4EC-7108BCF3F7A4\"];\n   NSString *myName = @\"My test beacon\";\n\n   CLLocationManager *myManager = [[CLLocationManager alloc] init];\n   [myManager setDelegate:self];\n\n➋ CLBeaconRegion *region = [[CLBeaconRegion alloc] initWithProximityUUID:myUUID\n➌                                                             identifier:myName];\n   [myManager startMonitoringForRegion:region];\n```", "```\n- (void)locationManager:(CLLocationManager *)manager\n         didEnterRegion:(CLRegion *)region {\n  if ([[region identifier] isEqualToString:myName]) {\n    [self startRangingBeaconsInRegion:region];\n  }\n}\n```", "```\n- (void)locationManager:(CLLocationManager *)manager didRangeBeacons:\n     (NSArray *)beacons inRegion:(CLBeaconRegion *)region\n{\n  CLBeacon *beacon = [beacons objectAtIndex:0];\n\n  switch ([beacon proximity]) {\n    case CLProximityImmediate:\n      //\n      break;\n    case CLProximityNear:\n      //\n      break;\n    case CLProximityFar:\n      //\n      break;\n    case CLProximityUnknown:\n      //\n      break;\n  }\n}\n```", "```\n➊ NSUUID *myUUID = [[NSUUID alloc] initWithUUIDString:\n        @\"CE7B5250-C6DD-4522-A4EC-7108BCF3F7A4\"];\n➋ NSString *myName = @\"My test beacon\";\n\n➌ CLBeaconRegion *region = [[CLBeaconRegion alloc] initWithProximityUUID:myUUID\n                                                              identifier:myName];\n\n➍ NSDictionary *peripheralData = [region peripheralDataWithMeasuredPower:nil];\n\n➎ CBPeripheralManager *manager = [[CBPeripheralManager alloc] initWithDelegate:self\n                                                                        queue:nil];\n\n➏ [manager startAdvertising:peripheralData];\n```"]