- en: Appendix A. Solutions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 1
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Exercise 1 is about learning to read a file and exploring the array methods
    using the contents of the file. I’d expect to see something like this in the console
    after completing the exercise:'
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-3
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The output depends on the text you used.
  id: totrans-4
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The second exercise requires writing a little code. The following sample solves
    the problem using only methods covered so far:'
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This solution should print something like this:'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The word “Call” appears once in the paragraph; the word “me” appears three times;
    and so on.
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Using the sample code provided in Exercise 3, the complete solution looks like
    this:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This combines the solutions to the first two exercises, wrapping them in a Ruby
    class.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first exercise is about familiarizing yourself with a simple Rails application
    and the functionality provided by default. The address of the home page is *http://localhost:3000/posts*.
    As you move around the application, that address changes. The new post form is
    at */posts/new*; the first post is at */posts/1*; and the form for editing the
    first post is at */posts/1/edit*. These paths and their meaning are covered in
    [Chapter 4](ch04.html "Chapter 4. Controllers").
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you’ve never worked on a large application before, the number of files in
    a typical Rails application can seem daunting. Most editors contain some type
    of project list for opening files, as well as keyboard shortcuts for quickly searching
    for files by name. These features are invaluable when working on larger projects.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 3
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following commands generate and run the migration to add an email address
    to comments:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can then launch a Rails console with `bin/rails console` and create a new
    comment with an email address.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open *app/models/comment.rb* and add the validation as shown here:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that I added the validation for both fields on a single line. You could
    do this, however, with two separate calls to the `validates` method.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can’t write a single query to determine the number of comments for each
    post, but you can iterate over all posts and count the comments. Enter something
    like this in the Rails console:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This code first finds all of the posts and then makes a count query on the comments
    table for each one.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 4
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the file *app/controllers/comments_controller.rb*, and find the `create`
    method.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Note that it currently uses @post.comments.create(comment_params) ➊ to initialize
    and save the new comment as part of the if statement. You need to store the new
    comment in a variable so you can use the errors method to get a list of errors
    when the save fails. Update the create method as shown here:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This code adds the errors to the existing alert. Notice I used the to_sentence
    method ➊ to convert the array of error messages to a sentence like this: “Author
    can’t be blank and Body can’t be blank.”'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit *app/controllers/comments_controller.rb*, and find the comment_params
    method. Add :email to the call to the permit method:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now if a user enters an email address when adding a new comment, the address
    should be stored in the database. Without this change, the `email` field is simply
    ignored.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 5
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Remove the `h1` element from *app/views/posts/index.html.erb* and update *app/views/layouts/application.html.erb,*
    as shown here:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Also change the headings in *app/views/posts/new.html.erb* and *app/ views/posts/edit.html.erb*
    to `h2` headings:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'First, add a label and text field for `:author` to the *app/views/posts/ _form.html.erb*
    partial:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then add `:author` to the list of permitted parameters in the `post_ params`
    method at the bottom of *app/controllers/posts_controller.rb*:'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Make the changes to *config/routes.rb* and *app/views/comments/_comment.html.erb*
    as described in the question. Here is how I would write the `destroy` action in
    *app/controllers/comments_controller.rb*:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Chapter 6
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After editing files in your application, stage your changes in Git with **`git
    add .`**, then commit these changes with **`git commit -m "`** ***`Commit Message"`***,
    and finally push the changes to Heroku with **`git push heroku master`**.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you don’t already have a GitHub account, go to *[https://github.com/](https://github.com/)*
    and complete the sign-up form. Next you’ll need to choose a plan. The free plan
    includes unlimited public repositories. Once you finish the sign-up process, you
    should see the GitHub Bootcamp screen. Follow the instructions there to create
    a repository and upload your application.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create your new application in the *code* directory you created in [Chapter 2](ch02.html
    "Chapter 2. Rails Fundamentals"), not inside the *blog* directory. Use the `rails
    new` command followed by the name of your new application. For example, to create
    an application to track your record collection, type this command:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next think about the models your application needs. In this case, you probably
    need a `Record` or `Album` model. The model needs fields such as `title`, `artist`,
    and `release_date`. Move to the *vinyl* directory, and use the `rails scaffold`
    command to generate some code to get started:'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now start the Rails server and work with your new application.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In my version of Rails, the `Post` class has 58 ancestors.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Using the Ruby pretty-print method (`pp)`, you can list each ancestor on a
    separate line:'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you scroll through the list of ancestors, you should see some names you recognize,
    such as `ActiveRecord::Associations` and `ActiveRecord::Validations`. Also, notice
    that `Post` inherits from `BasicObject`, just like every other class in Ruby.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `cannot_`*`feature`*`!` method should be the same as the `can_`*`feature`*`!`
    method except it assigns `false` to the `@features[f]` instead of `true`.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After adding this method, create another instance of the `User` class and make
    sure the new method works as expected:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'First, look at the instance methods defined by the `Element` class:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The methods `name` and `name=` are defined as expected. Now reopen the `Element`
    class and add a call to `accessor :symbol:`
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This should create two new methods named `symbol` and `symbol=`. You can verify
    that the methods were created by calling `instance_methods` again:'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You can verify that the methods work as expected by creating an instance of
    the `Element` class and assigning a symbol with `e.symbol = "Au"`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 8
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Specifying `dependent: :destroy` on the `belongs_to` side of the association
    causes the parent model to be destroyed when any child model is destroyed. In
    this example, destroying any `Post` also destroys the associated `User`. This
    mistake is fairly common.'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The completed `Comment` model should look like this:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The Rails generator adds `belongs_to` associations automatically, but it does
    not add validations.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Launch the Rails console with **`bin/rails console`**. Create a new `User`,
    `TextPost`, and `Comment`. Verify that all of the models were created. Then call
    `destroy` on the new `User` and verify that the associated `TextPost` and `Comment`
    records are also destroyed.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note that calling `destroy` on the model does not remove it from memory ➊. The
    variable `carol` still refers to the model even though it has been deleted from
    the database. Attempting to reload the model from the database raises an `ActiveRecord::RecordNotFound`
    exception because the record for carol has been deleted ➋.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, edit the text post partial at *app/views/text_posts/_text_post.html.erb,*
    as shown here:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This creates a link to the text_post with the time in words such as “5 days
    ago.” Edit the image post partial at *app/views/image_posts/ _image_post.html.erb*
    with a similar change.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The only difference here is the word text_post is replaced with image_post.
    Now load the posts index page and make sure the links work correctly.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The most important part of this exercise is restricting access to the controller
    to authenticated users. Add `before_action :authenticate_user!` in *app/controllers/comments_controller.rb,*
    as shown here:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The comment partial at *app/views/comments/_comment.html.erb* shows the `name`
    of the user that created the comment and the `body` of the comment.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This partial is rendered once for each comment by `render @post.comments` in
    the post `show` view.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: First, start a Rails console with **`bin/rails console`** to see the **`password_digest`**
    for a user.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The value of `alice.password_digest` that you see will be different. Bcrypt
    automatically adds a salt to the password before generating the hash digest. I
    can’t tell the password for `alice` by looking at that value. Bcrypt seems pretty
    secure!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: You can see the cookies for a site by looking at resources in your browser’s
    Developer Tools or Page Info. According to the Chrome developer tools, my current
    `_social_session` cookie is 465 bytes of alphanumeric digits like this `"M2xkVmNTaGpVaFd..."`.
    Again, I’m not able to decipher that information.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 10
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the `TextPost` partial at *app/views/text_posts/_text_post.html.erb*.
    It already displays the user’s `name`. Add a call to the `link_to` helper method
    before the `text_post.user.name` and also pass the `text_post.user` to the helper:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开*app/views/text_posts/_text_post.html.erb*中的`TextPost`部分。它已经显示了用户的`name`。在`text_post.user.name`之前添加对`link_to`帮助方法的调用，并将`text_post.user`传递给该帮助方法：
- en: '[PRE31]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then update the `ImagePost` partial at *app/views/image_posts/_image _post.html.erb*:'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后更新*app/views/image_posts/_image_post.html.erb*中的`ImagePost`部分：
- en: '[PRE32]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Finally, update the application layout at *app/views/layouts/application.html.erb*:'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，更新*app/views/layouts/application.html.erb*中的应用程序布局：
- en: '[PRE33]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The application layout already has a check for `current_user`. Add the *Profile*
    link inside this conditional.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应用程序布局中已经有对`current_user`的检查。将*Profile*链接放在这个条件语句内。
- en: Open `UsersController` at *app/controllers/users_controller.rb*. Requiring authentication
    before the follow action is a one-line change using the authenticate_user! method
    you wrote in [Chapter 9](ch09.html "Chapter 9. Authentication").
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`UsersController`位于*app/controllers/users_controller.rb*。在follow操作之前要求认证是通过使用你在[第9章](ch09.html
    "第9章. 认证")中编写的`authenticate_user!`方法进行的一行代码修改。
- en: '[PRE34]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The only: `:follow` option means anonymous users can still access the `show,
    new`, and `create` actions. Now update the user `show` view at *app/ views/users/show.html.erb*.
    I used two if statements to first verify that `current_user` is not nil, and then
    to verify that `current_user` is not equal to or already following the user being
    displayed.'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 唯一的`:follow`选项意味着匿名用户仍然可以访问`show`、`new`和`create`操作。现在更新*app/views/users/show.html.erb*中的用户`show`视图。我使用了两个if语句，首先验证`current_user`不是nil，然后验证`current_user`不等于或尚未关注正在显示的用户。
- en: '[PRE35]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: You could have also done this with a single if combining all three of the conditional
    statements.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也可以通过结合所有三个条件语句来使用单个if语句完成此操作。
- en: First, open *app/controllers/image_posts_controller.rb*, and add methods for
    the new and create actions and the private image_post_params method. These are
    similar to the corresponding methods in TextPostsController.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开*app/controllers/image_posts_controller.rb*，并为新建和创建操作以及私有的image_post_params方法添加方法。这些方法类似于TextPostsController中的相应方法。
- en: '[PRE36]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Next, add the new view at *app/views/image_posts/new.html.erb*:'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，在*app/views/image_posts/new.html.erb*中添加新的视图：
- en: '[PRE37]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Then add the form partial at *app/views/image_posts/_form.html.erb*:'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后在*app/views/image_posts/_form.html.erb*中添加表单部分：
- en: '[PRE38]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Finally, add a button to the home page at *app/views/posts/index.html. erb*
    that links to the New Image Post form:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，在*app/views/posts/index.html.erb*的主页上添加一个按钮，链接到新的图片帖子表单：
- en: '[PRE39]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Refer back to [Create Post](ch10.html#create_post "Create Post") if you have
    any questions about these actions or views.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这些操作或视图有任何问题，请回顾[创建帖子](ch10.html#create_post "创建帖子")。
- en: Chapter 11
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章
- en: 'First, add methods for the `edit` and `update` actions to the `ImagePostsController`
    at *app/controllers/image_posts_controller.rb,* as shown here:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在*app/controllers/image_posts_controller.rb*中为`edit`和`update`操作添加方法，如下所示：
- en: '[PRE40]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Next, create the `edit` view at *app/views/image_posts/edit.html.erb*:'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，在*app/views/image_posts/edit.html.erb*中创建`edit`视图：
- en: '[PRE41]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This view uses the form partial you created in [Chapter 10](ch10.html "Chapter 10. Testing").
    Finally, add a link to the `edit` action in the `ImagePost` partial at *app/views/image
    _posts/_image_post.html.erb*:'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个视图使用你在[第10章](ch10.html "第10章. 测试")中创建的表单部分。最后，在*app/views/image_posts/_image_post.html.erb*中的`ImagePost`部分添加指向`edit`操作的链接：
- en: '[PRE42]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This link is wrapped in a conditional so it only appears if this image post
    was created by the current user.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个链接被包装在一个条件语句中，只有当该图片帖子是当前用户创建时才会显示。
- en: Update the `PostsController` at *app/controllers/posts_controller.rb,* as shown
    in the question.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新*app/controllers/posts_controller.rb*中的`PostsController`，如问题所示。
- en: '[PRE43]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now edit the comment partial at *app/views/comments/_comment.html.erb* and
    add a link to destroy the comment when the `@can_moderate` instance variable is
    `true`:'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在编辑*app/views/comments/_comment.html.erb*中的评论部分，并在`@can_moderate`实例变量为`true`时添加删除评论的链接：
- en: '[PRE44]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Be sure to add `method: :delete` to the link so the `destroy` action is called.
    Finally, add the `destroy` action to the `CommentsController` at *app/ controllers/comments_controller.rb*:'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '确保在链接中添加`method: :delete`，以便调用`destroy`操作。最后，在*app/controllers/comments_controller.rb*中添加`destroy`操作：'
- en: '[PRE45]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: This method finds the comment, calls `destroy`, and redirects back to the post
    with a message indicating success or failure.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个方法查找评论，调用`destroy`，并重定向回帖子，显示成功或失败的消息。
- en: 'Open the routes file at *config/routes.rb* and edit at the `logout` route:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开*config/routes.rb*中的路由文件，并编辑`logout`路由：
- en: '[PRE46]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Edit the application layout at *app/views/layouts/application.html.erb* and
    add `method: :delete` to the *Log Out* link.'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Now the link issues a DELETE request to log out of the application.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 12
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The show page loads the collection of comments to render and then loads the
    owner of each comment individually as the comments are rendered. You can eager
    load the comments and the owners for a post by adding `includes(comments: [:user])`
    in the `show` method in the `PostsController` at *app/controllers/posts_controller.rb:*'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Adding `includes(comments: [:user])` tells Rails to eager load the comments
    for this post and all users associated with those comments.'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `Comment` partial at *app/views/comments/_comment.html.erb* and add
    the cache block:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Passing an array to the `cache` method creates a cache key that combines the
    elements in the array ➊. In this case, the cache key contains the values of the
    comment’s `id` and `updated_at` fields and the value of `@can_moderate`, either
    true or false.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the show page at *app/views/posts/show.html.erb* and add the `cache` block.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: This creates a cache key that is a combination of the cache key for `@post`,
    the word “comments,” and the value of `@can_moderate` ➊. Now the comments collection
    is displayed after a single read from the cache.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Chapter 13
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You need to update the view partials for both types of posts for this exercise.
    First, edit the file *app/views/text_posts/_text_post.html.erb* and add a `debug`
    call near the bottom, as shown here:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Then edit *app/views/link_posts/_link_post.html.erb* and add a `debug` call
    near the bottom:'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The easiest way to add the id and type of each post to the log is by iterating
    over the contents of the `@posts` instance variable. Edit *app/controllers/ posts_controller.rb*
    and update the `index` action.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Now when you refresh the posts index page, you should see five lines similar
    to “Post 5 is a TextPost” in the log.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To debug what happens when a user logs in to the application, you need to add
    a `debugger` call to the create action in *app/controllers/ sessions_controller.rb*:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: With this line in place, you can examine the `params` sent to this action, the
    current contents of the `session`, and the value of `user` as you move through
    this action.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 14
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This `curl` command is the same one you used earlier to create a new post, except
    I replaced the *token* with the word `fake`.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Note that the status code is *401 Unauthorized* and the body contains the text
    `"HTTP Token: Access denied."`'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Text posts validate the presence of a body, so use `curl` to attempt to create
    a text post without specifying a body.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Note that the status code is *422 Unprocessable Entity* and the body contains
    a JSON representation of the errors.
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the `show` method to *app/controllers/api/posts_controller.rb*:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'This method finds the requested post and assigns it to the `@post` instance
    variable and then responds with that post. The following `curl` command verifies
    that this action is working:'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Because you didn’t create a jbuilder view for this action, the default JSON
    representation for posts is returned.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你没有为此操作创建 jbuilder 视图，所以返回的是帖子默认的 JSON 表示形式。
- en: Chapter 15
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第15章
- en: 'Edit the file *app/views/layouts/application.html.erb* to change the title
    of each page:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑文件 *app/views/layouts/application.html.erb* 以更改每个页面的标题：
- en: '[PRE59]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: After you save this change, add it to your local Git repositories staging area,
    and then commit the change with an appropriate `commit` message.
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在保存此更改后，将其添加到本地 Git 仓库的暂存区，然后使用合适的 `commit` 消息提交更改。
- en: '[PRE60]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Now deploy your change by entering **`bin/cap production deploy`** in your terminal.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，通过在终端中输入 **`bin/cap production deploy`** 来部署你的更改。
- en: The Ruby Toolbox at *[https://www.ruby-toolbox.com/](https://www.ruby-toolbox.com/)*
    lists hundreds of gems you can use to add features to your application. For example,
    you can let users upload files to your application. Check the Rails File Uploads
    category to find several choices, including Paperclip and CarrierWave. From there,
    you can visit the website, read the documentation, and see the source code for
    each project.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ruby 工具箱在 *[https://www.ruby-toolbox.com/](https://www.ruby-toolbox.com/)* 上列出了数百个宝石，你可以用来为你的应用添加功能。例如，你可以让用户向你的应用上传文件。查看
    Rails 文件上传类别，找到多个选项，包括 Paperclip 和 CarrierWave。在这里，你可以访问网站，阅读文档，并查看每个项目的源代码。
- en: Go to *[https://github.com/rails/rails/](https://github.com/rails/rails/)* to
    join the discussion on open issues and pull requests, and see previous commits.
    Ruby on Rails has a page at *[http://rubyonrails.org/community/](http://rubyonrails.org/community/)*
    for those looking to get involved online. You can learn about upcoming Ruby and
    Rails conferences at *[http://rubyconf.org/](http://rubyconf.org/)* and *[http://railsconf.com,/](http://railsconf.com,/)*
    respectively. I hope to see you there!
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 *[https://github.com/rails/rails/](https://github.com/rails/rails/)* 参与讨论开放问题和拉取请求，并查看以前的提交记录。Ruby
    on Rails 也有一个页面 *[http://rubyonrails.org/community/](http://rubyonrails.org/community/)*，供那些希望在线参与的人。你可以在
    *[http://rubyconf.org/](http://rubyconf.org/)* 和 *[http://railsconf.com,/](http://railsconf.com,/)*
    分别了解即将举行的 Ruby 和 Rails 大会。希望在那里见到你！
