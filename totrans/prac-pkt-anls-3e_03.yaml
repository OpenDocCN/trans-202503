- en: '**3**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**INTRODUCTION TO WIRESHARK**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As mentioned in [Chapter 1](ch01.xhtml#ch01), several packet-sniffing applications
    are available for performing network analysis, but we’ll focus mostly on Wireshark
    in this book. This chapter introduces Wireshark.
  prefs: []
  type: TYPE_NORMAL
- en: '**A Brief History of Wireshark**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Wireshark has a very rich history. Gerald Combs, a computer science graduate
    of the University of Missouri at Kansas City, originally developed it out of necessity.
    The first version of Combs’s application, called Ethereal, was released in 1998
    under the GNU Public License (GPL).
  prefs: []
  type: TYPE_NORMAL
- en: Eight years after releasing Ethereal, Combs left his job to pursue other career
    opportunities. Unfortunately, his employer at that time had full rights to the
    Ethereal trademarks, and Combs was unable to reach an agreement that would allow
    him to control the Ethereal brand. Instead, Combs and the rest of the development
    team rebranded the project as *Wireshark* in mid-2006.
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark has grown dramatically in popularity, and its collaborative development
    team now boasts more than 500 contributors. The program that exists under the
    Ethereal name is no longer being developed.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Benefits of Wireshark**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Wireshark offers several benefits that make it appealing for everyday use. Aimed
    at both the up-and-coming and the expert packet analyst, it offers a variety of
    features to entice each. Let’s examine Wireshark according to the criteria defined
    in [Chapter 1](ch01.xhtml#ch01) for selecting a packet-sniffing tool.
  prefs: []
  type: TYPE_NORMAL
- en: '**Supported protocols**   Wireshark excels in the number of protocols that
    it supports—more than 1,000 as of this writing. These range from common ones like
    IP and DHCP to more advanced proprietary protocols like DNP3 and BitTorrent. And
    because Wireshark is developed under an open source model, new protocol support
    is added with each update.'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*In the unlikely event that Wireshark doesn’t support a protocol you need,
    you can code that support yourself. Then you can submit your code to the Wireshark
    developers for consideration for inclusion in the application. You can learn about
    what is required to contribute code to the Wireshark project at* [https://www.wireshark.org/develop.html](https://www.wireshark.org/develop.html).'
  prefs: []
  type: TYPE_NORMAL
- en: '**User-friendliness**   The Wireshark interface is one of the easiest to understand
    of any packet-sniffing application. It is GUI based, with clearly written context
    menus and a straightforward layout. It also provides several features designed
    to enhance usability, such as protocol-based color coding and detailed graphical
    representations of raw data. Unlike some of the more complicated command line–driven
    alternatives, like tcpdump, the Wireshark GUI is accessible to those just entering
    the world of packet analysis.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cost**   Since it’s open source and released under the GNU Public License
    (GPL), Wireshark’s pricing can’t be beat: it’s absolutely free. You can download
    and use Wireshark for any purpose, whether personal or commercial.'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Although Wireshark may be free, some people have made the mistake of paying
    for it by accident. If you search for packet sniffers on eBay, you may be surprised
    by how many people would love to sell you a “professional enterprise license”
    for Wireshark for the low, low price of $39.95\. If you decide you really want
    to buy it, give me a call, and we can talk about some oceanfront property in Kentucky
    I have for sale!*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Program support**   A software package’s level of support can make or break
    it. Freely distributed software such as Wireshark may not come with any formal
    support, so the open source community often relies on its user base to provide
    assistance. Luckily for us, the Wireshark community is one of the most active
    of any open source project. The Wireshark website links directly to several forms
    of support, including online documentation; a wiki; FAQs; and a place to sign
    up for the Wireshark mailing list, which is monitored by most of the program’s
    top developers. Paid support for Wireshark is also available from Riverbed Technology.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Source code access**   Wireshark is open source software, so you can access
    the code at any time. This can be useful for troubleshooting application issues,
    understanding how protocol dissectors work, or making your own contributions.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Operating system support**   Wireshark supports all major modern operating
    systems, including Windows, Linux-based, and OS X platforms. You can view a complete
    list of supported operating systems on the Wireshark home page.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing Wireshark**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Wireshark installation process is surprisingly simple. However, before
    you install Wireshark, make sure that your system meets the following requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: •     Any modern 32-bit x86 or 64-bit CPU
  prefs: []
  type: TYPE_NORMAL
- en: •     400MB available RAM, but more for larger capture files
  prefs: []
  type: TYPE_NORMAL
- en: •     At least 300MB of available storage space, plus space for capture files
  prefs: []
  type: TYPE_NORMAL
- en: •     NIC that supports promiscuous mode
  prefs: []
  type: TYPE_NORMAL
- en: •     WinPcap/libpcap capture driver
  prefs: []
  type: TYPE_NORMAL
- en: The WinPcap capture driver is the Windows implementation of the pcap packet-capturing
    application programming interface (API). Simply put, this driver interacts with
    your operating system to capture raw packet data, apply filters, and switch the
    NIC in and out of promiscuous mode.
  prefs: []
  type: TYPE_NORMAL
- en: Although you can download WinPcap separately (from *[http://www.winpcap.org/](http://www.winpcap.org/)*),
    it is typically better to install WinPcap from the Wireshark installation package,
    because the included version of WinPcap has been tested to work with Wireshark.
  prefs: []
  type: TYPE_NORMAL
- en: '***Installing on Windows Systems***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The current version of Wireshark is tested to support versions of Windows that
    are still within their extended support lifetime. As of the writing of this book,
    that encompasses Windows Vista; Windows 7; Windows 8; Windows 10; and Windows
    Servers 2003, 2008, and 2012\. While Wireshark will often work on other versions
    of Windows (like Windows XP), those versions are not officially supported.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step when installing Wireshark on Windows is to obtain the latest
    installation build from the official Wireshark web page, *[http://www.wireshark.org/](http://www.wireshark.org/)*.
    Navigate to the Download Wireshark section on the website and choose a release
    mirror. Once you’ve downloaded the package, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Double-click the *.exe* file to begin installation and then click **Next** in
    the introductory window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Read the licensing agreement and click **I Agree** if you agree.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the components of Wireshark you wish to install, as shown in [Figure
    3-1](ch03.xhtml#ch03fig1). For our purposes, you can accept the defaults by clicking
    **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f40-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*Figure 3-1: Choosing the Wireshark components you wish to install*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Next** in the Additional Tasks window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the location where you wish to install Wireshark and click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the dialog asks whether you want to install WinPcap, first make sure the
    **Install WinPcap** box is checked, as shown in [Figure 3-2](ch03.xhtml#ch03fig2).
    Then click **Install**. The installation process should begin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: About halfway through the Wireshark installation, the WinPcap installation should
    start. When it does, click **Next** in the introductory window, read the licensing
    agreement, and click **I Agree**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You’ll be given the option to install USBPcap, a utility for collecting data
    from USB devices. Select the appropriate check box if you wish to do so and click
    **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f41-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*Figure 3-2: Selecting the option to install the WinPcap driver*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: WinPcap and, if you selected it, USBPcap should install on your computer. After
    this installation is complete, click **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wireshark should complete its installation. When it’s finished, click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the installation confirmation window, click **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***Installing on Linux Systems***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Wireshark works on most modern Unix-based platforms. It can be installed either
    by using the distributions package manager of choice or by downloading and installing
    the package appropriate for your distribution. It isn’t realistic to cover installation
    procedures for everyone, so we’ll just look at a few.
  prefs: []
  type: TYPE_NORMAL
- en: Typically, for system-wide software, root access is a requirement. However,
    local software installations compiled from source can usually be installed without
    root access.
  prefs: []
  type: TYPE_NORMAL
- en: '**RPM-Based Systems**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'If you’re using Red Hat Linux or a distribution based on it, like CentOS, then
    it’s likely the OS has the Yum package management tool installed by default. If
    that’s the case, you may be able to install Wireshark the quick way by pulling
    it from the distribution’s software repository. To do this, open a console window
    and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If any dependencies are needed, you’ll be prompted to install them. If everything
    completes successfully, then you should be able to run Wireshark from the command
    line and access it via the GUI.
  prefs: []
  type: TYPE_NORMAL
- en: '**DEB-Based Systems**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Most DEB-based distributions, such as Debian or Ubuntu, include the APT package
    management tool, which allows you to install Wireshark from the OS software repository.
    To install Wireshark with this tool, open a console window and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Once again, you’ll be prompted to install any required dependencies to complete
    the installation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Compiling from Source**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Due to changes in operation system architecture and Wireshark features, the
    instructions for compiling Wireshark from source might change over time. That’s
    one reason it’s recommended to use your operating system package manager to perform
    the installation. However, if your Linux distribution doesn’t use an automated
    package management software or you require a specialized installation, Wireshark
    can be installed manually by compiling it from source. To do so, complete the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the source package from the Wireshark web page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Extract the archive by entering the following (substituting the filename of
    your downloaded package as appropriate):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Before configuring and installing Wireshark, a few dependencies may be required
    depending on your chosen Linux flavor. For example, Ubuntu 14.04 requires the
    installation of a few other packages for Wireshark to work. These can be installed
    by issuing the following command (you’ll need to do this as a root-level user
    or by invoking `sudo` before the command):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After installing prerequisites, navigate to the directory where the Wireshark
    files were extracted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the source so that it will build correctly for your distribution of
    Linux by using the command ./configure. If you wish to deviate from the default
    installation options, you can specify those options at this point in the installation.
    If any dependencies are missing, you’ll most likely receive an error. You must
    install and configure those dependencies before proceeding. If configuration is
    successful, you should see a message noting success, as shown in [Figure 3-3](ch03.xhtml#ch03fig3).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f43-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*Figure 3-3: When the `./configure` command is successful, a message is displayed
    with the selected configurations.*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter the make command to build the source into a binary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Initiate the final installation with sudo make install.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run sudo/sbin/ldconfig to complete the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you run into an error following these steps, you may have to install an
    additional package.*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Installing on OS X Systems***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To install Wireshark on OS X, complete these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the OS X package from the Wireshark web page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the installation utility and proceed through its steps. Once you’ve accepted
    the required end user license agreement, you’ll have the option to select the
    installation location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Complete the installation wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Wireshark Fundamentals**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you’ve successfully installed Wireshark on your system, you can begin to
    familiarize yourself with it. Now you finally get to open your fully functioning
    packet sniffer and see . . . absolutely nothing!
  prefs: []
  type: TYPE_NORMAL
- en: Okay, so Wireshark isn’t very interesting when you first open it. For things
    to really get exciting, you need to get some data.
  prefs: []
  type: TYPE_NORMAL
- en: '***Your First Packet Capture***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To get packet data into Wireshark, you’ll perform your first packet capture.
    You may be thinking, “How am I going to capture packets when nothing is wrong
    on the network?”
  prefs: []
  type: TYPE_NORMAL
- en: First, there is *always* something wrong on the network. If you don’t believe
    me, then go ahead and send an email to all of your network users and let them
    know that everything is working perfectly.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, there doesn’t need to be something wrong in order for you to perform
    packet analysis. In fact, most packet analysts spend more time analyzing problem-free
    traffic than traffic that they are troubleshooting. After all, you need a baseline
    for comparison to effectively troubleshoot network traffic. For example, if you
    ever hope to solve a problem with DHCP by analyzing its traffic, you must understand
    what the flow of working DHCP traffic looks like.
  prefs: []
  type: TYPE_NORMAL
- en: More broadly, to find anomalies in daily network activity, you must know what
    normal daily network activity looks like. When your network is running smoothly,
    your observations become a baseline representing what traffic looks like in a
    normal state.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s capture some packets!
  prefs: []
  type: TYPE_NORMAL
- en: Open Wireshark.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the main drop-down menu, select **Capture** and then **Options**. You should
    see a dialog listing the various interfaces that can be used to capture packets,
    along with some basic information about each one ([Figure 3-4](ch03.xhtml#ch03fig4)).
    Take note of the Traffic heading, which shows a line graph indicating the amount
    of traffic currently passing through that interface. Peaks on a line tell you
    that you are actually capturing packets. If you aren’t, the line will be flat.
    You can also expand each interface by clicking the arrow to the left of it to
    see the addressing information, such as the MAC address or IP address, tied to
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the interface you wish to use and click **Start**. Data should begin filling
    the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait about a minute or so, and when you are ready to stop the capture and view
    your data, click the **Stop** button from the Capture drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f45-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-4: Selecting an interface on which to perform your packet capture*'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have completed these steps and finished the capture process, the Wireshark
    main window should be alive with data. As a matter of fact, you might be overwhelmed
    by the amount of data that appears, but it will all start to make sense quickly
    as we break down the main window of Wireshark one piece at a time.
  prefs: []
  type: TYPE_NORMAL
- en: '***Wireshark’s Main Window***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll spend most of your time in the Wireshark main window. This is where all
    of the packets you capture are displayed and broken down into a more understandable
    format. Using the packet capture you just made, let’s take a look at Wireshark’s
    main window, shown in [Figure 3-5](ch03.xhtml#ch03fig5).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f45-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-5: The Wireshark main window uses a three-pane design.*'
  prefs: []
  type: TYPE_NORMAL
- en: The three panes in the main window—Packet List, Packet Details, and Packet Bytes
    from top to bottom—depend on one another. To view the details of an individual
    packet in the Packet Details pane, you must first select it in the Packet List
    pane. When you select a portion of the packet in the Packet Details pane, the
    Packet Bytes pane displays the bytes that correspond with that portion.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Notice that [Figure 3-5](ch03.xhtml#ch03fig5) lists a few different protocols
    in the Packet List pane. There is no visual separation of protocols on different
    layers (other than via color coding); all packets are shown as they are received
    on the wire.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what each pane contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Packet List**   The top pane displays a table containing all packets in the
    current capture file. It has columns containing the packet number, the relative
    time the packet was captured, the source and destination of the packet, the packet’s
    protocol, and some general information found in the packet.'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*When I refer to* traffic*, I’m referring to all packets displayed in the Packet
    List pane. When I refer to* DNS traffic *specifically, I mean the DNS protocol
    packets in the Packet List pane.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Packet Details**   The middle pane contains a hierarchical display of information
    about a single packet and can be collapsed or expanded to show all of the information
    collected about the individual packet.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Packet Bytes**   The lower pane—perhaps the most confusing—displays a packet
    in its raw, unprocessed form; that is, it shows what the packet looks like as
    it travels across the wire. This is raw information with nothing warm or fuzzy
    to make it easier to follow. We’ll discuss methods for interpreting this type
    of data in [Appendix B](ch15_appb.xhtml#ch15_appb).'
  prefs: []
  type: TYPE_NORMAL
- en: '***Wireshark Preferences***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Wireshark has several preferences that can be customized to meet your needs.
    To access Wireshark’s preferences, select **Edit** from the main drop-down menu
    and click **Preferences**. You’ll see the Preferences dialog, which contains several
    customizable options, as shown in [Figure 3-6](ch03.xhtml#ch03fig6).
  prefs: []
  type: TYPE_NORMAL
- en: 'Wireshark’s preferences are divided into six major sections plus an Advanced
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Appearance**   These preferences determine how Wireshark presents data. You
    can change most options here according to your personal preferences, including
    whether to save window positions, the layout of the three main panes, the placement
    of the scroll bar, the placement of the Packet List pane columns, the fonts used
    to display the captured data, and the background and foreground colors.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f47-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-6: You can customize Wireshark using the Preferences dialog options.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Capture**   These preferences allow you to specify options related to the
    way packets are captured, including your default capture interface, whether to
    use promiscuous mode by default, and whether to update the Packet List pane in
    real time.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Filter Expressions**   Later we will discuss how Wireshark allows you to
    filter traffic based on specific criteria. This section of the Preferences dialog
    allows you to create and manage those filters.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name Resolution**   Through these preferences, you can activate features
    of Wireshark that allow it to resolve addresses into more recognizable names (including
    MAC, network, and transport name resolution) and specify the maximum number of
    concurrent name resolution requests.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Protocols**   This section allows you to manipulate options related to the
    capture and display of the various packets Wireshark is capable of decoding. Not
    every protocol has configurable preferences, but some have several options that
    can be changed. These options are best left at their defaults unless you have
    a specific reason to change them.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Statistics**   This section provides a few configurable options for Wireshark’s
    statistical features, which will be covered in more depth in [Chapter 5](ch05.xhtml#ch05).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Advanced**   Settings that don’t fit neatly into any of the previous categories
    can be found here. Editing these settings is something typically only done by
    Wireshark power users.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Packet Color Coding***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you are anything like me, you enjoy shiny objects and pretty colors. If so,
    you probably got excited when you saw all those different colors in the Packet
    List pane, as in the example in [Figure 3-7](ch03.xhtml#ch03fig7) (well, the figure
    is in black and white if you’re reading this book in print, but you get the idea).
    It may seem as if these colors are randomly assigned to each packet, but this
    isn’t the case.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f48-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-7: Wireshark’s color coding allows for quick protocol identification.*'
  prefs: []
  type: TYPE_NORMAL
- en: Each packet is displayed in a certain color for a reason. The color can reflect
    the packet’s protocol and specific field values. For example, all UDP traffic
    is blue and all HTTP traffic is green by default. The color coding allows you
    to quickly differentiate between various protocols so that you don’t need to read
    the protocol field in the Packet List pane for every packet. You’ll find that
    this greatly speeds up the time it takes to browse through large capture files.
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark makes it easy to see which colors are assigned to each protocol through
    the Coloring Rules window, shown in [Figure 3-8](ch03.xhtml#ch03fig8). To open
    this window, select **View** from the main drop-down menu and click **Coloring
    Rules**.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f48-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-8: The Coloring Rules window lets you view and modify the coloring
    of packets.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Coloring rules are based on Wireshark filters, which we will look at in [Chapter
    4](ch04.xhtml#ch04). Using these filters, you can define your own coloring rules
    and modify existing ones. For example, to change the background color used for
    HTTP traffic from the default green to lavender, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Wireshark and access the Coloring Rules window (**View** ▶ **Coloring Rules**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the HTTP coloring rule in the coloring rules list and select it by clicking
    it once.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You’ll see the foreground and background colors at the bottom of the screen,
    as shown in [Figure 3-9](ch03.xhtml#ch03fig9).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f49-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*Figure 3-9: When editing a color filter, you can modify both the foreground
    and background colors.*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Background** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the color you wish to use on the color wheel and click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK** once more to accept the changes and return to the main window.
    The user interface should then reload itself to reflect the updated color scheme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you work with Wireshark on your network, you’ll begin to notice that you
    deal with certain protocols more than others. Here’s where color-coded packets
    can make your life a lot easier. For example, if you think that there is a rogue
    DHCP server on your network handing out IP leases, you could modify the coloring
    rule for the DHCP protocol so that it shows up in bright yellow (or some other
    easily identifiable color). This would allow you to pick out all DHCP traffic
    much more quickly, making your packet analysis more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Not too long ago, I was discussing Wireshark coloring rules during a presentation
    to a local group of students. One student was relieved to find out he could edit
    the coloring rules because he was color-blind and had trouble distinguishing certain
    protocols based on the default coloring. The ability to modify the default coloring
    rules thus provides some degree of accessibility.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Configuration Files**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It’s helpful to understand where Wireshark stores various configuration settings
    should you ever need to modify those files directly. You can find the location
    of the Wireshark configuration files by selecting **Help** from the main drop-down
    menu, choosing **About Wireshark**, and clicking the **Folders** tab. This window
    is shown in [Figure 3-10](ch03.xhtml#ch03fig10).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f50-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-10: Locating Wireshark configuration files*'
  prefs: []
  type: TYPE_NORMAL
- en: The two most important locations in terms of Wireshark customization are the
    personal and global configuration directories. The global configuration directory
    contains all of the default settings for Wireshark and is where the default profile
    stores its settings. The personal configuration folder contains customized settings
    and profiles unique to your account. Any new profiles you create will be stored
    in a subdirectory of the personal configuration folder using whatever name you
    provide.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between global and personal configuration directories is an important
    one, because any changes made to the global configuration files will affect every
    Wireshark user on a system.
  prefs: []
  type: TYPE_NORMAL
- en: '**Configuration Profiles**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After learning about Wireshark’s preferences, you may find that sometimes you
    want to use one set of preferences but then quickly switch to another set to address
    a different scenario. Instead of making you manually reconfigure your preferences
    every time this occurs, Wireshark introduced configuration profiles, which allow
    users to create saved sets of preferences.
  prefs: []
  type: TYPE_NORMAL
- en: 'A configuration profile stores the following:'
  prefs: []
  type: TYPE_NORMAL
- en: •     Preferences
  prefs: []
  type: TYPE_NORMAL
- en: •     Capture filters
  prefs: []
  type: TYPE_NORMAL
- en: •     Display filters
  prefs: []
  type: TYPE_NORMAL
- en: •     Coloring rules
  prefs: []
  type: TYPE_NORMAL
- en: •     Disabled protocols
  prefs: []
  type: TYPE_NORMAL
- en: •     Forced decodes
  prefs: []
  type: TYPE_NORMAL
- en: •     Recent settings, such as pane sizes, view menu settings, and column widths
  prefs: []
  type: TYPE_NORMAL
- en: •     Protocol-specific tables, such as SNMP users and custom HTTP headers
  prefs: []
  type: TYPE_NORMAL
- en: To view the list of profiles, click **Edit** in the main drop-down menu and
    choose the **Configuration Profiles** option. Alternatively, you can right-click
    the profiles section at the bottom-right side of the screen and select the **Manage
    Profiles** option. When you arrive at the Configuration Profiles window, you’ll
    see that Wireshark comes with a few standard profiles, including the Default,
    Bluetooth, and Classic profiles shown in [Figure 3-11](ch03.xhtml#ch03fig11).
    The Latency Investigation profile is a custom profile I’ve added and is in plaintext,
    while the global and default profiles are in italics.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f51-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-11: Viewing configuration profiles*'
  prefs: []
  type: TYPE_NORMAL
- en: The Configuration Profiles window allows you to create, copy, delete, and apply
    configuration profiles. The process of creating a new profile is very simple.
  prefs: []
  type: TYPE_NORMAL
- en: Configure Wireshark with the settings you’d like to save to a profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Proceed to the Configuration Profiles window by clicking **Edit** in the main
    drop-down menu. Select the **Configuration Profiles** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the plus (+) button and give the profile a descriptive name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you’d like to switch profiles, you can go to the Configuration Profile
    window, click the profile name, and click **OK**. You can do this more quickly
    by clicking the Profile heading at the bottom right of the Wireshark window and
    selecting the profile you’d like to use, as shown in [Figure 3-12](ch03.xhtml#ch03fig12).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f52-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-12: Quickly switch between profiles through the Profile heading.*'
  prefs: []
  type: TYPE_NORMAL
- en: One of the most useful aspects of configuration profiles is that each profile
    is stored in its own directory with a series of configuration files. This means
    that you can back up your profiles and share them with others. The folders tab
    shown in [Figure 3-10](ch03.xhtml#ch03fig10) provides paths to personal and global
    configuration file directories. To share a profile with a user on another computer,
    just copy the folder matching the name of the profile you want to share and paste
    it into the same directory for the appropriate user on another computer.
  prefs: []
  type: TYPE_NORMAL
- en: While reading along in this book, you may find the need to create a few high-level
    profiles for general troubleshooting, finding the source of network latency, and
    investigating security issues. Don’t be afraid to use profiles liberally. They
    are real time-savers when you want to quickly switch a few preference options
    on or off. I’ve known people who have used dozens of profiles to address different
    scenarios with great success.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have Wireshark up and running, you’re ready to do some packet analysis.
    [Chapter 4](ch04.xhtml#ch04) describes how you can work with the packets you’ve
    captured.
  prefs: []
  type: TYPE_NORMAL
