- en: '**3'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**3'
- en: LED Dimmer Switch**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: LED调光开关**
- en: In this project, you’ll build a light dimmer by controlling the brightness of
    an LED using a potentiometer. The power in this project lies in your ability to
    read analog inputs with the Raspberry Pi and output pulse-width modulation signals.
    These will be incredibly useful skills in future projects and in your Pi learning.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将通过使用电位器控制LED的亮度来构建一个光线调光器。这个项目的关键在于你能用树莓派读取模拟输入并输出脉宽调制信号。这些技能将对未来的项目和树莓派学习极为有用。
- en: '![image](../images/f0053-01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0053-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需组件**'
- en: Raspberry Pi
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派
- en: Breadboard
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 面包板
- en: 10 kΩ potent iometer
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 10 kΩ 电位器
- en: MCP 3008 chip
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: MCP 3008芯片
- en: 5 mm LED
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 5毫米LED
- en: 330 Ω resistor
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 330 Ω 电阻
- en: Jumper wires
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 跳线
- en: '**INTRODUCING POTENTIOMETERS**'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍电位器**'
- en: Potentiometers are like power dials and are used in a wide variety of applications
    in your daily life, such as controlling the volume of the radio, adjusting the
    brightness of a display, setting the speed on a fan, and much more. The potentiometer
    you’ll use in this project is shown in [Figure 3-1](ch03.xhtml#ch03fig1).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 电位器就像电源旋钮，广泛应用于日常生活中，例如控制收音机音量、调节显示器亮度、设置风扇速度等等。你在这个项目中使用的电位器如[图 3-1](ch03.xhtml#ch03fig1)所示。
- en: '![image](../images/f0054-01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0054-01.jpg)'
- en: '**FIGURE 3-1:** A 10 kΩ potentiometer'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-1：** 10 kΩ 电位器'
- en: A potentiometer, also referred to as *pot*, is a manually adjustable variable
    resistor. This means that you can change the amount of resistance it applies to
    a circuit by rotating the knob, changing the amount of current reaching a particular
    component.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 电位器，也称为*电位器*，是一种手动可调的可变电阻器。这意味着你可以通过旋转旋钮来改变它对电路施加的电阻大小，从而改变流向特定组件的电流量。
- en: A potentiometer has three pins, as shown in [Figure 3-2](ch03.xhtml#ch03fig2).
    The two outer pins, shown in blue and red, are connected to a resistive element,
    while the third, shown in black, is connected to a conductive adjustable *wiper*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 电位器有三个引脚，如[图 3-2](ch03.xhtml#ch03fig2)所示。两个外部引脚，分别用蓝色和红色表示，连接到一个电阻元件，而第三个引脚，用黑色表示，连接到一个可调的导电*刮刀*。
- en: '![image](../images/f0054-02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0054-02.jpg)'
- en: '**FIGURE 3-2:** How a potentiometer works'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-2：** 电位器的工作原理'
- en: The position of the wiper determines how much resistance is in the circuit.
    In this project, you’ll control the resistance in the circuit to make the LED
    brighter or dimmer.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 刮刀的位置决定了电路中的电阻值。在这个项目中，你将通过控制电路中的电阻，使LED灯变得更亮或更暗。
- en: '**READING ANALOG SIGNALS WITH RASPBERRY PI**'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用树莓派读取模拟信号**'
- en: The Raspberry Pi GPIOs can read only digital signals, which means they can read
    either HIGH (3.3 V ) or LOW (0 V ) but nothing in between. However, the potentiometer
    is an analog input, and rotating the knob changes its output voltage from 0 V
    up to 3.3 V. You want the Pi to be able to read all the values in between—like
    1 V, 1.4 V, 1.8 V, and so on—so you have gradations of light, not just on and
    off. For this, you need to convert the analog signal to digital with an analog-to-digital
    converter chip, and then create imitation analog signals using pulse-width modulation.
    Let’s go over these two topics before you begin your build.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派的GPIO只能读取数字信号，这意味着它们只能读取高电平（3.3V）或低电平（0V），中间的值不能读取。然而，电位器是模拟输入，旋转旋钮会将其输出电压从0V变化到3.3V。你希望树莓派能够读取所有中间的值——比如1V、1.4V、1.8V等——这样你就能实现渐变的亮度，而不仅仅是开和关。为此，你需要通过模拟到数字转换器芯片将模拟信号转换为数字信号，然后使用脉宽调制生成模拟信号。我们将在开始构建之前讲解这两个主题。
- en: '**Analog-to-Digital Converters**'
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**模拟到数字转换器**'
- en: The analog-to-digital converter (ADC) chip (MCP3008), shown in [Figure 3-3](ch03.xhtml#ch03fig3),
    converts the potentiometer analog signals to digital signals.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟到数字转换器（ADC）芯片（MCP3008），如[图 3-3](ch03.xhtml#ch03fig3)所示，将电位器的模拟信号转换为数字信号。
- en: '![image](../images/f0055-01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0055-01.jpg)'
- en: '**FIGURE 3-3:** MCP3008 chip analog-to-digital converter'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-3：** MCP3008芯片模拟到数字转换器'
- en: This chip has 16 pins, 8 of which are analog inputs you can connect to analog
    devices. The other 8 connect to the Raspberry Pi GPIOs. The chip pinout is shown
    in [Figure 3-4](ch03.xhtml#ch03fig4). To identify each pin, orient the chip with
    the half-circle at the top as shown in the figure.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个芯片有16个引脚，其中8个是模拟输入，可以连接到模拟设备。另8个引脚连接到树莓派的GPIO。芯片的引脚图如[图 3-4](ch03.xhtml#ch03fig4)所示。为了识别每个引脚，请将芯片上方的半圆形朝上，如图所示。
- en: '![image](../images/f0055-02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0055-02.jpg)'
- en: '**FIGURE 3-4:** MCP3008 chip'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-4：** MCP3008芯片'
- en: The following table gives the function for each pin.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 下表列出了每个引脚的功能。
- en: '| **PIN** | **SYMBOL** | **DESCRIPTION** |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| **引脚** | **符号** | **描述** |'
- en: '| --- | --- | --- |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 1 | CH0 | Analog input (channel 0) |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 1 | CH0 | 模拟输入（通道 0） |'
- en: '| 2 | CH1 | Analog input (channel 1) |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 2 | CH1 | 模拟输入（通道 1） |'
- en: '| 3 | CH2 | Analog input (channel 2) |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 3 | CH2 | 模拟输入（通道 2） |'
- en: '| 4 | CH3 | Analog input (channel 3) |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 4 | CH3 | 模拟输入（通道 3） |'
- en: '| 5 | CH4 | Analog input (channel 4) |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 5 | CH4 | 模拟输入（通道 4） |'
- en: '| 6 | CH5 | Analog input (channel 5) |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 6 | CH5 | 模拟输入（通道 5） |'
- en: '| 7 | CH6 | Analog input (channel 6) |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 7 | CH6 | 模拟输入（通道 6） |'
- en: '| 8 | CH7 | Analog input (channel 7) |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 8 | CH7 | 模拟输入（通道 7） |'
- en: '| 9 | DGND | Digital ground |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 9 | DGND | 数字地 |'
- en: '| 10 | CS/SHDN | Chip select/shutdown input |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 10 | CS/SHDN | 芯片选择/关机输入 |'
- en: '| 11 | D[IN] | Serial data in |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 11 | D[IN] | 串行数据输入 |'
- en: '| 12 | D[OUT] | Serial data out |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 12 | D[OUT] | 串行数据输出 |'
- en: '| 13 | CLK | Serial clock |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 13 | CLK | 串行时钟 |'
- en: '| 14 | AGND | Analog ground |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 14 | AGND | 模拟地 |'
- en: '| 15 | V[REF] | Reference voltage input |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 15 | V[REF] | 参考电压输入 |'
- en: '| 16 | V[DD] | +2.7 V to 5.5 V power supply |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 16 | V[DD] | +2.7 V 至 5.5 V 电源 |'
- en: '**Pulse-Width Modulation**'
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**脉宽调制（PWM）**'
- en: As we mentioned earlier, the Raspberry Pi GPIOs can be set to either HIGH or
    LOW, but they can’t output any voltages in between. However, you can output “fake”
    mid-level voltages using *pulse-width modulation (PWM)*, which is how you’ll produce
    varying levels of LED brightness for this project.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，树莓派的 GPIO 引脚可以设置为 HIGH 或 LOW，但不能输出介于两者之间的电压。然而，你可以通过*脉宽调制（PWM）*输出“伪”中间电压，这就是你在这个项目中调节
    LED 亮度的方式。
- en: If you alternate an LED’s voltage between HIGH and LOW very fast, your eyes
    can’t keep up with the speed at which the LED switches on and off; you’ll simply
    see some gradations in brightness. That’s basically how PWM works—by producing
    an output that changes between HIGH and LOW at a very high *frequency*. The *duty
    cycle* is the fraction of the period of time at which the LED is set to HIGH.
    [Figure 3-5](ch03.xhtml#ch03fig5) illustrates how PWM works.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将 LED 的电压在 HIGH 和 LOW 之间快速切换，你的眼睛无法跟上 LED 开关的速度；你会看到亮度的渐变效果。这基本上就是 PWM 的工作原理——通过输出在
    HIGH 和 LOW 之间快速变化的信号，达到非常高的*频率*。*占空比*是指 LED 在一个周期内设置为 HIGH 的时间比例。[图 3-5](ch03.xhtml#ch03fig5)展示了
    PWM 是如何工作的。
- en: '![image](../images/f0057-01.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0057-01.jpg)'
- en: '**FIGURE 3-5:** How PWM works'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3-5：** PWM 工作原理'
- en: A duty cycle of 50 percent results in 50 percent LED brightness, a duty cycle
    of 0 means the LED is fully off, and a duty cycle of 100 means the LED is fully
    on. Changing the duty cycle is how you produce different levels of brightness.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 50% 的占空比意味着 LED 亮度为 50%，占空比为 0 时 LED 完全关闭，占空比为 100 时 LED 完全亮起。通过改变占空比，你可以调节
    LED 的亮度。
- en: '**WIRING THE CIRCUIT**'
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**电路接线**'
- en: For this circuit you’ll need to connect an LED, the MCP3008 chip, and a potentiometer
    to the Pi. Follow these instructions to build the circuit, using [Figure 3-6](ch03.xhtml#ch03fig6)
    as a reference.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个电路，你需要将 LED、MCP3008 芯片和一个可变电阻连接到树莓派。按照这些步骤构建电路，参考[图 3-6](ch03.xhtml#ch03fig6)。
- en: Connect GND to the blue breadboard rail.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 GND 连接到蓝色面包板导轨。
- en: Connect 3.3 V to the red breadboard rail.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 3.3 V 连接到红色面包板导轨。
- en: Insert an LED into the breadboard, connecting the longer LED lead to GPIO 17
    through a 330 Ω resistor and the shorter lead to the GND rail.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 LED 插入面包板，将较长的 LED 引脚通过一个 330 Ω 电阻连接到 GPIO 17，较短的引脚连接到 GND 导轨。
- en: Place the MCP3008 chip in the middle of the breadboard and connect it as shown
    in the following table.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 MCP3008 芯片放置在面包板的中间，并按下表所示连接。
- en: '| **MCP3008** | **RASPBERRY PI** |'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **MCP3008** | **树莓派** |'
- en: '| --- | --- |'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 1 | Potentiometer middle lead |'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 1 | 可变电阻中间引脚 |'
- en: '| 9 | GND |'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 9 | GND |'
- en: '| 10 | GPIO 8 |'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 10 | GPIO 8 |'
- en: '| 11 | GPIO 10 |'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 11 | GPIO 10 |'
- en: '| 12 | GPIO 9 |'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 12 | GPIO 9 |'
- en: '| 13 | GPIO 11 |'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 13 | GPIO 11 |'
- en: '| 14 | GND |'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 14 | GND |'
- en: '| 15 | 3.3 V |'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 15 | 3.3 V |'
- en: '| 16 | 3.3 V |'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 16 | 3.3 V |'
- en: '**NOTE**'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Before applying power to the circuit, make sure you’ve connected the MCP3008
    chip correctly using the pinout in [Figure 3-4](ch03.xhtml#ch03fig4), or you could
    damage the chip.*'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*在给电路通电之前，请确保按照[图 3-4](ch03.xhtml#ch03fig4)中的引脚分配正确连接 MCP3008 芯片，否则可能会损坏芯片。*'
- en: Connect one of the outer leads of the potentiometer to GND and the other to
    3.3 V—it doesn’t matter which lead you use for which connection. Connect the middle
    lead to MCP3008 chip pin 1 if you haven’t already.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将可变电阻的一个外侧引脚连接到 GND，另一个连接到 3.3 V——哪个引脚连接哪个电源都无所谓。如果尚未连接，将中间引脚连接到 MCP3008 芯片的引脚
    1。
- en: '![image](../images/f0058-01.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0058-01.jpg)'
- en: '**FIGURE 3-6:** Circuit to control the LED brightness with a potentiometer'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**图3-6：** 用电位器控制LED亮度的电路'
- en: '**WRITING THE SCRIPT**'
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写脚本**'
- en: The Pi reads the analog values from the MCP3008 chip using SPI communication,
    so you’ll need to enable that first.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派通过SPI通信从MCP3008芯片读取模拟值，因此你需要先启用SPI。
- en: From the taskbar main menu, select **Preferences** ▸ **Raspberry Pi Configuration**.
    In the Interfaces tab, enable SPI as shown in [Figure 3-7](ch03.xhtml#ch03fig7)
    and click **OK**.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在任务栏主菜单中，选择**首选项** ▸ **Raspberry Pi 配置**。在“接口”标签页中，启用SPI，如[图3-7](ch03.xhtml#ch03fig7)所示，然后点击**确定**。
- en: '![image](../images/f0059-01.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0059-01.jpg)'
- en: '**FIGURE 3-7:** Enabling SPI communication'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**图3-7：** 启用SPI通信'
- en: 'Your script needs to be able to do the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你的脚本需要能够完成以下任务：
- en: Read an analog input value from the potentiometer through the MCP3008 chip.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过MCP3008芯片从电位器读取模拟输入值。
- en: Control the brightness of your LED with PWM.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PWM控制LED的亮度。
- en: Change the duty cycle of the PWM according to the input value read from the
    potentiometer.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据从电位器读取的输入值改变PWM的占空比。
- en: '**Entering the Script**'
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**输入脚本**'
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Copy the following code to the Python Editor and save the script as *brightness_controller.py*
    inside the *LEDs* folder (remember that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 打开**Python 3 (IDLE)**，然后选择**文件** ▸ **新建文件**来创建一个新的脚本。将以下代码复制到Python编辑器，并将脚本保存为*brightness_controller.py*，保存在*LEDs*文件夹内（记得你可以在*[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*下载所有脚本）：
- en: '[PRE0]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As usual, you start your code by importing the required libraries. Then you
    create an object called `pot` ➊ that refers to MCP3008 channel 0, the channel
    the potentiometer is connected to. Channel 0 corresponds to MCP3008 pin 1, channel
    1 to pin 2, and so on.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，你首先导入所需的库。然后你创建一个名为`pot` ➊ 的对象，表示MCP3008的通道0，该通道是电位器连接的通道。通道0对应MCP3008的第1引脚，通道1对应第2引脚，以此类推。
- en: '**Setting a PWM Pin and Reading Analog Values**'
  id: totrans-90
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**设置PWM引脚并读取模拟值**'
- en: The gpiozero library allows you to control an LED’s brightness with PWM by using
    a `PWMLED` object. So at ➋, you create a `PWMLED` object called `led` that refers
    to the pin the LED is connected to, in this case, GPIO17.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: gpiozero库通过使用`PWMLED`对象使你能够控制LED的亮度。因此，在 ➋ 你创建了一个名为`led`的`PWMLED`对象，指向LED连接的引脚，在此例中为GPIO17。
- en: To read an analog value using the gpiozero library, you simply get the potentiometer
    value with `pot.value`. Remember that `pot` refers to MCP3008 channel 0\. You’ll
    get decimal values between `0` and `1`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用gpiozero库读取模拟值时，你只需通过`pot.value`获取电位器的值。记住，`pot`代表的是MCP3008的通道0。你将获得介于`0`和`1`之间的小数值。
- en: '**Adjusting the Brightness**'
  id: totrans-93
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**调整亮度**'
- en: To adjust the LED brightness using PWM, you need to change its duty cycle. To
    adjust the duty cycle, you simply have to attribute a value between `0` and `1`
    to the `led.value`, in which `0` corresponds to a fully off LED and `1` to a fully
    on LED.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用PWM调整LED亮度，你需要更改其占空比。要调整占空比，你只需将一个`0`到`1`之间的值赋给`led.value`，其中`0`表示完全关闭的LED，`1`表示完全亮起的LED。
- en: 'In this script, a `while` loop ➌ that is always `True` keeps the program running.
    This loop is constantly checking the potentiometer values: if the value read from
    the potentiometer is below `0.001` ➍, the duty cycle is set to `0`, which turns
    your LED off ➎. Otherwise, the code enters the `else` block ➏, in which the duty
    cycle changes according to the value read from the potentiometer.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个脚本中，一个始终为`True`的`while`循环 ➌ 保持程序运行。这个循环不断检查电位器的值：如果从电位器读取的值低于`0.001` ➍，占空比设置为`0`，使LED关闭
    ➎。否则，代码进入`else`块 ➏，在其中占空比根据从电位器读取的值进行变化。
- en: '**Running the Script**'
  id: totrans-96
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**运行脚本**'
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. Now you should
    be able to rotate the potentiometer to control the brightness of the LED.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 按**F5**或选择**运行** ▸ **运行模块**来运行脚本。现在你应该能够旋转电位器以控制LED的亮度。
- en: '**TAKING IT FURTHER**'
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步探索**'
- en: 'Knowing how to read analog values and control output pins with PWM opens you
    up to a huge variety of projects. Give some of these a try for starters:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 学会如何读取模拟值并使用PWM控制输出引脚，将为你开启广泛的项目可能性。作为起步，你可以尝试以下一些项目：
- en: Control several LEDs with the same potentiometer.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用同一个电位器控制多个LED。
- en: Build a bar graph of LEDs that you can control with a potentiometer.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个可以通过电位器控制的LED条形图。
- en: Control the blinking speed of an LED using a potentiometer.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用可调电阻控制LED的闪烁速度。
