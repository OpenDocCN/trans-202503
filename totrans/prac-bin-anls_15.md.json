["```\n➊ x = int(argv[0])\n   y = int(argv[1])\n\n➋ z = x + y\n➌ if(x >= 5)\n      foo(x, y, z)\n      y = y + z\n      if(y < x)\n          baz(x, y, z)\n      else\n          qux(x, y, z)\n➍ else\n      bar(x, y, z)\n```", "```\nx = int(argv[0])\ny = int(argv[1])\n\nz = x + y\nif(x >= 5)\n    foo(x, y, z)\n    y = y + z\n    if(y < x)\n        ➊baz(x, y, z)\n    else\n         qux(x, y, z)\nelse\n    bar(x, y, z)\n```", "```\n   $ z3 -in\n➊ (declare-const x Int)\n   (declare-const y Int)\n   (declare-const z Int)\n➋ (declare-const y2 Int)\n➌ (assert (= z (+ x y)))\n➍ (assert (>= x   5))\n➎ (assert (= y2   (+ y z)))\n➏ (assert (< y2   x))\n➐ (check-sat)\n   sat\n➑ (get-model)\n   (model\n     (define-fun y () Int\n       (- 1))\n     (define-fun x () Int\n       5)\n     (define-fun y2 () Int\n       3)\n     (define-fun z () Int\n       4)\n   )\n```", "```\n   $ z3 -in\n   (declare-const x Int)\n   (declare-const y Int)\n   (declare-const z Int)\n   (declare-const y2 Int)\n➊ (assert (>= x 0))\n➋ (assert (>= y 0))\n   (assert (= z (+ x y)))\n   (assert (>= x 5))\n   (assert (= y2 (+ y z)))\n   (assert (< y2 x))\n➌ (check-sat)\n   unsat\n```", "```\n   $ z3 -in\n➊ (declare-const p Bool)\n   (declare-const q Bool)\n   (declare-const r Bool)\n   (declare-const s Bool)\n➋ (assert (=> (and (and (=> p q) (=> r s)) (or p (not s))) (or q (not r))))\n➌ (check-sat)\n   sat\n➍ (get-model)\n   (model\n     (define-fun r () Bool\n      true)\n   )\n➎ (reset)\n➏ (declare-const p Bool)\n   (declare-const q Bool)\n   (declare-const r Bool)\n   (declare-const s Bool)\n➐ (assert (not (=> (and (and (=> p q) (=> r s)) (or p (not s))) (or q (not r)))))\n➑ (check-sat)\n   unsat\n```", "```\n   $ z3 -in\n➊ (declare-const x Int)\n   (declare-const y Int)\n➋ (simplify (+ (* 3 x) (* 2 y) 5 x y))\n   (+ 5 (* 4 x) (* 3 y))\n```", "```\n   $ z3 -in\n➊ (declare-const x (_ BitVec 64))\n➋ (assert (not (= (bvsmod (bvadd (bvmul x x) x) (_ bv2 64)) (_ bv0 64))))\n➌ (check-sat)\n   unsat\n```", "```\nx = int(argv[0])\ny = int(argv[1])\n\nz = x*x\nw = y*y\nif(z <= 1)\n  if( ((z + w) % 7 == 0) && (x % 7 != 0) )\n     foo(z, w)\nelse\n  if((2**z - 1) % z != 0)\n     bar(x, y, z)\n\n  else\n    z = z + w\n    baz(z, y, x)\nz = z*z\nqux(x, y, z)\n```"]