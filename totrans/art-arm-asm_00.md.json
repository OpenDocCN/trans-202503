["```\n .data\ni64  .quad   0\n      .\n      .\n      .\n     ldr     x1, i64\n```", "```\nsomeFunc:\n        add x0, x1, x2\n        sub x0, x0, x3\n        ret\n```", "```\n// Listing1-1.S\n//\n// Comments consist of all text from a //\n// sequence to the end of the line.\n// The .text directive tells MASM that the\n// statements following this directive go in\n// the section of memory reserved for machine\n// instructions (code).\n\n        .text\n\n// Here is the main function.\n// (This example assumes that the\n// assembly language program is a\n// stand-alone program with its own\n// main function.)\n//\n// Under macOS, the main program\n// must have the name _main\n// beginning with an underscore.\n// Linux systems generally don't\n// require the underscore.\n//\n// The .global _main statement\n// makes the _main procedure's name\n// visible outside this source file\n// (needed by the linker to produce\n// an executable).\n\n        .global _main\n\n// The .align 2 statement tells the\n// assembler to align the following code\n// on a 4-byte boundary (required by the\n// ARM CPU). The 2 operand specifies\n// 2 raised to this power (2), which\n// is 4.\n\n        .align 2\n\n// Here's the actual main program. It\n// consists of a single ret (return)\n// instruction that simply returns\n// control to the operating system.\n\n_main:\n        ret\n```"]