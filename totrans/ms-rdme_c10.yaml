- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Technical Design Process
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 技术设计过程
- en: When asked to make a change, most entry-level engineers jump straight into coding.
    Diving into code works at first, but you’ll eventually be given a task that’s
    too big to jump into; you’ll need to think about technical design.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当被要求进行更改时，大多数初级工程师会直接跳入编码。刚开始跳入代码是有效的，但最终你会遇到一个任务，任务太大无法立即着手，你将需要思考技术设计。
- en: 'The *technical design process* helps everyone agree on a design for a large
    change. Design work is broken into two activities: solitary deep-thought work
    and collaborative group discussion. Researching, brainstorming, and writing make
    up the deep work. Design discussions and commenting on design documents make up
    the collaborative part. The tangible output of the process is a design document.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*技术设计过程*帮助每个人达成一致，为大规模变更制定设计。设计工作分为两个活动：独立的深度思考工作和协作小组讨论。研究、头脑风暴和写作构成了深度工作。设计讨论和对设计文档的评论构成了协作部分。这个过程的实际产出是一个设计文档。'
- en: 'This chapter describes an expansive version of the design process, suitable
    for large changes. The process can look slow and intimidating. Some engineers
    are traumatized by heavyweight design processes gone awry. It’s okay to scale
    things down for smaller changes. The problem you’re solving might be captured
    in three sentences, not a paragraphs-long essay. Design template sections might
    be irrelevant, multiple rounds of feedback might be unnecessary, and a review
    from other teams might not be needed. You will develop a feel for the right amount
    of input and collaboration for a problem. In the beginning, err on the side of
    caution: ask your tech lead or manager for guidance, and share your design widely.
    Done correctly, participating in and leading technical design work is rewarding
    and valuable.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述了一个扩展版的设计过程，适用于大规模变更。这个过程看起来可能很慢且令人生畏。有些工程师因沉重的设计过程而心生创伤。如果是小规模变更，可以适当简化。你所解决的问题可能只需要三句话来概述，而不是一篇长篇文章。设计模板的部分内容可能不相关，多轮反馈可能不必要，其他团队的审查可能也不需要。你会逐渐摸索出解决问题所需的适当输入和协作量。在开始时，可以采取保守的态度：向你的技术负责人或经理寻求指导，并广泛分享你的设计。如果做得正确，参与和领导技术设计工作将是有益且有价值的。
- en: The Technical Design Process Cone
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术设计过程锥形图
- en: Designing software is not a linear process from research and brainstorming to
    documentation and approval. It is more like a spiral that alternates between independent
    and collaborative work, clarifying and refining the design at every step (see
    [Figure 10-1](#figure10-1)).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 设计软件不是从研究和头脑风暴到文档和批准的线性过程。它更像是一个螺旋过程，在独立工作和协作工作之间交替进行，每一步都在澄清和完善设计（见[图 10-1](#figure10-1)）。
- en: '![f10001](image_fi/501836c10/f10001.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![f10001](image_fi/501836c10/f10001.png)'
- en: 'Figure 10-1: The design process spiral'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-1：设计过程螺旋图
- en: With every iteration, the design document becomes clearer and more detailed.
    The author’s confidence in the solution grows, as does the body of work behind
    the design—experiments, proofs of concept, and benchmarks. The number and variety
    of people consulted about the design also grows over time.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 每一次迭代，设计文档都会变得更加清晰和详细。作者对解决方案的信心不断增长，设计背后的工作量也在增加——实验、概念验证和基准测试。咨询设计的人数和种类随着时间的推移也在增长。
- en: You begin at the base of the cone. You are unclear about the problem space,
    requirements, and possible solutions. So early in the process, it is impossible
    for you to have a solution that you’re confident in.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你从锥形图的底部开始。你对问题空间、需求和可能的解决方案尚不明确。因此，在过程的早期，你不可能拥有一个你有信心的解决方案。
- en: As you research, you bounce back and forth between independent work and discussion
    with a small group of teammates or experts in the domain you’re researching. You
    brainstorm and experiment. The goal is to learn—to increase certainty and clarity.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在研究过程中，你会在独立工作和与小组成员或领域专家的讨论之间来回切换。你进行头脑风暴和实验。目标是学习——增加确定性和清晰度。
- en: Eventually, your research, experimentation, and brainstorming leads you to a
    preferred design. After sanity-checking it with those you’ve been working with,
    you write a design document. As you write, you discover more unknowns. You create
    a few small prototypes to validate your designs, answer questions, and help choose
    between viable alternative approaches. You conduct more research and ask experts
    for their input. You flesh out a draft of the design document.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: The arrow in the cone spirals further upward. You are now more certain that
    you understand the problem space. Your prototypes provide increasing confidence
    in your solution. You have a design proposal and are ready to circulate it. You
    share it with your team and get still more feedback. You research, discuss, and
    update your design document.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: You’re at the highest level of the cone now. Significant work has been invested
    in your design, and you are confident in your approach. You circulate the design
    across your organization. Security, operations, adjacent teams, and architects
    all need to be made aware of the changes you’re committing to, not just to give
    feedback but to update their mental model of how the system works.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: After your design is approved, implementation begins, but design isn’t over.
    Implementation will surface more surprises. You must update your design document
    if any large deviations are made as you and your team code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Thinking About Design
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The base of the design funnel begins with exploration. You need to understand
    the problem space and requirements before you can develop a design. Exploration
    requires thinking, research, experimentation, and discussion. As the funnel suggests,
    exploration is both an individual and a team sport.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Define the Problem
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your first task is to define and understand the problem (or problems) that you’re
    trying to solve. You need to understand the boundaries of the problem to know
    how to solve it and to avoid building the wrong thing. You might even discover
    there is no problem or that the problem isn’t worth solving.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Start by asking stakeholders what they perceive the problem to be. These stakeholders
    may be your manager, teammates, product managers, or tech leads. Not everyone
    will perceive the problem the same way.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Restate the problem, in your own words, back to the stakeholders. Ask if your
    understanding matches theirs. If there is more than one problem, ask which problems
    are the highest priority.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: “What happens if we don’t solve this problem?” is a powerful question. When
    the stakeholder answers, ask if the outcome is acceptable. You’ll find many problems
    don’t actually need to be solved.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve collected notes on the problem from various stakeholders, try to
    synthesize the feedback into a clear problem statement. Don’t take problem descriptions
    at face value. Think critically about what you’ve been told. Pay particular attention
    to the scope of the problem—what’s included and what could be included but isn’t.
    Don’t take the union of all problems from all stakeholders; this will get unwieldy.
    Don’t be afraid to trim low-priority changes. Write and circulate the problem
    statement—both what’s in and out of scope—to validate your understanding and get
    feedback.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在你收集了各个利益相关者的反馈后，尽量将反馈信息整合成一个清晰的问题陈述。不要仅凭问题描述表面进行判断。要批判性地思考你所得到的信息。特别要关注问题的范围——包括哪些内容，哪些内容本可以包括但没有包括。不要将所有利益相关者的问题合并在一起，这样会变得繁琐。不要害怕剔除低优先级的改动。编写并传播问题陈述——包括范围内和范围外的内容——以验证你的理解并获取反馈。
- en: 'The initial feature request might look like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 初始的功能需求可能如下所示：
- en: Supply managers want to see catalog and page numbers for each item listed on
    the inventory page. Showing catalog information will make it easier to reorder
    items when supplies run low. We can use contract labor to scan all catalogs, and
    we can use an ML model to map scanned images to item descriptions in the database.
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 供应经理希望在库存页面上查看每个物品的目录和页码。显示目录信息可以帮助在库存不足时更方便地重新订购物品。我们可以利用合同工扫描所有目录，并使用机器学习模型将扫描的图像映射到数据库中的物品描述。
- en: 'This request will trigger a lot of questions to the product manager:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个请求会引发很多问题，需要产品经理解答：
- en: How do supply managers place orders now?
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 供应经理现在是如何下订单的？
- en: Can an item show up in multiple catalogs?
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一件物品能出现在多个目录中吗？
- en: How are the users addressing their need without this feature?
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户在没有这个功能的情况下是如何满足需求的？
- en: What are the pain points of the current solution?
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前解决方案的痛点是什么？
- en: Which of these pain points has the biggest impact on the business?
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪个痛点对业务的影响最大？
- en: 'Answers to these questions might lead to a revised problem statement:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对这些问题的回答可能会导致修订后的问题陈述：
- en: Supply room managers need an easy way to reorder items when supplies run low.
    Currently, they maintain a mapping of the stock entry identifiers we generate
    to the vendor’s name and SKU in Excel spreadsheets and cross-reference them. Going
    from our software to Excel for lookups to ordering from a vendor is both slow
    and error prone.
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 供应室经理需要一种简便的方法来重新订购库存不足的物品。目前，他们在Excel电子表格中维护我们生成的库存条目标识符与供应商名称和SKU的映射，并进行交叉引用。从我们的软件切换到Excel进行查询，然后从供应商下单，既慢又容易出错。
- en: ''
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There can be multiple vendors for a single SKU. Supply room managers prefer
    to have access to all of them so they can minimize cost. They currently track
    a single vendor per item due to spreadsheet limitations.
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个单一的SKU可能有多个供应商。供应室经理希望能够访问所有供应商信息，以便最大限度地降低成本。由于电子表格的限制，他们目前只能跟踪每个物品的单一供应商。
- en: ''
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The supply room managers rank their priorities in the following order: data
    accuracy, time to place an order, and order cost minimization.'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 供应室经理按以下顺序排列优先级：数据准确性、下单时间、订单成本最小化。
- en: ''
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Several vendors offer online catalogs, and about half offer online purchasing.
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一些供应商提供在线目录，大约一半的供应商提供在线购买。
- en: The refined problem description will lead to a very different solution than
    the original. The engineer is focusing on the problem and enumerating priorities.
    Proposed solutions like the contract work and machine learning model have been
    discarded. Information about online vendor catalogs has also been included to
    inform potential solutions.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 精炼后的问题描述将导致与原始方案完全不同的解决方案。工程师专注于问题并列出优先级。诸如合同工作和机器学习模型之类的提议已被舍弃。还包含了关于在线供应商目录的信息，以便为潜在解决方案提供参考。
- en: Do Your Research
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 做好你的研究
- en: Don’t go straight from problem definition to “final” design. Consider relevant
    research, alternative solutions, and trade-offs. The design you come up with should
    be not your first idea but your best.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 不要直接从问题定义跳到“最终”设计。要考虑相关的研究、替代方案和权衡。你提出的设计应该是你最好的设计，而不是第一个想法。
- en: There is a plethora of resources online. Look at how others solved similar problems.
    Many companies run engineering blogs that describe how they solve problems and
    implement their features. While company blogs are partially a marketing exercise
    and often describe simplified architectures that elide the tricky bits, blog posts
    are still a reasonable way to get a general sense for what others are doing. Contacting
    the authors through social networks or email may supply details that didn’t make
    it into the blog post.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 网上有大量资源可供参考。看看别人是如何解决类似问题的。许多公司运营着工程博客，描述他们是如何解决问题并实现功能的。虽然公司博客部分是营销活动，且通常描述的是简化的架构，省略了复杂的部分，但博客文章仍然是了解别人做法的一个合理途径。通过社交网络或电子邮件联系作者，可能会获得博客文章中没有提到的细节。
- en: Industry conferences are another resource to check. Slide decks or recordings
    are usually posted online. And don’t forget about academic research and white
    papers; use the references section at the end of a paper to find yet more reading
    material.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 行业会议是另一个值得参考的资源。演示文稿或录音通常会发布在网上。别忘了学术研究和白皮书；使用论文结尾的参考文献部分找到更多的阅读材料。
- en: Talk to experts in the problem space that you’re exploring. Ask experts in your
    company for input, but don’t limit yourself to your coworkers. You’ll find that
    many blog and paper authors and presenters are eager to talk about their work.
    Just be careful not to divulge proprietary company information when talking to
    outsiders.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 与你正在探索的领域中的专家交流。向公司内的专家寻求意见，但不要仅限于你的同事。你会发现许多博客和论文的作者以及演讲者都乐于讨论他们的工作。只是要小心，避免在与外部人士交流时泄露公司机密信息。
- en: Finally, think critically. Not everything you read online is a good idea. A
    particularly common misstep is to take a solution for a problem that is similar
    but not identical to yours and to copy it wholesale. Your problems aren’t Google’s
    (possibly even if you work for Google) even though they look similar.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，批判性地思考。并不是你在网上看到的每个点子都值得采纳。一种常见的错误是拿一个与自己问题相似但不完全相同的解决方案照搬过来。即使你的问题看起来类似，也不代表它和谷歌的问题是一样的（即便你在谷歌工作）。
- en: Conduct Experiments
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 进行实验
- en: Experiment with your ideas by writing draft code and running tests. Write draft
    APIs and partial implementations. Run performance tests or even A/B user tests
    to learn how systems and users behave.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过编写草稿代码并运行测试来实验你的想法。编写草稿API和部分实现。进行性能测试，甚至是A/B用户测试，以了解系统和用户的行为。
- en: Experiments will give you confidence in your ideas, expose design trade-offs,
    and clarify the problem space. You’ll also get a feel for how your code will be
    used. Circulate your prototypes with your team to get feedback.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 实验会让你对自己的想法充满信心，暴露设计上的权衡，并且澄清问题的范围。你还可以感受到你的代码将如何被使用。与团队分享你的原型，以便获取反馈。
- en: Don’t get attached to your experimental code. Proof-of-concept code is meant
    to illustrate an idea and be thrown away or rewritten. Focus your efforts on illustrating
    or testing your idea. Don’t write tests or spend time polishing code. You’re trying
    to learn as much as you can as quickly as possible.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 不要对实验代码产生依赖。概念验证代码旨在说明一个想法，之后应丢弃或重写。把精力集中在展示或测试你的想法上。不要编写测试或浪费时间去打磨代码。你要尽可能快地学习更多的知识。
- en: Give It Time
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 给它时间
- en: Good design takes creativity. Don’t expect to sit down and bang out a design
    in one shot. Give yourself large chunks of time, take breaks, change your scenery,
    and be patient.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的设计需要创造力。不要指望一下子就能完成一个设计。给自己充足的时间，休息一下，换个环境，保持耐心。
- en: Design requires deep thought. You can’t do design in 15-minute increments; give
    yourself several hours to focus. Paul Graham wrote an essay entitled “Manager’s
    Schedule, Maker’s Schedule” ([http://www.paulgraham.com/makersschedule.html](http://www.paulgraham.com/makersschedule.html)).
    The post describes how valuable uninterrupted time is to “makers”—that’s you.
    Figure out when you are most able to sustain deep concentration and block off
    the time on your calendar. Chris prefers quiet after-lunch design sessions, while
    Dmitriy feels most productive in the early morning. Find the time that works for
    you and protect it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 设计需要深入思考。你不能在15分钟的间隙内进行设计；要给自己几小时专注的时间。保罗·格雷厄姆（Paul Graham）写过一篇文章，名为《经理的日程，创作者的日程》（[http://www.paulgraham.com/makersschedule.html](http://www.paulgraham.com/makersschedule.html)）。文章描述了“创作者”——也就是你——有连续专注时间的重要性。找出你最能保持深度集中注意力的时段，并将其安排在日程上。克里斯（Chris）偏好午餐后的安静设计时光，而德米特里（Dmitriy）则在清晨感觉最有生产力。找到适合你的时间，并为之保护。
- en: 'Interruptions are a deep-work killer. Avoid all means of communication: close
    chat, turn off email, disable phone notifications, and maybe sit in a different
    spot. Make sure you have the tools you need—whiteboard, notebook, papers—if you
    switch locations.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: You’re not going to be “designing” the entire time you’ve blocked time off.
    Your brain needs time to relax. Take breaks, and give yourself room to breathe.
    Allow your mind to relax and wander. Go for a walk, make some tea, read, write,
    and draw diagrams.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Design is a 24-hour-a-day gig, so be patient. Your brain is always mulling ideas.
    Thoughts will come to you randomly throughout the day (and even while you sleep).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: A relaxed approach to design doesn’t mean you can take forever. You have delivery
    dates to meet. Design spikes are a good way to manage the tension between creative
    work and predictable delivery. A *spike* is an Extreme Programming (XP) term for
    a time-bounded investigation. Allocating a spike task in a sprint will give you
    space to do deep thought without having other tasks to worry about.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Writing Design Documents
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Design documents are a scalable way to clearly communicate your ideas. The process
    of writing structures your thinking and highlights areas of weakness. Documenting
    your ideas does not always come naturally. To create useful design documents,
    focus on the most consequential changes, keep the goal and the audience in mind,
    practice writing, and keep your documents up-to-date.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Document Consequential Changes
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Not every change requires a design document, much less a formal design review
    process. Your organization may have its own guidelines for this; absent those,
    use these three criteria to decide if a design document is required:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: The project will require at least a month of engineering work.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The change will have long-lasting implications with regard to extending and
    maintaining the software.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The change will significantly impact other teams.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first case is self-evident: if the project will take a while to implement,
    it’s a good idea to spend some up-front time on writing down the design to ensure
    you’re not heading down the wrong path.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: The second case needs a little more explanation. Some changes are quick to introduce
    but come with long-term ramifications. This might be introducing a new piece of
    infrastructure—a caching layer, a network proxy, or a storage system. It might
    be a new public API or security measure. While there may be a fast way to add
    them to solve some immediate problem, such changes tend to have long-term costs
    that may not be obvious. Going through the process of writing the design document
    and getting it reviewed will give concerns a chance to surface and get addressed.
    A review will also ensure the whole team understands what is being added and why,
    which will help avoid surprises down the line.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Changes that significantly impact many teams also need a design document. Teams
    need to know what you’re doing so they can provide feedback and so they can accommodate
    your changes. Changes that have broad reach often require code reviews or refactoring,
    and other designs might be impacted. Your design document notifies teams of your
    forthcoming changes.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些会显著影响多个团队的变化，也需要有设计文档。团队需要知道你在做什么，以便提供反馈，并适应你的变动。影响范围广泛的变化通常需要代码审查或重构，其他设计也可能会受到影响。你的设计文档将通知团队你即将做出的变动。
- en: Know Why You’re Writing
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 明白你为什么写作
- en: Superficially, design documents tell others how a software component works.
    But a design document’s function exceeds simple documentation. A design document
    is a tool to help you think, to get feedback, to keep your team informed, to ramp
    up new engineers, and to drive project planning.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 表面上，设计文档告诉他人一个软件组件是如何工作的。但设计文档的功能不仅仅是简单的文档记录。设计文档是一种工具，帮助你思考、获取反馈、保持团队信息同步、帮助新工程师快速上手，并推动项目规划。
- en: Writing has a way of exposing what you don’t know (trust us on this one). Pushing
    yourself to write down your design forces you to explore the problem space and
    crystallize your ideas. You’ll have to confront alternative approaches and gaps
    in understanding. It’s a turbulent process, but you’ll have a better understanding
    of your design and its trade-offs for having gone through it. The clarity of thought
    you’ll get from writing down your design will make design discussions more productive
    as well.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 写作有时会暴露你所不懂的东西（相信我们这一点）。逼迫自己把设计写下来，迫使你去探索问题空间，并凝练出你的想法。你必须面对替代方案和理解中的空白。这是一个动荡的过程，但你会因为经历过这一过程而对自己的设计和其权衡有更好的理解。通过写下设计所获得的思维清晰度，也会使设计讨论更具生产力。
- en: It's easier to solicit feedback on a written design. Written documents can be
    widely circulated, and others can read and respond on their own time. Even when
    feedback is minimal, circulating a design document keeps the team informed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 征求关于书面设计的反馈更容易。书面文档可以广泛传播，其他人可以在自己的时间里阅读和回应。即使反馈较少，传播设计文档仍能让团队保持信息更新。
- en: Spreading design knowledge will help others maintain an accurate mental model
    of how the system works. The team will make better design and implementation decisions
    later. On-call engineers will correctly understand how the system is behaving.
    Engineers can also use design documents to learn from their teammates.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 传播设计知识有助于他人保持对系统工作原理的准确思维模型。团队以后能够做出更好的设计和实施决策。值班工程师也能正确理解系统的行为。工程师们还可以通过设计文档向队友学习。
- en: Design documents are particularly helpful for engineers new to the team. Without
    design documents, engineers find themselves crawling through code, creating box
    diagrams, and teasing knowledge out of senior engineers to understand what’s going
    on. Reading a trove of design documents is far more efficient.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 设计文档对新加入团队的工程师特别有帮助。没有设计文档的情况下，工程师们会通过爬取代码、画框图、从资深工程师那里逐步获取知识来理解系统。阅读大量设计文档要高效得多。
- en: Finally, managers and tech leads use design documents for project planning.
    Many design documents include milestones or implementation steps needed to complete
    the project. Having a concrete design written down makes it easier to coordinate
    with other teams if a project is cross-functional.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，管理者和技术负责人使用设计文档进行项目规划。许多设计文档包含完成项目所需的里程碑或实施步骤。如果项目是跨部门的，拥有一份具体的设计文档可以更容易地与其他团队协调。
- en: Learn to Write
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 学会写作
- en: Engineers who feel they aren’t good writers can be intimidated by the prospect
    of writing; don’t be. Writing is a skill, and like any other skill, it is developed
    through practice. Take advantage of opportunities to write—design documents, emails,
    code review comments—and try hard to write clearly.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 那些觉得自己写作不好的工程师，可能会对写作感到畏惧；但不要害怕。写作是一项技能，和任何其他技能一样，它是通过练习培养的。抓住机会多写——设计文档、邮件、代码审查评论——并努力写得清晰。
- en: 'Writing clearly will make your life much easier. Writing is a lossy method
    of information transfer: you’re taking your ideas and writing them down, and your
    teammates are reconstituting your ideas imperfectly in their minds. Good writing
    improves the fidelity of this transfer. Good writing is also a career builder.
    A well-written document is easily circulated to large groups, including executives,
    and strong writers do not go unnoticed.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 清晰地写作会让你的生活变得更加轻松。写作是一种有损的信息传递方式：你把想法写下来，而你的团队成员在脑海中不完美地重建这些想法。好的写作能够提高这种传递的准确性。好的写作也是职业发展的助推器。写得好的文档能够轻松地传阅给大范围的人群，包括高层管理人员，而优秀的写作者也不会被忽视。
- en: 'Reread what you’ve written from the perspective of the target audience: it
    doesn’t matter if you understand it; what matters is if they understand it. Be
    concise. To help get a reader’s perspective, read what others have written. Think
    about how you would edit their writing: what’s extra, what’s missing. Seek out
    good document writers in your company and ask for feedback on what you’ve written.
    See “Level Up” for more writing resources.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 从目标受众的角度重读你写的内容：重要的不是你自己是否理解，而是他们是否理解。要简洁明了。为了帮助获取读者的视角，可以阅读他人写的内容。思考如何修改他们的写作：哪些内容是多余的，哪些内容是缺失的。向公司中优秀的文档写作者寻求反馈，看看他们对你写的内容有什么建议。更多写作资源请参见“Level
    Up”。
- en: Developers who aren’t native language speakers sometimes feel intimidated by
    written communication. Software engineering is a global trade. It’s rare that
    everyone on a team will be speaking their native tongue. Don’t let language barriers
    discourage you from writing design documents. Don’t worry about having perfect
    grammar; what matters is expressing your thoughts clearly.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 不是以母语为英语的开发人员有时会因为书面沟通感到压力。软件工程是一个全球性的行业。团队中每个人说自己母语的情况很少见。不要让语言障碍阻止你编写设计文档。不要担心语法是否完美，关键是要清晰地表达你的想法。
- en: Keep Design Documents Up-to-Date
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保持设计文档的最新状态
- en: 'We’ve been talking about design documents as a tool to propose and finalize
    a design before it’s implemented. Once you begin implementation, design documents
    morph from proposals into documents that describe how software is implemented:
    they are *living documents*.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在讨论设计文档作为一种工具，用来在实现之前提出并最终确定设计。一旦你开始实施，设计文档就从提案转变为描述软件如何实现的文档：它们是*活文档*。
- en: Two common pitfalls occur during the transition from proposal to documentation.
    The first pitfall is that the proposal document is abandoned and never updated
    again. Implementations diverge, and the document is misleading to future users.
    The second pitfall is that the document is updated, and the history of the proposal
    is lost. Future developers can’t see discussions that led to design decisions
    and might repeat mistakes of the past.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在从提案到文档的过渡过程中，有两个常见的陷阱。第一个陷阱是提案文档被放弃，之后再也没有更新。随着实施的变化，文档变得对未来的用户具有误导性。第二个陷阱是文档被更新，但提案的历史被遗失。未来的开发人员看不到导致设计决策的讨论，可能会重蹈覆辙，犯过去的错误。
- en: Keep your documents up-to-date as you go. If your design proposals and design
    documents are two separate things (like Python PEPs versus Python documentation),
    you’ll need to keep the documentation up-to-date with implemented proposals. Make
    sure others keep documents updated as you conduct code reviews.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行过程中保持文档的最新状态。如果你的设计提案和设计文档是两个独立的部分（比如Python PEP与Python文档），你需要确保文档跟随实现的提案进行更新。在进行代码审查时，也要确保其他人保持文档的更新。
- en: Version control your design documents. A good trick is to keep design documents
    version controlled in the same repository as code. Code reviews can then be used
    as a review for design comments. The documents can also be updated as code evolves.
    Not everyone likes to review design documents in Markdown or AsciiDoc, though;
    if you prefer a wiki, Google Docs, or Word, keep the entire history of the document
    available, including discussions.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对设计文档进行版本控制。一个好方法是将设计文档与代码一起在同一个仓库中进行版本控制。代码审查可以用作设计意见的审查。随着代码的演进，文档也可以进行更新。不过，并不是每个人都喜欢在Markdown或AsciiDoc中审查设计文档；如果你更喜欢使用Wiki、Google
    Docs或Word等工具，可以将文档的完整历史记录，包括讨论内容，保留下来。
- en: Using a Design Document Template
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用设计文档模板
- en: 'A design document should describe the current code design, the motivation for
    a change, potential solutions, and a proposed solution. The document should include
    details about the proposed solution: architectural diagrams, important algorithmic
    details, public APIs, schemas, trade-offs with alternatives, assumptions, and
    dependencies.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 'There isn’t a one-size-fits-all template for design documents, but open source
    design documents are a way to see how major changes get documented. We’ve included
    links to Python Enhancement Proposals, Kafka Improvement Proposals, and Rust Request
    for Comments (RFCs) in the “Level Up” section at the end of this chapter. Use
    your team’s template if they have one; if not, try this structure, which we’ll
    describe in detail:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Current State and Context
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Motivation for Change
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirements
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Potential Solutions
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proposed Solution
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design and Architecture
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System Diagram
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: UI/UX Changes
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Code Changes
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: API Changes
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Persistence Layer Changes
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Test Plan
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rollout Plan
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unresolved Questions
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Appendix
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Introduce the problem being solved and say why it is worth solving. Provide
    a paragraph-long summary of the proposed change and some guidance that points
    different readers—security engineers, operations engineers, data scientists—to
    relevant sections.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Current State and Context
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Describe the architecture that is being modified and define terminology. Explain
    what systems with nonobvious names do: “Feedler is our user sign-up system. It’s
    built on top of Rouft, infrastructure that provides stateful workflow processing.”
    Talk about the ways in which the issue is currently being addressed. Are there
    workarounds being employed? What are their drawbacks?'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Motivation for Change
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Software teams tend to have more projects than they can tackle at once. Why
    is this particular problem worth solving, and why now? Describe the benefits that
    will result from this effort. Tie these benefits to business needs: “We can reduce
    the memory footprint by 50 percent” is not as strong as “By reducing the memory
    needs by 50 percent, we can address the most common objection to installing our
    software, leading to greater adoption.” But be careful not to overpromise!'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'List requirements that an acceptable solution must meet. These can be broken
    out into sections such as the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '**User-facing requirements:** These are usually the bulk of the requirements.
    They define the nature of the change from a user perspective.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Technical requirements:** These include hard requirements on the solution
    that must be met. Technical requirements are usually caused by interoperability
    concerns or strict internal guidelines, such as “Must support MySQL for the storage
    layer” or “Must provide an OpenAPI spec to work with our application gateway.”
    Service level objectives can also be defined here.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security and compliance requirements:** Though these might be seen as user-facing
    or technical requirements, they are often broken out separately to ensure that
    security needs are explicitly discussed. Data retention and access policies are
    often covered here.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Other:** This can include critical deadlines, budgets, and other important
    considerations.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Potential Solutions
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are usually multiple ways one can solve a problem. Writing this section
    is as much a tool for you as the reader; it’s meant to force you to think through
    not just your first idea but alternative ideas and their trade-offs. Describe
    reasonable alternative approaches and why you dismissed them. Describing potential
    solutions will preemptively address “Why not do X?” comments. And if you’ve dismissed
    a solution for the wrong reasons, commenters have a chance to catch a misunderstanding.
    Readers might even identify alternatives you hadn’t considered.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Proposed Solution
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Describe the solution you settled on. This description goes into more detail
    than the very brief description in the introduction and may contain diagrams that
    highlight changes. Here and in the following sections, if your proposal includes
    multiple phases, explain how the solution evolves from phase to phase.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Design and Architecture
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Design and architecture normally make up the bulk of the document. All the technical
    minutiae worth discussing go here. Highlight implementation details of interest,
    such as key libraries and frameworks being leveraged, implementation patterns,
    and any departures from common company practices. Design and architecture should
    include block diagrams of components, call and data flow, UI, code, API, and schema
    mock-ups.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: System Diagram
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Include a diagram that shows the main components and how they interact. Explain
    what is changing by highlighting new and changed components or creating before
    and after diagrams. The diagram should be accompanied by prose that walks the
    reader through the changes.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: UI/UX Changes
  id: totrans-124
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create mock-ups if your project changes user interfaces. Use the mocks to walk
    through a user’s activity flow. If your change does not have a visual component,
    this section might talk about developer experience with the library you are creating
    or ways a user might use your command line tool. The goal is to think through
    the experience of the people who will interact with your change.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Code Changes
  id: totrans-126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Describe your implementation plan. Highlight what, how, and when existing code
    will need to change. Describe any new abstractions that need to be introduced.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: API Changes
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Document changes to existing APIs and any newly proposed APIs. Discuss backward/forward
    compatibility and versioning. Remember to include error handling in your API proposal:
    it should respond with useful information when encountering malformed inputs,
    constraint violations, and unexpected internal errors or exceptions.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Persistence Layer Changes
  id: totrans-130
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Explain storage technologies being introduced or modified. Discuss new databases,
    file and filesystem layouts, search indices, and data transformation pipelines.
    Include all schema changes and notes on their backward compatibility.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Test Plan
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not define every test in advance; rather, explain how you plan to verify
    your changes. Discuss sourcing or generating test data, highlight use cases that
    need to be covered, discuss libraries and testing strategies you expect to leverage,
    and explain how you will validate that security requirements are met.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Rollout Plan
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Describe the strategies you’ll use to avoid complicated deployment ordering
    requirements. Document the feature flags you will need to put in place to control
    the rollout and whether you will use deployment patterns from Chapter 8\. Think
    about how you would find out if changes are *not* working and how you will roll
    back if problems are discovered.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Unresolved Questions
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Explicitly list pressing questions that have not yet been answered in the design.
    This is a good way to solicit input from your readers and to state your “known
    unknowns.”
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Appendix
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Put extra details of interest in the appendix. This is also a good place to
    add references to related work and further reading.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Collaborating on Design
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Constructively collaborating with your team will lead to a better design. But
    collaboration isn’t always easy. Developers are an opinionated bunch. Interpreting
    and condensing feedback into a meaningful design isn’t easy. Collaborate on design
    by working within your team’s design processes, communicating early and often
    to avoid surprises, and using design discussions to brainstorm.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Understand Your Team’s Design Review Process
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Design reviews notify architects of large upcoming changes and give leads a
    chance to provide feedback. Some organizations have robust review policies, while
    others are more informal. Architectural review boards and “request for decision”
    processes are two of the more common patterns.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '*Architectural reviews* are more formal, heavier-weight processes. Designs
    must be approved by outside stakeholders such as operations and security members.
    A design document is required, and there might be multiple rounds of meetings
    or presentations. Because of their high time cost, architectural reviews are reserved
    for large or risky changes.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Don’t wait on final approval before writing code. Spend time implementing prototypes
    and proof-of-concept “spikes” to increase confidence in the design and to give
    you a shorter path to production. But don’t go beyond proof-of-concept work. You’ll
    probably have to change your code based on design feedback.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: We call the other type of design review process *request for decision*, or *RFD*
    (not to be confused with the Internet Society request for comment process, the
    RFC). The term RFD is not very common, but the pattern is; RFDs are fast intrateam
    reviews to quickly reach decisions that need some discussion but not a full review.
    An engineer requesting a decision circulates a quick write-up describing the decision
    to be made—a light-weight design document. Teammates then whiteboard, discuss
    their options, provide input, and make a decision.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: There are, of course, other design review patterns. What’s important is that
    you understand which processes your team follows. Missing a design review step
    can cause your project to get derailed at the last moment. Find out who has to
    be informed or sign off on your design work and who is empowered to make decisions.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Don’t Surprise People
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gently and incrementally ease people into your design proposal. You’re setting
    yourself up for failure if a formal design document is the first time other teams
    and tech leads learn of your work. Each party has a different point of view and
    a different set of interests and may react strongly to a sudden design document
    that they had no say in.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Instead, when you do your initial research, get early feedback from other teams
    and tech leads; this will lead to a better design, keep them aware of your work,
    and give them a stake in your design. The parties you involve early can become
    champions of your work later.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: Feedback sessions don’t need to be formal or scheduled. Casual conversations
    over lunch, in a hallway, or before meetings start are fine—even preferred. Your
    goal is simply to make people aware of what you’re doing, to give an opportunity
    for feedback, and to get them thinking about your work.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Keep people up-to-date as you progress. Give updates in status meetings and
    standups. Continue having casual conversations. Pay attention to second-order
    effects your proposed changes might have and whom this might impact; notify affected
    teams of upcoming changes. This goes for support, QA, and operational teams in
    particular. Be inclusive—pull people into brainstorming sessions and listen to
    their thoughts.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Brainstorm with Design Discussions
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Design discussions help you understand a problem space, share knowledge, discuss
    trade-offs, and solidify design. These brainstorming sessions are informal, conversation
    is free flowing, and whiteboards are filled with ink. Discussions happen early
    in the design cycle, when the problem is reasonably well understood but the design
    is not yet settled; a draft design document should exist, but it may still have
    a lot of gaps and open questions. Break brainstorming into multiple sessions with
    different participants, focusing on different aspects of the design.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Brainstorming sessions range in size from two to about five. Opt for larger,
    more inclusive brainstorming sessions when a problem is particularly multifaceted
    or controversial. For more straightforward discussions, keep the number of invitees
    small to make the conversation flow easier.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Design discussion meetings need to be scheduled for large chunks of time—two
    hours or so. Ideas need time to develop. Try not to cut discussions short; let
    people run out of ideas or simply get exhausted. You might need more than one
    brainstorming session to reach a conclusion.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Before the brainstorming session, develop a loose agenda that includes the problem,
    scope, and proposed design (or designs), along with potential trade-offs and open
    questions. Participants are expected to read the agenda beforehand, so keep it
    brief. The purpose is to provide enough information to get a free-flowing discussion
    started.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: In the session itself, don’t impose too much structure; people need to jump
    around to explore ideas. Use a whiteboard rather than a slide deck, and speak
    extemporaneously if possible. (It’s okay to refer to notes, though.)
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Note-taking can be a distraction during brainstorming sessions. Some teams formally
    designate a notetaker for a meeting. Make sure that this role is evenly shared
    by all team members or the perpetual note-taker won’t be able to contribute. The
    whiteboard is also a note keeper; take pictures as the discussion progresses,
    or save intermediate states if using a virtual board. After the meeting, write
    a summary based on your recollection, using the whiteboard images as your guide.
    Send the notes to the attendees and other relevant teammates.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Contribute to Design
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should contribute to your team’s design work, not just your own. As with
    code reviews, contributing to design can feel uncomfortable. You might think you
    have nothing to contribute to designs from more senior developers. Reading design
    documents and going to brainstorming meetings might feel like a distraction. Do
    it anyway. Your participation will improve your team’s design and help you learn.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: When you join in on design, give suggestions and ask questions. Apply the same
    guidance we give for code reviews. Think holistically about the design. Consider
    security, maintainability, performance, scale, and so on. Pay special attention
    to how designs impact your areas of expertise. Communicate clearly and be respectful.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Asking questions is as important as giving suggestions. Questions will help
    you to grow. As in the classroom, you’re probably not the only person wondering
    about a design decision, so your questions help others grow, too. Moreover, your
    questions might trigger new ideas or expose gaps in the design that hadn’t been
    considered.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Do’s and Don’ts
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| **Do’s** | **Don’ts** |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
- en: '| **DO** use a design document template. | **DON’T** get attached to experimental
    code; it will change. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
- en: '| **DO** read blogs, papers, and presentations to get ideas. | **DON’T** explore
    only one solution. |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
- en: '| **DO** think critically about everything that you read. | **DON’T** let a
    non-native language deter you from writing. |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
- en: '| **DO** experiment with code during design. | **DON’T** forget to update design
    documents if the implementation diverges from the plan. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
- en: '| **DO** learn to write clearly, and practice often. | **DON’T** be reluctant
    to participate in team design discussions. |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
- en: '| **DO** version control design documents. |  |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
- en: '| **DO** ask questions about teammate’s designs. |  |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
- en: Level Up
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Richard Hickey, author of Clojure, gives a “field report” on software design
    in his talk “Hammock Driven Development” ([https://youtu.be/f84n5oFoZBc/](https://youtu.be/f84n5oFoZBc/)).
    Hickey’s talk is one of the best introductions we’ve seen to the messy process
    of software design.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Use large open source projects to see real-world design in progress. Python
    Enhancement Proposals ([https://github.com/python/peps/](https://github.com/python/peps/)),
    Kafka Improvement Proposals ([https://cwiki.apache.org/confluence/display/KAFKA/Kafka+Improvement+Proposals/](https://cwiki.apache.org/confluence/display/KAFKA/Kafka+Improvement+Proposals/)),
    and Rust Request for Comments (RFCs) ([https://github.com/rust-lang/rfcs/](https://github.com/rust-lang/rfcs/))
    are good illustrations of real-world design.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: For a glimpse of internal design processes, WePay’s engineering blog has a post,
    “Effective Software Design Documents” ([https://wecode.wepay.com/posts/effective-software-design-documents](https://wecode.wepay.com/posts/effective-software-design-documents)).
    The post describes WePay’s approach to design and how it’s evolved over the years.
    The design template that WePay has used for hundreds of internal designs is available
    on GitHub ([https://github.com/wepay/design_doc_template/](https://github.com/wepay/design_doc_template/)).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '*Elements of Style*by William Strunk and E.B. White (Auroch Press, 2020) is
    the canonical reference for clear writing. We also strongly recommend reading
    *On Writing Well* by William Zissner (Harper Perennial, 2016). Both of these books
    will dramatically improve your writing clarity. Paul Graham, of Y Combinator fame,
    has two essays on writing: “How to Write Usefully” ([http://paulgraham.com/useful.html](http://paulgraham.com/useful.html))
    and “Write Like You Talk” ([http://www.paulgraham.com/talk.html](http://www.paulgraham.com/talk.html)).'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
