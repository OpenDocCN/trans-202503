- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Technical Design Process
  prefs: []
  type: TYPE_NORMAL
- en: When asked to make a change, most entry-level engineers jump straight into coding.
    Diving into code works at first, but you’ll eventually be given a task that’s
    too big to jump into; you’ll need to think about technical design.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *technical design process* helps everyone agree on a design for a large
    change. Design work is broken into two activities: solitary deep-thought work
    and collaborative group discussion. Researching, brainstorming, and writing make
    up the deep work. Design discussions and commenting on design documents make up
    the collaborative part. The tangible output of the process is a design document.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter describes an expansive version of the design process, suitable
    for large changes. The process can look slow and intimidating. Some engineers
    are traumatized by heavyweight design processes gone awry. It’s okay to scale
    things down for smaller changes. The problem you’re solving might be captured
    in three sentences, not a paragraphs-long essay. Design template sections might
    be irrelevant, multiple rounds of feedback might be unnecessary, and a review
    from other teams might not be needed. You will develop a feel for the right amount
    of input and collaboration for a problem. In the beginning, err on the side of
    caution: ask your tech lead or manager for guidance, and share your design widely.
    Done correctly, participating in and leading technical design work is rewarding
    and valuable.'
  prefs: []
  type: TYPE_NORMAL
- en: The Technical Design Process Cone
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Designing software is not a linear process from research and brainstorming to
    documentation and approval. It is more like a spiral that alternates between independent
    and collaborative work, clarifying and refining the design at every step (see
    [Figure 10-1](#figure10-1)).
  prefs: []
  type: TYPE_NORMAL
- en: '![f10001](image_fi/501836c10/f10001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-1: The design process spiral'
  prefs: []
  type: TYPE_NORMAL
- en: With every iteration, the design document becomes clearer and more detailed.
    The author’s confidence in the solution grows, as does the body of work behind
    the design—experiments, proofs of concept, and benchmarks. The number and variety
    of people consulted about the design also grows over time.
  prefs: []
  type: TYPE_NORMAL
- en: You begin at the base of the cone. You are unclear about the problem space,
    requirements, and possible solutions. So early in the process, it is impossible
    for you to have a solution that you’re confident in.
  prefs: []
  type: TYPE_NORMAL
- en: As you research, you bounce back and forth between independent work and discussion
    with a small group of teammates or experts in the domain you’re researching. You
    brainstorm and experiment. The goal is to learn—to increase certainty and clarity.
  prefs: []
  type: TYPE_NORMAL
- en: Eventually, your research, experimentation, and brainstorming leads you to a
    preferred design. After sanity-checking it with those you’ve been working with,
    you write a design document. As you write, you discover more unknowns. You create
    a few small prototypes to validate your designs, answer questions, and help choose
    between viable alternative approaches. You conduct more research and ask experts
    for their input. You flesh out a draft of the design document.
  prefs: []
  type: TYPE_NORMAL
- en: The arrow in the cone spirals further upward. You are now more certain that
    you understand the problem space. Your prototypes provide increasing confidence
    in your solution. You have a design proposal and are ready to circulate it. You
    share it with your team and get still more feedback. You research, discuss, and
    update your design document.
  prefs: []
  type: TYPE_NORMAL
- en: You’re at the highest level of the cone now. Significant work has been invested
    in your design, and you are confident in your approach. You circulate the design
    across your organization. Security, operations, adjacent teams, and architects
    all need to be made aware of the changes you’re committing to, not just to give
    feedback but to update their mental model of how the system works.
  prefs: []
  type: TYPE_NORMAL
- en: After your design is approved, implementation begins, but design isn’t over.
    Implementation will surface more surprises. You must update your design document
    if any large deviations are made as you and your team code.
  prefs: []
  type: TYPE_NORMAL
- en: Thinking About Design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The base of the design funnel begins with exploration. You need to understand
    the problem space and requirements before you can develop a design. Exploration
    requires thinking, research, experimentation, and discussion. As the funnel suggests,
    exploration is both an individual and a team sport.
  prefs: []
  type: TYPE_NORMAL
- en: Define the Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your first task is to define and understand the problem (or problems) that you’re
    trying to solve. You need to understand the boundaries of the problem to know
    how to solve it and to avoid building the wrong thing. You might even discover
    there is no problem or that the problem isn’t worth solving.
  prefs: []
  type: TYPE_NORMAL
- en: Start by asking stakeholders what they perceive the problem to be. These stakeholders
    may be your manager, teammates, product managers, or tech leads. Not everyone
    will perceive the problem the same way.
  prefs: []
  type: TYPE_NORMAL
- en: Restate the problem, in your own words, back to the stakeholders. Ask if your
    understanding matches theirs. If there is more than one problem, ask which problems
    are the highest priority.
  prefs: []
  type: TYPE_NORMAL
- en: “What happens if we don’t solve this problem?” is a powerful question. When
    the stakeholder answers, ask if the outcome is acceptable. You’ll find many problems
    don’t actually need to be solved.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve collected notes on the problem from various stakeholders, try to
    synthesize the feedback into a clear problem statement. Don’t take problem descriptions
    at face value. Think critically about what you’ve been told. Pay particular attention
    to the scope of the problem—what’s included and what could be included but isn’t.
    Don’t take the union of all problems from all stakeholders; this will get unwieldy.
    Don’t be afraid to trim low-priority changes. Write and circulate the problem
    statement—both what’s in and out of scope—to validate your understanding and get
    feedback.
  prefs: []
  type: TYPE_NORMAL
- en: 'The initial feature request might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Supply managers want to see catalog and page numbers for each item listed on
    the inventory page. Showing catalog information will make it easier to reorder
    items when supplies run low. We can use contract labor to scan all catalogs, and
    we can use an ML model to map scanned images to item descriptions in the database.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This request will trigger a lot of questions to the product manager:'
  prefs: []
  type: TYPE_NORMAL
- en: How do supply managers place orders now?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can an item show up in multiple catalogs?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How are the users addressing their need without this feature?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the pain points of the current solution?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which of these pain points has the biggest impact on the business?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Answers to these questions might lead to a revised problem statement:'
  prefs: []
  type: TYPE_NORMAL
- en: Supply room managers need an easy way to reorder items when supplies run low.
    Currently, they maintain a mapping of the stock entry identifiers we generate
    to the vendor’s name and SKU in Excel spreadsheets and cross-reference them. Going
    from our software to Excel for lookups to ordering from a vendor is both slow
    and error prone.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There can be multiple vendors for a single SKU. Supply room managers prefer
    to have access to all of them so they can minimize cost. They currently track
    a single vendor per item due to spreadsheet limitations.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The supply room managers rank their priorities in the following order: data
    accuracy, time to place an order, and order cost minimization.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Several vendors offer online catalogs, and about half offer online purchasing.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The refined problem description will lead to a very different solution than
    the original. The engineer is focusing on the problem and enumerating priorities.
    Proposed solutions like the contract work and machine learning model have been
    discarded. Information about online vendor catalogs has also been included to
    inform potential solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Do Your Research
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don’t go straight from problem definition to “final” design. Consider relevant
    research, alternative solutions, and trade-offs. The design you come up with should
    be not your first idea but your best.
  prefs: []
  type: TYPE_NORMAL
- en: There is a plethora of resources online. Look at how others solved similar problems.
    Many companies run engineering blogs that describe how they solve problems and
    implement their features. While company blogs are partially a marketing exercise
    and often describe simplified architectures that elide the tricky bits, blog posts
    are still a reasonable way to get a general sense for what others are doing. Contacting
    the authors through social networks or email may supply details that didn’t make
    it into the blog post.
  prefs: []
  type: TYPE_NORMAL
- en: Industry conferences are another resource to check. Slide decks or recordings
    are usually posted online. And don’t forget about academic research and white
    papers; use the references section at the end of a paper to find yet more reading
    material.
  prefs: []
  type: TYPE_NORMAL
- en: Talk to experts in the problem space that you’re exploring. Ask experts in your
    company for input, but don’t limit yourself to your coworkers. You’ll find that
    many blog and paper authors and presenters are eager to talk about their work.
    Just be careful not to divulge proprietary company information when talking to
    outsiders.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, think critically. Not everything you read online is a good idea. A
    particularly common misstep is to take a solution for a problem that is similar
    but not identical to yours and to copy it wholesale. Your problems aren’t Google’s
    (possibly even if you work for Google) even though they look similar.
  prefs: []
  type: TYPE_NORMAL
- en: Conduct Experiments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Experiment with your ideas by writing draft code and running tests. Write draft
    APIs and partial implementations. Run performance tests or even A/B user tests
    to learn how systems and users behave.
  prefs: []
  type: TYPE_NORMAL
- en: Experiments will give you confidence in your ideas, expose design trade-offs,
    and clarify the problem space. You’ll also get a feel for how your code will be
    used. Circulate your prototypes with your team to get feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t get attached to your experimental code. Proof-of-concept code is meant
    to illustrate an idea and be thrown away or rewritten. Focus your efforts on illustrating
    or testing your idea. Don’t write tests or spend time polishing code. You’re trying
    to learn as much as you can as quickly as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Give It Time
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Good design takes creativity. Don’t expect to sit down and bang out a design
    in one shot. Give yourself large chunks of time, take breaks, change your scenery,
    and be patient.
  prefs: []
  type: TYPE_NORMAL
- en: Design requires deep thought. You can’t do design in 15-minute increments; give
    yourself several hours to focus. Paul Graham wrote an essay entitled “Manager’s
    Schedule, Maker’s Schedule” ([http://www.paulgraham.com/makersschedule.html](http://www.paulgraham.com/makersschedule.html)).
    The post describes how valuable uninterrupted time is to “makers”—that’s you.
    Figure out when you are most able to sustain deep concentration and block off
    the time on your calendar. Chris prefers quiet after-lunch design sessions, while
    Dmitriy feels most productive in the early morning. Find the time that works for
    you and protect it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Interruptions are a deep-work killer. Avoid all means of communication: close
    chat, turn off email, disable phone notifications, and maybe sit in a different
    spot. Make sure you have the tools you need—whiteboard, notebook, papers—if you
    switch locations.'
  prefs: []
  type: TYPE_NORMAL
- en: You’re not going to be “designing” the entire time you’ve blocked time off.
    Your brain needs time to relax. Take breaks, and give yourself room to breathe.
    Allow your mind to relax and wander. Go for a walk, make some tea, read, write,
    and draw diagrams.
  prefs: []
  type: TYPE_NORMAL
- en: Design is a 24-hour-a-day gig, so be patient. Your brain is always mulling ideas.
    Thoughts will come to you randomly throughout the day (and even while you sleep).
  prefs: []
  type: TYPE_NORMAL
- en: A relaxed approach to design doesn’t mean you can take forever. You have delivery
    dates to meet. Design spikes are a good way to manage the tension between creative
    work and predictable delivery. A *spike* is an Extreme Programming (XP) term for
    a time-bounded investigation. Allocating a spike task in a sprint will give you
    space to do deep thought without having other tasks to worry about.
  prefs: []
  type: TYPE_NORMAL
- en: Writing Design Documents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Design documents are a scalable way to clearly communicate your ideas. The process
    of writing structures your thinking and highlights areas of weakness. Documenting
    your ideas does not always come naturally. To create useful design documents,
    focus on the most consequential changes, keep the goal and the audience in mind,
    practice writing, and keep your documents up-to-date.
  prefs: []
  type: TYPE_NORMAL
- en: Document Consequential Changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Not every change requires a design document, much less a formal design review
    process. Your organization may have its own guidelines for this; absent those,
    use these three criteria to decide if a design document is required:'
  prefs: []
  type: TYPE_NORMAL
- en: The project will require at least a month of engineering work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The change will have long-lasting implications with regard to extending and
    maintaining the software.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The change will significantly impact other teams.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first case is self-evident: if the project will take a while to implement,
    it’s a good idea to spend some up-front time on writing down the design to ensure
    you’re not heading down the wrong path.'
  prefs: []
  type: TYPE_NORMAL
- en: The second case needs a little more explanation. Some changes are quick to introduce
    but come with long-term ramifications. This might be introducing a new piece of
    infrastructure—a caching layer, a network proxy, or a storage system. It might
    be a new public API or security measure. While there may be a fast way to add
    them to solve some immediate problem, such changes tend to have long-term costs
    that may not be obvious. Going through the process of writing the design document
    and getting it reviewed will give concerns a chance to surface and get addressed.
    A review will also ensure the whole team understands what is being added and why,
    which will help avoid surprises down the line.
  prefs: []
  type: TYPE_NORMAL
- en: Changes that significantly impact many teams also need a design document. Teams
    need to know what you’re doing so they can provide feedback and so they can accommodate
    your changes. Changes that have broad reach often require code reviews or refactoring,
    and other designs might be impacted. Your design document notifies teams of your
    forthcoming changes.
  prefs: []
  type: TYPE_NORMAL
- en: Know Why You’re Writing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Superficially, design documents tell others how a software component works.
    But a design document’s function exceeds simple documentation. A design document
    is a tool to help you think, to get feedback, to keep your team informed, to ramp
    up new engineers, and to drive project planning.
  prefs: []
  type: TYPE_NORMAL
- en: Writing has a way of exposing what you don’t know (trust us on this one). Pushing
    yourself to write down your design forces you to explore the problem space and
    crystallize your ideas. You’ll have to confront alternative approaches and gaps
    in understanding. It’s a turbulent process, but you’ll have a better understanding
    of your design and its trade-offs for having gone through it. The clarity of thought
    you’ll get from writing down your design will make design discussions more productive
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: It's easier to solicit feedback on a written design. Written documents can be
    widely circulated, and others can read and respond on their own time. Even when
    feedback is minimal, circulating a design document keeps the team informed.
  prefs: []
  type: TYPE_NORMAL
- en: Spreading design knowledge will help others maintain an accurate mental model
    of how the system works. The team will make better design and implementation decisions
    later. On-call engineers will correctly understand how the system is behaving.
    Engineers can also use design documents to learn from their teammates.
  prefs: []
  type: TYPE_NORMAL
- en: Design documents are particularly helpful for engineers new to the team. Without
    design documents, engineers find themselves crawling through code, creating box
    diagrams, and teasing knowledge out of senior engineers to understand what’s going
    on. Reading a trove of design documents is far more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, managers and tech leads use design documents for project planning.
    Many design documents include milestones or implementation steps needed to complete
    the project. Having a concrete design written down makes it easier to coordinate
    with other teams if a project is cross-functional.
  prefs: []
  type: TYPE_NORMAL
- en: Learn to Write
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Engineers who feel they aren’t good writers can be intimidated by the prospect
    of writing; don’t be. Writing is a skill, and like any other skill, it is developed
    through practice. Take advantage of opportunities to write—design documents, emails,
    code review comments—and try hard to write clearly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Writing clearly will make your life much easier. Writing is a lossy method
    of information transfer: you’re taking your ideas and writing them down, and your
    teammates are reconstituting your ideas imperfectly in their minds. Good writing
    improves the fidelity of this transfer. Good writing is also a career builder.
    A well-written document is easily circulated to large groups, including executives,
    and strong writers do not go unnoticed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Reread what you’ve written from the perspective of the target audience: it
    doesn’t matter if you understand it; what matters is if they understand it. Be
    concise. To help get a reader’s perspective, read what others have written. Think
    about how you would edit their writing: what’s extra, what’s missing. Seek out
    good document writers in your company and ask for feedback on what you’ve written.
    See “Level Up” for more writing resources.'
  prefs: []
  type: TYPE_NORMAL
- en: Developers who aren’t native language speakers sometimes feel intimidated by
    written communication. Software engineering is a global trade. It’s rare that
    everyone on a team will be speaking their native tongue. Don’t let language barriers
    discourage you from writing design documents. Don’t worry about having perfect
    grammar; what matters is expressing your thoughts clearly.
  prefs: []
  type: TYPE_NORMAL
- en: Keep Design Documents Up-to-Date
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We’ve been talking about design documents as a tool to propose and finalize
    a design before it’s implemented. Once you begin implementation, design documents
    morph from proposals into documents that describe how software is implemented:
    they are *living documents*.'
  prefs: []
  type: TYPE_NORMAL
- en: Two common pitfalls occur during the transition from proposal to documentation.
    The first pitfall is that the proposal document is abandoned and never updated
    again. Implementations diverge, and the document is misleading to future users.
    The second pitfall is that the document is updated, and the history of the proposal
    is lost. Future developers can’t see discussions that led to design decisions
    and might repeat mistakes of the past.
  prefs: []
  type: TYPE_NORMAL
- en: Keep your documents up-to-date as you go. If your design proposals and design
    documents are two separate things (like Python PEPs versus Python documentation),
    you’ll need to keep the documentation up-to-date with implemented proposals. Make
    sure others keep documents updated as you conduct code reviews.
  prefs: []
  type: TYPE_NORMAL
- en: Version control your design documents. A good trick is to keep design documents
    version controlled in the same repository as code. Code reviews can then be used
    as a review for design comments. The documents can also be updated as code evolves.
    Not everyone likes to review design documents in Markdown or AsciiDoc, though;
    if you prefer a wiki, Google Docs, or Word, keep the entire history of the document
    available, including discussions.
  prefs: []
  type: TYPE_NORMAL
- en: Using a Design Document Template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A design document should describe the current code design, the motivation for
    a change, potential solutions, and a proposed solution. The document should include
    details about the proposed solution: architectural diagrams, important algorithmic
    details, public APIs, schemas, trade-offs with alternatives, assumptions, and
    dependencies.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There isn’t a one-size-fits-all template for design documents, but open source
    design documents are a way to see how major changes get documented. We’ve included
    links to Python Enhancement Proposals, Kafka Improvement Proposals, and Rust Request
    for Comments (RFCs) in the “Level Up” section at the end of this chapter. Use
    your team’s template if they have one; if not, try this structure, which we’ll
    describe in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Current State and Context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Motivation for Change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Potential Solutions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proposed Solution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design and Architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System Diagram
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: UI/UX Changes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Code Changes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: API Changes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Persistence Layer Changes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Test Plan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rollout Plan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unresolved Questions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Appendix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Introduce the problem being solved and say why it is worth solving. Provide
    a paragraph-long summary of the proposed change and some guidance that points
    different readers—security engineers, operations engineers, data scientists—to
    relevant sections.
  prefs: []
  type: TYPE_NORMAL
- en: Current State and Context
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Describe the architecture that is being modified and define terminology. Explain
    what systems with nonobvious names do: “Feedler is our user sign-up system. It’s
    built on top of Rouft, infrastructure that provides stateful workflow processing.”
    Talk about the ways in which the issue is currently being addressed. Are there
    workarounds being employed? What are their drawbacks?'
  prefs: []
  type: TYPE_NORMAL
- en: Motivation for Change
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Software teams tend to have more projects than they can tackle at once. Why
    is this particular problem worth solving, and why now? Describe the benefits that
    will result from this effort. Tie these benefits to business needs: “We can reduce
    the memory footprint by 50 percent” is not as strong as “By reducing the memory
    needs by 50 percent, we can address the most common objection to installing our
    software, leading to greater adoption.” But be careful not to overpromise!'
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'List requirements that an acceptable solution must meet. These can be broken
    out into sections such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User-facing requirements:** These are usually the bulk of the requirements.
    They define the nature of the change from a user perspective.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Technical requirements:** These include hard requirements on the solution
    that must be met. Technical requirements are usually caused by interoperability
    concerns or strict internal guidelines, such as “Must support MySQL for the storage
    layer” or “Must provide an OpenAPI spec to work with our application gateway.”
    Service level objectives can also be defined here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security and compliance requirements:** Though these might be seen as user-facing
    or technical requirements, they are often broken out separately to ensure that
    security needs are explicitly discussed. Data retention and access policies are
    often covered here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Other:** This can include critical deadlines, budgets, and other important
    considerations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Potential Solutions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are usually multiple ways one can solve a problem. Writing this section
    is as much a tool for you as the reader; it’s meant to force you to think through
    not just your first idea but alternative ideas and their trade-offs. Describe
    reasonable alternative approaches and why you dismissed them. Describing potential
    solutions will preemptively address “Why not do X?” comments. And if you’ve dismissed
    a solution for the wrong reasons, commenters have a chance to catch a misunderstanding.
    Readers might even identify alternatives you hadn’t considered.
  prefs: []
  type: TYPE_NORMAL
- en: Proposed Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Describe the solution you settled on. This description goes into more detail
    than the very brief description in the introduction and may contain diagrams that
    highlight changes. Here and in the following sections, if your proposal includes
    multiple phases, explain how the solution evolves from phase to phase.
  prefs: []
  type: TYPE_NORMAL
- en: Design and Architecture
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Design and architecture normally make up the bulk of the document. All the technical
    minutiae worth discussing go here. Highlight implementation details of interest,
    such as key libraries and frameworks being leveraged, implementation patterns,
    and any departures from common company practices. Design and architecture should
    include block diagrams of components, call and data flow, UI, code, API, and schema
    mock-ups.
  prefs: []
  type: TYPE_NORMAL
- en: System Diagram
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Include a diagram that shows the main components and how they interact. Explain
    what is changing by highlighting new and changed components or creating before
    and after diagrams. The diagram should be accompanied by prose that walks the
    reader through the changes.
  prefs: []
  type: TYPE_NORMAL
- en: UI/UX Changes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create mock-ups if your project changes user interfaces. Use the mocks to walk
    through a user’s activity flow. If your change does not have a visual component,
    this section might talk about developer experience with the library you are creating
    or ways a user might use your command line tool. The goal is to think through
    the experience of the people who will interact with your change.
  prefs: []
  type: TYPE_NORMAL
- en: Code Changes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Describe your implementation plan. Highlight what, how, and when existing code
    will need to change. Describe any new abstractions that need to be introduced.
  prefs: []
  type: TYPE_NORMAL
- en: API Changes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Document changes to existing APIs and any newly proposed APIs. Discuss backward/forward
    compatibility and versioning. Remember to include error handling in your API proposal:
    it should respond with useful information when encountering malformed inputs,
    constraint violations, and unexpected internal errors or exceptions.'
  prefs: []
  type: TYPE_NORMAL
- en: Persistence Layer Changes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Explain storage technologies being introduced or modified. Discuss new databases,
    file and filesystem layouts, search indices, and data transformation pipelines.
    Include all schema changes and notes on their backward compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: Test Plan
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not define every test in advance; rather, explain how you plan to verify
    your changes. Discuss sourcing or generating test data, highlight use cases that
    need to be covered, discuss libraries and testing strategies you expect to leverage,
    and explain how you will validate that security requirements are met.
  prefs: []
  type: TYPE_NORMAL
- en: Rollout Plan
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Describe the strategies you’ll use to avoid complicated deployment ordering
    requirements. Document the feature flags you will need to put in place to control
    the rollout and whether you will use deployment patterns from Chapter 8\. Think
    about how you would find out if changes are *not* working and how you will roll
    back if problems are discovered.
  prefs: []
  type: TYPE_NORMAL
- en: Unresolved Questions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Explicitly list pressing questions that have not yet been answered in the design.
    This is a good way to solicit input from your readers and to state your “known
    unknowns.”
  prefs: []
  type: TYPE_NORMAL
- en: Appendix
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Put extra details of interest in the appendix. This is also a good place to
    add references to related work and further reading.
  prefs: []
  type: TYPE_NORMAL
- en: Collaborating on Design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Constructively collaborating with your team will lead to a better design. But
    collaboration isn’t always easy. Developers are an opinionated bunch. Interpreting
    and condensing feedback into a meaningful design isn’t easy. Collaborate on design
    by working within your team’s design processes, communicating early and often
    to avoid surprises, and using design discussions to brainstorm.
  prefs: []
  type: TYPE_NORMAL
- en: Understand Your Team’s Design Review Process
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Design reviews notify architects of large upcoming changes and give leads a
    chance to provide feedback. Some organizations have robust review policies, while
    others are more informal. Architectural review boards and “request for decision”
    processes are two of the more common patterns.
  prefs: []
  type: TYPE_NORMAL
- en: '*Architectural reviews* are more formal, heavier-weight processes. Designs
    must be approved by outside stakeholders such as operations and security members.
    A design document is required, and there might be multiple rounds of meetings
    or presentations. Because of their high time cost, architectural reviews are reserved
    for large or risky changes.'
  prefs: []
  type: TYPE_NORMAL
- en: Don’t wait on final approval before writing code. Spend time implementing prototypes
    and proof-of-concept “spikes” to increase confidence in the design and to give
    you a shorter path to production. But don’t go beyond proof-of-concept work. You’ll
    probably have to change your code based on design feedback.
  prefs: []
  type: TYPE_NORMAL
- en: We call the other type of design review process *request for decision*, or *RFD*
    (not to be confused with the Internet Society request for comment process, the
    RFC). The term RFD is not very common, but the pattern is; RFDs are fast intrateam
    reviews to quickly reach decisions that need some discussion but not a full review.
    An engineer requesting a decision circulates a quick write-up describing the decision
    to be made—a light-weight design document. Teammates then whiteboard, discuss
    their options, provide input, and make a decision.
  prefs: []
  type: TYPE_NORMAL
- en: There are, of course, other design review patterns. What’s important is that
    you understand which processes your team follows. Missing a design review step
    can cause your project to get derailed at the last moment. Find out who has to
    be informed or sign off on your design work and who is empowered to make decisions.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t Surprise People
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gently and incrementally ease people into your design proposal. You’re setting
    yourself up for failure if a formal design document is the first time other teams
    and tech leads learn of your work. Each party has a different point of view and
    a different set of interests and may react strongly to a sudden design document
    that they had no say in.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, when you do your initial research, get early feedback from other teams
    and tech leads; this will lead to a better design, keep them aware of your work,
    and give them a stake in your design. The parties you involve early can become
    champions of your work later.
  prefs: []
  type: TYPE_NORMAL
- en: Feedback sessions don’t need to be formal or scheduled. Casual conversations
    over lunch, in a hallway, or before meetings start are fine—even preferred. Your
    goal is simply to make people aware of what you’re doing, to give an opportunity
    for feedback, and to get them thinking about your work.
  prefs: []
  type: TYPE_NORMAL
- en: Keep people up-to-date as you progress. Give updates in status meetings and
    standups. Continue having casual conversations. Pay attention to second-order
    effects your proposed changes might have and whom this might impact; notify affected
    teams of upcoming changes. This goes for support, QA, and operational teams in
    particular. Be inclusive—pull people into brainstorming sessions and listen to
    their thoughts.
  prefs: []
  type: TYPE_NORMAL
- en: Brainstorm with Design Discussions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Design discussions help you understand a problem space, share knowledge, discuss
    trade-offs, and solidify design. These brainstorming sessions are informal, conversation
    is free flowing, and whiteboards are filled with ink. Discussions happen early
    in the design cycle, when the problem is reasonably well understood but the design
    is not yet settled; a draft design document should exist, but it may still have
    a lot of gaps and open questions. Break brainstorming into multiple sessions with
    different participants, focusing on different aspects of the design.
  prefs: []
  type: TYPE_NORMAL
- en: Brainstorming sessions range in size from two to about five. Opt for larger,
    more inclusive brainstorming sessions when a problem is particularly multifaceted
    or controversial. For more straightforward discussions, keep the number of invitees
    small to make the conversation flow easier.
  prefs: []
  type: TYPE_NORMAL
- en: Design discussion meetings need to be scheduled for large chunks of time—two
    hours or so. Ideas need time to develop. Try not to cut discussions short; let
    people run out of ideas or simply get exhausted. You might need more than one
    brainstorming session to reach a conclusion.
  prefs: []
  type: TYPE_NORMAL
- en: Before the brainstorming session, develop a loose agenda that includes the problem,
    scope, and proposed design (or designs), along with potential trade-offs and open
    questions. Participants are expected to read the agenda beforehand, so keep it
    brief. The purpose is to provide enough information to get a free-flowing discussion
    started.
  prefs: []
  type: TYPE_NORMAL
- en: In the session itself, don’t impose too much structure; people need to jump
    around to explore ideas. Use a whiteboard rather than a slide deck, and speak
    extemporaneously if possible. (It’s okay to refer to notes, though.)
  prefs: []
  type: TYPE_NORMAL
- en: Note-taking can be a distraction during brainstorming sessions. Some teams formally
    designate a notetaker for a meeting. Make sure that this role is evenly shared
    by all team members or the perpetual note-taker won’t be able to contribute. The
    whiteboard is also a note keeper; take pictures as the discussion progresses,
    or save intermediate states if using a virtual board. After the meeting, write
    a summary based on your recollection, using the whiteboard images as your guide.
    Send the notes to the attendees and other relevant teammates.
  prefs: []
  type: TYPE_NORMAL
- en: Contribute to Design
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should contribute to your team’s design work, not just your own. As with
    code reviews, contributing to design can feel uncomfortable. You might think you
    have nothing to contribute to designs from more senior developers. Reading design
    documents and going to brainstorming meetings might feel like a distraction. Do
    it anyway. Your participation will improve your team’s design and help you learn.
  prefs: []
  type: TYPE_NORMAL
- en: When you join in on design, give suggestions and ask questions. Apply the same
    guidance we give for code reviews. Think holistically about the design. Consider
    security, maintainability, performance, scale, and so on. Pay special attention
    to how designs impact your areas of expertise. Communicate clearly and be respectful.
  prefs: []
  type: TYPE_NORMAL
- en: Asking questions is as important as giving suggestions. Questions will help
    you to grow. As in the classroom, you’re probably not the only person wondering
    about a design decision, so your questions help others grow, too. Moreover, your
    questions might trigger new ideas or expose gaps in the design that hadn’t been
    considered.
  prefs: []
  type: TYPE_NORMAL
- en: Do’s and Don’ts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| **Do’s** | **Don’ts** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **DO** use a design document template. | **DON’T** get attached to experimental
    code; it will change. |'
  prefs: []
  type: TYPE_TB
- en: '| **DO** read blogs, papers, and presentations to get ideas. | **DON’T** explore
    only one solution. |'
  prefs: []
  type: TYPE_TB
- en: '| **DO** think critically about everything that you read. | **DON’T** let a
    non-native language deter you from writing. |'
  prefs: []
  type: TYPE_TB
- en: '| **DO** experiment with code during design. | **DON’T** forget to update design
    documents if the implementation diverges from the plan. |'
  prefs: []
  type: TYPE_TB
- en: '| **DO** learn to write clearly, and practice often. | **DON’T** be reluctant
    to participate in team design discussions. |'
  prefs: []
  type: TYPE_TB
- en: '| **DO** version control design documents. |  |'
  prefs: []
  type: TYPE_TB
- en: '| **DO** ask questions about teammate’s designs. |  |'
  prefs: []
  type: TYPE_TB
- en: Level Up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Richard Hickey, author of Clojure, gives a “field report” on software design
    in his talk “Hammock Driven Development” ([https://youtu.be/f84n5oFoZBc/](https://youtu.be/f84n5oFoZBc/)).
    Hickey’s talk is one of the best introductions we’ve seen to the messy process
    of software design.
  prefs: []
  type: TYPE_NORMAL
- en: Use large open source projects to see real-world design in progress. Python
    Enhancement Proposals ([https://github.com/python/peps/](https://github.com/python/peps/)),
    Kafka Improvement Proposals ([https://cwiki.apache.org/confluence/display/KAFKA/Kafka+Improvement+Proposals/](https://cwiki.apache.org/confluence/display/KAFKA/Kafka+Improvement+Proposals/)),
    and Rust Request for Comments (RFCs) ([https://github.com/rust-lang/rfcs/](https://github.com/rust-lang/rfcs/))
    are good illustrations of real-world design.
  prefs: []
  type: TYPE_NORMAL
- en: For a glimpse of internal design processes, WePay’s engineering blog has a post,
    “Effective Software Design Documents” ([https://wecode.wepay.com/posts/effective-software-design-documents](https://wecode.wepay.com/posts/effective-software-design-documents)).
    The post describes WePay’s approach to design and how it’s evolved over the years.
    The design template that WePay has used for hundreds of internal designs is available
    on GitHub ([https://github.com/wepay/design_doc_template/](https://github.com/wepay/design_doc_template/)).
  prefs: []
  type: TYPE_NORMAL
- en: '*Elements of Style*by William Strunk and E.B. White (Auroch Press, 2020) is
    the canonical reference for clear writing. We also strongly recommend reading
    *On Writing Well* by William Zissner (Harper Perennial, 2016). Both of these books
    will dramatically improve your writing clarity. Paul Graham, of Y Combinator fame,
    has two essays on writing: “How to Write Usefully” ([http://paulgraham.com/useful.html](http://paulgraham.com/useful.html))
    and “Write Like You Talk” ([http://www.paulgraham.com/talk.html](http://www.paulgraham.com/talk.html)).'
  prefs: []
  type: TYPE_NORMAL
