["```\n$ **npm** install -g generator-backbone\n```", "```\n$ **mkdir** running\n$ **cd** running\n```", "```\n$ **yo** backbone\n```", "```\n**Out** of the box I include HTML5 Boilerplate, jQuery, Backbone.js and Modernizr.\n[**?**] What more would you like? (Press **<**space**>** to select)\n > **Bootstrap** for Sass\n   **Use** CoffeeScript\n   **Use** RequireJs\n```", "```\n$ **grunt** serve\n**Running** \"serve\" task\n\n**Running** \"clean:server\" (clean) **task**\n\n**Running** \"createDefaultTemplate\" task\n\n**Running** \"jst:compile\" (jst) **task**\n**>>** **Destination** not written because compiled files were empty.\n\n**Running** \"connect:livereload\" (connect) **task**\n**Started** connect web server on http://localhost:9000\n\n**Running** \"open:server\" (open) **task**\n\n**Running** \"watch:livereload\" (watch) **task**\n**Waiting...**\n```", "```\n$ **bower** install leaflet --save\n$ **bower** install flot --save\n$ **bower** install momentjs --save\n$ **bower** install underscore.string --save\n```", "```\n$ **npm** install\n$ **npm** install jake -g\n```", "```\n$ **jake**\n**Checking** for JS errors...\n    **Check** passed.\n\n**Checking** for specs JS errors...\n    **Check** passed.\n\n**Running** tests...\n\n**...............................................................................**\n**...............................................................................**\n**...............................................................................**\n**........................................**\n**PhantomJS** 1.9.7 (Mac OS X)**:** Executed 280 of 280 SUCCESS (0.881 secs / 0.496 secs)\n    **Tests** ran successfully.\n\n**Concatenating** and compressing 75 files...\n    **Uncompressed**: 217.22 KB (unchanged)\n    **Compressed**: 122.27 KB (unchanged)\n    **Gzipped**: 32.71 KB\n```", "```\n*<!-- build:js scripts/vendor.js -->*\n**<script** src=\"bower_components/jquery/dist/jquery.js\"**></script>**\n**<script** src=\"bower_components/underscore/underscore.js\"**></script>**\n**<script** src=\"bower_components/backbone/backbone.js\"**></script>**\n*<!-- endbuild -->*\n```", "```\n*<!-- build:js scripts/vendor.js -->*\n**<script** src=\"bower_components/jquery/dist/jquery.js\"**></script>**\n**<script** src=\"bower_components/underscore/underscore.js\"**></script>**\n**<script** src=\"bower_components/backbone/backbone.js\"**></script>**\n**<script** src=\"bower_components/flot/jquery.flot.js\"**></script>**\n**<script** src=\"bower_components/leaflet/dist/leaflet-src.js\"**></script>**\n**<script** src=\"bower_components/momentjs/moment.js\"**></script>**\n**<script**\n    src=\"bower_components/underscore.string/lib/underscore.string.js\"**>**\n**</script>**\n*<!-- endbuild -->*\n```", "```\n*<!-- build:css(.tmp) styles/main.css -->*\n**<link** rel=\"stylesheet\" href=\"bower_components/leaflet/dist/leaflet.css\"**>**\n**<link** rel=\"stylesheet\" href=\"styles/main.css\"**>**\n*<!-- endbuild -->*\n```", "```\n$ **yo** backbone:model run\n   **create** app/scripts/models/run.js\n   **invoke**   backbone-mocha:model\n   **create**     test/models/run.spec.js\n```", "```\n➊ */*Global Running, Backbone*/*\n\n➋ Running.Models = Running.Models || {};\n\n   (**function** () {\n       \"use strict\";\n       Running.Models.Run = Backbone.Model.extend({\n           url: \"\",\n           initialize: **function**() {\n           },\n           defaults: {\n           },\n           validate: **function**(attrs, options) {\n           },\n           parse: **function**(response, options) {\n               **return** response;\n           }\n       });\n   })();\n```", "```\n(**function** () {\n    */* Code goes here */*\n})();\n```", "```\n( **function** () { */* Code goes here */* } ) ();\n```", "```\n   Running.Models.Run = Backbone.Model.extend({\n➊     url: \"https://api.nike.com/v1/me/sport/activities/\",\n       initialize: **function**() {\n       },\n       defaults: {\n       },\n       validate: **function**(attrs, options) {\n       },\n       parse: **function**(response, options) {\n           **return** response;\n       }\n   });\n```", "```\n**var** run = **new** Running.Models.Run({id: 2126456911});\nrun.fetch();\n```", "```\n**var** run = **new** Running.Models.Run({id: 2126456911});\nrun.fetch({success: **function**() {\n    console.log(\"Run started at \", run.get(\"startTime\"));\n    console.log(\"    Duration: \",  run.get(\"metricSummary\").duration);\n    console.log(\"    Distance: \",  run.get(\"metricSummary\").distance);\n    console.log(\"    Calories: \",  run.get(\"metricSummary\").calories);\n}});\n```", "```\n**Run** started at 2013-04-09T10:54:33Z\n    **Duration**: 0:22:39.000\n    **Distance**: 3.7524\n    **Calories**: 240\n```", "```\n$ **yo** backbone:collection runs\n   **create** app/scripts/collections/runs.js\n   **invoke**   backbone-mocha:collection\n   **create**     test/collections/runs.spec.js\n```", "```\n*/*Global Running, Backbone*/*\n\nRunning.Collections = Running.Collections || {};\n\n(**function** () {\n    \"use strict\";\n    Running.Collections.Runs = Backbone.Collection.extend({\n        model: Running.Models.Runs\n    });\n})();\n```", "```\nRunning.Collections.Runs = Backbone.Collection.extend({\n    url: \"https://api.nike.com/v1/me/sport/activities/\",\n    model: Running.Models.Run\n});\n```", "```\n**var** runs = **new** Running.Collections.Runs();\nruns.fetch();\n```", "```\n**var** totalDistance = runs.reduce( **function**(sum, run) {\n    **return** sum + run.get(\"metricSummary\").distance;\n}, 0);\n```", "```\n$ **yo** backbone:view summary\n   **create** app/scripts/templates/summary.ejs\n   **create** app/scripts/views/summary.js\n   **invoke**   backbone-mocha:view\n   **create**     test/views/summary.spec.js\n$ **yo** backbone:view summaryRow\n   **create** app/scripts/templates/summaryRow.ejs\n   **create** app/scripts/views/summaryRow.js\n   **invoke**   backbone-mocha:view\n   **create**     test/views/summaryRow.spec.js\n```", "```\n*/*Global Running, Backbone, JST*/*\n\nRunning.Views = Running.Views || {};\n\n(**function** () {\n    \"use strict\";\n    Running.Views.Summary = Backbone.View.extend({\n        template: JST[\"app/scripts/templates/summary.ejs\"],\n        tagName: \"div\",\n        id: \"\",\n        className: \"\",\n        events: {},\n        initialize: **function** () {\n            **this**.listenTo(**this**.model, \"change\", **this**.render);\n        },\n        render: **function** () {\n            **this**.$el.html(**this**.template(**this**.model.toJSON()));\n        }\n    });\n})();\n```", "```\nRunning.Views.Summary = Backbone.View.extend({\n    template: JST[\"app/scripts/templates/summary.ejs\"],\n    tagName: \"table\",\n    initialize: **function** () {\n            **this**.listenTo(**this**.model, \"change\", **this**.render);\n    },\n    render: **function** () {\n            **this**.$el.html(**this**.template(**this**.model.toJSON()));\n    }\n});\n```", "```\nRunning.Views.Summary = Backbone.View.extend({\n    template: JST[\"app/scripts/templates/summary.ejs\"],\n    tagName: \"table\",\n    initialize: **function** () {\n        **this**.listenTo(**this**.collection, \"change\", **this**.render);\n        **return** **this**;\n    },\n     render: **function** () {\n        **this**.$el.html(**this**.template());\n        **this**.collection.each(**this**.renderRun, **this**);\n        **return** **this**;\n    }\n});\n```", "```\nrenderRun: **function** (run) {\n    **this**.$(\"tbody\").append(**new** Running.Views.SummaryRow({\n        model: run\n    }).render().el);\n}\n```", "```\nRunning.Views.SummaryRow = Backbone.View.extend({\n    template: JST[\"app/scripts/templates/summaryRow.ejs\"],\n    tagName: \"tr\",\n    events: {},\n    initialize: **function** () {\n        **this**.listenTo(**this**.model, \"change\", **this**.render);\n        **return** **this**;\n    },\n    render: **function** () {\n        **this**.$el.html(**this**.template(**this**.model.toJSON()));\n        **return** **this**;\n    }\n});\n```", "```\n{\n    \"activityId\": \"2126456911\",\n    \"activityType\": \"RUN\",\n    \"startTime\": \"2013-04-09T10:54:33Z\",\n    \"activityTimeZone\": \"GMT-04:00\",\n    \"status\": \"COMPLETE\",\n    \"deviceType\": \"IPOD\",\n    \"metricSummary\": {\n        \"calories\": 240,\n        \"fuel\": 790,\n        \"distance\": 3.7524,\n        \"steps\": 0,\n        \"duration\": \"0:22:39.000\"\n    },\n    \"tags\": [*/* Data continues... */*],\n    \"metrics\": [*/* Data continues... */*],\n    \"gps\": {*/* Data continues... */*}\n}\n```", "```\n**<p>**Your content here.**</p>**\n```", "```\n**<td></td>**\n**<td></td>**\n**<td></td>**\n**<td></td>**\n```", "```\n**<td>**<%= startTime %>**</td>**\n**<td>**<%= metricSummary.duration %>**</td>**\n**<td>**<%= metricSummary.distance %>**</td>**\n**<td>**<%= metricSummary.calories %>**</td>**\n```", "```\n**<thead>**\n    **<tr>**\n        **<th>**Time**</th>**\n        **<th>**Duration**</th>**\n        **<th>**Distance**</th>**\n        **<th>**Calories**</th>**\n    **</tr>**\n**</thead>**\n**<tbody></tbody>**\n```", "```\n**var** runs = **new** Running.Collection.Runs();\nruns.fetch();\n**var** summaryView = **new** Running.Views.Summary({collection: runs});\nsummaryView.render();\n```", "```\n**<table>**\n  **<thead>**\n    **<tr>**\n        **<th>**Time**</th>**\n        **<th>**Duration**</th>**\n        **<th>**Distance**</th>**\n        **<th>**Calories**</th>**\n    **</tr>**\n  **</thead>**\n  **<tbody>**\n    **<tr>**\n        **<td>**2013-04-09T10:54:33Z**</td>**\n        **<td>**0:22:39.000**</td>**\n        **<td>**3.7524**</td>**\n        **<td>**240**</td>**\n    **</tr>**\n    **<tr>**\n        **<td>**2013-04-07T12:34:40Z**</td>**\n        **<td>**0:44:59.000**</td>**\n        **<td>**8.1724**</td>**\n        **<td>**569**</td>**\n    **</tr>**\n    **<tr>**\n        **<td>**2013-04-06T13:28:36Z**</td>**\n        **<td>**1:28:59.000**</td>**\n        **<td>**16.068001**</td>**\n        **<td>**1200**</td>**\n    **</tr>**\n  **</tbody>**\n**</table>**\n```", "```\nrender: **function** () {\n    **this**.$el.html(**this**.template(**this**.model.toJSON()));\n    **return** **this**;\n}\n```", "```\nrender: **function** () {\n    **var** run = {};\n    run.date = moment(**this**.model.get(\"startTime\")).calendar();\n```", "```\nrun.duration = **this**.model.get(\"metricSummary\").duration.split(\".\")[0];\n```", "```\nrun.distance = Math.round(62. *\n    **this**.model.get(\"metricSummary\").distance)/100 +\n    \" Miles\";\n```", "```\nrun.calories = **this**.model.get(\"metricSummary\").calories;\n```", "```\n**var** secs = _(run.duration.split(\":\")).reduce(**function**(sum, num) {\n    **return** sum*60+parseInt(num,10); }, 0);\n**var** pace = moment.duration(1000*secs/parseFloat(run.distance));\nrun.pace = pace.minutes() + \":\" + _(pace.seconds()).pad(2, \"0\");\n```", "```\n**this**.$el.html(**this**.template(run));\n```", "```\n**<td>**<%= date %>**</td>**\n**<td>**<%= duration %>**</td>**\n**<td>**<%= distance %>**</td>**\n**<td>**<%= calories %>**</td>**\n**<td>**<%= pace %>**</td>**\n```", "```\n**<thead>**\n  **<tr>**\n    **<th>**Date**</th>**\n    **<th>**Duration**</th>**\n    **<th>**Distance**</th>**\n    **<th>**Calories**</th>**\n    **<th>**Pace**</th>**\n  **</tr>**\n**</thead>**\n**<tbody></tbody>**\n```", "```\n$ **yo** backbone:view details\n$ **yo** backbone:view properties\n$ **yo** backbone:view charts\n$ **yo** backbone:view map\n```", "```\nRunning.Views.Details = Backbone.View.extend({\n    render: **function** () {\n        **this**.$el.empty();\n        **this**.$el.append(\n            **new** Running.Views.Properties({model: **this**.model}).render().el\n        );\n        **this**.$el.append(\n            **new** Running.Views.Charts({model: **this**.model}).render().el\n        );\n        **this**.$el.append(\n            **new** Running.Views.Map({model: **this**.model}).render().el\n        );\n        **return** **this**;\n    }\n});\n```", "```\n{\n    \"activityId\": \"2126456911\",\n    \"activityType\": \"RUN\",\n    \"startTime\": \"2013-04-09T10:54:33Z\",\n    \"activityTimeZone\": \"GMT-04:00\",\n    \"status\": \"COMPLETE\",\n    \"deviceType\": \"IPOD\",\n    \"metricSummary\": {\n        \"calories\": 240,\n        \"fuel\": 790,\n        \"distance\": 3.7524,\n        \"steps\": 0,\n        \"duration\": \"0:22:39.000\"\n    },\n    \"tags\": [\n        { \"tagType\": \"WEATHER\", \"tagValue\": \"SUNNY\"    },\n        { \"tagType\": \"NOTE\"                            },\n        { \"tagType\": \"TERRAIN\", \"tagValue\": \"TRAIL\"    },\n        { \"tagType\": \"SHOES\", \"tagValue\": \"Neo Trail\"  },\n        { \"tagType\": \"EMOTION\", \"tagValue\": \"GREAT\"    }\n    ],\n    \"metrics\": [\n        { \"intervalMetric\": 10, \"intervalUnit\": \"SEC\",\n          \"metricType\": \"SPEED\", \"values\": [*/* Data continues... */*] },\n        { \"intervalMetric\": 10, \"intervalUnit\": \"SEC\",\n          \"metricType\": \"HEARTRATE\", \"values\": [*/* Data continues... */*] },\n        { \"intervalMetric\": 10, \"intervalUnit\": \"SEC\",\n          \"metricType\": \"DISTANCE\", \"values\": [*/* Data continues... */*] },\n    ],\n    \"gps\": {\n        \"elevationLoss\": 114.400024,\n        \"elevationGain\": 109.00003,\n        \"elevationMax\": 296.2,\n        \"elevationMin\": 257,\n        \"intervalMetric\": 10,\n        \"intervalUnit\": \"SEC\",\n        \"waypoints\": [*/* Data continues... */*]\n    }\n}\n```", "```\n*/*Global Running, Backbone, JST, _*/*\n\n_.mixin(_.str.exports());\n\nRunning.Views = Running.Views || {};\n\n*// Code continues...*\n```", "```\nRunning.Views.Properties = Backbone.View.extend({\n    template: JST[\"app/scripts/templates/properties.ejs\"],\n    tagName: \"dl\",\n    initialize: **function** () {\n        **this**.listenTo(**this**.model, \"change\", **this**.render);\n        **return** **this**;\n    },\n    render: **function** () {\n        *// More code goes here*\n        **return** **this**;\n    }\n});\n```", "```\n**<dt>**<%= key %>**</dt>**\n**<dd>**<%= value %>**</dd>**\n```", "```\nobj2Html: **function**(obj) {\n    **return** (\n        _(obj).reduce(**function**(html, value, key) {\n\n            *// Create the markup for the current*\n            *// key/value pair and add it to the html variable*\n\n            **return** html;\n        }, \"\", **this**)\n    );\n}\n```", "```\nkey = _.chain(key).humanize().titleize().value();\n```", "```\n**if** (_(value).isArray()) {\n    value = \"[\" + value.length + \" items]\";\n}\n```", "```\n**if** (_(value).isObject()) {\n    html += **this**.obj2Html(value);\n```", "```\n} **else** {\n    value = _(value.toString().toLowerCase()).titleize();\n    html += **this**.template({ key: key, value: value });\n}\n```", "```\nrender: **function** () {\n    **this**.$el.html(**this**.obj2Html(**this**.model.toJSON()));\n    **return** **this**;\n}\n```", "```\nRunning.Views.Map = Backbone.View.extend({\n    id: \"map\",\n```", "```\n**var** map = L.map(**this**.id);\n```", "```\nrender: **function** () {\n    _.defer(_(**function**(){ **this**.drawMap(); }).bind(**this**));\n},\ndrawMap: **function** () {\n    **var** map = L.map(**this**.id);\n    *// Code continues...*\n}\n```", "```\nrender: **function** () {\n    **if** (document.getElementById(**this**.id)) {\n        **this**.drawMap();\n    } **else** {\n        _.defer(_(**function**(){ **this**.drawMap(); }).bind(**this**));\n    }\n    **return** **this**;\n},\n```", "```\ninitialize: **function** () {\n    **this**.listenTo(**this**.model, \"change\", **this**.render);\n},\n```", "```\ninitialize: **function** () {\n    **this**.listenTo(**this**.model, \"change:gps\", **this**.render);\n    **return** **this**;\n},\n```", "```\ndrawMap: **function** () {\n    **if** (**this**.model.get(\"gps\") && **this**.model.get(\"gps\").waypoints) {\n        **if** (**this**.map) {\n            **this**.map.remove();\n        }\n        **var** points = _(**this**.model.get(\"gps\").waypoints).map(**function**(pt) {\n            **return** [pt.latitude, pt.longitude];\n        });\n        **var** path = **new** L.Polyline(points, {color: \"#1788cc\"});\n        **this**.map = L.map(**this**.id).fitBounds(path.getBounds())\n            .addLayer(path);\n        **var** tiles = L.tileLayer(\n            \"http://server.arcgisonline.com/ArcGIS/rest/services/Canvas/\"+\n            \"World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}\",\n            {\n                attribution: \"Tiles &copy; Esri &mdash; \"+\n                             \"Esri, DeLorme, NAVTEQ\",\n                maxZoom: 16\n            }\n        );\n        **this**.map.addLayer(tiles);\n    }\n}\n```"]