- en: '**7**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**BASIC PLOTTING**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: One particularly popular feature of R is its incredibly flexible plotting tools
    for data and model visualization. This is what draws many to R in the first place.
    Mastering R’s graphical functionality does require practice, but the fundamental
    concepts are straightforward. In this chapter, I’ll provide an overview of the
    `plot` function and some useful options for controlling the appearance of the
    final graph. Then I’ll cover the basics of using `ggplot2`, a powerful library
    for visualizing data in R. This chapter will cover just the basics of plotting,
    and then you’ll learn more about creating different types of statistical plots
    in [Chapter 14](ch14.xhtml#ch14), and about advanced plotting techniques in [Part
    V](part05.xhtml#part05).
  prefs: []
  type: TYPE_NORMAL
- en: '**7.1 Using plot with Coordinate Vectors**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The easiest way to think about generating plots in R is to treat your screen
    as a blank, two-dimensional canvas. You can plot points and lines using *x-*and
    *y*-coordinates. On paper, these coordinates are usually represented with points
    written as a pair: (*x* value, *y* value). The R function `plot`, on the other
    hand, takes in two vectors—one vector of *x* locations and one vector of *y* locations—and
    opens a *graphics device* where it displays the result. If a graphics device is
    already open, R’s default behavior is to refresh the device, overwriting the current
    contents with the new plot.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let’s say you wanted to plot the points (1.1,2), (2,2.2), (3.5,
    − 1.3), (3.9,0), and (4.2,0.2). In `plot`, you must provide the vector of *x*
    locations first, and the *y* locations second. Let’s define these as `foo` and
    `bar`, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 7-1](ch07.xhtml#ch7fig1) shows the resulting graphics device with the
    plot (I’ll use this simple data set as a working example throughout this section).'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-1: The five plotted points using R’s default behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The *x* and *y* locations don’t necessarily need to be specified as separate
    vectors. You can also supply coordinates in the form of a matrix, with the *x*
    values in the first column and the *y* values in the second column, or as a list.
    For example, setting up a matrix of the five points, the following code exactly
    reproduces [Figure 7-1](ch07.xhtml#ch7fig1) (note the window pane will look slightly
    different depending on your operating system):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `plot` function is one of R’s versatile *generic* functions. It works differently
    for different objects and allows users to define their own methods for handling
    objects (including user-defined object classes). Technically, the version of the
    `plot` command that you’ve just used is internally identified as `plot.default`.
    The help file `?plot.default` provides additional details on this *scatterplot*
    style of data visualization.
  prefs: []
  type: TYPE_NORMAL
- en: '**7.2 Graphical Parameters**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are a wide range of *graphical parameters* that can be supplied as arguments
    to the `plot` function (or other plotting functions, such as those in [Section
    7.3](ch07.xhtml#ch07lev1sec25)). These parameters invoke simple visual enhancements,
    like coloring the points and adding axis labels, and can also control technical
    aspects of the graphics device ([Chapter 23](ch23.xhtml#ch23) covers the latter
    in more detail). Some of the most commonly used graphical parameters are listed
    here; I’ll briefly discuss each of these in turn in the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '`type` Tells R how to plot the supplied coordinates (for example, as stand-alone
    points or joined by lines or both dots and lines).'
  prefs: []
  type: TYPE_NORMAL
- en: '`main`, `xlab`, `ylab` Options to include plot title, the horizontal axis label,
    and the vertical axis label, respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: '`col` Color (or colors) to use for plotting points and lines.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pch` Stands for *point character*. This selects which character to use for
    plotting individual points.'
  prefs: []
  type: TYPE_NORMAL
- en: '`cex` Stands for *character expansion*. This controls the size of plotted point
    characters.'
  prefs: []
  type: TYPE_NORMAL
- en: '`lty` Stands for *line type*. This specifies the type of line to use to connect
    the points (for example, solid, dotted, or dashed).'
  prefs: []
  type: TYPE_NORMAL
- en: '`lwd` Stands for *line width*. This controls the thickness of plotted lines.'
  prefs: []
  type: TYPE_NORMAL
- en: '`xlim`, `ylim` This provides limits for the horizontal range and vertical range
    (respectively) of the plotting region.'
  prefs: []
  type: TYPE_NORMAL
- en: '***7.2.1 Automatic Plot Types***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: By default, the `plot` function will plot individual points, as shown in [Figure
    7-1](ch07.xhtml#ch7fig1). This is the default plot type, but other plot types
    will have a different appearance. To control the plot type, you can specify a
    single character-valued option for the argument `type`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in many cases it makes sense to show lines connecting each coordinate,
    such as when plotting time series data. For this, you would specify plot type
    `"l"`. Using `foo` and `bar` from [Section 7.1](ch07.xhtml#ch07lev1sec23), the
    following produces the plot in the left panel of [Figure 7-2](ch07.xhtml#ch7fig2):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![image](../images/f07-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-2: A line plot produced using five adjoined coordinates, setting*
    `type="l"` *(left) or* `type="b"` *(right)*'
  prefs: []
  type: TYPE_NORMAL
- en: The default value for `type` is `"p"`, which can be interpreted as “points only.”
    Since you didn’t specify anything different, this is what was used for the graph
    in [Figure 7-1](ch07.xhtml#ch7fig1). In this last example, on the other hand,
    you’ve set `type="l"` (meaning “lines only”). Other options include `"b"` for
    both points *and* lines (shown in the right panel of [Figure 7-2](ch07.xhtml#ch7fig2))
    and `"o"` for overplotting the points with lines (this eliminates the gaps between
    points and lines visible for `type="b"`). The option `type="n"` results in no
    points or lines plotted, creating an empty plot, which can be useful for complicated
    plots that must be constructed in steps.
  prefs: []
  type: TYPE_NORMAL
- en: '***7.2.2 Title and Axis Labels***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'By default, a basic plot won’t have a main title, and its axes will be labeled
    with the names of the vectors being plotted. But a main title and more descriptive
    axis labels often make the plotted data easier to interpret. You can add these
    by supplying text as character strings to `main` for a title, `xlab` for the *x*-axis
    label, and `ylab` for the *y*-axis label. Note that these strings may include
    escape sequences (discussed in [Section 4.2.3](ch04.xhtml#ch04lev2sec44)). The
    following code produces the plots in [Figure 7-3](ch07.xhtml#ch7fig3):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![image](../images/f07-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-3: Two examples of plots with axis labels and titles*'
  prefs: []
  type: TYPE_NORMAL
- en: In the second plot, note how the new line escape sequence splits the title into
    two lines. In that plot, `xlab` and `ylab` are also set to the empty string `""`
    to prevent R from labeling the axes with the names of the *x* and *y* vectors.
  prefs: []
  type: TYPE_NORMAL
- en: '***7.2.3 Color***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Adding color to a graph is far from just an aesthetic consideration. Color
    can make data much clearer—for example by distinguishing factor levels or emphasizing
    important numeric limits. You can set colors with the `col` parameter in a number
    of ways. The simplest options are to use an integer selector or a character string.
    There are a number of color string values recognized by R, which you can see by
    entering `colors()` at the prompt. The default color is integer `1` or the character
    string `"black"`. The top row of [Figure 7-4](ch07.xhtml#ch7fig4) shows two examples
    of colored graphs, created by the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: There are eight possible integer values (shown in the leftmost plot of [Figure
    7-5](ch07.xhtml#ch7fig5)) and around 650 character strings to specify color. But
    you aren’t limited to these options since you can also specify colors using RGB
    (red, green, and blue) levels and by creating your own palettes. I’ll talk more
    about the last two options in [Chapter 25](ch25.xhtml#ch25).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-4: Experimenting with basic R plotting. Top row: Two examples of
    colored plots with* `col=2` *(left) and* `col="seagreen4"` *(right). Middle row:
    Two further examples making use of* `pch`, `lty`, `cex`*, and* `lwd`*. Bottom
    row: Setting plotting region limits* `xlim=c(-10,5)`, `ylim=c(-3,3)` *(left),
    and* `xlim=c(3,5)`, `ylim=c(-0.5,0.2)` *(right).*'
  prefs: []
  type: TYPE_NORMAL
- en: '***7.2.4 Line and Point Appearances***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To alter the appearance of the plotted points you would use `pch`, and to alter
    the lines you would use `lty`. The `pch` parameter controls the character used
    to plot individual data points. You can specify a single character to use for
    each point, or you can specify a value between `1` and `25` (inclusive). The symbols
    corresponding to each integer are shown in the middle plot of [Figure 7-5](ch07.xhtml#ch7fig5).
    The `lty` parameter, which affects the type of line drawn, can take the values
    `1` through `6`. These options are shown in the rightmost plot of [Figure 7-5](ch07.xhtml#ch7fig5).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-5: Some reference plots giving the results of possible integer options
    of* `col` *(left),* `pch` *(middle), and* `lty` *(right)*'
  prefs: []
  type: TYPE_NORMAL
- en: You can also control the size of plotted points using `cex` and the thickness
    of lines using `lwd`. The default size and thickness for both of these is `1`.
    To request half-size points, for example, you’d specify `cex=0.5`; to specify
    double-thick lines, use `lwd=2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following two lines produce the two plots in the middle row of [Figure
    7-4](ch07.xhtml#ch7fig4), showing off `pch`, `lty`, `cex`, and `lwd`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '***7.2.5 Plotting Region Limits***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As you can see in the plots of `foo` and `bar`, by default R sets the range
    of each axis by using the range of the supplied *x* and *y* values (plus a small
    constant to pad a little area around the outermost points). But you might need
    more space than this to, for example, annotate individual points, add a legend,
    or plot additional points that fall outside the original ranges (as you’ll see
    in [Section 7.3](ch07.xhtml#ch07lev1sec25)). You can set custom plotting area
    limits using `xlim` and `ylim`. Both parameters require a numeric vector of length
    2, provided as `c(lower`, upper).
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the plots in the bottom row of [Figure 7-4](ch07.xhtml#ch7fig4), created
    with the following two commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: These plots are exactly the same as the two in the middle row, except for one
    important difference. In the bottom-left plot of [Figure 7-4](ch07.xhtml#ch7fig4),
    the *x*-and *y*-axes are set to be much wider than the observed data, and the
    plot on the right restricts the plotting window so that only a portion of the
    data is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '**7.3 Adding Points, Lines, and Text to an Existing Plot**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Generally speaking, each call to `plot` will refresh the active graphics device
    for a new plotting region. But this is not always desired—to build more complicated
    plots, it’s easiest to start with an empty plotting region and progressively add
    any required points, lines, text, and legends to this canvas. Here are some useful,
    ready-to-use functions in R that will add to a plot without refreshing or clearing
    the window:'
  prefs: []
  type: TYPE_NORMAL
- en: '`points` Adds points'
  prefs: []
  type: TYPE_NORMAL
- en: '`lines`, `abline`, `segments` Adds lines'
  prefs: []
  type: TYPE_NORMAL
- en: '`text` Writes text'
  prefs: []
  type: TYPE_NORMAL
- en: '`arrows` Adds arrows'
  prefs: []
  type: TYPE_NORMAL
- en: '`legend` Adds a legend'
  prefs: []
  type: TYPE_NORMAL
- en: The syntax for calling and setting parameters for these functions is the same
    as `plot`. The best way to see how these work is through an extended example,
    which I’ll base on some hypothetical data made up of 20 (*x*, *y*) locations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Using these data, you’ll build up the plot shown in [Figure 7-6](ch07.xhtml#ch7fig6)
    (note that you may need to manually enlarge your graphics device and replot to
    ensure the legend doesn’t overlap other features of the image). It’s worth remembering
    a generally accepted rule in plotting: “keep it clear and simple.” [Figure 7-6](ch07.xhtml#ch7fig6)
    is an exception for the sake of demonstrating the R commands used.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-6: An elaborate final plot of some hypothetical data*'
  prefs: []
  type: TYPE_NORMAL
- en: In [Figure 7-6](ch07.xhtml#ch7fig6), the data points will be plotted differently
    according to their *x* and *y* locations, depending on their relation to the “sweet
    spot” pointed out in the figure. Points with a *y* value greater than 5 are marked
    with a purple ×; points with a *y* value less than −5 are marked with a green
    +. Points between these two *y* values but still outside of the sweet spot are
    marked with a ○. Finally, points in the sweet spot (with *x* between 5 and 15
    *and* with *y* between −5 and 5) are marked as a blue •. Red horizontal and vertical
    lines delineate the sweet spot, which is labeled with an arrow, and there’s also
    a legend.
  prefs: []
  type: TYPE_NORMAL
- en: Ten lines of code were used to build this plot in its entirety (plus one additional
    line to add the legend). The plot, as it looks at each step, is given in [Figure
    7-7](ch07.xhtml#ch7fig7). The lines of code are detailed next.
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to create the empty plotting region where you can add points
    and draw lines. This first line tells R to plot the data in `x` and `y`, though
    the option `type` is set to `"n"`. As mentioned in [Section 7.2](ch07.xhtml#ch07lev1sec24),
    this opens or refreshes the graphics device and sets the axes to the appropriate
    lengths (with labels and axes), but it doesn’t plot any points or lines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `abline` function is a simple way to add straight lines spanning a plot.
    The line (or lines) can be specified with *slope* and *intercept* values (see
    the later discussions on regression in [Chapter 20](ch20.xhtml#ch20)). You can
    also simply add horizontal or vertical lines. This line of code adds two separate
    horizontal lines, one at *y* = 5 and the other at *y* = 5, using `h=c(-5,5)`.
    The three parameters (covered in [Section 7.2](ch07.xhtml#ch07lev1sec24)) make
    these two lines red, dashed, and double-thickness. For vertical lines, you could
    have written `v=c(-5,5)`, which would have drawn them at *x* = −5 and *x* = 5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f07-07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*Figure 7-7: Building the final plot given in [Figure 7-6](ch07.xhtml#ch7fig6).
    The plots (1) through (10) correspond to the itemized lines of code in the text.*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The third line of code adds shorter vertical lines between the horizontal ones
    drawn in step 2 to form a box. For this you use `segments`, not `abline`, since
    you don’t want these lines to span the entire plotting region. The `segments`
    command takes a “from” coordinate (given as `x0` and `y0`) and a “to” coordinate
    (as `x1` and `y1`) and draws the corresponding line. The vector-oriented behavior
    of R matches up the two sets of “from” and “to” coordinates. Both lines are red
    and dotted and have double-thickness. (You could also supply vectors of length
    2 to these parameters, in which case the first segment would use the first parameter
    value and the second segment would use the second value.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As step 4, you use `points` to begin adding specific coordinates from `x` and
    `y` to the plot. Just like `plot`, `points` takes two vectors of equal lengths
    with *x* and *y* values. In this case, you want points plotted differently according
    to their location, so you use logical vector subsetting (see [Section 4.1.5](ch04.xhtml#ch04lev2sec41))
    to identify and extract elements of `x` and `y` where the *y* value is greater
    than or equal to 5\. These (and only these) points are added as purple × symbols
    and are enlarged by a factor of 2 with `cex`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The fifth line of code is much like the fourth; this time it extracts the coordinates
    where *y* values are less than or equal to −5\. A + point character is used, and
    you set the color to dark green.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The sixth step adds the blue “sweet spot” points, which are identified with
    `(x>=5&x<=15)&(y>-5&y<5)`. This slightly more complicated set of conditions extracts
    the points whose *x* location lies between 5 and 15 (inclusive) AND whose *y*
    location lies between −5 and 5 (exclusive). Note that this line uses the “short”
    form of the logical operator `&` throughout since you want element-wise comparisons
    here (see [Section 4.1.3](ch04.xhtml#ch04lev2sec39)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This next command identifies the remaining points in the data set (with an *x*
    value that is either less than 5 OR greater than 15 AND a *y* value between −5
    and 5). No graphical parameters are specified, so these points are plotted with
    the default black ○.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To draw lines connecting the coordinates in `x` and `y`, you use `lines`. Here
    you’ve also set `lty` to `4`, which draws a dash-dot-dash style line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The ninth line of code adds the arrow pointing to the sweet spot. The function
    `arrows` is used just like `segments`, where you provide a “from” coordinate (`x0`,
    `y0`) and a “to” coordinate (`x1`, `y1`). By default, the head of the arrow is
    located at the “to” coordinate, though this (and other options such as the angle
    and length of the head) can be altered using optional arguments described in the
    help file `?arrows`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The tenth line prints a label on the plot at the top of the arrow. As per the
    default behavior of `text`, the string supplied as `labels` is *centered* on the
    coordinates provided with the arguments `x` and `y`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As a finishing touch, you can add the legend with the `legend` function, which
    gives you the final product shown in [Figure 7-6](ch07.xhtml#ch7fig6).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The first argument sets where the legend should be placed. There are various
    ways to do this (including setting exact *x*- and *y*-coordinates), but it often
    suffices to pick a corner using one of the four following character strings: `"topleft"`,
    `"topright"`, `"bottomleft"`, or `"bottomright"`. Next you supply the labels as
    a vector of character strings to the `legend` argument. Then you need to supply
    the remaining argument values in vectors of the same length so that the right
    elements match up with each label.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, for the first label (`"overall process"`), you want a line of type
    4 with default thickness and color. So, in the first positions of the remaining
    argument vectors, you set `pch=NA`, `lty=4`, `col="black"`, `lwd=1`, and `pt.cex=NA`
    (all of these are default values, except for `lty`). Here, `pt.cex` simply refers
    to the `cex` parameter when calling `points` (using just `cex` in `legend` would
    expand the text used, not the points).
  prefs: []
  type: TYPE_NORMAL
- en: Note that you have to fill in some elements in these vectors with `NA` when
    you don’t want to set the corresponding graphical parameter. This is just to preserve
    the equal lengths of the vectors supplied so R can track which parameter values
    correspond to each particular reference. As you work through this book, you’ll
    see plenty more examples using `legend`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 7.1**'
  prefs: []
  type: TYPE_NORMAL
- en: 'As closely as you can, re-create the following plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0139-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: With the following data, create a plot of weight on the *x*-axis and height
    on the *y*-axis. Use different point characters or colors to distinguish between
    males and females and provide a matching legend. Label the axes and give the plot
    a title.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Weight (kg)** | **Height (cm)** | **Sex** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 55 | 161 | female |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 85 | 185 | male |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 75 | 174 | male |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 42 | 154 | female |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 93 | 188 | male |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 63 | 178 | male |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 58 | 170 | female |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 75 | 167 | male |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 89 | 181 | male |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 67 | 178 | female |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**7.4 The ggplot2 Package**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This chapter so far has shown off R’s built-in graphical tools (often called
    *base R graphics* or *traditional R graphics*). Now, let’s look at another important
    suite of graphical tools: `ggplot2`, a prominent contributed package by Hadley
    Wickham ([2009](ref.xhtml#ref72)). Available on CRAN like any other contributed
    package, `ggplot2` offers particularly powerful alternatives to the standard plotting
    procedures in R. The *gg* stands for *grammar of graphics*—a particular approach
    to graphical production described by Wilkinson ([2005](ref.xhtml#ref75)). In following
    this approach, `ggplot2` standardizes the production of different plot and graph
    types, streamlines some of the more fiddly aspects of adding to existing plots
    (such as including a legend), and lets you build plots by defining and manipulating
    *layers*. For the moment, let’s see the elementary behavior of `ggplot2` using
    the same simple examples in [Sections 7.1](ch07.xhtml#ch07lev1sec23)–[7.3](ch07.xhtml#ch07lev1sec25).
    You’ll get familiar with the basic plotting function `qplot` and how it differs
    from the generic `plot` function used earlier. I’ll return to the topic of `ggplot2`
    when I cover statistical plots in [Chapter 14](ch14.xhtml#ch14), and you’ll investigate
    even more advanced abilities in [Chapter 24](ch24.xhtml#ch24).'
  prefs: []
  type: TYPE_NORMAL
- en: '***7.4.1 A Quick Plot with qplot***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'First, you must install the `ggplot2` package by downloading it manually or
    simply entering `install.packages("ggplot2")` at the prompt (see [Section A.2.3](app01.xhtml#app01lev2sec275)).
    Then, load the package with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now, let’s go back to the five data points originally stored in [Section 7.1](ch07.xhtml#ch07lev1sec23)
    as `foo` and `bar`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: You can produce `ggplot2`’s version of [Figure 7-1](ch07.xhtml#ch7fig1) using
    its “quick plot” function `qplot`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The result is shown in the left image of [Figure 7-8](ch07.xhtml#ch7fig8). There
    are some obvious differences between this image and the one produced using `plot`,
    but the basic syntax of `qplot` is the same as earlier. The first two arguments
    passed to `qplot` are vectors of equal length, with the *x*-coordinates in `foo`
    supplied first, followed by the *y*-coordinates in `bar`.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-8: Five plotted points using* `ggplot2`*’s default behavior for the*
    `qplot` *function (left) and with title and axis labels added (right)*'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a title and axis labels also uses the same arguments you already saw
    with `plot` in [Section 7.2](ch07.xhtml#ch07lev1sec24).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This produces the right panel of [Figure 7-8](ch07.xhtml#ch7fig8).
  prefs: []
  type: TYPE_NORMAL
- en: 'Underneath this basic similarity in syntax, though, there is a fundamental
    difference between how `ggplot2` and base R graphics create plots. Constructing
    plots using the built-in graphics tools is essentially a live, step-by-step process.
    This was particularly noticeable in [Section 7.3](ch07.xhtml#ch07lev1sec25), where
    you treated the graphics device as an active canvas where you added points, lines,
    and other features one by one. By contrast, `ggplot2` plots are stored as objects,
    which means they have an underlying, static representation until you *change*
    the object—what you essentially visualize with `qplot` is the `print`ed object
    at any given time. To highlight this, enter the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The first assignment uses the built-in `plot` function. When you run that line
    of code, the plot in [Figure 7-1](ch07.xhtml#ch7fig1) pops up. Since nothing is
    actually stored in the workspace, printing the supposed object `baz` yields the
    empty `NULL` value. On the other hand, it makes sense to store the `qplot` content
    (stored as the object `qux` here). This time, when you perform the assignment,
    no plot is displayed. The graphic, which matches [Figure 7-8](ch07.xhtml#ch7fig8),
    is displayed only when you enter `qux` at the prompt, which invokes the `print`
    method for that object. This may seem like a minor point, but the fact that you
    can save a plot this way before displaying it opens up new ways to modify or enhance
    plots before displaying them (as you will see in a moment), and it can be a distinct
    advantage over base R graphics.
  prefs: []
  type: TYPE_NORMAL
- en: '***7.4.2 Setting Appearance Constants with Geoms***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To add and customize points and lines in a `ggplot2` graphic, you alter the
    object itself, rather than using a long list of arguments or secondary functions
    executed separately (such as `points` or `lines`). You can modify the object using
    `ggplot2`’s convenient suite of *geometric modifiers*, known as *geoms*. Let’s
    say you want to connect the five points in `foo` and `bar` with a line, just as
    you did in [Section 7.1](ch07.xhtml#ch07lev1sec23). You can first create a blank
    plot object and then use geometric modifiers on it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting plot is shown on the left of [Figure 7-9](ch07.xhtml#ch7fig9).
    In the first call to `qplot`, you create an empty plot object by setting the initial
    geometric modifier as `geom="blank"` (if you displayed this plot, you would just
    see the gray background and the axes). Then you layer on the two other geoms as
    `geom_point()` and `geom_line()`. As indicated by the parentheses, these geoms
    are functions that result in their own specialized objects. You can add geoms
    to the `qplot` object using the `+` operator. Here, you haven’t supplied any arguments
    to either geom, which means they’ll operate on the same data originally supplied
    to `qplot` (`foo` and `bar`) and they’ll stick to the default settings for any
    other features, such as color or point/line type. You can control those features
    by specifying optional arguments, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![image](../images/f07-09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-9: Two simple plots that use geometric modifiers to alter the appearance
    of a* `qplot` *object. Left: Adding points and lines using default settings. Right:
    Using the geoms to affect point character, size, and color, and line type and
    color.*'
  prefs: []
  type: TYPE_NORMAL
- en: Note that some of `ggplot2`’s argument names used here for things such as point
    characters and size (`shape` and `size`) are different from the base R graphics
    arguments (`pch` and `cex`). But `ggplot2` is actually compatible with many of
    the common graphical parameters used in R’s standard `plot` function, so you can
    use those arguments here too if you prefer. For instance, setting `cex=3` and
    `pch=6` in `geom_point` in this example would result in the same image.
  prefs: []
  type: TYPE_NORMAL
- en: The object-oriented nature of `ggplot2` graphics means tweaking a plot or experimenting
    with different visual features no longer requires you to rerun every plotting
    command each time you change something. This is facilitated by geoms. Say you
    like the line type used on the right side of [Figure 7-9](ch07.xhtml#ch7fig9)
    but want a different point character. To experiment, you could first store the
    `qplot` object you created earlier and then use `geom_point` with that object
    to try different point styles.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The first line stores the original plot in `myqplot`, and the next lines call
    `myqplot` with different point shapes. The second and third lines produce the
    graphics on the left and right of [Figure 7-10](ch07.xhtml#ch7fig10), respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-10: Using the object-oriented nature of* `ggplot2` *graphics to experiment
    with different point characters*'
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of geometric modifiers that can be called using a function
    name beginning with `geom_` in `ggplot2`. To obtain a list, simply ensure the
    package is loaded and enter `??"geom_"` as a help search at the prompt.
  prefs: []
  type: TYPE_NORMAL
- en: '***7.4.3 Aesthetic Mapping with Geoms***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Geoms and `ggplot2` also provide efficient, automated ways to apply different
    styles to different subsets of a plot. If you split a data set into categories
    using a factor object, `ggplot2` can automatically apply particular styles to
    different categories. In `ggplot2`’s documentation, the factor that holds these
    categories is called a *variable*, which `ggplot2` can *map* to *aesthetic* values.
    This gets rid of much of the effort that goes into isolating subsets of data and
    plotting them separately using base R graphics (as you did in [Section 7.3](ch07.xhtml#ch07lev1sec25)).
  prefs: []
  type: TYPE_NORMAL
- en: All this is best illustrated with an example. Let’s return to the 20 observations
    you manually plotted, step-by-step, to produce the elaborate plot in [Figure 7-6](ch07.xhtml#ch7fig6).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In [Section 7.3](ch07.xhtml#ch07lev1sec25), you defined several categories that
    classified each observation as either “standard,” “sweet,” “too big,” or “too
    small” based on their `x` and `y` values. Using those same classification rules,
    let’s explicitly define a factor to correspond to `x` and `y`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you have a factor with 20 values sorted into four levels. You’ll use this
    factor to tell `qplot` how to map your aesthetics. Here’s a simple way to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This single line of code produces the left plot in [Figure 7-11](ch07.xhtml#ch7fig11),
    which separates the four categories by color and point character and even provides
    a legend. This was all done by the aesthetic mapping in the call to `qplot`, where
    you set `color` and `shape` to be mapped to the `ptype` variable.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-11: Demonstration of aesthetic mapping using* `qplot` *and geoms
    in* `ggplot2`*. Left: The initial call to* `qplot`*, which maps point character
    and color using* `ptype`*. Right: Augmenting the left plot using various geoms
    to override the default mappings.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s replot these data using the same `qplot` object along with a suite
    of geom modifications in order to get something more like [Figure 7-6](ch07.xhtml#ch7fig6).
    Executing the following produces the plot on the right of [Figure 7-11](ch07.xhtml#ch7fig11):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In the first line, you add `geom_point(size=4)` to increase the size of all
    the points on the graph. In the lines that follow, you add a line connecting all
    the points, plus horizontal and vertical lines to mark out the sweet spot. For
    those last four lines, you have to use `aes` to set alternate aesthetic mappings
    for the point categories. Let’s look a little closer at what’s going on there.
  prefs: []
  type: TYPE_NORMAL
- en: Since you used `ptype` for aesthetic mapping in the initial call to `qplot`,
    by default all other geoms will be mapped to each category in the same way, *unless*
    you override that default mapping with `aes`. For example, when you call `geom_line`
    to connect all the points, if you were to stick with the default mapping to `ptype`
    instead of including `mapping=aes(group=1)`, this geom would draw lines connecting
    points within each category. You would see four separate dashed lines—one connecting
    all “standard” points, another connecting all “sweet” points, and so on. But that’s
    not what you want here; you want a line that connects all of the points, from
    left to right. So, you tell `geom_line` to treat all the observations as one group
    by entering `aes(group=1)`.
  prefs: []
  type: TYPE_NORMAL
- en: After that, you use the `geom_hline` function to draw horizontal lines at *y*
    = −5 and *y* = 5 using its `yintercept` argument, again passed to `aes` to redefine
    that geom’s `mapping`. In this case, you need to redefine the mapping to operate
    on the vector `c(-5,5)`, rather than using the observed data in `x` and `y`. Similarly,
    you end by using `geom_segment` to draw the two vertical dotted line segments.
    `geom_segment` operates much like `segments`—you redefine the mapping based on
    a “from” coordinate (arguments `x` and `y`) and a “to” coordinate (`xend` and
    `yend` here). Since the first geom, `geom_point(size=4)`, sets a constant enlarged
    size for every plotted point, it doesn’t matter how the geom is mapped because
    it simply makes a uniform change to each point.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting in R, from base graphics to contributed packages like `ggplot2`, stays
    true to the nature of the language. The element-wise matching allows you to create
    intricate plots with a handful of straightforward and intuitive functions. Once
    you display a plot, you can save it to the hard drive by selecting the graphics
    device and choosing File → Save. However, you can also write plots to a file directly,
    as you’ll see momentarily in [Section 8.3](ch08.xhtml#ch08lev1sec29).
  prefs: []
  type: TYPE_NORMAL
- en: The graphical capabilities explored in this section are merely the tip of the
    iceberg, and you’ll continue to use data visualizations from this point onward.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 7.2**'
  prefs: []
  type: TYPE_NORMAL
- en: In [Exercise 7.1](ch07.xhtml#ch7exc1) (b), you used base R graphics to plot
    some weight and height data, distinguishing males and females using different
    points or colors. Repeat this task using `ggplot2`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Important Code in This Chapter**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '| **Function/operator** | **Brief description** | **First occurrence** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `plot` | Create/display base R plot | [Section 7.1](ch07.xhtml#ch07lev1sec23),
    [p. 128](ch07.xhtml#page_128) |'
  prefs: []
  type: TYPE_TB
- en: '| `type` | Set plot type | [Section 7.2.1](ch07.xhtml#ch07lev2sec63), [p. 130](ch07.xhtml#page_130)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `main`, `xlab`, `ylab` | Set axis labels | [Section 7.2.2](ch07.xhtml#ch07lev2sec64),
    [p. 130](ch07.xhtml#page_130) |'
  prefs: []
  type: TYPE_TB
- en: '| `col` | Set point/line color | [Section 7.2.3](ch07.xhtml#ch07lev2sec65),
    [p. 131](ch07.xhtml#page_131) |'
  prefs: []
  type: TYPE_TB
- en: '| `pch`, `cex` | Set point type/size | [Section 7.2.4](ch07.xhtml#ch07lev2sec66),
    [p. 133](ch07.xhtml#page_133) |'
  prefs: []
  type: TYPE_TB
- en: '| `lty`, `lwd` | Set line type/width | [Section 7.2.4](ch07.xhtml#ch07lev2sec66),
    [p. 133](ch07.xhtml#page_133) |'
  prefs: []
  type: TYPE_TB
- en: '| `xlim`, `ylim` | Set plot region limits | [Section 7.2.5](ch07.xhtml#ch07lev2sec67),
    [p. 134](ch07.xhtml#page_134) |'
  prefs: []
  type: TYPE_TB
- en: '| `abline` | Add vertical/horizontal line | [Section 7.3](ch07.xhtml#ch07lev1sec25),
    [p. 137](ch07.xhtml#page_137) |'
  prefs: []
  type: TYPE_TB
- en: '| `segments` | Add specific line segments | [Section 7.3](ch07.xhtml#ch07lev1sec25),
    [p. 137](ch07.xhtml#page_137) |'
  prefs: []
  type: TYPE_TB
- en: '| `points` | Add points | [Section 7.3](ch07.xhtml#ch07lev1sec25), [p. 137](ch07.xhtml#page_137)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `lines` | Add lines following coords | [Section 7.3](ch07.xhtml#ch07lev1sec25),
    [p. 138](ch07.xhtml#page_138) |'
  prefs: []
  type: TYPE_TB
- en: '| `arrows` | Add arrows | [Section 7.3](ch07.xhtml#ch07lev1sec25), [p. 138](ch07.xhtml#page_138)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `text` | Add text | [Section 7.3](ch07.xhtml#ch07lev1sec25), [p. 138](ch07.xhtml#page_138)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `legend` | Add/control legend | [Section 7.3](ch07.xhtml#ch07lev1sec25),
    [p. 138](ch07.xhtml#page_138) |'
  prefs: []
  type: TYPE_TB
- en: '| `qplot` | Create `ggplot2` “quick plot” | [Section 7.4.1](ch07.xhtml#ch07lev2sec68),
    [p. 140](ch07.xhtml#page_140) |'
  prefs: []
  type: TYPE_TB
- en: '| `geom_point` | Add points geom | [Section 7.4.2](ch07.xhtml#ch07lev2sec69),
    [p. 141](ch07.xhtml#page_141) |'
  prefs: []
  type: TYPE_TB
- en: '| `geom_line` | Add lines geom | [Section 7.4.2](ch07.xhtml#ch07lev2sec69),
    [p. 141](ch07.xhtml#page_141) |'
  prefs: []
  type: TYPE_TB
- en: '| `size`, `shape`, `color` | Set geom constants | [Section 7.4.2](ch07.xhtml#ch07lev2sec69),
    [p. 142](ch07.xhtml#page_142) |'
  prefs: []
  type: TYPE_TB
- en: '| `linetype` | Set geom line type | [Section 7.4.2](ch07.xhtml#ch07lev2sec69),
    [p. 142](ch07.xhtml#page_142) |'
  prefs: []
  type: TYPE_TB
- en: '| `mapping`, `aes` | Geom aesthetic mapping | [Section 7.4.3](ch07.xhtml#ch07lev2sec70),
    [p. 145](ch07.xhtml#page_145) |'
  prefs: []
  type: TYPE_TB
- en: '| `geom_hline` | Add horizontal lines geom | [Section 7.4.3](ch07.xhtml#ch07lev2sec70),
    [p. 145](ch07.xhtml#page_145) |'
  prefs: []
  type: TYPE_TB
- en: '| `geom_segment` | Add line segments geom | [Section 7.4.3](ch07.xhtml#ch07lev2sec70),
    [p. 145](ch07.xhtml#page_145) |'
  prefs: []
  type: TYPE_TB
