- en: '**7**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**7**'
- en: '**BASIC PLOTTING**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**基础绘图**'
- en: '![image](../images/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common-01.jpg)'
- en: One particularly popular feature of R is its incredibly flexible plotting tools
    for data and model visualization. This is what draws many to R in the first place.
    Mastering R’s graphical functionality does require practice, but the fundamental
    concepts are straightforward. In this chapter, I’ll provide an overview of the
    `plot` function and some useful options for controlling the appearance of the
    final graph. Then I’ll cover the basics of using `ggplot2`, a powerful library
    for visualizing data in R. This chapter will cover just the basics of plotting,
    and then you’ll learn more about creating different types of statistical plots
    in [Chapter 14](ch14.xhtml#ch14), and about advanced plotting techniques in [Part
    V](part05.xhtml#part05).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: R的一个特别受欢迎的功能是其极其灵活的数据和模型可视化绘图工具。这正是许多人最初选择R的原因。掌握R的图形功能确实需要一些练习，但基本概念是直接明了的。在本章中，我将概述`plot`函数以及一些控制最终图形外观的有用选项。然后，我将介绍使用`ggplot2`的基础知识，`ggplot2`是一个强大的R数据可视化库。本章将仅涵盖绘图的基础知识，之后你将在[第14章](ch14.xhtml#ch14)中学习更多关于创建不同类型的统计图形的内容，以及在[第五部分](part05.xhtml#part05)中学习高级绘图技术。
- en: '**7.1 Using plot with Coordinate Vectors**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**7.1 使用坐标向量绘图**'
- en: 'The easiest way to think about generating plots in R is to treat your screen
    as a blank, two-dimensional canvas. You can plot points and lines using *x-*and
    *y*-coordinates. On paper, these coordinates are usually represented with points
    written as a pair: (*x* value, *y* value). The R function `plot`, on the other
    hand, takes in two vectors—one vector of *x* locations and one vector of *y* locations—and
    opens a *graphics device* where it displays the result. If a graphics device is
    already open, R’s default behavior is to refresh the device, overwriting the current
    contents with the new plot.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在R中生成绘图的最简单方法是把你的屏幕当作一个空白的二维画布。你可以使用*x*和*y*坐标来绘制点和线。在纸上，这些坐标通常表示为一对数值：(*x*值，*y*值)。而R的`plot`函数则接收两个向量——一个*x*位置的向量和一个*y*位置的向量——并打开一个*图形设备*来显示结果。如果图形设备已经打开，R的默认行为是刷新设备，用新图形覆盖当前内容。
- en: 'For example, let’s say you wanted to plot the points (1.1,2), (2,2.2), (3.5,
    − 1.3), (3.9,0), and (4.2,0.2). In `plot`, you must provide the vector of *x*
    locations first, and the *y* locations second. Let’s define these as `foo` and
    `bar`, respectively:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你想绘制以下五个点：(1.1,2)，(2,2.2)，(3.5, − 1.3)，(3.9,0)，和(4.2,0.2)。在`plot`中，你必须首先提供*x*位置的向量，其次提供*y*位置的向量。我们将这两个向量分别定义为`foo`和`bar`：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[Figure 7-1](ch07.xhtml#ch7fig1) shows the resulting graphics device with the
    plot (I’ll use this simple data set as a working example throughout this section).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[图7-1](ch07.xhtml#ch7fig1)显示了绘制结果的图形设备（我将在本节中使用这个简单的数据集作为工作示例）。'
- en: '![image](../images/f07-01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f07-01.jpg)'
- en: '*Figure 7-1: The five plotted points using R’s default behavior*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-1：使用R默认行为绘制的五个点*'
- en: 'The *x* and *y* locations don’t necessarily need to be specified as separate
    vectors. You can also supply coordinates in the form of a matrix, with the *x*
    values in the first column and the *y* values in the second column, or as a list.
    For example, setting up a matrix of the five points, the following code exactly
    reproduces [Figure 7-1](ch07.xhtml#ch7fig1) (note the window pane will look slightly
    different depending on your operating system):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*x*和*y*位置不一定需要作为单独的向量来指定。你也可以以矩阵的形式提供坐标，其中*x*值在第一列，*y*值在第二列，或者以列表的形式提供。例如，设置五个点的矩阵，下面的代码正好重现[图7-1](ch07.xhtml#ch7fig1)（注意，窗口窗格在不同的操作系统上可能看起来略有不同）：'
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `plot` function is one of R’s versatile *generic* functions. It works differently
    for different objects and allows users to define their own methods for handling
    objects (including user-defined object classes). Technically, the version of the
    `plot` command that you’ve just used is internally identified as `plot.default`.
    The help file `?plot.default` provides additional details on this *scatterplot*
    style of data visualization.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`plot`函数是R的多功能*通用*函数之一。它对不同的对象工作方式不同，并允许用户为处理对象（包括用户定义的对象类）定义自己的方法。从技术上讲，你刚刚使用的`plot`命令的版本在内部被标识为`plot.default`。帮助文件`?plot.default`提供了有关这种*散点图*数据可视化风格的更多细节。'
- en: '**7.2 Graphical Parameters**'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**7.2 图形参数**'
- en: 'There are a wide range of *graphical parameters* that can be supplied as arguments
    to the `plot` function (or other plotting functions, such as those in [Section
    7.3](ch07.xhtml#ch07lev1sec25)). These parameters invoke simple visual enhancements,
    like coloring the points and adding axis labels, and can also control technical
    aspects of the graphics device ([Chapter 23](ch23.xhtml#ch23) covers the latter
    in more detail). Some of the most commonly used graphical parameters are listed
    here; I’ll briefly discuss each of these in turn in the following sections:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多*图形参数*可以作为参数传递给`plot`函数（或其他绘图函数，例如[第7.3节](ch07.xhtml#ch07lev1sec25)中的函数）。这些参数用于简单的视觉增强，如给点上色和添加坐标轴标签，还可以控制图形设备的技术细节（[第23章](ch23.xhtml#ch23)详细讲解了后者）。这里列出了一些常用的图形参数；我将在接下来的部分简要讨论每个参数：
- en: '`type` Tells R how to plot the supplied coordinates (for example, as stand-alone
    points or joined by lines or both dots and lines).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`type` 告诉R如何绘制提供的坐标（例如，作为单独的点，或者通过线条连接，或同时显示点和线）。'
- en: '`main`, `xlab`, `ylab` Options to include plot title, the horizontal axis label,
    and the vertical axis label, respectively.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`main`、`xlab`、`ylab` 分别用于包含绘图标题、水平轴标签和垂直轴标签的选项。'
- en: '`col` Color (or colors) to use for plotting points and lines.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`col` 用于绘制点和线的颜色（或颜色）。'
- en: '`pch` Stands for *point character*. This selects which character to use for
    plotting individual points.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`pch` 代表*点字符*。此参数选择用于绘制单个点的字符。'
- en: '`cex` Stands for *character expansion*. This controls the size of plotted point
    characters.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`cex` 代表*字符扩展*。此参数控制绘制点字符的大小。'
- en: '`lty` Stands for *line type*. This specifies the type of line to use to connect
    the points (for example, solid, dotted, or dashed).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`lty` 代表*线条类型*。此参数指定用于连接点的线条类型（例如，实线、虚线或点线）。'
- en: '`lwd` Stands for *line width*. This controls the thickness of plotted lines.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`lwd` 代表*线条宽度*。此参数控制绘制线条的粗细。'
- en: '`xlim`, `ylim` This provides limits for the horizontal range and vertical range
    (respectively) of the plotting region.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`xlim`、`ylim` 分别提供绘图区域的水平范围和垂直范围的限制。'
- en: '***7.2.1 Automatic Plot Types***'
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***7.2.1 自动绘图类型***'
- en: By default, the `plot` function will plot individual points, as shown in [Figure
    7-1](ch07.xhtml#ch7fig1). This is the default plot type, but other plot types
    will have a different appearance. To control the plot type, you can specify a
    single character-valued option for the argument `type`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`plot`函数将绘制单个点，如[图7-1](ch07.xhtml#ch7fig1)所示。这是默认的绘图类型，但其他绘图类型将具有不同的外观。要控制绘图类型，您可以为`type`参数指定一个字符值选项。
- en: 'For example, in many cases it makes sense to show lines connecting each coordinate,
    such as when plotting time series data. For this, you would specify plot type
    `"l"`. Using `foo` and `bar` from [Section 7.1](ch07.xhtml#ch07lev1sec23), the
    following produces the plot in the left panel of [Figure 7-2](ch07.xhtml#ch7fig2):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在许多情况下，连接每个坐标的线条是有意义的，例如在绘制时间序列数据时。为此，您可以指定绘图类型为`"l"`。使用[第7.1节](ch07.xhtml#ch07lev1sec23)中的`foo`和`bar`，如下代码会在[图7-2](ch07.xhtml#ch7fig2)的左侧面板中生成图表：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![image](../images/f07-02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f07-02.jpg)'
- en: '*Figure 7-2: A line plot produced using five adjoined coordinates, setting*
    `type="l"` *(left) or* `type="b"` *(right)*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-2：使用五个相连的坐标生成的线图，设置为* `type="l"` *(左侧) 或* `type="b"` *(右侧)*'
- en: The default value for `type` is `"p"`, which can be interpreted as “points only.”
    Since you didn’t specify anything different, this is what was used for the graph
    in [Figure 7-1](ch07.xhtml#ch7fig1). In this last example, on the other hand,
    you’ve set `type="l"` (meaning “lines only”). Other options include `"b"` for
    both points *and* lines (shown in the right panel of [Figure 7-2](ch07.xhtml#ch7fig2))
    and `"o"` for overplotting the points with lines (this eliminates the gaps between
    points and lines visible for `type="b"`). The option `type="n"` results in no
    points or lines plotted, creating an empty plot, which can be useful for complicated
    plots that must be constructed in steps.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`type`的默认值是`"p"`，可以理解为“仅点”。由于您没有指定其他内容，因此在[图7-1](ch07.xhtml#ch7fig1)中的图表使用的是该类型。另一方面，在最后这个例子中，您设置了`type="l"`（意味着“仅线”）。其他选项包括`"b"`，表示同时绘制点*和*线（如[图7-2](ch07.xhtml#ch7fig2)的右侧面板所示），以及`"o"`，表示用线条覆盖点（这会消除`type="b"`中点和线之间的间隙）。`type="n"`选项则表示不绘制点或线，创建一个空白图，这对于需要逐步构建的复杂图形非常有用。'
- en: '***7.2.2 Title and Axis Labels***'
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***7.2.2 标题和坐标轴标签***'
- en: 'By default, a basic plot won’t have a main title, and its axes will be labeled
    with the names of the vectors being plotted. But a main title and more descriptive
    axis labels often make the plotted data easier to interpret. You can add these
    by supplying text as character strings to `main` for a title, `xlab` for the *x*-axis
    label, and `ylab` for the *y*-axis label. Note that these strings may include
    escape sequences (discussed in [Section 4.2.3](ch04.xhtml#ch04lev2sec44)). The
    following code produces the plots in [Figure 7-3](ch07.xhtml#ch7fig3):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，基本图形没有主标题，坐标轴会用正在绘制的向量名称来标注。但主标题和更具描述性的坐标轴标签通常会使绘制的数据更易于理解。你可以通过将文本作为字符字符串提供给`main`来添加标题，`xlab`来添加*x*轴标签，`ylab`来添加*y*轴标签。请注意，这些字符串可能包含转义序列（在[第4.2.3节](ch04.xhtml#ch04lev2sec44)中讨论）。以下代码生成了[图7-3](ch07.xhtml#ch7fig3)中的图表：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![image](../images/f07-03.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f07-03.jpg)'
- en: '*Figure 7-3: Two examples of plots with axis labels and titles*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-3：带有坐标轴标签和标题的图表示例*'
- en: In the second plot, note how the new line escape sequence splits the title into
    two lines. In that plot, `xlab` and `ylab` are also set to the empty string `""`
    to prevent R from labeling the axes with the names of the *x* and *y* vectors.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个图中，请注意新添加的线条转义序列将标题分割成两行。在该图中，`xlab`和`ylab`也被设置为空字符串`""`，以防止R自动用*x*和*y*向量的名称标记坐标轴。
- en: '***7.2.3 Color***'
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***7.2.3 颜色***'
- en: 'Adding color to a graph is far from just an aesthetic consideration. Color
    can make data much clearer—for example by distinguishing factor levels or emphasizing
    important numeric limits. You can set colors with the `col` parameter in a number
    of ways. The simplest options are to use an integer selector or a character string.
    There are a number of color string values recognized by R, which you can see by
    entering `colors()` at the prompt. The default color is integer `1` or the character
    string `"black"`. The top row of [Figure 7-4](ch07.xhtml#ch7fig4) shows two examples
    of colored graphs, created by the following code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 给图形添加颜色远不只是美学考虑。颜色可以使数据更加清晰——例如，通过区分因子水平或强调重要的数值限制。你可以通过`col`参数以多种方式设置颜色。最简单的选项是使用整数选择器或字符字符串。R语言识别多个颜色字符串值，你可以通过在提示符下输入`colors()`来查看这些颜色。默认颜色是整数`1`或字符字符串`"black"`。
    [图7-4](ch07.xhtml#ch7fig4)的顶部行展示了通过以下代码创建的两种彩色图表示例：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There are eight possible integer values (shown in the leftmost plot of [Figure
    7-5](ch07.xhtml#ch7fig5)) and around 650 character strings to specify color. But
    you aren’t limited to these options since you can also specify colors using RGB
    (red, green, and blue) levels and by creating your own palettes. I’ll talk more
    about the last two options in [Chapter 25](ch25.xhtml#ch25).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有八种可能的整数值（见[图7-5](ch07.xhtml#ch7fig5)的最左侧图），并且大约有650种字符字符串可用于指定颜色。但你并不局限于这些选项，因为你还可以通过RGB（红色、绿色和蓝色）水平以及创建你自己的调色板来指定颜色。我将在[第25章](ch25.xhtml#ch25)中详细讨论后两种选项。
- en: '![image](../images/f07-04.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f07-04.jpg)'
- en: '*Figure 7-4: Experimenting with basic R plotting. Top row: Two examples of
    colored plots with* `col=2` *(left) and* `col="seagreen4"` *(right). Middle row:
    Two further examples making use of* `pch`, `lty`, `cex`*, and* `lwd`*. Bottom
    row: Setting plotting region limits* `xlim=c(-10,5)`, `ylim=c(-3,3)` *(left),
    and* `xlim=c(3,5)`, `ylim=c(-0.5,0.2)` *(right).*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-4：基本R绘图实验。顶部行：使用`col=2`（左）和`col="seagreen4"`（右）创建的两种彩色图表。中间行：进一步使用`pch`、`lty`、`cex`和`lwd`的两种示例。底部行：设置绘图区域限制`xlim=c(-10,5)`、`ylim=c(-3,3)`（左）和`xlim=c(3,5)`、`ylim=c(-0.5,0.2)`（右）。*'
- en: '***7.2.4 Line and Point Appearances***'
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***7.2.4 线条和点的外观***'
- en: To alter the appearance of the plotted points you would use `pch`, and to alter
    the lines you would use `lty`. The `pch` parameter controls the character used
    to plot individual data points. You can specify a single character to use for
    each point, or you can specify a value between `1` and `25` (inclusive). The symbols
    corresponding to each integer are shown in the middle plot of [Figure 7-5](ch07.xhtml#ch7fig5).
    The `lty` parameter, which affects the type of line drawn, can take the values
    `1` through `6`. These options are shown in the rightmost plot of [Figure 7-5](ch07.xhtml#ch7fig5).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 若要改变绘制点的外观，可以使用`pch`参数，若要改变线条的外观，可以使用`lty`参数。`pch`参数控制绘制单个数据点时使用的字符。你可以指定一个字符来表示每个点，或者指定一个介于`1`到`25`（包含）之间的值。每个整数对应的符号显示在[图7-5](ch07.xhtml#ch7fig5)的中间图中。`lty`参数控制线条的类型，它的值可以是`1`到`6`。这些选项显示在[图7-5](ch07.xhtml#ch7fig5)的最右侧图中。
- en: '![image](../images/f07-05.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f07-05.jpg)'
- en: '*Figure 7-5: Some reference plots giving the results of possible integer options
    of* `col` *(left),* `pch` *(middle), and* `lty` *(right)*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-5：一些参考图形，显示了`col`（左）、`pch`（中）和`lty`（右）可能的整数选项结果*'
- en: You can also control the size of plotted points using `cex` and the thickness
    of lines using `lwd`. The default size and thickness for both of these is `1`.
    To request half-size points, for example, you’d specify `cex=0.5`; to specify
    double-thick lines, use `lwd=2`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`cex`控制绘制点的大小，使用`lwd`控制线条的粗细。默认情况下，这两个的大小和粗细为`1`。例如，要请求半大小的点，可以指定`cex=0.5`；要指定双倍粗细的线条，则使用`lwd=2`。
- en: 'The following two lines produce the two plots in the middle row of [Figure
    7-4](ch07.xhtml#ch7fig4), showing off `pch`, `lty`, `cex`, and `lwd`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两行代码生成了[图7-4](ch07.xhtml#ch7fig4)中间行的两个图形，展示了`pch`、`lty`、`cex`和`lwd`：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '***7.2.5 Plotting Region Limits***'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***7.2.5 绘图区域的限制***'
- en: As you can see in the plots of `foo` and `bar`, by default R sets the range
    of each axis by using the range of the supplied *x* and *y* values (plus a small
    constant to pad a little area around the outermost points). But you might need
    more space than this to, for example, annotate individual points, add a legend,
    or plot additional points that fall outside the original ranges (as you’ll see
    in [Section 7.3](ch07.xhtml#ch07lev1sec25)). You can set custom plotting area
    limits using `xlim` and `ylim`. Both parameters require a numeric vector of length
    2, provided as `c(lower`, upper).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在`foo`和`bar`的图形中看到的，默认情况下，R通过使用提供的*X*和*Y*值的范围（加上一小常数来为最外层的点周围留下一些区域）来设置每个轴的范围。但你可能需要更多空间，例如，为单独的点添加注释、添加图例或绘制超出原始范围的附加点（正如你将在[第7.3节](ch07.xhtml#ch07lev1sec25)中看到的）。你可以使用`xlim`和`ylim`设置自定义的绘图区域限制。两个参数都需要一个长度为2的数值向量，表示为`c(下限，
    上限)`。
- en: 'Consider the plots in the bottom row of [Figure 7-4](ch07.xhtml#ch7fig4), created
    with the following two commands:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑[图7-4](ch07.xhtml#ch7fig4)底部行中的图形，这些图形是通过以下两个命令创建的：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: These plots are exactly the same as the two in the middle row, except for one
    important difference. In the bottom-left plot of [Figure 7-4](ch07.xhtml#ch7fig4),
    the *x*-and *y*-axes are set to be much wider than the observed data, and the
    plot on the right restricts the plotting window so that only a portion of the
    data is displayed.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这些图形与中间行的两个图形完全相同，唯一的区别在于，左下图中的*X*和*Y*轴被设置得比观察到的数据宽得多，而右侧的图形限制了绘图窗口，只显示数据的一部分。
- en: '**7.3 Adding Points, Lines, and Text to an Existing Plot**'
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**7.3 向现有图形添加点、线和文本**'
- en: 'Generally speaking, each call to `plot` will refresh the active graphics device
    for a new plotting region. But this is not always desired—to build more complicated
    plots, it’s easiest to start with an empty plotting region and progressively add
    any required points, lines, text, and legends to this canvas. Here are some useful,
    ready-to-use functions in R that will add to a plot without refreshing or clearing
    the window:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，每次调用`plot`都会刷新活动图形设备以创建一个新的绘图区域。但这并不总是所需的——为了构建更复杂的图形，最容易的方法是从一个空的绘图区域开始，并逐步向该画布添加所需的点、线、文本和图例。以下是一些在R中可以用于向图形添加内容而不刷新或清除窗口的有用函数：
- en: '`points` Adds points'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`points` 添加点'
- en: '`lines`, `abline`, `segments` Adds lines'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`lines`, `abline`, `segments` 添加线条'
- en: '`text` Writes text'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`text` 写入文本'
- en: '`arrows` Adds arrows'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`arrows` 添加箭头'
- en: '`legend` Adds a legend'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`legend` 添加图例'
- en: The syntax for calling and setting parameters for these functions is the same
    as `plot`. The best way to see how these work is through an extended example,
    which I’ll base on some hypothetical data made up of 20 (*x*, *y*) locations.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数的调用和设置参数的语法与`plot`相同。查看这些如何工作的最佳方式是通过一个扩展的示例，我将基于一些由20个(*x*，*y*)位置组成的假设数据。
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Using these data, you’ll build up the plot shown in [Figure 7-6](ch07.xhtml#ch7fig6)
    (note that you may need to manually enlarge your graphics device and replot to
    ensure the legend doesn’t overlap other features of the image). It’s worth remembering
    a generally accepted rule in plotting: “keep it clear and simple.” [Figure 7-6](ch07.xhtml#ch7fig6)
    is an exception for the sake of demonstrating the R commands used.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些数据，你将构建出[图7-6](ch07.xhtml#ch7fig6)所示的图形（请注意，你可能需要手动放大图形设备并重新绘制，以确保图例不会与图像的其他部分重叠）。值得记住的是一个公认的绘图规则：“保持清晰简洁”。[图7-6](ch07.xhtml#ch7fig6)是一个例外，为了演示使用的R命令。
- en: '![image](../images/f07-06.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f07-06.jpg)'
- en: '*Figure 7-6: An elaborate final plot of some hypothetical data*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-6：一些假设数据的复杂最终图形*'
- en: In [Figure 7-6](ch07.xhtml#ch7fig6), the data points will be plotted differently
    according to their *x* and *y* locations, depending on their relation to the “sweet
    spot” pointed out in the figure. Points with a *y* value greater than 5 are marked
    with a purple ×; points with a *y* value less than −5 are marked with a green
    +. Points between these two *y* values but still outside of the sweet spot are
    marked with a ○. Finally, points in the sweet spot (with *x* between 5 and 15
    *and* with *y* between −5 and 5) are marked as a blue •. Red horizontal and vertical
    lines delineate the sweet spot, which is labeled with an arrow, and there’s also
    a legend.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 7-6](ch07.xhtml#ch7fig6)中，数据点将根据它们的 *x* 和 *y* 位置进行不同的绘制，具体取决于它们与图中指出的“甜点”位置的关系。*y*
    值大于 5 的点用紫色 × 标记；*y* 值小于 −5 的点用绿色 + 标记。位于这两个 *y* 值之间但仍位于甜点之外的点用 ○ 标记。最后，位于甜点中的点（*x*
    在 5 到 15 之间 *且* *y* 在 −5 到 5 之间）用蓝色 • 标记。红色的水平和垂直线划定了甜点区域，并用箭头标出，同时也有一个图例。
- en: Ten lines of code were used to build this plot in its entirety (plus one additional
    line to add the legend). The plot, as it looks at each step, is given in [Figure
    7-7](ch07.xhtml#ch7fig7). The lines of code are detailed next.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 用了十行代码来完整构建这个图形（再加上一行代码来添加图例）。该图形的每个步骤的样式可以参见[图 7-7](ch07.xhtml#ch7fig7)。接下来将详细介绍这些代码行。
- en: The first step is to create the empty plotting region where you can add points
    and draw lines. This first line tells R to plot the data in `x` and `y`, though
    the option `type` is set to `"n"`. As mentioned in [Section 7.2](ch07.xhtml#ch07lev1sec24),
    this opens or refreshes the graphics device and sets the axes to the appropriate
    lengths (with labels and axes), but it doesn’t plot any points or lines.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是创建一个空的绘图区域，你可以在其中添加点和绘制线条。这一行代码告诉 R 绘制 `x` 和 `y` 的数据，尽管 `type` 选项被设置为 `"n"`。如[第
    7.2 节](ch07.xhtml#ch07lev1sec24)所述，这将打开或刷新图形设备，并将坐标轴设置为适当的长度（带有标签和坐标轴），但不会绘制任何点或线。
- en: '[PRE8]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `abline` function is a simple way to add straight lines spanning a plot.
    The line (or lines) can be specified with *slope* and *intercept* values (see
    the later discussions on regression in [Chapter 20](ch20.xhtml#ch20)). You can
    also simply add horizontal or vertical lines. This line of code adds two separate
    horizontal lines, one at *y* = 5 and the other at *y* = 5, using `h=c(-5,5)`.
    The three parameters (covered in [Section 7.2](ch07.xhtml#ch07lev1sec24)) make
    these two lines red, dashed, and double-thickness. For vertical lines, you could
    have written `v=c(-5,5)`, which would have drawn them at *x* = −5 and *x* = 5.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`abline` 函数是一种简单的方式，用于在图形中添加跨越整个图形的直线。线条（或线条们）可以通过 *斜率* 和 *截距* 值来指定（详见后续在[第
    20 章](ch20.xhtml#ch20)中的回归讨论）。你也可以简单地添加水平或垂直线。这行代码添加了两条单独的水平线，一条在 *y* = 5，另一条在
    *y* = 5，使用 `h=c(-5,5)`。这三个参数（在[第 7.2 节](ch07.xhtml#ch07lev1sec24)中讲解过）使得这两条线为红色、虚线且具有双重厚度。对于垂直线，你也可以写
    `v=c(-5,5)`，这将在 *x* = −5 和 *x* = 5 处绘制它们。'
- en: '![image](../images/f07-07.jpg)'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f07-07.jpg)'
- en: '*Figure 7-7: Building the final plot given in [Figure 7-6](ch07.xhtml#ch7fig6).
    The plots (1) through (10) correspond to the itemized lines of code in the text.*'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 7-7：根据[图 7-6](ch07.xhtml#ch7fig6)给出的最终绘图构建过程。图中的（1）到（10）对应文本中逐项列出的代码行。*'
- en: '[PRE9]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The third line of code adds shorter vertical lines between the horizontal ones
    drawn in step 2 to form a box. For this you use `segments`, not `abline`, since
    you don’t want these lines to span the entire plotting region. The `segments`
    command takes a “from” coordinate (given as `x0` and `y0`) and a “to” coordinate
    (as `x1` and `y1`) and draws the corresponding line. The vector-oriented behavior
    of R matches up the two sets of “from” and “to” coordinates. Both lines are red
    and dotted and have double-thickness. (You could also supply vectors of length
    2 to these parameters, in which case the first segment would use the first parameter
    value and the second segment would use the second value.)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码的第三行在步骤 2 绘制的水平线之间添加了较短的垂直线，以形成一个框。为此，使用 `segments` 而不是 `abline`，因为你不希望这些线跨越整个绘图区域。`segments`
    命令接受一个“起点”坐标（以 `x0` 和 `y0` 表示）和一个“终点”坐标（以 `x1` 和 `y1` 表示），并绘制相应的线。R 的矢量化行为将两组“起点”和“终点”坐标配对。两条线均为红色、虚线且具有双重厚度。（你也可以将长度为
    2 的向量传递给这些参数，在这种情况下，第一个段落将使用第一个参数值，第二个段落将使用第二个值。）
- en: '[PRE10]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As step 4, you use `points` to begin adding specific coordinates from `x` and
    `y` to the plot. Just like `plot`, `points` takes two vectors of equal lengths
    with *x* and *y* values. In this case, you want points plotted differently according
    to their location, so you use logical vector subsetting (see [Section 4.1.5](ch04.xhtml#ch04lev2sec41))
    to identify and extract elements of `x` and `y` where the *y* value is greater
    than or equal to 5\. These (and only these) points are added as purple × symbols
    and are enlarged by a factor of 2 with `cex`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第四步，使用`points`开始将特定坐标从`x`和`y`添加到图中。与`plot`一样，`points`需要两个具有相等长度的向量，分别包含*x*和*y*值。在这种情况下，你希望根据位置不同绘制不同的点，因此使用逻辑向量子集（参见[第4.1.5节](ch04.xhtml#ch04lev2sec41)）来识别并提取那些*y*值大于或等于5的`x`和`y`元素。这些（且仅这些）点将作为紫色的×符号添加，并通过`cex`放大2倍。
- en: '[PRE11]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The fifth line of code is much like the fourth; this time it extracts the coordinates
    where *y* values are less than or equal to −5\. A + point character is used, and
    you set the color to dark green.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第五行代码与第四行非常相似；这一次，它提取了那些*y*值小于或等于−5的坐标。使用的是+点字符，并且颜色设置为深绿色。
- en: '[PRE12]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The sixth step adds the blue “sweet spot” points, which are identified with
    `(x>=5&x<=15)&(y>-5&y<5)`. This slightly more complicated set of conditions extracts
    the points whose *x* location lies between 5 and 15 (inclusive) AND whose *y*
    location lies between −5 and 5 (exclusive). Note that this line uses the “short”
    form of the logical operator `&` throughout since you want element-wise comparisons
    here (see [Section 4.1.3](ch04.xhtml#ch04lev2sec39)).
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第六步添加了蓝色的“甜蜜点”坐标，这些点的条件为`(x>=5&x<=15)&(y>-5&y<5)`。这一稍微复杂的条件集提取了那些*x*值介于5到15（包含5和15）之间，且*y*值介于−5到5（不包括−5和5）之间的点。请注意，这一行使用了逻辑操作符`&`的“简短”形式，因为你希望进行逐元素比较（参见[第4.1.3节](ch04.xhtml#ch04lev2sec39)）。
- en: '[PRE13]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This next command identifies the remaining points in the data set (with an *x*
    value that is either less than 5 OR greater than 15 AND a *y* value between −5
    and 5). No graphical parameters are specified, so these points are plotted with
    the default black ○.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的命令识别数据集中其*x*值小于5或大于15，且*y*值介于−5和5之间的剩余点。没有指定图形参数，因此这些点会以默认的黑色○符号绘制。
- en: '[PRE14]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: To draw lines connecting the coordinates in `x` and `y`, you use `lines`. Here
    you’ve also set `lty` to `4`, which draws a dash-dot-dash style line.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了连接`x`和`y`中的坐标，你使用`lines`。在这里，你还将`lty`设置为`4`，这会绘制一个点划线样式的线条。
- en: '[PRE15]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The ninth line of code adds the arrow pointing to the sweet spot. The function
    `arrows` is used just like `segments`, where you provide a “from” coordinate (`x0`,
    `y0`) and a “to” coordinate (`x1`, `y1`). By default, the head of the arrow is
    located at the “to” coordinate, though this (and other options such as the angle
    and length of the head) can be altered using optional arguments described in the
    help file `?arrows`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第九行代码添加指向最佳位置的箭头。`arrows`函数的用法与`segments`相似，你需要提供“起始”坐标（`x0`，`y0`）和“终点”坐标（`x1`，`y1`）。默认情况下，箭头的箭头头部位于“终点”坐标处，尽管可以通过帮助文件`?arrows`中描述的可选参数修改这一点（以及箭头头部的角度和长度等其他选项）。
- en: '[PRE16]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The tenth line prints a label on the plot at the top of the arrow. As per the
    default behavior of `text`, the string supplied as `labels` is *centered* on the
    coordinates provided with the arguments `x` and `y`.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第十行代码在箭头顶部的图表上打印标签。根据`text`的默认行为，作为`labels`提供的字符串会在`x`和`y`提供的坐标上*居中*显示。
- en: '[PRE17]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As a finishing touch, you can add the legend with the `legend` function, which
    gives you the final product shown in [Figure 7-6](ch07.xhtml#ch7fig6).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以使用`legend`函数添加图例，这会生成[图7-6](ch07.xhtml#ch7fig6)中所示的最终效果。
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The first argument sets where the legend should be placed. There are various
    ways to do this (including setting exact *x*- and *y*-coordinates), but it often
    suffices to pick a corner using one of the four following character strings: `"topleft"`,
    `"topright"`, `"bottomleft"`, or `"bottomright"`. Next you supply the labels as
    a vector of character strings to the `legend` argument. Then you need to supply
    the remaining argument values in vectors of the same length so that the right
    elements match up with each label.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数设置图例的显示位置。有多种方法可以做到这一点（包括设置确切的*x*和*y*坐标），但通常只需要选择一个角落，使用以下四个字符串之一即可：`"topleft"`、`"topright"`、`"bottomleft"`或`"bottomright"`。接下来，你需要将标签作为字符向量传递给`legend`参数。然后，你需要为剩余的参数提供与标签长度相同的向量，这样正确的元素就能与每个标签匹配。
- en: For example, for the first label (`"overall process"`), you want a line of type
    4 with default thickness and color. So, in the first positions of the remaining
    argument vectors, you set `pch=NA`, `lty=4`, `col="black"`, `lwd=1`, and `pt.cex=NA`
    (all of these are default values, except for `lty`). Here, `pt.cex` simply refers
    to the `cex` parameter when calling `points` (using just `cex` in `legend` would
    expand the text used, not the points).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于第一个标签（`"overall process"`），您希望使用默认粗细和颜色为4类型的一条线。因此，在剩余参数向量的第一个位置上，您设置`pch=NA`，`lty=4`，`col="black"`，`lwd=1`和`pt.cex=NA`（所有这些都是默认值，除了`lty`）。这里，`pt.cex`
    只是在调用 `points` 时使用 `cex` 参数（在 `legend` 中使用 `cex` 会扩展使用的文本，而不是点）。
- en: Note that you have to fill in some elements in these vectors with `NA` when
    you don’t want to set the corresponding graphical parameter. This is just to preserve
    the equal lengths of the vectors supplied so R can track which parameter values
    correspond to each particular reference. As you work through this book, you’ll
    see plenty more examples using `legend`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当您不希望设置相应的图形参数时，必须在这些向量中的某些元素中填写 `NA`。这只是为了保持所提供的向量的等长，以便 R 可以跟踪每个特定参考的参数值。当您阅读本书时，您将看到更多使用
    `legend` 的示例。
- en: '**Exercise 7.1**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 7.1**'
- en: 'As closely as you can, re-create the following plot:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽可能地重新创建以下图形：
- en: '![image](../images/f0139-01.jpg)'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图像](../images/f0139-01.jpg)'
- en: With the following data, create a plot of weight on the *x*-axis and height
    on the *y*-axis. Use different point characters or colors to distinguish between
    males and females and provide a matching legend. Label the axes and give the plot
    a title.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下数据，在 *x* 轴上创建体重图，*y* 轴上创建身高图。使用不同的点字符或颜色来区分男性和女性，并提供匹配的图例。标记坐标轴并为图形添加标题。
- en: '| **Weight (kg)** | **Height (cm)** | **Sex** |'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **体重（kg）** | **身高（cm）** | **性别** |'
- en: '| --- | --- | --- |'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 55 | 161 | female |'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 55 | 161 | 女性 |'
- en: '| 85 | 185 | male |'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 85 | 185 | 男性 |'
- en: '| 75 | 174 | male |'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 75 | 174 | 男性 |'
- en: '| 42 | 154 | female |'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 42 | 154 | 女性 |'
- en: '| 93 | 188 | male |'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 93 | 188 | 男性 |'
- en: '| 63 | 178 | male |'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 63 | 178 | 男性 |'
- en: '| 58 | 170 | female |'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 58 | 170 | 女性 |'
- en: '| 75 | 167 | male |'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 75 | 167 | 男性 |'
- en: '| 89 | 181 | male |'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 89 | 181 | 男性 |'
- en: '| 67 | 178 | female |'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 67 | 178 | 女性 |'
- en: '**7.4 The ggplot2 Package**'
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**7.4 ggplot2 软件包**'
- en: 'This chapter so far has shown off R’s built-in graphical tools (often called
    *base R graphics* or *traditional R graphics*). Now, let’s look at another important
    suite of graphical tools: `ggplot2`, a prominent contributed package by Hadley
    Wickham ([2009](ref.xhtml#ref72)). Available on CRAN like any other contributed
    package, `ggplot2` offers particularly powerful alternatives to the standard plotting
    procedures in R. The *gg* stands for *grammar of graphics*—a particular approach
    to graphical production described by Wilkinson ([2005](ref.xhtml#ref75)). In following
    this approach, `ggplot2` standardizes the production of different plot and graph
    types, streamlines some of the more fiddly aspects of adding to existing plots
    (such as including a legend), and lets you build plots by defining and manipulating
    *layers*. For the moment, let’s see the elementary behavior of `ggplot2` using
    the same simple examples in [Sections 7.1](ch07.xhtml#ch07lev1sec23)–[7.3](ch07.xhtml#ch07lev1sec25).
    You’ll get familiar with the basic plotting function `qplot` and how it differs
    from the generic `plot` function used earlier. I’ll return to the topic of `ggplot2`
    when I cover statistical plots in [Chapter 14](ch14.xhtml#ch14), and you’ll investigate
    even more advanced abilities in [Chapter 24](ch24.xhtml#ch24).'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本章展示了 R 的内置图形工具（通常称为 *基础 R 图形* 或 *传统 R 图形*）。现在，让我们看看另一个重要的图形工具套件：`ggplot2`，这是由
    Hadley Wickham（[2009](ref.xhtml#ref72)）开发的一个知名的贡献包。像任何其他贡献包一样，`ggplot2` 在 CRAN
    上提供强大的替代标准绘图程序。*gg* 代表 *图形语法* —— 图形生成的一种特定方法，由 Wilkinson（[2005](ref.xhtml#ref75)）描述。遵循这种方法，`ggplot2`
    标准化了不同绘图类型的生成，简化了向现有图形添加一些棘手的方面（例如包含图例），并允许您通过定义和操作 *层* 来构建图形。暂时，让我们使用 [第 7.1
    节](ch07.xhtml#ch07lev1sec23)–[第 7.3 节](ch07.xhtml#ch07lev1sec25) 中相同的简单示例来了解 `ggplot2`
    的基本行为。您将熟悉基本的绘图函数 `qplot` 及其与之前使用的通用 `plot` 函数的区别。在 [第 14 章](ch14.xhtml#ch14)
    中讨论统计图时，我将回到 `ggplot2` 的话题，并在 [第 24 章](ch24.xhtml#ch24) 中探索更多高级功能。
- en: '***7.4.1 A Quick Plot with qplot***'
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***7.4.1 使用 qplot 快速绘图***'
- en: 'First, you must install the `ggplot2` package by downloading it manually or
    simply entering `install.packages("ggplot2")` at the prompt (see [Section A.2.3](app01.xhtml#app01lev2sec275)).
    Then, load the package with the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你必须通过手动下载或直接在提示符下输入`install.packages("ggplot2")`来安装`ggplot2`包（参见[第A.2.3节](app01.xhtml#app01lev2sec275)）。然后，使用以下命令加载该包：
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now, let’s go back to the five data points originally stored in [Section 7.1](ch07.xhtml#ch07lev1sec23)
    as `foo` and `bar`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回到最初存储在[第7.1节](ch07.xhtml#ch7lev1sec23)中的五个数据点`foo`和`bar`。
- en: '[PRE20]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You can produce `ggplot2`’s version of [Figure 7-1](ch07.xhtml#ch7fig1) using
    its “quick plot” function `qplot`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`ggplot2`的“快速绘图”函数`qplot`生成[图7-1](ch07.xhtml#ch7fig1)的版本。
- en: '[PRE21]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The result is shown in the left image of [Figure 7-8](ch07.xhtml#ch7fig8). There
    are some obvious differences between this image and the one produced using `plot`,
    but the basic syntax of `qplot` is the same as earlier. The first two arguments
    passed to `qplot` are vectors of equal length, with the *x*-coordinates in `foo`
    supplied first, followed by the *y*-coordinates in `bar`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示在[图7-8](ch07.xhtml#ch7fig8)的左图中。这个图像与使用`plot`生成的图像有一些明显的不同，但`qplot`的基本语法与之前相同。传递给`qplot`的前两个参数是长度相等的向量，`foo`中的*x*坐标首先给出，接着是`bar`中的*y*坐标。
- en: '![image](../images/f07-08.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f07-08.jpg)'
- en: '*Figure 7-8: Five plotted points using* `ggplot2`*’s default behavior for the*
    `qplot` *function (left) and with title and axis labels added (right)*'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-8：使用`ggplot2`默认行为绘制的五个数据点*`qplot`*函数（左图）和添加标题及轴标签后的版本（右图）*'
- en: Adding a title and axis labels also uses the same arguments you already saw
    with `plot` in [Section 7.2](ch07.xhtml#ch07lev1sec24).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 添加标题和轴标签也使用了你在[第7.2节](ch07.xhtml#ch07lev1sec24)中已经看到的相同参数。
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This produces the right panel of [Figure 7-8](ch07.xhtml#ch7fig8).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成[图7-8](ch07.xhtml#ch7fig8)的右面板。
- en: 'Underneath this basic similarity in syntax, though, there is a fundamental
    difference between how `ggplot2` and base R graphics create plots. Constructing
    plots using the built-in graphics tools is essentially a live, step-by-step process.
    This was particularly noticeable in [Section 7.3](ch07.xhtml#ch07lev1sec25), where
    you treated the graphics device as an active canvas where you added points, lines,
    and other features one by one. By contrast, `ggplot2` plots are stored as objects,
    which means they have an underlying, static representation until you *change*
    the object—what you essentially visualize with `qplot` is the `print`ed object
    at any given time. To highlight this, enter the following code:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在语法上有这种基本的相似性，但`ggplot2`和基础R图形创建图形的方式有着根本的区别。使用内置图形工具构建图形本质上是一个实时、逐步的过程。特别是在[第7.3节](ch07.xhtml#ch07lev1sec25)中，这一点尤为明显，当时你将图形设备视为一个活跃的画布，逐个添加点、线及其他特征。相比之下，`ggplot2`图形是作为对象存储的，这意味着它们有一个潜在的、静态的表示，直到你*更改*该对象——实际上，你通过`qplot`可视化的是任何给定时刻的`print`ed对象。为强调这一点，输入以下代码：
- en: '[PRE23]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The first assignment uses the built-in `plot` function. When you run that line
    of code, the plot in [Figure 7-1](ch07.xhtml#ch7fig1) pops up. Since nothing is
    actually stored in the workspace, printing the supposed object `baz` yields the
    empty `NULL` value. On the other hand, it makes sense to store the `qplot` content
    (stored as the object `qux` here). This time, when you perform the assignment,
    no plot is displayed. The graphic, which matches [Figure 7-8](ch07.xhtml#ch7fig8),
    is displayed only when you enter `qux` at the prompt, which invokes the `print`
    method for that object. This may seem like a minor point, but the fact that you
    can save a plot this way before displaying it opens up new ways to modify or enhance
    plots before displaying them (as you will see in a moment), and it can be a distinct
    advantage over base R graphics.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个赋值使用了内置的`plot`函数。当你运行那行代码时，[图7-1](ch07.xhtml#ch7fig1)中的图形会弹出。由于没有实际存储在工作空间中，打印假定的对象`baz`将返回空值`NULL`。另一方面，将`qplot`的内容存储起来（这里存储为对象`qux`）是有意义的。这次，进行赋值时不会显示图形。只有当你在提示符下输入`qux`时，才会显示图形，它调用该对象的`print`方法。这个看似微不足道的细节，实际上通过这种方式保存图形，可以在显示之前修改或增强图形（正如你稍后将看到的那样），并且它相较于基础R图形来说是一个明显的优势。
- en: '***7.4.2 Setting Appearance Constants with Geoms***'
  id: totrans-130
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***7.4.2 使用Geoms设置外观常量***'
- en: 'To add and customize points and lines in a `ggplot2` graphic, you alter the
    object itself, rather than using a long list of arguments or secondary functions
    executed separately (such as `points` or `lines`). You can modify the object using
    `ggplot2`’s convenient suite of *geometric modifiers*, known as *geoms*. Let’s
    say you want to connect the five points in `foo` and `bar` with a line, just as
    you did in [Section 7.1](ch07.xhtml#ch07lev1sec23). You can first create a blank
    plot object and then use geometric modifiers on it like this:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要在`ggplot2`图形中添加和自定义点和线，你需要修改对象本身，而不是使用冗长的参数列表或单独执行的辅助函数（如`points`或`lines`）。你可以使用`ggplot2`方便的*几何修改器*，也称为*geoms*，来修改对象。假设你想像在[第7.1节](ch07.xhtml#ch07lev1sec23)中那样连接`foo`和`bar`中的五个点，你可以首先创建一个空白的图形对象，然后像这样使用几何修改器：
- en: '[PRE24]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The resulting plot is shown on the left of [Figure 7-9](ch07.xhtml#ch7fig9).
    In the first call to `qplot`, you create an empty plot object by setting the initial
    geometric modifier as `geom="blank"` (if you displayed this plot, you would just
    see the gray background and the axes). Then you layer on the two other geoms as
    `geom_point()` and `geom_line()`. As indicated by the parentheses, these geoms
    are functions that result in their own specialized objects. You can add geoms
    to the `qplot` object using the `+` operator. Here, you haven’t supplied any arguments
    to either geom, which means they’ll operate on the same data originally supplied
    to `qplot` (`foo` and `bar`) and they’ll stick to the default settings for any
    other features, such as color or point/line type. You can control those features
    by specifying optional arguments, as shown here:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 结果图像显示在[图7-9](ch07.xhtml#ch7fig9)的左侧。在第一次调用`qplot`时，你通过设置初始几何修改器为`geom="blank"`来创建一个空的图形对象（如果显示该图形，你将只看到灰色背景和坐标轴）。然后，你将另外两个几何图形`geom_point()`和`geom_line()`叠加上去。如括号所示，这些几何图形是函数，它们产生自己的专门对象。你可以通过`+`运算符将几何图形添加到`qplot`对象中。在这里，你没有为任何几何图形提供参数，这意味着它们将使用最初提供给`qplot`的数据（`foo`和`bar`），并且会遵循任何其他特性的默认设置，如颜色或点/线类型。你可以通过指定可选参数来控制这些特性，如下所示：
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![image](../images/f07-09.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f07-09.jpg)'
- en: '*Figure 7-9: Two simple plots that use geometric modifiers to alter the appearance
    of a* `qplot` *object. Left: Adding points and lines using default settings. Right:
    Using the geoms to affect point character, size, and color, and line type and
    color.*'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-9：使用几何修改器来改变`qplot`对象外观的两个简单图形。左：使用默认设置添加点和线。右：使用几何图形影响点的字符、大小和颜色，以及线条类型和颜色。*'
- en: Note that some of `ggplot2`’s argument names used here for things such as point
    characters and size (`shape` and `size`) are different from the base R graphics
    arguments (`pch` and `cex`). But `ggplot2` is actually compatible with many of
    the common graphical parameters used in R’s standard `plot` function, so you can
    use those arguments here too if you prefer. For instance, setting `cex=3` and
    `pch=6` in `geom_point` in this example would result in the same image.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里使用的`ggplot2`的一些参数名称，如点的字符和大小（`shape`和`size`），与基础R图形中的参数名称（`pch`和`cex`）不同。但`ggplot2`实际上与R标准`plot`函数中使用的许多常见图形参数兼容，因此如果你更喜欢，也可以在此使用那些参数。例如，在此示例中，将`cex=3`和`pch=6`设置在`geom_point`中将会得到相同的图像。
- en: The object-oriented nature of `ggplot2` graphics means tweaking a plot or experimenting
    with different visual features no longer requires you to rerun every plotting
    command each time you change something. This is facilitated by geoms. Say you
    like the line type used on the right side of [Figure 7-9](ch07.xhtml#ch7fig9)
    but want a different point character. To experiment, you could first store the
    `qplot` object you created earlier and then use `geom_point` with that object
    to try different point styles.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`ggplot2`图形的面向对象特性意味着调整图形或尝试不同的视觉特性不再需要每次更改内容时重新运行所有绘图命令。这是通过几何图形（geoms）实现的。假设你喜欢[图7-9](ch07.xhtml#ch7fig9)右侧使用的线条类型，但希望使用不同的点字符。为了尝试，你可以首先存储之前创建的`qplot`对象，然后使用`geom_point`与该对象一起尝试不同的点样式。'
- en: '[PRE26]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The first line stores the original plot in `myqplot`, and the next lines call
    `myqplot` with different point shapes. The second and third lines produce the
    graphics on the left and right of [Figure 7-10](ch07.xhtml#ch7fig10), respectively.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行将原始图形存储在`myqplot`中，接下来的几行调用`myqplot`并使用不同的点形状。第二行和第三行分别生成[图7-10](ch07.xhtml#ch7fig10)左侧和右侧的图形。
- en: '![image](../images/f07-10.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f07-10.jpg)'
- en: '*Figure 7-10: Using the object-oriented nature of* `ggplot2` *graphics to experiment
    with different point characters*'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-10：利用* `ggplot2` *图形的面向对象特性来尝试不同的点形状*'
- en: There are a number of geometric modifiers that can be called using a function
    name beginning with `geom_` in `ggplot2`. To obtain a list, simply ensure the
    package is loaded and enter `??"geom_"` as a help search at the prompt.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ggplot2`中，有许多几何修饰符可以通过以`geom_`开头的函数名称调用。要获取列表，只需确保加载了该包，并在提示符下输入`??"geom_"`进行帮助搜索。
- en: '***7.4.3 Aesthetic Mapping with Geoms***'
  id: totrans-144
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***7.4.3 美学映射与Geoms***'
- en: Geoms and `ggplot2` also provide efficient, automated ways to apply different
    styles to different subsets of a plot. If you split a data set into categories
    using a factor object, `ggplot2` can automatically apply particular styles to
    different categories. In `ggplot2`’s documentation, the factor that holds these
    categories is called a *variable*, which `ggplot2` can *map* to *aesthetic* values.
    This gets rid of much of the effort that goes into isolating subsets of data and
    plotting them separately using base R graphics (as you did in [Section 7.3](ch07.xhtml#ch07lev1sec25)).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Geoms 和`ggplot2`还提供了高效的自动化方法，将不同的样式应用于图表的不同子集。如果你使用因子对象将数据集拆分成类别，`ggplot2`可以自动将特定样式应用于不同的类别。在`ggplot2`的文档中，保存这些类别的因子被称为*变量*，`ggplot2`可以将其*映射*到*美学*值。这消除了许多使用基本R图形将数据子集隔离并单独绘制的工作（就像你在[第7.3节](ch07.xhtml#ch07lev1sec25)中做的那样）。
- en: All this is best illustrated with an example. Let’s return to the 20 observations
    you manually plotted, step-by-step, to produce the elaborate plot in [Figure 7-6](ch07.xhtml#ch7fig6).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些最好通过一个例子来说明。让我们回到你手动绘制的20个观察值，逐步生成[图7-6](ch07.xhtml#ch7fig6)中的精美图表。
- en: '[PRE27]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In [Section 7.3](ch07.xhtml#ch07lev1sec25), you defined several categories that
    classified each observation as either “standard,” “sweet,” “too big,” or “too
    small” based on their `x` and `y` values. Using those same classification rules,
    let’s explicitly define a factor to correspond to `x` and `y`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7.3节](ch07.xhtml#ch07lev1sec25)中，你定义了几个类别，将每个观察值根据其`x`和`y`值分类为“标准”，“甜美”，“过大”或“过小”。使用相同的分类规则，让我们显式地定义一个因子来对应`x`和`y`。
- en: '[PRE28]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now you have a factor with 20 values sorted into four levels. You’ll use this
    factor to tell `qplot` how to map your aesthetics. Here’s a simple way to do that:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有一个包含20个值的因子，并将这些值排序为四个层级。你将使用这个因子来告诉`qplot`如何映射你的美学属性。下面是一个简单的方法：
- en: '[PRE29]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This single line of code produces the left plot in [Figure 7-11](ch07.xhtml#ch7fig11),
    which separates the four categories by color and point character and even provides
    a legend. This was all done by the aesthetic mapping in the call to `qplot`, where
    you set `color` and `shape` to be mapped to the `ptype` variable.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行代码生成了[图7-11](ch07.xhtml#ch7fig11)中的左侧图表，该图表通过颜色和点形状分隔了四个类别，并提供了图例。这一切都是通过在`qplot`调用中的美学映射完成的，你在其中将`color`和`shape`映射到`ptype`变量。
- en: '![image](../images/f07-11.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f07-11.jpg)'
- en: '*Figure 7-11: Demonstration of aesthetic mapping using* `qplot` *and geoms
    in* `ggplot2`*. Left: The initial call to* `qplot`*, which maps point character
    and color using* `ptype`*. Right: Augmenting the left plot using various geoms
    to override the default mappings.*'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-11：使用* `qplot` *和geoms演示美学映射在* `ggplot2` *中的应用。左：初始调用的* `qplot`*，它使用* `ptype`*映射点形状和颜色。右：通过各种geoms增强左侧图表，以覆盖默认映射。*'
- en: 'Now, let’s replot these data using the same `qplot` object along with a suite
    of geom modifications in order to get something more like [Figure 7-6](ch07.xhtml#ch7fig6).
    Executing the following produces the plot on the right of [Figure 7-11](ch07.xhtml#ch7fig11):'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用相同的`qplot`对象和一系列的geom修饰来重新绘制这些数据，以获得更像[图7-6](ch07.xhtml#ch7fig6)的结果。执行以下代码会生成[图7-11](ch07.xhtml#ch7fig11)右侧的图表：
- en: '[PRE30]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the first line, you add `geom_point(size=4)` to increase the size of all
    the points on the graph. In the lines that follow, you add a line connecting all
    the points, plus horizontal and vertical lines to mark out the sweet spot. For
    those last four lines, you have to use `aes` to set alternate aesthetic mappings
    for the point categories. Let’s look a little closer at what’s going on there.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行中，你添加了`geom_point(size=4)`来增大图中所有点的大小。接下来的几行中，你添加了一条连接所有点的线，并加上了水平和垂直线来标出最佳点。在最后四行中，你必须使用`aes`来设置点类别的替代美学映射。让我们仔细看看这里发生了什么。
- en: Since you used `ptype` for aesthetic mapping in the initial call to `qplot`,
    by default all other geoms will be mapped to each category in the same way, *unless*
    you override that default mapping with `aes`. For example, when you call `geom_line`
    to connect all the points, if you were to stick with the default mapping to `ptype`
    instead of including `mapping=aes(group=1)`, this geom would draw lines connecting
    points within each category. You would see four separate dashed lines—one connecting
    all “standard” points, another connecting all “sweet” points, and so on. But that’s
    not what you want here; you want a line that connects all of the points, from
    left to right. So, you tell `geom_line` to treat all the observations as one group
    by entering `aes(group=1)`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你在初始调用`qplot`时使用了`ptype`进行美学映射，默认情况下，所有其他几何体将按照相同方式映射到每个类别，*除非*你通过`aes`覆盖了该默认映射。例如，当你调用`geom_line`连接所有点时，如果你坚持使用默认的`ptype`映射，而没有包括`mapping=aes(group=1)`，那么这个几何体将绘制连接每个类别内的点的线条。你将看到四条独立的虚线——一条连接所有“标准”点，另一条连接所有“甜美”点，以此类推。但这不是你在这里想要的；你希望绘制一条从左到右连接所有点的线。所以，你告诉`geom_line`通过输入`aes(group=1)`将所有观察值视为一个组。
- en: After that, you use the `geom_hline` function to draw horizontal lines at *y*
    = −5 and *y* = 5 using its `yintercept` argument, again passed to `aes` to redefine
    that geom’s `mapping`. In this case, you need to redefine the mapping to operate
    on the vector `c(-5,5)`, rather than using the observed data in `x` and `y`. Similarly,
    you end by using `geom_segment` to draw the two vertical dotted line segments.
    `geom_segment` operates much like `segments`—you redefine the mapping based on
    a “from” coordinate (arguments `x` and `y`) and a “to” coordinate (`xend` and
    `yend` here). Since the first geom, `geom_point(size=4)`, sets a constant enlarged
    size for every plotted point, it doesn’t matter how the geom is mapped because
    it simply makes a uniform change to each point.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 此后，你使用`geom_hline`函数绘制了*y* = −5和*y* = 5的水平线，使用它的`yintercept`参数，参数再次传递给`aes`来重新定义该几何体的`mapping`。在这种情况下，你需要重新定义映射，使其作用于向量`c(-5,5)`，而不是使用观察数据中的`x`和`y`。类似地，你最后使用`geom_segment`绘制了两条垂直的虚线段。`geom_segment`的操作方式与`segments`非常相似——你根据“起始”坐标（`x`和`y`参数）和“结束”坐标（这里的`xend`和`yend`参数）重新定义映射。由于第一个几何体`geom_point(size=4)`为每个绘制的点设置了固定的放大尺寸，因此不管几何体如何映射，都无关紧要，因为它只是对每个点进行了统一的大小调整。
- en: Plotting in R, from base graphics to contributed packages like `ggplot2`, stays
    true to the nature of the language. The element-wise matching allows you to create
    intricate plots with a handful of straightforward and intuitive functions. Once
    you display a plot, you can save it to the hard drive by selecting the graphics
    device and choosing File → Save. However, you can also write plots to a file directly,
    as you’ll see momentarily in [Section 8.3](ch08.xhtml#ch08lev1sec29).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在R中绘图，从基础图形到像`ggplot2`这样的贡献包，都忠实于语言的本质。逐元素匹配使得你能够通过少量直观而简单的函数创建复杂的图形。显示图形后，你可以通过选择图形设备并选择“文件”→“保存”来将其保存到硬盘。不过，你也可以直接将图形写入文件，正如你稍后将在[第8.3节](ch08.xhtml#ch08lev1sec29)看到的那样。
- en: The graphical capabilities explored in this section are merely the tip of the
    iceberg, and you’ll continue to use data visualizations from this point onward.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 本节探索的图形功能只是冰山一角，从现在开始，你将继续使用数据可视化。
- en: '**Exercise 7.2**'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习7.2**'
- en: In [Exercise 7.1](ch07.xhtml#ch7exc1) (b), you used base R graphics to plot
    some weight and height data, distinguishing males and females using different
    points or colors. Repeat this task using `ggplot2`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在[练习7.1](ch07.xhtml#ch7exc1)(b)中，你使用了基础R图形绘制了一些体重和身高数据，使用不同的点或颜色区分了男性和女性。请使用`ggplot2`重复此任务。
- en: '**Important Code in This Chapter**'
  id: totrans-164
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**本章重要代码**'
- en: '| **Function/operator** | **Brief description** | **First occurrence** |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| **函数/操作符** | **简要描述** | **首次出现** |'
- en: '| --- | --- | --- |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `plot` | Create/display base R plot | [Section 7.1](ch07.xhtml#ch07lev1sec23),
    [p. 128](ch07.xhtml#page_128) |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| `plot` | 创建/显示基础R图形 | [第7.1节](ch07.xhtml#ch07lev1sec23)，[第128页](ch07.xhtml#page_128)
    |'
- en: '| `type` | Set plot type | [Section 7.2.1](ch07.xhtml#ch07lev2sec63), [p. 130](ch07.xhtml#page_130)
    |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| `type` | 设置图形类型 | [第7.2.1节](ch07.xhtml#ch07lev2sec63)，[第130页](ch07.xhtml#page_130)
    |'
- en: '| `main`, `xlab`, `ylab` | Set axis labels | [Section 7.2.2](ch07.xhtml#ch07lev2sec64),
    [p. 130](ch07.xhtml#page_130) |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| `main`, `xlab`, `ylab` | 设置坐标轴标签 | [第7.2.2节](ch07.xhtml#ch07lev2sec64)，[第130页](ch07.xhtml#page_130)
    |'
- en: '| `col` | Set point/line color | [Section 7.2.3](ch07.xhtml#ch07lev2sec65),
    [p. 131](ch07.xhtml#page_131) |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `col` | 设置点/线颜色 | [第7.2.3节](ch07.xhtml#ch07lev2sec65)，[第131页](ch07.xhtml#page_131)
    |'
- en: '| `pch`, `cex` | Set point type/size | [Section 7.2.4](ch07.xhtml#ch07lev2sec66),
    [p. 133](ch07.xhtml#page_133) |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `pch`, `cex` | 设置点的类型/大小 | [第7.2.4节](ch07.xhtml#ch07lev2sec66), [第133页](ch07.xhtml#page_133)
    |'
- en: '| `lty`, `lwd` | Set line type/width | [Section 7.2.4](ch07.xhtml#ch07lev2sec66),
    [p. 133](ch07.xhtml#page_133) |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `lty`, `lwd` | 设置线型/线宽 | [第7.2.4节](ch07.xhtml#ch07lev2sec66), [第133页](ch07.xhtml#page_133)
    |'
- en: '| `xlim`, `ylim` | Set plot region limits | [Section 7.2.5](ch07.xhtml#ch07lev2sec67),
    [p. 134](ch07.xhtml#page_134) |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `xlim`, `ylim` | 设置绘图区域的限制 | [第7.2.5节](ch07.xhtml#ch07lev2sec67), [第134页](ch07.xhtml#page_134)
    |'
- en: '| `abline` | Add vertical/horizontal line | [Section 7.3](ch07.xhtml#ch07lev1sec25),
    [p. 137](ch07.xhtml#page_137) |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `abline` | 添加垂直/水平线 | [第7.3节](ch07.xhtml#ch07lev1sec25), [第137页](ch07.xhtml#page_137)
    |'
- en: '| `segments` | Add specific line segments | [Section 7.3](ch07.xhtml#ch07lev1sec25),
    [p. 137](ch07.xhtml#page_137) |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `segments` | 添加特定的线段 | [第7.3节](ch07.xhtml#ch07lev1sec25), [第137页](ch07.xhtml#page_137)
    |'
- en: '| `points` | Add points | [Section 7.3](ch07.xhtml#ch07lev1sec25), [p. 137](ch07.xhtml#page_137)
    |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `points` | 添加点 | [第7.3节](ch07.xhtml#ch07lev1sec25), [第137页](ch07.xhtml#page_137)
    |'
- en: '| `lines` | Add lines following coords | [Section 7.3](ch07.xhtml#ch07lev1sec25),
    [p. 138](ch07.xhtml#page_138) |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `lines` | 根据坐标添加线条 | [第7.3节](ch07.xhtml#ch07lev1sec25), [第138页](ch07.xhtml#page_138)
    |'
- en: '| `arrows` | Add arrows | [Section 7.3](ch07.xhtml#ch07lev1sec25), [p. 138](ch07.xhtml#page_138)
    |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `arrows` | 添加箭头 | [第7.3节](ch07.xhtml#ch07lev1sec25), [第138页](ch07.xhtml#page_138)
    |'
- en: '| `text` | Add text | [Section 7.3](ch07.xhtml#ch07lev1sec25), [p. 138](ch07.xhtml#page_138)
    |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `text` | 添加文本 | [第7.3节](ch07.xhtml#ch07lev1sec25), [第138页](ch07.xhtml#page_138)
    |'
- en: '| `legend` | Add/control legend | [Section 7.3](ch07.xhtml#ch07lev1sec25),
    [p. 138](ch07.xhtml#page_138) |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `legend` | 添加/控制图例 | [第7.3节](ch07.xhtml#ch07lev1sec25), [第138页](ch07.xhtml#page_138)
    |'
- en: '| `qplot` | Create `ggplot2` “quick plot” | [Section 7.4.1](ch07.xhtml#ch07lev2sec68),
    [p. 140](ch07.xhtml#page_140) |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `qplot` | 创建`ggplot2`的“快速绘图” | [第7.4.1节](ch07.xhtml#ch07lev2sec68), [第140页](ch07.xhtml#page_140)
    |'
- en: '| `geom_point` | Add points geom | [Section 7.4.2](ch07.xhtml#ch07lev2sec69),
    [p. 141](ch07.xhtml#page_141) |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `geom_point` | 添加点的几何对象 | [第7.4.2节](ch07.xhtml#ch07lev2sec69), [第141页](ch07.xhtml#page_141)
    |'
- en: '| `geom_line` | Add lines geom | [Section 7.4.2](ch07.xhtml#ch07lev2sec69),
    [p. 141](ch07.xhtml#page_141) |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `geom_line` | 添加线的几何对象 | [第7.4.2节](ch07.xhtml#ch07lev2sec69), [第141页](ch07.xhtml#page_141)
    |'
- en: '| `size`, `shape`, `color` | Set geom constants | [Section 7.4.2](ch07.xhtml#ch07lev2sec69),
    [p. 142](ch07.xhtml#page_142) |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `size`, `shape`, `color` | 设置几何对象常量 | [第7.4.2节](ch07.xhtml#ch07lev2sec69),
    [第142页](ch07.xhtml#page_142) |'
- en: '| `linetype` | Set geom line type | [Section 7.4.2](ch07.xhtml#ch07lev2sec69),
    [p. 142](ch07.xhtml#page_142) |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `linetype` | 设置几何对象的线型 | [第7.4.2节](ch07.xhtml#ch07lev2sec69), [第142页](ch07.xhtml#page_142)
    |'
- en: '| `mapping`, `aes` | Geom aesthetic mapping | [Section 7.4.3](ch07.xhtml#ch07lev2sec70),
    [p. 145](ch07.xhtml#page_145) |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `mapping`, `aes` | 几何对象美学映射 | [第7.4.3节](ch07.xhtml#ch07lev2sec70), [第145页](ch07.xhtml#page_145)
    |'
- en: '| `geom_hline` | Add horizontal lines geom | [Section 7.4.3](ch07.xhtml#ch07lev2sec70),
    [p. 145](ch07.xhtml#page_145) |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `geom_hline` | 添加水平线的几何对象 | [第7.4.3节](ch07.xhtml#ch07lev2sec70), [第145页](ch07.xhtml#page_145)
    |'
- en: '| `geom_segment` | Add line segments geom | [Section 7.4.3](ch07.xhtml#ch07lev2sec70),
    [p. 145](ch07.xhtml#page_145) |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `geom_segment` | 添加线段几何对象 | [第7.4.3节](ch07.xhtml#ch07lev2sec70), [第145页](ch07.xhtml#page_145)
    |'
