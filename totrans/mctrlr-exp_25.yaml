- en: '**25  Nintendo CIC and Clones**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Back in the late Seventies, there was a manufacturer of home television videogames
    known as Atari. Atari’s consoles had some great games from Atari, and from dozens
    of fly-by-night companies they also had some shitty ones. By 1983, the latter
    had saturated the market, resulting in a market crash and Atari dumping well over
    half a million cartridges in a New Mexico landfill. Not only did Atari’s reputation
    suffer for these bad games, but as they were simply ROM chips on a circuit board,
    Atari was often paid no licensing fees for these crummy third-party games.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: As Nintendo prepared for their 1985 launch of the Nintendo Entertainment System
    (NES) in the North American market, they needed a way to avoid the same fate.
    Their solution was the Checking Integrated Circuit (CIC), a lockout chip required
    in every NES cartridge, granting Nintendo the authority to license cartridge manufacturing
    by constricting CIC supply. By having separate versions for NTSC and PAL markets,
    they could also provide for regional lockout, preventing the poor children of
    the United Kingdom from learning that in the outside world, the Teenage Mutant
    Hero Turtles were ninjas, and that the one called Michelangelo used illegal nunchucks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: The scheme worked by having one CIC chip in the NES console, and another CIC
    chip in the game cartridge. Starting at reset, each of these would generate a
    stream of pseudo-random bits, and any disagreement of those bits would cause the
    console to reboot and try again.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Given Nintendo’s strict control of game content, there were tempting profits
    for anyone who could manufacture games without the CIC chip. In this chapter,
    we’ll first discuss the analog circuitry that was designed to glitch out the console’s
    CIC chip, stunning it into not resetting when the expected sequence failed to
    arrive. We’ll then discuss Tengen’s reverse engineering of the CIC chip, their
    clone of it, and the open source clones that appeared in the 21st century.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0236-01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25.1: Nintendo’s NES CIC Chip'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: An additional bypass, albeit one a little less sophisticated, is to simply reuse
    the CIC from a legitimate but cheap cartridge. One might also build a “man in
    the middle” cartridge that accepts any legitimately licensed cartridge, as a way
    to temporarily borrow its CIC.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '**Glitching the Console’s CIC**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before compatible counterfeits of the CIC chip were made, an intriguing alternative
    existed: rather than send the proper pseudo-random sequence, a cartridge might
    send a crazy pulse on the cartridge edge connector to stun the console’s CIC chip,
    with the aim of preventing that chip’s firmware from resetting the console and
    ending the game.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: This works because the console’s chip runs entirely independent of the CPU,
    and the game continues to run until that CIC resets the console. If the CIC crashes,
    its firmware never runs and the console never resets!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: The best, and perhaps only, documentation for this glitching technique is Horton
    (2004). Horton describes seven different variants of the gitching circuit, manufactured
    by Camerica, Color-dreams and AVE. Each of these variants sends a negative voltage
    glitch on pin 35 or 70, which are directly wired to the CIC chip. This crashes
    the chip so that its ROM code won’t reset the CPU. [Figure 25.2](ch25.xhtml#ch25fig2)
    shows one of these cartridges, easily identified by a glitch configuration switch
    on the rear and the absence of any Nintendo seal of quality.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种故障技术，最好的，也是唯一的文献资料可能就是Horton（2004）。Horton描述了由Camerica、Color-dreams和AVE制造的七种不同类型的故障电路。这些电路中的每一种都会在35号或70号引脚上产生负电压故障，这些引脚直接连接到CIC芯片。这样，CIC芯片会崩溃，从而使其ROM代码无法重置CPU。[图25.2](ch25.xhtml#ch25fig2)展示了其中一种卡带，后面有一个故障配置开关，并且没有任天堂的质量认证标志。
- en: '![Image](../images/f0238-01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0238-01.jpg)'
- en: 'Figure 25.2: Unlicensed Cartridge without a CIC'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图25.2：没有CIC的未经授权卡带
- en: Nintendo eventually ended the era of the glitching cartridges by introducing
    resistors and protection diodes on pins 35 and 70, so that the cartridge couldn’t
    crash the console’s CIC chip.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 任天堂最终通过在35号和70号引脚上加入电阻器和保护二极管，结束了卡带故障时代，从而防止了卡带崩溃主机的CIC芯片。
- en: '**Tengen’s Rabbit: A CIC Clone**'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**天真的兔子：CIC克隆**'
- en: With the glitching vulnerability closed, manufacturers of unlicensed games were
    forced to either include instructions for cutting a pin of the lockout chip in
    the console or come up with something that could convincingly generate the pseudo-random
    sequence of a real CIC chip. Tengen, a subsidiary of Atari, managed to do the
    latter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 随着故障漏洞的关闭，未经授权的游戏制造商不得不提供切割主机锁定芯片引脚的说明，或者想出能够生成类似真实CIC芯片的伪随机序列的解决方案。天真，作为Atari的子公司，成功地做到了后者。
- en: The story here is mostly folklore, so please bear with me if at times I don’t
    let the truth get in the way of a good story. As I understand it, there was a
    team of three or four engineers who were reverse engineering Nintendo’s CIC chip
    by photographing its mask ROM and digging through Sharp’s documentation of the
    chip family. This team worked many late nights, and eventually came out with a
    functioning clone of the CIC chip, which Tengen packaged as their Rabbit chip,
    shown in [Figure 25.3](ch25.xhtml#ch25fig3), then later combined into a mapper
    chip known as the Rambo.^([1](footnotes.xhtml#ch25fn1))
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的故事大多属于民间传说，所以如果有时候我不让真相妨碍好故事，请耐心听我讲。根据我的理解，有一个三到四人的工程师团队，他们通过拍摄Nintendo CIC芯片的掩膜ROM并深入研究夏普（Sharp）关于该芯片家族的文档，进行反向工程。这支团队经常加班加点，最终制造出了一个功能齐全的CIC芯片克隆版，天真公司将其打包为“兔子”芯片，见[图25.3](ch25.xhtml#ch25fig3)，后来又将其与一个映射器芯片合并，形成了被称为Rambo的芯片。^([1](footnotes.xhtml#ch25fn1))
- en: Nintendo, of course, was furious at Tengen for breaking their subsidy lock,
    producing games without authorization and manufacturing even their licensed games
    in unlicensed quantities. They sued for damages in the famous case, *Atari Games
    Corp. v. Nintendo of America Inc*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，任天堂对于天真公司（Tengen）破解他们的补贴锁定、未经授权生产游戏，甚至未经授权生产他们授权的游戏感到非常愤怒。他们在著名的案件*Atari
    Games Corp.诉Nintendo of America Inc*中起诉了天真公司并索赔。
- en: '![Image](../images/f0240-01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0240-01.jpg)'
- en: 'Figure 25.3: Tengen’s Rabbit'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图25.3：天真的兔子
- en: '![Image](../images/f0241-01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0241-01.jpg)'
- en: 'Figure 25.4: Tengen’s Rabbit Diffusion ROM'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图25.4：天真的兔子扩散ROM
- en: 'Atari had a decent defense: they only copied portions necessary for compatibility,
    that none of the creative portions of the work were copied, and that the reverse
    engineering was performed by clean-room methods. Unfortunately, Atari’s attorneys
    were a little too eager to earn their fees. They had requested a copy of Nintendo’s
    CIC firmware *before* they were sued by Nintendo, by lying to the copyright office
    and claiming that they had *already* been sued. Oops!'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Atari有一个相当不错的辩护理由：他们仅复制了与兼容性相关的部分，且没有复制任何创意部分，且反向工程是通过洁净室方法进行的。不幸的是，Atari的律师们太急于赚取费用了。他们在任天堂起诉他们之前，向版权局谎称他们已经被起诉，并请求了任天堂的CIC固件副本。哎呀！
- en: Nintendo won as a result of Atari’s unclean hands, and what might have been
    a commercially successful example of reverse engineering for compatibility was
    instead dumped in the scrap bin of history. Well, for a dozen years, at least.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 任天堂因Atari的不洁手段获胜，本可能成为兼容性反向工程的商业成功案例，结果却被历史的废料箱遗弃。嗯，至少有十多年是这样。
- en: '**A Modern Rabbit Clone**'
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**现代兔子克隆**'
- en: Details are scattered among forum posts, but by 2006 a dump of the Rabbit chip’s
    ROM had made it to the `#nesdev` forums in Neviksti (2006). Fox (2006) was then
    published to the forum, as a translation of the ROM disassembly to C. You can
    find it reproduced on [page 245](ch25.xhtml#page_245).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 细节散布在论坛帖子中，但到2006年，Rabbit芯片的ROM转储已出现在Neviksti（2006）的`#nesdev`论坛上。Fox（2006）随后发布到论坛，作为ROM反汇编到C语言的翻译。你可以在[第245页](ch25.xhtml#page_245)找到它的复印件。
- en: Reading through the forum thread is fascinating, and not just because it’s from
    a time before social media engagement metrics trashed any hope of long-form discussion.
    By the third page, Zack S has two CICs wired to one another, reproducing the check
    and reset circuits without a console or game.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读这个论坛帖子的过程非常吸引人，不仅仅是因为它来自一个社交媒体参与度指标还未破坏长篇讨论的时代。到第三页时，Zack S已经将两个CIC连接在一起，在没有主机或游戏的情况下重现了检查和重置电路。
- en: By the seventh page, Neviksti’s ROM photographs are beginning to be decoded
    to bits, with explanations of the ROM circuit reverse engineered from the die
    photographs.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 到第七页，Neviksti的ROM照片开始被解码成比特，伴随着从晶圆照片逆向工程出的ROM电路的解释。
- en: This is a somewhat unique case for this book, in that a commercial exploit of
    firmware protection was then *itself* exploited to provide a break that was just
    as good as a fresh hack of the original chip! The CIC was cloned into the Rabbit,
    then the Rabbit was cloned by forums years before the CIC itself had been publicly
    dumped.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书中的一个独特案例，因为固件保护的商业性利用*本身*被利用提供了一个漏洞，这个漏洞与对原始芯片的全新破解一样有效！CIC被克隆到Rabbit中，然后Rabbit在论坛上被克隆，早于CIC本身被公开转储。
- en: '![Image](../images/f0243-01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0243-01.jpg)'
- en: 'Figure 25.5: Nintendo CIC (SM590) Pinout'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图25.5：任天堂CIC（SM590）引脚图
- en: '**Cloning Nintendo’s CIC**'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**克隆任天堂的CIC**'
- en: By late 2006, Tengen’s Rabbit chip had been reverse engineered and cloned from
    die photographs, but Nintendo’s original CIC chip had not been cloned except by
    Tengen. That gap was filled by Segher (2010), an excellent article sourcing images
    and ROM dumps by Neviksti, as well as a description of the Sharp SM590 architecture
    that the chip uses.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 到2006年底，Tengen的Rabbit芯片已经通过晶圆照片进行逆向工程并克隆，但任天堂的原始CIC芯片除了Tengen之外没有被克隆。这个空白由Segher（2010）填补，他撰写了一篇优秀的文章，提供了Neviksti的图像和ROM转储，并描述了芯片使用的Sharp
    SM590架构。
- en: Speaking of the SM590, it’s a 4-bit CPU, and that’s the least bonkers thing
    about it. The 10-bit program counter is divided into a 1-bit field, a 2-bit page,
    and a 7-bit step. The step is counted in polynomial rather than linear order,
    as an LFSR uses fewer transistors than a linear counter! Like a PIC, the hardware
    call stack is held apart from RAM.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 说到SM590，它是一个4位的CPU，而这并不是它最疯狂的地方。10位程序计数器被分为1位字段、2位页面和7位步进。步进是按多项式顺序计数的，而不是线性顺序，因为LFSR比线性计数器使用的晶体管更少！像PIC一样，硬件调用栈与RAM分开存储。
- en: '**Sharp SM590 Backdoor**'
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Sharp SM590后门**'
- en: After all this labor to dump the CIC’s ROM, perhaps there was an easier way?
    Riddle (2019) documents a backdoor test mode, in which the SM590’s ROM can be
    dumped through the I/O pins.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成了这么多工作来转储CIC的ROM后，是否有更简单的方法呢？Riddle（2019）记录了一种后门测试模式，在这种模式下，SM590的ROM可以通过I/O引脚进行转储。
- en: Given the pinout in [Figure 25.5](ch25.xhtml#ch25fig5), the backdoor is activated
    by lowering pins 7, 14, and 13 in that order. ROM data will then appear in 508-byte
    groups, repeating every 2,032 clock cycles on pins 12–19 and 4–1.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[图25.5](ch25.xhtml#ch25fig5)中的引脚图，通过按顺序降低引脚7、14和13来激活后门。ROM数据将以508字节为一组，每2,032个时钟周期在引脚12–19和4–1上重复一次。
- en: The start position is somewhat unpredictable, but Riddle suggests that it can
    be synchronized either by counting clock cycles after pin 7 is lowered, or by
    synchronizing on the long string of zeroes at the end of the dump.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 启动位置有些不可预测，但Riddle建议可以通过在引脚7降低后计算时钟周期，或通过在转储的末尾同步一长串零来进行同步。
- en: Riddle notes that the SM591 and SM595 might require changing fields to get all
    the data, as not all of memory is covered. We’ll see how those were dumped in
    [Chapter G.4](app07.xhtml#app07_4).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Riddle指出，SM591和SM595可能需要更改字段才能获取所有数据，因为并不是所有内存都被覆盖。我们将在[第G.4章](app07.xhtml#app07_4)看到这些是如何被转储的。
- en: '![Image](../images/f0245-01.jpg)![Image](../images/f0246-01.jpg)![Image](../images/f0247-01.jpg)![Image](../images/f0248-01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0245-01.jpg)![Image](../images/f0246-01.jpg)![Image](../images/f0247-01.jpg)![Image](../images/f0248-01.jpg)'
