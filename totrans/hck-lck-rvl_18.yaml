- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">13</samp> <samp class="SANS_Dogma_OT_Bold_B_11">PANDEMIC
    PROFITEERS AND COVID-19 DISINFORMATION</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">13</samp> <samp class="SANS_Dogma_OT_Bold_B_11">疫情牟利者与新冠病毒虚假信息</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '*About a month ago, there was an article printed in a newspaper I had never
    heard of called The Intercept. I discovered that The Intercept is a rag far left
    of the* New York Times. *They printed an article alleging that the telemedicine
    company to which America’s Frontline Doctors referred people—a third-party telemedicine
    company—had had patient data breaches, that it had been hacked. This got the telemedicine
    company, of course, very nervous. They thought they had good firewalls up. They
    spent about $200,000 to prove that there was no actual hack, that it was all made
    up. It was all a lie. But it was the basis for Congressman Clyburn’s investigation
    into me! And I thought to myself, That sounds very familiar. A fake story in a
    rag paper.*'
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*大约一个月前，我看到了一篇在我从未听说过的报纸《Intercept》上发表的文章。我发现《Intercept》是一家比*《纽约时报》*还要极左的报纸。*他们发表了一篇文章，指控美国前线医生（America’s
    Frontline Doctors）所推荐的一个远程医疗公司——一个第三方远程医疗公司——发生了患者数据泄露，称它被黑客入侵了。这让这家远程医疗公司当然非常紧张。他们认为自己已经建立了很好的防火墙，花费了大约20万美元来证明并没有真正发生黑客入侵，所有的都是虚构的，完全是谎言。但这却成为了克莱伯恩议员对我进行调查的依据！我心想，这听起来非常熟悉。一篇假新闻出现在一本垃圾报纸上。*'
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Dr. Simone Gold, founder of America’s Frontline Doctors, speaking at a November
    2021 event hosted by the David Horowitz Freedom Center, an Islamophobic hate group,
    in Palm Beach, Florida
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —美国前线医生创始人Simone Gold博士，在2021年11月由大卫·霍罗维茨自由中心主办的活动上发言，该中心是一个反伊斯兰的仇恨团体，活动地点在佛罗里达州的棕榈滩。
- en: On September 11, 2021, an anonymous hacker sent me about 100MB of compressed
    data from, in the words of my source, “the horse paste peddlers.” My source was
    looking into America’s Frontline Doctors (AFLDS), an anti-science propaganda group
    founded in 2020 to support President Trump in his opposition to public health
    policies during the coronavirus pandemic.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 2021年9月11日，一名匿名黑客向我发送了大约100MB的压缩数据，正如我的消息来源所说，“来自马粪药膏推销员”。我的消息来源正在调查美国前线医生（AFLDS），这是一个反科学的宣传团体，成立于2020年，旨在支持特朗普总统在新冠疫情期间反对公共卫生政策。
- en: AFLDS, along with a small network of telehealth companies that my source told
    me were “hilariously easy” to hack, falsely claims to its sizable online audience
    that COVID-19 vaccines are dangerous and ineffective. It also promotes the drugs
    hydroxychloroquine (commonly used to treat malaria and lupus) and ivermectin (commonly
    used as a dewormer in livestock) as miracle cures for the virus. AFLDS creates
    high-quality anti-vaccine propaganda videos and distributes them to hundreds of
    thousands of followers across social media platforms.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: AFLDS与一个小型的远程医疗公司网络一起，我的消息来源告诉我这些公司“极其容易”被黑客攻击，错误地向其庞大的在线观众声称新冠疫苗是危险和无效的。它还推广羟氯喹（通常用于治疗疟疾和红斑狼疮）和伊维菌素（通常作为牲畜的驱虫药）作为新冠病毒的神奇治疗药物。AFLDS制作高质量的反疫苗宣传视频，并将其分发给数十万社交媒体平台上的追随者。
- en: 'The hacker sent me two datasets from two separate companies: Cadence Health,
    which ran the platform AFLDS used to give telehealth consultations to patients,
    and Ravkoo Pharmacy, which filled prescriptions for these drugs. After investigating
    over 1GB of JSON and CSV files cumulatively contained in the decompressed datasets,
    I discovered that AFLDS and its partners duped tens of thousands of people into
    seeking ineffective treatments and charged them at least $15 million—likely much
    more—for consultations and prescriptions for these drugs.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客给我发送了来自两家公司数据集：Cadence Health，这家公司运行着AFLDS用于为患者提供远程医疗咨询的平台，以及Ravkoo Pharmacy，这家公司为这些药物开处方。在调查了这些解压后的数据集中总计超过1GB的JSON和CSV文件后，我发现AFLDS及其合作伙伴欺骗了成千上万的人，让他们寻求无效的治疗，并为这些药物的咨询和处方至少收取了1500万美元——可能远远不止——的费用。
- en: The revelations from my investigation led the US House Select Subcommittee on
    the Coronavirus Crisis, headed by Rep. James Clyburn (D-SC), to open an investigation
    into AFLDS and SpeakWithAnMD; technically, AFLDS worked directly with SpeakWithAnMD
    for providing telehealth consultations, and Cadence Health was SpeakWithAnMD’s
    vendor for managing the technology. Clyburn called these groups “predatory actors”
    that have been “touting misinformation and using it to market disproven and potentially
    hazardous coronavirus treatments.” The committee recommended that the Federal
    Trade Commission open its own investigation into these companies and later expanded
    its investigation to also cover Cadence Health.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我的调查结果使得美国国会新冠危机特别小组委员会（由詹姆斯·克莱本（南卡罗来纳州民主党）代表领导）对AFLDS和SpeakWithAnMD展开了调查；从技术上讲，AFLDS直接与SpeakWithAnMD合作提供远程医疗咨询，而Cadence
    Health是SpeakWithAnMD管理技术的供应商。克莱本称这些团体为“掠夺性行为者”，他们“宣传虚假信息，并利用这些信息来推销未经证实且可能有害的新冠治疗方法。”该委员会建议联邦贸易委员会（FTC）对这些公司展开调查，并随后扩大调查范围，涵盖了Cadence
    Health。
- en: Also in response to my reporting, other reporting on AFLDS, and pro-science
    activism in the medical community, the Medical Board of California (MBC) opened
    an investigation into Dr. Simone Gold, the founder of AFLDS, to determine if she
    should be stripped of her medical license. (At the time of writing, she is still
    licensed in California, as well as in Florida, where she has since moved.) AFLDS
    later accosted MBC president Kristina Lawson in a parking garage with cameras
    as part of an anti-science propaganda video it was producing.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，针对我的报道、关于AFLDS的其他报道以及医学界的支持科学活动，加利福尼亚州医学委员会（MBC）对AFLDS的创始人西蒙妮·戈尔德博士展开了调查，决定是否应当吊销她的执业医师资格。（截至写作时，她仍然在加利福尼亚和佛罗里达州持有执照，而她已搬到佛罗里达州。）AFLDS后来在一个停车库里用摄像机袭击了MBC主席克里斯蒂娜·劳森，作为它制作反科学宣传视频的一部分。
- en: Because the AFLDS dataset is full of medical records and PII, none of it is
    public, so you won’t be able to work with it yourself. Instead, I’ll describe
    the data, show redacted pieces of it, and show snippets of the Python code I wrote
    to make sense of it. If a similar dataset ever drops in your lap, the skills you’ve
    learned in this book so far and the strategies described in this chapter, along
    with perhaps some additional independent study, should enable you to investigate
    it just like I did.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于AFLDS数据集包含医疗记录和个人身份信息（PII），因此它并不是公开的，所以你无法自己操作它。相反，我将描述这些数据，展示其中经过编辑的片段，并展示我编写的Python代码片段，帮助理解这些数据。如果类似的数据集突然出现在你面前，你迄今为止在本书中学到的技能和本章中描述的策略，以及或许一些额外的独立学习，将能让你像我一样进行调查。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Origins of AFLDS</samp>
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">AFLDS的起源</samp>
- en: Before we get into the dataset, let’s take a look at how AFLDS was founded,
    including its ties to Trump’s 2020 reelection campaign and the conservative advocacy
    group the Tea Party Patriots, as well as exactly how AFLDS’s extremely profitable
    scheme succeeded in swindling vaccine skeptics into spending millions of dollars
    on phone consultations and bogus medicine for COVID-19.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解数据集之前，让我们先来看看AFLDS是如何成立的，包括它与特朗普2020年连任竞选活动和保守派倡导团体“茶党爱国者”的关联，以及AFLDS是如何通过其极为盈利的计划成功地欺骗疫苗怀疑者，花费数百万美元购买电话咨询和虚假新冠药物的。
- en: On May 11, 2020, a senior staffer in Donald Trump’s reelection campaign and
    the Republican activist group CNP Action held a conference call. An audio recording
    of this call was leaked to Center for Media and Democracy, a progressive watchdog
    group, which gave a copy of the recording to the Associated Press (AP), which
    in turn reported on it. A key topic of discussion was reportedly finding “extremely
    pro-Trump doctors” to go on TV and defend Trump’s plan to rapidly reopen the economy,
    despite the more cautious safety guidance coming from the Centers for Disease
    Control and Prevention (CDC). Nancy Schulze, a Republican Party activist married
    to a former Republican member of Congress, said on the call that she had a list
    of doctors willing to defend Trump’s policies and that “those are the types of
    guys that we should want to get out on TV and radio to help push out the message.”
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 2020年5月11日，唐纳德·特朗普竞选连任团队的高级工作人员和共和党激进组织CNP行动举行了一次电话会议。会议的音频录音被泄露给了媒体与民主中心，这是一个进步的监察组织，随后将录音交给了美联社（AP），美联社对此进行了报道。讨论的一个关键话题是
    reportedly 寻找“极度支持特朗普的医生”上电视，辩护特朗普迅速重启经济的计划，尽管美国疾病控制与预防中心（CDC）发布的安全指导更加谨慎。共和党活动家南希·舒尔茨（Nancy
    Schulze），她的丈夫是前共和党国会议员，在电话会议上表示她有一份愿意为特朗普政策辩护的医生名单，并且“这些人才是我们应该希望出现在电视和广播上帮助传播信息的人。”
- en: Dr. Gold was the “extremely pro-Trump doctor” they were looking for. During
    AP’s reporting of this conference call, a public relations firm distributed an
    open letter to Trump signed by over 400 doctors, calling the pandemic lockdown
    policies a “mass casualty event.” Dr. Gold’s signature was at the top of the letter,
    though she denied coordinating her efforts with the Trump campaign. This open
    letter was released after AP had sent requests for comment to individuals on the
    call and to Trump’s reelection campaign, but before it had published its article.
    This letter appears to be, at least in part, an attempt to preempt the article
    with a positive spin, something that might happen when you reach out for comment
    while doing adversarial journalism, as discussed in [Chapter 1](chapter1.xhtml).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 高博士是他们寻找的“极度支持特朗普的医生”。在美联社报道这次电话会议时，一家公共关系公司发布了一封公开信，信中有超过400名医生签名，称疫情封锁政策为“大规模伤亡事件”。高博士的签名位于信件的最上方，尽管她否认与特朗普竞选团队协调她的努力。这封公开信是在美联社向电话会议上的个人和特朗普竞选团队请求评论之后发布的，但在文章发表之前。这封信似乎至少部分是为了提前发布文章并加以正面解读，当你在进行对抗性新闻报道时，像[第1章](chapter1.xhtml)中讨论的那样，可能会出现这种情况。
- en: In June 2020, weeks after the conference call and the open letter, Gold founded
    an Arizona nonprofit called the Free Speech Foundation. The enterprise started
    with a million-dollar annual budget and fiscal sponsorship from the Tea Party
    Patriots Foundation, the major US conservative organization introduced in [Chapter
    2](chapter2.xhtml). AFLDS launched on July 27, 2020, as a Free Speech Foundation
    project. Gold, along with other doctors in white lab coats, held a press conference
    on the steps of the Supreme Court building where they falsely claimed that a cocktail
    of hydroxychloroquine, azithromycin, and zinc could cure COVID-19\. The event
    was livestreamed on Breitbart. Then-President Trump shared videos of the press
    conference on Twitter, garnering millions of views before tech companies took
    them down for violating rules against pandemic misinformation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 2020年6月，在电话会议和公开信发布几周后，高博士创立了一个名为“言论自由基金会”的非营利组织，注册地点在亚利桑那州。该项目的初始资金为一百万美元年预算，并获得了美国保守派组织茶党爱国者基金会的财政赞助，该组织在[第2章](chapter2.xhtml)中有介绍。AFLDS于2020年7月27日作为言论自由基金会的项目启动。高博士与其他穿白大褂的医生在最高法院大楼的台阶上举行了新闻发布会，错误地声称羟氯喹、阿奇霉素和锌的混合物能够治愈COVID-19。活动通过布赖特巴特直播。时任总统特朗普在推特上分享了这场新闻发布会的视频，视频在被科技公司因违反疫情虚假信息规定而下架之前，获得了数百万次观看。
- en: In early 2021, well into the pandemic, AFLDS set up a system on its website
    to sell $90 telemedicine consultations so people could get prescriptions for hydroxychloroquine—a
    drug that, at that point in the pandemic, had already been debunked as a treatment
    for COVID-19\. On January 3, Gold told a packed, maskless church audience in Tampa,
    Florida, that AFLDS made “hydroxychloroquine available for the entire nation by
    going to our website. Then you can consult with a telemedicine doctor. And whether
    you have COVID, or you don’t have COVID, or you’re just worried about getting
    COVID, you can get yourself a prescription and they mail it to you.” She insisted,
    “The big fight wasn’t the virus, it was the fear.”
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 2021年初，疫情已经进入相当长的一段时间，AFLDS在其网站上建立了一个系统，提供$90的远程医疗咨询服务，供人们获取氯喹的处方——此时在疫情中，氯喹已经被证伪为一种治疗COVID-19的药物。1月3日，Gold在佛罗里达州坦帕市的一个没有佩戴口罩的教堂观众面前说，AFLDS通过他们的网站让“氯喹可供全国人民使用。然后，您可以咨询远程医疗医生。无论您是否感染了COVID，或者您只是担心感染了COVID，您都可以获得处方，药物会邮寄到您家。”她坚持说，“真正的斗争不是病毒，而是恐惧。”
- en: '[Figure 13-1](#fig13-1) shows the AFLDS website advertising prescriptions for
    COVID-19 “medication.”'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[图13-1](#fig13-1)显示了AFLDS网站上宣传COVID-19“药物”处方的信息。'
- en: If one of AFLDS’s hundreds of thousands of followers watched one of the group’s
    anti-vaccine propaganda videos and decided that they needed ivermectin or hydroxychloroquine,
    first they would click the prominent Contact a Physician button on the AFLDS home
    page. This brought them to SpeakWithAnMD, the telehealth partner’s website. Clicking
    the button on that site to book a consultation sent the patient to a page to create
    an account at Cadence Health, a vendor of SpeakWithAnMD. Cadence Health provided
    the actual telehealth platform that SpeakWithAnMD used.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果AFLDS数十万粉丝中的某一个观看了该组织的反疫苗宣传视频，并决定他们需要伊维菌素或氯喹，首先，他们会点击AFLDS首页上显眼的“联系医生”按钮。这个按钮会将他们带到SpeakWithAnMD，远程医疗合作伙伴的网站。点击该网站上的按钮预约咨询后，患者会被引导到一个页面，在Cadence
    Health创建帐户，Cadence Health是SpeakWithAnMD的供应商。Cadence Health提供了SpeakWithAnMD使用的实际远程医疗平台。
- en: '![This shows a screenshot of https://aflds.org, with a header that says, “How
    to Obtain Covid-19 Medi­cation,” and the description, “Click the button below
    to book a telemedicine consultation with a licensed physician. These video-based
    consultations can be scheduled at your convenience to obtain medication for COVID-related
    symptoms.” The image shows a doctor in a lab coat holding hydroxychloroquine.](Images/Figure13-1.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![这张截图显示了https://aflds.org，标题为“如何获取COVID-19药物”，描述为“点击下面的按钮预约与持牌医生的远程医疗咨询。这些基于视频的咨询可以根据您的时间安排，以便获取COVID相关症状的药物。”图中显示了一位穿着实验室大褂的医生手持氯喹。](Images/Figure13-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 13-1: The home page
    on AFLDS’s website from March 4, 2022</samp>'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图13-1：AFLDS网站2022年3月4日的首页</samp>
- en: The patient would then fill out a form answering medical questions; click through
    the disclaimer “As a potential patient, I acknowledge and understand that the
    Hydroxychloroquine (HCQ) and Ivermectin have been deemed ‘Highly Not Recommended’
    by the WHO, FDA, CDC, and NIH”; and enter their credit card information to pay
    $90 for a consultation. In the next few days, the patient would receive a phone
    call from someone in AFLDS’s network of physicians, who would write them a prescription
    for the unproven drugs. ABC News paid the $90, got a call from someone who wrote
    them a prescription for ivermectin, and recorded the prescriber saying, “I don’t
    have any medical knowledge as far as the medicine, or even about COVID.”
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，患者填写一份表格，回答医疗问题；点击免责声明“作为潜在患者，我承认并理解，氯喹（HCQ）和伊维菌素被世界卫生组织（WHO）、美国食品药品监督管理局（FDA）、疾病控制与预防中心（CDC）和美国国立卫生研究院（NIH）认为‘强烈不推荐’”；并输入信用卡信息支付$90进行咨询。在接下来的几天里，患者会接到AFLDS网络中一位医生的电话，该医生会给他们开出这些未经验证的药物的处方。ABC新闻支付了$90，接到了一个电话，医生为他们开了伊维菌素的处方，并录下了开药的医生说：“就药物而言，或者甚至关于COVID，我没有任何医学知识。”
- en: At the time, the prescriptions were almost always processed through the online
    pharmacy Ravkoo. The patient would call Ravkoo, read their credit card number
    on the phone, and get the drugs mailed to their door. Sometimes they would be
    charged as much as $700 for ivermectin; Ravkoo didn’t accept health insurance
    for these sales.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当时，这些处方几乎总是通过在线药房Ravkoo处理。患者会打电话给Ravkoo，在电话中报上他们的信用卡号，然后药物会邮寄到他们家门口。有时，患者会被收取高达$700的伊维菌素费用；Ravkoo不接受健康保险支付这些销售费用。
- en: When I started this investigation, I wasn’t familiar with any of these companies.
    It was obvious that AFLDS was in the business of misleading its followers about
    public health so it could sell ineffective alternatives for preventing and treating
    COVID-19\. But I didn’t know how SpeakWithAnMD, Cadence Health, or Ravkoo fit
    into the scheme. Were they in on the AFLDS scam, or were they legitimate businesses
    that just happened to work with AFLDS?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当我开始这项调查时，我对这些公司并不熟悉。显然，AFLDS的目的是误导它的追随者关于公共卫生的信息，从而能够销售无效的替代品来预防和治疗新冠疫情。但是我并不清楚SpeakWithAnMD、Cadence
    Health或Ravkoo是如何融入这个计划的。他们是AFLDS骗局的一部分，还是仅仅是偶然与AFLDS合作的合法公司？
- en: Next, I’ll show you step-by-step how I unraveled this entire COVID-19 pandemic
    profiteering scheme, starting with a description of the datasets that my hacker
    source sent me.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我将一步步向你展示我是如何揭开这整个新冠疫情暴利计划的，首先是描述我的黑客来源发送给我的数据集。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Cadence Health and Ravkoo Datasets</samp>
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">Cadence Health 和 Ravkoo 数据集</samp>
- en: The 100MB of compressed data from my source included records for hundreds of
    thousands of patients, in two separate files. This section describes how I stored
    and extracted these sensitive documents, revisits some basic command line data
    analysis (as you learned about in [Chapter 4](chapter4.xhtml)), and describes
    some of the key types of data I discovered in the dataset.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我的来源提供的100MB压缩数据包含了数十万名患者的记录，分成两个单独的文件。这个部分描述了我如何存储和提取这些敏感文档，回顾了一些基础的命令行数据分析（正如你在[第4章](chapter4.xhtml)中学到的），并介绍了我在数据集中发现的一些关键数据类型。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Extracting the Data
    into an Encrypted File Container</samp>
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">将数据提取到加密文件容器中</samp>
- en: Because patient records are more sensitive than other medium-sensitivity data,
    I took additional precautions to secure this dataset and my work with it. I created
    an encrypted file container, a 5GB encrypted file that I could unlock with a strong
    passphrase stored in my password manager. This is where I saved the original dataset,
    as well as all of my notes, code, and other files related to this investigation,
    giving me an extra layer of protection in case my computer is ever compromised.
    Even then, whoever accesses my data won’t be able to access the patient records
    without knowing the passphrase.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因为患者记录比其他中等敏感数据更为敏感，我采取了额外的措施来确保这个数据集及我对其的操作安全。我创建了一个加密文件容器，一个5GB的加密文件，我可以通过存储在密码管理器中的强密码来解锁。原始数据集，以及与此调查相关的所有笔记、代码和其他文件都保存在这里，这为我提供了额外的保护层，以防我的电脑遭到入侵。即使如此，任何访问我数据的人，如果不知道密码，仍然无法访问患者记录。
- en: I used Linux software called zuluCrypt to manage my encrypted file container,
    but VeraCrypt, which you learned about in [Chapter 1](chapter1.xhtml), would also
    have been a good option and is available on any operating system. ZuluCrypt is
    similar to VeraCrypt, but it’s slightly nicer to use and works only in Linux.
    I could also have used Disk Utility in macOS to create encrypted DMG files.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了一款名为zuluCrypt的Linux软件来管理我的加密文件容器，但你在[第1章](chapter1.xhtml)中学到的VeraCrypt也是一个不错的选择，并且在任何操作系统上都可以使用。ZuluCrypt与VeraCrypt相似，但稍微更好用，而且只在Linux上运行。我也可以使用macOS中的磁盘工具来创建加密的DMG文件。
- en: 'My source sent me two tarball files: *hipaa_special.tar.zst* (33MB) and *horse_around_find_out.tar.zst*
    (74MB). Here’s a listing of them:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我的来源给我发送了两个tarball文件：*hipaa_special.tar.zst*（33MB）和*horse_around_find_out.tar.zst*（74MB）。以下是它们的列表：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In [Chapter 11](chapter11.xhtml), you worked with a similar file format, *.tar.gz*,
    where files are compressed using the GZIP algorithm. These *.tar.zst* files were
    compressed using a different algorithm, Zstandard. Installing the Zstandard package
    allowed me to uncompress this type of file using the command <samp class="SANS_TheSansMonoCd_W5Regular_11">tar
    -xf</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">filename</samp>.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">-xf</samp> argument combines
    <samp class="SANS_TheSansMonoCd_W5Regular_11">-x</samp>, which tells <samp class="SANS_TheSansMonoCd_W5Regular_11">tar</samp>
    to extract the file, and <samp class="SANS_TheSansMonoCd_W5Regular_11">-f</samp>,
    which indicates that the following argument is the filename that you’re extracting.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">tar</samp> program detects that
    this is a Zstandard file and uses <samp class="SANS_TheSansMonoCd_W5Regular_11">zstd</samp>
    to uncompress it. Finally, because <samp class="SANS_TheSansMonoCd_W5Regular_11">tar</samp>
    extracts a file into the current working folder, I created new folders, changed
    to them, and then extracted the data into that folder. For example, here’s how
    I extracted *hipaa_special.tar.zst*:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第11章](chapter11.xhtml)中，你处理了一个类似的文件格式，*.tar.gz*，其中文件使用GZIP算法进行压缩。而这些*.tar.zst*文件则是使用另一种算法Zstandard进行压缩的。安装Zstandard包后，我可以使用命令<samp
    class="SANS_TheSansMonoCd_W5Regular_11">tar -xf</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">filename</samp>来解压这类文件。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">-xf</samp>参数结合了<samp class="SANS_TheSansMonoCd_W5Regular_11">-x</samp>，它告诉<samp
    class="SANS_TheSansMonoCd_W5Regular_11">tar</samp>提取文件，以及<samp class="SANS_TheSansMonoCd_W5Regular_11">-f</samp>，它表示接下来的参数是你要提取的文件名。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">tar</samp>程序会检测到这是一个Zstandard文件，并使用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">zstd</samp>来解压它。最后，由于<samp class="SANS_TheSansMonoCd_W5Regular_11">tar</samp>会将文件解压到当前工作目录中，因此我创建了新文件夹，切换到这些文件夹，并将数据解压到其中。例如，下面是我解压*hipaa_special.tar.zst*的方式：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you learned in [Chapter 3](chapter3.xhtml), these commands make a new folder
    called *hipaa_special*, change to that folder, and then extract the *hipaa_special.tar.zst*
    file from the parent folder.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在[第3章](chapter3.xhtml)中学到的，这些命令创建了一个名为*hipaa_special*的新文件夹，切换到该文件夹，并从父文件夹中解压*hipaa_special.tar.zst*文件。
- en: 'Likewise, the following commands change to the parent folder, make a new folder
    called *horse_around_and_find* out, change to that folder, and then extract *horse_around_find_out.tar.zst*
    into that folder:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，以下命令会切换到父文件夹，创建一个名为*horse_around_and_find*的新文件夹，切换到该文件夹，然后将*horse_around_find_out.tar.zst*解压到该文件夹中：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After extracting these folders, I did what I always do the first time I encounter
    any new dataset: start measuring it with command line tools.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 解压这些文件夹后，我做了每次遇到新数据集时都会做的事情：开始使用命令行工具来测量它。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Analyzing the Data
    with Command Line Tools</samp>
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">使用命令行工具分析数据</samp>
- en: 'First, I wanted to know how much disk space these files took up and how many
    files were in each folder. I used the command line tricks described in [Chapter
    4](chapter4.xhtml) to figure this out:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我想知道这些文件占用了多少磁盘空间，并且每个文件夹中有多少个文件。我使用了[第4章](chapter4.xhtml)中描述的命令行技巧来弄清楚这一点：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Because I ran these commands on my Mac, I used the <samp class="SANS_TheSansMonoCd_W5Regular_11">gdu</samp>
    command from the <samp class="SANS_TheSansMonoCd_W5Regular_11">coreutils</samp>
    Homebrew package to estimate disk space (rather than the <samp class="SANS_TheSansMonoCd_W5Regular_11">du</samp>
    command for Linux). The <samp class="SANS_TheSansMonoCd_W5Regular_11">find</samp>
    command created a list of files in the given folder, and that list was piped into
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">wc -l</samp> command, which
    counted the number of files listed. My output showed that the *hipaa_special*
    folder took 493MB of space and contained 281,546 files, and the *horse_around
    _find_out* folder took 691MB of space and contained 215 files. Let’s look at one
    at a time.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我在Mac上运行这些命令，所以我使用了来自<code>coreutils</code> Homebrew包的<samp class="SANS_TheSansMonoCd_W5Regular_11">gdu</samp>命令来估算磁盘空间（而不是Linux上的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">du</samp>命令）。<samp class="SANS_TheSansMonoCd_W5Regular_11">find</samp>命令生成了给定文件夹中所有文件的列表，这个列表被传递给了<samp
    class="SANS_TheSansMonoCd_W5Regular_11">wc -l</samp>命令，用来计算列出的文件数量。我的输出显示，*hipaa_special*文件夹占用了493MB的空间，包含281,546个文件，而*horse_around_find_out*文件夹占用了691MB的空间，包含215个文件。我们一个一个地来看。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Viewing the hipaa_special
    Folder</samp>
  id: totrans-43
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">查看 hipaa_special 文件夹</samp>
- en: 'It was clear at this point that *hipaa_special* contained far more files than
    I could manually read. I ran the following command to view the first few lines
    of filenames in the *hipaa_special* folder listing, so I could get a feel for
    what was in there and start opening some of those files next:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一点为止，很明显 *hipaa_special* 文件夹包含的文件比我手动阅读的要多得多。我运行了以下命令，以查看 *hipaa_special*
    文件夹中一些文件名的前几行，这样我就能对其中的内容有个了解，并开始接下来打开一些文件：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: My code piped the output of the <samp class="SANS_TheSansMonoCd_W5Regular_11">ls</samp>
    command into the <samp class="SANS_TheSansMonoCd_W5Regular_11">head</samp> command,
    which by default displays the first 10 lines of input. This way, I didn’t need
    to watch hundreds of thousands of filenames scroll by just to get a sense of the
    folder’s contents.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我的代码将 <samp class="SANS_TheSansMonoCd_W5Regular_11">ls</samp> 命令的输出传输给 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">head</samp> 命令，后者默认显示输入的前 10 行。这样，我就不需要看到成百上千的文件名滚动过去，只是为了了解文件夹的内容。
- en: 'My output showed that the folder contains small files with numeric filenames
    and no file extensions:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我的输出显示文件夹包含一些数字命名且没有文件扩展名的小文件：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When I opened one of these files in VS Code, I could quickly see that it was
    a JSON file. Each of these files, I discovered, was a record for a different user
    in Cadence Health’s system. For example, [Listing 13-1](#list13-1) shows a redacted
    version of the file *244273*.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在 VS Code 中打开其中一个文件时，我很快就能看出它是一个 JSON 文件。我发现这些文件中的每一个都是 Cadence Health 系统中不同用户的记录。例如，[列表
    13-1](#list13-1)显示了文件*244273*的去标识化版本。
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-1: An example JSON
    file from</samp> <samp class="SANS_Futura_Std_Book_11">hipaa_special</samp>'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 13-1：来自</samp> <samp class="SANS_Futura_Std_Book_11">hipaa_special</samp>
    的示例 JSON 文件
- en: I could see that the filename (*244273*) matched the patient’s user ID ❶. The
    record also includes a reference to a partner ❷. This value is in an odd format,
    but I quickly discovered that it’s a comma-separated list of partner IDs with,
    for some reason, blank values at the beginning and end of the list. I don’t know
    why Cadence Health chose to represent which partners each patient belonged to
    as a string rather than a JSON array, which would have been cleaner. Once I figured
    out that they had made this choice, though, it was simple enough to work around.
    I discovered that the vast majority of the patients have a value of <samp class="SANS_TheSansMonoCd_W5Regular_11">,3,</samp>
    for <samp class="SANS_TheSansMonoCd_W5Regular_11">partner</samp>, which, as you’ll
    see later in this chapter, means they’re AFLDS patients.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以看到，文件名 (*244273*) 与患者的用户 ID ❶ 匹配。记录中还包含一个指向合作伙伴的引用 ❷。这个值的格式很奇怪，但我很快发现它是一个以逗号分隔的合作伙伴
    ID 列表，奇怪的是列表的开头和结尾有空白值。我不明白为什么 Cadence Health 选择用字符串而不是 JSON 数组来表示每个患者属于哪些合作伙伴，这样做本可以更简洁一些。然而，一旦我搞明白他们做出这个选择后，绕过它就变得足够简单了。我发现绝大多数患者的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">partner</samp> 值是 <samp class="SANS_TheSansMonoCd_W5Regular_11">,3,</samp>，这意味着他们是
    AFLDS 的患者，正如你稍后在本章中看到的那样。
- en: The record also includes the patient’s name, email, address, date of birth,
    other personal information, and detailed consultation notes. In some of the patient
    records, the <samp class="SANS_TheSansMonoCd_W5Regular_11">consultationNotes</samp>
    array ❸ is empty, but in this case, it lists details. I assume that patients with
    empty consultation notes created an account in the Cadence Health system but never
    paid the $90 and therefore didn’t have any telehealth consultations. The patient
    from this file had their $90 phone consultation on September 4, 2021, at 1:47
    PM ❹.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 记录还包括患者的姓名、电子邮件、地址、出生日期、其他个人信息以及详细的咨询记录。在一些患者记录中，<samp class="SANS_TheSansMonoCd_W5Regular_11">consultationNotes</samp>
    数组 ❸ 是空的，但在此案例中，它列出了详细信息。我猜测，拥有空咨询记录的患者在 Cadence Health 系统中创建了账户，但从未支付 $90，因此没有进行任何远程医疗咨询。这个文件中的患者在
    2021 年 9 月 4 日下午 1:47 进行了 $90 的电话咨询 ❹。
- en: This dataset includes patient records similar to that shown in [Listing 13-1](#list13-1)
    for 281,000 patients.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 该数据集包括类似于 [列表 13-1](#list13-1) 中所示的患者记录，共涉及 281,000 名患者。
- en: My source told me that they had created their own account in the Cadence Health
    system while they were hacking it. As they used the website, they watched exactly
    which URLs their web browser loaded. When they noticed that the URL that returned
    their own patient record included their patient ID, they tried loading similar
    URLs with other IDs. Those URLs returned other users’ patient records. Therefore,
    my source simply wrote a script to download all 281,000 patient records and stored
    them in individual JSON files. The *hipaa_special.tar.zst* file contains the output
    of that script.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我的消息来源告诉我，他们在黑客攻击Cadence Health系统时创建了自己的账户。使用网站时，他们观察到自己的网页浏览器加载了哪些URL。当他们发现返回自己病历的URL中包含了患者ID时，他们尝试加载其他ID的类似URL。这些URL返回了其他用户的病历。因此，我的消息来源写了一个脚本，下载了所有281,000个病人的记录，并将其存储在单独的JSON文件中。*hipaa_special.tar.zst*
    文件包含了该脚本的输出。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Viewing the horse_around_find_out
    Folder</samp>
  id: totrans-56
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">查看 horse_around_find_out 文件夹</samp>
- en: 'The *horse_around_find_out* folder is much smaller and easier to deal with.
    I ran the following command to find out what files it contained (this folder contains
    a small enough number of files that there was no reason to pipe it into <samp
    class="SANS_TheSansMonoCd_W5Regular_11">head</samp>):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*horse_around_find_out* 文件夹要小得多，处理起来也更简单。我运行了以下命令来查看它包含哪些文件（这个文件夹的文件数量足够少，没必要将其输出通过
    <samp class="SANS_TheSansMonoCd_W5Regular_11">head</samp> 进行过滤）：'
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'My output showed that the files in this folder are mostly JSON files from Cadence
    Health and CSVs from the Ravkoo pharmacy site, as well as a few other files:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我的输出显示，这个文件夹中的文件大多是来自Cadence Health的JSON文件和来自Ravkoo药房网站的CSV文件，还有一些其他文件：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: I started manually opening these files to see what they contain. The *cadence_api.txt*
    file appears to contain a few hundred lines of JavaScript code that lists URLs
    within the Cadence Health API, possibly used by the hacker to download the data.
    The *cadence_js* folder contains several inscrutable JavaScript files, probably
    the code that powered the Cadence Health website itself.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我开始手动打开这些文件，查看它们包含的内容。*cadence_api.txt* 文件似乎包含了几百行JavaScript代码，列出了Cadence Health
    API中的URL，可能是黑客用来下载数据的。*cadence_js* 文件夹包含了几个难以理解的JavaScript文件，可能是驱动Cadence Health网站本身的代码。
- en: The folder also contains the file *ravkoo_screenshot.png*, a screenshot from
    Ravkoo’s Super Admin interface, shown in [Figure 13-2](#fig13-2). I never had
    access to the interface itself, just this screenshot. It appears that the links
    on the left represent tables of data from Ravkoo’s database, and the information
    on the right displays all of the data from a selected table.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件夹还包含*ravkoo_screenshot.png* 文件，这是来自Ravkoo超级管理员界面的截图，如[图13-2](#fig13-2)所示。我从未访问过该界面，只看到了这个截图。左侧的链接似乎代表了Ravkoo数据库中的数据表，而右侧的信息显示了所选表格中的所有数据。
- en: My source told me that they had discovered a secret URL for this admin interface,
    though they didn’t explain exactly how they found it. Anyone could create an account
    on Ravkoo’s system, and as long as they were logged in, they could go to the URL
    for this interface. From there, they could click the table names in the list on
    the left to access all of Ravkoo’s data from their web browser. My source built
    the CSV files they sent me (*ravkoo_contact .csv*, *ravkoo_drugs.csv*, and so
    on) by scraping the data from the Ravkoo Super Admin interface, just as @donk_enby
    did to create the Parler dataset. (See Appendix B for more information on web
    scraping.)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我的消息来源告诉我，他们发现了这个管理员界面的一个秘密URL，尽管他们没有解释究竟是怎么发现的。任何人都可以在Ravkoo的系统中创建账户，只要登录了，就可以访问这个接口的URL。在那里，他们可以点击左侧列表中的表格名称，使用网页浏览器访问Ravkoo的所有数据。我的消息来源通过从Ravkoo超级管理员界面抓取数据，构建了他们发送给我的CSV文件（*ravkoo_contact.csv*、*ravkoo_drugs.csv*
    等），正如@donk_enby为创建Parler数据集所做的那样。（有关网页抓取的更多信息，请参见附录B。）
- en: '![A screenshot of the Ravkoo Super Admin web interface. To the left it lists
    different types of data: Users, Drugs, Patients, and more. Insurances is selected
    in this list. On the right, the header is Insurance Masters, and beneath it is
    a table of insurance data, including insurance ID, Plan code, and Plan name.](Images/Figure13-2.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![Ravkoo超级管理员网页界面的截图。左侧列出了不同类型的数据：用户、药物、病人等。在这个列表中选中了“保险”。右侧的标题是“保险管理”，其下方是一个保险数据表，包括保险ID、计划代码和计划名称。](Images/Figure13-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 13-2: A screenshot from
    the secret Ravkoo Super Admin interface</samp>'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图13-2：来自秘密Ravkoo超级管理员界面的截图</samp>
- en: I could see that the *horse_around_and_find_out* folder contained mostly JSON
    and CSV files, but I needed to do more research to determine their significance.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以看到*horse_around_and_find_out*文件夹里主要是JSON和CSV文件，但我需要进一步研究以确定它们的意义。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Viewing the cadence_allpatients_all.json
    File</samp>
  id: totrans-67
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">查看cadence_allpatients_all.json文件</samp>
- en: I started by looking at the largest file in *horse_around_and_find_out*, the
    387MB *cadence_allpatients_all.json* file. This enormous JSON object lists information
    about every Cadence Health patient, including much of the same data listed in
    the *hipaa_special* patient records. [Listing 13-2](#list13-2) shows a redacted
    section of the data from this file for a single patient.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我从查看*horse_around_and_find_out*文件夹中最大的一份文件开始，即387MB的*cadence_allpatients_all.json*文件。这个庞大的JSON对象列出了每位Cadence
    Health患者的信息，包括许多与*hipaa_special*患者记录中相同的数据。[列表13-2](#list13-2)展示了来自该文件中一名患者的部分数据（已删减）。
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-2: An example JSON
    object describing a patient in</samp> <samp class="SANS_Futura_Std_Book_11">cadence_allpatients_all.json</samp>'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表13-2：描述cadence_allpatients_all.json中一名患者的JSON对象示例</samp>
- en: Many of these fields have a value of <samp class="SANS_TheSansMonoCd_W5Regular_11">null</samp>,
    meaning they’re empty. The Cadence Health software likely made it optional to
    collect this information, and AFLDS chose not to do so for its patients. The value
    of the <samp class="SANS_TheSansMonoCd_W5Regular_11">ssn</samp> field (presumably
    for Social Security number) is <samp class="SANS_TheSansMonoCd_W5Regular_11">999999999</samp>
    in this example. All patients in this JSON file have their SSN set either to this
    number or to <samp class="SANS_TheSansMonoCd_W5Regular_11">null</samp>, so it
    appears that this dataset doesn’t include real SSNs. The *cadence_allpatients_all.json*
    file also included each user’s password hash. Someone with all these password
    hashes could potentially recover the original passwords for users without strong
    passwords. The value of <samp class="SANS_TheSansMonoCd_W5Regular_11">created_at</samp>
    appears to be the timestamp for when this patient record was created—in other
    words, when this person created their account.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 许多字段的值为<samp class="SANS_TheSansMonoCd_W5Regular_11">null</samp>，意味着它们为空。Cadence
    Health软件可能将收集这些信息设置为可选，而AFLDS选择没有为其患者收集这些信息。<samp class="SANS_TheSansMonoCd_W5Regular_11">ssn</samp>字段的值（推测是社会保障号）在此示例中为<samp
    class="SANS_TheSansMonoCd_W5Regular_11">999999999</samp>。该JSON文件中的所有患者的SSN都被设置为此数字或<samp
    class="SANS_TheSansMonoCd_W5Regular_11">null</samp>，因此看起来该数据集并不包含真实的SSN。*cadence_allpatients_all.json*文件中还包括了每个用户的密码哈希值。拥有所有这些密码哈希的人可能能够恢复那些没有强密码的用户的原始密码。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">created_at</samp>字段的值似乎是该患者记录创建时的时间戳——换句话说，就是此人创建账户的时间。
- en: After reading through several patient records in my text editor, I had a decent
    understanding of the type of data in this file, so I moved on to examining the
    smaller files.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的文本编辑器中阅读了几份患者记录后，我对这个文件中的数据类型有了相当好的理解，于是我开始查看较小的文件。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Viewing the cadence_health_partners.json
    File</samp>
  id: totrans-73
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">查看cadence_health_partners.json文件</samp>
- en: The *cadence_health_partners.json* file contains a JSON object with a list of
    17 of Cadence’s partners, such as America’s Frontline Doctors, SpeakWithAnMD,
    and Dr. Zelenko. [Listing 13-3](#list13-3) shows a redacted example of the AFLDS
    partner from that file.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*cadence_health_partners.json*文件包含了一个JSON对象，列出了Cadence的17个合作伙伴，如美国前线医生（America’s
    Frontline Doctors）、SpeakWithAnMD和Dr. Zelenko。[列表13-3](#list13-3)展示了来自该文件的AFLDS合作伙伴的删减示例。'
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-3: An example JSON
    object describing a partner in</samp> <samp class="SANS_Futura_Std_Book_11">cadence_health_partners
    .json</samp>'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表13-3：描述cadence_health_partners.json中一名合作伙伴的JSON对象示例</samp>
- en: Each partner has unique <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp> fields, along with
    many others that describe the partner’s settings. The first lines of this JSON
    object show that AFLDS’s <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    is <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>. The <samp class="SANS_TheSansMonoCd_W5Regular_11">practices</samp>
    field is a string containing a comma-separated list of telehealth consultation
    types that this partner offers (<samp class="SANS_TheSansMonoCd_W5Regular_11">covid19</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">followupvisit</samp>, in this
    case). This JSON object includes secret tokens for payment processors in the lines
    with fields for <samp class="SANS_TheSansMonoCd_W5Regular_11">one_merchant _security_key</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">stripe_secret_key</samp>, which
    I’ve redacted. The <samp class="SANS_TheSansMonoCd_W5Regular_11">virtual_visit
    _price</samp> field is a JSON object containing other fields for each type of
    practice this partner offers and, in this case, shows that AFLDS charges $90 for
    COVID-19 visits and $59.99 for follow-up visits.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 每个合作伙伴都有独特的 <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> 和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">name</samp> 字段，以及描述合作伙伴设置的其他多个字段。该 JSON
    对象的前几行显示 AFLDS 的 <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> 为 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">3</samp>。<samp class="SANS_TheSansMonoCd_W5Regular_11">practices</samp>
    字段是一个字符串，包含该合作伙伴提供的远程医疗咨询类型的逗号分隔列表（在此情况下为 <samp class="SANS_TheSansMonoCd_W5Regular_11">covid19</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">followupvisit</samp>）。该 JSON 对象包括支付处理器的秘密令牌，在包含
    <samp class="SANS_TheSansMonoCd_W5Regular_11">one_merchant_security_key</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">stripe_secret_key</samp> 字段的行中，我已将其遮蔽。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">virtual_visit_price</samp> 字段是一个 JSON
    对象，包含该合作伙伴提供的每种类型实践的其他字段，在此情况下，显示 AFLDS 对 COVID-19 访问收费 90 美元，对随访访问收费 59.99 美元。
- en: After reviewing *cadence_health_partners.json* and the patient data in the *hipaa_special*
    folder, I noticed a relationship between the two. Each partner’s JSON object has
    an <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>, and each patient has
    a <samp class="SANS_TheSansMonoCd_W5Regular_11">partner</samp> field. [Listing
    13-3](#list13-3) shows that AFLDS’s partner <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    is <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>, indicating that the
    patient in [Listing 13-1](#list13-1) with a <samp class="SANS_TheSansMonoCd_W5Regular_11">partner</samp>
    value of <samp class="SANS_TheSansMonoCd_W5Regular_11">,3,</samp> was an AFLDS
    patient.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看 *cadence_health_partners.json* 文件和 *hipaa_special* 文件夹中的患者数据后，我注意到两者之间存在关系。每个合作伙伴的
    JSON 对象都有一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>，每个患者都有一个 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">partner</samp> 字段。[列表 13-3](#list13-3)
    显示 AFLDS 的合作伙伴 <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> 是 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">3</samp>，这意味着在 [列表 13-1](#list13-1) 中，患者的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">partner</samp> 值为 <samp class="SANS_TheSansMonoCd_W5Regular_11">,3,</samp>
    的患者是 AFLDS 的患者。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">The ravkoo_rxdata.csv File</samp>
  id: totrans-79
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">ravkoo_rxdata.csv 文件</samp>
- en: Of the six Ravkoo files, I found that *ravkoo_rxdata.csv* was by far the biggest.
    [Figure 13-3](#fig13-3) shows a portion of the data in this spreadsheet.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在六个 Ravkoo 文件中，我发现 *ravkoo_rxdata.csv* 迄今为止是最大的一个。[图 13-3](#fig13-3) 显示了该电子表格中的一部分数据。
- en: '![A screenshot from LibreOffice Calc of ravkoo_rxdata.csv, a spreadsheet with
    many rows and columns. Each row represents a different drug prescription. Most
    of the values in the DrugName column are hydroxychloroquine, ivermectin, or azithromycin.](Images/Figure13-3.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![来自 LibreOffice Calc 的 ravkoo_rxdata.csv 屏幕截图，显示了许多行和列的电子表格。每行代表一个不同的药物处方。药物名称列中的大多数值是羟氯喹、伊维菌素或阿奇霉素。](Images/Figure13-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 13-3: Viewing</samp>
    <samp class="SANS_Futura_Std_Book_11">ravkoo_rxdata.csv</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">in
    LibreOffice Calc format</samp>'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 13-3：在 LibreOffice Calc 格式中查看</samp>
    <samp class="SANS_Futura_Std_Book_11">ravkoo_rxdata.csv</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">文件</samp>
- en: This 149MB CSV spreadsheet contained 340,000 rows of data, each representing
    a prescription filled. Each prescription included the name and dosage of the drug,
    usage instructions, information about refills, the date it was filled, a Remarks
    column (where many of the rows list <samp class="SANS_TheSansMonoCd_W5Regular_11">AMERICAS
    FRONT LINE DOCTORS—ENCORE</samp>), and other information.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个149MB的CSV电子表格包含了340,000行数据，每行代表一个开具的处方。每个处方包括药品名称和剂量、使用说明、续药信息、开具日期、备注栏（许多行列出了
    <samp class="SANS_TheSansMonoCd_W5Regular_11">AMERICAS FRONT LINE DOCTORS—ENCORE</samp>），以及其他信息。
- en: After a cursory review of *ravkoo_rxdata.csv*, it was clear that it might contain
    revelations about how much money AFLDS and the companies it worked with charged
    for bogus COVID-19 health care. However, its current format would make it difficult
    to work with. I needed to transform the data in order to more easily make sense
    of it.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在初步查看 *ravkoo_rxdata.csv* 后，明显可以看出它可能包含关于AFLDS及其合作公司收取虚假COVID-19医疗费用的揭示。然而，它当前的格式使得处理数据变得困难。我需要对数据进行转换，以便更容易理解它。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Creating a Single Spreadsheet of Patients</samp>
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">创建单一的患者电子表格</samp>
- en: I wanted to separate the AFLDS patients who had paid $90 for phone consultations
    from the total list of patients, many of whom had never paid, so I could get a
    clearer idea of the scale of AFLDS’s scam. For each of these paying patients,
    I wanted to find their name, gender, birth date, the date they created their Cadence
    Health account, and the number of telehealth consultations they had.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我想将那些为电话咨询支付了90美元的AFLDS患者与总患者名单分开，许多患者从未支付过费用，这样我就能更清楚地了解AFLDS骗局的规模。对于每位付费患者，我想找出他们的姓名、性别、出生日期、创建Cadence
    Health账户的日期以及他们接受的远程医疗咨询次数。
- en: The *cadence_allpatients_all.json* file contained information about all of the
    patients, including the previously discussed <samp class="SANS_TheSansMonoCd_W5Regular_11">created_at</samp>
    timestamp. However, it didn’t include the consultation notes, and I needed those
    to determine how many consultations the patient actually had. Meanwhile, the 281,000
    JSON files in the *hipaa_special* folder had information about all of the patients,
    including consultation notes, but it didn’t have the <samp class="SANS_TheSansMonoCd_W5Regular_11">created_at</samp>
    timestamp.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*cadence_allpatients_all.json* 文件包含了所有患者的信息，包括前面提到的 <samp class="SANS_TheSansMonoCd_W5Regular_11">created_at</samp>
    时间戳。然而，它没有包含咨询记录，而这些记录是我需要的，以确定患者实际进行了多少次咨询。与此同时，*hipaa_special* 文件夹中的281,000个JSON文件包含了所有患者的信息，包括咨询记录，但没有
    <samp class="SANS_TheSansMonoCd_W5Regular_11">created_at</samp> 时间戳。'
- en: 'I decided to write a Python script to comb through the *cadence _allpatients_all.json*
    file and all the files in the *hipaa_special* folder, pull out the information
    I was looking for, and save it all in a single CSV. Here’s the Python code for
    my script (you can also find a copy in the book’s GitHub repo at [*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-13<wbr>/create<wbr>-aflds<wbr>-patients<wbr>-csv<wbr>.py*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-13/create-aflds-patients-csv.py)):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定编写一个Python脚本，遍历 *cadence_allpatients_all.json* 文件和 *hipaa_special* 文件夹中的所有文件，提取我需要的信息，并将其保存到一个单一的CSV文件中。以下是我的脚本的Python代码（你也可以在本书的GitHub仓库中找到副本，链接为
    [*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-13<wbr>/create<wbr>-aflds<wbr>-patients<wbr>-csv<wbr>.py*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-13/create-aflds-patients-csv.py))：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You won’t be able to run this or any other script in this chapter without a
    copy of the private dataset, so I’ll summarize how it worked.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有私有数据集的副本，你将无法运行本章中的任何脚本，因此我会总结一下它是如何工作的。
- en: First, the script loaded *cadence_allpatients_all.json* as a Python object.
    It then looped through each patient in that object, keeping track of which <samp
    class="SANS_TheSansMonoCd_W5Regular_11">user_id</samp> mapped to which <samp class="SANS_TheSansMonoCd_W5Regular_11">created_at</samp>
    timestamp in a dictionary.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，脚本将 *cadence_allpatients_all.json* 加载为Python对象。然后，它遍历该对象中的每个患者，并在字典中跟踪每个
    <samp class="SANS_TheSansMonoCd_W5Regular_11">user_id</samp> 映射到哪个 <samp class="SANS_TheSansMonoCd_W5Regular_11">created_at</samp>
    时间戳。
- en: It created an empty list called <samp class="SANS_TheSansMonoCd_W5Regular_11">aflds_patients</samp>
    and then looped through every filename in the *hipaa_special* folder, where each
    file represents a different patient. For each filename, it loaded the corresponding
    JSON file as a Python object representing a patient. If the <samp class="SANS_TheSansMonoCd_W5Regular_11">partner</samp>
    field included the ID 3 (meaning that the record was associated with AFLDS), and
    if the length of the <samp class="SANS_TheSansMonoCd_W5Regular_11">consultationNotes</samp>
    field was greater than 0 (meaning there was at least one consultation), then it
    added this patient to the <samp class="SANS_TheSansMonoCd_W5Regular_11">aflds_patients</samp>
    list, making sure to include the patient’s <samp class="SANS_TheSansMonoCd_W5Regular_11">created_at</samp>
    timestamp, too.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: "它创建了一个名为<\tsamp class=\"SANS_TheSansMonoCd_W5Regular_11\">aflds_patients</samp>的空列表，然后遍历*hipaa_special*文件夹中的每个文件名，其中每个文件代表一个不同的患者。对于每个文件名，它加载了对应的JSON文件作为表示患者的Python对象。如果<\t\
    samp class=\"SANS_TheSansMonoCd_W5Regular_11\">partner</samp>字段包含ID 3（意味着该记录与AFLDS相关联），并且<\t\
    samp class=\"SANS_TheSansMonoCd_W5Regular_11\">consultationNotes</samp>字段的长度大于0（意味着至少有一次咨询），那么它就将该患者添加到<\t\
    samp class=\"SANS_TheSansMonoCd_W5Regular_11\">aflds_patients</samp>列表中，同时确保包含该患者的<\t\
    samp class=\"SANS_TheSansMonoCd_W5Regular_11\">created_at</samp>时间戳。"
- en: It opened a new CSV file, *aflds-patients.csv*, for writing, and then wrote
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">aflds_patients</samp> list as
    rows in the CSV file.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: "它打开了一个新的CSV文件，*aflds-patients.csv*，用于写入，然后将<\tsamp class=\"SANS_TheSansMonoCd_W5Regular_11\"\
    >aflds_patients</samp>列表作为行写入CSV文件。"
- en: After working through the exercises in this book, you should have all the skills
    you need to write your own similar scripts. This is true for all of the scripts
    I wrote for this investigation, which you’ll see throughout this chapter. For
    example, in [Chapter 8](chapter8.xhtml), you learned about dictionaries and lists;
    in [Chapter 9](chapter9.xhtml), you learned how to use the <samp class="SANS_TheSansMonoCd_W5Regular_11">csv</samp>
    module to create your own CSV spreadsheets; and in [Chapter 11](chapter11.xhtml),
    you learned how to load and work with data in JSON format. This script incorporates
    all these techniques.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: "在完成本书中的练习后，你应该具备编写自己类似脚本的所有技能。这对我为本次调查所编写的所有脚本都适用，你将在本章中看到它们。例如，在[第8章](chapter8.xhtml)中，你学习了字典和列表；在[第9章](chapter9.xhtml)中，你学习了如何使用<\t\
    samp class=\"SANS_TheSansMonoCd_W5Regular_11\">csv</samp>模块创建自己的CSV电子表格；在[第11章](chapter11.xhtml)中，你学习了如何加载和处理JSON格式的数据。这个脚本结合了所有这些技术。"
- en: Running this script created a 6.4MB CSV file called *aflds-patients.csv* with
    72,000 rows. [Figure 13-4](#fig13-4) shows a redacted view of this spreadsheet.
    As you can see, this data is significantly easier to make sense of compared to
    hundreds of thousands of small JSON files, and one enormous one.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个脚本创建了一个6.4MB大小的CSV文件，名为*aflds-patients.csv*，包含72,000行。[图13-4](#fig13-4)显示了该电子表格的隐去信息版本。如你所见，这些数据比起数十万个小的JSON文件和一个巨大的文件，要容易理解得多。
- en: '![A screenshot of the CSV spreadsheet I created with my Python script. Each
    row is an AFLDS patient, and it lists redacted information like their names, email
    addresses, and cities of residence.](Images/Figure13-4.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![我用Python脚本创建的CSV电子表格截图。每一行代表一个AFLDS患者，并列出了被隐去的信息，如姓名、电子邮件地址和居住城市。](Images/Figure13-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 13-4: A redacted view
    of</samp> <samp class="SANS_Futura_Std_Book_11">aflds-patients.csv</samp>'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图13-4: 隐去信息后的</samp> <samp
    class="SANS_Futura_Std_Book_11">aflds-patients.csv</samp>'
- en: This spreadsheet lists the 72,000 AFLDS patients who were referred to SpeakWithAnMD
    and actually bought a $90 consultation. If each patient paid $90, these consultations
    alone would have cost them, collectively, $6.4 million. Many of the patients had
    multiple consultations, so I estimate patients were charged *$6.7 million* from
    consultations alone. There’s no way of knowing just from this data how the money
    was distributed, but it was likely split between AFLDS, individual physicians
    in its network, and SpeakWithAnMD.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这个电子表格列出了72,000个被推荐到SpeakWithAnMD并实际购买了$90咨询的AFLDS患者。如果每个患者支付$90，那么仅这些咨询费用总共将花费640万美元。许多患者进行了多次咨询，因此我估计仅从咨询费用中，患者们被收取了*670万美元*。从这些数据中无法知道具体的资金分配情况，但很可能是AFLDS、其网络中的个别医生和SpeakWithAnMD之间进行分配的。
- en: My source’s dataset included all of the patient data in Cadence Health’s database.
    When I sorted the spreadsheet on the <samp class="SANS_TheSansMonoCd_W5Regular_11">created_at</samp>
    column, which includes the dates each patient created their Cadence account, I
    could see that the earliest patients made their accounts on July 16, 2021, and
    the latest patients created theirs on September 12, 2021, when my source hacked
    Cadence Health. While only 72,000 patients paid for $90 consultations, I had data
    for an additional 180,000 AFLDS patients who created Cadence accounts but never
    had a consultation, meaning that 90 percent of the 281,000 patients in the Cadence
    Health database during this time span were referred by AFLDS.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我的数据源的数据库包含了Cadence Health中所有患者的数据。当我按<samp class="SANS_TheSansMonoCd_W5Regular_11">created_at</samp>列对电子表格进行排序时，这一列包括每位患者创建Cadence账户的日期，我可以看到最早的患者是在2021年7月16日创建了账户，而最新的患者则是在2021年9月12日创建了账户，那时我的数据源黑客入侵了Cadence
    Health。虽然只有72,000名患者支付了$90的咨询费用，但我还有来自另外180,000名AFLDS患者的数据，这些患者创建了Cadence账户但从未进行过咨询，这意味着在此期间Cadence
    Health数据库中的281,000名患者中，90%是由AFLDS推荐的。
- en: While AFLDS had been selling $90 consultations since January 2021, Roque Espinal,
    Cadence Health’s CEO, confirmed to me that his service for SpeakWithAnMD launched
    on July 16\. Since this is the date of the earliest patient data I have, this
    means that my source collected records for *all* of Cadence’s patients. My source’s
    data shows that in the two-month period between July and September, AFLDS charged
    its patients an average of $100,000 a day from $90 consultations alone. If AFLDS
    brought in that much each day during the first half of the year as well, it would
    have brought in an additional *$18 million* in revenue. Again, this is just from
    selling consultations; it doesn’t include the cost of the prescription drugs.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管AFLDS从2021年1月起一直在销售$90的咨询服务，但Cadence Health的CEO Roque Espinal向我确认，他的SpeakWithAnMD服务于7月16日启动。由于这是我所掌握的最早的患者数据，这意味着我的信息来源收集了*所有*Cadence患者的记录。我的数据源显示，在7月到9月的两个月期间，AFLDS仅从$90的咨询服务中每天向其患者收取平均$100,000。如果AFLDS在今年上半年每天也赚取这么多，它将额外带来*1800万美元*的收入。同样，这只是通过销售咨询服务获得的收入；不包括处方药的费用。
- en: At this point in my investigation, it was clear that AFLDS was spreading medical
    disinformation, and it seemed evident that SpeakWithAnMD and Ravkoo were at least
    aware of this and were profiting from it as well. However, I wasn’t sure if Cadence
    Health, which provided a service to SpeakWithAnMD, had realized what its service
    was being used for. But before exploring that further, I decided to switch gears
    and start looking at Ravkoo’s drug prescription data.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的调查进行到这一点时，显然AFLDS正在传播医学虚假信息，并且看起来至少SpeakWithAnMD和Ravkoo对此有所意识，并且从中获利。然而，我不确定为SpeakWithAnMD提供服务的Cadence
    Health是否意识到其服务的用途。但在进一步探讨这一点之前，我决定改变方向，开始查看Ravkoo的药物处方数据。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Calculating Revenue from Prescriptions
    Filled by Ravkoo</samp>
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">计算通过Ravkoo填写处方的收入</samp>
- en: The *ravkoo_rxdata.csv* spreadsheet introduced earlier has 340,000 rows, each
    representing a prescription that was filled. It includes a <samp class="SANS_TheSansMonoCd_W5Regular_11">DrugName</samp>
    column with values like <samp class="SANS_TheSansMonoCd_W5Regular_11">IVERMECTIN
    3 MG TABLET</samp>, a <samp class="SANS_TheSansMonoCd_W5Regular_11">cost</samp>
    column with the price of that prescription, and a <samp class="SANS_TheSansMonoCd_W5Regular_11">Fill_Date</samp>
    column with the date that the prescription was filled.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提到的*ravkoo_rxdata.csv*电子表格有340,000行，每一行代表一个已填写的处方。它包含了一个<samp class="SANS_TheSansMonoCd_W5Regular_11">DrugName</samp>列，里面有像<samp
    class="SANS_TheSansMonoCd_W5Regular_11">IVERMECTIN 3 MG TABLET</samp>这样的药品名称，一个<samp
    class="SANS_TheSansMonoCd_W5Regular_11">cost</samp>列，显示该处方的价格，以及一个<samp class="SANS_TheSansMonoCd_W5Regular_11">Fill_Date</samp>列，显示处方被填写的日期。
- en: By sorting the spreadsheet by <samp class="SANS_TheSansMonoCd_W5Regular_11">Fill_Date</samp>,
    I could see that the Ravkoo pharmacy filled the first prescription on November
    27, 2020, and the last ones were filled on August 24, 2021\. The SpeakWithAnMD
    data covers a two-month period, but the Ravkoo data covers a nine-month period.
    That is, my dataset contained two months’ worth of patient records, but nine months’
    worth of prescription records. In this section I describe the Python code I wrote
    to gain a better understanding of what drugs Ravkoo sold and how much of them
    related to quack cures for COVID-19.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按 <samp class="SANS_TheSansMonoCd_W5Regular_11">Fill_Date</samp> 对电子表格进行排序，我看到
    Ravkoo 药房在 2020 年 11 月 27 日填写了第一张处方，而最后一张处方则是在 2021 年 8 月 24 日填写的。SpeakWithAnMD
    的数据涵盖了两个月的时间段，而 Ravkoo 的数据则涵盖了九个月的时间段。也就是说，我的数据集包含了两个月的患者记录，但却包含了九个月的处方记录。在本节中，我将描述我编写的
    Python 代码，目的是更好地了解 Ravkoo 销售的药物以及这些药物与 COVID-19 假治疗法的关系。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Finding the Price
    and Quantity of Drugs Sold</samp>
  id: totrans-105
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">查找销售药物的价格和数量</samp>
- en: To find out how much money Ravkoo charged patients for each specific drug, I
    wrote another script, shown in [Listing 13-4](#list13-4) (you can also find a
    copy of it at [*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-13<wbr>/create<wbr>-ravkoo<wbr>-csv<wbr>.py*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-13/create-ravkoo-csv.py)).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了找出 Ravkoo 向患者收取每种特定药物的费用，我编写了另一个脚本，见 [清单 13-4](#list13-4)（你也可以在 [*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-13<wbr>/create<wbr>-ravkoo<wbr>-csv<wbr>.py*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-13/create-ravkoo-csv.py)
    找到它的副本）。
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-4: The Python script</samp>
    <samp class="SANS_Futura_Std_Book_11">create-ravkoo-csv.py</samp><samp class="SANS_Futura_Std_Book_Oblique_I_11">,
    which adds up Ravkoo prescriptions and drug costs and exports a CSV of the results</samp>'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 13-4：Python 脚本</samp> <samp
    class="SANS_Futura_Std_Book_11">create-ravkoo-csv.py</samp><samp class="SANS_Futura_Std_Book_Oblique_I_11">，该脚本汇总
    Ravkoo 处方和药品费用，并导出结果的 CSV 文件</samp>
- en: First this script created an empty dictionary called <samp class="SANS_TheSansMonoCd_W5Regular_11">drugs</samp>,
    which mapped drug names to another dictionary containing <samp class="SANS_TheSansMonoCd_W5Regular_11">prescription_count</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">total_cost</samp> values. It
    then loaded *ravkoo_rxdata.csv* and looped through its rows. For each row, if
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">DrugName</samp> wasn’t in the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">drugs</samp> dictionary yet, the
    script added it, then incremented the drug’s prescription count by 1 and added
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">Cost</samp> value to that drug’s
    total cost. It saved all of the data in <samp class="SANS_TheSansMonoCd_W5Regular_11">drugs</samp>
    into a CSV called *ravkoo.csv*. Finally, the script counted up the total number
    of prescriptions and the total cost for *all* drugs sold to all patients and displayed
    it in the terminal.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，脚本创建了一个名为 <samp class="SANS_TheSansMonoCd_W5Regular_11">drugs</samp> 的空字典，该字典将药物名称映射到另一个字典，后者包含
    <samp class="SANS_TheSansMonoCd_W5Regular_11">prescription_count</samp> 和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">total_cost</samp> 值。接着，它加载了 *ravkoo_rxdata.csv*
    并循环处理其中的每一行。对于每一行，如果 <samp class="SANS_TheSansMonoCd_W5Regular_11">DrugName</samp>
    尚未在 <samp class="SANS_TheSansMonoCd_W5Regular_11">drugs</samp> 字典中，脚本会将其添加进去，然后将该药物的处方数量加
    1，并将 <samp class="SANS_TheSansMonoCd_W5Regular_11">Cost</samp> 值加到该药物的总费用中。所有数据会被保存到名为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">drugs</samp> 的 CSV 文件中。最后，脚本会计算出所有药物的总处方数和总费用，并将结果显示在终端中。
- en: 'Here’s the output I got when I ran the script:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我运行脚本时得到的输出：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: My output showed that patients paid over $15 million to Ravkoo for all the prescriptions
    in the hacked data. However, many of these prescriptions might not have anything
    to do with AFLDS or bogus COVID-19 cures.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我的输出显示，患者们为所有在被泄露数据中的处方支付了超过 1500 万美元。然而，这些处方中的许多可能与 AFLDS 或虚假的 COVID-19 疗法无关。
- en: The resulting CSV file, *ravkoo.csv*, contained 1,552 rows, the number of unique
    <samp class="SANS_TheSansMonoCd_W5Regular_11">DrugName</samp> values in the original
    *ravkoo_rxdata.csv*. [Figure 13-5](#fig13-5) shows this spreadsheet, sorted descending
    by <samp class="SANS_TheSansMonoCd_W5Regular_11">total_cost</samp>, to show which
    drugs cost patients the most money.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的CSV文件*ravkoo.csv*包含了1,552行，代表原始*ravkoo_rxdata.csv*中独特的<samp class="SANS_TheSansMonoCd_W5Regular_11">DrugName</samp>值。[图13-5](#fig13-5)展示了这个电子表格，按<samp
    class="SANS_TheSansMonoCd_W5Regular_11">total_cost</samp>降序排序，显示了哪些药物让患者支付了最多的钱。
- en: How much of this revenue was from drugs that AFLDS pushed on its followers?
    The drug that cumulatively cost patients the most was <samp class="SANS_TheSansMonoCd_W5Regular_11">IVERMECTIN
    3 MG TABLET</samp>, which was prescribed 63,409 times, at a total cost of $4.6
    million. Ivermectin is used primarily to treat parasites in livestock, but it’s
    also occasionally used to treat scabies and lice in humans. I didn’t know for
    sure that all of these ivermectin sales were directly from AFLDS, but it was suspicious
    that ivermectin was bringing in so much money during the COVID-19 pandemic, when
    disinformation about its efficacy was rampant.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这些收入中有多少来自AFLDS向其追随者推销的药物？累积成本最高的药物是<samp class="SANS_TheSansMonoCd_W5Regular_11">IVERMECTIN
    3 MG TABLET</samp>，共被开处方63,409次，总费用为460万美元。伊维菌素主要用于治疗牲畜的寄生虫，但偶尔也用于治疗人类的疥疮和虱子。我无法确定所有这些伊维菌素的销售是否直接来自AFLDS，但在COVID-19大流行期间，关于其疗效的虚假信息泛滥，而伊维菌素却带来了如此高的收入，这点非常可疑。
- en: 'Another row had the <samp class="SANS_TheSansMonoCd_W5Regular_11">drug_name</samp>
    of <samp class="SANS_TheSansMonoCd_W5Regular_11">IVERMECTIN 3MG PO TAB</samp>
    (the same dose of ivermectin, just with a slightly different name <samp class="SANS_TheSansMonoCd_W5Regular_11">DrugName</samp>
    value from *ravkoo_rxdata.csv*) that cost 883 patients another $98,900\. Other
    drugs like hydroxychloroquine and azithromycin had the same problem: there were
    different <samp class="SANS_TheSansMonoCd_W5Regular_11">DrugName</samp> values
    that actually represented the same drug. If I wanted to know the total revenue
    from each individual drug, I would have to combine all of the ivermectin prescriptions
    into one row and do the same with the other drugs.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 另一行显示了<samp class="SANS_TheSansMonoCd_W5Regular_11">IVERMECTIN 3MG PO TAB</samp>（同剂量的伊维菌素，只是名字略有不同，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">DrugName</samp>值来自*ravkoo_rxdata.csv*），它让883个患者额外支付了98,900美元。其他药物，如羟氯喹和阿奇霉素，也有相同的问题：存在不同的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">DrugName</samp>值，实际上代表的是同一种药物。如果我想知道每种药物的总收入，我就得把所有的伊维菌素处方合并成一行，其他药物也得如此处理。
- en: '![A screenshot of the CSV spreadsheet I created with the create-ravkoo-csv.py
    script. Each row lists, for each unique drug_name, the number of prescriptions
    and the total cost](Images/Figure13-5.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![我用create-ravkoo-csv.py脚本创建的CSV电子表格截图。每一行列出了每个独特药物名称对应的处方数量和总费用](Images/Figure13-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 13-5: Viewing</samp>
    <samp class="SANS_Futura_Std_Book_11">ravkoo.csv</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">in
    LibreOffice Calc</samp>'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图13-5：在LibreOffice Calc中查看</samp>
    <samp class="SANS_Futura_Std_Book_11">ravkoo.csv</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">文件</samp>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Categorizing Prescription
    Data by Drug</samp>
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">按药物分类处方数据</samp>
- en: 'Because I was investigating AFLDS, I was most interested in the drugs that
    the group promotes: ivermectin, hydroxychloroquine, and a few others. In addition
    to ivermectin, AFLDS promotes the *Zelenko protocol*, named after Dr. Vladimir
    Zelenko, the American doctor who, at the start of the pandemic in March 2020,
    claimed (without evidence) that he had successfully treated hundreds of COVID-19
    patients using a combination of hydroxychloroquine, azithromycin, and zinc sulfate.
    (The AFLDS website on treatment options also lists vitamin C as part of the Zelenko
    protocol.) Zelenko also spread other medical disinformation, claiming, for example,
    that more children die from COVID-19 vaccines than from the virus itself. Then-President
    Trump publicly lauded Zelenko’s work, saying that he himself took hydroxychloroquine
    to treat COVID-19.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我正在调查AFLDS，所以我最感兴趣的是该组织推广的药物：伊维菌素、氯喹和其他一些药物。除了伊维菌素外，AFLDS还推广*泽连科协议*，这个名字来源于弗拉基米尔·泽连科博士，这位美国医生在2020年3月疫情初期声称（没有证据）他成功治疗了数百名COVID-19患者，使用了氯喹、阿奇霉素和硫酸锌的组合。（AFLDS网站上的治疗选项也将维生素C列为泽连科协议的一部分。）泽连科还传播了其他医学虚假信息，例如声称更多儿童死于COVID-19疫苗，而不是死于病毒本身。时任总统特朗普公开赞扬了泽连科的工作，表示他自己也服用了氯喹治疗COVID-19。
- en: I wanted to see how much of Ravkoo’s business consisted of selling these drugs.
    To do this, I’d have to reorganize the data. I needed to create a similar spreadsheet,
    but instead of having a column for the <samp class="SANS_TheSansMonoCd_W5Regular_11">DrugName</samp>
    lifted directly from the hacked data, I wanted that column to be a category of
    prescriptions. Once I had a straightforward spreadsheet that mapped individual
    drugs to their revenue, I could visualize that data—for example, in a pie chart.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我想了解Ravkoo的业务中有多少部分是销售这些药物。为此，我需要重新组织数据。我需要创建一个类似的电子表格，但不是直接从黑客数据中提取药物名称的列，而是将该列改为处方类别。一旦我有了一个简单的电子表格，将单个药物与其收入相对应，我就可以将这些数据可视化——例如，以饼图的形式展示。
- en: 'The *ravkoo.csv* spreadsheet showed me the most commonly prescribed drugs.
    Based on the names of these drugs, I came up with a list of categories: Ivermectin,
    Hydroxychloroquine, Azithromycin, Zinc, Vitamin C, and Other. In other words,
    the most commonly prescribed drugs were exactly what AFLDS was promoting.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*ravkoo.csv*电子表格向我展示了最常见的处方药。根据这些药物的名称，我列出了一个药物类别的清单：伊维菌素、氯喹、阿奇霉素、锌、维生素C和其他。换句话说，最常见的处方药正是AFLDS所推广的药物。'
- en: I then wrote another script very similar to the one in [Listing 13-4](#list13-4),
    but with one additional step. For every row in the *ravkoo_rxdata.csv* spreadsheet,
    the script determined which of those categories the drug fit into and added up
    the number of prescriptions and cost for each category. It then saved all of this
    data as a CSV called *ravkoo-categories.csv*.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我写了另一个脚本，和[列表13-4](#list13-4)中的脚本非常相似，但多了一步。在*ravkoo_rxdata.csv*电子表格的每一行中，脚本确定该药物属于哪个类别，并汇总每个类别的处方数量和费用。然后，它将所有这些数据保存为名为*ravkoo-categories.csv*的CSV文件。
- en: 'Here’s my Python script (you can also find it at [*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-13<wbr>/create<wbr>-ravkoo<wbr>-categories<wbr>-csv<wbr>.py*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-13/create-ravkoo-categories-csv.py)):'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我的Python脚本（你也可以在[*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-13<wbr>/create<wbr>-ravkoo<wbr>-categories<wbr>-csv<wbr>.py*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-13/create-ravkoo-categories-csv.py)找到它）：
- en: '[PRE14]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: After running this script, I ended up with a file called *ravkoo-categories
    .csv*. [Table 13-1](#tab13-1) shows the data from this spreadsheet, detailing
    Ravkoo’s prescription sales.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个脚本后，我最终得到了一个名为*ravkoo-categories.csv*的文件。[表13-1](#tab13-1)展示了这个电子表格中的数据，详细列出了Ravkoo的处方药销售情况。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 13-1:</samp> <samp class="SANS_Futura_Std_Book_11">Categories
    of Drugs Sold by Ravkoo</samp>
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表13-1：</samp> <samp class="SANS_Futura_Std_Book_11">Ravkoo销售的药物类别</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Drug category</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Prescription
    count</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Total cost</samp> |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">药物类别</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">处方数量</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">总费用</samp> |'
- en: '| --- | --- | --- |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Hydroxychloroquine</samp> | <samp class="SANS_Futura_Std_Book_11">92,646</samp>
    | <samp class="SANS_Futura_Std_Book_11">$1,234,727</samp> |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">羟氯喹</samp> | <samp class="SANS_Futura_Std_Book_11">92,646</samp>
    | <samp class="SANS_Futura_Std_Book_11">$1,234,727</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Zinc</samp> | <samp class="SANS_Futura_Std_Book_11">82,608</samp>
    | <samp class="SANS_Futura_Std_Book_11">$177,336</samp> |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">锌</samp> | <samp class="SANS_Futura_Std_Book_11">82,608</samp>
    | <samp class="SANS_Futura_Std_Book_11">$177,336</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Ivermectin</samp> | <samp class="SANS_Futura_Std_Book_11">64,300</samp>
    | <samp class="SANS_Futura_Std_Book_11">$4,734,163</samp> |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">伊维菌素</samp> | <samp class="SANS_Futura_Std_Book_11">64,300</samp>
    | <samp class="SANS_Futura_Std_Book_11">$4,734,163</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Other</samp> | <samp class="SANS_Futura_Std_Book_11">42,193</samp>
    | <samp class="SANS_Futura_Std_Book_11">$6,476,213</samp> |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">其他</samp> | <samp class="SANS_Futura_Std_Book_11">42,193</samp>
    | <samp class="SANS_Futura_Std_Book_11">$6,476,213</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Vitamin C</samp> | <samp class="SANS_Futura_Std_Book_11">31,281</samp>
    | <samp class="SANS_Futura_Std_Book_11">$52,712</samp> |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">维生素C</samp> | <samp class="SANS_Futura_Std_Book_11">31,281</samp>
    | <samp class="SANS_Futura_Std_Book_11">$52,712</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Azithromycin</samp> | <samp class="SANS_Futura_Std_Book_11">26,972</samp>
    | <samp class="SANS_Futura_Std_Book_11">$2,444,319</samp> |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">阿奇霉素</samp> | <samp class="SANS_Futura_Std_Book_11">26,972</samp>
    | <samp class="SANS_Futura_Std_Book_11">$2,444,319</samp> |'
- en: 'This data clearly revealed Ravkoo’s role in AFLDS’s scam: *87 percent* of all
    prescriptions sold by Ravkoo are for fake COVID-19 treatments. Over a nine-month
    period, patients collectively paid *$8.6 million* to Ravkoo for snake oil that
    they were told would prevent or cure COVID-19\. This is in addition to the roughly
    $6.7 million (and potentially many millions more) that patients paid SpeakWithAnMD
    for phone consultations. As far as I can tell, Ravkoo’s only role in the scheme
    was as a pharmacy, and it didn’t receive any money from the phone consultations.
    AFLDS also, at various times, worked with different pharmacies.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据清楚地揭示了Ravkoo在AFLDS骗局中的角色：*87%*的处方是Ravkoo销售的假冒COVID-19治疗药物。在九个月的时间里，患者总共向Ravkoo支付了*860万美元*，购买了那些被告知可以预防或治愈COVID-19的“假药”。这还不包括患者向SpeakWithAnMD支付的约670万美元（以及可能更多的数百万美元）用于电话咨询。据我所知，Ravkoo在这个计划中的唯一角色是作为药房，并且并未从电话咨询中获得任何收入。AFLDS还曾在不同时间与不同的药房合作。
- en: 'By the time The Intercept published this investigation into AFLDS, Ravkoo CEO
    Alpesh Patel told me that his company had already stopped doing business with
    SpeakWithAnMD. “The volume over there went up crazy, and we didn’t feel comfortable,”
    he said. “And we don’t have that much capacity to fill that many prescriptions.”
    Using OSINT, which you learned about in [Chapter 1](chapter1.xhtml), I confirmed
    that Patel was telling the truth: after scouring the internet about AFLDS, including
    reading reporting from other journalists and pro-science activists on Twitter
    who were keeping track of the group, I discovered that AFLDS ran some Telegram
    channels, including one specifically for its patients. In this Telegram channel,
    I discovered that patients had posted messages about Ravkoo no longer working
    with SpeakWithAnMD or AFLDS.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当《Intercept》发布关于AFLDS的调查时，Ravkoo的首席执行官Alpesh Patel告诉我，他的公司已经停止与SpeakWithAnMD合作。“那里的人数增长得非常快，我们感觉不太舒服，”他说。“而且我们没有那么多能力来处理这么多的处方。”通过使用开源情报（OSINT），你可以在[第1章](chapter1.xhtml)中了解，我确认了Patel在说实话：在互联网上深入搜索关于AFLDS的资料，包括阅读其他记者和支持科学活动家的推文，这些人一直在追踪这个组织，我发现AFLDS运营了一些Telegram频道，其中包括专门为患者提供的频道。在这个频道里，我发现患者们发布了关于Ravkoo不再与SpeakWithAnMD或AFLDS合作的信息。
- en: <samp class="SANS_Futura_Std_Bold_B_11">A Deeper Look at the Cadence Health
    Patient Data</samp>
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">深入了解Cadence Health患者数据</samp>
- en: At this point, I knew that 72,000 AFLDS patients paid for $90 telehealth consultations
    and that 87 percent of Ravkoo’s prescriptions were for fake COVID-19 cures. I
    wanted to further understand the patient data, and there was still a lot more
    to dig into. Who were SpeakWithAnMD’s other partners besides AFLDS, and how much
    of the company’s business did they make up? And what could I learn about the AFLDS
    patients themselves? To answer these questions, I wrote more Python code.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我知道了72,000名AFLDS患者支付了$90的远程医疗咨询费，且87%的Ravkoo处方是用于假冒的COVID-19治疗药物。我想进一步了解患者数据，仍有很多内容需要挖掘。除了AFLDS，SpeakWithAnMD的其他合作伙伴有哪些？他们为公司贡献了多少业务？我还能从AFLDS的患者中学到些什么？为了解答这些问题，我编写了更多的Python代码。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Finding Cadence’s
    Partners</samp>
  id: totrans-139
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">查找Cadence的合作伙伴</samp>
- en: I wanted to know how much of SpeakWithAnMD’s business, and by extension Cadence
    Health’s business, came from AFLDS. The file *cadence_health _partners.json* includes
    a list of all the partners, so I wrote a Python script that counted the number
    of patients associated with each one, shown in [Listing 13-5](#list13-5) (you
    can also find a copy at [*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-13<wbr>/create<wbr>-cadence<wbr>-partners<wbr>-csv<wbr>.py*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-13/create-cadence-partners-csv.py)).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我想了解SpeakWithAnMD的业务中有多少来自AFLDS，进而了解Cadence Health的业务中有多少来自AFLDS。文件 *cadence_health_partners.json*
    包含了所有合作伙伴的列表，于是我写了一个Python脚本，计算每个合作伙伴相关的患者数量，结果见 [Listing 13-5](#list13-5)（你也可以在[*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-13<wbr>/create<wbr>-cadence<wbr>-partners<wbr>-csv<wbr>.py*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-13/create-cadence-partners-csv.py)找到一份副本）。
- en: '[PRE15]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-5: The</samp> <samp
    class="SANS_Futura_Std_Book_11">create-cadence-partners-csv.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">script
    returns the number of patients associated with each Cadence Health partner.</samp>'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-5: </samp> <samp
    class="SANS_Futura_Std_Book_11">create-cadence-partners-csv.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">脚本返回每个Cadence
    Health合作伙伴相关的患者数量。</samp>'
- en: First, my script loaded *cadence_allpatients_all.json* and *cadence_health _partners.json*
    as Python objects. It created an empty list called <samp class="SANS_TheSansMonoCd_W5Regular_11">partner_rows</samp>,
    then looped through each partner. Inside this <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loop was a nested <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> loop
    which, for each partner, looped through each patient checking to see if that patient
    used that partner. The script then added this information (the partner’s ID, name,
    and domain, along with the tally of its associated patients) to the <samp class="SANS_TheSansMonoCd_W5Regular_11">partner_rows</samp>
    list. Finally, it saved its findings in a CSV called *cadence-partners.csv*.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我的脚本加载了 *cadence_allpatients_all.json* 和 *cadence_health_partners.json* 作为Python对象。它创建了一个名为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">partner_rows</samp> 的空列表，然后循环遍历每个合作伙伴。在这个
    <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> 循环内部，有一个嵌套的 <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    循环，它会遍历每个患者，检查该患者是否使用了该合作伙伴的服务。脚本随后将这些信息（合作伙伴的ID、名称和领域，以及其相关患者的统计数据）添加到 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">partner_rows</samp> 列表中。最后，它将结果保存在名为 *cadence-partners.csv*
    的CSV文件中。
- en: '[Table 13-2](#tab13-2) shows the data from this spreadsheet, describing all
    of Cadence Health’s partners and how many patients they have.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[Table 13-2](#tab13-2) 显示了该电子表格的数据，描述了所有Cadence Health的合作伙伴及其患者数量。'
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 13-2:</samp> <samp class="SANS_Futura_Std_Book_11">Cadence
    Health Partners</samp>
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">Table 13-2:</samp> <samp class="SANS_Futura_Std_Book_11">Cadence
    Health合作伙伴</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">ID</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Name</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Domain</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Patients</samp>
    |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">ID</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">名称</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">领域</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">患者数量</samp>
    |'
- en: '| --- | --- | --- | --- |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| <samp class="SANS_Futura_Std_Book_11">1</samp> | <samp class="SANS_Futura_Std_Book_11">Encore
    Telemedicine</samp> | <samp class="SANS_Futura_Std_Book_11">encore.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">7</samp> |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">1</samp> | <samp class="SANS_Futura_Std_Book_11">Encore远程医疗</samp>
    | <samp class="SANS_Futura_Std_Book_11">encore.cadencehealth.us</samp> | <samp
    class="SANS_Futura_Std_Book_11">7</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">2</samp> | <samp class="SANS_Futura_Std_Book_11">SpeakWithAnMD</samp>
    | <samp class="SANS_Futura_Std_Book_11">speakwithanmd.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">21,193</samp> |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">2</samp> | <samp class="SANS_Futura_Std_Book_11">SpeakWithAnMD</samp>
    | <samp class="SANS_Futura_Std_Book_11">speakwithanmd.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">21,193</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">3</samp> | <samp class="SANS_Futura_Std_Book_11">America’s
    Frontline Doctors</samp> | <samp class="SANS_Futura_Std_Book_11">aflds.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">255,266</samp> |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">3</samp> | <samp class="SANS_Futura_Std_Book_11">美国前线医生</samp>
    | <samp class="SANS_Futura_Std_Book_11">aflds.cadencehealth.us</samp> | <samp
    class="SANS_Futura_Std_Book_11">255,266</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">Corstet</samp>
    | <samp class="SANS_Futura_Std_Book_11">corstet.cadencehealth.us</samp> | <samp
    class="SANS_Futura_Std_Book_11">1,604</samp> |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">Corstet</samp>
    | <samp class="SANS_Futura_Std_Book_11">corstet.cadencehealth.us</samp> | <samp
    class="SANS_Futura_Std_Book_11">1,604</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">5</samp> | <samp class="SANS_Futura_Std_Book_11">Dr.
    Zelenko</samp> | <samp class="SANS_Futura_Std_Book_11">drzelenko.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">55</samp> |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">5</samp> | <samp class="SANS_Futura_Std_Book_11">泽伦科博士</samp>
    | <samp class="SANS_Futura_Std_Book_11">drzelenko.cadencehealth.us</samp> | <samp
    class="SANS_Futura_Std_Book_11">55</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">Encore
    Demo</samp> | <samp class="SANS_Futura_Std_Book_11">encoredemo.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">5</samp> |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">Encore演示</samp>
    | <samp class="SANS_Futura_Std_Book_11">encoredemo.cadencehealth.us</samp> | <samp
    class="SANS_Futura_Std_Book_11">5</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">7</samp> | <samp class="SANS_Futura_Std_Book_11">Kim’s
    Pharmacy</samp> | <samp class="SANS_Futura_Std_Book_11">kims.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">6</samp> |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">7</samp> | <samp class="SANS_Futura_Std_Book_11">金氏药房</samp>
    | <samp class="SANS_Futura_Std_Book_11">kims.cadencehealth.us</samp> | <samp class="SANS_Futura_Std_Book_11">6</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">TelMDFirst</samp>
    | <samp class="SANS_Futura_Std_Book_11">telmdfirst.cadencehealth.us</samp> | <samp
    class="SANS_Futura_Std_Book_11">2,410</samp> |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">TelMDFirst</samp>
    | <samp class="SANS_Futura_Std_Book_11">telmdfirst.cadencehealth.us</samp> | <samp
    class="SANS_Futura_Std_Book_11">2,410</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">9</samp> | <samp class="SANS_Futura_Std_Book_11">Dr.
    Tsifutis</samp> | <samp class="SANS_Futura_Std_Book_11">drtsifutis.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">301</samp> |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">9</samp> | <samp class="SANS_Futura_Std_Book_11">茨富蒂斯博士</samp>
    | <samp class="SANS_Futura_Std_Book_11">drtsifutis.cadencehealth.us</samp> | <samp
    class="SANS_Futura_Std_Book_11">301</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">10</samp> | <samp class="SANS_Futura_Std_Book_11">Dr.
    Immanuel</samp> | <samp class="SANS_Futura_Std_Book_11">drimmanuel.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">3</samp> |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">10</samp> | <samp class="SANS_Futura_Std_Book_11">伊曼纽尔博士</samp>
    | <samp class="SANS_Futura_Std_Book_11">drimmanuel.cadencehealth.us</samp> | <samp
    class="SANS_Futura_Std_Book_11">3</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">11</samp> | <samp class="SANS_Futura_Std_Book_11">Dr.
    Palumbo</samp> | <samp class="SANS_Futura_Std_Book_11">drpalumbo.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">29</samp> |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">11</samp> | <samp class="SANS_Futura_Std_Book_11">帕伦博博士</samp>
    | <samp class="SANS_Futura_Std_Book_11">drpalumbo.cadencehealth.us</samp> | <samp
    class="SANS_Futura_Std_Book_11">29</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">12</samp> | <samp class="SANS_Futura_Std_Book_11">Dr.
    Boz</samp> | <samp class="SANS_Futura_Std_Book_11">drboz.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">311</samp> |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">12</samp> | <samp class="SANS_Futura_Std_Book_11">博兹博士</samp>
    | <samp class="SANS_Futura_Std_Book_11">drboz.cadencehealth.us</samp> | <samp
    class="SANS_Futura_Std_Book_11">311</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">13</samp> | <samp class="SANS_Futura_Std_Book_11">Dr.
    Parker</samp> | <samp class="SANS_Futura_Std_Book_11">drparker.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">409</samp> |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">13</samp> | <samp class="SANS_Futura_Std_Book_11">Dr.
    Parker</samp> | <samp class="SANS_Futura_Std_Book_11">drparker.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">409</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">14</samp> | <samp class="SANS_Futura_Std_Book_11">Dr.
    Johnson</samp> | <samp class="SANS_Futura_Std_Book_11">drajohnson.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">3</samp> |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">14</samp> | <samp class="SANS_Futura_Std_Book_11">Dr.
    Johnson</samp> | <samp class="SANS_Futura_Std_Book_11">drajohnson.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">3</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">15</samp> | <samp class="SANS_Futura_Std_Book_11">DEV</samp>
    | <samp class="SANS_Futura_Std_Book_11">localhost:8080</samp> | <samp class="SANS_Futura_Std_Book_11">1</samp>
    |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">15</samp> | <samp class="SANS_Futura_Std_Book_11">DEV</samp>
    | <samp class="SANS_Futura_Std_Book_11">localhost:8080</samp> | <samp class="SANS_Futura_Std_Book_11">1</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">16</samp> | <samp class="SANS_Futura_Std_Book_11">HablaConUnMD.com</samp>
    | <samp class="SANS_Futura_Std_Book_11">hablaconunmd.cadencehealth.us</samp> |
    <samp class="SANS_Futura_Std_Book_11">0</samp> |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">16</samp> | <samp class="SANS_Futura_Std_Book_11">HablaConUnMD.com</samp>
    | <samp class="SANS_Futura_Std_Book_11">hablaconunmd.cadencehealth.us</samp> |
    <samp class="SANS_Futura_Std_Book_11">0</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">17</samp> | <samp class="SANS_Futura_Std_Book_11">VirtuaFirst,
    PLLC</samp> | <samp class="SANS_Futura_Std_Book_11">vf.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">17</samp> | <samp class="SANS_Futura_Std_Book_11">VirtuaFirst,
    PLLC</samp> | <samp class="SANS_Futura_Std_Book_11">vf.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> |'
- en: Out of 281,603 patients, AFLDS referred 255,266 to SpeakWithAnMD and, by extension,
    Cadence Health. That means that 90 percent of the patients in Cadence’s database
    came from AFLDS.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在281,603名患者中，AFLDS将255,266人转介给SpeakWithAnMD，并间接转介给Cadence Health。这意味着Cadence数据库中90%的患者来自AFLDS。
- en: I learned some additional interesting information from the partners list. The
    first partner listed, Encore Telemedicine, is SpeakForAnMD’s parent company. The
    fourth, Corstet, is owned by Jerome Corsi, who also owns Encore Telemedicine.
    Corsi is a former host of the conspiracy show *InfoWars*, a proponent of the racist
    “birtherism” conspiracy theory about former US president Barack Obama’s citizenship.
    He was also caught up in special counsel Robert Mueller’s investigation into Russian
    interference in the 2016 election. The list of partners also includes individual
    doctors, including Dr. Zelenko of “Zelenko protocol” fame and Dr. Stella Immanuel,
    one of the AFLDS doctors from the previously mentioned press conference in front
    of the Supreme Court building. After that event, she quickly earned viral fame
    for having claimed that the uterine disorder endometriosis is caused by women
    dreaming of sex with demons and witches.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我从合作伙伴列表中学到了一些额外的有趣信息。列出的第一个合作伙伴Encore Telemedicine是SpeakForAnMD的母公司。第四个合作伙伴Corstet由Jerome
    Corsi拥有，Corsi同时也拥有Encore Telemedicine。Corsi曾是阴谋论节目*InfoWars*的主持人，支持有关美国前总统奥巴马公民身份的种族主义“出生主义”阴谋论。他还曾卷入特别检察官Robert
    Mueller对2016年选举中俄罗斯干预的调查。合作伙伴列表还包括一些个人医生，包括因“Zelenko协议”而出名的Dr. Zelenko和Dr. Stella
    Immanuel，她是之前提到的在最高法院大楼前举行新闻发布会的AFLDS医生之一。在那次事件之后，她因声称子宫疾病子宫内膜异位症是由女性梦见与恶魔和女巫发生性关系所引起而迅速获得了病毒式的名声。
- en: This spreadsheet confirmed that the bulk of the Cadence data was related to
    AFLDS patients. I decided to dig even deeper into AFLDS patient data to see what
    revelations could be hiding there.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这张电子表格确认了Cadence的数据大部分与AFLDS的患者相关。我决定深入挖掘AFLDS患者的数据，看看其中是否隐藏着什么启示。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Searching for Patients
    by City</samp>
  id: totrans-168
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">按城市搜索患者</samp>
- en: The *aflds-patients.csv* spreadsheet I created from the original dataset, containing
    72,000 rows of patients who were referred by AFLDS and who had at least one consultation,
    includes columns for <samp class="SANS_TheSansMonoCd_W5Regular_11">city</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">state</samp>. This location
    data allowed me to write another Python script to count how many patients were
    from each city and look up GPS coordinates for that city so I could plot them
    on a map.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建的 *aflds-patients.csv* 电子表格来自原始数据集，包含72,000行病人数据，这些病人由AFLDS转诊，并且至少有一次咨询，表格中包括了
    <samp class="SANS_TheSansMonoCd_W5Regular_11">城市</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">州</samp>
    列。这个位置数据让我能够编写另一个Python脚本，统计每个城市的病人数量，并查找该城市的GPS坐标，以便我能将它们绘制在地图上。
- en: In [Chapter 11](chapter11.xhtml), you worked with GPS coordinates you found
    directly in Parler video metadata and plotted them on a map using Google Earth.
    In this case, however, I had only cities and states, so I needed to look up their
    GPS coordinates myself. I wrote a script to convert the names of the cities in
    the spreadsheet into GPS coordinates, a process called *geocoding*.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第11章](chapter11.xhtml)中，你使用了直接从Parler视频元数据中找到的GPS坐标，并利用Google Earth将它们绘制在地图上。然而，在这种情况下，我只有城市和州的数据，因此我需要自己查找它们的GPS坐标。我编写了一个脚本，将电子表格中的城市名称转换为GPS坐标，这个过程叫做
    *地理编码*。
- en: '[Listing 13-6](#list13-6) shows my Python script (you can also find a copy
    at [*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-13<wbr>/create<wbr>-cities<wbr>-csv<wbr>.py*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-13/create-cities-csv.py)).'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表13-6](#list13-6)展示了我的Python脚本（你也可以在[*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-13<wbr>/create<wbr>-cities<wbr>-csv<wbr>.py*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-13/create-cities-csv.py)找到一个副本）。'
- en: '[PRE16]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-6: The</samp> <samp
    class="SANS_Futura_Std_Book_11">create-cities-csv.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">script
    geocodes city and state names.</samp>'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">列表13-6: 该</samp> <samp class="SANS_Futura_Std_Book_11">create-cities-csv.py</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">脚本进行城市和州名称的地理编码。</samp>'
- en: To perform the geocoding, the script used an API. Of the various options, I
    chose one called Geocodeapi, simply because it seemed easy to use and was free
    for the number of requests I planned on making. I made an account at [*https://<wbr>geocodeapi<wbr>.io*](https://geocodeapi.io),
    created an API key, and stored it my script in the variable <samp class="SANS_TheSansMonoCd_W5Regular_11">geocode_api_key</samp>.
    In order to make the API calls, the script used the third-party Python module
    <samp class="SANS_TheSansMonoCd_W5Regular_11">httpx</samp>. (For more details
    on this module, check out Appendix B.)
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行地理编码，脚本使用了一个API。在众多选项中，我选择了一个叫做Geocodeapi的服务，原因是它看起来易于使用，并且在我计划的请求次数范围内是免费的。我在[*https://<wbr>geocodeapi<wbr>.io*](https://geocodeapi.io)创建了一个账户，生成了一个API密钥，并将其存储在脚本中的变量
    <samp class="SANS_TheSansMonoCd_W5Regular_11">geocode_api_key</samp> 中。为了进行API调用，脚本使用了第三方Python模块
    <samp class="SANS_TheSansMonoCd_W5Regular_11">httpx</samp>。（有关该模块的更多细节，请参见附录B。）
- en: After defining the API key, my script created an empty dictionary called <samp
    class="SANS_TheSansMonoCd_W5Regular_11">cities</samp> to map city names to information
    about it—specifically, the number of patients and its GPS coordinates.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了API密钥后，我的脚本创建了一个空字典，名为 <samp class="SANS_TheSansMonoCd_W5Regular_11">cities</samp>，用于将城市名称映射到关于该城市的信息——特别是病人数量和其GPS坐标。
- en: 'The script then loaded *aflds-patients.csv* and looped through each patient.
    For each, it created a new string called <samp class="SANS_TheSansMonoCd_W5Regular_11">city</samp>
    in the format <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">City</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">,</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">State</samp>
    (for example, <samp class="SANS_TheSansMonoCd_W5Regular_11">Atlanta, Georgia</samp>).
    If <samp class="SANS_TheSansMonoCd_W5Regular_11">city</samp> didn’t exist in the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">cities</samp> dictionary yet, the
    script set <samp class="SANS_TheSansMonoCd_W5Regular_11">cities[city]</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">{"count":
    0}</samp>. Then it added 1 to <samp class="SANS_TheSansMonoCd_W5Regular_11">cities[city]["count"]</samp>.
    By the time this loop finished running, <samp class="SANS_TheSansMonoCd_W5Regular_11">cities</samp>
    contained a list of every city where there are patients, as well as the number
    of patients in that city.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '然后，脚本加载了 *aflds-patients.csv* 文件，并遍历了每个患者。对于每个患者，脚本创建了一个新的字符串，格式为 <samp class="SANS_TheSansMonoCd_W5Regular_11">City</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">,</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">State</samp>（例如，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Atlanta, Georgia</samp>）。如果 <samp class="SANS_TheSansMonoCd_W5Regular_11">city</samp>
    还不存在于 <samp class="SANS_TheSansMonoCd_W5Regular_11">cities</samp> 字典中，脚本会将 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">cities[city]</samp> 设置为 <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">{"count": 0}</samp>。然后它将 <samp class="SANS_TheSansMonoCd_W5Regular_11">cities[city]["count"]</samp>
    增加 1。等到这个循环完成时，<samp class="SANS_TheSansMonoCd_W5Regular_11">cities</samp> 中包含了所有有患者的城市列表以及每个城市的患者数量。'
- en: The next step was geocoding for each city. Another <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loop looped through <samp class="SANS_TheSansMonoCd_W5Regular_11">cities</samp>
    and, using the <samp class="SANS_TheSansMonoCd_W5Regular_11">httpx.get()</samp>
    function, made an HTTP request for each city to the Geocodeapi API, passing along
    the city name and my API key. When the script got a response with GPS coordinates,
    it stored the latitude and longitude in <samp class="SANS_TheSansMonoCd_W5Regular_11">cities[city]["lat"]</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">cities[city]["lon"]</samp>.
    This step takes a few hours since it’s making thousands of API requests, so it
    displayed text in the terminal before each one, allowing me to get a sense of
    the progress while it was running.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是为每个城市进行地理编码。另一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    循环遍历了 <samp class="SANS_TheSansMonoCd_W5Regular_11">cities</samp>，并使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">httpx.get()</samp>
    函数，向 Geocodeapi API 发送每个城市的 HTTP 请求，同时传递城市名称和我的 API 密钥。当脚本获得包含 GPS 坐标的响应时，它将纬度和经度存储在
    <samp class="SANS_TheSansMonoCd_W5Regular_11">cities[city]["lat"]</samp> 和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">cities[city]["lon"]</samp> 中。由于它需要发送成千上万次
    API 请求，这一步骤需要几个小时，因此在每次请求之前，脚本会在终端中显示文本，让我能够感知运行进度。
- en: Finally, the script wrote all of the data in the <samp class="SANS_TheSansMonoCd_W5Regular_11">cities</samp>
    dictionary into a CSV called *cities.csv*.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，脚本将所有数据从 <samp class="SANS_TheSansMonoCd_W5Regular_11">cities</samp> 字典写入名为
    *cities.csv* 的 CSV 文件。
- en: 'When I ran the script, I got the following output:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 当我运行脚本时，得到了以下输出：
- en: '[PRE17]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[Figure 13-6](#fig13-6) shows *cities.csv*, sorted by number of patients per
    city.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 13-6](#fig13-6) 显示了按每个城市患者数量排序的 *cities.csv* 文件。'
- en: '![A screenshot of the CSV spreadsheet I created with this script. Each row
    contains a city, the number of patients in that city, its latitude and longitude,
    and the label to display on the map.](Images/Figure13-6.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![我用这个脚本创建的 CSV 表格的截图。每一行包含一个城市、该城市的患者数量、城市的纬度和经度，以及在地图上显示的标签。](Images/Figure13-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 13-6: Results from</samp>
    <samp class="SANS_Futura_Std_Book_11">cities.csv</samp>'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 13-6：来自</samp> <samp class="SANS_Futura_Std_Book_11">cities.csv</samp>
    的结果
- en: Armed with GPS coordinates, I could now plot the patient data on a map. I used
    an online service called MapBox ([*https://<wbr>www<wbr>.mapbox<wbr>.com*](https://www.mapbox.com)),
    mentioned in [Chapter 11](chapter11.xhtml), to display circles on a map for each
    of the 15,196 cities—the more patients from that city, the bigger the circle.
    MapBox has a user interface that makes it simple to upload a CSV file with GPS
    coordinates and indicate how you want the data to be visualized on a map. MapBox
    also allows you to embed maps directly into web pages. When I published my article,
    I embedded this map into it so readers could interact with it themselves. [Figure
    13-7](#fig13-7) shows that map, zoomed in on the United States.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有GPS坐标后，我可以将患者数据绘制到地图上。我使用了一个名为MapBox的在线服务（[*https://<wbr>www<wbr>.mapbox<wbr>.com*](https://www.mapbox.com)），它在[第11章](chapter11.xhtml)中提到过，用于在地图上为每个城市（共有15,196个城市）显示圆圈——来自该城市的患者越多，圆圈越大。MapBox拥有一个用户界面，可以轻松上传带有GPS坐标的CSV文件，并指示如何在地图上展示数据。MapBox还允许将地图嵌入到网页中。当我发布文章时，我将这张地图嵌入其中，让读者可以自行互动。[图13-7](#fig13-7)展示了这张地图，聚焦于美国。
- en: People in every state in the country, as well as Washington, DC, paid $90 for
    telehealth consultations, including 8,600 people in California, 8,000 in Florida,
    and 7,400 in Texas. The dots on the map show only cities with at least 10 AFLDS
    patients.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 全国各州以及华盛顿特区的居民都支付了90美元进行远程医疗咨询，其中包括加利福尼亚州8600人，佛罗里达州8000人，德克萨斯州7400人。地图上的点只显示了那些至少有10名AFLDS患者的城市。
- en: In addition to the cities patients lived in, the data also included their birth
    dates, making it simple to calculate their ages. Since age is a major risk factor
    for COVID-19, I explored this data next.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 除了患者所在的城市，数据还包括了他们的出生日期，这使得计算他们的年龄变得简单。由于年龄是COVID-19的主要风险因素，我接下来研究了这些数据。
- en: '![A map of the US full of circles for each city that contains AFLDS patients.
    Some of the circles are much larger than others, meaning those cities have more
    patients.](Images/Figure13-7.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![美国地图，图上每个包含AFLDS患者的城市都标有一个圆圈。部分圆圈较大，意味着这些城市的患者更多。](Images/Figure13-7.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 13-7: A map of cities
    in the US with AFLDS patients as of September 11, 2021</samp>'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图13-7：截至2021年9月11日，美国各城市AFLDS患者分布图</samp>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Searching for Patients
    by Age</samp>
  id: totrans-189
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">按年龄搜索患者</samp>
- en: Your age plays a major role in how likely you are to get seriously sick or die
    from COVID-19\. During the pandemic, the CDC published statistics that described
    individual risk for COVID-19 infection, hospitalization, and death based on your
    age. Up until May 2023, the CDC continually updated these statistics as new data
    came in and as the pandemic changed. When I published my findings in September
    2021, people who were 50 to 64 years old were 4 times more likely to be hospitalized
    and 30 times more likely to die from COVID-19 than 18- to 29-year-olds. People
    who were 65 to 74 were 5 times more likely to be hospitalized and 90 times more
    likely to die.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你的年龄在你患COVID-19重症或死亡的风险中起着重要作用。在大流行期间，CDC发布了基于年龄的COVID-19感染、住院和死亡的个体风险统计数据。直到2023年5月，CDC持续更新这些数据，随着新数据的出现和大流行情况的变化而更新。当我在2021年9月发布我的研究结果时，50到64岁的人群住院的概率是18到29岁人群的4倍，死亡的概率是30倍。65到74岁的人群住院的概率是5倍，死亡的概率是90倍。
- en: While I was writing my report, there were no COVID-19 treatments that worked
    well (except for monoclonal antibodies, which were difficult to administer and
    not widely available). The only way for older people to greatly reduce their risk
    of death or serious illness was to get vaccinated. AFLDS spent a lot of resources
    convincing people that COVID-19 vaccines are dangerous and that wearing masks
    to prevent the spread of COVID-19 is a violation of personal freedom.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在我撰写报告时，并没有哪种COVID-19治疗方法效果显著（除了单克隆抗体，但其使用困难且不广泛可得）。老年人减少死亡或重症风险的唯一方法是接种疫苗。AFLDS投入大量资源，试图说服人们COVID-19疫苗是危险的，佩戴口罩防止COVID-19传播是侵犯个人自由。
- en: When patients created an account on the Cadence Health website, they were asked
    to enter their date of birth. I wrote a script to calculate their age and organize
    them into the same age groups that the CDC used so that I could see their likelihood
    of getting hospitalized or dying. [Listing 13-7](#list13-7) shows the Python code
    for that script (you can also find it at [*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-13<wbr>/create<wbr>-ages<wbr>-csv<wbr>.py*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-13/create-ages-csv.py)).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 当病人在Cadence Health网站创建帐户时，他们会被要求输入出生日期。我编写了一个脚本来计算他们的年龄，并将他们按CDC使用的相同年龄组分类，以便我能够查看他们住院或死亡的可能性。[Listing
    13-7](#list13-7)展示了该脚本的Python代码（你也可以在[*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-13<wbr>/create<wbr>-ages<wbr>-csv<wbr>.py*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-13/create-ages-csv.py)找到它）。
- en: '[PRE18]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-7: The</samp> <samp
    class="SANS_Futura_Std_Book_11">create-ages-csv.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">script
    calculates patients’ ages and groups them by age.</samp>'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-7：</samp> <samp class="SANS_Futura_Std_Book_11">create-ages-csv.py</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">脚本计算了病人的年龄并将他们按年龄分组。</samp>
- en: 'My script first defined a dictionary called <samp class="SANS_TheSansMonoCd_W5Regular_11">age_groups</samp>,
    with keys for each of the CDC’s age groups and values set to 0\. I also added
    two other age groups: people less than 0 years old and people older than 100,
    because (as I discovered while writing the script) some patients had put birth
    dates in the future or in the far past.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我的脚本首先定义了一个名为<samp class="SANS_TheSansMonoCd_W5Regular_11">age_groups</samp>的字典，字典的键是CDC的每个年龄组，值初始化为0。我还添加了两个其他的年龄组：小于0岁的人和大于100岁的人，因为（在编写脚本时我发现）一些病人填写了未来或远过去的出生日期。
- en: The script then loaded *aflds-patients.csv* and looped through each patient,
    calculating the patient’s age as of September 2021 (when I was doing this investigation).
    Based on their age, the script determined which age group the patient belonged
    to and incremented <samp class="SANS_TheSansMonoCd_W5Regular_11">age_groups</samp>
    by 1\. By the time the loop finished, the <samp class="SANS_TheSansMonoCd_W5Regular_11">age_groups</samp>
    dictionary contained a count of the number of patients in each group.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本随后加载了*aflds-patients.csv*并遍历了每个病人，计算了病人在2021年9月（我进行调查时的时间点）的年龄。根据他们的年龄，脚本确定病人所属的年龄组，并将<samp
    class="SANS_TheSansMonoCd_W5Regular_11">age_groups</samp>增加1。当循环完成时，<samp class="SANS_TheSansMonoCd_W5Regular_11">age_groups</samp>字典包含了每个组别的病人数目。
- en: Finally, the script saved the information from <samp class="SANS_TheSansMonoCd_W5Regular_11">age_groups</samp>
    into a CSV spreadsheet called *ages.csv*. [Table 13-3](#tab13-3) shows the results.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，脚本将<samp class="SANS_TheSansMonoCd_W5Regular_11">age_groups</samp>中的信息保存到一个名为*ages.csv*的CSV电子表格中。[Table
    13-3](#tab13-3)展示了结果。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 13-3:</samp> <samp class="SANS_Futura_Std_Book_11">AFLDS
    Patients by Age Group</samp>
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">Table 13-3：</samp> <samp class="SANS_Futura_Std_Book_11">按年龄组划分的AFLDS病人</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Age group</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Patients</samp>
    |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">年龄组</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">病人数量</samp>
    |'
- en: '| --- | --- |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Less than 0</samp> | <samp class="SANS_Futura_Std_Book_11">702</samp>
    |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">小于0岁</samp> | <samp class="SANS_Futura_Std_Book_11">702</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">0 to 4</samp> | <samp class="SANS_Futura_Std_Book_11">48</samp>
    |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">0至4岁</samp> | <samp class="SANS_Futura_Std_Book_11">48</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">5 to 17</samp> | <samp class="SANS_Futura_Std_Book_11">159</samp>
    |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">5至17岁</samp> | <samp class="SANS_Futura_Std_Book_11">159</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">18 to 29</samp> | <samp class="SANS_Futura_Std_Book_11">3,047</samp>
    |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">18至29岁</samp> | <samp class="SANS_Futura_Std_Book_11">3,047</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">30 to 39</samp> | <samp class="SANS_Futura_Std_Book_11">8,190</samp>
    |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">30至39岁</samp> | <samp class="SANS_Futura_Std_Book_11">8,190</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">40 to 49</samp> | <samp class="SANS_Futura_Std_Book_11">14,698</samp>
    |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">40至49岁</samp> | <samp class="SANS_Futura_Std_Book_11">14,698</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">50 to 64</samp> | <samp class="SANS_Futura_Std_Book_11">31,007</samp>
    |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">50至64</samp> | <samp class="SANS_Futura_Std_Book_11">31,007</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">65 to 74</samp> | <samp class="SANS_Futura_Std_Book_11">11,441</samp>
    |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">65至74</samp> | <samp class="SANS_Futura_Std_Book_11">11,441</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">75 to 84</samp> | <samp class="SANS_Futura_Std_Book_11">2,079</samp>
    |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">75至84</samp> | <samp class="SANS_Futura_Std_Book_11">2,079</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">85</samp>+ | <samp class="SANS_Futura_Std_Book_11">317</samp>
    |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">85岁及以上</samp> | <samp class="SANS_Futura_Std_Book_11">317</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Greater than 100</samp> | <samp class="SANS_Futura_Std_Book_11">338</samp>
    |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">大于100</samp> | <samp class="SANS_Futura_Std_Book_11">338</samp>
    |'
- en: 'After running the script and reviewing the data it created, I could see that
    some people clearly lied about their birth date: 702 people entered birth dates
    in the future, which would make them younger than 0 years old, and another 338
    people entered dates that would make them older than 100 or even 1,000\. The other
    71,000 people entered birth dates that are likely correct.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行脚本并查看生成的数据后，我可以看到一些人显然在编造自己的出生日期：702人输入了未来的出生日期，这样他们的年龄就变得小于0岁，另外338人输入的日期使得他们的年龄超过100岁甚至1,000岁。其他71,000人输入的出生日期可能是正确的。
- en: I then combined this data with the CDC’s statistics about COVID-19 risks based
    on age, ignoring the obviously fake birth dates. [Table 13-4](#tab13-4) shows
    how many AFLDS patients belong to each age group, along with how likely people
    in that age group were to get infected with COVID-19 and, if infected, how likely
    they were to be hospitalized or die. (All rates are relative to people in the
    18-to-29 age group, because this group has had the most infections.)
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我将这些数据与CDC基于年龄的COVID-19风险统计数据结合起来，忽略了明显虚假的出生日期。[表13-4](#tab13-4)显示了每个年龄组中有多少AFLDS患者，以及该年龄组人群感染COVID-19的可能性，如果感染，住院或死亡的可能性。（所有的比率是相对于18至29岁年龄组的，因为这个组的感染人数最多。）
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 13-4:</samp> <samp class="SANS_Futura_Std_Book_11">AFLDS
    Patients by Age Group and Risk</samp>
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表13-4：</samp> <samp class="SANS_Futura_Std_Book_11">AFLDS患者按年龄组和风险分布</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Age group</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">AFLDS
    patients</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Risk of infection</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Risk of hospitalization</samp> | <samp
    class="SANS_Futura_Std_Heavy_B_11">Risk of death</samp> |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">年龄组</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">AFLDS患者</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">感染风险</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">住院风险</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">死亡风险</samp> |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| <samp class="SANS_Futura_Std_Book_11">0 to 4</samp> | <samp class="SANS_Futura_Std_Book_11">48</samp>
    | <<samp class="SANS_Futura_Std_Book_11">1x</samp> | <<samp class="SANS_Futura_Std_Book_11">1x</samp>
    | <<samp class="SANS_Futura_Std_Book_11">1x</samp> |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">0至4</samp> | <samp class="SANS_Futura_Std_Book_11">48</samp>
    | <samp class="SANS_Futura_Std_Book_11">1x</samp> | <samp class="SANS_Futura_Std_Book_11">1x</samp>
    | <samp class="SANS_Futura_Std_Book_11">1x</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">5 to 17</samp> | <samp class="SANS_Futura_Std_Book_11">159</samp>
    | <samp class="SANS_Futura_Std_Book_11">1x</samp> | <<samp class="SANS_Futura_Std_Book_11">1x</samp>
    | <<samp class="SANS_Futura_Std_Book_11">1x</samp> |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">5至17</samp> | <samp class="SANS_Futura_Std_Book_11">159</samp>
    | <samp class="SANS_Futura_Std_Book_11">1x</samp> | <samp class="SANS_Futura_Std_Book_11">1x</samp>
    | <samp class="SANS_Futura_Std_Book_11">1x</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">18 to 29</samp> | <samp class="SANS_Futura_Std_Book_11">3,047</samp>
    | <samp class="SANS_Futura_Std_Book_11">Reference group</samp> | <samp class="SANS_Futura_Std_Book_11">Reference
    group</samp> | <samp class="SANS_Futura_Std_Book_11">Reference group</samp> |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">18至29</samp> | <samp class="SANS_Futura_Std_Book_11">3,047</samp>
    | <samp class="SANS_Futura_Std_Book_11">参考组</samp> | <samp class="SANS_Futura_Std_Book_11">参考组</samp>
    | <samp class="SANS_Futura_Std_Book_11">参考组</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">30 to 39</samp> | <samp class="SANS_Futura_Std_Book_11">8,190</samp>
    | <samp class="SANS_Futura_Std_Book_11">1x</samp> | <samp class="SANS_Futura_Std_Book_11">2x</samp>
    | <samp class="SANS_Futura_Std_Book_11">4x</samp> |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">30至39</samp> | <samp class="SANS_Futura_Std_Book_11">8,190</samp>
    | <samp class="SANS_Futura_Std_Book_11">1x</samp> | <samp class="SANS_Futura_Std_Book_11">2x</samp>
    | <samp class="SANS_Futura_Std_Book_11">4x</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">40 to 49</samp> | <samp class="SANS_Futura_Std_Book_11">14,698</samp>
    | <samp class="SANS_Futura_Std_Book_11">1x</samp> | <samp class="SANS_Futura_Std_Book_11">2x</samp>
    | <samp class="SANS_Futura_Std_Book_11">10x</samp> |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">40 至 49</samp> | <samp class="SANS_Futura_Std_Book_11">14,698</samp>
    | <samp class="SANS_Futura_Std_Book_11">1倍</samp> | <samp class="SANS_Futura_Std_Book_11">2倍</samp>
    | <samp class="SANS_Futura_Std_Book_11">10倍</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">50 to 64</samp> | <samp class="SANS_Futura_Std_Book_11">31,007</samp>
    | <samp class="SANS_Futura_Std_Book_11">1x</samp> | <samp class="SANS_Futura_Std_Book_11">4x</samp>
    | <samp class="SANS_Futura_Std_Book_11">30x</samp> |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">50 至 64</samp> | <samp class="SANS_Futura_Std_Book_11">31,007</samp>
    | <samp class="SANS_Futura_Std_Book_11">1倍</samp> | <samp class="SANS_Futura_Std_Book_11">4倍</samp>
    | <samp class="SANS_Futura_Std_Book_11">30倍</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">65 to 74</samp> | <samp class="SANS_Futura_Std_Book_11">11,441</samp>
    | <samp class="SANS_Futura_Std_Book_11">1x</samp> | <samp class="SANS_Futura_Std_Book_11">5x</samp>
    | <samp class="SANS_Futura_Std_Book_11">90x</samp> |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">65 至 74</samp> | <samp class="SANS_Futura_Std_Book_11">11,441</samp>
    | <samp class="SANS_Futura_Std_Book_11">1倍</samp> | <samp class="SANS_Futura_Std_Book_11">5倍</samp>
    | <samp class="SANS_Futura_Std_Book_11">90倍</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">75 to 84</samp> | <samp class="SANS_Futura_Std_Book_11">2,079</samp>
    | <samp class="SANS_Futura_Std_Book_11">1x</samp> | <samp class="SANS_Futura_Std_Book_11">9x</samp>
    | <samp class="SANS_Futura_Std_Book_11">220x</samp> |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">75 至 84</samp> | <samp class="SANS_Futura_Std_Book_11">2,079</samp>
    | <samp class="SANS_Futura_Std_Book_11">1倍</samp> | <samp class="SANS_Futura_Std_Book_11">9倍</samp>
    | <samp class="SANS_Futura_Std_Book_11">220倍</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">85</samp>+ | <samp class="SANS_Futura_Std_Book_11">317</samp>
    | <samp class="SANS_Futura_Std_Book_11">1x</samp> | <samp class="SANS_Futura_Std_Book_11">15x</samp>
    | <samp class="SANS_Futura_Std_Book_11">570x</samp> |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">85+</samp> | <samp class="SANS_Futura_Std_Book_11">317</samp>
    | <samp class="SANS_Futura_Std_Book_11">1倍</samp> | <samp class="SANS_Futura_Std_Book_11">15倍</samp>
    | <samp class="SANS_Futura_Std_Book_11">570倍</samp> |'
- en: My script showed that 44 percent of AFLDS patients are between 50 and 64, making
    them 30 times more likely to die from COVID-19 than younger people. Another 16
    percent of AFLDS patients are between 65 and 74, making them 90 times more likely
    to die. In just the two-month period covered by the Cadence patient data, *nearly
    45,000 people* older than 50 rejected science and instead put their trust in AFLDS
    during the COVID-19 pandemic. I wonder how many deaths AFLDS is responsible for.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我的脚本显示，44%的AFLDS患者年龄在50到64岁之间，使他们感染COVID-19后的死亡几率比年轻人高出30倍。另有16%的AFLDS患者年龄在65到74岁之间，这些人死亡几率比年轻人高出90倍。在Cadence患者数据所覆盖的两个月期间，*近45,000名*
    50岁以上的人在COVID-19大流行期间拒绝了科学，反而选择信任AFLDS。我不禁想知道AFLDS究竟为多少死亡负责。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Authenticating the Data</samp>
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">数据验证</samp>
- en: While in the midst of analyzing the data, I knew I also needed to verify that
    this data was authentic before I could publish my findings. The data my source
    gave to me certainly appeared to be authentic, but I wanted to be more confident.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析数据的过程中，我意识到在发布我的研究结果之前，还需要验证这些数据的真实性。我从来源得到的数据看起来确实是可信的，但我希望能够更有把握。
- en: I started by creating an account on Cadence Health’s website. Sure enough, the
    fields I was asked to fill out with account information were the same fields present
    in the Cadence patient data. I also used Firefox’s developer tools to look at
    the web requests my browser was making and saw that it matched the data I had;
    for example, the partner ID associated with my account was 3, the partner ID for
    AFLDS. (I discuss the developer tools built into web browsers like Firefox and
    Chrome in more detail in Appendix B.)
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我首先在Cadence Health的网站上创建了一个账户。果然，我被要求填写的账户信息字段正是Cadence患者数据中存在的字段。我还使用了Firefox的开发者工具查看我的浏览器发出的网络请求，发现它与我拥有的数据一致；例如，与我账户相关的合作伙伴ID是3，正是AFLDS的合作伙伴ID。（我在附录B中会更详细地讨论像Firefox和Chrome这样的网页浏览器内置的开发者工具。）
- en: The data looked legitimate, but I wanted to check that these patients were real
    people. To do that, I decided to cross-reference this data with another dataset.
    Gab, the social network popular among fascists, anti-democracy activists, and
    anti-vaxxers that I first discussed in [Chapter 1](chapter1.xhtml), was hacked
    in early 2021, with 65GB of data leaked to DDoSecrets. This data included about
    38,000 email addresses for Gab users.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 数据看起来很真实，但我想确认这些患者是实际存在的人。为此，我决定将这些数据与另一个数据集交叉验证。Gab 是一个流行于法西斯分子、反民主活动家和反疫苗人士中的社交网络，我在[第
    1 章](chapter1.xhtml)中曾提到过，它在 2021 年初被黑客攻击，65GB 的数据泄露给了 DDoSecrets。这个数据集包括了约 38,000
    个 Gab 用户的电子邮件地址。
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  id: totrans-231
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_21">注意</samp>
- en: '*Due to PII, DDoSecrets distributes its Gab data only to journalists and researchers.
    You can learn more about this dataset at* [https://ddosecrets.com/wiki/GabLeaks](https://ddosecrets.com/wiki/GabLeaks)*.*'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '*由于个人身份信息（PII）问题，DDoSecrets 只将其 Gab 数据分发给记者和研究人员。你可以在* [https://ddosecrets.com/wiki/GabLeaks](https://ddosecrets.com/wiki/GabLeaks)
    *了解更多关于该数据集的信息。*'
- en: I made a list of 72,000 AFLDS patient email addresses, along with a separate
    list of 38,000 Gab user email addresses. I then wrote a Python script to load
    both lists and see if there were any email addresses in common. The script found
    several matches. I started looking through the Gab timeline of each match to see
    if I could find references to AFLDS, specifically to receiving medication, and
    found the verification I was looking for.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我列出了 72,000 条 AFLDS 患者的电子邮件地址，同时列出了 38,000 条 Gab 用户的电子邮件地址。我然后写了一个 Python 脚本来加载这两份名单，看看是否有相同的电子邮件地址。脚本找到了几条匹配项。我开始查看每条匹配项的
    Gab 时间线，看看能不能找到提到 AFLDS，特别是关于接受药物的内容，最终找到了我所需要的验证信息。
- en: 'One 56-year-old patient created their Cadence Health account on July 26, 2021\.
    Their patient record included consultation notes from July 30, the date of their
    phone consultation. On September 4, they posted a link to Gab for a tractor supply
    store that sells ivermectin paste for livestock, asking, “Should I pick some up?”
    Two days later they posted an update: “All sold out!” The day after that, they
    posted a comment saying, “Front line doctors finally came through with HCQ/Zinc
    delivery.” HCQ is short for hydroxychloroquine.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 一名 56 岁的患者在 2021 年 7 月 26 日创建了他们的 Cadence Health 账户。其患者记录包括了 7 月 30 日的咨询记录，那天是他们的电话咨询。9
    月 4 日，他们在 Gab 上发布了一个链接，指向一个出售用于牲畜的伊维菌素膏的拖拉机供应商商店，并问道：“我应该去买一些吗？”两天后，他们发布了更新：“全卖光了！”第二天，他们又发布了评论：“前线医生终于提供了
    HCQ/Zinc 的配送。”HCQ 是羟氯喹的缩写。
- en: '[Figure 13-8](#fig13-8) shows a screenshot from this Gab thread. (Every post
    includes eight usernames; I’ve redacted all of them.)'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 13-8](#fig13-8) 显示了这个 Gab 讨论串的截图。（每条帖子包含八个用户名；我已将它们全部涂黑。）'
- en: The Ravkoo data didn’t include patient email addresses, so I couldn’t think
    of an obvious way to authenticate it with OSINT like I did for the Cadence Health
    data. Instead, I found the phone number for Ravkoo CEO Alpesh Patel and gave him
    a call. After I informed him that I was a journalist, that Ravkoo had been breached,
    and that I had all its prescription records, his immediate response was, “That
    can’t be right. Our platform is secure.” After I emailed him the screenshot of
    Ravkoo’s Super Admin interface, though, I could hear the panic in his voice. “That’s
    a breach in HIPAA, so I have to report that first,” he said, referring to the
    US health care privacy law. “That’s an even more serious issue than your journalism.”
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: Ravkoo 的数据没有包括患者的电子邮件地址，所以我没法像在 Cadence Health 数据中那样，通过 OSINT 认证它。相反，我找到了 Ravkoo
    首席执行官 Alpesh Patel 的电话号码并给他打了电话。告诉他我是记者，Ravkoo 数据泄露了，并且我拥有所有的处方记录后，他的第一反应是，“这不可能，咱们平台是安全的。”不过，在我通过邮件给他发送了
    Ravkoo 超级管理员界面的截图后，我能听到他声音里的恐慌。“那违反了 HIPAA 法规，我必须先报告这件事，”他说，指的是美国的医疗隐私法。“这比你的新闻报道问题更严重。”
- en: He wanted me to tell him the name of the hacker and said he would report all
    of this to the FBI. I didn’t tell him my source’s name, of course. Unless you’re
    actively being compelled by a judge, you’re never obligated to tell anyone anything
    about your sources. In any case, I never learned my source’s name, which helps
    keep it secret.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 他让我告诉他黑客的名字，并表示他会将所有这些情况报告给 FBI。我当然没有告诉他我的消息来源的名字。除非你正在被法官强制要求，否则你永远没有义务向任何人透露关于你的消息来源的任何信息。无论如何，我从来没有知道我消息来源的名字，这有助于保守秘密。
- en: '![A screenshot of the Gab thread described in the previous paragraph. After
    the post “Front line doctors finally came through with HCQ/Zinc delivery,” another
    person replies, “Happy to know that,” and another replies, “Amazon has Ivermectin
    as well. In horse paste. Hope this isn’t some China knock off with nasty in it.”](Images/Figure13-8.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![前一段描述中的Gab线程截图。帖子“前线医生终于通过了HCQ/Zinc的交付”后，另一位回应说：“很高兴知道这个”，还有另一位回应说：“亚马逊也有伊维菌素，还是马用膏剂。希望这不是某种含有有害成分的中国仿制品。”](Images/Figure13-8.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 13-8: A Gab screenshot
    that I used to verify the data</samp>'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图13-8：我用来验证数据的Gab截图</samp>
- en: Patel then said, “I have to call my CTO,” and hung up. Ravkoo had in fact been
    breached. We gave Patel ample opportunity to refute any of the information we
    planned on publishing, but it was all accurate.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: Patel 随后说：“我得打电话给我的CTO”，然后挂断了电话。事实上，Ravkoo 已经被攻破。我们给予了 Patel 充足的机会来反驳我们计划发布的任何信息，但这一切都准确无误。
- en: You can read my full investigative report at [*https://<wbr>theintercept<wbr>.com<wbr>/2021<wbr>/09<wbr>/28<wbr>/covid<wbr>-telehealth<wbr>-hydroxychloroquine<wbr>-ivermectin<wbr>-hacked<wbr>/*](https://theintercept.com/2021/09/28/covid-telehealth-hydroxychloroquine-ivermectin-hacked/).
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [*https://<wbr>theintercept<wbr>.com<wbr>/2021<wbr>/09<wbr>/28<wbr>/covid<wbr>-telehealth<wbr>-hydroxychloroquine<wbr>-ivermectin<wbr>-hacked<wbr>/*](https://theintercept.com/2021/09/28/covid-telehealth-hydroxychloroquine-ivermectin-hacked/)
    阅读我完整的调查报告。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Aftermath</samp>
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">后果</samp>
- en: After completing this in-depth data-driven investigation, the day before The
    Intercept was ready to publish our findings, I reached out to everyone involved
    to explain the revelations that we had discovered and give them a chance to comment.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成这项深入的数据驱动调查后，就在 The Intercept 准备发布我们的调查结果的前一天，我联系了所有相关人员，解释了我们所发现的揭露内容，并给他们提供了评论的机会。
- en: Roque Espinal, Cadence Health’s CEO, said that he had no idea that his platform
    was being used by AFLDS. “I’m totally flabbergasted. I had to look up exactly
    who these people were,” he said. “I’m fully vaccinated. My children are fully
    vaccinated. I’m trying to make heads and tails of this right now.” After I spoke
    with him, Espinal told me he immediately cut off service from SpeakWithAnMD. “I
    don’t want to be associated with any crap like that. None of that quackery that’s
    going on.”
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Cadence Health 的 CEO Roque Espinal 说，他完全不知道他的平台被 AFLDS 使用。“我完全震惊了。我不得不查清楚这些人到底是谁，”他说。“我已经完全接种疫苗了，我的孩子们也完全接种了。我现在正试图搞明白这件事。”在与我交谈后，Espinal
    告诉我他立即切断了与 SpeakWithAnMD 的服务。“我不想与那种垃圾事物有任何关联，绝对不想和那种骗人的行为扯上关系。”
- en: Espinal said that he was invited to a Zoom meeting with representatives from
    AFLDS, SpeakWithAnMD, and “16 different attorneys.” He told me that he said, “I’m
    ending my contract with you guys immediately,” and disconnected from the meeting.
    SpeakWithAnMD’s telehealth system went down that day, and AFLDS patients couldn’t
    pay for $90 consultations for a full week (saving them an estimated $700,000 on
    bogus consultations during that time).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: Espinal 说，他被邀请参加一个Zoom会议，会议上有 AFLDS、SpeakWithAnMD 和“16个不同的律师”代表。他告诉我，他说：“我马上结束与你们的合同”，然后断开了会议。那天，SpeakWithAnMD
    的远程医疗系统崩溃了，AFLDS 的患者无法支付 90 美元的咨询费用，持续了一整周（这期间他们节省了大约 70 万美元的虚假咨询费用）。
- en: Espinal also claimed that Cadence Health didn’t collect credit card payments
    from patients at all—that this was all SpeakWithAnMD’s work. He said that Cadence
    was paid a total of $17,500 for providing service to SpeakWithAnMD (he showed
    me the invoices he’d sent). The latter company went on to rake in millions of
    dollars with the help of the services Cadence provided.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: Espinal 还声称，Cadence Health 根本没有从患者那里收取信用卡支付——这一切都是 SpeakWithAnMD 的工作。他说，Cadence
    总共为提供服务给 SpeakWithAnMD 收到了 17,500 美元（他向我展示了他发送的发票）。后者公司借助 Cadence 提供的服务赚取了数百万美元。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">HIPAA’s Breach Notification
    Rule</samp>
  id: totrans-247
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">HIPAA的泄露通知规则</samp>
- en: 'Espinal told me that Cadence Health didn’t directly host AFLDS’s patient database;
    instead, he said, SpeakWithAnMD hosted it in an AWS account. But Jim Flinn, a
    public relations agent working for SpeakWithAnMD, insisted the opposite: that
    the hacked database was hosted in Cadence Health’s AWS account, not in SpeakWithAnMD’s.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: Espinal 告诉我，Cadence Health 并没有直接托管 AFLDS 的患者数据库；相反，他说，SpeakWithAnMD 将其托管在 AWS
    账户中。但为 SpeakWithAnMD 工作的公共关系代理 Jim Flinn 坚持说法相反：被黑的数据库是托管在 Cadence Health 的 AWS
    账户中，而不是 SpeakWithAnMD 的。
- en: Both sides refuse to admit that health care data was breached from their servers.
    And while Ravkoo Pharmacy began notifying patients of their data breach—something
    that HIPAA required it to do within two months of discovering it—neither SpeakWithAnMD
    nor Cadence Health has followed this rule, and at the time of writing, patients
    haven’t been notified of the breach. One of these companies is in violation of
    HIPAA’s breach notification rule.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 双方都拒绝承认他们的服务器上有医疗数据泄露。尽管Ravkoo Pharmacy开始通知患者其数据泄露事件——根据HIPAA（美国健康保险可携带性和责任法案），该公司必须在发现数据泄露后两个月内通知患者——但SpeakWithAnMD和Cadence
    Health都没有遵守此规定，截至写作时，患者尚未被通知该泄露事件。这两家公司之一违反了HIPAA的泄露通知规则。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Congressional Investigation</samp>
  id: totrans-250
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">国会调查</samp>
- en: In October 2021, the US House of Representative’s Select Subcommittee on the
    Coronavirus Crisis launched an investigation into AFLDS and SpeakWithAnMD based
    on my reporting, as well as reporting on AFLDS by Vera Bergengruen for *Time*
    magazine. The committee’s chair, Rep. James Clyburn, wrote letters to AFLDS founder
    Simone Gold and to Jerome Corsi, owner of SpeakWithAnMD’s parent company, demanding
    detailed records from both companies. These included documents related to ownership,
    organizational structure, and staffing; details about the doctors’ training and
    qualifications; numbers of patients and what they were prescribed; and descriptions
    of the companies’ total revenue and net income for each quarter.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 2021年10月，美国众议院冠状病毒危机特别小组委员会根据我的报道以及Vera Bergengruen为*Time*杂志撰写的关于AFLDS的报道，启动了对AFLDS和SpeakWithAnMD的调查。委员会主席詹姆斯·克莱伯恩代表写信给AFLDS创始人西蒙娜·戈尔德和SpeakWithAnMD母公司所有者杰罗姆·科尔西，要求提供两家公司详细的记录。这些记录包括与公司所有权、组织结构和员工相关的文件；医生的培训和资格细节；病人数目及他们被开具的处方；以及各季度公司总收入和净收入的描述。
- en: “Attempts to monetize coronavirus misinformation have eroded public confidence
    in proven treatments and prevention measures and hindered efforts to control the
    pandemic,” Clyburn wrote in his letter to AFLDS. “Some Americans who have been
    influenced by misinformation have chosen not to get vaccinated, delayed receiving
    evidence-based treatment, and ingested unapproved substances in harmful quantities.”
    Clyburn also wrote a letter to the Federal Trade Commission requesting that the
    agency investigate whether these companies are in violation of federal laws.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: “试图通过冠状病毒虚假信息获利，已经侵蚀了公众对经过验证的治疗和预防措施的信任，并妨碍了控制大流行的努力，”克莱伯恩在给AFLDS的信中写道。“一些受到虚假信息影响的美国人选择不接种疫苗，推迟接受基于证据的治疗，甚至服用未经批准的有害物质。”克莱伯恩还给联邦贸易委员会写信，要求该机构调查这些公司是否违反了联邦法律。
- en: In January 2022, the House committee announced that “despite repeated assurances
    of compliance, SpeakWithAnMD has failed to produce any documents responsive to
    the Select Subcommittee’s requests.” Then in February, after being stonewalled
    by SpeakWithAnMD, Clyburn expanded the committee’s investigation to include Cadence
    Health as well. Unfortunately, nothing more resulted from Congress’s investigation
    into AFLDS, SpeakWithAnMD, and Cadence Health.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 2022年1月，众议院委员会宣布，“尽管反复保证遵守规定，SpeakWithAnMD仍未提供任何响应特别小组委员会要求的文件。”然后在2月，克莱伯恩在被SpeakWithAnMD拒绝回应后，将调查范围扩大至Cadence
    Health。不幸的是，国会对AFLDS、SpeakWithAnMD和Cadence Health的调查没有进一步进展。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Simone Gold’s New
    Business Venture</samp>
  id: totrans-254
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">西蒙娜·戈尔德的新商业冒险</samp>
- en: With a federal investigation into AFLDS underway, the group apparently decided
    it was time to leave the snake oil business and stick to disinformation and anti-vax
    litigation. At the time of writing, SpeakWithAnMD’s website is still online, but
    patients are no longer able to book a telehealth consultation. Cadence Health’s
    website is down—Espinal told me he fired his company’s only customer, SpeakWithAnMD.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在联邦调查对AFLDS展开的情况下，该团体显然决定是时候退出“江湖医生”业务，专注于虚假信息和反疫苗诉讼。截至写作时，SpeakWithAnMD的网站仍然在线，但患者已无法预订远程医疗咨询。Cadence
    Health的网站已经关闭——Espinal告诉我，他解雇了公司唯一的客户——SpeakWithAnMD。
- en: 'Simone Gold herself wasn’t done pushing evidence-free health care. In June
    2022, AFLDS sent a newsletter to its supporters announcing her new venture, GoldCare:
    a telemedicine “health care” service that early adopters could subscribe to for
    $83 a month, designed to entirely replace evidence-based health care. “If you
    are reading this email, you are aware that there is overwhelming evidence that
    the government did its best to kill people during Covid,” Gold wrote. “If you
    prefer not to pay money every month just to play Russian Roulette, you will stop
    feeding the beast and join us. […] Our system is ethical, of the highest quality,
    and will ultimately cost less than conventional insurance.”'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: Simone Gold本人并没有停止推销没有证据支持的医疗服务。2022年6月，AFLDS向支持者发送了一份新闻简报，宣布她的新事业GoldCare：一项远程医疗“健康护理”服务，早期用户可以每月订阅$83，旨在完全替代基于证据的医疗服务。“如果你正在阅读这封邮件，你已经知道有压倒性的证据表明政府在新冠疫情期间竭力害死人民，”Gold写道。“如果你不想每个月花钱去玩俄罗斯轮盘，你就会停止为怪物提供资金，加入我们。[...]我们的系统是道德的，质量最高，并且最终将比传统保险便宜。”
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Scandal and Infighting
    at AFLDS</samp>
  id: totrans-257
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">AFLDS的丑闻与内斗</samp>
- en: Under pressure from California investigators, Gold moved to Naples, Florida.
    As she prepared to serve two months in prison for storming the Capitol on January
    6, 2021, she resigned from her position on the AFLDS board, staying on as a well-paid
    consultant. While she was behind bars, leaders at AFLDS conducted an audit of
    her use of the group’s charity funds. AFLDS had received at least $10 million
    in donations, *in addition* to all of the money it had scammed out of patients.
    While more than a million Americans were dying from COVID-19 during the pandemic,
    what was Gold doing with all that money?
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在加州调查人员的压力下，Gold搬到了佛罗里达州的那不勒斯。在她准备因2021年1月6日冲击国会大厦事件服刑两个月时，她辞去了AFLDS董事会成员职务，继续以高薪顾问身份留任。她在监狱期间，AFLDS的领导们对她使用该组织慈善资金进行了审计。AFLDS至少收到了1000万美元的捐款，*除此之外*，还从患者身上骗取了大量资金。在疫情期间，超过一百万美国人死于新冠，而Gold将所有这些钱用做了什么？
- en: Joey Gilbert, a Nevada lawyer and former professional boxer, took over from
    Gold as chair of the AFLDS board while she was in prison. According to a lawsuit
    filed in November 2022 against Gold by Gilbert and other AFLDS board members,
    Gold lived rent-free with John Strand, her boyfriend who had stormed the Capitol
    with her, in a $3.6 million mansion purchased using AFLDS charity funds. The lawsuit
    also alleged that she was spending $12,000 a month on a bodyguard, $5,600 a month
    for a housekeeper, and $50,000 a month on credit card expenses—all AFLDS’s money.
    Furthermore, it accused her of purchasing three cars, including a Mercedes-Benz,
    and taking unauthorized private jet flights, including a single trip that cost
    $100,000, with AFLDS money.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 乔伊·吉尔伯特（Joey Gilbert），一位内华达州律师和前职业拳击手，在Gold服刑期间接任AFLDS董事会主席。根据吉尔伯特和其他AFLDS董事会成员于2022年11月对Gold提起的诉讼，Gold与她的男朋友约翰·斯特兰（John
    Strand）一起，免费居住在一座价值360万美元的豪宅中，而这座豪宅是用AFLDS的慈善资金购买的。诉讼还指控她每月花费12000美元聘请保镖，每月花费5600美元聘请家政服务员，以及每月花费5万美元用于信用卡消费——这些都是AFLDS的钱。此外，诉讼还指控她购买了三辆车，包括一辆梅赛德斯-奔驰，并且未经授权乘坐私人飞机，包括一次耗费10万美元的航班，这些费用都是由AFLDS支付的。
- en: Finally, the lawsuit accused Gold of hijacking AFLDS resources for her own business.
    Gilbert claimed that Gold used the Naples mansion to house GoldCare employees
    and that she enlisted AFLDS employees to work for GoldCare while on the AFLDS
    payroll. For her part, Gold accused the AFLDS leaders of destroying her nonprofit,
    demanding that they resign. “Just as the mother lioness will not let her baby
    lion be murdered, neither will I,” Gold wrote in an email to them, according to
    an affidavit in the lawsuit.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，诉讼指控Gold将AFLDS的资源挪用到自己的生意上。吉尔伯特声称Gold利用那不勒斯的豪宅接待GoldCare的员工，并且她动用AFLDS的员工为GoldCare工作，同时仍然领取AFLDS的薪水。Gold本人则指控AFLDS领导们摧毁了她的非营利组织，并要求他们辞职。“就像母狮不会让她的幼狮被杀害，我也不会让我的事业被毁灭，”Gold在诉讼中附带的宣誓书中表示，她曾在一封邮件中这样写给AFLDS的领导们。
- en: After Gold was released from prison, she regained control of AFLDS. She locked
    the employees out of their email, pressured an employee to hand over the password
    to the group’s Telegram account with hundreds of thousands of followers, and took
    control over the AFLDS website. There, she posted press releases claiming that,
    while she had discussed resigning from her position, those discussions “were never
    legally actualized” and asserting that she’s the legitimate leader of AFLDS. Gold
    wrote in an email to AFLDS supporters that “the allegations are cetegorically
    [*sic*] false,” and that “under my leadership, AFLDS will never tolerate corruption,
    no matter the personal price.” At the time of publication, the ultimate fate of
    AFLDS is still unknown, but Gold appears to control the reins.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在Gold从监狱获释后，她重新控制了AFLDS。她将员工锁定在其电子邮件之外，迫使一名员工交出该组织Telegram账户的密码，那个账户有数十万粉丝，并且接管了AFLDS的网站。在网站上，她发布了新闻稿，声称尽管她曾讨论过辞去职务，但这些讨论“从未在法律上实现”，并且坚称自己是AFLDS的合法领导人。Gold在给AFLDS支持者的邮件中写道：“这些指控是明确的[*sic*]错误”，并且表示：“在我的领导下，AFLDS绝不会容忍腐败，无论付出个人的代价如何。”在本文发布时，AFLDS的最终命运仍然未知，但Gold似乎掌控着大权。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">总结</samp>
- en: In this chapter, you’ve seen how I turned 100MB of compressed files from an
    anonymous hacker into a groundbreaking report on AFLDS. That report resulted in
    a congressional investigation and contributed to the demise of a corrupt network
    of telehealth companies that profited off the COVID-19 pandemic. I explained exactly
    how I went about investigating the Cadence Health and Ravkoo datasets, all in
    JSON and CSV format. You also read through the Python code I wrote to answer specific
    questions about the data and to convert it into formats that I could visualize—all
    skills that you can use in your own data-heavy investigations. I explained how
    I used OSINT to authenticate the data, as well as the story of AFLDS fracturing
    and descending into chaos in the aftermath.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你看到了我是如何将匿名黑客提供的100MB压缩文件转化为一份开创性的AFLDS报告的。这份报告导致了国会调查，并且促成了一个通过COVID-19疫情获利的腐败远程医疗公司网络的垮台。我详细解释了我是如何调查Cadence
    Health和Ravkoo数据集的，这些数据集全都是JSON和CSV格式的。你还阅读了我编写的Python代码，这些代码帮助我解答有关数据的具体问题，并将数据转换为可以可视化的格式——这些都是你在自己数据密集型调查中可以使用的技能。我还解释了如何使用开放源情报（OSINT）来验证数据的真实性，以及AFLDS在事后分裂并陷入混乱的故事。
- en: The next and final chapter of this book describes another case study in which
    I developed a custom tool to research chat logs from neo-Nazi Discord servers,
    contributing to the victory of a lawsuit against the organizers of the deadly
    2017 Unite the Right rally.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的下一章也是最后一章描述了另一个案例研究，我开发了一种自定义工具，用于研究来自新纳粹Discord服务器的聊天记录，这为2017年致命的“统一右派”集会组织者的诉讼胜利做出了贡献。
