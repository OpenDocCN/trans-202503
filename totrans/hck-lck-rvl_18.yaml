- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">13</samp> <samp class="SANS_Dogma_OT_Bold_B_11">PANDEMIC
    PROFITEERS AND COVID-19 DISINFORMATION</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '*About a month ago, there was an article printed in a newspaper I had never
    heard of called The Intercept. I discovered that The Intercept is a rag far left
    of the* New York Times. *They printed an article alleging that the telemedicine
    company to which America’s Frontline Doctors referred people—a third-party telemedicine
    company—had had patient data breaches, that it had been hacked. This got the telemedicine
    company, of course, very nervous. They thought they had good firewalls up. They
    spent about $200,000 to prove that there was no actual hack, that it was all made
    up. It was all a lie. But it was the basis for Congressman Clyburn’s investigation
    into me! And I thought to myself, That sounds very familiar. A fake story in a
    rag paper.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Dr. Simone Gold, founder of America’s Frontline Doctors, speaking at a November
    2021 event hosted by the David Horowitz Freedom Center, an Islamophobic hate group,
    in Palm Beach, Florida
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: On September 11, 2021, an anonymous hacker sent me about 100MB of compressed
    data from, in the words of my source, “the horse paste peddlers.” My source was
    looking into America’s Frontline Doctors (AFLDS), an anti-science propaganda group
    founded in 2020 to support President Trump in his opposition to public health
    policies during the coronavirus pandemic.
  prefs: []
  type: TYPE_NORMAL
- en: AFLDS, along with a small network of telehealth companies that my source told
    me were “hilariously easy” to hack, falsely claims to its sizable online audience
    that COVID-19 vaccines are dangerous and ineffective. It also promotes the drugs
    hydroxychloroquine (commonly used to treat malaria and lupus) and ivermectin (commonly
    used as a dewormer in livestock) as miracle cures for the virus. AFLDS creates
    high-quality anti-vaccine propaganda videos and distributes them to hundreds of
    thousands of followers across social media platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'The hacker sent me two datasets from two separate companies: Cadence Health,
    which ran the platform AFLDS used to give telehealth consultations to patients,
    and Ravkoo Pharmacy, which filled prescriptions for these drugs. After investigating
    over 1GB of JSON and CSV files cumulatively contained in the decompressed datasets,
    I discovered that AFLDS and its partners duped tens of thousands of people into
    seeking ineffective treatments and charged them at least $15 million—likely much
    more—for consultations and prescriptions for these drugs.'
  prefs: []
  type: TYPE_NORMAL
- en: The revelations from my investigation led the US House Select Subcommittee on
    the Coronavirus Crisis, headed by Rep. James Clyburn (D-SC), to open an investigation
    into AFLDS and SpeakWithAnMD; technically, AFLDS worked directly with SpeakWithAnMD
    for providing telehealth consultations, and Cadence Health was SpeakWithAnMD’s
    vendor for managing the technology. Clyburn called these groups “predatory actors”
    that have been “touting misinformation and using it to market disproven and potentially
    hazardous coronavirus treatments.” The committee recommended that the Federal
    Trade Commission open its own investigation into these companies and later expanded
    its investigation to also cover Cadence Health.
  prefs: []
  type: TYPE_NORMAL
- en: Also in response to my reporting, other reporting on AFLDS, and pro-science
    activism in the medical community, the Medical Board of California (MBC) opened
    an investigation into Dr. Simone Gold, the founder of AFLDS, to determine if she
    should be stripped of her medical license. (At the time of writing, she is still
    licensed in California, as well as in Florida, where she has since moved.) AFLDS
    later accosted MBC president Kristina Lawson in a parking garage with cameras
    as part of an anti-science propaganda video it was producing.
  prefs: []
  type: TYPE_NORMAL
- en: Because the AFLDS dataset is full of medical records and PII, none of it is
    public, so you won’t be able to work with it yourself. Instead, I’ll describe
    the data, show redacted pieces of it, and show snippets of the Python code I wrote
    to make sense of it. If a similar dataset ever drops in your lap, the skills you’ve
    learned in this book so far and the strategies described in this chapter, along
    with perhaps some additional independent study, should enable you to investigate
    it just like I did.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Origins of AFLDS</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we get into the dataset, let’s take a look at how AFLDS was founded,
    including its ties to Trump’s 2020 reelection campaign and the conservative advocacy
    group the Tea Party Patriots, as well as exactly how AFLDS’s extremely profitable
    scheme succeeded in swindling vaccine skeptics into spending millions of dollars
    on phone consultations and bogus medicine for COVID-19.
  prefs: []
  type: TYPE_NORMAL
- en: On May 11, 2020, a senior staffer in Donald Trump’s reelection campaign and
    the Republican activist group CNP Action held a conference call. An audio recording
    of this call was leaked to Center for Media and Democracy, a progressive watchdog
    group, which gave a copy of the recording to the Associated Press (AP), which
    in turn reported on it. A key topic of discussion was reportedly finding “extremely
    pro-Trump doctors” to go on TV and defend Trump’s plan to rapidly reopen the economy,
    despite the more cautious safety guidance coming from the Centers for Disease
    Control and Prevention (CDC). Nancy Schulze, a Republican Party activist married
    to a former Republican member of Congress, said on the call that she had a list
    of doctors willing to defend Trump’s policies and that “those are the types of
    guys that we should want to get out on TV and radio to help push out the message.”
  prefs: []
  type: TYPE_NORMAL
- en: Dr. Gold was the “extremely pro-Trump doctor” they were looking for. During
    AP’s reporting of this conference call, a public relations firm distributed an
    open letter to Trump signed by over 400 doctors, calling the pandemic lockdown
    policies a “mass casualty event.” Dr. Gold’s signature was at the top of the letter,
    though she denied coordinating her efforts with the Trump campaign. This open
    letter was released after AP had sent requests for comment to individuals on the
    call and to Trump’s reelection campaign, but before it had published its article.
    This letter appears to be, at least in part, an attempt to preempt the article
    with a positive spin, something that might happen when you reach out for comment
    while doing adversarial journalism, as discussed in [Chapter 1](chapter1.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: In June 2020, weeks after the conference call and the open letter, Gold founded
    an Arizona nonprofit called the Free Speech Foundation. The enterprise started
    with a million-dollar annual budget and fiscal sponsorship from the Tea Party
    Patriots Foundation, the major US conservative organization introduced in [Chapter
    2](chapter2.xhtml). AFLDS launched on July 27, 2020, as a Free Speech Foundation
    project. Gold, along with other doctors in white lab coats, held a press conference
    on the steps of the Supreme Court building where they falsely claimed that a cocktail
    of hydroxychloroquine, azithromycin, and zinc could cure COVID-19\. The event
    was livestreamed on Breitbart. Then-President Trump shared videos of the press
    conference on Twitter, garnering millions of views before tech companies took
    them down for violating rules against pandemic misinformation.
  prefs: []
  type: TYPE_NORMAL
- en: In early 2021, well into the pandemic, AFLDS set up a system on its website
    to sell $90 telemedicine consultations so people could get prescriptions for hydroxychloroquine—a
    drug that, at that point in the pandemic, had already been debunked as a treatment
    for COVID-19\. On January 3, Gold told a packed, maskless church audience in Tampa,
    Florida, that AFLDS made “hydroxychloroquine available for the entire nation by
    going to our website. Then you can consult with a telemedicine doctor. And whether
    you have COVID, or you don’t have COVID, or you’re just worried about getting
    COVID, you can get yourself a prescription and they mail it to you.” She insisted,
    “The big fight wasn’t the virus, it was the fear.”
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 13-1](#fig13-1) shows the AFLDS website advertising prescriptions for
    COVID-19 “medication.”'
  prefs: []
  type: TYPE_NORMAL
- en: If one of AFLDS’s hundreds of thousands of followers watched one of the group’s
    anti-vaccine propaganda videos and decided that they needed ivermectin or hydroxychloroquine,
    first they would click the prominent Contact a Physician button on the AFLDS home
    page. This brought them to SpeakWithAnMD, the telehealth partner’s website. Clicking
    the button on that site to book a consultation sent the patient to a page to create
    an account at Cadence Health, a vendor of SpeakWithAnMD. Cadence Health provided
    the actual telehealth platform that SpeakWithAnMD used.
  prefs: []
  type: TYPE_NORMAL
- en: '![This shows a screenshot of https://aflds.org, with a header that says, “How
    to Obtain Covid-19 Medi­cation,” and the description, “Click the button below
    to book a telemedicine consultation with a licensed physician. These video-based
    consultations can be scheduled at your convenience to obtain medication for COVID-related
    symptoms.” The image shows a doctor in a lab coat holding hydroxychloroquine.](Images/Figure13-1.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 13-1: The home page
    on AFLDS’s website from March 4, 2022</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The patient would then fill out a form answering medical questions; click through
    the disclaimer “As a potential patient, I acknowledge and understand that the
    Hydroxychloroquine (HCQ) and Ivermectin have been deemed ‘Highly Not Recommended’
    by the WHO, FDA, CDC, and NIH”; and enter their credit card information to pay
    $90 for a consultation. In the next few days, the patient would receive a phone
    call from someone in AFLDS’s network of physicians, who would write them a prescription
    for the unproven drugs. ABC News paid the $90, got a call from someone who wrote
    them a prescription for ivermectin, and recorded the prescriber saying, “I don’t
    have any medical knowledge as far as the medicine, or even about COVID.”
  prefs: []
  type: TYPE_NORMAL
- en: At the time, the prescriptions were almost always processed through the online
    pharmacy Ravkoo. The patient would call Ravkoo, read their credit card number
    on the phone, and get the drugs mailed to their door. Sometimes they would be
    charged as much as $700 for ivermectin; Ravkoo didn’t accept health insurance
    for these sales.
  prefs: []
  type: TYPE_NORMAL
- en: When I started this investigation, I wasn’t familiar with any of these companies.
    It was obvious that AFLDS was in the business of misleading its followers about
    public health so it could sell ineffective alternatives for preventing and treating
    COVID-19\. But I didn’t know how SpeakWithAnMD, Cadence Health, or Ravkoo fit
    into the scheme. Were they in on the AFLDS scam, or were they legitimate businesses
    that just happened to work with AFLDS?
  prefs: []
  type: TYPE_NORMAL
- en: Next, I’ll show you step-by-step how I unraveled this entire COVID-19 pandemic
    profiteering scheme, starting with a description of the datasets that my hacker
    source sent me.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Cadence Health and Ravkoo Datasets</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The 100MB of compressed data from my source included records for hundreds of
    thousands of patients, in two separate files. This section describes how I stored
    and extracted these sensitive documents, revisits some basic command line data
    analysis (as you learned about in [Chapter 4](chapter4.xhtml)), and describes
    some of the key types of data I discovered in the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Extracting the Data
    into an Encrypted File Container</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Because patient records are more sensitive than other medium-sensitivity data,
    I took additional precautions to secure this dataset and my work with it. I created
    an encrypted file container, a 5GB encrypted file that I could unlock with a strong
    passphrase stored in my password manager. This is where I saved the original dataset,
    as well as all of my notes, code, and other files related to this investigation,
    giving me an extra layer of protection in case my computer is ever compromised.
    Even then, whoever accesses my data won’t be able to access the patient records
    without knowing the passphrase.
  prefs: []
  type: TYPE_NORMAL
- en: I used Linux software called zuluCrypt to manage my encrypted file container,
    but VeraCrypt, which you learned about in [Chapter 1](chapter1.xhtml), would also
    have been a good option and is available on any operating system. ZuluCrypt is
    similar to VeraCrypt, but it’s slightly nicer to use and works only in Linux.
    I could also have used Disk Utility in macOS to create encrypted DMG files.
  prefs: []
  type: TYPE_NORMAL
- en: 'My source sent me two tarball files: *hipaa_special.tar.zst* (33MB) and *horse_around_find_out.tar.zst*
    (74MB). Here’s a listing of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In [Chapter 11](chapter11.xhtml), you worked with a similar file format, *.tar.gz*,
    where files are compressed using the GZIP algorithm. These *.tar.zst* files were
    compressed using a different algorithm, Zstandard. Installing the Zstandard package
    allowed me to uncompress this type of file using the command <samp class="SANS_TheSansMonoCd_W5Regular_11">tar
    -xf</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">filename</samp>.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">-xf</samp> argument combines
    <samp class="SANS_TheSansMonoCd_W5Regular_11">-x</samp>, which tells <samp class="SANS_TheSansMonoCd_W5Regular_11">tar</samp>
    to extract the file, and <samp class="SANS_TheSansMonoCd_W5Regular_11">-f</samp>,
    which indicates that the following argument is the filename that you’re extracting.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">tar</samp> program detects that
    this is a Zstandard file and uses <samp class="SANS_TheSansMonoCd_W5Regular_11">zstd</samp>
    to uncompress it. Finally, because <samp class="SANS_TheSansMonoCd_W5Regular_11">tar</samp>
    extracts a file into the current working folder, I created new folders, changed
    to them, and then extracted the data into that folder. For example, here’s how
    I extracted *hipaa_special.tar.zst*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you learned in [Chapter 3](chapter3.xhtml), these commands make a new folder
    called *hipaa_special*, change to that folder, and then extract the *hipaa_special.tar.zst*
    file from the parent folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Likewise, the following commands change to the parent folder, make a new folder
    called *horse_around_and_find* out, change to that folder, and then extract *horse_around_find_out.tar.zst*
    into that folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After extracting these folders, I did what I always do the first time I encounter
    any new dataset: start measuring it with command line tools.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Analyzing the Data
    with Command Line Tools</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'First, I wanted to know how much disk space these files took up and how many
    files were in each folder. I used the command line tricks described in [Chapter
    4](chapter4.xhtml) to figure this out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Because I ran these commands on my Mac, I used the <samp class="SANS_TheSansMonoCd_W5Regular_11">gdu</samp>
    command from the <samp class="SANS_TheSansMonoCd_W5Regular_11">coreutils</samp>
    Homebrew package to estimate disk space (rather than the <samp class="SANS_TheSansMonoCd_W5Regular_11">du</samp>
    command for Linux). The <samp class="SANS_TheSansMonoCd_W5Regular_11">find</samp>
    command created a list of files in the given folder, and that list was piped into
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">wc -l</samp> command, which
    counted the number of files listed. My output showed that the *hipaa_special*
    folder took 493MB of space and contained 281,546 files, and the *horse_around
    _find_out* folder took 691MB of space and contained 215 files. Let’s look at one
    at a time.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Viewing the hipaa_special
    Folder</samp>
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'It was clear at this point that *hipaa_special* contained far more files than
    I could manually read. I ran the following command to view the first few lines
    of filenames in the *hipaa_special* folder listing, so I could get a feel for
    what was in there and start opening some of those files next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: My code piped the output of the <samp class="SANS_TheSansMonoCd_W5Regular_11">ls</samp>
    command into the <samp class="SANS_TheSansMonoCd_W5Regular_11">head</samp> command,
    which by default displays the first 10 lines of input. This way, I didn’t need
    to watch hundreds of thousands of filenames scroll by just to get a sense of the
    folder’s contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'My output showed that the folder contains small files with numeric filenames
    and no file extensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When I opened one of these files in VS Code, I could quickly see that it was
    a JSON file. Each of these files, I discovered, was a record for a different user
    in Cadence Health’s system. For example, [Listing 13-1](#list13-1) shows a redacted
    version of the file *244273*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-1: An example JSON
    file from</samp> <samp class="SANS_Futura_Std_Book_11">hipaa_special</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: I could see that the filename (*244273*) matched the patient’s user ID ❶. The
    record also includes a reference to a partner ❷. This value is in an odd format,
    but I quickly discovered that it’s a comma-separated list of partner IDs with,
    for some reason, blank values at the beginning and end of the list. I don’t know
    why Cadence Health chose to represent which partners each patient belonged to
    as a string rather than a JSON array, which would have been cleaner. Once I figured
    out that they had made this choice, though, it was simple enough to work around.
    I discovered that the vast majority of the patients have a value of <samp class="SANS_TheSansMonoCd_W5Regular_11">,3,</samp>
    for <samp class="SANS_TheSansMonoCd_W5Regular_11">partner</samp>, which, as you’ll
    see later in this chapter, means they’re AFLDS patients.
  prefs: []
  type: TYPE_NORMAL
- en: The record also includes the patient’s name, email, address, date of birth,
    other personal information, and detailed consultation notes. In some of the patient
    records, the <samp class="SANS_TheSansMonoCd_W5Regular_11">consultationNotes</samp>
    array ❸ is empty, but in this case, it lists details. I assume that patients with
    empty consultation notes created an account in the Cadence Health system but never
    paid the $90 and therefore didn’t have any telehealth consultations. The patient
    from this file had their $90 phone consultation on September 4, 2021, at 1:47
    PM ❹.
  prefs: []
  type: TYPE_NORMAL
- en: This dataset includes patient records similar to that shown in [Listing 13-1](#list13-1)
    for 281,000 patients.
  prefs: []
  type: TYPE_NORMAL
- en: My source told me that they had created their own account in the Cadence Health
    system while they were hacking it. As they used the website, they watched exactly
    which URLs their web browser loaded. When they noticed that the URL that returned
    their own patient record included their patient ID, they tried loading similar
    URLs with other IDs. Those URLs returned other users’ patient records. Therefore,
    my source simply wrote a script to download all 281,000 patient records and stored
    them in individual JSON files. The *hipaa_special.tar.zst* file contains the output
    of that script.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Viewing the horse_around_find_out
    Folder</samp>
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The *horse_around_find_out* folder is much smaller and easier to deal with.
    I ran the following command to find out what files it contained (this folder contains
    a small enough number of files that there was no reason to pipe it into <samp
    class="SANS_TheSansMonoCd_W5Regular_11">head</samp>):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'My output showed that the files in this folder are mostly JSON files from Cadence
    Health and CSVs from the Ravkoo pharmacy site, as well as a few other files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: I started manually opening these files to see what they contain. The *cadence_api.txt*
    file appears to contain a few hundred lines of JavaScript code that lists URLs
    within the Cadence Health API, possibly used by the hacker to download the data.
    The *cadence_js* folder contains several inscrutable JavaScript files, probably
    the code that powered the Cadence Health website itself.
  prefs: []
  type: TYPE_NORMAL
- en: The folder also contains the file *ravkoo_screenshot.png*, a screenshot from
    Ravkoo’s Super Admin interface, shown in [Figure 13-2](#fig13-2). I never had
    access to the interface itself, just this screenshot. It appears that the links
    on the left represent tables of data from Ravkoo’s database, and the information
    on the right displays all of the data from a selected table.
  prefs: []
  type: TYPE_NORMAL
- en: My source told me that they had discovered a secret URL for this admin interface,
    though they didn’t explain exactly how they found it. Anyone could create an account
    on Ravkoo’s system, and as long as they were logged in, they could go to the URL
    for this interface. From there, they could click the table names in the list on
    the left to access all of Ravkoo’s data from their web browser. My source built
    the CSV files they sent me (*ravkoo_contact .csv*, *ravkoo_drugs.csv*, and so
    on) by scraping the data from the Ravkoo Super Admin interface, just as @donk_enby
    did to create the Parler dataset. (See Appendix B for more information on web
    scraping.)
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the Ravkoo Super Admin web interface. To the left it lists
    different types of data: Users, Drugs, Patients, and more. Insurances is selected
    in this list. On the right, the header is Insurance Masters, and beneath it is
    a table of insurance data, including insurance ID, Plan code, and Plan name.](Images/Figure13-2.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 13-2: A screenshot from
    the secret Ravkoo Super Admin interface</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: I could see that the *horse_around_and_find_out* folder contained mostly JSON
    and CSV files, but I needed to do more research to determine their significance.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Viewing the cadence_allpatients_all.json
    File</samp>
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: I started by looking at the largest file in *horse_around_and_find_out*, the
    387MB *cadence_allpatients_all.json* file. This enormous JSON object lists information
    about every Cadence Health patient, including much of the same data listed in
    the *hipaa_special* patient records. [Listing 13-2](#list13-2) shows a redacted
    section of the data from this file for a single patient.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-2: An example JSON
    object describing a patient in</samp> <samp class="SANS_Futura_Std_Book_11">cadence_allpatients_all.json</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Many of these fields have a value of <samp class="SANS_TheSansMonoCd_W5Regular_11">null</samp>,
    meaning they’re empty. The Cadence Health software likely made it optional to
    collect this information, and AFLDS chose not to do so for its patients. The value
    of the <samp class="SANS_TheSansMonoCd_W5Regular_11">ssn</samp> field (presumably
    for Social Security number) is <samp class="SANS_TheSansMonoCd_W5Regular_11">999999999</samp>
    in this example. All patients in this JSON file have their SSN set either to this
    number or to <samp class="SANS_TheSansMonoCd_W5Regular_11">null</samp>, so it
    appears that this dataset doesn’t include real SSNs. The *cadence_allpatients_all.json*
    file also included each user’s password hash. Someone with all these password
    hashes could potentially recover the original passwords for users without strong
    passwords. The value of <samp class="SANS_TheSansMonoCd_W5Regular_11">created_at</samp>
    appears to be the timestamp for when this patient record was created—in other
    words, when this person created their account.
  prefs: []
  type: TYPE_NORMAL
- en: After reading through several patient records in my text editor, I had a decent
    understanding of the type of data in this file, so I moved on to examining the
    smaller files.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Viewing the cadence_health_partners.json
    File</samp>
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The *cadence_health_partners.json* file contains a JSON object with a list of
    17 of Cadence’s partners, such as America’s Frontline Doctors, SpeakWithAnMD,
    and Dr. Zelenko. [Listing 13-3](#list13-3) shows a redacted example of the AFLDS
    partner from that file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-3: An example JSON
    object describing a partner in</samp> <samp class="SANS_Futura_Std_Book_11">cadence_health_partners
    .json</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Each partner has unique <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp> fields, along with
    many others that describe the partner’s settings. The first lines of this JSON
    object show that AFLDS’s <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    is <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>. The <samp class="SANS_TheSansMonoCd_W5Regular_11">practices</samp>
    field is a string containing a comma-separated list of telehealth consultation
    types that this partner offers (<samp class="SANS_TheSansMonoCd_W5Regular_11">covid19</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">followupvisit</samp>, in this
    case). This JSON object includes secret tokens for payment processors in the lines
    with fields for <samp class="SANS_TheSansMonoCd_W5Regular_11">one_merchant _security_key</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">stripe_secret_key</samp>, which
    I’ve redacted. The <samp class="SANS_TheSansMonoCd_W5Regular_11">virtual_visit
    _price</samp> field is a JSON object containing other fields for each type of
    practice this partner offers and, in this case, shows that AFLDS charges $90 for
    COVID-19 visits and $59.99 for follow-up visits.
  prefs: []
  type: TYPE_NORMAL
- en: After reviewing *cadence_health_partners.json* and the patient data in the *hipaa_special*
    folder, I noticed a relationship between the two. Each partner’s JSON object has
    an <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>, and each patient has
    a <samp class="SANS_TheSansMonoCd_W5Regular_11">partner</samp> field. [Listing
    13-3](#list13-3) shows that AFLDS’s partner <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>
    is <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>, indicating that the
    patient in [Listing 13-1](#list13-1) with a <samp class="SANS_TheSansMonoCd_W5Regular_11">partner</samp>
    value of <samp class="SANS_TheSansMonoCd_W5Regular_11">,3,</samp> was an AFLDS
    patient.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">The ravkoo_rxdata.csv File</samp>
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Of the six Ravkoo files, I found that *ravkoo_rxdata.csv* was by far the biggest.
    [Figure 13-3](#fig13-3) shows a portion of the data in this spreadsheet.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot from LibreOffice Calc of ravkoo_rxdata.csv, a spreadsheet with
    many rows and columns. Each row represents a different drug prescription. Most
    of the values in the DrugName column are hydroxychloroquine, ivermectin, or azithromycin.](Images/Figure13-3.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 13-3: Viewing</samp>
    <samp class="SANS_Futura_Std_Book_11">ravkoo_rxdata.csv</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">in
    LibreOffice Calc format</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: This 149MB CSV spreadsheet contained 340,000 rows of data, each representing
    a prescription filled. Each prescription included the name and dosage of the drug,
    usage instructions, information about refills, the date it was filled, a Remarks
    column (where many of the rows list <samp class="SANS_TheSansMonoCd_W5Regular_11">AMERICAS
    FRONT LINE DOCTORS—ENCORE</samp>), and other information.
  prefs: []
  type: TYPE_NORMAL
- en: After a cursory review of *ravkoo_rxdata.csv*, it was clear that it might contain
    revelations about how much money AFLDS and the companies it worked with charged
    for bogus COVID-19 health care. However, its current format would make it difficult
    to work with. I needed to transform the data in order to more easily make sense
    of it.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Creating a Single Spreadsheet of Patients</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I wanted to separate the AFLDS patients who had paid $90 for phone consultations
    from the total list of patients, many of whom had never paid, so I could get a
    clearer idea of the scale of AFLDS’s scam. For each of these paying patients,
    I wanted to find their name, gender, birth date, the date they created their Cadence
    Health account, and the number of telehealth consultations they had.
  prefs: []
  type: TYPE_NORMAL
- en: The *cadence_allpatients_all.json* file contained information about all of the
    patients, including the previously discussed <samp class="SANS_TheSansMonoCd_W5Regular_11">created_at</samp>
    timestamp. However, it didn’t include the consultation notes, and I needed those
    to determine how many consultations the patient actually had. Meanwhile, the 281,000
    JSON files in the *hipaa_special* folder had information about all of the patients,
    including consultation notes, but it didn’t have the <samp class="SANS_TheSansMonoCd_W5Regular_11">created_at</samp>
    timestamp.
  prefs: []
  type: TYPE_NORMAL
- en: 'I decided to write a Python script to comb through the *cadence _allpatients_all.json*
    file and all the files in the *hipaa_special* folder, pull out the information
    I was looking for, and save it all in a single CSV. Here’s the Python code for
    my script (you can also find a copy in the book’s GitHub repo at [*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-13<wbr>/create<wbr>-aflds<wbr>-patients<wbr>-csv<wbr>.py*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-13/create-aflds-patients-csv.py)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You won’t be able to run this or any other script in this chapter without a
    copy of the private dataset, so I’ll summarize how it worked.
  prefs: []
  type: TYPE_NORMAL
- en: First, the script loaded *cadence_allpatients_all.json* as a Python object.
    It then looped through each patient in that object, keeping track of which <samp
    class="SANS_TheSansMonoCd_W5Regular_11">user_id</samp> mapped to which <samp class="SANS_TheSansMonoCd_W5Regular_11">created_at</samp>
    timestamp in a dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: It created an empty list called <samp class="SANS_TheSansMonoCd_W5Regular_11">aflds_patients</samp>
    and then looped through every filename in the *hipaa_special* folder, where each
    file represents a different patient. For each filename, it loaded the corresponding
    JSON file as a Python object representing a patient. If the <samp class="SANS_TheSansMonoCd_W5Regular_11">partner</samp>
    field included the ID 3 (meaning that the record was associated with AFLDS), and
    if the length of the <samp class="SANS_TheSansMonoCd_W5Regular_11">consultationNotes</samp>
    field was greater than 0 (meaning there was at least one consultation), then it
    added this patient to the <samp class="SANS_TheSansMonoCd_W5Regular_11">aflds_patients</samp>
    list, making sure to include the patient’s <samp class="SANS_TheSansMonoCd_W5Regular_11">created_at</samp>
    timestamp, too.
  prefs: []
  type: TYPE_NORMAL
- en: It opened a new CSV file, *aflds-patients.csv*, for writing, and then wrote
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">aflds_patients</samp> list as
    rows in the CSV file.
  prefs: []
  type: TYPE_NORMAL
- en: After working through the exercises in this book, you should have all the skills
    you need to write your own similar scripts. This is true for all of the scripts
    I wrote for this investigation, which you’ll see throughout this chapter. For
    example, in [Chapter 8](chapter8.xhtml), you learned about dictionaries and lists;
    in [Chapter 9](chapter9.xhtml), you learned how to use the <samp class="SANS_TheSansMonoCd_W5Regular_11">csv</samp>
    module to create your own CSV spreadsheets; and in [Chapter 11](chapter11.xhtml),
    you learned how to load and work with data in JSON format. This script incorporates
    all these techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Running this script created a 6.4MB CSV file called *aflds-patients.csv* with
    72,000 rows. [Figure 13-4](#fig13-4) shows a redacted view of this spreadsheet.
    As you can see, this data is significantly easier to make sense of compared to
    hundreds of thousands of small JSON files, and one enormous one.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the CSV spreadsheet I created with my Python script. Each
    row is an AFLDS patient, and it lists redacted information like their names, email
    addresses, and cities of residence.](Images/Figure13-4.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 13-4: A redacted view
    of</samp> <samp class="SANS_Futura_Std_Book_11">aflds-patients.csv</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: This spreadsheet lists the 72,000 AFLDS patients who were referred to SpeakWithAnMD
    and actually bought a $90 consultation. If each patient paid $90, these consultations
    alone would have cost them, collectively, $6.4 million. Many of the patients had
    multiple consultations, so I estimate patients were charged *$6.7 million* from
    consultations alone. There’s no way of knowing just from this data how the money
    was distributed, but it was likely split between AFLDS, individual physicians
    in its network, and SpeakWithAnMD.
  prefs: []
  type: TYPE_NORMAL
- en: My source’s dataset included all of the patient data in Cadence Health’s database.
    When I sorted the spreadsheet on the <samp class="SANS_TheSansMonoCd_W5Regular_11">created_at</samp>
    column, which includes the dates each patient created their Cadence account, I
    could see that the earliest patients made their accounts on July 16, 2021, and
    the latest patients created theirs on September 12, 2021, when my source hacked
    Cadence Health. While only 72,000 patients paid for $90 consultations, I had data
    for an additional 180,000 AFLDS patients who created Cadence accounts but never
    had a consultation, meaning that 90 percent of the 281,000 patients in the Cadence
    Health database during this time span were referred by AFLDS.
  prefs: []
  type: TYPE_NORMAL
- en: While AFLDS had been selling $90 consultations since January 2021, Roque Espinal,
    Cadence Health’s CEO, confirmed to me that his service for SpeakWithAnMD launched
    on July 16\. Since this is the date of the earliest patient data I have, this
    means that my source collected records for *all* of Cadence’s patients. My source’s
    data shows that in the two-month period between July and September, AFLDS charged
    its patients an average of $100,000 a day from $90 consultations alone. If AFLDS
    brought in that much each day during the first half of the year as well, it would
    have brought in an additional *$18 million* in revenue. Again, this is just from
    selling consultations; it doesn’t include the cost of the prescription drugs.
  prefs: []
  type: TYPE_NORMAL
- en: At this point in my investigation, it was clear that AFLDS was spreading medical
    disinformation, and it seemed evident that SpeakWithAnMD and Ravkoo were at least
    aware of this and were profiting from it as well. However, I wasn’t sure if Cadence
    Health, which provided a service to SpeakWithAnMD, had realized what its service
    was being used for. But before exploring that further, I decided to switch gears
    and start looking at Ravkoo’s drug prescription data.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Calculating Revenue from Prescriptions
    Filled by Ravkoo</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *ravkoo_rxdata.csv* spreadsheet introduced earlier has 340,000 rows, each
    representing a prescription that was filled. It includes a <samp class="SANS_TheSansMonoCd_W5Regular_11">DrugName</samp>
    column with values like <samp class="SANS_TheSansMonoCd_W5Regular_11">IVERMECTIN
    3 MG TABLET</samp>, a <samp class="SANS_TheSansMonoCd_W5Regular_11">cost</samp>
    column with the price of that prescription, and a <samp class="SANS_TheSansMonoCd_W5Regular_11">Fill_Date</samp>
    column with the date that the prescription was filled.
  prefs: []
  type: TYPE_NORMAL
- en: By sorting the spreadsheet by <samp class="SANS_TheSansMonoCd_W5Regular_11">Fill_Date</samp>,
    I could see that the Ravkoo pharmacy filled the first prescription on November
    27, 2020, and the last ones were filled on August 24, 2021\. The SpeakWithAnMD
    data covers a two-month period, but the Ravkoo data covers a nine-month period.
    That is, my dataset contained two months’ worth of patient records, but nine months’
    worth of prescription records. In this section I describe the Python code I wrote
    to gain a better understanding of what drugs Ravkoo sold and how much of them
    related to quack cures for COVID-19.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Finding the Price
    and Quantity of Drugs Sold</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To find out how much money Ravkoo charged patients for each specific drug, I
    wrote another script, shown in [Listing 13-4](#list13-4) (you can also find a
    copy of it at [*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-13<wbr>/create<wbr>-ravkoo<wbr>-csv<wbr>.py*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-13/create-ravkoo-csv.py)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-4: The Python script</samp>
    <samp class="SANS_Futura_Std_Book_11">create-ravkoo-csv.py</samp><samp class="SANS_Futura_Std_Book_Oblique_I_11">,
    which adds up Ravkoo prescriptions and drug costs and exports a CSV of the results</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: First this script created an empty dictionary called <samp class="SANS_TheSansMonoCd_W5Regular_11">drugs</samp>,
    which mapped drug names to another dictionary containing <samp class="SANS_TheSansMonoCd_W5Regular_11">prescription_count</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">total_cost</samp> values. It
    then loaded *ravkoo_rxdata.csv* and looped through its rows. For each row, if
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">DrugName</samp> wasn’t in the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">drugs</samp> dictionary yet, the
    script added it, then incremented the drug’s prescription count by 1 and added
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">Cost</samp> value to that drug’s
    total cost. It saved all of the data in <samp class="SANS_TheSansMonoCd_W5Regular_11">drugs</samp>
    into a CSV called *ravkoo.csv*. Finally, the script counted up the total number
    of prescriptions and the total cost for *all* drugs sold to all patients and displayed
    it in the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the output I got when I ran the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: My output showed that patients paid over $15 million to Ravkoo for all the prescriptions
    in the hacked data. However, many of these prescriptions might not have anything
    to do with AFLDS or bogus COVID-19 cures.
  prefs: []
  type: TYPE_NORMAL
- en: The resulting CSV file, *ravkoo.csv*, contained 1,552 rows, the number of unique
    <samp class="SANS_TheSansMonoCd_W5Regular_11">DrugName</samp> values in the original
    *ravkoo_rxdata.csv*. [Figure 13-5](#fig13-5) shows this spreadsheet, sorted descending
    by <samp class="SANS_TheSansMonoCd_W5Regular_11">total_cost</samp>, to show which
    drugs cost patients the most money.
  prefs: []
  type: TYPE_NORMAL
- en: How much of this revenue was from drugs that AFLDS pushed on its followers?
    The drug that cumulatively cost patients the most was <samp class="SANS_TheSansMonoCd_W5Regular_11">IVERMECTIN
    3 MG TABLET</samp>, which was prescribed 63,409 times, at a total cost of $4.6
    million. Ivermectin is used primarily to treat parasites in livestock, but it’s
    also occasionally used to treat scabies and lice in humans. I didn’t know for
    sure that all of these ivermectin sales were directly from AFLDS, but it was suspicious
    that ivermectin was bringing in so much money during the COVID-19 pandemic, when
    disinformation about its efficacy was rampant.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another row had the <samp class="SANS_TheSansMonoCd_W5Regular_11">drug_name</samp>
    of <samp class="SANS_TheSansMonoCd_W5Regular_11">IVERMECTIN 3MG PO TAB</samp>
    (the same dose of ivermectin, just with a slightly different name <samp class="SANS_TheSansMonoCd_W5Regular_11">DrugName</samp>
    value from *ravkoo_rxdata.csv*) that cost 883 patients another $98,900\. Other
    drugs like hydroxychloroquine and azithromycin had the same problem: there were
    different <samp class="SANS_TheSansMonoCd_W5Regular_11">DrugName</samp> values
    that actually represented the same drug. If I wanted to know the total revenue
    from each individual drug, I would have to combine all of the ivermectin prescriptions
    into one row and do the same with the other drugs.'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the CSV spreadsheet I created with the create-ravkoo-csv.py
    script. Each row lists, for each unique drug_name, the number of prescriptions
    and the total cost](Images/Figure13-5.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 13-5: Viewing</samp>
    <samp class="SANS_Futura_Std_Book_11">ravkoo.csv</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">in
    LibreOffice Calc</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Categorizing Prescription
    Data by Drug</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Because I was investigating AFLDS, I was most interested in the drugs that
    the group promotes: ivermectin, hydroxychloroquine, and a few others. In addition
    to ivermectin, AFLDS promotes the *Zelenko protocol*, named after Dr. Vladimir
    Zelenko, the American doctor who, at the start of the pandemic in March 2020,
    claimed (without evidence) that he had successfully treated hundreds of COVID-19
    patients using a combination of hydroxychloroquine, azithromycin, and zinc sulfate.
    (The AFLDS website on treatment options also lists vitamin C as part of the Zelenko
    protocol.) Zelenko also spread other medical disinformation, claiming, for example,
    that more children die from COVID-19 vaccines than from the virus itself. Then-President
    Trump publicly lauded Zelenko’s work, saying that he himself took hydroxychloroquine
    to treat COVID-19.'
  prefs: []
  type: TYPE_NORMAL
- en: I wanted to see how much of Ravkoo’s business consisted of selling these drugs.
    To do this, I’d have to reorganize the data. I needed to create a similar spreadsheet,
    but instead of having a column for the <samp class="SANS_TheSansMonoCd_W5Regular_11">DrugName</samp>
    lifted directly from the hacked data, I wanted that column to be a category of
    prescriptions. Once I had a straightforward spreadsheet that mapped individual
    drugs to their revenue, I could visualize that data—for example, in a pie chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *ravkoo.csv* spreadsheet showed me the most commonly prescribed drugs.
    Based on the names of these drugs, I came up with a list of categories: Ivermectin,
    Hydroxychloroquine, Azithromycin, Zinc, Vitamin C, and Other. In other words,
    the most commonly prescribed drugs were exactly what AFLDS was promoting.'
  prefs: []
  type: TYPE_NORMAL
- en: I then wrote another script very similar to the one in [Listing 13-4](#list13-4),
    but with one additional step. For every row in the *ravkoo_rxdata.csv* spreadsheet,
    the script determined which of those categories the drug fit into and added up
    the number of prescriptions and cost for each category. It then saved all of this
    data as a CSV called *ravkoo-categories.csv*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s my Python script (you can also find it at [*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-13<wbr>/create<wbr>-ravkoo<wbr>-categories<wbr>-csv<wbr>.py*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-13/create-ravkoo-categories-csv.py)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: After running this script, I ended up with a file called *ravkoo-categories
    .csv*. [Table 13-1](#tab13-1) shows the data from this spreadsheet, detailing
    Ravkoo’s prescription sales.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 13-1:</samp> <samp class="SANS_Futura_Std_Book_11">Categories
    of Drugs Sold by Ravkoo</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Drug category</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Prescription
    count</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Total cost</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Hydroxychloroquine</samp> | <samp class="SANS_Futura_Std_Book_11">92,646</samp>
    | <samp class="SANS_Futura_Std_Book_11">$1,234,727</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Zinc</samp> | <samp class="SANS_Futura_Std_Book_11">82,608</samp>
    | <samp class="SANS_Futura_Std_Book_11">$177,336</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Ivermectin</samp> | <samp class="SANS_Futura_Std_Book_11">64,300</samp>
    | <samp class="SANS_Futura_Std_Book_11">$4,734,163</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Other</samp> | <samp class="SANS_Futura_Std_Book_11">42,193</samp>
    | <samp class="SANS_Futura_Std_Book_11">$6,476,213</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Vitamin C</samp> | <samp class="SANS_Futura_Std_Book_11">31,281</samp>
    | <samp class="SANS_Futura_Std_Book_11">$52,712</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Azithromycin</samp> | <samp class="SANS_Futura_Std_Book_11">26,972</samp>
    | <samp class="SANS_Futura_Std_Book_11">$2,444,319</samp> |'
  prefs: []
  type: TYPE_TB
- en: 'This data clearly revealed Ravkoo’s role in AFLDS’s scam: *87 percent* of all
    prescriptions sold by Ravkoo are for fake COVID-19 treatments. Over a nine-month
    period, patients collectively paid *$8.6 million* to Ravkoo for snake oil that
    they were told would prevent or cure COVID-19\. This is in addition to the roughly
    $6.7 million (and potentially many millions more) that patients paid SpeakWithAnMD
    for phone consultations. As far as I can tell, Ravkoo’s only role in the scheme
    was as a pharmacy, and it didn’t receive any money from the phone consultations.
    AFLDS also, at various times, worked with different pharmacies.'
  prefs: []
  type: TYPE_NORMAL
- en: 'By the time The Intercept published this investigation into AFLDS, Ravkoo CEO
    Alpesh Patel told me that his company had already stopped doing business with
    SpeakWithAnMD. “The volume over there went up crazy, and we didn’t feel comfortable,”
    he said. “And we don’t have that much capacity to fill that many prescriptions.”
    Using OSINT, which you learned about in [Chapter 1](chapter1.xhtml), I confirmed
    that Patel was telling the truth: after scouring the internet about AFLDS, including
    reading reporting from other journalists and pro-science activists on Twitter
    who were keeping track of the group, I discovered that AFLDS ran some Telegram
    channels, including one specifically for its patients. In this Telegram channel,
    I discovered that patients had posted messages about Ravkoo no longer working
    with SpeakWithAnMD or AFLDS.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">A Deeper Look at the Cadence Health
    Patient Data</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, I knew that 72,000 AFLDS patients paid for $90 telehealth consultations
    and that 87 percent of Ravkoo’s prescriptions were for fake COVID-19 cures. I
    wanted to further understand the patient data, and there was still a lot more
    to dig into. Who were SpeakWithAnMD’s other partners besides AFLDS, and how much
    of the company’s business did they make up? And what could I learn about the AFLDS
    patients themselves? To answer these questions, I wrote more Python code.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Finding Cadence’s
    Partners</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: I wanted to know how much of SpeakWithAnMD’s business, and by extension Cadence
    Health’s business, came from AFLDS. The file *cadence_health _partners.json* includes
    a list of all the partners, so I wrote a Python script that counted the number
    of patients associated with each one, shown in [Listing 13-5](#list13-5) (you
    can also find a copy at [*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-13<wbr>/create<wbr>-cadence<wbr>-partners<wbr>-csv<wbr>.py*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-13/create-cadence-partners-csv.py)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-5: The</samp> <samp
    class="SANS_Futura_Std_Book_11">create-cadence-partners-csv.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">script
    returns the number of patients associated with each Cadence Health partner.</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: First, my script loaded *cadence_allpatients_all.json* and *cadence_health _partners.json*
    as Python objects. It created an empty list called <samp class="SANS_TheSansMonoCd_W5Regular_11">partner_rows</samp>,
    then looped through each partner. Inside this <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loop was a nested <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> loop
    which, for each partner, looped through each patient checking to see if that patient
    used that partner. The script then added this information (the partner’s ID, name,
    and domain, along with the tally of its associated patients) to the <samp class="SANS_TheSansMonoCd_W5Regular_11">partner_rows</samp>
    list. Finally, it saved its findings in a CSV called *cadence-partners.csv*.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 13-2](#tab13-2) shows the data from this spreadsheet, describing all
    of Cadence Health’s partners and how many patients they have.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 13-2:</samp> <samp class="SANS_Futura_Std_Book_11">Cadence
    Health Partners</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">ID</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Name</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Domain</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Patients</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">1</samp> | <samp class="SANS_Futura_Std_Book_11">Encore
    Telemedicine</samp> | <samp class="SANS_Futura_Std_Book_11">encore.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">7</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">2</samp> | <samp class="SANS_Futura_Std_Book_11">SpeakWithAnMD</samp>
    | <samp class="SANS_Futura_Std_Book_11">speakwithanmd.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">21,193</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">3</samp> | <samp class="SANS_Futura_Std_Book_11">America’s
    Frontline Doctors</samp> | <samp class="SANS_Futura_Std_Book_11">aflds.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">255,266</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">Corstet</samp>
    | <samp class="SANS_Futura_Std_Book_11">corstet.cadencehealth.us</samp> | <samp
    class="SANS_Futura_Std_Book_11">1,604</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">5</samp> | <samp class="SANS_Futura_Std_Book_11">Dr.
    Zelenko</samp> | <samp class="SANS_Futura_Std_Book_11">drzelenko.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">55</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">Encore
    Demo</samp> | <samp class="SANS_Futura_Std_Book_11">encoredemo.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">5</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">7</samp> | <samp class="SANS_Futura_Std_Book_11">Kim’s
    Pharmacy</samp> | <samp class="SANS_Futura_Std_Book_11">kims.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">6</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">TelMDFirst</samp>
    | <samp class="SANS_Futura_Std_Book_11">telmdfirst.cadencehealth.us</samp> | <samp
    class="SANS_Futura_Std_Book_11">2,410</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">9</samp> | <samp class="SANS_Futura_Std_Book_11">Dr.
    Tsifutis</samp> | <samp class="SANS_Futura_Std_Book_11">drtsifutis.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">301</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">10</samp> | <samp class="SANS_Futura_Std_Book_11">Dr.
    Immanuel</samp> | <samp class="SANS_Futura_Std_Book_11">drimmanuel.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">3</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">11</samp> | <samp class="SANS_Futura_Std_Book_11">Dr.
    Palumbo</samp> | <samp class="SANS_Futura_Std_Book_11">drpalumbo.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">29</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">12</samp> | <samp class="SANS_Futura_Std_Book_11">Dr.
    Boz</samp> | <samp class="SANS_Futura_Std_Book_11">drboz.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">311</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">13</samp> | <samp class="SANS_Futura_Std_Book_11">Dr.
    Parker</samp> | <samp class="SANS_Futura_Std_Book_11">drparker.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">409</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">14</samp> | <samp class="SANS_Futura_Std_Book_11">Dr.
    Johnson</samp> | <samp class="SANS_Futura_Std_Book_11">drajohnson.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">3</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">15</samp> | <samp class="SANS_Futura_Std_Book_11">DEV</samp>
    | <samp class="SANS_Futura_Std_Book_11">localhost:8080</samp> | <samp class="SANS_Futura_Std_Book_11">1</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">16</samp> | <samp class="SANS_Futura_Std_Book_11">HablaConUnMD.com</samp>
    | <samp class="SANS_Futura_Std_Book_11">hablaconunmd.cadencehealth.us</samp> |
    <samp class="SANS_Futura_Std_Book_11">0</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">17</samp> | <samp class="SANS_Futura_Std_Book_11">VirtuaFirst,
    PLLC</samp> | <samp class="SANS_Futura_Std_Book_11">vf.cadencehealth.us</samp>
    | <samp class="SANS_Futura_Std_Book_11">0</samp> |'
  prefs: []
  type: TYPE_TB
- en: Out of 281,603 patients, AFLDS referred 255,266 to SpeakWithAnMD and, by extension,
    Cadence Health. That means that 90 percent of the patients in Cadence’s database
    came from AFLDS.
  prefs: []
  type: TYPE_NORMAL
- en: I learned some additional interesting information from the partners list. The
    first partner listed, Encore Telemedicine, is SpeakForAnMD’s parent company. The
    fourth, Corstet, is owned by Jerome Corsi, who also owns Encore Telemedicine.
    Corsi is a former host of the conspiracy show *InfoWars*, a proponent of the racist
    “birtherism” conspiracy theory about former US president Barack Obama’s citizenship.
    He was also caught up in special counsel Robert Mueller’s investigation into Russian
    interference in the 2016 election. The list of partners also includes individual
    doctors, including Dr. Zelenko of “Zelenko protocol” fame and Dr. Stella Immanuel,
    one of the AFLDS doctors from the previously mentioned press conference in front
    of the Supreme Court building. After that event, she quickly earned viral fame
    for having claimed that the uterine disorder endometriosis is caused by women
    dreaming of sex with demons and witches.
  prefs: []
  type: TYPE_NORMAL
- en: This spreadsheet confirmed that the bulk of the Cadence data was related to
    AFLDS patients. I decided to dig even deeper into AFLDS patient data to see what
    revelations could be hiding there.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Searching for Patients
    by City</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The *aflds-patients.csv* spreadsheet I created from the original dataset, containing
    72,000 rows of patients who were referred by AFLDS and who had at least one consultation,
    includes columns for <samp class="SANS_TheSansMonoCd_W5Regular_11">city</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">state</samp>. This location
    data allowed me to write another Python script to count how many patients were
    from each city and look up GPS coordinates for that city so I could plot them
    on a map.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 11](chapter11.xhtml), you worked with GPS coordinates you found
    directly in Parler video metadata and plotted them on a map using Google Earth.
    In this case, however, I had only cities and states, so I needed to look up their
    GPS coordinates myself. I wrote a script to convert the names of the cities in
    the spreadsheet into GPS coordinates, a process called *geocoding*.
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 13-6](#list13-6) shows my Python script (you can also find a copy
    at [*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-13<wbr>/create<wbr>-cities<wbr>-csv<wbr>.py*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-13/create-cities-csv.py)).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-6: The</samp> <samp
    class="SANS_Futura_Std_Book_11">create-cities-csv.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">script
    geocodes city and state names.</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: To perform the geocoding, the script used an API. Of the various options, I
    chose one called Geocodeapi, simply because it seemed easy to use and was free
    for the number of requests I planned on making. I made an account at [*https://<wbr>geocodeapi<wbr>.io*](https://geocodeapi.io),
    created an API key, and stored it my script in the variable <samp class="SANS_TheSansMonoCd_W5Regular_11">geocode_api_key</samp>.
    In order to make the API calls, the script used the third-party Python module
    <samp class="SANS_TheSansMonoCd_W5Regular_11">httpx</samp>. (For more details
    on this module, check out Appendix B.)
  prefs: []
  type: TYPE_NORMAL
- en: After defining the API key, my script created an empty dictionary called <samp
    class="SANS_TheSansMonoCd_W5Regular_11">cities</samp> to map city names to information
    about it—specifically, the number of patients and its GPS coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: 'The script then loaded *aflds-patients.csv* and looped through each patient.
    For each, it created a new string called <samp class="SANS_TheSansMonoCd_W5Regular_11">city</samp>
    in the format <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">City</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">,</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">State</samp>
    (for example, <samp class="SANS_TheSansMonoCd_W5Regular_11">Atlanta, Georgia</samp>).
    If <samp class="SANS_TheSansMonoCd_W5Regular_11">city</samp> didn’t exist in the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">cities</samp> dictionary yet, the
    script set <samp class="SANS_TheSansMonoCd_W5Regular_11">cities[city]</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">{"count":
    0}</samp>. Then it added 1 to <samp class="SANS_TheSansMonoCd_W5Regular_11">cities[city]["count"]</samp>.
    By the time this loop finished running, <samp class="SANS_TheSansMonoCd_W5Regular_11">cities</samp>
    contained a list of every city where there are patients, as well as the number
    of patients in that city.'
  prefs: []
  type: TYPE_NORMAL
- en: The next step was geocoding for each city. Another <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loop looped through <samp class="SANS_TheSansMonoCd_W5Regular_11">cities</samp>
    and, using the <samp class="SANS_TheSansMonoCd_W5Regular_11">httpx.get()</samp>
    function, made an HTTP request for each city to the Geocodeapi API, passing along
    the city name and my API key. When the script got a response with GPS coordinates,
    it stored the latitude and longitude in <samp class="SANS_TheSansMonoCd_W5Regular_11">cities[city]["lat"]</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">cities[city]["lon"]</samp>.
    This step takes a few hours since it’s making thousands of API requests, so it
    displayed text in the terminal before each one, allowing me to get a sense of
    the progress while it was running.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the script wrote all of the data in the <samp class="SANS_TheSansMonoCd_W5Regular_11">cities</samp>
    dictionary into a CSV called *cities.csv*.
  prefs: []
  type: TYPE_NORMAL
- en: 'When I ran the script, I got the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 13-6](#fig13-6) shows *cities.csv*, sorted by number of patients per
    city.'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the CSV spreadsheet I created with this script. Each row
    contains a city, the number of patients in that city, its latitude and longitude,
    and the label to display on the map.](Images/Figure13-6.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 13-6: Results from</samp>
    <samp class="SANS_Futura_Std_Book_11">cities.csv</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Armed with GPS coordinates, I could now plot the patient data on a map. I used
    an online service called MapBox ([*https://<wbr>www<wbr>.mapbox<wbr>.com*](https://www.mapbox.com)),
    mentioned in [Chapter 11](chapter11.xhtml), to display circles on a map for each
    of the 15,196 cities—the more patients from that city, the bigger the circle.
    MapBox has a user interface that makes it simple to upload a CSV file with GPS
    coordinates and indicate how you want the data to be visualized on a map. MapBox
    also allows you to embed maps directly into web pages. When I published my article,
    I embedded this map into it so readers could interact with it themselves. [Figure
    13-7](#fig13-7) shows that map, zoomed in on the United States.
  prefs: []
  type: TYPE_NORMAL
- en: People in every state in the country, as well as Washington, DC, paid $90 for
    telehealth consultations, including 8,600 people in California, 8,000 in Florida,
    and 7,400 in Texas. The dots on the map show only cities with at least 10 AFLDS
    patients.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the cities patients lived in, the data also included their birth
    dates, making it simple to calculate their ages. Since age is a major risk factor
    for COVID-19, I explored this data next.
  prefs: []
  type: TYPE_NORMAL
- en: '![A map of the US full of circles for each city that contains AFLDS patients.
    Some of the circles are much larger than others, meaning those cities have more
    patients.](Images/Figure13-7.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 13-7: A map of cities
    in the US with AFLDS patients as of September 11, 2021</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Searching for Patients
    by Age</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Your age plays a major role in how likely you are to get seriously sick or die
    from COVID-19\. During the pandemic, the CDC published statistics that described
    individual risk for COVID-19 infection, hospitalization, and death based on your
    age. Up until May 2023, the CDC continually updated these statistics as new data
    came in and as the pandemic changed. When I published my findings in September
    2021, people who were 50 to 64 years old were 4 times more likely to be hospitalized
    and 30 times more likely to die from COVID-19 than 18- to 29-year-olds. People
    who were 65 to 74 were 5 times more likely to be hospitalized and 90 times more
    likely to die.
  prefs: []
  type: TYPE_NORMAL
- en: While I was writing my report, there were no COVID-19 treatments that worked
    well (except for monoclonal antibodies, which were difficult to administer and
    not widely available). The only way for older people to greatly reduce their risk
    of death or serious illness was to get vaccinated. AFLDS spent a lot of resources
    convincing people that COVID-19 vaccines are dangerous and that wearing masks
    to prevent the spread of COVID-19 is a violation of personal freedom.
  prefs: []
  type: TYPE_NORMAL
- en: When patients created an account on the Cadence Health website, they were asked
    to enter their date of birth. I wrote a script to calculate their age and organize
    them into the same age groups that the CDC used so that I could see their likelihood
    of getting hospitalized or dying. [Listing 13-7](#list13-7) shows the Python code
    for that script (you can also find it at [*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-13<wbr>/create<wbr>-ages<wbr>-csv<wbr>.py*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-13/create-ages-csv.py)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 13-7: The</samp> <samp
    class="SANS_Futura_Std_Book_11">create-ages-csv.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">script
    calculates patients’ ages and groups them by age.</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'My script first defined a dictionary called <samp class="SANS_TheSansMonoCd_W5Regular_11">age_groups</samp>,
    with keys for each of the CDC’s age groups and values set to 0\. I also added
    two other age groups: people less than 0 years old and people older than 100,
    because (as I discovered while writing the script) some patients had put birth
    dates in the future or in the far past.'
  prefs: []
  type: TYPE_NORMAL
- en: The script then loaded *aflds-patients.csv* and looped through each patient,
    calculating the patient’s age as of September 2021 (when I was doing this investigation).
    Based on their age, the script determined which age group the patient belonged
    to and incremented <samp class="SANS_TheSansMonoCd_W5Regular_11">age_groups</samp>
    by 1\. By the time the loop finished, the <samp class="SANS_TheSansMonoCd_W5Regular_11">age_groups</samp>
    dictionary contained a count of the number of patients in each group.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the script saved the information from <samp class="SANS_TheSansMonoCd_W5Regular_11">age_groups</samp>
    into a CSV spreadsheet called *ages.csv*. [Table 13-3](#tab13-3) shows the results.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 13-3:</samp> <samp class="SANS_Futura_Std_Book_11">AFLDS
    Patients by Age Group</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Age group</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Patients</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Less than 0</samp> | <samp class="SANS_Futura_Std_Book_11">702</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">0 to 4</samp> | <samp class="SANS_Futura_Std_Book_11">48</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">5 to 17</samp> | <samp class="SANS_Futura_Std_Book_11">159</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">18 to 29</samp> | <samp class="SANS_Futura_Std_Book_11">3,047</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">30 to 39</samp> | <samp class="SANS_Futura_Std_Book_11">8,190</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">40 to 49</samp> | <samp class="SANS_Futura_Std_Book_11">14,698</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">50 to 64</samp> | <samp class="SANS_Futura_Std_Book_11">31,007</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">65 to 74</samp> | <samp class="SANS_Futura_Std_Book_11">11,441</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">75 to 84</samp> | <samp class="SANS_Futura_Std_Book_11">2,079</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">85</samp>+ | <samp class="SANS_Futura_Std_Book_11">317</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Greater than 100</samp> | <samp class="SANS_Futura_Std_Book_11">338</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: 'After running the script and reviewing the data it created, I could see that
    some people clearly lied about their birth date: 702 people entered birth dates
    in the future, which would make them younger than 0 years old, and another 338
    people entered dates that would make them older than 100 or even 1,000\. The other
    71,000 people entered birth dates that are likely correct.'
  prefs: []
  type: TYPE_NORMAL
- en: I then combined this data with the CDC’s statistics about COVID-19 risks based
    on age, ignoring the obviously fake birth dates. [Table 13-4](#tab13-4) shows
    how many AFLDS patients belong to each age group, along with how likely people
    in that age group were to get infected with COVID-19 and, if infected, how likely
    they were to be hospitalized or die. (All rates are relative to people in the
    18-to-29 age group, because this group has had the most infections.)
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 13-4:</samp> <samp class="SANS_Futura_Std_Book_11">AFLDS
    Patients by Age Group and Risk</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Age group</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">AFLDS
    patients</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Risk of infection</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Risk of hospitalization</samp> | <samp
    class="SANS_Futura_Std_Heavy_B_11">Risk of death</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">0 to 4</samp> | <samp class="SANS_Futura_Std_Book_11">48</samp>
    | <<samp class="SANS_Futura_Std_Book_11">1x</samp> | <<samp class="SANS_Futura_Std_Book_11">1x</samp>
    | <<samp class="SANS_Futura_Std_Book_11">1x</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">5 to 17</samp> | <samp class="SANS_Futura_Std_Book_11">159</samp>
    | <samp class="SANS_Futura_Std_Book_11">1x</samp> | <<samp class="SANS_Futura_Std_Book_11">1x</samp>
    | <<samp class="SANS_Futura_Std_Book_11">1x</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">18 to 29</samp> | <samp class="SANS_Futura_Std_Book_11">3,047</samp>
    | <samp class="SANS_Futura_Std_Book_11">Reference group</samp> | <samp class="SANS_Futura_Std_Book_11">Reference
    group</samp> | <samp class="SANS_Futura_Std_Book_11">Reference group</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">30 to 39</samp> | <samp class="SANS_Futura_Std_Book_11">8,190</samp>
    | <samp class="SANS_Futura_Std_Book_11">1x</samp> | <samp class="SANS_Futura_Std_Book_11">2x</samp>
    | <samp class="SANS_Futura_Std_Book_11">4x</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">40 to 49</samp> | <samp class="SANS_Futura_Std_Book_11">14,698</samp>
    | <samp class="SANS_Futura_Std_Book_11">1x</samp> | <samp class="SANS_Futura_Std_Book_11">2x</samp>
    | <samp class="SANS_Futura_Std_Book_11">10x</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">50 to 64</samp> | <samp class="SANS_Futura_Std_Book_11">31,007</samp>
    | <samp class="SANS_Futura_Std_Book_11">1x</samp> | <samp class="SANS_Futura_Std_Book_11">4x</samp>
    | <samp class="SANS_Futura_Std_Book_11">30x</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">65 to 74</samp> | <samp class="SANS_Futura_Std_Book_11">11,441</samp>
    | <samp class="SANS_Futura_Std_Book_11">1x</samp> | <samp class="SANS_Futura_Std_Book_11">5x</samp>
    | <samp class="SANS_Futura_Std_Book_11">90x</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">75 to 84</samp> | <samp class="SANS_Futura_Std_Book_11">2,079</samp>
    | <samp class="SANS_Futura_Std_Book_11">1x</samp> | <samp class="SANS_Futura_Std_Book_11">9x</samp>
    | <samp class="SANS_Futura_Std_Book_11">220x</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">85</samp>+ | <samp class="SANS_Futura_Std_Book_11">317</samp>
    | <samp class="SANS_Futura_Std_Book_11">1x</samp> | <samp class="SANS_Futura_Std_Book_11">15x</samp>
    | <samp class="SANS_Futura_Std_Book_11">570x</samp> |'
  prefs: []
  type: TYPE_TB
- en: My script showed that 44 percent of AFLDS patients are between 50 and 64, making
    them 30 times more likely to die from COVID-19 than younger people. Another 16
    percent of AFLDS patients are between 65 and 74, making them 90 times more likely
    to die. In just the two-month period covered by the Cadence patient data, *nearly
    45,000 people* older than 50 rejected science and instead put their trust in AFLDS
    during the COVID-19 pandemic. I wonder how many deaths AFLDS is responsible for.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Authenticating the Data</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While in the midst of analyzing the data, I knew I also needed to verify that
    this data was authentic before I could publish my findings. The data my source
    gave to me certainly appeared to be authentic, but I wanted to be more confident.
  prefs: []
  type: TYPE_NORMAL
- en: I started by creating an account on Cadence Health’s website. Sure enough, the
    fields I was asked to fill out with account information were the same fields present
    in the Cadence patient data. I also used Firefox’s developer tools to look at
    the web requests my browser was making and saw that it matched the data I had;
    for example, the partner ID associated with my account was 3, the partner ID for
    AFLDS. (I discuss the developer tools built into web browsers like Firefox and
    Chrome in more detail in Appendix B.)
  prefs: []
  type: TYPE_NORMAL
- en: The data looked legitimate, but I wanted to check that these patients were real
    people. To do that, I decided to cross-reference this data with another dataset.
    Gab, the social network popular among fascists, anti-democracy activists, and
    anti-vaxxers that I first discussed in [Chapter 1](chapter1.xhtml), was hacked
    in early 2021, with 65GB of data leaked to DDoSecrets. This data included about
    38,000 email addresses for Gab users.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Due to PII, DDoSecrets distributes its Gab data only to journalists and researchers.
    You can learn more about this dataset at* [https://ddosecrets.com/wiki/GabLeaks](https://ddosecrets.com/wiki/GabLeaks)*.*'
  prefs: []
  type: TYPE_NORMAL
- en: I made a list of 72,000 AFLDS patient email addresses, along with a separate
    list of 38,000 Gab user email addresses. I then wrote a Python script to load
    both lists and see if there were any email addresses in common. The script found
    several matches. I started looking through the Gab timeline of each match to see
    if I could find references to AFLDS, specifically to receiving medication, and
    found the verification I was looking for.
  prefs: []
  type: TYPE_NORMAL
- en: 'One 56-year-old patient created their Cadence Health account on July 26, 2021\.
    Their patient record included consultation notes from July 30, the date of their
    phone consultation. On September 4, they posted a link to Gab for a tractor supply
    store that sells ivermectin paste for livestock, asking, “Should I pick some up?”
    Two days later they posted an update: “All sold out!” The day after that, they
    posted a comment saying, “Front line doctors finally came through with HCQ/Zinc
    delivery.” HCQ is short for hydroxychloroquine.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 13-8](#fig13-8) shows a screenshot from this Gab thread. (Every post
    includes eight usernames; I’ve redacted all of them.)'
  prefs: []
  type: TYPE_NORMAL
- en: The Ravkoo data didn’t include patient email addresses, so I couldn’t think
    of an obvious way to authenticate it with OSINT like I did for the Cadence Health
    data. Instead, I found the phone number for Ravkoo CEO Alpesh Patel and gave him
    a call. After I informed him that I was a journalist, that Ravkoo had been breached,
    and that I had all its prescription records, his immediate response was, “That
    can’t be right. Our platform is secure.” After I emailed him the screenshot of
    Ravkoo’s Super Admin interface, though, I could hear the panic in his voice. “That’s
    a breach in HIPAA, so I have to report that first,” he said, referring to the
    US health care privacy law. “That’s an even more serious issue than your journalism.”
  prefs: []
  type: TYPE_NORMAL
- en: He wanted me to tell him the name of the hacker and said he would report all
    of this to the FBI. I didn’t tell him my source’s name, of course. Unless you’re
    actively being compelled by a judge, you’re never obligated to tell anyone anything
    about your sources. In any case, I never learned my source’s name, which helps
    keep it secret.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of the Gab thread described in the previous paragraph. After
    the post “Front line doctors finally came through with HCQ/Zinc delivery,” another
    person replies, “Happy to know that,” and another replies, “Amazon has Ivermectin
    as well. In horse paste. Hope this isn’t some China knock off with nasty in it.”](Images/Figure13-8.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 13-8: A Gab screenshot
    that I used to verify the data</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Patel then said, “I have to call my CTO,” and hung up. Ravkoo had in fact been
    breached. We gave Patel ample opportunity to refute any of the information we
    planned on publishing, but it was all accurate.
  prefs: []
  type: TYPE_NORMAL
- en: You can read my full investigative report at [*https://<wbr>theintercept<wbr>.com<wbr>/2021<wbr>/09<wbr>/28<wbr>/covid<wbr>-telehealth<wbr>-hydroxychloroquine<wbr>-ivermectin<wbr>-hacked<wbr>/*](https://theintercept.com/2021/09/28/covid-telehealth-hydroxychloroquine-ivermectin-hacked/).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Aftermath</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After completing this in-depth data-driven investigation, the day before The
    Intercept was ready to publish our findings, I reached out to everyone involved
    to explain the revelations that we had discovered and give them a chance to comment.
  prefs: []
  type: TYPE_NORMAL
- en: Roque Espinal, Cadence Health’s CEO, said that he had no idea that his platform
    was being used by AFLDS. “I’m totally flabbergasted. I had to look up exactly
    who these people were,” he said. “I’m fully vaccinated. My children are fully
    vaccinated. I’m trying to make heads and tails of this right now.” After I spoke
    with him, Espinal told me he immediately cut off service from SpeakWithAnMD. “I
    don’t want to be associated with any crap like that. None of that quackery that’s
    going on.”
  prefs: []
  type: TYPE_NORMAL
- en: Espinal said that he was invited to a Zoom meeting with representatives from
    AFLDS, SpeakWithAnMD, and “16 different attorneys.” He told me that he said, “I’m
    ending my contract with you guys immediately,” and disconnected from the meeting.
    SpeakWithAnMD’s telehealth system went down that day, and AFLDS patients couldn’t
    pay for $90 consultations for a full week (saving them an estimated $700,000 on
    bogus consultations during that time).
  prefs: []
  type: TYPE_NORMAL
- en: Espinal also claimed that Cadence Health didn’t collect credit card payments
    from patients at all—that this was all SpeakWithAnMD’s work. He said that Cadence
    was paid a total of $17,500 for providing service to SpeakWithAnMD (he showed
    me the invoices he’d sent). The latter company went on to rake in millions of
    dollars with the help of the services Cadence provided.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">HIPAA’s Breach Notification
    Rule</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Espinal told me that Cadence Health didn’t directly host AFLDS’s patient database;
    instead, he said, SpeakWithAnMD hosted it in an AWS account. But Jim Flinn, a
    public relations agent working for SpeakWithAnMD, insisted the opposite: that
    the hacked database was hosted in Cadence Health’s AWS account, not in SpeakWithAnMD’s.'
  prefs: []
  type: TYPE_NORMAL
- en: Both sides refuse to admit that health care data was breached from their servers.
    And while Ravkoo Pharmacy began notifying patients of their data breach—something
    that HIPAA required it to do within two months of discovering it—neither SpeakWithAnMD
    nor Cadence Health has followed this rule, and at the time of writing, patients
    haven’t been notified of the breach. One of these companies is in violation of
    HIPAA’s breach notification rule.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Congressional Investigation</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In October 2021, the US House of Representative’s Select Subcommittee on the
    Coronavirus Crisis launched an investigation into AFLDS and SpeakWithAnMD based
    on my reporting, as well as reporting on AFLDS by Vera Bergengruen for *Time*
    magazine. The committee’s chair, Rep. James Clyburn, wrote letters to AFLDS founder
    Simone Gold and to Jerome Corsi, owner of SpeakWithAnMD’s parent company, demanding
    detailed records from both companies. These included documents related to ownership,
    organizational structure, and staffing; details about the doctors’ training and
    qualifications; numbers of patients and what they were prescribed; and descriptions
    of the companies’ total revenue and net income for each quarter.
  prefs: []
  type: TYPE_NORMAL
- en: “Attempts to monetize coronavirus misinformation have eroded public confidence
    in proven treatments and prevention measures and hindered efforts to control the
    pandemic,” Clyburn wrote in his letter to AFLDS. “Some Americans who have been
    influenced by misinformation have chosen not to get vaccinated, delayed receiving
    evidence-based treatment, and ingested unapproved substances in harmful quantities.”
    Clyburn also wrote a letter to the Federal Trade Commission requesting that the
    agency investigate whether these companies are in violation of federal laws.
  prefs: []
  type: TYPE_NORMAL
- en: In January 2022, the House committee announced that “despite repeated assurances
    of compliance, SpeakWithAnMD has failed to produce any documents responsive to
    the Select Subcommittee’s requests.” Then in February, after being stonewalled
    by SpeakWithAnMD, Clyburn expanded the committee’s investigation to include Cadence
    Health as well. Unfortunately, nothing more resulted from Congress’s investigation
    into AFLDS, SpeakWithAnMD, and Cadence Health.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Simone Gold’s New
    Business Venture</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With a federal investigation into AFLDS underway, the group apparently decided
    it was time to leave the snake oil business and stick to disinformation and anti-vax
    litigation. At the time of writing, SpeakWithAnMD’s website is still online, but
    patients are no longer able to book a telehealth consultation. Cadence Health’s
    website is down—Espinal told me he fired his company’s only customer, SpeakWithAnMD.
  prefs: []
  type: TYPE_NORMAL
- en: 'Simone Gold herself wasn’t done pushing evidence-free health care. In June
    2022, AFLDS sent a newsletter to its supporters announcing her new venture, GoldCare:
    a telemedicine “health care” service that early adopters could subscribe to for
    $83 a month, designed to entirely replace evidence-based health care. “If you
    are reading this email, you are aware that there is overwhelming evidence that
    the government did its best to kill people during Covid,” Gold wrote. “If you
    prefer not to pay money every month just to play Russian Roulette, you will stop
    feeding the beast and join us. […] Our system is ethical, of the highest quality,
    and will ultimately cost less than conventional insurance.”'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Scandal and Infighting
    at AFLDS</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Under pressure from California investigators, Gold moved to Naples, Florida.
    As she prepared to serve two months in prison for storming the Capitol on January
    6, 2021, she resigned from her position on the AFLDS board, staying on as a well-paid
    consultant. While she was behind bars, leaders at AFLDS conducted an audit of
    her use of the group’s charity funds. AFLDS had received at least $10 million
    in donations, *in addition* to all of the money it had scammed out of patients.
    While more than a million Americans were dying from COVID-19 during the pandemic,
    what was Gold doing with all that money?
  prefs: []
  type: TYPE_NORMAL
- en: Joey Gilbert, a Nevada lawyer and former professional boxer, took over from
    Gold as chair of the AFLDS board while she was in prison. According to a lawsuit
    filed in November 2022 against Gold by Gilbert and other AFLDS board members,
    Gold lived rent-free with John Strand, her boyfriend who had stormed the Capitol
    with her, in a $3.6 million mansion purchased using AFLDS charity funds. The lawsuit
    also alleged that she was spending $12,000 a month on a bodyguard, $5,600 a month
    for a housekeeper, and $50,000 a month on credit card expenses—all AFLDS’s money.
    Furthermore, it accused her of purchasing three cars, including a Mercedes-Benz,
    and taking unauthorized private jet flights, including a single trip that cost
    $100,000, with AFLDS money.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the lawsuit accused Gold of hijacking AFLDS resources for her own business.
    Gilbert claimed that Gold used the Naples mansion to house GoldCare employees
    and that she enlisted AFLDS employees to work for GoldCare while on the AFLDS
    payroll. For her part, Gold accused the AFLDS leaders of destroying her nonprofit,
    demanding that they resign. “Just as the mother lioness will not let her baby
    lion be murdered, neither will I,” Gold wrote in an email to them, according to
    an affidavit in the lawsuit.
  prefs: []
  type: TYPE_NORMAL
- en: After Gold was released from prison, she regained control of AFLDS. She locked
    the employees out of their email, pressured an employee to hand over the password
    to the group’s Telegram account with hundreds of thousands of followers, and took
    control over the AFLDS website. There, she posted press releases claiming that,
    while she had discussed resigning from her position, those discussions “were never
    legally actualized” and asserting that she’s the legitimate leader of AFLDS. Gold
    wrote in an email to AFLDS supporters that “the allegations are cetegorically
    [*sic*] false,” and that “under my leadership, AFLDS will never tolerate corruption,
    no matter the personal price.” At the time of publication, the ultimate fate of
    AFLDS is still unknown, but Gold appears to control the reins.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you’ve seen how I turned 100MB of compressed files from an
    anonymous hacker into a groundbreaking report on AFLDS. That report resulted in
    a congressional investigation and contributed to the demise of a corrupt network
    of telehealth companies that profited off the COVID-19 pandemic. I explained exactly
    how I went about investigating the Cadence Health and Ravkoo datasets, all in
    JSON and CSV format. You also read through the Python code I wrote to answer specific
    questions about the data and to convert it into formats that I could visualize—all
    skills that you can use in your own data-heavy investigations. I explained how
    I used OSINT to authenticate the data, as well as the story of AFLDS fracturing
    and descending into chaos in the aftermath.
  prefs: []
  type: TYPE_NORMAL
- en: The next and final chapter of this book describes another case study in which
    I developed a custom tool to research chat logs from neo-Nazi Discord servers,
    contributing to the victory of a lawsuit against the organizers of the deadly
    2017 Unite the Right rally.
  prefs: []
  type: TYPE_NORMAL
