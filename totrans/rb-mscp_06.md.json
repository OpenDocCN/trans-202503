["```\nmodule Professor\nend\n```", "```\nmodule Professor\nend\n\nclass Mathematician < Person\n  include Professor\nend\n```", "```\nclass Mathematician\n  attr_accessor :first_name\n  attr_accessor :last_name\nend\n```", "```\n    class Person\n    end\n\n class Mathematician < Person\n      attr_accessor :first_name\n      attr_accessor :last_name\n    end\n```", "```\nclass Person\n  attr_accessor :first_name\n  attr_accessor :last_name\nend\n\nclass Mathematician < Person\nend\n```", "```\n    class Person\n      attr_accessor :first_name\n      attr_accessor :last_name\n    end\n\n    module Professor\n      def lectures; end\n    end\n\n    class Mathematician < Person\n   include Professor\n    end\n```", "```\nramanujan = Mathematician.new\nramanujan.first_name = \"Srinivasa\"\n```", "```\nclass Mathematician < Person\n  include Professor\n  include Employee\nend\n```", "```\nmodule Professor < Employee\nend\n```", "```\nmodule Professor\n  include Employee\nend\n```", "```\n    class Mathematician\n   attr_accessor :name\n    end\n\n    poincaré = Mathematician.new\n    poincaré.name = \"Henri Poincaré\"\n p poincaré.name\n     => \"Henri Poincaré\"\n```", "```\n    module Professor\n    end\n\n    class Mathematician\n      attr_accessor :name\n   include Professor\n    end\n```", "```\n    module Professor\n    end\n\n    class Mathematician\n      attr_writer :name\n      include Professor\n   def name\n        \"Prof. #{@name}\"\n      end\n    end\n```", "```\n    module Professor\n   def name\n        \"Prof. #{super}\"\n      end\n    end\n\n    class Mathematician\n      attr_accessor :name\n   include Professor\n    end\n\n    poincaré = Mathematician.new\n    poincaré.name = \"Henri Poincaré\"\n p poincaré.name\n     => \"Henri Poincaré\"\n```", "```\n    module Professor\n      def name\n        \"Prof. #{super}\"\n      end\n    end\n\n    class Mathematician\n      attr_accessor :name\n   prepend Professor\n    end\n\n    poincaré = Mathematician.new\n    poincaré.name = \"Henri Poincaré\"\n p poincaré.name\n     => \"Prof. Henri Poincaré\"\n```", "```\n    module Professor\n      def lectures; end\n    end\n\n    class Mathematician\n   attr_accessor :first_name\n      attr_accessor :last_name\n   include Professor\n    end\n```", "```\nfermat = Mathematician.new\nfermat.first_name = 'Pierre'\nfermat.last_name = 'de Fermat'\n\np fermat.methods.sort\n => [ ... :first_name, :first_name=, ... :last_name, :last_name=, :lectures ... ]\n```", "```\n    module Professor\n      def primary_classroom; end\n    end\n\n    p fermat.methods.sort\n  => [ ... :first_name, :first_name=, ... :last_name, :last_name=, :lectures,\n    ... :primary_classroom, ... ]\n```", "```\nmodule Employee\n  def hire_date; end\nend\n\nmodule Professor\n  include Employee\nend\n```", "```\np fermat.methods.sort\n => [ ... :first_name, :first_name=, ... :last_name, :last_name=, :lectures ... ]\n```", "```\n    VALUE\n rb_include_class_new(VALUE module, VALUE super)\n    {\n     VALUE klass = class_alloc(T_ICLASS, rb_cClass);\n        --*snip*--\n     RCLASS_IV_TBL(klass) = RCLASS_IV_TBL(module);\n        RCLASS_CONST_TBL(klass) = RCLASS_CONST_TBL(module);\n     RCLASS_M_TBL(klass) = RCLASS_M_TBL(RCLASS_ORIGIN(module));\n     RCLASS_SUPER(klass) = super;\n        --*snip*--\n        return (VALUE)klass;\n    }\n```", "```\n    class MyClass\n   SOME_CONSTANT = \"Some value...\"\n    end\n\n class Subclass < MyClass\n      p SOME_CONSTANT\n    end\n```", "```\n module Namespace\n   SOME_CONSTANT = \"Some value...\"\n   class Subclass\n     p SOME_CONSTANT\n      end\n    end\n```", "```\nclass MyClass\n  SOME_CONSTANT = \"Some value...\"\nend\n```", "```\n    module Namespace\n      SOME_CONSTANT = \"Some value...\"\n      class Subclass\n     p SOME_CONSTANT\n      end\n    end\n```", "```\n    class Superclass\n   FIND_ME = \"Found in Superclass\"\n    end\n\n    module ParentLexicalScope\n   FIND_ME = \"Found in ParentLexicalScope\"\n\n      module ChildLexicalScope\n\n        class Subclass < Superclass\n          p FIND_ME\n        end\n\n      end\n    end\n```", "```\n$ **ruby find-constant.rb**\n\"Found in ParentLexicalScope\"\n```", "```\n    module ParentLexicalScope\n   #FIND_ME = \"Found in ParentLexicalScope\"\n```", "```\n$ **ruby find-constant.rb**\n\"Found in Superclass\"\n```"]