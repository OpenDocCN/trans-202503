["```\n// Get a length in inches and 1/16s.\n// Calling sequence:\n//    Return the fixed-point number.\n        .arch armv8-a\n// Stack frame\n        .equ    save19, 16\n        .equ    FRAME, 32\n// Constant data\n        .section  .rodata\n        .align  3\nprompt:\n        .string \"Enter length (inches and 1/16s)\\n\"\ninches:\n        .string \"      Inches: \"\nfraction:\n        .string \"  Sixteenths: \"\n// Code\n        .text\n        .align  2\n        .global get_length\n        .type   get_length, %function\nget_length:\n        stp     fp, lr, [sp, -FRAME]!  // Create stack frame\n        mov     fp, sp                 // Set our frame pointer\n        str     x19, [sp, save19]      // For local var\n\n        adr     x0, prompt             // Ask for length\n        bl      write_str \n        adr     x0, inches             // Ask for integer\n        bl      write_str\n      ❶ bl      get_uint               // Integer part\n      ❷ lsl     w19, w0, 4             // 4 bits for fraction\n\n        adr      x0, fraction          // Ask for fraction\n        bl       write_str\n        bl       get_uint              // Fractional part\n        add      w0, w0, w19           // Add integer part\n\n        ldr      x19, [sp, save19]     // Restore for caller\n        ldp      fp, lr, [sp], FRAME   // Delete stack frame\n        ret                            // Back to caller\n```", "```\n// Display a length to the nearest sixteenth.\n        .arch armv8-a\n// Calling sequence:\n//    w0[31-4] <- integer part\n//    w0[3-0]  <- fractional part\n//    Return 0.\n// Useful constants\n     ❶ .equ     FOUR_BITS, 0xf        // For fraction\n// Stack frame\n        .equ     save19, 16\n        .equ     FRAME, 32\n// Constant data\n        .section   .rodata\n        .align   3\nsixteenths:\n        .string  \"/16\"\n// Code\n        .text\n        .align   2\n        .global  display_length\n        .type    display_length, %function\ndisplay_length:\n        stp      fp, lr, [sp, -FRAME]!  // Create stack frame\n        mov      fp, sp                 // Set our frame pointer\n        str      x19, [sp, save19]      // For local var\n\n        mov      w19, w0                // Save input.\n     ❷ lsr      w0, w19, 4             // Integer part\n        bl       put_uint\n\n        mov      w0, '   '              // Some formatting\n        bl       write_char\n\n     ❸ and       w0, w19, FOUR_BITS     // Mask off integer\n        bl        put_uint               // Fractional part\n ❹ adr       x0, sixteenths         // More formatting\n        bl        write_str\n\n        mov       w0, wzr                // Return 0\n        ldr       x19, [sp, save19]      // Restore for caller\n        ldp       fp, lr, [sp], FRAME    // Delete stack frame\n        ret                              // Back to caller\n```", "```\n// Add 2 lengths, fixed-point, to nearest sixteenth.\n        .arch armv8-a\n// Stack frame\n        .equ    save1920, 16\n        .equ    FRAME, 32\n// Constant data\n        .section  .rodata\n        .align   3\nsum_msg:\n        .string  \"Sum = \"\n// Code\n        .text\n        .align   2\n        .global  main\n        .type    main, %function\nmain:\n        stp      fp, lr, [sp, -FRAME]!        // Create stack frame\n        mov      fp, sp                       // Set our frame pointer\n        stp      x19, x20, [sp, save1920]     // For local vars\n\n        bl       get_length\n        mov      w19, w0                      // First number\n        bl       get_length\n        mov      w20, w0                      // Second number\n\n        adr      x0, sum_msg                  // Some formatting\n        bl       write_str\n     ❶ add      w0, w20, w19                 // Add lengths\n        bl       display_length               // Show result\n mov      w0, '\\n'                     // Finish formatting\n        bl       write_char\n\n        mov      w0, wzr                      // Return 0\n        ldp      x19, x20, [sp, save1920]     // Restore for caller\n        ldp      fp, lr, [sp], FRAME          // Delete stack frame\n        ret                                   // Back to caller\n```", "```\n// Get dollars and cents from the keyboard.\n// Calling sequence:\n//    Return integer amount as cents.\n        .arch armv8-a\n// Stack frame\n        .equ    save19, 16\n        .equ    FRAME, 32\n// Constant data\n        .section  .rodata\n        .align  3\nprompt:\n        .string \"Enter amount (use same sign for dollars and cents)\\n\"\ndollars:\n        .string \"   Dollars: \" \ncents:\n        .string \"   Cents: \"\n// Code\n        .text\n        .align  2\n        .global get_money\n        .type   get_money, %function\nget_money:\n        stp     fp, lr, [sp, -FRAME]!   // Create stack frame\n        mov     fp, sp                  // Set our frame pointer\n        str     x19, [sp, save19]       // For local var\n\n        adr     x0, prompt              // Ask for amount\n        bl      write_str\n        adr     x0, dollars             // Ask for dollars\n        bl      write_str\n        bl      get_int                 // Dollars\n     ❶ mov      w1, 100                // 100 cents per dollar\n        mul     w19, w0, w1             // Scale\n\n        adr     x0, cents               // Ask for cents\n        bl      write_str\n        bl      get_int                 // Cents\n     ❷ add     w0, w0, w19             // Add scaled dollars\n\n        ldr     x19, [sp, save19]       // Restore for caller\n        ldp     fp, lr, [sp], FRAME     // Delete stack frame\n        ret                             // Back to caller\n```", "```\n// Display dollars and cents.\n        .arch armv8-a\n// Calling sequence:\n//    w0 <- value in cents\n//    Return 0.\n // Stack frame\n        .equ      save1920, 16\n        .equ      FRAME, 32\n// Constant data\n        .section    .rodata\n        .align   3\n// Code\n        .text\n        .align   2\n        .global  display_money\n        .type    display_money, %function\ndisplay_money:\n        stp      fp, lr, [sp, -FRAME]!     // Create stack frame\n        mov      fp, sp                    // Set our frame pointer\n        stp      x19, x20, [sp, save1920]  // For local vars\n\n        mov      w1, 100                   // 100 cents per dollar\n     ❶ sdiv     w20, w0, w1               // Dollars\n        msub     w19, w20, w1, w0          // Leaving cents\n\n        mov      w0, '$'                   // Some formatting\n        bl       write_char\n        mov      w0, w20                   // Dollars\n        bl       put_int\n\n        mov      w0, '.'s                  // Some formatting\n        bl       write_char\n        cmp      w19, wzr                  // Negative?\n     ❷ cneg    w19, w19, mi               // Make non-negative\n     ❸ cmp     w19, 10                    // Check for single digit\n        b.hs     no_zero                   // Two digits\n        mov      w0, '0'                   // One digit needs leading '0'  \n        bl       write_char\nno_zero:\n        mov      w0, w19                   // Cents\n        bl       put_int\n\n        mov      w0, wzr                   // Return 0\n        ldp      x19, x29, [sp, save1920]  // Restore for caller\n        ldp      fp, lr, [sp], FRAME       // Delete stack frame\n        ret                                // Back to caller\n```", "```\n// Add two dollar values.\n        .arch armv8-a\n// Stack frame\n        .equ    save1920, 16\n        .equ    FRAME, 32\n// Constant data\n        .section  .rodata\n        .align  3\nsum_msg:\n        .string \"Sum = \"\n// Code\n        .text\n        .align  2\n        .global main\n        .type   main, %function\nmain:\n        stp     fp, lr, [sp, -FRAME]!        // Create stack frame\n        mov     fp, sp                       // Set our frame pointer\n        stp     x19, x20, [sp, save1920]     // For local vars\n\n        bl      get_money\n        mov     w19, w0                      // First number\n        bl      get_money\n        mov     w20, w0                      // Second number\n\n        adr     x0, sum_msg                  // Some formatting\n        bl      write_str\n     ❶ add      w0, w19, w20                // Add values\n        bl      display_money                // Show result\n        mov     w0, '\\n'                     // Finish formatting \n        bl      write_char\n\n        mov     w0, wzr                      // Return 0\n        ldp     x19, x20, [sp, save1920]     // Restore for caller\n        ldp     fp, lr, [sp], FRAME          // Delete stack frame\n        ret                                  // Back to caller\n```", "```\n// Add two floats.\n        .arch armv8-a\n// Stack frame\n        .equ    x, 16\n        .equ    y, 20\n        .equ    FRAME, 32\n// Constant data\n        .section  .rodata\n        .align   3\nprompt_format:\n        .string  \"Enter number: \"\nget_format:\n        .string  \"%f\"\nsum_format:\n        .string  \"%f + %f = %f\\n\"\n// Code\n        .text\n        .align   2\n        .global  main\n        .type    main, %function\nmain:\n        stp      fp, lr, [sp, FRAME]!    // Create stack frame\n        mov      fp, sp\n\n        adr      x0, prompt_format       // Ask for number\n        bl       printf\n        add      x1, sp, x               // Place for first number\n        adr      x0, get_format          // Get it\n     ❶ bl       scanf\n        adr      x0, prompt_format       // Ask for number\n        bl       printf\n        add      x1, sp, y               // Place for second number\n        adr      x0, get_format          // Get it\n        bl       scanf\n\n     ❷ ldr      s0, [sp, x]              // Load x\n        ldr      s1, [sp, y]              //      and y\n     ❸ fadd     s2, s0, s1               // Sum\n        fcvt     d0, s0                   // Doubles for printf\n        fcvt     d1, s1\n        fcvt     d2, s2\n        adr      x0, sum_format           // Formatting for printf\n        bl       printf \n        mov      w0, wzr                  // Return 0\n        ldp      fp, lr, [sp], FRAME      // Delete stack frame\n        ret\n```", "```\n\n$ ./add_floats\nEnter number: 123.4\nEnter number: 567.8\n123.400002 + 567.799988 = 691.199989\n```", "```\n--snip--\n(gdb) b 43 Breakpoint 1 at 0x7fc: file add_floats.s, line 43.\n(gdb) r\nStarting program: /home/bob/add_floats_asm/add_floats\nEnter number: 123.4\nEnter number: 567.8\n\nBreakpoint 1, main () at add_floats.s:42\n43              bl      printf\n```", "```\n(gdb) i r d0 d1 d2\nd0             {f = 0x7b, u = 0x405ed999a0000000, s = 0x405ed999a0000000}\n{f = 123.40000152587891, u = 4638383920075767808, s = 4638383920075767808}\nd1             {f = 0x237, u = 0x4081be6660000000, s = 0x4081be6660000000}\n{f = 567.79998779296875, u = 4648205637329616896, s = 4648205637329616896}\nd2             {f = 0x2b3, u = 0x4085999994000000, s = 0x4085999994000000}\n{f = 691.19998931884766, u = 4649291075221979136, s = 4649291075221979136}\n(gdb)\n```", "```\n--snip--\n(gdb) b 39\nBreakpoint 1 at 0x7f0: file add_floats.s, line 39\\. \n(gdb) r\nStarting program: /home/bob/add_floats_asm/add_floats\nEnter number: 16777215.0\nEnter number: 0.1\n\nBreakpoint 1, main () at add_floats.s:39\n39              fcvt    d0, s0                    // Doubles for printf\n(gdb) i r s0 s1 s2\ns0             {f = 0xffffff, u = 0x4b7fffff, s = 0x4b7fffff}\n{f = 16777215, u = 1266679807, s = 1266679807}\ns1             {f = 0x0, u = 0x3dcccccd, s = 0x3dcccccd}\n{f = 0.100000001, u = 1036831949, s = 1036831949}\ns2             {f = 0xffffff, u = 0x4b7fffff, s = 0x4b7fffff}\n{f = 16777215, u = 1266679807, s = 1266679807}\n(gdb) c\nContinuing.\n16777215.000000 + 0.100000 = 16777215.000000\n[Inferior 1 (process 2109) exited normally]\n(gdb)\n```", "```\ns0: 0x4b7fffff\ns1: 0x3dcccccd\ns2: 0x4b7fffff\n```", "```\nEnter number: 1677721.5\nEnter number: -1677721.4\n1677721.500000 + -1677721.375000 = 0.125000\n```", "```\ns0: 0x4b7fffff\ns1: 0x3dcccccd\ns2: 0x4b7fffff\n```", "```\nEnter number: 1677721.5\nEnter number: -1677721.25\n1677721.500000 + -1677721.250000 = 0.250000\n```", "```\n// Test the associativity of floats.\n\n#include <stdio.h>\n\nint main(void)\n{\n    float x, y, z, sum1, sum2;\n\n    printf(\"Enter a number: \");\n    scanf(\"%f\", &x);\n    printf(\"Enter a number: \");\n    scanf(\"%f\", &y);\n    printf(\"Enter a number: \");\n    scanf(\"%f\", &z);\n\n    sum1 = x + y;\n    sum1 += z;      // sum1 = (x + y) + z\n    sum2 = y + z;\n    sum2 += x;      // sum2 = x + (y + z)\n\n    if (sum1 == sum2)\n       printf(\"%f is the same as %f\\n\", sum1, sum2);\n    else\n       printf(\"%f is not the same as %f\\n\", sum1, sum2);\n\n    return 0;\n}\n```", "```\n$ ./three_floats\nEnter a number: 1.0\nEnter a number: 2.0\nEnter a number: 3.0\n6.000000 is the same as 6.000000\n$ ./three_floats\nEnter a number: 1.1\nEnter a number: 1.2\nEnter a number: 1.3\n3.600000 is not the same as 3.600000\n```", "```\n--snip--\n(gdb) b 16\nBreakpoint 1 at 0x83c: file three_floats.c, line 16.\n(gdb) r\nStarting program: /home/bob/three_floats/three_floats\nEnter a number: 1.1\nEnter a number: 1.2\nEnter a number: 1.3\n\nBreakpoint 1, main () at three_floats.c:16\n16          sum1 += z;      // sum1 = (x + y) + z\n```", "```\n(gdb) p &x\n$1 = (float *) 0x7fffffef94\n(gdb) p &y\n$2 = (float *) 0x7fffffef90\n(gdb) p &z\n$3 = (float *) 0x7fffffef8c\n(gdb) p &sum1\n$4 = (float *) 0x7fffffef9c\n(gdb) p &sum2\n$5 = (float *) 0x7fffffef98\n```", "```\n(gdb) x/5fw 0x7fffffef8c\n0x7fffffef8c:   1.29999995           1.20000005       1.10000002       0\n0x7fffffef9c:   2.30000019\n(gdb) x/5xw 0x7fffffef8c\n0x7fffffef8c:   0x3fa66666           0x3f99999a       0x3f8ccccd       0x00000000\n0x7fffffef9c:   0x40133334\n```", "```\n(gdb) n\n17          sum2 = y + z;\n(gdb) x/1fw 0x7fffffef9c\n0x7fffffef9c:   3.60000014\n(gdb) x/1xw 0x7fffffef9c\n0x7fffffef9c:   0x40666667\n```", "```\n(gdb) n\n18          sum2 += x;       // sum2 = x + (y + z)\n(gdb) x/1fw 0x7fffffef98\n0x7fffffef98:   2.5\n(gdb) x/1xw 0x7fffffef98\n0x7fffffef98:   0x40200000\n```", "```\n(gdb) n\n20          if (sum1 == sum2)\n(gdb) x/1fw 0x7fffffef98\n0x7fffffef98:   3.5999999\n(gdb) x/1xw 0x7fffffef98\n0x7fffffef98:   0x40666666\n```", "```\n(gdb) c\nContinuing.\n3.600000 is not the same as 3.600000\n[Inferior 1 (process 3107) exited normally]\n```"]