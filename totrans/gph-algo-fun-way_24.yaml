- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_11">CONCLUSION</samp>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/opener.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Throughout this book, we’ve examined how to model a range of real-world problems
    and systems with graph data structures. We’ve also investigated some of the corresponding
    algorithms to solve these problems. We built upon basic searches, like depth-first
    and breadth-first search, to construct more complex algorithms for tasks like
    topological sort and labeling bipartite graphs. We also introduced a variety of
    more specialized algorithms, such as Kahn’s algorithm for topological sort or
    the removal algorithm for graph coloring.
  prefs: []
  type: TYPE_NORMAL
- en: Yet this book only scratches the surface of the fascinating world of graphs.
    A huge volume of research exists on both the theoretical properties of graphs
    (the mathematical field of *graph theory*) and practical graph algorithms. For
    example, recent computer science research has continued to develop novel approaches
    for processing large graphs. A fully comprehensive coverage of graph algorithms
    is beyond the scope of a single book.
  prefs: []
  type: TYPE_NORMAL
- en: This book has aimed to introduce the fundamental concepts of graphs and explain
    various ways to operate on them. It has provided a foundation and basic toolbox.
    You should be able to adapt the ideas behind these algorithms to techniques beyond
    this book and easily dive into other graph-related topics.
  prefs: []
  type: TYPE_NORMAL
- en: As discussed throughout the book, we can often optimize algorithms and implementations
    to meet the needs of a given use case. As a future step in learning about graphs,
    I encourage you to try modifying the approaches you’ve learned so far to take
    advantage of the properties of a specific problem or to avoid unnecessary overhead.
    For example, rather than storing explicit <samp class="SANS_TheSansMonoCd_W5Regular_11">Node</samp>
    data structures in a graph, it may be more effective in some cases to use a list
    of neighbors. In others, adding auxiliary data to the node’s representation may
    help you avoid repeated computation.
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps the most exciting aspect of computer science is the ability to continually
    explore and build new solutions.
  prefs: []
  type: TYPE_NORMAL
