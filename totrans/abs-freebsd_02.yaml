- en: '**2**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2**'
- en: BEFORE YOU INSTALL
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安装前
- en: '![image](../images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common01.jpg)'
- en: Getting FreeBSD running on your computer isn’t enough, no matter how much that
    first install might satisfy you. It’s just as important that your install be *successful*.
    A successful install is one that works for its intended purpose. Servers have
    very different requirements than desktops, and a server’s intended function can
    completely change installation requirements. Proper planning before installing
    FreeBSD makes installations much less painful. On the downside, you’ll get much
    less experience in reinstalling FreeBSD because you’ll do each install only once.
    If mastering the installation program through exhaustive repeated practice is
    your main goal, skip this boring “thinking ahead” stuff and read the next chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅让 FreeBSD 在您的计算机上运行是不够的，无论第一次安装时多么让您满足。确保您的安装是*成功的*同样重要。一个成功的安装应该是能够达到预期目的的。服务器与桌面计算机有着非常不同的需求，服务器的预期功能可能会完全改变安装需求。在安装
    FreeBSD 之前做好充分的规划，可以使安装过程轻松很多。另一方面，由于您每次安装仅进行一次，您将得到的重复安装经验会少得多。如果您的主要目标是通过反复练习来掌握安装程序，请跳过这段“提前规划”的内容，直接阅读下一章。
- en: I’m assuming that you want to run FreeBSD in the real world, doing real work,
    in a real environment. This environment might be your laptop—while you might argue
    that your laptop isn’t a production system, I challenge you to erase all the data
    on it without backing up and then tell me it’s not a production system. If you’re
    installing on a system intended for destructive testing, and you’re truly indifferent
    to its fate, I still recommend following best practices so that you develop good
    habits.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设您希望在实际环境中运行 FreeBSD，进行实际工作。这种环境可能是您的笔记本电脑—虽然您可能会争辩说您的笔记本电脑不是生产系统，但我挑战您在没有备份的情况下清除所有数据，然后再告诉我它不是生产系统。如果您是在一个打算进行破坏性测试的系统上安装，并且您对其命运完全无所谓，我仍然建议您遵循最佳实践，以便养成良好的习惯。
- en: Consider what hardware you need or have. Then decide how best to use that hardware,
    what filesystem you should use, and how to arrange your disks. Only then should
    you proceed to downloading and installing FreeBSD.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 请先考虑您需要的硬件或您已有的硬件。然后决定如何最佳使用这些硬件，应该使用哪种文件系统，以及如何安排磁盘。只有在此之后，您才应该继续下载和安装 FreeBSD。
- en: 'Before you even start the install, though, let’s look at a couple concepts
    you’ll hit throughout your FreeBSD experience: default files and universal configuration
    language (UCL).'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，在您开始安装之前，让我们先了解一下在您整个 FreeBSD 使用过程中会遇到的一些概念：默认文件和通用配置语言（UCL）。
- en: First, however, you must understand FreeBSD’s default configuration filesystem.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，首先，您必须了解 FreeBSD 的默认配置文件系统。
- en: '**Default Files**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**默认文件**'
- en: FreeBSD separates configuration files into default files and customization files.
    The *default files* contain variable assignments and aren’t intended to be edited;
    instead, they’re designed to be overridden by another file of the same name.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD 将配置文件分为默认文件和自定义文件。*默认文件*包含变量赋值，并不打算进行编辑；相反，它们设计为可以被同名的其他文件覆盖。
- en: Default configurations are kept in a directory called *default*. For example,
    the boot loader configuration file is */boot/loader.conf*, and the default configuration
    file is */boot/defaults/loader.conf*. If you want to see a comprehensive list
    of loader variables, check the default configuration file.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 默认配置文件保存在名为 *default* 的目录中。例如，启动加载器的配置文件是 */boot/loader.conf*，默认配置文件是 */boot/defaults/loader.conf*。如果您想查看完整的加载器变量列表，请查看默认配置文件。
- en: During upgrades, the installer replaces the default configuration files but
    doesn’t touch your local configuration files. This separation ensures that your
    local changes remain intact while still allowing new values to be added to the
    system. FreeBSD adds features with every release, and its developers go to great
    lengths to ensure that changes to these files are backward compatible. This means
    that you won’t have to go through the upgraded configuration and manually merge
    in your changes; at most, you’ll have to check out the new defaults file for nifty
    configuration opportunities and new system features.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在升级过程中，安装程序会替换默认配置文件，但不会修改您的本地配置文件。这种分离方式确保了您的本地更改保持不变，同时允许将新值添加到系统中。FreeBSD
    每次发布都会增加新功能，其开发者会尽力确保对这些文件的更改是向后兼容的。这意味着您不必逐个检查升级后的配置并手动合并更改；最多，您只需查看新的默认文件，以便发现新的配置机会和系统功能。
- en: 'The loader configuration file is a good example of these files. The */boot/defaults/loader.conf*
    file contains dozens of entries much like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: loader 配置文件是这些文件的一个很好的例子。*/boot/defaults/loader.conf* 文件包含多个条目，类似于这样：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The variable `verbose_loading` defaults to `NO`. To change this setting, do
    not edit */boot/defaults/loader.conf*—instead, add the line to */boot/loader.conf*
    and change it there. Your */boot/loader.conf* entries override the default setting,
    and your local configuration contains only your local changes. A sysadmin can
    easily see what changes have been made and how this system differs from the out-of-the-box
    configuration.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 变量 `verbose_loading` 的默认值为 `NO`。要更改此设置，请不要编辑 */boot/defaults/loader.conf*，而是将该行添加到
    */boot/loader.conf* 并在那里修改。你的 */boot/loader.conf* 条目会覆盖默认设置，并且你的本地配置只包含你的本地更改。系统管理员可以轻松查看做了哪些更改，以及该系统与原始配置有何不同。
- en: I encourage you to keep your configuration files in a version control system.
    If you have a global configuration management system like Ansible, that’s grand.
    Without such a system, a centralized repository using svn(1) or the loved-or-loathed
    git(1) will do. Even local revision control systems like rcs(1) can one day save
    your hide.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我鼓励你将配置文件保存在版本控制系统中。如果你有像 Ansible 这样的全球配置管理系统，那就更好了。如果没有这样的系统，使用 svn(1) 或广受喜爱或讨厌的
    git(1) 作为集中式存储库也可以。即使是像 rcs(1) 这样的本地版本控制系统，也能在某一天救你一命。
- en: '**DON’T COPY THE DEFAULT CONFIG!**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**不要复制默认配置！**'
- en: One common mistake is to copy the default configuration to the override file
    and then make changes there directly. Such copying will cause major problems in
    certain parts of the system. You might get away with it in one or two places,
    but eventually it will bite you. Copying */etc/defaults/rc.conf* to */etc/rc.conf*,
    for example, will prevent your system from booting. You have been warned.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的错误是将默认配置复制到覆盖文件中，然后直接在那里进行修改。这样的复制会导致系统某些部分出现重大问题。你可能在一两个地方勉强能过得去，但最终它会给你带来麻烦。例如，将
    */etc/defaults/rc.conf* 复制到 */etc/rc.conf* 会导致系统无法启动。你已经被警告过了。
- en: The default configuration mechanism appears throughout FreeBSD, especially in
    the core system configuration.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 默认配置机制在整个 FreeBSD 中都会出现，尤其是在核心系统配置中。
- en: '**Configuration with UCL**'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用 UCL 配置**'
- en: The *universal configuration language*, or *UCL*, is a common library for managing
    Unix-style configuration files. FreeBSD uses UCL for core functions, such as the
    packaging system.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*通用配置语言*，或 *UCL*，是用于管理 Unix 风格配置文件的通用库。FreeBSD 使用 UCL 来处理核心功能，例如打包系统。'
- en: Any file that is in UCL can appear in one of several formats, such as the traditional
    variable = setting format most Unix programs use, YAML, or JSON. If you’ve configured
    any Unix software before, UCL won’t be a problem.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 任何位于 UCL 中的文件可以采用几种格式之一，例如大多数 Unix 程序使用的传统变量 = 设置格式、YAML 或 JSON。如果你之前配置过任何 Unix
    软件，UCL 不会是问题。
- en: We’ll see examples of UCL-style configuration throughout this book. You don’t
    need to know the details of UCL at this time, merely that UCL is a thing in FreeBSD.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中将展示 UCL 风格配置的例子。此时你不需要了解 UCL 的详细信息，只需知道 UCL 是 FreeBSD 中的一种配置方式。
- en: '**FreeBSD Hardware**'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**FreeBSD 硬件**'
- en: FreeBSD supports a whole bunch of hardware, including different architectures
    and devices designed for each architecture. One of the Project’s goals is to support
    the most widely available hardware, and that list of hardware includes far more
    than the “personal computer.” Today’s fully supported *Tier 1* hardware includes
    32-bit and 64-bit versions of the Intel-style processor.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD 支持大量硬件，包括为每种架构设计的不同架构和设备。该项目的目标之一是支持最广泛可用的硬件，硬件清单包含的设备远不止“个人电脑”。今天完全支持的*Tier
    1*硬件包括32位和64位版本的英特尔风格处理器。
- en: Most modern hardware uses 64-bit extensions to Intel’s classic 32-bit architecture.
    These extensions were created by AMD, and so the platform is called *amd64*. Most
    hardware built in the last decade uses the amd64 standard. While amd64 hardware
    will boot both 32-bit and 64-bit versions of FreeBSD, the 32-bit version contains
    a bunch of workarounds to support the hardware’s features and expanded address
    space. Run 64-bit FreeBSD on 64-bit hardware.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代硬件使用英特尔经典 32 位架构的 64 位扩展。这些扩展由 AMD 创建，因此该平台被称为*amd64*。过去十年内大多数硬件都采用了 amd64
    标准。虽然 amd64 硬件可以启动 FreeBSD 的 32 位和 64 位版本，但 32 位版本包含了一些绕过措施来支持硬件特性和扩展的地址空间。在 64
    位硬件上运行 64 位 FreeBSD。
- en: The traditional 32-bit IBM-compatible PC dominated computing for decades. FreeBSD
    supports that hardware with the *i386* platform.^([1](footnote.xhtml#ch02fn1))
    Use the i386 version of FreeBSD only on pure 32-bit hardware. FreeBSD offers limited
    support for a few other hardware platforms, calling them *Tier 2 architectures*.
    Some of these are increasingly popular, such as ARM. FreeBSD supports both 32-bit
    and 64-bit ARM CPUs with the *arm* and *arm64* platforms. Support for 64-bit ARM
    hardware is improving rapidly, and you can expect ARM64 to become a Tier 1 platform
    soon. Other hardware platforms are on their way out and have been demoted to Tier
    2 before being removed from the source tree. Additionally, you can run FreeBSD
    on PowerPC (*ppc*) and 64-bit Sparc (*sparc64*) hardware, which never made it
    up to Tier 1\. Temporary breakage of bleeding-edge FreeBSD is acceptable on Tier
    2 platforms. Tier 2 platforms might or might not have packages available.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的32位IBM兼容PC主导了计算领域数十年。FreeBSD通过*i386*平台支持该硬件。^([1](footnote.xhtml#ch02fn1))
    仅在纯32位硬件上使用FreeBSD的i386版本。FreeBSD对一些其他硬件平台提供有限支持，称其为*Tier 2架构*。其中一些架构逐渐变得越来越流行，例如ARM。FreeBSD支持32位和64位ARM
    CPU，分别对应*arm*和*arm64*平台。对64位ARM硬件的支持正在迅速提升，预计ARM64很快会成为Tier 1平台。其他硬件平台正在逐渐退出，并且在被从源代码树中移除之前已经降级为Tier
    2平台。此外，你还可以在PowerPC（*ppc*）和64位Sparc（*sparc64*）硬件上运行FreeBSD，虽然这些硬件从未进入Tier 1平台。Tier
    2平台可以接受FreeBSD的前沿版本出现临时故障。Tier 2平台可能会有，也可能没有可用的软件包。
- en: You’ll also find *Tier 3* platforms, which are highly experimental. RISCV hardware
    is at Tier 3.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会发现*Tier 3*平台，它们是高度实验性的。RISCV硬件属于Tier 3。
- en: '*Tier 4* includes barely supported platforms. Some of them are long obsolete
    and on their way out. The code still exists and could theoretically be resurrected,
    but nobody cares enough to do the work. Others might be on their way in but are
    not yet fully developed. Every platform that reaches a higher tier passes through
    Tier 4 on its way up.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*Tier 4*包括几乎没有支持的平台。其中一些平台已经过时，正处于退出阶段。虽然代码仍然存在，并且理论上可以被复兴，但没有人愿意做这项工作。其他平台可能正在开发中，但还没有完全成熟。每个达到更高Tier的平台都会经过Tier
    4这个阶段。'
- en: 'FreeBSD supports many network cards, hard drive controllers, and other peripherals
    for each architecture. As many of these architectures use similar interfaces and
    hardware, this isn’t as much of a challenge as you might think: SATA is SATA anywhere,
    and an Intel Ethernet card doesn’t magically transform when you put it in an arm64
    machine.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD支持为每种架构设计的许多网络卡、硬盘控制器和其他外设。由于许多架构使用相似的接口和硬件，因此这并不像你想象的那么具有挑战性：SATA在任何地方都是SATA，Intel以太网卡也不会因为你把它插入arm64机器就变魔术一样。
- en: While FreeBSD runs just fine on ancient hardware, that hardware must be in acceptable
    condition. If your Pentium IV crashes because it has bad RAM, installing FreeBSD
    won’t stop the crashes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然FreeBSD在古老的硬件上运行得很好，但该硬件必须处于可接受的状态。如果你的Pentium IV因为内存有问题而崩溃，安装FreeBSD也无法阻止崩溃。
- en: FreeBSD supports most RAID controllers and includes software to manage most
    of them. However, I would encourage folks running the UFS filesystem to use FreeBSD’s
    RAID options rather than a hardware RAID controller. RAID controllers were created
    when managing storage redundancy was so computing intensive that it monopolized
    the host’s processor. Today’s computing hardware manages RAID without breaking
    a sweat. Additionally, RAID controllers use custom formats on hard drives. Often,
    the only device that can read those disks is another RAID controller of the exact
    same model. The unexpected demise of a RAID controller can leave you trawling
    dubious internet auctions in search of old controllers. And if you think those
    controllers are expensive new, wait until they’re five years old and the only
    folks willing to buy them are those truly desperate for that exact model! FreeBSD
    has a few different options for software RAID, and those disks can be read with
    any similar hardware.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD支持大多数RAID控制器，并包括管理大多数RAID控制器的软件。然而，我建议使用UFS文件系统的用户选择FreeBSD的RAID选项，而不是硬件RAID控制器。RAID控制器是在存储冗余管理如此占用计算资源的时代诞生的，那时管理冗余几乎完全占用了主机的处理器。如今的计算硬件能够轻松管理RAID。此外，RAID控制器在硬盘上使用自定义格式。通常，只有相同型号的RAID控制器才能读取这些磁盘。RAID控制器的意外故障可能会让你在可疑的网络拍卖中搜索旧控制器。而且，如果你觉得这些控制器新买时价格高，等到它们使用五年后再买，那时愿意买的人只有那些急需该型号的人！FreeBSD提供几种不同的软件RAID选项，这些磁盘可以用任何类似硬件读取。
- en: If you’re using ZFS, the warnings against RAID controllers become “just don’t.”
    ZFS expects to have direct access to the disks. Using a RAID controller disables
    much of ZFS’s self-healing and error-correction abilities. If you must use a RAID
    controller, disable RAID and have it serve as a storage controller. While many
    RAID cards claim they can act as a RAID controller, most actually serve up a bunch
    of one-drive RAID containers. Verify that your RAID controller can be shifted
    to just-a-bunch-of-disks (JBOD) or host-bus-adapter (HBA) mode before deploying
    ZFS on it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 ZFS，关于 RAID 控制器的警告就变成了“直接不要用”。ZFS 期望能够直接访问磁盘。使用 RAID 控制器会禁用 ZFS 的自我修复和错误校正功能。如果你必须使用
    RAID 控制器，请禁用 RAID 并让它作为存储控制器使用。虽然许多 RAID 卡声称可以作为 RAID 控制器使用，但大多数实际上只是提供一堆单盘 RAID
    容器。在部署 ZFS 之前，确保你的 RAID 控制器可以切换到仅磁盘（JBOD）模式或主机总线适配器（HBA）模式。
- en: This book uses amd64 as a reference platform. Everything should work on a 32-bit
    i386 host, but amd64 is the world’s standard these days, so we’ll use it. The
    test systems include a couple of iXsystems storage servers and a variety of virtual
    machines.^([2](footnote.xhtml#ch02fn2))
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用 amd64 作为参考平台。所有内容应该也可以在 32 位 i386 主机上运行，但目前 amd64 是全球标准，因此我们将使用它。测试系统包括几台
    iXsystems 存储服务器和各种虚拟机。^([2](footnote.xhtml#ch02fn2))
- en: '***Proprietary Hardware***'
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***专有硬件***'
- en: Some hardware vendors believe that keeping their hardware interfaces secret
    prevents competitors from copying their designs and breaking into their market.
    This has repeatedly been demonstrated to be terrible strategy, especially as the
    flood of generic parts has largely drowned these secretive hardware manufacturers.
    A few vendors still cling to their secrecy, however. We call such devices *proprietary
    hardware*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一些硬件厂商认为，保持其硬件接口的保密能够防止竞争对手复制他们的设计并打入他们的市场。然而，这种策略已经一再被证明是糟糕的，特别是在大量通用零件涌入市场后，这些保密的硬件厂商基本上被淹没了。不过，仍有一些厂商固守他们的保密策略。我们称这类设备为
    *专有硬件*。
- en: Developing device drivers for a piece of hardware without its interface specifications
    is quite difficult. Some hardware can be well supported without full documentation
    and is sufficiently common to make struggling through this lack of documentation
    worthwhile.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为一款硬件开发设备驱动程序而没有其接口规范是相当困难的。有些硬件在没有完整文档的情况下也能得到很好的支持，并且足够常见，以至于值得在缺少文档的情况下进行努力。
- en: If a FreeBSD developer has a piece of hardware, documentation for that hardware,
    and interest in that hardware, he’ll probably implement support for it. If not,
    that hardware won’t work on FreeBSD. In most cases, unsupported proprietary hardware
    can be easily replaced with less expensive and more open options.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个 FreeBSD 开发者拥有一款硬件、该硬件的文档并且对这款硬件感兴趣，他可能会为其实现支持。如果没有，那款硬件就无法在 FreeBSD 上工作。在大多数情况下，不受支持的专有硬件可以轻松地被更便宜、更开放的选项所替代。
- en: Some vendors provide closed-source binary drivers for their hardware in the
    form of kernel modules (see [Chapter 6](ch06.xhtml#ch06)). Remember that while
    FreeBSD refers to the kernel as modular, that means that you can choose which
    parts to load and which to leave out. Once a kernel module is loaded, that module
    has complete access to the entire kernel. It’s entirely possible for a video driver
    kernel module to corrupt your filesystem. I strongly encourage you to avoid binary
    drivers whenever possible, and to avoid hardware that requires such drivers.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一些厂商为其硬件提供封闭源的二进制驱动程序，以内核模块的形式提供（参见 [第6章](ch06.xhtml#ch06)）。记住，虽然 FreeBSD 将内核称为模块化的，但这意味着你可以选择加载哪些部分，哪些部分不加载。一旦加载了内核模块，该模块便可以完全访问整个内核。视频驱动程序的内核模块完全有可能破坏你的文件系统。我强烈建议你尽可能避免使用二进制驱动程序，并避免使用需要此类驱动程序的硬件。
- en: '**IS MY HARDWARE SUPPORTED?**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**我的硬件是否受支持？**'
- en: The easiest way to determine whether a piece of hardware is supported is to
    boot FreeBSD on it. If you don’t have physical access to the hardware yet, check
    *[https://www.FreeBSD.org/](https://www.FreeBSD.org/)* for the release notes for
    your chosen version.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 确定硬件是否受支持的最简单方法是启动 FreeBSD。如果你还没有物理访问该硬件，请查看 *[https://www.FreeBSD.org/](https://www.FreeBSD.org/)*
    上你选择的版本的发行说明。
- en: '***Hardware Requirements***'
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***硬件要求***'
- en: Once upon a time, a host’s minimal hardware requirements were a big deal. FreeBSD
    1.0 supported very specific hard drive controllers and Ethernet adapters, and
    needed several megabytes of RAM. Hardware that couldn’t run FreeBSD was still
    in common use back then.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 曾几何时，主机的最低硬件要求是一个大问题。FreeBSD 1.0只支持非常特定的硬盘控制器和以太网适配器，并且需要几兆字节的内存。在那个时候，无法运行FreeBSD的硬件依然在广泛使用。
- en: Most hardware requirements are a thing of the past. Any amd64 system ever produced
    can run FreeBSD. Any server-grade i386 system built this millennium can run FreeBSD.
    Yes, a Pentium with a meager 18GB SCSI-2 disk and a paltry 128MB of RAM offers
    mediocre performance, but if you want good performance, try not using that hardware.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数硬件要求已经成为过去。任何生产过的amd64系统都能运行FreeBSD。任何在本千年内制造的服务器级i386系统都能运行FreeBSD。是的，一台配备18GB
    SCSI-2硬盘和128MB内存的Pentium提供的性能平平，但如果你想要更好的性能，尽量不要使用那样的硬件。
- en: Just because a piece of hardware should work doesn’t mean it will work. “Inexpensive”
    is not the same as “cheap.” Supported lousy hardware is still lousy. Research
    your hardware before buying it.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅因为某个硬件应该能够工作，并不意味着它一定能工作。“便宜”并不等同于“廉价”。被支持的劣质硬件依然是劣质的。在购买硬件之前，最好先做些研究。
- en: FreeBSD runs fine on hypervisors, such as VMware, VirtualBox, Xen, and KVM.
    Legitimate cloud providers offer FreeBSD images and ISOs. FreeBSD runs just fine
    on the integrated bhyve(8) hypervisor and OpenBSD’s vmm(8). You can do a base
    install with 128MB of RAM and 1GB of disk, although you’ll probably want more
    than that for serious experimentation.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD可以在虚拟机管理程序（如VMware、VirtualBox、Xen和KVM）上运行良好。合法的云服务提供商提供FreeBSD镜像和ISO文件。FreeBSD也可以顺利运行在集成的bhyve(8)虚拟机管理程序和OpenBSD的vmm(8)上。你可以在128MB
    RAM和1GB磁盘的情况下进行基础安装，尽管为了更深入的实验，你可能需要更多的资源。
- en: '***BIOS versus EFI***'
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***BIOS 与 EFI***'
- en: Back in the 1980s, IBM invented the *basic input/output system (BIOS)* to handle
    low-level hardware tasks, like finding the operating system. Generations of IT
    people have argued with the BIOS. BIOS had built-in limitations that keep it from
    working well on modern hardware, though. The modern BIOS-like thing is called
    the *Extensible Firmware Interface (EFI)*. EFI is far more flexible and powerful
    than the BIOS. FreeBSD boots just fine from EFI, and using EFI permits FreeBSD
    to do some interesting things, like full-disk encryption.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 上世纪80年代，IBM发明了*基本输入输出系统（BIOS）*，用于处理低级硬件任务，比如寻找操作系统。然而，BIOS有内建的限制，使其在现代硬件上表现不佳。现代的BIOS替代品是*可扩展固件接口（EFI）*，它比BIOS更灵活、更强大。FreeBSD可以顺利从EFI启动，使用EFI还能让FreeBSD做一些有趣的事情，比如全盘加密。
- en: If your hardware supports EFI, use it. Only fall back to BIOS mode if FreeBSD
    exposes a bug in your hardware’s EFI implementation, in which case I’d encourage
    you to file a bug (see [Chapter 24](ch24.xhtml#ch24)). Note that the hardware
    setup utility might call BIOS mode “legacy boot” or “ancient crap” or some such
    thing.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的硬件支持EFI，就使用EFI。只有在FreeBSD暴露出你硬件的EFI实现中的错误时，才回退到BIOS模式，在这种情况下我建议你提交一个bug报告（参见[第24章](ch24.xhtml#ch24)）。需要注意的是，硬件设置工具可能会把BIOS模式称作“传统启动”或“古老垃圾”之类的名称。
- en: '**Disks and Filesystems**'
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**磁盘和文件系统**'
- en: Perhaps the most critical part of installing a system is how you allocate disk
    space and which filesystem you use. A base install of FreeBSD fits in about half
    a gigabyte of disk, but the filesystem beneath those files dictates much of how
    the system behaves.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 安装系统时，最关键的部分可能就是如何分配磁盘空间以及使用哪个文件系统。FreeBSD的基本安装大约需要半个GB的磁盘空间，但文件系统的选择在很大程度上决定了系统的行为。
- en: '***FreeBSD Filesystems***'
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***FreeBSD 文件系统***'
- en: FreeBSD supports two major filesystems, UFS and ZFS. Which should you use? That
    depends entirely on what you want to do with your system. To make a decision before
    booting your install media, you’ll need to understand the basics of each.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD 支持两种主要的文件系统，UFS 和 ZFS。你应该使用哪种呢？这完全取决于你打算如何使用你的系统。在启动安装媒体之前做出决定，你需要了解每种文件系统的基本知识。
- en: FreeBSD’s *Unix File System (UFS)* is a direct descendant of the filesystem
    shipped with 4.4 BSD and has been under continuous development for decades. One
    of UFS’s original authors still hangs around the FreeBSD community actively improving
    the filesystem, as well as offering support and guidance to newer generations
    of developers. UFS’s place as the primordial FreeBSD filesystem has let it extend
    fingers throughout the operating system. Many other FreeBSD filesystems attach
    to the kernel’s virtual memory system through infrastructure created for UFS.
    UFS is designed to handle the most common situations effectively while reliably
    supporting unusual configurations. FreeBSD ships with UFS configured to be as
    widely useful as possible on modern hardware, but you can choose to optimize a
    partition for trillions of tiny files or a handful of 1TB files if you desire.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD 的 *Unix 文件系统（UFS）* 是直接继承自 4.4 BSD 随附的文件系统，已经持续开发了几十年。UFS 的其中一位原创作者至今仍活跃在
    FreeBSD 社区，持续改进文件系统，并为新一代开发者提供支持和指导。UFS 作为原始的 FreeBSD 文件系统，已经将其影响扩展到操作系统的各个方面。许多其他
    FreeBSD 文件系统通过为 UFS 创建的基础设施，连接到内核的虚拟内存系统。UFS 设计用于有效处理最常见的情况，同时可靠地支持不常见的配置。FreeBSD
    配备了针对现代硬件广泛优化的 UFS，但如果你愿意，也可以选择优化一个分区，用于处理万亿个小文件或几个 1TB 的大文件。
- en: '*ZFS* (not an acronym) was introduced by Solaris in 2005 and integrated into
    FreeBSD in 2007\. Its youth seems to be a disadvantage, but it combines technologies
    and concepts that have been used for much longer. ZFS computes a checksum of every
    block of data or metadata and can use it for error correction. Storage is pooled,
    meaning that you can dynamically add more disks to an existing ZFS filesystem
    without recreating the filesystem. ZFS has a whole bunch of cool features, such
    as highly effective built-in replication and the ability to create and remove
    datasets (partitions) on the fly.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*ZFS*（不是缩写）由 Solaris 于 2005 年推出，并在 2007 年集成到 FreeBSD 中。它的年轻似乎是一个劣势，但它结合了许多已经使用了很长时间的技术和概念。ZFS
    计算每个数据块或元数据的校验和，并可以用它进行错误修正。存储是池化的，这意味着你可以在不重新创建文件系统的情况下，动态地向现有的 ZFS 文件系统添加更多磁盘。ZFS
    有许多很酷的功能，比如高效的内建复制功能，以及能够实时创建和删除数据集（分区）。'
- en: While ZFS was written over a decade ago, it was written for future hardware.
    All of those cool features impose a performance cost, and ZFS can use a whole
    bunch of memory. While 32-bit systems can use ZFS, it’s not recommended. I resist
    running ZFS on hosts with less than 4GB of RAM and refuse to run it on less than
    2GB of RAM. UFS serves small and embedded systems better than ZFS can.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 ZFS 是在十多年前编写的，但它是为未来的硬件而设计的。所有这些酷功能都带来了性能成本，ZFS 可能会占用大量内存。虽然 32 位系统可以使用 ZFS，但不推荐这样做。我不建议在内存少于
    4GB 的主机上运行 ZFS，并且拒绝在少于 2GB 内存的主机上运行它。UFS 更适合小型和嵌入式系统，而不是 ZFS。
- en: ZFS makes a great storage system for a virtualization server, but it isn’t necessarily
    right for virtual machines that use disk images. Many virtual machines don’t get
    enough memory to effectively run ZFS. Additionally, I’ve seen more than one KVM-based
    virtualization system fail to migrate ZFS-based virtual machines. If you want
    to use ZFS on virtualized clients, be sure your virtualization system supports
    restoring and migrating ZFS disk images before installing a slew of hosts.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: ZFS 是虚拟化服务器的一个优秀存储系统，但对于使用磁盘映像的虚拟机来说，未必是最佳选择。许多虚拟机没有足够的内存来有效地运行 ZFS。此外，我也曾看到过多个基于
    KVM 的虚拟化系统无法迁移基于 ZFS 的虚拟机。如果你打算在虚拟化客户端上使用 ZFS，务必确保你的虚拟化系统支持恢复和迁移 ZFS 磁盘映像，再安装一大堆主机。
- en: Some people insist that ZFS requires ECC RAM. ECC RAM is good, and you should
    get it if you can. ZFS without ECC is no worse than UFS *with* ECC, however. ECC
    provides a layer of integrity checks much like ZFS. If a host’s non-ECC memory
    gets hit by a cosmic ray, ZFS writes corrupt data to disk—just as if you used
    UFS.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人坚持认为 ZFS 需要 ECC RAM。ECC RAM 是非常好的，如果可以的话，你应该选择它。然而，没有 ECC 的 ZFS 并不比带 ECC
    的 UFS *更差*。ECC 提供了一层完整性检查，类似于 ZFS。如果主机的非 ECC 内存被宇宙射线击中，ZFS 会将损坏的数据写入磁盘——就像你使用
    UFS 一样。
- en: Finally, ZFS assumes you’re doing things the ZFS way. ZFS is a combination filesystem
    and volume manager. It expects access to raw disks. Never, never, *never* use
    a RAID controller with ZFS; using RAID volumes as disks interferes with ZFS’s
    self-healing features. Many RAID controllers claim to offer raw disks, but what
    they really offer are one-disk RAID containers.^([3](footnote.xhtml#ch02fn3))
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，ZFS 假设你是在以 ZFS 的方式进行操作。ZFS 是一个结合了文件系统和卷管理的系统，它要求对原始磁盘的访问。切记，*绝不要*在 ZFS 中使用
    RAID 控制器；使用 RAID 卷作为磁盘会干扰 ZFS 的自我修复功能。许多 RAID 控制器声称提供原始磁盘，但实际上它们提供的是单磁盘 RAID 容器。^([3](footnote.xhtml#ch02fn3))
- en: UFS isn’t perfect either. A power failure or system crash can damage a UFS filesystem.
    Repairing that filesystem takes time and system memory. Roughly speaking, repairing
    each terabyte in a UFS filesystem requires 700MB of RAM. If you create a 7TB filesystem
    on a system with 6GB of RAM, FreeBSD can’t automatically repair it.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: UFS 也并不完美。断电或系统崩溃可能会损坏 UFS 文件系统。修复该文件系统需要时间和系统内存。大致来说，修复每一个 terabyte 的 UFS 文件系统需要
    700MB 的内存。如果你在一个拥有 6GB 内存的系统上创建一个 7TB 的文件系统，FreeBSD 将无法自动修复它。
- en: To boil this all down, on a modern amd64 laptop or a server, I recommend ZFS.
    Test ZFS with your virtualization system. If it works, use ZFS for 64-bit virtual
    machines with 4GB of RAM or greater. On i386 hardware or 64-bit hosts with less
    than 4GB of RAM, use UFS.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，在一台现代的 amd64 笔记本电脑或服务器上，我推荐使用 ZFS。测试 ZFS 是否能与您的虚拟化系统兼容。如果可以使用，请将 ZFS 用于具有
    4GB 或更大内存的 64 位虚拟机。对于 i386 硬件或内存少于 4GB 的 64 位主机，使用 UFS。
- en: If you’re running a high-load, high-volume application and database, experiment
    with both UFS and ZFS on your production hardware to see which works better in
    your application before proceeding. Experiment with different arrangements of
    disks, ZFS pool types, and GEOM RAID methods. Some applications work better with
    UFS than ZFS. Netflix, for example, delivers all of its content from FreeBSD hosts
    with massive amounts of storage formatted with UFS. Before installing your massive
    storage server, review [Chapter 12](ch12.xhtml#ch12) for additional ZFS deployment
    considerations.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在运行一个高负载、高流量的应用程序和数据库，在继续之前，建议在生产硬件上同时测试 UFS 和 ZFS，以查看哪种在你的应用程序中表现更好。可以尝试不同的磁盘配置、ZFS
    池类型以及 GEOM RAID 方法。有些应用程序在 UFS 上运行得比在 ZFS 上更好。例如，Netflix 就是通过 FreeBSD 主机提供其所有内容，这些主机上拥有大量存储，格式化为
    UFS。在安装大容量存储服务器之前，请查看[第 12 章](ch12.xhtml#ch12)以获取更多 ZFS 部署的相关考虑。
- en: 'All this advice is secondary to an iron rule: choose the filesystem that best
    suits your environment.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些建议都服从一个铁律：选择最适合你环境的文件系统。
- en: '***Filesystem Encryption***'
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***文件系统加密***'
- en: Disk encryption has become a vital feature for many environments. A user that
    loses his laptop doesn’t want to lose his data. Certain organizations require
    that critical data be encrypted on resting, or inactive, disks. You can’t retroactively
    encrypt a disk on an installed system.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 磁盘加密已成为许多环境中的重要功能。一个丢失笔记本电脑的用户并不想丢失他的数据。某些组织要求对静态或非活动磁盘上的关键数据进行加密。你不能在已安装的系统上事后对磁盘进行加密。
- en: 'FreeBSD supports two disk encryption systems: *GEOM-Based Disk Encryption (GBDE)*
    and *GELI*. The gbde(8) encryption system is designed for use in situations where
    the mere existence of encrypted data can threaten the user’s life. It’s designed
    to protect a user who has a gun to their head. Thankfully, that use case is rare;
    this book doesn’t cover it.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD 支持两种磁盘加密系统：*基于 GEOM 的磁盘加密（GBDE）* 和 *GELI*。gbde(8) 加密系统专为那些加密数据的存在可能威胁到用户生命的情况设计。它是为了保护一个被枪指着头的用户而设计的。幸运的是，这种使用场景比较少见；本书不涉及此内容。
- en: The geli(8) encryption system protects against more common risks. If your laptop
    is stolen, GELI prevents the thief from reading the hard drive.^([4](footnote.xhtml#ch02fn4))
    If you store your company’s financial records on a GELI-encrypted partition, the
    service tech can’t read it during a service call. [Chapter 23](ch23.xhtml#ch23)
    covers GELI in more detail.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: geli(8) 加密系统则针对更常见的风险提供保护。如果你的笔记本电脑被盗，GELI 会防止小偷读取硬盘。^([4](footnote.xhtml#ch02fn4))
    如果你将公司的财务记录存储在 GELI 加密的分区中，服务技术员在服务过程中是无法读取这些数据的。[第 23 章](ch23.xhtml#ch23)将更详细地介绍
    GELI。
- en: Many organizations require disks containing financial data or intellectual property
    to be rendered unreadable when decommissioned. You can send such disks to be shredded,
    but encrypting the disks at install time is equally effective. The disks become
    unreadable when you destroy the encryption key.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 许多组织要求包含财务数据或知识产权的磁盘在退役时必须无法读取。你可以将这样的磁盘送去粉碎，但在安装时对磁盘进行加密同样有效。当你销毁加密密钥时，磁盘将变得不可读取。
- en: I recommend encrypting either the entire system or none of the system. Partially
    encrypted disks leave opportunities for skilled intruders to sabotage your system
    and subvert the encryption.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议要么加密整个系统，要么不加密任何部分。部分加密的磁盘会给技术高超的入侵者留下机会，破坏你的系统并绕过加密。
- en: Decide whether or not you need encryption before proceeding.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，决定是否需要加密。
- en: '***Disk Partitioning Methods***'
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***磁盘分区方法***'
- en: Disk *partitioning* lets you divide a disk or disk array into logical units.
    Even hosts with average consumer-grade operating systems, such as the Windows
    laptop you’ll find at your local big-box store, ship with multiple partitions
    on the hard drive. A *partitioning scheme* is the system for organizing partitions
    on a disk.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 磁盘*分区*让你可以将一个磁盘或磁盘阵列划分为多个逻辑单元。即使是普通消费者级别的操作系统（比如你在本地大型商店里看到的 Windows 笔记本）也通常会在硬盘上设置多个分区。*分区方案*是组织磁盘上分区的系统。
- en: Computing is always in transition between technologies, and right now we’re
    amidst a particularly annoying change in disk partitioning. Older and smaller
    hardware uses master boot record (MBR) partitioning and is always limited to disks
    of 2TB or smaller. Newer and larger hardware uses the more flexible and generally
    better GUID Partition Tables (GPT) scheme. FreeBSD manages both types of partition
    with gpart(8).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 计算技术总是在不断变化中，现在我们正处在一个特别令人头疼的磁盘分区变革中。旧的、较小的硬件使用主引导记录（MBR）分区，且始终限制在 2TB 或更小的磁盘上。新的、更大的硬件则使用更灵活、通常更好的
    GUID 分区表（GPT）方案。FreeBSD 使用 gpart(8) 管理这两种类型的分区。
- en: Which should you use in your install? Use GPT on any system that supports GPT,
    no matter the size of the disk. Use MBR if and *only* if the system can’t support
    GPT. (You can use gptboot(8) and gptzfsboot(8) to bludgeon GPT support onto MBR-only
    disks, but save that for your second or third install.)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装时应该使用哪个分区方案？在任何支持 GPT 的系统上都使用 GPT，不管磁盘的大小。只有在系统无法支持 GPT 的情况下，才使用 MBR。（你可以使用
    gptboot(8) 和 gptzfsboot(8) 将 GPT 支持强加到仅支持 MBR 的磁盘上，但这应该留到第二次或第三次安装时使用。）
- en: I’ve encountered more than one system that supports GPT but has a hardware limitation
    that prevents it from using disks larger than 2TB. While MBR might seem sensible
    on such a system, remember that GPT is far more flexible. Even if you’re a sysadmin
    with decades of experience with MBR, learn and use GPT.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我遇到过不止一个支持 GPT 的系统，但它们有硬件限制，无法使用大于 2TB 的磁盘。虽然在这样的系统上使用 MBR 似乎很合理，但请记住，GPT 要灵活得多。即使你是一位拥有几十年
    MBR 经验的系统管理员，也请学习并使用 GPT。
- en: '***Partitioning with UFS***'
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用 UFS 进行分区***'
- en: If you decide to use UFS for your host, you’ll need to consider filesystem partitioning.
    Thanks to the wide variety of disk sizes FreeBSD supports, the installer doesn’t
    attempt to predict how you’ll want to partition your system. Decide how to partition
    the disk before installing.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定为主机使用 UFS，你需要考虑文件系统分区。由于 FreeBSD 支持多种磁盘大小，安装程序不会尝试预测你希望如何分区系统。请在安装之前决定如何分区磁盘。
- en: At a minimum, separate your operating system from your data. If this host is
    for user accounts, create a separate */home* partition. If you’re running a database,
    create a partition for the database. Web servers should have a partition for web
    data and probably a second one for logs.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 至少，要将操作系统与数据分开。如果此主机用于用户帐户，创建一个单独的 */home* 分区。如果你在运行数据库，创建一个数据库的分区。Web 服务器应该有一个用于
    Web 数据的分区，可能还需要一个用于日志的分区。
- en: As an old Unix hand, I usually create separate */usr*, */usr/local*, */var*,
    */var/log*, and */home* partitions, as well as a partition for root (*/*) and
    one for swap space, plus a separate partition for the server’s application data.
    I’m told that I’m a fuddy-duddy, though, and that my concerns about rogue processes
    and users filling up the hard drive are obsolete these days.^([5](footnote.xhtml#ch02fn5))
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名老派的 Unix 用户，我通常会创建独立的 */usr*、*/usr/local*、*/var*、*/var/log* 和 */home* 分区，以及一个根分区（*/*）和一个交换空间分区，再加上一个用于服务器应用数据的独立分区。不过，我被告知我是个死板的人，认为对抗恶意进程和用户填满硬盘的担忧已经过时了。^[5](footnote.xhtml#ch02fn5)
- en: A base install of modern FreeBSD fits in about half a gigabyte. That’s trivial
    next to today’s hard drives. On a modern disk running on real hardware, assigning
    20GB for the operating system and related programs should be more than sufficient.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现代 FreeBSD 的基础安装大约需要半个 GB 的空间。与当今的硬盘相比，这是微不足道的。在一块运行在真实硬件上的现代硬盘上，分配 20GB 给操作系统和相关程序应该是足够的。
- en: If you’re running FreeBSD on modern hardware, though, you probably want to use
    ZFS rather than UFS.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你在现代硬件上运行 FreeBSD，你可能更倾向于使用 ZFS 而不是 UFS。
- en: '***Multiple Operating Systems***'
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***多个操作系统***'
- en: Back in the Stone Age (roughly 2001), being able to install four operating systems
    on a single 6GB hard drive thrilled me. This was the only way to run multiple
    operating systems on a desktop without swapping hard drives.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在石器时代（大约 2001 年），能够在单个 6GB 的硬盘上安装四个操作系统让我感到非常兴奋。这是唯一一种在桌面上运行多个操作系统而不需要更换硬盘的方法。
- en: It’s still possible to do multiboot installations, but virtualization is far
    better. You don’t have to shut down your main operating system to access one of
    the other operating systems. The bhyve(8) hypervisor lets you run other operating
    systems, including Microsoft Windows, on top of FreeBSD. Other operating systems
    have hypervisors that let you run FreeBSD on top of them.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然可以进行多重引导安装，但虚拟化要好得多。你不必关闭主操作系统就能访问其他操作系统。bhyve(8) 虚拟机管理程序允许你在 FreeBSD 上运行其他操作系统，包括微软的
    Windows。其他操作系统也有虚拟机管理程序，允许你在它们上面运行 FreeBSD。
- en: '***Multiple Hard Drives***'
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***多个硬盘***'
- en: If you have multiple hard drives in your host, you should almost certainly use
    them to create some sort of storage redundancy. If you’re using ZFS, use a mirror
    or some sort of RAID-Z (see [Chapter 12](ch12.xhtml#ch12)). If you use UFS, FreeBSD
    supports software RAID. When you have a whole bunch of hard drives, though, life
    gets a little more complicated.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果主机中有多个硬盘，你几乎肯定应该使用它们来创建某种存储冗余。如果你使用 ZFS，可以使用镜像或某种 RAID-Z（见 [第 12 章](ch12.xhtml#ch12)）。如果使用
    UFS，FreeBSD 支持软件 RAID。不过，当你有一堆硬盘时，事情就变得有点复杂。
- en: The rule of thumb is still to separate your operating system from your application
    data. If you have 30 hard drives, mirror 2 of them for your operating system install
    and use the others for your data. Like all rules of thumb, this is debatable.
    But no sysadmin will tell you that this is an actively bad idea.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 经验法则仍然是将操作系统与应用程序数据分开。如果你有 30 块硬盘，可以将其中两块镜像用于操作系统安装，其余硬盘用于存储数据。像所有经验法则一样，这个观点是有争议的。但没有哪个系统管理员会告诉你，这绝对是个糟糕的主意。
- en: With many hard drives, consider which data passes through which disk controller.
    If a disk controller dies, what happens to your system? If both of your operating
    system disks are attached to a single controller and the controller dies, your
    host goes down. Putting each drive on a different controller offers redundancy.
    Ideally, attach your mirrored operating system disks to different drive controllers.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有多个硬盘，考虑一下哪些数据通过哪个硬盘控制器传输。如果硬盘控制器故障，系统会发生什么？如果你的两个操作系统硬盘都连接在同一个控制器上，而该控制器出现故障，你的主机将会宕机。将每个硬盘连接到不同的控制器上可以提供冗余。理想情况下，应该将镜像操作系统硬盘连接到不同的硬盘控制器上。
- en: Also, remember that SATA disk controllers split all their data throughput among
    all the hard drives connected to them. If you have two disks on a SATA controller,
    each disk works, on average, about half as fast as it would work alone on the
    same channel. Port multipliers add disks but slash per-disk performance.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请记住，SATA 硬盘控制器会将其所有的数据传输量分配给连接到它们的所有硬盘。如果你有两个硬盘连接在一个 SATA 控制器上，每个硬盘的工作速度大约是单独连接在同一通道上时的一半。端口倍增器虽然增加了硬盘数量，但会大幅降低每个硬盘的性能。
- en: '***Swap Space***'
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***交换空间***'
- en: When FreeBSD (and any other modern operating system) uses up all the physical
    RAM, it can move information that’s been sitting idle from memory into swap. Now
    that even laptops ship with 32GB of RAM, it’s hard to imagine a host running out
    of memory, but never underestimate a program’s ability to devour RAM. Virtual
    systems might be allocated very tiny amounts of RAM.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当 FreeBSD（以及其他任何现代操作系统）用尽所有物理 RAM 时，它可以将长时间闲置的内存信息转移到交换空间中。如今，即使是笔记本电脑也配备了 32GB
    的 RAM，已经很难想象主机会出现内存不足的情况，但永远不要低估一个程序吞噬 RAM 的能力。虚拟系统可能会分配非常少的 RAM。
- en: So, how much swap space do you need? This is a matter of long debate between
    sysadmins. The short answer is, “It depends.” What does it depend on? *Everything*.
    Long-running wisdom claimed that a host should have twice as much swap as it has
    physical memory, but today that’s not only obsolete but dangerous. When a process
    starts catastrophically allocating memory—say, in a bug caused by an infinite
    loop—the kernel kills the process once the system runs out of virtual memory.
    A system with 32GB of RAM and 64GB of swap has 96GB of virtual memory. The i386
    platform limits memory usage to 512MB per process, which means that the kernel
    stops such runaway processes pretty quickly. 64-bit systems, like amd64, have
    vast virtual memory spaces. A system thrashing gigabytes of memory between disk
    and RAM will be excruciatingly slow. A modern host should have only enough swap
    space to perform its task.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，你需要多少交换空间呢？这是一个系统管理员之间长期争论的问题。简短的答案是：“这取决于。”它取决于什么？*一切*。长期以来的经验法则认为，主机的交换空间应该是物理内存的两倍，但今天这不仅过时，而且是危险的。当一个进程开始灾难性地分配内存时——比如由于无限循环导致的
    bug——一旦系统用尽虚拟内存，内核就会杀死该进程。一个拥有 32GB RAM 和 64GB 交换空间的系统，拥有 96GB 的虚拟内存。i386 平台将每个进程的内存使用限制为
    512MB，这意味着内核会很快终止这种失控的进程。像 amd64 这样的 64 位系统拥有广阔的虚拟内存空间。一个在磁盘和内存之间不停交换几 GB 内存的系统将非常缓慢。现代主机应该只有足够的交换空间来完成其任务。
- en: Multiple hard drives let you increase the efficiency of swap space by splitting
    it between disks on different drive controllers. Remember, though, that a crash
    dump must fit entirely within a single swap partition. FreeBSD compresses crash
    dumps so that they don’t take up as much room, but still, many small swap partitions
    can be counterproductive. If you have a large number of drives, don’t use the
    application drives for swap; restrain swap space to the operating system drives.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 多个硬盘可以通过将交换空间分配到不同磁盘控制器的磁盘之间，提高交换空间的效率。不过，请记住，崩溃转储必须完全适配到单个交换分区。FreeBSD 会压缩崩溃转储，以便它们占用更少的空间，但即便如此，多个小交换分区也可能适得其反。如果你有大量硬盘，最好不要将应用程序磁盘用于交换空间；将交换空间限制在操作系统磁盘上。
- en: 'The main use for swap on modern systems is to have a place to store a memory
    dump should the system panic and crash. FreeBSD uses kernel minidumps, so they
    dump only the kernel memory. A minidump is much smaller than a full dump: a host
    with 8GB RAM has an average minidump size of about 250MB. Provisioning a gigabyte
    of swap per 10GB of RAM should be sufficient for most situations.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现代系统上交换空间的主要用途是为内存转储提供一个存储位置，以防系统发生崩溃和 panic。FreeBSD 使用内核小型转储，因此它们只转储内核内存。小型转储比完全转储小得多：一个
    8GB 内存的主机的平均小型转储大小大约为 250MB。每 10GB 内存配置 1GB 交换空间对于大多数情况应该足够了。
- en: If you have a truly intractable problem, though, you might need to dump the
    entire contents of your RAM to swap. If I’m setting up an important production
    system, I always create an unused partition larger than the host’s greatest possible
    virtual memory space and tell the host to dump the kernel to that partition. If
    my laptop has such a problem, I’ll just plug in a flash drive and configure the
    system to dump on it instead.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你遇到了一个真正难以解决的问题，你可能需要将整个内存内容转储到交换空间中。如果我在设置一个重要的生产系统，我总是会创建一个比主机最大可能虚拟内存空间更大的未使用分区，并告诉主机将内核转储到该分区。如果我的笔记本电脑遇到类似问题，我只需插入一个闪存驱动器，并配置系统将转储到它上面。
- en: '**Getting FreeBSD**'
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**获取 FreeBSD**'
- en: Now that you’ve made all your decisions, you need a copy of FreeBSD. If this
    is your first time installing FreeBSD, go to *[https://www.FreeBSD.org/](https://www.FreeBSD.org/)*
    and look for the Get FreeBSD section at the top. Right by that, you’ll see a list
    of supported releases, including (probably) two releases recommended for production.
    Sometimes there’s one. Sometimes there’s three, but usually two.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经做出所有决定，你需要一个 FreeBSD 的副本。如果这是你第一次安装 FreeBSD，请访问 *[https://www.FreeBSD.org/](https://www.FreeBSD.org/)*，并查找页面顶部的“获取
    FreeBSD”部分。在那里，你将看到支持的发布版本列表，其中通常包括两个推荐用于生产的版本。有时是一个，有时是三个，但通常是两个。
- en: '***FreeBSD Versions***'
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***FreeBSD 版本***'
- en: Two production releases? What madness is this?
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 两个生产版本？这是什么疯狂的事情？
- en: FreeBSD development occurs in multiple tracks, as I will discuss in [Chapter
    18](ch18.xhtml#ch18). A few tracks coexist, in various states of support. Each
    track receives bugfixes and incremental improvements. Newer tracks get new features.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD 开发在多个轨道上进行，正如我将在[第18章](ch18.xhtml#ch18)中讨论的那样。一些轨道并行存在，处于不同的支持状态。每个轨道都会接收
    bug 修复和增量改进。较新的轨道会获得新特性。
- en: As I write this, FreeBSD.org lists two production releases, numbered 11.0 and
    10.4\. Version 11.0 is the most recently released version, but it’s also a .0
    release. It’s the first release on this track. It will have the newest features,
    but it has the greatest likelihood of including unknown bugs. Version 10.4 is
    slightly older and lacks some features in version 11.0, but it’s the fourth release
    along that track. It’s not guaranteed to be bug free, but many people have run
    it in production for months or years. Any screamingly obvious problems have been
    fixed.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当我写这篇文章时，FreeBSD.org 列出了两个生产版本，分别是 11.0 和 10.4。版本 11.0 是最新发布的版本，但它也是一个 .0 版本。它是这个分支的第一次发布，包含最新功能，但也最有可能包含未知的错误。版本
    10.4 稍微旧一些，缺少 11.0 中的一些功能，但它是该分支的第四个版本。虽然不能保证没有错误，但很多人在生产环境中已经运行了几个月或几年，所有明显的问题都已修复。
- en: Every FreeBSD release eventually reaches *End of Life (EoL)* and loses support.
    The security team stops producing patches and new packages are no longer available.
    The older release will reach EoL before the newer version. If you install FreeBSD
    10.4 today, you’ll need to upgrade to 11 at some point—but by then, you’ll be
    upgrading to something that’s not a .0 release.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 FreeBSD 版本最终都会达到*生命周期终止（EoL）*，并停止支持。安全团队会停止发布补丁，新的软件包也将不再提供。较旧的版本会先于较新的版本达到生命周期终止。如果你今天安装
    FreeBSD 10.4，你将来需要升级到 11，但届时你将升级到的版本就不是 .0 版本了。
- en: FreeBSD averages two production releases at a time. This isn’t an inviolate
    rule, only observed behavior. Sometime around when the 12.0 release escapes, the
    10 branch will reach EoL.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD 平均同时发布两个生产版本。这不是一个不可违背的规则，而是观察到的现象。大约在 12.0 版本发布时，10.x 分支将达到生命周期终止（EoL）。
- en: I personally will run FreeBSD .0 releases, but having been burned with other
    operating systems before, I sympathize with the folks who categorically reject
    .0 versions. If you’ve never used FreeBSD before, I recommend installing the most
    recent production release. It has the latest device drivers and newest features.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人会运行 FreeBSD .0 版本，但由于之前曾在其他操作系统上遭遇过问题，我对那些坚决拒绝 .0 版本的用户表示理解。如果你以前没有使用过 FreeBSD，我建议安装最新的生产版。它包含了最新的设备驱动程序和功能。
- en: Follow the download link and grab your chosen version.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 跟随下载链接，选择并下载你需要的版本。
- en: '***Choosing Installation Images***'
  id: totrans-105
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***选择安装镜像***'
- en: You can choose between several different formats of FreeBSD installation media.
    All installation media is available both compressed with xz(1) and uncompressed.
    If you can conveniently extract *.xz* files, download the compressed versions.
    This saves the donated bandwidth and reduces download time. Any modern operating
    system can either handle *.xz* files natively or has add-on software for the task.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择几种不同格式的 FreeBSD 安装介质。所有安装介质都有压缩版（使用 xz(1)）和未压缩版。如果你能够方便地解压 *.xz* 文件，建议下载压缩版本。这既节省了带宽，也减少了下载时间。任何现代操作系统都可以原生支持
    *.xz* 文件，或者可以通过附加软件来处理此任务。
- en: FreeBSD offers two styles of installation media. The first contains only enough
    to boot the FreeBSD installer and bring up the network. The installer then downloads
    the operating system files from a FreeBSD mirror site. If you’re going to do multiple
    installs of the same FreeBSD version, though, you’re better off downloading an
    installer that includes the operating system files.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD 提供两种类型的安装介质。第一种只包含足够启动 FreeBSD 安装程序并连接网络的内容。安装程序随后会从 FreeBSD 镜像站点下载操作系统文件。然而，如果你打算对同一版本的
    FreeBSD 进行多次安装，那么下载包含操作系统文件的安装程序会更合适。
- en: The installer comes in both optical disk (*.iso*) and flash (*.img*) formats.
    Choose the format that fits your system. If you’re installing a virtual machine,
    an ISO is probably simplest.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序提供光盘格式（*.iso*）和闪存格式（*.img*）。选择适合你系统的格式。如果你是在安装虚拟机，ISO 格式可能是最简单的选择。
- en: '**FREEBSD MIRRORS**'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**FREEBSD 镜像**'
- en: Old documents make much of the importance of choosing a good mirror site for
    installation. Ignore all that. The FreeBSD software distribution site, *ftp.freebsd.org/*,
    is a worldwide collection of mirror servers. When you grab the installation media,
    packages, or any other FreeBSD materials, you’re automatically directed to the
    closest mirror site. If you want to use a specific mirror rather than the GeoDNS-selected
    one, choose it by name from the list in Appendix A of the FreeBSD Handbook (discussed
    in [Chapter 1](ch01.xhtml#ch01)).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 旧文档常常强调选择一个好的镜像站点对安装的重要性。忽略这些内容。FreeBSD 软件分发站点 *ftp.freebsd.org/* 是一个全球性的镜像服务器集合。当您获取安装介质、软件包或任何其他
    FreeBSD 材料时，系统会自动将您指向最近的镜像站点。如果您想使用特定的镜像站点而不是 GeoDNS 自动选择的站点，可以从 FreeBSD 手册的附录
    A 中按名称选择（该内容在[第 1 章](ch01.xhtml#ch01)中有讨论）。
- en: Each installer image starts with the word *FreeBSD*, the release, and the platform.
    If you’re downloading FreeBSD 12.0 for amd64 hardware, the installer images will
    all have names that start with *FreeBSD-12.0-RELEASE-amd64*. Right after that,
    the file identifies the installation type.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 每个安装镜像的文件名都以 *FreeBSD*、版本号和平台名称开始。如果您正在为 amd64 硬件下载 FreeBSD 12.0，安装镜像的文件名将以
    *FreeBSD-12.0-RELEASE-amd64* 开头。紧接着，文件名会标明安装类型。
- en: 'File endings are a tool to help you easily find what you need:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 文件扩展名是一个帮助您轻松找到所需文件的工具：
- en: Files ending in *bootonly.iso* are ISO images that boot the FreeBSD installer.
    Using them means downloading FreeBSD over the network.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以 *bootonly.iso* 结尾的文件是启动 FreeBSD 安装程序的 ISO 镜像。使用这些文件意味着通过网络下载 FreeBSD。
- en: Files ending in *disc1.iso* are ISO images that contain the full FreeBSD installer.
    This image contains the operating system files.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以 *disc1.iso* 结尾的文件是包含完整 FreeBSD 安装程序的 ISO 镜像。此镜像包含操作系统文件。
- en: Files that end in *mini-memstick.img* are for flash drives. They boot the FreeBSD
    installer but download the operating system files over the network.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以 *mini-memstick.img* 结尾的文件是用于闪存驱动器的。它们启动 FreeBSD 安装程序，但通过网络下载操作系统文件。
- en: Files that end in *memstick.img* are flash drive images that contain a complete
    FreeBSD install.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以 *memstick.img* 结尾的文件是包含完整 FreeBSD 安装的闪存驱动器镜像。
- en: FreeBSD also provides much larger DVD images. These contain all of FreeBSD and
    a whole bunch of packages. They’re meant for people who want to use FreeBSD without
    internet access. Please remember that all of the FreeBSD Project’s bandwidth is
    donated; don’t download a massive DVD image unless you actually need it.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD 还提供更大的 DVD 镜像。这些镜像包含了整个 FreeBSD 系统和大量的软件包。它们适用于那些没有互联网连接的人。请记住，所有 FreeBSD
    项目的带宽都是由社区捐赠的；除非您确实需要，否则请不要下载巨大的 DVD 镜像。
- en: Once you have an installation image, you need to get it on actual boot media.
    Use your operating system’s built-in tools to burn the image to a physical disk.
    While Windows now includes CD burning as a built-in feature, it doesn’t include
    flash disk imaging. The FreeBSD Project recommends Image Writer for Windows (*[https://sourceforge.net/projects/win32diskimager/](https://sourceforge.net/projects/win32diskimager/)*),
    a perfectly fine option. Bring up the program, select your flash drive and the
    image, and click **Start**.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了安装镜像，您需要将其放入实际的启动介质中。使用操作系统内置的工具将镜像刻录到物理磁盘上。虽然 Windows 现在包括 CD 刻录作为内置功能，但不支持闪存磁盘镜像。FreeBSD
    项目推荐使用适用于 Windows 的 Image Writer (*[https://sourceforge.net/projects/win32diskimager/](https://sourceforge.net/projects/win32diskimager/)*)，这是一个非常不错的选择。打开程序，选择您的闪存驱动器和镜像文件，然后点击
    **开始**。
- en: '**Network Installs**'
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**网络安装**'
- en: 'If your installation media only boots the installer and you need to grab the
    FreeBSD distribution files over the network, you’ll need to configure the network
    while the installer is running. If your network runs DHCP, the installer should
    just pick up your network configuration. If not, your FreeBSD host will need a
    valid network configuration. Before starting the installer, gather:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的安装介质仅能启动安装程序，并且需要通过网络获取 FreeBSD 分发文件，则在安装程序运行时需要配置网络。如果您的网络使用 DHCP，安装程序应该会自动获取网络配置。如果不是，您的
    FreeBSD 主机需要一个有效的网络配置。在启动安装程序之前，请收集以下信息：
- en: A valid IP address and netmask
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有效的 IP 地址和子网掩码
- en: The default gateway for your network
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您网络的默认网关
- en: The nameserver IP addresses
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称服务器的 IP 地址
- en: If you must use a proxy server to reach the internet, you’ll need its configuration
    as well.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您必须使用代理服务器才能访问互联网，您还需要其配置。
- en: Armed with this information, you can install FreeBSD.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有这些信息后，您就可以开始安装 FreeBSD。
