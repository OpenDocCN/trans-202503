["```\n<?php\n❶ define('DB_NAME', 'demo1');\n\n❷ $connection = new \\PDO(\n    'mysql:host=localhost:3306',\n    'root',\n    'passpass'\n);\n\n❸ $sql = 'CREATE DATABASE ' . DB_NAME ;\n$stmt0 = $connection->prepare($sql);\n$stmt0->execute();\n\n$connection = new \\PDO(\n  ❹ 'mysql:dbname=' . DB_NAME . ';host=localhost:3306',\n    'root',\n    'passpass'\n);\n\n$sql = 'CREATE TABLE IF NOT EXISTS product ('\n  ❺ . 'id integer PRIMARY KEY AUTO_INCREMENT,'\n    . 'description text,'\n    . 'price float'\n    . ')';\n$stmt1 = $connection->prepare($sql);\n$stmt1->execute();\n\n$sql = \"INSERT INTO product (description, price) VALUES ('hammer', 9.99)\";\n$stmt2 = $connection->prepare($sql);\n$stmt2->execute();\n\n$sql = \"INSERT INTO product (description, price) VALUES ('ladder', 59.99)\";\n$stmt3 = $connection->prepare($sql);\n$stmt3->execute();\n```", "```\n<?php\ndefine('FILENAME', 'demo1.db');\n❶ define('FOLDER_PATH', __DIR__ . '/../var/');\n\nif (!file_exists(FOLDER_PATH)) {\n    mkdir(FOLDER_PATH);\n}\n\n$connection = new \\PDO(\n❷'sqlite:' . FOLDER_PATH . FILENAME\n);\n\n$sql = 'CREATE TABLE IF NOT EXISTS product ('\n❸. 'id integer PRIMARY KEY AUTOINCREMENT,'\n . 'description text,'\n . 'price float'\n . ')';\n$stmt1 = $connection->prepare($sql);\n$stmt1->execute();\n\n$sql = \"INSERT INTO product (description, price) VALUES ('hammer', 9.99)\";\n$stmt2 = $connection->prepare($sql);-\n$stmt2->execute();\n\n$sql = \"INSERT INTO product (description, price) VALUES ('ladder', 59.99)\";\n$stmt3 = $connection->prepare($sql);\n$stmt3->execute();\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nuse Mattsmithdev\\Product;\n\nclass Application\n{\n  ❶ private ?\\PDO $connection;\n\n    public function __construct()\n    {\n        $db = new Database();\n      ❷ $this->connection = $db->getConnection();\n    }\n\n    public function run()\n    {\n        if (NULL != $this->connection){\n          ❸ $products = $this->getProducts();\n print '<pre>';\n            var_dump($products);\n            print '</pre>';\n        } else {\n            print '<p>Application::run() - sorry '\n                . '- there was a problem with the database connection';\n        }\n    }\n\n    public function getProducts(): array\n    {\n        $sql = 'SELECT * FROM product';\n        $stmt = $this->connection->prepare($sql);\n        $stmt->execute();\n      ❹ $stmt->setFetchMode(\\PDO::FETCH_CLASS, Product::class);\n        $products = $stmt->fetchAll();\n\n        return $products;\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass Product\n{\n    private int $id;\n    private string $description;\n    private float $price;\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass Database\n{\n  ❶ const MYSQL_HOST = 'localhost';\n    const MYSQL_PORT = '3306';\n    const MYSQL_USER = 'root';\n    const MYSQL_PASSWORD = 'passpass';\n    const MYSQL_DATABASE = 'demo1';\n\n    const DATA_SOURCE_NAME =  'mysql:dbname=' . self::MYSQL_DATABASE\n      ❷ . ';host=' . self::MYSQL_HOST . ':' . self::MYSQL_PORT;\n\n  ❸ private ?\\PDO $connection;\n\n    public function getConnection(): ?\\PDO\n    {\n        return $this->connection;\n }\n\n    public function __construct()\n    {\n      ❹ try {\n            $connection = new \\PDO(\n                self::DATA_SOURCE_NAME,\n                self::MYSQL_USER,\n                self::MYSQL_PASSWORD\n            );\n            $this->connection = $connection;\n      ❺} catch (\\Exception $e) {\n            print \"Database::__construct() - Exception '\n                . '- error trying to create database connection\";\n        }\n    }\n}\n```", "```\n--snip--\n    public function __construct()\n    {\n        $db = new DatabaseSQLite();\n        $this->connection = $db->getConnection();\n    }\n--snip--\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass DatabaseSQLite\n{\n    const DB_DIRECTORY = __DIR__ . '/../var';\n    const DB_FILE_PATH = self::DB_DIRECTORY . '/demo1.db';\n\n    const DATA_SOURCE_NAME =  'sqlite:'  . self::DB_FILE_PATH;\n\n    private ?\\PDO $connection = NULL;\n\n    public function getConnection(): ?\\PDO\n    {\n        return $this->connection;\n    }\n\n    public function __construct()\n    {\n        try {\n            $this->connection = new \\PDO(self::DATA_SOURCE_NAME);\n        } catch (\\Exception $e){\n            print 'DatabaseSQLite::__construct() - Exception - '\n                . 'error trying to create database connection'\n                . PHP_EOL;\n        }\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass Product\n{\n private int $id;\n private string $description;\n private float $price;\n\n    public function getId(): int\n    {\n        return $this->id;\n    }\n\n    public function setId(int $id): void\n    {\n        $this->id = $id;\n    }\n\n    public function getDescription(): string\n    {\n        return $this->description;\n    }\n\n    public function setDescription(string $description): void\n    {\n        $this->description = $description;\n    }\n\n    public function getPrice(): float\n    {\n        return $this->price;\n    }\n\n    public function setPrice(float $price): void\n    {\n        $this->price = $price;\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass ProductRepository\n{\n    private ?\\PDO $connection = NULL;\n\n public function __construct()\n {\n $db = new Database();\n $this->connection = $db->getConnection();\n }\n\n    public function findAll(): array\n    {\n      ❶ if (NULL == $this->connection) return [];\n\n $sql = 'SELECT * FROM product';\n $stmt = $this->connection->prepare($sql);\n $stmt->execute();\n $stmt->setFetchMode(\\PDO::FETCH_CLASS, Product::class);\n $products = $stmt->fetchAll();\n\n return $products;\n }\n\n    public function find(int $id): ?Product\n    {\n        if (NULL == $this->connection) return NULL;\n\n $sql = 'SELECT * FROM product WHERE id = :id';\n        $stmt = $this->connection->prepare($sql);\n\n      ❷ $stmt->bindParam(':id', $id);\n        $stmt->execute();\n\n        $stmt->setFetchMode(\\PDO::FETCH_CLASS, Product::class);\n      ❸ $product = $stmt->fetch();\n\n      ❹ if ($product == false) {\n            return NULL;\n        }\n\n        return $product;\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass Application\n{\n    private DefaultController $defaultController;\n    private ProductController $productController;\n\n    public function __construct()\n    {\n        $this->defaultController = new DefaultController();\n        $this->productController = new ProductController();\n    }\n\n    public function run(): void\n    {\n        $action = filter_input(INPUT_GET, 'action');\n\n        switch ($action)\n        {\n            case 'products': ❶\n                $this->productController->list();\n                break;\n\n            case 'show': ❷\n                $id = filter_input(INPUT_GET, 'id', FILTER_SANITIZE_NUMBER_INT);\n                if (empty($id)) {❸\n                    $this->defaultController->\nerror('error - To show a product, an integer ID must be provided');\n                } else {❹\n                    $this->productController->show($id);\n                }\n                break;\n\n            default: ❺\n                $this->defaultController->homepage();\n        }\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nuse Twig\\Loader\\FilesystemLoader;\nuse Twig\\Environment;\n\nabstract class Controller\n{\n    const PATH_TO_TEMPLATES = __DIR__ . '/../templates';\n\n    protected Environment $twig;\n\n    public function __construct()\n    {\n        $loader = new FilesystemLoader(self::PATH_TO_TEMPLATES);\n        $this->twig = new Environment($loader);\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass DefaultController extends Controller\n{\n  ❶ public function homepage(): void\n    {\n        $template = 'home.xhtml.twig';\n        $args = [];\n        print $this->twig->render($template, $args);\n    }\n\n  ❷ public function error(string $message): void\n    {\n        $template = 'error.xhtml.twig';\n        $args = [\n            'message' => $message\n        ];\n        print $this->twig->render($template, $args);\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass ProductController extends Controller\n{\n    private ProductRepository $productRepository;\n\n    public function __construct()\n    {\n        parent::__construct();\n        $this->productRepository = new ProductRepository();\n    }\n\n ❶ public function list(): void\n    {\n        $products = $this->productRepository->findAll();\n\n        $template = 'product/list.xhtml.twig';\n        $args = [\n            'products' => $products\n        ];\n        print $this->twig->render($template, $args);\n    }\n\n  ❷ public function show(int $id): void\n    {\n        $product = $this->productRepository->find($id);\n\n        if (empty($product)) {\n            $defaultController = new DefaultController();\n            $defaultController->error(\n                'error - No product found with ID = ' . $id);\n        } else {\n            $template = 'product/show.xhtml.twig';\n            $args = [\n                'product' => $product\n            ];\n            print $this->twig->render($template, $args);\n        }\n    }\n}\n```", "```\n<html lang=\"en\">\n<head>\n    <title>MGW - {% block title %}{% endblock %}</title> ❶\n    <meta name=\"viewport\" content=\"width=device-width\">\n    <link rel=\"stylesheet\"\n          href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\">\n</head>\n\n<body class=\"container\">\n<ul class=\"nav nav-pills\"> ❷\n    <li class=\"nav-item\">\n        <a class=\"nav-link {% block homeLink %}{% endblock %}\" href=\"/\">Home page</a>\n    </li>\n    <li class=\"nav-item\">\n        <a class=\"nav-link {% block productLink %}{% endblock %}\"\n           href=\"/?action=products\">Product List page</a>\n    </li>\n</ul>\n\n{% block body %} ❸\n{% endblock %}\n</body></html>\n```", "```\n{% extends 'base.xhtml.twig' %}\n\n{% block title %}Home page{% endblock %}\n\n{% block homeLink %}active{% endblock %}\n\n{% block body %}\n    <h1>Home page</h1>\n    <p>\n        Welcome to the home page\n    </p>\n{% endblock %}\n```", "```\n{% extends 'base.xhtml.twig' %}\n\n{% block title %}error page{% endblock %}\n\n{% block body %}\n    <h1>Error</h1>\n    <p class=\"alert alert-danger\">\n        {{message}}\n    </p>\n{% endblock %}\n```", "```\n{% extends 'base.xhtml.twig' %}\n\n{% block title %}Product List page{% endblock %}\n\n{% block productLink %}active{% endblock %}\n\n{% block body %}\n    <h1>Product List page</h1>\n\n    <ul>\n      ❶ {% for product in products %}\n        <li>\n            id: {{product.id}}\n            <br>\n            description: {{  product.description}}\n            <br>\n          ❷ price: $ {{product.price | number_format(2)}}\n            <br>\n          ❸ <a href=\"/?action=show&id={{product.id}}\">(show)</a>\n        </li>\n\n        {% endfor %}\n    </ul>\n{% endblock %}\n```", "```\n{% extends 'base.xhtml.twig' %}\n\n{% block title %}Product Details page{% endblock %}\n\n{% block body %}\n    <h1>Product Details page</h1>\n\n    id: {{product.id}}\n    <br>\n    description: {{  product.description}}\n    <br>\n    price: $ {{product.price | number_format(2)}}\n{% endblock %}\n```"]