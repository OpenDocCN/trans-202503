["```\n#include <unistd.h>\n\nvoid _`exit`(int *status*);\n```", "```\n#include <stdlib.h>\n\nvoid `exit`(int *status*);\n```", "```\n#include <stdlib.h>\n\nint `atexit`(void (**func*)(void));\n```", "```\nvoid\nfunc(void)\n{\n    /* Perform some actions */\n}\n```", "```\n#define _BSD_SOURCE           /* Or: #define _SVID_SOURCE */\n#include <stdlib.h>\n\nint `on_exit`(void (**func*)(int, void *), void **arg*);\n```", "```\nvoid\nfunc(int status, void *arg)\n{\n    /* Perform cleanup actions */\n}\n```", "```\n$ `./exit_handlers`\non_exit function called: status=2, arg=20\natexit function 2 called\natexit function 1 called\non_exit function called: status=2, arg=10\n```", "```\n`procexec/exit_handlers.c`\n#define _BSD_SOURCE     /* Get on_exit() declaration from <stdlib.h> */\n#include <stdlib.h>\n#include \"tlpi_hdr.h\"\n\nstatic void\natexitFunc1(void)\n{\n    printf(\"atexit function 1 called\\n\");\n}\n\nstatic void\natexitFunc2(void)\n{\n    printf(\"atexit function 2 called\\n\");\n}\n\nstatic void\nonexitFunc(int exitStatus, void *arg)\n{\n    printf(\"on_exit function called: status=%d, arg=%ld\\n\",\n                exitStatus, (long) arg);\n}\n\nint\nmain(int argc, char *argv[])\n{\n    if (on_exit(onexitFunc, (void *) 10) != 0)\n        fatal(\"on_exit 1\");\n    if (atexit(atexitFunc1) != 0)\n        fatal(\"atexit 1\");\n    if (atexit(atexitFunc2) != 0)\n        fatal(\"atexit 2\");\n    if (on_exit(onexitFunc, (void *) 20) != 0)\n        fatal(\"on_exit 2\");\n\n    exit(2);\n}\n      `procexec/exit_handlers.c`\n```", "```\n$ `./fork_stdio_buf`\nHello world\nCiao\n```", "```\n$ `./fork_stdio_buf > a`\n$ `cat a`\nCiao\nHello world\nHello world\n```", "```\n`procexec/fork_stdio_buf.c`\n#include \"tlpi_hdr.h\"\n\nint\nmain(int argc, char *argv[])\n{\n    printf(\"Hello world\\n\");\n    write(STDOUT_FILENO, \"Ciao\\n\", 5);\n\n    if (fork() == -1)\n        errExit(\"fork\");\n\n    /* Both child and parent continue execution here */\n\n    exit(EXIT_SUCCESS);\n}\n     `procexec/fork_stdio_buf.c`\n```"]