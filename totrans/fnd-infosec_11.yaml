- en: '11'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OPERATING SYSTEM SECURITY
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you seek to protect your data, processes, and applications against concerted
    attacks, you’re likely to find weaknesses on the operating system that hosts all
    of these. The *operating system* is the software that supports the basic functionality
    of the device. The primary operating systems in current use are several varieties
    of Linux and the server and desktop operating systems offered by Microsoft and
    Apple. If you don’t take care to protect your operating systems, you have no basis
    for getting to a strong security footing.
  prefs: []
  type: TYPE_NORMAL
- en: You can mitigate threats to the operating system in several ways. One of the
    easiest methods is *operating system hardening*, or the process of decreasing
    the number of openings through which an attacker might reach you. You can use
    this technique when you’re configuring hosts (individual computers or network
    devices) that might face hostile action.
  prefs: []
  type: TYPE_NORMAL
- en: You can also add applications to your operating system designed to combat some
    of the tools attackers might use against you. The most common and obvious of these,
    particularly on internet-facing devices, are the anti-malware tools that protect
    you from malicious code. The software firewalls and host-based intrusion detection
    systems discussed in earlier chapters can also block unwanted traffic or alert
    you when it passes through your systems.
  prefs: []
  type: TYPE_NORMAL
- en: Other security tools can detect potentially vulnerable areas on your hosts by
    finding services that you didn’t know were running, locating network services
    known to contain exploitable flaws, and generally inspecting your systems.
  prefs: []
  type: TYPE_NORMAL
- en: By applying the concept of defense in depth and combining these efforts, you
    can mitigate many of the security issues on the hosts for which you’re responsible.
  prefs: []
  type: TYPE_NORMAL
- en: Operating System Hardening
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A relatively new concept in information security, operating system hardening
    is a technique that aims to reduce the number of available avenues through which
    your operating system might be attacked. We call the sum of these areas the *attack
    surface*.[¹](notes.xhtml#ch11fn1) The larger your attack surface is, the greater
    chance an attacker has of successfully penetrating your defenses.
  prefs: []
  type: TYPE_NORMAL
- en: You can decrease your attack surface in six main ways, as shown in [Figure 11-1](#ch11fig1).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/11fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-1: The six primary means of operating system hardening*'
  prefs: []
  type: TYPE_NORMAL
- en: I’ll walk you through each of these strategies.
  prefs: []
  type: TYPE_NORMAL
- en: '*Remove All Unnecessary Software*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Each piece of software installed on your operating system adds to your attack
    surface. If you’re seeking to harden your operating system, you should take a
    hard look at the software you load onto it and ensure that you’re installing the
    bare minimum.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re preparing a web server, for instance, you’ll need to install the web
    server software, any libraries or code interpreters needed to support the web
    server, and any utilities that involve the administration and maintenance of the
    operating system, such as backup software or remote access tools. You have no
    reason to install anything else.
  prefs: []
  type: TYPE_NORMAL
- en: '**MEASURE TWICE, CUT ONCE**'
  prefs: []
  type: TYPE_NORMAL
- en: Always exercise great care when making changes to operating system settings,
    tools, and software. Some of the changes you make could have unintended effects
    on the way your operating system functions, and you don’t want to learn this through
    experience on a machine that services a critical function. Research changes carefully
    before you make them.
  prefs: []
  type: TYPE_NORMAL
- en: Problems begin to arise once you install other software on the machine, even
    with the best of intentions. For example, let’s say that one of your developers
    logs into the server remotely. They need to make a change to a web page, so they
    install the web development software they need. Then they need to evaluate the
    changes, so they install their favorite web browser and the associated media plug-ins,
    such as Adobe Flash and Acrobat Reader, as well as a video player to test some
    video content. Soon, not only does the system contain software that shouldn’t
    be there, but the software quickly becomes outdated since it isn’t patched or
    updated as a result of not being officially supported and maintained by the IT
    department. At this point, you have a relatively serious security issue on an
    internet-facing machine.
  prefs: []
  type: TYPE_NORMAL
- en: '*Remove All Unessential Services*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the same vein, you should also remove or disable unessential *services* (software
    that loads automatically when the system starts). Many operating systems ship
    with a wide variety of services to share information over the network, locate
    other devices, synchronize the time, allow you to access or transfer files, and
    perform other tasks. Various applications might also install some services to
    provide the tools and resources they need to function.
  prefs: []
  type: TYPE_NORMAL
- en: Attempting to turn off services can be a frustrating exercise, and it might
    take some experimentation. In many cases, the services’ names don’t indicate their
    actual function, and tracking down what each of them does may require a bit of
    research. One of the best ways to start is to determine the network ports on which
    the system is listening for network connections, as this can often give you a
    clue as to what might be on the back end of the open port. For instance, if the
    system is listening on port 80, you’re likely looking for a web server service.
    Many operating systems have built-in utilities that allow you to do this, such
    as netstat on Microsoft operating systems or Nmap, discussed in [Chapter 10](ch10.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to locating the devices on your networks, Nmap can allow you to
    determine network ports on which a given system is listening. (To install Nmap,
    download it from *[https://nmap.org/](https://nmap.org/)*.) Run the following
    Nmap command in your system’s command line:'
  prefs: []
  type: TYPE_NORMAL
- en: nmap <IP address>
  prefs: []
  type: TYPE_NORMAL
- en: Replace <IP address> with your device’s IP address. You’ll see results like
    those shown in [Figure 11-2](#ch11fig2).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/11fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-2: Locating services using Nmap*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 11-2](#ch11fig2) reveals several common services running on the system,
    listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Port 21** File Transfer Protocol (FTP), which allows files to be transferred'
  prefs: []
  type: TYPE_NORMAL
- en: '**Port 23** Telnet, which allows remote access to the device'
  prefs: []
  type: TYPE_NORMAL
- en: '**Port 80** Hypertext Transfer Protocol (HTTP), which serves web content'
  prefs: []
  type: TYPE_NORMAL
- en: '**Port 443** Hypertext Transfer Protocol Secure (HTTPS), which serves web pages
    secured with Secure Sockets Layer (SSL) or Transport Layer Security (TLS)'
  prefs: []
  type: TYPE_NORMAL
- en: Several other ports are open as well, running services that indicate that the
    device in the example is a printer. You can use this information as a starting
    place for closing undesirable services. For example, if you didn’t intend to allow
    remote access to the system or serve web content, you’d want to take note of the
    fact that ports 21, 23, 80, and 443 are open. From there, you could attempt to
    reconfigure it in order to not run the unneeded services.
  prefs: []
  type: TYPE_NORMAL
- en: '*Alter Default Accounts*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Many operating systems come with standard accounts. These usually include the
    equivalent of a guest account and an administrator account. There might also be
    others, such as accounts intended for support personnel or to allow specific services
    or utilities to operate.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, the default accounts may come equipped with excessively liberal
    permissions regulating the actions they can carry out, which can cause a great
    deal of trouble when an informed attacker gains access to them. The default accounts
    might have a standard password or no password at all. If you allow these accounts
    to remain on the system with their default settings, attackers might be able to
    stroll right in and make themselves at home.
  prefs: []
  type: TYPE_NORMAL
- en: To mitigate these security risks, you should first decide whether you need these
    default accounts at all and disable or remove any you won’t be using. You can
    usually turn off or remove guest accounts and support accounts without causing
    problems. In the case of administrative accounts, which often have names such
    as *administrator*, *admin*, or *root*, you may not be able to safely remove them
    from the system without causing it to malfunction, or the operating system may
    prevent you from doing so. However, you might be able to rename these accounts
    to confound attackers who attempt to make use of them. Lastly, you shouldn’t leave
    a default password on any account, no matter its status, since those passwords
    are often documented and well known.
  prefs: []
  type: TYPE_NORMAL
- en: '*Apply the Principle of Least Privilege*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As discussed in [Chapter 3](ch03.xhtml), the principle of least privilege dictates
    that you should allow a party only the absolute minimum permission needed for
    it to carry out its function. Operating systems may put this concept into practice
    to varying extents.
  prefs: []
  type: TYPE_NORMAL
- en: Most modern operating systems separate tasks into those that require administrative
    privileges and those that don’t. In general, normal operating system users can
    read and write files, and perhaps execute scripts or programs, but they can do
    so only within a certain restricted portion of the file system. They generally
    can’t modify the way hardware functions, make changes to the files on which the
    operating system itself depends, or install software that can change or affect
    the entire operating system. You typically need administrative access to perform
    those activities.
  prefs: []
  type: TYPE_NORMAL
- en: The administrators of UNIX and Linux-like operating systems tend to strictly
    enforce these roles. Although the administrators could allow all users to act
    with the privileges of an administrator, they rarely do so. On Microsoft operating
    systems, the exact opposite is typically true. Administrators of a Windows operating
    system are typically more apt to give users administrative rights. While Microsoft
    has gotten better at making its operating systems usable by, and useful for, nonadministrative
    users, there is still a large difference in mind-set between the two camps of
    administrators.
  prefs: []
  type: TYPE_NORMAL
- en: When you allow the average system user to regularly function with administrative
    privileges, you leave yourself open to a wide array of security issues. If the
    user executes a malware-infected file or application, they do so as the administrator,
    which means that the program has considerably more freedom to alter the operating
    system and other software installed on the host. If an attacker compromises a
    user’s account and that account has been given administrative rights, the attacker
    now has keys to the entire system. Nearly any type of attack, launched from nearly
    any source, will have more impact when allowed access to administrative rights
    on a host.
  prefs: []
  type: TYPE_NORMAL
- en: If, instead, you limit the privileges on your systems to the minimum needed
    in order for users to perform their required tasks, you’ll go a long way toward
    mitigating many security issues. In many cases, attacks will fail entirely when
    an attacker attempts to run them from a user account with a limited set of permissions.
    This is a cheap and easy security measure you can put in place, and it’s simple
    to implement.
  prefs: []
  type: TYPE_NORMAL
- en: '*Perform Updates*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To maintain strong security, you must perform regular and timely updates to
    your operating systems and applications. Researchers publish new attacks on a
    regular basis, and if you don’t apply the security patches released by the operating
    system and application vendors to mitigate those vulnerabilities, you’ll likely
    fall victim to attacks quickly.
  prefs: []
  type: TYPE_NORMAL
- en: To see an example of this in action, take a look at the news regarding malware
    propagating over the internet at any given time.[²](notes.xhtml#ch11fn2) Many
    pieces of malware continue to spread by exploiting known vulnerabilities that
    have long since been patched by the software vendors. Although it pays to be prudent
    when planning to install software updates and it’s a good idea to test them thoroughly
    before doing so, it’s generally unwise to delay updating for long.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most crucial times to ensure that your system is properly patched
    is directly after you’ve finished installing it. If you connect a newly installed
    and completely unpatched system to your network, it may become compromised in
    short order, even on internal networks, because it lacks the latest patches and
    secure configurations. The best practice in such a situation is to download the
    patches onto removable media and use this media to patch the system before you
    connect it to a network.
  prefs: []
  type: TYPE_NORMAL
- en: '*Turn On Logging and Auditing*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Last, but certainly not least, you should configure and turn on the appropriate
    logging and auditing features for your system, such as those that record failed
    login attempts. Although the steps for configuring such services may vary slightly
    depending on the operating system in question and its intended use, you generally
    need to be able to keep an accurate and complete record of the important processes
    and activities that take place on your systems. You should log significant events,
    such as administrative privileges being exercised, users logging in to and out
    of the system (or failing to log in), changes made to the operating system, and
    similar activities.
  prefs: []
  type: TYPE_NORMAL
- en: You may also want to include additional features to supplement the tools built
    into the operating system for these purposes. You could install monitoring tools
    that alert you to issues with the system itself or anomalies that might show in
    the various system or application logs. You could also install supplementary logging
    architecture to monitor the activities of multiple machines or simply to maintain
    duplicate remote copies of logs outside the system to help ensure that you have
    an unaltered record of all activities.
  prefs: []
  type: TYPE_NORMAL
- en: It’s also important to note that reviewing the logs is a vital part of the process.
    If you collect logs but never review them, you might as well not collect them
    at all.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting Against Malware
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A mind-boggling amount of malware exists on the world’s networks, systems, and
    storage devices. Using these tools, attackers can disable systems, steal data,
    conduct social engineering attacks, blackmail users, and gather intelligence,
    among other attacks.
  prefs: []
  type: TYPE_NORMAL
- en: One particularly complex and impactful example of recent malware is Triton.
    First discovered in November 2017, it apparently attempted to subvert the mechanisms
    in industrial systems that respond to abnormal operating conditions and then potentially
    cause direct harm to them.[³](notes.xhtml#ch11fn3) The device that Triton targets
    exists in a variety of systems, including nuclear facilities, and has the potential
    to cause catastrophic damage.
  prefs: []
  type: TYPE_NORMAL
- en: To protect your operating systems from malware, you can use some of the tools
    outlined here.
  prefs: []
  type: TYPE_NORMAL
- en: '*Anti-malware Tools*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Like the intrusion detection systems discussed in [Chapter 10](ch10.xhtml),
    most anti-malware applications detect threats by either matching a file to a signature
    or detecting unusual activities. Anti-malware tools tend to depend more heavily
    on signatures than on anomaly detection (often called *heuristics* in the anti-malware
    field), largely because signatures are easier to write and detect more reliably.
    The application vendor typically updates malware signatures at least once a day,
    or more often if the need arises, because malware changes quickly.
  prefs: []
  type: TYPE_NORMAL
- en: When a tool finds malware, it might respond by killing any associated processes
    and either deleting the detected files or quarantining them so that they’re not
    able to execute. Other times, it may simply leave the files alone. Anti-malware
    tools sometimes detect other security tools or files that aren’t malware, which
    you’ll want to leave alone and ignore in the future.
  prefs: []
  type: TYPE_NORMAL
- en: People generally install anti-malware tools on individual systems and servers
    as a matter of course or to comply with a policy. You might also find them installed
    on proxy servers to filter malware out of the incoming and outgoing traffic. This
    is common on proxies for email, as malware often uses email to propagate. The
    tool might reject the email entirely, strip the malware out of the message body,
    or remove the offending attachment.
  prefs: []
  type: TYPE_NORMAL
- en: '*Executable Space Protection*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Executable space protection is a technology that prevents the operating system
    and applications from using certain portions of the memory to execute code. This
    means that classic attacks, such as buffer overflows (discussed in the “What Is
    a Buffer Overflow?” box on the next page), which depend on being able to execute
    their commands in hijacked portions of memory, may not function at all. Many operating
    systems also use *address space layout randomization (ASLR)*, a technique that
    shifts the contents of the memory in use around so that tampering with it is even
    more difficult.[⁴](notes.xhtml#ch11fn4)
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT IS A BUFFER OVERFLOW?**'
  prefs: []
  type: TYPE_NORMAL
- en: A buffer overflow attack works by inputting more data than an application is
    expecting—for example, by entering 10 characters into a field that was expecting
    only 8, as shown in [Figure 11-3](#ch11fig3).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/11fig03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-3: An example of buffer overflow*'
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the application, the extra two characters might be written somewhere
    into memory, perhaps over memory locations used by other applications or the operating
    system. It’s sometimes possible to execute commands by specifically crafting the
    excess data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Executable space protection requires two components to function: a hardware
    component and a software component. The two main CPU chip manufacturers, Intel
    and AMD, have executable space protection components. Intel calls it the Execute
    Disable (XD) bit, and AMD calls it Enhanced Virus Protection.'
  prefs: []
  type: TYPE_NORMAL
- en: Many common operating systems, including Microsoft’s, Apple’s, and several Linux
    distributions, implement the executable space protection software component.
  prefs: []
  type: TYPE_NORMAL
- en: '*Software Firewalls and Host Intrusion Detection*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: I’ve already discussed using firewalls and intrusion detection systems on the
    network to detect and filter out undesirable traffic. You can also add a layer
    of security at the host level by implementing a similar set of tools there. Although
    network firewalls and intrusion detection systems are usually purpose-built appliances
    implemented at the network, the actual functions they perform take place via specialized
    software resident on the devices. You can install similar software directly onto
    the hosts residing on your networks. In addition, using firewalls and IDS both
    on and off your hosts can increase your layers of security.
  prefs: []
  type: TYPE_NORMAL
- en: Properly configured software firewalls add a useful layer of security to the
    hosts residing on your networks. These firewalls generally contain only a subset
    of the features you might find on a large firewall appliance, but they’re often
    capable of similar packet filtering and stateful packet inspection. They can range
    from the relatively simple versions that are built into common operating systems
    to large versions, intended for use on corporate networks, that include centralized
    monitoring and considerably more complex rules and management options.
  prefs: []
  type: TYPE_NORMAL
- en: Host-based intrusion detection systems analyze the activities on or directed
    at a host’s network interface. They have many of the same advantages as network-based
    intrusion detection systems but with a considerably reduced scope of operation.
    As with software firewalls, these tools may range from simple consumer models
    to much more complex commercial versions.
  prefs: []
  type: TYPE_NORMAL
- en: A potential flaw in centrally managed host intrusion detection systems is that,
    for the software to report an attack to the management mechanism in real time,
    the information needs to be communicated over the network. If the host in question
    is under attack via the same network, the software may not be able to do this.
    You can attempt to mitigate this issue by sending a regular beacon from the device
    to the management mechanism, allowing you to assume that there’s a problem if
    the beacon doesn’t appear, but this might not be a complete approach, as no news
    doesn’t always equal good news.
  prefs: []
  type: TYPE_NORMAL
- en: Operating System Security Tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many of the same tools you can use to evaluate your network security (discussed
    in [Chapter 10](ch10.xhtml)) can help you assess the security of your hosts. For
    example, you can use scanners to examine how your hosts interact with the rest
    of the devices on the network, or you could use vulnerability assessment tools
    to help point out particular areas that might contain applications or services
    that are vulnerable to attack—or tools already in your environment that someone
    might use against you to subvert your security. The tools I will discuss in this
    section aren’t an exhaustive list, but I’ll hit a few of the highlights.
  prefs: []
  type: TYPE_NORMAL
- en: '*Scanners*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can use the scanning tools mentioned in [Chapter 10](ch10.xhtml) to detect
    security flaws in your hosts. For example, you could look for open ports and versions
    of services that are running, examine banners that services display upon connection
    to give you information about things such as the version of the software, or examine
    the information your systems display over the network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Earlier in this chapter, when I discussed operating system hardening, you learned
    how to use Nmap to discover ports that had services listening on them. Nmap has
    many uses, and it can give you considerably more information—for example, specific
    vendor or version information. [Figure 11-4](#ch11fig4) shows the results of an
    Nmap scan directed against a network printer using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: nmap -sS -sU -A -v 10.0.0.121
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/11fig04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-4: Nmap results*'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, I used `-sS` to run a TCP SYN port scan and `-sU` to run a UDP
    port scan. I enabled OS detection, version detection, and script scanning (`-A`),
    and I enabled verbose output as it ran (`-v`). If you try this command, you’ll
    notice that it takes considerably longer to complete than the one I ran earlier.
  prefs: []
  type: TYPE_NORMAL
- en: In [Figure 11-4](#ch11fig4), the port listing displays several extra ports,
    as well as quite a bit of information about the specific services and versions
    that are running. The `http-title` returned tells you that this is a Brother HL-L8350CDW
    series printer. Armed with this information, you might have a much better chance
    of successfully attacking the device in question.
  prefs: []
  type: TYPE_NORMAL
- en: '**YOU FOUND A WHAT?**'
  prefs: []
  type: TYPE_NORMAL
- en: When scanning with Nmap with OS detection enabled, you may notice that it reports
    the device fingerprints found as running something odd or even wrong entirely.
    Sometimes Nmap’s OS fingerprints can be a little skewed, so it’s often best to
    verify the output from Nmap with another tool if something looks odd.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the many features built into Nmap, you can create custom Nmap
    functionality of your own using the Nmap Scripting Engine, which is a custom language
    and scripting engine that enables you to add functionality to Nmap. Nmap is a
    capable tool with a dizzying array of switches, features, and capabilities. Fortunately,
    there is also a great set of documentation to refer to at *[https://nmap.org/book/man.html](https://nmap.org/book/man.html)*.
  prefs: []
  type: TYPE_NORMAL
- en: '*Vulnerability Assessment Tools*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Vulnerability assessment tools, which often include many of the same features
    found in a tool such as Nmap, attempt to find and report network services on hosts
    that have known vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: One such well-known scanning tool is OpenVAS (*[http://www.openvas.org/](http://www.openvas.org/)*).
    You can use OpenVAS from the command line, but it also has a convenient graphical
    interface called Greenbone, shown in [Figure 11-5](#ch11fig5). OpenVAS can conduct
    a port scan on a target and then attempt to determine what services (and which
    versions) are running on any ports it finds open. OpenVAS will then report back
    with a specific list of possible vulnerabilities for a given device.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/11fig05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-5: The OpenVAS interface*'
  prefs: []
  type: TYPE_NORMAL
- en: OpenVAS includes a port scanner, which finds the listening services so you can
    identify vulnerabilities in them.
  prefs: []
  type: TYPE_NORMAL
- en: '*Exploit Frameworks*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*Exploits* are small bits of software that take advantage of flaws in other
    software to cause them to behave in ways that their creators didn’t intend. Attackers
    commonly use exploits to gain access to systems or get additional privileges on
    those systems. As a security professional, you can also use these tools and techniques
    to assess the security of your own systems so that you can fix any issues before
    attackers find them.'
  prefs: []
  type: TYPE_NORMAL
- en: An *exploit framework* is a collection of prepackaged exploits and tools, such
    as network mapping tools and sniffers. These frameworks make exploits simple to
    use, and they give you access to a large library of them. Exploit frameworks gained
    popularity in the first few years of the 2000s and are still going strong. Some
    notable ones include Rapid7’s Metasploit (shown in [Figure 11-6](#ch11fig6)),
    Immunity CANVAS, and Core Impact.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/11fig06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-6: The Metasploit framework*'
  prefs: []
  type: TYPE_NORMAL
- en: Many exploit frameworks are graphically interfaced tools that you can run in
    much the same way as any other application functions. You can even configure some
    tools to automatically seek out and attack systems, spreading further into the
    network as they gain additional access.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To secure your operating systems, you can start by hardening it. Hardening involves
    removing all unnecessary software and services, altering the default accounts
    on the system, applying the principle of least privilege, updating software often,
    and conducting logging and auditing.
  prefs: []
  type: TYPE_NORMAL
- en: You can also implement additional software to secure your operating systems.
    Anti-malware tools can detect, prevent, and remove malware, and you can put firewall
    technology to use directly on your hosts to filter out undesirable traffic as
    it enters or exits your network interfaces. You can also install host intrusion
    detection systems to detect attacks as they come at you over the network.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you can make use of a variety of security tools to find security flaws.
    Several scanning tools, like Nmap, can give you information about your systems
    and the software running on them. Vulnerability assessment tools such as OpenVAS
    can locate specific security flaws in your services or network-enabled software.
    Additionally, you can use exploit frameworks like Metasploit to attack systems
    to gain access to them or to elevate your privilege levels. Using some of the
    same techniques that attackers use can help you to find and mitigate security
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What does address space layout randomization do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is an exploit framework?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between a port scanner and a vulnerability assessment
    tool?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain the concept of an attack surface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why might you want a firewall on your host if one already exists on the network?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is operating system hardening?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the XD bit, and why do you use it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does executable space protection do for you?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does the principle of least privilege apply to operating system hardening?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download Nmap from *[https://www.nmap.org/](https://www.nmap.org/)* and install
    it. Conduct a basic scan of *[scanme.nmap.org](http://scanme.nmap.org)* using
    either the Zenmap GUI or the command line (`nmap <`IP address`>` is a good place
    to start). What ports can you find open?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
