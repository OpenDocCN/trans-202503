- en: '16'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '16'
- en: INSTALLING AN OPERATING SYSTEM
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安装操作系统
- en: '![Images](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Images](../images/common.jpg)'
- en: 'In the preceding chapter, you set up your PowerLab module so that it’s ready
    to go. Now, you’ll take the next step in your automation journey: learning to
    automate installation of the operating system. Since you have a VM created with
    a VHD attached, you need to install Windows. To do this, you’ll use a Windows
    Server ISO file, the *Convert-WindowsImage.ps1* PowerShell script, and a whole
    lot of scripting to create a hands-off, completely automated deployment of Windows!'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，你已设置好 PowerLab 模块，准备好开始。现在，你将迈出自动化旅程的下一步：学习自动化操作系统的安装。既然你已经创建了一个带有 VHD
    的虚拟机，接下来需要安装 Windows。为此，你将使用 Windows Server ISO 文件、*Convert-WindowsImage.ps1*
    PowerShell 脚本，以及大量脚本来创建一个完全自动化的 Windows 部署！
- en: Prerequisites
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 前提条件
- en: I’m assuming that you followed along from the preceding chapter and have those
    prerequisites met. Here, you’ll need a few more things in order to keep up. First,
    since you’ll be deploying an operating system, you need a Windows Server 2016
    ISO. A free trial is available at [*http://bit.ly/2r5TPRP*](http://bit.ly/2r5TPRP)
    once you log in with a free Microsoft account.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设你已经跟随前一章的内容，并满足了所有的前提条件。在这里，你将需要一些额外的工具以便继续操作。首先，由于你将要部署操作系统，你需要一个 Windows
    Server 2016 ISO 文件。你可以通过登录免费的 Microsoft 账户，在[*http://bit.ly/2r5TPRP*](http://bit.ly/2r5TPRP)
    下载一个免费试用版。
- en: From the preceding chapter, I’m expecting that you have a *C:\PowerLab* folder
    created on your Hyper-V server. Now you should make an ISOs subfolder, *C:\PowerLab\ISOs*,
    containing your Windows Server 2016 ISO. At the time of this writing, the ISO
    filename is *en_windows_server_2016_x64_dvd_9718492.iso*. You’ll use this file
    path in your scripts, so if yours is different, make sure to update the script
    code accordingly.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 从前一章开始，我期望你在 Hyper-V 服务器上创建了一个*C:\PowerLab*文件夹。现在，你应该在其中创建一个 ISOs 子文件夹，*C:\PowerLab\ISOs*，并将你的
    Windows Server 2016 ISO 文件放入其中。撰写本文时，ISO 文件名为*en_windows_server_2016_x64_dvd_9718492.iso*。你将在脚本中使用此文件路径，因此如果你的路径不同，请确保相应地更新脚本代码。
- en: You also need to have the *Convert-WindowsImage.ps1* PowerShell script in your
    PowerLab module folder. If you downloaded the book’s resources, this script will
    come with the chapter’s resources.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要在 PowerLab 模块文件夹中有*Convert-WindowsImage.ps1* PowerShell 脚本。如果你下载了本书的资源，这个脚本将与本章的资源一起提供。
- en: 'A few more things: I’m expecting you to have the LABDC VM that you made in
    the preceding chapter on the Hyper-V server. You’ll use this as the place to associate
    your newly created virtual disk.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些事情：我期望你已经在 Hyper-V 服务器上创建了前一章中的 LABDC 虚拟机。你将使用它作为关联新创建的虚拟磁盘的地方。
- en: And finally, you need the unattended XML answer file (also available via the
    chapter’s downloadable resources) called *LABDC.xml* in the PowerLab module folder.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你需要一个无人值守的 XML 答案文件（也可以通过本章的可下载资源获取），名为*LABDC.xml*，位于 PowerLab 模块文件夹中。
- en: As always, go ahead and run the chapter’s associated *Prerequisites.Tests**.ps1*
    Pester test script to ensure that you meet all the prerequisites ahead of time.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，运行本章附带的*Prerequisites.Tests**.ps1* Pester 测试脚本，以确保你事先满足所有的前提条件。
- en: OS Deployments
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 操作系统部署
- en: 'When it comes to automating OS deployments, you’ll work with three basic components:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动化操作系统部署时，你将使用三个基本组件：
- en: An ISO file containing the bits for the OS
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含操作系统位的 ISO 文件
- en: An answer file providing all the input you’d normally enter manually during
    install time
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个提供所有通常在安装时手动输入的答案文件
- en: Microsoft’s PowerShell script that converts the ISO file to a VHDX
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软的 PowerShell 脚本，用于将 ISO 文件转换为 VHDX
- en: Your job is to figure out a way to stitch all these components together. Most
    of the heavy lifting is done by the answer file and the ISO conversion script.
    What you need to do is create a small script ensuring that the conversion script
    gets called with the appropriate parameters and attaches the newly created VHD
    to the appropriate VM.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你的任务是找出一种方法，将所有这些组件组合在一起。大部分繁重的工作是由答案文件和 ISO 转换脚本完成的。你需要做的是创建一个小脚本，确保转换脚本使用适当的参数调用，并将新创建的
    VHD 附加到相应的虚拟机。
- en: You can follow along with this script called *Install-LABDCOperatingSystem.ps1*
    in the downloaded resources.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在下载的资源中找到名为*Install-LABDCOperatingSystem.ps1*的脚本来跟着操作。
- en: Creating the VHDX
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建 VHDX
- en: The LABDC VM will have a 40GB, dynamic, VHDX disk-partitioned GUID Partition
    Table (GPT) running Windows Server 2016 Standard Core. The conversion script will
    need this information. It will also need to know the path to the source ISO, and
    the path to the unattended answer file.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: LABDC 虚拟机将拥有一个 40GB 动态 VHDX 磁盘，分区为 GUID 分区表（GPT），运行 Windows Server 2016 Standard
    Core。转换脚本需要这些信息。它还需要知道源 ISO 文件的路径以及无人值守答案文件的路径。
- en: 'First, define the paths to the ISO file and the prefilled answer file:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，定义 ISO 文件和预填充答案文件的路径：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, you’ll build all the parameters for the conversion script. Using PowerShell’s
    splatting technique, you can create a single hashtable and define all these parameters
    as one. This method of defining and passing parameters to commands is much cleaner
    than typing out every parameter on a single line:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将构建转换脚本的所有参数。使用 PowerShell 的 splatting 技术，你可以创建一个单一的哈希表并将所有这些参数作为一个整体定义。这种定义和传递参数的方式比在一行中键入每个参数要更清晰：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once all the parameters are defined for the conversion script, you’ll dot source
    the *Convert-WindowsImage.ps1* script. You don’t want to call this conversion
    script directly because it contains a function also called `Convert-WindowsImage`.
    If you were to simply execute the *Convert-WindowsImage.ps1* script, nothing would
    happen because it would just be loading the function inside the script.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦为转换脚本定义了所有参数，你将对 *Convert-WindowsImage.ps1* 脚本进行点源（dot source）。你不想直接调用这个转换脚本，因为它包含一个名为
    `Convert-WindowsImage` 的函数。如果你只是执行 *Convert-WindowsImage.ps1* 脚本，什么也不会发生，因为它只会加载脚本中的函数。
- en: '*Dot sourcing* is a way to load the function into memory to use it for later;
    it loads all functions defined in the script in the current session but doesn’t
    actually execute them. Here’s how to dot source the *Convert-WindowsImage.pst1*
    script:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*点源*是一种将函数加载到内存中以供后续使用的方法；它会加载脚本中定义的所有函数到当前会话中，但不会实际执行它们。以下是如何点源 *Convert-WindowsImage.ps1*
    脚本：'
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Take a look at this code. There’s a new variable: `$PSScriptRoot`. This is
    an automatic variable representing the folder path in which the script resides.
    In this example, since the *Convert-WindowsImage.ps1* script is in the same folder
    as the PowerLab module, you’re referencing that script in the PowerLab module.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这段代码。这里有一个新变量：`$PSScriptRoot`。这是一个自动变量，表示脚本所在文件夹的路径。在这个例子中，由于*Convert-WindowsImage.ps1*脚本与
    PowerLab 模块位于同一文件夹，所以你在 PowerLab 模块中引用了该脚本。
- en: 'Once the conversion script has been dot sourced into the session, you have
    the ability to call the functions that were inside it, including `Convert-WindowsImage`.
    This function will do all the dirty work for you: it’ll open the ISO file, appropriately
    format a new virtual disk, set a boot volume, inject the answer file you provided
    it, and end up with a VHDX file that has a fresh copy of Windows ready for you
    to boot up!'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦转换脚本被点源到会话中，你就可以调用其中的函数，包括 `Convert-WindowsImage`。这个函数会为你完成所有繁重的工作：它会打开 ISO
    文件，适当格式化新的虚拟磁盘，设置启动卷，注入你提供的答案文件，最终生成一个可以启动的新 Windows 系统的 VHDX 文件！
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Using community scripts such as *Convert-WindowsImage.ps1* is a great way to
    speed up development. The script saves considerable time, and since it was created
    by Microsoft, you can trust it. If you’re ever curious about what this script
    does, feel free to open it. It’s doing a lot, and I, for one, am glad we have
    a resource like this to automate operating system installations.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用社区脚本，如 *Convert-WindowsImage.ps1*，是加速开发的好方法。这个脚本节省了大量时间，而且由于它是由 Microsoft
    创建的，你可以信任它。如果你对这个脚本做了什么感到好奇，随时可以打开它。它做了很多事情，我个人很高兴我们有这样的资源来自动化操作系统安装。
- en: Attaching the VM
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 附加虚拟机
- en: When the conversion script is complete, you should have a *LABDC.vhdx* file
    located in *C:\PowerLab\VHDs* that’s ready to boot. But you’re not done just yet.
    As is, this virtual disk isn’t attached to a VM. You have to attach this virtual
    disk to an existing VM (you’ll use the LABDC VM created earlier).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当转换脚本完成时，你应该在 *C:\PowerLab\VHDs* 目录下找到一个准备启动的 *LABDC.vhdx* 文件。但你还没有完成。按现有状态，这个虚拟磁盘并没有附加到虚拟机。你必须将这个虚拟磁盘附加到一个现有的虚拟机（你将使用之前创建的
    LABDC 虚拟机）。
- en: 'Just as you did in the preceding chapter, use the `Add-VmHardDiskDrive` function
    to attach the virtual disk to your VM:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你在前一章节中做的那样，使用 `Add-VmHardDiskDrive` 函数将虚拟磁盘附加到你的虚拟机：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You need to boot from this disk, so let’s make sure it’s in the proper boot
    order. You can discover the existing boot order by using the `Get-VMFirmware`
    command and looking at the `BootOrder` property:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要从这个磁盘启动，所以让我们确保它在正确的启动顺序中。你可以使用`Get-VMFirmware`命令并查看`BootOrder`属性来发现现有的启动顺序：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Notice that the boot order has a network boot as the first boot device. This
    isn’t what you want. You want the VM to boot from the disk you just created.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，启动顺序中的第一个启动设备是网络启动。这不是你想要的。你希望虚拟机从你刚创建的磁盘启动。
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To set the VHDX you just created as the first boot device, use the `Set-VMFirmware`
    command and the `FirstBootDevice` parameter:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要将你刚创建的VHDX设置为第一个启动设备，使用`Set-VMFirmware`命令和`FirstBootDevice`参数：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: At this point, you should have a VM called LABDC with a virtual disk attached
    that will boot into Windows. Fire up the VM with Start-VM -Name LABDC and ensure
    that it boots into Windows successfully. If so, you’re finished!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，你应该已经拥有一个名为LABDC的虚拟机，并附加了一个将启动到Windows的虚拟磁盘。使用`Start-VM -Name LABDC`启动虚拟机，并确保它成功启动到Windows。如果是这样，那么你完成了！
- en: Automating OS Deployments
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动化操作系统部署
- en: So far, you’ve successfully created a VM called LABDC that boots into Windows.
    Now it’s important to realize that the script you were using was specifically
    tailored to your single VM. In the real world, you’re rarely afforded that luxury.
    A great script is reusable and portable, meaning that it doesn’t need to be changed
    for every specific input, but instead works around a set of ever-changing parameter
    values.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经成功创建了一个名为LABDC的虚拟机，它可以启动Windows。现在需要意识到，你正在使用的脚本是专门为你的单个虚拟机量身定制的。在实际工作中，你很少能享有这种奢侈。一个好的脚本是可重用和可移植的，这意味着它不需要针对每个特定的输入进行更改，而是围绕一组不断变化的参数值进行工作。
- en: Let’s take a look at the `Install-PowerLabOperatingSystem` function in the PowerLab
    module, found in this chapter’s downloadable resources. This function gives a
    good example of how to turn the *Install-LABDCOperatingSystem.ps1* script you
    were using into one that can be used to deploy operating systems across multiple
    virtual disks, all by simply changing parameter values.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下PowerLab模块中的`Install-PowerLabOperatingSystem`函数，它可以在本章的可下载资源中找到。这个函数很好地展示了如何将你正在使用的*Install-LABDCOperatingSystem.ps1*脚本转换为一个可以跨多个虚拟磁盘部署操作系统的脚本，只需简单地更改参数值。
- en: I won’t cover the whole script in this section since we covered most of the
    functionality in the previous section, but I do want to point out a few differences.
    First, notice that you’re using more variables. Variables allow your script to
    be more flexible. They provide placeholders for values rather than hardcoding
    things directly into the code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，我不会覆盖整个脚本，因为我们在上一节中已经讲解了大部分功能，但我确实想指出一些不同之处。首先，注意你使用了更多的变量。变量让你的脚本更具灵活性。它们为值提供了占位符，而不是将内容直接硬编码到代码中。
- en: Notice, also, the conditional logic in the script. Take a look at the code in
    [Listing 16-1](ch16.xhtml#ch16list1). This is a `switch` statement that finds
    an ISO file path based on an operating system name. You didn’t need this in the
    previous script because everything was hardcoded into the script.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，还要注意脚本中的条件逻辑。查看[Listing 16-1](ch16.xhtml#ch16list1)中的代码。这是一个`switch`语句，根据操作系统名称查找ISO文件路径。在之前的脚本中不需要这个，因为所有内容都是硬编码到脚本中的。
- en: Because the `Install-PowerLabOperatingSystem` function has an `OperatingSystem`
    parameter, you have the flexibility needed to install different operating systems.
    You just need a way to account for all those operating systems. One great way
    to do that is a `switch` statement, which lets you easily add another condition.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`Install-PowerLabOperatingSystem`函数有一个`OperatingSystem`参数，所以你可以灵活地安装不同的操作系统。你只需要找到一种方法来处理所有这些操作系统。一个很好的方法是使用`switch`语句，这样你可以轻松地添加更多条件。
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 16-1: Using the PowerShell switch logic*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 16-1: 使用PowerShell switch逻辑*'
- en: 'You can see how you moved hardcoded values into parameters. I can’t stress
    this point enough: parameters are key to building reusable scripts. Avoid hardcoding
    as much as you can, and always keep an eye out for values that you’ll have to
    change at runtime (and then use a parameter for them!). But, you might wonder,
    what if you want to change the value of something only some of the time? Next,
    you can see that multiple parameters have default values. This allows you to statically
    set the “typical” values and then override as necessary.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，你已经将硬编码的值转移到了参数中。我不能再强调这一点：参数是构建可重用脚本的关键。尽量避免硬编码，并时刻关注那些你需要在运行时更改的值（然后使用参数来处理它们！）。但是，你可能会想，如果你只想偶尔更改某个值怎么办？接下来，你可以看到多个参数都有默认值。这允许你静态地设置“典型”值，然后根据需要进行覆盖。
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Using the `Install-PowerLabOperatingSystem` function, you can turn all that
    stuff into a single line that supports dozens of configurations. You now have
    a single, cohesive unit of code that you can call in many ways, all without changing
    a single line of the script!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Install-PowerLabOperatingSystem` 函数，你可以将所有这些内容变成一行代码，支持数十种配置。现在，你有了一块完整的、连贯的代码单元，可以用多种方式调用它，而不需要更改脚本中的任何一行！
- en: Storing Encrypted Credentials on Disk
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将加密的凭据存储到磁盘
- en: You’ll finish up this stage of the project soon enough, but before going any
    further, you need to take a slight detour. This is because you’re about to be
    doing things with PowerShell that require credentials. It’s common enough when
    scripting to have sensitive information (for example, username/password combos)
    stored in plaintext inside the script itself. And likewise, it’s not uncommon
    to think that if this is being done in a test environment, it’s no big deal—but
    it sets a dangerous precedent. It’s important to be conscious of security measures
    even when you’re testing so that you can build good security habits for when you’re
    moving out of testing and into production.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你很快就会完成项目的这一阶段，但在继续之前，你需要稍微绕个弯。这是因为你即将使用 PowerShell 执行一些需要凭据的操作。在脚本编写中，常常会把敏感信息（例如，用户名/密码组合）以明文形式存储在脚本中。类似地，可能会认为如果在测试环境中进行操作也无妨——但这为未来的工作埋下了危险的伏笔。即使在测试过程中，也要时刻关注安全措施，这样才能在从测试环境转向生产环境时养成良好的安全习惯。
- en: 'A simple way to avoid having plaintext passwords in your script is to encrypt
    them in a file. When you need them, your script can decrypt them and use them.
    Thankfully, PowerShell provides a way to natively do this: the Windows Data Protection
    API. This API is used under the hood of the `Get-Credential` command, a command
    that returns a `PSCredential` object.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 避免在脚本中存储明文密码的一种简单方法是将其加密到文件中。当需要时，脚本可以解密并使用这些密码。幸运的是，PowerShell 提供了一种原生的方式来实现这一点：Windows
    数据保护 API。该 API 在 `Get-Credential` 命令的底层被使用，这个命令会返回一个 `PSCredential` 对象。
- en: '`Get-Credential` creates an encrypted form of the password known as a *secure
    string*. Once in the secure string format, the whole credential object can be
    saved to the disk by using the `Export-CliXml` command; inversely, you can read
    the `PSCredential` object by using the `Import-CliXml` command. These commands
    make a handy password management system.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`Get-Credential` 会创建一个被称为 *安全字符串* 的加密密码形式。一旦转换为安全字符串格式，整个凭据对象就可以通过 `Export-CliXml`
    命令保存到磁盘；反之，使用 `Import-CliXml` 命令可以读取 `PSCredential` 对象。这些命令提供了一个便捷的密码管理系统。'
- en: When handling credentials in PowerShell, you want to store `PSCredential` objects,
    the types of objects most `Credential` parameters accept. In previous chapters,
    you were either interactively typing in the username and password or storing them
    in plaintext. But now that you’ve gotten your feet wet, let’s do it for real and
    add protection for your credentials.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PowerShell 中处理凭据时，你需要存储 `PSCredential` 对象，这些对象是大多数 `Credential` 参数接受的对象类型。在前面的章节中，你要么是交互式地输入用户名和密码，要么是以明文形式存储它们。但现在你已经入门了，让我们真正开始吧，为你的凭据添加保护。
- en: Saving a `PSCredential` object in an encrypted format to disk requires the `Export-CliXml`
    command. Using the `Get-Credential` command, you can create a prompt for username
    and password and prompt the result into `Export-CliXml`, which takes the path
    to save the XML file as shown in [Listing 16-2](ch16.xhtml#ch16list2).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `PSCredential` 对象以加密格式保存到磁盘需要使用 `Export-CliXml` 命令。使用 `Get-Credential` 命令，你可以创建一个用户名和密码的提示，并将结果传递给
    `Export-CliXml`，后者接受保存 XML 文件的路径，如 [列表 16-2](ch16.xhtml#ch16list2) 所示。
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 16-2: Exporting a credential to a file*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 16-2：将凭据导出到文件*'
- en: 'If you open the XML file, it should look something like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开 XML 文件，它应该像这样：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now that the credential has been saved to the disk, let’s see how to get it
    in PowerShell. Use the `Import-CliXml` command to interpret the XML file and create
    a `PSCredential` object:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在凭证已经保存到磁盘上，让我们看看如何在 PowerShell 中获取它。使用 `Import-CliXml` 命令来解析 XML 文件并创建 `PSCredential`
    对象：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You set the code up so that you simply need to pass `$cred` to any `Credential`
    parameter on a command. Now the code will work just as if you interactively typed
    it in. This method is short and sweet, but you wouldn’t generally use it in a
    production environment because the user that encrypted the text must also be the
    one that decrypts it (not how encryption is supposed to work!). The one-user requirement
    won’t scale well at all. But all that said, in a test environment, it works great!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你将代码设置为只需将 `$cred` 传递给命令中的任何 `Credential` 参数。现在，代码将像你交互式输入一样工作。这种方法简洁明了，但通常你不会在生产环境中使用它，因为加密文本的用户必须也是解密者（这不是加密的本意！）。这种单一用户的要求并不适合大规模应用。但是，话虽如此，在测试环境中，它表现得非常好！
- en: PowerShell Direct
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PowerShell 直接连接
- en: Now, back to our project. Typically, when you run commands against remote computers
    in PowerShell, you’re forced to use PowerShell remoting. This, obviously, depends
    on network connectivity between your local host and a remote host. Wouldn’t it
    be nice if you could simplify this setup and not have to worry about network connectivity
    at all? Well, you can!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回到我们的项目。通常，当你在 PowerShell 中对远程计算机执行命令时，你需要使用 PowerShell 远程处理。这显然依赖于本地主机和远程主机之间的网络连接。如果你可以简化这个设置，完全不需要担心网络连接，岂不是很好？嗯，你可以！
- en: 'Because you’re running all your automation on a Windows Server 2016 Hyper-V
    host, you have a useful feature at your disposal: PowerShell Direct. *PowerShell
    Direct* is a newer feature of PowerShell that allows you to run commands on any
    VMs hosted on the Hyper-V server *without network connectivity*. There’s no need
    to set up the network adapters on the VMs ahead of time (although you already
    did this with the unattend XML file).'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你在 Windows Server 2016 Hyper-V 主机上运行所有自动化操作，你有一个非常有用的功能可以使用：PowerShell 直接连接。*PowerShell
    直接连接*是 PowerShell 的一个较新功能，允许你在没有网络连接的情况下在 Hyper-V 服务器上托管的任何虚拟机上运行命令。你不需要提前为虚拟机设置网络适配器（尽管你已经通过无人值守的
    XML 文件做了这件事）。
- en: For convenience’s sake, rather than use the full network stack, you’ll use PowerShell
    Direct quite a bit. If you didn’t, because you’re in a workgroup environment,
    you’d have to configure PowerShell remoting in a workgroup environment—no easy
    task (see the guide at *[http://bit.ly/2D3deUX](http://bit.ly/2D3deUX)*). It’s
    always a good idea to choose your battles in PowerShell, and here, I’ll choose
    the easiest one!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，你将大量使用 PowerShell 直接连接，而不是使用完整的网络堆栈。如果你不这样做，因为你处于工作组环境中，你必须在工作组环境中配置
    PowerShell 远程处理——这不是件容易的事（请参见 *[http://bit.ly/2D3deUX](http://bit.ly/2D3deUX)*）。在
    PowerShell 中，选择战斗总是一个好主意，而在这里，我选择了最简单的方式！
- en: 'PowerShell Direct is nearly identical to PowerShell remoting. It’s a way to
    run commands on remote computers. Typically, this requires network connectivity,
    but with PowerShell Direct, there’s no need. To initiate a command on a remote
    computer via PowerShell remoting, you’d usually use the `Invoke-Command` with
    the `ComputerName` and `ScriptBlock` parameters:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 直接连接与 PowerShell 远程处理几乎相同。它是一种在远程计算机上运行命令的方法。通常，这需要网络连接，但使用 PowerShell
    直接连接时，不再需要网络连接。要通过 PowerShell 远程处理启动远程计算机上的命令，你通常会使用带有 `ComputerName` 和 `ScriptBlock`
    参数的 `Invoke-Command`：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When using PowerShell Direct, though, the `ComputerName` parameter turns into
    `VMName`, and a `Credential` parameter is added. The exact same command will run
    via PowerShell Direct as in the previous code, but only from the Hyper-V host
    itself. To make things easy, let’s first store a `PSCredential` object on disk
    so you don’t have to keep prompting for a credential in the future.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在使用 PowerShell 直接连接时，`ComputerName` 参数会变成 `VMName`，并且添加了一个 `Credential` 参数。通过
    PowerShell 直接连接，完全可以像之前的代码一样运行相同的命令，但仅限于 Hyper-V 主机本身。为了简化操作，让我们先将 `PSCredential`
    对象保存在磁盘上，这样以后就不需要反复提示输入凭证了。
- en: 'For this example, use the username `powerlabuser` and the password `P@$$w0rd12`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，使用用户名`powerlabuser`和密码`P@$$w0rd12`：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now that you have saved the credential to disk, you’ll decrypt it and pass
    it to `Invoke-Command`. Let’s read the credential saved in *VMCredential.xml*
    and then use that credential to execute code on the LABDC VM:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经将凭证保存到磁盘，你将解密它并传递给 `Invoke-Command`。让我们读取保存在 *VMCredential.xml* 中的凭证，然后使用该凭证在
    LABDC 虚拟机上执行代码：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: A lot more is going on under the covers to make PowerShell Direct work, but
    I’m not going to go into the details here. For a full breakdown of how PowerShell
    Direct works, I recommend taking a look at the Microsoft blog post announcing
    the feature ([*https://docs.microsoft.com/en-us/virtualization**/hyper-v-on-windows/user-guide/powershell-direct*](https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/user-guide/powershell-direct)).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 PowerShell Direct 正常工作，背后有许多更复杂的操作，但我在这里不会深入探讨这些细节。如果你想全面了解 PowerShell Direct
    是如何工作的，我推荐你查看 Microsoft 博客中宣布该功能的文章（[*https://docs.microsoft.com/en-us/virtualization**/hyper-v-on-windows/user-guide/powershell-direct*](https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/user-guide/powershell-direct)）。
- en: Pester Tests
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Pester 测试
- en: 'It’s now time for the most important part of the chapter: let’s bring it all
    together with the Pester tests! You’ll follow the same pattern as in the preceding
    chapter, but here I’d like to point out one piece of the tests. In this chapter’s
    Pester tests, you’ll use the `BeforeAll` and `AfterAll` blocks ([Listing 16-3](ch16.xhtml#ch16list3)).'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是本章最重要的部分：让我们通过 Pester 测试把一切整合起来！你将遵循与上一章相同的模式，但在这里我想指出测试中的一个关键部分。在本章的 Pester
    测试中，你将使用 `BeforeAll` 和 `AfterAll` 块（[清单 16-3](ch16.xhtml#ch16list3)）。
- en: As their names suggest, the `BeforeAll` block contains code that’s executed
    before all the tests, and the `AfterAll` block contains code that’s executed after.
    You use these blocks because you’ll need to connect to your LABDC server multiple
    times via PowerShell Direct. PowerShell remoting and PowerShell Direct both support
    the concept of a session, which you learned about in [Part I](part1.xhtml#part1)
    ([Chapter 8](ch08.xhtml#ch8)). Rather than having `Invoke-Command` build and tear
    down multiple sessions, it’s better to define a single session ahead of time and
    reuse it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，`BeforeAll` 块包含在所有测试之前执行的代码，而 `AfterAll` 块则包含在所有测试之后执行的代码。你使用这些块是因为你需要通过
    PowerShell Direct 多次连接到 LABDC 服务器。PowerShell 远程处理和 PowerShell Direct 都支持会话的概念，你在
    [第一部分](part1.xhtml#part1)（[第 8 章](ch08.xhtml#ch8)）中学到过。与其让 `Invoke-Command` 创建和销毁多个会话，不如提前定义一个会话并重复使用它。
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '*Listing 16-3:* Tests.ps1—BeforeAll *and* AfterAll *blocks*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 16-3：* Tests.ps1——BeforeAll *和* AfterAll *块*'
- en: You’ll notice that you’re decrypting your saved credential from disk inside
    the `BeforeAll` block. Once you create the credential, you pass it and the name
    of the VM to the `New-PSSession` command. This is the same `New-PSSession` covered
    in [Part I](part1.xhtml#part1) ([Chapter 8](ch08.xhtml#ch8)), but here you can
    see that instead of using `ComputerName` as a parameter, you’re using `VMName`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到你是在 `BeforeAll` 块中解密从磁盘保存的凭证。一旦创建了凭证，你将其与虚拟机的名称一起传递给 `New-PSSession` 命令。这是与
    [第一部分](part1.xhtml#part1)（[第 8 章](ch08.xhtml#ch8)）中介绍的相同的 `New-PSSession`，但在这里你可以看到，你不是使用
    `ComputerName` 作为参数，而是使用 `VMName`。
- en: This will create a single remote session that you can reuse throughout the tests.
    After all the tests are done, Pester will look in the `AfterAll` block and remove
    the session. This approach is much more efficient than repeatedly creating a session,
    especially if you have dozens or hundreds of tests that need to run code remotely.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个单一的远程会话，你可以在整个测试过程中重用它。所有测试完成后，Pester 会查看 `AfterAll` 块并移除该会话。这种方法比反复创建会话要高效得多，尤其是当你需要执行数十个或数百个远程执行代码的测试时。
- en: The rest of the script in the chapter resources is straightforward and follows
    the same pattern you’ve been using. As you can see, all the Pester tests come
    back positive, which means you’re still on the right track!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 本章资源中的其余脚本内容很简单，遵循了你一直在使用的模式。如你所见，所有 Pester 测试都通过了，这意味着你仍然在正确的轨道上！
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you went a little deeper into our real-world project. You used
    the existing VM you built in the preceding chapter and, both manually and automatically,
    deployed an operating system to it. At this point, you have a fully functioning
    Windows VM ready for the next stage in your journey.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你深入了解了我们的实际项目。你使用了在上一章中构建的现有虚拟机，并且通过手动和自动方式为其部署了操作系统。到目前为止，你已经拥有了一台完全功能的
    Windows 虚拟机，准备进入你旅程的下一阶段。
- en: In the next chapter, you’ll set up Active Directory (AD) on your LABDC VM. Setting
    up AD will create a new AD forest and domain to which, by the end of the session,
    you’ll have joined even more servers.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将为你的LABDC虚拟机设置Active Directory（AD）。设置AD将创建一个新的AD林和域，在本节结束时，你将有更多的服务器加入该域。
