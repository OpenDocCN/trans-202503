- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">5</samp> <samp class="SANS_Dogma_OT_Bold_B_11">USER
    ENVIRONMENT AND INTERACTION DETECTION</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">5</samp> <samp class="SANS_Dogma_OT_Bold_B_11">用户环境与交互检测</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: As automated malware sandboxes get better at hiding themselves from evasive
    malware, malware authors must adapt. One tactic they use is to enumerate the user’s
    environment and the user’s interaction with it. As [Chapter 4](chapter4.xhtml)
    noted, the everyday user’s setup has open browser tabs, many windows open and
    apps in use, and frequent mouse and keyboard interaction, making it quite different
    from the sandbox environment. An automated malware analysis sandbox is designed
    to boot up, detonate a malware sample, and then promptly shut down. It may not
    exhibit any normal user behaviors or other indicators that suggest it’s a valid
    end-user system.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 随着自动化恶意软件沙盒技术越来越善于隐藏自己免受规避型恶意软件的攻击，恶意软件作者必须做出调整。他们使用的一种策略是列举用户的环境以及用户与其互动的情况。正如[第4章](chapter4.xhtml)所指出的，普通用户的设置通常会有多个打开的浏览器标签页、许多窗口和正在使用的应用程序，且频繁的鼠标和键盘交互，使得它与沙盒环境有很大的不同。自动化的恶意软件分析沙盒设计是启动、引爆恶意软件样本，然后迅速关闭。它可能不会表现出任何正常用户行为或其他表明其是有效最终用户系统的迹象。
- en: Modern malware can look for evidence of a real user by searching for typical
    user behaviors, such as downloaded browser cookies and desktop wallpaper settings
    or mouse and keyboard interactions. In this chapter, I’ll outline some interesting
    techniques that malware uses to accomplish this.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现代恶意软件可能会通过寻找典型的用户行为来查找真实用户的证据，例如下载的浏览器Cookies、桌面壁纸设置或鼠标和键盘交互。在这一章中，我将概述一些恶意软件用来实现这一目标的有趣技巧。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Browser Cookies, Cache, and Browsing
    History</samp>
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">浏览器Cookies、缓存和浏览历史</samp>
- en: Some malware may be able to enumerate the host’s internet cookies, cache, and
    browsing history. *Cookies* are small files that web pages save to the disk, usually
    for storing the user’s website configuration and preferences. Depending on the
    browser and version, cookies can be stored in individual files or in a small database,
    such as SQLite. The *cache* is a file or group of files that stores website resources
    such as images so that the page loads more quickly the next time the user visits
    it. Much like cookies, the cache can be stored in multiple files or in a database.
    Finally, the *browsing history* is simply a list of previously visited websites,
    typically stored as one or more database files.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一些恶意软件可能能够列举主机的互联网Cookies、缓存和浏览历史。*Cookies* 是网页保存到磁盘的小文件，通常用于存储用户的网页配置和偏好设置。根据浏览器和版本的不同，Cookies
    可以存储在单独的文件中，或存储在像SQLite这样的数据库中。*缓存* 是存储网站资源（如图片）的文件或一组文件，这样下次用户访问该页面时可以更快地加载。与Cookies类似，缓存可以存储在多个文件中，也可以存储在数据库中。最后，*浏览历史*
    只是一个先前访问过的网站的列表，通常存储为一个或多个数据库文件。
- en: The typical end user will likely have hundreds or thousands of stored cookie
    and cache files and a large internet browsing history, whereas a typical sandbox
    or malware analysis system may not have any at all. Malware can take advantage
    of this discrepancy by counting the number of cookies, cache entries, or previously
    visited websites and checking it against a threshold value. For example, if the
    victim machine has only five entries in its browsing history, the malware might
    assume it’s running in a clean sandbox environment.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 普通用户通常会有成百上千个存储的Cookie和缓存文件，以及大量的上网历史，而典型的沙盒环境或恶意软件分析系统可能根本没有这些内容。恶意软件可以利用这一差异，通过计算Cookie、缓存条目或之前访问过的网站数量，并将其与阈值进行比较。例如，如果受害者的机器上只有五个浏览历史条目，恶意软件可能会认为它运行在一个干净的沙盒环境中。
- en: 'Every browser has standard locations for cookies, cache files, and browsing
    history that malware might attempt to enumerate. Here are some of the most common:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 每个浏览器都有标准的位置来存储Cookies、缓存文件和浏览历史，恶意软件可能会尝试列举这些内容。以下是一些最常见的：
- en: '**Chrome**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**Chrome**'
- en: '*C:\Users\<user>\AppData\Local\Google\Chrome\User Data\Default*'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*C:\Users\<user>\AppData\Local\Google\Chrome\User Data\Default*'
- en: '*C:\Users\<user>\AppData\Local\Google\Chrome\User Data\Default\Cache*'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*C:\Users\<user>\AppData\Local\Google\Chrome\User Data\Default\Cache*'
- en: '*C:\Users\<user>\AppData\Local\Google\Chrome\User Data\Default\History*'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*C:\Users\<user>\AppData\Local\Google\Chrome\User Data\Default\History*'
- en: '**Firefox**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**Firefox**'
- en: '*C:\Users\<user>\AppData\Local\Mozilla\Firefox\Profiles*'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*C:\Users\<user>\AppData\Local\Mozilla\Firefox\Profiles*'
- en: '*C:\Users\<user>\AppData\Roaming\Mozilla\Firefox\Profiles*'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*C:\Users\<user>\AppData\Roaming\Mozilla\Firefox\Profiles*'
- en: '**Internet Explorer**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**Internet Explorer**'
- en: '*C:\Users\<user>\AppData\Roaming\Microsoft\Windows\Cookies*'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*C:\Users\<user>\AppData\Roaming\Microsoft\Windows\Cookies*'
- en: '*C:\Users\<user>\AppData\Local\Microsoft\Windows\Temporary Internet Files*'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*C:\Users\<user>\AppData\Local\Microsoft\Windows\Temporary Internet Files*'
- en: '*C:\Users\<user>\AppData\Local\Microsoft\Windows\WebCache*'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*C:\Users\<user>\AppData\Local\Microsoft\Windows\WebCache*'
- en: '*C:\Users\<user>\AppData\Local\Microsoft\Internet Explorer\Recovery*'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*C:\Users\<user>\AppData\Local\Microsoft\Internet Explorer\Recovery*'
- en: '**Edge**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**Edge**'
- en: '*C:\Users\<user>\AppData\Local\Packages\<package name>\AC\MicrosoftEdge\User\*'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*C:\Users\<user>\AppData\Local\Packages\<package name>\AC\MicrosoftEdge\User\*'
- en: '*C:\Users\<user>\AppData\Local\Packages\<package name>\AC\MicrosoftEdge\Cache\*'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*C:\Users\<user>\AppData\Local\Packages\<package name>\AC\MicrosoftEdge\Cache\*'
- en: This list is non-exhaustive, and locations may change, of course, depending
    on the Windows OS and browser versions in use.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表并不详尽，当然，具体位置可能会根据使用的 Windows 操作系统和浏览器版本的不同而发生变化。
- en: If you spot malware enumerating through these files (possibly by calling Windows
    functions such as <samp class="SANS_TheSansMonoCd_W5Regular_11">FindFirstFile</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">FindNextFile</samp>), it may
    be attempting to detect the analysis environment. Malware may also use <samp class="SANS_TheSansMonoCd_W5Regular_11">FindFirstUrlCacheEntry</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">FindNextUrlCacheEntry</samp>,
    which sequentially enumerate browser cache entries. These APIs are specific to
    Microsoft browser caches, however. Once again, the enumeration method will largely
    depend on the browser and version being used.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现恶意软件正在通过这些文件枚举（可能通过调用 Windows 函数，如 <samp class="SANS_TheSansMonoCd_W5Regular_11">FindFirstFile</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">FindNextFile</samp>），它可能正在尝试检测分析环境。恶意软件也可能使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">FindFirstUrlCacheEntry</samp> 和
    <samp class="SANS_TheSansMonoCd_W5Regular_11">FindNextUrlCacheEntry</samp>，这些函数会顺序枚举浏览器缓存条目。然而，这些
    API 仅限于 Microsoft 浏览器缓存。再次强调，枚举方法很大程度上取决于使用的浏览器和版本。
- en: 'Older browsers and versions typically use multiple small files for cookies,
    cache, and history storage, while modern browsers use databases. If the browser
    cookies, cache, and history are stored in database files, the malware may attempt
    to interact with them directly. For example, in either the malware executable
    file or its process memory address space, you may spot static strings that reference
    certain browser directories (such as *C:\Users\<user>\AppData\Local\Google\Chrome\User
    Data\Default\History*), followed by a database query such as this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 较旧的浏览器和版本通常使用多个小文件来存储 cookies、缓存和历史记录，而现代浏览器则使用数据库。如果浏览器的 cookies、缓存和历史记录存储在数据库文件中，恶意软件可能会尝试直接与它们交互。例如，在恶意软件的可执行文件或其进程内存地址空间中，你可能会看到引用特定浏览器目录的静态字符串（例如
    *C:\Users\<user>\AppData\Local\Google\Chrome\User Data\Default\History*），然后是类似这样的数据库查询：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This command could be used to enumerate all of the web history in the history
    database. Database interaction is beyond the scope of this book, so we won’t go
    into further detail here, but it’s important to be aware of this technique.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令可以用来枚举历史数据库中的所有网络历史记录。由于数据库交互超出了本书的范围，我们不会在这里深入讨论，但需要注意这种技术。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Recent Office Files</samp>
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">最近的 Office 文件</samp>
- en: Using recent Office files is another good way for malware to determine whether
    it’s running in an analysis lab. A real end user will likely have opened many
    files with Microsoft Office applications, and Windows keeps track of those files.
    When you open a document in Word, for example, the file will be added to your
    *Office Recent Files* list.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用最近的 Office 文件是恶意软件判断是否在分析实验室中运行的另一种有效方式。真实的最终用户很可能已经打开了许多 Microsoft Office
    应用程序的文件，而 Windows 会跟踪这些文件。例如，当你在 Word 中打开文档时，该文件将会被添加到你的*Office 最近文件*列表中。
- en: Information about your recent Office files is contained in the registry key
    <samp class="SANS_TheSansMonoCd_W5Regular_11">HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\<</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">Office_Version_Number</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">></samp>, under a specific subkey called
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Excel</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">Word</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Powerpoint</samp>, and so on. Further
    information may be stored in the filesystem directory *C:\Users\<user>\AppData\Roaming\Microsoft\Office\Recent.*
    If you spot malware enumerating this registry key or folder path (using any of
    the previously mentioned Windows functions for file and registry enumeration),
    it may very well be attempting to identify recent Office documents to determine
    whether the victim host is being used by a “real” end user.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有关您最近的Office文件的信息包含在注册表项<samp class="SANS_TheSansMonoCd_W5Regular_11">HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\<</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">Office_Version_Number</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">></samp>下的特定子项中，如<samp class="SANS_TheSansMonoCd_W5Regular_11">Excel</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Word</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">Powerpoint</samp>等。进一步的信息可能存储在文件系统目录*C:\Users\<user>\AppData\Roaming\Microsoft\Office\Recent*中。如果您发现恶意软件正在枚举此注册表项或文件夹路径（使用之前提到的任何Windows文件和注册表枚举函数），它可能正在尝试识别最近的Office文档，以确定受害主机是否由“真实”最终用户使用。
- en: '### <samp class="SANS_Futura_Std_Bold_B_11">User Files and Directories</samp>'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '### <samp class="SANS_Futura_Std_Bold_B_11">用户文件和目录</samp>'
- en: A typical user will probably have many files on the system in various user directories,
    such as *Documents*, *Pictures*, *Desktop*, and so on. Using the file enumeration
    methods described in [Chapter 4](chapter4.xhtml), malware can enumerate these
    directories in order to sense whether the host is a real user or not. If the malware
    discovers a lack of user activity in these directories, it might conclude that
    it’s running in a sandbox or analysis environment and take evasive actions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的用户可能在系统的不同用户目录中拥有许多文件，例如*文档*、*图片*、*桌面*等。通过使用[第4章](chapter4.xhtml)中描述的文件枚举方法，恶意软件可以枚举这些目录，以判断主机是否为真实用户。如果恶意软件发现这些目录中没有用户活动，它可能会得出结论，认为自己正在沙箱或分析环境中运行，并采取规避措施。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Desktop Wallpaper</samp>
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">桌面壁纸</samp>
- en: One particularly creative method malware uses to detect analysis machines is
    checking the currently configured wallpaper, since authentic users tend to change
    their desktop wallpaper from the Windows default. To do so, the malware can simply
    check the Wallpaper registry value <samp class="SANS_TheSansMonoCd_W5Regular_11">HKEY_CURRENT_USER\Software\Microsoft\Internet
    Explorer\Desktop\General\WallpaperSource</samp>. If the user is still using the
    default Windows wallpaper, the <samp class="SANS_TheSansMonoCd_W5Regular_11">WallpaperSource</samp>
    value will contain that wallpaper’s path, which is somewhere in the *C:\Windows\*
    directory. On the other hand, if the user has custom desktop wallpaper configured,
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">WallpaperSource</samp> value
    will likely contain a custom directory and image name, such as *C:\Users\<user>\Pictures\my_wallpaper.jpg*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件用来检测分析机器的一种特别有创意的方法是检查当前配置的壁纸，因为真实用户往往会更改桌面壁纸，而不是使用Windows默认壁纸。为此，恶意软件可以简单地检查壁纸注册表项<samp
    class="SANS_TheSansMonoCd_W5Regular_11">HKEY_CURRENT_USER\Software\Microsoft\Internet
    Explorer\Desktop\General\WallpaperSource</samp>。如果用户仍然使用默认的Windows壁纸，<samp class="SANS_TheSansMonoCd_W5Regular_11">WallpaperSource</samp>值将包含该壁纸的路径，通常位于*C:\Windows\*目录中。另一方面，如果用户配置了自定义桌面壁纸，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">WallpaperSource</samp>值可能包含自定义目录和图像名称，例如*C:\Users\<user>\Pictures\my_wallpaper.jpg*。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Desktop Windows</samp>
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">桌面窗口</samp>
- en: 'Some malware variants count the number of active desktop windows or search
    for specific ones. They can use the function <samp class="SANS_TheSansMonoCd_W5Regular_11">GetForegroundWindow</samp>
    to test whether the foreground window (meaning the currently active window) changes.
    Since I’m typing this text in LibreOffice, this program is my active foreground
    window. As a legitimate user, my active window will likely change quite a bit;
    for example, I might minimize LibreOffice to take a break from writing and watch
    YouTube cat videos in Chrome. In an automated malware analysis sandbox environment,
    the active window probably won’t change much. Some malware variants know this
    and can use it against the analysis system for detection. In this example, the
    malware is checking whether the foreground window has changed after five seconds:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一些恶意软件变种会统计活动桌面窗口的数量或搜索特定的窗口。它们可以使用<samp class="SANS_TheSansMonoCd_W5Regular_11">GetForegroundWindow</samp>函数来测试前景窗口（即当前活动窗口）是否发生变化。因为我正在LibreOffice中输入这段文本，所以这个程序是我的活动前景窗口。作为合法用户，我的活动窗口可能会有很大变化；例如，我可能会最小化LibreOffice，休息一下，去Chrome里看YouTube猫咪视频。在自动化的恶意软件分析沙箱环境中，活动窗口可能不会有太大变化。一些恶意软件变种意识到这一点，并可能利用这一特性对抗分析系统进行检测。在这个例子中，恶意软件正在检查前景窗口在五秒后是否发生了变化：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: First, the malware calls <samp class="SANS_TheSansMonoCd_W5Regular_11">GetForegroundWindow</samp>,
    which returns a handle to the current foreground window and stores it in the buffer
    at address <samp class="SANS_TheSansMonoCd_W5Regular_11">[ebx+WindowHandle]</samp>.
    Next, the malware calls the <samp class="SANS_TheSansMonoCd_W5Regular_11">Sleep</samp>
    function, which will pause the sample for five seconds. The malware makes a second
    call to <samp class="SANS_TheSansMonoCd_W5Regular_11">GetForegroundWindow</samp>
    and then compares the handle values of the two <samp class="SANS_TheSansMonoCd_W5Regular_11">GetForegroundWindow</samp>
    calls with <samp class="SANS_TheSansMonoCd_W5Regular_11">cmp dword ptr ds:[ebx+WindowHandle],
    eax</samp>. If the handles match (meaning that the foreground window hasn’t changed),
    this routine loops over again. This malware sample could continue to loop indefinitely,
    possibly avoiding analysis in an automated sandbox completely, or it could loop
    several times and then terminate itself. Either scenario presents an interesting
    challenge for a malware analysis sandbox. Fortunately, many modern sandboxes simulate
    user activity to thwart this technique. Some can even run in interactive mode,
    which allows you to directly interact with the malware inside the sandbox, also
    helping to circumvent this type of tactic.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，恶意软件调用<samp class="SANS_TheSansMonoCd_W5Regular_11">GetForegroundWindow</samp>，该函数返回当前前景窗口的句柄，并将其存储在地址<samp
    class="SANS_TheSansMonoCd_W5Regular_11">[ebx+WindowHandle]</samp>的缓冲区中。接下来，恶意软件调用<SAMP
    class="SANS_TheSansMonoCd_W5Regular_11">Sleep</samp>函数，这将暂停样本五秒钟。恶意软件第二次调用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">GetForegroundWindow</samp>，然后通过<samp class="SANS_TheSansMonoCd_W5Regular_11">cmp
    dword ptr ds:[ebx+WindowHandle], eax</samp>来比较两次<samp class="SANS_TheSansMonoCd_W5Regular_11">GetForegroundWindow</samp>调用的句柄值。如果句柄匹配（即前景窗口没有变化），该例程将再次循环。这个恶意软件样本可能会无限循环，完全避免在自动化沙箱中被分析，或者它也可能循环几次然后终止自己。无论哪种情况，都为恶意软件分析沙箱带来了有趣的挑战。幸运的是，许多现代沙箱模拟了用户活动来抵御这种技术。有些沙箱甚至可以在交互模式下运行，这使得你可以直接与沙箱中的恶意软件进行互动，从而帮助规避这种策略。
- en: 'Alternatively, a malware sample can use the <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumWindows</samp>
    function, which returns the number of open windows on the user’s desktop. Windows
    creates many window objects for various reasons, so in a normal user environment,
    this number will be fairly high. For example, I ran <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumWindows</samp>
    on my personal system and it returned a value of 97 windows! In a sandbox analysis
    environment, this number will likely be substantially lower. This code snippet
    demonstrates the use of the <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumWindows</samp>
    function:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，恶意软件样本可以使用<samp class="SANS_TheSansMonoCd_W5Regular_11">EnumWindows</samp>函数，该函数返回用户桌面上打开窗口的数量。Windows会因多种原因创建许多窗口对象，因此在正常的用户环境中，这个数字通常会很高。例如，我在我的个人系统上运行了<samp
    class="SANS_TheSansMonoCd_W5Regular_11">EnumWindows</samp>，它返回了97个窗口！在沙箱分析环境中，这个数字可能会显著较低。以下代码片段演示了<samp
    class="SANS_TheSansMonoCd_W5Regular_11">EnumWindows</samp>函数的使用：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumWindows</samp> takes a parameter
    that essentially serves as a pointer to a buffer that will store the result of
    the function call (<samp class="SANS_TheSansMonoCd_W5Regular_11">push ebx</samp>).
    After <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumWindows</samp> is called,
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">pop eax</samp> instruction will
    pop the pointer from the <samp class="SANS_TheSansMonoCd_W5Regular_11">ebx</samp>
    buffer off the stack and into <samp class="SANS_TheSansMonoCd_W5Regular_11">eax</samp>.
    The malware compares the <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumWindows</samp>
    value (now stored in <samp class="SANS_TheSansMonoCd_W5Regular_11">eax</samp>)
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">20</samp>, and if the number
    of open windows is less than or equal to this value, the sample will terminate
    itself. This sample is assuming that a malware analysis sandbox will have 20 or
    fewer windows activated at one time.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumWindows</samp> 接受一个参数，基本上作为一个指向缓冲区的指针，用于存储函数调用的结果（<samp
    class="SANS_TheSansMonoCd_W5Regular_11">push ebx</samp>）。在调用 <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumWindows</samp>
    后，<samp class="SANS_TheSansMonoCd_W5Regular_11">pop eax</samp> 指令将会从 <samp class="SANS_TheSansMonoCd_W5Regular_11">ebx</samp>
    缓冲区中弹出指针，放入 <samp class="SANS_TheSansMonoCd_W5Regular_11">eax</samp> 中。恶意软件将 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">EnumWindows</samp> 的值（现在存储在 <samp class="SANS_TheSansMonoCd_W5Regular_11">eax</samp>
    中）与 <samp class="SANS_TheSansMonoCd_W5Regular_11">20</samp> 进行比较，如果打开的窗口数量小于或等于该值，样本程序将会自我终止。这个样本假设恶意软件分析沙箱在任何时候都会有最多
    20 个窗口处于激活状态。
- en: 'Besides enumerating the number of active windows on the victim system or sensing
    whether the foreground window is changing, malware can also actively search for
    a specific application window. This is useful for two reasons. First, the malware
    sample can search for open windows running applications that are commonly run
    by typical end users: Microsoft Office products, email programs, browsers, and
    so on. If enough of these applications are open, the malware could reasonably
    assume it’s *not* running in a malware analyst’s lab. Second, the malware sample
    can look for certain malware analysis tools, similar to what I described in “Processes”
    in [Chapter 4](chapter4.xhtml). For example, the malware might search for open
    windows that contain the term *Procmon*, *Fiddler*, or *Wireshark*, typically
    by calling the function <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumWindows</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">FindWindow</samp>. As with looking
    for a certain process, it iterates through open windows and compares the title
    of each to a string, and the result can clue it in to the fact that it’s being
    analyzed.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 除了枚举受害者系统上活动窗口的数量，或者感知前景窗口是否发生变化外，恶意软件还可以主动搜索特定的应用程序窗口。这有两个原因。首先，恶意软件样本可以搜索典型用户常用的已打开应用程序窗口：Microsoft
    Office 产品、电子邮件程序、浏览器等。如果打开了足够多的这些应用程序，恶意软件可以合理地推测它*不是*在恶意软件分析员的实验室中运行。其次，恶意软件样本还可以查找某些恶意软件分析工具，类似于我在[第
    4 章](chapter4.xhtml)中“进程”部分所描述的。例如，恶意软件可能会搜索包含 *Procmon*、*Fiddler* 或 *Wireshark*
    等术语的已打开窗口，通常是通过调用 <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumWindows</samp>
    或 <samp class="SANS_TheSansMonoCd_W5Regular_11">FindWindow</samp> 函数来实现。与查找特定进程类似，它会遍历打开的窗口，并将每个窗口的标题与一个字符串进行比较，结果可以让它察觉到自己正在被分析。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Mouse and Keyboard Interaction</samp>
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">鼠标和键盘交互</samp>
- en: 'Everyday end users are almost always using their mouse to move their cursor
    around the screen, whether they’re browsing the internet, editing a document,
    or playing a video game. Some malware can detect this activity using <samp class="SANS_TheSansMonoCd_W5Regular_11">GetCursorPos</samp>,
    which returns the coordinates of the user’s mouse cursor. The following pseudocode
    shows what this might look like in action:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 日常使用者几乎总是使用鼠标在屏幕上移动光标，无论是在浏览互联网、编辑文档还是玩视频游戏。一些恶意软件可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">GetCursorPos</samp>
    来检测这一活动，该函数返回用户鼠标光标的坐标。以下伪代码展示了这种情况可能的实现方式：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: First, the malware calls the <samp class="SANS_TheSansMonoCd_W5Regular_11">GetCursorPos</samp>
    function and stores the resulting mouse cursor coordinates in the <samp class="SANS_TheSansMonoCd_W5Regular_11">CursorPos1</samp>
    buffer. Next, it calls the <samp class="SANS_TheSansMonoCd_W5Regular_11">Sleep</samp>
    function, which pauses the malware’s execution for 30 seconds, and then it calls
    <samp class="SANS_TheSansMonoCd_W5Regular_11">GetCursorPos</samp> again. Finally,
    it compares the two resulting cursor coordinate values, and if they’re the same
    (meaning the cursor hasn’t moved), the sample will terminate itself. You can probably
    see how this is an effective method for evading automated sandboxes, as the cursor
    is unlikely to move itself (unless, of course, the sandbox is designed to mimic
    a real user).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，恶意软件调用<samp class="SANS_TheSansMonoCd_W5Regular_11">GetCursorPos</samp>函数，并将得到的鼠标光标坐标存储到<samp
    class="SANS_TheSansMonoCd_W5Regular_11">CursorPos1</samp>缓冲区中。接着，它调用<samp class="SANS_TheSansMonoCd_W5Regular_11">Sleep</samp>函数，使恶意软件的执行暂停30秒，然后再次调用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">GetCursorPos</samp>。最后，它比较两个得到的光标坐标值，如果相同（即光标没有移动），样本将自行终止。你大概可以看出，这是一种有效的绕过自动沙箱的方式，因为光标不太可能自行移动（除非沙箱被设计为模仿真实用户的行为）。
- en: 'Another similar technique involves the malware waiting for certain mouse buttons
    to be pressed or a certain number of mouse clicks to occur before it executes
    its malicious code. FireEye wrote a 2012 research article, “Hot Knives Through
    Butter: Evading File-based Sandboxes,” about this particular technique being used
    by a malware family called Upclicker. To monitor these mouse actions, Upclicker
    established a *hook* on the mouse, allowing the malware to intercept and monitor
    all mouse activity and wait for certain events to occur. Here’s what this might
    look like in malware code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '另一种类似的技术是恶意软件等待特定的鼠标按钮被按下，或者等待一定次数的鼠标点击事件发生后再执行其恶意代码。FireEye于2012年撰写了一篇研究文章《Hot
    Knives Through Butter: Evading File-based Sandboxes》，讨论了这种技术被一个名为Upclicker的恶意软件家族所使用。为了监控这些鼠标操作，Upclicker在鼠标上建立了一个*钩子*，使恶意软件能够拦截并监视所有鼠标活动，等待特定事件的发生。以下是恶意软件代码可能的实现方式：'
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The malware sample first pushes the <samp class="SANS_TheSansMonoCd_W5Regular_11">jump_location</samp>
    parameter to the stack; this is where the malware will jump to when a certain
    mouse event occurs. Another parameter, <samp class="SANS_TheSansMonoCd_W5Regular_11">0E</samp>
    in hexadecimal (or 14 in decimal), tells <samp class="SANS_TheSansMonoCd_W5Regular_11">SetWindowsHookExA</samp>
    to hook mouse actions. The call to <samp class="SANS_TheSansMonoCd_W5Regular_11">SetWindowsHookExA</samp>
    tells the program to jump to the code specified in <samp class="SANS_TheSansMonoCd_W5Regular_11">jump_location</samp>
    once the victim user clicks a mouse button.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件样本首先将<samp class="SANS_TheSansMonoCd_W5Regular_11">jump_location</samp>参数推送到栈中；当特定的鼠标事件发生时，恶意软件将跳转到这个位置。另一个参数<samp
    class="SANS_TheSansMonoCd_W5Regular_11">0E</samp>（十六进制，或十进制14）告诉<samp class="SANS_TheSansMonoCd_W5Regular_11">SetWindowsHookExA</samp>来钩取鼠标操作。调用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">SetWindowsHookExA</samp>会告诉程序在受害者用户点击鼠标按钮时跳转到<samp
    class="SANS_TheSansMonoCd_W5Regular_11">jump_location</samp>指定的代码。
- en: This code is simplified for the sake of brevity. In reality, the malware would
    likely implement extra logic to take action only upon certain mouse events, such
    as a left-button click (as in the case of Upclicker). To read more about Upclicker
    and also get a good introduction to sandbox evasion, check out the FireEye report
    at [*https://<wbr>media<wbr>.blackhat<wbr>.com<wbr>/us<wbr>-13<wbr>/US<wbr>-13<wbr>-Singh<wbr>-Hot<wbr>-Knives<wbr>-Through<wbr>-Butter<wbr>-Evading<wbr>-File<wbr>-based<wbr>-Sandboxes<wbr>-WP<wbr>.pdf<wbr>*](https://media.blackhat.com/us-13/US-13-Singh-Hot-Knives-Through-Butter-Evading-File-based-Sandboxes-WP.pdf).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码为了简洁起见已做了简化。实际上，恶意软件可能会实现额外的逻辑，只在特定的鼠标事件发生时采取行动，比如左键点击（如Upclicker的情况）。想了解更多关于Upclicker的信息，并且获得一个关于沙箱规避的良好介绍，可以查看FireEye的报告，链接在这里：[*https://<wbr>media<wbr>.blackhat<wbr>.com<wbr>/us<wbr>-13<wbr>/US<wbr>-13<wbr>-Singh<wbr>-Hot<wbr>-Knives<wbr>-Through<wbr>-Butter<wbr>-Evading<wbr>-File<wbr>-based<wbr>-Sandboxes<wbr>-WP<wbr>.pdf<wbr>*](https://media.blackhat.com/us-13/US-13-Singh-Hot-Knives-Through-Butter-Evading-File-based-Sandboxes-WP.pdf)。
- en: This hooking magic doesn’t just work for the mouse. Malware can also hook the
    keyboard by passing <samp class="SANS_TheSansMonoCd_W5Regular_11">0Dh</samp> (13
    in decimal) to the <samp class="SANS_TheSansMonoCd_W5Regular_11">SetWindowsHookEx</samp>
    function instead, then waiting for a certain key to be pressed before fully executing.
    (Hooking will be discussed in more detail in [Chapters 8](chapter8.xhtml) and
    [12](chapter12.xhtml).) Alternatively, malware could also call the function <samp
    class="SANS_TheSansMonoCd_W5Regular_11">GetAsyncKeyState</samp> to monitor for
    keypresses.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这种挂钩技巧不仅适用于鼠标。恶意软件也可以通过将 <samp class="SANS_TheSansMonoCd_W5Regular_11">0Dh</samp>（十进制为13）传递给
    <samp class="SANS_TheSansMonoCd_W5Regular_11">SetWindowsHookEx</samp> 函数，来挂钩键盘，然后等待特定的按键被按下后再完全执行。（挂钩技术将在[第8章](chapter8.xhtml)和[第12章](chapter12.xhtml)中详细讨论。）另外，恶意软件也可以调用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">GetAsyncKeyState</samp> 函数来监视按键。
- en: Monitoring mouse and keyboard interactions can be a very effective method of
    detecting and bypassing an automated malware analysis sandbox. Unless the sandbox
    or malware analyst presses the specific keys or mouse buttons, the malware sample
    may look completely benign in the context of the sandbox environment.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 监控鼠标和键盘交互可以是检测并绕过自动化恶意软件分析沙盒的一个非常有效的方法。除非沙盒或恶意软件分析员按下特定的键或鼠标按钮，否则在沙盒环境下，恶意软件样本可能看起来完全无害。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*To simulate a real end-user environment, make your analysis VMs and sandboxes
    look as much like a real user as possible. Changing your wallpaper and visiting
    some websites (to populate your cookies and cache directories) can go a long way.
    Even opening additional windows and moving the mouse around the screen may help
    avoid some of these detection techniques, even if you feel a bit silly doing it.*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*为了模拟真实的终端用户环境，让你的分析虚拟机和沙盒尽可能像真实用户一样。更改桌面背景并访问一些网站（以填充你的 cookies 和缓存目录）可以起到很大作用。甚至打开额外的窗口并在屏幕上移动鼠标，也可能帮助避免一些检测技术，即使你觉得这样做有点傻。*'
- en: <samp class="SANS_Futura_Std_Bold_B_11">System Uptime</samp>
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">系统运行时间</samp>
- en: '*System uptime* is the length of time the system has been powered on, and it
    can be a great indicator to malware that it’s in an analysis environment. A typical
    end-user device will likely be powered on for hours, if not days, at a time. Servers
    may be powered on for months or years without a reboot. Since malware analysts
    typically boot up their VMs and sandboxes to analyze a malware sample on demand,
    a short system uptime can be a big hint that the system is an analysis machine.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*系统运行时间* 是指系统已经开机的时间长度，它可以是恶意软件判断自己是否处于分析环境中的一个重要指标。一个典型的终端用户设备通常会持续开机数小时，甚至数天。服务器可能会在没有重启的情况下开机数月或数年。由于恶意软件分析员通常会根据需要启动虚拟机和沙盒来分析恶意软件样本，因此短时间的系统运行时间可能是一个明显的提示，表明系统是一个分析机器。'
- en: 'There are multiple ways to check for system uptime, via both the Windows API
    and other helper commands. Perhaps the most common method is the <samp class="SANS_TheSansMonoCd_W5Regular_11">GetTickCount</samp>
    Windows API function, which returns the system uptime in milliseconds. A *tick*
    is created by the processor clock, which is responsible for keeping time and coordinating
    instructions. When a system is shut down or rebooted, <samp class="SANS_TheSansMonoCd_W5Regular_11">GetTickCount</samp>
    essentially resets to 0\. The following code uses <samp class="SANS_TheSansMonoCd_W5Regular_11">GetTickCount</samp>
    to see if the system has been powered on for 20 minutes:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 检查系统运行时间有多种方式，可以通过 Windows API 或其他辅助命令实现。最常见的方法可能是 <samp class="SANS_TheSansMonoCd_W5Regular_11">GetTickCount</samp>
    Windows API 函数，它以毫秒为单位返回系统的运行时间。一个 *tick* 是由处理器时钟产生的，时钟负责保持时间并协调指令。当系统关闭或重启时，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">GetTickCount</samp> 基本上会重置为 0。以下代码使用 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">GetTickCount</samp> 来查看系统是否已开机 20 分钟：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The sample first moves <samp class="SANS_TheSansMonoCd_W5Regular_11">124F80</samp>
    in hex (1200000 in decimal) into the <samp class="SANS_TheSansMonoCd_W5Regular_11">ebx</samp>
    register, representing 1,200,000 milliseconds, or 20 minutes. Then, it calls <samp
    class="SANS_TheSansMonoCd_W5Regular_11">GetTickCount</samp> and compares the returned
    tick count value to the value in <samp class="SANS_TheSansMonoCd_W5Regular_11">ebx</samp>.
    If the value from <samp class="SANS_TheSansMonoCd_W5Regular_11">GetTickCount</samp>
    is below the <samp class="SANS_TheSansMonoCd_W5Regular_11">ebx</samp> value, meaning
    the system has been powered on for less than 20 minutes, the malware sample terminates
    itself.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 该样本首先将十六进制的 <samp class="SANS_TheSansMonoCd_W5Regular_11">124F80</samp>（十进制的
    1200000）存入 <samp class="SANS_TheSansMonoCd_W5Regular_11">ebx</samp> 寄存器，代表 1,200,000
    毫秒，即 20 分钟。然后，它调用 <samp class="SANS_TheSansMonoCd_W5Regular_11">GetTickCount</samp>
    并将返回的计时值与 <samp class="SANS_TheSansMonoCd_W5Regular_11">ebx</samp> 中的值进行比较。如果
    <samp class="SANS_TheSansMonoCd_W5Regular_11">GetTickCount</samp> 返回的值小于 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">ebx</samp> 的值，意味着系统开机时间少于 20 分钟，则恶意软件样本会终止自身。
- en: Malware may also use the Windows command line to get the system uptime. Options
    include the <samp class="SANS_TheSansMonoCd_W5Regular_11">sysinfo</samp> command,
    which returns a list of information about the system, including the uptime; <samp
    class="SANS_TheSansMonoCd_W5Regular_11">uptime.exe</samp>, a binary included with
    most versions of Windows; and the <samp class="SANS_TheSansMonoCd_W5Regular_11">net
    statistics workstation</samp> command. Finally, malware can invoke WMIC to return
    the system uptime using the command <samp class="SANS_TheSansMonoCd_W5Regular_11">wmic
    os get lastbootuptime</samp>.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件也可能使用 Windows 命令行获取系统的正常运行时间。可选命令包括 <samp class="SANS_TheSansMonoCd_W5Regular_11">sysinfo</samp>
    命令，它返回关于系统的各种信息，包括正常运行时间；<samp class="SANS_TheSansMonoCd_W5Regular_11">uptime.exe</samp>，这是大多数版本的
    Windows 自带的一个二进制文件；以及 <samp class="SANS_TheSansMonoCd_W5Regular_11">net statistics
    workstation</samp> 命令。最后，恶意软件还可以通过调用 WMIC 来获取系统的正常运行时间，命令是 <samp class="SANS_TheSansMonoCd_W5Regular_11">wmic
    os get lastbootuptime</samp>。
- en: One final important note here is that <samp class="SANS_TheSansMonoCd_W5Regular_11">GetTickCount</samp>
    and the other methods mentioned are often used in both benign and malicious applications,
    and not just for exposing analysis environments and sandboxes. Just because a
    malware sample is inspecting the system uptime doesn’t mean it’s acting evasively,
    but you should treat the behavior as a red flag.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的最后一个重要提示是，<samp class="SANS_TheSansMonoCd_W5Regular_11">GetTickCount</samp>及其他方法常用于良性和恶意应用程序中，而不仅仅是用于暴露分析环境和沙箱。仅仅因为恶意软件样本正在检查系统的正常运行时间，并不意味着它在采取逃避行为，但你应该将这种行为视为一个警示信号。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">总结</samp>
- en: In this chapter, we covered some creative and sneaky ways in which malware can
    enumerate the environment and look for evidence of actual user activity. You can
    thwart many of these user detection techniques simply by designing your analysis
    environment to make it look legitimate to malware. Some of these changes, such
    as changing the default Windows wallpaper and ensuring you have some items in
    your browsing history, are simple to implement. We’ll discuss other ways to thwart
    detection techniques in [Appendix A](appendix-A.xhtml). Note also that some advanced
    sandboxes have built-in protections against many of these techniques.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了一些恶意软件枚举环境并寻找实际用户活动证据的创新且狡猾的方法。通过设计一个看起来对恶意软件合法的分析环境，你可以有效阻止这些用户检测技术中的许多。诸如更改默认的
    Windows 桌面背景并确保浏览历史中有一些项目等变化，都是容易实施的。我们将在[附录 A](appendix-A.xhtml)中讨论其他阻止检测技术的方法。还要注意，一些高级沙箱已内置防护措施，能抵御许多这些技术。
- en: In the next chapter, we’ll look at how evasive malware can enumerate system
    hardware and network device information to detect a VM analysis environment.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何通过逃避型恶意软件枚举系统硬件和网络设备信息，以检测虚拟机分析环境。
