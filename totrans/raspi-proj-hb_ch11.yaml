- en: '**11'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Gas and Smoke Alarm**
  prefs: []
  type: TYPE_NORMAL
- en: In this project, you’ll build a gas and smoke alarm using an MQ-2 gas and smoke
    sensor and a piezo buzzer. Every time the sensor detects gas or smoke in the atmosphere
    above a certain threshold, the buzzer will sound.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0146-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: MQ-2 gas and smoke sensor
  prefs: []
  type: TYPE_NORMAL
- en: MCP 3008 chip
  prefs: []
  type: TYPE_NORMAL
- en: Piezo buzzer
  prefs: []
  type: TYPE_NORMAL
- en: 5 mm LED
  prefs: []
  type: TYPE_NORMAL
- en: 330 Ω resistor
  prefs: []
  type: TYPE_NORMAL
- en: Pushbut ton
  prefs: []
  type: TYPE_NORMAL
- en: Lighter
  prefs: []
  type: TYPE_NORMAL
- en: Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: '**INTRODUCING THE MQ-2 GAS AND SMOKE SENSOR**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The MQ-2 gas and smoke sensor is sensitive to smoke and the following flammable
    gases: propane, butane, methane, alcohol, and hydrogen. [Figure 11-1](ch11.xhtml#ch11fig1)
    shows the sensor’s front and back views.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0147-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 11-1:** The MQ-2 gas and smoke sensor, front and back views'
  prefs: []
  type: TYPE_NORMAL
- en: The MQ-2 has two ways of outputting gas levels. The first is to read the gas
    concentration in the atmosphere and output it as an analog signal from the analog
    output pin AO, where the higher the gas levels, the higher the output voltage.
  prefs: []
  type: TYPE_NORMAL
- en: The second is to set a certain threshold and then output a HIGH signal from
    the digital output pin DO if the gas levels are above that threshold, and a LOW
    signal if the gas levels are below that threshold. The MQ-2 has a potentiometer
    built into the back that you can adjust with a screwdriver to change this threshold.
  prefs: []
  type: TYPE_NORMAL
- en: The sensor also has a power LED in the back that indicates if the sensor is
    on, and a digital output LED that lights up when detected gas levels are above
    the set threshold.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll be reading the analog signal, which provides a quantitative measure of
    the gas levels, allowing you to better define the threshold value above which
    you want the buzzer to warn you of higher gas levels. Remember that the Pi can
    read only digital signals, so to read the analog signals with the Pi, you’ll use
    an analog-to-digital converter module (MCP3008 chip), which was first introduced
    in [Project 3](ch03.xhtml#ch03).
  prefs: []
  type: TYPE_NORMAL
- en: '**INTRODUCING THE PIEZO BUZZER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The piezo buzzer sounds the alarm when it receives a digital signal from the
    Pi. The buzzer you’ll use, shown in [Figure 11-2](ch11.xhtml#ch11fig2), is about
    as simple as it comes.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0148-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 11-2:** Piezo buzzer'
  prefs: []
  type: TYPE_NORMAL
- en: The buzzer’s case contains a disc that vibrates at a certain frequency when
    voltage is sent to it. Wiring the piezo buzzer is simple. All you need to do is
    connect one wire to your Pi’s GND pin and another to a GPIO pin.
  prefs: []
  type: TYPE_NORMAL
- en: '**WIRING THE CIRCUIT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To build the smoke and gas detector alarm circuit, you need to connect an LED
    and a pushbutton to the Pi; you should already know how to wire these from previous
    projects. You also need to connect the piezo buzzer and the MQ-2 sensor to the
    Pi—the latter will connect through the MCP3008 chip). Follow these instructions,
    using [Figure 11-3](ch11.xhtml#ch11fig3) as a reference.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0148-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 11-3:** Smoke and gas detector circuit diagram'
  prefs: []
  type: TYPE_NORMAL
- en: Connect GND to the blue breadboard rail and 3.3 V to the red rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the MCP3008 chip in the middle of the breadboard so that the legs run
    parallel on either side of the center divide, as shown in [Figure 11-3](ch11.xhtml#ch11fig3),
    and wire it according to the following table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **MCP3008** | **CONNECT TO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 1 | MQ-2 AO pin |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 9 | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 10 | GPIO 8 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 11 | GPIO 10 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 12 | GPIO 9 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 13 | GPIO 11 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 14 | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 15 | 3.3 V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 16 | 3.3 V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Remember that when the half-circle on the MCP3008 is at the top, pin 1 is the
    top pin on the left side; see [“Analog-to-Digital Converters”](ch03.xhtml#lev41)
    on [page 55](ch03.xhtml#page_55) for a complete MCP3008 pinout.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Place the MQ-2 gas and smoke sensor in the breadboard and wire it as indicated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **MQ-2 SENSOR** | **CONNECT TO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| VCC | 5 V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| GND | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| DO | No connection |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| AO | MCP3008 pin 1 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Insert an LED into the breadboard. Connect the positive lead to GPIO 17 through
    a 330 Ω resistor and connect the negative lead to the GND rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the pushbutton in the middle of the breadboard, with two leads on either
    side of the center divide. Connect the bottom-right lead to GND power rail and
    the bottom-left lead to GPIO 2, making sure both connected leads are on the same
    side of the divide.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the buzzer into the breadboard and connect the black wire to GND and
    the red wire to GPIO 27.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With your circuit wired up, it’s time to upload some code.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE SCRIPT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open **Python 3 (IDLE)** and go to **File** ▸ **New File** to create a new
    script. Copy the code in [Listing 11-1](ch11.xhtml#ch11list1) to the Python Editor
    and save the script as *smoke_detector.py* inside the *Sensors* folder. (remember
    that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 11-1:** The smoke and gas detector script'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: First, you import the `LED`, `Button`, `Buzzer`, and `MCP3008` classes from
    the gpiozero library and the `sleep` function from the time library ➊; then, you
    create `gpiozero` objects to refer to the LED, button, MCP3008 (MQ-2 gas sensor),
    and buzzer ➋. Next, you create a `gas_sensor_status` variable that will indicate
    whether the smoke sensor is armed ➌; the sensor is armed if this variable is `True`
    and not armed if it’s `False`. You need to set a `threshold` value so that the
    buzzer beeps only when the gas levels are above this threshold ➍. We’ll cover
    finding out your threshold value in a moment.
  prefs: []
  type: TYPE_NORMAL
- en: The `arm_gas_sensor()` function ➎ arms and disarms the sensor by switching the
    value in the `gas_sensor_status` variable to the opposite of whatever it currently
    holds, whether that’s `True` or `False`, when the function is called. At ➏, you
    set the function to call when the pushbutton is pressed so that you can arm and
    disarm the sensor manually. You also set an LED to turn on when the sensor is
    armed; that way, you can visually identify its status.
  prefs: []
  type: TYPE_NORMAL
- en: The final block of code is a `while` loop ➐ that continuously checks whether
    the sensor is armed and whether the gas levels are above the threshold. If the
    sensor is armed and the gas levels are above the threshold value, the buzzer beeps
    via the `buzzer.beep()` function. The final `buzzer.off()` function stops the
    buzzer.
  prefs: []
  type: TYPE_NORMAL
- en: '**Setting the Threshold Value**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To accurately set a safe gas-level threshold, you first need to calibrate your
    sensor to your environment. That means you need to measure your gas levels when
    there is no gas present, and then set your threshold to a value slightly above
    that. First, find out what the gas levels of your environment usually are:'
  prefs: []
  type: TYPE_NORMAL
- en: Uncomment the line at ➑, and then save and run the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see the `gas_sensor` values displayed on the Python shell. Those
    are the values read when there’s no gas or smoke in the sensor’s range. Your `threshold`
    value should be slightly higher than this. For example, if your default value
    is `0.07`, we recommend setting your threshold to `0.1`, but it depends on your
    desired sensitivity level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Grab a lighter and press the trigger (without igniting the lighter). Hold the
    lighter next to the sensor to release some gas. The `gas_sensor` value displayed
    on the Python shell should increase. Your `threshold` value should be lower than
    the maximum value you got when exposing the sensor to gas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**WARNING**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Always be careful when using lighters and gas; don’t hold the gas trigger
    down for too long, and do not ignite the lighter when gas has been released into
    the air.*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With the values obtained from the last two steps, tune the `threshold` value
    ➍ somewhere between these two so that it’s neither too sensitive nor too unresponsive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Comment out the `print` statement ➑ and save the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Running the Script**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. Press the
    pushbutton to arm the sensor. The red LED should light up. Then test it out by
    using a lighter to release some gas next to the sensor until the buzzer beeps.
  prefs: []
  type: TYPE_NORMAL
- en: '**WARNING**'
  prefs: []
  type: TYPE_NORMAL
- en: '*This gas and smoke alarm should not be used to replace an off-the-shelf smoke
    detector.*'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You now have a gas and smoke detector alarm to monitor your
    house and warn you of fire!
  prefs: []
  type: TYPE_NORMAL
- en: '**TAKING IT FURTHER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The aim of this project was to show you how to read sensors that output analog
    signals. Now you can add features to this project. For example, you can edit the
    script to send an email when gas or smoke is above the threshold value, as we
    did in [Project 10](ch10.xhtml#ch10).
  prefs: []
  type: TYPE_NORMAL
