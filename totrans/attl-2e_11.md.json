["```\n#include <locale.h>\n\nchar *setlocale(int category, const char *locale);\nstruct lconv *localeconv(void);\n```", "```\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <limits.h>\n#include <locale.h>\n\nstatic void print_grouping(const char *prefix, const char *grouping)\n{\n    const char *cg;\n    printf(\"%s\", prefix);\n    for (cg = grouping; *cg && *cg != CHAR_MAX; cg++)\n        printf(\"%c %d\", cg == grouping ? ':' : ',', *cg);\n    printf(\"%s\\n\", *cg == 0 ? \" (repeated)\" : \"\");\n}\n\nstatic void print_monetary(bool p_cs_precedes, bool p_sep_by_space,\n        bool n_cs_precedes, bool n_sep_by_space,\n        int p_sign_posn, int n_sign_posn)\n{\n    static const char * const sp_str[] =\n    {\n        \"surround symbol and quantity with parentheses\",\n        \"before quantity and symbol\",\n        \"after quantity and symbol\",\n        \"right before symbol\",\n        \"right after symbol\"\n    };\n printf(\"     Symbol comes %s a positive (or zero) amount\\n\",\n             p_cs_precedes ? \"BEFORE\" : \"AFTER\");\n    printf(\"     Symbol %s separated from a positive (or zero) amount by a space\\n\",\n             p_sep_by_space ? \"IS\" : \"is NOT\");\n    printf(\"     Symbol comes %s a negative amount\\n\",\n             n_cs_precedes ? \"BEFORE\" : \"AFTER\");\n    printf(\"     Symbol %s separated from a negative amount by a space\\n\",\n             n_sep_by_space ? \"IS\" : \"is NOT\");\n    printf(\"     Positive (or zero) amount sign position: %s\\n\",\n             sp_str[p_sign_posn == CHAR_MAX? 4: p_sign_posn]);\n    printf(\"     Negative amount sign position: %s\\n\",\n             sp_str[n_sign_posn == CHAR_MAX? 4: n_sign_posn]);\n}\n\nint main(void)\n{\n    struct lconv *lc;\n    char *isym;\n\n    setlocale(LC_ALL, \"\");    // enable environment locale\n    lc = localeconv();        // obtain locale attributes\n\n    printf(\"Numeric:\\n\");\n    printf(\"  Decimal point: [%s]\\n\", lc->decimal_point);\n    printf(\"  Thousands separator: [%s]\\n\", lc->thousands_sep);\n\n    print_grouping(\"    Grouping\", lc->grouping);\n\n    printf(\"\\nMonetary:\\n\");\n    printf(\"  Decimal point: [%s]\\n\", lc->mon_decimal_point);\n    printf(\"  Thousands separator: [%s]\\n\", lc->mon_thousands_sep);\n\n    print_grouping(\"    Grouping\", lc->mon_grouping);\n\n    printf(\"    Positive amount sign: [%s]\\n\", lc->positive_sign);\n    printf(\"    Negative amount sign: [%s]\\n\", lc->negative_sign);\n    printf(\"    Local:\\n\");\n    printf(\"      Symbol: [%s]\\n\", lc->currency_symbol);\n    printf(\"      Fractional digits: %d\\n\", (int)lc->frac_digits);\n\n    print_monetary(lc->p_cs_precedes, lc->p_sep_by_space,\n            lc->n_cs_precedes, lc->n_sep_by_space,\n            lc->p_sign_posn, lc->n_sign_posn);\n\n    printf(\"  International:\\n\");\n    isym = lc->int_curr_symbol;\n    printf(\"    Symbol (ISO 4217): [%3.3s], separator: [%s]\\n\",\n            isym, strlen(isym) > 3 ? isym + 3 : \"\");\n    printf(\"    Fractional digits: %d\\n\", (int)lc->int_frac_digits);\n\n#ifdef __USE_ISOC99\n    print_monetary(lc->int_p_cs_precedes, lc->int_p_sep_by_space,\n            lc->int_n_cs_precedes, lc->int_n_sep_by_space,\n            lc->int_p_sign_posn, lc->int_n_sign_posn);\n#endif\n    return 0;\n}\n```", "```\n$ gcc lc.c -o lc\n$ ./lc\nNumeric:\n  Decimal point: [.]\n  Thousands separator: [,]\n  Grouping: 3, 3 (repeated)\n\nMonetary:\n  Decimal point: [.]\n  Thousands separator: [,]\n  Grouping: 3, 3 (repeated)\n  Positive amount sign: []\n  Negative amount sign: [-]\n  Local:\n    Symbol: [$]\n    Fractional digits: 2\n    Symbol comes BEFORE a positive (or zero) amount\n    Symbol is NOT separated from a positive (or zero) amount by a space\n    Symbol comes BEFORE a negative amount\n Symbol is NOT separated from a negative amount by a space\n    Positive (or zero) amount sign position: before quantity and symbol\n    Negative amount sign position: before quantity and symbol\n  International:\n    Symbol (ISO 4217): [USD], separator: [ ]\n    Fractional digits: 2\n    Symbol comes BEFORE a positive (or zero) amount\n    Symbol IS separated from a positive amount by a space\n    Symbol comes BEFORE a negative amount\n    Symbol IS separated from a negative amount by a space\n    Positive (or zero) amount sign position: before quantity and symbol\n    Negative amount sign position: before quantity and symbol\n$\n```", "```\n$ locale -a\nC\nC.UTF-8\nen_AG\nen_AG.utf8\nen_AU.utf8\nen_BW.utf8\nen_CA.utf8\nen_DK.utf8\nen_GB.utf8\nen_HK.utf8\nen_US.utf8\nen_ZA.utf8\nen_ZM\nen_ZM.utf8\nen_ZW.utf8\nja_JP.utf8\nPOSIX\nsv_SE.utf8\n$\n```", "```\n$ cat /usr/share/i18n/SUPPORTED\naa_DJ.UTF-8 UTF-8\naa_DJ ISO-8859-1\naa_ER UTF-8\n--snip--\nzh_TW BIG5\nzu_ZA.UTF-8 UTF-8\nzu_ZA ISO-8859-1\n$\n```", "```\nlanguage[_territory][.codeset][@modifier]\n```", "```\n$ cat /usr/share/i18n/SUPPORTED | grep sv_SE\nsv_SE.UTF-8 UTF-8\nsv_SE ISO-8859-1\nsv_SE.ISO-8859-15 ISO-8859-15\n$\n$ echo \"sv_SE.UTF-8 UTF-8\" | sudo tee -a /var/lib/locales/supported.d/sv\n[sudo] password for jcalcote: *****\nsv_SE.UTF-8 UTF-8\n$ sudo locale-gen\nGenerating locales (this might take a while)...\n  en_AG.UTF-8... done\n--snip--\n  en_ZW.UTF-8... done\n  a_JP.UTF-8... done\n  sv_SE.UTF-8... done\nGeneration complete.\n$\n$ locale -a\nC\nC.UTF-8\nen_AG\n--snip--\nja_JP.utf8\nPOSIX\nsv_SE.utf8\n$\n```", "```\n$ localedef --list-archive\naa_DJ\naa_DJ.iso88591\naa_DJ.utf8\n--snip--\nsv_SE.utf8\n--snip--\nzu_ZA\nzu_ZA.iso88591\nzu_ZA.utf8\n$\n$ sudo localedef -i sv_SE -f UTF-8 sv_SE.UTF-8\n$\n$ locale -a | grep sv_SE.utf8\nsv_SE.utf8\n$\n```", "```\n$ LC_ALL=sv_SE.utf8 ./lc\nNumeric:\n  Decimal point: [,]\n  Thousands separator: [ ]\n  Grouping: 3, 3 (repeated)\n\nMonetary:\n  Decimal point: [,]\n  Thousands separator: [ ]\n  Grouping: 3, 3 (repeated)\n  Positive amount sign: []\n  Negative amount sign: [-]\n  Local:\n    Symbol: [kr]\n    Fractional digits: 2\n    Symbol comes AFTER a positive (or zero) amount\n    Symbol IS separated from positive (or zero) amount by a space\n    Symbol comes AFTER a negative value\n    Symbol IS separated from negative value by a space\n    Positive (or zero) amount sign position: before quantity and symbol\n    Negative amount sign position: before quantity and symbol\n  International:\n    Symbol (ISO 4217): [SEK], separator: [ ]\n    Fractional digits: 2\n    Symbol comes AFTER a positive value\n    Symbol IS separated from positive value by a space\n    Symbol comes AFTER a negative value\n    Symbol IS separated from negative value by a space\n    Positive (or zero) amount sign position: before quantity and symbol\n    Negative amount sign position: before quantity and symbol\n$\n```", "```\n#include <time.h>\n\nsize_t strftime(char *s, size_t max, const char *format, const struct tm *tm);\n```", "```\n#include <stdio.h>\n#include <locale.h>\n#include <time.h>\n\nint main(void)\n{\n    time_t t = time(0);\n    char buf[128];\n\n    setlocale(LC_ALL, \"\");  // enable environmental locale\n\n    strftime(buf, sizeof buf, \"%c\", gmtime(&t));\n    printf(\"Calendar time: %s\\n\", buf);\n    return 0;\n}\n```", "```\n$ gcc td.c -o td\n$ LC_ALL=C ./td\nCalendar time: Tue Jul    2 03:57:56 2019\n$ ./td\nCalendar time: Tue 02 Jul 2019 03:57:58 AM GMT\n$ LC_ALL=sv_SE.utf8 ./td\nCalendar time: tis    2 jul 2019 03:57:59\n$\n```", "```\n#include <stdio.h>\n#include <stdlib.h>\n#include <locale.h>\n#include <string.h>\n\n#define ECOUNT(x) (sizeof(x)/sizeof(*(x)))\n\nint lex_count = 0;\nint loc_count = 0;\n\nstatic int compare_lex(const void *a, const void *b)\n{\n    lex_count++;\n    return strcmp(*(const char **)a, *(const char **)b);\n}\nstatic int compare_loc(const void *a, const void *b)\n{\n    loc_count++;\n    return strcoll(*(const char **)a, *(const char **)b);\n}\n\nstatic void print_list(const char * const *list, size_t sz)\n{\n    for (int i = 0; i < sz; i++)\n        printf(\"%s%s\", i ? \", \" : \"\", list[i]);\n    printf(\"\\n\");\n}\n\nint main()\n{\n    const char *words[] = {\"rana\", \"rastrillo\", \"radio\", \"rápido\", \"ráfaga\"};\n\n    setlocale(LC_ALL, \"\");    // enable environment locale\n\n    printf(\"Unsorted                : \");\n    print_list(words, ECOUNT(words));\n\n    qsort(words, ECOUNT(words), sizeof *words, &compare_lex);\n\n    printf(\"Lex (strcmp)        : \");\n    print_list(words, ECOUNT(words));\n\n    qsort(words, ECOUNT(words), sizeof *words, &compare_loc);\n\n    printf(\"Locale (strcoll): \");\n    print_list(words, ECOUNT(words));\n\n    return 0;\n}\n```", "```\n$ gcc sc.c -o sc\n$ ./sc\nUnsorted        : rana, rastrillo, radio, rápido, ráfaga,\nLex (strcmp)    : radio, rana, rastrillo, ráfaga, rápido,\nLocale (strcoll): radio, ráfaga, rana, rápido, rastrillo,\n$ LC_ALL=es_ES.utf8 ./sc\nUnsorted        : rana, rastrillo, radio, rápido, ráfaga,\nLex (strcmp)    : radio, rana, rastrillo, ráfaga, rápido,\nLocale (strcoll): radio, ráfaga, rana, rápido, rastrillo,\n$ LC_ALL=ja_JP.utf8 ./sc\nUnsorted        : rana, rastrillo, radio, rápido, ráfaga,\nLex (strcmp)    : radio, rana, rastrillo, ráfaga, rápido,\nLocale (strcoll): radio, rana, rastrillo, ráfaga, rápido,\n$\n```", "```\n   #include <stdio.h>\n   #include <stdlib.h>\n   #include <locale.h>\n   #include <string.h>\n\n   #define ECOUNT(x) (sizeof(x)/sizeof(*(x)))\n\n➊ typedef struct element\n   {\n       const char *input;\n const char *xfrmd;\n   } element;\n\n   static int compare(const void *a, const void *b)\n   {\n       const element *e1 = a;\n       const element *e2 = b;\n    ➋ return strcmp(e1->xfrmd, e2->xfrmd);\n   }\n\n   static void print_list(const element *list, size_t sz)\n   {\n       for (int i = 0; i < sz; i++)\n        ➌ printf(\"%s, \", list[i].input);\n       printf(\"\\n\");\n   }\n\n   int main()\n   {\n       element words[] =\n       {\n           {\"rana\"}, {\"rastrillo\"}, {\"radio\"}, {\"rápido\"}, {\"ráfaga\"}\n       };\n\n       setlocale(LC_ALL, \"\");   // enable environment locale\n\n       // point each xfrmd field at corresponding input field\n       for (int i = 0; i < ECOUNT(words); i++)\n        ➍ words[i].xfrmd = words[i].input;\n\n       printf(\"Unsorted            : \");\n       print_list(words, ECOUNT(words));\n\n       qsort(words, ECOUNT(words), sizeof *words, &compare);\n\n       printf(\"Lex (strcmp)        : \");\n       print_list(words, ECOUNT(words));\n\n       for (int i = 0; i < ECOUNT(words); i++)\n       {\n           char buf[128];\n           strxfrm(buf, words[i].input, sizeof buf);\n        ➎ words[i].xfrmd = strdup(buf);\n       }\n\n       qsort(words, ECOUNT(words), sizeof *words, &compare);\n\n       printf(\"Locale (strxfrm/cmp): \");\n       print_list(words, ECOUNT(words));\n\n       return 0;\n}\n```", "```\n$ gcc sx.c -o sx\n$ ./sx\nUnsorted            : rana, rastrillo, radio, rápido, ráfaga,\nLex (strcmp)        : radio, rana, rastrillo, ráfaga, rápido,\nLocale (strxfrm/cmp): radio, ráfaga, rana, rápido, rastrillo,\n$ LC_ALL=es_ES.utf8 ./sx\nUnsorted            : rana, rastrillo, radio, rápido, ráfaga,\nLex (strcmp)        : radio, rana, rastrillo, ráfaga, rápido,\nLocale (strxfrm/cmp): radio, ráfaga, rana, rápido, rastrillo,\n$ LC_ALL=ja_JP.utf8 ./sx\nUnsorted            : rana, rastrillo, radio, rápido, ráfaga,\nLex (strcmp)        : radio, rana, rastrillo, ráfaga, rápido,\nLocale (strxfrm/cmp): radio, rana, rastrillo, ráfaga, rápido,\n$\n```", "```\n#include <stdio.h>\n#include <locale.h>\n#include <wctype.h>\n#include <wchar.h>\n\nint main()\n{\n    const wchar_t *orig = L\"BAÑO\";\n    wchar_t xfrm[64];\n\n    setlocale(LC_ALL, \"\");  // enable environment locale\n\n    int i = 0;\n    while (i < wcslen(orig))\n    {\n        xfrm[i] = towlower(orig[i]);\n        i++;\n    }\n xfrm[i] = 0;\n        printf(\"orig: %ls, xfrm: %ls\\n\", orig, xfrm);\n\n        return 0;\n}\n```", "```\n$ gcc ct.c -o ct\n$ ./ct\norig: BAÑO, xfrm: baño\n$\n```", "```\n#include <monetary.h>\n\nssize_t strfmon(char *s, size_t max, const char *format, ...);\n```", "```\n#include <stdio.h>\n#include <locale.h>\n#include <monetary.h>\n\nint main()\n{\n    double amount = 12654.376;\n    char buf[256];\n\n    setlocale(LC_ALL, \"\");  // enable environment locale\n\n    strfmon(buf, sizeof buf, \"Local: %n, Int'l: %i, Decimal: %!6.2n\",\n            amount, amount, amount);\n    printf(\"%s\\n\", buf);\n    return 0;\n}\n```", "```\n$ gcc amount.c -o amount\n$ LC_ALL=C ./amount\nLocal: 12654.38, Int'l: 12654.38, Decimal: 12654.38\n$ ./amount\nLocal: $12,654.38, Int'l: USD 12,654.38, Decimal: 12,654.38\n$ LC_ALL=sv_SE.utf8 ./amount\nLocal: 12 654,38 kr, Int'l: 12 654,38 SEK, Decimal: 12 654,38\n$ LC_ALL=ja_JP.utf8 ./amount\nLocal: ¥12,654, Int'l: JPY 12,654, Decimal: 12,654.38\n$\n```", "```\n#include <langinfo.h>\n\nchar *nl_langinfo(nl_item item);\n```", "```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n#include <limits.h>\n#include <stdint.h>\n#include <locale.h>\n#include <langinfo.h>\n\nstatic void print_grouping(const char *prefix, const char *grouping)\n{\n    const char *cg;\n    printf(\"%s\", prefix);\n    for (cg = grouping; *cg && *cg != CHAR_MAX; cg++)\n        printf(\"%c %d\", cg == grouping ? ':' : ',', *cg);\n    printf(\"%s\\n\", *cg == 0 ? \" (repeated)\" : \"\");\n}\n\nstatic void print_monetary(bool p_cs_precedes, bool p_sep_by_space,\n        bool n_cs_precedes, bool n_sep_by_space,\n        int p_sign_posn, int n_sign_posn)\n{\n    static const char * const sp_str[] =\n    {\n        \"surround symbol and quantity with parentheses\",\n        \"before quantity and symbol\",\n        \"after quantity and symbol\",\n        \"right before symbol\",\n        \"right after symbol\"\n    };\n    printf(\"    Symbol comes %s a positive (or zero) amount\\n\",\n            p_cs_precedes ? \"BEFORE\" : \"AFTER\");\n    printf(\"    Symbol %s separated from a positive (or zero) amount by a space\\n\",\n            p_sep_by_space ? \"IS\" : \"is NOT\");\n    printf(\"    Symbol comes %s a negative amount\\n\",\n            n_cs_precedes ? \"BEFORE\" : \"AFTER\");\n    printf(\"    Symbol %s separated from a negative amount by a space\\n\",\n            n_sep_by_space ? \"IS\" : \"is NOT\");\n    printf(\"    Positive (or zero) amount sign position: %s\\n\",\n            sp_str[p_sign_posn == CHAR_MAX? 4: p_sign_posn]);\n    printf(\"    Negative amount sign position: %s\\n\",\n            sp_str[n_sign_posn == CHAR_MAX? 4: n_sign_posn]);\n}\n#ifdef OUTER_LIMITS\n\n#define ECOUNT(x) (sizeof(x)/sizeof(*(x)))\n\nstatic const char *_get_measurement_system(int system_id)\n{\n    static const char * const measurement_systems[] = { \"Metric\", \"English\" };\n    int idx = system_id - 1;\n    return idx < ECOUNT(measurement_systems)\n            ? measurement_systems[idx] : \"unknown\";\n}\n\n#endif\n\nint main(void)\n{\n    char *isym;\n\n    setlocale(LC_ALL, \"\");\n\n    printf(\"Numeric\\n\");\n    printf(\"  Decimal: [%s]\\n\", nl_langinfo(DECIMAL_POINT));\n    printf(\"  Thousands separator: [%s]\\n\", nl_langinfo(THOUSANDS_SEP));\n\n    print_grouping(\"  Grouping\", nl_langinfo(GROUPING));\n\n    printf(\"\\nMonetary\\n\");\n    printf(\"  Decimal point: [%s]\\n\", nl_langinfo(MON_DECIMAL_POINT));\n    printf(\"  Thousands separator: [%s]\\n\", nl_langinfo(MON_THOUSANDS_SEP));\n    printf(\"  Grouping\");\n\n    print_grouping(\"  Grouping\", nl_langinfo(MON_GROUPING));\n\n    printf(\"  Positive amount sign: [%s]\\n\", nl_langinfo(POSITIVE_SIGN));\n    printf(\"  Negative amount sign: [%s]\\n\", nl_langinfo(NEGATIVE_SIGN));\n    printf(\"  Local:\\n\");\n    printf(\"    Symbol: [%s]\\n\", nl_langinfo(CURRENCY_SYMBOL));\n    printf(\"    Fractional digits: %d\\n\", *nl_langinfo(FRAC_DIGITS));\n\n    print_monetary(*nl_langinfo(P_CS_PRECEDES), *nl_langinfo(P_SEP_BY_SPACE),\n            *nl_langinfo(N_CS_PRECEDES), *nl_langinfo(N_SEP_BY_SPACE),\n            *nl_langinfo(P_SIGN_POSN), *nl_langinfo(N_SIGN_POSN));\n\n    printf(\"  International:\\n\");\n    isym = nl_langinfo(INT_CURR_SYMBOL);\n    printf(\"    Symbol (ISO 4217): [%3.3s], separator: [%s]\\n\",\n           isym, strlen(isym) > 3 ? isym + 3 : \"\");\n    printf(\"    Fractional digits: %d\\n\", *nl_langinfo(INT_FRAC_DIGITS));\n\n    print_monetary(*nl_langinfo(INT_P_CS_PRECEDES), *nl_langinfo(INT_P_SEP_BY_SPACE),\n            *nl_langinfo(INT_N_CS_PRECEDES), *nl_langinfo(INT_N_SEP_BY_SPACE),\n            *nl_langinfo(INT_P_SIGN_POSN), *nl_langinfo(INT_N_SIGN_POSN));\n printf(\"\\nTime\\n\");\n    printf(\"  AM: [%s]\\n\", nl_langinfo(AM_STR));\n    printf(\"  PM: [%s]\\n\", nl_langinfo(PM_STR));\n    printf(\"  Date & time format: [%s]\\n\", nl_langinfo(D_T_FMT));\n    printf(\"  Date format: [%s]\\n\", nl_langinfo(D_FMT));\n    printf(\"  Time format: [%s]\\n\", nl_langinfo(T_FMT));\n    printf(\"  Time format (AM/PM): [%s]\\n\", nl_langinfo(T_FMT_AMPM));\n    printf(\"  Era: [%s]\\n\", nl_langinfo(ERA));\n    printf(\"  Year (era): [%s]\\n\", nl_langinfo(ERA_YEAR));\n    printf(\"  Date & time format (era): [%s]\\n\", nl_langinfo(ERA_D_T_FMT));\n    printf(\"  Date format (era): [%s]\\n\", nl_langinfo(ERA_D_FMT));\n    printf(\"  Time format (era): [%s]\\n\", nl_langinfo(ERA_T_FMT));\n    printf(\"  Alt digits: [%s]\\n\", nl_langinfo(ALT_DIGITS));\n\n    printf(\"   Days (abbr)\");\n    for (int i = 0; i < 7; i++)\n        printf(\"%c %s\", i == 0 ? ':' : ',', nl_langinfo(ABDAY_1 + i));\n    printf(\"\\n\");\n\n    printf(\"  Days (full)\");\n    for (int i = 0; i < 7; i++)\n        printf(\"%c %s\", i == 0 ? ':' : ',', nl_langinfo(DAY_1 + i));\n    printf(\"\\n\");\n\n    printf(\"  Months (abbr)\");\n    for (int i = 0; i < 12; i++)\n        printf(\"%c %s\", i == 0 ? ':' : ',', nl_langinfo(ABMON_1 + i));\n    printf(\"\\n\");\n\n    printf(\"  Months (full)\");\n    for (int i = 0; i < 12; i++)\n        printf(\"%c %s\", i == 0 ? ':' : ',', nl_langinfo(MON_1 + i));\n    printf(\"\\n\");\n\n    printf(\"\\nMessages\\n\");\n    printf(\"  Codeset: %s\\n\", nl_langinfo(CODESET));\n\n#ifdef OUTER_LIMITS\n\n    printf(\"\\nQueries\\n\");\n    printf(\"  YES expression: %s\\n\", nl_langinfo(YESEXPR));\n    printf(\"  NO expression:  %s\\n\", nl_langinfo(NOEXPR));\n\n    printf(\"\\nPaper\\n\");\n    printf(\"  Height:  %dmm\\n\", (int)(intptr_t)nl_langinfo(_NL_PAPER_HEIGHT));\n    printf(\"  Width:   %dmm\\n\", (int)(intptr_t)nl_langinfo(_NL_PAPER_WIDTH));\n    printf(\"  Codeset: %s\\n\", nl_langinfo(_NL_PAPER_CODESET));\n\n    printf(\"\\nName\\n\");\n    printf(\"  Format: %s\\n\", nl_langinfo(_NL_NAME_NAME_FMT));\n    printf(\"  Gen:    %s\\n\", nl_langinfo(_NL_NAME_NAME_GEN));\n    printf(\"  Mr:     %s\\n\", nl_langinfo(_NL_NAME_NAME_MR));\n    printf(\"  Mrs:    %s\\n\", nl_langinfo(_NL_NAME_NAME_MRS));\n    printf(\"  Miss:   %s\\n\", nl_langinfo(_NL_NAME_NAME_MISS));\n    printf(\"  Ms:     %s\\n\", nl_langinfo(_NL_NAME_NAME_MS));\n printf(\"\\nAddress\\n\");\n    printf(\"  Country name:   %s\\n\", nl_langinfo(_NL_ADDRESS_COUNTRY_NAME));\n    printf(\"  Country post:   %s\\n\", nl_langinfo(_NL_ADDRESS_COUNTRY_POST));\n    printf(\"  Country abbr2:  %s\\n\", nl_langinfo(_NL_ADDRESS_COUNTRY_AB2));\n    printf(\"  Country abbr3:  %s\\n\", nl_langinfo(_NL_ADDRESS_COUNTRY_AB3));\n    printf(\"  Country num:    %d\\n\",\n            (int)(intptr_t)nl_langinfo(_NL_ADDRESS_COUNTRY_NUM));\n    printf(\"  Country ISBN:   %s\\n\", nl_langinfo(_NL_ADDRESS_COUNTRY_ISBN));\n    printf(\"  Language name:  %s\\n\", nl_langinfo(_NL_ADDRESS_LANG_NAME));\n    printf(\"  Language abbr:  %s\\n\", nl_langinfo(_NL_ADDRESS_LANG_AB));\n    printf(\"  Language term:  %s\\n\", nl_langinfo(_NL_ADDRESS_LANG_TERM));\n    printf(\"  Language lib:   %s\\n\", nl_langinfo(_NL_ADDRESS_LANG_LIB));\n    printf(\"  Codeset:        %s\\n\", nl_langinfo(_NL_ADDRESS_CODESET));\n\n    printf(\"\\nTelephone\\n\");\n    printf(\"  Int'l format:    %s\\n\", nl_langinfo(_NL_TELEPHONE_TEL_INT_FMT));\n    printf(\"  Domestic format: %s\\n\", nl_langinfo(_NL_TELEPHONE_TEL_DOM_FMT));\n    printf(\"  Int'l select:    %s\\n\", nl_langinfo(_NL_TELEPHONE_INT_SELECT));\n    printf(\"  Int'l prefix:    %s\\n\", nl_langinfo(_NL_TELEPHONE_INT_PREFIX));\n    printf(\"  Codeset:         %s\\n\", nl_langinfo(_NL_TELEPHONE_CODESET));\n\n   printf(\"\\nMeasurement\\n\");\n   printf(\"  System:  %s\\n\",_get_measurement_system(\n           (int)*nl_langinfo(_NL_MEASUREMENT_MEASUREMENT)));\n   printf(\"  Codeset: %s\\n\", nl_langinfo(_NL_MEASUREMENT_CODESET));\n\n   printf(\"\\nIdentification\\n\");\n   printf(\"  Title:       %s\\n\", nl_langinfo(_NL_IDENTIFICATION_TITLE));\n   printf(\"  Source:      %s\\n\", nl_langinfo(_NL_IDENTIFICATION_SOURCE));\n   printf(\"  Address:     %s\\n\", nl_langinfo(_NL_IDENTIFICATION_ADDRESS));\n   printf(\"  Contact:     %s\\n\", nl_langinfo(_NL_IDENTIFICATION_CONTACT));\n   printf(\"  Email:       %s\\n\", nl_langinfo(_NL_IDENTIFICATION_EMAIL));\n   printf(\"  Telephone:   %s\\n\", nl_langinfo(_NL_IDENTIFICATION_TEL));\n   printf(\"  Language:    %s\\n\", nl_langinfo(_NL_IDENTIFICATION_LANGUAGE));\n   printf(\"  Territory:   %s\\n\", nl_langinfo(_NL_IDENTIFICATION_TERRITORY));\n   printf(\"  Audience:    %s\\n\", nl_langinfo(_NL_IDENTIFICATION_AUDIENCE));\n   printf(\"  Application: %s\\n\", nl_langinfo(_NL_IDENTIFICATION_APPLICATION));\n   printf(\"  Abbr:        %s\\n\", nl_langinfo(_NL_IDENTIFICATION_ABBREVIATION));\n   printf(\"  Revision:    %s\\n\", nl_langinfo(_NL_IDENTIFICATION_REVISION));\n   printf(\"  Date:        %s\\n\", nl_langinfo(_NL_IDENTIFICATION_DATE));\n   printf(\"  Category:    %s\\n\", nl_langinfo(_NL_IDENTIFICATION_CATEGORY));\n   printf(\"  Codeset:     %s\\n\", nl_langinfo(_NL_IDENTIFICATION_CODESET));\n\n#endif // OUTER_LIMITS\n\n    return 0;\n}\n```", "```\n$ gcc -D_GNU_SOURCE -DOUTER_LIMITS nl.c -o nl\n$ ./nl\nNumeric\n  Decimal: [.]\n  Thousands separator: [,]\n  Grouping: 3, 3 (repeated)\n\nMonetary\n  Decimal point: [.]\n  Thousands separator: [,]\n  Grouping    Grouping: 3, 3 (repeated)\n  Positive amount sign: []\n  Negative amount sign: [-]\n  Local:\n    Symbol: [$]\n    Fractional digits: 2\n    Symbol comes BEFORE a positive (or zero) amount\n    Symbol is NOT separated from a positive (or zero) amount by a space\n    Symbol comes BEFORE a negative amount\n    Symbol is NOT separated from a negative amount by a space\n    Positive (or zero) amount sign position: before quantity and symbol\n    Negative amount sign position: before quantity and symbol\n  International:\n    Symbol (ISO 4217): [USD], separator: [ ]\n    Fractional digits: 2\n    Symbol comes BEFORE a positive (or zero) amount\n    Symbol IS separated from a positive (or zero) amount by a space\n    Symbol comes BEFORE a negative amount\n    Symbol IS separated from a negative amount by a space\n    Positive (or zero) amount sign position: before quantity and symbol\n    Negative amount sign position: before quantity and symbol\n\nTime\n  AM: [AM]\n  PM: [PM]\n  Date & time format: [%a %d %b %Y %r %Z]\n  Date format: [%m/%d/%Y]\n  Time format: [%r]\n  Time format (AM/PM): [%I:%M:%S %p]\n  Era: []\n  Year (era): []\n  Date & time format (era): []\n  Date format (era): []\n  Time format (era): []\n  Alt digits: []\n  Days (abbr): Sun, Mon, Tue, Wed, Thu, Fri, Sat\n  Days (full): Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday\n  Months (abbr): Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec\n  Months (full): January, February, March, April, May, June, July, August,\nSeptember, October, November, December\nMessages\n  Codeset: UTF-8\n\nQueries\n  YES expression: ^[yY].*\n  NO expression:  ^[nN].*\n\nPaper\n  Height:  279mm\n  Width:   216mm\n  Codeset: UTF-8\n\nName\n  Format: %d%t%g%t%m%t%f\n  Gen:\n  Mr:       Mr.\n  Mrs:      Mrs.\n  Miss:     Miss.\n  Ms:       Ms.\n\nAddress\n  Country name:  USA\n  Country post:  USA\n  Country abbr2: US\n  Country abbr3: USA\n  Country num:   840\n  Country ISBN:  0\n  Language name: English\n  Language abbr: en\n  Language term: eng\n  Language lib:  eng\n  Codeset:       UTF-8\n\nTelephone\n  Int'l format:    +%c (%a) %l\n  Domestic format: (%a) %l\n  Int'l select:    11\n  Int'l prefix:    1\n  Codeset:         UTF-8\n\nMeasurement\n  System:  English\n  Codeset: UTF-8\n\nIdentification\n  Title:         English locale for the USA\n  Source:        Free Software Foundation, Inc.\n  Address:       http://www.gnu.org/software/libc/\n  Contact:\n  Email:         bug-glibc-locales@gnu.org\n  Telephone:\n  Language:      English\n  Territory:     USA\n  Audience:\n  Application:\n Abbr:\n  Revision:        1.0\n  Date:            2000-06-24\n  Category:        en_US:2000\n  Codeset:         UTF-8\n$\n```", "```\n$ locale -k LC_PAPER\nheight=279\nwidth=216\npaper-codeset=\"UTF-8\"\n$\n```", "```\n#include <libintl.h>\n\nchar *gettext(const char *msgid);\n```", "```\n#include <stdio.h>\n#include <libintl.h>\n\n#define _(x) gettext(x)\n\nint main()\n{\n     printf(_(\"Hello, world!\\n\"));\n     return 0;\n}\n```", "```\n#include <libintl.h>\n\nchar *textdomain(const char *domainname);\nchar *bindtextdomain(const char *domainname, const char *dirname);\n```", "```\n#include <stdio.h>\n#include <locale.h>\n#include <libintl.h>\n\n#ifndef LOCALE_DIR\n# define LOCALE_DIR \"/usr/local/share/locale\"\n#endif\n\n#ifdef TEST_L10N\n# include <stdlib.h>\n# undef LOCALE_DIR\n# define LOCALE_DIR getenv(\"PWD\")\n#endif\n\n#define _(x) gettext(x)\n\nint main()\n{\n     const char *localedir = LOCALE_DIR;\n\n     setlocale(LC_ALL, \"\");\n     bindtextdomain(\"gt\", localedir);\n     textdomain(\"gt\");\n\n     printf(_(\"Hello, world!\\n\"));\n\n     return 0;\n}\n```"]