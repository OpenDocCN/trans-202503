- en: '![Image](../images/common1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**3**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**LUMINOUS LIGHT**'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll use the micro:bit to experiment with light. First, you’ll
    learn how to sense light levels, and we’ll build a light-controlled guitar that
    plays notes depending on how much light it senses. Then we’ll use light to create
    an optical illusion infinity mirror that appears to go on forever to help the
    Mad Scientist fathom their most profound thoughts. MicroPython doesn’t have a
    light-sensing feature yet, so you’ll use Blocks code in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '**EXPERIMENT 3: SENSING LIGHT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Image](../images/common2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let’s look at how you can use a micro:bit to measure the light levels. Once
    you know how to do this, you’ll be able to make all sorts of light-dependent projects,
    including the automatic night-light and light-controlled guitar you’ll find later
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The micro:bit’s developers very cleverly built a feature into the device’s software
    that allows it to measure the light level with its LEDs. I’ll explain how in “How
    It Works” on [page 63](ch03.xhtml#page_63).
  prefs: []
  type: TYPE_NORMAL
- en: '**What You’ll Need**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You just need a micro:bit and a USB cable for this experiment.
  prefs: []
  type: TYPE_NORMAL
- en: '**Construction**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Visit the book’s code repository at *[https://github.com/simonmonk/mbms/](https://github.com/simonmonk/mbms/)*
    and click the link for **Experiment 3: Sensing Light**. Click **Download** and
    then copy the hex file onto your micro:bit. If you get stuck, head back to “Programming
    the Micro:bit” on [page 11](ch01.xhtml#page_11) where we discuss the process of
    getting programs onto your micro:bit in full. Remember, this experiment only works
    on Blocks code, so there’s no MicroPython code available to download.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you’ve successfully programmed the micro:bit, a number between 0 and 9
    should appear on the display, indicating how much light the micro:bit is detecting.
    Try changing the light level by shading the micro:bit with your hand or holding
    it under a light and see how the number changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Code**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Here is the Blocks code for this experiment.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0063-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `light level` block takes a reading from the micro:bit’s light sensor and
    assigns it a value between 0 and 255 that represents the brightness. But, if the
    number is more than one digit, the micro:bit’s LED display will need to scroll
    to display it, which is slow and inconvenient. By dividing that number by 26,
    the value will always be below 10.
  prefs: []
  type: TYPE_NORMAL
- en: After displaying the light level, the micro:bit pauses for half a second to
    give you time to read the display. Otherwise, the numbers would flicker past too
    quickly when the light level changes.
  prefs: []
  type: TYPE_NORMAL
- en: '**How It Works**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The micro:bit doesn’t have a dedicated light sensor. Instead, it uses an ingenious
    trick to calculate light levels with its display. You can read about this trick
    at *[https://lancaster-university.github.io/microbit-docs/extras/light-sensing/](https://lancaster-university.github.io/microbit-docs/extras/light-sensing/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT: AUTOMATIC NIGHT-LIGHT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Image](../images/common3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Difficulty: Easy*'
  prefs: []
  type: TYPE_NORMAL
- en: Although they’re reluctant to admit it, the Mad Scientist is a little bit afraid
    of the dark. That’s why they developed a project that uses a micro:bit’s display
    as a light that will automatically turn on when night falls.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0064-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This simple project builds on Experiment 3 to monitor the light level and then
    turn on all the LEDs on the micro:bit’s display if the light gets too dim.
  prefs: []
  type: TYPE_NORMAL
- en: '**What You’ll Need**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The only thing you need for this project is a micro:bit.
  prefs: []
  type: TYPE_NORMAL
- en: Because the micro:bit will have to stay on for a long time, it’s best to use
    a USB power adapter or Monk Makes Power for micro:bit (see “Powering Your Micro:bit”
    on [page 248](app01.xhtml#page_248)) for this project. Batteries run out of power
    too soon.
  prefs: []
  type: TYPE_NORMAL
- en: '**Construction**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Visit the book’s code repository at *[https://github.com/simonmonk/mbms/](https://github.com/simonmonk/mbms/)*
    and click the link for **Automatic Night-Light**. Then click **Download** and
    copy the hex file onto your micro:bit. If you get stuck on this, head back to
    “Programming the micro:bit” on [page 11](ch01.xhtml#page_11), where we discuss
    the process of getting programs onto your micro:bit in full.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you’ve programmed the micro:bit, the display should illuminate when you
    shade the micro:bit with your hand. When you take your hand away, the display
    should turn off.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Code**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Blocks code for this project is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0065-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This code uses two `if` blocks. The first checks whether the light level is
    less than 10, which would indicate that the environment is very dark. If this
    condition is met, the code turns on all the LEDs using the `show leds` block with
    all the LEDs selected.
  prefs: []
  type: TYPE_NORMAL
- en: The second `if` block turns the LEDs off if the light level is greater than
    50\. We leave a gap between the two levels of 10 and 50 to make sure the LEDs
    don’t flash on and off when the light is close to either level. The technical
    name for the difference between on/off values is *hysterysis*.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT: LIGHT GUITAR**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Image](../images/common3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Difficulty: Medium*'
  prefs: []
  type: TYPE_NORMAL
- en: Now it’s time to make a light-controlled guitar! This guitar will play different
    tones when you wave your hand in front of the micro:bit. You can see a video of
    this project in action at *[https://www.youtube.com/watch?v=OFUYxIYCXQs](https://www.youtube.com/watch?v=OFUYxIYCXQs)*.
  prefs: []
  type: TYPE_NORMAL
- en: I recommend attaching your micro:bit, a speaker, and a battery to a guitar-shaped
    cardboard cutout. (The Mad Scientist is not terribly good at art, so the resemblance
    in [Figure 3-1](ch03.xhtml#ch3fig1) is only passing.)
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/03fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-1: The micro:bit becomes a musical instrument.*'
  prefs: []
  type: TYPE_NORMAL
- en: The cables that connect the micro:bit to the speaker are hidden behind the cardboard
    to keep things neat.
  prefs: []
  type: TYPE_NORMAL
- en: '**What You’ll Need**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For this project, you’ll need the following items:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Micro:bit**'
  prefs: []
  type: TYPE_NORMAL
- en: '**3 × Alligator clip cables** To connect the micro:bit to the speaker'
  prefs: []
  type: TYPE_NORMAL
- en: '**3V battery pack** To power the micro:bit and speaker (The kind with a switch
    works best.)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Speaker for micro:bit** To play the sound (Use a Monk Makes Speaker or see
    [Chapter 2](ch02.xhtml#ch02) for other speaker options.)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Blu-Tack or self-adhesive pads** To attach the micro:bit to the cardboard
    cutout'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cardboard** To form the guitar body (You can use a cut-up cardboard box.)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Paper glue (PVA or spray adhesive)** To stick the paper outline to the cardboard'
  prefs: []
  type: TYPE_NORMAL
- en: '**Paper with a guitar outline (optional)** You can either draw your own guitar
    on paper or cut out and decorate the cardboard directly.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scissors** To cut out the outline of the guitar'
  prefs: []
  type: TYPE_NORMAL
- en: '**Construction**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It’s a good idea to create and test the program before attaching your micro:bit
    to the cardboard, so we’ll do that first.
  prefs: []
  type: TYPE_NORMAL
- en: Connect the speaker to the micro:bit using the three alligator cables, as shown
    in [Figure 3-2](ch03.xhtml#ch3fig2).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It’s a good idea to color-code the cables so you remember which is which. Use
    black for GND, red for 3V, and any other color for the audio connection from pin
    0 of the micro:bit.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/03fig02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*Figure 3-2: Attaching the micro:bit to a speaker*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open *[https://github.com/simonmonk/mbms/](https://github.com/simonmonk/mbms/)*
    and click for the **Light Guitar** project. Once the experiment has opened, click
    **Download**, then copy the hex file onto your micro:bit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you’ve programmed the micro:bit, it should play a different note when your
    hand gets close to it and shades some of the light. If you don’t get a very large
    range of notes, you may need to adjust its sensitivity (see “Code” on [page 71](ch03.xhtml#page_71)
    for how to do this).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disconnect the micro:bit from the USB cable. At *[https://github.com/simonmonk/mbms/](https://github.com/simonmonk/mbms/)*,
    you’ll find a folder called **other downloads** that contains a drawing of a guitar
    shape in PDF, PNG, and SVG formats. You can draw your own guitar or print out
    this template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Glue your guitar drawing to your piece of cardboard, as shown in [Figure 3-3](ch03.xhtml#ch3fig3).![Image](../images/03fig03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Figure 3-3: Gluing the paper template to the cardboard*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using a pair of scissors, cut around the outline of the guitar. Also cut out
    the two rectangles in the body of the guitar, where you’ll put the wires connecting
    the micro:bit to the speaker. The result should look like [Figure 3-4](ch03.xhtml#ch3fig4).![Image](../images/03fig04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Figure 3-4: Cutting around the template*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using small balls of Blu-Tack, attach the speaker and the micro:bit to the guitar
    so that the edge connectors of both are accessible from the rectangular slots.
    Also attach the battery box, as shown in [Figure 3-5](ch03.xhtml#ch3fig5).![Image](../images/03fig05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Figure 3-5: Attaching the micro:bit, the speaker, and the battery box*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When all three parts are attached to the guitar, the project should look like
    [Figure 3-6](ch03.xhtml#ch3fig6).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/03fig06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*Figure 3-6: The micro:bit, speaker, and battery box have been attached to
    the guitar.*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Flip the whole thing over and connect the micro:bit and speaker, as shown in
    [Figure 3-7](ch03.xhtml#ch3fig7). Reference [Figure 3-2](ch03.xhtml#ch3fig2) if
    you need help with the connections.![Image](../images/03fig07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Figure 3-7: Connecting the micro:bit to the speaker*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connect the battery box to the battery connector on the micro:bit. You’re ready
    to rock out!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Code**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Blocks code for this project uses arrays.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0071-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We put the code that needs to be run only when the micro:bit starts up in the
    `on start` block. This creates an array of notes. An *array* is a list of values
    rather than a single value. We’re using an array to provide a list of eight possible
    notes for the micro:bit to play. Different light levels will trigger different
    notes. The first line inside the `on start` block defines a new array called `notes`,
    which initially just contains the note `Middle C`. The `add value` blocks that
    follow add another seven notes to the array so that the variable `notes` will
    eventually contain all eight of the notes we need.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0072-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The code inside the `forever` block will run continuously. This is the code
    that tells the micro:bit to read the light level and then uses that information
    to pick a note to play. To do this, the code first reads the light level using
    the `light level` block and divides the reading by 25\. If you don’t hear all
    eight notes, you may need to adjust the sensitivity by tweaking this value of
    25 down a bit.
  prefs: []
  type: TYPE_NORMAL
- en: The `set to` block names the resulting value `note number`. Since the `note
    number` is the light level divided by 25, it will be a value between 1 and 10.
  prefs: []
  type: TYPE_NORMAL
- en: But setting the maximum light level to 10 would cause problems. When accessing
    items in an array, you specify the position of the item you want. The maximum
    position we can specify in this array is 7 (the eight notes are numbered 0 to
    7). We want the guitar to work indoors where the light is fairly low. However,
    if the light is really bright, then `note number` might turn out to be 10, which
    would be outside the array. To make sure that we don’t exceed this maximum permitted
    value for note number, we add the `if` command to check whether the note number
    is greater than 7\. If it is, the code sets it to 7—problem solved.
  prefs: []
  type: TYPE_NORMAL
- en: The `play tone` block accesses the item in the `notes` array at the position
    of the value of `note number` and plays it for 1/8 of a beat.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT: INFINITY MIRROR**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Image](../images/common3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This seemingly magical mirror ([Figure 3-8](ch03.xhtml#ch3fig8)) is guaranteed
    to impress any visiting mad scientists. Built into a small picture frame, the
    mirror looks much deeper than it really is.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/03fig08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-8: A micro:bit-controlled infinity mirror*'
  prefs: []
  type: TYPE_NORMAL
- en: Your micro:bit will control a strip of 30 LEDs mounted inside a picture frame,
    and we’ll put some reflective film on either side of the LEDs, allowing you to
    create interesting light effects.
  prefs: []
  type: TYPE_NORMAL
- en: You can see a video of this project in operation at *[https://www.youtube.com/watch?v=-4Ud47OkIyY](https://www.youtube.com/watch?v=-4Ud47OkIyY)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE** *This project is a little tricky because the reflective film can be
    difficult to smooth out. If you stick with it, though, the effect is worth it!*'
  prefs: []
  type: TYPE_NORMAL
- en: '**What You’ll Need**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For this project, you’ll need the following items:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Micro:bit**'
  prefs: []
  type: TYPE_NORMAL
- en: '**0.5 m Addressable LED Strip (NeoPixels)** One WS2812B RGB 5050 SMD Strip
    should have 60 LEDs per meter and be 0.5 meters long, with self-adhesive backing.'
  prefs: []
  type: TYPE_NORMAL
- en: '**3 × Alligator clip to male jumper cables** To connect the micro:bit to the
    LED strip'
  prefs: []
  type: TYPE_NORMAL
- en: '**Monk Makes Power for micro:bit** To power the micro:bit and LED strip. Note
    that USB power will not provide enough current for this project and a AAA battery
    pack will provide enough power only if the batteries are very fresh.'
  prefs: []
  type: TYPE_NORMAL
- en: '**6V DC wall wart power adapter** To provide enough power for the LEDs. The
    power adapter should have a DC barrel jack plug on the end. (See “Powering Your
    Micro:bit” on [page 248](app01.xhtml#page_248).)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Deep 7 × 5-inch picture frame** See additional information about the picture
    frame below. You’ll need one with plastic spacers, which a deep frame should contain.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Two 7 × 5-inch pieces of reflective window film** Samples of reflective window
    film'
  prefs: []
  type: TYPE_NORMAL
- en: '**Craft knife** To cut the reflective film and make a slot in the picture frame
    spacer for the LED strip’s wires'
  prefs: []
  type: TYPE_NORMAL
- en: '**Soapy water** To clean the glass and attach the film'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ruler or plastic card** To use as a squeegee'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adhesive tape** To remove the backing film from the reflective window film'
  prefs: []
  type: TYPE_NORMAL
- en: Look for a 7 × 5-inch (17.5 × 12.5 cm) picture frame that has an insert designed
    for 6 × 4-inch photos. The important thing about the frame is that it has sufficient
    depth, so look for a frame like the one shown in [Figure 3-9a–b](ch03.xhtml#ch3fig9).
    The one I used was 1.25 inches deep. Also make sure that there’s glass at the
    front of the frame. Behind the glass, there should be a plastic spacer (on which
    we’re going to stick the LED strip) and then the backboard.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/03fig09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-9: A deep photo frame for the infinity mirror: (a) front and (b)
    with the back removed*'
  prefs: []
  type: TYPE_NORMAL
- en: The reflective film reflects light, so it acts like a mirror. It normally comes
    in large rolls for fitting to the windows of a building. Luckily for us, the people
    who sell this film also usually offer small samples of the material, which are
    plenty big enough for our needs. You’ll find it most easily online. Search on
    eBay or Amazon by entering the phrase *silver reflective mirror window film* and
    then look through the listings until you find someone who offers sample sizes.
  prefs: []
  type: TYPE_NORMAL
- en: You’re going to need two pieces that are at least 7 × 5 inches, but I recommend
    getting extra; attaching the film to the glass of the photo frame and removing
    the bubbles is a little tricky, so it’s a good idea to have a few spare sheets
    in case your first attempts fail.
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest place to find the addressable LED strips is on eBay, but it’s also
    sold through hardware sites like Adafruit and SparkFun. Use the search term *WS2812B
    RGB 5050 LED Strip*. You’ll want to buy a strip with 60 LEDs per meter. You’ll
    need half a meter for this project, so 30 LEDs in total. These LED strips come
    in two varieties: waterproof (for outside use) or with a self-adhesive backing.
    You need the type with the adhesive backing.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Construction**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you have your materials, we’ll attach the LEDs and reflective film
    to the frame. After we program the LEDs, the light will appear to go back into
    the frame forever, creating the illusion that the frame is deeper than it is.
  prefs: []
  type: TYPE_NORMAL
- en: It’s worth making sure the LED strip works with your micro:bit before you go
    through the trouble of constructing the hardware for the project. To test it,
    connect the LED strip to the micro:bit using the three alligator to jumper cables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that it’s also possible to connect the strip using male-to-male jumper
    wires and normal alligator clips.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also attach the DC power adapter and Monk Makes Power for micro:bit board, as
    shown in [Figure 3-10](ch03.xhtml#ch3fig10).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/03fig10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*Figure 3-10: Testing the LED strip with a micro:bit*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The pins of the alligator to jumper pin cables will fit into the three-way connector
    attached to the LED strip. Your LED strip may have differently colored wires than
    the ones shown in [Figure 3-10](ch03.xhtml#ch3fig10), so it’s best to look at
    the strip itself to see where the wires are soldered to it. One wire will be marked
    GND; connect this to the GND connection of the micro:bit. A second wire will be
    marked 5V; connect this to 3V on the micro:bit. The final connection, in the middle,
    will either be marked DIN (Data In) or have an arrow pointing toward the LED.
    Connect this to pin 0 of the micro:bit.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Got to *[https://github.com/simonmonk/mbms/](https://github.com/simonmonk/mbms/)*
    and click the link for **Magic Mirror**. Click **Download** to download the code
    and then copy the hex file onto your micro:bit. If you get stuck, head back to
    “Programming the Micro:bit” on [page 11](ch01.xhtml#page_11), where we discuss
    the process of getting programs onto your micro:bit in full.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you prefer to use Python, then download the code from the same website. For
    instructions for downloading and using the book’s examples, see “Downloading the
    Code” on [page 34](ch01.xhtml#page_34). The Python file for this project is *ch_03_Magic_Mirror.py*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you’ve loaded the program onto your micro:bit, you should see LEDs blink
    on and off at random.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Figure 3-11](ch03.xhtml#ch3fig11) shows how the infinity mirror is constructed
    from the picture frame.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/03fig11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*Figure 3-11: How the infinity mirror is constructed*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The following steps will lead you through this part of the project build.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Take the photo frame apart and remove the plastic insert. Using a craft knife,
    carefully cut out a slot in one corner of the insert, as shown in [Figure 3-12](ch03.xhtml#ch3fig12),
    for the cables to the LED strip to go through.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**WARNING** *Craft knives can be very sharp, so be careful and ask an adult
    for help.*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/03fig12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*Figure 3-12: Cutting a groove for the wires in the plastic insert*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Without removing the backing tape, lay the LED strip around the edge of the
    plastic insert. If it’s not long enough, you can stretch it across the corners,
    as shown in [Figure 3-13](ch03.xhtml#ch3fig13). When you’ve made sure it fits,
    peel off the backing film and fix the LED strip to the inside of the insert.![Image](../images/03fig13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Figure 3-13: Attaching the LED strip to the plastic insert*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now set the insert aside. The next step is to attach the reflective film to
    the glass. Carefully remove the frame’s glass and wash it in soapy water. Dry
    one side and set it down with the wet side up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pick up the reflective film. There will be a backing sheet of transparent plastic
    on the adhesive side of the film. To separate this thin transparent layer, put
    adhesive tape on both sides of the film and pull apart ([Figure 3-14](ch03.xhtml#ch3fig14)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/03fig14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*Figure 3-14: Removing the plastic backing from the reflective window film*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Place the reflective film adhesive side down onto the wet glass. Using a plastic
    card or ruler, push the bubbles between the film and glass to the edge of the
    glass to remove them ([Figure 3-15](ch03.xhtml#ch3fig15)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/03fig15.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*Figure 3-15: Removing bubbles from the reflective window film*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let the film dry for about an hour. Then flip the glass over and use a craft
    knife to trim the film to the same size as the glass ([Figure 3-16](ch03.xhtml#ch3fig16)).![Image](../images/03fig16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Figure 3-16: Trimming the reflective window film*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Lay the backboard of the frame on your second piece of reflective film and cut
    the film to the same size as the backing frame ([Figure 3-17](ch03.xhtml#ch3fig17)).
    You don’t need to remove the protective film or stick the film to the board unless
    the film does not lie flat when you put the frame back together.![Image](../images/03fig17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Figure 3-17: Trimming the reflective window film for the backboard*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now it’s time to assemble the frame.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put the glass back into the frame with the glass side facing out. This will
    protect the film and make the mirror look better ([Figure 3-18a](ch03.xhtml#ch3fig18)).
    If your picture frame included a thin piece of cardboard meant to be used with
    a smaller print, you can insert this after the glass.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, put the plastic insert back into the frame, allowing the cable to escape
    through one corner ([Figure 3-18b](ch03.xhtml#ch3fig18)). If the insert has a
    wider flat side designed to support the photo, this should face away from the
    glass.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, place the cardboard back onto the frame, allowing the cable to escape
    through one corner ([Figure 3-18c](ch03.xhtml#ch3fig18)). Fix the back in place
    and flip the finished frame over ([Figure 3-18d](ch03.xhtml#ch3fig18)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/03fig18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*Figure 3-18: Reassembling the frame*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Reattach your micro:bit, and your magic mirror should spring into life.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Code**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We want to program the LEDs to blink on and off at random. To do this, the code
    picks one of the LEDs at random, then generates a random color and sets the LED
    to that color.
  prefs: []
  type: TYPE_NORMAL
- en: '**Blocks Code**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Here is the Blocks code for the project.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0082-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When using addressable LEDs (called NeoPixels in the Blocks code), you need
    to assign the `NeoPixel at` block to a variable, which we have called `leds`,
    in your `on start` block. You must supply the `NeoPixel at` block with the pin
    used to control the LEDs. In this case, we’ll use pin P0\. Then specify the number
    of LEDs on the strip, which is 30 in our case. Finally, tell `NeoPixel at` how
    to define the colors. In this case, that’s the standard RGB format.
  prefs: []
  type: TYPE_NORMAL
- en: We again use a `forever` block to keep this code running continuously. In the
    `forever` block, we start by generating a random number between 0 and 29 using
    the `pick random` block and assign this number to the variable `led`. This selects
    one of the LEDs. The `color` variable is then assigned random amounts (between
    0 and 255) of red, green, and blue.
  prefs: []
  type: TYPE_NORMAL
- en: The `show` block updates the LED strip with the change we’ve just made.
  prefs: []
  type: TYPE_NORMAL
- en: Try experimenting with the code to change the LED colors.
  prefs: []
  type: TYPE_NORMAL
- en: '**MicroPython Code**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Here’s the MicroPython version of the code.
  prefs: []
  type: TYPE_NORMAL
- en: from microbit import *
  prefs: []
  type: TYPE_NORMAL
- en: import neopixel, random
  prefs: []
  type: TYPE_NORMAL
- en: leds = neopixel.NeoPixel(pin0, 30)
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: led = random.randint(0, 29)
  prefs: []
  type: TYPE_NORMAL
- en: color = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
  prefs: []
  type: TYPE_NORMAL
- en: leds[led] = color
  prefs: []
  type: TYPE_NORMAL
- en: leds.show()
  prefs: []
  type: TYPE_NORMAL
- en: sleep(5)
  prefs: []
  type: TYPE_NORMAL
- en: This code works in much the same way as the Blocks version. Notice that you
    have to include the neopixel and random libraries at the top of the program so
    that you can access the LED strip and generate the random numbers.
  prefs: []
  type: TYPE_NORMAL
- en: The MicroPython neopixel library first defines the LED strip as using pin 0,
    which is the micro:bit pin we attached it to, and having a length of 30 LEDs.
    It does this using the command `leds = neopixel.NeoPixel(pin0, 30)`.
  prefs: []
  type: TYPE_NORMAL
- en: The `while` loop then does the same job as the `forever` block in the Blocks
    version, picking an LED at random and setting it to a random color.
  prefs: []
  type: TYPE_NORMAL
- en: '**How It Works**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Figure 3-19](ch03.xhtml#ch3fig19) shows how the infinity mirror works.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/03fig19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-19: Light bouncing around in the infinity mirror project*'
  prefs: []
  type: TYPE_NORMAL
- en: Light from the LEDs heads off in all directions (A in [Figure 3-19](ch03.xhtml#ch3fig19)).
    Some of that light travels up, toward the front of the frame. The mirror film
    reflects some—but not all—of this light back down to the mirror at the back of
    the frame (B). The rest of the light escapes from the frame (C), and some of it
    finds its way to the back of your eye, where it forms an image.
  prefs: []
  type: TYPE_NORMAL
- en: Meanwhile, some of the light that found its way down to the mirror (B) will
    bounce back up toward the front glass again (D). Some of this light will escape
    the picture frame entirely and find its way to your eye, and the rest will perform
    yet another bounce. It’s this bouncing back and forth of the light that causes
    an endless succession of LEDs to seem to disappear into the mirror, getting dimmer
    each time a proportion of the light is lost.
  prefs: []
  type: TYPE_NORMAL
- en: '**SUMMARY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you have learned how to both measure and make light with your
    micro:bit. In [Chapter 4](ch04.xhtml#ch04), the Mad Scientist turns their attention
    to magnetism.
  prefs: []
  type: TYPE_NORMAL
