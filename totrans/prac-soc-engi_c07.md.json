["```\n**ssh-keygen -t rsa**\nEnter file in which to save the key (/root/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_rsa.\nYour public key has been saved in /root/.ssh/id_rsa.pub.\ncat ./.ssh/id_rsa.pub > ./.ssh/authorized_keys\n```", "```\nroot@******:**~/.ssh# scp root@***.***.***.***:/root/.ssh/id_rsa ./id_rsa**\n```", "```\nroot@******:**~****#cat ./.ssh/id_rsa**\n```", "```\nroot@******:**~# chmod 600 id_rsa**\nroot@******:**~# ssh -i id_rsa root@***.***.***.*****\n```", "```\nroot@******:**~# cat id_rsa.pub >> ./.ssh/authorized_keys**\n```", "```\nroot@******:**vi /etc/ssh/sshd_config**\n```", "```\nroot@******:**chmod 600**`key_file`\nroot@******:**ssh -I**`key_file``user`**@**`VPS_IP_address`\n```", "```\nroot@******:**apt-get install ufw**\n```", "```\nroot@******:**ufw allow from** `your_IP_address` **to any**\nroot@******:**ufw allow from any to** `your_IP_address`\nroot@******:**ufw enable**\n```", "```\n**apt-get update -y; apt-get upgrade -y; apt-get dist-upgrade** \n```", "```\nroot@********:**~# apt-get update -y**\nroot@********:**~****# apt-get install apache2 -y**\n```", "```\n**ufw app list**\n```", "```\n**ufw allow from** `IP_address or CIDR`**to any port**`web_port; 80 or 443`\n**ufw enable**\n```", "```\nroot@********:**~# ufw status**\nStatus: active\nTo                         Action      From\n--                         ------      ----\nAnywhere                   ALLOW       ***.***.***.*** \n***.***.***.***            ALLOW       Anywhere \n22                         ALLOW       ***.***.***.***\n```", "```\nroot@********:**~# service apache2 stop**\nroot@********:**~# systemctl stop apache2**\n```", "```\n<img src=\"http://www.`your_site`/tracker.php?eid=`unique_id`\" alt=\"\" width=\"1px\" height=\"1px\"\">\n```", "```\n<?php\n  // Create an image, 1x1 pixel in size\n  $im=imagecreate(1,1);\n  // Set the background color\n  $white=imagecolorallocate($im,255,255,255);\n  // Allocate the background color\n  imagesetpixel($im,1,1,$white);\n  // Set the image type\n  header(\"content-type:image/jpg\");\n  // Create a JPEG file from the image\n  imagejpeg($im);\n  // Free memory associated with the image\n  imagedestroy($im);\n?>\n```", "```\n**ufw allow from** `your_IP_address` **to any port 3333**\n**ufw allow from** `your_IP_address, QA_IP_address, and/or target_IP_range/CIDR` **to any port 80 (443 if using HTTPS)** \n**ufw allow from any port 25 to any**\n**ufw enable**\n```", "```\n**cd /opt/**\n**git clone https://github.com/gophish/gophish**\n**cd gophish**\n**apt-get install golang -y**\n**go get github.com/gophish/gophish**\n**go build**\n```", "```\nroot@********:**/opt/gophish# vi config.json**\n```", "```\n \"admin_server\": {\n                \"listen_url\": **\"127.0.0.1:3333\"**,\n                \"use_tls\": true,\n                \"cert_path\": \"gophish_admin.crt\",\n                \"key_path\": \"gophish_admin.key\"\n        },\n        \"phish_server\": {\n                \"listen_url\": **\"0.0.0.0:80\"**,\n                \"use_tls\": false,\n                \"cert_path\": \"example.crt\",\n                \"key_path\": \"example.key\"\n        },\n        \"db_name\": \"sqlite3\",\n \"db_path\": \"gophish.db\",\n        \"migrations_prefix\": \"db/db_\",\n        \"contact_address\": \"\",\n        \"logging\": {\n                \"filename\": \"\"\n        }\n}\n```", "```\nUsername: admin\nPassword: gophish\n```", "```\nroot@***********:~# cd /opt/**\nroot@***********:~# wget https://dl.eff.org/certbot-auto**\nroot@***********:~# chmod a+x certbot-auto**\nroot@***********:~# ./certbot-auto certonly -d** `your_domain` **--manual --preferred-challenges dns**\n```", "```\nroot@**********:~# apt-get install git**\nroot@**********:~# git clone https://github.com/letsencrypt/letsencrypt /opt/letsencrypt**\nroot@**********:~# cd /opt/letsencrypt**\nroot@**********:~# sudo -H ./letsencrypt-auto certonly --standalone -d example.com -d www.example.com**\n```", "```\n**sudo ls /etc/letsencrypt/live**\n```"]