- en: '8'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '8'
- en: RAW PACKET PROCESSING
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 原始数据包处理
- en: '![Image](Images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/common.jpg)'
- en: In this chapter, you’ll learn how to capture and process network packets. You
    can use packet processing for many purposes, including to capture cleartext authentication
    credentials, alter the application functionality of the packets, or spoof and
    poison traffic. You can also use it for SYN scanning and for port scanning through
    SYN-flood protections, among other things.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何捕获和处理网络数据包。你可以将数据包处理用于多种目的，包括捕获明文认证凭证、修改数据包的应用程序功能，或者伪造和投毒流量。你还可以将其用于
    SYN 扫描和通过 SYN 洪水保护进行端口扫描等。
- en: We’ll introduce you to the excellent `gopacket` package from Google, which will
    enable you to both decode packets and reassemble the stream of traffic. This package
    allows you to filter traffic by using the Berkeley Packet Filter (BPF), also called
    tcpdump syntax; read and write *.pcap* files; inspect various layers and data;
    and manipulate packets.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向你介绍 Google 的优秀 `gopacket` 包，它将帮助你解码数据包并重新组装流量流。该包允许你使用伯克利数据包过滤器（BPF，亦称为
    tcpdump 语法）过滤流量；读取和写入 *.pcap* 文件；检查各种层和数据；以及操作数据包。
- en: We’ll walk through several examples to show you how to identify devices, filter
    results, and create a port scanner that can bypass SYN-flood protections.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过几个示例演示如何识别设备、过滤结果，并创建一个能够绕过 SYN 洪水保护的端口扫描器。
- en: Setting Up Your Environment
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置你的开发环境
- en: 'Before working through the code in this chapter, you need to set up your environment.
    First, install `gopacket` by entering the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的代码示例之前，你需要设置好你的环境。首先，输入以下命令安装 `gopacket`：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, `gopacket` relies on external libraries and drivers to bypass the operating
    system’s protocol stack. If you intend to compile the examples in this chapter
    for use on Linux or macOS, you’ll need to install `libpcap-dev`. You can do this
    with most package management utilities such as `apt`, `yum`, or `brew`. Here’s
    how you install it by using `apt` (the installation process looks similar for
    the other two options):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`gopacket` 依赖于外部库和驱动程序来绕过操作系统的协议栈。如果你打算为 Linux 或 macOS 编译本章中的示例，你需要安装 `libpcap-dev`。你可以使用大多数包管理工具，如
    `apt`、`yum` 或 `brew` 来完成安装。以下是使用 `apt` 安装它的方法（其他两个选项的安装过程类似）：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you intend to compile and run the examples in this chapter on Windows, you
    have a couple of options, based on whether you’re going to cross-compile or not.
    Setting up a development environment is simpler if you don’t cross-compile, but
    in that case, you’ll have to create a Go development environment on a Windows
    machine, which can be unattractive if you don’t want to clutter another environment.
    For the time being, we’ll assume you have a working environment that you can use
    to compile Windows binaries. Within this environment, you’ll need to install WinPcap.
    You can download an installer for free from *[https://www.winpcap.org](https://www.winpcap.org)/*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算在 Windows 上编译并运行本章中的示例，你有几种选择，具体取决于你是否打算进行交叉编译。如果不进行交叉编译，设置开发环境会更简单，但在这种情况下，你需要在
    Windows 机器上创建一个 Go 开发环境，如果你不想让其他环境变得混乱，这可能会显得不太吸引人。目前，我们假设你有一个可以用来编译 Windows 二进制文件的工作环境。在这个环境中，你需要安装
    WinPcap。你可以从 *[https://www.winpcap.org](https://www.winpcap.org)* 免费下载安装程序。
- en: Identifying Devices by Using the pcap Subpackage
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 pcap 子包识别设备
- en: 'Before you can capture network traffic, you must identify available devices
    on which you can listen. You can do this easily using the `gopacket/pcap` subpackage,
    which retrieves them with the following helper function: `pcap.FindAllDevs() (ifs
    []Interface, err error)`. [Listing 8-1](ch08.xhtml#ch8list1) shows how you can
    use it to list all available interfaces. (All the code listings at the root location
    of / exist under the provided github repo *[https://github.com/blackhat-go/bhg/](https://github.com/blackhat-go/bhg/)*.)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在你能够捕获网络流量之前，你必须识别可以监听的可用设备。你可以使用 `gopacket/pcap` 子包轻松完成这项工作，它通过以下助手函数来获取设备：`pcap.FindAllDevs()
    (ifs []Interface, err error)`。[列表 8-1](ch08.xhtml#ch8list1) 显示了如何使用它列出所有可用的接口。（所有位于根位置的代码列表都可以在提供的
    GitHub 仓库 *[https://github.com/blackhat-go/bhg/](https://github.com/blackhat-go/bhg/)*
    中找到。）
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 8-1: Listing the available network devices (*[/ch-8/identify/main.go](https://github.com/blackhat-go/bhg/blob/master/ch-8/identify/main.go)*)*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 8-1：列出可用的网络设备 (*[/ch-8/identify/main.go](https://github.com/blackhat-go/bhg/blob/master/ch-8/identify/main.go)*)*'
- en: You enumerate your devices by calling `pcap.FindAllDevs()` ❶. Then you loop
    through the devices found ❷. For each device, you access various properties, including
    the `device.Name` ❸. You also access their IP addresses through the `Addresses`
    property, which is a slice of type `pcap.InterfaceAddress`. You loop through these
    addresses ❹, displaying the IP address and netmask to the screen ❺.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你通过调用 `pcap.FindAllDevs()` ❶ 来枚举你的设备。然后你循环遍历找到的设备 ❷。对于每个设备，你访问各种属性，包括 `device.Name`
    ❸。你还可以通过 `Addresses` 属性访问它们的 IP 地址，这个属性是 `pcap.InterfaceAddress` 类型的切片。你遍历这些地址
    ❹，将 IP 地址和子网掩码显示到屏幕上 ❺。
- en: Executing your utility produces output similar to [Listing 8-2](ch08.xhtml#ch8list2).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 执行你的实用工具会产生类似于[清单 8-2](ch08.xhtml#ch8list2)的输出。
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 8-2: Output showing the available network interfaces*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 8-2：显示可用网络接口的输出*'
- en: The output lists the available network interfaces—`enp0s5`, `any`, and `lo`—as
    well as their IPv4 and IPv6 addresses and netmasks. The output on your system
    will likely differ from these network details, but it should be similar enough
    that you can make sense of the information.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 输出列出了可用的网络接口——`enp0s5`、`any` 和 `lo`——以及它们的 IPv4 和 IPv6 地址和子网掩码。你系统上的输出可能与这些网络细节有所不同，但应该足够相似，以便你能理解这些信息。
- en: Live Capturing and Filtering Results
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实时捕获与过滤结果
- en: Now that you know how to query available devices, you can use `gopacket`’s features
    to capture live packets off the wire. In doing so, you’ll also filter the set
    of packets by using BPF syntax. BPF allows you to limit the contents of what you
    capture and display so that you see only relevant traffic. It’s commonly used
    to filter traffic by protocol and port. For example, you could create a filter
    to see all TCP traffic destined for port 80\. You can also filter traffic by destination
    host. A full discussion of BPF syntax is beyond the scope of this book. For additional
    ways to use BPF, take a peek at [*http://www.tcpdump.org/manpages/pcap-filter.7.html*](http://www.tcpdump.org/manpages/pcap-filter.7.html).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何查询可用的设备，你可以使用 `gopacket` 的功能从网络上捕获实时数据包。在此过程中，你还将使用 BPF 语法过滤数据包。BPF 允许你限制捕获和显示的内容，从而只看到相关的流量。它通常用于按协议和端口过滤流量。例如，你可以创建一个过滤器，查看所有目标端口为
    80 的 TCP 流量。你也可以按目标主机过滤流量。BPF 语法的详细讨论超出了本书的范围。如果想了解更多关于如何使用 BPF，请查看[*http://www.tcpdump.org/manpages/pcap-filter.7.html*](http://www.tcpdump.org/manpages/pcap-filter.7.html)。
- en: '[Listing 8-3](ch08.xhtml#ch8list3) shows the code, which filters traffic so
    that you capture only TCP traffic sent to or from port 80.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 8-3](ch08.xhtml#ch8list3) 显示了代码，它过滤流量，以便你只捕获发送到或来自端口 80 的 TCP 流量。'
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 8-3: Using a BPF filter to capture specific network traffic (*[/ch-8/filter/main.go](https://github.com/blackhat-go/bhg/blob/master/ch-8/filter/main.go)*)*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 8-3：使用 BPF 过滤器捕获特定的网络流量 (*[/ch-8/filter/main.go](https://github.com/blackhat-go/bhg/blob/master/ch-8/filter/main.go)*)*'
- en: 'The code starts by defining several variables necessary to set up the packet
    capture ❶. Included among these is the name of the interface on which you want
    to capture data, the snapshot length (the amount of data to capture for each frame),
    the `promisc` variable (which determines whether you’ll be running promiscuous
    mode), and your time-out. Also, you define your BPF filter: `tcp and port 80`.
    This will make sure you capture only packets that match those criteria.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 代码首先定义了几个必要的变量，以便设置数据包捕获 ❶。其中特别包括你想要捕获数据的接口名称、快照长度（每个帧捕获的数据量）、`promisc` 变量（决定是否启用混杂模式）以及超时时间。此外，你还定义了
    BPF 过滤器：`tcp and port 80`。这将确保你只捕获符合这些条件的数据包。
- en: Within your `main()` function, you enumerate the available devices ❷, looping
    through them to determine whether your desired capture interface exists in your
    device list ❸. If the interface name doesn’t exist, then you panic, stating that
    it’s invalid.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `main()` 函数中，你枚举可用设备 ❷，并循环遍历它们以确定你想要的捕获接口是否存在于设备列表中 ❸。如果接口名称不存在，则会 panic，提示它无效。
- en: What remains in the rest of the `main()` function is your capturing logic. From
    a high-level perspective, you need to first obtain or create a `*pcap.Handle`,
    which allows you to read and inject packets. Using this handle, you can then apply
    a BPF filter and create a new packet data source, from which you can read your
    packets.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的 `main()` 函数部分是你的捕获逻辑。从一个高层次的角度来看，你需要首先获取或创建一个 `*pcap.Handle`，它允许你读取和注入数据包。使用这个句柄，你可以应用
    BPF 过滤器，并创建一个新的数据包数据源，从中读取数据包。
- en: You create your `*pcap.Handle` (named `handle` in the code) by issuing a call
    to `pcap.OpenLive()` ❹. This function receives an interface name, a snapshot length,
    a boolean value defining whether it’s promiscuous, and a time-out value. These
    input variables are all defined prior to the `main()` function, as we detailed
    previously. Call `handle.SetBPFFilter(filter)` to set the BPF filter for your
    handle ❺, and then use `handle` as an input while calling `gopacket.NewPacketSource(handle,
    handle.LinkType())` to create a new packet data source ❻. The second input value,
    `handle.LinkType()`, defines the decoder to use when handling packets. Lastly,
    you actually read packets from the wire by using a loop on `source.Packets()`
    ❼, which returns a channel.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你通过调用 `pcap.OpenLive()` ❹ 创建你的 `*pcap.Handle`（代码中命名为 `handle`）。此函数接受一个接口名称、一个快照长度、一个定义是否为混杂模式的布尔值以及一个超时值。这些输入变量在
    `main()` 函数之前已经定义，如我们之前所述。调用 `handle.SetBPFFilter(filter)` 为你的句柄设置 BPF 过滤器 ❺，然后在调用
    `gopacket.NewPacketSource(handle, handle.LinkType())` 创建新的数据包数据源 ❻ 时，将 `handle`
    作为输入。第二个输入值 `handle.LinkType()` 定义了处理数据包时使用的解码器。最后，你通过在 `source.Packets()` ❼ 上进行循环来实际从网络中读取数据包，该函数返回一个通道。
- en: As you might recall from previous examples in this book, looping on a channel
    causes the loop to block when it has no data to read from the channel. When a
    packet arrives, you read it and print its contents to screen.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在本书之前的示例中可能记得，循环在通道上时，如果没有数据可供读取，循环会被阻塞。当数据包到达时，你读取它并将其内容打印到屏幕上。
- en: The output should look like [Listing 8-4](ch08.xhtml#ch8list4). Note that the
    program requires elevated privileges because we’re reading raw content off the
    network.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该类似于 [列表 8-4](ch08.xhtml#ch8list4)。请注意，该程序需要提升权限，因为我们正在从网络读取原始内容。
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 8-4: Captured packets logged to stdout*'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 8-4：捕获的数据包记录到 stdout*'
- en: Although the raw output isn’t very digestible, it certainly contains a nice
    separation of each layer. You can now use utility functions, such as `packet.ApplicationLayer()`
    and `packet.Data()`, to retrieve the raw bytes for a single layer or the entire
    packet. When you combine the output with `hex.Dump()`, you can display the contents
    in a much more readable format. Play around with this on your own.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管原始输出并不容易理解，但它确实很好地分离了每一层。你现在可以使用工具函数，例如 `packet.ApplicationLayer()` 和 `packet.Data()`，来检索单一层或整个数据包的原始字节。当你将输出与
    `hex.Dump()` 结合使用时，你可以以更易读的格式显示内容。自己动手试试吧。
- en: Sniffing and Displaying Cleartext User Credentials
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 嗅探并显示明文用户凭据
- en: Now let’s build on the code you just created. You’ll replicate some of the functionality
    provided by other tools to sniff and display cleartext user credentials.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们基于你刚刚创建的代码进行扩展。你将复制一些由其他工具提供的功能，来嗅探并显示明文的用户凭据。
- en: Most organizations now operate by using switched networks, which send data directly
    between two endpoints rather than as a broadcast, making it harder to passively
    capture traffic in an enterprise environment. However, the following cleartext
    sniffing attack can be useful when paired with something like Address Resolution
    Protocol (ARP) poisoning, an attack that can coerce endpoints into communicating
    with a malicious device on a switched network, or when you’re covertly sniffing
    outbound traffic from a compromised user workstation. In this example, we’ll assume
    you’ve compromised a user workstation and focus solely on capturing traffic that
    uses FTP to keep the code brief.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，大多数组织都使用交换机网络，这种网络将数据直接发送到两个端点，而不是广播，使得在企业环境中被动捕获流量变得更加困难。然而，以下的明文嗅探攻击在与诸如地址解析协议（ARP）欺骗等技术结合时，可以非常有效，后者可以迫使端点与交换网络上的恶意设备进行通信，或者当你悄悄地嗅探被攻击用户工作站的出站流量时。在这个例子中，我们假设你已经入侵了一个用户工作站，并仅关注捕获使用
    FTP 的流量，以保持代码简洁。
- en: With the exception of a few small changes, the code in [Listing 8-5](ch08.xhtml#ch8list5)
    is nearly identical to the code in [Listing 8-3](ch08.xhtml#ch8list3).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 除了一些小的变化，[列表 8-5](ch08.xhtml#ch8list5) 中的代码几乎与 [列表 8-3](ch08.xhtml#ch8list3)
    中的代码完全相同。
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 8-5: Capturing FTP authentication credentials (*[/ch-8/ftp/main.go](https://github.com/blackhat-go/bhg/blob/master/ch-8/ftp/main.go)*)*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 8-5：捕获 FTP 身份验证凭据 (*[/ch-8/ftp/main.go](https://github.com/blackhat-go/bhg/blob/master/ch-8/ftp/main.go)*)*'
- en: The changes you made encompass only about 10 lines of code. First, you change
    your BPF filter to capture only traffic destined for port 21 (the port commonly
    used for FTP traffic) ❶. The rest of the code remains the same until you process
    the packets.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你所做的更改仅包含大约10行代码。首先，你修改了BPF过滤器，仅捕获目标为21端口（常用于FTP流量）的流量❶。其余代码保持不变，直到你处理数据包。
- en: To process packets, you first extract the application layer from the packet
    and check to see whether it actually exists ❷, because the application layer contains
    the FTP commands and data. You look for the application layer by examining whether
    the response value from `packet.ApplicationLayer()` is `nil`. Assuming the application
    layer exists in the packet, you extract the payload (the FTP commands/data) from
    the layer by calling `appLayer.Payload()` ❸. (There are similar methods for extracting
    and inspecting other layers and data, but you only need the application layer
    payload.) With your payload extracted, you then check whether the payload contains
    either the `USER` or `PASS` commands ❹, indicating that it’s part of a login sequence.
    If it does, display the payload to the screen.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理数据包，你首先从数据包中提取应用层，并检查它是否确实存在❷，因为应用层包含FTP命令和数据。你通过检查`packet.ApplicationLayer()`的响应值是否为`nil`来寻找应用层。假设数据包中存在应用层，你可以通过调用`appLayer.Payload()`来从该层提取有效负载（FTP命令/数据）❸。（对于提取和检查其他层及数据，也有类似的方法，但你只需要应用层的有效负载。）提取了有效负载后，你接着检查该有效负载是否包含`USER`或`PASS`命令❹，这表明它是登录序列的一部分。如果包含，则将有效负载显示到屏幕上。
- en: 'Here’s a sample run that captures an FTP login attempt:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个捕获FTP登录尝试的示例：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Of course, you can improve this code. In this example, the payload will be displayed
    if the words `USER` or `PASS` exist anywhere in the payload. Really, the code
    should be searching only the beginning of the payload to eliminate false-positives
    that occur when those keywords appear as part of file contents transferred between
    client and server or as part of a longer word such as `PASSAGE` or `ABUSER`. We
    encourage you to make these improvements as a learning exercise.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以改进这段代码。在这个示例中，如果有效负载中存在`USER`或`PASS`，它们将会被显示。实际上，代码应该只搜索有效负载的开头，以消除在那些关键词出现在客户端和服务器之间传输的文件内容中，或者作为像`PASSAGE`或`ABUSER`等更长单词的一部分时所产生的误报。我们鼓励你将这些改进作为学习练习。
- en: Port Scanning Through SYN-flood Protections
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过SYN洪泛保护进行端口扫描
- en: In [Chapter 2](ch02.xhtml#ch2), you walked through the creation of a port scanner.
    You improved the code through multiple iterations until you had a high-performing
    implementation that produced accurate results. However, in some instances, that
    scanner can still produce incorrect results. Specifically, when an organization
    employs SYN-flood protections, typically all ports—open, closed, and filtered
    alike—produce the same packet exchange to indicate that the port is open. These
    protections, known as SYN *cookies*, prevent SYN-flood attacks and obfuscate the
    attack surface, producing false-positives.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.xhtml#ch2)中，你曾经演示了如何创建一个端口扫描器。通过多次迭代，你改进了代码，直到获得一个高性能的实现，能够生成准确的结果。然而，在某些情况下，那个扫描器仍然可能产生错误的结果。具体来说，当一个组织使用SYN洪泛保护时，通常所有端口——无论是开放、关闭还是过滤——都会产生相同的数据包交换，表明该端口是开放的。这些保护被称为SYN
    *cookie*，它们防止SYN洪泛攻击并模糊攻击面，从而产生误报。
- en: When a target is using SYN cookies, how can you determine whether a service
    is listening on a port or a device is falsely showing that the port is open? After
    all, in both cases, the TCP three-way handshake is completed. Most tools and scanners
    (Nmap included) look at this sequence (or some variation of it, based on the scan
    type you’ve chosen) to determine the status of the port. Therefore, you can’t
    rely on these tools to produce accurate results.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当目标使用SYN Cookie时，你如何判断一个服务是否在某个端口上监听，或者设备是否错误地显示该端口为开放状态？毕竟，在这两种情况下，TCP三次握手都是完成的。大多数工具和扫描器（包括Nmap）都查看这个序列（或根据你选择的扫描类型进行变体），以确定端口的状态。因此，你不能仅依赖这些工具来生成准确的结果。
- en: However, if you consider what happens after you’ve established a connection—an
    exchange of data, perhaps in the form of a service banner—you can deduce whether
    an actual service is responding. SYN-flood protections generally won’t exchange
    packets beyond the initial three-way handshake unless a service is listening,
    so the presence of any additional packets might indicate that a service exists.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Checking TCP Flags
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To account for SYN cookies, you have to extend your port-scanning capabilities
    to look beyond the three-way handshake by checking to see whether you receive
    any additional packets from the target after you’ve established a connection.
    You can accomplish this by sniffing the packets to see if any of them were transmitted
    with a TCP flag value indicative of additional, legitimate service communications.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '*TCP flags* indicate information about the state of a packet transfer. If you
    look at the TCP specification, you’ll find that the flags are stored in a single
    byte at position 14 in the packet’s header. Each bit of this byte represents a
    single flag value. The flag is “on” if the bit at that position is set to 1, and
    “off” if the bit is set to 0\. [Table 8-1](ch08.xhtml#ch8tab1) shows the positions
    of the flags in the byte, as per the TCP specification.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 8-1:** TCP Flags and Their Byte Positions'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '| **Bit** | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
- en: '| **Flag** | CWR | ECE | URG | ACK | PSH | RST | SYN | FIN |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
- en: 'Once you know the positions of the flags you care about, you can create a filter
    that checks them. For example, you can look for packets containing the following
    flags, which might indicate a listening service:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: ACK and FIN
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ACK
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ACK and PSH
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because you have the ability to capture and filter certain packets by using
    the `gopacket` library, you can build a utility that attempts to connect to a
    remote service, sniffs the packets, and displays only the services that communicate
    packets with these TCP headers. Assume all other services are falsely “open” because
    of SYN cookies.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Building the BPF Filter
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your BPF filter needs to check for the specific flag values that indicate packet
    transfer. The flag byte has the following values if the flags we mentioned earlier
    are turned on:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'ACK and FIN: 00010001 (0x11)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ACK: 00010000 (0x10)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ACK and PSH: 00011000 (0x18)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We included the hex equivalent of the binary value for clarity, as you’ll use
    the hex value in your filter.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'To summarize, you need to check the 14th byte (offset 13 for a 0-based index)
    of the TCP header, filtering only for packets whose flags are 0x11, 0x10, or 0x18\.
    Here’s what the BPF filter looks like:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Excellent. You have your filter.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Writing the Port Scanner
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now you’ll use the filter to build a utility that establishes a full TCP connection
    and inspects packets beyond the three-way handshake to see whether other packets
    are transmitted, indicating that an actual service is listening. The program is
    shown in [Listing 8-6](ch08.xhtml#ch8list6). For the sake of simplicity, we’ve
    opted to not optimize the code for efficiency. However, you can greatly improve
    this code by making optimizations similar to those we made in [Chapter 2](ch02.xhtml#ch2).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将使用过滤器构建一个实用程序，该程序建立一个完整的 TCP 连接，并检查三次握手之后的包，以查看是否有其他数据包被传输，表示有实际的服务在监听。该程序如[列表
    8-6](ch08.xhtml#ch8list6)所示。为了简化起见，我们选择不优化代码的效率。不过，你可以通过进行类似于我们在[第二章](ch02.xhtml#ch2)中所做的优化，来大大改进这段代码。
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 8-6: Scanning and processing packets with SYN-flood protections (*[/ch-8/syn-flood/main.go](https://github.com/blackhat-go/bhg/blob/master/ch-8/syn-flood/main.go)*)*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 8-6：带有 SYN-flood 保护的包扫描和处理（*[/ch-8/syn-flood/main.go](https://github.com/blackhat-go/bhg/blob/master/ch-8/syn-flood/main.go)*)*'
- en: Broadly speaking, your code will maintain a count of packets, grouped by port,
    to represent how confident you are that the port is indeed open. You’ll use your
    filter to select only packets with the proper flags set. The greater the count
    of matching packets, the higher your confidence that the service is listening
    on the port.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 大致来说，你的代码将维护一个数据包计数，按端口分组，表示你对该端口是否开放的信心。你将使用过滤器仅选择具有适当标志设置的数据包。匹配的数据包计数越多，你对该端口上服务是否在监听的信心就越高。
- en: Your code starts by defining several variables for use throughout ❶. These variables
    include your filter and a map named `results` that you’ll use to track your level
    of confidence that the port is open. You’ll use target ports as keys and maintain
    a count of matching packets as the map value.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码首先定义了几个变量，以便在整个过程中使用❶。这些变量包括过滤器和一个名为`results`的映射，你将用它来跟踪你对端口是否开放的信心水平。你将使用目标端口作为键，并将匹配的数据包计数作为映射值。
- en: Next you define a function, `capture()`, that accepts the interface name and
    target IP for which you’re testing ❷. The function itself bootstraps the packet
    capture much in the same way as previous examples. However, you must use different
    code to process each packet. You leverage the `gopacket` functionality to extract
    the packet’s network and transport layers ❸. If either of these layers is absent,
    you ignore the packet; that’s because the next step is to inspect the source IP
    and port of the packet ❹, and if there’s no transport or network layer, you won’t
    have that information. You then confirm that the packet source matches the IP
    address that you’re targeting ❺. If the packet source and IP address don’t match,
    you skip further processing. If the packet’s source IP and port match your target,
    you increment your confidence level for the port ❻. Repeat this process for each
    subsequent packet. Each time you get a match, your confidence level increases.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你定义一个名为`capture()`的函数，该函数接受你正在测试的接口名称和目标 IP❷。该函数本身以与之前示例相同的方式启动数据包捕获。然而，你必须使用不同的代码来处理每个数据包。你利用`gopacket`功能来提取数据包的网络层和传输层❸。如果这些层之一缺失，你就忽略该数据包；这是因为下一步是检查数据包的源
    IP 和端口❹，如果没有传输层或网络层，你就无法获取这些信息。接下来，你确认数据包的源是否与目标的 IP 地址匹配❺。如果数据包的源和 IP 地址不匹配，则跳过进一步的处理。如果数据包的源
    IP 和端口与你的目标匹配，你就会增加该端口的信心水平❻。对每个后续的数据包重复此过程。每次匹配时，你的信心水平就会增加。
- en: In your `main()` function, use a goroutine to call your `capture()` function
    ❼. Using a goroutine ensures that your packet capture and processing logic runs
    concurrently without blocking. Meanwhile, your `main()` function proceeds to parse
    your target ports, looping through them one by one ❽ and calling `net.DialTimeout`
    to attempt a TCP connection against each ❾. Your goroutine is running, actively
    watching these connection attempts, looking for packets that indicate a service
    is listening.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`main()`函数中，使用一个 goroutine 调用你的`capture()`函数❼。使用 goroutine 可以确保数据包捕获和处理逻辑并发运行而不会阻塞。同时，你的`main()`函数继续解析目标端口，逐个循环并调用`net.DialTimeout`来尝试与每个端口建立
    TCP 连接❾。你的 goroutine 正在运行，积极地监视这些连接尝试，寻找表示服务正在监听的数据包。
- en: After you’ve attempted to connect to each port, process all of your results
    by displaying only those ports that have a confidence level of 1 or more (meaning
    at least one packet matches your filter for that port) ❿. The code includes several
    calls to `time.Sleep()` to ensure you’re leaving adequate time to set up the sniffer
    and process packets.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在你尝试连接每个端口后，通过只显示那些具有1或更高置信度的端口（意味着至少有一个数据包与该端口的过滤器匹配）❿来处理所有结果。代码中包含了若干次调用`time.Sleep()`以确保你为设置嗅探器和处理数据包留出足够的时间。
- en: Let’s look at a sample run of the program, shown in [Listing 8-7](ch08.xhtml#ch8list7).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下程序的一个示例运行，见[清单 8-7](ch08.xhtml#ch8list7)。
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 8-7: Port-scanning results with confidence ratings*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 8-7：带有置信度评分的端口扫描结果*'
- en: The test successfully determines that both port 80 and 443 are open. It also
    confirms that no service is listening on ports 8123 and 65530\. (Note that we’ve
    changed the IP address in the example to protect the innocent.)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 测试成功地确定了端口80和443是开放的。它还确认了在端口8123和65530上没有服务在监听。（请注意，我们已更改示例中的IP地址以保护无辜者。）
- en: 'You could improve the code in several ways. As learning exercises, we challenge
    you to add the following enhancements:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过几种方式改进代码。作为学习练习，我们挑战你添加以下增强功能：
- en: Remove the network and transport layer logic and source checks from the `capture()`
    function. Instead, add additional parameters to the BPF filter to ensure that
    you capture only packets from your target IP and ports.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`capture()`函数中移除网络层和传输层的逻辑以及源检查。改为向BPF过滤器添加额外的参数，以确保你只捕获来自目标IP和端口的数据包。
- en: Replace the sequential logic of port scanning with a concurrent alternative,
    similar to what we demonstrated in previous chapters. This will improve efficiency.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将端口扫描的顺序逻辑替换为并发替代方案，类似于我们在前几章中演示的内容。这将提高效率。
- en: Rather than limiting the code to a single target IP, allow the user to supply
    a list of IPs or network blocks.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与其将代码限制为单一目标IP，不如允许用户提供IP列表或网络块。
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: We’ve completed our discussion of packet captures, focusing primarily on passive
    sniffing activities. In the next chapter, we’ll focus on exploit development.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了对数据包捕获的讨论，主要集中在被动嗅探活动上。在下一章中，我们将重点讨论漏洞开发。
