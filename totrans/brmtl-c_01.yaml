- en: Part I
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Embedded Programming
  prefs: []
  type: TYPE_NORMAL
- en: Let me describe a “simple” embedded system. It is a battery-powered processor
    housed in a pendant worn around someone’s neck. When the end user has an emergency,
    they press the button and the computer sends a radio signal to a receiver that
    makes an emergency call.
  prefs: []
  type: TYPE_NORMAL
- en: Sounds simple . . . except you have to send a precise set of pulses to the radio
    so it will generate the proper signal. The system must periodically check the
    battery and send battery information to the base station as well, which serves
    two purposes. First, when the battery starts to get a little low, the alarm company
    is notified and sends the end user a new pendant. Second, if the base station
    doesn’t receive a periodic signal, the alarm company knows that something is wrong
    with the pendant.
  prefs: []
  type: TYPE_NORMAL
- en: This type of program is typical in the embedded world. It’s small, must be precise,
    and doesn’t use a lot of outside resources.
  prefs: []
  type: TYPE_NORMAL
- en: In this section of the book, you’ll learn about basic C syntax and programming.
    We also go through in detail what the C compiler does so you can precisely control
    what your program does. To have this precise control, you need to know what the
    compiler is doing behind your back.
  prefs: []
  type: TYPE_NORMAL
- en: Embedded programming presents its own unique debugging challenges. Fortunately,
    tools like the JTAG debugging interface make things easier, but still, debugging
    an embedded system can be quite difficult.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most basic and common debugging methods is to put `printf` statements
    in your code. This is somewhat difficult when doing embedded programming, as there’s
    no place to send printed output. We’ll cover how to use serial I/O to get printed
    data out of the embedded system for debugging and logging.
  prefs: []
  type: TYPE_NORMAL
- en: And finally, in this part of the book, you’ll learn about interrupt programming.
    Interrupts allow you to perform I/O efficiently, but they also allow you to create
    race conditions and other random bugs if not done right. Design is extremely important
    here because interrupt problems can be quite debug-resistant.
  prefs: []
  type: TYPE_NORMAL
- en: Welcome to the world of embedded programming. Have fun.
  prefs: []
  type: TYPE_NORMAL
