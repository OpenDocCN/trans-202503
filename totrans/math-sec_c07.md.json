["```\nfrom shapely.geometry import Point\npoint_a = Point(2.0, 4.0)\npoint_b = Point(0.0, 0.0)\n```", "```\nfrom shapely.geometry import LineString\nline = LineString([(2.0, 4.0), (0.0, 0.0)])\nline2 = LineString([point_a, point_b])\n```", "```\nfrom shapely.geometry import Polygon\npoly_a = Polygon([(0, 0), (10, 0), (7, 5), (3, 5)])\npoly_b = Polygon([point_a, point_b, (10, 0), point_a])\n```", "```\nfrom shapely.geometry import Polygon, LinearRing\npoly_a = Polygon([(0, 0), (10, 0), (7, 5), (3, 5)])\npoly_hole = LinearRing([(2, 2), (8, 2), (5, 3), (4, 3)])\nrbus_b_holed = Polygon(poly_a, [poly_hole])\n```", "```\nring = LinearRing([(0,0), (1,1), (1,0)])\nprint(ring.is_ccw)\nnew_ring = LinearRing(list(ring.coords)[::-1])\nprint(new_ring.is_ccw)\n```", "```\npark = Polygon([(0,0), (4.5,0.5), (9,3), (14,7), (12,9), (5,9)])\ninfo_booth = LinearRing([(4,2), (5,2), (5,3), (4,3)])\nstage = LinearRing([(6,7), (9,7), (9,8), (6,8)])\nevent_shape = Polygon(list(park.exterior.coords), [info_booth, stage])\nevent_area = event_shape.area*10\nprint (f\"{event_area} m^2 usable area\")\n```", "```\n635.00 m^2 usable area\n```", "```\nimport math\nsafe_capacity = int(math.floor(event_area / 0.75)) # 8ft sq\nmax_capacity = int(math.floor(event_area / 0.37))  # 4ft sq\nprint(\"Comfortable capacity: %d people\" % safe_capacity)\nprint(\"Maximum safe capacity: %d people\" % max_capacity)\n```", "```\nComfortable capacity: 846 people\nMaximum safe capacity: 1716 people\n```", "```\nfrom shapely.ops import triangulate\ntess = triangulate(event_shape)\narea_dict = {i: tess[i].area for i in range(len(tess))}\nsort_areas = sorted(area_dict.items(), key=lambda x: x[1], reverse=True)\nsec_points = [tess[t[0]].centroid.coords[0] for t in sort_areas[:15]]\n```", "```\nperimeter_len = event_shape.exterior.length*10\nwalk_time = perimeter_len / (1.1 * 60)\nprint (\"%.2f meter perimeter\" % perimeter_len)\nprint (\"%.2f minutes\" % walk_time)\n```", "```\n362.03 meter perimeter\n5.49 minutes\n```", "```\nfinalized = []\n❶ s2 = Polygon(stage)\ni2 = Polygon(info_booth)\nfor guard_station in sec_points:\n    i = 0\n    new_station = Point(guard_station)\n    while any([\n      ❷ (s2.contains(new_station)),\n        (i2.contains(new_station))\n    ]):\n        `--snip--`\n      ❸ new_area = sort_areas[15+i]\n        i += 1\n        poss = tess[new_area[0]].centroid.coords[0]\n        if poss not in sec_points:\n            new_station = poss\n            new_station = Point(poss)\n    finalized.append(list(new_station.coords[0]))\n```"]