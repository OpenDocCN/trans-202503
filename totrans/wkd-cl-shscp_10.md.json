["```\n   #!/bin/bash\n\n   # checklinks--Traverses all internal URLs on a website, reporting\n   #   any errors in the \"traverse.errors\" file\n\n   # Remove all the lynx traversal output files upon completion.\n   trap \"$(which rm) -f traverse.dat traverse2.dat\" 0\n\n   if [ -z \"$1\" ] ; then\n     echo \"Usage: checklinks URL\" >&2\n     exit 1\n   fi\n\n   baseurl=\"$(echo $1 | cut -d/ -f3 | sed 's/http:\\/\\///')\"\n\n   lynx➊ -traversal -accept_all_cookies➋ -realm \"$1\" > /dev/null\n\n   if [ -s \"traverse.errors\" ] ; then\n     /bin/echo -n $(wc -l < traverse.errors) errors encountered.\n➌   echo Checked $(grep '^http' traverse.dat | wc -l) pages at ${1}:\n     sed \"s|$1||g\" < traverse.errors\n     mv traverse.errors ${baseurl}.errors\n     echo \"A copy of this output has been saved in ${baseurl}.errors\"\n   else\n     /bin/echo -n \"No errors encountered. \";\n     echo Checked $(grep '^http' traverse.dat | wc -l) pages at ${1}\n   fi\n\n   if [ -s \"reject.dat\" ]; then\n     mv reject.dat ${baseurl}.rejects\n   fi\n\n   exit 0\n```", "```\n$ checklinks http://www.404-error-page.com/\nNo errors encountered. Checked 1 pages at http://www.404-error-page.com/\n```", "```\n$ checklinks http://www.intuitive.com/library/\n5 errors encountered. Checked 62 pages at http://intuitive.com/library/:\n   index/   in BeingEarnest.shtml\n   Archive/f8     in Archive/ArtofWriting.html\n   Archive/f11    in Archive/ArtofWriting.html\n   Archive/f16    in Archive/ArtofWriting.html\n   Archive/f18    in Archive/ArtofWriting.html\nA copy of this output has been saved in intuitive.com.errors\n```", "```\n$ time checklinks http://www.daveonfilm.com/\nNo errors encountered. Checked 982 pages at http://www.daveonfilm.com/\n\nreal  50m15.069s\nuser  0m42.324s\nsys  0m6.801s\n```", "```\n   #!/bin/bash\n\n   # checkexternal--Tests all URLs on a website to build a list of external\n   #   references, then check each one to ascertain which might be dead or\n   #   otherwise broken. The -a flag forces the script to list all matches,\n   #   whether they're accessible or not; by default, only unreachable links\n   #   are shown.\n\n   listall=0; errors=0; checked=0\n\n   if [ \"$1\" = \"-a\" ] ; then\n     listall=1; shift\n   fi\n\n   if [ -z \"$1\" ] ; then\n     echo \"Usage: $(basename $0) [-a] URL\" >&2\n     exit 1\n   fi\n\n   trap \"$(which rm) -f traverse*.errors reject*.dat traverse*.dat\" 0\n\n   outfile=\"$(echo \"$1\" | cut -d/ -f3).errors.ext\"\n   URLlist=\"$(echo $1 | cut -d/ -f3 | sed 's/www\\.//').rejects\"\n\n   rm -f $outfile     # Ready for new output\n\n   if [ ! -e \"$URLlist\" ] ; then\n     echo \"File $URLlist not found. Please run checklinks first.\" >&2\n     exit 1\n   fi\n\n   if [ ! -s \"$URLlist\" ] ; then\n     echo \"There don't appear to be any external links ($URLlist is empty).\" >&2\n     exit 1\n   fi\n\n   #### Now, finally, we're ready to begin...\n\n   for URL in $(cat $URLlist | sort | uniq)\n   do\n➊   curl -s \"$URL\" > /dev/null 2>&1; return=$?\n     if [ $return -eq 0 ] ; then\n       if [ $listall -eq 1 ] ; then\n         echo \"$URL is fine.\"\n       fi\n     else\n       echo \"$URL fails with error code $return\"\n       errors=$(( $errors + 1 ))\n     fi\n     checked=$(( $checked + 1 ))\n   done\n\n   echo \"\"\n   echo \"Done. Checked $checked URLs and found $errors errors.\"\n   exit 0\n```", "```\n$ checkexternal -a http://intuitive.com/\nhttp://chemgod.slip.umd.edu/~kidwell/weather.html fails with error code 6\nhttp://epoch.oreilly.com/shop/cart.asp fails with error code 7\nhttp://ezone.org:1080/ez/ fails with error code 7\nhttp://fx.crewtags.com/blog/ fails with error code 6\nhttp://linc.homeunix.org:8080/reviews/wicked.html fails with error code 6\nhttp://links.browser.org/ fails with error code 6\nhttp://nell.boulder.lib.co.us/ fails with error code 6\nhttp://rpms.arvin.dk/slocate/ fails with error code 6\nhttp://rss.intuitive.com/ fails with error code 6\nhttp://techweb.cmp.com/cw/webcommerce fails with error code 6\nhttp://tenbrooks11.lanminds.com/ fails with error code 6\nhttp://www.101publicrelations.com/blog/ fails with error code 6\nhttp://www.badlink/somewhere.html fails with error code 6\nhttp://www.bloghop.com/ fails with error code 6\nhttp://www.bloghop.com/ratemyblog.htm fails with error code 6\nhttp://www.blogphiles.com/webring.shtml fails with error code 56\nhttp://www.blogstreet.com/blogsqlbin/home.cgi fails with error code 56\nhttp://www.builder.cnet.com/ fails with error code 6\nhttp://www.buzz.builder.com/ fails with error code 6\nhttp://www.chem.emory.edu/html/html.html fails with error code 6\nhttp://www.cogsci.princeton.edu/~wn/ fails with error code 6\nhttp://www.ourecopass.org/ fails with error code 6\nhttp://www.portfolio.intuitive.com/portfolio/ fails with error code 6\n\nDone. Checked 156 URLs and found 23 errors.\n```", "```\n$ cat .htaccess\nAuthUserFile /usr/lib/cgi-bin/.htpasswd\nAuthGroupFile /dev/null\nAuthName \"Members Only Data Area.\"\nAuthType Basic\n\n<Limit GET>\nrequire valid-user\n</Limit>\n```", "```\n   #!/bin/bash\n\n   # apm--Apache Password Manager allows the administrator to easily\n   #   add, update, or delete accounts and passwords for a subdirectory\n   #   of a typical Apache configuration (where the config file is called\n   #   .htaccess).\n echo \"Content-type: text/html\"\n   echo \"\"\n   echo \"<html><title>Apache Password Manager Utility</title><body>\"\n\n   basedir=$(pwd)\n   myname=\"$(basename $0)\"\n   footer=\"$basedir/apm-footer.html\"\n   htaccess=\"$basedir/.htaccess\"\n\n   htpasswd=\"$(which htpasswd) -b\"\n\n   # It's strongly suggested you include the following code for security purposes:\n   #\n   # if [ \"$REMOTE_USER\" != \"admin\" -a -s $htpasswd ] ; then\n   #   echo \"Error: You must be user <b>admin</b> to use APM.\"\n   #   exit 0\n   # fi\n\n   # Now get the password filename from the .htaccess file.\n\n   if [ ! -r \"$htaccess\" ] ; then\n     echo \"Error: cannot read $htaccess file.\"\n     exit 1\n   fi\n\n   passwdfile=\"$(grep \"AuthUserFile\" $htaccess | cut -d\\   -f2)\"\n   if [ ! -r $passwdfile ] ; then\n     echo \"Error: can't read password file: can't make updates.\"\n     exit 1\n   elif [ ! -w $passwdfile ] ; then\n     echo \"Error: can't write to password file: can't update.\"\n     exit 1\n   fi\n\n   echo \"<center><h1 style='background:#ccf;border-radius:3px;border:1px solid\n   #99c;padding:3px;'>\"\n   echo \"Apache Password Manager</h1>\"\n\n   action=\"$(echo $QUERY_STRING | cut -c3)\"\n   user=\"$(echo $QUERY_STRING|cut -d\\& -f2|cut -d= -f2|\\\n   tr '[:upper:]' '[:lower:]')\"\n\n➊ case \"$action\" in\n     A ) echo \"<h3>Adding New User <u>$user</u></h3>\"\n           if [ ! -z \"$(grep -E \"^${user}:\" $passwdfile)\" ] ; then\n             echo \"Error: user <b>$user</b> already appears in the file.\"\n           else\n             pass=\"$(echo $QUERY_STRING|cut -d\\& -f3|cut -d= -f2)\"\n➋           if [ ! -z \"$(echo $pass|tr -d '[[:upper:][:lower:][:digit:]]')\" ];\n             then\n               echo \"Error: passwords can only contain a-z A-Z 0-9 ($pass)\"\n else\n➌             $htpasswd $passwdfile \"$user\" \"$pass\"\n               echo \"Added!<br>\"\n             fi\n           fi\n           ;;\n     U ) echo \"<h3>Updating Password for user <u>$user</u></h3>\"\n           if [ -z \"$(grep -E \"^${user}:\" $passwdfile)\" ] ; then\n             echo \"Error: user <b>$user</b> isn't in the password file?\"\n             echo \"searched for &quot;^${user}:&quot; in $passwdfile\"\n           else\n             pass=\"$(echo $QUERY_STRING|cut -d\\& -f3|cut -d= -f2)\"\n             if [ ! -z \"$(echo $pass|tr -d '[[:upper:][:lower:][:digit:]]')\" ];\n             then\n               echo \"Error: passwords can only contain a-z A-Z 0-9 ($pass)\"\n             else\n               grep -vE \"^${user}:\" $passwdfile | tee $passwdfile > /dev/null\n               $htpasswd $passwdfile \"$user\" \"$pass\"\n               echo \"Updated!<br>\"\n             fi\n           fi\n           ;;\n     D ) echo \"<h3>Deleting User <u>$user</u></h3>\"\n           if [ -z \"$(grep -E \"^${user}:\" $passwdfile)\" ] ; then\n             echo \"Error: user <b>$user</b> isn't in the password file?\"\n           elif [ \"$user\" = \"admin\" ] ; then\n             echo \"Error: you can't delete the 'admin' account.\"\n           else\n             grep -vE \"^${user}:\" $passwdfile | tee $passwdfile >/dev/null\n             echo \"Deleted!<br>\"\n           fi\n           ;;\n   esac\n\n   # Always list the current users in the password file...\n\n   echo \"<br><br><table border='1' cellspacing='0' width='80%' cellpadding='3'>\"\n   echo \"<tr bgcolor='#cccccc'><th colspan='3'>List \"\n   echo \"of all current users</td></tr>\"\n➍ oldIFS=$IFS ; IFS=\":\"   # Change word split delimiter...\n     while read acct pw ; do\n       echo \"<tr><th>$acct</th><td align=center><a href=\\\"$myname?a=D&u=$acct\\\">\"\n       echo \"[delete]</a></td></tr>\"\n     done < $passwdfile\n     echo \"</table>\"\n     IFS=$oldIFS             # ...and restore it.\n\n     # Build selectstring with all accounts included...\n➎ optionstring=\"$(cut -d: -f1 $passwdfile | sed 's/^/<option>/'|tr '\\n' ' ')\"\n\n     if [ ! -r $footer ] ; then\n       echo \"Warning: can't read $footer\"\n   else\n     # ...and output the footer.\n➏   sed -e \"s/--myname--/$myname/g\" -e \"s/--options--/$optionstring/g\" < $footer\n   fi\n\n   exit 0\n```", "```\na=A&u=joe&p=knife\n```", "```\n<!-- footer information for APM system. -->\n\n<div style='margin-top: 10px;'>\n<table border='1' cellpadding='2' cellspacing='0' width=\"80%\"\n style=\"border:2px solid #666;border-radius:5px;\" >\n <tr><th colspan='4' bgcolor='#cccccc'>Password Manager Actions</th></tr>\n <tr><td>\n  <form method=\"get\" action=\"--myname--\">\n  <table border='0'>\n    <tr><td><input type='hidden' name=\"a\" value=\"A\">\n     add user:</td><td><input type='text' name='u' size='15'>\n    </td></tr><tr><td>\n     password: </td><td> <input type='text' name='p' size='15'>\n    </td></tr><tr><td colspan=\"2\" align=\"center\">\n     <input type='submit' value='add' style=\"background-color:#ccf;\">\n    </td></tr>\n  </table></form>\n</td><td>\n  <form method=\"get\" action=\"--myname--\">\n  <table border='0'>\n    <tr><td><input type='hidden' name=\"a\" value=\"U\">\n      update</td><td><select name='u'>--options--</select>\n    </td></tr><tr><td>\n      password: </td><td><input type='text' name='p' size='10'>\n    </td></tr><tr><td colspan=\"2\" align=\"center\">\n      <input type='submit' value='update' style=\"background-color:#ccf;\">\n    </td></tr>\n  </table></form>\n</td><td>\n  <form method=\"get\" action=\"--myname--\"><input type='hidden'\n    name=\"a\" value=\"D\">delete <select name='u'> --options-- </select>\n    <br /><br /><center>\n    <input type='submit' value='delete' style=\"background-color:#ccf;\"></\ncenter></form>\n</td></tr>\n</table>\n</div>\n\n<h5 style='background:#ccf;border-radius:3px;border:1px solid\n#99c;padding:3px;'>\n  From the book <a href=\"http://www.intuitive.com/wicked/\">Wicked Cool Shell\nScripts</a>\n</h5>\n\n</body></html>\n```", "```\n  #!/bin/bash\n\n   # sftpsync--Given a target directory on an sftp server, makes sure that\n   #   all new or modified files are uploaded to the remote system. Uses\n   #   a timestamp file ingeniously called .timestamp to keep track.\n\n   timestamp=\".timestamp\"\n   tempfile=\"/tmp/sftpsync.$$\"\n   count=0\n\n   trap \"$(which rm) -f $tempfile\" 0 1 15      # Zap tempfile on exit\n\n   if [ $# -eq 0 ] ; then\n     echo \"Usage: $0 user@host { remotedir }\" >&2\n     exit 1\n   fi\n\n   user=\"$(echo $1 | cut -d@ -f1)\"\n   server=\"$(echo $1 | cut -d@ -f2)\"\n\n   if [ $# -gt 1 ] ; then\n     echo \"cd $2\" >> $tempfile\n   fi\n\n   if [ ! -f $timestamp ] ; then\n     # If no timestamp file, upload all files.\n     for filename in *\n     do\n       if [ -f \"$filename\" ] ; then\n         echo \"put -P \\\"$filename\\\"\" >> $tempfile\n         count=$(( $count + 1 ))\n       fi\n     done\n   else\n     for filename in $(find . -newer $timestamp -type f -print)\n     do\n       echo \"put -P \\\"$filename\\\"\" >> $tempfile\n       count=$(( $count + 1 ))\n     done\n   fi\n\n   if [ $count -eq 0 ] ; then\n     echo \"$0: No files require uploading to $server\" >&2\n     exit 1\n   fi\n\n   echo \"quit\" >> $tempfile\n\n   echo \"Synchronizing: Found $count files in local folder to upload.\"\n\n➊ if ! sftp -b $tempfile \"$user@$server\" ; then\n      echo \"Done. All files synchronized up with $server\"\n      touch $timestamp\n   fi\n   exit 0\n```", "```\nsftp -b $tempfile \"$user@$server\"\ntouch $timestamp\n```", "```\nalias ssync=\"sftpsync taylor@intuitive.com /wicked/scripts\"\n```", "```\n$ sftpsync taylor@intuitive.com /wicked/scripts\nSynchronizing: Found 2 files in local folder to upload.\nConnecting to intuitive.com...\ntaylortaylor@intuitive.com's password:\nsftp> cd /wicked/scripts\nsftp> put -P \"./003-normdate.sh\"\nUploading ./003-normdate.sh to /usr/home/taylor/usr/local/etc/httpd/htdocs/\nintuitive/wicked/scripts/003-normdate.sh\nsftp> put -P \"./004-nicenumber.sh\"\nUploading ./004-nicenumber.sh to /usr/home/taylor/usr/local/etc/httpd/htdocs/\nintuitive/wicked/scripts/004-nicenumber.sh\nsftp> quit\nDone. All files synchronized up with intuitive.com\n```", "```\n#!/bin/bash\n\n# ssync--If anything has changed, creates a tarball and syncs a remote\n#   directory via sftp using sftpsync\n\nsftpacct=\"taylor@intuitive.com\"\ntarballname=\"AllFiles.tgz\"\nlocalsource=\"$HOME/Desktop/Wicked Cool Scripts/scripts\"\nremotedir=\"/wicked/scripts\"\ntimestamp=\".timestamp\"\ncount=0\n\n# First off, let's see if the local directory exists and has files.\n\nif [ ! -d \"$localsource\" ] ; then\n  echo \"$0: Error: directory $localsource doesn't exist?\" >&2\n  exit 1\nfi\n\ncd \"$localsource\"\n\n# Now let's count files to ensure something's changed.\n\nif [ ! -f $timestamp ] ; then\n  for filename in *\n  do\n    if [ -f \"$filename\" ] ; then\n      count=$(( $count + 1 ))\n    fi\n  done\nelse\n  count=$(find . -newer $timestamp -type f -print | wc -l)\nfi\n\nif [ $count -eq 0 ] ; then\n  echo \"$(basename $0): No files found in $localsource to sync with remote.\"\n  exit 0\nfi\n\necho \"Making tarball archive file for upload\"\n\ntar -czf $tarballname ./*\n\n# Done! Now let's switch to the sftpsync script.\n\nexec sftpsync $sftpacct $remotedir\n```", "```\n$ ssync\nMaking tarball archive file for upload\nSynchronizing: Found 2 files in local folder to upload.\nConnecting to intuitive.com...\ntaylor@intuitive.com's password:\nsftp> cd shellhacks/scripts\nsftp> put -P \"./AllFiles.tgz\"\nUploading ./AllFiles.tgz to shellhacks/scripts/AllFiles.tgz\nsftp> put -P \"./ssync\"\nUploading ./ssync to shellhacks/scripts/ssync\nsftp> quit\nDone. All files synchronized up with intuitive.com\n```"]