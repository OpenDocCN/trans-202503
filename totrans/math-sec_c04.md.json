["```\nimport networkx as nx\nfrom scapy.all import rdpcap, IP, TCP, UDP\n\n❶ net_graph = nx.MultiDiGraph()\n❷ packets = rdpcap('network_sim.pcap')\n❸ for packet in packets:\n  ❹ if not packet.haslayer(IP):\n        # Not a packet to analyze.\n        continue\n  ❺ mac_src = packet.src        # Sender MAC\n    mac_dst = packet.dst        # Receiver MAC\n  ❻ ip_src = packet[IP].src     # Sender IP\n    ip_dst = packet[IP].dst     # Receiver IP\n  ❼ w = packet[IP].len          # Number of bytes in packet\n  ❽ if packet.haslayer(TCP):\n        sport=packet[TCP].sport # Sender port\n dport=packet[TCP].dport # Receiver port\n  ❾ elif packet.haslayer(UDP):\n        sport=packet[UDP].sport # Sender port\n        dport=packet[UDP].dport # Receiver port\n    else:\n        # Not a packet to analyze.\n        continue\n    # Define an edge in the graph.\n  ❿ net_graph.add_edge(\n        *(str(mac_src), str(mac_dst)),\n        ip_src=ip_src,\n        ip_dst=ip_dst,\n        sport=sport,\n        dport=dport,\n        weight=w\n    )\nprint(len(net_graph.nodes))\n```", "```\ndef protocol_subgraph(G, port):\n    o_edges = [(u,v,d) for u,v,d in G.edges(data=True) if d[\"dport\"] == port]\n    if len(o_edges) < 1:\n        return None\n    subgraph = nx.DiGraph()\n    subgraph.add_edges_from(o_edges)\n    return subgraph\n```", "```\ndG = protocol_subgraph(net_graph, 80)\nout_deg = dG.out_degree(weight='weight')\nsorted_deg = sorted(out_deg, key=lambda x: (x[1], x[0]), reverse=True)\nprint(sorted_deg[0])\n```", "```\n('1c:6a:7a:0e:e0:41', 592)\n```", "```\npsi = [80, 2503, 55553, 443]\nfor proto in psi:\n    dG = protocol_subgraph(net_graph, proto)\n    out_deg = dG.out_degree(weight='weight')\n    sorted_deg = sorted(out_deg, key=lambda x: (x[1], x[0]), reverse=True)\n    print(proto, sorted_deg[0])\n```", "```\n80 ('1c:6a:7a:0e:e0:41', 592)\n2503 ('00:26:9e:3d:00:2a', 949)\n55553 ('1c:6a:7a:0e:e0:41', 52)\n443 ('00:0c:29:ac:42:4b', 678)\n```", "```\nfrom scipy import stats\nimport numpy as np\nprotoG = protocol_subgraph(net_graph, 80)\nin_deg = list(protoG.in_degree(weight='weight'))\nscores = np.array([v[1] for v in in_deg])\n❶ z_thresh = stats.norm.ppf(0.95) # 95% confidence\nin_degree_z = stats.zscore(scores)\n❷ outlier_idx = list(np.where(in_degree_z > z_thresh)[0])\nnodes = [in_deg[i][0] for i in outlier_idx]\nprint(nodes)\n```", "```\n['7c:ad:74:c2:a9:a2', '1c:6a:7a:0e:e0:4e']\n```", "```\ndG = nx.DiGraph()\ndG.add_edges_from(net_graph.edges(data=True))\nout_deg = dG.out_degree()\nout_deg = sorted(out_deg, key=lambda x: (x[1], x[0]), reverse=True)\nu, score = out_deg[0]\nprint(u, score)\n```", "```\ndef exchange_ratios(G):\n    res = []\n  ❶ for u in G.nodes.keys():\n      ❷ out_edges = G.out_edges(u, data=True)\n        in_edges = G.in_edges(u, data=True)\n        if len(out_edges) > 0:\n          ❸ out_w = 1 + sum([d[\"weight\"] for u,v,d in out_edges])\n        else:\n          ❹ out_w = 1\n        if len(in_edges) > 0:\n            in_w = 1 + sum([d[\"weight\"] for u,v,d in in_edges])\n        else:\n            in_w = 1\n      ❺ ier = in_w / out_w\n        res.append((u, ier))\n    return sorted(res, key=lambda x:(x[1], x[0]))\n```", "```\n❶ ier_scores = exchange_ratios(net_graph)\n❷ z_thresh = round(stats.norm.ppf(0.99),3)\n❸ ier_z = stats.zscore([s[1] for s in ier_scores])\n❹ outlier_idx = list(np.where(ier_z > z_thresh)[0])\n❺ ier_outliers = [ier_scores[i] for i in outlier_idx]\nprint(ier_outliers)\n```", "```\n[('01:00:5e:7f:ff:fa',18570.0),('ff:ff:ff:ff:ff:ff',35405.0),('01:00:5e:00:00:fb',46026.0)]\n```", "```\ndef file_to_graph(pcap_file):\n    packets = rdpcap(pcap_file)\n    new_graph = pcap_graph(packets)\n    return new_graph\n```", "```\n$ **python packet_analysis.py -h**\n```", "```\nUsage: packet_analysis.py [options]\nOptions:\n  -h, --help show this help message and exit\n  -i IFACE, --iface=IFACE The network interface to bind to       (required, -i all for all)\n  -c COUNT, --count=COUNT Number of packets to capture                         (default 10)\n  -r RAW_FILE, --raw-out=RAW_FILE File to save the captured packets to       (default None)\n  -s GRAPH_FILE, --graph-out=GRAPH_FILE File to save the created graph to        (required)\n  -l LOAD_FILE, --load=LOAD_FILE Pcap file to load packets from\n```", "```\n$ **python packet_analysis.py -i all -c 100 -s my_test.edges**\n```", "```\nG = nx.read_weighted_edgelist(\"my_test.edges\", create_using=nx.DiGraph)\n```", "```\n$ **python packet_analysis.py -l network_sim.pcap -s sim_test.edges**\n```", "```\n$ **python packet_analysis.py -i** `eth0` **-c 100 -s my_test.edges -r cap_test.pcap**\n```"]