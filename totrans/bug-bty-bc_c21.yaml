- en: '21'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '21'
- en: Information Disclosure
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 信息泄露
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: The IDOR vulnerabilities covered in Chapter 10 are a common way for applications
    to leak private information about users. But an attacker can uncover sensitive
    information from a target application in other ways too. I call these bugs *information
    disclosure* bugs. These bugs are common; in fact, they’re the type of bug I find
    most often while bug bounty hunting, even when I’m searching for other bug types.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章中涉及的IDOR漏洞是应用程序泄露用户私密信息的常见方式。但攻击者也可以通过其他方式从目标应用程序中揭露敏感信息。我称这些漏洞为*信息泄露*漏洞。这些漏洞很常见；事实上，它们是我在漏洞奖励猎捕过程中最常发现的漏洞类型，即使我在寻找其他类型的漏洞时也是如此。
- en: These bugs can happen in many ways, depending on the application. In this chapter,
    we’ll talk about a few ways you might manage to leak data from an application,
    and how you can maximize the chances of finding an information disclosure yourself.
    This chapter delves into some of the techniques mentioned in Chapter 5, but with
    a focus on extracting sensitive and private information by using these techniques.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这些漏洞可能以多种方式发生，具体取决于应用程序。在本章中，我们将讨论几种可能导致应用程序泄露数据的方式，以及如何最大化自己发现信息泄露的机会。本章深入探讨了第5章中提到的一些技术，但重点是通过使用这些技术提取敏感和私密信息。
- en: Mechanisms
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机制
- en: Information disclosure occurs when an application fails to properly protect
    sensitive information, giving users access to information they shouldn’t have
    available to them. This sensitive information can include technical details that
    aid an attack, like software version numbers, internal IP addresses, sensitive
    filenames, and filepaths. It could also include source code that allows attackers
    to conduct a source code review on the application. Still other times, the application
    leaks private information of users, like a user’s age, bank account numbers, email
    addresses, and mailing addresses, to unauthorized third parties.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 信息泄露发生在应用程序未能正确保护敏感信息时，导致用户可以访问本不该提供给他们的信息。这些敏感信息可能包括帮助攻击的技术细节，如软件版本号、内部IP地址、敏感文件名和文件路径。它还可能包括源代码，攻击者可以对其进行源代码审查。此外，有时应用程序还会泄露用户的私密信息，例如用户的年龄、银行账户号码、电子邮件地址和邮寄地址，给未经授权的第三方。
- en: Most systems aim to hide development information, including software version
    numbers and configuration files, from the outside world, because it allows attackers
    to gather information about an application and strategize about how to most effectively
    attack it. For example, learning the exact software versions an application uses
    will allow attackers to look for publicly disclosed vulnerabilities that affect
    the application. Configuration files often contain information such as access
    tokens and internal IP addresses that attackers can use to further compromise
    the organization.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数系统的目标是隐藏开发信息，包括软件版本号和配置文件，以防止外部世界访问，因为这些信息允许攻击者收集有关应用程序的信息，并规划如何有效地攻击它。例如，了解应用程序使用的确切软件版本将使攻击者能够寻找公开披露的漏洞，这些漏洞可能影响该应用程序。配置文件通常包含诸如访问令牌和内部IP地址等信息，攻击者可以利用这些信息进一步攻破组织。
- en: 'Typically, applications leak version numbers in HTTP response headers, HTTP
    response bodies, or other server responses. For example, the `X-Powered-By` header,
    which is used by many applications, shows you which framework the application
    runs:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，应用程序会在HTTP响应头、HTTP响应体或其他服务器响应中泄露版本号。例如，许多应用程序使用的`X-Powered-By`头部会显示该应用程序运行的框架：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: On the other hand, applications leak sensitive configuration files by not applying
    proper access control to the files, or by accidentally uploading a sensitive file
    onto a public repository that outside users can access.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，应用程序由于未对文件应用适当的访问控制，或者不小心将敏感文件上传到公开的代码库，导致泄露敏感配置文件，这些文件是外部用户可以访问的。
- en: Another piece of information that applications should protect is their source
    code. When the backend code of an application is leaked to the public, the leaked
    code can help attackers understand the application’s logic, as well as search
    for logic flaw vulnerabilities, hardcoded credentials, or information about the
    company’s infrastructure, such as internal IPs. Applications can leak source code
    by accidentally publishing a private code repository, by sharing code snippets
    on public GitHub or GitLab repositories, or by uploading it to third-party sites
    like Pastebin.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序应该保护的另一个信息是它们的源代码。当应用程序的后端代码泄露给公众时，泄露的代码可以帮助攻击者理解应用程序的逻辑，并寻找逻辑漏洞、硬编码凭证或公司基础设施的信息，例如内部IP地址。应用程序可能会通过不小心发布私人代码仓库、在公开的GitHub或GitLab仓库中共享代码片段，或者将代码上传到像Pastebin这样的第三方网站来泄露源代码。
- en: Finally, applications often leak sensitive information by including it in their
    public code. Developers might accidentally place information such as credentials,
    internal IP addresses, informative code comments, and users’ private information
    in public source code such as the HTML and JavaScript files that get served to
    users.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，应用程序通常通过将敏感信息包含在其公开代码中而泄露敏感信息。开发人员可能会不小心将凭证、内部IP地址、信息性代码注释和用户的私人信息等内容放入公开源代码中，比如HTML和JavaScript文件，这些文件会被提供给用户。
- en: Prevention
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防范措施
- en: It’s difficult to completely prevent sensitive information leaks. But you can
    reliably lower the possibilities of information disclosure by safeguarding your
    data during the development process.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 完全防止敏感信息泄露是困难的。但通过在开发过程中保护数据，你可以可靠地降低信息泄露的可能性。
- en: The most important measure you should take is to avoid hardcoding credentials
    and other sensitive information into executable code. Instead, you can place sensitive
    information in separate configuration files or a secret storage system like Vault
    ([https://github.com/hashicorp/vault/](https://github.com/hashicorp/vault/)).
    Also, audit your public code repositories periodically to make sure sensitive
    files haven’t been uploaded by accident. Tools can help you monitor code for secrets,
    such as secret-bridge ([https://github.com/duo-labs/secret-bridge/](https://github.com/duo-labs/secret-bridge/)).
    And if you have to upload sensitive files to the production server, apply granular
    access control to restricts users’ access to the files.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该采取的最重要措施是避免将凭证和其他敏感信息硬编码到可执行代码中。相反，你可以将敏感信息放在单独的配置文件中，或存储在像Vault（[https://github.com/hashicorp/vault/](https://github.com/hashicorp/vault/)）这样的秘密存储系统中。另外，定期审核你的公共代码仓库，以确保没有敏感文件被意外上传。工具可以帮助你监控代码中的密钥，例如secret-bridge（[https://github.com/duo-labs/secret-bridge/](https://github.com/duo-labs/secret-bridge/)）。如果你必须将敏感文件上传到生产服务器，请应用细粒度的访问控制，以限制用户对文件的访问。
- en: Next, remove data from services and server responses that reveals technical
    details about the backend server setup and software versions. Handle all exceptions
    by returning a generic error page to the user, instead of a technical page that
    reveals details about the error.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，删除从服务和服务器响应中透露的有关后端服务器设置和软件版本的技术细节。在处理所有异常时，返回一个通用的错误页面给用户，而不是一个揭示错误细节的技术页面。
- en: Hunting for Information Disclosure
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 信息泄露的侦查
- en: You can use several strategies to find information disclosure vulnerabilities,
    depending on the application you’re targeting and what you’re looking for. A good
    starting point is to look for software version numbers and configuration information
    by using the recon techniques introduced in Chapter 5. Then you can start to look
    for exposed configuration files, database files, and other sensitive files uploaded
    to the production server that aren’t protected. The following steps discuss some
    techniques you can attempt.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用几种策略来寻找信息泄露漏洞，具体取决于你所针对的应用程序和你要寻找的内容。一个好的起点是使用第5章介绍的侦查技术来查找软件版本号和配置信息。然后，你可以开始查找暴露的配置文件、数据库文件以及上传到生产服务器上的其他敏感文件，这些文件没有得到保护。以下步骤讨论了一些你可以尝试的技术。
- en: 'Step 1: Attempt a Path Traversal Attack'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一步：尝试路径遍历攻击
- en: Start by trying a path traversal attack to read the server’s sensitive files.
    *Path traversal attacks* are used to access files outside the web application’s
    root folder. This process involves manipulating filepath variables the application
    uses to reference files by adding the `../` characters to them. This sequence
    refers to the parent directory of the current directory in Unix systems, so by
    adding it to a filepath, you can often reach files outside the web root.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先尝试进行路径遍历攻击，以读取服务器的敏感文件。*路径遍历攻击*用于访问 web 应用程序根文件夹之外的文件。这个过程通过添加 `../` 字符串来操纵应用程序用来引用文件的文件路径变量。这个序列在
    Unix 系统中指向当前目录的父目录，因此通过将其添加到文件路径中，你通常可以访问 web 根目录之外的文件。
- en: For example, let’s say a website allows you to load an image in the application’s
    image folder by using a relative URL. An *absolute* URL contains an entire address,
    from the URL protocol to the domain name and pathnames of the resource. *Relative*
    URLs, on the other hand, contain only a part of the full URL. Most contain only
    the path or filename of the resource. Relative URLs are used to link to another
    location on the same domain.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设一个网站允许你通过使用相对 URL 将图片加载到应用程序的图片文件夹中。*绝对* URL 包含完整的地址，从 URL 协议到域名和资源的路径。*相对*
    URL 则只包含完整 URL 的一部分。大多数相对 URL 只包含资源的路径或文件名。相对 URL 用于链接到同一域名下的其他位置。
- en: 'This URL, for example, will redirect users to *https://example.com/images/1.png*:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这个 URL 会将用户重定向到 *https://example.com/images/1.png*：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this case, the `url` parameter contains a relative URL (*/images/1.png*)
    that references files within the web application root. You can insert the `../`
    sequence to try to navigate out of the images folder and out of the web root.
    For instance, the following URL refers to the *index.html* file at the web application’s
    root folder (and out of the *images* folder):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`url` 参数包含一个相对 URL（*/images/1.png*），该 URL 引用 web 应用程序根目录中的文件。你可以插入 `../`
    序列，尝试从图片文件夹中导航出来，脱离 web 根目录。例如，以下 URL 引用的是 web 应用程序根文件夹中的 *index.html* 文件（并脱离
    *images* 文件夹）：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Similarly, this one will access the */etc/shadow* file at the server’s root
    directory, which is a file that stores a list of the system’s user accounts and
    their encrypted passwords:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，这个 URL 会访问服务器根目录下的 */etc/shadow* 文件，这是一个存储系统用户账户及其加密密码的文件：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It might take some trial and error to determine how many `../` sequences you
    need to reach the system’s root directory. Also, if the application implements
    some sort of input validation and doesn’t allow `../` in the filepath, you can
    use encoded variations of `../`, such as `%2e%2e%2f` (URL encoding), `%252e%252e%255f`
    (double URL encoding), and `..%2f` (partial URL encoding).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 确定需要多少 `../` 序列才能到达系统的根目录可能需要一些试验和错误。此外，如果应用程序实施了某种输入验证，并且不允许在文件路径中使用 `../`，你可以使用
    `../` 的编码变体，例如 `%2e%2e%2f`（URL 编码）、`%252e%252e%255f`（双重 URL 编码）和 `..%2f`（部分 URL
    编码）。
- en: 'Step 2: Search the Wayback Machine'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 2 步：搜索 Wayback Machine
- en: Another way to find exposed files is by using the Wayback Machine. Introduced
    in Chapter 5, the Wayback Machine is an online archive of what websites looked
    like at various points in time. You can use it to find hidden and deprecated endpoints,
    as well as large numbers of current endpoints without actively crawling the site,
    making it a good first look into what the application might be exposing.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种查找暴露文件的方法是使用 Wayback Machine。如第 5 章所述，Wayback Machine 是一个网站在线存档，记录了网站在不同时间点的样子。你可以利用它来查找隐藏和废弃的端点，以及大量当前的端点，而不需要主动抓取网站，使其成为了解应用程序可能暴露内容的好方式。
- en: On the Wayback Machine’s site, simply search for a domain to see its past versions.
    To search for a domain’s files, visit *https://web.archive.org/web/*/DOMAIN*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Wayback Machine 的网站上，只需搜索一个域名即可查看其历史版本。要搜索一个域名的文件，请访问 *https://web.archive.org/web/*/DOMAIN*。
- en: Add a `/*` to this URL to get the archived URLs related to the domain as a list.
    For example, *https://web.archive.org/web/*/example.com/** will return a list
    of URLs related to *example.com*. You should see the URLs displayed on the Wayback
    Machine web page ([Figure 21-1](#figure21-1)).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个 URL 后面加上 `/*`，可以获得与该域名相关的存档 URL 列表。例如，*https://web.archive.org/web/*/example.com/**
    将返回与 *example.com* 相关的 URL 列表。你应该能在 Wayback Machine 的网页上看到这些 URL（[图 21-1](#figure21-1)）。
- en: '![f21001](image_fi/501546c21/f21001.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![f21001](image_fi/501546c21/f21001.png)'
- en: 'Figure 21-1: You can list the archived URLs of a domain on the Wayback Machine.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-1：你可以在 Wayback Machine 上列出一个域名的存档 URL。
- en: You can then use the search function to see whether any sensitive pages have
    been archived. For example, to look for admin pages, search for the term */admin*
    in the found URLs ([Figure 21-2](#figure21-2)).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以使用搜索功能查看是否有敏感页面被归档。例如，要查找管理员页面，可以在找到的 URL 中搜索术语 */admin*（[图 21-2](#figure21-2)）。
- en: '![f21002](image_fi/501546c21/f21002.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![f21002](image_fi/501546c21/f21002.png)'
- en: 'Figure 21-2: Search for keywords in the URLs to find potentially sensitive
    pages.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-2：在 URL 中搜索关键词，以查找可能敏感的页面。
- en: You can also search for backup files and configuration files by using common
    file extensions like *.conf* ([Figure 21-3](#figure21-3)) and *.env*, or look
    for source code, like JavaScript or PHP files, by using the file extensions *.js*
    and *.php*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过使用常见的文件扩展名，如 *.conf*（[图 21-3](#figure21-3)）和 *.env*，来搜索备份文件和配置文件，或者通过使用
    *.js* 和 *.php* 文件扩展名来查找源代码，例如 JavaScript 或 PHP 文件。
- en: '![f21003](image_fi/501546c21/f21003.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![f21003](image_fi/501546c21/f21003.png)'
- en: 'Figure 21-3: Filter the URLs by file extension to find files of a certain type.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-3：通过文件扩展名过滤 URL，以查找特定类型的文件。
- en: Download interesting archived pages and look for any sensitive info. For example,
    are there any hardcoded credentials that are still in use, or does the page leak
    any hidden endpoints that normal users shouldn’t know about?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 下载有趣的归档页面，查看是否有敏感信息。例如，是否存在仍在使用的硬编码凭证，或者页面是否泄露了普通用户不应知道的隐藏端点？
- en: 'Step 3: Search Paste Dump Sites'
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3：搜索粘贴文件站点
- en: Next, look into paste dump sites like Pastebin and GitHub gists. These let users
    share text documents via a direct link rather than via email or services like
    Google Docs, so developers often use them to send source code, configuration files,
    and log files to their coworkers. But on a site like Pastebin, for example, shared
    text files are public by default. If developers upload a sensitive file, everyone
    will be able to read it. For this reason, these code-sharing sites are pretty
    infamous for leaking credentials like API keys and passwords.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，查看像 Pastebin 和 GitHub gists 这样的粘贴文件站点。这些站点允许用户通过直接链接而非通过电子邮件或像 Google Docs
    这样的服务共享文本文件，因此开发人员通常使用这些站点将源代码、配置文件和日志文件发送给同事。但在像 Pastebin 这样的站点上，共享的文本文件默认是公开的。如果开发人员上传了敏感文件，所有人都可以阅读它。正因为如此，这些代码共享站点因泄露
    API 密钥和密码等凭证而臭名昭著。
- en: 'Pastebin has an API that allows users to search for public paste files by using
    a keyword, email, or domain name. You can use this API to find sensitive files
    that belong to a certain organization. Tools like PasteHunter or pastebin-scraper
    can also automate the process. Pastebin-scraper ([https://github.com/streaak/pastebin-scraper/](https://github.com/streaak/pastebin-scraper/))
    uses the Pastebin API to help you search for paste files. This tool is a shell
    script, so download it to a local directory and run the following command to search
    for public paste files associated with a particular keyword. The `-g` option indicates
    a general keyword search:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Pastebin 提供了一个 API，允许用户通过关键词、电子邮件或域名搜索公开的粘贴文件。你可以使用这个 API 查找属于某个组织的敏感文件。像 PasteHunter
    或 pastebin-scraper 这样的工具也能自动化这个过程。Pastebin-scraper（[https://github.com/streaak/pastebin-scraper/](https://github.com/streaak/pastebin-scraper/)）使用
    Pastebin API 帮助你搜索粘贴文件。这个工具是一个 shell 脚本，因此可以将其下载到本地目录，并运行以下命令来搜索与特定关键词相关的公开粘贴文件。`-g`
    选项表示进行一般的关键词搜索：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This command will return a list of Pastebin file IDs associated with the specified
    `KEYWORD`. You can access the returned paste files by going to *pastebin.com/ID*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将返回与指定 `KEYWORD` 相关的 Pastebin 文件 ID 列表。你可以通过访问 *pastebin.com/ID* 来查看返回的粘贴文件。
- en: 'Step 4: Reconstruct Source Code from an Exposed .git Directory'
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 4：从暴露的 .git 目录中重构源代码
- en: Another way of finding sensitive files is to reconstruct source code from an
    exposed *.git* directory. When attacking an application, obtaining its source
    code can be extremely helpful for constructing an exploit. This is because some
    bugs, like SQL injections, are way easier to find through static code analysis
    than black-box testing. Chapter 22 covers how to review code for vulnerabilities.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种查找敏感文件的方法是从暴露的 *.git* 目录中重构源代码。在攻击应用程序时，获取源代码对构造漏洞利用极为有帮助。这是因为一些漏洞，例如 SQL
    注入，通过静态代码分析比黑盒测试更容易发现。第 22 章介绍了如何审查代码以寻找漏洞。
- en: When a developer uses Git to version-control a project’s source code, Git will
    store all of the project’s version-control information, including the commit history
    of project files, in a Git directory. Normally, this *.git* folder shouldn’t be
    accessible to the public, but sometimes it’s accidentally made available. This
    is when information leaks happen. When a *.git* directory is exposed, attackers
    can obtain an application’s source code and therefore gain access to developer
    comments, hardcoded API keys, and other sensitive data via secret scanning tools
    like truffleHog ([https://github.com/dxa4481/truffleHog/](https://github.com/dxa4481/truffleHog/))
    or Gitleaks ([https://github.com/zricethezav/gitleaks/](https://github.com/zricethezav/gitleaks/)).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发者使用 Git 对项目的源代码进行版本控制时，Git 会将项目的所有版本控制信息，包括项目文件的提交历史，存储在一个 Git 目录中。通常，*.git*
    文件夹不应对外公开，但有时它会被意外地公开。这时就会发生信息泄露。当 *.git* 目录暴露时，攻击者可以通过像 truffleHog ([https://github.com/dxa4481/truffleHog/](https://github.com/dxa4481/truffleHog/))
    或 Gitleaks ([https://github.com/zricethezav/gitleaks/](https://github.com/zricethezav/gitleaks/))
    这样的秘密扫描工具，获取应用的源代码，从而访问开发者的评论、硬编码的 API 密钥以及其他敏感数据。
- en: Checking Whether a .git Folder Is Public
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查 .git 文件夹是否公开
- en: 'To check whether an application’s *.git* folder is public, simply go to the
    application’s root directory (for example, *example.com*) and add */.git* to the
    URL:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查一个应用的 *.git* 文件夹是否公开，只需访问该应用的根目录（例如，*example.com*）并在 URL 后添加 */.git*：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Three things could happen when you browse to the */.git* directory. If you get
    a 404 error, this means the application’s *.git* directory isn’t made available
    to the public, and you won’t be able to leak information this way. If you get
    a 403 error, the *.git* directory is available on the server, but you won’t be
    able to directly access the folder’s root, and therefore won’t be able to list
    all the files contained in the directory. If you don’t get an error and the server
    responds with the directory listing of the *.git* directory, you can directly
    browse the folder’s contents and retrieve any information contained in it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当你浏览到 */.git* 目录时，可能会发生三种情况。如果你遇到 404 错误，这意味着应用的 *.git* 目录没有对外公开，你将无法通过这种方式泄露信息。如果你遇到
    403 错误，则表示 *.git* 目录在服务器上是可用的，但你无法直接访问文件夹的根目录，因此无法列出目录中包含的所有文件。如果没有错误，服务器返回 *.git*
    目录的目录列表，则可以直接浏览该文件夹的内容并获取其中包含的任何信息。
- en: Downloading Files
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 下载文件
- en: 'If directory listing is enabled, you can browse through the files and retrieve
    the leaked information. The `wget` command retrieves content from web servers.
    You can use `wget` in recursive mode (`-r`) to mass-download all files stored
    within the specified directory and its subdirectories:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了目录列表功能，你可以浏览文件并获取泄露的信息。`wget` 命令可以从 Web 服务器获取内容。你可以使用 `wget` 的递归模式（`-r`）批量下载指定目录及其子目录中存储的所有文件：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'But if directory listing isn’t enabled and the directory’s files are not shown,
    you can still reconstruct the entire *.git* directory. First, you’ll need to confirm
    that the folder’s contents are indeed available to the public. You can do this
    by trying to access the directory’s *config* file:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果没有启用目录列表功能，并且目录中的文件没有显示出来，你仍然可以重建整个 *.git* 目录。首先，你需要确认文件夹的内容确实对外公开。你可以通过尝试访问该目录中的
    *config* 文件来进行确认：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If this file is accessible, you might be able to download the Git directory’s
    entire contents so long as you understand the general structure of *.git* directories.
    A *.git* directory is laid out in a specific way. When you execute the following
    command in a Git repository, you should see contents resembling the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个文件是可访问的，并且你理解 *.git* 目录的一般结构，那么你可能能够下载整个 Git 目录的内容。*.git* 目录是以特定的方式进行布局的。当你在
    Git 仓库中执行以下命令时，你应该看到类似以下内容：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output shown here lists a few standard files and folders that are important
    for reconstructing the project’s source. In particular, the */objects* directory
    is used to store Git objects. This directory contains additional folders; each
    has two character names corresponding to the first two characters of the SHA1
    hash of the Git objects stored in it. Within these subdirectories, you’ll find
    files named after the rest of the SHA1 hash of the Git object stored in it. In
    other words, the Git object with a hash of `0a082f2656a655c8b0a87956c7bcdc93dfda23f8`
    will be stored with the filename of *082f2656a655c8b0a87956c7bcdc93dfda23f8* in
    the directory *.git/objects/0a*. For example, the following command will return
    a list of folders:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示的输出列出了一些对重建项目源代码很重要的标准文件和文件夹。特别是，*/objects* 目录用于存储 Git 对象。该目录包含额外的文件夹；每个文件夹的名称由两个字符组成，对应存储在其中的
    Git 对象的 SHA1 哈希的前两个字符。在这些子目录中，你会找到以 Git 对象其余的 SHA1 哈希命名的文件。换句话说，哈希值为 `0a082f2656a655c8b0a87956c7bcdc93dfda23f8`
    的 Git 对象将以文件名 *082f2656a655c8b0a87956c7bcdc93dfda23f8* 存储在目录 *.git/objects/0a*
    中。例如，以下命令将返回一组文件夹：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And this command will reveal the Git objects stored in a particular folder:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将显示存储在特定文件夹中的 Git 对象：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Git stores different types of objects in .*git/objects*: commits, trees, blobs,
    and annotated tags. You can determine an object’s type by using this command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Git 在 .*git/objects* 中存储不同类型的对象：提交、树、Blob 和注释标签。你可以使用这个命令来确定对象的类型：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Commit* objects store information such as the commit’s tree object hash, parent
    commit, author, committer, date, and message of a commit. *Tree* objects contain
    the directory listings for commits. *Blob* objects contain copies of files that
    were committed (read: actual source code!). Finally, *tag* objects contain information
    about tagged objects and their associated tag names. You can display the file
    associated with a Git object by using the following command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*提交*对象存储的信息包括提交的树对象哈希、父提交、作者、提交者、日期和提交信息。*树*对象包含提交的目录列表。*Blob*对象包含已提交文件的副本（即：实际的源代码！）。最后，*标签*对象包含关于标签对象及其关联标签名的信息。你可以使用以下命令显示与
    Git 对象关联的文件：'
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The */config* file is the Git configuration file for the project, and the */HEAD*
    file contains a reference to the current branch:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*/config* 文件是该项目的 Git 配置文件，*/HEAD* 文件包含对当前分支的引用：'
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If you can’t access the */.git* folder’s directory listing, you have to download
    each file you want instead of recursively downloading from the directory root.
    But how do you find out which files on the server are available when object files
    have complex paths, such as *.git/objects/0a/72e6850ef963c6aeee4121d38cf9de773865d8*?
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你无法访问 */.git* 文件夹的目录列表，你必须下载你需要的每个文件，而不是从目录根部递归下载。但是，如何找出服务器上哪些文件是可用的，当对象文件有复杂路径时，比如
    *.git/objects/0a/72e6850ef963c6aeee4121d38cf9de773865d8*？
- en: 'You start with filepaths that you already know exist, like *.git/HEAD*! Reading
    this file will give you a reference to the current branch (for example, *.git/refs/heads/master*)
    that you can use to find more files on the system:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你从你已经知道存在的文件路径开始，比如 *.git/HEAD*！阅读这个文件会给你一个指向当前分支的引用（例如，*.git/refs/heads/master*），你可以使用这个引用来查找系统上的更多文件：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The *.git/refs/heads/master* file will point you to the particular object hash
    that stores the directory tree of the commit. From there, you can see that the
    object is a commit and is associated with a tree object, `0a72e6850ef963c6aeee4121d38cf9de773865d8`.
    Now examine that tree object:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*.git/refs/heads/master* 文件会指向存储提交的目录树的特定对象哈希。从这里，你可以看到该对象是一个提交，并且与一个树对象相关联，`0a72e6850ef963c6aeee4121d38cf9de773865d8`。现在检查那个树对象：'
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Bingo! You discover some source code files and additional object trees to explore.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 完成！你发现了一些源代码文件和额外的对象树可以进行探索。
- en: 'On a remote server, your requests to discover the different files would look
    a little different. For instance, you can use this URL to determine the HEAD:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在远程服务器上，你的文件发现请求看起来会有些不同。例如，你可以使用这个 URL 来确定 HEAD：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Use this URL to find the object stored in that HEAD:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个 URL 来查找存储在该 HEAD 中的对象：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Use this URL to access the tree associated with the commit:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个 URL 来访问与提交关联的树：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, use this URL to download the source code stored in the *source.py*
    file:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用这个 URL 来下载存储在 *source.py* 文件中的源代码：
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you are downloading files from a remote server, you’ll also need to decompress
    the downloaded object file before you read it. This can be done using some code.
    You can decompress the object file by using Ruby, Python, or your preferred language’s
    *zlib* library:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从远程服务器下载了文件，你还需要在读取之前解压下载的对象文件。这可以通过一些代码实现。你可以使用Ruby、Python或你偏好的语言的*zlib*库来解压对象文件：
- en: '[PRE20]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: After recovering the project’s source code, you can `grep` for sensitive data
    such as hardcoded credentials, encryption keys, and developer comments. If you
    have time, you can browse through the entire recovered codebase to conduct a source
    code review and find potential vulnerabilities.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复项目的源代码后，你可以使用`grep`命令查找敏感数据，如硬编码的凭据、加密密钥和开发者评论。如果有时间，你可以浏览整个恢复的代码库，进行源代码审查并寻找潜在漏洞。
- en: 'Step 5: Find Information in Public Files'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第5步：在公共文件中查找信息
- en: You could also try to find information leaks in the application’s public files,
    such as their HTML and JavaScript source code. In my experience, JavaScript files
    are a rich source of information leaks!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以尝试在应用程序的公共文件中查找信息泄漏，例如它们的HTML和JavaScript源代码。在我的经验中，JavaScript文件是信息泄漏的丰富来源！
- en: Browse the web application that you’re targeting as a regular user and take
    note of where the application displays or uses your personal information. Then
    right-click those pages and click **View page source**. You should see the HTML
    source code of the current page. Follow the links on this page to find other HTML
    files and JavaScript files the application is using. Then, on the HTML file and
    the JavaScript files found, `grep` every page for hardcoded credentials, API keys,
    and personal information with keywords like `password` and `api_key`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 作为普通用户浏览你目标的Web应用，并注意应用在哪些地方显示或使用了你的个人信息。然后右键点击这些页面，选择**查看页面源代码**。你应该能看到当前页面的HTML源代码。跟踪页面上的链接，查找该应用使用的其他HTML文件和JavaScript文件。然后，在这些找到的HTML和JavaScript文件中，使用`grep`命令查找硬编码的凭据、API密钥和个人信息，使用的关键词包括`password`和`api_key`。
- en: You can also locate JavaScript files on a site by using tools like LinkFinder
    ([https://github.com/GerbenJavado/LinkFinder/](https://github.com/GerbenJavado/LinkFinder/)).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用像LinkFinder这样的工具在网站上定位JavaScript文件（[https://github.com/GerbenJavado/LinkFinder/](https://github.com/GerbenJavado/LinkFinder/)）。
- en: Escalating the Attack
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 升级攻击
- en: After you’ve found a sensitive file or a piece of sensitive data, you’ll have
    to determine its impact before reporting it. For example, if you have found credentials
    such as a password or an API key, you need to validate that they’re currently
    in use by accessing the target’s system with them. I often find outdated credentials
    that cannot be used to access anything. In that case, the information leak isn’t
    a vulnerability.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在你找到敏感文件或敏感数据后，需要在报告之前评估其影响。例如，如果你发现了凭据，如密码或API密钥，你需要通过使用这些凭据访问目标系统来验证它们是否仍在使用。我经常会发现过时的凭据，这些凭据无法用来访问任何内容。在这种情况下，信息泄漏就不算是漏洞了。
- en: If the sensitive files or credentials you’ve found are valid and current, consider
    how you can compromise the application’s security with them. For example, if you
    found a GitHub access token, you can potentially mess with the organization’s
    projects and access their private repositories. If you find the password to their
    admin portals, you might be able to leak their customers’ private information.
    And if you can access the */etc/shadow* file on a target server, you might be
    able to crack the system user’s passwords and take over the system! Reporting
    an information leak is often about communicating the impact of that leak to companies
    by highlighting the criticality of the leaked information.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你找到的敏感文件或凭据是有效且当前有效的，考虑如何利用它们破坏应用程序的安全性。例如，如果你找到了GitHub访问令牌，你可能会影响该组织的项目并访问它们的私有仓库。如果你找到了他们管理员门户的密码，你可能能够泄露他们客户的私人信息。如果你能访问目标服务器上的*/etc/shadow*文件，你可能能够破解系统用户的密码并接管系统！报告信息泄漏通常是通过突出泄漏信息的严重性来与公司沟通泄漏的影响。
- en: If the impact of the information you found isn’t particularly critical, you
    can explore ways to escalate the vulnerability by chaining it with other security
    issues. For example, if you can leak internal IP addresses within the target’s
    network, you can use them to pivot into the network during an SSRF exploit. Alternatively,
    if you can pinpoint the exact software version numbers the application is running,
    see if any CVEs are related to the software version that can help you achieve
    RCE.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现的信息影响不大，可以探索通过将其与其他安全问题结合来提升漏洞的危害。例如，如果你可以泄露目标网络中的内部IP地址，可以在进行SSRF攻击时利用这些地址进行网络跳转。或者，如果你能够准确定位应用程序正在运行的具体软件版本号，看看是否有与该软件版本相关的CVE漏洞，帮助你实现RCE。
- en: Finding Your First Information Disclosure!
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 找到你的第一次信息泄露！
- en: 'Now that you understand the common types of information leaks and how to find
    them, follow the steps discussed in this chapter to find your first information
    disclosure:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经理解了常见的信息泄露类型以及如何找到它们，按照本章讨论的步骤来发现你的第一次信息泄露：
- en: Look for software version numbers and configuration information by using the
    recon techniques presented in Chapter 5.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用第五章中介绍的侦察技术，查找软件版本号和配置信息。
- en: Start searching for exposed configuration files, database files, and other sensitive
    files uploaded to the production server that aren’t protected properly. Techniques
    you can use include path traversal, scraping the Wayback Machine or paste dump
    sites, and looking for files in exposed *.git* directories.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始搜索暴露的配置文件、数据库文件以及其他未妥善保护的上传到生产服务器的敏感文件。你可以使用的技术包括路径遍历、抓取Wayback Machine或粘贴站点，以及寻找暴露的*.git*目录中的文件。
- en: Find information in the application’s public files, such as its HTML and JavaScript
    source code, by `grep`ping the file with keywords.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`grep`命令使用关键词在应用程序的公共文件中查找信息，例如HTML和JavaScript源代码。
- en: Consider the impact of the information you find before reporting it, and explore
    ways to escalate its impact.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在报告你发现的信息之前，考虑其影响，并探索提升其影响力的方式。
- en: Draft your first information disclosure report and send it over to the bug bounty
    program!
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 草拟你的第一次信息泄露报告，并将其发送给漏洞悬赏计划！
