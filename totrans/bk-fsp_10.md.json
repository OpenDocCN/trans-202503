["```\n[ 1..100 ]\n  .Where(fun n -> n % 2 = 0)\n  .OrderByDescending(fun n -> n)\n```", "```\nquery { for n in [ 1..100 ] do\n        where (n % 2 = 0)\n        sortByDescending n }\n```", "```\nmodule QuerySource =\n  open System\n\n  type film = { id : int; name : string; releaseYear : int; gross : Nullable<float> }\n              override x.ToString() = sprintf \"%s (%i)\" x.name x.releaseYear\n  type actor = { id : int; firstName : string; lastName : string }\n              override x.ToString() = sprintf \"%s, %s\" x.lastName x.firstName\n  type filmActor = { filmId : int; actorId : int }\n\n  let films =\n    [ { id = 1; name = \"The Terminator\"; releaseYear = 1984; gross = Nullable 38400000.0 }\n      { id = 2; name = \"Predator\"; releaseYear = 1987; gross = Nullable 59735548.0 }\n      { id = 3; name = \"Commando\"; releaseYear = 1985; gross = Nullable<float>() }\n      { id = 4; name = \"The Running Man\"; releaseYear = 1987; gross = Nullable 38122105.0 }\n      { id = 5; name = \"Conan the Destroyer\"; releaseYear = 1984; gross = Nullable<float>() } ]\n\n  let actors =\n    [ { id = 1; firstName = \"Arnold\"; lastName = \"Schwarzenegger\" }\n      { id = 2; firstName = \"Linda\"; lastName = \"Hamilton\" }\n      { id = 3; firstName = \"Carl\"; lastName = \"Weathers\" }\n      { id = 4; firstName = \"Jesse\"; lastName = \"Ventura\" }\n      { id = 5; firstName = \"Vernon\"; lastName = \"Wells\" } ]\n  let filmActors =\n    [ { filmId = 1; actorId = 1 }\n      { filmId = 1; actorId = 2 }\n      { filmId = 2; actorId = 1 }\n      { filmId = 2; actorId = 3 }\n      { filmId = 2; actorId = 4 }\n      { filmId = 3; actorId = 1 }\n      { filmId = 3; actorId = 5 }\n      { filmId = 4; actorId = 1 }\n      { filmId = 4; actorId = 4 }\n      (* Intentionally omitted actor for filmId = 5 *) ]\n```", "```\nquery { for f in QuerySource.films do select f }\n```", "```\nval it : seq<QuerySource.film> =\n  seq\n    [{id = 1;\n      name = \"The Terminator\";\n      releaseYear = 1984;\n      gross = 38400000.0;};\n      -- *snip* -- ]\n```", "```\nquery { for f in QuerySource.films do\n        select (f.name, f.releaseYear) }\n```", "```\nval it : seq<string * int> =\n  seq\n    [(\"The Terminator\", 1984); (\"Predator\", 1987); (\"Commando\", 1985);\n     (\"The Running Man\", 1987); ...]\n```", "```\nquery { for f in QuerySource.films do\n        where (f.releaseYear = 1984)\n        select (f.ToString()) }\n```", "```\nval it : seq<string> =\n  seq [\"The Terminator (1984)\"; \"Conan the Destroyer (1984)\"]\n```", "```\nquery { for f in QuerySource.films do\n        where (f.gross <= 40000000.0)\n        select (f.ToString()) }\n```", "```\nQueryExpressions.fsx(53,16): error FS0001: The type 'System.Nullable<float>'\ndoes not support the 'comparison' constraint. For example, it does not support\nthe 'System.IComparable' interface\n```", "```\nopen Microsoft.FSharp.Linq.NullableOperators\n\nquery { for f in QuerySource.films do\n        where (f.gross ?<= 40000000.0)\n        select (f.ToString()) }\n```", "```\nval it : seq<string> = seq [\"The Terminator (1984)\"; \"The Running Man (1987)\"]\n```", "```\nquery { for f in QuerySource.films do\n        where (f.releaseYear = 1987 && f.gross ?<= 40000000.0)\n        select (f.ToString()) }\n```", "```\nval it : seq<string> = seq [\"The Running Man (1987)\"]\n```", "```\nquery { for f in QuerySource.films do\n        select f.releaseYear\n        distinct }\n```", "```\nval it : seq<int> = seq [1984; 1987; 1985]\n```", "```\nquery { for f in QuerySource.films do headOrDefault }\n```", "```\nval it : QuerySource.film = {id = 1;\n                             name = \"The Terminator\";\n                             releaseYear = 1984;\n                             gross = 38400000.0;}\n```", "```\nquery { for f in QuerySource.films do nth 2 }\n```", "```\nval it : QuerySource.film = {id = 3;\n                             name = \"Commando\";\n                             releaseYear = 1985;\n                             gross = null;}\n```", "```\nquery { for f in QuerySource.films do find (f.releaseYear = 1987) }\n```", "```\nval it : QuerySource.film = {id = 2;\n                             name = \"Predator\";\n                             releaseYear = 1987;\n                             gross = 59735548.0;}\n```", "```\nquery { for f in QuerySource.films do\n        where (f.id = 4)\n        exactlyOne }\n```", "```\nval it : QuerySource.film = {id = 4;\n                             name = \"The Running Man\";\n                             releaseYear = 1987;\n                             gross = 38122105.0;}\n```", "```\nquery { for f in QuerySource.films do\n        sortBy f.name\n        select (f.ToString()) }\n```", "```\nval it : seq<string> =\n  seq\n    [\"Commando (1985)\"; \"Conan the Destroyer (1984)\"; \"Predator (1987)\";\n     \"The Running Man (1987)\"; ...]\n```", "```\nquery { for f in QuerySource.films do\n        sortByDescending f.name\n        select (f.ToString()) }\n```", "```\nval it : seq<string> =\n  seq\n    [\"The Terminator (1984)\"; \"The Running Man (1987)\"; \"Predator (1987)\";\n     \"Conan the Destroyer (1984)\"; ...]\n```", "```\nquery { for f in QuerySource.films do\n        sortBy f.releaseYear\n        thenByNullableDescending f.gross\n        select (f.releaseYear, f.name, f.gross) }\n```", "```\nval it : seq<int * string * System.Nullable<float>> =\n  seq\n    [(1984, \"The Terminator\", 38400000.0); (1984, \"Conan the Destroyer\", null);\n     (1985, \"Commando\", null); (1987, \"Predator\", 59735548.0); ...]\n```", "```\nquery { for f in QuerySource.films do\n        groupBy f.releaseYear into g\n        sortBy g.Key\n        select (g.Key, g) }\n```", "```\nval it : seq<int * IGrouping<int, QuerySource.film>> =\n  seq\n    [(1984, seq [{id = 1; -- *snip* --};\n                 {id = 5; -- *snip* --}]);\n     (1985, seq [{id = 3; -- *snip* --}]);\n     (1987, seq [{id = 2; -- *snip* --};\n                 {id = 4; -- *snip* --}])]\n```", "```\nquery { for f in QuerySource.films do\n        groupValBy (f.name, f.gross) f.releaseYear into g\n        sortBy g.Key\n        select (g.Key, g) }\n```", "```\nval it : seq<int * IGrouping<int,(string * System.Nullable<float>)>> =\n  seq\n    [(1984,\n      seq [(\"The Terminator\", 38400000.0); (\"Conan the Destroyer\", null)]);\n     (1985, seq [(\"Commando\", null)]);\n     (1987, seq [(\"Predator\", 59735548.0); (\"The Running Man\", 38122105.0)])]\n```", "```\nlet getFilmPageBySize pageSize pageNumber =\n  query { for f in QuerySource.films do\n          skip (pageSize * (pageNumber - 1))\n          take pageSize\n          select (f.ToString()) }\n```", "```\ngetFilmPageBySize 3 1\n```", "```\nval it : seq<string> =\n  seq [\"The Terminator (1984)\"; \"Predator (1987)\"; \"Commando (1985)\"]\n```", "```\ngetFilmPageBySize 3 2\n```", "```\nval it : seq<string> =\n  seq [\"The Running Man (1987)\"; \"Conan the Destroyer (1984)\"]\n```", "```\nlet getFilmPageByYear year =\n  query { for f in QuerySource.films do\n          sortBy f.releaseYear\n          skipWhile (f.releaseYear < year)\n          takeWhile (f.releaseYear = year)\n          select (f.ToString()) }\n```", "```\nval it : seq<string> =\n  seq [\"The Terminator (1984)\"; \"Conan the Destroyer (1984)\"]\n```", "```\nquery { for f in QuerySource.films do count }\n```", "```\nquery { for f in QuerySource.films do maxByNullable f.gross }\n```", "```\nopen System\nopen QuerySource\n\nlet kindergartenCop =\n  { id = 6; name = \"Kindergarten Cop\"; releaseYear = 1990; gross = Nullable 91457688.0 }\n\nquery { for f in films do\n        contains kindergartenCop }\n```", "```\nquery { for f in QuerySource.films do\n        select f.name\n        contains \"Kindergarten Cop\" }\n```", "```\nquery { for f in QuerySource.films do\n        exists (f.name = \"Kindergarten Cop\") }\n```", "```\nopen Microsoft.FSharp.Linq.NullableOperators\n\nquery { for f in QuerySource.films do\n        exists (f.gross ?>= 50000000.0) }\n```", "```\nquery { for f in QuerySource.films do\n        all (f.gross ?>= 50000000.0) }\n```", "```\nquery { for f in QuerySource.films do\n        join fa in QuerySource.filmActors on (f.id = fa.filmId)\n        join a in QuerySource.actors on (fa.actorId = a.id)\n        select (f.name, f.releaseYear, a.lastName, a.firstName) }\n```", "```\nval it : seq<string * int * string * string> =\n  seq\n    [(\"The Terminator\", 1984, \"Schwarzenegger\", \"Arnold\");\n     (\"The Terminator\", 1984, \"Hamilton\", \"Linda\");\n     (\"Predator\", 1987, \"Schwarzenegger\", \"Arnold\");\n     (\"Predator\", 1987, \"Weathers\", \"Carl\"); ...]\n```", "```\nquery { for f in QuerySource.films do\n        groupJoin fa in QuerySource.filmActors on (f.id = fa.filmId) into junction\n        select (f.name, query { for j in junction do\n                                join a in QuerySource.actors on (j.actorId = a.id)\n                                select (a.lastName, a.firstName) } ) }\n```", "```\nval it : seq<string * seq<string * string>> =\n  seq\n    [(\"The Terminator\", seq [(\"Schwarzenegger\", \"Arnold\");\n                             (\"Hamilton\", \"Linda\")]);\n     (\"Predator\", seq [(\"Schwarzenegger\", \"Arnold\");\n                       (\"Weathers\", \"Carl\");\n                       (\"Ventura\", \"Jesse\")]);\n     (\"Commando\", seq [(\"Schwarzenegger\", \"Arnold\");\n                       (\"Wells\", \"Vernon\")]);\n     (\"The Running Man\", seq [(\"Schwarzenegger\", \"Arnold\");\n                              (\"Ventura\", \"Jesse\")]);\n     ...]\n```", "```\nquery { for f in QuerySource.films do\n        groupJoin fa in QuerySource.filmActors on (f.id = fa.filmId) into junction\n        for j in junction do\n        join a in QuerySource.actors on (j.actorId = a.id)\n        select (f.name, f.releaseYear, a.lastName, a.firstName) }\n```", "```\nquery { for f in QuerySource.films do\n        leftOuterJoin fa in QuerySource.filmActors on (f.id = fa.filmId) into junction\n        for j in junction do\n        join a in QuerySource.actors on (j.actorId = a.id)\n        select (f.name, f.releaseYear, a.lastName, a.firstName) }\n|> Seq.iter (printfn \"%O\")\n```", "```\nlet actorsFilmActors =\n  query { for a in QuerySource.actors do\n          join fa in QuerySource.filmActors on (a.id = fa.actorId)\n          select (fa.filmId, a) }\n\nquery { for f in QuerySource.films do\n        leftOuterJoin (id, a) in actorsFilmActors on (f.id = id) into junction\n        for (_, a) in junction do\n        select (f.name, a.lastName, a.firstName) }\n```", "```\nquery { for f in QuerySource.films do\n        leftOuterJoin (id, a) in actorsFilmActors on (f.id = id) into junction\n        for x in junction do\n        select (match (**x :> obj**) with\n\n               | null -> (f.name, \"\", \"\")\n               | _ -> let _, a = x\n                      (f.name, a.lastName, a.firstName))\n      }\n```", "```\nopen System\nopen Microsoft.FSharp.Linq\n\ntype QueryBuilder with\n\n① [<CustomOperation(\"exactlyOneWhen\")>]\n  member ② __.ExactlyOneWhen (③ source : QuerySource<'T,'Q>,\n                              ④ [<ProjectionParameter>] selector) =\n\n    System.Linq.Enumerable.Single (source.Source, Func<_,_>(selector))\n\n  [<CustomOperation(\"exactlyOneOrDefaultWhen\")>]\n  member __.ExactlyOneOrDefaultWhen (source : QuerySource<'T,'Q>,\n                                     [<ProjectionParameter>] selector) =\n    System.Linq.Enumerable.SingleOrDefault (source.Source, Func<_,_>(selector))\n```", "```\nquery { for f in QuerySource.films do\n        exactlyOneWhen (f.id = 4) }\n```", "```\nopen System\nopen Microsoft.FSharp.Linq\n\ntype QueryBuilder with\n\n  -- *snip* --\n  [<CustomOperation(\"averageByNotNull\")>]\n  member inline __.AverageByNotNull< 'T, 'Q, 'Value\n                      when 'Value :> ValueType\n                      and 'Value : struct\n                      and 'Value : (new : unit -> 'Value)\n                      and 'Value : (static member op_Explicit : 'Value -> float)>\n (source : QuerySource<'T, 'Q>,\n  [<ProjectionParameter>] selector : 'T -> Nullable<'Value>) =\n   source.Source\n   |> Seq.fold\n       (fun (s, c) v -> let i = v |> selector\n                        if i.HasValue then\n                         (s + float i.Value, c + 1)\n                        else (s, c))\n       (0.0, 0)\n   |> (function\n      | (_, 0) -> Nullable<float>()\n      | (sum, count) -> Nullable(sum / float count))\n```", "```\nquery { for f in QuerySource.films do\n        averageByNotNull f.gross }\n```", "```\ntype *name* = *providerName*<*parameters*>\n```", "```\n#r \"System.Data.Services.Client\"\n#r \"FSharp.Data.TypeProviders\"\n```", "```\nopen Microsoft.FSharp.Data.TypeProviders\n```", "```\ntype northwind =\n  ODataService<\"http://services.odata.org/V3/Northwind/Northwind.svc/\">\n```", "```\nlet svc = northwind.GetDataContext()\n```", "```\nlet invoices =\n  query { for i in svc.Invoices do\n          sortByNullableDescending i.ShippedDate\n          select (i.OrderDate, i.CustomerName, i.ProductName)\n          take 5 }\n```", "```\ninvoices |> Seq.iter (printfn \"%A\")\n```", "```\n(5/4/1998 12:00:00 AM, \"Drachenblut Delikatessen\", \"Jack's New England Clam Chowder\")\n(4/30/1998 12:00:00 AM, \"Hungry Owl All-Night Grocers\", \"Sasquatch Ale\")\n(4/30/1998 12:00:00 AM, \"Hungry Owl All-Night Grocers\", \"Boston Crab Meat\")\n(4/30/1998 12:00:00 AM, \"Hungry Owl All-Night Grocers\", \"Jack's New England Clam Chowder\")\n(5/4/1998 12:00:00 AM, \"Tortuga Restaurante\", \"Chartreuse verte\")\n```", "```\nsvc.DataContext.SendingRequest.Add (fun args -> printfn \"%O\" args.Request.RequestUri)\n```", "```\n#r \"System.Data.Services.Client\"\n#r \"FSharp.Data.TypeProviders\"\n\nopen Microsoft.FSharp.Data.TypeProviders\n\ntype northwind =\n  ODataService<\"http://services.odata.org/V3/Northwind/Northwind.svc/\">\nlet svc = northwind.GetDataContext()\n\nlet invoices =\n  query { for i in svc.Invoices do\n          sortByNullableDescending i.ShippedDate\n          select (i.OrderDate, i.CustomerName, i.ProductName)\n          take 5 }\n\nsvc.DataContext.SendingRequest.Add (fun args -> printfn \"%O\" args.Request.RequestUri)\ninvoices |> Seq.iter (printfn \"%A\")\n```", "```\n#r \"System.Drawing\"\n#r @\"..\\packages\\FSharpx.TypeProviders.Regex.1.8.41\\lib\\40\\FSharpx.TypeProviders.Regex.dll\"\n\nopen System\nopen System.Drawing\n```", "```\ntype colorRegex =\n  FSharpx.Regex< @\"^#(?<Red>[\\dA-F]{2})(?<Green>[\\dA-F]{2})(?<Blue>[\\dA-F]{2})$\">\n```", "```\nlet convertToRgbColor color =\n  let inline hexToDec hex = Convert.ToInt32(hex, 16)\n  let m = color |> ① colorRegex().Match\n  if m.Success then\n    Some (Color.FromArgb(② m.Red.Value |> hexToDec,\n                         ③ m.Green.Value |> hexToDec,\n                         ④ m.Blue.Value |> hexToDec))\n  else None\n```", "```\n[ \"\"; \"#FFFFFF\"; \"#000000\"; \"#B0C4DE\" ]\n|> List.iter\n  (convertToRgbColor >>\n   (function\n    | None -> printfn \"Not a color\"\n    | Some(c) -> printfn \"%O\" c))\n```", "```\nNot a color\nColor [A=255, R=255, G=255, B=255]\nColor [A=255, R=0, G=0, B=0]\nColor [A=255, R=176, G=196, B=222]\n```"]