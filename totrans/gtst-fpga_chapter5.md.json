["```\nmodule And_Gate_Project\n (input i_Switch_1,\n  input i_Switch_2,\n  output o_LED_1);\nassign o_LED_1 = i_Switch_1 & i_Switch_2;\nendmodule\n```", "```\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nentity And_Gate_Project is\n  port (\n    i_Switch_1 : in std_logic;\n    i_Switch_2 : in std_logic;\n    o_LED_1    : out std_logic);\nend entity And_Gate_Project;\narchitecture RTL of And_Gate_Project is\nbegin\n  o_LED_1 <= i_Switch_1 and i_Switch_2;\nend RTL;\n```", "```\n❶ module And_Gate_TB();\n  reg r_In1, r_In2;\n  wire w_Out;\n❷ And_Gate_Project UUT\n  (.i_Switch_1(r_In1),\n   .i_Switch_2(r_In2),\n   .o_LED_1(w_Out));\n❸ initial\n    begin\n    ❹ $dumpfile(\"dump.vcd\"); $dumpvars;\n       r_In1 <= 1'b0;\n       r_In2 <= 1'b0;\n       #10;\n       r_In1 <= 1'b0;\n       r_In2 <= 1'b1;\n       #10;\n       r_In1 <= 1'b1;\n       r_In2 <= 1'b0;\n       #10;\n       r_In1 <= 1'b1;\n       r_In2 <= 1'b1;\n       #10;\n       $finish();\n    end\nendmodule\n```", "```\nlibrary IEEE;\nuse IEEE.std_logic_1164.all;\nuse std.env.finish;\n❶ entity And_Gate_TB is\nend entity And_Gate_TB;\narchitecture behave of And_Gate_TB is\n  signal r_In1, r_In2, w_Out : std_logic;\nbegin\n❷ UUT : entity work.And_Gate_Project\n  port map (\n    i_Switch_1 => r_In1,\n    i_Switch_2 => r_In2,\n    o_LED_1    => w_Out);\n❸ process is\n  begin\n    r_In1 <= '0';\n    r_In2 <= '0';\n    wait for 10 ns;\n    r_In1 <= '0';\n    r_In2 <= '1';\n    wait for 10 ns;\n    r_In1 <= '1';\n    r_In2 <= '0';\n    wait for 10 ns;\n    r_In1 <= '1';\n    r_In2 <= '1';\n    wait for 10 ns;\n    wait for 10 ns;\n    finish;\n  end process;\nend behave;\n```", "```\nmodule Debounce_Project_Top\n  (input  i_Clk,\n  input  i_Switch_1,\n  output o_LED_1);\n  wire w_Debounced_Switch;\n❶ Debounce_Filter ❷ #(.DEBOUNCE_LIMIT(250000)) Debounce_Inst\n  (.i_Clk(i_Clk),\n   .i_Bouncy(i_Switch_1),\n   .o_Debounced(w_Debounced_Switch));\n❸ LED_Toggle_Project LED_Toggle_Inst\n  (.i_Clk(i_Clk),\n   .i_Switch_1(w_Debounced_Switch),\n   .o_LED_1(o_LED_1));\nendmodule\n```", "```\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nentity Debounce_Project_Top is\n  port (\n    i_Clk       : in  std_logic;\n    i_Switch_1  : in  std_logic;\n    o_LED_1     : out std_logic\n    );\nend entity Debounce_Project_Top;\narchitecture RTL of Debounce_Project_Top is\n  signal w_Debounced_Switch : std_logic;\nbegin\n❶ Debounce_Inst : entity work.Debounce_Filter\n    generic map(\n    ❷ DEBOUNCE_LIMIT => 250000)\n    port map (\n      i_Clk      => i_Clk,\n      i_Bouncy   => i_Switch_1,\n      o_Debounced => w_Debounced_Switch);\n❸ LED_Toggle_Inst : entity work.LED_Toggle_Project\n    port map (\n      i_Clk      => i_Clk,\n      i_Switch_1 => w_Debounced_Switch,\n      o_LED_1    => o_LED_1);\nend architecture RTL;\n```", "```\nmodule Debounce_Filter #(parameter DEBOUNCE_LIMIT = 20) (\n  input  i_Clk,\n  input  i_Bouncy,\n  output o_Debounced);\n❶ reg [$clog2(DEBOUNCE_LIMIT)-1:0] r_Count = 0;\n  reg r_State = 1'b0;\n  always @(posedge i_Clk)\n  begin\n  ❷ if (i_Bouncy !== r_State && r_Count < DEBOUNCE_LIMIT-1)\n     begin\n       r_Count <= r_Count + 1;\n     end\n  ❸ else if (r_Count == DEBOUNCE_LIMIT-1)\n     begin\n       r_State <= i_Bouncy;\n       r_Count <= 0;\n     end\n     else\n     begin\n     ❹ r_Count <= 0;\n     end\n   end\n❺ assign o_Debounced = r_State;\nendmodule\n```", "```\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\nentity Debounce_Filter is\n  generic (DEBOUNCE_LIMIT : integer := 20);\n  port (\n    i_Clk       : in  std_logic;\n    i_Bouncy    : in  std_logic;\n    o_Debounced : out std_logic\n    );\nend entity Debounce_Filter;\narchitecture RTL of Debounce_Filter is\n❶ signal r_Count : integer range 0 to DEBOUNCE_LIMIT := 0;\n  signal r_State : std_logic := '0';\nbegin\n  process (i_Clk) is\n  begin\n    if rising_edge(i_Clk) then\n    ❷ if (i_Bouncy /= r_State and r_Count < DEBOUNCE_LIMIT-1) then\n         r_Count <= r_Count + 1;\n    ❸ elsif r_Count = DEBOUNCE_LIMIT-1 then\n         r_State <= i_Bouncy;\n         r_Count <= 0;\n       else\n       ❹ r_Count <= 0;\n       end if;\n     end if;\n  end process;\n❺ o_Debounced <= r_State;\nend architecture RTL;\n```", "```\nmodule Debounce_Filter_TB ();\n  reg r_Clk = 1'b0, r_Bouncy = 1'b0;\n❶ always #2 r_Clk <= !r_Clk;\n❷ Debounce_Filter #(.DEBOUNCE_LIMIT(4)) UUT\n  (.i_Clk(r_Clk),\n   .i_Bouncy(r_Bouncy),\n   .o_Debounced(w_Debounced));\n❸ initial begin\n    $dumpfile(\"dump.vcd\"); $dumpvars;\n    repeat(3) @(posedge r_Clk);\n ❹ r_Bouncy <= 1'b1; // toggle state of input pin\n    @(posedge r_Clk);\n ❺ r_Bouncy <= 1'b0; // simulate a glitch/bounce of switch\n    @(posedge r_Clk);\n ❻ r_Bouncy <= 1'b1; // bounce goes away\n    repeat(6) @(posedge r_Clk);\n    $display(\"Test Complete\");\n    $finish();\n  end\nendmodule\n```", "```\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse std.env.finish;\nentity Debounce_Filter_TB is\nend entity Debounce_Filter_TB;\narchitecture test of Debounce_Filter_TB is\n  signal r_Clk, r_Bouncy, w_Debounced : std_logic := '0';\nbegin\n❶ r_Clk <= not r_Clk after 2 ns;\n❷ UUT : entity work.Debounce_Filter\n     generic map (DEBOUNCE_LIMIT => 4)\n     port map (\n        i_Clk       => r_Clk,\n        i_Bouncy    => r_Bouncy,\n        o_Debounced => w_Debounced);\n❸ process is\n  begin\n     wait for 10 ns;\n  ❹ r_Bouncy <= '1';  -- toggle state of input pin\n     wait until rising_edge(r_Clk);\n  ❺ r_Bouncy <= '0';  -- simulate a glitch/bounce of switch\n     wait until rising_edge(r_Clk);\n  ❻ r_Bouncy <= '1';  -- bounce goes away\n     wait for 24 ns;\n     finish;  -- need VHDL-2008\n  end process;\nend test;\n```", "```\n`--snip--`\nRegister bits not including I/Os:   21 (1%)\nTotal load per clock:\n   i_Clk: 1\nMapping Summary:\nTotal  LUTs: 31 (2%)\n`--snip--`\n```", "```\n`--snip--`\n  initial\n    begin\n       $dumpfile(\"dump.vcd\"); $dumpvars;\n       r_In1 <= 1'b0;\n       r_In2 <= 1'b0;\n       #10;\n    ❶ **assert (w_Out** == **1'b0);**\n       r_In1 <= 1'b0;\n       r_In2 <= 1'b1;\n       #10;\n       **assert (w_Out** == **1'b0);**\n`--snip--`\n```", "```\n`--snip--`\nprocess is\n  begin\n    r_In1 <= '0';\n    r_In2 <= '0';\n    wait for 10 ns;\n ❶ **assert (w_Out** = **'0') severity failure;**\n    r_In1 <= '0';\n    r_In2 <= '1';\n    wait for 10 ns;\n    **assert (w_Out** = **'0') severity failure;**\n`--snip--`\n```", "```\n# ASSERT: Error: ASRT_0301 testbench.sv(20): Immediate assert\ncondition (w_Out==1'b1) FAILED at time: 10ns, scope: And_Gate_TB\n```", "```\n# ** Failure: Assertion violation.\n#    Time: 10 ns Iteration: 0  Process: /and_gate_tb/line__22\nFile: testbench.vhd\n```"]