- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">11</samp> <samp class="SANS_Dogma_OT_Bold_B_11">COVERT
    CODE EXECUTION AND MISDIRECTION</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
- en: Continuing [Part III](part3.xhtml)’s discussion of anti-reversing tactics used
    by malware, in this chapter we’ll look at *covert code execution*, in which malware
    executes code in a stealthy manner, frustrating an analyst’s attempts to follow
    its logic and code and sometimes evading debugging altogether. This can also serve
    the purpose of misdirecting the analyst, causing confusion and slowing down the
    reverse engineering process. Let’s explore a few of the specific covert code execution
    and misdirection techniques you might encounter.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '### <samp class="SANS_Futura_Std_Bold_B_11">Callback Functions</samp>'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '*Callback functions* are application-defined functions that are triggered by
    a specific event and are used as input for other functions. For example, the Windows
    API function <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumDisplayMonitors</samp>
    uses callback functions to enumerate display monitors that are configured on the
    host. When <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumDisplayMonitors</samp>
    is called, monitors are enumerated one by one, and information about each of them
    (such as screen size) is passed to the callback function. The program defines
    this callback function and can point it to any code it wishes.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Malware can abuse functions such as <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumDisplayMonitors</samp>
    by creating a custom callback and pointing it to malicious code, as illustrated
    in [Figure 11-1](chapter11.xhtml#fig11-1). This code will then be executed by
    the calling function (<samp class="SANS_TheSansMonoCd_W5Regular_11">EnumDisplayMonitors</samp>),
    which serves the purposes of obfuscating control flow (as an anti-disassembly
    and anti-disassembly technique) and even possibly causing the malware analyst
    to lose control of the malware in a debugger. This method can also confuse some
    automated sandboxes.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig11-1.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-1: A callback function
    example with EnumDisplayMonitors</samp>'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: The malware in this figure calls <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumDisplayMonitors</samp>
    and defines its own callback function containing malicious code. When <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumDisplayMonitors</samp>
    is called, the control flow transfers to the malicious callback function. Seeing
    this behavior in a debugger or during static code analysis can be very confusing
    to a malware analyst who isn’t aware of how callbacks work, as the jump to this
    callback function may not be apparent in the code.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: This technique can theoretically work with nearly any Windows API function that
    uses callbacks (and there are several), but I’ve found that many of the functions
    that malware may abuse begin with <samp class="SANS_TheSansMonoCd_W5Regular_11">Enum</samp>,
    such as <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumDateFormatsEx</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumSystemLanguageGroups</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumChildWindows</samp>.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，这种技术可以与几乎任何使用回调的 Windows API 函数一起使用（而且有很多这样的函数），但我发现恶意软件可能滥用的许多函数以 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Enum</samp> 开头，例如 <samp class="SANS_TheSansMonoCd_W5Regular_11">EnumDateFormatsEx</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">EnumSystemLanguageGroups</samp> 和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">EnumChildWindows</samp>。
- en: <samp class="SANS_Futura_Std_Bold_B_11">TLS Callbacks</samp>
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">TLS 回调</samp>
- en: As [Chapter 1](chapter1.xhtml) explained, a thread is a series of instructions
    that operates inside a process. Thread-local storage (TLS) allows each of the
    program’s running threads to have its own version of a variable that every other
    thread can access with a unique value. For example, if a global variable <samp
    class="SANS_TheSansMonoCd_W5Regular_11">var</samp> is defined in TLS, each thread
    in the process can store a different value in it. In this case, <samp class="SANS_TheSansMonoCd_W5Regular_11">var</samp>
    is acting as a sort of global variable name, but with a unique value for each
    thread.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如[第 1 章](chapter1.xhtml)所解释的，线程是操作系统中运行的一个系列指令。线程局部存储（TLS）允许每个程序运行的线程都有自己的变量版本，其他线程可以访问这些变量，并且每个线程的值都是独一无二的。例如，如果全局变量
    <samp class="SANS_TheSansMonoCd_W5Regular_11">var</samp> 被定义在 TLS 中，则进程中的每个线程都可以在其中存储不同的值。在这种情况下，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">var</samp> 就充当了一个类似全局变量名的角色，但每个线程都有唯一的值。
- en: A TLS callback function allows programs to clear data objects from the TLS.
    These callback functions run before the actual program code starts, so a malware
    author can exploit this by crafting special TLS callback functions that execute
    before the main malware code begins to run. This technique not only can confuse
    and misdirect analysts who are debugging the malware’s code but also can obfuscate
    the code’s control flow. Let’s look at a simple example of how to identify and
    locate TLS callback routines.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: TLS 回调函数允许程序从 TLS 中清除数据对象。这些回调函数在实际程序代码开始之前运行，因此恶意软件作者可以通过精心制作特殊的 TLS 回调函数，在主恶意代码开始运行之前先执行它们。此技术不仅可以混淆并误导调试恶意软件代码的分析人员，还可以模糊代码的控制流程。让我们来看一个简单的例子，了解如何识别和定位
    TLS 回调例程。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*To follow along in this section, download the sample from VirusTotal or MalShare
    using this hash:*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*要跟随本节内容，请使用以下哈希值从 VirusTotal 或 MalShare 下载示例：*'
- en: 'SHA256: e4bd2245b1f75abf37abd5a4b58e05f00886d56a5556080c4331847c7266b5b6'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'SHA256: e4bd2245b1f75abf37abd5a4b58e05f00886d56a5556080c4331847c7266b5b6'
- en: To identify malware that might be using TLS callback functions, you can use
    one of many static executable analyzer tools, such as PEStudio, my personal favorite.
    PEStudio has a tab called TLS Callbacks that lists any registered callbacks in
    the executable file and their addresses. Our malware file in [Figure 11-2](chapter11.xhtml#fig11-2),
    for example, contains two TLS callbacks.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了识别可能使用 TLS 回调函数的恶意软件，你可以使用多种静态可执行文件分析工具，如 PEStudio，我个人的最爱。PEStudio 有一个名为 TLS
    Callbacks 的标签，它列出了可执行文件中注册的任何回调及其地址。例如，我们在[图 11-2](chapter11.xhtml#fig11-2)中展示的恶意软件文件包含了两个
    TLS 回调。
- en: '![](../images/fig11-2.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig11-2.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-2: A TLS callback
    viewed in PEStudio</samp>'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 11-2：在 PEStudio 中查看 TLS 回调</samp>
- en: Keep in mind that TLS callbacks were originally designed for benign purposes,
    so the presence of one doesn’t necessarily mean that the executable is malicious.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，TLS 回调最初是为无害的目的设计的，因此其存在并不一定意味着该可执行文件是恶意的。
- en: To better understand how TLS callback functions can confuse and misdirect analysts
    and to learn how to work with malware that is using them, let’s take a look at
    this sample in a debugger. I’m using x64dbg, but any similar debugger should work.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解 TLS 回调函数如何混淆并误导分析人员，以及学习如何处理使用这些回调的恶意软件，让我们在调试器中查看此示例。我使用的是 x64dbg，但任何类似的调试器都应该可以使用。
- en: First, if you spot TLS callbacks in a malware sample (using PEStudio, for example),
    always make sure that the debugger is configured to break on TLS callback functions.
    Otherwise, the debugger will execute and may not break on the callback function,
    and you’ll likely never realize it ran. To ensure x64dbg breaks on a TLS callback,
    click **Options****Preferences****Events** and confirm that TLS Callbacks is
    checked, as shown in [Figure 11-3](chapter11.xhtml#fig11-3).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如果你在恶意软件样本中发现TLS回调（例如使用PEStudio），始终确保调试器配置为在TLS回调函数处断点。否则，调试器将继续执行，可能不会在回调函数处断点，你可能永远也不会意识到它已经执行。为了确保x64dbg在TLS回调时断点，点击**选项****首选项****事件**，并确认选中“TLS回调”，如[图11-3](chapter11.xhtml#fig11-3)所示。
- en: '![](../images/fig11-3.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig11-3.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-3: Enabling breakpoints
    on TLS callbacks</samp>'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图11-3：启用TLS回调断点</samp>
- en: After attaching the malware sample to the debugger, you can run the malware
    sample normally by pressing F9, and the debugger will break on the TLS callback
    function, as shown in [Figure 11-4](chapter11.xhtml#fig11-4).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 将恶意软件样本附加到调试器后，可以按F9键正常运行恶意软件样本，调试器将在TLS回调函数处断开，如[图11-4](chapter11.xhtml#fig11-4)所示。
- en: '![](../images/fig11-4.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig11-4.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-4: Hitting the TLS
    breakpoint</samp>'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图11-4：触发TLS断点</samp>
- en: The debugger is now paused on the TLS callback function address, which will
    likely be the entry into the malicious code that the malware wishes to covertly
    execute, as shown in [Figure 11-5](chapter11.xhtml#fig11-5).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器现在已经暂停在TLS回调函数的地址处，这可能是恶意软件希望秘密执行的恶意代码的入口，如[图11-5](chapter11.xhtml#fig11-5)所示。
- en: '![](../images/fig11-5.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig11-5.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-5: TLS callback code</samp>'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图11-5：TLS回调代码</samp>
- en: Note that TLS callbacks aren’t always so clearly registered and displayed in
    static analysis tools. TLS entries are stored in the Thread Environment Block
    (TEB), a data structure that stores information about the currently running thread
    (see [Chapter 1](chapter1.xhtml) for a refresher on it). Malware could modify
    its own TEB at runtime, possibly manipulating the TLS callbacks and adding or
    removing callbacks dynamically. In doing so, malware authors could hide their
    TLS callbacks so that they execute even more covertly and evade analysis tools.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，TLS回调并不总是在静态分析工具中清晰地注册和显示。TLS条目存储在线程环境块（TEB）中，TEB是一个存储有关当前运行线程信息的数据结构（有关TEB的更多信息，请参见[第1章](chapter1.xhtml)）。恶意软件可能在运行时修改其自身的TEB，可能会动态地操控TLS回调，添加或移除回调。通过这样做，恶意软件作者可以隐藏其TLS回调，使其更加秘密地执行并避免分析工具的检测。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Structured Exception Handling</samp>
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">结构化异常处理</samp>
- en: As its name suggests, the *structured exception handler (SEH)* is how Windows
    applications handle exceptions. Whenever a Windows program runs into an exception,
    it invokes SEH. Developers can choose to execute certain code if an exception
    occurs in their program by implementing an SEH *record*. For example, if the program
    throws an error because it’s missing a certain required file, the developer might
    instruct it to display a pop-up box with the message, “The required file does
    not exist!” This instruction often appears in the form of a <samp class="SANS_TheSansMonoCd_W5Regular_11">try...
    catch</samp> or <samp class="SANS_TheSansMonoCd_W5Regular_11">try... except</samp>
    sequence. The program will *try* to execute some code, and if the code fails for
    some reason, the *catch* (exception) will be executed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，*结构化异常处理（SEH）*是Windows应用程序处理异常的方式。每当Windows程序遇到异常时，它会调用SEH。开发人员可以通过实现SEH
    *记录*来选择在程序发生异常时执行某些代码。例如，如果程序由于缺少某个必需的文件而抛出错误，开发人员可能会指示程序显示一个弹出框，消息为：“所需文件不存在！”这个指令通常以<samp
    class="SANS_TheSansMonoCd_W5Regular_11">try... catch</samp>或<samp class="SANS_TheSansMonoCd_W5Regular_11">try...
    except</samp>的形式出现。程序将*尝试*执行一些代码，如果代码由于某种原因失败，则会执行*catch*（异常）。
- en: 'SEH consists of multiple records that are stored on the program’s stack. Each
    record in turn is composed of two addresses: the first is a pointer to the function
    responsible for handling the exception (that is, the *exception handler*), and
    the second is a pointer to the previously defined SEH record, which creates a
    chain of SEH records (typically called a *linked list* in Windows).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: SEH 由多个记录组成，这些记录存储在程序的堆栈上。每个记录包含两个地址：第一个是指向负责处理异常的函数的指针（即 *异常处理程序*），第二个是指向先前定义的
    SEH 记录的指针，这样就创建了一个 SEH 记录链（通常在 Windows 中称为 *链表*）。
- en: The address of the exception handler is stored in the special CPU register FS
    (GS for 64-bit applications), which points to the TEB. In the TEB structure, <samp
    class="SANS_TheSansMonoCd_W5Regular_11">fs:[0]</samp> contains the current SEH
    frame, which points to the first SEH record on the stack. [Figure 11-6](chapter11.xhtml#fig11-6)
    illustrates this structure.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 异常处理程序的地址存储在特殊的 CPU 寄存器 FS 中（对于 64 位应用程序是 GS），它指向 TEB。在 TEB 结构中，<samp class="SANS_TheSansMonoCd_W5Regular_11">fs:[0]</samp>
    包含当前的 SEH 框架，该框架指向堆栈上的第一个 SEH 记录。[图 11-6](chapter11.xhtml#fig11-6) 说明了这一结构。
- en: '![](../images/fig11-6.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig11-6.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-6: An SEH linked-list
    chain</samp>'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 11-6：一个 SEH 链表</samp>
- en: Notice that the FS register points to the address of the TEB, which in turn
    contains a pointer to the first SEH record on the stack. The SEH record contains
    an address for the next SEH record in the chain, as well as an address for the
    exception handler (the code that will be executed when the exception is triggered).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 FS 寄存器指向 TEB 的地址，TEB 进一步包含指向堆栈上第一个 SEH 记录的指针。SEH 记录包含指向链中下一个 SEH 记录的地址，以及指向异常处理程序的地址（当异常被触发时执行的代码）。
- en: 'When a program adds a new SEH record to the SEH chain on the stack, it must
    first push the address of the new handler to the stack and then push the address
    of the previous handler to the stack. This looks like the following code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序将一个新的 SEH 记录添加到堆栈上的 SEH 链时，它必须首先将新处理程序的地址推送到堆栈，然后将先前处理程序的地址推送到堆栈。代码如下所示：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After pushing the new and previous handler addresses to the stack, the instruction
    <samp class="SANS_TheSansMonoCd_W5Regular_11">mov fs:[0], esp</samp> sets up the
    new handler. Once a new exception occurs in the program, <samp class="SANS_TheSansMonoCd_W5Regular_11">HandlerAddress</samp>
    will be the “first responder” to the exception.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在将新旧处理程序地址推送到堆栈后，指令 <samp class="SANS_TheSansMonoCd_W5Regular_11">mov fs:[0],
    esp</samp> 设置了新处理程序。一旦程序中发生新的异常，<samp class="SANS_TheSansMonoCd_W5Regular_11">HandlerAddress</samp>
    将成为异常的“第一响应者”。
- en: Just as many benign Windows features can be repurposed for malicious uses, SEH
    chains can be abused to obfuscate the malware’s control flow and misdirect the
    analysts debugging the code. Let’s take a look at this in practice.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如许多无害的 Windows 功能可以被重新利用用于恶意用途一样，SEH 链也可以被滥用来混淆恶意软件的控制流，并误导调试代码的分析人员。让我们看看实际操作中的情况。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*To follow along, download the sample from VirusTotal or MalShare using this
    hash:*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*要跟进，请使用此哈希值从 VirusTotal 或 MalShare 下载示例：*'
- en: 'SHA256: d52f0647e519edcea013530a23e9e5bf871cf3bd8acb30e5c870ccc8c7b89a09'
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'SHA256: d52f0647e519edcea013530a23e9e5bf871cf3bd8acb30e5c870ccc8c7b89a09'
- en: ''
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*You’ll also need a debugger such as x64dbg.*'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*你还需要一个调试器，例如 x64dbg。*'
- en: ''
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Keep in mind that this sample is a ransomware variant, so be sure to take
    precautions. You might consider using some of the tips discussed in [Appendix
    A](appendix-A.xhtml).*'
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*请记住，这个示例是一个勒索软件变种，因此请务必采取预防措施。你可以考虑使用 [附录 A](appendix-A.xhtml) 中讨论的一些技巧。*'
- en: First, rename the file with the *.exe* extension (such as *evil.exe*) and open
    it in x64dbg. (It’s a 32-bit file, so you’ll need to open the file in the 32-bit
    version.) The executable will be paused at this point. Select **Debug****Run
    to User Code** to skip to the beginning of the malware’s code. You should now
    be at the malware’s entry point, as shown in [Figure 11-7](chapter11.xhtml#fig11-7).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将文件重命名为 *.exe* 扩展名（例如 *evil.exe*），并在 x64dbg 中打开它。（它是一个 32 位文件，因此你需要在 32 位版本中打开文件。）此时，执行文件将暂停。选择
    **调试****运行到用户代码** 以跳到恶意软件代码的开始位置。现在你应该位于恶意软件的入口点，如 [图 11-7](chapter11.xhtml#fig11-7)
    所示。
- en: '![](../images/fig11-7.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig11-7.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-7: The malware’s
    entry point in x64dbg</samp>'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 11-7：x64dbg 中的恶意软件入口点</samp>
- en: 'The following lines of code will be executed by the malware; note that the
    addresses may be different in your running sample, but the code should be similar:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: First, the malware moves the address <samp class="SANS_TheSansMonoCd_W5Regular_11">evil.429D8C</samp>
    into <samp class="SANS_TheSansMonoCd_W5Regular_11">eax</samp> and pushes it to
    the stack. This address contains the malicious code that will be executed by the
    exception handler. Next, the malware pushes the current value stored in <samp
    class="SANS_TheSansMonoCd_W5Regular_11">fs:[0]</samp> to the stack, which points
    to the topmost SEH record. Then, the malware moves the value of <samp class="SANS_TheSansMonoCd_W5Regular_11">esp</samp>
    (the stack pointer) to <samp class="SANS_TheSansMonoCd_W5Regular_11">fs:[0]</samp>,
    which effectively adds the address of the new handler.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: To trigger the exception handler and stealthily execute its code, the malware
    must force an exception. To do this, the malware clears the <samp class="SANS_TheSansMonoCd_W5Regular_11">eax</samp>
    register using <samp class="SANS_TheSansMonoCd_W5Regular_11">xor</samp> and then
    executes a <samp class="SANS_TheSansMonoCd_W5Regular_11">mov</samp> instruction
    that attempts to move the value in <samp class="SANS_TheSansMonoCd_W5Regular_11">ecx</samp>
    into the address stored in <samp class="SANS_TheSansMonoCd_W5Regular_11">eax</samp>.
    Because the value in <samp class="SANS_TheSansMonoCd_W5Regular_11">eax</samp>
    is currently <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>, this results
    in an <samp class="SANS_TheSansMonoCd_W5Regular_11">EXCEPTION_ACCESS_VIOLATION</samp>
    error in x64dbg (shown in [Figure 11-8](chapter11.xhtml#fig11-8)).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig11-8.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-8: An exception forced
    by the malware</samp>'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: The control flow is transferred to the handler containing the malicious code,
    as shown in [Figure 11-9](chapter11.xhtml#fig11-9).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig11-9.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-9: Transfer of the
    control flow to the handler containing malicious code</samp>'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Unless we explicitly tell the debugger to break at this handler code, however,
    the code will be executed too quickly for us to inspect it. To address this issue,
    we’ll set a breakpoint on this handler code by using the command <samp class="SANS_TheSansMonoCd_W5Regular_11">bp
    00429D8C</samp> in the debugger. Now, if we continue executing the sample, we’ll
    break on the malicious handler code, as shown in [Figure 11-9](chapter11.xhtml#fig11-9).
    If you’re already past this point in the debugger, you may need to terminate the
    sample and rerun it, being sure to set the breakpoint on <samp class="SANS_TheSansMonoCd_W5Regular_11">00429D8C</samp>.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Had we not known that the malware was using this SEH abuse technique and had
    we not closely inspected the code, we likely would have completely missed this
    code execution. Since many disassemblers may not be SEH aware, we also would not
    have seen this jump when performing static code analysis.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有意识到恶意软件使用了这种 SEH 滥用技术，并且没有仔细检查代码，我们很可能会完全忽视这段代码执行。由于许多反汇编工具可能不支持 SEH，我们在进行静态代码分析时也不会看到这个跳转。
- en: Also, rather than directly altering the SEH chain, malware can abuse SEH by
    using the <samp class="SANS_TheSansMonoCd_W5Regular_11">KiUserExceptionDispatcher</samp>
    function, which takes an exception handler address as a parameter. Malware can
    pass an arbitrary address to this function, adding a new handler to the current
    SEH chain. Then, by forcing an exception as just described, the malware can covertly
    execute malicious code.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，恶意软件不仅仅通过直接修改 SEH 链来滥用 SEH，还可以通过使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">KiUserExceptionDispatcher</samp>
    函数来滥用 SEH，该函数将异常处理程序地址作为参数。恶意软件可以将任意地址传递给该函数，将新的处理程序添加到当前的 SEH 链中。然后，通过如前所述强制触发异常，恶意软件就能偷偷执行恶意代码。
- en: When you’re analyzing malware that uses the techniques discussed here, it helps
    to monitor the SEH chain. There are two ways to do this. In x64dbg, you’ll see
    an SEH tab that lists the SEH chain. In my experience, however, this feature isn’t
    always reliable. The better option is to add a *watch* for <samp class="SANS_TheSansMonoCd_W5Regular_11">fs:[0]</samp>
    modifications. This way, you’ll be alerted when malware manipulates the data stored
    in a register or address such as <samp class="SANS_TheSansMonoCd_W5Regular_11">fs:[0]</samp>.
    To do this in x64dbg, navigate to the **Watch** tab underneath the CPU window,
    right-click and select **Add**, and then type <samp class="SANS_TheSansMonoCd_W7Bold_B_11">fs:[0]</samp>
    (see [Figure 11-10](chapter11.xhtml#fig11-10)).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当你分析使用这里讨论的技术的恶意软件时，监控 SEH 链会有所帮助。有两种方法可以做到这一点。在 x64dbg 中，你会看到一个 SEH 标签，列出了
    SEH 链。然而，根据我的经验，这个功能并不总是可靠。更好的选择是添加一个 *watch*，监视 <samp class="SANS_TheSansMonoCd_W5Regular_11">fs:[0]</samp>
    的修改。这样，当恶意软件操作寄存器或地址（如 <samp class="SANS_TheSansMonoCd_W5Regular_11">fs:[0]</samp>）中存储的数据时，你会收到提醒。要在
    x64dbg 中实现这一点，请进入 CPU 窗口下方的 **Watch** 标签，右键点击并选择 **Add**，然后输入 <samp class="SANS_TheSansMonoCd_W7Bold_B_11">fs:[0]</samp>（见
    [图 11-10](chapter11.xhtml#fig11-10)）。
- en: '![](../images/fig11-10.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig11-10.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-10: Adding a watch
    expression in x64dbg</samp>'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 11-10：在 x64dbg 中添加监视表达式</samp>
- en: Once you’ve added the watch, right-click it and select **Changed** on the menu.
    This will pause the program every time the value in <samp class="SANS_TheSansMonoCd_W5Regular_11">fs:[0]</samp>
    changes, as shown in [Figure 11-11](chapter11.xhtml#fig11-11).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你添加了监视，右键点击它并在菜单中选择 **Changed**。这样，每当 <samp class="SANS_TheSansMonoCd_W5Regular_11">fs:[0]</samp>
    的值发生变化时，程序将暂停，如 [图 11-11](chapter11.xhtml#fig11-11) 所示。
- en: '![](../images/fig11-11.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig11-11.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-11: Triggering a
    watch expression</samp>'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 11-11：触发监视表达式</samp>
- en: <samp class="SANS_Futura_Std_Bold_B_11">VEH and 64-Bit SEH</samp>
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">VEH 和 64 位 SEH</samp>
- en: Another important exception-handling mechanism in Windows is *vectored exception
    handling (VEH)*, an extension to SEH for Windows x86 applications. VEH is sometimes
    used alongside SEH in 32-bit Windows applications but takes precedence over it;
    that is, if an exception is triggered in the application, VEH will attempt to
    handle it before SEH does.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 中的另一个重要异常处理机制是 *向量化异常处理 (VEH)*，这是对 SEH 的扩展，用于 Windows x86 应用程序。VEH 有时与
    SEH 一起用于 32 位 Windows 应用程序，但优先于 SEH；也就是说，如果在应用程序中触发异常，VEH 会尝试先处理异常，然后再由 SEH 处理。
- en: Like SEH, VEH can be abused by malware. For example, malware can call the Windows
    API function <samp class="SANS_TheSansMonoCd_W5Regular_11">AddVectoredExceptionHandler</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">RtlAddVectoredExceptionHandler</samp>,
    both of which will register a new VEH record. These functions accept a parameter
    called <samp class="SANS_TheSansMonoCd_W5Regular_11">PVECTORED_EXCEPTION_HANDLER</samp>,
    which represents the function that will be called once the exception occurs. The
    malware can then purposefully trigger an exception, in which case VEH will be
    triggered and the malicious code will be executed. If you happen to spot malware
    calling these functions, it’s worth taking a deeper look to see if it’s abusing
    VEH to covertly execute code.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: In x64 applications, SEH (sometimes called *x64 SEH*) is implemented as a table
    that is stored in the executable’s PE header. This table contains descriptions
    for all of the program’s exception handling. Furthermore, x64 SEH uses a technique
    known as *stack unwinding*, which is executed in kernel mode and involves popping
    addresses off the stack to resume execution at another address on the stack. Stack
    unwinding is beyond the scope of this book, but exploits are uncommon since the
    x64 SEH table is stored in the file header, making it difficult to tamper with
    the SEH chains, and because the stack unwinding takes place in kernel mode, whereas
    most malware runs in user mode. It’s also important to note that VEH can be implemented
    in 64-bit applications, so the VEH abuse scenario applies for x64-bit malware
    as well.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Hidden Threads</samp>
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Windows API exposes a function called <samp class="SANS_TheSansMonoCd_W5Regular_11">NtSetInformationThread</samp>
    that can be used to set the priority of a thread. <samp class="SANS_TheSansMonoCd_W5Regular_11">NtSetInformationThread</samp>
    has a parameter called <samp class="SANS_TheSansMonoCd_W5Regular_11">THREADINFOCLASS</samp>,
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">ThreadInformationClass</samp>,
    which points to a structure that may contain several values, one of which is particularly
    interesting: <samp class="SANS_TheSansMonoCd_W5Regular_11">ThreadHideFromDebugger</samp>.
    If this value is set, the code thread will no longer send debug events to the
    debugger, meaning the code will be essentially flying under the radar. This presents
    an opportunity for malware to bypass any debuggers that an analyst may have attached
    and to covertly execute its code. The simplest way to overcome this technique
    is to look for calls to <samp class="SANS_TheSansMonoCd_W5Regular_11">NtSetInformationThread</samp>
    and set breakpoints on them. Once a breakpoint is hit, modify the parameters to
    the function or simply patch the function call out of the code.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: A similar evasion technique involves the <samp class="SANS_TheSansMonoCd_W5Regular_11">NtCreateThreadEx</samp>
    function, which has a special flag, <samp class="SANS_TheSansMonoCd_W5Regular_11">THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER</samp>,
    that can be set to hide the newly created thread from the debugger. As you might
    guess, this can cause problems for malware analysts, as the code will be executed
    outside the immediate scope of the debugger. Be on the lookout for malware invoking
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">NtCreateThreadEx</samp> function
    with the <samp class="SANS_TheSansMonoCd_W5Regular_11">THREAD_CREATE_FLAGS _HIDE_FROM_DEBUGGER</samp>
    flag (0x4 in hex) enabled.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类似的规避技术涉及到<samp class="SANS_TheSansMonoCd_W5Regular_11">NtCreateThreadEx</samp>函数，该函数具有一个特殊标志<samp
    class="SANS_TheSansMonoCd_W5Regular_11">THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER</samp>，可以设置该标志来隐藏新创建的线程，使其不被调试器发现。正如你可能猜到的，这会给恶意软件分析师带来问题，因为代码将会在调试器的直接范围外执行。注意检查恶意软件是否调用了<samp
    class="SANS_TheSansMonoCd_W5Regular_11">NtCreateThreadEx</samp>函数，并启用了<samp class="SANS_TheSansMonoCd_W5Regular_11">THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER</samp>标志（0x4的十六进制表示）。
- en: '### <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '### <samp class="SANS_Futura_Std_Bold_B_11">总结</samp>'
- en: 'In this chapter, you learned about several ways in which malware can execute
    code while flying completely under the radar of analysis tools like debuggers.
    You also saw how malware can use callback functions to obfuscate its control flow
    while stealthily executing its malicious code. These techniques abuse underlying
    and otherwise legitimate Windows functions, and even though some are many years
    old, they’re still seen in the wild. In the next chapter, we’ll explore a few
    additional techniques that malware authors may use to covertly execute code and
    accomplish other evil things: process injection, manipulation, and hooking.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了恶意软件如何以完全不被分析工具（如调试器）发现的方式执行代码的几种方法。你还看到了恶意软件如何利用回调函数来模糊控制流，同时悄悄执行其恶意代码。这些技术利用了底层和其他合法的
    Windows 函数，即使其中一些已经存在多年，它们仍然出现在野外。在下一章中，我们将探索一些恶意软件作者可能使用的额外技术，这些技术能够隐秘地执行代码并完成其他恶意操作：进程注入、操作和钩子技术。
