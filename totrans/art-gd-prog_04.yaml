- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Working with Text and Files
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 处理文本和文件
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: 'Sketch 34: Fonts, Sizes, Character Properties'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图 34：字体、大小、字符属性
- en: When text is drawn on the screen, there are many ways to draw each character.
    The size, weight, orientation, and style can vary widely. A font specifies a particular
    size, weight, and style of a typeface. Fonts are saved as files that contain the
    instructions for drawing each character. Bold, italic, normal, and each important
    size are individual files. The font name, a style, and a size are frequently part
    of the filename.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当文本在屏幕上绘制时，有许多方法可以绘制每个字符。大小、粗细、方向和样式可以有很大的变化。字体指定了特定大小、粗细和样式的字体。字体作为文件保存，其中包含绘制每个字符的指令。粗体、斜体、正常体和每种重要大小都是独立的文件。字体名称、样式和大小通常是文件名的一部分。
- en: Processing allows many fonts, but each one must be set up in advance as a file
    using the Tools menu. Select **Tools**▶**Create Font** to open a font-creation
    window, within which you can choose the font name, style, and size, as shown in
    [Figure 34-1](#figure34-1).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Processing支持多种字体，但每种字体都必须事先通过工具菜单作为文件进行设置。选择**工具**▶**创建字体**以打开一个字体创建窗口，在该窗口中你可以选择字体名称、样式和大小，如[图34-1](#figure34-1)所示。
- en: '![f034001](Images/f034001.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![f034001](Images/f034001.png)'
- en: 'Figure 34-1: Setting up a font'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图 34-1：设置字体
- en: Select CourierNewPS-BoldMT with size 48 and click **OK** to create a file named
    *CourierNewPS-BoldMT-48.vlw* inside a local directory named *data*. You can repeat
    this process as often as needed, creating many font files. You need font files
    in order to load and use fonts in Processing.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 选择CourierNewPS-BoldMT，大小为48，并点击**确定**，在名为*data*的本地目录中创建一个名为*CourierNewPS-BoldMT-48.vlw*的文件。你可以根据需要重复此过程，创建多个字体文件。你需要字体文件才能在Processing中加载和使用字体。
- en: 'Using a font is a somewhat involved process. You need to first create a variable
    of type `PFont` (Processing font) for each font desired, and then load the font
    using the `loadFont()` function 1:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字体是一个相对复杂的过程。你需要首先为每个想要使用的字体创建一个`PFont`（Processing字体）类型的变量，然后使用`loadFont()`函数
    1加载字体：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To establish a font as the one to use, call `textFont()` with the font variable
    and desired size: `textFont(font1, 48)` 2.The size is specified in pixels, not
    the standard for a font, which is points. Finally, you can always change the font
    size by calling `textSize(size)` 3.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要设定一个字体为使用的字体，调用`textFont()`并传入字体变量和所需的大小：`textFont(font1, 48)` 2.大小是以像素为单位，而不是字体标准的磅（points）。最后，你可以通过调用`textSize(size)`
    3来随时更改字体大小。
- en: This sketch loads the Courier Bold 48 font and establishes it. Then it draws
    the string “Hello” in sizes varying from 2 pixels to 55 pixels, changing by one
    pixel size each time `draw()` is called.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图加载了Courier Bold 48字体并将其设定。然后，它以从2像素到55像素变化的大小绘制字符串“Hello”，每次调用`draw()`时，字体大小都会增加1像素。
- en: 'Sketch 35: Scrolling Text'
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图 35：滚动文本
- en: A news scroll is a common feature of television news and weather stations. It
    is a summary of stories that scrolls from right to left across the bottom of the
    screen as other things are happening on the rest of the screen. It’s common to
    see stock prices displayed in this way as well. How could we do this in a Processing
    sketch window?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 新闻滚动条是电视新闻和天气频道的常见功能。它是一个故事摘要，会从屏幕的右侧向左侧滚动，其他内容则继续显示在屏幕的其他部分。股票价格通常也以这种方式显示。那么，我们如何在Processing的草图窗口中做到这一点呢？
- en: First, the text for a particular item has an x-coordinate where it is drawn,
    and it will be drawn using the `text()` function. The y-coordinate is constant
    and will be somewhere near the bottom of the screen. In this sketch the screen
    is 400×200 and the y-coordinate for the text is 190\. The x-coordinate changes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，特定项目的文本有一个x坐标，它将在该坐标处绘制，使用`text()`函数进行绘制。y坐标是恒定的，通常接近屏幕底部。在这个草图中，屏幕的尺寸是400×200，文本的y坐标是190\。x坐标会变化。
- en: 'The text to be displayed should start near the right side of the screen; for
    example, at `width-10` pixels 2. Each frame displayed should move the text to
    the left, so `draw()` will subtract one from `x` each time it is called:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示的文本应该从屏幕的右侧开始，例如，从`width-10`像素 2开始。每次绘制时，文本会向左移动，因此`draw()`每次调用时会将x值减去1：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: There will usually be more than one message in the scroll. The first message
    could disappear before the second one is displayed, but this is unusual for a
    text scroll. Another idea is to have multiple scroll strings being drawn next
    to each other, moving in lockstep. So the strings themselves are in an array called
    `headlines` 1.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，滚动中会有不止一条消息。第一条消息可能在第二条消息显示之前消失，但这种情况对于文本滚动来说并不常见。另一种想法是让多个滚动字符串彼此紧挨着绘制，并同步移动。因此，这些字符串本身保存在一个名为`headlines`的数组中
    1。
- en: 'Suppose we have just two strings. Each one has an index into the array that
    accesses the strings (`i1` and `i2`) and x position (`x1`, `x2`). If the first
    string, `headlines[i1]`, is drawn at location `x1`, the second string should be
    drawn at location `x1` plus the number of pixels in the string `i1` plus a small
    space. In Processing terms, it looks like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们只有两个字符串。每个字符串都有一个索引访问数组中的字符串（`i1`和`i2`）以及x坐标（`x1`，`x2`）。如果第一个字符串`headlines[i1]`绘制在位置`x1`，第二个字符串应该绘制在位置`x1`加上字符串`i1`的像素数再加上一个小空格。用Processing术语表示如下：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`textWidth()` is a function that takes a string as a parameter and, using the
    current font size, returns the width in pixels of that string when drawn. The
    value 10 is the small space. When the first string disappears on the left of the
    screen, its plotted position plus its length will be less than 0 3:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`textWidth()`是一个接受字符串作为参数的函数，利用当前的字体大小，返回该字符串绘制时的宽度（单位：像素）。值10是小空格。当第一个字符串从屏幕左侧消失时，它的绘制位置加上它的长度将小于0
    3：'
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'At this point, a new string (that is, the next index) should be obtained and
    positioned to the right of the second string:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，应该获取一个新的字符串（即下一个索引），并将其定位在第二个字符串的右侧：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The same happens when the second string disappears on the left.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当第二个字符串从左侧消失时，情况也会一样。
- en: 'Sketch 36: Text Animation'
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图36：文本动画
- en: Animating text can create an interesting effect. It has been used in commercials
    and by artists in the past, but it has never been as easy to do as it is now.
    A string can be drawn along a curved path, even a moving curved path; characters
    in the string can change in orientation, size, color, or even font. Motion can
    even vary according to user input, either by following the mouse or moving as
    a result of audio or video input.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 动画化文本可以创造出有趣的效果。它曾被用于广告和艺术创作中，但现在做起来比以前容易得多。一个字符串可以沿着曲线路径绘制，甚至是沿着移动的曲线路径；字符串中的字符可以在方向、大小、颜色，甚至字体上发生变化。运动甚至可以根据用户输入变化，可能是跟随鼠标，或者因音频或视频输入而移动。
- en: A key to animating text is to access each character in the string using the
    `charAt()` function. The first character in the string `str` is returned by `str.charAt(0)`,
    the second character is `str.charAt(1)`, and so on. In this way, each character
    can be accessed individually and be made to behave in a different way from other
    characters.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 动画化文本的关键是通过`charAt()`函数访问字符串中的每个字符。字符串`str`中的第一个字符可以通过`str.charAt(0)`访问，第二个字符是`str.charAt(1)`，依此类推。通过这种方式，可以单独访问每个字符，并使其与其他字符以不同的方式表现。
- en: This sketch causes the word *Processing* to explode, the component letters flying
    in all directions at different speeds; character sizes change too. Each character
    has a distinct position (arrays `x` and `y`), velocity (arrays `dx` and `dy`),
    and size (array `size`) 1.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图使得单词*Processing*发生爆炸，组成的字母以不同的速度向四面八方飞散；字符大小也会变化。每个字符都有一个独特的位置（数组`x`和`y`）、速度（数组`dx`和`dy`）以及大小（数组`size`）
    1。
- en: 'Initially, we draw the word *Processing* neatly in the center of the screen
    as a set of individual characters 2:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，我们将单词*Processing*整齐地绘制在屏幕中心，作为一组独立的字符 2：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: After a few seconds (60 frames) 3, we change the position of each character
    every frame 4, thus moving them, and we adjust individual sizes too. The characters
    move off in random directions, eventually disappearing from the screen.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后（60帧）3，我们每一帧都改变每个字符的位置4，从而使它们移动，并且我们还会调整各个字符的大小。字符会朝着随机方向移动，最终从屏幕上消失。
- en: 'Sketch 37: Inputting a Filename'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图37：输入文件名
- en: All of the sketches developed in this book so far use filename constants when
    reading an image. To be more flexible, most programs allow the user to enter a
    command or filename, even a number, from the keyboard, and that user input directs
    the code to use specific data. This is our next task—to ask the user to enter
    an image filename from the keyboard and display that image in the sketch window.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本书中所有的草图在读取图像时都使用了文件名常量。为了更灵活，大多数程序允许用户从键盘输入一个命令、文件名，甚至一个数字，并且这些用户输入会指示代码使用特定的数据。这就是我们接下来的任务——要求用户从键盘输入一个图像文件名，并在草图窗口中显示该图像。
- en: We already know that the `keyPressed()` function is called whenever the user
    presses a key, and the variable `key` contains the character that represents the
    key that was pressed, at least for letters and numbers. Other keys, like arrow
    keys, use a keycode value, like `ENTER` or `BACKSPACE`, to tell us what the key
    is. Given these facts, one way to read a user-given filename would be to append
    the characters typed by the user to a string and, when we see the enter value,
    to use the preceding string as a filename. This should work fine, but we need
    to handle some conventions.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经知道，每当用户按下一个键时，`keyPressed()`函数都会被调用，变量`key`包含表示所按键的字符，至少对于字母和数字是这样。其他键，比如方向键，使用键码值，比如`ENTER`或`BACKSPACE`，来告诉我们按下的是哪个键。基于这些事实，读取用户提供的文件名的一种方法是将用户输入的字符附加到一个字符串中，当我们看到回车键时，就使用之前的字符串作为文件名。这应该没问题，但我们需要处理一些约定。
- en: First, the user needs to see what they are typing. The string that the user
    has entered so far must appear somewhere on the screen so that the user can see
    what has actually been typed.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，用户需要看到他们正在输入的内容。用户输入的字符串必须显示在屏幕上的某个地方，以便用户看到实际输入的内容。
- en: Next, corrections must be possible. Traditionally one presses the backspace
    key to move backward over the string and delete characters so that new, correct
    ones can be entered, so we’ll implement corrections using backspace. Finally,
    if an incorrect name is entered, a corresponding image file might not exist, and
    the user needs to be informed.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，必须能够进行更正。传统上，按下退格键可以向后移动并删除字符，以便输入新的正确字符，所以我们将使用退格键实现更正。最后，如果输入了错误的名称，可能找不到对应的图像文件，需要通知用户。
- en: 'When the user types a letter or number, indicated by the variable `key`, we
    add that character to a string named `s` using the concatenation operation 3:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户输入一个字母或数字时，`key`变量指示该字符，我们将该字符添加到一个名为`s`的字符串中，使用连接操作3：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If that character is a backspace and the string has characters in it, we remove
    the last character entered 1:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果该字符是退格键，并且字符串中有字符，我们将删除最后一个输入的字符1：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `draw()` function will display this string each time the screen is updated,
    allowing the user to see the current string. Finally, if the key pressed was enter,
    then the string is complete and we should open and display the file. If `loadImage()`
    returns `null`, there is no such image, and the word `Error` is displayed in place
    of the filename 2.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`draw()`函数将每次更新屏幕时显示这个字符串，允许用户看到当前的字符串。最后，如果按下的键是回车键，那么字符串就完成了，我们应该打开并显示该文件。如果`loadImage()`返回`null`，则表示没有这样的图像，并且在文件名2的位置显示`Error`。'
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Sketch 38: Inputting an Integer'
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图 38：输入整数
- en: In the previous sketch, we had the user enter a string from the keyboard, and
    we used the string as a filename. This is a basic use of a string—using a sequence
    of characters to communicate data to the computer and back. What if, instead of
    entering a filename, we wanted to specify some number of things to input? This
    would mean entering an integer. However, when a number is entered at the keyboard,
    the string is *not* the number but is a text representation of the number. To
    get the actual number, the characters that compose it have to be converted into
    numeric form.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的草图中，我们让用户从键盘输入一个字符串，并将这个字符串作为文件名。这是字符串的基本用法——使用字符序列与计算机交换数据。如果我们想输入一些数字而不是文件名怎么办？这就意味着输入一个整数。然而，当在键盘上输入数字时，字符串*不是*数字，而是数字的文本表示。为了得到实际的数字，必须将组成它的字符转换为数字形式。
- en: The string “184” is an integer in string form, obviously representing the number
    one hundred eighty-four (184). This is one hundred plus eight tens plus four,
    or 10² + 8×10¹ + 4×10⁰. To convert from string form into numeric form, we need
    to peel off the digits one at a time and multiply by the correct power of 10.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串“184”是一个字符串形式的整数，显然代表数字一百八十四（184）。这就是一百加上八个十加上四，或者10² + 8×10¹ + 4×10⁰。为了将字符串形式转换为数字形式，我们需要一次剥离一个数字并乘以正确的10的幂。
- en: We can take the first digit, 1, and add it to a sum. Then we take the next digit
    and add to the sum *multiplied by 10*; and repeat again and again until the incoming
    character is not a digit. The powers of 10 accumulate with the first digit representing
    the highest power and the final digit representing 10⁰, or one.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以先取第一个数字1，并将其加到总和中。然后取下一个数字并加到总和中，*乘以10*；一直重复，直到接收到的字符不是数字。10的幂随着第一位数字代表最高幂次，最后一位数字代表10⁰，即1。
- en: 'This is the essential piece of code 1:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是核心代码部分1：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The expression `key-''0''`, where `key` is a digit, represents the numeric
    value of a digit character (that is, from 0 to 9). Assuming that `val` is initially
    0, we get this after the user types `''1''`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式`key-'0'`，其中`key`是一个数字，表示数字字符的数值（即从0到9）。假设`val`最初为0，当用户输入`'1'`时，我们得到以下结果：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now the user types `''8''`, and we get this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用户输入`'8'`，我们得到以下结果：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally the user types `''4''`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，用户输入`'4'`：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To make this sketch marginally useful, it allows us to enter two values, an
    *x* and a *y* value, and draws a circle at these coordinates. An error on entry
    sets the coordinate to 0.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让这个示例稍微有些实用，它允许我们输入两个值，一个是*x*值，另一个是*y*值，并在这些坐标上绘制一个圆形。输入错误时，坐标会被设置为0。
- en: 'Sketch 39: Reading Parameters from a File'
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例39：从文件中读取参数
- en: 'Many computer programs save values in files for use when the program starts,
    or restarts. Initial values, locations for buttons and other interface objects,
    high scores for a game: all can be read from files when a program begins. Most
    people have had the experience of playing a computer game and saving the state
    so that they can resume playing at a later time; this also involves saving data
    in a file and then retrieving it later. This sketch retrieves the state of a game,
    albeit a simple one—checkers—from a text file that contains the positions of all
    of the checkers in a game.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 许多计算机程序将值保存在文件中，以便程序启动或重新启动时使用。初始值、按钮和其他界面对象的位置、游戏的高分：这些都可以在程序开始时从文件中读取。大多数人都有过玩电脑游戏并保存游戏状态，以便稍后继续玩耍的经验；这也涉及将数据保存在文件中，并在以后读取。这个示例从一个文本文件中检索游戏状态，虽然是一个简单的游戏——跳棋——但文件中包含了游戏中所有棋子的位置信息。
- en: Checkers uses an 8×8 grid of squares on which disks of two colors, usually referred
    to as black and white, are placed. Only half of the squares are really used, and
    these squares also have two colors. Checkers can only sit on one of those colors,
    so the easy part of this sketch is to draw the squares and place checkers on those
    squares when it is known what the locations are. The new part is reading the data
    and interpreting that data as checker positions.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 跳棋使用一个8×8的格子，上面放置两种颜色的棋子，通常称为黑色和白色。实际上，只有一半的格子被使用，而且这些格子也有两种颜色。跳棋只能放置在其中一种颜色的格子上，因此这个示例的简单部分就是绘制这些格子，并在已知位置时将棋子放置在这些格子上。新的部分是读取数据并将这些数据解释为棋子的位置。
- en: 'As a scheme for representing a checker board, imagine a set of squares with
    eight rows of eight columns each. A square can be indexed as (*i*, *j*), where
    *i* is the row and *j* is the column. The color of the checker on the square can
    be 0 for one color and 1 for another—the actual colors do not matter, only that
    checkers of color 0 belong to one player and the color 1 checkers belong to the
    other. The squares have fixed positions, but the checker locations are read from
    the file, which contains a row for the position and color of each checker, like
    this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 作为表示跳棋棋盘的方案，可以想象一个包含八行八列的方格集合。一个方格可以通过(*i*, *j*)索引，其中*i*是行号，*j*是列号。棋子在方格上的颜色可以用0表示一种颜色，1表示另一种颜色——实际颜色并不重要，重要的是颜色为0的棋子属于一个玩家，而颜色为1的棋子属于另一个玩家。方格位置是固定的，但棋子的位置是从文件中读取的，文件包含每个棋子的位置和颜色，格式如下：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The file contains one-digit integers separated by single spaces, three per line.
    A structured format is easy to read and is, in fact, typical of data that has
    been created by a computer.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 文件包含由单个空格分隔的一位整数，每行三个数字。结构化的格式易于读取，事实上，它是计算机生成数据的典型格式。
- en: 'To read a file in Processing, we’ll use the built-in function `loadStrings()`,
    which reads a set of strings from a file (given as a string parameter), with one
    string being one line in the file. `loadStrings()` returns an array of strings
    that we’ll assign to the variable `dlines`2. To find the number of items in the
    array (the same as the number of lines of data in the file), we use the `length`
    property in `dlines`: `dlines`**.**`length`.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在Processing中读取文件，我们将使用内置函数`loadStrings()`，它从文件中读取一组字符串（传入一个字符串参数作为文件名），每个字符串对应文件中的一行。`loadStrings()`返回一个字符串数组，我们将其赋值给变量`dlines`2。为了找出数组中的项目数（即文件中数据行数），我们使用`dlines`的`length`属性：`dlines`**.**`length`。
- en: When a line is read in, we use it to place a checker on a square, and when all
    checkers are read in, we draw them on the screen. To place the checker, we extract
    the three integers from each string in `dlines` and then place the correct piece
    in the correct place using the row and column integers.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当一行被读取时，我们使用它来在方格上放置一个棋子，当所有棋子都读取完后，我们将在屏幕上绘制它们。为了放置棋子，我们从`dlines`中的每个字符串中提取三个整数，然后使用行和列的整数将正确的棋子放置到正确的位置。
- en: 'We convert the string data into numbers as follows 3:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将字符串数据转换为数字，具体方法如下3：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Each piece is one of two colors, indicated by the variable `k[i]`. A checker
    is 20 pixels wide, so we draw one at location (`x[i]`, `y[i]`) with these lines:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 每个棋子有两种颜色之一，由变量`k[i]`表示。一个棋子宽度为20像素，所以我们会在位置（`x[i]`，`y[i]`）处绘制一个棋子，代码如下：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The horizontal position is offset from the left by 20 pixels, and each successive
    position is 40 pixels further right. The expression `x[i]*40+20` gives the *x*
    location at which to draw checker number `i`. It is symmetrical for the vertical
    *y* position.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 水平位置从左侧偏移20像素，每个后续位置向右偏移40像素。表达式`x[i]*40+20`给出了绘制棋子编号`i`的*X*位置。垂直的*Y*位置也是对称的。
- en: 'Squares are 40×40 pixels and alternate in color, so when we draw a red one,
    we toggle the fill color to that of the next square. After 8 squares, an extra
    toggle is done so that the colors alternate vertically as well. If `i` and `j`
    are the coordinates of a square, we draw it this way:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 方格为40×40像素，颜色交替，所以当我们绘制一个红色方格时，我们会切换填充颜色为下一个方格的颜色。绘制8个方格后，会额外切换一次，使得颜色在垂直方向上也交替变化。如果`i`和`j`是方格的坐标，我们按以下方式绘制：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the sketch, the checkers are red or green, and the squares are red or yellow.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在草图中，棋子是红色或绿色，方格是红色或黄色。
- en: 'Sketch 40: Writing Text to a File'
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图40：将文本写入文件
- en: Computer programs use text to tell their users what is going on. Sometimes,
    as in the previous sketch, they use text to save the state of the program, often
    a game; sometimes the program writes numerical results or records the progress
    of a program. Text is a typical and natural way for computers to communicate with
    humans.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机程序使用文本向用户说明发生了什么。有时，像在前面的草图中，程序使用文本保存程序的状态，通常是游戏的状态；有时程序会写出数字结果或记录程序的进度。文本是计算机与人类沟通的典型且自然的方式。
- en: 'Here’s the problem to be solved: we want to simulate a ball on the screen,
    moving at a constant speed, as was done in Sketch 28; write the position of the
    ball to a file during each frame; and record when the ball collides with the edge
    of the screen.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是需要解决的问题：我们想在屏幕上模拟一个以恒定速度移动的小球，正如在草图28中所做的那样；在每一帧中将小球的位置写入文件；并记录小球与屏幕边缘碰撞的情况。
- en: The output method that corresponds to `loadStrings()` is the function `saveStrings()`.
    We’ll declare an array of strings, where each string will be written as a line
    of text to the file. When a ball position is to be saved, a string is created
    that represents the position, and it is stored in one of the array locations.
    Then the array index is incremented so the next string goes in the next location
    2.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 与`loadStrings()`对应的输出方法是`saveStrings()`函数。我们将声明一个字符串数组，每个字符串作为文件中的一行文本被写入。当要保存小球位置时，会创建一个代表位置的字符串，并将其存储在数组的一个位置中。然后，数组索引加1，以便下一个字符串存放在下一个位置2。
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When the ball collides with a side of the screen, we put a message like “Collision
    left” in the array and then increment the index 1.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当小球与屏幕的边缘发生碰撞时，我们会在数组中放入类似“左侧碰撞”之类的消息，然后将索引加1。
- en: 'When the array is full, which happens when the index is greater than 499, `saveStrings()`
    writes all of the strings to a file and ends the program 3:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当数组填满时（即索引大于499时），`saveStrings()`会将所有字符串写入文件并结束程序3：
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: It is not possible to add more to a file using `saveStrings()` after the file
    has been closed; if you call it again with the same filename, it will overwrite
    the file. So you must save everything first, and then write it all out at once.
    With 500 strings, you can record about 7 seconds.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`saveStrings()`保存文件后，无法再向文件添加内容；如果使用相同的文件名再次调用，它将覆盖该文件。因此，必须先保存所有内容，然后一次性写入。对于500个字符串，你可以记录大约7秒的内容。
- en: 'Sketch 41: Simulating Text on a Computer Screen'
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图41：模拟计算机屏幕上的文本
- en: Imagine working on a made-for-TV movie. It’s about computers and hackers and
    programmers, and the actors playing the roles of the hackers are, well, *actors*.
    They don’t know anything about programming. They can’t type, and they certainly
    can’t enter code. So, in the scenes where the camera is looking over the main
    character’s shoulder at the screen while she types, we need a special effect—something
    that makes it appear as if she’s coding. Do we use computer animation? That can
    be expensive. No, the usual trick is to use a simple program that displays text,
    specific text, no matter what keys are struck. That way the actors don’t have
    to know anything except how to press a key.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，正在制作一部为电视而拍的电影。它讲述的是计算机、黑客和程序员的故事，而扮演黑客角色的演员们，嗯，都是*演员*。他们对编程一无所知。他们不会打字，当然也不能输入代码。所以，在镜头从主角肩膀上方俯视她打字的场景中，我们需要一种特效——让它看起来像是在编程。我们会用计算机动画吗？那可能会很贵。不，通常的技巧是使用一个简单的程序，显示特定的文本，无论按下什么键。这样，演员们就只需要知道如何按下一个键。
- en: 'Making this program in Processing is straightforward, given what we know so
    far. The program opens a window and initializes a string, `message`, to the text
    to be typed onto the screen 1, which could be read from a file. A variable `N`
    starts as `0` and indexes the string: every character up to character `N` has
    been typed and should appear on the screen. The `draw()` function draws all of
    the characters up to `N` each time it is called, one character at a time, spacing
    them (in the example) nine pixels apart horizontally.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在Processing中制作这个程序很简单，基于我们目前所知道的。程序打开一个窗口，并初始化一个字符串`message`，将其设置为要在屏幕上打出的文本1，可以从文件中读取。一个变量`N`初始值为`0`，它用来索引字符串：每个到达`N`的字符都已经被打出，并应该显示在屏幕上。`draw()`函数每次调用时，都会绘制到`N`为止的所有字符，每次绘制一个字符，水平间隔（在这个例子中）九个像素。
- en: To organize the text into lines, we use the “!” character to indicate where
    lines end. When the program sees that character in the string, it doesn’t display
    it, but instead resets the *x* position to the starting value and increases the
    *y* position by 15 pixels (one line).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将文本组织成行，我们使用“!”字符来表示行的结束。当程序在字符串中看到这个字符时，它不会显示它，而是将*x*位置重置为起始值，并将*y*位置增加15像素（即一行的高度）。
- en: 'The `draw()` function outputs the text, starting at the statement 2:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`draw()`函数从语句2开始输出文本：'
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Either it displays one of the characters in the string 4:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它会显示字符串中的某个字符4：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'or the character in the string is “!” and it begins a new line 3:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 或者字符串中的字符是“!”并开始新的一行3：
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Finally, when a key is pressed, as indicated by Processing calling the `keyPressed()`
    function, the count value `N` increases by one so that one more character appears
    on the screen 6. Regardless of what character was typed, the predefined character
    in the `message` string will be displayed. If `N` exceeds the string length, the
    program can set `N` to `0`, which starts over again with a fresh screen, or further
    key presses could just be ignored.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当按下某个键时，如Processing调用`keyPressed()`函数所示，计数值`N`增加1，以便屏幕上显示一个新的字符6。无论按下什么字符，`message`字符串中的预定义字符都会显示出来。如果`N`超过了字符串的长度，程序可以将`N`重置为`0`，从而重新开始并显示一个新的屏幕，或者进一步的按键操作可以被忽略。
