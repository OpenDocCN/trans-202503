- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Malware Infections
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件感染
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: One of the most well-known types of computer attacks is the transmission of
    malware. Sometimes mistakenly referred to as a virus, *malware*, or malicious
    software, is any piece of software designed to bypass a system’s intended operation.
    This activity is typically not authorized by or even visible to the user. Malware
    has been around for as long as modern computers have. It comes in many forms,
    and despite the best efforts of antivirus software, it’s still common today.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机攻击中最著名的类型之一就是恶意软件的传播。有时被错误地称为病毒，*恶意软件*，或恶意软件，是任何旨在绕过系统预定操作的软件。此类活动通常未经用户授权，甚至对用户不可见。恶意软件自现代计算机问世以来就一直存在。它有很多形式，尽管杀毒软件的努力不断加强，今天仍然很常见。
- en: In this chapter, we’ll discuss what malware is, some of its more popular variants,
    and how best to defend against it, while clearing up any misconceptions you might
    have picked up from watching fictional hackers on television.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论什么是恶意软件，一些较为常见的变种，以及如何最好地防御它，同时澄清你可能从电视上看到的虚构黑客那里得到的一些误解。
- en: What Is Malware?
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是恶意软件？
- en: Malware is software designed to cause damage to computer systems. So, even though
    a game might consume all of your computer’s memory, it’s not considered malware.
    The best way to define malware damage is damage caused by an unauthorized action
    considered abnormal for the system. For example, a normal operation might involve
    a user logging into the system using a username and password set up by an internal
    administrator. If an application allows a black hat to access the system without
    using a username and password, it has performed an unauthorized action.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件是旨在破坏计算机系统的软件。因此，即使一个游戏占用了你计算机的全部内存，它也不被视为恶意软件。定义恶意软件损害的最佳方式是由未经授权的行为引起的损害，这种行为对系统来说是异常的。例如，一个正常的操作可能涉及用户使用由内部管理员设置的用户名和密码登录系统。如果一个应用程序允许黑客在没有使用用户名和密码的情况下访问系统，那么它就执行了一个未经授权的操作。
- en: This might seem like splitting hairs, but it’s important to understand the difference
    between malware and a bug or other corrupt software. If a piece of software, like
    the game mentioned earlier, has an unintentional bug that causes a computer to
    crash or does other harm, it’s not malware, it’s just an inferior program. Likewise,
    a browser add-on with a privacy statement that declares, “We’re going to steal
    your browser history and sell it” isn’t malware, even if the reader doesn’t bother
    to read the statement. On the other hand, if a program appears to be running normally
    while also performing hidden actions, such as logging keystrokes without informing
    users, it’s probably malware.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来是琐碎的事，但理解恶意软件与漏洞或其他损坏软件之间的区别非常重要。如果一款软件，比如前面提到的游戏，存在一个无意的漏洞，导致计算机崩溃或造成其他伤害，它就不是恶意软件，只是一个劣质程序。同样，即使一个浏览器插件声明：“我们将窃取你的浏览历史并出售”，它也不是恶意软件，即使读者没有仔细阅读声明。另一方面，如果一个程序在表面上运行正常，但同时执行隐藏的操作，比如记录按键而没有通知用户，那它可能就是恶意软件。
- en: For the most part, malware is fairly easy to identify because it executes obviously
    malicious actions, such as stealing your password or allowing another unauthorized
    system to access your computer. But some programs perform legitimate, authorized
    functions while also doing undesirable activities, such as displaying ads or recording
    user data. Just because a program looks, acts, and sounds like a safe program
    doesn’t mean it isn’t running malicious code in the background.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，恶意软件很容易识别，因为它会执行明显恶意的操作，例如窃取密码或允许另一个未经授权的系统访问你的计算机。但是，有些程序执行的是合法的授权功能，同时也会进行一些不受欢迎的活动，比如展示广告或记录用户数据。仅仅因为一个程序看起来、表现得像一个安全的程序，并不意味着它没有在后台运行恶意代码。
- en: Types of Malware
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 恶意软件类型
- en: 'To classify different types of malware, malware analysts generally use two
    attributes: how the malware infects a system and what sort of attack the malware
    performs. These attributes help put malware into broad classes that we can use
    to better defend against it. In this section, we’ll examine some of the more common
    classes.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了分类不同类型的恶意软件，恶意软件分析师通常使用两个属性：恶意软件如何感染系统以及恶意软件执行什么类型的攻击。这些属性有助于将恶意软件划分为大致类别，从而帮助我们更好地防御它。在本节中，我们将探讨一些更常见的类别。
- en: Although the malware we’ll discuss in this chapter fits neatly into the classes
    described in the following subsections, that’s not always the case in the real
    world. Black hats often group malware classes together to form a single malware
    package. For example, you might have a virus that also installs spyware and a
    rootkit. For this reason, it’s important to scan every part of your computer when
    you’re trying to get rid of a malware infection. For instance, just because you
    clean up the virus files doesn’t mean you’ve eliminated the entire infection.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本章讨论的恶意软件可以很好地归类为以下小节中描述的几类，但在现实世界中情况并非总是如此。黑帽黑客经常将不同类型的恶意软件类组合成一个单一的恶意软件包。例如，你可能会遇到一个病毒，它同时安装间谍软件和根工具。由于这一原因，当你试图清除恶意软件感染时，扫描计算机的每个部分非常重要。例如，仅仅清理病毒文件并不意味着你已经完全消除了整个感染。
- en: Viruses
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 病毒
- en: Perhaps the most recognized type of malware is the virus, which we define not
    by what it does but by how it behaves. A user must interact with a virus before
    it can begin executing its malicious code. We call this interaction the *trigger*.
    The trigger could be clicking a file, running a program, or opening an attachment.
    Once the action is taken, the virus can run its instructions and release its payload.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 也许最为人所知的恶意软件类型是病毒，我们定义病毒不是根据它的功能，而是根据它的行为。用户必须与病毒进行交互，病毒才能开始执行其恶意代码。我们将这种交互称为*触发器*。触发器可以是点击文件、运行程序或打开附件。一旦执行了这些操作，病毒就能运行其指令并释放其有效载荷。
- en: A virus’s *payload* is the code that performs whatever malicious action the
    virus was programmed to execute. For example, many viruses created in the 1990s,
    such as Chernobyl, were designed to destroy infected systems, often by rewriting
    or deleting critical files ([Figure 4-1](#figure4-1)). Chernobyl was created by
    Chen Ing-hau, a Taiwanese university student who wanted to prove that antivirus
    software of the time was ineffective. Once activated, the code rewrote the first
    kilobyte of the system’s hard drives with zeros. This destroyed many critical
    files necessary for the system to function, including the partition table, which
    helps find where information is physically stored on a hard drive.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 病毒的*有效载荷*是执行病毒程序所设计的任何恶意操作的代码。例如，1990年代创建的许多病毒，如切尔诺贝利病毒，旨在摧毁感染的系统，通常通过重写或删除关键文件（[图4-1](#figure4-1)）。切尔诺贝利病毒是由台湾大学生陈英豪创建的，他想证明当时的杀毒软件是无效的。一旦激活，代码就会用零重写系统硬盘的前一个千字节。这摧毁了许多系统运行所必需的关键文件，包括分区表，它有助于确定硬盘上信息的物理存储位置。
- en: '![f04001](image_fi/501287c04/f04001.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![f04001](image_fi/501287c04/f04001.png)'
- en: 'Figure 4-1: A Windows blue screen (error screen) after a successful infection
    by the Chernobyl virus (original image covered by the Free Art License 1.3)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图4-1：Windows蓝屏（错误屏幕），显示切尔诺贝利病毒成功感染后的情况（原图由自由艺术许可1.3覆盖）
- en: As cybercrime has become more common, attackers have begun using viruses to
    implant other types of malware, such as trojans or ransomware (discussed on page
    59), that they can then use to further exploit the system.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 随着网络犯罪的普遍化，攻击者开始利用病毒植入其他类型的恶意软件，如木马或勒索软件（详见第59页），然后利用这些软件进一步利用系统。
- en: Although all viruses share these common characteristics, a virus’s specific
    target might vary. For example, *file infector viruses* infect files, whereas
    *boot sector viruses* infect the boot files used to start the computer when you
    turn it on. *Macro* *viruses* focus on, you guessed it, macros on the system.
    A macro is code that translates instructions sent to the computer into a longer
    set of instructions. For example, when you press CTRL-C, a macro translates that
    keypress into the Copy command. Macros are often used in Microsoft Office applications
    to provide additional functionality, especially in spreadsheet applications like
    Excel. Some viruses, known as *stealth viruses*, include an added layer of coding
    to try and hide from antivirus software.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管所有病毒都具有这些共同特征，但病毒的具体目标可能会有所不同。例如，*文件感染病毒*感染文件，而*引导扇区病毒*感染启动计算机时使用的启动文件。*宏病毒*专注于，你猜对了，就是系统中的宏。宏是将发送到计算机的指令转换成更长指令集的代码。例如，当你按下CTRL-C时，宏会将该按键转换为“复制”命令。宏通常用于Microsoft
    Office应用程序中，以提供额外的功能，尤其是在像Excel这样的电子表格应用程序中。一些病毒，被称为*隐身病毒*，在代码中加入了额外的层级，试图避开杀毒软件的检测。
- en: Worms
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 蠕虫
- en: 'Worms are malware designed with one goal in mind: to reach as many systems
    as possible. Unlike a virus, a *worm* can infect systems without any direct user
    contact, which means it can spread through a network more easily than a virus
    can. Once the worm infects a new system, it looks for additional uninfected computers
    to which it can spread.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 蠕虫是一种恶意软件，设计目标只有一个：尽可能多地感染系统。与病毒不同，*蠕虫*可以在没有任何用户直接接触的情况下感染系统，这意味着它可以比病毒更容易地通过网络传播。一旦蠕虫感染了一个新系统，它会寻找其他未感染的计算机，继续传播。
- en: Worms are usually able to spread without user contact because they exploit a
    vulnerability that allows for *remote code execution*, or the execution of any
    code, even by unauthorized users, on the system from a remote location. This allows
    adversaries to install programs, create users, or even change network settings.
    Typically, the vulnerabilities that allow remote code execution involve tricking
    the system into believing a user or process has permission to run code. A classic
    example of this is the ILOVEYOU worm ([Figure 4-2](#figure4-2)). Created in 2000,
    this worm took advantage of a vulnerability on Windows systems at the time that
    caused the file type *.vsb* (which indicates a Visual Basic script) to be hidden.
    This meant when the file was sent via email, the attachment looked like a normal
    text document. But when users opened it, it ran a script that infected the system
    by overwriting certain file types. It then used the target’s email account to
    send copies of the file to every contact in the address book associated with Microsoft
    Outlook. The most common means of spreading a worm to a new system is through
    email. This provides the worm with a method of reaching other users and a list
    of email addresses with which to do so. Within 10 days, 50 million ILOVEYOU infections
    were reported.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 蠕虫之所以能够在没有用户接触的情况下传播，是因为它们利用了一个漏洞，该漏洞允许进行*远程代码执行*，即即使是未经授权的用户，也可以在远程位置执行任何代码。这使得对手能够安装程序、创建用户，甚至更改网络设置。通常，允许远程代码执行的漏洞涉及欺骗系统，让它认为某个用户或进程有权限执行代码。一个经典的例子就是
    ILOVEYOU 蠕虫（[图 4-2](#figure4-2)）。该蠕虫于 2000 年创建，利用了当时 Windows 系统中的一个漏洞，导致文件类型 *.vsb*（表示
    Visual Basic 脚本）被隐藏。这意味着当文件通过电子邮件发送时，附件看起来像一个普通的文本文档。但当用户打开它时，它会运行一个脚本，通过覆盖某些文件类型来感染系统。接着，它会使用目标的电子邮件账户，将文件副本发送给与
    Microsoft Outlook 关联的地址簿中的每个联系人。传播蠕虫到新系统的最常见方式是通过电子邮件。这为蠕虫提供了一种接触其他用户的方法，并且可以通过它获得电子邮件地址列表。在
    10 天内，报告了 5000 万个 ILOVEYOU 感染事件。
- en: '![f04002](image_fi/501287c04/f04002.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![f04002](image_fi/501287c04/f04002.png)'
- en: 'Figure 4-2: An example of the email sent by the ILOVEYOU worm'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-2：ILOVEYOU 蠕虫发送的电子邮件示例
- en: 'Historically, hackers have used worms as bragging rights. The more systems
    your worm was able to infect, the more credibility you got in the hacking community.
    Some worms, like Melissa, spread without a payload. Melissa was a macro created
    in 1999 by David Smith. It infected email systems using an attachment masquerading
    as a Word document. Clicking the file ran macro code that opened pornographic
    sites and sent copies of itself to everyone in the person’s address book. Just
    because a worm doesn’t have a payload doesn’t mean it isn’t harmful. Melissa took
    many email servers offline when the worm flooded them with emails until they crashed.
    Other worms, such as Code Red and SQL Slammer, also caused major outages of network
    services because of the amount of traffic they generated. Code Red appeared in
    July 2001 and within days infected nearly 400,000 systems across the internet.
    SQL Slammer was even quicker: when it appeared in 2003, it infected some 75,000
    hosts within 10 minutes. When worms do carry payloads, they usually include malware
    like ransomware or remote access backdoors (which we’ll discuss shortly).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，黑客曾利用蠕虫作为炫耀的工具。你能够感染的系统越多，你在黑客社区中的信誉就越高。一些蠕虫，如 Melissa，就没有有效载荷。Melissa
    是由 David Smith 于 1999 年创建的一个宏病毒。它通过伪装成 Word 文档的附件感染电子邮件系统。点击该文件后会运行宏代码，打开色情网站，并将其副本发送给联系人列表中的每个人。仅仅因为一个蠕虫没有有效载荷并不意味着它没有害处。Melissa
    在蠕虫通过电子邮件泛滥，直到电子邮件服务器崩溃时，导致了许多邮件服务器离线。其他一些蠕虫，如 Code Red 和 SQL Slammer，也由于生成的流量过大，造成了网络服务的重大中断。Code
    Red 于 2001 年 7 月出现，几天内便感染了全球近 40 万个系统。SQL Slammer 更快：它在 2003 年出现时，仅在 10 分钟内就感染了大约
    75,000 个主机。当蠕虫携带有效载荷时，它们通常会包含像勒索病毒或远程访问后门（稍后我们将讨论）这样的恶意软件。
- en: Trojans
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特洛伊木马
- en: Like the classic Greek story this type of malware is named after, a trojan is
    malware that pretends to be legitimate software while secretly running malicious
    tasks in the background. The trojan imitates many different software elements,
    including games, Word documents or PDFs, and even add-ons or macros. Once the
    trojan is installed, it usually begins running unwanted code, but it might not
    activate its full payload until a determined parameter is met or a command is
    sent. For example, many trojans send an HTTP request to a server controlled by
    a black hat waiting to receive commands from an infected computer. The fact that
    trojans mimic legitimate programs makes them very difficult to detect, which allows
    them to remain in place for long periods of time.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 就像它名字来源的经典希腊故事一样，特洛伊木马是一种恶意软件，它伪装成合法软件，暗地里在后台运行恶意任务。特洛伊木马模仿许多不同的软件元素，包括游戏、Word文档或PDF文件，甚至插件或宏。一旦特洛伊木马安装完成，它通常会开始运行不必要的代码，但可能不会立即激活全部负载，直到满足特定条件或收到命令为止。例如，许多特洛伊木马会向一个由黑客控制的服务器发送HTTP请求，等待从感染的计算机接收命令。由于特洛伊木马模仿合法程序，使得它们非常难以检测，这也使得它们可以长时间潜伏不被发现。
- en: One of the most common types of trojan is called the *Remote Access Trojan*
    *(RAT)*. Its main purpose is to place a silent, undetected program on your system
    that allows an adversary to control your computer remotely. This program connects
    to a *command and control* *(C&C**)* server, which allows an attacker to send
    commands to your computer without detection using normal traffic filtering procedures.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的一种特洛伊木马叫做*远程访问木马*（*RAT*）。它的主要目的是在你的系统上放置一个静默的、无法被检测到的程序，允许对方远程控制你的计算机。这个程序连接到*指挥与控制*（*C&C*）服务器，允许攻击者通过正常的流量过滤程序向你的计算机发送命令，而不被发现。
- en: Essentially, the RAT uses normal traffic, such as requests for a website on
    the internet, to ask for additional commands from the C&C server. The attacker
    can then respond with additional commands, or in the case of the RAT, use the
    program to gain *backdoor access* to the system. (Backdoor access simply means
    access through unknown, unauthorized means.) This allows the black hat to use
    the system either to move to other targets or to attack other systems.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，RAT使用正常的流量，例如对互联网上某个网站的请求，来请求C&C服务器的额外命令。攻击者可以响应并发送额外的命令，或者在RAT的情况下，利用该程序获得*后门访问*系统的权限。（后门访问意味着通过未知或未授权的方式进入系统。）这使得黑客能够利用该系统，移动到其他目标或攻击其他系统。
- en: Ransomware
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 勒索软件
- en: Ransomware is malware that uses encryption to lock a computer until a ransom
    is paid. Once the ransomware deploys, it encrypts specific targets, such as files
    in use, entire hard drives, or even entire databases, making them impossible to
    use. Because the files are encrypted, the computer can’t read them, making them
    inaccessible until the black hat provides the key that decodes the content. The
    attacker holds on to the key until a ransom is paid, usually using a form of untraceable
    money like cryptocurrency.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 勒索软件是一种使用加密技术锁定计算机，直到支付赎金为止的恶意软件。一旦勒索软件部署，它会加密特定的目标，例如正在使用的文件、整个硬盘，甚至整个数据库，导致这些文件无法使用。因为文件被加密，计算机无法读取它们，直到黑客提供解密密钥，才能恢复文件的内容。攻击者会扣留密钥，直到赎金支付，通常使用无法追踪的货币，如加密货币。
- en: Adversaries use this type of malware often because it has several strengths.
    First, it’s easy to deploy and scale. A single infection can spread across an
    entire network or encrypt key critical systems, effectively shutting down an organization.
    Second, it’s nearly impossible to bypass once deployed. Encryption is very hard
    to break, and many modern encryption protocols would take literally billions of
    years to crack. The only effective method to avoid paying the ransom is to maintain
    backups. But many organizations pay even when they have backups because of the
    time it takes to restore the files. Third, it’s cheap and effective. It costs
    nothing for an adversary to attempt infection, but a single success nets them
    thousands—or even hundreds of thousands—of dollars. More organizations opt to
    pay as the urgency of their services rises and cyber insurance that covers such
    attacks becomes more prevalent.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对手经常使用这种类型的恶意软件，因为它有几个优势。首先，它易于部署和扩展。一次感染就能传播到整个网络或加密关键的关键系统，实质上使一个组织瘫痪。其次，一旦部署，它几乎无法绕过。加密技术非常难以破解，许多现代加密协议的破解时间可能需要数十亿年。避免支付赎金的唯一有效方法是保持备份。然而，许多组织即使有备份，也选择支付赎金，因为恢复文件需要花费大量时间。第三，它便宜且有效。对手尝试感染几乎不需要任何成本，但一旦成功，便能获得成千上万甚至数十万美元的回报。随着服务的紧迫性增加，以及涵盖此类攻击的网络保险变得越来越普遍，更多的组织选择支付赎金。
- en: Spyware and Adware
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 间谍软件和广告软件
- en: Spyware and adware are probably some of the most annoying malware types that
    affect systems. Spyware steals data from your system, whereas adware injects ads
    into your system while you use it. Both kinds of malware typically infect web
    browsers or other programs that use the internet. They particularly like to hide
    inside add-ons or macros that users install in a browser. This allows them to
    track your browsing history, links clicked, and accounts accessed, all while serving
    up ads in annoying pop-ups that appear to randomly flash onscreen. Although these
    kinds of malware usually have less severe consequences than other types, they
    can cause your system to slow down and sometimes steal valuable personal data,
    including passwords. They can also lead to further infection from other malware
    kits because the loaded ads point to other types of malware, like trojans.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 间谍软件和广告软件可能是影响系统的最令人讨厌的恶意软件类型。间谍软件窃取系统中的数据，而广告软件则在你使用系统时插入广告。两种恶意软件通常感染网络浏览器或其他使用互联网的程序。它们特别喜欢隐藏在用户安装的浏览器插件或宏中。这使得它们能够跟踪你的浏览历史、点击的链接和访问的账户，同时在屏幕上随机弹出烦人的广告。虽然这些恶意软件通常比其他类型的恶意软件造成的后果较轻，但它们可能会导致系统变慢，有时还会窃取有价值的个人数据，包括密码。它们还可能导致其他恶意软件的进一步感染，因为加载的广告会指向其他类型的恶意软件，如特洛伊木马。
- en: Rootkits and Bootkits
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Rootkit 和 Bootkit
- en: Rootkits and bootkits provide an attacker with unprecedented access to a system.
    A *rootkit* is malware that attempts to access a computer’s internal system files,
    which are files that run the operating system. For example, a rootkit might replace
    the files that control logins. By doing this, a black hat can create a secret
    login that gives them full administrative privileges to the system while hiding
    the actual account from other users, so it remains undetected. Typically, these
    files are off limits to unauthorized users. To access these files, the rootkit
    takes advantage of a vulnerability that lets it run as an administrator. From
    there, it can make all sorts of modifications to system files, including adding
    users, changing file permissions, or changing a system’s network settings.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Rootkit 和 bootkit 为攻击者提供了前所未有的系统访问权限。*Rootkit* 是一种恶意软件，它试图访问计算机的内部系统文件，这些文件是操作系统运行所必需的。例如，rootkit
    可能会替换控制登录的文件。通过这样做，黑帽黑客可以创建一个秘密的登录账户，赋予他们对系统的完全管理员权限，同时隐藏实际的账户，使其他用户无法察觉，从而保持不被发现。通常，这些文件对未授权用户是禁止访问的。为了访问这些文件，rootkit
    利用一个漏洞，使其能够以管理员身份运行。这样，它可以对系统文件进行各种修改，包括添加用户、更改文件权限或更改系统的网络设置。
- en: A *bootkit* accesses and modifies a system’s boot record, which is a file that
    starts an operating system when you turn on your computer. The boot record initializes
    many different configurations and usually loads additional software, like *hardware
    drivers*, which an operating system uses to interact with the computer’s hardware,
    such as its keyboard and mouse. By modifying the boot record, the malware can
    change how the system functions, giving full access to a black hat or loading
    other malicious software, like bots, into the system (more on bots in Chapter
    6). The other advantage to a bootkit is that many of the security functions that
    come with a system don’t launch until after the system boots. This means that
    the malware can run without being detected by an antivirus engine or other security
    tool. Internet of Things (IoT) devices, which are small devices with network connections,
    such as thermostats or security cameras, are especially susceptible to bootkits,
    because they often run all their functions almost entirely off the boot record
    (we’ll discuss IoT devices in Chapter 6).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*启动病毒*访问并修改系统的启动记录，启动记录是当你开启电脑时启动操作系统的文件。启动记录初始化许多不同的配置，通常还会加载额外的软件，比如*硬件驱动程序*，操作系统用来与电脑硬件（如键盘和鼠标）进行交互。通过修改启动记录，恶意软件可以改变系统的功能，允许黑客完全控制，或者将其他恶意软件（如僵尸网络）加载到系统中（关于僵尸网络的更多内容见第六章）。启动病毒的另一个优势是，许多系统安全功能直到系统启动后才会启动。这意味着恶意软件可以在不被杀毒引擎或其他安全工具检测到的情况下运行。物联网（IoT）设备，像是恒温器或监控摄像头等具有网络连接的小型设备，尤其容易受到启动病毒的攻击，因为它们通常几乎完全通过启动记录运行所有功能（我们将在第六章讨论物联网设备）。'
- en: Bootkits and rootkits are extremely difficult to detect on a system. Rootkits
    modify the programs that are designed to detect them. For example, they can modify
    your antivirus program so it skips the location at which the rootkit is installed
    when running a scan. Bootkits evade detection because traditional antivirus software
    only works once the operating system is loaded, which occurs after the boot record
    runs. This makes it very difficult to find anything wrong with the system until
    it’s too late.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 启动病毒和根套件在系统中极难被检测到。根套件会修改原本用于检测它们的程序。例如，它们可以修改你的杀毒程序，使得在运行扫描时跳过安装根套件的位置。启动病毒能够躲避检测，因为传统的杀毒软件只有在操作系统加载后才会起作用，而操作系统加载是在启动记录运行之后进行的。这使得在问题出现之前，很难发现系统中的任何异常。
- en: The typical way to detect both types of infections is through traditional symptoms,
    such as a slow-running system, missing or corrupted files, or weird running processes.
    You might also be able to detect a rootkit by using antivirus software installed
    on a USB flash drive or other media. Some systems also have the ability to do
    a *secure boot*. This modifies the boot process to detect errors or anomalies
    associated with bootkits to stop them before they can be run. Windows systems
    perform a secure boot by checking whether the boot record came from Microsoft.
    If the system discovers a modified boot record, the check will cause the system
    to stop booting. But even then, finding the malware is only part of the battle.
    Removing it is tricky, and often, it’s better to completely wipe the system and
    reinstall it rather than risking letting the infection linger in some inaccessible
    corner.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 检测这两种类型感染的典型方法是通过传统的症状，如系统运行缓慢、文件丢失或损坏，或异常的运行进程。你也可以通过使用安装在USB闪存驱动器或其他媒介上的杀毒软件来检测根套件。一些系统还具备进行*安全启动*的能力。这种方式会修改启动过程，检测与启动病毒相关的错误或异常，从而在启动病毒运行之前将其拦截。Windows系统通过检查启动记录是否来自微软来执行安全启动。如果系统发现启动记录被修改，检查会导致系统停止启动。但即使如此，找到恶意软件也只是战斗的一部分。移除它非常棘手，通常情况下，最好是彻底清除系统并重新安装，而不是冒险让感染潜藏在某个无法访问的角落里。
- en: Polymorphic Malware
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多态恶意软件
- en: The strongest and most dangerous form of malware is polymorphic malware. This
    malicious software has advanced capabilities that allow it to change its code
    based on certain factors, such as the kind of system it’s currently infecting
    or the applications running on the system. This lets it adapt to the environment
    instead of just running a set payload, making it extremely difficult to detect
    by traditional means, because it might not be harmful until a specific situation
    is triggered. Once the trigger is set off, the malware activates, changes its
    code to run destructive operations, and begins to carry out its designed task.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最强大且最危险的恶意软件形式是多态恶意软件。这种恶意软件具有先进的功能，能够根据特定因素改变其代码，比如它当前感染的系统类型或系统上运行的应用程序。这使得它能够根据环境进行调整，而不是仅仅运行固定的负载，从而使其非常难以通过传统方式被检测到，因为它在特定情境下才会变得有害。一旦触发条件被激活，恶意软件就会启动，改变其代码并执行破坏性操作，开始执行其预定任务。
- en: Fortunately for us, polymorphic malware is extremely rare and crafted for very
    specific targets. Because of the time and resources required to create this type
    of malware, only state actors normally use it. One famous example of polymorphic
    malware is the *Stuxnet* *virus*. This malware was designed by the United States
    and its allies to infect Iranian nuclear centrifuges and stop them from functioning
    properly. The Stuxnet creators specifically crafted it to hide until it entered
    the centrifuge system, at which point it rewrote its code and infected the device.
    Stuxnet was able to remain undetected for many months, successfully sabotaging
    the program.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，多态恶意软件极为罕见，且通常是为非常特定的目标所打造的。由于创建这种恶意软件需要大量的时间和资源，通常只有国家行为者才会使用它。一个著名的多态恶意软件例子是*Stuxnet*
    *病毒*。该恶意软件是由美国及其盟国设计的，目的是感染伊朗的核离心机，并阻止其正常运作。Stuxnet的设计者特别将其制作成在进入离心机系统之前保持隐蔽，一旦进入系统，它就会重写代码并感染设备。Stuxnet能够保持长时间未被发现，成功破坏了伊朗的核计划。
- en: As technology advances, writing advanced pieces of code like polymorphic malware
    becomes easier. You might find polymorphic features integrated into traditional
    malware to provide it with added functionality. For example, by using machine
    learning theory and algorithms, it’s possible to train malicious software to evade
    antivirus detection, even if an antivirus program detected that same destructive
    software previously. According to recent research from Hyrum Anderson, an attacker
    could run the malware through a set of antivirus engines using a machine learning
    program, which would tweak the software’s code slightly based on the result of
    the scans. It would repeat this cycle hundreds of thousands of times, tweaking
    the malware code until none of the engines returned a positive detection. The
    result will be a piece of harmful software that essentially runs the same as it
    did before but attracts no attention from antivirus engines. The adversary doesn’t
    have to do anything to achieve this; the machine learning program does all the
    work for them.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 随着技术的进步，编写像多态恶意软件这样的高级代码变得越来越容易。你可能会发现传统恶意软件中集成了多态特征，从而赋予其额外的功能。例如，利用机器学习理论和算法，恶意软件可以被训练逃避杀毒软件的检测，即使杀毒程序之前已经检测到过相同的破坏性软件。根据Hyrum
    Anderson的最新研究，攻击者可以使用机器学习程序将恶意软件通过一系列杀毒引擎进行扫描，根据扫描结果稍微调整软件的代码。这个过程将反复进行数十万次，直到没有任何引擎能够检测到该恶意软件。最终的结果是，恶意软件的运行方式和之前一样，但不会引起杀毒引擎的注意。对敌人而言，他们无需做任何事情；机器学习程序会为他们完成所有工作。
- en: How Black Hats Deploy Malware
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 黑帽黑客如何部署恶意软件
- en: Black hats deploy malware for a variety of reasons. To understand how and why
    an attacker releases malware on a system, let’s walk through some typical attacks.
    Although all malware is different, most of it is installed in your system in consistent
    ways.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 黑帽黑客部署恶意软件的原因多种多样。为了了解攻击者如何以及为何在系统上释放恶意软件，让我们通过一些典型的攻击案例来讲解。尽管所有恶意软件各不相同，但大多数恶意软件的安装方式是相似的。
- en: 'The first step to any malware deployment is to create the destructive software.
    Generally, adversaries do this in two ways: by taking advantage of an existing
    vulnerability or starting from scratch. Many black hats use malware that is already
    designed to exploit a vulnerability for their own attacks. This means they add
    specific payloads to an existing piece of malware based on their needs. A great
    example of this is the EternalBlue exploit, developed by the National Security
    Agency (NSA) and later used by attackers in several malware samples. The exploit
    allowed for remote code execution on a target Windows machine by taking advantage
    of the way the Server Message Block protocol, which manages network shares, handles
    certain types of information sent to it. In each case, the attackers added their
    own code to execute.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 部署任何恶意软件的第一步是创建破坏性软件。通常，攻击者通过两种方式来实现这一点：利用现有的漏洞或从零开始编写代码。许多黑帽黑客使用已经设计好以利用某个漏洞的恶意软件进行攻击。这意味着他们根据需要向现有的恶意软件中添加特定的有效载荷。一个很好的例子是EternalBlue漏洞，由美国国家安全局（NSA）开发，后来被攻击者用于多个恶意软件样本中。该漏洞通过利用服务器消息块协议（Server
    Message Block，SMB）处理某些类型信息的方式，使攻击者能够在目标Windows机器上执行远程代码。每次攻击中，攻击者都会添加自己的代码来执行。
- en: Writing new code from scratch is more difficult than using a framework, but
    it tends to be more effective. The reason is that the target system’s protections
    won’t have encountered the malware that was created before it’s deployed. Because
    antivirus software relies heavily on code from actual malware samples, a brand-new
    piece of malware has a much higher chance of avoiding detection (as we’ll discuss
    later in this chapter).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 从零开始编写新的代码比使用框架更难，但通常更有效。原因是目标系统的防护机制之前未曾遇到过该恶意软件。因此，新的恶意软件更有可能避开检测（正如我们在本章后面将讨论的那样），因为杀毒软件严重依赖于实际恶意软件样本的代码。
- en: 'After creating the destructive code, the attacker moves to the next step: initial
    infection. They can install the damaging software on a system through a variety
    of means, but the most effective is social engineering, a process described in
    Chapter 3. Using phishing techniques, it’s often easy to get users to download
    the malware and execute it. For instance, attackers like to hide unsafe code inside
    nondescript files types, such as Word documents or Excel spreadsheets. Both kinds
    of files allow you to create macros, where black hats can store malicious code
    that activates when users open the document, causing the initial infection. Using
    links to execute scripts that download harmful code to the computer is also common.
    Because a lot of malware needs human interaction to work, the more benign-looking
    the file or link, the better. This is especially true for trojans, which must
    remain on the system long term to be effective.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建了破坏性代码后，攻击者进入下一步：初始感染。通过各种方式，他们可以将有害软件安装到系统中，但最有效的方式是社会工程学，这是第三章中描述的过程。通过网络钓鱼技术，通常很容易让用户下载并执行恶意软件。例如，攻击者喜欢将不安全的代码隐藏在无特征的文件类型中，如Word文档或Excel电子表格。两种文件都允许创建宏，黑帽黑客可以在其中存储恶意代码，当用户打开文档时，代码会激活，从而导致初始感染。通过链接执行脚本下载有害代码到计算机也是常见的做法。由于许多恶意软件需要用户交互才能生效，因此文件或链接看起来越无害越好。这对木马尤其重要，因为木马必须长期留在系统中才能有效。
- en: The initial infection will release the full payload, but that doesn’t mean the
    malware has necessarily finished working. At this stage, some malware focuses
    on a specific action; for example, ransomware encrypts files or other storage
    media. Other malware focuses on creating an APT, which is sophisticated malware
    that remains hidden on a network for a long period of time, gathering data and
    other information before executing a large attack. A RAT is an example of a possible
    APT; it allows an adversary to return to a system repeatedly through the backdoor
    to gather more information about its environment. APTs are extremely dangerous
    and difficult to deal with, because by design they avoid many traditional modes
    of detection. Even worse, some malicious software performs flashy attacks, such
    as encrypting all your Word documents, to hide the secret code that installed
    a rootkit onto the system. This is why digital forensics is critical in a malware
    attack (see “How to Defend Against Malware” next).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 初始感染会释放完整的有效载荷，但这并不意味着恶意软件已经完全停止工作。在这个阶段，一些恶意软件专注于执行特定的操作；例如，勒索软件会加密文件或其他存储介质。其他恶意软件则专注于创建APT（高级持续威胁），这是一种复杂的恶意软件，会在网络上长时间保持隐蔽，收集数据和其他信息，然后执行大规模攻击。RAT（远程访问木马）就是一种可能的APT，它允许攻击者通过后门反复访问系统，以收集有关环境的更多信息。APT非常危险，且难以处理，因为它们在设计上避免了许多传统的检测方式。更糟糕的是，一些恶意软件会执行炫目的攻击，例如加密所有的Word文档，以掩盖安装rootkit的秘密代码。这就是为什么在恶意软件攻击中数字取证至关重要的原因（见下文《如何防御恶意软件》）。
- en: Once the infection is in place and the payload is deployed, the contagion can
    be spread. This might involve sending the malware in an email using the host system’s
    contact list; moving through the network using transport protocols, such as File
    Transfer Protocol (FTP) or Hypertext Transfer Protocol (HTTP); or hiding in a
    file until a new user clicks it. While worms are particularly adept at spreading,
    ransomware and viruses can spread quickly and easily as well, although they might
    require user input to do so.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦感染发生并且有效载荷被部署，传播就可以开始。这可能涉及通过主机系统的联系人列表发送恶意软件的电子邮件；通过传输协议（如文件传输协议FTP或超文本传输协议HTTP）在网络中传播；或是将恶意软件隐藏在文件中，直到新的用户点击它。虽然蠕虫特别擅长传播，勒索软件和病毒也可以快速而轻松地传播，尽管它们可能需要用户输入才能做到这一点。
- en: How to Defend Against Malware
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何防御恶意软件
- en: The best way to defend against malware is to use anti-malware software, commonly
    referred to as *antivirus* *programs* (although they now guard against nearly
    all forms of malware, not just viruses). Antivirus programs are available from
    many commercial vendors. Microsoft systems also have a built-in antivirus program
    called Microsoft Defender (formerly Windows Defender). But merely downloading
    an antivirus program doesn’t necessarily provide complete protection. To ensure
    that your system is safe, you need to get the proper software to diminish the
    risks your computer might encounter.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 防御恶意软件的最佳方法是使用反恶意软件软件，通常称为*防病毒* *程序*（尽管它们现在防护几乎所有形式的恶意软件，而不仅仅是病毒）。防病毒程序由许多商业供应商提供。微软系统还内置了一款名为Microsoft
    Defender（前身为Windows Defender）的防病毒程序。但仅仅下载防病毒程序并不一定提供完全的保护。为了确保系统安全，你需要获得适当的软件，以减少计算机可能遇到的风险。
- en: 'Antivirus software comes in two basic detection forms: signature and heuristic.
    The former uses a code signature to recognize malware. A code signature is a unique
    part of a destructive program’s code that helps identify it. For example, let’s
    say you receive a file in your email. A *signature antivirus program* scans the
    file and notices that the file includes the code *sparklekitten.exe* as part of
    a macro. It then compares that code to a database of known malware signatures
    and determines that *sparklekitten.exe* is flagged as malicious. The antivirus
    software will then alert you and possibly quarantine the file, depending on its
    settings.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 防病毒软件有两种基本的检测形式：特征码检测和启发式检测。前者通过代码特征来识别恶意软件。代码特征是破坏性程序代码中的独特部分，有助于识别它。例如，假设你收到一封电子邮件中的文件。*特征码防病毒程序*扫描该文件，并注意到该文件中包含作为宏一部分的代码*sparklekitten.exe*。它会将该代码与已知恶意软件特征数据库进行比对，确定*sparklekitten.exe*被标记为恶意。然后，防病毒软件会提醒你，并可能根据其设置将该文件隔离。
- en: Signature antivirus software is extremely fast because all it does is compare
    a piece of code to a signature database to verify whether it is malware. [Figure
    4-3](#figure4-3) shows an example of such a program running on a Linux system.
    It also doesn’t require many system resources, so it can run on most systems—even
    those with low memory capacities or a slow central processing unit (CPU), which
    is where the computer processes the instructions sent to it. However, for the
    software to detect the malware, its database must contain the malware’s signature.
    This means that newly created malicious software can avoid antivirus detection,
    at least until enough infections have been reported to the software manufacturers
    for them to add an accurate signature to the database. It also means that black
    hats can tweak the signature of a piece of malware to avoid detection (or use
    machine learning to change the malware, as discussed earlier in this chapter).
    Due to these pros and cons, it’s best to deploy signature antivirus software on
    endpoint systems, such as desktops, mobile phones, laptops, and other systems
    that work on data, to avoid slowing down actual work being done on the system.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 签名病毒软件非常快速，因为它只需将一段代码与签名数据库进行比较，以验证它是否为恶意软件。[图 4-3](#figure4-3) 显示了一个在 Linux
    系统上运行的此类程序的示例。它也不需要太多系统资源，因此可以在大多数系统上运行——即使是内存容量较小或中央处理单元（CPU）较慢的系统，也可以运行，这里的
    CPU 负责处理发送给计算机的指令。然而，为了让软件能够检测到恶意软件，它的数据库必须包含恶意软件的签名。这意味着新创建的恶意软件可以避免病毒检测，至少在足够多的感染事件被报告给软件制造商并添加准确的签名到数据库之前。它还意味着黑客可以修改恶意软件的签名以避开检测（或像本章前面讨论的那样，使用机器学习改变恶意软件）。由于这些优缺点，最好将签名病毒软件部署在终端系统上，例如桌面、手机、笔记本电脑以及其他处理数据的系统上，以避免减慢系统实际工作的速度。
- en: '![f04003](image_fi/501287c04/f04003.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![f04003](image_fi/501287c04/f04003.png)'
- en: 'Figure 4-3: A screenshot of antivirus software running on a Linux-based system
    (this image was modified from the original created by SourceFire and is licensed
    under the GNU General Public License)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-3：在基于 Linux 的系统上运行的病毒软件的屏幕截图（此图像已从 SourceFire 创建的原图修改，并根据 GNU 通用公共许可证授权）
- en: '*Heuristic antivirus detection* adapts its detection based on the flow of traffic
    on a network, looking for abnormalities that are outside the normal traffic flow.
    What is normal will vary based on how the network is used, so the heuristic antivirus
    program has to spend time learning this baseline. Then it can notice anomalies.
    For example, if a RAT is installed on your computer, its first step is to send
    a message across the network to its C&C server. A heuristic antivirus program
    could detect this behavior and recognize that this isn’t normal traffic (maybe
    because it occurs at an odd hour or comes from a system that doesn’t usually send
    this type of traffic). However, as stated earlier, it’s still possible for the
    RAT to imitate what the heuristic system considers normal.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*启发式病毒检测*根据网络流量的变化来调整其检测方式，寻找异常的流量，这些流量偏离了正常的流量模式。正常的流量会根据网络的使用方式而有所不同，因此启发式病毒程序必须花时间学习这个基准。然后，它就能察觉到异常。例如，如果你的计算机上安装了一个
    RAT（远程访问木马），它的第一步是通过网络发送一条信息到其 C&C（指挥与控制）服务器。启发式病毒程序可以检测到这一行为，并识别出这不是正常流量（可能是因为它发生在异常时间，或者来自一个通常不发送这种流量的系统）。然而，如前所述，RAT
    仍然有可能模仿启发式系统认为的正常流量。'
- en: Heuristic antivirus detection is very effective because it can detect malware
    that is brand new, as well as malware that is trying to hide, such as rootkits
    or bootkits. But it requires more setup and maintenance than signature-based detection.
    To find traffic that isn’t normal, the heuristic engine first needs to know what
    normal looks like for your system. This means it must determine an accurate baseline
    before it can work effectively, and that baseline must routinely update as the
    behavior of the system’s users changes. Typically, you’ll find heuristic systems
    in a few key high-traffic areas, such as on the firewalls that scan traffic coming
    into a network from the outside.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 启发式病毒检测非常有效，因为它能够检测到全新的恶意软件，以及试图隐藏的恶意软件，如 rootkit 或 bootkit。但它比基于签名的检测需要更多的设置和维护。为了发现不正常的流量，启发式引擎首先需要了解你系统的正常流量是什么样的。这意味着它必须在开始有效工作之前确定一个准确的基准，并且这个基准必须随着系统用户行为的变化而定期更新。通常，你会在一些关键的高流量区域找到启发式系统，比如扫描从外部进入网络的流量的防火墙上。
- en: Antivirus software of either type scans most kinds of data coming into or leaving
    your system, depending on the settings or the specific product you’re using. This
    includes documents like PDFs or pictures, applications like Excel or games, and
    even web traffic. The robust scanning toolkits in modern systems make it difficult
    for malware to find its way onto your screen by traditional means. However, good
    detection relies on your having a properly maintained antivirus program. You need
    to routinely update your software and perform automatic, periodic scanning. You
    should also make sure that your software is set up to scan all types of data,
    especially attachments in emails or downloaded files from the internet.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 所有类型的杀毒软件都会扫描进入或离开系统的大多数数据，具体取决于你的设置或所使用的产品。这包括PDF或图片等文档、Excel或游戏等应用程序，甚至是网页流量。现代系统中强大的扫描工具使得恶意软件难以通过传统手段进入你的屏幕。然而，良好的检测依赖于你拥有一个适当维护的杀毒程序。你需要定期更新软件并执行自动定期扫描。你还应确保软件设置为扫描所有类型的数据，特别是电子邮件附件或从互联网下载的文件。
- en: Despite the numerous technological advancements in antivirus software, it’s
    still possible for attackers to circumvent those scans by understanding and avoiding
    the way they detect malware files. For example, you might receive a normal, clean
    Word document that the antivirus software won’t react to; the document wouldn’t
    show up as known malware in any signature database or appear to be unusual traffic.
    But when you open it, you might trigger a link that reaches out to the internet
    and downloads ransomware. Before your antivirus software has a chance to react,
    the ransomware might execute and lock you out of all your files.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管杀毒软件在技术上有许多进步，但攻击者仍然有可能通过理解并规避杀毒软件检测恶意文件的方式来绕过这些扫描。例如，你可能收到一份正常、干净的Word文档，杀毒软件对此没有反应；该文档在任何签名数据库中都不会显示为已知恶意软件，也不会显示为异常流量。但当你打开它时，你可能会触发一个链接，连接到互联网并下载勒索软件。在杀毒软件有机会反应之前，勒索软件可能会执行并锁定你所有的文件。
- en: You can also use file integrity tools to ensure that a file hasn’t been modified
    to hide a trojan or other malware. A *file integrity tool* uses a file hash, which
    we’ll discuss in Chapter 9, to check whether a file was modified. Most companies
    provide a hash of their applications or files on their websites. You can compare
    this hash to the hash of the file or application you downloaded to make sure a
    black hat hasn’t added malware to it. If the hashes match, the file or application
    hasn’t been modified.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用文件完整性工具来确保文件没有被篡改以隐藏木马或其他恶意软件。*文件完整性工具*使用文件哈希值，我们将在第九章讨论这一点，来检查文件是否已被修改。大多数公司会在其网站上提供其应用程序或文件的哈希值。你可以将该哈希值与下载的文件或应用程序的哈希值进行比较，以确保黑客没有在其中添加恶意软件。如果哈希值匹配，说明该文件或应用程序没有被修改。
- en: To truly keep your computer safe from malware, you must practice your social
    engineering defenses. Weird links, unprompted attachments sent in email, and other
    such suspicious requests all indicate that an adversary might be trying to get
    you to download malware.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要真正保护你的计算机免受恶意软件的侵害，你必须加强社交工程防御。奇怪的链接、未经请求的电子邮件附件以及其他类似的可疑请求都表明，攻击者可能试图诱使你下载恶意软件。
- en: 'Exercise: Analyzing Malware and Managing Antivirus Settings'
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习：分析恶意软件并管理杀毒设置
- en: Anticipating the sources of malware and avoiding them are critical steps to
    keeping your system secure. After all, if the malware never gets onto your computer,
    you don’t have to worry about it infecting your system. In this exercise, you’ll
    use some free online tools to scan a PDF and find out whether it’s infected with
    malware. You’ll also learn more about the antivirus settings built into your computer,
    so you’ll know what to do if you do accidentally download malware onto your system.
    By the time you finish the exercise, you’ll know how to identify and defend against
    all sorts of malware threats.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 预测恶意软件的来源并避免它们是保护系统安全的关键步骤。毕竟，如果恶意软件永远没有进入你的计算机，你就不需要担心它会感染你的系统。在这个练习中，你将使用一些免费的在线工具扫描PDF，看看它是否感染了恶意软件。你还将了解更多关于计算机中内置的杀毒设置，这样你就知道在不小心下载恶意软件到系统时该怎么办。完成这个练习后，你将学会如何识别并防御各种恶意软件威胁。
- en: Analyzing Malware in Attachments
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分析附件中的恶意软件
- en: Let’s say you’ve received a strange PDF that looks like it came from a friend.
    This friend has sent you emails before with attachments like this, but you weren’t
    expecting anything from them and aren’t sure whether or not it’s malicious. One
    solution is to ask your friend if they sent the file; another is to just delete
    it and move on with your life. However, say your friend isn’t available, and you
    really want to know whether or not the file is safe. Well then, you’ll need to
    do some malware analysis.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你收到了一份看起来像是朋友发来的奇怪 PDF 文件。这个朋友以前曾发送过类似的附件，但这次你并没有期待他们的邮件，也不确定这是否是恶意文件。一种解决方法是问问你的朋友是否发送了该文件；另一种方法是直接删除它，继续过你的生活。然而，假设你的朋友无法联系，并且你真的想知道该文件是否安全。那么，你就需要进行一些恶意软件分析了。
- en: To complete this exercise, you can use a PDF created for this book, called *maliciouspdf.pdf*,
    which is available at [https://nostarch.com/cybersecurityreallyworks/](https://nostarch.com/cybersecurityreallyworks/).
    Alternatively, you can analyze any file you’d like; just make sure to label it
    *DO NOT OPEN* so you don’t forget it’s potentially malware.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这项练习，你可以使用为本书创建的 PDF，名为*maliciouspdf.pdf*，该文件可在[https://nostarch.com/cybersecurityreallyworks/](https://nostarch.com/cybersecurityreallyworks/)下载。或者，你也可以分析任何你想要的文件；只要确保将它标记为*DO
    NOT OPEN*，以免忘记它可能是恶意软件。
- en: First, you’ll need to verify the type of file that was sent. Office documents,
    executables, media files, and PDFs aren’t usually harmful unless you open them.
    But some, such as *.js*, *.sh*, or *.script* files, could execute upon downloading;
    others, like *.dll* files, might be activated by other processes once downloaded.
    The best option is to download a file using a virtual machine. A virtual machine
    is an environment that’s isolated from the rest of the physical computer, so if
    it does become infected, it very likely won’t infect the entire system. For malware
    to break out of the virtual machine, it would need to be very sophisticated software.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要验证发送的文件类型。Office 文档、可执行文件、媒体文件和 PDF 通常是无害的，除非你打开它们。但是，有些文件类型，如*.js*、*.sh*
    或 *.script* 文件，下载后可能会立即执行；其他文件，如 *.dll* 文件，可能会在下载后被其他进程激活。最佳选择是使用虚拟机下载文件。虚拟机是与物理计算机其他部分隔离的环境，因此如果它被感染，很可能不会感染整个系统。为了让恶意软件突破虚拟机，它需要非常复杂的软件。
- en: Because not everyone has access to a virtual machine, another solution is to
    download the suspected harmful file to a cloud platform. For example, if you use
    OneDrive for Windows, you can save the file directly to your online OneDrive folder
    instead of to your computer. Often, this will trigger an antivirus scan on the
    file, which might indicate it’s infected without you having to do further analysis.
    If you don’t have an online folder, the next best option is to use a flash drive
    or external hard drive. Although it’s still possible that malware saved to external
    storage will infect your main system, it reduces some of the risk. Just be sure
    no critical files are on the drive before you save the suspicious file.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 因为并非每个人都有虚拟机的使用权限，另一种解决方案是将可疑的有害文件下载到云平台。例如，如果你使用 Windows 的 OneDrive，你可以直接将文件保存到你的在线
    OneDrive 文件夹，而不是保存到电脑上。通常，这会触发对文件的病毒扫描，可能会在不需要进一步分析的情况下显示它已被感染。如果你没有在线文件夹，下一种最佳选择是使用闪存驱动器或外部硬盘。尽管将恶意软件保存到外部存储设备仍然有可能感染主系统，但这样能减少一些风险。只需确保在保存可疑文件之前，驱动器上没有任何重要文件。
- en: When you download the file, make sure you *do not open it*. Click the **Save
    As** option and move it to a folder called something like *Do Not Open* or *Malware*
    to remind you and others not to accidentally open it. Also, make sure your system
    doesn’t autorun any files by default. Many systems present you with an **Open
    With** option when you download a file. *Do not* select this option.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当你下载文件时，确保*不要打开它*。选择**另存为**选项，并将文件移动到一个名为 *Do Not Open* 或 *Malware* 的文件夹中，以提醒你和其他人不要意外打开它。同时，确保你的系统默认不会自动运行任何文件。许多系统在你下载文件时会提供**用此打开**选项。*不要*选择这个选项。
- en: Once you’ve safely saved the file, you can begin running it through the analysis
    tools. The first website you’ll use is VirusTotal ([https://www.virustotal.com/](https://www.virustotal.com/)),
    which you used in Chapter 3 to analyze a suspicious URL link. This time, you’ll
    use the File Analysis feature. When you load the page, you’ll see an option to
    upload a file for analysis. Click **Choose File**, navigate to your saved file,
    and select it for upload. [Figure 4-4](#figure4-4) shows an example using the
    *maliciouspdf.pdf* file.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安全保存了文件，你可以开始通过分析工具对其进行处理。你将首先使用的网站是 VirusTotal ([https://www.virustotal.com/](https://www.virustotal.com/))，你在第3章中曾用它分析可疑的
    URL 链接。这次，你将使用文件分析功能。当你加载页面时，你会看到上传文件进行分析的选项。点击**选择文件**，导航到你保存的文件并选择它进行上传。[图 4-4](#figure4-4)
    显示了使用 *maliciouspdf.pdf* 文件的示例。
- en: '![f04004](image_fi/501287c04/f04004.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![f04004](image_fi/501287c04/f04004.png)'
- en: 'Figure 4-4: The malicious PDF ready for upload'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-4：准备上传的恶意 PDF 文件
- en: Once the file is uploaded, click **Confirm Upload** to begin the analysis. VirusTotal
    runs the file through multiple antivirus software packages and returns the results,
    informing you whether or not the file is malicious. Keep in mind that VirusTotal
    will specify the number of engines that found malware in the file. If even one
    engine reports the file as being unsafe, you can assume it’s malware regardless
    of whether the others indicate it’s clean. [Figure 4-5](#figure4-5) provides an
    example of the output for *maliciouspdf.pdf*.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦文件上传完成，点击**确认上传**以开始分析。VirusTotal 会将文件通过多个杀毒软件程序进行扫描并返回结果，告知你文件是否含有恶意软件。请记住，VirusTotal
    会指明找到恶意软件的引擎数量。如果即使只有一个引擎报告文件为不安全，你也可以假设它是恶意软件，不管其他引擎是否标记它为干净。[图 4-5](#figure4-5)
    提供了 *maliciouspdf.pdf* 文件的输出示例。
- en: '![f04005](image_fi/501287c04/f04005.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![f04005](image_fi/501287c04/f04005.png)'
- en: 'Figure 4-5: The results from VirusTotal'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-5：VirusTotal 的结果
- en: As you can see, 37 different malware scanning services reported that the file
    contained malware. This file was created using a well-known exploit whose signature
    would have been loaded into many antivirus programs, making it easy to detect.
    But this might not always be the case. A file might contain new malware that doesn’t
    yet have a standard signature, causing VirusTotal to report the file as clean
    when it’s actually infected. To deal with this possibility, you’ll need to use
    another familiar tool, Joe Sandbox.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，37个不同的恶意软件扫描服务报告该文件含有恶意软件。这个文件是通过一个著名的漏洞创建的，其签名已被加载到许多杀毒程序中，因此容易被检测到。但这并不总是如此。文件可能包含尚未具有标准签名的新恶意软件，导致
    VirusTotal 报告文件为干净，实际上它已经被感染。为了应对这种情况，你需要使用另一个熟悉的工具，Joe Sandbox。
- en: As you learned in Chapter 3, Joe Sandbox ([https://www.joesandbox.com/](https://www.joesandbox.com/))
    allows you to analyze a link or file using a cloud platform that functions like
    an actual system. In this exercise, you’ll use it to open the file in a safe environment
    where you can thoroughly analyze it. To start, upload the file, as shown in [Figure
    4-6](#figure4-6).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在第3章中学到的，Joe Sandbox ([https://www.joesandbox.com/](https://www.joesandbox.com/))
    允许你通过一个云平台分析链接或文件，这个平台像一个实际的系统。在本练习中，你将使用它在一个安全环境中打开文件，进行彻底的分析。首先，上传文件，如[图 4-6](#figure4-6)所示。
- en: '![f04006](image_fi/501287c04/f04006.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![f04006](image_fi/501287c04/f04006.png)'
- en: 'Figure 4-6: Uploading the file on Joe Sandbox'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-6：在 Joe Sandbox 上上传文件
- en: Once the file is uploaded, the sandbox will take a few minutes to finish the
    analysis. Joe Sandbox opens the file and then runs it through several different
    antivirus scans. [Figure 4-7](#figure4-7) shows that these antivirus scanners
    identified *maliciouspdf.pdf* as malicious.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦文件上传完成，沙盒会花几分钟时间完成分析。Joe Sandbox 会打开文件，并通过多个不同的杀毒扫描进行检查。[图 4-7](#figure4-7)
    显示这些杀毒扫描程序将 *maliciouspdf.pdf* 文件识别为恶意文件。
- en: '![f04007](image_fi/501287c04/f04007.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![f04007](image_fi/501287c04/f04007.png)'
- en: 'Figure 4-7: Joe Sandbox results for *m**aliciouspdf.pdf*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-7：Joe Sandbox 对 *maliciouspdf.pdf* 的分析结果
- en: Joe Sandbox also provides additional analysis aimed at understanding what type
    of malware might be embedded in the file and how the malware would have affected
    your system if downloaded and opened. This can be especially helpful if you think
    you might have accidentally opened the file and need to figure out what sort of
    malicious activity it performed. [Figure 4-8](#figure4-8) shows some useful parts
    of the report on *maliciouspdf.pdf*.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Joe Sandbox 还提供了额外的分析，旨在了解文件中可能嵌入的恶意软件类型，以及如果下载并打开该恶意软件，它会如何影响你的系统。如果你认为自己可能不小心打开了文件，并需要找出它执行了什么样的恶意活动，这项分析会特别有用。[图
    4-8](#figure4-8) 显示了关于 *maliciouspdf.pdf* 的一些有用报告部分。
- en: 'This analysis gives you a detection level, in this case, malicious, and also
    provides two ways of classifying the file: Signatures and a Classification map.
    Recall that many antivirus programs use signature files to detect malware. The
    Signatures section displays the signatures that match the file being analyzed.
    The Classification section then provides an estimate of what type of malware the
    file contains based on the scans and signatures detected.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此分析提供了一个检测级别，在这个例子中是恶意的，并且还提供了两种文件分类方式：签名和分类图。回想一下，许多防病毒程序使用签名文件来检测恶意软件。签名部分显示与正在分析的文件匹配的签名。分类部分则根据扫描和检测到的签名，提供文件可能包含的恶意软件类型的估计。
- en: '![f04008](image_fi/501287c04/f04008.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![f04008](image_fi/501287c04/f04008.png)'
- en: 'Figure 4-8: Overview of the analysis for *m**aliciouspdf.pdf*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-8：*maliciouspdf.pdf* 分析概览
- en: Next, [Figure 4-9](#figure4-9) displays a breakdown of what processes were created
    when the file was executed in the sandbox.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，[图 4-9](#figure4-9) 展示了当文件在沙箱中执行时，创建了哪些进程。
- en: '![f04009](image_fi/501287c04/f04009.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![f04009](image_fi/501287c04/f04009.png)'
- en: 'Figure 4-9: Processes created by *m**aliciouspdf.pdf* when it’s opened'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-9：*maliciouspdf.pdf* 打开时创建的进程
- en: The report also lists any child processes created by parent processes. In this
    example, the Adobe Reader process started when the PDF was opened and then spawned
    two child processes. One of these processes spawned even more child processes.
    This part of the report can be useful to identify any processes that aren’t normally
    found in this type of file execution, such as the child processes here, which
    aren’t associated with Adobe.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 报告还列出了由父进程创建的任何子进程。在这个例子中，打开 PDF 后启动了 Adobe Reader 进程，随后它生成了两个子进程。这个进程中的一个子进程又生成了更多的子进程。这部分报告对于识别在此类文件执行中不常见的进程（例如这里的子进程，它们与
    Adobe 无关）非常有用。
- en: Reviewing Antivirus Settings
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 审查防病毒设置
- en: Now that you’ve analyzed the suspicious document and know it’s malware, you
    need to review the antivirus settings on your system to make sure your computer
    is protected against infection.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经分析了可疑文档，并知道它是恶意软件，你需要检查系统中的防病毒设置，确保你的计算机受到感染保护。
- en: Built-in antivirus software doesn’t come with macOS, but you can use several
    third-party options to keep your system safe. All Windows 10 systems come with
    Microsoft Defender installed, which is integrated into the operating system’s
    security settings and provides a wide range of malware protection, including against
    ransomware. Although other commercial products, such as Sophos, Check Point, Avast,
    and Symantec, offer additional features, we’ll focus on Microsoft Defender because
    it’s free and built into Windows 10 by default.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 内建的防病毒软件并未随 macOS 一起提供，但你可以使用多个第三方选项来保护你的系统安全。所有 Windows 10 系统都预装了 Microsoft
    Defender，它集成在操作系统的安全设置中，并提供广泛的恶意软件防护，包括对勒索软件的防护。虽然其他商业产品，如 Sophos、Check Point、Avast
    和 Symantec，提供额外的功能，但我们将重点介绍 Microsoft Defender，因为它是免费的，并且默认内置于 Windows 10 中。
- en: macOS
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: macOS
- en: Most modern antivirus software comes with an Apple-compatible version. If you’re
    looking for a free program, Avast and Sophos provide effective products. But when
    you use the free versions, the features are limited. Both products offer paid
    versions that provide more robust features.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代防病毒软件都有 Apple 兼容版本。如果你在寻找免费的程序，Avast 和 Sophos 提供有效的产品。但使用免费版本时，功能是有限的。两款产品都提供付费版本，提供更强大的功能。
- en: Although not as many existing types of malware are programmed to attack Apple
    computers as Windows systems, it’s still essential to scan your computer regularly.
    It’s also critical to set automatic updates so you’ll have the latest signatures
    as soon as they’re available. Be wary of where you get applications, even from
    the official Apple store. Malware, especially ransomware and trojans, is often
    disguised as applications, and some of these have been known to slip past Apple’s
    verification process and been placed in the official store.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管目前攻击 Apple 计算机的恶意软件种类不如 Windows 系统那么多，但定期扫描计算机仍然至关重要。设置自动更新同样关键，这样一来，一旦有新的病毒定义文件发布，你就能第一时间获取。即使是从官方
    Apple 商店下载应用程序，也要小心。恶意软件，特别是勒索病毒和木马，常常伪装成应用程序，其中一些甚至能够绕过 Apple 的验证流程，进入官方商店。
- en: Windows 10
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Windows 10
- en: To access the Microsoft Defender settings, locate the security dashboard by
    entering **security** into the search bar located in the taskbar at the bottom-left
    corner of the screen. Click **Windows Security** and then click **Virus & Threat
    Protection** to open the Microsoft Defender settings for antivirus protection,
    as shown in [Figure 4-10](#figure4-10).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问 Microsoft Defender 设置，请在屏幕左下角的任务栏中的搜索框中输入**安全**，找到安全仪表盘。点击**Windows 安全**，然后点击**病毒与威胁防护**以打开
    Microsoft Defender 的防病毒保护设置，如[图 4-10](#figure4-10)所示。
- en: You can perform a few different actions using these options. First, you can
    run a manual scan using the Quick Scan Option. This will scan the most likely
    places a virus or other malware might be located, and it does so in no time at
    all. As you can see, the last scan done on this system took one minute and 26
    seconds to scan 42,363 files. Quick scans are beneficial if you think your computer
    has been infected with a well-known, ordinary piece of malware. But not all malware
    hides in the obvious files. To make sure your system is truly clean, it’s best
    to scan more than those files that a quick scan inspects. To do this, click **Scan
    Options** below the Quick Scan button.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些选项，你可以执行几种不同的操作。首先，你可以使用快速扫描选项进行手动扫描。它会扫描病毒或其他恶意软件最可能存在的地方，且速度非常快。如你所见，此系统上最近一次扫描花费了1分26秒，扫描了42,363个文件。如果你认为计算机感染了常见的恶意软件，快速扫描非常有用。但并非所有恶意软件都藏在显眼的文件中。为了确保系统真正干净，最好扫描更多的文件，而不仅仅是快速扫描所检查的那些文件。为此，请点击**扫描选项**，位于快速扫描按钮下方。
- en: '![f04010](image_fi/501287c04/f04010.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![f04010](image_fi/501287c04/f04010.png)'
- en: 'Figure 4-10: Virus & threat protection settings'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-10：病毒与威胁防护设置
- en: Microsoft Defender offers several options for scanning other than a quick scan.
    The *full scan* option inspects your entire operating system. This is a more intense
    scan than a quick scan, so it can slow down your computer and takes a long time
    to complete. But it provides a comprehensive report of your system by checking
    every nook and cranny. You can also do a *custom scan* of specifically chosen
    files. It’s best to use this option when you know exactly what type of malware
    you’re dealing with and know where it likes to hide. For example, you could use
    the analysis report from Joe Sandbox to determine which files or folders a malicious
    file interacted with, and then scan them to see whether the malware infected your
    system as well. The *Windows Defender Offline scan* is essentially a boot sector
    scanning option. It restarts your computer and scans it before the system has
    a chance to fully boot to ensure that rootkits or bootkits are unable to hide
    or modify processes once the system is started. [Figure 4-11](#figure4-11) shows
    these scanning options.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Defender 提供了除快速扫描外的几种扫描选项。*完全扫描*选项会检查整个操作系统。与快速扫描相比，这是一种更为彻底的扫描，因此可能会减慢计算机的运行速度，并且完成所需时间较长。但它通过检查系统的每个角落，为你提供一个全面的报告。你还可以进行*自定义扫描*，选择特定的文件进行扫描。当你确切知道自己面对的恶意软件类型并且知道它喜欢隐藏的地方时，使用这个选项效果最好。例如，你可以使用
    Joe Sandbox 的分析报告，确定恶意文件与哪些文件或文件夹发生了交互，然后扫描这些文件或文件夹，看看恶意软件是否也感染了你的系统。*Windows
    Defender 离线扫描*实际上是一种启动扇区扫描选项。它会重新启动计算机，在系统完全启动之前进行扫描，以确保 rootkit 或 bootkit 无法在系统启动后隐藏或修改进程。[图
    4-11](#figure4-11)显示了这些扫描选项。
- en: '![f04011](image_fi/501287c04/f04011.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![f04011](image_fi/501287c04/f04011.png)'
- en: 'Figure 4-11: Microsoft Defender scan options'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-11：Microsoft Defender 扫描选项
- en: When you return to the Virus & Threat Protection dialog, find the Protection
    History option. This shows you a list of all the threats that Microsoft Defender
    has detected and what it did to neutralize them ([Figure 4-12](#figure4-12)).
    If you’re ever concerned that a virus wasn’t mitigated properly or that the antivirus
    software might have removed legitimate files accidentally (which is rare but happens
    from time to time), you can use this dialog to view the recent activity. [Figure
    4-12](#figure4-12) shows an example of two threats that were discovered and quarantined
    on the system (in case you were wondering what happens when you add malicious
    PDFs to your system as part of this exercise).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当你返回到病毒和威胁防护对话框时，找到“保护历史”选项。这个选项会显示微软 Defender 检测到的所有威胁及其采取的措施以中和这些威胁（[图 4-12](#figure4-12)）。如果你担心病毒没有被正确清除，或者防病毒软件可能误删了合法文件（虽然这种情况很少见，但偶尔会发生），你可以使用这个对话框查看最近的活动。[图
    4-12](#figure4-12) 显示了系统中发现并被隔离的两个威胁的示例（如果你在想当你将恶意 PDF 添加到系统中时会发生什么，这是一个例子）。
- en: The additional options below Virus & Threat Protection Settings determine how
    Microsoft Defender runs, including whether it offers *real-time protection*, which
    stops malware from installing, or whether it submits samples of malicious code
    to an antivirus database to be used for signatures. Microsoft Defender does provide
    some cloud-powered heuristic resources as well, but overall, it’s a signature-based
    system. By default, it will automatically update its list of signatures, but you
    should make sure these are up-to-date nonetheless. You can manually check for
    updates by clicking Check for Updates in the Virus & Threat Protection dialog.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 下述病毒和威胁防护设置中的附加选项决定了微软 Defender 的运行方式，包括是否提供*实时保护*，以阻止恶意软件的安装，或是否将恶意代码的样本提交到防病毒数据库，用于生成签名。微软
    Defender 也提供一些基于云的启发式资源，但总体而言，它是一个基于签名的系统。默认情况下，它会自动更新签名列表，但你仍然应该确保这些签名是最新的。你可以通过在病毒和威胁防护对话框中点击“检查更新”来手动检查更新。
- en: '![f04012](image_fi/501287c04/f04012.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![f04012](image_fi/501287c04/f04012.png)'
- en: 'Figure 4-12: Microsoft Defender protection history'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-12：微软 Defender 保护历史
- en: The final setting you’ll want to check is *ransomware* *protection*, as shown
    in [Figure 4-13](#figure4-13). To guard against ransomware, Microsoft Defender
    controls access to folders and provides backups using certain cloud platforms.
    In these settings, you can see which files are protected and modify some of the
    protection settings. Keep in mind that Microsoft Defender isn’t foolproof. If
    you maintain regular backups on an external hard drive or cloud system separate
    from your main storage, you’ll further help protect your system should it be locked
    by ransomware.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最后你需要检查的设置是*勒索软件* *保护*，如[图 4-13](#figure4-13)所示。为了防范勒索软件，微软 Defender 控制对文件夹的访问，并通过某些云平台提供备份。在这些设置中，你可以查看哪些文件已被保护，并修改一些保护设置。请记住，微软
    Defender 不是万无一失的。如果你在外部硬盘或与主存储分开的云系统上保持定期备份，如果你的系统被勒索软件锁定，这将进一步帮助保护你的系统。
- en: You’ve now learned how to analyze a file for potentially embedded malware and
    have prepared your Windows system to reduce the threat of infection. Both skills
    are imperative for defending your system from any malware threat. Combining these
    skills with those you learned in Chapter 3 will make it even more difficult for
    a black hat to compromise your system. Prevention is one of the best ways to defeat
    malware. Keep in mind that if malware never makes it onto your system, you don’t
    have to worry about what it does.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经学会了如何分析文件中潜在的嵌入恶意软件，并且已准备好你的 Windows 系统以减少感染的威胁。这两项技能对于保护你的系统免受任何恶意软件威胁是至关重要的。将这些技能与第三章中学到的技能结合起来，将使黑客更难入侵你的系统。预防是击败恶意软件的最佳方法之一。记住，如果恶意软件从未进入你的系统，你就不需要担心它会做什么。
- en: '![f04013](image_fi/501287c04/f04013.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![f04013](image_fi/501287c04/f04013.png)'
- en: 'Figure 4-13: Microsoft Defender ransomware protection settings'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-13：微软 Defender 勒索软件保护设置
- en: Conclusion
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: This chapter focused on the various types of malware and their distinct characteristics.
    Viruses and worms, the most traditional malware types, typically carry payloads
    that perform malicious actions when activated. In addition, worms are designed
    to spread the malware to new systems. Ransomware encrypts files and holds them
    for ransom, allowing black hats to extort money from their victims. Trojans hide
    in plain sight, allowing backdoor access or even installing rootkits or bootkits,
    which infect a system’s heavier security areas to cause modifications to its operation.
    Spyware and adware are sometimes more annoying than they are malicious, stealing
    traffic and serving up ads, such as pop-ups that appear out of nowhere. But the
    worst type is polymorphic malware. This advanced software can change its code
    on the fly, allowing for advanced persistent infections that are incredibly hard
    to detect.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了各种类型的恶意软件及其不同特征。病毒和蠕虫是最传统的恶意软件类型，通常携带有效负载，当激活时会执行恶意操作。此外，蠕虫还设计用于将恶意软件传播到新系统。勒索软件加密文件并要求赎金，允许黑客从受害者那里勒索钱财。木马则藏身于明面之中，允许后门访问，甚至安装根套件或启动套件，这些恶意软件感染系统的核心安全区域，导致操作的修改。间谍软件和广告软件有时比恶意更令人烦恼，它们窃取流量并弹出广告，比如突然出现的弹窗。但最危险的类型是变种恶意软件。这种先进的软件能够即时改变其代码，允许进行高级持久感染，极其难以检测。
- en: In this chapter, we also explored how to defend against malware. The key is
    to combine social engineering defense skills with advanced anti-malware software.
    By being mindful of where and what you click and what you download, you can prevent
    an infection. If a system does get infected, antivirus software helps detect the
    malicious code by using either signature or heuristic characteristics. Signature
    detection is fast and requires few resources but isn’t as advanced as heuristic
    detection, which compares traffic to a baseline to determine whether it’s normal
    or unusual. By combining these tactics, you can keep your system free of infection
    and running the way it should.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还探讨了如何防御恶意软件。关键在于将社会工程防御技巧与先进的反恶意软件软件结合使用。通过注意你点击的内容、下载的文件以及点击的链接，你可以防止感染。如果系统确实被感染，杀毒软件可以通过使用签名或启发式特征来检测恶意代码。签名检测速度快，资源消耗少，但不如启发式检测先进，后者通过将流量与基准数据进行比较来判断是否正常或异常。通过结合这些策略，你可以保持系统免受感染，并使其正常运行。
