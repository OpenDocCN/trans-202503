- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Media
  prefs: []
  type: TYPE_NORMAL
- en: When software engineers talk about media, they’re usually referring to *multimedia*,
    meaning audio and video. These technologies are very distinct from each other
    and both require deep domain expertise. So engineers usually work on one or the
    other, not both. Nevertheless, audio and video engineers are usually collected
    into the same “media” team. Maybe it’s because they both require such power and
    memory from the device—and such extreme optimizations in the software—in order
    to work reliably for the user.
  prefs: []
  type: TYPE_NORMAL
- en: Dave Sparks and Ringtones
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dave Sparks only took one programming course in his life, a Fortran class when
    he was a sophomore in high school. Writing programs in that class consisted of
    typing the code onto punch cards, which were then wrapped with a rubber band and
    couriered to the district office, where they would be executed on the computer
    there. Students would get the results of their program on a printout a few days
    later.^([1](#c12-footnote-1))
  prefs: []
  type: TYPE_NORMAL
- en: Dave was more intrigued by the old Monrobot XI system in the back of the classroom,
    a circa 1960 machine that used a rotating magnetic drum for storage. He learned
    how to program machine code on that old system, nearly failing the Fortran class
    in the process.
  prefs: []
  type: TYPE_NORMAL
- en: His programming career began after high school, while he was working in a RadioShack.
    Ray Dolby^([2](#c12-footnote-2)) came into the store one day looking for help;
    he wanted a program to download his stock data into a spreadsheet. The manager
    pointed at Dave as someone who could help. One program and $50 later, Dave was
    a professional programmer.
  prefs: []
  type: TYPE_NORMAL
- en: In the early 2000s, carriers required mobile phones to support a variety of
    ringtone formats. Complicating the requirement more was the fact that different
    carriers used different formats, so phone manufacturers would have to support
    multiple formats in order to be able to sell their devices into different markets.
  prefs: []
  type: TYPE_NORMAL
- en: Yamaha offered a dedicated synthesizer chip that could handle the requirements,
    for a cost of a couple dollars per handset. Manufacturers are always looking for
    ways to cut costs, so a company called Sonivox introduced a software-based solution
    instead, selling it for just a dollar per handset.
  prefs: []
  type: TYPE_NORMAL
- en: Dave Sparks was in charge of that product at Sonivox when Andy Rubin came calling.
  prefs: []
  type: TYPE_NORMAL
- en: With Android’s plans to open source the OS, Andy’s needs were different from
    Sonivox’s typical customers; he wanted the product, but also to publish the source
    code for it, effectively eliminating future sales. Dave remembered the deal as,
    “This is going to be open sourced in the future. Here’s a pile of money.”
  prefs: []
  type: TYPE_NORMAL
- en: The deal happened in early 2007\. In March, Dave came to Google and spent a
    couple hours with Ficus Kirkpatrick to integrate that software into the system.
    Suddenly, Android could play ringtones.
  prefs: []
  type: TYPE_NORMAL
- en: Months later, Andy called Dave, who was still at Sonivox, and asked him to join
    Android to build a media team. Dave joined Android in August of 2007.
  prefs: []
  type: TYPE_NORMAL
- en: Marco Nelissen and Audio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After Ficus got ringtones working with the Sonivox software, he also got a
    single MP3 ringtone working: “Crazy” by Gnarls Barkley. Joe Onorato explained,
    “mp3 playback was a ton of work. As soon as he got that working, we needed a ringtone.
    He checked in an MP3 of ‘Crazy’ and that was The Ringtone.”'
  prefs: []
  type: TYPE_NORMAL
- en: With all Android phones playing that same ringtone for every phone call, the
    song was driving everyone . . . well, you know.
  prefs: []
  type: TYPE_NORMAL
- en: 'The team needed help generalizing the ringtone system, so they hired someone
    that had been writing audio software for years: Marco Nelissen.'
  prefs: []
  type: TYPE_NORMAL
- en: When he was in high school in the Netherlands, Marco’s parents bought him a
    Commodore 64\. Initially, he just played games on it, but he soon started programming
    on it, learning BASIC and then assembly. He wrote text editors and then began
    playing with multimedia applications as well, including a music sequencing app
    called SoundTracker Pro.^([3](#c12-footnote-3))
  prefs: []
  type: TYPE_NORMAL
- en: After college, he continued working in multimedia, first at a company writing
    software for Philips CD-i platform, and then at Be. Like many colleagues at Be,
    he joined Palm after its acquisition of Be. He stuck around at PalmSource longer
    than most of his team, who had mostly joined Google to work on Android by early
    2006\. Marco finally joined the Android team in January of 2007.
  prefs: []
  type: TYPE_NORMAL
- en: Marco dove into Android’s audio functionality. His first project was to add
    the increasingly important ability to select a different ringtone. “Not that I
    didn’t like that song, but when you heard the same thing every few minutes when
    someone’s phone rang, it got tiring.”
  prefs: []
  type: TYPE_NORMAL
- en: He continued working on sound and multimedia in general. He added sound capabilities
    to the simulator (which was used by the team for debugging their software), and
    eventually wrote the first music app for Android. He also later wrote a couple
    of the first Live Wallpapers (sound and music visualizers) for the Eclair (Android
    2.1) release, which shipped with the Nexus One.
  prefs: []
  type: TYPE_NORMAL
- en: AudioFlinger
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another audio problem that had to be solved was for the G1\. The original HTC
    audio drivers for that device were so buggy that even doing something as simple
    as trying to play a second sound while one was already playing would reboot the
    device. The Android team didn’t have access to the source code for that driver,
    so they worked around the problem by introducing a layer on top of the driver
    called AudioFlinger.
  prefs: []
  type: TYPE_NORMAL
- en: Mathias came up with the name, based on his experience writing SurfaceFlinger.
    SufaceFlinger solved a related problem on the graphics side, where many applications
    produced buffers of pixel data that SurfaceFlinger displayed on the screen. Similarly,
    AudioFlinger combined multiple audio streams across the system into a single stream
    which would then be sent to the driver without (and this is the key part) causing
    the device to reboot. Mathias worked with Marco, Arve, and Ficus to get it working
    for the G1\. It was only supposed to be a temporary workaround in the platform
    for that specific device, but as often happens in software, it lived on far past
    its usefulness until it was finally rewritten so that the system could talk more
    directly to drivers that didn’t have those historical problems.
  prefs: []
  type: TYPE_NORMAL
- en: The Video Code Nobody Liked
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Handling video is complicated. For one thing, video needs codecs^([4](#c12-footnote-4))
    to load and save video files. Video software also needs the capability to play
    content that has been loaded by a codec. And once you have all of that working,
    you need to optimize it to happen quickly, because a video that can’t play smoothly
    is less “video” and more “frustrating.”
  prefs: []
  type: TYPE_NORMAL
- en: Meanwhile, the software needs to be able to talk to the hardware, which is tricky
    because video-specific hardware can vary widely between devices.
  prefs: []
  type: TYPE_NORMAL
- en: With such a small team, it would have been difficult to implement everything
    that video required. So Andy made the decision to buy the necessary technology
    instead of writing it in-house. He asked Ficus Kirkpatrick to check out some options,
    but had him focus on a company called PacketVideo. PacketVideo, at the time, licensed
    an entire suite of software to do all of what Android needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The deal was going to happen; Ficus’s investigation was more like a sanity-check
    than a deep analysis. Ficus remembered, “Andy told me he was going to do the deal
    no matter what.” Like the rest of the team, he was busy with other things at the
    time, and it seemed like a foregone conclusion, so he didn’t spend a lot of time
    evaluating the situation: “I didn’t think it mattered. I didn’t think the code
    was good, but didn’t speak up.”'
  prefs: []
  type: TYPE_NORMAL
- en: He briefly investigated other options. He vetoed one of the alternatives because
    of the state of their code. That other company was so focused on making their
    product work on Windows that they baked assumptions into the software that made
    it unusable on any other OS (such as Linux, which was what Android needed). Comparatively,
    PacketVideo was a better choice. “It was probably the least awful of the media
    frameworks I looked at.”
  prefs: []
  type: TYPE_NORMAL
- en: The deal that Andy was proposing was awkward for PacketVideo; he was proposing
    to give away the core of their business. The company made its money from licensing
    their video software. Android needed not only the functionality of their code,
    but also the code itself. Android was planning to open source all of the code
    for the platform, including PacketVideo’s code. So the deal Andy proposed was
    that Android would take their software and publish it in the open, essentially
    destroying any future licensing possibilities they might have had, because any
    potential clients could just copy the Android code. Ficus said, “Andy’s pitch
    to them was, ‘Your business is going to change from licensing to professional
    services. We will give you some money to bridge the transition.’”
  prefs: []
  type: TYPE_NORMAL
- en: The deal was done (with the help of Tom Moss^([5](#c12-footnote-5))), the code
    was integrated, and the Android team was . . . not happy.^([6](#c12-footnote-6))
    Ficus remembered, “The code was not very good. Optimizing it was really hard.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Mathias Agopian agreed. “It was a disaster, from a technical standpoint. PacketVideo
    on paper was really good: tons of codecs, playback, recording, video, audio. On
    paper, problem solved. But we spent many, many, many years fixing and eventually
    rewriting everything.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ficus continued: “Probably my only good contribution was refusing to ship their
    API and only shipping the extremely simple MediaPlayer/MediaRecorder [APIs]. This
    was a low complexity, low capability API that made it possible to move a lot of
    the stuff around under the hood.” That is, by offering only simple and generic
    video capabilities to application developers, instead of exposing more advanced
    PacketVideo features directly, Ficus ensured that the details of how video was
    implemented could change later, when the team had more time to deal with the problem.'
  prefs: []
  type: TYPE_NORMAL
- en: In fact, this was what eventually happened. Years later, this layer of the system
    was completely rewritten as a component called *stagefright*. Andreas Huber, an
    engineer on the media team at the time, had been steadily rewriting portions of
    the PacketVideo code. Eventually he realized that the old code wasn’t being called
    anymore, so he deleted it and the PacketVideo code was no more.
  prefs: []
  type: TYPE_NORMAL
