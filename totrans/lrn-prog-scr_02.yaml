- en: Chapter 3. Looks and Sound
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the last chapter, you learned to move sprites on the Stage using the motion
    commands and how to use the pen to draw patterns. In this chapter, you’ll learn
    about the various commands in the *Looks* and *Sounds* palettes. Along the way,
    you’ll do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create animations and image effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how layers work in Scratch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Play sound files and compose music
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make complete animated scenes of your own
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The commands in the *Looks* palette will let you create animations and apply
    graphic effects like whirl, fisheye, ghost, and so on to costumes and backgrounds.
    The commands in the *Sounds* palette are handy when you want to add sounds, voices,
    or music to your applications. Let’s jump right in with some animation!
  prefs: []
  type: TYPE_NORMAL
- en: The Looks Palette
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can draw images directly on the Stage using the pen commands, but costumes
    provide another powerful, and sometimes much easier, way to add graphics to your
    programs. The commands in the *Looks* palette will let you manipulate costumes
    to create animations, add thought bubbles, apply graphic effects, and change a
    sprite’s visibility. We’ll explore those command blocks in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Changing Costumes to Animate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Animation.sb2*'
  prefs: []
  type: TYPE_NORMAL
- en: You know how to send a sprite from one point to another on the Stage, but static
    sprites don’t look very lifelike as they jump around. If you use different costumes
    and switch between them fast enough, you can make a sprite appear as if it were
    really moving! Open the file *Animation.sb2* to try out the animation in [Figure 3-1](ch03.html#you_can_create_the_illusion_of_animation
    "Figure 3-1. You can create the illusion of animation by switching among different
    costumes.").
  prefs: []
  type: TYPE_NORMAL
- en: '![You can create the illusion of animation by switching among different costumes.](httpatomoreillycomsourcenostarchimages2134425.png.jpg)Figure 3-1. You
    can create the illusion of animation by switching among different costumes.'
  prefs: []
  type: TYPE_NORMAL
- en: This application contains one sprite with seven costumes along with one script.
    You can see the seven costumes in the *Costumes* tab and the script in the *Scripts*
    tab of the sprite. When you run the application by clicking the green flag, the
    stick figure will appear to walk on the Stage. The key to its motion is the **next
    costume** command, which tells the sprite to put on the next costume in its list.
    If the sprite is wearing the last costume in the list, it will roll over to its
    first costume.
  prefs: []
  type: TYPE_NORMAL
- en: When the green flag is clicked, the script starts a **forever** loop with a
    **wait** block at the end to create a delay of 0.1 seconds after each costume
    change. If you remove this delay from the script, the stick figure will appear
    to run instead of walk. Experiment with different values for the **move** and
    the **wait** blocks and see how they affect the animation.
  prefs: []
  type: TYPE_NORMAL
- en: Although you could draw this walking stick figure with the pen commands, you
    would need to write a long script. On the other hand, once you draw these costumes,
    programming the animation is a breeze. Remember that you can create images using
    your favorite paint program or with Scratch’s Paint Editor.
  prefs: []
  type: TYPE_NORMAL
- en: '*ClickOnFace.sb2*'
  prefs: []
  type: TYPE_NORMAL
- en: If you want people to interact with a sprite, you could change its costume in
    response to a mouse click, as in the Click on Face application. This application
    contains a single sprite, named `Face`, which has the five costumes shown in [Figure 3-2](ch03.html#smiley_face_and_the_backdrop_change_when
    "Figure 3-2. The smiley face and the backdrop change whenever the sprite is clicked.").
    It uses the **when this sprite clicked** block (from the *Events* palette) to
    tell the sprite when to switch costumes.
  prefs: []
  type: TYPE_NORMAL
- en: '![The smiley face and the backdrop change whenever the sprite is clicked.](httpatomoreillycomsourcenostarchimages2134427.png.jpg)Figure 3-2. The
    smiley face and the backdrop change whenever the sprite is clicked.'
  prefs: []
  type: TYPE_NORMAL
- en: When you run this application, every time you click the mouse on the face image,
    the image will change to the next one in the list. The script also uses the **switch
    backdrop to** block to command the Stage to switch randomly to one of its four
    backdrops. When the Stage switches to its `Stage4` image, the `Face` sprite detects
    this event (using the **when backdrop switches to** trigger block from the *Events*
    palette). In this case, the face makes a trip to the upper-right corner of the
    Stage and then returns to the center.
  prefs: []
  type: TYPE_NORMAL
- en: Try It Out 3-1
  prefs: []
  type: TYPE_NORMAL
- en: '*TrafficLight.sb2*'
  prefs: []
  type: TYPE_NORMAL
- en: The file *TrafficLight.sb2* contains one sprite that has three costumes (named
    `red`, `orange`, and `green`) and an incomplete script, as shown below. Complete
    the application by adding the necessary **wait** blocks to create a realistic
    traffic light animation.
  prefs: []
  type: TYPE_NORMAL
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2134429.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*You can use the* **switch backdrop to** *command to change scenes in a story,
    switch levels in a game, and so on. Any sprite in your project can use the* **when
    backdrop switches to** *block to detect when the Stage has switched to a certain
    costume and act accordingly. See the Tips window in the Scratch interface for
    more details.*'
  prefs: []
  type: TYPE_NORMAL
- en: Sprites That Speak and Think
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use the **say** and **think** commands to make your sprite speak or
    think like a character in a comic strip, as illustrated in [Figure 3-3](ch03.html#use_the_say_or_think_commands_to_show_a
    "Figure 3-3. Use the say or think commands to show a message in a speech or a
    thought bubble.") (left).
  prefs: []
  type: TYPE_NORMAL
- en: '![Use the say or think commands to show a message in a speech or a thought
    bubble.](httpatomoreillycomsourcenostarchimages2134431.png.jpg)Figure 3-3. Use
    the *say* or *think* commands to show a message in a speech or a thought bubble.'
  prefs: []
  type: TYPE_NORMAL
- en: Any phrase you type into these commands will appear above the sprite, and the
    message is displayed permanently. If you want to clear the message, use a **say**
    or **think** block with no text. You could also display a message for a fixed
    time instead with the **say for secs** (or the **think for secs**) command, as
    illustrated in [Figure 3-3](ch03.html#use_the_say_or_think_commands_to_show_a
    "Figure 3-3. Use the say or think commands to show a message in a speech or a
    thought bubble.") (right).
  prefs: []
  type: TYPE_NORMAL
- en: Try It Out 3-2
  prefs: []
  type: TYPE_NORMAL
- en: '*Argue.sb2*'
  prefs: []
  type: TYPE_NORMAL
- en: To see the **Say** and **Think** commands in action, open the file *Argue.sb2*
    and run it. This application simulates an endless argument between two characters,
    as illustrated below. Study the scripts to understand how they use accurate timing
    to synchronize the actions of the two characters.
  prefs: []
  type: TYPE_NORMAL
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2134433.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Image Effects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*GraphicEffects.sb2*'
  prefs: []
  type: TYPE_NORMAL
- en: The **set effect to** command allows you to apply different graphic effects
    to costumes and backdrops. Scratch gives these effects names like fisheye, whirl,
    mosaic, and so on. [Figure 3-4](ch03.html#this_figure_shows_what_happens_to_the_ca
    "Figure 3-4. This figure shows what happens to the cat when you apply Scratch’s
    graphic effects.") shows exactly what they do.
  prefs: []
  type: TYPE_NORMAL
- en: '![This figure shows what happens to the cat when you apply Scratch’s graphic
    effects.](httpatomoreillycomsourcenostarchimages2134435.png.jpg)Figure 3-4. This
    figure shows what happens to the cat when you apply Scratch’s graphic effects.'
  prefs: []
  type: TYPE_NORMAL
- en: Click the down arrow in the **set effect to** block to choose the effect you
    want from the drop-down menu. You can also use the **change effect by** command
    to adjust an effect instead of setting it directly. For example, if the current
    ghost effect is set to 40, changing it by 60 would set the ghost effect to 100,
    causing the sprite to disappear (like a ghost). When you want to return an image
    to its original state, use the **clear graphic effects** block.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*You can apply multiple effects to a sprite at once by using several graphic
    effect commands in sequence.*'
  prefs: []
  type: TYPE_NORMAL
- en: Size and Visibility
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*SneezingCat.sb2*'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes you may need to change the size of a sprite or control when it appears
    in your program. For example, you may want to have closer objects in a scene look
    larger, or you may want to show an “instructions” sprite only at the beginning
    of a game.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to shrink or grow a sprite, the **set size to %** and **change size
    by** commands can help. The first sets a sprite’s size to a percentage of its
    original size, and the second modifies a sprite’s size by a specified amount relative
    to its current size. When you need to make a sprite appear or disappear, use the
    **show** block or the **hide** block, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: To see these commands in action, open *SneezingCat.sb2*. In this application,
    we’ll have the cat sneeze like a cartoon character by changing its size, as shown
    in [Figure 3-5](ch03.html#this_script_makes_the_cat_sprite_sneezed "Figure 3-5. This
    script makes the Cat sprite sneeze.").
  prefs: []
  type: TYPE_NORMAL
- en: '![This script makes the Cat sprite sneeze.](httpatomoreillycomsourcenostarchimages2134437.png.jpg)Figure 3-5. This
    script makes the *`Cat`* sprite sneeze.'
  prefs: []
  type: TYPE_NORMAL
- en: The size of the sprite increases as it gets ready to sneeze, and after it sneezes,
    it returns slowly to its original size. Run the program and watch what happens
    to get a feel for these commands.
  prefs: []
  type: TYPE_NORMAL
- en: Try It Out 3-3
  prefs: []
  type: TYPE_NORMAL
- en: Add a block to the end of the script in [Figure 3-5](ch03.html#this_script_makes_the_cat_sprite_sneezed
    "Figure 3-5. This script makes the Cat sprite sneeze.") to have the `Cat` sprite
    finish its dramatic sneeze by vanishing afterward. Add another block to show the
    sprite at the beginning of the script.
  prefs: []
  type: TYPE_NORMAL
- en: Layers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The last two commands in the *Looks* palette affect the order in which sprites
    are drawn on the Stage. This order determines which sprites are visible when they
    overlap. For example, let’s say that you want to create a scene of a girl standing
    behind a big rock. There are two layering possibilities, shown in [Figure 3-6](ch03.html#sprite_in_the_front_layer_is_completely
    "Figure 3-6. The sprite in the front layer is completely visible and can cover
    parts of overlapping sprites.") (left).
  prefs: []
  type: TYPE_NORMAL
- en: '![The sprite in the front layer is completely visible and can cover parts of
    overlapping sprites.](httpatomoreillycomsourcenostarchimages2134439.png.jpg)Figure 3-6. The
    sprite in the front layer is completely visible and can cover parts of overlapping
    sprites.'
  prefs: []
  type: TYPE_NORMAL
- en: If you want the girl to be behind the rock, you must bring the rock to the front
    drawing layer or send the girl to the back drawing layer. Scratch provides two
    commands that allow you to reorder the drawing layers, **go to front** and **go
    back layers** (also shown in the figure). The first tells Scratch to always draw
    a sprite on top, while the second sends a sprite back as many layers as you specify.
  prefs: []
  type: TYPE_NORMAL
- en: Try It Out 3-4
  prefs: []
  type: TYPE_NORMAL
- en: '*Layers.sb2*'
  prefs: []
  type: TYPE_NORMAL
- en: The *Layers.sb2* application has four objects that move on the Stage. You can
    bring an object to the top by pressing the first letter of its color. Run the
    application to explore the effect of the **go to front** command.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve covered animation with the *Looks* palette, but there’s another thing
    that can liven up our applications. In the next section, we’ll explore the *Sound*
    palette and its rich set of commands.
  prefs: []
  type: TYPE_NORMAL
- en: The Sound Palette
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Games and other applications use sound effects and background music to add excitement.
    In this section, you’ll learn to use Scratch’s sound-related blocks, starting
    with how to incorporate audio files and control their playback. You’ll then look
    at command blocks for playing drums and other musical instruments. After that,
    you’ll find out how to control the volume and change the speed (or tempo) at which
    musical notes and drums are played.
  prefs: []
  type: TYPE_NORMAL
- en: Playing Audio Files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can save audio files on your computer in many formats, but Scratch only
    recognizes two: WAV and MP3\. There are three command blocks that allow you to
    use these sound files in your applications: **play sound**, **play sound until
    done**, and **stop all sounds**. Both of the first two blocks play a given sound.
    The **play sound** command lets the next command start before the sound finishes
    playing, while **play sound until done** won’t move on to the next command until
    the end of the sound. The **stop all sounds** command immediately turns off any
    sound that is playing.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can add background music to your application by playing an audio file repeatedly.
    The easiest way to do this is to use **play sound until done** to let the file
    to play completely, and then restart it, as shown in [Figure 3-7](ch03.html#two_ways_to_create_background_music_repe
    "Figure 3-7. Two ways to create background music: Repeat the sound after it finishes
    (left) or start the sound over after playing it for a certain amount of time (right).")
    (left).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Two ways to create background music: Repeat the sound after it finishes (left)
    or start the sound over after playing it for a certain amount of time (right).](httpatomoreillycomsourcenostarchimages2134441.png.jpg)Figure 3-7. Two
    ways to create background music: Repeat the sound after it finishes (left) or
    start the sound over after playing it for a certain amount of time (right).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on the audio file, this approach may produce a very short, but sometimes
    noticeable, pause between the consecutive restarts. You could also use the **play
    sound** command with a **wait** command to give yourself more control over the
    play duration, as shown in [Figure 3-7](ch03.html#two_ways_to_create_background_music_repe
    "Figure 3-7. Two ways to create background music: Repeat the sound after it finishes
    (left) or start the sound over after playing it for a certain amount of time (right).")
    (right). By experimenting with the wait time, you may be able to shorten the pause
    to produce a smoother transition between the end of the current playback and the
    beginning of the next.'
  prefs: []
  type: TYPE_NORMAL
- en: Playing Drums and Other Sounds
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*BeatsDemo.sb2*'
  prefs: []
  type: TYPE_NORMAL
- en: If you’re developing games, you’ll probably want to play a short sound effect
    when the player hits a target, finishes a level, and so on. It’s easy to create
    these sounds with the **play drum for beats** command, which plays your choice
    of 18 drum sounds for a certain number of beats. You can also add pauses with
    the **rest for beats** command. The *BeatsDemo.sb2* application, shown in [Figure 3-8](ch03.html#illustration_of_beats_in_scratch
    "Figure 3-8. An illustration of beats in Scratch"), demonstrates the effect of
    the beats parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '![An illustration of beats in Scratch](httpatomoreillycomsourcenostarchimages2134443.png.jpg)Figure 3-8. An
    illustration of beats in Scratch'
  prefs: []
  type: TYPE_NORMAL
- en: The script contains three **repeat** blocks with repeat counts of two, four,
    and eight, respectively. Each **repeat** block plays the same drum sound using
    a different number of beats. If you think of the time axis as being divided into
    intervals of 0.2 units, the first loop will play two drum sounds that are 0.8
    units of time apart. The second loop will play four drum sounds that are 0.4 units
    apart, and the third loop plays eight drum sounds that are 0.2 units apart. Each
    loop takes the same amount of time to complete; we’re just hitting the drum a
    different number of times in the same time interval.
  prefs: []
  type: TYPE_NORMAL
- en: I said “units of time” instead of seconds because the actual time to finish
    each loop depends on the *tempo*, which you can set with the **set tempo to**
    command. Using the default tempo of 60 beats per minute (bpm), each loop in the
    above example will take 1.6 seconds to complete. If you set the tempo to 120 bpm,
    each loop will take 0.8 seconds to complete, while at 30 bpm, each takes 3.2 seconds,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Composing Music
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*FrereJacques.sb2*'
  prefs: []
  type: TYPE_NORMAL
- en: Scratch also contains two commands that allow you to play musical notes and
    compose your own music. The **play note for beats** command plays the note you
    choose, from 0 to 127, for a number of beats you specify. The **set instrument
    to** block tells Scratch which instrument the note should sound like. Let’s use
    these commands to create a complete song. The script shown in [Figure 3-9](ch03.html#script_that_plays_quotation_markfregrave
    "Figure 3-9. A script that plays “Frère Jacques”") plays the French children’s
    song “Frère Jacques.”
  prefs: []
  type: TYPE_NORMAL
- en: '![A script that plays “Frère Jacques”](httpatomoreillycomsourcenostarchimages2134445.png.jpg)Figure 3-9. A
    script that plays “Frère Jacques”'
  prefs: []
  type: TYPE_NORMAL
- en: Open this application, named *FrereJacques.sb2*, and experiment with different
    values for the **set instrument to** command to change the instrument that plays
    this song.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling Sound Volume
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s say that you want to make a sound fade in response to some event in your
    application. If you are launching a rocket into space, for example, you might
    want the rocket to sound loud when it takes off and become quieter as it moves
    farther away.
  prefs: []
  type: TYPE_NORMAL
- en: Scratch contains a set of commands to control the volume, or loudness, of audio
    files, drum sounds, and musical notes. The **set volume to %** command sets a
    sprite’s loudness to a percentage of the speaker’s volume. However, it affects
    only the sprite that uses it (or the Stage), so if you want sounds to play at
    the same time with different volumes, you’ll have to use multiple sprites. The
    **change volume by** block reduces or increases the volume by the number you enter.
    Negative numbers make sounds softer, while positive numbers make them louder.
    You can even show a sprite’s volume on the Stage by checking the box next to the
    **volume** block. These blocks are handy if you want to change the volume based
    on how close a sprite is to a target (as in a treasure-hunt game) or make parts
    of a song louder than others. You can also use these blocks to simulate an orchestra
    by playing different instruments (with different loudness levels) simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: Try It Out 3-5
  prefs: []
  type: TYPE_NORMAL
- en: '*VolumeDemo.sb2*'
  prefs: []
  type: TYPE_NORMAL
- en: The file *VolumeDemo.sb2* simulates a cat walking into a forest. The application
    uses the **change volume by** command to make the cat’s sound fade away as it
    goes deeper into the woods. Come up with some ideas to make this simulation more
    real and try to implement them.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the Tempo
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The last three blocks in the *Sound* palette are related to the tempo, or speed,
    at which drums and notes are played. Tempo is measured in beats per minute (bpm).
    The higher the tempo, the faster the notes and drums will play.
  prefs: []
  type: TYPE_NORMAL
- en: Scratch lets you choose a specific tempo with the **set tempo to bpm** command.
    You can also tell a sprite to speed up or slow down the tempo by a certain amount
    with the **change tempo by** command. If you want to see a sprite’s tempo on the
    Stage, check the box next to the **tempo** block.
  prefs: []
  type: TYPE_NORMAL
- en: Try It Out 3-6
  prefs: []
  type: TYPE_NORMAL
- en: '*TempoDemo.sb2*'
  prefs: []
  type: TYPE_NORMAL
- en: Open the file *TempoDemo.sb2* and run it to see the **set tempo to bpm** and
    **change tempo by** commands in action.
  prefs: []
  type: TYPE_NORMAL
- en: Scratch Projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The commands in the *Looks* and *Sound* palettes will help you add lots of nifty
    effects to your applications. In this section, we’ll put everything we’ve learned
    so far in this chapter together to create animated scenes of a person dancing
    and some fireworks. This should help you review some of the new command blocks
    and give you more practice with creating a complete Scratch project.
  prefs: []
  type: TYPE_NORMAL
- en: Dancing on Stage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*DanceOnStage.sb2*'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you’ll animate a `Dancer` sprite on the Stage. This application
    is illustrated in [Figure 3-10](ch03.html#dance_party_application_in_action "Figure 3-10. The
    Dance Party application in action."), and the complete script is saved as *DanceOnStage.sb2*.
    We’ll build the whole scene right here—follow along to see how it works!
  prefs: []
  type: TYPE_NORMAL
- en: '![The Dance Party application in action.](httpatomoreillycomsourcenostarchimages2134447.png.jpg)Figure 3-10. The
    Dance Party application in action.'
  prefs: []
  type: TYPE_NORMAL
- en: First, start a new project. If Scratch is not already running, all you have
    to do is start it—this will automatically create a new project for you. Otherwise,
    select **New** from the **File** menu. In both cases, you’ll have a new project
    that contains the default `Cat` sprite.
  prefs: []
  type: TYPE_NORMAL
- en: The backdrop that you’ll use in this application is the `party room` from the
    *Indoors* category. Import this backdrop and delete the default white backdrop,
    which you won’t need. The Stage should now look like [Figure 3-11](ch03.html#weapostrophell_turn_some_sections_of_the
    "Figure 3-11. We’ll turn some sections of the party-room backdrop into sprites
    later.").
  prefs: []
  type: TYPE_NORMAL
- en: '![We’ll turn some sections of the party-room backdrop into sprites later.](httpatomoreillycomsourcenostarchimages2134449.png.jpg)Figure 3-11. We’ll
    turn some sections of the party-room backdrop into sprites later.'
  prefs: []
  type: TYPE_NORMAL
- en: Examine [Figure 3-10](ch03.html#dance_party_application_in_action "Figure 3-10. The
    Dance Party application in action.") and [Figure 3-11](ch03.html#weapostrophell_turn_some_sections_of_the
    "Figure 3-11. We’ll turn some sections of the party-room backdrop into sprites
    later.") carefully and notice how the `Ball` and `Board` sprites look like parts
    of the backdrop. As you’ll see in a moment, these two sprites were actually created
    from that image and placed on the Stage to cover the sections they came from.
    Creating the two sprites this way lets us change their color and make the Stage
    more realistic.
  prefs: []
  type: TYPE_NORMAL
- en: Now we need some background music. Let’s use the *medieval1* file from the *Music
    Loops* category. Import this file to the Stage and then delete the default “pop”
    sound. Next, add the script in [Figure 3-12](ch03.html#stage_plays_our_background_music
    "Figure 3-12. The Stage plays our background music.") to the Stage. It uses the
    **play sound** command along with a wait time that lets the audio file restart
    smoothly. The wait time of 9.5 seconds was selected by experimentation.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Stage plays our background music.](httpatomoreillycomsourcenostarchimages2134451.png.jpg)Figure 3-12. The
    Stage plays our background music.'
  prefs: []
  type: TYPE_NORMAL
- en: Click the green flag to test what you’ve created so far. You should hear an
    audio clip repeating continuously. Stop the script when you’re ready, and we’ll
    add our dancer.
  prefs: []
  type: TYPE_NORMAL
- en: Replace the costumes of the `Cat` sprite with those of the `Dancer`. Import
    the `dan-a` and `dan-b` costumes from the *People* category, delete the two `Cat`
    costumes, and change the `Cat` sprite’s name to `Dancer`. The script for the `Dancer`
    is shown in [Figure 3-13](ch03.html#this_script_tells_the_dancer_sprite_how "Figure 3-13. This
    script tells the Dancer sprite how to boogie.").
  prefs: []
  type: TYPE_NORMAL
- en: '![This script tells the Dancer sprite how to boogie.](httpatomoreillycomsourcenostarchimages2134453.png.jpg)Figure 3-13. This
    script tells the *`Dancer`* sprite how to boogie.'
  prefs: []
  type: TYPE_NORMAL
- en: The `Dancer` moves 20 steps to the right, changes its costume, moves 20 steps
    to the left, and changes its costume again. These steps are repeated forever to
    make him look like he’s really dancing. The script also changes the fisheye effect
    slightly with every step for some variety. Click the green flag to test this new
    addition to the program. You should hear the background music and see the `Dancer`
    moving left and right on the Stage.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have a dancer for your party, let’s add some colorful lights with
    the `Ball`, `Board`, and `SpotLight` sprites. To create the `Ball` sprite, click
    the thumbnail of the Stage to select it and then select the **Backdrops** tab.
    Right-click the thumbnail of the `party room` backdrop and select **save to local
    file** from the pop-up menu. This brings up a dialog that allows you to save the
    backdrop image locally. Remember where you saved this image because you’ll import
    it back in a moment.
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Upload sprite from file** button (above the Sprite List) and select
    the image you just saved. This creates a new sprite whose costume is the same
    as the backdrop image. Name this sprite `Ball` and edit its costume in the Paint
    Editor to remove everything but the colorful ball depicted in [Figure 3-14](ch03.html#costume_for_the_ball_sprite_as_it_appear
    "Figure 3-14. The costume for the Ball sprite as it appears in the Paint Editor
    and its script") (left). Be sure to paint the space around the ball with transparent
    color. Next, place the `Ball` sprite on the Stage exactly over the spot in the
    backdrop where you took it from so that it looks like part of the image (see [Figure 3-11](ch03.html#weapostrophell_turn_some_sections_of_the
    "Figure 3-11. We’ll turn some sections of the party-room backdrop into sprites
    later.")).
  prefs: []
  type: TYPE_NORMAL
- en: '![The costume for the Ball sprite as it appears in the Paint Editor and its
    script](httpatomoreillycomsourcenostarchimages2134455.png.jpg)Figure 3-14. The
    costume for the *`Ball`* sprite as it appears in the Paint Editor and its script'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3-14](ch03.html#costume_for_the_ball_sprite_as_it_appear "Figure 3-14. The
    costume for the Ball sprite as it appears in the Paint Editor and its script")
    also shows the script you should add to the `Ball` sprite. It changes the sprite’s
    color effect continuously to give the illusion that the small circles are actually
    changing color.'
  prefs: []
  type: TYPE_NORMAL
- en: Create the `Board` sprite the same way you created the `Ball` sprite. [Figure 3-15](ch03.html#board_sprite_and_its_script
    "Figure 3-15. The Board sprite and its script") shows how this sprite should appear
    in the Paint Editor (left) and the script you’ll need to animate it (right). I’ve
    added some colors to the costume (compare to [Figure 3-11](ch03.html#weapostrophell_turn_some_sections_of_the
    "Figure 3-11. We’ll turn some sections of the party-room backdrop into sprites
    later.")) to make the **change color effect** command effective.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Board sprite and its script](httpatomoreillycomsourcenostarchimages2134457.png.jpg)Figure 3-15. The
    *`Board`* sprite and its script'
  prefs: []
  type: TYPE_NORMAL
- en: Because the `Board` sprite overlaps with the `Dancer`, the script sends the
    `Board` two layers to the back so the `Dancer` will always be in the front. You
    can do the same thing by selecting the `Dancer` sprite and clicking the **go to
    front** block from the *Looks* palette.
  prefs: []
  type: TYPE_NORMAL
- en: The last sprite in this application is the `SpotLight` sprite. [Figure 3-16](ch03.html#spotlight_sprite_and_its_script
    "Figure 3-16. The SpotLight sprite and its script") shows how this sprite appears
    in the Paint Editor, as well as the script you need to create. The center of the
    image is at the tip of the cone shape, which represents a light beam.
  prefs: []
  type: TYPE_NORMAL
- en: '![The SpotLight sprite and its script](httpatomoreillycomsourcenostarchimages2134459.png.jpg)Figure 3-16. The
    *`SpotLight`* sprite and its script'
  prefs: []
  type: TYPE_NORMAL
- en: The script first sets the sprite’s ghost effect to 30 to make it transparent
    so that it won’t obscure the backdrop. The script then sends this sprite one layer
    back, which places the light beam behind the dancer. The sprite is then positioned
    so that the light beam appears to be emanating from the spotlight (see [Figure 3-10](ch03.html#dance_party_application_in_action
    "Figure 3-10. The Dance Party application in action.")). You’ll have to choose
    the *x*- and *y*-coordinates based on your drawing. After that, the script commands
    the light beam to follow the dancer (using the **point towards** command) and
    change its color forever.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’re done adding the spotlight, the application should be complete. Click
    the green flag to watch your dance party in action! In addition to the music and
    the dancing, you should also see the `Ball`, `Board`, and `SpotLight` sprites
    changing color as though real disco lights are in action.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll look at a different application that highlights many
    of the graphic effects we studied in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Fireworks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Fireworks_NoCode.sb2*'
  prefs: []
  type: TYPE_NORMAL
- en: Another application that lends itself naturally to the graphics blocks and other
    concepts discussed in this chapter is an animated fireworks scene. In this section,
    you’ll make a simple firework animation that floods the sky with colorful sparks.
    The firework rockets will explode at random times, producing sparks that fall
    as though acted upon by gravity and fade slowly with time, as illustrated in [Figure 3-17](ch03.html#fireworks_animation_in_action
    "Figure 3-17. The fireworks animation in action").
  prefs: []
  type: TYPE_NORMAL
- en: '![The fireworks animation in action](httpatomoreillycomsourcenostarchimages2134461.png.jpg)Figure 3-17. The
    fireworks animation in action'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by opening the file *Fireworks_NoCode.sb2*, which contains the initial
    setup of the application without any scripts. As shown in [Figure 3-17](ch03.html#fireworks_animation_in_action
    "Figure 3-17. The fireworks animation in action"), the application contains two
    sprites: the `City` sprite and the `Rocket` sprite. The `City` sprite shows an
    image of tall buildings that you can animate in any way you like. The `Rocket`
    sprite will continuously create clones that explode in the dark sky, producing
    the fireworks.'
  prefs: []
  type: TYPE_NORMAL
- en: The `Rocket` sprite has the eight costumes shown in [Figure 3-18](ch03.html#eight_costumes_of_the_rocket_sprite
    "Figure 3-18. The eight costumes of the Rocket sprite."). The first costume, `C1`,
    is just a small dot that we’ll launch into the sky. When this dot reaches its
    destination, which is selected at random, it will switch to one of the other costumes
    (also at random) to simulate the initial explosion. We’ll then use an appropriate
    graphic effect to make this explosion look more realistic.
  prefs: []
  type: TYPE_NORMAL
- en: '![The eight costumes of the Rocket sprite.](httpatomoreillycomsourcenostarchimages2134463.png.jpg)Figure 3-18. The
    eight costumes of the *`Rocket`* sprite.'
  prefs: []
  type: TYPE_NORMAL
- en: With this plan in mind, add the script shown in [Figure 3-19](ch03.html#first_script_of_the_rocket_sprite
    "Figure 3-19. The first script of the Rocket sprite") to the `Rocket` sprite.
    The script runs when the user clicks the green flag. After hiding the `Rocket`
    sprite, it starts a **forever** loop to create clones of itself at random times.
    Since the clones inherit the visibility state of the `Rocket` sprite, all created
    clones will be hidden at first.
  prefs: []
  type: TYPE_NORMAL
- en: '![The first script of the Rocket sprite](httpatomoreillycomsourcenostarchimages2134465.png.jpg)Figure 3-19. The
    first script of the *`Rocket`* sprite'
  prefs: []
  type: TYPE_NORMAL
- en: We now need to tell the cloned rockets what to do. This script is shown in [Figure 3-20](ch03.html#start-up_script_of_the_cloned_sprites
    "Figure 3-20. The start-up script of the cloned sprites").
  prefs: []
  type: TYPE_NORMAL
- en: '![The start-up script of the cloned sprites](httpatomoreillycomsourcenostarchimages2134467.png.jpg)Figure 3-20. The
    start-up script of the cloned sprites'
  prefs: []
  type: TYPE_NORMAL
- en: The cloned rocket starts by putting on its first costume ① (the small red dot).
    It then moves to a random horizontal position at the bottom of the Stage ②, shows
    itself ③, and glides to a random position ④ in the upper part of the Stage (somewhere
    above the buildings). This part of the script simulates the launch of the rocket,
    and if you run it, you will see a red dot moving from the ground to the sky. When
    the dot reaches its final point in the sky, it explodes due to instructions in
    the second part of the script. First, the clone plays a short drum sound ⑤ (to
    simulate the sound of an explosion). Fireworks explosions start small and expand,
    so the clone sets its initial size to 20%and picks one of its other costumes randomly
    ⑥. It then starts a **repeat** loop ⑦ to grow the firework. Every pass through
    the loop, the clone increases its size by 4\. At the end of the loop, the clone
    deletes itself ⑧.
  prefs: []
  type: TYPE_NORMAL
- en: That wraps up this fireworks festival! You should now be able to run the animation
    and show off the scene you created. With just a couple of scripts, we made a relatively
    complex animation.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we introduced many new programming blocks that can be used
    to add some pizzazz to our applications. With these blocks, we can add color,
    animation, graphic effects, music, and more.
  prefs: []
  type: TYPE_NORMAL
- en: We explained the blocks in the *Looks* palette and gave several examples of
    how to use them. You animated sprites by switching costumes, learned about drawing
    layers, and saw how layers affect the appearance of overlapping sprites.
  prefs: []
  type: TYPE_NORMAL
- en: We then covered the commands in the *Sound* palette and explained how to play
    audio files, drum sounds, and musical notes. You created a complete dance scene
    with commands from both the *Looks* and the *Sound* palettes, and you finished
    with a bang by making a fireworks animation application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll learn how to coordinate the work among different
    sprites using message broadcasting and receiving. You’ll also learn how to break
    up a large program into smaller and more manageable pieces, called procedures.
    This concept is the key to writing more complex applications.
  prefs: []
  type: TYPE_NORMAL
- en: Problems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| **Q:** | 1\. Open the application *Zebra.sb2*, shown below. The application
    contains a single sprite (the `Zebra`), which has three costumes. Write a script
    that makes the `Zebra` move across the Stage and switch among its costumes to
    create the illusion of running.*Zebra.sb2*![image with no caption](httpatomoreillycomsourcenostarchimages2134469.png.jpg)
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Q:** | 2\. Open the application *Wolf.sb2*, shown below. When you click
    the green flag, the `Wolf` will play the `WolfHowl` sound, which takes about 4
    seconds. Create a script that changes the `Wolf`’s costumes in sync with the sound.
    (Hint: Insert a **wait** block with an appropriate time delay after each costume
    switch.)*Wolf.sb2*![image with no caption](httpatomoreillycomsourcenostarchimages2134471.png.jpg)
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Q:** | 3\. Open the application *ChangingHat.sb2*, shown below. The hat
    in this application is a sprite that has five costumes. Create a script to switch
    the `Hat`’s costume when it is clicked. Then create a game in which the player
    dresses characters by clicking on different pieces of clothing.*ChangingHat.sb2*![image
    with no caption](httpatomoreillycomsourcenostarchimages2134473.png.jpg) |'
  prefs: []
  type: TYPE_TB
- en: '| **Q:** | 4\. Open *Aquarium.sb2*. The application contains six sprites, as
    illustrated below. Try out different graphic effects to animate the aquarium.
    Here are some suggestions:*Aquarium.sb2*'
  prefs: []
  type: TYPE_NORMAL
- en: Use the whirl effect on the Stage. Start with a large number like 1,000 to give
    the figure a wavy appearance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the costumes for the `Bubble1` and `Bubble2` sprites at an appropriate
    rate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the `Fish` across the Stage while changing its costume.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply the ghost effect to the `Tree` sprite.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the color effect on the `Coral` and `Bubble3` sprites.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2134475.png.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Q:** | 5\. Open the application *Words.sb2* (shown on the next page) and
    animate the words using size and rotation. Create the two scripts shown in the
    figure and run the application to see the result.*Words.sb2*![image with no caption](httpatomoreillycomsourcenostarchimages2134477.png.jpg)
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Q:** | 6\. Open the application *Joke.sb2*, shown below. Finish the scripts
    for the `Boy` and the `Girl` sprites to tell any joke you want.*Joke.sb2*![image
    with no caption](httpatomoreillycomsourcenostarchimages2134479.png.jpg) |'
  prefs: []
  type: TYPE_TB
- en: '| **Q:** | 7\. Open *Nature.sb2*. The application contains three sprites, as
    illustrated below. Animate the scene using both motion and sound. Here are some
    suggestions:*Nature.sb2*'
  prefs: []
  type: TYPE_NORMAL
- en: The `Bird` sprite has two costumes that create a flying effect. Create a script
    to fly the `Bird` across the Stage and play the `Bird` sound at random times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Duck` sprite has 12 costumes that show the `Duck` plucking a fish out of
    the water and eating it. Create a script to move the `Duck` across the Stage and
    play the `Duck` sound at random times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Seal` sprite has four costumes that show the `Seal` playing with the ball.
    Create a script to have the `Seal` play around and make the `SeaLion` sound at
    random times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2134481.png.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '|'
  prefs: []
  type: TYPE_NORMAL
