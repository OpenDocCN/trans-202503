- en: '7'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '7'
- en: EXPLORING MODULES
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 探索模块
- en: '![Images](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/common.jpg)'
- en: In the preceding chapter, you learned about functions. Functions break a script
    into manageable units, giving you more efficient, more readable code. But there’s
    no reason a good function should exist in only a script or single session. In
    this chapter, you’ll learn about *modules*, groups of similar functions that are
    packaged together and distributed for others to use across many scripts.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章节中，你学习了函数。函数将脚本拆分成可管理的单元，使你的代码更加高效、可读。但没有理由认为一个好的函数只能存在于某个脚本或单一会话中。在本章中，你将学习关于*模块*的内容，它是将一组相似的函数打包在一起，并分发供其他人在多个脚本中使用。
- en: In its purest form, a PowerShell module is just a text file with a *.psm1* file
    extension and some optional, extra metadata. Other types of modules that don’t
    fit this description are known as *binary modules* and *dynamic modules*, but
    they are outside the scope of this book.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 从最基本的形式来看，PowerShell模块就是一个*.psm1*文件扩展名的文本文件，并包含一些可选的附加元数据。其他类型的模块，如不符合这个描述的模块，被称为*二进制模块*和*动态模块*，但它们超出了本书的讨论范围。
- en: Any command that hasn’t been explicitly placed in your session almost certainly
    comes from a module. Many of the commands you’ve been using throughout this book
    are part of Microsoft’s internal modules that come with PowerShell, but there
    are also third-party modules and the ones you create yourself. To use a module,
    you first have to install it. Then, when a command inside a module needs to be
    used, that module has to be imported into your session; as of PowerShell v3, PowerShell
    auto-imports modules when a command is referenced.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 任何没有显式放入你会话中的命令，几乎可以肯定都来自一个模块。在本书中，你使用的许多命令都属于微软内置的PowerShell模块，但也有第三方模块以及你自己创建的模块。要使用模块，你首先需要安装它。然后，当需要使用模块中的命令时，必须将该模块导入到你的会话中；从PowerShell
    v3开始，PowerShell会在引用命令时自动导入模块。
- en: You’ll begin this chapter by looking at the models that are already installed
    in your system. Then, you’ll take apart a model to see its different parts before
    finally looking at how to download and install PowerShell modules from the PowerShell
    Gallery.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的开始，你将查看已经安装在你系统中的模块。然后，你将拆解一个模块，了解其不同部分，最后你将学习如何从PowerShell Gallery下载并安装PowerShell模块。
- en: Exploring Default Modules
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探索默认模块
- en: PowerShell comes with numerous modules installed by default. In this section,
    you’ll see how to discover and import modules from your session.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell默认安装了许多模块。在本节中，你将看到如何从会话中发现并导入模块。
- en: Finding Modules in Your Session
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在会话中查找模块
- en: You can see the modules imported into your current session by using the `Get-Module`
    cmdlet (which is itself part of a module). The `Get-Module` cmdlet is a command
    that allows you to see all the modules on your system available to you in your
    current session.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用`Get-Module` cmdlet（它本身也是一个模块的一部分）来查看导入到当前会话中的模块。`Get-Module` cmdlet是一个命令，允许你查看系统上所有可在当前会话中使用的模块。
- en: Start a fresh PowerShell session and run `Get-Module`, as in [Listing 7-1](ch07.xhtml#ch7list1).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 启动一个全新的PowerShell会话并运行`Get-Module`，如[示例7-1](ch07.xhtml#ch7list1)所示。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 7-1: Viewing imported modules with the `Get-Module` command*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例7-1：使用`Get-Module`命令查看导入的模块*'
- en: Each line you see from this `Get-Module` output is a module that has been imported
    into the current session, which means all the commands inside that module are
    immediately available to you. The `Microsoft.PowerShell.Management` and `Microsoft.PowerShell.Utility`
    modules are imported in any PowerShell session by default.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你在`Get-Module`输出中看到的每一行都是已经导入到当前会话中的模块，这意味着该模块中的所有命令都可以立即使用。`Microsoft.PowerShell.Management`和`Microsoft.PowerShell.Utility`模块是PowerShell会话中默认导入的模块。
- en: Notice the `ExportedCommands` column in [Listing 7-1](ch07.xhtml#ch7list1).
    These are the commands you can use from the module. You can easily find all of
    these commands by using `Get-Command` and specifying the module name. Let’s check
    out all the exported commands inside the `Microsoft.PowerShell.Management` module
    in [Listing 7-2](ch07.xhtml#ch7list2).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意[示例7-1](ch07.xhtml#ch7list1)中的`ExportedCommands`列。这些是你可以从模块中使用的命令。你可以通过使用`Get-Command`并指定模块名称，轻松找到所有这些命令。让我们看看[示例7-2](ch07.xhtml#ch7list2)中`Microsoft.PowerShell.Management`模块中的所有导出命令。
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 7-2: Viewing commands inside a PowerShell module*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例7-2：查看PowerShell模块中的命令*'
- en: These are all the commands that are exported from that module; these are the
    ones that can be explicitly called from outside the module. Some module authors
    choose to include functions inside their modules that a user cannot use. Any function
    that is not exported to a user, and only does work inside a script or module,
    is called a *private function*, or what some developers refer to as a *helper
    function*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是从该模块导出的所有命令；它们是可以从模块外部显式调用的命令。某些模块作者选择在模块中包含用户无法使用的函数。任何未导出给用户，并且仅在脚本或模块内部执行的函数，称为
    *私有函数*，或一些开发者所说的 *助手函数*。
- en: Using `Get-Module` without any parameters will return all modules that are imported,
    but what about the modules that have been installed but not imported?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不带任何参数使用 `Get-Module`，它会返回所有已导入的模块，但对于那些已安装但未导入的模块，应该怎么办呢？
- en: Finding Modules on Your Computer
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在计算机上查找模块
- en: To get a list of all modules that are installed and can be imported into your
    session, you can use `Get-Module` with the `ListAvailable` parameter, as in [Listing
    7-3](ch07.xhtml#ch7list3).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取所有已安装且可以导入到会话中的模块列表，你可以使用带有 `ListAvailable` 参数的 `Get-Module`，如 [清单 7-3](ch07.xhtml#ch7list3)
    所示。
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 7-3: Using `Get-Module` to view all available modules*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 7-3：使用 `Get-Module` 查看所有可用模块*'
- en: The `ListAvailable` parameter tells PowerShell to check a few folders for any
    subfolders with *.psm1* files in them. PowerShell will then read each of those
    modules from the filesystem and return a list of each module’s name, some metadata,
    and all the functions that can be used from that module.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`ListAvailable` 参数告诉 PowerShell 检查几个文件夹，查找其中包含 *.psm1* 文件的子文件夹。然后，PowerShell
    会从文件系统读取这些模块，并返回每个模块的名称、一些元数据，以及可以从该模块中使用的所有功能。'
- en: 'PowerShell looks for modules on disk in a few default locations, depending
    on the type of module:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 会根据模块的类型，在几个默认位置查找磁盘上的模块：
- en: '**System modules** Nearly all modules that come installed by default with PowerShell
    will be located in *C:\Windows\System32\WindowsPowerShell\1.0\Modules*. This module
    path is typically dedicated for internal PowerShell modules only. Technically,
    you could place modules in this folder, but it’s not recommended you do so.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**系统模块** 几乎所有默认安装的 PowerShell 模块都会位于 *C:\Windows\System32\WindowsPowerShell\1.0\Modules*。这个模块路径通常仅用于内部
    PowerShell 模块。严格来说，你可以将模块放在这个文件夹里，但不建议这样做。'
- en: '**All Users modules** Modules are also stored in *C:\Program Files\WindowsPowerShell\Modules*.
    This path is loosely called the *All Users* module path, and it’s where you put
    any modules you’d like available to all users who log into the computer.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**所有用户模块** 模块也存储在 *C:\Program Files\WindowsPowerShell\Modules*。这个路径通常被称为 *所有用户*
    模块路径，这是你可以放置任何希望所有登录计算机的用户都能使用的模块的地方。'
- en: '**Current User modules** Lastly, you can store modules in *C:\Users\<LoggedInUser>\Documents\WindowsPowerShell\Modules*.
    Inside this folder, you’ll find all modules that you’ve created or downloaded
    that are available to only the current user. Placing modules in this path allows
    for some separation if multiple users with different requirements will be logging
    into the computer.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**当前用户模块** 最后，你可以将模块存储在 *C:\Users\<LoggedInUser>\Documents\WindowsPowerShell\Modules*。在这个文件夹中，你会找到所有由你创建或下载的仅对当前用户可用的模块。将模块放在这个路径中，可以实现一些分离，以防多个具有不同需求的用户登录计算机。'
- en: When `Get-Module -ListAvailable` is called, PowerShell will read all these folder
    paths and return all the modules in each. However, these aren’t the only possible
    module paths, just the defaults.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用 `Get-Module -ListAvailable` 时，PowerShell 会读取所有这些文件夹路径，并返回每个路径中的所有模块。但是，这些并不是唯一可能的模块路径，只是默认路径。
- en: You can tell PowerShell to add a new module path by using the `$PSModulePath`
    environment variable, which defines each module folder separated by a semicolon,
    as shown in [Listing 7-4](ch07.xhtml#ch7list4).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用 `$PSModulePath` 环境变量来告诉 PowerShell 添加一个新的模块路径，该变量定义了每个模块文件夹，并用分号分隔，如
    [清单 7-4](ch07.xhtml#ch7list4) 所示。
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 7-4: The `PSModulePath` environment variable*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 7-4：`PSModulePath` 环境变量*'
- en: 'You can add folders to the `PSModulePath` environment variable by doing a little
    string parsing, although this technique may be a little advanced. Here’s a quick
    one-liner:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过对字符串进行解析，向 `PSModulePath` 环境变量添加文件夹，尽管这种技术可能有点高级。下面是一个简短的命令：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'However, be aware that this adds the new folder in only the current session.
    To make this change persistent, you need to use the `SetEnvironmentVariable()`
    method on the `Environment` .NET class, like so:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，要注意，这种更改只会在当前会话中生效。为了使更改持久化，你需要在`Environment` .NET 类上使用`SetEnvironmentVariable()`方法，如下所示：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Let’s now see how to use the modules you have by importing them.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何通过导入模块来使用你已有的模块。
- en: Importing Modules
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 导入模块
- en: Once a module folder path is in the `PSModulePath` environment variable, you
    have to import the module into the current session. Nowadays, because of PowerShell’s
    auto-importing feature, if you have a module installed, you can usually call the
    function you want first, and PowerShell will auto-import the module it belongs
    to. Still, it’s important to understand how importing works.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模块文件夹路径被添加到`PSModulePath`环境变量中，你就必须将模块导入到当前会话中。如今，由于 PowerShell 的自动导入功能，如果你安装了一个模块，通常可以先调用你想要的函数，PowerShell
    会自动导入该函数所属的模块。不过，理解导入机制仍然很重要。
- en: 'Let’s use a default PowerShell module called `Microsoft.PowerShell.Management`.
    In [Listing 7-5](ch07.xhtml#ch7list5), you’ll run `Get-Module` twice: once in
    a fresh PowerShell session, and once after using the `cd` command, an alias for
    `Set-Location`, a command found in the `Microsoft.PowerShell.Management` module.
    Look what happens:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用一个默认的 PowerShell 模块，叫做`Microsoft.PowerShell.Management`。在[清单7-5](ch07.xhtml#ch7list5)中，你将运行`Get-Module`两次：第一次是在一个新的
    PowerShell 会话中，第二次是在使用`cd`命令之后，`cd`是`Set-Location`的别名，它是`Microsoft.PowerShell.Management`模块中的一个命令。看看会发生什么：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 7-5: PowerShell auto-imports `Microsoft.PowerShell.Management` after
    using `cd`.*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单7-5：使用`cd`后 PowerShell 自动导入`Microsoft.PowerShell.Management`*'
- en: As you can see, `Microsoft.PowerShell.Management` is auto-imported after you
    use `cd`. The auto-import feature usually works. But if you’re expecting a command
    inside a module to be available and it’s not, a problem with the module might
    be preventing the command’s import.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`Microsoft.PowerShell.Management`会在你使用`cd`后自动导入。自动导入功能通常是有效的。但如果你期望一个模块中的命令可用，而它却不可用，可能是模块本身的问题导致命令未能导入。
- en: To manually import a module, use the `Import-Module` command, as in [Listing
    7-6](ch07.xhtml#ch7list6).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要手动导入一个模块，使用`Import-Module`命令，如[清单7-6](ch07.xhtml#ch7list6)所示。
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 7-6: Importing a module manually, reimporting it, and removing it*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单7-6：手动导入模块、重新导入模块和移除模块*'
- en: You’ll notice this listing also uses the `Force` parameter and the `Remove``-Module`
    command. If the module has been changed (say you’ve made changes to a custom module),
    you can use the `Import-Module` command with the `Force` parameter to unload and
    reimport the module. The `Remove-Module` unloads a module from a session, although
    this command is not used often.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到这个清单还使用了`Force`参数和`Remove-Module`命令。如果模块已经发生了变化（比如你修改了一个自定义模块），你可以使用带有`Force`参数的`Import-Module`命令来卸载并重新导入该模块。`Remove-Module`会将一个模块从会话中卸载，尽管这个命令并不常用。
- en: The Components of a PowerShell Module
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PowerShell 模块的组成部分
- en: Now that you’ve learned how to use a PowerShell module, let’s see what they
    look like.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学会了如何使用 PowerShell 模块，让我们看看它们的具体样子。
- en: The .psm1 File
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: .psm1 文件
- en: Any text file with a .*psm1* file extension can be a PowerShell module. For
    this file to be useful, it must have functions inside it. While not strictly required,
    all functions inside a module should be built around the same concept. For example,
    [Listing 7-7](ch07.xhtml#ch7list7) shows some functions dealing with software
    installation.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 任何带有.*psm1*文件扩展名的文本文件都可以是 PowerShell 模块。为了让这个文件有用，它必须包含函数。虽然不是严格要求，所有模块中的函数最好围绕相同的概念来构建。例如，[清单7-7](ch07.xhtml#ch7list7)展示了一些与软件安装相关的函数。
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Listing 7-7: Functions dealing with software installation*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单7-7：处理软件安装的函数*'
- en: Notice that the noun in each command’s name stays the same, and only the verb
    changes. This is best practice when building modules. If you find yourself needing
    to change the noun, then you should start thinking about breaking one module into
    multiple modules.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每个命令名称中的名词保持不变，只有动词发生变化。这是构建模块时的最佳实践。如果你发现自己需要更改名词，那么你应该考虑将一个模块拆分为多个模块。
- en: The Module Manifest
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 模块清单
- en: Besides a *.psm1* file full of functions, you’ll also have a module manifest,
    or a *.psd1* file. A *module manifest* is an optional but recommended text file
    written in the form of a PowerShell hashtable. This hashtable contains elements
    that describe metadata about the module.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 除了包含函数的 *.psm1* 文件外，你还会有一个模块清单，或者一个 *.psd1* 文件。*模块清单* 是一个可选但推荐的文本文件，以 PowerShell
    哈希表的形式编写。这个哈希表包含描述模块元数据的元素。
- en: It’s possible to create a module manifest from scratch, but PowerShell has a
    `New-ModuleManifest` command that can generate a template for you. Let’s use `New-ModuleManifest`
    to build a module manifest for our software package, as in [Listing 7-8](ch07.xhtml#ch7list8).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以从头开始创建一个模块清单，但 PowerShell 提供了一个 `New-ModuleManifest` 命令，可以为你生成一个模板。让我们使用
    `New-ModuleManifest` 为我们的软件包构建一个模块清单，如 [清单 7-8](ch07.xhtml#ch7list8) 所示。
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 7-8: Using the `New-ModuleManifest` to build a module manifest*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 7-8：使用 `New-ModuleManifest` 来构建模块清单*'
- en: 'This command creates a *.psd1* file that looks like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令会创建一个 *.psd1* 文件，内容如下：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see when running the command, there are plenty of fields for which
    I didn’t provide parameters. We’re not going to go in depth on module manifests.
    For now, just know that, at a minimum, always define the `RootModule`, `Author`,
    `Description`, and perhaps the `version`. All of these attributes are optional,
    but it’s always good practice to get in the habit of adding as much information
    to the module manifest as possible.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在运行命令时看到的，我没有为许多字段提供参数。我们不会深入讨论模块清单。现在，只需要知道，至少要定义 `RootModule`、`Author`、`Description`，以及可能的
    `version`。所有这些属性都是可选的，但最好养成尽可能多地向模块清单添加信息的习惯。
- en: Now that you’ve seen the anatomy of a module, let’s see how to download and
    install one.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了模块的结构，接下来我们来看一下如何下载并安装一个模块。
- en: Working with Custom Modules
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用自定义模块
- en: Thus far, you’ve been working with only the modules installed in PowerShell
    by default. In this section, you’ll see how to find, install, and uninstall custom
    modules.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你一直在使用 PowerShell 默认安装的模块。在本节中，你将学习如何查找、安装和卸载自定义模块。
- en: Finding Modules
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 查找模块
- en: 'One of the best parts of modules is sharing them: why waste your time solving
    a problem that’s already been solved? Chances are, if you’re running into a problem,
    the PowerShell Gallery has a solution. The *PowerShell Gallery* (*[https://www.powershellgallery.com/](https://www.powershellgallery.com/)*)
    is a repository of thousands of PowerShell modules and scripts that anyone with
    an account can freely upload to or download from. It has modules written by single
    individuals, and modules written by gigantic corporations like Microsoft.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 模块的最佳部分之一就是共享它们：为什么要浪费时间解决已经解决的问题呢？如果你遇到问题，PowerShell Gallery 里很可能已有解决方案。[PowerShell
    Gallery](https://www.powershellgallery.com/) 是一个包含成千上万个 PowerShell 模块和脚本的存储库，任何有账户的人都可以自由上传或下载。这里有由个人编写的模块，也有由像
    Microsoft 这样的大公司编写的模块。
- en: Lucky for us, you can also use the Gallery from PowerShell itself. PowerShell
    has a built-in module called `PowerShellGet` that provides simple-to-use commands
    to interact with the PowerShell Gallery. [Listing 7-9](ch07.xhtml#ch7list9) uses
    `Get-Command` to pull up the `PowerShellGet` commands.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，你也可以直接使用 PowerShell 中的 Gallery。PowerShell 有一个内置模块叫做 `PowerShellGet`，提供了简单易用的命令与
    PowerShell Gallery 交互。[清单 7-9](ch07.xhtml#ch7list9) 使用 `Get-Command` 来列出 `PowerShellGet`
    命令。
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 7-9: The `PowerShellGet` commands*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 7-9：`PowerShellGet` 命令*'
- en: The `PowerShellGet` module includes commands for finding, saving, and installing
    modules, as well as publishing your own. You’re not quite ready to publish modules
    yet (you haven’t even created your own!), so we’ll focus on how to find and install
    modules from the PowerShell Gallery.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`PowerShellGet` 模块包含用于查找、保存和安装模块的命令，还包括发布你自己的模块。你现在还没有准备好发布模块（你甚至还没创建自己的模块！），所以我们将专注于如何查找和安装来自
    PowerShell Gallery 的模块。'
- en: To find a module, you use the `Find-Module` command, which allows you to search
    the PowerShell Gallery for modules matching a specific name. If you’re looking
    for modules to manage a VMware infrastructure, for example, you can use wildcards
    with the `Name` parameter to find all modules in the PowerShell Gallery that have
    the word *VMware* in them, as in [Listing 7-10](ch07.xhtml#ch7list10).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找一个模块，你可以使用 `Find-Module` 命令，它允许你在 PowerShell Gallery 中搜索与特定名称匹配的模块。例如，如果你正在寻找用于管理
    VMware 基础设施的模块，你可以使用通配符和 `Name` 参数来查找所有 PowerShell Gallery 中包含 *VMware* 字样的模块，如
    [清单 7-10](ch07.xhtml#ch7list10) 所示。
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 7-10: Using `Find-Module` to locate modules related to VMware*'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 7-10：使用 `Find-Module` 查找与 VMware 相关的模块*'
- en: The `Find-Module` command doesn’t download anything; it just shows you what’s
    in the PowerShell Gallery. In the next section, you’ll see how to install the
    modules.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`Find-Module` 命令不会下载任何内容；它只会显示 PowerShell Gallery 中的内容。在接下来的部分，你将看到如何安装模块。'
- en: Installing Modules
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装模块
- en: Once you have a module you want to install, you can use the `Install-Module`
    command to install it. The `Install-Module` command can take a `Name` parameter,
    but let’s use the pipeline and simply send the objects that `Find-Module` returns
    directly to the `Install-Module` command ([Listing 7-11](ch07.xhtml#ch7list11)).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了想要安装的模块，可以使用 `Install-Module` 命令来安装它。`Install-Module` 命令可以带有 `Name` 参数，但我们可以使用管道操作，直接将
    `Find-Module` 返回的对象传递给 `Install-Module` 命令（见[清单 7-11](ch07.xhtml#ch7list11)）。
- en: Note that you may receive a warning about an untrusted repository. You will
    receive this untrusted warning because, by default, the `Find-Module` command
    uses a PowerShell repository that is untrusted, meaning you must explicitly tell
    PowerShell to trust all packages inside that repository. Otherwise, it will prompt
    you to run `Set-PSRepository`, as shown in [Listing 7-11](ch07.xhtml#ch7list11),
    to change the installation policy for that repository.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你可能会收到关于不受信任的存储库的警告。你会收到此不受信任的警告，因为默认情况下，`Find-Module` 命令使用的是一个不受信任的 PowerShell
    存储库，这意味着你必须明确告诉 PowerShell 信任该存储库中的所有包。否则，它会提示你运行 `Set-PSRepository`，如[清单 7-11](ch07.xhtml#ch7list11)
    中所示，以更改该存储库的安装策略。
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*Listing 7-11: Installing a module by using the `Install-Module` command*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 7-11：使用 `Install-Module` 命令安装模块*'
- en: 'By default, the command in [Listing 7-11](ch07.xhtml#ch7list11) will download
    the module and place it into the All Users module path in *C:\Program Files*.
    To check that the module is in this path, you can use the following command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，[清单 7-11](ch07.xhtml#ch7list11) 中的命令将下载模块并将其放置在 *C:\Program Files* 中的所有用户模块路径下。要检查模块是否在该路径中，你可以使用以下命令：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Uninstalling Modules
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 卸载模块
- en: Newcomers to PowerShell often get confused by the difference between removing
    and uninstalling a module. As you saw in “Importing Modules” on [page 82](ch07.xhtml#page_82),
    you can use `Remove-Module` to *remove* a module from the PowerShell session.
    But this only unloads the module from the session; it doesn’t remove the module
    from your disk.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 刚接触 PowerShell 的新手常常会混淆删除和卸载模块之间的区别。如你在《导入模块》一节中看到的（见[第 82 页](ch07.xhtml#page_82)），你可以使用
    `Remove-Module` 来*移除* PowerShell 会话中的模块。但这只是将模块从会话中卸载，并不会从磁盘上删除该模块。
- en: To take a module off the disk—or *uninstall* it—you have to use the `Uninstall-Module`
    cmdlet. [Listing 7-12](ch07.xhtml#ch7list12) uninstalls the module you just installed.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要从磁盘中删除模块——或*卸载*它——你必须使用 `Uninstall-Module` cmdlet。[清单 7-12](ch07.xhtml#ch7list12)
    卸载你刚刚安装的模块。
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*Listing 7-12: Uninstalling a module*'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 7-12：卸载模块*'
- en: Only modules downloaded from the PowerShell Gallery will be uninstalled via
    `Uninstall-Module`—the default modules are there to stay!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 只有从 PowerShell Gallery 下载的模块才能通过 `Uninstall-Module` 卸载——默认模块是无法被卸载的！
- en: Creating Your Own Module
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建你自己的模块
- en: So far, you’ve been working with other people’s modules. Of course, one of the
    amazing things about PowerShell modules is you can create your own and share it
    with the rest of the world. You’ll spend [Part III](part3.xhtml#part3) of this
    book building a real-world module, but for now, let’s see how to turn your Software
    module into a real module.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你一直在使用其他人的模块。当然，PowerShell 模块的一个惊人之处在于你可以创建自己的模块并与全世界分享。你将在本书的[第三部分](part3.xhtml#part3)中构建一个真实的模块，但现在，让我们来看一下如何将你的软件模块变成一个真正的模块。
- en: As you saw earlier, a typical PowerShell module consists of a folder (the *module
    container*), *.psm1* file (the module), and a *.psd1* file (the module manifest).
    If the module folder is in one of the three locations (System, All Users, or Current
    User), PowerShell will automatically see this and import it.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如你之前所见，典型的 PowerShell 模块由一个文件夹（*模块容器*）、一个 *.psm1* 文件（模块文件）和一个 *.psd1* 文件（模块清单）组成。如果模块文件夹位于三个位置之一（系统、所有用户或当前用户），PowerShell
    将自动识别并导入它。
- en: 'Let’s first create the module folder. The module folder must be the same name
    as the module itself. Since I tend to make modules available for all users on
    a system, you’ll add it to the All Users module path, like so:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建模块文件夹。模块文件夹必须与模块本身同名。由于我通常将模块设置为系统中所有用户可用，你将把它添加到所有用户的模块路径中，像这样：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once you create the folder, make a blank *.psm1* file that will eventually
    hold your functions:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了文件夹，创建一个空白的 *.psm1* 文件，该文件最终将保存你的函数：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, create the module manifest just as you did in [Listing 7-8](ch07.xhtml#ch7list8):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，按照你在[清单 7-8](ch07.xhtml#ch7list8)中的操作，创建模块清单：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'At this point, PowerShell should be able to see your module, but notice it
    does not see any exported commands yet:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，PowerShell 应该能够看到你的模块，但注意它还没有看到任何已导出的命令：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let’s add the three functions you used earlier into the *.psm1* file and see
    if PowerShell recognizes them now:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们把你之前使用的三个函数添加到 *.psm1* 文件中，看看 PowerShell 是否能识别它们：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: PowerShell has exported all the commands inside your module and made them available
    for use. If you want to go the extra mile and choose which commands get exported,
    you can also open your module manifest and find the `FunctionsToExport` key. In
    there, you can define each command, separated by a comma, which will then dictate
    which commands get exported. Although not mandatory, it provides a more granular
    approach to exporting module functions.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 已经导出了你模块中的所有命令，并使其可供使用。如果你想更进一步，选择哪些命令被导出，你还可以打开模块清单，找到 `FunctionsToExport`
    键。在那里，你可以定义每个命令，用逗号分隔，这将决定哪些命令被导出。虽然这不是强制性的，但它提供了更细致的模块函数导出控制。
- en: Congrats! You’ve just created your first module! It won’t do much unless you
    fill the functions in with real functionality, a fun challenge for you to do on
    your own.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你刚刚创建了你的第一个模块！除非你为其中的函数填充实际功能，否则它不会做太多，当然，这也是一个值得你自己完成的有趣挑战。
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about modules, groups of like-minded code that
    prevent you from wasting time on problems that have already been solved. You saw
    the basic anatomy of a module, as well as how to install, import, remove, and
    uninstall them. You even made your own basic module!
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了模块，这是一些志同道合的代码集合，能帮助你避免在已经解决的问题上浪费时间。你看到了模块的基本结构，以及如何安装、导入、移除和卸载它们。你甚至创建了自己的基础模块！
- en: In [Chapter 8](ch08.xhtml#ch8), you’ll learn how to access remote computers
    by using PowerShell remoting.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](ch08.xhtml#ch8)中，你将学习如何通过使用 PowerShell 远程操作来访问远程计算机。
