- en: '**4**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**4**'
- en: '**HOW WEB SERVERS WORK**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Web 服务器的工作原理**'
- en: '![image](Images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common01.jpg)'
- en: In the previous chapter, you learned how browsers communicate over the internet
    and render the HTML pages and other resources that make up a website. In this
    chapter, you’ll learn about how those same HTML pages are constructed by web servers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你了解了浏览器如何通过互联网进行通信，并渲染组成网站的 HTML 页面和其他资源。在这一章中，你将学习 Web 服务器如何构建这些 HTML
    页面。
- en: By its simplest definition, a *web server* is a computer program that sends
    back HTML pages in response to HTTP requests. Modern web servers encompass a much
    broader range of functionality than this suggests, however. When a browser makes
    an HTTP request, modern web servers allow code to be executed in order to generate
    the web page HTML dynamically, and often incorporate content from a database.
    As a web developer, you’ll spend most of your time writing and testing this type
    of code.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 从最简单的定义来看，*Web 服务器* 是一个计算机程序，它在响应 HTTP 请求时返回 HTML 页面。然而，现代 Web 服务器所包含的功能远远超出了这一点。当浏览器发出
    HTTP 请求时，现代 Web 服务器允许执行代码以动态生成网页的 HTML，且通常会结合来自数据库的内容。作为 Web 开发者，你将大部分时间都花费在编写和测试这种类型的代码上。
- en: This chapter covers how developers organize code and resources within a web
    server. I’ll also pinpoint common weaknesses in web servers that allow security
    vulnerabilities to occur, and talk about how to avoid these pitfalls.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍开发者如何在 Web 服务器中组织代码和资源。我还将指出 Web 服务器中常见的弱点，这些弱点可能导致安全漏洞的发生，并讨论如何避免这些陷阱。
- en: '**Static and Dynamic Resources**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**静态资源与动态资源**'
- en: 'Web servers serve two types of content in response to HTTP requests: static
    resources and dynamic resources. A *static resource* is an HTML file, image file,
    or other type of file that the web server returns unaltered in HTTP responses.
    A *dynamic resource* is code, a script, or a template that the web server executes
    or interprets in response to an HTTP request. Modern web servers are capable of
    hosting both static and dynamic resources. Which resource the server executes
    or returns depends on the URL in the HTTP request. Your web server will resolve
    URLs according to a configuration file that maps URL patterns to particular resources.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Web 服务器在响应 HTTP 请求时提供两种类型的内容：静态资源和动态资源。*静态资源* 是 HTML 文件、图像文件或其他类型的文件，Web 服务器在
    HTTP 响应中返回这些文件时不做任何修改。*动态资源* 是代码、脚本或模板，Web 服务器会在响应 HTTP 请求时执行或解析这些内容。现代 Web 服务器能够同时托管静态资源和动态资源。服务器执行或返回哪个资源，取决于
    HTTP 请求中的 URL。你的 Web 服务器会根据一个配置文件来解析 URL，将 URL 模式映射到特定资源。
- en: Let’s look at how web servers handle static and dynamic resources.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看 Web 服务器如何处理静态资源和动态资源。
- en: '**Static Resources**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**静态资源**'
- en: In the early days of the internet, websites consisted mostly of static resources.
    Developers coded HTML files by hand, and websites consisted of individual HTML
    files that were deployed to the web server. The “deployment” of a website required
    the developer to copy all the HTML files to the web server and restart the server
    process. When a user wished to visit the website, they would type the website’s
    URL in their browser. The browser would make an HTTP request to the web server
    hosting the website, which would interpret the incoming URL as a request for a
    file on disk. Finally, the web server would return the HTML file as is in the
    HTTP response.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网的早期，网站大多由静态资源组成。开发者手动编写 HTML 文件，网站由单个 HTML 文件组成，这些文件被部署到 Web 服务器上。网站的“部署”要求开发者将所有
    HTML 文件复制到 Web 服务器并重启服务器进程。当用户想访问网站时，他们会在浏览器中输入网站的 URL。浏览器会向托管网站的 Web 服务器发出 HTTP
    请求，服务器会将传入的 URL 解析为对磁盘上某个文件的请求。最终，Web 服务器会按原样返回 HTML 文件作为 HTTP 响应。
- en: An example of this is the website for the 1996 movie *Space Jam*. It consists
    entirely of static resources, and it’s still online at *[spacejam.com](http://spacejam.com)*.
    Clicking through the site takes us back to a simpler and aesthetically less sophisticated
    time in web development. If you visit the website, you will notice that each of
    the URLs like *[https://www.spacejam.com/cmp/sitemap.html](https://www.spacejam.com/cmp/sitemap.html)*
    end with a *.html* suffix, indicating that each web page corresponds to an HTML
    file on the server.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子是 1996 年电影 *Space Jam* 的网站。它完全由静态资源组成，而且至今仍在线，网址为 *[spacejam.com](http://spacejam.com)*。浏览这个网站让我们回到了一个简单、审美上也不那么精致的网页开发时代。如果你访问该网站，你会注意到每个像
    *[https://www.spacejam.com/cmp/sitemap.html](https://www.spacejam.com/cmp/sitemap.html)*
    这样的 URL 都以 *.html* 后缀结尾，表明每个网页都对应服务器上的一个 HTML 文件。
- en: 'Tim Berners-Lee’s original vision of the web looked much like the *Space Jam*
    website: a network of static files hosted on web servers that would contain all
    the world’s information.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 提姆·伯纳斯-李（Tim Berners-Lee）最初的网络愿景看起来与*Space Jam*网站非常相似：一个由静态文件组成的网络，这些文件托管在网络服务器上，包含了全世界的信息。
- en: '***URL Resolution***'
  id: totrans-13
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***URL 解析***'
- en: Modern web servers handle static resources in much the same way as their older
    counterparts. To access a resource in a browser, you include the resource name
    in the URL, and the web server returns the resource file from disk as it’s requested.
    To display the picture shown in [Figure 4-1](ch04.xhtml#ch4fig1), the URL includes
    the resource name */images/hedgehog_in_spaghetti.png*, and the web server returns
    the appropriate file from disk.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现代网络服务器处理静态资源的方式与其旧版服务器非常相似。要在浏览器中访问一个资源，您需要在URL中包含资源名称，网络服务器将按请求从磁盘返回资源文件。为了显示[图
    4-1](ch04.xhtml#ch4fig1)中的图片，URL包含资源名称*/images/hedgehog_in_spaghetti.png*，网络服务器从磁盘返回相应的文件。
- en: '![image](Images/04fig01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/04fig01.jpg)'
- en: '*Figure 4-1: An example of a static resource*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-1：静态资源示例*'
- en: Modern web servers have a few additional tricks up their sleeves. A modern web
    server allows any URL to be mapped to a particular static resource. We would expect
    the *hedgehog_in_spaghetti.png* resource to be a file living in the */images*
    directory on the web server, but in fact, the developer can call it anything they
    choose. By unlinking the URL from the filepath, web servers give developers more
    freedom to organize their code. This might allow each user to have a different
    profile image, but use the same path, for instance.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现代网络服务器还有一些额外的技巧。现代网络服务器允许将任何URL映射到特定的静态资源。我们预期*hedgehog_in_spaghetti.png*资源应该是位于网络服务器的*/images*目录中的一个文件，但实际上，开发者可以将其命名为任何他们选择的名称。通过将URL与文件路径解绑，网络服务器为开发者提供了更多组织代码的自由。例如，这可能允许每个用户使用相同路径，但具有不同的个人资料图片。
- en: When returning a static resource, modern web servers often add data to the HTTP
    response or process the static resource before returning it. For example, web
    servers often dynamically compress large resource files by using the `gzip` algorithm
    to reduce the bandwidth used in the response, or add caching headers in HTTP responses
    to instruct the browser to cache and use a local copy of a static resource if
    a user views it again within a defined window of time. This makes the website
    more responsive for the user and reduces the load the server has to handle.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在返回静态资源时，现代网络服务器通常会在HTTP响应中添加数据，或在返回资源之前处理静态资源。例如，网络服务器通常会使用`gzip`算法动态压缩大型资源文件，以减少响应中使用的带宽，或者在HTTP响应中添加缓存头，指示浏览器在用户在定义的时间窗口内再次查看该静态资源时，缓存并使用静态资源的本地副本。这使得网站对用户更加响应迅速，并减少了服务器需要处理的负载。
- en: Because static resources are simply files of one form or another, they don’t,
    by themselves, exhibit much in the way of security vulnerabilities. The process
    of resolving a URL to a file *can* introduce vulnerabilities, however. If a user
    designates certain types of files to be private (for example, the images they
    upload), you will need to have *access control* rules defined on the web server.
    We’ll look at various ways hackers attempt to circumvent access control rules
    in [Chapter 11](ch11.xhtml#ch11).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 由于静态资源只是某种形式的文件，它们本身并不容易出现安全漏洞。然而，解析URL到文件的过程*可能*会引入漏洞。如果用户指定某些类型的文件为私密（例如，他们上传的图片），则需要在网络服务器上定义*访问控制*规则。我们将在[第11章](ch11.xhtml#ch11)中查看黑客如何尝试绕过访问控制规则。
- en: '***Content Delivery Networks***'
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***内容分发网络***'
- en: A modern innovation designed to improve the delivery speeds of static files
    is the *content delivery network (CDN)*, which will store duplicated copies of
    static resources in data centers around the world, and quickly deliver those resources
    to browsers from the nearest physical location. CDNs like Cloudflare, Akamai,
    or Amazon CloudFront offload the burden of serving large resource files, such
    as images, to a third party. As such, they allow even small companies to produce
    responsive websites without a massive server expenditure. Integrating a CDN into
    your site is usually straightforward, and the CDN service charges a monthly fee
    depending on the amount of resources you deploy.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一项旨在提高静态文件传输速度的现代创新是*内容分发网络（CDN）*，它会在全球各地的数据中心存储静态资源的重复副本，并从最近的物理位置快速将这些资源传递到浏览器。像
    Cloudflare、Akamai 或 Amazon CloudFront 这样的 CDN 将大资源文件（如图像）的传输负担交给第三方。因此，它们使得即便是小公司也能在没有庞大服务器支出的情况下，制作响应式网站。将
    CDN 集成到你的站点中通常是直接的，CDN 服务会根据你部署的资源量收取月费。
- en: Using a CDN also introduces security complications. Integrating with a CDN effectively
    allows a third party to serve content under your security certificate, so you
    need to set up your CDN integration securely. We’ll investigate how to securely
    integrate third-party services such as CDNs in [Chapter 14](ch14.xhtml#ch14).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 CDN 还会引入安全复杂性。与 CDN 集成实际上允许第三方以你的安全证书为依据提供内容，因此你需要安全地设置 CDN 集成。我们将在[第 14
    章](ch14.xhtml#ch14)中研究如何安全地集成第三方服务，如 CDN。
- en: '***Content Management Systems***'
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***内容管理系统***'
- en: Plenty of websites still consist of mostly static content. Rather than being
    coded by hand, these sites are generally built using *content management systems
    (CMSs)* that provide authoring tools requiring little to no technical knowledge
    to write the content. CMSs generally impose a uniform style on the pages and allow
    administrators to update content directly in the browser.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 许多网站仍然主要由静态内容构成。这些网站通常不是手动编写的，而是通过*内容管理系统（CMS）*构建的，这些系统提供了几乎不需要技术知识的创作工具，用于编写内容。CMS
    通常对页面强制执行统一样式，并允许管理员直接在浏览器中更新内容。
- en: CMS plug-ins can also provide analytics to track visitors, add appointment management
    or customer support functions, and even create online stores. This plug-in approach
    is part of a larger trend of websites using specialized services from third-party
    companies to build custom features. For example, sites commonly use Google Analytics
    for customer tracking, Facebook Login for authentication, and Zendesk for customer
    support. You can add each of these features with a few lines of code and an API
    key, making it significantly easier to build feature-rich sites from scratch.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: CMS 插件还可以提供分析功能来跟踪访问者，增加预约管理或客户支持功能，甚至创建在线商店。这种插件方法是网站利用来自第三方公司的专业服务构建定制功能的一个更大趋势。例如，网站通常使用
    Google Analytics 进行客户追踪，使用 Facebook 登录进行身份验证，使用 Zendesk 提供客户支持。你只需要几行代码和一个 API
    密钥，就可以添加这些功能，从而使从零开始构建功能丰富的网站变得更加容易。
- en: Using other people’s code to build your site, either by integrating a CMS or
    using plug-in services, theoretically makes you more secure because these third
    parties employ security professionals and have an incentive to secure their services.
    However, the ubiquity of these services and plug-ins also makes them a target
    for hackers. For example, many self-hosted instances of WordPress, the most popular
    CMS, are infrequently patched. You can easily discover WordPress vulnerabilities
    through a simple Google search, as shown in [Figure 4-2](ch04.xhtml#ch4fig2).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用他人的代码来构建你的网站，无论是通过集成 CMS 还是使用插件服务，从理论上讲可以让你更加安全，因为这些第三方雇用了安全专业人员，并且有动机确保其服务的安全性。然而，这些服务和插件的普及也使它们成为黑客的攻击目标。例如，许多自托管的
    WordPress 实例（最受欢迎的 CMS）很少进行修补。你可以通过简单的 Google 搜索轻松发现 WordPress 漏洞，正如[图 4-2](ch04.xhtml#ch4fig2)所示。
- en: When you use third-party code, you need to stay on top of security advisories
    and deploy security patches as soon as they become available. We’ll investigate
    some of risks around third-party code and services in [Chapter 14](ch14.xhtml#ch14).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用第三方代码时，需要关注安全公告，并在安全补丁发布后尽快部署。我们将在[第 14 章](ch14.xhtml#ch14)中调查第三方代码和服务相关的风险。
- en: '![image](Images/04fig02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/04fig02.jpg)'
- en: '*Figure 4-2: Come get your unsecured WordPress instances.*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-2：来获取你未加固的 WordPress 实例。*'
- en: '**Dynamic Resources**'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**动态资源**'
- en: Though it’s simpler to use static resources, authoring individual HTML files
    by hand is time-consuming. Imagine if retail websites had to code up a new web
    page every time they added a new item to their inventory. It would inefficiently
    use up everyone’s time (though it would provide a guarantee of job security for
    web developers).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管使用静态资源更简单，但手动编写单独的HTML文件却非常耗时。试想一下，如果零售网站每次新增库存商品时都必须编写一个新的网页，那将浪费每个人的时间（尽管这会确保网页开发人员的工作安全）。
- en: Most modern websites instead use dynamic resources. Often the dynamic resource’s
    code loads data from a database in order to populate the HTTP response. Typically,
    the dynamic resource outputs HTML, though other content types can be returned
    depending on the expectations of the browser.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代网站则使用动态资源。通常，动态资源的代码从数据库中加载数据，以填充HTTP响应。通常，动态资源输出HTML，尽管根据浏览器的预期，其他内容类型也可以被返回。
- en: Dynamic resources allow retail websites to implement a single product web page
    capable of displaying many types of products. Each time a user views a particular
    product on the site, the web page extracts the product code from a URL, loads
    the product price, image, and description from the database, and interpolates
    this data into the HTML. Adding new products to the retailer’s inventory then
    becomes a matter of simply entering new rows in the database.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 动态资源使零售网站能够实现一个能够展示多种类型产品的单一产品网页。每次用户查看网站上的某个特定产品时，网页都会从URL中提取产品代码，从数据库加载产品价格、图片和描述，并将这些数据插入到HTML中。然后，向零售商库存中添加新产品只需在数据库中添加新行。
- en: There are many other uses for dynamic resources. If you access your banking
    website, it looks up your account details and incorporates them in the HTML. A
    search engine like Google returns matches pulled from Google’s massive search
    index and returns them in a dynamic page. Many sites, including social media and
    web-mail sites, look different to each user, because they dynamically construct
    the HTML after the user logs in.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 动态资源有许多其他用途。如果你访问你的银行网站，它会查找你的账户信息并将其集成到HTML中。像Google这样的搜索引擎从Google庞大的搜索索引中返回匹配的结果，并将其显示在动态页面中。许多网站，包括社交媒体和网页邮箱网站，在每个用户登录后显示不同的内容，因为它们会在用户登录后动态生成HTML。
- en: As useful as dynamic resources are, they create novel security vulnerabilities.
    The dynamic interpolation of content into the HTML can be vulnerable to attack.
    We’ll look at how to protect ourselves from maliciously injected JavaScript in
    [Chapter 7](ch07.xhtml#ch07), and see how HTTP requests generated from other websites
    can cause harm in [Chapter 8](ch08.xhtml#ch08).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 动态资源虽然非常有用，但它们也带来了新的安全漏洞。将内容动态插入HTML的过程可能会受到攻击。我们将在[第7章](ch07.xhtml#ch07)中探讨如何防止恶意注入的JavaScript，并在[第8章](ch08.xhtml#ch08)中了解来自其他网站的HTTP请求如何造成危害。
- en: '***Templates***'
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***模板***'
- en: The first dynamic resources were simple script files, often written in the Perl
    language, that the web server executed when a user visited a particular URL. These
    script files would write out the HTML that made up a particular web page.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个动态资源是简单的脚本文件，通常是用Perl语言编写的，网站服务器在用户访问特定URL时执行这些脚本文件。这些脚本文件会输出构成特定网页的HTML。
- en: Code that makes up a dynamic resource in this fashion often isn’t intuitive
    to read. If a web page consists of static resources, you can look at a static
    HTML file to get a sense of how it’s organized, but it’s harder to do the same
    with dynamic resources that have a thousand lines of Perl code. Essentially, you
    have one language (Perl) writing out content in another language (HTML) that,
    downstream, a browser will render onscreen. Making changes to Perl code while
    keeping in mind what the eventual rendered output will look like is a difficult
    task.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式构成动态资源的代码通常不容易阅读。如果一个网页由静态资源组成，你可以查看静态的HTML文件来了解它是如何组织的，但如果是包含一千行Perl代码的动态资源，就很难做到这一点。本质上，你有一种语言（Perl）在用另一种语言（HTML）输出内容，而浏览器最终会将这些内容渲染到屏幕上。在编辑Perl代码时，要时刻考虑最终渲染输出的样子，这是一项艰巨的任务。
- en: 'To address this, web developers often use template files to build dynamic web
    pages. *Templates* are mostly HTML, but have programmatic logic interspersed within
    them that contains instructions to the web server. This logic is generally simple
    and usually does one of three things: pull data from a database or the HTTP request
    and interpolate it into the HTML, conditionally render sections of the HTML template,
    or loop over a data structure (for example, lists of items) to repeatedly render
    a block of HTML. All modern web frameworks use template files (with variations
    in syntax) because inserting code snippets into HTML typically makes code cleaner
    and more readable.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，web 开发人员通常使用模板文件来构建动态网页。*模板*主要是 HTML，但其中穿插了程序逻辑，包含了对 web 服务器的指令。这些逻辑通常很简单，通常执行以下三种操作之一：从数据库或
    HTTP 请求中提取数据并将其插入到 HTML 中，条件性地渲染 HTML 模板中的某些部分，或者遍历数据结构（例如，项目列表）以重复渲染一段 HTML。所有现代
    web 框架都使用模板文件（语法上有所不同），因为将代码片段嵌入 HTML 中通常能让代码更简洁和易读。
- en: '***Databases***'
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***数据库***'
- en: When a web server executes the code in a dynamic resource, it often loads data
    from a database. If you visit a retail website, the web server looks up the product
    ID in a database, and uses the product information stored in the database to construct
    the page. If you log into a social media site, the web server loads your timeline
    and notifications from an underlying database in order to write the HTML. In fact,
    most modern websites use databases to store user information, and the interface
    between the web server and a database is a frequent target for hackers.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个 web 服务器执行动态资源中的代码时，它通常会从数据库中加载数据。如果你访问一个零售网站，web 服务器会在数据库中查找产品 ID，并使用存储在数据库中的产品信息来构建页面。如果你登录一个社交媒体网站，web
    服务器会从底层数据库中加载你的时间线和通知，以便生成 HTML。事实上，大多数现代网站都使用数据库来存储用户信息，而 web 服务器与数据库之间的接口是黑客攻击的常见目标。
- en: Database technology predates the invention of the web. As computers became more
    widespread back in the 1960s, companies started to see the value of digitizing
    and centralizing their record keeping to make searching and maintenance easier.
    With the birth of the web, sticking a web frontend on top of a product inventory
    database was a natural progression for companies looking to branch out into online
    retail.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库技术早于 web 的发明。随着计算机在 1960 年代的普及，企业开始认识到数字化和集中存储记录的重要性，以便更容易地进行搜索和维护。随着 web
    的诞生，将一个 web 前端加到产品库存数据库上，成为企业向在线零售拓展的自然发展。
- en: Databases are key for authentication too. If a website wants to identify returning
    users, it needs to keep a record of who has signed up to the site and verify,
    or *authenticate*, their login information against stored credentials when they
    return.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库对于身份验证也至关重要。如果一个网站想要识别回访用户，它需要记录哪些用户已经注册，并在用户返回时通过与存储的凭证核对，来验证或*认证*他们的登录信息。
- en: The two most commonly used types of databases are SQL and NoSQL. Let’s take
    a look at both.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的两种数据库类型是 SQL 和 NoSQL。让我们来看一下这两者。
- en: '**SQL Databases**'
  id: totrans-45
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**SQL 数据库**'
- en: The most common databases used today are relational databases that implement
    *Structured Query Language (SQL)*, a declarative programming language that maintains
    and fetches data.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 目前最常用的数据库是关系型数据库，它们实现了*结构化查询语言 (SQL)*，这是一种声明式编程语言，用于维护和提取数据。
- en: '**NOTE**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*SQL can be pronounced either “ess-qew-ell” or “sequel,” although you can try
    pronouncing it “squeal” if you want to see your database administrator squirm
    uncomfortably.*'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*SQL 的发音可以是“ess-qew-ell”或者“sequel”，不过如果你想看看你的数据库管理员会不会感到不舒服，你可以尝试把它发音为“squeal”。*'
- en: SQL databases are *relational*, which means they store data in one or more *tables*
    that relate to each other in formally prescribed ways. You can think of a table
    as akin to a Microsoft Excel spreadsheet with rows and columns, with each row
    representing a data item, and each column representing a data point for each item.
    Columns in a SQL database have predefined data types, typically strings of text
    (often of fixed length), numbers, or dates.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 数据库是*关系型*的，这意味着它们将数据存储在一个或多个*表*中，并且这些表之间有正式规定的关系。你可以把表想象成类似 Microsoft Excel
    的电子表格，包含行和列，每一行代表一个数据项，每一列代表该数据项的一个数据点。SQL 数据库中的列有预定义的数据类型，通常是文本字符串（通常是固定长度）、数字或日期。
- en: Database tables in a relational database relate to each other via *keys*. Usually,
    each row in a table has a unique numeric *primary key*, and tables can refer to
    each other’s rows via *foreign keys*. For example, if you were storing user orders
    as database records, the `orders` table would have a foreign key column called
    `user_id` that represents the user who placed the order. Instead of storing user
    information directly in the `orders` table, this `user_id` column would contain
    foreign-key values that refer to a specific row’s primary key (the `id` column)
    in the `users` table. This type of relation ensures that you cannot store orders
    in the database without storing the user, and ensures that only a single source
    of truth exists for each user.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 关系型数据库中的数据库表通过*键*彼此关联。通常，每个表中的每一行都有一个唯一的数字*主键*，并且表格可以通过*外键*引用其他表的行。例如，如果你在存储用户订单的数据库记录，那么`orders`表会有一个名为`user_id`的外键列，表示下订单的用户。与其直接在`orders`表中存储用户信息，不如让`user_id`列包含引用`users`表中特定行主键（即`id`列）值的外键。这样可以确保你不能在没有存储用户的情况下在数据库中存储订单，并且确保每个用户只有唯一的真实数据来源。
- en: Relational databases also feature *data integrity constraints* that prevent
    data corruption and make uniform queries to the database possible. Like foreign
    keys, other types of data integrity constraints can be defined in SQL. For example,
    you could require the `email_address` column in a `users` table to contain only
    unique values, to force each user in the database to have a different email address.
    You could also require non-null values in tables so that the database must specify
    an email address for each user.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 关系型数据库还具有*数据完整性约束*，可以防止数据损坏，并使得对数据库的统一查询成为可能。像外键一样，其他类型的数据完整性约束也可以在 SQL 中定义。例如，你可以要求`email_address`列在`users`表中只包含唯一值，从而强制每个数据库中的用户拥有不同的电子邮件地址。你还可以要求表格中的字段不能为
    null，这样数据库必须为每个用户指定一个电子邮件地址。
- en: 'SQL databases also exhibit transactional and consistent behavior. A database
    *transaction* is a group of SQL statements executed in a batch. A database is
    said to be *transactional* if each transaction is “all or nothing”: that is, if
    any SQL statement fails to execute within the batch, the entire transaction fails
    and leaves the database state unchanged. SQL databases are *consistent* because
    any successful transaction brings the database from one valid state to another.
    Any attempt to insert invalid data in a SQL database causes the whole transaction
    to fail and the database to remain unaltered.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 数据库也展现了事务性和一致性行为。一个数据库*事务*是一组批量执行的 SQL 语句。如果每个事务是“全有或全无”的，那么这个数据库就是*事务性的*：也就是说，如果批量中的任何
    SQL 语句执行失败，整个事务将失败，并保持数据库状态不变。SQL 数据库是*一致性的*，因为每次成功的事务都会将数据库从一个有效状态带到另一个有效状态。任何尝试在
    SQL 数据库中插入无效数据的行为都会导致整个事务失败，并且数据库保持不变。
- en: Because data stored in SQL databases is often highly sensitive, hackers target
    databases to sell their contents on the black market. Hackers also often take
    advantage of insecurely constructed SQL statements. We’ll examine how in [Chapter
    6](ch06.xhtml#ch06).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于存储在 SQL 数据库中的数据通常高度敏感，黑客会攻击数据库，试图将其内容销往黑市。黑客还经常利用构造不安全的 SQL 语句。我们将在[第六章](ch06.xhtml#ch06)中详细讨论这一点。
- en: '**NoSQL Databases**'
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**NoSQL 数据库**'
- en: SQL databases are often the bottleneck of a web application’s performance. If
    most HTTP requests hitting a website generate a database call, the database server
    will experience a tremendous load and slow the performance of the website for
    all users.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 数据库往往是 Web 应用性能的瓶颈。如果大多数 HTTP 请求都需要访问数据库，那么数据库服务器将承受巨大的负载，导致网站的性能变慢，影响所有用户的使用体验。
- en: These performance concerns have led to the increasing popularity of NoSQL databases—databases
    that sacrifice the strict data integrity requirements of traditional SQL databases
    to achieve greater scalability. NoSQL encompasses a variety of approaches to storing
    and accessing data, but a few trends among them have emerged.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这些性能问题导致了 NoSQL 数据库的日益流行——这些数据库牺牲了传统 SQL 数据库的严格数据完整性要求，以实现更好的可扩展性。NoSQL 涵盖了多种存储和访问数据的方法，但其中一些趋势已逐渐显现。
- en: NoSQL databases are often *schemaless*, allowing you to add fields to new records
    without having to upgrade any data structures. To achieve this flexibility, data
    is often stored in *key-value* form, or in *JavaScript Object Notation (JSON)*.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL 数据库通常是*无模式*的，允许你在不需要升级任何数据结构的情况下为新记录添加字段。为了实现这种灵活性，数据通常以*键值*形式存储，或者以*JavaScript
    对象表示法 (JSON)* 存储。
- en: NoSQL database technology also tends to prioritize widescale replication of
    data over absolute consistency. SQL databases guarantee that simultaneous queries
    by different client programs will see the same results; NoSQL databases often
    loosen this constraint and guarantee only *eventual consistency*.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL 数据库技术通常更侧重于数据的广泛复制而非绝对一致性。SQL 数据库保证不同客户端程序的同时查询将得到相同的结果；而 NoSQL 数据库则通常放宽这一约束，仅保证
    *最终一致性*。
- en: NoSQL databases make storing unstructured or semistructured data very easy.
    Extracting and querying data tends to be a little more complex—some databases
    offer a programmatic interface, while others implement their own query languages
    that adapt SQL-like syntax to their data structures. NoSQL databases are vulnerable
    to injection attacks in much the same way as SQL databases are, though an attacker
    has to correctly guess the database type to successfully mount an attack.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL 数据库使得存储非结构化或半结构化数据变得非常容易。提取和查询数据则相对复杂一些——一些数据库提供了编程接口，而其他数据库则实现了自己的查询语言，将类似
    SQL 的语法适应到其数据结构中。NoSQL 数据库同 SQL 数据库一样容易受到注入攻击，尽管攻击者必须正确猜测数据库类型才能成功发起攻击。
- en: '***Distributed Caches***'
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***分布式缓存***'
- en: Dynamic resources can also load data from in-memory distributed *caches*, another
    popular approach to achieving the massive scalability required by large websites.
    *Caching* refers to the process of storing a copy of data kept elsewhere in an
    easily retrievable form, to speed up retrieval of that data. *Distributed caches*
    like Redis or Memcached make caching data straightforward and allow software to
    share data structures across different servers and processes in a language-agnostic
    way. Distributed caches can be shared among web servers, making them ideal for
    storing frequently accessed data that would otherwise have to be retrieved from
    a database.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 动态资源也可以从内存中的分布式 *缓存* 加载数据，这是一种实现大型网站所需巨大可扩展性的常见方法。*缓存* 指的是将其他地方存储的数据副本以易于检索的形式存储，以加速数据的检索。像
    Redis 或 Memcached 这样的 *分布式缓存* 使得缓存数据变得简单，并允许软件在不同的服务器和进程间共享数据结构，以一种与语言无关的方式。分布式缓存可以在
    Web 服务器之间共享，非常适合存储频繁访问的数据，这些数据原本需要从数据库中提取。
- en: 'Large web companies typically implement their tech stacks as a range of *microservices*—simple,
    modular services that perform one action on demand—and use distributed caches
    to communicate between them. Services often communicate via *queues* stored in
    a distributed cache: data structures that can put tasks in a waiting state so
    they can be completed one at a time by numerous worker processes. Services can
    also use *publish-subscribe* channels that allow many processes to register interest
    in a type of event, and have them notified en masse when it occurs.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 大型互联网公司通常将其技术栈实施为一系列 *微服务*——简单、模块化的服务，按需执行单一操作——并使用分布式缓存来实现它们之间的通信。服务通常通过存储在分布式缓存中的
    *队列* 进行通信：这些数据结构可以将任务置于等待状态，从而让多个工作进程一次完成一个任务。服务还可以使用 *发布-订阅* 通道，允许多个进程注册对某种事件的兴趣，并在事件发生时一次性通知它们。
- en: Distributed caches are vulnerable to hacks in the same way that databases are.
    Thankfully, Redis and Memcached were developed in an age when these kinds of threats
    were well-known, so best practices are generally baked into *software development
    kits (SDKs)*, the code libraries you use to connect with the caches.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式缓存和数据库一样容易受到黑客攻击。幸运的是，Redis 和 Memcached 是在这些威胁已经广为人知的时代开发的，因此最佳实践通常已经内置于
    *软件开发工具包（SDKs）* 中，这些是你用来连接缓存的代码库。
- en: '***Web Programming Languages***'
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***Web 编程语言***'
- en: Web servers will execute code in the process of evaluating dynamic resources.
    A huge number of programming languages can be used to write web server code, and
    each has different security considerations.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Web 服务器会在评估动态资源的过程中执行代码。大量编程语言可以用来编写 Web 服务器代码，每种语言都有不同的安全考虑。
- en: Let’s look at some of the more commonly used languages. We’ll use these languages
    in code samples in later chapters.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些更常用的语言。我们将在后续章节中使用这些语言进行代码示例。
- en: '**Ruby (on Rails)**'
  id: totrans-67
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**Ruby (on Rails)**'
- en: The *Ruby* programming language, like *Dragon Ball Z* and the Tom Selleck film
    *Mr. Baseball*, was invented in Japan in the mid ’90s. Unlike either *Dragon Ball
    Z* or Tom Selleck, it didn’t become popular for another decade until the Ruby
    on Rails platform was released.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*Ruby* 编程语言像 *龙珠 Z* 和汤姆·塞立克主演的电影 *棒球先生* 一样，是在 90 年代中期由日本发明的。不同于 *龙珠 Z* 或汤姆·塞立克，它直到
    Ruby on Rails 平台发布后才开始流行，整整过了十年。'
- en: '*Ruby on Rails* incorporates many best practices for building large-scale web
    applications and makes them easy to implement with minimal configuration. The
    Rails community also takes security seriously. Rails was one of the first web
    server stacks to incorporate protections against cross-site request forgery attacks.
    Nevertheless, Rail’s ubiquity makes it a common target for hackers. Several major
    security vulnerabilities have been discovered (and hastily patched) in recent
    years.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*Ruby on Rails* 融合了许多构建大规模 Web 应用的最佳实践，并且使它们能够以最少的配置轻松实现。Rails 社区也非常重视安全。Rails
    是最早实现防止跨站请求伪造攻击（CSRF）的 Web 服务器之一。然而，Rails 的普及性也使它成为黑客的常见攻击目标。近年来，发现了几个重大的安全漏洞（并迅速修补）。'
- en: Simpler Ruby web servers often described as *microframeworks* (for example,
    *Sinatra*) have become popular alternatives to Rails in recent years. Microframeworks
    allow you to combine individual code libraries that perform one particular function,
    so your web server is deliberately minimal in size. This contrasts with Rails’s
    “everything including the kitchen sink” model of deployment. Developers who use
    a microframework generally find the extra capabilities they need by using the
    RubyGems package manager.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 简化版的 Ruby Web 服务器，通常被称为 *微框架*（例如 *Sinatra*），近年来已成为 Rails 的流行替代品。微框架允许你将执行单一功能的代码库组合在一起，使得你的
    Web 服务器在设计上非常简洁。这与 Rails 的“包罗万象”部署模型形成了鲜明对比。使用微框架的开发者通常通过使用 RubyGems 包管理器来找到他们所需的额外功能。
- en: '**Python**'
  id: totrans-71
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**Python**'
- en: The *Python* language was invented in the late 1980s. Its clean syntax, flexible
    programming paradigm, and wide variety of modules have made the language phenomenally
    popular. Newcomers to Python are often surprised that whitespace and indenting
    have semantic meaning, which is unusual among programming languages. Whitespace
    is so important in the Python community that they fight holy wars over whether
    indentation should be done with tabs or spaces.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*Python* 语言是在 1980 年代末期发明的。其简洁的语法、灵活的编程范式以及丰富的模块库使得该语言异常流行。Python 的新手经常会惊讶于空格和缩进具有语义含义，这在编程语言中是比较少见的。空格在
    Python 社区中如此重要，以至于他们为是否应该使用制表符或空格进行缩进展开了“圣战”。'
- en: Python is used for a variety of applications, and is often the go-to language
    for data science and scientific computing projects. Web developers have a wide
    choice of actively maintained web servers to choose from (such as the popular
    Django and Flask). The diversity of web servers also acts as a security feature
    because hackers are less likely to target a particular platform.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Python 被广泛应用于各种领域，常常成为数据科学和科学计算项目的首选语言。Web 开发者可以选择多种活跃维护的 Web 服务器（如流行的 Django
    和 Flask）。这些 Web 服务器的多样性也充当了安全特性，因为黑客不太可能针对某一特定平台。
- en: '**JavaScript and Node.js**'
  id: totrans-74
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**JavaScript 和 Node.js**'
- en: '*JavaScript* started out as a simple language for executing small scripts within
    the browser, but became popular for writing web server code and rapidly evolved
    with the *Node.js* runtime. Node.js runs on top of the V8 JavaScript *engine*,
    the same software component that Google Chrome uses to interpret JavaScript within
    the browser. JavaScript still contains many quirks, but the prospect of using
    the same language on the client side and server side has made Node the fastest-growing
    web development platform.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*JavaScript* 最初是作为一种在浏览器中执行小脚本的简单语言，但后来成为编写 Web 服务器代码的流行语言，并通过 *Node.js* 运行时迅速发展。Node.js
    运行在 V8 JavaScript *引擎* 之上，V8 是 Google Chrome 用来在浏览器中解释 JavaScript 的软件组件。尽管 JavaScript
    仍然存在许多怪癖，但在客户端和服务器端使用同一种语言的前景使得 Node 成为增长最快的 Web 开发平台。'
- en: The largest security risks in Node are due to its rapid growth—hundreds of modules
    are added every day. You’ll need to take extra caution when you use third-party
    code in your Node application.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Node 中最大的安全风险来源于其快速增长——每天都会增加数百个模块。在使用第三方代码时，你需要特别小心。
- en: '**PHP**'
  id: totrans-77
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**PHP**'
- en: The *PHP* language was developed from a set of C binaries used to build dynamic
    sites on Linux. PHP later developed into a fully fledged programming language,
    though the unplanned evolution of the language is evident in its disorganized
    nature. PHP inconsistently implements many built-in functions. For example, variable
    names are case-sensitive, but function names are not. Despite these quirks, PHP
    remains popular and, at one point, it powered 10 percent of sites on the web.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*PHP* 语言源自一组用于在 Linux 上构建动态网站的 C 二进制文件。PHP 后来发展成了一门完整的编程语言，尽管该语言的无计划演化在其杂乱无章的特性中有所体现。PHP
    在实现许多内建函数时不一致。例如，变量名区分大小写，而函数名则不区分。尽管存在这些怪癖，PHP 仍然很受欢迎，曾一度支持了互联网 10% 的网站。'
- en: If you’re writing PHP, you’re often maintaining a legacy system. Because older
    PHP frameworks exhibit some of the nastiest security vulnerabilities you can imagine,
    you should update legacy PHP systems to use modern libraries. Every type of vulnerability,
    whether it’s command execution, directory traversal, or a buffer overflow, has
    given PHP programmers sleepless nights.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在编写 PHP，通常是在维护一个遗留系统。由于较老的 PHP 框架存在一些最为严重的安全漏洞，你应该更新遗留的 PHP 系统以使用现代的库。每种类型的漏洞，无论是命令执行、目录遍历，还是缓冲区溢出，都曾让
    PHP 程序员夜不能寐。
- en: '**Java**'
  id: totrans-80
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**Java**'
- en: '*Java* and the *Java Virtual Machine (JVM)* have been widely used and implemented
    in the enterprise space, allowing you to run Java’s compiled bytecode across multiple
    operating systems. It’s generally a good workhorse language when performance is
    a concern.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*Java* 和 *Java 虚拟机（JVM）* 在企业领域得到了广泛使用和实现，使得你可以跨多个操作系统运行 Java 编译后的字节码。当性能是一个重要考虑因素时，Java
    通常是一个可靠的工作语言。'
- en: Developers have used Java for everything, whether for robotics, mobile app development,
    big-data applications, or embedded devices. Its popularity as a web development
    language has waned, but many millions of lines of Java code still power the internet.
    From a security perspective, Java is haunted by its past popularity; legacy applications
    contain a lot of Java code that run older versions of the language and frameworks.
    Java developers need to update to secure versions in a timely fashion lest they
    become easy pickings for hackers.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者曾使用 Java 来做各种事情，无论是机器人技术、移动应用开发、大数据应用，还是嵌入式设备。尽管作为一种 Web 开发语言，它的流行度有所下降，但数百万行
    Java 代码仍然驱动着互联网。从安全角度来看，Java 因其过去的流行而“受到困扰”；遗留应用程序包含大量运行旧版 Java 语言和框架的 Java 代码。Java
    开发者需要及时更新到安全版本，以免成为黑客的目标。
- en: If you’re a more adventurous developer, you’ll find other popular languages
    that run on the JVM and offer compatibility with Java’s huge ecosystem of third-party
    libraries. Clojure is a popular Lisp dialect; Scala is a functional language with
    static typing; Kotlin is a newer object-oriented language designed to be backward
    compatible with Java, while making scripting easier.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一个更具冒险精神的开发者，你会发现其他流行的运行在 JVM 上并与 Java 庞大的第三方库生态系统兼容的语言。Clojure 是一种流行的 Lisp
    方言；Scala 是一种具有静态类型的函数式语言；Kotlin 是一种较新的面向对象语言，旨在与 Java 向后兼容，同时使脚本编写更为简便。
- en: '**C#**'
  id: totrans-84
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**C#**'
- en: '*C#* was designed by Microsoft as part of the .NET initiative. C# (and other
    .NET languages, such as VB.NET) use a virtual machine called the *Common Language
    Runtime (CLR)*. C# is less abstracted from the operating system than Java, and
    you can happily intermingle C++ code with C#.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*C#* 是微软为 .NET 计划设计的语言。C#（以及其他 .NET 语言，如 VB.NET）使用一种名为 *公共语言运行时（CLR）* 的虚拟机。C#
    相对于操作系统的抽象程度低于 Java，并且你可以愉快地将 C++ 代码与 C# 混合使用。'
- en: Microsoft has had a conversion late in life to open source evangelism, and the
    reference implementation of C# is now, thankfully, open source. The Mono project
    allows .NET applications to run on Linux and other operating systems. Nevertheless,
    most companies using C# deploy to Windows servers and the typical Microsoft stack.
    Windows has had a troubling history security-wise—being, for instance, *the* most
    common target platform for viruses—so anyone looking to adopt .NET as a platform
    needs to be aware of the risks.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 微软晚年转向开源布道，值得庆幸的是，C# 的参考实现现在已经开源。Mono 项目使得 .NET 应用可以在 Linux 和其他操作系统上运行。然而，大多数使用
    C# 的公司依然部署在 Windows 服务器和典型的微软堆栈上。Windows 在安全方面有着令人不安的历史——例如，它是 *病毒* 最常见的攻击平台——因此任何计划采用
    .NET 作为平台的人都需要意识到其风险。
- en: '**Client-Side JavaScript**'
  id: totrans-87
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**客户端 JavaScript**'
- en: 'As a web developer, you have a choice of languages for writing web server code.
    But when your code needs to be executed in the browser, you have exactly one choice:
    JavaScript. As I mentioned previously, the popularity of JavaScript as a server-side
    language can in part be credited to web developers’ familiarity with it from writing
    for the client side.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名 Web 开发者，你可以选择多种语言来编写 Web 服务器代码。但当你的代码需要在浏览器中执行时，你只有一个选择：JavaScript。正如我之前提到的，JavaScript
    作为服务器端语言的流行部分归功于 Web 开发者在客户端编程中对它的熟悉。
- en: JavaScript in the browser has moved a long way beyond the simple form-validation
    logic and animated widgets it was used for in the early days of the web. A complex
    site such as Facebook uses JavaScript to redraw areas of the page as the user
    interacts with it—for example, rendering a menu when the user clicks an icon,
    or opening a dialog when they click a photo. Sites often update the user interface
    when background events occur, too, by adding notification markers when others
    leave comments or write new posts.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器中的 JavaScript 已经远远超越了早期网页中用于简单表单验证逻辑和动画小部件的功能。像 Facebook 这样复杂的网站使用 JavaScript
    在用户与页面交互时重新绘制页面区域——例如，当用户点击图标时渲染菜单，或者当他们点击照片时打开对话框。网站还经常在后台事件发生时更新用户界面，例如在别人留言或发布新帖时添加通知标记。
- en: Achieving this kind of dynamic user interface without refreshing the whole page
    and interrupting the user experience requires client-side JavaScript to manage
    a lot of state in memory. Several frameworks have been developed to organize memory
    state and render pages efficiently. They also allow for modular reuse of JavaScript
    code over various pages on the site, a key design consideration when you have
    millions of lines of JavaScript to manage.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这种无需刷新整个页面且不打断用户体验的动态用户界面，需要客户端 JavaScript 在内存中管理大量的状态。已经开发出多个框架来组织内存状态并高效地渲染页面。它们还允许在网站的多个页面中模块化重用
    JavaScript 代码，这是当你需要管理数百万行 JavaScript 时的重要设计考虑因素。
- en: One such JavaScript framework is *Angular*, originally released by Google under
    an open source license. Angular borrows from server-side paradigms and uses client-side
    templates to render web pages. The Angular template engine—which executes in the
    browser as the page loads—parses the template HTML supplied by the server, and
    processes any directives as they appear. Because the template engine is simply
    JavaScript executing in the browser, it can write directly to the DOM and short-circuit
    some of the browser-rendering pipeline. As the memory state changes, Angular automatically
    re-renders the DOM. This separation makes for cleaner code and more-maintainable
    web applications.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个 JavaScript 框架是 *Angular*，最初由 Google 以开源许可证发布。Angular 借鉴了服务器端的范式，并使用客户端模板来渲染网页。Angular
    模板引擎——在页面加载时执行——解析服务器提供的模板 HTML，并处理出现的任何指令。由于模板引擎本质上是在浏览器中执行的 JavaScript，它可以直接写入
    DOM，并绕过浏览器渲染管道的一些步骤。随着内存状态的变化，Angular 会自动重新渲染 DOM。这种分离方式使代码更加简洁，Web 应用程序也更易于维护。
- en: The open source *React* framework, which was released by the Facebook development
    team, takes a slightly different approach from Angular. Instead of interspersing
    code in HTML templates, React encourages the developer to write HTML-like tags
    directly into JavaScript. React developers typically create *JavaScript XML (JSX)*
    files that they run through a preprocessor and compile into JavaScript before
    sending them to the browser.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Facebook 开发团队发布的开源 *React* 框架，采取了与 Angular 略有不同的方法。React 鼓励开发者将类似 HTML 的标签直接写入
    JavaScript，而不是将代码插入到 HTML 模板中。React 开发者通常创建 *JavaScript XML (JSX)* 文件，并通过预处理器将其编译成
    JavaScript，然后再发送到浏览器中。
- en: Writing JavaScript code like `return <h1>Hello, {format(user)}</h1>` for the
    first time can seem strange to developers used to separating JavaScript and HTML
    files, but by making HTML a first-class element of the JavaScript syntax, React
    enables useful features (for example, syntax highlighting and code completion)
    that would otherwise be difficult to support.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 初次编写像 `return <h1>Hello, {format(user)}</h1>` 这样的 JavaScript 代码时，对于习惯将 JavaScript
    和 HTML 文件分开的开发者来说，可能会觉得很奇怪，但通过将 HTML 作为 JavaScript 语法的第一类元素，React 实现了一些有用的功能（例如，语法高亮和代码补全），这些功能否则会很难支持。
- en: 'Rich, client-side JavaScript frameworks like Angular and React are great for
    building and maintaining complex sites. JavaScript code that manipulates the DOM
    directly is partial to a new type of security vulnerability, however: DOM-based
    cross-site scripting attacks, which we’ll look at in more detail in [Chapter 7](ch07.xhtml#ch07).'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 富有表现力的客户端 JavaScript 框架，如 Angular 和 React，适用于构建和维护复杂的网站。然而，直接操作 DOM 的 JavaScript
    代码容易受到一种新的安全漏洞的影响：基于 DOM 的跨站脚本攻击，关于这一点我们将在[第七章](ch07.xhtml#ch07)中详细探讨。
- en: Note that although JavaScript is the only language a browser typically executes,
    that doesn’t mean you have to write all your client-side code in JavaScript. Many
    developers use languages like CoffeeScript or TypeScript that are *transpiled*
    into JavaScript during the build process before being sent to the browser. These
    languages are subject to the same security vulnerabilities as JavaScript at execution
    time, so in this book I’ll mostly limit our discussions to plain old JavaScript.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，尽管 JavaScript 是浏览器通常执行的唯一语言，但这并不意味着你必须把所有客户端代码都写成 JavaScript。许多开发者使用像 CoffeeScript
    或 TypeScript 这样的语言，这些语言在构建过程中会被*转换*成 JavaScript，然后再发送到浏览器。这些语言在执行时会受到与 JavaScript
    相同的安全漏洞的影响，所以在本书中，我会主要讨论纯粹的 JavaScript。
- en: '**Summary**'
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: 'Web servers serve two types of content in response to HTTP requests: static
    resources, such as images, and dynamic resources, which execute custom code.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Web 服务器在响应 HTTP 请求时提供两种类型的内容：静态资源，如图片，以及动态资源，后者执行自定义代码。
- en: Static resources are resources that we can serve directly from a filesystem
    or a content delivery network to increase the responsiveness of the site. Website
    owners usually author websites that consist wholly of static resources in a content-management
    system, which allows nontechnical administrators to edit them directly in the
    browser.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 静态资源是我们可以直接从文件系统或内容分发网络提供的资源，用来提高网站的响应速度。网站所有者通常使用内容管理系统（CMS）编写完全由静态资源构成的网站，这允许非技术管理员在浏览器中直接编辑它们。
- en: Dynamic resources, on the other hand, are resources that we often define in
    the form of templates, HTML that’s interspersed with programmatic instructions
    to be interpreted by the server. They’ll typically read data from a database or
    a cache that informs how the page is rendered. The most common form of database
    is a SQL database, which stores data in tabular form, with strictly defined rules
    on the structure of the data. Larger websites often use a NoSQL database, a newer
    variety of database that relaxes some of the constraints of the traditional SQL
    database in order to achieve greater scalability. We write dynamic resources in
    a web programming language, of which there are many.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 动态资源是我们通常以模板的形式定义的资源，HTML 中夹杂了需要由服务器解释的编程指令。它们通常从数据库或缓存中读取数据，以决定页面的渲染方式。最常见的数据库类型是
    SQL 数据库，它以表格形式存储数据，并对数据的结构有严格的定义规则。大型网站通常使用 NoSQL 数据库，这是一种较新的数据库类型，放宽了传统 SQL 数据库的一些约束，以实现更大的可扩展性。我们用一种
    Web 编程语言编写动态资源，而这类语言有很多种。
- en: In the next chapter, you’ll look at the process of writing code itself. The
    key to writing secure, bug-free code is a disciplined development process; I’ll
    show you how you should write, test, build, and deploy your code.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将会学习到编写代码的过程。编写安全、无 bug 的代码的关键在于有条理的开发流程；我将向你展示你应该如何编写、测试、构建和部署代码。
