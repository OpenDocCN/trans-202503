["```\n\n      #include <avr/io.h>\n\n      #include <util/delay.h>\n\n      void blinkSlow()\n\n      {\n\n      uint8_t i;\n\n      for (i = 0; i < 5; i++)\n\n      {\n\n      PORTB |= (1 << PORTB0);\n\n      _delay_ms(1000);\n\n      PORTB &= ~(1 << PORTB0);\n\n      _delay_ms(1000);\n\n      }\n\n      }\n\n      void blinkFast()\n\n      {\n\n      uint8_t i;\n\n      for (i = 0; i < 5; i++)\n\n      {\n\n      PORTB |= (1 << PORTB0);\n\n      _delay_ms(250);\n\n      PORTB &= ~(1 << PORTB0);\n\n      _delay_ms(250);\n\n      }\n\n      }\n\n      int main(void)\n\n      {\n\n      DDRB |= (1 << PORTB0); // Set PORTB0 as outputs\n\n      while (1)\n\n      {\n\n      blinkSlow();\n\n      _delay_ms(1000);\n\n      blinkFast();\n\n      _delay_ms(1000);\n\n      }\n\n      }\n\n```", "```\n\n      // blinko.h\n\n      void blinkSlow();\n\n      // Blinks PORTB0 slowly, five times\n\n      void blinkFast();\n\n      // Blinks PORTB0 rapidly, five times\n\n```", "```\n\n      // blinko.c\n\n      ❶ #include <avr/io.h>\n\n      #include <util/delay.h>\n\n      ❷ void blinkSlow()\n\n      {\n\n      uint8_t i;\n\n      for (i = 0; i < 5; i++)\n\n      {\n\n      PORTB |= (1 << PORTB0);\n\n      _delay_ms(1000);\n\n      PORTB &= ~(1 << PORTB0);\n\n      _delay_ms(1000);\n\n      }\n\n      }\n\n      ❸ void blinkFast()\n\n      {\n\n      uint8_t i;\n\n      for (i = 0; i < 5; i++)\n\n      {\n\n      PORTB |= (1 << PORTB0);\n\n      _delay_ms(250);\n\n      PORTB &= ~(1 << PORTB0);\n\n      _delay_ms(250);\n\n      }\n\n      }\n\n```", "```\n\n      // Project 41 - Your First Library\n\n      #include <avr/io.h>\n\n      #include <util/delay.h>\n\n      ❶ #include \"blinko.h\"   // Use our new library\n\n      int main(void)\n\n      {\n\n      DDRB = 0b11111111; // Set PORTB as outputs\n\n      for(;;)\n\n      {\n\n      ❷ blinkSlow();\n\n      _delay_ms(1000);\n\n      blinkFast();\n\n      _delay_ms(1000);\n\n      }\n\n      return 0;\n\n      }\n\n```", "```\n\n      #include <avr/io.h>\n\n      #define __DELAY_BACKWARD_COMPATIBLE__ // Required for macOS users\n\n      #include <util/delay.h>\n\n      void blinkType(int blinks, int duration)\n\n      // blinks - number of times to blink the LED\n\n      // duration - blink duration in milliseconds\n\n      {\n\n      uint8_t i;\n\n      for (i = 0; i < blinks; i++)\n\n      {\n\n      PORTB |= (1 << PORTB0);\n\n      _delay_ms(duration);\n\n      PORTB &= ~(1 << PORTB0);\n\n      _delay_ms(duration);\n\n      }\n\n      }\n\n      int main(void)\n\n      {\n\n      DDRB |= (1 << PORTB0);             // Set PORTB0 as outputs\n\n      while (1)\n\n      {\n\n      // Blink LED 10 times, with 150 ms duration\n\n      blinkType(10, 150);\n\n      _delay_ms(1000);\n\n      // Blink LED 5 times, with 1 s duration\n\n      blinkType(5, 1000);\n\n      _delay_ms(1000);\n\n      }\n\n      }\n\n```", "```\n\n     // blinko2.h\n\n     void blinkType(int blinks, int duration);\n\n     // blinks - number of times to blink the LED\n\n     // duration - blink duration in milliseconds\n\n```", "```\n\n     // blinko2.c\n\n     ❶ #include <avr/io.h>\n\n     ❷ #define __DELAY_BACKWARD_COMPATIBLE__\n\n     #include <util/delay.h>\n\n     ❸ void blinkType(int blinks, int duration)\n\n     // blinks - number of times to blink the LED\n\n     // duration - blink duration in milliseconds\n\n     {\n\n     uint8_t i;\n\n     for (i = 0; i < blinks; i++)\n\n     {\n\n     PORTB |= (1 << PORTB0);\n\n     _delay_ms(duration);\n\n     PORTB &= ~(1 << PORTB0);\n\n     _delay_ms(duration);\n\n     }\n\n     }\n\n```", "```\n\n     // Project 42 - Using the blinko2.c Library\n\n     #include <avr/io.h>\n\n     #include <util/delay.h>\n\n     ❶ #include \"blinko2.h\"  // Use our new library\n\n     int main(void)\n\n     {\n\n     DDRB = 0b11111111; // Set PORTB as outputs\n\n     for(;;)\n\n     {\n\n     // Blink LED 10 times, with 150 ms duration\n\n     ❷ blinkType(10, 150);\n\n     _delay_ms(1000);\n\n     // Blink LED 5 times, with 1 s duration\n\n     ❸ blinkType(5, 1000);\n\n     _delay_ms(1000);\n\n     }\n\n     return 0;\n\n     }\n\n```", "```\n\n     // thermometer.h\n\n     void displayNumber(uint8_t value);\n\n     // Displays a number between 0 and 99 on the seven-segment LED display\n\n     float readTMP36();\n\n     // Returns temperature from TMP36 sensor using ATmega328P-PU pin PC5\n\n```", "```\n\n     // thermometer.c\n\n     ❶ #include <avr/io.h>\n\n     #include <math.h>\n\n     #include <util/delay.h>\n\n     ❷ float readTMP36()\n\n     // Returns temperature from TMP36 sensor using ATmega328P-PU pin PC5\n\n     {\n\n     float temperatureC;\n\n     float voltage;\n\n     uint16_t ADCvalue;\n\n     ADCSRA |= (1 << ADSC);                 // Start ADC measurement\n\n     while (ADCSRA & (1 << ADSC) );         // Wait for conversion to finish\n\n     _delay_ms(10);\n\n     // Get value from ADC (which is 10-bit) register, store in ADCvalue\n\n     ADCvalue = ADC;\n\n     // Convert reading to temperature value (Celsius)\n\n     voltage = (ADCvalue * 5);\n\n     voltage = voltage / 1024;\n\n     temperatureC = ((voltage - 0.5) * 100);\n\n     ❸ return temperatureC;\n\n     }\n\n     ❹ void displayNumber(uint8_t value)\n\n     // Displays a number between 0 and 99 on the seven-segment LED display\n\n     {\n\n     uint8_t tens=0;\n\n     uint8_t ones=0;\n\n     uint8_t delayTime=250;\n\n     tens = value / 10;\n\n     ones = value % 10;\n\n     switch(tens)\n\n     {\n\n     case 0 : PORTB = 0b00111111; break; // 0\n\n     case 1 : PORTB = 0b00000110; break; // 1\n\n     case 2 : PORTB = 0b01011011; break; // 2\n\n     case 3 : PORTB = 0b01001111; break; // 3\n\n     case 4 : PORTB = 0b01100110; break; // 4\n\n     case 5 : PORTB = 0b01101101; break; // 5\n\n     case 6 : PORTB = 0b01111101; break; // 6\n\n     case 7 : PORTB = 0b00000111; break; // 7\n\n     case 8 : PORTB = 0b01111111; break; // 8\n\n     case 9 : PORTB = 0b01101111; break; // 9\n\n     }\n\n     _delay_ms(delayTime);\n\n     switch(ones)\n\n     {\n\n     case 0 : PORTB = 0b00111111; break; // 0\n\n     case 1 : PORTB = 0b00000110; break; // 1\n\n     case 2 : PORTB = 0b01011011; break; // 2\n\n     case 3 : PORTB = 0b01001111; break; // 3\n\n     case 4 : PORTB = 0b01100110; break; // 4\n\n     case 5 : PORTB = 0b01101101; break; // 5\n\n     case 6 : PORTB = 0b01111101; break; // 6\n\n     case 7 : PORTB = 0b00000111; break; // 7\n\n     case 8 : PORTB = 0b01111111; break; // 8\n\n     case 9 : PORTB = 0b01101111; break; // 9\n\n     }\n\n     _delay_ms(delayTime);\n\n     PORTB = 0; // Turn off display\n\n     }\n\n```", "```\n\n     // Project 43 - Creating a Digital Thermometer with the thermometer.c Library\n\n     ❶ #include <avr/io.h>\n\n     #include <util/delay.h>\n\n     #include \"thermometer.h\"                  // Use our new library\n\n     ❷ void startADC()\n\n     // Set up the ADC\n\n     {\n\n     ADMUX |= (1 << REFS0);                 // Use AVcc pin with ADC\n\n     ADMUX |= (1 << MUX2) | (1 << MUX0);    // Use ADC5 (pin 28)\n\n     ADCSRA |= (1 << ADPS1) | (1 << ADPS0); // Prescaler for 1MHz (/8)\n\n     ADCSRA |= (1 << ADEN);                 // Enable ADC\n\n     }\n\n     int main(void)\n\n     {\n\n     ❸ float temperature;\n\n     uint8_t finalTemp;\n\n     ❹ startADC();\n\n     ❺ DDRB = 0b11111111;                     // Set PORTB as outputs\n\n     for(;;)\n\n     {\n\n     ❻ temperature = readTMP36();          // Get temperature from sensor\n\n     finalTemp = (int)temperature;\n\n     ❼ displayNumber(finalTemp);\n\n     _delay_ms(1000);\n\n     }\n\n     return 0;\n\n     }\n\n```"]