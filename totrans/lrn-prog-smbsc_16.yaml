- en: '**16**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**STORING DATA WITH ASSOCIATIVE ARRAYS**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/common01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On social websites like Facebook and LinkedIn, people enter information into
    text boxes, such as their names, relationship statuses, and even regular updates
    to their friends (like, “Oh noes!! I just stepped on a bug, and I think I got
    bug poisoning!”). Programs that need to search or filter this data may use associative
    arrays to store the various parts of the text.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the indexed arrays you used in [Chapter 15](ch15.html#ch15),
    Small Basic supports other types of arrays that can simplify many programming
    tasks. In this chapter, you’ll start by learning about *associative arrays*. Then
    you’ll learn about the `Array` object, use it to create some fun applications,
    and even turn your computer into a poet!
  prefs: []
  type: TYPE_NORMAL
- en: '**Associative Arrays**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to use an integer index to access an
    array’s elements. But in Small Basic, an array’s index can also be a string. Arrays
    indexed by strings are called *associative arrays*, *maps*, or *dictionaries*.
    In this book, we’ll call them associative arrays. Just like an indexed array,
    an associative array can store values of any type. You can use an associative
    array to create an association between a set of *keys* (string indices) and a
    set of values, which is called creating a *map* of key-value pairs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows a simple example of an associative array in action.
    It’s a list of states keyed by their two-letter abbreviations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To display the name of a state, you simply use its corresponding key and the
    proper syntax. For example, to display `Michigan`, you can write this statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: By writing the name of the array followed by the key enclosed in square brackets,
    you can access the corresponding item. An associative array works like a *lookup
    table* that maps keys to values; if you know the key, you can find its value very
    quickly.
  prefs: []
  type: TYPE_NORMAL
- en: To learn how to use associative arrays, let’s write a program that keeps track
    of the ages of your friends by name. Enter the program in [Listing 16-1](ch16.html#ch16ex1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 16-1: Using associative arrays*'
  prefs: []
  type: TYPE_NORMAL
- en: Lines 2–5 create an associative array named `age` with four elements in it.
    You can add more if you’d like, or you can change the array to store the ages
    of your own friends. Line 6 asks you to enter a friend’s name, and line 7 reads
    it into the `name` variable. In line 9, `age[name]` looks up the age of that friend.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at some sample runs of this program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the key is case insensitive: it doesn’t matter if you enter `age["Ernie"]`,
    `age["ernie"]`, or even `age["ERNIE"]`. If the array contains a key named `Ernie`,
    regardless of its case, Small Basic returns the value for that key.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s say you forget which friends’ names you stored in the array, and you
    try to access the age of someone you forgot to include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If the array doesn’t contain a certain key, Small Basic returns an empty string,
    which is why `age["Grover"]` is empty.
  prefs: []
  type: TYPE_NORMAL
- en: '**ASSOCIATIVE ARRAYS VS. THE IF/ELSEIF LADDER**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In programming, there are usually lots of different ways to approach a particular
    problem. Here’s another way to write the program like the one in [Listing 16-1](ch16.html#ch16ex1):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Although this program seems similar to the one in [Listing 16-1](ch16.html#ch16ex1),
    the two have one important difference: here, string comparison is case sensitive.
    If you enter `ernie` (with a lowercase *e*), the program displays the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The expression `If("ernie" = "Ernie")` is false. This version of the program
    is also harder to read and write. When you need to map between a set of keys and
    values, it’s best to use associative arrays so you don’t have to worry about case.
  prefs: []
  type: TYPE_NORMAL
- en: '**Putting Associative Arrays to Use**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you understand the basics of associative arrays, let’s examine a couple
    of programs that show you how to use them.
  prefs: []
  type: TYPE_NORMAL
- en: '***Days in French***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The first example translates the days of the week from English to French. This
    program prompts a user to enter the name of a day in English and outputs that
    name in French. Enter the code in [Listing 16-2](ch16.html#ch16ex2).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 16-2: An English-to-French translator*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `day` array stores the French names for the days of the week (lines 2–8).
    Each key in the array is the day’s name in English. The program prompts the user
    to enter the name of a day in English (line 10) and stores the user’s input in
    the `name` variable (line 11). The program then looks up the French name using
    the user’s input as a key, using the syntax `day[name]`, and displays it (line
    12). Here’s the output from a sample run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Do you know any other languages? Change the program to help your friends learn
    how to say the days of the week in a new language. Feeling sneaky? You could even
    make up your own secret language!
  prefs: []
  type: TYPE_NORMAL
- en: '**TRY IT OUT 16-1**'
  prefs: []
  type: TYPE_NORMAL
- en: 'What’s the output of [Listing 16-2](ch16.html#ch16ex2) if the user enters an
    invalid day name (like *Windsday*)? Update the program to display an error message
    when this happens. Use an `If` statement like this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '***Storing Records***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Business is booming, and Moe Mows, a local lawn-mowing service in your town,
    has hired you to write a program that displays the contact information of its
    customers. When the company enters a customer’s name, the program needs to display
    the customer’s home address, phone number, and email address. Enter the program
    in [Listing 16-3](ch16.html#ch16ex3).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 16-3: Building a simple database*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The program uses three associative arrays: `address`, `phone`, and `email`.
    All three arrays use the customer’s name as a key, and the arrays are used collectively
    to store customers’ records. A *record* is a collection of related data items.
    In this example, each customer’s record has three fields: address, phone, and
    email. Whether the program has two records or 1,000 records, the search is done
    the same way. For example, the statement `address[name]` in line 12 returns the
    value associated with the key `name` in the `address` array. We don’t have to
    search the `address` array; Small Basic does this for us, for free!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the output from a sample run of this program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**TRY IT OUT 16-2**'
  prefs: []
  type: TYPE_NORMAL
- en: Update the program in [Listing 16-3](ch16.html#ch16ex3) to store the contact
    information of some of your friends (but not all 500 of your Facebook friends).
    Add another array that stores the birth date of each friend. You’ll never forget
    a birthday again!
  prefs: []
  type: TYPE_NORMAL
- en: '**The Array Object**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `Array` object in the Small Basic library can help you find important information
    about the arrays in your programs. In this section, we’ll explore this object
    in detail and look at some examples on how to use it. To explore the `Array` object,
    let’s start by entering the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This code defines an ordinary variable called `name`, an associative array called
    `age` that has two elements, and an indexed array called `score` that has one
    element. You’ll use these arrays in the examples that follow. What can the `Array`
    object tell you? Let’s find out!
  prefs: []
  type: TYPE_NORMAL
- en: '***Is It an Array?***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Do you think Small Basic knows that `name` is an ordinary variable and that
    `age` and `score` are arrays? Run the program in [Listing 16-4](ch16.html#ch16ex4)
    to find out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 16-4: Demonstrating the* `IsArray()` *method*'
  prefs: []
  type: TYPE_NORMAL
- en: This code uses the `Array` object’s `IsArray()` method. If the variable is an
    array, this method returns `"True"`; otherwise, it returns `"False"`. This method
    shows that the variables `age` and `score` are arrays, but the `name` variable
    isn’t an array. The `IsArray()` method can help you to be sure that the variables
    in your programs are arrays.
  prefs: []
  type: TYPE_NORMAL
- en: '***How Big Is an Array?***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `Array` object can also tell you how many elements are stored in your arrays.
    Run the program in [Listing 16-5](ch16.html#ch16ex5).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 16-5: Demonstrating the* `GetItemCount()` *method*'
  prefs: []
  type: TYPE_NORMAL
- en: The `GetItemCount()` method returns the number of items in the specified array.
    Note how `GetItemCount(name)` returns 0, because `name` isn’t an array. The other
    two calls return the number of elements in each array. Use `GetItemCount()` to
    keep track of how many items you’re storing in an array. You might use this method
    in a game that allows the player to store items in an inventory and you want to
    check how many items they have picked up.
  prefs: []
  type: TYPE_NORMAL
- en: '***Does It Have a Particular Index?***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can also use the `Array` object to find out whether one of your arrays contains
    a certain index. To see how, run the program in [Listing 16-6](ch16.html#ch16ex6).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 16-6: Demonstrating the* `ContainsIndex()` *method*'
  prefs: []
  type: TYPE_NORMAL
- en: The `ContainsIndex()` method takes two arguments. The first argument is the
    name of the array, and the second argument is the index you’re checking for. The
    method returns `"True"` or `"False"` depending on whether the index exists in
    the array.
  prefs: []
  type: TYPE_NORMAL
- en: Line 6 shows that searching for the index is case insensitive, which is why
    the search for the index `homer` returns `"True"`. Also, searching the `score`
    array for index `"1"` (as a string) or index `1` (as a number) both returned `"True"`.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re not sure whether an array includes a particular index, you can use
    the `ContainsIndex()` method to find out. This method is especially helpful if
    you’re working with very long arrays.
  prefs: []
  type: TYPE_NORMAL
- en: '***Does It Have a Particular Value?***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `Array` object also offers a method that checks whether an array contains
    a certain value. Run the program in [Listing 16-7](ch16.html#ch16ex7) to discover
    how the `ContainsValue()` method works.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 16-7: Demonstrating the* `ContainsValue()` *method*'
  prefs: []
  type: TYPE_NORMAL
- en: The `ContainsValue()` method returns `"True"` or `"False"` depending on whether
    the value it checks for exists in the array.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Unlike the* `ContainsIndex()` *method, the* `ContainsValue()` *method is case
    sensitive. So it’s best to be consistent with your casing!*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Give Me All the Indices***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Another useful method of the `Array` object is `GetAllIndices()`. This method
    returns an array that has all the indices of a given array. The first element
    of the returned array has an index of 1\. To understand how this method works,
    run the program in [Listing 16-8](ch16.html#ch16ex8).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 16-8: Demonstrating the* `GetAllIndices()` *method*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Line 4 calls `GetAllIndices()` to find all the indices of the `age` array.
    This method returns an array, which it saves in the `names` identifier. The code
    then starts a loop that runs from the first to the last element in `names`. Note
    how the code uses the `GetItemCount()` method to figure out this value. Here’s
    the output of this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now let’s put the methods you’ve learned to good use. Do you think your computer
    is intelligent enough to write poems? Well, let’s see!
  prefs: []
  type: TYPE_NORMAL
- en: '**TRY IT OUT 16-3**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the file *AnimalSpeed.sb* from this chapter’s folder. This game quizzes
    the player on the top speed (in miles per hour) of different animals. The program
    has an associative array that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Run this game to see how it works. Which `Array` object methods does the game
    use? Explain how the game works, and then come up with some ideas to make the
    game more fun. Make sure you do all of this assignment. Don’t be a cheetah!
  prefs: []
  type: TYPE_NORMAL
- en: '**Your Computer the Poet**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now let’s use what we’ve learned about associative arrays to write a program
    that generates poems. This artificial poet selects words randomly from five lists
    (`article`, `adjective`, `noun`, `verb`, and `preposition`) and combines them
    into a fixed pattern. To give the poems a central theme, all the words in these
    lists are related to love and nature. Of course, we might still end up with some
    silly poetry, but that’s just as fun!
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The idea of this program is adapted from Daniel Watt’s* Learning with Logo
    *(McGraw-Hill, 1983).*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 16-1](ch16.html#ch16fig1) shows the user interface for the application.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f16-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 16-1: The user interface for* Poet.sb'
  prefs: []
  type: TYPE_NORMAL
- en: 'Every time you click the New button, the poet recites a new poem. Each poem
    includes three lines that follow these patterns:'
  prefs: []
  type: TYPE_NORMAL
- en: '• Line 1: article, adjective, noun'
  prefs: []
  type: TYPE_NORMAL
- en: '• Line 2: article, noun, verb, preposition, article, adjective, noun'
  prefs: []
  type: TYPE_NORMAL
- en: '• Line 3: adjective, adjective, noun'
  prefs: []
  type: TYPE_NORMAL
- en: The following sections guide you through the creation of this program.
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 1: Open the Startup File***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Open the file *Poet_Incomplete.sb* from this chapter’s folder. The file contains
    one subroutine named `CreateLists()`, which creates the five lists you’ll need
    in this program. This subroutine was added to save you from having to type a whole
    bunch of words. This is what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The ellipses (`...`) take the place of the missing array elements, but you can
    see all these elements when you open the file. Note that the article array also
    includes other determiners, such as one, each, and every.
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 2: Set Up the Graphical User Interface***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add the code in [Listing 16-9](ch16.html#ch16ex9) to the beginning of the program
    file to set up the graphical user interface (GUI) and register the button’s event
    handler.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 16-9: Setting up the GUI*'
  prefs: []
  type: TYPE_NORMAL
- en: The program starts by initializing the graphics window (lines 1–7), drawing
    the background image (lines 9–10), and creating the New button (line 11). Next,
    it calls the `CreateLists()` subroutine to initialize the five indexed arrays
    (line 13). Then the program uses the `Array` object to get the number of items
    in each array and saves these values in lines 15–19\. This way, you can append
    more elements to the end of these arrays without affecting the rest of the program.
    For example, if you wanted to add a 73rd adjective, you could add `73=callipygous;`
    within the quotes at the end of the `adjectives` array line in the `CreateLists()`
    subroutine. Because line 16 in [Listing 16-9](ch16.html#ch16ex9) gets the count
    of the elements in that array, the new elements you add are automatically counted
    and randomly selected for the poem, just like the other elements.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the program registers a handler for the `ButtonClicked` event (line
    21) and calls the handler subroutine to display the first poem (line 22).
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 3: Respond to Button Clicks***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now you need to add the `OnButtonClicked()` subroutine, which is shown in [Listing
    16-10](ch16.html#ch16ex10).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 16-10: The* `OnButtonClicked()` *subroutine*'
  prefs: []
  type: TYPE_NORMAL
- en: This subroutine redraws the background image to clear the graphics window (line
    2). It then calls the three subroutines that author the three lines of the poem
    (lines 4–6) and draws these lines in the graphics window (lines 8–10). Next, you’ll
    add the three missing subroutines.
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 4: Write the Poem’s First Line***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The poem’s first line is written in this form: article, adjective, noun. Add
    the subroutine in [Listing 16-11](ch16.html#ch16ex11), which creates the poem’s
    first line and assigns it to the `poemLine1` variable.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 16-11: The* `MakeLine1()` *subroutine*'
  prefs: []
  type: TYPE_NORMAL
- en: The `MakeLine1()` subroutine selects three random words from the `article`,
    `adjective`, and `noun` arrays and stores the values in `art1`, `adj1`, and `noun1`
    (lines 2–4). It then fills `poemLine1` by appending these variables with a whitespace
    in between them (line 5).
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 5: Write the Poem’s Second and Third Lines***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `MakeLine2()` and `MakeLine3()` subroutines are very similar to the `MakeLine1()`
    subroutine. The second line takes this form: article, noun, verb, preposition,
    article, adjective, noun. The third line takes this form: adjective, adjective,
    noun. Create these subroutines on your own. If you get stuck, open the file *Poet.sb*
    to see how we wrote these subroutines. When you’re done, recite your favorite
    poem output to your family or friends, and see if they think you wrote it!'
  prefs: []
  type: TYPE_NORMAL
- en: '**TRY IT OUT 16-4**'
  prefs: []
  type: TYPE_NORMAL
- en: Run your poet program several times to see what a machine poet is capable of
    authoring. Come up with different poem patterns, and teach this poet how to create
    them. Then change the words to any words (and any amount of words) that you want!
    Head to *[http://tiny.cc/sbpoet/](http://tiny.cc/sbpoet/)* to share your poem
    program with the community and to see what others created.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The* `Array` *object includes three more methods that create a different type
    of array:* `SetValue()`, `GetValue()`, *and* `RemoveValue()`*. Although these
    methods work well, the bracketed style of array is more universal among programming
    languages and is the reason this book focuses on that style.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Programming Challenges**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you get stuck, check out *[http://nostarch.com/smallbasic/](http://nostarch.com/smallbasic/)*
    for the solutions and for more resources and review questions for teachers and
    students.
  prefs: []
  type: TYPE_NORMAL
- en: Write a program that keeps track of your friends’ phone numbers. Use an associative
    array that uses your friends’ names as keys; for example, `phone["Yoda"] = "555-1138"`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write a program that saves book information. The key is the ISBN of the book.
    For each book, you need to know the title, the author, and the publication year.
    Use three associative arrays: `title[ISBN]`, `author[ISBN]`, and `year[ISBN]`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the file *VirtualPiano.sb* from this chapter’s folder. The program implements
    a virtual piano using the keyboard. Explain how the program works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
