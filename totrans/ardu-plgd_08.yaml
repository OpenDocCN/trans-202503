- en: '**7'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A CUSTOM PH METER**
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Microcontrollers are used in many, if not most, commercial and scientific instruments.
    They are accurate and versatile, which makes them a relatively low-cost solution
    to a variety of measurement requirements. This project combines an Arduino microcontroller
    with a commercial probe and some analog circuitry to construct an accurate meter
    that measures *pH*, the relative acidity or alkalinity of a solution.
  prefs: []
  type: TYPE_NORMAL
- en: There are three basic ways of measuring pH. This project involves using a pH
    meter and probe. The other approaches are litmus paper indicators, which you might
    remember from high school chemistry, and colorimeters, the traditional swimming
    pool maintenance kit. The latter is usually a kit of chemical reagents with a
    comparison color chart. Of the three, a pH meter is by far the most accurate.
  prefs: []
  type: TYPE_NORMAL
- en: But what does pH measure, exactly? The pH value describes the activity of hydrogen
    ions in aqueous solutions. The higher the activity of hydrogen ions, the more
    acidic the solution is and the lower the pH is. Less activity of hydrogen ions
    (and greater activity of hydroxide ions) results in a higher pH.
  prefs: []
  type: TYPE_NORMAL
- en: The pH scale is logarithmic. A difference of one pH measurement unit represents
    a tenfold increase or reduction of hydrogen-ion activity in the solution. This
    explains how a solution’s aggressiveness rapidly increases with the distance from
    the neutral point on the pH scale.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 7-1](ch07.xhtml#ch07fig1) shows the finished Custom pH Meter, and if
    you wonder why measuring pH is useful, “[Why Measure pH?](ch07.xhtml#ch07note1)”
    on [page 187](ch07.xhtml#page_187) discusses several answers to that question.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-1: The Custom pH Meter in an actual measurement environment*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Why Build Your Own pH Meter?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Commercial pH meters run the gamut of prices from low-cost portable units under
    $60 to full-fledged laboratory instruments costing several hundred or several
    thousand dollars. Relatively low-cost pH meters can do the job, but all have drawbacks,
    such as marginal accuracy, relatively short lifetime, calibration issues, and
    consistency.
  prefs: []
  type: TYPE_NORMAL
- en: A variety of pH meter kits are also available, including many stamps, some designed
    for the Arduino. (A *stamp* is a small circuit board with the critical circuitry
    to perform some function, minus the processor.) I have not had a chance to sample
    these kits, but they tend to be pricey, running close to or over $100\. And they
    still require a power supply and packaging.
  prefs: []
  type: TYPE_NORMAL
- en: While this project doesn’t propose to offer a full-scale laboratory instrument,
    it provides a good, workable pH meter and gives a lot of insight into what actually
    comprises a pH meter. I’ve made every attempt to tune the circuit for optimal
    performance, but you may find further adjustment helpful, so if you want to try
    something different after seeing the circuit, go for it.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHY MEASURE pH?**'
  prefs: []
  type: TYPE_NORMAL
- en: In the past, pH was a relatively obscure measurement, confined to the laboratory
    bench and industrial environments (for quality control, process control, measuring
    and controlling waste effluents, and so on). However, more people have started
    using scientific measurement in areas that have traditionally relied on rote instructions
    or trial-and-error experimentation, like home winemaking and beer brewing, hydroponics,
    home agriculture, hydroculture, and baking. All of these applications can benefit
    from accurate pH measurement, and they don’t even include the more mundane task
    of managing the chemistry of your swimming pool, koi pond, fountain, or aquarium.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in baking, dough needs a low pH to rise. The pH of foods also
    impacts two of the four tastes: low-pH, or acidic, foods tend to taste sour, while
    higher-pH, or more alkaline, foods taste bitter. Lemon juice is an example of
    sour, and broccoli rabe or dark chocolate can be considered bitter. In home gardening,
    pH is an important soil characteristic for particular crops. Simple adjustments
    in pH can make aquarium water clear and reduce scum deposits on the glass sides,
    and a balanced pH in ponds keeps fish healthy and reduces algae. And the list
    goes on.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Required Tools**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Soldering iron and solder
  prefs: []
  type: TYPE_NORMAL
- en: Drill and drill bits
  prefs: []
  type: TYPE_NORMAL
- en: Keyhole saw
  prefs: []
  type: TYPE_NORMAL
- en: Center punch
  prefs: []
  type: TYPE_NORMAL
- en: File
  prefs: []
  type: TYPE_NORMAL
- en: 2-56 tap
  prefs: []
  type: TYPE_NORMAL
- en: Heat gun or hair dryer (for heat-shrink tubing)
  prefs: []
  type: TYPE_NORMAL
- en: '**Parts List**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You’ll need the following parts to build your Custom pH meter:'
  prefs: []
  type: TYPE_NORMAL
- en: One Deek-Robot Pro Mini Arduino clone (Other Arduinos should work with the project
    in general, but not with the shield template provided for this book. I used an
    Arduino Nano clone for the breadboard because of the built-in USB interface. In
    the completed unit, I switched to the Pro Mini to conserve space.)
  prefs: []
  type: TYPE_NORMAL
- en: One LM35 (D) temperature sensor
  prefs: []
  type: TYPE_NORMAL
- en: One Texas Instruments TL072 dual op-amp (The pinout is shown in [Figure 7-2](ch07.xhtml#ch07fig2).)
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-2: TL072 pinout*'
  prefs: []
  type: TYPE_NORMAL
- en: One 10-turn, 1-megaohm trimmer (R7)
  prefs: []
  type: TYPE_NORMAL
- en: One 10-turn, 10-kilohm trimmer (R4)
  prefs: []
  type: TYPE_NORMAL
- en: One BNC male connector
  prefs: []
  type: TYPE_NORMAL
- en: One LM7805 voltage regulator
  prefs: []
  type: TYPE_NORMAL
- en: One LMC7660 power inverter (The pinout is shown in [Figure 7-3](ch07.xhtml#ch07fig3).)
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-3: LMC7660 pinout*'
  prefs: []
  type: TYPE_NORMAL
- en: One 16×2 LCD
  prefs: []
  type: TYPE_NORMAL
- en: One I²C adapter, if not included with the LCD
  prefs: []
  type: TYPE_NORMAL
- en: One 5.1V Zener diode
  prefs: []
  type: TYPE_NORMAL
- en: One 1 μF ceramic capacitor (C2)
  prefs: []
  type: TYPE_NORMAL
- en: Five 0.1 μF ceramic capacitors (C1, C6, C7, C8, C9)
  prefs: []
  type: TYPE_NORMAL
- en: One 0.01 μF ceramic capacitor (C5)
  prefs: []
  type: TYPE_NORMAL
- en: One 22 μF tantalum capacitor (C10)
  prefs: []
  type: TYPE_NORMAL
- en: Two 10 μF tantalum capacitors (C3, C4)
  prefs: []
  type: TYPE_NORMAL
- en: One 10-kilohm, 1/8 W resistor (R5)
  prefs: []
  type: TYPE_NORMAL
- en: Three 10-kilohm, 1/8 W resistors (R1, R2, R10)
  prefs: []
  type: TYPE_NORMAL
- en: Two 1-kilohm, 1/8 W resistors (R8, R9)
  prefs: []
  type: TYPE_NORMAL
- en: One pH probe
  prefs: []
  type: TYPE_NORMAL
- en: Four 4-40×1/2-inch screws
  prefs: []
  type: TYPE_NORMAL
- en: Eight 4-40 nuts and washers
  prefs: []
  type: TYPE_NORMAL
- en: Four 2-56×1/2-inch screws
  prefs: []
  type: TYPE_NORMAL
- en: 28- or 30-gauge hookup wire
  prefs: []
  type: TYPE_NORMAL
- en: One Hammond 1591 BTCL plastic enclosure
  prefs: []
  type: TYPE_NORMAL
- en: Heat-shrink tubing
  prefs: []
  type: TYPE_NORMAL
- en: '**Downloads**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Sketch**   *pHMeter.ino*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cover template**   *pHCover.pdf*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Side template**   *pHBoxSide.pdf*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Shield**   *pHMeter.pcb*'
  prefs: []
  type: TYPE_NORMAL
- en: '**About the pH Probe**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the heart of the Custom pH Meter is a pH probe. This measures the activity
    of hydrogen ions in a solution, which in turn determines the acidity or alkalinity
    of that solution. A basic pH probe, like the one in [Figure 7-4](ch07.xhtml#ch07fig4),
    comprises two elements: a reference electrode and a measurement electrode. I won’t
    go into the chemistry of the probe or the exact mechanism of a pH probe’s operation,
    but I will describe its output and interface to the circuitry that provides the
    readout.'
  prefs: []
  type: TYPE_NORMAL
- en: A pH probe produces a voltage proportional to the pH of the solution the probe
    is immersed in. The pH range starts at 0, which is the most acidic, and goes up
    to 14, which is the most alkaline. The probe delivers an output voltage from approximately
    –420mV to +420mV, representing an increment of roughly 60mV per unit of pH. A
    neutral pH of 7.0, at mid-scale from 0 to 14, is represented by 0.0mV.
  prefs: []
  type: TYPE_NORMAL
- en: 'The nature of the probe’s output makes the Custom pH Meter’s basic function
    in this project relatively straightforward: it needs to read and display a voltage.
    But there are a few other things the Custom pH Meter circuit has to account for.
    First, while commercial probes are built to the highest standards, they can be
    off by some nominal amount and require adjustment. Second, we’re dealing with
    relatively small values, so to maintain accuracy, components and circuits have
    to be carefully selected. Further, as probes are used and age, they tend to change
    slightly, requiring recalibration.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-4: A simplified drawing of a pH probe*'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the pH probe has a very high electrical impedance—perhaps 10 to 100
    megaohms or higher. Practically speaking, a high impedance means that despite
    the voltage level, there is very little energy available to change the state or
    condition of another device, so the circuit needs to amplify that signal. This
    requires a specialized input circuit involving an op-amp, which is designed to
    minimize noise while handling the high-impedance signal. Today’s semiconductors
    are up to the task, and as I discuss in “[Some Notes on IC Selection](ch07.xhtml#ch07lev2sec4)”
    on [page 196](ch07.xhtml#page_196), I checked out several op-amps to find one
    that seemed to offer the best combination of performance and price. Of course,
    while a good op-amp is important, the circuitry feeding input to the op-amp must
    also be as efficient as possible to achieve an accurate reading without introducing
    noise that could affect the sensitive output of the pH probe.
  prefs: []
  type: TYPE_NORMAL
- en: '**TAKING CARE OF YOUR pH PROBE**'
  prefs: []
  type: TYPE_NORMAL
- en: While your pH probe probably came with instructions, there are a couple of things
    you can do to increase its useful life. First, of course, follow the manufacturer’s
    instructions. Second, unless the manufacturer specifies differently, when storing
    your probe, immerse the business end in a 3-molar solution of potassium chloride
    (KCl), as shown in [Figure 7-5](ch07.xhtml#ch07fig5). You should be able to buy
    such a solution wherever you purchase your pH buffer solutions at a very modest
    cost. (A *buffer solution* is a mix of relatively weak acidic and alkaline chemicals
    that produces a specific pH.) You can also compound your own by dissolving about
    22 g of KCl in 100 mL of distilled water.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-5: The pH probe I used for this project. The tip is protected in
    a small vial of KCl solution with a rubber seal*.'
  prefs: []
  type: TYPE_NORMAL
- en: Even for relatively short storage times, it is best to keep the probe in a pH
    7 buffer solution rather than in air or water. Between samples or when moving
    the probe to a different buffer solution, make sure to rinse the probe carefully.
    Most manufacturers suggest rinsing with distilled water. You can gently blot the
    excess water off the probe, but most manufacturers caution against rubbing or
    wiping the electrode bulb for fear of creating an error due to polarization.
  prefs: []
  type: TYPE_NORMAL
- en: When calibrating your probe prior to a measurement, the manufacturers of even
    top-of-the-line pH meters suggest calibrating with a buffer closest to the expected
    pH of the sample. For example, if you suspect the pH value of the sample to be
    around 9, use a pH 10 buffer solution to calibrate the instrument.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Schematic**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Custom pH Meter circuits shown in [Figures 7-6](ch07.xhtml#ch07fig6) and
    [7-7](ch07.xhtml#ch07fig7) comprises a dual op-amp, a voltage inverter to supply
    ±5V to the op-amp, a voltage regulator, a temperature IC, an Arduino, and an I²C
    LCD. You have the option to build your Custom pH Meter with an Arduino Nano or
    an Arduino Pro Mini. I had an easier time building the breadboard with a Nano,
    but my final product (and therefore, the shield PCB file provided for this chapter)
    uses the Pro Mini to conserve space.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of this section describes the reasoning behind the design decisions
    made in creating this schematic.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-6: The basic schematic for the Custom pH Meter, using an Arduino
    Nano*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-7: The basic schematic for the Custom pH Meter, using a Deek-Robot
    Pro Mini*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Integrating the High-Impedance Probe***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Recall that the pH probe delivers a DC output voltage that swings from –420mV
    to +420mV, giving approximately 60mV per unit of pH. This output is delivered
    at very high impedance, and the circuit must accept the probe’s high-impedance
    input without adding spurious signals, reduce the impedance to a manageable level,
    and amplify the input so it can be read by the analog inputs of the Arduino. The
    circuit also has to provide a way to adjust the voltage that goes to the display
    in order to calibrate the probe in terms of both offset and gain (see “[Offset
    and Gain](ch07.xhtml#ch07note2)” on [page 194](ch07.xhtml#page_194) for a crash
    course).
  prefs: []
  type: TYPE_NORMAL
- en: To handle the high-impedance probe output, the input of the op-amp must have
    a very high impedance, typically in the teraohm (1×10^(12) ohms) range, to read
    any voltage at all. The input of the op-amp must also have a low input current
    (the two go together); this is typically around 10 picoamps (1×10^(−12) amps),
    though some op-amps offer input current below 25 femtoamps (1×10^(−15) amps).
    It’s also good if the op-amp has very low *drift* (that is, tendency to change
    output with no change in input).
  prefs: []
  type: TYPE_NORMAL
- en: '***General Design Notes***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Custom pH Meter is designed to work from a power supply of 9V, selectable
    between a battery and a plug-in module via a power switch (see the schematics
    in [Figures 7-6](ch07.xhtml#ch07fig6) and [7-7](ch07.xhtml#ch07fig7)). Because
    the input from the AC source could be suspect, the Custom pH Meter uses an external
    voltage regulator rather than the regulator built into the Pro Mini. An LM7805
    with bypass capacitors at both the input and output worked well in previous projects,
    and this project uses the same regulator. This regulator supplies positive 5V
    to the inverter, the op-amp circuitry, and the Arduino. The power switch is a
    three-position switch, where the center is off, one position selects the battery,
    and the other selects AC power.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because the pH probe provides an output of ±420mV, this circuit has to be able
    to handle a *bipolar* (above and below ground) voltage. The simplest way to achieve
    that is to use an op-amp with positive and negative supplies and a ground in the
    middle, which in turn requires a power supply that can provide those voltages.
    The LMC7660 voltage inverter is the solution: it converts the positive 5V from
    the voltage regulator to +5V and –5V, with ground in the middle. Thus, the op-amp
    can handle the input signal as long as it doesn’t go above +5V or below –5V.'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Most voltage inverters are very similar to the LMC7660 and require minimal
    external components—in this case, only two capacitors. This circuit uses tantalum
    capacitors because of their compact size and reliability, but electrolytic capacitors
    could be used*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**OFFSET AND GAIN**'
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate how offset and gain work, [Figure 7-8](ch07.xhtml#ch07fig8) illustrates
    the continuum of voltage used in this project, from –5V to +5V.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-8: An illustration of what happens to the voltage when changing the
    gain and offset on the Custom pH Meter*'
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that when the voltage from the pH probe is amplified, there is a voltage
    range A. In this illustration, voltage A represents half the supply voltage, ranging
    from –2.5V to +2.5V for a total of 5V. If the gain is adjusted, the voltage range
    will still center on 0V but will increase or decrease to some voltage range B.
    Adjusting the gain will always increase or decrease the lower and higher ends
    of the selected voltage sector equally, provided the original sector is within
    the total voltage range.
  prefs: []
  type: TYPE_NORMAL
- en: The entire voltage sector can also be shifted within the continuum by adjusting
    the offset, as illustrated in [Figure 7-8](ch07.xhtml#ch07fig8). The range of
    voltage A2 still encompasses the same total voltage as range A, but its minimum
    and maximum voltages are different. In this instance, the center of the voltage
    range is shifted from 0V to 2.5V, such that voltage A2 swings from 0V to 5V.
  prefs: []
  type: TYPE_NORMAL
- en: This offset can be any voltage within the supply range, but in practice, it’s
    best not to run the voltage to the voltage rails (the maximum and minimum of the
    supply voltage). Instead, leave some buffer between the rails and the voltage
    range a project needs.
  prefs: []
  type: TYPE_NORMAL
- en: “[The Sketch](ch07.xhtml#ch07lev1sec11)” on [page 205](ch07.xhtml#page_205)
    shows that the Custom pH Meter maps the voltage within the limits of the supply
    to the Pro Mini (0V to +5V) to be an average of the gain selected. The final gain
    and offset adjustments for this project are made using the prepared buffer solutions
    and the potentiometers in the circuit.
  prefs: []
  type: TYPE_NORMAL
- en: The Custom pH Meter uses a Deek-Robot Pro Mini Arduino clone because this clone
    is small and inexpensive; however, a Nano could work if you make your own shield-printed
    circuit board. While the Pro Mini does not include a USB interface, there are
    a variety of ways to program it with little effort. See “[Connecting and Programming
    an Arduino Pro Mini](ch00.xhtml#ch00lev2sec4)” on [page 8](ch00.xhtml#page_8)
    if you’ve never used this particular Arduino before.
  prefs: []
  type: TYPE_NORMAL
- en: The I²C interface for the display comprises only two wires—clock and data—in
    addition to power and ground. The I²C protocol can also be used with several I²C
    devices at the same time, if required.
  prefs: []
  type: TYPE_NORMAL
- en: '***The Op-Amp Circuit in Detail***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the op-amp circuit, there are resistors and capacitors to minimize the effect
    of spurious signals and to couple the circuits. The amplifier circuit has two
    stages, which are both included in the single package of the opamp: the first
    handles the high impedance from the probe and offers gain adjustment, while the
    second is a buffer that provides the offset, both for calibration and to accommodate
    the 0 to +5V analog input required by the Arduino. Each stage has a 10-turn trimmer
    potentiometer. The trimmer in the first stage is 1 megaohm, and it sets the gain;
    the trimmer in the buffer stage is 10 kilohms, and it is used for the offset.'
  prefs: []
  type: TYPE_NORMAL
- en: The first stage provides most of the gain (the output is roughly six times the
    value of the input), which is adjustable via a negative feedback resistor (R2)
    and a potentiometer (R3). The adjustment range is a bit wider than required, but
    it works out quite well. Initially, I tightened up on the range but found that
    for some probes, a smaller range makes calibration difficult.
  prefs: []
  type: TYPE_NORMAL
- en: The second stage op-amp circuit uses a fixed feedback resistor of 10 kilohms
    (R5), while the noninverting input uses a combination of two resistors of 10 kilohms
    each (R1 and R2) and a 10-kilohm potentiometer (R4) to provide the offset adjustment.
    This stage provides a small amount of gain in addition to the offset adjustment
    to allow the pH probe voltage to center on 0mV (pH of 7) and swing between –420mV
    (pH of 0) and +420mV (pH of 14). In addition, this buffer stage changes the scale
    from a negative and positive voltage to a positive-only voltage for the Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: Using the buffer stage to both provide the calibration offset and convert the
    plus-minus voltage swing works out conveniently with little, if any, discernable
    downside. Optionally, a separate reference voltage could be generated, but that
    would add additional components and offers little advantage over offsetting the
    voltage from the buffer stage and referencing the voltage to ground.
  prefs: []
  type: TYPE_NORMAL
- en: At the output end of the buffer, a Zener diode (D1) and resistor (R9) are added
    to protect the Pro Mini from any overvoltage condition. No protection was added
    to protect against a negative voltage to the analog input pin; however, during
    initial setup and experimentation, the analog pin accidentally received a negative
    voltage many times with no adverse effects.
  prefs: []
  type: TYPE_NORMAL
- en: '***Some Notes on IC Selection***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Before settling on an IC for any project, it is a good idea to test multiple
    ICs to see which works best in your situation. When sampling chips, I suggest
    keeping notes on the pros and cons of each chip. For example, these are my notes
    on op-amp possibilities for the Custom pH Meter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TL072**   Worked well; a good all-around solution'
  prefs: []
  type: TYPE_NORMAL
- en: '**TLC2262**   A good all-around solution; a toss-up between this and the TL072'
  prefs: []
  type: TYPE_NORMAL
- en: '**OPA129**   Worked well, but not available in DIP'
  prefs: []
  type: TYPE_NORMAL
- en: '**LMC6001**   Worked well, but a little pricey for no advantage, at around
    $20'
  prefs: []
  type: TYPE_NORMAL
- en: '**LMC6042**   Probably would have worked, but was difficult to set up'
  prefs: []
  type: TYPE_NORMAL
- en: '**LMP7702**   Probably would have worked, but a little pricey and was difficult
    to set up'
  prefs: []
  type: TYPE_NORMAL
- en: After trying several op-amp circuits in the public domain with mostly disappointing
    results, I used a generalized circuit to test each of these op-amps in turn, and
    for each test, the circuit required a certain amount of tuning to work. This tuning
    included changing the circuitry to stabilize gain and minimize spurious signals
    and stray voltages. The Texas Instruments TL072P op-amp proved the best option,
    and once I made that selection, I adjusted the circuit further to optimize it
    for the Custom pH Meter. The TLC2262 also would have worked well; I used it in
    some prototype samples.
  prefs: []
  type: TYPE_NORMAL
- en: The other op-amps I sampled might have worked as well, or almost as well, if
    optimized like the TL072; however, that would have been time consuming for a marginal
    or zero gain. The final Custom pH Meter circuit represents a best effort within
    self-imposed limitations, like budget. For example, a top-shelf op-amp, like the
    Texas Instruments OPA627/637, probably would have worked well, but the chip alone
    had a price tag between $25 and $50, depending on the version. That would have
    brought the total budget for the project to well over $100, a self-imposed limit.
    The decision to continue the project itself was already problematic because of
    the probe’s cost ($36 at the time of writing); however, I believe the probe’s
    capabilities warrant the expense.
  prefs: []
  type: TYPE_NORMAL
- en: '**Preparing the LCD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before you build the circuit on a breadboard, make sure the LCD is prepared
    for prototyping. Though the LCD used in this project can be purchased with the
    I²C adapter board, I have often had to buy the LCD and the adapter board separately,
    as was the case this time. When you buy them separately, the adapter board usually
    comes with header pins installed, and all you should have to do is insert them
    into the display and solder them. “[Affixing the I²C Board to the LCD](ch00.xhtml#ch00lev1sec2)”
    on [page 3](ch00.xhtml#page_3) describes this process.
  prefs: []
  type: TYPE_NORMAL
- en: '**ON LCD BACKLIGHTS**'
  prefs: []
  type: TYPE_NORMAL
- en: When I initially wired the I²C board to the display board for the Custom pH
    Meter, I cut off the cathode (K) header terminal on the display board. The anode
    and cathode headers allow you to provide a voltage to power the display’s backlight.
    The idea behind severing the connection was to include a separate switch to turn
    the backlight on and off to preserve battery current. It turned out the display
    was not readable without the backlight except in extremely bright light, so I
    abandoned that effort and manually rewired the backlight. You can experiment with
    other displays to try to find an ambient-light readable display.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Breadboard**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like most of my Arduino projects, the Custom pH Meter began with a breadboard
    (see [Figure 7-9](ch07.xhtml#ch07fig9)). Despite the somewhat ragged appearance,
    the breadboard iteration worked well.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-9: This circuit on a breadboard served as a proof of concept for
    the Custom pH Meter*.'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the basic Custom pH Meter circuit, I added a separate circuit
    (visible in the upper-left area of the breadboard in [Figure 7-9](ch07.xhtml#ch07fig9))
    to supply a continuous, variable ±500mV test voltage so I could check the circuit
    and do some preliminary calibration prior to testing with the probe itself. This
    test circuit, shown in [Figure 7-10](ch07.xhtml#ch07fig10), comprises a separate
    voltage inverter, a pair of voltage dividers, and a potentiometer to vary the
    voltage. You may want to set up this small circuit on a separate breadboard and
    use it to do the preliminary adjustment of the finished unit.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-10: This circuit provided the test voltage for the Custom pH Meter*.'
  prefs: []
  type: TYPE_NORMAL
- en: In [Figure 7-9](ch07.xhtml#ch07fig9), the pH probe is held by an inexpensive
    burette clamp attached to an old machinist’s magnetic gauge holder. The probe
    was too thin to fit in the holder, so I wrapped some foam around the probe to
    clamp it.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing this breadboard turned out to be a little messier and more convoluted
    than usual because there’s a lot on the board. As shown in [Figure 7-9](ch07.xhtml#ch07fig9),
    I used a large breadboard that included four vertical breadboards and a strip
    across the top for positive and negative rails. Initially, I used an Arduino Nano
    clone to build the Custom pH Meter on the breadboard. In the finished version,
    however, I suggest using a Deek-Robot Pro Mini board to reduce the size. Both
    Arduinos use the same 5V, 16 MHz Atmel 328 processor and other components. In
    keeping with the requirement to have the shortest possible connection to the input
    of the op-amp, the BNC connector is situated to provide a relatively direct connection
    to the noninverting input of the op-amp. The voltage regulator, an LM7805, is
    located in the upper right of the breadboard and is powered with either a 9V alkaline
    battery or a 7.5V to 12V wall adapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps I took to construct the breadboard:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect all vertically oriented positive and negative rails (marked by red and
    blue stripes, respectively) to the horizontal positive and negative rails across
    the top of the breadboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mount the power inverter chip (LMC7660) on the upper-left side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Mount capacitor C3 (10 μF) between pins 2 and 4 of the LMC7660\. (Make sure
    to observe polarity: connect the positive side to pin 2 and the negative side
    to pin 4.)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Mount capacitor C4 (10 μF) between pin 5 of the LMC7660 and the blue negative
    rail. (Make sure to observe polarity: the plus side of the cap goes to the blue
    negative rail.)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect pin 3 of the LMC7660 to the blue negative rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect pin 8 of the LMC7660 to the red positive rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the voltage regulator (LM7805) into the right-hand section of the breadboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect pin 1 of the LM7805 to a blank row that will accept the incoming 9V
    or 7.5V voltage. (It can accept from +7V to +12V, as shown in the schematic.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect pin 2 of the LM7805 to the blue negative rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect pin 3 of the LM7805 to the red positive rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect capacitor C2 (1 μF) from pin 1 of the LM7805 to the blue negative rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect capacitor C1 (0.1 μF) from pin 3 to the blue negative rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the TL072 IC in the breadboard; I placed it in the second vertical section.
    Observe all antistatic precautions while handling the chip.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make the connections to the TL072 as short as possible to eliminate possible
    spurious signals.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect capacitor C5 (0.01 μF) from pin 8 of the TL072 to the blue negative
    rail. Make the connection as close to the chip as possible to minimize effects
    of spurious signals.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect pin 8 of the TL072 to the red positive rail (once again, using as short
    a jumper as possible).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect resistor R5 (47 kilohms) from pin 2 of the TL072 to the blue negative
    rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the center lead of the BNC input jack to pin 3 of the TL072 with as
    short a wire as possible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the ground of the BNC to the closest spot available on the blue negative
    rail. (I used a panel-mount BNC connector and screwed a piece of stiff wire to
    the flange so I could mount it very close.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect pin 4 of the TL072 to the negative voltage of the LMC7660 (pin 5).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert one lead of capacitor C6 (0.1 μF) to pin 4 of the TL072, as close to
    the chip as possible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the other end of capacitor C6 to the closest spot available on the blue
    negative rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the outside pins of potentiometer R7 (1 megaohm) between pins 1 and 2
    on the TL072.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert a short jumper from pin 2 to pin 3 of potentiometer R7\. The potentiometer
    will work with only the two pins (center and one end) used. For convention and
    stability, I usually connect the center to the pin not being varied.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert capacitor C7 (0.1 μF) from pin 1 to pin 2 of the TL072.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert resistor R8 (1 kilohm) from pin 1 to pin 6 of the TL072.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect one lead of capacitor C8 (0.1 μF) to pin 6 of the TL072 and the other
    lead of capacitor C8 to ground.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect resistor R10 (10 kilohms) between pins 6 and 7 of the TL072.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In an open area of the breadboard (as close to the TL072 as possible), insert
    potentiometer R4 (10 kilohms).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect one side of resistor R2 (10 kilohms) to pin 1 of potentiometer R4.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the other side of resistor R2 to negative 5V (pin 5 of the LMC7660).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect one side of resistor R1 (10 kilohms) to pin 3 of potentiometer R4.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the other side of resistor R1 to the red positive rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect pin 2 (the center pin or slider) of potentiometer R4 to pin 5 of the
    TL072.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect one lead of capacitor C9 (0.1 μF) to pin 5 of the TL072 (as close to
    the pin as possible) and the other lead to the blue negative rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the Arduino Nano into the breadboard. I placed it in the second row from
    the left toward the bottom of the board so the USB connection would be easily
    available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect 5V from the Nano (pin 27) to the red positive rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the ground of the Nano (pin 29) to the blue negative rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect one side of resistor R9 (1 kilohm) to pin 7 of the TL072.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the other side of resistor R9 to A0 (pin 26) of the Nano. You may have
    to identify a blank space on the breadboard and then use a jumper wire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the anode of the Zener diode (D1) to pin A0 on the Nano.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the cathode of the Zener diode to the blue negative rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the positive lead of capacitor C10 (22 μF) to A0 of the Nano.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the other lead of capacitor C10 to the blue negative rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make a four-wire cable for the LCD with wires for plus, minus, SDA, and SCL.
    (See “[Connectors Used in This Book](ch00.xhtml#ch00lev1sec6)” on [page 18](ch00.xhtml#page_18)
    if you’ve never made a cable.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the positive and negative wires of the LCD harness to the red positive
    and blue negative rails, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the SDA pin from the LCD to A4 (pin 22) of the Nano.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the SCL pin from the LCD to A5 (pin 21) of the Nano.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In [Figure 7-9](ch07.xhtml#ch07fig9), at the upper left of the board, you will
    see four resistors and a potentiometer on three wires. That’s the probe voltage
    simulator circuit in [Figure 7-10](ch07.xhtml#ch07fig10). To wire up the simulator
    circuit, make the following connections:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect the open end of resistor R5 (10 kilohms) to negative 5V (pin 5 of the
    LMC7660).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the open end of resistor R1 (10 kilohms) to the red positive rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the juncture of resistor R1 (10 kilohms) and resistor R2 (1 kilohm), connect
    pin 1 of potentiometer R3 (20 kilohms).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the juncture of trimmer R4 (1 kilohm) and resistor R5 (10 kilohms), connect
    pin 3 of the potentiometer R3 (20 kilohms).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the center lead (pin 2) of potentiometer R3 (20 kilohms) to pin 3 of
    the TL072.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The temperature sensor is not included in the breadboard.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, calibrate the Custom pH Meter. I suggest calibrating first with the
    simulator circuit and then with the actual probe, as described in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: '**Calibrating the Custom pH Meter**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Calibrating the Custom pH Meter for the first time may be a little trying, but
    it shouldn’t take long to get the hang of it, and it should work well afterward.
    First, set both the scale and offset potentiometers as close to the middle of
    their ranges as possible. Because pH 7 is neutral, start there, put the probe
    in the pH 7 solution, and adjust the offset until the display reads 7.00.
  prefs: []
  type: TYPE_NORMAL
- en: Next, clean the probe, place it in the pH 4 solution, and adjust the scale trimmer
    until the display reads 4.00\. After that, clean the probe again, and try the
    pH 7 solution again; the reading should remain close to center. If it is off center,
    then adjust the offset to exactly 7.0 again, and repeat the process. This time,
    it should require only a small adjustment to set the scale to pH 4.0\. Now, check
    the display with the probe in the pH 10 buffer solution, see how far off the reading
    is, and adjust the scale trimmer accordingly. Repeat this process until the readings
    match all three buffer solutions. (After about three or four tries, adjusting
    both scale and offset, I got it to line up perfectly.)
  prefs: []
  type: TYPE_NORMAL
- en: When you know the meter works, I suggest resetting it and calibrating it again
    for practice. I was able to do it quite a bit faster the second time, with only
    two repetitions. I rechecked my pH meter several times over a period of about
    three weeks, and it seemed to stay in calibration; you should have similar results.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*As a preliminary test, I also used the test voltage circuit in [Figure 7-10](ch07.xhtml#ch07fig10)
    to perform initial calibration. You will also need a digital voltmeter. I started
    with 0V and adjusted the offset potentiometer until the LCD showed a pH of 7\.
    Next, I adjusted the test voltage circuit to output 180mV on my digital voltmeter
    and turned the scale potentiometer until the LCD showed a pH of 10\. I then adjusted
    the test voltage to –180mV and adjusted the scale until the LCD showed a pH of
    4\. After only a couple of tries, I had good results, so I disconnected the test
    supply and replaced it with the probe. This time, I was able to calibrate the
    meter in only a single try*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When your meter is built and calibrated, try testing it on some common household
    products, like these:'
  prefs: []
  type: TYPE_NORMAL
- en: '• Coca-Cola Classic: pH 2.5'
  prefs: []
  type: TYPE_NORMAL
- en: '• Orange juice: pH 2.8'
  prefs: []
  type: TYPE_NORMAL
- en: '• Coffee: pH 5.0'
  prefs: []
  type: TYPE_NORMAL
- en: '• 5 percent ammonia solution: pH 11'
  prefs: []
  type: TYPE_NORMAL
- en: '• Clorox bleach: pH 11.9'
  prefs: []
  type: TYPE_NORMAL
- en: '**IN AN ANALOG FRAME OF MIND**'
  prefs: []
  type: TYPE_NORMAL
- en: Some of us dinosaurs still like analog readouts, and for those holdouts mired
    in the 20th century, I have included provisions in the schematics in [Figures
    7-6](ch07.xhtml#ch07fig6) and [7-7](ch07.xhtml#ch07fig7), the sketch, and the
    final shield PCB file for using an analog readout. This was a bit of an afterthought
    and it’s optional, so the series resistor for the meter is not included in the
    shield; however, the Pro Mini pin connections to the readout are. The single required
    resistor can be mounted on the rear of the meter movement. In [Figure 7-11](ch07.xhtml#ch07fig11),
    I simply connected the meter to the breadboard circuit.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-11: The Custom pH Meter breadboard circuit, with both the digital
    display and a 20 mA meter movement*'
  prefs: []
  type: TYPE_NORMAL
- en: I’ve collected analog meters and movements over the years; the meter pictured
    is a Simpson 20 mA meter movement. To drive the meter, I simply used the PWM (pulse-width
    modulation) output from pins 5 and 6 on the Pro Mini, hooked directly to the meter
    with a resistor in series. In the sketch, I centered the meter on 0V so it uses
    a positive and negative voltage.
  prefs: []
  type: TYPE_NORMAL
- en: I ended up using a variable resistor to set the analog meter’s minimum and maximum
    to –420mV and +420mV, respectively. This eliminated the problem of attempting
    to set the gain and offset to match the digital readout. However, that in no way
    affects the accuracy of either readout, and the digital and analog readouts match.
    They also track identically through the entire pH range.
  prefs: []
  type: TYPE_NORMAL
- en: For many meters, the case can be removed to easily place a different scale,
    as has been done in [Figure 7-11](ch07.xhtml#ch07fig11). The face on this project’s
    meter was prepared with a laser printer to make the scale reflect pH value and
    show an mV scale for reference. A nice scale can be made using a drawing program
    such as Corel Draw or Adobe Illustrator, and you can purchase full sheets of adhesive-backed
    label stock to adhere it to the original meter plate. Just be careful not to damage
    the needle or movement in the process.
  prefs: []
  type: TYPE_NORMAL
- en: '**About the Effects of Temperature**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Thus far, I have not addressed the issue of temperature, but a solution’s pH
    value is temperature-dependent, as illustrated in [Figure 7-12](ch07.xhtml#ch07fig12).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-12: How pH varies with temperature*'
  prefs: []
  type: TYPE_NORMAL
- en: The effect of temperature on pH at or around room temperature (25°C) is nominal.
    In fact, according to the chart, the difference in pH from 25°C to 0°C would measure
    as little as half a pH unit at both pH extremes. At 100°C, however, the difference
    is more pronounced and could be as much as 1.5 pH units.
  prefs: []
  type: TYPE_NORMAL
- en: Given that information, the question becomes exactly how to handle the effect
    of temperature on pH.
  prefs: []
  type: TYPE_NORMAL
- en: '***Adding a Temperature Sensor***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The first step to address the effects of temperature is to include a temperature
    sensor in the circuit so the Custom pH Meter knows what the temperature is. One
    of the easiest and most widely used temperature sensors in Arduino land is the
    LM35, which according to the data sheet outputs a linear 10mV/°C at 25°C, with
    half-degree accuracy. You can see this sensor in the schematics in [Figures 7-6](ch07.xhtml#ch07fig6)
    and [7-7](ch07.xhtml#ch07fig7).
  prefs: []
  type: TYPE_NORMAL
- en: I hooked up the chip and included it in the sketch, but I was somewhat concerned
    about the accuracy. Unfortunately, I didn’t have a National Institute of Standards
    and Technology (NIST) temperature standard to go by, so I compared the Arduino
    sensor readings to a glass scientific thermometer, a bimetal dial thermometer,
    and a Radio Shack digital thermometer. None of these agreed with each other or
    the Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: '***Checking Accuracy***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The obvious way to calibrate the temperature sensor was to check it against
    two temperature values I really knew: the freezing and boiling point (at sea level)
    of distilled water. Because I live about 12 feet above sea level, the altitude
    would not be a problem. The result of my ice water and boiling tests indicated
    that the sensor was indeed off by about 2 percent. This was probably due to something
    in the external circuitry, such as the reference voltage, and is compensated for
    in the sketch. The temperature IC and connections were protected in a heat-shrink
    tube to eliminate any moisture getting to the connections, as described in “[Construction](ch07.xhtml#ch07lev1sec13)”
    on [page 211](ch07.xhtml#page_211).'
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the manufacturer for the glass electrode I used in this project,
    the error caused by temperature can be calculated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Error in pH = 0.003 × (Calibrated temperature − Current temperature) × (Neutral
    pH − Actual pH)
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if the electrode is calibrated at room temperature (25°C) and
    is measuring a sample around pH 4 at around 5°C, you would calculate the error
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Calculate the temperature difference: 25°C – 5°C = 20°C'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Calculate how far away from neutral the pH is: 7 pH – 4 pH = 3 pH'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The total error is: 0.003 × 20 × 3 = 0.18 pH.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As of this writing, I have not attempted to integrate the temperature reading
    into the sketch to adjust the pH automatically. The Custom pH Meter does, however,
    display the temperature on the LCD, so you can decide whether or not it’s worth
    adjusting. As you can see in [Figure 7-12](ch07.xhtml#ch07fig12), the effect is
    minimal and can easily be approximated from the chart or calculated with tests
    similar to mine.
  prefs: []
  type: TYPE_NORMAL
- en: Chances are that most of your measurements will be at or near room temperature.
    Temperature compensation is generally required only in severe environmental and
    industrial environments. If you are taking pH readings at extreme temperatures,
    you may want to include the formula in your sketch.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you’re curious, you can read more about how to compensate for pH probe
    reading errors due to temperature at* [http://www.qclscientific.com/electrochem/phtemp%20comp.html](http://www.qclscientific.com/electrochem/phtemp%20comp.html).'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Sketch**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Custom pH Meter sketch, like many others in this book, comprises parts of
    other sketches and examples. I’ve included comments throughout that describe how
    the most significant pieces work. This unit was tested on and used with the Arduino
    IDE version 1.0.5-r2.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The basic pH measurement functionality is straightforward: it reads an analog
    value from the analog output of the op-amp circuitry and feeds that value to an
    analog input pin of the Pro Mini. The pH and temperature are read every time the
    main loop runs and then stored in `pHvalue` and `tempC`, respectively. My first
    version of the sketch printed these directly to the LCD.'
  prefs: []
  type: TYPE_NORMAL
- en: But when I laid out the circuit on the breadboard and adjusted the components,
    I noticed that the output was a little jumpy. The pH value jumped around by two
    or three tenths of a pH unit, plus or minus some core value. For example, the
    reading might fluctuate from a pH of 4 to 4.1, then to 3.9 and back to 4.
  prefs: []
  type: TYPE_NORMAL
- en: '***Smoothing the pH and Temperature Output***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: I went back to the drawing board. I played with the circuit, trying to find
    where the jumpiness was coming from, and failed to nail it down. Then, because
    the pH was unlikely to change quickly, I decided to average a few readings. While
    that stabilized the reading, the drawback was that the more samples I took, the
    slower the reading.
  prefs: []
  type: TYPE_NORMAL
- en: However, I didn’t think that was a problem, as some expensive commercial pH
    meters I’ve used took some time to stabilize, very likely for the same reason.
    But there was still room for improvement.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, there is a useful sketch on the Arduino website written by David
    Mellis and subsequently modified by Tom Igoe that uses an array to smooth a signal.
    (You can see the original sketch in full at *[https://www.arduino.cc/en/Tutorial/Smoothing/](https://www.arduino.cc/en/Tutorial/Smoothing/)*.)
    I used this example as a model to smooth out the pH voltage in this project’s
    sketch. I experimented with several different values and found that somewhere
    between 5 and 10 samples worked well. I set `numReadings` equal to 10, and that
    resulted in a minimal drag on stabilization period, smoothing things out fairly
    well. The sketch shown in this book stores the result after smoothing in the `average`
    variable, which is printed to the LCD at the end of the main loop. In addition,
    I continued to fine-tune the circuit, so the sketch required less and less averaging.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that the same smoothing technique has been employed in the part of the
    sketch that handles input from the temperature-sensing circuit. (The `average2`
    variable contains the smoothed temperature reading result.) This was necessary
    for the same reason smoothing was needed for the pH voltage: even the temperature
    sensor output was a bit jittery. My first suspicion was that perhaps the Arduino
    Pro Mini and its voltage reference was causing hiccups in both the pH and temperature
    voltages. However, I hooked the temperature sensor directly up to my multimeter
    with a well-filtered power supply and experienced the same disruptions. In the
    end, the smoothing approach solved the problem.'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*While the smoothing approach used in this sketch worked well, that isn’t the
    only approach you could take. For example, a moving average approach could also
    work well*.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Centering an Analog Meter***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you choose to use an analog meter, the Arduino will need to drive the positive
    and negative sides of the meter. The sketch maps the meter drive to reverse the
    PWM values on two pins as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: To obtain `meterdrive1`, the average value (the average of pH values measured)
    is mapped from 0 to 14, while `meterdrive2` is the same average value mapped from
    14 to 0\. Both mappings use the `map()` function from Arduino’s preloaded libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `map()` function is a useful tool that lets you map a number from one range
    to another. The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `map()` function can be used to shift a set of values or, as in this case,
    to reverse the values going from 0, 14 and from 14, 0\. If you want to use an
    analog meter and don’t want to reset the indicator to the center, you can simply
    use either output pin 5 or pin 6 (leave the one you don’t use open) and change
    the value of the resistor to result in a correct reading.
  prefs: []
  type: TYPE_NORMAL
- en: '**A NOTE ON SIGNIFICANT FIGURES**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following line of code prints the pH to the LCD, showing two decimal places:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: An earlier draft of the sketch called `lcd.print(average,1)` instead, showing
    only one decimal place, but when I was trying to minimize the jitter on the Custom
    pH Meter, I changed the display code to include two decimal places for finer granulation.
    For the most part, the pH reading remained extremely stable even to the second
    decimal place.
  prefs: []
  type: TYPE_NORMAL
- en: In the final sketch, I kept two decimal places, but to be honest, I’m not sure
    how meaningful or accurate the second decimal place is. It has a slight tendency
    to drift as the probe sits in the solution, which I believe is normal. I dutifully
    researched and learned a lot more about *significant figures* (the digits in a
    measurement that actually have meaning) than I ever wanted to know, but I was
    still left without a definitive answer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the bottom line: all of the literature I perused regarding pH discussed
    pH in terms of integers—or at best, to the tenths position. Only in some references
    to scientific and industrial applications was the hundredths position even used
    at all.'
  prefs: []
  type: TYPE_NORMAL
- en: For most practical applications, you can change the sketch to use a single significant
    digit if you prefer. I do also strongly recommend that you use only a single significant
    digit during preliminary calibration, as the additional digit could be confusing.
    If you must (as much for ego as anything), you can put the second significant
    digit back, but know that its accuracy is suspect and, in my experience, it doesn’t
    really buy you anything.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Shield**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Custom pH Meter shield, shown in [Figure 7-13](ch07.xhtml#ch07fig13), is
    designed to minimize noise from the pH probe to the input. The Pro Mini and the
    LCD in this project can generate a little electrical noise; thus, all of the active
    analog input components are at one end of the PCB, while the Pro Mini and interface
    to the display are at the opposite end of the board. The inverter IC and associated
    components are located under the Pro Mini to conserve space.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-13: The shield PCB has headers soldered in place only for the pins
    this project uses on the Pro Mini. The voltage inverter and capacitors are located
    under where the Pro Mini will plug in*.'
  prefs: []
  type: TYPE_NORMAL
- en: For this project, I decided to use a double-sided circuit board. This made the
    PCB layout a lot simpler than trying to squeeze everything on one side, and it
    allowed the amplifier, buffer stage IC, and associated components to be arranged
    in close proximity. You can see the layout file for this shield, which you can
    download with the rest of this book’s resource files, in [Figure 7-14](ch07.xhtml#ch07fig14).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-14: The top traces in the shield layout are the darkest, the bottom
    traces are second darkest, and the silkscreen layer is the lightest. Notice that
    the silkscreen layer shows boxes around various components*.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 7-15](ch07.xhtml#ch07fig15) shows the completed printed circuit board
    before and after population. When populating this board, make sure to take precautions
    to prevent static electricity damage to the TL072\. Because of this chip’s very
    high input impedance, it is particularly sensitive to static discharge from handling.
    I used a socket to hold the op-amp so in case it got damaged, replacing it would
    not be a major job.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-15: The shield PCB before and after population. The voltage inverter
    and associated components are under the Pro Mini. The populated version is shown
    with the display connected*.'
  prefs: []
  type: TYPE_NORMAL
- en: Also note that many resistors on this PCB are mounted vertically to save space
    and reduce lead length and circuit-board-trace lengths. I used 0.100-inch female
    headers to mount the Pro Mini, which leaves plenty of room for the components
    underneath. It is not necessary to fully populate the board with headers to fit
    all the Pro Mini’s pins; you just need enough to mechanically support the Pro
    Mini and provide the necessary electrical connections. I found it helpful to place
    headers at the very end of at least one side to align the pins and simplify my
    aim when plugging in the Pro Mini board.
  prefs: []
  type: TYPE_NORMAL
- en: '**Construction**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be sure the sketch is loaded onto the Arduino, and solder all components to
    your PCB now, including wires for power and ground and for the jack for the (optional)
    temperature sensor. Place the op-amp into its socket now as well, but bend pin
    3 of the op-amp so that it sticks out. You will need to be able to access pin
    3 in a later stage of the construction process.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the Custom pH Meter circuit is soldered and the sketch is loaded onto
    the Arduino, only one step remains in terms of actual construction: putting everything
    inside a protective box. This section describes some suggestions for an enclosure
    and for how to mount the circuit board inside. [Figure 7-16](ch07.xhtml#ch07fig16)
    shows the finished enclosure.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-16: The finished Custom pH Meter in the enclosure. This close-up
    illustrates the positioning of the holes for the offset (labeled* Ofst) *and gain
    (labeled* Scale) *calibration adjustments*.'
  prefs: []
  type: TYPE_NORMAL
- en: '***The Custom pH Meter Enclosure***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Your choice of enclosure will depend on how you want to use the Custom pH Meter,
    whether or not you elect to include an analog meter, and the level of portability
    required. I selected a standard ABS clear plastic box with outside measurements
    of approximately 1.3×2.45×4.4 inches. The space was somewhat tighter than I planned,
    but I was able to squeeze in the printed circuit board, display, switch, connectors,
    and battery.
  prefs: []
  type: TYPE_NORMAL
- en: '**Making Room for the Display**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This project’s enclosure is a Hammond Manufacturing case, model 1591 BTCL. [Figure
    7-17](ch07.xhtml#ch07fig17) shows a drawing of the top of the plastic box, marked
    with lines for cutting the display hole and drilling the mounting holes.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-17: Template for the cover of the enclosure, showing an opening for
    the 16×2 display (shaded area) and where to drill mounting holes*'
  prefs: []
  type: TYPE_NORMAL
- en: You can download this drawing with this book’s resource files (see *[https://www.nostarch.com/arduinoplayground/](https://www.nostarch.com/arduinoplayground/)*)
    and use it as a template for center punching the holes.
  prefs: []
  type: TYPE_NORMAL
- en: 'I needed as much vertical room as possible inside the enclosure to accommodate
    the battery, so cutting out the top of the enclosure was necessary. Be careful,
    though: some displays have slightly different footprints, so measure yours and
    check it against the drawing first. If there’s a discrepancy, adjust the measurements.'
  prefs: []
  type: TYPE_NORMAL
- en: The ABS plastic the enclosure is made of cuts easily, so cutting out the display
    hole shouldn’t pose any major problems. Before you get started, clamp the enclosure
    securely to a piece of scrap wood attached to a workbench or table.
  prefs: []
  type: TYPE_NORMAL
- en: '**WARNING**'
  prefs: []
  type: TYPE_NORMAL
- en: '*When you use a relatively large bit to drill into a thin layer of ABS plastic,
    the bit will tend to grab the plastic. Do not hold the enclosure by hand*.'
  prefs: []
  type: TYPE_NORMAL
- en: To follow this template, first drill the two big holes in the opposing corners
    of the display area, using the punch marks as centers. I found 1/2 inches to be
    a good size for these holes, but just make them big enough to accommodate the
    saw blade you’re going to use to make the cutout. You may want to drill the centers
    of the 1/2-inch holes with a smaller drill first to make sure they are on center.
    Then, use a keyhole saw to cut out the smaller rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make sure there is enough room for the battery, I suggest mounting the display
    off center, as shown in [Figure 7-16](ch07.xhtml#ch07fig16), with the measurements
    indicated in [Figure 7-17](ch07.xhtml#ch07fig17). When your display hole is cut,
    drill the smaller holes for mounting the LCD with a #30 or 1/8-inch drill to accommodate
    the 4-40 screws.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Drilling Holes for Other Hardware**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Once the top is prepared, drill holes for the BNC connector (A), on/off switch
    (B), power input switch (C), and optional temperature jack (D) in the two smaller
    sides of the main body of the case, according to the template in [Figure 7-18](ch07.xhtml#ch07fig18).
    The hole for the BNC connector is 3/8 inches, while the holes for the switches
    and the temperature jack are all 1/4 inches.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-18: Approximate layout for the holes for the BNC connector (A) on
    the left side of the enclosure, and the on/off switch (B), battery/AC switch (C),
    and optional 3.5 mm temperature sensor input jack (D) on the right side*.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Mounting the Circuit Board***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Finally, choose where to mount the printed circuit board to the inside of the
    case. For both pH meters that I made, I held a nonpopulated shield PCB inside
    the case and marked the locations of the four mounting holes on the plastic; you
    can use a printout of the board layout in this book’s resource files as a pattern
    if you prefer. With your four holes marked, gently center punch and drill them.
    Be careful not to crack the plastic enclosure, and make sure they line up with
    the mounting holes indicated on the PCB. I suggest using a #41 drill bit (about
    3/32 inches) to drill these holes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you use the shield design included with this book, you may also need to
    drill the circuit board’s mounting holes to the correct size. Conventional manufacturing
    practice would advise using a spacer, screw, and nut to hold the board inside
    the enclosure, but instead, I drilled and tapped the circuit board itself. I used
    a #50 bit to drill the circuit board in all four corners and tapped it with a
    2-56 tap. I then used 2-56 screws to fasten the board in place. While this may
    not be a recommended practice for all applications, the board was light enough
    that it worked out well.'
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, I would not expect a finished pH meter to be subjected to much
    physical punishment. With that in mind, I just put a strip of foam on the noncomponent
    side of the board and screwed the board to the side of the case—but not too hard.
    If you expect the unit to experience repeated and extreme vibration, you can put
    a dab of Thread-Lok or another anaerobic adhesive on the screw threads before
    assembly.
  prefs: []
  type: TYPE_NORMAL
- en: Once the board is mounted, mark the access holes for the gain and offset trimmers.
    Place the cover on the enclosure, look straight down through the cover, and use
    a Sharpie marker to mark the locations of the two trimmer access holes. Remove
    the top from the enclosure, and drill 1/4-inch holes corresponding to the screw
    heads on the trimmers (see [Figure 7-16](ch07.xhtml#ch07fig16)).
  prefs: []
  type: TYPE_NORMAL
- en: '***Installing the Other Hardware***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now you can install the BNC connector, on/off switch, power switch, and (optional)
    temperature jack. I found it easiest to mount the switches and jack inside the
    enclosure first and solder the wires to them later. The same technique works well
    with the BNC connector, though you may wish to solder the ground wire beforehand.
    I took a piece of 22-gauge solid wire, wrapped it three-quarters of a turn around
    the base of the connector, tightened it with the retaining nut, and soldered it
    to a ground tap on the PCB (see [Figure 7-13](ch07.xhtml#ch07fig13)).
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*While I did not bring out the signals for the analog meter for my personal
    build, if you build the shield, you’ll see the two connections marked with a small
    box around them*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Connecting the Probe to the Op-Amp**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: “[Integrating the High-Impedance Probe](ch07.xhtml#ch07lev2sec1)” on [page 193](ch07.xhtml#page_193)
    describes special considerations required for using the pH probe as an input to
    the Custom pH Meter. It turns out that even high-quality FR-4 circuit board material
    can cause some current leakage, from dirt or moisture on the surface or other
    contamination. To minimize leakage, connect the input from the IC directly to
    the probe. In order to do this, place the IC in close physical proximity to the
    BNC connector inside the case. Then, instead of soldering pin 3 of the op-amp
    to the board or plugging that pin into a socket, bend it out and wire it directly
    to the BNC connector (see [Figure 7-19](ch07.xhtml#ch07fig19)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-19: To minimize spurious signals, the connection from the BNC connector
    to the IC pin is soldered directly*.'
  prefs: []
  type: TYPE_NORMAL
- en: Because this is the only high-impedance part of the circuit, some other precautions
    mentioned in the op-amp’s data sheet (such as ground-isolation rings around the
    other inputs) are not required. However, this project’s shield PCB does keep critical
    traces as short as possible and places components in close proximity.
  prefs: []
  type: TYPE_NORMAL
- en: '**Connecting the Temperature Sensor**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: For the optional temperature sensor, you will need to mount a 3.5 mm three-conductor
    jack inside the enclosure; the drilling hole for this is marked D in [Figure 7-18](ch07.xhtml#ch07fig18).
    Wire this jack to the temperature IC connections on the PCB, which are the three
    holes between the display connections and regulator IC in [Figure 7-20](ch07.xhtml#ch07fig20).
    The sleeve of the connector is ground, the ring is positive, and the tip is the
    output of the temperature-sensing IC.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-20: The three connections for the temperature sensing IC are just
    above the word* Therm.'
  prefs: []
  type: TYPE_NORMAL
- en: You can protect the IC itself from liquid immersion by encapsulating it in a
    short length of heat-shrink tubing with sealant, as shown in [Figure 7-21](ch07.xhtml#ch07fig21).
    This heat-shrink tubing is readily available online. The sealant on the inside
    of the tubing should make a completely waterproof seal for the IC. To seal the
    IC, just insert it into the tubing and heat with a heat gun or a hair dryer on
    high heat until it is completely sealed.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f07-21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-21: This LM35 temperature IC is completely encapsulated in a short
    length of heat-shrink tubing with a sealant thermal gel. The thermal gel can barely
    be seen where the wires enter the tubing*.'
  prefs: []
  type: TYPE_NORMAL
- en: Once all hardware is mounted inside the enclosure and all components are soldered
    to the PCB, screw the LCD to the cover and close it all up to finish. You might
    also want to label your potentiometers and switches, as shown in [Figure 7-16](ch07.xhtml#ch07fig16),
    for ease of operation later.
  prefs: []
  type: TYPE_NORMAL
