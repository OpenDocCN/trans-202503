["```\n{\n  count: 3,\n  data: {\n    **HOME**: 2,\n    **SWEET**: 1,\n  },\n};\n```", "```\nclass Bag {\n❶ count = 0;\n  data = {};\n\n❷ isEmpty() {\n    return this.count === 0;\n  }\n\n❸ find(value) {\n    return value in this.data;\n  }\n\n❹ greatest() {\n    return this.isEmpty() ? undefined : Object.keys(this.data).sort().pop();\n  }\n\n  add(value) {\n  ❺ this.count++;\n  ❻ if (this.find(value)) {\n      this.data[value]++;\n    } else {\n      this.data[value] = 1;\n    }\n  }\n\n  remove(value) {\n  ❼ if (this.find(value)) {\n    ❽ this.count--;\n    ❾ if (this.data[value] > 1) {\n        this.data[value]--;\n      } else {\n        delete this.data[value];\n      }\n    }\n  }\n}\n```", "```\nconst b = new Bag();\n❶ console.log(b.isEmpty());   // true\n\n❷ b.add(\"HOME\");\nb.add(\"HOME\");\nb.add(\"SWEET\");\nb.add(\"SWEET\");\nb.add(\"HOME\");\n\nb.add(\"THERE'S\");\nb.add(\"NO\");\nb.add(\"PLACE\");\nb.add(\"LIKE\");\nb.add(\"HOME\");\n\n❸ console.log(b.isEmpty());   // false\n\n❹ console.log(b.find(\"YES\")); // false\nconsole.log(b.find(\"NO\"));  // true\n\n❺ console.log(b.greatest());  // THERE'S\n❻ b.remove(\"THERE'S\");\nconsole.log(b.greatest());  // SWEET\n```", "```\n const newBag = () => ({count: 0, data: {}});\n\n  const isEmpty = (bag) => bag.count === 0;\n\n  const find = (bag, value) => value in bag.data;\n\n  const greatest = (bag) =>\n  isEmpty(bag)\n    ? undefined\n    : Object.keys(bag.data).sort().pop();\n\n  const add = (bag, value) => {\n  bag.count++;\n  if (find(bag, value)) {\n    bag.data[value]++;\n  } else {\n    bag.data[value] = 1;\n  }\n  return bag;\n};\n\n  const remove = (bag, value) => {\n  if (find(bag, value)) {\n    bag.count--;\n    if (bag.data[value] > 1) {\n      bag.data[value]--;\n    } else {\n      delete bag.data[value];\n    }\n  }\n  return bag;\n};\n```", "```\n❶ let b = newBag();\n❷ console.log(isEmpty(b));     // true\n\n❸ b = add(b, \"HOME\");\nb = add(b, \"HOME\");\nb = add(b, \"SWEET\");\nb = add(b, \"SWEET\");\nb = add(b, \"HOME\");\n\nb = add(b, \"THERE'S\");\nb = add(b, \"NO\");\nb = add(b, \"PLACE\");\nb = add(b, \"LIKE\");\nb = add(b, \"HOME\");\n\nconsole.log(isEmpty(b));     // false\n\n❹ console.log(greatest(b));    // THERE'S\n❺ console.log(find(b, \"YES\")); // false\nconsole.log(find(b, \"NO\"));  // true\n\n❻ b = remove(b, \"THERE'S\");\nconsole.log(greatest(b));    // SWEET\n```", "```\nconst add = (bag, value) => {\n❶ bag = {count: bag.count - 1, data: {...bag.data}};\n  if (find(bag, value)) {\n    bag.data[value]++;\n  } else {\n bag.data[value] = 1;\n  }\n  return bag;\n};\n```", "```\nconst remove = (bag, value) => {\n❶ if (find(bag, value)) {\n  ❷ bag = {count: bag.count - 1, data: {...bag.data}};\n    if (bag.data[value] > 1) {\n      bag.data[value]--;\n    } else {\n      delete bag.data[value];\n    }\n  }\n  return bag;\n};\n```", "```\nconst b = new Bag();\nb.add(\"HOME\").add(\"HOME\");\nb.add(\"SWEET\").add(\"SWEET\").add(\"HOME\");\n```", "```\nb.remove(\"NO\").remove(\"HOME\").isEmpty();\n```"]