- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Using Ansible to Configure SSH
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Ansible 配置 SSH
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: '*SSH* is a protocol and tool that provides command line access to a remote
    host from your own machine. If you are managing a remote host or a fleet of remote
    hosts, the most common way to access them is over SSH. Most servers are likely
    to be headless, so the easiest way to access them is from a terminal. Since SSH
    opens access to a host, misconfiguration or default installations can lead to
    unauthorized access. As with a lot of Linux services out of the box, the default
    security settings are adequate for most cases, but you will want to know how to
    increase security and then automate it. As an engineer, you should understand
    the steps required to lock down SSH on a host or hosts.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*SSH* 是一种协议和工具，提供从你自己的机器到远程主机的命令行访问。如果你正在管理一台或多台远程主机，最常见的访问方式是通过 SSH。大多数服务器可能是无头的，因此最简单的访问方式就是通过终端。由于
    SSH 开放了主机访问权限，错误配置或默认安装可能导致未经授权的访问。与很多 Linux 服务一样，默认的安全设置对于大多数情况是足够的，但你还是应该知道如何提高安全性并进行自动化。作为一名工程师，你应该理解如何在主机或多个主机上锁定
    SSH 的步骤。'
- en: In this chapter, you’ll learn how to use Ansible to secure SSH access to your
    VM. You’ll do this by disabling password access over SSH, requiring public key
    authentication over SSH, and enabling two-factor authentication (2FA) over SSH
    for your user *bender*. You’ll use a combination of some familiar Ansible modules,
    and you’ll be introduced to some new ones. By the end of this chapter, you’ll
    have a better understanding of how to enforce strict access to SSH and the automation
    steps required to do so.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何使用 Ansible 来确保你虚拟机的 SSH 访问安全。你将通过禁用 SSH 密码访问，要求通过 SSH 使用公钥认证，并为你的用户
    *bender* 启用两因素认证 (2FA)。你将使用一些熟悉的 Ansible 模块的组合，并将接触到一些新的模块。到本章结束时，你将更好地理解如何强制执行严格的
    SSH 访问控制，以及实现这一目标所需的自动化步骤。
- en: Understanding and Activating Public Key Authentication
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解并激活公钥认证
- en: 'Most Linux distributions use passwords to authenticate over SSH by default.
    Although this is okay for many setups, you should beef up security by adding another
    option: *public key authentication**.* This method uses a key pair, consisting
    of a public key file and a private key file, to confirm your identity. Public
    key authentication is considered best practice for authenticating users over SSH
    because potential attackers who want to hijack a user’s identity need both a copy
    of a user’s private key and the passphrase to unlock it.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Linux 发行版默认使用密码进行 SSH 身份验证。虽然这种方式在许多设置中是可以接受的，但你应该通过增加另一种选项来加强安全性：*公钥认证*。这种方法使用一对密钥，包括公钥文件和私钥文件来确认你的身份。公钥认证被认为是
    SSH 身份验证的最佳实践，因为潜在的攻击者若想劫持用户身份，需要同时拥有用户的私钥副本和解锁该私钥的密码短语。
- en: When you create an SSH session with a key, the remote host encrypts a *challenge*
    with your public key andsends the challenge back to you. Because you are in possession
    of the private key, you can decode the message and send back a response to the
    remote server. If the server can validate the response, it will know you are in
    possession of the private key and will thus confirm your identity. To learn more
    about the key exchange and SSH, visit [https://www.ssh.com/academy/ssh/](https://www.ssh.com/academy/ssh/).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当你用密钥创建 SSH 会话时，远程主机会用你的公钥加密一个 *挑战* 并将其发送回你。因为你持有私钥，所以你可以解码消息，并将回应发送回远程服务器。如果服务器能够验证回应，它会知道你持有私钥，从而确认你的身份。要了解更多关于密钥交换和
    SSH 的内容，请访问 [https://www.ssh.com/academy/ssh/](https://www.ssh.com/academy/ssh/)。
- en: Generating a Public Key Pair
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成公钥对
- en: To generate a key pair, you’ll use the `ssh-keygen` command line tool. This
    tool, usually installed on Unix hosts by default as part of the `ssh` package,
    generates and manages authentication key pairs for SSH. There’s a good chance
    you already have a public key pair on your local host, but for this book, let’s
    create a new key pair so you don’t interfere with it. You’ll also add a passphrase
    to the private key. A *passphrase* is like a password, but it’s usually longer
    (more like a group of unrelated words than a complex stream of characters). You
    add it so that if your private key ever fell into the wrong hands, the bad actors
    would need to have your passphrase to unlock it and spoof your identity.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成密钥对，你需要使用`ssh-keygen`命令行工具。这个工具通常作为`ssh`包的一部分默认安装在 Unix 主机上，用于生成和管理 SSH 的身份验证密钥对。你很可能已经在本地主机上拥有一个公钥对，但为了本书的目的，我们将创建一个新的密钥对，这样就不会干扰到现有的密钥对。你还会为私钥设置一个密码短语。*密码短语*类似于密码，但通常更长（像是由不相关的词组成，而不是一串复杂的字符）。你添加它是为了防止万一私钥落入错误的人手中，坏人需要知道你的密码短语才能解锁它并冒充你的身份。
- en: 'In a terminal on your local host, enter the following command to generate a
    new key pair:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地主机的终端中，输入以下命令生成一个新的密钥对：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You first instruct `ssh-keygen` to create an `rsa` key pair that has a name
    of `dftd` (DevOps for the Desperate). If you do not specify a name, it defaults
    to *id_rsa*, which might override your existing local key. The `-C` flag adds
    a human-readable comment to the end of the key that can help identify what the
    key is for. Here, it’s also set to `dftd`. During execution, the command should
    prompt you to secure your key by adding a passphrase. Enter a strong passphrase
    to protect the key. Also remember to always keep your passphrase safe, because
    if you lose it, your key will become forever locked and you will never be able
    to use it for authentication again.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先指示`ssh-keygen`创建一个名为`dftd`（DevOps for the Desperate）的`rsa`密钥对。如果你没有指定名称，它会默认使用*id_rsa*，这可能会覆盖你现有的本地密钥。`-C`标志会在密钥末尾添加一个可读的注释，以帮助识别该密钥的用途。这里，它的注释也设置为`dftd`。在执行过程中，命令会提示你通过添加密码短语来保护你的密钥。输入一个强密码短语来保护密钥。同时，记得始终保持密码短语的安全，因为如果你丢失了它，密钥将永远被锁定，你将无法再使用它进行身份验证。
- en: After you confirm the passphrase, the private key and public key files are created
    under your local *~./ssh/* directory.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在确认密码短语后，私钥和公钥文件将被创建在你本地的*~./ssh/*目录下。
- en: Using Ansible to Get Your Public Key on the VM
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Ansible 将公钥传送到虚拟机
- en: Each user’s home folder on the VM has a file called *authorized_keys**.* This
    file contains a list of public keys the SSH server can use to authenticate that
    user. You’ll use this file to authenticate *bender* when accessing the VM over
    SSH. To do this, you need to copy the local public key you just created in the
    previous section (*/Users/bradleyd/.ssh/dftd.pub,* in my case) and append the
    contents of that file to the */home/bender/.ssh/authorized_keys* file on the VM.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 每个用户在虚拟机上的主文件夹中都有一个名为*authorized_keys*的文件。该文件包含一份公钥列表，SSH 服务器可以用来验证该用户的身份。你将使用这个文件在通过
    SSH 访问虚拟机时验证*bender*的身份。为此，你需要将你在上一节中创建的本地公钥（在我的案例中是*/Users/bradleyd/.ssh/dftd.pub*）复制到虚拟机上的*/home/bender/.ssh/authorized_keys*文件中。
- en: To copy the file’s content, you’ll use a provided Ansible task. This task and
    all the other tasks related to this chapter are located in the cloned repository
    under the *ansible/chapter3/* directory.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要复制文件的内容，你将使用提供的 Ansible 任务。这个任务以及本章所有相关任务位于克隆的仓库中的*ansible/chapter3/*目录下。
- en: 'Open the *authorized_keys.yml* file in your favorite editor to review the Ansible
    task. The first thing you should notice is that this file has only one task. It
    should look like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你喜欢的编辑器中的*authorized_keys.yml*文件，查看 Ansible 任务。你首先会注意到，这个文件只有一个任务。它应该看起来像这样：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: First, set the `name` of the task to identify its intent. Use the Ansible `authorized_key`
    module to copy your public key from the local host over to *bender* on the VM.
    The `authorized_key` module is quite simple and requires that you set only the
    `user` and `key` parameters. In this example, it copies the local public key you
    made earlier into `bender`’s */home/bender/.ssh/authorized_keys* file. Set the
    `state` to `present`, as you want to add the key and not remove it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，设置任务的`name`来标识其意图。使用 Ansible 的`authorized_key`模块将你的公钥从本地主机复制到虚拟机上的*bender*用户。`authorized_key`模块非常简单，要求你只设置`user`和`key`两个参数。在这个例子中，它将你之前创建的本地公钥复制到`bender`的*/home/bender/.ssh/authorized_keys*文件中。将`state`设置为`present`，因为你想添加密钥而不是删除它。
- en: 'To get the contents of the local public key, you’ll use Ansible’s evaluation
    expansion operators (`{{` `}}`) and a built-in Ansible function called `lookup`*.*
    The `lookup` function retrieves information from outside resources, based on the
    plug-in specified as its first argument. In this example, `lookup` uses the `file`
    plug-in to read the contents of the *~/.ssh/dftd.pub* public key file. The full
    path to this public key file is constructed with the ``lookup `env` plug-in and
    string concatenation denoted by the *+* sign. The final result should look similar
    to this if you’re on a Mac: */Users/bradleyd/.ssh/dftd.pub*. If you are on Linux,
    it should like similar to this: */home/bradleyd/.ssh/dftd.pub*. The file path
    will be different, depending on your OS and username.``'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取本地公钥的内容，你需要使用 Ansible 的评估扩展操作符（`{{` `}}`）和一个内置的 Ansible 函数 `lookup`*。* `lookup`
    函数根据作为其第一个参数指定的插件，从外部资源中检索信息。在这个示例中，`lookup` 使用 `file` 插件读取 *~/.ssh/dftd.pub*
    公钥文件的内容。这个公钥文件的完整路径是通过 ``lookup `env` 插件和用 *+* 符号表示的字符串连接构建的。如果你使用的是 Mac，最终结果应该类似于：*/Users/bradleyd/.ssh/dftd.pub*。如果你使用的是
    Linux，结果应该类似于：*/home/bradleyd/.ssh/dftd.pub*。文件路径将根据你的操作系统和用户名有所不同。``
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
