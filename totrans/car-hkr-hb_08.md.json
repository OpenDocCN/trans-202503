["```\n$ sudo apt-get install python2.7 python2.7-dev python2.7-libs python-numpy\npython-scipy python-pyside python-configobj python-setuptools python-pip git\n$ sudo pip install pyusb-1.0.0b1\n```", "```\n$ git clone git://git.assembla.com/chipwhisperer.git\n$ cd chipwhisperer\n$ git clone git://git.assembla.com/openadc.git\n```", "```\n$ cd openadc/controlsw/python\n$ sudo python setup.py develop\n$ cd software\n$ sudo python setup.py develop\n```", "```\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"04b4\", ATTRS{idProduct}==\"8613\",\nMODE=\"0664\", GROUP=\"plugdev\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"221a\", ATTRS{idProduct}==\"0100\",\nMODE=\"0664\", GROUP=\"plugdev\"\n```", "```\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"03eb\", ATTRS{idProduct}==\"2104\",\nMODE=\"0664\", GROUP=\"plugdev\"\n```", "```\n$ sudo usermod -a -G plugdev <YourUsername>\n$ sudo udevadm control –reload-rules\n```", "```\n$ cd hardware/victims/firmware\n$ sh get_crypto.sh\n```", "```\n$ sudo apt-get install libmono-winforms2.0-cil\n```", "```\n$ cd software/chipwhisperer/capture\n$ python ChipWhispererCapture.py\n```", "```\n>>> self.target.driver.ser.write(\"@@@\")\n>>> self.target.driver.ser.read(255)\n```", "```\n>>> read = self.target.driver.ser.read\n>>> write = self.target.driver.ser.write\n```", "```\n>>> write('c')\n>>> lastpage = read(255)\n>>> lastpage = lastpage[:-1]\n>>> lastpage = bytearray(lastpage, 'latin-1')\n>>> lastpage[3] = ord('o')\n>>> lastpage[4] = ord('g')\n>>> lastpage[5] = 255\n>>> write('C')\n>>> write('!')\n>>> write(lastpage.decode('latin-1'))\n```", "```\n>>> write(\"@@@\")\n```", "```\n>>> from subprocess import call\n>>> def resetAVR:\n      call([\"/usr/bin/avrdude\", \"-c\", \"avrispmkII\", \"-p\", \"m328p\"])\n```", "```\n>>> resetAVR()\n>>> write(\"@@@\")\n```", "```\n>>> write(\"og\")\n```", "```\n>>> resetAVR()\n>>> write(\"@@@\")\n>>> write(\"ff\")\n```", "```\n>>> resetAVR()\n>>> write(\"@@@\")\n>>> write(\"of\")\n```", "```\n$ make MCU=atmega328p\n```", "```\nfor(cnt = 0; cnt < 5; cnt++){\n    if (inp[cnt] != passwd[cnt]){\n        passok = 0;\n    }\n}\n\nif (!passok){\n    output_ch_0('F');\n    output_ch_0('O');\n    output_ch_0('f');\n    output_ch_0('f');\n    output_ch_0('\\n');\n} else {\n    output_ch_0('W');\n    output_ch_0('e');\n    output_ch_0('l');\n    output_ch_0('c');\n    output_ch_0('o');\n    output_ch_0('m');\n    output_ch_0('e');\n    output_ch_0('\\n');\n}\n```", "```\nGlitch width %: 7\nGlitch Offset %: -10\nGlitch Trigger: Ext Trigger: Continuous\nRepeat: 1\n```", "```\n#define trigger_setup() DDRC |= 0x01\n#define trigger_high()  PORTC |= 0x01\n#define trigger_low()   PORTC &= ~(0x01)\n```", "```\n    for(cnt = 0; cnt < 5; cnt++){\n        if (inp[cnt] != passwd[cnt]){\n            trigger_high();\n            passok = 0;\n            trigger_low();\n        }\n    }\n```"]