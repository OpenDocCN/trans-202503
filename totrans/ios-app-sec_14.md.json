["```\nchar *t;\nt = \"%x%x%x%x%x%x%x%x\";\nprintf(t);\n```", "```\nchar *t;\nt = \"%n%n%n%n%n\";\nprintf(t);\n```", "```\nchar *t;\nt = \"%n%n%n%n%n\";\nprintf(\"%s\", t);\n```", "```\nNSString *userText = @\"%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x\";\nNSLog(userText);\n```", "```\n   NSString *myStuff = @\"Here is my stuff.\";\n   NSString *unformattedStuff = @\"Evil things %x%x%x%x%x\";\n➊ myStuff = [myStuff stringByAppendingFormat:[UtilityClass formatStuff:\n        unformattedStuff.text]];\n```", "```\nNSString myStuff = @\"Here is my stuff.\";\nmyStuff = [myStuff stringByAppendingFormat:@\"%@\", [UtilityClass formatStuff:\n     unformattedStuff.text]];\n```", "```\n#include <string.h>\n\nuid_t check_user(char *provided_uname, char *provided_pw) {\n    char password[32];\n    char username[32];\n\n    strcpy(password, provided_pw);\n    strcpy(username, provided_uname);\n\n    struct *passwd pw = getpwnam(username);\n\n    if (0 != strcmp(crypt(password), pw->pw_passwd))\n        return -1;\n\n    return pw->uid;\n}\n```", "```\nif (strnlen(provided_pw, 32) < strnlen(password, 32))\n    strcpy(password, provided_pw);\n```", "```\nvoid copythings(char *things) {\n    char buf[32];\n    strcpy(buf, things);\n}\n```", "```\nvoid copythings(char *things) {\n    char buf[32];\n    length = strlcpy(buf, things, sizeof(buf));\n}\n```", "```\nNSInteger foo = 9223372036854775807;\nNSLog(@\"%li\", (long)foo);\nfoo++;\nNSLog(@\"%li\", (long)foo);\n```", "```\nNSUInteger foo = 18446744073709551615;\nNSLog(@\"%lu\", (unsigned long)foo);\nfoo++;\nNSLog(@\"%lu\", (unsigned long)foo);\n```", "```\n   #define GOAT_NAME_LEN 32\n\n   typedef struct Goat {\n     int leg_count;    // usually 4\n     bool has_goatee;\n     char name[GOAT_NAME_LEN];\n     struct Goat* parent1;\n     struct Goat* parent2;\n     size_t kid_count;\n     struct Goat** kids;\n   } Goat;\n\n   int ReadInt(int socket) {\n     int result;\n     read(socket, &result, sizeof(result));\n     return result;\n   }\n\n   void ReadGoat(Goat* goat, int socket) {\n     read(socket, goat, sizeof(Goat));\n   }\n\n   Goat* ReadGoats(int* count, int socket) {\n➊   *count = ReadInt(socket);\n➋   Goat* goats = malloc(*count * sizeof(Goat));\n➌   for (int i = 0; i < *count; ++i) {\n       ReadGoat(&goats[i], socket);\n     }\n     return goats;\n   }\n```", "```\nif (n > 0 && m > 0 && INT_MAX/n >= m) {\n    size_t bytes = n * m;\n    foo = malloc(bytes);\n}\n```"]