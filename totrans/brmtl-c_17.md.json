["```\n$ ./`prog` `argument1` `argument2` `argument3`\n```", "```\nint main(const int argc, const char* const argv[])\n```", "```\n./`prog` `first` `second third`\n```", "```\nargc\t4\nargv[0]    ./`prog`\nargv[1]    `first`\nargv[2]    `second`\nargv[3]    `third`\n```", "```\n/**\n * Echo the command line arguments.\n */\n#include <stdio.h>\n\nint main(const int argc, const char* argv[])\n{\n    for (int i = 0; i < argc; ++i) {\n        printf(\"argv[%d] = %s\\n\", i, argv[i]);\n    }\n    return (0);\n}\n```", "```\n/**\n * Copy one file to another.\n *\n * Usage:\n *     copy <from> <to>\n */\n\n#include <stdio.h>\n#include <stdbool.h>\n#include <stdlib.h>\n\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n\n#ifndef O_BINARY\n#define O_BINARY 0      // Define O_BINARY if not defined.\n#endif // O_BINARY\n\nint main(int argc, char* argv[])\n{\n  1 if (argc != 3) {\n        fprintf(stderr, \"Usage is %s <infile> <outfile>\\n\", argv[0]);\n        exit(8);\n    }\n\n    // The fd of the input file\n  2 int inFd = open(argv[1], O_RDONLY|O_BINARY);\n\n  3 if (inFd < 0) {\n        fprintf(stderr, \"ERROR: Could not open %s for input\\n\", argv[1]);\n        exit(8);\n    }\n\n    // The fd of the output file\n  4 int outFd = open(argv[2], O_WRONLY|O_CREAT|O_BINARY, 0666);\n    if (outFd < 0) {\n        fprintf(stderr, \"ERROR: Could not open %s for writing\\n\", argv[2]);\n        exit(8);\n    }\n\n    while (true)\n    {\n        char buffer[1024];      // Buffer to read and write\n        size_t readSize;        // Size of the last read\n\n      5 readSize = read(inFd, buffer, sizeof(buffer));\n      6 if (readSize < 0) {\n            fprintf(stderr, \"ERROR: Read error for file %s\\n\", argv[1]);\n            exit(8);\n        }\n      7 if (readSize == 0)\n            break;\n\n      8 if (write(outFd, buffer, readSize) != readSize) {\n            fprintf(stderr, \"ERROR: Write error for %s\\n\", argv[2]);\n            exit(8);\n        }\n    }\n  9 close(inFd);\n    close(outFd);\n    return (0);\n}\n```", "```\n$ ./copy `input-file output-file`\n```", "```\n`bytes_read` `= read(``fd``,` `buffer``,` `size``);`\n```", "```\n`bytes_written` `= write(``fd``,` `buffer``,` `size``);`\n```", "```\n// Bad style; 3 should be a named constant.\nwrite(fd, \"Hi\\n\", 3);\n```", "```\n48  69  0a\n H   i  \\n\n```", "```\n// Bad style; 3 should be a named constant.\nwrite(fd, \"Hi\\n\", 3);\n```", "```\n48  69  0d  0a\n H   i  \\r  \\n\n```", "```\n#ifndef O_BINARY\n#define O_BINARY 0      // Define O_BINARY if not defined.\n#endif // O_BINARY\n```", "```\n`result` `= ioctl(``fd``,` `request``,` `parameter``);`\n```", "```\n    ./hello Fred\n    Hello Fred\n\n    ./hello\n    Hello stranger\n    ```"]