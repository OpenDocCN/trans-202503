- en: '**DEBUGGING AND AVOIDING COMMON ERRORS IN JAVA**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**调试和避免Java中常见错误**'
- en: '![Image](../images/circle.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/circle.jpg)'
- en: While working through this book, you’ve probably made a few typos or mistakes
    along the way. In this appendix, I’ll go over a few common programming pitfalls
    to avoid. One nice feature of both Eclipse and Android Studio that is helpful
    when debugging is *syntax coloring*. Class names, functions, variable types, strings,
    comments, and so on are each colored differently in the IDE based on their syntax.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，你可能在某些地方犯了一些拼写错误或其他错误。在这个附录中，我将介绍一些常见的编程陷阱及如何避免。Eclipse和Android Studio中的一个有用特性是*语法高亮*。类名、函数、变量类型、字符串、注释等在IDE中会根据它们的语法以不同的颜色显示。
- en: Syntax coloring can help you spot typos and other problems quickly. For example,
    if you forget to close a string with a second pair of double quotes, the semicolon
    at the end of that line will be colored differently from the other semicolons
    on the screen. As we go through these common errors, try introducing them into
    one of the apps you’ve written and look for the warnings given by Eclipse and
    Android Studio. It’s okay if you break an app—you can always go back and fix it,
    either by using the original code listing in the book or by pressing CTRL-Z (![Image](../images/symbol.jpg)-Z)
    or clicking **Edit** ▸ **Undo**.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 语法高亮可以帮助你快速发现拼写错误和其他问题。例如，如果你忘记用第二对双引号闭合字符串，那么该行末尾的分号将与屏幕上的其他分号显示不同的颜色。当我们介绍这些常见错误时，试着在你写的应用程序中引入它们，并注意Eclipse和Android
    Studio给出的警告。如果你破坏了一个应用程序，也没关系——你可以随时恢复并修复它，可以通过书中的原始代码列表或者按CTRL-Z (![图片](../images/symbol.jpg)-Z)或点击**编辑**
    ▸ **撤销**来实现。
- en: Spelling and Case
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 拼写和大小写
- en: Spelling is important in any programming language, but in Java, case matters,
    too. For example, if you use a lowercase `s` to make a scanner or string, the
    text editor in Eclipse will underline the class name in red, and Android Studio
    will color the text red. It might seem silly, but Java only understands `String`,
    not `string`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 拼写在任何编程语言中都很重要，但在Java中，大小写同样很重要。例如，如果你使用小写的`s`来表示一个扫描器或字符串，Eclipse中的文本编辑器会将类名用红色下划线标出，而Android
    Studio则会将文本标记为红色。这看起来可能有些傻，但Java只理解`String`，而不是`string`。
- en: The same goes for variable names, such as `playAgain` or `theNumber`. For example,
    if we accidentally capitalize the `P` and use a lowercase `a`, spelling `Playagain`,
    Java doesn’t understand that we mean the variable `playAgain`. Let’s take a look
    at how each IDE helps us find and fix typographical errors like these, first in
    Eclipse and then in Android Studio.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 变量名也是如此，例如`playAgain`或`theNumber`。例如，如果我们不小心将`P`大写并将`a`小写，拼写为`Playagain`，Java将无法理解我们指的是变量`playAgain`。我们来看看每个集成开发环境（IDE）如何帮助我们查找和修复这种拼写错误，首先是Eclipse，然后是Android
    Studio。
- en: '*Correcting Typos in Eclipse*'
  id: totrans-7
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*在Eclipse中修正拼写错误*'
- en: Eclipse will alert us to an error by underlining the misspelled word in red,
    and Android will color the text. [Figure A-1](app.xhtml#chAfig1) shows how Eclipse
    highlights two errors I’ve introduced into the Hi-Lo guessing game from [Chapter
    2](ch2.xhtml#ch2).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse会通过用红色下划线标出拼写错误的单词来提醒我们错误，而Android则会将文本标记为红色。[图A-1](app.xhtml#chAfig1)展示了Eclipse如何突出显示我在[第二章](ch2.xhtml#ch2)中的Hi-Lo猜数字游戏里引入的两个错误。
- en: '![Image](../images/f0274-01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0274-01.jpg)'
- en: '*Figure A-1: Eclipse helps us find misspellings and errors in capitalization.*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*图A-1：Eclipse帮助我们找到拼写错误和大小写错误。*'
- en: Where I’ve used a lowercase `s` in `system`, Eclipse underlines the misspelling
    and adds an error alert along the left border of the screen that you can see by
    mousing over that line. The Java compiler issues the error `"system cannot be
    resolved"`. That means Java can’t figure out what `system` is supposed to be because
    it only understands `System` with a capital `S`. Eclipse does the same with `playagain`
    on the next line—it should be `playAgain`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在`system`中使用小写字母`s`时，Eclipse会用红色下划线标出拼写错误，并在屏幕的左侧边框添加一个错误警告，你可以将鼠标悬停在该行上查看。Java编译器会报出错误`"system
    cannot be resolved"`。这意味着Java无法理解`system`应该是什么，因为它只理解带大写`S`的`System`。Eclipse也对下一行的`playagain`做了同样的处理——它应该是`playAgain`。
- en: Remember that you can use the content assist feature in Eclipse to fix many
    errors like these. Click one of the misspelled words from [Figure A-1](app.xhtml#chAfig1),
    and you’ll see a content assist menu like the ones shown in [Figure A-2](app.xhtml#chAfig2).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你可以在Eclipse中使用内容助手功能来修复这些错误。点击[图A-1](app.xhtml#chAfig1)中拼写错误的单词，你会看到一个内容助手菜单，类似[图A-2](app.xhtml#chAfig2)中显示的菜单。
- en: '![Image](../images/f0274-02.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0274-02.jpg)'
- en: '*Figure A-2: Eclipse’s content assist feature provides information about errors
    and offers possible fixes.*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 A-2：Eclipse的内容辅助功能提供了关于错误的信息，并提供了可能的修复建议。*'
- en: For the first misspelling, Eclipse not only tells us that it can’t resolve or
    understand `system` but also offers several possible corrections, including, fourth
    from the bottom in [Figure A-2](app.xhtml#chAfig2), `Change to 'System' (java.lang)`.
    The content assist feature doesn’t always have the right answer, but in this case,
    one of the 11 quick fixes offered is the correct capitalization of `System`. For
    the second misspelling, the first quick fix Eclipse offers is the right answer,
    `Change to 'playAgain'`. If Eclipse’s content assist offers the right fix, click
    the correct entry, and your spelling or capitalization error will be replaced
    by the correct code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第一个拼写错误，Eclipse不仅告诉我们无法解析或理解`system`，还提供了几种可能的修正，包括在[图 A-2](app.xhtml#chAfig2)中从底部算起第四个的`Change
    to 'System' (java.lang)`。内容辅助功能并不总是提供正确的答案，但在这个案例中，提供的11个快速修复中有一个是正确的，即`System`的正确大小写。对于第二个拼写错误，Eclipse提供的第一个快速修复是正确的，`Change
    to 'playAgain'`。如果Eclipse的内容辅助提供了正确的修复，点击正确的条目，你的拼写或大小写错误将被正确的代码替换。
- en: '*Correcting Typos in Android Studio*'
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*在Android Studio中修正拼写错误*'
- en: Android Studio tries to help us find errors by coloring the suspected problem
    in red. In the example shown in [Figure A-3](app.xhtml#chAfig3), I’ve misspelled
    the keyword `public` by typing `Public` with a capital `P`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio通过将可能存在问题的部分标红来帮助我们查找错误。在[图 A-3](app.xhtml#chAfig3)中所示的示例中，我将关键字`public`拼写错误，打成了大写的`Public`。
- en: '![Image](../images/f0275-01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0275-01.jpg)'
- en: '*Figure A-3: Android Studio alerts us to an incorrectly capitalized keyword.*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 A-3：Android Studio提醒我们存在一个错误的大写关键字。*'
- en: 'Notice that the error is similar to the one we saw in Eclipse earlier: Java
    is telling us that it can’t resolve or understand the symbol `''Public''`. However,
    Android Studio may not always provide the same level of support in fixing errors,
    as shown in [Figure A-4](app.xhtml#chAfig4).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这个错误类似于我们之前在Eclipse中看到的错误：Java告诉我们无法解析或理解符号`'Public'`。然而，Android Studio可能并不会总是提供相同级别的支持来修复错误，如[图
    A-4](app.xhtml#chAfig4)所示。
- en: '![Image](../images/f0275-02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0275-02.jpg)'
- en: '*Figure A-4: Pressing ALT-ENTER(or OPTION-ENTER) in Android Studio offers a
    quick fix, but not quite the right fix for this error.*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 A-4：在Android Studio中按下ALT-ENTER（或OPTION-ENTER）提供了一个快速修复，但这并不是这个错误的正确修复方法。*'
- en: In [Figure A-4](app.xhtml#chAfig4), I’ve incorrectly typed `newGame()` as `NewGame()`
    with a capital `N`. Android Studio correctly colored the code red to let me know
    there’s an error, but notice what happens when I click the code and press ALT-ENTER
    to attempt a quick fix. Instead of suggesting `newGame` as the correct spelling,
    Android Studio offers to create another method with the name `NewGame`. This isn’t
    the right fix for the mistyped method name, so you’ll need to find the correct
    spelling where the method `public void newGame()` was defined and manually fix
    the typo.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 A-4](app.xhtml#chAfig4)中，我错误地将`newGame()`输入为`NewGame()`，并且大写了字母`N`。Android
    Studio正确地将代码标红，以提醒我存在错误，但注意当我点击代码并按下ALT-ENTER尝试快速修复时发生了什么。Android Studio并没有建议`newGame`作为正确的拼写，而是提供了创建一个名为`NewGame`的方法的选项。这并不是解决拼写错误的正确方法，因此你需要找到方法`public
    void newGame()`定义的位置，并手动修复拼写错误。
- en: Both Android Studio and Eclipse will do their best to help you find errors,
    and they’ll often provide possible quick fixes, but knowing that spelling and
    capitalization are common issues can help you avoid and quickly correct errors
    as they pop up in your code.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio和Eclipse都会尽力帮助你找到错误，并且它们通常会提供可能的快速修复，但了解拼写和大小写常常是常见问题，可以帮助你避免并迅速修正代码中出现的错误。
- en: '*Avoiding Other Common Spelling Errors*'
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*避免其他常见的拼写错误*'
- en: One error that is particularly difficult to debug is when the name of an event
    handler or other overridden method is mistyped. These typos can range from typing
    `OnCreate()` or `OnDraw()` instead of the correct `onCreate()` and `onDraw()`,
    to mistyping `public void actionPerformed(ActionEvent e)` inside an `ActionListener`
    for a button in a Java GUI app, or leaving off the “ed” in the `mousePressed()`,
    `mouseClicked()`, or `mouseDragged()` event handlers.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种错误特别难以调试，就是事件处理器或其他重写方法的名称拼写错误。这些拼写错误可能是将`onCreate()`和`onDraw()`错误地输入为`OnCreate()`和`OnDraw()`，或者在Java
    GUI应用的`ActionListener`中错误地输入了`public void actionPerformed(ActionEvent e)`，又或者漏掉了`mousePressed()`、`mouseClicked()`或`mouseDragged()`事件处理器中的“ed”。
- en: We have programming conventions in order to avoid these types of errors. Forgetting
    to use lowercase to start method or variable names but uppercase to start class
    names may not necessarily be an error, but it’s bad form in Java. If you get into
    the habit of using Java conventions like these from the beginning, you’ll save
    time and avoid frustration in the future.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有编程规范，以避免这些类型的错误。忘记使用小写字母开头的方法或变量名，而使用大写字母开头的类名，可能不一定是错误，但在Java中是不规范的。如果从一开始就养成遵循Java规范的习惯，你将节省时间，并避免未来的挫折。
- en: Comparison Trouble
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较问题
- en: 'Remember that the double equal sign (`==`) is the comparison operator for “is
    equal to.” Don’t confuse it with the assignment operator (`=`). For example, to
    assign the value `5` to a variable named `number`, you would enter:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，双等号(`==`)是用于“等于”的比较运算符。不要将其与赋值运算符(`=`)混淆。例如，要将值`5`赋给名为`number`的变量，你应该输入：
- en: int number = 5; // Assigns the value 5 to number
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: int number = 5; // 将值5赋给number
- en: 'But, to compare the value of the variable, you use the double equal sign:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，要比较变量的值，你应该使用双等号：
- en: if (number == 5) // If number "is equal to" 5
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: if (number == 5) // 如果number“等于”5
- en: 'Also, remember that we check strings using the `equals()` method instead of
    the `==` operator. For example, the condition `if (playAgain == "y")` would always
    evaluate to `false`. The correct `if` statement would be this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请记住，我们使用`equals()`方法来检查字符串，而不是使用`==`运算符。例如，条件`if (playAgain == "y")`将始终返回`false`。正确的`if`语句应该是：
- en: if (playAgain.equals("y"))
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: if (playAgain.equals("y"))
- en: The `equals()` method of the `String` class checks whether the *contents* of
    the strings match, which is usually what we want when we compare strings. The
    `equals()` method is also what we use whenever we compare two objects, as in `if
    (bubble1.equals(bubble2))` to see whether two `Bubble` variables refer to the
    same `Bubble` object in the BubbleDraw app, for example.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`String`类的`equals()`方法检查字符串的*内容*是否匹配，这通常是我们在比较字符串时所希望的。`equals()`方法也是我们每次比较两个对象时使用的方法，比如`if
    (bubble1.equals(bubble2))`，用于检查两个`Bubble`变量是否指向`BubbleDraw`应用中相同的`Bubble`对象。'
- en: Grouping Symbols
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分组符号
- en: When coding in Java, it’s also important to keep your parentheses, brackets,
    and braces balanced. We call these *grouping symbols* because they group other
    programming elements together and because you should never have an opening grouping
    symbol without a closing grouping symbol. Both Eclipse and Android Studio offer
    different ways to spot and fix unclosed grouping symbols.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java编程时，保持括号、方括号和大括号的平衡也非常重要。我们称这些为*分组符号*，因为它们将其他编程元素组合在一起，并且你永远不应该有没有匹配的关闭符号的打开符号。Eclipse和Android
    Studio都提供了不同的方式来发现和修复未关闭的分组符号。
- en: '*Quick Fixes in Eclipse*'
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*Eclipse中的快速修复*'
- en: Eclipse can help us with grouping symbols in a couple of ways. If you leave
    out a parenthesis from a condition or function, Eclipse will indicate the error
    with a red underline beneath the word closest to the missing parenthesis, as shown
    in [Figure A-5](app.xhtml#chAfig5).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse可以通过几种方式帮助我们处理分组符号。如果你遗漏了条件或函数中的括号，Eclipse会在离缺失括号最近的单词下方用红色下划线标出错误，如[图A-5](app.xhtml#chAfig5)所示。
- en: '![Image](../images/f0277-01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0277-01.jpg)'
- en: '*Figure A-5: Eclipse helps find errors with parentheses and sometimes offers
    a fix.*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*图A-5：Eclipse帮助查找括号错误，并有时提供修复建议。*'
- en: Again, Eclipse will do its best to help you spot errors while you type. In [Figure
    A-5](app.xhtml#chAfig5), I left out closing parentheses at the ends of two lines,
    which Eclipse marked with a red error symbol. Clicking the red error marker on
    the left margin of the editor for the first line offers the suggestion to insert
    a closing parenthesis.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，Eclipse会尽力帮助你在输入时发现错误。在[图A-5](app.xhtml#chAfig5)中，我遗漏了两行末尾的右括号，Eclipse通过红色错误符号标记了这些位置。点击编辑器左边距处的红色错误标记，将会提供插入右括号的建议。
- en: If you place the cursor beside a closing or opening brace, Eclipse will outline
    the corresponding brace that either opens or closes that block of text. Try it
    out by clicking the cursor next to a brace in any of your programs.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将光标放在某个闭合或开头的括号旁边，Eclipse将会高亮显示与之对应的括号，这些括号用于打开或关闭这块文本。你可以通过点击任何程序中的括号旁边的光标来试试看。
- en: Also, remember that Eclipse can correct indentation for us if we highlight the
    code to indent and press CTRL-I. For short programs, this may just be a nice convenience,
    but for longer programs that span multiple pages, correct indentation can be very
    helpful in avoiding errors due to missing or misplaced braces.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，请记住，如果我们突出显示代码并按 CTRL-I，Eclipse 可以为我们自动调整缩进。对于短程序来说，这可能只是一个方便的小功能，但对于跨越多页的较长程序来说，正确的缩进非常有助于避免因缺失或放错位置的括号而导致的错误。
- en: '*Code Completion in Android Studio*'
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*Android Studio 中的代码补全*'
- en: Android Studio offers even more help for missing grouping symbols. The code
    completion feature in Android Studio can automatically fill in both opening and
    closing parentheses, brackets, or braces.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 提供了更多的帮助来处理缺失的分组符号。Android Studio 中的代码补全功能可以自动填写打开和关闭的圆括号、方括号或大括号。
- en: 'For example, open the GuessingGame project from [Chapter 4](ch4.xhtml#ch4)
    and, inside the `onCreate()` function, find the line that calls a new game:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，打开 [第 4 章](ch4.xhtml#ch4)中的 GuessingGame 项目，在 `onCreate()` 函数中找到调用新游戏的那一行：
- en: lblOutput = (TextView) findViewById(R.id.lblOutput);
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: lblOutput = (TextView) findViewById(R.id.lblOutput);
- en: newGame();
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: newGame();
- en: btnGuess.setOnClickListener(new View.OnClickListener() {
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: btnGuess.setOnClickListener(new View.OnClickListener() {
- en: 'Delete the parentheses and the semicolon at the end of the line:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 删除括号和行末的分号：
- en: lblOutput = (TextView) findViewById(R.id.lblOutput);
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: lblOutput = (TextView) findViewById(R.id.lblOutput);
- en: newGame
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: newGame
- en: btnGuess.setOnClickListener(new View.OnClickListener() {
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: btnGuess.setOnClickListener(new View.OnClickListener() {
- en: Android Studio will color the text red to let you know there’s an error, and
    then you can use code completion to fill in the missing parentheses and semicolon.
    To complete the statement automatically, position the cursor just after `newGame`,
    as shown in [Figure A-6](app.xhtml#chAfig6), and press CTRL-space to perform basic
    code completion.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 会将文本标记为红色，提示你有错误，然后你可以使用代码补全来填补缺失的括号和分号。要自动完成语句，请将光标定位在 `newGame`
    后面，如 [图 A-6](app.xhtml#chAfig6) 所示，然后按 CTRL-space 执行基本的代码补全。
- en: '![Image](../images/f0278-01.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0278-01.jpg)'
- en: '*Figure A-6: Place the cursor next to a line with missing parentheses (top)
    and press CTRL-space to finish the statement using Android Studio’s code completion
    (bottom).*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 A-6：将光标放置在缺失括号的行旁边（顶部），然后按 CTRL-space 使用 Android Studio 的代码补全来完成语句（底部）。*'
- en: Notice that code completion filled in both the missing parentheses and the semicolon
    to end the line. The CTRL-space combination is just the first of three code completion
    shortcuts in Android Studio. The second one, CTRL-SHIFT-space, is called *smart
    completion* and displays relevant options in a pop-up window. Press the keyboard
    shortcut twice to expand the list of code completion options. Finally, *statement
    completion* (CTRL-SHIFT-ENTER on Windows and Linux, ![Image](../images/symbol.jpg)-SHIFT-ENTER
    on macOS) will add closing parentheses/brackets/braces and a finishing semicolon
    if needed. Try statement completion by deleting just the closing parenthesis from
    a method, `if` statement, or `for` loop and pressing CTRL-SHIFT-ENTER. The statement
    completion feature in Android Studio will often close your grouping symbols and
    add semicolons or braces wherever they’re needed, making your job easier and faster
    and helping you avoid errors while you code.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，代码补全填补了缺失的括号和分号来结束这一行。CTRL-space 组合键只是 Android Studio 中三个代码补全快捷键中的第一个。第二个是
    CTRL-SHIFT-space，称为 *智能补全*，它会在弹出窗口中显示相关选项。按下快捷键两次以展开代码补全选项列表。最后，*语句补全*（Windows
    和 Linux 上是 CTRL-SHIFT-ENTER，macOS 上是 ![Image](../images/symbol.jpg)-SHIFT-ENTER）会在需要的地方添加闭合括号/方括号/大括号和分号。通过删除方法、`if`
    语句或 `for` 循环中的闭合括号，然后按 CTRL-SHIFT-ENTER 来尝试语句补全。Android Studio 中的语句补全功能通常会关闭你的分组符号，并在需要的地方添加分号或大括号，让你的工作变得更轻松、更快速，同时帮助你避免编码时出现错误。
- en: Summary
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: These are far from the only errors you’ll run across while programming in Java,
    but you can see that both Eclipse and Android Studio offer very helpful tools
    for beginners and experienced professionals alike. You’ll get better at spotting
    and correcting errors the more you code in Java, but your code will probably never
    be completely error-free. I’ve been programming for over 30 years, and I still
    have to debug my code. To avoid, find, and fix errors in your code as you go,
    it’s important to learn good programming practices from the beginning and to take
    advantage of the support built into professional tools such as Eclipse and Android
    Studio.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这些并不是你在用 Java 编程时会遇到的所有错误，但你可以看到，无论是 Eclipse 还是 Android Studio 都为初学者和经验丰富的专业人士提供了非常有用的工具。你在用
    Java 编程时，随着经验的积累，你会变得更擅长发现并修复错误，但你的代码可能永远不会完全没有错误。我已经编程超过 30 年了，仍然需要调试我的代码。为了避免、发现并修复代码中的错误，从一开始就学习良好的编程实践，并利用像
    Eclipse 和 Android Studio 这样的专业工具内置的支持是非常重要的。
