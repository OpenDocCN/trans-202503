- en: Chapter 1. Introduction to Blender
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1章 介绍Blender
- en: In this chapter, we will look at the basics of using Blender in order to build
    a foundation for our work in later chapters. We’ll explore its user interface,
    how to navigate the 3D Viewport, and how to add and interact with objects. Throughout
    this chapter, I’ll point to later parts of the book, where various topics will
    be covered in greater detail. If you are already comfortable with Blender, feel
    free to skip to [Chapter 2](ch02.html "Chapter 2. Introduction to GIMP"), on GIMP,
    or [Chapter 3](ch03.html "Chapter 3. Preparation"), on preparing your projects.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨使用Blender的基础知识，为后续章节的工作打下基础。我们将探索其用户界面，如何导航3D视口，以及如何添加和与对象交互。在本章中，我将指向本书的后续部分，其中将更详细地涵盖各种主题。如果您已经熟悉Blender，请随时跳到[第2章](ch02.html
    "第2章 GIMP介绍")，关于GIMP，或[第3章](ch03.html "第3章 准备工作")，关于准备您的项目。
- en: About Blender
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于Blender
- en: Blender is a free open source 3D design and animation package, available for
    Windows, Linux, and Mac OS X. Originally created as an in-house animation package
    for Dutch animation studio NeoGeo, it was later released under the GNU General
    Public License when its developer, NotANumber, went bankrupt and the Blender community
    raised €100,000 to pay creditors to release the Blender source code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Blender是一款免费开源的3D设计和动画软件，适用于Windows、Linux和Mac OS X。最初作为荷兰动画工作室NeoGeo的内部动画软件而创建，后来在其开发者NotANumber破产时，由Blender社区筹集了10万欧元支付债权人以发布Blender源代码，并在GNU通用公共许可证下发布。
- en: Since then, Blender has undergone continued development by the Blender community,
    overseen by the Blender Foundation (headed by Ton Roosendaal, one of the original
    developers of Blender). The current version (Blender 2.6*x*, as this book goes
    to press) boasts a wide array of features competitive with many commercial 3D
    applications and has a committed and enthusiastic community creating art and animation
    with it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 从那时起，Blender一直由Blender社区持续开发，由Blender基金会（由Blender的原始开发者之一Ton Roosendaal领导）监督。当前版本（本书出版时的Blender
    2.6*x*）拥有与许多商业3D应用程序竞争的广泛功能，并拥有一支忠诚和热情的社区，用它来创作艺术和动画。
- en: Blender is used today by many animation studios, game developers, artists, and
    hobbyists. It has been used to make feature films, short films, and games. Of
    particular note are the Blender Foundation’s open movie projects—community-funded
    short film projects that are used to drive the development of Blender forward
    by using it in a production environment. To date, four short films and one game
    have been completed, each yielding significant improvements and new features in
    Blender’s repertoire. The first short film, *Elephants Dream*, premiered in 2006\.
    It’s a surreal tale in which two characters travel through a bizarre mechanical
    world. It introduced particle-based hair and fur rendering, as well as new animation
    tools and improvements to Blender’s render engine. In 2008, *Big Buck Bunny* introduced
    improvements to fur rendering, particles, and the render pipeline, as well as
    more advanced rigging and animation constraints. In 2010, *Sintel*, a tale about
    a girl and her dragon, brought advanced sculpting tools, new simulation tools,
    and shading and rendering improvements.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，许多动画工作室、游戏开发者、艺术家和爱好者都在使用Blender。它被用来制作长篇电影、短片和游戏。特别值得一提的是Blender基金会的开放电影项目——由社区资助的短片项目，通过在制作环境中使用Blender来推动Blender的发展。迄今为止，已完成了四部短片和一款游戏，每一部都带来了Blender库中的重大改进和新功能。第一部短片*Elephants
    Dream*于2006年首映。这是一个超现实的故事，讲述了两个角色穿越一个奇怪的机械世界。它引入了基于粒子的头发和毛发渲染，以及Blender渲染引擎的新动画工具和改进。2008年，*Big
    Buck Bunny*引入了毛发渲染、粒子和渲染管线的改进，以及更高级的绑定和动画约束。2010年，*Sintel*，一个关于一个女孩和她的龙的故事，带来了先进的雕刻工具、新的模拟工具以及着色和渲染的改进。
- en: The latest open movie, *Tears of Steel*, focused on adding advanced visual effects
    tools to Blender. It brought major improvements to the new Cycles render engine
    and has introduced camera tracking tools, new features for Blender’s compositor,
    improved simulation tools, and better color management.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 最新的开放电影*Tears of Steel*专注于为Blender添加先进的视觉效果工具。它为新的Cycles渲染引擎带来了重大改进，并引入了摄像机跟踪工具、Blender合成器的新功能、改进的模拟工具和更好的颜色管理。
- en: Current, stable Blender builds for Windows, Linux, and Mac OS X are available
    from *[http://www.blender.org/](http://www.blender.org/)*. In addition, you can
    find development builds featuring the latest updates from *[http://www.graphicall.org/](http://www.graphicall.org/)*.
    These development builds are designed for more advanced users or those who wish
    to try new features; they can be unstable, so stick with the official builds for
    important work.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当前，Windows、Linux和Mac OS X的稳定Blender版本可以从*[http://www.blender.org/](http://www.blender.org/)*下载。此外，你还可以从*[http://www.graphicall.org/](http://www.graphicall.org/)*找到包含最新更新的开发版。这些开发版主要面向更高级的用户或那些希望尝试新功能的用户；它们可能不稳定，因此在进行重要工作时，建议使用官方版本。
- en: The Blender User Interface
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Blender用户界面
- en: Blender’s user interface (UI) has earned a reputation for being difficult to
    grasp. In earlier versions, this reputation was somewhat justified, but since
    Blender 2.5, the interface has seen major updates and is now much more predictable
    and easier to learn. Plus, with the addition of the search function, if you have
    trouble finding a particular operator, you can search for it by pressing the spacebar
    to bring up a search dialog in which you can search for operators by name.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Blender的用户界面（UI）因其难以掌握而声名远扬。在早期版本中，这种评价在一定程度上是有道理的，但自Blender 2.5版本以来，界面经历了重大更新，现在更加可预测，也更容易学习。而且，随着搜索功能的加入，如果你在寻找某个操作符时遇到困难，可以通过按空格键打开搜索对话框，并通过名称搜索操作符。
- en: Once you have grasped the UI, you’ll find that Blender is very fast and extremely
    customizable. Most functions have keyboard commands for quicker access, and the
    interface is non-blocking, which means that windows and dialogs won’t be layered
    on top of one another, obscuring your view.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你掌握了UI，你会发现Blender非常快速且高度可定制。大多数功能都可以通过键盘命令快速访问，且界面是非阻塞的，这意味着窗口和对话框不会互相覆盖，遮挡你的视野。
- en: Layout and UI Terminology
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 布局和UI术语
- en: When you first start Blender, the default layout should look something like
    [Figure 1-1](ch01.html#blenderapostrophes_default_ui_layoutdot "Figure 1-1. Blender’s
    default UI layout. The window is broken down into different editors (orange),
    which are then further split into regions (green)."). The Blender window is broken
    into areas called *editors*. These editors include the 3D Viewport, the Properties
    editor, the Outliner, the Info editor, and the Timeline, as shown in [Figure 1-1](ch01.html#blenderapostrophes_default_ui_layoutdot
    "Figure 1-1. Blender’s default UI layout. The window is broken down into different
    editors (orange), which are then further split into regions (green).").
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当你首次启动Blender时，默认布局应该类似于[图1-1](ch01.html#blenderapostrophes_default_ui_layoutdot
    "图1-1. Blender默认的UI布局。窗口被分为不同的编辑器（橙色），这些编辑器进一步被划分为区域（绿色）。")。Blender窗口被划分为名为*编辑器*的区域。这些编辑器包括3D视图、属性编辑器、大纲、信息编辑器和时间轴，如[图1-1](ch01.html#blenderapostrophes_default_ui_layoutdot
    "图1-1. Blender默认的UI布局。窗口被分为不同的编辑器（橙色），这些编辑器进一步被划分为区域（绿色）。")所示。
- en: '![Blender’s default UI layout. The window is broken down into different editors
    (orange), which are then further split into regions (green).](httpatomoreillycomsourcenostarchimages1538254.png.jpg)Figure 1-1. Blender’s
    default UI layout. The window is broken down into different editors (orange),
    which are then further split into regions (green).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '![Blender默认的UI布局。窗口被分为不同的编辑器（橙色），这些编辑器进一步被划分为区域（绿色）。](httpatomoreillycomsourcenostarchimages1538254.png.jpg)图1-1.
    Blender默认的UI布局。窗口被分为不同的编辑器（橙色），这些编辑器进一步被划分为区域（绿色）。'
- en: Editors are further broken down into *regions*. In the case of the 3D Viewport
    in [Figure 1-1](ch01.html#blenderapostrophes_default_ui_layoutdot "Figure 1-1. Blender’s
    default UI layout. The window is broken down into different editors (orange),
    which are then further split into regions (green)."), the regions are the Main
    region (that is, the 3D view), the Header region at the bottom of the editor,
    and the Tool Shelf on the left.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器进一步被划分为*区域*。以[图1-1](ch01.html#blenderapostrophes_default_ui_layoutdot "图1-1.
    Blender默认的UI布局。窗口被分为不同的编辑器（橙色），这些编辑器进一步被划分为区域（绿色）。")中的3D视图窗口为例，这些区域包括主区域（即3D视图）、编辑器底部的头部区域和左侧的工具架区域。
- en: Regions that contain buttons and properties—like the Properties editor or the
    Tool Shelf in the 3D Viewport—are further broken down into *panels*. A panel may
    contain any number and combination of operator buttons, information, and properties.
    The panel’s name is shown at the top of the panel (see [Figure 1-2](ch01.html#panels_within_the_properties_editor
    "Figure 1-2. Panels within the Properties editor")) and indicates what sort of
    properties and information the panel contains.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 包含按钮和属性的区域——例如属性编辑器或 3D 视口中的工具架——进一步划分为 *面板*。一个面板可能包含任意数量和组合的操作按钮、信息和属性。面板的名称显示在面板顶部（参见
    [图 1-2](ch01.html#panels_within_the_properties_editor "图 1-2. 属性编辑器中的面板")），并指示该面板包含什么类型的属性和信息。
- en: '![Panels within the Properties editor](httpatomoreillycomsourcenostarchimages1538256.png.jpg)Figure 1-2. Panels
    within the Properties editor'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '![属性编辑器中的面板](httpatomoreillycomsourcenostarchimages1538256.png.jpg)图 1-2. 属性编辑器中的面板'
- en: Switching Editors and Customizing the UI
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 切换编辑器和自定义 UI
- en: Blender’s UI layout is highly configurable. You can switch any editor in the
    current layout to a different editor type by selecting a new one from the drop-down
    menu at the far left of the Header region (see [Figure 1-3](ch01.html#blenderapostrophes_different_editor_type
    "Figure 1-3. Blender’s different editor types")).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Blender 的 UI 布局高度可配置。你可以通过在 Header 区域最左侧的下拉菜单中选择一个新的编辑器类型，将当前布局中的任何编辑器切换为不同的编辑器类型（参见
    [图 1-3](ch01.html#blenderapostrophes_different_editor_type "图 1-3. Blender 的不同编辑器类型")）。
- en: You can also resize existing editors and add or remove editors by splitting
    or merging existing ones. To resize an editor (or a region), click and drag on
    its border. To split or merge editors, right-click the editor’s border and choose
    either Split Area or Merge Area. (In later chapters, we’ll use this technique
    to adjust Blender’s layout to better suit various stages of each project.)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过分割或合并现有的编辑器来调整现有编辑器的大小，或添加或删除编辑器。要调整编辑器（或区域）的大小，请点击并拖动其边框。要分割或合并编辑器，右键点击编辑器的边框并选择“分割区域”或“合并区域”。（在后面的章节中，我们将使用这种技巧来调整
    Blender 的布局，以更好地适应每个项目的不同阶段。）
- en: '![Blender’s different editor types](httpatomoreillycomsourcenostarchimages1538258.png.jpg)Figure 1-3. Blender’s
    different editor types'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '![Blender 的不同编辑器类型](httpatomoreillycomsourcenostarchimages1538258.png.jpg)图
    1-3. Blender 的不同编辑器类型'
- en: Multiple Layouts
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多个布局
- en: Because different UI layouts are suitable for different tasks, Blender allows
    you to store multiple UI layouts so that you can switch between them as you work.
    To switch layouts, click the screen layout drop-down menu in the Info editor header
    (see [Figure 1-4](ch01.html#switching_layouts_with_the_screen_layout "Figure 1-4. Switching
    layouts with the screen layout drop-down menu")).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于不同的 UI 布局适用于不同的任务，Blender 允许你存储多个 UI 布局，以便在工作时可以在它们之间切换。要切换布局，请点击 Info 编辑器头部的屏幕布局下拉菜单（参见
    [图 1-4](ch01.html#switching_layouts_with_the_screen_layout "图 1-4. 使用屏幕布局下拉菜单切换布局")）。
- en: By default, Blender includes layouts named *Animation*, *Compositing*, *Default*,
    *Game Logic*, *Scripting*, *UV Editing*, *3D View Full*, *Motion Tracking*, and
    *Video Editing*, each of which is pretty well suited to the task that it’s named
    for. (Default is the default layout when you start Blender and is good for modeling.)
    To add your own layout, click the + icon at the right of the drop-down menu to
    copy the current layout and modify it, or delete the current layout by clicking
    the **X** icon. Layouts are saved along with your *.blend* file when you save
    your work, so you can return to them when you reopen the file.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Blender 包含名为 *动画*、*合成*、*默认*、*游戏逻辑*、*脚本编写*、*UV 编辑*、*3D 视图全屏*、*运动追踪* 和 *视频编辑*
    的布局，每个布局都非常适合其所命名的任务。（默认是启动 Blender 时的默认布局，适合建模。）要添加你自己的布局，点击下拉菜单右侧的 + 图标以复制当前布局并修改它，或者点击
    **X** 图标删除当前布局。布局会随着 *.blend* 文件一起保存，当你保存工作时，下次打开文件时可以返回到这些布局。
- en: '![Switching layouts with the screen layout drop-down menu](httpatomoreillycomsourcenostarchimages1538260.png.jpg)Figure 1-4. Switching
    layouts with the screen layout drop-down menu'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![使用屏幕布局下拉菜单切换布局](httpatomoreillycomsourcenostarchimages1538260.png.jpg)图 1-4.
    使用屏幕布局下拉菜单切换布局'
- en: You can make a layout available by default by saving it as part of the default
    *.blend* file, the file that is loaded upon starting Blender. To do so, load the
    default *.blend* file (CTRL-N) and then create the layout you want using the methods
    outlined above. Use CTRL-U to save the current file as the new default start-up
    file. (To restore the original default *.blend* file, select **Load Factory Settings**
    from the File menu and then save the default *.blend* file again.)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将布局保存为默认的*.blend*文件来使其在启动Blender时自动加载。为此，加载默认的*.blend*文件（CTRL-N），然后使用上述方法创建你想要的布局。使用CTRL-U将当前文件保存为新的默认启动文件。（若要恢复原始的默认*.blend*文件，选择“文件”菜单中的**加载工厂设置**，然后再次保存默认的*.blend*文件。）
- en: '![Blender’s 3D Viewport in detail](httpatomoreillycomsourcenostarchimages1538262.png.jpg)Figure 1-5. Blender’s
    3D Viewport in detail'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![Blender的3D视口细节](httpatomoreillycomsourcenostarchimages1538262.png.jpg)图1-5.
    Blender的3D视口细节'
- en: Editor Types
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑器类型
- en: Each of Blender’s editors offers a different functionality. Not all editors
    will be useful to us in the course of this book, so I will discuss just those
    that are relevant to the projects we’ll tackle.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Blender的每个编辑器都有不同的功能。并不是所有的编辑器在本书的项目中都会用到，因此我只会讨论与我们要处理的项目相关的编辑器。
- en: The 3D Viewport
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3D视口
- en: This is Blender’s most important editor type. The 3D Viewport (see [Figure 1-5](ch01.html#blenderapostrophes_3d_viewport_in_detail
    "Figure 1-5. Blender’s 3D Viewport in detail")) is where you can view your scene
    and its objects and then move, manipulate, and organize them.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Blender最重要的编辑器类型。3D视口（参见[图1-5](ch01.html#blenderapostrophes_3d_viewport_in_detail
    "图1-5. Blender的3D视口细节")）是你可以查看场景和对象，并对其进行移动、操作和组织的地方。
- en: 'The 3D Viewport has four regions: the main 3D view; the Header, which is found
    either at the top or bottom of the editor (usually the bottom); the Tool Shelf;
    and the Properties region, the last two of which can be hidden with the hotkeys
    **T** and **N** while the mouse is over the 3D Viewport editor.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 3D视口有四个区域：主要的3D视图；Header，位于编辑器的顶部或底部（通常在底部）；工具架；以及属性区域，后两个区域可以在鼠标悬停在3D视口编辑器上时通过快捷键**T**和**N**隐藏。
- en: Navigating the 3D Viewport
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 导航 3D 视口
- en: It’s very important to learn to navigate the 3D Viewport, and there are several
    ways to do so. The simplest is with the mouse. Scrolling the mouse wheel zooms
    in and out, holding the middle mouse button rotates the view, and SHIFT-middle
    mouse button pans the view. To center the view on the currently selected object,
    press NUMPAD. (period), and to reset the view to center on the scene’s origin,
    press SHIFT-C.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何导航3D视口非常重要，且有多种方法可以做到这一点。最简单的方法是使用鼠标。滚动鼠标滚轮可以放大和缩小视图，按住中键鼠标按钮旋转视图，按住SHIFT并点击中键鼠标按钮可以平移视图。要将视图集中在当前选中的对象上，按下数字键盘上的点键（NUMPAD.）。要将视图重置为集中在场景的原点上，按下SHIFT-C。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*Blender treats the number pad keys and the corresponding keys on the keyboard
    differently. For example, the number pad (numpad) numbers are used for navigating
    the 3D view, while the character key numbers are used to toggle visibility of
    different scene layers.*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*Blender处理数字键盘上的键和键盘上相应的键是不同的。例如，数字键盘（numpad）上的数字用于导航3D视图，而字符键上的数字则用于切换不同场景层的可见性。*'
- en: You can also snap the viewpoint to specific angles using the number pad. NUMPAD
    7 snaps to top-down view, NUMPAD 1 snaps to front view, and NUMPAD 3 snaps to
    side view. NUMPAD 5 switches between a perspective view, where objects in the
    distance appear smaller (as in real life), and an orthographic view, where objects
    appear the same size at all distances. When combined with the top, side, and front
    views, orthographic view is most useful for aligning objects precisely.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用数字键盘将视角切换到特定的角度。NUMPAD 7切换到俯视图，NUMPAD 1切换到正视图，NUMPAD 3切换到侧视图。NUMPAD 5在透视图和正交图之间切换，透视图中远处的物体看起来较小（就像现实中一样），而正交图中物体在所有距离上看起来大小相同。与俯视图、侧视图和正视图结合使用时，正交图最适合精确对齐物体。
- en: The 3D Viewport has multiple display modes that can be selected from the 3D
    Viewport header (see [Figure 1-5](ch01.html#blenderapostrophes_3d_viewport_in_detail
    "Figure 1-5. Blender’s 3D Viewport in detail")). These viewing modes include the
    default solid view; wireframe; bounding box, which represents objects as simple
    boxes instead of displaying their geometry; and textured view, which can display
    shading and texturing. In later chapters, we’ll look at customizing the 3D Viewport
    for different purposes, including using different textured shading modes and working
    with layers and hiding objects.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 视口有多个显示模式，可以从 3D 视口头部选择（见 [图 1-5](ch01.html#blenderapostrophes_3d_viewport_in_detail
    "图 1-5. 详细介绍 Blender 的 3D 视口")）。这些查看模式包括默认的实心视图；线框视图；边界框视图，它将物体表示为简单的框而不是显示其几何形状；以及纹理视图，能够显示阴影和纹理。在后续章节中，我们将探讨如何为不同目的定制
    3D 视口，包括使用不同的纹理阴影模式，以及与图层的工作和隐藏物体。
- en: Coordinates in 3D and the Grid Floor
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 3D 坐标和网格地面
- en: If you haven’t dealt with 3D graphics before, you may not have thought about
    how to define a point in space. Of course, 3D models are essentially created by
    connecting points in space. Thankfully, French philosopher and mathematician René
    Descartes gave us a solution to this problem several centuries before we got around
    to inventing computers and 3D graphics.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前没有接触过 3D 图形，可能没有想过如何定义空间中的一个点。当然，3D 模型本质上是通过连接空间中的点来创建的。幸运的是，法国哲学家和数学家
    René Descartes 在我们发明计算机和 3D 图形之前几个世纪就为我们解决了这个问题。
- en: To define a point in 3D space, we need information about the point’s position
    in each spatial dimension in relation to a *reference point*. In Blender, this
    information comes in the form of the point’s *x*-, *y*-, and *z*-coordinates,
    which indicate the point’s position along three axes that run perpendicular to
    one another. These are called Blender’s *global coordinates*. The reference point
    we use is called the scene’s *origin*—the point whose coordinates for each of
    the axes is zero.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义 3D 空间中的一个点，我们需要了解该点在每个空间维度上的位置，相对于一个 *参考点*。在 Blender 中，这些信息以该点的 *x*、*y*
    和 *z* 坐标的形式出现，表示该点在三个互相垂直的轴上位置。这些被称为 Blender 的 *全局坐标*。我们使用的参考点叫做场景的 *原点*——该点在每个坐标轴上的坐标为零。
- en: By convention, we generally think of the *x*-axis as being the “left–right”
    axis, the *y*-axis as the “forward–back” axis, and *z*-axis as the “up–down” axis.
    (The different viewpoints given by the keyboard shortcuts mentioned above conform
    to this convention—the top-down view looks downward along the *z*-axis, and so
    on.)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，我们通常认为 *x* 轴是“左右”轴，*y* 轴是“前后”轴，*z* 轴是“上下”轴。（上述键盘快捷键提供的不同视角符合这一惯例——自上而下的视角沿
    *z* 轴向下看，依此类推。）
- en: You can see the *x*- and *y*-axes in Blender’s 3D Viewport as red and green
    lines, respectively. Extending from these lines in light gray is the *grid floor*,
    which we generally use as the ground height of the scene when placing objects.
    The divisions of the grid are all 1 Blender unit apart by default, giving you
    a guide to use for placing objects and judging their size. The *x*- and *y*-axes
    and the grid floor are also useful when orienting yourself in Blender’s 3D Viewport.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Blender 的 3D 视口中，你可以看到 *x* 轴和 *y* 轴分别是红色和绿色的线。从这些线延伸出的浅灰色是 *网格地面*，我们通常将其作为场景中放置物体时的地面高度。网格的每个划分默认相隔
    1 Blender 单位，为你提供一个放置物体和判断其大小的参考。*x* 轴和 *y* 轴以及网格地面在你在 Blender 的 3D 视口中定位时也很有用。
- en: The Properties Editor
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 属性编辑器
- en: 'The Properties editor is where you can define the settings and properties for
    a scene or a selected object. The Properties editor is divided into Header and
    Main regions, with the Main region being split into tabs (as shown in [Figure 1-2](ch01.html#panels_within_the_properties_editor
    "Figure 1-2. Panels within the Properties editor")). Each tab contains a different
    set of properties that relates to either the current scene or the active object.
    In order of appearance, the tabs are as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 属性编辑器是你可以定义场景或所选对象设置和属性的地方。属性编辑器分为头部和主体区域，主体区域又分为多个标签页（如 [图 1-2](ch01.html#panels_within_the_properties_editor
    "图 1-2. 属性编辑器中的面板") 所示）。每个标签页包含一组与当前场景或活动对象相关的不同属性。按照出现顺序，标签页如下：
- en: '****Render****. The Render tab contains settings for rendering your scene,
    including render dimensions, shading options, and output formats. (We’ll discuss
    this in more detail in [Chapter 14](ch14.html "Chapter 14. Rendering and Compositing").)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '****渲染****。渲染标签包含渲染场景的设置，包括渲染尺寸、阴影选项和输出格式。（我们将在[第14章](ch14.html "第14章. 渲染与合成")中详细讨论此内容。）'
- en: '****Scene****. The Scene tab lets you set the properties of your scene, such
    as the active camera, certain sound settings, and the scene’s units (arbitrary
    Blender units, imperial, or metric).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '****场景****。场景标签让您设置场景的属性，例如活动摄像机、某些声音设置和场景的单位（任意Blender单位、英制或公制）。'
- en: '****World****. The World tab lets you define the scene’s background, as well
    as the world lighting options, such as environment lighting and ambient occlusion.
    (We’ll discuss this in more detail in [Chapter 13](ch13.html "Chapter 13. Lighting").)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '****世界****。世界标签让您定义场景的背景，以及世界照明选项，例如环境光照和环境遮蔽。（我们将在[第13章](ch13.html "第13章.
    照明")中详细讨论此内容。）'
- en: '****Object****. The Object tab (see [Figure 1-2](ch01.html#panels_within_the_properties_editor
    "Figure 1-2. Panels within the Properties editor")) lets you set an object’s transformations
    manually by using numerical values rather than moving the object about in the
    3D Viewport. You can manage an object’s group membership as well as how it is
    displayed. (We’ll use groups in [Chapter 9](ch09.html "Chapter 9. Hair and Particle
    Systems") to duplicate multiple objects using particle systems.)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '****对象****。对象标签（参见[图1-2](ch01.html#panels_within_the_properties_editor "图1-2.
    属性编辑器中的面板")）让您通过使用数值而非在3D视图中移动对象来手动设置对象的变换。您可以管理对象的组成员身份以及它的显示方式。（我们将在[第9章](ch09.html
    "第9章. 头发与粒子系统")中使用组来通过粒子系统复制多个对象。）'
- en: '****Object Constraints****. The Object Constraints tab contains an object’s
    constraints stack. This is useful for animation but not a topic that we’ll cover.
    (See the Blender wiki at *[http://wiki.blender.org/](http://wiki.blender.org/)*
    for more on constraints.)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '****对象约束****。对象约束标签包含对象的约束堆栈。这对于动画非常有用，但不是我们将要讨论的话题。（有关约束的更多信息，请参阅Blender维基上的*
    [http://wiki.blender.org/](http://wiki.blender.org/)*。）'
- en: '****Object Modifiers****. This tab contains an object’s modifiers stack and
    lets you add new modifiers. Modifiers are procedural, nondestructive methods for
    manipulating and generating a mesh’s geometry. As you add new modifiers to an
    object, they are applied in the order they appear in the stack (from top to bottom).
    (We’ll discuss modifiers in more detail in [Chapter 4](ch04.html "Chapter 4. Blocking
    In") and [Chapter 5](ch05.html "Chapter 5. Modeling the Details").)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '****对象修改器****。此标签包含对象的修改器堆栈，允许您添加新的修改器。修改器是用于操作和生成网格几何形状的程序化、无损方法。当您向对象添加新修改器时，它们会按在堆栈中的顺序（从上到下）应用。（我们将在[第4章](ch04.html
    "第4章. 填充框架")和[第5章](ch05.html "第5章. 细节建模")中详细讨论修改器。）'
- en: '****Object Data****. The Object Data tab lets you set which datablock the active
    object uses and exposes the different sets of data assigned to this datablock
    (see [Datablocks](ch01.html#datablocks "Datablocks")). The contents of this tab
    vary according to the object’s type. For example, in the case of a mesh object,
    this tab will display the mesh’s vertex groups, shape keys, and UV coordinate
    sets, whereas for a lamp object, it will contain the lamp’s color, energy, and
    shadow settings. The icon for this tab also changes to match the active object’s
    type: For mesh objects, the icon is a cube; for lamps, a light; and so on. The
    Object Data tab will come up throughout this book.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '****对象数据****。对象数据标签让您设置活动对象使用的数据库块，并展示分配给该数据库块的不同数据集（参见[数据块](ch01.html#datablocks
    "数据块")）。该标签的内容根据对象的类型而变化。例如，在网格对象的情况下，该标签会显示网格的顶点组、形状键和UV坐标集，而在灯光对象的情况下，它将包含灯光的颜色、能量和阴影设置。此标签的图标也会根据活动对象的类型变化：对于网格对象，图标是一个立方体；对于灯光，图标是一个光源；等等。本书将在多个章节中出现对象数据标签。'
- en: '****Material****. The Materials tab displays an object’s material slots and
    the materials assigned to them. Here, you can edit the basic properties of the
    materials you create, turn on or off different shading options, and adjust the
    properties of an object’s material.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '****材质****。材质标签显示对象的材质槽和分配给它们的材质。在这里，您可以编辑创建的材质的基本属性，开启或关闭不同的阴影选项，并调整对象材质的属性。'
- en: '****Textures****. The Textures tab complements the Materials panel. It lets
    you assign textures to a material, define how textures affect the properties of
    a material, and determine how they are mapped to an object’s surface. (We’ll cover
    this tab in more detail in [Chapter 12](ch12.html "Chapter 12. Materials").) You
    can also use the Textures tab to assign textures to your world background or to
    particle systems.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '****纹理****。纹理选项卡是材质面板的补充。它允许你为材质分配纹理，定义纹理如何影响材质的属性，并确定它们如何映射到对象表面。（我们将在[第12章](ch12.html
    "第12章：材质")中更详细地讨论此选项卡。）你还可以使用纹理选项卡为世界背景或粒子系统分配纹理。'
- en: '****Particles****. The Particles tab allows you to assign particle systems
    to an object and define their properties. Blender has two kinds of particle systems:
    dynamic emitter particles and hair particles. In [Chapter 9](ch09.html "Chapter 9. Hair
    and Particle Systems"), we’ll discuss using hair particles to create hair, fur,
    and foliage, and we’ll review the settings for hair particles in more detail.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '****粒子****。粒子选项卡允许你为对象分配粒子系统并定义其属性。Blender有两种粒子系统：动态发射粒子和毛发粒子。在[第9章](ch09.html
    "第9章：毛发与粒子系统")中，我们将讨论如何使用毛发粒子创建毛发、皮毛和植被，并且我们将更详细地回顾毛发粒子的设置。'
- en: '****Physics****. The Physics tab contains tools for simulations, allowing you
    to simulate smoke, fluids, cloth, and rigid and soft body physics. (Learn more
    about these options on the Blender wiki.)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '****物理****。物理选项卡包含用于模拟的工具，允许你模拟烟雾、流体、布料以及刚体和软体物理。（在Blender Wiki中了解更多关于这些选项的信息。）'
- en: The Info Editor
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 信息编辑器
- en: The Info editor (see [Figure 1-6](ch01.html#info_editor_header "Figure 1-6. The
    Info editor header")) looks like a regular menu bar, but it’s actually an editor,
    like the 3D Viewport and the Properties editor. It’s usually kept scaled down
    to show just the header, which is its most important part. The header contains
    various menus, including the File menu, the Help menu, and menus for adding objects
    and rendering.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 信息编辑器（见[图1-6](ch01.html#info_editor_header "图1-6. 信息编辑器头部")）看起来像一个常规的菜单栏，但实际上它是一个编辑器，就像3D视图和属性编辑器一样。它通常保持缩小，仅显示头部，这是最重要的部分。头部包含多个菜单，包括文件菜单、帮助菜单，以及添加对象和渲染的菜单。
- en: The drop-down menu selectors to the right of these menus let you change the
    window layout (discussed above) and the current scene (discussed in [Scenes](ch01.html#scenes
    "Scenes")). Next to these selectors, a drop-down menu allows you to select which
    render engine to use. (See [Chapter 12](ch12.html "Chapter 12. Materials"), [Chapter 13](ch13.html
    "Chapter 13. Lighting"), and [Chapter 14](ch14.html "Chapter 14. Rendering and
    Compositing") for discussions of Blender’s two native render engines.)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这些菜单右侧的下拉菜单选择器允许你更改窗口布局（上文讨论）和当前场景（在[场景](ch01.html#scenes "场景")中讨论）。在这些选择器旁边，一个下拉菜单允许你选择要使用的渲染引擎。（有关Blender两个本地渲染引擎的讨论，请参见[第12章](ch12.html
    "第12章：材质")、[第13章](ch13.html "第13章：灯光")和[第14章](ch14.html "第14章：渲染与合成")。）
- en: After the render engine drop-down menu, you’ll find several pieces of information,
    including the version of Blender you are using and some information about the
    scene. From left to right, the scene information includes the vertex count (Verts);
    face count (Faces); number of objects in the scene (Objects); number of lamps
    (Lamps); the scene’s memory consumption; and the name of the currently selected
    object.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在渲染引擎下拉菜单之后，你会看到几项信息，包括你使用的Blender版本以及一些场景信息。从左到右，场景信息包括顶点数（Verts）；面数（Faces）；场景中的对象数量（Objects）；灯光数量（Lamps）；场景的内存使用情况；以及当前选中对象的名称。
- en: If you drag down the border of the Info editor, you will see that Blender uses
    the rest of the editor to provide a log of your actions as Python commands. This
    information provides a glimpse into the behind-the-scenes workings of Blender’s
    Python API (application programming interface) as you work, and it can be most
    helpful when creating Python scripts. However, since we won’t need Blender’s scripting
    features for any of the projects in this book, it can remain hidden most of the
    time.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你拖动信息编辑器的边框，你将看到Blender使用剩余的编辑器区域提供你的操作日志，作为Python命令。此信息提供了Blender Python
    API（应用程序编程接口）背后工作原理的一瞥，并且在创建Python脚本时非常有帮助。然而，由于本书中的任何项目都不需要Blender的脚本功能，因此它大多数时候可以保持隐藏。
- en: '![The Info editor header](httpatomoreillycomsourcenostarchimages1538264.png.jpg)Figure 1-6. The
    Info editor header'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![信息编辑器头部](httpatomoreillycomsourcenostarchimages1538264.png.jpg)图1-6. 信息编辑器头部'
- en: The Node Editor
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 节点编辑器
- en: The Node editor is a multipurpose editor for anything that is (or can be) constructed
    with nodes. This includes the compositor, which uses nodes by default, as well
    as node materials and textures, which may or may not be node based. You can switch
    between viewing Blender’s various node setups by clicking icons in the Node editor’s
    header (see [Figure 1-7](ch01.html#node_editor_header "Figure 1-7. The Node editor
    header")). The header’s main region displays the current node setup on a grid,
    allowing you to add, delete, or move nodes and to view and edit their connections.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 节点编辑器是一个多功能编辑器，用于任何可以用节点构建的内容。这包括默认使用节点的合成器，以及可能基于节点或不基于节点的节点材质和纹理。你可以通过点击节点编辑器头部的图标来切换
    Blender 中的各种节点设置（参见 [图1-7](ch01.html#node_editor_header "图1-7. 节点编辑器头部")）。头部的主要区域以网格形式显示当前的节点设置，允许你添加、删除或移动节点，并查看和编辑它们的连接。
- en: We’ll look at the Node editor in more detail in [Chapter 12](ch12.html "Chapter 12. Materials")
    when we create node-based materials for the Cycles render engine and in [Chapter 14](ch14.html
    "Chapter 14. Rendering and Compositing") when we create node trees for compositing.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 [第12章](ch12.html "第12章. 材质") 中更详细地查看节点编辑器，届时我们将为 Cycles 渲染引擎创建基于节点的材质，并在
    [第14章](ch14.html "第14章. 渲染与合成") 中创建合成节点树。
- en: The UV Image Editor
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: UV 图像编辑器
- en: The UV Image editor is the 2D equivalent of the 3D Viewport. Here, you can view
    images (Image ▸ Open Image from the header or select an already loaded image from
    the image selector drop-down menu) and edit the UV coordinates of unwrapped meshes.
    While rendering, Blender displays the current render in a UV Image editor. Use
    the drop-down menu to view the most recent render or to view the viewer outputs
    of compositing node trees. We’ll discuss the UV Image editor in more detail in
    [Chapter 3](ch03.html "Chapter 3. Preparation"), [Chapter 8](ch08.html "Chapter 8. UV
    Unwrapping"), [Chapter 10](ch10.html "Chapter 10. Texture Baking"), [Chapter 11](ch11.html
    "Chapter 11. Texture Painting"), and [Chapter 14](ch14.html "Chapter 14. Rendering
    and Compositing").
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: UV 图像编辑器是 3D 视口的 2D 对应版本。在这里，你可以查看图像（从头部菜单选择“图像 ▸ 打开图像”或从图像选择器下拉菜单中选择已加载的图像），并编辑展开网格的
    UV 坐标。在渲染过程中，Blender 会在 UV 图像编辑器中显示当前的渲染图像。使用下拉菜单查看最近的渲染结果或查看合成节点树的查看输出。我们将在 [第3章](ch03.html
    "第3章. 准备工作")、[第8章](ch08.html "第8章. UV 展开")、[第10章](ch10.html "第10章. 纹理烘焙")、[第11章](ch11.html
    "第11章. 纹理绘制") 和 [第14章](ch14.html "第14章. 渲染与合成") 中更详细地讨论 UV 图像编辑器。
- en: '![The Node editor header](httpatomoreillycomsourcenostarchimages1538266.png.jpg)Figure 1-7. The
    Node editor header'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '![节点编辑器头部](httpatomoreillycomsourcenostarchimages1538266.png.jpg)图1-7. 节点编辑器头部'
- en: Other Editors
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他编辑器
- en: Blender has several other types of editors. We’ll cover some in this book, but
    we’ll leave out ones like the Graph editor, which is tailored to animation, and
    the Logic editor, which is tailored to Blender’s game engine. For more on these
    editors, see the Blender wiki (*[http://wiki.blender.org/](http://wiki.blender.org/)*).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Blender 还有几种其他类型的编辑器。本书将介绍其中的一些，但会省略如图形编辑器（专门用于动画）和逻辑编辑器（专门用于 Blender 游戏引擎）等编辑器。有关这些编辑器的更多信息，请参见
    Blender wiki (*[http://wiki.blender.org/](http://wiki.blender.org/)*)。
- en: Using Blender
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Blender
- en: Now that we have some knowledge of Blender’s UI, we can learn how to actually
    use Blender. We’ll look at the default *.blend* file and then explore working
    with objects in the 3D Viewport and the Properties editor. We’ll also examine
    how Blender files are constructed, which will help us when working on our projects.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 Blender 的用户界面，我们可以学习如何实际使用 Blender。我们将首先查看默认的 *.blend* 文件，然后探索如何在
    3D 视口和属性编辑器中操作物体。我们还将研究 Blender 文件的构造方式，这将帮助我们在实际项目中工作。
- en: Scenes
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 场景
- en: There is a hierarchical structure to *.blend* files (see [Datablocks](ch01.html#datablocks
    "Datablocks")), at the top of which is a *scene*. A *.blend* file can contain
    one scene or many. Each scene is its own separate 3D space where you can create
    objects and build your project, and each scene has its own settings that define
    how it is rendered.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*.blend* 文件具有层级结构（参见 [数据块](ch01.html#datablocks "Datablocks")），其顶部是一个 *场景*。一个
    *.blend* 文件可以包含一个或多个场景。每个场景是一个独立的 3D 空间，你可以在其中创建物体并构建你的项目，每个场景都有自己的设置，用于定义如何渲染它。'
- en: The current scene is shown in the info header at the top of the Blender window,
    next to the current layout (see [Figure 1-8](ch01.html#current_scene_is_displayed_in_the_info_h
    "Figure 1-8. The current scene is displayed in the info header.")). To create
    a new scene in a *.blend* file, click the + icon to the right of the current scene’s
    name. Blender will ask you whether you want to create an empty scene or copy data
    from the current one. Although it can be useful to create extra scenes when working
    with more complex projects, we’ll use one scene per *.blend* file for each project
    in this book.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当前场景显示在Blender窗口顶部的信息头部，位于当前布局旁边（见[图 1-8](ch01.html#current_scene_is_displayed_in_the_info_h
    "图 1-8. 当前场景显示在信息头部")）。要在*.blend*文件中创建一个新场景，点击当前场景名称右侧的+图标。Blender会询问你是否要创建一个空的场景或从当前场景复制数据。尽管在处理更复杂的项目时创建额外的场景可能很有用，但在本书的每个项目中，我们将为每个*.blend*文件使用一个场景。
- en: '![The current scene is displayed in the info header.](httpatomoreillycomsourcenostarchimages1538268.png.jpg)Figure 1-8. The
    current scene is displayed in the info header.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![当前场景显示在信息头部](httpatomoreillycomsourcenostarchimages1538268.png.jpg)图 1-8.
    当前场景显示在信息头部'
- en: The Default .blend File
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 默认的 .blend 文件
- en: 'When you first open Blender, you are presented with a single, simple scene
    (as shown in [Figure 1-1](ch01.html#blenderapostrophes_default_ui_layoutdot "Figure 1-1. Blender’s
    default UI layout. The window is broken down into different editors (orange),
    which are then further split into regions (green).")). By default, this scene
    contains three objects: a cube, a lamp, and a camera. These objects are all that
    is required to get a simple render of something more than a blank background.
    The camera tells Blender what viewpoint it should render, the cube provides something
    for the camera to view, and the lamp illuminates the cube and makes it appear
    as more than a simple black silhouette.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当你首次打开Blender时，你会看到一个简单的场景（如[图 1-1](ch01.html#blenderapostrophes_default_ui_layoutdot
    "图 1-1. Blender的默认UI布局。窗口被分成不同的编辑器（橙色），然后进一步分为多个区域（绿色）。")所示）。默认情况下，这个场景包含三个对象：一个立方体、一个灯光和一个相机。这些对象足以进行一个简单的渲染，展示出比空白背景更多的内容。相机告诉Blender应渲染哪个视角，立方体为相机提供了可视的物体，而灯光则照亮了立方体，使其呈现出比单纯的黑色剪影更多的细节。
- en: However, a gray cube on a gray background doesn’t make for the most interesting
    of renders. To create something more interesting, we need to create our own objects
    to replace these rather dull ones.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一个灰色的立方体和灰色的背景并不是最有趣的渲染效果。为了创建更有趣的内容，我们需要创建自己的对象来替代这些单调的对象。
- en: Adding Objects
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加对象
- en: To add an object to your scene, place your cursor over the 3D Viewport and press
    SHIFT-A to bring up the Add menu. Here, you can add any object type that Blender
    supports, including meshes, curves, empties, lamps, cameras, and so on. (We’ll
    discuss these object types as we progress through the book.)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要向场景中添加一个对象，将光标放置在3D视图窗口上，然后按下SHIFT-A调出添加菜单。在这里，你可以添加Blender支持的任何对象类型，包括网格、曲线、空对象、灯光、相机等。（我们将在书中的后续部分讨论这些对象类型。）
- en: The 3D Cursor
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3D光标
- en: New objects will be added at the location of the 3D cursor, which is Blender’s
    easily configurable way of quickly defining a point in space. The 3D cursor (shown
    in [Figure 1-9](ch01.html#threed_cursor-id00004 "Figure 1-9. The 3D cursor"))
    is where new objects will be added by default. You can also set transform operators,
    such as rotation and scaling, to use the 3D cursor as the pivot or origin point
    for the operator.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 新对象将被添加到3D光标的位置，3D光标是Blender快速定义空间中一个点的易于配置的方式。3D光标（如[图 1-9](ch01.html#threed_cursor-id00004
    "图 1-9. 3D光标")所示）是默认情况下新对象添加的位置。你还可以设置变换操作符（如旋转和缩放），以使用3D光标作为操作的枢轴点或原点。
- en: '![The 3D cursor](httpatomoreillycomsourcenostarchimages1538270.png.jpg)Figure 1-9. The
    3D cursor'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '![3D光标](httpatomoreillycomsourcenostarchimages1538270.png.jpg)图 1-9. 3D光标'
- en: By clicking within the 3D Viewport, you can move the 3D cursor to wherever you
    click (the cursor’s distance from your viewpoint will remain the same). You can
    also move the 3D cursor by changing its location values in the 3D Cursor panel
    of the Properties region of the 3D Viewport. (If you lose the 3D cursor or simply
    want to reset it to the scene’s origin, press SHIFT-C to reset the 3D Viewport’s
    view and place the 3D cursor at the scene’s origin.)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在3D视图窗口中点击，你可以将3D光标移动到你点击的位置（光标与视点的距离将保持不变）。你还可以通过在3D视图窗口的属性区域的3D光标面板中更改其位置值来移动3D光标。（如果你丢失了3D光标或只是想将其重置到场景的原点，按下SHIFT-C重置3D视图窗口的视图，并将3D光标放置在场景的原点位置。）
- en: Selecting Objects
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择对象
- en: To select an object, right-click it. To select multiple objects, SHIFT-right-click
    them. Selected objects are outlined in orange by default. The most recently selected
    object is called the *active* object and is outlined in brighter orange than the
    rest of your selection. The properties of the active object are the ones that
    will appear in the Properties editor. Most operators use or act on the active
    object, though some act on your whole selection.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择一个对象，右键点击它。要选择多个对象，按住SHIFT键并右键点击它们。默认情况下，选中的对象会用橙色轮廓显示。最近选中的对象称为*活动对象*，它的橙色轮廓比其他选中的对象更亮。活动对象的属性会出现在属性编辑器中。大多数操作符使用或作用于活动对象，但有些操作符会作用于整个选择。
- en: Manipulating Objects
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 操作对象
- en: 'There are several ways to manipulate objects in the 3D Viewport. Perhaps the
    simplest way is to use the keyboard shortcuts: **G** to move, **R** to rotate,
    and **S** to scale. You can also use the manipulator widget (see [Figure 1-10](ch01.html#three_functions_of_the_manipulator_widge
    "Figure 1-10. The three functions of the manipulator widget: translate, rotate,
    and scale")) to manipulate objects by clicking and dragging one of its three handles
    to manipulate one axis or by clicking and dragging the white circle in the middle
    to manipulate the object on any axis.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在 3D 视口中操作对象有几种方法。最简单的方法可能是使用键盘快捷键：**G** 移动，**R** 旋转，**S** 缩放。你也可以使用操控器小部件（参见[图
    1-10](ch01.html#three_functions_of_the_manipulator_widge "图 1-10. 操控器小部件的三种功能：平移、旋转和缩放")），通过点击并拖动其三个控件之一来操作一个轴，或通过点击并拖动中间的白色圆圈来在任意轴上操作对象。
- en: 'By default, the manipulator appears as three colored arrows. Click and drag
    on the arrows to move your selected objects in the directions they point (along
    the global *x*-, *y*-, and *z*-axes by default). Use the icons in the 3D Viewport
    header to have the manipulator widget let you rotate or scale objects instead
    of move them (see [Figure 1-10](ch01.html#three_functions_of_the_manipulator_widge
    "Figure 1-10. The three functions of the manipulator widget: translate, rotate,
    and scale")).'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，操控器以三种颜色的箭头呈现。点击并拖动箭头，可以在箭头指示的方向上移动选中的对象（默认沿着全局的*x*、*y*和*z*轴）。使用 3D 视口头部的图标，可以让操控器小部件让你旋转或缩放对象，而不是移动它们（参见[图
    1-10](ch01.html#three_functions_of_the_manipulator_widge "图 1-10. 操控器小部件的三种功能：平移、旋转和缩放")）。
- en: By default, when in Object mode, Blender uses the object’s local coordinate
    origin (see [Figure 1-11](ch01.html#choosing_different_pivot_points_for_the "Figure 1-11. Choosing
    different pivot points for the 3D manipulator widget")) as the position of the
    manipulator widget. To change the pivot center of an operator, use the Pivot Center
    option in the 3D Viewport header. You can switch between using the median point
    of the selected objects origins (the default), the origin of the active object,
    the individual origins of each object in your selection, the 3D cursor, and the
    center of a hypothetical bounding box drawn around all selected objects. This
    not only moves the manipulator widget but also uses the selected pivot center
    for any transformations or operators you do using keyboard shortcuts or the mouse.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，在对象模式下，Blender 使用对象的本地坐标原点（参见[图 1-11](ch01.html#choosing_different_pivot_points_for_the
    "图 1-11. 为 3D 操控器小部件选择不同的支点")) 作为操控器小部件的位置。要更改操作符的支点中心，使用 3D 视口头部的支点中心选项。你可以在使用选中对象原点的中位点（默认）、活动对象的原点、选中对象中每个对象的独立原点、3D
    光标和一个假设的围绕所有选中对象绘制的包围盒中心之间切换。这不仅会移动操控器小部件，还会在你使用键盘快捷键或鼠标执行任何变换或操作时，使用选中的支点中心。
- en: '![The three functions of the manipulator widget: translate, rotate, and scale](httpatomoreillycomsourcenostarchimages1538272.png.jpg)Figure 1-10. The
    three functions of the manipulator widget: translate, rotate, and scale'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![操控器小部件的三种功能：平移、旋转和缩放](httpatomoreillycomsourcenostarchimages1538272.png.jpg)图
    1-10. 操控器小部件的三种功能：平移、旋转和缩放'
- en: In [Chapter 4](ch04.html "Chapter 4. Blocking In") and [Chapter 5](ch05.html
    "Chapter 5. Modeling the Details"), we’ll examine manipulating objects, meshes,
    and curves in more detail.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.html "第4章. 阻塞")和[第5章](ch05.html "第5章. 细节建模")中，我们将更详细地探讨操作对象、网格和曲线。
- en: Other Coordinate Systems
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他坐标系统
- en: '![Choosing different pivot points for the 3D manipulator widget](httpatomoreillycomsourcenostarchimages1538274.png.jpg)Figure 1-11. Choosing
    different pivot points for the 3D manipulator widget![Global and local coordinates](httpatomoreillycomsourcenostarchimages1538276.png.jpg)Figure 1-12. Global
    and local coordinates'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![选择不同的枢轴点用于3D操作小部件](httpatomoreillycomsourcenostarchimages1538274.png.jpg)图
    1-11. 选择不同的枢轴点用于3D操作小部件![全局和局部坐标](httpatomoreillycomsourcenostarchimages1538276.png.jpg)图
    1-12. 全局和局部坐标'
- en: The coordinate system described in [Coordinates in 3D and the Grid Floor](ch01.html#coordinates_in_3d_and_the_grid_floor
    "Coordinates in 3D and the Grid Floor") is defined relative to the scene’s origin,
    and its coordinates are referred to as *global coordinates*. These are universal
    to the scene. However, objects also have their own individual coordinate systems
    and their own origins (the latter being indicated by a small orange circle when
    you have the object selected). These coordinates are called the object’s *local
    coordinates*, and they may match up with the scene’s global coordinates or they
    may not (see [Figure 1-12](ch01.html#global_and_local_coordinates "Figure 1-12. Global
    and local coordinates")). For example, when you move an object in Object mode,
    you move its local coordinate origin along with it, and when you scale or rotate
    it, you scale or rotate its local coordinate axes. This may sound confusing, but
    it has an important purpose. The positions of the vertices of a mesh (that you
    can edit in Edit mode) are defined relative to the object’s local coordinates.
    This means that however you move, scale, or rotate an object in Object mode, the
    mesh’s vertices remain unchanged in terms of their local coordinates. We’ll use
    this to our advantage later when creating multiple duplicates of objects, which
    will share the same mesh data and local coordinates but also be able to be scaled
    and rotated independently of one another in Blender’s global coordinates.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在[《3D坐标与网格地面》](ch01.html#coordinates_in_3d_and_the_grid_floor "3D坐标与网格地面")中描述的坐标系统是相对于场景原点定义的，其坐标被称为*全局坐标*。这些坐标对整个场景都是通用的。然而，物体也有自己的坐标系统和原点（当你选择物体时，后者通过一个小橙色圆圈表示）。这些坐标被称为物体的*局部坐标*，它们可能与场景的全局坐标相匹配，也可能不匹配（见[图
    1-12](ch01.html#global_and_local_coordinates "图 1-12. 全局和局部坐标")）。例如，当你在对象模式下移动物体时，你会连同物体一起移动其局部坐标原点，当你对其进行缩放或旋转时，你也会缩放或旋转其局部坐标轴。这可能听起来有些混乱，但它有着重要的作用。网格的顶点位置（你可以在编辑模式下编辑）是相对于物体的局部坐标定义的。这意味着无论你在对象模式下如何移动、缩放或旋转物体，网格的顶点在局部坐标上保持不变。我们稍后会利用这一点，在创建多个物体副本时，这些副本将共享相同的网格数据和局部坐标，但也能够在Blender的全局坐标中独立缩放和旋转。
- en: In [Figure 1-12](ch01.html#global_and_local_coordinates "Figure 1-12. Global
    and local coordinates"), two identical monkey head meshes have been created. The
    first has been moved in Object mode so that its origin is no longer at the global
    origin, but its axes still point in the same directions as the global coordinate
    axes. The second has been moved and also rotated so that neither its origin nor
    the directions of its local coordinate axes match up with the global coordinates.
    With respect to the objects’ meshes, however, the local coordinates still point
    in the same directions—the *y*-axis out of the top of the monkey’s head and the
    *x*-axis out from its left ear.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 1-12](ch01.html#global_and_local_coordinates "图 1-12. 全局和局部坐标")中，创建了两个相同的猴头网格。第一个已经在对象模式下被移动，因此它的原点不再位于全局原点，但它的坐标轴仍然指向与全局坐标轴相同的方向。第二个则被移动并旋转，因此它的原点和局部坐标轴的方向都与全局坐标不匹配。然而，就物体的网格而言，局部坐标仍然指向相同的方向——*y*轴指向猴头的顶部，*x*轴指向它的左耳。
- en: You can view an object’s local coordinates by going to the Object tab of the
    Properties editor and enabling the Axis setting in the Display panel.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过进入属性编辑器的对象标签页，并在显示面板中启用轴设置，来查看对象的局部坐标。
- en: Operators
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 操作符
- en: Translation, rotation, and scaling are among the simplest ways to interact with
    an object. Other simple ways include deleting an object (**X**), hiding it (**H**),
    or duplicating it (SHIFT-D). These and similar actions are all *operators*. We’ll
    cover a much greater range of operators in [Chapter 4](ch04.html "Chapter 4. Blocking
    In") when we begin modeling, and we’ll continue to expand this repertoire of operators
    throughout the book.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Datablocks
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Everything in Blender is built out of *datablocks*, which are simply chunks
    of data. All of Blender’s objects, meshes, materials, textures, and images are
    different types of datablocks. Even the scene itself is a datablock that points
    to the datablocks that make up its contents.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Datablocks are arranged hierarchically. For example, a scene datablock will
    contain object datablocks, which reference mesh datablocks. Mesh datablocks, in
    turn, reference material texture blocks, and so on. This structure is shown in
    [Figure 1-13](ch01.html#blenderapostrophes_datablock_structure "Figure 1-13. Blender’s
    datablock structure").
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: The top of the Properties editor’s Object Data tab displays the datablock used
    by the active object. Click the icon to the left of the datablock’s name to change
    the datablock used (see [Figure 1-14](ch01.html#examining_object_datadot_herecomma_a_cub
    "Figure 1-14. Examining object data. Here, a cube object uses a mesh datablock
    named “Cube.” Other datablocks can be selected to change the mesh that the object
    uses. The number of users a datablock has is shown to the right of its name.")).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '![Blender’s datablock structure](httpatomoreillycomsourcenostarchimages1538278.png.jpg)Figure 1-13. Blender’s
    datablock structure![Examining object data. Here, a cube object uses a mesh datablock
    named “Cube.” Other datablocks can be selected to change the mesh that the object
    uses. The number of users a datablock has is shown to the right of its name.](httpatomoreillycomsourcenostarchimages1538280.png.jpg)Figure 1-14. Examining
    object data. Here, a cube object uses a mesh datablock named “Cube.” Other datablocks
    can be selected to change the mesh that the object uses. The number of users a
    datablock has is shown to the right of its name.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Defining objects as datablocks allows you to easily copy and duplicate objects
    within Blender. For example, you can create a regular duplicate by pressing SHIFT-D,
    which creates a new object with a copy of the original’s datablock. (You can edit
    this duplicate without affecting the original.) You can also create a linked duplicate
    with ALT-D. The linked duplicate uses the *same* datablock as the original, which
    means that when you edit one duplicate, the other is updated identically. (We’ll
    use this technique in later chapters to save time when working on multiple copies
    of the same object.)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: The same goes for other kinds of datablocks. For example, in the case of materials
    and textures, you can assign the same material to multiple objects or the same
    texture to multiple materials, to save time and to avoid having to create unique
    materials and textures for every object. Of course, this feature also means that
    we have to keep track of which object is using which datablocks and how many users
    a datablock has. To see how many users a datablock has, look next to its name
    in the drop-down menu where it is selected. Datablocks with multiple users will
    show how many users they have to the right of their name (see [Figure 1-14](ch01.html#examining_object_datadot_herecomma_a_cub
    "Figure 1-14. Examining object data. Here, a cube object uses a mesh datablock
    named “Cube.” Other datablocks can be selected to change the mesh that the object
    uses. The number of users a datablock has is shown to the right of its name.")).
    (Click this number to make a new, unique copy of that datablock.)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 其他类型的数据库块也是如此。例如，在材料和纹理的情况下，你可以将相同的材料分配给多个物体，或者将相同的纹理分配给多个材料，以节省时间并避免为每个物体创建独特的材料和纹理。当然，这个功能也意味着我们需要跟踪每个物体使用了哪些数据库块以及每个数据库块有多少个用户。要查看一个数据库块有多少个用户，查看它在下拉菜单中被选中的位置旁边。具有多个用户的数据库块会在名称的右侧显示它们的用户数量（见[图
    1-14](ch01.html#examining_object_datadot_herecomma_a_cub "图 1-14. 检查对象数据。这里，一个立方体对象使用名为“Cube”的网格数据库块。可以选择其他数据库块来更改对象使用的网格。数据库块的用户数量显示在名称的右侧。")）。(点击这个数字可以创建该数据库块的一个新的、独特的副本。)
- en: Datablocks with no users are deleted when you quit Blender. To keep a datablock
    that has no users, such as a material you might want to reuse or an earlier version
    of a mesh datablock, protect it by clicking the **F** icon next to the datablock’s
    name (see [Figure 1-14](ch01.html#examining_object_datadot_herecomma_a_cub "Figure 1-14. Examining
    object data. Here, a cube object uses a mesh datablock named “Cube.” Other datablocks
    can be selected to change the mesh that the object uses. The number of users a
    datablock has is shown to the right of its name.")). This creates a “fake” user
    so that the datablock will be saved along with your file.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 没有用户的数据库块在退出Blender时会被删除。为了保留一个没有用户的数据库块，比如你可能想要重用的材质，或是网格数据库块的早期版本，可以通过点击数据库块名称旁边的**F**图标来保护它（见[图
    1-14](ch01.html#examining_object_datadot_herecomma_a_cub "图 1-14. 检查对象数据。这里，一个立方体对象使用名为“Cube”的网格数据库块。可以选择其他数据库块来更改对象使用的网格。数据库块的用户数量显示在名称的右侧。")）。这会创建一个“虚拟”用户，以便数据库块能随文件一起保存。
- en: Naming Datablocks
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据库块命名
- en: To rename a datablock, click its name. When naming datablocks, it’s good practice
    to give them descriptive names to make it easier to pick a particular datablock
    from a list. Renaming your datablocks with descriptive words, such as *Wood*,
    *Red Paint*, *Skin*, and so on, will make your scene easier to navigate and understand
    later on.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要重命名一个数据库块，点击它的名称。在命名数据库块时，最好使用描述性的名称，以便更容易从列表中选择特定的数据库块。使用如*木材*、*红色油漆*、*皮肤*等描述性词汇来重命名你的数据库块，可以让你在以后更容易地浏览和理解场景。
- en: Modes
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: Blender has different modes for editing the different aspects of an object’s
    data. The default is Object mode, which lets you add and delete objects and also
    move, scale, and rotate them. Other modes let you edit mesh data and particle
    systems, sculpt on meshes, paint textures, and adjust vertex group weights.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Blender为编辑物体数据的不同方面提供了不同的模式。默认模式是对象模式，允许你添加和删除物体，同时进行移动、缩放和旋转。其他模式允许你编辑网格数据和粒子系统、在网格上雕刻、绘制纹理以及调整顶点组权重。
- en: Blender’s two most important modes are Object and Edit mode. To switch between
    them, use the hotkey TAB. To access other modes, click the Modes drop-down menu
    in the header of the 3D Viewport (see [Figure 1-5](ch01.html#blenderapostrophes_3d_viewport_in_detail
    "Figure 1-5. Blender’s 3D Viewport in detail")) and select the mode you want.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Blender最重要的两种模式是对象模式和编辑模式。要在它们之间切换，使用快捷键TAB。要访问其他模式，请点击3D视图窗口头部的模式下拉菜单（见[图 1-5](ch01.html#blenderapostrophes_3d_viewport_in_detail
    "图 1-5. Blender的3D视图窗口详细介绍")），然后选择你想要的模式。
- en: In [Chapter 4](ch04.html "Chapter 4. Blocking In") and [Chapter 5](ch05.html
    "Chapter 5. Modeling the Details"), we’ll use Edit mode extensively for modeling,
    and in [Chapter 6](ch06.html "Chapter 6. Sculpting"), we’ll use Sculpt mode. Then
    in [Chapter 8](ch08.html "Chapter 8. UV Unwrapping"), we’ll use Particle mode
    and Weight Paint mode to create and comb particle hair and paint vertex groups
    for controlling fur. Then, in [Chapter 11](ch11.html "Chapter 11. Texture Painting"),
    we’ll use Texture Paint mode to paint textures on our models.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 4 章](ch04.html "第 4 章：封锁")和[第 5 章](ch05.html "第 5 章：建模细节")中，我们将广泛使用编辑模式进行建模，而在[第
    6 章](ch06.html "第 6 章：雕刻")中，我们将使用雕刻模式。然后，在[第 8 章](ch08.html "第 8 章：UV 展开")中，我们将使用粒子模式和权重绘制模式来创建和整理粒子头发，并绘制顶点组以控制毛发。接着，在[第
    11 章](ch11.html "第 11 章：纹理绘制")中，我们将使用纹理绘制模式为我们的模型绘制纹理。
- en: Saving and Loading
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保存与加载
- en: Saving and loading in Blender works much the same way that it does in any application.
    Use **File**▸**Save** (CTRL-S) to save and **File**▸**Open** (CTRL-O) to open
    a file.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Blender 中，保存和加载的方式与任何应用程序类似。使用 **文件**▸**保存** (CTRL-S) 来保存，使用 **文件**▸**打开**
    (CTRL-O) 来打开文件。
- en: Blender saves files in a unique *.blend* format. By default, external files,
    such as images loaded into Blender, are not saved along with the *.blend* file
    but are referenced relative to the file. Thus, to open a *.blend* file on another
    computer, you need to copy over the *.blend* file plus all the other files it
    references and re-create the same directory structure before opening the *.blend*
    file. Alternatively, you can “pack” your *.blend* file, which saves external data
    such as images within the *.blend* file, so that you can then open up the *.blend*
    file on any machine and have all the data it needs.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Blender 将文件保存为独特的 *.blend* 格式。默认情况下，外部文件（如加载到 Blender 中的图像）不会与 *.blend* 文件一起保存，而是相对于文件进行引用。因此，要在另一台计算机上打开
    *.blend* 文件，你需要将 *.blend* 文件及其引用的所有其他文件一起复制，并在打开 *.blend* 文件之前重新创建相同的目录结构。或者，你可以“打包”你的
    *.blend* 文件，这样会将图像等外部数据保存在 *.blend* 文件内，之后你就可以在任何机器上打开 *.blend* 文件并获得所有需要的数据。
- en: Appending and Linking
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 附加与链接
- en: Blender lacks the standard copy-and-paste functionality for objects or other
    kinds of datablocks that you might expect from using more conventional applications.
    To copy an object, you can either duplicate it or simply reference the same datablock
    using an existing object. But what if you want to bring something in from an external
    *.blend* file?
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Blender 缺少你可能从使用更传统应用程序中期待的标准对象复制和粘贴功能。要复制一个对象，你可以选择将其复制或通过现有对象引用相同的数据块。但如果你想从外部
    *.blend* 文件中导入内容呢？
- en: That’s where the Append and Link features come in. Appending and linking let
    you bring datablocks from one *.blend* file into another. Append (File▸Append)
    brings the datablock wholly into the current *.blend* file as an independent copy
    of the original. Linking (File▸Link) *references* the original datablock in the
    other file. Linked datablocks cannot be edited in the .*blend* file they are linked
    into; rather, they must be edited in the original file.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这时，附加和链接功能就派上用场了。附加和链接让你可以将一个 *.blend* 文件中的数据块引入到另一个文件中。附加（文件▸附加）将数据块完整地引入当前的
    *.blend* 文件，作为原始文件的独立副本。链接（文件▸链接）则是*引用*另一个文件中的原始数据块。链接的数据块不能在它们被链接到的 *.blend*
    文件中编辑；相反，它们必须在原始文件中进行编辑。
- en: Appending is useful for quickly bringing an existing resource into your *.blend*
    file so that you can use and edit it. Linking is useful for combining multiple
    elements in larger projects when, for example, different people are editing various
    parts independently. By linking all the elements of a project into one scene,
    people can work on parts independently in separate *.blend* files, while keeping
    the final assembly of multiple linked objects up-to-date. (If you link a datablock
    and wish to edit it locally, make it into a local datablock using the Make Local
    operator (**L**).)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 附加适用于快速将现有资源引入到你的 *.blend* 文件中，以便使用和编辑。链接适用于在更大的项目中组合多个元素，例如当不同的人独立编辑不同部分时。通过将项目的所有元素链接到一个场景中，人们可以在独立的
    *.blend* 文件中独立工作，同时保持多个链接对象的最终合并最新。（如果你链接了一个数据块并希望在本地编辑它，可以使用“设为本地数据块”操作符 (**L**)
    将其变为本地数据块。）
- en: In Review
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter has offered a basic introduction to Blender. You’ve learned the
    basics of how to work with Blender’s user interface and essential tools. We looked
    at its UI terminology and its different editor types, explored the basics of adding
    and manipulating objects, and discussed how objects and datablocks work in Blender.
    We also looked at how to save and load files and import elements from one *.blend*
    file into another.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了Blender的基本介绍。你已经学会了如何使用Blender的用户界面和基本工具。我们回顾了它的UI术语和不同的编辑器类型，探索了添加和操作物体的基础知识，并讨论了物体和数据块在Blender中的工作原理。我们还了解了如何保存和加载文件，并将元素从一个*.blend*文件导入到另一个文件中。
- en: In the next chapter, we will move on to learning a little about GIMP, a free
    open source image-editing program that makes an ideal companion to Blender when
    you’re working on projects.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始学习一些关于GIMP的内容，它是一个免费的开源图像编辑程序，在你进行项目时，它是Blender的理想伴侣。
