- en: '**1'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: BUILDING APPS WITH APP INVENTOR**
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With App Inventor, you can quickly and easily build apps using some of the most
    exciting mobile technology available. App Inventor provides tools that control
    the look and feel of an app, add useful mobile computing functions, and set or
    program an app’s behavior.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll start to use these tools to build your first app, “Hi,
    World!”, which lets you text someone using voice recognition. You’ll also learn
    how to share your app with others.
  prefs: []
  type: TYPE_NORMAL
- en: '**PLANNING A NEW APP**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before you start building an app, you’ll need to figure out the app’s goal or
    what problem you want it to solve. Once you’ve done that, you can *decompose*
    your project, which means breaking down your goal into smaller parts that will
    be easier to tackle than trying to accomplish it all at once. This in turn will
    help you outline the precise steps, or *algorithm*, necessary to develop each
    part of the app before you start coding.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also identify the elements and features the app will need to perform
    properly and allow users to interact with it as you intend. For example, will
    the app let users take videos, send text messages, or sense their locations? Will
    a user need to click a button, enter text, or select from a list of options to
    complete those tasks? These are the kinds of questions that might help you determine
    the features you’ll need.
  prefs: []
  type: TYPE_NORMAL
- en: Once you know what to include in your app, you can lay out its *user interface*
    elements—the parts of the app that users can see and interact with on the screen.
    Your app should be easy for users to use and understand. To keep users’ attention,
    you might add pictures, colors, and different text styles.
  prefs: []
  type: TYPE_NORMAL
- en: '**LAYING OUT YOUR APP**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you have a plan, you’ll start by laying out the necessary components in
    the Designer. In App Inventor, *components* are all the visible and non-visible
    elements you can use in your app, including those that set the look and feel and
    add exciting functionality. All components have *properties*, or characteristics,
    that you can set and/or actions you can program.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll use User Interface components as well as Media and Social
    components to add speech recognition and texting capability to your app. Later
    in this book, you’ll use many more components to add features like video recording,
    location sensing, text-to-speech, animation, drawing, dragging, sound, picture
    taking, and more! For a detailed overview of available components, check out the
    appendix.
  prefs: []
  type: TYPE_NORMAL
- en: To lay out your app’s components, you’ll need to use App Inventor’s Designer
    window, shown in [Figure 1-1](ch01.xhtml#ch1fig1). The Designer window consists
    of a *Palette* pane to the left, which includes drawers of all possible components;
    a *Viewer* pane, where you can see the components you drag from the Palette and
    lay them out as they should appear on your app’s screen; a *Components* pane,
    which lists all components in your app and allows you to give them meaningful
    names; a *Media* pane that lists all the pictures, sound clips, and other media
    files you’ve uploaded to the app; and a *Properties* pane, where you set the initial
    characteristics of app components.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/01fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-1: The App Inventor Designer window*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING YOUR APP IN THE BLOCKS EDITOR**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you place all the necessary components in your app, use the Blocks Editor
    to program it according to your plan. Click the **Blocks** button shown in [Figure
    1-2](ch01.xhtml#ch1fig2) to open the Blocks Editor window.
  prefs: []
  type: TYPE_NORMAL
- en: The Blocks Editor window consists of the *Blocks* pane on the left and the *Viewer*
    pane on the right. The Blocks pane contains drawers for both *built-in blocks*,
    which program the app’s general behaviors, and *component-specific blocks*, which
    direct particular actions for each app component. To tell your app what to do,
    drag blocks from the drawers in the Blocks pane and snap them together in the
    Viewer.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/01fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-2: The Blocks Editor window*'
  prefs: []
  type: TYPE_NORMAL
- en: For a detailed overview of App Inventor’s built-in blocks, check out the appendix.
    In later chapters, you’ll explore component-specific blocks and the corresponding
    actions for a variety of components.
  prefs: []
  type: TYPE_NORMAL
- en: '**BUILDING THE “HI, WORLD!” APP**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first app you’ll create in this book is the “Hi, World!” app. The app’s
    name is a play on “Hello, World,” a common first script that computer science
    students write when learning programming languages. The script displays “Hello,
    World” on a screen, but the “Hi, World!” app is so much more useful because it
    uses the `SpeechRecognizer`, `PhoneNumberPicker`, and `Texting` components to
    let you text using voice recognition! You can use this type-free texting app to
    say a message aloud, select a person’s telephone number, and then text the person.
  prefs: []
  type: TYPE_NORMAL
- en: Log into App Inventor following the instructions outlined in “Getting Started
    with App Inventor” on [page xviii](intro.xhtml#page_xviii). If this is your first
    time logging in, you should see the notice in [Figure 1-3](ch01.xhtml#ch1fig3)
    letting you know that you don’t have any projects yet.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/01fig03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-3: The Start new project screen appears the first time you log into
    App Inventor.*'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Start new project** button near the top-left corner of the window.
    Clicking the button should open the dialog where you’ll enter the name for your
    first project. Enter HiWorld without any spaces, and click **OK**.
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve logged in and saved a project before, App Inventor should open to
    the last app you worked on. To start a new app, click **Projects ▸ Start new project**
    as shown in [Figure 1-4](ch01.xhtml#ch1fig4).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/01fig04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-4: The Start new project option in the Projects menu tab*'
  prefs: []
  type: TYPE_NORMAL
- en: In the dialog that opens, name the project by entering HiWorld without any spaces
    and click **OK**.
  prefs: []
  type: TYPE_NORMAL
- en: '**DECOMPOSING “HI, WORLD!”**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Before we start building the app, let’s outline the actions we want “Hi, World!”
    to perform. We want the app to text someone a message that the user says aloud.
    We can break this action down into three steps.
  prefs: []
  type: TYPE_NORMAL
- en: When a user clicks the message button, open the phone’s speech-to-text function
    and capture the user’s text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When a user clicks the `PhoneNumberPicker`, open the phone’s contact list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When a user clicks the text button, text the message converted by the speech-to-text
    function to the selected phone number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You’ll need the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: Button (2) for the user to click to start the action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image for app design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PhoneNumberPicker for the user to click to select a number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SpeechRecognizer to capture and convert speech to text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Texting to send the message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For each app we build throughout this book, we’ll use this format to decompose
    the action into manageable steps and identify the components we need to make it
    work.
  prefs: []
  type: TYPE_NORMAL
- en: '**LAYING OUT “HI, WORLD!” IN THE DESIGNER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now let’s think about how to lay out the app’s components and how to present
    instructions so the app is easy to use and understand.
  prefs: []
  type: TYPE_NORMAL
- en: For this app, the instructions to the user are so simple that we can include
    them on the `Button` and `PhoneNumberPicker` components, as long as those components
    are wide enough to display the text. To ensure that, we’ll make the width of all
    visible components (those that the user can see and interact with) equal to the
    width of the screen. This means that we won’t need to use a component from the
    Layout drawer to structure the screen display, because making everything the width
    of the screen requires us to place all components on top of each other. All we
    need to do is start with a picture at the top for visual effect and simply place
    the other components in the order we want users to interact with them.
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding the Components**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Go to the Designer to lay out the image and other components for all three parts
    of the app. Make sure you’re in the Designer window by clicking the **Designer**
    button, as shown in [Figure 1-5](ch01.xhtml#ch1fig5).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/01fig05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-5: Click the ***Designer*** button to open the Designer window where
    you’ll lay out the app components.*'
  prefs: []
  type: TYPE_NORMAL
- en: In the Designer window, drag the components you need from their drawers in the
    Palette pane to the Viewer pane. From the User Interface drawer, drag an Image
    and two Button components; from the Media drawer, drag a SpeechRecognizer component;
    and from the Social drawer, drag a PhoneNumberPicker component and a Texting component.
    Your screen should now look like [Figure 1-6](ch01.xhtml#ch1fig6).
  prefs: []
  type: TYPE_NORMAL
- en: In the Viewer pane, you should see all visible components on `Screen1` ➊ and
    the non-visible components under the screen ➋. In the Components pane ➌, you should
    see a list of all components you just dragged to the Viewer pane.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/01fig06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-6: The screen after you drag all “Hi, World!” app components to the
    Viewer pane*'
  prefs: []
  type: TYPE_NORMAL
- en: Now you can make adjustments to each visible component by clicking it in the
    Components pane. [Figure 1-7](ch01.xhtml#ch1fig7) shows what happens when you
    click `Image1`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/01fig07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-7: The Designer window after you click `Image1` in the Components
    pane*'
  prefs: []
  type: TYPE_NORMAL
- en: Once you click `Image1` in the Components pane, you should see buttons near
    the bottom of that pane ➊ that allow you to rename or delete the `Image1` component.
    In the Properties pane ➋, you should see all the properties for `Image1` that
    you can set in the Designer.
  prefs: []
  type: TYPE_NORMAL
- en: '**Resizing a Component’s Width**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Since you have only one image in this app, you don’t need to rename it. But
    you *do* need to change its size to make it the width of the screen. To resize
    `Image1`, in the Properties pane, click inside the text box under **Width** to
    open the dialog shown in [Figure 1-8](ch01.xhtml#ch1fig8).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/01fig08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-8: The Properties dialog that allows you to change a component’s
    width*'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Fill parent** radio button and then click **OK**. This should make
    the width of `Image1` fill the width of the screen, which is `Image1`’s *parent*,
    or the component that contains it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Uploading an Image**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Next, you’ll need to upload the picture you want to display as `Image1` on the
    app screen. To upload your image, click inside the text box under **Picture**
    and click the **Upload File …** button, shown on the left of [Figure 1-9](ch01.xhtml#ch1fig9),
    which should open the dialog shown on the right.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/01fig09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-9: The Picture and Upload File … dialogs*'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Choose File** button. The file manager should open to show the files
    on your computer and allow you to find the picture you want to upload, as shown
    in [Figure 1-10](ch01.xhtml#ch1fig10).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/01fig10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-10: The file manager window allows you to select a file from your
    computer.*'
  prefs: []
  type: TYPE_NORMAL
- en: Select the image you want to use, click the **Open** button, and then click
    **OK** on the Upload File … dialog shown in [Figure 1-9](ch01.xhtml#ch1fig9).
    You can download the sample image to use for this exercise, along with other materials
    that come with this book, at *[https://nostarch.com/programwithappinventor/](https://nostarch.com/programwithappinventor/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 1-11](ch01.xhtml#ch1fig11) shows what you should see after uploading
    the image.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/01fig11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-11: The Designer window after you upload an image in the Properties
    pane*'
  prefs: []
  type: TYPE_NORMAL
- en: You should now see the name of the picture listed in the Picture text box for
    `Image1` in the Properties pane ➌ and in the Media pane ➋. The uploaded picture
    should display on `Screen1` in the Viewer pane ➊.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating the Say a Message Button**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Now we’ll set the properties for `Button1` by clicking it in the Components
    pane. Since the app contains two `Button` components, let’s change the name of
    `Button1` to avoid confusion about each one’s function.
  prefs: []
  type: TYPE_NORMAL
- en: To rename `Button1`, click the **Rename** button near the bottom of the Components
    pane. That should open a Rename Component dialog, as shown in [Figure 1-12](ch01.xhtml#ch1fig12).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/01fig12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-12: The Rename Component dialog opens after you click the Rename
    button in the Components pane.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*When you rename a component, you change its default name to a more meaningful
    one that describes its function and is easily identifiable in the Designer window
    and Blocks Editor. Only you and the people you’ve shared your app code with will
    see a component’s name. Renaming a component is different from changing the display
    text on a component like a Button or Label, which your users actually see.*'
  prefs: []
  type: TYPE_NORMAL
- en: Enter SayMessageBtn without any spaces in the **New name:** text box and click
    **OK**. You should see that the `Button` name has changed to `SayMessageBtn` in
    the Components and Properties panes in the Designer window.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s make the width of the button fill the width of the screen as we did with
    `Image1`. To change the width of `SayMessageBtn` in the Properties pane, click
    inside the text box under **Width**, click the **Fill parent** radio button, and
    then click **OK**.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, let’s change the text to display on `SayMessageBtn` to provide clear
    instructions for the user. Click inside the text box under **Text** in the Properties
    pane. Delete the default `Text for Button1` and type 1\. Say a Message, and then
    click outside of the text box. [Figure 1-13](ch01.xhtml#ch1fig13) shows the new
    text on `SayMessageBtn` as well as the other changes you’ve made to its properties.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/01fig13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-13: The Designer window after you change the name, width, and text
    of `SayMessageBtn`*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll make similar changes to `Button2`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating the Text Your Message Button**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Rename `Button2` by clicking it and the **Rename** button in the Components
    pane, entering SendTextBtn without any spaces in the **New name:** text box, and
    then clicking **OK**. You can see that the button name has changed to `SendTextBtn`
    in the Components and Properties panes.
  prefs: []
  type: TYPE_NORMAL
- en: Next, to change the width of `SendTextBtn` in the Properties pane, click inside
    the text box under **Width**, click the **Fill parent** radio button, and then
    click **OK**. Finally, change the text on `SendTextBtn` to provide instructions
    for the app user.
  prefs: []
  type: TYPE_NORMAL
- en: To make the change, click inside the text box under **Text**, replace `Text
    for Button2` with 3\. Text Your Message, and then click outside of the text box.
    In the Viewer pane, you should now see all the changes you made to `SendTextBtn`,
    as shown in [Figure 1-14](ch01.xhtml#ch1fig14).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/01fig14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-14: The Designer window after you change the name, width, and text
    of `SendTextBtn`*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s update the app’s final visible component, `PhoneNumberPicker1`,
    which the user will use to decide whom to text.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating the Select a Number Button**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Click PhoneNumberPicker1 in the Components pane. In the Properties pane, to
    change its width as you’ve done with the other components, click the **Fill parent**
    radio button and then click **OK**. Also change the text on the component to provide
    instructions for the app user.
  prefs: []
  type: TYPE_NORMAL
- en: To make the change, replace the existing `Text for PhoneNumberPicker1` in the
    text box under **Text** with 2\. Select a Number, and then click outside of the
    text box. In the Viewer pane, you should see these changes to `PhoneNumberPicker1`.
  prefs: []
  type: TYPE_NORMAL
- en: Now all you need to do is move the `PhoneNumberPicker` component above `SendTextBtn`
    so that users will see the components in the order you want them to move through
    the app. We need the user to choose the recipient’s phone number before sending
    the text, so we move `PhoneNumberPicker1` up by clicking and dragging it up in
    the Viewer pane so that it comes before “3\. Text Your Message”. [Figure 1-15](ch01.xhtml#ch1fig15)
    shows what the app looks like so far.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/01fig15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-15: The Designer window after you change the width, text, and location
    of `PhoneNumberPicker1`*'
  prefs: []
  type: TYPE_NORMAL
- en: Try changing a few more properties to make the app even more visually appealing
    and user-friendly. For example, you can change the color of the `Button` components
    and `PhoneNumberPicker1` to the darkest color in your image, such as the darker
    green in my `Image1` component, and make the text bold, larger, and white so it’s
    easy to see on the new dark background. Let’s try that now.
  prefs: []
  type: TYPE_NORMAL
- en: '**Changing Button Color**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To change the background color of the `Button` and `PhoneNumberPicker1` components,
    click each component in the Properties pane and then click the word **Default**
    under `BackgroundColor` to open the color list dialog shown to the left in [Figure
    1-16](ch01.xhtml#ch1fig16).
  prefs: []
  type: TYPE_NORMAL
- en: If one of the colors in the list matches the darkest color in `Image1`, click
    the name of that color to select it. If none of the colors in the list work, click
    **Custom...** at the bottom of the list, which will open the color picker shown
    on the right in [Figure 1-16](ch01.xhtml#ch1fig16).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/01fig16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-16: The color list and custom color picker used to change colors
    of various component properties in the Properties pane*'
  prefs: []
  type: TYPE_NORMAL
- en: In the color picker, replace the current 000000 color number by entering the
    number of the color you want to use. For instance, you can enter 006600 for the
    darker green in my `Image1` component, as I’ve done here, and then click **Done**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Formatting Button Font**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Now make the text on each of the components bold by clicking the **FontBold**
    checkbox in the Properties pane, as shown in [Figure 1-17](ch01.xhtml#ch1fig17).
  prefs: []
  type: TYPE_NORMAL
- en: Make the text larger by replacing 14.0 with 20 in the **FontSize** text box.
    Finally, you can make the text color white by clicking the word **Default** under
    `TextColor` near the bottom of the Properties pane to open the color list, as
    shown in [Figure 1-17](ch01.xhtml#ch1fig17), and then clicking **White**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/01fig17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-17: The `SayMessageBtn` Properties pane, showing changes to the `Button`
    background and font*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING “HI, WORLD!” IN THE BLOCKS EDITOR**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve laid out all the components, you can move to the Blocks Editor
    to program the app. Click the **Blocks** button, as shown in [Figure 1-18](ch01.xhtml#ch1fig18),
    to switch to the Blocks Editor.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/01fig18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-18: The Designer window after you lay out the app*'
  prefs: []
  type: TYPE_NORMAL
- en: For the “Hi, World!” app, you’ll use only component-specific blocks to program
    the action. You’ll program in the order of steps outlined in “Decomposing ‘Hi,
    World!’” on [page 5](ch01.xhtml#page_5).
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 1: Converting from Speech to Text**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: We start by telling the app what to do when the user clicks `SayMessageBtn`,
    the “1\. Say a Message” button. When that button is clicked, we want the app to
    open the phone’s speech-to-text feature to capture and convert the user’s speech
    to text.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 1-19](ch01.xhtml#ch1fig19) shows how to program step 1.'
  prefs: []
  type: TYPE_NORMAL
- en: In the Blocks pane, click SayMessageBtn ➊ and, when the blocks for the component
    appear, drag the whenSayMessageBtn.Click block to the Viewer. Then, in the Blocks
    pane, click SpeechRecognizer1 ➋ and drag the callSpeechRecognizer1.GetText block
    to the Viewer. Snap the callSpeechRecognizer1.GetText block inside the whenSayMessageBtn.Click
    block next to the word `do`. In plain English, these blocks say, “when the button
    is clicked, open the phone’s speech recognizer to get text,” which is very similar
    to what we outlined when we decomposed the app.
  prefs: []
  type: TYPE_NORMAL
- en: Now we’ll live-test to see how these blocks work. It’s best to test this app
    on a working phone. If you try to test these blocks with the built-in emulator
    or with a device that doesn’t have speech-to-text capability, you’ll likely get
    an error when you click SayMessageBtn. Use the MIT AI2 Companion app on a phone,
    as outlined in “Live-Testing Your Apps” on [page xxii](intro.xhtml#page_xxii).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/01fig19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-19: The Blocks Editor window with code blocks dragged onto the Viewer
    to program `SayMessageBtn`*'
  prefs: []
  type: TYPE_NORMAL
- en: Once you click **Connect** ▸ **AI Companion** in the top menu bar and scan the
    QR code with your phone’s Companion app, your “Hi, World!” app should appear on
    your phone.
  prefs: []
  type: TYPE_NORMAL
- en: Click the **1\. Say a Message** button. The phone’s speech recognizer should
    open and prompt you to speak, as long as your phone’s speech-to-text capability
    is turned on and the blocks are laid out as shown in [Figure 1-19](ch01.xhtml#ch1fig19).
    So far, so good. Leave the app open on your phone so you can keep live-testing.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 2: Opening the User’s Contact List**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Now let’s program the second part of the app, telling it what to do when the
    user clicks the “2\. Select a Number” button. When the `PhoneNumberPicker` is
    clicked, we want the app to open the user’s contact list for selection. Here’s
    the code for programming this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0017-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the Blocks pane, click PhoneNumberPicker1, and when the blocks for the component
    appear, drag the whenPhoneNumberPicker1.TouchDown block ➊ to the Viewer. Then,
    in the Blocks pane, click PhoneNumberPicker1 again and drag the callPhoneNumberPicker1.Open
    block ➋ to the Viewer and snap it inside the whenPhoneNumberPicker1.TouchDown
    block next to the word `do`. In plain English, these blocks tell the app, “open
    the phone’s contact list when the phone number picker is touched,” like we planned.
  prefs: []
  type: TYPE_NORMAL
- en: Now live-test to see how these blocks work. Click **2\. Select a Number**. Your
    phone’s contact list and a prompt to select a contact should appear, assuming
    you have contacts saved in your phone.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 3: Sending the Text Message**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Now we’ll program the final part of the app so it knows what to do when a user
    clicks the “3\. Text Your Message” button. That’s when we want the app to set
    the message for the `Texting` component to the text converted by the device’s
    speech-to-text function, set the phone number for the `Texting` component to the
    user’s selected phone number, and then text the message to that phone number.
    Here are the blocks for `SendTextBtn`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f0018-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the Blocks pane, click SendTextBtn, and when the blocks for the component
    appear, drag the whenSendTextBtn.Click block ➊ to the Viewer. Then, in the Blocks
    pane, click the Texting1 component and drag the setTexting1.Messageto block ➋
    to the Viewer and snap it inside the whenSendTextBtn.Click block next to the word
    `do`.
  prefs: []
  type: TYPE_NORMAL
- en: Then, in the Blocks pane, click the SpeechRecognizer1 component and drag the
    SpeechRecognizer1.Result block ➌ to the Viewer and snap it to the right side of
    the setTexting1.Messageto block.
  prefs: []
  type: TYPE_NORMAL
- en: '**Getters and Setters**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To understand what we’re doing with these blocks, you first need to understand
    that App Inventor’s `Texting` component can send a text message only if its `Message`
    and `PhoneNumber` properties are set. That simply means that `Texting1` must have
    a message to send (its `Message` property) and must know where to send it (its
    `PhoneNumber` property).
  prefs: []
  type: TYPE_NORMAL
- en: We tell the app to set the `Message` property with the `SpeechRecognizer1.Result`
    block, which is called a *getter block* since it gets a value for us, and the
    `setTexting1.Messageto` block, which is called a *setter block* because it sets
    a value.
  prefs: []
  type: TYPE_NORMAL
- en: Technically, when we snap blocks together side by side as we’ve done here, they
    *execute*—or work—from right to left. That means that, with these blocks, the
    app first gets the current value of the `SpeechRecognizer1 Result` property, which
    is the text that we get from the app using the device’s speech-to-text function.
    Then the app sets the `Texting1 Message` property to that text, which lets the
    `Texting` component know the message to send.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*As with the properties for many other components, you can set the Texting
    component’s Message and PhoneNumber properties initially in the Designer window’s
    Properties pane if it makes sense for your app, or you can have the app set or
    change them dynamically using component-specific blocks like the ones we’re using
    here. For instance, if you wanted your app to send the exact same message each
    time, it would make sense to set the Texting component’s Message property by typing
    it in the Properties pane.*'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s continue programming. In the Blocks pane, click the Texting1 component
    again, and drag the setTexting1.PhoneNumberto block ➍ to the Viewer and snap it
    under the setTexting1.Messageto block. Then, click PhoneNumberPicker1 in the Blocks
    pane and drag the PhoneNumberPicker1.PhoneNumber block ➎ and snap it to the right
    side of the setTexting1.PhoneNumberto block.
  prefs: []
  type: TYPE_NORMAL
- en: Here, when the user clicks `SendTextBtn`, we have the app set the other property
    required for `Texting1`—the `PhoneNumber` property—with the getter block `PhoneNumberPicker1.PhoneNumber`
    and the setter block `setTexting1.PhoneNumberto`. The app first gets the current
    value of the `PhoneNumberPicker1 PhoneNumber` property, which is the phone number
    the user selected when the app opened the device’s contact list, and then sets
    the `Texting1 PhoneNumber` property to that number. This lets the `Texting` component
    know the phone number to send the text to.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, click Texting1 in the Blocks pane again, drag the callTexting1.SendMessageDirect
    block ➏ to the Viewer, and snap it under the setTexting1.PhoneNumberto block.
    Now, when the user clicks `SendTextBtn`, after the app sets the necessary properties
    for `Texting1`, this block directs the app to send the message directly.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of sending the message directly, we could have the app open the default
    texting app so the user can edit the message before sending. To do this, use the
    callTexting1.SendMessage block in place of the callTexting1.SendMessageDirect
    block.
  prefs: []
  type: TYPE_NORMAL
- en: In plain English, all together your blocks simply say, “when the button is clicked
    ➊, set the text message for the `Texting` component ➋ to the text converted by
    the speech recognizer ➌, set the phone number for the `Texting` component ➍ to
    the phone number selected in contacts ➎, and then send the message ➏,” just like
    we planned.
  prefs: []
  type: TYPE_NORMAL
- en: Now live-test the completed app! On your phone, click **1\. Say a Message**
    and say a message when the speech recognizer prompts you. Then, click **2\. Select
    a Number** and select a phone number from your contact list. Finally, click **3\.
    Text Your Message** and then check whether your phone sent the text. As long as
    you’re testing on a working phone with a texting plan, if you placed your blocks
    as shown in the code examples, the app should work correctly.
  prefs: []
  type: TYPE_NORMAL
- en: If the app doesn’t work, you now must *debug*, which means to look closely at
    your code for *bugs* (errors) and fix them. Recheck your blocks to make sure you’ve
    dragged the getter and setter blocks into the right spots, and test again after
    you make any corrections. Before retesting, to make sure your changes take effect,
    reload the app in the Companion by changing any property in the Property pane,
    like clicking any checkbox. Once all the buttons work, you have successfully created
    your first fully functional app!
  prefs: []
  type: TYPE_NORMAL
- en: '**SHARING “HI, WORLD!”**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can email your app for others to install on their phones. But first, click
    Screen1 in the components pane, so you can make sure the app’s name displays the
    way you want it to when you send it to your friends. In the Properties pane, in
    the text box under **AppName**, you can see that the name now shows as *HiWorld*,
    which is the name you entered when you started the project. To change the app’s
    name, click inside the text box, add a space between *Hi* and *World*, maybe add
    an exclamation point after *World*, and then click outside of the text box. Also,
    click the checkbox under **TitleVisible** to remove the check mark, which will
    keep the title of the screen, *Screen1*, from showing at the top of the app when
    it runs on a phone.
  prefs: []
  type: TYPE_NORMAL
- en: Now, with the app project open on your computer screen, click **Build** ▸ **App
    (save .apk to my computer)** in the top menu bar, as shown in [Figure 1-20](ch01.xhtml#ch1fig20).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/01fig20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1-20: The Build menu link creates a file you can share with friends
    so they can install the app.*'
  prefs: []
  type: TYPE_NORMAL
- en: You should see a progress bar showing that the file is being saved. Once the
    file is saved, you can locate it on your computer and email it as an attachment
    to whomever you want. When people open the email on their phones, they’ll be prompted
    to install the app. Note that since “Hi, World!” is a nonmarket app, your friends
    first will need to make sure their phones’ settings allow installation of applications
    from “unknown sources.”
  prefs: []
  type: TYPE_NORMAL
- en: '**SUMMARY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you built your first app, “Hi, World!”, which converts a spoken
    message into a text message and sends it to a selected contact! In the process,
    you explored the app design process, which included learning how to decompose
    a big plan into its smaller steps, then following those steps to program the actual
    components. Now you should feel more comfortable navigating around the App Inventor
    Designer window and Blocks Editor.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll examine how App Inventor uses event-driven programming
    to set app behavior, and you’ll become familiar with events and event handlers.
    We’ll use several examples of both to create the “Practice Makes Perfect” app,
    where users can record, watch, and re-record temporary video clips of themselves
    practicing speeches or songs.
  prefs: []
  type: TYPE_NORMAL
- en: '**ON YOUR OWN**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you’ve created “Hi, World!”, save new versions of it as you modify
    and extend it while working on these exercises. You can find solutions online
    at *[https://nostarch.com/programwithappinventor/](https://nostarch.com/programwithappinventor/)*.
  prefs: []
  type: TYPE_NORMAL
- en: Change the app so that it prompts the user to enter a telephone number rather
    than selecting one from the contact list. Which component(s) would you drag from
    the User Interface drawer to the Viewer to enable the user to enter the telephone
    number manually? Now that you’ll be replacing the `PhoneNumberPicker` component,
    how will you include instructions to the user about where to enter a phone number?
    What blocks will you use to provide the phone number required for `Texting1`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extend the app for Android devices so that, after it texts the spoken message,
    it waits for a response text message from the recipient and then reads that message
    to the user aloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the app so that it emails the message instead of texting it. What components
    and blocks would you use to send an email message?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
