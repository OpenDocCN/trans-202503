- en: '**1'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1'
- en: BUILDING APPS WITH APP INVENTOR**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 App Inventor 构建应用**
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/common.jpg)'
- en: With App Inventor, you can quickly and easily build apps using some of the most
    exciting mobile technology available. App Inventor provides tools that control
    the look and feel of an app, add useful mobile computing functions, and set or
    program an app’s behavior.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 App Inventor，你可以快速轻松地使用一些最激动人心的移动技术构建应用。App Inventor 提供了控制应用外观和感觉、添加有用的移动计算功能，以及设置或编程应用行为的工具。
- en: In this chapter, you’ll start to use these tools to build your first app, “Hi,
    World!”, which lets you text someone using voice recognition. You’ll also learn
    how to share your app with others.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将开始使用这些工具构建你的第一个应用，“Hi, World!”，它允许你通过语音识别给某人发短信。你还将学习如何与他人共享你的应用。
- en: '**PLANNING A NEW APP**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**规划新应用**'
- en: Before you start building an app, you’ll need to figure out the app’s goal or
    what problem you want it to solve. Once you’ve done that, you can *decompose*
    your project, which means breaking down your goal into smaller parts that will
    be easier to tackle than trying to accomplish it all at once. This in turn will
    help you outline the precise steps, or *algorithm*, necessary to develop each
    part of the app before you start coding.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始构建应用之前，你需要弄清楚应用的目标或你希望它解决的问题。一旦你做到了这一点，你可以*分解*你的项目，这意味着将你的目标分解成更小的部分，这样比一次性完成所有任务要容易得多。这样做反过来将帮助你概述开发应用各个部分所需的精确步骤，或*算法*，然后再开始编程。
- en: You’ll also identify the elements and features the app will need to perform
    properly and allow users to interact with it as you intend. For example, will
    the app let users take videos, send text messages, or sense their locations? Will
    a user need to click a button, enter text, or select from a list of options to
    complete those tasks? These are the kinds of questions that might help you determine
    the features you’ll need.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将识别应用需要的元素和功能，以确保它能够正常运行并让用户按照你的意图与其互动。例如，应用是否允许用户拍摄视频、发送短信或感知他们的位置？用户是否需要点击按钮、输入文本或从选项列表中选择来完成这些任务？这些问题可能帮助你确定需要哪些功能。
- en: Once you know what to include in your app, you can lay out its *user interface*
    elements—the parts of the app that users can see and interact with on the screen.
    Your app should be easy for users to use and understand. To keep users’ attention,
    you might add pictures, colors, and different text styles.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你知道了在应用中包含什么内容，你可以布局它的*用户界面*元素——用户可以在屏幕上看到并与之互动的部分。你的应用应该容易让用户使用和理解。为了保持用户的注意力，你可以添加图片、颜色和不同的文本样式。
- en: '**LAYING OUT YOUR APP**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**布局你的应用**'
- en: Once you have a plan, you’ll start by laying out the necessary components in
    the Designer. In App Inventor, *components* are all the visible and non-visible
    elements you can use in your app, including those that set the look and feel and
    add exciting functionality. All components have *properties*, or characteristics,
    that you can set and/or actions you can program.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了计划，你将开始在设计器中布局所需的组件。在 App Inventor 中，*组件*是你可以在应用中使用的所有可见和不可见元素，包括设置外观和感觉的元素以及添加激动人心功能的元素。所有组件都有*属性*或特征，你可以设置和/或编程操作。
- en: In this chapter, you’ll use User Interface components as well as Media and Social
    components to add speech recognition and texting capability to your app. Later
    in this book, you’ll use many more components to add features like video recording,
    location sensing, text-to-speech, animation, drawing, dragging, sound, picture
    taking, and more! For a detailed overview of available components, check out the
    appendix.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将使用用户界面组件以及媒体和社交组件，为你的应用添加语音识别和短信功能。在本书的后面，你将使用更多的组件，添加诸如视频录制、定位感应、语音合成、动画、绘图、拖动、声音、拍照等功能！有关可用组件的详细概述，请查看附录。
- en: To lay out your app’s components, you’ll need to use App Inventor’s Designer
    window, shown in [Figure 1-1](ch01.xhtml#ch1fig1). The Designer window consists
    of a *Palette* pane to the left, which includes drawers of all possible components;
    a *Viewer* pane, where you can see the components you drag from the Palette and
    lay them out as they should appear on your app’s screen; a *Components* pane,
    which lists all components in your app and allows you to give them meaningful
    names; a *Media* pane that lists all the pictures, sound clips, and other media
    files you’ve uploaded to the app; and a *Properties* pane, where you set the initial
    characteristics of app components.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要布置应用的组件，你需要使用 App Inventor 的设计器窗口，如[图 1-1](ch01.xhtml#ch1fig1)所示。设计器窗口由左侧的*调色板*面板组成，其中包含所有可能组件的抽屉；*查看器*面板，您可以在其中看到从调色板中拖动的组件并按其在应用屏幕上显示的方式进行布置；*组件*面板，列出了应用中的所有组件，并允许你为它们命名；*媒体*面板，列出了你上传到应用中的所有图片、音频剪辑和其他媒体文件；以及*属性*面板，在这里你可以设置应用组件的初始特性。
- en: '![Image](../images/01fig01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/01fig01.jpg)'
- en: '*Figure 1-1: The App Inventor Designer window*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-1：App Inventor 设计器窗口*'
- en: '**PROGRAMMING YOUR APP IN THE BLOCKS EDITOR**'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**在块编辑器中编程你的应用**'
- en: Once you place all the necessary components in your app, use the Blocks Editor
    to program it according to your plan. Click the **Blocks** button shown in [Figure
    1-2](ch01.xhtml#ch1fig2) to open the Blocks Editor window.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将所有必要的组件放入应用中，使用“块编辑器”根据你的计划进行编程。点击[图 1-2](ch01.xhtml#ch1fig2)中显示的**块**按钮，打开块编辑器窗口。
- en: The Blocks Editor window consists of the *Blocks* pane on the left and the *Viewer*
    pane on the right. The Blocks pane contains drawers for both *built-in blocks*,
    which program the app’s general behaviors, and *component-specific blocks*, which
    direct particular actions for each app component. To tell your app what to do,
    drag blocks from the drawers in the Blocks pane and snap them together in the
    Viewer.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 块编辑器窗口由左侧的*块*面板和右侧的*查看器*面板组成。块面板包含多个抽屉，分别是*内置块*，用于编程应用的一般行为，以及*组件特定块*，用于指示每个应用组件的特定操作。为了让应用执行操作，从块面板中的抽屉中拖动块并将它们拼接在查看器中。
- en: '![Image](../images/01fig02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/01fig02.jpg)'
- en: '*Figure 1-2: The Blocks Editor window*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-2：块编辑器窗口*'
- en: For a detailed overview of App Inventor’s built-in blocks, check out the appendix.
    In later chapters, you’ll explore component-specific blocks and the corresponding
    actions for a variety of components.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 App Inventor 内置块的详细概述，请参阅附录。在后续章节中，你将探索特定组件的块以及各种组件的相应操作。
- en: '**BUILDING THE “HI, WORLD!” APP**'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建“HI, WORLD!”应用**'
- en: The first app you’ll create in this book is the “Hi, World!” app. The app’s
    name is a play on “Hello, World,” a common first script that computer science
    students write when learning programming languages. The script displays “Hello,
    World” on a screen, but the “Hi, World!” app is so much more useful because it
    uses the `SpeechRecognizer`, `PhoneNumberPicker`, and `Texting` components to
    let you text using voice recognition! You can use this type-free texting app to
    say a message aloud, select a person’s telephone number, and then text the person.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中你将创建的第一个应用是“Hi, World!”应用。这个应用的名字是对“Hello, World”这一常见的程序设计语言入门脚本的戏仿，计算机科学学生在学习编程语言时通常会编写这个脚本，脚本会在屏幕上显示“Hello,
    World”。然而，“Hi, World!”应用更加实用，因为它使用了`SpeechRecognizer`、`PhoneNumberPicker`和`Texting`组件，让你通过语音识别来发送短信！你可以使用这个无打字短信应用，通过大声说出消息、选择一个电话号码，然后给此人发送短信。
- en: Log into App Inventor following the instructions outlined in “Getting Started
    with App Inventor” on [page xviii](intro.xhtml#page_xviii). If this is your first
    time logging in, you should see the notice in [Figure 1-3](ch01.xhtml#ch1fig3)
    letting you know that you don’t have any projects yet.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 按照《开始使用 App Inventor》中的说明登录 App Inventor，详细信息见[第 xviii 页](intro.xhtml#page_xviii)。如果这是你第一次登录，你应该会看到[图
    1-3](ch01.xhtml#ch1fig3)中的提示，告知你当前没有项目。
- en: '![Image](../images/01fig03.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/01fig03.jpg)'
- en: '*Figure 1-3: The Start new project screen appears the first time you log into
    App Inventor.*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-3：首次登录 App Inventor 时会出现“新建项目”屏幕。*'
- en: Click the **Start new project** button near the top-left corner of the window.
    Clicking the button should open the dialog where you’ll enter the name for your
    first project. Enter HiWorld without any spaces, and click **OK**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 点击窗口左上角附近的**新建项目**按钮。点击该按钮后会打开一个对话框，你可以在其中输入第一个项目的名称。输入 HiWorld（没有空格），然后点击**确定**。
- en: If you’ve logged in and saved a project before, App Inventor should open to
    the last app you worked on. To start a new app, click **Projects ▸ Start new project**
    as shown in [Figure 1-4](ch01.xhtml#ch1fig4).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前已登录并保存过项目，App Inventor 应该会打开你上次工作的应用。要开始一个新应用，点击**Projects ▸ Start new
    project**，如[图 1-4](ch01.xhtml#ch1fig4)所示。
- en: '![Image](../images/01fig04.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/01fig04.jpg)'
- en: '*Figure 1-4: The Start new project option in the Projects menu tab*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-4：Projects 菜单标签中的 Start new project 选项*'
- en: In the dialog that opens, name the project by entering HiWorld without any spaces
    and click **OK**.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在弹出的对话框中，通过输入 HiWorld（没有空格）来命名项目，然后点击**OK**。
- en: '**DECOMPOSING “HI, WORLD!”**'
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**分解“HI, WORLD!”**'
- en: Before we start building the app, let’s outline the actions we want “Hi, World!”
    to perform. We want the app to text someone a message that the user says aloud.
    We can break this action down into three steps.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始构建应用之前，先概述一下“Hi, World!”要执行的操作。我们希望应用能够将用户说出的消息发送给某个人。我们可以将这个操作分解为三个步骤。
- en: When a user clicks the message button, open the phone’s speech-to-text function
    and capture the user’s text.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户点击消息按钮时，打开手机的语音转文本功能并捕获用户的文本。
- en: When a user clicks the `PhoneNumberPicker`, open the phone’s contact list.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户点击 `PhoneNumberPicker` 时，打开手机的联系人列表。
- en: When a user clicks the text button, text the message converted by the speech-to-text
    function to the selected phone number.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户点击文本按钮时，将语音转文本功能转换的消息发送到选定的电话号码。
- en: 'You’ll need the following components:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下组件：
- en: Button (2) for the user to click to start the action
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Button (2) 供用户点击以启动操作
- en: Image for app design
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于应用设计的图像
- en: PhoneNumberPicker for the user to click to select a number
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PhoneNumberPicker 供用户点击选择号码
- en: SpeechRecognizer to capture and convert speech to text
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SpeechRecognizer 用于捕获并将语音转换为文本
- en: Texting to send the message
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 短信功能用于发送消息
- en: For each app we build throughout this book, we’ll use this format to decompose
    the action into manageable steps and identify the components we need to make it
    work.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们为每个应用都将使用这种格式，将操作分解为可管理的步骤，并确定需要哪些组件来使其工作。
- en: '**LAYING OUT “HI, WORLD!” IN THE DESIGNER**'
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**在设计器中布局“HI, WORLD!”**'
- en: Now let’s think about how to lay out the app’s components and how to present
    instructions so the app is easy to use and understand.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们思考如何布局应用的组件，以及如何呈现指示，使得应用易于使用和理解。
- en: For this app, the instructions to the user are so simple that we can include
    them on the `Button` and `PhoneNumberPicker` components, as long as those components
    are wide enough to display the text. To ensure that, we’ll make the width of all
    visible components (those that the user can see and interact with) equal to the
    width of the screen. This means that we won’t need to use a component from the
    Layout drawer to structure the screen display, because making everything the width
    of the screen requires us to place all components on top of each other. All we
    need to do is start with a picture at the top for visual effect and simply place
    the other components in the order we want users to interact with them.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个应用，用户的指示非常简单，我们可以将它们包含在`Button`和`PhoneNumberPicker`组件上，只要这些组件足够宽以显示文本。为此，我们将所有可见组件（用户可以看到并与之交互的组件）的宽度设置为屏幕宽度。这样，我们就不需要使用布局抽屉中的组件来构建屏幕显示，因为将所有组件设置为屏幕宽度要求我们将所有组件堆叠在一起。我们需要做的就是在顶部放一张图片以增加视觉效果，并按照我们希望用户与其交互的顺序简单地放置其他组件。
- en: '**Adding the Components**'
  id: totrans-46
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**添加组件**'
- en: Go to the Designer to lay out the image and other components for all three parts
    of the app. Make sure you’re in the Designer window by clicking the **Designer**
    button, as shown in [Figure 1-5](ch01.xhtml#ch1fig5).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 进入设计器，布局图像和应用所有三个部分的其他组件。确保你在设计器窗口中，点击**Designer**按钮，如[图 1-5](ch01.xhtml#ch1fig5)所示。
- en: '![Image](../images/01fig05.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/01fig05.jpg)'
- en: '*Figure 1-5: Click the ***Designer*** button to open the Designer window where
    you’ll lay out the app components.*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-5：点击***Designer***按钮打开设计器窗口，在那里你将布局应用组件。*'
- en: In the Designer window, drag the components you need from their drawers in the
    Palette pane to the Viewer pane. From the User Interface drawer, drag an Image
    and two Button components; from the Media drawer, drag a SpeechRecognizer component;
    and from the Social drawer, drag a PhoneNumberPicker component and a Texting component.
    Your screen should now look like [Figure 1-6](ch01.xhtml#ch1fig6).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计器窗口中，从调色板窗格中的组件库拖动所需的组件到查看器窗格。从用户界面库中，拖动一个图片组件和两个按钮组件；从媒体库中，拖动一个语音识别器组件；从社交库中，拖动一个电话号码选择器组件和一个短信组件。此时你的屏幕应该与[图
    1-6](ch01.xhtml#ch1fig6)所示相同。
- en: In the Viewer pane, you should see all visible components on `Screen1` ➊ and
    the non-visible components under the screen ➋. In the Components pane ➌, you should
    see a list of all components you just dragged to the Viewer pane.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看器窗格中，你应该能看到所有可见的组件在`Screen1` ➊，以及屏幕下方的不可见组件 ➋。在组件窗格 ➌ 中，你应该能看到刚刚拖到查看器窗格的所有组件列表。
- en: '![Image](../images/01fig06.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/01fig06.jpg)'
- en: '*Figure 1-6: The screen after you drag all “Hi, World!” app components to the
    Viewer pane*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-6：将所有“Hi, World!”应用组件拖到查看器窗格后的屏幕*'
- en: Now you can make adjustments to each visible component by clicking it in the
    Components pane. [Figure 1-7](ch01.xhtml#ch1fig7) shows what happens when you
    click `Image1`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以通过在组件窗格中点击每个可见组件来进行调整。[图 1-7](ch01.xhtml#ch1fig7)展示了点击`Image1`时的效果。
- en: '![Image](../images/01fig07.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/01fig07.jpg)'
- en: '*Figure 1-7: The Designer window after you click `Image1` in the Components
    pane*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-7：点击组件窗格中的`Image1`后的设计器窗口*'
- en: Once you click `Image1` in the Components pane, you should see buttons near
    the bottom of that pane ➊ that allow you to rename or delete the `Image1` component.
    In the Properties pane ➋, you should see all the properties for `Image1` that
    you can set in the Designer.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在组件窗格中点击`Image1`，你应该能看到窗格底部附近的按钮 ➊，这些按钮允许你重命名或删除`Image1`组件。在属性窗格 ➋ 中，你应该能看到所有你可以在设计器中设置的`Image1`的属性。
- en: '**Resizing a Component’s Width**'
  id: totrans-58
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**调整组件宽度**'
- en: Since you have only one image in this app, you don’t need to rename it. But
    you *do* need to change its size to make it the width of the screen. To resize
    `Image1`, in the Properties pane, click inside the text box under **Width** to
    open the dialog shown in [Figure 1-8](ch01.xhtml#ch1fig8).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你在这个应用中只有一个图片，你不需要重命名它。但你*确实*需要调整它的大小，使其与屏幕的宽度一致。要调整`Image1`的大小，在属性窗格中，点击**宽度**下的文本框，打开[图
    1-8](ch01.xhtml#ch1fig8)所示的对话框。
- en: '![Image](../images/01fig08.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/01fig08.jpg)'
- en: '*Figure 1-8: The Properties dialog that allows you to change a component’s
    width*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-8：允许你更改组件宽度的属性对话框*'
- en: Click the **Fill parent** radio button and then click **OK**. This should make
    the width of `Image1` fill the width of the screen, which is `Image1`’s *parent*,
    or the component that contains it.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**填充父级**单选按钮，然后点击**确定**。这应该会将`Image1`的宽度调整为屏幕的宽度，屏幕是`Image1`的*父级*，即包含它的组件。
- en: '**Uploading an Image**'
  id: totrans-63
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**上传图片**'
- en: Next, you’ll need to upload the picture you want to display as `Image1` on the
    app screen. To upload your image, click inside the text box under **Picture**
    and click the **Upload File …** button, shown on the left of [Figure 1-9](ch01.xhtml#ch1fig9),
    which should open the dialog shown on the right.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要上传你想要在应用屏幕上显示的图片，作为`Image1`。要上传图片，点击**图片**下的文本框，并点击[图 1-9](ch01.xhtml#ch1fig9)左侧所示的**上传文件...**按钮，这应该会打开右侧所示的对话框。
- en: '![Image](../images/01fig09.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/01fig09.jpg)'
- en: '*Figure 1-9: The Picture and Upload File … dialogs*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-9：图片和上传文件对话框*'
- en: Click the **Choose File** button. The file manager should open to show the files
    on your computer and allow you to find the picture you want to upload, as shown
    in [Figure 1-10](ch01.xhtml#ch1fig10).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**选择文件**按钮。文件管理器应该会打开，显示你计算机上的文件，并允许你找到你想要上传的图片，如[图 1-10](ch01.xhtml#ch1fig10)所示。
- en: '![Image](../images/01fig10.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/01fig10.jpg)'
- en: '*Figure 1-10: The file manager window allows you to select a file from your
    computer.*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-10：文件管理器窗口允许你从计算机中选择文件。*'
- en: Select the image you want to use, click the **Open** button, and then click
    **OK** on the Upload File … dialog shown in [Figure 1-9](ch01.xhtml#ch1fig9).
    You can download the sample image to use for this exercise, along with other materials
    that come with this book, at *[https://nostarch.com/programwithappinventor/](https://nostarch.com/programwithappinventor/)*.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 选择你想使用的图片，点击**打开**按钮，然后在[图 1-9](ch01.xhtml#ch1fig9)中点击**确定**，即可关闭上传文件对话框。你可以下载用于此练习的示例图片，以及本书附带的其他材料，网址是*[https://nostarch.com/programwithappinventor/](https://nostarch.com/programwithappinventor/)。
- en: '[Figure 1-11](ch01.xhtml#ch1fig11) shows what you should see after uploading
    the image.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-11](ch01.xhtml#ch1fig11)展示了上传图片后你应该看到的内容。'
- en: '![Image](../images/01fig11.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/01fig11.jpg)'
- en: '*Figure 1-11: The Designer window after you upload an image in the Properties
    pane*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-11：你在属性面板中上传图片后的设计器窗口*'
- en: You should now see the name of the picture listed in the Picture text box for
    `Image1` in the Properties pane ➌ and in the Media pane ➋. The uploaded picture
    should display on `Screen1` in the Viewer pane ➊.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能在属性面板 ➌ 的“图片”文本框中看到`Image1`的图片名称，并在媒体面板 ➋ 中看到该名称。上传的图片应该会显示在查看面板 ➊ 中的`Screen1`上。
- en: '**Creating the Say a Message Button**'
  id: totrans-75
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**创建“发送消息”按钮**'
- en: Now we’ll set the properties for `Button1` by clicking it in the Components
    pane. Since the app contains two `Button` components, let’s change the name of
    `Button1` to avoid confusion about each one’s function.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们通过点击组件面板中的`Button1`来设置其属性。由于应用包含两个`Button`组件，为了避免混淆每个按钮的功能，我们将把`Button1`的名称更改一下。
- en: To rename `Button1`, click the **Rename** button near the bottom of the Components
    pane. That should open a Rename Component dialog, as shown in [Figure 1-12](ch01.xhtml#ch1fig12).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要重命名`Button1`，点击组件面板底部附近的**重命名**按钮。这将打开一个重命名组件的对话框，如[图 1-12](ch01.xhtml#ch1fig12)所示。
- en: '![Image](../images/01fig12.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/01fig12.jpg)'
- en: '*Figure 1-12: The Rename Component dialog opens after you click the Rename
    button in the Components pane.*'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-12：点击组件面板中的重命名按钮后打开的重命名组件对话框。*'
- en: '**NOTE**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*When you rename a component, you change its default name to a more meaningful
    one that describes its function and is easily identifiable in the Designer window
    and Blocks Editor. Only you and the people you’ve shared your app code with will
    see a component’s name. Renaming a component is different from changing the display
    text on a component like a Button or Label, which your users actually see.*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*当你重命名一个组件时，你会将其默认名称更改为一个更有意义的名称，以描述它的功能，并且在设计器窗口和区块编辑器中易于识别。只有你和与你共享应用代码的人能看到组件的名称。重命名组件不同于更改组件（如按钮或标签）上的显示文本，后者是用户实际看到的。*'
- en: Enter SayMessageBtn without any spaces in the **New name:** text box and click
    **OK**. You should see that the `Button` name has changed to `SayMessageBtn` in
    the Components and Properties panes in the Designer window.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在**新名称：**文本框中输入没有空格的SayMessageBtn，并点击**确定**。你应该能在设计器窗口中的组件和属性面板看到`Button`的名称已经更改为`SayMessageBtn`。
- en: Let’s make the width of the button fill the width of the screen as we did with
    `Image1`. To change the width of `SayMessageBtn` in the Properties pane, click
    inside the text box under **Width**, click the **Fill parent** radio button, and
    then click **OK**.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将按钮的宽度设置为填满屏幕，就像我们对`Image1`所做的那样。要更改属性面板中`SayMessageBtn`的宽度，点击**宽度**下方的文本框，选择**填充父级**单选按钮，然后点击**确定**。
- en: Finally, let’s change the text to display on `SayMessageBtn` to provide clear
    instructions for the user. Click inside the text box under **Text** in the Properties
    pane. Delete the default `Text for Button1` and type 1\. Say a Message, and then
    click outside of the text box. [Figure 1-13](ch01.xhtml#ch1fig13) shows the new
    text on `SayMessageBtn` as well as the other changes you’ve made to its properties.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们更改`SayMessageBtn`上显示的文本，以便为用户提供清晰的指示。在属性面板中的**文本**文本框内点击。删除默认的`Text for
    Button1`，输入1\. Say a Message，然后点击文本框外。 [图 1-13](ch01.xhtml#ch1fig13)展示了`SayMessageBtn`上的新文本以及你对其属性所做的其他更改。
- en: '![Image](../images/01fig13.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/01fig13.jpg)'
- en: '*Figure 1-13: The Designer window after you change the name, width, and text
    of `SayMessageBtn`*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-13：更改`SayMessageBtn`的名称、宽度和文本后的设计器窗口*'
- en: Next, we’ll make similar changes to `Button2`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将对`Button2`进行类似的更改。
- en: '**Creating the Text Your Message Button**'
  id: totrans-88
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**创建“发送消息”按钮**'
- en: Rename `Button2` by clicking it and the **Rename** button in the Components
    pane, entering SendTextBtn without any spaces in the **New name:** text box, and
    then clicking **OK**. You can see that the button name has changed to `SendTextBtn`
    in the Components and Properties panes.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击组件窗格中的`Button2`，然后点击**重命名**按钮，在**新名称：**文本框中输入`SendTextBtn`（没有空格），最后点击**确定**，来重命名`Button2`。您可以看到按钮名称已更改为`SendTextBtn`，并且在组件和属性窗格中都能看到。
- en: Next, to change the width of `SendTextBtn` in the Properties pane, click inside
    the text box under **Width**, click the **Fill parent** radio button, and then
    click **OK**. Finally, change the text on `SendTextBtn` to provide instructions
    for the app user.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了更改`SendTextBtn`的宽度，请在属性窗格中点击**宽度**下的文本框，选择**填充父容器**单选按钮，然后点击**确定**。最后，将`SendTextBtn`上的文本更改为提供给应用程序用户的指示。
- en: To make the change, click inside the text box under **Text**, replace `Text
    for Button2` with 3\. Text Your Message, and then click outside of the text box.
    In the Viewer pane, you should now see all the changes you made to `SendTextBtn`,
    as shown in [Figure 1-14](ch01.xhtml#ch1fig14).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行更改，请点击**文本**下文本框中的内容，将`Button2`的文本替换为3\. 发送您的消息，然后点击文本框外部。在查看器窗格中，您现在应该能看到您对`SendTextBtn`所做的所有更改，如[图
    1-14](ch01.xhtml#ch1fig14)所示。
- en: '![Image](../images/01fig14.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/01fig14.jpg)'
- en: '*Figure 1-14: The Designer window after you change the name, width, and text
    of `SendTextBtn`*'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-14：更改`SendTextBtn`的名称、宽度和文本后的设计器窗口*'
- en: Next, let’s update the app’s final visible component, `PhoneNumberPicker1`,
    which the user will use to decide whom to text.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们来更新应用程序的最后一个可见组件`PhoneNumberPicker1`，用户将用它来决定要发送短信的对象。
- en: '**Creating the Select a Number Button**'
  id: totrans-95
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**创建选择一个号码按钮**'
- en: Click PhoneNumberPicker1 in the Components pane. In the Properties pane, to
    change its width as you’ve done with the other components, click the **Fill parent**
    radio button and then click **OK**. Also change the text on the component to provide
    instructions for the app user.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 点击组件窗格中的`PhoneNumberPicker1`。在属性窗格中，要更改其宽度，就像对其他组件所做的那样，点击**填充父容器**单选按钮，然后点击**确定**。同时，将组件上的文本更改为提供给应用程序用户的指示。
- en: To make the change, replace the existing `Text for PhoneNumberPicker1` in the
    text box under **Text** with 2\. Select a Number, and then click outside of the
    text box. In the Viewer pane, you should see these changes to `PhoneNumberPicker1`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行更改，将**文本**下文本框中现有的`PhoneNumberPicker1`文本替换为2\. 选择一个号码，然后点击文本框外部。在查看器窗格中，您应该能看到对`PhoneNumberPicker1`所做的更改。
- en: Now all you need to do is move the `PhoneNumberPicker` component above `SendTextBtn`
    so that users will see the components in the order you want them to move through
    the app. We need the user to choose the recipient’s phone number before sending
    the text, so we move `PhoneNumberPicker1` up by clicking and dragging it up in
    the Viewer pane so that it comes before “3\. Text Your Message”. [Figure 1-15](ch01.xhtml#ch1fig15)
    shows what the app looks like so far.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您只需要将`PhoneNumberPicker`组件移动到`SendTextBtn`上方，以便用户按照您希望的顺序在应用程序中浏览。我们需要用户在发送短信之前选择接收者的电话号码，因此我们通过在查看器窗格中点击并拖动`PhoneNumberPicker1`向上移动，使其出现在“3\.
    发送您的消息”之前。[图 1-15](ch01.xhtml#ch1fig15)显示了目前应用程序的样子。
- en: '![Image](../images/01fig15.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/01fig15.jpg)'
- en: '*Figure 1-15: The Designer window after you change the width, text, and location
    of `PhoneNumberPicker1`*'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-15：更改`PhoneNumberPicker1`的宽度、文本和位置后的设计器窗口*'
- en: Try changing a few more properties to make the app even more visually appealing
    and user-friendly. For example, you can change the color of the `Button` components
    and `PhoneNumberPicker1` to the darkest color in your image, such as the darker
    green in my `Image1` component, and make the text bold, larger, and white so it’s
    easy to see on the new dark background. Let’s try that now.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试更改更多属性，让应用程序在视觉上更具吸引力且更易用。例如，您可以将`Button`组件和`PhoneNumberPicker1`的颜色更改为图像中的最深色，比如我的`Image1`组件中的深绿色，并使文本变为粗体、增大并变为白色，以便在新深色背景上清晰可见。现在让我们来试试。
- en: '**Changing Button Color**'
  id: totrans-102
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**更改按钮颜色**'
- en: To change the background color of the `Button` and `PhoneNumberPicker1` components,
    click each component in the Properties pane and then click the word **Default**
    under `BackgroundColor` to open the color list dialog shown to the left in [Figure
    1-16](ch01.xhtml#ch1fig16).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改`Button`和`PhoneNumberPicker1`组件的背景颜色，请在属性窗格中点击每个组件，然后点击`背景颜色`下的**默认值**，打开左侧[图
    1-16](ch01.xhtml#ch1fig16)中显示的颜色列表对话框。
- en: If one of the colors in the list matches the darkest color in `Image1`, click
    the name of that color to select it. If none of the colors in the list work, click
    **Custom...** at the bottom of the list, which will open the color picker shown
    on the right in [Figure 1-16](ch01.xhtml#ch1fig16).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果列表中的某个颜色与`Image1`中的最深颜色匹配，点击该颜色名称选择它。如果列表中的颜色都不合适，请点击列表底部的**自定义...**，这将打开如[图1-16](ch01.xhtml#ch1fig16)所示的颜色选择器。
- en: '![Image](../images/01fig16.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/01fig16.jpg)'
- en: '*Figure 1-16: The color list and custom color picker used to change colors
    of various component properties in the Properties pane*'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-16：用于更改属性面板中各种组件属性颜色的颜色列表和自定义颜色选择器*'
- en: In the color picker, replace the current 000000 color number by entering the
    number of the color you want to use. For instance, you can enter 006600 for the
    darker green in my `Image1` component, as I’ve done here, and then click **Done**.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在颜色选择器中，替换当前的000000颜色号，输入您希望使用的颜色号码。例如，您可以输入006600，使用我在`Image1`组件中所用的较深绿色，然后点击**完成**。
- en: '**Formatting Button Font**'
  id: totrans-108
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**格式化按钮字体**'
- en: Now make the text on each of the components bold by clicking the **FontBold**
    checkbox in the Properties pane, as shown in [Figure 1-17](ch01.xhtml#ch1fig17).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过点击属性面板中的**FontBold**复选框，使每个组件上的文本加粗，如[图1-17](ch01.xhtml#ch1fig17)所示。
- en: Make the text larger by replacing 14.0 with 20 in the **FontSize** text box.
    Finally, you can make the text color white by clicking the word **Default** under
    `TextColor` near the bottom of the Properties pane to open the color list, as
    shown in [Figure 1-17](ch01.xhtml#ch1fig17), and then clicking **White**.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在**FontSize**文本框中将14.0替换为20，使文本变大。最后，您可以通过点击`TextColor`下方的**Default**，打开颜色列表，如[图1-17](ch01.xhtml#ch1fig17)所示，然后点击**White**，使文本颜色变为白色。
- en: '![Image](../images/01fig17.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/01fig17.jpg)'
- en: '*Figure 1-17: The `SayMessageBtn` Properties pane, showing changes to the `Button`
    background and font*'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-17：`SayMessageBtn`属性面板，显示`Button`背景和字体的变化*'
- en: '**PROGRAMMING “HI, WORLD!” IN THE BLOCKS EDITOR**'
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**在块编辑器中编程“HI, WORLD！”**'
- en: Now that you’ve laid out all the components, you can move to the Blocks Editor
    to program the app. Click the **Blocks** button, as shown in [Figure 1-18](ch01.xhtml#ch1fig18),
    to switch to the Blocks Editor.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经布置好了所有组件，接下来可以进入“块”编辑器来编程应用程序。点击**块**按钮，如[图1-18](ch01.xhtml#ch1fig18)所示，切换到“块”编辑器。
- en: '![Image](../images/01fig18.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/01fig18.jpg)'
- en: '*Figure 1-18: The Designer window after you lay out the app*'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-18：您布置应用程序后的设计窗口*'
- en: For the “Hi, World!” app, you’ll use only component-specific blocks to program
    the action. You’ll program in the order of steps outlined in “Decomposing ‘Hi,
    World!’” on [page 5](ch01.xhtml#page_5).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“Hi, World!”应用，您将仅使用组件特定的块来编程该操作。您将按照“分解‘Hi, World!’”中概述的步骤顺序进行编程，详见[第5页](ch01.xhtml#page_5)。
- en: '**Step 1: Converting from Speech to Text**'
  id: totrans-118
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**第1步：将语音转换为文本**'
- en: We start by telling the app what to do when the user clicks `SayMessageBtn`,
    the “1\. Say a Message” button. When that button is clicked, we want the app to
    open the phone’s speech-to-text feature to capture and convert the user’s speech
    to text.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先告诉应用程序当用户点击`SayMessageBtn`，即“1. 说一个消息”按钮时该做什么。当按钮被点击时，我们希望应用程序打开手机的语音转文本功能，以捕捉并将用户的语音转换为文本。
- en: '[Figure 1-19](ch01.xhtml#ch1fig19) shows how to program step 1.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[图1-19](ch01.xhtml#ch1fig19)显示了如何编程第1步。'
- en: In the Blocks pane, click SayMessageBtn ➊ and, when the blocks for the component
    appear, drag the whenSayMessageBtn.Click block to the Viewer. Then, in the Blocks
    pane, click SpeechRecognizer1 ➋ and drag the callSpeechRecognizer1.GetText block
    to the Viewer. Snap the callSpeechRecognizer1.GetText block inside the whenSayMessageBtn.Click
    block next to the word `do`. In plain English, these blocks say, “when the button
    is clicked, open the phone’s speech recognizer to get text,” which is very similar
    to what we outlined when we decomposed the app.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在“块”面板中，点击SayMessageBtn ➊，当该组件的块出现时，将whenSayMessageBtn.Click块拖到查看器中。然后，在“块”面板中，点击SpeechRecognizer1
    ➋并将callSpeechRecognizer1.GetText块拖到查看器中。将callSpeechRecognizer1.GetText块放入whenSayMessageBtn.Click块中，紧挨着`do`一词。用简单的英文来说，这些块的意思是：“当按钮被点击时，打开手机的语音识别器以获取文本”，这与我们在分解应用程序时概述的非常相似。
- en: Now we’ll live-test to see how these blocks work. It’s best to test this app
    on a working phone. If you try to test these blocks with the built-in emulator
    or with a device that doesn’t have speech-to-text capability, you’ll likely get
    an error when you click SayMessageBtn. Use the MIT AI2 Companion app on a phone,
    as outlined in “Live-Testing Your Apps” on [page xxii](intro.xhtml#page_xxii).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将进行实时测试，看看这些代码块如何工作。最好在一部正常工作的手机上测试这个应用。如果你尝试在内置模拟器或没有语音转文字功能的设备上测试这些代码块，当你点击SayMessageBtn时可能会出现错误。请按照“实时测试你的应用”中的说明，在手机上使用MIT
    AI2 Companion应用，具体见[第xxii页](intro.xhtml#page_xxii)。
- en: '![Image](../images/01fig19.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/01fig19.jpg)'
- en: '*Figure 1-19: The Blocks Editor window with code blocks dragged onto the Viewer
    to program `SayMessageBtn`*'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-19：拖动代码块到查看器中的代码块编辑器窗口，用于编程`SayMessageBtn`*'
- en: Once you click **Connect** ▸ **AI Companion** in the top menu bar and scan the
    QR code with your phone’s Companion app, your “Hi, World!” app should appear on
    your phone.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你点击顶部菜单栏中的**连接** ▸ **AI伴侣**，并用手机的伴侣应用扫描二维码，你的“Hi, World!”应用应该会出现在手机上。
- en: Click the **1\. Say a Message** button. The phone’s speech recognizer should
    open and prompt you to speak, as long as your phone’s speech-to-text capability
    is turned on and the blocks are laid out as shown in [Figure 1-19](ch01.xhtml#ch1fig19).
    So far, so good. Leave the app open on your phone so you can keep live-testing.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**1. 说出消息**按钮。只要你的手机开启了语音转文字功能，并且代码块布局如[图1-19](ch01.xhtml#ch1fig19)所示，手机的语音识别器应该会打开并提示你讲话。到目前为止，一切顺利。保持应用在手机上打开，继续进行实时测试。
- en: '**Step 2: Opening the User’s Contact List**'
  id: totrans-127
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**步骤 2：打开用户的联系人列表**'
- en: 'Now let’s program the second part of the app, telling it what to do when the
    user clicks the “2\. Select a Number” button. When the `PhoneNumberPicker` is
    clicked, we want the app to open the user’s contact list for selection. Here’s
    the code for programming this:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们编写应用的第二部分代码，告诉它当用户点击“2. 选择号码”按钮时该做什么。当点击`PhoneNumberPicker`时，我们希望应用打开用户的联系人列表供选择。以下是编程的代码：
- en: '![Image](../images/f0017-01.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0017-01.jpg)'
- en: In the Blocks pane, click PhoneNumberPicker1, and when the blocks for the component
    appear, drag the whenPhoneNumberPicker1.TouchDown block ➊ to the Viewer. Then,
    in the Blocks pane, click PhoneNumberPicker1 again and drag the callPhoneNumberPicker1.Open
    block ➋ to the Viewer and snap it inside the whenPhoneNumberPicker1.TouchDown
    block next to the word `do`. In plain English, these blocks tell the app, “open
    the phone’s contact list when the phone number picker is touched,” like we planned.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码块面板中，点击PhoneNumberPicker1，当该组件的代码块出现时，将whenPhoneNumberPicker1.TouchDown块
    ➊ 拖到查看器中。然后，再次点击PhoneNumberPicker1，拖动callPhoneNumberPicker1.Open块 ➋ 到查看器，并将其嵌套到whenPhoneNumberPicker1.TouchDown块中的`do`旁边。通俗地说，这些代码块告诉应用：“当电话号码选择器被点击时，打开手机的联系人列表”，就像我们之前计划的那样。
- en: Now live-test to see how these blocks work. Click **2\. Select a Number**. Your
    phone’s contact list and a prompt to select a contact should appear, assuming
    you have contacts saved in your phone.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在进行实时测试，看看这些代码块如何工作。点击**2. 选择号码**。如果你的手机中有保存的联系人，应该会出现手机的联系人列表以及选择联系人提示。
- en: '**Step 3: Sending the Text Message**'
  id: totrans-132
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**步骤 3：发送短信**'
- en: Now we’ll program the final part of the app so it knows what to do when a user
    clicks the “3\. Text Your Message” button. That’s when we want the app to set
    the message for the `Texting` component to the text converted by the device’s
    speech-to-text function, set the phone number for the `Texting` component to the
    user’s selected phone number, and then text the message to that phone number.
    Here are the blocks for `SendTextBtn`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将编写应用的最后部分代码，使其知道用户点击“3. 发送短信”按钮时该做什么。此时我们希望应用将`Texting`组件的消息设置为设备语音转文字功能转换的文本，将`Texting`组件的电话号码设置为用户选择的电话号码，然后将短信发送到该电话号码。以下是`SendTextBtn`的代码块。
- en: '![Image](../images/f0018-01.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0018-01.jpg)'
- en: In the Blocks pane, click SendTextBtn, and when the blocks for the component
    appear, drag the whenSendTextBtn.Click block ➊ to the Viewer. Then, in the Blocks
    pane, click the Texting1 component and drag the setTexting1.Messageto block ➋
    to the Viewer and snap it inside the whenSendTextBtn.Click block next to the word
    `do`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码块面板中，点击SendTextBtn，当该组件的代码块出现时，将whenSendTextBtn.Click块 ➊ 拖到查看器中。然后，再次点击Texting1组件，拖动setTexting1.Messageto块
    ➋ 到查看器，并将其嵌套到whenSendTextBtn.Click块中的`do`旁边。
- en: Then, in the Blocks pane, click the SpeechRecognizer1 component and drag the
    SpeechRecognizer1.Result block ➌ to the Viewer and snap it to the right side of
    the setTexting1.Messageto block.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在“块”面板中，点击“SpeechRecognizer1”组件，将“SpeechRecognizer1.Result”块 ➌ 拖动到查看器，并将其与“setTexting1.Messageto”块的右侧对齐。
- en: '**Getters and Setters**'
  id: totrans-137
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**获取器和设置器**'
- en: To understand what we’re doing with these blocks, you first need to understand
    that App Inventor’s `Texting` component can send a text message only if its `Message`
    and `PhoneNumber` properties are set. That simply means that `Texting1` must have
    a message to send (its `Message` property) and must know where to send it (its
    `PhoneNumber` property).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解我们正在做什么，首先需要理解App Inventor的`Texting`组件只有在其`Message`和`PhoneNumber`属性被设置后才能发送短信。这意味着，`Texting1`必须有一个消息可发送（它的`Message`属性），并且必须知道发送到哪里（它的`PhoneNumber`属性）。
- en: We tell the app to set the `Message` property with the `SpeechRecognizer1.Result`
    block, which is called a *getter block* since it gets a value for us, and the
    `setTexting1.Messageto` block, which is called a *setter block* because it sets
    a value.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过`SpeechRecognizer1.Result`块告诉应用程序设置`Message`属性，这个块被称为*getter块*，因为它为我们获取一个值；而`setTexting1.Messageto`块被称为*setter块*，因为它设置一个值。
- en: Technically, when we snap blocks together side by side as we’ve done here, they
    *execute*—or work—from right to left. That means that, with these blocks, the
    app first gets the current value of the `SpeechRecognizer1 Result` property, which
    is the text that we get from the app using the device’s speech-to-text function.
    Then the app sets the `Texting1 Message` property to that text, which lets the
    `Texting` component know the message to send.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，当我们像这里一样将块并排连接时，它们会*从右到左执行*——或者说工作。这意味着，在这些块中，应用程序首先获取`SpeechRecognizer1
    Result`属性的当前值，也就是通过设备的语音转文本功能从应用程序中获取的文本。然后，应用程序将`Texting1 Message`属性设置为该文本，这样就能让`Texting`组件知道要发送的消息。
- en: '**NOTE**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*As with the properties for many other components, you can set the Texting
    component’s Message and PhoneNumber properties initially in the Designer window’s
    Properties pane if it makes sense for your app, or you can have the app set or
    change them dynamically using component-specific blocks like the ones we’re using
    here. For instance, if you wanted your app to send the exact same message each
    time, it would make sense to set the Texting component’s Message property by typing
    it in the Properties pane.*'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '*与许多其他组件的属性一样，如果对你的应用程序有意义，你可以在设计窗口的“属性”面板中最初设置Texting组件的Message和PhoneNumber属性，或者你也可以通过像我们在这里使用的组件特定的块动态设置或更改它们。例如，如果你希望应用程序每次发送完全相同的消息，那么通过在“属性”面板中输入它来设置Texting组件的Message属性会更有意义。*'
- en: Let’s continue programming. In the Blocks pane, click the Texting1 component
    again, and drag the setTexting1.PhoneNumberto block ➍ to the Viewer and snap it
    under the setTexting1.Messageto block. Then, click PhoneNumberPicker1 in the Blocks
    pane and drag the PhoneNumberPicker1.PhoneNumber block ➎ and snap it to the right
    side of the setTexting1.PhoneNumberto block.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 继续编程。在“块”面板中，再次点击“Texting1”组件，将“setTexting1.PhoneNumberto”块 ➍ 拖动到查看器，并将其放在“setTexting1.Messageto”块下方。然后，点击“PhoneNumberPicker1”在“块”面板中，拖动“PhoneNumberPicker1.PhoneNumber”块
    ➎ 并将其与“setTexting1.PhoneNumberto”块的右侧对齐。
- en: Here, when the user clicks `SendTextBtn`, we have the app set the other property
    required for `Texting1`—the `PhoneNumber` property—with the getter block `PhoneNumberPicker1.PhoneNumber`
    and the setter block `setTexting1.PhoneNumberto`. The app first gets the current
    value of the `PhoneNumberPicker1 PhoneNumber` property, which is the phone number
    the user selected when the app opened the device’s contact list, and then sets
    the `Texting1 PhoneNumber` property to that number. This lets the `Texting` component
    know the phone number to send the text to.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，当用户点击`SendTextBtn`时，我们让应用程序设置`Texting1`所需的另一个属性——`PhoneNumber`属性——使用getter块`PhoneNumberPicker1.PhoneNumber`和setter块`setTexting1.PhoneNumberto`。应用程序首先获取`PhoneNumberPicker1
    PhoneNumber`属性的当前值，也就是用户在应用程序打开设备联系人列表时选择的电话号码，然后将`Texting1 PhoneNumber`属性设置为该号码。这让`Texting`组件知道要发送短信的电话号码。
- en: Finally, click Texting1 in the Blocks pane again, drag the callTexting1.SendMessageDirect
    block ➏ to the Viewer, and snap it under the setTexting1.PhoneNumberto block.
    Now, when the user clicks `SendTextBtn`, after the app sets the necessary properties
    for `Texting1`, this block directs the app to send the message directly.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，再次点击Blocks面板中的Texting1，拖动callTexting1.SendMessageDirect积木➏到Viewer面板，并将其放在setTexting1.PhoneNumberto积木下方。现在，当用户点击`SendTextBtn`时，在应用为`Texting1`设置必要的属性后，这个积木会指示应用直接发送消息。
- en: Instead of sending the message directly, we could have the app open the default
    texting app so the user can edit the message before sending. To do this, use the
    callTexting1.SendMessage block in place of the callTexting1.SendMessageDirect
    block.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本可以让应用打开默认的短信应用，让用户在发送之前编辑消息，而不是直接发送消息。为了做到这一点，使用callTexting1.SendMessage积木替代callTexting1.SendMessageDirect积木。
- en: In plain English, all together your blocks simply say, “when the button is clicked
    ➊, set the text message for the `Texting` component ➋ to the text converted by
    the speech recognizer ➌, set the phone number for the `Texting` component ➍ to
    the phone number selected in contacts ➎, and then send the message ➏,” just like
    we planned.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 用通俗的语言来说，你的所有积木其实是在说：“当按钮被点击时➊，设置`Texting`组件的文本信息➋为语音识别器转换的文本➌，将`Texting`组件的电话号码➎设置为在联系人中选择的电话号码➎，然后发送消息➏”，就像我们计划的那样。
- en: Now live-test the completed app! On your phone, click **1\. Say a Message**
    and say a message when the speech recognizer prompts you. Then, click **2\. Select
    a Number** and select a phone number from your contact list. Finally, click **3\.
    Text Your Message** and then check whether your phone sent the text. As long as
    you’re testing on a working phone with a texting plan, if you placed your blocks
    as shown in the code examples, the app should work correctly.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在进行已完成应用的实时测试！在你的手机上，点击**1\. 说出信息**，在语音识别器提示时说出一条消息。然后，点击**2\. 选择号码**，从你的联系人列表中选择一个电话号码。最后，点击**3\.
    发送信息**，然后检查你的手机是否已发送该短信。只要你在有短信计划的正常手机上进行测试，并且按照代码示例中的方式放置了相应的积木，应用应该能正常工作。
- en: If the app doesn’t work, you now must *debug*, which means to look closely at
    your code for *bugs* (errors) and fix them. Recheck your blocks to make sure you’ve
    dragged the getter and setter blocks into the right spots, and test again after
    you make any corrections. Before retesting, to make sure your changes take effect,
    reload the app in the Companion by changing any property in the Property pane,
    like clicking any checkbox. Once all the buttons work, you have successfully created
    your first fully functional app!
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用无法正常工作，你现在需要*调试*，也就是仔细检查代码中的*bug*（错误）并修复它们。重新检查你的积木，确保你将获取器和设置器积木拖放到了正确的位置，进行任何修正后再进行测试。在重新测试之前，为了确保更改生效，重新加载应用，通过更改属性面板中的任何属性，例如点击任何复选框。所有按钮都能正常工作后，你就成功创建了第一个完全功能的应用！
- en: '**SHARING “HI, WORLD!”**'
  id: totrans-150
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**共享“嗨，世界！”**'
- en: You can email your app for others to install on their phones. But first, click
    Screen1 in the components pane, so you can make sure the app’s name displays the
    way you want it to when you send it to your friends. In the Properties pane, in
    the text box under **AppName**, you can see that the name now shows as *HiWorld*,
    which is the name you entered when you started the project. To change the app’s
    name, click inside the text box, add a space between *Hi* and *World*, maybe add
    an exclamation point after *World*, and then click outside of the text box. Also,
    click the checkbox under **TitleVisible** to remove the check mark, which will
    keep the title of the screen, *Screen1*, from showing at the top of the app when
    it runs on a phone.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过电子邮件发送你的应用，让别人安装到他们的手机上。但首先，点击组件面板中的Screen1，这样你可以确保当你把应用发送给朋友时，它的名称会显示成你希望的样子。在属性面板中，**AppName**下方的文本框中，你会看到应用的名字现在显示为*HiWorld*，这是你在开始项目时输入的名字。若要更改应用的名称，点击文本框内，给*Hi*和*World*之间加个空格，可能还要在*World*后面加个感叹号，然后点击文本框外部。同时，点击**TitleVisible**下方的复选框，去掉勾选，这样应用在手机上运行时屏幕标题*Screen1*就不会显示在应用的顶部了。
- en: Now, with the app project open on your computer screen, click **Build** ▸ **App
    (save .apk to my computer)** in the top menu bar, as shown in [Figure 1-20](ch01.xhtml#ch1fig20).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在电脑屏幕上打开应用项目，点击顶部菜单栏中的**Build** ▸ **App (保存 .apk 到我的电脑)**，如[图 1-20](ch01.xhtml#ch1fig20)所示。
- en: '![Image](../images/01fig20.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/01fig20.jpg)'
- en: '*Figure 1-20: The Build menu link creates a file you can share with friends
    so they can install the app.*'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-20：构建菜单链接创建一个文件，你可以与朋友分享，以便他们可以安装应用。*'
- en: You should see a progress bar showing that the file is being saved. Once the
    file is saved, you can locate it on your computer and email it as an attachment
    to whomever you want. When people open the email on their phones, they’ll be prompted
    to install the app. Note that since “Hi, World!” is a nonmarket app, your friends
    first will need to make sure their phones’ settings allow installation of applications
    from “unknown sources.”
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到一个进度条，显示文件正在保存。当文件保存完成后，你可以在电脑上找到它，并将其作为附件通过电子邮件发送给任何人。当人们在手机上打开邮件时，他们会被提示安装该应用程序。请注意，由于“Hi,
    World！”是一个非市场应用程序，你的朋友们首先需要确保他们的手机设置允许从“未知来源”安装应用程序。
- en: '**SUMMARY**'
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter, you built your first app, “Hi, World!”, which converts a spoken
    message into a text message and sends it to a selected contact! In the process,
    you explored the app design process, which included learning how to decompose
    a big plan into its smaller steps, then following those steps to program the actual
    components. Now you should feel more comfortable navigating around the App Inventor
    Designer window and Blocks Editor.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你创建了你的第一个应用程序“Hi, World！”，它将语音消息转换为文本消息并发送给选定的联系人！在这个过程中，你探索了应用程序设计流程，包括学习如何将一个大计划分解成更小的步骤，然后按照这些步骤编程实现实际组件。现在，你应该能更舒适地在
    App Inventor 设计器窗口和模块编辑器中操作了。
- en: In the next chapter, you’ll examine how App Inventor uses event-driven programming
    to set app behavior, and you’ll become familiar with events and event handlers.
    We’ll use several examples of both to create the “Practice Makes Perfect” app,
    where users can record, watch, and re-record temporary video clips of themselves
    practicing speeches or songs.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习 App Inventor 如何使用事件驱动编程来设置应用程序行为，并且你将熟悉事件和事件处理程序。我们将通过多个例子来创建“实践成就完美”应用程序，用户可以录制、观看和重新录制自己练习演讲或歌曲的临时视频片段。
- en: '**ON YOUR OWN**'
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**独立完成**'
- en: Now that you’ve created “Hi, World!”, save new versions of it as you modify
    and extend it while working on these exercises. You can find solutions online
    at *[https://nostarch.com/programwithappinventor/](https://nostarch.com/programwithappinventor/)*.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了“Hi, World！”，在你修改和扩展它时，请保存它的新版本。你可以在* [https://nostarch.com/programwithappinventor/](https://nostarch.com/programwithappinventor/)*
    网站上找到解决方案。
- en: Change the app so that it prompts the user to enter a telephone number rather
    than selecting one from the contact list. Which component(s) would you drag from
    the User Interface drawer to the Viewer to enable the user to enter the telephone
    number manually? Now that you’ll be replacing the `PhoneNumberPicker` component,
    how will you include instructions to the user about where to enter a phone number?
    What blocks will you use to provide the phone number required for `Texting1`?
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改应用程序，使其提示用户输入电话号码，而不是从联系人列表中选择。你需要从用户界面面板中拖动哪些组件到查看器中，以便让用户手动输入电话号码？现在你将替换`PhoneNumberPicker`组件，你如何向用户提供有关输入电话号码的说明？你会使用哪些模块来提供`Texting1`所需的电话号码？
- en: Extend the app for Android devices so that, after it texts the spoken message,
    it waits for a response text message from the recipient and then reads that message
    to the user aloud.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展应用程序，使其适用于 Android 设备，以便在发送完语音信息后，等待收件人回复的短信，并将该信息大声读出给用户听。
- en: Change the app so that it emails the message instead of texting it. What components
    and blocks would you use to send an email message?
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改应用程序，使其发送电子邮件消息，而不是短信。你会使用哪些组件和模块来发送电子邮件消息？
