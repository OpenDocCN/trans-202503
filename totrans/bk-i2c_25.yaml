- en: Index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please note that index links to approximate location of each term.
  prefs: []
  type: TYPE_NORMAL
- en: '**Numbers**'
  prefs: []
  type: TYPE_NORMAL
- en: 10-bit peripheral addressing, [24](c02.xhtml#Page_24)
  prefs: []
  type: TYPE_NORMAL
- en: '**A**'
  prefs: []
  type: TYPE_NORMAL
- en: ACCESS.bus, [89](c05.xhtml#Page_89)
  prefs: []
  type: TYPE_NORMAL
- en: accessing (MCP230*xx*) registers, [266](c13.xhtml#Page_266)
  prefs: []
  type: TYPE_NORMAL
- en: ACK (acknowledge) bits, [13](c01.xhtml#Page_13)
  prefs: []
  type: TYPE_NORMAL
- en: activating Raspberry Pi I²C buses, [151](c09.xhtml#Page_151)
  prefs: []
  type: TYPE_NORMAL
- en: active high logic, [271](c13.xhtml#Page_271)
  prefs: []
  type: TYPE_NORMAL
- en: active low logic, [270](c13.xhtml#Page_270)
  prefs: []
  type: TYPE_NORMAL
- en: Adafruit feather bus, [116](c07.xhtml#Page_116)
  prefs: []
  type: TYPE_NORMAL
- en: Adafruit METRO SBCs, [102](c06.xhtml#Page_102)
  prefs: []
  type: TYPE_NORMAL
- en: Adafruit SBCs, [101](c06.xhtml#Page_101)
  prefs: []
  type: TYPE_NORMAL
- en: Adafruit TCA9548A I²C Expander, [258](c12.xhtml#Page_258)
  prefs: []
  type: TYPE_NORMAL
- en: Adafruit Trinket, [116](c07.xhtml#Page_116)
  prefs: []
  type: TYPE_NORMAL
- en: ADALM2000 Active Learning Module, [70](c04.xhtml#Page_70)
  prefs: []
  type: TYPE_NORMAL
- en: ADC, [299](c14.xhtml#Page_299)
  prefs: []
  type: TYPE_NORMAL
- en: bipolar, [302](c14.xhtml#Page_302)
  prefs: []
  type: TYPE_NORMAL
- en: channels, [300](c14.xhtml#Page_300), [301](c14.xhtml#Page_301)
  prefs: []
  type: TYPE_NORMAL
- en: differential inputs, [300](c14.xhtml#Page_300), [303](c14.xhtml#Page_303)
  prefs: []
  type: TYPE_NORMAL
- en: differential line drivers, [303](c14.xhtml#Page_303)
  prefs: []
  type: TYPE_NORMAL
- en: maximum permissible voltages, [302](c14.xhtml#Page_302)
  prefs: []
  type: TYPE_NORMAL
- en: polarity, [300](c14.xhtml#Page_300), [302](c14.xhtml#Page_302)
  prefs: []
  type: TYPE_NORMAL
- en: range, [302](c14.xhtml#Page_302)
  prefs: []
  type: TYPE_NORMAL
- en: resolution, [300](c14.xhtml#Page_300), [301](c14.xhtml#Page_301)
  prefs: []
  type: TYPE_NORMAL
- en: sample frequency, [300](c14.xhtml#Page_300)
  prefs: []
  type: TYPE_NORMAL
- en: single-ended inputs, [300](c14.xhtml#Page_300), [303](c14.xhtml#Page_303)
  prefs: []
  type: TYPE_NORMAL
- en: specifications, [300](c14.xhtml#Page_300)
  prefs: []
  type: TYPE_NORMAL
- en: addresses (I²C), [19](c02.xhtml#Page_19)
  prefs: []
  type: TYPE_NORMAL
- en: address pins (MCP230*xx*), [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: address space (task), [177](c10.xhtml#Page_177)
  prefs: []
  type: TYPE_NORMAL
- en: ADS1*x*15
  prefs: []
  type: TYPE_NORMAL
- en: ADC pinout, [317](c14.xhtml#Page_317)
  prefs: []
  type: TYPE_NORMAL
- en: ADC registers, [309](c14.xhtml#Page_309)
  prefs: []
  type: TYPE_NORMAL
- en: comparator control bits, [311](c14.xhtml#Page_311)
  prefs: []
  type: TYPE_NORMAL
- en: configuration register, [310](c14.xhtml#Page_310)
  prefs: []
  type: TYPE_NORMAL
- en: conversion rate, [312](c14.xhtml#Page_312)
  prefs: []
  type: TYPE_NORMAL
- en: conversion register, [310](c14.xhtml#Page_310)
  prefs: []
  type: TYPE_NORMAL
- en: conversion start/ready bit, [315](c14.xhtml#Page_315)
  prefs: []
  type: TYPE_NORMAL
- en: gain settings, [305](c14.xhtml#Page_305)
  prefs: []
  type: TYPE_NORMAL
- en: high threshold register, [315](c14.xhtml#Page_315)
  prefs: []
  type: TYPE_NORMAL
- en: low threshold register, [315](c14.xhtml#Page_315)
  prefs: []
  type: TYPE_NORMAL
- en: multiplexer control bits, [314](c14.xhtml#Page_314)
  prefs: []
  type: TYPE_NORMAL
- en: one-shot mode, [305](c14.xhtml#Page_305)
  prefs: []
  type: TYPE_NORMAL
- en: polling performance, [323](c14.xhtml#Page_323)
  prefs: []
  type: TYPE_NORMAL
- en: power-down mode, [315](c14.xhtml#Page_315)
  prefs: []
  type: TYPE_NORMAL
- en: programmable gain amplifier, [313](c14.xhtml#Page_313)
  prefs: []
  type: TYPE_NORMAL
- en: threshold registers, [315](c14.xhtml#Page_315)
  prefs: []
  type: TYPE_NORMAL
- en: ADS1015 analog-to-digital converter, [300](c14.xhtml#Page_300)
  prefs: []
  type: TYPE_NORMAL
- en: ADS1115 analog-to-digital converter, [300](c14.xhtml#Page_300)
  prefs: []
  type: TYPE_NORMAL
- en: advantages of the I²C bus, [5](c01.xhtml#Page_5)
  prefs: []
  type: TYPE_NORMAL
- en: Alchitry FPGAs, [104](c06.xhtml#Page_104)
  prefs: []
  type: TYPE_NORMAL
- en: analog conditioning, [305](c14.xhtml#Page_305)
  prefs: []
  type: TYPE_NORMAL
- en: analog-to-digital converter, [299](c14.xhtml#Page_299)
  prefs: []
  type: TYPE_NORMAL
- en: arbitration (I²C bus arbitration), [12](c01.xhtml#Page_12)
  prefs: []
  type: TYPE_NORMAL
- en: Arduino, [94](c06.xhtml#Page_94)
  prefs: []
  type: TYPE_NORMAL
- en: as a peripheral, [137](c08.xhtml#Page_137)
  prefs: []
  type: TYPE_NORMAL
- en: I²C programming, [131](c08.xhtml#Page_131)
  prefs: []
  type: TYPE_NORMAL
- en: Arduino Due, [100](c06.xhtml#Page_100)
  prefs: []
  type: TYPE_NORMAL
- en: Arduino Mega 2560, [98](c06.xhtml#Page_98)
  prefs: []
  type: TYPE_NORMAL
- en: Arduino Micro, [97](c06.xhtml#Page_97)
  prefs: []
  type: TYPE_NORMAL
- en: Arduino Nano, [96](c06.xhtml#Page_96)
  prefs: []
  type: TYPE_NORMAL
- en: Arduino Nano Every, [98](c06.xhtml#Page_98)
  prefs: []
  type: TYPE_NORMAL
- en: Arduino Uno Rev3, [95](c06.xhtml#Page_95)
  prefs: []
  type: TYPE_NORMAL
- en: Arduino Wire library, [134](c08.xhtml#Page_134)
  prefs: []
  type: TYPE_NORMAL
- en: '`available`, [135](c08.xhtml#Page_135)'
  prefs: []
  type: TYPE_NORMAL
- en: '`begin`, [134](c08.xhtml#Page_134)'
  prefs: []
  type: TYPE_NORMAL
- en: '`beginTransmission`, [136](c08.xhtml#Page_136)'
  prefs: []
  type: TYPE_NORMAL
- en: buffer size, [135](c08.xhtml#Page_135)
  prefs: []
  type: TYPE_NORMAL
- en: '`endTransmission`, [136](c08.xhtml#Page_136)'
  prefs: []
  type: TYPE_NORMAL
- en: '`onReceive`, [137](c08.xhtml#Page_137)'
  prefs: []
  type: TYPE_NORMAL
- en: '`onRequest`, [137](c08.xhtml#Page_137)'
  prefs: []
  type: TYPE_NORMAL
- en: '`read`, [135](c08.xhtml#Page_135)'
  prefs: []
  type: TYPE_NORMAL
- en: '`requestFrom`, [135](c08.xhtml#Page_135)'
  prefs: []
  type: TYPE_NORMAL
- en: '`SetClock`, [134](c08.xhtml#Page_134)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Wire.h* header file, [134](c08.xhtml#Page_134)'
  prefs: []
  type: TYPE_NORMAL
- en: '`write`, [136](c08.xhtml#Page_136)'
  prefs: []
  type: TYPE_NORMAL
- en: Arduino Zero, [100](c06.xhtml#Page_100)
  prefs: []
  type: TYPE_NORMAL
- en: Artemis (SparkFun) SBCs, [103](c06.xhtml#Page_103)
  prefs: []
  type: TYPE_NORMAL
- en: Atmel ATtiny, [350](c16.xhtml#Page_350)
  prefs: []
  type: TYPE_NORMAL
- en: atomic transmissions, [18](c02.xhtml#Page_18)
  prefs: []
  type: TYPE_NORMAL
- en: '`attachInterrupt` function (Arduino), [282](c13.xhtml#Page_282)'
  prefs: []
  type: TYPE_NORMAL
- en: ATtiny84, [349](c16.xhtml#Page_349)
  prefs: []
  type: TYPE_NORMAL
- en: ATtiny85 MCU, [64](c03.xhtml#Page_64)
  prefs: []
  type: TYPE_NORMAL
- en: Atto84, [349](c16.xhtml#Page_349)
  prefs: []
  type: TYPE_NORMAL
- en: autoincrement mode (MCP230*xx*), [272](c13.xhtml#Page_272)
  prefs: []
  type: TYPE_NORMAL
- en: '**B**'
  prefs: []
  type: TYPE_NORMAL
- en: BANK bit (MCP23017), [267](c13.xhtml#Page_267)
  prefs: []
  type: TYPE_NORMAL
- en: bare-metal peripheral programming, [349](c16.xhtml#Page_349)
  prefs: []
  type: TYPE_NORMAL
- en: BeagleBone Black, [108](c06.xhtml#Page_108), [172](c09.xhtml#Page_172)
  prefs: []
  type: TYPE_NORMAL
- en: bi-directional level shifter, [107](c06.xhtml#Page_107)
  prefs: []
  type: TYPE_NORMAL
- en: bi-directional logic level converter, [7](c01.xhtml#Page_7)
  prefs: []
  type: TYPE_NORMAL
- en: bit-banging, [153](c09.xhtml#Page_153), [172](c09.xhtml#Page_172), [349](c16.xhtml#Page_349)
  prefs: []
  type: TYPE_NORMAL
- en: bit order on the I²C bus, [17](c02.xhtml#Page_17)
  prefs: []
  type: TYPE_NORMAL
- en: blocking (a thread), [179](c10.xhtml#Page_179)
  prefs: []
  type: TYPE_NORMAL
- en: breakout boards, [115](c07.xhtml#Page_115)
  prefs: []
  type: TYPE_NORMAL
- en: BSS138, [7](c01.xhtml#Page_7)
  prefs: []
  type: TYPE_NORMAL
- en: bus activation on Raspberry Pi, [151](c09.xhtml#Page_151)
  prefs: []
  type: TYPE_NORMAL
- en: bus arbitration, [12](c01.xhtml#Page_12)
  prefs: []
  type: TYPE_NORMAL
- en: bus capacitance, [5](c01.xhtml#Page_5), [8](c01.xhtml#Page_8), [253](c12.xhtml#Page_253),
    [256](c12.xhtml#Page_256)
  prefs: []
  type: TYPE_NORMAL
- en: bus clock synchronization, [10](c01.xhtml#Page_10)
  prefs: []
  type: TYPE_NORMAL
- en: bus drivers, [70](c04.xhtml#Page_70)
  prefs: []
  type: TYPE_NORMAL
- en: bus expander, [253](c12.xhtml#Page_253)
  prefs: []
  type: TYPE_NORMAL
- en: bus monitors, [70](c04.xhtml#Page_70)
  prefs: []
  type: TYPE_NORMAL
- en: Bus Pirate, [70](c04.xhtml#Page_70), [75](c04.xhtml#Page_75)
  prefs: []
  type: TYPE_NORMAL
- en: bus sniffers, [70](c04.xhtml#Page_70)
  prefs: []
  type: TYPE_NORMAL
- en: bus speed, [256](c12.xhtml#Page_256)
  prefs: []
  type: TYPE_NORMAL
- en: bus switches, [254](c12.xhtml#Page_254)
  prefs: []
  type: TYPE_NORMAL
- en: busy-waiting loop, [175](c10.xhtml#Page_175), [233](c11.xhtml#Page_233)
  prefs: []
  type: TYPE_NORMAL
- en: '**C**'
  prefs: []
  type: TYPE_NORMAL
- en: capacitance meters, [68](c04.xhtml#Page_68)
  prefs: []
  type: TYPE_NORMAL
- en: capacitive loading on I²C bus (TCA9458A), [256](c12.xhtml#Page_256)
  prefs: []
  type: TYPE_NORMAL
- en: capes, [116](c07.xhtml#Page_116)
  prefs: []
  type: TYPE_NORMAL
- en: CBUS, [24](c02.xhtml#Page_24)
  prefs: []
  type: TYPE_NORMAL
- en: clearing interrupts (MCP230*xx*), [285](c13.xhtml#Page_285)
  prefs: []
  type: TYPE_NORMAL
- en: clock frequency on Raspberry Pi (I²C), [152](c09.xhtml#Page_152)
  prefs: []
  type: TYPE_NORMAL
- en: clocking data on the I²C Bus, [16](c02.xhtml#Page_16), [28](c02.xhtml#Page_28)
  prefs: []
  type: TYPE_NORMAL
- en: clock stretching, [10](c01.xhtml#Page_10), [13](c01.xhtml#Page_13), [94](c06.xhtml#Page_94),
    [105](c06.xhtml#Page_105), [107](c06.xhtml#Page_107), [20](c02.xhtml#Page_20)
  prefs: []
  type: TYPE_NORMAL
- en: clock synchronization, [10](c01.xhtml#Page_10)
  prefs: []
  type: TYPE_NORMAL
- en: comparator control bits (ADS1*x*15), [311](c14.xhtml#Page_311)
  prefs: []
  type: TYPE_NORMAL
- en: concurrent execution of tasks, [177](c10.xhtml#Page_177)
  prefs: []
  type: TYPE_NORMAL
- en: configuration register (ADS1*x*15), [310](c14.xhtml#Page_310)
  prefs: []
  type: TYPE_NORMAL
- en: controller acknowledgement of a read, [18](c02.xhtml#Page_18)
  prefs: []
  type: TYPE_NORMAL
- en: controller devices, [4](c01.xhtml#Page_4)
  prefs: []
  type: TYPE_NORMAL
- en: conversion rate (ADS1*x*15), [312](c14.xhtml#Page_312)
  prefs: []
  type: TYPE_NORMAL
- en: conversion register (ADS1*x*15), [310](c14.xhtml#Page_310)
  prefs: []
  type: TYPE_NORMAL
- en: conversion start/ready bit (ADS1*x*15), [315](c14.xhtml#Page_315)
  prefs: []
  type: TYPE_NORMAL
- en: critical sections, [179](c10.xhtml#Page_179)
  prefs: []
  type: TYPE_NORMAL
- en: cross talk, [13](c01.xhtml#Page_13)
  prefs: []
  type: TYPE_NORMAL
- en: custom I²C devices, [28](c02.xhtml#Page_28)
  prefs: []
  type: TYPE_NORMAL
- en: '**D**'
  prefs: []
  type: TYPE_NORMAL
- en: data direction register (MCP230*xx*), [268](c13.xhtml#Page_268)
  prefs: []
  type: TYPE_NORMAL
- en: DDC (VESA), [89](c05.xhtml#Page_89)
  prefs: []
  type: TYPE_NORMAL
- en: debouncing inputs, [289](c13.xhtml#Page_289)
  prefs: []
  type: TYPE_NORMAL
- en: DEFVALA register (MCP23017), [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: DEFVALB register (MCP23017), [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: DEFVAL register (MCP23008), [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: DEFVAL register (MCP230*xx*), [284](c13.xhtml#Page_284)
  prefs: []
  type: TYPE_NORMAL
- en: detecting I²C peripherals, [26](c02.xhtml#Page_26)
  prefs: []
  type: TYPE_NORMAL
- en: device ID, [25](c02.xhtml#Page_25)
  prefs: []
  type: TYPE_NORMAL
- en: differential inputs, [300](c14.xhtml#Page_300), [303](c14.xhtml#Page_303)
  prefs: []
  type: TYPE_NORMAL
- en: differential line drivers, [303](c14.xhtml#Page_303)
  prefs: []
  type: TYPE_NORMAL
- en: DisplayPort, [89](c05.xhtml#Page_89)
  prefs: []
  type: TYPE_NORMAL
- en: DISSLW bit (MCP230*xx*), [267](c13.xhtml#Page_267)
  prefs: []
  type: TYPE_NORMAL
- en: DMM (digital multimeters), [68](c04.xhtml#Page_68)
  prefs: []
  type: TYPE_NORMAL
- en: downstream I²C devices, [254](c12.xhtml#Page_254)
  prefs: []
  type: TYPE_NORMAL
- en: dry contact inputs, [269](c13.xhtml#Page_269)
  prefs: []
  type: TYPE_NORMAL
- en: DSI interface (Raspberry Pi), [148](c09.xhtml#Page_148)
  prefs: []
  type: TYPE_NORMAL
- en: DVI, [89](c05.xhtml#Page_89)
  prefs: []
  type: TYPE_NORMAL
- en: '**E**'
  prefs: []
  type: TYPE_NORMAL
- en: E-DDC, [112](c06.xhtml#Page_112), [148](c09.xhtml#Page_148)
  prefs: []
  type: TYPE_NORMAL
- en: E-DDC and VESA DDC, [89](c05.xhtml#Page_89), [112](c06.xhtml#Page_112), [148](c09.xhtml#Page_148)
  prefs: []
  type: TYPE_NORMAL
- en: enabling I²C bus(es) on the Raspberry Pi, [151](c09.xhtml#Page_151)
  prefs: []
  type: TYPE_NORMAL
- en: enabling interrupts on the MCP230*xx*, [284](c13.xhtml#Page_284)
  prefs: []
  type: TYPE_NORMAL
- en: events (in an RTOS), [179](c10.xhtml#Page_179)
  prefs: []
  type: TYPE_NORMAL
- en: '**F**'
  prefs: []
  type: TYPE_NORMAL
- en: fast mode, [9](c01.xhtml#Page_9)
  prefs: []
  type: TYPE_NORMAL
- en: fast mode plus, [9](c01.xhtml#Page_9), [14](c01.xhtml#Page_14)
  prefs: []
  type: TYPE_NORMAL
- en: Feather bus, [115](c07.xhtml#Page_115)
  prefs: []
  type: TYPE_NORMAL
- en: PC I²C signals, [119](c07.xhtml#Page_119)
  prefs: []
  type: TYPE_NORMAL
- en: pinouts, [118](c07.xhtml#Page_118)
  prefs: []
  type: TYPE_NORMAL
- en: Feather SBCs, [102](c06.xhtml#Page_102), [117](c07.xhtml#Page_117)
  prefs: []
  type: TYPE_NORMAL
- en: Feather specifications, [117](c07.xhtml#Page_117)
  prefs: []
  type: TYPE_NORMAL
- en: FeatherWings, [117](c07.xhtml#Page_117), [120](c07.xhtml#Page_120)
  prefs: []
  type: TYPE_NORMAL
- en: filtering analog input noise, [331](c14.xhtml#Page_331)
  prefs: []
  type: TYPE_NORMAL
- en: four-wire mode, [5](c01.xhtml#Page_5)
  prefs: []
  type: TYPE_NORMAL
- en: FreeRTOS, [175](c10.xhtml#Page_175), [189](c10.xhtml#Page_189)
  prefs: []
  type: TYPE_NORMAL
- en: FTDI, [112](c06.xhtml#Page_112)
  prefs: []
  type: TYPE_NORMAL
- en: '**G**'
  prefs: []
  type: TYPE_NORMAL
- en: general call, [21](c02.xhtml#Page_21)
  prefs: []
  type: TYPE_NORMAL
- en: glitch filtering, [221](c11.xhtml#Page_221), [234](c11.xhtml#Page_234)
  prefs: []
  type: TYPE_NORMAL
- en: GPINTENA register (MCP23017), [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: GPINTENB register (MCP23017), [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: GPINTEN register (MCP23008), [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: GPINTEN*x* register (MCP230*xx*), [284](c13.xhtml#Page_284)
  prefs: []
  type: TYPE_NORMAL
- en: GPIOA register (MCP23017), [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: GPIOB register (MCP23017), [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: GPIO pins (MCP230*xx*), [263](c13.xhtml#Page_263)
  prefs: []
  type: TYPE_NORMAL
- en: GPIO register (MCP23008), [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: GPPUA register (MCP23017), [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: GPPUB register (MCP23017), [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: GPPU register (MCP23008), [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: GPPU*x* register (MCP230*xx*), [270](c13.xhtml#Page_270)
  prefs: []
  type: TYPE_NORMAL
- en: Grand Central M4 Express, [102](c06.xhtml#Page_102)
  prefs: []
  type: TYPE_NORMAL
- en: Grove bus, [115](c07.xhtml#Page_115), [125](c07.xhtml#Page_125)
  prefs: []
  type: TYPE_NORMAL
- en: Grove bus pinouts, [126](c07.xhtml#Page_126)
  prefs: []
  type: TYPE_NORMAL
- en: guaranteed response time (ISR), [176](c10.xhtml#Page_176)
  prefs: []
  type: TYPE_NORMAL
- en: '**H**'
  prefs: []
  type: TYPE_NORMAL
- en: hardware general calls, [23](c02.xhtml#Page_23)
  prefs: []
  type: TYPE_NORMAL
- en: HATs, [116](c07.xhtml#Page_116), [148](c09.xhtml#Page_148)
  prefs: []
  type: TYPE_NORMAL
- en: HDMI, [89](c05.xhtml#Page_89)
  prefs: []
  type: TYPE_NORMAL
- en: high-speed mode, [10](c01.xhtml#Page_10), [24](c02.xhtml#Page_24)
  prefs: []
  type: TYPE_NORMAL
- en: high threshold register (ADS1*x*15), [315](c14.xhtml#Page_315)
  prefs: []
  type: TYPE_NORMAL
- en: host (I²C, SMBus), [82](c05.xhtml#Page_82)
  prefs: []
  type: TYPE_NORMAL
- en: '**I**'
  prefs: []
  type: TYPE_NORMAL
- en: I²C
  prefs: []
  type: TYPE_NORMAL
- en: addresses, [5](c01.xhtml#Page_5), [10](c01.xhtml#Page_10), [19](c02.xhtml#Page_19)
  prefs: []
  type: TYPE_NORMAL
- en: bus bit order, [17](c02.xhtml#Page_17)
  prefs: []
  type: TYPE_NORMAL
- en: bus speed, [5](c01.xhtml#Page_5), [9](c01.xhtml#Page_9)
  prefs: []
  type: TYPE_NORMAL
- en: bus start sequence, [12](c01.xhtml#Page_12)
  prefs: []
  type: TYPE_NORMAL
- en: clock frequency on the Raspberry Pi, [152](c09.xhtml#Page_152)
  prefs: []
  type: TYPE_NORMAL
- en: clock stretching, [13](c01.xhtml#Page_13)
  prefs: []
  type: TYPE_NORMAL
- en: controller devices, [4](c01.xhtml#Page_4)
  prefs: []
  type: TYPE_NORMAL
- en: driver, [70](c04.xhtml#Page_70)
  prefs: []
  type: TYPE_NORMAL
- en: host, [82](c05.xhtml#Page_82)
  prefs: []
  type: TYPE_NORMAL
- en: PC support, [112](c06.xhtml#Page_112)
  prefs: []
  type: TYPE_NORMAL
- en: peripheral devices, [4](c01.xhtml#Page_4)
  prefs: []
  type: TYPE_NORMAL
- en: peripheral programming, [349](c16.xhtml#Page_349)
  prefs: []
  type: TYPE_NORMAL
- en: PiOS kernel function calls for, [162](c09.xhtml#Page_162)
  prefs: []
  type: TYPE_NORMAL
- en: PiOS programming, [158](c09.xhtml#Page_158)
  prefs: []
  type: TYPE_NORMAL
- en: programming on the Arduino, [134](c08.xhtml#Page_134)
  prefs: []
  type: TYPE_NORMAL
- en: protocol, [15](c02.xhtml#Page_15)
  prefs: []
  type: TYPE_NORMAL
- en: support on a PC, [112](c06.xhtml#Page_112)
  prefs: []
  type: TYPE_NORMAL
- en: I2C bus
  prefs: []
  type: TYPE_NORMAL
- en: arbitration, [12](c01.xhtml#Page_12)
  prefs: []
  type: TYPE_NORMAL
- en: clocking data to, [16](c02.xhtml#Page_16), [28](c02.xhtml#Page_28)
  prefs: []
  type: TYPE_NORMAL
- en: writing data to, [19](c02.xhtml#Page_19)
  prefs: []
  type: TYPE_NORMAL
- en: '`i2cdetect` utility (Linux), [155](c09.xhtml#Page_155)'
  prefs: []
  type: TYPE_NORMAL
- en: '`i2c-dev` functions (Linux/PiOS), [163](c09.xhtml#Page_163)'
  prefs: []
  type: TYPE_NORMAL
- en: '`i2cdump` utility (Linux), [155](c09.xhtml#Page_155)'
  prefs: []
  type: TYPE_NORMAL
- en: '`i2cget` utility (Linux), [155](c09.xhtml#Page_155)'
  prefs: []
  type: TYPE_NORMAL
- en: '`i2cput` utility (Linux), [155](c09.xhtml#Page_155)'
  prefs: []
  type: TYPE_NORMAL
- en: '`i2c_smbus_read_block_data` function, [169](c09.xhtml#Page_169)'
  prefs: []
  type: TYPE_NORMAL
- en: '`i2c_smbus_read_byte_data` function, [166](c09.xhtml#Page_166)'
  prefs: []
  type: TYPE_NORMAL
- en: '`i2c_smbus_read_byte` function, [165](c09.xhtml#Page_165)'
  prefs: []
  type: TYPE_NORMAL
- en: '`i2c_smbus_read_word_data` function, [168](c09.xhtml#Page_168)'
  prefs: []
  type: TYPE_NORMAL
- en: '`i2c_smbus_write_block_data` function, [170](c09.xhtml#Page_170)'
  prefs: []
  type: TYPE_NORMAL
- en: '`i2c_smbus_write_byte_data` function, [168](c09.xhtml#Page_168)'
  prefs: []
  type: TYPE_NORMAL
- en: '`i2c_smbus_write_byte` function, [166](c09.xhtml#Page_166)'
  prefs: []
  type: TYPE_NORMAL
- en: '`i2c_smbus_write_quick` function, [164](c09.xhtml#Page_164)'
  prefs: []
  type: TYPE_NORMAL
- en: '`i2c_smbus_write_word_data` function, [169](c09.xhtml#Page_169)'
  prefs: []
  type: TYPE_NORMAL
- en: illegal command code (general call operation), [22](c02.xhtml#Page_22)
  prefs: []
  type: TYPE_NORMAL
- en: input polarity (MCP230*xx*), [270](c13.xhtml#Page_270)
  prefs: []
  type: TYPE_NORMAL
- en: INTCAPA register (MCP23017), [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: INTCAPB register (MCP23017), [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: INTCAP/INTCAPA/INTCAPB registers (MCP230*xx*), [285](c13.xhtml#Page_285)
  prefs: []
  type: TYPE_NORMAL
- en: INTCAP register (MCP23008), [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: INTCONA register (MCP23017), [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: INTCONB register (MCP23017), [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: INTCON register (MCP23008), [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: INTCON register (MCP230*xx*), [284](c13.xhtml#Page_284)
  prefs: []
  type: TYPE_NORMAL
- en: internal pullup resistors on MCP230*xx*, [269](c13.xhtml#Page_269)
  prefs: []
  type: TYPE_NORMAL
- en: interrupt polarity (MCP230*xx*), [283](c13.xhtml#Page_283)
  prefs: []
  type: TYPE_NORMAL
- en: interrupt service routine, [142](c08.xhtml#Page_142), [176](c10.xhtml#Page_176),
    [281](c13.xhtml#Page_281)
  prefs: []
  type: TYPE_NORMAL
- en: interrupt signal, [176](c10.xhtml#Page_176)
  prefs: []
  type: TYPE_NORMAL
- en: interrupts on the MCP230*xx*, [280](c13.xhtml#Page_280)
  prefs: []
  type: TYPE_NORMAL
- en: INTFA register (MCP23017), [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: INTFB register (MCP23017), [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: INTF/INTFA/INTFB register (MCP230*xx*), [285](c13.xhtml#Page_285)
  prefs: []
  type: TYPE_NORMAL
- en: INTF register (MCP23008), [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: INTPOL bit (MCP23017), [267](c13.xhtml#Page_267)
  prefs: []
  type: TYPE_NORMAL
- en: INTPOL bit (MCP230*xx*), [283](c13.xhtml#Page_283)
  prefs: []
  type: TYPE_NORMAL
- en: INT*x* register(s) (MCP230*xx*), [281](c13.xhtml#Page_281)
  prefs: []
  type: TYPE_NORMAL
- en: IOCON register (MCP23008), [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: IOCON register (MCP23017), [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: IOCON register initialization (MCP230*xx*), [268](c13.xhtml#Page_268)
  prefs: []
  type: TYPE_NORMAL
- en: IODIRB register (MCP23017), [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: IODIR register (MCP23008), [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: IPOLA register (MCP23017), [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: IPOLB register (MCP23017), [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: IPOL register (MCP23008), [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: IPOL*x* register (MCP230*xx*), [271](c13.xhtml#Page_271)
  prefs: []
  type: TYPE_NORMAL
- en: ISR, [176](c10.xhtml#Page_176), [281](c13.xhtml#Page_281)
  prefs: []
  type: TYPE_NORMAL
- en: ISR functions, [282](c13.xhtml#Page_282)
  prefs: []
  type: TYPE_NORMAL
- en: '**K**'
  prefs: []
  type: TYPE_NORMAL
- en: keybounce, [289](c13.xhtml#Page_289)
  prefs: []
  type: TYPE_NORMAL
- en: '**L**'
  prefs: []
  type: TYPE_NORMAL
- en: least significant bit (LSB), [17](c02.xhtml#Page_17)
  prefs: []
  type: TYPE_NORMAL
- en: level shifting, [7](c01.xhtml#Page_7), [256](c12.xhtml#Page_256)
  prefs: []
  type: TYPE_NORMAL
- en: Linux `i2cdetect` utility, [27](c02.xhtml#Page_27)
  prefs: []
  type: TYPE_NORMAL
- en: Linux `i2c-dev` functions, [163](c09.xhtml#Page_163)
  prefs: []
  type: TYPE_NORMAL
- en: Linux `i2cdump` utility, [155](c09.xhtml#Page_155)
  prefs: []
  type: TYPE_NORMAL
- en: Linux `i2cget` utility, [155](c09.xhtml#Page_155)
  prefs: []
  type: TYPE_NORMAL
- en: Linux I²C programming, [147](c09.xhtml#Page_147), [158](c09.xhtml#Page_158)
  prefs: []
  type: TYPE_NORMAL
- en: Linux `i2cput` utility, [155](c09.xhtml#Page_155)
  prefs: []
  type: TYPE_NORMAL
- en: Linux kernel function calls for I2C, [162](c09.xhtml#Page_162)
  prefs: []
  type: TYPE_NORMAL
- en: LKM (loadable kernel modules), [151](c09.xhtml#Page_151)
  prefs: []
  type: TYPE_NORMAL
- en: logic analyzers, [70](c04.xhtml#Page_70)
  prefs: []
  type: TYPE_NORMAL
- en: low-level peripheral programming, [349](c16.xhtml#Page_349)
  prefs: []
  type: TYPE_NORMAL
- en: low threshold register (ADS1*x*15), [315](c14.xhtml#Page_315)
  prefs: []
  type: TYPE_NORMAL
- en: LSB (least significant bit), [17](c02.xhtml#Page_17)
  prefs: []
  type: TYPE_NORMAL
- en: '**M**'
  prefs: []
  type: TYPE_NORMAL
- en: master devices, [4](c01.xhtml#Page_4)
  prefs: []
  type: TYPE_NORMAL
- en: Master Interrupt Enable Register (MIER), [212](c11.xhtml#Page_212)
  prefs: []
  type: TYPE_NORMAL
- en: Master Receive Data Register (MRDR), [215](c11.xhtml#Page_215)
  prefs: []
  type: TYPE_NORMAL
- en: Master Transmit Data Register (MTDR), [214](c11.xhtml#Page_214)
  prefs: []
  type: TYPE_NORMAL
- en: maximum permissible voltages (ADCs), [302](c14.xhtml#Page_302)
  prefs: []
  type: TYPE_NORMAL
- en: Mbed
  prefs: []
  type: TYPE_NORMAL
- en: I²C programming, [199](c10.xhtml#Page_199)
  prefs: []
  type: TYPE_NORMAL
- en: RTOS (real-time operating system) 110, [175](c10.xhtml#Page_175)
  prefs: []
  type: TYPE_NORMAL
- en: Studio Integrated Development Environment, [199](c10.xhtml#Page_199)
  prefs: []
  type: TYPE_NORMAL
- en: MCP23008
  prefs: []
  type: TYPE_NORMAL
- en: DEFVAL register, [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: GPINTEN register, [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: GPIO register, [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: INTCAP register, [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: INTCON register, [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: INTF register, [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: IOCON register, [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: IODIR register, [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: IPOL register, [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: OLAT register, [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: MCP23017
  prefs: []
  type: TYPE_NORMAL
- en: BANK bit
  prefs: []
  type: TYPE_NORMAL
- en: DEFVALA register, [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: DEFVALB register, [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: GPINTENA register, [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: GPINTENB register, [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: GPIOA register, [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: GPIOB register, [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: GPPUA register, [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: GPPUB register, [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: INTCAPA register, [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: INTCAPB register, [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: INTCONA register, [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: INTCONB register, [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: INTFA register, [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: INTFB register, [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: INTPOL bit, [267](c13.xhtml#Page_267)
  prefs: []
  type: TYPE_NORMAL
- en: IOCON register, [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: IODIRB register, [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: IPOLA register, [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: IPOLB register, [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: MIRROR bit, [267](c13.xhtml#Page_267)
  prefs: []
  type: TYPE_NORMAL
- en: OLATA register, [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: OLATB register, [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: MCP230*xx*
  prefs: []
  type: TYPE_NORMAL
- en: accessing, [266](c13.xhtml#Page_266)
  prefs: []
  type: TYPE_NORMAL
- en: address pins, [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: autoincrement mode, [272](c13.xhtml#Page_272)
  prefs: []
  type: TYPE_NORMAL
- en: clearing interrupts, [285](c13.xhtml#Page_285)
  prefs: []
  type: TYPE_NORMAL
- en: data direction register, [268](c13.xhtml#Page_268)
  prefs: []
  type: TYPE_NORMAL
- en: DEFVAL register, [284](c13.xhtml#Page_284)
  prefs: []
  type: TYPE_NORMAL
- en: DISSLW bit, [267](c13.xhtml#Page_267)
  prefs: []
  type: TYPE_NORMAL
- en: enabling interrupts, [284](c13.xhtml#Page_284)
  prefs: []
  type: TYPE_NORMAL
- en: GPINTEN*x* register, [284](c13.xhtml#Page_284)
  prefs: []
  type: TYPE_NORMAL
- en: GPIO pins, [263](c13.xhtml#Page_263)
  prefs: []
  type: TYPE_NORMAL
- en: initialization, [266](c13.xhtml#Page_266)
  prefs: []
  type: TYPE_NORMAL
- en: input polarity, [270](c13.xhtml#Page_270)
  prefs: []
  type: TYPE_NORMAL
- en: INTCAP/INTCAPA/INTCAPB registers, [285](c13.xhtml#Page_285)
  prefs: []
  type: TYPE_NORMAL
- en: INTCON register, [284](c13.xhtml#Page_284)
  prefs: []
  type: TYPE_NORMAL
- en: internal pullup resistors, [269](c13.xhtml#Page_269)
  prefs: []
  type: TYPE_NORMAL
- en: interrupt enable, [284](c13.xhtml#Page_284)
  prefs: []
  type: TYPE_NORMAL
- en: interrupt polarity, [283](c13.xhtml#Page_283)
  prefs: []
  type: TYPE_NORMAL
- en: interrupts on, [280](c13.xhtml#Page_280)
  prefs: []
  type: TYPE_NORMAL
- en: INTF/INTFA/INTFB register, [285](c13.xhtml#Page_285)
  prefs: []
  type: TYPE_NORMAL
- en: int pins, [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: INTPOL bit, [283](c13.xhtml#Page_283)
  prefs: []
  type: TYPE_NORMAL
- en: INT*x* register(s), [281](c13.xhtml#Page_281)
  prefs: []
  type: TYPE_NORMAL
- en: IOCON register initialization, [268](c13.xhtml#Page_268)
  prefs: []
  type: TYPE_NORMAL
- en: IOCON register write operation, [268](c13.xhtml#Page_268)
  prefs: []
  type: TYPE_NORMAL
- en: IPOL*x* register, [271](c13.xhtml#Page_271)
  prefs: []
  type: TYPE_NORMAL
- en: MIRROR bit, [283](c13.xhtml#Page_283)
  prefs: []
  type: TYPE_NORMAL
- en: mirroring INT*x* pins, [283](c13.xhtml#Page_283)
  prefs: []
  type: TYPE_NORMAL
- en: multiplexer control bits, [314](c14.xhtml#Page_314)
  prefs: []
  type: TYPE_NORMAL
- en: pinouts, [262](c13.xhtml#Page_262)
  prefs: []
  type: TYPE_NORMAL
- en: power up state, [266](c13.xhtml#Page_266)
  prefs: []
  type: TYPE_NORMAL
- en: pullup resistor, [269](c13.xhtml#Page_269)
  prefs: []
  type: TYPE_NORMAL
- en: reading from, [266](c13.xhtml#Page_266)
  prefs: []
  type: TYPE_NORMAL
- en: reading GPIO pins, [274](c13.xhtml#Page_274)
  prefs: []
  type: TYPE_NORMAL
- en: registers, [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: reset pin, [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: SEQOP bit, [267](c13.xhtml#Page_267)
  prefs: []
  type: TYPE_NORMAL
- en: sequential register operations, [271](c13.xhtml#Page_271)
  prefs: []
  type: TYPE_NORMAL
- en: slew rate control, [273](c13.xhtml#Page_273)
  prefs: []
  type: TYPE_NORMAL
- en: testing interrupts, [285](c13.xhtml#Page_285)
  prefs: []
  type: TYPE_NORMAL
- en: writing GPIO pins, [275](c13.xhtml#Page_275)
  prefs: []
  type: TYPE_NORMAL
- en: writing to, [266](c13.xhtml#Page_266)
  prefs: []
  type: TYPE_NORMAL
- en: writing to the IOCON register, [268](c13.xhtml#Page_268)
  prefs: []
  type: TYPE_NORMAL
- en: MCP4725 digital-to-analog converter, [132](c08.xhtml#Page_132), [341](c15.xhtml#Page_341)
  prefs: []
  type: TYPE_NORMAL
- en: memory peripheral device (I²C), [351](c16.xhtml#Page_351)
  prefs: []
  type: TYPE_NORMAL
- en: Metro 328 SBC, [101](c06.xhtml#Page_101)
  prefs: []
  type: TYPE_NORMAL
- en: MIER (Master Interrupt Enable Register), [212](c11.xhtml#Page_212)
  prefs: []
  type: TYPE_NORMAL
- en: MIRROR bit (MCP23017), [267](c13.xhtml#Page_267)
  prefs: []
  type: TYPE_NORMAL
- en: MIRROR bit (MCP230*xx*), [283](c13.xhtml#Page_283)
  prefs: []
  type: TYPE_NORMAL
- en: mirroring INT*x* pins (MCP230*xx*), [283](c13.xhtml#Page_283)
  prefs: []
  type: TYPE_NORMAL
- en: MOD54415 SBC, [180](c10.xhtml#Page_180)
  prefs: []
  type: TYPE_NORMAL
- en: MRDR (Master Receive Data Register), [215](c11.xhtml#Page_215)
  prefs: []
  type: TYPE_NORMAL
- en: MSB (most significant bit), [17](c02.xhtml#Page_17)
  prefs: []
  type: TYPE_NORMAL
- en: MTDR (Master Transmit Data Register), [214](c11.xhtml#Page_214)
  prefs: []
  type: TYPE_NORMAL
- en: multicontroller, [5](c01.xhtml#Page_5)
  prefs: []
  type: TYPE_NORMAL
- en: I²C bus configuration, [10](c01.xhtml#Page_10)
  prefs: []
  type: TYPE_NORMAL
- en: operation under Linux, [171](c09.xhtml#Page_171)
  prefs: []
  type: TYPE_NORMAL
- en: multiplexer control bits (ADS1*x*15), [314](c14.xhtml#Page_314)
  prefs: []
  type: TYPE_NORMAL
- en: multiplexers (I²C), [254](c12.xhtml#Page_254)
  prefs: []
  type: TYPE_NORMAL
- en: multitasking, [177](c10.xhtml#Page_177)
  prefs: []
  type: TYPE_NORMAL
- en: multithreading, [177](c10.xhtml#Page_177)
  prefs: []
  type: TYPE_NORMAL
- en: mutexes (mutual exclusion), [179](c10.xhtml#Page_179)
  prefs: []
  type: TYPE_NORMAL
- en: '**N**'
  prefs: []
  type: TYPE_NORMAL
- en: NAK (negative acknowledgment) bits 17
  prefs: []
  type: TYPE_NORMAL
- en: NBRTOS (NetBurner), [180](c10.xhtml#Page_180)
  prefs: []
  type: TYPE_NORMAL
- en: NetBurner MOD54415 SBC, [111](c06.xhtml#Page_111)
  prefs: []
  type: TYPE_NORMAL
- en: Nucleo-144 SBC, [111](c06.xhtml#Page_111)
  prefs: []
  type: TYPE_NORMAL
- en: NXP Semiconductors, [3](c01.xhtml#Page_3)
  prefs: []
  type: TYPE_NORMAL
- en: Nyquest theorem, [304](c14.xhtml#Page_304)
  prefs: []
  type: TYPE_NORMAL
- en: '**O**'
  prefs: []
  type: TYPE_NORMAL
- en: ODR bit
  prefs: []
  type: TYPE_NORMAL
- en: MCP230*xx*, [267](c13.xhtml#Page_267)
  prefs: []
  type: TYPE_NORMAL
- en: open-drain control, MCP230*xx*, [283](c13.xhtml#Page_283)
  prefs: []
  type: TYPE_NORMAL
- en: OLATA register (MCP23017), [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: OLATB register (MCP23017), [265](c13.xhtml#Page_265)
  prefs: []
  type: TYPE_NORMAL
- en: OLAT register (MCP23008), [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: Onion Omega2+, [172](c09.xhtml#Page_172)
  prefs: []
  type: TYPE_NORMAL
- en: Onion Omega SBC, [109](c06.xhtml#Page_109)
  prefs: []
  type: TYPE_NORMAL
- en: open collector, [5](c01.xhtml#Page_5)
  prefs: []
  type: TYPE_NORMAL
- en: open drain, [5](c01.xhtml#Page_5)
  prefs: []
  type: TYPE_NORMAL
- en: open-drain signals, [6](c01.xhtml#Page_6)
  prefs: []
  type: TYPE_NORMAL
- en: operational status bit, [315](c14.xhtml#Page_315)
  prefs: []
  type: TYPE_NORMAL
- en: oscilloscopes versus logic analyzers, [70](c04.xhtml#Page_70)
  prefs: []
  type: TYPE_NORMAL
- en: '**P**'
  prefs: []
  type: TYPE_NORMAL
- en: Particle Photon, [118](c07.xhtml#Page_118)
  prefs: []
  type: TYPE_NORMAL
- en: peripheral acknowledgement of a read, [18](c02.xhtml#Page_18)
  prefs: []
  type: TYPE_NORMAL
- en: peripheral detection, [26](c02.xhtml#Page_26)
  prefs: []
  type: TYPE_NORMAL
- en: peripheral device (Arduino), [137](c08.xhtml#Page_137)
  prefs: []
  type: TYPE_NORMAL
- en: peripheral devices, [4](c01.xhtml#Page_4)
  prefs: []
  type: TYPE_NORMAL
- en: PGA (programmable gain amplifier), [313](c14.xhtml#Page_313)–[314](c14.xhtml#Page_314)
  prefs: []
  type: TYPE_NORMAL
- en: Photon (Particle) bus, [118](c07.xhtml#Page_118)
  prefs: []
  type: TYPE_NORMAL
- en: pigpio library, [173](c09.xhtml#Page_173)
  prefs: []
  type: TYPE_NORMAL
- en: Pi HATs, [148](c09.xhtml#Page_148)
  prefs: []
  type: TYPE_NORMAL
- en: PINE64, [172](c09.xhtml#Page_172)
  prefs: []
  type: TYPE_NORMAL
- en: PINE64 SBC, [109](c06.xhtml#Page_109)
  prefs: []
  type: TYPE_NORMAL
- en: PiOS I²C programming, [158](c09.xhtml#Page_158)
  prefs: []
  type: TYPE_NORMAL
- en: PiOS kernel function calls for I²C, [162](c09.xhtml#Page_162)
  prefs: []
  type: TYPE_NORMAL
- en: PJRC, [104](c06.xhtml#Page_104)
  prefs: []
  type: TYPE_NORMAL
- en: PlatformIO IDE, [190](c10.xhtml#Page_190)
  prefs: []
  type: TYPE_NORMAL
- en: polarity (ADC inputs), [302](c14.xhtml#Page_302)
  prefs: []
  type: TYPE_NORMAL
- en: polling, [176](c10.xhtml#Page_176)
  prefs: []
  type: TYPE_NORMAL
- en: power-down mode (ADS1*x*15), [315](c14.xhtml#Page_315)
  prefs: []
  type: TYPE_NORMAL
- en: priority-based system (RTOS), [178](c10.xhtml#Page_178)
  prefs: []
  type: TYPE_NORMAL
- en: processes, [177](c10.xhtml#Page_177)
  prefs: []
  type: TYPE_NORMAL
- en: programmable gain amplifier (PGA), [313](c14.xhtml#Page_313)–[314](c14.xhtml#Page_314)
  prefs: []
  type: TYPE_NORMAL
- en: programmable pullup resistors (MCP230*xx*), [270](c13.xhtml#Page_270)
  prefs: []
  type: TYPE_NORMAL
- en: pullup resistor, [270](c13.xhtml#Page_270)
  prefs: []
  type: TYPE_NORMAL
- en: MCP230*xx*, [269](c13.xhtml#Page_269)
  prefs: []
  type: TYPE_NORMAL
- en: sizes, [8](c01.xhtml#Page_8)
  prefs: []
  type: TYPE_NORMAL
- en: '**Q**'
  prefs: []
  type: TYPE_NORMAL
- en: quickselect algorithm (median computation), [331](c14.xhtml#Page_331)
  prefs: []
  type: TYPE_NORMAL
- en: Qwiic bus, [103](c06.xhtml#Page_103), [112](c06.xhtml#Page_112), [115](c07.xhtml#Page_115)
  prefs: []
  type: TYPE_NORMAL
- en: Qwiic Pro Micro, [103](c06.xhtml#Page_103)
  prefs: []
  type: TYPE_NORMAL
- en: '**R**'
  prefs: []
  type: TYPE_NORMAL
- en: race conditions, [284](c13.xhtml#Page_284)
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi, [105](c06.xhtml#Page_105), [147](c09.xhtml#Page_147)
  prefs: []
  type: TYPE_NORMAL
- en: DSI interface, [148](c09.xhtml#Page_148)
  prefs: []
  type: TYPE_NORMAL
- en: I²C bus activation, [151](c09.xhtml#Page_151)
  prefs: []
  type: TYPE_NORMAL
- en: I²C clock frequency, 152
  prefs: []
  type: TYPE_NORMAL
- en: loadable kernel modules, [151](c09.xhtml#Page_151)
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pico, [107](c06.xhtml#Page_107)
  prefs: []
  type: TYPE_NORMAL
- en: read acknowledgement by a controller, [18](c02.xhtml#Page_18)
  prefs: []
  type: TYPE_NORMAL
- en: reading from MCP230*xx*, [266](c13.xhtml#Page_266)
  prefs: []
  type: TYPE_NORMAL
- en: reading GPIO pins (MCP230*xx*), [274](c13.xhtml#Page_274)
  prefs: []
  type: TYPE_NORMAL
- en: read/write control on I²C bus, [19](c02.xhtml#Page_19)
  prefs: []
  type: TYPE_NORMAL
- en: ready to run queue (RTOS), [177](c10.xhtml#Page_177)
  prefs: []
  type: TYPE_NORMAL
- en: RedBoard (SparkFun), [103](c06.xhtml#Page_103)
  prefs: []
  type: TYPE_NORMAL
- en: reentrancy, [178](c10.xhtml#Page_178)
  prefs: []
  type: TYPE_NORMAL
- en: register level peripheral programming, [349](c16.xhtml#Page_349)
  prefs: []
  type: TYPE_NORMAL
- en: repeated start conditions, [19](c02.xhtml#Page_19)
  prefs: []
  type: TYPE_NORMAL
- en: reset and set peripheral programmable address, [22](c02.xhtml#Page_22)
  prefs: []
  type: TYPE_NORMAL
- en: reset pin (MCP230*xx*), [264](c13.xhtml#Page_264)
  prefs: []
  type: TYPE_NORMAL
- en: reset pins on peripherals, [26](c02.xhtml#Page_26)
  prefs: []
  type: TYPE_NORMAL
- en: resetting the I²C bus, [26](c02.xhtml#Page_26)
  prefs: []
  type: TYPE_NORMAL
- en: resistive temperature detectors (RTDs), [304](c14.xhtml#Page_304)
  prefs: []
  type: TYPE_NORMAL
- en: resistor sizes (pullups on I²C bus), [8](c01.xhtml#Page_8)
  prefs: []
  type: TYPE_NORMAL
- en: ringing, [274](c13.xhtml#Page_274)
  prefs: []
  type: TYPE_NORMAL
- en: ROCKPro 64, [172](c09.xhtml#Page_172)
  prefs: []
  type: TYPE_NORMAL
- en: rotary (shaft) encoders, [286](c13.xhtml#Page_286)
  prefs: []
  type: TYPE_NORMAL
- en: round-robin scheduling policy (RTOS), [178](c10.xhtml#Page_178)
  prefs: []
  type: TYPE_NORMAL
- en: RTDs (resistive temperature detectors), [304](c14.xhtml#Page_304)
  prefs: []
  type: TYPE_NORMAL
- en: RTOS (ready to run queue), [177](c10.xhtml#Page_177)
  prefs: []
  type: TYPE_NORMAL
- en: '**S**'
  prefs: []
  type: TYPE_NORMAL
- en: safety critical systems, [179](c10.xhtml#Page_179)
  prefs: []
  type: TYPE_NORMAL
- en: Saleae logic analyzers, [75](c04.xhtml#Page_75)
  prefs: []
  type: TYPE_NORMAL
- en: sample frequency, [300](c14.xhtml#Page_300), [304](c14.xhtml#Page_304)
  prefs: []
  type: TYPE_NORMAL
- en: scanning the I²C bus, [26](c02.xhtml#Page_26)
  prefs: []
  type: TYPE_NORMAL
- en: Seeed Studio, [105](c06.xhtml#Page_105)
  prefs: []
  type: TYPE_NORMAL
- en: Seeed Studio Grove bus, [125](c07.xhtml#Page_125)
  prefs: []
  type: TYPE_NORMAL
- en: semaphores, [179](c10.xhtml#Page_179)
  prefs: []
  type: TYPE_NORMAL
- en: SEQOP bit (MCP230*xx*), [267](c13.xhtml#Page_267)
  prefs: []
  type: TYPE_NORMAL
- en: sequential register operations (MCP230*xx*), [271](c13.xhtml#Page_271)
  prefs: []
  type: TYPE_NORMAL
- en: set peripheral programmable address, [22](c02.xhtml#Page_22)
  prefs: []
  type: TYPE_NORMAL
- en: setup time for the stop condition, [18](c02.xhtml#Page_18)
  prefs: []
  type: TYPE_NORMAL
- en: shields, [95](c06.xhtml#Page_95), [116](c07.xhtml#Page_116)
  prefs: []
  type: TYPE_NORMAL
- en: signal conditioning, [306](c14.xhtml#Page_306)
  prefs: []
  type: TYPE_NORMAL
- en: single-ended inputs, [300](c14.xhtml#Page_300)
  prefs: []
  type: TYPE_NORMAL
- en: ADCs, [303](c14.xhtml#Page_303)
  prefs: []
  type: TYPE_NORMAL
- en: slave devices, [4](c01.xhtml#Page_4)
  prefs: []
  type: TYPE_NORMAL
- en: slew rate control (MCP230*xx*), [273](c13.xhtml#Page_273)
  prefs: []
  type: TYPE_NORMAL
- en: slew rate limiting, [234](c11.xhtml#Page_234)
  prefs: []
  type: TYPE_NORMAL
- en: SMBAlert, [83](c05.xhtml#Page_83)
  prefs: []
  type: TYPE_NORMAL
- en: SMBSuspend, [83](c05.xhtml#Page_83)
  prefs: []
  type: TYPE_NORMAL
- en: SMBus, [82](c05.xhtml#Page_82), [112](c06.xhtml#Page_112), [158](c09.xhtml#Page_158),
    [162](c09.xhtml#Page_162)
  prefs: []
  type: TYPE_NORMAL
- en: SMBus host, [82](c05.xhtml#Page_82)
  prefs: []
  type: TYPE_NORMAL
- en: SMBus peripherals using R/W as a data value, [27](c02.xhtml#Page_27)
  prefs: []
  type: TYPE_NORMAL
- en: SMD, [316](c14.xhtml#Page_316)
  prefs: []
  type: TYPE_NORMAL
- en: SPAN adjustment (gain), [306](c14.xhtml#Page_306)
  prefs: []
  type: TYPE_NORMAL
- en: SparkFun Atto84, [349](c16.xhtml#Page_349)
  prefs: []
  type: TYPE_NORMAL
- en: SparkFun I²C Mux, [259](c12.xhtml#Page_259)
  prefs: []
  type: TYPE_NORMAL
- en: SparkFun Qwiic Bus, [122](c07.xhtml#Page_122)
  prefs: []
  type: TYPE_NORMAL
- en: SparkFun SBCs, [103](c06.xhtml#Page_103)
  prefs: []
  type: TYPE_NORMAL
- en: special I²C addresses, [21](c02.xhtml#Page_21)
  prefs: []
  type: TYPE_NORMAL
- en: spin loop, [175](c10.xhtml#Page_175)
  prefs: []
  type: TYPE_NORMAL
- en: standard mode, [9](c01.xhtml#Page_9), [14](c01.xhtml#Page_14)
  prefs: []
  type: TYPE_NORMAL
- en: start byte, [23](c02.xhtml#Page_23)
  prefs: []
  type: TYPE_NORMAL
- en: start condition, [133](c08.xhtml#Page_133), [165](c09.xhtml#Page_165), [227](c11.xhtml#Page_227)
  prefs: []
  type: TYPE_NORMAL
- en: start sequence (I²C), [12](c01.xhtml#Page_12)
  prefs: []
  type: TYPE_NORMAL
- en: start signal, [16](c02.xhtml#Page_16)
  prefs: []
  type: TYPE_NORMAL
- en: startup hold times for SCL line, [17](c02.xhtml#Page_17)
  prefs: []
  type: TYPE_NORMAL
- en: starvation (multitasking), [178](c10.xhtml#Page_178)
  prefs: []
  type: TYPE_NORMAL
- en: Stemma QT, [115](c07.xhtml#Page_115)
  prefs: []
  type: TYPE_NORMAL
- en: STEMMA/QT bus, [123](c07.xhtml#Page_123)
  prefs: []
  type: TYPE_NORMAL
- en: STM32F746G-Disco SBC, [111](c06.xhtml#Page_111)
  prefs: []
  type: TYPE_NORMAL
- en: STM32F767/Nucleo-144, [111](c06.xhtml#Page_111)
  prefs: []
  type: TYPE_NORMAL
- en: STM32 SBCs, [110](c06.xhtml#Page_110)
  prefs: []
  type: TYPE_NORMAL
- en: STMicroelectronics, [110](c06.xhtml#Page_110)
  prefs: []
  type: TYPE_NORMAL
- en: stop condition, [133](c08.xhtml#Page_133), [135](c08.xhtml#Page_135), [136](c08.xhtml#Page_136),
    [165](c09.xhtml#Page_165), [232](c11.xhtml#Page_232)
  prefs: []
  type: TYPE_NORMAL
- en: stop signal, [16](c02.xhtml#Page_16)
  prefs: []
  type: TYPE_NORMAL
- en: stretching, [10](c01.xhtml#Page_10), [13](c01.xhtml#Page_13)
  prefs: []
  type: TYPE_NORMAL
- en: synchronization, [10](c01.xhtml#Page_10)
  prefs: []
  type: TYPE_NORMAL
- en: '**T**'
  prefs: []
  type: TYPE_NORMAL
- en: TCA9543A
  prefs: []
  type: TYPE_NORMAL
- en: addressing, [255](c12.xhtml#Page_255)
  prefs: []
  type: TYPE_NORMAL
- en: bus expander, [253](c12.xhtml#Page_253)–[254](c12.xhtml#Page_254)
  prefs: []
  type: TYPE_NORMAL
- en: capacitive loading on I²C bus, [256](c12.xhtml#Page_256)
  prefs: []
  type: TYPE_NORMAL
- en: selection register, [255](c12.xhtml#Page_255)
  prefs: []
  type: TYPE_NORMAL
- en: Teensy 2.0, [104](c06.xhtml#Page_104)
  prefs: []
  type: TYPE_NORMAL
- en: Teensy 3.*x*/4.*x* SBCs, [104](c06.xhtml#Page_104)
  prefs: []
  type: TYPE_NORMAL
- en: Teensy bare metal
  prefs: []
  type: TYPE_NORMAL
- en: '`begin`, [216](c11.xhtml#Page_216)'
  prefs: []
  type: TYPE_NORMAL
- en: '`beginTransmission`, [226](c11.xhtml#Page_226)'
  prefs: []
  type: TYPE_NORMAL
- en: '`read`, [230](c11.xhtml#Page_230)'
  prefs: []
  type: TYPE_NORMAL
- en: '`requestFrom`, [230](c11.xhtml#Page_230)'
  prefs: []
  type: TYPE_NORMAL
- en: '`write`, [230](c11.xhtml#Page_230)'
  prefs: []
  type: TYPE_NORMAL
- en: Teensyduino, [190](c10.xhtml#Page_190)
  prefs: []
  type: TYPE_NORMAL
- en: Teensy LC, [104](c06.xhtml#Page_104)
  prefs: []
  type: TYPE_NORMAL
- en: Teensy Threads, [175](c10.xhtml#Page_175), [194](c10.xhtml#Page_194)
  prefs: []
  type: TYPE_NORMAL
- en: testing interrupts (MCP230*xx*), [285](c13.xhtml#Page_285)
  prefs: []
  type: TYPE_NORMAL
- en: thermocouples, [304](c14.xhtml#Page_304)
  prefs: []
  type: TYPE_NORMAL
- en: Thing Plus, [118](c07.xhtml#Page_118)
  prefs: []
  type: TYPE_NORMAL
- en: Thing Plus SBCs (SparkFun), [103](c06.xhtml#Page_103)
  prefs: []
  type: TYPE_NORMAL
- en: threads, [177](c10.xhtml#Page_177)
  prefs: []
  type: TYPE_NORMAL
- en: threshold registers (ADS1*x*15), [315](c14.xhtml#Page_315)
  prefs: []
  type: TYPE_NORMAL
- en: time
  prefs: []
  type: TYPE_NORMAL
- en: time slice/time quantum, [178](c10.xhtml#Page_178)
  prefs: []
  type: TYPE_NORMAL
- en: timing relationship between SCL and SDA, [16](c02.xhtml#Page_16)
  prefs: []
  type: TYPE_NORMAL
- en: transmission errors, [17](c02.xhtml#Page_17)
  prefs: []
  type: TYPE_NORMAL
- en: Trinket, [116](c07.xhtml#Page_116)
  prefs: []
  type: TYPE_NORMAL
- en: Trinket M0, [102](c06.xhtml#Page_102)
  prefs: []
  type: TYPE_NORMAL
- en: TWI (two-wire interface), [89](c05.xhtml#Page_89), [350](c16.xhtml#Page_350)
  prefs: []
  type: TYPE_NORMAL
- en: TWSI (two-wire serial interface), [89](c05.xhtml#Page_89)
  prefs: []
  type: TYPE_NORMAL
- en: TXB0104 Bi-Directional Level Shifter, [107](c06.xhtml#Page_107)
  prefs: []
  type: TYPE_NORMAL
- en: '**U**'
  prefs: []
  type: TYPE_NORMAL
- en: unipolar ADCs, [302](c14.xhtml#Page_302)
  prefs: []
  type: TYPE_NORMAL
- en: upstream I²C devices, [254](c12.xhtml#Page_254)
  prefs: []
  type: TYPE_NORMAL
- en: USI (Universal Serial Interface), [234](c11.xhtml#Page_234), [350](c16.xhtml#Page_350)
  prefs: []
  type: TYPE_NORMAL
- en: ATtiny84 clock source selection, [350](c16.xhtml#Page_350)
  prefs: []
  type: TYPE_NORMAL
- en: overflow interrupt service routine, [360](c16.xhtml#Page_360)
  prefs: []
  type: TYPE_NORMAL
- en: '**V**'
  prefs: []
  type: TYPE_NORMAL
- en: VESA DDC and E-DDC, [89](c05.xhtml#Page_89), [112](c06.xhtml#Page_112), [148](c09.xhtml#Page_148)
  prefs: []
  type: TYPE_NORMAL
- en: VGA, [89](c05.xhtml#Page_89)
  prefs: []
  type: TYPE_NORMAL
- en: voltage translation, [7](c01.xhtml#Page_7)
  prefs: []
  type: TYPE_NORMAL
- en: VRTX (RTOS), [203](c10.xhtml#Page_203)
  prefs: []
  type: TYPE_NORMAL
- en: '**W**'
  prefs: []
  type: TYPE_NORMAL
- en: wait states, [20](c02.xhtml#Page_20)
  prefs: []
  type: TYPE_NORMAL
- en: windowed averages, [331](c14.xhtml#Page_331)
  prefs: []
  type: TYPE_NORMAL
- en: '`Wire.available` (Arduino), [135](c08.xhtml#Page_135)'
  prefs: []
  type: TYPE_NORMAL
- en: '`Wire.begin` function (Arduino), [134](c08.xhtml#Page_134)'
  prefs: []
  type: TYPE_NORMAL
- en: '`Wire.beginTransmission` (Arduino), [136](c08.xhtml#Page_136)'
  prefs: []
  type: TYPE_NORMAL
- en: wired-AND operation, [11](c01.xhtml#Page_11)
  prefs: []
  type: TYPE_NORMAL
- en: '`Wire.endTransmission` (Arduino), [136](c08.xhtml#Page_136)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Wire.h* header file (Arduino), [134](c08.xhtml#Page_134)'
  prefs: []
  type: TYPE_NORMAL
- en: Wire library, [134](c08.xhtml#Page_134)
  prefs: []
  type: TYPE_NORMAL
- en: '`Wire.onReceive` (Arduino), [137](c08.xhtml#Page_137)'
  prefs: []
  type: TYPE_NORMAL
- en: '`Wire.onRequest` (Arduino), [137](c08.xhtml#Page_137)'
  prefs: []
  type: TYPE_NORMAL
- en: '`Wire.read` function (Arduino), [135](c08.xhtml#Page_135)'
  prefs: []
  type: TYPE_NORMAL
- en: '`Wire.requestFrom` function (Arduino), [135](c08.xhtml#Page_135)'
  prefs: []
  type: TYPE_NORMAL
- en: '`Wire.SetClock` function (Arduino), [134](c08.xhtml#Page_134)'
  prefs: []
  type: TYPE_NORMAL
- en: '`Wire.write` (Arduino), [136](c08.xhtml#Page_136)'
  prefs: []
  type: TYPE_NORMAL
- en: writing data to the I²C bus, [19](c02.xhtml#Page_19)
  prefs: []
  type: TYPE_NORMAL
- en: writing GPIO pins (MCP230*xx*), [275](c13.xhtml#Page_275)
  prefs: []
  type: TYPE_NORMAL
- en: writing to MCP230*xx*, [266](c13.xhtml#Page_266)
  prefs: []
  type: TYPE_NORMAL
- en: writing to the IOCON register (MCP230*xx*), [268](c13.xhtml#Page_268)
  prefs: []
  type: TYPE_NORMAL
- en: '**Z**'
  prefs: []
  type: TYPE_NORMAL
- en: ZERO adjustment (offset), [306](c14.xhtml#Page_306)
  prefs: []
  type: TYPE_NORMAL
