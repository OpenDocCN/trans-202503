- en: '![image](../images/common01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '8'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: BUILDING A MUSICAL INSTRUMENT
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will show you how to create sound with electronic components! Unlike
    other projects you’ve built so far, this chapter’s projects use an *integrated
    circuit (IC)*, which is a whole circuit that’s been shrunk down and packaged inside
    a tiny box. All sorts of circuits can be built as ICs, and most household devices
    are full of them. Peek inside a computer or an electronic toy, and you’re sure
    to find a few.
  prefs: []
  type: TYPE_NORMAL
- en: To start, I’ll explain what an IC is in more detail and describe how to figure
    out what a particular IC does. Then, you’ll get some practice with ICs by building
    a simple circuit that makes some strange noises. At the end of the chapter, I’ll
    show you how to build your very own electronic instrument that you can use to
    play music!
  prefs: []
  type: TYPE_NORMAL
- en: MEET THE INTEGRATED CIRCUIT
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ICs are really small circuits that are conveniently packaged into little plastic
    boxes, which are often colored black. Any given IC has metal *pins* sticking out
    of it so you can connect other components to the circuit inside.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0162-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On the inside, an IC might contain a music player circuit, a radio circuit,
    a remote control circuit, or something else entirely. Because one little IC can
    contain a very complicated circuit, you can use ICs to make circuits with many
    different functions without building everything from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: ICS AND DATASHEETS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some ICs have only 8 pins, but other ICs have more than 100! To figure out
    what each pin on a specific IC does, you need to check that IC’s datasheet, just
    as you did with the relay in “[Project #11: Blink a Light!](ch05.xhtml#ch05lev1sec05)”
    on [page 101](ch05.xhtml#page_101). The datasheet tells you the function of each
    pin, and datasheets often show examples of how to use ICs in a circuit, too. To
    find a component’s datasheet, try searching for the component name plus the term
    “datasheet” online, or check the website where you bought the component.'
  prefs: []
  type: TYPE_NORMAL
- en: Datasheets often have tables with lots of numbers and technical terms, so the
    first time you see a datasheet for an IC, it might look very complex. But you
    usually don’t need to read the whole datasheet. Instead, you can just look up
    the information you need and then go back to building your circuit.
  prefs: []
  type: TYPE_NORMAL
- en: HOW TO MAKE SOUND WITH ELECTRICITY
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Sound* is what you hear when air moves back and forth, or *vibrates*, really
    fast. Many devices that make noises, like the sound system in a car, do so with
    a *loudspeaker*, a component that vibrates air fast enough to make sound.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0163-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A loudspeaker has an electromagnet inside that moves a *diaphragm*, which is
    a surface that pushes the air in front of it. If a circuit turns the power to
    the loudspeaker’s electromagnet on and off at, say, 1,000 times per second, then
    the diaphragm pushes the air back and forth 1,000 times per second. This is called
    the *frequency* of the sound, and frequency is measured in hertz (Hz). A frequency
    of 1,000 times per second, or 1,000 Hz, creates a steady beep.
  prefs: []
  type: TYPE_NORMAL
- en: SOUNDS THAT HUMANS CAN HEAR
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Humans can hear sound only from around 20 Hz up to around 20,000 Hz. In “[Project
    #11: Blink a Light!](ch05.xhtml#ch05lev1sec05)” on [page 101](ch05.xhtml#page_101),
    you built a circuit that blinked a light about once per second. If you had connected
    the output of the circuit to a speaker instead, the sound from the speaker would
    have a frequency of 1 Hz, which would be too low to hear. Instead, you would hear
    clicks from the speaker as it was switched on and off.'
  prefs: []
  type: TYPE_NORMAL
- en: This means that to create sound you can hear, you need to create a circuit that
    can turn the voltage to a speaker on and off hundreds or thousands of times per
    second! Fortunately, there’s an IC that can help you do just that.
  prefs: []
  type: TYPE_NORMAL
- en: MEET THE 555 TIMER
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One classic IC is the *555 timer*, which you can use to switch things rapidly
    on and off. For example, you could use a 555 timer to blink a light every second,
    or you could connect it to a loudspeaker to make sound. Along with the 555 timer,
    you’d need to add a few extra resistors and capacitors, and by carefully selecting
    the values of those components, you could control how fast the light blinks or
    the sound’s frequency. The 555 timer is very popular with hobbyists because it’s
    cheap and pretty easy to use once you learn the basics. You’ll use a 555 timer
    IC like the one shown here for the projects in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0164-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Powering an IC
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The datasheet for the 555 timer should tell you what each pin does. Try searching
    online for “555 timer datasheet” now. When you find the datasheet and open it,
    you should see a *pinout* like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0165-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The 555 timer has eight pins. The pins of an IC are numbered counterclockwise,
    starting from the top left. (The top is indicated by a little notch or circle;
    some ICs have both.) The datasheet tells you the functions of each of the eight
    pins, but the following two pins are the most important to notice right now:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pin 1, ground**   This pin must be connected to the negative terminal of
    your battery. Circuit diagrams that use ICs often label the negative battery terminal
    in a circuit schematic “ground,” or GND for short.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pin 8, V**[CC]   This pin must be connected to the positive side of your
    battery, which must be at a voltage between 4.5 and 15 V. This means that a 9
    V battery will work fine. On some ICs, this pin is called V[DD] instead.'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll find V[CC] and ground pins on all ICs. They’re the first pins to learn
    from any datasheet because you’ll use them to power the circuit inside the IC.
  prefs: []
  type: TYPE_NORMAL
- en: 'The datasheet also shows how to connect the 555 timer in a circuit, and the
    circuit I find the most interesting connects the 555 timer in *astable mode*.
    *Astable* means that something is continually changing (not stable), and in astable
    mode, a 555 timer switches its output on and off constantly. That’s perfect to
    blink a light or to create sound! Here’s the circuit that tells the 555 timer
    to turn its output on and off:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0166-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The positions of the 555 pins have been arranged to suit the diagram; they’re
    not in the same order as on the IC.*'
  prefs: []
  type: TYPE_NORMAL
- en: How to Set the Output Speed of the 555 Timer
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The values of R1, R2, and C1 in the circuit diagram determine how long the
    output pin stays *high*—meaning it outputs a voltage close to the battery voltage—and
    how long it stays *low*—meaning it outputs a voltage close to 0 V. The speed of
    the change in output, or the frequency, is the number of times the output goes
    from high to low in one second. When the 555 timer is connected in astable mode,
    as it is in the circuit diagram, the frequency of the output is controlled by
    resistors R1 and R2 and capacitor C1 according to the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0166-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, the resistor values are in ohms, and the capacitance is in farads. To
    find the frequency, first replace R1, R2, and C1 in the formula with the values
    of these parts and then punch the stuff on the right side of the equal sign into
    a calculator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try an example. Imagine a circuit with the following component values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) R1 = 100 kΩ'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) R2 = 10 kΩ'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) C1 = 10 nF'
  prefs: []
  type: TYPE_NORMAL
- en: 'What is the frequency of the output? Enter these values into the formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0167-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now convert the units so the values are easier to multiply (120 kΩ = 120,000
    Ω and 10 nF = 0.00000001 F):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0167-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: According to this calculation, the output should turn on and off 1,200 times
    per second with those values.
  prefs: []
  type: TYPE_NORMAL
- en: 'PROJECT #16: MAKE YOUR OWN SOUND WITH THE 555 TIMER'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This project will show you how to play a sound with a frequency of about 1,200
    Hz through a speaker. That’s pretty cool! But a 1,200 Hz sound isn’t very pleasant
    to listen to, and if you have any pets, they might appreciate the sound even less
    than you. In fact, when I turned on this circuit at my parents’ home, their dog
    came running to me looking very confused and a bit scared. I turned it off quickly
    and moved my experiments to a place with no pets around, and I suggest not building
    this project around your pets, either.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0168-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Shopping List
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '![image](../images/f0169-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![image](../images/common-01.jpg) **A standard 9 V battery** to power the circuit.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **A 9 V battery clip** (Jameco #11280, Bitsbox
    #BAT033) to connect the battery to the circuit.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **A breadboard** (Jameco #20601, Bitsbox
    #CN329) with at least 30 rows.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **Breadboard jumper wires** (Jameco #2237044,
    Bitsbox #CN236) for making easy connections. (Standard hookup wire works, too.)'
  prefs: []
  type: TYPE_IMG
- en: '![image](../images/common-01.jpg) **A 555 timer IC** (Jameco #904085, Bitsbox
    #QU001) to create the timing.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **A 8 Ω speaker** (Jameco #1954818, Bitsbox
    #ST063) to play the sound.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **A 10 µF capacitor** (Jameco #29891, Bitsbox
    #EC10U25) to connect to the speaker.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **A 10 nF capacitor** (Jameco #15229, Bitsbox
    #CC10N) to help set the frequency of the sound.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **A 100 kΩ resistor** (Jameco #691340, Bitsbox
    #CR25100K) to help set the frequency of the sound.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **A 10 kΩ resistor** (Jameco #691104, Bitsbox
    #CR2510K) to help set the frequency of the sound.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Place the 555 Timer on the Breadboard'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This circuit is built around the 555 timer IC, so first, place that IC in the
    middle of the breadboard, making it easy to connect all the components around
    it.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*When connecting an IC to a breadboard, always place it over the middle notch,
    with one set of pins on the left side and the other on the right side. Otherwise,
    any pins that share a row on the breadboard will be connected to each other.*'
  prefs: []
  type: TYPE_NORMAL
- en: Place the IC’s notch marker toward the top of the board so that pin 1 is at
    the upper-left corner and pin 8 is at the upper-right corner, as shown. Triple-check
    that you’ve oriented the chip as I describe; otherwise, the rest of the instructions
    in this project won’t work.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0170-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 2: Set the Frequency'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Next, connect the resistors and capacitor that set the frequency: R1, R2, and
    C1\. The C1 capacitor isn’t polarized, so it doesn’t matter which way you connect
    it. Use the two vertical columns on the right for positive and negative: the red
    column for positive and the other for negative.'
  prefs: []
  type: TYPE_NORMAL
- en: Connect R1, the 100 kΩ resistor, from pin 7 of the 555 timer to the positive
    column. Connect R2, the 10 kΩ resistor, from pin 6 to pin 7\. And connect C1,
    the 10 nF capacitor, from pin 6 to the negative column. Then, connect a jumper
    wire from pin 2 to pin 6 to complete the rest of the connections that are needed
    to set the frequency.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0171-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 3: Connect the Speaker and Coupling Capacitor'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: All the components to make the 555 timer output pin 3 turn on and off around
    1,000 times per second should be in place on your breadboard now. If you were
    to connect the speaker directly to the output, a large current would flow through
    the speaker, possibly damaging both the speaker and the 555 IC. You could connect
    the speaker through a resistor to reduce the current, but using a capacitor is
    even better. When a capacitor is connected to an AC voltage, the capacitor acts
    a bit like a resistor, but if you connect it to a constant DC voltage, the current
    will be blocked. This means that there won’t be any current running through the
    speaker unless there’s actually a frequency to be played. When a capacitor is
    used like this, it’s called a *coupling capacitor*.
  prefs: []
  type: TYPE_NORMAL
- en: The coupling capacitor for this project is a 10 μF polarized capacitor, so first
    identify which leg is negative. Connect the positive capacitor leg to the 555
    timer’s output pin 3\. Then connect the capacitor’s negative leg to an empty row
    on your breadboard.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0172-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, if your speaker comes without wires, solder a wire about 6 inches long
    to each of the two contacts on the back of the speaker (ignore any + or – labels
    by the speaker contacts). Then, connect one of the speaker wires to the same row
    as the negative capacitor leg and the other wire to the negative supply column.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0172-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 4: Connect the Power and Reset Pins'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Compare your breadboard to the circuit diagram at the beginning of the project,
    and you’ll see that there are a few connections missing. Once you have all of
    your components in place on the breadboard, you can make those final connections
    with jumper wires. Add a jumper wire for each of the following connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) From pin 1 on the 555 timer to the negative
    supply column'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) From pin 8 on the 555 timer to the positive
    supply column'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) From pin 4 on the 555 timer to the positive
    supply column'
  prefs: []
  type: TYPE_NORMAL
- en: Note that there’s no connection to pin 5 of the 555 timer in this circuit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 5: Make Some Sound!'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Connect the battery clip to your supply columns on the right side of the breadboard.
    The red wire goes to the positive supply column, and the black wire goes to the
    negative supply column.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0173-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you’re ready, connect the battery, and you should hear a loud beep. Congratulations:
    You just made your first electronic sound!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 6: What If There’s No Sound?'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are a lot of connections in this circuit, so if your circuit doesn’t
    work on your first attempt, don’t worry: that happens to everyone who plays with
    electronics at some point. First, disconnect the battery, and then check the resistor
    and capacitor legs. These legs are long, and they can easily end up in contact
    with each other by accident, creating a short circuit. (For example, if you accidentally
    connect the positive terminal of the battery directly to the negative terminal,
    that short-circuits the battery.)'
  prefs: []
  type: TYPE_NORMAL
- en: Next, check the component connections to the 555 timer. The 555 timer’s pins
    must connect to the rest of the circuit according to the circuit diagram, or the
    IC won’t work. When there are a lot of connections, it’s easy to plug a wire into
    the wrong row of the breadboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CHECKING CONNECTIONS AS A TEAM**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finding circuit problems is called *debugging*, and it’s easier to do with
    some help. When you get stuck, ask someone else to look at the circuit diagram
    and say the connections out loud one by one while you check the real connections.
    For example, if your friend is reading the schematic and you’re looking at the
    breadboard, you might have a conversation like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Friend: “The positive side of the battery is connected to one side of R1.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'You: “Got it!”'
  prefs: []
  type: TYPE_NORMAL
- en: 'Friend: “The positive side of the battery is also connected to pins 4 and 8
    of the IC.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'You: “Got it!”'
  prefs: []
  type: TYPE_NORMAL
- en: 'Friend: “The other side of R1 is connected to pin 7 of the chip and to one
    side of the resistor R2.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'You: “Oh, wait! I don’t have the connection to pin 7!”'
  prefs: []
  type: TYPE_NORMAL
- en: And just like that, you’ll discover the problem.
  prefs: []
  type: TYPE_NORMAL
- en: If all your components appear to be oriented correctly and you see no short
    circuits, then check all your breadboard connections to make sure components that
    should be connected share a row. Start with the connection from the positive terminal
    of the battery on your circuit diagram. Is it connected on the board just as the
    circuit diagram shows? If yes, then move on to the next connection; keep going
    like this until you’ve checked all the connections.
  prefs: []
  type: TYPE_NORMAL
- en: TURNING AN ANNOYING BEEP INTO MUSIC
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sound you created in the previous project isn’t very pleasant. So how can
    you turn it into music? Musical notes are just sound waves that vibrate at specific
    frequencies, and that means it’s possible to make an electronic instrument with
    the 555 timer. If you change the frequency of the signal that goes into the speaker,
    then the tone of the sound will change. You just have to find a way to change
    the 555 timer’s output frequency at will, without rebuilding the circuit every
    time.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.xhtml#ch07) introduced two components that can change their
    resistance value: the potentiometer and the photoresistor. If you use one of those
    components to control the frequency of the 555 timer’s output signal, then when
    that component’s resistance changes, the sound will change, too. That’s how you’ll
    make the instrument in the next project.'
  prefs: []
  type: TYPE_NORMAL
- en: 'PROJECT #17: AN INSTRUMENT THAT BEEPS AND BOOPS'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This project shows you how to combine what you’ve learned so far to build your
    very own electronic instrument. Specifically, you’re going to build an instrument
    with a button to play sound and a potentiometer shaft to change the tone.
  prefs: []
  type: TYPE_NORMAL
- en: 'This instrument is like a very simple *synthesizer* that uses electricity to
    make sounds. Synthesizers have been used to add all kinds of bleeps, bloops, and
    glitchy sounds to songs since the beginning of the electronic music genre. This
    one is pretty basic, but it still makes plenty of fun noises. In fact, the circuit
    for this project looks very similar to the circuit from “[Project #16: Make Your
    Own Sound with the 555 Timer](ch08.xhtml#ch08lev1sec06)” on [page 167](ch08.xhtml#page_167),
    but it has a few twists.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This circuit replaces the separate R1 and R2, which the circuits in Project
    #16 used, with a potentiometer (and a protective 1 kΩ resistor). The potentiometer
    acts like two resistors, meaning that you can effectively change the values of
    R1 and R2 whenever you want to change the tone you hear.'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that this circuit also has a switch connected to the positive battery
    terminal. This switch is a push button, and with a switch between power and your
    circuit, the instrument should make a sound only when you push the button.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0176-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Shopping List
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '![image](../images/f0177-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![image](../images/common-01.jpg) **A standard 9 V battery** to power the circuit.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **A 9 V battery clip** (Jameco #11280, Bitsbox
    #BAT033) to connect the battery to the circuit.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **A breadboard** (Jameco #20601, Bitsbox
    #CN329) with at least 30 rows.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **Breadboard jumper wires** (Jameco #2237044,
    Bitsbox #CN236) for making easy connections. (Standard hookup wire works, too.)'
  prefs: []
  type: TYPE_IMG
- en: '![image](../images/common-01.jpg) **A 555 timer IC** (Jameco #904085, Bitsbox
    #QU001) to create the timing.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **A 8 Ω speaker** (Jameco #1954818, Bitsbox
    #ST063) to play the sound.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **A 10 µF capacitor** (Jameco #29891, Bitsbox
    #EC10U25) to connect to the speaker.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **A 10 nF capacitor** (Jameco #15229, Bitsbox
    #CC10N) to help set the frequency of the sound.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **A 100 kΩ potentiometer** (Jameco #2161406,
    Bitsbox #VR006) to control the tone.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **A 1 kΩ resistor** (Jameco #690865, Bitsbox
    #CR251K) to protect pin 7 from being connected directly to V[CC].'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) **A push button** (Jameco #119011, Bitsbox
    #SW087) to play tones with.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Connect the 555 Timer and the Capacitors'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Start by connecting the 555 timer in the middle of the board. Then, connect
    both capacitors. Connect C1, the 10 nF capacitor, from pin 6 to the negative power
    column. And connect C2, the 10µF capacitor, with its positive leg at pin 3 of
    the chip and the negative leg on an empty row farther down. When you’re done,
    your board should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0178-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 2: Connect Jumper Wires'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Use jumper wires to create the following connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) Pin 8 to the breadboard’s positive supply
    column'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) Pin 4 to the breadboard’s positive supply
    column'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) Pin 1 to the breadboard’s negative supply
    column'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg) Pin 2 to pin 6'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0179-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 3: Connect the Note Controller and Resistor'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Next up is the potentiometer, which controls the note that plays. Because it
    takes up more space, plug this in at the bottom of the breadboard, as shown, and
    be sure each leg is in its own row.
  prefs: []
  type: TYPE_NORMAL
- en: Connect the 1 kΩ resistor from the uppermost leg of the potentiometer to an
    unused row away from the 555 IC and connect a jumper wire from this row to the
    positive supply. Then, connect one jumper wire to each of the two remaining potentiometer
    legs. Connect the wire on the middle potentiometer leg to pin 7 on the 555 timer,
    and connect the wire on the lower leg to pin 6 on the 555 timer.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0180-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 4: Add the “On” Button'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’re almost done! Instead of wiring the battery clip directly to the positive
    supply column on the breadboard, you’re going to connect it through a push button,
    which will act as an “on” button for your instrument. This way, the circuit will
    get power from the battery only when the button is pushed and, therefore, make
    sound only when you push the button.
  prefs: []
  type: TYPE_NORMAL
- en: The push button in the Shopping List ([page 177](ch08.xhtml#page_177)) has four
    pins, but the two legs in the front are connected and the two pins in the back
    are connected. That means this button works exactly like a two-pin switch. When
    you push the button, you connect the front pair of pins with the back pair. Your
    circuit will get power and you’ll hear the sound. When you release the button,
    the circuit loses power again and the sound will stop.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0180-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Plug the push button into your breadboard over the notch in the middle. Then,
    use a jumper wire to connect one side of the push button to the breadboard’s positive
    supply column. Next, connect the positive wire from your battery clip to the other
    side of the push button. Finally, connect the negative battery clip wire to the
    negative supply column.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0181-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 5: Add the Loudspeaker'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Connect one of the speaker wires to the same row as the negative capacitor leg
    and the other wire to the negative supply column.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0181-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 6: Play Some Music!'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Connect your battery to the battery clip and push the button. Did you hear a
    sound? Try turning the potentiometer spindle back and forth until you hear something.
  prefs: []
  type: TYPE_NORMAL
- en: You can make a beat by pushing the button in any rhythm you like, and you can
    control the tone by turning the shaft of the potentiometer in between. Beep, baap,
    booop!
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0182-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 7: What If the Instrument Doesn’t Work?'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Some potentiometers aren’t perfectly fitted for breadboards, so start by checking
    whether your potentiometer is properly connected to the breadboard. Next, check
    that the two capacitors and the push button are connected according to the circuit
    diagram at the beginning of the project.
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of wires on this board, so it’s easy to mix up connections.
    If you still aren’t able to hear any sound, then go through all the connections
    on your board and check that they’re correct. I suggest using the process I described
    in “[Checking Connections as a Team](ch08.xhtml#ch08sb01)” on [page 174](ch08.xhtml#page_174).
  prefs: []
  type: TYPE_NORMAL
- en: '**TRY IT OUT: MAKE A MOTION-CONTROLLED INSTRUMENT**'
  prefs: []
  type: TYPE_NORMAL
- en: Instead of replacing both R1 and R2 with a potentiometer, try using a 1 kΩ resistor
    for R1 and a photoresistor for R2, as shown in this circuit diagram. As you move
    your hand over the photoresistor, the amount of light hitting it should change,
    and the instrument should play different notes!
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0183-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**WHAT’S NEXT?**'
  prefs: []
  type: TYPE_NORMAL
- en: There are millions of integrated circuits in the world, and they do all kinds
    of awesome things. Remember, whenever you want to use an IC in your projects,
    you can use its datasheet to find out both what the IC does and what kind of circuit
    you need to make it work.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you learned how to use a 555 timer IC to make music. These
    circuits had lots of connections, so if you didn’t get them right the first time,
    then you’re in good company. Most people mix up wires the first time they connect
    a circuit, and fixing the connections is great practice! And speaking of practice,
    now would be a good time to do some more soldering. Why not solder your instrument
    on to a prototyping board—and maybe even put it in a box?
  prefs: []
  type: TYPE_NORMAL
- en: Integrated circuits are very commonly used in *digital circuits*. Digital circuits
    can do many things simply by switching the right parts on and off, often very
    rapidly, just as in the musical instrument you made in this chapter. Modern gadgets
    like your computer use digital circuits, and you’ll learn more about digital electronics
    in the last few chapters of this book.
  prefs: []
  type: TYPE_NORMAL
