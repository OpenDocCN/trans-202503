- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 15 INTERACTIVE BATCH
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15 互动批处理
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: Let me be the one to break it to you if there was any doubt in your mind. Batch
    doesn’t have a graphical user interface (GUI), but it does have a functional user
    interface (UI). In this chapter, I’ll discuss different means of getting input
    from the user into a bat file as it executes, such as selecting one option from
    a list or typing in a response to a question. I’ll also describe how to alter
    the visual display or look and feel of the console including clearing the screen,
    changing colors, and updating the title. Finally, I’ll bring everything together
    to build a fully operational Batch UI (BUI) ready to execute.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你心中有任何疑虑，让我来告诉你，Batch 没有图形用户界面（GUI），但它有功能性的用户界面（UI）。在本章中，我将讨论如何在 bat 文件执行时获取用户输入的不同方式，比如从列表中选择一个选项或输入对某个问题的回答。我还会描述如何更改控制台的视觉显示或外观，包括清除屏幕、改变颜色以及更新标题。最后，我将把所有内容整合在一起，构建一个完全可操作的
    Batch UI（BUI）准备执行。
- en: UIs, GUIs, and BUIs
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户界面、图形用户界面和批处理用户界面
- en: 'A user interface at its core is a means for the user to communicate with a
    computer, passing information in and getting something back. Every time you make
    an online purchase, you’re using a graphical user interface, which is a more sophisticated
    user interface with graphics allowing user input from more than just a keyboard.
    A video game is a glorified UI, and every time you touch an icon on your smartphone
    to open an app, you’re using a user interface. Commander Data of *Star Trek: The
    Next Generation* was (or will be) an android, possessing an incredibly advanced
    UI able to interact with humans with use of all five senses.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面本质上是用户与计算机之间进行沟通的一种方式，用户输入信息并获取反馈。每次你进行在线购买时，你都在使用图形用户界面，它是一种更复杂的用户界面，允许通过不仅仅是键盘的图形化用户输入。视频游戏是一个被美化的用户界面，每次你在智能手机上点击一个图标来打开应用时，你都在使用一个用户界面。《星际迷航：下一代》中的指挥官数据是一个安卓人，拥有一个极其先进的用户界面，能够通过五种感官与人类互动。
- en: Sticking with the science-fiction theme, the Batch UI is more along the lines
    of the 1983 movie *War Games*. There are no panels, drop-downs, icons, menus,
    or radio buttons, and certainly no touchscreen or voice commands in the Batch
    UI, or BUI (pronounced boo-ē). Be warned, if you use this term with coders, you’ll
    likely receive some blank stares and raised eyebrows. I’ve tried but so far failed
    to add BUI to the coding lexicon, but I hold out hope that it’ll still catch on.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 继续沿用科幻主题，Batch UI 更像是 1983 年的电影*战争游戏*。在 Batch UI 或 BUI（发音为 boo-ē）中，没有面板、下拉菜单、图标、菜单或单选按钮，更没有触摸屏或语音命令。请注意，如果你跟程序员提到这个词，可能会看到他们一脸茫然或扬起眉毛。我曾尝试过，但到目前为止未能将
    BUI 纳入编程术语，但我仍然抱有希望，它会被接受并流行起来。
- en: The BUI isn’t sexy, but it can ask questions of the user, who can then respond
    by entering a string of text or selecting an option from a list by pressing a
    single key. A coder would be a sadist to use Batch to build a complex UI for a
    large number of users, not to mention soon-to-be unemployed. But there are many
    instances when a bat file needs a piece of data or two from the user, especially
    if the user is also the coder. I’ve coded a number of BUIs, but for each one I
    can count on one hand the number of people who’ve ever used it.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: BUI 可能并不性感，但它能够向用户提问，用户可以通过输入一串文本或按一个键从列表中选择一个选项来回应。若是程序员用 Batch 来为大量用户构建一个复杂的用户界面，那简直是个施虐狂，更别说这位程序员很快就会失业了。但在许多情况下，bat
    文件确实需要从用户那里获取一两个数据，尤其是当用户也是程序员时。我编写了很多 BUI，但每个 BUI 我都能数得出有多少人曾经使用过它。
- en: The possible needs for a BUI are plentiful. Your bat file might be copying files
    to or from a server, where you ask the user to specify the server. As another
    example, you might want to create a report but be able to generate it from test
    or production data depending on the user’s preference. Or you might ask the user
    to enter a date range of files to be backed up.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: BUI 可能有很多需求。你的 bat 文件可能需要将文件从或向服务器复制，并要求用户指定服务器。例如，你可能想创建一个报告，但能够根据用户的偏好从测试数据或生产数据中生成它。或者，你可能要求用户输入一个文件备份的日期范围。
- en: Choosing a Selection from a List
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从列表中选择一个选项
- en: Two commands allow the user to input data into a BUI. One asks for the user
    to choose one out of multiple possible selections, and the other asks for a typed
    freeform response. The first one is the choice command, and as the name suggests,
    it allows the user to make a *choice* from a list of two or more selections.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个命令允许用户输入数据到BUI中。一个要求用户从多个可能的选项中选择一个，另一个要求输入自由格式的响应。第一个是选择命令，顾名思义，它允许用户从两个或更多选项中做出*选择*。
- en: 'To get started, let’s ask the user a question—Do you want a Joke, Pun, or Riddle?—and
    allow them to enter J, P, or R for one of the three selections, respectively.
    The following choice command does just this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，让我们问用户一个问题——你想要笑话、双关语还是谜语？——并允许他们输入J、P或R，分别对应三种选择。以下选择命令正是这样做的：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The /C option lists the *choices*, /C:JPR, and the text encased in double quotes
    associated with the /M option is the *message* presented to the user. Both of
    these options also work without the colon delimiter. That is, /C JPR is functionally
    equivalent to /C:JPR, but I much prefer the colon because it nicely ties the option
    to its values or its message, much like a valued rug ties a room together. Also,
    notice the lack of the question mark at the end of the question. The interpreter
    adds the punctuation after giving the user the list of possible selections.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: /C选项列出*选择*，/C:JPR，双引号括起来的文本与/M选项相关联，是展示给用户的*消息*。这两个选项在没有冒号分隔符的情况下也能工作。也就是说，/C
    JPR在功能上等同于/C:JPR，但我更喜欢使用冒号，因为它巧妙地将选项与其值或消息联系在一起，就像一块有价值的地毯能把房间融为一体。另外，注意问题末尾没有问号。解释器在向用户展示可选择项列表后会自动添加标点符号。
- en: 'The previous command displays the following to the user on the console:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令在控制台上向用户显示以下内容：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The execution of the bat file suspends at the choice command until the user
    presses one of the three keys (or exits the command window). If the user presses
    a key not on the list, the computer beeps and continues to wait, but what happens
    when the user selects one of the choices?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 执行批处理文件时，命令会在选择命令处暂停，直到用户按下三个键中的一个（或退出命令窗口）。如果用户按下列表中没有的键，计算机会发出哔声并继续等待，但当用户选择其中一个选项时会发生什么呢？
- en: Up until this point errorlevel has merely been a return code, usually 0 for
    the successful execution of a command and something greater than 0 for a failure.
    But after a choice command executes, it sets errorlevel to the user’s selection;
    more specifically, it’s set to the integer value corresponding to the position
    of the user’s selection in the list. More simply, if the choices are defined by
    /C:JPR, selecting J returns 1, P returns 2, and R returns 3.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，errorlevel 仅仅是一个返回代码，通常为0表示命令成功执行，0以外的数字表示执行失败。但在执行选择命令后，errorlevel 会被设置为用户的选择；更具体地说，它会被设置为与用户选择在列表中的位置相对应的整数值。更简单地说，如果选择是由/C:JPR定义的，选择J会返回1，P返回2，R返回3。
- en: I find it a bit misleading that the variable returning the valid selection contains
    the word *error* in its name, but after getting over the issue of semantics and
    the fact that this reserved word is doing double duty, it’s not difficult to interrogate
    the variable to determine the user’s selection and which logic to execute next.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得返回有效选择的变量名字中包含*error*一词有点误导，但在克服了语义问题以及这个保留字承担双重职责的事实后，检查变量以确定用户的选择并执行接下来的逻辑并不困难。
- en: 'Here’s another example of a choice command that also appears to be missing
    something (other than a question mark):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个选择命令的示例，似乎也缺少了一些内容（除了问号之外）：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The /C option is missing, but this is a yes or no question, and when that option
    is omitted, the implied default is /C:YN, returning 1 for Y and 2 for N.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 缺少了/C选项，但这是一个是或否的问题，当省略此选项时，隐含的默认值是/C:YN，Y返回1，N返回2。
- en: 'Two additional options always go hand in hand with each other. The /T option
    sets the *timeout*, or the number of seconds given before the command times out
    and the interpreter chooses the *default* selection defined by the /D option.
    The following command gives the user 20 seconds, /T:20, to make a selection before
    a pun, /D:P, is inflicted upon them:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 另外两个选项总是配合使用。/T选项设置*超时*，即给定的秒数，在超时之前，命令会等待，解释器会选择/D选项定义的*默认*选择。以下命令给用户20秒的时间，/T:20，在此之后会强制执行一个双关语，/D:P：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Sometimes it doesn’t make sense to list the selections. For instance, when
    asking the user to rate something on a scale from 1 to 5, it might instead be
    preferable to explain the rating system with some text. Assume that you want to
    pose the following to the user requesting a response:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有时列出选择项并不合适。例如，在询问用户给某项打分时，从 1 到 5 之间的评分，可能更倾向于通过文字来解释评分系统。假设你想向用户提出以下问题，要求其做出回应：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Together, the following echo command and choice command produce the desired
    text and wait for a response:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的 echo 命令和 choice 命令一起生成期望的文本，并等待响应：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You’ll need the /C:12345 option so that the interpreter has the list of possible
    selections, but you don’t want [1,2,3,4,5]? displayed because it’ll compete with
    the instructions on the prior line. The /N option (*no choice keys*) suppresses
    the display of choices, showing only the desired message to the user. The question
    mark is also suppressed with the /N option, but you can include it in the message
    string if the message is posed as a question.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要 /C:12345 选项，以便解释器能够知道所有可能的选择，但你不希望显示 [1,2,3,4,5]，因为它会与前一行的指示产生冲突。/N 选项（*无选择键*）会抑制选择的显示，只向用户显示期望的消息。问号也会随着
    /N 选项被抑制，但如果消息是以问题的形式提问，你可以将问号包含在消息字符串中。
- en: If a bat file is to perform a task on a selected server, a series of echo commands
    could list any number of servers along with their associated keyboard keys as
    a prelude to a choice command. That would work great for a predefined list of
    servers, but if the list is particularly long or unknown at coding time, you can
    instead ask the user to key in any server name with the next command.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个 bat 文件要在选定的服务器上执行任务，可以使用一系列的 echo 命令列出任意数量的服务器及其相关的键盘键，作为选择命令的前奏。对于预定义的服务器列表，这样做效果很好，但如果列表特别长或在编码时无法预知，可以改为要求用户输入服务器名称，作为下一个命令的输入。
- en: Freeform User Input
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自由格式的用户输入
- en: The other command allowing the user to input data is the set command (from [Chapter
    2](chapter2.xhtml)) when used with the /P or *prompt string* option. Much like
    its optionless counterpart, the set /P command assigns a value to a variable,
    where that value can be a string of any reasonable length or even null. The difference
    is that the text after the equal sign isn’t the value assigned; it’s the prompt
    string displayed to the user. Whatever the user enters is assigned to the variable
    once they press ENTER.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个允许用户输入数据的命令是 set 命令（见[第二章](chapter2.xhtml)），当它与 /P 或 *提示字符串* 选项一起使用时。与没有选项的
    set 命令类似，set /P 命令将一个值赋给变量，这个值可以是任何合理长度的字符串，甚至为空。不同之处在于等号后的文本不是赋给变量的值，而是显示给用户的提示字符串。用户输入的内容将在按下
    ENTER 键后赋值给变量。
- en: 'To demonstrate, the question after the equal sign is displayed to the console:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，等号后的问题将显示在控制台上：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The execution is put on hold until the user responds, at which point the interpreter
    assigns that response to the yourAns variable.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 执行会被暂停，直到用户响应，此时解释器会将该响应赋值给 yourAns 变量。
- en: Forget to use the /P option, and the variable is assigned to the text after
    the equal sign without prompting of the user. Notice three minor yet important
    details. First, this command doesn’t append the question mark to the message string,
    so I added it. Second, I added a couple of spaces after that question mark to
    move the start of the response away from the question. Finally, I terminated the
    line with an ampersand to make those spaces obvious at a glance. These subtle
    tweaks will be equally appreciated by your users and any readers of your code.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果忘记使用 /P 选项，变量将直接赋值为等号后面的文本，而不会提示用户。注意三个重要的细节。首先，这个命令没有在消息字符串后附加问号，所以我加上了。其次，我在问号后添加了一些空格，以便将响应的开始与问题分开。最后，我在行末加了一个
    & 符号，让这些空格一目了然。这些细微的调整会让你的用户和任何阅读你代码的人都感到满意。
- en: 'Every joke needs a punchline, and it’s displayed to the user on the second
    line of the following code after they have had a chance to ponder the question
    and enter a guess:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 每个笑话都需要一个结尾，而这个结尾会在用户有机会思考问题并输入猜测后，出现在以下代码的第二行：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The third and final line displays the user’s answer encased in double quotes.
    It’s a joke. I didn’t say it was a good joke.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 第三行和最后一行显示用户的答案，答案被双引号括起来。这是一个笑话。我并没有说这是一个好笑话。
- en: Altering the UI Look and Feel
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改界面外观和感觉
- en: 'Batch provides three more commands that alter the look and feel of the console,
    and a couple of them have additional applications:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Batch 提供了三个更多的命令来改变控制台的外观和感觉，其中有一些命令还有其他用途：
- en: '**Updating the Title**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**更新标题**'
- en: 'When a bat file executes, a command window opens, and the title in the white
    bar across its top is likely to be *C:\WINDOWS\system32\cmd.exe*, the program
    that runs a bat file. The title command resets that title to something a little
    more identifiable and far less generic. The following changes the title to the
    text that follows it:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个 bat 文件执行时，会打开一个命令窗口，其顶部的白色条上的标题很可能是 *C:\WINDOWS\system32\cmd.exe*，即执行 bat
    文件的程序。title 命令将这个标题重置为更具辨识度且不那么通用的标题。以下命令会将标题更改为紧随其后的文本：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The embedded spaces in the argument list aren’t an issue, and if you encase
    the text in double quotes, they’ll also be part of the title.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 参数列表中的嵌入空格不是问题，如果你将文本括在双引号中，它们也将成为标题的一部分。
- en: Use of this command isn’t limited to interactive bat files where its value is
    obvious. Any bat file that runs on a machine where other bat files might also
    be running can only be enhanced by a title. If one of those bat files is hung
    or otherwise trapped in an endless loop, which one should be killed? If none of
    them has a title, they may all look identical, leaving you no way of knowing.
    The title command solves this problem. In fact, I’ll use this command in [Chapter
    26](chapter26.xhtml), where I’ll title a process susceptible to hanging so that
    another bat file can find it and kill it, if it does indeed hang. You can even
    reset the title multiple times during a run, perhaps showing the status or the
    step being executed.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个命令不仅限于交互式 bat 文件，在其值显而易见的情况下也可以使用。任何在其他 bat 文件可能也在运行的机器上运行的 bat 文件，都可以通过标题得到增强。如果其中一个
    bat 文件挂起或陷入死循环，应该终止哪个呢？如果它们没有标题，它们可能看起来一模一样，导致你无法知道是哪一个。title 命令解决了这个问题。实际上，我将在[第26章](chapter26.xhtml)中使用这个命令，给一个可能会挂起的进程添加标题，以便另一个
    bat 文件能找到它并终止它，如果它确实挂起的话。你甚至可以在运行期间多次重置标题，可能显示当前状态或正在执行的步骤。
- en: '**Clearing the Screen**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**清除屏幕**'
- en: The cls command is a severe abbreviation of *clear screen*. When this optionless
    command executes, the screen or console is cleared, revealing a blank (and for
    now black) canvas. To cut through the noise, you can execute this command before
    posing a question to the user.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: cls 命令是 *clear screen* 的简写。当这个不带选项的命令执行时，屏幕或控制台会被清除，显示一个空白（目前是黑色）的画布。为了减少干扰，你可以在向用户提问之前执行这个命令。
- en: '**Changing Colors**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**更改颜色**'
- en: Opening or executing a bat file brings up a command window with white text on
    a black background, which is the exact opposite of how humans have been reading
    since the advent of papyrus and ink. Contemplate for a moment the text you’re
    currently reading as if it were white on jet-black paper. It seems anachronistic
    now, but it must have been avant-garde in the early days of Batch.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 打开或执行 bat 文件时，会弹出一个带有白色文本和黑色背景的命令窗口，这与人类自古埃及纸莎草和墨水出现以来的阅读方式完全相反。想象一下你现在正在阅读的文本，如果它是白色的，背景是漆黑的纸张。现在看起来似乎有些过时，但在
    Batch 早期，它一定是前卫的。
- en: The color command provides 16 different colors from which to choose for both
    the foreground text and background, for a total of 240 permutations, although
    certain combinations are virtually unreadable and even painful to the eye.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: color 命令提供了16种不同的颜色，供用户选择用于前景文本和背景，总共有240种组合，尽管某些组合几乎不可读，甚至会让眼睛感到不适。
- en: Go to the help menu, color /?, to get the full list of colors denoted by the
    hexadecimal digits 0 to F, but the set of popular colors includes black (0), blue
    (1), red (4), and white (7). The color command accepts a two-character color attribute
    as its argument, where the first character represents the background color and
    the second represents the foreground or text color. By the way, the interpreter
    is smart enough to reject a command that assigns the same color to both.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 进入帮助菜单，输入 color /? 来查看完整的颜色列表，颜色由十六进制数字 0 到 F 表示，但流行的颜色包括黑色（0）、蓝色（1）、红色（4）和白色（7）。color
    命令接受一个两字符的颜色属性作为参数，其中第一个字符表示背景色，第二个字符表示前景色或文本色。顺便提一下，解释器足够智能，能够拒绝将相同颜色同时赋给背景和前景的命令。
- en: 'A black background supporting white text is the default Batch color scheme,
    which you can call for explicitly with this command: color 07. Flipping the attribute
    around to 70 creates a white background supporting black text, but black text
    on a bright white (F) background is more appealing:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 黑色背景和白色文本是默认的 Batch 颜色方案，你可以通过以下命令显式调用它：color 07。将属性反转为 70 会创建一个白色背景和黑色文本的组合，但黑色文本配上明亮的白色（F）背景更加吸引人：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'My preference for readability is bright white on a blue background, color 1F,
    but aesthetics aside, the greatest use of this command is to flag problems. You
    may run certain bat files daily to perform mundane or repetitive tasks. You may
    run such a bat file upon logon each morning and then ignore it, but on the rare
    instance when a file can’t be copied or a process aborts, the color command offers
    a great means of throwing up a red flag (literally) to alert the user. If using
    the default color settings, after writing an error message to the console, this
    line immediately changes the screen from black to red (4), brightens the white
    text a tad (F), and holds the window open:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人偏好的是在蓝色背景上使用亮白色文字，颜色1F，但撇开美学不谈，这个命令最主要的用途是标记问题。你可能每天运行某些bat文件以执行一些日常或重复的任务。你可能每天早晨在登录时运行这样的bat文件，然后忽略它，但在文件无法复制或进程中止的罕见情况下，颜色命令提供了一种很好的方式，通过"红旗"（字面意义上）来警告用户。如果使用默认的颜色设置，写完错误信息后，这行命令会立即将屏幕从黑色（默认）变为红色（4），稍微加亮白色文字（F），并保持窗口打开：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: That should get the user’s attention even if they’ve moved on to other tasks
    and the command window is off to the side. If it doesn’t, you can also use the
    cls command to clear the screen before writing an error message. To heighten the
    contrast, you can make the background green with color 2F, when the process completes
    successfully.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 即使用户已经转向其他任务并且命令窗口被置于一旁，这应该能够吸引他们的注意。如果没有，你也可以使用cls命令在写出错误信息之前清除屏幕。为了增强对比度，当过程成功完成时，你可以将背景设置为绿色，使用颜色2F。
- en: The cls and color commands are nonfunctional if stdout has been redirected to
    either a trace file or the nul file. If you need to clear the screen only once,
    execute the cls command just before redirecting stdout to the trace; otherwise,
    echo off is the only realistic option for keeping stdout off the console. Likewise,
    you can execute the color command prior to or after the redirection. Do it early,
    and the color will be set for the duration of the redirection. You also can turn
    the screen red for an abort at the end of the execution after returning from the
    redirection. The title command is the favorite child of the bunch, as it works
    anywhere in a bat file, regardless of redirection.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果stdout已被重定向到追踪文件或nul文件，那么cls和color命令将不起作用。如果只需要清除屏幕一次，在重定向stdout到追踪文件之前执行cls命令；否则，echo
    off是唯一能够关闭控制台输出的现实选择。同样，你可以在重定向前或后执行color命令。提前执行，它将为整个重定向过程设置颜色。你也可以在执行结束后返回重定向时，将屏幕变为红色，以表示中止。title命令是其中最受欢迎的，因为它在bat文件中的任何位置都能正常工作，无论是否有重定向。
- en: Fully Functional Batch UI
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完全功能的批处理用户界面
- en: 'Let’s put all of this together into a fully functional bat file that can interactively
    share a joke, a pun, or a riddle, repeatedly. The next two code snippets contain
    the entire bat file. Here’s the first portion of *BatchImprov.bat*:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这一切组合成一个完全功能的bat文件，可以反复互动地分享笑话、双关语或谜语。接下来的两个代码片段包含了完整的bat文件。这是*BatchImprov.bat*的第一部分：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: After the setlocal command ❶ (my ubiquitous opening command), the echo off command
    suppresses stdout so that only my coder-generated output gets to the console.
    Notice that neither command is written to the console thanks to the leading at
    sign (@). The color command then sets the background to blue and the text to bright
    white, for no other reason than readability. Next, the title command defines the
    title of the command window. After the :Again label ❷, the cls command clears
    the screen to complete the setup.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在setlocal命令❶（我常用的开头命令）之后，echo off命令抑制stdout，使得只有我生成的输出能显示在控制台上。注意，由于前面的at符号（@），这两个命令都不会写入控制台。然后，color命令将背景设置为蓝色，文本设置为亮白色，目的是为了更好的可读性。接下来，title命令定义命令窗口的标题。在:Again标签❷之后，cls命令清除屏幕，完成设置。
- en: Three echo. commands are strategically placed in the code to display blank lines
    for readability. The same choice command ❸ from earlier asks the user for their
    jocular liking. Since there are three selections from which to choose, an if command
    with an else if construct interrogates errorlevel ❹. Depending on the user’s response,
    different call commands are invoked for a joke, pun, or riddle, based on the values
    of 1, 2, or 3, respectively.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 三个echo.命令被策略性地放置在代码中，用于显示空白行，提升可读性。与之前相同的choice命令❸询问用户他们喜欢哪种幽默类型。由于有三种选择，if命令配合else
    if结构根据errorlevel❹的值判断用户的选择。根据用户的回答，分别调用笑话、双关语或谜语的不同call命令，分别对应1、2或3的值。
- en: A second choice command ❺ then asks the user if they want more of this humor,
    using the implied default choices of Y and N. If the user selects Y, the interpreter
    returns 1 and we go back to the :Again label ❷, where we clear the screen and
    begin again. A selection of N indicates that the user has had enough, and we exit
    the bat file.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个选择命令❺询问用户是否希望继续欣赏这些幽默，默认选择为Y和N。如果用户选择Y，解释器返回1并且我们回到:Again标签❷，在这里清屏并重新开始。选择N表示用户已经看够了，我们退出bat文件。
- en: 'The three routines called in the previous listing are defined here in the final
    portion of *BatchImprov.bat*:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码列表中调用的三个例程在*BatchImprov.bat*的最后部分定义如下：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The :Joke and :Riddle routines are similarly structured. A set /P command asks
    for a response before revealing the punchline and the user’s answer. The :Pun
    routine simply writes out the witty pun with no input from the user.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: :Joke和:Riddle例程结构相似。set /P命令在揭示笑点和用户答案之前要求输入。:Pun例程则仅仅输出机智的双关语，不需要用户输入。
- en: This bat file doesn’t capture stdout and stderr, because doing so wouldn’t allow
    for the use of the cls command between each selection. If that were to cause a
    problem during development, you could temporarily comment out the echo off command,
    but be prepared for a messy console impeding your testing.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个bat文件并没有捕捉stdout和stderr，因为这么做会阻止在每次选择之间使用cls命令。如果在开发过程中这成为问题，你可以暂时注释掉echo
    off命令，但要准备好面对一个凌乱的控制台，影响你的测试。
- en: Each choice and set /P command in *BatchImprov.bat* is a little different from
    the ones shown earlier in this chapter. Along with the echo commands, each one
    is using redirection to explicitly write its prompt or message to the console
    via the > con syntax. This addition would have been required if stdout had been
    redirected to a trace file; otherwise, it would have written unanswerable prompt
    strings to the trace. But since stdout is simply being suppressed, the redirection
    to the console is redundant in this case. I didn’t include the redirection earlier
    in the chapter because I wanted to focus on the new commands alone, but in practice
    it’s best to always define the destination explicitly as I’ve done here, even
    if it isn’t required.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在*BatchImprov.bat*中的每个choice和set /P命令与本章前面展示的有所不同。除了echo命令外，每个命令都使用重定向，通过> con语法显式地将提示或消息写入控制台。如果stdout被重定向到跟踪文件，这个重定向就显得必要；否则，它会将无法回答的提示字符串写入跟踪文件。但由于stdout只是被抑制了，控制台的重定向在这种情况下是多余的。我在本章早些地方没有包含重定向，是因为我想专注于介绍新命令，但在实际使用中，最好总是显式地定义目标，如我在这里所做的，即使它不是必需的。
- en: The *BatchImprov.bat* bat file is now fully functional. Run it and you can answer
    questions and see the results until you answer N to the Do you want to try again?
    prompt. Undoubtedly, you’ll soon get bored due to the limited content, but we
    still have many enhancements to discuss. In Appendix A, you’ll find a far more
    dynamic version of this bat file capable of reading files containing libraries
    of jokes, puns, and riddles; storing them in arrays; and randomly accessing the
    arrays to get unique material multiple times during a single execution.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*BatchImprov.bat* bat文件现在已经完全功能化。运行它，你可以回答问题并查看结果，直到你在"Do you want to try again?"提示下选择N。毫无疑问，由于内容有限，你很快就会感到厌倦，但我们仍然有许多增强功能要讨论。在附录A中，你会找到一个更加动态的bat文件版本，能够读取包含笑话、双关语和谜语的文件；将它们存储到数组中；并在单次执行中随机访问这些数组以获得独特的内容。'
- en: Summary
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, I created the most substantial bat file yet, and I did it to
    demonstrate how to communicate interactively with users. You learned how to provide
    users with a list from which to choose a selection and how to store a typed freeform
    user response of any length into a variable. I also introduced useful commands
    for clearing the screen, updating the title, and changing background and text
    colors, including other noninteractive uses for these commands.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我创建了迄今为止最重要的bat文件，目的是演示如何与用户进行交互式通信。你学习了如何提供一个选择列表供用户选择，以及如何将用户输入的自由格式响应（无论长度如何）存储到一个变量中。我还介绍了用于清屏、更新标题、改变背景和文本颜色的有用命令，包括这些命令的其他非交互式用途。
- en: In the next chapter, the last of [Part I](part1.xhtml), I’ll discuss code blocks,
    which is an integral topic as you move forward. A code block isn’t simply a “block
    of code.” I’ll explain what it is, why it’s important, and how it’s useful in
    the next few pages.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，即[第一部分](part1.xhtml)的最后一章，我将讨论代码块，这是一个在你深入学习过程中不可或缺的话题。代码块不仅仅是“代码块”那么简单。我将在接下来的几页中解释它是什么、为什么它很重要以及它如何有用。
