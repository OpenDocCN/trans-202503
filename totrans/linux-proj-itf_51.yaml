- en: Chapter 51. Introduction to POSIX IPC
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第51章：POSIX IPC简介
- en: 'The POSIX.1b realtime extensions defined a set of IPC mechanisms that are analogous
    to the System V IPC mechanisms described in [Chapter 45](ch45.html "Chapter 45. Introduction
    to System V IPC") to [Chapter 48](ch48.html "Chapter 48. System V Shared Memory").
    (One of the POSIX.1b developers’ aims was to devise a set of IPC mechanisms that
    did not suffer the deficiencies of the System V IPC facilities.) These IPC mechanisms
    are collectively referred to as POSIX IPC. The three POSIX IPC mechanisms are
    the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX.1b实时扩展定义了一组类似于System V IPC机制的IPC机制，这些机制在[第45章](ch45.html "第45章：System
    V IPC简介")到[第48章](ch48.html "第48章：System V共享内存")中描述。（POSIX.1b的开发者之一的目标是设计一组不具备System
    V IPC设施缺陷的IPC机制。）这些IPC机制统称为POSIX IPC。三种POSIX IPC机制如下：
- en: '*Message queues* can be used to pass messages between processes. As with System
    V message queues, message boundaries are preserved, so that readers and writers
    communicate in units of messages (as opposed to the undelimited byte stream provided
    by a pipe). POSIX message queues permit each message to be assigned a priority,
    which allows high-priority messages to be queued ahead of low-priority messages.
    This provides some of the same functionality that is available via the type field
    of System V messages.'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*消息队列*可用于在进程之间传递消息。与System V消息队列一样，消息边界会被保留，从而读写操作是按消息单元进行通信的（与管道提供的没有边界的字节流不同）。POSIX消息队列允许为每条消息分配优先级，这使得高优先级消息可以排在低优先级消息之前。这样提供了与System
    V消息中的类型字段相同的一些功能。'
- en: '*Semaphores* permit multiple processes to synchronize their actions. As with
    System V semaphores, a POSIX semaphore is a kernel-maintained integer whose value
    is never permitted to go below 0\. POSIX semaphores are simpler to use than System
    V semaphores: they are allocated individually (as opposed to System V semaphore
    *sets*), and they are operated on individually using two operations that increase
    and decrease a semaphore’s value by one (as opposed to the ability of the *semop()*
    system call to atomically add or subtract arbitrary values from multiple semaphores
    in a System V semaphore set).'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*信号量*允许多个进程同步它们的操作。与System V信号量类似，POSIX信号量是一个由内核维护的整数，其值永远不允许低于0。POSIX信号量比System
    V信号量更易于使用：它们是单独分配的（与System V信号量*集合*不同），并且使用两个操作单独操作，每次操作都将信号量的值增加或减少1（与*semop()*系统调用可以原子性地从System
    V信号量集合中的多个信号量添加或减少任意值不同）。'
- en: '*Shared memory* enables multiple processes to share the same region of memory.
    As with System V shared memory, POSIX shared memory provides fast IPC. Once one
    process has updated the shared memory, the change is immediately visible to other
    processes sharing the same region.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*共享内存*使多个进程能够共享同一内存区域。与System V共享内存类似，POSIX共享内存提供了快速的IPC。一旦一个进程更新了共享内存，其他共享相同内存区域的进程可以立即看到变化。'
- en: This chapter provides an overview of the POSIX IPC facilities, focusing on their
    common features.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章概述了POSIX IPC设施，重点介绍它们的共同特征。
- en: API Overview
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API 概述
- en: The three POSIX IPC mechanisms have a number of common features. [Table 51-1](ch51.html#summary_of_programming_interfaces_for_po
    "Table 51-1. Summary of programming interfaces for POSIX IPC objects") summarizes
    their APIs, and we go into the details of their common features in the next few
    pages.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这三种POSIX IPC机制具有许多共同特征。[表51-1](ch51.html#summary_of_programming_interfaces_for_po
    "表51-1：POSIX IPC对象编程接口汇总")总结了它们的API，我们将在接下来的几页中详细介绍它们的共同特征。
- en: Note
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Except for a mention in [Table 51-1](ch51.html#summary_of_programming_interfaces_for_po
    "Table 51-1. Summary of programming interfaces for POSIX IPC objects"), in the
    remainder of this chapter, we’ll overlook the fact that POSIX semaphores come
    in two flavors: named semaphores and unnamed semaphores. Named semaphores are
    like the other POSIX IPC mechanisms that we describe in this chapter: they are
    identified by a name, and are accessible by any process that has suitable permissions
    on the object. An unnamed semaphore doesn’t have an associated identifier; instead,
    it is placed in an area of memory that is shared by a group of processes or by
    the threads of a single process. We go into the details of both types of semaphores
    in [Chapter 53](ch53.html "Chapter 53. POSIX Semaphores").'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在[表51-1](ch51.html#summary_of_programming_interfaces_for_po "表51-1. POSIX
    IPC对象的编程接口汇总")中提到之外，在本章的其余部分，我们将忽略POSIX信号量有两种类型的事实：命名信号量和未命名信号量。命名信号量就像本章中描述的其他POSIX
    IPC机制：它们通过名称来标识，并且任何拥有适当权限的进程都可以访问该对象。未命名信号量没有相关的标识符；相反，它被放置在一个由一组进程或单一进程的线程共享的内存区域中。我们将在[第53章](ch53.html
    "第53章。POSIX信号量")中详细介绍这两种类型的信号量。
- en: Table 51-1. Summary of programming interfaces for POSIX IPC objects
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 表51-1。POSIX IPC对象的编程接口汇总
- en: '| Interface | Message queues | Semaphores | Shared memory |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 接口 | 消息队列 | 信号量 | 共享内存 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Header file | `<mqueue.h>` | `<semaphore.h>` | `<sys/mman.h>` |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 头文件 | `<mqueue.h>` | `<semaphore.h>` | `<sys/mman.h>` |'
- en: '| Object handle | *mqd_t* | *sem_t ** | *int* (file descriptor) |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 对象句柄 | *mqd_t* | *sem_t** | *int*（文件描述符） |'
- en: '| Create/open | *mq_open()* | *sem_open()* | *shm_open()* + *mmap()* |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 创建/打开 | *mq_open()* | *sem_open()* | *shm_open()* + *mmap()* |'
- en: '| Close | *mq_close()* | *sem_close()* | *munmap()* |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 关闭 | *mq_close()* | *sem_close()* | *munmap()* |'
- en: '| Unlink | *mq_unlink()* | *sem_unlink()* | *shm_unlink()* |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 删除 | *mq_unlink()* | *sem_unlink()* | *shm_unlink()* |'
- en: '| Perform IPC | *mq_send()*,*mq_receive()* | *sem_post(), sem_wait()*,*sem_getvalue()*
    | operate on locations in shared region |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 执行IPC | *mq_send()*, *mq_receive()* | *sem_post(), sem_wait()*, *sem_getvalue()*
    | 在共享区域的位置上操作 |'
- en: '| Miscellaneous operations | *mq_setattr()*—set attributes*mq_getattr()*—get
    attributes*mq_notify()*—request notification | *sem_init()*—initializeunnamed
    semaphore*sem_destroy()*—destroyunnamed semaphore | (none) |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 其他操作 | *mq_setattr()*—设置属性 *mq_getattr()*—获取属性 *mq_notify()*—请求通知 | *sem_init()*—初始化未命名信号量
    *sem_destroy()*—销毁未命名信号量 | （无） |'
- en: IPC object names
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: IPC对象名称
- en: To access a POSIX IPC object, we must have some means of identifying it. The
    only portable means that SUSv3 specifies to identify a POSIX IPC object is via
    a name consisting of an initial slash, followed by one of more nonslash characters;
    for example, `/myobject`. Linux and some other implementations (e.g., Solaris)
    permit this type of portable naming for IPC objects.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问一个POSIX IPC对象，我们必须有某种方式来标识它。SUSv3指定的唯一可移植方法是通过名称来标识POSIX IPC对象，该名称由一个初始的斜杠（/）组成，后跟一个或多个非斜杠字符；例如，`/myobject`。Linux和其他一些实现（例如Solaris）允许这种可移植的IPC对象命名方式。
- en: On Linux, names for POSIX shared memory and message queue objects are limited
    to `NAME_MAX` (255) characters. For semaphores, the limit is 4 characters less,
    since the implementation prepends the string *sem*. to the semaphore name.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上，POSIX共享内存和消息队列对象的名称限制为`NAME_MAX`（255）个字符。对于信号量，限制少了4个字符，因为实现会在信号量名称前加上*sem*字符串。
- en: SUSv3 doesn’t prohibit names of a form other than `/myobject`, but says that
    the semantics of such names are implementation-defined. The rules for creating
    IPC object names on some systems are different. For example, on Tru64 5.1, IPC
    object names are created as names within the standard file system, and the name
    is interpreted as an absolute or relative pathname. If the caller doesn’t have
    permission to create a file in that directory, then the IPC *open* call fails.
    This means that unprivileged programs can’t create names of the form `/myobject`
    on Tru64, since unprivileged users normally can’t create files in the root directory
    (`/`). Some other implementations have similar implementation-specific rules for
    the construction of the names given to IPC *open* calls. Therefore, in portable
    applications, we should isolate the generation of IPC object names into a separate
    function or header file that can be tailored to the target implementation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv3 并不禁止使用 `/myobject` 以外的形式的名称，但它指出这种名称的语义是实现定义的。在某些系统上，创建 IPC 对象名称的规则有所不同。例如，在
    Tru64 5.1 上，IPC 对象名称作为标准文件系统中的名称创建，且名称被解释为绝对路径或相对路径。如果调用者没有权限在该目录中创建文件，则 IPC *open*
    调用失败。这意味着在 Tru64 上，未经授权的程序无法创建 `/myobject` 形式的名称，因为未经授权的用户通常无法在根目录（`/`）中创建文件。其他一些实现也有类似的实现特定规则来构造给定
    IPC *open* 调用的名称。因此，在可移植的应用程序中，我们应该将 IPC 对象名称的生成隔离到一个单独的函数或头文件中，以便根据目标实现进行定制。
- en: Creating or opening an IPC object
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建或打开 IPC 对象
- en: 'Each IPC mechanism has an associated *open* call (*mq_open(), sem_open()*,
    or *shm_open()*), which is analogous to the traditional UNIX *open()* system call
    used for files. Given an IPC object name, the IPC *open* call either:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 IPC 机制都有一个关联的 *open* 调用（*mq_open()*、*sem_open()* 或 *shm_open()*），它类似于用于文件的传统
    UNIX *open()* 系统调用。给定一个 IPC 对象名称，IPC *open* 调用要么：
- en: creates a new object with the given name, opens that object, and returns a handle
    for it; or
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个具有指定名称的新对象，打开该对象，并返回一个句柄；或者
- en: opens an existing object and returns a handle for that object.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开现有对象并返回该对象的句柄。
- en: The handle returned by the IPC *open* call is analogous to the file descriptor
    returned by the traditional *open()* system call—it is used in subsequent calls
    to refer to the object.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: IPC *open* 调用返回的句柄类似于传统 *open()* 系统调用返回的文件描述符——它在后续调用中用于引用该对象。
- en: The type of handle returned by the IPC *open* call depends on the type of object.
    For message queues, it is a message queue descriptor, a value of type *mqd_t*.
    For semaphores, it is a pointer of type *sem_t **. For shared memory, it is a
    file descriptor.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: IPC *open* 调用返回的句柄类型取决于对象的类型。对于消息队列，它是一个消息队列描述符，类型为 *mqd_t*。对于信号量，它是类型为 *sem_t
    ** 的指针。对于共享内存，它是一个文件描述符。
- en: 'All of the IPC *open* calls permit at least three arguments—*name*, *oflag*,
    and *mode*—as exemplified by the following *shm_open()* call:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 IPC *open* 调用至少允许三个参数——*name*、*oflag* 和 *mode*——如下所示的 *shm_open()* 调用为例：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'These arguments are analogous to the arguments of the traditional UNIX *open()*
    system call. The *name* argument identifies the object to be created or opened.
    The *oflag* argument is a bit mask that can include at least the following flags:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些参数类似于传统 UNIX *open()* 系统调用的参数。*name* 参数标识要创建或打开的对象。*oflag* 参数是一个位掩码，至少可以包含以下标志：
- en: '`O_CREAT`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`O_CREAT`'
- en: Create the object if it doesn’t already exist. If this flag is not specified
    and the object doesn’t exist, an error results (`ENOENT`).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象尚不存在，则创建该对象。如果未指定此标志且对象不存在，则会导致错误（`ENOENT`）。
- en: '`O_EXCL`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`O_EXCL`'
- en: If `O_CREAT` is also specified and the object already exists, an error results
    (`EEXIST`). The two steps—check for existence and creation—are performed atomically
    ([Atomicity and Race Conditions](ch05.html#atomicity_and_race_conditions "Atomicity
    and Race Conditions")). This flag has no effect if `O_CREAT` is not specified.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果同时指定了 `O_CREAT` 且对象已存在，则会导致错误（`EEXIST`）。这两步——检查是否存在和创建——是原子性的（[原子性与竞争条件](ch05.html#atomicity_and_race_conditions
    "Atomicity and Race Conditions")）。如果未指定 `O_CREAT`，此标志将不起作用。
- en: Depending on the type of object, *oflag* may also include one of the values
    `O_RDONLY`, `O_WRONLY`, or `O_RDWR`, with meanings similar to *open()*. Additional
    flags are allowed for some IPC mechanisms.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 根据对象的类型，*oflag* 可能还包括 `O_RDONLY`、`O_WRONLY` 或 `O_RDWR` 之一，其含义类似于 *open()*。某些
    IPC 机制还允许额外的标志。
- en: 'The remaining argument, *mode*, is a bit mask specifying the permissions to
    be placed on a new object, if one is created by the call (i.e., `O_CREAT` was
    specified and the object did not already exist). The values that may be specified
    for *mode* are the same as for files ([Table 15-4](ch15.html#constants_for_file_permission_bits
    "Table 15-4. Constants for file permission bits"), in [Permissions on Regular
    Files](ch15.html#permissions_on_regular_files "Permissions on Regular Files")).
    As with the *open()* system call, the permissions mask in *mode* is masked against
    the process umask ([The Process File Mode Creation Mask: *umask()*](ch15.html#the_process_file_mode_creation_mask_colo
    "The Process File Mode Creation Mask: umask()")). The ownership and group ownership
    of a new IPC object are taken from the effective user and group IDs of the process
    making the IPC *open* call. (To be strictly accurate, on Linux, the ownership
    of a new POSIX IPC object is determined by the process’s file-system IDs, which
    normally have the same value as the corresponding effective IDs. Refer to Section
    9.5.)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的参数，*mode*，是一个位掩码，指定在调用创建新对象时要赋予该对象的权限（即，指定了`O_CREAT`且该对象尚不存在）。*mode*可以指定的值与文件相同（[表15-4](ch15.html#constants_for_file_permission_bits
    "表15-4. 文件权限位常量")，见[常规文件的权限](ch15.html#permissions_on_regular_files "常规文件的权限")）。与*open()*系统调用一样，*mode*中的权限掩码会与进程的umask进行掩码运算（[进程文件模式创建掩码：*umask()*](ch15.html#the_process_file_mode_creation_mask_colo
    "进程文件模式创建掩码：umask()")）。新IPC对象的所有权和组所有权取决于执行IPC *open*调用的进程的有效用户和组ID。（严格来说，在Linux上，新POSIX
    IPC对象的所有权是由进程的文件系统ID决定的，这通常与相应的有效ID相同。请参见第9.5节。）
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: On systems where IPC objects appear in the standard file system, SUSv3 permits
    an implementation to set the group ID of a new IPC object to the group ID of the
    parent directory.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在IPC对象出现在标准文件系统中的系统上，SUSv3允许实现将新IPC对象的组ID设置为父目录的组ID。
- en: Closing an IPC object
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 关闭IPC对象
- en: For POSIX message queues and semaphores, there is an IPC *close* call that indicates
    that the calling process has finished using the object and the system may deallocate
    any resources that were associated with the object for this process. A POSIX shared
    memory object is closed by unmapping it with *munmap()*.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于POSIX消息队列和信号量，有一个IPC *close*调用，表示调用进程已完成使用该对象，系统可以释放与该对象相关的任何资源。POSIX共享内存对象通过使用*munmap()*取消映射来关闭。
- en: IPC objects are automatically closed if the process terminates or performs an
    *exec()*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果进程终止或执行*exec()*，IPC对象会自动关闭。
- en: IPC object permissions
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: IPC对象权限
- en: IPC objects have a permissions mask that is the same as for files. Permissions
    for accessing an IPC object are similar to those for accessing files ([Permission-Checking
    Algorithm](ch15.html#permission-checking_algorithm "Permission-Checking Algorithm")),
    except that execute permission has no meaning for POSIX IPC objects.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: IPC对象具有与文件相同的权限掩码。访问IPC对象的权限与访问文件的权限类似（[权限检查算法](ch15.html#permission-checking_algorithm
    "权限检查算法")），不同之处在于执行权限对于POSIX IPC对象没有意义。
- en: Since kernel 2.6.19, Linux supports the use of access control lists (ACLs) for
    setting the permissions on POSIX shared memory objects and named semaphores. Currently,
    ACLs are not supported for POSIX message queues.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 从内核版本2.6.19起，Linux支持使用访问控制列表（ACL）来设置POSIX共享内存对象和命名信号量的权限。目前，POSIX消息队列不支持ACL。
- en: IPC object deletion and object persistence
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: IPC对象删除和对象持久化
- en: As with open files, POSIX IPC objects are *reference counted*—the kernel maintains
    a count of the number of open references to the object. By comparison with System
    V IPC objects, this makes it easier for applications to determine when the object
    can be safely deleted.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 与打开的文件类似，POSIX IPC对象是*引用计数*的——内核维护着对该对象的打开引用计数。与System V IPC对象相比，这使得应用程序更容易判断何时可以安全地删除该对象。
- en: Each IPC object has a corresponding *unlink* call whose operation is analogous
    to the traditional *unlink()* system call for files. The *unlink* call immediately
    removes the object’s name, and then destroys the object once all processes cease
    using it (i.e., when the reference count falls to zero). For message queues and
    semaphores, this means that the object is destroyed after all processes have closed
    the object; for shared memory, destruction occurs after all processes have unmapped
    the object using *munmap()*.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 IPC 对象都有一个相应的 *unlink* 调用，其操作类似于传统的 *unlink()* 系统调用，用于删除文件。*unlink* 调用立即删除对象的名称，然后在所有进程停止使用该对象后销毁该对象（即当引用计数降为零时）。对于消息队列和信号量，这意味着在所有进程关闭对象后，才销毁该对象；对于共享内存，销毁发生在所有进程使用
    *munmap()* 取消映射该对象之后。
- en: After an object is unlinked, IPC *open* calls specifying the same object name
    will refer to a new object (or fail, if `O_CREAT` was not specified).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在对象被解除链接后，指定相同对象名称的 IPC *open* 调用将引用一个新对象（如果没有指定 `O_CREAT`，则调用会失败）。
- en: As with System V IPC, POSIX IPC objects have kernel persistence. Once created,
    an object continues to exist until it is unlinked or the system is shut down.
    This allows a process to create an object, modify its state, and then exit, leaving
    the object to be accessed by some process that is started at a later time.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 与 System V IPC 一样，POSIX IPC 对象具有内核持久性。一旦创建，对象将一直存在，直到它被解除链接或系统关闭。这允许一个进程创建一个对象，修改其状态，然后退出，留下该对象供稍后启动的进程访问。
- en: Listing and removing POSIX IPC objects via the command line
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 通过命令行列出和删除 POSIX IPC 对象
- en: System V IPC provides two commands, *ipcs* and *ipcrm*, for listing and deleting
    IPC objects. No standard commands are provided to perform the analogous tasks
    for POSIX IPC objects. However, on many systems, including Linux, IPC objects
    are implemented within a real or virtual file system, mounted somewhere under
    the root directory (`/`), and the standard *ls* and *rm* commands can be used
    to list and remove IPC objects. (SUSv3 doesn’t specify the use of *ls* and *rm*
    for these tasks.) The main problem with using these commands is the nonstandard
    nature of POSIX IPC object names and their location in the file system.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: System V IPC 提供了两个命令，*ipcs* 和 *ipcrm*，用于列出和删除 IPC 对象。没有标准命令用于执行类似的任务来操作 POSIX
    IPC 对象。然而，在许多系统上，包括 Linux，IPC 对象是通过真实或虚拟文件系统实现的，通常挂载在根目录 (`/`) 下的某个位置，并且可以使用标准的
    *ls* 和 *rm* 命令来列出和删除 IPC 对象。（SUSv3 并未指定使用 *ls* 和 *rm* 来执行这些任务。）使用这些命令的主要问题是 POSIX
    IPC 对象名称的非标准性质以及它们在文件系统中的位置。
- en: On Linux, POSIX IPC objects are contained in virtual file systems mounted under
    directories that have the sticky bit set. This bit is the restricted deletion
    flag ([Set-User-ID, Set-Group-ID, and Sticky Bits](ch15.html#set-user-id_comma_set-group-id_comma_and
    "Set-User-ID, Set-Group-ID, and Sticky Bits")); setting it means that an unprivileged
    process can unlink only the POSIX IPC objects that it owns.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上，POSIX IPC 对象包含在虚拟文件系统中，这些文件系统挂载在设置了粘滞位的目录下。粘滞位是限制删除标志（[Set-User-ID,
    Set-Group-ID 和 Sticky 位](ch15.html#set-user-id_comma_set-group-id_comma_and "Set-User-ID,
    Set-Group-ID, and Sticky Bits")）；设置此标志意味着一个没有特权的进程只能解除链接它拥有的 POSIX IPC 对象。
- en: Compiling programs that use POSIX IPC on Linux
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在 Linux 上编译使用 POSIX IPC 的程序
- en: On Linux, programs employing the POSIX IPC mechanisms must be linked with the
    *realtime* library, *librt*, by specifying the *-lrt* option to the *cc* command.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上，使用 POSIX IPC 机制的程序必须链接 *realtime* 库 *librt*，通过在 *cc* 命令中指定 *-lrt*
    选项。
- en: Comparison of System V IPC and POSIX IPC
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: System V IPC 和 POSIX IPC 的比较
- en: As we look at the POSIX IPC mechanisms in the following chapters, we’ll compare
    each mechanism against its System V counterpart. Here, we consider a few general
    comparisons for these two types of IPC.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将查看 POSIX IPC 机制，并将每个机制与其 System V 对应机制进行比较。在这里，我们考虑这两种 IPC 类型的一些一般比较。
- en: 'POSIX IPC has the following general advantages when compared to System V IPC:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 与 System V IPC 相比，POSIX IPC 具有以下一般优势：
- en: The POSIX IPC interface is simpler than the System V IPC interface.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POSIX IPC 接口比 System V IPC 接口更简单。
- en: The POSIX IPC model—the use of names instead of keys, and the *open*, *close*,
    and *unlink* functions—is more consistent with the traditional UNIX file model.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POSIX IPC 模型——使用名称而不是键，以及 *open*、*close* 和 *unlink* 函数——与传统的 UNIX 文件模型更加一致。
- en: POSIX IPC objects are reference counted. This simplifies object deletion, because
    we can unlink a POSIX IPC object, knowing that it will be destroyed only when
    all processes have closed it.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POSIX IPC 对象是通过引用计数进行管理的。这简化了对象的删除过程，因为我们可以解除链接 POSIX IPC 对象，并知道它仅在所有进程都关闭它之后才会被销毁。
- en: 'However, there is one notable advantage in favor of System V IPC: portability.
    POSIX IPC is less portable than System V IPC in the following respects:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，System V IPC 有一个显著的优势：可移植性。与 System V IPC 相比，POSIX IPC 在以下几个方面的可移植性较差：
- en: 'System V IPC is specified in SUSv3 and supported on nearly every UNIX implementation.
    By contrast, each of the POSIX IPC mechanisms is an optional component in SUSv3\.
    Some UNIX implementations don’t support (all of) the POSIX IPC mechanisms. This
    situation is reflected in microcosm on Linux: POSIX shared memory is supported
    only since kernel 2.4; a full implementation of POSIX semaphores is available
    only since kernel 2.6; and POSIX message queues are supported only since kernel
    2.6.6.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: System V IPC 在 SUSv3 中有明确规定，并在几乎所有 UNIX 实现中得到支持。相比之下，POSIX IPC 机制在 SUSv3 中是一个可选组件。一些
    UNIX 实现不支持（所有）POSIX IPC 机制。这种情况在 Linux 上得到了缩影：POSIX 共享内存在内核 2.4 版本才开始支持；POSIX
    信号量的完整实现从内核 2.6 版本开始才可用；POSIX 消息队列则从内核 2.6.6 版本开始支持。
- en: Despite the SUSv3 specification for POSIX IPC object names, the various implementations
    follow different conventions for naming IPC objects. These differences require
    us to do (a little) extra work to write portable applications.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管 SUSv3 规定了 POSIX IPC 对象名称，但各个实现对于命名 IPC 对象遵循不同的约定。这些差异要求我们做一些额外的工作，以编写可移植的应用程序。
- en: Various details of POSIX IPC are not specified in SUSv3\. In particular, no
    commands are specified for displaying and deleting the IPC objects that exist
    on a system. (In many implementations, standard file-system commands are used,
    but the details of the pathnames used to identify IPC objects vary.)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POSIX IPC 的各个细节在 SUSv3 中并未具体规定。特别是，未规定用于显示和删除系统中存在的 IPC 对象的命令。（在许多实现中，使用标准的文件系统命令，但用于标识
    IPC 对象的路径名细节有所不同。）
- en: Summary
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: POSIX IPC is the general name given to three IPC mechanisms—message queues,
    semaphores, and shared memory—that were devised by POSIX.1b as alternatives to
    the analogous System V IPC mechanisms.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX IPC 是 POSIX.1b 提出的三种 IPC 机制——消息队列、信号量和共享内存——的总称，作为 System V IPC 机制的替代方案。
- en: The POSIX IPC interface is more consistent with the traditional UNIX file model.
    IPC objects are identified by names, and managed using *open*, *close*, and *unlink*
    calls that operate in a manner similar to the analogous file-related system calls.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX IPC 接口与传统 UNIX 文件模型更加一致。IPC 对象通过名称进行标识，并通过类似于与文件相关的系统调用的 *open*、*close*
    和 *unlink* 调用进行管理。
- en: POSIX IPC provides an interface that is superior in many respects to the System
    V IPC interface. However, POSIX IPC is somewhat less portable than System V IPC.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX IPC 提供了一个在许多方面优于 System V IPC 接口的接口。然而，POSIX IPC 在某些方面的可移植性稍逊于 System
    V IPC。
