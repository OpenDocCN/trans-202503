- en: '**12'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Temperature and Humidity Data Logger**
  prefs: []
  type: TYPE_NORMAL
- en: In this project, you’re going to build a data logger that automatically stores
    data on temperature and humidity. You’ll learn how to read and log data from your
    environment, which is useful in numerous applications.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0154-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: DHT22 temperature and humidity sensor (DHT11 and AM2302 also work)
  prefs: []
  type: TYPE_NORMAL
- en: 4.7 kΩ resistor
  prefs: []
  type: TYPE_NORMAL
- en: Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: '**SOFTWARE REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Adafruit_Python_DHT library
  prefs: []
  type: TYPE_NORMAL
- en: You’ll use the DHT22 temperature and humidity sensor to collect data, which
    will then be saved in a *.txt* file that you can then use to build charts, graphs,
    and other visualizations. This project gives you the basics of data collection,
    which is useful in many different applications that use sensors—for example, monitoring
    soil dampness, taking the temperature of water in a fish tank, or even registering
    the exact time unexpected movement was detected around your house. You can apply
    the concepts from this project to any sensor.
  prefs: []
  type: TYPE_NORMAL
- en: '**INTRODUCING THE DHT22 SENSOR**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The DHT22 (shown in [Figure 12-1](ch12.xhtml#ch12fig1)) is a digital temperature
    and humidity sensor with a built-in chip that converts analog to digital signals,
    so there’s no need to use an analog-to-digital converter. This makes wiring really
    simple.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0155-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 12-1:** DHT22 temperature and humidity sensor'
  prefs: []
  type: TYPE_NORMAL
- en: '**WIRING THE CIRCUIT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a simple circuit that just has the DHT22 sensor wired to your Pi via
    a resistor. Follow these instructions, using the circuit diagram in [Figure 12-2](ch12.xhtml#ch12fig2)
    as a reference.
  prefs: []
  type: TYPE_NORMAL
- en: Connect GND and 3.3 V on the Pi to the breadboard’s blue and red power rails,
    respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the DHT22 sensor according to the following table, with pins starting
    at 1 from left to right when the sensor is facing you. Make sure to wire the resistor
    between pin 2 of the sensor and the breadboard’s red power rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **DHT22** | **RASPBERRY PI** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 3.3 V |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | GPIO 4; also connect to 3.3 V through a 4.7 kΩ resistor |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | Don’t connect |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | GND |'
  prefs: []
  type: TYPE_TB
- en: '![image](../images/f0156-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 12-2:** Wiring the DHT22 sensor to the Pi'
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE SCRIPT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You’ll use the Adafruit_Python_DHT library, which allows you to easily control
    the DHT22 sensor and read the data.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing the DHT22 Library**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This library can also be used with similar sensors, like DHT11 and AM2302 (the
    wired version of the DHT22 from Adafruit), if you’re using those instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'From the terminal, navigate to the desktop, make a folder called *Libraries*
    if you haven’t already, and move into the newly created folder as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Clone the library by entering the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, move to the *Adafruit_Python_DHT* directory and install the library
    with these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: With the necessary library installed, it’s time to write the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**Entering the Script**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The DHT22 library is not supported by Python 3, so you need to use Python 2.7\.
    Open **Python 2.7 (IDLE)** and go to **File** ▸ **New File** to create a new script.
    Copy the code from [Listing 12-1](ch12.xhtml#ch12list1) to the Python Editor and
    save the script as *temperature_humidity_data_logger.py* inside the *Sensors*
    folder (remember that you can download all the scripts at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*):'
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 12-1:** The temperature and humidity data logger script'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: First, you import the Adafruit_DHT library ➊ you just installed, as well as
    the built-in time library. Then, at ➋, you uncomment the line that corresponds
    to the sensor you’re using. If you’re using DHT22, you don’t need to change anything.
  prefs: []
  type: TYPE_NORMAL
- en: The line at ➎ reads the temperature and humidity and saves the readings in the
    `temperature` and `humidity` variables, respectively. If you want your temperature
    readings in Fahrenheit, uncomment the line at ➏ to make the conversion from Celsius.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes the sensor can’t read the data and sends a `null` result to the Pi.
    The `if` statement at ➐ guarantees that the Pi saves data only if it is not `null`.
    You also timestamp each reading using `time.strftime("%H:%M:%S %d/%m/%Y")`—the
    argument in the parentheses here indicates the format you want the time and date
    to appear in: hours, minutes, seconds, day, month, and year, respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: This script reads and records the temperature and humidity every 10 seconds,
    but you can change this at ➒ by changing the delay time. The sensor is capable
    of taking readings every 2 seconds, but no faster than that.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating, Writing, and Closing .txt files**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The DHT22 temperature and humidity readings are automatically saved in a *.txt*
    file that you create with the `open()` function ➌ and store in the `file` variable.
    This function accepts the name you want to give the file as an argument and, in
    this case, a `'``w'` telling Python you want this file to be in *write mode*,
    meaning the program can write and make changes to the file. The write mode overwrites
    existing files with the same name.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Every time you run the code, it will overwrite whatever was already in the*
    sensor_readings.txt *file. If you don’t want this to happen, change the filename
    at* ➍ *to create a new file each time you run the script.*'
  prefs: []
  type: TYPE_NORMAL
- en: The `file.write()` function writes to the file and accepts a string as an argument.
    For example, with `file.write('time and date, temperature, humidity\n')` at ➍,
    you write “time and date, temperature, humidity” into the file. At ➐, you write
    the sensor data to the file and at➑ the timestamp. The `\n` tells Python to start
    the next display text on the next line, known as a *newline*.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `file.close()` function ➓ saves and closes the file.
  prefs: []
  type: TYPE_NORMAL
- en: '**Running the Script**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Press **F5** or go to **Run** ▸ **Run Module** to run the script. Let the script
    run for a few hours to gather a decent amount of data, and when you’re happy with
    the data logging period, stop the script by pressing CTRL-C. You should then have
    a *sensor_readings.txt* file that contains all your data in your *Sensors* folder.
  prefs: []
  type: TYPE_NORMAL
- en: '**TAKING IT FURTHER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this project you’ve learned a very useful concept: data logging. Now you
    can use data logging in other monitoring projects. Here are some ideas:'
  prefs: []
  type: TYPE_NORMAL
- en: Use a PIR motion sensor that makes a timestamp every time it detects movement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a weather station data logger with the Sense HAT.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search for other monitoring sensor applications—for example, soil moisture,
    rain, and light sensors—to build a greenhouse data logger.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
