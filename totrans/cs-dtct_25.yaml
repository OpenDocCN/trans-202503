- en: —26—
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Heuristics in Search
  prefs: []
  type: TYPE_NORMAL
- en: Frank spent the night alternately reviewing clues, watching out the windows
    for Vinettee thugs, and bemoaning the safe house’s lack of food. Soon, he realized
    that it wasn’t just food that was missing. The apartment lacked the standard equipment—blank
    notebooks, quills, and sturdy furniture—found in every police building. Once he
    thought to look for it, Frank quickly located a large “For Rent” sign in the window.
    He was just lucky the police hadn’t rented it out or changed the combination yet.
  prefs: []
  type: TYPE_NORMAL
- en: After a few hours, Frank convinced himself the Vinettees wouldn’t find him.
    He abandoned the windows, began to pace the empty apartment, and focused on the
    case. The When and Where were easy—the clues suggested an attack on the castle
    tomorrow night. Unfortunately, aside from the When and Where, Frank still didn’t
    have any answers. In particular, the Who, Why, How, and Could-I-Sneak-Out-for-Food-Without-the-Vinettees-Seeing-Me
    remained important open questions.
  prefs: []
  type: TYPE_NORMAL
- en: After an hour of pacing while trying to fill in the remaining details, Frank
    had started to doubt even the When and Where. An attack on the castle seemed too
    obvious, and the police were already prepared for it. Even Socks was telling everyone
    he knew to watch for it.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0208-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Frank stopped and swore as realization dawned. Socks had to be involved. With
    a familiar sense of *I knew I shouldn’t trust anyone*, Frank replayed the events
    of the last few days in his mind, this time recognizing the signs. He should have
    seen it when Socks’s staff “accidentally” ignited the papers in the cell and destroyed
    the evidence. He should have realized that someone had tipped off the spy about
    his visit to the cloak shop. He should have at least wondered about the absurd
    and conveniently timed rescue with the barrels of pickled eels. But above all
    else, he should have been absolutely certain from the moment Socks incorrectly
    inserted a node into the binary tree. No expert in binary trees would ever make
    that mistake by accident. It was true that he’d been suspicious the whole time,
    but then again, Frank suspected everyone all the time.
  prefs: []
  type: TYPE_NORMAL
- en: The realization left him with even more questions. The Where and When were unanswered
    again. If Socks had been feeding them false information, Frank had to question
    everything. What were the wizards going to do, and how were they going to do it?
    Knowing the Why would also be nice, but Frank found that whenever he foiled elaborate
    plots, the perpetrators tended to babble on about the Why without provocation.
    By this point, he’d also given up on sneaking out for food, closing that question
    for now with a growling stomach.
  prefs: []
  type: TYPE_NORMAL
- en: “How does the mask fit in?” Frank muttered to himself. If the thieves were planning
    to attack the castle, could they still use the mask? Or would Marcus’s ID badges
    render it useless? Did they just need it to break into the police station? And
    what records were the thieves after? Frank started enumerating the questions in
    his notebook. They quickly outnumbered the clues.
  prefs: []
  type: TYPE_NORMAL
- en: Frank thought about his next step. With such a limited timeline, he needed to
    push far into the realm of *heuristics*—rules of thumb that point algorithms in
    the right direction. For example, when searching for a lost turtle, Frank used
    the common “Check nearby first” heuristic, because turtles are slow. When seeking
    the freshest pot of coffee in the station, he relied on “Check the fullest cauldron”
    because it was often the most recently made. And when navigating to a tall castle
    in an unknown city, “Walk in the direction of the castle first” had usually gotten
    him there after only a few dead ends. Heuristics weren’t perfect, but they provided
    useful information.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0209-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'During his time on the police force, Frank had come to trust one heuristic
    above all others: follow the most concrete clues first. Specific names and physical
    evidence always trumped general suspicions and rumors.'
  prefs: []
  type: TYPE_NORMAL
- en: It was a heuristic Frank had ignored only once in his career, when Glass Box
    Billy had provided multiple tips regarding an upcoming robbery. First, Billy had
    told Frank the getaway cart’s exact waiting location, model, and pitch of wheel
    squeak. Second, Billy had relayed a rumor, overheard between bouts of raucous
    cheering at a game of darts, that Rebecca Vinettee was personally involved and
    the target had something to do with fish.
  prefs: []
  type: TYPE_NORMAL
- en: Frank had ignored every good police algorithm and decided to go after Rebecca
    Vinettee directly. He knew that she would disappear before they loaded the cart,
    probably using an alternate route back to the hideout. He had to catch her before
    she could vanish. He staked out the capital’s Fish Depot, which was only two blocks
    from the getaway cart’s location.
  prefs: []
  type: TYPE_NORMAL
- en: As the captain would later explain with excessively loud shouting, the Fish
    Depot happened to be two blocks in the wrong direction. On the other hand, the
    Orb Emporium was only a quarter of a block away from the getaway cart. A gang
    completely unaffiliated with the Vinettees stole 64 high-quality spherical glass
    orbs and 2 prototype cubic orbs, loaded them onto the getaway cart, and drove
    away with wheels squeaking precisely as annoyingly as Glass Box Billy had indicated.
    Frank’s description of Billy’s tip, and his insistence on adding a new heuristic
    of “always suspect the Vinettees,” did not convince the captain.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the current case, however, Frank was running out of even vague clues. He’d
    exhausted most of his concrete leads and was well into the realm of speculation
    and suspicion. If he wanted to make any more progress, he would need more information.
    He turned to his second most trusted heuristic: when at a dead end, collect more
    information. He needed to know more about the mask, how it could be used, and
    what magical defenses could thwart it. In this case, that meant finding an expert.'
  prefs: []
  type: TYPE_NORMAL
- en: '**POLICE ALGORITHMS 101: HEURISTICS**'
  prefs: []
  type: TYPE_NORMAL
- en: '***Excerpt from Professor Drecker’s Lecture***'
  prefs: []
  type: TYPE_NORMAL
- en: Heuristics are rules of thumb that help point algorithms in the right direction.
    While you’ll undoubtedly hear some officers dismiss heuristics as random guesses,
    you’ll also see those same officers fall back on techniques and rules of thumb
    that have served them well in the past. It’s important to realize that heuristics,
    like all information, are of varying quality.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the clearest examples of heuristics is navigating in the physical world.
    Whether you’re wandering through a maze, searching an unknown city, or simply
    finding your way to the mess hall, you’ll find yourself using heuristics to guide
    your search. Given two paths, which do you try first? A common and often reliable
    heuristic is to prioritize options according to simplified distance measures.
    My favorite is to use “as the bird flies” distance: How far away is the goal if
    there’s nothing in your way? In practice, this heuristic means I always take the
    path that looks like it is getting me closer to the goal—the path that at least
    starts out in the correct direction. I might run into a few dead ends this way,
    but overall I’ve found this to be a good heuristic.'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there are plenty of terrible heuristics as well. Officers who use
    new heuristics without properly vetting them can find themselves in deep trouble.
    A few years ago, a young officer created a particularly bad heuristic. After unprecedented
    success busting a smuggling ring, he got it into his head that all investigations
    must start at the docks. The problem was that this heuristic is wrong. It didn’t
    help point his investigations in the right direction. In fact, it often led him
    immediately to a dead end. After 18 failed investigations, his captain assigned
    him to permanently patrolling the docks.
  prefs: []
  type: TYPE_NORMAL
- en: Heuristics shouldn’t be random guesses. They need to contain some amount of
    useful information and be tailored to the correct problem.
  prefs: []
  type: TYPE_NORMAL
