- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Liquid Crystal Displays
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter you will
  prefs: []
  type: TYPE_NORMAL
- en: Use character LCD modules to display text and numeric data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create custom characters to display on character LCD modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use color LCD modules to display text and data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a temperature history–graphing thermometer display
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For some projects, you’ll want to display information to the user somewhere
    other than on a desktop computer monitor. One of the easiest and most versatile
    ways to display information is with a liquid crystal display (LCD) module and
    your Arduino. You can display text, custom characters, and numeric data using
    a character LCD module and color graphics with a graphic LCD module.
  prefs: []
  type: TYPE_NORMAL
- en: Character LCD Modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: LCD modules that display characters such as text and numbers are the most inexpensive
    and simplest to use of all LCDs. They can be purchased in various sizes, which
    are measured by the number of rows and columns of characters they can display.
    Some include a backlight and allow you to choose the color of the characters and
    the background color. Any LCD with an HD44780- or KS0066-compatible interface
    and a 5 V backlight should work with your Arduino. The first LCD we’ll use is
    a 16-character–by–2-row LCD module with a backlight, as shown in [Figure 9-1](#figure9-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![f09001](image_fi/500587c09/f09001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-1: Example LCD module with trimpot and header pins'
  prefs: []
  type: TYPE_NORMAL
- en: The trimpot (the variable resistor for the LCD) has a value of 10 kΩ and is
    used to adjust the display contrast. If the header pins have not already been
    soldered into the row of holes along the top of the LCD, you’ll need to do this
    to make insertion into the breadboard straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: The holes along the top of the LCD are numbered 1 through 16\. Number 1 is closest
    to the corner of the module and marked as VSS (connected to GND) in the schematic
    shown in [Figure 9-2](#figure9-2). We’ll refer to this schematic for all of the
    LCD examples in this book. In some rare situations, you could find yourself with
    an LCD that has a 4.2 V instead of a 5 V backlight. (If you are unsure of this,
    check with your supplier.) If this is the case, place a 1N4004 diode in series
    between the Arduino 5 V and the LCD LED+ pin.
  prefs: []
  type: TYPE_NORMAL
- en: '![f09002](image_fi/500587c09/f09002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-2: Basic LCD schematic'
  prefs: []
  type: TYPE_NORMAL
- en: Using a Character LCD in a Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To use the character LCD shown in [Figure 9-1](#figure9-1), we will first explore
    the required functions and how they work through some simple demonstrations. Before
    moving on, you’ll need to install the required Arduino library from the Library
    Manager. Using the method described in Chapter 7, search for and install the “LiquidCrystal
    by Arduino, Adafruit” library. Then you can enter and upload the basic sketch
    shown in [Listing 9-1](#listing9-1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 9-1: LCD demonstration sketch'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 9-3](#figure9-3) shows the result of [Listing 9-1](#listing9-1).'
  prefs: []
  type: TYPE_NORMAL
- en: '![f09003](image_fi/500587c09/f09003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-3: LCD demonstration: “Hello world!”'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now to see how the sketch in [Listing 9-1](#listing9-1) works. First, we need
    to add a line whose purpose is to include the library for LCD modules (which is
    automatically installed with the Arduino IDE). Then we need to tell the library
    which pins are connected to the Arduino. To do this, we add the following lines
    *before* the `void setup()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The numbers entered in the LiquidCrystal function match the pins labeled on
    the LCD. If you’re unsure about your LCD’s pinouts, contact the supplier.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to use different digital pins on the Arduino, adjust the pin numbers
    in the second line of this code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, in `void setup()`, we tell the Arduino the size of the LCD in columns
    and rows. For example, here’s how we’d tell the Arduino that the LCD has 2 rows
    of 16 characters each:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Displaying Text
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With the LCD setup complete, clear the LCD’s display with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, to position the cursor, which is the starting point for the text, use
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `x` is the column (0 to 15) and `y` is the row (0 or 1). Next, to display
    the word *text*, for example, you would enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now that you can position and locate text, let’s move on to displaying variable
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying Variables or Numbers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To display the contents of variables on the LCD screen, use this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you’re displaying a `float` variable, you can specify the number of decimal
    places to use. For example, here `lcd.print(pi, 3)` tells the Arduino to display
    the value of pi to three decimal places, as shown in [Figure 9-4](#figure9-4):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![f09004](image_fi/500587c09/f09004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-4: LCD displaying a floating-point number'
  prefs: []
  type: TYPE_NORMAL
- en: When you want to display an integer on the LCD screen, you can display it in
    hexadecimal or binary, as shown in [Listing 9-2](#listing9-2).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 9-2: Functions for displaying binary and hexadecimal numbers'
  prefs: []
  type: TYPE_NORMAL
- en: The LCD will then display the text shown in [Figure 9-5](#figure9-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![f09005](image_fi/500587c09/f09005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-5: Results of the code in [Listing 9-2](#listing9-2)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Project #28: Defining Custom Characters'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to using the standard letters, numbers, and symbols available on
    your keyboard, you can define up to eight of your own characters in each sketch.
    Notice in the LCD module that each character is made up of eight rows of five
    dots, or *pixels*. [Figure 9-6](#figure9-6) shows a close-up.
  prefs: []
  type: TYPE_NORMAL
- en: '![f09006](image_fi/500587c09/f09006.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-6: Each character is made up of eight rows of five pixels.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To display your own characters, you must first define each one using an *array*.
    For example, to create a smiley face, you could use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Each number in the array addresses an individual pixel in the display. A 0 turns
    off a pixel, and a 1 turns it on. The elements in the array represent the rows
    of pixels in the display; the top element is the top row, the next element is
    the second row down, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, since the first element is `B00000`, all the pixels in the
    top row are turned off. In the next element, `B01010`, every other pixel is turned
    on, and the 1s form the tops of the eyes. The following rows continue to fill
    out the character.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, assign the array (which defines your new character) to the first of the
    eight custom character slots in `void setup()` with the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, to display the character, add the following in `void loop()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To display our custom character, we’d use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 9-7](#figure9-7) shows the smiley faces displayed on the LCD screen.'
  prefs: []
  type: TYPE_NORMAL
- en: '![f09007](image_fi/500587c09/f09007.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-7: The result of Project 28'
  prefs: []
  type: TYPE_NORMAL
- en: Character LCD modules are simple to use and somewhat versatile. For example,
    using what you’ve learned, you could create a detailed digital thermometer by
    combining this LCD and the temperature measurement part of Project 20, on page
    122 in Chapter 6. However, if you need to display a lot of data or graphical items,
    you will need to use a *graphic LCD module*.
  prefs: []
  type: TYPE_NORMAL
- en: Graphic LCD Modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Graphic LCD modules are larger and more expensive than character modules, but
    they’re also more versatile. You can use them not only to display text but also
    to draw lines, dots, circles, and more to create visual effects. The graphic LCD
    used in this book is a 128 × 160-pixel color module with an ST7735-compatible
    interface, as shown in [Figure 9-8](#figure9-8).
  prefs: []
  type: TYPE_NORMAL
- en: '![f09008](image_fi/500587c09/f09008.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-8: A graphic LCD module'
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the Graphic LCD
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before you can use the graphic LCD, you’ll need to connect eight wires between
    the LCD and the Arduino. This is easily done with male-to-female jumper wires,
    as the LCD has the connection pins presoldered at the factory. Make the connections
    as shown in [Table 9-1](#table9-1).
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 9-1: Connections Between the Graphic LCD Module and Arduino'
  prefs: []
  type: TYPE_NORMAL
- en: '| **LCD pin label** | **To Arduino pin** | **LCD pin function** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Vcc | 5 V | VDD |'
  prefs: []
  type: TYPE_TB
- en: '| GND | GND | VSS (GND) |'
  prefs: []
  type: TYPE_TB
- en: '| CS | D10 | Chip select |'
  prefs: []
  type: TYPE_TB
- en: '| RST | D8 | Reset |'
  prefs: []
  type: TYPE_TB
- en: '| A0 (or DC) | D9 | Control |'
  prefs: []
  type: TYPE_TB
- en: '| SDA | D11 | Data in |'
  prefs: []
  type: TYPE_TB
- en: '| SCK | D13 | Clock in |'
  prefs: []
  type: TYPE_TB
- en: '| LED | 3.3 V | Backlight LED |'
  prefs: []
  type: TYPE_TB
- en: Using the LCD
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before moving on, you’ll need to install the required Arduino library from the
    Library Manager. Using the method described in Chapter 7, search for and install
    the “TFT by Arduino, Adafruit” library.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the LCD, insert the following three lines before `void setup()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: (Don’t panic about the “SPI data bus”; for now, the line above is all you need
    to know. We’ll examine the SPI bus in more detail in Chapter 19.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Then add the following lines inside `void setup()` to prepare the display:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Controlling the Display
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are five text sizes you can choose from, as shown in Figures 9-9 and 9-10.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing you need to consider is the background color for the display
    you are generating. This is set with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![f09009](image_fi/500587c09/f09009.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-9: Four of the five text sizes available on the LCD'
  prefs: []
  type: TYPE_NORMAL
- en: '![f09010](image_fi/500587c09/f09010.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-10: The largest of the five text sizes available on the LCD'
  prefs: []
  type: TYPE_NORMAL
- en: You set the color of the background using RGB (red, green, blue) values between
    0 and 255\. For example, a white background would be maximum red, maximum green,
    and maximum blue—so 255, 255, 255\. A pure red background would have a value of
    255 for red and values of 0 for green and blue. For a black background, use zero
    for all three values. (You can find a handy list of RGB color tables at [https://www.rapidtables.com/web/color/RGB_Color.html](https://www.rapidtables.com/web/color/RGB_Color.html).)
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to set the text size if you’re writing text to the LCD for the
    first time or if you need to change the size mid-sketch. To do this, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: where `x` is a number between 1 and 5 that matches the text sizes shown in Figures
    9-9 and 9-10.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then you set the color of the text with the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: where `B`,`G`,and`R` are the corresponding values for your blue, green, and
    red color levels, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, to write text to your screen, use the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This will display the text “Hello, world!” with the top left of the text positioned
    on the LCD at `x`, `y`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This works great for static text. However, if you want to display a numeric
    variable, you need to do a little more work. The variable needs to be converted
    from a number type to a character array whose size will match the largest possible
    value. For example, if you’re reading the Arduino’s analog input 0 and want to
    display the value, use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then during the sketch, before sending the analog value to the LCD, convert
    the value to a string, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This string gets converted and inserted into the character array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, to display the value on the LCD, we can use the `.text()` command
    as usual:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: where the value of `analogZero` is displayed with the top left of the text positioned
    at `x`, `y`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve been through all the commands for using text on the LCD, let’s
    put them into action in the next project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Project #29: Seeing the Text Functions in Action'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With this project, you’ll make your LCD display text in five sizes as well as
    the numeric value read from your Arduino’s analog input 0.
  prefs: []
  type: TYPE_NORMAL
- en: The Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Wire up your LCD as described in [Table 9-1](#table9-1) and then upload the
    following sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Running the Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should see all five sizes of text displayed on the LCD over two screens.
    Then you should see a third screen with the value from analog input 0, like the
    example shown in [Figure 9-11](#figure9-11).
  prefs: []
  type: TYPE_NORMAL
- en: '![f09011](image_fi/500587c09/f09011.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-11: Analog input value shown on TFT LCD'
  prefs: []
  type: TYPE_NORMAL
- en: Creating More Complex Display Effects with Graphic Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let’s look at the functions we can use to create various display effects.
    Keep in mind that the graphic LCD screen has a resolution of 160 columns by 128
    pixels, but when we refer to these columns and pixels in functions in our sketches,
    they are counted from 0 to 159 across and 0 to 127 down. Also, as with the text
    example earlier, we still need to use the five lines of code mentioned in “Using
    a Character LCD in a Sketch” on page 169 to initialize the display.
  prefs: []
  type: TYPE_NORMAL
- en: There are various functions that allow you to display dots (single pixels),
    lines, rectangles, and circles on the display. Apply your project requirements
    and add a dash of imagination to create a colorful and useful display output.
    We’ll run through those functions now, and then you can see them in action through
    a demonstration sketch.
  prefs: []
  type: TYPE_NORMAL
- en: Before drawing any object, you need to define its color. This is done with
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: where `B`,`G`,and`R` are the corresponding values for your blue, green, and
    red color levels, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: To draw a single dot on the display, we use
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: where `X` and `Y` are the horizontal and vertical coordinates of the dot. With
    our LCD, the `X` range falls between 0 and 159 and the `Y` range falls between
    0 and 127.
  prefs: []
  type: TYPE_NORMAL
- en: To draw a line from one point to another, we use
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: where `X1` and `Y1` are the coordinates of the starting point and `X2` and `Y2`
    are the coordinates of the end of the line.
  prefs: []
  type: TYPE_NORMAL
- en: To draw a circle, we use
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: where `X` and `Y` are the coordinates of the center of the circle, and `R` is
    the radius of the circle in pixels. If you wish to fill the circle (or a rectangle,
    described a bit later) with a color, instead of just drawing an outline, precede
    the `circle()` function with
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: where `B`,`G`,and`R` are the corresponding values for your blue, green, and
    red fill levels, respectively. Note that a fill color doesn’t change the shape’s
    outline, so you still need to precede the shape function with the `stroke()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to draw more than one filled item, you only need to use the `fill()`
    command once. If you then want to turn off the fill and revert to outlines only,
    use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, you can draw rectangles with the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: where `X1`, `Y1` are the coordinates for the top left of the rectangle and `X2`,
    `Y2` are the coordinates for the bottom right of the rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Project #30: Seeing the Graphic Functions in Action'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we’ve been through all the commands for using the graphic functions
    on the LCD, let’s put them into action in this project.
  prefs: []
  type: TYPE_NORMAL
- en: The Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Wire up your LCD as described in [Table 9-1](#table9-1) and then upload the
    following sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: After the sketch has uploaded, the display will run through all the graphic
    functions we have examined in this chapter. For example, you should see the lines
    shown in [Figure 9-12](#figure9-12).
  prefs: []
  type: TYPE_NORMAL
- en: With the functions discussed so far and some imagination, you can create a variety
    of display effects or display data graphically. In the next section, we’ll build
    on our quick-read thermometer project using the LCD screen and some of these functions.
  prefs: []
  type: TYPE_NORMAL
- en: '![f09012](image_fi/500587c09/f09012.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-12: Random lines on the LCD'
  prefs: []
  type: TYPE_NORMAL
- en: 'Project #31: Creating a Temperature History Monitor'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this project, our goal is to measure the temperature once every 20 minutes
    and display the last 120 readings in a dot graph. Each reading will be represented
    as a pixel, with the temperature on the vertical axis and time on the horizontal
    axis.
  prefs: []
  type: TYPE_NORMAL
- en: The most current reading will appear on the left, and the display will continually
    scroll the readings from left to right. The current temperature will also be displayed
    as a numeral.
  prefs: []
  type: TYPE_NORMAL
- en: The Algorithm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although it may sound complex, this project is fairly easy, requiring only two
    functions. The first function takes a temperature reading from the TMP36 temperature
    sensor and stores it in an array of 120 values. Each time a new reading is taken,
    the previous 119 values are moved down the array to make way for the new reading,
    and the oldest reading is erased.
  prefs: []
  type: TYPE_NORMAL
- en: The second function draws on the LCD screen. It displays the current temperature,
    a scale for the graph, and the positions of each pixel for the display of the
    temperature data over time.
  prefs: []
  type: TYPE_NORMAL
- en: The Hardware
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here’s what you’ll need to create this project:'
  prefs: []
  type: TYPE_NORMAL
- en: One 160 × 128-pixel ST7735 TFT LCD module, as used in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One TMP36 temperature sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various connecting wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arduino and USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect the graphic LCD as described in [Table 9-1](#table9-1) and connect the
    TMP36 sensor to 5 V, analog 5, and GND as you did in Project 20 in Chapter 6.
  prefs: []
  type: TYPE_NORMAL
- en: The Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Our sketch combines the code we used to measure temperature in Chapter 6 and
    the graphic functions described earlier in this chapter. Enter and upload the
    following sketch, which includes relevant comments about the functions used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Running the Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The resulting display should look something like [Figure 9-13](#figure9-13).
  prefs: []
  type: TYPE_NORMAL
- en: '![f09013](image_fi/500587c09/f09013.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-13: Results of Project 31'
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Different people can interpret data better when they see it presented in different
    visual formats. For this reason, you may want to create a bar graph instead, with
    vertical lines indicating the values.
  prefs: []
  type: TYPE_NORMAL
- en: This type of project could also be used to display other kinds of data, such
    as the voltage from various sensors as measured by analog input pins. Or you could
    add another temperature sensor and show both values at once. Almost anything that
    returns a value can be displayed using the graphic LCD module.
  prefs: []
  type: TYPE_NORMAL
- en: Looking Ahead
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you have experience with LCDs, you can see that the Arduino is in
    fact a small computer: it can accept and process incoming data and display it
    to the outside world. But this is only the beginning. In the next chapter, you’ll
    examine libraries in much more depth, learn to write your own library, and then
    use your new library with the temperature sensor used in previous projects.'
  prefs: []
  type: TYPE_NORMAL
