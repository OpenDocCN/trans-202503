- en: '![Image](Images/f037-01.jpg)'
  id: totrans-0
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f037-01.jpg)'
- en: '2'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '2'
- en: 'Weird Bug Chowdown: Collecting Items and Avoiding Obstacles'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 奇怪的虫子大餐：收集物品并避开障碍物
- en: Let’s take the little leaf game we’ve made and turn it into *Weird Bug Chowdown*,
    which has more of a story arc. Instead of making a game about a bug just munching
    a leaf forever, this game will start easy, get harder, and eventually reach an
    ending. We’ll talk about some of the most common elements in video games—collecting
    and avoiding things! We’ll also explore time pressure, one of the most fundamental
    features of real-time games.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将我们做的小叶子游戏转换成 *奇怪的虫子大餐*，它有更完整的故事情节。这个游戏不像原来的游戏那样让虫子永远吃叶子，而是从简单开始，逐渐变难，最终达到一个结局。我们将讨论一些视频游戏中最常见的元素——收集和避开物品！我们还将探索时间压力，这是实时游戏中最基本的特征之一。
- en: 'You’ll also learn a few more Scratch features, such as the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将学习一些 Scratch 的其他功能，诸如以下内容：
- en: Using clones to create more sprites
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用克隆来创建更多精灵
- en: Creating and keeping track of your own variables
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建并跟踪你自己的变量
- en: Creating your own events and using them to send messages between different sprites
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你自己的事件，并用它们在不同的精灵之间传递消息
- en: Using a little bit of animation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一些动画效果
- en: You can play *Weird Bug Chowdown* at *[https://scratch.mit.edu/projects/117389078/](https://scratch.mit.edu/projects/117389078/)*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 *[https://scratch.mit.edu/projects/117389078/](https://scratch.mit.edu/projects/117389078/)*
    玩 *奇怪的虫子大餐*。
- en: '![Image](Images/f038-01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f038-01.jpg)'
- en: '*Preview of* Weird Bug Chowdown'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*奇怪的虫子大餐* 预览'
- en: This weird bug wants to get as big as possible by eating all the berries! But
    berries go bad if the bug doesn’t eat them fast enough. Also, every time the bug
    eats a berry, it leaves something stinky behind that you probably want to avoid.
    Can you reach the end of the game? (It’s kind of hard, so if you can’t get to
    the end, try making your version easier.)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这只奇怪的虫子想通过吃掉所有的浆果来尽可能变得更大！但是如果虫子吃得不够快，浆果会坏掉。而且，每次虫子吃掉一个浆果时，它会留下些许难闻的东西，你可能想要避免它。你能完成游戏的结局吗？（这有点难，所以如果你不能完成，试试让你的版本更简单。）
- en: When you’ve played enough, let’s dive in and start making the game!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 玩得够多后，让我们深入并开始制作游戏吧！
- en: Copying a Project and Changing It
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复制一个项目并进行更改
- en: This time, let’s not start from . . . scratch (you know what I mean). Instead,
    let’s build on our previous project by copying it to a new project. Open *Leaf
    Me Alone* by clicking **See inside** either on the My Stuff page or on the game’s
    Project Page.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，我们不从头开始……（你懂我的意思）。相反，让我们通过将之前的项目复制到一个新项目上来进行构建。在“我的作品”页面或游戏的项目页面上，点击 **查看内部**
    打开 *Leaf Me Alone*。
- en: If you haven’t created your own version of *Leaf Me Alone* yet, find the game
    at *[https://scratch.mit.edu/projects/117199134/](https://scratch.mit.edu/projects/117199134/)*,
    and then click the **Remix** button in the upper right to get your own copy to
    work with.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有创建你自己的 *Leaf Me Alone* 版本，可以在 *[https://scratch.mit.edu/projects/117199134/](https://scratch.mit.edu/projects/117199134/)*
    上找到这个游戏，然后点击右上角的 **Remix** 按钮来获得你自己的副本进行修改。
- en: '![Image](Images/f039-01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f039-01.jpg)'
- en: '*Creating a copy of* Leaf Me Alone'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*创建一个* Leaf Me Alone 的副本'
- en: Once you have a version of *Leaf Me Alone* saved as a remix, click **File ▸
    Save as a copy** to create a copy of the game to work on. Its new name should
    look something like “Leaf Me Alone copy.” Click the name to change it to **Weird
    Bug Chowdown** (or an even better name).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你保存了一个*Leaf Me Alone*的 remix 版本，点击 **文件 ▸ 另存为副本** 来创建一个新的游戏副本继续工作。它的新名称应该类似于“Leaf
    Me Alone copy”。点击名称将其更改为 **奇怪的虫子大餐**（或者一个更好的名称）。
- en: '![Image](Images/f040-01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f040-01.jpg)'
- en: '*Saving a copy of* Leaf Me Alone'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*保存一个* Leaf Me Alone 的副本'
- en: Because we’re starting with an existing project, we already have a loop that
    moves our bug forward and events that let the player turn left and right. We’ll
    tweak these for the new game we’ll make.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们是从一个现有的项目开始，所以我们已经有了一个可以让虫子前进的循环和让玩家向左向右转动的事件。我们将对这些进行微调，以便做出我们要制作的新游戏。
- en: '*Weird Bug Chowdown* requires some bug maneuvering skills where the player
    chases tiny berries while avoiding hazards at the same time. To make the bug a
    little easier to maneuver initially, let’s change its move speed to 3\. Now it
    should move 3 steps during its loop instead of 5.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*奇怪的虫子大餐* 需要一些虫子操控技巧，玩家需要在追逐小浆果的同时避开障碍物。为了让虫子最初更容易操控，我们将它的移动速度改为3。现在，它应该每次循环移动3步，而不是5步。'
- en: Tidying Up Your Code
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 整理你的代码
- en: Because we don’t need the leaf-crunch noises, we’ll remove that whole stack
    from the Scripts area. Click the when green flag clicked block at the very top
    to select all the other blocks in that stack, and then drag it out of the Scripts
    area. (Make sure you get rid of the shorter stack that makes chomping noises,
    not the one that moves the bug!)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们不需要叶片咀嚼的声音，我们将把那整个堆栈从脚本区移除。点击最上方的“当绿色旗帜被点击”块，选择该堆栈中的所有其他块，然后将其拖出脚本区。（确保移除的是那个发出咀嚼声音的较短堆栈，而不是那个控制小虫移动的堆栈！）
- en: We’ll also take the left and right turning branches out and make them their
    own `when green flag clicked` stack, as shown on the next page.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还会将左右转向的分支移出来，单独制作一个“当绿色旗帜被点击”堆栈，如下页所示。
- en: Making two stacks of code is an optional step to prevent the stack with our
    main loop from getting so long that it won’t fit on the screen. Don’t forget to
    give the new stack its own `forever` loop, too. Sometimes, this kind of tidying
    up can help you keep track of your code. Now you’ll know whether each stack of
    code is for the setup and main game loop or for pressing buttons and turning.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 制作两个代码堆栈是一个可选步骤，用于防止主循环所在的堆栈过长而无法显示在屏幕上。别忘了也给新的堆栈加上一个自己的`forever`循环。有时候，这种整理有助于你更好地跟踪代码。现在，你就能知道每个代码堆栈是用于设置和主游戏循环，还是用于按按钮和转向。
- en: '![Image](Images/f041-01.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f041-01.jpg)'
- en: '*Reorganizing our existing stack*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*重新整理现有的堆栈*'
- en: Before we start working on our new game, let’s make one more small change to
    the code that we have.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始制作新游戏之前，让我们对现有代码做一个小的改动。
- en: Leaving a Rainbow Trail
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 留下彩虹轨迹
- en: For this game, let’s use the pen for a neat rainbow effect instead of leaf eating.
    Then our bug will leave a rainbow trail behind it wherever it goes. Because this
    game is all about wiggly bug movement, it would be cool to see exactly where your
    bug has been while playing it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个游戏，我们将使用笔来实现整洁的彩虹效果，而不是叶子吃掉的效果。这样，小虫无论走到哪里都会留下彩虹轨迹。因为这个游戏的核心是小虫的扭动运动，看到小虫走过的轨迹会让游戏更加有趣。
- en: Let’s modify the main loop so the bug draws a little differently.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改主循环，让小虫的表现有所不同。
- en: First, we delete the `set pen color to` block. Because we’ll cycle through all
    of the colors of the rainbow, it doesn’t matter what color we start with.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们删除`set pen color to`块。因为我们会循环使用彩虹的所有颜色，所以起始颜色不重要。
- en: Then we add a `set pen saturation to 50` block to make the colors more saturated
    because we want the rainbow super light and pastel. If you set the saturation
    to 100 instead, you would get a super dark rainbow. Setting it to 0 makes it all
    white.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们添加一个`set pen saturation to 50`块，来增加颜色的饱和度，因为我们希望彩虹看起来非常浅淡、柔和。如果将饱和度设置为100，你将得到一个非常深的彩虹。将饱和度设置为0则会使其全部变为白色。
- en: '![Image](Images/f042-01.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f042-01.jpg)'
- en: '*Code to leave a rainbow trail*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*留下彩虹轨迹的代码*'
- en: The final and most important change is getting rid of the `set pen size` block
    inside the loop (the one that creates the random hole bite effect) and replacing
    it with a `change pen color by 10` block. This block produces the rainbow effect.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后也是最重要的更改是移除循环内的`set pen size`块（即那个创建随机洞口咬痕效果的块），并用`change pen color by 10`块替换它。这个块会产生彩虹效果。
- en: In Scratch, the pen color, like the x- or y-coordinates, is just a number. By
    adding to or subtracting from this number, we can change the color the bug is
    drawing with. By using a bigger or smaller number, we can change how quickly the
    rainbow cycles through the colors. We use 10 here, but experiment to find the
    one you like best.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scratch中，笔的颜色就像x或y坐标一样，仅仅是一个数字。通过加减这个数字，我们可以改变小虫绘制时的颜色。通过使用更大或更小的数字，我们可以改变彩虹颜色切换的速度。我们在这里使用的是10，但你可以通过实验找到你最喜欢的数字。
- en: '![Image](Images/f043-01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f043-01.jpg)'
- en: We also got rid of the leaf in the background by creating a new backdrop image
    and deleting the old one. (You can do this from the Backdrops tab after clicking
    on the Stage.) Use a solid background color for the rainbow to show up against.
    If you’re feeling ambitious, you could draw a whole new background. But the rainbow
    effect will make the background interesting to look at on its own so it doesn’t
    really need anything extra. Everyone loves rainbows! What could be better?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还通过创建一个新的背景图像并删除旧的背景图像来去除了背景中的叶片。（你可以在点击舞台后，通过背景标签来进行此操作。）使用一个纯色背景来让彩虹更突出。如果你想要更有创意，你也可以画一个全新的背景。但彩虹效果本身就能让背景变得有趣，所以不需要额外的装饰。大家都喜欢彩虹！还有什么比这更好呢？
- en: '![Image](Images/f043-02.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f043-02.jpg)'
- en: '*Testing the rainbow trail*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*测试彩虹轨迹*'
- en: Making Bug Food
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 制作虫子食物
- en: Now let’s make some berries for our bug to eat. Click the **Paint** button that
    looks like a paintbrush on the sprite menu.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们做一些浆果给我们的虫子吃。点击精灵菜单中看起来像画笔的**绘图**按钮。
- en: Draw a berry and make it a little red circle right on top of the + that’s not
    much bigger than the bug. You can add a little leaf on top and a little white
    spot to show where the light is shining on it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制一个浆果，并让它成为一个稍微小一点的红色圆圈，放在不比虫子大多少的+号上。你可以在顶部加一个小叶子，并在上面加一个小白点，表示光线照射的地方。
- en: When you’re done, click the **Sprite** box in the bottom-right corner (it’ll
    be called `Empty`) and change its value to Berry. Change the value of the costume
    name (in the upper-left corner, by the undo buttons) to costume1. Now what do
    we want our berry to do?
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，点击右下角的**精灵**框（它会被称为`Empty`），并将其值更改为Berry。将服装名称的值（左上角的撤销按钮旁边）更改为costume1。现在，我们希望我们的浆果做什么呢？
- en: '![Image](Images/f044-01.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f044-01.jpg)'
- en: '*Drawing a berry*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*绘制浆果*'
- en: Let’s think for a moment about the role of objects like this in games. Many
    games have coins, rings, gems, or other things the player is supposed to collect
    in tricky-to-reach places. But what do they actually *do* in those games?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花点时间思考一下像这样的物体在游戏中的作用。许多游戏中都有金币、戒指、宝石或其他玩家需要在难以到达的地方收集的物品。但这些物品在游戏中到底*起什么作用*呢？
- en: In *Weird Bug Chowdown*, the berries give the player something to *do* with
    the ability to control the bug’s movement. Objects like berries can motivate players
    to understand how the bug moves and challenge them to get better at controlling
    it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在《奇怪虫子大餐》游戏中，浆果给玩家提供了与控制虫子移动相关的*任务*。像浆果这样的物品可以激励玩家理解虫子的移动方式，并挑战他们提高控制虫子的能力。
- en: We’ll have the berries pop up at random places on the screen so the player can
    try to move the bug to them. How do we make multiple berries? The most obvious
    way is to make multiple berry sprites. But even if we made, say, five of them,
    and they were all identical, we’d still only have five of them. Plus, if we ever
    wanted to change the code in one of them, we’d have to change it *in all five
    of them*. That’s way too much work. Instead, we’ll make just *one* berry sprite
    that can *clone* itself.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将让浆果随机出现在屏幕上的不同位置，玩家可以尝试将虫子移动到它们的位置。我们如何制作多个浆果呢？最显而易见的方式是制作多个浆果精灵。但即使我们制作了比如五个相同的浆果精灵，我们仍然只有五个精灵。而且，如果我们想要更改其中一个的代码，我们就必须*在所有五个精灵中*都做出相同的更改。这工作量太大了。相反，我们只会制作*一个*浆果精灵，它可以*克隆*自己。
- en: Making a Sprite Clone Itself
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 让精灵克隆自己
- en: A clone is just a copy of a sprite that the sprite produces while the game is
    running. Any sprite can make a clone of itself at any time if it’s programmed
    to do so. Clones are not individual objects with their own code. We code them
    by coding the original sprite, and then telling it what to do when it’s cloned
    using a few special blocks made just for clones. Note that clones disappear when
    the game is over.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆只是精灵在游戏运行时生成的副本。任何精灵都可以在任何时候生成自己的克隆，前提是它被编程为这样做。克隆不是具有自己代码的独立对象。我们通过编程原始精灵来创建它们，然后使用为克隆专门设计的一些特殊积木告诉它克隆后该做什么。注意，克隆会在游戏结束时消失。
- en: First, we’ll program the berry sprite to teleport to a random position on the
    screen and then clone itself. The cloned berry will sit and wait for the player
    to try to eat it. Then the original berry will wait a few seconds, teleport again,
    and make *another* clone, and so on. The original berry will just teleport around
    and produce clones, and the clones will be the berries the player eats. Let’s
    see what this looks like in code.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将编写代码让浆果精灵传送到屏幕上的一个随机位置，然后克隆自己。克隆出来的浆果会静止等待玩家尝试去吃它。然后原始的浆果会等待几秒钟，再次传送并制作*另一个*克隆，依此类推。原始浆果将不断传送并生成克隆，而这些克隆将是玩家吃掉的浆果。让我们看看这段代码是如何实现的。
- en: '![Image](Images/f045-01.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f045-01.jpg)'
- en: '*Code for making self-cloning berries*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*制作自我克隆浆果的代码*'
- en: '![Image](Images/f046-01.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f046-01.jpg)'
- en: First, the berry *hides* because this original berry is only here to make clones.
    The player should only be able to see the clone berries. (The `hide` block is
    under **Looks**.) When it becomes invisible, it starts its loop. It moves to a
    random position on the screen, plays *pop* (the sound effect every sprite starts
    with), and clones itself. It pauses three seconds between each cloning and then
    starts the loop again, producing a new clone at a random position. (All of the
    clone-related blocks are under **Control**.)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，浆果会*隐藏*，因为这个原始浆果只是用来生成克隆体的。玩家应该只能看到克隆的浆果。（`hide`块在**外观**下。）当它变得不可见时，它开始循环。它会移动到屏幕上的一个随机位置，播放*pop*（每个精灵开始时的声音效果），并克隆自己。它在每次克隆之间暂停三秒钟，然后再次开始循环，产生一个新的克隆体。所有与克隆相关的块都在**控制**下。
- en: Using Negative Numbers
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用负数
- en: 'The `go to x: y:` block sets `x` to a random number between –220 and 220 and
    `y` to a random number between –160 and 160\. These numbers come from the coordinate
    system talked about in [Chapter 1](ch01.xhtml#ch01).'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`go to x: y:` 块将`x`设置为-220到220之间的随机数，将`y`设置为-160到160之间的随机数。这些数字来自[第一章](ch01.xhtml#ch01)中提到的坐标系统。'
- en: When you move your mouse around the game area and watch the x- and y-coordinates
    in the corner, the numbers get smaller toward the middle. The center point of
    the screen is point 0, 0\. If you move to the right, the x number gets bigger
    up to 240\. If you move to the left, the numbers get lower. Numbers less than
    0 are *negative numbers*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在游戏区域内移动鼠标，并观察角落里的x和y坐标时，数字会朝中间变小。屏幕的中心点是(0, 0)。如果你向右移动，x的数字会增大，最大为240。如果你向左移动，数字会减小。小于0的数字是*负数*。
- en: Negative numbers are like a mirror image of the regular numbers, so if you subtract
    1 from 0, you get –1, and if you subtract 100 from 0, you get –100\. Like normal
    numbers, the further they get from 0, the bigger the number gets. The furthest
    left x position is at –240, which is the mirror of 240 on the right. The y position
    goes from 180 at the top of the screen to –180 at the bottom.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 负数就像是普通数字的镜像，所以如果你从0中减去1，你得到的是-1；如果你从0中减去100，你得到的是-100。就像普通数字一样，离0越远，数字越大。最左边的x位置是-240，它是右边240的镜像。y位置从屏幕顶部的180到屏幕底部的-180。
- en: '![Image](Images/f047-01.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f047-01.jpg)'
- en: Creating a Berry-Free Zone
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建一个无浆果区域
- en: If we set `x` to `pick random -240 to 240` and `y` to `pick random -180 to 180`,
    we’d cover every possible position on the screen. So why use –220 to 220 and –160
    to 160 instead? Because the bug bounces off the edges of the screen, we don’t
    want the berries to appear too close to an edge, making them unfairly difficult
    to collect. To avoid that, we create a comfy buffer of 20 berry-free coordinates
    around the edge of the screen by subtracting 20 from 240 and 180 to get 220 and
    160.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将`x`设置为`pick random -240 to 240`，将`y`设置为`pick random -180 to 180`，我们就能覆盖屏幕上的每个可能位置。那么为什么要使用-220到220和-160到160呢？因为小虫会从屏幕的边缘反弹，我们不希望浆果出现在离边缘太近的地方，这样就会让它们变得不公平，难以收集。为了避免这种情况，我们在屏幕边缘创建了一个20个无浆果坐标的缓冲区，通过从240和180中减去20，得到220和160。
- en: Try running the game now. You probably won’t see anything, but you should hear
    a popping sound every three seconds. This is because the clones are all invisible
    right now. Because the original berry *hides* before it clones itself, the clones
    also start as invisible berries!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在试着运行游戏。你可能什么也看不见，但你应该能听到每三秒钟一次的爆炸声。这是因为克隆体现在都是不可见的。由于原始的浆果在克隆自己之前会*隐藏*，因此克隆体也一开始就是不可见的浆果！
- en: Because the berry’s clones are created *after* you click the green flag to start
    the game, they don’t have the `when green flag clicked` event. That’s a good thing
    because otherwise they would be teleporting around and cloning themselves like
    the original berry, and soon the screen would be covered with berries. When you’re
    working with clones, it’s best to use the `when green flag clicked` event for
    only stuff you want the *original* sprite (not the clones) to do. We’ll use a
    special event to write code for things we want *only clones* to do.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 由于浆果的克隆体是在你点击绿旗开始游戏后创建的，它们没有`when green flag clicked`事件。这是好事，因为否则它们会像原始浆果一样四处传送并自我克隆，屏幕很快就会被浆果覆盖。当你与克隆体一起工作时，最好仅在你想要*原始*精灵（而不是克隆体）做的事情时使用`when
    green flag clicked`事件。我们将使用一个特殊的事件来为只想让*克隆体*做的事情编写代码。
- en: '**NOTE:** Remember that clones disappear when the game stops running, so don’t
    worry about invisible berries clogging your game.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**记住，克隆体在游戏停止时会消失，所以不必担心不可见的浆果会堵塞你的游戏。'
- en: It’s time to give those clones something to do. They can begin by making themselves
    visible again.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候让这些克隆体做点事情了。它们可以首先通过`show`块让自己再次显示出来。
- en: Telling a Cloned Berry What to Do
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 告诉克隆浆果该做什么
- en: We’ll use the `when I start as a clone` event to tell the clones what to do.
    Even though it’s an event, you’ll find it under **Control** with all the other
    clone-related blocks. The event `when I start as a clone` lets you write code
    exclusively for clones. The original sprite will never see this event. Whatever
    comes first inside the `when I start as a clone` block will be the first action
    the clone takes after it’s created.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`when I start as a clone`事件来告诉克隆体该做什么。尽管它是一个事件，你会在**控制**类别下找到它和其他所有与克隆相关的块。`when
    I start as a clone`事件让你编写只适用于克隆体的代码。原始精灵永远不会看到这个事件。`when I start as a clone`块中的第一个内容将是克隆体在创建后执行的第一个动作。
- en: The first thing our berry clone does should be to make itself visible with the
    `show` block, which is in the **Looks** category.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的浆果克隆体做的第一件事应该是用**外观**类别中的`show`块让自己可见。
- en: '![Image](Images/f048-01.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f048-01.jpg)'
- en: '*Telling clones what to do as soon as they’re created*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*在克隆体创建后立即告诉它们该做什么*'
- en: Because we can create as many clones as we want, we can also get rid of them.
    This ability is useful; otherwise, clones could get out of hand! To get rid of
    clone berries after a bug has eaten them, we use a conditional to first check
    whether the berry is touching the bug. If it’s touching the bug, we delete it
    to show that the bug has eaten the berry. Make sure this check happens inside
    a `forever` loop so the berry can keep checking for the condition.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们可以创建任意数量的克隆体，我们也可以将它们移除。这个能力非常有用，否则克隆体可能会失控！为了在虫子吃掉浆果后移除它们，我们使用条件判断首先检查浆果是否接触到虫子。如果接触到虫子，我们就删除它，表示虫子已经吃掉了这颗浆果。确保这个检查发生在`forever`循环中，这样浆果就可以不断检查这个条件。
- en: '![Image](Images/f049-01.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f049-01.jpg)'
- en: '*Testing whether berries pop up*'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*测试浆果是否会弹出*'
- en: Try running the program! Every three seconds, a new berry should appear on the
    screen and disappear when the bug touches it. How quickly can you eat the berries?
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试运行程序！每三秒钟，屏幕上应该会出现一颗新的浆果，虫子触碰到它时它会消失。你能多快吃掉这些浆果？
- en: Broadcasting Messages
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 广播消息
- en: Having the berries just disappear when the bug eats them is a little anticlimactic.
    Instead, let’s make the bug grow a little bigger every time it eats one. To do
    that, we’ll need a way for the berry to send a message to the bug, telling it
    that the bug has eaten the berry. When the bug gets the message, it’ll run a special
    event that tells it to grow bigger.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当虫子吃掉浆果后，浆果就消失有点缺乏高潮。我们可以改成每当虫子吃掉一颗浆果时，虫子会稍微变大一点。为此，我们需要一种方式让浆果向虫子发送一条信息，告诉虫子它已经吃掉了浆果。当虫子收到这条消息时，它会运行一个特殊事件，告诉它要变得更大。
- en: In Scratch, this is called broadcasting and receiving messages. When a sprite
    *broadcasts* a message, that message is sent to every other sprite in the game
    simultaneously. Any sprite with a `when I receive` event for that message will
    run whatever code is attached to that event after receiving the message. Sprites
    without an event for that message will ignore it. It’s like when you post a picture
    on Instagram. You’re sending it out to the entire world, but only the people who
    are following you on Instagram will see it.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scratch中，这叫做广播和接收消息。当一个精灵*广播*一条消息时，这条消息会同时发送给游戏中的所有其他精灵。任何有该消息`when I receive`事件的精灵，在收到消息后会执行与该事件相关的代码。没有该消息事件的精灵会忽略它。这就像你在Instagram上发布一张照片。你将它发送给全世界，但只有关注你的人才能看到。
- en: You can find all the blocks related to broadcasting and receiving messages under
    **Events**, as shown here.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在**事件**下找到所有与广播和接收消息相关的块，如下所示。
- en: '![Image](Images/f050-01.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f050-01.jpg)'
- en: '*Broadcast drop-down menu*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*广播下拉菜单*'
- en: Drag the `broadcast message1` block into your `if touching bug` branch, right
    above `delete this clone`. We want the berry to check whether it’s touching the
    bug, send the bug a message, and then disappear. The default message is `message1`,
    but you can change which message the berry sends by clicking the triangle on the
    `broadcast` block. Click New message to create a new message called `yum`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 将`broadcast message1`块拖入`if touching bug`分支中，放在`delete this clone`上方。我们希望浆果检查是否接触到虫子，给虫子发送一条信息，然后消失。默认信息是`message1`，但你可以通过点击`broadcast`块上的三角形来更改浆果发送的信息。点击新建消息创建一条名为`yum`的新消息。
- en: Now click the bug and give it a new stack that starts with the `when I receive
    yum` event. You might have to click the triangle on the `when I receive yum` block
    and change the message to `yum`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在点击虫子并为它添加一个新的堆栈，堆栈从`when I receive yum`事件开始。你可能需要点击`when I receive yum`块上的三角形并将消息更改为`yum`。
- en: '![Image](Images/f050-02.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f050-02.jpg)'
- en: '*Creating the when I receive yum block*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*创建“当我收到yum”块*'
- en: Now when the bug gets the `yum` message, it can play its chomp sound effect
    and grow a little bigger. Let’s also make the pen size bigger, so the bug’s rainbow
    trail gets larger as the bug gets larger.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当虫子收到`yum`消息时，它可以播放它的咀嚼音效，并且变得稍微大一点。我们还可以把笔刷大小变大，这样随着虫子变大，虫子的彩虹轨迹也会变得更大。
- en: Make sure you also add a `set size to 100%` block to the bug’s setup code (in
    the `when green flag clicked` stack) so it resets its size when you restart the
    game! Otherwise, the bug will keep getting bigger and bigger forever (100% is
    a sprite’s original size).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你在虫子的设置代码中也添加一个`set size to 100%`的块（在`when green flag clicked`堆栈中），这样当你重新启动游戏时，它会重置大小！否则，虫子会一直变得越来越大（100%是精灵的原始大小）。
- en: Now try eating some berries and watch your bug and its rainbow trail grow! *Nom
    nom nom.*
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试吃一些浆果，看看你的虫子和它的彩虹轨迹如何变大！*咻咻咻。*
- en: '![Image](Images/f051-01.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f051-01.jpg)'
- en: '*Watch your bug grow!*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*看着你的虫子长大！*'
- en: Adding Time Pressure
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加时间压力
- en: From the moment the player clicks the green flag, time is ticking in our game.
    As game designers, we should think about how we make use of time. For example,
    we can decide how much time the player should spend in a level, how much time
    should pass before the monster starts chasing the player, or how much time the
    player has to grab a winged ball before it flutters out of reach. Time is an amazing
    tool when we use it deliberately.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 从玩家点击绿旗的那一刻起，我们的游戏就开始计时了。作为游戏设计师，我们应该思考如何利用时间。例如，我们可以决定玩家应该在一个关卡中花费多少时间，怪物开始追逐玩家前需要多久，或者玩家有多少时间抓住一只翅膀球，避免它飞出可及范围。时间是一个强大的工具，当我们有意识地使用它时。
- en: When the timing is too slow, players could get bored because they don’t feel
    much urgency. When the game moves too fast, players feel like they can’t possibly
    keep up. In either case, they disengage because nothing they do feels like it
    has consequence.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当节奏太慢时，玩家可能会感到无聊，因为他们感受不到紧迫感。游戏节奏太快时，玩家会觉得自己根本跟不上。在这两种情况下，他们都会失去兴趣，因为他们做的任何事情都不会觉得有后果。
- en: But if we use time thoughtfully, we can keep the energy of the game moving by
    keeping up the momentum. For example, in *Weird Bug Chowdown*, berries appear
    every three seconds. Players need to use the right *timing* to turn the bug at
    just the right moment to gobble up a berry. But they have as much time as they
    want to collect a berry, and the berries stick around forever.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果我们有意识地使用时间，我们可以通过保持节奏来让游戏保持活力。例如，在*奇怪的虫子大快朵颐*中，浆果每三秒就会出现。玩家需要使用正确的*时机*在恰当的时刻让虫子转动，吞下浆果。但他们有足够的时间收集浆果，而且浆果会永远存在。
- en: '![Image](Images/f052-01.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f052-01.jpg)'
- en: Right now, players have all the time in the world to collect berries, so there’s
    not much forward momentum in this game. But what if we added *time pressure* by
    making berries turn bad if the bug didn’t get them in time, like a fruit going
    bad after being left on the counter for a week? Then the player would have a reason
    to try to grab them as soon as they appear.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，玩家有足够的时间收集浆果，所以这款游戏没有太多前进的动力。但是，如果我们通过让浆果变坏来增加*时间压力*，比如像水果在放置一周后变坏那样？那玩家就会有理由尽快抓住它们。
- en: We could also make the bad berries reverse the player’s progress, turning the
    bad berries into obstacles the bug would have to avoid. This would create pressure
    to eat the berries quickly and consequences when the player isn’t able to do so.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以让坏的浆果逆转玩家的进度，把坏浆果变成障碍物，虫子必须避开这些障碍。这会在玩家无法及时吃掉浆果时制造压力和后果。
- en: Let’s talk about how to make a good berry go bad.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来讨论一下如何让一个好的浆果变坏。
- en: Using Animation to Make Bad Berries
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用动画让坏的浆果
- en: To make the player understand the berries are going bad, we need a way to show
    it to them. We also need to show how close a berry is to going bad to give players
    time to react. Visuals are a great way to communicate information about the state
    of the game.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让玩家理解浆果正在变坏，我们需要一种方式向他们展示这一点。我们还需要展示浆果快要变坏的程度，以便给玩家时间反应。视觉效果是传达游戏状态信息的绝佳方式。
- en: We’ll make different costumes for the berry so the player can watch it change
    color as it gets closer to becoming a bad berry. Then we’ll flip through the different
    stages of berry ripeness, creating a little animation.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为浆果制作不同的服装，玩家可以看到它的颜色变化，逐步变成一个坏掉的浆果。接着，我们将展示不同的浆果成熟阶段，制作一个小动画。
- en: Drawing Costumes
  id: totrans-106
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 绘制服装
- en: Open the berry’s **Costumes** tab. Right now, the berry has a single costume
    (give it the name `costume1` by typing the name into the box next to the undo
    arrows). Right-click that costume and choose **duplicate** to make a copy of that
    costume called `costume2`. Don’t change `costume1`. We’ll draw some big purple
    spots on `costume2`, making it look like it’s halfway through the process of turning
    from red to rotten purple.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浆果的**Costumes**选项卡。此时，浆果只有一件服装（通过在撤销箭头旁边的框中输入名称，给它命名为`costume1`）。右键点击该服装，选择**duplicate**以复制该服装并命名为`costume2`。不要更改`costume1`。我们将在`costume2`上绘制一些大紫色斑点，使它看起来像是从红色变成腐烂紫色的中间阶段。
- en: Right-click costume2 to make another duplicate, which is `costume3`. Use the
    paint bucket tool to add more purple spots in the remaining red on `costume3`.
    Now the berry is completely purple.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 右键点击`costume2`制作另一个副本，即`costume3`。使用油漆桶工具在`costume3`上剩余的红色部分添加更多紫色斑点。现在浆果完全变成紫色了。
- en: Duplicate `costume3` to make `costume4`, and draw some blue spots on it for
    a blueish purple berry. Then make `costume5` completely blue to make a berry that
    is going bad.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 复制`costume3`制作`costume4`，并在其上画一些蓝色斑点，变成蓝紫色的浆果。然后将`costume5`完全涂成蓝色，表现出浆果正在腐烂的状态。
- en: '![Image](Images/f053-01.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f053-01.jpg)'
- en: '*Drawing costumes for your berry*'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*为你的浆果绘制服装*'
- en: We want a visible transition from color to color as the berry grows closer and
    closer to its final, rotten form. Here, we drew seven costumes, starting at solid
    red before turning purple, then blue, and eventually blue with big gross green
    splotches in `costume7`, which shows the kind of berry you wouldn’t want to eat.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望浆果的颜色变化能够可见，随着它越来越接近最终的腐烂形态。这里我们绘制了七个服装，从纯红色开始，接着变成紫色，再变蓝，最后是带有大块绿色斑点的蓝色，`costume7`展示了你不想吃的那种腐烂浆果。
- en: By looking at the color of the berry’s costume at each stage, the player should
    know how close the berry is to being inedible. Red is perfect, purple is halfway
    to going bad, and blue is getting nasty. Green and splotchy is rotten.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 通过观察浆果在每个阶段的服装颜色，玩家应该能知道浆果离变得不可食用还有多远。红色是完美的，紫色是即将腐烂的中间阶段，蓝色表示已经开始变坏。绿色且斑驳则代表腐烂了。
- en: Coding the Animation
  id: totrans-114
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 编写动画代码
- en: Let’s look at how we tell the berry clones to cycle through all the costumes.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看如何让浆果克隆体轮流展示所有的服装。
- en: We need two separate events using `when I start as a clone` for each. One checks
    for contact with the bug. The other event handles all the visuals, like making
    the berry visible, resetting its appearance to `costume1`, and then animating
    it.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用`when I start as a clone`为每个事件创建两个独立的事件。一个事件检测与虫子的接触，另一个事件处理所有视觉效果，比如让浆果可见，重置它的外观为`costume1`，然后进行动画处理。
- en: Because these stacks involve different timing (one uses a `forever` loop, and
    the other uses `wait` and `repeat`), they can’t be in the same stack. Whenever
    two pieces of code have different timing like this, we must put them in separate
    events, even when both events start at the same time. Then they won’t get in each
    other’s way.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些堆栈涉及不同的时机（一个使用`forever`循环，另一个使用`wait`和`repeat`），它们不能放在同一个堆栈中。当两段代码有不同的时机时，我们必须将它们放在不同的事件中，即使这两个事件在同一时间启动。这样它们就不会互相干扰。
- en: '![Image](Images/f054-01.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f054-01.jpg)'
- en: '*Animating how your berry goes bad*'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '*为你的浆果制作腐烂动画*'
- en: In the visual stack, we use a `repeat 6` loop to advance through the costumes
    with one second between each costume change. The `repeat` block is like the `forever`
    block, except instead of repeating the branch inside it forever, it just repeats
    it the number of times you specify. We use `repeat 6` here because there are only
    six frames until the final frame that shows the gross splotchy berry (`costume7`).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在视觉堆栈中，我们使用`repeat 6`循环，每次服装变换之间间隔一秒。`repeat`块像`forever`块，但不同的是，它并不是无限次重复里面的内容，而是根据你指定的次数重复。这里我们使用`repeat
    6`，因为一共有六个帧，直到最后一个显示腐烂斑驳浆果的帧（`costume7`）。
- en: After the `repeat` block runs the specified number of times, Scratch exits the
    branch and moves on to whatever code is below it. In this case, that code waits
    another five seconds and then deletes the clone. That way, rotted berries stick
    around long enough to be an obstacle, but don’t hang around forever. Otherwise,
    the game would get too hard.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在`repeat`块执行指定次数后，Scratch 会退出该分支并继续执行下面的代码。在这个例子中，代码等待五秒钟，然后删除克隆。这样，腐烂的浆果会停留足够长的时间成为障碍，但不会永远存在。否则，游戏会变得太难。
- en: Run the game and watch your berries go bad.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 运行游戏并观察你的浆果变坏。
- en: '![Image](Images/f055-01.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f055-01.jpg)'
- en: '*Testing to see how the berries go bad*'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*测试浆果如何腐烂*'
- en: When a berry pops up, the player has six seconds to eat it before it goes bad.
    That’s just enough time to reach a berry from anywhere on the screen. Then it
    stays bad for another five seconds until it finally vanishes. But right now, you
    can still eat berries after they go bad with no consequences. We haven’t made
    them do anything different when they go bad. Let’s do that next.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个浆果出现时，玩家有六秒钟的时间可以吃掉它，否则它会变坏。这段时间刚好足够从屏幕上的任何位置到达浆果。然后它会保持坏状态五秒钟，直到最终消失。但现在，你仍然可以在浆果变坏后吃掉它而没有任何后果。我们还没有让它们在变坏时做出不同的反应。接下来，我们就来做这件事。
- en: Branching with if and else
  id: totrans-126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用if和else进行分支
- en: 'We used `if () then` blocks to check whether the bug was touching the leaf
    or a berry. Now we’ll use `if / else` blocks to decide whether the berry is good
    or bad when the bug touches it. The `if / else` block (under **Control**) has
    two branches: one for the `if` and one for the `else`. If the condition is true,
    the code in the first branch runs, and if it’s not true, the code in the second
    (`else`) branch runs.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了`if () then`块来检查虫子是否接触到叶子或浆果。现在，我们将使用`if / else`块来决定当虫子接触到浆果时，浆果是好还是坏。`if
    / else`块（在**控制**下）有两个分支：一个是`if`分支，另一个是`else`分支。如果条件为真，第一个分支的代码会执行；如果条件不为真，第二个（`else`）分支的代码会执行。
- en: '![Image](Images/f056-01.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f056-01.jpg)'
- en: '*Checking whether a berry is good for eating*'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '*检查浆果是否适合食用*'
- en: Let’s unpack this stack to understand it. The first outermost block is a `forever`
    loop, because we want this berry to continually check whether the bug is touching
    the berry. Nestled inside the `forever` loop is the `if touching bug` block that
    performs the check. First, we check that the bug is actually touching the berry,
    and only *then* check what kind of berry it is.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们拆解这个堆栈以理解它。最外层的块是`forever`循环，因为我们希望这个浆果不断检查虫子是否碰到它。`forever`循环内嵌套的是`if touching
    bug`块，用来执行碰撞检查。首先，我们检查虫子是否真的碰到浆果，然后*再*检查浆果是什么类型。
- en: 'The next level down is the `if / else` block: `if costume number < 7 then broadcast
    yum, else broadcast yuck`. The `costume number` (under **Looks**) just shows the
    costume number the sprite currently appears as. The `<` symbol means “is less
    than,” which checks whether the costume number is less than 7\. You can find the
    `<` block under **Operators**. The bad berry costume is `costume7`. We want the
    bug to take one action if the berry’s costume number is 7 and another action if
    it’s less than 7.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 下一级是`if / else`块：`if costume number < 7 then broadcast yum, else broadcast yuck`。`costume
    number`（在**外观**下）显示的是精灵当前呈现的服装编号。`<`符号表示“小于”，用于检查服装编号是否小于7。你可以在**运算符**下找到`<`块。坏的浆果服装是`costume7`。我们希望当浆果的服装编号为7时，虫子采取一个动作；当服装编号小于7时，虫子采取另一个动作。
- en: '*If* the costume number is between 1 and 6, the berry is still good to eat,
    and we broadcast the `yum` message. Or *else* if the costume number is 7 and the
    berry is bad, we transmit the `yuck` message by clicking the triangle and then
    **New message**.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果*服装编号在1到6之间，浆果仍然适合食用，我们广播`yum`信息。或者*否则*，如果服装编号为7且浆果已经变坏，我们通过点击三角形然后选择**新消息**广播`yuck`信息。'
- en: Regardless of whether the berry is good or bad, we need to *delete this clone*.
    Removing the berry is not part of the `if / else` block and happens after that
    block is evaluated. We want the berry to disappear whether it’s healthy or not.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 无论浆果是好是坏，我们都需要*删除这个克隆*。删除浆果不属于`if / else`块的一部分，而是在该块评估后执行。无论浆果是否健康，我们都希望它消失。
- en: That’s it for the berry.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样，关于浆果的部分到此为止。
- en: Recording the yuck Message
  id: totrans-135
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 记录“yuck”信息
- en: To make the bug receive the `yuck` message and react accordingly, we’ll record
    a new sound by saying “eww” into the microphone. When the bug receives the `yuck`
    message, the game plays that sound and then the bug gets smaller.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让虫子接收到`yuck`消息并做出相应的反应，我们将通过对着麦克风说“呕”来录制一个新声音。当虫子接收到`yuck`消息时，游戏会播放这个声音，然后虫子会变小。
- en: When the bug eats a good berry, it gets bigger by 10, so we’ll shrink the bug
    by 10 as well. We can shrink the bug by telling it to get bigger by –10, which
    is the same as saying it gets smaller by 10\. We also make the pen smaller, to
    match the bug’s new size.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当虫子吃到一个好的浆果时，它会变大10，因此我们也要让虫子缩小10。我们可以通过让虫子变大-10来缩小虫子，这和说它变小10是一样的。我们还要让栅栏变小，以匹配虫子的新大小。
- en: '![Image](Images/f057-01.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f057-01.jpg)'
- en: '*Making the bug say “eww” when it receives the yuck message*'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '*让虫子在接收到yuck消息时说“呕”*'
- en: We add the conditional `if size > 100%` before the size change to make sure
    the bug can’t get any smaller than its starting size. (Keep in mind that 100%
    is a sprite’s starting size.) If we don’t set this conditional, the bug could
    shrink out of existence just by eating too many bad berries!
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在大小变化前添加条件`if size > 100%`，以确保虫子不会变得比它的初始大小更小。（记住，100%是精灵的初始大小。）如果我们不设置这个条件，虫子可能因为吃太多坏浆果而缩小到消失！
- en: Let’s test our game. Try to make the bug get bigger, and then shrink it back
    to its original size. Check that the bug can’t get any smaller than its starting
    size.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试一下游戏。试着让虫子变大，然后再把它缩小到原来的大小。检查一下虫子是否不能变得比它的初始大小更小。
- en: Poop Obstacles
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 便便障碍物
- en: Now our game has obstacles for our bug to avoid. More importantly, the bug knows
    what to do when it collides with an obstacle. When it receives the `yuck` message,
    it follows the code in its `yuck` stack. We can use the `yuck` stack to add other
    obstacles, too. All we have to do is make new obstacle objects broadcast `yuck`
    messages when the bug touches them.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的游戏有了虫子要避免的障碍物。更重要的是，虫子知道当它与障碍物碰撞时该怎么做。当它接收到`yuck`消息时，它会按照`yuck`堆栈中的代码执行。我们也可以使用`yuck`堆栈来添加其他障碍物。我们要做的就是让新的障碍物对象在虫子接触到它们时广播`yuck`消息。
- en: 'I have the perfect object in mind for a new obstacle: poop! Hear me out: bugs
    poop when they eat, right? My professional background is not in insect digestive
    systems, but bugs most likely poop sometimes. Using poop would be a fun way to
    tie all of the existing game elements together: the bug, the berries, and the
    consumption of said berries.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个完美的障碍物想法：便便！听我说完：虫子吃东西时会拉屎，对吧？我的专业背景并不在昆虫消化系统方面，但虫子很可能有时会拉屎。利用便便作为障碍物将是一个有趣的方式，将所有现有的游戏元素联系在一起：虫子、浆果和食用这些浆果。
- en: When the bug eats a berry, it’ll digest the snack for a second, and then a little
    poop will appear behind it. This poop works just like a bad berry does. If the
    bug touches its poop, it broadcasts a `yuck` message and the bug gets smaller.
    Avoid the poops!
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当虫子吃下一颗浆果时，它会消化这个小吃一秒钟，然后它后面会出现一点便便。这些便便就像坏浆果一样起作用。如果虫子碰到它的便便，它会广播`yuck`消息，虫子会变小。避开便便！
- en: '![Image](Images/f058-01.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f058-01.jpg)'
- en: Why Poop Obstacles Work
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为什么便便障碍物有效
- en: The poop obstacle will never appear *in front of* the bug. The berries pop up
    at random positions and sometimes appear right in front of the bug where the player
    can’t possibly avoid them. But the player *wants* to collect berries, so that’s
    like a free bonus. If poop obstacles appear in front of the bug, that would be
    unfair.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 便便障碍物永远不会出现在虫子*前方*。浆果会随机出现在各个位置，有时会出现在虫子前面，玩家根本无法避开它们。但是玩家*想要*收集浆果，所以这就像一个免费的奖励。如果便便障碍物出现在虫子前面，那就不公平了。
- en: Because the bug’s poop always appears behind the bug, it helps the game’s forward
    momentum. The bug is continuously moving forward, so the poops give the player
    a reason to avoid retracing their path, pushing them to always explore other parts
    of the screen.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 由于虫子的便便总是出现在虫子后面，它有助于游戏的前进动力。虫子会持续向前移动，因此便便给玩家一个理由去避免重新走过自己的路径，推动他们始终探索屏幕的其他部分。
- en: Another selling point for creating poop as an obstacle is that everyone playing
    your game already understands how it works. Everybody poops and instinctively
    knows to avoid it.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 创建便便作为障碍物的另一个卖点是，每个玩你游戏的人都已经理解它是怎么回事。每个人都会拉屎，并且本能地知道要避开它。
- en: Making Poop by Having Sprites Clone Other Sprites
  id: totrans-151
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 通过让精灵克隆其他精灵来制作便便
- en: To create our poop obstacle, hover over the **Choose a Sprite** menu, click
    the **Paint** button, draw something gross, and rename the sprite `poop`. If poop
    grosses you out, you can make your bug lay weird bug eggs instead or leave chewed-up
    little berries behind it, like tiny apple cores. No one wants to touch those!
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建我们的便便障碍物，将鼠标悬停在 **Choose a Sprite** 菜单上，点击 **Paint** 按钮，画一些恶心的东西，并将精灵重命名为
    `poop`。如果便便让你恶心，你可以让你的虫子留下奇怪的虫蛋，或者在它后面留下嚼碎的小浆果，就像小苹果核一样。没有人愿意碰那些！
- en: '![Image](Images/f059-01.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f059-01.jpg)'
- en: '*Drawing bug poop*'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '*画虫子的便便*'
- en: 'Here are some tips for drawing good poop: click the little rainbow-looking
    box next to the palette below the drawing zone to get more colors to choose from.
    The slider to the right of this new rainbow palette lets you make colors brighter
    or darker. If you darken the palette a little, you should be able to pick a nice
    poopy brown. To make it look even grosser, set your drawing size to very small
    and draw some tiny black specks on the poop. There. Magnificent!'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些画好便便的小贴士：点击绘图区下方调色板旁的小彩虹盒子，选择更多颜色。这个新彩虹调色板右侧的滑块可以让你调整颜色的亮度或暗度。如果你稍微把调色板弄暗一点，你应该能选到一个很棒的便便棕色。为了让它看起来更恶心，可以将画笔大小设为非常小，并在便便上画一些微小的黑点。这样。壮观！
- en: Coding the Poop Obstacles
  id: totrans-156
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写便便障碍物的代码
- en: Unlike with the berry, we won’t have the poop clone itself. Poops don’t appear
    on their own; they appear from the bug after it eats a berry. So we’ll tell the
    bug to make the poop clones using the `create clone of myself` block. Click the
    triangle next to `myself` and change it to `poop`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 与浆果不同，我们不会让便便克隆体自己出现。便便不会自己出现，而是虫子吃了浆果后才会生成便便。因此，我们将告诉虫子使用 `create clone of
    myself` 块来制造便便克隆体。点击 `myself` 旁边的三角形并将其更改为 `poop`。
- en: '![Image](Images/f060-01.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f060-01.jpg)'
- en: '*Cloning poop*'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '*克隆便便*'
- en: The bug makes a clone of the poop as part of the `when I receive yum` event.
    Add a `wait 1 secs` block and a `play sound` block and then set the sound to `fart`.
    Now, when the bug eats a berry, it’ll change its size as instructed, digest for
    one second, play a farting sound, and produce a poop clone. (You can record the
    farting sound by blowing a raspberry into the microphone.)
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 虫子在 `when I receive yum` 事件中生成便便克隆体。添加一个 `wait 1 secs` 块和一个 `play sound` 块，并将声音设置为
    `fart`。现在，当虫子吃掉浆果时，它会按照指示改变大小，消化 1 秒钟，播放放屁声，并生成一个便便克隆体。（你可以通过对着麦克风吹口哨录制放屁声。）
- en: '**NOTE:** If the bug eats another berry while waiting a second to clone a poop,
    the `when I receive yum` event starts over from the beginning, as does the `wait`.
    This means only one poop might appear when a bug eats multiple berries very quickly.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 如果虫子在等待克隆便便的过程中吃了另一个浆果，`when I receive yum` 事件会从头开始，`wait` 也会重新开始。这意味着当虫子非常快速地吃掉多个浆果时，可能只会出现一个便便。'
- en: Now let’s use `when I start as a clone` events to tell the poop clones what
    to do after they appear.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用 `when I start as a clone` 事件来告诉 `poop` 克隆体它们在出现后应该做什么。
- en: '![Image](Images/f061-01.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f061-01.jpg)'
- en: '*Code that tells poop clones what to do*'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '*告诉便便克隆体做什么的代码*'
- en: 'The poop code is split into three stacks. The reason is that the timing of
    the `forever` loop and the `wait 10 seconds` block need to run in their own stacks.
    Also, the `when green flag clicked, hide` stack should only run when a new game
    is started. Here is what each stack does:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`poop` 代码分成了三个堆栈。这样做的原因是，`forever` 循环和 `wait 10 seconds` 块需要在各自的堆栈中运行。此外，`when
    green flag clicked, hide` 堆栈应该仅在开始新游戏时运行。以下是每个堆栈的功能：'
- en: '**Hides original poop** The first stack makes the original `poop` sprite disappear,
    because we only want poop to show up in clone form.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**隐藏原始便便** 第一个堆栈让原始 `poop` 精灵消失，因为我们只想让便便以克隆形式出现。'
- en: '**Makes poop appear behind the bug** The `when I start as a clone` stack in
    the lower left makes the poop start at the same x and y position, just like the
    bug. (You can find the `x position` block under **Sensing**.) Without this teleportation
    block, the new poop would appear wherever the original `poop` sprite was hidden
    instead of appearing in the bug’s trail. Then we tell the `poop` clone to *show*
    itself, wait 10 seconds, and then delete itself. Poop, like all things in life,
    is temporary. If it wasn’t, the game would get way too hard.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**让便便出现在虫子后面** 左下方的 `when I start as a clone` 堆栈让便便与虫子一样从相同的 x 和 y 坐标位置开始。（你可以在
    **Sensing** 类别下找到 `x position` 块。）如果没有这个瞬移块，新的便便就会出现在原始 `poop` 精灵被隐藏的位置，而不是出现在虫子的轨迹中。然后我们告诉
    `poop` 克隆体 *显示* 自己，等待 10 秒钟，再将自己删除。便便和生活中的一切一样，都是暂时的。如果它不是暂时的，游戏就会变得太难。'
- en: '**Checks for poop contact** The `when I start as a clone` stack on the right
    checks for a `poop` clone’s contact with the bug. When the bug touches the `poop`,
    the `poop` broadcasts `yuck` and deletes itself. This is pretty much the same
    as with a bad berry. But notice that it waits one second before it starts checking
    for contact with the bug. That’s because each `poop` starts at the same position
    as the bug. If it didn’t wait a second before checking, the bug would smash into
    it as soon as it appears. *Gross*.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**检查粪便接触** 右侧的`当我作为克隆体开始`堆栈检查虫子是否接触到`粪便`克隆体。当虫子碰到`粪便`时，`粪便`会广播`恶心`并自我删除。这与坏浆果的情况差不多。注意，它在开始检查与虫子的接触之前会等待一秒钟。这是因为每个`粪便`从与虫子相同的位置开始。如果它不等一秒钟再开始检查，虫子会在`粪便`出现的瞬间撞上它，*太恶心了*。'
- en: Run your game. Check that the poops appear, that they go away, *and* that they
    work as obstacles when the bug bumps into them. Poops galore.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的游戏。检查粪便是否出现，是否消失，*以及*当虫子碰到它们时，它们是否作为障碍物有效。满地的粪便。
- en: '![Image](Images/f062-01.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f062-01.jpg)'
- en: '*Testing the game with poop*'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用粪便测试游戏*'
- en: Raising the Stakes
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提高赌注
- en: Now our game is full of exciting objects. The bug has items to collect and obstacles
    to avoid, like bad berries and poop. But maybe our game would seem more complete
    if it had more of a story and if there was escalating tension as it went on? For
    example, what if the better the player did, the harder the game became? Right
    now, the bug gets bigger as it eats, which makes it a little bit harder to avoid
    obstacles as the game progresses. But it doesn’t make the game that much different
    to play. What if the bigger the bug was, *the faster it moved*?
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的游戏充满了令人兴奋的物体。小虫有道具可以收集，也有障碍物需要避开，比如坏的浆果和粪便。但也许如果游戏有更多的故事情节，或者随着游戏的进行，紧张感逐渐加剧，游戏会显得更完整一些？比如，如果玩家做得越好，游戏变得越难，怎么样？现在，小虫吃东西会变大，虽然随着游戏进展，它变得稍微难以避免障碍，但这并不会让游戏变得太不一样。如果小虫变得越大，*它移动的速度也越快*，会怎么样？
- en: That way, the better the player is doing, the trickier the game gets. If it
    gets too hard and the bug hits some obstacles, it’ll shrink and the game will
    get slower and easier again. Adding this game play allows the game to meet the
    player’s skill level.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的话，玩家表现得越好，游戏就越难。如果游戏变得太难，虫子撞到障碍物，它会缩小，游戏也会变得更慢、更容易。加入这种玩法可以让游戏适应玩家的技能水平。
- en: Creating Our Own Variables
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建我们自己的变量
- en: 'To keep track of the bug’s speed while it’s moving, we’ll need to use a variable.
    We’ve already used variables: when we tell a sprite to `go to x 100`, we’re changing
    its `x` variable. When we change the color of a sprite’s pen, we’re changing a
    color variable. We can also create our own variables and use them to keep track
    of whatever we want, like the bug’s speed.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在虫子移动时跟踪其速度，我们需要使用一个变量。我们之前已经使用过变量：当我们告诉角色`去到 x 100`时，我们在改变它的`x`变量。当我们改变角色的画笔颜色时，我们在改变颜色变量。我们还可以创建自己的变量，用它们来跟踪我们想要的任何内容，比如虫子的速度。
- en: Click the **Variables** category in the Code tab, and then click **Make a Variable**.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 点击代码选项卡中的**变量**类别，然后点击**创建变量**。
- en: '![Image](Images/f063-01.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f063-01.jpg)'
- en: '*Creating a new variable for speed*'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '*为速度创建一个新变量*'
- en: Name your variable **speed** and set it to **For this sprite only**. That just
    makes it easier to keep track of, because only the bug needs to know what speed
    it’s going.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 给你的变量命名为**速度**，并将其设置为**仅限该角色**。这样做可以更容易跟踪，因为只有虫子需要知道它的速度。
- en: After you name and create your variable, Scratch generates some new blocks to
    help you work with it.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在你命名并创建变量后，Scratch 会生成一些新的方块，帮助你与其一起使用。
- en: The first new block is a round `value` block, which you can put into any slot
    in a block that wants a value. In this case, we’ll use the bug’s current speed
    as the value. There are blocks to set a variable to a specific number or change
    it by adding a number as you would for any other sprite property, like direction
    or costume number. Then there are blocks that show and hide the variable. What
    do those do exactly?
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个新方块是一个圆形的`值`方块，你可以把它放入任何需要值的方块位置。在这种情况下，我们将使用虫子的当前速度作为值。有方块可以将变量设置为特定的数字，或者像更改任何其他角色属性（如方向或服装号）一样，通过添加数字来改变它。还有一些方块可以显示或隐藏变量。它们到底是做什么的呢？
- en: '![Image](Images/f064-01.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f064-01.jpg)'
- en: '*Blocks for your new variable*'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '*为你的新变量创建方块*'
- en: You should see a check mark box next to the `speed` value block. If that’s checked,
    you should see a little display in the corner of your game that shows the value
    of the `speed` variable while you play.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到`speed`值块旁边有一个勾选框。如果勾选了，你应该能看到游戏角落中显示的`speed`变量的值。
- en: '![Image](Images/f065-01.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f065-01.jpg)'
- en: '*Showing a speed display*'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '*显示速度*'
- en: This display can be useful while testing your game. You can see your variable’s
    value at any given time, so you can make sure it’s working as expected. When you
    uncheck the box, this display goes away. You’ll probably want to uncheck the variable
    before sharing the game. But sometimes you might want to leave a variable visible
    in a finished game. For example, if the display shows information you want the
    player to know, like their current score or the number of cupcakes they’ve collected,
    you’ll keep it visible.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这个显示在测试游戏时非常有用。你可以随时看到变量的值，以确保它按预期工作。当你取消选中该框时，显示会消失。在分享游戏之前，你可能希望取消选中该变量。但有时你可能想在完成的游戏中保留一个变量的可见性。例如，如果显示的信息是你希望玩家知道的内容，比如当前分数或他们收集的杯形蛋糕数量，你会保持它可见。
- en: Let’s use the `speed` variable blocks to change the bug’s speed as the game
    goes on.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`speed`变量块来改变游戏进行过程中虫子的速度。
- en: Changing Speed
  id: totrans-190
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 改变速度
- en: Using the `speed` variable is pretty simple. First, make sure the bug’s speed
    is set to 0 in its setup phase, before the main loop starts.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`speed`变量非常简单。首先，确保在主循环开始之前，在虫子的设置阶段将速度设置为0。
- en: '![Image](Images/f066-01.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f066-01.jpg)'
- en: '*Changing your bug’s speed*'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '*改变虫子的速度*'
- en: Then let’s change how far the bug moves after every run through the loop. To
    move our bug by `3 + speed` steps, you’ll need to grab the addition block, `+`,
    from **Operators** and drag the `speed` value block into the second slot of the
    `+` block. The minimum speed will be 3, which is the bug’s current speed. The
    `speed` variable, which starts at 0, keeps track of how much speed the bug gains
    on top of its starting speed.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们改变虫子每次循环后移动的距离。要让虫子按`3 + speed`步数移动，你需要从**运算符**中抓取加法块`+`，并将`speed`值块拖入`+`块的第二个插槽。最小速度将是3，即虫子的当前速度。`speed`变量从0开始，记录虫子在其起始速度基础上获得的速度。
- en: Now we have a starting point from which to increase the bug’s speed every time
    it eats a berry and decrease when it hits an obstacle. We’ll do that using the
    `change speed by` block.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个起始点，每当虫子吃到一颗浆果时，就增加它的速度，并在它撞到障碍物时减速。我们可以使用`change speed by`块来实现这一点。
- en: '![Image](Images/f066-02.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f066-02.jpg)'
- en: '*Using the change speed by block*'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用通过块改变速度*'
- en: A good increment is 0.5 seconds, which is half of 1, or five-tenths of a second.
    If the increment was 1, the bug would speed up too quickly. Try different numbers.
    Check the speed display in the corner to make sure that eating berries makes the
    bug faster and hitting obstacles slows it back down again.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的增量是0.5秒，即1的一半，或五分之一秒。如果增量是1，虫子会加速得太快。尝试不同的数字。检查游戏角落的速度显示，确保吃浆果让虫子变得更快，撞到障碍物则使其减速。
- en: Ending the Game
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结束游戏
- en: The bug in *Weird Bug Chowdown* gets bigger and faster the more berries it eats.
    But right now, there’s no real limit to how big it can grow or how fast it can
    go. The bug would just keep growing and growing. We can pick a point in the bug’s
    growth and say, that’s enough! We can make something happen when the bug gets
    to a certain size or is moving at a certain speed. For example, when the bug is
    really huge, instead of getting any bigger, it could turn into a butterfly.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在*奇怪的虫子大吃一顿*中，虫子吃得越多，它就变得越大、越快。但目前，虫子可以变得多大或多快并没有实际限制。虫子会不断地增长。我们可以选择虫子生长的某个点，并说到此为止！我们可以在虫子达到一定大小或以一定速度移动时触发某些事件。例如，当虫子变得非常巨大时，它可以变成一只蝴蝶，而不是继续变大。
- en: How do you decide what the endpoint is? How fast is too fast? Turn on the speed
    display and play the game for a bit. Try to find the point where it’s fast, difficult,
    and intense, but not *too* fast, difficult, and intense. Find the point *right
    before* the game would get too hard, and remember the speed variable number. For
    me, 7.5 feels like a good top speed.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如何决定终点在哪里？多快算是太快？打开速度显示，玩一会游戏。尝试找到一个既快速又困难且紧张的点，但又不至于*过于*快速、困难或紧张。找到*接近*游戏变得太难的那个点，记住速度变量的数字。对我来说，7.5似乎是一个合适的最高速度。
- en: We want the game ending to be big and splashy. When the player reaches the game’s
    end, they should know it and feel rewarded. But before we code it, let’s pick
    a new costume to represent the bug’s evolved form and add a little music to play
    during its transformation.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望游戏的结尾是壮观且令人印象深刻的。当玩家到达游戏的终点时，他们应该知道这一点，并感到自己得到了奖励。但是，在我们编写代码之前，让我们选择一个新的服装来代表虫子进化后的形态，并为其变身添加一些音乐。
- en: Choosing the Butterfly Costume
  id: totrans-203
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 选择蝴蝶服装
- en: Go to the bug’s **Costumes** tab. You can draw your own new costume for the
    bug if you want, such as a multicolored butterfly that is way bigger than the
    original bug (but still facing to the right!). For this example, I’ll pick a butterfly
    costume from Scratch’s built-in library.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 转到虫子的**服装**标签。如果你愿意，你可以为虫子绘制一个新的服装，例如一只比原始虫子大得多的多彩蝴蝶（但依然朝右！）。在这个例子中，我将从Scratch的内置库中选择一套蝴蝶服装。
- en: Hover over the costume menu and click the **Choose a Costume** button to bring
    up a menu of pictures. This should look similar to the Sound Library we picked
    the chomp effect from. Again, you can click the **Animals** category to make it
    easier to find the butterflies. I like `Butterfly2-b` because it’s the most colorful
    yet still weird looking. A weird bug would grow up into a weird butterfly, wouldn’t
    it?
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 将鼠标悬停在服装菜单上，然后点击**选择服装**按钮，弹出一个图片菜单。这个菜单应该类似于我们从中挑选“咀嚼效果”的声音库。你也可以点击**动物**类别，便于找到蝴蝶。我喜欢`Butterfly2-b`，因为它最具色彩感且依然有点奇怪。一个奇怪的虫子长成一只奇怪的蝴蝶，不是吗？
- en: '![Image](Images/f068-01.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f068-01.jpg)'
- en: '*Choosing a butterfly costume*'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '*选择蝴蝶服装*'
- en: Let’s pick some music to accompany the transformation. Again, we’ll dig up something
    from the Sound Library. Check out the **Loops** category to find a bunch of short
    music pieces. We’ll use the one called `dance magic`. It sounds like music you
    might hear while transforming into a butterfly.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为变身选择一些音乐。再次，我们将从声音库中找到一些短小的音乐片段。查看**Loops**类别，找到一个叫做`dance magic`的曲目。它听起来像是在变身成蝴蝶时会听到的音乐。
- en: Coding the Metamorphosis
  id: totrans-209
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写变形代码
- en: Using simple branching, we’ll code the transformation. When the bug eats a berry,
    we use a conditional to check whether the bug is fast and big enough to transform.
    If the bug hasn’t reached its size and speed limit yet, the game continues and
    the bug just gets bigger and faster. (We’ll use speed 7.5 to check whether it’s
    moving at that speed.) If it’s fast enough, we’ll broadcast the new message `evolve`.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 使用简单的分支，我们将编写变身的代码。当虫子吃掉一颗浆果时，我们通过条件语句来检查虫子的速度和大小是否足以进行变身。如果虫子还没有达到它的大小和速度限制，游戏将继续，虫子只会变得更大更快。（我们将使用速度7.5来检查它是否达到这个速度。）如果它足够快，我们将广播新的消息`evolve`。
- en: '![Image](Images/f069-01.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f069-01.jpg)'
- en: '*Turning your bug into a butterfly*'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '*将你的虫子变成蝴蝶*'
- en: As you can see, we made a `when I receive evolve` event to handle the actual
    transformation. Yes, this means that sprites can receive messages that they can
    also broadcast! We can use a broadcast to make a sprite run an event in the middle
    of another event. This `evolve` event changes the bug to the `butterfly` costume
    and sets its size back to `100%`. Otherwise, it would be super huge, because the
    bug is over double its starting size at this point!
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，我们创建了一个`当我收到evolve时`事件来处理实际的变身。是的，这意味着精灵可以接收它们也可以广播的消息！我们可以使用广播让一个精灵在另一个事件进行中的时候运行一个事件。这个`evolve`事件将虫子的服装改为`butterfly`，并将它的大小重置为`100%`。否则，虫子将变得超级巨大，因为此时虫子的大小是它初始大小的两倍多！
- en: Then the event sends the butterfly to the front. “Sending it to the front” means
    bringing it closer to the screen than the other objects. Think of a pile of photos
    sitting on your kitchen table. We want the butterfly to be in front of all the
    other sprites so it can soar over them on its majestic wings. If we don’t send
    it to the front, the clone berries and poops would look like they were in front
    of the butterfly, which would be odd.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，事件将蝴蝶发送到最前面。“将它送到最前面”意味着将它放到比其他物体更靠近屏幕的位置。想象一下，一堆照片放在你的厨房桌子上。我们希望蝴蝶能在所有其他精灵前面，这样它才能在它那雄伟的翅膀上飞翔。如果我们不把它送到最前面，克隆的浆果和便便看起来就像是在蝴蝶前面，这样就会显得很奇怪。
- en: '![Image](Images/f070-01.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f070-01.jpg)'
- en: Then the event changes the bug’s speed back to 0 (so it drifts gracefully instead
    of zooming superfast), sets a new variable called `evolved` to 1, and plays the
    `dance magic` tune.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，事件将虫子的速度改回0（这样它会优雅地飘动，而不是极速飞行），设置一个新变量`evolved`为1，并播放`dance magic`的音乐。
- en: The variable `evolved` keeps track of whether the game has been won. When you
    create the `evolved` variable, be sure it’s a `For all sprites` variable. We want
    every sprite in the game to be able to tell whether the game is over.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`evolved`变量跟踪游戏是否已获胜。当你创建`evolved`变量时，确保它是一个`For all sprites`类型的变量。我们希望游戏中的每个精灵都能知道游戏是否结束。'
- en: '![Image](Images/f070-02.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f070-02.jpg)'
- en: '*Creating the evolved variable*'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '*创建evolved变量*'
- en: We can also use the `evolved` variable to give the butterfly a cool color-changing
    effect. Under **Looks**, the `change color effect by` block changes how the sprite
    looks. You can set this block to do a bunch of different effects, like whirl,
    pixelate, and ghost, which makes a sprite see-through.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`evolved`变量来给蝴蝶添加一个酷炫的变色效果。在**外观**下，`change color effect by`块可以改变精灵的外观。你可以设置这个块来做各种不同的效果，比如旋转、像素化和幽灵效果，这使得精灵变得透明。
- en: To create a colorful butterfly, we’ll use the color option. This option changes
    all the colors of the sprite to other colors, similar to how we created the rainbow
    effect by cycling through the pen’s color.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创造一个五彩斑斓的蝴蝶，我们将使用颜色选项。这个选项将精灵的所有颜色改变为其他颜色，类似于我们通过循环使用笔的颜色来创建彩虹效果。
- en: '![Image](Images/f071-01.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f071-01.jpg)'
- en: '*Changing the butterfly’s color*'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '*改变蝴蝶的颜色*'
- en: In the bug’s main loop, use a conditional to check whether the `evolved` variable
    is equal to 1\. If it is, run the color effect. Normal movement, drawing, and
    bouncing off the edge of the screen should still happen, so we don’t want to change
    that.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在虫子的主循环中，使用条件语句检查`evolved`变量是否等于1。如果是，执行变色效果。正常的移动、绘图和碰撞屏幕边缘的行为仍然应该发生，所以我们不希望改变这些。
- en: It’s important to make sure your bug changes its costume back to its original,
    weird bug form during its setup phase. Add the `switch costume to costume1` block
    and the `set evolved to 0` block to the `when flag clicked` event. Both blocks
    will reset the variables that are changed in the butterfly ending. Otherwise,
    you could start the game as a butterfly when you restart the game!
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是确保虫子在设置阶段将其服装切换回原始的怪异虫子形态。将`switch costume to costume1`块和`set evolved to
    0`块添加到`when flag clicked`事件中。这两个块将重置蝴蝶结局中改变的变量。否则，当你重新启动游戏时，可能会从蝴蝶形态开始游戏！
- en: All right, try your game to see if it works. Can you get to your game’s ending
    and turn the bug into a butterfly?
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，试试你的游戏，看看它是否有效。你能到达游戏的结局并把虫子变成蝴蝶吗？
- en: '![Image](Images/f072-01.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f072-01.jpg)'
- en: '*Transformation complete!*'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '*变身完成！*'
- en: Changing the Butterfly’s Behavior
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改变蝴蝶的行为
- en: If you’re able to turn your bug into a butterfly, you’ll notice that the butterfly
    can still eat berries, poop, and get bigger or smaller. The butterfly is supposed
    to be the bug’s final form that transcends a bug’s mortal limitations. It’s also
    supposed to be flying in the air where it should no longer have to worry about
    poop or bad berries.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能够把虫子变成蝴蝶，你会注意到蝴蝶仍然可以吃浆果、拉屎，并且变大或变小。蝴蝶应该是虫子的最终形态，超越了虫子的生命极限。它也应该在空中飞翔，不再需要担心粪便或坏的浆果。
- en: Because we made `evolve` a *universal variable*, which is a variable that all
    objects can see, we can just add conditionals to berries and poop to prevent them
    from checking for collision with the bug after it has evolved. Here’s what the
    conditional looks like for the `poop` sprite.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们把`evolve`设为*通用变量*，即所有对象都能看到的变量，所以我们可以在浆果和粪便上添加条件，防止它们在虫子进化后继续检查与虫子的碰撞。以下是`poop`精灵的条件代码。
- en: We check whether the `evolved` variable is equal to `0`, which means that the
    bug has not yet evolved into a butterfly. Only *then* do we check for contact
    with the bug.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查`evolved`变量是否等于`0`，这意味着虫子还没有进化成蝴蝶。只有*在此之后*我们才会检查是否与虫子发生接触。
- en: '![Image](Images/f073-01.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/f073-01.jpg)'
- en: '*Checking whether the bug has turned into a butterfly*'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '*检查虫子是否变成蝴蝶*'
- en: 'You can use the same conditional on the berry: use one conditional to keep
    the original berry from making clones after the player has won. Use another conditional
    to keep clones from checking for contact with the bug after it has turned into
    a butterfly. Just make sure your blocks are nested correctly.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在浆果上使用相同的条件：用一个条件来防止原始浆果在玩家获胜后生成克隆，用另一个条件来防止克隆在虫子变成蝴蝶后继续与虫子发生接触。只要确保你的代码块正确嵌套。
- en: Most importantly, be sure that everything that should only happen before the
    bug has evolved is *inside* the branch instead of outside it.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，确保所有应该在虫子进化之前发生的事情都在分支内部，而不是外部。
- en: Adding a Starting Message
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加起始消息
- en: Now our game has an ending. But to *really* make it complete, let’s put something
    at the beginning, too. We’ll add a little message to let the player know what
    they should be doing, which is chowing down on those berries!
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的游戏有了一个结局。但要*真正*让它完整，我们也要在开始时加入一些东西。我们将添加一条小消息，告诉玩家他们应该做什么，那就是大快朵颐地吃莓果！
- en: Under **Looks**, you’ll find blocks that let our sprites say things in tiny
    word bubbles. Use one to give the player an introductory message when the flag
    is first clicked.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在**外观**下，你会找到一些代码块，让我们的精灵在小气泡中说话。使用这些代码块，在点击旗帜时给玩家显示一条介绍性消息。
- en: '![Image](Images/f074-01.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f074-01.jpg)'
- en: '*Adding a starting message*'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '*添加起始消息*'
- en: Again, because of timing, we’ll put this message in its own stack. If it was
    in the same stack as the main loop, the main loop wouldn’t start until the word
    bubble disappeared. The bug would just freeze until the message was gone instead
    of talking and moving at the same time, like a real hungry bug would.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 由于时间限制，我们将这条消息放入一个独立的代码块中。如果它和主循环放在同一个代码块里，主循环将不会开始，直到气泡消息消失。虫子将会冻结，直到消息消失，而不是像一只真正饥饿的虫子那样，一边说话一边移动。
- en: '![Image](Images/f074-02.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f074-02.jpg)'
- en: '*What the starting message looks like*'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '*起始消息的样子*'
- en: Optional Things to Try
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可选的尝试内容
- en: Here are some ideas for additional modifications to *Weird Bug Chowdown* if
    you want a challenge. All of them can be done using the skills you’ve learned
    so far. If you need a hint, open my version of the game in your web browser and
    click **See inside** to see the game’s inner workings. Click **Remix** to create
    and save your own copy that you can tinker with.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要一些挑战，下面是对*怪异虫子大吃特吃*的额外修改建议。所有这些都可以使用你目前所学的技能来完成。如果你需要提示，可以在你的网页浏览器中打开我的游戏版本，然后点击**查看内部**来查看游戏的内部结构。点击**重混**来创建并保存你自己的副本，你可以对其进行修改。
- en: '**Exercise 1: Animate the berries, and poops’ appearances and disappearances.**'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 1：为莓果和便便的出现和消失制作动画。**'
- en: Instead of suddenly appearing and disappearing, objects can appear gradually,
    shrink out of sight, or fade away. Instead of using costumes, try graphical effects,
    like the ghost effect or size changing. You could make a berry look like it’s
    warping in by having it start a few sizes larger than usual and then using a `repeat`
    block to make it smaller until it’s the normal size. (Recall that a sprite’s original
    size is always 100 percent.) A poop could disappear by shrinking until it’s gone.
    Be creative!
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 物体可以逐渐出现、缩小消失或渐渐消失，而不是突然出现和消失。除了使用服装外，还可以尝试图形效果，比如幽灵效果或大小变化。你可以让莓果看起来像是通过变大然后缩小来“扭曲”进来的，用`repeat`代码块让它逐渐变小，直到它恢复到正常大小。（回想一下，精灵的原始大小总是100%。）一坨便便也可以通过缩小消失，直到完全消失。发挥创意吧！
- en: '**Exercise 2: Show a message the first time the bug eats a bad berry, warning
    the player about them.**'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 2：在虫子第一次吃到坏莓果时显示一条消息，警告玩家这些莓果有问题。**'
- en: Add a message like “Yuck! Green berries have gone bad!” The trick is to have
    the message appear *only the first time* the bug eats a bad berry. Make sure the
    warning only happens on a bad berry, not on a poop! For style, you want the word
    balloon to come from the bug, not from the berry. You’ll probably want to use
    a variable to track whether the message has appeared yet and a broadcast message
    to tell the bug to produce the word balloon.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一条消息，如“呸！绿色莓果已经坏掉了！”技巧是让这条消息*仅在虫子第一次吃到坏莓果时*出现。确保警告只发生在坏莓果上，而不是便便上！为了风格，你希望文字气泡从虫子那里出现，而不是从莓果那里。你可能需要使用一个变量来跟踪消息是否已经出现过，并用广播消息告诉虫子显示文字气泡。
- en: What You Learned
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你学到了什么
- en: In this chapter, we covered some more advanced ideas. You learned how to make
    your own variables to keep track of stuff. You programmed your sprites to clone
    themselves so you could have multiple copies of the same sprite. By broadcasting
    messages, you gave sprites a way to communicate with each other. You also learned
    about time pressure and how to use it to make a game more exciting.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们讨论了一些更高级的想法。你学会了如何创建自己的变量来跟踪数据。你编程让精灵自我克隆，这样你就可以有多个相同的精灵副本。通过广播消息，你为精灵提供了一种相互通信的方式。你还了解了时间压力以及如何使用它来让游戏更加刺激。
- en: In the next chapter, we’ll talk about how to make larger games in Scratch, games
    with multiple levels and scenes. We’ll explore what those levels could look like.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将讨论如何在 Scratch 中制作更大型的游戏，包括拥有多个关卡和场景的游戏。我们将探索这些关卡可能是什么样的。
- en: Scratch is a great way to learn how to program. The more you learn about Scratch,
    the more prepared you’ll be for a “Serious Adult” programming language. But the
    basic ideas are the same. If you’re just interested in making cool games, Scratch
    is an excellent choice for doing that. Now let’s make some more neat Scratch games.
    See you in [Chapter 3](ch03.xhtml#ch03)!
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: Scratch 是学习编程的一个很好的方式。你了解 Scratch 的越多，越能为学习“严肃的成人”编程语言做好准备。但基本概念是一样的。如果你只是对制作酷炫游戏感兴趣，Scratch
    是一个非常优秀的选择。现在，让我们来制作一些更棒的 Scratch 游戏。我们在[第 3 章](ch03.xhtml#ch03)见！
