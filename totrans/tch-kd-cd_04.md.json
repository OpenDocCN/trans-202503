["```\nimport turtle\nt = turtle.Pen()\nt.circle(100) # This makes our first circle (pointing north)\nt.left(90)    # Then the turtle turns left 90 degrees\nt.circle(100) # This makes our second circle (pointing west)\nt.left(90)    # Then the turtle turns left 90 degrees\nt.circle(100) # This makes our third circle (pointing south)\nt.left(90)    # Then the turtle turns left 90 degrees\nt.circle(100) # This makes our fourth circle (pointing east)\n```", "```\n>>> list(range(10))\n```", "```\n>>> list(range(3))\n[0, 1, 2]\n>>> list(range(5))\n[0, 1, 2, 3, 4]\n```", "```\nfor x in range(4):\n```", "```\nimport turtle\nt = turtle.Pen()\nfor x in range(4):\n    t.circle(100)\n    t.left(90)\n```", "```\n   import turtle\n   t = turtle.Pen()\n➊ for x in range(**6**):\n➋     t.circle(100)\n➌     t.left(**60**)\n```", "```\n   import turtle\n   t = turtle.Pen()\n   # Ask the user for the number of circles in their rosette, default to 6\n➊ number_of_circles = int(turtle.numinput(\"Number of circles\",\n                                           \"How many circles in your rosette?\", 6))\n➋ for x in range(number_of_circles):\n➌     t.circle(100)\n➍     t.left(360/number_of_circles)\n```", "```\nwhile *condition*:\n   *indented statement(s)*\n```", "```\n   # Ask the user for their name\n➊ name = input(\"What is your name? \")\n   # Keep printing names until we want to quit\n➋ while name != \"\":\n       # Print their name 100 times\n➌     for x in range(100):\n          # Print their name followed by a space, not a new line\n➍        print(name, end = \" \")\n➎     print()  # After the for loop, skip down to the next line\n       # Ask for another name, or quit\n➏     name = input(\"Type another name, or just hit [ENTER] to quit: \")\n➐ print(\"Thanks for playing!\")\n```", "```\nfamily = [] # Set up an empty list for family names\n```", "```\n   import turtle     # Set up turtle graphics\n   t = turtle.Pen()\n   turtle.bgcolor(\"black\")\n   colors = [\"red\", \"yellow\", \"blue\", \"green\", \"orange\",\n          \"purple\", \"white\", \"brown\", \"gray\", \"pink\" ]\n➊ family = []      # Set up an empty list for family names\n   # Ask for the first name\n➋ name = turtle.textinput(\"My family\",\n                          \"Enter a name, or just hit [ENTER] to end:\")\n   # Keep asking for names\n➌ while name != \"\":\n      # Add their name to the family list\n➍    family.append(name)\n      # Ask for another name, or end\n      name = turtle.textinput(\"My family\",\n                          \"Enter a name, or just hit [ENTER] to end:\")\n  # Draw a spiral of the names on the screen\n  for x in range(100):\n➎    t.pencolor(colors[x%len(family)]) # Rotate through the colors\n➏    t.penup()                         # Don't draw the regular spiral lines\n➐    t.forward(x*4)                    # Just move the turtle on the screen\n➑    t.pendown()                       # Draw the next family member's name\n➒    t.write(family[x%len(family)], font = (\"Arial\", int((x+4)/4), \"bold\") )\n➓    t.left(360/len(family) + 2)       # Turn left for our spiral\n```", "```\n# This is our first loop, called the outer loop\nfor x in range(10):\n    # Things indented once will be done 10 times\n    # Next is our inner loop, or the nested loop\n    for y in range(10):\n        # Things indented twice will be done 100 (10*10) times!\n```", "```\n   import\n   turtle t = turtle.Pen()\n➊ t.penup()\n   turtle.bgcolor(\"black\")\n```", "```\nsides = int(turtle.numinput(\"Number of sides\",\n            \"How many sides in your spiral of spirals (2-6)?\", 4,2,6))\ncolors = [\"red\", \"yellow\", \"blue\", \"green\", \"purple\", \"orange\"]\n```", "```\n➋ for m in range(100):\n      t.forward(m*4)\n➌     position = t.position() # Remember this corner of the spiral\n➍     heading = t.heading()   # Remember the direction we were heading\n```", "```\n➎     for n in range(int(m/2)):\n           t.pendown()\n           t.pencolor(colors[n%sides])\n           t.forward(2*n)\n           t.right(360/sides - 2)\n           t.penup()\n➏     t.setx(position[0])     # Go back to the big spiral's x location\n➐     t.sety(position[1])     # Go back to the big spiral's y location\n➑     t.setheading(heading)   # Point in the big spiral's heading\n➒     t.left(360/sides + 2)   # Aim at the next point on the big spiral\n```", "```\nimport turtle\nt = turtle.Pen()\nt.penup()\nturtle.bgcolor(\"black\")\n# Ask the user for the number of sides, default to 4, min 2, max 6\nsides = int(turtle.numinput(\"Number of sides\",\n            \"How many sides in your spiral of spirals? (2-6)\", 4,2,6))\ncolors = [\"red\", \"yellow\", \"blue\", \"green\", \"purple\", \"orange\"]\n# Our outer spiral loop\nfor m in range(100):\n    t.forward(m*4)\n    position = t.position() # Remember this corner of the spiral\n    heading = t.heading()   # Remember the direction we were heading\n    print(position, heading)\n    # Our \"inner\" spiral loop\n    # Draws a little spiral at each corner of the big spiral\n    for n in range(int(m/2)):\n        t.pendown()\n        t.pencolor(colors[n%sides])\n        t.forward(2*n)\n        t.right(360/sides - 2)\n        t.penup()\n    t.setx(position[0])     # Go back to the big spiral's x location\n    t.sety(position[1])     # Go back to the big spiral's y location\n    t.setheading(heading)   # Point in the big spiral's heading\n    t.left(360/sides + 2)   # Aim at the next point on the big spiral\n```"]