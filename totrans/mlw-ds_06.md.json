["```\ndef logistic_regression(compressed_data, suspicious_calls, learned_parameters): ➊\ncompressed_data = compressed_data * learned_parameters[\"compressed_data_weight\"] ➋\n    suspicious_calls = suspicious_calls * learned_parameters[\"suspicious_calls_weight\"]\nscore = compressed_data + suspicious_calls + bias ➌\n    return logistic_function(score)\n\ndef logistic_function(score): ➍\n    return 1/(1.0+math.e**(-score))\n```", "```\nlogistic_function(feature1_weight * feature1 + feature2_weight*feature2 + bias)\n```", "```\nlogistic_function(feature1 * feature1_weight + feature2 * feature2_weight +\nfeature3 * feature3_weight ... + bias)\n```", "```\n   tree = Tree()\n   def add_question(training_examples):\n    ➊ question = pick_best_question(training_examples)\n    ➋ uncertainty_yes,yes_samples=ask_question(question,training_examples,\"yes\")\n    ➌ uncertainty_no,no_samples=ask_question(question,training_examples,\"no\")\n    ➍ if not uncertainty_yes < MIN_UNCERTAINTY:\n          add_question(yes_samples)\n    ➎ if not uncertainty_no < MIN_UNCERTAINTY:\n          add_question(no_samples)\n➏ add_question(training_examples)\n```"]