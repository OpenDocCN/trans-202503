- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting to Conscious Competence
  prefs: []
  type: TYPE_NORMAL
- en: 'Martin M. Broadwell defines four stages of competence in *Teaching for Learning*:
    unconscious incompetence, conscious incompetence, conscious competence, and unconscious
    competence. Specifically, *unconscious incompetence* means you are unable to perform
    a task correctly and are unaware of the gap. *Conscious incompetence* means you
    are unable to perform a task correctly but are aware of the gap. *Conscious competence*
    means you are capable of performing a task with effort. Finally, *unconscious
    competence* means you are capable of performing a task effortlessly.'
  prefs: []
  type: TYPE_NORMAL
- en: All engineers start out consciously or unconsciously incompetent. Even if you
    know everything about software engineering (an impossible task), you’re going
    to have to learn company-specific processes and rules. You’re also going to have
    to learn practical skills like those covered in this book. Your goal is to get
    to conscious competence as quickly as possible.
  prefs: []
  type: TYPE_NORMAL
- en: The bulk of this chapter discusses learning on your own and getting help. Learning
    outside of school is a skill; we offer some suggestions for developing an independent
    learning habit. We also provide tips for balancing between asking for help too
    much and not enough. The chapter finishes by discussing impostor syndrome and
    the Dunning–Kruger effect, which can cause new engineers to feel under- or overconfident
    and limit their growth. We explain how to detect and combat both of these extremes.
    Practicing independent learning and asking effective questions while avoiding
    traps of self-doubt and overconfidence will get you to conscious competence quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Learning to Learn
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Learning will help you become a competent engineer and flourish in the years
    to come. The field of software engineering is constantly evolving; whether you
    are a new grad or a seasoned veteran, if you’re not learning, you’re falling behind.
  prefs: []
  type: TYPE_NORMAL
- en: This section is a digest of various approaches to learning. Don’t try to do
    everything that’s listed in this chapter at the same time! That’s a recipe for
    burnout. Guard your personal time—continued growth is important, but spending
    every waking moment on work is unhealthy. Choose from the list based on your circumstances
    and natural inclinations.
  prefs: []
  type: TYPE_NORMAL
- en: Front-Load Your Learning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spend your first few months on the job learning how everything works. This will
    help you participate in design discussions, on-call rotations, operational issues,
    and code reviews. Front-loaded learning will be uncomfortable—you’ll want to ship
    software, and taking time to read documentation and fiddle with tools will slow
    you down. Don’t worry; everyone expects you to spend time ramping up. Front-loaded
    learning is an investment, one that is so valuable that many companies explicitly
    design a learning curriculum for new hires. Facebook, famously, has a six-week
    “boot camp” for new engineers.
  prefs: []
  type: TYPE_NORMAL
- en: Learn by Doing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Front-loaded learning does not mean sitting around reading documentation all
    day. We learn a little by reading and a lot by doing. You should write and ship
    code. Shipping code for the first time is scary—what if you break something?—but
    managers won’t usually put you in a situation where you can do serious damage
    (though sometimes new hires do high-risk work when there’s no alternative). Do
    your best to understand the impact of your work, and act with an appropriate level
    of caution. You can be less cautious, and thus faster, writing a unit test than
    you can be altering indexes on a high-traffic database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Mistakes are unavoidable. Being a software engineer is hard, and we’re all
    expected to fail sometimes. Everyone knows and expects this. It’s your manager’s
    and team’s job to maintain safety nets to make these failures nonfatal. If and
    when you fail, don’t beat yourself up: write down lessons learned, and move on.'
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with Code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Run experiments to learn how code truly works. Documentation goes out-of-date.
    Coworkers forget things. Experiments are safe since you can run them outside of
    production, and nonproduction experiments allow for more invasive techniques.
    For example, you might know that a method is invoked but be unable to determine
    how it’s reached. Experiment by throwing an exception, printing a stack trace,
    or attaching a debugger to see the call path.
  prefs: []
  type: TYPE_NORMAL
- en: Debuggers are your best friend when experimenting. You can use them to pause
    running code and see running threads, stack traces, and variable values. Attach
    a debugger, trigger an event, and step through the code to see how the code processes
    the event.
  prefs: []
  type: TYPE_NORMAL
- en: Although debuggers are powerful, sometimes the easiest way to understand a behavior
    is a few well-placed log lines or print statements. You are probably familiar
    with this method; just be aware that in complex scenarios, particularly with multithreaded
    applications, print debugging may be misleading. Operating systems will buffer
    writes to standard output, delaying what you see in the console, and multiple
    threads writing to standard output will interleave their messages.
  prefs: []
  type: TYPE_NORMAL
- en: One silly but surprisingly useful technique is to add a distinctive print statement
    at the beginning of the program’s execution so you can easily tell if you are
    running your modified program instead of the original. You’ll save yourself hours
    of chasing mysterious behaviors that come down to the unmodified program being
    invoked instead of the one you are changing.
  prefs: []
  type: TYPE_NORMAL
- en: Read
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Spend a portion of each week reading. There are many different sources: team
    documentation, design documents, code, ticket backlogs, books, papers, and technical
    sites. Don’t try to read everything all at once. Start with team documentation
    and design documents. These will give you a broad overview of how things fit together.
    Pay special attention to discussions on trade-offs and context. You can then take
    a deep dive into subsystems that are relevant to your first few tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As Ron Jeffries says, “Code never lies. Comments sometimes do” ([https://ronjeffries.com/articles/020-invaders-70ff/i-77/](https://ronjeffries.com/articles/020-invaders-70ff/i-77/)).
    Read code—it doesn’t always match the design document! Not just your codebase:
    read high-quality open source code, particularly libraries you use. Don’t read
    code front to back like a novel: use your IDE to navigate through the codebase.
    Diagram control flow and states for key operations. Dig into the code’s data structures
    and algorithms. Pay attention to edge case handling. Keep an eye out for idioms
    and style—learn the “local dialect.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pending work is tracked in *tickets* or *issues*. Read through team tickets
    to see what everyone is working on and what is coming up. The backlog is a good
    place to find newbie tickets, too. Old tickets fall into three broad categories:
    no longer relevant, useful but minor, and important but too large to tackle at
    the moment. Figure out which of these categories the tickets you are looking at
    fall into.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Published and online resources complement each other. Books and papers are
    great for going deep into a subject. They are reliable but more dated. Online
    resources such as Twitter, blogs, and newsletters are the opposite: less trustworthy
    but great for keeping up with trends. Just remember to pump the brakes before
    implementing the latest ideas from Hacker News: it’s good to be boring (more on
    this in Chapter 3).'
  prefs: []
  type: TYPE_NORMAL
- en: Join a reading group to keep up with research in academia and industry. Some
    companies have internal reading groups—ask around. If your company does not, consider
    starting one. You can also join a local Papers We Love chapter; these groups read
    and discuss computer science papers regularly.
  prefs: []
  type: TYPE_NORMAL
- en: Watch Presentations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can learn a lot from a good presentation. Start with recorded video presentations
    from the past—both internal company talks and external YouTube videos. Watch tutorials,
    tech talks, and conference presentations. Ask around to find good content. You
    can usually watch videos at 1.5 or even 2x speed to save time, but do not watch
    passively. Take notes to help with retention, and follow up on any unfamiliar
    concepts or terms.
  prefs: []
  type: TYPE_NORMAL
- en: Go to *brown bags* and tech talks if your company offers them. These informal
    presentations are hosted on-site, so they’re easy to get to. They’re also internal
    to your company, so you’ll get really relevant information.
  prefs: []
  type: TYPE_NORMAL
- en: Attend Meetups and Conferences (Sparingly)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Conferences and meetups are good for networking and discovering new ideas. They
    are worth attending occasionally, but don’t overdo it. The signal-to-noise ratio—the
    ratio of relevant content to all content—is often low, and many presentations
    are available online afterward.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are roughly three types of conferences: academic conferences, grassroots
    interest group gatherings, and vendor showcases. Academic conferences have great
    content, but reading papers and going to smaller, more focused get-togethers is
    usually better. Interest-based conferences are great for getting practical tips
    and meeting experienced practitioners; check out a few. Vendor conferences are
    the biggest and most visible. They are marketing vehicles for large tech companies
    and not great for learning. They are fun to attend with your coworkers, but more
    than one per year is likely a waste of time. Ask around to find the best ones.
    Keep in mind that some employers will pay for the tickets, travel, and lodging.'
  prefs: []
  type: TYPE_NORMAL
- en: Shadow and Pair with Experienced Engineers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Shadowing* is following another person as they perform a task. The shadower
    is an active participant: they take notes and ask questions. Shadowing a senior
    engineer is a great way to learn a new skill. To get the most out of it, set up
    time before and after the shadowing session for planning and retrospection.'
  prefs: []
  type: TYPE_NORMAL
- en: Reverse roles when you are ready. Have a senior engineer shadow you. Like you,
    they should provide feedback. They will also act as a safety net if things go
    wrong. This is a gentle way to ease into scary situations like interviewing.
  prefs: []
  type: TYPE_NORMAL
- en: '*Pair programming* is also a great way to learn. Two engineers write code together,
    taking turns doing the typing. It takes some getting used to, but it’s one of
    the fastest ways to learn from each other. Advocates of this technique also claim
    that it raises code quality. If your teammates are willing, we highly recommend
    trying it. Pair programming isn’t just for junior engineers, either. Teammates
    of all levels can benefit from it.'
  prefs: []
  type: TYPE_NORMAL
- en: Some companies also encourage shadowing nonengineering roles. Shadowing customer
    support and sales demos is an eye-opening way to learn about your customers. Write
    down and share your observations. Work with your manager and senior engineers
    to prioritize ideas inspired by the experience.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with Side Projects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Working on side projects will expose you to new technologies and ideas. You
    can skip the “software engineering stuff” (testing, operations, code reviews,
    and so on) when you’re working on your own. Ignoring these aspects lets you learn
    new technologies quickly; just don’t forget about the “real” stuff at work.
  prefs: []
  type: TYPE_NORMAL
- en: You can also participate in open source projects. Most projects welcome contributions.
    This is a great way to learn and build professional connections. You might even
    find future jobs through open source communities. Keep in mind that these projects
    are often run by volunteers. Don’t expect the same turnaround speed you get at
    work. Sometimes people will get busy and disappear for a bit.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t choose a project based on what you think you need to learn. Find problems
    you are interested in solving, and solve those problems using the tools you want
    to learn. A goal that intrinsically motivates you will keep you engaged longer,
    and you’ll learn more.
  prefs: []
  type: TYPE_NORMAL
- en: Companies have rules about outside work. Ask for your company’s policy. Don’t
    use company resources (your company laptop) to work on side projects. Don’t work
    on side projects at work. Avoid side projects that compete with your company.
    Clarify whether you can contribute to open source at work or at home. Some companies
    will want you to contribute only under special work accounts. Others will want
    you to use personal accounts only. Understand whether you retain ownership over
    your side projects. Ask your manager if you need to get approvals. Getting clarity
    will save you frustration in the long run.
  prefs: []
  type: TYPE_NORMAL
- en: Asking Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All engineers should ask questions—it’s a critical part of learning. New engineers
    worry about bothering teammates and try to figure everything out themselves instead.
    This is slow and inefficient. Asking questions effectively will help you learn
    quickly without irritating others. Use these three steps: do research, ask clear
    questions, and time your questions appropriately.'
  prefs: []
  type: TYPE_NORMAL
- en: Do Your Research
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Try to find the answer yourself. Even if your colleagues know the answer, put
    in the effort—you’ll learn more. If you don’t find the answer, your research will
    still be your starting point when you ask for help.
  prefs: []
  type: TYPE_NORMAL
- en: 'Don’t just search the internet. Information lives in documentation, wikis,
    READMEs, source code, and bug trackers. If your question is about code, try turning
    it into a unit test that demonstrates the problem. It’s possible your question
    has been asked before: check the mailing list or chat group archives. The information
    you gather will lead to ideas that you can test. If you can’t find any leads,
    try to work it out yourself by experimenting. Keep track of where you looked,
    what you did, why you did it, what happened, and what you learned.'
  prefs: []
  type: TYPE_NORMAL
- en: Timebox
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Limit how long you research a question. Set the limit before you start your
    research to encourage discipline and prevent diminishing returns (research will
    eventually stop being productive). Consider when you need to know the answer,
    and then leave enough time to ask a question, get an answer, and act on what you
    learn.
  prefs: []
  type: TYPE_NORMAL
- en: Once you reach the end of your timebox, ask for help. Only exceed the timebox
    if you are making good progress. If you go past your first timebox, set another.
    If you are still not sure of the answer after the second timebox, cut your losses
    and ask for help. Stopping takes discipline and practice—hold yourself accountable.
  prefs: []
  type: TYPE_NORMAL
- en: Show Your Work
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Describe what you know when asking a question. Don’t just share your raw notes.
    Outline what you’ve tried and discovered succinctly. This signals that you have
    spent time trying to figure out the problem yourself. It also gives others a starting
    point for their answer.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a poor way to ask a question:'
  prefs: []
  type: TYPE_NORMAL
- en: Hey Alice,
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Any idea why testKeyValues is failing in TestKVStore? It really slows down our
    builds to rerun this.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Thanks!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Pankaj
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This gives Alice little to go on. It sounds vaguely like Pankaj is blaming
    Alice for something, which is probably not what he intended. It’s a little lazy.
    Compare this with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Hey Alice,
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I’m having trouble figuring out why testKeyValues is failing in TestKVStore
    (in the DistKV repo). Shaun pointed me your way. I’m hoping you can help.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The test fails for me about every third execution; it seems random. I tried
    running it in isolation, and it’s still failing, so I don’t think it’s an interaction
    between tests. Shaun ran the test in a loop on his machine but was unable to reproduce
    it. I don’t see anything obvious in the source code to explain the failure. It
    seems like some kind of race condition. Any thoughts?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There is no terrible urgency around this as I’m told this is unlikely to be
    affecting production. Still, the flapping test costs us 20–30 minutes every time
    this happens, so I’d love to figure out how to fix it. I’ve attached logs that
    show failures and all of my current environment settings, just in case.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Thanks!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Pankaj
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In the second example, Pankaj gives some context, describes the problem, tells
    Alice what he’s already tried, and asks for help. He also notes both the impact
    and the level of urgency. It is succinct but has detailed information attached
    so Alice doesn’t need to hunt for it. Alice will help Pankaj out. She will also
    remember that Pankaj is thorough. Requests like this will build Pankaj’s credibility
    in the eyes of his colleagues.
  prefs: []
  type: TYPE_NORMAL
- en: It takes more effort to write the second message. It’s worth it. Put in the
    work.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t Interrupt
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just like you, others are trying to get things done; they need to focus. When
    they’re in the zone, don’t interrupt them. Even if the question is easy. Even
    if you know they know the answer. Even if you’re blocked. Unless there is a critical
    issue, really, don’t interrupt them.
  prefs: []
  type: TYPE_NORMAL
- en: Companies have different conventions to signal “Don’t interrupt.” Headphones,
    ear plugs, or earmuffs are universal. There’s some confusion about “lounge spaces.”
    Some consider working somewhere other than their desk sacrosanct—they don’t want
    to be found. Others interpret engineers in shared spaces as “available to interrupt.”
    Make sure you understand your company’s convention!
  prefs: []
  type: TYPE_NORMAL
- en: Walking up and talking to someone forces them to respond. Even if they just
    reply that they’re busy, you’ve already interrupted and caused them to lose focus.
    You’re not stuck if the person you need is busy. You need to find an asynchronous
    way to communicate.
  prefs: []
  type: TYPE_NORMAL
- en: Prefer Multicast, Asynchronous Communication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In networking, *multicasting* means sending a message to a group instead of
    an individual destination. *Asynchronous* means a message that can be processed
    later, rather than requiring an immediate response. These concepts apply to human
    communication, too.
  prefs: []
  type: TYPE_NORMAL
- en: Post questions so that multiple people can respond (multicast) at their own
    pace (asynchronous). Do this in a way that’s visible to everyone so it’s apparent
    when you’ve been helped. The answer will also be discoverable, so others can find
    the discussion later.
  prefs: []
  type: TYPE_NORMAL
- en: 'This usually means using a group mailing list or group chat (for example, Dmitriy’s
    company has a #sw-helping-sw channel). Use shared forums even if you need an answer
    from a specific person; you can mention their name in your post.'
  prefs: []
  type: TYPE_NORMAL
- en: Batch Your Synchronous Requests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Chat and email are great for simple questions, but complex discussions don’t
    work asynchronously. In-person conversations are “high bandwidth” and “low latency.”
    You can cover a lot quickly. This is costly, though. Interrupting your coworkers
    affects their productivity. Avoid this by setting up dedicated time with your
    tech lead or manager for nonurgent questions. Schedule a meeting, or use “office
    hours” if they exist. Write down questions and hold them until the meeting. You
    can do your research in the meantime. Your list will grow as other questions arise.
    This is good. Include the list in your meeting agenda. Don’t rely on your memory,
    and don’t come unprepared.
  prefs: []
  type: TYPE_NORMAL
- en: Cancel the meeting if you have no questions. If you find yourself canceling
    repeatedly, ask whether the meeting is still useful—if not, unschedule it.
  prefs: []
  type: TYPE_NORMAL
- en: Overcoming Growth Obstacles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Knowing how to learn and ask questions isn’t enough. You must also avoid traps
    that slow growth. Two common impediments, impostor syndrome and the Dunning–Kruger
    effect, affect many engineers. You will grow faster if you understand what these
    phenomena are and how to overcome them.
  prefs: []
  type: TYPE_NORMAL
- en: Impostor Syndrome
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Most new engineers start off consciously incompetent. There’s a lot to learn,
    and everyone else seems far ahead. You might worry that you don’t belong or that
    landing your job was luck. It’s easy to be hard on yourself—we’ve experienced
    this ourselves. No matter how often we tell engineers they’re doing a great job,
    some don’t believe it, even when they’re getting promoted! It makes them uncomfortable.
    They say they’ve gotten lucky, they don’t deserve recognition, or the promotion
    criteria are too lax. This is *impostor syndrome*. It was first described in a
    1978 study by Drs. Pauline Rose Clance and Suzanne Ament Imes, “The Impostor Phenomenon
    in High Achieving Women: Dynamics and Therapeutic Intervention.”'
  prefs: []
  type: TYPE_NORMAL
- en: Despite outstanding academic and professional accomplishments, women who experience
    the impostor phenomenon persist in believing that they are really not bright and
    have fooled anyone who thinks otherwise. Numerous achievements, which one might
    expect to provide ample objective evidence of superior intellectual functioning,
    do not appear to affect the impostor belief.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If this resonates with you, know that self-doubt is common. With effort, these
    feelings will pass. You can move things along with several strategies: awareness,
    reframing, and talking to colleagues.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Impostor syndrome is self-reinforcing. Every error is seen as proof of incompetence,
    while every success is evidence of a good “faker.” Once an individual enters this
    cycle, it is difficult to get out of. Awareness helps: if you watch for this pattern,
    you can consciously break it. When you accomplish something, it’s because you
    actually did it—you aren’t just getting lucky.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Don’t dismiss compliments and accomplishments. Write them down, even the small
    stuff. Your peers are capable, and if they say something positive, they have good
    reason to. Practice reframing negative thoughts: “I had to bug Daria to help with
    a race condition” becomes “I reached out to Daria, and now I know how to resolve
    race conditions!” Plan what you want to accomplish and notice when you achieve
    a goal. This will build confidence.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting feedback also helps. Ask someone you respect to tell you how you’re
    doing. This can be your manager, a mentor, or just an engineer you look up to.
    The important thing is that you trust them and feel safe talking to them about
    self-doubt.
  prefs: []
  type: TYPE_NORMAL
- en: Therapy might also help. Use it to gain comfort with your strengths and work
    through short-term challenges. Impostor syndrome, and the anxiety and depression
    that can accompany it, is a complex topic. If you are struggling, consider talking
    to a few therapists to find one whose approach works for you.
  prefs: []
  type: TYPE_NORMAL
- en: The Dunning–Kruger Effect
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Opposite to impostor syndrome is the *Dunning–Kruger effect*, a cognitive bias
    where people believe that they’re more capable than they actually are. Unconsciously
    incompetent engineers don’t know what they don’t know, so they can’t accurately
    evaluate their performance (or anyone else’s). They are too confident; they storm
    around critiquing the company’s technical stack, complaining about code quality,
    and belittling design. They are certain that their ideas are right. Their default
    mode is to push back on or disregard feedback. Rejecting all suggestions serves
    as a giant red light: complete confidence is the sign of a blind spot.'
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, the Dunning–Kruger effect is less common among new engineers. There
    are many ways to fight it. Start by consciously developing curiosity. Be open
    to being wrong. Find a respected engineer, ask how you’re doing, and truly listen.
    Talk over design decisions, especially those you don’t agree with. Ask why the
    decisions were made. Cultivate a mindset of trade-offs, not of right and wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Do’s and Don’ts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| **Do’s** | **Don’ts** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **DO** play and experiment with code. | **DON’T** just churn out code.  |'
  prefs: []
  type: TYPE_TB
- en: '| **DO** join meetups, online communities, interest groups, and mentorship
    programs.  | **DON’T** overdo conferences. |'
  prefs: []
  type: TYPE_TB
- en: '| **DO** read papers and blogs. | **DON’T** be afraid to ask questions. |'
  prefs: []
  type: TYPE_TB
- en: '| **DO** prefer multicast and asynchronous communication. |  |'
  prefs: []
  type: TYPE_TB
- en: '| **DO** shadow interviews and on-call rotations. |  |'
  prefs: []
  type: TYPE_TB
- en: Level Up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Dave Hoover and Adewale Oshineye’s *Apprenticeship Patterns: Guidance for the
    Aspiring Software Craftsman* (O’Reilly Media, 2009) is a great collection of “patterns”
    one can use to get started in a new environment, seek guidance, learn skills deeply,
    and overcome common hurdles.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For more on asking questions, we recommend *All You Have to Do Is Ask: How
    to Master the Most Important Skill for Success* by Wayne Baker (Currency, 2020).
    This book is divided into two parts. The first section discusses the value of
    asking questions and why it’s hard. The second half of the book is a toolkit for
    asking questions effectively.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For more on pair programming, the classic text is *Extreme Programming Explained:
    Embrace Change* by Kent Beck and Cynthia Andres (Addison-Wesley, 2004). The book
    covers much more than just pair programming. If you are interested in a shorter
    read, the article “On Pair Programming” by Birgitta Böckeler and Nina Siessegger
    at [https://www.martinfowler.com/articles/on-pair-programming.html](https://www.martinfowler.com/articles/on-pair-programming.html)
    is an excellent practical guide.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you find that the impostor syndrome or Dunning–Kruger sections resonate,
    check out *Presence: Bringing Your Boldest Self to Your Biggest Challenges* by
    Amy Cuddy (Little, Brown & Company, 2016). Many common causes of both work anxiety
    and overconfidence are covered in the book.'
  prefs: []
  type: TYPE_NORMAL
