- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting to Conscious Competence
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'Martin M. Broadwell defines four stages of competence in *Teaching for Learning*:
    unconscious incompetence, conscious incompetence, conscious competence, and unconscious
    competence. Specifically, *unconscious incompetence* means you are unable to perform
    a task correctly and are unaware of the gap. *Conscious incompetence* means you
    are unable to perform a task correctly but are aware of the gap. *Conscious competence*
    means you are capable of performing a task with effort. Finally, *unconscious
    competence* means you are capable of performing a task effortlessly.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: All engineers start out consciously or unconsciously incompetent. Even if you
    know everything about software engineering (an impossible task), you’re going
    to have to learn company-specific processes and rules. You’re also going to have
    to learn practical skills like those covered in this book. Your goal is to get
    to conscious competence as quickly as possible.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: The bulk of this chapter discusses learning on your own and getting help. Learning
    outside of school is a skill; we offer some suggestions for developing an independent
    learning habit. We also provide tips for balancing between asking for help too
    much and not enough. The chapter finishes by discussing impostor syndrome and
    the Dunning–Kruger effect, which can cause new engineers to feel under- or overconfident
    and limit their growth. We explain how to detect and combat both of these extremes.
    Practicing independent learning and asking effective questions while avoiding
    traps of self-doubt and overconfidence will get you to conscious competence quickly.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Learning to Learn
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Learning will help you become a competent engineer and flourish in the years
    to come. The field of software engineering is constantly evolving; whether you
    are a new grad or a seasoned veteran, if you’re not learning, you’re falling behind.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: This section is a digest of various approaches to learning. Don’t try to do
    everything that’s listed in this chapter at the same time! That’s a recipe for
    burnout. Guard your personal time—continued growth is important, but spending
    every waking moment on work is unhealthy. Choose from the list based on your circumstances
    and natural inclinations.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Front-Load Your Learning
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spend your first few months on the job learning how everything works. This will
    help you participate in design discussions, on-call rotations, operational issues,
    and code reviews. Front-loaded learning will be uncomfortable—you’ll want to ship
    software, and taking time to read documentation and fiddle with tools will slow
    you down. Don’t worry; everyone expects you to spend time ramping up. Front-loaded
    learning is an investment, one that is so valuable that many companies explicitly
    design a learning curriculum for new hires. Facebook, famously, has a six-week
    “boot camp” for new engineers.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Learn by Doing
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Front-loaded learning does not mean sitting around reading documentation all
    day. We learn a little by reading and a lot by doing. You should write and ship
    code. Shipping code for the first time is scary—what if you break something?—but
    managers won’t usually put you in a situation where you can do serious damage
    (though sometimes new hires do high-risk work when there’s no alternative). Do
    your best to understand the impact of your work, and act with an appropriate level
    of caution. You can be less cautious, and thus faster, writing a unit test than
    you can be altering indexes on a high-traffic database.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 前期学习并不意味着整天坐在那阅读文档。我们通过阅读学到一点，通过实践学到很多。你应该编写并发布代码。第一次发布代码可能很吓人——如果出问题了怎么办？——但管理者通常不会让你处于一个可能造成严重损害的情境中（尽管有时新员工在没有其他选择的情况下会做高风险的工作）。尽力理解你工作的影响，并以适当的谨慎行事。你可以比修改高流量数据库的索引时更加不谨慎，也因此写单元测试会更快。
- en: 'Mistakes are unavoidable. Being a software engineer is hard, and we’re all
    expected to fail sometimes. Everyone knows and expects this. It’s your manager’s
    and team’s job to maintain safety nets to make these failures nonfatal. If and
    when you fail, don’t beat yourself up: write down lessons learned, and move on.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 错误是不可避免的。作为一名软件工程师并不容易，我们都难免会失败。每个人都知道并且预料到这一点。管理者和团队的责任是保持安全网，确保这些失败不会致命。如果你失败了，不要自责：写下从中学到的教训，然后继续前进。
- en: Experiment with Code
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 进行代码实验
- en: Run experiments to learn how code truly works. Documentation goes out-of-date.
    Coworkers forget things. Experiments are safe since you can run them outside of
    production, and nonproduction experiments allow for more invasive techniques.
    For example, you might know that a method is invoked but be unable to determine
    how it’s reached. Experiment by throwing an exception, printing a stack trace,
    or attaching a debugger to see the call path.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 进行实验来了解代码如何真正工作。文档会过时，同事们也会忘记一些事情。实验是安全的，因为你可以在生产环境之外进行，它们允许使用更具侵入性的方法。例如，你可能知道某个方法被调用了，但无法确定它是如何被调用的。可以通过抛出异常、打印堆栈跟踪或附加调试器来查看调用路径，进行实验。
- en: Debuggers are your best friend when experimenting. You can use them to pause
    running code and see running threads, stack traces, and variable values. Attach
    a debugger, trigger an event, and step through the code to see how the code processes
    the event.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器是你进行实验时最好的朋友。你可以用它们暂停正在运行的代码，查看运行中的线程、堆栈跟踪和变量值。附加一个调试器，触发一个事件，逐步调试代码，看看代码如何处理这个事件。
- en: Although debuggers are powerful, sometimes the easiest way to understand a behavior
    is a few well-placed log lines or print statements. You are probably familiar
    with this method; just be aware that in complex scenarios, particularly with multithreaded
    applications, print debugging may be misleading. Operating systems will buffer
    writes to standard output, delaying what you see in the console, and multiple
    threads writing to standard output will interleave their messages.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管调试器很强大，有时理解某个行为最简单的方法是通过几行精心设计的日志或打印语句。你可能已经很熟悉这种方法；只是要注意，在复杂场景中，特别是多线程应用程序中，打印调试可能会产生误导。操作系统会缓存标准输出的写入，导致你在控制台中看到的内容被延迟，而多个线程写入标准输出时，它们的信息会交错显示。
- en: One silly but surprisingly useful technique is to add a distinctive print statement
    at the beginning of the program’s execution so you can easily tell if you are
    running your modified program instead of the original. You’ll save yourself hours
    of chasing mysterious behaviors that come down to the unmodified program being
    invoked instead of the one you are changing.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个愚蠢但出奇有用的技巧是在程序执行开始时添加一个独特的打印语句，这样你就能轻松区分自己运行的是修改后的程序，而不是原始程序。这样你可以节省数小时不必要地追踪那些神秘的行为，这些行为往往是因为调用了未修改的程序，而不是你正在更改的版本。
- en: Read
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读
- en: 'Spend a portion of each week reading. There are many different sources: team
    documentation, design documents, code, ticket backlogs, books, papers, and technical
    sites. Don’t try to read everything all at once. Start with team documentation
    and design documents. These will give you a broad overview of how things fit together.
    Pay special attention to discussions on trade-offs and context. You can then take
    a deep dive into subsystems that are relevant to your first few tasks.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每周都花一些时间阅读。有很多不同的来源：团队文档、设计文档、代码、任务单积压、书籍、论文和技术网站。不要试图一次性读完所有内容。先从团队文档和设计文档开始，这些文档能帮助你全面了解事物如何结合在一起。特别要关注有关权衡和上下文的讨论。之后，你可以深入研究与你的前几个任务相关的子系统。
- en: 'As Ron Jeffries says, “Code never lies. Comments sometimes do” ([https://ronjeffries.com/articles/020-invaders-70ff/i-77/](https://ronjeffries.com/articles/020-invaders-70ff/i-77/)).
    Read code—it doesn’t always match the design document! Not just your codebase:
    read high-quality open source code, particularly libraries you use. Don’t read
    code front to back like a novel: use your IDE to navigate through the codebase.
    Diagram control flow and states for key operations. Dig into the code’s data structures
    and algorithms. Pay attention to edge case handling. Keep an eye out for idioms
    and style—learn the “local dialect.”'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正如Ron Jeffries所说：“代码永远不会撒谎，注释有时会”（[https://ronjeffries.com/articles/020-invaders-70ff/i-77/](https://ronjeffries.com/articles/020-invaders-70ff/i-77/)）。阅读代码——它并不总是与设计文档一致！不仅仅是你的代码库：阅读高质量的开源代码，特别是你使用的库。不要像读小说一样从头到尾读代码：使用IDE来浏览代码库。为关键操作绘制控制流和状态图。深入了解代码的数据结构和算法。注意边缘案例的处理。留意习惯用法和风格——学习“本地方言”。
- en: 'Pending work is tracked in *tickets* or *issues*. Read through team tickets
    to see what everyone is working on and what is coming up. The backlog is a good
    place to find newbie tickets, too. Old tickets fall into three broad categories:
    no longer relevant, useful but minor, and important but too large to tackle at
    the moment. Figure out which of these categories the tickets you are looking at
    fall into.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 待办工作通常通过*任务单*或*问题单*来跟踪。阅读团队的任务单，看看大家在做什么以及接下来有什么任务。待办事项列表也是找到新手任务的好地方。旧的任务可以分为三大类：不再相关、有用但琐碎、以及重要但目前无法解决。弄清楚你正在查看的任务属于哪一类。
- en: 'Published and online resources complement each other. Books and papers are
    great for going deep into a subject. They are reliable but more dated. Online
    resources such as Twitter, blogs, and newsletters are the opposite: less trustworthy
    but great for keeping up with trends. Just remember to pump the brakes before
    implementing the latest ideas from Hacker News: it’s good to be boring (more on
    this in Chapter 3).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 已发布的书籍和在线资源是互为补充的。书籍和论文适合深入研究某一主题。它们可靠，但也更为陈旧。像Twitter、博客和新闻简报这样的在线资源则恰恰相反：它们不太可靠，但非常适合跟上趋势。只要记住，在实现Hacker
    News上的最新想法之前，要适当刹车：保持平淡无奇是有好处的（关于这一点将在第三章中详细讨论）。
- en: Join a reading group to keep up with research in academia and industry. Some
    companies have internal reading groups—ask around. If your company does not, consider
    starting one. You can also join a local Papers We Love chapter; these groups read
    and discuss computer science papers regularly.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 加入一个阅读小组，跟进学术界和行业的最新研究。有些公司有内部阅读小组——可以问问周围的人。如果你的公司没有，考虑自己组织一个。你也可以加入本地的“Papers
    We Love”小组；这些小组定期阅读和讨论计算机科学论文。
- en: Watch Presentations
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 观看演讲
- en: You can learn a lot from a good presentation. Start with recorded video presentations
    from the past—both internal company talks and external YouTube videos. Watch tutorials,
    tech talks, and conference presentations. Ask around to find good content. You
    can usually watch videos at 1.5 or even 2x speed to save time, but do not watch
    passively. Take notes to help with retention, and follow up on any unfamiliar
    concepts or terms.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 好的演讲可以让你学到很多东西。可以从过去的录播视频开始——包括公司内部讲座和外部的YouTube视频。观看教程、技术演讲和会议演讲。可以向他人询问，找到好的内容。通常你可以将视频播放速度调整为1.5倍甚至2倍来节省时间，但不要被动观看。做笔记有助于记忆，并对任何不熟悉的概念或术语进行跟进。
- en: Go to *brown bags* and tech talks if your company offers them. These informal
    presentations are hosted on-site, so they’re easy to get to. They’re also internal
    to your company, so you’ll get really relevant information.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果公司提供*午餐讲座*和技术演讲，参加这些活动。这样的非正式演讲通常在公司内部举办，方便参加。而且它们是公司内部的活动，所以你能获得非常相关的信息。
- en: Attend Meetups and Conferences (Sparingly)
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 适度参加聚会和会议
- en: Conferences and meetups are good for networking and discovering new ideas. They
    are worth attending occasionally, but don’t overdo it. The signal-to-noise ratio—the
    ratio of relevant content to all content—is often low, and many presentations
    are available online afterward.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 会议和聚会是结识新朋友和发现新想法的好机会。偶尔参加是值得的，但不要过度参与。信噪比——即相关内容与所有内容的比例——往往较低，而且许多演讲会在会后在线提供。
- en: 'There are roughly three types of conferences: academic conferences, grassroots
    interest group gatherings, and vendor showcases. Academic conferences have great
    content, but reading papers and going to smaller, more focused get-togethers is
    usually better. Interest-based conferences are great for getting practical tips
    and meeting experienced practitioners; check out a few. Vendor conferences are
    the biggest and most visible. They are marketing vehicles for large tech companies
    and not great for learning. They are fun to attend with your coworkers, but more
    than one per year is likely a waste of time. Ask around to find the best ones.
    Keep in mind that some employers will pay for the tickets, travel, and lodging.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 大致上有三种类型的会议：学术会议、草根兴趣小组聚会和厂商展示会。学术会议内容丰富，但通常阅读论文和参加规模较小、更加专注的聚会效果更好。兴趣导向的会议非常适合获取实用技巧和结识有经验的从业者；不妨参加一些。厂商会议是最大型和最显眼的，它们是大型科技公司用于营销的工具，并不适合学习。虽然和同事一起参加这些会议很有趣，但每年参加一次以上的会议可能就是浪费时间。询问一下周围人，找到最好的会议。记住，一些公司会为你支付票价、差旅和住宿费用。
- en: Shadow and Pair with Experienced Engineers
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跟随并与有经验的工程师配对
- en: '*Shadowing* is following another person as they perform a task. The shadower
    is an active participant: they take notes and ask questions. Shadowing a senior
    engineer is a great way to learn a new skill. To get the most out of it, set up
    time before and after the shadowing session for planning and retrospection.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*影子学习*是跟随另一个人完成任务的过程。影子学习者是积极的参与者：他们记笔记并提出问题。跟随一位高级工程师是学习新技能的好方法。为了获得最大的收益，在影子学习前后安排时间进行规划和反思。'
- en: Reverse roles when you are ready. Have a senior engineer shadow you. Like you,
    they should provide feedback. They will also act as a safety net if things go
    wrong. This is a gentle way to ease into scary situations like interviewing.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当你准备好时，倒换角色。让一位高级工程师来影子学习你。和你一样，他们也应该提供反馈。如果事情出错，他们会充当安全网。这是一种温和的方式，让你更容易面对像面试这样的恐惧情境。
- en: '*Pair programming* is also a great way to learn. Two engineers write code together,
    taking turns doing the typing. It takes some getting used to, but it’s one of
    the fastest ways to learn from each other. Advocates of this technique also claim
    that it raises code quality. If your teammates are willing, we highly recommend
    trying it. Pair programming isn’t just for junior engineers, either. Teammates
    of all levels can benefit from it.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*结对编程*也是一种很好的学习方式。两位工程师共同编写代码，轮流敲键盘。这需要一些适应，但它是最快的相互学习方式之一。该技术的倡导者还声称它能提高代码质量。如果你的团队成员愿意，我们强烈推荐你尝试。结对编程不仅适用于初级工程师，所有级别的团队成员都可以从中受益。'
- en: Some companies also encourage shadowing nonengineering roles. Shadowing customer
    support and sales demos is an eye-opening way to learn about your customers. Write
    down and share your observations. Work with your manager and senior engineers
    to prioritize ideas inspired by the experience.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一些公司也鼓励影子学习非工程类角色。跟随客户支持和销售演示是一种让你了解客户的开阔眼界的方式。把你的观察记录下来并分享。与经理和高级工程师合作，优先考虑通过这些经验得到的启发和想法。
- en: Experiment with Side Projects
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 试验副项目
- en: Working on side projects will expose you to new technologies and ideas. You
    can skip the “software engineering stuff” (testing, operations, code reviews,
    and so on) when you’re working on your own. Ignoring these aspects lets you learn
    new technologies quickly; just don’t forget about the “real” stuff at work.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 从事副项目会让你接触到新的技术和理念。当你在做自己的项目时，你可以跳过“软件工程的内容”（测试、运维、代码审查等）。忽视这些方面让你能更快速地学习新技术；只不过别忘了工作中那些“真实”的事情。
- en: You can also participate in open source projects. Most projects welcome contributions.
    This is a great way to learn and build professional connections. You might even
    find future jobs through open source communities. Keep in mind that these projects
    are often run by volunteers. Don’t expect the same turnaround speed you get at
    work. Sometimes people will get busy and disappear for a bit.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以参与开源项目。大多数项目欢迎贡献者。这是一个学习和建立职业关系的好方法。你甚至可能通过开源社区找到未来的工作。请记住，这些项目通常由志愿者管理。不要期待和工作中一样快的反馈速度。有时候，人们会变得很忙，暂时消失一段时间。
- en: Don’t choose a project based on what you think you need to learn. Find problems
    you are interested in solving, and solve those problems using the tools you want
    to learn. A goal that intrinsically motivates you will keep you engaged longer,
    and you’ll learn more.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 不要根据你认为需要学习的内容来选择项目。找到你感兴趣的问题，利用你想学习的工具解决这些问题。一个能内在激励你的目标会让你保持更长时间的投入，你也会学得更多。
- en: Companies have rules about outside work. Ask for your company’s policy. Don’t
    use company resources (your company laptop) to work on side projects. Don’t work
    on side projects at work. Avoid side projects that compete with your company.
    Clarify whether you can contribute to open source at work or at home. Some companies
    will want you to contribute only under special work accounts. Others will want
    you to use personal accounts only. Understand whether you retain ownership over
    your side projects. Ask your manager if you need to get approvals. Getting clarity
    will save you frustration in the long run.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 公司对外部工作的有规定。询问公司政策。不要使用公司资源（例如公司笔记本）来处理副业项目。不要在工作时间进行副业。避免做与公司竞争的副业项目。弄清楚你是否可以在公司或家里贡献开源项目。有些公司会要求你只在特别的工作账户下贡献。其他公司则只允许使用个人账户。了解你是否保留副业项目的所有权。如果需要获得批准，请询问你的经理。了解清楚这些事项将避免你将来遇到挫折。
- en: Asking Questions
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提问
- en: 'All engineers should ask questions—it’s a critical part of learning. New engineers
    worry about bothering teammates and try to figure everything out themselves instead.
    This is slow and inefficient. Asking questions effectively will help you learn
    quickly without irritating others. Use these three steps: do research, ask clear
    questions, and time your questions appropriately.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所有工程师都应该提问——这是学习的关键部分。新手工程师担心打扰队友，试图自己解决所有问题。但这样既慢又低效。有效地提问将帮助你快速学习，而不会让别人烦恼。遵循这三个步骤：做研究、提问清晰的问题，并合理安排提问的时机。
- en: Do Your Research
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 做好你的研究
- en: Try to find the answer yourself. Even if your colleagues know the answer, put
    in the effort—you’ll learn more. If you don’t find the answer, your research will
    still be your starting point when you ask for help.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试自己找到答案。即使你的同事知道答案，也要付出努力——你会学到更多。如果没有找到答案，你的研究成果仍然会成为你寻求帮助时的起点。
- en: 'Don’t just search the internet. Information lives in documentation, wikis,
    READMEs, source code, and bug trackers. If your question is about code, try turning
    it into a unit test that demonstrates the problem. It’s possible your question
    has been asked before: check the mailing list or chat group archives. The information
    you gather will lead to ideas that you can test. If you can’t find any leads,
    try to work it out yourself by experimenting. Keep track of where you looked,
    what you did, why you did it, what happened, and what you learned.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 不要只是在互联网上搜索。信息存在于文档、维基、README、源代码和缺陷追踪器中。如果你的问题与代码相关，尝试将其转化为一个单元测试，展示问题。也许你的问题已经有人提过：查阅邮件列表或聊天群组的档案。你收集到的信息将引发你可以测试的想法。如果找不到线索，尝试通过实验自己解决。记得记录你查阅的地方、所做的事、做这些的原因、发生了什么以及你学到了什么。
- en: Timebox
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 时间限制
- en: Limit how long you research a question. Set the limit before you start your
    research to encourage discipline and prevent diminishing returns (research will
    eventually stop being productive). Consider when you need to know the answer,
    and then leave enough time to ask a question, get an answer, and act on what you
    learn.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 限制你研究一个问题的时间。在开始研究之前设定时间限制，以促使自律并防止收益递减（研究最终会变得没有生产力）。考虑你需要知道答案的时机，然后留出足够的时间来提问、获取答案并根据所学采取行动。
- en: Once you reach the end of your timebox, ask for help. Only exceed the timebox
    if you are making good progress. If you go past your first timebox, set another.
    If you are still not sure of the answer after the second timebox, cut your losses
    and ask for help. Stopping takes discipline and practice—hold yourself accountable.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你达到时间限制，寻求帮助。只有在取得良好进展的情况下才可以超出时间限制。如果超过了第一次时间限制，再设定一个新的时间框架。如果在第二次时间限制后你仍然不确定答案，就停止并寻求帮助。停止需要自律和练习——要对自己负责。
- en: Show Your Work
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 展示你的工作
- en: Describe what you know when asking a question. Don’t just share your raw notes.
    Outline what you’ve tried and discovered succinctly. This signals that you have
    spent time trying to figure out the problem yourself. It also gives others a starting
    point for their answer.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在提问时描述你所知道的内容。不要只是分享你的原始笔记。简洁地概述你已经尝试过的内容和发现的结果。这表明你已经花时间自己尝试解决问题，也为别人提供了一个回答的起点。
- en: 'This is a poor way to ask a question:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个糟糕的提问方式：
- en: Hey Alice,
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 嘿，Alice，
- en: ''
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Any idea why testKeyValues is failing in TestKVStore? It really slows down our
    builds to rerun this.
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你知道为什么testKeyValues在TestKVStore中失败吗？重新运行这个测试会大大拖慢我们的构建速度。
- en: ''
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Thanks!
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 谢谢！
- en: ''
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Pankaj
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Pankaj
- en: 'This gives Alice little to go on. It sounds vaguely like Pankaj is blaming
    Alice for something, which is probably not what he intended. It’s a little lazy.
    Compare this with the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这给Alice提供的信息太少。听起来Pankaj好像在指责Alice，这可能不是他的本意。这显得有些懒散。与以下内容进行比较：
- en: Hey Alice,
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 嘿，Alice，
- en: ''
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I’m having trouble figuring out why testKeyValues is failing in TestKVStore
    (in the DistKV repo). Shaun pointed me your way. I’m hoping you can help.
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我在搞清楚为什么testKeyValues在TestKVStore（在DistKV库中）失败时遇到了问题。Shaun把我引导到你这儿。我希望你能帮忙。
- en: ''
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The test fails for me about every third execution; it seems random. I tried
    running it in isolation, and it’s still failing, so I don’t think it’s an interaction
    between tests. Shaun ran the test in a loop on his machine but was unable to reproduce
    it. I don’t see anything obvious in the source code to explain the failure. It
    seems like some kind of race condition. Any thoughts?
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个测试对我来说大约每执行三次就失败一次，似乎是随机的。我尝试单独运行它，依然失败，所以我认为这不是测试间的相互影响。Shaun在他的机器上循环运行这个测试，但没能复现这个问题。我没有在源代码中看到明显的原因来解释这个失败。看起来像是某种竞态条件。有什么想法吗？
- en: ''
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There is no terrible urgency around this as I’m told this is unlikely to be
    affecting production. Still, the flapping test costs us 20–30 minutes every time
    this happens, so I’d love to figure out how to fix it. I’ve attached logs that
    show failures and all of my current environment settings, just in case.
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我听说这不太可能影响生产环境，因此这个问题并没有特别紧急。但每次这个测试失败都会浪费我们20到30分钟，所以我很想找到解决方法。我已经附上了显示失败信息的日志以及我当前的环境设置，以防万一。
- en: ''
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Thanks!
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 谢谢！
- en: ''
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Pankaj
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Pankaj
- en: In the second example, Pankaj gives some context, describes the problem, tells
    Alice what he’s already tried, and asks for help. He also notes both the impact
    and the level of urgency. It is succinct but has detailed information attached
    so Alice doesn’t need to hunt for it. Alice will help Pankaj out. She will also
    remember that Pankaj is thorough. Requests like this will build Pankaj’s credibility
    in the eyes of his colleagues.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个例子中，Pankaj提供了一些背景信息，描述了问题，告诉Alice他已经尝试过的解决方法，并请求帮助。他还说明了问题的影响和紧急程度。这既简洁又提供了详细信息，Alice不需要再去寻找。Alice会帮助Pankaj。她还会记住Pankaj的细心。像这样的请求会增强Pankaj在同事眼中的可信度。
- en: It takes more effort to write the second message. It’s worth it. Put in the
    work.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 写第二条信息需要更多的努力，但这是值得的。付出努力吧。
- en: Don’t Interrupt
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不要打扰
- en: Just like you, others are trying to get things done; they need to focus. When
    they’re in the zone, don’t interrupt them. Even if the question is easy. Even
    if you know they know the answer. Even if you’re blocked. Unless there is a critical
    issue, really, don’t interrupt them.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你一样，其他人也在努力完成工作，他们需要集中注意力。当他们进入状态时，不要打扰他们。即使问题很简单。即使你知道他们知道答案。即使你被卡住了。除非是关键问题，否则真的不要打扰他们。
- en: Companies have different conventions to signal “Don’t interrupt.” Headphones,
    ear plugs, or earmuffs are universal. There’s some confusion about “lounge spaces.”
    Some consider working somewhere other than their desk sacrosanct—they don’t want
    to be found. Others interpret engineers in shared spaces as “available to interrupt.”
    Make sure you understand your company’s convention!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 各家公司有不同的习惯来表示“不要打扰”。耳机、耳塞或耳罩是通用的。有些人对“休息区”有些困惑。有些人认为工作时不在办公桌旁是神圣不可侵犯的——他们不想被打扰。而另一些人则认为在共享空间的工程师是“可以被打扰的”。确保你理解公司中的习惯！
- en: Walking up and talking to someone forces them to respond. Even if they just
    reply that they’re busy, you’ve already interrupted and caused them to lose focus.
    You’re not stuck if the person you need is busy. You need to find an asynchronous
    way to communicate.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 走过去和某人交谈迫使他们做出回应。即使他们只是回答说自己很忙，你已经打扰到他们并使他们失去了专注。如果你需要的人很忙，你也不会因此被卡住。你需要找到一种异步的沟通方式。
- en: Prefer Multicast, Asynchronous Communication
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 偏好使用多播和异步通信
- en: In networking, *multicasting* means sending a message to a group instead of
    an individual destination. *Asynchronous* means a message that can be processed
    later, rather than requiring an immediate response. These concepts apply to human
    communication, too.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络中，*多播*意味着将消息发送到一个组，而不是单个目标。*异步*意味着消息可以稍后处理，而不是要求立即响应。这些概念同样适用于人类的交流。
- en: Post questions so that multiple people can respond (multicast) at their own
    pace (asynchronous). Do this in a way that’s visible to everyone so it’s apparent
    when you’ve been helped. The answer will also be discoverable, so others can find
    the discussion later.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 提出问题以便让多个人以自己的节奏（异步）来回答（多播）。以一种让所有人都能看到的方式进行，这样就能显现出你已经得到了帮助。答案也会是可发现的，其他人以后也可以查找到这个讨论。
- en: 'This usually means using a group mailing list or group chat (for example, Dmitriy’s
    company has a #sw-helping-sw channel). Use shared forums even if you need an answer
    from a specific person; you can mention their name in your post.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常意味着使用一个群组邮件列表或群组聊天（例如，Dmitriy所在公司的#sw-helping-sw频道）。即使你只需要某个人的回答，也可以在你的帖子中提到他们的名字，使用共享论坛。
- en: Batch Your Synchronous Requests
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 批量处理同步请求
- en: Chat and email are great for simple questions, but complex discussions don’t
    work asynchronously. In-person conversations are “high bandwidth” and “low latency.”
    You can cover a lot quickly. This is costly, though. Interrupting your coworkers
    affects their productivity. Avoid this by setting up dedicated time with your
    tech lead or manager for nonurgent questions. Schedule a meeting, or use “office
    hours” if they exist. Write down questions and hold them until the meeting. You
    can do your research in the meantime. Your list will grow as other questions arise.
    This is good. Include the list in your meeting agenda. Don’t rely on your memory,
    and don’t come unprepared.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天和电子邮件适合解决简单问题，但复杂的讨论不能异步进行。面对面的交流是“高带宽”和“低延迟”的，你可以迅速涵盖大量内容。然而，这也很昂贵。打扰同事会影响他们的生产力。通过为非紧急问题与技术领导或经理安排专门的时间来避免这种情况。安排一个会议，或者如果有“办公时间”，就利用它。将问题写下来，等到会议时再提出。在此期间你可以做一些研究。随着其他问题的出现，问题列表会不断增长。这是好事。将列表包含在会议议程中。不要依赖记忆，也不要毫无准备地去参加会议。
- en: Cancel the meeting if you have no questions. If you find yourself canceling
    repeatedly, ask whether the meeting is still useful—if not, unschedule it.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有问题，就取消会议。如果你发现自己不断取消会议，问问自己这个会议是否仍然有用——如果没有，就取消安排。
- en: Overcoming Growth Obstacles
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克服成长障碍
- en: Knowing how to learn and ask questions isn’t enough. You must also avoid traps
    that slow growth. Two common impediments, impostor syndrome and the Dunning–Kruger
    effect, affect many engineers. You will grow faster if you understand what these
    phenomena are and how to overcome them.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅知道如何学习和提问是不够的。你还必须避免那些减缓成长的陷阱。两种常见的障碍，冒名顶替综合症和邓宁-克鲁格效应，影响着许多工程师。如果你了解这些现象是什么以及如何克服它们，你将会成长得更快。
- en: Impostor Syndrome
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 冒名顶替综合症
- en: 'Most new engineers start off consciously incompetent. There’s a lot to learn,
    and everyone else seems far ahead. You might worry that you don’t belong or that
    landing your job was luck. It’s easy to be hard on yourself—we’ve experienced
    this ourselves. No matter how often we tell engineers they’re doing a great job,
    some don’t believe it, even when they’re getting promoted! It makes them uncomfortable.
    They say they’ve gotten lucky, they don’t deserve recognition, or the promotion
    criteria are too lax. This is *impostor syndrome*. It was first described in a
    1978 study by Drs. Pauline Rose Clance and Suzanne Ament Imes, “The Impostor Phenomenon
    in High Achieving Women: Dynamics and Therapeutic Intervention.”'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数新工程师一开始都是意识到自己不够胜任的。有很多东西需要学习，而且其他人似乎远远走在前面。你可能会担心自己不属于这里，或者你得到这份工作是运气好。很容易对自己过于苛刻——我们自己也经历过这一点。无论我们告诉工程师们他们做得很好多少次，有些人还是不相信，即使他们已经得到晋升！这让他们感到不舒服。他们说自己运气好，不值得获得认可，或者晋升标准太宽松。这就是*冒名顶替综合症*。这种现象最早由保琳·罗斯·克兰斯博士和苏珊娜·阿门特·伊梅斯博士在1978年的一项研究中描述，“在高成就女性中的冒名顶替现象：动态与治疗干预”。
- en: Despite outstanding academic and professional accomplishments, women who experience
    the impostor phenomenon persist in believing that they are really not bright and
    have fooled anyone who thinks otherwise. Numerous achievements, which one might
    expect to provide ample objective evidence of superior intellectual functioning,
    do not appear to affect the impostor belief.
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 尽管在学术和职业上取得了杰出的成就，但经历冒名顶替现象的女性依然相信自己其实并不聪明，已经骗过了那些认为她们聪明的人。许多成就，本应为其卓越的智力表现提供充足的客观证据，却似乎并未对冒名顶替的信念产生影响。
- en: 'If this resonates with you, know that self-doubt is common. With effort, these
    feelings will pass. You can move things along with several strategies: awareness,
    reframing, and talking to colleagues.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能感同身受，知道自我怀疑是很常见的。通过努力，这些情绪会过去。你可以通过几种策略来推动事情的进展：提高意识、重新框定问题以及与同事交流。
- en: 'Impostor syndrome is self-reinforcing. Every error is seen as proof of incompetence,
    while every success is evidence of a good “faker.” Once an individual enters this
    cycle, it is difficult to get out of. Awareness helps: if you watch for this pattern,
    you can consciously break it. When you accomplish something, it’s because you
    actually did it—you aren’t just getting lucky.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 冒名顶替综合症是自我强化的。每一次错误都被视为无能的证据，而每一次成功则是“好冒充者”的证据。一旦进入这个循环，便很难走出来。意识到这一点有帮助：如果你留意到这个模式，你可以有意识地打破它。当你完成某件事时，说明你确实做到了——你并不是仅仅运气好。
- en: 'Don’t dismiss compliments and accomplishments. Write them down, even the small
    stuff. Your peers are capable, and if they say something positive, they have good
    reason to. Practice reframing negative thoughts: “I had to bug Daria to help with
    a race condition” becomes “I reached out to Daria, and now I know how to resolve
    race conditions!” Plan what you want to accomplish and notice when you achieve
    a goal. This will build confidence.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 不要轻视赞美和成就。把它们写下来，即使是小事。你的同事们很有能力，如果他们说了些积极的话，那肯定有充分的理由。练习重新构建负面思维：“我不得不烦Daria帮忙解决竞争条件问题”可以变成“我联系了Daria，现在我知道如何解决竞争条件问题了！”规划你想要达成的目标，并注意当你达成一个目标时。这会帮助你建立自信。
- en: Getting feedback also helps. Ask someone you respect to tell you how you’re
    doing. This can be your manager, a mentor, or just an engineer you look up to.
    The important thing is that you trust them and feel safe talking to them about
    self-doubt.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 获取反馈也很有帮助。请尊重你的人告诉你自己的表现如何。可以是你的经理、导师，或者是你崇拜的一位工程师。重要的是你要信任他们，并且感到可以安全地和他们谈论自我怀疑。
- en: Therapy might also help. Use it to gain comfort with your strengths and work
    through short-term challenges. Impostor syndrome, and the anxiety and depression
    that can accompany it, is a complex topic. If you are struggling, consider talking
    to a few therapists to find one whose approach works for you.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 治疗也可能有所帮助。利用它来让你更舒适地接受自己的优点，并解决短期挑战。冒名顶替综合症，以及伴随而来的焦虑和抑郁，是一个复杂的话题。如果你正在挣扎，考虑和几位治疗师交谈，找到一个适合你的方法。
- en: The Dunning–Kruger Effect
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 邓宁–克鲁格效应
- en: 'Opposite to impostor syndrome is the *Dunning–Kruger effect*, a cognitive bias
    where people believe that they’re more capable than they actually are. Unconsciously
    incompetent engineers don’t know what they don’t know, so they can’t accurately
    evaluate their performance (or anyone else’s). They are too confident; they storm
    around critiquing the company’s technical stack, complaining about code quality,
    and belittling design. They are certain that their ideas are right. Their default
    mode is to push back on or disregard feedback. Rejecting all suggestions serves
    as a giant red light: complete confidence is the sign of a blind spot.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 与冒名顶替综合症相反的是*邓宁–克鲁格效应*，这是一种认知偏差，人们认为自己比实际更有能力。无意识的不称职的工程师不知道自己不知道什么，因此无法准确评估自己的表现（或他人的表现）。他们过于自信，四处批评公司的技术栈，抱怨代码质量，贬低设计。他们确信自己的想法是正确的。默认的反应是抵制或忽视反馈。拒绝所有建议就像是一盏巨大的红灯：完全的自信是盲点的标志。
- en: Fortunately, the Dunning–Kruger effect is less common among new engineers. There
    are many ways to fight it. Start by consciously developing curiosity. Be open
    to being wrong. Find a respected engineer, ask how you’re doing, and truly listen.
    Talk over design decisions, especially those you don’t agree with. Ask why the
    decisions were made. Cultivate a mindset of trade-offs, not of right and wrong.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，邓宁–克鲁格效应在新工程师中并不常见。打破这一效应有很多方法。从有意识地培养好奇心开始。对自己可能错的事实保持开放。找到一位受人尊敬的工程师，询问自己做得如何，并真正倾听。讨论设计决策，尤其是那些你不同意的决策。问问为什么做出这些决定。培养权衡的心态，而不是对错的心态。
- en: Do’s and Don’ts
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做与不做
- en: '| **Do’s** | **Don’ts** |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| **Do’s** | **Don’ts** |'
- en: '| --- | --- |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **DO** play and experiment with code. | **DON’T** just churn out code.  |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| **DO** 玩弄代码，进行实验。 | **DON’T** 只是一味地写代码。 |'
- en: '| **DO** join meetups, online communities, interest groups, and mentorship
    programs.  | **DON’T** overdo conferences. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| **DO** 参加聚会、在线社区、兴趣小组和导师项目。 | **DON’T** 过度参与会议。 |'
- en: '| **DO** read papers and blogs. | **DON’T** be afraid to ask questions. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| **DO** 阅读论文和博客。 | **DON’T** 害怕提问。 |'
- en: '| **DO** prefer multicast and asynchronous communication. |  |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| **DO** 偏好多播和异步通信。 |  |'
- en: '| **DO** shadow interviews and on-call rotations. |  |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| **DO** 参加面试和值班轮换。 |  |'
- en: Level Up
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提升
- en: 'Dave Hoover and Adewale Oshineye’s *Apprenticeship Patterns: Guidance for the
    Aspiring Software Craftsman* (O’Reilly Media, 2009) is a great collection of “patterns”
    one can use to get started in a new environment, seek guidance, learn skills deeply,
    and overcome common hurdles.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Dave Hoover 和 Adewale Oshineye 的 *《学徒模式：为志向远大的软件工匠提供指导》*（O’Reilly Media, 2009）是一本精彩的“模式”集，适用于在新环境中入门、寻求指导、深入学习技能和克服常见障碍。
- en: 'For more on asking questions, we recommend *All You Have to Do Is Ask: How
    to Master the Most Important Skill for Success* by Wayne Baker (Currency, 2020).
    This book is divided into two parts. The first section discusses the value of
    asking questions and why it’s hard. The second half of the book is a toolkit for
    asking questions effectively.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 关于提问的更多内容，我们推荐 Wayne Baker 的 *《你只需要问：如何掌握成功的最重要技能》*（Currency, 2020）。本书分为两部分。第一部分讨论了提问的价值以及为何提问很困难。第二部分则是一个有效提问的工具包。
- en: 'For more on pair programming, the classic text is *Extreme Programming Explained:
    Embrace Change* by Kent Beck and Cynthia Andres (Addison-Wesley, 2004). The book
    covers much more than just pair programming. If you are interested in a shorter
    read, the article “On Pair Programming” by Birgitta Böckeler and Nina Siessegger
    at [https://www.martinfowler.com/articles/on-pair-programming.html](https://www.martinfowler.com/articles/on-pair-programming.html)
    is an excellent practical guide.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 关于结对编程，经典的著作是 Kent Beck 和 Cynthia Andres 的 *《极限编程解释：拥抱变化》*（Addison-Wesley, 2004）。这本书的内容远超结对编程。如果你更倾向于短篇阅读，可以参考
    Birgitta Böckeler 和 Nina Siessegger 在 [https://www.martinfowler.com/articles/on-pair-programming.html](https://www.martinfowler.com/articles/on-pair-programming.html)
    上发表的文章《论结对编程》，这是一篇极好的实践指南。
- en: 'If you find that the impostor syndrome or Dunning–Kruger sections resonate,
    check out *Presence: Bringing Your Boldest Self to Your Biggest Challenges* by
    Amy Cuddy (Little, Brown & Company, 2016). Many common causes of both work anxiety
    and overconfidence are covered in the book.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现“冒名顶替综合症”或“邓宁-克鲁格效应”部分与你产生共鸣，可以看看 Amy Cuddy 的 *《存在感：将你最勇敢的自我带入最大挑战》*（Little,
    Brown & Company, 2016）。本书涵盖了许多常见的工作焦虑和过度自信的原因。
