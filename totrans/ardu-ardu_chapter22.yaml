- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">22</samp> <samp class="SANS_Dogma_OT_Bold_B_11">CAPTURE
    AND LOG DATA TO GOOGLE SHEETS</samp>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../images/opener-img.png)'
  prefs: []
  type: TYPE_IMG
- en: You can use internet-connected boards like the ESP32 to capture data and store
    it in online spreadsheets for real-time monitoring and later analysis. In this
    chapter, you’ll use this method to build a single project that sends time and
    temperature data to a Google Sheets spreadsheet tool within Google Workspace,
    a collection of cloud-computing collaboration tools that are accessible from most
    web-enabled devices.
  prefs: []
  type: TYPE_NORMAL
- en: You can use this framework in future projects to record any other type of data
    you can gather with Arduino-compatible projects. For example, you might want to
    share weather data at a remote location with other colleagues or monitor sensor
    values in a laboratory experiment from your cell phone while on holiday elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #65: Logging Time and Temperature
    Data</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: This project demonstrates how to send the time and date from an NTP server,
    along with the temperature and air pressure from a BMP180 sensor board, to Google
    Workspace’s Google Sheets tool via the ESP32 board.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll need the following hardware:'
  prefs: []
  type: TYPE_NORMAL
- en: An ESP32 dev board and matching USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A solderless breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assorted jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A BMP180 temperature and pressure sensor board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you haven’t already, turn to [Chapter 19](chapter19.xhtml) and complete the
    instructions in “Configuring the Arduino IDE for the ESP32” through “Testing the
    ESP32” to get your ESP32 working. Also make sure you’ve completed “BMP180 Sensors”
    in [Chapter 10](chapter10.xhtml) and read [Chapter 21](chapter21.xhtml) to familiarize
    yourself with NTP servers.
  prefs: []
  type: TYPE_NORMAL
- en: To build this project, you’ll start by configuring a Google Workspace account
    to receive data from the ESP32 and then set up the ESP32 board and sensor for
    data transmission.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Preparing the Google Sheets Document</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Google Sheets is a cloud-based spreadsheet included as part of the Google Workspace
    cloud-based product. If you don’t already have one, set up a Google Workspace
    account at [*https://<wbr>workspace<wbr>.google<wbr>.com*](https://workspace.google.com).
    A free trial is available if you want to experiment without commitment, but at
    time of writing, the price for a monthly subscription is less than US$10 a month.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve logged into your account, visit [*https://<wbr>docs<wbr>.google<wbr>.com<wbr>/spreadsheets*](https://docs.google.com/spreadsheets)
    to view the Google Sheets start page, as shown in [Figure 22-1](chapter22.xhtml#fig22-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE GOOGLE SHEETS START PAGE](../images/fig22-1.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-1: The Google Sheets
    start page</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new, blank spreadsheet by clicking the **Blank** icon under Start a
    new spreadsheet. A new tab for that spreadsheet will appear, as shown in [Figure
    22-2](chapter22.xhtml#fig22-2).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE BLANK SPREADSHEET](../images/fig22-2.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-2: A blank spreadsheet</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Untitled spreadsheet** and enter an appropriate name for a spreadsheet
    that tracks temperature and air pressure data for your location—for example, **OfficeWeather**—and
    then press ENTER. Next, rename the page label at the bottom of the page from Sheet1
    to **office**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now give the columns in row 1 the following headings, starting from cell A1,
    as shown in [Figure 22-3](chapter22.xhtml#fig22-3): **date, month, year, hour,
    minute, second, temperature, airpressure**. These will match the data sent from
    the ESP32 board, as you’ll see shortly.'
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE PREPARED SPREADSHEET](../images/fig22-3.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-3: The spreadsheet
    setup, with names and data headings</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Note that column headings in Google Sheets, must always be lowercase and not
    contain any spaces or symbols.
  prefs: []
  type: TYPE_NORMAL
- en: Wait for Google to automatically save the sheet, then retrieve and save the
    sheet ID. This is the long group of characters between */d* and */edit* in the
    sheet’s URL, as shown in [Figure 22-4](chapter22.xhtml#fig22-4). Copy the sheet
    ID and paste it into a text document so you can easily retrieve it later.
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE SHEET’S ID IN THE URL](../images/fig22-4.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-4: Example of a sheet
    ID highlighted in a URL</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Your sheet is now ready to receive data. For now, leave it open in the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Google Apps Script</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your ESP32 hardware will send data to your Google sheet by making an HTTP call
    with the data attached to the end of the HTTP address. To enable that process,
    you must upload a small piece of JavaScript code to the Google servers that decodes
    HTTP calls from the ESP32 board, separating the data and placing it in the correct
    column in the sheet.
  prefs: []
  type: TYPE_NORMAL
- en: Open the Google Apps script tool by selecting **Extensions** ![](../images/arr.png)
    **Apps Script** in Google Sheets.
  prefs: []
  type: TYPE_NORMAL
- en: A new tab for the Apps Script editor will open in the web browser, as shown
    in [Figure 22-5](chapter22.xhtml#fig22-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE APPS SCRIPT EDITOR](../images/fig22-5.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-5: Opening a new
    tab</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Untitled project** and enter a name for the script, such as **OfficeWeatherScript**.
    Copy the following code and paste it over the text in line 1 of the editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Insert the sheet ID you retrieved earlier between the quotes in the first line
    of the code. The sheet label name, <samp class="SANS_TheSansMonoCd_W5Regular_11">office</samp>,
    appears between the quotes in the next line. Each column of data to store is represented
    by the <samp class="SANS_TheSansMonoCd_W5Regular_11">var</samp> declarations in
    the order they appear across row 1 of the spreadsheet (<samp class="SANS_TheSansMonoCd_W5Regular_11">date</samp>
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">airpressure</samp>).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the <samp class="SANS_TheSansMonoCd_W5Regular_11">sheet.appendrow()</samp>
    function writes the received data to a new row in the spreadsheet. The order in
    which the variables appear in the function determines the order in which the data
    is written to the sheet. Each set of data received will be saved to the next empty
    row, until you hit the maximum of 40,000 rows in a Google sheet. From that point,
    you cannot log any more data.
  prefs: []
  type: TYPE_NORMAL
- en: Your editor page should now resemble [Figure 22-6](chapter22.xhtml#fig22-6).
    The script editor will highlight any syntax errors, so check for errors before
    moving on.
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE COMPLETED APP SCRIPT](../images/fig22-6.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-6: The completed
    app script</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: To deploy the script, select **Deploy** ![](../images/arr.png) **New deployment**.
    When the New deployment window appears, click the gear icon to select the deployment
    type. In the drop-down menu that appears, click **Web app** to open the configuration
    dialog, which has three fields.
  prefs: []
  type: TYPE_NORMAL
- en: You will be presented with the Configuration dialog, which has three fields.
    In the first, New Description, enter **OfficeWeather** (or whatever you chose
    to name your sheet). Select **Me** for the Web app field, and select **Anyone**
    for the Who has access field, as shown in [Figure 22-7](chapter22.xhtml#fig22-7).
    Click **Deploy**.
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE DEPLOYMENT CONFIGURATION PAGE](../images/fig22-7.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-7: The deployment
    configuration page</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: A pop-up should prompt you to authorize access to the account. Click **Authorize
    access**.
  prefs: []
  type: TYPE_NORMAL
- en: If prompted to log into your Google account again, do so. You will be presented
    with a new window showing your spreadsheet’s deployment ID and web app URL.
  prefs: []
  type: TYPE_NORMAL
- en: Use the Copy links in the window to copy each of the items and save them in
    the document containing your sheet ID. You can now close the Apps Script tab in
    the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before setting up this project’s hardware, test that your script is working.
    Using a text editor, enter the web app URL on a new line and then add the following
    text to the end of the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The text appended to the URL describes the data being sent to the spreadsheet
    in the format <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">column</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">data</samp>,
    with each column and data pair separated by a question mark. The data in this
    line of code is intended just to test the script—you’ll program the ESP32 dev
    board to send its own data shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Copy the entire URL into the address field of a web browser and press ENTER.
    Two things should happen. First, the web browser should return a message telling
    you that the script completed but did not return anything, as shown in [Figure
    22-8](chapter22.xhtml#fig22-8).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE MESSAGE RETURNED BY THE GOOGLE APPS SCRIPT](../images/fig22-8.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-8: A message returned
    by the Google Apps script</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The message means the script worked but didn’t send any data back to the web
    browser. That’s okay—the data went to the spreadsheet instead. Check your sheet
    and you should see the data on a new row, as shown in [Figure 22-9](chapter22.xhtml#fig22-9).
    If you like, you can go back and edit the data at the end of the entered URL,
    resubmit the URL, and see another row of data entered into the spreadsheet.
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE SPREADSHEET AFTER A SUCCESSFUL HTML CALL](../images/fig22-9.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-9: The spreadsheet
    after a successful HTML call</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This process is the basis for data logging from the ESP32: the sketch will
    arrange the data captured from the sensor along with the time and date into one
    URL and then perform an HTTP call that the Google Apps script you created earlier
    will process to enter data into the spreadsheet. If this test didn’t work for
    you, check that you’ve correctly followed all instructions provided in the project
    up to this point.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Preparing the Hardware</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Assemble your hardware as shown in [Figure 22-10](chapter22.xhtml#fig22-10).
    Note that although your BMP180 board may be marked as a 5 V device, it will work
    on 3.3 V and the ESP32 board without a level converter.
  prefs: []
  type: TYPE_NORMAL
- en: '![THE SCHEMATIC FOR PROJECT #65](../images/fig22-10.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-10: The schematic
    for Project #65</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter and upload the sketch, including your Wi-Fi network name (SSID) and password
    in the fields toward the beginning of the program, as originally explained in
    Project #55 in [Chapter 19](chapter19.xhtml). Don’t forget to change the offset
    for your time zone, as described in “Network Time Protocol” in [Chapter 21](chapter21.xhtml),
    and insert your web app URL into the appropriate field. The ESP32 should connect
    to the Wi-Fi network and then retrieve the time and date from an NTP server and
    the temperature and air pressure from the BMP180\. It should combine the data
    into a string comprised of the web app URL and the data and then complete a HTTP
    call to the Google server.'
  prefs: []
  type: TYPE_NORMAL
- en: A moment later, you should see the data appear in the spreadsheet. Leave the
    sheet open to see it update nearly in real time, as shown in [Figure 22-11](chapter22.xhtml#fig22-11).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE EXAMPLE OUTPUT FROM PROJECT #65](../images/fig22-11.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-11: Example output
    from Project #65</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The sketch includes and initializes all required libraries, followed by the
    fields for your Wi-Fi network’s name and password and then the initialization
    for the network time server client ❶.
  prefs: []
  type: TYPE_NORMAL
- en: The sketch then sets the period between sending different data readings to the
    spreadsheet ❷, in milliseconds. This is the minimum amount of time between updates,
    but the actual update frequency is determined by the speed of Google’s server
    and your internet connection. For example, consider the values shown in [Figure
    22-12](chapter22.xhtml#fig22-12)—even though the demonstration was set to 20 seconds,
    the actual times recorded were 22 seconds or more. Values of 10 seconds or less
    may not be recorded, as this doesn’t give the processes enough time to complete
    the reception and saving of data on the Google server.
  prefs: []
  type: TYPE_NORMAL
- en: In <samp class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp>, the usual
    declarations take place, along with starting the required libraries and the Serial
    Monitor. The sketch connects to your Wi-Fi network and starts the network time
    client. The code in <samp class="SANS_TheSansMonoCd_W5Regular_11">void loop()</samp>
    declares the required string variables used to store the time and temperature
    data from the network time server and BMP180 sensor, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: The program includes a calculation to determine whether the required amount
    of time has elapsed before sending more data ❸. This allows the sketch to proceed
    when the <samp class="SANS_TheSansMonoCd_W5Regular_11">millis()</samp> count from
    the last update time is greater than the set period ❹. Once the period has elapsed,
    it’s time to extract the date and time information from the NTP server and store
    it in the string variables and then append this data to the web app URL ❺.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the temperature and air pressure data are retrieved from the BMP180 sensor
    and those values are placed into string variables ❻. These variables are then
    appended to the giant string <samp class="SANS_TheSansMonoCd_W5Regular_11">finalAppURL</samp>,
    which already contains the web app URL along with the date and time.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the web app URL has been fully constructed, an HTTP call sends the
    data to the Google server ❼. The final lines of code get the HTTP response code
    ❽ from the Google server and send it to the Serial Monitor. This is useful for
    debugging, since it confirms whether the process has been successful, but you
    can remove it once your sketch is operating as required. Finally, the sketch records
    the elapsed time after the latest update, which is used to calculate the delay
    before the next update ❾.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Tips for Future Google Sheets Projects</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you have a working mechanism to log real-world data to a Google Sheets
    spreadsheet, here are a few final tips for building this type of project. First,
    you’re limited to viewing your projects on a browser, as the spreadsheet is on
    the Google server. You can also monitor the project’s progress from using the
    Google Sheets app on your mobile device or tablet, as shown in [Figure 22-12](chapter22.xhtml#fig22-12).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE EXAMPLE OUTPUT FROM PROJECT #65 DISPLAYED USING THE ANDROID
    GOOGLE SHEETS APP](../images/fig22-12.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 22-12: Example output
    from Project #65 displayed using the Google Sheets app on Android</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: As previously noted, the maximum number of rows in a Google Sheets spreadsheet
    is 40,000\. To monitor two or more ESP32 boards at the same time, give them separate
    spreadsheets; you can then combine and analyze the data from the desktop once
    the required data has been captured. If you want to edit an existing project—by
    changing the variable names or locations in the spreadsheet, for example—don’t
    forget to update the app script and then create a new deployment that uses a new
    web app URL that you then insert into the sketch.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter gave you an inexpensive framework for capturing any type of data
    that can be gathered by an Arduino-compatible board and sending it straight to
    a spreadsheet. This allows you to monitor real-time data from almost anywhere
    in the world and share this data with others in a public or private manner. You
    can use your own sensors, change the spreadsheet variables, and update times to
    suit your own needs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll continue working with internet-connected devices,
    creating your own web server with the ESP32 board to share information in read-only
    format for others to view.
  prefs: []
  type: TYPE_NORMAL
