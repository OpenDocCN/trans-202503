- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_11">FOREWORD</samp>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: A Microsoft Technical Fellow once told me he had never met someone who understood
    how the security of the Windows operating system actually worked. While I don’t
    think he was right (and plan to send him a copy of this book to prove it), he
    had a point. Though critical, there is no doubt that Windows security is complex.
  prefs: []
  type: TYPE_NORMAL
- en: One of the reasons for this is related to the core architectural difference
    between Linux and Windows. Linux is a file-oriented operating system, while Windows
    is API oriented, and though APIs can provide a much richer set of capabilities,
    they come at the expense of simplicity. So, exploring an API-oriented operating
    system is more difficult. You need to read the API documentation, write code,
    compile and run it, and debug the results.
  prefs: []
  type: TYPE_NORMAL
- en: This is a very time-consuming loop, and it’s why so few people have a deep understanding
    of how Windows security works—it’s just too hard to explore.
  prefs: []
  type: TYPE_NORMAL
- en: It was because of these problems that I invented PowerShell. I wanted administrators
    to automate Windows and had originally tried to do so by distributing Unix tools
    for free. (Remember Windows Services for Unix?) This failed because Unix tools
    work on files, while everything important in Windows lives behind an API. Thus,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">awk</samp> didn’t work against the
    registry, <samp class="SANS_TheSansMonoCd_W5Regular_11">grep</samp> didn’t work
    against Windows Management Instrumentation (WMI), <samp class="SANS_TheSansMonoCd_W5Regular_11">sed</samp>
    didn’t work against Active Directory, and so on. What we needed was an API-oriented
    command line interface and scripting tool. So, I created PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: 'Today, James is using PowerShell to address the difficulty of acquiring Windows
    security expertise; he has made the system explorable. Step one: install his PowerShell
    module, <samp class="SANS_TheSansMonoCd_W5Regular_11">NTObjectManager</samp>,
    which provides over 550 cmdlets to experiment with all aspects of Windows security.
    This hands-on exploration will allow you to understand how things really work.'
  prefs: []
  type: TYPE_NORMAL
- en: This book belongs on the desk of every security professional and developer working
    with Windows security. [Part I](part1.xhtml) provides an overview of Windows security’s
    architecture, [Part II](part2.xhtml) covers the details of the operating system’s
    security mechanisms and services, and [Part III](part3.xhtml) explores the various
    aspects of Windows authentication. Each chapter includes a set of PowerShell examples.
  prefs: []
  type: TYPE_NORMAL
- en: I strongly encourage you to follow the examples provided; exploration turns
    words into experience, and experience is the foundation of competence. Run the
    commands, make intentional mistakes, and see what errors you get. In doing so,
    you’ll acquire a deep understanding of the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'And trust me: it will be fun.'
  prefs: []
  type: TYPE_NORMAL
- en: Jeffrey Snover
  prefs: []
  type: TYPE_NORMAL
- en: Inventor of PowerShell, former chief architect for Windows Server, and former
    Microsoft Technical Fellow
  prefs: []
  type: TYPE_NORMAL
