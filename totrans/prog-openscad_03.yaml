- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: 2D Shapes
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 二维图形
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: You’re now familiar with a good collection of basic OpenSCAD instructions for
    modeling simple 3D shapes, and you’ve seen operations that can transform those
    basic shapes into more complex designs. This chapter will teach you how to create
    and combine 2D shapes in order to build even more sophisticated 3D designs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经熟悉了一些基本的OpenSCAD指令，用于建模简单的三维图形，并且你已经见识过一些可以将这些基本图形转化为更复杂设计的操作。本章将教你如何创建和组合二维图形，以便构建更加复杂的三维设计。
- en: We’ll start by showing you how to draw basic 2D shapes, and then we’ll describe
    how to build on those basic 2D shapes to create elaborate 3D designs. Using 2D
    shapes will allow you to create designs that are not possible to build with the
    3D shapes and operations you’ve learned so far. In addition, knowing how to create
    2D shapes is useful when you’re designing for other digital fabrication techniques,
    such as laser cutting, though that’s beyond the scope of this book.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从向你展示如何绘制基本的二维图形开始，然后描述如何在这些基本二维图形的基础上构建复杂的三维设计。使用二维图形将使你能够创建一些使用你目前学到的三维图形和操作无法实现的设计。此外，了解如何创建二维图形在你为其他数字制造技术（如激光切割）设计时也很有用，尽管这超出了本书的范围。
- en: Drawing Basic 2D Shapes
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制基本二维图形
- en: As with 3D shapes, you can build complex 2D shapes based on a few built-in 2D
    primitives, called `circle`, `square`, and `polygon`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 和三维图形一样，你可以基于一些内置的二维基本图形（称为` circle`、` square`和` polygon`）来构建复杂的二维图形。
- en: Drawing Circles with circle
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用` circle`命令绘制圆形
- en: 'The `circle` command allows you to draw a 2D circle by specifying its radius,
    like the `sphere` command from Chapter 1. For example, the following statement
    draws a circle with a radius of 20 units ([Figure 3-1](#figure3-1)):'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '` circle`命令允许你通过指定半径来绘制二维圆形，类似于第1章中的` sphere`命令。例如，以下语句绘制一个半径为20单位的圆形（[图 3-1](#figure3-1)）：'
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![f03001](image_fi/279547c03/f03001.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![f03001](image_fi/279547c03/f03001.png)'
- en: 'Figure 3-1: A rendered circle with a radius of 20 units'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-1：渲染的半径为20单位的圆形
- en: Clicking the **Preview** button renders your circle with a slight depth ([Figure
    3-2](#figure3-2)).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**预览**按钮将渲染出一个略有深度的圆形（[图 3-2](#figure3-2)）。
- en: '![f03002](image_fi/279547c03/f03002.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![f03002](image_fi/279547c03/f03002.png)'
- en: 'Figure 3-2: A previewed circle with a radius of 20 units'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-2：预览的半径为20单位的圆形
- en: However, 2D shapes have no depth. They exist only in the xy-plane. To see 2D
    shapes in their true form, without depth, use the **Render** button. (Note that
    it’s not possible to mix 2D and 3D shapes in Render mode.) Because 2D shapes have
    no depth, it’s often easiest to create 2D designs by using the Top-view icon on
    the toolbar ([Figure 3-3](#figure3-3)).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，二维图形没有深度。它们只存在于xy平面中。要以没有深度的真实形式查看二维图形，请使用**渲染**按钮。（请注意，在渲染模式下不可能将二维和三维图形混合使用。）由于二维图形没有深度，因此最容易使用工具栏上的顶视图图标来创建二维设计（[图
    3-3](#figure3-3)）。
- en: '![f03003](image_fi/279547c03/f03003.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![f03003](image_fi/279547c03/f03003.png)'
- en: 'Figure 3-3: Top-view icon'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-3：顶视图图标
- en: Drawing Rectangles with square
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用` square`绘制矩形
- en: 'The 2D `square` command, which draws rectangles, specifies x and y dimensions
    as a single vector parameter. The following statement draws a rectangle that extends
    25 units along the x-axis and 10 units along the y-axis ([Figure 3-4](#figure3-4)):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 二维` square`命令，用于绘制矩形，指定x和y维度作为一个向量参数。以下语句绘制一个矩形，矩形沿x轴延伸25个单位，沿y轴延伸10个单位（[图 3-4](#figure3-4)）：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![f03004](image_fi/279547c03/f03004.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![f03004](image_fi/279547c03/f03004.png)'
- en: 'Figure 3-4: A rectangle with a width of 25 and height of 10 units'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-4：宽度为25，高度为10单位的矩形
- en: Use the `square` command to indicate that you want to draw a rectangle, followed
    by a set of parentheses. Within the parentheses, put square brackets, and then
    within those, enter the dimensions of the square, separated by a comma. This 2D
    vector requires only x and y dimensions, as opposed to the 3D vector (x, y, and
    z) required by the 3D cube shape. The first number in the vector represents the
    width of the square along the x-axis. The second number in the vector represents
    the length of the square along the y-axis.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用` square`命令表示你想绘制一个矩形，后面跟着一对圆括号。在圆括号内放入方括号，然后在方括号内输入矩形的尺寸，尺寸之间用逗号隔开。这个二维向量只需要x和y维度，而不像三维向量（x,
    y, z）那样需要三维立方体的尺寸。向量中的第一个数字表示矩形沿x轴的宽度，第二个数字表示矩形沿y轴的长度。
- en: Remember that you’ll need to click the **Render** button to see the rectangle
    as a 2D shape.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 记得你需要点击**渲染**按钮才能将矩形显示为二维图形。
- en: Drawing Polygons with polygon
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用` polygon`命令绘制多边形
- en: If you want to create a 2D shape that isn’t built into OpenSCAD, you can create
    your own 2D shapes with the `polygon` command.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想创建一个OpenSCAD中没有内置的二维形状，你可以使用`polygon`命令来创建你自己的二维形状。
- en: 'The following statement uses the `polygon` command to draw a triangle with
    vertices at [0, 0], [10, 0], and [10, 10] ([Figure 3-5](#figure3-5)):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下语句使用`polygon`命令绘制一个三角形，顶点分别为[0, 0]，[10, 0]和[10, 10]（[图3-5](#figure3-5)）：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![f03005](image_fi/279547c03/f03005.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![f03005](image_fi/279547c03/f03005.png)'
- en: 'Figure 3-5: A triangle with three vertices'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-5：一个具有三个顶点的三角形
- en: A polygon is defined by a list of the shape’s corners, called *vertices*. Each
    vertex in this list is a vector containing the coordinates of a corner point in
    the polygon. Group each vertex as a vector within square brackets, then add an
    extra set of brackets around the entire list of vertices to organize the collection
    as a vector of vectors.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 多边形由一组形状的角点（*顶点*）定义。列表中的每个顶点都是一个包含多边形角点坐标的向量。将每个顶点作为一个向量放在方括号中，然后再在整个顶点列表周围加上一对方括号，将所有顶点组织为向量的向量。
- en: Be sure to list the vertices in order, as though you were walking around the
    edge of the polygon (in either direction). Also, you don’t need to specify the
    starting point twice; OpenSCAD will finish the polygon for you automatically.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要按顺序列出顶点，就像你绕着多边形的边缘行走一样（可以是任意方向）。另外，你不需要重复指定起始点；OpenSCAD会自动为你完成多边形的绘制。
- en: 'Since polygons can have any number of vertices, you can create increasingly
    complex shapes, like this one with eight vertices drawn with the following statement
    ([Figure 3-6](#figure3-6)):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于多边形可以有任意数量的顶点，你可以创建越来越复杂的形状，像这样一个有八个顶点的形状，通过以下语句绘制（[图3-6](#figure3-6)）：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![f03006](image_fi/279547c03/f03006.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![f03006](image_fi/279547c03/f03006.png)'
- en: 'Figure 3-6: A more complex polygon with eight vertices'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-6：一个具有八个顶点的更复杂的多边形
- en: Drawing Words with text
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用文本绘制单词
- en: Another way to use 2D shapes in your designs is to create symbolic patterns,
    such as words. Using textual elements in your designs can be useful for personalization.
    You may also want to use emoji fonts to access pre-drawn symbols or simply stamp
    a version or serial number onto your design.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计中使用二维形状的另一种方法是创建符号化的图案，例如文字。使用文本元素可以为你的设计增添个性化。你也可以使用表情符号字体来访问预先绘制的符号，或者仅仅在设计上印上版本号或序列号。
- en: Use the `text` command to draw text shapes in OpenSCAD. Text in OpenSCAD (as
    in other programming languages) is considered a *string of characters.* Since
    a string of characters can be arbitrarily long, quotation marks (`" "`) are used
    to indicate the beginning and end of the text string. Text strings can contain
    letters, punctuation, numbers, and (if the font used supports Unicode) emoji characters.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`text`命令在OpenSCAD中绘制文本形状。OpenSCAD中的文本（和其他编程语言一样）被视为*字符串*。由于字符串的长度可以是任意的，因此使用双引号（`"
    "`）来表示文本串的开始和结束。文本串可以包含字母、标点符号、数字，且如果所使用的字体支持Unicode，还可以包含表情符号字符。
- en: 'This statement creates the string `"Hello, OpenSCAD"` ([Figure 3-7](#figure3-7)):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这条语句创建了字符串`"Hello, OpenSCAD"`（[图3-7](#figure3-7)）：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![f03007](image_fi/279547c03/f03007.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![f03007](image_fi/279547c03/f03007.png)'
- en: 'Figure 3-7: Creating a 2D `text` shape'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-7：创建一个二维`text`形状
- en: Follow the `text` command with parentheses containing a string of characters.
    The strings should start and stop with double quotes (`" "`). The parentheses
    can also contain an optional `size` parameter, which sets the text size to 10
    in this case. Notice in [Figure 3-7](#figure3-7) that the tallest letters in the
    string reach the first tick mark (which represents 10 units) on the y-axis.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在`text`命令后面跟上括号，括号中包含一个字符串。字符串应该以双引号（`" "`）开始和结束。括号还可以包含一个可选的`size`参数，设置文本大小，这里设置为10。注意在[图3-7](#figure3-7)中，字符串中最高的字母达到了y轴上的第一个刻度（代表10单位）。
- en: 'The `size` parameter is optional for text shapes. If you leave off the `size`
    parameter, the default text size is 10\. Another optional parameter for drawing
    text shapes is `font`. You can also use the optional `font` parameter to draw
    text in any font installed on your computer. The following statement draws a string
    of text in Courier font ([Figure 3-8](#figure3-8)):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于文本形状，`size`参数是可选的。如果省略`size`参数，默认的文本大小为10。绘制文本形状的另一个可选参数是`font`。你还可以使用可选的`font`参数来绘制计算机上安装的任何字体的文本。以下语句绘制了一个Courier字体的文本串（[图3-8](#figure3-8)）：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![f03008](image_fi/279547c03/f03008.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![f03008](image_fi/279547c03/f03008.png)'
- en: 'Figure 3-8: Changing the `text` shape’s font to Courier'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-8：将`text`形状的字体更改为Courier
- en: 'Fonts that support Unicode characters will often contain emoji. You can draw
    any character supported by the font, including emoji shapes ([Figure 3-9](#figure3-9)):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 支持Unicode字符的字体通常包含表情符号。你可以绘制该字体支持的任何字符，包括表情符号形状（[图 3-9](#figure3-9)）：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![f03009](image_fi/279547c03/f03009.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![f03009](image_fi/279547c03/f03009.png)'
- en: 'Figure 3-9: Using `text` to draw a crown emoji'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-9：使用`text`绘制王冠表情符号
- en: 'It’s also possible to draw numeric values with the `text` command. If you want
    to create a shape with a numeric value ([Figure 3-10](#figure3-10)), be sure to
    convert the value to a string with the `str` function:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用`text`命令绘制数字值。如果你想创建一个带有数字值的形状（[图 3-10](#figure3-10)），请务必使用`str`函数将该值转换为字符串：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![f03010](image_fi/279547c03/f03010.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![f03010](image_fi/279547c03/f03010.png)'
- en: 'Figure 3-10: Drawing a `text` shape with numbers'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-10：绘制带有数字的`text`形状
- en: Rather than putting the number between quotation marks, apply the `str` function
    to a numeric value in order to turn it into a string. This is particularly helpful
    when the numeric value is stored in a variable, as we’ll see in Chapter 4.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 不要将数字放在引号之间，而是对数字值应用`str`函数，将其转换为字符串。当数字值存储在变量中时，这尤其有用，正如我们在第4章中看到的那样。
- en: Applying Transformation and Boolean Operations on 2D Shapes
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对2D形状应用变换和布尔操作
- en: You can apply the same transformation and Boolean operations you learned in
    Chapters 1 and 2 to 2D shapes—and it’s done pretty much the same way as when you
    apply them to 3D shapes. The only difference is that instead of requiring 3D vectors,
    the `translate`, `mirror`, and `resize` operations require 2D vectors containing
    x- and y-coordinates, and the `rotate` operation requires only a single angle
    of rotation (for the z-axis).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将第1章和第2章中学到的相同变换和布尔操作应用到2D形状上——这与应用于3D形状时几乎没有区别。唯一的不同是，`translate`、`mirror`和`resize`操作不再需要3D向量，而是需要包含x和y坐标的2D向量，而`rotate`操作只需要一个旋转角度（针对z轴）。
- en: 'For example, the following design uses `translate`, `difference`, and `rotate`
    to draw an askew rectangle with three circles cut out of it ([Figure 3-11](#figure3-11)):'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下设计使用`translate`、`difference`和`rotate`来绘制一个倾斜的矩形，并从中切出三个圆形（[图 3-11](#figure3-11)）：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![f03011](image_fi/279547c03/f03011.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![f03011](image_fi/279547c03/f03011.png)'
- en: 'Figure 3-11: Transformation and Boolean operations on 2D shapes'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-11：对2D形状应用变换和布尔操作
- en: 'Just as with the 3D shapes, the order in which you apply transformations and
    Boolean operations on a 2D shape will affect the arrangement and placement of
    the resulting shape. Consider the difference between subtracting a circle from
    a square versus subtracting a square from a circle. The following `difference`
    operation subtracts a circle from a square ([Figure 3-12](#figure3-12)):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在3D形状中一样，对2D形状应用变换和布尔操作的顺序会影响最终形状的排列和位置。考虑从正方形中减去圆形与从圆形中减去正方形之间的区别。以下`difference`操作从正方形中减去圆形（[图
    3-12](#figure3-12)）：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![f03012](image_fi/279547c03/f03012.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![f03012](image_fi/279547c03/f03012.png)'
- en: 'Figure 3-12: Subtracting a circle from a square'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-12：从正方形中减去圆形
- en: 'And this `difference` operation subtracts a square from a circle ([Figure 3-13](#figure3-13)):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 而这个`difference`操作将一个正方形从圆形中减去（[图 3-13](#figure3-13)）：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![f03013](image_fi/279547c03/f03013.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![f03013](image_fi/279547c03/f03013.png)'
- en: 'Figure 3-13: Subtracting a square from a circle'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-13：从圆形中减去正方形
- en: Extruding Shapes Vertically with linear_extrude
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`linear_extrude`垂直拉伸形状
- en: You can’t 3D-print 2D shapes directly, but you can use them as building blocks
    for creating 3D shapes (which can then be 3D-printed as physical objects). This
    section describes two of OpenSCAD’s powerful operations for creating 3D shapes
    from 2D shapes.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能直接3D打印2D形状，但可以将它们作为构建3D形状的基本构件（这些3D形状随后可以被3D打印成物理物体）。本节描述了OpenSCAD用于从2D形状创建3D形状的两个强大操作。
- en: 'The `linear_extrude` operation takes a flat shape and “lifts” it up along the
    z-axis while building walls corresponding to the shape’s initial boundary. The
    following statement extrudes the letter *A* into a 3D shape with a height of 5
    units ([Figure 3-14](#figure3-14)):'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`linear_extrude`操作将一个平面形状沿z轴“提升”，同时构建与形状初始边界相对应的墙壁。以下语句将字母* A *挤压成一个具有5个单位高度的3D形状（[图
    3-14](#figure3-14)）：'
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `linear_extrude` operation takes a single parameter, the height of the 3D
    shape you’re creating, followed by the 2D shape you’d like to stretch into 3D.
    As with the transformation operations you already know, end the entire statement
    with a semicolon.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`linear_extrude` 操作接受一个参数，即你要创建的 3D 形状的高度，后跟你希望拉伸成 3D 的 2D 形状。和你已经知道的变换操作一样，整个语句以分号结束。'
- en: You could also provide the `linear_extrude` operation the optional parameters
    of `twist`, `slices`, and `scale` to build more complex 3D shapes. The `twist`
    parameter specifies an angle at which to twist the 2D shape during extrusion.
    The `slices` parameter controls how smooth a twist will be—specifically, how many
    segments will be used to complete the twist. Since extrusion extends a shape upward,
    each of these segments will turn into a horizontal “slice,” which is why the parameter
    is named `slices`. If you don’t specify it, OpenSCAD will choose a relatively
    coarse value. The `scale` parameter changes the size of the 2D shape during extrusion.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以为 `linear_extrude` 操作提供可选参数 `twist`、`slices` 和 `scale` 来构建更复杂的 3D 形状。`twist`
    参数指定在拉伸过程中扭转 2D 形状的角度。`slices` 参数控制扭转的平滑度——具体来说，控制完成扭转时使用多少个段落。由于拉伸会将形状向上扩展，因此每个段落都会变成一个水平的“切片”，这就是为什么该参数命名为
    `slices`。如果你没有指定，OpenSCAD 会选择一个相对粗糙的值。`scale` 参数则在拉伸过程中改变 2D 形状的大小。
- en: '![f03014](image_fi/279547c03/f03014.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![f03014](image_fi/279547c03/f03014.png)'
- en: 'Figure 3-14: Linear extrusion of a 2D shape into a 3D shape'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-14：将 2D 形状线性拉伸成 3D 形状
- en: 'Use all of these parameters to transform a rectangle into the 3D shape drawn
    in [Figure 3-15](#figure3-15):'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用所有这些参数，将矩形转换为在 [图 3-15](#figure3-15) 中绘制的 3D 形状：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![f03015](image_fi/279547c03/f03015.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![f03015](image_fi/279547c03/f03015.png)'
- en: 'Figure 3-15: Twisting, scaling, and extending a 2D shape into a 3D shape with
    25 horizontal slices'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-15：将 2D 形状通过 25 个水平切片扭曲、缩放并扩展为 3D 形状
- en: The parameters `twist`, `slices`, and `scale` are optional. Although this example
    shows all three parameters used at once, you can use any variation, such as only
    `scale` or only `twist`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`twist`、`slices` 和 `scale` 参数是可选的。尽管这个例子展示了同时使用这三个参数，但你可以选择任意组合，例如只使用 `scale`
    或只使用 `twist`。'
- en: Extruding Shapes Along a Circle with rotate_extrude
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 沿圆形路径拉伸形状，使用 `rotate_extrude`
- en: 'Rather than extruding a 2D shape along a linear path, use the `rotate_extrude`
    operation to move the 2D shape along a circular path, which creates a donut-like
    shape called a *torus* ([Figure 3-16](#figure3-16)):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 与其沿直线路径拉伸 2D 形状，不如使用 `rotate_extrude` 操作将 2D 形状沿圆形路径移动，从而创建一个像*环形体*（[图 3-16](#figure3-16)）的形状：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![f03016](image_fi/279547c03/f03016.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![f03016](image_fi/279547c03/f03016.png)'
- en: 'Figure 3-16: The `rotate_extrude` operation of a 2D circle into a 3D torus'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-16：将 2D 圆形通过 `rotate_extrude` 操作转化为 3D 环形体
- en: The `rotate_extrude` operation is a two-step process that first rotates the
    2D shape by 90 degrees around the x-axis, then moves the 2D shape in a circle
    around the z-axis. If you were to cut out a slice of the resulting donut, the
    shape of that slice would look like the original 2D shape.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`rotate_extrude` 操作是一个两步过程，首先围绕 x 轴旋转 2D 形状 90 度，然后将 2D 形状沿 z 轴做圆形运动。如果你将结果中圆环的一部分切下来，这部分的形状会和原始的
    2D 形状相似。'
- en: When using `rotate_extrude`, take care to ensure that the shape doesn’t rotate
    into itself. In the code that draws [Figure 3-16](#figure3-16), you do this by
    first translating the shape away from the z-axis so that no parts of the 2D shape
    are touching the z-axis.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `rotate_extrude` 时，要注意确保形状不会与自身相交。在绘制 [图 3-16](#figure3-16) 的代码中，你可以通过先将形状从
    z 轴上移开，确保 2D 形状的任何部分都不接触 z 轴，从而避免这种情况。
- en: The `rotate_extrude` operation also takes an optional `angle` parameter that
    allows you to specify the angle of rotation. [Figure 3-17](#figure3-17) demonstrates
    a circle that has been extruded along a 135-degree rotation around the z-axis.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`rotate_extrude` 操作还接受一个可选的 `angle` 参数，允许你指定旋转角度。[图 3-17](#figure3-17) 展示了一个在
    z 轴上沿 135 度旋转拉伸的圆形。'
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![f03017](image_fi/279547c03/f03017.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![f03017](image_fi/279547c03/f03017.png)'
- en: 'Figure 3-17: The `rotate_extrude` with a 135-degree angle parameter'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-17：带有 135 度角度参数的 `rotate_extrude`
- en: Growing and Shrinking a Shape with offset
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 offset 进行形状的放大和缩小
- en: Imagine you want to build a fancy cross-shaped cookie cutter. You now know how
    to create a cross shape by performing a union of two rectangles, and you know
    how to extrude it by using `linear_extrude` to make it 3D. But to specify the
    wall thickness, you need the `offset` operation, which allows you either to grow
    or shrink a shape by a specific amount. Use `offset` to hollow out your cookie
    cutter by shrinking one cross, and then subtract the small cross from the larger
    one.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想制作一个别致的十字形饼干切割器。你现在知道如何通过联合两个矩形来创建十字形，并且知道如何使用`linear_extrude`将其拉伸为三维物体。但要指定墙厚，你需要使用`offset`操作，它允许你通过特定的值来扩展或缩小一个形状。使用`offset`来通过缩小一个十字形并从较大的十字形中减去它，来空心化你的饼干切割器。
- en: 'In the following design, pass `offset` a negative value to shrink your 2D cross
    ([Figure 3-18](#figure3-18)):'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下设计中，给`offset`传递负值来缩小你的二维十字形（[图 3-18](#figure3-18)）：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Place the code for the 2D shapes to offset in curly brackets following the `offset`
    operation. In parentheses, specify the amount (in millimeters) to offset. A positive
    value will grow a shape, and a negative value will shrink a shape.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 将要偏移的二维图形的代码放在大括号中，紧随`offset`操作。在括号内，指定偏移量（以毫米为单位）。正值将扩大形状，负值将缩小形状。
- en: '![f03018](image_fi/279547c03/f03018.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![f03018](image_fi/279547c03/f03018.png)'
- en: 'Figure 3-18: Shrinking an object by passing `offset` a negative value'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-18：通过传递负值给`offset`来缩小物体
- en: 'Now you can reuse that code to build the walls of your cross-shaped cookie
    cutter ([Figure 3-19](#figure3-19)):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以重用该代码来构建十字形饼干切割器的墙面（[图 3-19](#figure3-19)）：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![f03019](image_fi/279547c03/f03019.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![f03019](image_fi/279547c03/f03019.png)'
- en: 'Figure 3-19: Cross-shaped cookie cutter'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-19：十字形饼干切割器
- en: Define two squares to create the outer cross with a `union` operation 2. Next,
    define two more squares to create the inner cross 3, shrink that cross with `offset`,
    and then subtract it from the outer cross 1. This leaves you with a hollowed-out
    cross shape.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 定义两个正方形，通过`union`操作创建外部十字形。接着，再定义两个正方形创建内部十字形，使用`offset`将内部十字形缩小，然后从外部十字形中减去它。这样，你就得到了一个空心的十字形。
- en: Importing 2D Shapes with import
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入二维图形文件
- en: Just as with 3D shapes, you can import 2D shapes from files created in other
    2D design programs. OpenSCAD supports importing the *.dxf* and *.svg* 2D file
    formats. These formats are commonly used with popular 2D vector graphic design
    tools, such as Adobe Illustrator and Inkscape (an open source alternative to Adobe
    Illustrator). OpenSCAD only supports importing shapes that are closed polygons,
    containing no “open-ended” sections. Also, make sure you convert all segments
    in a *.dxf* file to straight lines.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 就像处理三维图形一样，你也可以从其他二维设计程序创建的文件中导入二维图形。OpenSCAD支持导入*.dxf*和*.svg*这两种二维文件格式。这些格式通常与流行的二维矢量图形设计工具一起使用，比如Adobe
    Illustrator和Inkscape（一个开源的Adobe Illustrator替代品）。OpenSCAD只支持导入封闭的多边形形状，不能包含任何“开口”部分。此外，确保将*.dxf*文件中的所有线段转换为直线。
- en: 'The syntax of the `import` command is the same for importing both 2D and 3D
    shapes. You just need to pass the filename in quotation marks to `import`, and
    make sure the file is saved in the same folder/directory as your project. For
    example, use the following statement to import the drawing in [Figure 3-20](#figure3-20):'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`import`命令的语法对于导入二维和三维图形是相同的。你只需要将文件名用引号括起来传递给`import`，并确保文件保存在与项目相同的文件夹/目录下。例如，使用以下语句导入[图
    3-20](#figure3-20)中的图形：'
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![f03020](image_fi/279547c03/f03020.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![f03020](image_fi/279547c03/f03020.png)'
- en: 'Figure 3-20: An imported *.dxf* vector graphic'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-20：导入的*.dxf*矢量图形
- en: Even though the imported file looks round, it actually consists of many short
    line segments, similar to the polygons you learned to create earlier in this chapter.
    Inkscape was used to draw this 2D smiley-face shape. An important final step in
    the process was to convert all of the line segments in the shape to very small
    straight lines.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管导入的文件看起来是圆形的，但它实际上由许多短线段组成，类似于你在本章早些时候学会创建的多边形。这个二维笑脸图形是使用Inkscape绘制的。该过程中的一个重要步骤是将形状中的所有线段转换为非常小的直线。
- en: 'Once you import a 2D shape, it behaves exactly like a built-in shape, and you
    can transform it and combine it with other shapes. The following statement first
    imports the smiley face shown in [Figure 3-20](#figure3-20), then extrudes it
    into the shape shown in [Figure 3-21](#figure3-21):'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦导入了二维图形，它就像内建的图形一样，你可以对其进行变换，并与其他图形结合。以下语句首先导入[图 3-20](#figure3-20)中展示的笑脸形状，然后将其拉伸成[图
    3-21](#figure3-21)中展示的形状：
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![f03021](image_fi/279547c03/f03021.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![f03021](image_fi/279547c03/f03021.png)'
- en: 'Figure 3-21: An extruded and scaled *.dxf* vector graphic'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-21：一个挤出并缩放后的 *.dxf* 向量图形
- en: Now you have a 3D smiley-face shape that you can 3D-print as a stamp.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你拥有一个可以进行 3D 打印的笑脸形状，能够作为一个印章使用。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to design and create 3D shapes based on 2D
    shapes. You now should be able to create, combine, and transform simple 2D shapes
    like circles, rectangles, polygons, and text. You can create both internal and
    external outlines of 2D shapes with the `offset` operation, import vector graphics,
    and transform 2D shapes into 3D shapes.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学习了如何基于 2D 形状设计并创建 3D 形状。现在你应该能够创建、组合和变换简单的 2D 形状，比如圆形、矩形、多边形和文本。你可以通过
    `offset` 操作创建 2D 形状的内外轮廓，导入向量图形，并将 2D 形状转换为 3D 形状。
- en: By now you should be able to imagine a wide variety of designs that you could
    create with OpenSCAD 2D and 3D shapes. Sometimes it’s easier to build a complex
    3D design by thinking about its 2D shadow first, and then you can stretch the
    2D shadow into 3D.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你应该能够想象出使用 OpenSCAD 的 2D 和 3D 形状可以创建的各种设计。有时候，先考虑复杂 3D 设计的 2D 投影，然后将其延伸为
    3D 形状，会更容易构建。
- en: 'Here are some important points to remember when working with 2D shapes:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在处理 2D 形状时需要记住的一些重要事项：
- en: Rendering a 2D design will display the actual 2D view of the shape, while a
    Preview window of the design will appear to add a small amount of height along
    the z-axis.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染 2D 设计会显示该形状的实际 2D 视图，而设计的预览窗口则会在 z 轴上增加少量的高度。
- en: '3D shape transformation vectors require three parameters: [x, y, z]; most 2D
    shape transformation vectors require only two parameters: [x, y].'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3D 形状变换向量需要三个参数：[x, y, z]；而大多数 2D 形状变换向量只需要两个参数：[x, y]。
- en: '2D rotations need only a single parameter: a number to represent the angle
    of rotation within the xy-plane.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2D 旋转仅需要一个参数：表示 xy 平面内旋转角度的数值。
- en: The Top view will often give you the best perspective when designing your 2D
    shapes.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶视图通常能提供设计 2D 形状时最佳的视角。
- en: Extruding 2D shapes and text is necessary in order to combine them with 3D shapes.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挤出 2D 形状和文本是将它们与 3D 形状结合的必要步骤。
- en: Text strings start and stop with double quotes.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本字符串以双引号开始和结束。
- en: You can use the `text` shape to draw numeric values by converting the value
    to a string with the `str` function.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用 `text` 形状通过将数值转换为字符串（使用 `str` 函数）来绘制数字值。
- en: Only fonts that support Unicode can be used to draw emoji, but think of how
    much fun you could have extruding emoji shapes!
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有支持 Unicode 的字体才能用于绘制表情符号，但想想看，挤出表情符号形状会有多有趣！
- en: No part of a 2D shape can cross the z-axis when you use `rotate_extrude` on
    that shape.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `rotate_extrude` 对 2D 形状进行变换时，2D 形状的任何部分都不能跨越 z 轴。
- en: Think of 2D shapes as a “cross section” of the resulting 3D shape from a `rotate_extrude`
    operation.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 2D 形状看作是通过 `rotate_extrude` 操作生成的 3D 形状的“截面”。
