["```\nint\n\nisdigit(int c)\n\n{\n\n  return (c >= '0' && c <= '9');\n\n}\n\nint\n\nishexdigit(int c)\n\n{\n\n  return (c >= '0' && c <= '9' || c >= 'A' && c <= 'F' || c >= 'a' && c <= 'f');\n\n}\n\nint\n\nisalpha(int c)\n\n{\n\n  return (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z');\n\n}\n\nint\n\nisupper(int c)\n\n{\n\n  return (c >= 'A' && c <= 'Z');\n\n}\n```", "```\nunsigned char table[128] = [ ... ];\n\n#define isdigit(c)    (table[(c) & 0x7f] & DIGIT)\n\n#define ishexdigit(c) (table[(c) & 0x7f] & HEXADECIMAL)\n\n#define isalpha(c)    (table[(c) & 0x7f] & (UPPER | LOWER))\n\n#define isupper(c)    (table[(c) & 0x7f] & UPPER)\n```", "```\n 1 <style>\n\n 2    canvas {\n\n 3      border: 5px solid black;\n\n 4    }\n\n 5 </style>\n\n 6 ...\n\n 7 <script>\n\n 8    $(function() {\n\n 9      var canvas = $('canvas')[0].getContext('2d');\n\n10\n\n11      // Get the canvas width and height.  Force them to be numbers\n\n12      // because attr yields strings and JavaScript often produces\n\n13      // unexpected results when using strings as numbers.\n\n14\n\n15      var height = Number($('canvas').attr('height'));\n\n16      var width = Number($('canvas').attr('width'));\n\n17\n\n18      canvas.translate(0, height);\n\n19      canvas.scale(1, -1);\n\n20    });\n\n21 </script>\n\n22 ...\n\n23 <body>\n\n24   <canvas width=\"500\" height=\"500\"></canvas>\n\n25 </body>\n```", "```\n 1  var grid = 25;                                // 25 pixel grid spacing\n\n 2\n\n 3  canvas.scale(grid, grid);\n\n 4  width = width / grid;\n\n 5  height = height / grid;\n\n 6  canvas.lineWidth = canvas.lineWidth / grid;\n\n 7  canvas.strokeStyle = \"rgb(0, 0, 0)\";          // black\n\n 8\n\n 9  function\n\n10  clear_and_draw_grid()\n\n11  {\n\n12    canvas.clearRect(0, 0, width, height);      // erase canvas\n\n13    canvas.save(); // save canvas settings\n\n14    canvas.setLineDash([0.1, 0.1]);             // dashed line\n\n15    canvas.strokeStyle = \"rgb(128, 128, 128)\";  // gray\n\n16    canvas.beginPath();\n\n17\n\n18    for (var i = 1; i < height; i++) {          // horizontal lines\n\n19      canvas.moveTo(0, i);\n\n20      canvas.lineTo(height, i);\n\n21    }\n\n22\n\n23    for (var i = 1; i < width; i++) {           // vertical lines\n\n24      canvas.moveTo(i, 0);\n\n25      canvas.lineTo(i, width);\n\n26    }\n\n27\n\n28    canvas.stroke();\n\n29    canvas.restore();                           // restore canvas settings\n\n30  }\n\n31\n\n32  clear_and_draw_grid();                        // call on start-up\n```", "```\n 1  for (var i = 0; i <= width; i++) {\n\n 2    canvas.beginPath();\n\n 3    canvas.fillStyle = \"rgb(255, 255, 0)\";     // yellow\n\n 4    canvas.arc(i, i, 0.25, 0, 2 * Math.PI, 0);\n\n 5    canvas.fill();\n\n 6\n\n 7    canvas.beginPath();\n\n 8    canvas.fillStyle = \"rgb(255, 0, 0)\";       // red\n\n 9    canvas.arc(i, 10, 0.2, 0, 2 * Math.PI, 0);\n\n10    canvas.fill();\n\n11  }\n```", "```\n1  <div>\n\n2    <label for=\"y\">Y Coordinate: </label>\n\n3    <input type=\"text\" size=\"3\" id=\"y\"/>\n\n4    <button id=\"draw\">Draw</button>\n\n5    <button id=\"erase\">Erase</button>\n\n6  </div>\n```", "```\n 1  $('#draw').click(function() {\n\n 2    if ($('#y').val() < 0 || $('#y').val() > height) {\n\n 3      alert('y value must be between 0 and ' + height);\n\n 4    }\n\n 5    else if (parseInt($('#y').val()) != $('#y').val()) {\n\n 6      alert('y value must be an integer');\n\n 7    }\n\n 8    else {\n\n 9      canvas.beginPath();                  // draw ideal line\n\n10      canvas.moveTo(0, 0);\n\n11      canvas.setLineDash([0.2, 0.2]);      // dashed line\n\n12      canvas.lineTo(width, $('#y').val());\n\n13      canvas.stroke();\n\n14\n\n15      var m = $('#y').val() / width;       // slope\n\n16\n\n17      canvas.fillStyle = \"rgb(0, 0, 0)\";\n\n18\n\n19      for (var x = 0; x <= width; x++) {   // draw dots on grid\n\n20        canvas.beginPath();\n\n21        canvas.arc(x, Math.round(x * m), 0.15, 0, 2 * Math.PI, 0);\n\n22        canvas.fill();\n\n23      }\n\n24\n\n25      $('#y').val('');                     // clear y value field\n\n26    }\n\n27  });\n\n28\n\n29  $('#erase').click(function() {\n\n30    clear_and_draw_grid();\n\n31  });\n```", "```\n 1  var y = 0;\n\n 2\n\n 3  canvas.fillStyle = \"rgb(0, 0, 0)\";\n\n 4\n\n 5  for (var x = 0; x <= width; x++) {         // draw dots on grid\n\n 6    canvas.beginPath();\n\n 7    canvas.arc(x, Math.round(y), 0.15, 0, 2 * Math.PI, 0);\n\n 8    canvas.fill();\n\n 9    y = y + m;\n\n10  }\n```", "```\n 1  var dx = width;\n\n 2  var dy = $('#y').val();\n\n 3  var d = 2 * dy - dx;\n\n 4  var y = 0;\n\n 5\n\n 6  dx *= 2;\n\n 7  dy *= 2;\n\n 8\n\n 9  canvas.fillStyle = \"rgb(255, 255, 0)\";\n\n10  canvas.setLineDash([0,0]);\n\n11\n\n12  for (var x = 0; x <= width; x++) {\n\n13    canvas.beginPath();\n\n14    canvas.arc(x, y, 0.4, 0, 2 * Math.PI, 0);\n\n15    canvas.stroke();\n\n16\n\n17    if (d >= 0) {\n\n18      y++;\n\n19      d -= dx;\n\n20    }\n\n21    d += dy;\n\n22  }\n```", "```\n1  var dy_minus_dx = dy - dx;\n\n2\n\n3  if (d >= 0) {\n\n4    y++;\n\n5    d -= dy_minus_dx;\n\n6  }\n\n7  else {\n\n8    d += dy;\n\n9  }\n```", "```\n        load    d                       load    d\n\n        cmp     #0                      cmp     #0\n\n        blt     a                       blt     a\n\n        load    y                       load    y\n\n        add     #1                      add     #1\n\n        store   y                       store   y\n\n        load    d                       load    d\n\n        sub     dx_plus_dy              sub     dx\n\n        bra     b\n\na:      add     dy              a:      add     dy\n\n        store   d                       store   d\n\nb:      ...                             ...\n```", "```\n 1  var canvas = $('canvas')[0].getContext('2d');\n\n 2  var width = $('canvas').attr('width');\n\n 3  var height = $('canvas').attr('height');\n\n 4\n\n 5  canvas.translate(0, height);\n\n 6  canvas.scale(1, -1);\n\n 7\n\n 8  var m = $('#y').val() / width;\n\n 9\n\n10  var dx = width;\n\n11  var dc = 255;\n\n12  var d = 2 * dc - dx;\n\n13  var color = 0;\n\n14\n\n15  for (var x = 0; x <= width; x++) {\n\n16    canvas.beginPath();\n\n17    canvas.strokeStyle = \"rgb(\" + color + \",\" + color + \",\" + color + \")\";\n\n18    canvas.moveTo(x, 0)\n\n19    canvas.lineTo(x, height);\n\n20    canvas.stroke();\n\n21\n\n22    if (d >= 0) {\n\n23      color++;\n\n24      d -= 2 * dx;\n\n25    }\n\n26    d += 2 * dc;\n\n27  }\n```", "```\n<canvas width=\"500\" height=\"500\"></canvas>\n\n<div>\n\n  <label for=\"degrees\">Degrees: </label>\n\n  <input type=\"text\" size=\"3\" id=\"degrees\"/>\n\n  <button id=\"draw\">Draw</button>\n\n  <button id=\"erase\">Erase</button>\n\n</div>\n```", "```\ncanvas.scale(1, -1);\n\ncanvas.translate(width / 2, -height / 2);\n\n$('#erase').click(function() {\n\n  canvas.clearRect(-width, -height, width * 2, height * 2);\n\n});\n\n$('#draw').click(function() {\n\n  if (parseFloat($('#degrees').val()) == 0)\n\n    alert('Degrees must be greater than 0');\n\n  else {\n\n    for (var angle = 0; angle < 4 * 360; angle += parseFloat($('#degrees').val())) {\n\n      var theta = 2 * Math.PI * angle / 360;\n\n      var r = theta * 10;\n\n      canvas.beginPath();\n\n      canvas.arc(r * Math.cos(theta), r * Math.sin(theta), 3, 0, 2 * Math.PI, 0);\n\n      canvas.fill();\n\n    }\n\n  }\n\n});\n```", "```\ncanvas.beginPath();\n\ncanvas.moveTo(0, 0);\n\nfor (var angle = 0; angle < 4 * 360; angle += parseFloat($('#degrees').val())) {\n\n  var theta = 2 * Math.PI * angle / 360;\n\n  var r = theta * 10;\n\n  canvas.lineTo(r * Math.cos(theta), r * Math.sin(theta));\n\n}\n\ncanvas.stroke();\n```", "```\nvar close_enough = 10;\n\nfunction\n\nplot(theta_1, theta_2)\n\n{\n\n  var r;\n\n  r = theta_1 * 10;\n\n  var x1 = r * Math.cos(theta_1);\n\n  var y1 = r * Math.sin(theta_1);\n\n  r = theta_2 * 10;\n\n  var x2 = r * Math.cos(theta_2);\n\n  var y2 = r * Math.sin(theta_2);\n\n  if (Math.sqrt(((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) < close_enough) {\n\n    canvas.moveTo(x1, y1);\n\n    canvas.lineTo(x2, y2);\n\n  }\n\n  else {\n\n    plot(theta_1, theta_1 + (theta_2 - theta_1) / 2);\n\n    plot(theta_1 + (theta_2 - theta_1) / 2, theta_2);\n\n  }\n\n}\n\n$('#draw').click(function() {\n\n  if (parseFloat($('#degrees').val()) == 0)\n\n    alert('Degrees must be greater than 0');\n\n  else {\n\n    canvas.beginPath();\n\n    for (var angle = 0; angle < 4 * 360; angle += parseFloat($('#degrees').val())) {\n\n      var old_theta;\n\n      var theta = 2 * Math.PI * angle / 360;\n\n      if (angle > 0)\n\n        plot(old_theta, theta);\n\n      old_theta = theta;\n\n    }\n\n  }\n\n  canvas.stroke();\n\n});\n```", "```\n 1  const int angles[] = {\n\n 2    0x3243f6a8, 0x1dac6705, 0x0fadbafc, 0x07f56ea6, 0x03feab76, 0x01ffd55b, 0x00fffaaa, 0x007fff55,\n\n 3    0x003fffea, 0x001ffffd, 0x000fffff, 0x0007ffff, 0x0003ffff, 0x0001ffff, 0x0000ffff, 0x00007fff,\n\n 4    0x00003fff, 0x00001fff, 0x00000fff, 0x000007ff, 0x000003ff, 0x000001ff, 0x000000ff, 0x0000007f,\n\n 5    0x0000003f, 0x0000001f, 0x0000000f, 0x00000008, 0x00000004, 0x00000002, 0x00000001, 0x00000000\n\n 6  };\n\n 7\n\n 8  int angle = (desired_angle_in_degrees / 360 * 2 * 3.14159265358979323846) * 0x40000000;\n\n 9\n\n10  int x = (int)(0.6072529350088812561694 * 0x40000000);\n\n11  int y = 0;\n\n12\n\n13  for (int index = 0; index < 32; index++) {\n\n14    int x_prime;\n\n15    int y_prime;\n\n16\n\n17    if (angle < 0) {\n\n18      x_prime = x + (y >> index);\n\n19      y_prime = y - (x >> index);\n\n20      angle += angles[index];\n\n21    }\n\n22    else {\n\n23      x_prime = x - (y >> index);\n\n24      y_prime = y + (x >> index);\n\n25      angle -= angles[index];\n\n26    }\n\n27\n\n28    x = x_prime;\n\n29    y = y_prime;\n\n30  }\n```", "```\nE draw a line ending at a leaf\n\nB draw a branch line\n\nL save position and angle, turn left 45°\n\nR restore position and angle, turn right 45°\n```", "```\nB → B B\n\nE → B L E R E\n```", "```\nk = knit\n\np = purl\n\ns = slip first stitch purl wise\n\nrow1 → s   p  k k p p k k p p  k  p p k k p p k k   p   k k p p k k p p  k  p p k k p p k k   p   k\n\nrow2 → s   k  p p k k p p k k  p  k k p p k k p p   k   p p k k p p k k  p  k k p p k k p p   k   k\n\nrow5 → s   p p k k p p k k   p p p k k p p k k   p p p k k p p k k   p p p k k p p k k   p p k\n\nrow6 → s   k k p p k k p p   k k k p p k k p p   k k k p p k k p p   k k k p p k k p p   k k k\n\nsection → row1 row2 row1 row2 row5 row6 row5 row6 row2 row2 row2 row2 row6 row5 row6 row5\n\nscarf → section ...\n```", "```\nfor (y = 0; y < height; y++)\n\n  for (x = 0; x < width; x++)\n\n    if (value_of_pixel_at(x, y) > 127)\n\n      draw_white_pixel_at(x, y);\n\n    else\n\n      draw_black_pixel_at(x, y);\n```", "```\nfor (y = 0; y < height; y++)\n\n for (x = 0; x < width; x++)\n\n  if (value_of_pixel_at(x, y) > bayer_matrix[y % matrix_size][x % matrix_size])\n\n    draw_white_pixel_at(x, y);\n\n  else\n\n    draw_black_pixel_at(x, y);\n```", "```\nfor (y = 0; y < height; y++)\n\n  for (x = 0; x < width; x++)\n\n    if (value_of_pixel_at(x, y) > random_number_between_0_and_255())\n\n      draw_white_pixel_at(x, y);\n\n    else\n\n      draw_black_pixel_at(x, y);\n```", "```\nfor (y = 0; y < height; y++)\n\n  for (error = x = 0; x < width; x++)\n\n    if (value_of_pixel_at(x, y) + error > 127)\n\n      draw_white_pixel_at(x, y);\n\n      error = -(value_of_pixel_at(x, y) + error);\n\n    else\n\n      draw_black_pixel_at(x, y);\n\n      error = value_of_pixel_at(x, y) + error;\n```", "```\nfor (y = 0; y < height; y++)\n\n  errors_a = errors_b;\n\n  errors_b = 0;\n\n  this_error = 0;\n\n  for (x = 0; x < width; x++)\n\n    if (value_of_pixel_at(x, y) > bayer_matrix[y % matrix_size][x % matrix_size])\n\n      draw_white_pixel_at(x, y);\n\n      this_error = -(value_of_pixel_at(x, y) + this_error + errors_a[x + 1]);\n\n    else\n\n      draw_black_pixel_at(x, y);\n\n      this_error = value_of_pixel_at(x, y) + this_error + errors_a[x + 1];\n\n    this_error = this_error * 7 / 16;\n\n    errors_b[x] += this_error * 3 / 16;\n\n    errors_b[x + 1] += this_error * 5 / 16;\n\n    errors_b[x + 2] += this_error * 1 / 16;\n```", "```\nfor (each pixel along the Hilbert curve)\n\n  error = weighted average of last 16 pixels\n\n  if (value_of_pixel_at(x, y) + error > 127)\n\n    draw_white_pixel_at(x, y);\n\n  else\n\n    draw_black_pixel_at(x, y);\n\n  remove the oldest weighted error value\n\n  add the error value from the current pixel\n```"]