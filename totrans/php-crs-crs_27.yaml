- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 22 STRUCTURING AN OBJECT-ORIENTED WEB APPLICATION
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 22 面向对象的 Web 应用程序结构
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: In the preceding chapter, we used object- oriented PHP code to create a simple
    two-page website controlled from an Application class. In this chapter, we’ll
    revisit that website and explore how to further leverage OOP techniques to improve
    its structure. You’ll learn how to use multiple classes to compartmentalize the
    application logic, and you’ll see how inheritance can help share code among those
    classes to cut down on redundancy.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们使用面向对象的 PHP 代码创建了一个由 Application 类控制的简单两页网站。在本章中，我们将重新访问该网站，并探讨如何进一步利用
    OOP 技术来改进其结构。你将学习如何使用多个类来划分应用程序逻辑，并看到继承如何帮助这些类之间共享代码，从而减少冗余。
- en: Dividing the application logic across multiple classes will help make the site
    more manageable. This may seem trivial for a two-page website, but imagine if
    the site grew to include tens, hundreds, or thousands of pages. The Application
    class would quickly become unwieldy. It would be imperative to organize the code
    into different types of actions and assign those actions to different classes.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 将应用程序逻辑划分到多个类中将有助于使站点更易于管理。这对于一个包含两页的网站来说可能看起来微不足道，但想象一下，如果该网站扩展到包含数十、数百甚至数千页，Application
    类很快就会变得不堪重负。此时，必须将代码组织成不同类型的操作，并将这些操作分配给不同的类。
- en: For our application in [Chapter 21](chapter21.xhtml), two main types of actions
    need to be performed. The first is deciding what to do when a request comes into
    the web server. We can assign this task to a front-controller class that will
    examine each incoming request, including its URL pattern and any data variables
    received, and decide which type of page is appropriate to be returned to the web
    client.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们在[第 21 章](chapter21.xhtml)中的应用程序，需要执行两种主要类型的操作。第一种是在请求进入 Web 服务器时决定做什么。我们可以将此任务分配给一个前端控制器类，该类将检查每个传入的请求，包括其
    URL 模式和收到的任何数据变量，并决定返回给 Web 客户端的页面类型。
- en: The other main action is displaying the requested page. We can assign this task
    to a range of page-generating controller classes. One such class might be designed
    for displaying basic pages (such as home and Contact Us), another for displaying
    pages with security features like logging in and updating passwords, another for
    product listings, and so on. Each of these page-controller classes can operate
    knowing that the front controller has already made the decision to return the
    appropriate page.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个主要操作是显示请求的页面。我们可以将此任务分配给一系列页面生成控制器类。例如，一个类可以设计用于显示基本页面（如主页和联系我们），另一个用于显示带有安全功能的页面，如登录和更新密码，另一个用于显示产品列表，等等。每个页面控制器类可以在前端控制器已经做出返回适当页面的决策后，继续工作。
- en: Separating Display and Front-Controller Logic
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分离显示和前端控制器逻辑
- en: Let’s start the process of improving our application architecture by separating
    the front-controller decision logic (in the Application class) from the basic
    page-generation actions for the home page and Contact Us page. We’ll move the
    latter into a new class called DefaultController. The name reflects that the home
    page is the default page displayed when the URL pattern / is requested, but the
    class could also reasonably be named BasicPageController, HomePageController,
    or something similar.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将前端控制器决策逻辑（在 Application 类中）与主页和联系我们页面的基本页面生成操作分离，开始改进我们的应用架构。我们将后者移到一个名为
    DefaultController 的新类中。这个名字反映了当请求 URL 模式 / 时，主页是默认显示的页面，但该类也可以合理地命名为 BasicPageController、HomePageController
    或类似名称。
- en: Copy *src/Application.php*, name the copy *src/DefaultController.php*, and delete
    the run() method from this new DefaultController class. Also make the homepage()
    and contactUs() methods public so that they can still be called from the Application
    class. After these changes, the file should match [Listing 22-1](#lis22-1).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 复制*src/Application.php*，将副本命名为*src/DefaultController.php*，并从这个新 DefaultController
    类中删除 run() 方法。还需要将 homepage() 和 contactUs() 方法设为 public，以便它们仍然可以从 Application
    类中调用。经过这些更改后，文件应该与[清单 22-1](#lis22-1)一致。
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 22-1: Declaring the DefaultController class'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 22-1：声明 DefaultController 类
- en: This new DefaultController class has a constant for the path to the template
    files, a twig property for rendering the templates, a constructor method, and
    homepage() and contactUs() methods for displaying the two pages of the web application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新的 DefaultController 类有一个常量用于模板文件的路径，一个用于渲染模板的 twig 属性，一个构造方法，以及用于显示 Web 应用程序两个页面的
    homepage() 和 contactUs() 方法。
- en: Now that we’ve encapsulated the logic for displaying the web pages in a separate
    class, we can simplify the Application class to focus only on deciding which page
    to display. All we need to keep in Application is the run() method, which will
    determine which page to display and invoke the corresponding DefaultController
    method. Update *src/Application.php* as shown in [Listing 22-2](#lis22-2).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将显示网页的逻辑封装到一个单独的类中，我们可以简化 Application 类，让它仅专注于决定显示哪个页面。我们只需要在 Application
    中保留 run() 方法，它将决定显示哪个页面并调用相应的 DefaultController 方法。按照 [清单 22-2](#lis22-2) 更新 *src/Application.php*。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 22-2: The simplified Application class'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 22-2：简化的 Application 类
- en: Our updated Application class’s only content, the run() method, begins by creating
    a new DefaultController object. Then, in the switch statement, we invoke either
    that object’s contactUs() method ❶ or homepage() method ❷ to display the appropriate
    page based on the action received in the HTTP request.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们更新后的 Application 类唯一的内容，即 run() 方法，首先创建一个新的 DefaultController 对象。然后，在 switch
    语句中，我们根据 HTTP 请求中收到的动作，调用该对象的 contactUs() 方法❶或 homepage() 方法❷来显示相应的页面。
- en: 'In this new arrangement, Application is functioning as a true front controller:
    it receives requests from the client and decides how to respond. Meanwhile, the
    code that generates and prints a response has been delegated to the DefaultController
    class. For our simple two-page site, this may seem like software architecture
    overkill, but for more sophisticated websites, this separation of front-controller
    logic from page-generation logic means that when we add methods for many pages,
    we won’t end up with a single, overcrowded Application class trying to do too
    many things.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种新安排中，Application 充当了真正的前端控制器：它接收来自客户端的请求并决定如何响应。与此同时，生成和打印响应的代码已被委托给 DefaultController
    类。对于我们这个简单的两页网站来说，这看起来可能是过度设计，但对于更复杂的网站，这种将前端控制器逻辑与页面生成逻辑分离的做法意味着，当我们为多个页面添加方法时，我们就不会遇到单一的、过于拥挤的
    Application 类去做太多的事情。
- en: For example, say we have some pages that can be accessed only by a logged-in
    user. We could encapsulate the methods for displaying these pages in a SecureActions
    controller class. Then we would check whether the user is logged in within the
    front-controller Application class and invoke methods of SecureActions only if
    the user is logged in. Otherwise, we could offer the user an error page or login
    page as appropriate.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有一些页面只能由已登录的用户访问。我们可以将显示这些页面的方法封装在一个 SecureActions 控制器类中。然后，我们会在前端控制器
    Application 类中检查用户是否已登录，只有当用户已登录时才调用 SecureActions 的方法。否则，我们可以根据需要向用户提供一个错误页面或登录页面。
- en: Another example of the value of separating front-controller actions from page
    controllers is testing the incoming URL patterns for data parameters. Let’s say
    some of the pages of our website display news items by using a NewsItem page controller
    class. The methods of this class need the ID of the news item to be retrieved
    from a database or file store, based on a URL pattern such as */?action=news&id=<id>*.
    In this case, our front controller can check for an integer ID along with the
    news action, then pass that ID to an appropriate NewsItem object method. If no
    such integer ID is found in the URL, we can offer the user an error page instead.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 将前端控制器动作与页面控制器分离的另一个好处是测试传入 URL 模式中的数据参数。假设我们网站的一些页面通过使用 NewsItem 页面控制器类来显示新闻项。该类的方法需要从数据库或文件存储中检索新闻项的
    ID，这取决于 URL 模式，如 */?action=news&id=<id>*。在这种情况下，我们的前端控制器可以检查 URL 中的整数 ID 和新闻动作，然后将该
    ID 传递给相应的 NewsItem 对象方法。如果 URL 中没有找到这样的整数 ID，我们可以向用户提供一个错误页面。
- en: In both of these examples, the methods in the page-controller classes can be
    written knowing that any required checks and decisions (determining whether the
    user is logged in or retrieving a news item ID) have already taken place and been
    satisfied. We’re separating the decision of *what to do* (the front controller)
    from the actions that define *how we do it* (the page-controller class methods).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个例子中，页面控制器类中的方法可以在已知任何必要的检查和决策（如判断用户是否已登录或检索新闻项 ID）已经完成并得到满足的情况下编写。我们正在将
    *做什么*（前端控制器）的决策与定义 *如何做*（页面控制器类方法）的动作分离开来。
- en: Using Multiple Controller Classes
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用多个控制器类
- en: 'Our DefaultController class works well for displaying simple pages with static
    content such as the home page, but pages with other features would benefit from
    being organized within their own specialized controller classes. For example,
    an e-commerce site would likely have several kinds of pages related to products:
    a list of all available products, search results showing products that match a
    particular user query, pages showing the details of a single product, and so on.
    Each of these pages would likely need a way of interacting with objects of a Product
    class, perhaps passed to the page templates in a $products array or a single $product
    object.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 DefaultController 类适用于显示像首页这样包含静态内容的简单页面，但具有其他功能的页面会受益于组织在自己的专门控制器类中。例如，一个电子商务网站可能会有几种与产品相关的页面：列出所有可用产品的页面、显示与特定用户查询匹配的产品的搜索结果页面、展示单一产品详情的页面，等等。每个页面可能需要一种与
    Product 类的对象交互的方法，可能是将这些对象作为 $products 数组或单个 $product 对象传递到页面模板中。
- en: Our DefaultController class isn’t currently equipped to handle these kinds of
    product-related operations. We could extend and modify the class, but a more logical
    approach would be to create a separate ProductController class to handle the specialized
    operations required to display pages related to products. Similarly, pages that
    include login forms might have their own LoginController class, pages for displaying
    and editing a shopping cart would have their own CartController class, and so
    on.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 DefaultController 类当前无法处理这些与产品相关的操作。我们可以扩展和修改该类，但更合逻辑的做法是创建一个单独的 ProductController
    类来处理显示与产品相关页面所需的专门操作。同样，包含登录表单的页面可能有自己的 LoginController 类，显示和编辑购物车的页面可能有自己的 CartController
    类，等等。
- en: To illustrate the benefit of multiple controller classes, and to demonstrate
    how easy it is to add more pages and sections to an object-oriented web application,
    we’ll add a Product List page to our website, as shown in [Figure 22-1](#fig22-1),
    and we’ll create a ProductController class for displaying this page.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示多个控制器类的好处，并演示如何轻松地为面向对象的 Web 应用程序添加更多页面和部分，我们将在我们的网站上添加一个产品列表页面，如[图 22-1](#fig22-1)所示，并且我们将创建一个
    ProductController 类来展示这个页面。
- en: '![](../images/figure22-1.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure22-1.jpg)'
- en: 'Figure 22-1: The Product List page we’ll create'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 22-1：我们将创建的产品列表页面
- en: Our new page will display the name and price of a collection of products, where
    each product is an instance (object) of a Product class. Using Twig template inheritance,
    we’ll give the page the same navigation bar and header content as the other pages
    of the website. We’ll coordinate the page’s display from our new ProductController
    class, which will be designed specifically to gather Product objects in an array
    that can be passed to the Twig template.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新页面将显示一组产品的名称和价格，其中每个产品都是 Product 类的一个实例（对象）。通过使用 Twig 模板继承，我们将为页面提供与网站其他页面相同的导航栏和头部内容。我们将通过我们新的
    ProductController 类来协调页面的显示，该类将专门用于收集可以传递到 Twig 模板中的 Product 对象数组。
- en: To build the new page, we’ll first create the Product class to represent each
    product’s name and price. Create a new file, *src/Product.php*, containing the
    code in [Listing 22-3](#lis22-3).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建新页面，我们将首先创建 Product 类来表示每个产品的名称和价格。创建一个新文件，*src/Product.php*，其中包含[清单 22-3](#lis22-3)中的代码。
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 22-3: The Product class'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 22-3：Product 类
- en: 'We declare two public properties for each Product object: name and price. Then
    we declare a constructor method ❶ that will take in initial values for each of
    these properties when creating a new Product object.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为每个 Product 对象声明了两个公共属性：name 和 price。然后，我们声明了一个构造方法 ❶，该方法将在创建新 Product 对象时接受这两个属性的初始值。
- en: Now that we have a Product class, we can create the ProductController class
    for displaying the page. Create a new *src/ProductController.php* file as shown
    in [Listing 22-4](#lis22-4).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了 Product 类，可以创建 ProductController 类来显示页面。创建一个新的 *src/ProductController.php*
    文件，如[清单 22-4](#lis22-4)所示。
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 22-4: The src/ProductController.php file declaring the ProductController
    class'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 22-4：声明 ProductController 类的 src/ProductController.php 文件
- en: 'The ProductController class’s constructor method is similar to that of the
    DefaultController class: it performs the setup necessary for working with the
    Twig templates. What distinguishes this controller from the other is its productList()
    method for displaying the new Product List page.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: ProductController 类的构造方法类似于 DefaultController 类的构造方法：它执行与 Twig 模板协作所需的设置。该控制器与其他控制器的不同之处在于它具有用于显示新产品列表页面的
    productList() 方法。
- en: Within that method, we create three Product objects and package them into a
    $products array ❶. Then we set the $template variable to 'productList.xhtml.twig',
    the new Twig template file we’ll create to list all the products. We next construct
    the $args array. It maps the 'products' key (which will become a Twig variable
    name) to $products, our array of Product objects ❷. Then we pass the $template
    and $args variables to Twig to generate the HTML needed for the page ❸.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在该方法中，我们创建了三个 Product 对象，并将它们打包成 $products 数组 ❶。然后，我们将 $template 变量设置为 'productList.xhtml.twig'，这是我们将创建的新
    Twig 模板文件，用来列出所有产品。接着，我们构建了 $args 数组。它将 'products' 键（将成为一个 Twig 变量名）映射到 $products，这个包含
    Product 对象的数组 ❷。然后，我们将 $template 和 $args 变量传递给 Twig，生成页面所需的 HTML 代码 ❸。
- en: We next need to update the front-controller logic in our Application class to
    call the ProductController class’s productList() method when the value of action
    in the URL is products. Update *src/Application.php* to match [Listing 22-5](#lis22-5).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要更新 Application 类中的前端控制器逻辑，当 URL 中的 action 值为 products 时，调用 ProductController
    类的 productList() 方法。更新 *src/Application.php*，使其与[清单 22-5](#lis22-5)相匹配。
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 22-5: Updating the Application class to handle the products case'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 22-5：更新 Application 类以处理产品案例
- en: In the run() method, we create $productController, a variable referencing a
    new ProductController object ❶. Then we add a new case to the switch statement
    ❷. When the action in the URL has the value products, we’ll send a message to
    our ProductController object to invoke its productList() method.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在 run() 方法中，我们创建了 $productController 变量，它引用了一个新的 ProductController 对象 ❶。然后我们向
    switch 语句中添加了一个新的 case ❷。当 URL 中的 action 值为 products 时，我们将向 ProductController
    对象发送消息，调用它的 productList() 方法。
- en: We can now write the Twig template to loop through and display the provided
    array of products. Create the new Twig template file *templates/productList.xhtml.twig*
    as shown in [Listing 22-6](#lis22-6).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以编写 Twig 模板，循环并显示提供的产品数组。创建新的 Twig 模板文件 *templates/productList.xhtml.twig*，如[清单
    22-6](#lis22-6)所示。
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 22-6: The productList.xhtml.twig template'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 22-6：productList.xhtml.twig 模板
- en: Like our other page templates, this one inherits from *base.xhtml.twig*, giving
    it access to all the content shared across pages. We’re therefore able to focus
    on just filling in the blocks from that base template that need to be customized.
    First, we override the pageTitle Twig block with the text Product List. Then we
    override the productsLink Twig block with the text active to highlight this page’s
    link in the navigation bar (we’ll add a new navigation bar link to the base template
    next).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 像我们其他的页面模板一样，这个模板继承自 *base.xhtml.twig*，从而使其能够访问所有页面共享的内容。因此，我们可以专注于只填充基模板中需要自定义的块。首先，我们重写
    pageTitle Twig 块，设置为 "Product List"。然后，我们重写 productsLink Twig 块，将其文本设置为 active，以在导航栏中突出显示该页面的链接（接下来我们将在基模板中添加一个新的导航栏链接）。
- en: Next, we override the main Twig block with the page-specific body content. The
    centerpiece of this content is a loop through all the Product objects in the products
    Twig array variable to generate the items of an HTML definition list ❶. The name
    of each product is declared as the definition term (<dt>), and the definition
    data element (<dd>) is the price of the product, formatted to two decimal places
    by using the Twig number_format filter. If the products array is empty, a Twig
    else statement will display an appropriate message.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们重写了主要的 Twig 块，以填充页面特定的主体内容。该内容的核心是一个循环，通过所有的 Product 对象，遍历 products Twig
    数组变量，从而生成 HTML 定义列表项 ❶。每个产品的名称作为定义项（<dt>）声明，定义数据元素（<dd>）是该产品的价格，并使用 Twig 的 number_format
    过滤器将其格式化为两位小数。如果 products 数组为空，则 Twig else 语句将显示相应的消息。
- en: Our final action to get our Product List page working is to add a new item to
    its navigation bar in the base template. Update *templates/base.xhtml.twig* to
    match [Listing 22-7](#lis22-7).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使 Product List 页面正常工作的最后一个步骤是，在基模板的导航栏中添加一个新的项目。更新 *templates/base.xhtml.twig*，使其与[清单
    22-7](#lis22-7)相匹配。
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 22-7: Adding the product list link to the base.xhtml.twig template'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 22-7：将产品列表链接添加到 base.xhtml.twig 模板
- en: We add a third item to the navigation bar for the Product List page. As with
    the other links, we include a class attribute containing a Twig block named productsLink
    so the link can be styled active as needed.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在导航栏中为 Product List 页面添加了第三个项目。与其他链接一样，我们包含了一个 class 属性，里面有一个名为 productsLink
    的 Twig 块，以便在需要时为该链接添加 active 样式。
- en: We’ve now added a Product List page to our website. In the new ProductController
    class, our productList() method creates an array of objects and uses the Twig
    template *templates/productList.xhtml.twig* to create the HTML for the page. Adding
    a new navigation link to our base Twig template was easy. Clicking that link creates
    a GET request with action=products. In our Application class front controller,
    an instance of the ProductController is created so that when this value of action
    is found in the request URL, the productList() method can be invoked. In all,
    the majority of the new code for this product list feature is well organized in
    its own controller class and corresponding Twig template.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已在网站上添加了一个产品列表页面。在新的 ProductController 类中，我们的 productList() 方法创建了一个对象数组，并使用
    Twig 模板 *templates/productList.xhtml.twig* 来生成页面的 HTML。向我们的基础 Twig 模板添加一个新的导航链接非常简单。点击该链接会创建一个包含
    action=products 的 GET 请求。在我们的 Application 类的前端控制器中，创建了一个 ProductController 的实例，这样当请求
    URL 中找到该 action 的值时，就可以调用 productList() 方法。总的来说，产品列表功能的新代码大部分都很好地组织在它自己的控制器类和相应的
    Twig 模板中。
- en: Sharing Controller Features Through Inheritance
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过继承共享控制器功能
- en: 'As a last step, let’s use the OOP principle of inheritance to streamline our
    controller classes. Right now, DefaultController and ProductController share several
    lines of identical code: both declare a PATH_TO_TEMPLATES constant, have a private
    twig property, and have identical constructor methods to create a Twig\Environment
    object. If we were to create more controller classes (for login security, shopping
    carts, and so on), they would also need this identical code.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后一步，让我们使用面向对象编程中的继承原则来简化我们的控制器类。目前，DefaultController 和 ProductController
    有几行相同的代码：都声明了一个 PATH_TO_TEMPLATES 常量，都有一个私有的 twig 属性，并且有相同的构造方法来创建一个 Twig\Environment
    对象。如果我们需要创建更多的控制器类（如登录安全、购物车等），它们也需要这些相同的代码。
- en: To avoid all this repetition, we’ll take the common properties and behaviors
    all controller classes should have and make them part of a general Controller
    superclass. The individual controller classes, such as DefaultController and ProductController,
    will inherit from this superclass and extend it with their own unique properties
    and methods. [Figure 22-2](#fig22-2) shows a diagram of the class structure we’ll
    create.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这些重复，我们将把所有控制器类应该具备的共同属性和行为提取出来，成为一个通用的 Controller 父类。各个具体的控制器类，例如 DefaultController
    和 ProductController，将从这个父类继承，并用自己的独特属性和方法扩展它。[图 22-2](#fig22-2) 显示了我们将要创建的类结构的图示。
- en: '![](../images/figure22-2.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure22-2.jpg)'
- en: 'Figure 22-2: The Controller superclass and its DefaultController and ProductController
    subclasses'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 22-2：Controller 父类及其 DefaultController 和 ProductController 子类
- en: We’ll declare our new Controller class as abstract, meaning we can never actually
    create a Controller object. This is fitting since the Controller class exists
    only to store the general code that all controllers should have and to be subclassed
    by the specific controller classes we’ll want to instantiate. Remember, declaring
    a class abstract is a way to tell other programmers (and yourself in the future)
    that you don’t want the class to be instantiated.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把新的 Controller 类声明为抽象类，这意味着我们无法实际创建一个 Controller 对象。这是合适的，因为 Controller 类仅存在于存储所有控制器应该具有的通用代码，并且供我们想要实例化的具体控制器类进行子类化。记住，声明一个类为抽象类是一种告知其他程序员（以及未来的自己）你不希望该类被实例化的方式。
- en: In [Figure 22-2](#fig22-2), notice the plus signs (+) denoting public methods
    and constants, as well as the hash mark (#) next to the twig property in the Controller
    superclass, which indicates this property has protected visibility, not public
    or private. We wouldn’t want this twig property to be public, since it could be
    incorrectly changed or used by any code in the web application with access to
    a Controller object or one of its subclasses. However, if we were to make the
    twig property private, the code in the methods of our subclasses wouldn’t have
    access to it either. This would be a problem, since using Twig to render templates
    is a core behavior of all our controller classes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 22-2](#fig22-2)中，注意加号（+）表示公共方法和常量，以及控制器父类中 twig 属性旁边的井号（#），这表示该属性具有保护可见性，而不是公共或私有可见性。我们不希望这个
    twig 属性是公共的，因为它可能会被任何访问到 Controller 对象或其子类的代码错误地更改或使用。然而，如果我们将 twig 属性设为私有，子类方法中的代码也无法访问它。这会造成问题，因为使用
    Twig 渲染模板是我们所有控制器类的核心行为。
- en: Giving the twig property protected visibility ensures that subclasses of Controller
    can access it, while preventing direct access by any code outside the Controller
    class hierarchy. This is a useful real-world example of the inheritance concepts
    we examined in [Chapter 19](chapter19.xhtml).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将 twig 属性设置为 protected 可确保 Controller 的子类可以访问它，同时防止任何位于 Controller 类层次结构之外的代码直接访问它。这是我们在[第
    19 章](chapter19.xhtml)中探讨的继承概念的一个实用实例。
- en: Listing 22-8 shows the code for the Controller superclass. Create *src/Controller.php*
    containing the code from this listing.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 22-8 显示了 Controller 超类的代码。创建包含此清单代码的 *src/Controller.php* 文件。
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Listing 22-8: The Controller superclass'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 22-8：Controller 超类
- en: We declare the class to be abstract so it can’t be instantiated ❶, and we designate
    the twig property as protected so it will be available to the subclasses ❷. Otherwise,
    this code is identical to the code at the start of our DefaultController and ProductController
    classes. Now that this code lives in the Controller class, the redundant parts
    can be removed. [Listing 22-9](#lis22-9) shows the much-simplified DefaultController
    class code.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将类声明为抽象类，因此它不能被实例化 ❶，并且将 twig 属性指定为 protected，以便子类可以访问它 ❷。除此之外，这段代码与 DefaultController
    和 ProductController 类开始时的代码相同。现在，这段代码已经移到 Controller 类中，冗余部分可以被删除。[清单 22-9](#lis22-9)
    显示了简化后的 DefaultController 类代码。
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Listing 22-9: The simplified DefaultController class, a subclass of Controller'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 22-9：简化后的 DefaultController 类，Controller 的子类
- en: We declare that DefaultController extends the Controller class, allowing it
    to inherit the constructor and twig property. Thanks to this inheritance, DefaultController
    now has only two methods of its own, for displaying the home page and Contact
    Us templates. We can similarly streamline the ProductController class code, as
    shown in [Listing 22-10](#lis22-10).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明 DefaultController 扩展 Controller 类，从而使其继承构造函数和 twig 属性。由于继承的存在，DefaultController
    现在只有两个自己的方法，用于显示主页和联系我们模板。我们可以以类似方式简化 ProductController 类的代码，如[清单 22-10](#lis22-10)所示。
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Listing 22-10: The simplified ProductController class, a subclass of Controller'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 22-10：简化后的 ProductController 类，Controller 的子类
- en: Again, we use extends Controller when declaring the class so that ProductController
    will inherit from Controller. The only method specific to the subclass is productList()
    for displaying the Product List page.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 再次声明类时，我们使用 `extends Controller`，使得 ProductController 能够继承自 Controller。子类特有的唯一方法是
    productList()，用于显示产品列表页面。
- en: We’ve now successfully used inheritance to abstract the common twig property
    and its initialization into a Controller superclass. This has simplified the two
    page-controller classes, while still providing exactly the same functionality.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在成功地使用继承将公共的 twig 属性及其初始化抽象到 Controller 超类中。这简化了两个页面控制器类，同时仍然提供完全相同的功能。
- en: Summary
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we improved the architecture of our object-oriented web application.
    We separated the overall front-controller logic governing the site, located in
    the Application class, from the page-controller logic for displaying the individual
    web pages. The latter is divided between an abstract Controller superclass, which
    contains the Twig setup code required for displaying any web page, and multiple
    subclasses containing just the code for logic specific to displaying particular
    kinds of pages.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们改进了面向对象的 Web 应用程序架构。我们将控制网站的前端控制器逻辑（位于 Application 类中）与显示单个网页的页面控制器逻辑分开。后者被划分为一个抽象的
    Controller 超类，其中包含显示任何网页所需的 Twig 设置代码，以及多个子类，这些子类仅包含与显示特定类型页面相关的逻辑代码。
- en: 'The example site in this chapter has only three pages: a home page, a Contact
    Us page, and a Product List page. However, the architecture demonstrated in this
    chapter can easily be scaled up for complex websites with hundreds or thousands
    of pages and complex features like session interactions, shopping carts, login
    security, and more.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的示例站点只有三个页面：主页、联系我们页面和产品列表页面。然而，本章演示的架构可以轻松扩展到具有数百或数千个页面及复杂功能（如会话交互、购物车、登录安全等）的复杂网站。
- en: Exercises
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习
- en: '1.   Make a copy of the project from this chapter and add a fourth page for
    a privacy policy. Follow these steps:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 1.   复制本章中的项目，并为隐私政策添加一个第四个页面。按以下步骤操作：
- en: a.   Create a *privacy.xhtml.twig* template.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: a.   创建一个 *privacy.xhtml.twig* 模板。
- en: b.   Add a new privacyPolicy() method to the DefaultController class that displays
    the new template.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: b.   向 DefaultController 类添加一个新的 privacyPolicy() 方法，用于显示新的模板。
- en: c.   Add a Privacy Policy navigation bar link in the *base.xhtml.twig* template
    with the URL ?action=privacy.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: c.   在`*base.xhtml.twig*`模板中添加一个隐私政策导航栏链接，URL为`?action=privacy`。
- en: d.   Add a new case to the switch statement in the run() method of the Application
    class that invokes the privacyPolicy() method of the DefaultController object
    if the value of action in the URL is privacy.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: d.   在`Application`类的`run()`方法中，向`switch`语句添加一个新案例，当URL中的`action`值为`privacy`时，调用`DefaultController`对象的`privacyPolicy()`方法。
- en: '2.   Make a copy of your project from Exercise 1, and add a fifth page for
    listing company staff. Follow these steps:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 2.   从练习1中复制你的项目，并添加一个用于列出公司员工的第五个页面。按照以下步骤操作：
- en: a.   Create a Staff class to represent staff details, including firstName, lastName,
    and email properties.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: a.   创建一个`Staff`类来表示员工详情，包括`firstName`、`lastName`和`email`属性。
- en: b.   Create a new subclass of Controller named StaffController. Give it a list()
    method that creates two or three staff objects and passes them as an array to
    the Twig render() method, along with the template name *staff.xhtml.twig*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: b.   创建一个名为`StaffController`的`Controller`子类。为其提供一个`list()`方法，该方法创建两个或三个员工对象，并将它们作为数组传递给Twig的`render()`方法，以及模板名`*staff.xhtml.twig*`。
- en: c.   Add a new Staff List navigation bar link in the *base.xhtml.twig* template
    with the URL ?action=staffList.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: c.   在`*base.xhtml.twig*`模板中添加一个新的员工列表导航栏链接，URL为`?action=staffList`。
- en: d.   Create a *staff.xhtml.twig* template, based on the *productList.xhtml.twig*
    template, that uses Twig code to loop through and print out each Staff object
    in the received array.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: d.   基于`productList.xhtml.twig`模板，创建一个*staff.xhtml.twig*模板，使用Twig代码循环并打印出接收到的数组中的每个`Staff`对象。
- en: e.   In the run() method of the Application class, create a new $staffController
    object that’s an instance of the StaffController class. Then add a new switch
    statement case that calls $staffController->list() if the value of action in the
    URL is staffList.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: e.   在`Application`类的`run()`方法中，创建一个新的`$staffController`对象，该对象是`StaffController`类的实例。然后添加一个新的`switch`语句案例，如果URL中的`action`值为`staffList`，则调用`$staffController->list()`。
