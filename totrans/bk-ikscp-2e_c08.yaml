- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Style: Color and Opacity'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you know all about selecting and transforming objects, let''s start
    a new topic that will entertain us for the next several chapters: styling. The
    way an object in an Inkscape document looks is determined by that object''s *style*,
    which consists of separate *properties*. To use Inkscape, you need to be familiar
    with at least some of the style properties and the tools for editing them.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I describe the most basic style properties, including the common
    types of *paint* (used for fill and stroke) and *opacity*. After this, [Chapter 9](c09.xhtml#ch9)
    covers stroke style, [Chapter 10](c10.xhtml#ch10) deals with gradients, meshes,
    and patterns, and [Chapter 15](c15.xhtml#ch15) describes text style properties.
    Filter effects, such as blur, are also part of an object's style; I discuss those
    in [Chapter 17](c17.xhtml#ch17).
  prefs: []
  type: TYPE_NORMAL
- en: One style-related command worth knowing before all others is Edit ▶ Paste Style
    (Shift-Ctrl-V). It takes the complete style of the object you last copied to the
    clipboard and applies it to all selected objects. You’ll often want some objects
    to be mostly, but not completely, identical in style. It’s much easier to paste
    the same style on all of them first and then change only the properties that need
    to be different. Also, you've already seen how to search objects by style properties
    ([5.13](c05.xhtml#section5.13)) and how to select objects with the same style
    as the selected object ([5.12](c05.xhtml#section5.12)).
  prefs: []
  type: TYPE_NORMAL
- en: 8.1 Style Properties and Selectors [1.1]
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Inkscape has many dialogs, commands, and tools that deal with objects' style;
    you're probably already using some of them. However, before looking at any specific
    style properties or tools, let's talk a bit about how style is encoded in SVG.
    If you're not interested in the technical details, feel free to skip this section.
  prefs: []
  type: TYPE_NORMAL
- en: The way object style is recorded in the SVG code of a document is not defined
    by the SVG standard; for this purpose, SVG reuses another standard called *Cascading
    Style Sheets (CSS)*. You are probably familiar with CSS if you ever did any kind
    of HTML coding because HTML also uses CSS. (SVG uses only a subset of CSS; refer
    to the SVG standard at [http://w3.org/TR/SVG](http://w3.org/TR/SVG) as well as
    to [Appendix A](b01.xhtml#chA) for details.)
  prefs: []
  type: TYPE_NORMAL
- en: In CSS, a style is a collection of named *properties*. Each property has its
    own rules for what values it can take. If you've ever browsed objects in Inkscape's
    XML editor ([4.10](c04.xhtml#section4.10)), you probably noticed that the `style`
    attribute is present on most objects, and it looks like a list of `name:value`
    pairs separated by semicolons. Each of these pairs defines a property. Example
    properties are `fill`, which specifies the fill paint ([8.2](#section8.2)),`stroke-width`
    for stroked paths, or `font-family` for text objects.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to edit style at the level of CSS properties, the XML Editor is
    not very convenient. A specialized tool for editing style is theSelectors and
    CSS dialog (Ctrl-Shift-Q), shown in [Figure 8-1](#fig8-1). Here, you can not only
    edit the properties of objects, but also create *selectors*—styles that apply
    to more than one object so that you can update all of them at once.
  prefs: []
  type: TYPE_NORMAL
- en: '![](09/css-selectors.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-1: The Selectors and CSS dialog showing the style of the selected
    object and the selectors defined in the document'
  prefs: []
  type: TYPE_NORMAL
- en: The dialog's first half (you can arrange the two areas of the dialog vertically
    or side-by-side) deals with the selected object. Even if you don't use any of
    the advanced features, here you can conveniently edit all of the properties of
    the selected object's style. Inkscape will prompt you with available property
    names and will validate the value you type. The + button at the top of the list
    adds a new property; the x in the red circle next to a property deletes it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The magic starts when you click the + button in the bottom left corner of the
    dialog. This creates a new *selector*, and you are prompted to give it a name.
    You can think of a selector as similar to a CSS class: a collection of elements
    and a style that applies to all of them. Initially, only the selected object is
    in the selector, and that selector has no style properties of its own. To add
    more objects to the selector, select them and click the + button next to the selector
    you want to apply.'
  prefs: []
  type: TYPE_NORMAL
- en: One object can belong to more than one selector; for example, in [Figure 8-1](#fig8-1),
    `text759` (each object is identified by its `id` attribute, [4.1](c04.xhtml#section4.1))
    is included in the `texts` and `grays` selectors. By the way, when you click a
    selector's name in the dialog, its objects become selected on canvas—this makes
    this dialog useful for "storing" complex selections even if you don't use selector
    styling.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add style properties to a selector, select any object included in it and
    click yet another + button next to the selector''s name in the top (or left) part
    of the dialog that deals with the object''s style. Any value you provide here
    will apply to all objects in this selector, overriding any value they may have
    for the same property in their individual styles. In [Figure 8-1](#fig8-1), the
    `texts` selector has the property `font-family: ''times new roman''` and the `grays`
    selector contains `fill: #a9a9a9` (gray color). The selected object`text759`,
    being included in both these selectors, has both gray color and the Times New
    Roman font.'
  prefs: []
  type: TYPE_NORMAL
- en: 8.2 Paint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you probably already know, objects can have *fill* and *stroke*, which have
    some kind of *paint* applied to them. One could say that an object is filled by
    one paint and stroked by another. A paint may be of several different types.
  prefs: []
  type: TYPE_NORMAL
- en: None (no paint)
  prefs: []
  type: TYPE_NORMAL
- en: An object with its fill set to `none` has only stroke, and an object with its
    stroke set to `none` has only fill. If both fill and stroke are `none`, the object
    is completely invisible (and cannot be selected by clicking, [5.4](c05.xhtml#section5.4)),
    just as it would be with zero opacity.
  prefs: []
  type: TYPE_NORMAL
- en: Flat color
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the most common type of paint: a plain solid color. Later in this chapter,
    you''ll see many ways to view and change the fill and stroke colors.'
  prefs: []
  type: TYPE_NORMAL
- en: Gradient, gradient mesh, or pattern
  prefs: []
  type: TYPE_NORMAL
- en: Both fill and stroke may have various types of smooth color gradients, gradient
    meshes, or repeating patterns. These complex paint types are the subject of a
    separate chapter ([Chapter 10](c10.xhtml#ch10)).
  prefs: []
  type: TYPE_NORMAL
- en: Swatch
  prefs: []
  type: TYPE_NORMAL
- en: A swatch is a flat color that you can assign (as fill or stroke paint) to more
    than one object, so that when you edit it, all objects with that swatch update.
    A swatch belongs to the document in which it was created and is saved with it.
    Swatches are created and edited in the Fill and Stroke dialog, but they are also
    listed, and can be applied from, the Auto palette ([8.5.1](#section8.5.1)). This
    feature is still somewhat clumsy to use; also, in SVG a swatch is encoded as a
    fake one-stop gradient, which is not very natural. If you need reusable style,
    I recommend using CSS selectors instead ([8.1](#section8.1)).
  prefs: []
  type: TYPE_NORMAL
- en: Unset
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that a fill or stroke is *not specified*, and therefore may be *inherited*
    from an object''s ancestors (those above it in the document''s XML tree); this
    is not the same as`none` (which simply forces invisibility). If an object''s ancestors
    have no stroke or fill of their own (as is usually the case for groups or layers),
    an object with unset fill or stroke will get the SVG defaults: an invisible stroke
    and a solid black fill. Unsetting is useful with clones ([Chapter 16](c16.xhtml#ch16))
    because it allows you to create clones painted differently from their originals.'
  prefs: []
  type: TYPE_NORMAL
- en: The main tool for editing an object's style, the Fill and Stroke dialog (Shift-Ctrl-F),
    has a number of buttons on its Fill and Stroke paint tabs that correspond to the
    different paint types. The pressed button indicates the current paint type of
    the selected object; if multiple objects with different paint types are selected,
    no button is pressed and the dialog says Multiple styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another important control is the *selected style indicator* ([2.8](c02.xhtml#section2.8))
    in the status bar. Always present onscreen, it lets you quickly look up the paint
    type of the selected object, as well as change it via the right-click menu: right-click
    the fill swatch at the *top* to change the *fill* paint and the stroke swatch
    at the *bottom* to change *stroke* paint ([Figure 8-2](#fig8-2)).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](09/paint.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-2: Paint types in the selected stroke indicator (left) and the Fill
    and Stroke dialog (right)'
  prefs: []
  type: TYPE_NORMAL
- en: One important property that applies only to fill but not stroke is the *fill
    rule*. It may take one of two values. The value of`evenodd` means that *any* self-intersections
    or inside subpaths ([12.1.1](c12.xhtml#section12.1.1)) create holes in the fill
    of a path. The value of `nonzero` means that most holes are covered with fill;
    more precisely, if the inner subpath has the same direction as the outer one,
    the hole will be painted, and otherwise it will be a hole without paint.
  prefs: []
  type: TYPE_NORMAL
- en: To change the fill rule property, use the two toggle buttons in the **Fill and
    Stroke** dialog, as shown in [Figure 8-3](#fig8-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![](09/fillrule.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-3: Changing the fill rule in the Fill and Stroke dialog'
  prefs: []
  type: TYPE_NORMAL
- en: 'Not all object types can or should have fill and stroke:'
  prefs: []
  type: TYPE_NORMAL
- en: Bitmaps
  prefs: []
  type: TYPE_NORMAL
- en: Bitmap objects ([Chapter 18](c18.xhtml#ch18)) cannot have either fill or stroke.
    However, you can convert a bitmap into a rectangular path filled by that bitmap
    as a pattern (just press Alt-I), which can then have a stroke applied to it.
  prefs: []
  type: TYPE_NORMAL
- en: Groups
  prefs: []
  type: TYPE_NORMAL
- en: You would rarely want to assign fill or stroke to a group by itself, because
    the objects inside a group usually have their own paint and ignore what is set
    on their parent group. In fact, if you try to set a fill or stroke on a group
    in Inkscape, it will set it on the group but will *also* assign it recursively
    to all the group's members. Only explicitly *unset* fills or strokes of the group's
    members will be left alone; however, they will inherit the new fill or stroke
    from their ancestor anyway.
  prefs: []
  type: TYPE_NORMAL
- en: Clones
  prefs: []
  type: TYPE_NORMAL
- en: If you try to set fill or stroke on a clone ([Chapter 16](c16.xhtml#ch16)),
    it won't have a visible effect unless the original of that clone has its fill
    or stroke*unset*.
  prefs: []
  type: TYPE_NORMAL
- en: 8.3 Opacity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On top of the fill or stroke paint, an object may have *opacity* that you can
    edit in the O: field in the status bar or with the Opacity slider in the Fill
    and Stroke dialog. Just like filters ([Chapter 17](c17.xhtml#ch17)), opacity applies
    to the entire object without any distinction between fill and stroke.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, in SVG an object can have three kinds of opacity: *master opacity*
    (which is called simply *opacity* in most places in the UI as well as in this
    book), *fill opacity*, and *stroke opacity* ([Figure 8-4](#fig8-4)). The two latter
    kinds apply only to fill or stroke, respectively, and while Inkscape allows you
    to view and change them, it generally discourages them in favor of master opacity.
    Situations where you might need your stroke opaque but fill transparent or vice
    versa are not too frequent in practice; in most cases, master opacity is more
    natural and easier to use.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](09/fsopacity.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-4: Fill opacity, stroke opacity, and master opacity'
  prefs: []
  type: TYPE_NORMAL
- en: 'One consequence of lowering stroke opacity is that you can see the fringe of
    the object''s fill, normally obscured by its own stroke. Per SVG rules, stroke
    is normally drawn on top of fill (in the object''s own internal z-order; however,
    see [9.6](c09.xhtml#section9.6)), and fill is bounded by the midline of the stroke,
    so with a semitransparent stroke, you will see three distinct boundaries: the
    outer boundary of the stroke, the stroke''s midline where its fill starts, and
    the inner boundary of the stroke where it overlaps the fill.'
  prefs: []
  type: TYPE_NORMAL
- en: Master opacity, unlike stroke opacity, has no such problems—it applies to the
    object as a whole, without revealing any untidy fringe. In the same way, when
    applied to a group, it makes the group transparent as a whole, which may be different
    from the same level of opacity assigned to individual objects in the group ([Figure 4-10](c04.xhtml#fig4-10)).
  prefs: []
  type: TYPE_NORMAL
- en: Also, unlike fill or stroke opacity, master opacity is applicable to objects
    that have no fill or stroke of their own, such as bitmaps and most clones.
  prefs: []
  type: TYPE_NORMAL
- en: 8.4 Color Models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most important building block of style is *color*. A discussion of how color
    is represented on computers could easily fill a book; Inkscape may not be the
    most powerful color program out there, but it is nevertheless quite rich and complex
    in this area.
  prefs: []
  type: TYPE_NORMAL
- en: When working with color, the first step is to choose the *color model*. Inkscape
    supports several popular color models that represent the same color differently.
  prefs: []
  type: TYPE_NORMAL
- en: 8.4.1 RGB
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the most common color model, *RGB*, every color is represented as a mix of
    red, green, and blue components or *channels*. This model is implemented by nearly
    all computer displays (which are typically composed of tiny light sources of these
    three colors) and is the primary color model used in SVG as well as most other
    computer graphic formats.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the software you use, the value of each of the three channels in
    an RGB color may be either a fractional number between 0 and 1 (such as 0.5) or
    an integer between 0 and 255 (such as 127). These two systems are equivalent;
    for example, a color with R = 0, G = 0.5, B = 1.0 is the same as R = 0, G = 127,
    B = 255\. Inkscape normally uses the 0–255 integer format, which I also prefer
    in this book; however, in some parts of the Inkscape UI you will see a choice
    between the integer and the fractional formats.
  prefs: []
  type: TYPE_NORMAL
- en: In RGB, higher values of the channels make the color lighter, and lower values
    make it darker. Thus, RGB 0/0/0 is pure black and RGB 255/255/255 is pure white.
    Any RGB color where the values of all channels are equal is a shade of gray; making
    the channels unequal adds saturation to the color, and the bigger the inequality,
    the greater the saturation. So colors such as pure red (RGB 255/0/0) or pure yellow
    (RGB 255/255/0) have maximum possible saturation.
  prefs: []
  type: TYPE_NORMAL
- en: The Fill and Stroke dialog lets you edit colors in RGB using either numeric
    input fields or sliders that move within graduated-color grooves (see [Figure 2
    in the color insert](c15b.xhtml#ill-fig2)). Note that the colors of the grooves
    change as you move the sliders; each groove shows you the colors that you will
    get by moving the slider within it if the other sliders remain where they are.
    The fourth slider at the bottom, labeled A (alpha), represents the fill or stroke
    opacity (and thus is not, strictly speaking, part of the color).
  prefs: []
  type: TYPE_NORMAL
- en: An RGB color is often expressed as a string in the form `RRGGBB` where each
    of the three components is represented by a two-digit hexadecimal (base 16, instead
    of the conventional base 10) number. Hexadecimal numbers can use digits `0` through
    `9` and letters `A` through `F`. The maximum integer value of a channel—`255`
    in decimal—is`FF` in hexadecimal. For example, `000000` is black,`FFFFFF` is white,
    `660000` is dark red. This form of representing colors is used in the SVG source
    of Inkscape documents, as well as in a lot of other software and languages (such
    as HTML). For example, when you choose Copy color from the right-click menu of
    the fill or stroke swatch in the selected style indicator ([Figure 8-2](#fig8-2)),
    the `RRGGBB` representation of the color is copied to the clipboard. Also, you
    can view and edit an`RRGGBBAA` representation (with two more digits appended for
    the fill/stroke opacity) in the RGBA field in the Fill and Stroke dialog.
  prefs: []
  type: TYPE_NORMAL
- en: If multiple objects are selected that have different fill or stroke colors,
    both the Fill and Stroke dialog and the selected style indicator display the *averaged
    color*. If you change that averaged color, it will be assigned back to all the
    selected objects, in effect flattening any color differences those objects might
    have had, as shown in [Figure 8-5](#fig8-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![](09/ssi-a-m.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-5: Averaged color in the selected style indicator'
  prefs: []
  type: TYPE_NORMAL
- en: 8.4.2 CMYK and CMS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Similar to RGB, in the *CMYK* model a color is obtained by mixing color channels.
    However, CMYK has not three but four channels: *cyan*, *magenta*,*yellow*, and
    *black* (see [Figure 3 in the color insert](c15b.xhtml#ill-fig3)). This color
    model is best suited for printed output because many professional printers and
    printing presses use CMYK. However, even when you specify a color in CMYK, what
    gets written into SVG is its RGB approximation, and conversion from CMYK to RGB
    and back typically introduces distortions because not all CMYK colors can be exactly
    represented in RGB and vice versa.'
  prefs: []
  type: TYPE_NORMAL
- en: The CMS (Color Management System) tab of the Fill and Stroke dialog allows you
    to edit colors in a *calibrated space*, which may include true calibrated CMYK
    (not the approximation of the CMYK tab) or Adobe RGB. This requires you to set
    up the color management in Input/Output ▶ Color management inPreferences ([18.8](c18.xhtml#section18.8)).
  prefs: []
  type: TYPE_NORMAL
- en: 8.4.3 HSL and HSV
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Neither RGB nor CMYK are very intuitive; they represent the way computers and
    printers deal with color, not the way artists use it. Inkscape offers a more natural
    color model: *HSL (Hue, Saturation, Lightness)*. Unlike RGB and CMYK, the channels
    of HSL are not individual colors mixed together; rather, they are the *properties*
    of the color that, together, define it unambiguously.'
  prefs: []
  type: TYPE_NORMAL
- en: The *hue* channel is the rainbow of maximum-saturation colors, starting from
    red and going through yellow, green, blue, purple, and back to red. The *saturation*
    channel positions a color somewhere from maximum colorfulness, through drab and
    dull, to pure gray—at the same brightness level. Finally, the *lightness* channel
    goes from black to the given color and then to white; this means any color with
    maximum lightness is white and any color with zero lightness is black, regardless
    of hue and saturation.
  prefs: []
  type: TYPE_NORMAL
- en: The HSL color model, once you get used to it, is very intuitive. When you feel
    that some color isn't quite right, you may think it needs to be made lighter or
    less saturated—not that it needs more red or green. Many color-related tools in
    Inkscape prefer HSL for choosing and changing colors.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Fill and Stroke dialog, there are two tabs that allow you to edit a
    color in the HSL model (see [Figure 4 in the color insert](c15b.xhtml#ill-fig4)).
    The first one (HSL) uses traditional linear sliders. The other one (Wheel) has
    a circular ring for the H channel (which therefore has a better resolution: if
    straightened, it would be longer than a linear slider fitting into the window)
    and a triangle that encodes the saturation and lightness channels. Rotating the
    mark on the hue ring rotates the triangle too, so that its maximum-saturation
    tip always points to the current hue on the ring.'
  prefs: []
  type: TYPE_NORMAL
- en: Inkscape also supports a similar color model called *HSV (Hue, Saturation, Value)*.
    Other programs may call it HSB (Hue, Saturation, Brightness). The only difference
    from HSL is that with HSV, the Value component changes only from black to a given
    color (such as red). To get pure white in HSV, you need to set Value to maximum
    *and* Saturation to zero. In HSL, the Lightness component ranges all the way from
    black through a given color to white, so it is symmetric with regard to light
    and dark.
  prefs: []
  type: TYPE_NORMAL
- en: 8.5 The Palette
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The simplest way to assign a color to the fill or stroke of selected objects
    is by clicking one of the swatches in the *palette*, usually located at the bottom
    of the editing window above the status bar (see [Figure 5 in the color insert](c15b.xhtml#ill-fig5)).
    Simplyclicking assigns fill color to the selected objects; Shift-clicking assigns
    stroke color. The leftmost button on the palette *removes* fill or (with Shift)
    stroke.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from clicking, you can drag and drop colors from the palette onto objects.
    This is one of the few ways to change objects without selecting them: when you
    drop a color on an object, only that object will change, even if it is not selected
    and even if some other object is selected. Dropping also works for changing stroke
    color: just drop the color swatch precisely onto the outline of a path or shape.'
  prefs: []
  type: TYPE_NORMAL
- en: Inkscape comes with many stock palettes. On the right end of the palette, there's
    a button with a triangle mark; click it to open a menu listing available palettes—such
    as a web-safe palette, palettes used by Ubuntu and Windows for their UI, and various
    monochromatic palettes (greens, golds, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: In the same menu, you can choose one of the standard *sizes* of swatches, their*width*
    (narrow swatches are harder to click but may get rid of the palette's scroll bar
    by fitting the entire palette to your screen width), as well as enable the palette
    to *wrap around* (which makes it taller but also gets rid of the scroll bar).
    Also, if you prefer, you can turn on the border around the palette's swatches.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the always-docked horizontal palette, Inkscape has the Swatches
    dialog (Shift-Ctrl-W), shown in [Figure 8-6](#fig8-6).
  prefs: []
  type: TYPE_NORMAL
- en: '![](09/swatches.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-6: The palette menu (left) and theSwatches dialog (right) in the List
    format showing colors with their names'
  prefs: []
  type: TYPE_NORMAL
- en: It has all the same palettes and size options, except that it has an additional
    List option where it lists all the colors along with their names. Being a dialog,
    it can float wherever you need it or be placed in the dock on the right and squeezed
    into a narrow vertical strip.
  prefs: []
  type: TYPE_NORMAL
- en: 8.5.1 Editing Palettes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each Inkscape palette is a text file in a simple format that you can edit. If
    you have created a new palette and want Inkscape to use it, go to**Preferences**,
    **System** page, and click **Open** next to **User palettes**. This will open
    a folder where you can place your palette file; on the next launch, Inkscape will
    add it to its list of palettes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inkscape''s palette format is that of the GIMP raster editor, so you can drop
    any palettes from a GIMP distribution into that folder to use them in Inkscape.
    Here''s the beginning of the default palette file, inkscape.gpl; the color components
    (R, G, B) are in the 0–255 format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The Auto option in the list of predefined palettes lets you create a custom
    palette saved with the current document. To add, or edit, a color in the Auto
    palette, you need to create a swatch in the Fill and Stroke dialog ([8.2](#section8.2)).
  prefs: []
  type: TYPE_NORMAL
- en: '8.6 The Selected Style Indicator: Paint Commands'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apart from the various paint styles, the right-click menu of the selected style
    indicator ([Figure 8-2](#fig8-2)) has several useful commands for dealing with
    paint. Note that the fill swatch (top) and stroke swatch (bottom) are distinct
    even though their context menus are similar; be sure to right-click the half that
    you want to change.
  prefs: []
  type: TYPE_NORMAL
- en: Edit fill/stroke...
  prefs: []
  type: TYPE_NORMAL
- en: Choosing this, as well as simply clicking the fill or stroke swatch, opens the
    Fill and Stroke dialog.
  prefs: []
  type: TYPE_NORMAL
- en: Last set color
  prefs: []
  type: TYPE_NORMAL
- en: This assigns to the selection the color that was last *set* on the corresponding
    paint (that is, on fill or stroke) of any selected object. For example, if you
    just painted something a particular shade of blue and now want*all* your objects
    to have that fill, select all and call this command from the fill swatch's right-click
    menu.
  prefs: []
  type: TYPE_NORMAL
- en: Last selected color
  prefs: []
  type: TYPE_NORMAL
- en: This assigns to the selected object the corresponding paint (that is, fill or
    stroke) of the object that was *selected* before the most recent selection change.
    For example, select an object whose fill color you like, then select some other
    object, and use this command on its fill swatch to assign the same color to it.
  prefs: []
  type: TYPE_NORMAL
- en: Invert
  prefs: []
  type: TYPE_NORMAL
- en: This replaces a flat-color paint by the (RGB) inversion of its color—for example,
    white becomes black and yellow becomes blue.
  prefs: []
  type: TYPE_NORMAL
- en: White and Black
  prefs: []
  type: TYPE_NORMAL
- en: These commands simply assign those colors to the paint.
  prefs: []
  type: TYPE_NORMAL
- en: Copy color and Paste color
  prefs: []
  type: TYPE_NORMAL
- en: These commands allow you to exchange objects' colors via the system clipboard.
    For example, you can copy one object's stroke color and assign it to another object's
    fill, or paste a color (as an `#RRGGBB` string) into any other program where you
    might need it.
  prefs: []
  type: TYPE_NORMAL
- en: Swap fill and stroke
  prefs: []
  type: TYPE_NORMAL
- en: This command exchanges the fill and stroke paints on selected objects. For example,
    if a selected object had no stroke and a blue fill, after applying this command,
    it will have a blue stroke and no fill. This command can be useful when you use
    both the Pencil ([14.1.2](c14.xhtml#section14.1.2)) and the Calligraphic pen ([14.2](c14.xhtml#section14.2))
    tools for drawing and want the result to use the same color, even though the Pencil
    creates stroked paths without fill and the Calligraphic pen creates filled paths
    without stroke.
  prefs: []
  type: TYPE_NORMAL
- en: Unset fill/stroke
  prefs: []
  type: TYPE_NORMAL
- en: Make fill or stroke *unset* ([8.2](#section8.2)). This is not the same as removing
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Remove fill/stroke
  prefs: []
  type: TYPE_NORMAL
- en: 'Set fill or stroke to `none` ([8.2](#section8.2)). This command has a shortcut:
    middle-click the fill or stroke swatch to set the corresponding paint to `none`;
    if the paint is already removed, middle-clicking creates the default fill or stroke
    (usually black). Thus, to get rid of stroke on selected objects, Shift-click the
    "no paint" swatch on the palette or middle-click the bottom of the selected style
    indicator.'
  prefs: []
  type: TYPE_NORMAL
- en: Make fill/stroke opaque
  prefs: []
  type: TYPE_NORMAL
- en: Remove any fill opacity or stroke opacity from paint ([8.3](#section8.3)). Master
    opacity (shown by the O control to the right of the swatches) remains unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: '8.7 The Selected Style Indicator: Color Gestures'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Apart from its other numerous functions, the selected style indicator has a
    convenient and somewhat unique method for quick adjustment of colors: *color gestures*.
    Simply grab the fill or stroke color swatch and drag it out onto the canvas, with
    or without modifier keys, as described below.'
  prefs: []
  type: TYPE_NORMAL
- en: Color gestures work in the HSL color space ([8.4.3](#section8.4.3)). Dragging
    without any keyboard modifiers adjusts the hue channel, dragging with Shift adjusts
    saturation, and dragging with Ctrl adjusts lightness.
  prefs: []
  type: TYPE_NORMAL
- en: 'Think of it as "rotating" the color swatch: by dragging from it, you pull out
    an invisible handle and use it to rotate it away from the original direction,
    which is assumed to be 45 degrees to the northeast. When you click and drag the
    color swatch, imagine a line—a *no-change axis*—going from the point where you
    clicked, diagonally, into the drawing area of the window. By dragging *below*
    or *to the right* of that axis, you*decrease* the corresponding color channel,
    down to the minimum at the lower edge of the window; by dragging it *above* or
    *to the left*, you *increase* it, up to the maximum at the left edge of the window.
    If you hover your mouse exactly over the no-change axis, there is no change (see
    [Figure 6 in the color insert](c15b.xhtml#ill-fig6)). The status bar reports,
    as you drag, the channel you are adjusting, the original value of that channel,
    the new value, and the difference.'
  prefs: []
  type: TYPE_NORMAL
- en: The angular nature of the color gestures means that it's easy to adjust the
    precision. When you drag close enough to the swatch, any small movement produces
    a big change of color. If you need a finer adjustment, just drag farther away
    from the swatch, toward the center of the Inkscape window or even to its upper-right
    corner, where the same movements will make much smaller changes in color.
  prefs: []
  type: TYPE_NORMAL
- en: You can switch channels while you drag—that is, you don't need to drag from
    the swatch again and again if you want to adjust all three channels. You can do
    it all in one drag by pressing and releasing Ctrl and Shift as necessary. The
    moment you change the keyboard modifiers while dragging, the zero-change axis
    for the new channel is temporarily moved up to go through the current mouse position;
    this way there are no sudden changes in color if you happen to switch modifiers
    away from the original 45-degree line.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Alt modifier is special: pressing Alt while dragging means "do nothing."
    This allows you to move the mouse, without releasing, to a more convenient place
    from which you can continue tweaking the color after letting go of Alt. As with
    the other modifiers, releasing Alt temporarily redefines the no-change axis to
    go through the point where Alt was released. For example, imagine you made your
    color darker by Ctrl-dragging toward the bottom edge of the window. If you then
    need to make it less saturated but can''t Shift-drag it any lower because there''s
    no room, without releasing the mouse, simply Alt-drag it upward to a convenient
    spot and then Shift-drag downward as needed. You can also *start* dragging from
    the swatch with Alt to avoid any change of color until you reach a more convenient
    position for adjusting it.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, select a green rectangle and first turn it greenish-blue by dragging
    away from the fill swatch and slightly above the 45-degree line. Then, without
    releasing the mouse, press Ctrl and drag a bit to the right to darken the color;
    next, press Shift, release Ctrl, and adjust saturation. You can press and release
    Ctrl and Shift as many times as necessary during a drag; when you are finally
    satisfied with your color, release the mouse to commit the change.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to fine adjustments, here are some quick color gestures for common
    color changes:'
  prefs: []
  type: TYPE_NORMAL
- en: Ctrl-drag the swatch to the right and down to paint all selected objects black.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ctrl-drag the swatch up and to the left to paint all selected objects white.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shift-drag the swatch to the right and down to desaturate the selected objects'
    color (turn them to gray).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shift-drag the swatch up and to the left to maximize saturation of the selected
    objects' color.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When several objects or gradient stops with different colors are selected, the
    selected style indicator shows their *averaged* color. If you adjust that color
    by gesturing, the changed color will be assigned back to all selected objects
    or stops, in effect eliminating any difference between them. This makes the feature
    less useful than it could be; if you want to adjust many different-colored objects
    preserving their relative differences, use the color modes of the Tweak tool ([8.9](#section8.9)),
    color adjustment extensions ([8.10.1](#section8.10.1)), or color filters ([8.10.2](#section8.10.2)).
  prefs: []
  type: TYPE_NORMAL
- en: 8.8 The Dropper Tool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Dropper tool allows you to pick a color (and, optionally, opacity) directly
    from any point or area of the drawing and assign it to the selected objects (or
    to selected gradient handles,[10.4.2](c10.xhtml#section10.4.2)). With this tool,
    you can use your own drawing as a palette, easily reusing colors you have already
    created for something else. It is also indispensable when you need to combine
    and blend vector objects with an imported bitmap.
  prefs: []
  type: TYPE_NORMAL
- en: The important thing about this tool is that when picking colors, it pays no
    attention to what *object* you click; instead, it simply takes the color of the
    clicked *pixel* in the rendered screen image. This means you can easily pick colors
    from bitmaps, stacks of semitransparent objects, blur fringes ([17.1](c17.xhtml#section17.1)),
    or the middle of a gradient. The tool sees exactly what you see; if an object
    is too small to be rendered at the current zoom, you can't pick out its color
    with the Dropper tool either. Also, if you click the edge of a black object on
    a white background, you may get a midrange gray color of the anti-aliasing pixel
    in that point (see [Figure 1-1](c01.xhtml#fig1-1)).
  prefs: []
  type: TYPE_NORMAL
- en: 8.8.1 Sampling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you switch to the Dropper tool (F7 or D), the status bar starts to report
    the color located directly under the cursor. So, if you want to know the color
    of some area, you don't even need to click—just hover your mouse over that area
    and read the status bar. Also, at any time you can press Ctrl-C to copy the color
    under the cursor to the clipboard (in the form of an`RRGGBBAA` hex string); from
    there you can paste it, for example, into the Fill and Stroke dialog's RGBA field
    or to any external program.
  prefs: []
  type: TYPE_NORMAL
- en: 8.8.2 Assigning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can assign colors to selected objects (or gradient handles) either by clicking
    or by dragging. With a click, you just take the color of the screen pixel that
    happens to be under your mouse cursor. With a drag, you create a circular area
    centered at the point where you started dragging, and when you release the mouse,
    the tool *averages* the colors of all pixels inside this circle, as shown in [Figure 8-7](#fig8-7).
  prefs: []
  type: TYPE_NORMAL
- en: '![](09/dropper.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-7: Using the Dropper tool'
  prefs: []
  type: TYPE_NORMAL
- en: 'Picking with averaging is especially useful for sampling colors from bitmaps.
    For example, if you need to create a vector object that would blend with the cheek
    of a face on a photo, picking single pixels from the cheek is unlikely to work:
    the picked colors will be too light or too dark due to the nonuniformities of
    the photo''s texture. If, however, you average the colors from a circular area
    covering a good part of the cheek, the result will be much more realistic.'
  prefs: []
  type: TYPE_NORMAL
- en: By default, the Dropper assigns its colors to the fill of the selected objects.
    When you Shift-click or Shift-drag, it will instead change their stroke.
  prefs: []
  type: TYPE_NORMAL
- en: 8.8.3 Opacity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using the two toggle buttons on the controls bar of the Dropper tool, you can
    change the way it treats transparency ([Figure 8-8](#fig8-8)). The Opacity: Pick
    button controls whether the opacity under the cursor is picked, and the Assign
    button controls whether that picked opacity value is assigned to selected objects.
    (WhenPick is off, the Assign button is disabled.)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](09/dropper-buttons.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-8: Toggle buttons of the Dropper tool'
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you have a bright red (`FF0000`) object with 50 percent opacity, which
    makes it appear pale red. Now, imagine you select some other object and try to
    pick the color from the red one. What happens?
  prefs: []
  type: TYPE_NORMAL
- en: 'Opacity: Pick button is off'
  prefs: []
  type: TYPE_NORMAL
- en: The tool will pick the pale red color (`FF8080`) and no opacity. In other words,
    the opacity will already be "multiplied into" the color. The status bar will report
    FF8080 under cursor and that is the color the selected object will get—whereas
    the opacity of the selected object, if any, will not change. Only in this case,
    the visible color of the page background will be mixed in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Opacity: Pick button is on'
  prefs: []
  type: TYPE_NORMAL
- en: The tool will pick the actual bright red color (`FF0000`) and the 50 percent
    opacity *separately*. The status bar will display FF0000 alpha 0.5 under cursor.
    Now, when you click, the result depends on the other button, Assign.
  prefs: []
  type: TYPE_NORMAL
- en: If Assign is on, both color (`FF0000`) and opacity (50 percent) will be assigned
    to the selected objects' fill or (with Shift) stroke. Note that the opacity will
    become the fill or stroke opacity of the selected objects, not their master opacity
    ([8.3](#section8.3)).
  prefs: []
  type: TYPE_NORMAL
- en: If Assign is off, the bright red color (`FF0000`) is assigned to the selected
    objects' fill or stroke, whereas the picked opacity is simply discarded and 100
    percent opacity is assigned. For example, if you select an object with semitransparent
    fill and click that object *itself* with Pick on and Assign off, the object's
    fill will lose its opacity but keep its color.
  prefs: []
  type: TYPE_NORMAL
- en: 8.9 Color Tweaking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You've already seen some of the capabilities of the Tweak tool in the chapter
    on transformations ([6.10](c06.xhtml#section6.10)). Let's look at its two modes
    for changing colors of objects, *Color Paint* and *Color Jitter*. Both of these
    modes work on flat color paint as well as on gradients ([10.6](c10.xhtml#section10.6)).
    Refer to [6.10](c06.xhtml#section6.10) to review how the tool's Width and Force
    parameters work.
  prefs: []
  type: TYPE_NORMAL
- en: 8.9.1 Color Paint
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Color Paint mode is used to apply color to the selected objects *under the
    brush*, as shown in [Figure 8-9](#fig8-9). The color being used—more precisely,
    the *style* because it includes both fill and stroke—can be seen in the style
    swatch at the right end of the tool's controls bar (above the canvas). To change
    this applied style, simply click the color palette (or use any other style-editing
    command, such as the Fill and Stroke dialog) while you are in this mode of the
    Tweak tool.
  prefs: []
  type: TYPE_NORMAL
- en: The fill from the tool's style applies to the fills of the painted objects,
    and the stroke applies to the strokes. If the tool's style has no fill or no stroke,
    it won't affect fills or strokes, correspondingly. For example, if you want to
    color the fills of objects blue but leave their strokes untouched, assign blue
    fill to the tool's style (just click blue on the palette) but set its stroke to
    `none` (middle-click the **Stroke** swatch in the status bar).
  prefs: []
  type: TYPE_NORMAL
- en: '![](09/tweak-paint.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-9: Using the Color Paint mode of the Tweak tool'
  prefs: []
  type: TYPE_NORMAL
- en: This mode literally paints on objects, *gradually* shifting their colors toward
    the target color. For example, if you keep painting with yellow fill over a blue-filled
    object, the object will first become greenish blue, then green, then yellowish
    green; eventually it will be the exact yellow color you're painting with.
  prefs: []
  type: TYPE_NORMAL
- en: Painting with Shift pressed *inverts* the color you're applying (for example,
    when painting with yellow, Shift will gradually apply blue).
  prefs: []
  type: TYPE_NORMAL
- en: The speed of this gradual transition depends on both the Force value and, if
    you have a pressure-sensitive tablet, the pen pressure. Also, since the brush
    is "soft," objects touched by the periphery of the brush are less affected than
    those hit by the brush center.
  prefs: []
  type: TYPE_NORMAL
- en: 8.9.2 Color Jitter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Color Jitter mode, instead of applying a specific color, *jitters*—randomizes—the
    colors of the objects it touches. The force of the action determines the amount
    of randomization—that is, how far the colors deviate from their original values,
    as shown in [Figure 8-10](#fig8-10).
  prefs: []
  type: TYPE_NORMAL
- en: '![](09/tweak-jitter.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8-10: Using the Color Jitter mode of the Tweak tool'
  prefs: []
  type: TYPE_NORMAL
- en: 8.9.3 Channels
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On the Tweak tool''s controls bar, to the right of the Mode buttons, there
    are fourChannels toggles: H, S, L, and O. This is where you turn on and off the
    tool''s action on the object''s hue, saturation, lightness, and opacity, correspondingly.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you want to raise the saturation of some part of your drawing
    without changing any hues, select some maximum-saturation color (such as pure
    red) and turn off allChannels buttons except S. Or you can replace the hues without
    affecting saturation or lightness (with only H turned on), or lighten/darken all
    colors without changing their hues and saturations (only L turned on). EnablingO
    applies the master opacity from the tool's style to the master opacity of objects
    (but not fill or stroke opacity).
  prefs: []
  type: TYPE_NORMAL
- en: 8.9.4 Usage Notes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Color painting is similar to a soft brush in a raster editor (such as GIMP or
    Photoshop). Even though the tool works as a brush, it still applies its color
    to vector objects, which behave as vector objects usually do. For example, if
    you want to change the tint of a face in your drawing, and if a hand in the drawing
    is part of the same path object as the face, that hand's tint will change too,
    even if it's located far from the point you are painting. Still, even with this
    limitation, color painting allows you to quickly and intuitively make adjustments
    that would be awkward with traditional vector tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'Drawings with scatterings of small independent objects are especially suitable
    for color painting with the Tweak tool. Examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: Freehand drawings with the Calligraphic pen ([14.2](c14.xhtml#section14.2)),
    consisting of many separate strokes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object sprayings made with the Spray tool ([4.7](c04.xhtml#section4.7)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patterns made with the clone tiler ([16.6](c16.xhtml#section16.6)). You will
    need to unset the fill and/or stroke on the original object and use the Color
    tab of theCreate Tiled Clones dialog to assign some initial color to the clones—this
    will make them paintable with the Tweak tool without unlinking.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Imported vector art with many small tiles, such as 3D-to-vector conversions
    where a smooth shape is approximated with polygons or gradient meshes imported
    from Adobe Illustrator's AI files ([B.5](b02.xhtml#sectionB.5)), which Inkscape
    renders as lattices of small polygons. Although Inkscape now has its own Mesh
    tool ([10.7](c10.xhtml#section10.7)), it cannot import AI meshes as meshes—but
    color painting on the imported tiles may sometimes be almost as good as editing
    the mesh.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text converted to paths, where each letter is a separate path ([15.5](c15.xhtml#section15.5)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color tweaking can also be useful for compositions with just a few objects or
    even for single objects. Unlike all other color selection methods, painting with
    the Tweak tool implements the *color mixing* metaphor, which may be more natural
    for an artist than RGB sliders or even the HSL color wheel.
  prefs: []
  type: TYPE_NORMAL
- en: For example, start with a rectangle of pure blue color. Switch to the Color
    Paint mode, pick a number of different colors from the palette, and apply light
    touches with minimum force and minimum pen pressure. Add a little green, a little
    brown, a little yellow, and so on—until you have the exact mixed tint you need.
    Similarly, you can whiten or blacken any object by adding white or black.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use color tweaking to darken, lighten, saturate, desaturate, add
    a tint, or color-jitter your entire drawing. Just select all in all layers (Ctrl-Alt-A),
    zoom out, expand your brush so it covers all of the drawing, and apply a little
    color tweaking (with minimum Force) that will thus affect all visible objects.
  prefs: []
  type: TYPE_NORMAL
- en: 8.10 Color Extensions and Filters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You've already seen a number of Inkscape's style setting commands and tools,
    each with its own approaches and capabilities. Naturally, each of them has downsides,
    too. In particular, the Fill and Stroke dialog and the selected style indicator
    cannot edit many different colors without unifying them. On the other hand, although
    the Tweak tool can adjust multiple colors independently, it actually requires
    you to paint on the canvas, so it can be slow and imprecise.
  prefs: []
  type: TYPE_NORMAL
- en: 8.10.1 Color Extensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A group of extensions in the Color submenu of theExtensions menu allows you
    to adjust all colors in the selection at once. These commands affect both fill
    and stroke colors, including colors of gradient stops, but excluding bitmaps or
    patterns. They include:'
  prefs: []
  type: TYPE_NORMAL
- en: A full set of *HSL adjustments* (increasing and decreasing hue, saturation,
    or lightness by 5 percent).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brighter and Darker (adjust brightness up or down by 10 percent).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Desaturate (set HSL saturation to zero).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grayscale (equalize the three RGB channels; the result is largely similar but
    different from that of Desaturate).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Black and white with adjustable threshold; colors brighter than the threshold
    become white, others become black.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Negative (for example, convert black to white, yellow to blue, and so on).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commands for removing or swapping the Red, Green, and Blue channels.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace color to replace any color you specify with another.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Custom command where you can provide your own formulas for modifying the color
    channels, using the values of other channels if necessary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.10.2 Color Filters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A better way to manipulate colors of objects is by using SVG filter effects
    ([Chapter 17](c17.xhtml#ch17)), specifically the preset filters from the Filters ▶ Color
    submenu. Compared to extensions, SVG filters are nondestructive (the original
    colors of objects are preserved and can be restored simply by removing the effect)
    and work on everything, including bitmaps and patterns. Filters in Inkscape can
    also be interactive: many of them have adjustable parameters, and if you enable
    the Live Preview checkbox in the filter''s dialog, you will be able to experiment
    with the parameters watching the result live on canvas before you commit.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In past versions of Inkscape, filters were much slower to render—but this is
    no longer the case, especially for the relatively simple color filters. You can
    create your own color filters (using the Color Matrix primitive, [Chapter 17](c17.xhtml#ch17)),
    but doing so is not for the faint of heart; fortunately, Inkscape has many ready-to-use
    preset filters to cover most needs—perhaps even too many for this book to cover
    every one. Still, here are the most universally useful filters fromFilters ▶ Color:'
  prefs: []
  type: TYPE_NORMAL
- en: Color Shift rotates all the hues by a given amount; you can also increase or
    decrease saturation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Colorize shows your drawing as it would look through colored glass; you can
    select the color with a color chooser in the dialog.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Duochrome re-paints your drawing in two tones—for example, with blue shades
    and yellow lights; you can select both colors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extract Channel lets you suppress all color channels except one (R, G, B, or
    C, M, Y); the extracted channel can be converted to alpha.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fade to Black or White lets you naturally blend, by an adjustable amount, your
    drawing with a black or white background.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grayscale converts to grayscale; unlike the extension, you can interactively
    adjust how much each channel (out of R, G, B, and L) participates in the result.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lightness-Contrast works pretty much as you would expect.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invert lets you selectively invert some of the channels.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Soft Colors creates a soft glow around the color boundaries; this filter is
    not interactive, but you can adjust the color of the glow (yellowish green by
    default) in the Filter Editor ([17.5](c17.xhtml#section17.5)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
