- en: '![Image](../images/pg001-01.jpg)'
  id: totrans-0
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg001-01.jpg)'
- en: '1'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '1'
- en: PuzzleScript Basics
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: PuzzleScript 基础
- en: In this chapter, you’ll learn the basic components of PuzzleScript using a simple
    puzzle game. We call a game a *puzzle game* when it’s turn-based, spatial, and
    solvable.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将通过一个简单的谜题游戏学习 PuzzleScript 的基本组成部分。当一个游戏是回合制、空间性的并且可解时，我们就称它为 *解谜游戏*。
- en: '*Turn-based* means that events or actions in the game happen one at a time,
    like in a game of *Checkers*. The player makes a move, looks at the board, thinks
    about what to do next, and then makes another move. Thinking and planning are
    usually important parts of puzzle games.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*回合制* 意味着游戏中的事件或动作是一次发生一个，就像在 *跳棋* 游戏中一样。玩家进行一次移动，观察棋盘，思考接下来该做什么，然后再进行下一次移动。思考和计划通常是解谜游戏的重要组成部分。'
- en: '![Image](../images/pg002-01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg002-01.jpg)'
- en: '*Spatial* means that it matters where objects are on the screen. In a classic
    puzzle game called *Sokoban*, the player tries to push crates onto special panels.
    Crates get in the way of other crates, so playing the game involves thinking carefully
    about where all the crates are and where to move them.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*空间性* 意味着物体在屏幕上的位置是很重要的。在一个经典的解谜游戏 *仓库番* 中，玩家尝试将箱子推到特殊的面板上。箱子会挡住其他箱子，因此玩这个游戏需要仔细思考所有箱子的位置以及该如何移动它们。'
- en: '*Solvable* means that every screen in the game has a winning condition. For
    example, when the player gets all the crates onto the panels in *Sokoban*, they’ve
    solved the puzzle! Then they go on to the next puzzle.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*可解* 意味着游戏中的每一关都有一个获胜条件。例如，当玩家将所有箱子推到面板上时，在 *仓库番* 游戏中他们就解开了谜题！然后他们进入下一关。'
- en: There are ways to make PuzzleScript games that *aren’t* turn-based, *don’t*
    require objects to be in certain positions, or *don’t* require the player to solve
    puzzles. But the easiest game to make with PuzzleScript is one that involves all
    three features. The PuzzleScript demonstration game is a basic example of this,
    so it’s a good way to start learning about PuzzleScript.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 也有一些方式可以制作不是 *回合制* 的 PuzzleScript 游戏，或者 *不* 要求物体处于特定位置，或 *不* 需要玩家解决谜题。但用 PuzzleScript
    制作的最简单游戏是包含这三个特点的游戏。PuzzleScript 的示范游戏就是一个基本的例子，因此它是学习 PuzzleScript 的好方式。
- en: Getting Started with PuzzleScript
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开始使用 PuzzleScript
- en: Open *[https://www.puzzlescript.net/](https://www.puzzlescript.net/)* in a web
    browser, and you should see something like this.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页浏览器中打开 *[https://www.puzzlescript.net/](https://www.puzzlescript.net/)*，你应该看到类似这样的界面。
- en: '![Image](../images/pg003-01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg003-01.jpg)'
- en: 'Click the **Make A Game** button to see something like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **Make A Game** 按钮，应该能看到类似这样的界面：
- en: '![Image](../images/pg003-02.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg003-02.jpg)'
- en: This is PuzzleScript! The box on the left is your game code, and the box on
    the right, **Puzzle Script Terminal – Insert Cartridge**, is where your game will
    appear.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 PuzzleScript！左侧的框是你的游戏代码，右侧的框，**Puzzle Script Terminal – Insert Cartridge**，是你的游戏将出现的地方。
- en: Let’s look at a sample game. Click the **Load Example** drop-down menu at the
    top of the screen, and then choose **Basic**. This demonstration game was made
    by Stephen Lavelle, the creator of PuzzleScript.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看看一个示范游戏。点击屏幕顶部的 **Load Example** 下拉菜单，然后选择 **Basic**。这个示范游戏是由 PuzzleScript
    的创始人 Stephen Lavelle 制作的。
- en: '![Image](../images/pg004-01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg004-01.jpg)'
- en: Click **Run** at the top of the screen. The game’s title screen, **Simple Block
    Pushing Game by Stephen Lavelle**, should appear in the window at the right. This
    simple game is a good place to start learning how PuzzleScript works.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 点击屏幕顶部的 **Run** 按钮。游戏的标题画面，**由 Stephen Lavelle 制作的简单推箱子游戏**，应该会出现在右侧的窗口中。这个简单的游戏是学习
    PuzzleScript 的一个好起点。
- en: Press the **X** key on your keyboard to start the game. If the game doesn’t
    start, try clicking the title screen and pressing **X** again. When the game starts,
    you should see this screen.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 按下键盘上的 **X** 键开始游戏。如果游戏没有开始，试着点击标题画面并再次按下 **X** 键。当游戏开始时，你应该看到这个画面。
- en: '![Image](../images/pg004-02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg004-02.jpg)'
- en: Try playing the game! You’re the little person. The goal of the game is to get
    all the orange boxes onto the black squares. Use the arrow keys on your keyboard
    to move the person, and push an orange box by moving into it. This puzzle is tricky,
    so don’t worry if you can’t solve it! Just play for a little while to get a feel
    for what a PuzzleScript game is like.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试玩这个游戏！你是那个小人。游戏的目标是将所有橙色盒子推到黑色方块上。使用键盘上的箭头键移动人物，并通过碰到橙色盒子将其推开。这个谜题有点棘手，如果你无法解开也不必担心！只需玩一会儿，感受一下
    PuzzleScript 游戏的感觉。
- en: Parts of PuzzleScript
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PuzzleScript 的组成部分
- en: The colored text on the left side of the screen is the actual *script* of the
    game, which tells the game what to do. Let’s walk through all the different parts
    quickly.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕左侧的彩色文本就是游戏的实际*脚本*，它告诉游戏该做什么。让我们快速浏览一下不同的部分。
- en: Adding Basic Information
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加基本信息
- en: 'At the very top of the script you see a game’s basic information:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本的最顶部，你会看到游戏的基本信息：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When you run the game, you see the `title` as Simple Block Pushing Game with
    the `author`, Stephen Lavelle, listed underneath. If you change the `title` or
    `author` name, you change the game’s title screen too. For example, to call your
    game *Mystery of the Missing Socks* by *Clarence LeFrou* instead, simply replace
    the text next to `title` with `Mystery of the Missing Socks` and the text next
    to `author` with `Clarence LeFrou` like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行游戏时，你会看到`title`显示为“简单方块推送游戏”，并且`author`，Stephen Lavelle，显示在下面。如果你更改了`title`或`author`的名字，游戏的标题画面也会相应改变。例如，要将你的游戏命名为*失踪的袜子之谜*，并将作者改为*Clarence
    LeFrou*，只需将`title`旁边的文本替换为`失踪的袜子之谜`，将`author`旁边的文本替换为`Clarence LeFrou`，就像这样：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now when you run your game again, you should see this.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当你再次运行游戏时，你应该能看到这个。
- en: '![Image](../images/pg006-01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg006-01.jpg)'
- en: Let’s now move on to objects.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来讲解对象。
- en: '**NOTE:** The `homepage` just lets you put a link at the bottom of the page
    when you share your game. You can just leave it as is or change it to your website
    if you have one.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** `homepage`只是让你在分享游戏时在页面底部放置一个链接。你可以保持原样，或者如果你有自己的网站，也可以改成你的网站。'
- en: Creating Objects
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建对象
- en: Objects are one of the most important parts of your PuzzleScript game! They’re
    all the little pieces that make up your game—all the things that move or don’t
    move and that are moved by other things.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对象是你PuzzleScript游戏中最重要的部分之一！它们是构成你游戏的所有小元素——所有会动或不会动并且会被其他物体推动的东西。
- en: To add a new object to your game, you put it in the game code’s `OBJECTS` section.
    Here’s what the `OBJECTS` section of the *Simple Block Pushing Game* looks like.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要向游戏中添加一个新对象，你需要将它放入游戏代码的`OBJECTS`部分。以下是*简单方块推送游戏*的`OBJECTS`部分：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see, the *Simple Block Pushing Game* has five objects: `Background`,
    `Target`, `Wall`, `Player`, and `Crate`.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，*简单方块推送游戏*有五个对象：`背景`、`目标`、`墙壁`、`玩家`和`箱子`。
- en: Each object is assigned a name (`Background`, `Target`, and so on), so PuzzleScript
    knows when you’re referring to it, and a description of what it looks like. The
    list of colors tells PuzzleScript what colors an object should be, and the numbers
    after them tell PuzzleScript where to put those colors. For example, the player’s
    colors are black, orange, white, and blue. Those colors give the player black
    hair, orange skin, a white shirt, and blue pants.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 每个对象都被分配了一个名称（`背景`、`目标`等），这样PuzzleScript就知道你在引用它，并且有一个描述说明它的外观。颜色列表告诉PuzzleScript一个对象应该是什么颜色，颜色后面的数字则告诉PuzzleScript该将这些颜色放置在哪里。例如，玩家的颜色是黑色、橙色、白色和蓝色。这些颜色使得玩家有黑色的头发、橙色的皮肤、白色的衬衫和蓝色的裤子。
- en: 'Later, we’ll draw our own pictures to represent all the objects in our game.
    But for now, let’s try something simple: change the green `Background` to purple
    or pink. Then click **Rebuild** to see how the game changes.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，我们会绘制自己的图片来代表游戏中的所有对象。但现在，让我们先做一个简单的操作：将绿色的`背景`改为紫色或粉色。然后点击**重新构建**，看看游戏发生了怎样的变化。
- en: Defining Objects in the Legend
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在图例中定义对象
- en: The next part of the script is the legend and is similar to the legend on a
    map, which explains which symbol represents a mountain or a forest, for example.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的下一部分是图例，它类似于地图上的图例，解释了某个符号代表了山脉或森林等。
- en: 'In your game, you’ll create levels to tell PuzzleScript where all the objects
    should go. Levels are saved as text characters, such as letters, numbers, and
    symbols like `.`, `#`, `P`, and so on. The items in the `LEGEND` section tell
    PuzzleScript which symbol refers to which object. Here’s the `LEGEND` section
    of the *Simple Block Pushing Game*:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的游戏中，你将创建关卡，告诉PuzzleScript所有对象应该放置的位置。关卡以文本字符保存，如字母、数字和符号，如`.`、`#`、`P`等。`LEGEND`部分中的项目告诉PuzzleScript哪个符号代表哪个对象。这是*简单方块推送游戏*的`LEGEND`部分：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can pick any keyboard symbol to represent any object, including the walls
    and the floor. But it’s best to pick symbols that, when you look at your levels
    later, will make it easy for you to identify what the level is at a glance. I
    usually pick `#` for walls because it’s dense and squarish, and pick `.` for the
    background because it’s the closest-looking symbol to empty space. For other objects,
    it’s easy to remember something like `P` represents `Player`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择任何键盘符号来代表任何对象，包括墙壁和地板。但最好选择那些在你稍后查看关卡时，能让你一眼就辨认出关卡内容的符号。我通常选择`#`代表墙壁，因为它密集且方形，选择`.`作为背景，因为它是与空白空间最接近的符号。对于其他对象，像`P`代表`Player`这样的记忆方式也很容易。
- en: 'This is the first level of the *Simple Block Pushing Game*:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是*简单方块推动游戏*的第一个关卡：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It shouldn’t be too hard to tell what the shape of the walls is and where all
    the objects are located inside it. The `LEGEND` tells us that the letter `P` is
    the player; the asterisk (`*`) is an orange crate, and the `O` is the target the
    player is trying to push the crate onto. The at symbol (`@`) represents a combined
    crate and target (you’ve pushed the crate onto the target), which tells PuzzleScript
    to put both objects in the same space.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 判断墙壁的形状以及所有对象的位置应该不难。`LEGEND`告诉我们字母`P`是玩家；星号（`*`）是橙色的箱子，`O`是玩家试图将箱子推到的目标。`@`符号代表一个结合的箱子和目标（你已将箱子推到目标上），这告诉PuzzleScript将这两个对象放在同一个空间里。
- en: Adding Sounds
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加声音
- en: Any sounds in your game go in the `SOUNDS` section. There’s just one sound in
    this sample game, that of a crate being pushed.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏中的所有声音都放在`SOUNDS`部分。在这个示例游戏中，只有一个声音，那就是推动箱子的声音。
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The number `36772507` represents the sound to play, and `Crate MOVE` tells PuzzleScript
    what action to link that sound to. When you click the numbers, you’ll hear the
    sound play.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 数字`36772507`代表播放的声音，`Crate MOVE`告诉PuzzleScript将该声音与什么动作关联。当你点击这些数字时，你会听到声音播放。
- en: Setting Collision Layers
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置碰撞层
- en: The code’s `COLLISIONLAYERS` section tells PuzzleScript which objects bump into
    others and which objects are on top of other objects. PuzzleScript manages collisions
    by moving objects in *layers*. The *Simple Block Pushing Game* has three collision
    layers.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中的`COLLISIONLAYERS`部分告诉PuzzleScript哪些对象会碰撞，哪些对象位于其他对象之上。PuzzleScript通过在*层*中移动对象来管理碰撞。*简单方块推动游戏*有三个碰撞层。
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To visualize these layers, think of your flat screen as if it has three dimensions,
    going from front to back. The `Background` layer is the layer farthest back into
    the screen. The `Target` layer (the dark squares) is the middle layer in front
    of the `Background` layer. And the frontmost layer is the one that contains the
    player, walls, and crates.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了可视化这些层，想象你的平面屏幕有三个维度，从前到后延伸。`Background`层是最远离屏幕的层。`Target`层（黑色方块）是位于`Background`层前面的中间层。最前面的层包含了玩家、墙壁和箱子。
- en: 'Because the player, walls, and crates are on the same layer, the player can’t
    move through either walls or crates, although they can push crates. Crates can’t
    move through walls or through other crates: if you try pushing a crate through
    another crate, it will be blocked and won’t move. For example, in the second level
    of the *Simple Block Pushing Game*, if the player tries to push down on the crate
    below them, it won’t budge because it’s blocked by another crate.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于玩家、墙壁和箱子位于同一层，玩家不能穿过墙壁或箱子，尽管他们可以推动箱子。箱子不能穿过墙壁或其他箱子：如果你尝试将一个箱子推过另一个箱子，它会被阻挡而无法移动。例如，在*简单方块推动游戏*的第二关中，如果玩家尝试向下推下面的箱子，它将不会移动，因为它被另一个箱子挡住了。
- en: When you create new objects, you need to add them to the `COLLISIONLAYERS` section.
    Most objects will probably go on the same layer as the player. But sometimes you’ll
    want objects to share the same space as other objects, like crates and targets.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建新对象时，需要将它们添加到`COLLISIONLAYERS`部分。大多数对象可能会和玩家位于同一层。但有时你可能希望一些对象与其他对象共享同一空间，比如箱子和目标。
- en: Writing Rules
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写规则
- en: 'In the `RULES` section we describe what should happen in your game—the way
    objects interact with each other. The *Simple Block Pushing Game* contains just
    one rule that describes how the player pushes crates:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在`RULES`部分，我们描述了游戏中应该发生的事情——对象之间是如何互动的。*简单方块推动游戏*只包含一个规则，描述了玩家如何推动箱子：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'On the left side of the arrow (`->`) are the objects the game is looking for.
    If the game finds these objects in the order written from left to right (a player
    next to a crate), the game changes those objects into the set of objects on the
    right side of the arrow (a player next to a crate). The difference is that in
    the first case, the player is moving. In the second case, the player and the crate
    are moving: that is, the player is pushing the crate.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头（`->`）左边是游戏正在寻找的对象。如果游戏从左到右找到这些对象（玩家在箱子旁边），则游戏会将这些对象转换为箭头右边的对象（玩家在箱子旁边）。区别在于，在第一种情况下，玩家正在移动。在第二种情况下，玩家和箱子都在移动：也就是说，玩家在推动箱子。
- en: 'The rule is saying that if the first set of objects exists, change it to the
    second set of objects. Change this to that: `[` this `] -> [` that `]`.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 规则是说，如果第一组对象存在，就将其转换为第二组对象。将这个转换成那个：`[` this `] -> [` that `]`。
- en: You use square brackets (`[]`) to enclose a set of objects and a vertical bar
    (`|`) to separate objects inside the square brackets. For example, the following
    line means a player is right next to a crate.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用方括号（`[]`）将一组对象括起来，使用竖线（`|`）分隔方括号中的对象。例如，以下这一行表示玩家正站在箱子旁边。
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'But the rule in the *Simple Block Pushing Game* is looking for this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 但是 *简单方块推箱子游戏* 中的规则是这样的：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, the greater than sign (`>`) means that the player is trying to move. The
    `>` is pointing toward that crate, which means the player is moving toward the
    crate. When the player moves toward a crate, the crate should move too, because
    the player is pushing it. So to push a crate, you turn `Crate` into `> Crate`
    to say that it’s moving in the same direction as the player.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，大于号（`>`）表示玩家正在尝试移动。`>` 指向那个箱子，这意味着玩家正在朝着箱子移动。当玩家朝箱子移动时，箱子也应该移动，因为玩家在推动它。所以，要推动箱子，你需要把
    `Crate` 改成 `> Crate`，表示它和玩家一起朝着相同的方向移动。
- en: All this happens before any of the objects actually move. The `>` really means
    “I want to move.” So a `> Player` and a `> Crate` will move at the same time.
    It’s a little confusing, so let’s walk through it step-by-step.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都发生在任何对象实际移动之前。`>` 真正的意思是“我想要移动”。所以一个 `> Player` 和一个 `> Crate` 会同时移动。这有点让人困惑，我们一步步来解析。
- en: 'Each time you press an arrow key in the *Simple Block Pushing Game*, this happens:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你按下 *简单方块推箱子游戏* 中的箭头键时，都会发生以下情况：
- en: The `Player` moves in the direction of the arrow key, turning the `Player` into
    a `> Player`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Player` 会朝着箭头键的方向移动，将 `Player` 变成 `> Player`。'
- en: PuzzleScript checks to see whether it can find any objects on the level that
    looks like [ `> Player | Crate` ]; that is, a player trying to move into a crate.
    If it finds a match, it changes those objects into whatever the rule says to change
    it to, which in this case is `[ > Player | > Crate ]`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PuzzleScript 会检查是否能找到类似于 [`> Player | Crate`] 的对象；也就是说，玩家试图进入一个箱子。如果找到了匹配项，它会将这些对象转换为规则中指定的内容，在这种情况下是
    `[ > Player | > Crate ]`。
- en: All the objects marked with `>` will try to move in that direction. If they’re
    not blocked by something else, they should move. If they’re blocked, they should
    stay in place.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有标记为 `>` 的对象都会尝试朝那个方向移动。如果它们没有被其他东西挡住，它们应该会移动。如果被挡住，它们应该停在原地。
- en: Keep in mind that PuzzleScript rules are checked in every direction. So even
    though the following rule is written left to right, it still will let a player
    push a crate from above, below, or the left.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，PuzzleScript 规则是会检查每个方向的。所以即使以下规则是从左到右写的，它仍然会允许玩家从上面、下面或左边推箱子。
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can read this rule as “If the player is moving toward a crate, make the
    crate move in that same direction.” The rule doesn’t specify the direction.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以把这个规则理解为“如果玩家正朝着箱子移动，就让箱子朝着相同的方向移动。”这个规则并没有指定方向。
- en: '![Image](../images/pg012-01.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg012-01.jpg)'
- en: Setting Win Conditions
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置胜利条件
- en: 'The `WINCONDITIONS` section in a PuzzleScript game explains what the player
    has to do to win the level and advance to the next level. This is the *Simple
    Block Pushing Game*’s win condition:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: PuzzleScript 游戏中的 `WINCONDITIONS` 部分解释了玩家必须做什么才能赢得关卡并进入下一关。这是 *简单方块推箱子游戏* 的胜利条件：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This condition means that when all target spaces (the dark squares) have a crate
    occupying the same space, the player wins the level! Why not write this as `All
    Crate on Target`? Well, there’s a subtle difference between the two.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这个条件意味着当所有目标空间（黑色方块）都被箱子占据时，玩家就赢得了关卡！为什么不写成 `All Crate on Target` 呢？好吧，这两者之间有一个微妙的区别。
- en: '`All Target on Crate` means every target must have its own crate.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`All Target on Crate`意味着每个目标都必须有一个对应的箱子。'
- en: '`All Crate on Target` means every crate must have its own target.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`All Crate on Target`意味着每个箱子必须有一个对应的目标。'
- en: Let’s say there are more crates than targets. Then, in the case of `All Target
    on Crate`, if every target had a crate on it, the win condition would be satisfied,
    even if some crates were left over. But if the win condition were `All Crate on
    Target`, every crate would need to be on its own target. In this particular scenario,
    there aren’t enough targets to satisfy this win condition, so the player could
    never win the game.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 假设箱子的数量多于目标的数量。那么，在`All Target on Crate`的情况下，如果每个目标上都有一个箱子，那么即使有些箱子被剩下，胜利条件也会满足。但如果胜利条件是`All
    Crate on Target`，那么每个箱子必须放在自己的目标上。在这种特定情况下，目标的数量不足以满足这个胜利条件，因此玩家永远也无法赢得游戏。
- en: 'Other games might have other win conditions. Here are some examples of valid
    win conditions:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 其他游戏可能有不同的胜利条件。以下是一些有效的胜利条件示例：
- en: '**No candy:** A game where you try to eat all the candy'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**没有糖果：** 一个你试图吃掉所有糖果的游戏。'
- en: '**Some purple:** A game where you try to mix colored paint to make new colors'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一些紫色：** 一个你试图混合颜色颜料以创造新颜色的游戏。'
- en: '**No puppy in the doghouse:** A game where you try to take every dog out for
    a walk'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**狗窝里没有小狗：** 这是一个你试图带每只狗去散步的游戏。'
- en: '**NOTE:** To learn more about PuzzleScript win conditions, read the official
    PuzzleScript documentation at *[https://www.puzzlescript.net/Documentation/documentation.html](https://www.puzzlescript.net/Documentation/documentation.html)*.
    Click **Docs** at the top of the screen and then click **Bird’s-Eye View of a
    PuzzleScript File ▸ WinConditions.**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 要了解更多关于 PuzzleScript 胜利条件的信息，请阅读官方的 PuzzleScript 文档，网址是 *[https://www.puzzlescript.net/Documentation/documentation.html](https://www.puzzlescript.net/Documentation/documentation.html)*。点击屏幕顶部的
    **Docs**，然后点击 **PuzzleScript 文件鸟瞰图 ▸ 胜利条件**。'
- en: Making Levels
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 制作关卡
- en: Your game’s levels go in the `LEVELS` section of your PuzzleScript script, as
    symbols, one after the other. (Fortunately, you don’t have to enter all your levels
    manually; PuzzleScript has a neat level editor, which you’ll learn about in [Chapter
    2](ch02.xhtml).)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你游戏中的关卡位于你的 PuzzleScript 脚本的`LEVELS`部分，以符号的形式，一个接一个地排列。（幸运的是，你不需要手动输入所有的关卡；PuzzleScript
    有一个很棒的关卡编辑器，你将在[第 2 章](ch02.xhtml)中学习到它。）
- en: 'The *Simple Block Pushing Game* has two levels, which the player will see in
    the order in which they appear in the list:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*简单的推箱子游戏*有两个关卡，玩家会按列表中出现的顺序看到它们：'
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Recall from the `LEGEND` section earlier that `#` represents walls, `.` represents
    open space, `P` is the player, `*` is a crate, `O` is a target, and `@` is a crate
    on a target. The contents of the `LEGEND` tells PuzzleScript how to “read” this
    level and turn it into a playable game with all the objects in their correct places.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下前面提到的`LEGEND`部分，`#`代表墙壁，`.`代表空地，`P`是玩家，`*`是箱子，`O`是目标，`@`是放在目标上的箱子。`LEGEND`部分的内容告诉
    PuzzleScript 如何“读取”这个关卡并将其转换为一个可以玩的游戏，其中所有物体都放在正确的位置。
- en: When you build your levels, use the level editor. But make sure that all finished
    levels end up in the `LEVELS` section in text form so they’ll be included in your
    game. (We’ll talk more about levels in [Chapter 2](ch02.xhtml).)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建关卡时，使用关卡编辑器。但确保所有完成的关卡以文本形式出现在`LEVELS`部分，这样它们才能包含在你的游戏中。（我们将在[第 2 章](ch02.xhtml)中进一步讨论关卡。）
- en: '![Image](../images/pg014-01.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/pg014-01.jpg)'
- en: What You Learned
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你学到了什么
- en: Phew! Now that you’ve learned the basic components of a PuzzleScript game and
    how PuzzleScript works, let’s take a short break. Take a deep breath, pet your
    cat, go for a walk, or make yourself a sandwich. You could even try playing some
    of PuzzleScript’s other built-in sample games by clicking the Load Example drop-down
    menu at the top of the page.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 呼，终于！现在你已经了解了 PuzzleScript 游戏的基本组成部分以及 PuzzleScript 的工作原理，我们休息一下吧。深呼吸，摸摸你的猫，去散散步，或者做个三明治。你甚至可以通过点击页面顶部的“加载示例”下拉菜单来尝试玩一些
    PuzzleScript 内置的其他示例游戏。
- en: Remembering to take breaks is a very important part of game making! If you keep
    working nonstop, you’ll get tired and frustrated, and you won’t get anything done!
    So make sure you take a moment to step away from the computer every now and then.
    I always get my best ideas for games when I’m away from the computer.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 记得休息是制作游戏非常重要的一部分！如果你一直不间断地工作，你会感到疲劳和沮丧，什么也做不成！所以一定要确保时不时离开电脑休息一下。我总是在离开电脑时得到游戏的最佳创意。
- en: When you get back from your break, we’ll make a game called *Herding Cats* from
    scratch!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 休息回来后，我们将从头开始制作一个名为*放牧猫咪*的游戏！
