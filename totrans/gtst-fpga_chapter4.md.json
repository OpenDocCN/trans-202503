["```\nmodule LED_Toggle_Project(\n  input  i_Clk,\n  input  i_Switch_1,\n  output o_LED_1);\n❶ reg r_LED_1    = 1'b0;\n  reg r_Switch_1 = 1'b0;\n❷ always @(posedge i_Clk)\n  begin\n  ❸ r_Switch_1 <= i_Switch_1;\n  ❹ if (i_Switch_1 == 1'b0 && r_Switch_1 == 1'b1)\n     begin\n     ❺ r_LED_1 <= ~r_LED_1;\n     end\n  end\n  assign o_LED_1 = r_LED_1;\nendmodule\n```", "```\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nentity LED_Toggle_Project is\n  port (\n     i_Clk      : in  std_logic;\n     i_Switch_1 : in  std_logic;\n     o_LED_1    : out std_logic\n  );\nend entity LED_Toggle_Project;\narchitecture RTL of LED_Toggle_Project is\n❶ signal r_LED_1    : std_logic := '0';\n  signal r_Switch_1 : std_logic := '0';\nbegin\n❷ process (i_Clk) is\n  begin\n     if rising_edge(i_Clk) then\n     ❸ r_Switch_1 <= i_Switch_1;\n     ❹ if i_Switch_1 = '0' and r_Switch_1 = '1' then\n        ❺ r_LED_1 <= not r_LED_1;\n        end if;\n     end if;\n  end process;\n  o_LED_1 <= r_LED_1;\nend architecture RTL;\n```", "```\ncreate_clock  -period 40.00 -name {i_Clk} [get_ports {i_Clk}]\n```", "```\nset_io i_Clk 15\n```", "```\n`--snip--`\nResource Usage Report for LED_Toggle_Project\nMapping to part: ice40hx1kvq100\nCell usage:\nSB_DFF 2 uses\nSB_LUT4 1 use\nI/O ports: 3\nI/O primitives: 3\nSB_GB_IO 1 use\nSB_IO 2 uses\nI/O Register bits: 0\n❶ Register bits not including I/Os: 2 (0%)\nTotal load per clock:\n ❷ LED_Toggle_Project|i_Clk: 1\nMapping Summary:\n❸ Total LUTs: 1 (0%)\n```", "```\n`--snip--`\n 1::Clock Frequency Summary\n==========================================================\nNumber of clocks: 1\nClock: i_Clk | Frequency: 654.05 MHz | Target: 25.00 MHz |\n`--snip--`\n```", "```\nalways @ (input_1 or input_2)\n  begin\n    and_gate <= input_1 & input_2;\n  end\n```", "```\nprocess (input_1, input_2)\nbegin\n  and_gate <= input_1 and input_2;\nend process;\n```", "```\nalways @ (posedge i_Clk)\n  begin\n    and_gate <= input_1 & input_2;\n  end\n```", "```\nprocess (i_Clk)\nbegin\n  if rising_edge(i_Clk) then\n    and_gate <= input_1 and input_2;\n  end if;\nend process;\n```", "```\n❶ always @ (i_A or i_B)\nbegin\n  if (i_A == 1'b0 && i_B == 1'b0)\n     o_Q <= 1'b0;\n       else if (i_A == 1'b0 && i_B == 1'b1)\n         o_Q <= 1'b1;\n       else if (i_A == 1'b1 && i_B == 1'b0)\n         o_Q <= 1'b1;\n  ❷ // Missing one last ELSE statement!\nend\n```", "```\n❶ process (i_A, i_B)\nbegin\n  if i_A = '0' and i_B = '0' then\n    o_Q <= '0';\n  elsif i_A = '0' and i_B = '1' then\n    o_Q <= '1';\n  elsif i_A = '1' and i_B = '0' then\n    o_Q <= '1';\n❷ -- Missing one last ELSE statement!\n  end if;\nend process;\n```", "```\n@W: CL118 :\"C:\\Test.v\":8:4:8:5|Latch generated from always block for signal\no_Q; possible missing assignment in an if or case statement.\n```", "```\n❶ always @ (posedge i_Clk)\nbegin\n  if (i_A == 1'b0 && i_B == 1'b0)\n    o_Q <= 1'b0;\n  else if (i_A == 1'b0 && i_B == 1'b1)\n    o_Q <= 1'b1;\n  else if (i_A == 1'b1 && i_B == 1'b0)\n    o_Q <= 1'b1;\nend\n```", "```\n❶ process (i_Clk)\nbegin\n  if rising_edge(i_Clk) then\n    if i_A = '0' and i_B = '0' then\n      o_Q <= '0';\n    elsif i_A = '0' and i_B = '1' then\n      o_Q <= '1';\n    elsif i_A = '1' and i_B = '0' then\n      o_Q <= '1';\n   end if;\n  end if;\nend process;\n```", "```\no_Q <= '0' when (i_A = '0' and i_B = '0') else\n       '1' when (i_A = '0' and i_B = '1') else\n       '1' when (i_A = '1' and i_B = '0');\n```", "```\n❶ always @ (posedge i_Clk)\nbegin\n❷ if (i_Reset)\n     o_Q <= 1'b1;\n❸ else\n`--snip--`\n```", "```\n❶ process (i_Clk)\nbegin\n  if rising_edge(i_Clk) then\n  ❷ if i_Reset = '1' then\n       o_Q <= '1';\n  ❸ else\n`--snip--`\n```", "```\n❶ always @ (posedge i_Clk or i_Reset)\nbegin\n❷ if (i_Reset)\n     o_Q <= 1'b1;\n❸ else\n`--snip--`\n```", "```\n❶ process (i_Clk, i_Reset)\nbegin\n❷ if (i_Reset = '1') then\n     o_Q <= '1';\n❸ elsif rising_edge(i_Clk) then\n`--snip--`\n```"]