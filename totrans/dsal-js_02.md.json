["```\nconst _getHeight = (tree) => (isEmpty(tree) ? 0 : tree.height);\n```", "```\nconst _getHeight = (tree) => {\n  return isEmpty(tree) ? 0 : tree.height;\n};\n```", "```\nconst newNode = (key) => ({\n  key,\n  left: null,\n  right: null,\n  height: 1\n});\n```", "```\nconst print = (tree, **s = \"\"**) => {\n  if (tree !== null) {\n    console.log(s, tree.key);\n    print(tree.left, `${s}  L:`);\n    print(tree.right, `${s}  R:`);\n  }\n};\n```", "```\n❶ class Tree {\n❷ _children = [];\n\n❸ constructor(rootKey) {\n    this._key = rootKey;\n  }\n\n  isEmpty() {\n    return this._key === undefined;\n  }\n\n❹ get key() {\n    this._throwIfEmpty();\n    return this._key;\n  }\n\n❺ set key(v) {\n    this._key = v;\n  }\n}\n```", "```\nconst myArray = [3, 1, 4, 1, 5, 9, 2, 6];\n❶ const arrayMax = Math.max(...myArray);\n❷ const newArray = [...myArray];\n```", "```\nconst myObject = {last: \"Darwin\", year: 1809};\n❶ const newObject = {...myObject, first: \"Charles\", year: 1882};\n// same as: {last: \"Darwin\", first: \"Charles\", year: 1882};\n```", "```\nconst myMax = (...nums) => {\n  let max = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (max < nums[i]) max = nums[i];\n  }\n  return max;\n};\n```", "```\n[first, last] = [\"Abraham\", \"Lincoln\"];\n```", "```\n[first, last, . . .years] = [\"Abraham\", \"Lincoln\", 1809, 1865];\n```", "```\nlet [first, last, role = \"President\", party] = [\"Abraham\", \"Lincoln\"];\n```", "```\n[heap[p], heap[i]] = [heap[i], heap[p]];\n```", "```\nconst order2 = (a, b) => {\n  if (a < b) {\n    return [a, b];\n  } else {\n    return [b, a];\n  }\n};\n\nlet [smaller, bigger] = order2(22, 9); // smaller==9, bigger==22\n```", "```\n// file: radix_tree.js – in CommonJS style\n\n❶ const EOW = \"■\";\nconst newRadixTree = () => null;\n❷ const newNode = () => ({links: {}});\nconst isEmpty = (rt) => !rt; // null or undefined\nconst print = (trie, s = \"\") => {...}\nconst printWords = (trie, s = \"\") => {...}\nconst find = (trie, wordToFind) => {...}\nconst add = (trie, wordToAdd, dataToAdd) => {...}\nconst remove = (trie, wordToRemove) => {...}\n\n❸ module.exports = {\n  add,\n  find,\n  isEmpty,\n  newRadixTree,\n  print,\n  printWords,\n  remove\n};\n```", "```\nconst {newRadixTree, add} = require(\"radix_tree.js\");\n```", "```\nconst RadixTree = require(\"radix_tree.js\");\n```", "```\n// file: radix_tree.js – in modern style\n\nconst EOW = \"■\";\n❶ **export** const newRadixTree = () => null;\nconst newNode = () => ({links: {}});\n❷ **export** const isEmpty = (rt) => !rt; // null or undefined\nconst print = (trie, s = \"\") => {...}\nconst printWords = (trie, s = \"\") => {...}\nconst find = (trie, wordToFind) => {...}\nconst add = (trie, wordToAdd, dataToAdd) => {...}\nconst remove = (trie, wordToRemove) => {...}\n\n❸ export {\n  add,\n  find,\n  print,\n  printWords,\n  remove\n};\n```", "```\nimport {newRadixTree, add} from \"radix_tree.js\";\n```", "```\nimport * as RadixTree from \"radix_tree.js\";\n```", "```\n// file: my_module.js\nexport default something = ... // whatever you want to export\n```", "```\nimport whatever from \"my_module.js\";\n```", "```\nfunction createPerson(firstN, lastN) {\n  let first = firstN;\n  let last = lastN;\n  return {\n    getFirst: function () {\n      return first;\n    },\n\n    getLast: function () {\n      return last;\n    },\n\n    fullName: function () {\n      return first + \" \" + last;\n    },\n\n    setName: function (firstN, lastN) {\n      first = firstN;\n      last = lastN;\n    }\n  };\n}\n```", "```\nconst me = createPerson(\"Federico\", \"Kereki\");\nconsole.log(me.getFirst()); // Federico\nconsole.log(me.getLast());  // Kereki\nconsole.log(me.fullName()); // Federico Kereki\n\nme.setName(\"John\", \"Doe\");\nconsole.log(me.fullName()); // John Doe\n```", "```\nconst tax = (function (basicTax) {\n  let vat = basicTax;\n  /*\n    ...many more tax-related variables\n  */\n  return {\n    setVat: function (newVat) {\n      vat = newVat;\n    },\n    getVat: function () {\n      return vat;\n    },\n    addVat: function (value) {\n      return value * (1 + vat / 100);\n    }\n    /*\n      ...many more tax-related functions\n    */\n  };\n})(6);\n```", "```\nconsole.log(tax.getVat());    // 6: the initial default\ntax.setVat(8);\nconsole.log(tax.getVat());    // 8\nconsole.log(tax.addVat(200)); // 216\n```", "```\n/**\n * Add a new key to a heap.\n *\n * @author F.Kereki\n * @version 1.0\n * @param {pointer} heap – Heap to which the key is added\n * @param {string} keyToAdd – Key to be added\n * @return Updated heap\n */\nconst add = (heap, keyToAdd) => {\n  heap.push(keyToAdd);\n  _bubbleUp(heap, heap.length – 1);\n  return heap;\n};\n```"]