- en: Appendix A. Perl’s Special Variables
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录 A. Perl 的特殊变量
- en: In this appendix, I summarize Perl’s most commonly used special (predefined)
    variables, such as `$_`, `$.`, `$/`, `$\`, `$1`, `$2`, `$3` (and so on), `$`,,
    `@F`, and `@ARGV`, among others.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我总结了 Perl 最常用的特殊（预定义）变量，如 `$_`、`$.`、`$/`、`$\`、`$1`、`$2`、`$3`（等等）、`$`、`@F`
    和 `@ARGV` 等。
- en: A.1 Variable $_
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.1 变量 $_
- en: The `$_` variable, called the *default variable*, is the most commonly used
    variable in Perl. Often this variable is pronounced “it” (when not pronounced
    “dollar-underscore”); as you read on, you’ll understand why.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`$_` 变量，被称为 *默认变量*，是 Perl 中最常用的变量。通常这个变量被读作“it”（如果不读作“dollar-underscore”）；当你继续阅读时，你会明白原因。'
- en: 'When using the `-n` and `-p` command-line arguments, it’s (see?) where the
    input is stored. Also, many operators and functions act on it implicitly. Here’s
    an example:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `-n` 和 `-p` 命令行参数时，输入被存储在哪里呢？而且，许多操作符和函数会隐式地作用于它。这里有一个例子：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, I place the string `"foo"` in the `$_` variable and then call `print`.
    When given no arguments, `print` prints the contents of the `$_` variable, which
    is `"foo"`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我将字符串 `"foo"` 放入 `$_` 变量中，然后调用 `print`。当没有参数时，`print` 会打印 `$_` 变量的内容，即 `"foo"`。
- en: 'Similarly, `$_` is used by the `s/regex/replace/` and `/regex/` operators when
    used without the `=~` operator. Consider this example:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，当 `s/regex/replace/` 和 `/regex/` 操作符没有使用 `=~` 操作符时，`$_` 会被使用。考虑这个例子：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This one-liner prints only lines that match `/foo/`. The `/foo/` operator implicitly
    operates on the `$_` variable that contains the current line. You could rewrite
    this as follows, but doing so would require too much typing:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个一行命令仅打印匹配`/foo/`的行。`/foo/` 操作符隐式地作用于包含当前行的 `$_` 变量。你也可以将其重写为以下内容，但那样会需要输入过多：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '“If it matches `/foo/`, print it”—you get the idea. You could also replace
    text in all the lines simply by calling `s/foo/bar/`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: “如果匹配 `/foo/`，则打印出来”——你大概明白了。你也可以通过调用 `s/foo/bar/` 来简单地替换所有行中的文本：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Interestingly, Perl borrows the `$_` variable from sed. Remember that sed has
    a pattern space? The `$_` variable can also be called Perl’s pattern space. If
    you wrote the previous one-liner (`perl -pe 's/foo/bar/'`) in sed, it would look
    like `sed 's/foo/bar/'` because sed puts each line in the pattern space and the
    `s` command acts on it implicitly. Perl borrows many concepts and commands from
    sed.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，Perl 借用了 `$_` 变量来自 sed。记得 sed 有一个模式空间吗？`$_` 变量也可以称为 Perl 的模式空间。如果你在 sed
    中编写前面的单行命令 (`perl -pe 's/foo/bar/'`)，它会变成 `sed 's/foo/bar/'`，因为 sed 会将每一行放入模式空间中，并且
    `s` 命令会隐式地作用于它。Perl 从 sed 借用了许多概念和命令。
- en: Using $_ with the -n argument
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `$_` 和 `-n` 参数
- en: 'When using the `-n` argument, Perl puts the following loop around your program:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `-n` 参数时，Perl 会在你的程序周围加上以下循环：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `while (<>)` loop reads lines from standard input or files named on the
    command line and puts each line into the `$_` variable. You can then modify the
    lines and print them. For example, you can reverse the lines:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`while (<>)` 循环从标准输入或命令行上指定的文件中读取行，并将每一行放入 `$_` 变量中。你可以修改这些行并打印它们。例如，你可以反转这些行：'
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Because I’m using the `-n` argument here, this program becomes
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我在这里使用了 `-n` 参数，所以这个程序变成了：
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: which is equivalent to
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于
- en: '[PRE7]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The two programs are equivalent because many Perl functions act on `$_` implicitly,
    which makes writing `reverse` and `reverse $_` functionally the same thing. You
    need `scalar` to put the `reverse` function in the scalar context. Otherwise it’s
    in the list context (`print` forces the list context) and won’t reverse strings.
    (I explain the `-n` flag in great detail in one-liner 2.6 on page 12 and line
    reversing in one-liner 6.22 on page 67.)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个程序是等价的，因为许多 Perl 函数会隐式地作用于 `$_`，这使得写 `reverse` 和 `reverse $_` 在功能上是一样的。你需要使用
    `scalar` 来将 `reverse` 函数放入标量上下文中。否则，它会在列表上下文中（`print` 强制列表上下文），并且不会反转字符串。（我在第
    12 页的单行命令 2.6 中详细解释了 `-n` 标志，在第 67 页的单行命令 6.22 中讲解了行反转。）
- en: Using $_ with the -p argument
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `$_` 和 `-p` 参数
- en: 'When you use the `-p` argument, Perl puts the following loop around your program:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 `-p` 参数时，Perl 会在你的程序周围加上以下循环：
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The result is almost the same as for the `-n` argument, except that after each
    iteration the content of `$_` is printed (through `print` in the `continue` block).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 结果几乎与使用 `-n` 参数时相同，只是每次迭代后，`$_` 的内容会被打印出来（通过 `continue` 块中的 `print`）。
- en: 'To reverse the lines as I did with `-n`, I can do this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了像使用 `-n` 时那样反转行，我可以这样做：
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The program now becomes:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在程序变成了：
- en: '[PRE10]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: I’ve modified the `$_` variable and set it to `reverse $_`, which reverses the
    line. The `continue` block makes sure that it’s printed. (One-liner 2.1 on page
    7 explains the `-p` argument in more detail.)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我已将 `$_` 变量修改为 `reverse $_`，这会反转行。`continue` 块确保它会被打印。（书中第 7 页的单行代码 2.1 更详细地解释了
    `-p` 参数。）
- en: Using $_ explicitly
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 明确使用 `$_`
- en: 'The `$_` variable is also often used explicitly. Here are some examples of
    using the `$_` variable explicitly:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`$_` 变量也常常被显式使用。以下是一些显式使用 `$_` 变量的例子：'
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The output of this one-liner is `2 4 6 8 10 12 14 16 18 20`. Here, I use the
    `map` function to map an expression over each element in the given list and return
    a new list, where each element is the result of the expression. In this case,
    the list is `1..10` (`1 2 3 4 5 6 7 8 9 10`) and the expression is `$_ * 2`, which
    means multiply each element (“it”) by `2`. As you can see, I’m using `$_` explicitly.
    When the `map` function iterates over the list, each element is put into `$_`
    for my convenience.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码的输出是 `2 4 6 8 10 12 14 16 18 20`。在这里，我使用 `map` 函数对给定列表中的每个元素应用表达式，并返回一个新的列表，其中每个元素都是该表达式的结果。在这个例子中，列表是
    `1..10`（`1 2 3 4 5 6 7 8 9 10`），表达式是 `$_ * 2`，意味着将每个元素（“它”）乘以 `2`。如你所见，我明确地使用了
    `$_`。当 `map` 函数遍历列表时，每个元素会被放入 `$_`，方便我使用。
- en: Now let’s use `map` in a handy one-liner. How about one that multiplies each
    element on a line by 2?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在一个方便的单行代码中使用 `map`。怎么样，试试一个将每行的每个元素乘以 2 的例子？
- en: '[PRE12]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This one-liner maps the expression `$_ * 2` onto each element in `@F`. The crazy-looking
    `"@{[...]}"` is just a way to execute code inside quotes. (One-liner 4.2 on page
    30 explains `@F`, and one-liner 4.4 on page 32 explains `"@{[...]}"`.)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码将表达式 `$_ * 2` 应用到 `@F` 中的每个元素。看起来很复杂的 `"@{[...]}"` 只是执行代码的一种方式，放在引号内部。（书中第
    30 页的单行代码 4.2 解释了 `@F`，第 32 页的单行代码 4.4 解释了 `"@{[...]}"`。）
- en: 'Another function that explicitly uses `$_` is `grep`, which lets you filter
    the elements from a list. Here’s an example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个显式使用 `$_` 的函数是 `grep`，它允许你从列表中过滤元素。这里是一个例子：
- en: '[PRE13]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The output of this one-liner is `6 7 8 9 10`. As you can see, `grep` filtered
    elements greater than 5 from the list. The condition `$_ > 5` asks, “Is the current
    element greater than 5?”—or, more succinctly, “Is it greater than 5?”
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码的输出是 `6 7 8 9 10`。如你所见，`grep` 从列表中过滤掉了大于 5 的元素。条件 `$_ > 5` 问的是：“当前元素是否大于
    5？”——更简洁地说，“它是否大于 5？”
- en: Let’s use `grep` in a one-liner. How about one that finds and prints all elements
    on the current line that are palindromes?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在一行代码中使用 `grep`。如何用一个查找并打印当前行上所有回文的例子呢？
- en: '[PRE14]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The condition specified to the `grep` function here is `$_ eq reverse $_`,
    which asks, “Is the current element the same as its reverse?” This condition is
    true only for palindromes. For example, given the following input:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里传给 `grep` 函数的条件是 `$_ eq reverse $_`，它问的是：“当前元素是否与其反向相同？”这个条件只对回文有效。例如，给定以下输入：
- en: '[PRE15]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'the one-liner outputs this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码输出的是：
- en: '[PRE16]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you can see, all of these elements are palindromes.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，所有这些元素都是回文。
- en: You can learn even more about the `$_` variable by typing `perldoc perlvar`
    at the command line. The *perlvar* documentation explains all the predefined variables
    in Perl.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在命令行中输入 `perldoc perlvar` 来进一步了解 `$_` 变量。*perlvar* 文档解释了 Perl 中所有的预定义变量。
- en: A.2 Variable $.
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.2 变量 $.
- en: 'When reading a file, the `$.` variable always contains the line number of the
    line currently being read. For example, this one-liner numbers the lines in `file`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在读取文件时，`$.` 变量总是包含当前正在读取的行号。例如，这行代码为 `file` 中的每一行编号：
- en: '[PRE17]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You can do the same thing with this one-liner, which replaces the current line
    with the line number followed by the same line:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这行代码来做同样的事情，它将当前行替换为行号，后面跟着相同的行：
- en: '[PRE18]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `$.` variable isn’t reset across files, so to number multiple files simultaneously,
    you write
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`$.` 变量在多个文件之间不会重置，所以要同时为多个文件编号，你可以写：'
- en: '[PRE19]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This one-liner continues numbering lines in `file2` where `file1` left off.
    (If `file1` contains 10 lines, the first line of `file2` is numbered 11.)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码继续为 `file2` 中的行编号，接着 `file1` 停下的位置。（如果 `file1` 有 10 行，`file2` 的第一行将被编号为
    11。）
- en: 'To reset the `$.` variable, you use an explicit `close` on the current file
    handle `ARGV`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要重置 `$.` 变量，你可以显式地对当前文件句柄 `ARGV` 执行 `close`：
- en: '[PRE20]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`ARGV` is a special file handle that contains the currently open file. By calling
    `eof`, I’m checking to see if it’s the end of the current file. If so, `close`
    closes it, which resets the `$.` variable.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`ARGV` 是一个特殊的文件句柄，包含当前打开的文件。通过调用 `eof`，我在检查当前文件是否已到达结尾。如果是，`close` 会关闭它，从而重置
    `$.` 变量。'
- en: You can change what Perl considers to be a line by modifying the `$/` variable.
    The next section discusses this variable.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: A.3 Variable $/
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `$/` variable is the input record separator, which is a newline by default.
    This variable tells Perl what to consider a line. Say you have this simple program
    that numbers lines:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Because `$/` is a newline by default, Perl reads everything up to the first
    newline, puts it in the `$_` variable, and increments the `$.` variable. Next,
    it calls `print "$. $_"`, which prints the current line number and the line. But
    if you change the value of `$/` to two newlines, like `$/ = "\n\n"`, Perl reads
    everything up to the first two newlines; that is, it reads text paragraph by paragraph
    rather than line by line.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Here’s another example. If you have a file like the following, you can set `$/`
    to `:`, and Perl will read the file digit by digit.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Or if you set `$/` to `undef`, Perl reads the entire file in a single read
    (called *slurping*):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This one-liner slurps the entire file `file` in variable `$contents`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also set `$/` to reference an integer:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In this case, Perl reads the file 1024 bytes at a time. (This is also called
    *record-by-record reading*.)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the `-0` command-line switch to provide this variable with
    a value, but note that you can’t do the record-by-record version like this. For
    example, to set `$/` to `:`, specify `-0072` because `072` is the octal value
    of the `:` character.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: To remember what this variable does, recall that when quoting poetry, lines
    are separated by `/`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: A.4 Variable $\
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The dollar-backslash variable is appended after every `print` operation. For
    example, you could append a dot followed by a space `". "` after each `print`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This one-liner produces the following output:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Modifying this variable is especially helpful when you want to separate printouts
    by double newlines.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: To remember this variable, just recall that you probably want to print `\n`
    after every line. Note that for Perl 5.10 and later, the function `say` is available,
    which is like `print`, except that it always adds a newline at the end and doesn’t
    use the `$\` variable.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: A.5 Variables $1, $2, $3, and so on
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Variables `$1`, `$2`, `$3`, and so on contain the matches from the corresponding
    set of capturing parentheses in the last pattern match. Here’s an example:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This one-liner matches lines that contain the string `She said:` and then captures
    everything after the string in variable `$1` and prints it.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'When you use another pair of parentheses, the text is captured in variable
    `$2`, and so on:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In this one-liner, first either `"She"` or `"He"` is captured in variable `$1`
    and then anything she or he said is captured in variable `$2` and printed as `"$1:
    $2"`. You’ll get the same number of capture variables as you have pairs of parentheses.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'To avoid capturing text in a variable, use the `?:` symbols inside the opening
    parenthesis. For example, changing `(She|He)` to `(?:She|He)`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: will not capture `"She"` or `"He"` in variable `$1`. Instead, the second pair
    of parentheses captures what she or he said in variable `$1`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 不会将 `"She"` 或 `"He"` 捕获到变量 `$1` 中。相反，第二对括号会将她或他说的话捕获到变量 `$1` 中。
- en: 'Beginning with Perl 5.10, you can use named capture groups as in `(?<name>...)`.
    When you do, instead of using variables `$1`, `$2`, and so on, you can use `$+{name}`
    to refer to the group. For example, this captures `"She"` or `"He"` in the named
    group `gender` and the said text in the named group `text`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Perl 5.10 开始，你可以使用命名捕获组，例如 `(?<name>...)`。这样做时，您可以使用 `$+{name}` 来引用组，而不是使用变量
    `$1`、`$2` 等。例如，这将 `"She"` 或 `"He"` 捕获到名为 `gender` 的组中，并将她或他说的话捕获到名为 `text` 的组中：
- en: '[PRE30]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: A.6 Variable $,
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.6 变量 $,
- en: 'The `$`, variable is the output field separator for `print` when printing multiple
    values. It’s undefined by default, which means that all items printed are concatenated
    together. Indeed, if you do this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`$` 变量是 `print` 打印多个值时的输出字段分隔符。默认情况下它未定义，这意味着所有打印的项都会连接在一起。实际上，如果你这样做：'
- en: '[PRE31]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'you get `123` printed out. If you set `$`, to a colon, however:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你将打印出 `123`。然而，如果你将 `$` 设置为冒号，则会：
- en: '[PRE32]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: you get `1:2:3`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到 `1:2:3`。
- en: 'Now, suppose you want to print an array of values. If you do this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设你想打印一组值。如果你这样做：
- en: '[PRE33]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'the output is `123`. But if you quote the variable, the values are space separated:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 输出是 `123`。但如果你将变量加上引号，值将以空格分隔：
- en: '[PRE34]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: So the output is `1 2 3` because the array is interpolated in a double-quoted
    string.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 所以输出是 `1 2 3`，因为数组在双引号字符串中被插值。
- en: A.7 Variable $”
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.7 变量 $”
- en: 'This brings us to the `$"` variable: a single white space (by default) that’s
    inserted between every array value when it’s interpolated. When you write things
    like `print "@data"`, the `@data` array gets interpolated, and the value of `$"`
    is inserted between every array element. For example, this prints `1 2 3`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这就引出了 `$"` 变量：它是一个单一的空格（默认情况下），会在每个数组值之间插入。当你写类似 `print "@data"` 的代码时，`@data`
    数组会被插入，且 `$"` 的值会在每个数组元素之间插入。例如，以下代码会打印 `1 2 3`：
- en: '[PRE35]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'But if you change `$"` to, say, a dash `-`, the output becomes `1-2-3`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你将 `$"` 改为，例如，破折号 `-`，输出将变为 `1-2-3`：
- en: '[PRE36]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Recall the `@{[...]}` trick here. If you `print "@{[...]}"`, you can execute
    code placed between the square brackets. For examples and more details, see section
    [A.1 Variable $_](apa.html#a_1_variable_dollar "A.1 Variable $_")’s discussion
    of the `$_` variable on page 95 and one-liner 4.4 on page 32.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下这里的 `@{[...]}` 技巧。如果你 `print "@{[...]}"`，你可以执行放在方括号中的代码。更多示例和细节，请参见 [A.1
    变量 $_](apa.html#a_1_variable_dollar "A.1 变量 $_") 一节讨论的 `$_` 变量，见第 95 页及第 32 页的一行代码
    4.4。
- en: A.8 Variable @F
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.8 变量 @F
- en: The `@F` variable is created in your Perl program when you use the `-a` argument,
    which stands for auto-split fields. When you use `-a`, the input is split on whitespace
    characters and the resulting fields are put in `@F`. For example, if the input
    line is `foo bar baz`, then `@F` is an array `("foo", "bar", "baz")`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`@F` 变量是在你的 Perl 程序中使用 `-a` 参数时创建的，`-a` 代表自动分割字段。当你使用 `-a` 时，输入会按空格字符分割，生成的字段会放入
    `@F` 中。例如，如果输入行是 `foo bar baz`，那么 `@F` 是一个数组 `("foo", "bar", "baz")`。'
- en: 'This technique allows you to operate on individual fields. For instance, you
    can access `$F[2]` to print the third field as follows (remembering that arrays
    start from index 0):'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术允许你操作单独的字段。例如，你可以访问 `$F[2]` 来打印第三个字段，如下所示（记住数组是从索引 0 开始的）：
- en: '[PRE37]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'You can also perform various calculations, like multiplying the fifth field
    by 2:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以进行各种计算，比如将第五个字段乘以 2：
- en: '[PRE38]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Here, the fifth field `$F[4]` is multiplied by 2, and `print "@F"` prints all
    the fields, separated by a space.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，第五个字段 `$F[4]` 被乘以 2，而 `print "@F"` 会打印所有字段，字段之间用空格分隔。
- en: You can also use the `-a` argument with the `-F` argument, which specifies the
    character to split on. For example, to process the colon-separated entries in
    */etc/passwd* entries, you write
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将 `-a` 参数与 `-F` 参数一起使用，`-F` 参数指定分隔字符。例如，要处理 */etc/passwd* 中以冒号分隔的条目，你可以写：
- en: '[PRE39]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: which prints the usernames from */etc/passwd*.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 它会打印来自 */etc/passwd* 的用户名。
- en: A.9 Variable @ARGV
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.9 变量 @ARGV
- en: 'The `@ARGV` variable contains the arguments that you pass to your Perl program.
    For example, this prints `foo bar baz`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`@ARGV` 变量包含传递给 Perl 程序的参数。例如，以下代码会打印 `foo bar baz`：'
- en: '[PRE40]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'When you use `-n` or `-p` flags, the arguments that you pass to your Perl program
    are opened one by one as files and removed from `@ARGV`. To access the filenames
    passed to your program, save them in a new variable in the `BEGIN` block:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 `-n` 或 `-p` 标志时，传递给 Perl 程序的参数会一个一个地作为文件打开，并从 `@ARGV` 中移除。要访问传递给程序的文件名，可以在
    `BEGIN` 块中将它们保存在一个新变量中：
- en: '[PRE41]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Now you can use `@A` in your program, which contains `("file1", "file2")`. If
    you didn’t do this and you used `@ARGV`, it would contain `("file2")` at first,
    but when `file1` was processed, it would be empty `()`. Be careful here!
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以在程序中使用 `@A`，它包含 `("file1", "file2")`。如果你没有这么做，而是直接使用 `@ARGV`，一开始它将包含 `("file2")`，但当
    `file1` 被处理时，它将变为空 `()`。这里要小心！
- en: A similar-looking variable, `$ARGV`, contains the filename of the file currently
    being read, which is `"-"` if the program is currently reading from the standard
    input.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 一个外观相似的变量 `$ARGV` 包含当前正在读取的文件名，如果程序当前从标准输入读取，则为 `"-"`。
- en: A.10 Variable %ENV
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.10 变量 %ENV
- en: The `%ENV` hash contains environment variables from your shell. This variable
    comes in handy when you wish to predefine some values in your script and then
    use these values in your Perl program or one-liner.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`%ENV` 哈希表包含来自你的 shell 的环境变量。当你希望在脚本中预定义一些值并在 Perl 程序或单行命令中使用这些值时，这个变量非常有用。'
- en: 'Say you want to use the `system` function to execute a program that’s not in
    the path. You could modify the `$ENV{PATH}` variable and append the needed path:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想使用 `system` 函数执行一个不在路径中的程序。你可以修改 `$ENV{PATH}` 变量并附加所需的路径：
- en: '[PRE42]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'This one-liner prints all environment variables from Perl:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令打印所有来自 Perl 的环境变量：
- en: '[PRE43]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: It loops over the keys (environment variable names) of the `%ENV` hash, puts
    each key into the `$_` variable, and then prints the name followed by `$ENV{$_}`,
    which is the value of the environment variable.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 它遍历 `%ENV` 哈希表的键（环境变量名），将每个键放入 `$_` 变量中，然后打印该名称后跟 `$ENV{$_}`，即环境变量的值。
