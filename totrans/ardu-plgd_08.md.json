["```\n//Custom pH Meter Sketch\n//Smoothes both temperature and pH\n\n#include <Wire.h>\n#include <LiquidCrystal_I2C.h>\n/* Visit http://playground.arduino.cc/Main/I2cScanner for code\n  you can run to figure out your LCD's I2C address if 0x27 doesn't work. */\nLiquidCrystal_I2C lcd(0x27, 16, 2); //16x2 display\n//There are a couple of libraries out there. The one I used was\n//simply Liquid Crystal_I2C for a generic type display.\nconst int numReadings = 10;\nconst int numReadings2 = 20;\nconst int meterOut1 = 5;\nconst int meterOut2 = 6;\n\nfloat readings[numReadings];         //The readings from the analog input\nfloat readings2[numReadings2];\n\nint index = 0;                       //The index of the current reading\nint index2 = 0;\nfloat total = 0;                     //The running total\nfloat total2 = 0;\n\nfloat average = 0;                  //The average\nfloat average2 = 0;\n\nint pHpin = A0;\nint tempPin = A1;\nint meterdrive1;\nint meterdrive2;\n\nint pHvalue = 0;\nfloat val;\nfloat val2;\nfloat tempC;\nfloat temp2;\nvoid setup() {\n  lcd.init(); //You may have to use a different command, depending on the\n             //library you use\n  lcd.backlight();\n  pinMode(meterOut1, OUTPUT);\n  pinMode(meterOut2, OUTPUT);\n\n  //Initialize serial communication with computer:\n  Serial.begin(9600);\n\n  //Initialize all the pH and temperature readings to 0:\n  for(int thisReading = 0; thisReading < numReadings; thisReading++) {\n    readings[thisReading] = 0;\n  }\n  for(int thisReading2 = 0; thisReading2 < numReadings2; thisReading2++) {\n    readings2[thisReading2] = 0;\n  }\n\n  //Configure the reference voltage used for analog input to 1.1V\n  analogReference(INTERNAL);\n}\n\nvoid loop() {\n\n  tempC = analogRead(tempPin);\n  temp2 = tempC/9.31; //My calibration factor was 9.31, as determined\n                     //by the boiling water and ice tests\n\n  pHvalue = analogRead(pHpin);\n\n  val = map(pHvalue, 0, 1023, 0, 1400);\n  val = constrain(val, 0, 1400);\n\n  val2 = val/100;\n\n  meterdrive1 = map(average, 0, 14, 0, 255);\n  meterdrive2 = map(average, 14, 0, 0, 255);\n\n  analogWrite(meterOut1, meterdrive1);\n  analogWrite(meterOut2, meterdrive2);\n\n  //Subtract the last reading:\n  total = total - readings[index];\n\n  //Read from the sensor:\n  readings [index] = val2;\n\n  //Add the new reading to the total:\n  total = total + readings[index];\n\n  //Advance to the next position in the array:\n  index = index + 1;\n\n  //If we're at the end of the array…\n  if(index >= numReadings)\n    //…wrap around to the beginning:\n    index = 0;\n\n  //Calculate the average:\n  average = total / numReadings;\n\n  //Subtract the last reading:\n  total2 = total2 - readings2[index2];\n\n  //Get readings from the temperature sensor:\n  readings2 [index2] = temp2;\n\n  //Add the temperature reading to the total:\n  total2 = total2 + readings2[index2];\n\n  //Advance to the next position in the array:\n  index2 = index2 + 1;\n\n  //If we're at the end of the array…\n  if(index2 >= numReadings2)\n    //…wrap around to the beginning:\n    index2 = 0;\n\n  //Calculate the average:\n\n  average2 = total2 / numReadings2;\n\n  delay(1);                   //Delay between reads for stability\n\n  lcd.setCursor(0,0);\n  lcd.print(\"pH\");\n  lcd.setCursor(4,0);\n  lcd.print(\"               \");\n  lcd.setCursor(7,0);\n  lcd.print(average,2);      //Truncate to two decimal places\n  lcd.setCursor(0,1);\n\n  lcd.print(\"Temp \");\n  lcd.print(average2*.98,1); //Error calculated from empirical measurement\n  lcd.print((char)223);      //Print the degree symbol\n/* This may vary depending on display. One display used ((char)178) for the\ndegree symbol.*/\n  lcd.print(\"  C\");\n\n  delay(600);  \n\n}\n```", "```\nmeterdrive1 = map(average, 0, 14, 0, 255);\nmeterdrive2 = map(average, 14, 0, 0, 255);\n```", "```\nmap(value, fromLow, fromHigh, toLow, toHigh)\n```", "```\nlcd.print(average,2); //Truncate to two decimal places\n```"]