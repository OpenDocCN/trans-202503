["```\n<?php\n$today = new DateTimeImmutable();\nvar_dump($today);\n```", "```\nobject(DateTimeImmutable)#1 (3) {\n  [\"date\"]=>\n  string(26) \"1968-11-22 09:05:30.000000\"\n  [\"timezone_type\"]=>\n  int(3)\n  [\"timezone\"]=>\n  string(3) \"Europe/Dublin\"\n}\n```", "```\n$rasmusBirthdate = new DateTimeImmutable('1968-11-22T09:05:30');\n```", "```\n<?php\n$now = new DateTimeImmutable();\n\n$atomDateString = $now->format(DateTimeInterface::ATOM);\nprint 'now (ISO-8601): ' . $atomDateString . PHP_EOL;\n```", "```\nnow (ISO-8601): 1968-11-22T09:05:30 + 00:00\n```", "```\n<?php\n$now = new DateTimeImmutable();\n\n$formattedDateString = $now->\n    format('l \\t\\h\\e jS \\o\\f F Y \\a\\t i \\m\\i\\n\\s \\p\\a\\s\\t ga');\nprint 'now (nice format): ' . $formattedDateString . PHP_EOL;\n```", "```\nnow (nice format): Friday the 22nd of November 1968 at 05 mins past 9am\n```", "```\n$date = DateTimeImmutable::createFromFormat('j-M-Y', '15-Feb-2009');\n```", "```\n<?php\n$today = new DateTime();\nprint 'today (before modify) = ' . $today->format('Y-m-d') . PHP_EOL;\n\n$tomorrow = $today->modify('+1 day');\nprint 'today = ' . $today->format('Y-m-d') . PHP_EOL;\nprint 'tomorrow = ' . $tomorrow->format('Y-m-d') . PHP_EOL;\n```", "```\ntoday (before modify) = 1968-11-22\ntoday = 1968-11-23\ntomorrow = 1968-11-23\n```", "```\ntoday (before modify) = 1968-11-22\ntoday = 1968-11-22\ntomorrow = 1968-11-23\n```", "```\n<?php\nfunction showModify(string $modifier): void\n{\n    print PHP_EOL. $modifier . PHP_EOL;\n    $date1 = new DateTimeImmutable();\n    $date2 = $date1->modify($modifier);\n    print 'date1 = ' . $date1->format(DateTimeInterface::ATOM) . PHP_EOL;\n    print 'date2 = ' . $date2->format(DateTimeInterface::ATOM) . PHP_EOL;\n}\n\nshowModify('first day of this month');\nshowModify('+1 day');\nshowModify('+30 seconds');\nshowModify('-10 seconds');\nshowModify('+1 month +3 days +1 seconds');\n```", "```\nfirst day of this month\ndate1 = 1968-11-22T09:05:30 + 00:00\n❶ date2 = 1968-11-01T09:05:30 + 00:00\n\n+1 day\ndate1 = 1968-11-22T09:05:30 + 00:00\n❷ date2 = 1968-11-23T09:05:30 + 00:00\n\n+30 seconds\ndate1 = 1968-11-22T09:05:30 + 00:00\ndate2 = 1968-11-22T09:06:00 + 00:00\n\n-10 seconds\ndate1 = 1968-11-22T09:05:30 + 00:00\ndate2 = 1968-11-22T09:05:20 + 00:00\n\n+1 month +3 days +1 seconds\ndate1 = 1968-11-22T09:05:30 + 00:00\ndate2 = 1968-12-25T09:05:31 + 00:00\n```", "```\n$date2 = $date1->modify('2000-12-31');\n$date2 = $date1->setDate(2000, 12, 31);\n```", "```\n<?php\n$interval1 = DateInterval::createFromDateString('30 seconds');\n$interval2 = DateInterval::createFromDateString('1 day');\n\n$date1 = new DateTimeImmutable();\n$date2 = $date1->add($interval1);\n$date3 = $date1->sub($interval2);\n\nprint '$date1 = ' . $date1->format(DateTimeInterface::ATOM) . PHP_EOL;\nprint '$date2 = ' . $date2->format(DateTimeInterface::ATOM) . PHP_EOL;\nprint '$date3 = ' . $date3->format(DateTimeInterface::ATOM) . PHP_EOL;\n```", "```\n$date1 = 1968-11-22T09:05:30 + 00:00\n$date2 = 1968-11-22T09:06:00 + 00:00\n$date3 = 1968-11-21T09:05:30 + 00:00\n```", "```\n<?php\n$date1 = new DateTimeImmutable('1968-11-22');\n$date2 = new DateTimeImmutable('1968-11-16');\n\n$interval = $date1->diff($date2);\nprint '$interval = ' . $interval->\n    format('%m months, %d days, %i minutes, %s seconds');\n```", "```\n$interval = 0 months, 6 days, 0 minutes, 0 seconds\n```", "```\n<?php\n$today = new DateTimeImmutable();\nprint 'today: ' . $today->format('l \\t\\h\\e jS \\o\\f F Y') . PHP_EOL;\n$firstOfMonth = $today->modify('first day of this month');\n$oneWeekLater = $firstOfMonth->modify('+1 week');\n\n$interval = DateInterval::createFromDateString(\"1 day\");\n❶ $period = new DatePeriod($firstOfMonth, $interval, $oneWeekLater);\n\nprint '--- first 7 days of current month ---'. PHP_EOL;\n❷ foreach ($period as $date) {\n    print $date->format('l \\t\\h\\e jS \\o\\f F Y') . PHP_EOL;\n}\n```", "```\ntoday: Friday the 22nd of November 1968\n--- first 7 days of current month ---\nFriday the 1st of November 1968\nSaturday the 2nd of November 1968\nSunday the 3rd of November 1968\nMonday the 4th of November 1968\nTuesday the 5th of November 1968\nWednesday the 6th of November 1968\nThursday the 7th of November 1968\n```", "```\n--snip--\n[Date]\n; Defines the default timezone used by the date functions\n; https://php.net/date.timezone\ndate.timezone = Europe/Dublin\n--snip--\n```", "```\n<?php\nfunction prettyPrintDatetime(string $name, DateTimeImmutable $date)\n{\n    print '---------' . $name . '---------' . PHP_EOL;\n    print $date->format(DATE_ATOM) . ' ' . $date->getTimezone()->getName(). PHP_EOL . PHP_EOL;\n}\n\n$iceCreamDay = '2009-08-02';\n$localDatetime = new DateTimeImmutable($iceCreamDay); ❶\n$utcDatetime = new DateTimeImmutable($iceCreamDay, new DateTimeZone('UTC')); ❷\n$londonDatetime = new DateTimeImmutable($iceCreamDay, new DateTimeZone('Europe/London'));\n$parisDatetime = new DateTimeImmutable($iceCreamDay, new DateTimeZone('Europe/Paris'));\n$hobartDatetime = new DateTimeImmutable($iceCreamDay, new DateTimeZone('Australia/Hobart'));\n$threeHoursAhead = new DateTimeImmutable('2000-01-01T10:00:00 + 03:00'); ❸\n\nprint 'local time zone = ' . date_default_timezone_get() . PHP_EOL; ❹\nprettyPrintDatetime('local', $localDatetime); ❺\nprettyPrintDatetime('UTC', $utcDatetime);\nprettyPrintDatetime('London', $londonDatetime);\nprettyPrintDatetime('Paris', $parisDatetime);\nprettyPrintDatetime('Hobart', $hobartDatetime);\nprettyPrintDatetime('+03', $threeHoursAhead);\n```", "```\n❶ local time zone = Europe/Dublin\n---------local---------\n2009-08-02T00:00:00 + 01:00 Europe/Dublin\n\n---------UTC---------\n2009-08-02T00:00:00 + 00:00 UTC\n\n---------London---------\n2009-08-02T00:00:00 + 01:00 Europe/London\n\n---------Paris---------\n2009-08-02T00:00:00 + 02:00 Europe/Paris\n\n---------Hobart---------\n2009-08-02T00:00:00 + 10:00 Australia/Hobart\n\n---------+03---------\n❷ 2000-01-01T10:00:00 + 03:00 +03:00\n```", "```\n<?php\nfunction prettyPrintDatetime(string $name, DateTimeImmutable $date)\n{\n print '---------' . $name . '---------' . PHP_EOL;\n  ❶ $isDaylightSaving = $date->format('I');\n    if ($isDaylightSaving) {\n        $dstString = ' (daylight saving time = TRUE)';\n    } else {\n        $dstString = ' (daylight saving time = FALSE)';\n    }\n print $date->format(DATE_ATOM) . ' ' . $date->getTimezone()->getName()\n        . $dstString. PHP_EOL . PHP_EOL;\n}\n\n$iceCreamDay = '2009-08-02';\n$localDatetime = new DateTimeImmutable($iceCreamDay);\n$utcDatetime = new DateTimeImmutable(\n $iceCreamDay, new DateTimeZone('UTC'));\n$londonDatetime = new DateTimeImmutable(\n $iceCreamDay, new DateTimeZone('Europe/London'));\n--snip--\n```", "```\nlocal time zone = Europe/Dublin\n---------local---------\n2009-08-02T00:00:00 + 01:00 Europe/Dublin (daylight saving time = FALSE)\n\n---------UTC---------\n2009-08-02T00:00:00 + 00:00 UTC (daylight saving time = FALSE)\n\n---------London---------\n2009-08-02T00:00:00 + 01:00 Europe/London (daylight saving time = TRUE)\n\n---------Paris---------\n2009-08-02T00:00:00 + 02:00 Europe/Paris (daylight saving time = TRUE)\n\n---------Hobart---------\n2009-08-02T00:00:00 + 10:00 Australia/Hobart (daylight saving time = FALSE)\n\n---------+03---------\n2000-01-01T10:00:00 + 03:00 +03:00 (daylight saving time = FALSE)\n```", "```\n<?php\nfunction print_timestamp(string $dateString): void\n{\n    $date = new DateTimeImmutable($dateString);\n    print $date->format('D, F j, Y  g.i:s');\n    print ' / timestamp = ' . $date->getTimestamp() . PHP_EOL;\n}\nprint_timestamp('1969-12-31T23:59:00');\nprint_timestamp('1970-01-01T00:00:00');\nprint_timestamp('1970-01-01T00:02:00');\nprint_timestamp('2009-08-02T00:00:00');\n```", "```\nWed, December 31, 1969  11.59:00 / timestamp = -60\nThu, January 1, 1970  12.00:00 / timestamp = 0\nThu, January 1, 1970  12.02:00 / timestamp = 120\nSun, August 2, 2009  12.00:00 / timestamp = 1249171200\n```", "```\n$datetime = (new DateTimeImmutable())->setTimeStamp($timestamp);\n```", "```\n// This will not work\n$datetime = new DateTimeImmutable()->setTimeStamp($timestamp);\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass Application\n{\n    public function run(): void\n    {\n        $action = filter_input(INPUT_GET, 'action');\n        switch ($action) {\n            case 'processForm': ❶\n $address = filter_input(INPUT_POST, 'address');\n                $date = filter_input(INPUT_POST, 'date');\n                if (empty($address) || empty($date)) {❷\n                    $this->homepage('you must enter a valid address and a date');\n                } else {\n                    $this->processForm($date, $address);\n                }\n                break;\n\n            default: ❸\n                $this->homepage();\n        }\n    }\n\n    private function homepage(string $errorMessage = ''): void ❹\n    {\n        require_once __DIR__ . '/../templates/homepage.php';\n    }\n\n    private function processForm(string $dateString, string $address): void\n    {\n        try {\n            $streetMapper = new StreetMap();\n            $latLongArray = $streetMapper->getOpenStreetMapData($address); ❺\n            $latitude = $latLongArray['latitude'];\n            $longitude = $latLongArray['longitude'];\n\n            $date = new \\DateTimeImmutable($dateString);\n            $sunData = new SunData($date, $latitude, $longitude); ❻\n            $sunrise = $sunData->getSunrise()->format('g:ia');\n            $sunset = $sunData->getSunset()->format('g:ia');\n            $hoursDaylight = $sunData->getHoursDaylight()->format(\"%h hours %i minutes\"); ❼\n\n            require_once __DIR__ . '/../templates/result.php'; ❽\n        }   catch (\\Exception) {❾\n            print 'sorry - an error occurred trying to retrieve data from Open Street Map';\n            print '<br>';\n            print '<a href=\"/\">home</a>';\n        }\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nuse GuzzleHttp\\Client;\n\nclass StreetMap\n{\n    private Client $client;\n\n    public function __construct()\n    {\n        $this->client = new Client([\n            'timeout' => 10.0,\n            'headers' => [\n                'User-Agent' => 'matt smith demo',\n              ❶ 'Accept'     => 'application/json',\n            ],\n 'verify' => true,\n        ]);\n    }\n\n    public function getOpenStreetMapData(\n        string $address = 'grafton street, dublin, ireland'\n    ): array\n    {\n        $url = $this->buildQueryString($address);\n      ❷ $response = $this->client->request('GET', $url);\n\n        if ($response->getStatusCode() == 200) {\n            $responseBody = $response->getBody();\n          ❸ $jsonData = json_decode($responseBody, true);\n            if (empty($jsonData)) {\n                throw new \\Exception('no JSON data received');\n            }\n        } else {\n          ❹ throw new \\Exception('Invalid status code');\n        }\n\n      ❺ return [\n            'latitude' => $jsonData[0]['lat'],\n            'longitude' => $jsonData[0]['lon'],\n        ];\n    }\n\n    private function buildQueryString(string $address): string\n    {\n      ❻ $query = http_build_query([\n            'format'         => 'jsonv2',\n            'q'              => $address,\n            'addressdetails' => 1,\n        ]);\n\n        $url = \"https://nominatim.openstreetmap.org/search?$query\";\n\n        return $url;\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass SunData\n{\n    private \\DateTimeImmutable $sunrise;\n    private \\DateTimeImmutable $sunset;\n    private \\DateInterval $hoursDaylight;\n\n    public function __construct(\\DateTimeImmutable $date, float $latitude, float $longitude)\n    {\n        $timestamp = $date->getTimestamp(); ❶\n        $data = date_sun_info($timestamp, $latitude, $longitude); ❷\n\n        $this->sunrise = $this->dateFromTimestamp($data['sunrise']);\n        $this->sunset = $this->dateFromTimestamp($data['sunset']);\n        $this->hoursDaylight = $this->sunset->diff($this->sunrise); ❸\n    }\n\n    private function dateFromTimestamp(int $timestamp): \\DateTimeImmutable\n    {\n        return (new \\DateTimeImmutable())->setTimeStamp($timestamp); ❹\n    }\n\n public function getSunrise(): \\DateTimeImmutable\n    {\n        return $this->sunrise;\n    }\n\n    public function getSunset(): \\DateTimeImmutable\n    {\n        return $this->sunset;\n    }\n\n    public function getHoursDaylight(): \\DateInterval\n    {\n        return $this->hoursDaylight;\n    }\n}\n```", "```\n<!doctype html>\n<html lang=\"en\">\n<head><title>Sun Data</title></head>\n<body>\n❶ <?php if (!empty($errorMessage)): ?>\n    <p style=\"background-color: pink; padding: 2rem\">\n        <?= $errorMessage ?>\n    </p>\n<?php endif; ?>\n\n<form action=\"/?action=processForm\" method=\"post\">\n    <p>\n        Address:\n        <input name=\"address\">\n    </p>\n    <p>\n      ❷ <input name=\"date\" type=\"date\">\n    </p>\n    <input type=\"submit\">\n</form>\n</body>\n</html>\n```", "```\n<!doctype html>\n<html lang=\"en\">\n<head><title>results</title></head>\n<body>\n<a href=\"/\">(back to home page)</a> ❶\n<hr>\n\n<h1>Latitude and Longitude</h1>\nDate = <?= $dateString ?><br>\nLatitude = <?= $latitude ?><br>\nLongitude = <?= $longitude ?><br>\n\n<a href=\"http://www.openstreetmap.org/?zoom=17&mlat=<?= $latitude ?>&mlon=<?= $longitude ?>\"> ❷\n    Open maps link to: <?= $address ?>\n</a>\n\n<hr>\nSunrise <img src=\"/images/sunrise.png\" width=\"50\" alt=\"Sunrise\">\n<?= $sunrise ?>\n<br>\nSunset <img src=\"/images/sunset.png\" width=\"50\" alt=\"Sunset\">\n<?= $sunset ?>\n<p>\n    so there will be <?= $hoursDaylight ?> of daylight\n</p>\n\n<footer> ❸\n    icon attribution:\n    <a href=\"https://www.flaticon.com/free-icon/sunrise_3920688\" title=\"sunrise icons\">\n        Sunrise</a>\n    <a href=\"https://www.flaticon.com/free-icon/sunset_3920799\" title=\"sunset icons\">\n        Sunset</a>\n    icons created by Mehwish - Flaticon\n</footer>\n</body>\n</html>\n```", "```\nCREATE TABLE IF NOT EXISTS appointment (\n    id integer PRIMARY KEY AUTO_INCREMENT,\n    title text,\n    startdatetime datetime(6)\n)\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass Appointment\n{\n    private int $id;\n    private string $title;\n    private \\DateTimeImmutable $startDateTime; ❶\n\n    public function getId(): int\n    {\n        return $this->id;\n    }\n\n    public function setId(int $id): void\n    {\n        $this->id = $id;\n    }\n\n    public function getTitle(): string\n    {\n        return $this->title;\n    }\n\n    public function setTitle(string $title): void\n    {\n        $this->title = $title;\n    }\n\n    public function getStartDateTime(): \\DateTimeImmutable\n    {\n        return $this->startDateTime;\n    }\n\n    public function setStartDateTime(\\DateTimeImmutable|string $startDateTime): void ❷\n    {\n        if (is_string($startDateTime)) {\n            $startDateTime = \\DateTimeImmutable::createFromFormat(\n                AppointmentRepository::MYSQL_DATE_FORMAT_STRING, $startDateTime);\n        }\n\n        $this->startDateTime = $startDateTime;\n    }\n}\n```", "```\n<?php\nnamespace Mattsmithdev;\n\nclass AppointmentRepository\n{\n    public const MYSQL_DATE_FORMAT_STRING = 'Y-m-d H:i:s.u'; ❶\n\n    public const MYSQL_DATABASE = 'date1';\n    public const MYSQL_HOST = 'localhost:3306';\n    public const MYSQL_USER = 'root';\n    public const MYSQL_PASS = 'passpass';\n\n    private ?\\PDO $connection = NULL;\n\n    public function __construct()\n    {\n        try {\n            $this->connection = new \\PDO('mysql:dbname='\n                . self::MYSQL_DATABASE . ';host='\n                . self::MYSQL_HOST , self::MYSQL_USER, self::MYSQL_PASS\n            ); ❷\n        } catch (\\Exception) {\n            print 'sorry - there was a problem connecting to database ' . self::MYSQL_DATABASE;\n        }\n    }\n\n    public function insert(Appointment $appointment): int\n    {\n        if (NULL == $this->connection) return -1;\n\n $title = $appointment->getTitle();\n        $startDateTime = $appointment->getStartDateTime();\n        $dateString = $startDateTime->format(self::MYSQL_DATE_FORMAT_STRING); ❸\n\n        // Prepare SQL\n        $sql = 'INSERT INTO appointment (title, startdatetime) VALUES (:title,\n                                                                       :startdatetime)';\n        $stmt = $this->connection->prepare($sql);\n\n        // Bind parameters to statement variables\n        $stmt->bindParam(':title', $title);\n        $stmt->bindParam(':startdatetime', $dateString);\n\n        // Execute statement\n        $success = $stmt->execute();\n\n        if ($success) {\n            return $this->connection->lastInsertId();\n        } else {\n            return -1;\n        }\n    }\n\n    public function findAll(): array\n    {\n        $sql = 'SELECT * FROM appointment';\n        $stmt = $this->connection->prepare($sql);\n        $stmt->execute();\n        $objects = $stmt->fetchAll(); ❹\n\n        $appointments = [];\n        foreach ($objects as $object) {\n            $appointment = new Appointment();\n            $appointment->setId($object['id']);\n            $appointment->setTitle($object['title']);\n            $appointment->setStartDateTime($object['startdatetime']);\n            $appointments[] = $appointment;\n        }\n\n        return $appointments;\n    }\n}\n```", "```\n<?php\nrequire_once __DIR__ . '/../vendor/autoload.php';\n\nuse Mattsmithdev\\Appointment;\nuse Mattsmithdev\\AppointmentRepository;\n\n$appointmentRepository = new AppointmentRepository();\n\n$appointment = new Appointment();\n$appointment->setTitle('get an ice cream sandwich');\n$appointment->setStartDateTime(new DateTimeImmutable('2009-08-02T11:00:00.5'));\n$appointmentRepository->insert($appointment);\n\n$appointment2 = new Appointment();\n$appointment2->setTitle('celebrate birthday');\n$appointment2->setStartDateTime(new DateTimeImmutable('2025-11-22T09:05:30.77'));\n$appointmentRepository->insert($appointment2);\n\n$appointments = $appointmentRepository->findAll();\nforeach ($appointments as $appointment) {\n    var_dump($appointment);\n}\n```", "```\nobject(Mattsmithdev\\Appointment)#9 (3) {\n  [\"id\":\"Mattsmithdev\\Appointment\":private]=>\n  int(1)\n  [\"title\":\"Mattsmithdev\\Appointment\":private]=>\n  string(25) \"get an ice cream sandwich\"\n  [\"startDateTime\":\"Mattsmithdev\\Appointment\":private]=>\n  object(DateTimeImmutable)#10 (3) {\n    [\"date\"]=>\n    string(26) \"2009-08-02 11:00:00.500000\"\n    [\"timezone_type\"]=>\n    int(3)\n    [\"timezone\"]=>\n    string(13) \"Europe/Dublin\"\n  }\n}\nobject(Mattsmithdev\\Appointment)#11 (3) {\n  [\"id\":\"Mattsmithdev\\Appointment\":private]=>\n  int(2)\n  [\"title\":\"Mattsmithdev\\Appointment\":private]=>\n  string(18) \"celebrate birthday\"\n  [\"startDateTime\":\"Mattsmithdev\\Appointment\":private]=>\n  object(DateTimeImmutable)#12 (3) {\n    [\"date\"]=>\n    string(26) \"2025-11-22 09:05:30.770000\"\n    [\"timezone_type\"]=>\n    int(3)\n    [\"timezone\"]=>\n    string(13) \"Europe/Dublin\"\n  }\n}\n```", "```\nCREATE TABLE IF NOT EXISTS consultation (\n    id integer PRIMARY KEY AUTO_INCREMENT,\n    patient text,\n    doctor text,\n    duration integer,\n    consultationdatetime datetime\n)\n```"]