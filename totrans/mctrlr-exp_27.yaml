- en: '**B  More Debugger Attacks**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**B.1 STM32 Clones**'
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The GD32F103 clone of the STM32F103 inherits its ancestor’s security model,
    in which RDP Level 1 allows for a JTAG connection but disconnects flash memory.
    Obermaier, Schink, and Moczek (2020) describes a clever exploit for this.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: The authors noticed that flash memory restrictions apply when the `C_DEBUGEN`
    bit of the `DHSR` register is set, which occurs when the CPU debug module is enabled
    to halt the CPU or access the processor’s registers. The restrictions do not apply
    when system components such as the peripherals are accessed through JTAG. The
    challenge is to trigger code execution without touching the CPU registers, only
    the peripherals.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'One of their exploits works like this: first a JTAG debugger takes control
    of the CPU to write shellcode into a region of SRAM that is not initialized by
    the firmware. The target is reset, which restores access to flash memory but disconnects
    the debugger. After reconnecting, JTAG is used to adjust the vector table offset
    register (VTOR) to point to shellcode in SRAM, carefully avoiding any operations
    that debug the CPU and enable restrictions. Because of the new VTOR value, the
    next interrupt that fires triggers a handler in the SRAM shellcode, that dumps
    all flash memory.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: The same paper describes using JTAG to debug other peripherals of GD32F103 and
    CKS32F103 chips while still carefully avoiding any debug operations against the
    CPU. In this case, the target is the DMA engine rather than the VTOR we saw in
    the last section.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: On the CKS32F103, the DMA engine is always allowed to read from flash memory,
    even after the CPU’s access has been revoked, so you can simply use DMA to copy
    from flash memory to SRAM in memory-to-memory mode. CPU debugging is used to halt
    the CPU, order the DMA engine to copy from flash to SRAM, and fetch the contents
    of SRAM.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: On the GD32F103, we can still use JTAG to read out the buffer but *cannot* halt
    the CPU with it, as that would enable flash memory restrictions for the DMA engine.
    Because the CPU must still be halted to prevent memory access conflicts, they
    use the VTOR trick from [Chapter B.1](app02.xhtml#app02_1) to relocate the interrupt
    vector table to `0xF0000000`, an illegal address that causes the CPU to crash
    on the next non-maskable interrupt (NMI). This halts the CPU but not the DMA engine,
    preventing bus conflicts from ruining the reliability of the rest of memory being
    transferred.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Another attack from the paper impacts the CKS32F103 and GD32VF103, the latter
    of which uses a RISC-V core instead of the ARM core of the original STM32 chips
    and their other clones. Instead of directing the DMA peripheral to copy memory
    over JTAG, this attack makes use of the fact that flash memory access is not disabled
    when the CPU executes code from certain regions of the chip.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: In the GD32VF103, firmware executed from flash memory or from SRAM can read
    flash memory, even when the chip is read-protected and the debugger cannot directly
    read flash memory. So to dump memory, you just write some shellcode into RAM,
    run it to perform a copy from flash memory, and then use your debugger to read
    the buffer out of RAM.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在GD32VF103中，从闪存或SRAM执行的固件可以读取闪存，即使芯片是只读保护的，调试器也不能直接读取闪存。因此，要转储内存，你只需将一些shellcode写入RAM，运行它来执行从闪存的复制操作，然后使用调试器读取RAM中的缓冲区。
- en: The CKS32F103 has a similar loophole, but only for code running from ROM, and
    not for code running from RAM. One method to exploit this would be to blindly
    search for an appropriate gadget in code memory, as we saw for the nRF51 in [Chapter
    9](ch09.xhtml#ch09). Obermaier takes a different approach, dumping the bootloader
    of an unlocked chip to find gadgets that exist at reliable addresses for all CKS32F103
    devices.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: CKS32F103也有类似的漏洞，但仅限于从ROM运行的代码，而不是从RAM运行的代码。利用这种漏洞的一种方法是盲目地在代码存储器中搜索合适的小工具，正如我们在[第9章](ch09.xhtml#ch09)中看到的nRF51一样。Obermaier采取了不同的方法，将解锁芯片的引导程序转储，以找到在所有CKS32F103设备中存在于可靠地址的小工具。
- en: '**B.2 GD32 GigaVulnerability**'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**B.2 GD32 Giga漏洞**'
- en: Kovrizhnykh (2023) presents three new vulnerabilities for GD32 microcontrollers
    by expanding the work of Obermaier, Schink, and Moczek (2020). These vulnerabilities
    impact different devices; see [Table B.1](app02.xhtml#chBtab1) to find the one
    that works for your chip of interest.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Kovrizhnykh（2023）通过扩展Obermaier、Schink和Moczek（2020）的研究，提出了三种新的GD32微控制器漏洞。这些漏洞影响不同的设备；请参见[表B.1](app02.xhtml#chBtab1)找到适用于你感兴趣的芯片的漏洞。
- en: In these chips, protection levels are roughly same as in a real STM32\. RDP
    Level 0 is unprotected, Level 1 allows debugging at the cost of disabling flash
    memory, and Level 2 ought to prohibit all debugging. The debugging protocol here
    is SWD, not JTAG.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些芯片中，保护级别大致与真正的STM32相同。RDP级别0为无保护，级别1允许调试，但会禁用闪存，级别2应该禁止所有调试。这里的调试协议是SWD，而不是JTAG。
- en: Each of these attacks depends upon an odd observation that SWD debugging is
    possible while the chip is held in reset. SRAM and flash memory always read as
    zero. Peripherals can be read, but only as their reset values. SWD buffers, such
    as the result of a read or the address that might soon be read, do not seem to
    be erased.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些攻击中的每一种都依赖于一个奇怪的观察，即在芯片处于复位状态时，SWD调试是可能的。SRAM和闪存始终读取为零。外设可以读取，但只能读取它们的复位值。SWD缓冲区，例如读取结果或即将被读取的地址，似乎不会被擦除。
- en: The first of these three vulnerabilities is that in some chips, such as the
    GD32L23x, GD32E23x, and GD32E50x, a read that is queued up during reset can be
    performed just as the chip exits reset. Kovrizhnykh found that he could leak words
    of SRAM this way.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这三种漏洞中的第一个是，在一些芯片中，如GD32L23x、GD32E23x和GD32E50x，在复位期间排队的读取可以在芯片退出复位时执行。Kovrizhnykh发现，他可以通过这种方式泄漏SRAM中的数据。
- en: While the !RST pin is low, he sends “`W AP4 0x20000008`” to prepare a read of
    SRAM. !RST is then raised, which takes the chip out of reset and begins to boot
    it. Just 1.45 µs later, he sends “`R APc`” to perform the read and drops the !RST
    pin low shortly after the read command is sent. In all, the chip is only out of
    reset for 55 µs. When the chip is back in reset, he sends “`RDBUFF`” and the chip
    happily provides `0x0800186c`, the value at the expected address.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当!RST引脚为低电平时，他发送“`W AP4 0x20000008`”来准备读取SRAM。然后，!RST引脚被拉高，芯片退出复位并开始启动。仅仅1.45微秒后，他发送“`R
    APc`”来执行读取，并在读取命令发送后不久将!RST引脚拉低。总的来说，芯片仅在复位外停留了55微秒。当芯片重新进入复位状态时，他发送“`RDBUFF`”，然后芯片愉快地提供了`0x0800186c`，这是预期地址的值。
- en: '![Image](../images/f0284-01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0284-01.jpg)'
- en: 'Figure B.1: GD32F130, Lower Die'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图B.1：GD32F130，底层芯片
- en: '![Image](../images/f0285-01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0285-01.jpg)'
- en: 'Table B.1: GigaVulnerability Success Table'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 表B.1：Giga漏洞成功表
- en: The mechanism here is a race condition. If the chip were given time to fully
    boot, the debugging restrictions would come online and the read would be denied.
    This technique does not allow flash memory to be extracted, presumably because
    flash takes longer than SRAM to become available after a reset.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的机制是竞态条件。如果给芯片足够的时间完全启动，调试限制会生效，读取操作将被拒绝。这种技术无法提取闪存，可能是因为闪存比SRAM在复位后可用的时间要长。
- en: The second vulnerability relies on disconnecting the debugger altogether, as
    the readout protection is triggered when the debug domain is enabled with `CDBGPWRUPREQ`.
    It is exploited by loading a dumper application into SRAM and starting the application,
    then clearing the debug domain bit with `chip.dap dpreg 0x4` `0x0` in OpenOCD.
    Memory happily falls out the UART, and not just SRAM but also flash memory can
    be directly extracted this way.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Most of the tested devices are vulnerable to this attack, but the GD32F3x0 is
    a stubborn exception, vulnerable to neither the first nor the second methods.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: A third variant involves a race condition in the power-on reset sequence of
    the F-series chips in this family. SWD will not work after the !RST pin goes high,
    but you can use it by powering down the chip, pulling !RST to ground, and then
    powering the chip up. Power analysis showed Kovrizhnykh that the race window is
    much wider on this series, 1600 µs instead of the 20 µs window of the E and L
    series.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: There are two more complications to this third variant. SRAM has faded out from
    the loss of power, so we cannot expose its contents in the way that the first
    variant allows. Another complication is that while SWD is allowed, debugging the
    CPU is not, so any reading of the flash memory will have to be performed by the
    peripherals. Forbidden from using the CPU, Kovrizhnykh instead configured the
    DMA peripheral to dump all flash memory directly to the UART.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '**B.3 Xilinx Bitstream Decryption Oracle**'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The 7-Series FPGAs from Xilinx internally store the bitstream in SRAM during
    operation, requiring them to load the configuration from either an external memory
    chip or a microcontroller. To provide for protection of these bitstreams without
    the cost of adding a nonvolatile memory, Xilinx allows the bitstream to be encrypted
    with AES-256 in CBC-mode, using a key that has been burned into the limited eFuse
    memory of the FPGA.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Reading out the bitstream by JTAG is disabled by the encryption feature, but
    Ender, Moradi, and Paar (2020) describes an exploit that leaks 32 bits of the
    cleartext bitstream at a time. They noticed that the `WBSTAR` register is loaded
    with a *decrypted* word of the bitstream just before an HMAC error. They can then
    reset the FPGA and read out the contents of this register, as it is not cleared
    by the reset.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: This attack is slow but effective, decrypting the bitstream of a Kintex-7 XC7K160T
    in three hours and 42 minutes. The Virtex 6 family is also vulnerable to this
    attack, with the limitation that two bits of each 32-bit word are corrupted and
    lost during the reset.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '**B.4 CC2510, CC1110**'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The CC2510 and CC1110 from Texas Instruments were some of the first chips to
    combine nonvolatile memory, a radio transceiver, and a microcontroller into a
    single package. This generation uses an 8051 as the MCU.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Devreker (2023) describes a voltage glitching attack for dumping firmware from
    these chips, inspired by their use in an eInk price tag with an as-yet-unknown
    radio protocol. Devreker began by implementing the debugging interface with a
    Raspberry Pi Pico, then added glitching support to it through an IRLML6246 MOSFET
    on the DCOUPL pin, a more or less direct tap of the internal 1.8V line intended
    for attaching a decoupling capacitor. His code is freely available.^([1](footnotes.xhtml#app2fn1))
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Devreker（2023）描述了一种电压故障攻击，用于从这些芯片中提取固件，灵感来自它们在电子墨水价格标签中的应用，且该标签使用的是尚未公开的无线协议。Devreker首先通过Raspberry
    Pi Pico实现了调试接口，然后通过在DCOUPL引脚上加装IRLML6246 MOSFET为其添加了故障支持，这一引脚直接连接到用于连接去耦电容器的内部1.8V线路。他的代码是开放的。[^[1](footnotes.xhtml#app2fn1)]
- en: He notes a number of handy tricks in his article. Over-clocking the Pi Pico
    to 250MHz from the default 125MHz doubles the glitching precision. This chip has
    multiple cores, and running the glitch on a separate core from the USB stack keeps
    USB interrupts from influencing timing. Increasing the drive strength of the glitching
    pin gives it a faster slew rate than the default, so that the glitch has sharper
    edges. Powering the CC2510 directly from GPIO pins of the Pi Pico makes it easy
    to power cycle the target after a failure. These little tricks might not all be
    strictly necessary, but they add some portability to his paper and make for good
    reading even if you’re working against a very different target.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 他在文章中提到了一些有用的小技巧。将Pi Pico的时钟频率从默认的125MHz超频到250MHz，可以提高故障的精度。该芯片有多个核心，将故障操作分配到与USB栈不同的核心上，可以避免USB中断影响计时。增加故障引脚的驱动强度可以提高其跃升速率，使故障信号的边缘更加锐利。通过Pi
    Pico的GPIO引脚直接为CC2510供电，可以在故障发生后轻松重启目标设备。这些小技巧虽然可能并非严格必要，但它们为他的论文增加了可移植性，即使在处理非常不同的目标时也能提供很好的参考。
- en: '![Image](../images/f0288-01.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0288-01.jpg)'
- en: 'Figure B.2: Texas Instruments CC2510'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图B.2：德州仪器 CC2510
- en: As for the glitch itself, attacking the state machine of a debugging protocol
    can be quite different from attacking the software parser of a bootloader. The
    lock status of the chip is checked whenever the debugger orders the chip to execute
    an instruction. This can be bypassed with a glitch just after the `DEBUG_INSTR`
    debugging command, but it takes a minimum of two instructions to first `MOV` a
    16-bit address into `DPTR` and then `MOVX` the byte at `@DPTR` into the accumulator.
    Both glitches must be successful to read one byte.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 至于故障本身，攻击调试协议的状态机与攻击引导加载程序的软件解析器可能是完全不同的。每当调试器命令芯片执行指令时，都会检查芯片的锁定状态。通过在`DEBUG_INSTR`调试命令之后制造一个故障可以绕过这个检查，但最少需要两条指令，首先将16位地址`MOV`到`DPTR`寄存器，然后通过`MOVX`将`@DPTR`处的字节读取到累加器中。为了读取一个字节，两个故障都必须成功。
- en: With this requirement for a double glitch, Devreker’s exploit is quite slow.
    He reports a success rate of roughly 5% on each glitch, for a combined success
    rate of 0.25% on the double glitch. This gets him a single byte every twenty seconds,
    or the full 32kB firmware image in four days.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由于需要进行双重故障，Devreker的漏洞利用速度相当慢。他报告了每次故障大约5%的成功率，因此双重故障的综合成功率为0.25%。这意味着每二十秒他能获得一个字节，或者在四天内获得完整的32kB固件镜像。
