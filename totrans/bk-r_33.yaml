- en: '**B**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**WORKING WITH RSTUDIO**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Although the base R application and GUI are all you need to unleash the full
    suite of available functionality, the bare-bones appearance of the console and
    code editor can be off-putting to some, especially beginners. One of the best
    integrated development environments (IDEs) designed specifically to enhance day-to-day
    use of the R language is RStudio.
  prefs: []
  type: TYPE_NORMAL
- en: Like R, the desktop version of RStudio ([RStudio Team, 2015](ref.xhtml#ref56))
    is free and can be used on Windows, OS X, and Linux systems. Before installing
    RStudio, you must first have R installed, as described in [Appendix A](app01.xhtml#app01)
    (OS X users will also want XQuartz; see [Section A.1](app01.xhtml#app01lev1sec96)).
    Then, you can download RStudio from the official website at *[https://www.rstudio.com/products/rstudio/download/](https://www.rstudio.com/products/rstudio/download/)*.
  prefs: []
  type: TYPE_NORMAL
- en: The RStudio website also hosts a variety of useful support articles and links,
    as well as instructions for various special enhancements, some of which are noted
    in [Section B.2](app02.xhtml#app02lev1sec102). If you need help with RStudio,
    see *[https://support.rstudio.com/hc/en-us/](https://support.rstudio.com/hc/en-us/)*.
    In particular, you should take time to click the Documentation link; you can also
    view this through RStudio by selecting Help → RStudio Docs.
  prefs: []
  type: TYPE_NORMAL
- en: In this appendix, you’ll get an overview of RStudio and its most commonly used
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: '**B.1 Basic Layout and Usage**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The RStudio IDE is split into four panes, and you can customize the content
    and layout to suit your preferences. [Figure B-1](app02.xhtml#appBfig1) shows
    my setup. In it, I’m playing with the `ggvis` code from [Section 24.4](ch24.xhtml#ch24lev1sec85).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fb-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure B-1: RStudio in action. The four panes can be arranged and suppressed
    as you like; here, you can see the code editor (top left), the console (bottom
    left), the help pages (top right), and the graphics viewer (bottom right). The
    panes on the right also have additional tabs to choose from.*'
  prefs: []
  type: TYPE_NORMAL
- en: You write R code in the built-in editor and execute it in the console; the shortcut
    “send code to console” keystrokes are CTRL-ENTER or CTRL-R in Windows and ![image](../images/common-02.jpg)-RETURN
    on a Mac. The textual output appears in the console as usual.
  prefs: []
  type: TYPE_NORMAL
- en: '***B.1.1 Editor Features and Appearance Options***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One of the most useful features of RStudio editor is the color-themed code highlighting
    and bracket matching. This makes for an easier coding experience than in the base
    R editor, particularly when writing long chunks of code. There are also autocomplete
    options that pop up as you’re typing in either the editor or the console. You
    can see an example of this in [Figure B-2](app02.xhtml#appBfig2).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fb-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure B-2: RStudio’s autocomplete feature includes hints about each option.*'
  prefs: []
  type: TYPE_NORMAL
- en: These features and more can be enabled, disabled, and customized using the RStudio
    options (select **Tools** → **Global Options...** on both Windows and OS X; for
    OS X, you can also select **RStudio** → **Preferences...**); you can see the Code
    and Appearance options in [Figure B-3](app02.xhtml#appBfig3).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fb-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure B-3: The options panes for code editing (left) and appearance (right)*'
  prefs: []
  type: TYPE_NORMAL
- en: '***B.1.2 Customizing Panes***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Next you’ll probably want to sort out the arrangement and content of the four
    RStudio panes. Two panes will always be the editor and the console, but you can
    set up a number of additional tabs to be displayed on the two utility panes. These
    include a file browser that you can use to search for and open R scripts on your
    local machine, plot and document viewers, standard R function help files, and
    a package installer.
  prefs: []
  type: TYPE_NORMAL
- en: You can configure your utility panes with the drop-down menus and checkboxes
    in the Pane Layout section of the RStudio options. [Figure B-4](app02.xhtml#appBfig4)
    shows my current settings; one change I’ve made from the default arrangement is
    to make the help files appear in the topmost utility pane, with the graphical
    displays on the bottom, since I often want to refer to function documentation
    while experimenting with my plots.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fb-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure B-4: Pane layout and arrangement options*'
  prefs: []
  type: TYPE_NORMAL
- en: '**B.2 Auxiliary Tools**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: RStudio gives you access to a number of handy tools to use in conjunction with
    R, which I’ll briefly highlight here. For more information on a particular feature,
    check the supporting documentation at *[https://support.rstudio.com/hc/en-us/](https://support.rstudio.com/hc/en-us/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '***B.2.1 Projects***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: RStudio *projects* assist with development and file management when you’re working
    on more complicated endeavors. In these situations, you’re typically working with
    multiple script files, you might want to save separate R workspaces, or you might
    have certain R `options` set to specific or non-default values. RStudio facilitates
    this process so you don’t have to set it up manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top right of the RStudio window, you’ll see a Project: (None) button.
    Click it and you’ll see a short menu, as shown in [Figure B-5](app02.xhtml#appBfig5);
    set up a basic project folder by clicking **New Project** and selecting the **New
    Directory** → **Empty Project** items.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Essentially, creating a new project does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: • Sets the working directory as the project folder
  prefs: []
  type: TYPE_NORMAL
- en: • Saves, by default, the R workspace, history, and all *.R* source files in
    said folder
  prefs: []
  type: TYPE_NORMAL
- en: • Creates a *.Rproj* file, which can be used to open a saved project at a later
    date, and stores RStudio options set specifically for that project
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fb-05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure B-5: RStudio project menus; setting up a basic project directory*'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you’re working on a specific project, its name will appear in place of
    (None) on the Project: (None) button.'
  prefs: []
  type: TYPE_NORMAL
- en: '***B.2.2 Package Installer and Updater***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: RStudio provides a package installer to manage the downloads and installations
    of contributed packages. You’ll find the package manager in the Packages tab on
    your chosen utility pane. It lists only those packages that you currently have
    installed, along with their version numbers, and you can use the checkboxes next
    to each package name to load it (instead of using `library` at the R console prompt).
  prefs: []
  type: TYPE_NORMAL
- en: Mine appears in [Figure B-6](app02.xhtml#appBfig6). I’ve just selected the box
    for the `car` package, which automatically executes the relevant call to `library`
    in the console.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fb-06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure B-6: The RStudio package installer, showing* `car` *being loaded by
    clicking its checkbox*'
  prefs: []
  type: TYPE_NORMAL
- en: The figure also shows the Install and Update buttons for packages. To install
    a package, click the **Install** button and enter the package you want in the
    field. RStudio will give you options as you type, as shown for the `ks` package
    on the left of [Figure B-7](app02.xhtml#appBfig7). Ensure “Install dependencies”
    is checked in order to automatically install any additionally required packages.
  prefs: []
  type: TYPE_NORMAL
- en: To update packages, click the **Update** button to bring up the dialog box on
    the right of [Figure B-7](app02.xhtml#appBfig7); here you can choose to update
    either individual packages or all of them by clicking the **Select All** button.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fb-07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure B-7: Package installation and update features in RStudio*'
  prefs: []
  type: TYPE_NORMAL
- en: Naturally, you can still use the `install.packages`, `update.packages`, and
    `library` commands directly from the console prompt within RStudio if you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: '***B.2.3 Support for Debugging***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Another nice feature of RStudio is its built-in tools for code debugging. Debugging
    strategies usually involve being able to “pause” your code at a specific point
    to inspect your objects and function values in a given “live” state. Specific
    techniques are best left to more advanced texts such as *The Art of Debugging*
    ([Matloff and Salzman, 2008](ref.xhtml#ref45)) and *The Art of R Programming*
    ([Matloff, 2011](ref.xhtml#ref44)); see also [Chapter 9](ch09.xhtml#ch09) of *Advanced
    R* ([Wickham, 2015*a*](ref.xhtml#ref73)). But I mention it here since the tools
    available in RStudio provide more convenient, higher-level support for debugging
    than do base R commands alone.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’re at the stage where you’re starting to write programs comprised of
    multiple interlinked R functions, you might like to learn more. With respect to
    R and RStudio in particular, there’s a good introductory article by Jonathan McPherson
    on the support website at *[https://support.rstudio.com/hc/en-us/articles/205612627-Debugging-with-RStudio/](https://support.rstudio.com/hc/en-us/articles/205612627-Debugging-with-RStudio/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '***B.2.4 Markup, Document, and Graphics Tools***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When writing up reports on a project or tutorials for particular analyses, researchers
    often use a *markup* language. One of the best-known markup languages, particularly
    in the sciences, is LAT[E]X; it facilitates a unified approach to typesetting,
    formatting, and layout of technical documents.
  prefs: []
  type: TYPE_NORMAL
- en: There are specialized packages that incorporate R code into the compilation
    of these documents. These are in turn incorporated into RStudio, allowing you
    to create dynamic documents that make use of R code and graphics without switching
    between different applications.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll need a T[E]X installation on your computer to use these tools, which
    you can find at *[https://www.latex-project.org/](https://www.latex-project.org/)*.
    In this section, I’ll briefly discuss the most widely used enhancements.
  prefs: []
  type: TYPE_NORMAL
- en: '**Sweave**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Sweave ([Leisch, 2002](ref.xhtml#ref39)) was arguably the first markup language
    to become popular with R; its functionality is included with any standard R installation.
    Sweave follows typical LAT[E]X markup rules; in your document, you declare special
    fields called *chunks*, in which you write R code and instruct any corresponding
    output to be displayed; the output can include both console text and graphics.
    When you compile the Sweave file (which has a *.Rnw* extension), the R code fields
    are sent to R for live evaluation, with the results appearing in the specified
    places of the finished product. To start a new document, choose **File** → **New
    File** → **R Sweave**, as shown in [Figure B-8](app02.xhtml#appBfig8). For some
    examples and resources, visit the Sweave home page at *[https://www.statistik.lmu.de/~leisch/Sweave/](https://www.statistik.lmu.de/~leisch/Sweave/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fb-08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure B-8: Starting a new Sweave document in RStudio. The editor is used
    for markup and live code fields, and you use the Compile PDF button to render
    the result.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**knitr**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: knitr ([Xie, 2015](ref.xhtml#ref78)) is an R package designed as an extension
    to Sweave, with some additional features that make document creation easier and
    more flexible. You can select knitr as the document “weaver” in the Sweave tab
    of the RStudio options, found by selecting **Tools** → **Global Options...** (see
    [Figure B-9](app02.xhtml#appBfig9)). To learn more about Sweave and knitr with
    respect to RStudio, consult Josh Paulson’s article at *[https://support.rstudio.com/hc/en-us/articles/200552056-Using-Sweave-and-knitr/](https://support.rstudio.com/hc/en-us/articles/200552056-Using-Sweave-and-knitr/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fb-09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure B-9: Choosing knitr as the weaver of your markup document in the Sweave
    tab of the RStudio options*'
  prefs: []
  type: TYPE_NORMAL
- en: '**R Markdown**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: R Markdown ([Allaire et al., 2015](ref.xhtml#ref02)) is another dynamic document
    creation tool, downloadable from CRAN as the `rmarkdown` package. Like both Sweave
    and knitr, its goal is to produce polished documents that can include R code and
    output automatically. Unlike Sweave and knitr, however, one of the objectives
    of R Markdown is to minimize the need to learn complicated markup languages like
    LAT[E]X, and as a result, its syntax is considerably simpler. Working from a *.Rmd*
    source file, you can create a variety of output document types, such as PDF, HTML,
    and Word.
  prefs: []
  type: TYPE_NORMAL
- en: To start a new R Markdown document, click the **R Markdown...** menu item under
    **File** → **New File**, as shown on the left of [Figure B-8](app02.xhtml#appBfig8);
    this opens the New R Markdown dialog shown at the top of [Figure B-10](app02.xhtml#appBfig10).
    Here, you can choose the appropriate document type for your project, and then
    you’re provided with a basic template in the RStudio editor; one such template
    is shown on the bottom of [Figure B-10](app02.xhtml#appBfig10). The template even
    points you toward the R Markdown home page at *[http://rmarkdown.rstudio.com/](http://rmarkdown.rstudio.com/)*,
    which you should certainly investigate if you’re interested in learning more.
    Garrett Grolemund also provides a useful collection of links for using R Markdown
    at *[https://support.rstudio.com/hc/en-us/articles/205368677-R-Markdown-Dynamic-Documents-for-R/](https://support.rstudio.com/hc/en-us/articles/205368677-R-Markdown-Dynamic-Documents-for-R/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/fb-10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure B-10: Starting a new R Markdown file in RStudio. Templates relevant
    to your chosen output file type are automatically provided.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Shiny**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Shiny is a framework for creating interactive web applications developed by
    the RStudio team. If you’re interested in sharing your data, statistical models
    and analyses, and graphics, you can craft a Shiny app. The R package `shiny` ([Chang
    et al., 2015](ref.xhtml#ref10)) provides the required functionality. Shiny apps
    require you to have an R session running behind the scenes, which is what drives
    the plots as the user interacts with the application in a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: Like other tools associated with RStudio, Shiny is a high-level framework intended
    to be friendly for both users and developers. Its emphasis is on creating interactive
    visuals not unlike the graphics you produced using `ggvis` in [Section 24.4](ch24.xhtml#ch24lev1sec85),
    which you can then deploy online for anyone to use.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the Shiny website at *[http://shiny.rstudio.com/](http://shiny.rstudio.com/)*.
    The development team has put a tremendous amount of work into creating comprehensive
    tutorials, as well as a host of examples. Once you’re comfortable with the app,
    you can even use Shiny to create interactive documents via R Markdown—notice the
    Shiny document option in the top image of [Figure B-10](app02.xhtml#appBfig10).
  prefs: []
  type: TYPE_NORMAL
