["```\n{ dump  txm chr jmp,main }\n```", "```\n{ main\n    set,8\n    tmx \n    set,9       mul,x=mx    jmp,dump\n    set,-3      add,x=mx    jmp,dump set,7       add,x=mx    jmp,dump\n    set,0       add,x=mx    jmp,dump\n    set,3       add,x=mx    jmp,dump\n    set,-35     add,x=mx    jmp,dump\n    set,-12     add,x=mx    jmp,dump\n    set,55      add,x=mx    jmp,dump\n    set,-8      add,x=mx    jmp,dump\n    set,3       add,x=mx    jmp,dump\n    set,-6      add,x=mx    jmp,dump\n    set,-8      add,x=mx    jmp,dump\n    set,-35     add,x=mx    jmp,dump\n    set,10\n    chr \n    hlt \n}\n\n{ dump  txm chr jmp,main }\n```", "```\n72, 69, 76, 76, 79, 44, 32, 87, 79, 82, 76, 68, 33\n```", "```\n(0,72) (1,69) (2,76) (3,76) (4,79) (5,44) (6,32)\n(7,87) (8,79) (9,82) (10,76) (11,68) (12,33)\n```", "```\nX**12, P = -4.6431994663395692e-05\nX**11, P = 3.2633752799095354e-03\nX**10, P = -1.0079445322316360e-01\nX** 9, P = 1.7997278464174311e+00\nX** 8, P = -2.0561041293073888e+01\nX** 7, P = 1.5712412821126304e+02\nX** 6, P = -8.1556740929381863e+02\nX** 5, P = 2.8598281210109303e+03\nX** 4, P = -6.5979225156803523e+03\nX** 3, P = 9.4649124982355879e+03\nX** 2, P = -7.5173478664143449e+03\nX** 1, P = 2.4648319340174303e+03\nX** 0, P = 7.2000000563347072e+01\n```", "```\nfrom math import floor\n\ndef f(x):\n    return -4.6431994663395692e-05*x**12 +  \\\n            3.2633752799095354e-03*x**11 +  \\ -1.0079445322316360e-01*x**10 +  \\\n            1.7997278464174311e+00*x**9  +  \\\n           -2.0561041293073888e+01*x**8  +  \\\n            1.5712412821126304e+02*x**7  +  \\\n           -8.1556740929381863e+02*x**6  +  \\\n            2.8598281210109303e+03*x**5  +  \\\n           -6.5979225156803523e+03*x**4  +  \\\n            9.4649124982355879e+03*x**3  +  \\\n           -7.5173478664143449e+03*x**2  +  \\\n            2.4648319340174303e+03*x**1  +  \\\n            7.2000000563347072e+01*x**0 \n\nfor x in range(13):\n    y = f(x)\n    d = int(floor(y+0.5))\n    print(\"%s\" % chr(d), end=\"\")\nprint()\n```", "```\n{ main\n ➊ set,0       \" M = 0\n    tmx         \" X = M\n ➋ jmp,calc    \" Y = f(X)\n    jmp,dump    \" dump Y as character\n ➌ inc         \" M = M + 1\n ➍ cmp,13      \" M == 13?\n    tst,e,2     \" yes, done\n    gto,-6      \" no, loop\n    set,10      \" done\n    chr\n    hlt }\n\n{ dump tym chr jmp,main }\n```", "```\n{ calc\n    \" Y = P0*X**12\n ➊ set,12\n    tmz\n    pow,z=xz\n    set,-4.6431994663395692e-05\n    mul,y=mz\n\n    \" Y += P1*X**11\n ➋ set,11\n    tmz\n    pow,z=xz\n    set,3.2633752799095354e-03\n    mul,m=mz\n    add,y=my\n--snip-- \" Y = floor(Y+0.5)\n ➌ set,0.5\n    add,m=my\n    flr\n    tmy\n    jmp,main\n}\n```", "```\n{ main\n ➊ set,78      \" number to generate\n    dec         \" dec twice, just printing the first two\n    dec\n    tmz         \" Z is the counter\n    set,1       \" print '1' and '1'\n    tmx         \" X holds the i-2 value\n    prt\n    jmp,nl\n    tmy         \" Y holds the i-1 value\n    prt \n    jmp,nl\n ➋ add,m=xy    \" find i-th value\n    swp,xy      \" X <-- Y, new i-2 value\n    tmy         \" Y <-- M, new i-1 value\n    prt         \" print ith value\n    jmp,nl\n    tzm         \" decrement Z\n    dec\n    tst,z,3     \" if zero, done\n    tmz         \" Z <-- M\n    gto,-9      \" loop\n    hlt         \" quit\n}\n\n{ nl  set,10 chr jpr,main }\n```", "```\n> python3 filska.py fib.filska -t\n```", "```\nCP:MAIN,PC:000,X:0.000000,Y:0.000000,Z:0.000000,M:0.000000,\n   Z:0,E:0,L:0,G:0,  SET,78\n<enter> or 'q' to quit:\n```", "```\nCP:MAIN,PC:001,X:0.000000,Y:0.000000,Z:0.000000,M:78.000000,\n   Z:0,E:0,L:0,G:0,     DEC\n<enter> or 'q' to quit:\n```", "```\nCP:NL,PC:000,X:1.000000,Y:0.000000,Z:76.000000,M:0.000000,\n   Z:0,E:0,L:0,G:0,  SET,10\n<enter> or 'q' to quit:\n```", "```\nCP:MAIN,PC:008,X:1.000000,Y:0.000000,Z:76.000000,M:1.000000,\n   Z:0,E:0,L:0,G:0,     TMY\n<enter> or 'q' to quit:\n```", "```\nCP:MAIN,PC:011,X:1.000000,Y:1.000000,Z:76.000000,M:1.000000,\n   Z:0,E:0,L:0,G:0, ADD,M=XY\n<enter> or 'q' to quit: \nCP:MAIN,PC:012,X:1.000000,Y:1.000000,Z:76.000000,M:2.000000,\n   Z:0,E:0,L:0,G:0,  SWP,XY\n<enter> or 'q' to quit:\n```", "```\n{ main\n    set,8675309     \" the seed\n    tmx \n    set,48271\n    mul,x=mx\n    set,2147483647  \" 2^31 - 1 \n    mod,x=xm\n    jmp,make_float\n    gto,-5\n}\n\n{ make_float\n    set,2147483647\n    div,m=xm\n    prt \n    set,10\n    chr \n    jmp,main\n}\n```", "```\n> python3 filska.py random.filska >numbers.txt\n```", "```\nimport numpy as np\nd = np.loadtxt(\"numbers.txt\")\nb = []\nfor i in range(len(d)):\n    b.append(int(np.floor(256*d[i])))\nopen(\"random.dat\",\"wb\").write(bytearray(b))\n```", "```\n> ent random.dat\n```", "```\nEntropy = 7.999803 bits per byte.\n\nOptimum compression would reduce the size\nof this 1044919 byte file by 0 percent.\n\nChi square distribution for 1044919 samples is 285.53, and randomly\nwould exceed this value 9.16 percent of the times.\n\nArithmetic mean value of data bytes is 127.5722 (127.5 = random).\nMonte Carlo value for Pi is 3.138619490 (error 0.09 percent).\nSerial correlation coefficient is -0.001688 (totally uncorrelated = 0.0).\n```", "```\nx,y = 1,0\nrepeat for N points:\n    r = RND\n    if (r < 0.333333):\n        x = 0.5*(x + 0) = 0.5*x\n        y = 0.5*(y + 0) = 0.5*y\n    elif (r < 0.666666):\n        x = 0.5*(x + 0.5) = 0.5*x + 0.25\n        y = 0.5*(y + 1) = 0.5*y + 0.5\n    else:\n        x = 0.5*(x + 1) = 0.5*x + 0.5\n        y = 0.5*(y + 0) = 0.5*y\n    print x,y\n```", "```\n{ main\n    set,1       \" start at 1,0 \n    tmx \n    set,0\n    tmy \n    set,60000   \" number of points to output\n    dec \n    tmz \n    jmp,loop\n}\n```", "```\n{ print\n    txm\n    prt\n    set,32\n    chr chr\n    tym prt\n    set,10\n    chr\n    jmp,loop\n}\n```", "```\n{ loop\n ➊ set,2\n    div,x=xm\n    div,y=ym\n ➋ rnd\n    cmp,0.333333\n ➌ tst,l,10\n    cmp,0.666666\n ➍ tst,l,4\n\n ➎ set,0.5\n    add,x=xm\n    gto,5\n\n ➏ set,0.25\n    add,x=xm\n    set,0.5\n    add,y=ym\n\n ➐ jmp,print\n\n ➑ tzm\n    dec\n    tst,z,3\n    tmz\n    jpr,loop\n    hlt\n}\n```", "```\n> python3 filska.py sierpinski.filska >points.txt\n```", "```\n>>> import numpy as np\n>>> import matplotlib.pylab as plt\n>>> d = np.loadtxt(\"points.txt\")\n>>> plt.plot(d[:,0],d[:,1], linestyle='none', marker=',')\n>>> plt.show()\n```", "```\nA? 1\nB? 2\nC? 4\n\nComplex roots: -1+1.732050808i\n               -1-1.732050808i\n-------------------------------\nA? 1\nB? 4\nC? 2\n\n1st root: -0.5857864376\n2nd root: -3.414213562\n-------------------------------\nA? -4\nB? 12\nC? -9\n\nOne root: 1.5\n```", "```\n{ main\n    \"  Get a, b, and c\n ➊ jmp,getA\n    jmp,getB\n    jmp,getC\n\n    \"  Calculate D\n ➋ jmp,getA        \" X=a \n    set,4           \" M=4 \n    mul,m=mx        \" M = M*X  (4a)\n    jmp,getC        \" X=c \n    mul,m=mx        \" M = M*X  (4ac)\n    neg             \" M = -M   (-4ac)\n    tmz             \" Z = M    (-4ac)\n    jmp,getB        \" X=b \n    txm             \" M=b \n    mul,m=mx        \" M = M*X  (b*b)\n    add,m=mz        \" M = M+Z  (b*b - 4ac)\n    tmy             \" Y = D    (disc)\n    jmp,getA        \" X = a \n    txm             \" M = X \n    tmz             \" Z = M    (a) \n    jmp,getB        \" X = b    (b) \n    tym             \" M = Y    (disc)\n ➌ cmp,0           \" compare(M,0)\n    tst,g,3         \" D > 0  --> positive\n    tst,e,3         \" D == 0 --> equal\n    tst,l,3         \" D < 0  --> negative\n    jmp,positive\n    jmp,equal\n    jmp,negative\n}\n```", "```\nclass Store:\n    def __init__(self, v):\n        self.v = v\n    def Get(self):\n        return self.v\n```", "```\n{ getA\n    set,65 chr\n    set,63 chr\n    set,32 chr\n    ipt\n    jmp,main\n    tmx\n    jmp,main\n    gto,-2\n}\n```", "```\n    jmp,getA        \" X=a \n    set,4           \" M=4 \n    mul,m=mx        \" M = M*X  (4a)\n    jmp,getC        \" X=c \n    mul,m=mx        \" M = M*X  (4ac)\n    neg             \" M = -M   (-4ac)\n    tmz             \" Z = M    (-4ac)\n```", "```\n    jmp,getB        \" X=b \n    txm             \" M=b \n    mul,m=mx        \" M = M*X  (b*b)\n    add,m=mz        \" M = M+Z  (b*b - 4ac)\n    tmy             \" Y = D    (disc)\n```", "```\n    jmp,getA        \" X = a \n    txm             \" M = X \n    tmz             \" Z = M    (a) \n    jmp,getB        \" X = b    (b) \n    tym             \" M = Y    (disc)\n```", "```\n{ positive\n ➊ set,2           \" M = 2\n    mul,m=mz        \" M = 2a\n    div,m=xm        \" M = b/(2a)\n    neg             \" M = -b/(2a)\n    jmp,rest        \" X = sqr(Y)/(2a)\n    jmp,?double\n    add,y=mx        \" Y = M + X    (-b/(2a)+sqr(D)/(2a))\n    jmp,?double\n    sub,y=mx        \" Y = M - X    (-b/(2a)-sqrt(D)/(2a))\n    jmp,?double\n}\n\n{ rest\n    set,2\n    mul,x=mz\n    tym\n    sqr\n    div,x=mx\n    jmp,positive\n}\n```", "```\n0\n0.5\n1\n1.1\n2\n2.4\n3\n3.6\n-999999\n```", "```\n> python3 filska.py linfit.filska <linfit_dataset.txt\nA=10.46698813\nB=2.272733952\n```", "```\nclass Adder:\n    def __init__(self):\n        self.s = 0\n    def Add(self, v):\n        self.s += v\n    def Get(self):\n        return self.s\n```", "```\n{ sumxy\n ➊ set,0       \" first call: zero sum \n    jmp,main    \" and back to main\n ➋ swp,mz      \" look at Z stashing M\n    tst,n,8     \" return value in Y\n ➌ swp,mz      \" restore total\n    mul,z=xy    \" Z <-- X*Y \n    add,z=mz    \" Z <-- M + X*Y \n    set,0       \" M <-- 0\n    swp,mz      \" M <--> Z, restore Z and M\n    jmp,main    \" return to main\n    gto,-8      \" test again\n ➍ swp,mz      \" Z=1, return M in Y\n    tmy         \" and put it in Y\n    jmp,main    \" and back to main\n    gto,-2      \" put sum in Y and return to main\n}\n```", "```\n{ main\n ➊ jmp,sum\n    jmp,sumx\n    jmp,sumy\n    jmp,sumxy\n    jmp,sumx2\n\n    set,0           \" Z=0, accumulate mode\n    tmz             \"\n    ipt             \" read X\n    cmp,-999999     \" data done?\n    tst,e,10        \" yes, calculate\n    tmx             \" no, move to X register\n    ipt             \" read Y\n    tmy             \" move to Y register\n\n ➋ jmp,sum         \" accumulate the x,y data\n    jmp,sumx\n    jmp,sumy\n    jmp,sumxy\n    jmp,sumx2\n\n    gto,-11         \" continue the loop\n```", "```\n    set,1           \" Z = 1, return sums in Y mode\n    tmz\n    jmp,sumx2       \" Y = sumx2\n    tym             \" M = sumx2\n    jmp,sumy        \" Y = sumy\n    mul,z=my        \" Z = sumx2*sumy\n    jmp,sumx        \" Y = sumx\n    tym             \" M = sumx\n    jmp,sumxy       \" Y = sumxy\n    mul,m=my        \" M = sumx*sumxy\n    sub,z=zm        \" Z = sumx2*sumy - sumx*sumxy\n    jmp,numA        \" store in numA\n```"]