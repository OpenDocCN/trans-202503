["```\n❶ PS> **$sd = New-NtSecurityDescriptor -EffectiveToken -Type Mutant**\nPS> **Format-NtSecurityDescriptor $sd -Summary**\n<Owner> : GRAPHITE\\user\n<Group> : GRAPHITE\\None\n<DACL>\nGRAPHITE\\user: (Allowed)(None)(Full Access)\nNT AUTHORITY\\SYSTEM: (Allowed)(None)(Full Access)\nNT AUTHORITY\\LogonSessionId_0_795805: (Allowed)(None)(ModifyState|...)\n\n❷ PS> **Get-NtGrantedAccess $sd -AsString**\nFull Access\n\n❸ PS> **Get-NtGrantedAccess $sd -Access ModifyState -AsString**\nModifyState\n\n❹ PS> **Clear-NtSecurityDescriptorDacl $sd**\nPS> **Format-NtSecurityDescriptor $sd -Summary**\n<Owner> : GRAPHITE\\user\n<Group> : GRAPHITE\\None\n<DACL> - <EMPTY>\n\nPS> **Get-NtGrantedAccess $sd -AsString**\n❺ ReadControl|WriteDac \n```", "```\nPS> **Import-Module .\\chapter7_access_check_impl.psm1** \n```", "```\nfunction Get-PSGrantedAccess {\n    param(\n        $Token = (Get-NtToken -Effective -Pseudo),\n        $SecurityDescriptor,\n        $GenericMapping,\n        $DesiredAccess\n    )\n\n  ❶ $context = @{\n        Token = $Token\n        SecurityDescriptor = $SecurityDescriptor\n        GenericMapping = $GenericMapping\n        RemainingAccess = Get-NtAccessMask $DesiredAccess\n        Privileges = @()\n    }\n\n    ## Test-MandatoryAccess defined below.\n  ❷ if (!(Test-MandatoryAccess $context)) {\n        return Get-AccessResult STATUS_ACCESS_DENIED\n    }\n\n    ## Get-TokenAccess defined below.\n    Resolve-TokenAccess $context\n  ❸ if (Test-NtAccessMask $context.RemainingAccess -Empty) {\n       ❹ return Get-AccessResult STATUS_SUCCESS $context.Privileges\n$DesiredAccess\n    }\n\n  ❺ if (Test-NtAccessMask $context.RemainingAccess AccessSystemSecurity) {\n        return Get-AccessResult STATUS_PRIVILEGE_NOT_HELD\n    }\n\n    Get-DiscretionaryAccess $context\n  ❻ if (Test-NtAccessMask $context.RemainingAccess -Empty) {\n        return Get-AccessResult STATUS_SUCCESS $context.Privileges\n$DesiredAccess\n    }\n\n  ❼ return Get-AccessResult STATUS_ACCESS_DENIED\n} \n```", "```\nfunction Get-AccessResult {\n    param(\n        $Status,\n        $Privileges = @(),\n        $GrantedAccess = 0\n    )\n\n    $props = @{\n        Status = Get-NtStatus -Name $Status -PassStatus\n        GrantedAccess = $GrantedAccess\n        Privileges = $Privileges\n    }\n    return [PSCustomObject]$props\n} \n```", "```\nfunction Test-MandatoryAccess {\n    param($Context)\n\n    ## Test-ProcessTrustLevel is defined below.\n    if (!(Test-ProcessTrustLevel $Context)) {\n        return $false\n    }\n\n    ## Test-AccessFilter is defined below.\n    if (!(Test-AccessFilter $Context)) {\n        return $false\n    }\n\n    ## Test-MandatoryIntegrityLevel is defined below.\n    if (!(Test-MandatoryIntegrityLevel $Context)) {\n        return $false\n    }\n\n    return $true\n} \n```", "```\nfunction Test-ProcessTrustLevel {\n    param($Context)\n\n  ❶ $trust_level = Get-NtTokenSid $Token -TrustLevel\n    if ($null -eq $trust_level) {\n        $trust_level = Get-NtSid -TrustType None -TrustLevel None\n    }\n\n  ❷ $access = Get-NtAccessMask 0xFFFFFFFF\n    $sacl = Get-NtSecurityDescriptorSacl $Context.SecurityDescriptor\n    foreach($ace in $sacl) {\n      ❸ if (!$ace.IsProcessTrustLabelAce -or $ace.IsInheritOnly) {\n            continue\n        }\n\n      ❹ if (!(Compare-NtSid $trust_level $ace.Sid -Dominates)) {\n            $access = Get-NtAccessMask $ace\n        }\n        break\n    }\n\n    $access = Grant-NtAccessMask $access AccessSystemSecurity\n  ❺ return Test-NtAccessMask $access $Context.RemainingAccess -All\n} \n```", "```\nPS> **function New-BaseSD {**\n    **$owner = Get-NtSid -KnownSid LocalSystem**\n    **$sd = New-NtSecurityDescriptor -Owner $owner -Group $owner -Type Mutant**\n    **Add-NtSecurityDescriptorAce $sd -KnownSid Anonymous -Access GenericAll**\n    **$sid = Get-NtSid**\n    **Add-NtSecurityDescriptorAce $sd -Sid $sid -Access GenericAll**\n    **Set-NtSecurityDescriptorIntegrityLevel $sd Untrusted**\n    **Edit-NtSecurityDescriptor $sd -MapGeneric**\n    **return $sd**\n**}** \n```", "```\n❶ PS> **$sd = New-BaseSD**\nPS> **$trust_sid = Get-NtSid -TrustType ProtectedLight -TrustLevel Windows**\nPS> **Add-NtSecurityDescriptorAce $sd -Type ProcessTrustLabel** \n**-Access ModifyState -Sid $trust_sid**\nPS> **Get-NtGrantedAccess $sd -AsString**\n❷ ModifyState\n\n❸ PS> **$token = Get-NtToken -Anonymous**\nPS> **$anon_trust_sid = Get-NtTokenSid -Token $token -TrustLevel**\nPS> **Compare-NtSid $anon_trust_sid $trust_sid -Dominates**\n❹ True\n**PS> Get-NtGrantedAccess $sd -Token $token -AsString**\n❺ Full Access \n```", "```\nfunction Test-AccessFilter {\n    param($Context)\n\n    $access = Get-NtAccessMask 0xFFFFFFFF\n    $sacl = Get-NtSecurityDescriptorSacl $Context.SecurityDescriptor\n    foreach($ace in $sacl) {\n        if (!$ace.IsAccessFilterAce -or $ace.IsInheritOnly) {\n            continue\n        }\n      ❶ if (!(Test-NtAceCondition $ace -Token $token)) {\n          ❷ $access = $access -band $ace.Mask\n        }\n    }\n\n    $access = Grant-NtAccessMask $access AccessSystemSecurity\n  ❸ return Test-NtAccessMask $access $Context.RemainingAccess -All\n} \n```", "```\nPS> **$sd = New-BaseSD**\n❶ PS> **Add-NtSecurityDescriptorAce $sd -Type AccessFilter -KnownSid World**\n**-Access ModifyState -Condition \"Exists TSA://ProcUnique\" -MapGeneric**\nPS> **Format-NtSecurityDescriptor $sd -Summary -SecurityInformation AccessFilter**\n<Access Filters>\nEveryone: (AccessFilter)(None)(ModifyState)(Exists TSA://ProcUnique)\n\n❷ PS> **Show-NtTokenEffective -SecurityAttributes**\nSECURITY ATTRIBUTES\n-------------------\nName             Flags                  ValueType Values\n----             -----                  --------- ------\nTSA://ProcUnique NonInheritable, Unique UInt64    {187, 365588953}\n\nPS> **Get-NtGrantedAccess $sd -AsString**\n❸ Full Access\n\nPS> **Use-NtObject($token = Get-NtToken -Anonymous) {**\n    **Get-NtGrantedAccess $sd -Token $token -AsString**\n**}**\n❹ ModifyState \n```", "```\nfunction Test-MandatoryIntegrityLevel {\n    param($Context)\n\n    $token = $Context.Token\n    $sd = $Context.SecurityDescriptor\n    $mapping = $Context.GenericMapping\n\n  ❶ $policy = Get-NtTokenMandatoryPolicy -Token $token\n    if (($policy -band \"NoWriteUp\") -eq 0) {\n        return $true\n    }\n\n    if ($sd.HasMandatoryLabelAce) {\n        $ace = $sd.GetMandatoryLabel()\n        $sd_il_sid = $ace.Sid\n      ❷ $access = Get-NtAccessMask $ace.Mask -GenericMapping $mapping\n    } else {\n      ❸ $sd_il_sid = Get-NtSid -IntegrityLevel Medium\n        $access = Get-NtAccessMask -MandatoryLabelPolicy NoWriteUp\n-GenericMapping $GenericMapping\n    }\n\n  ❹ if (Test-NtTokenPrivilege -Token $token SeRelabelPrivilege) {\n        $access = Grant-NtAccessMask $access WriteOwner\n    }\n\n  ❺ $il_sid = Get-NtTokenSid -Token $token -Integrity\n    if (Compare-NtSid $il_sid $sd_il_sid -Dominates) {\n        return $true\n    }\n\n    return Test-NtAccessMask $access $Context.RemainingAccess -All\n} \n```", "```\nPS> **$sd = New-BaseSD**\nPS> **Format-NtSecurityDescriptor $sd -SecurityInformation Label -Summary**\n<Mandatory Label>\n❶ Mandatory Label\\Untrusted Mandatory Level: (MandatoryLabel)(None)(NoWriteUp)\n\nPS> **Use-NtObject($token = Get-NtToken -Anonymous) {**\n    **Format-NtToken $token -Integrity**\n    **Get-NtGrantedAccess $sd -Token $token -AsString**\n**}**\nINTEGRITY LEVEL\n---------------\n❷ Untrusted\nFull Access\n\n❸ PS> **Remove-NtSecurityDescriptorIntegrityLevel $sd**\nPS> **Use-NtObject($token = Get-NtToken -Anonymous) {**\n    **Get-NtGrantedAccess $sd -Token $token -AsString**\n**}**\n❹ ModifyState|ReadControl|Synchronize \n```", "```\nFunction Result-TokenAccess {\n    param($Context)\n\n    Resolve-TokenPrivilegeAccess $Context\n    if (Test-NtAccessMask $Context.RemainingAccess -Empty) {\n        return\n    }\n    return Resolve-TokenOwnerAccess $Context\n} \n```", "```\nfunction Resolve-TokenPrivilegeAccess {\n    param($Context)\n\n    $token = $Context.Token\n    $access = $Context.RemainingAccess\n\n  ❶ if ((Test-NtAccessMask $access AccessSystemSecurity) -and\n        (Test-NtTokenPrivilege -Token $token SeSecurityPrivilege)) {\n        $access = Revoke-NtAccessMask $access AccessSystemSecurity\n        $Context.Privileges += \"SeSecurityPrivilege\"\n    }\n\n  ❷ if ((Test-NtAccessMask $access WriteOwner) -and\n        (Test-NtTokenPrivilege -Token $token SeTakeOwnershipPrivilege)) {\n        $access = Revoke-NtAccessMask $access WriteOwner\n        $Context.Privileges += \"SeTakeOwnershipPrivilege\"\n    }\n\n  ❸ if ((Test-NtAccessMask $access WriteOwner) -and\n        (Test-NtTokenPrivilege -Token $token SeRelabelPrivilege)) {\n        $access = Revoke-NtAccessMask $access WriteOwner\n        $Context.Privileges += \"SeRelabelPrivilege\"\n    }\n\n  ❹ $Context.RemainingAccess = $access\n} \n```", "```\nPS> **$owner = Get-NtSid -KnownSid Null**\n❶ PS> **$sd = New-NtSecurityDescriptor -Type Mutant -Owner $owner**\n**-Group $owner -EmptyDacl**\n❷ PS> **Enable-NtTokenPrivilege SeTakeOwnershipPrivilege**\n❸ PS> **Get-NtGrantedAccess $sd -Access WriteOwner -PassResult**\nStatus               Granted Access Privileges\n------               -------------- ----------\n❹ STATUS_SUCCESS       WriteOwner     SeTakeOwnershipPrivilege\n\n❺ PS> **Disable-NtTokenPrivilege SeTakeOwnershipPrivilege**\nPS> **Get-NtGrantedAccess $sd -Access WriteOwner -PassResult**\nStatus               Granted Access Privileges\n------               -------------- ----------\n❻ STATUS_ACCESS_DENIED None           NONE \n```", "```\nfunction Resolve-TokenOwnerAccess {\n    param($Context)\n\n    $token = $Context.Token\n    $sd = $Context.SecurityDescriptor\n    $sd_owner = Get-NtSecurityDescriptorOwner $sd\n  ❶ if (!(Test-NtTokenGroup -Token $token -Sid $sd_owner.Sid)) {\n        return\n    }\n\n  ❷ $sids = Select-NtSecurityDescriptorAce $sd\n-KnownSid OwnerRights -First -AclType Dacl\n    if ($sids.Count -gt 0) {\n        return\n    }\n\n    $access = $Context.RemainingAccess\n  ❸ $Context.RemainingAccess = Revoke-NtAccessMask $access ReadControl,\nWriteDac\n} \n```", "```\n❶ PS> **$owner = Get-NtSid -KnownSid World**\nPS> **$sd = New-NtSecurityDescriptor -Owner $owner -Group $owner**\n**-Type Mutant -EmptyDacl**\nPS> **Get-NtGrantedAccess $sd**\n❷ ReadControl, WriteDac\n\n❸ PS> **Add-NtSecurityDescriptorAce $sd -KnownSid OwnerRights -Access ModifyState**\nPS> **Get-NtGrantedAccess $sd**\n❹ ModifyState \n```", "```\nfunction Get-DiscretionaryAccess {\n    param($Context)\n\n    $token = $Context.Token\n    $sd = $Context.SecurityDescriptor\n    $access = $Context.RemainingAccess\n    $resource_attrs = $null\n    if ($sd.ResourceAttributes.Count -gt 0) {\n        $resource_attrs = $sd.ResourceAttributes.ResourceAttribute\n    }\n\n  ❶ if (!(Test-NtSecurityDescriptor $sd -DaclPresent)\n-or (Test-NtSecurityDescriptor $sd -DaclNull)) {\n        $Context.RemainingAccess = Get-NtAccessMask 0\n        return\n    }\n\n    $owner = Get-NtSecurityDescriptorOwner $sd\n    $dacl = Get-NtSecurityDescriptorDacl $sd\n  ❷ foreach($ace in $dacl) {\n      ❸ if ($ace.IsInheritOnly) {\n            continue\n        }\n      ❹ $sid = Get-AceSid $ace -Owner $owner\n        $continue_check = $true\n        switch($ace.Type) {\n            \"Allowed\" {\n              ❺ if (Test-NtTokenGroup -Token $token $sid) {\n                    $access = Revoke-NtAccessMask $access $ace.Mask\n                }\n            }\n            \"Denied\" {\n              ❻ if (Test-NtTokenGroup -Token $token $sid -DenyOnly) {\n                    if (Test-NtAccessMask $access $ace.Mask) {\n                        $continue_check = $false\n                    }\n                }\n            }\n            \"AllowedCompound\" {\n                $server_sid = Get-AceSid $ace -Owner $owner\n              ❼ if ((Test-NtTokenGroup -Token $token $sid)\n-and (Test-NtTokenGroup -Sid $server_sid)) {\n                    $access = Revoke-NtAccessMask $access $ace.Mask\n                }\n            }\n            \"AllowedCallback\" {\n              ❽ if ((Test-NtTokenGroup -Token $token $sid)\n-and (Test-NtAceCondition $ace -Token $token\n-ResourceAttributes $resource_attrs)) {\n                    $access = Revoke-NtAccessMask $access $ace.Mask\n                }\n            }\n        }\n\n      ❾ if (!$continue_check -or (Test-NtAccessMask $access -Empty)) {\n            break\n        }\n    }\n\n  ❿ $Context.RemainingAccess = $access\n} \n```", "```\nfunction Get-AceSid {\n    param(\n        $Ace,\n        $Owner\n    )\n\n    $sid = $Ace.Sid\n    if (Compare-NtSid $sid -KnownSid OwnerRights) {\n        $sid = $Owner.Sid\n    }\n\n    return $sid\n} \n```", "```\n❶ if (!(Test-NtTokenGroup -Token $token -Sid $sd_owner.Sid)) {\n    return\n}\n\nif ($token.Restricted -and\n❷ !(Test-NtTokenGroup -Token $token -Sid $sd_owner.Sid -Restricted)) {\n    return\n} \n```", "```\n\"Allowed\" {\n    if (Test-NtTokenGroup -Token $token $sid -Restricted:$Restricted) {\n        $access = Revoke-NtAccessMask $access $ace.Mask\n    }\n} \n```", "```\n❶ $RemainingAccess = $Context.RemainingAccess\nGet-DiscretionaryAccess $Context\n❷ $success = Test-NtAccessMask $Context.RemainingAccess -Empty\n\n❸ if ($success -and $Token.Restricted) {\n  ❹ if (!$Token.WriteRestricted -or\n(Test-NtAccessMask $RemainingAccess -WriteRestricted $GenericMapping)) {\n        $Context.RemainingAccess = $RemainingAccess\n      ❺ Get-DiscretionaryAccess $Context -Restricted\n        $success = Test-NtAccessMask $Context.RemainingAccess -Empty\n    }\n}\n\n❻ if ($success) {\n    return Get-AccessResult STATUS_SUCCESS $Context.Privileges $DesiredAccess\n}\nreturn Get-AccessResult STATUS_ACCESS_DENIED \n```", "```\n## Add to start of Get-DiscretionaryAccess.\n$ac_access = $context.DesiredAccess\nif (!$token.AppContainer) {\n    $ac_access = Get-NtAccessMask 0\n}\n\n## Replace the Allowed case in the ACE switch statement.\n\"Allowed\" {\n    if (Test-NtTokenGroup -Token $token $sid -Restricted:$Restricted) {\n      ❶ $access = Revoke-NtAccessMask $access $ace.Mask\n    } else {\n      ❷ if ($Restricted) {\n            break\n        }\n\n      ❸ if (Test-NtTokenGroup -Token $token $sid -Capability) {\n          ❹ $ac_access = Revoke-NtAccessMask $ac_access $ace.Mask\n        }\n    }\n}\n\n## Add at end of ACE loop.\n❺ $effective_access = $access -bor $ac_access \n```", "```\n❶ PS> **$sd = New-NtSecurityDescriptor -Owner \"BA\" -Group \"BA\" -Type Mutant**\nPS> **Add-NtSecurityDescriptorAce $sd -KnownSid World -Access GenericAll**\nPS> **Add-NtSecurityDescriptorAce $sd -KnownSid AllApplicationPackages**\n**-Access GenericAll**\nPS> **Edit-NtSecurityDescriptor $sd -MapGeneric**\n❷ PS> **Set-NtSecurityDescriptorIntegrityLevel $sd Medium**\n\nPS> **Use-NtObject($token = Get-NtToken -Duplicate -IntegrityLevel Low) {**\n    **Get-NtGrantedAccess $sd -Token $token -AsString**\n**}**\n❸ ModifyState|ReadControl|Synchronize\n\nPS> **$sid = Get-NtSid -PackageName \"mandatory_access_lowbox_check\"**\nPS> **Use-NtObject($token = Get-NtToken -LowBox -PackageSid $sid) {**\n    **Get-NtGrantedAccess $sd -Token $token -AsString**\n**}**\n❹ Full Access \n```", "```\nPS> **$sid = Get-NtSid -PackageName 'package_sid_low_il_test'**\n❶ PS> **$token = Get-NtToken -LowBox -PackageSid $sid**\n❷ PS> **$sd = New-NtSecurityDescriptor -Token $token -Type Mutant**\nPS> **Format-NtSecurityDescriptor $sd -Summary -SecurityInformation Dacl, Label**\n<DACL>\n❸ GRAPHITE\\user: (Allowed)(None)(Full Access)\nNT AUTHORITY\\SYSTEM: (Allowed)(None)(Full Access)\nNT AUTHORITY\\LogonSessionId_0_109260: (Allowed)(None)(ModifyState|...)\n❹ package_sid_low_il_test: (Allowed)(None)(Full Access)\n<Mandatory Label>\n❺ Mandatory Label\\Low Mandatory Level: (MandatoryLabel)(None)(NoWriteUp)\n\nPS> **Get-NtGrantedAccess $sd -Token $token -AsString**\n❻ Full Access\n\nPS> **$token.Close()**\nPS> **$low_token = Get-NtToken -Duplicate -IntegrityLevel Low**\nPS> **Get-NtGrantedAccess $sd -Token $low_token -AsString**\n❼ None \n```", "```\nfunction Get-AceSid {\n    Param (\n        $Ace,\n        $Owner,\n        $Principal\n    )\n\n    $sid = $Ace.Sid\n    if (Compare-NtSid $sid -KnownSid OwnerRights) {\n        $sid = $Owner\n    }\n    if ((Compare-NtSid $sid -KnownSid Self) -and ($null -NE $Principal)) {\n        $sid = $Principal\n    }\n    return $sid\n} \n```", "```\nPS> **$owner = Get-NtSid -KnownSid LocalSystem**\n❶ PS> **$sd = New-NtSecurityDescriptor -Owner $owner -Group $owner -Type Mutant**\nPS> **Add-NtSecurityDescriptorAce $sd -KnownSid Self -Access GenericAll** \n**-MapGeneric**\n❷ PS> **Get-NtGrantedAccess $sd -AsString**\nNone\n\nPS> **$principal = Get-NtSid**\n❸ PS> **Get-NtGrantedAccess $sd -Principal $principal -AsString**\nFull Access \n```", "```\n\"AllowedObject\" {\n  ❶ if (!(Test-NtTokenGroup -Token $token $sid)) {\n        break\n    }\n\n  ❷ if ($null -eq $Context.ObjectTypes -or $null -eq $ace.ObjectType) {\n        break\n    }\n\n  ❸ $object_type = Select-ObjectTypeTree $Context.ObjectTypes\n    if ($null -eq $object_type) {\n       break\n    }\n\n  ❹ Revoke-ObjectTypeTreeAccess $object_type $ace.Mask\n    $access = Revoke-NtAccessMask $access $ace.Mask\n} \n```", "```\n\"DeniedObject\" {\n  ❶ if (!(Test-NtTokenGroup -Token $token $sid -DenyOnly)) {\n        break\n    }\n\n  ❷ if ($null -ne $Context.ObjectTypes) {\n        if ($null -eq $ace.ObjectType) {\n            break;\n        }\n\n        $object_type = Select-ObjectTypeTree $Context.ObjectTypes\n$ace.ObjectType\n        if ($null -eq $object_type) {\n            break\n        }\n\n      ❸ if (Test-NtAccessMask $object_type.RemainingAccess $ace.Mask) {\n            $continue_check = $false\n            break\n        }\n    }\n  ❹ if (Test-NtAccessMask $access $ace.Mask) {\n        $continue_check = $false\n    }\n} \n```", "```\n❶ PS> **$tree = New-ObjectTypeTree (New-Guid) -Name \"Object\"** \nPS> **$set_1 = Add-ObjectTypeTree $tree (New-Guid) -Name \"Property Set 1\"** \n**-PassThru**\nPS> **$set_2 = Add-ObjectTypeTree $tree (New-Guid) -Name \"Property Set 2\"** \n**-PassThru**\nPS> **Add-ObjectTypeTree $set_1 (New-Guid) -Name \"Property X\"**\nPS> **Add-ObjectTypeTree $set_1 (New-Guid) -Name \"Property Y\"**\nPS> **$prop_z = New-Guid**\nPS> **Add-ObjectTypeTree $set_2 $prop_z -Name \"Property Z\"**\n\nPS> **$owner = Get-NtSid -KnownSid LocalSystem**\nPS> **$sd = New-NtSecurityDescriptor -Owner $owner -Group $owner -Type Mutant**\n❷PS> **Add-NtSecurityDescriptorAce $sd -KnownSid World -Access WriteOwner**\n**-MapGeneric -Type DeniedObject -ObjectType $prop_z**\nPS> **Add-NtSecurityDescriptorAce $sd -KnownSid World**\n**-Access ReadControl, WriteOwner -MapGeneric**\nPS> **Edit-NtSecurityDescriptor $sd -CanonicalizeDacl**\n❸PS> **Get-NtGrantedAccess $sd -PassResult -ObjectType $tree**\n**-Access ReadControl, WriteOwner | Format-Table Status, SpecificGrantedAccess,** \n**Name**\n              Status   SpecificGrantedAccess    Name\n              ------   ---------------------    ----\n❹STATUS_ACCESS_DENIED                    None    Object\n\n❺ PS> **Get-NtGrantedAccess $sd -PassResult -ResultList -ObjectType $tree**\n**-Access ReadControl, WriteOwner | Format-Table Status, SpecificGrantedAccess,** \n**Name**\n            ❻ Status   SpecificGrantedAccess    Name\n              ------   ---------------------    ----\nSTATUS_ACCESS_DENIED                ReadControl Object\n      STATUS_SUCCESS   ReadControl, WriteOwner  Property Set 1\n      STATUS_SUCCESS   ReadControl, WriteOwner  Property X\n      STATUS_SUCCESS   ReadControl, WriteOwner  Property Y\nSTATUS_ACCESS_DENIED               ReadControl  Property Set 2\nSTATUS_ACCESS_DENIED               ReadControl  Property Z \n```", "```\nPS> **Get-CentralAccessPolicy**\nName               CapId                            Description\n----               -----                            -----------\nSecure Room Policy S-1-17-3260955821-1180564752-... Only for Secure Computers\nMain Policy        S-1-17-76010919-1187351633-...\n\nPS> **$rules = Get-CentralAccessPolicy | Select-Object -ExpandProperty Rules**\nPS> **$rules | Format-Table**\nName        Description AppliesTo\n----        ----------- ---------\nSecure Rule Secure!     @RESOURCE.EnableSecure == 1\nMain Rule   NotSecure!\n\nPS> **$sd = $rules[0].SecurityDescriptor**\nPS> **Format-NtSecurityDescriptor $sd -Type File -SecurityInformation Dacl**\n<DACL> (Auto Inherit Requested)\n - Type    : AllowedCallback\n - Name    : Everyone\n - SID     : S-1-1-0\n - Mask    : 0x001F01FF\n - Access  : Full Access\n - Flags   : None\n- Condition: @USER.ad://ext/clearance == \"TS/ST3\" &&\n              @DEVICE.ad://ext/location = \"Secure\" \n```", "```\n❶ if (!$success) {\n    return Get-AccessResult STATUS_ACCESS_DENIED\n}\n\n❷ $capid = $SecurityDescriptor.ScopedPolicyId\nif ($null -eq $capid) {\n    return Get-AccessResult STATUS_SUCCESS $Context.Privileges $DesiredAccess\n}\n\n❸ $policy = Get-CentralAccessPolicy -CapId $capid.Sid\nif ($null -eq $policy){\n    return Get-AccessResult STATUS_SUCCESS $Context.Privileges $DesiredAccess\n}\n\n❹ $effective_access = $DesiredAccess\nforeach($rule in $policy.Rules) {\n    if ($rule.AppliesTo -ne \"\") {\n        $resource_attrs = $null\n        if ($sd.ResourceAttributes.Count -gt 0) {\n            $resource_attrs = $sd.ResourceAttributes.ResourceAttribute\n        }\n      ❺ if (!(Test-NtAceCondition -Token $Token -Condition $rule.AppliesTo\n-ResourceAttribute $resource_attrs)) {\n            continue\n        }\n    }\n    $new_sd = Copy-NtSecurityDescriptor $SecurityDescriptor\n  ❻ Set-NtSecurityDescriptorDacl $rule.Sd.Dacl\n\n    $Context.SecurityDescriptor = $new_sd\n    $Context.RemainingAccess = $DesiredAccess\n\n  ❼ Get-DiscretionaryAccess $Context\n  ❽ $effective_access = $effective_access -band (-bnot $Context.RemainingAccess)\n}\n\n❾ if (Test-NtAccessMask $effective_access -Empty) {\n    return Get-AccessResult STATUS_ACCESS_DENIED\n}\n❹ return Get-AccessResult STATUS_SUCCESS $Context.Privileges $effective_access \n```", "```\nPS> **$sd = New-NtSecurityDescriptor**\n❶ PS> **$attr = New-NtSecurityAttribute \"EnableSecure\" -LongValue 1**\n❷ PS> **Add-NtSecurityDescriptorAce $sd -Type ResourceAttribute -Sid \"WD\"**\n**-SecurityAttribute $attr -Flags ObjectInherit, ContainerInherit**\nPS> **$capid = \"S-1-17-3260955821-1180564752-1365479606-2616254494\"**\n❸ PS> **Add-NtSecurityDescriptorAce $sd -Type ScopedPolicyId -Sid $capid**\n**-Flags ObjectInherit, ContainerInherit**\nPS> **Format-NtSecurityDescriptor $sd -SecurityInformation Attribute, Scope**\nType: Generic\nControl: SaclPresent\n<Resource Attributes>\n - Type  : ResourceAttribute\n - Name  : Everyone\n - SID   : S-1-1-0\n - Mask  : 0x00000000\n - Access: Full Access\n - Flags : ObjectInherit, ContainerInherit\n - Attribute: \"EnableSecure\",TI,0x0,1\n\n<Scoped Policy ID>\n - Type  : ScopedPolicyId\n - Name  : S-1-17-3260955821-1180564752-1365479606-2616254494\n - SID   : S-1-17-3260955821-1180564752-1365479606-2616254494\n - Mask  : 0x00000000\n - Access: Full Access\n - Flags : ObjectInherit, ContainerInherit\n\n❹ PS> **Enable-NtTokenPrivilege  SeSecurityPrivilege**\n❺ PS> **Set-Win32SecurityDescriptor $sd MACHINE\\SOFTWARE\\PROTECTED**\n**-Type RegistryKey -SecurityInformation Scope, Attribute** \n```", "```\n❶ PS> **Import-Module \".\\chapter_7_access_check_impl.psm1\"**\n❷ PS> **$sd = New-NtSecurityDescriptor \"O:SYG:SYD:(A;;GR;;;WD)\"**\n**-Type File -MapGeneric**\nPS> **$type = Get-NtType File**\nPS> **$desired_access = Get-NtAccessMask -FileAccess GenericRead** \n**-MapGenericRights**\n❸ PS> **Get-PSGrantedAccess -SecurityDescriptor $sd**\n**-GenericMapping $type.GenericMapping -DesiredAccess $desired_access**\nStatus               Privileges                 GrantedAccess\n------               ----------                 -------------\nSTATUS_SUCCESS       {}                         1179785\n\n❹ PS> **$desired_access = Get-NtAccessMask -FileAccess WriteOwner**\nPS> **Get-PSGrantedAccess -SecurityDescriptor $sd**\n**-GenericMapping $type.GenericMapping -DesiredAccess $desired_access**\nStatus               Privileges                 GrantedAccess\n------               ----------                 -------------\n❺ STATUS_ACCESS_DENIED {}                         0\n\n❻ PS> **$token = Get-NtToken -Linked**\n❼ PS> **Enable-NtTokenPrivilege -Token $token SeTakeOwnershipPrivilege**\nPS> **Get-PSGrantedAccess -Token $token -SecurityDescriptor $sd**\n**-GenericMapping $type.GenericMapping -DesiredAccess $desired_access**\nStatus               Privileges                 GrantedAccess\n------               ----------                 -------------\n❽ STATUS_SUCCESS       {SeTakeOwnershipPrivilege} 524288 \n```", "```\nPS> **function Get-NameAndGrantedAccess {**\n **[CmdletBinding()]**\n **param(**\n **[parameter(Mandatory, ValueFromPipeline)]**\n **$Entry,**\n **[parameter(Mandatory)]**\n **$Root**\n **)**\n\n **PROCESS {**\n **$sd = Get-NtSecurityDescriptor -Path $Entry.Name -Root $Root**\n**-TypeName $Entry.NtTypeName -ErrorAction SilentlyContinue**\n **if ($null -ne $sd) {**\n❶ **$granted_access = Get-NtGrantedAccess -SecurityDescriptor $sd**\n **if (!(Test-NtAccessMask $granted_access -Empty)) {**\n **$props = @{**\n **Name = $Entry.Name;**\n **NtTypeName = $Entry.NtTypeName**\n **GrantedAccess = $granted_access**\n **}**\n\n **New-Object -TypeName PSObject -Prop $props**\n **}**\n **}**\n **}**\n**}**\n\nPS> **Use-NtObject($dir = Get-NtDirectory \\BaseNamedObjects) {**\n **Get-NtDirectoryEntry $dir | Get-NameAndGrantedAccess -Root $dir**\n**}**\nNameNtTypeName  GrantedAccess\n--------------  -------------\nSM0:8924:120:WilError_03_p0        Semaphore   QueryState, ModifyState, ...\nCLR_PerfMon_DoneEnumEvent          Event       QueryState, ModifyState, ...\nmsys-2.0S5-1888ae32e00d56aa        Directory   Query, Traverse, ...\nSyncRootManagerRegistryUpdateEvent Event       QueryState, ModifyState, ...\n`--snip--` \n```"]