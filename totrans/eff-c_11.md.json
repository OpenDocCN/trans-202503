["```\nstatic_assert(`integer-constant-expression`, `string-literal`);\n```", "```\nstatic_assert(`integer-constant-expression`);\n```", "```\nstruct packed {\n  int i;\n  char *p;\n};\n\nstatic_assert(\n  sizeof(struct packed) == sizeof(int) + sizeof(char *),\n  \"struct packed must not have any padding\"\n);\n```", "```\n#include <stdio.h>\n#include <limits.h>\n\nvoid clear_stdin() {\n  int c;\n\n  do {\n    c = getchar();\n    static_assert(\n      sizeof(unsigned char) < sizeof(int),\n      \"FIO34-C violation\"\n    );\n  } while (c != EOF);\n}\n```", "```\nstatic const char prefix[] = \"Error No: \";\nconstexpr int size = 14;\nchar str[size];\n\n// ensure that str has sufficient space to store at\n// least one additional character for an error code\nstatic_assert(\n  sizeof(str) > sizeof(prefix),\n  \"str must be larger than prefix\"\n);\nstrcpy(str, prefix);\n```", "```\n#define assert(scalar-expression) /* implementation-defined */\n```", "```\nvoid *dup_string(size_t size, char *str) {\n  assert(size <= LIMIT);\n  assert(str != nullptr);\n  // `--snip--`\n}\n```", "```\nAssertion failed: size <= LIMIT, function dup_string, file foo.c, line 122.\nAssertion failed: str != nullptr, function dup_string, file foo.c, line 123.\n```", "```\nvoid *dup_string(size_t size, char *str) {\n  assert(size <= LIMIT && \"size is larger than the expected limit\");\n  assert(str != nullptr && \"the caller must ensure str is not null\");\n  // `--snip--`\n}\n```", "```\n#define assert(ignore) ((void)0)\n```", "```\nassert(thing1) // missing semicolon\nassert(thing2);\n```", "```\n#include <stdio.h>\n#include <stdlib.h>\n\n#define HELLO \"hello world!\"\n\nint main()\n{\n  puts(HELLO);\n\n  return EXIT_SUCCESS;\n}\n```", "```\n$ **gcc -Og hello.c -o hello**\n$ **gdb hello**\n(...)\n(No debugging symbols found in hello)\n(gdb)\n```", "```\n$ **gcc -Og -g hello.c -o hello**\n$ **gdb hello**\n(...)\nReading symbols from hello...\n(gdb) break main\nBreakpoint 1 at 0x1149: file hello.c, line 6.\n(gdb) start\nTemporary breakpoint 2 at 0x1149: file hello.c, line 6.\nStarting program: /home/test/Documents/test/hello\n\nBreakpoint 1, main () at hello.c:6\n6      int main()\n(gdb) print HELLO\nNo symbol \"HELLO\" in current context.\n(gdb)\n```", "```\n$ **gcc -Og -g3 hello.c -o hello**\n$ **gdb hello**\n(...)\nReading symbols from hello...\n(gdb) break main\nBreakpoint 1 at 0x1149: file hello.c, line 6.\n(gdb) start\nTemporary breakpoint 2 at 0x1149: file hello.c, line 6.\nStarting program: /home/test/Documents/test/hello\n\nBreakpoint 1, main () at hello.c:6\n6      int main()\n(gdb) print HELLO\n$1 = \"hello world!\"\n(gdb)\n```", "```\n$ **gcc -Wall -Wextra -Q --help=warning**\n```", "```\nunsigned ui = -1;\n```", "```\n#include <stdarg.h>\n#include <string.h>\n#include <stdio.h>\n#include <stddef.h>\n\n#define name_size 20U\n\nchar *vstrcat(char *buff, size_t buff_length, ...) {\n  char *ret = buff;\n va_list list;\n  va_start(list, buff_length);\n\n  const char *part = nullptr;\n  size_t offset = 0;\n  while ((part = va_arg(list, const char *))) {\n   buff = (char *)memccpy(buff, part, '\\0', buff_length - offset) - 1;\n   if (buff == nullptr) {\n     ret[0] = '\\0';\n     break;\n   }\n   offset = buff - ret;\n  }\n\n  va_end(list);\n  return ret;\n}\n\nint main() {\n  char name[name_size] = \"\";\n  char first[] = \"Robert\";\n  char middle[] = \"C.\";\n  char last[] = \"Seacord\";\n\n  puts(\n    vstrcat(\n      name, sizeof(name), first, \" \",\n      middle, \" \", last, nullptr\n    )\n  );\n}\n```", "```\nRobert C. Seacord\n```", "```\n#define name_size 10U\n```", "```\n$ **./bug**\nSegmentation fault\n```", "```\nlibc.so.6!__memmove_avx_unaligned_erms()\n(\\x86_64\\multiarch\\memmove-vec-unaligned-erms.S:314)\nvstrcat(char * buff, size_t buff_length) (\\home\\rcs\\bug.c:17)\nmain() (\\home\\rcs\\bug.c:32)\n```", "```\n**part:** 0x7fffffffdcd6 \"Seacord\"\n```", "```\n**ret:** 0x7fffffffdcde \"Robert C. \"\n```", "```\nbuff: 0xffffffffffffffff <error: Cannot access memory at address 0xffffffffffffffff>\n```", "```\nchar *get_error(errno_t errnum) {\n  rsize_t size = strerrorlen_s(errnum) + 1;\n  char* msg = malloc(size);\n  if (msg != nullptr) {\n    errno_t status = strerror_s(msg, size, errnum);\n    if (status != 0) {\n      strncpy_s(msg, size, \"unknown error\", size - 1);\n    }\n  }\n  return msg;\n}\n```", "```\n% **sudo apt install libsafec-dev**\n```", "```\n#include <gtest/gtest.h>\n#include <errno.h>\n#define errno_t int\n\n// implemented in a C source file\n❶ extern \"C\" char* get_error(errno_t errnum);\n\nnamespace {\n❷ TEST(GetErrorTest, KnownError) {\n    EXPECT_STREQ(get_error(ENOMEM), \"Cannot allocate memory\");\n EXPECT_STREQ(get_error(ENOTSOCK), \"Socket operation on non-socket\");\n    EXPECT_STREQ(get_error(EPIPE), \"Broken pipe\");\n  }\n\n  TEST(GetErrorTest, UnknownError) {\n    EXPECT_STREQ(get_error(-1), \"Unknown error -1\");\n  }\n} // namespace\n\nint main(int argc, char** argv) {\n  ::testing::InitGoogleTest(&argc, argv);\n  return RUN_ALL_TESTS();\n}\n```", "```\nextern \"C\" {\n  #include \"api_to_test.h\"\n}\n```", "```\ncmake_minimum_required(VERSION 3.21)\ncmake_policy(SET CMP0135 NEW)\nproject(chapter-11)\n\n# GoogleTest requires at least C++14\nset(CMAKE_CXX_STANDARD 14)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_C_STANDARD 23)\n\ninclude(FetchContent)\nFetchContent_Declare(\n  googletest\n  URL https://github.com/google/googletest/archive/03597a01ee50ed33e9dfd640b249b4be3799d395.zip\n)\n\nFetchContent_MakeAvailable(googletest)\n\ninclude(ExternalProject)\nExternalProject_Add(\n  libsafec\n  BUILD_IN_SOURCE 1\n  URL https://github.com/rurban/safeclib/releases/download/v3.7.1/safeclib-3.7.1.tar.gz\n  CONFIGURE_COMMAND autoreconf --install\n  COMMAND ./configure --prefix=${CMAKE_BINARY_DIR}/libsafec\n)\nExternalProject_Get_Property(libsafec install_dir)\ninclude_directories(${install_dir}/src/libsafec/include)\nlink_directories(${install_dir}/src/libsafec/src/.libs/)\n\nenable_testing()\n\nadd_library(error error.c)\nadd_dependencies(error libsafec)\nadd_executable(tests tests.cc)\n\ntarget_link_libraries(\n  tests\n  error\n  safec\n  GTest::gtest_main\n)\n\ninclude(GoogleTest)\ngtest_discover_tests(tests)\n```", "```\n$ **cmake -S . -B build**\n$ **cmake --build build**\n$ **./build/tests**\n```", "```\n$ **./build/tests**\n[==========] Running 2 tests from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 2 tests from GetErrorTest\n[RUN       ] GetErrorTest.KnownError\n[        OK] GetErrorTest.KnownError (0 ms)\n[RUN       ] GetErrorTest.UnknownError\n/home/rcs/tests.cc:19: Failure\nExpected equality of these values:\n  get_error(-1)\n    Which is: \"Unknown error -1\"\n  \"unknown error\"\n**[  FAILED  ] GetErrorTest.UnknownError (0 ms)**\n[----------] 2 tests from GetErrorTest (0 ms total)\n\n[----------] Global test environment tear-down\n[==========] 2 tests from 1 test suite ran. (0 ms total)\n[  PASSED  ] 1 test.\n**[  FAILED  ] 1 test, listed below:**\n**[  FAILED  ] GetErrorTest.UnknownError**\n\n1 FAILED TEST\n```", "```\nEXPECT_STREQ(get_error(-1), \"unknown error\");\n```", "```\nchar *get_error(errno_t errnum) {\n  rsize_t size = strerrorlen_s(errnum) + 1;\n  char* msg = malloc(size);\n  if (msg != nullptr) {\n    errno_t status = strerror_s(msg, size, errnum);\n    if (status != 0) return nullptr;\n  }\n  return msg;\n}\n```", "```\nEXPECT_STREQ(get_error(-1), “Unknown error -1”);\n```", "```\n$ **./build/tests**\n[==========] Running 2 tests from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 2 tests from GetErrorTest\n[RUN       ] GetErrorTest.KnownError\n[        OK] GetErrorTest.KnownError (0 ms)\n[RUN       ] GetErrorTest.UnknownError\n[        OK] GetErrorTest.UnknownError (0 ms)\n[----------] 2 tests from GetErrorTest (0 ms total)\n\n[----------] Global test environment tear-down\n[==========] 2 tests from 1 test suite ran. (0 ms total)\n[  PASSED  ] 2 tests.\n```", "```\nerrno_t print_error(errno_t errnum) {\n  rsize_t size = strerrorlen_s(errnum) + 1;\n  char* msg = malloc(size);\n  if (msg == nullptr) return ENOMEM;\n  errno_t status = strerror_s(msg, size, errnum);\n  if (status != 0) return EINVAL;\n  fputs(msg, stderr);\n  return EOK;\n}\n```", "```\nTEST(PrintTests, ZeroReturn) {\n  EXPECT_EQ(print_error(ENOMEM), 0);\n  EXPECT_EQ(print_error(ENOTSOCK), 0);\n  EXPECT_EQ(print_error(EPIPE), 0);\n}\n```", "```\n$ **./build/tests**\n[==========] Running 1 test from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 1 test from PrintTests\n[RUN       ] PrintTests.ZeroReturn\n[        OK] PrintTests.ZeroReturn (0 ms)\n[----------] 1 test from PrintTests (0 ms total)\n\n[----------] Global test environment tear-down\n[==========] 1 test from 1 test suite ran. (0 ms total)\n**[  PASSED  ]** 1 test.\n```", "```\nadd_compile_options(-g3 -fno-omit-frame-pointer -fno-common -fsanitize=address)\nadd_link_options(-fsanitize=address)\n```", "```\nASAN_OPTIONS=symbolize=1\nASAN_SYMBOLIZER_PATH=/path/to/llvm_build/bin/llvm-symbolizer\n```", "```\n==22489==ERROR: LeakSanitizer: detected memory leaks\n\nDirect leak of 31 byte(s) in 1 object(s) allocated from:\n    #0 0x7f2bcf9f58ff in __interceptor_malloc\n  ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:69\n    #1 0x557d3105f6da in print_error /home/rcs/test/error.c:21\n    #2 0x557d3105d314 in TestBody /home/rcs/test/tests.cc:28\n\n// `--snip--`\n```", "```\n#1 0x557d3105f6da in print_error /home/rcs/test/**error.c:21**\n```", "```\nerrno_t print_error(errno_t errnum) {\n  rsize_t size = strerrorlen_s(errnum) + 1;\n **char* msg = malloc(size);**\n  // `--snip--`\n}\n```"]