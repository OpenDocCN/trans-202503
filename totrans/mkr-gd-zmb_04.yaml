- en: '**4**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**ZOMBIE ALARMS**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f0001-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Movies tell us that zombies can’t move around without groaning. They’re also
    clumsy and liable to crash into things. However, there’s still the possibility
    that they will catch you unaware. After all, you have to sleep sometime. So, one
    of the first uses of your newly generated electricity should be to make some zombie
    alarms ([Figure 4-1](ch04.html#ch04fig1)).
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter has two zombie detector projects: a decidedly low-tech trip wire
    alarm and a more sophisticated passive infrared (PIR) proximity alarm.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f04-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-1: Zombie detection'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT 5: TRIP WIRE ALARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Zombies will keep finding their way into your compound, either because they’re
    attracted to the smell and noise or just through aimless wandering. You need a
    way to detect them so that you can grab a baseball bat or ax and head off to do
    battle at the breach in your defenses.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you may decide to create a “killing field” into which unsuspecting
    zombies (is there another kind?) will wander, ready for swift dispatching. Either
    way, you’ll need to be alerted to their presence, and a trip wire is a good way
    to make sure that happens.
  prefs: []
  type: TYPE_NORMAL
- en: Zombies are notorious for dragging their feet. They also frequently fail to
    look where they’re going, since they’re mostly guided by the smell of human flesh.
    So, even a trip wire that wouldn’t fool the most clumsy and shortsighted of humans
    will work just fine on a zombie ([Figure 4-2](ch04.html#ch04fig2)). This alarm
    uses parts that are easily scavenged to sound a car horn when triggered.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f04-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-2: A trip wire alarm'
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU WILL NEED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To make this project, you’ll need the following items. (The microswitch can
    also be obtained from the door safety interlock of a microwave.)
  prefs: []
  type: TYPE_NORMAL
- en: '| **ITEMS** | **NOTES** | **SOURCE** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) String | Long enough to stretch across the
    gap where you want to detect zombies | Hardware store |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Nails or screws | To fix the trip wire and
    microswitch | Hardware store, Scavenge |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Microswitch |  | Fry’s (2314449), microwave
    oven |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Double-core bell wire or speaker cable | To
    connect the microswitch to the battery and car horn | Hardware store, Scavenge
    |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Car horn | The louder the better. Even zombies
    can look surprised when a car horn blares a few feet from their head, and few
    things are funnier than a surprised-looking zombie. | Auto parts store, Scavenge
    |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) 12V battery | This can be a car battery, but
    a smaller battery will also be just fine. | Auto parts store, Scavenge |'
  prefs: []
  type: TYPE_TB
- en: You could scavenge most of these parts easily, and you probably won’t have enough
    electricity to run a microwave, so you may as well strip it down for the microswitch.
    Of course, if you’re practicing before the zombies have completely taken over,
    it would clearly be a terrible waste to destroy a microwave oven just for a $2
    switch; in that case, only use a microwave that is already dead. It’s dangerous
    to keep a zombie microwave around, anyway.
  prefs: []
  type: TYPE_NORMAL
- en: The 12V battery I used is a small, sealed lead-acid battery. These are effectively
    miniature car batteries. But if you have a car battery all set up from [Chapter
    2](ch02.html#ch02), then you will probably just want to use that one.
  prefs: []
  type: TYPE_NORMAL
- en: '**WARNING**'
  prefs: []
  type: TYPE_NORMAL
- en: The following procedure describes how to disassemble a microwave oven. You must
    only do this with the oven unplugged from the AC outlet. This procedure will render
    the oven at best nonfunctional and at worst very dangerous, so the microwave must
    be scrapped after this. Do not attempt to use the damaged microwave as a radiation
    weapon against the zombies (but using it as a blunt object is okay).
  prefs: []
  type: TYPE_NORMAL
- en: '**CONSTRUCTION**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In a postapocalyptic world, low-tech traps, like this one, will usually be
    the most reliable. The hardest part of the build is probably extracting the microswitch
    from a microwave oven, and that’s where I’ll start. Of course, if you plan ahead,
    you can also just buy a switch; skip to “[Step 2: Identify the Microswitch Terminals](ch04.html#ch00lev1sec75)”
    on [page 68](ch04.html#page_68) if you already have your switch prepared.'
  prefs: []
  type: TYPE_NORMAL
- en: As with most of the projects in this book, it is a good idea to get them working
    safely on your workbench before deploying them in an active zombie area. It’s
    very difficult to concentrate on your soldering when a groaning heap of rotting
    flesh is bearing down on you.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 1: OBTAIN A MICROSWITCH**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: All microwave ovens are slightly different, so you’ll need to adapt these instructions
    to your particular microwave. The basic principle is to keep taking out screws
    and removing parts of the microwave until you get to the door switch. Most microwave
    ovens have a U-shaped outer case that, once removed, gives you a clear view of
    the oven’s inner workings ([Figure 4-3](ch04.html#ch04fig3)). The microswitch
    next to the door latch is then easily accessible.
  prefs: []
  type: TYPE_NORMAL
- en: In [Figure 4-3](ch04.html#ch04fig3), the microwave door is to the right, the
    back of the area with all the control buttons and knobs is at the top right, and
    the inside of the door latch is close to the circled area.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f04-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-3: Inside the microwave oven'
  prefs: []
  type: TYPE_NORMAL
- en: The microswitch you are trying to find will have clips attached to its terminals
    ([Figure 4-4](ch04.html#ch04fig4)). You can pull those clips off, or you can simply
    cut the wires down to the clip to make the microswitch easier to remove.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: If you can’t see the microswitch at first, then just disassemble the oven a
    bit more until its location is obvious. Some ovens have more than one microswitch.
  prefs: []
  type: TYPE_NORMAL
- en: After you remove the microswitch, if the attached wires are long enough, you
    can just leave them in place and cut them. Otherwise, desolder the wires and attach
    new wires of the correct length. The microwave also contains a lot of other useful
    lengths of wire, particularly those with spade terminals attached.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, not much more of the oven is going to be of use in this project,
    though the remainder of the microwave oven makes an extremely effective zombie
    head crusher if dropped from a height into the groaning host of undead. Just attach
    a rope to it first so you can reel it back and use it multiple times. There’s
    an apocalypse on, so it’s even more important to recycle.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 2: IDENTIFY THE MICROSWITCH TERMINALS**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The microswitch will have three connections ([Figure 4-4](ch04.html#ch04fig4)).
    If you look closely, you’ll see that they are marked COM (common), NC (normally
    closed), and NO (normally open). When pushed toward the left, the long lever pushes
    in the little button on the side of the switch.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f04-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-4: A microswitch'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll always use the common connection when you add one of these switches to
    a circuit. The other terminal you connect to will depend on whether you want the
    switch to cause something to happen when it’s activated or when it’s released.
    The normally open terminal of the switch is left open when the switch is not activated,
    meaning it has no connection to the common terminal until the button is pressed.
    The normally closed terminal works the other way around. You want your alarm to
    go off when a zombie hits the trip wire, thus activating the switch, so this project
    uses the NO connection.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 3: PREVIEW THE ELECTRONIC CIRCUIT**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Now let’s have a look at how that little switch will become a key part of your
    advance zombie-warning system.
  prefs: []
  type: TYPE_NORMAL
- en: The schematic of the trip wire alarm ([Figure 4-5](ch04.html#ch04fig5)) shows
    an electronic circuit that is about as simple as one can get. If one of the car
    horn’s terminals is explicitly marked positive, you’ll connect it to the positive
    terminal of the battery; otherwise, it doesn’t matter which side of the horn you
    attach there. The battery’s negative terminal is connected to the microswitch’s
    COM terminal, and the microswitch’s NO connection completes the circuit back to
    the car horn.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f04-05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-5: Schematic for the trip wire alarm'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: Car horns normally require a full 12V before they’ll make much noise. Naturally,
    a car battery is well suited for this project. See [Chapter 2](ch02.html#ch02)
    for more information on using batteries.
  prefs: []
  type: TYPE_NORMAL
- en: One big advantage of this alarm is that it doesn’t draw any current at all from
    the battery until the alarm is triggered. This means that your battery will provide
    effective zombie protection for a long while.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 4: PREPARE THE WIRES**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'You’re going to need two lengths of cable: a longer length of double-core cable
    leading to the switch and a short single length (perhaps 6 inches, or 15 cm) of
    wire to connect the positive terminals of the battery and horn.'
  prefs: []
  type: TYPE_NORMAL
- en: Strip and trim the ends of all the wires. If you need help doing this, see “[Stripping
    Wires](app02.html#ch00lev1sec225)” on [page 227](app02.html#page_227).
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 5: CONNECT THE BATTERY AND HORN**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: If you’re using a small 12V battery with solder tabs, solder the short single
    length of wire between the positive terminal of the battery and the positive terminal
    of the horn ([Figure 4-6](ch04.html#ch04fig6)). If, on the other hand, you’re
    using a car battery, then don’t try to solder directly to the terminal. Instead,
    use an alligator clip, as you did with many of the leads in [Chapter 2](ch02.html#ch02)
    (see, for example, [Figure 2-10](ch02.html#ch02fig10) on [page 32](ch02.html#page_32)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f04-06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-6: Connecting the horn and battery'
  prefs: []
  type: TYPE_NORMAL
- en: Again, if the horn doesn’t have a terminal marked with a +, then it doesn’t
    matter which terminal of the horn you connect the battery to.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 6: CONNECT THE SWITCH**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Solder the two wires of one end of the long length of double-core cable to the
    COM and NO terminals of the switch ([Figure 4-7](ch04.html#ch04fig7)). It doesn’t
    matter which wire goes to which switch terminal, as long as you use COM and NO.
    In fact, sometimes there won’t be an NC terminal on the microswitch at all.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f04-07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-7: Soldering wires to the switch'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the other ends of the double-core cable to the unused terminal of
    the horn and the negative terminal of the battery ([Figure 4-8](ch04.html#ch04fig8)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f04-08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-8: The finished wiring'
  prefs: []
  type: TYPE_NORMAL
- en: With all the wiring complete, you’ll find that when you activate the switch
    by moving the lever, the horn will sound. Car horns are really loud, so it’s best
    not to test this out in an enclosed space—and warn your fellow survivors before
    you try it!
  prefs: []
  type: TYPE_NORMAL
- en: '**USING THE TRIP WIRE ALARM**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Clearly, you need to choose your moment to deploy this project so that you don’t
    become a zombie yourself before you finish setting it up. When you’ve identified
    the opening that you want to protect, fix a screw or nail (or find some other
    way of securing one end of the string) about 6 inches (15 cm) off the ground.
    This will allow the switch to be triggered both by foot-dragging zombies and more
    athletic zombies that may simply tread on the string.
  prefs: []
  type: TYPE_NORMAL
- en: Fix the microswitch on the opposite side of the passageway you’re protecting
    and at the same height as the anchor for the string. Most microswitches have holes
    that make them easy to affix with small screws. If not, you can glue the switch
    in place with epoxy-based glue or a hot glue gun.
  prefs: []
  type: TYPE_NORMAL
- en: Position the switch so that the lever is on the other side from the space being
    protected. Tie the string around the top end of the lever ([Figure 4-9](ch04.html#ch04fig9)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f04-09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-9: The switch fixed in place'
  prefs: []
  type: TYPE_NORMAL
- en: Don’t make your string too taut. After all, you want it to detach without pulling
    the microswitch off the wall when a zombie walks through it. Tying a bow at one
    end or the other is a good idea.
  prefs: []
  type: TYPE_NORMAL
- en: Although I used a car horn, you could use anything that makes a noise and operates
    from 12V. Or, if you’d prefer a silent alarm, you could use a 12V car light bulb
    in place of the car horn.
  prefs: []
  type: TYPE_NORMAL
- en: Neither approach is very sophisticated, however, so in the next project, you’ll
    level up your zombie alarm with something a little more high-tech.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT 6: PIR ZOMBIE DETECTOR**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The second zombie detector project in this book uses a *passive infrared (PIR)
    detector*. These detectors are the same type used in intruder alarms—they sense
    movement of heat—and I guess few things are more intrusive than a group of zombies
    intent on eating you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can of course just buy (or scavenge) an intruder alarm that uses PIR sensors,
    rather than make this project from scratch, but I thought it would be more fun
    to make something that uses an Arduino. In fact, if you just add the extra components
    needed for the PIR alarm to “[Project 4: Battery Monitor](ch03.html#ch00lev1sec63)”
    on [page 53](ch03.html#page_53), the same Arduino can both monitor your battery
    and alert you to a zombie attack, using the same buzzer and display.'
  prefs: []
  type: TYPE_NORMAL
- en: When a zombie triggers the PIR sensor, the LCD display will show the message
    *ZOMBIES!!* ([Figure 4-10](ch04.html#ch04fig10)). Since the last thing you want
    to do while fending off a zombie is attract more zombies, this project also allows
    you to silence the alarm by pressing any button on the LCD shield.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f04-10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-10: PIR zombie detector'
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU WILL NEED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To make this PIR alarm, you’ll need the following parts. If you’ve already
    made the battery monitor of “[Project 4: Battery Monitor](ch03.html#ch00lev1sec63)”
    on [page 53](ch03.html#page_53), you’ll already have the Arduino, screwshield,
    and alligator clips.'
  prefs: []
  type: TYPE_NORMAL
- en: '| **ITEMS** | **NOTES** | **SOURCE** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Arduino | Arduino Uno R3 | Adafruit, Fry’s
    (7224833), Sparkfun |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Arduino screwshield | Screwshield | Adafruit
    (196) |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) PIR module |  | Adafruit (189), Fry’s (6726705),
    security store |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Small alligator clip leads |  | Auto parts
    store |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) 3-core cable wire | Long enough to reach the
    PIR sensor | Scavenge |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Terminal block | 3-way, 2A terminal strip |
    Auto parts store, electrical store |'
  prefs: []
  type: TYPE_TB
- en: '**ZOMBIES AND PIR DETECTORS**'
  prefs: []
  type: TYPE_NORMAL
- en: One important thing that we haven’t discussed is whether zombies can even trigger
    a PIR detector, which relies on detecting heat.
  prefs: []
  type: TYPE_NORMAL
- en: While zombies are generally considered to be dead, and by implication cold,
    it isn’t possible to move muscles without also generating a small amount of heat.
    Also, if the cold zombie walks between a source of heat and the PIR sensor, the
    sensor will register the movement. So, while zombies are generally cooler than
    humans, you can expect attacking zombies to register on a PIR sensor.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONSTRUCTION**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is another project that can be assembled without any soldering, and my
    instructions assume that you’re building on top of Project 4\. If you haven’t
    already built Project 4, then you’ll need to build a slightly modified version
    of that project first, as the hardware for the PIR zombie detector is mostly the
    same.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 1: BUILD THE SCREWSHIELD**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Flip to Project 4, “[Construction](ch04.html#ch00lev1sec83)” on [page 55](ch03.html#page_55)
    and follow Steps 1 to 3\. In Step 1, download the sketch (Arduino’s word for program)
    *Project_06_PIR_Alarm* from *[http://www.nostarch.com/zombies/](http://www.nostarch.com/zombies/)*
    and use that in place of the sketch for Project 4\. Also, when it comes to Step
    3, you don’t need to include the two resistors unless you also want to monitor
    the battery voltage.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 2: MAKE A LEAD FOR THE PIR SENSOR**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: There’s little point in making a zombie detector that detects zombies only after
    they’re already in the same room as you. Chances are you’ll have already thoroughly
    detected them if they get that far. Therefore, you need to attach a long lead
    to the PIR detector so that it can monitor the corridor, porch, or other area
    outside your living space.
  prefs: []
  type: TYPE_NORMAL
- en: 'The PIR detector has three leads: two that supply power and one output that
    indicates that motion has been detected. This means you’ll need a three-wire lead.
    You could find some wire from an intruder alarm, or you could use three of the
    wires in a telephone extension lead. Pretty much any lead with three or more wires
    in it will be just fine.'
  prefs: []
  type: TYPE_NORMAL
- en: You could either solder the ends of this lead to the lead that comes with the
    PIR sensor or use a terminal block, as I have ([Figure 4-11](ch04.html#ch04fig11)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f04-11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-11: PIR lead and terminal block'
  prefs: []
  type: TYPE_NORMAL
- en: I harvested my three-lead cable from a telephone extension lead. The cable contained
    four solid-core insulated wires. These wires were color coded, so I used blue
    for GND (ground), orange for 5V, and stripy white for the output; I left the final
    wire unused. The lead was about 30 feet (9 m) long, which worked fine for the
    sensor. You can probably use longer leads, but try it out first before you lay
    all the cabling.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 3: CONNECT THE PIR TO THE SCREWSHIELD**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Now that you’ve extended your sensor wires to a useful length, attach the wires
    to the Arduino screwshield ([Figure 4-12](ch04.html#ch04fig12); note that the
    two resistors from Project 4 are shown at the bottom left).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f04-12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-12: Connecting the PIR lead to the Arduino screwshield'
  prefs: []
  type: TYPE_NORMAL
- en: If you look at the back of the PIR sensor, you’ll see that the three pins are
    labeled GND, OUT, and +5V. Connect GND on the PIR sensor to one of the GND connections
    on the screwshield; it doesn’t matter which one. Then, connect +5V on the PIR
    sensor to the 5V connection on the screwshield. Finally, connect OUT on the PIR
    sensor to D2 on the screwshield.
  prefs: []
  type: TYPE_NORMAL
- en: '**SOFTWARE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you just want to make this project on its own, without any of the earlier
    Arduino-based projects, then use the sketch *Project_06_PIR_Alarm*. On the other
    hand, if you’ve made one or more of the other Arduino projects and wish to include
    them, then use the sketch *All_Sensors* and change the constants at the top to
    select the projects that you have made.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first few lines of the *All_Sensors* sketch are shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this case, only the battery monitor (Project 4) and PIR alarm (Project 6)
    are enabled. If you’ve made more of the projects, then change the value next to
    those projects from `false` to `true`. If you are working your way through this
    book in order, then the program should look as shown.
  prefs: []
  type: TYPE_NORMAL
- en: All the source code for this book is available from *[http://www.nostarch.com/zombies/](http://www.nostarch.com/zombies/)*.
    See [Appendix C](app03.html#app03) for instructions on installing the programs.
  prefs: []
  type: TYPE_NORMAL
- en: The PIR detector code follows the same pattern as Project 4, so for more information
    on how the program as a whole works, please refer to “[Software](ch11.html#ch00lev1sec215)”
    on [page 57](ch03.html#page_57). Here, I’ll just describe the code specific to
    this project.
  prefs: []
  type: TYPE_NORMAL
- en: The first change to the earlier code is the addition of a new constant for the
    PIR’s OUT pin. I added the `pirPIN` constant on the line after the `switchPin`
    constant.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: I set `pirPin` to `2` because the output of the PIR sensor will be connected
    to pin 2 on the Arduino. The next addition to the sketch occurs in the setup function,
    where that same pin 2 is set to be an input.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Although pins on an Arduino default to inputs unless specified as outputs, declaring
    the pin to be an input makes the code easier to follow.
  prefs: []
  type: TYPE_NORMAL
- en: The loop function now needs to check the sensor, so I added a call to the function
    `checkPIR`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This new function, `checkPIR`, will, as the name suggests, check the PIR sensor
    and take the appropriate action if the sensor is triggered. The function is defined
    right at the end of the sketch.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `checkPIR` function makes a `digitalRead` of the `pirPin` to decide whether
    the output from the PIR detector is `HIGH` or `LOW`. If movement has been detected,
    then the `alarm` function is used to display an appropriate message. For more
    information on using the inputs and outputs of an Arduino, see [Appendix C](app03.html#app03).
  prefs: []
  type: TYPE_NORMAL
- en: '**USING THE PIR ZOMBIE DETECTOR**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The project works well in combination with the battery monitor, as you can just
    run both off the same battery. But whether you combine the two projects or not,
    be mindful of your wires when you deploy the PIR detector around your base of
    operations. If you’re using cable that contains solid-core wires, then affix the
    cable to the wall at regular intervals along the cable length. Solid-core wires
    don’t take kindly to being repeatedly flexed.
  prefs: []
  type: TYPE_NORMAL
- en: '**SCAVENGED PIR SENSORS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Adafruit PIR module used in this project is designed to work with microcontroller
    modules like the Arduino. But following an apocalypse, you may find it easier
    to obtain the type of regular PIR sensor intended for use with a security system,
    such as the unbranded unit obtained from eBay for a couple of dollars, shown opened
    up in [Figure 4-13](ch04.html#ch04fig13).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f04-13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-13: A PIR module intended for intruder alarms'
  prefs: []
  type: TYPE_NORMAL
- en: This sensor won’t operate at 5V but rather requires a power supply of 12V. The
    sensor has a logic level output that will rise to 3.6V, which is enough to register
    as `HIGH`, just like the Adafruit module. The only difference in wiring is to
    connect this sensor’s red wire to the Arduino’s V[in] rather than to 5V.
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that other sensors may look like this one but have a different output
    voltage. Some (with an open collector output) require a pull-up resistor (of,
    say, 1 kΩ) between the output and 5V on the Arduino. If the output of the sensor
    does not give a useful voltage when you wave your hand in front of it, then it
    almost certainly needs a pull-up resistor.
  prefs: []
  type: TYPE_NORMAL
- en: Other types of PIR sensors, especially those intended to control lighting, have
    a relay output. This output works just like a switch, closing when movement is
    detected. The schematics show how to connect three types of PIR modules to the
    Arduino ([Figure 4-14](ch04.html#ch04fig14)).
  prefs: []
  type: TYPE_NORMAL
- en: Wherever possible, choose a device that you have documentation for so you don’t
    have to guess how its output works and how to wire it up.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f04-14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-14: Connecting different types of PIR module to the Arduino'
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter advances from automatic zombie detection to walk through a
    number of surveillance projects that will allow you to see what is going on before
    it trips over your doorstep. You’ll be able to spot the zombies remotely using
    webcams.
  prefs: []
  type: TYPE_NORMAL
