- en: Part II
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分
- en: Design
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 设计
- en: '6'
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Secure Design
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 安全设计
- en: Overload, clutter, and confusion are not attributes of information, they are
    failures of design.
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 过载、杂乱和混乱不是信息的特征，而是设计的失败。
- en: ''
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Edward Tufte
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —Edward Tufte
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: Once you have a solid understanding of security principles, patterns, and mitigations,
    the practice of integrating security into your software designs becomes relatively
    straightforward. As you discern threats to your design, you can apply these tools
    as needed and explore better design alternatives that reduce risk organically.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你对安全原则、模式和缓解措施有了深入理解，将安全性集成到软件设计中变得相对简单。随着你识别出设计中的威胁，你可以根据需要应用这些工具，并探索能够有机降低风险的更好设计方案。
- en: This chapter focuses on secure software design. It serves as a companion to
    Chapter 7, which covers security design reviews. These two topics are aspects
    of the same activity, viewed from different perspectives. Software designers should
    be considering the concepts discussed in this chapter and applying these methods
    throughout the design process; they shouldn’t leave the system’s security for
    a reviewer to patch up later. In turn, reviewers should look at designs through
    the lens of threats and mitigations as an additional layer of security assessment.
    The secure design process is integrative, and the security design review is analytic—used
    synergistically, they produce better designs with security baked in.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点讨论安全软件设计。它是第七章的补充，后者讲述了安全设计评审。这两个主题是同一活动的不同视角。软件设计师应当在整个设计过程中考虑本章讨论的概念，并应用这些方法；他们不应将系统的安全性留给评审员来事后修补。反过来，评审员应当从威胁与缓解的角度审视设计，作为额外的安全评估层。安全设计过程是整合性的，而安全设计评审则是分析性的——两者协同使用，能够产生更好的设计，并将安全性内嵌其中。
- en: Software design is an art, and this chapter focuses on just the security aspect.
    Whether you design according to a formal process or do it all in your head, you
    don’t have to change how you work to incorporate the ideas presented here. Threat
    modeling and a security perspective do not need to drive design, but they should
    inform it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 软件设计是一门艺术，本章仅聚焦于安全性方面。无论你是按照正式流程进行设计，还是在脑中完成设计，你都不需要改变工作方式来融入这里提出的理念。威胁建模和安全视角不需要主导设计，但它们应当为设计提供参考。
- en: The secure design practice described here follows a process typical of a large
    enterprise, but you can adapt these techniques to however you work. Smaller organizations
    will operate much more informally, and the designer and reviewer may be the same
    person. The techniques presented approach the problem in a general way so as to
    be easily applicable to however you like to do software design.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里描述的安全设计实践遵循了大型企业的典型流程，但你可以根据自己的工作方式调整这些技术。较小的组织通常会运作得更加非正式，设计师和评审员可能是同一个人。所呈现的技术采用了普适的方法，能够轻松适应你喜欢的任何软件设计方式。
- en: Integrating Security in Design
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在设计中集成安全性
- en: I will contend that conceptual integrity is the most important consideration
    in system design.
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我认为概念完整性是系统设计中最重要的考虑因素。
- en: ''
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Fred Brooks (from *The Mythical Man-Month*)
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —Fred Brooks（摘自 *《神话般的人月》*）
- en: The design stage provides a golden opportunity for building security principles
    and patterns into a software project. During this early phase, you can easily
    explore alternatives before investing in an implementation and getting tied down
    by past decisions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 设计阶段为将安全原则和模式融入软件项目提供了一个黄金机会。在这一初期阶段，你可以轻松探索各种替代方案，在投入实施并被过去的决策所束缚之前。
- en: In the design stage, developers should create*design documents* to capture the
    important high-level characteristics of a software project, analogous to architectural
    blueprint drawings for structures. I highly recommend investing effort into documenting
    your designs because it helps ensure rigor and also creates a valuable artifact
    that allows others to understand the decisions you’ve made—especially when it
    comes to balancing threats with mitigations and the trade-offs involved.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计阶段，开发人员应当创建*设计文档*，以捕捉软件项目的主要高层次特征，类似于建筑结构的蓝图图纸。我强烈建议投入精力来记录你的设计，因为这有助于确保严谨性，并且创建了一个有价值的成果，使他人能够理解你所做的决策——尤其是在平衡威胁与缓解措施以及所涉及的权衡时。
- en: Design documents typically consist of a *functional description* (how the software
    works when viewed from the outside) and a *technical specification* (how it works
    when viewed from the inside). More formal designs are especially valuable when
    there are competing stakeholders, when coordinating a larger effort, when the
    designs must comply with a formal requirements specification or strict compatibility
    demands, when faced with difficult trade-offs, and so forth.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 设计文档通常包括*功能描述*（从外部视角看软件是如何工作的）和*技术规格*（从内部视角看它是如何工作的）。更正式的设计在以下情况下尤其有价值：当存在竞争的利益相关者时；当需要协调更大的工作时；当设计必须符合正式的需求规格或严格的兼容性要求时；当面临困难的权衡时，等等。
- en: When you look at a prospective software design, put on your “security hat.”
    Then, before coding begins, you can threat model, identify attack surfaces, map
    out data flows, and more. If the proposed design makes securing the system structurally
    challenging, now is the perfect time to consider alternatives that would be inherently
    more secure. You should also point out important security mitigations in the design
    document so that implementers will see the need for these in advance.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你查看一个潜在的软件设计时，戴上你的“安全帽”。然后，在编码开始之前，你可以进行威胁建模、识别攻击面、绘制数据流图等。如果提议的设计在结构上使得确保系统安全变得具有挑战性，那么现在是考虑那些固有更安全的替代方案的最佳时机。你还应该在设计文档中指出重要的安全缓解措施，以便实施者提前看到这些需求。
- en: 'More experienced designers will incorporate security into the design from the
    start. If this seems daunting, it’s fine to start with a “feature-complete” draft
    design and make a second pass through it with a focus on security, but that’s
    a lot more work. Major changes are most easily made if caught earlier in the process,
    avoiding the wasted effort of redoing after the fact. Explore new architectures
    and play with basic requirements sooner rather than later, when it’s more easily
    done. As Josh Bloch once quipped: “A week of coding can often save an hour of
    thought.”'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 更有经验的设计师会从一开始就将安全性纳入设计。如果这看起来让人畏惧，完全可以从一个“功能完整”的草图设计开始，然后再重点关注安全性进行第二轮修改，但这样会增加很多工作量。如果能够在早期发现问题，进行重大更改会更容易，从而避免事后重做的浪费。尽早探索新架构并玩转基本要求，而不是拖到后期那时才开始，那时修改会更加困难。正如Josh
    Bloch曾幽默地说：“一周的编码有时可以节省一个小时的思考。”
- en: Making Design Assumptions Explicit
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使设计假设明确化
- en: 'In the mid-1980s, I worked for a company that designed and built what was then
    a powerful computer from the ground up: both the hardware and the software. After
    years of development, the work of both teams came together when the operating
    system was loaded into the prototype hardware at last. . . and immediately tanked.
    It turned out that the hardware team had largely come from IBM, where they use
    big-endian architecture, and the software team mostly came from HP, which traditionally
    used little-endian, so “bit 0” meant the high-order bit on the hardware but the
    low-order bit on the software. Throughout years of planning and meetings and prototyping,
    everybody had just assumed the endianness of the company culture they came from.
    (And of course, it was the software team that had to make the necessary changes
    once they figured this out.)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在1980年代中期，我为一家设计并构建计算机的公司工作，那时这台计算机是一个强大的计算机：包括硬件和软件。在多年的开发工作后，当操作系统最终加载到原型硬件上时，两支团队的工作终于结合在一起...但结果是立刻失败。原来，硬件团队大多来自IBM，使用的是大端字节序架构，而软件团队大多来自HP，传统上使用的是小端字节序，因此“位0”在硬件上表示高位，在软件上表示低位。在多年的规划、会议和原型制作过程中，大家只是默认了他们所来自公司文化中的字节序。（当然，最终是软件团队在弄清楚这一点后不得不做出必要的更改。）
- en: Unwritten assumptions can undermine the effectiveness of security design reviews,
    so designers should endeavor to document them (and reviewers should ask about
    anything that is unclear). A good place to capture these explicit assumptions
    is in a “background” section of the design document, preceding the body of the
    design itself.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 未成文的假设可能会削弱安全设计审查的有效性，因此设计师应尽力记录这些假设（而审查者应询问任何不明确的地方）。一个良好的记录这些显式假设的地方是设计文档中的“背景”部分，放在设计正文之前。
- en: 'One way to think about documenting assumptions is to anticipate serious misunderstandings,
    so you never hear anyone say, “But I thought. . .” Here is a list of some common
    assumptions that are important to document, but easily omitted in designs:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 记录假设的一种思路是预见到可能出现的严重误解，这样你就不会再听到有人说，“但我以为. . .” 以下是一些常见的假设清单，它们对于文档化非常重要，但在设计中容易被遗漏：
- en: Budget, resource, and time constraints limiting the design space
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预算、资源和时间限制，限制了设计空间
- en: Whether the system is likely to be a target of attack
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统是否可能成为攻击目标
- en: Non-negotiable requirements, such as compatibility with legacy systems
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不可谈判的要求，如与遗留系统的兼容性
- en: Expectations about the level of security to which the system must perform
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对系统必须执行的安全级别的期望
- en: Sensitivity of data and the importance of protecting it securely
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据的敏感性及其需要安全保护的重要性
- en: Anticipated needs for future changes to the system
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对系统未来更改的预期需求
- en: Specific performance or efficiency benchmarks the system must achieve
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统必须达到的特定性能或效率基准
- en: Clarification of assumptions is important to security because misunderstandings
    are often the root cause of a weak interface design or mismatched interaction
    between components that attackers can exploit. In addition, it ensures that the
    design reviewer has a clear and consistent view of the project.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 假设的明确化对安全性至关重要，因为误解通常是导致接口设计薄弱或组件之间交互不匹配的根本原因，攻击者可以利用这一点。此外，它还确保设计审查员对项目有一个清晰、一致的视图。
- en: Often within an enterprise, or any set of related projects, many of these assumptions
    will remain the same across a set of designs, in which case you can compile a
    list in a shared document that provides common background. Individual designs
    then need only reference this common base and detail any exceptions where the
    applicable assumptions vary. For example, a billing system may be subject to higher
    security standards and need to conform with specific financial regulations for
    a credit card processing component than the rest of the enterprise applications.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在企业内部或任何一组相关项目中，许多假设在一组设计中会保持一致，在这种情况下，您可以在共享文档中编制一份提供共同背景的清单。各个设计随后只需参考这个共同基础，并详细说明假设变化的任何例外情况。例如，计费系统可能需要遵守比其他企业应用程序更高的安全标准，并需要符合特定的金融监管要求，例如针对信用卡处理组件的要求。
- en: Defining the Scope
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义范围
- en: 'It’s impossible to do a good review of the security of a design if there is
    uncertainty about the scope of the review. Clarifying the scope is also vital
    to answering the first of the Four Questions from Chapter 2: “What are we working
    on?” To see why this is, consider the design for a new customer billing system.
    Does the design include the web app used for collecting reports of billable hours,
    or is that a separate design? What about the existing databases it relies on—is
    the security of those systems in scope or not? And should the review include the
    design of the new web-based API you’ll be using to report to the corporate accounting
    system?'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对审查范围存在不确定性，就不可能对设计的安全性进行良好的审查。明确审查范围对于回答第二章中的“四个问题”中的第一个问题也至关重要：“我们在做什么？”为了理解这一点，可以考虑一个新的客户计费系统的设计。这个设计是否包括用于收集可计费小时报告的网页应用，还是这是一个独立的设计？那么，它依赖的现有数据库呢——这些系统的安全性是否在审查范围内？审查是否应包括您将用于向企业会计系统报告的新的基于Web的API设计？
- en: Usually, the designer makes a strategic decision about how to define the scope,
    choosing how much to bite off. When it’s defined by others, the designer must
    understand the prescribed scope and the reasons for it. You can define the scope
    of the design as the code running in a process, specific components of a system
    represented in a block diagram, the code in a library, a division of a source
    repository, or whatever else makes the most sense, so long as it’s clear to everyone
    involved. The billing system design I mentioned in the previous paragraph probably
    should include the new API, since it’s an extension of the same design. Conversely,
    the existing databases are probably out of scope, provided they aren’t being used
    in a fundamentally new way and have already received sufficient security attention.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，设计师会做出战略性决策，定义范围，决定要处理多少内容。当范围由他人定义时，设计师必须理解规定的范围及其原因。您可以将设计的范围定义为在进程中运行的代码、在框图中表示的系统的特定组件、库中的代码、源代码库中的划分，或任何其他最合适的方式，只要它对所有相关方来说都清晰明确。前面提到的计费系统设计可能应该包括新的API，因为它是相同设计的扩展。相反，现有的数据库可能不在范围内，只要它们没有以根本新的方式使用，并且已经进行了足够的安全审查。
- en: If the scope of a design is vague, the reviewer might assume some important
    aspect of security is out of scope, while the designer might be unaware of the
    issue. By omission, it could fall through the cracks. For example, nearly every
    software design will involve some storage of data. Unless the data is expendable,
    which is rare, maintaining good backups is an obvious mitigation to the possible
    loss of integrity due to various threats (both malicious and accidental). Designers
    often omit such self-evident points, but without a clear statement of design scope,
    everyone might assume someone else regularly performs backups for all storage
    in the production system, resulting in this task falling by the wayside—until
    the first instance of failure, when the lesson is learned all too painfully.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设计范围模糊，评审人员可能会假设某些重要的安全方面不在范围内，而设计者可能未意识到这一问题。由于遗漏，它可能会被忽视。例如，几乎所有的软件设计都涉及某种数据存储。除非数据是可丢弃的，这种情况很少见，否则保持良好的备份是应对各种威胁（无论是恶意还是意外）导致完整性丧失的明显缓解措施。设计者经常忽略这种不言而喻的点，但如果没有明确的设计范围声明，每个人可能都认为其他人定期为生产系统中的所有存储进行备份，结果这个任务就被忽视了——直到第一次失败发生时，痛苦的教训才被吸取。
- en: Don’t let excluding part of the design’s ecosystem from the scope result in
    it falling between the cracks. When you have inherited a legacy system, your first
    efforts to understand it should focus on its most sensitive parts, those most
    fundamental to security, or perhaps the most obvious target of attack. Then judiciously
    undertake reviews of additional parts of the system that constitute independent
    components until you have covered everything.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 不要让将设计生态系统的一部分排除在范围之外，导致它被忽视。当你继承一个遗留系统时，你首先需要关注的是其最敏感的部分，那些对安全至关重要的部分，或者可能是最明显的攻击目标。然后，审慎地审查系统的其他部分，尤其是构成独立组件的部分，直到你覆盖了所有内容。
- en: You can handle design iterations, sprints, and major revisions of existing systems
    by defining a narrow scope that corresponds to where redesign happens. Once you
    have carved out boundaries for the new design work, there are clear preconditions
    defined by the design that are outside that scope, and you are free to redo everything
    anew on the inside. Existing design documentation makes this work much easier
    and more reliable, and the updated design should drive tracked changes to the
    document.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过定义一个狭窄的范围来处理设计迭代、冲刺和现有系统的重大修订，该范围对应着重新设计发生的地方。一旦你为新的设计工作划定了边界，设计中会有一些明确的前提条件，它们超出了该范围，而你可以自由地在内部重新做一切。现有的设计文档使这项工作变得更加轻松和可靠，而更新的设计应推动对文档的变更跟踪。
- en: It’s common, and often a good thing, for redesign to creep outside of its intended
    bounds, and when it does, you should adjust the scope as needed. For example,
    an incremental design change may require the modification of existing interfaces
    or data formats, and if the change involves handling more sensitive data, you
    may need to make changes on the other side of the interface due to the new security
    assumptions.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 重设计超出预定范围是常见的，通常也是一件好事，当这种情况发生时，你应该根据需要调整范围。例如，一个增量设计更改可能需要修改现有的接口或数据格式，如果更改涉及处理更敏感的数据，你可能需要根据新的安全假设在接口的另一端进行更改。
- en: Few software designs exist in a vacuum; they depend on existing systems, processes,
    and components. Ensuring that the design works well with its dependencies is critical.
    In particular, matching security expectations is key, because you cannot build
    a secure application out of insecure components. And it’s important to note that
    secure/insecure is not a binary choice; it’s a continuum, where the assumptions
    and expectations need to align. Read up on security design review reports for
    peer systems and dependencies to substantiate your security expectations for them.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 很少有软件设计是孤立存在的；它们依赖于现有的系统、流程和组件。确保设计与其依赖项协同工作至关重要。特别是，匹配安全期望是关键，因为你不能用不安全的组件构建一个安全的应用程序。并且需要注意，安全/不安全并不是一个二元选择；它是一个连续体，其中假设和期望需要对齐。阅读同类系统和依赖项的安全设计评审报告，以验证你的安全期望。
- en: Setting Security Requirements
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置安全要求
- en: 'Security requirements largely derive from the second of the Four Questions:
    “What can go wrong?” The C-I-A triad is a useful starting point: describe the
    need to protect private data from unauthorized disclosure (confidentiality), the
    importance of securing and backing up data (integrity), and the extent to which
    the system needs to be robust and reliable (availability). The security requirements
    of many software systems are straightforward, but it’s still well worth detailing
    them for completeness and to convey priorities. What may be entirely obvious to
    you may not be to others, so it’s a good idea to articulate the desired security
    stance.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 安全需求主要来源于四个问题中的第二个：“可能出错的地方是什么？”C-I-A三位一体是一个有用的起点：描述保护私人数据免受未经授权披露的需求（保密性），确保数据安全并进行备份的重要性（完整性），以及系统需要多大程度的鲁棒性和可靠性（可用性）。许多软件系统的安全需求是直接明了的，但仍然值得详细列出，以确保完整性并传达优先级。对你来说可能显而易见的事情，对其他人来说可能并非如此，因此明确所需的安全立场是一个好主意。
- en: 'One extreme to note is when security doesn’t matter—or at least, when someone
    thinks it doesn’t. That’s an important assumption to call out, because someone
    else on the team might be thinking that it certainly does matter (and you can
    imagine the circumstances under which such mismatched expectations will eventually
    come to light). If you are designing a prototype to process artificial dummy data,
    you can skip the security review, but document it so the code isn’t repurposed
    and used later with personal information. Another example of a low-security application
    might be the collection of weather data shared by several research groups: temperatures
    and other atmospheric conditions are free for anyone to measure, and disclosure
    is harmless.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一个需要注意的极端情况是，当安全性不重要——或者至少，有人认为它不重要时。这是一个需要特别指出的重要假设，因为团队中的其他人可能认为安全性确实很重要（你可以想象在这种期望不匹配的情况下，最终会出现什么情况）。如果你正在设计一个处理人工虚拟数据的原型，你可以跳过安全审核，但需要记录下来，以免代码后来被重新使用并涉及个人信息。另一个低安全性应用的例子可能是多个研究小组共享的天气数据收集：温度和其他大气条件是任何人都可以测量的，且公开这些数据是无害的。
- en: At the other extreme, security-critical software deserves extra attention and
    a careful enumeration of its security-related requirements. These will provide
    a focus for threat modeling, security review, and testing to ensure the highest
    level of quality. See the sample design document (Appendix A) for a basic example
    of how security requirements inform the design. Large systems subject to complex
    regulations may have tightly prescribed security requirements to ensure high levels
    of compliance, but that’s a specialized undertaking, out of scope for our purposes.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个极端，安全关键的软件应给予额外的关注，并仔细列举其与安全相关的需求。这些将为威胁建模、安全审查和测试提供焦点，确保最高水平的质量。请参见样本设计文档（附录A），了解安全需求如何影响设计的基本示例。受到复杂法规约束的大型系统可能有严格规定的安全要求，以确保高水平的合规性，但这是一个专业化的任务，超出了我们讨论的范围。
- en: 'For software designs with critical or unusual security requirements, consider
    the following general guidelines:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有关键或特殊安全需求的软件设计，请考虑以下一般指南：
- en: Express security requirements as end goals without dictating “how to.”
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将安全需求表达为最终目标，而不是规定“如何实现”。
- en: Consider all stakeholder needs. In particular, where these may be in conflict,
    it will be necessary to find a good balance.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑所有利益相关者的需求，特别是在这些需求可能发生冲突的情况下，需要找到一个良好的平衡点。
- en: Acknowledge acceptable costs and trade-offs for critical mitigations.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确认关键缓解措施的可接受成本和权衡。
- en: When there are unusual requirements, explain the motivation for them as well
    as their goals.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当有不寻常的需求时，解释它们的动机以及目标。
- en: Set security goals that are achievable, not mandates for perfection.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置可实现的安全目标，而不是完美的强制要求。
- en: 'The following extreme examples illustrate what requirements statements for
    systems with significant security needs might look like:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下极端示例展示了具有显著安全需求的系统要求声明可能是什么样的：
- en: '**At the National Security Agency, to protect the nation’s most sensitive secrets**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**在国家安全局，为了保护国家最机密的秘密**'
- en: System administrators will have extraordinary access to an enormous trove of
    top-secret documents, and given the threat to national security this represents,
    we must mitigate insider attacks to the highest degree possible. Specifically,
    an administrator capable of impersonating high-ranking officers with broad access
    authority could potentially exfiltrate many files, covering their tracks by making
    it look like numerous independent access events by many different principals.
    (Unofficial accounts of Edward Snowden’s tactics for exfiltrating NSA internal
    documents suggest that he used this sort of technique.)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 系统管理员将能访问大量极为机密的文件，考虑到这对国家安全构成的威胁，我们必须将内部攻击的风险降到最低。具体来说，能够冒充具有广泛访问权限的高级官员的管理员，可能会窃取大量文件，并通过伪造多个独立访问事件的记录，掩盖其行踪，给人一种由不同主体进行的多次独立访问的印象。（有非官方的报道指出，爱德华·斯诺登在窃取NSA内部文件时使用了这种技术。）
- en: '**The authentication server for a large financial institution**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**大型金融机构的认证服务器**'
- en: 'Compromise of the server’s private encryption key would completely undermine
    the security of all our internet-facing systems. While insider attacks are unlikely,
    operations personnel must *not* have plausible deniability. Requirements might
    include storing the key in a tamper-evident hardware device kept in a physically
    guarded location, and formal ceremonies for the creation and rotation of keys,
    with all accesses attended by at least two trusted persons. (Note: this includes
    “how to” as the most direct way of illustrating distribution of trust and the
    combination of overlapping physical and logical security.)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器的私有加密密钥一旦被泄露，将完全破坏我们所有面向互联网的系统的安全性。尽管内部攻击的可能性较低，但操作人员必须*不能*拥有合理的否认能力。要求可能包括将密钥存储在防篡改硬件设备中，并保存在物理上有防护的地点，同时密钥的创建和更换过程必须经过正式仪式，并且所有访问必须由至少两名可信人员共同参与。（注意：这包括“如何做”，作为最直接的方式来说明信任分配及物理和逻辑安全的重叠结合。）
- en: '**Data integrity for an expensive scientific experiment**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**一项昂贵的科学实验的数据完整性**'
- en: We plan to do this experiment only once, and the funding required for it will
    not likely be available again for years, so we cannot afford to lose the information
    our instruments collect. Streaming data must be instantly replicated and stored
    redundantly on different storage media, while simultaneously being communicated
    over two distinct networks to physically separated remote storage systems as additional
    backup.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计划只进行一次这个实验，而且为此所需的资金可能多年都不会再有，因此我们无法承受失去仪器收集到的信息的风险。流数据必须立即复制，并冗余存储在不同的存储介质上，同时通过两条独立的网络传输到物理分离的远程存储系统，以提供额外的备份。
- en: Threat Modeling
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 威胁建模
- en: One of the best ways to improve the security of your software architecture is
    to incorporate threat modeling into the design process. Designing software involves
    creatively juggling competing requirements and strategies, iteratively deciding
    on some aspects of the system, and, at times, reversing course to progress toward
    a complete vision. Viewing the process through the lens of threat modeling can
    illuminate design trade-offs, so it has great potential to lead the designer in
    the right direction—but figuring out exactly how to achieve improved outcomes
    requires some trial and error.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 提高软件架构安全性的最佳方法之一是将威胁建模纳入设计过程。设计软件涉及创意性地平衡竞争的需求和策略，反复决定系统的某些方面，有时还需要倒退一步以推动整体愿景的实现。通过威胁建模的视角来看待这一过程，可以揭示设计中的权衡，因此它具有巨大的潜力，能引导设计师朝着正确的方向前进——但要准确找到如何实现更好的结果，需要一定的试错过程。
- en: First, there is the simplistic method for integrating threat modeling into software
    design. This involves concocting a series of potential designs, threat modeling
    each one in turn, scoring them by some kind of summary assessment, and then choosing
    the best one. In practice, these security-focused assessments inform other important
    factors, including usability, performance, and development cost. But since the
    effort involved in producing multiple designs and then threat modeling each one
    individually is prohibitive, designers often need to intuit which trade-offs offer
    promising possibilities, then compare the design alternatives by analyzing their
    differences rather than reassessing each from scratch.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，有一种将威胁建模集成到软件设计中的简化方法。这涉及到构思一系列潜在的设计方案，逐个进行威胁建模，用某种总结性评估对它们进行评分，然后选择最好的方案。在实践中，这些以安全为中心的评估会影响其他重要因素，包括可用性、性能和开发成本。但由于涉及到制作多个设计方案并逐一进行威胁建模的工作量过大，设计师通常需要凭直觉判断哪些权衡提供了有前景的可能性，然后通过分析它们的差异来比较设计替代方案，而不是从头开始重新评估每一个。
- en: In the early stages of software system design, pay careful attention to trust
    boundaries and attack surfaces, as these are critical for establishing an architecture
    amenable to security. Data flows of sensitive information should, as much as possible,
    be kept away from the most exposed parts of the topology. For example, consider
    an application for traveling sales staff who need offline access to customer contact
    information in order to make sales calls on the road. Putting the entire customer
    database in each mobile device would represent a huge risk of exposure, yet arguably
    would be necessary if staff travel to remote locations without good connectivity.
    Threat modeling would highlight this risk, spurring you to evaluate alternatives.
    Perhaps only regional subsets of the database would suffice, dynamically updated
    as the reps change location or based on travel schedule; or, instead of supplying
    customer phone numbers, each salesperson might get a code for each customer that
    they can use together with a unique PIN to place calls via a forwarding service,
    so there is no need for them to have access to the phone numbers at all.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件系统设计的早期阶段，务必注意信任边界和攻击面，因为这些对于建立一个适合安全的架构至关重要。敏感信息的数据流应尽可能远离拓扑结构中最暴露的部分。例如，考虑一个需要离线访问客户联系信息的外勤销售人员应用，以便他们在外出拜访时进行销售电话。如果将整个客户数据库放入每个移动设备中，将会带来极大的暴露风险，但如果销售人员前往没有良好网络连接的偏远地区，这可能是必要的。威胁建模将突显这一风险，促使你评估替代方案。也许只需要数据库的区域性子集，随着销售代表的位置变化或根据旅行安排动态更新；或者，销售人员可以获得每个客户的代码，配合独特的PIN号码，通过转接服务拨打电话，这样就不需要访问客户的电话号码了。
- en: Designers should also consider the *essential threat model*of the software they
    are building as a kind of baseline from which to gauge alternative designs. By
    this I mean a model of the security risk inherent in the idealized design, no
    matter how it’s built. For example, if a client/server system is collecting personally
    identifiable information (PII) from the client, there is an unavoidable security
    risk of that information being exposed by the client, in transit, or on the server
    that processes the data. No design magic will make any of those risks disappear,
    though they often call for suitable mitigations.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 设计师在构建软件时，应将*基本威胁模型*视为一种基准，从中衡量替代设计。我所指的，是对理想化设计中固有的安全风险的模型，无论它是如何构建的。例如，如果一个客户端/服务器系统正在收集客户端的个人身份信息（PII），那么这些信息在客户端、传输过程中或在处理数据的服务器上暴露的安全风险是不可避免的。没有任何设计上的“魔法”能够消除这些风险，尽管它们通常需要适当的缓解措施。
- en: When the inherent security risk is high, designers should consider alternatives
    whenever possible. Continuing with the PII example, is it really necessary to
    collect all (or any) of that information for all use cases? If not, then it may
    well be worth the effort of supporting subcases that avoid some of the information
    collection at the source.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当固有的安全风险较高时，设计师应尽可能考虑替代方案。继续以PII为例，是否真有必要为所有用例收集所有（或任何）这些信息？如果没有，那么支持一些避免从源头收集某些信息的子用例，可能会非常值得。
- en: Another way that an essential threat model guides design is by highlighting
    sources of additional risk that arise out of design decisions. An example of such
    an effect might be choosing to add a caching layer for sensitive data in an attempt
    to improve response time. The additional storing of data (potentially an asset
    that attackers would target) necessarily adds new risk, especially if the cache
    store is near an attack surface. This illustrates how changes to the design always
    modify the threat model—for better or for worse—and with an understanding of the
    security impact, designers can weigh the merits of alternatives wisely.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的威胁模型引导设计的方式是通过突出设计决策中可能引入的额外风险。例如，选择为敏感数据添加缓存层以提高响应时间，可能会带来额外的风险。额外存储数据（可能是攻击者会针对的资产）必然增加新的风险，尤其是当缓存存储接近攻击面时。这说明设计的变化总是会改变威胁模型——无论是更好还是更糟——理解安全影响后，设计人员可以明智地权衡替代方案的优缺点。
- en: Good software design, in the end, depends on subjective judgments. These balance
    the various factors involved to find, if not the best, then at least a satisfactory
    result. As important as security is, it isn’t everything, so difficult decisions
    are inevitable. Over the years I have found that, as scary as it may be at times,
    it’s much more productive to remain open to discussions of compromise rather than
    declare security concerns preeminent.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，好的软件设计依赖于主观判断。这些判断平衡了涉及的各种因素，以找到一个如果不是最好的，至少是令人满意的结果。尽管安全性很重要，但它不是唯一的考虑因素，因此困难的决策是不可避免的。多年来，我发现，尽管有时它可能会让人害怕，但保持开放心态讨论妥协远比宣称安全问题至上来得更有效。
- en: 'When the costs of maximizing security are low, it’s easy to push for doing
    so—but this isn’t always the case. When compromise is necessary, here are some
    good strategies to keep in mind:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当最大化安全的成本较低时，推动这种做法很容易——但情况并不总是如此。当妥协是必要时，以下是一些值得牢记的好策略：
- en: Design for flexibility so that adding security protections later will be easy
    to do (that is, don’t paint yourself into an insecure corner).
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计时要考虑灵活性，以便后续能够轻松添加安全保护（也就是说，不要把自己困在不安全的角落里）。
- en: If there are specific attacks that are of special concern, instrument the system
    to facilitate monitoring for instances of attempted abuse.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有特定的攻击特别需要关注，可以对系统进行监控，以便于发现滥用的尝试。
- en: When usability conflicts with security, explore user interface alternatives.
    Also, prototype and measure usability under realistic situations; sometimes usability
    concerns are imaginary and do not manifest in practice.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当可用性与安全性冲突时，探索用户界面替代方案。同时，在现实情况下对可用性进行原型设计和测量；有时可用性问题是想象出来的，实际上并没有表现出来。
- en: Explain security risks with potential scenarios (derived from threat models)
    that illustrate major possible downsides of certain designs, and use these to
    demonstrate the cost of not implementing mitigations.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过潜在场景（源自威胁模型）解释安全风险，这些场景说明了某些设计的主要潜在缺点，并利用这些场景展示不实施缓解措施的成本。
- en: Building in Mitigations
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建缓解措施
- en: 'After you’ve defined the software system’s scope and security requirements,
    answering the first two of the Four Questions, it’s time to consider the third:
    “What are we going to do about it?” This question guides the designer to incorporate
    the needed protections and mitigations into the design. In the following subsections
    we will examine how to do this for interfaces and for data, two of the most common
    recurring themes in software design. The discussion and examples that follow only
    scratch the surface of possibilities for mitigations in design. All of the ideas
    in the preceding three chapters can be applied according to the needs of a particular
    design.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了软件系统的范围和安全需求，回答了四个问题中的前两个之后，是时候考虑第三个问题：“我们该怎么做？”这个问题引导设计人员将所需的保护和缓解措施融入设计中。在接下来的子章节中，我们将探讨如何针对接口和数据这两个在软件设计中最常见的主题进行缓解措施的设计。接下来的讨论和示例仅触及设计缓解措施的表面。前三章中的所有想法可以根据具体设计的需求进行应用。
- en: Designing Interfaces
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设计接口
- en: Interfaces define the boundaries of the system, delineating the limits of the
    design or of its constituent components. They may include system calls, libraries,
    networks (client/server or peer-to-peer), inter- and intraprocess APIs, shared
    data structures in common datastores, and more. Complex interfaces, such as secure
    communication protocols, often deserve their own design.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接口定义了系统的边界，划定了设计或其组成组件的限制。它们可能包括系统调用、库、网络（客户端/服务器或点对点）、进程间和内进程 API、共享数据结构以及常见数据存储中的更多内容。复杂的接口，如安全通信协议，通常需要单独的设计。
- en: Define all interfaces within the scope of the design, making sure you have a
    clear understanding of the security responsibilities of the components that share
    it. Document whether inputs are reliably validated or should be treated as untrusted
    data. If there is a trust boundary, explain how to handle authentication and authorization
    for crossing it.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 定义设计范围内的所有接口，确保你清楚了解共享接口的组件的安全责任。记录输入是否得到可靠验证，或者应将其视为不可信数据。如果存在信任边界，说明如何处理身份验证和授权以跨越该边界。
- en: Interfaces to external components (those scoped outside of the design) should
    conform to the existing design specifications for those components. If no such
    information is available, either document your assumptions or consider defensive
    tactics to compensate for the uncertainty. For example, assume untrusted inputs
    if you cannot ascertain whether the input is being validated.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 外部组件的接口（设计范围外的组件）应遵循这些组件的现有设计规范。如果没有相关信息可用，要么记录你的假设，要么考虑采取防御策略来弥补不确定性。例如，如果无法确认输入是否被验证，则假定其为不可信输入。
- en: To design secure interfaces, begin with a solid description of how they work,
    including their necessary security properties (that is, C-I-A, Gold Standard,
    or privacy requirements). Reviewing the security of the interfaces amounts to
    verifying that they will function properly and remain robust against potential
    threats. Unless the designer is clear about the security requirements, the security
    reviewer (and developers using the interface later) will have to guess at the
    designer’s intentions, and there will be confusion if they either under- or overestimate
    the requirements.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 设计安全接口时，首先需要明确描述它们的工作方式，包括必要的安全属性（即 C-I-A、金标准或隐私要求）。审查接口的安全性相当于验证它们是否能够正常工作，并保持对潜在威胁的强大抵抗力。除非设计师明确安全要求，否则安全审查员（以及后续使用该接口的开发者）将不得不猜测设计师的意图，如果低估或高估了要求，可能会引起混淆。
- en: Sometimes, you are stuck using existing components that weren’t designed with
    security in mind or are not sufficiently secure for your requirements—or you just
    don’t know how secure the components are. Flag this as an issue if you have no
    choice in the matter and, if possible, do research to find out what you can about
    the components’ security properties (this might include trying to attack a test
    mock-up). Another option in some cases is to wrap the interface to add security
    protection. For example, given a storage component that is vulnerable to data
    leaks, you could design an extra layer of software that provides encryption and
    decryption, ensuring that the component stores only encrypted data, which is harmless
    if disclosed.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你不得不使用那些在设计时未考虑安全性或对你的要求安全性不足的现有组件——或者你根本不知道这些组件的安全性。如果你别无选择，请将其标记为问题，并尽可能做一些研究，了解有关这些组件安全性的信息（这可能包括尝试攻击测试样本）。在某些情况下，另一个选择是包装接口以增加安全保护。例如，给定一个容易泄露数据的存储组件，你可以设计一个额外的软件层，提供加密和解密，确保该组件仅存储加密数据，即使泄露也不会造成危害。
- en: Designing Data Handling
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据处理设计
- en: Data handling is central to virtually all designs, so securing it is an important
    step. A good starting point for secure data handling is outlining your data protection
    goals. When a particular subset of data requires extra protection, make that explicit,
    and ensure it’s handled consistently throughout the design. For example, in an
    online shopping application, apply additional safeguards to credit card information.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 数据处理是几乎所有设计的核心，因此确保数据安全是一个重要步骤。确保数据安全处理的一个良好起点是概述你的数据保护目标。当某一特定数据子集需要额外保护时，要明确指出，并确保在整个设计中一致处理。例如，在在线购物应用中，对信用卡信息应用额外的保护措施。
- en: Limit the need to move sensitive data around. This is a key opportunity to reduce
    your risk exposure in a significant way at the design level (see the “Least Information”
    pattern in Chapter 4) that often isn’t possible to do later in implementation.
    One way to reduce the need to pass data around is to associate it with an opaque
    identifier, then use the identifier as a handle that, when necessary, you can
    convert into the actual data. For example, as in the sample design in Appendix
    A, you can log transactions using such an identifier to keep customer details
    out of system logs. In the rare case that a log entry needs investigation, an
    auditor can look up those details.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 限制敏感数据流动的需求。这是一个在设计阶段显著减少风险暴露的关键机会（参见第4章中的“最少信息”模式），通常在后续的实施阶段难以做到。减少数据传输需求的一种方法是将数据与一个不透明的标识符关联，然后将标识符作为句柄，在必要时将其转换为实际数据。例如，在附录A中的示例设计中，你可以使用这种标识符来记录交易，从而将客户细节隔离在系统日志之外。在需要调查日志条目的少数情况下，审计员可以查找相关细节。
- en: Identify public information, or data otherwise exempt from any confidentiality
    requirement. This forms an important exception to data handling requirements,
    allowing you to relax protections where that makes sense. In applying such an
    approach, remember that data is context-sensitive, so public data paired with
    other information might well be sensitive. For example, the addresses of most
    businesses and the names of their chief executives are usually public information.
    However, exactly when named persons are on the premises should be kept private.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 确定公共信息或任何其他不受保密要求约束的数据。这是数据处理要求的一个重要例外，允许在合适的情况下放宽保护措施。在应用这种方法时，记住数据是具有上下文敏感性的，因此公开的数据与其他信息结合时可能变得敏感。例如，大多数企业的地址和其首席执行官的名字通常是公共信息。然而，哪些命名的人在场时应当保持私密。
- en: Always treat personal information as sensitive in the absence of an explicit
    decision otherwise, and only collect such data in the first place if there is
    a specific use for it. Storing sensitive data indefinitely creates an endless
    obligation to protect it. You can best avoid this by destroying disused information
    when possible (after a number of years of inactivity, for example). Designs should
    anticipate the need to eventually remove private data from the system when no
    longer needed and specify what conditions will trigger deletion, including of
    backup copies.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有明确决定的情况下，始终将个人信息视为敏感信息，只有在有特定用途时才收集此类数据。无限期存储敏感数据会产生无尽的保护义务。你可以通过在可能的情况下销毁不再使用的信息来避免这种情况（例如，在若干年没有使用后）。设计应当预见到在不再需要时最终删除私密数据的需求，并明确哪些条件将触发删除，包括备份副本的删除。
- en: Integrating Privacy into Design
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将隐私融入设计
- en: Failures to protect private information make headlines routinely. I believe
    that integrating information privacy considerations into software design is an
    important way companies can do better. Privacy issues concern the human implications
    of data protection, involving not only legal and regulatory issues, but also customer
    expectations and the potential impact of unauthorized disclosures. Getting this
    right requires special expertise and subjective judgment. But part of the problem
    hinges on granting third parties the authorization to use data, which requires
    allowing access. To that extent, good software design can institute controls to
    minimize missteps.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 未能保护私人信息经常成为新闻头条。我相信，将信息隐私考虑融入软件设计是公司提升表现的重要方式。隐私问题涉及数据保护的人类影响，不仅包括法律和监管问题，还涉及客户期望和未经授权的披露可能带来的影响。要做到这一点，既需要专业的知识，也需要主观判断。但问题的部分关键在于授予第三方使用数据的权限，这需要允许访问。从这个角度看，良好的软件设计可以建立控制措施，以尽量减少失误。
- en: As a starting point, designers should be familiar with all applicable private
    policies and understand how these relate to the design. Ask questions and ideally
    get answers in writing from the privacy policy owner so that the requirements
    are clear. This includes any third-party privacy policy obligations that might
    apply to data acquired via partners. These privacy policies govern data collection,
    use, storage, and sharing, so if these activities happen within the design, the
    policy stipulations imply requirements. If the public-facing privacy policy is
    short on details, consider developing an internal version that describes necessary
    details.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 作为起点，设计师应该熟悉所有适用的隐私政策，并了解这些政策与设计的关系。提出问题，并最好从隐私政策的拥有者那里获得书面答复，以确保要求明确。这包括任何可能适用于通过合作伙伴获取的数据的第三方隐私政策义务。这些隐私政策规范数据的收集、使用、存储和共享，因此如果这些活动发生在设计中，政策条款就意味着需要遵守的要求。如果面向公众的隐私政策内容简略，考虑开发一个内部版本来描述必要的细节。
- en: Privacy lapses tend to happen when people or processes misinterpret the promises
    in the policy, or simply fail to consider them. Data security protections offer
    opportunities to build limitations into a design to ensure compliance. Start by
    considering clear promises the privacy policy makes, then ensure that the design
    enforces them if possible. For example, if the policy says, “We do not share your
    data,” then be wary of using a cloud storage service that makes sharing easy unless
    other provisions are in place to ensure that misconfigurations won’t expose the
    data.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 隐私失误通常发生在人员或流程误解政策中的承诺，或根本没有考虑这些承诺时。数据安全保护为设计中内建限制提供了机会，以确保合规性。首先考虑隐私政策作出的明确承诺，然后确保设计在可能的情况下执行这些承诺。例如，如果政策声明“我们不会共享你的数据”，那么除非采取其他措施确保配置错误不会暴露数据，否则应该谨慎使用便于共享的云存储服务。
- en: Auditing is an important tool for privacy stewardship, if only to reliably document
    proper access to sensitive data. With careful monitoring of accesses, problematic
    access and use can be detected and remedied early. In the aftermath of a leak,
    if there is no record of who had access to the data in question, it’s very difficult
    to respond effectively.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 审计是隐私管理的重要工具，即使仅仅是为了可靠地记录对敏感数据的适当访问。通过对访问的仔细监控，可以及早发现并修正问题访问和使用。在泄露发生后，如果没有记录谁访问了相关数据，那么就很难有效应对。
- en: 'Design explicit privacy protections wherever possible. In instances where you
    cannot make the judgment about privacy compliance, get the officer responsible
    for the privacy policy to sign off on the design. Some common techniques for integrating
    privacy in software design include:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在可能的情况下，设计明确的隐私保护措施。在无法判断隐私合规性的情况下，请让负责隐私政策的官员在设计上签字。一些常见的将隐私整合到软件设计中的技巧包括：
- en: Identify the collection of new types of data, and ensure its privacy policy
    compliance.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定新类型数据的收集，并确保其隐私政策的合规性。
- en: Confirm that policy allows you to use the data for the purpose you intend.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确认政策允许你出于预定目的使用数据。
- en: If the design potentially enables unlimited data use, consider limiting access
    only to staff that are familiar with privacy policy constraints and how to audit
    for compliance.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果设计可能允许无限制的数据使用，考虑将访问权限仅限于那些熟悉隐私政策限制并能够审核合规性的员工。
- en: If the policy limits the term of data retention, design a system that ensures
    timely deletion.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果政策限制数据保留的期限，设计一个确保及时删除的系统。
- en: As the design evolves, if a field in a database becomes disused, consider deleting
    it in order to reduce the risk of disclosure.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着设计的发展，如果数据库中的某个字段不再使用，考虑将其删除，以减少泄露的风险。
- en: Consider building in an approval process for data sharing to ensure the receiving
    parties have management approval.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑为数据共享建立审批流程，以确保接收方已获得管理层批准。
- en: Planning for the Full Software Life Cycle
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规划完整的软件生命周期
- en: Too many software designs implicitly assume that the system will last forever,
    ignoring the reality that the lifetime of all software is finite. Many aspects
    of a system’s eventual lifetime—from its first release and deployment, through
    updates and maintenance, to its eventual decommissioning—have important security
    implications that are easily missed later on. As wonderful as any software design
    might be, whether it takes off or fizzles out, it will undergo changes as its
    environment evolves. The impacts of these changes are best anticipated during
    the design process and addressed then, or at least noted for posterity. Within
    an enterprise, many of these issues are generic, and a general treatment of them
    should cover most systems, with exceptions specified as needed in individual designs.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 许多软件设计隐含地假设系统会永远存在，忽略了所有软件都有生命周期有限的现实。从系统的首次发布和部署，到更新和维护，再到最终的退役，系统生命周期的许多方面都具有重要的安全隐患，往往在后期容易被忽视。无论任何软件设计多么出色，无论它是取得成功还是失败，它都会随着环境的变化而经历变化。这些变化的影响最好是在设计过程中预见并加以解决，或者至少记录下来以备后续参考。在企业内部，许多这些问题是通用的，一般性处理应该能涵盖大多数系统，具体的例外则应在个别设计中做出说明。
- en: The end of a system’s life is difficult to imagine when the new design is being
    created, but most of the implications should be clear, and any design should at
    least consider the long-term disposition of data. Specific legal or business reasons
    may require you to retain data for a certain period of time, but you should destroy
    it when it is no longer needed, including backup copies. Some systems need to
    go through specific stages when approaching end of life, and good design can make
    this easy to get right by having suitable structure and configuration options
    in place from the start. For example, a purchasing system might stop accepting
    orders but need to continue providing data for payroll and record-keeping purposes
    for another year, then archive transaction records for long-term retention.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当新的设计正在创建时，很难想象系统生命周期的终结，但大多数影响应该是清晰的，任何设计至少应考虑数据的长期处理方式。特定的法律或商业原因可能要求你保留数据一段时间，但当数据不再需要时，你应该将其销毁，包括备份副本。一些系统在接近生命周期末期时需要经历特定阶段，良好的设计可以通过从一开始就有合适的结构和配置选项来简化这一过程。例如，一个采购系统可能停止接受订单，但仍需要继续提供数据用于薪资和记录保存目的，可能需要再保留一年，然后将交易记录归档以长期保存。
- en: Making Trade-offs
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做出权衡
- en: Balancing trade-offs when there are no easy choices requires a lot of engineering
    judgment, while weighing many other considerations. Implementing more security
    mitigations reduces risk, but only up to the point that complexity leads to more
    bugs overall—and you should always be wary of increased development effort with
    diminishing returns. This book will repeatedly advise designers to compromise
    between competing priorities, but this is easier said than done. This section
    covers some rules of thumb for striking these important balances.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有简单选择的情况下进行权衡取舍需要大量的工程判断，同时要权衡许多其他因素。实施更多的安全缓解措施可以减少风险，但只限于复杂性导致更多漏洞的前提下——你应该始终警惕开发投入增加而回报递减的现象。本书将一再建议设计人员在相互竞争的优先级之间做出妥协，但这说起来容易做起来难。本节将介绍一些用于做出这些重要平衡的经验法则。
- en: 'Anticipate the worst-case scenario: How bad would it be if you were to fail
    to protect the confidentiality, integrity, or availability of a particular system
    asset? For each scenario there are degrees of catastrophe to consider: How much
    of the data could potentially be affected? At what point does a period of unavailability
    become a serious issue? Major mitigations usually limit the worst case; for example,
    hourly backups should ensure that at most one hour of transaction data is at risk
    of loss. Note that a loss of confidentiality in the worst case is particularly
    difficult to cap, because once data has been purloined, there usually is no conceivable
    way to undo the disclosure (the 2017 Equifax breach is a striking example).'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 预见最坏的情况：如果无法保护某个系统资产的机密性、完整性或可用性，情况会有多糟糕？对于每种情境，都有不同程度的灾难需要考虑：数据可能受到多大程度的影响？在什么情况下，系统不可用的时间段会变成严重问题？主要的缓解措施通常会限制最坏情况的发生；例如，按小时备份应该能确保最多只有一个小时的交易数据面临丢失的风险。需要注意的是，在最坏情况下，机密性的丧失尤其难以界定，因为一旦数据被窃取，通常无法想象有任何方法能够撤销信息泄露（2017年Equifax数据泄露事件就是一个典型例子）。
- en: Most design work happens within an enterprise or project community where the
    level of security needed is usually consistent across a wide range of projects.
    Where a particular design might deviate—requiring either a higher or lower level
    of security—that assumption is well worth calling out in the design preface. Some
    examples will clarify this important point. An online store website should consider
    setting a higher security bar for the software that handles credit card processing,
    which is an obvious target of attack and is subject to special requirements because
    of the enormous financial liability. On the flip side, a web design company might
    put up an entire website that showcases examples of its design; since this would
    be for informational purposes only and never collect actual end user data, securing
    it would reasonably be less important.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数设计工作发生在企业或项目社区内，其中所需的安全级别通常在不同项目之间保持一致。对于某些特定的设计，可能需要偏离常规——要求更高或更低的安全级别——这种假设非常值得在设计前言中指出。一些例子可以帮助阐明这一点。一个在线商店网站应当考虑为处理信用卡支付的软件设定更高的安全标准，因为它是明显的攻击目标，并且由于其巨大的财务责任，受到特殊要求的约束。另一方面，一个网页设计公司可能会展示一个展示其设计案例的网站；由于该网站仅供信息展示，从不收集实际用户数据，因此其安全性要求合理地较低。
- en: The design phase represents the best opportunity to strike the right balance
    between competing demands on software. To be frank, rarely if ever is security
    fully supported as a top priority when there are schedule deadlines, constraints
    of budget and headcount, legacy compatibility issues, and the usual lengthy list
    of features to deal with—which is to say, nearly always. Designers are in the
    best position to consider many alternatives, including radical ones, and make
    foundational changes that would be infeasible to attempt later on.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 设计阶段是平衡软件中竞争需求的最佳时机。坦白说，安全性往往很难在面对时间表截止、预算和人力限制、遗留兼容性问题以及通常冗长的功能需求清单时，作为首要优先事项来全面支持——换句话说，几乎总是如此。设计人员最处于考虑多种替代方案（包括激进方案）并做出基础性更改的最佳位置，而这些改变后来再做将是不可行的。
- en: Striking the right balance between these idealized principles and the pragmatic
    demands of building a real-world system is at the heart of secure software design.
    Perfect security is never the goal, and there is a limit to the benefits of additional
    mitigations. Exactly where the sweet spot lies is never easy to determine, but
    software designs that make these trade-offs explicit have better chances of finding
    a sensible compromise.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些理想化原则与构建实际系统的务实需求之间找到正确的平衡，是安全软件设计的核心。完美的安全性从来不是目标，额外缓解措施的效益也是有限的。确切的平衡点往往难以确定，但那些能够明确这些权衡的设计更有可能找到一个合理的折衷方案。
- en: Design Simplicity
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计的简洁性
- en: Simplicity is the ultimate sophistication.
  id: totrans-107
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 简单即是终极的精致。
- en: ''
  id: totrans-108
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Leonardo da Vinci
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —列奥纳多·达·芬奇
- en: Ironically, as the da Vinci quote suggests, it often takes considerable thought
    and effort to produce a simple design. Early astronomers developed all manner
    of complicated calculations for celestial mechanics until Copernicus simplified
    the model by making the Sun the central reference point instead of the Earth,
    which in turn allowed Newton to radically simplify the computations by inferring
    the laws of gravity. My favorite example of brilliant software design is the heart
    of the *nix operating system, much of which remains in use to this day. The quest
    to create a beautifully simple design, even if rarely achieved, often directly
    contributes to better security.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 讽刺的是，正如达·芬奇的名言所暗示的，要想设计出一个简单的方案，往往需要大量的思考和努力。早期的天文学家为天体力学开发了各种复杂的计算，直到哥白尼通过将太阳作为中心参考点，而非地球，简化了模型，进而使牛顿能够通过推导重力定律来大大简化计算。我最喜欢的精彩软件设计例子是*nix操作系统的核心，其中很多部分至今仍在使用。追求创造出一个简洁美观的设计，即使很少实现，往往直接有助于提升安全性。
- en: 'In software design, simplicity appears in many guises, but there are no easy
    formulations of how to discover the simplest, most elegant design. Several of
    the patterns discussed in Chapter 4 embrace simplicity, such as Economy of Design
    and Least Common Mechanism. Any time security depends on getting some complicated
    decision or mechanism just right, be wary: see if there is a simpler way of achieving
    the same ends.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件设计中，简洁有许多不同的表现形式，但没有简单的公式可以发现最简洁、最优雅的设计。在第4章中讨论的几个模式倡导简洁，如设计经济性和最小共同机制。每当安全性依赖于将某些复杂的决策或机制做到完美时，务必小心：看看是否有更简单的方式达到相同的目的。
- en: When intricate functionality interacts with security mechanisms, the result
    often explodes with complexity. One study concluded that the 1979 failure at the
    Three Mile Island nuclear facility had no specific cause but was due to the immense
    complexity of the system, including its many redundant safety measures. Security
    can get in the way of what you are trying to do, and in turn, making it all secure
    gets trickier. The solution here is often to separate security from functionality
    and create a layered model, usually with security on the “outside” as a protective
    shell and all the functionality separately existing “inside.” However, when you
    design with a hard shell and “soft insides,” it becomes critical to enforce that
    separation. It’s relatively easy to design a secure moat around a castle, but
    in software, it’s easy to inadvertently open up a pathway to the inside that circumvents
    the outer protective layer.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当复杂的功能与安全机制相互作用时，结果往往会变得非常复杂。一项研究得出结论，1979年三里岛核电站事故没有特定原因，而是由于系统的极度复杂性，包括其许多冗余的安全措施。安全性可能会妨碍你正在做的事情，而与此同时，确保一切安全变得更加棘手。这里的解决方案通常是将安全性与功能分离，创建一个分层模型，通常是将安全性放在“外部”作为保护壳，所有功能则单独存在于“内部”。然而，当你设计一个硬壳和“软内芯”时，确保这种分离就变得至关重要。设计一个围绕城堡的安全护城河相对容易，但在软件中，很容易无意间打开一条通往内部的路径，从而绕过外部保护层。
- en: '7'
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Security Design Reviews
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 安全设计评审
- en: A good, sympathetic review is always a wonderful surprise.
  id: totrans-115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一次好的、富有同情心的评审总是一个令人惊喜的发现。
- en: ''
  id: totrans-116
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Joyce Carol Oates
  id: totrans-117
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —乔伊斯·卡罗尔·欧茨
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: One of the best ways to bake security into software is to separately review
    designs with your “security hat” on. This chapter explains how to apply the security
    and privacy design concepts discussed in the last chapter in a *security design
    review* *(SDR)*. Think of this process as akin to when an architect designs a
    building and an engineer then reviews the design to ensure that it’s safe and
    sound. Both the designer and the reviewer need to understand structural engineering
    and building codes, and by working together, they can achieve higher levels of
    quality and trust.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 将安全性嵌入软件的最佳方式之一是以“安全帽”身份单独审查设计。本章解释了如何在*安全设计评审*（*SDR*）中应用上一章讨论的安全性和隐私设计概念。可以将这个过程类比为建筑师设计建筑物后，工程师审查设计以确保其安全可靠。设计师和评审者都需要了解结构工程和建筑规范，通过共同合作，他们可以实现更高的质量和信任水平。
- en: Ideally, the security reviewer is someone not involved in the design work, giving
    them distance and objectivity, and also someone familiar with the systems and
    context within which the software runs and how it will be used. However, these
    are not firm prerequisites; reviewers less familiar with the design will tend
    to ask a lot more questions but can also do a fine job.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，安全评审员是没有参与设计工作的人员，这样可以保持距离和客观性，同时也是熟悉软件运行环境及其使用方式的人员。然而，这并不是硬性要求；对于不太熟悉设计的评审员来说，他们可能会问更多问题，但也能做得很好。
- en: Sharing these methods and encouraging more software professionals to perform
    SDRs themselves was one of my core goals in writing this book. You will almost
    certainly do a better SDR on the software systems that you work with and know
    well than someone with more security experience who is unfamiliar with those systems.
    This book provides guidance to help you with this task, and it’s my hope that
    in doing so it will contribute in some small way to raising the bar for software
    security.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 分享这些方法并鼓励更多的软件专业人员亲自进行SDR（安全设计评审）是我写这本书的核心目标之一。你几乎可以肯定地在自己熟悉的、工作中使用的软件系统上进行更好的SDR，而不是那些有更多安全经验但不熟悉这些系统的人。本书提供了帮助你完成这项任务的指南，我希望通过这样做，它能在某种程度上为提高软件安全水平做出小小的贡献。
- en: SDR Logistics
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SDR后勤
- en: Before presenting the methodology for an SDR, it’s important to give a little
    background and discuss some basic logistics. What purpose does an SDR serve? If
    we’re going to perform one, during what stage of the design process should this
    be done? Finally, I’ll give a few tips on preparation and the importance of documentation
    in particular.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍SDR的方法论之前，了解一些基本的背景和基本的后勤安排是很重要的。SDR的目的是为了什么？如果我们要进行SDR，它应该在设计流程的哪个阶段进行？最后，我会给出一些关于准备工作的小建议，特别是文档的重要性。
- en: Why Conduct an SDR?
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么要进行SDR？
- en: Having done a few hundred SDRs myself, I can report that it never feels like
    a waste of time. SDRs take only a tiny fraction of the total design time, and
    will either identify important improvements to enhance security or provide strong
    assurance that the design properly addresses security. Simple, straightforward
    designs are quick to review, and for larger designs the review process provides
    a useful framework for identifying and validating the major hotspots. Even when
    you review a design that ostensibly covers all the bases for security, it’s good
    due diligence to confirm this. And of course, when the SDR does turn up significant
    issues, the effort proves extremely worthwhile, because detecting these issues
    during implementation would be difficult and remedying them after the fact would
    be costly.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 做过几百次SDR后，我可以报告说，它从来不会让人觉得浪费时间。SDR只占总设计时间的极小一部分，要么可以发现重要的改进来增强安全性，要么能提供强有力的保证，确保设计能够正确处理安全问题。简单直接的设计很快就能评审，而对于较大的设计，评审过程提供了一个有用的框架，帮助识别和验证主要的安全隐患。即使是评审一个表面上看似已经涵盖所有安全要点的设计，确认这一点也是一种良好的尽职调查。当然，当SDR发现重大问题时，这项工作就变得极为值得，因为在实施阶段发现这些问题会很困难，而事后解决它们的成本则非常高。
- en: In addition, SDRs can yield valuable new insights, resulting in design changes
    unrelated to security. An SDR offers a great opportunity to involve diverse perspectives
    (user experience, customer support, marketing, legal, and so forth), with everyone
    pondering easily overlooked topics such as the potential for abuse and unintended
    consequences.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，SDR还可以带来有价值的新见解，从而导致与安全无关的设计变更。SDR提供了一个很好的机会，可以让不同的视角参与进来（如用户体验、客户支持、市场营销、法律等），每个人都能思考那些容易被忽视的话题，例如滥用的潜力和意外后果。
- en: When to Conduct an SDR
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 何时进行SDR
- en: Plan on performing an SDR when the design (or design iteration) is complete
    and stable, typically following the functional review, but before the design is
    finalized, since there may be changes needed. I strongly recommend against trying
    to handle security as part of the functional review, because the mindset and areas
    of focus are so different. Also, it’s important for everyone—not just the reviewer—to
    focus on security, and that’s difficult to do during a combined review when there’s
    a tendency to concentrate more on the workings of the designs.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 计划在设计（或设计迭代）完成且稳定时进行SDR，通常是在功能评审之后，但在设计最终确定之前，因为可能会需要做出更改。我强烈建议不要在功能评审中同时处理安全问题，因为思维方式和关注点差异太大。另外，确保每个人——不仅仅是评审者——都能专注于安全问题非常重要，而在功能评审和安全评审混合时，这一点就很难做到，因为大家的注意力往往集中在设计的工作原理上。
- en: Designs that are complicated or security-critical often benefit from an additional
    preliminary SDR, when the design is beginning to gel but still not fully formed,
    in order to get early input on major threats and overall strategy. The preliminary
    SDR can be less formal, previewing points of particular security interest (where
    you would expect to dig further) and discussing security trade-offs at a high
    level. Good software designers should always consider and address security and
    privacy issues throughout the design. To be clear, designers should *never* ignore
    security and rely on the SDR to fix those issues for them. They should always
    expect to be fully responsible for the security of their designs, with security
    reviewers in a support role helping to ensure that they do a thorough job. In
    turn, security reviewers shouldn’t pontificate, but instead clearly and persuasively
    present their findings to designers without judgment.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂或安全关键的设计通常会受益于一个额外的初步SDR，在设计开始成型但尚未完全完成时，提前获取对主要威胁和总体策略的反馈。初步SDR可以更为非正式，预览特定的安全关注点（你预计在这些地方深入挖掘）并从高层次讨论安全权衡。优秀的软件设计师应该始终在设计过程中考虑并解决安全和隐私问题。明确来说，设计师*绝不*应忽视安全问题，指望SDR来解决这些问题。他们应该始终对自己设计的安全性负责，安全审查者则在支持角色中协助确保他们做得足够彻底。反过来，安全审查者也不应当居高临下地讲授，而应当清晰且有说服力地向设计师呈现他们的发现，而不做评判。
- en: Documentation Is Essential
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文档至关重要
- en: Effective SDRs depend on up-to-date documentation so that all parties have an
    accurate and consistent understanding of the design under review. Informal word-of-mouth
    SDRs are better than nothing, but crucial details are easily omitted or miscommunicated,
    and without a written record, valuable results are easily lost. Personally, I
    always prefer having design documents to preview ahead of a meeting, so I can
    start studying the design in advance and not take up meeting time with learning
    what we are working on.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的SDR依赖于最新的文档，以便各方对正在审查的设计有准确、一致的理解。非正式的口头传达式SDR总比没有好，但重要的细节很容易被遗漏或误传，而没有书面记录的情况下，宝贵的成果也容易丢失。就个人而言，我总是更倾向于在会议前预览设计文档，这样我可以提前开始研究设计，而不是在会议中浪费时间去了解我们正在处理的内容。
- en: The quality of the design documentation is, in my experience, an invaluable
    aid in delivering a great SDR. Of course, thorough documentation may not be available
    in practice, and the case study beginning on page 122 talks about handling that
    situation as well. Any design document vaguely specifying to “store customer data
    securely,” for example, deserves a big red flag, unless it goes on to describe
    what that means and how to do that. Blanket statements without specifics almost
    always betray naivety and a lack of a solid understanding of security.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，设计文档的质量在交付一个优秀的SDR中是不可或缺的帮助。当然，实际操作中可能并没有完备的文档，而从第122页开始的案例研究讨论了如何处理这种情况。例如，任何设计文档模糊地指出“安全地存储客户数据”都应当引起极大的警惕，除非它进一步说明这是什么意思以及如何做到这一点。没有具体细节的笼统说法几乎总是表现出幼稚和对安全缺乏扎实理解的迹象。
- en: The SDR Process
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SDR过程
- en: The following explanation of the SDR process describes how I conducted them
    at a large software company with a formal, mandatory review process. That said,
    software design is practiced in countless different ways, and you can adapt the
    same strategies and analysis to less formal organizations.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下对SDR过程的解释描述了我在一家大型软件公司如何进行这些过程的，该公司有正式的、强制性的审查流程。话虽如此，软件设计有着无数种不同的实践方式，你可以将相同的策略和分析方法应用于不太正式的组织。
- en: 'Starting from a clear and complete design in written form, the SDR consists
    of six stages:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个清晰完整的书面设计开始，SDR包括六个阶段：
- en: '*Study* the design and supporting documents to gain a basic understanding of
    the project.'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*学习*设计和支持文档，以便对项目有一个基本的理解。'
- en: '*Inquire* about the design and ask clarifying questions about basic threats.'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*询问*设计并提出关于基本威胁的澄清问题。'
- en: '*Identify* the most security-critical parts of the design for closer attention.'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*识别*设计中最为安全关键的部分，以便重点关注。'
- en: '*Collaborate* with the designer(s) to identify risks and discuss mitigations.'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*合作*与设计师一起识别风险并讨论缓解措施。'
- en: '*Write* a summary report of findings and recommendations.'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*撰写*调查结果和建议的总结报告。'
- en: '*Follow up* with subsequent design changes to confirm resolution before signing
    off.'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*跟进*后续的设计更改，以确认问题已解决，然后再签字确认。'
- en: For small designs, you can often run through most of these in one session; for
    larger designs, break up the work by stage, with some stages possibly requiring
    multiple sessions to complete. Sessions dedicated to meeting with the design team
    are ideal, but if necessary the reviewer can work alone and then exchange notes
    and questions with the design team via email or other means.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 对于小型设计，你通常可以在一个会议中完成大部分工作；对于较大的设计，按阶段分解工作，一些阶段可能需要多次会议才能完成。专门与设计团队会面的会议是理想的，但如果有必要，审阅者可以独立工作，然后通过电子邮件或其他方式与设计团队交换笔记和问题。
- en: Everyone has a different style. Some reviewers like to dive in and do a “marathon.”
    I prefer (and recommend) working incrementally over several days, affording myself
    an opportunity to “sleep on it,” which is often where my best thinking happens.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人的风格都不同。有些审阅者喜欢直接深入，进行“马拉松式”的工作。我个人更倾向于（并推荐）分几天逐步进行，这样我可以有机会“过夜思考”，这通常是我最好的思考时刻。
- en: The following walkthrough of the SDR process explains each stage, with bullet
    points summarizing useful techniques. When you perform an SDR you can refer to
    the bullets for each stage as you work through the process.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是SDR过程的逐步讲解，解释了每个阶段，并列出了有用的技巧。你在执行SDR时可以参考每个阶段的要点，按照流程进行。
- en: 1\. Study
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1. 学习
- en: Study the design and supporting documents to gain a basic understanding of the
    software as preparation for the review. In addition to security know-how, reviewers
    ideally bring domain-specific expertise. Lacking that, try to pick up what you
    can, and stay curious throughout the process. Trade-offs are inherent in most
    security decisions, so a single-minded push for more and more security is likely
    to overdo things, and risk ruining the design in the process. To understand how
    too much security can be bad, think of a house designed solely to reduce the risk
    of fire. Built entirely of concrete, with one thick steel door and no windows,
    it would be costly as well as ugly, and nobody would want to live in it.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 研究设计和支持文档，以便为审阅做好准备，从而获得对软件的基本理解。除了安全知识外，审阅者理想情况下还应具备领域特定的专业知识。如果没有这方面的知识，尽量在过程中多了解一些，并保持好奇心。大多数安全决策都会涉及权衡，因此单纯地追求更多的安全可能会做得过头，甚至有可能在过程中毁掉设计。为了理解过多的安全如何适得其反，可以想象一座只为减少火灾风险而设计的房子。它完全由混凝土建成，只有一扇厚重的钢门，没有窗户，这样的房子不仅成本高昂，而且丑陋，没人愿意住在里面。
- en: 'In this preparatory stage:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个准备阶段：
- en: First, read the documentation to get a high-level understanding of the design.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，阅读文档，了解设计的高层次概况。
- en: Next, put on your “security hat” and go through it again with a threat-aware
    mindset.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，戴上你的“安全帽”，以威胁意识的心态重新审视设计。
- en: Take notes, capturing your ideas and observations for future reference.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记笔记，记录你的想法和观察，以备将来参考。
- en: Flag potential issues for later, but at this stage it’s premature to do much
    security analysis.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记潜在问题，但在这个阶段进行深入的安全分析为时过早。
- en: 2\. Inquire
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2. 询问
- en: Ask the designer clarifying questions to understand the basic threats to the
    system. For simpler designs that are readily understood, or when the designer
    has produced rock-solid documentation, you may be able to skip this stage. Consider
    it an opportunity to confirm your understanding of the design and to resolve any
    ambiguities or open questions before proceeding further. Reviewers certainly don’t
    need to know a design inside and out to be effective—that’s the designer’s job—but
    you do need a solid grasp of the broad outlines and how its major components interact.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 向设计师提出澄清性问题，了解系统的基本威胁。对于容易理解的简单设计，或者当设计师提供了非常完善的文档时，你可能可以跳过这一步。将其视为一个机会，在继续进行之前确认你对设计的理解，并解决任何模糊不清或未解答的问题。审阅者并不需要对设计了如指掌才能有效工作——那是设计师的工作——但你需要对设计的总体框架以及主要组件如何交互有一个扎实的了解。
- en: 'This stage is your opportunity to fill in gaps before digging in. Here are
    some pointers:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个在深入之前填补空白的机会。以下是一些建议：
- en: Ensure that the design document is clear and complete.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保设计文档清晰完整。
- en: If there are omissions or corrections needed, help get them fixed in the document.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有遗漏或需要修正的地方，帮助在文档中修复它们。
- en: Understand the design enough to be conversant, but not necessarily at an expert
    level.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解设计到足以能进行交流，但不一定要达到专家级别。
- en: Ask members of the team what they worry about most; if they have no security
    concerns, ask follow-up questions to learn why not.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 询问团队成员他们最担心的是什么；如果他们没有安全方面的担忧，问一些后续问题以了解为什么没有。
- en: There’s no need to limit the questions you ask as a security reviewer to strictly
    what’s in the design document. Understanding peer systems can be extremely helpful
    for gauging their impact on the design’s security. Omitted details can be hardest
    to spot. For example, if the design implicitly stores data without providing any
    details of how this is handled, ask about the storage and its security.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Identify
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Identify the security-critical parts of the design and zero in on them for
    close analysis. Work from basic principles to see through a security lens: think
    in terms of C-I-A, the Gold Standard, assets, attack surfaces, and trust boundaries.
    While these parts of the design deserve special attention, keep the security review
    focused on the whole for now, so as not to completely ignore the other parts.
    That said, it’s fine to skip over aspects of the design with little or no relevance
    to security.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: 'In this exploratory stage you should:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Examine interfaces, storage, and communications—these will typically be central
    points of focus.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Work inward from the most exposed attack surfaces toward the most valuable assets,
    just as determined attackers would.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluate to what degree the design addresses security explicitly.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If needed, point out key protections and get them called out in the design as
    important features.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4\. Collaborate
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Collaborate with the designer, conveying findings and discussing alternatives.
    Ideally, the designer and reviewer meet for discussion and go through the issues
    one by one. This is a learning process for everyone: the designer gets a fresh
    perspective on the design while learning about security, and the reviewer gains
    insights about the design and the designer’s intentions, deepening their understanding
    of the security challenges and the best mitigation alternatives. The joint goal
    is making the design better overall; security is the focus of the review, but
    not the only consideration. There’s no need to make final decisions on changes
    on the spot, but it is important to reach an agreement eventually about what design
    changes deserve consideration.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some guidelines for effective collaboration:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: As a reviewer, provide a security perspective on risks and mitigations where
    needed. This can be valuable even when the design is already secure, reinforcing
    good security practice.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider sketching a scenario illustrating how a security change could pay off
    down the line to help convince the designer of the need for mitigations.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offer more than a single solution to a problem when you can, and help the designer
    see the strengths and weaknesses of these alternatives.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accept that the designer gets the last word, because they are ultimately responsible
    for the design.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document the exchange of ideas, including what will or will not go into the
    design.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Expanding on “the last word”: in practice, this balance will depend on the
    organization and its culture, applicable industry standards, possible regulatory
    requirements, and other factors. In large or highly regimented organizations,
    the last word may involve sign-offs by multiple parties, including an architecture
    board, standards compliance officers, usability assessors, and executive stakeholders.
    When multiple approvals are required, designers must balance competing interests,
    so security reviewers should be especially conscientious of this dynamic and be
    as flexible as possible.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展“最后决定”：在实践中，这一平衡将取决于组织及其文化、适用的行业标准、可能的监管要求和其他因素。在大型或高度规范化的组织中，最后决定可能涉及多个方签字，包括架构委员会、标准合规官、可用性评估人员和执行利益相关者。当需要多方批准时，设计师必须平衡相互冲突的利益，因此安全评审员应特别关注这一动态，并尽可能灵活。
- en: 5\. Write
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5\. 写作
- en: 'Write an *assessment* *report* of the review findings and recommendations.
    The findings are the security reviewer’s assessment of the security of a design.
    The report should focus on potential design changes to consider, and an analysis
    of the security of the design as it stands. Any changes the designer has already
    agreed to should be prominently identified as such, and subject to later verification.
    Consider including priority rankings for suggested changes, such as this simple
    three-level scheme:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 撰写关于评审结果和建议的*评估* *报告*。结果是安全评审员对设计安全性的评估。报告应着重于可能需要考虑的设计变更，以及对现有设计安全性的分析。设计师已同意的任何变更应明确标出，并且需在后续进行验证。可以考虑为建议的变更提供优先级排名，例如这个简单的三层方案：
- en: '*Must*is the strongest ranking, indicating there should be no choice, and often
    implying urgency.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Must*是最强的排名，意味着应该没有选择，且通常暗示紧急性。'
- en: '*Ought* is intermediate: I use it to say that I, the reviewer, lean “Must”
    but that it’s debatable.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ought*是中等排名：我用它来表示我作为评审员倾向于“Must”，但这也是可以讨论的。'
- en: '*Should*is the weakest ranking for optional recommended changes.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Should*是针对可选推荐变更的最弱排名。'
- en: More precise rankings are difficult at the design stage, but if you want to
    try, Chapter 13 includes guidance on ways to systematically assign more fine-grained
    rankings for security bugs that can be readily adapted for this purpose.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计阶段，给出更精确的排名较为困难，但如果你想尝试，13章提供了关于如何系统地为安全漏洞分配更细化排名的指导，这些方法可以很容易地用于此目的。
- en: SDRs vary enough that I have never used a standardized template for the assessment
    report, but instead write a narrative describing the findings. I like to work
    from my own rough notes taken over the course of the review, with the final form
    of the report evolving organically. If you can hold all the details in your head
    reliably, then you may want to write up the report after the review meeting.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: SDRs 变化较大，因此我从未使用标准化的评估报告模板，而是编写描述发现结果的叙述。我喜欢根据自己在评审过程中做的粗略笔记来工作，报告的最终形式自然地演变。如果你能可靠地记住所有细节，可能会想在评审会议后再写报告。
- en: 'The following tips can also be used as a framework for the write-up:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 以下提示也可作为写作的框架：
- en: Organize the report around specific design changes that address security risks.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以具体的设计变更为中心组织报告，解决安全风险问题。
- en: Spend most of your effort and ink on the highest-priority issues, and proportionally
    less on lower priorities.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将大部分精力和文字投入到最高优先级问题上，对于较低优先级问题则相应减少。
- en: Suggest alternatives and strategies without attempting to do the designer’s
    job for them.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提出替代方案和策略，但不要试图替设计师做他们的工作。
- en: Prioritize findings and recommendations using priority rankings.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用优先级排名来确定发现问题和建议的优先顺序。
- en: Focus on security, but feel free to offer separate remarks for the designer’s
    consideration as well. Be more deferential outside the scope of the SDR, don’t
    nitpick, and avoid diluting the security message.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚焦于安全性，但也可以提供独立的意见供设计师参考。在SDR范围之外，保持更多的尊重，不要挑剔，避免稀释安全性信息。
- en: Separating the designer and reviewer roles is important, but in practice how
    this is done varies greatly depending on the responsibilities of each and their
    ability to collaborate. In your assessment report, avoid doing design work, while
    offering clear direction for needed changes so the designer knows what to do.
    Offer to review and comment on any significant redesign that results from the
    current review. As a rule of thumb, a good reviewer helps the designer see security
    threats and the potential consequences, as well as suggests mitigation strategies
    without dictating actual design changes. Reviewers who are too demanding often
    find that their advice is ineffective, even if it is correct, and they risk forcing
    designers into making changes that they do not fully understand or see the need
    for.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: You can skimp on writing up the report if this level of rigor feels too fussy,
    but the chances are good that you, or someone else working on the software, will
    later wish that the details had been recorded for future reference. At a bare
    minimum, I suggest taking the time to send an email summary to the team for the
    record. Even a minimal report should not just say “Looks good!” but should back
    that up with a substantive summary. If the design covered all the security bases,
    reference a few of the most important design features that security depends on
    to underscore their importance. In the case of a design where security is a non-factor
    (for example, I once reviewed an informational website that collected no private
    information), outline the reasoning behind that conclusion.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: The style, length, and level of detail in these reports varies greatly depending
    on the organizational culture, available time, number of stakeholders, and many
    other factors. When, as reviewer, you collaborate closely with the software designer,
    you may be able to incorporate needed provisions directly into the design document,
    rather than enumerating issues in need of change in a report. Even for small,
    informal projects, assigning separate designer and reviewer roles is worthwhile
    so there are multiple sets of eyes on the work, and to ensure that security is
    duly considered. However, even a solo design benefits from the designer going
    back over their own work with their security hat on for fresh perspective.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Follow Up
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow up on agreed design changes resulting from a security review to confirm
    they were resolved correctly. When the collaboration has gone well, I usually
    just check that documentation updates happened without looking at the implementation
    (and that approach has never backfired in my experience). In other circumstances,
    and subject to your judgment, reviewers may need to be more vigilant. Sign off
    on the review when it’s complete, including the verification of all necessary
    changes. Assigning the SDR in the project bug tracker is a great way to track
    progress reliably. Otherwise, use a more or less formal process if you prefer.
    Here are a few pointers for this final stage:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: For major security design changes, you might want to collaborate with the designer
    to ensure that changes are made correctly.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where opinions differ, the reviewer should include a statement of both positions
    and the specific recommendations that weren’t followed to flag it as an open issue.
    (“Managing Disagreement” on page 121 talks about this topic in more detail.)
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the best case, the designer looks to the reviewer as a security resource
    and will continue engaging as needed over time.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: Assessing Design Security
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we’ve covered the SDR process, this section delves into the thought
    processes behind conducting the review. The material in this book up to this point
    has given you the concepts and tools you need to perform an SDR. The foundational
    principles, threat modeling, design techniques, patterns, mitigations, crypto
    tools—it all goes into the making of a secure design.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Using the Four Questions as Guidance
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Four Questions used for threat modeling in Chapter 2 are an excellent guide
    to help you conduct an effective SDR. Explicit threat modeling is great if you
    have the time and want to invest the effort, but if you don’t, using the Four
    Questions as touchstones is a good way to integrate a threat perspective into
    your review. More detailed explanations will be given in the subsections that
    follow, but at the highest level, here is how these questions map onto an SDR:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '*What are we working on?*'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The reviewer should understand the high-level goals of the design as context
    for the review. *What’s the most secure way of accomplishing the goal?*
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*What can go wrong?*'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is where “security hat” thinking comes in, and where to apply threat modeling.
    *Did the design fail to anticipate or underestimate a critical threat?*
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*What are we going to do about it?*'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review what protections and mitigations you find in the design. *Can we respond
    in better ways to the important threats?*
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Did we do a good job?*'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assess whether the mitigations in the design suffice, if some might need more
    work, or if any are missing. *How secure is the design, and if lacking, how can
    we bring it up to snuff?*
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can use the Four Questions as a tickler while working on an SDR. If you’ve
    read the design document and noted areas of focus but don’t know exactly what
    you are looking for yet, run through the Four Questions—especially #2 and #3—and
    consider how they apply to specific parts of the design. From there, your assessment
    will naturally shift to #4\. If the answer isn’t “We’re doing just fine,” it likely
    suggests a good topic of discussion, or an entry you should include in the assessment
    report.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写SDR时，你可以使用“四个问题”作为提示。如果你已经阅读了设计文档，并注意到关注的领域，但尚不完全确定需要寻找什么内容，可以依次检查四个问题，特别是第2和第3个问题，并考虑它们如何适用于设计的具体部分。从那里，你的评估自然会转向第4个问题。如果答案不是“我们做得很好”，那么这很可能是一个值得讨论的主题，或者是你应当在评估报告中包含的内容。
- en: What Are We Working On?
  id: totrans-210
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 我们正在做什么？
- en: There are a few specific ways this question keeps you on track. First, it’s
    important to know the purpose of the design so you can confidently suggest cutting
    any part that incurs risk but is not actually necessary. Conversely, when you
    do suggest changes, you don’t want to break a feature that’s actually needed.
    Perhaps most importantly, you may be able to suggest an alternative to a risky
    feature that takes a new direction.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题有几种具体的方式帮助你保持正轨。首先，了解设计的目的非常重要，这样你可以自信地提出削减那些带来风险但实际上不必要的部分。相反，当你提出更改时，你不希望破坏实际上是必须的功能。或许最重要的是，你可能能够提出一种替代方案，以避免风险较大的功能并采取新的方向。
- en: For example, in the privacy space, if you’re reviewing a payroll system that
    collects personal information from all employees, you might identify a health
    question as particularly sensitive. If the data item in question is truly superfluous,
    then cutting it from the design is the right move. However, if it’s important
    to the business function the design serves, instead you can propose ways to stringently
    protect against disclosure of this data (such as early encryption, or deletion
    within a short time frame).
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在隐私领域，如果你在审查一个收集所有员工个人信息的薪资系统，你可能会发现健康问题特别敏感。如果相关数据项确实多余，那么从设计中删除它是正确的选择。然而，如果它对业务功能至关重要，你可以提出一些方法来严格保护这些数据的泄露（例如，早期加密，或在短时间内删除数据）。
- en: What Can Go Wrong?
  id: totrans-213
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 可能出错的地方？
- en: The review should confirm that the designer has anticipated the important threats
    that the system faces. And it’s not enough for the designer to be aware of these
    threats; they must have actually created a design that lives up to the task of
    withstanding them.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 审查应该确认设计者已经预见到系统面临的重要威胁。而且，仅仅知道这些威胁是不够的；设计者必须实际上创建一个能够应对这些威胁的设计。
- en: 'Certain threats may be acceptable and left unmitigated, and in this case, the
    reviewer’s job is to assess that decision. But it’s important to be sure that
    the designer is aware of the threat and chose to omit mitigation. If the design
    doesn’t say explicitly that this is what they are doing, note this in the SDR
    to double-check that it’s intentional. Also note the risk being accepted and explain
    why it’s tolerable. For example, you might write: “Unencrypted data on the wire
    represents a snooping threat. However, we determined that the risk is acceptable
    because the datacenter is physically secured, and there is no potential for exposure
    of PII or business-confidential data.”'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 某些威胁可能是可接受的，并且可以不加以缓解，在这种情况下，审查员的工作是评估这个决定。但是，重要的是要确保设计者意识到这个威胁，并选择省略缓解措施。如果设计中没有明确说明他们正在这么做，请在SDR中备注，以便再次确认这是故意的。同时，注明接受的风险并解释为什么它是可以容忍的。例如，你可以写道：“传输中的未加密数据构成了窃听威胁。然而，我们认为这个风险是可以接受的，因为数据中心已得到物理保护，且没有泄露个人身份信息或商业机密数据的潜在风险。”
- en: Try to anticipate future changes that might invalidate this decision to accept
    the risk. Building on the example just mentioned, you might add, “If the system
    moves to a third-party datacenter we should revisit this physical network access
    risk decision.”
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试预见未来可能会使接受风险的决策失效的变化。以刚才提到的例子为基础，你可以补充道：“如果系统迁移到第三方数据中心，我们应当重新审视这个物理网络访问风险的决策。”
- en: What Are We Going to Do About It?
  id: totrans-217
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 我们将如何处理它？
- en: 'Security protection mechanisms and mitigations should become apparent in the
    design as the reviewer studies it. Reviewers typically spend most of their time
    on the last two questions: identifying what makes the design secure and assessing
    how secure it is. One way of approaching this task is by matching the threats
    to the mitigations to see if all bases are covered. Pointing out issues arising
    from this question and confirming that the design is satisfactory are among the
    most important contributions of an SDR.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: 'If the design is not doing enough to mitigate security risks, then you should
    itemize what’s missing. To make this feedback useful, you need to explain the
    specific threats that are unaddressed, as well as why they are important, and
    perhaps provide a rough set of options for addressing each. For a number of reasons,
    I recommend against proposing specific remedies in an SDR. However, it’s great
    to offer help informally, and if asked, to collaborate with the designer to consider
    alternatives or even elaborate on design changes. For example, your feedback might
    say: “The monitoring API should not be exposed publicly because it discloses our
    website’s levels of use, which could give competitors an advantage. I recommend
    requiring an access key to authenticate requests to the RESTful API.”'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'When the design does provide a mitigation for a given threat, evaluate its
    effectiveness and consider whether there might be better alternatives. Sometimes,
    designers “reinvent the wheel” by building security mechanisms from scratch: good
    feedback would be to suggest using a standard library instead. If the design is
    secure but that’s achieved at a great performance cost, propose another way if
    you can. An example of this might be pointing out redundant security mechanisms,
    such as encrypting data that is sent over an encrypting HTTPS connection, and
    describing how to streamline the design.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Did We Do a Good Job?
  id: totrans-221
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This last question goes to the bottom line: Do you consider the design secure?
    Competent designers should have already addressed security, so much of the value
    of the SDR is in assuring that they saw the whole picture and anticipated the
    major threats. In my experience, SDRs quickly identify issues and opportunities,
    or at minimum suggest interesting trade-off decisions worth considering now (because
    later you won’t have the luxury of making changes so easily).'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: 'I recommend summarizing your overall appraisal of the whole design in one statement
    at the top of the report. Here are some examples of what that might look like:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: I found the design to be secure as is, and have no suggested changes.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The design is secure, but I have a few changes to suggest that would make it
    even more so.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I have concerns about the current design, and offer a set of recommendations
    to make it more secure.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the summary, if there are multiple subpar areas that require fixing, break
    those out and explain them one by one. If you can attribute the weakness to a
    specific part of the design, it will be easier for the designer to pinpoint the
    problem, see it clearly, and make the necessary remedies.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: Of course, no design is perfect, so in judging a design to be lacking, it’s
    important to be clear about what standard you are holding it to. This is difficult
    to express in the abstract, so a good approach is to point out specific threats,
    vulnerabilities, and consequences to make your case. It may be best to couch your
    assessment in terms of the security of a comparable product; for example, “Our
    main competitor claims to be ransomware-resistant as a major selling point, but
    this design is particularly susceptible to such attacks due to maintaining the
    inventory database locally on a computer that employees also use to surf the web.”
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Where to Dig
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It’s impractical to dig into every corner of a large design, so reviewers need
    to focus as quickly as possible on key areas that are security-critical. I encourage
    security reviewers to follow their instincts when deciding where to direct their
    efforts within the design. Begin by reading through the design and noting areas
    of interest according to your intuition. Next, go back to the areas of largest
    concern, study them more carefully, and collect questions to ask, letting potential
    threats and the Four Questions be your guide. Some of these leads will be more
    productive than others. If you do start down an unproductive path, you will usually
    realize this before long, so you can refocus your efforts elsewhere.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s fine to skim parts of the design that are extraneous to security and privacy,
    absorbing just enough to have a basic understanding of all the moving parts. If
    you locked yourself out of your home, you would know to check for an open window
    or unlocked door: nobody would spend time going over the entire exterior inch
    by inch. In the same way, it’s most effective to zero in on places in the design
    where you detect a hint of weakness, or focus closely on how the design protects
    the most valuable assets.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Keep an eye out for attack surfaces and give them due attention. The more readily
    available they are—anonymous internet exposure is the classic worst case—the more
    likely they are to be a potential source of attacks. Trust boundaries guarding
    valuable resources, especially when reachable from an attack surface, are the
    major generic feature of a design that reviewers should be sure to emphasize in
    their analysis. Sometimes valuable assets can be better isolated from external-facing
    components, but often the exposure is unavoidable. These are the kinds of factors
    that reviewers need to search out and assess throughout the process.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: Privacy Reviews
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Depending on your skill set and organizational responsibilities, you may want
    to handle information privacy within the scope of an SDR, or separately. Privacy
    feedback within an SDR should center on applicable privacy policies and how they
    relate to data collection, use, storage, and sharing within the scope of the design.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: A good technique is to run through the privacy policy and note passages that
    pertain to the design, then look for ways to protect against violations. As the
    previous chapter describes, the technical focus is on ensuring that the design
    is in compliance with policy. Get sign-offs from privacy specialists and legal
    for issues requiring more expertise.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing Updates
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once released, software seems to take on a life of its own, and over time, change
    is inevitable. This is especially true in Agile or other iterative development
    practices, where design change is a constant process. Design documents can easily
    become neglected along the way and, years later, lost or irrelevant. Yet changes
    to a software design potentially impact its security properties, so it’s wise
    to perform an incremental SDR update to ensure that the design stays secure.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: Design documents should be living documents that track the evolution of the
    architectural form of the software. Versioned documents are an important record
    of how the design has matured, or in some cases become convoluted. You can use
    these same documents as a guide to focus an incremental review on the precise
    set of changes (the design delta) since the previous SDR to update it. When there
    are changes to (or near) security-critical areas of the design, it’s often wise
    for the reviewer to follow up to ensure that no small but important details were
    omitted in the design document that might have significant impact. If the incremental
    review does turn up anything substantial, add that to the existing assessment
    report so it now tells the complete story. If not, just update the report to note
    what design version it covers.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Underestimating the impact of a “simple change” is a common invitation to a
    security disaster, and re-reviewing the design is a great way to proactively assess
    such impacts effectively. If the design change is so minor that a review is unnecessary,
    it’s also true that a reviewer could confirm right away that there is no security
    impact. For anything but a trivial design change, I would suggest that there is
    little to gain from skipping the SDR update, given the risk of missing this important
    safeguard.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Managing Disagreement
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whatever you do in life, surround yourself with smart people who’ll argue with
    you.
  id: totrans-241
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-242
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —John Wooden
  id: totrans-243
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An important lesson from my years of evangelizing security—learned the hard
    way, though obvious in hindsight—is that good interpersonal communication is critical
    to conducting successful SDRs. The analysis is technical, of course, but critiquing
    a design requires good communication and collaboration, so human factors are also
    key. Too often, security specialists, be they in-house or outsourced, get reputations
    (deservedly or not) of being hypercritical interlopers who are never satisfied.
    That perception subtly poisons interactions, not only making the work difficult,
    but adversely impacting the effectiveness of everybody’s efforts. We have to acknowledge
    this factor in order to do better.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: Communicate Tactfully
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SDRs are inherently adversarial, in that they largely consist of pointing out
    risks and potential flaws in designs in which people are often heavily invested.
    Once identified, design weaknesses often look painfully obvious in hindsight,
    and it’s easy for reviewers to slip into casting this as carelessness, or even
    incompetence—but it is *never* productive to communicate that way. Instead, treat
    the issues that do arise as teaching opportunities. Once the designer understands
    the problem, often they will lead the discussion into other productive areas the
    reviewer might have missed. Having someone point out a vulnerability in your own
    design is the best way there is to learn security.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: An SDR spent ruthlessly tearing apart a weak design with a one-sided lecture
    on the importance of maximizing security over everything else is unlikely to be
    productive (for reasons that should be obvious if you imagine yourself on the
    receiving end). While this does, unfortunately, sometimes happen, I don’t think
    it’s necessarily because the reviewers are mean, but rather because in focusing
    on the technical changes needed, it’s easy to forget about keeping the tone respectful.
    It’s well worth bending over backwards to maintain good will and reinforce that
    everybody is on the same team, bringing a diversity of perspectives and working
    toward the common goal of striking the right balance. Sports coaches frequently
    walk this same fine line, pointing out weaknesses they see (that they know opponents
    will exploit) without asking too much, in order to help their teams do the work
    necessary to play their best game. As Mark Cuban says, “Nice goes much further
    than mean.”
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: 'Getting along with people while delivering possibly unwelcome messages is,
    of course, desirable, but it is also much easier said than done. This is a technical
    software book, so I offer no self-help advice on how to win friends and influence
    developers. But the human factor is important enough—or more precisely, ignoring
    it potentially undermines the work enough—that it merits prominent mention. My
    fundamental guidance is simple: be aware of how you deliver messages and consider
    how others will receive them and likely respond. To show how this works for an
    SDR, I offer a true story, and a set of tips that I have come to rely on.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: 'Case Study: A Difficult Review'
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of my most memorable SDRs is a great object lesson in the importance of
    soft skills. It began with a painful email exchange I initiated just to get documentation
    and ask a few basic questions. The exchange made it immediately clear that the
    team lead viewed the SDR as a complete waste of time. On top of that, because
    they had been unaware of this product launch requirement, it had suddenly become
    an unwelcome new obstacle blocking the release they were working so hard toward.
    The first key takeaway from this story is the importance of recognizing the other
    participants’ perspective on the process, right or wrong, and adapting accordingly.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: 'What documentation I eventually got I found to be sloppy, incomplete, and considerably
    outdated. Directly pointing this out in so many words would have been unproductive
    and further soured the relationship. The second key point is that to spur improvement,
    work around the problem, and handle the SDR effectively, it’s more productive
    to use strategies like the following:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Suggest fixes or additions, including the security rationale behind each suggestion.
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When feasible, offer to help review documents, suggest edits, or anything else
    you can do to facilitate the process (but short of doing their job for them).
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Present preliminary SDR feedback as “my perspective” rather than as demands.
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use the “sandwich” method: begin with a positive remark, point out needed improvements,
    then close on a positive (such as how the changes will help).'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If your feedback is extensive, ask first how best to communicate it. (Don’t
    surprise them with a 97-bullet-point email, or by filing tons of bugs out of the
    blue.)
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explore all the leads that you notice, but limit your feedback to the most significant
    points. (Don’t be a perfectionist.)
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A good rule of thumb is that if missing information is going to be generally
    useful to many readers it’s worth documenting, but if it’s particular to your
    needs you should just ask the question less formally. (If necessary, you can include
    the details of the issue in the assessment report.)
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instead of complaining about or judging the quality of the documentation, find
    creative alternative ways to learn about the software, such as using an internal
    prototype if available, or perusing the code and code reviews. Asking to observe
    a regular team meeting can be a great way to learn about the design without taking
    up anyone’s time.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Over email, it felt like they were being rude, but when we finally met I could
    see that this was just a stressed-out lead developer. Instead of relying exclusively
    on the lead, I found another team member who was less stretched and was glad to
    answer my questions. To save time in preparing for the SDR meeting, I pursued
    only the questions that were important to resolve ahead of time, saving others
    for the meeting when I had a captive audience.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: 'Preparing for an SDR meeting is a balancing act. You shouldn’t go in cold with
    zero preparation, because the team may not appreciate having to describe everything,
    especially after providing you with documentation. Ahead of time, try to identify
    major components and dependencies you are unfamiliar with, and at least get up
    to speed enough to ask questions at the meeting. During preparation, a good practice
    is to jot down issues and questions, then to sort these into categories:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: Questions to ask in advance so you are ready to dig into security when you meet
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Questions you can find answers to yourself
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Topics best explored at the meeting
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Observations you will include in the assessment report that don’t need discussion
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the time we finally held a meeting, the lead engineer was overtly unhappy
    that the SDR was now the major obstacle to launching the product. The first meeting
    was a little rocky, but we made good progress, with everyone staying focused.
    After a few more meetings (which gradually became easier and shorter each time),
    I signed off on the design. We agreed on a few changes at the first meeting, but
    confirming the details and meeting to finalize them was an important assurance
    to all. If you don’t take the time to confirm that needed changes to the design
    get made, it’s easy for a miscommunication to slip through the cracks.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: It’s never easy to convince busy people that you are helping them by taking
    up their time, and *telling* them so rarely works. However, flagging even small
    opportunities to improve security and *showing* how these contribute to the final
    product is a great way to reach a mutually satisfactory result.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: By the completion of the SDR, the product team had a far better understanding
    of security—and by extension, of their own product. In the end, they did see the
    value of the review, and acknowledged that the product had been improved as a
    result. Better yet, for version two, the team proactively reached out to me and
    we sailed through the update SDR with flying colors.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: Escalating Disagreements
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the designer and reviewer fail to reach consensus, they should agree to
    disagree. If the issue is minor, the reviewer can simply note the point of disagreement
    in the assessment report and defer to the designer. In such cases, make the disagreement
    explicit, perhaps in a section called “Recommendations Declined,” explaining the
    suggested design change and why you recommended it, as well as the potential consequences
    of not making the change. However, if there is a serious dispute about a major
    decision, the reviewer should escalate the issue.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: In this case both the designer and the reviewer should write up their positions,
    starting with an attempt at identifying some common starting ground that they
    do agree on, and exchange drafts so everyone knows both perspectives. Their respective
    positions combine to form a memo explaining the risk, along with proposed outcomes
    and their costs. This memo supplements the assessment report and serves as the
    basis for a meeting, or as a guide for management to decide how to proceed. The
    results of the final decision, along with the escalation memo, should go into
    the assessment report.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: Over many years of conducting security reviews, I have never had occasion to
    escalate an issue, but I have come close a few times. Strong disagreement almost
    always originates from a deep split in basic assumptions that, once identified,
    usually leads to resolution. Such differences often stem from implicit assumptions
    about the software’s use, or what data it will process. In actual practice, how
    software gets used is extremely hard to control, and over time use cases usually
    evolve, so leaning to the safe side is usually the best course.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: 'Another major cause of disconnect happens when the designer fails to see that
    data confidentiality or integrity matters, usually because they are missing the
    necessary end user perspective or not considering the full range of possible use
    cases. One more important factor to consider is this: Hypothetically, if we changed
    our minds after release, how much harder would the change be to make at that stage?
    Nobody wants to say “I told you so” after the fact, but putting the opposing conditions
    in writing is usually the best way to make the right choice.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Practice, Practice, Practice
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To solidify what you have learned in this chapter and truly make it your own,
    I strongly encourage readers to take the leap, find a software design, and perform
    an SDR for it. If there is no current software design in your sphere of interest
    just now, choose any available existing design and review it as an exercise. If
    the software you chose has no formal written design, start by creating a rough
    representation of the design yourself (it doesn’t have to be a complete or polished
    document, even a block diagram will do), and review that. Generally, it’s best
    to start with a modest-sized design so you don’t get in over your head, or carve
    out a component from a large system and review just that part. Having read this
    far should have prepared you to begin. You can start by doing quick reviews for
    your own use if you don’t feel confident enough yet to share your assessment reports.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: As you acquire the critical skills of SDR, you can apply them to any software
    you encounter. Studying lots of designs is a great way to learn about the art
    of software design—both by seeing how the masters do it and by spotting mistakes
    that others have made—and practicing applying them in this way is an excellent
    exercise to grow your skills.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: An especially easy way to start is to review the sample design document in Appendix
    A. The security provisions are highlighted, to provide a realistic example of
    what to look for in designs. Read the design, noting the highlighted portions,
    and then imagine how you would identify and supply those security-related details
    if they were missing. For a greater challenge, look for additional ways to make
    the design even more secure (by no means do I claim or expect it to be a flawless
    ideal!).
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: With each SDR, you will improve your proficiency. Even when you don’t find any
    significant vulnerabilities, you will enhance your knowledge of the design, as
    well as your security skills. There certainly is no shortage of software in need
    of security attention, so I invite you to get started. I believe how quickly you
    acquire this valuable skill set will surprise you.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
