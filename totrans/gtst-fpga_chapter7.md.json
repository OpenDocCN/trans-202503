["```\n[Synth 8-327] inferring latch for variable 'o_test' [test_program.vhd:19]\n```", "```\n** Error: (vlog-13069) design.v(5): near \"endmodule\": syntax error,\nunexpected endmodule, expecting ';' or ','.\n```", "```\n** Error: design.vhd(5): near \"end\": (vcom-1576) expecting ';'.\n```", "```\nassert false report \"Hello World\" severity note;\n```", "```\nalways @(posedge i_Clk)\n  begin\n    r_Shift[1] <= r_Shift[0];\n    r_Shift[2] <= r_Shift[1];\n    r_Shift[3] <= r_Shift[2];\n  end\n```", "```\nprocess (i_Clk)\nbegin\n  if rising_edge(i_Clk) then\n    r_Shift(1) <= r_Shift(0);\n    r_Shift(2) <= r_Shift(1);\n    r_Shift(3) <= r_Shift(2);\n  end if;\nend process;\n```", "```\nalways @(posedge i_Clk)\n  begin\n  ❶ for(i=0; i<3; i=i+1)\n     ❷ r_Shift[i+1] <= r_Shift[i];\n  end\n```", "```\nprocess (i_Clk)\nbegin\n  if rising_edge(i_Clk) then\n  ❶ for i in 0 to 2 loop\n     ❷ r_Shift(i+1) <= r_Shift(i);\n     end loop;\n  end if;\nend process;\n```", "```\nfor (i=0; i<10; i++)\n  data[i] = data[i] + 1;\n```", "```\nalways @(posedge i_Clk)\n  begin\n  ❶ if (r_Index < 10)\n      begin\n      ❷ r_Data[r_Index] <= r_Data[r_Index] + 1;\n      ❸ r_Index         <= r_Index + 1;\n      end\n  end\n```", "```\nprocess (i_Clk)\nbegin\n  if rising_edge(i_Clk) then\n  ❶ if r_Index < 10 then\n     ❷ r_Data(r_Index) <= r_Data(r_Index) + 1;\n     ❸ r_Index         <= r_Index + 1;\n     end if;\n  end if;\nend process;\n```", "```\nmodule timing_error\n  (input            i_Clk,\n  input [7:0]       i_Data,\n  output reg [15:0] o_Data);\n  reg [7:0] r0_Data = 0;\n  always @(posedge i_Clk)\n  begin\n     r0_Data <= i_Data;\n  ❶ o_Data  <= ((r0_Data / 3) + 1) * 5;\n  end\nendmodule\n```", "```\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\nentity timing_error is\n  port (\n    i_Clk  : in std_logic;\n    i_Data : in unsigned(7 downto 0);\n    o_Data : out unsigned(15 downto 0));\nend entity timing_error;\narchitecture RTL of timing_error is\n  signal r0_Data : unsigned(7 downto 0);\nbegin\n  process (i_Clk) is\n  begin\n    if rising_edge(i_Clk) then\n       r0_Data <= i_Data;\n    ❶ o_Data <= ((r0_Data / 3) + 1) * 5;\n    end if;\n  end process;\nend RTL;\n```", "```\n`--snip--`\n4.1::Critical Path Report for i_Clk\n***********************************\nClock: i_Clk\n❶ Frequency: 89.17 MHz | Target: 100.00 MHz\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n❷ Path Begin : r0_Data_fast_5_LC_1_9_5/lcout\n❸ Path End : o_DataZ0Z_7_LC_5_12_5/in3\nCapture Clock : o_DataZ0Z_7_LC_5_12_5/clk\nSetup Constraint : 10000p\n❹ Path slack : -1215p\n`--snip--`\n```", "```\nmodule timing_error\n  (input            i_Clk,\n  input [7:0]       i_Data,\n  output reg [15:0] o_Data);\n  reg [7:0] r0_Data, r1_Data, r2_Data = 0;\n  always @(posedge i_Clk)\n  begin\n     r0_Data <= i_Data;\n  ❶ r1_Data <= r0_Data / 3;\n  ❷ r2_Data <= r1_Data + 1;\n  ❸ o_Data  <= r2_Data * 5;\n  end\nendmodule\n```", "```\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\nentity timing_error is\n  port (\n    i_Clk  : in  std_logic;\n    i_Data : in  unsigned(7 downto 0);\n    o_Data : out unsigned(15 downto 0));\nend entity timing_error;\narchitecture RTL of timing_error is\n  signal r0_Data, r1_Data, r2_Data : unsigned(7 downto 0);\nbegin\n  process (i_Clk) is\n  begin\n    if rising_edge(i_Clk) then\n       r0_Data <= i_Data;\n    ❶ r1_Data <= r0_Data / 3;\n    ❷ r2_Data <= r1_Data + 1;\n    ❸ o_Data  <= r2_Data * 5;\n    end if;\n  end process;\nend RTL;\n```", "```\n`--snip--`\n4.1::Critical Path Report for i_Clk\n***********************************\nClock: i_Clk\nFrequency: 110.87 MHz | Target: 100.00 MHz\n`--snip--`\n```", "```\nalways @(posedge i_Fast_Clk)\n  begin\n  ❶ r1_Data <= i_Slow_Data;\n  ❷ r2_Data <= r1_Data;\n  end\n```", "```\nprocess (i_Fast_Clk) is\nbegin\n  if rising_edge(i_Fast_Clk) then\n  ❶ r1_Data <= i_Slow_Data;\n  ❷ r2_Data <= r1_Data;\n  end if;\nend process;\n```"]