- en: Chapter 13. Debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I’ve been told that not all developers are perfect like you and me. We never
    make mistakes in our code, but sometimes *other* developers make mistakes that
    we have to clean up. When that happens, the debugging features built into Rails
    come in handy. This chapter covers those built-in debugging features, starting
    with the `debug` helper method, which makes it easier to see the values of variables
    in your application’s views.
  prefs: []
  type: TYPE_NORMAL
- en: We spent some time looking at the Rails log in previous chapters. In this chapter,
    you’ll also see how to add your own messages to that log. Finally, using the debugger
    gem, you can step inside your application as it’s running to track down really
    tough bugs.
  prefs: []
  type: TYPE_NORMAL
- en: The debug Helper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rails includes a view helper method called `debug` that you can use to display
    the value of an instance variable or method call available inside a Rails view.
    This helper wraps its output in `<pre>` tags so it’s easier to read.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let’s see how the output of the `current_user` method changes
    as you move through the application. First edit *app/views/layouts/application.html.erb*
    and add a call to the `debug` helper just below the `yield` method, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now start the Rails server, if it’s not already running, and go to *http://localhost:3000/login*
    in your browser. You should see the output from the `debug` helper just below
    the Log In button, as shown in [Figure 13-1](ch13.html#debugging_currentunderscoreuser
    "Figure 13-1. Debugging current_user").
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging current_user](httpatomoreillycomsourcenostarchimages2169108.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-1. Debugging `current_user`
  prefs: []
  type: TYPE_NORMAL
- en: At this point, the output is simply three dashes on one line followed by three
    dots on the next line. The `debug` helper is using YAML to format its output.
    YAML is a data serialization language used frequently in Rails projects. For example,
    the Rails database configuration file (*config/database.yml*) is in YAML format.
    You also used YAML in [Chapter 10](ch10.html "Chapter 10. Testing") to define
    fixtures that provide default data for tests.
  prefs: []
  type: TYPE_NORMAL
- en: In YAML, the three dashes signify the beginning of a document. Three dots indicate
    the end of a YAML document. In other words, this is an empty YAML document. On
    the Log In page `current_user` is `nil`, and the empty YAML document reflects
    that.
  prefs: []
  type: TYPE_NORMAL
- en: Now log in to your application and scroll to the bottom of the posts index page
    to see how the output from `current_user` changed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the YAML output is a little more fleshed out. The first line starts with
    three dashes followed by `!ruby/object:User` ➊, which represents the type of object
    being shown. In this case, the object is a Ruby object of class `User`. The word
    `attributes` ➋ represents the start of the object’s attributes and their values.
    Below that, you see the `User` model attributes: `id`, `name`, `email`, `created_at`,
    `updated_at`, and `password_digest`.'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying this information is a great way to monitor the state of your application
    as it runs. Unfortunately, using the `debug` helper limits you to seeing values
    only for your current session, and if your application renders nothing in the
    browser window, you won’t be able to see any values at all. In those cases, you
    can rely on the Rails log to track down bugs.
  prefs: []
  type: TYPE_NORMAL
- en: The Rails Logger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, I’ve talked about Rails server output. As the Rails server
    runs, it shows a copy of the development log. You can open the file *log/development.log*
    in your editor to examine that log even when the server is not running.
  prefs: []
  type: TYPE_NORMAL
- en: This file may be quite large depending on how much you’ve been using the application
    the log belongs to. You can use the `bin/rake log:clear` command to clear your
    application’s log files.
  prefs: []
  type: TYPE_NORMAL
- en: Log Levels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Rails logger uses levels named `:debug`, `:info`, `:warn`, `:error`, `:fatal`,
    and `:unknown`. These levels indicate the severity of the message being logged.
    The level is assigned by the developer when a message is logged.
  prefs: []
  type: TYPE_NORMAL
- en: If the level is equal to or higher than the log level configured for the current
    environment, the message is added to the corresponding log file. The default log
    level in the development and test environments is `:debug` and above, and the
    default log level in the production environment is `:info` and above.
  prefs: []
  type: TYPE_NORMAL
- en: Because the default log level in production does not display the `:debug` level,
    you can leave these debug messages in your code without worrying about cluttering
    up the logs when your application is deployed and running.
  prefs: []
  type: TYPE_NORMAL
- en: Logging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each of the log levels has a corresponding method used to print messages. For
    example, you can call `logger.debug "`*`Message`*`"` to add a message with the
    level `:debug` to the log.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve already seen how to use the `debug` helper to show values in views. Rails
    logger messages are typically used in models and controllers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add the value of `current_user` to the log and compare it to what is
    shown in the browser. Open the file *app/controllers/posts_controller.rb* in your
    editor and add the logger statement shown here to the `PostsController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This line ➊ adds the output of `current_user` to the development log every
    time the posts `index` action is called. Refresh the page in your browser and
    examine the log output in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `logger.debug` converts the value of the `current_user` method to a string
    and adds it to the log as `#<User:0x007fd3c94d4e10>` ➊. Unfortunately, when a
    Ruby object like `current_user` is converted to a string, the default representation
    is the object’s `class` followed by its `object_id`.
  prefs: []
  type: TYPE_NORMAL
- en: What you want to do is `inspect` the object. The `inspect` method displays attributes
    and values when called on a Rails model. Change the call to `current_user` that
    you just added to the `PostsController` to `current_user.inspect` and refresh
    the page in your browser again.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This output is much better. The value of `current_user` is shown ➊ with all
    attributes, just as it appears in the Rails console. The Rails logger displays
    any string you send to it. I sometimes label the data that I’m logging and add
    characters like stars to make the data stand out more:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You may have had some trouble locating the value of `current_user` in output
    before, but with human-readable labels, it is easier to spot.
  prefs: []
  type: TYPE_NORMAL
- en: Debugger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes simply seeing the values of variables after the fact is not enough
    to debug an issue. The Ruby debugger lets you step into your application as it
    runs. Inside the debugger, you can see code as it is executed, examine the values
    of variables, and even change values.
  prefs: []
  type: TYPE_NORMAL
- en: First, edit your application’s *Gemfile* to add the debugger gem. For Ruby version
    2.0 or greater, you should use the byebug gem. Older versions of Ruby should use
    the debugger gem.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The correct gem for your Ruby version is commented out at the bottom of the
    *Gemfile*. Remove the `#` from the beginning of the line and save the file. The
    debugger isn’t needed in the production environment, so this line only adds it
    to the development and test groups.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because you changed the *Gemfile*, remember to update installed gems with the
    `bin/bundle install` command. You also need to restart the Rails server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now that you’ve installed the debugger, let’s see what it can do.
  prefs: []
  type: TYPE_NORMAL
- en: Entering the Debugger
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you call the `debugger` method in your code, your application stops executing
    when it reaches that call, and Rails launches the debugger. For example, remove
    the logger statements you added to the posts `index` action earlier in *app/controllers/posts_controller.rb*
    and instead use the debugger:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'When the `index` action is called, execution pauses at the `debugger` statement,
    and the debugger is started. Refresh the posts index page in your browser. The
    page shouldn’t finish loading. Check the server output in your terminal, and you
    should see the debugger prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the normal server output, you should see a line indicating the current position
    ➊ in the source code. In this case, execution is paused at line 9 inside *app/controllers/posts_controller.rb*.
    Next, the output ➋ shows your place in the code. You should see 10 lines of code
    with line 9 in the center. Finally, the debugger prompt ➌ is waiting for your
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Debugger Commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The debugger accepts a variety of commands for working with your application’s
    code. This section covers the most common commands. Unless otherwise noted, each
    of these commands can be abbreviated using the first letter of its name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by entering the `help` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `help` command shows a list of all available debugger commands. You can
    also follow `help` with the name of another command for information on a specific
    command.
  prefs: []
  type: TYPE_NORMAL
- en: When you entered the debugger, you were shown 10 lines of code around your current
    position. The `list` command displays the next 10 lines of code inside the debugger.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Each time you enter the `list` command another 10 lines of code are displayed.
    In this case, the current file has only five more lines of code, so those five
    lines are shown. Enter `list-` to see the previous 10 lines of code, and enter
    `list=` to show the code around your current position:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you know where you are in the code, you might want to examine the
    values of some variables. The `var` command displays currently defined variables
    and their contents. To see local variables, enter the `var local` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here, only two local variables are defined. The variable `self` indicates that
    you are inside the `PostsController`. The variable `user_ids` received its contents
    on line 5 in the previous code.
  prefs: []
  type: TYPE_NORMAL
- en: 'List instance variables and their values with the `var instance` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Quite a few instance variables are already defined at this point. The only instance
    variable set by this code is `@current_user`. This instance variable is defined
    in the `current_user` method in `ApplicationController`. The other variables are
    defined by Rails. Note that `@posts` is not defined yet. Your current position
    is line 9, which defines `@posts`, but that line has not yet been executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `display` command adds a variable to the display list inside the debugger.
    If you are especially interested in the value of `user_ids`, for example, enter
    the `display user_ids` command to add it to the display list, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also show the contents of the display list and their values with the
    `display` command, abbreviated `disp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: To remove a variable from the display list, use the `undisplay` command followed
    by the number corresponding to a variable in the list. For example, `undisplay
    1` removes `user_ids` from the display list.
  prefs: []
  type: TYPE_NORMAL
- en: Use the `eval` command to evaluate any Ruby code you like and print its value.
    This command is abbreviated `p`, as in print. For example, you might want to print
    the length of the `user_ids` array or the output from the `current_user` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The debugger is a Ruby shell, so you can also evaluate Ruby commands by simply
    entering them at the prompt. The `eval` command is not even necessary. For example,
    set the value of `user_ids` to an empty array by entering this statement at the
    debugger prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This prints the return value of the expression `user_ids = []` just as if you
    had typed it in the Rails console.
  prefs: []
  type: TYPE_NORMAL
- en: Several commands are available for executing your application’s code inside
    the debugger. The most commonly used command is `next`, which executes the next
    line of code. The `next` command executes methods on the next line of code without
    moving inside the method.
  prefs: []
  type: TYPE_NORMAL
- en: The `step` command is similar, but it also shows you each line that executes
    inside method calls. The `step` command moves through your application and its
    dependencies literally one line of code at a time. You can use it to find bugs
    in the Rails framework or other gems used by your application.
  prefs: []
  type: TYPE_NORMAL
- en: When you are finished moving around in your code, use the `continue` command
    to resume execution and finish the current request. If you’ve been following along
    throughout this section, you may remember you set the value of `user_ids` to an
    empty array. When you `continue` execution and the posts index page finally renders,
    no posts are displayed. Because you set `user_ids` to an empty array, the `@posts`
    instance variable is also empty, and the `render @posts` statement inside the
    `index` view renders nothing.
  prefs: []
  type: TYPE_NORMAL
- en: The Ruby debugger probably isn’t something you’ll use every day, and some developers
    never use it. But if you ever encounter a really hard-to-find bug, the debugger
    is invaluable.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter described several debugging techniques. Displaying values in your
    application’s views with the `debug` helper method or adding data to the log file
    with `logger` statements will help you track down most bugs. The interactive debugger
    provides complete control over your application, allowing you to step through
    your code and pinpoint bugs that are particularly hard to find.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter covers web application programming interfaces, or APIs. We’ll
    discuss using other application’s APIs and creating your own.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| Q: | 1\. Using the `debug` helper method, display the contents of each post
    as it is rendered on the posts index page. Add a `debug` call inside the partial
    for each type of post. |'
  prefs: []
  type: TYPE_TB
- en: '| Q: | 2\. Add the `id` and `type` of each post in the `@posts` instance variable
    to the log using a call to `logger.debug` in the `index` action of *app/controllers/posts_controller.rb*.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Q: | 3\. Practice using the debugger to explore your application’s code.
    Use the `next` command in the debugger to see what happens when a user logs in
    to the application. |'
  prefs: []
  type: TYPE_TB
