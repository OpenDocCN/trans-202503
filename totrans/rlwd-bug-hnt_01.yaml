- en: '**1'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1**'
- en: BUG BOUNTY BASICS**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**漏洞悬赏基础**'
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: If you’re new to hacking, it will help to have a basic understanding of how
    the internet works and what happens under the hood when you enter a URL into a
    browser’s address bar. Although navigating to a website might seem simple, it
    involves many hidden processes, such as preparing an HTTP request, identifying
    the domain to send the request to, translating the domain to an IP address, sending
    the request, rendering a response, and so on.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是黑客新手，了解互联网如何工作以及当你在浏览器地址栏中输入 URL 时背后发生的事情会有所帮助。尽管访问一个网站看起来很简单，但它涉及许多隐藏的过程，比如准备
    HTTP 请求、识别发送请求的域名、将域名转换为 IP 地址、发送请求、呈现响应等等。
- en: In this chapter, you’ll learn basic concepts and terminology, such as vulnerabilities,
    bug bounties, clients, servers, IP addresses, and HTTP. You’ll get a general understanding
    of how performing unintended actions and providing unexpected input or access
    to private information can result in vulnerabilities. Then, we’ll see what happens
    when you enter a URL in your browser’s address bar, including what HTTP requests
    and responses look like and the various HTTP action verbs. We’ll end the chapter
    with an understanding of what it means to say HTTP is stateless.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习基本概念和术语，如漏洞、漏洞悬赏、客户端、服务器、IP 地址和 HTTP。你将对执行意外操作、提供意外输入或访问私人信息如何导致漏洞有一个大致了解。然后，我们将了解当你在浏览器的地址栏中输入
    URL 时会发生什么，包括 HTTP 请求和响应的样式以及各种 HTTP 动作动词。我们将以理解 HTTP 无状态的含义来结束本章。
- en: '**Vulnerabilities and Bug Bounties**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**漏洞和漏洞悬赏**'
- en: A *vulnerability* is a weakness in an application that allows a malicious person
    to perform some unpermitted action or gain access to information they shouldn’t
    otherwise be allowed to access.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*漏洞*是应用程序中的弱点，允许恶意人士执行一些未被授权的操作或访问他们本不应有权访问的信息。'
- en: As you learn and test applications, keep in mind that vulnerabilities can result
    from attackers performing intended and unintended actions. For example, changing
    the ID of a record identifier to access information you shouldn’t have access
    to is an example of an unintended action.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习和测试应用程序时，请记住，漏洞可能来源于攻击者执行预期和非预期的操作。例如，更改记录标识符的 ID 来访问你本不应访问的信息，就是一种非预期的操作。
- en: Suppose a website allowed you to create a profile with your name, email, birthday,
    and address. It would keep your information private and share it only with your
    friends. But if the website allowed anyone to add you as a friend without your
    permission, this would be a vulnerability. Even though the site kept your information
    private from non-friends, by allowing anyone to add you as a friend, anyone could
    access your information. As you test a site, always consider how someone could
    abuse existing functionality.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个网站允许你创建一个包含姓名、电子邮件、生日和地址的个人资料。它会保持你的信息私密，并且只与你的朋友分享。但如果该网站允许任何人在没有你许可的情况下添加你为朋友，这就会成为一个漏洞。尽管该网站对非朋友保持你的信息私密，但通过允许任何人添加你为朋友，任何人都可以访问你的信息。在测试网站时，始终考虑别人如何滥用现有功能。
- en: A *bug bounty* is a reward a website or company gives to anyone who ethically
    discovers a vulnerability and reports it to that website or company. Rewards are
    often monetary and range from tens of dollars to tens of thousands of dollars.
    Other examples of bounties include cryptocurrencies, air miles, reward points,
    service credits, and so on.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*漏洞悬赏*是网站或公司给予任何道德地发现漏洞并报告给该网站或公司的人的奖励。奖励通常是金钱，范围从几十美元到几万美元不等。其他形式的奖励还包括加密货币、航空里程、奖励积分、服务积分等。'
- en: When a company offers bug bounties, it creates a *program*, a term that we’ll
    use in this book to denote the rules and framework established by companies for
    people who want to test the company for vulnerabilities. Note that this is different
    from companies that operate a *vulnerability disclosure program (VDP)*. Bug bounties
    offer some monetary reward, whereas a VDP does not offer payment (though a company
    may award swag). A VDP is just a way for ethical hackers to report vulnerabilities
    to a company for that company to fix. Although not all reports included in this
    book were rewarded, they’re all examples from hackers participating in bug bounty
    programs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当公司提供漏洞悬赏时，它会创建一个*程序*，这个术语我们将在本书中用来表示公司为希望测试其漏洞的人制定的规则和框架。需要注意的是，这不同于那些运行*漏洞披露程序（VDP）*的公司。漏洞悬赏提供一定的现金奖励，而VDP则不提供报酬（尽管公司可能会奖励一些纪念品）。VDP只是道德黑客向公司报告漏洞的一种方式，目的是让公司修复这些漏洞。虽然本书中的并非所有报告都得到了奖励，但它们都是参与漏洞悬赏计划的黑客的示例。
- en: '**Client and Server**'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**客户端与服务器**'
- en: Your browser relies on the internet, which is a network of computers that send
    messages to each other. We call these messages *packets*. Packets include the
    data you’re sending and information about where that data is coming from and where
    it’s going. Every computer on the internet has an address for sending packets
    to it. But some computers only accept certain types of packets, and others only
    allow packets from a restricted list of other computers. It’s then up to the receiving
    computer to determine what to do with the packets and how to respond. For the
    purposes of this book, we’ll focus only on the data included in the packets (the
    HTTP messages), not the packets themselves.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你的浏览器依赖于互联网，互联网是一个计算机网络，这些计算机相互发送消息。我们将这些消息称为*数据包*。数据包包含你发送的数据以及关于这些数据的来源和去向的信息。互联网上的每台计算机都有一个地址，用于接收发送到它的包。然而，一些计算机只接受某些类型的数据包，其他计算机则只允许来自受限计算机列表的数据包。接收计算机的任务是决定如何处理这些数据包以及如何做出响应。本书的目的，我们将仅关注数据包中包含的数据（即HTTP消息），而非数据包本身。
- en: I’ll refer to these computers as either clients or servers. The computer initiating
    requests is typically referred to as the *client* regardless of whether the request
    is initiated by a browser, command line, or so on. *Servers* refer to the websites
    and web applications receiving the requests. If the concept is applicable to either
    clients or servers, I refer to computers in general.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我会将这些计算机称为客户端或服务器。发起请求的计算机通常被称为*客户端*，无论请求是由浏览器、命令行等发起的。*服务器*则指的是接收请求的网站和Web应用。如果该概念适用于客户端或服务器，我就指代一般的计算机。
- en: Because the internet can include any number of computers talking to each other,
    we need guidelines for how computers should communicate over the internet. This
    takes the form of *Request for Comment (RFC)* documents, which define standards
    for how computers should behave. For example, the *Hypertext Transfer Protocol
    (HTTP)* defines how your internet browser communicates with a remote server using
    *Internet Protocol (IP)*. In this scenario, both the client and server must agree
    to implement the same standards so they can understand the packets each is sending
    and receiving.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于互联网可能包含任意数量的计算机相互通信，我们需要一些规范来指导计算机如何在互联网上进行通信。这些规范以*请求评论（RFC）*文档的形式存在，定义了计算机应如何行为。例如，*超文本传输协议（HTTP）*定义了你的互联网浏览器如何使用*互联网协议（IP）*与远程服务器通信。在这种情况下，客户端和服务器都必须同意实现相同的标准，以便理解彼此发送和接收的数据包。
- en: '**What Happens When You Visit a Website**'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**访问网站时会发生什么**'
- en: Because we’ll focus on HTTP messages in this book, this section provides you
    with a high-level overview of the process that occurs when you enter a URL in
    your browser’s address bar.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书将重点讨论HTTP消息，本节将为你提供当你在浏览器地址栏中输入URL时，发生过程的高层次概述。
- en: '***Step 1: Extracting the Domain Name***'
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***步骤 1：提取域名***'
- en: Once you enter *[http://www.google.com/](http://www.google.com/)*, your browser
    determines the domain name from the URL. A *domain name* identifies which website
    you’re trying to visit and must adhere to specific rules as defined by RFCs. For
    example, a domain name can only contain alphanumeric characters and underscores.
    An exception is internationalized domain names, which are beyond the scope of
    this book. To learn more, refer to RFC 3490, which defines their usage. In this
    case, the domain is *[www.google.com](http://www.google.com)*. The domain serves
    as one way to find the server’s address.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你进入 *[http://www.google.com/](http://www.google.com/)*，你的浏览器会根据网址确定域名。*域名*标识了你想访问的网站，并且必须遵守由RFC定义的特定规则。例如，域名只能包含字母数字字符和下划线。一个例外是国际化域名，它超出了本书的讨论范围。要了解更多信息，请参阅RFC
    3490，该文档定义了它们的使用。在此示例中，域名是 *[www.google.com](http://www.google.com)*。域名是找到服务器地址的一种方式。
- en: '***Step 2: Resolving an IP Address***'
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***步骤2：解析IP地址***'
- en: After determining the domain name, your browser uses IP to look up the *IP address*
    associated with the domain. This process is referred to as resolving the IP address,
    and every domain on the internet must resolve to an IP address to work.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 确定域名后，你的浏览器使用IP来查找与该域名关联的*IP地址*。这个过程称为解析IP地址，互联网上的每个域名都必须解析到一个IP地址才能正常工作。
- en: 'Two types of IP addresses exist: Internet Protocol version 4 (IPv4) and Internet
    Protocol version 6 (IPv6). IPv4 addresses are structured as four numbers connected
    by periods, and each number falls in a range from 0 to 255\. IPv6 is the newest
    version of the Internet Protocol. It was designed to address the problem of available
    IPv4 addresses running out. IPv6 addresses are made up of eight groups of four
    hexadecimal digits separated by colons, but methods exist to shorten IPv6 addresses.
    For example, 8.8.8.8 is an IPv4 address, and 2001:4860:4860::8888 is a shortened
    IPv6 address.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 存在两种类型的IP地址：互联网协议版本4（IPv4）和互联网协议版本6（IPv6）。IPv4地址由四个数字组成，数字之间用点连接，每个数字的范围是0到255。IPv6是最新版本的互联网协议，它的设计旨在解决IPv4地址即将耗尽的问题。IPv6地址由八组四个十六进制数字组成，数字之间用冒号分隔，但也有方法可以缩短IPv6地址。例如，8.8.8.8是一个IPv4地址，而2001:4860:4860::8888是一个缩短后的IPv6地址。
- en: To look up an IP address using just the domain name, your computer sends a request
    to *Domain Name System (DNS)* servers, which consist of specialized servers on
    the internet that have a registry of all domains and their matching IP addresses.
    The preceding IPv4 and IPv6 addresses are Google DNS servers.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了仅使用域名查找IP地址，你的计算机会向*域名系统（DNS）*服务器发送请求，这些服务器是互联网上的专门服务器，拥有所有域名及其匹配IP地址的注册信息。上述的IPv4和IPv6地址就是Google的DNS服务器。
- en: In this example, the DNS server you connect to would match *[www.google.com](http://www.google.com)*
    to the IPv4 address 216.58.201.228 and send that back to your computer. To learn
    more about a site’s IP address, you can use the command `dig A` site.com from
    your terminal and replace site.com with the site you’re looking up.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你连接的DNS服务器会将 *[www.google.com](http://www.google.com)* 与IPv4地址216.58.201.228匹配，并将该地址返回给你的计算机。要了解更多关于网站IP地址的信息，你可以在终端使用命令`dig
    A` site.com，并将site.com替换为你要查询的网站。
- en: '***Step 3: Establishing a TCP Connection***'
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***步骤3：建立TCP连接***'
- en: Next, the computer attempts to establish a *Transmission Control Protocol (TCP)*
    connection with the IP address on port 80 because you visited a site using *http://*.
    The details of TCP aren’t important other than to note that it’s another protocol
    that defines how computers communicate with each other. TCP provides two-way communication
    so that message recipients can verify the information they receive and nothing
    is lost in transmission.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，计算机会尝试通过端口80与该IP地址建立*传输控制协议（TCP）*连接，因为你使用的是 *http://* 访问网站。TCP的细节不重要，除了要注意它是另一种定义计算机如何相互通信的协议。TCP提供双向通信，使得消息接收方能够验证他们收到的信息，确保在传输过程中没有数据丢失。
- en: The server you’re sending a request to might be running multiple services (think
    of a service as a computer program), so it uses *ports* to identify specific processes
    to receive requests. You can think of ports as a server’s doors to the internet.
    Without ports, services would have to compete for the information being sent to
    the same place. This means that we need another standard to define how services
    cooperate with each other and ensure that the data for one service isn’t stolen
    by another. For example, port 80 is the standard port for sending and receiving
    unencrypted HTTP requests. Another common port is 443, which is used for encrypted
    HTTPS requests. Although port 80 is standard for HTTP and 443 is standard for
    HTTPS, TCP communication can happen on any port, depending on how an administrator
    configures an application.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你发送请求的服务器可能正在运行多个服务（可以将服务看作是计算机程序），因此它使用*端口*来标识特定的进程，以接收请求。你可以把端口看作是服务器通向互联网的“门”。如果没有端口，服务就必须竞争发送到同一位置的信息。这意味着我们需要另一种标准来定义服务之间如何协作，并确保一个服务的数据不会被另一个服务窃取。例如，端口
    80 是发送和接收未加密的 HTTP 请求的标准端口。另一个常用的端口是 443，用于加密的 HTTPS 请求。虽然端口 80 是 HTTP 的标准端口，端口
    443 是 HTTPS 的标准端口，但 TCP 通信可以发生在任何端口，具体取决于管理员如何配置应用程序。
- en: You can establish your own TCP connection to a website on port 80 by opening
    your terminal and running `nc` <IP ADDRESS> `80`. This line uses the Netcat utility
    `nc` command to create a network connection for reading and writing messages.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过打开终端并运行 `nc` <IP 地址> `80` 来在端口 80 上建立与网站的 TCP 连接。这一行使用了 Netcat 工具 `nc`
    命令来创建一个用于读写消息的网络连接。
- en: '***Step 4: Sending an HTTP Request***'
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***步骤 4：发送 HTTP 请求***'
- en: 'Continuing with *[http://www.google.com/](http://www.google.com/)* as an example,
    if the connection in step 3 is successful, your browser should prepare and send
    an HTTP request, as shown in [Listing 1-1](ch01.xhtml#ch01ex01):'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 继续以 *[http://www.google.com/](http://www.google.com/)* 为例，如果第 3 步中的连接成功，浏览器应该准备并发送
    HTTP 请求，如 [示例 1-1](ch01.xhtml#ch01ex01) 所示：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 1-1: Sending an HTTP request*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 1-1：发送 HTTP 请求*'
- en: The browser makes a `GET` request to the `/` path ➊, which is the website’s
    root. A website’s content is organized into paths, just like the folders and files
    on your computer. As you get deeper into each folder, the path you take is denoted
    by recording each folder’s name followed by a `/`. When you visit the first page
    of a website, you access the root path, which is just a `/`. The browser also
    indicates it’s using the HTTP version 1.1 protocol. A `GET` request just retrieves
    information. We’ll learn more about it later.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器向 `/` 路径 ➊ 发送一个 `GET` 请求，这是网站的根路径。网站的内容按照路径组织，就像你计算机上的文件夹和文件一样。当你深入每个文件夹时，你通过记录每个文件夹的名称并跟随一个
    `/` 来表示所走的路径。当你访问一个网站的首页时，你访问的是根路径，它只是一个 `/`。浏览器还会指明它正在使用 HTTP 1.1 协议。`GET` 请求只是用于检索信息，我们稍后会进一步了解它。
- en: The *host header* ➋ holds an additional piece of information that is sent as
    part of the request. HTTP 1.1 needs it to identify where a server at the given
    IP address should send the request because IP addresses can host multiple domains.
    A *connection header* ➌ indicates the request to keep the connection with the
    server open to avoid the overhead of constantly opening and closing connections.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*Host 头部* ➋ 包含作为请求一部分发送的额外信息。HTTP 1.1 需要它来识别给定 IP 地址的服务器应该将请求发送到哪里，因为一个 IP
    地址可以承载多个域名。*Connection 头部* ➌ 表示请求保持与服务器的连接，以避免不断开关连接所带来的开销。'
- en: You can see the expected response format at ➍. In this case, we’re expecting
    `application/html` but will accept any format, as indicated by the wildcard (`*/*`).
    There are hundreds of possible content types, but for our purposes, you’ll see
    `application/html`, `application/json`, `application/octet-stream`, and `text/plain`
    most often. Finally, the User-Agent ➎ denotes the software responsible for sending
    the request.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 ➍ 看到预期的响应格式。在这种情况下，我们期望 `application/html` 格式，但会接受任何格式，如通配符（`*/*`）所示。虽然有数百种可能的内容类型，但在我们的应用中，你最常见的将是
    `application/html`、`application/json`、`application/octet-stream` 和 `text/plain`。最后，User-Agent
    ➎ 表示负责发送请求的软件。
- en: '***Step 5: Server Response***'
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***步骤 5：服务器响应***'
- en: 'In response to our request, the server should respond with something that looks
    like [Listing 1-2](ch01.xhtml#ch01ex02):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 作为对我们请求的回应，服务器应该返回类似于[示例 1-2](ch01.xhtml#ch01ex02)的内容：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 1-2: Server response*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 1-2：服务器响应*'
- en: Here, we’ve received an HTTP response with the status code 200 ➊ adhering to
    HTTP/1.1\. The status code is important because it indicates how the server is
    responding. Also defined by RFC, these codes typically have three-digit numbers
    that begin with 2, 3, 4, or 5\. Although there is no strict requirement for servers
    to use specific codes, 2*xx* codes typically indicate a request was successful.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们收到了一个HTTP响应，状态码为200 ➊，遵循HTTP/1.1协议。状态码很重要，因为它指示了服务器的响应情况。根据RFC的定义，这些代码通常是三位数字，开头为2、3、4或5。虽然没有严格要求服务器使用特定的代码，但以2开头的*xx*代码通常表示请求成功。
- en: Because there is no strict enforcement of how a server implements its use of
    HTTP codes, you might see some applications respond with a 200 even though the
    HTTP message body explains there was an application error. An *HTTP message body*
    is the text associated with a request or response ➌. In this case, we’ve removed
    the content and replaced it with --snip-- because of how big the response body
    from Google is. This text in a response is usually the HTML for a web page but
    could be JSON for an application programming interface, file contents for a file
    download, and so on.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于没有严格要求服务器如何实现HTTP代码的使用，你可能会看到某些应用程序即使在HTTP消息体中解释存在应用程序错误，也会回应200。*HTTP消息体*是与请求或响应相关联的文本
    ➌。在这种情况下，我们已移除内容，并用--snip--替代，因为Google的响应体太大。响应中的这段文本通常是网页的HTML，但也可能是应用程序接口的JSON，文件下载的文件内容等。
- en: 'The Content-Type header ➋ informs the browsers of the body’s media type. The
    media type determines how a browser will render body contents. But browsers don’t
    always use the value returned from an application; instead, browsers perform *MIME
    sniffing*, reading the first bit of the body contents to determine the media type
    for themselves. Applications can disable this browser behavior by including the
    header *X-Content-Type-Options: nosniff*, which is not included in the preceding
    example.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 'Content-Type头部 ➋ 告诉浏览器消息体的媒体类型。媒体类型决定了浏览器如何渲染消息体的内容。但浏览器并不总是使用应用程序返回的值；相反，浏览器会执行*MIME嗅探*，读取消息体内容的第一部分来确定媒体类型。应用程序可以通过包含*X-Content-Type-Options:
    nosniff*头部来禁用这种浏览器行为，但在前面的示例中没有包含该头部。'
- en: Other response codes starting with 3 indicate a redirection, which instructs
    your browser to make an additional request. For example, if Google theoretically
    needed to permanently redirect you from one URL to another, it could use a 301
    response. In contrast, a 302 is a temporary redirect.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以3开头的其他响应代码表示重定向，指示浏览器需要发出额外的请求。例如，如果Google理论上需要将你从一个URL永久重定向到另一个，它可以使用301响应。相比之下，302是临时重定向。
- en: 'When a 3*xx* response is received, your browser should make a new HTTP request
    to the URL defined in a `Location` header, as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当收到3*xx*响应时，浏览器应该向`Location`头部定义的URL发起新的HTTP请求，如下所示：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Responses starting with a 4 typically indicate a user error, such as response
    403 when a request doesn’t include proper identification to authorize access to
    content despite providing a valid HTTP request. Responses starting with a 5 identify
    some type of server error, such as 503, which indicates a server is unavailable
    to handle the sent request.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以4开头的响应通常表示用户错误，例如当请求没有提供适当的身份验证信息以授权访问内容时，尽管已提供有效的HTTP请求，仍会返回403响应。以5开头的响应表示某种服务器错误，例如503，表示服务器无法处理发送的请求。
- en: '***Step 6: Rendering the Response***'
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***步骤6：渲染响应***'
- en: Because the server sent a 200 response with the content type text/html, our
    browser will begin rendering the contents it received. The response’s body tells
    the browser what should be presented to the user.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因为服务器返回了一个200响应，且内容类型为text/html，我们的浏览器将开始渲染它所接收到的内容。响应体告诉浏览器应该向用户展示什么。
- en: For our example, this would include HTML for the page structure; Cascading Style
    Sheets (CSS) for the styles and layout; and JavaScript to add additional dynamic
    functionality and media, such as images or videos. It’s possible for the server
    to return other content, such as XML, but we’ll stick to the basics for this example.
    [Chapter 11](ch11.xhtml#ch11) discusses XML in more detail.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，这将包括页面结构的HTML；样式和布局的层叠样式表（CSS）；以及用于添加额外动态功能和媒体（如图像或视频）的JavaScript。服务器也可以返回其他内容，例如XML，但我们将在此示例中保持基础内容。[第11章](ch11.xhtml#ch11)将更详细地讨论XML。
- en: Because it’s possible for web pages to reference external files such as CSS,
    JavaScript, and media, the browser might make additional HTTP requests for all
    a web page’s required files. While the browser is requesting those additional
    files, it continues parsing the response and presenting the body to you as a web
    page. In this case, it will render Google’s home page, *[www.google.com](http://www.google.com)*.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于网页可能引用外部文件，如 CSS、JavaScript 和媒体文件，浏览器可能会为网页所需的所有文件发起额外的 HTTP 请求。在浏览器请求这些附加文件的同时，它继续解析响应并将页面主体展示给你。在这种情况下，它将渲染
    Google 的首页，*([www.google.com](http://www.google.com))*。
- en: Note that JavaScript is a scripting language supported by every major browser.
    JavaScript allows web pages to have dynamic functionality, including the ability
    to update content on a web page without reloading the page, check whether your
    password is strong enough (on some websites), and so on. Like other programming
    languages, JavaScript has built-in functions and can store values in variables
    and run code in response to events on a web page. It also has access to various
    browser application programming interfaces (APIs). These APIs enable JavaScript
    to interact with other systems, the most important of which may be the document
    object model (DOM).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，JavaScript 是一种由所有主流浏览器支持的脚本语言。JavaScript 使网页具有动态功能，包括在不重新加载页面的情况下更新网页内容、检查密码是否足够强（在一些网站上）等。像其他编程语言一样，JavaScript
    拥有内置函数，可以将值存储在变量中，并响应网页上的事件运行代码。它还可以访问各种浏览器应用程序编程接口（API）。这些 API 使得 JavaScript
    能够与其他系统交互，其中最重要的可能是文档对象模型（DOM）。
- en: The DOM allows JavaScript to access and manipulate a web page’s HTML and CSS.
    This is significant because if an attacker can execute their own JavaScript on
    a site, they’ll have access to the DOM and can perform actions on the site on
    behalf of the targeted user. [Chapter 7](ch07.xhtml#ch07) explores this concept
    further.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: DOM 允许 JavaScript 访问和操作网页的 HTML 和 CSS。这一点非常重要，因为如果攻击者能够在某个网站上执行自己的 JavaScript
    代码，他们将能够访问 DOM，并代表目标用户在该网站上执行操作。[第 7 章](ch07.xhtml#ch07)将进一步探讨这个概念。
- en: '**HTTP Requests**'
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**HTTP 请求**'
- en: The agreement between client and server on how to handle HTTP messages includes
    defining request methods. A *request method* indicates the purpose of the client’s
    request and what the client expects as a successful result. For example, in [Listing
    1-1](ch01.xhtml#ch01ex01), we sent a `GET` request to *[http://www.google.com/](http://www.google.com/)*
    implying we expect only the contents of *[http://www.google.com/](http://www.google.com/)*
    to be returned and no other actions to be performed. Because the internet is designed
    as an interface between remote computers, request methods were developed and implemented
    to distinguish between the actions being invoked.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端和服务器之间关于如何处理 HTTP 消息的协议包括定义请求方法。*请求方法* 指示客户端请求的目的，以及客户端期望的成功结果。例如，在[清单 1-1](ch01.xhtml#ch01ex01)中，我们发送了一个
    `GET` 请求到 *[http://www.google.com/](http://www.google.com/)*，这意味着我们只期望返回 *[http://www.google.com/](http://www.google.com/)*
    的内容，而不执行其他操作。因为互联网被设计为远程计算机之间的接口，请求方法的开发和实施就是为了区分所调用的动作。
- en: 'The HTTP standard defines the following request methods: `GET`, `HEAD`, `POST`,
    `PUT`, `DELETE`, `TRACE`, `CONNECT`, and `OPTIONS` (`PATCH` was also proposed
    but not commonly implemented in the HTTP RFC). At the time of this writing, browsers
    will only send `GET` and `POST` requests using HTML. Any `PUT`, `PATCH`, or `DELETE`
    request is the result of JavaScript’s invoking the HTTP request. This will have
    implications later in the book when we consider vulnerability examples in applications
    expecting these method types.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 标准定义了以下请求方法：`GET`、`HEAD`、`POST`、`PUT`、`DELETE`、`TRACE`、`CONNECT` 和 `OPTIONS`（`PATCH`
    也有提议，但在 HTTP RFC 中没有广泛实现）。在写作本文时，浏览器仅通过 HTML 发送 `GET` 和 `POST` 请求。任何 `PUT`、`PATCH`
    或 `DELETE` 请求都是 JavaScript 调用 HTTP 请求的结果。当我们考虑应用程序中期望这些方法类型的漏洞示例时，这将在本书后面有所体现。
- en: The next section provides a brief overview of request methods you’ll find in
    this book.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节简要概述了本书中你将遇到的请求方法。
- en: '***Request Methods***'
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***请求方法***'
- en: The `GET` method retrieves whatever information is identified by the request
    *Uniform Resource Identifier (URI)*. The term URI is commonly used synonymously
    with Uniform Resource Locator (URL). Technically, a *URL* is a type of URI that
    defines a resource and includes a way to locate that resource by way of its network
    location. For example, *http://www.google.com/<example>/file.txt* and */<example>/file.txt*
    are valid URIs. But only *http://www.google.com/<example>/file.txt* is a valid
    URL because it identifies how to locate the resource via the domain *[http://www.google.com](http://www.google.com)*.
    Despite the nuance, we’ll use *URL* throughout the book when referencing any resource
    identifiers.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`GET`方法检索请求中标识的任何信息 *统一资源标识符（URI）*。术语URI通常与统一资源定位符（URL）同义。技术上，*URL*是URI的一种类型，它定义了一个资源，并通过网络位置提供了一种定位该资源的方式。例如，*http://www.google.com/<example>/file.txt*和*/<example>/file.txt*都是有效的URI。但只有*http://www.google.com/<example>/file.txt*是有效的URL，因为它通过域名*
    [http://www.google.com](http://www.google.com) *标识了如何定位该资源。尽管存在细微差别，我们在本书中提到任何资源标识符时都将使用*URL*。'
- en: While there is no way to enforce this requirement, `GET` requests shouldn’t
    alter data; they should just retrieve data from a server and return it in the
    HTTP message body. For example, on a social media site, a `GET` request should
    return your profile name but not update your profile. This behavior is critical
    for the cross-site request forgery (CSRF) vulnerabilities discussed in [Chapter
    4](ch04.xhtml#ch04). Visiting any URL or website link (unless invoked by JavaScript)
    causes your browser to send a `GET` request to the intended server. This behavior
    is crucial to the open redirect vulnerabilities discussed in [Chapter 2](ch02.xhtml#ch02).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管无法强制执行这一要求，`GET`请求不应更改数据；它们应该仅从服务器检索数据，并将其返回到HTTP消息体中。例如，在社交媒体网站上，`GET`请求应该返回你的个人资料名称，而不是更新你的个人资料。这种行为对于[第4章](ch04.xhtml#ch04)中讨论的跨站请求伪造（CSRF）漏洞至关重要。访问任何URL或网站链接（除非由JavaScript调用）会导致浏览器向目标服务器发送`GET`请求。这种行为对于[第2章](ch02.xhtml#ch02)中讨论的开放重定向漏洞至关重要。
- en: The `HEAD` method is identical to the `GET` method except the server must not
    return a message body in the response.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`HEAD`方法与`GET`方法相同，不同之处在于服务器必须在响应中不返回消息体。'
- en: The `POST` method invokes some function on the receiving server, as determined
    by the server. In other words, typically there will be some type of backend action
    performed, such as creating a comment, registering a user, deleting an account,
    and so on. The action performed by the server in response to a `POST` can vary.
    Sometimes, the server may take no action at all. For example, a `POST` request
    could cause an error to occur while a request is being processed, and a record
    wouldn’t be saved on the server.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`POST`方法调用接收服务器上由服务器确定的某个功能。换句话说，通常会执行某种类型的后端操作，例如创建评论、注册用户、删除账户等。服务器对`POST`请求的响应操作可能会有所不同。有时，服务器可能根本不会采取任何行动。例如，`POST`请求可能会导致在处理请求时发生错误，从而导致记录未被保存到服务器。'
- en: The `PUT` method invokes some function that refers to an already existing record
    on the remote website or application. For example, it might be used when updating
    an account, a blog post, or so on that already exists. Again, the action performed
    can vary and might result in the server taking no action at all.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`PUT`方法调用与远程网站或应用程序上已存在记录相关的某个功能。例如，它可能在更新已存在的账户、博客文章等时使用。同样，执行的操作可能会有所不同，可能导致服务器根本不执行任何操作。'
- en: The `DELETE` method requests that the remote server delete a remote resource
    identified with a URI.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`DELETE`方法请求远程服务器删除由URI标识的远程资源。'
- en: The `TRACE` method is another uncommon method; it is used to reflect the request
    message back to the requester. It allows the requester to see what is being received
    by the server and to use that information for testing and collecting diagnostic
    information.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`TRACE`方法是另一种不常见的方法，它用于将请求消息反射回请求方。它允许请求方查看服务器接收到的内容，并利用这些信息进行测试和收集诊断信息。'
- en: The `CONNECT` method is reserved for use with a *proxy*, a server that forwards
    requests to other servers. This method starts two-way communications with a requested
    resource. For example, the `CONNECT` method can access websites that use HTTPS
    via a proxy.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`CONNECT`方法保留用于与*代理*配合使用，代理是将请求转发到其他服务器的服务器。此方法启动与请求资源的双向通信。例如，`CONNECT`方法可以通过代理访问使用HTTPS的网站。'
- en: The `OPTIONS` method requests information from a server about the communication
    options available. For example, by calling for `OPTIONS`, you can find out whether
    the server accepts `GET`, `POST`, `PUT`, `DELETE`, and `OPTIONS` calls. This method
    won’t indicate whether a server accepts `HEAD` or `TRACE` calls. Browsers automatically
    send this type of request for specific content types, such as `application/json`.
    This method, referred to as a *preflight* OPTIONS *call*, is discussed more in
    depth in [Chapter 4](ch04.xhtml#ch04) because it serves as a CSRF vulnerability
    protection.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`OPTIONS` 方法向服务器请求关于可用通信选项的信息。例如，通过调用 `OPTIONS`，你可以了解服务器是否接受 `GET`、`POST`、`PUT`、`DELETE`
    和 `OPTIONS` 请求。此方法不会指示服务器是否接受 `HEAD` 或 `TRACE` 请求。浏览器会自动发送此类请求，针对特定的内容类型，例如 `application/json`。这种方法被称为
    *预检* OPTIONS *请求*，在[第4章](ch04.xhtml#ch04)中会更深入地讨论，因为它作为 CSRF 漏洞的保护机制。'
- en: '***HTTP Is Stateless***'
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***HTTP 是无状态的***'
- en: HTTP requests are *stateless*, which means that every request sent to a server
    is treated as a brand-new request. The server knows nothing about its previous
    communication with your browser when receiving a request. This is problematic
    for most sites because the sites want to remember who you are. Otherwise, you’d
    have to reenter your username and password for every HTTP request sent. This also
    means that all the data required to process an HTTP request must be reloaded with
    every request a client sends to a server.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 请求是*无状态的*，这意味着每个发送到服务器的请求都会被当作一个全新的请求来处理。当服务器接收到请求时，它并不了解与浏览器之间之前的任何通信。这对大多数网站来说是个问题，因为网站希望记住你是谁。否则，你每次发送
    HTTP 请求时都必须重新输入用户名和密码。这也意味着，处理 HTTP 请求所需的所有数据必须随着每个客户端发送给服务器的请求一同重新加载。
- en: 'To clarify this confusing concept, consider this example: if you and I had
    a stateless conversation, before every sentence spoken, I’d have to start with
    “I’m Peter Yaworski; we were just discussing hacking.” You’d then have to *reload*
    all the information about what we were discussing about hacking. Think of what
    Adam Sandler does for Drew Barrymore every morning in *50 First Dates* (if you
    haven’t seen the movie, you should).'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了澄清这个困惑的概念，考虑以下示例：如果你我之间进行的是无状态的对话，那么在每句句子之前，我都得先说“我是 Peter Yaworski，我们刚刚在讨论黑客行为。”然后你得*重新加载*我们讨论的所有关于黑客的内容。想想
    Adam Sandler 在 *50次初恋* 中每天早晨为 Drew Barrymore 所做的事情（如果你还没看过这部电影，应该去看看）。
- en: To avoid having to resend your username and password for every HTTP request,
    websites use cookies or basic authentication, which we’ll discuss in detail in
    [Chapter 4](ch04.xhtml#ch04).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免每次 HTTP 请求都重新发送用户名和密码，网站使用了 cookies 或基本认证，我们将在[第4章](ch04.xhtml#ch04)中详细讨论。
- en: '**NOTE**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The specifics of how content is encoded using base64 are beyond the scope
    of this book, but you’ll likely encounter base64-encoded content while you’re
    hacking. If so, you should always decode that content. A Google search for “base64
    decode” should provide plenty of tools and methods for doing this.*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用 base64 编码内容的具体方式超出了本书的范围，但你在进行黑客攻击时很可能会遇到 base64 编码的内容。如果遇到此类情况，你应该始终解码该内容。通过
    Google 搜索“base64 decode”应该能找到很多工具和方法来完成这个过程。*'
- en: '**Summary**'
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: 'You should now have a basic understanding of how the internet works. Specifically,
    you learned what happens when you enter a website into your browser’s address
    bar: how the browser translates that to a domain, how the domain is mapped to
    an IP address, and how an HTTP request is sent to a server.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该对互联网是如何工作的有了基本的了解。具体来说，你学到了当你在浏览器地址栏中输入一个网站时会发生什么：浏览器如何将其转化为域名，域名如何映射到
    IP 地址，HTTP 请求如何被发送到服务器。
- en: You also learned how your browser structures requests and renders responses
    and how HTTP request methods allow clients to communicate with servers. Additionally,
    you learned that vulnerabilities result from someone performing an unintended
    action or gaining access to information otherwise not available and that bug bounties
    are rewards for ethically discovering and reporting vulnerabilities to the owners
    of websites.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你还学到了浏览器是如何构建请求和渲染响应的，以及 HTTP 请求方法如何允许客户端与服务器进行通信。此外，你了解了漏洞是如何通过某人执行非预期的操作或获取原本无法访问的信息而产生的，并且漏洞赏金是对道德地发现并报告网站漏洞的奖励。
