- en: '**16'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NEXT STEPS**
  prefs: []
  type: TYPE_NORMAL
- en: '*And now these three remain: faith, hope, and love. But the greatest of these
    is love.*'
  prefs: []
  type: TYPE_NORMAL
- en: –1 Corinthians 13:13
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Before ending this book, I want to give you some tools for continuing your ethical
    hacking journey. In this chapter, you’ll set up your own hacking server, which
    will allow you to audit systems outside of your virtual environment. You can use
    this server to perform attacks, like those described in this book, on real systems.
    Once you have set up your server, I will discuss some of the exciting ethical
    hacking topics I didn’t cover in this book, including attacking wireless networks
    and software-defined radios, reverse engineering malicious binaries, hacking industrial
    systems, and exploring quantum computation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Setting Up a Hardened Hacking Environment**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So far, we’ve performed all of our attacks within our virtual environment. But
    if you want to audit systems outside your virtual environment, you’ll need to
    set up a hardened *virtual private server (VPS)*, a virtual machine running on
    a server in a datacenter, with a public IP address. Using a remote VPS has several
    advantages, including anonymity and the ability to easily assign yourself a public
    IP address, allowing your server to communicate with other machines on the internet.
    This will enable you to communicate with remote shells on devices outside of your
    virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: However, having a public IP address also means that other machines on the internet
    can detect and scan your VPS, so you must make sure it is secure. We commonly
    refer to the process of securing a machine as *hardening*.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you could set up a personal desktop or laptop computer as your
    own private server. But if you do, you’ll need to set up port forwarding so that
    the NAT in your home router knows to forward incoming packets to your server.
    Setting up your own server has some other disadvantages. For example, the IP address
    associated with an attack could easily be traced back to you.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we’ll walk through the process of setting up a secure and anonymous
    hacking VPS.
  prefs: []
  type: TYPE_NORMAL
- en: '***Remaining Anonymous with Tor and Tails***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Before you set up your VPS, you’ll want a way to avoid detection. You’ve probably
    heard of using *Tor* to remain anonymous on the internet. Tor is a network of
    computers that routes its traffic from machine to machine like a game of telephone,
    making it difficult to detect the machine from which the traffic originated because
    no node knows both the source and destination.
  prefs: []
  type: TYPE_NORMAL
- en: To use Tor, a user first receives a list of Tor nodes from a public, trusted
    source called the *Tor Directory Authorities*, and then establishes an encrypted
    connection to a node in the network known as the *entry node*. The Tor client
    will use the encrypted connection with the entry node to establish an encrypted
    connection with another node. This is analogous to placing an encrypted envelope
    within another envelope, and it prevents intermediate Tor nodes from reading the
    message. This process of establishing encrypted connections within other encrypted
    connections continues until the Tor client selects a node to use as the *exit
    node*. The exit node is a node that establishes a connection to the server or
    website that the user wants to access. The packet that is sent to the server will
    contain the source address of the Tor exit node only. This means that, from the
    server’s perspective, the traffic will have appeared to have originated from the
    exit node ([Figure 16-1](ch16.xhtml#ch16fig1)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/ch16fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 16-1: How the Tor network transmits data*'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to note that Tor does not hide the fact that you are using
    Tor from your ISP or from state actors. The list of Tor relays is public and your
    ISP can see the IP addresses it routes on your behalf. Thus, your ISP can detect
    your first connection to a Tor relay. However, tracking subsequent Tor relay connections
    is more difficult, especially if they are located outside of the country where
    the connection was initiated. This means that your ISP can detect that you are
    using Tor, but they can’t determine what sites you are visiting by using it. State
    actors can guess which sites a Tor user visits using a *correlation attack*, an
    attack in which a state actor monitors when a user sends traffic into Tor and
    when the traffic exits. By looking at timing and traffic patterns, a state-level
    actor can guess which sites you access. You can learn more about these attacks
    by reading by Yixin Sun’s paper “RAPTOR: Routing Attacks on Privacy in Tor” (*USENIX
    Security Symposium*, 2015).'
  prefs: []
  type: TYPE_NORMAL
- en: Tor also does not encrypt this final leg in the connection, so you must ensure
    that you establish a secure connection with the server by using HTTPS. Lastly,
    Tor doesn’t protect you from the server you’re accessing. Any data that you provide
    to that server can be extracted if it is compromised or subpoenaed, and if you
    visit a malicious site using Tor, the site could still compromise your machine
    by installing malware that will de-anonymize your session.
  prefs: []
  type: TYPE_NORMAL
- en: '*Tails* is a Linux distribution created by the Tor project that routes all
    traffic through Tor. It also includes the *Tor Browser Bundle*, which is a web
    browser that comes preinstalled with HTTPS Everywhere and NoScript. Recall from
    [Chapter 2](ch02.xhtml#ch2) that HTTPS Everywhere is a tool that tries to limit
    the amount of unencrypted traffic your browser sends. This reduces the likelihood
    that someone intercepting traffic will discover you. NoScript is a browser plug-in
    that prevents JavaScript from being executed in your browser, preventing an attacker
    from using JavaScript to load a reverse shell onto your machine. Tails also includes
    a Bitcoin wallet. You can run Tails from a USB stick, and it will not write to
    the disk, leaving no sign of the system after you unplug the USB stick. You can
    find instructions for downloading and installing Tails at *[https://tails.boum.org/install/index.en.html](https://tails.boum.org/install/index.en.html)*.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Setting Up a Virtual Private Server***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: After you’ve downloaded and installed Tails, use it to set up your VPS.
  prefs: []
  type: TYPE_NORMAL
- en: Services like Amazon Web Services, DigitalOcean, and Vultr make setting up a
    VPS easy and affordable. However, this comes at the cost of anonymity given that
    the service will have your name and billing information. Thus, consider using
    *[https://BitLaunch.io/](https://BitLaunch.io/)* to remain anonymous by using
    Bitcoin to purchase a VPS. It works with either DigitalOcean or Vultr. The Bitcoin
    blockchain is public, and it stores all transactions between users. So, everyone
    sees that user X paid user Y two Bitcoin; however, no one sees user X’s or Y’s
    real names, only their public keys. Other cryptocurrencies, like Monero, hide
    transaction information, making transactions untraceable.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 16-2](ch16.xhtml#ch16fig2) shows an overview of the setup. An attacker
    running Tails uses the Tor network to anonymously access the VPS. They then use
    this VPS to communicate with a reverse shell on the victim’s machine.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/ch16fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 16-2: Using Tails to connect to the VPS*'
  prefs: []
  type: TYPE_NORMAL
- en: If the victim discovers the reverse shell, they will be able to trace the attack
    back to the VPS, but it will be difficult for them to trace the attack back through
    the Tor network to the attacker.
  prefs: []
  type: TYPE_NORMAL
- en: '***Setting Up SSH***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: After you’ve set up your VPS, it’s an excellent idea to configure SSH keys so
    that you can securely access it remotely. You shouldn’t use username and password
    pairs, because tools like Hydra allow attackers to brute-force username and password
    combinations. Instead, it’s best to log in using asymmetric cryptography techniques.
  prefs: []
  type: TYPE_NORMAL
- en: To do so, you’ll generate a public–private key pair and then upload a copy of
    the public key to the server, which it will use to authenticate the user. [Figure
    16-3](ch16.xhtml#ch16fig3) shows an overview of this authentication process.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/ch16fig03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 16-3: Using asymmetric cryptography to authenticate with an SSH server*'
  prefs: []
  type: TYPE_NORMAL
- en: The client initiates the connection ➊. Then, the server responds by sending
    a challenge nonce ➋. Once the client receives the nonce, it encrypts the nonce
    with the client’s private key and sends the encrypted nonce back to the server
    ➌. The server then decrypts the nonce using the client’s public key, and if the
    nonce matches, the client is authenticated ➍. Now let’s generate the public–private
    key pair on the Tails device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the command `**ssh-keygen**` in the Tails machine to create a public–private
    key pair using the ECDSA algorithm discussed in [Chapter 6](ch06.xhtml#ch6):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Save the keys to the default path by pressing ENTER when prompted for the filename.
    Next, create a long and secure passphrase. If someone gains access to your Tails
    operating system and steals the secret key, they could try cracking the passphrase
    using a dictionary-based attack and access your VPS.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you’ve generated your key pairs, you’ll need to copy your public key
    to the server. Copy your public key to the server by using the `ssh-copy-id` utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, you should be able to log in to the machine as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you’ve set up authentication using asymmetric cryptography, it is
    also a good idea to edit the *ssh_config* file to prevent password logins and
    root logins. You can open this file in Vim like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '***Installing Your Hacking Tools***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you have your VPS set up and can connect to it securely and anonymously,
    it’s time to install the hacking tools you’ll need. You can choose to follow one
    of two approaches to setting up your VPS. The first approach is to install only
    the tools you need. For example, if you’re testing for XSS vulnerabilities, you
    could create a server that runs the BeEF Framework and nothing else. This approach
    minimizes the number of applications running on your VPS, thereby reducing its
    attack surface. (Remember that the only tools you can truly trust are those that
    you’ve built yourself.)
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you could create a general-purpose machine containing many hacking
    tools. Started by David Kennedy, the *PenTesters Framework (PTF)* contains Python
    scripts that make it easy to download and install the latest hacking tools. PTF
    is also an excellent resource for discovering new tools.
  prefs: []
  type: TYPE_NORMAL
- en: You don’t need to create your own custom machine. You could also install Kali
    Linux or Parrot OS on your VPS. However, these machine don’t come with an SSH
    server installed, so you’ll need to install an SSH server to log in remotely.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we’ll assume that you’ve elected to create a custom VPS running Debian
    Linux, but these scripts should work on most Linux-based systems. First, install
    `git` on your VPS (`**apt-get install git**`) and then clone the PTF repository
    to your new VPS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, install `python3-pip`, use `pip3` to install the requirements, and run
    PTF (`./ptf`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'When you want to use a module, install it by specifying the path to the installation
    script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can find all the installation scripts by looking in the Git repository.
    After the tool installs, you can use it just as you did before. Run the following
    command to install every tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This installation will take some time.
  prefs: []
  type: TYPE_NORMAL
- en: '***Hardening the Server***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Hardening is the process of configuring your server to protect it from attack.
    For example, you might password-protect the GRUB boot loader to prevent an attacker
    from modifying the boot process. Or you can install a tool like *ArpWatch*, developed
    by Lawrence Berkeley National Laboratory, to detect ARP spoofing attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Be careful when hardening your machine because you can end up locking yourself
    out of it or limiting its capabilities. For example, it’s common to disable compilers
    to prevent an attacker from compiling malware on your server. However, as an ethical
    hacker, you’ll need a compiler to compile your tools, so you might prefer to skip
    this hardening step.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *Center for Internet Security (CIS)* maintains a list of recommendations
    for securing systems called the CIS Benchmarks. Use these to harden your VPS,
    and keep them in mind when auditing a company’s security. Open source tools like
    `Jshielder`, `debian-cis`, and `nixarmor` will automatically apply many of the
    CIS recommendations to your server. You can install `JShielder` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate to the *JShielder* folder and run the *JShielder.sh* script (`.\JShielder`),
    which will prompt you to select the operating system that you’d like to harden:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: These hardening tools will often install rootkit detection tools like `rkhunter`
    or `chkrootkit`. They might also install intrusion prevention systems like `fail2ban`,
    which updates your firewall’s rules to ban IP addresses after multiple failed
    login attempts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many automatic hardening tools will use the `iptables` utility to configure
    the firewall’s rules. If you’d like to alter firewall rules yourself, you can
    use one of several frontends developed for iptables. The best one is the *Uncomplicated
    Firewall*, which you can install by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'After you’ve installed it, you can begin configuring your firewall using only
    a couple of commands. For example, the following command sets the default policy
    to deny all incoming packets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You then can start adding some exceptions. For example, we might want to allow
    SSH connections and connections on port 8080 so that implants can connect to our
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'When you’re done configuring the rules, enable the firewall by running the
    `**ufw enable**` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, use the `ufw status` command to view the firewall’s state and a summary
    of the rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Another useful tool called *SELinux* was developed by the NSA and Red Hat, and
    it adds an extra policy attribute to the operating system’s files. This policy
    attribute, in conjunction with the SELinux policy rules, governs how these files
    are accessed and modified. When a process attempts to access a file, SELinux will
    check the file’s policy attributes to determine if process is allowed to access
    the file. SELinux also logs the accesses it blocks, making these logs a great
    place to check for suspected intrusions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to install SELinux with the default policy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'When the installation completes, activate SELinux and reboot your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In addition to hardening your server, you should also enable full disk encryption.
  prefs: []
  type: TYPE_NORMAL
- en: '***Auditing Your Hardened Server***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'After you have hardened your system, do a quick audit to see how well you did.
    The open source tool *Lynis* lets you audit your system against the CIS benchmarks.
    Run the following command to install Lynis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then run it using `**sudo**`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The report will print areas where you can improve and gives you a hardening
    index score ➊. The associated detailed report ➋ contains output of each test that
    Lynis ran. For example, Lynis checks to see whether the server has the Snort intrusion
    detection system installed. The results of this test are available in the report.
  prefs: []
  type: TYPE_NORMAL
- en: '**Other Topics**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I’ve chosen to highlight the following topics because I find them interesting
    and I hope that by sharing them they will spark your interest, as well. Let’s
    begin by looking at one of my favorite topics, software-defined radios.
  prefs: []
  type: TYPE_NORMAL
- en: '***Software-Defined Radios***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: So far, we’ve focused on collecting and analyzing electrical signals that flow
    across the wires in our network. But radio signals loaded with information float
    around us every day. These signals include cellular and satellite communications,
    police radio chatter, and even the FM signals for car stereos.
  prefs: []
  type: TYPE_NORMAL
- en: '*Software-defined radios (SDRs)* convert radio signals into digital signals
    that you can analyze on a computer. SDRs are also programmable, letting you convert
    an SDR into an AM receiver like the one you would find in a car or even receive
    satellite images from NOAA weather satellites. My favorite SDR application uses
    it as a ground station to communicate with the amateur radio transpoders on the
    Es’hail 2/QO-100 geosynchronous satellite. The transponders on this satellite
    are free and publicly available to any amateur radio enthusiast.'
  prefs: []
  type: TYPE_NORMAL
- en: There are several SDRs on the market. I recommend the *ADALM-Pluto RF* developed
    by Analog Devices, an entry-level SDR with amazing documentation. The Pluto runs
    Linux, and you can write programs to process the digital values it records.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also great open source tools for working with SDR. *GNU Radio* allows
    you to visually program an SDR by dragging and dropping blocks of functionality.
    You can install it on Kali Linux by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The NSA also has its own SDR tool, called *Redhawk*, which it has made publicly
    available. The documentation on Redhawk is impressive. You can read more about
    Redhawk on its website at *[https://redhawksdr.org](https://redhawksdr.org)*.
  prefs: []
  type: TYPE_NORMAL
- en: One of the best resources for learning about SDRS is *[https://sdrforengineers.github.io](https://sdrforengineers.github.io)*.
    It has several coding examples, as well as video lectures by Alexander Wyglinski,
    and labs by Travis Collins (see the flipped class section at *[https://www.youtube.com/playlist?list=PLBfTSoOqoRnOTBTLahXBlxaDUNWdZ3FdS](https://www.youtube.com/playlist?list=PLBfTSoOqoRnOTBTLahXBlxaDUNWdZ3FdS)*).
  prefs: []
  type: TYPE_NORMAL
- en: '***Attacking Cellular Infrastructure***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Attacking the public cellular infrastructure is illegal and unethical. If you
    try any of the attacks described here, you should use a Faraday cage, a device
    that will isolate your test environment and prevent any signals from entering
    or leaving the cage, to keep you from intercepting any outside signals.
  prefs: []
  type: TYPE_NORMAL
- en: That said, specialized hacking tools can do things like track cellphone users.
    Each mobile subscriber is assigned an ID called the *international mobile subscriber
    identity (IMSI)* that permanently identifies them as a 4G subscriber. When a subscriber
    moves to a new location, their cellphone registers their IMSI with a tower in
    that area. The Harris Corporation makes a tool, called *Stingray*, that allows
    law enforcement agencies to track cellphone subscribers. It works by pretending
    to be a cell tower. When a user is within range of a Stingray, their cellphone
    will connect to it and send the subscriber’s IMSI.
  prefs: []
  type: TYPE_NORMAL
- en: Stingrays are expensive, but you can use an SDR to build your own IMSI catcher.
    One example of an open source IMSI catcher project is *IMSI-catcher* (*[https://github.com/Oros42/IMSI-catcher](https://github.com/Oros42/IMSI-catcher)*).
    Once an attacker has a subscriber’s IMSI, the attacker can impersonate the subscriber,
    make calls, and send text messages. By pretending to be a cell tower, an attacker
    can also perform a downgrade attack. Thus, a fake cell tower can force a cellphone
    to downgrade from 4G to a less secure 2G or 3G connection.
  prefs: []
  type: TYPE_NORMAL
- en: '***Escaping the Air Gap***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Suppose that you have a machine containing information that you really want
    to protect. You might decide to completely disconnect the machine from the network.
    Machines that are disconnected in this way are called airgapped machines.
  prefs: []
  type: TYPE_NORMAL
- en: However, sometimes even disconnecting the machine isn’t enough. For example,
    an attacker could compromise the supply chain and insert malicious code into a
    machine before it is shipped to the victim. This way, they could still steal information
    from the machine even if it isn’t connected to a network; in the absence of a
    network, an attacker must create their own by some other means.
  prefs: []
  type: TYPE_NORMAL
- en: In 2014, Michael Hanspach and Michael Goetz showed it was possible to build
    a network of computers that communicated using ultrasonic signals. This approach
    has been used in other applications. For example, the Singaporean marketing company
    Silverpush embedded ultrasonic beacons in TV ads. These beacons were picked up
    by apps on users’ smartphones, allowing Silverpush to monitor what ads a user
    watched. This is part of a broader strategy called *cross-device tracking* and
    is a great example of making a network where none exists.
  prefs: []
  type: TYPE_NORMAL
- en: More recently, a project called *System Bus Radio* (*[https://github.com//fulldecent/system-bus-radio](https://github.com//fulldecent/system-bus-radio)*)
    demonstrated that a computer’s hardware bus could be transformed into a transmitter
    by sending carefully crafted messages. This is a clever way to create a radio
    transmitter on a machine that doesn’t have one. A receiver outside the building
    then could pick up these signals.
  prefs: []
  type: TYPE_NORMAL
- en: '***Reverse Engineering***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Throughout the book, we’ve looked at the design and architecture of malware.
    However, as an ethical hacker, you’ll likely encounter more complex malware written
    by malicious actors. You’ll need to reverse engineer such malware to discover
    how it works. There are several excellent books on this topic. One of the best
    ones, *Practical Malware Analysis: The Hands-On Guide to Dissecting Malicious
    Software* by Michael Sikorski and Andrew Honig (No Starch Press, 2012), has several
    useful labs. The *Malware Must Die* blog at *[https://blog.malwaremustdie.org](https://blog.malwaremustdie.org)*
    also has great posts on malware analysis. I recommend adding it to your RSS feed.
    I also recommend *The Ghidra Book: The Definitive Guide* by Chris Eagle and Kara
    Nance (No Starch Press, 2020), to learn more about the Ghidra reverse-engineering
    tool.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Physical Hacking Tools***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have physical access to the network or machine that you’re trying to
    hack, you’ll be able to use physical tools to compromise the network. *Hak5* makes
    an amazing collection of physical hacking tools. For example, the *USB Rubber
    Ducky* is a USB stick that emulates a keyboard. When the attacker plugs it into
    a machine, it will enter commands and download a payload. *Bash Bunny* is a mini
    Linux computer that can emulate any USB device and allows you to run custom scripts.
    The *LAN Turtle* is a man-in-the-middle tool that you can install on an Ethernet
    cable. The *Shark Jack* is a miniature computer that can be plugged in to any
    open networking port. Lastly, the *Wi-Fi Pineapple* is a malicious Wi-Fi router
    that you can use to compromise devices when they connect to it. You can purchase
    all these tools together in the Hak5 field kit.
  prefs: []
  type: TYPE_NORMAL
- en: '***Forensics***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As an ethical hacker, you might find yourself investigating attacks. For example,
    an enterprise might ask you to investigate how it was compromised. In these cases,
    you’ll find the *Computer Aided INvestigative Environment (CAINE)* Linux distribution
    helpful. CAINE is loaded with a collection of amazing forensics analysis tools
    that allow you to recover deleted files and photographs, analyze hard drives,
    and even investigate attacks on mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: '***Hacking Industrial Systems***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In 2010, the Stuxnet malware attacked an Iranian facility used to enrich uranium.
    The malware caused the centrifuges in the facility to spin out of control, resulting
    in their catastrophic failure.
  prefs: []
  type: TYPE_NORMAL
- en: In particular, Stuxnet targeted the facility’s *programmable logic controllers
    (PLCs)*, which are small computer modules used in industrial control systems.
    Years later, hackers continue to discover new PLC vulnerabilities. In 2016, Ralf
    Spenneberg, Maik Brueggemann, and Hendrik Schwartke presented malware called the
    *PLC-Blaster* at a Black Hat conference. And in 2017, another cyberattack occurred
    at a chemical plant in Saudi Arabia. The malware, nicknamed Triton, also targeted
    PLCs in the plant.
  prefs: []
  type: TYPE_NORMAL
- en: Failures of industrial systems can be catastrophic, so we must audit and secure
    these systems. The *Cybersecurity and Infrastructure Security Agency (CISA)* maintains
    information on vulnerabilities affecting industrial control systems, which you
    can find at *[https://us-cert.cisa.gov/ics/](https://us-cert.cisa.gov/ics/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '***Quantum Computation***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The invention of a scalable quantum computer has the potential to revolutionize
    cybersecurity. For example, we would be able to easily crack 2,048-bit RSA encryption
    and search through large databases quickly. Once we have a scalable quantum computer,
    we’ll also be able to develop new quantum machine learning algorithms. However,
    many of these ideas are still in the early research phase. Because quantum computing
    is still an active area of research, it can be difficult to find resources that
    help you to get started as a beginner. Qiskit’s textbook at *[https://qiskit.org/textbook/preface.html](https://qiskit.org/textbook/preface.html)*
    is a fantastic read, filled with interactive exercises. The book will take you
    from not knowing anything about quantum computation to writing a scalable version
    of Shor’s quantum algorithm for factoring numbers. It also includes math primers
    to help you understand quantum computation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Connect with Others**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whether you choose to be an active member of the hacking community or a quiet
    and invisible observer, here are some communities that you can join to share your
    creations and keep up to date on emerging trends. My personal favorite is Hacker
    News (*[https://news.ycombinator.com](https://news.ycombinator.com)*), a forum
    created by the venture capital firm Y Combinator. People post new developments
    and interesting papers there all the time. Attending conferences like Defcon,
    Black Hat, and Usenix is another great way to meet people and listen to cutting-edge
    research talks. Lastly, join the Hack the Box (*[https://hackthebox.eu](https://hackthebox.eu)*)
    community. Hack the Box has an extensive collection of vulnerable machines that
    you can practice hacking.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember: always act ethically.'
  prefs: []
  type: TYPE_NORMAL
