- en: '**1 Basics of Memory Extraction**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1 内存提取的基础**'
- en: Before we jump into exploits that extract firmware from locked microcontrollers,
    let’s take a chapter to consider the basics. Let’s briefly race through many of
    the methods that might work, then in later chapters we will learn those same attacks
    in detail.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入讨论从锁定的微控制器中提取固件的漏洞利用之前，让我们先回顾一下基本内容。我们将简要地浏览可能有效的许多方法，然后在后续章节中详细学习这些攻击。
- en: First, it’s important to collect all of the available documentation on the chip,
    its debugging mechanism, and its bootloaders.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，收集关于芯片、其调试机制和启动加载程序的所有可用文档非常重要。
- en: For publicly documented chips, you’ll want the datasheet, the family guide,
    a few reference designs, and a working cross compiler. Only by first understanding
    how the chip would be programmed in a factory will you find the bug that dumps
    the firmware out.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于公开文档的芯片，你需要获取数据手册、系列指南、一些参考设计和一个可用的交叉编译器。只有首先了解芯片在工厂中是如何被编程的，才能找到那些会将固件转储出来的
    bug。
- en: 'Perhaps I should back up a little and explain these terms. A datasheet is a
    short description of the chip, usually less than a hundred pages and describing
    what you need to build a circuit board for it. Family guides go by different names:
    programmer’s guide, integration guide, user’s guide, or whatever the vendor feels
    like that week. They usually describe a whole family of related parts, and they’ll
    refer you to still more documentation. Reference designs are schematics, source
    code, and CAD files that chip vendors encourage engineers to copy as a way to
    get their chips into finished products.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 或许我应该稍微解释一下这些术语。数据手册是芯片的简短描述，通常不到一百页，介绍了你需要构建电路板的内容。系列指南有不同的名称：程序员指南、集成指南、用户指南，或者供应商那一周愿意使用的名称。它们通常描述一整个相关部件的系列，并且会指向更多的文档。参考设计包括原理图、源代码和
    CAD 文件，芯片供应商鼓励工程师复制这些内容，以便将他们的芯片嵌入到成品中。
- en: For undocumented and unlabeled chips, you’ll have to make do with what few scraps
    you can acquire, such as designs for related chips or leaked documentation from
    developers. With a little luck, these clues will lead to something useful. When
    reverse engineering the Tytera MD380’s proprietary radio chip, labeled as HR C5000,
    a confidential developer’s guide in Chinese was found through `DocIn.com`.^([1](footnotes.xhtml#ch1fn1))
    Reverse engineering a modern Tamagotchi toy, Natalie Silvanovich sorted through
    dozens and dozens of die bonding photographs to identify that an unlabeled microcontroller
    was a General Plus GPLB52X, for which datasheets could then be found.^([2](footnotes.xhtml#ch1fn2))
    While the RF430TAL152 RFID chip in the Freestyle Libre glucose monitor is undocumented,
    the publicly documented RF430FRL152 is nearly identical except for minor details,
    such as its ROM contents.^([3](footnotes.xhtml#ch1fn3))
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于未公开文档或未标识的芯片，你只能利用你能获得的少量线索，比如相关芯片的设计或从开发者那里泄漏的文档。运气好的话，这些线索可能会引导你找到有用的内容。在逆向工程
    Tytera MD380 的专有无线电芯片 HR C5000 时，曾通过 `DocIn.com` 找到了一份中文的机密开发者指南。^([1](footnotes.xhtml#ch1fn1))
    在逆向工程现代的 Tamiagotchi 玩具时，Natalie Silvanovich 浏览了成百上千张芯片焊接照片，识别出一个未标识的微控制器是 General
    Plus GPLB52X，然后找到了其数据手册。^([2](footnotes.xhtml#ch1fn2)) 虽然 Freestyle Libre 血糖监测仪中的
    RF430TAL152 RFID 芯片没有公开文档，但公开文档中的 RF430FRL152 除了 ROM 内容等细节外几乎完全相同。^([3](footnotes.xhtml#ch1fn3))
- en: It is tempting to jump straight to attacking a chip, without first using the
    chip as a developer, but you’ll notice that nearly every exploit in this book
    begins with an understanding of the target’s nuances. For any new chip, take the
    time to draw out its memory map, to explore an unlocked chip with a debugger,
    and to really understand how the chip is used. If at all possible, don’t skip
    the step of compiling and running Hello World on your target!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易直接跳到攻击芯片，而不先作为开发者使用芯片，但你会发现这本书几乎每个漏洞利用都从理解目标的细微差别开始。对于任何新的芯片，花时间绘制出其内存映射，使用调试器探索未锁定的芯片，并真正理解芯片是如何使用的。如果有可能，请不要跳过在目标上编译并运行
    Hello World 这一步！
- en: '**JTAG**'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**JTAG**'
- en: 'For debugging and failure analysis, most chips implement some variant of the
    JTAG protocol in hardware. The classic variant uses four signal wires: TDI, TDO,
    TCK, and TMS. A fifth signal, TRST, is sometimes included, and multiple two-wire
    variants exist for easier routing, such as cJTAG, single wire debug (SWD), and
    spy-bi-wire.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于调试和故障分析，大多数芯片在硬件中实现了某种变种的 JTAG 协议。经典的变种使用四条信号线：TDI、TDO、TCK 和 TMS。第五条信号线 TRST
    有时会包括在内，并且存在多种两线变种，以便更容易布线，例如 cJTAG、单线调试（SWD）和间谍双线（spy-bi-wire）。
- en: These wires all have a purpose. TDI and TDO are serial input and output signals,
    clocked by the TCK signal. TMS selects the mode, letting the debugger move the
    target state machine between different registers. All of these details are abstracted
    away by the debugger hardware and software, and you needn’t dive into them until
    you need to write your own.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这些线路各有其目的。TDI 和 TDO 是串行输入和输出信号，由 TCK 信号时钟控制。TMS 选择模式，让调试器将目标状态机在不同寄存器之间切换。所有这些细节都被调试器的硬件和软件抽象化，直到你需要编写自己的代码时，才需要深入了解这些内容。
- en: If you’re lucky, you have an unlocked chip and can dump the chip by simply connecting
    a JTAG adapter and using a debugger to export the full range of flash memory to
    disk. Developers often leave devices unlocked for failure analysis reasons, so
    that they can more easily improve the manufacturing yield and keep the assembly
    line running. Some devices don’t even support locking, and those are always easy
    to read!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你幸运的话，你有一颗解锁的芯片，只需连接一个 JTAG 适配器，并使用调试器将完整的闪存范围导出到磁盘。开发人员通常会为了故障分析的原因而将设备保持解锁状态，这样他们可以更容易地提高生产良率并保持装配线的正常运作。有些设备甚至不支持锁定，这些设备总是很容易读取！
- en: If you’re less lucky, the JTAG port will be fully or partially disabled to prevent
    readout, configured by a fuse or a nonvolatile memory flag.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运气不佳，JTAG 端口将被完全或部分禁用，以防止读取，这通常是通过熔丝或非易失性内存标志来配置的。
- en: Full JTAG locks are often bypassed by some form of fault injection, in which
    the electrical, photovoltaic, or electromagnetic requirements of the chip are
    briefly violated to bypass a protection mechanism. For example, the full lock
    on many of the STM32 chips can be degraded to a partial lock by a supply voltage
    glitch after reset.^([4](footnotes.xhtml#ch1fn4)) Many MSP430 chips fall from
    their full lock to an unlocked state if hit by a camera flash.^([5](footnotes.xhtml#ch1fn5))
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 完全 JTAG 锁定通常可以通过某种故障注入方式绕过，其中芯片的电气、光电或电磁要求被短暂违反，从而绕过保护机制。例如，许多 STM32 芯片的完全锁定可以通过重置后的电源电压波动降级为部分锁定。^([4](footnotes.xhtml#ch1fn4))
    许多 MSP430 芯片在遭遇闪光灯时会从完全锁定状态变为解锁状态。^([5](footnotes.xhtml#ch1fn5))
- en: Partial JTAG locks are a little trickier, if only because they are so diverse.
    Generally, a partial lock allows some form of debugging for failure analysis purposes,
    while applying restrictions to flash memory. The STM32F0’s partial protection
    disconnects flash from the data bus after JTAG connects, but it does so a few
    clock cycles too late, so that you can dump memory by repeatedly reconnecting
    to extract a single 32-bit word.^([6](footnotes.xhtml#ch1fn6)) Similarly, the
    partial protection of the STM32F1 can be broken by realizing that interrupt handlers
    are fetched through the instruction bus, so that by relocating the table with
    the vector table offset register (VTOR), one might fire interrupts while single
    stepping and observing registers in order to leak words from flash memory.^([7](footnotes.xhtml#ch1fn7))
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 部分 JTAG 锁定稍微复杂一点，主要是因为它们种类繁多。通常，部分锁定允许进行某种形式的调试，用于故障分析，同时对闪存施加限制。STM32F0 的部分保护在
    JTAG 连接后会断开闪存与数据总线的连接，但它发生的时机稍微晚了一些，因此你可以通过反复重新连接来转储内存，从而提取出单个 32 位字。^([6](footnotes.xhtml#ch1fn6))
    同样，STM32F1 的部分保护可以通过意识到中断处理程序是通过指令总线获取的这一点来打破，因此通过使用向量表偏移寄存器（VTOR）重新定位表，就可以在单步调试时触发中断并观察寄存器，从而泄漏闪存中的字。^([7](footnotes.xhtml#ch1fn7))
- en: '**ROM Bootloaders**'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**ROM引导加载程序**'
- en: Many microcontrollers ship with a mask ROM. The contents and format for these
    vary dramatically, but when present, they’ll usually contain at least a bootloader
    and perhaps also some convenience functions, much like an old IBM PC’s BIOS. The
    bits of these ROMs come from a lithography mask at the time of manufacturing,
    and often you can photograph them to see and decode these bits.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 许多微控制器配备了掩膜 ROM。这些 ROM 的内容和格式差异巨大，但如果存在，通常至少包含一个引导加载程序，也可能包含一些便捷功能，就像旧款 IBM
    PC 的 BIOS 一样。这些 ROM 的位来自制造时的光刻掩膜，通常你可以拍摄它们的照片来查看并解码这些位。
- en: Just like the application code that we’re trying to extract from flash memory,
    the ROM code can be decompiled and reverse engineered. An exploitable bug in this
    code can be difficult or impossible to patch, leading to firmware dumps from entire
    families of chips.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们试图从闪存中提取的应用程序代码一样，ROM 代码也可以被反编译和逆向工程。如果这段代码中存在可利用的漏洞，修复它可能是困难的或不可能的，导致整个芯片系列的固件被转储。
- en: The STM32F2 and STM32F4 ROMs, for a specific example, contain three bootloaders,
    allowing the chips to boot from USB, Serial and CAN bus. These three bootloaders
    contain three different re-implementations of the partial JTAG lock functionality,
    and a software bug in the USB device firmware update (DFU) bootloader allows code
    to be executed from an arbitrary address, which can in turn dump all of a locked
    device’s firmware.^([8](footnotes.xhtml#ch1fn8))
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以 STM32F2 和 STM32F4 的 ROM 为例，包含了三个引导加载程序，使得芯片可以从 USB、串口和 CAN 总线启动。这三个引导加载程序包含了三种不同的
    JTAG 锁定功能的重新实现，而且 USB 设备固件更新（DFU）引导加载程序中的软件漏洞允许从任意地址执行代码，从而能够提取所有受保护设备的固件。^([8](footnotes.xhtml#ch1fn8))
- en: In very high volume chips, you might find custom ROM images. These won’t match
    the ones of the consumer model of the chip, but they are often forked from that
    same code, which can give you clues to their contents before a successful dump.^([9](footnotes.xhtml#ch1fn9))
    Because the bits of the ROM are sometimes visible under a microscope, we can read
    these bits out visually with a bit of patience and software assistance.^([10](footnotes.xhtml#ch1fn10))
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在大批量生产的芯片中，你可能会发现定制的 ROM 镜像。这些镜像与消费型号的芯片不完全相同，但通常是从相同的代码中分叉出来的，这可以在成功提取固件之前提供一些线索。^([9](footnotes.xhtml#ch1fn9))
    因为 ROM 中的某些位在显微镜下是可见的，我们可以借助一定的耐心和软件工具，直接读取这些位。^([10](footnotes.xhtml#ch1fn10))
- en: '**Flash Bootloaders**'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**闪存引导加载程序**'
- en: We’ve already discussed bootloaders in ROM, which come from the chip manufacturer,
    but many device manufacturers will add their own bootloader, either written from
    scratch or forked from a reference design.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论过来自芯片制造商的 ROM 中的引导加载程序，但许多设备制造商会添加他们自己的引导加载程序，可能是从头编写，或者是从参考设计中分叉出来的。
- en: The Tytera MD380, for example, is a two-way radio whose firmware was dumped
    and then patched to add new features for the ham radio community. Its STM32F405
    includes the ROM bootloader mentioned above, but also a second flash bootloader,
    with a custom variant of the DFU protocol. The flash bootloader allows the SPI
    flash chip of the radio to be read and written in cleartext, while the internal
    flash region can only be written, and only with encrypted firmware updates. An
    uninitialized pointer in this bootloader allows the first 48kB of memory to be
    dumped, containing the bootloader.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以 Tytera MD380 为例，它是一款双向无线电，其固件被提取并修改，以为业余无线电社区添加新功能。它的 STM32F405 包括了上述提到的 ROM
    引导加载程序，但还包含第二个闪存引导加载程序，具有 DFU 协议的自定义变种。这个闪存引导加载程序允许读取和写入无线电的 SPI 闪存芯片的明文数据，而内部闪存区域则只能进行写入，且仅限于加密固件更新。此引导加载程序中的未初始化指针允许提取前
    48kB 的内存，其中包含引导加载程序。
- en: By patching this bootloader to leave the chip unlocked, cleartext firmware can
    be freely extracted with JTAG!^([11](footnotes.xhtml#ch1fn11))
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过修改这个引导加载程序使芯片保持解锁状态，可以通过 JTAG 随意提取明文固件！^([11](footnotes.xhtml#ch1fn11))
- en: Whatever your target and whatever your technique, the goal is to get code out
    of a protected chip. With the right techniques and a good understanding of how
    the protection works, almost any chip will fall to a dedicated reverse engineer.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你的目标是什么，方法是什么，最终的目标都是从受保护的芯片中提取代码。掌握了正确的技巧，并且深入理解保护机制的工作原理，几乎任何芯片都能被专注的逆向工程师攻破。
