- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Threat Modeling
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 威胁建模
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: The *threat modeling* process systematically identifies possible attacks against
    a device and then prioritizes certain issues based on their severity. Because
    threat modeling can be tedious, it’s sometimes overlooked. Nonetheless, it’s vital
    to understanding threats, their impact, and the appropriate mitigations you’ll
    have to take to eliminate them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*威胁建模*过程系统地识别可能针对设备的攻击，然后根据其严重性对某些问题进行优先级排序。由于威胁建模可能会显得冗长，因此有时会被忽视。尽管如此，它对于理解威胁、其影响以及你必须采取的适当缓解措施至关重要。'
- en: In this chapter, we walk you through a simple framework for threat modeling
    and discuss a few alternative frameworks. Then we briefly describe some of the
    most important threats that an IoT infrastructure usually encounters so you can
    successfully employ threat modeling techniques in your next IoT assessment.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将带你了解一个简单的威胁建模框架，并讨论几个替代框架。然后，我们简要描述一些物联网基础设施通常遇到的最重要的威胁，帮助你在下次物联网评估中成功运用威胁建模技术。
- en: Threat Modeling for IoT
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 物联网的威胁建模
- en: When you create threat models for IoT devices specifically, you’ll likely run
    into a few recurring issues. The reason is that the IoT world is mostly made up
    of systems with low computing power, power consumption, memory, and disk space
    that are deployed in insecure networking environments. Many hardware manufacturers
    have realized they can easily convert any inexpensive platform, such as an Android
    phone or tablet, a Raspberry Pi, or an Arduino board, into a sophisticated IoT
    device.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当你为物联网设备专门创建威胁模型时，你很可能会遇到一些反复出现的问题。原因在于，物联网世界主要由低计算能力、低功耗、有限内存和磁盘空间的系统组成，这些系统部署在不安全的网络环境中。许多硬件制造商意识到，他们可以轻松地将任何廉价平台，如Android手机或平板、树莓派或Arduino板，转换为复杂的物联网设备。
- en: Consequently, at their core, many IoT devices are running Android or common
    Linux distributions, the same operating systems on more than a billion phones,
    tablets, watches, and televisions. These operating systems are well known, and
    they often provide more functionality than a device needs, increasing the ways
    an attacker can exploit it. Worse, IoT developers supplement the operating systems
    by introducing custom apps, which lack proper security controls. Then, to make
    sure their products can carry out their primary functions, developers often have
    to bypass the operating system’s original protections. Still other IoT devices,
    based on real-time operating systems (RTOS), minimize processing time without
    implementing the security standards of more advanced platforms.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，许多物联网设备的核心运行的是Android或常见的Linux发行版，这些操作系统与超过十亿部手机、平板电脑、手表和电视所使用的相同。这些操作系统是众所周知的，且通常提供的功能超出设备需求，从而增加了攻击者利用设备的方式。更糟的是，物联网开发者通过引入缺乏适当安全控制的自定义应用程序来补充操作系统。然后，为了确保产品能够执行其主要功能，开发者常常不得不绕过操作系统的原始保护。还有一些基于实时操作系统（RTOS）的物联网设备，虽然最小化了处理时间，但并未实施更先进平台的安全标准。
- en: In addition, these IoT devices usually don’t have the capacity to run antivirus
    or anti-malware protections. Their minimalistic designs, developed for ease of
    use, don’t support common security controls, such as *software whitelisting*,
    in which devices allow only specific software to be installed, or *network access
    control (NAC)* solutions, which enforce network policies that control user and
    device access. Many vendors stop offering security updates shortly after the product’s
    initial release. Also, the white-label firms that often develop these products
    distribute them widely through many suppliers under different brand names and
    logos, making security and software updates difficult to apply to all products.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这些物联网设备通常没有运行防病毒或反恶意软件保护的能力。它们的极简设计，旨在简化使用，无法支持常见的安全控制，例如*软件白名单*，在这种控制下，设备只允许安装特定的软件，或*网络访问控制（NAC）*解决方案，它执行网络策略，控制用户和设备的访问。许多厂商在产品初次发布后不久就停止提供安全更新。此外，通常开发这些产品的白标公司通过许多供应商在不同品牌名称和标志下广泛分发它们，这使得安全性和软件更新难以应用到所有产品。
- en: These limitations force many internet-enabled devices to use proprietary or
    lesser-known protocols that don’t meet the industry security standards. Often,
    they can’t support sophisticated hardening approaches, such as the *software integrity
    control*, which verifies that third parties haven’t tampered with executables,
    or *device attestation*, which uses specialized hardware to ensure that a target
    device is legitimate.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这些局限性迫使许多联网设备使用专有的或不太知名的协议，这些协议未能达到行业安全标准。通常，它们无法支持复杂的加固方法，比如*软件完整性控制*，它可以验证第三方是否篡改了可执行文件，或*设备验证*，它使用专用硬件来确保目标设备的合法性。
- en: Following a Framework for Threat Modeling
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遵循威胁建模框架
- en: 'The easiest way to use threat modeling in your security assessments is to follow
    a framework like the *STRIDE threat classification model*, which focuses on identifying
    weaknesses in the technology rather than vulnerable assets or possible attackers.
    Developed by Praerit Garg and Loren Kohnfelder at Microsoft, STRIDE is one of
    the most popular threat classification schemes. The acronym represents the following
    threats:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在安全评估中使用威胁建模的最简单方法是遵循像*STRIDE威胁分类模型*这样的框架，该模型侧重于识别技术中的弱点，而不是易受攻击的资产或潜在的攻击者。STRIDE由微软的Praerit
    Garg和Loren Kohnfelder开发，是最流行的威胁分类方案之一。这个首字母缩略词代表以下几种威胁：
- en: Spoofing When an actor pretends to play the role of a system component
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 欺骗：当一个行为者假装扮演系统组件的角色时
- en: Tampering When an actor violates the integrity of data or a system
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 篡改：当一个行为者破坏数据或系统的完整性时
- en: Repudiation When users can deny they took certain actions on the system
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 否认：当用户可以否认自己在系统上执行了某些操作时
- en: Information Disclosure When an actor violates the confidentiality of the system’s
    data
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 信息披露：当行为者破坏系统数据的机密性时
- en: Denial of Service When an actor disrupts the availability of a system’s component
    or the system as a whole
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务拒绝：当一个行为者破坏系统组件或整个系统的可用性时
- en: Elevation of Privilege When users or system components can elevate themselves
    to a privilege level they shouldn’t have access to
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 权限提升：当用户或系统组件能够提升到不应有的权限级别时
- en: 'STRIDE has three steps: identify the architecture, break it into components,
    and identify threats to each component. To see this framework in action, let’s
    imagine we’re performing threat modeling for a drug infusion pump. We’ll assume
    that the pump connects via Wi-Fi to a control server located in the hospital.
    The network is insecure and lacks segmentation, meaning a visitor to the hospital
    could connect to the Wi-Fi and passively monitor the pump’s traffic. We’ll use
    this scenario to walk through each step of the framework.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: STRIDE包含三个步骤：识别架构，拆解成组件，并识别每个组件的威胁。为了展示这一框架的实际应用，假设我们正在为一个药物输液泵进行威胁建模。我们假设该泵通过Wi-Fi连接到医院内的控制服务器。网络不安全且缺乏分段，这意味着医院的访客可能会连接到Wi-Fi，并被动监控泵的流量。我们将利用这个场景来逐步演示框架的每个步骤。
- en: Identifying the Architecture
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 识别架构
- en: We start our threat modeling by examining the device’s architecture. The system
    consists of the drug infusion pump and a control server that can send commands
    to a few dozen pumps ([Figure 2-1](#figure2-1)). Nurses operate the server, although
    in some cases, authorized IT admins might access it, too.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从检查设备的架构开始我们的威胁建模。系统由药物输液泵和一个能够向数十个泵发送命令的控制服务器组成（[图 2-1](#figure2-1)）。护士操作该服务器，尽管在某些情况下，授权的IT管理员也可能访问它。
- en: '![f02001](Images/f02001.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![f02001](Images/f02001.png)'
- en: 'Figure 2-1: A simple architecture diagram of an infusion pump'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-1：输液泵的简单架构图
- en: The control server sometimes needs software updates, including updates to its
    drug library and patient records. That means it’s sometimes connected to the *electronic
    health record (EHR)* and the update server. The EHR database contains patient
    health records. Even though these two components might be beyond the scope of
    a security assessment, we’re including them in our threat model ([Figure 2-2](#figure2-2)).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 控制服务器有时需要软件更新，包括药物库和患者记录的更新。这意味着它有时会连接到*电子健康记录（EHR）*和更新服务器。EHR数据库包含患者的健康记录。尽管这两个组件可能超出了安全评估的范围，但我们还是将它们包含在我们的威胁模型中（[图
    2-2](#figure2-2)）。
- en: '![f02002](Images/f02002.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![f02002](Images/f02002.png)'
- en: 'Figure 2-2: An expanded architecture diagram of an infusion pump and its control
    server, which is also connected to the EHR and an update server'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-2：输液泵及其控制服务器的扩展架构图，控制服务器还连接到电子健康记录（EHR）和更新服务器
- en: Breaking the Architecture into Components
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将架构拆解成组件
- en: Now let’s look at the architecture more closely. The infusion pump and the control
    server consist of several components, so we need to break down our model to identify
    threats more reliably. [Figure 2-3](#figure2-3) shows the architecture’s components
    in more detail.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们更仔细地观察一下架构。输注泵和控制服务器由多个组件组成，因此我们需要拆解模型，以更可靠地识别威胁。[图2-3](#figure2-3)展示了架构组件的更详细信息。
- en: '![f02003](Images/f02003.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![f02003](Images/f02003.png)'
- en: 'Figure 2-3: Breaking down our threat model further'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-3：进一步拆解我们的威胁模型
- en: The pump system consists of the hardware (the actual pump), an operating system,
    and the software and microcontroller operating inside the pump. We’ve also taken
    into account the control server’s operating system, the *control server service*
    (the program operating the control server), and the restrictive user interface,
    which limits the user’s interaction with the service.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 泵系统由硬件（实际的泵）、操作系统，以及泵内运行的软件和微控制器组成。我们还考虑了控制服务器的操作系统、*控制服务器服务*（运行控制服务器的程序）以及限制性的用户界面，该界面限制了用户与服务的交互。
- en: Now that we have a better idea of the system, let’s establish the direction
    in which information flows between these components. By doing so, we’ll locate
    sensitive data and figure out which components an attacker might target. We might
    also reveal hidden data-flow paths we didn’t know about. Let’s assume that, after
    examining the ecosystem further, we conclude that data flows both ways between
    all components. We’ve noted this using bidirectional arrows in [Figure 2-3](#figure2-3).
    Keep that detail in mind.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对系统有了更清晰的了解，接下来让我们确定这些组件之间信息流动的方向。通过这样做，我们可以定位敏感数据，并找出攻击者可能会攻击的组件。我们可能还会发现一些我们之前不知道的隐藏数据流路径。假设在进一步检查生态系统后，我们得出结论：所有组件之间的数据流动是双向的。我们已经在[图2-3](#figure2-3)中使用双向箭头标记了这一点，请记住这个细节。
- en: Let’s move on by adding trust boundaries to our diagram ([Figure 2-4](#figure2-4)).
    *Trust boundaries* surround groups with the same security attributes, which can
    help us expose data-flow entry points that might be susceptible to threats.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续，在图示中添加信任边界（[图2-4](#figure2-4)）。*信任边界*围绕具有相同安全属性的群组，这有助于我们揭示可能容易受到威胁的数据流入口。
- en: '![f02004](Images/f02004.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![f02004](Images/f02004.png)'
- en: 'Figure 2-4: Diagram with trust boundaries included'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-4：包含信任边界的图示
- en: 'We create separate trust boundaries around the pump, the control server, the
    onsite components, and the offsite components. For practical reasons, we also
    add two external users: the patient who will use the pump and the nurse who will
    operate the control server.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们围绕泵、控制服务器、现场组件和远程组件创建了独立的信任边界。出于实际原因，我们还添加了两个外部用户：使用泵的患者和操作控制服务器的护士。
- en: 'Notice that sensitive information, such as patient data from the pump, can
    reach the third-party vendor’s update server through the control server. Our method
    works: we’ve already spotted our first threat, an insecure update mechanism, which
    could expose patient data to unauthorized systems.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到，像来自泵的患者数据等敏感信息，可以通过控制服务器传递到第三方供应商的更新服务器。我们的方法有效：我们已经发现了第一个威胁——不安全的更新机制，这可能会将患者数据暴露给未经授权的系统。
- en: Identifying Threats
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 识别威胁
- en: Now we’ll apply the STRIDE framework to the diagram’s components, giving us
    a more comprehensive list of threats. Although we’ll discuss only some of those
    components in this exercise for brevity, you should address all of them as part
    of your threat modeling process.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将应用STRIDE框架来分析图示中的组件，给出一个更全面的威胁列表。尽管为了简洁起见，我们在本次练习中只讨论其中一些组件，但你应该在威胁建模过程中涵盖所有组件。
- en: First, we’ll examine the product’s general security requirements. Often, the
    vendor establishes these requirements during development. If we don’t have the
    vendor’s specific list of requirements, we can review the device documentation
    to determine them on our own. For example, as a medical device, the drug infusion
    pump must ensure patient safety and privacy. In addition, all medical equipment
    should be accredited with certifications specific to the market in which it’s
    launched. For instance, devices traded on the extended Single Market in the European
    Economic Area (EEA) should have the Conformité Européenne (CE) certification mark.
    We’ll keep these requirements in mind as we analyze each component.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将审查产品的一般安全要求。通常，这些要求是在开发过程中由供应商确定的。如果我们没有供应商的具体要求清单，我们可以通过查阅设备文档自行确定。例如，作为医疗设备，药物输液泵必须确保患者的安全与隐私。此外，所有医疗设备应获得针对其所处市场的认证。例如，在欧洲经济区（EEA）的扩展单一市场上交易的设备应具备欧盟认证（CE）标志。我们将在分析每个组件时牢记这些要求。
- en: The Restrictive User Interface
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 限制性用户界面
- en: The *restrictive user interface (RUI)* is the kiosk app that interacts with
    the control server service. This app severely limits the actions a user can execute.
    It’s like an ATM app; you can interact with the software but only in a handful
    of ways. In addition to the general security requirements, the RUI has its own
    specific constraints. First, the user shouldn’t be able to escape the app. Second,
    the user must authenticate with valid credentials to access it. Now let’s go through
    each part of the STRIDE model to identify threats.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*限制性用户界面（RUI）*是与控制服务器服务交互的自助应用程序。该应用程序严重限制用户可以执行的操作。它就像一个ATM应用程序；你可以与软件进行互动，但只能以极少数的方式进行互动。除了通用的安全要求外，RUI还有其特定的约束条件。首先，用户不应该能够退出该应用程序。其次，用户必须使用有效的凭据进行身份验证才能访问它。现在，让我们逐一分析STRIDE模型中的每个部分，以识别潜在的威胁。'
- en: When it comes to *spoofing*, the RUI authenticates users with weak, four-digit
    PINs that adversaries can easily predict. If attackers predict the PIN correctly,
    they can access authorized accounts and send commands to the infusion pump on
    behalf of the accounts’ owners.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在*欺骗*方面，RUI使用弱的四位数PIN进行用户认证，攻击者很容易预测这些PIN。如果攻击者猜对了PIN，他们就可以访问授权账户，并代表账户所有者向输液泵发送命令。
- en: In terms of *tampering*, the RUI can receive input other than the limited set
    of allowed input. For example, it could receive input through an external keyboard.
    Even if most of the keyboard keys have been disabled, the system might still allow
    key combinations, such as shortcuts, hotkeys, or even accessibility features configured
    by the underlying operating system (like closing a window by pressing alt-F4 on
    Windows). These could allow users to bypass the RUI and exit the kiosk application.
    We’ll describe this kind of attack in Chapter 3\.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 就*篡改*而言，RUI可以接收除了有限允许的输入以外的其他输入。例如，它可能通过外部键盘接收输入。即使大多数键盘键已被禁用，系统仍可能允许某些键组合，比如快捷键、热键，或甚至由底层操作系统配置的辅助功能（例如，在Windows中按alt-F4关闭窗口）。这些可能允许用户绕过RUI并退出自助服务应用程序。我们将在第3章中描述这种攻击。
- en: For *repudiation*, the RUI supports only a single user account for the medical
    staff, making all the log files, if any exist, useless because you can’t identify
    who actually used the device. Because the RUI can’t operate in multiuser mode,
    any member of the medical team can access the control server and operate the infusion
    pump without the system being able to distinguish between them.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在*否认*方面，RUI仅支持一个医疗工作人员账户，使得所有日志文件（如果存在的话）都变得毫无用处，因为你无法识别到底是谁使用了该设备。由于RUI不能在多用户模式下运行，任何医疗团队成员都可以访问控制服务器并操作输液泵，而系统无法区分他们。
- en: When it comes to *information disclosure*, it’s possible that certain debugging
    messages or errors, when presented to the user, might reveal important information
    about the patients or system internals. Adversaries might be able to decode these
    messages, discover technologies the underlying system uses, and figure out a way
    to exploit them.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 说到*信息披露*，某些调试消息或错误在展示给用户时，可能会透露有关患者或系统内部的重要信息。攻击者可能能够解码这些消息，发现底层系统使用的技术，并找出一种方式加以利用。
- en: The RUI might be vulnerable to *denial of service* attacks because of its brute-force
    protection mechanism, which locks a user out of the system after five consecutive
    incorrect login attempts. Once the brute-force protection is active, no user can
    log into the system for a set period of time. If the medical team accidentally
    triggers this feature, they might block access to the system and violate the patient
    safety security requirement as a result. Even though security features might protect
    against some threats, they’ll often cause other threats. Finding the balance between
    security, safety, and usability is a difficult task.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于RUI的暴力破解保护机制，它可能容易受到*拒绝服务*攻击。如果用户连续五次登录失败，系统会锁定该用户。一旦暴力破解保护启动，任何用户都无法在设定的时间内登录系统。如果医疗团队不小心触发了该功能，可能会导致无法访问系统，进而违反患者安全的安全要求。即使安全功能可能防止一些威胁，它们往往会引发其他威胁。在安全、可用性和可用性的平衡之间找到合适的解决方案是一个艰巨的任务。
- en: In terms of *elevation of privilege*, critical medical systems frequently have
    remote support solutions that allow the vendor’s technicians to access the software
    instantly. The existence of these features automatically increases the component’s
    threat surface, because these services are prone to vulnerabilities, and attackers
    can abuse them to get remote administrative access within the RUI or the control
    server service. Even if these features require authentication, the credentials
    might be publicly available or be the same for all products of this line. Or there
    could be no authentication at all.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 就*权限提升*而言，关键医疗系统通常具有远程支持解决方案，允许供应商的技术人员即时访问软件。这些功能的存在自动增加了组件的威胁面，因为这些服务容易受到漏洞的影响，攻击者可以利用它们获得RUI或控制服务器服务的远程管理员权限。即使这些功能需要身份验证，凭据也可能公开可用，或在该系列产品中是相同的。或者根本没有身份验证。
- en: The Control Server Service
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 控制服务器服务
- en: The control server serviceis the app that operates the control server. It’s
    responsible for communicating with the RUI, the drug library, and the drug infusion
    pump. It also communicates with the EHR (to receive information about the patients)
    using HTTPS and with the update server (to receive software and drug library updates)
    using a custom TCP protocol.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 控制服务器服务是操作控制服务器的应用程序。它负责与RUI、药物库和药物输注泵进行通信。它还使用HTTPS与EHR（接收患者信息）进行通信，并使用自定义TCP协议与更新服务器（接收软件和药物库更新）进行通信。
- en: In addition to the general security requirements mentioned earlier, the control
    server should be able to identify and verify drug infusion pumps to avoid *skimming
    attacks*, in which an adversary replaces peripheral components with similar, tampered
    ones. We should also make sure the data-in-transit is protected. In other words,
    the communication protocol between the control server and the pump must be secure
    and shouldn’t allow for replay attacks or interception. *Replay attacks* cause
    the retransmission or delay of a critical or state altering request to the server.
    Additionally, we must ensure that attackers can’t compromise the hosting platform’s
    security controls, which might include application sandboxing, filesystem permissions,
    and existing role-based access controls.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面提到的一般安全要求外，控制服务器应能够识别和验证药物输注泵，以避免*窃取攻击*，即对手用类似的、被篡改的外部组件替换原有组件。我们还应确保数据传输过程中的保护。换句话说，控制服务器与泵之间的通信协议必须是安全的，不能允许重放攻击或拦截。*重放攻击*会导致关键请求或状态更改请求的重传或延迟。此外，我们还必须确保攻击者无法妥协主机平台的安全控制，这可能包括应用程序沙箱、文件系统权限和现有的基于角色的访问控制。
- en: Using STRIDE, we can identify the following threats. *Spoofing* attacks could
    occur because the control server doesn’t have a solid method of identifying drug
    infusion pumps. If you briefly analyze the communication protocol, you can imitate
    a pump and communicate with the control server, which might lead to more threats.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用STRIDE模型，我们可以识别出以下威胁。由于控制服务器没有可靠的药物输注泵识别方法，*欺骗*攻击可能发生。如果简要分析通信协议，你可以模拟一个泵并与控制服务器通信，这可能导致更多的威胁。
- en: An attacker could *tamper* with the service, because the control server doesn’t
    have a solid method of verifying the data integrity that the drug infusion pump
    sends. That means the control server might be vulnerable to *man-in-the-middle
    attacks*, in which an attacker modifies the data sent to the control server and
    provides the server with falsified readings. If the control server bases its actions
    on the falsified readings, this attack might directly affect the patients’ health
    and safety.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可能会*篡改*服务，因为控制服务器没有可靠的方式验证药物输注泵发送的数据完整性。这意味着控制服务器可能容易受到*中间人攻击*，攻击者修改发送到控制服务器的数据，并向服务器提供伪造的读数。如果控制服务器根据这些伪造的读数做出决策，攻击可能直接影响患者的健康与安全。
- en: The control server might enable *repudiation* because it uses *world-writeable
    logs*, which any system user is capable of overwriting, to monitor its actions.
    These logs files can be subject to insider tampering by an attacker to hide certain
    operations.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 控制服务器可能会导致*否认*，因为它使用*全球可写日志*来监控其操作，任何系统用户都能够覆盖这些日志文件。这些日志文件可能会被攻击者篡改，以隐藏某些操作。
- en: Regarding *information disclosure*, the control server unnecessarily sends sensitive
    patient information to the update server or drug infusion pump. This information
    could range from vital measurements to personal information.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 关于*信息泄露*，控制服务器不必要地将敏感的患者信息发送给更新服务器或药物输注泵。这些信息可能包括从生命体征到个人信息的各种内容。
- en: In terms of *denial of service*, adversaries in close proximity to the control
    server can jam the server’s signal and disable any kind of wireless communication
    with the drug infusion pump, rendering the whole system useless.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 就*拒绝服务*而言，接近控制服务器的对手可以干扰服务器的信号，禁用与药物输注泵的任何无线通信，使整个系统无法使用。
- en: Additionally, the control server might be vulnerable to *elevation of privilege*
    if it inadvertently exposes API services that allow unauthenticated adversaries
    to perform high-privileged functionalities, including altering the drug infusion
    pump settings.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，控制服务器可能容易受到*权限提升*的攻击，如果它不小心暴露了允许未经身份验证的对手执行高权限功能的API服务，包括更改药物输注泵的设置。
- en: The Drug Library
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 药物库
- en: The drug library is the system’s main database. It holds all information related
    to the drugs the pump uses. This database can also control the user management
    system.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 药物库是系统的主要数据库。它包含泵使用的所有药物信息。该数据库还可以控制用户管理系统。
- en: In terms of *spoofing*, users interacting with the database through the RUI
    or pump might be able to execute actions by impersonating other database users.
    For instance, they might exploit an application vulnerability to abuse the lack
    of controls for the user’s input from the RUI.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 就*欺骗*而言，通过RUI或泵与数据库交互的用户可能会通过冒充其他数据库用户来执行操作。例如，他们可能会利用应用程序漏洞，滥用RUI中缺乏对用户输入的控制。
- en: The drug library might be vulnerable to *tampering* if the library fails to
    properly sanitize user input from the RUI. This could lead to *SQL injection attacks*,
    which allow attackers to manipulate the database or execute untrusted code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果药物库未能正确清理来自RUI的用户输入，可能会受到*篡改*的威胁。这可能导致*SQL注入攻击*，允许攻击者操控数据库或执行不可信的代码。
- en: The database could allow *repudiation* if logs for user requests originating
    from the drug infusion pump store the request’s user agent in an unsafe manner,
    allowing adversaries to pollute the database’s log files (for example, by using
    line-feed characters to insert fake log entries).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果药物输注泵发起的用户请求的日志以不安全的方式存储用户代理，数据库可能会允许*否认*，使对手能够污染数据库的日志文件（例如，通过使用换行符插入虚假日志条目）。
- en: When it comes to *information disclosure*, the database might contain functions
    or stored procedures that perform external requests (such as DNS or HTTP requests).
    An adversary could abuse these to exfiltrate data using an out-of-band SQL injection
    technique. This method is extremely useful to attackers who are able to perform
    only blind SQL injections, in which the server’s output doesn’t contain the data
    resulting from the injected query. For example, adversaries could smuggle out
    sensitive data by constructing URLs and placing this data in the subdomain of
    a domain that they control. Then they can supply this URL to one of these vulnerable
    functions and force the database to perform an external request to their server.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在涉及到*信息泄露*时，数据库可能包含执行外部请求（如DNS或HTTP请求）的函数或存储过程。攻击者可以利用这些功能，通过脱带SQL注入技术窃取数据。这种方法对于只能执行盲注的攻击者极为有用，盲注是指服务器输出不包含注入查询结果的数据。例如，攻击者可以通过构造URL并将敏感数据放置在其控制的域名子域中，从而将数据偷偷带出。然后，他们可以将这个URL提供给这些易受攻击的函数，并迫使数据库向他们的服务器执行外部请求。
- en: '*Denial of service* attacks might also occur in cases when an adversary abuses
    components that allow complex queries. By forcing the components to perform unnecessary
    computations, the database might come to a halt when no more resources are available
    to complete the requested query.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*拒绝服务*攻击可能发生在攻击者利用允许复杂查询的组件时。通过迫使这些组件执行不必要的计算，当没有更多资源可用来完成请求的查询时，数据库可能会停止运行。'
- en: Additionally, when it comes to *elevation of privilege*, certain database functions
    might allow users to run code with the highest privileges. By performing a specific
    set of actions through the RUI component, the user might be capable of calling
    these functions and escalating their privileges to that of a database superuser.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在涉及到*特权提升*时，某些数据库功能可能允许用户以最高权限运行代码。通过在RUI组件中执行一组特定的操作，用户可能能够调用这些功能，并将其权限提升至数据库超级用户的权限。
- en: The Operating System
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 操作系统
- en: The operating system receives input from the control server service, so any
    threats to it derive directly from the control server. The operating system should
    have integrity checking mechanisms and a baseline configuration that incorporates
    specific security principles. For example, it should protect data-at-rest, enable
    update procedures, enable network firewalls, and detect malicious code.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统接收来自控制服务器服务的输入，因此，任何针对它的威胁都直接源自控制服务器。操作系统应该具备完整性检查机制，并有包含特定安全原则的基线配置。例如，它应该保护静态数据、启用更新程序、启用网络防火墙并检测恶意代码。
- en: The component could allow *spoofing* if an adversary is able to boot their own
    custom operating system. This custom operating system could deliberately lack
    support for necessary security controls, such as application sandboxing, filesystem
    permissions, and role-based access control. An attacker can then study the application
    and extract vital information that otherwise wouldn’t be available due to the
    security controls.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果组件允许*欺骗*，而攻击者能够启动自定义的操作系统，则可能会发生这种情况。这个自定义操作系统可能故意缺乏必要的安全控制支持，如应用程序沙盒、文件系统权限和基于角色的访问控制。攻击者可以研究该应用程序并提取原本由于安全控制无法获得的重要信息。
- en: As for *tampering*, if adversaries have local or remote access to the system,
    they could manipulate the operating system. For example, they could change the
    current security settings, disable the firewall, and install a backdoor executable.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 至于*篡改*，如果攻击者具有本地或远程访问系统的权限，他们可能会操控操作系统。例如，他们可能会更改当前的安全设置、禁用防火墙并安装后门可执行文件。
- en: '*Repudiation* vulnerabilities might be present on the operating system if the
    system logs are stored only locally and if a high-privileged adversary could alter
    them.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果操作系统的日志仅存储在本地，并且高权限的攻击者能够篡改日志，则可能存在*否认*漏洞。
- en: With respect to *information disclosure*, error and debugging messages might
    reveal information about the operating system that could help adversaries exploit
    the system even further. Messages might also include sensitive patient information,
    which could violate compliance requirements.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在*信息泄露*方面，错误和调试信息可能泄露操作系统的信息，从而帮助攻击者进一步利用系统。这些信息还可能包含敏感的患者信息，可能违反合规要求。
- en: The component might be susceptible to *denial of service* attacks if an adversary
    triggers an unwanted system restart (during an update process, for example) or
    deliberately shuts down the system, causing the whole system to halt its operation.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果攻击者触发不必要的系统重启（例如在更新过程中）或故意关闭系统，导致整个系统停止运行，则该组件可能容易受到*拒绝服务*攻击。
- en: Attackers could achieve *elevation of privilege* if they abuse vulnerable functionalities,
    software designs, or misconfigurations of high-privileged services and applications
    to obtain elevated access to resources that should be available only to a superuser.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果攻击者利用高权限服务和应用程序的脆弱功能、软件设计或配置错误来获取应该仅供超级用户访问的资源，那么攻击者可能会实现*权限提升*。
- en: The Device Components’ Firmware
  id: totrans-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设备组件的固件
- en: Next, let’s consider all the device components’ firmware, such as the CD/DVD
    drive, controllers, display, keyboard, mouse, motherboard, network card, sound
    card, video card, and so on. *Firmware* is a kind of software that provides specific
    low-level operations. It’s usually stored on the components’ nonvolatile memory
    or loaded into the components by a driver during the initialization. The device’s
    vendor typically develops and maintains its firmware. The vendor should also sign
    the firmware, and the device should verify this signature.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们考虑所有设备组件的固件，例如光驱、控制器、显示器、键盘、鼠标、主板、网卡、声卡、显卡等。*固件*是一种提供特定低级操作的软件。它通常存储在组件的非易失性内存中，或通过驱动程序在初始化时加载到组件中。设备的供应商通常负责开发和维护固件。供应商还应签署固件，设备应验证该签名。
- en: The component might be susceptible to *spoofing* if the attackers can exploit
    logic bugs that downgrade the firmware to older versions containing known vulnerabilities.
    Adversaries could also install custom firmware that pretends to be the latest
    available version from the vendor when the system requests an update.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果攻击者利用逻辑漏洞将固件降级到包含已知漏洞的旧版本，或者在系统请求更新时安装伪装成供应商最新版本的定制固件，则该组件可能容易受到*欺骗*攻击。
- en: The attackers might succeed in *tampering* with the firmware by installing malware
    on it. This is a common technique for *advanced persistent threat (APT)* attacks,
    in which the adversary attempts to remain undetected for an extended period and
    survive an operating system reinstallation or hard disk replacement. For example,
    a hard disk firmware modification containing a Trojan horse could allow users
    to store data in locations that won’t be erased even if they format or wipe the
    disk. IoT devices often don’t verify the integrity of the digital signature and
    firmware, making this kind of attack even easier. In addition, tampering with
    the configuration variables of certain firmware (such as BIOS or UEFI) might allow
    adversaries to disable certain hardware-supported security controls, like secure
    boot.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可能会通过在固件上安装恶意软件来成功*篡改*固件。这是*高级持续性威胁（APT）*攻击的常见技术，攻击者试图在较长时间内保持隐蔽，并在操作系统重装或硬盘更换后依然存活。例如，包含木马病毒的硬盘固件修改可能允许用户将数据存储在即使格式化或清空硬盘时也不会被删除的位置。物联网设备通常不验证数字签名和固件的完整性，这使得这种攻击更加容易。此外，篡改某些固件（如BIOS或UEFI）的配置变量可能允许攻击者禁用某些硬件支持的安全控制，如安全启动。
- en: In terms of *information disclosure*, any firmware that establishes a communication
    channel with third-party vendors servers (for analytics purposes or to request
    information about updates, for example) might also expose private data related
    to the patients, likely violating regulations. Also, sometimes the firmware exposes
    unnecessary security-related API functionalities, which adversaries can abuse
    to extract data or escalate their privileges. This might include the disclosure
    of System Management Random Access Memory (SMRAM) contents, storage that System
    Management Mode uses, which gets executed with high privileges and handles CPU
    power management.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 就*信息披露*而言，任何与第三方供应商服务器建立通信渠道的固件（例如用于分析目的或请求更新信息的固件）可能也会泄露与患者相关的私人数据，可能违反相关规定。此外，有时固件会暴露不必要的与安全相关的API功能，攻击者可以利用这些功能提取数据或提升权限。这可能包括披露系统管理随机存取内存（SMRAM）内容，SMRAM是系统管理模式使用的存储，它以高权限执行并处理CPU电源管理。
- en: When it comes to *denial of service*, some device component vendors use over-the-air
    (OTA) updates to deploy firmware and configure the corresponding component securely.
    Sometimes, adversaries are able to block these updates, leaving the system in
    an insecure or unstable state. In addition, adversaries might be able to directly
    interact with the communication interface and attempt to corrupt the data to halt
    the system.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在*拒绝服务*方面，一些设备组件供应商使用空中下载（OTA）更新来部署固件并安全地配置相应组件。有时，攻击者能够阻止这些更新，使系统处于不安全或不稳定状态。此外，攻击者可能能够直接与通信接口交互，尝试破坏数据以停止系统运行。
- en: With regards to *elevation of privilege*, adversaries can escalate their privileges
    by exploiting known vulnerabilities in the drivers and abusing undocumented, exposed
    management interfaces, such as System Management Mode. Also, many device components
    ship with default passwords embedded in their firmware. Attackers can use these
    passwords to gain privileged access to the components’ management panels or the
    actual host system.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 关于*权限提升*，对手可以通过利用驱动程序中的已知漏洞和滥用未记录的、暴露的管理接口（例如系统管理模式）来提升他们的权限。此外，许多设备组件在固件中嵌入了默认密码。攻击者可以使用这些密码来获得对组件管理面板或实际主机系统的特权访问。
- en: The Physical Equipment
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 物理设备
- en: Now we’ll assess the physical equipment’s security, including the box containing
    the control server’s processor and the RUI screen. When attackers gain physical
    access to a system, you should generally assume that they’ll have full administrative
    access. There are very few ways to completely protect against that. Nonetheless,
    you can implement mechanisms to make this process a lot harder for adversaries.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将评估物理设备的安全性，包括包含控制服务器处理器和RUI屏幕的盒子。当攻击者获得对系统的物理访问权限时，通常应假设他们将拥有完全的管理员权限。完全防范这种情况的方法很少。然而，您可以实施一些机制，使这个过程对对手来说更加困难。
- en: Physical equipment has quite a few more security requirements than the rest.
    First, the clinic should store the control server in a room that only authorized
    employees have access to. The component should support hardware attestation and
    have a secure boot process, one based on keys burned into the CPU. The device
    should have memory protection enabled. It should be able to perform secure, hardware-backed
    key management, storage, and generation, as well as secure cryptographic operations,
    like generating random numbers, encrypting data with a public key, and secure
    signing. Additionally, it should seal all critical components using epoxy or another
    adhesive that would prevent people from easily inspecting the circuit design,
    making reverse engineering more difficult.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 物理设备比其他设备有更多的安全要求。首先，诊所应将控制服务器存放在只有授权员工才能进入的房间内。该组件应支持硬件认证，并具有基于烧录到CPU中的密钥的安全启动过程。设备应启用内存保护，并能够执行安全的硬件支持密钥管理、存储和生成，以及安全的加密操作，如生成随机数、使用公钥加密数据和安全签名。此外，设备应使用环氧树脂或其他胶粘剂密封所有关键组件，以防止人们轻松检查电路设计，从而增加逆向工程的难度。
- en: In terms of *spoofing*, adversaries might be able to replace critical hardware
    parts with faulty or insecure ones. We call these attacks *supply chain attacks*,
    because they often occur during the product’s manufacturing or shipping stages.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在*欺骗*方面，攻击者可能能够将关键硬件部件替换为有缺陷或不安全的部件。我们称这些攻击为*供应链攻击*，因为它们通常发生在产品的制造或运输阶段。
- en: With regards to *tampering*, it’s possible for a user to insert external USB
    devices, like keyboards or flash drives, to provide the system with untrusted
    data. Also, attackers can replace existing physical input devices (such as keyboards,
    configuration buttons, and USB or Ethernet ports) with malicious ones that leak
    data to external parties. Exposed hardware programming interfaces, like JTAG,
    might also allow adversaries to change the device’s current settings and extract
    the firmware or even reset the device to an insecure state.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 关于*篡改*，用户有可能插入外部USB设备，如键盘或闪存驱动器，向系统提供不受信的数据。此外，攻击者还可以将现有的物理输入设备（如键盘、配置按钮和USB或以太网端口）替换为恶意设备，将数据泄露给外部方。暴露的硬件编程接口，如JTAG，也可能允许攻击者更改设备当前的设置，提取固件，甚至将设备重置为不安全状态。
- en: When it comes to *information disclosure*, attackers can discover information
    about the system and its operation by simply observing it. In addition to that,
    the RUI screen can’t protect the system against photographs that capture its sensitive
    information. Someone could remove external storage devices and extract the stored
    data. Adversaries might also be able to passively infer sensitive patients’ information,
    cleartext passwords, and encryption keys by exploiting potential side-channel
    leaks in the hardware implementation (such as electromagnetic interference or
    CPU power consumption) or by analyzing memory sections while performing a cold-boot
    attack.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到*信息泄露*时，攻击者只需观察系统及其操作即可发现有关信息。此外，RUI 屏幕无法防止拍摄到包含敏感信息的照片。有人可能会移除外部存储设备并提取存储的数据。对手还可能通过利用硬件实现中的潜在旁道泄漏（如电磁干扰或
    CPU 功耗）或通过分析内存部分进行冷启动攻击，来被动推断敏感患者信息、明文密码和加密密钥。
- en: The service might be vulnerable to *denial of service* in cases when a power
    outage occurs and causes the system to shut down. This threat will directly affect
    all the components that require the control server to operate. Additionally, adversaries
    with physical access to the hardware can manipulate the device’s internal circuit
    structure, causing it to malfunction.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发生停电并导致系统关闭，服务可能会受到*拒绝服务*攻击的影响。这个威胁将直接影响所有需要控制服务器操作的组件。此外，拥有硬件物理访问权限的攻击者可以操控设备的内部电路结构，导致其发生故障。
- en: '*Elevation of privilege* might occur from vulnerabilities such as race conditions
    and insecure error handling. These issues are often inherent in the design of
    the embedded CPUs, and they could allow a rogue process to read all memory or
    to write in arbitrary memory locations, even when not authorized to do so.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*权限提升*可能会因为诸如竞争条件和不安全的错误处理等漏洞而发生。这些问题通常固有于嵌入式 CPU 的设计中，它们可能允许恶意进程读取所有内存或在任意内存位置写入，即使未获得授权。'
- en: The Pump Service
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 泵服务
- en: The pump service is the software operating the pump. It consists of a communication
    protocol that connects with the control server and a microcontroller that controls
    the pump. In addition to the general security requirements, the pump should identify
    and verify the control server service’s integrity. The communication protocol
    between the control server and the drug infusion pump should be secure, and it
    shouldn’t allow for replay attacks or interception.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 泵服务是操作泵的 software。它由一个连接控制服务器的通信协议和控制泵的微控制器组成。除了常规的安全要求外，泵还应该识别并验证控制服务器服务的完整性。控制服务器与药物输注泵之间的通信协议应该是安全的，并且不应允许重放攻击或拦截。
- en: '*Spoofing* can affect the component if the drug infusion pump doesn’t use sufficient
    validation checks or verify that it’s indeed communicating with a valid control
    server. Insufficient validation checks can also lead to *tampering* attacks, if,
    for instance, the pump allows maliciously crafted requests to change the pump’s
    settings. As for *repudiation* issues, the infusion pump might use custom-made
    log files. If these files aren’t read-only, they’ll be prone to tampering.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果药物输注泵没有使用足够的验证检查，或者没有验证它是否确实在与有效的控制服务器通信，*欺骗*可能会影响该组件。不充分的验证检查还可能导致*篡改*攻击，例如，如果泵允许恶意构造的请求更改泵的设置。至于*否认*问题，输注泵可能会使用自定义的日志文件。如果这些文件不是只读的，那么它们就容易受到篡改。
- en: The pump service might allow for *information disclosure* if the communication
    protocol between the control server and the infusion pump doesn’t use encryption.
    In that case, man-in-the-middle attackers could capture transmitted data, including
    sensitive patient information.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果控制服务器与输注泵之间的通信协议没有加密，泵服务可能会允许*信息泄露*。在这种情况下，中间人攻击者可能会捕获传输的数据，包括敏感的患者信息。
- en: The service might be vulnerable to *denial of service* if, after a thorough
    analysis of the communication protocol, an attacker identifies a shutdown command.
    Additionally, if the pump runs as a superuser and has complete control over the
    device, it might be prone to *elevation of privilege*.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果经过对通信协议的彻底分析后，攻击者识别出了一个关机命令，服务可能会受到*拒绝服务*攻击的影响。此外，如果泵以超级用户身份运行并完全控制设备，它可能会容易受到*权限提升*的攻击。
- en: You might have discovered more threats than those we’ve mentioned, and you’ve
    likely identified additional security requirements for each component. A good
    rule is to find at least one or two threats per STRIDE category for each component.
    If you can’t think of that many on the first attempt, revisit your threat model
    multiple times.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经发现了比我们提到的更多的威胁，并且你很可能已经为每个组件识别了额外的安全需求。一个好的规则是：每个STRIDE类别下至少找到一到两个威胁。如果你第一次尝试时想不到这么多，重新审视你的威胁模型多次。
- en: Using Attack Trees to Uncover Threats
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用攻击树来揭示威胁
- en: If you want to identify new threats in a different way or model existing ones
    for further analysis, you could use an attack tree. An *attack tree* is a visual
    map that starts by defining a generic attack objective and then becomes more specific
    as the tree expands. For example, [Figure 2-5](#figure2-5) shows an attack tree
    for the threat of tampering with drug delivery.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想用不同的方式识别新的威胁或为进一步分析建模现有的威胁，你可以使用攻击树。*攻击树*是一个视觉化的地图，它从定义一个通用的攻击目标开始，随着树的展开变得更为具体。例如，[图2-5](#figure2-5)展示了一个篡改药物输送威胁的攻击树。
- en: Attack trees can provide greater insight on the outcome of our threat model,
    and we might uncover threats that we missed earlier. Notice that each node contains
    a possible attack that requires one or more of the attacks described in its child
    nodes. In some cases, the attack might require all of its child nodes. For example,
    tampering with database data within infusion pumps requires you to gain database
    access *and* have improper access controls in the drug library tables. However,
    you can tamper with the drug delivery by either changing the infusion rate *or*
    by disrupting the infusion rate update using a denial of service attack.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击树可以为我们威胁模型的结果提供更深入的洞察，并且我们可能会发现之前遗漏的威胁。请注意，每个节点包含一个可能的攻击，要求其子节点描述的一个或多个攻击。在某些情况下，攻击可能需要所有子节点。例如，篡改输液泵中的数据库数据要求你获得数据库访问权限*并*且在药物库表中有不当的访问控制。然而，你可以通过改变输液速度*或*使用拒绝服务攻击来破坏输液速率更新，从而篡改药物输送。
- en: '![f02005](Images/f02005.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![f02005](Images/f02005.png)'
- en: 'Figure 2-5: Attack tree for the threat of tampering with drug delivery'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-5：篡改药物输送威胁的攻击树
- en: Rating Threats with the DREAD Classification Scheme
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用DREAD分类方案对威胁进行评分
- en: 'Threats pose no danger on their own. For a threat to matter, it must have some
    sort of impact. We can’t figure out the true impact of the threats we’ve discovered
    until we review the vulnerability assessment results. Still, at some point you
    should evaluate the risk posed by each threat. We’ll show you how to do this using
    *DREAD*, a risk rating system. The DREAD acronym represents the following criteria:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 威胁本身不会造成任何危害。威胁必须具有某种影响才能引起关注。我们无法在审查漏洞评估结果之前弄清楚已发现威胁的真正影响。然而，在某个时刻，你应该评估每个威胁所带来的风险。我们将向你展示如何使用*DREAD*风险评分系统来做到这一点。DREAD这个缩写代表以下标准：
- en: Damage How damaging the exploitation of this threat would be
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 损害：此威胁的利用会造成多大的损害
- en: Reproducibility How easy the exploit is to reproduce
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可重现性：攻击的重现难易程度
- en: Exploitability How easy the threat is to exploit
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可利用性：威胁的利用难易程度
- en: Affected Users How many users would be affected
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 受影响的用户：有多少用户会受到影响
- en: Discoverability How easy it is to identify the threat
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可发现性：识别威胁的难易程度
- en: We’ll assign each of these categories a score between 0 and 10, and then use
    the scores to calculate the final risk score of a threat.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会为每个类别分配一个从0到10的分数，然后用这些分数计算威胁的最终风险评分。
- en: As an example, let’s use DREAD to rate the threat caused by the RUI’s weak four-digit
    PIN authentication method. First, if adversaries can guess someone’s PIN, they
    can access the current user’s data. Because the attack would affect only a single
    patient, we’ll give the *Damage* and *Affected Users* categories half of the maximum
    score, or a score of five. Next, because even a nonskilled adversary can easily
    identify, exploit, and reproduce this threat, we’ll give the *Discoverability*,
    *Exploitability*, and *Reproducibility* categories the maximum score of 10\. After
    adding these scores and dividing them by the number of categories, the result
    is an average threat ranking of 8 out of 10, as shown in [Table 2-1](#table2-1).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个例子，让我们使用DREAD来评估RUI的弱四位数字PIN认证方法所带来的威胁。首先，如果对手能够猜到某人的PIN码，他们就能访问当前用户的数据。由于攻击只会影响到单个患者，我们将给*损害*和*受影响用户*类别打上最大分数的一半，即5分。接下来，因为即使是没有技术的对手也可以轻松识别、利用并复制此威胁，我们将给*可发现性*、*可利用性*和*可重现性*类别打上最大分数10分。将这些分数加总后，再除以类别数，得出的平均威胁评分为10分中的8分，如[表2-1](#table2-1)所示。
- en: 'Table 2-1: DREAD Scoring Matrix'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 表2-1：DREAD评分矩阵
- en: '| **Threat** | **Score** |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| **威胁** | **评分** |'
- en: '| --- | --- |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Damage | 5 |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| 损害 | 5 |'
- en: '| Reproducibility | 10 |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 可重现性 | 10 |'
- en: '| Exploitability | 10 |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| 可利用性 | 10 |'
- en: '| Affected Users | 5 |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 受影响用户 | 5 |'
- en: '| Discoverability | 10 |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 可发现性 | 10 |'
- en: '| **Total** | **8** |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| **总计** | **8** |'
- en: You could follow a similar approach to classify the rest of the identified threats
    and prioritize your responses to them.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以采用类似的方法，对其余识别出的威胁进行分类，并优先处理它们。
- en: Other Types of Threat Modeling, Frameworks, and Tools
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他类型的威胁建模、框架和工具
- en: 'So far in this chapter, we’ve presented one possible framework for threat modeling:
    a software-centric approach that prioritizes the vulnerability of each application
    component. But there are other possible frameworks you could follow, such as asset-centric
    and attacker-centric approaches. You might use one of these alternative methods
    depending on your assessment’s specific needs.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，我们展示了一个可能的威胁建模框架：一个以软件为中心的方法，优先考虑每个应用组件的脆弱性。但是，还有其他可能的框架可以遵循，例如以资产为中心和以攻击者为中心的方法。根据评估的具体需求，你可以选择使用这些替代方法之一。
- en: 'In an *asset-centric* threat model, you’d first identify the system’s important
    information. For the drug infusion pump, assets could include the patients’ data,
    the control server’s authentication credentials, the infusion pump configuration
    settings, and the software releases. You’d then analyze these assets based on
    their security attributes: in other words, what each asset needs to maintain its
    confidentiality, integrity, and availability. Note that you probably won’t create
    a complete list of assets, because what’s considered valuable depends on each
    person’s point of view.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在*以资产为中心*的威胁模型中，你首先需要识别系统中的重要信息。对于药物输注泵，资产可能包括患者的数据、控制服务器的认证凭据、输注泵的配置设置和软件版本。然后，你需要根据这些资产的安全属性进行分析：换句话说，就是每个资产需要保持其机密性、完整性和可用性。需要注意的是，你可能不会创建一个完整的资产列表，因为什么被视为有价值的，取决于每个人的视角。
- en: 'The *attacker-centric* approach focuses on identifying potential attackers.
    Once you’ve done so, you’d use their attributes to develop a basic threat profile
    for each asset. This approach has some problems: it requires you to gather extensive
    intelligence about modern threat actors, their recent activity, and their characteristics.
    In addition, it’s possible that you’ll accidentally fall back on your own biases
    about who attackers are and what they want. To avoid doing so, use the standardized
    descriptions of threat agents provided by the Intel Threat Agent Library at [https://www.intel.com/content/dam/www/public/us/en/documents/solution-briefs/risk-assessments-maximize-security-budgets-brief.pdf](https://www.intel.com/content/dam/www/public/us/en/documents/solution-briefs/risk-assessments-maximize-security-budgets-brief.pdf).
    For example, in our scenario, our list of agents might include the Untrained Nurse
    who misuses the system, the Reckless Nurse who deliberately circumvents existing
    security controls for expediency, and the Hospital Thief who can steal small components
    (such as hard disks and SD cards) or even the whole drug infusion pump. More advanced
    actors could include the Data Miner, who searches for internet-connected control
    servers and collects patient data, or the Government Cyber Warrior, who performs
    state-sponsored attacks to disrupt the use of infusion pumps on a national scale.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*以攻击者为中心*的方法侧重于识别潜在的攻击者。一旦你完成了这一点，你可以利用他们的特征为每个资产制定一个基本的威胁档案。这种方法存在一些问题：它要求你收集大量关于现代威胁行为者、他们最近的活动和特点的情报。此外，你可能会不自觉地陷入对攻击者是谁以及他们想要什么的偏见。为避免这种情况，使用Intel威胁行为者库中提供的标准化威胁代理描述，网址是[https://www.intel.com/content/dam/www/public/us/en/documents/solution-briefs/risk-assessments-maximize-security-budgets-brief.pdf](https://www.intel.com/content/dam/www/public/us/en/documents/solution-briefs/risk-assessments-maximize-security-budgets-brief.pdf)。例如，在我们的场景中，我们的代理列表可能包括误用系统的未经培训的护士、为了加速而故意绕过现有安全控制的鲁莽护士，和能偷取小型部件（如硬盘和SD卡）甚至整个药物输注泵的医院窃贼。更先进的行为者可能包括数据挖掘者，搜索互联网连接的控制服务器并收集患者数据，或执行国家支持攻击、在国家范围内干扰药物输注泵使用的政府网络战士。'
- en: You can also make other choices when threat modeling. Frameworks other than
    STRIDE include PASTA, Trike, OCTAVE, VAST, Security Cards, and Persona non Grata.
    We won’t cover these models here, but you might find them useful for certain assessments.
    We used data flow diagrams to model our threats, but you could also use other
    types of diagrams, such as unified modeling language (UML), swimlane diagrams,
    or even state diagrams. It’s up to you to decide what system makes the most sense
    and works best for you.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行威胁建模时，你还可以做出其他选择。除了STRIDE框架外，还有PASTA、Trike、OCTAVE、VAST、安全卡和Persona non Grata等框架。我们在这里不会详细介绍这些模型，但你可能会在某些评估中找到它们的用处。我们使用数据流图来建模我们的威胁，但你也可以使用其他类型的图表，例如统一建模语言（UML）、泳道图，甚至状态图。你可以根据自己的需求选择最适合且最有效的系统。
- en: Common IoT Threats
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见的物联网威胁
- en: Let’s review some common threats in IoT systems. The list isn’t exhaustive,
    but you could use it as a baseline for your own threat models.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下物联网系统中一些常见的威胁。这个列表并不全面，但你可以将它作为自己威胁模型的基准。
- en: Signal Jamming Attacks
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 信号干扰攻击
- en: In a *signal jamming attack*, the adversary interferes with the communication
    between two systems. IoT systems usually have their own ecosystems of nodes. For
    example, the drug infusion pump system has one control server connected to multiple
    drug infusion pumps. With special equipment, it’s possible to isolate the control
    server and pumps from each other. In critical systems like this one, this threat
    could prove fatal.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在*信号干扰攻击*中，攻击者干扰两个系统之间的通信。物联网系统通常具有自己的一套节点生态系统。例如，药物输注泵系统有一个控制服务器连接多个药物输注泵。通过特殊设备，攻击者有可能将控制服务器和泵相互隔离。在像这样的关键系统中，这种威胁可能是致命的。
- en: Replay Attacks
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重放攻击
- en: In a *replay attack*, the adversary repeats some operation or resends a transmitted
    packet. In the drug infusion pump example, this could mean that a patient receives
    multiple doses of a drug. Replay attacks, regardless of whether or not they affect
    IoT devices, are usually severe.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在*重放攻击*中，攻击者重复某个操作或重新发送已传输的数据包。在药物输注泵的例子中，这可能意味着患者接收到多次药物剂量。无论是否影响物联网设备，重放攻击通常都是严重的。
- en: Settings Tampering Attacks
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置篡改攻击
- en: 'In *settings tampering attacks*, the adversary exploits a component’s lack
    of integrity to change its settings. For the drug infusion pump, these settings
    could include the following: exchanging the control server with a malicious control
    server, changing the primary drug used, or altering the network settings to cause
    a denial of service attack.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在*设置篡改攻击*中，攻击者利用组件缺乏完整性来更改其设置。对于药物输注泵，这些设置可能包括以下内容：用恶意控制服务器替换控制服务器、改变主要药物或更改网络设置以引发拒绝服务攻击。
- en: Hardware Integrity Attacks
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件完整性攻击
- en: '*Hardware integrity attacks* compromise the integrity of the physical device.
    For example, an attacker might bypass insecure locks or easily accessible USB
    ports, especially if they’re bootable. All IoT systems face this threat, because
    no device integrity protection is perfect. Still, certain techniques make it more
    difficult. Once, during a vulnerability assessment of a certain medical device,
    we realized that unless we very carefully disassembled the device with specialized
    equipment, a fail-safe mechanism, also known as a *fuse*, would destroy the board.
    This mechanism proved that the product’s designers had taken seriously the possibility
    of device tampering. Yet we eventually bypassed the protection mechanism.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '*硬件完整性攻击*会危及物理设备的完整性。例如，攻击者可能绕过不安全的锁或容易接触的USB端口，特别是当它们是可启动的。所有物联网系统都面临这一威胁，因为没有任何设备完整性保护是完美的。然而，某些技术可以使攻击变得更加困难。曾经在某医疗设备的漏洞评估中，我们意识到，除非我们非常小心地使用专业设备拆解该设备，否则一个安全机制，也叫做*保险丝*，将摧毁电路板。这个机制证明了产品设计者已经认真考虑了设备被篡改的可能性。尽管如此，我们最终还是绕过了这一保护机制。'
- en: Node Cloning
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 节点克隆
- en: '*Node cloning* is a threat that arises as part of a *Sybil attack*, in which
    an attacker creates fake nodes in a network to compromise its reliability. IoT
    systems commonly use multiple nodes in their ecosystem, such as when one control
    server manages multiple drug infusion pumps.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '*节点克隆*是作为*Sybil攻击*的一部分产生的威胁，其中攻击者在网络中创建虚假的节点以破坏其可靠性。物联网系统通常在其生态系统中使用多个节点，例如，当一个控制服务器管理多个药物输注泵时。'
- en: 'We often find node cloning threats in IoT systems. One reason is that the association
    protocols that the nodes use to communicate aren’t very sophisticated, and creating
    fake nodes can sometimes be easy. Occasionally, you can even create a fake master
    node (in our example, the control server). This threat could affect the system
    in various ways: is there a finite number of nodes a control server can connect
    to? Can this threat lead to a denial of service attack? Can it cause attackers
    to propagate falsified information?'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常在物联网系统中发现节点克隆威胁。一个原因是，节点之间用于通信的关联协议并不复杂，创建虚假节点有时非常容易。偶尔，你甚至可以创建一个虚假的主节点（在我们的例子中是控制服务器）。这一威胁可能以多种方式影响系统：控制服务器可以连接的节点数量是否有限？这个威胁能否导致拒绝服务攻击？它会导致攻击者传播虚假的信息吗？
- en: Security and Privacy Breaches
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全性和隐私泄露
- en: Privacy breaches are one of the biggest and most consistent threats in IoT systems.
    Often, very little protects user data confidentiality, so you can find this threat
    in almost any communication protocol that transfers data to and from a device.
    Map the system architecture, find the components that might contain sensitive
    user data, and monitor the endpoints that transfer them.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 隐私泄露是物联网系统中最大且最持续的威胁之一。通常，几乎没有任何措施能够保护用户数据的机密性，因此你可以在几乎任何数据传输到设备和从设备传输的数据的通信协议中发现这一威胁。绘制系统架构，找到可能包含敏感用户数据的组件，并监控传输这些数据的端点。
- en: User Security Awareness
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户安全意识
- en: 'Even if you manage to mitigate all other threats, you’ll probably have trouble
    addressing users’ security awareness. This could include their ability to detect
    phishing emails, which could compromise their workstations, or their habit of
    allowing unauthorized people into sensitive areas. People who work with medical
    IoT equipment have a saying: if you’re looking for a hack, a business logic bypass,
    or something that will accelerate some processing tasks, just ask the nurse operating
    the system. Because they use this system daily, they’ll know all the system shortcuts.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你设法缓解了所有其他威胁，你可能仍然会遇到用户安全意识的问题。这可能包括他们识别钓鱼邮件的能力，这些邮件可能会危及他们的工作站，或者他们习惯于允许未经授权的人进入敏感区域。使用医疗物联网设备的人有句俗话：如果你想找到一个黑客，绕过业务逻辑，或加速某些处理任务，只需问操作系统的护士。因为他们每天都在使用这个系统，他们会知道所有的系统快捷方式。
- en: Conclusion
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: This chapter provided you with an introduction to threat modeling, the process
    of identifying and listing possible attacks against an examined system. By walking
    through a threat model for a drug infusion pump system, we outlined the basic
    stages of the threat modeling process and described a few of the core threats
    IoT devices face. The approach we explained was simple and might not be the best
    for every situation, so we encourage you to explore other frameworks and processes.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为您介绍了威胁建模的概念，即识别和列出可能对被审查系统发起的攻击的过程。通过对药物输注泵系统的威胁模型进行分析，我们概述了威胁建模过程的基本阶段，并描述了物联网设备面临的一些核心威胁。我们解释的方法很简单，可能并不适用于所有情况，因此我们鼓励您探索其他框架和流程。
