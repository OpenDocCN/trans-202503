- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Threat Modeling
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: The *threat modeling* process systematically identifies possible attacks against
    a device and then prioritizes certain issues based on their severity. Because
    threat modeling can be tedious, it’s sometimes overlooked. Nonetheless, it’s vital
    to understanding threats, their impact, and the appropriate mitigations you’ll
    have to take to eliminate them.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we walk you through a simple framework for threat modeling
    and discuss a few alternative frameworks. Then we briefly describe some of the
    most important threats that an IoT infrastructure usually encounters so you can
    successfully employ threat modeling techniques in your next IoT assessment.
  prefs: []
  type: TYPE_NORMAL
- en: Threat Modeling for IoT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you create threat models for IoT devices specifically, you’ll likely run
    into a few recurring issues. The reason is that the IoT world is mostly made up
    of systems with low computing power, power consumption, memory, and disk space
    that are deployed in insecure networking environments. Many hardware manufacturers
    have realized they can easily convert any inexpensive platform, such as an Android
    phone or tablet, a Raspberry Pi, or an Arduino board, into a sophisticated IoT
    device.
  prefs: []
  type: TYPE_NORMAL
- en: Consequently, at their core, many IoT devices are running Android or common
    Linux distributions, the same operating systems on more than a billion phones,
    tablets, watches, and televisions. These operating systems are well known, and
    they often provide more functionality than a device needs, increasing the ways
    an attacker can exploit it. Worse, IoT developers supplement the operating systems
    by introducing custom apps, which lack proper security controls. Then, to make
    sure their products can carry out their primary functions, developers often have
    to bypass the operating system’s original protections. Still other IoT devices,
    based on real-time operating systems (RTOS), minimize processing time without
    implementing the security standards of more advanced platforms.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, these IoT devices usually don’t have the capacity to run antivirus
    or anti-malware protections. Their minimalistic designs, developed for ease of
    use, don’t support common security controls, such as *software whitelisting*,
    in which devices allow only specific software to be installed, or *network access
    control (NAC)* solutions, which enforce network policies that control user and
    device access. Many vendors stop offering security updates shortly after the product’s
    initial release. Also, the white-label firms that often develop these products
    distribute them widely through many suppliers under different brand names and
    logos, making security and software updates difficult to apply to all products.
  prefs: []
  type: TYPE_NORMAL
- en: These limitations force many internet-enabled devices to use proprietary or
    lesser-known protocols that don’t meet the industry security standards. Often,
    they can’t support sophisticated hardening approaches, such as the *software integrity
    control*, which verifies that third parties haven’t tampered with executables,
    or *device attestation*, which uses specialized hardware to ensure that a target
    device is legitimate.
  prefs: []
  type: TYPE_NORMAL
- en: Following a Framework for Threat Modeling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The easiest way to use threat modeling in your security assessments is to follow
    a framework like the *STRIDE threat classification model*, which focuses on identifying
    weaknesses in the technology rather than vulnerable assets or possible attackers.
    Developed by Praerit Garg and Loren Kohnfelder at Microsoft, STRIDE is one of
    the most popular threat classification schemes. The acronym represents the following
    threats:'
  prefs: []
  type: TYPE_NORMAL
- en: Spoofing When an actor pretends to play the role of a system component
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tampering When an actor violates the integrity of data or a system
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repudiation When users can deny they took certain actions on the system
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Information Disclosure When an actor violates the confidentiality of the system’s
    data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Denial of Service When an actor disrupts the availability of a system’s component
    or the system as a whole
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Elevation of Privilege When users or system components can elevate themselves
    to a privilege level they shouldn’t have access to
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'STRIDE has three steps: identify the architecture, break it into components,
    and identify threats to each component. To see this framework in action, let’s
    imagine we’re performing threat modeling for a drug infusion pump. We’ll assume
    that the pump connects via Wi-Fi to a control server located in the hospital.
    The network is insecure and lacks segmentation, meaning a visitor to the hospital
    could connect to the Wi-Fi and passively monitor the pump’s traffic. We’ll use
    this scenario to walk through each step of the framework.'
  prefs: []
  type: TYPE_NORMAL
- en: Identifying the Architecture
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We start our threat modeling by examining the device’s architecture. The system
    consists of the drug infusion pump and a control server that can send commands
    to a few dozen pumps ([Figure 2-1](#figure2-1)). Nurses operate the server, although
    in some cases, authorized IT admins might access it, too.
  prefs: []
  type: TYPE_NORMAL
- en: '![f02001](Images/f02001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-1: A simple architecture diagram of an infusion pump'
  prefs: []
  type: TYPE_NORMAL
- en: The control server sometimes needs software updates, including updates to its
    drug library and patient records. That means it’s sometimes connected to the *electronic
    health record (EHR)* and the update server. The EHR database contains patient
    health records. Even though these two components might be beyond the scope of
    a security assessment, we’re including them in our threat model ([Figure 2-2](#figure2-2)).
  prefs: []
  type: TYPE_NORMAL
- en: '![f02002](Images/f02002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-2: An expanded architecture diagram of an infusion pump and its control
    server, which is also connected to the EHR and an update server'
  prefs: []
  type: TYPE_NORMAL
- en: Breaking the Architecture into Components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now let’s look at the architecture more closely. The infusion pump and the control
    server consist of several components, so we need to break down our model to identify
    threats more reliably. [Figure 2-3](#figure2-3) shows the architecture’s components
    in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: '![f02003](Images/f02003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-3: Breaking down our threat model further'
  prefs: []
  type: TYPE_NORMAL
- en: The pump system consists of the hardware (the actual pump), an operating system,
    and the software and microcontroller operating inside the pump. We’ve also taken
    into account the control server’s operating system, the *control server service*
    (the program operating the control server), and the restrictive user interface,
    which limits the user’s interaction with the service.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a better idea of the system, let’s establish the direction
    in which information flows between these components. By doing so, we’ll locate
    sensitive data and figure out which components an attacker might target. We might
    also reveal hidden data-flow paths we didn’t know about. Let’s assume that, after
    examining the ecosystem further, we conclude that data flows both ways between
    all components. We’ve noted this using bidirectional arrows in [Figure 2-3](#figure2-3).
    Keep that detail in mind.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s move on by adding trust boundaries to our diagram ([Figure 2-4](#figure2-4)).
    *Trust boundaries* surround groups with the same security attributes, which can
    help us expose data-flow entry points that might be susceptible to threats.
  prefs: []
  type: TYPE_NORMAL
- en: '![f02004](Images/f02004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-4: Diagram with trust boundaries included'
  prefs: []
  type: TYPE_NORMAL
- en: 'We create separate trust boundaries around the pump, the control server, the
    onsite components, and the offsite components. For practical reasons, we also
    add two external users: the patient who will use the pump and the nurse who will
    operate the control server.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that sensitive information, such as patient data from the pump, can
    reach the third-party vendor’s update server through the control server. Our method
    works: we’ve already spotted our first threat, an insecure update mechanism, which
    could expose patient data to unauthorized systems.'
  prefs: []
  type: TYPE_NORMAL
- en: Identifying Threats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now we’ll apply the STRIDE framework to the diagram’s components, giving us
    a more comprehensive list of threats. Although we’ll discuss only some of those
    components in this exercise for brevity, you should address all of them as part
    of your threat modeling process.
  prefs: []
  type: TYPE_NORMAL
- en: First, we’ll examine the product’s general security requirements. Often, the
    vendor establishes these requirements during development. If we don’t have the
    vendor’s specific list of requirements, we can review the device documentation
    to determine them on our own. For example, as a medical device, the drug infusion
    pump must ensure patient safety and privacy. In addition, all medical equipment
    should be accredited with certifications specific to the market in which it’s
    launched. For instance, devices traded on the extended Single Market in the European
    Economic Area (EEA) should have the Conformité Européenne (CE) certification mark.
    We’ll keep these requirements in mind as we analyze each component.
  prefs: []
  type: TYPE_NORMAL
- en: The Restrictive User Interface
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The *restrictive user interface (RUI)* is the kiosk app that interacts with
    the control server service. This app severely limits the actions a user can execute.
    It’s like an ATM app; you can interact with the software but only in a handful
    of ways. In addition to the general security requirements, the RUI has its own
    specific constraints. First, the user shouldn’t be able to escape the app. Second,
    the user must authenticate with valid credentials to access it. Now let’s go through
    each part of the STRIDE model to identify threats.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to *spoofing*, the RUI authenticates users with weak, four-digit
    PINs that adversaries can easily predict. If attackers predict the PIN correctly,
    they can access authorized accounts and send commands to the infusion pump on
    behalf of the accounts’ owners.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of *tampering*, the RUI can receive input other than the limited set
    of allowed input. For example, it could receive input through an external keyboard.
    Even if most of the keyboard keys have been disabled, the system might still allow
    key combinations, such as shortcuts, hotkeys, or even accessibility features configured
    by the underlying operating system (like closing a window by pressing alt-F4 on
    Windows). These could allow users to bypass the RUI and exit the kiosk application.
    We’ll describe this kind of attack in Chapter 3\.
  prefs: []
  type: TYPE_NORMAL
- en: For *repudiation*, the RUI supports only a single user account for the medical
    staff, making all the log files, if any exist, useless because you can’t identify
    who actually used the device. Because the RUI can’t operate in multiuser mode,
    any member of the medical team can access the control server and operate the infusion
    pump without the system being able to distinguish between them.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to *information disclosure*, it’s possible that certain debugging
    messages or errors, when presented to the user, might reveal important information
    about the patients or system internals. Adversaries might be able to decode these
    messages, discover technologies the underlying system uses, and figure out a way
    to exploit them.
  prefs: []
  type: TYPE_NORMAL
- en: The RUI might be vulnerable to *denial of service* attacks because of its brute-force
    protection mechanism, which locks a user out of the system after five consecutive
    incorrect login attempts. Once the brute-force protection is active, no user can
    log into the system for a set period of time. If the medical team accidentally
    triggers this feature, they might block access to the system and violate the patient
    safety security requirement as a result. Even though security features might protect
    against some threats, they’ll often cause other threats. Finding the balance between
    security, safety, and usability is a difficult task.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of *elevation of privilege*, critical medical systems frequently have
    remote support solutions that allow the vendor’s technicians to access the software
    instantly. The existence of these features automatically increases the component’s
    threat surface, because these services are prone to vulnerabilities, and attackers
    can abuse them to get remote administrative access within the RUI or the control
    server service. Even if these features require authentication, the credentials
    might be publicly available or be the same for all products of this line. Or there
    could be no authentication at all.
  prefs: []
  type: TYPE_NORMAL
- en: The Control Server Service
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The control server serviceis the app that operates the control server. It’s
    responsible for communicating with the RUI, the drug library, and the drug infusion
    pump. It also communicates with the EHR (to receive information about the patients)
    using HTTPS and with the update server (to receive software and drug library updates)
    using a custom TCP protocol.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the general security requirements mentioned earlier, the control
    server should be able to identify and verify drug infusion pumps to avoid *skimming
    attacks*, in which an adversary replaces peripheral components with similar, tampered
    ones. We should also make sure the data-in-transit is protected. In other words,
    the communication protocol between the control server and the pump must be secure
    and shouldn’t allow for replay attacks or interception. *Replay attacks* cause
    the retransmission or delay of a critical or state altering request to the server.
    Additionally, we must ensure that attackers can’t compromise the hosting platform’s
    security controls, which might include application sandboxing, filesystem permissions,
    and existing role-based access controls.
  prefs: []
  type: TYPE_NORMAL
- en: Using STRIDE, we can identify the following threats. *Spoofing* attacks could
    occur because the control server doesn’t have a solid method of identifying drug
    infusion pumps. If you briefly analyze the communication protocol, you can imitate
    a pump and communicate with the control server, which might lead to more threats.
  prefs: []
  type: TYPE_NORMAL
- en: An attacker could *tamper* with the service, because the control server doesn’t
    have a solid method of verifying the data integrity that the drug infusion pump
    sends. That means the control server might be vulnerable to *man-in-the-middle
    attacks*, in which an attacker modifies the data sent to the control server and
    provides the server with falsified readings. If the control server bases its actions
    on the falsified readings, this attack might directly affect the patients’ health
    and safety.
  prefs: []
  type: TYPE_NORMAL
- en: The control server might enable *repudiation* because it uses *world-writeable
    logs*, which any system user is capable of overwriting, to monitor its actions.
    These logs files can be subject to insider tampering by an attacker to hide certain
    operations.
  prefs: []
  type: TYPE_NORMAL
- en: Regarding *information disclosure*, the control server unnecessarily sends sensitive
    patient information to the update server or drug infusion pump. This information
    could range from vital measurements to personal information.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of *denial of service*, adversaries in close proximity to the control
    server can jam the server’s signal and disable any kind of wireless communication
    with the drug infusion pump, rendering the whole system useless.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the control server might be vulnerable to *elevation of privilege*
    if it inadvertently exposes API services that allow unauthenticated adversaries
    to perform high-privileged functionalities, including altering the drug infusion
    pump settings.
  prefs: []
  type: TYPE_NORMAL
- en: The Drug Library
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The drug library is the system’s main database. It holds all information related
    to the drugs the pump uses. This database can also control the user management
    system.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of *spoofing*, users interacting with the database through the RUI
    or pump might be able to execute actions by impersonating other database users.
    For instance, they might exploit an application vulnerability to abuse the lack
    of controls for the user’s input from the RUI.
  prefs: []
  type: TYPE_NORMAL
- en: The drug library might be vulnerable to *tampering* if the library fails to
    properly sanitize user input from the RUI. This could lead to *SQL injection attacks*,
    which allow attackers to manipulate the database or execute untrusted code.
  prefs: []
  type: TYPE_NORMAL
- en: The database could allow *repudiation* if logs for user requests originating
    from the drug infusion pump store the request’s user agent in an unsafe manner,
    allowing adversaries to pollute the database’s log files (for example, by using
    line-feed characters to insert fake log entries).
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to *information disclosure*, the database might contain functions
    or stored procedures that perform external requests (such as DNS or HTTP requests).
    An adversary could abuse these to exfiltrate data using an out-of-band SQL injection
    technique. This method is extremely useful to attackers who are able to perform
    only blind SQL injections, in which the server’s output doesn’t contain the data
    resulting from the injected query. For example, adversaries could smuggle out
    sensitive data by constructing URLs and placing this data in the subdomain of
    a domain that they control. Then they can supply this URL to one of these vulnerable
    functions and force the database to perform an external request to their server.
  prefs: []
  type: TYPE_NORMAL
- en: '*Denial of service* attacks might also occur in cases when an adversary abuses
    components that allow complex queries. By forcing the components to perform unnecessary
    computations, the database might come to a halt when no more resources are available
    to complete the requested query.'
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, when it comes to *elevation of privilege*, certain database functions
    might allow users to run code with the highest privileges. By performing a specific
    set of actions through the RUI component, the user might be capable of calling
    these functions and escalating their privileges to that of a database superuser.
  prefs: []
  type: TYPE_NORMAL
- en: The Operating System
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The operating system receives input from the control server service, so any
    threats to it derive directly from the control server. The operating system should
    have integrity checking mechanisms and a baseline configuration that incorporates
    specific security principles. For example, it should protect data-at-rest, enable
    update procedures, enable network firewalls, and detect malicious code.
  prefs: []
  type: TYPE_NORMAL
- en: The component could allow *spoofing* if an adversary is able to boot their own
    custom operating system. This custom operating system could deliberately lack
    support for necessary security controls, such as application sandboxing, filesystem
    permissions, and role-based access control. An attacker can then study the application
    and extract vital information that otherwise wouldn’t be available due to the
    security controls.
  prefs: []
  type: TYPE_NORMAL
- en: As for *tampering*, if adversaries have local or remote access to the system,
    they could manipulate the operating system. For example, they could change the
    current security settings, disable the firewall, and install a backdoor executable.
  prefs: []
  type: TYPE_NORMAL
- en: '*Repudiation* vulnerabilities might be present on the operating system if the
    system logs are stored only locally and if a high-privileged adversary could alter
    them.'
  prefs: []
  type: TYPE_NORMAL
- en: With respect to *information disclosure*, error and debugging messages might
    reveal information about the operating system that could help adversaries exploit
    the system even further. Messages might also include sensitive patient information,
    which could violate compliance requirements.
  prefs: []
  type: TYPE_NORMAL
- en: The component might be susceptible to *denial of service* attacks if an adversary
    triggers an unwanted system restart (during an update process, for example) or
    deliberately shuts down the system, causing the whole system to halt its operation.
  prefs: []
  type: TYPE_NORMAL
- en: Attackers could achieve *elevation of privilege* if they abuse vulnerable functionalities,
    software designs, or misconfigurations of high-privileged services and applications
    to obtain elevated access to resources that should be available only to a superuser.
  prefs: []
  type: TYPE_NORMAL
- en: The Device Components’ Firmware
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Next, let’s consider all the device components’ firmware, such as the CD/DVD
    drive, controllers, display, keyboard, mouse, motherboard, network card, sound
    card, video card, and so on. *Firmware* is a kind of software that provides specific
    low-level operations. It’s usually stored on the components’ nonvolatile memory
    or loaded into the components by a driver during the initialization. The device’s
    vendor typically develops and maintains its firmware. The vendor should also sign
    the firmware, and the device should verify this signature.
  prefs: []
  type: TYPE_NORMAL
- en: The component might be susceptible to *spoofing* if the attackers can exploit
    logic bugs that downgrade the firmware to older versions containing known vulnerabilities.
    Adversaries could also install custom firmware that pretends to be the latest
    available version from the vendor when the system requests an update.
  prefs: []
  type: TYPE_NORMAL
- en: The attackers might succeed in *tampering* with the firmware by installing malware
    on it. This is a common technique for *advanced persistent threat (APT)* attacks,
    in which the adversary attempts to remain undetected for an extended period and
    survive an operating system reinstallation or hard disk replacement. For example,
    a hard disk firmware modification containing a Trojan horse could allow users
    to store data in locations that won’t be erased even if they format or wipe the
    disk. IoT devices often don’t verify the integrity of the digital signature and
    firmware, making this kind of attack even easier. In addition, tampering with
    the configuration variables of certain firmware (such as BIOS or UEFI) might allow
    adversaries to disable certain hardware-supported security controls, like secure
    boot.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of *information disclosure*, any firmware that establishes a communication
    channel with third-party vendors servers (for analytics purposes or to request
    information about updates, for example) might also expose private data related
    to the patients, likely violating regulations. Also, sometimes the firmware exposes
    unnecessary security-related API functionalities, which adversaries can abuse
    to extract data or escalate their privileges. This might include the disclosure
    of System Management Random Access Memory (SMRAM) contents, storage that System
    Management Mode uses, which gets executed with high privileges and handles CPU
    power management.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to *denial of service*, some device component vendors use over-the-air
    (OTA) updates to deploy firmware and configure the corresponding component securely.
    Sometimes, adversaries are able to block these updates, leaving the system in
    an insecure or unstable state. In addition, adversaries might be able to directly
    interact with the communication interface and attempt to corrupt the data to halt
    the system.
  prefs: []
  type: TYPE_NORMAL
- en: With regards to *elevation of privilege*, adversaries can escalate their privileges
    by exploiting known vulnerabilities in the drivers and abusing undocumented, exposed
    management interfaces, such as System Management Mode. Also, many device components
    ship with default passwords embedded in their firmware. Attackers can use these
    passwords to gain privileged access to the components’ management panels or the
    actual host system.
  prefs: []
  type: TYPE_NORMAL
- en: The Physical Equipment
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now we’ll assess the physical equipment’s security, including the box containing
    the control server’s processor and the RUI screen. When attackers gain physical
    access to a system, you should generally assume that they’ll have full administrative
    access. There are very few ways to completely protect against that. Nonetheless,
    you can implement mechanisms to make this process a lot harder for adversaries.
  prefs: []
  type: TYPE_NORMAL
- en: Physical equipment has quite a few more security requirements than the rest.
    First, the clinic should store the control server in a room that only authorized
    employees have access to. The component should support hardware attestation and
    have a secure boot process, one based on keys burned into the CPU. The device
    should have memory protection enabled. It should be able to perform secure, hardware-backed
    key management, storage, and generation, as well as secure cryptographic operations,
    like generating random numbers, encrypting data with a public key, and secure
    signing. Additionally, it should seal all critical components using epoxy or another
    adhesive that would prevent people from easily inspecting the circuit design,
    making reverse engineering more difficult.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of *spoofing*, adversaries might be able to replace critical hardware
    parts with faulty or insecure ones. We call these attacks *supply chain attacks*,
    because they often occur during the product’s manufacturing or shipping stages.
  prefs: []
  type: TYPE_NORMAL
- en: With regards to *tampering*, it’s possible for a user to insert external USB
    devices, like keyboards or flash drives, to provide the system with untrusted
    data. Also, attackers can replace existing physical input devices (such as keyboards,
    configuration buttons, and USB or Ethernet ports) with malicious ones that leak
    data to external parties. Exposed hardware programming interfaces, like JTAG,
    might also allow adversaries to change the device’s current settings and extract
    the firmware or even reset the device to an insecure state.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to *information disclosure*, attackers can discover information
    about the system and its operation by simply observing it. In addition to that,
    the RUI screen can’t protect the system against photographs that capture its sensitive
    information. Someone could remove external storage devices and extract the stored
    data. Adversaries might also be able to passively infer sensitive patients’ information,
    cleartext passwords, and encryption keys by exploiting potential side-channel
    leaks in the hardware implementation (such as electromagnetic interference or
    CPU power consumption) or by analyzing memory sections while performing a cold-boot
    attack.
  prefs: []
  type: TYPE_NORMAL
- en: The service might be vulnerable to *denial of service* in cases when a power
    outage occurs and causes the system to shut down. This threat will directly affect
    all the components that require the control server to operate. Additionally, adversaries
    with physical access to the hardware can manipulate the device’s internal circuit
    structure, causing it to malfunction.
  prefs: []
  type: TYPE_NORMAL
- en: '*Elevation of privilege* might occur from vulnerabilities such as race conditions
    and insecure error handling. These issues are often inherent in the design of
    the embedded CPUs, and they could allow a rogue process to read all memory or
    to write in arbitrary memory locations, even when not authorized to do so.'
  prefs: []
  type: TYPE_NORMAL
- en: The Pump Service
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The pump service is the software operating the pump. It consists of a communication
    protocol that connects with the control server and a microcontroller that controls
    the pump. In addition to the general security requirements, the pump should identify
    and verify the control server service’s integrity. The communication protocol
    between the control server and the drug infusion pump should be secure, and it
    shouldn’t allow for replay attacks or interception.
  prefs: []
  type: TYPE_NORMAL
- en: '*Spoofing* can affect the component if the drug infusion pump doesn’t use sufficient
    validation checks or verify that it’s indeed communicating with a valid control
    server. Insufficient validation checks can also lead to *tampering* attacks, if,
    for instance, the pump allows maliciously crafted requests to change the pump’s
    settings. As for *repudiation* issues, the infusion pump might use custom-made
    log files. If these files aren’t read-only, they’ll be prone to tampering.'
  prefs: []
  type: TYPE_NORMAL
- en: The pump service might allow for *information disclosure* if the communication
    protocol between the control server and the infusion pump doesn’t use encryption.
    In that case, man-in-the-middle attackers could capture transmitted data, including
    sensitive patient information.
  prefs: []
  type: TYPE_NORMAL
- en: The service might be vulnerable to *denial of service* if, after a thorough
    analysis of the communication protocol, an attacker identifies a shutdown command.
    Additionally, if the pump runs as a superuser and has complete control over the
    device, it might be prone to *elevation of privilege*.
  prefs: []
  type: TYPE_NORMAL
- en: You might have discovered more threats than those we’ve mentioned, and you’ve
    likely identified additional security requirements for each component. A good
    rule is to find at least one or two threats per STRIDE category for each component.
    If you can’t think of that many on the first attempt, revisit your threat model
    multiple times.
  prefs: []
  type: TYPE_NORMAL
- en: Using Attack Trees to Uncover Threats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to identify new threats in a different way or model existing ones
    for further analysis, you could use an attack tree. An *attack tree* is a visual
    map that starts by defining a generic attack objective and then becomes more specific
    as the tree expands. For example, [Figure 2-5](#figure2-5) shows an attack tree
    for the threat of tampering with drug delivery.
  prefs: []
  type: TYPE_NORMAL
- en: Attack trees can provide greater insight on the outcome of our threat model,
    and we might uncover threats that we missed earlier. Notice that each node contains
    a possible attack that requires one or more of the attacks described in its child
    nodes. In some cases, the attack might require all of its child nodes. For example,
    tampering with database data within infusion pumps requires you to gain database
    access *and* have improper access controls in the drug library tables. However,
    you can tamper with the drug delivery by either changing the infusion rate *or*
    by disrupting the infusion rate update using a denial of service attack.
  prefs: []
  type: TYPE_NORMAL
- en: '![f02005](Images/f02005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-5: Attack tree for the threat of tampering with drug delivery'
  prefs: []
  type: TYPE_NORMAL
- en: Rating Threats with the DREAD Classification Scheme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Threats pose no danger on their own. For a threat to matter, it must have some
    sort of impact. We can’t figure out the true impact of the threats we’ve discovered
    until we review the vulnerability assessment results. Still, at some point you
    should evaluate the risk posed by each threat. We’ll show you how to do this using
    *DREAD*, a risk rating system. The DREAD acronym represents the following criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: Damage How damaging the exploitation of this threat would be
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reproducibility How easy the exploit is to reproduce
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploitability How easy the threat is to exploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Affected Users How many users would be affected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discoverability How easy it is to identify the threat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll assign each of these categories a score between 0 and 10, and then use
    the scores to calculate the final risk score of a threat.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, let’s use DREAD to rate the threat caused by the RUI’s weak four-digit
    PIN authentication method. First, if adversaries can guess someone’s PIN, they
    can access the current user’s data. Because the attack would affect only a single
    patient, we’ll give the *Damage* and *Affected Users* categories half of the maximum
    score, or a score of five. Next, because even a nonskilled adversary can easily
    identify, exploit, and reproduce this threat, we’ll give the *Discoverability*,
    *Exploitability*, and *Reproducibility* categories the maximum score of 10\. After
    adding these scores and dividing them by the number of categories, the result
    is an average threat ranking of 8 out of 10, as shown in [Table 2-1](#table2-1).
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 2-1: DREAD Scoring Matrix'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Threat** | **Score** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Damage | 5 |'
  prefs: []
  type: TYPE_TB
- en: '| Reproducibility | 10 |'
  prefs: []
  type: TYPE_TB
- en: '| Exploitability | 10 |'
  prefs: []
  type: TYPE_TB
- en: '| Affected Users | 5 |'
  prefs: []
  type: TYPE_TB
- en: '| Discoverability | 10 |'
  prefs: []
  type: TYPE_TB
- en: '| **Total** | **8** |'
  prefs: []
  type: TYPE_TB
- en: You could follow a similar approach to classify the rest of the identified threats
    and prioritize your responses to them.
  prefs: []
  type: TYPE_NORMAL
- en: Other Types of Threat Modeling, Frameworks, and Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far in this chapter, we’ve presented one possible framework for threat modeling:
    a software-centric approach that prioritizes the vulnerability of each application
    component. But there are other possible frameworks you could follow, such as asset-centric
    and attacker-centric approaches. You might use one of these alternative methods
    depending on your assessment’s specific needs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In an *asset-centric* threat model, you’d first identify the system’s important
    information. For the drug infusion pump, assets could include the patients’ data,
    the control server’s authentication credentials, the infusion pump configuration
    settings, and the software releases. You’d then analyze these assets based on
    their security attributes: in other words, what each asset needs to maintain its
    confidentiality, integrity, and availability. Note that you probably won’t create
    a complete list of assets, because what’s considered valuable depends on each
    person’s point of view.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The *attacker-centric* approach focuses on identifying potential attackers.
    Once you’ve done so, you’d use their attributes to develop a basic threat profile
    for each asset. This approach has some problems: it requires you to gather extensive
    intelligence about modern threat actors, their recent activity, and their characteristics.
    In addition, it’s possible that you’ll accidentally fall back on your own biases
    about who attackers are and what they want. To avoid doing so, use the standardized
    descriptions of threat agents provided by the Intel Threat Agent Library at [https://www.intel.com/content/dam/www/public/us/en/documents/solution-briefs/risk-assessments-maximize-security-budgets-brief.pdf](https://www.intel.com/content/dam/www/public/us/en/documents/solution-briefs/risk-assessments-maximize-security-budgets-brief.pdf).
    For example, in our scenario, our list of agents might include the Untrained Nurse
    who misuses the system, the Reckless Nurse who deliberately circumvents existing
    security controls for expediency, and the Hospital Thief who can steal small components
    (such as hard disks and SD cards) or even the whole drug infusion pump. More advanced
    actors could include the Data Miner, who searches for internet-connected control
    servers and collects patient data, or the Government Cyber Warrior, who performs
    state-sponsored attacks to disrupt the use of infusion pumps on a national scale.'
  prefs: []
  type: TYPE_NORMAL
- en: You can also make other choices when threat modeling. Frameworks other than
    STRIDE include PASTA, Trike, OCTAVE, VAST, Security Cards, and Persona non Grata.
    We won’t cover these models here, but you might find them useful for certain assessments.
    We used data flow diagrams to model our threats, but you could also use other
    types of diagrams, such as unified modeling language (UML), swimlane diagrams,
    or even state diagrams. It’s up to you to decide what system makes the most sense
    and works best for you.
  prefs: []
  type: TYPE_NORMAL
- en: Common IoT Threats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s review some common threats in IoT systems. The list isn’t exhaustive,
    but you could use it as a baseline for your own threat models.
  prefs: []
  type: TYPE_NORMAL
- en: Signal Jamming Attacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a *signal jamming attack*, the adversary interferes with the communication
    between two systems. IoT systems usually have their own ecosystems of nodes. For
    example, the drug infusion pump system has one control server connected to multiple
    drug infusion pumps. With special equipment, it’s possible to isolate the control
    server and pumps from each other. In critical systems like this one, this threat
    could prove fatal.
  prefs: []
  type: TYPE_NORMAL
- en: Replay Attacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a *replay attack*, the adversary repeats some operation or resends a transmitted
    packet. In the drug infusion pump example, this could mean that a patient receives
    multiple doses of a drug. Replay attacks, regardless of whether or not they affect
    IoT devices, are usually severe.
  prefs: []
  type: TYPE_NORMAL
- en: Settings Tampering Attacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In *settings tampering attacks*, the adversary exploits a component’s lack
    of integrity to change its settings. For the drug infusion pump, these settings
    could include the following: exchanging the control server with a malicious control
    server, changing the primary drug used, or altering the network settings to cause
    a denial of service attack.'
  prefs: []
  type: TYPE_NORMAL
- en: Hardware Integrity Attacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Hardware integrity attacks* compromise the integrity of the physical device.
    For example, an attacker might bypass insecure locks or easily accessible USB
    ports, especially if they’re bootable. All IoT systems face this threat, because
    no device integrity protection is perfect. Still, certain techniques make it more
    difficult. Once, during a vulnerability assessment of a certain medical device,
    we realized that unless we very carefully disassembled the device with specialized
    equipment, a fail-safe mechanism, also known as a *fuse*, would destroy the board.
    This mechanism proved that the product’s designers had taken seriously the possibility
    of device tampering. Yet we eventually bypassed the protection mechanism.'
  prefs: []
  type: TYPE_NORMAL
- en: Node Cloning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Node cloning* is a threat that arises as part of a *Sybil attack*, in which
    an attacker creates fake nodes in a network to compromise its reliability. IoT
    systems commonly use multiple nodes in their ecosystem, such as when one control
    server manages multiple drug infusion pumps.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We often find node cloning threats in IoT systems. One reason is that the association
    protocols that the nodes use to communicate aren’t very sophisticated, and creating
    fake nodes can sometimes be easy. Occasionally, you can even create a fake master
    node (in our example, the control server). This threat could affect the system
    in various ways: is there a finite number of nodes a control server can connect
    to? Can this threat lead to a denial of service attack? Can it cause attackers
    to propagate falsified information?'
  prefs: []
  type: TYPE_NORMAL
- en: Security and Privacy Breaches
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Privacy breaches are one of the biggest and most consistent threats in IoT systems.
    Often, very little protects user data confidentiality, so you can find this threat
    in almost any communication protocol that transfers data to and from a device.
    Map the system architecture, find the components that might contain sensitive
    user data, and monitor the endpoints that transfer them.
  prefs: []
  type: TYPE_NORMAL
- en: User Security Awareness
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Even if you manage to mitigate all other threats, you’ll probably have trouble
    addressing users’ security awareness. This could include their ability to detect
    phishing emails, which could compromise their workstations, or their habit of
    allowing unauthorized people into sensitive areas. People who work with medical
    IoT equipment have a saying: if you’re looking for a hack, a business logic bypass,
    or something that will accelerate some processing tasks, just ask the nurse operating
    the system. Because they use this system daily, they’ll know all the system shortcuts.'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter provided you with an introduction to threat modeling, the process
    of identifying and listing possible attacks against an examined system. By walking
    through a threat model for a drug infusion pump system, we outlined the basic
    stages of the threat modeling process and described a few of the core threats
    IoT devices face. The approach we explained was simple and might not be the best
    for every situation, so we encourage you to explore other frameworks and processes.
  prefs: []
  type: TYPE_NORMAL
