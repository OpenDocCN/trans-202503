- en: '28'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: THE LORENTZ FORCE LAW
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We’ve seen that modern electromagnetic theory is a field theory. The existence
    of electric and magnetic fields explains electric and magnetic phenomena. Electric
    charge (and its moving form, current) is both the source of these fields and the
    recipient of force from these fields. Electromagnetic theory, then, has two aspects:
    charge creates electric and magnetic fields, and electric and magnetic fields
    apply force to charge. In the last four chapters, we dealt with the first of these
    aspects in static and steady situations. We showed how charge creates electric
    fields and how current creates magnetic fields.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll consider the *Lorentz force law*, which addresses the
    second aspect of electromagnetic theory by describing how electric and magnetic
    fields apply force to charge. Then, in the next and final chapter of this book,
    we’ll return to the first aspect of electromagnetic theory with the *Maxwell equations*,
    which describe how electric and magnetic fields are created and evolve in dynamic
    situations.
  prefs: []
  type: TYPE_NORMAL
- en: Our goal in this chapter is to describe the motion of a charged particle in
    the presence of an electric field and a magnetic field. After a short discussion
    about statics and dynamics in electromagnetic theory, we’ll turn to the question
    of an appropriate state for a particle in the presence of electric and magnetic
    fields. We’ll then introduce the Lorentz force law, which describes the force
    on such a particle. We’ll explain the purpose of the electric field and then address
    the question of how to perform state-update functions on a particle experiencing
    forces from electric and magnetic fields. We’ll describe a particle’s response
    to an imposed electric and magnetic field, but we will save consideration of the
    electromagnetic field radiated by moving charges for the final chapter of the
    book. We’ll finish the chapter by making some animations of a particle in electric
    and magnetic fields.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s begin with some introductory code.
  prefs: []
  type: TYPE_NORMAL
- en: Introductory Code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Listing 28-1](ch28.xhtml#ch28list1) shows the first lines of code in the `Lorentz`
    module we will write in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 28-1: Opening lines of code for the `Lorentz` module*'
  prefs: []
  type: TYPE_NORMAL
- en: We use types and functions from the `SimpleVec` module of [Chapter 10](ch10.xhtml),
    the `Mechanics1D` module of [Chapter 15](ch15.xhtml), the `Mechanics3D` module
    of [Chapter 16](ch16.xhtml), and the `CoordinateSystems` module of [Chapter 22](ch22.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: This is the first time we’re dealing with the dynamics of electromagnetic theory,
    so a short discussion of statics and dynamics will help set the stage for this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Statics and Dynamics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Part II](part02.xhtml) of this book dealt with mechanics, which is a *dynamic*
    subject, in that the quantities we’re interested in, including position, velocity,
    acceleration, force, momentum, and energy, are all changing in time. Newton’s
    second law, in particular, is a dynamic equation because it tells us how the velocity
    of a particle changes in the presence of forces on the particle. So far in [Part
    III](part03.xhtml) of this book, electromagnetic theory has appeared to be a *static*
    subject, in that electric and magnetic fields were not changing in time. In the
    last four chapters, we spent our time exploring how static charges produce electric
    fields and how steady currents produce magnetic fields. But in fact, electromagnetic
    theory is just as much a dynamic subject as mechanics.'
  prefs: []
  type: TYPE_NORMAL
- en: Each of the two aspects of electromagnetic theory has dynamics associated with
    it. Because charges move and accelerate, electric and magnetic fields change in
    time. The Maxwell equations we’ll explore in the last chapter of this book describe
    how these fields change in time. Because a particle experiences forces, electromagnetic
    or otherwise, its velocity changes in time. This is the dynamics of mechanics
    we discussed in [Part II](part02.xhtml). Once we know the forces that act on a
    particle, we use Newton’s second law and the ideas in [Part II](part02.xhtml)
    to find the motion of the particle.
  prefs: []
  type: TYPE_NORMAL
- en: A good way to deal with dynamics is to ask how the state of a physical system
    changes with time. The practice of focusing on how the state of a physical system
    evolves in time will be just as useful in electromagnetic theory as it was in
    mechanics. Deciding what state variables to include in the state is just as important
    a question now as it was then. The strategy of choosing state variables and finding
    a differential equation that expresses how those variables change in time is one
    that transcends many theories in physics and beyond. It is not the only way to
    view physics, but it is a very important and useful way.
  prefs: []
  type: TYPE_NORMAL
- en: In preparation to do electrodynamics, then, we need to give some thought to
    an appropriate state. What do we put in a state? We can start with quantities
    we care about. In mechanics, we certainly care about the positions of particles,
    so we put them in the state. If the rate of change of a quantity we care about
    depends on other quantities, we may need to put them in the state as well. In
    mechanics, the rate of change of position is velocity, so we put velocity in the
    state. The rate of change of velocity depends on the forces that act on the particle,
    so we might choose to put quantities on which the forces depend in the state.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, we’re going to include the electric field and the magnetic field in the
    state. Conceptually and computationally, this is a pretty big step upward in complexity.
    Conceptually, this is the first time we are including functions in the state.
    Computationally, the sheer amount of information we need to keep track of in the
    state gets a major bump upward in going from mechanics to electromagnetic theory.
    In the mechanics of point particles, we need six numbers in the state for each
    particle in our system. We live in three-dimensional space, so we need three numbers
    to record the position of each particle, and we need three numbers to record the
    velocity of each particle. The electric field, a function from space to vectors,
    is closer to an infinite collection of numbers since the electric field contains
    a vector for every point in space.
  prefs: []
  type: TYPE_NORMAL
- en: There are two reasons to include electric and magnetic fields in the state of
    a system. One reason is that we care about the electric and magnetic fields, and
    we want to know how they change in time, although we won’t address the changes
    in electric and magnetic fields until the next chapter. A second reason to include
    the fields in the state is that they are needed to determine the electric force
    and the magnetic force on particles. We’ll deal with this issue in the present
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Besides the electric and magnetic fields, what else should we include in the
    state? One option for state is to keep track only of the electric field and the
    magnetic field, excluding particle information from the state. This choice for
    state is useful for electromagnetic waves, or radiation from a known source, but
    it is not useful if we care about the motion of particles, as we do in this chapter.
    Hence, we will not pursue this option in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: A second option for state is to include the position and velocity of each particle
    we care about in addition to the electric and magnetic fields. The two-body force
    we introduced in [Chapter 21](ch21.xhtml) to describe the Coulomb force between
    charged particles would no longer be needed because the electric and magnetic
    fields are now the entities that produce force on particles. The Maxwell equations
    would describe how the electric and magnetic fields change based on the charged
    particles present in the system. Newton’s second law would describe how the velocities
    of the particles change from electromagnetic and possibly other forces. In fact,
    removing two-body forces by introducing fields has been a theme in physics since
    1865\. Newton’s law of universal gravity, a two-body force, can be removed once
    the field theory of general relativity is incorporated.
  prefs: []
  type: TYPE_NORMAL
- en: However, there is a technical problem with this combination of multiple particles
    and fields. The problem is that each particle contributes to the electric field
    and the magnetic field. The contribution that a charged point particle makes to
    the electric field increases without bound as the field point approaches the location
    of the particle. Applying the equations in the most obvious, naive way provides
    an infinite, or undefined, force on every particle, produced by itself. This is
    both conceptually and computationally troubling. The best conceptual resolution
    is to argue that point particles had to be an idealization anyway and to treat
    charge as spread throughout some volume, abandoning the particle theory of charge
    for a field theory of charge. One computational “quick fix” is, for each particle,
    to keep track of the fields produced only by the other particles. We don’t want
    to get involved in any of these complexities, interesting as they may be, so we
    will not consider a state of multiple particles and fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, we will choose a third option: a state that includes the position
    and velocity for a single particle, along with the electric and magnetic fields.
    This will allow us to focus on the motion of a single particle in an electric
    and a magnetic field. Let’s see what this state looks like.'
  prefs: []
  type: TYPE_NORMAL
- en: State of One Particle and Fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By adding vector fields for the electric field and the magnetic field, we extend
    the type `ParticleState` we used in [Chapter 16](ch16.xhtml) for one particle
    to the type `ParticleFieldState`, which includes the fields. Here’s the definition
    of the data type using record syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have mass, charge, time, position, and velocity in the state,
    the same five state variables in `ParticleState` from [Chapter 16](ch16.xhtml).
    Now, we also include the electric and magnetic fields. Besides the two new slots
    for the fields, we are making one small change from the `ParticleState` type we
    used in [Chapter 16](ch16.xhtml). We are now using the `Position` data type we
    defined in [Chapter 22](ch22.xhtml) for position, rather than the `Vec` we used
    in [Part II](part02.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: As we have done in past chapters, when we write a new data type for state, we
    also write a new data type for state derivative. In other words, we write a data
    structure to hold the time derivatives of the state variables. Following the pattern
    we’ve used for naming this state derivative type, we call the new type `DParticleFieldState`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We want to be able to use the Euler and fourth-order Runge-Kutta methods for
    solving differential equations in this setting, and that requires us to make the
    new data type an instance of the `RealVectorSpace` type class. This amounts to
    defining what it means to add `ParticleFieldState`s and to scale such expressions
    by real numbers. Here is the instance declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: NOTE
  prefs: []
  type: TYPE_NORMAL
- en: '*Unfortunately, this code is some of the most repetitive and uninformative
    code in the book. It just recounts the obvious thing we must mean by adding or
    scaling each of the derivatives of state variables. It gives me pain to write
    such repetitive, boilerplate code. It’s a very interesting question to ask how
    we might avoid writing such code. I would love to give you the answer, but we
    must stay focused on the task at hand, which is defining a new data type and making
    sure it can be used with code we’ve already written.*'
  prefs: []
  type: TYPE_NORMAL
- en: We need a `Diff` instance to describe how the types `ParticleFieldState` and
    `DParticleFieldState` are related. Recall that this involves defining the function
    `shift` to show how state variables are shifted by derivatives over a small time
    interval.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As usual, we shift each state variable by the product of the corresponding derivative
    and the time step.
  prefs: []
  type: TYPE_NORMAL
- en: There is one more type class instance declaration we need. When we wrote the
    `simulateVis` function in [Chapter 16](ch16.xhtml) to make 3D animations, we wanted
    to use it with any of the state spaces we had defined, or any we might define
    in the future. The one requirement that `simulateVis` made on a state space was
    that it include a notion of time. The instance declaration below simply gives
    the function that returns the time of a state.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now that we’ve defined a new data type for the state of one particle with the
    electric and magnetic fields, let’s turn to a discussion of the force that electric
    and magnetic fields apply to a particle.
  prefs: []
  type: TYPE_NORMAL
- en: Lorentz Force Law
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Electric and magnetic fields produce forces on a charged particle. The force
    on a particle with charge *q*, position **r**(*t*), and velocity **v**(*t*) in
    an electric field **E** and a magnetic field **B** is given by the Lorentz force
    law.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/541equ02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The electric force,
  prefs: []
  type: TYPE_NORMAL
- en: '**F**[electric] = *q***E**(**r**(*t*))'
  prefs: []
  type: TYPE_NORMAL
- en: gives a sense of the meaning of the electric field. The electric field represents
    a force per unit charge at a position in space. There may or may not be any charge
    at a point in space, but if there is, the product of the charge and the electric
    field vector at that point gives the force on the charge. Positive charge feels
    a force in the same direction as the electric field vector; negative charge feels
    a force in the opposite direction.
  prefs: []
  type: TYPE_NORMAL
- en: The magnetic force
  prefs: []
  type: TYPE_NORMAL
- en: '**F**[magnetic] = *q***v**(*t*) × **B**(**r**(*t*))'
  prefs: []
  type: TYPE_NORMAL
- en: is harder to interpret because of the cross product, which indicates that the
    magnetic force on a charged particle is perpendicular to the magnetic field vector
    at the location of the particle and to the velocity of the particle. There is
    some symmetry between the creation of a magnetic field by a moving charge and
    the force from a magnetic field on a moving charge in that both processes are
    governed by equations containing a cross product. The appearance of charge and
    velocity in the magnetic force equation means that to feel a magnetic force, a
    particle must have charge and be moving. This is another symmetry between the
    creation and effect of magnetic field. Just as moving charge, or current, creates
    a magnetic field, it’s moving charge that feels a force from the field.
  prefs: []
  type: TYPE_NORMAL
- en: The Lorentz force law, Equation 28.1, is simply the sum of the electric and
    magnetic forces. The function `lorentzForce` expresses the Lorentz force law in
    Haskell.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Two of the terms, `eF` and `bF`, belong to the fields that produce the force.
    Three of the terms, `q`, `r`, and `v`, belong to the particle that feels the force.
    Because our state contains state variables for both the particle and the fields,
    the Lorentz force depends only on the state of the system.
  prefs: []
  type: TYPE_NORMAL
- en: Do We Really Need an Electric Field?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we use the two-part modern view of electricity to first calculate the electric
    field **E** produced by a particle with charge *q*[1] at position **r**[1]
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/541equ01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: and then apply the Lorentz force law to find the force on a particle with charge
    *q*[2] at position **r**[2]
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/542equ01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: we recover Equation 21.2, Coulomb’s 18th century electricity law. This is somewhat
    comforting since it gives us an opportunity to see how the electric field relates
    to Coulomb’s law. But what have we gained by introducing the electric field? It
    appears to be nothing but a large piece of ontological and mathematical baggage!
    Why introduce the electric field if we just get back Coulomb’s result?
  prefs: []
  type: TYPE_NORMAL
- en: The answer is that the electric field offers no new predictions over Coulomb’s
    theory in static situations, which is when charges are not moving or accelerating.
    In the world of statics, the electric field is at best a convenience and at worst
    an irritation. However, when charges are moving or accelerating, Coulomb’s law,
    as embodied in Equations 21.1, 21.2, and 21.3, no longer holds. The methods we
    developed in [Chapter 25](ch25.xhtml) also cease to hold. If charged particles
    move slowly, Coulomb’s law and the equations of [Chapter 25](ch25.xhtml) are good
    approximations, but as charges approach the speed of light, those theories fail
    completely.
  prefs: []
  type: TYPE_NORMAL
- en: What’s more, when charged particles accelerate, they radiate. In other words,
    they produce electric and magnetic fields that carry energy and momentum far away
    from the accelerating particle. The electric and magnetic fields take on a life
    of their own, and their description becomes an important part of the state of
    the system. Radiating electromagnetic fields are not treated in this chapter,
    but we do cover them in the final chapter of the book.
  prefs: []
  type: TYPE_NORMAL
- en: The electric and magnetic fields help enforce a principle of locality, the idea
    that interactions between entities (particles or fields) happen close to each
    other, not at a distance. Newton’s law of universal gravitation and Coulomb’s
    law are examples of *action at a distance*. They suggest that one object has a
    direct and instantaneous effect on another object arbitrarily far away. People
    have discussed the philosophical implications of this for centuries. Mathematically,
    it is no problem to have action at a distance in a framework that accommodates
    the idea of universal time. If a particle far away wiggles now, I feel the gravitational
    differences now. But since the acceptance of Einstein’s relativity, we have given
    up the idea of a universal time. What’s more, relativity tells us that the notion
    of simultaneity is observer dependent (or at least reference-frame dependent).
    In a framework of relativity, action-at-a-distance laws like Newton’s universal
    gravity and Coulomb’s law are quite problematic. Einstein realized that his 1905
    special relativity was incompatible with Newton’s universal gravity, and by 1915
    he had developed a new theory of gravity called general relativity.
  prefs: []
  type: TYPE_NORMAL
- en: By 1865, Faraday and Maxwell had done for electricity what Einstein did for
    gravity in 1915\. If a charged particle wiggles in one place, that modifies the
    electric field produced by the particle. Changes ripple through the electric field
    at the speed of light, and only later affect a second particle. Faraday and Maxwell
    made electromagnetic theory into a field theory that removed the need for action
    at a distance, explained the relationships between electricity and magnetism,
    predicted radiation, and gave a theory of light. The electric field is now viewed
    as a small price to pay for all these benefits.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve introduced the Lorentz force law, discussed it a bit, and seen
    how it governs the aspect of electromagnetic theory in which fields apply force
    to charge, let’s combine it with the state-based approach to dynamics that will
    allow us to predict the motion of a charged particle in electric and magnetic
    fields.
  prefs: []
  type: TYPE_NORMAL
- en: State Update
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unlike our previous chapters on mechanics in [Part II](part02.xhtml), in which
    we considered a list of forces from any source that act on a particle, in this
    chapter we’ll assume that the electric and magnetic forces that comprise the Lorentz
    force are the only forces acting on our particle. The reason for this is simply
    to keep our focus on electromagnetic theory. It is not too difficult to extend
    the code we write in this chapter to include arbitrary forces beyond electromagnetism
    that act on a particle.
  prefs: []
  type: TYPE_NORMAL
- en: The function `newtonSecondPFS` (`PFS` for `ParticleFieldState`) expresses the
    differential equation that gives the rates of change of the state variables. The
    only interesting rate of change is that of the velocity, which is based on the
    net force on the particle divided by its mass, according to Newton’s second law.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The mass and charge of the particle do not change, so their rates are 0\. Time
    changes at a rate of 1 second per second, so its rate is 1\. Position changes
    at a rate given by velocity; that’s just the definition of velocity. Velocity
    changes at a rate given by acceleration, which by Newton’s second law is net force
    divided by mass. Net force here is just the Lorentz force since we decided to
    limit our attention to electromagnetic forces. In this chapter, we are not allowing
    the electric and magnetic fields to change, so their rates are 0\. Since they
    are vector functions, their rates of change are the constant function that returns
    the zero vector, `const zeroV`.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 28-1](ch28.xhtml#ch28tab1) compares the function `newtonSecondPFS` to
    the other functions that expressed Newton’s second law in [Part II](part02.xhtml)
    when we worked with other state spaces. Because we are confining our attention
    to electromagnetic forces, and because these forces can be determined solely by
    information contained in the state of the particle-field system, the function
    `newtonSecondPFS` does not require a list of forces as input, as all of the other
    functions in the table do.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 28-1:** Functions for Newton’s Second Law'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Function** | **Type** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `newtonSecondV` | `Mass -> [Velocity -> Force] -> Velocity -> R` |'
  prefs: []
  type: TYPE_TB
- en: '| `newtonSecondTV` | `Mass ->` |'
  prefs: []
  type: TYPE_TB
- en: '|  | `[(Time, Velocity) -> Force] -> (Time, Velocity) -> (R, R)` |'
  prefs: []
  type: TYPE_TB
- en: '| `newtonSecond1D` | `Mass -> [State1D -> Force] -> State1D -> (R, R, R)` |'
  prefs: []
  type: TYPE_TB
- en: '| `newtonSecondPS` | `[OneBodyForce] -> ParticleState -> DParticleState` |'
  prefs: []
  type: TYPE_TB
- en: '| `newtonSecondMPS` | `[Force] -> MultiParticleState -> DMultiParticleState`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `newtonSecondPFS` | `ParticleFieldState -> DParticleFieldState` |'
  prefs: []
  type: TYPE_TB
- en: Recall that a numerical method allows us to transform a differential equation
    into a state-update function. State-update functions are important for animation
    and also for solving problems by obtaining a list of states.
  prefs: []
  type: TYPE_NORMAL
- en: The function `pfsUpdate` (`pfs` for `ParticleFieldState`, but lowercase since
    functions must begin with a lowercase letter) will serve as a state-update function
    for animation, or for producing a list of states.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The function uses fourth-order Runge-Kutta, simply because it tends to give
    the best results, but we could use any numerical method.
  prefs: []
  type: TYPE_NORMAL
- en: With a state-update function in hand, we are ready to animate the motion of
    a charged particle in electric and magnetic fields.
  prefs: []
  type: TYPE_NORMAL
- en: Animating a Particle in Electric and Magnetic Fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We want to use the `simulateVis` function to do 3D animation. This requires
    that we supply the five inputs to that function, which are a time-scale factor,
    an animation rate, an initial state, a display function, and a state-update function.
    The function `pfsUpdate` will serve as our state-update function.
  prefs: []
  type: TYPE_NORMAL
- en: Providing an initial state is made easier by defining a default state. With
    a default state in hand, we can specify an initial state by listing the items
    that differ from the default state. The default state has every state variable
    set to 0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The following function, `pfsVisObject`, is a display function that displays
    the particle as a green sphere, the electric field as a collection of blue vectors,
    and the magnetic field as a collection of red vectors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This function takes a real number as input that specifies the width of the cube
    of space we want to display. It calculates the electric field at a collection
    of eight locations and then finds the maximum electric field magnitude so that
    it can scale the displayed electric field vectors. It then calculates the magnetic
    field at the same eight locations and finds the maximum magnetic field magnitude
    so that it can scale the displayed magnetic field vectors.
  prefs: []
  type: TYPE_NORMAL
- en: The function uses another function, called `vectorsVisObject`, to make the pictures
    of electric field and magnetic field.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This function takes two scale factors as input: one specifying the number of
    meters per Vis unit, and another giving the number of vector field units per Vis
    unit. It then takes a list of pairs of positions and vectors to be displayed and
    a color for the vectors. The function `pfsVisObject` uses `vectorsVisObject` twice:
    once for the electric field and once for the magnetic field.'
  prefs: []
  type: TYPE_NORMAL
- en: Both `pfsVisObject` and `vectorsVisObject` use another helping function, called
    `scalePos`, that scales positions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This function works by scaling each position coordinate.
  prefs: []
  type: TYPE_NORMAL
- en: Our main program, called `animatePFS`, is a fun toy to play with. We can set
    the electric and magnetic fields to be whatever we wish and the initial conditions
    of the particle to be whatever we wish, and we can see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The function takes a time-scale factor and an animation rate as inputs, along
    with a display width and an initial state. It calls `simulateVis` to do the animation.
  prefs: []
  type: TYPE_NORMAL
- en: The next two subsections show specific animations for a proton in uniform electric
    and magnetic fields and for a classical electron orbiting a proton.
  prefs: []
  type: TYPE_NORMAL
- en: Uniform Fields
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Listing 28-1](ch28.xhtml#ch28list1) displays the motion of a proton in uniform
    electric and magnetic fields. The initial state of the system gives the proton
    mass, the proton charge, the initial proton velocity, the electric field, and
    the magnetic field. The electric field is a uniform field in the y-direction,
    and the magnetic field is a uniform field in the z-direction. The proton makes
    a curious hopping motion in the presence of these fields.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 28-2: Stand-alone program animating a proton in uniform electric and
    magnetic fields*'
  prefs: []
  type: TYPE_NORMAL
- en: By changing the electric field, the magnetic field, or the initial velocity
    of the proton, you can see many different sorts of motion. [Figure 28-1](ch28.xhtml#ch28fig1)
    shows a snapshot of the animation.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/547fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 28-1: A screenshot of the animation showing the motion of a proton
    in particular electric and magnetic fields*'
  prefs: []
  type: TYPE_NORMAL
- en: Classical Hydrogen
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Our second specific animation is a classical hydrogen atom. Hydrogen is the
    simplest atom, composed only of a proton and an electron. We need quantum mechanics
    to describe the properties of hydrogen correctly, but we will explore the Newtonian
    motion of an electron in the electric field created by a proton. This electric
    field provides an example of a non-uniform field, showing that our code can handle
    arbitrary electric and magnetic fields. It is important to note that our classical
    hydrogen atom uses the classical theory of Newtonian mechanics, but it does not
    use the full Faraday-Maxwell theory of electrodynamics, which is often regarded
    as “classical” because it is non-quantum. The Faraday-Maxwell theory, which we
    explore in the final chapter of this book, predicts that the electron radiates
    electromagnetic energy, causing it to spiral inward. Here we treat a simpler version
    of classical hydrogen in which the electron does not radiate.
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 28-3](ch28.xhtml#ch28list3) displays the motion of an electron in
    the presence of the electric field produced by a proton at the origin.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 28-3: Stand-alone program animating the electron in classical hydrogen*'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we use several local variables to determine the initial velocity
    for circular motion, which is needed in the initial state, and the period of the
    motion, which is used in the time-scale factor. The electron executes circular
    motion, much like a satellite orbiting a planet. [Figure 28-2](ch28.xhtml#ch28fig2)
    shows a snapshot of the animation of the electron in the electric field produced
    by a proton.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/548fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 28-2: A screenshot of the animation showing the motion of an electron
    in the electric field produced by a proton*'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter dealt with the aspect of electromagnetic theory in which fields
    apply force to charge. The Lorentz force law describes the force that electric
    and magnetic fields exert on charge. We then found the motion of a charged particle
    in electric and magnetic fields by using Newton’s second law, as we did in [Part
    II](part02.xhtml) of the book. We defined a new state space for one particle with
    electric and magnetic fields. Our differential equation and state-update rule
    modified only the particle state, leaving the state of the electric and magnetic
    fields unchanged. We complete the state-update project in the next chapter, where
    the Maxwell equations describe how the electric and magnetic fields change in
    time.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Exercise 28.1.** Write a function called `eulerCromerPFS`, analogous to the
    function `eulerCromerPS` from [Chapter 16](ch16.xhtml), that implements the Euler-Cromer
    method with the `ParticleFieldState` data type. Test it out by rewriting `pfsUpdate`
    with `eulerCromerPFS` in place of `rungeKutta4`. Recompile the animation code
    and see if there are any noticeable differences.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 28.2.** Suppose a particle with charge 9 nC is fixed at the origin.
    (9 nC is about the charge your sock might have coming out of the dryer.) A proton
    released from rest a distance 1 mm away will accelerate away from the origin.
    Make graphs of the proton position and proton velocity as functions of time.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 28.3.** Suppose a 1-m × 1-m plate has a uniform surface charge density
    of 9 nC/m². (9 nC of charge would raise its potential to a few tens of volts.)
    A proton is released from rest a distance 1 mm from the center of the plate and
    accelerates away from the plate. Make graphs of the proton position, velocity,
    and acceleration as functions of time.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 28.4.** A current loop with a radius of 10 cm carries a current
    of 100 A. (A 100-A current is usually the maximum a small house or large apartment
    will draw.) Let’s fix the loop in the xy-plane, center it at the origin, and have
    the current flow counterclockwise as viewed from the positive z-axis. We wish
    to see the effect on a proton traveling near the loop. Let’s start the proton
    at position'
  prefs: []
  type: TYPE_NORMAL
- en: (*x, y, z*) = (11 cm, −1 m, 0)
  prefs: []
  type: TYPE_NORMAL
- en: and give it an initial velocity in the positive y-direction. The proton should
    deflect to the left when it gets near the current loop since currents flowing
    in the same direction attract. Make pictures of the proton’s trajectory in the
    xy-plane. Explore how the deflection depends on the initial proton velocity.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 28.5.** Explore the motion of a proton in a uniform magnetic field
    with no electric field. By changing the initial velocity, you should be able to
    get the proton to move in a circle, a helix, and a line. Which initial velocities
    produce each motion?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 28.6.** Rewrite the function `newtonSecondPFS` so that it takes
    a list of non-electromagnetic forces as input.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
