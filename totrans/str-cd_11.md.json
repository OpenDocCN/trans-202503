["```\nFRACTRAN\n\nInput:\n    A sequence of fractions\n    An integer\n\nOperation:\n    1\\. Multiply the integer by the fractions in turn:\n    2\\.   If the product is an integer, use that as the new integer \n         and repeat from Step 1.\n    3\\.   If the product is not an integer, move to the following fraction.\n    4\\. If all fractions are exhausted, stop.\n\nOutput:\n    The final integer\n    Optionally: all intermediate integers, if desired\n\nAssumption:\n    The implementation must use arbitrary precision fractions.\n```", "```\n> sudo apt-get install racket\n```", "```\nWelcome to Racket v6.11.\n>\n```", "```\n(define argv (current-command-line-arguments))\n(define prog (file->list (vector-ref argv 0)))\n(define num (string->number (vector-ref argv 1)))\n(define trace (string->number (vector-ref argv 2)))\n\n➊ (define (FRACTRAN)\n    ➋ (do ((i 0 (+ i 1))) (#f)\n        ➌ (when (= i (length prog)) \n               (when (= trace 0) (display num)(newline))\n               (exit))\n        ➍ (let ((n (* num (list-ref prog i))))\n            ➎ (when (exact-integer? n) \n                   (set! num n)\n                   (set! i -1)\n                   (when (= trace 1) (display num)(newline))) ) ))\n➏ (FRACTRAN)\n```", "```\n➊ n = Fraction(int(sys.argv[2]))\n➋ p = LoadProgram(sys.argv[1])\n   m = int(sys.argv[3]) if (len(sys.argv) >= 4) else 0\n   k = 0\n➌ while (k < len(p)):\n    ➍ v = n * p[k]\n       if (v.denominator == 1):\n           if (m):\n               print(v)\n           n = Fraction(v)\n           k = -1 k += 1\n   if (not m):\n       print(n)\n```", "```\n> python3 FRACTRAN.py add.frac 72\n243\n> python3 FRACTRAN.py add.frac 3888\n19683\n> python3 FRACTRAN.py add.frac 2519424\n43046721\n> python3 FRACTRAN.py add.frac 4760622968832\n617673396283947\n```", "```\nracket -f FRACTRAN.scm $1 $2 $3\n```", "```\n> ./FRACTRAN add.frac 72 0\n243\n> ./FRACTRAN add.frac 3888 0\n19683\n> ./FRACTRAN add.frac 2519424 0\n43046721\n> ./FRACTRAN add.frac 4760622968832 0\n617673396283947\n```", "```\n;  Add two integers\n;\n;  Input:  (2**a)(3**b)\n;  Output: 3**(a+b)\n;\n3/2\n```", "```\n> ./FRACTRAN add.frac 72 1\n108\n162\n243\n```", "```\n> python3 FRACTRAN.py add2.frac 72 1\n48\n32\n```", "```\n8675311/8675309\n```", "```\n> ./FRACTRAN add3.frac 49138847138949979077348022181175509 0\n49138881124269787781458189243397551\n```", "```\n> python3\n>>> 8675311**5\n49138881124269787781458189243397551\n```", "```\n;  Input:  (2**a)(3**b)\n;  Output: 2**(a-b)\n;\n1/6\n```", "```\n> python3 FRACTRAN.py sub.frac 10616832 1\n1769472\n294912\n49152\n8192\n```", "```\n;  Input:  (2**a)(3**b)\n;  Output: 5**max(a b)\n;\n5/6 5/2 5/3\n```", "```\n> ./FRACTRAN max.frac 3359232 1\n2799360\n2332800\n1944000\n1620000\n1350000\n1125000\n937500\n781250\n1953125\n```", "```\nwhile not ((v2 == 0) and (v3 == 0)):\n    if (v2>0) and (v3>0):\n        v2 = v2 - 1 \n        v3 = v3 - 1 \n        v5 = v5 + 1 \n        continue\n    if (v2>0) and (v3==0):\n        v2 = v2 - 1 \n        v5 = v5 + 1 \n        continue\n    if (v2==0) and (v3>0):\n        v3 = v3 - 1 \n        v5 = v5 + 1 \n        continue\n```", "```\n;  Input: 2^a 7\n;  Output: 2^a 3^a\n;\n165/14 7/11 13/7 34/65 13/17 1/13\n```", "```\n;  Input:  2^a 3^b\n;  Output: 5^{ab}\n;\n\n455/22 11/13 1/11 2/7 11/3 1/2\n```", "```\n> ./FRACTRAN mult.frac 72 0\n15625\n```", "```\n;  Input:  2\n;\n\n17/91 78/85 19/51 23/38 29/33 77/29 95/23 77/19 1/17 \n11/13 13/11 15/14 15/2 55/1\n```", "```\n> python3 FRACTRAN.py primes.frac 2 1\n```", "```\n➊ def isPowerOfTwo(d):\n       s = \"{0:b}\".format(d)\n       n = s.count(\"1\")\n       p = len(s)-1\n       return (n == 1), p ➋ while (True):\n       try:\n        ➌ d = int(input())\n       except:\n           exit(0)\n       ok, p = isPowerOfTwo(d)\n       if (ok):\n           print(\"2**%d = %d\" % (p, 2**p))\n```", "```\n> python3 FRACTRAN.py primes.frac 2 1 | python3 power_of_two.py\n```", "```\n2**2 = 4\n2**3 = 8\n2**5 = 32\n2**7 = 128\n2**11 = 2048\n2**13 = 8192\n2**17 = 131072\n2**19 = 524288\n2**23 = 8388608\n2**29 = 536870912\n2**31 = 2147483648\n2**37 = 137438953472\n2**41 = 2199023255552\n2**43 = 8796093022208\n2**47 = 140737488355328\n2**53 = 9007199254740992\n```", "```\n;  Input:  10\n;\n3/11 847/45 143/6 7/3 10/91 3/7 36/325 1/2 36/5\n```", "```\n> ./FRACTRAN prime10.frac 10 1 | python3 power_of_ten.py\n```", "```\n165/14 11/63 38/21 13/7 34/325 1/13 184/95 1/19 \n7/11 13/17 19/23 1575/4\n```", "```\n> ./FRACTRAN collatz.frac 340282366920938463463374607431768211456 1 \n   | python3 power_of_two.py\n2**64 = 18446744073709551616\n2**32 = 4294967296\n2**16 = 65536\n2**8 = 256\n2**4 = 16\n2**2 = 4\n2**1 = 2\n```", "```\n 388,  194,   97,  292,  146,   73,  220,  110,   55,  166,\n  83,  250,  125,  376,  188,   94,   47,  142,   71,  214, \n 107,  322,  161,  484,  242,  121,  364,  182,   91,  274, \n 137,  412,  206,  103,  310,  155,  466,  233,  700,  350, \n 175,  526,  263,  790,  395, 1186,  593, 1780,  890,  445, \n1336,  668,  334,  167,  502,  251,  754,  377, 1132,  566, \n 283,  850,  425, 1276,  638,  319,  958,  479, 1438,  719, \n2158, 1079, 3238, 1619, 4858, 2429, 7288, 3644, 1822,  911, \n2734, 1367, 4102, 2051, 6154, 3077, 9232, 4616, 2308, 1154, \n 577, 1732,  866,  433, 1300,  650,  325,  976,  488,  244, \n 122,   61,  184,   92,   46,   23,   70,   35,  106,   53, \n 160,   80,   40,   20,   10,    5,   16,    8,    4,    2,   1\n```", "```\n;  Input:  2^3 5^1 7^1 11^1 == 3080\n;  Output: 72697676794432877982766833\n\n3/2 41/5 6701021/7 9800132160937639/11\n```", "```\n> ./FRACTRAN hello.frac 3080 0\n72697676794432877982766833\n```", "```\n> ./FRACTRAN hello.frac 3080 0 | python3 hello.py\nHELLO, WORLD!\n```", "```\nd = input()\nwhile (d != \"\"):\n    print(chr(int(d[:2])), end=\"\")\n    d = d[2:]\nprint()\n```", "```\n> ./FRACTRAN polygame.frac 148697579520 0\n4294967296\n```"]