- en: '7. novena: building my own laptop'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It was 2012, and I was unemployed. My previous startup had failed, and I was
    taking a year off to figure out what I should do next. My friend xobs (introduced
    in [Chapter 4](ch04.xhtml#ch04)) and I had a tradition that we maintain to this
    day: every Friday, we sit down for a few beers at lunch and shoot the breeze.
    During one of those “Beer Friday” discussions, we decided to build our own laptop.
    I expressed displeasure with how I’d never been employed to build a product that
    I’d actually want to use every day. As a design engineer, you’re typically driven
    by market requirements, not your own eclectic tastes. We bantered a bit about
    things we’d find useful and realized that, thanks to the gradual slowing of Moore’s
    law, maybe it wasn’t so crazy for us to build an open laptop with some wacky features
    just for hackers. From there, we started a hobby project to build a computer just
    for ourselves, something we’d use every day that would be easy to extend and mod—our
    very own electronic Swiss Army knife. We gave the project the code name Novena,
    the name of a Singaporean metro station and Latin for “nine.”'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0216-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The second-generation Novena design that went up on Crowd Supply*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The finished Novena was a 1.2GHz, Freescale (now NXP) i.MX6 quad-core ARM architecture
    computer closely coupled with a Xilinx FPGA. It was designed for users who wanted
    to modify and extend their hardware: all the documentation and PCBs were and still
    are open and free to download,[*](footnote.xhtml#fn22) and we gave it a variety
    of features that facilitated rapid prototyping.'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOT A LAPTOP FOR THE FAINT OF HEART**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As I talked to more people about Novena, however, I realized that others were
    interested in owning a laptop like that but perhaps didn’t want (or didn’t know
    how) to make their own circuit boards. In response to the overwhelmingly positive
    feedback we received to a blog post on the topic, xobs and I launched a campaign
    on Crowd Supply in 2014, once the design was stable and tested. Over 1,000 people
    pledged their support; I am happy to report that we fulfilled every single campaign
    pledge, most of them within a few months of the promised date. After the campaign’s
    close, we decided it would spread our limited resources too thin to maintain the
    supply chain for the full laptop configuration, but we would sell and support
    the Novena motherboard hardware for at least five years from the launch of the
    campaign.
  prefs: []
  type: TYPE_NORMAL
- en: To be clear, Novena is not a machine for the faint of heart. It’s an open source
    project, which means part of the joy (and frustration) of the device is that it
    is continuously improving. It’s perhaps the only laptop that’s ever shipped with
    a screwdriver. Anyone who bought one of the original designs had to install the
    battery and screw on the LCD bezel of their choice—green or blue. The speakers
    came as a kit so users wouldn’t have to use our speaker box design. If someone
    had access to a 3D printer, they could make and fine-tune their own speaker box.
  prefs: []
  type: TYPE_NORMAL
- en: 'Despite all of those DIY options, I wasn’t looking to break any low-price records
    with Novena. It was designed as a low-volume, handcrafted laptop made with uniquely
    open source components, and the cost matched the design. We offered three tiers:'
  prefs: []
  type: TYPE_NORMAL
- en: • An “all-in-one desktop” option for $1,195 that was ready to use with a keyboard
    and mouse out of the gate, but needed to be plugged in
  prefs: []
  type: TYPE_NORMAL
- en: • A “laptop” option for $1,995 that included a battery controller board, for
    hackers on the go
  prefs: []
  type: TYPE_NORMAL
- en: • An “heirloom laptop” tier for $5,000 that came in a gorgeous, handcrafted
    wood-and-aluminum case
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 6](ch06.xhtml#ch06), I said that as Moore’s law slows down, I predict
    parents passing down computers to their children. The Heirloom Novena is meant
    to be treated that way, though it has the same hardware on the inside as the other
    two options.
  prefs: []
  type: TYPE_NORMAL
- en: But those prices weren’t so different from the prices of high-end consumer laptops.
    The biggest challenge was figuring out how to offer something so custom and complex
    at that price point, in low volumes. We weren’t looking to recover the research
    and development cost in the campaign; that’s a sunk cost, as anyone is free to
    download the source and benefit from our thoroughly vetted design today. Our minimum
    funding goal of $250,000 was a tiny fraction of what’s typically required to recover
    the million-dollar-plus investment behind the development and manufacture of a
    conventional laptop; xobs and I met this challenge with a combination of know-how,
    unique design, and strong relationships with our supply chain.
  prefs: []
  type: TYPE_NORMAL
- en: '**DESIGNING THE EARLY NOVENA**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We optimized the Novena’s design to reduce the amount of expensive tooling required,
    while still preserving our primary goal of it being easy to hack and modify. We
    spent a year and a half poring over three revisions of the PCBA until we were
    confident that the complex design would be functional and producible. We also
    optimized certain tricky components, such as the LCD and the internal display
    port adapter, for reliable sourcing at low volumes. Finally, I spent a few months
    traveling the world, lining up a supply chain that could deliver this design (even
    in low volume) at a price comparable to other premium laptops.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, all the design documentation is open, so with sufficient skill and
    resources, you could build a Novena from scratch yourself. I chose the hardware
    and its subcomponents to make this the most practically open hardware laptop I
    could with state-of-the-art technology. You can download, without NDA, the datasheets
    for all the components, and key peripheral options were chosen such that you can
    build a complete firmware from source with no opaque blobs.
  prefs: []
  type: TYPE_NORMAL
- en: '**Under the Hood**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This board’s dimensions are approximately 121 mm × 150 mm; it’s sized to fit
    comfortably underneath a standard-sized laptop keyboard (though the image is rotated
    compared to the installation orientation). As you can see in the full laptop photos
    earlier in the chapter, the port farm is on the right side of the laptop, not
    the bottom. The board is just under 14 mm thick, a height set by the thickness
    of an Ethernet connector. The base portion of my Lenovo T520 is just under 24
    mm thick, and once a keyboard and plastics are stacked on this board, the base
    of the Novena comes to just about the same thickness.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0220-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The earliest Novena motherboard*'
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s look at some of the motherboard’s features.
  prefs: []
  type: TYPE_NORMAL
- en: PRELIMINARY FEATURES
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The first iteration of the Novena motherboard used a Freescale iMX6 CPU, which
    has an NDA-free datasheet and programming manual. In the lists that follow, items
    marked with a double asterisk (**) require a closed-source firmware blob, but
    the system is bootable and usable without the blob.
  prefs: []
  type: TYPE_NORMAL
- en: 'The CPU footprint we used could support the following quad- and dual-lite versions
    of the iMX6:'
  prefs: []
  type: TYPE_NORMAL
- en: • Quad-core Cortex A9 CPU with NEON FPU @ 1.2 GHz
  prefs: []
  type: TYPE_NORMAL
- en: • Vivante GC2000 OpenGL ES2.0 GPU, 200Mtri/s, 1Gpix/s**
  prefs: []
  type: TYPE_NORMAL
- en: This version of Novena booted from microSD firmware. In terms of other internal
    memory, it had a 64-bit, DDR3-1066 SO-DIMM, which could be upgraded to 4GB, and
    a SATA-II (3Gbps) hard drive.
  prefs: []
  type: TYPE_NORMAL
- en: 'Novena was full of internal ports and sensors from the start, too. These are
    the highlights:'
  prefs: []
  type: TYPE_NORMAL
- en: • A Mini PCI-express (mPCIe) slot, for blob-free Wi-Fi, Bluetooth, mobile data,
    and so on
  prefs: []
  type: TYPE_NORMAL
- en: • A UIM slot, for mPCIe mobile data cards
  prefs: []
  type: TYPE_NORMAL
- en: • A dual-channel LVDS LCD connector with up to QXGA resolution (2,048 × 1,536
    px) at 60 Hz and a USB 2.0 side channel for a display-side camera
  prefs: []
  type: TYPE_NORMAL
- en: • A resistive touchscreen controller (capacitive touch displays, on the other
    hand, typically come with an integrated controller)
  prefs: []
  type: TYPE_NORMAL
- en: • 1.1 W, 8-ohm internal speaker connectors
  prefs: []
  type: TYPE_NORMAL
- en: • Two USB2.0 internal connectors, for a keyboard and mouse or trackpad
  prefs: []
  type: TYPE_NORMAL
- en: • A digital microphone
  prefs: []
  type: TYPE_NORMAL
- en: • A three-axis accelerometer
  prefs: []
  type: TYPE_NORMAL
- en: • A header for an optional AW-NU137 Wi-Fi module**
  prefs: []
  type: TYPE_NORMAL
- en: 'We made the following ports externally accessible:'
  prefs: []
  type: TYPE_NORMAL
- en: • HDMI
  prefs: []
  type: TYPE_NORMAL
- en: • The SD card reader
  prefs: []
  type: TYPE_NORMAL
- en: • The headphone and microphone jacks (compatible with most mobile phone headsets,
    these also supported sensing inline cable buttons)
  prefs: []
  type: TYPE_NORMAL
- en: • Two USB 2.0 ports, supporting high-current (1.5A) device charging
  prefs: []
  type: TYPE_NORMAL
- en: • A 1Gb Ethernet port
  prefs: []
  type: TYPE_NORMAL
- en: 'And, of course, since xobs and I were making the Novena for ourselves, we included
    a bunch of other “fun” features that we knew would be great for hackers:'
  prefs: []
  type: TYPE_NORMAL
- en: • 100Mb Ethernet (dual Ethernet capability allows Novena to be used as an inline
    packet filter or router)
  prefs: []
  type: TYPE_NORMAL
- en: • USB On-the-Go (enables the Novena to spoof or fuzz Ethernet, serial, and other
    connections over USB via a gadget interface to other USB hosts)
  prefs: []
  type: TYPE_NORMAL
- en: • A utility serial EEPROM, for storing crash logs and other bits of handy data
  prefs: []
  type: TYPE_NORMAL
- en: • A Spartan-6 CSG324-packaged FPGA with several interfaces to the CPU, including
    a 2Gbps (peak) RAM-like bus—for bitcoin mining, or whatever else you might want
    to toss in an FPGA
  prefs: []
  type: TYPE_NORMAL
- en: • Eight FPGA-driven 12-bit, 200ksps analog inputs
  prefs: []
  type: TYPE_NORMAL
- en: • Eight FPGA-driven digital I/O pins
  prefs: []
  type: TYPE_NORMAL
- en: • Eight FPGA-driven PWM headers, compatible with hobby ESC and PWM pinouts (enables
    direct interfacing with various RC motor/servo configurations and quad-copter
    controllers)
  prefs: []
  type: TYPE_NORMAL
- en: • Raspberry Pi–compatible expansion header
  prefs: []
  type: TYPE_NORMAL
- en: • Thirteen CPU-driven supplemental digital I/Os
  prefs: []
  type: TYPE_NORMAL
- en: • Three internal UART ports
  prefs: []
  type: TYPE_NORMAL
- en: We tweaked those specs going into production, making the most drastic changes
    around the FPGA expansion connectors. Instead of a cluster of motion-control-focused
    headers, we opted to install a header capable of high data rates, which xobs and
    I used to great effect in future projects involving the Novena.
  prefs: []
  type: TYPE_NORMAL
- en: THE BATTERY BOARD
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To give maximum power management flexibility, I implemented the battery interface
    functions on a daughtercard. I co-opted a cheap and common SATA-style connector
    to route power and control signals between the mainboard and the daughtercard.
    To prevent users from accidentally plugging a hard drive into the battery port,
    I inverted the gender of the battery-SATA connector from the actual mass-storage
    SATA-II connector.
  prefs: []
  type: TYPE_NORMAL
- en: 'The battery card in the first Novena board was meant to work with the battery
    packs used by most RC enthusiasts: LiPo packs ranging from 2S1P to 4S1P (that
    is, two-cell to four-cell). RC packs are great because they’re designed for super-fast
    charging and they’re cheap and easy to buy. For the board-side battery plug, I
    decided to use the Molex connector found on classic disk drives, since they are
    cheap, common, and easy to assemble with simple tools. I couldn’t use a standard
    RC connector because the vast majority of them are designed for inline use, and
    the few that have board mounts were too thick or too weird for this application.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0223-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The preliminary Novena battery board*'
  prefs: []
  type: TYPE_NORMAL
- en: The battery board could charge batteries at rates in excess of 4A; for example,
    charging a three-cell, 45 Wh (4 Ah) battery took about one hour. If typical power
    consumption were around 5 to 6 W per hour, that would be seven or eight hours
    of runtime with a one-hour charge time. Of course, since the whole laptop was
    user-configurable, typical power consumption was really hard to estimate. If a
    user dropped in a monster LCD and a power-hungry magnetic hard drive with loads
    of peripherals, the power consumption would be much higher.
  prefs: []
  type: TYPE_NORMAL
- en: xobs suggested another cute power-related feature that made it into the design.
    He thought it would be neat to embed a retro analog needle meter into the palm
    rest of the laptop to display power consumption in real time. I thought it was
    a great idea, so I designed that into the circuit board. Of course, the analog
    meter is driven by a DAC on the battery microcontroller, so it could be configured
    to perform a multitude of useful (or not so useful) analog readouts, such as remaining
    runtime, battery voltage, temperature, the time (represented as an analog value),
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: After spending a couple of months validating all the features (it was a long
    list of features to grind through), we ported drivers and a Linux distro to the
    board. That was no small task either, but thankfully, I had xobs’s skillful help,
    and we got the job done.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Enclosure**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: From there, I was really looking forward to designing the enclosure. For the
    first revision, I thought about making something out of laser-cut acrylic that
    would be vaguely tablet-like, to avoid having to mess around with a friction clutch
    on the first go at a case. I ended up hand-building our first prototype cases
    from aluminum and leather, to validate the laptop use case for Novena. That design
    was rough; as Cory Doctorow put it on *Boing Boing*, it was “gloriously fuggly.”[*](footnote.xhtml#fn23)
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0225-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*I love that my laptop smells of leather when it runs!*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The second-generation Novena case I showed earlier is sleeker. The first thing
    you probably noticed about the design is that it opens the “wrong” way. This feature
    allows the Novena to be used as a wall-hanging unit when the screen is closed.
    It also solves a major problem I had with the original clamshell prototype: it
    was a real pain to access the hardware for hacking, as it was blocked by the keyboard
    mounting plate.'
  prefs: []
  type: TYPE_NORMAL
- en: In the version we sold on Crowd Supply, the screen automatically pops open with
    the slide of a latch, thanks to an internal gas spring. (Novena isn’t just an
    open laptop—it’s a self-opening laptop!) We intentionally left the internals naked
    in this mode for easy access, but bare internals also make clear that Novena isn’t
    for casual home users.
  prefs: []
  type: TYPE_NORMAL
- en: We included an array of mounting bosses—which we called a *Peek array*—as well,
    to facilitate hackability. Normally, laptops have mounting points only for the
    handful of features designed into their original blueprints. But a hackable laptop
    must accommodate a huge space of possible peripherals. Instead of requiring users
    to drill holes or glue things down in their laptop cases, we provided a regular
    array of threaded inserts. It was a bit like a breadboard, but for rapid mechanical
    prototyping. To help define the array, I consulted with Nadya Peek, a graduate
    student at MIT’s Center for Bits and Atoms and an expert in digital fabrication—hence
    the name *Peek array*.
  prefs: []
  type: TYPE_NORMAL
- en: Another feature of the second-generation design is that the LCD bezel is made
    of a single, simple aluminum sheet. This allows anyone with access to a minimal
    machine shop to modify or craft their own bezels; no custom tooling required.
    My hope with that design was to make adding knobs and connectors or changing the
    LCD relatively easy for Novena hackers. To encourage users to experiment, we shipped
    desktop and laptop Novenas with two LCD bezels so no one had to worry about having
    an unusable machine if they messed one up while experimenting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most laptops have a keyboard and mouse attached to the enclosure, but the Novena
    has a detached keyboard and track-point because that feature was attractive to
    me personally. I’d always wanted a display I could “hang” on the seat in front
    of mine when sitting in an airplane or a bus: it’s a lot easier on the neck, and
    the arrangement actually works *better* if the person in front reclines their
    seat.'
  prefs: []
  type: TYPE_NORMAL
- en: While I was still considering whether to do a clamshell design or some other
    funky design for the exterior, I also thought about trying an enclosure made of
    wood and brass. After all, the whole idea of making my own laptop was to play
    around with some new ideas! As mentioned earlier, we actually did wind up doing
    a limited run of a wooden-cased Novena that we dubbed the *heirloom laptop*.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0227-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The Heirloom Novena laptop*'
  prefs: []
  type: TYPE_NORMAL
- en: '**THE HEIRLOOM LAPTOP’S CUSTOM WOOD COMPOSITE**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When mainline Novena production was finally humming along in April 2015, I spent
    a week in Portland, Oregon, working alongside Kurt Mottweiler (a designer and
    woodworker who specializes in making cameras with wooden enclosures) to hammer
    out all of the final open issues on the Heirloom devices. xobs and I are certainly
    proud of how the Heirloom Novenas turned out!
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0228-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Working with Kurt on the Heirloom laptop*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Growing Novenas**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In a literal sense, the Heirloom Novenas were “grown.” Wooden enclosures meant
    important structural elements came from trees. Making every laptop identical would
    have been easy, but we felt it would be much more apropos of a bespoke product
    to make each laptop unique by picking the finest woods and matching their finish
    and color in a tasteful fashion. As a result, no two Heirloom laptops look the
    same; each is uniquely beautiful.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0228-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Some handpicked wood, waiting to become a Novena case*'
  prefs: []
  type: TYPE_NORMAL
- en: A lot of science and engineering went into the Heirloom laptops, too. For starters,
    Kurt created a unique composite material by layering cork, fiberglass, and wood.
    To help characterize the novel composite, we took some material samples to the
    Center for Bits and Atoms, where Nadya Peek and Will Langford characterized the
    performance of the material. We took sections of the wood composite and performed
    a three-point bend test using an Instron 4411 electromechanical material testing
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0229-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Heirloom composite material loaded into the testing machine*'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Mechanical Engineering Details**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: From the test data, we were able to extract the flexural modulus (also called
    Young’s modulus) and flexural strength of the material. I’m not a mechanical engineer
    by training, so terms like *modulus* and *specific strength* kind of go over my
    head. But Nadya was kind enough to lend me some insight. She pointed me at the
    Ashby chart, which, as with some xkcd comic panels, I could stare at for an hour
    and still not absorb all the information contained within.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0230-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The Ashby chart plots Young’s modulus versus density for many materials. The
    annotated area shows approximately where the Heirloom composite material lands.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The bottom left of the chart shows bendy, light materials like cork, and the
    top right of the chart has rigid, heavy materials, like tungsten (W). For a laptop
    case, we wanted a material with the density of cork but the stiffness of plastic.
    Wood products occupy a space in the chart to the left of plastics, meaning they
    are less dense, but they have a problem: they are weak perpendicular to the grain.
    Depending on the direction of the strain, wood can be as yielding as polyethylene
    (the material used to make plastic shopping bags) or stiffer than polycarbonate
    (the material layered with glass to make bulletproof windows). Composite materials
    are great because they allow you to blend the characteristics of multiple materials
    to hit the desired characteristic. In the Heirloom laptop’s case, Kurt blended
    cork, glass fiber, and wood.'
  prefs: []
  type: TYPE_NORMAL
- en: The measurements of the Heirloom composite show a flexural strength of about
    33 megapascals, and a flexural modulus of about 2.2 to 3.2 gigapascals.[*](footnote.xhtml#fn24)
    The density of the material is 0.49 g/cm³, meaning it’s about half the density
    of ABS plastic, the plastic LEGO bricks are made from. As shown on the Ashby chart,
    plotting these numbers reveals that the Heirloom composite occupies a nice spot
    to the left of plastics and provides a compromise on stiffness based on grain
    direction. And during testing, the material didn’t fail catastrophically.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0231-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Graphs of load versus extension on the Heirloom laptop composite, as plotted
    by the Instron testing machine*'
  prefs: []
  type: TYPE_NORMAL
- en: Even after being bent past its peak load, the composite was still mostly intact
    and providing resistance. This result was a bit surprising. We had expected the
    material to break in two on failure, like natural wood. Furthermore, after we
    reset the test, the material bounced back to its original shape. We bent the composite
    by over 10 mm, but once the load was removed, I could barely tell it went through
    testing. This high fracture toughness and resilience are desirable properties
    for a laptop case.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, watching a machine go to work on the material was fun, but there’s
    nothing quite like holding it yourself. I still remember picking up the material,
    feeling how light it was, giving it a good bend, and being surprised by its rigidity
    and ruggedness.
  prefs: []
  type: TYPE_NORMAL
- en: '**CHANGES TO THE FINISHED PRODUCT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From the moment Novena was successfully crowdfunded, an incredible team of people
    worked to make it a reality. With help from the engineers and product managers
    at our manufacturing partner, AQS, Novena’s case moved from prototype to pilot
    production just four months after the campaign.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0232-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The conference room where we did the T1 plastics review in Dongguan, China*'
  prefs: []
  type: TYPE_NORMAL
- en: Sure, xobs and I did plenty of work on our own before we even started the crowdfunding,
    but it takes many hands to build a product of this complexity. We couldn’t have
    done it without our dedicated and hardworking team at AQS. I’ve said before that
    your factory is your partner, and thanks to a great partner, we were able to get
    this done in a short amount of time.
  prefs: []
  type: TYPE_NORMAL
- en: '**Case Construction and Injection-Molding Problems**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: By the late summer of 2014, the Novena cases we were carrying around were made
    of entirely production-process hardware—no more hand-built prototypes. To get
    there, we’d opened a total of 10 injection-molding tools; for comparison, a product
    like NeTV or chumby had perhaps 3 or 4 injection-molding tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'As I briefly described in [Chapter 1](ch01.xhtml#ch01), injection molding is
    a process where plastic is molded into a net shape. Hot, high-pressure liquid
    plastic is forced into a hardened steel cavity called a *tool*. The steel tool
    is a masterpiece of engineering in itself: it’s a water-cooled block weighing
    about a ton and capable of handling pressures found at the bottom of the Mariana
    Trench, and the internal surfaces are machined to tolerances better than the width
    of a human hair. On top of that, the tool contains a clockwork of moving pieces,
    with dozens of ejector pins, sliders, lifters, and parting surfaces that come
    apart and back together again smoothly over thousands of cycles. It’s amazing
    that tools of such complexity and refinement can be crafted in a couple of months.'
  prefs: []
  type: TYPE_NORMAL
- en: With so many moving parts, it’s no surprise that the tools required several
    iterations of refinement to get absolutely perfect. In tooling jargon, the iterations
    are referred to as T0, T1, T2, and so on. You’re doing pretty well if you can
    go to full production at T2; thankfully, our T1 plastics were 99 percent of the
    way there, meaning we had an easy path to full production. T1 had just a few issues
    relating to flow and knit lines, as well as spots where the plastic warped during
    cooling or bound itself to the tool during ejection, causing deformation. This
    manifested itself as spots where the seams weren’t as tight as we wanted them
    to be in the case, and with just a little bit of tuning, we were production-ready.
  prefs: []
  type: TYPE_NORMAL
- en: Most people have only seen products of finished tooling, so I’ll share what
    a pretty typical T0 (first-attempt) shot looks like, particularly for a large
    and complex tool like the Novena case base part. Test shots like this are typically
    done with scrap resin in light colors that highlight defects. We used gray plastic
    here to make tuning the mold easier, but the final units had black bases.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0234-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Some T0 shots of the base of the Novena case. The regular array of circles
    on the left in the top photo form the basis of the Peek array. To make the array,
    threaded brass inserts were heat-staked into the circular bosses after injection
    molding.*'
  prefs: []
  type: TYPE_NORMAL
- en: There’s a lot going on with this piece of plastic. Let’s zoom in on some of
    the artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0235-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*A visual guide to the deformations in the T0 case base*'
  prefs: []
  type: TYPE_NORMAL
- en: The circles highlight a set of *sink marks*, which happen when the opposite
    side of the plastic has a particularly thin or thick feature. These areas cool
    faster or slower than the bulk of the plastic, causing them to pucker slightly
    and create a sort of shadow. Sink marks are particularly noticeable on mirror-finish
    parts. In this case, the sink marks happened because the plastic underneath the
    nut bosses of the Peek array were much thinner than the surrounding plastic. To
    fix this problem, we thickened that region slightly, reducing the overall internal
    clearance of the case by 0.8 mm. That was possible because fortunately, I’d designed
    the case with a little extra clearance margin.
  prefs: []
  type: TYPE_NORMAL
- en: The straight arrow points to a *knit line*. This is a region where plastic flow
    meets within the tool. As plastic is injected into the cavity, it tends to flow
    from one or more gates, and where the molten plastic meets itself, a hairline
    scar forms. Knit lines are often located at points of symmetry between the gates
    where the plastic is injected. On this tool, there were four gates located underneath
    the spot where the rubber feet go. Gates are considered cosmetically unattractive,
    and thus we placed them strategically to hide their location.
  prefs: []
  type: TYPE_NORMAL
- en: The white feathery artifacts indicated by the curved arrow are *flow marks*.
    These streaks appeared because the plastic cooled a bit too quickly within the
    tool. You can often fix this problem by adjusting the injection pressure, cycle
    length, and temperature. It’s best to use test shots on the molding machine to
    make those tweaks. You can tweak one parameter at a time, shot after shot, until
    you find an optimum cooling speed. This process can sometimes take hundreds of
    shots, creating a small hill of scrap plastic as a by-product.
  prefs: []
  type: TYPE_NORMAL
- en: Most of these gross defects were fixed by T1, and at that point, the plastic
    looked much closer to production-grade. We were also able to start using black-colored
    plastic, which tends to hide defects.
  prefs: []
  type: TYPE_NORMAL
- en: There were still a few issues around fit and finish, of course. But despite
    them, the case felt much more solid than the prototypes, and the gas piston mechanism
    was finally consistent and really smooth.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0236-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The T1 case base, in initial testing after the live hardware was transferred
    into the plastics*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes to the Front Bezel**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The front bezel of Novena’s case (not to be confused with the aluminum LCD bezel)
    went through some changes after the campaign. When we closed funding, it had two
    outward-facing USB ports and one switch. Novena shipped with two switches, one
    outward-facing USB port, and one inward-facing USB port.
  prefs: []
  type: TYPE_NORMAL
- en: 'One switch is for power: it goes directly to the power board and can be used
    to turn the system on and off even when the main board is fully powered down.
    The other switch is wired to a user keypress to facilitate Bluetooth association
    for keyboards that are being stupid. Some keyboards can take up to a half-minute
    to cycle through *something* (presumably, it’s security-related) before they connect.
    There are hacks for bypassing that, but you’d have to run a script on the host.
    Our idea was that by pressing this button, users could trigger a convenience script
    to get past the utter folly of Bluetooth. This switch also doubles as a wake-up
    button for when the system is suspended.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As for the USB ports, the design still had four in total, but the configuration
    became as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: • Two higher-current-capable ports on the right
  prefs: []
  type: TYPE_NORMAL
- en: • One standard-current-capable port on the front
  prefs: []
  type: TYPE_NORMAL
- en: • One standard-current-capable port facing toward the Peek array
  prefs: []
  type: TYPE_NORMAL
- en: In other words, we faced one USB port toward the inside of the machine. Since
    half the fun of Novena is modding the hardware, I figured a USB port on the inside
    would be at least as useful as one on the outside.
  prefs: []
  type: TYPE_NORMAL
- en: For users who wouldn’t do hardware mods, an inside USB port would also be a
    fine place to plug small dongles that generally stay attached, like the radio
    transceiver for a keyboard. It’s a little inconvenient to initially plug in the
    dongle, but keeping the radio transceiver dongle facing inside helps protect it
    from damage when you throw your laptop into your travel bag.
  prefs: []
  type: TYPE_NORMAL
- en: '**DIY Speakers**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We toyed with several speaker options for Novena. A core idea behind the design
    was to encourage every user to choose their own speaker. Some people really listen
    to music on their laptop when they travel, but others simply rely upon the speaker
    for notification tones and would prefer to use headphones for media capabilities.
    Physics dictates that high-quality sound requires a certain amount of space and
    mass. We wanted users with a more relaxed fidelity requirement to be able to reclaim
    the space and weight that nicer speakers would require.
  prefs: []
  type: TYPE_NORMAL
- en: Kurt Mottweiler selected a nice but very compact off-the-shelf speaker, the
    PUI ASE06008MR-LW150-R, for the Heirloom. When we found that the same speaker
    fit well into the standard Novena’s Peek array and had acceptable fidelity, particularly
    for its size, we adopted it as the standard offering for audio. But we shipped
    it with a mounting kit for easy removal, so users who might need to reclaim the
    space (or who wanted to put in larger speakers) could do so with ease.
  prefs: []
  type: TYPE_NORMAL
- en: '**The PVT2 Mainboard**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Novena mainboard went through a minor revision prior to mass production.
    The fourth and final revision of the motherboard was known as the “PVT2” version.
    The majority of the changes focused on replacing or updating components that were
    at risk of reaching end-of-life. The two most significant additions from a design
    standpoint were an internal flexible printed circuit (FPC) header to connect to
    the front bezel cluster, and a dedicated hardware real-time clock (RTC) module.
  prefs: []
  type: TYPE_NORMAL
- en: We added the internal FPC header to improve signal routing from the mainboard
    to the front bezel cluster. We had to run two USB ports plus a smattering of GPIOs
    and power to the front bezel, and the original connection scheme required multiple
    cables. The updated design condensed that into a single FPC to simplify the design
    and improve reliability.
  prefs: []
  type: TYPE_NORMAL
- en: We included a dedicated hardware RTC module because the i.MX6’s built-in RTC
    didn’t perform well. The CPU simply had a higher leakage on the RTC than reported
    in the datasheet, and the lifetime of the RTC when the system was turned off was
    measured in, at best, minutes. We decided that there was too much risk in continuing
    to develop with the on-board RTC and opted for an external, dedicated RTC module
    that we knew worked. To increase compatibility with other i.MX6 platforms, we
    picked the same module used by the Solid-Run Hummingboard, the NXP PCF8523T/1.
  prefs: []
  type: TYPE_NORMAL
- en: It’s also important to note that we completely overhauled the FPGA expansion
    header on our second revision of the motherboard. The version of the motherboard
    shown at the beginning of this chapter contained a cluster of headers optimized
    for motion control applications. We decided that our motherboard was too large
    for anyone to put it inside a quad copter, and perhaps the FPGA would see more
    use as a high-speed data acquisition and processing device. To enable this functionality,
    we gave the FPGA a dedicated 256MB of DDR3 memory and broke out high-speed differential
    signals to a connector capable of passing signals at rates exceeding a gigabit
    per second. Users could still use the FPGA for motion control applications, but
    they’d need to plug in a simple breakout board (like the GPBB I discuss next)
    to route our signals to the connector formats commonly used by motion control
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0240-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The updated Novena motherboard*'
  prefs: []
  type: TYPE_NORMAL
- en: '**A Breakout Board for Beginners**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the rewards every backer received as thanks for supporting our campaign
    was a breakout board that we referred to as the *GPBB*, or the *General-Purpose
    Breakout Board*. Redesigning our FPGA expansion header on Novena to target high-speed
    applications also made getting started with the device much more difficult for
    entry-level hackers. Due to the constraints of physics, high-speed connectors
    tend to have very dense pin arrangements that are unfriendly to beginners. We
    designed the GPBB to help entry-level users work with the FPGA. The GPBB converts
    the dense, high-speed signal header on the FPGA into a beginner-friendly 0.1-inch-pitch,
    40-pin header and includes a few LEDs and analog data converters to boot.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0241-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The final production GPBB*'
  prefs: []
  type: TYPE_NORMAL
- en: One growing challenge for beginners is the fact that Moore’s law keeps on pushing
    down the allowable voltage range of digital I/Os. Newer generations of transistors
    run at lower voltages, which make them incompatible with the venerable +5 V standards
    most entry-level projects use. For instance, our FPGA could only handle signals
    up to +3.3 V. As a result, we built voltage translators into the GPBB that could
    safely handle +5 V and bring them down to the +3.3 V levels accepted by the FPGA.
  prefs: []
  type: TYPE_NORMAL
- en: The final version of the GPBB included a tweak enabling users to adjust the
    I/O voltage, instead of fixing it at +5 V. We provided a software setting to allow
    users to choose whether the GPBB’s external I/Os default to 5 V or 3.3 V, and
    we designed the board so that users could adjust the lower voltage to 2.5 V or
    1.8 V by changing a single resistor (R12). I labeled that resistor “I/O VOLTAGE
    SET” and made it a 1206 part, so soldering novices could make the change themselves.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Desktop Novena’s Power Pass-Through Board**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The “all-in-one desktop” tier originally included just the desktop case, the
    Novena mainboard, and the front panel breakout. But that configuration made power
    management awkward, as I designed the overall power management system for the
    case assuming there would be a helper microcontroller managing a master cutoff
    switch.
  prefs: []
  type: TYPE_NORMAL
- en: Complexity is the devil, and getting the software going for even a single configuration
    was hard enough on its own. Ultimately, we found it cheaper to introduce a new
    piece of hardware to the power management system for the desktop, rather than
    deal with multiple code configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, desktop systems shipped with a power pass-through board. It was a
    simple PCB assembly containing just the STM32 controller and power switch of the
    full battery board. This allowed us to use a consistent gross power management
    architecture across both the desktop and the laptop systems.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0243-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*The desktop’s pass-through board*'
  prefs: []
  type: TYPE_NORMAL
- en: This approach was like swatting a fly with a sledgehammer— but the sledgehammer
    cost as much as the flyswatter. Plus it’s inconvenient to carry both a flyswatter
    and a sledgehammer around. So, yes, we used a 32-bit ARM CPU to read the state
    of a pushbutton and flip a GPIO, and yes, a full multithreaded real-time operating
    system (ChibiOS) ran underneath it all.
  prefs: []
  type: TYPE_NORMAL
- en: It did feel a little silly, though. That’s why we broke out some of the unused
    GPIO pins, making Novena even more hackable. Hopefully, some clever user will
    find an application for all that untapped power!
  prefs: []
  type: TYPE_NORMAL
- en: '**Custom Battery Pack Problems**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The battery pack for Novena was definitely a wildcard in the project stack.
    Building Novena was the first time xobs or I had made a system with such a high-capacity
    battery, and working through all the shipping regulations to get them delivered
    to customers was a challenge.
  prefs: []
  type: TYPE_NORMAL
- en: Some countries have particularly strict regulations around importing lithium
    batteries. In the worst case, we had to send some customers a laptop with no battery
    inside, and we shipped an off-the-shelf battery pack from a vendor that specializes
    in RC battery packs (like Hobby King) separately to those customers at our own
    cost. They got the same battery featured in the crowdfunding campaign, but they
    had to plug it in themselves. That was our safest fallback solution, since Hobby
    King ships thousands of battery packs a day all around the world.
  prefs: []
  type: TYPE_NORMAL
- en: Shipping woes didn’t stop us from developing a custom battery pack, though.
    Maintaining a standing stock of battery packs is difficult because batteries need
    to be periodically conditioned, so only campaign backers got that battery pack—provided
    their country of residence allowed its import. We couldn’t know for sure until
    we tried, but we did get UN38.3 certification for the custom battery pack. In
    theory, that certification would allow us to ship the batteries by air freight,
    but regulations around battery shipment are always in flux. It seems countries
    and carriers keep inventing new rules, particularly with all the paranoia about
    the potential use of lithium batteries as incendiary devices, and we didn’t have
    the resources to keep up with the zeitgeist.
  prefs: []
  type: TYPE_NORMAL
- en: The custom pack’s capacity was rated at 5,000 mAh, which is about twice the
    capacity of the pack we featured in the crowdfunding campaign. (That one had 3,000
    mAh printed on the outside but delivered about 2,500 mAh in practice.) In real-life
    testing, the custom pack provided about six or seven hours of runtime with minimal
    power management enabled. Also, since I got to specify the battery, I knew it
    had the correct protection circuitry built into it and the provenance of its cells,
    so I was confident in its long-term performance and stability.
  prefs: []
  type: TYPE_NORMAL
- en: '**Choosing a Hard Drive**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The crowdfunding campaign referenced providing 240GiB Intel 530 (or equivalent)
    and 480GiB Intel 720 drives for the laptop and heirloom models, respectively.
    We left the spec slightly ambiguous because the SSD market moves quickly. We knew
    the best drive when we drew up the spec would probably be different from the best
    drive we could get when we actually did the purchasing.
  prefs: []
  type: TYPE_NORMAL
- en: After doing some research, we felt the best equivalent drives at purchase time
    were the 240GiB Samsung 840 EVO (for the laptop model) and the 512GiB Samsung
    850 Pro (for the Heirloom). xobs and I personally used the 840 EVO in our own
    units for several months, and it performed admirably.
  prefs: []
  type: TYPE_NORMAL
- en: An important metric for us was how well the drives held up under unexpected
    power outages. Outages happen fairly often, for example, when you’re doing development
    work on a power management subsystem. Some hard drives failed quite reliably (how’s
    that for an oxymoron?) after a few unexpected power-down cycles.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the Heirloom, we used Samsung’s 850 PRO series. This drive came with a
    serious warranty fit for an heirloom: 10 years. Samsung could offer such a high
    claim of reliability because the drive used a technology the company calls V-NAND,
    which I consider the first bona fide production-grade 3D transistor technology.'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Intel* claims *it makes 3D transistors, but that’s just marketing hype. Yes,
    the gate region has a raised surface topology, but you still only get a single
    layer of devices. From a design standpoint, you’re still working with a 2D graph
    of devices. Intel should have stuck with what I consider the “original” (and more
    descriptive/less misleading) name, FinFET, because by calling these 3D transistors,
    I don’t know what it will call* actual *3D arrays of transistors, if it ever gets
    around to making them.*'
  prefs: []
  type: TYPE_NORMAL
- en: Chipworks, a patent support company, did an excellent initial analysis of V-NAND,[*](footnote.xhtml#fn25)
    showing that the technology isn’t about stacking just a couple of transistors.
    A V-NAND stack is a 38-layer active transistor sandwich, all in a single spot.
    This is process technology badassery at its finest. This is Neo decoding the Matrix.
    This is Mal shooting first. It’s a game changer, and it’s not vaporware. Heirloom
    backers received laptops with over 4 trillion of those transistors packed inside.
  prefs: []
  type: TYPE_NORMAL
- en: '**Finalizing Firmware**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: From the software side, the next step at this point was finalizing the kernel,
    bootloader, and distro selection, as well as deciding what to show when Novena
    booted for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: Marek Vasut got Novena supported in mainline U-Boot (Universal Bootloader),
    one of the most popular open source bootloaders. (Marek is one of U-Boot’s maintainers.)
    The process involved a surprising number of patches, in part because few ARM boards
    support as much RAM as Novena. With those patches in place, Novena had full U-Boot
    support, including USB and video.
  prefs: []
  type: TYPE_NORMAL
- en: We decided to make Debian the factory-default distribution for Novena, and we
    used the stock Linux kernel with those patches added. Any patches that we thought
    might be useful to other projects were submitted upstream and will continue to
    be submitted. *Upstreaming* just means that a package that is part of a derivative
    operating system becomes part of the distro it’s derived from.
  prefs: []
  type: TYPE_NORMAL
- en: We did keep a few local patches, ranging from specialized hacks to experimental
    features, features that weren’t ready to push upstream, or features that relied
    on features that weren’t upstream at the time. For example, the display system
    on a laptop is very different from what you’d usually see on an ARM device. In
    most ARM devices, the screen is fixed during boot and it isn’t possible to hot-swap
    displays at runtime. Like a typical laptop, Novena supports two different displays
    at once and allows you to plug in an HDMI monitor without requiring a reboot.
    Support for this feature required a local-only patch to the kernel, as it relied
    on features that weren’t yet upstreamed for the ARM platform at that time.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we just had to decide what to show when Novena powered up. In Linux,
    it’s not at all common to have a first-boot setup screen where you create your
    user, set the time, and configure the network. That’s common in Windows and OS
    X, which come preinstalled, but under Linux, the installer generally takes care
    of that.
  prefs: []
  type: TYPE_NORMAL
- en: We were torn between creating a good desktop-style experience and making a practical
    embedded developer’s experience. A desktop-style experience would ship as a blank
    slate and prompt the user to create an account via a locally attached keyboard
    and monitor. But embedded developers may never plug in a monitor, and instead
    prefer to connect via console or SSH; for them, a default username, password,
    and hostname would have been more helpful. Either way, we wanted to create just
    a single firmware common across all platforms and avoid special-casing releases
    to a particular target.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, we decided to create a desktop-style experience, with escapes for
    power users to bypass the formalities of user enrollment. This gave us the best
    of both worlds. It improved the accessibility of Novena to entry-level users,
    yet power users could still cut to the chase and get down to work.
  prefs: []
  type: TYPE_NORMAL
- en: '**BUILDING A COMMUNITY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From the start, xobs and I built Novena to empower hackers, so I was pleased
    that even before shipping, Novena had active alpha developers. Jon Nettleton and
    Russell King worked on graphics, Marek Vasut from U-Boot lent a hand, and a couple
    of other alpha user groups actually made hardware for the system.
  prefs: []
  type: TYPE_NORMAL
- en: MyriadRF, an open source hardware and software community focused on wireless
    technology, created a software-defined radio board for Novena. We bought and integrated
    those boards with the first desktop and laptop units we shipped.
  prefs: []
  type: TYPE_NORMAL
- en: The CrypTech group also started applying Novena to its projects before the laptop
    shipped. The CrypTech project developed a hardware security module, with a BSD
    and CC BY-SA 3.0 licensed reference design. The group wanted to create a widely
    reviewed, designed-for-crypto device that anyone could compose for their application
    and easily build with their own trusted supply chain. CrypTech used Novena to
    prototype elements of its design.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0248-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*A prototype CrypTech expansion board, plugged into the Novena motherboard*'
  prefs: []
  type: TYPE_NORMAL
- en: The expansion board shown here is a prototype noise source based on avalanche
    noise from a transistor in the middle of the board. CrypTech uses that noise to
    generate entropy in Novena’s FPGA. The entropy is then combined with entropy generated
    by ring oscillators in the FPGA and mixed using, say, SHA-512 to generate seeds.
    The seeds are then used to initialize the ChaCha stream cipher, ultimately resulting
    in a stream of cryptographically sound random values. The result is a high-performance,
    state-of-the art, random-number-generator coprocessor.
  prefs: []
  type: TYPE_NORMAL
- en: '**CLOSING THOUGHTS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a final note, if there’s one thing xobs and I have learned in the hardware
    business, it’s that you can’t count your chickens before they hatch. Making good
    progress to a certain point didn’t mean we’d have an easy path to finished units.
    Even though we had fully functional prototypes at the close of fundraising, it
    still took months of intense effort to deliver hundreds of units to end users.
  prefs: []
  type: TYPE_NORMAL
- en: Now that Novena has finished shipping, we’re continuing to support our enthusiastic
    yet very patient user base. It’s a lot of work, which falls primarily on xobs’s
    shoulders, but we’ve been answering questions from users, pushing patches, and
    keeping the Novena kernel up to date.
  prefs: []
  type: TYPE_NORMAL
- en: We do this even though we garner no new revenue from Novena sales. Upon reviewing
    our post-campaign sales data, it was fairly clear there was no viable path forward
    to run a hardware business selling Novena; we’d sell on average a couple of units
    per month. Although we cleared the minimum-order requirements of our vendors through
    the initial crowdfunding campaign, it would be very difficult to engage any of
    our suppliers at volumes less than a couple hundred units. Selling a couple units
    per month at that minimum buy would leave us saddled with inventory debt for about
    a hundred months. We’d be in debt to our suppliers for several years. Being unable
    to repay your suppliers for several years is also known as bankruptcy.
  prefs: []
  type: TYPE_NORMAL
- en: We are, of course, keeping our original promise to support the Novena motherboard
    for at least five years from the initial funding campaign. We’ve set aside a hefty
    chunk of cash to ensure a steady supply of the mainboards. Our original crowd
    funding and now online sales partner, Crowd Supply, has taken over the remaining
    inventory of cases and accessories. Thanks to our open hardware model, Crowd Supply
    has the option to manufacture and sell accessories for Novena, should end user
    demand materialize.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, I’m very happy to see the tender green shoots of new projects aiming
    to offer better open source laptop solutions to end users. Rather than compete
    with them, I think it’s most appropriate for Novena to give way and enable enthusiastic
    new developers to find opportunity and fortune selling their solutions. After
    all, we started on this adventure mostly to see if it could be done. We wanted
    to build a cool tool, customized for our everyday use case; we didn’t want to
    start a business selling laptops with a sustainable mass-market appeal. If the
    ultimate impact of the Novena project is raising the bar for open hardware, and
    perhaps even encouraging a new generation of laptop-themed projects, that would
    be a huge reward in and of itself.
  prefs: []
  type: TYPE_NORMAL
