["```\nint demo_unreachable(volatile int a) {\n\n    volatile int b = a ^ a;\n\n ➊ if (b) {\n\n        printf(\"This is unreachable\\n\");\n\n        a += 1;\n\n    }\n\n ➋ if (a - a > 0) {\n\n        printf(\"This should be unreachable too\\n\");\n\n        a += 1;\n\n    } else {\n\n        printf(\"We should always see this\\n\");\n\n        a += 2;\n\n    }\n\n    printf(\"End of demo_unreachable()\\n\");\n\n    return a;\n\n}\n```", "```\n/* WARNING: Removing unreachable block (ram,0x00100777) */\n\n/* WARNING: Removing unreachable block (ram,0x0010079a) */\n\nulong demo_unreachable(int param_1)\n\n{\n\n  puts(\"We should always see this\");\n\n  puts(\"End of demo_unreachable()\");\n\n  return (ulong)(param_1 + 2);\n\n}\n```", "```\nint demo_simppred(int a) {\n\n    if (a > 0) {\n\n          printf(\"A is > 0\\n\");\n\n    }\n\n    if (a > 0) {\n\n          printf(\"Yes, A is definitely > 0!\\n\");\n\n    }\n\n    if (a > 2) {\n\n          printf(\"A > 2\\n\");\n\n    }\n\n    return a * 10;\n\n}\n```", "```\nulong demo_simppred(int param_1)\n\n{\n\n  if (0 < param_1) {\n\n    puts(\"A is > 0\");\n\n    puts(\"Yes, A is definitely > 0!\");\n\n  }\n\n  if (2 < param_1) {\n\n    puts(\"A > 2\");\n\n  }\n\n  return (ulong)(uint)(param_1 * 10);\n\n}\n```", "```\nprintf(\"a=%d, b=%d, c=%d, d=%d, e=%d, f=%d, g=%d\\n\", (ulong)param_1,\n\n      (ulong)param_2,(ulong)uVar1,(ulong)uVar2,(ulong)(uVar1 + param_1),\n\n      (ulong)(uVar2 * 100),(ulong)uVar4);\n\nuStack44 = *(undefined4 *)**(undefined4 **)(iStack24 + 0x10);\n```", "```\nint do_math(int a, int b) {\n\n    int c, d, e, f, g;\n\n    srand(time(0));\n\n    c = rand();\n\n    printf(\"c=%d\\n\", c);\n\n    d = a + b + c;\n\n    printf(\"d=%d\\n\", d);\n\n    e = a + c;\n\n    printf(\"e=%d\\n\", e);\n\n    f = d * 100;\n\n    printf(\"f=%d\\n\", f);\n\n    g = rand() - e;\n\n    printf(\"g=%d\\n\", g);\n\n    printf(\"a=%d, b=%d, c=%d, d=%d, e=%d, f=%d, g=%d\\n\", a, b, c, d, e, f, g);\n\n    return g;\n\n}\n```", "```\nulong do_math(uint param_1,uint param_2)\n\n{\n\n    uint uVar1;\n\n    uint uVar2;\n\n    int iVar3;\n\n    uint uVar4;\n\n    time_t tVar5;\n\n    tVar5 = time((time_t *)0x0);\n\n    srand((uint)tVar5);\n\n    uVar1 = rand();\n\n    printf(\"c=%d\\n\");\n\n    uVar2 = uVar1 + param_1 + param_2;\n\n  ➊ printf(\"d=%d\\n\");\n\n    printf(\"e=%d\\n\");\n\n    printf(\"f=%d\\n\");\n\n    iVar3 = rand();\n\n    uVar4 = iVar3 - (uVar1 + param_1);\n\n    printf(\"g=%d\\n\");\n\n    printf(\"a=%d, b=%d, c=%d, d=%d, e=%d, f=%d, g=%d\\n\", (ulong)param_1,\n\n          (ulong)param_2,(ulong)uVar1,(ulong)uVar2,(ulong)(uVar1 + param_1),\n\n          (ulong)(uVar2 * 100),(ulong)uVar4);\n\n    return (ulong)uVar4;\n\n  }\n```", "```\n ulong do_math(uint param_1,uint param_2)\n\n {\n\n➊ uint uVar1;\n\n   uint uVar2;\n\n   uint uVar3;\n\n   int iVar4;\n\n   uint uVar5;\n\n   time_t tVar6;\n\n   tVar6 = time((time_t *)0x0);\n\n   srand((uint)tVar6);\n\n   uVar1 = rand();\n\n   printf(\"c=%d\\n\",uVar1);\n\n   uVar2 = uVar1 + param_1 + param_2;\n\n   printf(\"d=%d\\n\",uVar2);\n\n➋ uVar3 = uVar1 + param_1;\n\n   printf(\"e=%d\\n\",uVar3);\n\n   printf(\"f=%d\\n\",uVar2 * 100);\n\n   iVar4 = rand();\n\n➌ uVar5 = iVar4 - uVar3;\n\n   printf(\"g=%d\\n\",uVar5);\n\n➍ printf(\"a=%d, b=%d, c=%d, d=%d, e=%d, f=%d, g=%d\\n\", (ulong)param_1,\n\n (ulong)param_2,(ulong)uVar1,(ulong)uVar2,(ulong)(uVar1 + param_1),\n\n         (ulong)(uVar2 * 100),(ulong)uVar4);\n\n   return (ulong)uVar4;\n\n }\n```", "```\nprintf(\"a=%d, b=%d, c=%d, d=%d, e=%d, f=%d, g=%d\\n\", (ulong)a,\n\n      (ulong)(uint)b, (ulong)(uint)c, (ulong)(uint)d, (ulong)(uint)e,\n\n      (ulong)(uint)(d * 100),(ulong)(uint)g);\n```", "```\nint do_math(int a, int b)\n\n{\n\n  int c;\n\n  int d;\n\n  int e;\n\n  int g;\n\n  time_t tVar1;\n\n  tVar1 = time((time_t *)0x0);\n\n  srand((uint)tVar1);\n\n  c = rand();\n\n  printf(\"c=%d\\n\",c);\n\n  d = c + a + b;\n\n  printf(\"d=%d\\n\",d);\n\n  e = c + a;\n\n  printf(\"e=%d\\n\",e);\n\n  printf(\"f=%d\\n\",d * 100);\n\n  g = rand();\n\n  g = g - e;\n\n  printf(\"g=%d\\n\",g);\n\n printf(\"a=%d, b=%d, c=%d, d=%d, e=%d, f=%d, g=%d\\n\",a,b,c,d,e,d * 100➊,g);\n\n  return g;\n\n}\n```", "```\n00100839                 CALL          noReturnA\n\n0010083e                 ??            FFh\n```", "```\n  noReturnA(1);\n\n  /* WARNING: Bad instruction - Truncating control flow here */\n\n  halt_baddata();\n```", "```\n  /* WARNING: Subroutine does not return */\n\n  noReturnA(1);\n```", "```\n➊ struct s1 {\n\n      int a;\n\n      int b;\n\n      int c;\n\n   };\n\n➋ typedef struct s2 {\n\n       int x;\n\n       char y;\n\n       float z;\n\n   } s2_type;\n\n   struct s1 GLOBAL_S1;\n\n   s2_type GLOBAL_S2;\n```", "```\nvoid display_s1(struct s1* s) {\n\n    printf(\"The fields in s1 = %d, %d, and %d\\n\", s->a, s->b, s->c);\n\n}\n\nvoid update_s2(s2_type* s, int v) {\n\n    s->x = v;\n\n    s->y = (char)('A' + v);\n\n    s->z = v * 2.0;\n\n}\n\nvoid do_struct_demo() {\n\n    s2_type local_s2;\n\n    struct s1 local_s1;\n\n    printf(\"Enter six ints: \");\n\n    scanf(\"%d %d %d %d %d %d\", (int *)&local_s1, &local_s1.b, &local_s1.c,\n\n          &GLOBAL_S1.a, &GLOBAL_S1.b, &GLOBAL_S1.c);\n\n    printf(\"You entered: %d and %d\\n\", local_s1.a, GLOBAL_S1.a);\n\n    display_s1(&local_s1);\n\n    display_s1(&GLOBAL_S1);\n\n    update_s2(&local_s2, local_s1.a);\n\n}\n```", "```\nvoid do_struct_demo(void)\n\n{\n\n   undefined8 uVar1;\n\n   uint local_20;\n\n   undefined local_1c [4];\n\n   undefined local_18 [4];\n\n   undefined local_14 [12];\n\n   uVar1 = 0x100735;\n\n   printf(\"Enter six ints: \");\n\n   __isoc99_scanf(\"%d %d %d %d %d %d\", &local_20, local_1c, local_18,\n\n                  GLOBAL_S1,0x30101c,0x301020,uVar1);\n\n   printf(\"You entered: %d and %d\\n\",(ulong)local_20,(ulong)GLOBAL_S1._0_4_);\n\n➊ display_s1(&local_20);\n\n➋ display_s1(GLOBAL_S1);\n\n   update_s2(local_14,(ulong)local_20,(ulong)local_20);\n\n   return;\n\n}\n```", "```\nvoid display_s1(uint *param_1)\n\n{\n\n  printf(\"The fields in s1 = %d, %d, and %d\\n\", (ulong)*param_1,\n\n        (ulong)param_1[1],(ulong)param_1[2]);\n\n  return;\n\n}\n```", "```\nvoid display_s1(astruct *param_1)\n\n{\n\n  printf(\"The fields in s1 = %d, %d, and %d\\n\",(ulong)param_1->field_0x0,\n\n        (ulong)param_1->field_0x4,(ulong)param_1->field_0x8);\n\n  return;\n\n}\n```", "```\n void do_struct_demo(void)\n\n {\n\n   undefined8 uVar1;\n\n➊ astruct local_20;\n\n   undefined local_14 [12];\n\n   uVar1 = 0x100735;\n\n   printf(\"Enter six ints: \");\n\n   __isoc99_scanf(\"%d %d %d %d %d %d\", &local_20, &local_20.field_0x4➋,\n\n             ➌ &local_20.field_0x8, &GLOBAL_S1, 0x30101c, 0x301020, uVar1);\n\n   printf(\"You entered: %d and  %d\\n\", (ulong)local_20.field_0x0,\n\n      ➍ (ulong)GLOBAL_S1.field_0x0);\n\n   display_s1(&local_20);\n\n   display_s1(&GLOBAL_S1);\n\n   update_s2(local_14,(ulong)local_20.field_0x0,(ulong)local_20.field_0x0);\n\n   return;\n\n }\n```", "```\nvoid update_s2(int *param_1,int param_2)\n\n{\n\n  *param_1 = param_2;\n\n  *(char *)(param_1 + 1) = (char)param_2 + 'A';\n\n  *(float *)(param_1 + 2) = (float)param_2 + (float)param_2;\n\n  return;\n\n}\n```", "```\nvoid update_s2(astruct_1 *param_1,int param_2)\n\n{\n\n  param_1->field_0x0 = param_2;\n\n  param_1->field_0x4 = (char)param_2 + 'A';\n\n  param_1->field_0x8 = (float)param_2 + (float)param_2;\n\n  return;\n\n}\n```", "```\nvoid update_s2(astruct_1 *param_1,int param_2)\n\n{\n\n  param_1->x = param_2;\n\n  param_1->y = (char)param_2 + 'A';\n\n  param_1->z = (float)param_2 + (float)param_2;\n\n  return;\n\n}\n```"]