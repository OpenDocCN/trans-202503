["```\nexport default async function ServerComponent(props: WeatherProps): Promise<JSX.Element> {\n\n    return (\n      <h1>The weather is {props.weather}</h1>\n    );\n} \n```", "```\n\"use client\";\n\nimport React, {useState, useEffect} from \"react\";\n\nexport default function ClientComponent (props: WeatherProps): JSX.Element {\n\n    const [count, setCount] = useState(0);\n    useEffect(() => {setCount(1);}, []);\n\n    return (\n        <h1\n          onClick={() => setCount(count + 1)} >\n          The weather is {props.weather},\n          and the counter shows {count}\n        </h1>\n    );\n} \n```", "```\nimport {cache} from 'react';\n\nexport const getUserFromGraphQL = cache(**async** (id:string) => {\n    **return await fetch**(\"/graphql,\" {method: \"POST\", body: \"query\":\" \"});\n}); \n```", "```\nconst userPromiseOne = getUserFromGraphQL (\"0001\");\nconst userPromiseTwo = getUserFromGraphQL (\"0002\");\n\nconst [userDataOne, userDataTwo] = await Promise.all([userPromiseOne, userPromiseTwo]); \n```", "```\nexport default async function ServerComponentUserList(): Promise<JSX.Element> {\n    const url = \"https://www.usemodernfullstack.dev/api/v1/users\";\n    let data: responseItemType[] | [] = [];\n    let names: responseItemType[] | [];\n    try {\n **const response = await fetch(url, {cache: \"force-cache\"});**\n        data = (await response.json()) as responseItemType[];\n } catch (err) {\n        throw new Error(\"Failed to fetch data\");\n    }\n    names = data.map((item) => {\n        return {id: item.id, name: item.name};\n    });\n\n    return (\n        <ul>\n            {names.map((item) => (\n                <li key=\"{item.id}\">{item.name}</li>\n            ))}\n        </ul>\n    );\n} \n```", "```\n const response = await fetch(url, {**next: {revalidate: 20}**});\n```", "```\nexport default async function ServerComponentUserList(): Promise<JSX.Element> {\n    const url = \"https://www.usemodernfullstack.dev/api/v1/users\";\n    let data: responseItemType[] | [] = [];\n    let names: responseItemType[] | [];\n try {\n **const response = await fetch(url, {cache: \"no-cache\"});**\n        data = (await response.json()) as responseItemType[];\n    } catch (err) {\n        throw new Error(\"Failed to fetch data\");\n    }\n    names = data.map((item) => {\n        return {id: item.id, name: item.name};\n    });\n\n    return (\n        <ul>\n            {names.map((item) => (\n                <li key=\"{item.id}\">{item.name}</li>\n            ))}\n        </ul>\n    );\n} \n```", "```\nhtml,\nbody {\n    background-color: rgb(230, 230, 230);\n    font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,\n        Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n    margin: 0;\n    padding: 0;\n}\n\na {\n    color: inherit;\n    text-decoration: none;\n}\n\n* {\n    box-sizing: border-box;\n}\n\nnav {\n    align-items: center;\n    background-color: #fff;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.25);\n    display: flex;\n    height: 3rem;\n    justify-content: space-evenly;\n    padding: 0 25%;\n}\n\nmain {\n    display: flex;\n    justify-content: center;\n}\n\nmain .content {\n    height: 300px;\n    padding-top: 1.5rem;\n    width: 400px;\n}\n\nmain .content li {\n    height: 1.25rem;\n    margin: 0.25rem;\n}\n\nmain .loading {\n    animation: 1s loading linear infinite;\n    background: #ddd linear-gradient(110deg, #eeeeee 0%, #f5f5f5 15%, #eeeeee 30%);\n    background-size: 200% 100%;\n    min-height: 1.25rem;\n    width: 90%;\n}\n\n@keyframes loading {\n    to {\n        background-position-x: -200%;\n    }\n}\nmain .error {\n    background: #ff5656;\n    color: #fff;\n}\n\nsection {\n    background: #fff;\n    border: 1px dashed #888;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.25);\n    margin: 2rem;\n    padding: 0.5rem;\n    position: relative;\n}\n\nsection .flag {\n    background: #888;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.25);\n    color: #fff;\n    font-family: monospace;\n    left: 0;\n    padding: 0.25rem;\n    position: absolute;\n    top: 0;\n    white-space: nowrap;\n} \n```", "```\ninterface LayoutProps {\n    children: React.ReactNode;\n} \n```", "```\nimport \"./globals.css\";\n\nexport const metadata = {\n    title: \"Appendix C\",\n    description: \"The Example Code\",\n};\n\nexport default function RootLayout(props: LayoutProps): JSX.Element {\n    return (\n        <html lang=\"en\">\n            <body>\n                <section>\n                    <span className=\"flag\">app/layout(.tsx)</span>\n                    {props.children}\n                </section>\n            </body>\n        </html>\n    );\n} \n```", "```\nexport default function ComponentsLayout(props: LayoutProps): JSX.Element {\n    return (\n        <section>\n            <span className=\"flag\">app/components/layout(.tsx)</span>\n            <nav>Navigation Placeholder</nav>\n            <main>{props.children}</main>\n        </section>\n    );\n} \n```", "```\nexport default function WeatherLayout(props: LayoutProps): JSX.Element {\n    return (\n        <section>\n            <span className=\"flag\">app/components/weather/layout(.tsx)</span>\n            {props.children}\n        </section>\n    );\n} \n```", "```\n\"use client\";\n\nimport {useState, useEffect} from \"react\";\n\nexport default function WeatherComponent(props: WeatherProps): JSX.Element {\n\n    const [count, setCount] = useState(0);\n\n    useEffect(() => {\n        setCount(1);\n    }, []);\n    return (\n        <h1 onClick={() => {setCount(count + 1)}} >\n            The weather is {props.weather}, and the counter shows {count}\n        </h1>\n    );\n} \n```", "```\nimport WeatherComponent from \"./component\";\n\nexport const metadata = {\n    title: \"Appendix C - The Weather Component (Weather & Count)\",\n    description: \"The Example Code For The Weather Component (Weather & Count)\",\n};\n\nexport default async function WeatherPage() {\n    return (\n        <section className=\"content\">\n            <span className=\"flag\">app/components/weather/page(.tsx)</span>\n            <WeatherComponent weather=\"sunny\" />\n        </section>\n    );\n} \n```", "```\ninterface ErrorProps {\n    error: Error;\n    reset: () => void;\n} \n```", "```\n\"use client\";\n\nexport default function WeatherError(props: ErrorProps): JSX.Element {\n    return (\n        <section className=\"content error\">\n            <span className=\"flag\">app/components/weather/error(.tsx)</span>\n            <h2>Something went wrong!</h2>\n            <blockquote>{props.error?.toString()}</blockquote>\n            <button onClick={() => props.reset()}>Try again (re-render)</button>\n        </section>\n    );\n} \n```", "```\n useEffect(() => {\n        if (count && count >= 4) {\n            throw new Error(\"Count >= 4! \");\n        }\n    }, [count]); \n```", "```\nexport default function WeatherLoading(): JSX.Element {\n    return (\n        <section className=\"content\">\n            <span className=\"flag\">app/components/weather/loading(.tsx)</span>\n            <h1 className=\"loading\"></h1>\n        </section>\n    );\n} \n```", "```\nexport default async function ServerComponentUserList(): Promise<JSX.Element|Error> {\n    const url = \"https://www.usemodernfullstack.dev/api/v1/users\";\n    let data: responseItemType[] | [] = [];\n    let names: responseItemType[] | [];\n    try {\n        const response = await fetch(url, {cache: \"force-cache\"});\n        data = (await response.json()) as responseItemType[];\n } catch (err) {\n        throw new Error(\"Failed to fetch data\");\n    }\n    names = data.map((item) => {\n        return {id: item.id, name: item.name};\n    });\n\n    return (\n        <ul>\n            {names.map((item) => (\n                <li id=\"{item.id}\" key=\"{item.id}\">\n                    {item.name}\n                </li>\n            ))}\n        </ul>\n    );\n} \n```", "```\nexport default function ServerComponentLoading(): JSX.Element {\n    return (\n        <section className=\"content\">\n            <span className=\"flag\">\n                app/components/server-component/loading(.tsx)\n            </span>\n            <ul id=\"load\">\n                {[...new Array(10)].map((item, i) => (\n                    <li className=\"loading\"></li>\n                ))}\n            </ul>\n        </section>\n    );\n} \n```", "```\n\"use client\"; // Error components must be Client components\n\nexport default function ServerComponentError(props: ErrorProps): JSX.Element {\n    return (\n        <section className=\"content\">\n            <span className=\"flag\">app/components/server-component/error(.tsx)</span>\n            <h2>Something went wrong!</h2>\n            <code>{props.error?.toString()}</code>\n            <button onClick={() => props.reset()}>Try again (re-render)</button>\n        </section>\n    );\n} \n```", "```\nexport default function ServerComponentLayout(props: LayoutProps): JSX.Element {\n    return (\n        <section>\n            <span className=\"flag\">app/components/server-component/layout(.tsx)</span>\n            {props.children}\n        </section>\n    );\n} \n```", "```\nimport ServerComponentUserList from \"./component\";\n\nexport const metadata = {\n    title: \"Appendix C - Server Side Component (User API)\",\n    description: \"The Example Code For A Server Side Component (User API)\",\n};\n\nexport default async function ServerComponentUserListPage(): JSX.Element {\n    return (\n        <section className=\"content\">\n            <span className=\"flag\">app/components/server-component/page(.tsx)</span>\n            {/* @ts-expect-error Async Server Component */}\n <ServerComponentUserList />\n        </section>\n    );\n} \n```", "```\nimport Link from \"next/link\";\n\nexport default function ComponentsLayout(props: LayoutProps): JSX.Element {\n    return (\n        <section>\n            <span className=\"flag\">app/components/layout(.tsx)</span>\n            **<nav>**\n **<Link href=\"/components/server-component\">**\n **User API <br />**\n **(Server Component)**\n **</Link>****{\" \"}**\n **|**\n **<Link href=\"/components/weather\">**\n **Weather Component <br />**\n **(Client Component)**\n**</Link>**\n **</nav>**\n            <main>{props.children}</main>\n        </section>\n    );\n} \n```", "```\nimport {NextRequest, NextResponse} from 'next/server';\nexport async function GET(request: NextRequest): Promise<NextResponse> {\n    return NextResponse.json({});\n}\n\nexport async function POST(request: NextRequest): Promise<NextResponse {\n    return NextResponse.json({});\n} \n```", "```\nimport {NextResponse, NextRequest} from \"next/server\";\n\ninterface ReqContext {\n    params: {\n        zipcode: number;\n    }\n}\n\nexport async function GET(req: NextRequest, context: ReqContext): Promise<NextResponse> {\n    return NextResponse.json(\n        {\n            zipcode: context.params.zipcode,\n            weather: \"sunny\",\n            temp: 35,\n        },\n        {status: 200}\n    );\n} \n```", "```\n$ **curl -i \\**\n **-X GET \\**\n **-H \"Accept: application/json\" \\**\n **http://localhost:3000/api/v1/weather/12345** \n```", "```\nHTTP/1.1 200 OK\ncontent-type: application/json\n`--snip--`\n{\"zipcode\":\"12345\",\"weather\":\"sunny\",\"temp\":35} \n```"]