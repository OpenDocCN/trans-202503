- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">C</samp> <samp class="SANS_Dogma_OT_Bold_B_11">COMMON
    MATCHERS</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Drop-image.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In Jest, *matchers* let us check a specific condition, such as whether two values
    are equal or whether an HTML element exists in the current DOM. Jest comes with
    a set of built-in matchers. In addition, the *JEST-DOM* package from the testing
    library provides DOM-specific matchers.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Built-in Matchers</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section covers the most common built-in Jest matchers. You can find a complete
    list in the official JEST documentation at [*https://<wbr>jestjs<wbr>.io<wbr>/docs<wbr>/expect*](https://jestjs.io/docs/expect).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">toBe  </samp>This matcher is the
    simplest and by far the most common. It’s a simple equality check to determine
    whether two values are identical. It behaves similarly to the strict equality
    (<samp class="SANS_TheSansMonoCd_W5Regular_11">===</samp>) operator, as it considers
    type differences. Unlike the strict equality operator, however, it considers <samp
    class="SANS_TheSansMonoCd_W5Regular_11">+0</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">-0</samp>
    to be different.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">toEqual  </samp>We use <samp class="SANS_TheSansMonoCd_W5Regular_11">toEqual</samp>
    to perform a deep-equality check between objects and arrays, comparing all of
    their properties or items. This matcher ignores undefined values and items. Furthermore,
    it does not check the object’s types (for example, whether they are instances
    or children of the same class or parent object). If you require such a check,
    consider using the <samp class="SANS_TheSansMonoCd_W5Regular_11">toStrictEqual</samp>
    matcher instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">toStrictEqual  </samp>The <samp
    class="SANS_TheSansMonoCd_W5Regular_11">toStrictEqual</samp> matcher performs
    a structure and type comparison for objects and arrays; passing this test requires
    that the objects are of the same type. In addition, the matcher considers <samp
    class="SANS_TheSansMonoCd_W5Regular_11">undefined</samp> values and <samp class="SANS_TheSansMonoCd_W5Regular_11">undefined</samp>
    array items.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">toBeCloseTo  </samp>For floating-point
    numbers, we use <samp class="SANS_TheSansMonoCd_W5Regular_11">toBeCloseTo</samp>
    instead of <samp class="SANS_TheSansMonoCd_W5Regular_11">toBe</samp>. This is
    because JavaScript’s internal calculations of floating-point numbers are flawed,
    and this matcher considers those rounding errors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">toBeGreaterThan/toBeGreaterThanOrEqual  </samp>For
    numeric values, we use these matchers to verify that the result is greater than
    or equal to a value, similar to the <samp class="SANS_TheSansMonoCd_W5Regular_11">></samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">>=</samp> operators.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">toBeLessThan/toBeLessThanOrEqual  </samp>These
    are the opposite of the <samp class="SANS_TheSansMonoCd_W5Regular_11">GreaterThan...</samp>
    matchers for numeric values, similar to the <samp class="SANS_TheSansMonoCd_W5Regular_11"><</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11"><=</samp> operators.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">toBeTruthy/toBeFalsy  </samp>These
    matchers check if a value exists, regardless of its value. They consider the six
    JavaScript values <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>, <samp
    class="SANS_TheSansMonoCd_W5Regular_11">' '</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">null</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">undefined</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">false</samp> to be falsy and
    everything else to be truthy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">toMatch  </samp>This matcher accepts
    a string or a regular expression, then checks if a value contains the given string
    or if the regular expression returns the given result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">toContain  </samp>The <samp class="SANS_TheSansMonoCd_W5Regular_11">toContain</samp>
    matcher is similar to <samp class="SANS_TheSansMonoCd_W5Regular_11">toMatch</samp>,
    but it accepts either an array or a string and checks these for a given string
    value. When used on an array, the matcher verifies that the array contains the
    given string.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">toThrow  </samp>This matcher verifies
    that a function throws an error. The function being checked requires a wrapping
    function or the assertion will fail. We can pass it a string or a regular expression,
    similar to the <samp class="SANS_TheSansMonoCd_W5Regular_11">toMatch</samp> function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: <samp class="SANS_Futura_Std_Bold_B_11">The JEST-DOM Matchers</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *JEST-DOM* package provides matchers to work directly with the DOM, allowing
    us to easily write tests that run assertions on the DOM, such as checking for
    an element’s presence, HTML contents, CSS classes, or attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Say we want to check that our logo element has the class name <samp class="SANS_TheSansMonoCd_W5Regular_11">center</samp>.
    Instead of manually checking for the presence of an element and then checking
    its class name attribute with <samp class="SANS_TheSansMonoCd_W5Regular_11">toMatch</samp>,
    we can use the <samp class="SANS_TheSansMonoCd_W5Regular_11">toHaveClass</samp>
    matcher, as shown in [Listing C-1](appendix-C.xhtml#LisC-1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing C-1: The basic syntax for testing with the DOM'
  prefs: []
  type: TYPE_NORMAL
- en: First we add the data attribute <samp class="SANS_TheSansMonoCd_W5Regular_11">testid</samp>
    to our image element. Then, in the test, we get the element using this ID and
    store the reference in a constant. Finally, we use the <samp class="SANS_TheSansMonoCd_W5Regular_11">toHaveClass</samp>
    matcher on the element’s reference to see if the element’s class names contain
    the class <samp class="SANS_TheSansMonoCd_W5Regular_11">center</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at the most common DOM-related matchers.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">getByTestId  </samp>This matcher
    lets us directly access a DOM element and store a reference to it, which we then
    use with custom matchers to assert things about this element.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">toBeInTheDocument  </samp>This
    matcher verifies that an element was added to the document tree. This matcher
    works only on elements that are currently part of the DOM and ignores detached
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">toContainElement  </samp>This matcher
    tests our assumptions about the element’s child elements, letting us verify, for
    example, whether an element is a descendant of the first.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">toHaveAttribute  </samp>This matcher
    lets us run assertions on the element’s attributes, such as an image’s <samp class="SANS_TheSansMonoCd_W5Regular_11">alt</samp>
    attribute and the <samp class="SANS_TheSansMonoCd_W5Regular_11">checked</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">disabled</samp>, or <samp class="SANS_TheSansMonoCd_W5Regular_11">error</samp>
    state of form elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">toHaveClass</samp>  The <samp class="SANS_TheSansMonoCd_W5Regular_11">toHaveClass</samp>
    matcher is a specific variant of the <samp class="SANS_TheSansMonoCd_W5Regular_11">toHave
    Attribute</samp> matcher. It lets us explicitly assert that an element has a particular
    class name, allowing us to write clean tests.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
