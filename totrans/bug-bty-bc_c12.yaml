- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Race Conditions
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 竞争条件
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: 'Race conditions are one of the most interesting vulnerabilities in modern web
    applications. They stem from simple programming mistakes developers often make,
    and these mistakes have proved costly: attackers have used race conditions to
    steal money from online banks, e-commerce sites, stock brokerages, and cryptocurrency
    exchanges.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 竞争条件是现代Web应用中最有趣的漏洞之一。它们源于开发人员常犯的简单编程错误，这些错误已经证明是代价高昂的：攻击者利用竞争条件从在线银行、电子商务网站、股票经纪公司和加密货币交易所窃取资金。
- en: Let’s dive into how and why these vulnerabilities happen, and how you can find
    them and exploit them.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解这些漏洞是如何发生的，为什么会发生，以及你如何找到它们并加以利用。
- en: Mechanisms
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机制
- en: A *race condition* happens when two sections of code that are designed to be
    executed in a sequence get executed out of sequence. To understand how this works,
    you need to first understand the concept of concurrency. In computer science,
    *concurrency* is the ability to execute different parts of a program simultaneously
    without affecting the outcome of the program. Concurrency can drastically improve
    the performance of programs because different parts of the program’s operation
    can be run at once.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*竞争条件*发生在两个原本设计为按顺序执行的代码块被打乱顺序执行时。要理解这一点，首先需要了解并发的概念。在计算机科学中，*并发*指的是在不影响程序结果的情况下同时执行程序的不同部分。并发可以显著提高程序的性能，因为程序的不同部分可以同时运行。'
- en: 'Concurrency has two types: multiprocessing and multithreading. *Multiprocessing*
    refers to using multiple *central processing units (**CPUs**)*, the hardware in
    a computer that executes instructions, to perform simultaneous computations. On
    the other hand, *multithreading* is the ability of a single CPU to provide multiple
    *threads*, or concurrent executions. These threads don’t actually execute at the
    same time; instead, they take turns using the CPU’s computational power. When
    one thread is idle, other threads can continue taking advantage of the unused
    computing resources. For example, when one thread is suspended while waiting for
    user input, another can take over the CPU to execute its computations.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 并发有两种类型：多处理和多线程。*多处理*指的是使用多个*中央处理单元（**CPU**）*，即计算机中执行指令的硬件，来进行并行计算。另一方面，*多线程*是指单个CPU提供多个*线程*或并发执行的能力。这些线程并不会真正同时执行，而是轮流使用CPU的计算能力。当一个线程处于空闲状态时，其他线程可以继续利用未被使用的计算资源。例如，当一个线程在等待用户输入时挂起，另一个线程可以接管CPU执行计算。
- en: Arranging the sequence of execution of multiple threads is called *scheduling*.
    Different systems use different scheduling algorithms, depending on their performance
    priorities. For example, some systems might schedule their tasks by executing
    the highest-priority tasks first, while another system might execute its tasks
    by giving out computational time in turns, regardless of priority.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 安排多个线程的执行顺序被称为*调度*。不同的系统根据其性能优先级使用不同的调度算法。例如，有些系统可能通过优先执行最高优先级的任务来调度任务，而另一些系统则可能通过轮流分配计算时间来执行任务，无论任务的优先级如何。
- en: This flexible scheduling is precisely what causes race conditions. Race conditions
    happen when developers don’t adhere to certain safe concurrency principles, as
    we’ll discuss later in this chapter. Since the scheduling algorithm can swap between
    the execution of two threads at any time, you can’t predict the sequence in which
    the threads execute each action.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这种灵活的调度恰恰是竞争条件发生的原因。竞争条件发生在开发人员未遵循某些安全的并发原则时，我们将在本章后面讨论这些原则。由于调度算法可以随时在两个线程的执行之间切换，因此你无法预测线程执行每个操作的顺序。
- en: 'To see why the sequence of execution matters, let’s consider an example (courtesy
    of Wikipedia: [https://en.wikipedia.org/wiki/Race_condition](https://en.wikipedia.org/wiki/Race_condition)).
    Say two concurrent threads of execution are each trying to increase the value
    of a global variable by 1\. If the variable starts out with a value of 0, it should
    end up with a value of 2\. Ideally, the threads would be executed in the stages
    shown in [Table 12-1](#table12-1).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解执行顺序为何重要，我们来看一个例子（感谢维基百科：[https://en.wikipedia.org/wiki/Race_condition](https://en.wikipedia.org/wiki/Race_condition)）。假设两个并发执行的线程各自试图将一个全局变量的值增加1。如果变量初始值为0，那么它应该最终值为2。理想情况下，线程应该按照[表12-1](#table12-1)中所示的阶段执行。
- en: 'Table 12-1: Normal Execution of Two Threads Operating on the Same Variable'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 表 12-1：两个线程操作同一变量的正常执行
- en: '|  | **Thread 1** | **Thread 2** | **Value of variable A** |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '|  | **线程 1** | **线程 2** | **变量 A 的值** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| **Stage 1** |  |  | 0 |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 1** |  |  | 0 |'
- en: '| **Stage 2** | Read value of A |  | 0 |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 2** | 读取 A 的值 |  | 0 |'
- en: '| **Stage 3** | Increase A by 1 |  | 0 |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 3** | 将 A 增加 1 |  | 0 |'
- en: '| **Stage 4** | Write the value of A |  | 1 |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 4** | 写入 A 的值 |  | 1 |'
- en: '| **Stage 5** |  | Read value of A | 1 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 5** |  | 读取 A 的值 | 1 |'
- en: '| **Stage 6** |  | Increase A by 1 | 1 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 6** |  | 将 A 增加 1 | 1 |'
- en: '| **Stage 7** |  | Write the value of A | 2 |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 7** |  | 写入 A 的值 | 2 |'
- en: But if the two threads are run simultaneously, without any consideration of
    conflicts that may occur when accessing the same resources, the execution could
    be scheduled as in [Table 12-2](#table12-2) instead.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果两个线程同时运行，且没有考虑访问相同资源时可能发生的冲突，执行可能会如[表 12-2](#table12-2)所示。
- en: 'Table 12-2: Incorrect Calculation Due to a Race Condition'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 表 12-2：由于竞争条件导致的错误计算
- en: '|  | **Thread 1** | **Thread 2** | **Value of variable A** |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '|  | **线程 1** | **线程 2** | **变量 A 的值** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| **Stage 1** |  |  | 0 |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 1** |  |  | 0 |'
- en: '| **Stage 2** | Read value of A |  | 0 |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 2** | 读取 A 的值 |  | 0 |'
- en: '| **Stage 3** |  | Read value of A | 0 |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 3** |  | 读取 A 的值 | 0 |'
- en: '| **Stage 4** | Increase A by 1 |  | 0 |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 4** | 将 A 增加 1 |  | 0 |'
- en: '| **Stage 5** |  | Increase A by 1 | 0 |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 5** |  | 将 A 增加 1 | 0 |'
- en: '| **Stage 6** | Write the value of A |  | 1 |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 6** | 写入 A 的值 |  | 1 |'
- en: '| **Stage 7** |  | Write the value of A | 1 |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 7** |  | 写入 A 的值 | 1 |'
- en: In this case, the final value of the global variable becomes 1, which is incorrect.
    The resulting value should be 2.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，最终的全局变量值变为 1，这是不正确的。结果值应该是 2。
- en: In summary, race conditions happen when the outcome of the execution of one
    thread depends on the outcome of another thread, and when two threads operate
    on the same resources without considering that other threads are also using those
    resources. When these two threads are executed simultaneously, unexpected outcomes
    can occur. Certain programming languages, such as C/C++, are more prone to race
    conditions because of the way they manage memory.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，竞争条件发生在一个线程的执行结果依赖于另一个线程的执行结果，并且当两个线程在没有考虑其他线程也在使用这些资源的情况下操作相同的资源时。当这两个线程同时执行时，可能会发生意外结果。某些编程语言，如
    C/C++，因为管理内存的方式，更容易发生竞争条件。
- en: When a Race Condition Becomes a Vulnerability
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当竞争条件成为漏洞时
- en: A race condition becomes a vulnerability when it affects a security control
    mechanism. In those cases, attackers can induce a situation in which a sensitive
    action executes before a security check is complete. For this reason, race condition
    vulnerabilities are also referred to as *time-of-check* or *time-of-use* vulnerabilities.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 竞争条件成为安全漏洞，当它影响到安全控制机制时。在这种情况下，攻击者可以引发一种情况，使得敏感操作在安全检查完成之前执行。因此，竞争条件漏洞也被称为*检查时*或*使用时*漏洞。
- en: 'Imagine that the two threads of the previous example are executing something
    a little more sensitive: the transfer of money between bank accounts. The application
    would have to perform three subtasks to transfer the money correctly. First, it
    has to check if the originating account has a high enough balance. Then, it must
    add money to the destination account. Finally, it must deduct the same amount
    from the originating account.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 假设前面的两个线程正在执行一些更敏感的操作：在银行账户之间转账。该应用程序必须执行三个子任务才能正确地转账。首先，它必须检查发起账户是否有足够的余额。然后，它必须将钱存入目标账户。最后，它必须从发起账户中扣除相同的金额。
- en: Let’s say that you own two bank accounts, account A and account B. You have
    $500 in account A and $0 in account B. You initiate two money transfers of $500
    from account A to account B at the same time. Ideally, when two money transfer
    requests are initiated, the program should behave as shown in [Table 12-3](#table12-3).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你拥有两个银行账户，账户 A 和账户 B。账户 A 中有 500 美元，账户 B 中有 0 美元。你同时发起了两笔从账户 A 到账户 B 的 500
    美元转账。理想情况下，当同时发起两笔转账请求时，程序应如[表 12-3](#table12-3)所示。
- en: 'Table 12-3: Normal Execution of Two Threads Operating on the Same Bank Account'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 表 12-3：两个线程操作同一银行账户的正常执行
- en: '|  | **Thread 1** | **Thread 2** | **Balance of accounts A + B** |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '|  | **线程 1** | **线程 2** | **账户 A + B 的余额** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| **Stage 1** | Check account A balance ($500) |  | $500 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 1** | 检查 A 账户余额（$500） |  | $500 |'
- en: '| **Stage 2** | Add $500 to account B |  | $1,000 ($500 in A, $500 in B) |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 2** | 向 B 账户添加 $500 |  | $1,000（A账户 $500，B账户 $500） |'
- en: '| **Stage 3** | Deduct $500 from account A |  | $500 ($0 in A, $500 in B) |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 3** | 从 A 账户扣除 $500 |  | $500（A账户 $0，B账户 $500） |'
- en: '| **Stage 4** |  | Check account A balance ($0) | $500 ($0 in A, $500 in B)
    |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 4** |  | 检查 A 账户余额（$0） | $500（A账户 $0，B账户 $500） |'
- en: '| **Stage 5** |  | Transfer fails (low balance) | $500 ($0 in A, $500 in B)
    |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 5** |  | 转账失败（余额不足） | $500（A账户 $0，B账户 $500） |'
- en: 'You end up with the correct amount of money in the end: a total of $500 in
    your two bank accounts. But if you can send the two requests simultaneously, you
    might be able to induce a situation in which the execution of the threads looks
    like [Table 12-4](#table12-4).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最终你会得到正确的资金数额：你在两个银行账户中共 $500。但如果你能同时发送这两个请求，你可能会诱发一个执行情况，像[表 12-4](#table12-4)中所示。
- en: 'Table 12-4: Faulty Transfer Results Due to a Race Condition'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 表 12-4：由于竞争条件导致的错误转账结果
- en: '|  | **Thread 1** | **Thread 2** | **Balance of accounts A + B** |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '|  | **线程 1** | **线程 2** | **A 和 B 账户的余额** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| **Stage 1** | Check account A balance ($500) |  | $500 |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 1** | 检查 A 账户余额（$500） |  | $500 |'
- en: '| **Stage 2** |  | Check account A balance ($500) | $500 |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 2** |  | 检查 A 账户余额（$500） | $500 |'
- en: '| **Stage 3** | Add $500 to account B |  | $1,000 ($500 in A, $500 in B) |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 3** | 向 B 账户添加 $500 |  | $1,000（A账户 $500，B账户 $500） |'
- en: '| **Stage 4** |  | Add $500 to account B | $1,500 ($500 in A, $1,000 in B)
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 4** |  | 向 B 账户添加 $500 | $1,500（A账户 $500，B账户 $1,000） |'
- en: '| **Stage 5** | Deduct $500 from account A |  | $1,000 ($0 in A, $1,000 in
    B) |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 5** | 从 A 账户扣除 $500 |  | $1,000（A账户 $0，B账户 $1,000） |'
- en: '| **Stage 6** |  | Deduct $500 from account A | $1,000 ($0 in A, $1,000 in
    B) |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 6** |  | 从 A 账户扣除 $500 | $1,000（A账户 $0，B账户 $1,000） |'
- en: Note that, in this scenario, you end up with more money than you started with.
    Instead of having $500 in your accounts, you now own a total of $1,000\. You made
    an additional $500 appear out of thin air by exploiting a race condition vulnerability!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在这个场景中，你最终拥有的资金比你开始时多。你的账户中原本有 $500，但现在你总共拥有 $1,000。你通过利用竞争条件漏洞，让额外的 $500
    似乎凭空出现！
- en: Although race conditions are often associated with financial sites, attackers
    can use them in other situations too, such as to rig online voting systems. Let’s
    say an online voting system performs three subtasks to process an online vote.
    First, it checks if the user has already voted. Then, it adds a vote to the vote
    count of the selected candidate. Finally, it records that that user has voted
    to prevent them from casting a vote again.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管竞争条件通常与金融网站有关，攻击者也可以在其他情况下利用它们，比如操纵在线投票系统。假设一个在线投票系统执行三个子任务来处理一次在线投票。首先，它检查用户是否已经投过票。然后，它会将选票数增加到所选候选人的票数中。最后，它记录用户已投票，以防止他们再次投票。
- en: Say you try to cast a vote for candidate A twice, simultaneously. Ideally, the
    application should reject the second vote, following the procedure in [Table 12-5](#table12-5).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你同时为候选人 A 投两次票。理想情况下，应用程序应当拒绝第二次投票，按照[表 12-5](#table12-5)中的程序操作。
- en: 'Table 12-5: Normal Execution of Two Threads Operating on the Same User’s Votes'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 表 12-5：两个线程操作同一用户投票的正常执行
- en: '|  | **Thread 1** | **Thread 2** | **Votes for candidate A** |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '|  | **线程 1** | **线程 2** | **候选人 A 的投票数** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| **Stage 1** |  |  | 100 |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 1** |  |  | 100 |'
- en: '| **Stage 2** | Check whether the user has already voted (they haven’t) |  |
    100 |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 2** | 检查用户是否已经投票（尚未投票） |  | 100 |'
- en: '| **Stage 3** | Increase candidate A’s vote count |  | 101 |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 3** | 增加候选人 A 的投票数 |  | 101 |'
- en: '| **Stage 4** | Mark the user as Already Voted |  | 101 |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 4** | 标记用户为已投票 |  | 101 |'
- en: '| **Stage 5** |  | Check whether the user has already voted (they have) | 101
    |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 5** |  | 检查用户是否已经投票（已投票） | 101 |'
- en: '| **Stage 6** |  | Reject the user’s vote | 101 |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 6** |  | 拒绝用户的投票 | 101 |'
- en: But if the voting application has a race condition vulnerability, execution
    might turn into the scenario shown in [Table 12-6](#table12-6), which gives the
    users the power to cast potentially unlimited votes.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果投票应用程序存在竞争条件漏洞，执行可能会变成[表 12-6](#table12-6)中展示的场景，这会使得用户能够投出潜在无限的选票。
- en: 'Table 12-6: User Able to Vote Twice by Abusing a Race Condition'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 表 12-6：用户通过滥用竞争条件能够投两次票
- en: '|  | **Thread 1** | **Thread 2** | **Votes for candidate A** |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '|  | **线程 1** | **线程 2** | **候选人 A 的投票数** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| **Stage 1** |  |  | 100 |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 1** |  |  | 100 |'
- en: '| **Stage 2** | Check whether the user has already voted (they haven’t) |  |
    100 |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 2** | 检查用户是否已经投票（他们尚未投票） |  | 100 |'
- en: '| **Stage 3** |  | Check whether the user has already voted (they haven’t)
    | 100 |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 3** |  | 检查用户是否已经投票（他们尚未投票） | 100 |'
- en: '| **Stage 4** | Increase candidate A’s vote count |  | 101 |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 4** | 增加候选人 A 的票数 |  | 101 |'
- en: '| **Stage 5** |  | Increase candidate A’s vote count | 102 |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 5** |  | 增加候选人 A 的票数 | 102 |'
- en: '| **Stage 6** | Mark the user as Already Voted |  | 102 |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 6** | 将用户标记为已投票 |  | 102 |'
- en: '| **Stage 7** |  | Mark the user as Already Voted | 102 |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| **阶段 7** |  | 将用户标记为已投票 | 102 |'
- en: An attacker can follow this procedure to fire two, ten, or even hundreds of
    requests at once, and then see which vote requests get processed before the user
    is marked as Already Voted.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以按照以下步骤同时发送两个、十个，甚至是数百个请求，然后查看哪些投票请求在用户被标记为已投票之前先被处理。
- en: Most race condition vulnerabilities are exploited to manipulate money, gift
    card credits, votes, social media likes, and so on. But race conditions can also
    be used to bypass access control or trigger other vulnerabilities. You can read
    about some real-life race condition vulnerabilities on the HackerOne Hacktivity
    feed ([https://hackerone.com/hacktivity?querystring=race%20condition/](https://hackerone.com/hacktivity?querystring=race%20condition/)).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数竞态条件漏洞被用来操控金钱、礼品卡积分、投票、社交媒体点赞等。但竞态条件也可以用来绕过访问控制或触发其他漏洞。你可以在 HackerOne 的 Hacktivity
    feed 上阅读一些实际的竞态条件漏洞案例（[https://hackerone.com/hacktivity?querystring=race%20condition/](https://hackerone.com/hacktivity?querystring=race%20condition/)).
- en: Prevention
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预防措施
- en: The key to preventing race conditions is to protect resources during execution
    by using a method of *synchronization*, or mechanisms that ensure threads using
    the same resources don’t execute simultaneously.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 防止竞态条件的关键是在执行过程中通过使用*同步*方法来保护资源，或者使用机制确保使用相同资源的线程不会同时执行。
- en: Resource locks are one of these mechanisms. They block other threads from operating
    on the same resource by *locking* a resource. In the bank transfer example, thread
    1 could lock the balance of accounts A and B before modifying them so that thread
    2 would have to wait for it to finish before accessing the resources.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 资源锁是其中一种机制。它们通过*锁定*资源来阻止其他线程对同一资源进行操作。在银行转账的例子中，线程 1 可以在修改账户 A 和 B 的余额之前先锁定它们，这样线程
    2 就必须等线程 1 完成操作后才能访问这些资源。
- en: Most programming languages that have concurrency abilities also have some sort
    of synchronization functionality built in. You have to be aware of the concurrency
    issues in your applications and apply synchronization measures accordingly. Beyond
    synchronization, following secure coding practices, like the principle of least
    privilege, can prevent race conditions from turning into more severe security
    issues.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数具有并发能力的编程语言也都内建了一些同步功能。你必须意识到你应用中的并发问题，并相应地采取同步措施。除了同步，遵循安全编码实践，如最小特权原则，可以防止竞态条件发展成更严重的安全问题。
- en: The *principle of least privilege* means that applications and processes should
    be granted only the privileges they need to complete their tasks. For example,
    when an application requires only read access to a file, it should not be granted
    any write or execute permissions. You should grant applications precisely the
    permissions that they need instead. This lowers the risks of complete system compromise
    during an attack.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*最小特权原则*意味着应用程序和进程只应获得完成任务所需的特权。例如，当一个应用程序仅需要对文件进行读取访问时，它不应被授予任何写入或执行权限。你应当精确授予应用程序所需的权限。这可以降低在攻击过程中整个系统被攻陷的风险。'
- en: Hunting for Race Conditions
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 寻找竞态条件
- en: Hunting for race conditions is simple. But often it involves an element of luck.
    By following these steps, you can make sure that you maximize your chances of
    success.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找竞态条件很简单，但通常它也涉及一些运气因素。通过遵循这些步骤，你可以确保最大化成功的机会。
- en: 'Step 1: Find Features Prone to Race Conditions'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 1：找到容易发生竞态条件的功能
- en: Attackers use race conditions to subvert access controls. In theory, any application
    whose sensitive actions rely on access-control mechanisms could be vulnerable.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者利用竞态条件来破坏访问控制。从理论上讲，任何依赖访问控制机制来执行敏感操作的应用程序都可能存在漏洞。
- en: Most of the time, race conditions occur in features that deal with numbers,
    such as online voting, online gaming scores, bank transfers, e-commerce payments,
    and gift card balances. Look for these features in an application and take note
    of the request involved in updating these numbers.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，竞态条件发生在处理数字的功能中，例如在线投票、在线游戏得分、银行转账、电子商务支付和礼品卡余额。请在应用程序中查找这些功能，并注意涉及更新这些数字的请求。
- en: For example, let’s say that, in your proxy, you’ve spotted the request used
    to transfer money from your banking site. You should copy this request to use
    for testing. In Burp Suite, you can copy a request by right-clicking it and selecting
    **Copy as curl command**.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你在代理中发现了一个用于从银行网站转账的请求。你应该复制这个请求用于测试。在 Burp Suite 中，你可以通过右键点击该请求并选择**复制为
    curl 命令**来复制请求。
- en: 'Step 2: Send Simultaneous Requests'
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 2：发送同时请求
- en: You can then test for and exploit race conditions in the target by sending multiple
    requests to the server simultaneously.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以通过同时向服务器发送多个请求来测试和利用目标中的竞态条件。
- en: 'For example, if you have $3,000 in your bank account and want to see if you
    can transfer more money than you have, you can simultaneously send multiple requests
    for transfer to the server via the `curl` command. If you’ve copied the command
    from Burp, you can simply paste the command into your terminal multiple times
    and insert a `&` character between each one. In the Linux terminal, the `&` character
    is used to execute multiple commands simultaneously in the background:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你在银行账户中有 $3,000 并想查看是否能够转账超过你所拥有的金额，你可以通过 `curl` 命令同时发送多个转账请求到服务器。如果你已经从
    Burp 中复制了命令，你可以将命令粘贴到终端中多次，并在每个命令之间插入 `&` 字符。在 Linux 终端中，`&` 字符用于同时在后台执行多个命令：
- en: '[PRE0]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Be sure to test for operations that should be allowed once, but not multiple
    times! For example, if you have a bank account balance of $3,000, testing to transfer
    $5,000 is pointless, because no single request would be allowed. But testing a
    transfer of $10 multiple times is also pointless, since you should be able to
    do that even without a race condition. The key is to test the application’s limits
    by executing operations that should not be repeatable.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要测试那些应该只允许一次，但不能多次执行的操作！例如，如果你的银行账户余额是 $3,000，测试转账 $5,000 是没有意义的，因为单个请求是无法允许的。但是，测试将
    $10 转账多次也是没有意义的，因为即使没有竞态条件，你也应该能够完成这项操作。关键是通过执行那些不应该重复的操作来测试应用程序的限制。
- en: 'Step 3: Check the Results'
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3：检查结果
- en: Check if your attack has succeeded. In our example, if your destination account
    ends up with more than a $3,000 addition after the simultaneous requests, your
    attack has succeeded, and you can determine that a race condition exists on the
    transfer balance endpoint.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 检查你的攻击是否成功。在我们的示例中，如果目标账户在同时请求后出现超过 $3,000 的余额增加，那么攻击就成功了，你可以确定转账余额端点存在竞态条件。
- en: Note that whether your attack succeeds depends on the server’s process-scheduling
    algorithm, which is a matter of luck. However, the more requests you send within
    a short time frame, the more likely your attack will succeed. Also, many tests
    for race conditions won’t succeed the first time, so it’s a good idea to try a
    few more times before giving up.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，攻击是否成功取决于服务器的进程调度算法，这是运气问题。然而，在短时间内发送更多请求，攻击成功的可能性会更大。此外，许多竞态条件测试第一次不会成功，因此建议在放弃之前再尝试几次。
- en: 'Step 4: Create a Proof of Concept'
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 4：创建概念验证
- en: 'Once you have found a race condition, you will need to provide proof of the
    vulnerability in your report. The best way to do this is to lay out the steps
    needed to exploit the vulnerability. For example, you can lay out the exploitation
    steps like so:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你发现了竞态条件，你需要在报告中提供该漏洞的证明。最好的方式是列出利用该漏洞所需的步骤。例如，你可以按如下方式列出利用步骤：
- en: Create an account with a $3,000 balance and another one with zero balance. The
    account with $3,000 will be the source account for our transfers, and the one
    with zero balance will be the destination.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个余额为 $3,000 的账户和一个余额为零的账户。余额为 $3,000 的账户将作为我们转账的源账户，余额为零的账户将作为目标账户。
- en: 'Execute this command:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行此命令：
- en: '[PRE1]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will attempt to transfer $3,000 to another account multiple times simultaneously.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将尝试同时多次将 $3,000 转账到另一个账户。
- en: You should see more than $3,000 in the destination account. Reverse the transfer
    and try the attack a few more times if you don’t see more than $3,000 in the destination
    account.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该在目标账户中看到超过$3,000的金额。如果目标账户中没有超过$3,000，反向转账并尝试几次攻击。
- en: Since the success of a race condition attack depends on luck, make sure you
    include instructions to try again if the first test fails. If the vulnerability
    exists, the attack should succeed eventually after a few tries.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 由于竞态条件攻击的成功取决于运气，确保在第一次测试失败时，提供再次尝试的说明。如果漏洞存在，经过几次尝试后，攻击最终应该会成功。
- en: Escalating Race Conditions
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 升级竞态条件
- en: The severity of race conditions depends on the impacted functionality. When
    determining the impact of a specific race condition, pay attention to how much
    an attacker can potentially gain in terms of monetary reward or social influence.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 竞态条件的严重性取决于受影响的功能。在确定特定竞态条件的影响时，要注意攻击者在金钱奖励或社会影响方面可能获得的收益。
- en: For example, if a race condition is found on a critical functionality like cash
    withdrawal, fund transfer, or credit card payment, the vulnerability could lead
    to infinite financial gain for the attacker. Prove the impact of a race condition
    and articulate what attackers will be able to achieve in your report.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果在像现金提取、资金转账或信用卡支付这样的重要功能上发现竞态条件，这个漏洞可能导致攻击者获得无限的经济收益。在报告中证明竞态条件的影响，并阐明攻击者将能够实现的目标。
- en: Finding Your First Race Condition!
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 找到你的第一个竞态条件！
- en: 'Now you’re ready to find your first race condition. Follow these steps to manipulate
    web applications using this neat technique:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你准备好找到你的第一个竞态条件了。按照以下步骤，使用这一巧妙的技术来操作 Web 应用：
- en: Spot the features prone to race conditions in the target application and copy
    the corresponding requests.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找出目标应用程序中容易出现竞态条件的功能，并复制相应的请求。
- en: Send multiple of these critical requests to the server simultaneously. You should
    craft requests that should be allowed once but not allowed multiple times.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时向服务器发送多个此类关键请求。你应该构造那些应该允许一次但不允许多次的请求。
- en: Check the results to see if your attack has succeeded. And try to execute the
    attack multiple times to maximize the chance of success.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查结果，看看你的攻击是否成功。如果攻击没有成功，尝试多次执行该攻击以最大化成功的机会。
- en: Consider the impact of the race condition you just found.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 考虑你刚刚发现的竞态条件的影响。
- en: Draft up your first race condition report!
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 起草你的第一个竞态条件报告！
