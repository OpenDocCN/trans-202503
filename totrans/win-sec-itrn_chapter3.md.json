["```\n❶ PS> **$lib = Import-Win32Module -Path \"kernel32.dll\"**\n❷ PS> **$lib**\nName         ImageBase        EntryPoint\n----         ---------        ----------\nKERNEL32.DLL 00007FFA088A0000 00007FFA088B7C70\n\n❸ PS> **Get-Win32ModuleExport -Module $lib**\nOrdinal Name                    Address\n------- ----                    -------\n1       AcquireSRWLockExclusive NTDLL.RtlAcquireSRWLockExclusive\n2       AcquireSRWLockShared    NTDLL.RtlAcquireSRWLockShared\n3       ActivateActCtx          0x7FFA088BE640\n4       ActivateActCtxWorker    0x7FFA088BA950\n`--snip--`\n\n❹ PS> **\"{0:X}\" -f (Get-Win32ModuleExport -Module $lib** \n**-ProcAddress \"AllocConsole\")**\n7FFA088C27C0 \n```", "```\nPS> **Get-Win32ModuleImport -Path \"kernel32.dll\"**\nDllName                                   FunctionCount DelayLoaded\n-------                                   ------------- -----------\napi-ms-win-core-rtlsupport-l1-1-0.dll     13            False\nntdll.dll                                 378           False\nKERNELBASE.dll                            90            False\napi-ms-win-core-processthreads-l1-1-0.dll 39            False\n`--snip--`\n\nPS> **Get-Win32ModuleImport -Path \"kernel32.dll\" -DllName \"ntdll.dll\" |**\n**Where-Object Name -Match \"^Nt\"**\nName                          Address\n----                          -------\nNtEnumerateKey                7FFA090BC6F0\nNtTerminateProcess            7FFA090BC630\nNtMapUserPhysicalPagesScatter 7FFA090BC110\nNtMapViewOfSection            7FFA090BC5B0\n`--snip--` \n```", "```\nPS> **ls NtObject:\\KnownDlls**\nName                TypeName\n----                --------\nkernel32.dll        Section\nkernel.appcore.dll  Section\nwindows.storage.dll Section\nucrtbase.dll        Section\nMSCTF.dll           Section\n`--snip--` \n```", "```\nPS> **Get-NtType WindowStation,Desktop**\nName\n----\nWindowStation\nDesktop \n```", "```\n❶ PS> **Get-NtWindowStationName**\nWinSta0\nService-0x0-b17580b$\n\n❷ PS> **Get-NtWindowStationName -Current**\nWinSta0\n\n❸ PS> **Get-NtDesktopName**\nDefault\nWinLogon\n\n❹ PS> **Get-NtDesktopName -Current**\nDefault \n```", "```\nPS> **$desktop = Get-NtDesktop -Current**\nPS> **Get-NtWindow -Desktop $desktop**\nHandle ProcessId ThreadId ClassName\n------ --------- -------- ---------\n66104  11864     12848    GDI+ Hook Window Class\n65922  23860     18536    ForegroundStaging\n65864  23860     24400    ForegroundStaging\n65740  23860     20836    tooltips_class32\n`--snip--` \n```", "```\n❶ PS> **$ws = Get-NtWindow**\n❷ PS> **$char_count = 2048**\nPS> **$buf = New-Win32MemoryBuffer -Length ($char_count*2)**\n\n❸ PS> **foreach($w in $ws) {**\n **$len = Send-NtWindowMessage -Window $w -Message 0xD -LParam $buf.DangerousGetHandle() -WParam $char_count -Wait**\n **$txt = $buf.ReadUnicodeString($len.ToInt32())**\n **if ($txt.Length -eq 0) {**\n **continue**\n **}**\n **\"PID: $($w.ProcessId) - $txt\"**\n**}**\nPID: 10064 - System tray overflow window.\nPID: 16168 - HardwareMonitorWindow\nPID: 10064 - Battery Meter\n`--snip--` \n```", "```\nPS> **Get-NtProcess -InfoOnly | Group-Object SessionId**\nCount Name        Group\n----- ----        -----\n  156 0           {, System, Secure System, Registry...}\n    1 1           {csrss.exe}\n    1 2           {csrss.exe}\n  113 3           {csrss.exe, winlogon.exe, fontdrvhost.exe, dwm.exe...} \n```", "```\nPS> **ls NtObjectSession:\\ | Group-Object TypeName**\nCount Name                Group\n----- ----                -----\n  246 Semaphore           {SM0:10876:304:WilStaging_02_p0h...}\n  263 Mutant              {SM0:18960:120:WilError_02,...}\n  164 Section             {fd8HWNDInterface:3092e,...}\n  159 Event               {BrushTransitionsCom...}\n    4 SymbolicLink        {AppContainerNamedObjects, Local, Session, Global}\n    1 ALPC Port           {SIPC_{2819B8FF-EB1C-4652-80F0-7AB4EFA88BE4}}\n    2 Job                 {WinlogonAccess, ProcessJobTracker1980}\n    1 Directory           {Restricted} \n```", "```\nHANDLE CreateMutexEx(\n    SECURITY_ATTRIBUTES* lpMutexAttributes,\n    const WCHAR*         lpName,\n    DWORD                dwFlags,\n    DWORD                dwDesiredAccess\n); \n```", "```\nNTSTATUS NtCreateMutant(\n    HANDLE*              MutantHandle,\n    ACCESS_MASK          DesiredAccess,\n    OBJECT_ATTRIBUTES*   ObjectAttributes,\n    BOOLEAN              InitialOwner\n); \n```", "```\nPS> **Get-Win32Error 5**\nErrorCode Name                Message\n--------- ----                -------\n        5 ERROR_ACCESS_DENIED Access is denied. \n```", "```\nPS> **$m = New-NtMutant ABC -Win32Path**\nPS> **$m.FullPath**\n\\Sessions\\2\\BaseNamedObjects\\ABC \n```", "```\nstruct SECURITY_ATTRIBUTES {\n    DWORD  nLength;\n    VOID*  lpSecurityDescriptor;\n    BOOL   bInheritHandle;\n}; \n```", "```\nPS> **Get-Win32ModuleExport \"kernel32.dll\" -ProcAddress CreateMutexEx**\nException calling \"GetProcAddress\" with \"2\" argument(s):\n\"(0x8007007F) - The specified procedure could not be found.\" \n```", "```\nPS> **Get-Win32ModuleExport \"kernel32.dll\" | Where-Object Name -Match CreateMutexEx**\n\nOrdinal Name           Address\n------- ----           -------\n217     CreateMutexExA 0x7FFA088C1EB0\n218     CreateMutexExW 0x7FFA088C1EC0 \n```", "```\nPS> **Use-NtObject($key = Get-NtKey \\REGISTRY\\MACHINE\\SOFTWARE) {**\n **$key.Win32Path**\n**}**\nHKEY_LOCAL_MACHINE\\SOFTWARE\n\nPS> **Use-NtObject($key = Get-NtKey -Win32Path \"HKCU\\SOFTWARE\") {**\n **$key.FullPath**\n**}**\n\\REGISTRY\\USER\\S-1-5-21-818064985-378290696-2985406761-1002\\SOFTWARE \n```", "```\nPS> **ls NtKeyUser:\\SOFTWARE** \n```", "```\nPS> **ls HKCU:\\SOFTWARE** \n```", "```\n❶ PS> **$key = New-NtKey -Win32Path \"HKCU\\ABC`0XYZ\"**\n❷ PS> **Get-Item \"NtKeyUser:\\ABC`0XYZ\"**\nNameTypeName\n------------\nABC XYZ Key\n\n❸ PS> **Get-Item \"HKCU:\\ABC`0XYZ\"**\nGet-Item : Cannot find path 'HKCU:\\ABC XYZ' because it does not exist.\n\nPS> **Remove-NtKey $key**\nPS> **$key.Close()** \n```", "```\nPS> **Use-NtObject($cdrive = Get-NtSymbolicLink \"\\??\\C:\") {**\n    **$cdrive | Select-Object FullPath, Target**\n**}**\nFullPath     Target\n--------     ------\n❶ \\GLOBAL??\\C: \\Device\\HarddiskVolume3\n\n❷ PS> **Add-DosDevice Z: C:\\Windows**\nPS> **Use-NtObject($zdrive = Get-NtSymbolicLink \"\\??\\Z:\") {**\n    **$zdrive | Select-Object FullPath, Target**\n**}**\nFullPath                                    Target\n--------                                    ------\n❸ \\Sessions\\0\\DosDevices\\00000000-011b224b\\Z: \\??\\C:\\windows\n\n❹ PS> **Remove-DosDevice Z:** \n```", "```\nPS> **Set-Location $env:SystemRoot**\nPS C:\\Windows> **Get-NtFilePathType \".\"**\nRelative\n\nPS C:\\Windows> **Get-NtFilePath \".\"**\n\\??\\C:\\Windows\n\nPS C:\\Windows> **Get-NtFilePath \"..\\\"**\n\\??\\C:\\\n\nPS C:\\Windows> **Get-NtFilePathType \"C:ABC\"**\nDriveRelative\n\nPS C:\\Windows> **Get-NtFilePath \"C:ABC\"**\n\\??\\C:\\Windows\\ABC\n\nPS C:\\Windows> **Get-NtFilePathType \"\\\\?\\C:\\abc/..\\xyz\"**\nLocalDevice\n\nPS C:\\Windows> **Get-NtFilePath \"\\\\?\\C:\\abc/..\\xyz\"**\n\\??\\C:\\abc/..\\xyz \n```", "```\nPS> **$path = \"C:\\$('A'*256)\"**\nPS> **$path.Length**\n259\n\nPS> **Get-NtFilePath -Path $path**\n\\??\\C:\\AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA...\n\nPS> **$path += \"A\"**\nPS> **$path.Length**\n260\n\nPS> **Get-NtFilePath -Path $path**\nGet-NtFilePath : \"(0xC0000106) - A specified name string is too long...\"\n\nPS> **$path = \"\\\\?\\\" + $path**\nPS> **$path.Length**\n264\n\nPS> **Get-NtFilePath -Path $path**\n\\??\\C:\\AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA... \n```", "```\nPS> **$path = \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\"**\nPS> **Get-NtKeyValue -Win32Path $path -Name \"LongPathsEnabled\"**\nName             Type  DataObject\n----             ----  ----------\nLongPathsEnabled Dword 1\n\nPS> **(Get-Process -Id $pid).Path | Get-Win32ModuleManifest |**\n**Select-Object LongPathAware**\nLongPathAware\n-------------\n        ❶ True\n\n❷ PS> **$path = \"C:\\$('A'*300)\"**\nPS> **$path.Length**\n303\n\nPS> **Get-NtFilePath -Path $path**\n\\??\\C:\\AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA... \n```", "```\nPS> **$proc = New-Win32Process -CommandLine \"notepad test.txt\"** \n```", "```\nPS> **$proc = New-Win32Process -CommandLine \"notepad test.txt\"**\n**-ApplicationName \"C:\\windows\\notepad.exe\"** \n```", "```\nPS> **New-Win32Process -CommandLine \"document.txt\"**\nException calling \"CreateProcess\": \"%1 is not a valid Win32 application\" \n```", "```\nPS> **$base_key = \"NtKey:\\MACHINE\\SOFTWARE\\Classes\"**\n❶ PS> **Get-Item \"$base_key\\.txt\" | Select-Object -ExpandProperty Values**\nName          Type   DataObject\n----          ----   ----------\nContent Type  String text/plain\nPerceivedType String text\n            ❷ String txtfile\n\n❸ PS> **Get-ChildItem \"$base_key\\txtfile\\Shell\" | Format-Table**\nName    TypeName\n----    --------\nopen    Key\nprint   Key\nprintto Key\n\n❹ PS> **Get-Item \"$base_key\\txtfile\\Shell\\open\\Command\" |**\n**Select-Object -ExpandProperty Values | Format-Table**\nName Type         DataObject\n---- ----         ----------\n   ❺ ExpandString %SystemRoot%\\system32\\NOTEPAD.EXE %1 \n```", "```\nPS> **Start-Process \"test.txt\" -Verb \"print\"** \n```", "```\nPS> **Get-Win32Service**\nName               Status   ProcessId\n----               ------   ---------\nAarSvc             Stopped  0\nAESMService        Running  7440\nAJRouter           Stopped  0\nALG                Stopped  0\nAppIDSvc           Stopped  0\nAppinfo            Running  8460\n`--snip--` \n```", "```\nPS> **$imps = ls \"$env:WinDir\\*.exe\" | ForEach-Object {**\n **Get-Win32ModuleImport -Path $_.FullName**\n**}**\nPS> **$imps | Where-Object Names -Contains \"CreateProcessW\" |**\n**Select-Object ModulePath**\nModulePath\n----------\nC:\\WINDOWS\\explorer.exe\nC:\\WINDOWS\\unins000.exe \n```", "```\nPS> **$key = New-NtKey -Win32Path \"HKCU\\SOFTWARE\\`0HIDDENKEY\"**\nPS> **ls NtKeyUser:\\SOFTWARE -Recurse | Where-Object Name -Match \"`0\"**\nName                TypeName\n----                --------\nSOFTWARE\\ HIDDENKEY Key\n\nPS> **Remove-NtKey $key**\nPS> **$key.Close()** \n```", "```\n❶ PS> **$key = New-NtKey -Win32Path \"HKCU\\SOFTWARE\\ABC\"**\nPS> **Set-NtKeyValue -Key $key -Name \"`0HIDDEN\" -String \"HELLO\"**\n❷PS> **function Select-HiddenValue {**\n **[CmdletBinding()]**\n **param(**\n        **[parameter(ValueFromPipeline)]**\n **$Key**\n **)**\n\n **Process {**\n❸ **foreach($val in $Key.Values) {**\n **if ($val.Name -match \"`0\") {**\n **[PSCustomObject]@{**\n **RelativePath = $Key.RelativePath**\n **Name = $val.Name**\n **Value = $val.DataObject**\n **}**\n **}**\n **}**\n **}**\n**}**\n❹ PS> **ls -Recurse NtKeyUser:\\SOFTWARE | Select-HiddenValue | Format-Table**\nRelativePath Name    Value\n------------ ----    -----\nSOFTWARE\\ABC HIDDEN  HELLO\n\nPS> **Remove-NtKey $key**\nPS> **$key.Close()** \n```"]