- en: 6 Balance Beam
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this project, you’ll build a desktop balance beam game using a turn knob
    and a servo motor (a small motor capable of making precise movements). The aim
    of the game is to roll a ball back and forth along the beam without it falling
    off. You’ll do this by using the turn knob to control the position of the servo.
    As the servo moves, so will the beam! Ready to get started?
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 6-1](ch06.xhtml#ch06fig01) shows the finished project. This is a simple
    mechanism that is made entirely of cardboard and a few household materials.'
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-1:** The finished Balance Beam project'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**MATERIALS TO GATHER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The circuit for this project uses relatively few parts, though we will introduce
    two new pieces of hardware: the servo motor and the potentiometer. Take a look
    at the electronic parts and other materials you’ll need, shown in [Figures 6-2](ch06.xhtml#ch06fig02)
    through [6-4](ch06.xhtml#ch06fig04).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Electronic Parts**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: • One SparkFun RedBoard (DEV-13975), Arduino Uno (DEV-11021), or any other Arduino-compatible
    board
  prefs: []
  type: TYPE_NORMAL
- en: • One USB Mini-B cable (CAB-11301 or your board’s USB cable; not shown)
  prefs: []
  type: TYPE_NORMAL
- en: • One solderless breadboard (PRT-12002)
  prefs: []
  type: TYPE_NORMAL
- en: • One 10 kΩ potentiometer (COM-09806)
  prefs: []
  type: TYPE_NORMAL
- en: • One submicro size servo motor (ROB-09065)
  prefs: []
  type: TYPE_NORMAL
- en: • Male-to-male jumper wires (PRT-11026)
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*All of the parts used in this project are standard in the SparkFun Inventor’s
    Kit.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-2:** Components for the Balance Beam'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Other Materials and Tools**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: • Pencil or marker
  prefs: []
  type: TYPE_NORMAL
- en: • Craft knife
  prefs: []
  type: TYPE_NORMAL
- en: • Metal ruler
  prefs: []
  type: TYPE_NORMAL
- en: • Needle-nose pliers
  prefs: []
  type: TYPE_NORMAL
- en: • Wire cutters
  prefs: []
  type: TYPE_NORMAL
- en: • Glue (hot glue gun or craft glue)
  prefs: []
  type: TYPE_NORMAL
- en: • Mini screwdriver
  prefs: []
  type: TYPE_NORMAL
- en: • Scissors (not shown)
  prefs: []
  type: TYPE_NORMAL
- en: • (Optional) Drill and 1/4-inch, 1/8-inch, and 1/16-inch bits
  prefs: []
  type: TYPE_NORMAL
- en: • Two sheets of cardboard (roughly 8.5 × 11 inches in size)
  prefs: []
  type: TYPE_NORMAL
- en: • Balance Beam template (see [Figure 6-16](ch06.xhtml#ch06fig16) on page [167](ch06.xhtml#page_167))
  prefs: []
  type: TYPE_NORMAL
- en: • One bamboo skewer
  prefs: []
  type: TYPE_NORMAL
- en: • One small drinking straw (the bamboo skewer should fit into the straw loosely)
  prefs: []
  type: TYPE_NORMAL
- en: • One ping-pong ball
  prefs: []
  type: TYPE_NORMAL
- en: • One medium-size paper clip
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-3:** Recommended building materials'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 6-4:** Recommended tools'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**NEW COMPONENTS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the previous projects, you’ve mostly used your Arduino to control LEDs, but
    now it’s time to branch out and explore other components. This project introduces
    a new sensor, called a *potentiometer*, and motors, specifically the *servo motor*.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Potentiometer**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this project, you’ll use a potentiometer to control the movement of the Balance
    Beam. A potentiometer is a kind of sensor known as a *variable resistor*, which
    just means it’s a resistor whose value can vary.
  prefs: []
  type: TYPE_NORMAL
- en: A potentiometer generally has three legs or connection points and is represented
    by the symbol shown in [Figure 6-5](ch06.xhtml#ch06fig05).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-5:** Schematic diagram for a potentiometer'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Potentiometers come in many shapes and sizes, a few of which are shown in [Figure
    6-6](ch06.xhtml#ch06fig06). Some look like turn knobs, some are sliders, and others
    require a small screwdriver to manipulate. Regardless of their appearance, they
    all work in the same way. And they are all around you—at home, you might find
    them in the dimmer switch of your dining room light, in the volume knob on your
    stereo, or inside devices like DVD players.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-6:** Various shapes and sizes of potentiometers. We’ll be using
    the one on the left.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A potentiometer has a fixed resistance between the two opposite legs marked
    A and B in [Figure 6-7](ch06.xhtml#ch06fig07). Potentiometers can come in all
    sorts of resistance values, but for this project you’ll use a 10 kΩ potentiometer.
    As you turn the knob or move the slider, the third leg of the potentiometer (marked
    C), called the *wiper*, moves up or down the resistor, and the resistance between
    B and C changes. It’s this resistance value that’s applied to the circuit.
  prefs: []
  type: TYPE_NORMAL
- en: If you turn the knob clockwise, the wiper moves toward A and the resistance
    between C and B increases; if you turn the knob counterclockwise, the wiper moves
    toward B and the resistance decreases. [Figure 6-7](ch06.xhtml#ch06fig07) shows
    how moving the wiper affects the resistance.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-7:** Various positions on a potentiometer'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you connect A to 5 V, B to GND, and C to an analog input pin on your Arduino,
    this circuit starts to resemble the voltage divider you used in [Project 5](ch05.xhtml#ch05).
    As you turn the knob, you can vary the voltage on C between 0 V and 5 V. This
    setup is also sometimes called an *adjustable voltage divider.*
  prefs: []
  type: TYPE_NORMAL
- en: '**The Servo Motor**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A servo motor (or just *servo* for short) is a special type of motor designed
    to rotate an arm (or *horn*) to a particular angle, which you will determine in
    your sketch. Most servo motors have a given range of 180 degrees, though some
    can rotate a full 360 degrees; these are called *continuous rotation servos*.
    In this project, you’ll be using a standard 180-degree hobby servo, shown in [Figure
    6-8](ch06.xhtml#ch06fig08).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-8:** A standard hobby servo'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Servo motors are used in thousands of different products, from model cars and
    airplanes to the speedometer in your car and the robotic arms that built it.
  prefs: []
  type: TYPE_NORMAL
- en: What’s inside that black box? We opened one up so you don’t have to—see [Figure
    6-9](ch06.xhtml#ch06fig09).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-9:** The inside of a servo motor'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside a servo are three main parts: the motor, gear train, and control circuit.
    When voltage is applied to the motor, it turns the gear train, which turns the
    hub of the servo motor. The rotational position of the hub is controlled by the
    control circuit. Part of the gear train is a potentiometer that rotates as the
    motor rotates. Remember that a potentiometer is a simple sensor that changes resistance
    based on how much it rotates, and when it’s connected up as an adjustable voltage
    divider, the voltage varies as the potentiometer rotates. The control circuit
    reads both the value in the input signal coming into the servo (from the Arduino,
    in this case) and the potentiometer value and compares them. When the two values
    are equal, the motor stops and holds its position.'
  prefs: []
  type: TYPE_NORMAL
- en: A servo motor relies on PWM, a concept we introduced in “[Create More Colors
    with `analogWrite()`](ch05.xhtml#ch05lev1sec6)” on page [138](ch05.xhtml#page_138).
    To control the position of a servo, the Arduino sends out a PWM signal that pulses
    every 20 ms. The width of the pulse corresponds to a specific rotational position
    for the servo motor. [Figure 6-10](ch06.xhtml#ch06fig10) illustrates this by showing
    the minimum PWM pulse widths for 0 degrees of a servo, the midpoint of 90 degrees,
    and the maximum of 180 degrees. Similar to blinking an LED, you can use the Arduino
    to create a very short pulse that is on for 1 ms and off for 19 ms to move the
    servo to an angle of 0 degrees.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-10:** The PWM duty cycles for the standard range of a servo'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To set the angle of a servo motor to 0 degrees, you could use code like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This code drives pin 9 `HIGH` for 1 ms, and then immediately sets the pin `LOW`
    for 19 ms. As soon as the 19 ms are over, it has to drive the pin `HIGH` again
    for 1 ms to maintain the timing cycle. If your code is busy managing timing like
    this, you can’t add anything else to it without affecting the timing of the pulses
    and control of the servo. Thankfully, the Arduino has a trick to simplify the
    way you control the servo motor: using a *library*. A library is a file containing
    extra code that you can use with your sketch to perform specific tasks or make
    it easier to use particular parts. The Servo library handles all of the pulse
    timing needed to drive the servo motor to a specific angle.'
  prefs: []
  type: TYPE_NORMAL
- en: In this project, you’ll be using the Arduino to move a balance beam based on
    the voltage output of a sensor—your potentiometer. The code will use the voltage
    reading of the sensor to set the appropriate pulse width length for a given rotation
    for the servo, which will determine the angle of the beam.
  prefs: []
  type: TYPE_NORMAL
- en: The good news is that the Arduino, and more specifically the Servo library,
    does all of the hard work for you! It is great to understand how the pulse width
    controls the position of the servo, but, in the end, the software takes care of
    it for you.
  prefs: []
  type: TYPE_NORMAL
- en: '**BUILD THE BALANCE BEAM PROTOTYPE**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you know the theory, you’ll build the circuit for the Balance Beam.
    You’ll start by connecting the servo, and then you’ll add a potentiometer; [Figure
    6-11](ch06.xhtml#ch06fig11) shows the full circuit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that the servo has a single three-pin female header. To connect this
    to your circuit, you’ll need to use male-to-male jumper wires. Take three short
    male-to-male jumper wires and connect these to the female pins, as shown in [Figure
    6-12](ch06.xhtml#ch06fig12). It’s good practice to use the colors that correspond
    to the servo wires to make it easier to see which is which: black, red, and white
    represent the ground, power, and signal lines, respectively. Now, hook the servo
    up to the Arduino.'
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-11:** Balance Beam prototype circuit'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 6-12:** Adding male-to-male jumper wire extensions to the servo motor'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The circuit connection is pretty simple: connect 5 V and GND from the Arduino
    to the power rails on the left side of the breadboard. Connect the servo’s ground
    (black) wire to the ground rail on the breadboard and the power (red) wire to
    the 5 V rail. Connect the signal wire directly to pin 9 on the Arduino. A complete
    diagram is shown in [Figure 6-13](ch06.xhtml#ch06fig13).'
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-13:** Servo hooked up to signal, power, and ground'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, add the servo *horn* onto the hub of the servo. Horns are different-shaped
    arms for a servo that rotate with the hub to make it easier to use and attach
    things to the servo. At this point, select any one of the horns that come with
    the servo, and press-fit it onto the hub of the servo, as shown in [Figure 6-14](ch06.xhtml#ch06fig14).
    You will add a specific horn later, but for now we just want to make it easier
    to see rotation.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-14:** Press-fitting a servo horn from the included options'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If the servo starts moving or acting erratically, simply disconnect its black
    wire from the ground rail to stop it. It’s good safety practice to keep the black
    wire disconnected until you upload code.
  prefs: []
  type: TYPE_NORMAL
- en: Now, wire up the potentiometer. The breadboard has plenty of room, so place
    the potentiometer anywhere you like, making sure each leg is in its own row. Connect
    the two outside pins to the 5 V and ground rails, with the center pin connected
    to analog input pin A0 directly on the Arduino, as shown in [Figure 6-15](ch06.xhtml#ch06fig15).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-15:** The full Balance Beam circuit'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At the moment, you just have a servo connected to a potentiometer. To give the
    project its balancing powers, you need to program it.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAM THE BALANCE BEAM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To use the servo with an Arduino, you need to use the Servo library— which,
    as mentioned earlier, is a collection of prewritten code that expands the commands
    and capabilities of the code in your sketch. It gives you more features and functions
    to work with and simplifies using external hardware with your Arduino. For example,
    the Servo library includes code that attaches the servo to a specific Arduino
    pin, moves the servo to specific angles, and even detaches the servo from a pin.
  prefs: []
  type: TYPE_NORMAL
- en: Before you program the full project, you’ll upload a quick test sketch to check
    that your servo is working correctly.
  prefs: []
  type: TYPE_NORMAL
- en: '**Test the Servo**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here’s a simple example sketch for controlling your servo. Start a new sketch
    by selecting **File ▸ New**, and then enter the sketch in [Listing 6-1](ch06.xhtml#ch06ex01):'
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 6-1:** A servo “Hello world”'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: To use the Servo library, call `#include<Servo.h>` ➊, which tells the Arduino
    to include the *Servo.h* file containing the Servo library code. This adds the
    functions and definitions of the library to the sketch. Notice that this is one
    of the rare instances where there isn’t a semicolon at the end of the line. In
    Arduino programming, the `#` symbol indicates that the following code is a *preprocessor
    directive*, a special piece of code that should be executed before the rest of
    the sketch. When you compile a sketch, the first thing that runs is the *preprocessor*,
    which searches for any lines that start with a `#` symbol and don’t end with the
    semicolon and runs those lines first. The `#include` directive tells the preprocessor
    to include all of the code in the named file before compiling the code in your
    sketch.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the drop-down menu to add a library by selecting **Sketch ▸
    Include Library…** and then selecting the library you want to use (in this case,
    **Servo**). This will automatically add the `#include` statement to your sketch.
    This option is great if you can’t remember the precise syntax of the `#include`
    command or the library name—for example, when you use a library for the first
    time.
  prefs: []
  type: TYPE_NORMAL
- en: The library allows you to create a type of data structure called an *object*.
    An object is simply a container for variables and functions that are predefined.
    Functions that are associated with the object are referred to as *methods*. In
    this sketch, the line `Servo myServo;` creates a new `Servo` object named `myServo`
    ➋.
  prefs: []
  type: TYPE_NORMAL
- en: You can give an object any name you like, but we recommend using a descriptive
    name, like `myServo`, so it’s recognizable. Now you can use that name to reference
    all the servo commands that are available to you in the Servo library. For example,
    the method `myServo.attach()` tells the Arduino which pin the servo is attached
    to. If you had multiple servos, each one would get a unique name so that you could
    control all of them independently.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, think of a robot arm that moves at the shoulder, elbow, and wrist,
    using a servo for each joint. The code for it would create three `Servo` objects
    named `shoulderServo`, `elbowServo`, and `wristServo` so that you could position
    each one accurately and at a different orientation from the others. Each one of
    those `Servo` objects would have its own set of methods that you could use separately.
  prefs: []
  type: TYPE_NORMAL
- en: For the Balance Beam, you’ll use only one servo. The setup of the sketch tells
    the Arduino that you have a servo attached to pin 9 with the method `myServo.attach(9)`
    ➌. It then tells the Arduino to move the servo to a position of 90 degrees via
    the method `myServo.write(90)` ➍. The Servo library converts the angle in degrees
    of rotation to the appropriate pulse width behind the scenes. This is built into
    the `write()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Now, plug the black wire of your servo into ground and upload your code to the
    Arduino, and the servo will rotate to 90 degrees. It’s safe for now to leave your
    servo wired up.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Although the servo’s full range of motion is 180 degrees, we recommend keeping
    the* *`write()`* *value between 10 and 170 degrees, especially for servos with
    plastic gears. Overextending a servo’s range can do irreparable damage.*'
  prefs: []
  type: TYPE_NORMAL
- en: To move the servo again, just pass another number within the bounds of the servo’s
    range of motion (10–170) to the `write()` method and upload the sketch again.
    Play with your servo for a bit, passing in different values.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, so you know how to get the servo to move just once. Now, here’s some code
    that really gets it moving. [Listing 6-2](ch06.xhtml#ch06ex02) moves the control
    of the servo into a loop and repeats a motion.
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 6-2:** Servo blink sketch'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This piece of code is a servo version of the blink sketch from [Project 1](ch01.xhtml#ch01).
    The servo moves to 10 degrees, waits for 1 second, moves to 170 degrees, waits
    for 1 second, and then repeats. We fondly refer to this as “robot march,” because
    when you have 20+ people doing it at once, it sounds like a robot army marching
    to take over the world.
  prefs: []
  type: TYPE_NORMAL
- en: Wow! You’re on a roll here. But servos really become interesting when you can
    control the servo yourself, without having to reprogram it each time. It’s time
    to get the potentiometer involved.
  prefs: []
  type: TYPE_NORMAL
- en: '**Complete the Balance Beam Sketch**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For the final sketch, you’ll program the potentiometer to control the rotation
    of the servo. Modify your sketch as shown in [Listing 6-3](ch06.xhtml#ch06ex03):'
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 6-3:** Using the `map()` function to control a servo with a potentiometer'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This sketch reads the value of the potentiometer, translates it into an angle
    value, and then writes that value to the servo. There are some new commands in
    here, so we’ll go over it step-by-step.
  prefs: []
  type: TYPE_NORMAL
- en: The top portion of this code looks just like the first two example listings.
    It includes the Servo library and creates a `Servo` object named `myServo`. It
    also declares two global variables ➊ named `potVal` and `anglePosition`. These
    variables will be used to store the raw value of the potentiometer and a calculated
    angle position for the servo, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: In the `loop()` function, the variable `potVal` stores the raw analog-to-digital
    converter value from the `analogRead(A0)` function. As you turn the knob on the
    potentiometer, the voltage on the wiper pin will vary between 0 V and 5 V. Remember
    that `analogRead()` will convert a voltage from 0 V to 5 V to a number between
    0 and 1,023\. However, the values 0 to 1,023 aren’t very useful for controlling
    the servo. As we mentioned before, the servo needs to stay between 10 and 170
    degrees.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thankfully, Arduino has a built-in `map()` function that allows you to take
    one range of numbers and find the equivalent value in a different range. The variable
    `anglePosition` stores an angle position that is calculated from `potVal` using
    the `map()` function ➋. The `map()` function uses five parameters: `map(input,
    fromLow, fromHigh, toLow, toHigh)`. In this example, it maps the value of `potVal`
    from the range of 0 to 1,023 to a new range of 10 to 170\. This is a really nifty
    function in Arduino that makes scaling and translating between value ranges super
    easy!'
  prefs: []
  type: TYPE_NORMAL
- en: The sketch also adds a short delay of 20 ms to give the servo enough time to
    move before it reads the potentiometer again. A 20 ms delay is the minimum delay
    that the servo needs. You may also recall that it’s the time period of the PWM
    signal that’s used to control the angle.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have this sketch updated, upload it to your Arduino. Now when you turn
    the potentiometer, the servo moves with it. Pretty sweet! Next you’ll take your
    newfound superpower and build a balancing game out of it.
  prefs: []
  type: TYPE_NORMAL
- en: '**BUILD THE BALANCE BEAM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With this cool way to control a servo, we thought it would be fun to create
    a desktop game. You’ll create a balance beam that you control using the potentiometer
    and servo. A ping-pong ball will roll on the balance beam, and your goal is to
    get the ball as close as possible to the ends of the beam without it falling off.
  prefs: []
  type: TYPE_NORMAL
- en: '**Cut Out the Parts**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Download the template provided at *[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*
    (shown in [Figure 6-16](ch06.xhtml#ch06fig16)), print it out, and then trace it
    onto your cardboard. We designed this project to fit on as small a piece of cardboard
    as we could.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-16:** Balance Beam frame template (not full size)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using a craft knife, cut all the solid lines along the perimeter of each shape,
    as well as the cut-out for the motor mount. Don’t score any of the pieces just
    yet; you’ll do that as you go along. Remember to exercise safety when cutting.
    Use a metal ruler and a sharp craft knife, as shown in [Figure 6-17](ch06.xhtml#ch06fig17),
    and take your time. Use a drill or a craft knife to make the six different holes
    in this design. If you’re using a drill, you’ll need a 1/4-inch drill bit for
    the screwdriver access hole, a 1/8-inch drill bit for the axle holes, and a 1/16-inch
    drill bit for the armature mount hole and the two motor mount holes.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-17:** Cutting out the frame pieces from the template'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you’ve finished cutting, you should have six pieces like those shown in
    [Figure 6-18](ch06.xhtml#ch06fig18).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-18:** All cardboard parts cut out'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Build the Beam**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Take the longest piece, which will be the actual beam, and carefully score the
    dotted line that runs along its length. This will allow you to curve the beam
    so that it cradles the ball. We designed the template so that the beam is 11 inches
    long, the length of a standard sheet of 8.5 × 11-inch paper.
  prefs: []
  type: TYPE_NORMAL
- en: Next, prepare the armature mount. This is a small trapezoidal piece about 2
    1/4 inches wide by 1 inch tall. You will use this piece to connect the servo motor
    to the beam. Score it and bend it into a right angle, as shown in [Figure 6-19](ch06.xhtml#ch06fig19).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-19:** Preparing the armature mount'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, cut down the drinking straw so that it’s 1 3/4 inches long, and glue it
    down along the center line of the beam, as shown in [Figure 6-20](ch06.xhtml#ch06fig20).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-20:** Gluing down the straw at the midpoint of the beam'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, glue down the half of the armature mount without the drilled hole. This
    goes just to the left of the drinking straw, as shown in [Figure 6-21](ch06.xhtml#ch06fig21);
    make sure the half with the hole is facing you when the straw is at the right.
    This is important so that it fits with the servo mounting arm.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-21:** Gluing the armature mount to the beam'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, bend the sides of the beam up to form a cradle that will hold the ball,
    as shown in [Figure 6-22](ch06.xhtml#ch06fig22).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-22:** Bending the sides of the beam to form a cradle'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Use the smaller trapezoidal pieces to secure the ends of the beam and hold the
    beam together to keep the shape of the cradle. We suggest using a hot glue gun
    so that the pieces are secure, like in [Figure 6-23](ch06.xhtml#ch06fig23).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-23:** Gluing the end pieces onto the beam'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, use the wire cutters to cut down the bamboo skewer to about 3 1/4 inches.
    We suggest using the blunt end of the skewer. Insert the bamboo skewer into the
    drinking straw to form the axle for the balance beam ([Figure 6-24](ch06.xhtml#ch06fig24)).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-24:** Positioning the cut bamboo skewer so that it sticks out evenly
    on both sides'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Build the Base and Attach the Servo**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now you’ll build the base of the balance beam. Score the sides of the base pieces,
    as shown in [Figure 6-25](ch06.xhtml#ch06fig25), so that you can bend them into
    shape.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-25:** Scoring the sides of the base pieces'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After scoring, bend the sides to form a U shape as shown in [Figure 6-26](ch06.xhtml#ch06fig26).
    Repeat this for both pieces.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-26:** Bending the sides'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Before gluing together the base, you’ll mount the servo motor. Remove the servo
    motor from the breadboard circuit. There is a small, square cutout in one of the
    templates that should match the submicro-sized servo perfectly. Insert the servo
    so that the motor is facing inward, as shown in [Figure 6-27](ch06.xhtml#ch06fig27).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-27:** Inserting the servo motor'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Your servo should have come with three small screws, one short and the other
    two longer. Use the two longer screws to secure the servo motor in place, like
    in [Figure 6-28](ch06.xhtml#ch06fig28). If you don’t have screws, you can also
    use a small amount of hot glue to secure the motor.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-28:** Securing the servo motor in place using the two longer screws'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, select a servo horn that’s about 0.5 inches long and single sided. Gently
    push this into place on the end of the servo motor, as shown in [Figure 6-29](ch06.xhtml#ch06fig29).
    Once you have it securely on the servo, orient the servo to 0 degrees. Gently
    rotate the servo counterclockwise with your fingers until it stops. You’ll hear
    the little gears inside the servo turn. Make sure that you move the servo slowly;
    the gears are often made of plastic and can break.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-29:** Attaching the single-sided servo horn'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With the servo horn rotated as far as it can go counterclockwise, remove the
    horn and reposition it so that it is pointed straight up, as shown in [Figure
    6-30](ch06.xhtml#ch06fig30). This will make it easier to connect the linkage to
    the beam.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-30:** Servo horn aligned at 0 degrees'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, secure the horn in place using the last small screw that comes with
    the servo to ensure that the horn does not accidentally pop out. The horn may
    turn as you tighten the screw. This is okay—it won’t damage anything, but you
    may want to hold the servo horn in place with your fingers when tightening the
    screw to keep the horn from rotating. If you lost the screw, it’s not a big deal;
    you can leave it out and just reattach the horn if it does slip out. If you have
    to reposition the servo arm, you’ll need to remove this screw, which is why we
    included a hole on the other side of the base template.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you need a linkage to connect the servo horn to the beam. To make this,
    you’ll shape a medium-size paper clip with a pair of needle-nose pliers. [Figure
    6-31](ch06.xhtml#ch06fig31) shows all the steps of this process.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-31:** The steps to cutting, bending, and shaping the servo linkage'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**1.** Use the pliers to straighten the paper clip out, leaving all but the
    small hook on one end.'
  prefs: []
  type: TYPE_NORMAL
- en: '**2.** Trim the paper clip down so that it is about 2 inches long from one
    end to the other.'
  prefs: []
  type: TYPE_NORMAL
- en: '**3.** Bend the straight end of the paper clip away from the hook at about
    1 1/2 inches from the hooked end.'
  prefs: []
  type: TYPE_NORMAL
- en: '**4.** Add the final bend to create another hook about 3/8 inches deep. When
    complete, the servo linkage should be about 1 1/2 inches long ([Figure 6-32](ch06.xhtml#ch06fig32)).
    This length is perfect given the geometry of our template. If you’re designing
    your own enclosure, you might have to play around with this length a bit to get
    the servo horn connected to the beam properly.'
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-32:** Final bend in the paper clip linkage'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Final Assembly**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now for the final assembly! First, glue together the two base pieces. Glue two
    of the square tabs together, starting with the side opposite the servo motor ([Figures
    6-33](ch06.xhtml#ch06fig33) and [6-34](ch06.xhtml#ch06fig34)). This will give
    you room to get your hands in there and connect the servo horn linkage.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-33:** The best way to adhere two pieces together is to use a snake
    or S-shaped pattern with the glue.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 6-34:** Secure the far side of the base first.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With the servo side open, take the original hooked end of the bent paper clip
    linkage and hook it through the last hole on the servo horn, as shown in [Figure
    6-35](ch06.xhtml#ch06fig35).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-35:** Hooking the paper clip through the last hole in the servo
    horn'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FOUR-BAR LINKAGES AND CONNECTING SERVOS TO DO COOL THINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The mechanism used to turn the rotational movement of the servo horn into the
    up-and-down movement of the balance beam is called a *four-bar linkage*. We designed
    this template so that the length of the linkage should be about 1 1/2 inches,
    and it assumes that the servo horn is 1/2 inch long. We used these measurements
    to calculate the movements of the servo and beam. If you’re picturing circles,
    arcs, pivot points, and a lot of crazy geometry, don’t worry: we’ve done all the
    hard stuff already. The following figure shows a four-bar linkage in action, with
    the linkage itself and the pivot of the beam highlighted.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/177fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Four-bar linkages are an amazing way of converting the rotation of an object
    (like the servo) into a different motion (like the up-and-down motion of the beam).
    Engineers and roboticists use these kinds of mechanisms and linkages all the time
    to make things move.
  prefs: []
  type: TYPE_NORMAL
- en: Hook the other end of the linkage through the hole in the armature mount, as
    shown in [Figure 6-36](ch06.xhtml#ch06fig36).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-36:** Hooking the other end of the paper clip linkage to the armature
    mount'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, insert the axle through one side of the base, carefully line up the second
    side, insert the axle through the matching hole, and glue the tabs at the other
    end of the base together ([Figures 6-37](ch06.xhtml#ch06fig37) and [6-38](ch06.xhtml#ch06fig38)).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-37:** Mounting the balance beam to the base'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 6-38:** Completed Balance Beam project'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, connect the servo motor back to the breadboard circuit ([Figure 6-39](ch06.xhtml#ch06fig39)).
    Power up your Arduino, and the servo motor should move into place. Turn the potentiometer
    and test to make sure that the linkage and the pivot points all move as expected.
    If they don’t, check that everything is still in place and nothing has fallen
    out.
  prefs: []
  type: TYPE_NORMAL
- en: As a final step, we suggest an extra rectangular base support piece. The base
    should measure about 2 × 3.75 inches. Insert this piece at the base of your enclosure
    to add extra support.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-39:** Reconnecting the servo motor to the breadboard circuit'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With that, your project is complete! Now, find a ping-pong ball or marble and
    test your skills of control and precision. You now have a game to play when you
    should be doing something a little more productive. How many times can you roll
    the ball back and forth before dropping it? Challenge a friend, and see who’s
    better!
  prefs: []
  type: TYPE_NORMAL
- en: '**GOING FURTHER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This project is a great introduction to the world of servos and libraries in
    Arduino. There’s a lot of potential here, so we would like to share some launching
    points for you to play with servos.
  prefs: []
  type: TYPE_NORMAL
- en: '**Hack**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Swap out the potentiometer with the light sensor circuit from [Project 5](ch05.xhtml#ch05).
    You’ll have to include a 10 kΩ resistor and adjust the scaling values you use.
    Now, move your hand up and down above the light sensor to control the ball. Go
    challenge a friend! Are you better with the light sensor or the potentiometer?
  prefs: []
  type: TYPE_NORMAL
- en: '**Modify**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can add an “autopilot” mode for your Balance Beam that will balance the
    ball on its own. To do this, you’re going to add a switch to your circuit. As
    you saw in [Project 5](ch05.xhtml#ch05), a switch is similar to a push button
    in that it makes or breaks a connection in a circuit, but in a switch the connection
    stays in place until it is switched again. The switch you’ll use is called a *single-pole,
    double-throw (SPDT)* switch, shown in [Figure 6-40](ch06.xhtml#ch06fig40). This
    is a fancy way of saying there’s a single common pin and two options that it can
    be connected to. When the switch is in the leftmost position, it connects the
    center pin and the left pin. When the switch is in the rightmost position, it
    connects the center pin and the right pin.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-40:** The single-pole, double-throw switch'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This switch, when wired correctly, will act as an on-off switch, allowing you
    to read whether it is set on 5 V or ground. Place the switch in the breadboard,
    making sure each leg gets its own row of holes. We placed ours at the top of the
    breadboard in [Figure 6-41](ch06.xhtml#ch06fig41). As with the potentiometer,
    connect the two outer pins of the switch to the 5 V and ground power rails of
    the breadboard using two shorter jumper wires. Use a third jumper wire to connect
    the center pin of the switch to pin 12 of the Arduino. A complete diagram of this
    circuit is shown in [Figure 6-41](ch06.xhtml#ch06fig41).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 6-41:** The final circuit with the mode selection switch'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/fig6_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The center pin is the signal pin and will read either `HIGH` or `LOW` depending
    on the position of the switch. You’ll use this paired with some basic logic to
    switch between manual control, which uses the potentiometer, and autopilot, which
    sets the servo to move back and forth on its own.
  prefs: []
  type: TYPE_NORMAL
- en: From the book’s resources at *[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*,
    upload the *P6_AutoBalanceBeam.ino* sketch to your Arduino. Take a look at the
    comments in the sketch to see how it works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that if the beam’s not centered when you switch autopilot on, the
    ball will likely fall off. It may take a few tries, but when you get it, it looks
    like magic! Take a look at a video of ours running here: *[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*.'
  prefs: []
  type: TYPE_NORMAL
