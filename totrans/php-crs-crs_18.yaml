- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 14 WORKING WITH SESSIONS
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 14 使用会话
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: This chapter introduces browser sessions, which allow a web client and server
    to remember user information over time. When browsing an online store, for example,
    you expect to be able to add items into a shopping cart and for those items to
    be remembered a few minutes later, or even across browser tabs. Similarly, if
    you enter a username and password to access a web-based email system, you expect
    your successful login to be remembered as you click through pages to display email,
    draft messages, and so on. Sessions make this kind of memory possible.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了浏览器会话，它使得 Web 客户端和服务器可以在一段时间内记住用户信息。例如，当浏览在线商店时，你期望能够将商品加入购物车，并且这些商品会在几分钟后，甚至跨浏览器标签页被记住。类似地，如果你输入用户名和密码访问基于
    Web 的电子邮件系统，你期望在点击浏览页面查看电子邮件、草稿等内容时，成功登录状态能够被记住。会话使得这种记忆成为可能。
- en: This chapter discusses how to work with browser sessions in PHP, including storing
    and retrieving values, and resetting or destroying sessions entirely. We’ll develop
    a general pattern for writing code that uses sessions, which will be applicable
    to most situations, such as shopping carts and login authentication.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了如何在 PHP 中使用浏览器会话，包括存储和检索值，以及重置或完全销毁会话。我们将开发一个通用的编写会话代码的模式，这个模式适用于大多数情况，例如购物车和登录认证。
- en: A Web Browser Session
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个 Web 浏览器会话
- en: A *browser session* is a temporary information exchange between a web client,
    such as a browser or phone app, and a web server. A session begins at a certain
    point in time and will terminate at a later point in time. Sessions often begin
    when a user directs their web browser to a new website; the browser and server
    agree on a unique session ID, and this ID will be used in the subsequent HTTP
    requests and responses exchanged between the client and server to indicate that
    they are all part of the same session. [Figure 14-1](#fig14-1) illustrates a web
    client making repeated requests by continuing to use the session ID created after
    its first request.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*浏览器会话* 是一个临时的信息交换过程，发生在 Web 客户端（如浏览器或手机应用）和 Web 服务器之间。会话从某一时刻开始，并将在稍后的某一时刻终止。会话通常在用户将浏览器指向一个新网站时开始；浏览器和服务器商定一个唯一的会话
    ID，并在后续的 HTTP 请求和响应中使用该 ID，以表明它们都是同一个会话的一部分。[图 14-1](#fig14-1) 展示了 Web 客户端通过继续使用首次请求后创建的会话
    ID 来发起重复请求。'
- en: '![](../images/figure14-1.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure14-1.jpg)'
- en: 'Figure 14-1: Repeated requests from a web client, each including the same session
    ID'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-1：Web 客户端的重复请求，每个请求都包含相同的会话 ID
- en: You can find the session IDs behind real-world web interactions by using your
    browser’s developer tools to examine HTTP requests. For example, [Figure 14-2](#fig14-2)
    shows the Amazon UK website agreeing on a session ID with my web browser.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用浏览器的开发者工具检查 HTTP 请求，查看现实世界 Web 交互背后的会话 ID。例如，[图 14-2](#fig14-2) 显示了 Amazon
    英国网站与我的 Web 浏览器商定会话 ID 的过程。
- en: '![](../images/figure14-2.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure14-2.jpg)'
- en: 'Figure 14-2: The Chrome browser tools showing a session ID from Amazon'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-2：Chrome 浏览器工具显示来自 Amazon 的会话 ID
- en: Both the server and the client need to keep a record of the agreed-upon session
    ID, since this unique token must be included in each HTTP request. This way, when
    the server receives an incoming request, it can immediately tell which session
    it belongs to out of the potentially thousands of sessions the server might be
    tracking. The server also uses the session ID to store and manage the data for
    each session, such as shopping carts, successful logins, and so on. PHP web servers
    automatically create these session IDs, and the PHP language provides several
    functions for working with sessions. Web clients usually use an HTTP cookie to
    temporarily store session IDs.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器和客户端都需要记录商定的会话 ID，因为这个唯一的令牌必须包含在每个 HTTP 请求中。这样，当服务器收到传入请求时，它可以立即识别该请求属于哪个会话，即使服务器可能正在跟踪成千上万的会话。服务器还使用会话
    ID 来存储和管理每个会话的数据，例如购物车、成功登录等。PHP 网络服务器会自动创建这些会话 ID，且 PHP 语言提供了多个用于处理会话的函数。Web
    客户端通常使用 HTTP cookie 临时存储会话 ID。
- en: Sessions can be ended in several ways, depending on the web server settings,
    the PHP code, and sometimes additional JavaScript code running on the web clients.
    Sessions are closed when the user quits the browser application. Sessions can
    also be terminated by PHP server code, such as when a user chooses to log out
    of their account. Some websites have JavaScript running in the web browser to
    detect when the user closes or navigates away from the website browsing tab, at
    which point the JavaScript sends a message to the server requesting that the session
    be ended.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 会话可以通过多种方式结束，具体取决于 Web 服务器设置、PHP 代码以及有时在 Web 客户端上运行的额外 JavaScript 代码。当用户退出浏览器应用程序时，会话将结束。会话也可以通过
    PHP 服务器代码终止，例如当用户选择退出账户时。一些网站在 Web 浏览器中运行 JavaScript 来检测用户何时关闭或离开浏览器标签页，这时 JavaScript
    会向服务器发送请求，要求结束会话。
- en: 'Sessions might also time out; the server can set a time limit that starts with
    the latest client request so that if no new request is received within the designated
    time period, the server will automatically terminate the session. Time-outs help
    keep sites secure: if a user walks away from their computer, the session can time
    out and prevent a nonauthorized person from continuing the authorized session.
    (Even with time-outs, though, logging out or quitting the browser *before* walking
    away from your computer is always a good idea.)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 会话也可能会超时；服务器可以设置一个时间限制，从最新的客户端请求开始计算，如果在指定时间内没有收到新的请求，服务器将自动终止会话。超时有助于保持站点的安全：如果用户离开电脑，会话可能会超时，从而防止未授权人员继续进行已授权的会话。（尽管有超时设置，但在离开电脑前注销或退出浏览器*始终是一个好主意*。）
- en: The session_start() and session_id() Functions
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: session_start() 和 session_id() 函数
- en: 'PHP provides the session_start() function, which starts a new session if none
    currently exists, or renews an existing session if a valid session ID is included
    in the received HTTP request. When renewing an existing session, the function
    restarts the time-out timer. Although you rarely need to know the unique session
    ID when writing PHP scripts, the language does provide a function to retrieve
    it: session_id().'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 提供了 session_start() 函数，如果当前没有会话，则启动一个新会话；如果收到的 HTTP 请求中包含有效的会话 ID，则更新现有会话。当更新现有会话时，函数会重新启动超时计时器。尽管在编写
    PHP 脚本时你很少需要知道唯一的会话 ID，但语言确实提供了一个函数来检索它：session_id()。
- en: Listing 14-1 shows a two-statement PHP script that first calls session _start()
    and then prints the value returned by session_id().
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 14-1 显示了一个包含两条语句的 PHP 脚本，该脚本首先调用 session _start()，然后打印 session_id() 返回的值。
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 14-1: Starting (or restarting) a session and printing its ID'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 14-1：启动（或重新启动）会话并打印其 ID
- en: If you run this script, the output will be a long string of letters and numbers
    similar to d98rqmn9amvtf3cqbpifv95bdd. This is the unique session ID generated
    by session_start() and retrieved by session_id().
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行这个脚本，输出将是一个由字母和数字组成的长字符串，类似于 d98rqmn9amvtf3cqbpifv95bdd。这是通过 session_start()
    生成的唯一会话 ID，并通过 session_id() 获取。
- en: NOTE
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*An alternative to using the* session_start() *function in your PHP code is
    to enable automatic session starting through a configuration setting for the PHP
    engine (*session.auto_start = 1 *in the* php.ini *file) or for the web server
    (*php_value session .auto_start 1 *in* .htaccess *for Apache web servers). However,
    when learning to use sessions or if your web hosting makes configuration changes
    difficult, the best approach is to use the* session_start() *function, as illustrated
    throughout this chapter.*  ### The $_SESSION Superglobal Array'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*在 PHP 代码中使用* session_start() *函数的替代方法是通过配置 PHP 引擎的设置启用自动启动会话（在* php.ini *文件中设置*
    session.auto_start = 1 *），或为 Web 服务器启用（在 Apache Web 服务器的* .htaccess *文件中设置* php_value
    session.auto_start 1 *）。然而，在学习使用会话时，或者当你的 Web 主机难以修改配置时，最佳做法是使用* session_start()
    *函数，正如本章中所示的那样。* ### $_SESSION 超全局数组'
- en: You don’t usually need to reference a specific session ID in your PHP code to
    work with sessions. Instead, you primarily work with session data through the
    built-in $_SESSION array. This is another of PHP’s *superglobals*, like $_GET
    and $_POST that we met in [Chapter 11](chapter11.xhtml).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通常你不需要在 PHP 代码中引用特定的会话 ID 来处理会话。相反，你主要通过内置的 $_SESSION 数组来处理会话数据。这是 PHP 的另一个*超全局变量*，就像我们在[第
    11 章](chapter11.xhtml)中遇到的 $_GET 和 $_POST 一样。
- en: The $_SESSION array holds data related to the current session using string keys.
    This array is automatically provided by the PHP engine when an HTTP request with
    a session ID is received from a client. It’s there so PHP web programmers have
    a variable for storing any values that need to be remembered for the current client’s
    session from one request to another.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: $_SESSION数组保存与当前会话相关的数据，使用字符串键。这是PHP引擎在接收到来自客户端的带有会话ID的HTTP请求时自动提供的。它的存在是为了让PHP网页程序员有一个变量，可以存储需要在当前客户端的会话中从一次请求到另一次请求记住的任何值。
- en: One way to understand this is to consider that a typical web server might be
    maintaining tens, hundreds, or thousands of $_SESSION arrays, one for each session
    with each of the clients currently communicating with the server. (Think of the
    thousands of people using eBay or Amazon at any given time.) When the server executes
    a PHP script for a particular client request that has been received (containing
    a unique session ID), the PHP engine retrieves data stored on the server associated
    with that session ID and puts it in the $_SESSION array for that copy of the script
    to work with. (Many copies of the script may be being executed at any point in
    time, one for each of the clients using the website.) This process allows that
    copy of the script to remember any values from previous client/server interactions
    during the session.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这一点的一种方法是考虑到，典型的网络服务器可能会维护数十、数百或数千个$_SESSION数组，每个数组对应一个与当前正在与服务器通信的客户端的会话。（想象一下，成千上万的人在任何时候都在使用eBay或Amazon。）当服务器执行一个PHP脚本来处理某个特定客户端请求时，该请求包含一个唯一的会话ID，PHP引擎会检索与该会话ID关联的存储在服务器上的数据，并将其放入$_SESSION数组中，以供该脚本的副本使用。（在任何时刻，可能会有多个脚本副本在执行，每个副本对应一个正在使用该网站的客户端。）这个过程使得脚本的副本可以记住在会话期间，客户端/服务器交互的任何值。
- en: To see how this all works, let’s write a script that attempts to both store
    and retrieve a value from the $_SESSION array. One common use of sessions is to
    store login authentication tokens, so we’ll work with the username of the currently
    logged-in user as an example. [Listing 14-2](#lis14-2) shows the code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解这一切是如何工作的，让我们编写一个脚本，尝试从$_SESSION数组中存储和检索一个值。会话的一个常见用途是存储登录验证令牌，因此我们将使用当前登录用户的用户名作为示例。[清单14-2](#lis14-2)显示了代码。
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 14-2: Attempting to retrieve, then store, a value in the $_SESSION
    array'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 清单14-2：尝试从$_SESSION数组中检索，然后存储一个值
- en: After (re)starting the session with session_start(), we store the default string
    value (no username found in session) in the $message variable. Then we use the
    isset() function to test whether any value can be found in the $_SESSION array
    under the 'username' key. If a value is found, we update $message with a new string
    including that value. Next, we store the value 'matt' into $_SESSION['username'].
    This will overwrite any existing value in the $_SESSION array for the 'username'
    key. Finally, we print out whatever string is stored in $message. [Figure 14-3](#fig14-3)
    shows the result of visiting this web page twice in a row.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用session_start()（重新）启动会话后，我们将默认字符串值（会话中未找到用户名）存储到$message变量中。然后，我们使用isset()函数测试在$_SESSION数组中的'username'键下是否能找到任何值。如果找到值，我们将$message更新为包含该值的新字符串。接下来，我们将值'matt'存储到$_SESSION['username']中。这将覆盖$_SESSION数组中'username'键的任何现有值。最后，我们输出存储在$message中的任何字符串。[图14-3](#fig14-3)显示了连续两次访问该网页的结果。
- en: '![](../images/figure14-3.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure14-3.jpg)'
- en: 'Figure 14-3: Retrieving the username from the session on the second request'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-3：在第二次请求中从会话中检索用户名
- en: The first time the page is visited, no value is found in the session for 'username'
    at the time the if statement is executed, so the default message is displayed.
    The second time the page is visited, however, the value 'matt' that was stored
    to the $_SESSION array the first time through the script is retrieved and displayed
    back. In this way, the session allows us to remember a value from one execution
    of the script to the next.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当页面首次访问时，在执行if语句时，找不到'session'中'username'的值，因此显示默认消息。然而，第二次访问页面时，第一次通过脚本存储到$_SESSION数组中的'matt'值会被检索并显示回来。通过这种方式，会话允许我们记住从一次脚本执行到下一次执行的值。
- en: Updating a Stored Value
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新存储的值
- en: 'One benefit of the $_SESSION array is that its values can be updated as needed.
    For example, if you were using the session to keep track of a user’s shopping
    cart, you’d need to make updates each time the user adds or removes an item. We’ll
    explore that exact scenario in [Chapter 15](chapter15.xhtml), but for now we’ll
    consider a simpler example of updating a value in the $_SESSION array: a hit counter
    that stores and displays the number of HTTP requests made to a website. When personal
    websites first became popular, having such a hit counter was common.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: $_SESSION数组的一个好处是它的值可以根据需要更新。例如，如果你使用会话来跟踪用户的购物车，那么每次用户添加或删除商品时，你都需要进行更新。我们将在[第15章](chapter15.xhtml)中详细探讨这个场景，但现在我们考虑一个更简单的例子：在$_SESSION数组中更新一个值——一个存储并显示访问网站次数的访问计数器。当个人网站首次流行时，拥有这样一个访问计数器是很常见的。
- en: 'A caveat here: in reality, sessions aren’t an appropriate mechanism for storing
    data from different website visitors or for storing values for time periods of
    more than seconds or minutes. As we’ve discussed, a separate set of data is stored
    for each user’s session, so a session-based hit counter can count only the number
    of website visits made by the *same user*. Also, sessions are terminated when
    the user quits the browser or the session times out, so visiting the site later
    in the day (or on another day) will mean the session-based hit counter will restart
    at 1, having “forgotten” the previous visits. Still, a session-based hit counter
    is a helpful project for introducing some of the core logic involved in session
    storage operations.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个警告：实际上，会话并不是存储不同网站访问者数据的合适机制，也不适用于存储超过秒或分钟的时间段的值。正如我们所讨论的，每个用户的会话都存储一组单独的数据，因此基于会话的访问计数器只能计算*同一用户*的访问次数。此外，当用户退出浏览器或会话超时时，会话会被终止，因此在一天稍晚的时候（或另一天）访问该站点时，基于会话的访问计数器会从1重新开始，"忘记"之前的访问记录。不过，基于会话的访问计数器对于介绍会话存储操作中涉及的一些核心逻辑是一个有用的项目。
- en: '[Figure 14-4](#fig14-4) illustrates the counter we’re aiming to create. The
    first time the page is visited, the counter is 1\. Then, with each page refresh,
    the previous total is remembered and incremented by one.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[图14-4](#fig14-4)展示了我们旨在创建的计数器。第一次访问页面时，计数器为1。然后，每次刷新页面时，之前的总数会被记住并增加1。'
- en: '![](../images/figure14-4.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure14-4.jpg)'
- en: 'Figure 14-4: A hit counter incrementing after each page refresh'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-4：页面刷新后，访问计数器的递增
- en: Listing 14-3 shows the *public/index.php* script needed to create the session-
    based hit counter.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 列表14-3展示了创建基于会话的访问计数器所需的*public/index.php*脚本。
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 14-3: Using a session variable to simulate a website hit counter'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 列表14-3：使用会话变量模拟网站访问计数器
- en: The first part of the script is HTML for a dummy favicon. Since modern browsers
    will send an extra request for a favicon image if one isn’t defined in the HTML
    received, adding this <link> element at the beginning of the script keeps the
    browser happy and prevents it from making twice as many requests, which would
    make the hit counter confusing.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的第一部分是一个虚拟的favicon的HTML代码。由于现代浏览器如果在接收到的HTML中没有定义favicon图像，会发送额外的请求，因此在脚本开头添加这个<link>元素可以保持浏览器的正常工作，防止它发送多余的请求，这样就能避免访问计数器变得混乱。
- en: This script hinges on the typical logic of first testing whether any value exists
    in the session before attempting to retrieve and update it. We use a local PHP
    variable called $pageHits to represent the number of page hits when the script
    is executed, while we use the 'counter' key to store the running total in the
    $_SESSION array. (The distinct names help avoid any confusion between these two
    values.)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本的逻辑基于首先测试会话中是否存在任何值，然后再尝试检索和更新它。我们使用一个名为$pageHits的本地PHP变量来表示脚本执行时的页面访问次数，同时我们使用'counter'键将运行总数存储在$_SESSION数组中。（不同的名称有助于避免这两个值之间的混淆。）
- en: After starting the session, we set $pageHits to a default value of 0 to represent
    the case when there’s no existing value stored in the session ❶. Next, we test
    whether any value can be found in the $_SESSION array under the 'counter' key
    ❷. If a value is found, we retrieve it from the array and store it in the $pageHits
    variable, overwriting the default value ❸.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动会话后，我们将$pageHits设置为默认值0，以表示会话中没有存储现有值的情况❶。接下来，我们测试在$_SESSION数组中的'counter'键下是否能找到任何值❷。如果找到值，我们从数组中检索它并存储到$pageHits变量中，覆盖默认值❸。
- en: 'At this point, whether or not a value is found in the $_SESSION array, we know
    we have an appropriate value in the $pageHits variable: either 0 or the running
    total of hits up to but not including the current page visit. In either case,
    we add 1 to $pageHits to account for the current visit to the page ❹. Then we
    store the updated value of $pageHits into the $_SESSION array under the ''counter''
    key, either overwriting the key’s existing value or creating it if this is the
    first page visit ❺. Finally, we output a message stating the number of times the
    page has been visited ❻.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，无论 $_SESSION 数组中是否找到值，我们都知道在 $pageHits 变量中有一个合适的值：要么是 0，要么是截至当前页面访问之前的访问总数。在这两种情况下，我们都将
    $pageHits 加 1，以计入当前访问页面 ❹。然后，我们将更新后的 $pageHits 值存储到 $_SESSION 数组中的 'counter' 键下，若是第一次访问该页面，则创建该键；若已经存在该键，则覆盖其值
    ❺。最后，我们输出一条消息，显示页面被访问的次数 ❻。
- en: The flowchart in [Figure 14-5](#fig14-5) illustrates the general logic behind
    our hit-counter script. You can correlate this flowchart with points ❶ through
    ❻ in [Listing 14-3](#lis14-3).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 14-5](#fig14-5)中的流程图展示了我们访问计数器脚本的基本逻辑。你可以将这个流程图与[清单 14-3](#lis14-3)中的 ❶
    到 ❻ 各个点进行关联。'
- en: '![](../images/figure14-5.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure14-5.jpg)'
- en: 'Figure 14-5: How to update (or set) a session variable'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-5：如何更新（或设置）会话变量
- en: The logic in the flowchart generalizes to just about any work you may need to
    do with session values. First, you set a variable to a default value in the local
    script. Then you check whether a previously stored value can be found in the $_SESSION
    array and use that to overwrite the default if appropriate. Next, you update the
    local variable and store the updated value back in the $_SESSION array. Usually,
    you’ll also want to do something with the updated variable. This approach works
    whether it’s the beginning of the session (meaning nothing is stored in the $_SESSION
    array) or the code is being executed upon the second, third, or *n*th request
    during the session (meaning a value is stored in the $_SESSION array from a previous
    run of the script).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 流程图中的逻辑可以概括为你可能需要做的任何与会话值相关的工作。首先，在本地脚本中将一个变量设置为默认值。然后，检查在 $_SESSION 数组中是否能找到先前存储的值，并在适当的情况下用它来覆盖默认值。接下来，更新本地变量并将更新后的值存储回
    $_SESSION 数组中。通常，你还需要对更新后的变量执行某些操作。无论是在会话开始时（即 $_SESSION 数组中没有存储任何内容），还是在会话期间第二次、第三次或
    *n* 次请求时执行代码（即从上次脚本运行中 $_SESSION 数组中存储了某个值），这种方法都能奏效。
- en: Unsetting a Value
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 取消设置一个值
- en: At times you’ll want to remove a particular value stored in the session. As
    we discussed in [Chapter 8](chapter8.xhtml), you can delete a value from an array
    by using the unset() function. This is different from setting an array element
    to something like NULL, an empty string, or 0, since unsetting an element removes
    *any* value associated with the string key. Using our hit-counter example, we
    would remove any session value associated with the 'counter' key by calling unset($_SESSION['counter']).
    We might do this, for example, if the page had a Reset button that cleared the
    hit counter.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能想要删除会话中存储的某个特定值。正如我们在[第 8 章](chapter8.xhtml)中讨论的那样，可以使用 unset() 函数从数组中删除一个值。这与将数组元素设置为
    NULL、空字符串或 0 不同，因为 unset 会移除与字符串键相关联的 *任何* 值。以我们的访问计数器示例为例，我们可以通过调用 unset($_SESSION['counter'])
    来删除与 'counter' 键相关联的任何会话值。例如，如果页面有一个重置按钮，用来清除访问计数器，我们可能会这样做。
- en: Let’s implement such a Reset button now, as well as add a link to revisit the
    hit-counter page (and therefore increment the counter). [Figure 14-6](#fig14-6)
    shows the page we’ll try to create.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们实现一个重置按钮，并添加一个链接，以重新访问访问计数器页面（从而增加计数）。[图 14-6](#fig14-6)展示了我们尝试创建的页面。
- en: '![](../images/figure14-6.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure14-6.jpg)'
- en: 'Figure 14-6: The hit-counter page with revisit and reset links'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-6：具有重新访问和重置链接的访问计数器页面
- en: To add this functionality, update your *index.php* script to match [Listing
    14-4](#lis14-4).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加这个功能，请更新你的 *index.php* 脚本，使其与[清单 14-4](#lis14-4)匹配。
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 14-4: Adding a reset link to the hit counter'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 14-4：向访问计数器添加重置链接
- en: After (re)starting the session, we retrieve and test the value of the 'action'
    query-string variable. If its value is 'reset', we unset the 'counter' element
    in the $_SESSION array ❶. Then the script proceeds as before. In the event that
    the user has clicked the Reset button and the 'counter' element was unset, it
    will be as if this element never existed, so the isset() test ❷ will fail and
    the 'counter' element will end up with a fresh value of 1 (after the default value
    of 0 is incremented).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在（重新）启动会话后，我们检索并测试'action'查询字符串变量的值。如果其值为'reset'，我们将取消设置$_SESSION数组中的'counter'元素❶。然后脚本继续按之前的方式执行。如果用户点击了重置按钮并且'counter'元素被取消设置，那么就好像这个元素从未存在过一样，因此isset()测试❷将失败，'counter'元素将获得一个新的值1（在默认值0被增加之后）。
- en: At the end of the file, we add two links. The first is simply to revisit *index.php*
    (and so increment the counter). The second link is also to *index.php* but includes
    an 'action' query-string variable with a value of 'reset', which will trigger
    the script to reset the counter ❸.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件的末尾，我们添加了两个链接。第一个链接只是为了重新访问*index.php*（从而增加计数器）。第二个链接也是指向*index.php*，但是包含了一个'action'查询字符串变量，值为'reset'，这将触发脚本重置计数器❸。
- en: Destroying the Session and Emptying the Session Array
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 销毁会话并清空会话数组
- en: 'Sometimes you might want to destroy the entire session and so invalidate the
    session ID and delete all stored session data. The deletion may be a security
    requirement, for example, since destroying a session should result in the server
    session data being *immediately* destroyed rather than waiting for a garbage-collection
    process (such as after a session time-out). That said, completely destroying a
    session is generally not recommended, since it may interfere with ongoing concurrent
    requests, such as asynchronous JavaScript. If all you want to do is clear the
    $_SESSION array, you can do so without entirely killing the session: use unset($_SESSION)
    or $_SESSION = [] to turn $_SESSION into an empty array.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能希望销毁整个会话，从而使会话ID失效并删除所有存储的会话数据。删除可能是出于安全要求，例如，因为销毁会话应当导致服务器会话数据*立即*销毁，而不是等待垃圾收集过程（例如，在会话超时之后）。不过，完全销毁会话通常不推荐，因为它可能会干扰正在进行的并发请求，例如异步JavaScript。如果你只想清空$_SESSION数组，你可以在不完全销毁会话的情况下做到这一点：使用unset($_SESSION)或$_SESSION
    = []将$_SESSION变成一个空数组。
- en: 'If you *do* need to completely destroy a session, take these steps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你*确实*需要完全销毁会话，请按照以下步骤操作：
- en: 1.   (Re)start the session with session_start().
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 1.   （重新）启动会话，使用session_start()。
- en: 2.   Set the $_SESSION array to an empty array.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 2.   将$_SESSION数组设置为空数组。
- en: 3.   If using cookies, invalidate (time out) the session cookie.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 3.   如果使用cookies，使会话cookie失效（超时）。
- en: 4.   Destroy the PHP session by executing the session_destroy() function.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 4.   通过执行session_destroy()函数销毁PHP会话。
- en: See the PHP documentation at *[https://www.php.net/manual/en/function.session-destroy.php](https://www.php.net/manual/en/function.session-destroy.php)*
    for more information about this process.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 查看关于此过程的更多信息，请参阅* [https://www.php.net/manual/en/function.session-destroy.php](https://www.php.net/manual/en/function.session-destroy.php)
    *上的PHP文档。
- en: Next, let’s add a link for killing the session to our hit-counter page. [Figure
    14-7](#fig14-7) shows the page with the added link, which passes the action=kill
    query-string variable when the user wants to completely destroy the session.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们在点击计数器页面上添加一个销毁会话的链接。[图14-7](#fig14-7)显示了添加了该链接的页面，当用户希望完全销毁会话时，它会传递action=kill查询字符串变量。
- en: '![](../images/figure14-7.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/figure14-7.jpg)'
- en: 'Figure 14-7: The hit-counter page with a new link to kill the session'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-7：带有新链接以销毁会话的点击计数器页面
- en: To keep our *index.php* file from getting too complex, we’ll encapsulate the
    code to kill the session in a separate function. [Listing 14-5](#lis14-5) shows
    the code for this killSession() function; it implements steps 2 through 4 of the
    session-killing process outlined previously (step 1 happens at the beginning of
    the *index.php* file). Add a *src/usefulFunctions.php* file to your hit-counter
    project and enter the code in the listing.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免我们的*index.php*文件过于复杂，我们将销毁会话的代码封装到一个单独的函数中。[列表14-5](#lis14-5)显示了killSession()函数的代码；它实现了之前概述的会话销毁过程中的步骤2到4（步骤1发生在*index.php*文件的开始）。将*src/usefulFunctions.php*文件添加到你的点击计数器项目中，并输入列表中的代码。
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 14-5: A function for killing a session'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 列表14-5：销毁会话的函数
- en: 'The function starts by setting $_SESSION to an empty array (step 2) and ends
    by calling session_destroy() (step 4). In between, the if statement implements
    step 3 of the session-killing process: invalidating the session cookie. For this,
    we check whether cookies are in use, then change the cookie with the current session
    name to an empty string, also setting an expiring time that’s in the past (time()
    - 42000), effectively deleting the cookie.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数首先将 $_SESSION 设置为空数组（步骤 2），最后通过调用 session_destroy() 结束（步骤 4）。在这之间，if 语句实现了会话销毁过程的步骤
    3：使会话 cookie 无效。为此，我们检查是否正在使用 cookies，然后将当前会话名称的 cookie 改为空字符串，并设置一个过期时间（time()
    - 42000），有效地删除该 cookie。
- en: With the killSession() function declared, update the *public/index.php* script
    as shown in [Listing 14-6](#lis14-6) in order to offer a kill-session link to
    the hit- counter page.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明了 killSession() 函数后，如 [示例 14-6](#lis14-6) 所示，更新 *public/index.php* 脚本，以便在访问计数页面上提供一个销毁会话的链接。
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 14-6: Adding a kill-session link to the hit-counter page'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 14-6：在访问计数页面上添加一个销毁会话的链接
- en: 'First, we read in the declaration of the killSession() function from its source
    file. Then, since we need to check for multiple values of the ''action'' query-string
    variable, we use a switch statement ❶ to decide how to process the incoming HTTP
    request. If the action is ''reset'', we unset the ''counter'' key of the $_SESSION
    array as before, or if the action is ''kill'', we invoke killSession(). In the
    HTML at the end of the script, we add a kill-session link that passes the action=kill
    query-string variable to *index.php*. We also add a line displaying the current
    session ID to prove that the session is indeed being destroyed ❷; if you click
    the kill-session link, this field should come up blank, in addition to the hit
    counter resetting to 1.  ### Summary'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '首先，我们从源文件中读取 killSession() 函数的声明。然后，由于我们需要检查多个 ''action'' 查询字符串变量的值，我们使用 switch
    语句 ❶ 来决定如何处理传入的 HTTP 请求。如果 action 为 ''reset''，我们像之前一样取消设置 $_SESSION 数组中的 ''counter''
    键；如果 action 为 ''kill''，我们调用 killSession()。在脚本末尾的 HTML 中，我们添加了一个销毁会话的链接，传递 action=kill
    查询字符串变量到 *index.php*。我们还添加了一行显示当前会话 ID 的代码，以证明会话确实被销毁 ❷；如果点击销毁会话链接，这个字段应该为空，访问计数器也会重置为
    1。  '
- en: This chapter introduced you to sessions, which provide a mechanism for a web
    server to remember information about a user across multiple HTTP requests. You
    learned how to start a session with session_start(), how to store and update values
    in the $_SESSION superglobal array, and how to clear values from this array or
    destroy a session entirely. We outlined a basic pattern for working with session
    data, whereby you first set a default value, then overwrite this default with
    a value from the $_SESSION array (if one exists) before updating the value and
    storing it back in the array.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向你介绍了会话，它为 Web 服务器提供了一种在多个 HTTP 请求中记住用户信息的机制。你学习了如何使用 session_start() 启动会话，如何在
    $_SESSION 超全局数组中存储和更新值，以及如何清除该数组中的值或完全销毁会话。我们概述了处理会话数据的基本模式：首先设置一个默认值，然后用 $_SESSION
    数组中的值（如果存在）覆盖该默认值，最后更新该值并将其存储回数组中。
- en: Exercises
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习
- en: 1.   Visit a website where you think sessions are being used, such as an e-commerce
    website with a shopping cart feature or a site with a login page. Use your browser
    developer tools to find the session ID that has been agreed upon by the server
    and client and is being stored as a cookie on your client device.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 1. 访问一个你认为正在使用会话的网站，例如带有购物车功能的电子商务网站或具有登录页面的网站。使用浏览器的开发者工具找到服务器和客户端约定的会话 ID，并将其作为
    cookie 存储在客户端设备上。
- en: 2.   Write a PHP script that looks in the $_SESSION array for a value with the
    key 'guess'. If it isn’t found, store 0 for this key and display a message to
    the user stating no previous value was found. If a value *is* found in the session,
    add a random number from 1 to 10 to that value. Store the result back in the $_SESSION
    array and display it to the user.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 2. 编写一个 PHP 脚本，在 $_SESSION 数组中查找键为 'guess' 的值。如果找不到，存储 0 为该键，并向用户显示一条消息，说明没有找到先前的值。如果会话中找到了值，则将
    1 到 10 之间的随机数加到该值上。将结果重新存储回 $_SESSION 数组并显示给用户。
- en: 3.   Write a script to display a form that has a text box in which the user
    can enter a number, along with two Submit buttons. One Submit button should take
    the value from the text box and store it in the session. The second button should
    simply display the current value stored in the session, or a message stating no
    value was found in the session, as appropriate.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 3. 编写一个脚本，显示一个表单，其中包含一个文本框，用户可以在其中输入数字，并带有两个提交按钮。一个提交按钮应将文本框中的值存储在会话中。第二个按钮应简单地显示当前存储在会话中的值，或者在没有找到值时显示一条消息，具体视情况而定。
