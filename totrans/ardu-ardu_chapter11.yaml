- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">11</samp> <samp class="SANS_Dogma_OT_Bold_B_11">EMULATING
    USB MICE AND KEYBOARDS WITH THE LEONARDO</samp>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../images/opener-img.png)'
  prefs: []
  type: TYPE_IMG
- en: This chapter shows you how to convert information gathered by the Arduino into
    keypresses or mouse movements and then send them to a computer to simulate typing
    on a USB keyboard or to simulate manipulating an external mouse. To do so, you’ll
    use the Arduino Leonardo development board, which has a few subtle differences
    from the usual Uno or compatible board.
  prefs: []
  type: TYPE_NORMAL
- en: Along with a micro-USB connector and a complete surface-mount design for all
    the main components, the Leonardo uses Microchip Technology’s ATmega32U4 microcontroller.
    This microcontroller has built-in USB communication, so the board doesn’t need
    a USB interface chip, which allows the Leonardo to appear as a mouse or keyboard
    to a connected computer. You might use this keyboard emulation technique to build
    your own game controller, shortcut keyboard, rapid data capture and entry systems,
    input devices for the differently abled, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you’ll learn to:'
  prefs: []
  type: TYPE_NORMAL
- en: Emulate keypresses and typing on USB keyboards, as well as USB mouse movement
    and button control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a USB data logger that writes directly to a spreadsheet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a keypad to make a keyboard of shortcuts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">USB Keyboards</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To emulate a keyboard with the Leonardo (shown in [Figure 11-1](chapter11.xhtml#fig11-1)),
    you don’t need any extra hardware apart from a USB cable long enough to reach
    between your board and the host PC. If you’re ordering a longer cable, don’t forget
    that you need a USB-A-to-micro-USB cable.
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO OF AN ARDUINO LEONARDO BOARD](../images/fig11-1.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-1: An Arduino Leonardo
    development board</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can activate keyboard emulation by including the Arduino Keyboard library,
    using the following two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To have the Leonardo send keypresses to the computer to mimic a user typing
    on a USB keyboard, use the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'These functions operate in a similar manner to <samp class="SANS_TheSansMonoCd_W5Regular_11">Serial.print()</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Serial.println()</samp>: the
    former sends the text to be “typed out” as keypresses, and the latter sends the
    same out and adds a return (or pressing RETURN or ENTER) to a new line. Using
    these two functions, you can send out any text that can generally be sent via
    your usual USB keyboard.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To stop emulating a USB keyboard, use the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This function is necessary only when you expect a user to continue using the
    PC via the normal keyboard while the Leonardo is still connected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try this. First, connect your Arduino Leonardo to your computer. If this
    is the first time you’ve used the Leonardo, your PC may take a few moments to
    automatically install the required USB drivers. Next, open the Arduino IDE and
    change the board type to Arduino Leonardo using the drop-down menu shown in [Figure
    11-2](chapter11.xhtml#fig11-2) (note that your COM: port may be different from
    the one in the figure).'
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF AN ARDUINO IDE WITH THE LEONARDO BOARD TYPE SELECTED](../images/fig11-2.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-2: Selecting the
    Leonardo in the IDE</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Always ensure that the board type is set to Leonardo when working with sketches
    that use the Keyboard library; otherwise, they will not compile if you’re testing
    for errors.
  prefs: []
  type: TYPE_NORMAL
- en: If you have other software open on your PC, close it or ensure its windows are
    not active while you’re experimenting with keyboard and mouse emulation. Otherwise,
    the “keypresses” being sent by the Leonardo may interfere with the other software.
    For example, before uploading the following sketch on my own machine, the only
    software I had open was the Arduino IDE and Notepad.
  prefs: []
  type: TYPE_NORMAL
- en: Now enter and upload the sketch for [Listing 11-1](#LiT-11-1); then immediately
    switch over to a simple text editor such as Notepad.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 11-1: USB keyboard
    emulation</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Once uploaded, the Leonardo should type “Hello, world.” every second or so,
    as shown in [Figure 11-3](chapter11.xhtml#fig11-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF AN EXAMPLE OUTPUT FROM LISTING 11-1](../images/fig11-3.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-3: Example output
    from [Listing 11-1](#LiT-11-1)</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: First, the sketch includes the Keyboard library. The five-second delay gives
    the user some time to get the PC ready for input from the Arduino. The Keyboard
    library is then initialized. The sketch then sends some text without a new line
    ❶ and then some more text along with a new line ❷.
  prefs: []
  type: TYPE_NORMAL
- en: When you’ve finished using the Leonardo for any USB keyboard or mouse emulation
    project, upload a simple sketch such as the IDE example *blink* so that your Leonardo
    won’t try to take over the controls the next time you connect it to a PC. If you’re
    having trouble taking control of the computer when uploading a new sketch, you
    can use the CTRL-U keyboard shortcut to upload a sketch.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Emulating Keyboard
    Modifiers and Special Keys</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to creating keypresses for letters, numbers, and symbols, you can
    emulate buttons such as cursor keys, TAB, function keys, and so on, using a few
    more functions.
  prefs: []
  type: TYPE_NORMAL
- en: To send a single button press (that is, to press the button and then release
    it), use
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: where <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">x</samp> is the
    ASCII code for the letter, number, or symbol key to press, or the code for special
    modifier keys, listed in [Table 11-1](chapter11.xhtml#tab11-1).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 11-1:</samp> <samp class="SANS_Futura_Std_Book_11">Modifier
    Keys and Their Codes</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Modifier key</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Code</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Modifier key</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Code</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_LEFT_CTRL</samp> | <samp class="SANS_Futura_Std_Book_11">128</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F1</samp> | <samp class="SANS_Futura_Std_Book_11">194</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_LEFT_SHIFT</samp> | <samp class="SANS_Futura_Std_Book_11">129</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F2</samp> | <samp class="SANS_Futura_Std_Book_11">195</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_LEFT_ALT</samp> | <samp class="SANS_Futura_Std_Book_11">130</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F3</samp> | <samp class="SANS_Futura_Std_Book_11">196</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_LEFT_GUI</samp> | <samp class="SANS_Futura_Std_Book_11">131</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F4</samp> | <samp class="SANS_Futura_Std_Book_11">197</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_RIGHT_CTRL</samp> | <samp class="SANS_Futura_Std_Book_11">132</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F5</samp> | <samp class="SANS_Futura_Std_Book_11">198</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_RIGHT_SHIFT</samp> | <samp class="SANS_Futura_Std_Book_11">133</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F6</samp> | <samp class="SANS_Futura_Std_Book_11">199</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_RIGHT_ALT</samp> | <samp class="SANS_Futura_Std_Book_11">134</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F7</samp> | <samp class="SANS_Futura_Std_Book_11">200</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_RIGHT_GUI</samp> | <samp class="SANS_Futura_Std_Book_11">135</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F8</samp> | <samp class="SANS_Futura_Std_Book_11">201</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_UP_ARROW</samp> | <samp class="SANS_Futura_Std_Book_11">218</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F9</samp> | <samp class="SANS_Futura_Std_Book_11">202</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_DOWN_ARROW</samp> | <samp class="SANS_Futura_Std_Book_11">217</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F10</samp> | <samp class="SANS_Futura_Std_Book_11">203</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_LEFT_ARROW</samp> | <samp class="SANS_Futura_Std_Book_11">216</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F11</samp> | <samp class="SANS_Futura_Std_Book_11">204</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_RIGHT_ARROW</samp> | <samp class="SANS_Futura_Std_Book_11">215</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F12</samp> | <samp class="SANS_Futura_Std_Book_11">205</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_BACKSPACE</samp> | <samp class="SANS_Futura_Std_Book_11">178</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F13</samp> | <samp class="SANS_Futura_Std_Book_11">240</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_TAB</samp> | <samp class="SANS_Futura_Std_Book_11">179</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F14</samp> | <samp class="SANS_Futura_Std_Book_11">241</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_RETURN</samp> | <samp class="SANS_Futura_Std_Book_11">176</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F15</samp> | <samp class="SANS_Futura_Std_Book_11">242</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_ESC</samp> | <samp class="SANS_Futura_Std_Book_11">177</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F16</samp> | <samp class="SANS_Futura_Std_Book_11">243</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_INSERT</samp> | <samp class="SANS_Futura_Std_Book_11">209</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F17</samp> | <samp class="SANS_Futura_Std_Book_11">244</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_DELETE</samp> | <samp class="SANS_Futura_Std_Book_11">212</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F18</samp> | <samp class="SANS_Futura_Std_Book_11">245</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_PAGE_UP</samp> | <samp class="SANS_Futura_Std_Book_11">211</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F19</samp> | <samp class="SANS_Futura_Std_Book_11">246</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_PAGE_DOWN</samp> | <samp class="SANS_Futura_Std_Book_11">214</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F20</samp> | <samp class="SANS_Futura_Std_Book_11">247</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_HOME</samp> | <samp class="SANS_Futura_Std_Book_11">210</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F21</samp> | <samp class="SANS_Futura_Std_Book_11">248</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_END</samp> | <samp class="SANS_Futura_Std_Book_11">213</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F22</samp> | <samp class="SANS_Futura_Std_Book_11">249</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_CAPS_LOCK</samp> | <samp class="SANS_Futura_Std_Book_11">193</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F23</samp> | <samp class="SANS_Futura_Std_Book_11">250</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '|  |  | <samp class="SANS_Futura_Std_Book_11">KEY_F24</samp> | <samp class="SANS_Futura_Std_Book_11">251</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: In addition to the modifiers listed in the table, you can review the complete
    list of ASCII codes including those for letters, numbers, and symbols, at [*https://<wbr>www<wbr>.asciitable<wbr>.com<wbr>/*](https://www.asciitable.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'To simplify things, you can define the required codes to matching descriptions
    for the keys you want to emulate. For example, CAPS LOCK is 193, so add the following
    at the start of the sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To press CAPS LOCK using the Leonardo, you’d use the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: To test this, you can use the sketch in [Listing 11-2](#LiT-11-2), which presses
    CAPS LOCK every second.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 11-2: Blinking</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">CAPS LOCK</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">every
    second</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: This sketch tells the host PC that CAPS LOCK has been pressed ❶, which will
    be reflected on a USB keyboard connected to the PC. (If, at this point, you are
    considering making some mischief on a friend’s computer, do so at your own risk!)
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Pressing and Releasing
    One or More Keys</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also emulate pressing down a button on the keyboard and then releasing
    it after a set period. To do this, use
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'to hold down the button whose modifier or ASCII code is <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">x</samp>.
    Then, to release that button, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You can test this using [Listing 11-3](#LiT-11-3).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 11-3: Testing press
    and release</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: This sketch demonstrates pressing and holding down the Z key ❶, waiting a moment,
    and then letting go of the key ❷. [Figure 11-4](chapter11.xhtml#fig11-4) shows
    the results of the sketch. As you can see, the first two lines of text printed
    to the screen are shorter than the last two lines, since there is a slight difference
    in keyboard response time depending on the operating speed of the host PC.
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF AN EXAMPLE OUTPUT FROM LISTING 11-3](../images/fig11-4.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-4: Example output
    from [Listing 11-3](#LiT-11-3)</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you can program your Leonardo to press several keys at once and then
    release them one at a time or all at once using multiple <samp class="SANS_TheSansMonoCd_W5Regular_11">Keyboard.press()</samp>
    functions. This allows you to emulate useful multiple-keypress shortcuts used
    by your PC’s operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can sign out of a Windows PC by pressing CTRL-ALT-DELETE and
    then ALT-S. The following functions will press the left CTRL, left ALT, and DELETE
    buttons simultaneously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then release them all by using this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You can also let go of individual buttons and keep others pressed by using <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Keyboard.release(</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">x</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">)</samp>, where <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">x</samp>
    is the requisite modifier or ASCII code.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll put all this to work in the next project by logging data from the Leonardo
    directly to a PC.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #32: Logging Data with USB
    Keyboard Emulation</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: One exceptionally useful benefit of keyboard emulation is the ability to log
    data from a Leonardo directly to a PC. For this project, you’ll log temperature
    and air pressure data from the BMP180 sensor used in [Chapter 10](chapter10.xhtml)
    directly into a spreadsheet. If you can dedicate a PC for data logging—for example,
    in a laboratory or your office—this is a rapid, inexpensive method of data capture.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll need the following parts for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: An Arduino Leonardo or compatible board and USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A BMP180 temperature and air pressure sensor board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A solderless breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assemble the circuit as shown in [Figure 11-5](chapter11.xhtml#fig11-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![THE SCHEMATIC FOR PROJECT #32](../images/fig11-5.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-5: The schematic
    for Project #32</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, open your preferred spreadsheet, such as Microsoft Excel or
    Google Sheets. Switch back to the Arduino IDE and upload the Project #32 sketch.
    Then quickly switch back to the spreadsheet software, click the top-left cell,
    and wait. Ten seconds after you’ve reset the Leonardo, the date, time, temperature,
    and air pressure in pascals should be “typed” into the cells, as shown in [Figure
    11-6](chapter11.xhtml#fig11-6).'
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF EXAMPLE OUTPUT DATA FOR PROJECT #32 IN AN EXCEL SPREADSHEET](../images/fig11-6.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-6: Example output
    data for Project #32 in an Excel spreadsheet</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Once logging has started, you might disconnect the mouse and keyboard from the
    PC so others can’t interrupt the proceedings. Furthermore, by using a cloud-based
    tool such as Google Sheets, you can monitor and review the results in real time
    from any web-enabled device in the world, as shown in [Figure 11-7](chapter11.xhtml#fig11-7).
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF EXAMPLE OUTPUT DATA FOR PROJECT #32 IN GOOGLE WORKSPACE SHEETS](../images/fig11-7.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-7: Example results
    in Google Sheets</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The sketch first initializes the sensor and the Keyboard library ❶. The custom
    function ❷ emulates pressing CTRL-+, a shortcut used in many spreadsheets to insert
    the date into the current cell. There is a small delay before releasing the keys.
    The next custom function ❸ emulates pressing CTRL-SHIFT-+, the shortcut to insert
    the time into the current cell. This is followed by functions that press TAB and
    ENTER, for the sake of convenience, to save you using the raw commands.
  prefs: []
  type: TYPE_NORMAL
- en: The keyboard controls are based on those for a Windows-based computer. If you’re
    using macOS or another operating system, you may need to change the required keys
    for moving the cursor around the screen or the shortcuts in the spreadsheet software.
  prefs: []
  type: TYPE_NORMAL
- en: The usual initialization takes place in <samp class="SANS_TheSansMonoCd_W5Regular_11">void
    setup()</samp>, plus a long delay ❹, which gives the user enough time to navigate
    the cursor to the starting cell in the spreadsheet before the Leonardo starts
    typing. Finally, in <samp class="SANS_TheSansMonoCd_W5Regular_11">void loop()</samp>,
    the date, time, temperature, and air pressure are “typed” into the spreadsheet
    using the required combination of keys, followed by a delay before the next sample
    is logged.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have a solid understanding of keyboard emulation, let’s build
    another tool you can use on a regular basis: the shortcut keyboard.'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #33: Building a USB Shortcut
    Keyboard</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Those who work or play with a PC daily will, over time, need to type various
    things repeatedly, such as passwords, keyboard shortcuts, or commonly used lines
    of text. With an Arduino Leonardo and the 12-button keypad described in Project
    #3 in [Chapter 1](chapter1.xhtml), you can build a handy shortcut keyboard with
    12 different options.'
  prefs: []
  type: TYPE_NORMAL
- en: For the purposes of demonstration, the project will have a variety of examples
    assigned to the keypad. However, apart from useful text, you can research shortcuts
    for your PC’s operating system or favorite software and then create your own.
    [Table 11-2](chapter11.xhtml#tab11-2) lists a variety of keyboard and typing shortcuts.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 11-2:</samp> <samp class="SANS_Futura_Std_Book_11">Example
    Shortcuts</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Button</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Shortcut</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Required emulation presses</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">1</samp> | <samp class="SANS_Futura_Std_Book_11">Enter
    PIN 456700.</samp> | <samp class="SANS_Futura_Std_Book_11">456700</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">2</samp> | <samp class="SANS_Futura_Std_Book_11">Lock
    the screen in Windows 11.</samp> | <samp class="SANS_Futura_Std_Book_11">CTRL-ALT-DEL,
    then ENTER</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">3</samp> | <samp class="SANS_Futura_Std_Book_11">Display
    Windows Task Manager.</samp> | <samp class="SANS_Futura_Std_Book_11">CTRL-ESC-SHIFT</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">Print
    to default printer.</samp> | <samp class="SANS_Futura_Std_Book_11">CTRL-P, then
    ENTER</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">5</samp> | <samp class="SANS_Futura_Std_Book_11">Switch
    between apps.</samp> | <samp class="SANS_Futura_Std_Book_11">ALT-TAB</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">Save
    open pages as bookmarks in the Edge browser.</samp> | <samp class="SANS_Futura_Std_Book_11">CTRL-SHIFT-D</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">7</samp> | <samp class="SANS_Futura_Std_Book_11">Switch
    to Page Layout view in Excel.</samp> | <samp class="SANS_Futura_Std_Book_11">ALT</samp><samp
    class="SANS_Futura_Std_Book_11">-W, then P</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">Switch
    to Normal Layout view in Excel.</samp> | <samp class="SANS_Futura_Std_Book_11">ALT-W,
    then L</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">9</samp> | <samp class="SANS_Futura_Std_Book_11">You
    can contact me via email at … or telephone … after 3 PM</samp> | <samp class="SANS_Futura_Std_Book_11">Typed
    text</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">10</samp> | <samp class="SANS_Futura_Std_Book_11">We
    cannot solve your problem via social media. Please email … for technical support.</samp>
    | <samp class="SANS_Futura_Std_Book_11">Typed text</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">11</samp> | <samp class="SANS_Futura_Std_Book_11">Thank
    you for your email. I will reply in more detail once I can locate the required
    information.</samp> | <samp class="SANS_Futura_Std_Book_11">Typed text</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">12</samp> | <samp class="SANS_Futura_Std_Book_11">Without
    examining the product in person, we can’t determine the fault. Please post it
    to …</samp> | <samp class="SANS_Futura_Std_Book_11">Typed text</samp> |'
  prefs: []
  type: TYPE_TB
- en: 'You’ll need the following parts for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: An Arduino Leonardo or compatible board and USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Keypad hardware as described in Project #3 in [Chapter 1](chapter1.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Assembly is the same as in Project #3, substituting an Arduino Leonardo for
    an Uno, as shown in [Figure 11-8](chapter11.xhtml#fig11-8). You may want to check
    the ADC values reported by each keypad button by using the sketch from Project
    #1 and then updating the ranges in our analogkeypad library.'
  prefs: []
  type: TYPE_NORMAL
- en: '![THE SCHEMATIC FOR PROJECT #33](../images/fig11-8.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-8: The schematic
    for Project #33</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now enter and upload the following sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The sketch takes advantage of the analogkeypad library for the hardware and
    the Keyboard library to emulate the USB keyboard. These libraries are included
    ❶ and then initialized ❷. The sketch then loops while it waits for a button press,
    which is actioned at ❸. After that, it’s a simple matter of monitoring the keypad
    and calling one of the custom functions from <samp class="SANS_TheSansMonoCd_W5Regular_11">button1()</samp>
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">button12()</samp> matched to
    each button. Each custom button function then performs the required emulation
    task, which you change for your own requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Once the sketch has been uploaded, your keypad should operate as a shortcut
    keyboard. For example, upon receiving an email about a faulty product, our example
    user can hit Reply on the email, press the 12th button, and send it. [Figure 11-9](chapter11.xhtml#fig11-9)
    shows an example email exchange.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig11-9.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-9: Example output
    email for Project #33</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: For someone answering customer support emails, this would save a lot of time.
    Based on your own daily computer usage habits, you can replace the shortcuts in
    the sketch with your own.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">USB Mice</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also activate mouse emulation with your Leonardo by including the Arduino
    Mouse library with the following two lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To have the Leonardo move the mouse pointer around as a USB mouse, use this
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The parameter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_Italic_I_11">x</samp>    The amount to
    move on the x-axis. Use a positive number to move to the right, a negative number
    to move to the left, and 0 to stay on the current x-axis.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_Italic_I_11">y</samp>    The amount to
    move on the y-axis. Use a positive number to move down, a negative number to move
    up, and 0 to stay on the current y-axis.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_Italic_I_11">z</samp>    Emulates movement
    of a mouse scroll wheel. Use a positive number to roll “toward you,” and a negative
    number to roll “away from you.” If you have changed the default mouse operation
    in your computer’s operating system, you will need to swap negative for positive
    numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To end mouse emulation in a sketch, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: When using the mouse emulation, you need a small delay of 2 ms after each mouse
    function to give the computer time to catch up. You can test controlling pointer
    movement with [Listing 11-4](#LiT-11-4).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 11-4: Controlling pointer
    movement</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The sketch first initializes the library. The mouse pointer then moves 10 pixels
    to the left and 5 up ❶. There’s a short delay afterward, just to slow things down
    a little.
  prefs: []
  type: TYPE_NORMAL
- en: After you upload the sketch, your mouse pointer should meander toward the top
    left of the screen. You can always change its position with the PC mouse, too.
    When finished, upload a non-mouse sketch to stop the movement.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll now put these mouse-emulation functions to use with a simple project.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #34: Keeping Your PC Awake
    Automatically</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Some PCs or other devices with USB mouse input may go into a “sleep mode” or
    require mouse movement on a regular basis to prove a user is present. In this
    project, you’ll program your Leonardo to “wiggle” the mouse every 30 seconds or
    so to keep the PC awake or the boss happy.
  prefs: []
  type: TYPE_NORMAL
- en: 'The only required hardware is your Arduino Leonardo and a matching USB cable.
    Enter and upload the following sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The mouse pointer should move to the left ❶, wait a moment, move back to the
    right ❷, and then wait another moment, as instructed by the functions in the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">wiggleMouse()</samp> custom function.
    The delays in the function and in the main loop are purely arbitrary; alter them
    to suit your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">USB Mouse Buttons</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To program your Leonardo to “click” (press and then release) the emulated mouse
    buttons, you can use
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: or
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: where <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">x</samp> can be
    <samp class="SANS_TheSansMonoCd_W5Regular_11">MOUSE_LEFT</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">MOUSE_RIGHT</samp>,
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">MOUSE_MIDDLE</samp> for the respective
    buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'To press and hold down a mouse button, use the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To release a mouse button being pressed, use the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: You can also use the same parameters as <samp class="SANS_TheSansMonoCd_W5Regular_11">Mouse.click()</samp>
    for the middle and right buttons. Note that the definition of what is left and
    right with regard to the mouse buttons is defined by the settings in your operating
    system. For example, if you’ve swapped the buttons (so “right” is the physical
    left button), you will need to take that into account.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s demonstrate mouse button control by creating a fun drawing project.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #35: Creating a PC Random
    Painter</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: This project will randomly move the mouse pointer and randomly CTRL-click the
    left mouse button. By running this sketch in conjunction with a PC painting program,
    you can create some avant-garde Arduino-generated works of art.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, the only hardware required is your Arduino Leonardo and matching USB
    cable. Enter, but don’t upload, the Project #35 sketch. Now open a PC painting
    program, such as Microsoft Paint, then switch over to the Arduino IDE and upload
    the sketch. Switch back to the paint software and place the cursor in the painting
    area after selecting a paintbrush and color. The sketch should start drawing based
    on random mouse movements, creating a painting like the one in [Figure 11-10](chapter11.xhtml#fig11-10).'
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF AN EXAMPLE OUTPUT DRAWING FROM PROJECT #35](../images/fig11-10.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-10: Example results
    from the random PC painter</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: To create this masterpiece, the sketch first presses the mouse button ❷, makes
    one of eight random mouse movements ❸, and then releases the mouse button ❹. It
    then makes another random mouse movement ❺ before repeating the process. The large
    delay ❶ gives you time to move from the Arduino IDE to the paint software after
    uploading the sketch.
  prefs: []
  type: TYPE_NORMAL
- en: For a final challenge, you might add a start button to your project so the Arduino
    doesn’t take over the keyboard or the mouse until you’re ready for it to do so.
    You might also try making an Etch A Sketch simulator, using two potentiometers
    for x- and y-axis control of the mouse.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point, you have the skills and practice you need to implement USB keyboard
    and mouse emulation for your own projects. You learned how to instruct the Arduino
    Leonardo or compatible board to behave as a keyboard and also behave as a mouse.
    Whenever you do so, make sure that there is a sufficient delay at the start of
    your project to enable any required preparation on the PC. This also gives you
    time to easily upload a new sketch to the board if you’re finished with the emulation
    experiments. If you completely lose control of your board, you can upload a new
    sketch using USBasp hardware via the ICSP pins.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll learn to read and write data to and from USB flash
    drives with your Arduino.
  prefs: []
  type: TYPE_NORMAL
