- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">11</samp> <samp class="SANS_Dogma_OT_Bold_B_11">EMULATING
    USB MICE AND KEYBOARDS WITH THE LEONARDO</samp>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">11</samp> <samp class="SANS_Dogma_OT_Bold_B_11">使用LEONARDO模拟USB鼠标和键盘</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: This chapter shows you how to convert information gathered by the Arduino into
    keypresses or mouse movements and then send them to a computer to simulate typing
    on a USB keyboard or to simulate manipulating an external mouse. To do so, you’ll
    use the Arduino Leonardo development board, which has a few subtle differences
    from the usual Uno or compatible board.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将展示如何将Arduino收集到的信息转换为按键或鼠标移动，然后将其发送到计算机，模拟USB键盘上的输入或模拟操作外部鼠标。为此，你将使用Arduino
    Leonardo开发板，它与通常的Uno或兼容板有一些细微的不同。
- en: Along with a micro-USB connector and a complete surface-mount design for all
    the main components, the Leonardo uses Microchip Technology’s ATmega32U4 microcontroller.
    This microcontroller has built-in USB communication, so the board doesn’t need
    a USB interface chip, which allows the Leonardo to appear as a mouse or keyboard
    to a connected computer. You might use this keyboard emulation technique to build
    your own game controller, shortcut keyboard, rapid data capture and entry systems,
    input devices for the differently abled, and more.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 除了微型USB连接器和所有主要组件的完整表面贴装设计外，Leonardo还使用了Microchip Technology的ATmega32U4微控制器。该微控制器内置USB通信，因此开发板无需USB接口芯片，这使得Leonardo可以作为鼠标或键盘出现在连接的计算机上。你可以使用这种键盘模拟技术来构建自己的游戏控制器、快捷键键盘、快速数据捕获和输入系统、为不同能力的用户设计的输入设备等。
- en: 'In this chapter, you’ll learn to:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学到：
- en: Emulate keypresses and typing on USB keyboards, as well as USB mouse movement
    and button control
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟USB键盘的按键输入和打字操作，以及USB鼠标的移动和按钮控制
- en: Build a USB data logger that writes directly to a spreadsheet
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个直接写入电子表格的USB数据记录器
- en: Use a keypad to make a keyboard of shortcuts
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用键盘使其成为快捷键键盘
- en: <samp class="SANS_Futura_Std_Bold_B_11">USB Keyboards</samp>
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">USB键盘</samp>
- en: To emulate a keyboard with the Leonardo (shown in [Figure 11-1](chapter11.xhtml#fig11-1)),
    you don’t need any extra hardware apart from a USB cable long enough to reach
    between your board and the host PC. If you’re ordering a longer cable, don’t forget
    that you need a USB-A-to-micro-USB cable.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Leonardo模拟键盘（如[图11-1](chapter11.xhtml#fig11-1)所示），除了足够长的USB电缆将开发板与主机PC连接外，不需要任何额外的硬件。如果你购买更长的电缆，请记得你需要一根USB-A到micro-USB的电缆。
- en: '![A PHOTO OF AN ARDUINO LEONARDO BOARD](../images/fig11-1.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![Arduino Leonardo开发板的照片](../images/fig11-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-1: An Arduino Leonardo
    development board</samp>'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图11-1：Arduino Leonardo开发板</samp>
- en: 'You can activate keyboard emulation by including the Arduino Keyboard library,
    using the following two lines:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过包含Arduino键盘库来激活键盘模拟，使用以下两行：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To have the Leonardo send keypresses to the computer to mimic a user typing
    on a USB keyboard, use the following functions:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 若要让Leonardo通过USB键盘模拟用户的按键操作，使用以下功能：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'These functions operate in a similar manner to <samp class="SANS_TheSansMonoCd_W5Regular_11">Serial.print()</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Serial.println()</samp>: the
    former sends the text to be “typed out” as keypresses, and the latter sends the
    same out and adds a return (or pressing RETURN or ENTER) to a new line. Using
    these two functions, you can send out any text that can generally be sent via
    your usual USB keyboard.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些功能的操作方式类似于<samp class="SANS_TheSansMonoCd_W5Regular_11">Serial.print()</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Serial.println()</samp>：前者将要“输入”的文本作为按键发送，后者则将相同的内容发送并添加一个回车符（或按下RETURN或ENTER键）以换行。使用这两个函数，你可以发送任何通常通过USB键盘发送的文本。
- en: 'To stop emulating a USB keyboard, use the following function:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 若要停止模拟USB键盘，请使用以下功能：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This function is necessary only when you expect a user to continue using the
    PC via the normal keyboard while the Leonardo is still connected.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 该功能仅在你期望用户在Leonardo仍然连接时，继续通过正常键盘使用PC时才需要。
- en: 'Let’s try this. First, connect your Arduino Leonardo to your computer. If this
    is the first time you’ve used the Leonardo, your PC may take a few moments to
    automatically install the required USB drivers. Next, open the Arduino IDE and
    change the board type to Arduino Leonardo using the drop-down menu shown in [Figure
    11-2](chapter11.xhtml#fig11-2) (note that your COM: port may be different from
    the one in the figure).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试看。首先，将 Arduino Leonardo 连接到计算机。如果这是你第一次使用 Leonardo，你的 PC 可能会花几秒钟自动安装所需的
    USB 驱动程序。接下来，打开 Arduino IDE，并使用下拉菜单将板卡类型更改为 Arduino Leonardo，如[图 11-2](chapter11.xhtml#fig11-2)所示（请注意，你的
    COM 端口可能与图中的不同）。
- en: '![A SCREENSHOT OF AN ARDUINO IDE WITH THE LEONARDO BOARD TYPE SELECTED](../images/fig11-2.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![选择 Leonardo 板卡类型的 Arduino IDE 截图](../images/fig11-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-2: Selecting the
    Leonardo in the IDE</samp>'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 11-2：在 IDE 中选择 Leonardo</samp>
- en: Always ensure that the board type is set to Leonardo when working with sketches
    that use the Keyboard library; otherwise, they will not compile if you’re testing
    for errors.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用包含 Keyboard 库的草图时，务必确保板卡类型设置为 Leonardo；否则，如果你在测试错误时，它们将无法编译。
- en: If you have other software open on your PC, close it or ensure its windows are
    not active while you’re experimenting with keyboard and mouse emulation. Otherwise,
    the “keypresses” being sent by the Leonardo may interfere with the other software.
    For example, before uploading the following sketch on my own machine, the only
    software I had open was the Arduino IDE and Notepad.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的 PC 上有其他软件正在运行，关闭它们或确保它们的窗口在你进行键盘和鼠标仿真时不会处于活动状态。否则，Leonardo 发送的“按键”可能会干扰其他软件。例如，在我自己机器上上传以下草图之前，我打开的唯一软件是
    Arduino IDE 和记事本。
- en: Now enter and upload the sketch for [Listing 11-1](#LiT-11-1); then immediately
    switch over to a simple text editor such as Notepad.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在输入并上传[列表 11-1](#LiT-11-1)中的草图；然后立即切换到简单的文本编辑器，如记事本。
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 11-1: USB keyboard
    emulation</samp>'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 11-1：USB 键盘仿真</samp>
- en: Once uploaded, the Leonardo should type “Hello, world.” every second or so,
    as shown in [Figure 11-3](chapter11.xhtml#fig11-3).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 上传后，Leonardo 应该每秒打出一次“Hello, world.”，如[图 11-3](chapter11.xhtml#fig11-3)所示。
- en: '![A SCREENSHOT OF AN EXAMPLE OUTPUT FROM LISTING 11-1](../images/fig11-3.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![来自列表 11-1 的示例输出截图](../images/fig11-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-3: Example output
    from [Listing 11-1](#LiT-11-1)</samp>'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 11-3：[列表 11-1](#LiT-11-1)的示例输出</samp>
- en: First, the sketch includes the Keyboard library. The five-second delay gives
    the user some time to get the PC ready for input from the Arduino. The Keyboard
    library is then initialized. The sketch then sends some text without a new line
    ❶ and then some more text along with a new line ❷.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，草图包括 Keyboard 库。五秒的延迟为用户提供了一些时间以准备好 PC 接收来自 Arduino 的输入。然后初始化 Keyboard 库。接下来，草图发送一些没有换行符的文本
    ❶，然后是一些带有换行符的文本 ❷。
- en: When you’ve finished using the Leonardo for any USB keyboard or mouse emulation
    project, upload a simple sketch such as the IDE example *blink* so that your Leonardo
    won’t try to take over the controls the next time you connect it to a PC. If you’re
    having trouble taking control of the computer when uploading a new sketch, you
    can use the CTRL-U keyboard shortcut to upload a sketch.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成使用 Leonardo 进行任何 USB 键盘或鼠标仿真项目时，上传一个简单的草图，例如 IDE 示例中的 *blink*，以防下次连接 Leonardo
    到 PC 时，它不会尝试接管控制。如果你在上传新草图时遇到控制问题，可以使用 CTRL-U 快捷键上传草图。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Emulating Keyboard
    Modifiers and Special Keys</samp>
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">模拟键盘修饰键和特殊键</samp>
- en: In addition to creating keypresses for letters, numbers, and symbols, you can
    emulate buttons such as cursor keys, TAB, function keys, and so on, using a few
    more functions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 除了为字母、数字和符号创建按键输入外，你还可以通过一些额外的函数模拟按钮，如光标键、TAB 键、功能键等。
- en: To send a single button press (that is, to press the button and then release
    it), use
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要发送单个按键（即按下按钮并释放它），使用
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: where <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">x</samp> is the
    ASCII code for the letter, number, or symbol key to press, or the code for special
    modifier keys, listed in [Table 11-1](chapter11.xhtml#tab11-1).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">x</samp> 是要按下的字母、数字或符号的
    ASCII 代码，或特殊修饰键的代码，列在[表 11-1](chapter11.xhtml#tab11-1)中。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 11-1:</samp> <samp class="SANS_Futura_Std_Book_11">Modifier
    Keys and Their Codes</samp>
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 11-1:</samp> <samp class="SANS_Futura_Std_Book_11">修饰键及其代码</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Modifier key</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Code</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Modifier key</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Code</samp>
    |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">修饰键</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">代码</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">修饰键</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">代码</samp>
    |'
- en: '| --- | --- | --- | --- |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_LEFT_CTRL</samp> | <samp class="SANS_Futura_Std_Book_11">128</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F1</samp> | <samp class="SANS_Futura_Std_Book_11">194</samp>
    |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">KEY_LEFT_CTRL</samp> | <samp class="SANS_Futura_Std_Book_11">128</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F1</samp> | <samp class="SANS_Futura_Std_Book_11">194</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_LEFT_SHIFT</samp> | <samp class="SANS_Futura_Std_Book_11">129</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F2</samp> | <samp class="SANS_Futura_Std_Book_11">195</samp>
    |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">KEY_LEFT_SHIFT</samp> | <samp class="SANS_Futura_Std_Book_11">129</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F2</samp> | <samp class="SANS_Futura_Std_Book_11">195</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_LEFT_ALT</samp> | <samp class="SANS_Futura_Std_Book_11">130</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F3</samp> | <samp class="SANS_Futura_Std_Book_11">196</samp>
    |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">KEY_LEFT_ALT</samp> | <samp class="SANS_Futura_Std_Book_11">130</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F3</samp> | <samp class="SANS_Futura_Std_Book_11">196</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_LEFT_GUI</samp> | <samp class="SANS_Futura_Std_Book_11">131</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F4</samp> | <samp class="SANS_Futura_Std_Book_11">197</samp>
    |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">KEY_LEFT_GUI</samp> | <samp class="SANS_Futura_Std_Book_11">131</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F4</samp> | <samp class="SANS_Futura_Std_Book_11">197</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_RIGHT_CTRL</samp> | <samp class="SANS_Futura_Std_Book_11">132</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F5</samp> | <samp class="SANS_Futura_Std_Book_11">198</samp>
    |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">KEY_RIGHT_CTRL</samp> | <samp class="SANS_Futura_Std_Book_11">132</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F5</samp> | <samp class="SANS_Futura_Std_Book_11">198</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_RIGHT_SHIFT</samp> | <samp class="SANS_Futura_Std_Book_11">133</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F6</samp> | <samp class="SANS_Futura_Std_Book_11">199</samp>
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">KEY_RIGHT_SHIFT</samp> | <samp class="SANS_Futura_Std_Book_11">133</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F6</samp> | <samp class="SANS_Futura_Std_Book_11">199</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_RIGHT_ALT</samp> | <samp class="SANS_Futura_Std_Book_11">134</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F7</samp> | <samp class="SANS_Futura_Std_Book_11">200</samp>
    |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">KEY_RIGHT_ALT</samp> | <samp class="SANS_Futura_Std_Book_11">134</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F7</samp> | <samp class="SANS_Futura_Std_Book_11">200</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_RIGHT_GUI</samp> | <samp class="SANS_Futura_Std_Book_11">135</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F8</samp> | <samp class="SANS_Futura_Std_Book_11">201</samp>
    |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">KEY_RIGHT_GUI</samp> | <samp class="SANS_Futura_Std_Book_11">135</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F8</samp> | <samp class="SANS_Futura_Std_Book_11">201</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_UP_ARROW</samp> | <samp class="SANS_Futura_Std_Book_11">218</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F9</samp> | <samp class="SANS_Futura_Std_Book_11">202</samp>
    |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">KEY_UP_ARROW</samp> | <samp class="SANS_Futura_Std_Book_11">218</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F9</samp> | <samp class="SANS_Futura_Std_Book_11">202</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_DOWN_ARROW</samp> | <samp class="SANS_Futura_Std_Book_11">217</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F10</samp> | <samp class="SANS_Futura_Std_Book_11">203</samp>
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">KEY_DOWN_ARROW</samp> | <samp class="SANS_Futura_Std_Book_11">217</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F10</samp> | <samp class="SANS_Futura_Std_Book_11">203</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_LEFT_ARROW</samp> | <samp class="SANS_Futura_Std_Book_11">216</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F11</samp> | <samp class="SANS_Futura_Std_Book_11">204</samp>
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">KEY_LEFT_ARROW</samp> | <samp class="SANS_Futura_Std_Book_11">216</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F11</samp> | <samp class="SANS_Futura_Std_Book_11">204</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_RIGHT_ARROW</samp> | <samp class="SANS_Futura_Std_Book_11">215</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F12</samp> | <samp class="SANS_Futura_Std_Book_11">205</samp>
    |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">KEY_RIGHT_ARROW</samp> | <samp class="SANS_Futura_Std_Book_11">215</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F12</samp> | <samp class="SANS_Futura_Std_Book_11">205</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_BACKSPACE</samp> | <samp class="SANS_Futura_Std_Book_11">178</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F13</samp> | <samp class="SANS_Futura_Std_Book_11">240</samp>
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">KEY_BACKSPACE</samp> | <samp class="SANS_Futura_Std_Book_11">178</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F13</samp> | <samp class="SANS_Futura_Std_Book_11">240</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_TAB</samp> | <samp class="SANS_Futura_Std_Book_11">179</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F14</samp> | <samp class="SANS_Futura_Std_Book_11">241</samp>
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">KEY_TAB</samp> | <samp class="SANS_Futura_Std_Book_11">179</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F14</samp> | <samp class="SANS_Futura_Std_Book_11">241</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_RETURN</samp> | <samp class="SANS_Futura_Std_Book_11">176</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F15</samp> | <samp class="SANS_Futura_Std_Book_11">242</samp>
    |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">KEY_RETURN</samp> | <samp class="SANS_Futura_Std_Book_11">176</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F15</samp> | <samp class="SANS_Futura_Std_Book_11">242</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_ESC</samp> | <samp class="SANS_Futura_Std_Book_11">177</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F16</samp> | <samp class="SANS_Futura_Std_Book_11">243</samp>
    |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">KEY_ESC</samp> | <samp class="SANS_Futura_Std_Book_11">177</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F16</samp> | <samp class="SANS_Futura_Std_Book_11">243</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_INSERT</samp> | <samp class="SANS_Futura_Std_Book_11">209</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F17</samp> | <samp class="SANS_Futura_Std_Book_11">244</samp>
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">KEY_INSERT</samp> | <samp class="SANS_Futura_Std_Book_11">209</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F17</samp> | <samp class="SANS_Futura_Std_Book_11">244</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_DELETE</samp> | <samp class="SANS_Futura_Std_Book_11">212</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F18</samp> | <samp class="SANS_Futura_Std_Book_11">245</samp>
    |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">KEY_DELETE</samp> | <samp class="SANS_Futura_Std_Book_11">212</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F18</samp> | <samp class="SANS_Futura_Std_Book_11">245</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_PAGE_UP</samp> | <samp class="SANS_Futura_Std_Book_11">211</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F19</samp> | <samp class="SANS_Futura_Std_Book_11">246</samp>
    |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">KEY_PAGE_UP</samp> | <samp class="SANS_Futura_Std_Book_11">211</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F19</samp> | <samp class="SANS_Futura_Std_Book_11">246</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_PAGE_DOWN</samp> | <samp class="SANS_Futura_Std_Book_11">214</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F20</samp> | <samp class="SANS_Futura_Std_Book_11">247</samp>
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">KEY_PAGE_DOWN</samp> | <samp class="SANS_Futura_Std_Book_11">214</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F20</samp> | <samp class="SANS_Futura_Std_Book_11">247</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_HOME</samp> | <samp class="SANS_Futura_Std_Book_11">210</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F21</samp> | <samp class="SANS_Futura_Std_Book_11">248</samp>
    |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">KEY_HOME</samp> | <samp class="SANS_Futura_Std_Book_11">210</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F21</samp> | <samp class="SANS_Futura_Std_Book_11">248</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_END</samp> | <samp class="SANS_Futura_Std_Book_11">213</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F22</samp> | <samp class="SANS_Futura_Std_Book_11">249</samp>
    |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">KEY_END</samp> | <samp class="SANS_Futura_Std_Book_11">213</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F22</samp> | <samp class="SANS_Futura_Std_Book_11">249</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">KEY_CAPS_LOCK</samp> | <samp class="SANS_Futura_Std_Book_11">193</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F23</samp> | <samp class="SANS_Futura_Std_Book_11">250</samp>
    |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">KEY_CAPS_LOCK</samp> | <samp class="SANS_Futura_Std_Book_11">193</samp>
    | <samp class="SANS_Futura_Std_Book_11">KEY_F23</samp> | <samp class="SANS_Futura_Std_Book_11">250</samp>
    |'
- en: '|  |  | <samp class="SANS_Futura_Std_Book_11">KEY_F24</samp> | <samp class="SANS_Futura_Std_Book_11">251</samp>
    |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '|  |  | <samp class="SANS_Futura_Std_Book_11">KEY_F24</samp> | <samp class="SANS_Futura_Std_Book_11">251</samp>
    |'
- en: In addition to the modifiers listed in the table, you can review the complete
    list of ASCII codes including those for letters, numbers, and symbols, at [*https://<wbr>www<wbr>.asciitable<wbr>.com<wbr>/*](https://www.asciitable.com/).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 除了表中列出的修饰符外，您还可以查看完整的ASCII码列表，包括字母、数字和符号的编码，网址为 [*https://<wbr>www<wbr>.asciitable<wbr>.com<wbr>/*](https://www.asciitable.com/)。
- en: 'To simplify things, you can define the required codes to matching descriptions
    for the keys you want to emulate. For example, CAPS LOCK is 193, so add the following
    at the start of the sketch:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化操作，你可以为想要模拟的键定义所需的代码和匹配的描述。例如，CAPS LOCK的代码是193，因此在草图开始时加入以下内容：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To press CAPS LOCK using the Leonardo, you’d use the following function:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Leonardo按下CAPS LOCK，你可以使用以下函数：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To test this, you can use the sketch in [Listing 11-2](#LiT-11-2), which presses
    CAPS LOCK every second.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试此功能，你可以使用[清单11-2](#LiT-11-2)中的草图，每秒按下CAPS LOCK。
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 11-2: Blinking</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">CAPS LOCK</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">every
    second</samp>'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单11-2：每秒闪烁</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">CAPS
    LOCK</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">每秒</samp>
- en: This sketch tells the host PC that CAPS LOCK has been pressed ❶, which will
    be reflected on a USB keyboard connected to the PC. (If, at this point, you are
    considering making some mischief on a friend’s computer, do so at your own risk!)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图告诉主机PC已按下CAPS LOCK ❶，并将反映在连接到PC的USB键盘上。（如果此时你打算在朋友的电脑上恶作剧，请自行承担风险！）
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Pressing and Releasing
    One or More Keys</samp>
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">按下和松开一个或多个键</samp>
- en: You can also emulate pressing down a button on the keyboard and then releasing
    it after a set period. To do this, use
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以模拟按下键盘上的一个按钮，并在设定的时间后松开它。为此，使用
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'to hold down the button whose modifier or ASCII code is <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">x</samp>.
    Then, to release that button, use the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 按住修饰符或ASCII代码为 <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">x</samp>
    的按钮。然后，要释放该按钮，请使用以下代码：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can test this using [Listing 11-3](#LiT-11-3).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用[清单11-3](#LiT-11-3)进行测试。
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 11-3: Testing press
    and release</samp>'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单11-3：测试按下和松开</samp>
- en: This sketch demonstrates pressing and holding down the Z key ❶, waiting a moment,
    and then letting go of the key ❷. [Figure 11-4](chapter11.xhtml#fig11-4) shows
    the results of the sketch. As you can see, the first two lines of text printed
    to the screen are shorter than the last two lines, since there is a slight difference
    in keyboard response time depending on the operating speed of the host PC.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图展示了按住Z键 ❶，等待片刻后松开该键 ❷。[图11-4](chapter11.xhtml#fig11-4)展示了该草图的结果。如你所见，打印到屏幕上的前两行文字比后两行短，因为键盘响应时间略有差异，取决于主机PC的操作速度。
- en: '![A SCREENSHOT OF AN EXAMPLE OUTPUT FROM LISTING 11-3](../images/fig11-4.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图11-4的示例输出截图](../images/fig11-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-4: Example output
    from [Listing 11-3](#LiT-11-3)</samp>'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图11-4：来自[清单11-3](#LiT-11-3)的示例输出</samp>
- en: Finally, you can program your Leonardo to press several keys at once and then
    release them one at a time or all at once using multiple <samp class="SANS_TheSansMonoCd_W5Regular_11">Keyboard.press()</samp>
    functions. This allows you to emulate useful multiple-keypress shortcuts used
    by your PC’s operating system.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以编程让Leonardo同时按下多个键，然后使用多个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Keyboard.press()</samp>
    函数将它们一一松开，或者一次性全部松开。这使得你能够模拟操作系统中常用的多个按键快捷方式。
- en: 'For example, you can sign out of a Windows PC by pressing CTRL-ALT-DELETE and
    then ALT-S. The following functions will press the left CTRL, left ALT, and DELETE
    buttons simultaneously:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以通过按下CTRL-ALT-DELETE键组合，然后按下ALT-S来退出Windows PC。以下函数会同时按下左侧CTRL键、左侧ALT键和DELETE键：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can then release them all by using this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以使用以下代码一次性释放所有按钮：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You can also let go of individual buttons and keep others pressed by using <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Keyboard.release(</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">x</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">)</samp>, where <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">x</samp>
    is the requisite modifier or ASCII code.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">Keyboard.release(</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">x</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
    来松开单个按钮，并保持其他按钮按下，其中 <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">x</samp>
    是所需的修饰符或ASCII代码。
- en: You’ll put all this to work in the next project by logging data from the Leonardo
    directly to a PC.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在下一个项目中通过将Leonardo的数据直接记录到PC上来运用这一切。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #32: Logging Data with USB
    Keyboard Emulation</samp>'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_21">项目#32：使用USB键盘仿真记录数据</samp>
- en: One exceptionally useful benefit of keyboard emulation is the ability to log
    data from a Leonardo directly to a PC. For this project, you’ll log temperature
    and air pressure data from the BMP180 sensor used in [Chapter 10](chapter10.xhtml)
    directly into a spreadsheet. If you can dedicate a PC for data logging—for example,
    in a laboratory or your office—this is a rapid, inexpensive method of data capture.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 键盘仿真功能的一个非常有用的好处是能够直接将数据从Leonardo记录到PC中。在这个项目中，你将把来自[第10章](chapter10.xhtml)的BMP180传感器的温度和气压数据直接记录到电子表格中。如果你能为数据记录专门配备一台PC——例如，在实验室或办公室——这是一个快速且经济的数据捕获方法。
- en: 'You’ll need the following parts for this project:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下零件来完成此项目：
- en: An Arduino Leonardo or compatible board and USB cable
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块Arduino Leonardo或兼容板和USB电缆
- en: A BMP180 temperature and air pressure sensor board
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块BMP180温度和气压传感器板
- en: A solderless breadboard
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块无焊接面包板
- en: Various jumper wires
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种跳线
- en: Assemble the circuit as shown in [Figure 11-5](chapter11.xhtml#fig11-5).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图11-5](chapter11.xhtml#fig11-5)所示组装电路。
- en: '![THE SCHEMATIC FOR PROJECT #32](../images/fig11-5.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![项目#32的原理图](../images/fig11-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-5: The schematic
    for Project #32</samp>'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图11-5：项目#32的原理图</samp>
- en: 'To get started, open your preferred spreadsheet, such as Microsoft Excel or
    Google Sheets. Switch back to the Arduino IDE and upload the Project #32 sketch.
    Then quickly switch back to the spreadsheet software, click the top-left cell,
    and wait. Ten seconds after you’ve reset the Leonardo, the date, time, temperature,
    and air pressure in pascals should be “typed” into the cells, as shown in [Figure
    11-6](chapter11.xhtml#fig11-6).'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，打开你喜欢的电子表格，例如Microsoft Excel或Google Sheets。然后切换回Arduino IDE并上传项目#32的草图。接着迅速切换回电子表格软件，点击左上角的单元格并等待。重置Leonardo后的十秒钟，日期、时间、温度和以帕斯卡为单位的气压应会自动“输入”到单元格中，如[图11-6](chapter11.xhtml#fig11-6)所示。
- en: '![A SCREENSHOT OF EXAMPLE OUTPUT DATA FOR PROJECT #32 IN AN EXCEL SPREADSHEET](../images/fig11-6.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![项目#32在Excel电子表格中的示例输出数据截图](../images/fig11-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-6: Example output
    data for Project #32 in an Excel spreadsheet</samp>'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图11-6：项目#32在Excel电子表格中的示例输出数据</samp>
- en: Once logging has started, you might disconnect the mouse and keyboard from the
    PC so others can’t interrupt the proceedings. Furthermore, by using a cloud-based
    tool such as Google Sheets, you can monitor and review the results in real time
    from any web-enabled device in the world, as shown in [Figure 11-7](chapter11.xhtml#fig11-7).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦开始记录数据，你可以断开PC上的鼠标和键盘，以防其他人中断数据采集。此外，通过使用基于云的工具，如Google Sheets，你可以从任何支持网络的设备实时监控和查看结果，如[图11-7](chapter11.xhtml#fig11-7)所示。
- en: '![A SCREENSHOT OF EXAMPLE OUTPUT DATA FOR PROJECT #32 IN GOOGLE WORKSPACE SHEETS](../images/fig11-7.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![项目#32在Google Workspace Sheets中的示例输出数据截图](../images/fig11-7.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-7: Example results
    in Google Sheets</samp>'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图11-7：Google Sheets中的示例结果</samp>
- en: 'Let’s see how this works:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下这如何工作：
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The sketch first initializes the sensor and the Keyboard library ❶. The custom
    function ❷ emulates pressing CTRL-+, a shortcut used in many spreadsheets to insert
    the date into the current cell. There is a small delay before releasing the keys.
    The next custom function ❸ emulates pressing CTRL-SHIFT-+, the shortcut to insert
    the time into the current cell. This is followed by functions that press TAB and
    ENTER, for the sake of convenience, to save you using the raw commands.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 草图首先初始化传感器和键盘库 ❶。自定义函数 ❷ 模拟按下CTRL-+，这是许多电子表格中用来插入当前单元格日期的快捷键。释放键之前有一个小延迟。接下来的自定义函数
    ❸ 模拟按下CTRL-SHIFT-+，这是插入当前单元格时间的快捷键。接着是一些按下TAB和ENTER的函数，方便你省去使用原始命令的步骤。
- en: The keyboard controls are based on those for a Windows-based computer. If you’re
    using macOS or another operating system, you may need to change the required keys
    for moving the cursor around the screen or the shortcuts in the spreadsheet software.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 键盘控制基于Windows操作系统的控制方式。如果你使用的是macOS或其他操作系统，可能需要更改屏幕上移动光标或电子表格软件中的快捷键。
- en: The usual initialization takes place in <samp class="SANS_TheSansMonoCd_W5Regular_11">void
    setup()</samp>, plus a long delay ❹, which gives the user enough time to navigate
    the cursor to the starting cell in the spreadsheet before the Leonardo starts
    typing. Finally, in <samp class="SANS_TheSansMonoCd_W5Regular_11">void loop()</samp>,
    the date, time, temperature, and air pressure are “typed” into the spreadsheet
    using the required combination of keys, followed by a delay before the next sample
    is logged.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 通常的初始化发生在 <samp class="SANS_TheSansMonoCd_W5Regular_11">void setup()</samp>
    中，并且有一个长时间的延迟 ❹，这给用户足够的时间将光标导航到电子表格中的起始单元格，之后 Leonardo 才开始打字。最后，在 <samp class="SANS_TheSansMonoCd_W5Regular_11">void
    loop()</samp> 中，日期、时间、温度和气压使用所需的按键组合“输入”到电子表格中，之后会有一个延迟，才会记录下一个样本。
- en: 'Now that you have a solid understanding of keyboard emulation, let’s build
    another tool you can use on a regular basis: the shortcut keyboard.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经对键盘仿真有了扎实的理解，让我们再构建一个你可以定期使用的工具：快捷键键盘。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #33: Building a USB Shortcut
    Keyboard</samp>'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #33：构建一个 USB 快捷键键盘</samp>'
- en: 'Those who work or play with a PC daily will, over time, need to type various
    things repeatedly, such as passwords, keyboard shortcuts, or commonly used lines
    of text. With an Arduino Leonardo and the 12-button keypad described in Project
    #3 in [Chapter 1](chapter1.xhtml), you can build a handy shortcut keyboard with
    12 different options.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '那些每天使用 PC 工作或娱乐的人，随着时间的推移，需要反复输入各种内容，比如密码、键盘快捷键或常用的文本行。使用 Arduino Leonardo
    和项目 #3 中描述的 12 键键盘（见 [第 1 章](chapter1.xhtml)），你可以构建一个方便的快捷键键盘，具有 12 个不同的选项。'
- en: For the purposes of demonstration, the project will have a variety of examples
    assigned to the keypad. However, apart from useful text, you can research shortcuts
    for your PC’s operating system or favorite software and then create your own.
    [Table 11-2](chapter11.xhtml#tab11-2) lists a variety of keyboard and typing shortcuts.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示目的，项目将会将各种示例分配给键盘。不过，除了有用的文本外，你可以研究你电脑操作系统或最喜欢的软件的快捷方式，并创建你自己的。[表 11-2](chapter11.xhtml#tab11-2)列出了各种键盘和打字快捷键。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 11-2:</samp> <samp class="SANS_Futura_Std_Book_11">Example
    Shortcuts</samp>
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 11-2：</samp> <samp class="SANS_Futura_Std_Book_11">示例快捷键</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Button</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Shortcut</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Required emulation presses</samp> |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">按钮</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">快捷键</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">所需的仿真按键</samp> |'
- en: '| --- | --- | --- |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| <samp class="SANS_Futura_Std_Book_11">1</samp> | <samp class="SANS_Futura_Std_Book_11">Enter
    PIN 456700.</samp> | <samp class="SANS_Futura_Std_Book_11">456700</samp> |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">1</samp> | <samp class="SANS_Futura_Std_Book_11">输入
    PIN 456700。</samp> | <samp class="SANS_Futura_Std_Book_11">456700</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">2</samp> | <samp class="SANS_Futura_Std_Book_11">Lock
    the screen in Windows 11.</samp> | <samp class="SANS_Futura_Std_Book_11">CTRL-ALT-DEL,
    then ENTER</samp> |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">2</samp> | <samp class="SANS_Futura_Std_Book_11">锁定
    Windows 11 屏幕。</samp> | <samp class="SANS_Futura_Std_Book_11">CTRL-ALT-DEL，然后按
    ENTER</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">3</samp> | <samp class="SANS_Futura_Std_Book_11">Display
    Windows Task Manager.</samp> | <samp class="SANS_Futura_Std_Book_11">CTRL-ESC-SHIFT</samp>
    |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">3</samp> | <samp class="SANS_Futura_Std_Book_11">显示
    Windows 任务管理器。</samp> | <samp class="SANS_Futura_Std_Book_11">CTRL-ESC-SHIFT</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">Print
    to default printer.</samp> | <samp class="SANS_Futura_Std_Book_11">CTRL-P, then
    ENTER</samp> |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">4</samp> | <samp class="SANS_Futura_Std_Book_11">打印到默认打印机。</samp>
    | <samp class="SANS_Futura_Std_Book_11">CTRL-P，然后按 ENTER</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">5</samp> | <samp class="SANS_Futura_Std_Book_11">Switch
    between apps.</samp> | <samp class="SANS_Futura_Std_Book_11">ALT-TAB</samp> |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">5</samp> | <samp class="SANS_Futura_Std_Book_11">在应用之间切换。</samp>
    | <samp class="SANS_Futura_Std_Book_11">ALT-TAB</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">Save
    open pages as bookmarks in the Edge browser.</samp> | <samp class="SANS_Futura_Std_Book_11">CTRL-SHIFT-D</samp>
    |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">6</samp> | <samp class="SANS_Futura_Std_Book_11">在
    Edge 浏览器中将打开的页面保存为书签。</samp> | <samp class="SANS_Futura_Std_Book_11">CTRL-SHIFT-D</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">7</samp> | <samp class="SANS_Futura_Std_Book_11">Switch
    to Page Layout view in Excel.</samp> | <samp class="SANS_Futura_Std_Book_11">ALT</samp><samp
    class="SANS_Futura_Std_Book_11">-W, then P</samp> |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">7</samp> | <samp class="SANS_Futura_Std_Book_11">在Excel中切换到页面布局视图。</samp>
    | <samp class="SANS_Futura_Std_Book_11">按ALT-W，然后按P</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">Switch
    to Normal Layout view in Excel.</samp> | <samp class="SANS_Futura_Std_Book_11">ALT-W,
    then L</samp> |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">8</samp> | <samp class="SANS_Futura_Std_Book_11">在Excel中切换到正常布局视图。</samp>
    | <samp class="SANS_Futura_Std_Book_11">按ALT-W，然后按L</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">9</samp> | <samp class="SANS_Futura_Std_Book_11">You
    can contact me via email at … or telephone … after 3 PM</samp> | <samp class="SANS_Futura_Std_Book_11">Typed
    text</samp> |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">9</samp> | <samp class="SANS_Futura_Std_Book_11">您可以通过电子邮件联系我……或在下午3点后拨打电话……</samp>
    | <samp class="SANS_Futura_Std_Book_11">输入的文字</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">10</samp> | <samp class="SANS_Futura_Std_Book_11">We
    cannot solve your problem via social media. Please email … for technical support.</samp>
    | <samp class="SANS_Futura_Std_Book_11">Typed text</samp> |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">10</samp> | <samp class="SANS_Futura_Std_Book_11">我们无法通过社交媒体解决您的问题。请通过电子邮件联系……以获得技术支持。</samp>
    | <samp class="SANS_Futura_Std_Book_11">输入的文字</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">11</samp> | <samp class="SANS_Futura_Std_Book_11">Thank
    you for your email. I will reply in more detail once I can locate the required
    information.</samp> | <samp class="SANS_Futura_Std_Book_11">Typed text</samp>
    |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">11</samp> | <samp class="SANS_Futura_Std_Book_11">感谢您的邮件。我会在找到所需信息后尽快详细回复。</samp>
    | <samp class="SANS_Futura_Std_Book_11">输入的文字</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">12</samp> | <samp class="SANS_Futura_Std_Book_11">Without
    examining the product in person, we can’t determine the fault. Please post it
    to …</samp> | <samp class="SANS_Futura_Std_Book_11">Typed text</samp> |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">12</samp> | <samp class="SANS_Futura_Std_Book_11">如果不亲自检查产品，我们无法确定故障原因。请将其邮寄至……</samp>
    | <samp class="SANS_Futura_Std_Book_11">输入的文字</samp> |'
- en: 'You’ll need the following parts for this project:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要以下部件来完成本项目：
- en: An Arduino Leonardo or compatible board and USB cable
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块Arduino Leonardo或兼容板和USB数据线
- en: 'Keypad hardware as described in Project #3 in [Chapter 1](chapter1.xhtml)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如[第一章](chapter1.xhtml)项目#3中所描述的键盘硬件
- en: 'Assembly is the same as in Project #3, substituting an Arduino Leonardo for
    an Uno, as shown in [Figure 11-8](chapter11.xhtml#fig11-8). You may want to check
    the ADC values reported by each keypad button by using the sketch from Project
    #1 and then updating the ranges in our analogkeypad library.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 装配与项目#3相同，只是将Arduino Leonardo替换为Uno，如[图11-8](chapter11.xhtml#fig11-8)所示。您可能需要使用项目#1中的草图检查每个键盘按钮报告的ADC值，然后更新我们analogkeypad库中的范围。
- en: '![THE SCHEMATIC FOR PROJECT #33](../images/fig11-8.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![项目#33的电路图](../images/fig11-8.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-8: The schematic
    for Project #33</samp>'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图11-8：项目#33的电路图</samp>
- en: 'Now enter and upload the following sketch:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在输入并上传以下草图：
- en: '[PRE14]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The sketch takes advantage of the analogkeypad library for the hardware and
    the Keyboard library to emulate the USB keyboard. These libraries are included
    ❶ and then initialized ❷. The sketch then loops while it waits for a button press,
    which is actioned at ❸. After that, it’s a simple matter of monitoring the keypad
    and calling one of the custom functions from <samp class="SANS_TheSansMonoCd_W5Regular_11">button1()</samp>
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">button12()</samp> matched to
    each button. Each custom button function then performs the required emulation
    task, which you change for your own requirements.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图利用了analogkeypad库来控制硬件，利用Keyboard库来模拟USB键盘。这些库在❶处包含，然后在❷处初始化。草图在循环中等待按钮按下，操作发生在❸处。之后，只需监控键盘并调用与每个按钮匹配的自定义函数，范围从<samp
    class="SANS_TheSansMonoCd_W5Regular_11">button1()</samp>到<samp class="SANS_TheSansMonoCd_W5Regular_11">button12()</samp>。每个自定义按钮函数随后执行所需的模拟任务，您可以根据自己的需求进行更改。
- en: Once the sketch has been uploaded, your keypad should operate as a shortcut
    keyboard. For example, upon receiving an email about a faulty product, our example
    user can hit Reply on the email, press the 12th button, and send it. [Figure 11-9](chapter11.xhtml#fig11-9)
    shows an example email exchange.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦草图上传完毕，你的键盘应该会作为快捷键键盘工作。例如，在收到关于故障产品的邮件时，我们的示例用户可以点击回复，按下第 12 个按钮，然后发送邮件。[图
    11-9](chapter11.xhtml#fig11-9) 显示了一个示例邮件交换。
- en: '![](../images/fig11-9.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/fig11-9.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-9: Example output
    email for Project #33</samp>'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 11-9：项目 #33 示例输出邮件</samp>'
- en: For someone answering customer support emails, this would save a lot of time.
    Based on your own daily computer usage habits, you can replace the shortcuts in
    the sketch with your own.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 对于处理客户支持邮件的人来说，这将节省大量时间。根据你自己的日常计算机使用习惯，你可以用自己的快捷键替换草图中的快捷键。
- en: <samp class="SANS_Futura_Std_Bold_B_11">USB Mice</samp>
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">USB 鼠标</samp>
- en: 'You can also activate mouse emulation with your Leonardo by including the Arduino
    Mouse library with the following two lines of code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过在草图中包含以下两行代码来使用 Leonardo 激活鼠标仿真功能：
- en: '[PRE15]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To have the Leonardo move the mouse pointer around as a USB mouse, use this
    function:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要让 Leonardo 像 USB 鼠标一样移动鼠标指针，使用这个功能：
- en: '[PRE16]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The parameter are as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 参数如下：
- en: <samp class="SANS_TheSansMonoCd_W7Bold_Italic_I_11">x</samp>    The amount to
    move on the x-axis. Use a positive number to move to the right, a negative number
    to move to the left, and 0 to stay on the current x-axis.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_Italic_I_11">x</samp>    在 x 轴上的移动量。使用正数向右移动，使用负数向左移动，0
    则保持在当前 x 轴位置。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_Italic_I_11">y</samp>    The amount to
    move on the y-axis. Use a positive number to move down, a negative number to move
    up, and 0 to stay on the current y-axis.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_Italic_I_11">y</samp>    在 y 轴上的移动量。使用正数向下移动，负数向上移动，0
    则保持在当前 y 轴位置。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_Italic_I_11">z</samp>    Emulates movement
    of a mouse scroll wheel. Use a positive number to roll “toward you,” and a negative
    number to roll “away from you.” If you have changed the default mouse operation
    in your computer’s operating system, you will need to swap negative for positive
    numbers.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_Italic_I_11">z</samp>    模拟鼠标滚轮的移动。使用正数向“你”滚动，使用负数向“远离你”滚动。如果你更改了计算机操作系统中默认的鼠标操作，你需要交换正数和负数。
- en: 'To end mouse emulation in a sketch, use:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要结束草图中的鼠标仿真，使用：
- en: '[PRE17]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When using the mouse emulation, you need a small delay of 2 ms after each mouse
    function to give the computer time to catch up. You can test controlling pointer
    movement with [Listing 11-4](#LiT-11-4).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用鼠标仿真时，每个鼠标功能后需要一个 2 毫秒的小延迟，以便计算机有时间跟上。你可以使用 [清单 11-4](#LiT-11-4) 来测试控制指针移动。
- en: '[PRE18]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 11-4: Controlling pointer
    movement</samp>'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 11-4：控制指针移动</samp>
- en: The sketch first initializes the library. The mouse pointer then moves 10 pixels
    to the left and 5 up ❶. There’s a short delay afterward, just to slow things down
    a little.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 草图首先初始化库，然后鼠标指针向左移动 10 像素，向上移动 5 像素❶。之后会有一个短暂的延迟，以稍微减慢操作速度。
- en: After you upload the sketch, your mouse pointer should meander toward the top
    left of the screen. You can always change its position with the PC mouse, too.
    When finished, upload a non-mouse sketch to stop the movement.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 上传草图后，你的鼠标指针应该会向屏幕左上方漂移。你也可以随时用 PC 鼠标改变其位置。完成后，上传一个非鼠标的草图以停止移动。
- en: You’ll now put these mouse-emulation functions to use with a simple project.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将通过一个简单的项目来使用这些鼠标仿真功能。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #34: Keeping Your PC Awake
    Automatically</samp>'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #34：自动保持电脑唤醒</samp>'
- en: Some PCs or other devices with USB mouse input may go into a “sleep mode” or
    require mouse movement on a regular basis to prove a user is present. In this
    project, you’ll program your Leonardo to “wiggle” the mouse every 30 seconds or
    so to keep the PC awake or the boss happy.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一些带有 USB 鼠标输入的 PC 或其他设备可能会进入“睡眠模式”，或定期需要鼠标移动以证明用户在场。在这个项目中，你将编程 Leonardo 每隔
    30 秒左右“晃动”一次鼠标，以保持 PC 唤醒或让老板满意。
- en: 'The only required hardware is your Arduino Leonardo and a matching USB cable.
    Enter and upload the following sketch:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一需要的硬件是你的 Arduino Leonardo 和匹配的 USB 电缆。输入并上传以下草图：
- en: '[PRE19]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The mouse pointer should move to the left ❶, wait a moment, move back to the
    right ❷, and then wait another moment, as instructed by the functions in the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">wiggleMouse()</samp> custom function.
    The delays in the function and in the main loop are purely arbitrary; alter them
    to suit your requirements.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 鼠标指针应该向左移动 ❶，稍等片刻，向右移动 ❷，然后再等片刻，正如<sup class="SANS_TheSansMonoCd_W5Regular_11">wiggleMouse()</sup>自定义函数中所指示的那样。函数和主循环中的延迟完全是任意的；你可以根据需要调整它们。
- en: <samp class="SANS_Futura_Std_Bold_B_11">USB Mouse Buttons</samp>
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">USB鼠标按钮</samp>
- en: To program your Leonardo to “click” (press and then release) the emulated mouse
    buttons, you can use
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 要让你的Leonardo模拟鼠标按钮“点击”（按下然后释放），可以使用
- en: '[PRE20]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: or
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE21]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: where <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">x</samp> can be
    <samp class="SANS_TheSansMonoCd_W5Regular_11">MOUSE_LEFT</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">MOUSE_RIGHT</samp>,
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">MOUSE_MIDDLE</samp> for the respective
    buttons.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">x</samp> 可以是 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">MOUSE_LEFT</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">MOUSE_RIGHT</samp>
    或 <samp class="SANS_TheSansMonoCd_W5Regular_11">MOUSE_MIDDLE</samp>，分别对应各个按钮。
- en: 'To press and hold down a mouse button, use the following function:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 要按下并保持鼠标按钮，可以使用以下函数：
- en: '[PRE22]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To release a mouse button being pressed, use the following function:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要释放已按下的鼠标按钮，可以使用以下函数：
- en: '[PRE23]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You can also use the same parameters as <samp class="SANS_TheSansMonoCd_W5Regular_11">Mouse.click()</samp>
    for the middle and right buttons. Note that the definition of what is left and
    right with regard to the mouse buttons is defined by the settings in your operating
    system. For example, if you’ve swapped the buttons (so “right” is the physical
    left button), you will need to take that into account.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用与<sup class="SANS_TheSansMonoCd_W5Regular_11">Mouse.click()</sup>相同的参数来控制中键和右键。请注意，鼠标按钮的左键和右键的定义由操作系统中的设置决定。例如，如果你交换了按钮（即“右键”是物理的左键），你需要考虑这一点。
- en: Let’s demonstrate mouse button control by creating a fun drawing project.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过创建一个有趣的绘画项目来演示鼠标按钮的控制。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #35: Creating a PC Random
    Painter</samp>'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #35：创建一个PC随机绘画工具</samp>'
- en: This project will randomly move the mouse pointer and randomly CTRL-click the
    left mouse button. By running this sketch in conjunction with a PC painting program,
    you can create some avant-garde Arduino-generated works of art.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目将随机移动鼠标指针并随机按下左键。通过将此草图与PC绘图程序结合运行，你可以创作一些前卫的Arduino生成的艺术作品。
- en: 'Again, the only hardware required is your Arduino Leonardo and matching USB
    cable. Enter, but don’t upload, the Project #35 sketch. Now open a PC painting
    program, such as Microsoft Paint, then switch over to the Arduino IDE and upload
    the sketch. Switch back to the paint software and place the cursor in the painting
    area after selecting a paintbrush and color. The sketch should start drawing based
    on random mouse movements, creating a painting like the one in [Figure 11-10](chapter11.xhtml#fig11-10).'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '再次提醒，所需的唯一硬件是你的Arduino Leonardo和匹配的USB线。输入但不要上传项目 #35 草图。现在打开一个PC绘图程序，如Microsoft
    Paint，然后切换到Arduino IDE并上传草图。上传后切回绘图软件，选择画笔和颜色后将光标放在绘图区域。草图应该开始根据随机鼠标移动进行绘制，创作出类似[图11-10](chapter11.xhtml#fig11-10)中的画作。'
- en: '![A SCREENSHOT OF AN EXAMPLE OUTPUT DRAWING FROM PROJECT #35](../images/fig11-10.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #35的示例输出图像截图](../images/fig11-10.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 11-10: Example results
    from the random PC painter</samp>'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图11-10：随机PC绘画工具的示例结果</samp>
- en: 'Let’s see how this works:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个是如何工作的：
- en: '[PRE24]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: To create this masterpiece, the sketch first presses the mouse button ❷, makes
    one of eight random mouse movements ❸, and then releases the mouse button ❹. It
    then makes another random mouse movement ❺ before repeating the process. The large
    delay ❶ gives you time to move from the Arduino IDE to the paint software after
    uploading the sketch.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创作这幅杰作，草图首先按下鼠标按钮 ❷，执行八种随机鼠标移动之一 ❸，然后释放鼠标按钮 ❹。接着，它再做一次随机鼠标移动 ❺，然后重复此过程。大的延迟
    ❶ 让你有时间在上传草图后从Arduino IDE切换到绘图软件。
- en: For a final challenge, you might add a start button to your project so the Arduino
    doesn’t take over the keyboard or the mouse until you’re ready for it to do so.
    You might also try making an Etch A Sketch simulator, using two potentiometers
    for x- and y-axis control of the mouse.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后的挑战，你可以为你的项目添加一个启动按钮，这样 Arduino 就不会在你准备好之前接管键盘或鼠标。你还可以尝试制作一个 Etch A Sketch
    模拟器，使用两个电位器来控制鼠标的 x 轴和 y 轴。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">继续前进</samp>
- en: At this point, you have the skills and practice you need to implement USB keyboard
    and mouse emulation for your own projects. You learned how to instruct the Arduino
    Leonardo or compatible board to behave as a keyboard and also behave as a mouse.
    Whenever you do so, make sure that there is a sufficient delay at the start of
    your project to enable any required preparation on the PC. This also gives you
    time to easily upload a new sketch to the board if you’re finished with the emulation
    experiments. If you completely lose control of your board, you can upload a new
    sketch using USBasp hardware via the ICSP pins.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，你已经具备了实施 USB 键盘和鼠标仿真所需的技能和实践。你学会了如何指示 Arduino Leonardo 或兼容板作为键盘和鼠标进行操作。每当你这么做时，确保在项目开始时有足够的延迟，以便在
    PC 上进行任何必要的准备。这也给你时间轻松地上传新的草图到板子上，如果你完成了仿真实验。如果你完全失去了对板子的控制，可以通过 ICSP 引脚使用 USBasp
    硬件上传新的草图。
- en: In the next chapter, you’ll learn to read and write data to and from USB flash
    drives with your Arduino.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将学习如何使用 Arduino 读取和写入 USB 闪存驱动器的数据。
