["```\nAC_SUBST(shell_var[, value])\n```", "```\nAC_DEFINE(variable, value[, description])\nAC_DEFINE(variable)\nAC_DEFINE_UNQUOTED(variable, value[, description])\nAC_DEFINE_UNQUOTED(variable)\n```", "```\nAC_PROG_CC([compiler-search-list])\n```", "```\n--snip--\n# Checks for programs.\nAC_PROG_CC\nAC_PROG_INSTALL\n--snip--\n```", "```\n--snip--\n# VPATH-specific substitution variables\nsrcdir = @srcdir@\nVPATH = @srcdir@\n\n# Tool-specific substitution variables\nCC = @CC@\nCFLAGS = @CFLAGS@\nCPPFLAGS = @CPPFLAGS@\n\nall: jupiter\n\njupiter: main.c\n        $(CC) $(CPPFLAGS) $(CFLAGS) -I. -I$(srcdir) -I.. -o $@ $(srcdir)/main.c\n--snip--\n```", "```\n--snip--\n# Tool-specific substitution variables\nCC = @CC@\nCFLAGS = @CFLAGS@\nCPPFLAGS = @CPPFLAGS@\nINSTALL = @INSTALL@\nINSTALL_DATA = @INSTALL_DATA@\nINSTALL_PROGRAM = @INSTALL_PROGRAM@\nINSTALL_SCRIPT = @INSTALL_SCRIPT@\n--snip--\ninstall:\n        $(INSTALL) -d $(DESTDIR)$(bindir)\n $(INSTALL_PROGRAM) -m 0755 jupiter $(DESTDIR)$(bindir)\n--snip--\n```", "```\n$ cd jupiter\n$ ./configure YACC=\"$HOME/bin/bison -y\"\n--snip--\n```", "```\nAC_CHECK_PROG(variable, prog-to-check-for, value-if-found,\n    [value-if-not-found], [path], [reject])\n```", "```\n--snip--\nAC_PREREQ(2.69)\nAC_INIT([Jupiter], [1.0], [jupiter-bugs@example.org])\nAC_CONFIG_SRCDIR([src/main.c])\nAC_CONFIG_HEADER([config.h])\n\n# Checks for programs.\nAC_PROG_CC\n_DEBUG_START_\nAC_CHECK_PROG([bash_var], [bash], [yes], [no],, [/usr/sbin/bash])\n_DEBUG_END_\nAC_PROG_INSTALL\n--snip--\n```", "```\n   --snip--\n   _DEBUG_START_\n➊ # Extract the first word of \"bash\" so it can be a program name with args.\n   set dummy bash; ac_word=$2\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n   $as_echo_n \"checking for $ac_word... \" >&6; }\n   if ${ac_cv_prog_bash_var+:} false; then :\n     $as_echo_n \"(cached) \" >&6\n   else\n     if test -n \"$bash_var\"; then\n     ac_cv_prog_bash_var=\"$bash_var\" # Let the user override the test.\n   else\n     ac_prog_rejected=no\n   as_save_IFS=$IFS; IFS=$PATH_SEPARATOR\n   for as_dir in $PATH\n   do\n     IFS=$as_save_IFS\n     test -z \"$as_dir\" && as_dir=.\n       for ac_exec_ext in '' $ac_executable_extensions; do\n     if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n     ➋ if test \"$as_dir/$ac_word$ac_exec_ext\" = \"/usr/sbin/bash\"; then\n           ac_prog_rejected=yes\n           continue\n         fi\n        ac_cv_prog_bash_var=\"yes\"\n        $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\"\n    >&5\n        break 2\n      fi\n    done\n      done\n  IFS=$as_save_IFS\n\n➌ if test $ac_prog_rejected = yes; then\n    # We found a bogon in the path, so make sure we never use it.\n    set dummy $ac_cv_prog_bash_var\n    shift\n    if test $# != 0; then\n      # We chose a different compiler from the bogus one.\n      # However, it has the same basename, so the bogon will be chosen\n      # first if we set bash_var to just the basename; use the full file name.\n      shift\n      ac_cv_prog_bash_var=\"$as_dir/$ac_word${1+' '}$@\"\n    fi\n  fi\n    test -z \"$ac_cv_prog_bash_var\" && ac_cv_prog_bash_var=\"no\"\n  fi\n  fi\n  bash_var=$ac_cv_prog_bash_var\n  if test -n \"$bash_var\"; then\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $bash_var\" >&5\n  $as_echo \"$bash_var\" >&6; }\n  else\n       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n  $as_echo \"no\" >&6; }\n  fi\n\n  _DEBUG_END_\n  --snip--\n```", "```\nAC_CHECK_PROG([bash_shell],[bash -x],[bash -x],,,[/usr/sbin/bash])\n```", "```\n#include <stdio.h>\n#include <stdlib.h>\n#include <pthread.h>\n\nstatic void * print_it(void * data)\n{\n    printf(\"Hello from %s!\\n\", (const char *)data);\n    return 0;\n}\n\nint main(int argc, char * argv[])\n{\n    pthread_t tid;\n    pthread_create(&tid, 0, print_it, argv[0]);\n    pthread_join(tid, 0);\n    return 0;\n}\n```", "```\nprogram: main.c\n        $(CC) ... -lpthread ...\n```", "```\nAC_SEARCH_LIBS(function, search-libs,\n    [action-if-found], [action-if-not-found], [other-libraries])\n```", "```\n--snip--\n# Checks for libraries.\nAC_SEARCH_LIBS([pthread_create], [pthread])\n--snip--\n```", "```\n--snip--\n# Tool-specific substitution variables\nCC = @CC@\nLIBS = @LIBS@\nCFLAGS = @CFLAGS@\nCPPFLAGS = @CPPFLAGS@\n--snip--\njupiter: main.c\n        $(CC) $(CFLAGS) $(CPPFLAGS) -I. -I$(srcdir) -I..\\\n          -o $@ $(srcdir)/main.c $(LIBS)\n--snip--\n```", "```\nAC_CHECK_HEADERS(header-file..., [action-if-found],\n    [action-if-not-found], [includes = 'AC_INCLUDES_DEFAULT'])\n```", "```\n--snip--\n# Checks for header files.\nAC_CHECK_HEADERS([stdlib.h pthread.h])\n--snip--\n```", "```\n#include \"config.h\"\n\n#include <stdio.h>\n#include <stdlib.h>\n\n#if HAVE_PTHREAD_H\n# include <pthread.h>\n#endif\n\nstatic void * print_it(void * data)\n{\n    printf(\"Hello from %s!\\n\", (const char *)data);\n    return 0;\n}\n\nint main(int argc, char * argv[])\n{\n#if HAVE_PTHREAD_H\n    pthread_t tid;\n    pthread_create(&tid, 0, print_it, argv[0]);\n    pthread_join(tid, 0);\n#else\n    print_it(argv[0]);\n#endif\n    return 0;\n}\n```", "```\n--snip--\n# Tool-related substitution variables\nCC = @CC@\nDEFS = @DEFS@\nLIBS = @LIBS@\nCFLAGS = @CFLAGS@\nCPPFLAGS = @CPPFLAGS@\n--snip--\njupiter: main.c\n        $(CC) $(CFLAGS) $(DEFS) $(CPPFLAGS) -I. -I$(srcdir) -I..\\\n          -o $@ $(srcdir)/main.c $(LIBS)\n--snip--\n```", "```\n--snip--\n# Checks for libraries.\nhave_pthreads=no\nAC_SEARCH_LIBS([pthread_create], [pthread], [have_pthreads=yes])\n\n# Checks for header files.\nAC_CHECK_HEADERS([stdlib.h])\n\nif test \"x${have_pthreads}\" = xyes; then\n    AC_CHECK_HEADERS([pthread.h], [], [have_pthreads=no])\nfi\n\nif test \"x${have_pthreads}\" = xno; then\n    AC_MSG_WARN([\n ------------------------------------------\n  Unable to find pthreads on this system.\n  Building a single-threaded version.\n  ------------------------------------------])\nfi\n--snip--\n```", "```\n$ ./bootstrap.sh\n$ ./configure\nchecking for gcc... gcc\n--snip--\nchecking for library containing pthread_create... -lpthread\n--snip--\nchecking pthread.h usability... yes\nchecking pthread.h presence... yes\nchecking for pthread.h... yes\nconfigure: creating ./config.status\nconfig.status: creating Makefile\nconfig.status: creating src/Makefile\nconfig.status: creating config.h\n$\n```", "```\n$ ./configure ac_cv_header_pthread_h=no\nchecking for gcc... gcc\n--snip--\nchecking for library containing pthread_create... -lpthread\n--snip--\nchecking for pthread.h... (cached) no\nconfigure: WARNING:\n  ------------------------------------------\n  Unable to find pthreads on this system.\n  Building a single-threaded version.\n  ------------------------------------------\nconfigure: creating ./config.status\nconfig.status: creating Makefile\nconfig.status: creating src/Makefile\nconfig.status: creating config.h\n$\n```", "```\n--snip--\n# Checks for libraries.\nhave_pthreads=no\nAC_SEARCH_LIBS([pthread_create], [pthread], [have_pthreads=yes])\n\n# Checks for header files.\nAC_CHECK_HEADERS([stdlib.h])\n\nif test \"x${have_pthreads}\" = xyes; then\n    AC_CHECK_HEADERS([pthread.h], [], [have_pthreads=no])\nfi\n\nif test \"x${have_pthreads}\" = xno; then\n    AC_MSG_ERROR([\n  ------------------------------------------\n  The pthread library and header files are\n  required to build jupiter. Stopping...\n  Check 'config.log' for more information.\n  ------------------------------------------])\nfi\n--snip--\n```", "```\nAC_MSG_CHECKING(feature-description)\nAC_MSG_RESULT(result-description)\nAC_MSG_NOTICE(message)\nAC_MSG_ERROR(error-description[, exit-status])\nAC_MSG_FAILURE(error-description[, exit-status])\nAC_MSG_WARN(problem-description)\n```", "```\nAC_ARG_WITH(package, help-string, [action-if-given], [action-if-not-given])\nAC_ARG_ENABLE(feature, help-string, [action-if-given], [action-if-not-given])\n```", "```\n--snip--\nAC_ARG_ENABLE([async-exec],\n    [  --enable-async-exec     enableasync exec],\n    [async_exec=${enableval}], [async_exec=no])\n--snip--\n```", "```\n--snip--\nAC_ARG_ENABLE([async-exec],\n    [  --disable-async-exec    disableasync exec],\n    [async_exec=${enableval}], [async_exec=yes])\n--snip--\n```", "```\n--snip--\n# Checks for programs.\nAC_PROG_CC\nAC_PROG_INSTALL\n\n# Checks for header files.\nAC_CHECK_HEADERS([stdlib.h])\n\n# Checks for command line options\nAC_ARG_ENABLE([async-exec],\n    [  --disable-async-exec    disable async execution feature],\n    [async_exec=${enableval}], [async_exec=yes])\n\nhave_pthreads=no\nAC_SEARCH_LIBS([pthread_create], [pthread], [have_pthreads=yes])\n\nif test \"x${have_pthreads}\" = xyes; then\n    AC_CHECK_HEADERS([pthread.h], [], [have_pthreads=no])\nfi\n\nif test \"x${have_pthreads}\" = xno; then\n ➊ if test \"x${async_exec}\" = xyes; then\n        AC_MSG_WARN([\n  ------------------------------------------\n  Unable to find pthreads on this system.\n  Building a single-threaded version.\n  ------------------------------------------])\n    fi\n    async_exec=no\nfi\n\nif test \"x${async_exec}\" = xyes; then\n    AC_DEFINE([ASYNC_EXEC], [1], [async execution enabled])\nfi\n\n# Checks for libraries.\n\n# Checks for typedefs, structures, and compiler characteristics.\n--snip--\n```", "```\n--snip--\n#if HAVE_PTHREAD_H\n# include <pthread.h>\n#endif\n\nstatic void * print_it(void * data)\n{\n    printf(\"Hello from %s!\\n\", (const char *)data);\n    return 0;\n}\n\nint main(int argc, char * argv[])\n{\n#if ASYNC_EXEC\n    pthread_t tid;\n    pthread_create(&tid, 0, print_it, argv[0]);\n    pthread_join(tid, 0);\n#else\n    print_it(argv[0]);\n#endif\n    return 0;\n}\n```", "```\n--snip--\n# Checks for command line options.\nAC_ARG_ENABLE([async-exec],\n  [    --disable-async-exec        disable async execution feature],\n  [async_exec=${enableval}], [async_exec=yes])\n\nif test \"x${async_exec}\" = xyes; then\n    have_pthreads=no\n    AC_SEARCH_LIBS([pthread_create], [pthread], [have_pthreads=yes])\n\n    if test \"x${have_pthreads}\" = xyes; then\n        AC_CHECK_HEADERS([pthread.h], [], [have_pthreads=no])\n    fi\n\n    if test \"x${have_pthreads}\" = xno; then\n        AC_MSG_WARN([\n  -----------------------------------------\n  Unable to find pthreads on this system.\n  Building a single-threaded version.\n  -----------------------------------------])\n        async_exec=no\n    fi\nfi\n\nif test \"x${async_exec}\" = xyes; then\n    AC_DEFINE([ASYNC_EXEC], 1, [async execution enabled])\nfi\n--snip--\n```", "```\nAS_HELP_STRING(left-hand-side, right-hand-side,\n    [indent-column = '26'], [wrap-column = '79'])\n```", "```\n--snip--\nAC_ARG_ENABLE([async-exec],\n    [AS_HELP_STRING([--disable-async-exec],\n        [disable asynchronous execution @<:@default: no@:>@])],\n    [async_exec=${enableval}], [async_exec=yes])\n--snip--\n```", "```\nint main()\n{\n ➊ static int test_array[1 - 2 * !((uint16_t) -1 >> (16 - 1) == 1)];\n    test_array[0] = 0;\n    return 0;\n}\n```", "```\n#include \"config.h\"\n\n#if HAVE_STDINT_H\n# include <stdint.h>\n#elif HAVE_INTTYPES_H\n# include <inttypes.h>\n#endif\n--snip--\nuint16_t x;\n--snip--\n```", "```\nAC_CHECK_TYPES(types, [action-if-found], [action-if-not-found],\n    [includes = 'AC_INCLUDES_DEFAULT'])\n```", "```\n#include <stdio.h>\n#ifdef HAVE_SYS_TYPES_H\n# include <sys/types.h>\n#endif\n#ifdef HAVE_SYS_STAT_H\n# include <sys/stat.h>\n#endif\n#ifdef STDC_HEADERS\n# include <stdlib.h>\n# include <stddef.h>\n#else\n# ifdef HAVE_STDLIB_H\n#  include <stdlib.h>\n# endif\n#endif\n#ifdef HAVE_STRING_H\n# if !defined STDC_HEADERS && defined HAVE_MEMORY_H\n#  include <memory.h>\n# endif\n# include <string.h>\n#endif\n#ifdef HAVE_STRINGS_H\n# include <strings.h>\n#endif\n#ifdef HAVE_INTTYPES_H\n# include <inttypes.h>\n#endif\n#ifdef HAVE_STDINT_H\n# include <stdint.h>\n#endif\n#ifdef HAVE_UNISTD_H\n# include <unistd.h>\n#endif\n```", "```\n   AC_CHECK_TYPES([struct doodah], [], [], [\n➊ AC_INCLUDES_DEFAULT\n   #include<doodah.h>\n   #include<doodahday.h>])\n```", "```\n--snip--\nAC_OUTPUT\n\ncat << EOF\n-------------------------------------------------\n\n${PACKAGE_NAME} Version ${PACKAGE_VERSION}\n\nPrefix: '${prefix}'.\nCompiler: '${CC} ${CFLAGS} ${CPPFLAGS}'\n\nPackage features:\n  Async Execution: ${async_exec}\n\nNow type 'make @<:@<target>@:>@'\n  where the optional <target> is:\n    all                - build all binaries\n    install            - install everything\n\n--------------------------------------------------\nEOF\n```"]