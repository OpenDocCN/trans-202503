["```\ndef get_reachable(g: Graph, index: int) -> set:  \n    seen: set = set()\n    pending: queue.Queue = queue.Queue()\n\n  ❶ seen.add(index)\n    pending.put(index)\n\n  ❷ while not pending.empty():\n        current_index: int = pending.get()\n        current: Node = g.nodes[current_index]\n        for edge in current.get_edge_list():\n            neighbor: int = edge.to_node\n          ❸ if neighbor not in seen:\n                pending.put(neighbor)\n                seen.add(neighbor)\n\n    return seen \n```", "```\ndef check_strongly_connected(g: Graph, inds: list) -> bool: \n    for i in inds:\n        reachable = get_reachable(g, i)\n        for other in inds:\n            if other not in reachable:\n                return False\n    return True \n```", "```\ndef make_transpose_graph(g: Graph) -> Graph:  \n  ❶ g2: Graph = Graph(g.num_nodes, undirected=g.undirected)\n    for node in g.nodes:\n        for edge in node.get_edge_list():\n            g2.insert_edge(edge.to_node, edge.from_node, edge.weight)\n    return g2 \n```", "```\ndef add_reachable(g: Graph, index: int, seen: list, reachable: list): \n    seen[index] = True\n    current = g.nodes[index]\n\n    for edge in current.get_edge_list():\n        if not seen[edge.to_node]:\n            add_reachable(g, edge.to_node, seen, reachable)\n    reachable.append(index) \n```", "```\ndef kosaraju_sharir(g: Graph) -> list: \n    seen1: list = [False] * g.num_nodes\n    finish_ordered: list = []\n  ❶ for ind in range(g.num_nodes):\n        if not seen1[ind]:\n            add_reachable(g, ind, seen1, finish_ordered) ❷ gT: Graph = make_transpose_graph(g)\n\n    seen2: list = [False] * g.num_nodes\n    components: list = []\n  ❸ while finish_ordered:\n        start: int = finish_ordered.pop()\n        if not seen2[start]:\n            new_component: list = []\n          ❹ add_reachable(gT, start, seen2, new_component)\n            components.append(new_component)\n\n    return components \n```"]