- en: Chapter 11. Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章：安全
- en: When users sign up for an account on your website, they trust that you will
    keep their data safe and secure. Unfortunately, as the popularity of your application
    increases, so does the likelihood of attack. Even if your application is not popular
    yet, it can still fall victim to automated systems that scan the web looking for
    vulnerable sites.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在你的网站上注册账户时，他们信任你会保护他们的数据安全。遗憾的是，随着你的应用越来越受欢迎，攻击的可能性也会增加。即使你的应用目前不太受欢迎，它仍然可能成为自动化系统的目标，这些系统会扫描网络，寻找易受攻击的网站。
- en: In this chapter, you’ll learn about four of the most common security vulnerabilities
    and how to protect your site from them. We’ll discuss authorization, injection,
    cross-site scripting, and cross-site request forgery attacks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习四种最常见的安全漏洞，以及如何保护你的站点免受它们的侵害。我们将讨论授权、注入攻击、跨站脚本攻击和跨站请求伪造攻击。
- en: Authorization Attacks
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 授权攻击
- en: You created an authentication system in [Chapter 9](ch09.html "Chapter 9. Authentication"),
    but authentication is not the same thing as authorization. *Authentication* identifies
    a user. *Authorization* specifies what a logged-in user can access within your
    application. Your authentication system uses an email address and a password to
    identify a user. Authorization systems usually deal with roles or privileges.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你在[第9章](ch09.html "第9章：认证")中创建了一个认证系统，但认证并不等于授权。*认证*是用来识别用户的。*授权*则是指定一个已登录用户可以在你的应用中访问的内容。你的认证系统通过电子邮件地址和密码来识别用户。授权系统通常处理角色或权限。
- en: At this point, you aren’t defining roles for the users in your application,
    but some privileges should be in place. For example, a user should be able to
    view and edit his or her own posts but only view posts belonging to another user.
    A user should also be able to moderate comments on his or her own posts, even
    if another user added the comment.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你还没有为应用中的用户定义角色，但应该为一些权限做出规定。例如，用户应该能够查看和编辑自己发布的帖子，但只能查看其他用户发布的帖子。用户还应该能够管理自己帖子下的评论，即使这些评论是由其他用户添加的。
- en: An *authorization attack* occurs when a user manages to bypass privileges and
    access a resource that is owned by another user. The most common type of authorization
    attack is known as an *insecure direct object reference*, which means the user
    can manipulate the URL to access a restricted resource in your application.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*授权攻击*发生在用户设法绕过权限，访问属于另一个用户的资源时。最常见的授权攻击类型是*不安全的直接对象引用*，这意味着用户可以通过操控URL来访问你应用中受限的资源。'
- en: 'Let’s look at an example from your social app. This code sample creates a method
    to allow users to edit previously created text posts, but it includes a resource
    lookup that allows an insecure direct object reference:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个来自社交应用的示例。这段代码示例创建了一个方法，允许用户编辑之前创建的文本帖子，但它包含一个资源查找，这使得不安全的直接对象引用成为可能：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This method finds the `TextPost` to edit using the `id` parameter passed in
    as part of the URL, regardless of who originally created it. Because this code
    doesn’t check which user is trying to access the post, any authenticated user
    could edit any post in the application. All the user has to do is open one of
    his or her posts to edit, work out which part of the URL represents the post `id`,
    and change that value to another post’s `id`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法使用作为URL一部分传入的`id`参数来查找要编辑的`TextPost`，无论最初是谁创建的。因为这段代码没有检查哪个用户在尝试访问该帖子，所以任何经过身份验证的用户都可以编辑应用中的任何帖子。用户只需打开自己的一个帖子进行编辑，找出URL中表示帖子的`id`的部分，并将该值更改为另一个帖子的`id`。
- en: 'You only want users to be able to edit their own posts. This next listing shows
    a better way to handle this lookup:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你只希望用户能够编辑他们自己的帖子。下面的列表展示了一种更好的处理这种查找的方法：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By using `current_user.text_posts`, the `find` method is restricted to only
    posts belonging to the current user. Now if a user changes the `id` in the URL
    in an attempt to modify another user’s post, the `find` will fail and the user
    should see the 404 error page. If a resource is owned by a user, always reference
    that user when finding the resource in the database.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`current_user.text_posts`，`find`方法仅限于查找当前用户的帖子。现在，如果用户在尝试修改其他用户的帖子时更改了URL中的`id`，`find`将会失败，用户应该会看到404错误页面。如果某个资源属于某个用户，在数据库中查找该资源时，始终引用该用户。
- en: 'Now that you know the correct way to find a post to be edited, add the previous
    method to the text post controller at *app/controllers/text_posts_controller.rb*.
    When the user submits the `edit` text post form, the changes are sent to the `update`
    action. Use the same authorization idea to add an `update` method for text posts:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道了正确的找到要编辑的帖子的方法，将之前的方法添加到文本帖子控制器 *app/controllers/text_posts_controller.rb*
    中。当用户提交`edit`文本帖子表单时，修改内容会发送到`update`操作。使用相同的授权方法，为文本帖子添加`update`方法：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This method finds the correct text post ➊ belonging to the current user and
    calls the `update` method ➋ using the `params` from the text post form. If the
    call to `update` is successful, the text post is updated in the database and the
    user is redirected to the updated post. Otherwise, the `edit` view is rendered
    again with an error message.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法会找到属于当前用户的正确文本帖子 ➊，并使用文本帖子表单中的`params`调用`update`方法 ➋。如果`update`调用成功，文本帖子会在数据库中更新，用户会被重定向到更新后的帖子。否则，`edit`视图会重新渲染，并显示错误信息。
- en: 'Next, create the file *app/views/text_posts/edit.html.erb* and add the `edit`
    view for text posts:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建文件 *app/views/text_posts/edit.html.erb*，并为文本帖子添加`edit`视图：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This view is the same as the `new` view for text posts except for the heading.
    This view reuses the form partial you created in the last chapter. Finally, add
    a link to the `edit` action in the `TextPost` partial at *app/views/text_posts/_text_post.html.erb*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个视图与文本帖子的`new`视图相同，唯一不同的是标题。这个视图重用了你在上一章中创建的表单局部视图。最后，在 *app/views/text_posts/_text_post.html.erb*
    中的`TextPost`局部视图添加指向`edit`操作的链接。
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This link should only appear if the text post belongs to the current user ➊.
    Editing image posts follows the same pattern. Add the `edit` and `update` methods,
    complete with authorization, to *app/controllers/image_posts_controller.rb*, create
    an `edit` view for image posts at *app/views/image_posts/edit.html.erb*, and add
    a link to the `edit` action in the `ImagePost` partial at *app/views/image_posts/_image_post.html.erb*.
    These steps are covered in Exercise 1 at the end of this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 该链接仅在文本帖子属于当前用户 ➊ 时显示。编辑图片帖子遵循相同的模式。将`edit`和`update`方法添加到 *app/controllers/image_posts_controller.rb*，为图片帖子在
    *app/views/image_posts/edit.html.erb* 创建`edit`视图，并在 *app/views/image_posts/_image_post.html.erb*
    中的`ImagePost`局部视图添加指向`edit`操作的链接。这些步骤在本章末的练习 1 中讲解。
- en: Injection Attacks
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注入攻击
- en: An *injection attack* occurs when input from a user is executed as part of the
    application. Injection attacks are extremely common, especially in older applications.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*注入攻击*发生在用户的输入作为应用程序的一部分被执行时。注入攻击非常常见，尤其是在较旧的应用程序中。'
- en: 'The first rule of avoiding injection attacks is *never trust input from the
    user*. If an application does not ensure that all data entered by a user is safe,
    then it is vulnerable to injection attacks. Keep this in mind as we look at two
    types of injection attacks in this section: SQL injection and cross-site scripting.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 避免注入攻击的第一条规则是*绝不信任用户输入*。如果一个应用程序没有确保用户输入的所有数据都是安全的，那么它就容易受到注入攻击。记住这一点，我们将在本节中讨论两种类型的注入攻击：SQL注入和跨站脚本攻击。
- en: SQL Injection
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL注入
- en: In a *SQL injection* attack, user input is added directly to an SQL statement.
    If a malicious user provides actual SQL code as input, he or she could bypass
    your application’s authorization system, query your application’s database, and
    obtain or delete restricted information.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在*SQL注入*攻击中，用户输入会直接添加到SQL语句中。如果恶意用户提供实际的SQL代码作为输入，他或她可能绕过应用程序的授权系统，查询应用程序的数据库，并获取或删除受限信息。
- en: 'For example, consider an application where the Rails built-in secure password
    feature is not used. Instead, the developer stores usernames and passwords in
    the database and has written his or her own `authenticate` method to verify a
    user’s credentials. This custom `User.authenticate` method shows what *not* to
    do, as it’s vulnerable to SQL injection:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑一个没有使用Rails内建安全密码功能的应用程序。相反，开发者将用户名和密码存储在数据库中，并编写了自己的`authenticate`方法来验证用户的凭证。这个自定义的`User.authenticate`方法展示了*不该*做的事情，因为它容易受到SQL注入攻击：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This method accepts arguments for `username` and `password` ➊. These values
    are entered by the user and passed to the controller as parameters. These variables
    are then added to a `where` call using string interpolation ➋.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法接受`username`和`password` ➊ 作为参数。这些值由用户输入并作为参数传递给控制器。然后，这些变量会使用字符串插值添加到`where`调用中
    ➋。
- en: 'This method returns the correct user object for valid username and password
    combinations. For example, assuming a `User` with `username` tony and `password`
    secret, this method returns the `User`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法对于有效的`username`和`password`组合会返回正确的用户对象。例如，假设一个`User`的`username`为tony，`password`为secret，这个方法会返回该`User`：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The method call then generates the following SQL code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 方法调用然后生成以下SQL代码：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This method also works correctly when passed invalid `username` and `password`
    combinations:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法在传入无效的`username`和`password`组合时也能正确工作：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this case, the `password` is not valid so the method returns `nil`. So far,
    so good!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`password`无效，因此方法返回`nil`。到目前为止，一切正常！
- en: Bypassing an Authentication System
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绕过认证系统
- en: 'Unfortunately, savvy attackers know a handy SQL string that allows them to
    bypass completely this `authenticate` method: `'' OR ''1''=''1`. In SQL, the statement
    `''1''=''1''` evaluates to `TRUE`, so if it is added to any other conditional
    statement with `OR`, the entire conditional evaluates to `TRUE`.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，经验丰富的攻击者知道一个方便的SQL字符串，可以完全绕过这个`authenticate`方法：`' OR '1'='1`。在SQL中，`'1'='1'`语句的结果是`TRUE`，所以如果它与`OR`一起添加到任何其他条件语句中，整个条件语句都会被计算为`TRUE`。
- en: 'Let’s see what happens when this string is passed to the authenticate method
    for `username` and `password`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当这个字符串传递给`authenticate`方法的`username`和`password`时会发生什么：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'I didn’t pass the method any valid data, so how did the `authenticate` method
    succeed? The SQL code generated by the method call shows the trick:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有向方法传递任何有效的数据，那么`authenticate`方法是如何成功的呢？方法调用生成的SQL代码揭示了其中的技巧：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Even though there is no user with an empty string for `username` and `password`,
    the addition of `OR '1'='1'` causes the `WHERE` clause to evaluate to `TRUE` and
    the method returns the first user in the database. The attacker is now logged
    in as the first user. This attack is made worse by the fact that the first user
    in the database usually belongs to the application’s creator, who might also have
    special privileges.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 即使数据库中没有`username`和`password`为空字符串的用户，`OR '1'='1'`的添加使得`WHERE`子句计算为`TRUE`，然后该方法返回数据库中的第一个用户。攻击者现在以第一个用户身份登录。这个攻击的危害加剧，因为数据库中的第一个用户通常是应用程序的创建者，他可能还拥有特殊权限。
- en: Preventing SQL Injection
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 防止SQL注入
- en: Thankfully, you can usually find SQL injection errors just by looking at your
    code carefully. If you see string interpolation inside a `where` method, assume
    it is dangerous and needs to be corrected.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，您通常可以通过仔细检查代码找到SQL注入错误。如果您看到`where`方法内部有字符串插值，假设它是危险的并且需要修正。
- en: 'If you must build your own query string, switch to hash conditions:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您必须构建自己的查询字符串，请切换到哈希条件：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, the string is completely removed from the call to the `where` method.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，字符串被完全移除出对`where`方法的调用。
- en: Cross-Site Scripting
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨站脚本
- en: '*Cross-site scripting (XSS)* is another common injection attack. In a cross-site
    scripting attack, an attacker is allowed to enter malicious JavaScript code into
    your application. Any text field can potentially be used in a cross-site scripting
    attack. When another user views a page with malicious JavaScript, the user’s browser
    executes the code as if it were part of your application.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*跨站脚本攻击（XSS）*是另一种常见的注入攻击。在跨站脚本攻击中，攻击者被允许向您的应用程序中输入恶意的JavaScript代码。任何文本字段都可能被用于跨站脚本攻击。当另一个用户查看包含恶意JavaScript的页面时，用户的浏览器会将代码作为应用程序的一部分执行。'
- en: Cross-site scripting vulnerabilities can be exploited to deface your website
    or even display fake log-in forms in an attempt to steal user credentials. The
    possibilities are almost endless if an attacker is able to inject code into your
    site.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 跨站脚本漏洞可以被利用来篡改您的网站，甚至显示假的登录表单，试图窃取用户凭据。如果攻击者能够向您的网站注入代码，几乎可以做任何事情。
- en: Built-in Protection
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内置保护
- en: 'Rails includes protection from cross-site scripting by default. Your application
    is safe from XSS attacks unless you explicitly bypass this protection. As a quick
    check, try entering the following JavaScript code in the body of a new text post:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Rails 默认提供跨站脚本保护。除非您明确绕过此保护，否则您的应用程序是安全的，免受XSS攻击。作为快速检查，尝试在新文本帖子的正文中输入以下JavaScript代码：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: After saving this post, you should see that before displaying text on the page,
    as shown in [Figure 11-1](ch11.html#text_post_with_escaped_html "Figure 11-1. Text
    post with escaped HTML"), Rails first *escapes* all HTML tags by replacing special
    characters with their corresponding character entities.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 保存此帖子后，你会看到在显示文本之前，Rails会首先*转义*所有HTML标签，通过将特殊字符替换为相应的字符实体，正如[图 11-1](ch11.html#text_post_with_escaped_html
    "图 11-1. 带有转义HTML的文本帖子")所示。
- en: '![Text post with escaped HTML](httpatomoreillycomsourcenostarchimages2169102.png.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![带有转义HTML的文本帖子](httpatomoreillycomsourcenostarchimages2169102.png.jpg)'
- en: Figure 11-1. Text post with escaped HTML
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-1. 带有转义HTML的文本帖子
- en: For example, less-than signs are replaced with `&lt;` and greater-than signs
    with `&gt;`. Instead of being executed, the code is displayed on the page like
    any other text. So if you never plan to allow users to enter HTML into your site,
    your application is safe from cross-site scripting.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，小于号被替换为 `&lt;`，大于号被替换为 `&gt;`。这些代码不会被执行，而是像其他文本一样显示在页面上。所以如果你不打算允许用户在你的网站中输入HTML，你的应用程序就可以避免跨站脚本攻击。
- en: 'Unfortunately, users might like to enter HTML tags to format their posts in
    your application. In this case, your site will need to accept at least a few HTML
    tags. You can turn off the automatic escaping of HTML tags by using the `raw`
    helper method in your view. Open *app/views/text_posts/_text_post.html.erb* and
    add `raw` before `text_post.body`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，用户可能会希望在你的应用程序中输入HTML标签来格式化他们的帖子。在这种情况下，你的网站至少需要接受一些HTML标签。你可以通过在视图中使用
    `raw` 辅助方法来关闭HTML标签的自动转义功能。打开 *app/views/text_posts/_text_post.html.erb* 并在 `text_post.body`
    前添加 `raw`：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now when you refresh the page in your browser, the script tag will not be escaped,
    and you should see a pop-up window with the text “XSS,” as shown in [Figure 11-2](ch11.html#text_post_with_xss_vulnerability
    "Figure 11-2. Text post with XSS vulnerability").
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你在浏览器中刷新页面时，script 标签将不会被转义，你应该会看到一个弹出窗口，显示“XSS”，如[图 11-2](ch11.html#text_post_with_xss_vulnerability
    "图 11-2. 带有XSS漏洞的文本帖子")所示。
- en: '![Text post with XSS vulnerability](httpatomoreillycomsourcenostarchimages2169104.png.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![带有XSS漏洞的文本帖子](httpatomoreillycomsourcenostarchimages2169104.png.jpg)'
- en: Figure 11-2. Text post with XSS vulnerability
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-2. 带有XSS漏洞的文本帖子
- en: The trick is to let your application only accept safe tags, such as `<strong>`
    for bold, `<em>` for italics, and `<p>` for marking paragraphs, while rejecting
    dangerous tags such as `<script>`. You might be tempted to write your own helper
    method to deal with these dangerous tags, but thankfully, Rails provides the `sanitize`
    helper method to take care of this for you.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 诀窍是让你的应用程序只接受安全的标签，如 `<strong>` 用于加粗，`<em>` 用于斜体，`<p>` 用于标记段落，同时拒绝诸如 `<script>`
    这样的危险标签。你可能会想自己编写一个辅助方法来处理这些危险标签，但幸运的是，Rails 提供了 `sanitize` 辅助方法来帮你处理这些问题。
- en: The sanitize method
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sanitize 方法
- en: The `sanitize` helper method removes all HTML tags that are not explicitly allowed
    by its whitelist. You can see the list of allowed tags by entering **`ActionView::Base.sanitized_allowed_tags`**
    in a Rails console.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`sanitize` 辅助方法会移除所有未明确允许的HTML标签，只有在白名单中的标签才会被保留。你可以通过在Rails控制台输入**`ActionView::Base.sanitized_allowed_tags`**查看允许的标签列表。'
- en: 'Try a few examples of the `sanitize` method in the Rails console to familiarize
    yourself with how it works:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在Rails控制台尝试一些 `sanitize` 方法的示例，熟悉它是如何工作的：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can specify your own array of allowed tags by including a value for the
    `tags` key in the `options` hash:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在 `options` 哈希中为 `tags` 键指定值，来自定义允许的标签数组：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now that you’ve seen the `sanitize` method in action, replace the `raw` method
    call with `sanitize` in the `TextPost` partial you edited earlier.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经看到 `sanitize` 方法的实际效果，将 `TextPost` 部分中之前编辑的 `raw` 方法调用替换为 `sanitize`。
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Refresh the page again and you should no longer see the alert.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 再次刷新页面，你应该不再看到警告。
- en: Cross-Site Request Forgery Attacks
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨站请求伪造攻击
- en: A *cross-site request forgery (CSRF) attack* occurs when one of your application’s
    users visits another site that has been modified by an attacker to target your
    site specifically. The malicious site attempts to use your application’s trust
    in this user to submit requests to your application.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*跨站请求伪造（CSRF）攻击*发生在你的应用程序的用户访问了一个被攻击者修改过的站点，该站点专门针对你的站点。恶意站点试图利用你应用程序对该用户的信任，向你的应用程序提交请求。'
- en: To exploit a CSRF vulnerability, the attacker must first find the vulnerability
    in your application. Next, he or she must create a page with a link to the vulnerability.
    Finally, the attacker must trick your application’s users into visiting the malicious
    page and activating the link.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要利用CSRF漏洞，攻击者必须首先在你的应用程序中找到这个漏洞。接下来，他或她必须创建一个页面，里面包含指向该漏洞的链接。最后，攻击者必须诱使你的应用程序用户访问这个恶意页面并激活链接。
- en: How CSRF Works
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSRF是如何工作的
- en: Imagine you are building an online payment application. Your application includes
    a `transfer` action that accepts `amount` and `to` parameters that specify how
    much money to transfer to another user.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在构建一个在线支付应用程序。你的应用程序包括一个`transfer`操作，接受`amount`和`to`参数，指定要将多少钱转账给另一个用户。
- en: 'An attacker could study the requests generated by your site and attempt to
    replicate those requests on his or her own site using something as simple as an
    HTML image tag:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可能会研究你的网站生成的请求，并尝试在他或她自己的网站上复制这些请求，使用像HTML图像标签这样简单的方式：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Every time someone visits this page, the user’s browser issues a GET request
    to your site when it tries to load this image. If the visitor is logged in to
    your site and your site is vulnerable to CSRF attacks, $100 is transferred from
    the visitor’s account to the attacker’s account.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 每次有人访问此页面时，用户的浏览器会发出一个GET请求来加载这个图像。如果访问者已登录到你的站点，并且你的站点容易受到CSRF攻击，那么$100会从访问者的账户转到攻击者的账户。
- en: 'You aren’t building a payment site, but your site is vulnerable to a CSRF attack.
    In [Chapter 10](ch10.html "Chapter 10. Testing"), you added a method for one user
    to *follow* another user on the site. In doing that, you added the following line
    to *config/routes.rb*:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你并没有构建一个支付站点，但你的站点容易受到CSRF攻击。在[第10章](ch10.html "第10章。测试")中，你为一个用户添加了一个方法，可以让他/她在网站上*关注*另一个用户。在这样做时，你向
    *config/routes.rb* 添加了以下一行：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'By looking at the request created when I click the Follow button, I can create
    a malicious link to exploit this vulnerability. Assuming my account’s `id` is
    10, the link would look like this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看我点击“关注”按钮时生成的请求，我可以创建一个恶意链接来利用这个漏洞。假设我的账户`id`是10，链接会像这样：
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now all I need to do is convince other users to visit a page containing this
    image tag and they will follow me automatically.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我只需要说服其他用户访问一个包含这个图像标签的页面，他们就会自动关注我。
- en: Preventing CSRF
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防止CSRF
- en: You can prevent CSRF attacks in two steps. First, include a user-specific token
    with all requests that change state in your application, and ignore any request
    that does not include this token. Second, never use a GET request to change state.
    If a request could create or change data in the database or the session, it should
    use POST.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过两个步骤来防止CSRF攻击。首先，包含一个用户特定的令牌在所有改变应用程序状态的请求中，并忽略任何不包含此令牌的请求。其次，永远不要使用GET请求来改变状态。如果一个请求可能会创建或更改数据库或会话中的数据，它应该使用POST请求。
- en: 'Rails takes care of including a secret token and denying requests by default.
    Open the application layout at *app/views/layouts/application.html.erb* to see
    the code for including the token:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Rails默认会处理包括一个秘密令牌并拒绝请求。打开 *app/views/layouts/application.html.erb* 文件，可以查看包括令牌的代码：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Load your site in a web browser and then view source to see the `meta` tags
    generated by this method in the page’s `head`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中加载你的网站，然后查看源代码，查看页面`head`中由该方法生成的`meta`标签。
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You can also see the `authenticity_token` in a hidden field included with every
    form in your application. Every time you submit a form, the value from this hidden
    field is included with the other parameters. The `authenticity_token` is also
    automatically included with all POST requests.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在应用程序中的每个表单里看到一个隐藏字段，里面包含`authenticity_token`。每次提交表单时，这个隐藏字段的值会与其他参数一起提交。`authenticity_token`也会自动包含在所有的POST请求中。
- en: 'Now open *app/controllers/application_controller.rb* to see the code that actually
    denies invalid requests:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开 *app/controllers/application_controller.rb* 文件，查看实际拒绝无效请求的代码：
- en: '[PRE22]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Here, Rails goes one step further and raises an exception for requests that
    don’t include the CSRF token. This exception is logged and can be used to track
    down attackers.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Rails更进一步，对那些没有包括CSRF令牌的请求抛出异常。这个异常会被记录下来，可以用来追踪攻击者。
- en: You must handle the second step yourself. Any time you add a controller action,
    make sure you do not use a GET request if the action could change data. The `follow`
    action added in [Chapter 10](ch10.html "Chapter 10. Testing") creates a record
    in the database, so it should be a POST request. The POST request automatically
    includes the `authenticity_token`, and Rails verifies the token thanks to the
    `protect_from_forgery` method in `ApplicationController`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步必须由你自己处理。每次你添加控制器操作时，确保如果该操作可能更改数据，就不要使用 GET 请求。在[第 10 章](ch10.html "第 10
    章。测试")中添加的 `follow` 操作会在数据库中创建一条记录，因此它应该使用 POST 请求。POST 请求会自动包含 `authenticity_token`，并且
    Rails 会通过 `ApplicationController` 中的 `protect_from_forgery` 方法验证该令牌。
- en: 'To correct this vulnerability in your application, open *config/routes.rb*
    and change the `follow` action to use POST instead of GET:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要修正应用中的这个漏洞，打开 *config/routes.rb* 并将 `follow` 操作改为使用 POST 而不是 GET：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now update the link in *app/views/users/show.html.erb* to use the POST method
    instead of the default GET:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，更新 *app/views/users/show.html.erb* 中的链接，改为使用 POST 方法，而不是默认的 GET：
- en: '[PRE24]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: With these two changes, the `follow` action should now be safe from CSRF attacks.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这两个更改，`follow` 操作现在应该可以防止 CSRF 攻击。
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Malicious users and sites are unavoidable on the Web today. As your application
    gains popularity, the risk of attack rises. Thankfully, Rails provides the tools
    you need to protect your application and your users from attacks.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，恶意用户和网站在网络上不可避免。随着你的应用越来越受欢迎，遭遇攻击的风险也会增加。幸运的是，Rails 提供了你所需的工具来保护你的应用和用户免受攻击。
- en: The security vulnerabilities covered in this chapter were taken from the Top
    10 list published by The Open Web Application Security Project (OWASP). Visit
    *[http://www.owasp.org/](http://www.owasp.org/)* to find your local OWASP chapter
    and discuss application security at free meetings in your area.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中涵盖的安全漏洞来自《开放网络应用程序安全项目（OWASP）》发布的前十名漏洞列表。访问 *[http://www.owasp.org/](http://www.owasp.org/)*
    查找你所在地区的 OWASP 分会，并参加当地免费的应用安全会议。
- en: Now that your application is functional and secure, we’ll look at performance
    in the next chapter. No one likes a slow web application! Here again, Rails provides
    several tools for improving your application’s performance, but you have to put
    them to use.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的应用已经功能完备且安全，接下来我们将在下一章讨论性能。没有人喜欢慢速的 Web 应用！在这一点上，Rails 同样提供了若干提升应用性能的工具，但你需要将它们付诸实践。
- en: Exercises
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: '| Q: | 1\. Users should also be able to edit their image posts. Add the `edit`
    and `update` methods to the `ImagePostsController` at *app/controllers/image_posts_controller.rb*.
    Also add the `ImagePost edit` view at *app/views/image_posts/edit.html.erb*. Finally,
    add a link to the `edit` action in the `ImagePost` partial at *app/views/image_posts/_image_post.html.erb*.
    The methods and views should be similar to those you added for text posts. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| 问题： | 1\. 用户应该能够编辑他们的图片帖子。在 *app/controllers/image_posts_controller.rb* 中添加
    `edit` 和 `update` 方法。还要在 *app/views/image_posts/edit.html.erb* 中添加 `ImagePost
    edit` 视图。最后，在 *app/views/image_posts/_image_post.html.erb* 中的 `ImagePost` 部分添加指向
    `edit` 操作的链接。这些方法和视图应该类似于你为文本帖子添加的内容。'
- en: '| Q: | 2\. Users should be able to moderate comments on their own posts. First,
    add a `@can_moderate` instance variable inside the `show` action in `PostsController`,
    as shown here:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '| 问题： | 2\. 用户应能够管理他们自己帖子的评论。首先，在 `PostsController` 中的 `show` 操作内添加 `@can_moderate`
    实例变量，如下所示：'
- en: '[PRE25]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This variable is `true` if the `current_user` is the author of the post being
    displayed. Now update the comment partial at *app/views/comments/_comment.html.erb*
    to include a link to the `destroy` action if the value of `@can_moderate` is `true.`
    Finally, add the `destroy` action to the `CommentsController` at *app/controllers/comments_controller.rb*.
    This action should find the correct comment using the `id` from the `params` hash,
    call the `destroy` method on the comment, and then redirect to the `post_path`
    with a message indicating success or failure. |
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 该变量为 `true` 时表示 `current_user` 是正在显示的帖子作者。现在，更新 *app/views/comments/_comment.html.erb*
    中的评论部分，如果 `@can_moderate` 的值为 `true`，则包括指向 `destroy` 操作的链接。最后，将 `destroy` 操作添加到
    *app/controllers/comments_controller.rb* 中的 `CommentsController`。该操作应使用 `params`
    哈希中的 `id` 查找正确的评论，调用该评论的 `destroy` 方法，然后重定向到 `post_path`，并显示成功或失败的消息。
- en: '| Q: | 3\. You need to correct one more CSRF vulnerability in your application.
    Open the routes file at *config/routes.rb* and look at the `logout` route:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '| 问题： | 3\. 你需要修正应用中的另一个 CSRF 漏洞。打开 *config/routes.rb* 文件，查看 `logout` 路由：'
- en: '[PRE26]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This route leads to the `destroy` action in the `SessionsController` and you’re
    using a GET request ➊ to access it. Change this route from `get` to `delete` so
    a DELETE request is required. Also, add `method: :delete` to the *Log Out* link
    in the application layout at *app/views/layouts/application.html.erb*. |'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '该路由指向`SessionsController`中的`destroy`操作，并且你正在使用GET请求 ➊来访问它。将该路由从`get`改为`delete`，这样就需要使用DELETE请求。此外，在应用程序布局的*app/views/layouts/application.html.erb*中的*登出*链接上添加`method:
    :delete`。'
