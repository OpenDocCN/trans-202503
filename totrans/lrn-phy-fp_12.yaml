- en: '11'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '11'
- en: CREATING GRAPHS
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 创建图形
- en: '![Image](Images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/common.jpg)'
- en: When you make a graph for a formal report, you want to have titles, axis labels,
    and perhaps other features that will help the reader understand what you are trying
    to say. In this chapter, we’ll show you how to create such a graph using Haskell.
    We’ll look at titles, axis labels, and other labels. We’ll see how to plot data
    given in the form of a list of pairs. Then we’ll show how to plot multiple functions
    or multiple datasets on the same set of axes, how to control the axis ranges,
    and how to produce your graph as a file that can be imported into some other document.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当你为正式报告制作图表时，你希望有标题、轴标签，可能还有其他帮助读者理解你想表达内容的特性。在本章中，我们将展示如何使用Haskell创建这样的图表。我们将探讨标题、轴标签和其他标签。我们将学习如何绘制以一对对的形式给出的数据。接着我们将展示如何在同一组坐标轴上绘制多个函数或多个数据集，如何控制轴的范围，以及如何将图表保存为文件，以便导入到其他文档中。
- en: Title and Axis Labels
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标题和轴标签
- en: 'The following code produces a graph with a title and axis labels:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码生成带有标题和轴标签的图形：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As in the last chapter, we turn on warnings to catch any poor programming we
    might not have intended. Then we import the `Graphics.Gnuplot.Simple` module,
    which we use to make plots. Next, we set up `R` as a *type synonym* for `Double`.
    This lets us think of `Double`s as real numbers and call them by the short name
    `R`. We then define a list tRange of time values that we will use in our plot,
    and we define a function yPos for the height of a projectile.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 和上一章一样，我们开启警告，以捕捉任何我们可能没有意识到的糟糕编程。然后我们导入`Graphics.Gnuplot.Simple`模块，它用于生成图形。接下来，我们将`R`设置为`Double`的*类型别名*。这样我们就可以把`Double`看作实数，并用简短的名字`R`来表示它们。然后我们定义一个时间值的列表`tRange`，将在图形中使用，并定义一个表示抛物体高度的函数`yPos`。
- en: Finally, we define plot1 to make a plot. Recall that plotFunc has type
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们定义`plot1`来生成一个图形。回顾一下，`plotFunc`的类型是
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: where `a` is a type in some specialized type classes. The `Attribute` type is
    defined in the `Graphics.Gnuplot.Simple` module. If you type `:i Attribute` at
    the GHCi prompt (:i is short for :info), you’ll see some options for what you
    can do with these `Attribute`s. In `plot1`, we pass a list of five `Attribute`s
    to `plotFunc`. The first creates the title, the second and third produce axis
    labels, the fourth specifies the filename to use for the output, and the last
    requests that a legend not appear.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，`a`是某些专门类型类中的一种类型。`Attribute`类型定义在`Graphics.Gnuplot.Simple`模块中。如果你在GHCi提示符下输入`:i
    Attribute`（`:i`是`:info`的缩写），你将看到一些关于如何使用这些`Attribute`的选项。在`plot1`中，我们将五个`Attribute`的列表传递给`plotFunc`。第一个用于创建标题，第二个和第三个用于生成轴标签，第四个指定用于输出的文件名，最后一个请求不要显示图例。
- en: Notice the type `IO ()` (pronounced “eye oh unit”) of plot1\. `IO` is a type
    constructor, like `Maybe`, but it’s a special type constructor that’s designed
    to signal an effect, which is a computation that is not purely functional. An
    effect changes the world in some way (for example, changing a file on the hard
    drive or showing a picture on the screen).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`IO ()`（发音为“eye oh unit”）类型的`plot1`。`IO`是一个类型构造子，像`Maybe`一样，但它是一个特殊的类型构造子，旨在表示一种效果，也就是一种非纯粹函数式的计算。效果以某种方式改变了世界（例如，更改硬盘上的文件或在屏幕上显示图片）。
- en: The type `()`, called *unit*, is a type that contains only one value, which
    is also written `()` and also called unit. A type with only one value can’t convey
    any information because there is no choice about what the value might be. Since
    it cannot convey any information, the unit type by itself is not too useful. However,
    coupled with the `IO` type constructor, the type `IO ()` comes to represent an
    effect without a value, which is a very useful type.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 类型`()`，称为*unit*，是一种只包含一个值的类型，这个值也写作`()`，也被称为unit。一个只有一个值的类型无法传递任何信息，因为值没有选择余地。由于它无法传递任何信息，因此单独使用unit类型并不太有用。然而，当与`IO`类型构造子结合使用时，类型`IO
    ()`代表没有值的效果，这是一个非常有用的类型。
- en: The `Attribute` of `Key Nothing` omits the key that is included with the graph
    by default. Since the key makes reference to a temporary file that we don’t care
    about, it is generally uninformative to include the default key. The reader should
    be warned that the `Graphics.Gnuplot.Simple` module is not merely simple, but
    a bit simple-minded. In particular, if an invalid `gnuplot` keyword is passed
    through a Haskell `String`, the result is no output at all, not even an error.
    (For example, if you want to move the legend key to the bottom of the plot instead
    of the top, the attribute `Key (Just ["bottom"])` works, but `Key (Just ["Bottom"])`
    fails with no output because `gnuplot` keywords are case sensitive.) The reader
    is encouraged to consult the online documentation for the `Graphics.Gnuplot.Simple`
    module as well as the documentation for the `gnuplot` program itself.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`Key Nothing`的`Attribute`省略了默认包含在图表中的键。由于该键引用的是一个我们不关心的临时文件，通常不包括默认键是没有信息意义的。读者应当被告知，`Graphics.Gnuplot.Simple`模块不仅仅是简单的，它有点“简单粗暴”。特别是，如果通过
    Haskell 的`String`传递一个无效的`gnuplot`关键字，结果是完全没有输出，甚至没有错误信息。（例如，如果你想将图例的键从图表顶部移动到底部，`Key
    (Just ["bottom"])`是有效的，但`Key (Just ["Bottom"])`将没有任何输出，因为`gnuplot`的关键字是区分大小写的。）建议读者查阅`Graphics.Gnuplot.Simple`模块的在线文档以及`gnuplot`程序本身的文档。'
- en: If you load the code just shown into GHCi and enter plot1 at the prompt, it
    will produce a file called *projectile.png* on your hard drive that you can include
    in a document. [Figure 11-1](ch11.xhtml#ch11fig1) shows what it looks like.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将刚才显示的代码加载到 GHCi 并在提示符下输入 plot1，它将生成一个名为*projectile.png*的文件，并保存在硬盘上，你可以将它插入到文档中。[图
    11-1](ch11.xhtml#ch11fig1)展示了它的样子。
- en: '![Image](Images/167fig01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/167fig01.jpg)'
- en: '*Figure 11-1: Graph produced by the function plot1*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11-1：由函数 plot1 生成的图表*'
- en: Other Labels
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他标签
- en: 'You may want to put other labels on a plot. Here is how you can do so:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望在图表上放置其他标签。以下是你可以做到的方法：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note the `Custom` attribute we added. The backslash in front of the quotes is
    because we need to pass quotes inside of quotes. The coordinates `1.5,22` are
    the horizontal and vertical coordinates on the graph where we want the label to
    appear. [Figure 11-2](ch11.xhtml#ch11fig2) shows what this looks like.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意我们添加的`Custom`属性。引号前的反斜杠是因为我们需要在引号内传递引号。坐标`1.5,22`是我们希望标签出现的图表上的水平和垂直坐标。[图
    11-2](ch11.xhtml#ch11fig2)显示了它的样子。
- en: '![Image](Images/168fig01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/168fig01.jpg)'
- en: '*Figure 11-2: Graph produced by the function plot1Custom*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11-2：由函数 plot1Custom 生成的图表*'
- en: The syntax for including a custom label is sufficiently awkward and difficult
    to remember that it makes sense to write a new function that takes its arguments
    in a simpler way.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 包含自定义标签的语法相当繁琐且难以记忆，因此写一个接受更简单参数的新函数是明智的选择。
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We are passing two pieces of information to the custom label function: the
    coordinates of the location of the label and the name of the label. The first
    piece of information has type `(R,R)`, and the second has type `String`. Our function
    `customLabel` will produce an `Attribute` that can be included in the attribute
    list of the function `plotFunc`. We use the `show` function to convert an `R`
    to a `String`, and we use the `++` operator to concatenate strings.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向自定义标签函数传递了两项信息：标签位置的坐标和标签的名称。第一项信息的类型是`(R,R)`，第二项的类型是`String`。我们的函数`customLabel`将生成一个`Attribute`，可以包含在`plotFunc`函数的属性列表中。我们使用`show`函数将`R`类型转换为`String`，并使用`++`运算符连接字符串。
- en: We refer to the double-quote character in Haskell by prefixing it with a backslash.
    The backslash tells the compiler that we mean to write the double-quote character
    itself rather than to signal the beginning of a string. Having done this, we can
    treat the double quote character as any other character.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Haskell 中，我们通过在双引号字符前添加反斜杠来引用它。反斜杠告诉编译器我们是想写双引号字符本身，而不是表示字符串的开始。完成这一操作后，我们可以将双引号字符视为任何其他字符。
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Having defined the function `customLabel`, we can use the following nicer syntax
    to make our graph:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了`customLabel`函数后，我们可以使用以下更简洁的语法来绘制我们的图表：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Plotting Data
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘制数据
- en: There will be times when we want to plot points of (x, y) pairs rather than
    functions. We can use the plotPath function for this (also defined in the package
    `Graphics.Gnuplot.Simple`). Let’s take a look at the type of the plotPath function
    to better understand its use.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们希望绘制的是 (x, y) 配对的点，而不是函数。我们可以使用 `plotPath` 函数来实现这一点（这个函数也在 `Graphics.Gnuplot.Simple`
    包中定义）。让我们看看 `plotPath` 函数的类型，以更好地理解它的用法。
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After a list of attributes, `plotPath` takes a list of pairs containing the
    data we want to plot. Here is code to produce the same graph as in [Figure 11-2](ch11.xhtml#ch11fig2)
    but using `plotPath` instead of `plotFunc`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在一系列属性之后，`plotPath` 接受一个包含我们要绘制的数据的配对列表。以下代码生成了与 [图 11-2](ch11.xhtml#ch11fig2)
    相同的图表，但使用 `plotPath` 而不是 `plotFunc`：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We used a list comprehension to produce the list of pairs that `plotPath` requires.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用列表推导式生成了 `plotPath` 所需的配对列表。
- en: Multiple Curves on One Set of Axes
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在一组坐标轴上绘制多条曲线
- en: You can plot multiple curves on a single set of axes. This is particularly useful
    if you want to compare two functions that have the same independent and dependent
    variables. The function `plotFuncs` from `Graphics.Gnuplot.Simple` enables us
    to plot a list of functions.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在同一组坐标轴上绘制多条曲线。这在比较两个具有相同自变量和因变量的函数时特别有用。`Graphics.Gnuplot.Simple` 中的 `plotFuncs`
    函数使我们能够绘制一个函数列表。
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Notice that the plotFuncs function takes a list of functions as one of its
    arguments. We promised back in [Chapter 5](ch05.xhtml) that we would find a use
    for a list of functions, and now we have! Here is an example of how to use `plotFuncs`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`plotFuncs` 函数将一个函数列表作为其参数之一。我们在 [第 5 章](ch05.xhtml) 中承诺过会找到一个使用函数列表的例子，现在我们实现了！以下是如何使用
    `plotFuncs` 的示例：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The range of x-values does not have to be the same for the two plots. Consider
    the following example, which introduces the new function plotPaths.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 两个图表的 x 值范围不必相同。考虑以下示例，它引入了新的函数 `plotPaths`。
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `plotPaths` function takes a list of lists of pairs where the `plotPath`
    function takes a list of pairs.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`plotPaths` 函数接受一个包含配对列表的列表，而 `plotPath` 函数则接受一个配对列表。'
- en: Controlling the Plot Ranges
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制图表范围
- en: By default, `gnuplot` (the program that is making the graphs behind the scenes)
    will make plots based on the x-ranges you provide and the corresponding calculated
    y-ranges. Sometimes, you may want more control over the x-range or the y-range.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`gnuplot`（在幕后生成图表的程序）将根据您提供的 x 范围和相应计算的 y 范围来绘制图形。有时，您可能希望更多地控制 x 范围或
    y 范围。
- en: 'Revisiting the previous example of three plots, try the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 重新回到之前三个图表的示例，尝试以下代码：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: By specifying `XRange (-2,8)`, we produce a graph that runs from *x* = –2 to
    *x* = 8\. Since `xRange` runs from 0 to 10, no data is calculated in the region
    from *x* = –2 to *x* = 0, so this region is blank on the graph. Although we ask
    for data to be calculated up to *x* = 10, it is only shown up to *x* = 8\. Because
    we specify `YRange (-0.2,1)`, values of the cosine and sine functions that fall
    in the region from *y* = –1 to *y* = –0.2 are not shown.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定 `XRange (-2,8)`，我们生成了一个从 *x* = –2 到 *x* = 8 的图表。由于 `xRange` 范围是从 0 到 10，在
    *x* = –2 到 *x* = 0 这一范围内没有计算数据，因此这一区域在图表上是空白的。尽管我们要求计算数据直到 *x* = 10，但它只显示到 *x*
    = 8。因为我们指定了 `YRange (-0.2,1)`，所以在 *y* = –1 到 *y* = –0.2 之间的余弦和正弦函数值将不会显示。
- en: Notice the funny stylistic way in which I made the list [XRange (-2,8), YRange
    (-0.2,1)]. People who code in Haskell sometimes put the comma first on the second
    line of the list, but you don’t have to. You could put this all on one line, or
    put the comma at the end of the first line. It’s a matter of style.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我以一种有趣的风格列出了 [XRange (-2,8), YRange (-0.2,1)]。有些编写 Haskell 代码的人会在列表的第二行首位放置逗号，但你并不一定要这么做。你可以把它全部写在一行里，或者将逗号放在第一行的末尾。这完全是风格问题。
- en: Making a Key
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 制作图例
- en: 'The default key that `gnuplot` provides with a graph is not very useful. It
    gives the name of a temporary file we are not interested in. It is not a trivial
    thing to produce a handsome key, but it can be done. The following code gives
    an example:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`gnuplot` 提供的默认图例并不是很有用。它显示的是我们不感兴趣的临时文件名。制作一个漂亮的图例并不是一件简单的事，但它是可以做到的。以下代码给出了一个示例：'
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here we use the function `plotPathsStyle`, which is an extended version of `plotPaths`
    that allows stylistic alterations. Instead of the list of lists of pairs that
    `plotPaths` requires, `plotPathsStyle` requires a list of pairs, with each pair
    consisting of a `PlotStyle` and a list of pairs with the data to be plotted. In
    this way, we can give a title to each curve that shows up in the key.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们使用 `plotPathsStyle` 函数，它是 `plotPaths` 的扩展版本，允许进行样式上的调整。与 `plotPaths` 需要的列表列表对不同，`plotPathsStyle`
    需要一个由配对组成的列表，每个配对包括一个 `PlotStyle` 和一个包含要绘制数据的配对列表。通过这种方式，我们可以为每条曲线提供一个标题，并在图例中显示。
- en: Summary
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we added plotting tools to our toolkit. We learned how to provide
    a title, axis labels, and other labels to a graph. We learned how to plot data
    given in the form of a list of pairs. We saw how to plot multiple functions or
    multiple lists of pairs on a single set of axes. We learned how to manually control
    the axis ranges and how to produce the graph as a file that can be imported into
    another document. In the next chapter, we’ll learn how to make stand-alone programs
    in Haskell.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们向工具箱中添加了绘图工具。我们学习了如何为图形提供标题、坐标轴标签以及其他标签。我们学习了如何绘制给定为配对列表形式的数据。我们了解了如何在一个坐标轴上绘制多个函数或多个配对列表。我们学习了如何手动控制坐标轴范围，并如何将图形保存为文件，以便导入到其他文档中。在下一章中，我们将学习如何在
    Haskell 中创建独立的程序。
- en: Exercises
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 习题
- en: '**Exercise 11.1.** Make a plot of *y* = *x*² from *x* = –3 to *x* = 3 with
    a title and axis labels.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**习题 11.1.** 绘制从 *x* = –3 到 *x* = 3 的 *y* = *x*² 曲线，并添加标题和坐标轴标签。'
- en: '**Exercise 11.2.** Make a plot of the cosine and sine functions, together on
    a single set of axes, from *x* = 0 to *x* = 10.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**习题 11.2.** 绘制余弦和正弦函数的图形，将它们放在同一坐标轴上，范围从 *x* = 0 到 *x* = 10。'
- en: '**Exercise 11.3.** Take a look at the type signature for `plotPath`, and figure
    out how to plot the list of points `txPairs` below:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**习题 11.3.** 查看 `plotPath` 的类型签名，并弄清楚如何绘制下面 `txPairs` 列表中的点：'
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Make a plot with a title and axis labels (with units).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 制作一个带有标题和坐标轴标签（包括单位）的图表。
- en: '**Exercise 11.4.** Write a function'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**习题 11.4.** 编写一个函数'
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: that approximates the sine function by the first four terms in its Taylor expansion.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用泰勒展开的前四项来逼近正弦函数。
- en: '![Image](Images/172equ01.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/172equ01.jpg)'
- en: (Depending on how you do this, you may or may not run into the issue that you
    cannot divide an `R` by an `Int` or an `Integer` in Haskell. You can only divide
    a numeric type by the same numeric type. If you run into this problem, you can
    use the function `fromIntegral` to convert an `Int` or an `Integer` to some other
    type, like `R`.)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: （根据你如何操作，可能会遇到不能将`R`除以`Int`或`Integer`的问题，这在Haskell中是常见的。你只能将同一数值类型之间进行除法运算。如果你遇到这个问题，可以使用`fromIntegral`函数将`Int`或`Integer`转换为其他类型，如`R`。）
- en: 'Test your function by trying the following command in GHCi:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GHCi 中尝试以下命令来测试你的函数：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Make a nice version of this plot (with a title, axis labels, labels to indicate
    which curve is which, and so on).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 制作一个漂亮的图表（包括标题、坐标轴标签、标注每条曲线的标签等）。
