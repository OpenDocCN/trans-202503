["```\npackage housework\n\ntype Chore struct {\n    Complete    bool\n    Description string\n}\n```", "```\npackage main\n\nimport (\n    \"flag\"\n    \"fmt\"\n    \"log\"\n    \"os\"\n    \"path/filepath\"\n    \"strconv\"\n    \"strings\"\n\n    \"github.com/awoodbeck/gnp/ch12/housework\"\n 1 storage \"github.com/awoodbeck/gnp/ch12/json\"\n    // storage \"github.com/awoodbeck/gnp/ch12/gob\"\n    // storage \"github.com/awoodbeck/gnp/ch12/protobuf\"\n)\n\nvar dataFile string\n\nfunc init() {\n    flag.StringVar(&dataFile, \"file\", \"housework.db\", \"data file\")\n\n    flag.Usage = func() {\n        fmt.Fprintf(flag.CommandLine.Output(),\n         2 `Usage: %s [flags] [add chore, ...|complete #]\n    add         add comma-separated chores\n    complete    complete designated chore\n\nFlags:\n`, filepath.Base(os.Args[0]))\n        flag.PrintDefaults()\n    }\n}\n```", "```\n`--snip--`\n\nfunc load() ([]*housework.Chore, error) {\n    if _, err := os.Stat(dataFile); 1os.IsNotExist(err) {\n        return make([]*housework.Chore, 0), nil\n    }\n\n    df, err := 2os.Open(dataFile)\n    if err != nil {\n        return nil, err\n    }\n    defer func() {\n        if err := df.Close(); err != nil {\n            fmt.Printf(\"closing data file: %v\", err)\n        }\n    }()\n\n    return 3storage.Load(df)\n}\n```", "```\n`--snip--`\n\nfunc flush(chores []*housework.Chore) error {\n    df, err := 1os.Create(dataFile)\n    if err != nil {\n        return err\n    }\n    defer func() {\n        if err := df.Close(); err != nil {\n            fmt.Printf(\"closing data file: %v\", err)\n        }\n    }()\n\n    return 2storage.Flush(df, chores)\n}\n```", "```\n`--snip--`\n\nfunc list() error {\n    chores, err := 1load()\n    if err != nil {\n        return err\n    }\n\n    if len(chores) == 0 {\n        fmt.Println(\"You're all caught up!\")\n        return nil\n    }\n\n    fmt.Println(\"#\\t[X]\\tDescription\")\n    for i, chore := range chores {\n        c := \" \"\n if chore.Complete {\n            c = \"X\"\n        }\n        fmt.Printf(\"%d\\t[%s]\\t%s\\n\", i+1, c, chore.Description)\n    }\n\n    return nil\n}\n```", "```\n#       [X]     Description\n1       [ ]     Mop floors\n2       [ ]     Clean dishes\n3       [ ]     Mow the lawn\n```", "```\n`--snip--`\n\nfunc add(s string) error {\n    chores, err := 1load()\n    if err != nil {\n        return err\n    }\n\n    for _, chore := range 2strings.Split(s, \",\") {\n        if desc := strings.TrimSpace(chore); desc != \"\" {\n            chores = append(chores, &housework.Chore{\n                Description: desc,\n            })\n        }\n    }\n\n    return 3flush(chores)\n}\n```", "```\n`--snip--`\n\nfunc complete(s string) error {\n    i, err := strconv.Atoi(s)\n    if err != nil {\n        return err\n    }\n\n    chores, err := load()\n    if err != nil {\n        return err\n    }\n\n    if i < 1 || i > len(chores) {\n        return fmt.Errorf(\"chore %d not found\", i)\n    }\n\n 1 chores[i-1].Complete = true\n\n    return flush(chores)\n}\n```", "```\n`--snip--`\n\nfunc main() {\n    flag.Parse()\n\n    var err error\n\n    switch strings.ToLower(flag.Arg(0)) {\n    case \"add\":\n        err = add(strings.Join(flag.Args()[1:], \" \"))\n    case \"complete\":\n        err = complete(flag.Arg(1))\n    }\n\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    err = list()\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n```", "```\n1[\n2 {\n    \"Complete\": false,\n    \"Description\": \"Mop floors\"\n  },\n  {\n    \"Complete\": false,\n    \"Description\": \"Clean dishes\"\n  },\n  {\n    \"Complete\": false,\n    \"Description\": \"Mow the lawn\"\n  }\n]\n```", "```\npackage json\n\nimport (\n    \"encoding/json\"\n    \"io\"\n\n    \"github.com/awoodbeck/gnp/ch12/housework\"\n)\n\nfunc Load(r io.Reader) ([]*housework.Chore, error) {\n    var chores []*housework.Chore\n\n    return chores, 1json.NewDecoder(r).Decode(&chores)\n}\n\nfunc Flush(w io.Writer, chores []*housework.Chore) error {\n    return 2json.NewEncoder(w).Encode(chores)\n}\n```", "```\n$ **go run cmd/housework.go**\nYou're all caught up!\n$ **go run cmd/housework.go add Mop floors, Clean dishes, Mow the lawn**\n#       [X]     Description\n1       [ ]     Mop floors\n2       [ ]     Clean dishes\n3       [ ]     Mow the lawn\n$ **go run cmd/housework.go complete 2**\n#       [X]     Description\n1       [ ]     Mop floors\n2       [X]     Clean dishes\n3       [ ]     Mow the lawn\n$ **cat housework.db**\n[{\"Complete\":false,\"Description\":\"Mop floors\"},\n{\"Complete\":true,\"Description\":\"Clean dishes\"},\n{\"Complete\":false,\"Description\":\"Mow the lawn\"}]\n```", "```\npackage gob\n\nimport (\n    \"encoding/gob\"\n    \"io\"\n\n \"github.com/awoodbeck/gnp/ch12/housework\"\n)\n\nfunc Load(r io.Reader) ([]*housework.Chore, error) {\n    var chores []*housework.Chore\n\n    return chores, gob.NewDecoder(r).Decode(&chores)\n}\n\nfunc Flush(w io.Writer, chores []*housework.Chore) error {\n    return gob.NewEncoder(w).Encode(chores)\n}\n```", "```\n`--snip--`\n    \"github.com/awoodbeck/gnp/ch12/housework\"\n 1 // storage \"github.com/awoodbeck/gnp/ch12/json\"\n 2 storage \"github.com/awoodbeck/gnp/ch12/gob\"\n    // storage \"github.com/awoodbeck/gnp/ch12/protobuf\"\n`--snip--`\n```", "```\n$ **rm housework.db**\n$ **go run cmd/housework.go**\nYou're all caught up!\n$ **go run cmd/housework.go add Mop floors, Clean dishes, Mow the lawn**\n#       [X]     Description\n1       [ ]     Mop floors\n2       [ ]     Clean dishes\n3       [ ]     Mow the lawn\n$ **go run cmd/housework.go complete 2**\n#       [X]     Description\n1       [ ]     Mop floors\n2       [X]     Clean dishes\n3       [ ]     Mow the lawn\n$ **hexdump -c housework.db**\n0000000  \\r 377 203 002 001 002 377 204  \\0 001 377 202  \\0  \\0   ) 377\n0000010 201 003 001 002 377 202  \\0 001 002 001  \\b   C   o   m   p   l\n0000020   e   t   e 001 002  \\0 001  \\v   D   e   s   c   r   i   p   t\n0000030   i   o   n 001  \\f  \\0  \\0  \\0   1 377 204  \\0 003 002  \\n   M\n0000040   o   p       f   l   o   o   r   s  \\0 001 001 001  \\f   C   l\n0000050   e   a   n       d   i   s   h   e   s  \\0 002  \\f   M   o   w\n0000060       t   h   e       l   a   w   n  \\0                        \n000006a\n```", "```\nmessage Chore {\n  bool complete = 1;\n  string description = 2;\n}\n```", "```\n$ **sudo apt install protobuf-compiler**\n```", "```\n$ **brew install protobuf**\n```", "```\n$ **GO111MODULE=on go get -u github.com/golang/protobuf/protoc-gen-go**\n```", "```\n1 syntax = \"proto3\";\n2 package housework;\n\n3 option go_package = \"github.com/awoodbeck/gnp/ch12/housework/v1/housework\";\n\nmessage Chore {\n  bool complete = 1;\n  string description = 2;\n}\n\nmessage Chores {\n4repeated Chore chores = 1;\n}\n```", "```\n$ **protoc** 1**--go_out=.** 2**--go_opt=paths=source_relative housework/v1/housework.proto**\n```", "```\nprotoc-gen-go: program not found or is not executable\n--go_out: protoc-gen-go: Plugin failed with status code 1.\n```", "```\n$ **head -n 7 housework/v1/housework.pb.go**\n// Code generated by protoc-gen-go. DO NOT EDIT.\n// versions:\n//      protoc-gen-go v1.25.0\n//      protoc        v3.6.1\n// source: housework/v1/housework.proto\n\npackage housework\n```", "```\npackage protobuf\n\nimport (\n    \"io\"\n    \"io/ioutil\"\n\n    \"google.golang.org/protobuf/proto\"\n\n 1 \"github.com/awoodbeck/gnp/ch12/housework/v1\"\n)\n\nfunc Load(r io.Reader) ([]*housework.Chore, error) {\n    b, err := ioutil.ReadAll(r)\n    if err != nil {\n        return nil, err\n    }\n\n    var chores housework.Chores\n\n    return chores.Chores, proto.Unmarshal(b, &chores)\n}\n\nfunc Flush(w io.Writer, chores []*housework.Chore) error {\n    b, err := proto.Marshal(2&housework.Chores{Chores: chores})\n    if err != nil {\n        return err\n    }\n\n    _, err = w.Write(b)\n\n    return err\n}\n```", "```\n`--snip--`\n 1 \"github.com/awoodbeck/gnp/ch12/housework/v1\"\n    // storage \"github.com/awoodbeck/gnp/ch12/json\"\n // storage \"github.com/awoodbeck/gnp/ch12/gob\"\n 2 storage \"github.com/awoodbeck/gnp/ch12/protobuf\"\n`--snip--`\n```", "```\n$ **go get -u google.golang.org/grpc**\n```", "```\n$ **go get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc**\n```", "```\n`--snip--`\n\nservice RobotMaid {\n1   rpc Add (Chores) returns (Response);\n  rpc Complete (CompleteRequest) returns (Response);\n  rpc List (Empty) returns (Chores);\n}\n\nmessage CompleteRequest {\n  int32 2chore_number = 1;\n}\n\n3 message Empty {}\n\nmessage Response {\n  string message = 1;\n}\n```", "```\n$ **protoc** 1**--go-grpc_out=.** 2--go-grpc_opt=paths=source_relative \\\n**housework/v1/housework.proto**\n```", "```\ntype RobotMaidServer interface {\n    Add(context.Context, *Chores) (*Response, error)\n    Complete(context.Context, *CompleteRequest) (*Response, error)\n    List(context.Context, *empty.Empty) (*Chores, error)\n    mustEmbedUnimplementedRobotMaidServer()\n}\n```", "```\npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"sync\"\n\n    \"github.com/awoodbeck/gnp/ch12/housework/v1\"\n)\n\ntype Rosie struct {\n    mu sync.Mutex\n 1 chores []*housework.Chore\n}\n\nfunc (r *Rosie) Add(_ context.Context, chores *housework.Chores) (\n    *housework.Response, error) {\n    r.mu.Lock()\n    r.chores = append(r.chores, chores.Chores...)\n    r.mu.Unlock()\n\n    return 2&housework.Response{Message: \"ok\"}, nil\n}\n\nfunc (r *Rosie) Complete(_ context.Context,\n    req *housework.CompleteRequest) (*housework.Response, error) {\n    r.mu.Lock()\n    defer r.mu.Unlock()\n\n    if r.chores == nil || req.ChoreNumber < 1 ||\n        int(req.ChoreNumber) > len(r.chores) {\n        return nil, fmt.Errorf(\"chore %d not found\", req.ChoreNumber)\n    }\n\n    r.chores[req.ChoreNumber-1].Complete = true\n\n    return &housework.Response{Message: \"ok\"}, nil\n}\n\nfunc (r *Rosie) List(_ context.Context, _ *housework.Empty) (\n    *housework.Chores, error) {\n    r.mu.Lock()\n    defer r.mu.Unlock()\n\n    if r.chores == nil {\n        r.chores = make([]*housework.Chore, 0)\n    }\n\n    return &housework.Chores{Chores: r.chores}, nil\n}\n\nfunc (r *Rosie) Service() *housework.RobotMaidService {\n    return 3&housework.RobotMaidService{\n        Add:      r.Add,\n        Complete: r.Complete,\n        List:     r.List,\n    }\n}\n```", "```\npackage main\n\nimport (\n    \"crypto/tls\"\n    \"flag\"\n    \"fmt\"\n    \"log\"\n    \"net\"\n\n    \"google.golang.org/grpc\"\n\n    \"github.com/awoodbeck/gnp/ch12/housework/v1\"\n)\n\nvar addr, certFn, keyFn string\n\nfunc init() {\n    flag.StringVar(&addr, \"address\", \"localhost:34443\", \"listen address\")\n    flag.StringVar(&certFn, \"cert\", \"cert.pem\", \"certificate file\")\n    flag.StringVar(&keyFn, \"key\", \"key.pem\", \"private key file\")\n}\n\nfunc main() {\n    flag.Parse()\n\n    server := 1grpc.NewServer()\n    rosie := new(Rosie)\n  2housework.RegisterRobotMaidServer(server, 3rosie.Service())\n\n    cert, err := tls.LoadX509KeyPair(certFn, keyFn)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    listener, err := net.Listen(\"tcp\", addr)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Printf(\"Listening for TLS connections on %s ...\", addr)\n    log.Fatal(\n     4 server.Serve(\n         5 tls.NewListener(\n                listener,\n                &tls.Config{\n                    Certificates:             []tls.Certificate{cert},\n                    CurvePreferences:         []tls.CurveID{tls.CurveP256},\n                    MinVersion:               tls.VersionTLS12,\n PreferServerCipherSuites: true,\n                },\n            ),\n        ),\n    )\n}\n```", "```\npackage main\n\nimport (\n 1 \"context\"\n 2 \"crypto/tls\"\n 3 \"crypto/x509\"\n    \"flag\"\n    \"fmt\"\n 4 \"io/ioutil\"\n    \"log\"\n    \"os\"\n    \"path/filepath\"\n    \"strconv\"\n    \"strings\"\n\n    \"google.golang.org/grpc\"\n    \"google.golang.org/grpc/credentials\"\n\n    \"github.com/awoodbeck/gnp/ch12/housework/v1\"\n)\n\nvar addr, caCertFn string\n\nfunc init() {\n 5 flag.StringVar(&addr, \"address\", \"localhost:34443\", \"server address\")\n 6 flag.StringVar(&caCertFn, \"ca-cert\", \"cert.pem\", \"CA certificate\")\n\n    flag.Usage = func() {\n        fmt.Fprintf(flag.CommandLine.Output(),\n            `Usage: %s [flags] [add chore, ...|complete #]\n    add         add comma-separated chores\n    complete    complete designated chore\n\nFlags:\n`, filepath.Base(os.Args[0]))\n        flag.PrintDefaults()\n    }\n}\n```", "```\n`--snip--`\n\nfunc list(ctx context.Context, client housework.RobotMaidClient) error {\n    chores, err := client.List(ctx, 1new(housework.Empty))\n    if err != nil {\n        return err\n    }\n\n    if len(chores.Chores) == 0 {\n        fmt.Println(\"You have nothing to do!\")\n        return nil\n    }\n\n    fmt.Println(\"#\\t[X]\\tDescription\")\n    for i, chore := range chores.Chores {\n        c := \" \"\n        if chore.Complete {\n            c = \"X\"\n        }\n        fmt.Printf(\"%d\\t[%s]\\t%s\\n\", i+1, c, chore.Description)\n    }\n\n    return nil\n}\n```", "```\n`--snip--`\n\nfunc add(ctx context.Context, client housework.RobotMaidClient,\n    s string) error {\n    chores := new(housework.Chores)\n\n    for _, chore := range strings.Split(s, \",\") {\n        if desc := strings.TrimSpace(chore); desc != \"\" {\n            chores.Chores = append(chores.Chores, &housework.Chore{\n                Description: desc,\n            })\n        }\n    }\n\n    var err error\n    if len(chores.Chores) > 0 {\n        _, 1err = client.Add(ctx, chores)\n    }\n\n    return err\n}\n```", "```\n`--snip--`\n\nfunc complete(ctx context.Context, client housework.RobotMaidClient,\n    s string) error {\n    i, err := strconv.Atoi(s)\n    if err == nil {\n        _, err = client.Complete(ctx,\n            &housework.CompleteRequest{1ChoreNumber: int32(i)})\n    }\n\n    return err\n}\n```", "```\n`--snip--`\n\nfunc main() {\n    flag.Parse()\n\n    caCert, err := ioutil.ReadFile(caCertFn)\n    if err != nil {\n        log.Fatal(err)\n    }\n    certPool := x509.NewCertPool()\n    if ok := certPool.AppendCertsFromPEM(caCert); !ok {\n        log.Fatal(\"failed to add certificate to pool\")\n    }\n\n    conn, err := 1grpc.Dial(\n        addr,\n     2 grpc.WithTransportCredentials(\n         3 credentials.NewTLS(\n                &tls.Config{\n                    CurvePreferences: []tls.CurveID{tls.CurveP256},\n                    MinVersion:       tls.VersionTLS12,\n                    RootCAs:          certPool,\n                },\n            ),\n        ),\n    )\n    if err != nil {\n        log.Fatal(err)\n    }\n```", "```\n`--snip--`\n\n    rosie := 1housework.NewRobotMaidClient(conn)\n    ctx := context.Background()\n\n    switch strings.ToLower(flag.Arg(0)) {\n    case \"add\":\n        err = add(ctx, rosie, strings.Join(flag.Args()[1:], \" \"))\n    case \"complete\":\n        err = complete(ctx, rosie, flag.Arg(1))\n    }\n\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    err = list(ctx, rosie)\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n```", "```\n$ **go run server/server.go server/rosie.go -cert server/cert.pem -key server/key.pem**\nListening for TLS connections on localhost:34443 ...\n```", "```\n$ **go run client/client.go -ca-cert server/cert.pem**\nYou have nothing to do!\n$ **go run client/client.go -ca-cert server/cert.pem add Mop floors, Wash dishes**\n#       [X]     Description\n1       [ ]     Mop floors\n2       [ ]     Wash dishes\n$ **go run client/client.go -ca-cert server/cert.pem complete 2**\n#       [X]     Description\n1       [ ]     Mop floors\n2       [X]     Wash dishes\n```"]