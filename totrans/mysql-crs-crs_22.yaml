- en: '17'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '17'
- en: Tracking Changes to Voter Data with Triggers
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用触发器跟踪选民数据的变化
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: In this chapter, you’ll build a voting database that stores data for an election.
    You’ll improve the quality of your data by designing the database with constraints,
    including primary and foreign keys, and using triggers to prevent bad data from
    being entered. You’ll also use triggers to track changes to your database so that
    if data quality issues arise, you have a record of who made the changes and when.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将构建一个用于存储选举数据的投票数据库。你将通过设计带有约束条件的数据库（包括主键和外键），并使用触发器防止错误数据的录入，从而提高数据的质量。你还将使用触发器来跟踪数据库的变化，以便在数据质量问题出现时，可以记录是谁在何时做了更改。
- en: You’ll allow poll workers to change data when appropriate, so it’s important
    to build a system that prevents errors from being made. The techniques in this
    chapter can be applied to a wide variety of applications and situations. The quality
    of your data is crucial, so it’s worth setting up your database in a way that
    keeps your data as accurate as possible.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你将允许投票工作人员在适当时更改数据，因此构建一个防止错误发生的系统非常重要。本章中的技术可以应用于各种不同的应用和场景。数据质量至关重要，因此值得以一种尽可能保持数据准确性的方式来设置你的数据库。
- en: Setting Up the Database
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置数据库
- en: First, you’ll create the database and take a look at its tables. The ballot
    for your election has races for mayor, treasurer, school committee, the board
    of health, and the planning board. [Figure 17-1](#figure17-1) shows the ballot
    you’ll use for your database.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将创建数据库并查看其表。你的选举选票包括市长、财务主管、学校委员会、卫生委员会和规划委员会等职位。[图 17-1](#figure17-1) 显示了你将用于数据库的选票。
- en: '![](image_fi/503007c17/f17001.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c17/f17001.png)'
- en: 'Figure 17-1: The ballot for your election'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17-1：你的选举选票
- en: This election uses optical scan voting machines that read the ballots and save
    the voting data to your MySQL database.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本次选举使用光学扫描投票机，这些投票机读取选票并将投票数据保存到你的 MySQL 数据库中。
- en: 'Create the `voting` database:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `voting` 数据库：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now you can begin adding tables.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以开始添加表格了。
- en: Creating the Tables
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建表
- en: 'You’ll create the following tables within your `voting` database:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在 `voting` 数据库中创建以下表：
- en: '| `beer` | A table that contains data about beer. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `beer` | 一个包含关于啤酒数据的表。 |'
- en: '| `voter` | People who are eligible to vote in this election |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `voter` | 有资格在本次选举中投票的人 |'
- en: '| `ballot` | The voter’s ballot |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `ballot` | 选民的选票 |'
- en: '| `race` | The races on the ballot (for example, Mayor, Treasurer) |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `race` | 选票上的竞选职位（例如，市长、财务主管） |'
- en: '| `candidate` | The candidates running |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `candidate` | 竞选中的候选人 |'
- en: '| `ballot_candidate` | The candidates that the voter selected on their ballot
    |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `ballot_candidate` | 选民在选票上选择的候选人 |'
- en: The *entity relationship diagram* *(ERD)* in [Figure 17-2](#figure17-2) shows
    these tables and their columns, as well as the primary and foreign key relationships
    between them.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 17-2](#figure17-2) 中的 *实体关系图* *(ERD)* 显示了这些表及其列，以及它们之间的主键和外键关系。'
- en: '![](image_fi/503007c17/f17002.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c17/f17002.png)'
- en: 'Figure 17-2: The tables in your `voting` database'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17-2：你 `voting` 数据库中的表
- en: Voters will cast a ballot with the candidates that they selected for each race.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 选民将投下他们为每个职位选择的候选人的选票。
- en: The voter Table
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选民表
- en: 'The `voter` table will store information about each voter, such as name, address,
    and county. Create the table as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`voter` 表将存储每个选民的信息，如姓名、地址和县。按如下方式创建该表：'
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `voter_id` column is the primary key for the table. Creating this primary
    key not only will speed up joins that use the `voter` table, but also will make
    sure that no two rows in the table have the same `voter_id` value.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`voter_id` 列是该表的主键。创建此主键不仅可以加速使用 `voter` 表的连接操作，还能确保表中没有两行具有相同的 `voter_id`
    值。'
- en: You set `voter_id` to `auto_increment` so that MySQL will automatically increase
    the `voter_id` value with each new voter you add to the table.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你将 `voter_id` 设置为 `auto_increment`，这样 MySQL 会在你每次向表中添加新选民时自动增加 `voter_id` 值。
- en: You can’t have two voters with the same registration number, so you set the
    `voter_registration_num` column to `unique`. If a new voter is added to the table
    with the same `voter_registration_num` as an existing voter, that new row will
    be rejected.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能有两个选民具有相同的登记号，因此你将 `voter_registration_num` 列设置为 `unique`。如果向表中添加一个具有与现有选民相同的
    `voter_registration_num` 的新选民，该行将被拒绝。
- en: All of the columns are defined as `not null` except for the `voter_party` column.
    You’ll allow a row to be saved in the table with a null `voter_party`, but if
    any other columns contain a null value, the row will be rejected.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `voter_party` 列之外，所有列都被定义为 `not null`。你允许一行在表中保存 `voter_party` 为 null 的情况，但如果其他任何列包含
    null 值，该行将被拒绝。
- en: The ballot Table
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选票表
- en: 'The `ballot` table holds information about each ballot, including the ballot
    number, the voter who completed the ballot, when the ballot was cast, and whether
    the ballot was cast in person or absentee. Create the `ballot` table like so:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`ballot` 表保存每张选票的信息，包括选票号码、完成选票的选民、选票投下的时间以及选票是亲自投下还是缺席投票。创建 `ballot` 表如下：'
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `ballot_id` column is your primary key in this table, and its values automatically
    increment as you insert new ballot rows into the table.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`ballot_id` 列是该表的主键，当你向表中插入新的选票行时，它的值会自动递增。'
- en: You use a `unique` constraint for the `voter_id` column to ensure there is only
    one ballot in the table per voter. If a voter tries to cast more than one ballot,
    only the first ballot will be counted; subsequent ballots will be rejected.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你为 `voter_id` 列使用了 `unique` 约束，以确保每个选民在表中只有一张选票。如果选民尝试投票超过一次，只有第一次选票会被计入，之后的选票将被拒绝。
- en: The `ballot_cast_datetime` column saves the date and time that the ballot was
    cast. You set a `default` so that if a value isn’t provided for this column, the
    `now()` function will write the current date and time to it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`ballot_cast_datetime` 列保存选票投下的日期和时间。你设置了一个 `default`，以便如果该列没有提供值，`now()` 函数将自动写入当前日期和时间。'
- en: You put a foreign key constraint on the `ballot` table’s `voter_id` column to
    reject any ballots submitted by a voter whose information is not in the `voter`
    table.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你在 `ballot` 表的 `voter_id` 列上设置了外键约束，拒绝任何来自 `voter` 表中没有记录的选民提交的选票。
- en: Lastly, you add a `check` constraint to the `ballot_type` column that allows
    only the values `in-person` or `absentee`. Any rows with other ballot types will
    be rejected.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你在 `ballot_type` 列上添加一个 `check` 约束，只允许值为 `in-person` 或 `absentee`。任何其他类型的选票将被拒绝。
- en: The race Table
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 竞选表
- en: 'The `race` table stores information about each race in your election, including
    the name of the race and how many candidates voters can vote for in it. You’ll
    create it like so:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`race` 表存储有关你选举中每个竞选的信息，包括竞选名称以及选民在竞选中可以投票的候选人数量。你将像这样创建它：'
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `race_id` column is the primary key for this table, and is set to automatically
    increment. You define the `race_name` column with a `unique` constraint so that
    two races of the same name, like `Treasurer`, can’t be inserted into the table.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`race_id` 列是该表的主键，并设置为自动递增。你为 `race_name` 列定义了 `unique` 约束，以确保相同名称的竞选（如 `Treasurer`）不会被重复插入到表中。'
- en: The `votes_allowed` column holds the number of candidates voters can select
    in this race. For example, voters can choose one candidate for the mayoral race,
    and two for the school committee race.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`votes_allowed` 列保存选民在该竞选中可以选择的候选人数量。例如，选民可以在市长竞选中选择一位候选人，在学校委员会竞选中选择两位候选人。'
- en: The candidate Table
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 候选人表
- en: 'Next, you’ll create the `candidate` table, which stores information about the
    candidates who are running:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将创建 `candidate` 表，存储所有参与竞选的候选人信息：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `candidate_id` column is the primary key for this table. This not only prevents
    duplicate rows from being entered by mistake, but also enforces a *business rule*—a
    requirement or policy about the way your system operates—that a candidate can
    run for only one race. For example, if a candidate tries to run for both mayor
    and treasurer, the second row would be rejected. You also define the `candidate_id`
    column to automatically increment.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`candidate_id` 列是该表的主键。这不仅防止了重复行被误插入，而且还强制执行了一个 *业务规则*——即候选人只能参加一个竞选。例如，如果一个候选人试图同时竞选市长和财务主管，第二行将会被拒绝。你还将
    `candidate_id` 列设置为自动递增。'
- en: The `race_id` column stores the ID of the race in which the candidate is running.
    The `race_id` is defined as a foreign key to the `race_id` column in the `race`
    table. This means that there can’t be a `race_id` value in the `candidate` table
    that isn’t also in the `race` table.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`race_id` 列存储候选人参与的竞选的 ID。`race_id` 被定义为指向 `race` 表中 `race_id` 列的外键。这意味着 `candidate`
    表中不能有一个 `race_id` 值，除非该值也出现在 `race` 表中。'
- en: You define `candidate_name` as unique so that there can’t be two candidates
    in the table with the same name.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你将`candidate_name`定义为唯一，以确保表中不会有两个候选人使用相同的名字。
- en: The ballot_candidate Table
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`ballot_candidate` 表'
- en: Now, you’ll create your final table, `ballot_candidate`. This table tracks which
    candidates received votes on which ballot.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将创建最终的表格`ballot_candidate`。该表用于跟踪哪些候选人在哪些选票中获得了选票。
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is an associative table that references both the `ballot` and `candidate`
    tables. The primary key for this table comprises both the `ballot_id` and `candidate_id`
    columns. This enforces a rule that no candidate can get more than one vote from
    the same ballot. If someone attempted to insert a duplicate row with the same
    `ballot_id` and `candidate_id`, the row would be rejected. Both columns are also
    foreign keys. The `ballot_id` column is used to join to the `ballot` table and
    `candidate_id` is used to join to the `candidate` table.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个关联表，引用了`ballot`和`candidate`表。该表的主键由`ballot_id`和`candidate_id`列组成。这样可以强制执行一个规则，即同一张选票上不能为同一候选人投超过一票。如果有人尝试插入一个重复的行，`ballot_id`和`candidate_id`相同，则该行会被拒绝。两个列也是外键。`ballot_id`列用于与`ballot`表连接，`candidate_id`则用于与`candidate`表连接。
- en: By defining your tables with these constraints, you’re improving the quality
    and integrity of the data in your database.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在表格中定义这些约束，你可以提高数据库中数据的质量和完整性。
- en: Adding Triggers
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加触发器
- en: You’ll create several triggers on your tables to enforce business rules and
    track changes to your data for auditing purposes. These triggers will fire before
    or after a row is inserted, updated, or deleted from a table.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你将为表格创建多个触发器，以执行业务规则并跟踪数据变更以进行审计。这些触发器将在插入、更新或删除行之前或之后触发。
- en: Before Triggers
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Before`触发器'
- en: You’ll use triggers that fire *before* data gets changed to prevent data that
    doesn’t adhere to your business rules from being written to your tables. In [Chapter
    12](c12.xhtml), you created a trigger that changed credit scores that were below
    300 to exactly 300 right before the data was saved to a table. For this project,
    you’ll use before triggers to make sure voters don’t *overvote*, or vote for more
    candidates than allowed for that race. You’ll also use before triggers to prevent
    particular users from making changes to some of your tables. Not every table will
    need a before trigger.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用触发器，这些触发器会在数据变动*之前*触发，以防止不符合业务规则的数据被写入表格中。在[第12章](c12.xhtml)中，你创建了一个触发器，它会在数据保存到表格之前，将低于300的信用分数改为恰好300。对于这个项目，你将使用`before`触发器来确保选民不会*超额投票*，即投票给比该竞选项目允许的更多的候选人。你还将使用`before`触发器来防止特定用户对某些表格进行更改。并不是所有表格都需要`before`触发器。
- en: Business Rules
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 业务规则
- en: 'You’ll enforce a few business rules using before triggers. First, although
    all poll workers are allowed to make changes to the `ballot` and `ballot_candidate`
    tables, only the secretary of state is allowed to make changes to data in the
    `voter`, `race`, and `candidate` tables. You’ll create the following before triggers
    to enforce this business rule:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用`before`触发器强制执行一些业务规则。首先，尽管所有选举工作人员都可以对`ballot`和`ballot_candidate`表进行更改，但只有州务卿可以更改`voter`、`race`和`candidate`表中的数据。你将创建以下`before`触发器来执行这个业务规则：
- en: '| `tr_voter_bi` | Prevents other users from inserting voters |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `tr_voter_bi` | 防止其他用户插入选民 |'
- en: '| `tr_race_bi` | Prevents other users from inserting races |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `tr_race_bi` | 防止其他用户插入竞选项目 |'
- en: '| `tr_candidate_bi` | Prevents other users from inserting candidates |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `tr_candidate_bi` | 防止其他用户插入候选人 |'
- en: '| `tr_voter_bu` | Prevents other users from updating voters |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `tr_voter_bu` | 防止其他用户更新选民信息 |'
- en: '| `tr_race_bu` | Prevents other users from updating races |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `tr_race_bu` | 防止其他用户更新竞选项目 |'
- en: '| `tr_candidate_bu` | Prevents other users from updating candidates |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `tr_candidate_bu` | 防止其他用户更新候选人信息 |'
- en: '| `tr_voter_bd` | Prevents other users from deleting voters |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `tr_voter_bd` | 防止其他用户删除选民 |'
- en: '| `tr_race_bd` | Prevents other users from deleting races |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `tr_race_bd` | 防止其他用户删除竞选项目 |'
- en: '| `tr_candidate_bd` | Prevents other users from deleting candidates |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `tr_candidate_bd` | 防止其他用户删除候选人 |'
- en: These triggers will prevent users from making changes and will display an error
    message explaining that only the secretary of state is allowed to change this
    data.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这些触发器将阻止用户进行更改，并显示一条错误消息，解释只有州务卿可以更改这些数据。
- en: Second, voters are allowed to select a certain number of candidates for each
    race. It’s fine for voters to select no candidates for a race, or to select fewer
    than the maximum allowed number of candidates for a race, but they may not select
    more than the maximum number of candidates allowed. You’ll prevent overvoting
    by creating the `tr_ballot_candidate_bi` trigger.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，选民可以为每个竞选选择一定数量的候选人。选民可以选择不为某个竞选选择任何候选人，或者选择少于最大允许数量的候选人，但他们不能选择超过最大允许数量的候选人。你将通过创建`tr_ballot_candidate_bi`触发器来防止选民过度投票。
- en: These are all the before triggers you’ll need for this project. Remember, some
    tables won’t have before triggers.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这些就是你为这个项目所需的所有插入前触发器。记住，并不是所有表都需要插入前触发器。
- en: Before Insert Triggers
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 插入前触发器
- en: You’ll need four *before insert* triggers for your project. Three of them will
    prevent users other than the secretary of state from inserting data in your `voter`,
    `race`, and `candidate` tables. The other before insert trigger will prevent voters
    from voting for too many candidates in a race.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要为你的项目创建四个*插入前*触发器。其中三个触发器将阻止除了州务卿以外的用户在`voter`、`race`和`candidate`表中插入数据。另一个插入前触发器将防止选民在某个竞选中投票给过多的候选人。
- en: In [Listing 17-1](#listing17-1), you write the before insert trigger to prevent
    users other than the secretary of state from inserting new rows in your `voter`
    table.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在[列表17-1](#listing17-1)中，你编写了插入前触发器，防止除了州务卿以外的用户在`voter`表中插入新记录。
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 17-1: Defining the `tr_voter_bi` trigger'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 列表17-1：定义`tr_voter_bi`触发器
- en: First, in case the trigger already exists, you drop it before you re-create
    it. You define the `tr_voter_bi` trigger as a `before insert` trigger. For each
    row being inserted into the `voter` table, you check that the name of the user
    inserting the new voter starts with the text `secretary_of_state`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为了防止触发器已存在，你会在重新创建之前删除它。你将`tr_voter_bi`触发器定义为`before insert`触发器。对于每一行插入到`voter`表中的数据，你会检查插入新选民的用户姓名是否以`secretary_of_state`开头。
- en: The `user()` function returns both the username and the hostname, like `secretary_of_state@localhost`.
    If that string doesn’t start with the text `secretary_of_state`, it means somebody
    other than the secretary of state is trying to insert a voter record. In that
    case, you’ll send an error message with the `signal` statement ❶.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`user()`函数返回用户名和主机名，例如`secretary_of_state@localhost`。如果该字符串不以`secretary_of_state`开头，意味着是除了州务卿以外的其他人试图插入选民记录。在这种情况下，你将使用`signal`语句发送错误信息❶。'
- en: You might remember from [Chapter 12](c12.xhtml) that `sqlstate` is a five-character
    code that identifies errors and warnings. The value you used, `45000`, is an error
    condition that causes your trigger to exit. This prevents the row from being written
    to the `voter` table.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得在[第12章](c12.xhtml)中提到过，`sqlstate`是一个五字符代码，用于标识错误和警告。你使用的值`45000`表示一种错误状态，这会导致触发器退出，从而防止该行被写入`voter`表。
- en: 'You can define the message to display by using the `set message_text` syntax.
    Notice that this line is a part of the `signal` command, as there is no semicolon
    at the end of the `signal` line. You could have combined these two lines into
    one, like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`set message_text`语法来定义要显示的消息。注意，这一行是`signal`命令的一部分，因为`signal`行末没有分号。你本可以将这两行合并成一行，如下所示：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This `tr_voter_bi` trigger prevents users other than the secretary of state
    from inserting voter rows.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`tr_voter_bi`触发器防止除州务卿以外的用户插入选民记录。
- en: Now, write your `tr_ballot_candidate_bi` trigger to prevent voters from voting
    for too many candidates in a race ([Listing 17-2](#listing17-2)).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，编写你的`tr_ballot_candidate_bi`触发器，以防止选民在竞选中投票给过多的候选人（[列表17-2](#listing17-2)）。
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Listing 17-2: Defining the `tr_ballot_candidate_bi` trigger'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 列表17-2：定义`tr_ballot_candidate_bi`触发器
- en: Before a new row is inserted into the `ballot_candidate` table, your trigger
    finds the number of votes allowed for that race. Then, it checks how many existing
    rows are in the `ballot_candidate` table for this ballot and this race. If the
    number of existing votes is greater than or equal to the maximum allowed, the
    new row is prevented from being inserted. (The number of existing votes should
    never be greater than the maximum allowed, but you’ll check just for completeness.)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在新记录插入到`ballot_candidate`表之前，你的触发器会查找该竞选中的投票数限制。然后，它会检查该投票和竞选对应的`ballot_candidate`表中现有的行数。如果现有的投票数大于或等于最大允许数，新记录将被阻止插入。（现有的投票数不应超过最大允许数，但你仍会检查以确保完整性。）
- en: 'You declare five variables in your trigger: `v_race_id` holds the race ID,
    `v_race_name` holds the name of the race, `v_existing_votes` stores the number
    of votes that have already been cast on this ballot for candidates in this race,
    `v_votes_allowed` holds the number of candidates that voters are allowed to select
    in this race, and the `v_error_msg` variable holds an error message to display
    to the user in case too many candidates have been selected.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你在触发器中声明了五个变量：`v_race_id` 存储选举 ID，`v_race_name` 存储选举名称，`v_existing_votes` 存储该选票上已经投给该选举候选人的投票数，`v_votes_allowed`
    存储选民可以在该选举中选择的候选人数量，`v_error_msg` 变量则存储错误消息，以便在选了太多候选人时显示给用户。
- en: In the first `select` statement ❶, you use the `candidate_id` that is about
    to be inserted in the table—`new.candidate_id`—to get information about the race
    the candidate is running for. You join to the `race` table and get the `race_id`,
    `race_name`, and `votes_allowed` for the race and save them to variables ❷.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个 `select` 语句 ❶ 中，你使用即将插入到表中的 `candidate_id`（即 `new.candidate_id`）来获取候选人参选的选举信息。你通过连接
    `race` 表，获取 `race_id`、`race_name` 和 `votes_allowed`，并将它们保存到变量中 ❷。
- en: In your second `select` statement, you get a count of how many votes already
    exist in the `ballot_candidate` table for this race and this ballot ❸. You join
    to the `candidate` table to get the list of candidates that are running for this
    race. Then you count the number of rows in the `ballot_candidate` table with a
    row that has one of those candidates and this ballot ID.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的第二个 `select` 语句中，你会获取已经存在于 `ballot_candidate` 表中的投票数量，用于该选举和该选票 ❸。你通过连接 `candidate`
    表，获取参选该选举的候选人列表。然后，你统计 `ballot_candidate` 表中与这些候选人之一和该选票 ID 相关的行数。
- en: 'If the `ballot_candidate` table already has the maximum number of votes for
    this ballot and this race, you’ll use the `signal` command with a `sqlstate` code
    of `45000` to exit from the trigger and prevent the new row from being written
    to the `ballot_candidate` table ❹. You’ll display the error message that you stored
    in the `v_error_msg` variable to the user:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `ballot_candidate` 表已经有该选票和选举的最大投票数，你将使用 `signal` 命令，并带上 `sqlstate` 代码 `45000`
    来退出触发器，并防止新行被写入 `ballot_candidate` 表 ❹。你将显示存储在 `v_error_msg` 变量中的错误信息给用户：
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Before Update Triggers
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新前触发器
- en: You also need to prevent users other than the secretary of state from updating
    voter rows by writing a `tr_voter_bu` trigger, as shown in [Listing 17-3](#listing17-3).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要通过编写 `tr_voter_bu` 触发器来防止除州务卿外的其他用户更新选民行，如 [清单 17-3](#listing17-3) 所示。
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Listing 17-3: Defining the `tr_voter_bu` trigger'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 17-3：定义 `tr_voter_bu` 触发器
- en: This trigger will fire before a row is updated in the `voter` table.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这个触发器将在 `voter` 表中的一行被更新之前触发。
- en: Although the before insert and before update triggers are similar, there is
    no way to combine them into one trigger. MySQL doesn’t have a way to write a `before
    insert or update` trigger; it requires you to write two separate triggers instead.
    You can, however, call stored procedures from triggers. If two triggers shared
    similar functionality, you could add that functionality to a stored procedure
    and have each trigger call that procedure.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管插入前触发器和更新前触发器类似，但没有办法将它们合并成一个触发器。MySQL 没有办法编写 `before insert or update` 类型的触发器；它要求你编写两个单独的触发器。不过，你可以从触发器中调用存储过程。如果两个触发器有类似的功能，你可以将该功能添加到存储过程中，并让每个触发器调用该过程。
- en: Before Delete Triggers
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 删除前触发器
- en: Next you’ll write the `tr_voter_bd` trigger to prevent any user other than the
    secretary of state from deleting voter data ([Listing 17-4](#listing17-4)).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写 `tr_voter_bd` 触发器，以防止除州务卿以外的任何用户删除选民数据（[清单 17-4](#listing17-4)）。
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Listing 17-4: Defining the `tr_voter_bd` trigger'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 17-4：定义 `tr_voter_bd` 触发器
- en: After Triggers
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新后触发器
- en: You’ll be writing triggers that fire *after* your data is inserted, updated,
    or deleted to track the changes made to your tables. But since the purpose of
    after triggers is to write rows to the audit tables, you need to create those
    audit tables first. These audit tables save a record of the changes made to the
    data in your tables, similar to those you saw in [Chapter 12](c12.xhtml).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你将编写在数据插入、更新或删除后触发的触发器，以跟踪对表所做的更改。但由于 `after` 触发器的目的是将行写入审计表，因此你需要首先创建这些审计表。这些审计表保存对你表中数据所做更改的记录，类似于你在
    [第12章](c12.xhtml) 中看到的内容。
- en: Audit Tables
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 审计表
- en: Name your audit tables with the `_audit` suffix. For example, you’ll track changes
    made to the `voter` table in the `voter_audit` table. You’ll name all audit tables
    this way so it’s clear what data they’re tracking.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为审计表命名时，使用`_audit`后缀。例如，你将跟踪对`voter`表所做的更改，并将其记录在`voter_audit`表中。你将以这种方式命名所有审计表，以便明确它们跟踪的数据。
- en: Create the audit tables as shown in [Listing 17-5](#listing17-5).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[列表17-5](#listing17-5)中的示例创建审计表。
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Listing 17-5: Creating audit tables before defining your after triggers'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 列表17-5：在定义后触发器之前创建审计表
- en: All of your audit tables are defined with the same structure. Each table has
    an `audit_datetime` column that contains the date and time that the change was
    made, an `audit_user` column that contains the name of the user who made the changes,
    and an `audit_change` column that contains a description of the data that was
    changed. When you find data in your voting application that doesn’t seem right,
    you can look to these audit tables to find out more information.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 所有审计表的结构都是一样的。每个表都有一个`audit_datetime`列，用于存储更改的日期和时间，一个`audit_user`列，用于存储进行更改的用户的姓名，以及一个`audit_change`列，用于存储更改的数据描述。当你在投票应用程序中发现数据似乎不对时，可以查看这些审计表，获取更多信息。
- en: Next, for each data table you’ll create three after triggers that fire after
    an `insert`, `update`, or `delete`. The names of the triggers are shown in [Table
    17-1](#table17-1).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，对于每个数据表，你将创建三个触发器，这些触发器在`insert`、`update`或`delete`操作后触发。触发器的名称显示在[表17-1](#table17-1)中。
- en: 'Table 17-1: After Trigger Names'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 表17-1：后触发器名称
- en: '| **Table** | **After insert triggers** | **After update triggers** | **After
    delete triggers** |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| **表** | **后插入触发器** | **后更新触发器** | **后删除触发器** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `voter` | `tr_voter_ai` | `tr_voter_au` | `tr_voter_ad` |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `voter` | `tr_voter_ai` | `tr_voter_au` | `tr_voter_ad` |'
- en: '| `ballot` | `tr_ballot_ai` | `tr_ballot_au` | `tr_ballot_ad` |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `ballot` | `tr_ballot_ai` | `tr_ballot_au` | `tr_ballot_ad` |'
- en: '| `race` | `tr_race_ai` | `tr_race_au` | `tr_race_ad` |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `race` | `tr_race_ai` | `tr_race_au` | `tr_race_ad` |'
- en: '| `candidate` | `tr_candidate_ai` | `tr_candidate_au` | `tr_candidate_ad` |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `candidate` | `tr_candidate_ai` | `tr_candidate_au` | `tr_candidate_ad` |'
- en: '| `ballot_candidate` | `tr_ballot_candidate_ai` | `tr_ballot_candidate_au`
    | `tr_ballot_candidate_ad` |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `ballot_candidate` | `tr_ballot_candidate_ai` | `tr_ballot_candidate_au`
    | `tr_ballot_candidate_ad` |'
- en: You’ll start with the `after_insert` trigger for each table.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你将从每个表的`after_insert`触发器开始。
- en: After Insert Triggers
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 后插入触发器
- en: The `tr_voter_ai` trigger will fire after new rows are inserted into the `voter`
    table, adding rows to the `voter_audit` table to track the new data (see [Listing
    17-6](#listing17-6)).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`tr_voter_ai`触发器将在向`voter`表中插入新行后触发，向`voter_audit`表添加行，以跟踪新数据（参见[列表17-6](#listing17-6)）。'
- en: '[PRE13]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Listing 17-6: Defining the `tr_voter_ai` trigger'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 列表17-6：定义`tr_voter_ai`触发器
- en: To create the trigger, you first check if the `tr_voter_ai` trigger already
    exists. If so, you drop it before re-creating it. Since a SQL `insert` statement
    can insert one row or many rows, you specify that for each row being inserted
    into the `voter` table, you want to write a single row to the `voter_audit` table
    ❶.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建触发器，首先检查`tr_voter_ai`触发器是否已经存在。如果存在，则先删除它，然后再重新创建。由于SQL `insert`语句可以插入一行或多行数据，因此你需要指定，对于每一行插入到`voter`表中的数据，你希望在`voter_audit`表中写入一行数据
    ❶。
- en: In the `audit_datetime` column, you insert the current date and time using the
    `now()` function ❷. In the `audit_user` column, you use the `user()` function
    to insert the name of the user who made the change. The `user()` function also
    returns the user’s hostname, so usernames are followed by an at sign (`@`) and
    a hostname, like `clerk_238@localhost`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在`audit_datetime`列中，使用`now()`函数插入当前日期和时间 ❷。在`audit_user`列中，使用`user()`函数插入进行更改的用户名称。`user()`函数还会返回用户的主机名，因此用户名后面会跟随一个@符号和主机名，如`clerk_238@localhost`。
- en: You use the `concat()` function in the `audit_change` column to build a string
    that shows the values that were inserted. You start with the text `New voter added
    -` ❸ and get the inserted values by using the `new` keyword that’s available to
    you in `insert` triggers. For example, `new.voter_id` shows you the `voter_id`
    that was just inserted into the `voter` table.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你在`audit_change`列中使用`concat()`函数构建一个字符串，显示被插入的值。你以文本`New voter added -` ❸开始，通过使用`insert`触发器中可用的`new`关键字获取插入的值。例如，`new.voter_id`显示刚刚插入到`voter`表中的`voter_id`。
- en: 'After a new row is added to the `voter` table, the `tr_voter_ai` trigger fires
    and writes a row with values like the following to the `voter_audit` table:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当向`voter`表中添加一行新数据时，`tr_voter_ai`触发器会触发，并将像以下这样的值写入`voter_audit`表：
- en: '[PRE14]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The trigger writes the datetime, user (and hostname), and details about the
    new voter to the audit table.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 该触发器将新选民的日期时间、用户（和主机名）以及详细信息写入审计表。
- en: After Delete Triggers
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 删除后触发器
- en: In [Listing 17-7](#listing17-7) you write the after delete trigger, called `tr_voter_ad`,
    which will fire after rows are deleted from the `voter` table and track the deletions
    in the `voter_audit` table.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例 17-7](#listing17-7)中，你编写了删除后触发器`tr_voter_ad`，它将在`voter`表中的行被删除后触发，并追踪这些删除到`voter_audit`表中。
- en: '[PRE15]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Listing 17-7: Defining the `tr_voter_ad` trigger'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 17-7：定义`tr_voter_ad`触发器
- en: You define this trigger as `after delete` on the `voter` table ❶. You use the
    `user()` and `now()` functions to get the user who deleted the `voter` row and
    the date and time at which the row was deleted. You build a string, using the
    `concat()` function, that shows the values that were deleted.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你将此触发器定义为`voter`表上的`after delete`触发器 ❶。你使用`user()`和`now()`函数获取删除`voter`行的用户及该行被删除的日期和时间。你构建一个字符串，使用`concat()`函数，显示已删除的值。
- en: The after delete trigger looks similar to your after insert trigger, but you
    use the `old` keyword instead of `new`. You can precede your column names with
    `old` and a period to get their value. For example, use `old.voter_id` to get
    the value of the `voter_id` column for the row that was just deleted.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 删除后触发器看起来与插入后触发器类似，但你使用`old`关键字代替`new`。你可以在列名之前加上`old`和句点来获取它们的值。例如，使用`old.voter_id`来获取刚删除的行中`voter_id`列的值。
- en: 'After a row is deleted from the `voter` table, the `tr_voter_ad` trigger fires
    and writes a row to the `voter_audit` table with values like the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当一行从`voter`表中删除时，`tr_voter_ad`触发器被触发，并将一行像以下这样的值写入`voter_audit`表：
- en: '[PRE16]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The trigger writes the datetime, user (and hostname), and details about the
    deleted voter record to the audit table.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 该触发器将删除选民记录的日期时间、用户（和主机名）以及详细信息写入审计表。
- en: After Update Triggers
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新后触发器
- en: Now you’ll write the after update trigger, `tr_voter_au`, which will fire after
    rows in the `voter` table are updated and track the change in the `voter_audit`
    table ([Listing 17-8](#listing17-8)).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将编写更新后触发器`tr_voter_au`，该触发器将在`voter`表中的行被更新后触发，并将变更追踪到`voter_audit`表中（[示例
    17-8](#listing17-8)）。
- en: '[PRE17]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Listing 17-8: Defining the `tr_voter_au` trigger'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 17-8：定义`tr_voter_au`触发器
- en: Because the after update trigger fires after a row gets updated in a table,
    it can take advantage of both the `new` and `old` keywords. For example, you can
    see if the `voter_name` column value was updated in the `voter` table by checking
    `new.voter_name != old.voter_name` ❶. If the new value of the voter’s name isn’t
    the same as the old value, it was updated, and you’ll save that information to
    write to the `audit` table.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 因为更新后触发器会在行被更新后触发，所以它可以同时使用`new`和`old`关键字。例如，你可以通过检查`new.voter_name != old.voter_name`
    ❶来查看`voter`表中的`voter_name`列值是否已更新。如果选民的名字的新值与旧值不同，则表示该值已更新，你将保存此信息并写入`audit`表。
- en: For your `insert` and `delete` triggers, you wrote the values for *all* the
    columns in the `voter` table to the `voter_audit` table, but for your `update`
    trigger, you’ll report only on the column values that changed.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你的`insert`和`delete`触发器，你将`voter`表中*所有*列的值写入`voter_audit`表，但对于`update`触发器，你只会报告已更改的列值。
- en: For example, if you ran this `update` statement
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你运行了这个`update`语句
- en: '[PRE18]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'your `update` trigger would write a row to the `voter_audit` table with just
    these changes:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你的`update`触发器将只把这些更改写入`voter_audit`表：
- en: '[PRE19]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Since there were only two column values that changed, `voter_name` and `voter_party`,
    you’ll write those two changes to your audit table.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 由于只有`voter_name`和`voter_party`这两个列值发生了变化，你将把这两个更改写入审计表。
- en: To capture the changes that were made, you create a variable called `@change_msg`
    ❷. Using `if` statements, you check if each column value changed. When a column’s
    value has changed, you use the `concat()` function to add information about that
    column’s changes to the end of the existing `@change_msg` string variable. Once
    you’ve checked all of the column values for changes, you write the value of `@change_msg`
    variable to the `audit_change` column of the audit table ❸. You also write to
    the audit table the username of the person who made the change to the `audit_user`
    column, and the date and time that the change was made to the `audit_datetime`
    column.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 为了捕捉所做的更改，你创建了一个名为`@change_msg`的变量❷。通过`if`语句，你检查每个列值是否发生了变化。当某列的值发生变化时，你使用`concat()`函数将该列变化的信息添加到现有`@change_msg`字符串变量的末尾。检查完所有列值的变化后，你将`@change_msg`变量的值写入审计表的`audit_change`列❸。你还会将做出更改的用户名写入`audit_user`列，并将更改的日期和时间写入`audit_datetime`列。
- en: You’ve successfully built a database that not only stores your election data,
    but also includes constraints and triggers that keep the data at a high quality.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经成功构建了一个数据库，它不仅存储了选举数据，还包括了约束和触发器，确保数据保持高质量。
- en: Alternative Approaches
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 替代方法
- en: As with the `weather` database project in the previous chapter, there are numerous
    approaches to writing this `voter` database.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 就像上一章中的`weather`数据库项目一样，编写这个`voter`数据库有很多不同的方法。
- en: Audit Tables
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 审计表
- en: 'In this project, you created five different audit tables. Instead, you could
    have created just one audit table and written all of the audit records there.
    Alternatively, you could have created 15 audit tables: three for each table. For
    example, rather than auditing voter inserts, deletes, and updates to the `voter_audit`
    table, you could have audited new voters to a table called `voter_audit_insert`,
    changes to voters to `voter_audit_update`, and deletions to `voter_audit_delete`.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你创建了五个不同的审计表。你本可以只创建一个审计表，并将所有审计记录写入其中。或者，你本可以创建15个审计表：每个表三个。例如，与其审计`voter_audit`表中的选民插入、删除和更新，你本可以将新选民的记录审计到名为`voter_audit_insert`的表中，将选民更改记录审计到`voter_audit_update`，将删除操作审计到`voter_audit_delete`。
- en: Triggers vs. Privileges
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 触发器与权限
- en: Rather than using triggers to control which users can update which tables, your
    database administrator could have done this by granting and revoking these privileges
    to and from your database users. The advantage of using triggers is that you’re
    able to display a customized message to the user explaining the problem, like
    `Voters can be added only by the Secretary of State`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 与其使用触发器来控制哪些用户可以更新哪些表，数据库管理员本可以通过授予和撤销这些权限来控制数据库用户。使用触发器的优势在于，你可以向用户显示自定义消息，解释问题，例如`只有州务卿才能添加选民`。
- en: Replacing check Constraints with New Tables
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用新表替代检查约束
- en: 'When you created the `ballot` table, you used the following `check` constraint
    to make sure that the `ballot_type` column has a value of `in-person` or `absentee`:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建`ballot`表时，使用了以下`check`约束，确保`ballot_type`列的值为`in-person`或`absentee`：
- en: '[PRE20]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Another approach would have been to create a `ballot_type` table that has rows
    for each ballot type, like this:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是创建一个`ballot_type`表，其中包含每种选票类型的行，像这样：
- en: '[PRE21]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You could have added a table, named `ballot_type`, and made the `ballot_type_id`
    column the primary key. If you did, you would save the `ballot_type_id` instead
    of the `ballot_type` in the `ballot` table. This would look like [Figure 17-3](#figure17-3).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你本可以添加一个名为`ballot_type`的表，并将`ballot_type_id`列设为主键。如果这样做，你将会在`ballot`表中保存`ballot_type_id`，而不是`ballot_type`。这将如下所示：[图17-3](#figure17-3)。
- en: '![](image_fi/503007c17/f17003.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/503007c17/f17003.png)'
- en: 'Figure 17-3: Creating a `ballot_type` table to store ballot types'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图17-3：创建一个`ballot_type`表以存储选票类型
- en: One advantage to this approach is that you could add new ballot types, like
    `military` or `overseas`, without having to change the definition of the `ballot`
    table. It’s also more efficient for each row of the `ballot` table to save an
    ID representing the ballot type, like `3`, rather than saving the full name, like
    `absentee`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的一个优点是，你可以添加新的选票类型，比如`military`或`overseas`，而无需更改`ballot`表的定义。对于`ballot`表的每一行来说，保存一个代表选票类型的ID，比如`3`，而不是保存完整的名称，如`absentee`，也是更高效的。
- en: 'You could have used a similar approach for the `voter` table. Instead of creating
    the `voter` table with the columns `voter_county`, `voter_district`, `voter_precinct`,
    and `voter_party`, you could have built the table to save just the IDs: `voter_county_id`,
    `voter_district_id`, `voter_precinct_id`, and `voter_party_id` and referenced
    new tables named `county`, `district`, `precinct`, and `party` to get the list
    of valid IDs.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 你本可以对`voter`表使用类似的方法。与其创建包含`voter_county`、`voter_district`、`voter_precinct`和`voter_party`列的`voter`表，不如只保存ID：`voter_county_id`、`voter_district_id`、`voter_precinct_id`和`voter_party_id`，然后引用名为`county`、`district`、`precinct`和`party`的新表来获取有效ID的列表。
- en: There is plenty of room for creativity when creating databases, so don’t feel
    as though you need to strictly follow the approach I’ve used in this project.
    Try any of these alternative approaches and see how they work for you!
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建数据库时有足够的创意空间，因此不必觉得需要严格按照我在本项目中使用的方法来操作。尝试这些替代方法，看看它们对你是否有效！
- en: Summary
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you built a voting database that stores data for an election.
    You prevented data integrity problems using constraints and triggers, and tracked
    changes to your data using audit tables. You also saw some possible alternative
    approaches to this project. In the third and final project, you’ll use views to
    hide sensitive salary data.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你构建了一个投票数据库，用于存储选举数据。你通过使用约束和触发器防止了数据完整性问题，并通过审计表跟踪了数据的变化。你还看到了这个项目的一些可能替代方案。在第三个也是最后一个项目中，你将使用视图来隐藏敏感的薪资数据。
