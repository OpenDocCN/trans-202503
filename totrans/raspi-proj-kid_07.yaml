- en: '7'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '7'
- en: RADIO INVASION
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 无线电入侵
- en: 'THE RASPBERRY PI NEVER CEASES TO AMAZE ME. WITH JUST A SINGLE JUMPER WIRE,
    YOU CAN CONVERT THE RASPBERRY PI INTO A RADIO TRANSMITTER. THAT’S RIGHT: YOU CAN
    USE IT TO BROADCAST MESSAGES TO A REAL RADIO.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派总是让我感到惊讶。只需一根跳线，你就能将树莓派转变为一个无线电发射器。没错：你可以用它向真正的收音机广播信息。
- en: In this chapter’s project, you’ll create a simple soundboard to trigger and
    control broadcasts to the radio. You’ll record sounds or phrases, such as “Listen
    up, everybody” or “I want a cookie,” or create an emergency broadcast message.
    Then you’ll assign each sound file to its own button, which you’ll click to broadcast
    your message to any radios tuned in to the correct frequency. By hijacking radio
    waves, you’ll be able to prank unsuspecting listeners, share important gossip,
    or create a personal announcement system.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的项目中，你将创建一个简单的音效板，用来触发和控制广播到收音机的信号。你将录制一些声音或短语，比如“大家听着”或“我想要一块饼干”，或者创建一个紧急广播信息。然后，你将为每个声音文件分配一个按钮，点击该按钮即可将信息广播到调频到正确频率的收音机。通过劫持无线电波，你将能够恶搞毫无戒心的听众、分享重要八卦，或者创建一个个人广播系统。
- en: Radio waves are everywhere. When you watch your television, the program is likely
    being transmitted to you via radio waves. The Wi-Fi router in your house broadcasts
    data packets as radio waves. In fact, many cars now use data encoded in radio
    waves to unlock doors or start the engine. So how do you hack a Raspberry Pi to
    turn it into a radio transmitter?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 无线电波无处不在。当你观看电视时，节目很可能是通过无线电波传输给你的。你家里的 Wi-Fi 路由器会将数据包作为无线电波广播出去。事实上，现在许多汽车使用无线电波编码的数据来解锁车门或启动引擎。那么，如何黑入树莓派并将其变成一个无线电发射器呢？
- en: Well, GPIO pin 4 can generate a spread-spectrum clock signal, which extends
    the bandwidth, resulting in a signal that’s spread over a range of up to 40 m.
    You’ll use software called PiFM to control the pin and enable it to send your
    FM radio waves. You can read more about the science and the project at *[http://www.icrobotics.co.uk/wiki/index.php/Turning_the_Raspberry_Pi_Into_an_FM_Transmitter](http://www.icrobotics.co.uk/wiki/index.php/Turning_the_Raspberry_Pi_Into_an_FM_Transmitter)*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，GPIO 引脚 4 可以生成扩频时钟信号，扩展带宽，从而使信号在最多 40 米的范围内扩散。你将使用名为 PiFM 的软件来控制该引脚，并使其发送你的
    FM 无线电波。你可以在 *[http://www.icrobotics.co.uk/wiki/index.php/Turning_the_Raspberry_Pi_Into_an_FM_Transmitter](http://www.icrobotics.co.uk/wiki/index.php/Turning_the_Raspberry_Pi_Into_an_FM_Transmitter)*
    上了解更多关于科学原理和项目的信息。
- en: '**LEGAL ISSUES**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**法律问题**'
- en: Before you get started, be aware that this project is purely for educational
    and learning purposes, not for commercial use. The standard 4-inch jumper wire
    supports a legal broadcast radius of approximately 30–40 m. You’re responsible
    for researching your country’s laws and requirements. It’s also your responsibility
    to conform to the requirements of those laws. This project should ***not*** be
    used near any airports or military bases.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，请注意，这个项目仅用于教育和学习目的，不得用于商业用途。标准的 4 英寸跳线支持大约 30–40 米的合法广播范围。你需要自行了解你所在国家的相关法律和要求，也有责任遵守这些法律的规定。此项目***不得***在任何机场或军事基地附近使用。
- en: WHAT YOU’LL NEED
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你将需要的物品
- en: 'Here are the items you’ll need for the project:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你需要准备的项目物品：
- en: 'Raspberry Pi Zero or the original Pi model (alternative: Raspberry Pi Model
    B+ V1.2 2014 or Raspberry Pi Model A+ V1.1 2014)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派 Zero 或原版 Pi 型号（替代型号：树莓派 Model B+ V1.2 2014 或树莓派 Model A+ V1.1 2014）
- en: Jumper wire
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳线
- en: USB microphone (recommended) or other microphone
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB 麦克风（推荐）或其他麦克风
- en: FM-enabled radio (digital or analog, preferably with two speakers, either external
    or built-in)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 FM 的收音机（数字或模拟，最好带有两个扬声器，外部或内置均可）
- en: PREPARING THE RASPBERRY PI
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备树莓派
- en: Before building the main project, you’ll install the PiFM software, set up the
    radio, and then check that it works correctly. This is an easy project to set
    up.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建主项目之前，你需要安装 PiFM 软件，设置收音机，然后检查其是否正常工作。这是一个容易设置的项目。
- en: To set up the hardware, connect one jumper wire to GPIO pin 4—the fourth physical
    pin on the left of the Pi, as shown in [Figure 7-1](ch07.xhtml#ch07fig01). That’s
    it; that’s all the hardware you need to set up to broadcast your signal.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置硬件，将一根跳线连接到 GPIO 引脚 4——树莓派左侧的第四个物理引脚，如 [图 7-1](ch07.xhtml#ch07fig01) 所示。就这样，这就是你设置的所有硬件，用来广播你的信号。
- en: '![Image](../images/07fig01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/07fig01.jpg)'
- en: '**FIGURE 7-1** Attaching the jumper wire to the Raspberry Pi'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-1** 将跳线连接到树莓派'
- en: 'Follow these steps to set up the project:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤设置项目：
- en: '**Create a new folder:** You’ll create a folder to store the program software
    and sound files. Open the terminal and enter the following:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建新文件夹：** 你将创建一个文件夹来存储程序软件和音频文件。打开终端并输入以下命令：'
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This `mkdir` command creates a folder named *Radio*. Navigate to the *Radio*
    folder by entering the following command into the terminal:'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个`mkdir`命令会创建一个名为*Radio*的文件夹。通过在终端中输入以下命令进入*Radio*文件夹：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The text in the command line’s prompt should now show that you’re in the *Radio*
    folder by changing to something like this:'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命令行的提示符应该现在显示你在*Radio*文件夹中，类似于下面这样：
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Download the Python library:** Download the required PiFM library by entering
    this line in the terminal:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**下载Python库：** 通过在终端中输入以下命令，下载所需的PiFM库：'
- en: '[PRE3]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This line downloads the program file to your *Radio* folder. The file is compressed,
    so you’ll need to uncompress it to access the files. To do so, enter this command:'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一行命令将程序文件下载到你的*Radio*文件夹。文件是压缩的，你需要解压才能访问文件。要解压，输入以下命令：
- en: '[PRE4]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Then press ENTER to extract the program files into the *Radio* folder.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后按ENTER键将程序文件提取到*Radio*文件夹中。
- en: RUNNING A TEST PROGRAM
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行测试程序
- en: 'You need to check whether the radio works before you load your own sounds:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载你自己的声音之前，你需要检查收音机是否正常工作：
- en: '**Tune in to the radio:** Plug in your radio and turn it on. Ensure that it’s
    on the FM setting and tune it to 100.0 MHz. You should hear the hiss of the radio,
    because nothing else is being broadcast on that frequency.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**调谐收音机：** 插入收音机并打开它。确保它处于FM模式，并调至100.0 MHz。你应该会听到收音机的嗡嗡声，因为在该频率上没有其他内容广播。'
- en: '**Run the program:** Return to the terminal window and enter the following
    code:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**运行程序：** 返回终端窗口并输入以下代码：'
- en: '[PRE5]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Press ENTER; you should hear a familiar tune broadcast to your radio. If you
    have a portable radio, you can test the broadcast radius by walking around your
    home or even going outside.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 按下ENTER键；你应该会听到一个熟悉的旋律通过收音机广播。如果你有便携式收音机，可以通过在家里走动或甚至走到户外来测试广播范围。
- en: '**Change the frequency:** You can change your frequency for broadcasting by
    changing the value at the end of the command. For example, to broadcast on frequency
    105.0, enter this:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更改频率：** 你可以通过更改命令末尾的值来更改广播频率。例如，要在105.0频率上广播，输入以下命令：'
- en: '[PRE6]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Broadcast in stereo:** The downloaded program folder includes an audio file
    to test your radio’s stereo setting. You’ll need two speakers: a left and a right
    speaker. Enter the same command line in the terminal as before, but this time
    use the *left_right.wav* file, like this:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**立体声广播：** 下载的程序文件夹包括一个音频文件，用来测试你的收音机的立体声设置。你需要两个扬声器：一个左扬声器和一个右扬声器。像之前一样输入相同的命令行，但这次使用*left_right.wav*文件，如下所示：'
- en: '[PRE7]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The tune will play on your radio again, but this time, if your radio has two
    separate speakers, the output will play through both, creating a stereo sound.
    If you don’t hear any sound, check the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 音乐旋律将再次在你的收音机上播放，但这次，如果你的收音机有两个独立的扬声器，声音将通过两个扬声器播放，形成立体声效果。如果你没有听到声音，请检查以下内容：
- en: You’re using the correct Raspberry Pi model. (Raspberry Pi Zero, original Pi
    model, Raspberry Pi Model B+ V1.2 2014, or Raspberry Pi Model A+ V1.1 2014)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你正在使用正确的树莓派型号。（树莓派Zero，原始Pi型号，树莓派Model B+ V1.2 2014，或者树莓派Model A+ V1.1 2014）
- en: You’ve connected the jumper wire to GPIO pin 4.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你已经将跳线连接到GPIO 4引脚。
- en: The radio is tuned to the correct frequency.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收音机已经调到正确的频率。
- en: The frequency in the command line matches the frequency on the radio.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行中的频率与你收音机上的频率匹配。
- en: In the terminal window, you’ve navigated to the *Radio* folder and run the program
    code from this folder.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在终端窗口中，你已经进入了*Radio*文件夹，并从该文件夹运行了程序代码。
- en: Sometimes, if a previous file hasn’t stopped playing before another is executed,
    the file won’t play or you might hear a single auditory tone from the radio. Restart
    your Raspberry Pi and run the program again.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，如果一个文件在另一个文件执行之前没有停止播放，文件就不会播放，或者你可能只会听到来自收音机的单一音调。重启你的树莓派并重新运行程序。
- en: STREAMING AN MP3 MUSIC FILE
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 流式播放MP3音乐文件
- en: 'So far, you’ve broadcast only WAV files, but your radio can also stream MP3
    files, so you can play your regular music. A WAV file has a higher sound quality
    than an MP3 file. But it takes up more storage space on your device, making WAV
    files unsuitable for streaming and downloading music. MP3 files are still high
    quality but take up a lot less storage space, so you can store more on your device
    and stream music without buffering or lag time. Most music files use MP3 as a
    standard format, which means you can create a kind of portable speaker with your
    Pi. Give it a try by following these steps:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你只播放了 WAV 文件，但你的广播设备也可以播放 MP3 文件，这样你就可以播放常规音乐了。WAV 文件的音质比 MP3 文件更高，但它占用更多的存储空间，这使得
    WAV 文件不适合用于流媒体播放和下载音乐。MP3 文件仍然保持高质量，但占用的存储空间要小得多，因此你可以在设备上存储更多内容，并且无需担心缓冲或延迟时间。大多数音乐文件使用
    MP3 作为标准格式，这意味着你可以用你的树莓派创建一种便携式扬声器。按照这些步骤试试看：
- en: '**Download an MP3 file:** Download your favorite songs and transfer them onto
    your Raspberry Pi (see “Transferring Files” on [page 31](ch01.xhtml#page_31));
    make sure it’s an MP3 file with an *.mp3* extension. Save this file to the *Radio*
    folder. Also, I recommend renaming the file to a short name to reduce the likelihood
    of errors when you type it in the command to play the song.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**下载 MP3 文件：** 下载你最喜欢的歌曲并将它们传输到你的树莓派（参见 [第31页](ch01.xhtml#page_31)的“文件传输”部分）；确保它是一个以
    *.mp3* 结尾的 MP3 文件。将此文件保存到 *Radio* 文件夹中。另外，我建议将文件重命名为一个简短的名字，以减少在输入命令播放歌曲时发生错误的可能性。'
- en: '**Install FFmpeg:** Sound isn’t digital, so the signal needs to be converted
    from analog into a string of zeros and ones in order to be played on a computer.
    The process of *sampling* captures audio so it can be converted. The higher the
    sample rate is, the more captures per second there are, and the higher the audio
    quality will be. Most MP3 files aren’t sampled at a rate that’s compatible with
    the PiFM program, so you need to install the *FFmpeg* program, which adjusts the
    MP3 file’s sample rate in real time as it’s broadcast. In the terminal, enter
    this line:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装 FFmpeg：** 声音不是数字化的，因此信号需要从模拟转换为一串零和一，以便在计算机上播放。*采样* 过程捕获音频，以便可以进行转换。采样率越高，每秒的捕获次数越多，音质也会越高。大多数
    MP3 文件的采样率与 PiFM 程序不兼容，因此你需要安装 *FFmpeg* 程序，它会在广播时实时调整 MP3 文件的采样率。在终端中输入以下命令：'
- en: '[PRE8]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This command installs the *FFmpeg* program.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令安装 *FFmpeg* 程序。
- en: '**Play the MP3 file:** After installing *FFmpeg*, navigate to the *Radio* folder
    by using this command:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**播放 MP3 文件：** 安装 *FFmpeg* 后，使用以下命令进入 *Radio* 文件夹：'
- en: '[PRE9]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then enter the following command, replacing name_of_your_file.mp3 with the
    name of your MP3 file (now you see why I encouraged you to change the filename!):'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后输入以下命令，将 name_of_your_file.mp3 替换为你的 MP3 文件名（现在你明白为什么我鼓励你更改文件名了！）：
- en: '[PRE10]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Press ENTER to execute the line of code. Then turn on your radio and tune it
    until you hear the MP3 playing. Congratulations, your song is on the radio! To
    stop the song, press **Q** to quit or press CTRL-X.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 按下 ENTER 执行代码行。然后打开你的收音机并调到你听到 MP3 播放的频道。恭喜，你的歌曲已经在广播了！要停止播放，按 **Q** 退出，或者按
    CTRL-X。
- en: RECORDING AND BROADCASTING YOUR OWN FILE
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 录制和广播你自己的文件
- en: Now you’ll create your own sound files and play them. Creating and editing audio
    files requires a lot of processing power, so it’s easiest to use another device,
    such as a laptop or a desktop computer. Most of these devices have built-in microphones
    that you can use, or if you prefer, you can attach a USB microphone.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将创建自己的音频文件并播放它们。创建和编辑音频文件需要大量的处理能力，因此最好使用另一台设备，如笔记本电脑或台式电脑。这些设备大多数都内置了麦克风，你可以使用它们，或者如果你更喜欢，也可以连接一个USB麦克风。
- en: Setting Up Your Microphone and Speakers
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置你的麦克风和扬声器
- en: To edit audio files, you’ll need to install a free, open source audio editor
    called *Audacity*. If you’re using a Windows or macOS computer, navigate to the
    website *[https://www.audacityteam.org/](https://www.audacityteam.org/)*. Click
    the link to download the software. Then install it on your device. If you’re using
    Linux, download the software using the usual terminal method.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要编辑音频文件，你需要安装一个免费的开源音频编辑器叫做 *Audacity*。如果你使用的是 Windows 或 macOS 电脑，请访问网站 *[https://www.audacityteam.org/](https://www.audacityteam.org/)*，点击链接下载软件。然后在你的设备上安装它。如果你使用的是
    Linux，请通过常规的终端方法下载软件。
- en: Plug your microphone into one of the USB ports. First, you’ll record a sound
    just to test the mic and the speakers; you’ll need to change some settings before
    recording the final sound to broadcast. Once you’re ready, open Audacity and click
    the **Record** button, shown in [Figure 7-2](ch07.xhtml#ch07fig02), to start recording.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 将麦克风插入其中一个 USB 端口。首先，你将录制一段声音以测试麦克风和扬声器；在录制最终的广播声音之前，你需要更改一些设置。准备好后，打开 Audacity，点击**录音**按钮，如[图
    7-2](ch07.xhtml#ch07fig02)所示，开始录音。
- en: '![Image](../images/07fig02.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/07fig02.jpg)'
- en: '**FIGURE 7-2** Using the Audacity controls'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-2** 使用 Audacity 控制'
- en: Speak into your microphone. Remember that you’re only testing the program’s
    ability to pick up the microphone and record sound, so it doesn’t matter what
    you say. Once you’re finished, click the **Stop** button to stop recording. Click
    the **Play** button to hear your recording. Don’t forget to ensure that your speakers
    are turned on and the volume is turned up. If you can hear the sound, your setup
    is working.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对着麦克风说话。记住，你只是测试程序能否识别麦克风并录制声音，所以说什么内容并不重要。录音完成后，点击**停止**按钮停止录音。点击**播放**按钮播放你的录音。别忘了确保扬声器已经打开并调高音量。如果你能听到声音，说明你的设置正常。
- en: Making and Playing Your Recording on the Raspberry Pi
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在树莓派上制作并播放你的录音
- en: To broadcast your new sound correctly, you’ll need to adjust the sample size
    before recording. The sample size is displayed at the bottom left of the program,
    in the **Project Rate (Hz)** drop-down list, as shown in [Figure 7-3](ch07.xhtml#ch07fig03).
    Click the drop-down arrow and select **11025** from the list.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确广播你的新音频文件，你需要在录音前调整采样率。采样率显示在程序的左下角，在**项目采样率（Hz）**下拉列表中，如[图 7-3](ch07.xhtml#ch07fig03)所示。点击下拉箭头，从列表中选择**11025**。
- en: '![Image](../images/07fig03.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/07fig03.jpg)'
- en: '**FIGURE 7-3** Changing the Project Rate to 11025 Hz'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-3** 将项目采样率更改为 11025 Hz'
- en: Now make your recording by clicking the **Record** button as you did earlier.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过点击**录音**按钮，就像之前一样进行录音。
- en: Once you’re happy with your sound recording, you need to export it to the required
    format to use it with the PiFM program and broadcast it. From the menu, click
    **File**▸**export**. From the list that appears, select **WAV (Microsoft)**, with
    the option **signed 16-bit PCM** where applicable. The program will present you
    with the option to add metadata to the file. *Metadata* is information about the
    audio track, such as its name, its length, and the year it was made. You can skip
    this option by clicking **OK**. [Figure 7-4](ch07.xhtml#ch07fig04) shows both
    drop-down menus.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你对录音效果满意，你需要将其导出为 PiFM 程序所需的格式，并进行广播。从菜单中点击**文件**▸**导出**。在弹出的列表中，选择**WAV (Microsoft)**，并选择**签名
    16 位 PCM**（如适用）。程序将提示你添加元数据到文件中。*元数据*是关于音轨的信息，如其名称、时长以及制作年份等。你可以通过点击**确定**跳过此选项。[图
    7-4](ch07.xhtml#ch07fig04)显示了两个下拉菜单。
- en: '![Image](../images/07fig04.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/07fig04.jpg)'
- en: '**FIGURE 7-4** Exporting the audio file'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-4** 导出音频文件'
- en: Next, you need to transfer your sound to your Raspberry Pi and save it to the
    *Radio* folder. Use one of the transfer methods discussed in “Transferring Files”
    on [page 31](ch01.xhtml#page_31), or you might find it quicker to copy the file
    onto a USB memory stick and then insert and copy the file to your Raspberry Pi.
    Ensure that you save the file to the *Radio* folder.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将你的音频传输到树莓派并保存在*Radio*文件夹中。使用“传输文件”一节中讨论的任一传输方法，或者你也可以将文件复制到 USB 闪存驱动器中，然后插入并将文件复制到树莓派。确保将文件保存到*Radio*文件夹。
- en: Broadcasting the File
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 广播文件
- en: 'To play your new sound file, open the terminal and enter cd Radio to navigate
    to the *Radio* folder. Then list the contents of the folder by entering this line:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要播放你的新音频文件，打开终端并输入 cd Radio 进入*Radio* 文件夹。然后，通过输入以下命令列出文件夹中的内容：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You should see your newly recorded WAV file. Enter the following command replacing
    myfile with the name of your new sound file:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到你新录制的 WAV 文件。输入以下命令，将 myfile 替换为你新录音文件的名称：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Turn on your radio, tune it to the frequency 100.0, and press ENTER. Your recording
    should play!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的收音机，将其调到 100.0 频率，然后按下 ENTER。你的录音应该会播放出来！
- en: Sometimes you might hear a single audio tone instead of your recording. This
    occurs if the previous broadcast has been interrupted before it completes. Simply
    restart your Raspberry Pi and run the command again.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能会听到一个单一的音调，而不是你的录音。如果在广播完成前被中断，就会出现这种情况。只需重新启动你的树莓派，并再次运行命令即可。
- en: CODING THE SOUNDBOARD
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写声音板代码
- en: Now that you know how to record audio files and broadcast them through the radio,
    you’ll create a simple *graphical user interface* (*GUI*) soundboard to trigger
    and control broadcasts. A GUI gives a program a user-friendly appearance to make
    it easier to use. GUIs are a staple of most computing devices, TVs, phones, and
    game consoles, because a GUI uses windows, icons, menus, and pointers to help
    users control the device. You’ll create a GUI with buttons to trigger sounds to
    avoid having to enter code into a terminal.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何录制音频文件并通过收音机广播它们，你将创建一个简单的 *图形用户界面* (*GUI*) 声音板来触发和控制广播。GUI 给程序提供了一个用户友好的界面，便于使用。GUI
    是大多数计算设备、电视、手机和游戏主机的标配，因为 GUI 使用窗口、图标、菜单和指针来帮助用户控制设备。你将创建一个包含按钮的 GUI 来触发声音，避免每次都必须在终端输入代码。
- en: 'This project uses `guizero`, a Python library that makes it very simple to
    create GUIs. If you want to read more about `guizero` or add more features, check
    out this website: *[https://lawsie.github.io/guizero/](https://lawsie.github.io/guizero/)*.
    With the GUI, you’ll assign each of your homemade MP3 sound files to its own button,
    as shown in [Figure 7-5](ch07.xhtml#ch07fig05). When you click a button, the corresponding
    message broadcasts to any radios tuned to the same frequency.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目使用了 `guizero`，一个可以非常简便地创建 GUI 的 Python 库。如果你想了解更多关于 `guizero` 的信息或添加更多功能，可以访问这个网站：
    *[https://lawsie.github.io/guizero/](https://lawsie.github.io/guizero/)*。通过 GUI，你将为每个自制的
    MP3 声音文件分配一个按钮，如 [图 7-5](ch07.xhtml#ch07fig05) 所示。当你点击按钮时，相应的消息将广播到所有调谐到同一频率的收音机。
- en: '![Image](../images/07fig05.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/07fig05.jpg)'
- en: '**FIGURE 7-5** The final soundboard GUI'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-5** 最终的声音板 GUI'
- en: Creating the GUI Functions
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建 GUI 功能
- en: 'Download and install the `guizero` Python library by opening the terminal and
    entering the following command:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 通过打开终端并输入以下命令，下载并安装 `guizero` Python 库：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As the `guizero` library is further developed, its creators will add more features
    and functionality. You can upgrade your version to the current one by using this
    command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 `guizero` 库的进一步开发，其创建者将添加更多的功能和特性。你可以使用以下命令将你的版本升级到最新版本：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Before you begin creating your soundboard, you’ll need to record and create
    at least three personal sound files containing the phrases you want to broadcast.
    To record the sound files, use the instructions in “Recording and Broadcasting
    Your Own File” on [page 120](ch07.xhtml#page_120). If you don’t want to record
    your own files, you can download sample files from the book’s resources at *[https://www.nostarch.com/raspiforkids/](https://www.nostarch.com/raspiforkids/)*.
    The resources also have an image you can use for the GUI window. You must save
    all the sound files, the code, and the image for your soundboard in the *Radio*
    folder you created at the beginning of the chapter.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始创建你的声音板之前，你需要录制并创建至少三个包含你想要广播的短语的个人声音文件。按照 “录制并广播自己的文件” 部分中的说明在 [第 120 页](ch07.xhtml#page_120)
    中录制声音文件。如果你不想录制自己的文件，可以从本书资源中下载示例文件，网址是 *[https://www.nostarch.com/raspiforkids/](https://www.nostarch.com/raspiforkids/)*。资源中还有一张图像可以用作
    GUI 窗口。你必须将所有声音文件、代码和图像保存在你在章节开始时创建的 *Radio* 文件夹中。
- en: You’ll create the program for building the soundboard in IDLE. Open the Python
    IDLE editor, and then open a new script by clicking **File**▸**New File**. Save
    your new Python file to the *Radio* folder as *radio_gui.py* and enter the code
    in [Listing 7-1](ch07.xhtml#ch07ex01).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在 IDLE 中创建构建声音板的程序。打开 Python IDLE 编辑器，然后点击 **文件**▸**新建文件** 打开一个新脚本。将你的新 Python
    文件保存到 *Radio* 文件夹中，命名为 *radio_gui.py*，并输入 [代码清单 7-1](ch07.xhtml#ch07ex01) 中的代码。
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**LISTING 7-1** Building a soundboard'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码清单 7-1** 构建声音板'
- en: The program begins by importing the operating system module `os` ❶. This module
    allows you to run terminal commands within Python code and programs. As a result,
    you can assign a terminal command to each button to avoid having to type out the
    commands each time you want to play a sound.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 程序通过导入操作系统模块 `os` ❶ 开始。该模块允许你在 Python 代码和程序中运行终端命令。因此，你可以为每个按钮分配一个终端命令，以避免每次播放声音时都手动输入命令。
- en: Next, you import the `time` module and the `guizero` library, and then you import
    the `App`, `Text`, `PushButton`, `info`, and `Picture` widgets. I won’t discuss
    each of these, but together they allow you to control the GUI application, create
    push buttons to trigger the sounds, display informational pop-up windows, and
    add an image to the soundboard.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你导入`time`模块和`guizero`库，然后导入`App`、`Text`、`PushButton`、`info`和`Picture`小部件。我不会讨论这些每一个小部件，但它们共同使你能够控制GUI应用程序，创建按钮触发声音，显示信息弹出窗口，以及在声音板中添加图像。
- en: Then you create four separate functions; each holds the instructions to trigger
    one of the sound files and broadcast it to the radio.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你创建了四个独立的函数，每个函数包含触发一个声音文件并将其广播到收音机的指令。
- en: The first function is `message1()` ❷, which plays the audio file that matches
    the name of the WAV file it contains. It also prints `Hello` to the screen to
    let you know the file has been triggered.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个函数是`message1()` ❷，它播放与包含的WAV文件名匹配的音频文件。它还会在屏幕上打印`Hello`，让你知道文件已被触发。
- en: You’ll recognize the code line including `sudo ./pifm` from earlier in the chapter.
    Notice that this time it begins with `os.system()`, which tells Python to run
    the line of code as if it were written and executed from the terminal, not from
    the Python editor. The code `os.system()` is required because you’re using Python
    code to write the GUI program, and PiFM uses Linux commands. The `os.system()`
    function enables you to trigger Linux commands from within a Python program. Replace
    *hello.wav* in the code with the name of your first sound file, and adjust the
    broadcast frequency if necessary. Then add the second ❸ and third ❹ functions
    for your other audio messages, remembering to change the filenames to match the
    names of your audio WAV files.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你会认出代码行中包含的`sudo ./pifm`，它来自本章的前面部分。注意这次它以`os.system()`开头，这告诉Python像从终端执行命令一样运行这行代码，而不是从Python编辑器运行。`os.system()`函数是必需的，因为你正在使用Python代码编写GUI程序，而PiFM使用Linux命令。`os.system()`函数使你能够在Python程序中触发Linux命令。将代码中的*hello.wav*替换为你的第一个声音文件的名称，如果需要，调整广播频率。然后为你的其他音频消息添加第二个
    ❸ 和第三个 ❹ 函数，记得将文件名改为匹配你的音频WAV文件的名称。
- en: 'The fourth function closes the GUI window ❺. This function prints a short goodbye
    message and then destroys the app! This is less drastic than it sounds: the function
    `app.destroy()` simply closes the GUI.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 第四个函数关闭GUI窗口 ❺。此函数会打印一条简短的告别消息，然后销毁应用程序！这听起来不像那么严重：`app.destroy()`函数只是简单地关闭GUI。
- en: Creating the Window and Buttons
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建窗口和按钮
- en: Now you’re ready to add the code section that creates the actual GUI window
    and buttons. Add the lines in [Listing 7-2](ch07.xhtml#ch07ex02) to your *radio_gui.py*
    Python program.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以添加代码部分来创建实际的GUI窗口和按钮。将[Listing 7-2](ch07.xhtml#ch07ex02)中的行添加到你的*radio_gui.py*
    Python程序中。
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**LISTING 7-2** Building the GUI appearance'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 7-2** 构建GUI界面'
- en: The first line of code sets up the GUI window’s title and the window’s width
    and height in pixels ❶. You also set the window’s layout to a grid layout, which
    means you can use coordinates to plot and place the buttons within the window.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行代码设置了GUI窗口的标题以及窗口的宽度和高度（以像素为单位）❶。你还将窗口的布局设置为网格布局，这意味着你可以使用坐标来绘制并在窗口内放置按钮。
- en: 'Next, you add a title to the window to tell the user what the GUI does ❷. You
    set the size of the font and the font type: you can change these to personalize
    your GUI, but keep in mind that you might need to alter the width and height of
    your GUI window to fit bigger fonts.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你为窗口添加标题，告诉用户GUI的功能 ❷。你设置了字体的大小和类型：你可以更改这些以个性化你的GUI，但请记住，你可能需要调整GUI窗口的宽度和高度以适应较大的字体。
- en: You set the title to grid positions 0 and 0, which is the top line of the grid,
    and then you align it to the center of the window, making it look neat and tidy.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你将标题设置到网格位置0和0，即网格的第一行，然后将其对齐到窗口的中心，使其看起来整齐有序。
- en: Then you add the image from the book’s resources to the window ❸. The image
    must be in *.gif* format and be in the *Radio* folder. Again, you set the image’s
    grid position, this time on the second line, and align it to the top, which places
    it in the center of the GUI window.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你将从书本资源中获取的图像添加到窗口 ❸。图像必须是*.gif*格式，并且位于*Radio*文件夹中。同样，你设置图像的网格位置，这次是第二行，并将其对齐到顶部，将其放置在GUI窗口的中央。
- en: '**NOTE**'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you use a different image, you’ll need to adjust the window dimensions
    on the line at* ❶ *to ensure that the image fits.*'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果使用不同的图像，你需要调整* ❶ *中的窗口尺寸，以确保图像适配窗口。*'
- en: With the functions and GUI built, you can add the last section of the program
    that creates the buttons and assigns each function to a button. When you run the
    program, clicking a button will trigger the function to execute and then broadcast
    the audio message. Add the code in [Listing 7-3](ch07.xhtml#ch07ex03) to your
    program.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建了功能和图形用户界面（GUI）之后，您可以添加程序的最后一部分，创建按钮并将每个功能分配给一个按钮。当您运行程序时，点击按钮将触发相应的功能执行，并广播音频消息。将[清单
    7-3](ch07.xhtml#ch07ex03)中的代码添加到您的程序中。
- en: '[PRE17]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**LISTING 7-3** Creating the buttons and allocating functionality'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 7-3** 创建按钮并分配功能'
- en: You create a button with the `PushButton()` function ❶. For each button, you
    need to include the `guizero` class `PushButton`, which selects the function that
    will run when you click that button. Next, you add a label to the button by using
    text that tells the user what the button does. On the first button, the label
    `Hello` indicates that the button will broadcast the “Hello” sound. Then you set
    the button’s grid position within the GUI window. This button is located on line
    3 of the grid and aligned to the top, which places it in the center of the window.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您使用`PushButton()`函数创建一个按钮 ❶。对于每个按钮，您需要包含`guizero`类中的`PushButton`，该按钮会选择在点击时运行的功能。接下来，您为按钮添加标签，使用文本告知用户该按钮的功能。在第一个按钮上，标签`Hello`表示该按钮将广播“Hello”声音。然后，设置按钮在GUI窗口中的网格位置。该按钮位于网格的第3行，并且对齐方式为顶部，这将使它位于窗口的中央。
- en: You use the same format to code the other three buttons ❷ ❸ ❹. Remember that
    if you’ve used a different image or different text lengths or sizes, you’ll need
    to change the grid coordinates and alignment to fit the content to your GUI window.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用相同的格式编写其他三个按钮 ❷ ❸ ❹。记住，如果您使用了不同的图像或不同的文本长度或大小，您需要更改网格坐标和对齐方式，以适应内容并填充到GUI窗口中。
- en: The last line is the code to create the GUI ❺. This code pulls together all
    the elements you created and displays them. After entering the code, save your
    program, ensuring that you save it to the *Radio* folder.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行是创建GUI的代码 ❺。这段代码将您创建的所有元素整合在一起并显示出来。输入代码后，保存您的程序，确保将其保存到*Radio*文件夹中。
- en: RUNNING YOUR PROGRAM
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行程序
- en: 'To run your program, follow these steps:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行您的程序，请按照以下步骤操作：
- en: Turn on your radio and tune it to the broadcast frequency, which in this program
    is 100.0 MHz.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开收音机并调至广播频率，在本程序中为100.0 MHz。
- en: Press **F5** on the keyboard to run the program. Your GUI should load, and you
    should see the main image and four buttons.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下键盘上的**F5**键运行程序。您的GUI应该加载，并且您应该能看到主图像和四个按钮。
- en: Click one of the buttons to broadcast a sound file. The button will stay depressed
    while the sound file plays, preventing you from *spamming* the button (pressing
    the button over and over again) and blocking a broadcast.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击其中一个按钮以广播声音文件。按钮将在播放声音文件时保持按下状态，防止您*刷屏*（反复按按钮）并阻塞广播。
- en: WRAPPING UP
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: 'You can improve this project to make it do more. Try some of these enhancements
    for starters:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过改进此项目来增加更多功能。尝试以下增强功能作为起点：
- en: Add more buttons.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加更多按钮。
- en: Create a simple music machine that lets you select a song that is then broadcast
    to the radio.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的音乐播放器，允许您选择一首歌曲并将其广播到收音机。
- en: Create a Halloween scare machine by recording and sharing spooky messages or
    scary sounds with listeners.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个万圣节恐吓机器，通过录制和分享吓人的消息或恐怖声音与听众互动。
