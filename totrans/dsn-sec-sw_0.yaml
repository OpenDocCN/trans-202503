- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: This book is a guide for software professionals who want to better understand
    concepts essential to the discipline of software security and learn how to practice
    the art of secure software design and implementation. Several of the topics covered
    here I was fortunate to have innovated myself. Others, I witnessed develop and
    take root. Based on my own industry experience, this book is packed with actionable
    ideas you can start using right away to make the software you work on more secure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Two central themes run through this book: encouraging software professionals
    to focus on security early in the software construction process, and involving
    the entire team in the process of—as well as the responsibility for—security.
    There is certainly plenty of room for improvement in both of these areas, and
    this book shows how to realize these goals.'
  prefs: []
  type: TYPE_NORMAL
- en: I have had the unique opportunity of working on the front lines of software
    security over the course of my career, and now I would like to share my learnings
    as broadly as possible. Over 20 years ago, I was part of the team at Microsoft
    that first applied threat modeling at scale across a large software company. Years
    later, at Google, I participated in an evolution of the same fundamental practice,
    and experienced a whole new way of approaching the challenge. Part II of this
    book is informed by my having performed well over a hundred design reviews. Looking
    back on how far we have come provides me with a great perspective with which to
    explain it all anew.
  prefs: []
  type: TYPE_NORMAL
- en: Designing, building, and operating software systems is an inherently risky undertaking.
    Every choice, every step of the way, nudges the risk of introducing a security
    vulnerability either up or down. This book covers what I know best, learned from
    personal experience. I convey the security mindset from first principles and show
    how to bake in security throughout the development process. Along the way I provide
    examples of design and code, largely independent of specific technologies so as
    to be as broadly applicable as possible. The text is peppered with numerous stories,
    analogies, and examples to add spice and communicate abstract ideas as effectively
    as possible.
  prefs: []
  type: TYPE_NORMAL
- en: The security mindset comes more easily to some people than others, so I have
    focused on building that intuition, to help you think in new ways that will facilitate
    a software security perspective in your work. And I should add that in my own
    experience, even for those of us to whom it comes easily, there are always more
    insights to gain.
  prefs: []
  type: TYPE_NORMAL
- en: This is a concise book that covers a lot of ground, and in writing it, I have
    come to see its brevity as essential to what success it may achieve. Software
    security is a field of intimidating breadth and depth, so keeping the book shorter
    will, I hope, make it more broadly approachable. My aim is to get you thinking
    about security in new ways, and to make it easy for you to apply this new perspective
    in your own work.
  prefs: []
  type: TYPE_NORMAL
- en: Who Should Read This Book?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book is for anyone already proficient in some facet of software design
    and development, including architects, UX/UI designers, program managers, software
    engineers, programmers, testers, and management. Tech professionals should have
    no trouble following the conceptual material so long as they understand the basics
    of how software works and how it’s constructed. Software is used so pervasively
    and is of such great diversity that I won’t say *all* of it needs security; however,
    most of it likely does, and certainly any that connects to the internet or interfaces
    significantly with people.
  prefs: []
  type: TYPE_NORMAL
- en: In writing the book, I found it useful to consider three classes of prospective
    readers, and would like to offer a few words here to each of these camps.
  prefs: []
  type: TYPE_NORMAL
- en: '*Security newbies*, especially those intimidated by security, are the primary
    audience I am writing for, because it’s important that everyone working in software
    understands security so they can contribute to improving it. To make more secure
    software in the future we need everyone involved, and I hope this book will help
    those just starting to learn about security to quickly get up to speed.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Security-aware* readers are those with interest in but limited knowledge of
    security, seeking to deepen their understanding and learn more practical ways
    of applying these skills to their work. I wrote this book to fill in the gaps
    and provide plenty of ways you can immediately put what you learn here into practice.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Security experts* (you know who you are) round out the field. They may be
    familiar with much of the material, but I believe this book provides some new
    perspectives and still has much to offer them. Namely, the book includes discussions
    of important relevant topics such as secure design, security reviews, and “soft
    skills” that are rarely written about.'
  prefs: []
  type: TYPE_NORMAL
- en: Part III of this book, which covers implementation vulnerabilities and mitigations,
    includes short excerpts of code written in either C or Python. Some examples assume
    familiarity with the concept of memory allocation, as well as an understanding
    of integer and floating-point types, including binary arithmetic. In a few places
    I use mathematical formulae, but nothing more than modulo and exponential arithmetic.
    Readers who find the code or math too technical or irrelevant should feel free
    to skip over these sections without fear of losing the thread of the overall narrative.
    References such as `man(1)` are *nix (Unix family of operating systems) commands
    `(1)` and functions `(3)`.
  prefs: []
  type: TYPE_NORMAL
- en: What Topics Does the Book Cover?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The book consists of 13 chapters organized into three parts, covering concepts,
    design, and implementation, plus a conclusion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part I: Concepts'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Chapters 1 through 5 provide a conceptual basis for the rest of book. **Chapter
    1: Foundations**, is an overview of information security and privacy fundamentals.
    **Chapter 2: Threats**, introduces threat modeling, fleshing out the core concepts
    of attack surfaces and trust boundaries in the context of protecting assets. The
    next three chapters introduce valuable tools available to readers for building
    secure software. **Chapter 3: Mitigations**, discusses commonly used strategies
    for defensively mitigating identified threats. **Chapter 4: Patterns**, presents
    a number of effective security design patterns and flags some anti-patterns to
    avoid. **Chapter 5: Cryptography**, takes a toolbox approach to explaining how
    to use standard cryptographic libraries to mitigate common risks, without going
    into the underlying math (which is rarely needed in practice).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Part II: Design'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This part of the book represents perhaps its most unique and important contribution
    to prospective readers. **Chapter 6: Secure Design**, and **Chapter 7: Security
    Design Reviews**, offer guidance on secure software design and practical techniques
    for how to accomplish it, approaching the subject from the designer’s and reviewer’s
    perspectives, respectively. In the process, they explain why it’s important to
    bake security into software design from the beginning.'
  prefs: []
  type: TYPE_NORMAL
- en: These chapters draw on the ideas introduced in the first part of the book, offering
    specific methodologies for how to incorporate them to build a secure design. The
    review methodology is directly based on my industry experience, including a step-by-step
    process you can adapt to how you work. Consider browsing the sample design document
    in Appendix A while reading these chapters as an example of how to put these ideas
    into practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part III: Implementation'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Chapters 8 through 13 cover security at the implementation stage and touch
    on deployment, operations, and end-of-life. Once you have a secure design, this
    part of the book explains how to develop software without introducing additional
    vulnerabilities. These chapters include snippets of code, illustrating both how
    vulnerabilities creep into code and how to avoid them. **Chapter 8: Secure Programming**,
    introduces the security challenge that programmers face and what real vulnerabilities
    actually look like in code. **Chapter 9: Low-Level Coding Flaws**, covers the
    foibles of computer arithmetic and how C-style explicit management of dynamic
    memory allocation can undermine security. **Chapter 10: Untrusted Input**, and
    **Chapter 11: Web Security**, cover many of the commonplace bugs that have been
    well known for many years but just don’t seem to go away (such as injection, path
    traversal, XSS, and CSRF vulnerabilities). **Chapter 12: Security Testing**, covers
    the greatly underutilized practice of testing to ensure that your code is secure.
    **Chapter 13: Secure Development Best Practices**, rounds out the secure implementation
    guidance, covering some general best practices and providing cautionary warnings
    about common pitfalls.'
  prefs: []
  type: TYPE_NORMAL
- en: The excerpts of code in this part of the book generally demonstrate vulnerabilities
    to be avoided, followed by patched versions that show how to make the code secure
    (labeled “vulnerable code” and “fixed code,” respectively). As such, the code
    herein is not intended to be copied for use in production software. Even the fixed
    code could have vulnerabilities in another context due to other issues, so you
    should not consider any code presented in this book to be guaranteed secure for
    any application.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Afterword concludes the book and describes some ways that I hope it will
    make a positive impact. Here I summarize the key points made in the book, attempt
    to peer into the future, and offer speculative ideas that could help ratchet software
    security upward, beginning with a vision for how this book can contribute to more
    secure software going forward.
  prefs: []
  type: TYPE_NORMAL
- en: Appendices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Appendix A** is a sample design document that illustrates what security-aware
    design looks like in practice.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Appendix B** is a glossary of software security terms that appear throughout
    the book.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Appendix C** includes some open-ended exercises and questions that ambitious
    readers might enjoy researching.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Appendix D** consists of a collection of cheat sheets that summarize key
    concepts and processes.'
  prefs: []
  type: TYPE_NORMAL
- en: In addition, a compilation of references to sources mentioned in the book can
    be found at [https://designingsecuresoftware.com/](https://designingsecuresoftware.com/)
    (and linked from [https://nostarch.com/designing-secure-software/](https://nostarch.com/designing-secure-software/)).
  prefs: []
  type: TYPE_NORMAL
- en: Good, Safe Fun
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we get started, I’d like to add some important words of warning about
    being responsible with the security knowledge this book presents. In order to
    explain how to make software safe, I have had to describe how various vulnerabilities
    work, and how attackers potentially exploit them. Experimentation is a great way
    to hone skills from both the attack and defense perspectives, but it’s important
    to use this knowledge carefully.
  prefs: []
  type: TYPE_NORMAL
- en: Never play around by investigating security on production systems. When you
    read about cross-site scripting (XSS), for instance, you may be tempted to try
    browsing your favorite website with tricky URLs to see what happens. Please don’t.
    Even when done with the best of intentions, these explorations may look like real
    attacks to site administrators. It’s important to respect the possibility that
    others will interpret your actions as a threat—and, of course, you may be skirting
    the law in some countries. Use your common sense, including considering how your
    actions might be interpreted and the possibility of mistakes and unintended consequences,
    and err on the side of refraining. Instead, if you’d like to experiment with XSS,
    put up your own web server using fake data; you can then play around with this
    to your heart’s content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, while this book presents the best general advice I can offer based
    on many years of experience working on software security, no guidance is perfect
    or applicable in every conceivable context. Solutions mentioned herein are never
    “silver bullets”: they are suggestions, or examples of common approaches worth
    knowing about. Rely on your best judgment when assessing security decisions. No
    book can make these choices for you, but this book can help you get them right.'
  prefs: []
  type: TYPE_NORMAL
