["```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/\n     PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>CFBundleDevelopmentRegion</key>\n  <string>en</string>\n  <key>CFBundleURLTypes</key>\n  <array>\n    <dict>\n      <key>CFBundleURLSchemes</key>\n      <array>\n        <string>com.funco.myapp</string>\n      </dict>\n    </array>\n    <key>CFBundleDisplayName</key>\n    <string>${PRODUCT_NAME}</string>\n    <key>CFBundleExecutable</key>\n    <string>${EXECUTABLE_NAME}</string>\n```", "```\nNSURL *myURL = [NSURL URLWithString:@\"someotherapp://somestuff?someparameter=avalue\n     &otherparameter=anothervalue\"];\n\n[[UIApplication sharedApplication] openURL:myURL];\n```", "```\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NS\n     Dictionary *)launchOptions {\n\n    if ([launchOptions objectForKey:UIApplicationLaunchOptionsURLKey] != nil) {\n        NSURL *url = (NSURL *)[launchOptions valueForKey:UI\n     ApplicationLaunchOptionsURLKey];\n        if ([url query] != nil) {\n            NSString *theQuery = [[url query]\n     stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n            if (![self isValidQuery:theQuery]) {\n                return NO;\n            }\n            return YES;\n        }\n    }\n}\n```", "```\n   - (BOOL)application:(UIApplication *)application openURL:(NSURL *)url\n        sourceApplication:(NSString *)sourceApplication annotation:\n        (id)annotation {\n\n➊     if ([sourceApplication isEqualToString:@\"com.apple.mobilesafari\"]) {\n           NSLog(@\"Loading app from Safari\");\n           return NO; // We don't want to be called by web pages\n       }\n       else {\n➋         NSString *theQuery = [[url query]\n        stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n➌         NSArray *chunks = [theQuery componentsSeparatedByString:@\"&\"];\n           for (NSString* chunk in chunks) {\n➍              NSArray *keyval = [chunk componentsSeparatedByString:@\"=\"];\n➎              NSString *key = [keyval objectAtIndex:0];\n               NSString *value = [keyval objectAtIndex:1];\n➏              // Do something with your key and value\n               --snip--\n               return YES;\n           }\n       }\n   }\n```", "```\nNSCharacterSet* notNumeric = [[NSCharacterSet decimalDigitCharacterSet] invertedSet\n     ];\nif ([value rangeOfCharacterFromSet:notDigits].location != NSNotFound) {\n    return NO; // We didn't get a numeric value\n}\n```", "```\n- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url\n```", "```\n   {\n      \"applinks\": {\n         \"apps\": [],\n         \"details\": {\n➊          \"FAFBQM3A4N.com.hoopchat.messenger\": {\n➋            \"paths\": [ \"*\" ]\n            }\n         }\n      }\n   }\n```", "```\n   openssl smime \\\n       -sign \\\n       -nodetach \\\n➊     -in \"unsigned.json\" \\\n➋         -out \"apple-app-site-association\" \\\n       -outform DER \\\n➌         -inkey \"private-key.pem\" \\\n➍         -signer \"certificate.pem\"\n```", "```\nNSString *text = @\"Check out this highly adequate iOS security resource\";\nNSURL *url = [NSURL URLWithString:@\"http://nostarch.com/iossecurity/\"];\n\nUIActivityViewController *controller = [[UIActivityViewController alloc]\n                            initWithActivityItems:@[text, url]\n                            applicationActivities:nil];\n\n[navigationController presentViewController:controller animated:YES completion:nil\n     ];\n```", "```\n[controller setExcludedActivityTypes:@[UIActivityTypePostToFacebook,\n                                       UIActivityTypePostToTwitter\n                                       UIActivityTypePostToWeibo\n                                       UIActivityTypePostToTencentWeibo\n                                       UIActivityTypePostToFlickr\n                                       UIActivityTypePostToVimeo\n                                       UIActivityTypeMessage\n                                       UIActivityTypeCopyToPasteboard\n                                       UIActivityTypeAssignToContact\n                                       UIActivityTypeSaveToCameraRoll\n                                       UIActivityTypeAddToReadingList\n                                       UIActivityTypeAirDrop];\n```", "```\n$ find . -name \"*.plist\" |xargs grep NSExtensionPointIdentifier\n```", "```\nNSExtensionContext *context = [self extensionContext];\nNSArray *items = [context inputItems];\n```", "```\n- (BOOL)application:(UIApplication *)application\n     shouldAllowExtensionPointIdentifier:(NSString *)extensionPointIdentifier {\n    if ([extensionPointIdentifier isEqualToString:UI\n     ApplicationKeyboardExtensionPointIdentifier]) {\n        return NO;\n    }\n    return YES;\n}\n```", "```\n   - (void) pasteboardChanged: (NSNotification *) note {\n➊     UIPasteboard *pb = [UIPasteboard generalPasteboard];\n\n       if ([note.userInfo objectForKey:UIPasteboardChangedTypesAddedKey] == nil)\n        return;\n       NSString *copied = pb.string;\n\n       if (copied.length != 7 || !copied.oauthtwitter_isNumeric) return;\n➋     [self gotPin:copied];\n   }\n```"]