["```\nsage: **p = random_prime(2^32); p**\n1103222539\nsage: **q = random_prime(2^32); q**\n17870599\nsage: **n = p*q; n**\n19715247602230861\nsage: **phi = (p-1)*(q-1); phi**\n19715246481137724\nsage: **e = random_prime(phi); e**\n13771927877214701\nsage: **d = xgcd(e, phi)[1]; d = mod(d, phi)**\n11417851791646385\nsage: **mod(d*e, phi)**\n1\n```", "```\nsage: **x = 1234567**\nsage: **y = power_mod(x, e, n); y**\n17129109575774132\nsage: **power_mod(y, d, n)**\n1234567\n```", "```\nfunc EncryptOAEP(hash hash.Hash, random io.Reader, pub *PublicKey, msg []byte, label []byte) (out []byte, err error)\n```", "```\nfunc encrypt(c *big.Int, pub *PublicKey, m *big.Int) *big.Int {\n    e := big.NewInt(int64(pub.E))\n    c.Exp(m, e, pub.N)\n    return c\n}\n```", "```\nexpModNaive(x, e, n) {\n    y = x\n    for i = 1 to e – 1 {\n        y = y * x mod n\n    }\n return y\n}\n```", "```\nexpMod(x, e, n) {\n    y = x\n    for i = m – 1 to 0 {\n        y = y * y  mod n\n        if ei == 1 then\n            y = y * x  mod n\n    }\n    return y\n}\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Doing 1024 bits private rsa sign ops for 10s: 119019 1024 bits private RSA sign ops in 9.93s</samp>\nDoing 1024 bits public rsa verify ops for 10s: 2573979 1024 bits public RSA verify ops in 9.93s\nDoing 2048 bits private rsa sign ops for 10s: 19184 2048 bits private RSA sign ops in 9.93s\nDoing 2048 bits public rsa verify ops for 10s: 769696 2048 bits public RSA verify ops in 9.93s\nDoing 4096 bits private rsa sign ops for 10s: 3005 4096 bits private RSA sign ops in 9.92s\nDoing 4096 bits public rsa verify ops for 10s: 206367 4096 bits public RSA verify ops in 9.91s\n\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">sign    verify   sign/s verify/s</samp>\nrsa 1024 bits 0.000083s 0.000004s 11985.8 259212.4\nrsa 2048 bits 0.000518s 0.000013s  1931.9  77512.2\nrsa 4096 bits 0.003301s 0.000048s   302.9  20824.1\n`--snip--`\n```", "```\nfrom math import gcd\n\nn = 36567232109354321\ne = 13771927877214701\nd = 15417970063428857\n\n❶ kphi = d*e - 1\nt = kphi\n\n❷ while t % 2 == 0:\n    t = divmod(t, 2)[0]\n\n❸ a = 2\nwhile a < 100:\n  ❹ k = t\n    while k < kphi:\n        x = pow(a, k, n)\n      ❺ if x != 1 and x != (n - 1) and pow(x, 2, n) == 1:\n          ❻ p = gcd(x - 1, n)\n            break\n        k = k*2\n    a = a + 2\n\nq = n//p\n❼ assert (p*q) == n\nprint('p = ', p)\nprint('q = ', q)\n```", "```\np = 2046223079\nq = 17870599\n```"]